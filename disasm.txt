
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 9a d4 00 00       	call   c000d4ba <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 53 e6 01 00       	call   c001e678 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 54 f2 01 c0       	mov    ebx,0xc001f254
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 5c f2 01 c0    	cmp    ebx,0xc001f25c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 28 b1 03 c0       	mov    eax,0xc003b128
c0000049:	3d 28 b1 03 c0       	cmp    eax,0xc003b128
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 28 b1 03 c0       	push   0xc003b128
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 28 b1 03 c0       	mov    eax,0xc003b128
c0000075:	2d 28 b1 03 c0       	sub    eax,0xc003b128
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 28 b1 03 c0       	push   0xc003b128
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c8 b2 03 c0 00 	cmp    BYTE PTR ds:0xc003b2c8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 64 f2 01 c0       	mov    ebx,0xc001f264
c00000bb:	81 eb 60 f2 01 c0    	sub    ebx,0xc001f260
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 60 f2 01 c0       	mov    esi,0xc001f260
c00000ca:	a1 cc b2 03 c0       	mov    eax,ds:0xc003b2cc
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 cc b2 03 c0       	mov    ds:0xc003b2cc,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 cc b2 03 c0       	mov    eax,ds:0xc003b2cc
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 28 b1 03 c0       	push   0xc003b128
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c8 b2 03 c0 01 	mov    BYTE PTR ds:0xc003b2c8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 d0 b2 03 c0       	push   0xc003b2d0
c000012c:	68 28 b1 03 c0       	push   0xc003b128
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <doTPAUSE>:
c0000150:	fb                   	sti    
c0000151:	31 c0                	xor    eax,eax
c0000153:	31 d2                	xor    edx,edx
c0000155:	66 0f ae f0          	tpause eax
c0000159:	c3                   	ret    

c000015a <hasLegacyFPU>:
c000015a:	0f 20 c2             	mov    edx,cr0
c000015d:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000163:	0f 22 c2             	mov    cr0,edx
c0000166:	db e3                	fninit 
c0000168:	dd 3d 7d 01 00 c0    	fnstsw WORD PTR ds:0xc000017d
c000016e:	31 c0                	xor    eax,eax
c0000170:	66 81 3d 7d 01 00 c0 00 00 	cmp    WORD PTR ds:0xc000017d,0x0
c0000179:	75 01                	jne    c000017c <hasLegacyFPU.nofpu>

c000017b <hasLegacyFPU.hasfpu>:
c000017b:	40                   	inc    eax

c000017c <hasLegacyFPU.nofpu>:
c000017c:	c3                   	ret    

c000017d <testword>:
c000017d:	aa                   	stos   BYTE PTR es:[edi],al
c000017e:	55                   	push   ebp

c000017f <is486>:
c000017f:	0f 09                	wbinvd 
c0000181:	31 c0                	xor    eax,eax
c0000183:	40                   	inc    eax
c0000184:	c3                   	ret    
c0000185:	90                   	nop
c0000186:	90                   	nop
c0000187:	90                   	nop
c0000188:	90                   	nop
c0000189:	90                   	nop
c000018a:	90                   	nop
c000018b:	90                   	nop
c000018c:	90                   	nop
c000018d:	90                   	nop
c000018e:	90                   	nop
c000018f:	90                   	nop
c0000190:	90                   	nop
c0000191:	90                   	nop
c0000192:	90                   	nop
c0000193:	90                   	nop
c0000194:	90                   	nop
c0000195:	90                   	nop
c0000196:	90                   	nop
c0000197:	90                   	nop
c0000198:	90                   	nop
c0000199:	90                   	nop
c000019a:	90                   	nop
c000019b:	90                   	nop
c000019c:	90                   	nop
c000019d:	90                   	nop
c000019e:	90                   	nop
c000019f:	90                   	nop
c00001a0:	90                   	nop
c00001a1:	90                   	nop
c00001a2:	90                   	nop
c00001a3:	90                   	nop
c00001a4:	90                   	nop
c00001a5:	90                   	nop
c00001a6:	90                   	nop
c00001a7:	90                   	nop
c00001a8:	90                   	nop
c00001a9:	90                   	nop
c00001aa:	90                   	nop
c00001ab:	90                   	nop
c00001ac:	90                   	nop
c00001ad:	90                   	nop
c00001ae:	90                   	nop
c00001af:	90                   	nop
c00001b0:	90                   	nop
c00001b1:	90                   	nop
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	c3                   	ret    

c00001b5 <goToVM86>:
c00001b5:	fa                   	cli    
c00001b6:	55                   	push   ebp
c00001b7:	89 e5                	mov    ebp,esp
c00001b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bc:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00001bf:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00001c2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00001c5:	25 ff ff 00 00       	and    eax,0xffff
c00001ca:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00001d0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00001d6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00001dc:	52                   	push   edx
c00001dd:	51                   	push   ecx
c00001de:	68 02 02 02 00       	push   0x20202
c00001e3:	53                   	push   ebx
c00001e4:	50                   	push   eax
c00001e5:	cf                   	iret   

c00001e6 <goToUsermode>:
c00001e6:	fa                   	cli    
c00001e7:	55                   	push   ebp
c00001e8:	89 e5                	mov    ebp,esp
c00001ea:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00001ed:	66 b8 23 00          	mov    ax,0x23
c00001f1:	66 8e d8             	mov    ds,ax
c00001f4:	66 8e c0             	mov    es,ax
c00001f7:	66 8e e0             	mov    fs,ax
c00001fa:	66 8e e8             	mov    gs,ax
c00001fd:	89 e0                	mov    eax,esp
c00001ff:	68 23 00 00 00       	push   0x23
c0000204:	50                   	push   eax
c0000205:	68 02 02 00 00       	push   0x202
c000020a:	68 1b 00 00 00       	push   0x1b
c000020f:	53                   	push   ebx
c0000210:	cf                   	iret   

c0000211 <switchToThreadASMFirstTime>:
c0000211:	9c                   	pushf  
c0000212:	fa                   	cli    
c0000213:	50                   	push   eax
c0000214:	53                   	push   ebx
c0000215:	51                   	push   ecx
c0000216:	52                   	push   edx
c0000217:	56                   	push   esi
c0000218:	57                   	push   edi
c0000219:	55                   	push   ebp
c000021a:	e9 11 00 00 00       	jmp    c0000230 <commonThreadSwitch>

c000021f <switchToThreadASM>:
c000021f:	9c                   	pushf  
c0000220:	50                   	push   eax
c0000221:	53                   	push   ebx
c0000222:	51                   	push   ecx
c0000223:	52                   	push   edx
c0000224:	56                   	push   esi
c0000225:	57                   	push   edi
c0000226:	55                   	push   ebp
c0000227:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c000022d:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000230 <commonThreadSwitch>:
c0000230:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000234:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000023a:	8b 06                	mov    eax,DWORD PTR [esi]
c000023c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000023f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000242:	0f 20 d9             	mov    ecx,cr3
c0000245:	39 c8                	cmp    eax,ecx
c0000247:	74 03                	je     c000024c <commonThreadSwitch.doneVAS>
c0000249:	0f 22 d8             	mov    cr3,eax

c000024c <commonThreadSwitch.doneVAS>:
c000024c:	85 d2                	test   edx,edx
c000024e:	74 4e                	je     c000029e <commonThreadSwitch.notFirstTime>
c0000250:	fa                   	cli    
c0000251:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000254:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000259:	60                   	pusha  
c000025a:	e8 e5 1d 01 00       	call   c0012044 <mapVASFirstTime>
c000025f:	61                   	popa   
c0000260:	89 c4                	mov    esp,eax
c0000262:	56                   	push   esi
c0000263:	52                   	push   edx
c0000264:	e8 29 da 00 00       	call   c000dc92 <changeTSS>
c0000269:	5a                   	pop    edx
c000026a:	5e                   	pop    esi
c000026b:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000272:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000278:	74 39                	je     c00002b3 <commonThreadSwitch.cameOffAFork>
c000027a:	5d                   	pop    ebp
c000027b:	5f                   	pop    edi
c000027c:	5e                   	pop    esi
c000027d:	59                   	pop    ecx
c000027e:	59                   	pop    ecx
c000027f:	5b                   	pop    ebx
c0000280:	58                   	pop    eax
c0000281:	81 c4 04 00 00 00    	add    esp,0x4
c0000287:	6a 02                	push   0x2
c0000289:	9d                   	popf   
c000028a:	52                   	push   edx
c000028b:	e8 15 de 00 00       	call   c000e0a5 <taskStartupFunction>
c0000290:	5a                   	pop    edx
c0000291:	50                   	push   eax
c0000292:	ff d2                	call   edx
c0000294:	e8 bb e5 00 00       	call   c000e854 <taskReturned>
c0000299:	e9 fb ff ff ff       	jmp    c0000299 <commonThreadSwitch.doneVAS+0x4d>

c000029e <commonThreadSwitch.notFirstTime>:
c000029e:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a1:	56                   	push   esi
c00002a2:	52                   	push   edx
c00002a3:	e8 ea d9 00 00       	call   c000dc92 <changeTSS>
c00002a8:	5a                   	pop    edx
c00002a9:	5e                   	pop    esi
c00002aa:	5d                   	pop    ebp
c00002ab:	5f                   	pop    edi
c00002ac:	5e                   	pop    esi
c00002ad:	5a                   	pop    edx
c00002ae:	59                   	pop    ecx
c00002af:	5b                   	pop    ebx
c00002b0:	58                   	pop    eax
c00002b1:	9d                   	popf   
c00002b2:	c3                   	ret    

c00002b3 <commonThreadSwitch.cameOffAFork>:
c00002b3:	31 c0                	xor    eax,eax
c00002b5:	31 d2                	xor    edx,edx
c00002b7:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c00002ba:	e9 a2 02 00 00       	jmp    c0000561 <offAForkJumpThingy>

c00002bf <detectCPUID>:
c00002bf:	9c                   	pushf  
c00002c0:	9c                   	pushf  
c00002c1:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002c8:	9d                   	popf   
c00002c9:	9c                   	pushf  
c00002ca:	58                   	pop    eax
c00002cb:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002ce:	9d                   	popf   
c00002cf:	25 00 00 20 00       	and    eax,0x200000
c00002d4:	c3                   	ret    

c00002d5 <asmQuickAcquireLock>:
c00002d5:	55                   	push   ebp
c00002d6:	89 e5                	mov    ebp,esp
c00002d8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00002db <asmQuickAcquireLock.retry>:
c00002db:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00002e0:	72 02                	jb     c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002e2:	fa                   	cli    
c00002e3:	c3                   	ret    

c00002e4 <asmQuickAcquireLock.spin_with_pause>:
c00002e4:	f3 90                	pause  
c00002e6:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00002ec:	75 f6                	jne    c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002ee:	e9 e8 ff ff ff       	jmp    c00002db <asmQuickAcquireLock.retry>

c00002f3 <asmQuickReleaseLock>:
c00002f3:	55                   	push   ebp
c00002f4:	89 e5                	mov    ebp,esp
c00002f6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00002fd:	5d                   	pop    ebp
c00002fe:	c3                   	ret    

c00002ff <asmAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 05                	jb     c0000311 <asmAcquireLock.spin_with_pause>
c000030c:	9c                   	pushf  
c000030d:	58                   	pop    eax
c000030e:	fa                   	cli    
c000030f:	5d                   	pop    ebp
c0000310:	c3                   	ret    

c0000311 <asmAcquireLock.spin_with_pause>:
c0000311:	f3 90                	pause  
c0000313:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000319:	75 f6                	jne    c0000311 <asmAcquireLock.spin_with_pause>
c000031b:	e9 e5 ff ff ff       	jmp    c0000305 <asmAcquireLock.retry>

c0000320 <asmReleaseLock>:
c0000320:	55                   	push   ebp
c0000321:	89 e5                	mov    ebp,esp
c0000323:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000326:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000329:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000032f:	52                   	push   edx
c0000330:	9d                   	popf   
c0000331:	5d                   	pop    ebp
c0000332:	c3                   	ret    

c0000333 <loadGDT>:
c0000333:	0f 01 15 a4 b8 03 c0 	lgdtd  ds:0xc003b8a4
c000033a:	66 b8 10 00          	mov    ax,0x10
c000033e:	66 8e d8             	mov    ds,ax
c0000341:	66 8e c0             	mov    es,ax
c0000344:	66 8e e0             	mov    fs,ax
c0000347:	66 8e e8             	mov    gs,ax
c000034a:	66 8e d0             	mov    ss,ax
c000034d:	e9 00 00 00 00       	jmp    c0000352 <flush2>

c0000352 <flush2>:
c0000352:	c3                   	ret    

c0000353 <isr0>:
c0000353:	fa                   	cli    
c0000354:	68 00 00 00 00       	push   0x0
c0000359:	68 00 00 00 00       	push   0x0
c000035e:	e9 a2 01 00 00       	jmp    c0000505 <int_common_stub>

c0000363 <isr1>:
c0000363:	fa                   	cli    
c0000364:	6a 00                	push   0x0
c0000366:	6a 01                	push   0x1
c0000368:	e9 98 01 00 00       	jmp    c0000505 <int_common_stub>

c000036d <isr2>:
c000036d:	fa                   	cli    
c000036e:	6a 00                	push   0x0
c0000370:	6a 02                	push   0x2
c0000372:	e9 8e 01 00 00       	jmp    c0000505 <int_common_stub>

c0000377 <isr3>:
c0000377:	fa                   	cli    
c0000378:	6a 00                	push   0x0
c000037a:	6a 03                	push   0x3
c000037c:	e9 84 01 00 00       	jmp    c0000505 <int_common_stub>

c0000381 <isr4>:
c0000381:	fa                   	cli    
c0000382:	6a 00                	push   0x0
c0000384:	6a 04                	push   0x4
c0000386:	e9 7a 01 00 00       	jmp    c0000505 <int_common_stub>

c000038b <isr5>:
c000038b:	fa                   	cli    
c000038c:	6a 00                	push   0x0
c000038e:	6a 05                	push   0x5
c0000390:	e9 70 01 00 00       	jmp    c0000505 <int_common_stub>

c0000395 <isr6>:
c0000395:	fa                   	cli    
c0000396:	6a 00                	push   0x0
c0000398:	6a 06                	push   0x6
c000039a:	e9 66 01 00 00       	jmp    c0000505 <int_common_stub>

c000039f <isr7>:
c000039f:	fa                   	cli    
c00003a0:	6a 00                	push   0x0
c00003a2:	6a 07                	push   0x7
c00003a4:	e9 5c 01 00 00       	jmp    c0000505 <int_common_stub>

c00003a9 <isr8>:
c00003a9:	fa                   	cli    
c00003aa:	6a 08                	push   0x8
c00003ac:	e9 54 01 00 00       	jmp    c0000505 <int_common_stub>

c00003b1 <isr9>:
c00003b1:	fa                   	cli    
c00003b2:	6a 00                	push   0x0
c00003b4:	6a 09                	push   0x9
c00003b6:	e9 4a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003bb <isr10>:
c00003bb:	fa                   	cli    
c00003bc:	6a 0a                	push   0xa
c00003be:	e9 42 01 00 00       	jmp    c0000505 <int_common_stub>

c00003c3 <isr11>:
c00003c3:	fa                   	cli    
c00003c4:	6a 0b                	push   0xb
c00003c6:	e9 3a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003cb <isr12>:
c00003cb:	fa                   	cli    
c00003cc:	6a 0c                	push   0xc
c00003ce:	e9 32 01 00 00       	jmp    c0000505 <int_common_stub>

c00003d3 <isr13>:
c00003d3:	fa                   	cli    
c00003d4:	6a 0d                	push   0xd
c00003d6:	e9 2a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003db <isr14>:
c00003db:	fa                   	cli    
c00003dc:	6a 0e                	push   0xe
c00003de:	e9 22 01 00 00       	jmp    c0000505 <int_common_stub>

c00003e3 <isr15>:
c00003e3:	fa                   	cli    
c00003e4:	6a 00                	push   0x0
c00003e6:	6a 0f                	push   0xf
c00003e8:	e9 18 01 00 00       	jmp    c0000505 <int_common_stub>

c00003ed <isr16>:
c00003ed:	fa                   	cli    
c00003ee:	6a 00                	push   0x0
c00003f0:	6a 10                	push   0x10
c00003f2:	e9 0e 01 00 00       	jmp    c0000505 <int_common_stub>

c00003f7 <isr17>:
c00003f7:	fa                   	cli    
c00003f8:	6a 00                	push   0x0
c00003fa:	6a 11                	push   0x11
c00003fc:	e9 04 01 00 00       	jmp    c0000505 <int_common_stub>

c0000401 <isr18>:
c0000401:	fa                   	cli    
c0000402:	6a 00                	push   0x0
c0000404:	6a 12                	push   0x12
c0000406:	e9 fa 00 00 00       	jmp    c0000505 <int_common_stub>

c000040b <isr96>:
c000040b:	fa                   	cli    
c000040c:	6a 00                	push   0x0
c000040e:	6a 60                	push   0x60
c0000410:	e9 20 01 00 00       	jmp    c0000535 <syscall_common_stub>

c0000415 <irq0>:
c0000415:	fa                   	cli    
c0000416:	6a 00                	push   0x0
c0000418:	6a 20                	push   0x20
c000041a:	e9 e6 00 00 00       	jmp    c0000505 <int_common_stub>

c000041f <irq1>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 21                	push   0x21
c0000424:	e9 dc 00 00 00       	jmp    c0000505 <int_common_stub>

c0000429 <irq2>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 22                	push   0x22
c000042e:	e9 d2 00 00 00       	jmp    c0000505 <int_common_stub>

c0000433 <irq3>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 23                	push   0x23
c0000438:	e9 c8 00 00 00       	jmp    c0000505 <int_common_stub>

c000043d <irq4>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 24                	push   0x24
c0000442:	e9 be 00 00 00       	jmp    c0000505 <int_common_stub>

c0000447 <irq5>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 25                	push   0x25
c000044c:	e9 b4 00 00 00       	jmp    c0000505 <int_common_stub>

c0000451 <irq6>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 26                	push   0x26
c0000456:	e9 aa 00 00 00       	jmp    c0000505 <int_common_stub>

c000045b <irq7>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 27                	push   0x27
c0000460:	e9 a0 00 00 00       	jmp    c0000505 <int_common_stub>

c0000465 <irq8>:
c0000465:	fa                   	cli    
c0000466:	6a 00                	push   0x0
c0000468:	6a 28                	push   0x28
c000046a:	e9 96 00 00 00       	jmp    c0000505 <int_common_stub>

c000046f <irq9>:
c000046f:	fa                   	cli    
c0000470:	6a 00                	push   0x0
c0000472:	6a 29                	push   0x29
c0000474:	e9 8c 00 00 00       	jmp    c0000505 <int_common_stub>

c0000479 <irq10>:
c0000479:	fa                   	cli    
c000047a:	6a 00                	push   0x0
c000047c:	6a 2a                	push   0x2a
c000047e:	e9 82 00 00 00       	jmp    c0000505 <int_common_stub>

c0000483 <irq11>:
c0000483:	fa                   	cli    
c0000484:	6a 00                	push   0x0
c0000486:	6a 2b                	push   0x2b
c0000488:	e9 78 00 00 00       	jmp    c0000505 <int_common_stub>

c000048d <irq12>:
c000048d:	fa                   	cli    
c000048e:	6a 00                	push   0x0
c0000490:	6a 2c                	push   0x2c
c0000492:	e9 6e 00 00 00       	jmp    c0000505 <int_common_stub>

c0000497 <irq13>:
c0000497:	fa                   	cli    
c0000498:	6a 00                	push   0x0
c000049a:	6a 2d                	push   0x2d
c000049c:	e9 64 00 00 00       	jmp    c0000505 <int_common_stub>

c00004a1 <irq14>:
c00004a1:	fa                   	cli    
c00004a2:	6a 00                	push   0x0
c00004a4:	6a 2e                	push   0x2e
c00004a6:	e9 5a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004ab <irq15>:
c00004ab:	fa                   	cli    
c00004ac:	6a 00                	push   0x0
c00004ae:	6a 2f                	push   0x2f
c00004b0:	e9 50 00 00 00       	jmp    c0000505 <int_common_stub>

c00004b5 <irq16>:
c00004b5:	fa                   	cli    
c00004b6:	6a 00                	push   0x0
c00004b8:	6a 30                	push   0x30
c00004ba:	e9 46 00 00 00       	jmp    c0000505 <int_common_stub>

c00004bf <irq17>:
c00004bf:	fa                   	cli    
c00004c0:	6a 00                	push   0x0
c00004c2:	6a 31                	push   0x31
c00004c4:	e9 3c 00 00 00       	jmp    c0000505 <int_common_stub>

c00004c9 <irq18>:
c00004c9:	fa                   	cli    
c00004ca:	6a 00                	push   0x0
c00004cc:	6a 32                	push   0x32
c00004ce:	e9 32 00 00 00       	jmp    c0000505 <int_common_stub>

c00004d3 <irq19>:
c00004d3:	fa                   	cli    
c00004d4:	6a 00                	push   0x0
c00004d6:	6a 33                	push   0x33
c00004d8:	e9 28 00 00 00       	jmp    c0000505 <int_common_stub>

c00004dd <irq20>:
c00004dd:	fa                   	cli    
c00004de:	6a 00                	push   0x0
c00004e0:	6a 34                	push   0x34
c00004e2:	e9 1e 00 00 00       	jmp    c0000505 <int_common_stub>

c00004e7 <irq21>:
c00004e7:	fa                   	cli    
c00004e8:	6a 00                	push   0x0
c00004ea:	6a 35                	push   0x35
c00004ec:	e9 14 00 00 00       	jmp    c0000505 <int_common_stub>

c00004f1 <irq22>:
c00004f1:	fa                   	cli    
c00004f2:	6a 00                	push   0x0
c00004f4:	6a 36                	push   0x36
c00004f6:	e9 0a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004fb <irq23>:
c00004fb:	fa                   	cli    
c00004fc:	6a 00                	push   0x0
c00004fe:	6a 37                	push   0x37
c0000500:	e9 00 00 00 00       	jmp    c0000505 <int_common_stub>

c0000505 <int_common_stub>:
c0000505:	60                   	pusha  
c0000506:	1e                   	push   ds
c0000507:	06                   	push   es
c0000508:	0f a0                	push   fs
c000050a:	0f a8                	push   gs
c000050c:	66 b8 10 00          	mov    ax,0x10
c0000510:	66 8e d8             	mov    ds,ax
c0000513:	66 8e c0             	mov    es,ax
c0000516:	66 8e e0             	mov    fs,ax
c0000519:	66 8e e8             	mov    gs,ax
c000051c:	89 e1                	mov    ecx,esp
c000051e:	51                   	push   ecx
c000051f:	b9 07 3d 01 c0       	mov    ecx,0xc0013d07
c0000524:	ff d1                	call   ecx
c0000526:	59                   	pop    ecx
c0000527:	0f a9                	pop    gs
c0000529:	0f a1                	pop    fs
c000052b:	07                   	pop    es
c000052c:	1f                   	pop    ds
c000052d:	61                   	popa   
c000052e:	81 c4 08 00 00 00    	add    esp,0x8
c0000534:	cf                   	iret   

c0000535 <syscall_common_stub>:
c0000535:	60                   	pusha  
c0000536:	1e                   	push   ds
c0000537:	06                   	push   es
c0000538:	0f a0                	push   fs
c000053a:	0f a8                	push   gs
c000053c:	66 b8 10 00          	mov    ax,0x10
c0000540:	66 8e d8             	mov    ds,ax
c0000543:	66 8e c0             	mov    es,ax
c0000546:	66 8e e0             	mov    fs,ax
c0000549:	66 8e e8             	mov    gs,ax
c000054c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000552:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000555:	89 e1                	mov    ecx,esp
c0000557:	51                   	push   ecx
c0000558:	fb                   	sti    
c0000559:	b9 07 3d 01 c0       	mov    ecx,0xc0013d07
c000055e:	ff d1                	call   ecx
c0000560:	59                   	pop    ecx

c0000561 <offAForkJumpThingy>:
c0000561:	0f a9                	pop    gs
c0000563:	0f a1                	pop    fs
c0000565:	07                   	pop    es
c0000566:	1f                   	pop    ds
c0000567:	61                   	popa   
c0000568:	81 c4 08 00 00 00    	add    esp,0x8
c000056e:	cf                   	iret   

c000056f <memcmp>:
c000056f:	56                   	push   esi
c0000570:	53                   	push   ebx
c0000571:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000575:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000579:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000057d:	01 d6                	add    esi,edx
c000057f:	39 f2                	cmp    edx,esi
c0000581:	74 0e                	je     c0000591 <memcmp+0x22>
c0000583:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000586:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000589:	38 c8                	cmp    al,cl
c000058b:	75 08                	jne    c0000595 <memcmp+0x26>
c000058d:	42                   	inc    edx
c000058e:	43                   	inc    ebx
c000058f:	eb ee                	jmp    c000057f <memcmp+0x10>
c0000591:	31 c0                	xor    eax,eax
c0000593:	eb 02                	jmp    c0000597 <memcmp+0x28>
c0000595:	29 c8                	sub    eax,ecx
c0000597:	5b                   	pop    ebx
c0000598:	5e                   	pop    esi
c0000599:	c3                   	ret    

c000059a <memmove>:
c000059a:	56                   	push   esi
c000059b:	53                   	push   ebx
c000059c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00005a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00005a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00005a8:	39 c8                	cmp    eax,ecx
c00005aa:	73 12                	jae    c00005be <memmove+0x24>
c00005ac:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00005af:	89 c3                	mov    ebx,eax
c00005b1:	39 f1                	cmp    ecx,esi
c00005b3:	74 1a                	je     c00005cf <memmove+0x35>
c00005b5:	8a 11                	mov    dl,BYTE PTR [ecx]
c00005b7:	43                   	inc    ebx
c00005b8:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00005bb:	41                   	inc    ecx
c00005bc:	eb f3                	jmp    c00005b1 <memmove+0x17>
c00005be:	76 0f                	jbe    c00005cf <memmove+0x35>
c00005c0:	85 d2                	test   edx,edx
c00005c2:	74 0b                	je     c00005cf <memmove+0x35>
c00005c4:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c00005c8:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c00005cc:	4a                   	dec    edx
c00005cd:	eb f1                	jmp    c00005c0 <memmove+0x26>
c00005cf:	5b                   	pop    ebx
c00005d0:	5e                   	pop    esi
c00005d1:	c3                   	ret    

c00005d2 <memcpy>:
c00005d2:	57                   	push   edi
c00005d3:	56                   	push   esi
c00005d4:	53                   	push   ebx
c00005d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005dd:	89 da                	mov    edx,ebx
c00005df:	89 d9                	mov    ecx,ebx
c00005e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005e5:	83 e2 fc             	and    edx,0xfffffffc
c00005e8:	c1 e9 02             	shr    ecx,0x2
c00005eb:	89 c7                	mov    edi,eax
c00005ed:	fc                   	cld    
c00005ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00005f0:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00005f3:	01 c2                	add    edx,eax
c00005f5:	01 de                	add    esi,ebx
c00005f7:	39 f1                	cmp    ecx,esi
c00005f9:	74 09                	je     c0000604 <memcpy+0x32>
c00005fb:	8a 19                	mov    bl,BYTE PTR [ecx]
c00005fd:	42                   	inc    edx
c00005fe:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000601:	41                   	inc    ecx
c0000602:	eb f3                	jmp    c00005f7 <memcpy+0x25>
c0000604:	5b                   	pop    ebx
c0000605:	5e                   	pop    esi
c0000606:	5f                   	pop    edi
c0000607:	c3                   	ret    

c0000608 <memset>:
c0000608:	53                   	push   ebx
c0000609:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000060d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000611:	89 c2                	mov    edx,eax
c0000613:	01 c1                	add    ecx,eax
c0000615:	39 ca                	cmp    edx,ecx
c0000617:	74 0a                	je     c0000623 <memset+0x1b>
c0000619:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c000061d:	42                   	inc    edx
c000061e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000621:	eb f2                	jmp    c0000615 <memset+0xd>
c0000623:	5b                   	pop    ebx
c0000624:	c3                   	ret    

c0000625 <strlen>:
c0000625:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000629:	31 c0                	xor    eax,eax
c000062b:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000062f:	74 03                	je     c0000634 <strlen+0xf>
c0000631:	40                   	inc    eax
c0000632:	eb f7                	jmp    c000062b <strlen+0x6>
c0000634:	c3                   	ret    

c0000635 <strpbrk>:
c0000635:	53                   	push   ebx
c0000636:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000063a:	8a 08                	mov    cl,BYTE PTR [eax]
c000063c:	84 c9                	test   cl,cl
c000063e:	74 14                	je     c0000654 <strpbrk+0x1f>
c0000640:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000644:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000646:	84 db                	test   bl,bl
c0000648:	74 07                	je     c0000651 <strpbrk+0x1c>
c000064a:	38 cb                	cmp    bl,cl
c000064c:	74 08                	je     c0000656 <strpbrk+0x21>
c000064e:	42                   	inc    edx
c000064f:	eb f3                	jmp    c0000644 <strpbrk+0xf>
c0000651:	40                   	inc    eax
c0000652:	eb e6                	jmp    c000063a <strpbrk+0x5>
c0000654:	31 c0                	xor    eax,eax
c0000656:	5b                   	pop    ebx
c0000657:	c3                   	ret    

c0000658 <strtok>:
c0000658:	56                   	push   esi
c0000659:	53                   	push   ebx
c000065a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000065e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000662:	85 db                	test   ebx,ebx
c0000664:	75 0e                	jne    c0000674 <strtok+0x1c>
c0000666:	8b 1d e8 b2 03 c0    	mov    ebx,DWORD PTR ds:0xc003b2e8
c000066c:	85 db                	test   ebx,ebx
c000066e:	75 04                	jne    c0000674 <strtok+0x1c>
c0000670:	31 db                	xor    ebx,ebx
c0000672:	eb 2e                	jmp    c00006a2 <strtok+0x4a>
c0000674:	56                   	push   esi
c0000675:	53                   	push   ebx
c0000676:	e8 ba ff ff ff       	call   c0000635 <strpbrk>
c000067b:	5a                   	pop    edx
c000067c:	a3 e8 b2 03 c0       	mov    ds:0xc003b2e8,eax
c0000681:	59                   	pop    ecx
c0000682:	a1 e8 b2 03 c0       	mov    eax,ds:0xc003b2e8
c0000687:	39 d8                	cmp    eax,ebx
c0000689:	75 07                	jne    c0000692 <strtok+0x3a>
c000068b:	43                   	inc    ebx
c000068c:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000690:	eb e2                	jmp    c0000674 <strtok+0x1c>
c0000692:	85 c0                	test   eax,eax
c0000694:	74 da                	je     c0000670 <strtok+0x18>
c0000696:	8d 50 01             	lea    edx,[eax+0x1]
c0000699:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000069c:	89 15 e8 b2 03 c0    	mov    DWORD PTR ds:0xc003b2e8,edx
c00006a2:	89 d8                	mov    eax,ebx
c00006a4:	5b                   	pop    ebx
c00006a5:	5e                   	pop    esi
c00006a6:	c3                   	ret    

c00006a7 <strcpy>:
c00006a7:	53                   	push   ebx
c00006a8:	31 d2                	xor    edx,edx
c00006aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00006b2:	8d 1c 10             	lea    ebx,[eax+edx*1]
c00006b5:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00006b8:	84 c9                	test   cl,cl
c00006ba:	74 06                	je     c00006c2 <strcpy+0x1b>
c00006bc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00006bf:	42                   	inc    edx
c00006c0:	eb ec                	jmp    c00006ae <strcpy+0x7>
c00006c2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00006c5:	5b                   	pop    ebx
c00006c6:	c3                   	ret    

c00006c7 <strncpy>:
c00006c7:	56                   	push   esi
c00006c8:	53                   	push   ebx
c00006c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006d1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00006d5:	89 c3                	mov    ebx,eax
c00006d7:	85 c9                	test   ecx,ecx
c00006d9:	74 1a                	je     c00006f5 <strncpy+0x2e>
c00006db:	46                   	inc    esi
c00006dc:	43                   	inc    ebx
c00006dd:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00006e0:	49                   	dec    ecx
c00006e1:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00006e4:	84 d2                	test   dl,dl
c00006e6:	75 ef                	jne    c00006d7 <strncpy+0x10>
c00006e8:	31 d2                	xor    edx,edx
c00006ea:	39 d1                	cmp    ecx,edx
c00006ec:	74 07                	je     c00006f5 <strncpy+0x2e>
c00006ee:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00006f2:	42                   	inc    edx
c00006f3:	eb f5                	jmp    c00006ea <strncpy+0x23>
c00006f5:	5b                   	pop    ebx
c00006f6:	5e                   	pop    esi
c00006f7:	c3                   	ret    

c00006f8 <strcmp>:
c00006f8:	31 c9                	xor    ecx,ecx
c00006fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00006fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000702:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000706:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000070a:	38 d0                	cmp    al,dl
c000070c:	75 08                	jne    c0000716 <strcmp+0x1e>
c000070e:	41                   	inc    ecx
c000070f:	84 c0                	test   al,al
c0000711:	75 e7                	jne    c00006fa <strcmp+0x2>
c0000713:	31 c0                	xor    eax,eax
c0000715:	c3                   	ret    
c0000716:	29 d0                	sub    eax,edx
c0000718:	c3                   	ret    

c0000719 <strchr>:
c0000719:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000071d:	8a 10                	mov    dl,BYTE PTR [eax]
c000071f:	84 d2                	test   dl,dl
c0000721:	74 09                	je     c000072c <strchr+0x13>
c0000723:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c0000727:	74 05                	je     c000072e <strchr+0x15>
c0000729:	40                   	inc    eax
c000072a:	eb f1                	jmp    c000071d <strchr+0x4>
c000072c:	31 c0                	xor    eax,eax
c000072e:	c3                   	ret    

c000072f <strncmp>:
c000072f:	56                   	push   esi
c0000730:	53                   	push   ebx
c0000731:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000735:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000739:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000073d:	01 d6                	add    esi,edx
c000073f:	39 f2                	cmp    edx,esi
c0000741:	74 12                	je     c0000755 <strncmp+0x26>
c0000743:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000746:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000749:	38 c8                	cmp    al,cl
c000074b:	75 0c                	jne    c0000759 <strncmp+0x2a>
c000074d:	42                   	inc    edx
c000074e:	84 c0                	test   al,al
c0000750:	74 03                	je     c0000755 <strncmp+0x26>
c0000752:	43                   	inc    ebx
c0000753:	eb ea                	jmp    c000073f <strncmp+0x10>
c0000755:	31 c0                	xor    eax,eax
c0000757:	eb 02                	jmp    c000075b <strncmp+0x2c>
c0000759:	29 c8                	sub    eax,ecx
c000075b:	5b                   	pop    ebx
c000075c:	5e                   	pop    esi
c000075d:	c3                   	ret    

c000075e <strcat>:
c000075e:	53                   	push   ebx
c000075f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000763:	89 c1                	mov    ecx,eax
c0000765:	8d 51 01             	lea    edx,[ecx+0x1]
c0000768:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000076c:	74 04                	je     c0000772 <strcat+0x14>
c000076e:	89 d1                	mov    ecx,edx
c0000770:	eb f3                	jmp    c0000765 <strcat+0x7>
c0000772:	31 d2                	xor    edx,edx
c0000774:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000778:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000077b:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000077e:	42                   	inc    edx
c000077f:	84 db                	test   bl,bl
c0000781:	75 f1                	jne    c0000774 <strcat+0x16>
c0000783:	5b                   	pop    ebx
c0000784:	c3                   	ret    

c0000785 <strncat>:
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000793:	89 c2                	mov    edx,eax
c0000795:	85 db                	test   ebx,ebx
c0000797:	74 23                	je     c00007bc <strncat+0x37>
c0000799:	8d 72 01             	lea    esi,[edx+0x1]
c000079c:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c00007a0:	74 04                	je     c00007a6 <strncat+0x21>
c00007a2:	89 f2                	mov    edx,esi
c00007a4:	eb f3                	jmp    c0000799 <strncat+0x14>
c00007a6:	8d 34 19             	lea    esi,[ecx+ebx*1]
c00007a9:	41                   	inc    ecx
c00007aa:	42                   	inc    edx
c00007ab:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00007ae:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007b1:	84 db                	test   bl,bl
c00007b3:	74 07                	je     c00007bc <strncat+0x37>
c00007b5:	39 f1                	cmp    ecx,esi
c00007b7:	75 f0                	jne    c00007a9 <strncat+0x24>
c00007b9:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00007bc:	5b                   	pop    ebx
c00007bd:	5e                   	pop    esi
c00007be:	c3                   	ret    

c00007bf <strstr>:
c00007bf:	57                   	push   edi
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007c6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ca:	57                   	push   edi
c00007cb:	e8 55 fe ff ff       	call   c0000625 <strlen>
c00007d0:	59                   	pop    ecx
c00007d1:	89 c6                	mov    esi,eax
c00007d3:	85 c0                	test   eax,eax
c00007d5:	74 1f                	je     c00007f6 <strstr+0x37>
c00007d7:	53                   	push   ebx
c00007d8:	e8 48 fe ff ff       	call   c0000625 <strlen>
c00007dd:	5a                   	pop    edx
c00007de:	39 f0                	cmp    eax,esi
c00007e0:	72 12                	jb     c00007f4 <strstr+0x35>
c00007e2:	56                   	push   esi
c00007e3:	57                   	push   edi
c00007e4:	53                   	push   ebx
c00007e5:	e8 85 fd ff ff       	call   c000056f <memcmp>
c00007ea:	83 c4 0c             	add    esp,0xc
c00007ed:	85 c0                	test   eax,eax
c00007ef:	74 05                	je     c00007f6 <strstr+0x37>
c00007f1:	43                   	inc    ebx
c00007f2:	eb e3                	jmp    c00007d7 <strstr+0x18>
c00007f4:	31 db                	xor    ebx,ebx
c00007f6:	89 d8                	mov    eax,ebx
c00007f8:	5b                   	pop    ebx
c00007f9:	5e                   	pop    esi
c00007fa:	5f                   	pop    edi
c00007fb:	c3                   	ret    

c00007fc <toupper>:
c00007fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000800:	0f b6 d0             	movzx  edx,al
c0000803:	f6 82 80 f2 01 c0 02 	test   BYTE PTR [edx-0x3ffe0d80],0x2
c000080a:	74 03                	je     c000080f <toupper+0x13>
c000080c:	83 e8 20             	sub    eax,0x20
c000080f:	c3                   	ret    

c0000810 <tolower>:
c0000810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000814:	0f b6 d0             	movzx  edx,al
c0000817:	f6 82 80 f2 01 c0 01 	test   BYTE PTR [edx-0x3ffe0d80],0x1
c000081e:	74 03                	je     c0000823 <tolower+0x13>
c0000820:	83 c0 20             	add    eax,0x20
c0000823:	c3                   	ret    

c0000824 <simple_strtoul>:
c0000824:	55                   	push   ebp
c0000825:	57                   	push   edi
c0000826:	56                   	push   esi
c0000827:	53                   	push   ebx
c0000828:	83 ec 08             	sub    esp,0x8
c000082b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000082f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000833:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000836:	f6 82 80 f2 01 c0 08 	test   BYTE PTR [edx-0x3ffe0d80],0x8
c000083d:	74 03                	je     c0000842 <simple_strtoul+0x1e>
c000083f:	41                   	inc    ecx
c0000840:	eb f1                	jmp    c0000833 <simple_strtoul+0xf>
c0000842:	80 fa 09             	cmp    dl,0x9
c0000845:	74 f8                	je     c000083f <simple_strtoul+0x1b>
c0000847:	80 fa 2d             	cmp    dl,0x2d
c000084a:	75 0b                	jne    c0000857 <simple_strtoul+0x33>
c000084c:	41                   	inc    ecx
c000084d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000855:	eb 0e                	jmp    c0000865 <simple_strtoul+0x41>
c0000857:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000085f:	80 fa 2b             	cmp    dl,0x2b
c0000862:	75 01                	jne    c0000865 <simple_strtoul+0x41>
c0000864:	41                   	inc    ecx
c0000865:	85 f6                	test   esi,esi
c0000867:	75 22                	jne    c000088b <simple_strtoul+0x67>
c0000869:	be 0a 00 00 00       	mov    esi,0xa
c000086e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000871:	75 5a                	jne    c00008cd <simple_strtoul+0xa9>
c0000873:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000877:	50                   	push   eax
c0000878:	e8 93 ff ff ff       	call   c0000810 <tolower>
c000087d:	5a                   	pop    edx
c000087e:	83 f8 78             	cmp    eax,0x78
c0000881:	74 03                	je     c0000886 <simple_strtoul+0x62>
c0000883:	41                   	inc    ecx
c0000884:	eb 16                	jmp    c000089c <simple_strtoul+0x78>
c0000886:	83 c1 02             	add    ecx,0x2
c0000889:	eb 22                	jmp    c00008ad <simple_strtoul+0x89>
c000088b:	8d 46 fe             	lea    eax,[esi-0x2]
c000088e:	83 f8 22             	cmp    eax,0x22
c0000891:	0f 87 b7 00 00 00    	ja     c000094e <simple_strtoul+0x12a>
c0000897:	83 fe 08             	cmp    esi,0x8
c000089a:	75 0c                	jne    c00008a8 <simple_strtoul+0x84>
c000089c:	be 08 00 00 00       	mov    esi,0x8
c00008a1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008a4:	75 27                	jne    c00008cd <simple_strtoul+0xa9>
c00008a6:	eb 1f                	jmp    c00008c7 <simple_strtoul+0xa3>
c00008a8:	83 fe 10             	cmp    esi,0x10
c00008ab:	75 20                	jne    c00008cd <simple_strtoul+0xa9>
c00008ad:	be 10 00 00 00       	mov    esi,0x10
c00008b2:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008b5:	75 16                	jne    c00008cd <simple_strtoul+0xa9>
c00008b7:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008bb:	50                   	push   eax
c00008bc:	e8 4f ff ff ff       	call   c0000810 <tolower>
c00008c1:	5d                   	pop    ebp
c00008c2:	83 f8 78             	cmp    eax,0x78
c00008c5:	74 03                	je     c00008ca <simple_strtoul+0xa6>
c00008c7:	41                   	inc    ecx
c00008c8:	eb 03                	jmp    c00008cd <simple_strtoul+0xa9>
c00008ca:	83 c1 02             	add    ecx,0x2
c00008cd:	31 ed                	xor    ebp,ebp
c00008cf:	31 db                	xor    ebx,ebx
c00008d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00008d8:	8a 11                	mov    dl,BYTE PTR [ecx]
c00008da:	84 d2                	test   dl,dl
c00008dc:	74 27                	je     c0000905 <simple_strtoul+0xe1>
c00008de:	0f b6 fa             	movzx  edi,dl
c00008e1:	f6 87 80 f2 01 c0 04 	test   BYTE PTR [edi-0x3ffe0d80],0x4
c00008e8:	74 05                	je     c00008ef <simple_strtoul+0xcb>
c00008ea:	83 ef 30             	sub    edi,0x30
c00008ed:	eb 22                	jmp    c0000911 <simple_strtoul+0xed>
c00008ef:	0f be d2             	movsx  edx,dl
c00008f2:	52                   	push   edx
c00008f3:	e8 04 ff ff ff       	call   c00007fc <toupper>
c00008f8:	5f                   	pop    edi
c00008f9:	0f b6 d0             	movzx  edx,al
c00008fc:	f6 82 80 f2 01 c0 01 	test   BYTE PTR [edx-0x3ffe0d80],0x1
c0000903:	75 09                	jne    c000090e <simple_strtoul+0xea>
c0000905:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000090a:	75 2d                	jne    c0000939 <simple_strtoul+0x115>
c000090c:	eb 57                	jmp    c0000965 <simple_strtoul+0x141>
c000090e:	8d 78 c9             	lea    edi,[eax-0x37]
c0000911:	39 f7                	cmp    edi,esi
c0000913:	73 f0                	jae    c0000905 <simple_strtoul+0xe1>
c0000915:	31 d2                	xor    edx,edx
c0000917:	89 f8                	mov    eax,edi
c0000919:	f7 d0                	not    eax
c000091b:	f7 f6                	div    esi
c000091d:	39 d8                	cmp    eax,ebx
c000091f:	72 0e                	jb     c000092f <simple_strtoul+0x10b>
c0000921:	0f af de             	imul   ebx,esi
c0000924:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000092b:	01 fb                	add    ebx,edi
c000092d:	eb 07                	jmp    c0000936 <simple_strtoul+0x112>
c000092f:	bd 01 00 00 00       	mov    ebp,0x1
c0000934:	31 db                	xor    ebx,ebx
c0000936:	41                   	inc    ecx
c0000937:	eb 9f                	jmp    c00008d8 <simple_strtoul+0xb4>
c0000939:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000093c:	09 d8                	or     eax,ebx
c000093e:	75 1f                	jne    c000095f <simple_strtoul+0x13b>
c0000940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000944:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000948:	31 db                	xor    ebx,ebx
c000094a:	89 38                	mov    DWORD PTR [eax],edi
c000094c:	eb 17                	jmp    c0000965 <simple_strtoul+0x141>
c000094e:	31 db                	xor    ebx,ebx
c0000950:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000955:	74 14                	je     c000096b <simple_strtoul+0x147>
c0000957:	31 ed                	xor    ebp,ebp
c0000959:	85 c9                	test   ecx,ecx
c000095b:	75 e3                	jne    c0000940 <simple_strtoul+0x11c>
c000095d:	31 db                	xor    ebx,ebx
c000095f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000963:	89 08                	mov    DWORD PTR [eax],ecx
c0000965:	4d                   	dec    ebp
c0000966:	75 03                	jne    c000096b <simple_strtoul+0x147>
c0000968:	83 cb ff             	or     ebx,0xffffffff
c000096b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000970:	75 02                	jne    c0000974 <simple_strtoul+0x150>
c0000972:	f7 db                	neg    ebx
c0000974:	83 c4 08             	add    esp,0x8
c0000977:	89 d8                	mov    eax,ebx
c0000979:	5b                   	pop    ebx
c000097a:	5e                   	pop    esi
c000097b:	5f                   	pop    edi
c000097c:	5d                   	pop    ebp
c000097d:	c3                   	ret    

c000097e <largebin_index>:
c000097e:	89 c2                	mov    edx,eax
c0000980:	c1 ea 08             	shr    edx,0x8
c0000983:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000989:	77 10                	ja     c000099b <largebin_index+0x1d>
c000098b:	0f bd d2             	bsr    edx,edx
c000098e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000991:	d3 e8                	shr    eax,cl
c0000993:	83 e0 03             	and    eax,0x3
c0000996:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c000099a:	c3                   	ret    
c000099b:	b8 5f 00 00 00       	mov    eax,0x5f
c00009a0:	c3                   	ret    

c00009a1 <malloc_init_state>:
c00009a1:	53                   	push   ebx
c00009a2:	8d 50 34             	lea    edx,[eax+0x34]
c00009a5:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c00009ab:	89 d1                	mov    ecx,edx
c00009ad:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c00009b0:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c00009b3:	83 c2 08             	add    edx,0x8
c00009b6:	39 da                	cmp    edx,ebx
c00009b8:	75 f3                	jne    c00009ad <malloc_init_state+0xc>
c00009ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00009bc:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c00009c6:	83 e2 03             	and    edx,0x3
c00009c9:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c00009d3:	83 ca 48             	or     edx,0x48
c00009d6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c00009e0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c00009ea:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c00009f1:	89 10                	mov    DWORD PTR [eax],edx
c00009f3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c00009f6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a00:	5b                   	pop    ebx
c0000a01:	c3                   	ret    

c0000a02 <malloc_consolidate>:
c0000a02:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a04:	85 d2                	test   edx,edx
c0000a06:	0f 84 d8 00 00 00    	je     c0000ae4 <malloc_consolidate+0xe2>
c0000a0c:	55                   	push   ebp
c0000a0d:	83 e2 fd             	and    edx,0xfffffffd
c0000a10:	57                   	push   edi
c0000a11:	89 c5                	mov    ebp,eax
c0000a13:	56                   	push   esi
c0000a14:	8d 78 34             	lea    edi,[eax+0x34]
c0000a17:	53                   	push   ebx
c0000a18:	83 ec 10             	sub    esp,0x10
c0000a1b:	89 10                	mov    DWORD PTR [eax],edx
c0000a1d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a21:	c1 ea 03             	shr    edx,0x3
c0000a24:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a28:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000a2c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000a2f:	85 d2                	test   edx,edx
c0000a31:	0f 84 98 00 00 00    	je     c0000acf <malloc_consolidate+0xcd>
c0000a37:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000a3e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000a41:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000a44:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000a48:	89 f9                	mov    ecx,edi
c0000a4a:	83 e1 fe             	and    ecx,0xfffffffe
c0000a4d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000a50:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000a53:	83 e3 fc             	and    ebx,0xfffffffc
c0000a56:	83 e7 01             	and    edi,0x1
c0000a59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000a5c:	75 14                	jne    c0000a72 <malloc_consolidate+0x70>
c0000a5e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000a60:	29 fa                	sub    edx,edi
c0000a62:	01 f9                	add    ecx,edi
c0000a64:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000a67:	89 fb                	mov    ebx,edi
c0000a69:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000a6c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000a6f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000a72:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000a75:	74 40                	je     c0000ab7 <malloc_consolidate+0xb5>
c0000a77:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000a7a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000a7d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000a81:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000a84:	83 e7 01             	and    edi,0x1
c0000a87:	75 0e                	jne    c0000a97 <malloc_consolidate+0x95>
c0000a89:	01 d9                	add    ecx,ebx
c0000a8b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000a8e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000a91:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000a94:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000a97:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000a9a:	89 ce                	mov    esi,ecx
c0000a9c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000a9f:	83 ce 01             	or     esi,0x1
c0000aa2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000aa5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000aa8:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000aab:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000aaf:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ab2:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ab5:	eb 0c                	jmp    c0000ac3 <malloc_consolidate+0xc1>
c0000ab7:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000aba:	83 c9 01             	or     ecx,0x1
c0000abd:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ac0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ac3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ac7:	85 d2                	test   edx,edx
c0000ac9:	0f 85 6f ff ff ff    	jne    c0000a3e <malloc_consolidate+0x3c>
c0000acf:	83 c5 04             	add    ebp,0x4
c0000ad2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ad6:	0f 85 50 ff ff ff    	jne    c0000a2c <malloc_consolidate+0x2a>
c0000adc:	83 c4 10             	add    esp,0x10
c0000adf:	5b                   	pop    ebx
c0000ae0:	5e                   	pop    esi
c0000ae1:	5f                   	pop    edi
c0000ae2:	5d                   	pop    ebp
c0000ae3:	c3                   	ret    
c0000ae4:	e9 b8 fe ff ff       	jmp    c00009a1 <malloc_init_state>

c0000ae9 <dlfree>:
c0000ae9:	57                   	push   edi
c0000aea:	56                   	push   esi
c0000aeb:	53                   	push   ebx
c0000aec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000af0:	85 db                	test   ebx,ebx
c0000af2:	0f 84 e2 00 00 00    	je     c0000bda <dlfree+0xf1>
c0000af8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000afb:	8b 0d 00 b3 03 c0    	mov    ecx,DWORD PTR ds:0xc003b300
c0000b01:	89 f0                	mov    eax,esi
c0000b03:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b06:	83 e0 fc             	and    eax,0xfffffffc
c0000b09:	39 c1                	cmp    ecx,eax
c0000b0b:	72 24                	jb     c0000b31 <dlfree+0x48>
c0000b0d:	83 c9 03             	or     ecx,0x3
c0000b10:	c1 e8 03             	shr    eax,0x3
c0000b13:	89 0d 00 b3 03 c0    	mov    DWORD PTR ds:0xc003b300,ecx
c0000b19:	83 e8 02             	sub    eax,0x2
c0000b1c:	8b 0c 85 04 b3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc4cfc]
c0000b23:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b25:	89 14 85 04 b3 03 c0 	mov    DWORD PTR [eax*4-0x3ffc4cfc],edx
c0000b2c:	e9 a9 00 00 00       	jmp    c0000bda <dlfree+0xf1>
c0000b31:	83 e6 02             	and    esi,0x2
c0000b34:	0f 85 a0 00 00 00    	jne    c0000bda <dlfree+0xf1>
c0000b3a:	83 c9 01             	or     ecx,0x1
c0000b3d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000b40:	89 0d 00 b3 03 c0    	mov    DWORD PTR ds:0xc003b300,ecx
c0000b46:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000b49:	83 e1 fc             	and    ecx,0xfffffffc
c0000b4c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000b50:	75 13                	jne    c0000b65 <dlfree+0x7c>
c0000b52:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000b55:	29 da                	sub    edx,ebx
c0000b57:	01 d8                	add    eax,ebx
c0000b59:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b5c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000b5f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b62:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b65:	39 35 2c b3 03 c0    	cmp    DWORD PTR ds:0xc003b32c,esi
c0000b6b:	74 40                	je     c0000bad <dlfree+0xc4>
c0000b6d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000b71:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000b74:	80 e3 01             	and    bl,0x1
c0000b77:	75 0e                	jne    c0000b87 <dlfree+0x9e>
c0000b79:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000b7c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000b7f:	01 c8                	add    eax,ecx
c0000b81:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b84:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b87:	8b 0d 3c b3 03 c0    	mov    ecx,DWORD PTR ds:0xc003b33c
c0000b8d:	c7 42 0c 34 b3 03 c0 	mov    DWORD PTR [edx+0xc],0xc003b334
c0000b94:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000b97:	89 15 3c b3 03 c0    	mov    DWORD PTR ds:0xc003b33c,edx
c0000b9d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ba0:	89 c1                	mov    ecx,eax
c0000ba2:	83 c9 01             	or     ecx,0x1
c0000ba5:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ba8:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000bab:	eb 10                	jmp    c0000bbd <dlfree+0xd4>
c0000bad:	01 c8                	add    eax,ecx
c0000baf:	89 c1                	mov    ecx,eax
c0000bb1:	83 c9 01             	or     ecx,0x1
c0000bb4:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bb7:	89 15 2c b3 03 c0    	mov    DWORD PTR ds:0xc003b32c,edx
c0000bbd:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000bc2:	76 16                	jbe    c0000bda <dlfree+0xf1>
c0000bc4:	f6 05 00 b3 03 c0 02 	test   BYTE PTR ds:0xc003b300,0x2
c0000bcb:	74 0d                	je     c0000bda <dlfree+0xf1>
c0000bcd:	5b                   	pop    ebx
c0000bce:	b8 00 b3 03 c0       	mov    eax,0xc003b300
c0000bd3:	5e                   	pop    esi
c0000bd4:	5f                   	pop    edi
c0000bd5:	e9 28 fe ff ff       	jmp    c0000a02 <malloc_consolidate>
c0000bda:	5b                   	pop    ebx
c0000bdb:	5e                   	pop    esi
c0000bdc:	5f                   	pop    edi
c0000bdd:	c3                   	ret    

c0000bde <sYSMALLOc>:
c0000bde:	55                   	push   ebp
c0000bdf:	57                   	push   edi
c0000be0:	56                   	push   esi
c0000be1:	53                   	push   ebx
c0000be2:	89 d3                	mov    ebx,edx
c0000be4:	83 ec 2c             	sub    esp,0x2c
c0000be7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000beb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000bf1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000bf4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000bf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000bfb:	74 1f                	je     c0000c1c <sYSMALLOc+0x3e>
c0000bfd:	89 d8                	mov    eax,ebx
c0000bff:	e8 fe fd ff ff       	call   c0000a02 <malloc_consolidate>
c0000c04:	83 ec 0c             	sub    esp,0xc
c0000c07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c0b:	83 e8 07             	sub    eax,0x7
c0000c0e:	50                   	push   eax
c0000c0f:	e8 30 02 00 00       	call   c0000e44 <dlmalloc>
c0000c14:	83 c4 10             	add    esp,0x10
c0000c17:	e9 20 02 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c1c:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c1f:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c25:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c28:	83 e0 fc             	and    eax,0xfffffffc
c0000c2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000c2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000c33:	83 c0 10             	add    eax,0x10
c0000c36:	01 c1                	add    ecx,eax
c0000c38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000c3c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000c43:	74 04                	je     c0000c49 <sYSMALLOc+0x6b>
c0000c45:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000c49:	f7 da                	neg    edx
c0000c4b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000c4f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000c53:	21 d1                	and    ecx,edx
c0000c55:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000c59:	7f 07                	jg     c0000c62 <sYSMALLOc+0x84>
c0000c5b:	31 c0                	xor    eax,eax
c0000c5d:	e9 da 01 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c62:	83 ec 0c             	sub    esp,0xc
c0000c65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000c69:	e8 aa c3 00 00       	call   c000d018 <sbrk>
c0000c6e:	83 c4 10             	add    esp,0x10
c0000c71:	89 c6                	mov    esi,eax
c0000c73:	83 f8 ff             	cmp    eax,0xffffffff
c0000c76:	74 e3                	je     c0000c5b <sYSMALLOc+0x7d>
c0000c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c7c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000c80:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000c83:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000c89:	39 f1                	cmp    ecx,esi
c0000c8b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000c91:	75 13                	jne    c0000ca6 <sYSMALLOc+0xc8>
c0000c93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c97:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000c9b:	83 c8 01             	or     eax,0x1
c0000c9e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000ca1:	e9 3e 01 00 00       	jmp    c0000de4 <sYSMALLOc+0x206>
c0000ca6:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000cac:	88 d0                	mov    al,dl
c0000cae:	83 e0 01             	and    eax,0x1
c0000cb1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000cb6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000cba:	0f 95 c0             	setne  al
c0000cbd:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000cc1:	39 f1                	cmp    ecx,esi
c0000cc3:	76 12                	jbe    c0000cd7 <sYSMALLOc+0xf9>
c0000cc5:	84 c0                	test   al,al
c0000cc7:	74 0e                	je     c0000cd7 <sYSMALLOc+0xf9>
c0000cc9:	83 e2 fe             	and    edx,0xfffffffe
c0000ccc:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000cd2:	e9 83 00 00 00       	jmp    c0000d5a <sYSMALLOc+0x17c>
c0000cd7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000cdc:	74 7c                	je     c0000d5a <sYSMALLOc+0x17c>
c0000cde:	84 c0                	test   al,al
c0000ce0:	74 0c                	je     c0000cee <sYSMALLOc+0x110>
c0000ce2:	89 f0                	mov    eax,esi
c0000ce4:	29 c8                	sub    eax,ecx
c0000ce6:	01 e8                	add    eax,ebp
c0000ce8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000cee:	89 f2                	mov    edx,esi
c0000cf0:	83 e2 07             	and    edx,0x7
c0000cf3:	74 0c                	je     c0000d01 <sYSMALLOc+0x123>
c0000cf5:	b8 08 00 00 00       	mov    eax,0x8
c0000cfa:	29 d0                	sub    eax,edx
c0000cfc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000cff:	eb 04                	jmp    c0000d05 <sYSMALLOc+0x127>
c0000d01:	89 f5                	mov    ebp,esi
c0000d03:	31 c0                	xor    eax,eax
c0000d05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d09:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d11:	01 c1                	add    ecx,eax
c0000d13:	83 ec 0c             	sub    esp,0xc
c0000d16:	01 f1                	add    ecx,esi
c0000d18:	01 ca                	add    edx,ecx
c0000d1a:	29 c8                	sub    eax,ecx
c0000d1c:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d20:	01 c2                	add    edx,eax
c0000d22:	52                   	push   edx
c0000d23:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d27:	e8 ec c2 00 00       	call   c000d018 <sbrk>
c0000d2c:	83 c4 10             	add    esp,0x10
c0000d2f:	83 f8 ff             	cmp    eax,0xffffffff
c0000d32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d36:	75 0f                	jne    c0000d47 <sYSMALLOc+0x169>
c0000d38:	83 ec 0c             	sub    esp,0xc
c0000d3b:	6a 00                	push   0x0
c0000d3d:	e8 d6 c2 00 00       	call   c000d018 <sbrk>
c0000d42:	83 c4 10             	add    esp,0x10
c0000d45:	eb 30                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d47:	39 c6                	cmp    esi,eax
c0000d49:	76 33                	jbe    c0000d7e <sYSMALLOc+0x1a0>
c0000d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d4f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000d56:	01 f0                	add    eax,esi
c0000d58:	eb 1d                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d5a:	83 ec 0c             	sub    esp,0xc
c0000d5d:	89 f5                	mov    ebp,esi
c0000d5f:	6a 00                	push   0x0
c0000d61:	e8 b2 c2 00 00       	call   c000d018 <sbrk>
c0000d66:	89 c2                	mov    edx,eax
c0000d68:	29 f2                	sub    edx,esi
c0000d6a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000d6e:	83 c4 10             	add    esp,0x10
c0000d71:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d77:	31 d2                	xor    edx,edx
c0000d79:	83 f8 ff             	cmp    eax,0xffffffff
c0000d7c:	74 66                	je     c0000de4 <sYSMALLOc+0x206>
c0000d7e:	29 e8                	sub    eax,ebp
c0000d80:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000d83:	01 d0                	add    eax,edx
c0000d85:	83 c8 01             	or     eax,0x1
c0000d88:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000d8b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d91:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d96:	74 4c                	je     c0000de4 <sYSMALLOc+0x206>
c0000d98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d9c:	83 e8 0c             	sub    eax,0xc
c0000d9f:	83 e0 f8             	and    eax,0xfffffff8
c0000da2:	89 c2                	mov    edx,eax
c0000da4:	83 ca 01             	or     edx,0x1
c0000da7:	83 f8 0f             	cmp    eax,0xf
c0000daa:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000dad:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000db5:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000dbd:	76 25                	jbe    c0000de4 <sYSMALLOc+0x206>
c0000dbf:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000dc5:	83 ec 0c             	sub    esp,0xc
c0000dc8:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000dd2:	83 c7 08             	add    edi,0x8
c0000dd5:	57                   	push   edi
c0000dd6:	e8 0e fd ff ff       	call   c0000ae9 <dlfree>
c0000ddb:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000de1:	83 c4 10             	add    esp,0x10
c0000de4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000dea:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000df0:	73 06                	jae    c0000df8 <sYSMALLOc+0x21a>
c0000df2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000df8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000dfe:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e04:	73 06                	jae    c0000e0c <sYSMALLOc+0x22e>
c0000e06:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e0c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e0f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e12:	83 e2 fc             	and    edx,0xfffffffc
c0000e15:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e19:	0f 82 3c fe ff ff    	jb     c0000c5b <sYSMALLOc+0x7d>
c0000e1f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e23:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e26:	29 fa                	sub    edx,edi
c0000e28:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e2b:	83 ca 01             	or     edx,0x1
c0000e2e:	89 fb                	mov    ebx,edi
c0000e30:	83 c0 08             	add    eax,0x8
c0000e33:	83 cb 01             	or     ebx,0x1
c0000e36:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e39:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e3c:	83 c4 2c             	add    esp,0x2c
c0000e3f:	5b                   	pop    ebx
c0000e40:	5e                   	pop    esi
c0000e41:	5f                   	pop    edi
c0000e42:	5d                   	pop    ebp
c0000e43:	c3                   	ret    

c0000e44 <dlmalloc>:
c0000e44:	55                   	push   ebp
c0000e45:	57                   	push   edi
c0000e46:	56                   	push   esi
c0000e47:	53                   	push   ebx
c0000e48:	83 ec 1c             	sub    esp,0x1c
c0000e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000e4f:	83 f8 df             	cmp    eax,0xffffffdf
c0000e52:	0f 87 70 03 00 00    	ja     c00011c8 <dlmalloc+0x384>
c0000e58:	83 c0 0b             	add    eax,0xb
c0000e5b:	be 10 00 00 00       	mov    esi,0x10
c0000e60:	83 f8 0f             	cmp    eax,0xf
c0000e63:	76 05                	jbe    c0000e6a <dlmalloc+0x26>
c0000e65:	83 e0 f8             	and    eax,0xfffffff8
c0000e68:	89 c6                	mov    esi,eax
c0000e6a:	8b 3d 00 b3 03 c0    	mov    edi,DWORD PTR ds:0xc003b300
c0000e70:	f7 c7 01 00 00 00    	test   edi,0x1
c0000e76:	75 17                	jne    c0000e8f <dlmalloc+0x4b>
c0000e78:	85 ff                	test   edi,edi
c0000e7a:	0f 85 05 03 00 00    	jne    c0001185 <dlmalloc+0x341>
c0000e80:	b8 00 b3 03 c0       	mov    eax,0xc003b300
c0000e85:	e8 78 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000e8a:	e9 f6 02 00 00       	jmp    c0001185 <dlmalloc+0x341>
c0000e8f:	39 f7                	cmp    edi,esi
c0000e91:	72 1f                	jb     c0000eb2 <dlmalloc+0x6e>
c0000e93:	89 f2                	mov    edx,esi
c0000e95:	c1 ea 03             	shr    edx,0x3
c0000e98:	83 ea 02             	sub    edx,0x2
c0000e9b:	8b 04 95 04 b3 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc4cfc]
c0000ea2:	85 c0                	test   eax,eax
c0000ea4:	74 0c                	je     c0000eb2 <dlmalloc+0x6e>
c0000ea6:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000ea9:	89 0c 95 04 b3 03 c0 	mov    DWORD PTR [edx*4-0x3ffc4cfc],ecx
c0000eb0:	eb 30                	jmp    c0000ee2 <dlmalloc+0x9e>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000eba:	77 2e                	ja     c0000eea <dlmalloc+0xa6>
c0000ebc:	c1 e8 03             	shr    eax,0x3
c0000ebf:	8d 14 c5 34 b3 03 c0 	lea    edx,[eax*8-0x3ffc4ccc]
c0000ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eca:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000ecd:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000ed0:	39 c3                	cmp    ebx,eax
c0000ed2:	74 2e                	je     c0000f02 <dlmalloc+0xbe>
c0000ed4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000ed7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000edc:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000edf:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000ee2:	83 c0 08             	add    eax,0x8
c0000ee5:	e9 e0 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000eea:	e8 8f fa ff ff       	call   c000097e <largebin_index>
c0000eef:	83 e7 02             	and    edi,0x2
c0000ef2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef6:	74 0a                	je     c0000f02 <dlmalloc+0xbe>
c0000ef8:	b8 00 b3 03 c0       	mov    eax,0xc003b300
c0000efd:	e8 00 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000f02:	8d 46 10             	lea    eax,[esi+0x10]
c0000f05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f09:	8b 1d 40 b3 03 c0    	mov    ebx,DWORD PTR ds:0xc003b340
c0000f0f:	81 fb 34 b3 03 c0    	cmp    ebx,0xc003b334
c0000f15:	0f 84 13 01 00 00    	je     c000102e <dlmalloc+0x1ea>
c0000f1b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f1e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f21:	83 e7 fc             	and    edi,0xfffffffc
c0000f24:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2a:	77 4c                	ja     c0000f78 <dlmalloc+0x134>
c0000f2c:	3d 34 b3 03 c0       	cmp    eax,0xc003b334
c0000f31:	75 45                	jne    c0000f78 <dlmalloc+0x134>
c0000f33:	39 1d 30 b3 03 c0    	cmp    DWORD PTR ds:0xc003b330,ebx
c0000f39:	75 3d                	jne    c0000f78 <dlmalloc+0x134>
c0000f3b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000f3f:	73 37                	jae    c0000f78 <dlmalloc+0x134>
c0000f41:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000f44:	89 fa                	mov    edx,edi
c0000f46:	a3 3c b3 03 c0       	mov    ds:0xc003b33c,eax
c0000f4b:	a3 40 b3 03 c0       	mov    ds:0xc003b340,eax
c0000f50:	a3 30 b3 03 c0       	mov    ds:0xc003b330,eax
c0000f55:	29 f2                	sub    edx,esi
c0000f57:	c7 40 08 34 b3 03 c0 	mov    DWORD PTR [eax+0x8],0xc003b334
c0000f5e:	c7 40 0c 34 b3 03 c0 	mov    DWORD PTR [eax+0xc],0xc003b334
c0000f65:	83 ce 01             	or     esi,0x1
c0000f68:	89 d1                	mov    ecx,edx
c0000f6a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000f6d:	83 c9 01             	or     ecx,0x1
c0000f70:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000f73:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000f76:	eb 15                	jmp    c0000f8d <dlmalloc+0x149>
c0000f78:	a3 40 b3 03 c0       	mov    ds:0xc003b340,eax
c0000f7d:	39 fe                	cmp    esi,edi
c0000f7f:	c7 40 08 34 b3 03 c0 	mov    DWORD PTR [eax+0x8],0xc003b334
c0000f86:	75 0d                	jne    c0000f95 <dlmalloc+0x151>
c0000f88:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0000f8d:	8d 43 08             	lea    eax,[ebx+0x8]
c0000f90:	e9 35 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000f95:	89 f8                	mov    eax,edi
c0000f97:	81 ff ff 00 00 00    	cmp    edi,0xff
c0000f9d:	77 19                	ja     c0000fb8 <dlmalloc+0x174>
c0000f9f:	c1 e8 03             	shr    eax,0x3
c0000fa2:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fa5:	83 c2 0d             	add    edx,0xd
c0000fa8:	8d 2c 95 f8 b2 03 c0 	lea    ebp,[edx*4-0x3ffc4d08]
c0000faf:	8b 14 95 00 b3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc4d00]
c0000fb6:	eb 46                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000fb8:	e8 c1 f9 ff ff       	call   c000097e <largebin_index>
c0000fbd:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fc0:	83 c2 0d             	add    edx,0xd
c0000fc3:	8d 0c 95 00 b3 03 c0 	lea    ecx,[edx*4-0x3ffc4d00]
c0000fca:	8b 14 95 00 b3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc4d00]
c0000fd1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0000fd4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0000fd8:	89 d5                	mov    ebp,edx
c0000fda:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0000fde:	74 1e                	je     c0000ffe <dlmalloc+0x1ba>
c0000fe0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0000fe3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0000fe6:	77 12                	ja     c0000ffa <dlmalloc+0x1b6>
c0000fe8:	83 cf 01             	or     edi,0x1
c0000feb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0000fee:	76 05                	jbe    c0000ff5 <dlmalloc+0x1b1>
c0000ff0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0000ff3:	eb f6                	jmp    c0000feb <dlmalloc+0x1a7>
c0000ff5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0000ff8:	eb 04                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000ffa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000ffe:	89 c7                	mov    edi,eax
c0001000:	88 c1                	mov    cl,al
c0001002:	c1 ff 05             	sar    edi,0x5
c0001005:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001009:	bf 01 00 00 00       	mov    edi,0x1
c000100e:	d3 e7                	shl    edi,cl
c0001010:	89 f8                	mov    eax,edi
c0001012:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001016:	09 04 bd 34 b6 03 c0 	or     DWORD PTR [edi*4-0x3ffc49cc],eax
c000101d:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001020:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001023:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001026:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001029:	e9 db fe ff ff       	jmp    c0000f09 <dlmalloc+0xc5>
c000102e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001034:	76 78                	jbe    c00010ae <dlmalloc+0x26a>
c0001036:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000103a:	8d 04 c5 34 b3 03 c0 	lea    eax,[eax*8-0x3ffc4ccc]
c0001041:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001047:	39 ca                	cmp    edx,ecx
c0001049:	74 63                	je     c00010ae <dlmalloc+0x26a>
c000104b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000104e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001051:	83 e3 fc             	and    ebx,0xfffffffc
c0001054:	39 de                	cmp    esi,ebx
c0001056:	77 52                	ja     c00010aa <dlmalloc+0x266>
c0001058:	89 df                	mov    edi,ebx
c000105a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000105d:	29 f7                	sub    edi,esi
c000105f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001062:	01 d3                	add    ebx,edx
c0001064:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001067:	83 ff 0f             	cmp    edi,0xf
c000106a:	8d 42 08             	lea    eax,[edx+0x8]
c000106d:	77 09                	ja     c0001078 <dlmalloc+0x234>
c000106f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001073:	e9 52 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001078:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000107b:	83 ce 01             	or     esi,0x1
c000107e:	89 0d 3c b3 03 c0    	mov    DWORD PTR ds:0xc003b33c,ecx
c0001084:	89 0d 40 b3 03 c0    	mov    DWORD PTR ds:0xc003b340,ecx
c000108a:	c7 41 08 34 b3 03 c0 	mov    DWORD PTR [ecx+0x8],0xc003b334
c0001091:	c7 41 0c 34 b3 03 c0 	mov    DWORD PTR [ecx+0xc],0xc003b334
c0001098:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000109b:	89 fa                	mov    edx,edi
c000109d:	83 ca 01             	or     edx,0x1
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	89 3b                	mov    DWORD PTR [ebx],edi
c00010a5:	e9 20 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c00010aa:	89 c2                	mov    edx,eax
c00010ac:	eb 99                	jmp    c0001047 <dlmalloc+0x203>
c00010ae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00010b2:	b8 01 00 00 00       	mov    eax,0x1
c00010b7:	41                   	inc    ecx
c00010b8:	89 cb                	mov    ebx,ecx
c00010ba:	8d 14 cd 2c b3 03 c0 	lea    edx,[ecx*8-0x3ffc4cd4]
c00010c1:	c1 eb 05             	shr    ebx,0x5
c00010c4:	d3 e0                	shl    eax,cl
c00010c6:	8b 3c 9d 34 b6 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc49cc]
c00010cd:	39 f8                	cmp    eax,edi
c00010cf:	77 04                	ja     c00010d5 <dlmalloc+0x291>
c00010d1:	85 c0                	test   eax,eax
c00010d3:	75 26                	jne    c00010fb <dlmalloc+0x2b7>
c00010d5:	43                   	inc    ebx
c00010d6:	83 fb 02             	cmp    ebx,0x2
c00010d9:	0f 87 a6 00 00 00    	ja     c0001185 <dlmalloc+0x341>
c00010df:	8b 3c 9d 34 b6 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc49cc]
c00010e6:	85 ff                	test   edi,edi
c00010e8:	74 eb                	je     c00010d5 <dlmalloc+0x291>
c00010ea:	89 d8                	mov    eax,ebx
c00010ec:	c1 e0 06             	shl    eax,0x6
c00010ef:	8d 14 85 2c b3 03 c0 	lea    edx,[eax*4-0x3ffc4cd4]
c00010f6:	b8 01 00 00 00       	mov    eax,0x1
c00010fb:	85 f8                	test   eax,edi
c00010fd:	75 07                	jne    c0001106 <dlmalloc+0x2c2>
c00010ff:	83 c2 08             	add    edx,0x8
c0001102:	01 c0                	add    eax,eax
c0001104:	eb f5                	jmp    c00010fb <dlmalloc+0x2b7>
c0001106:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001109:	39 ca                	cmp    edx,ecx
c000110b:	75 14                	jne    c0001121 <dlmalloc+0x2dd>
c000110d:	89 c1                	mov    ecx,eax
c000110f:	83 c2 08             	add    edx,0x8
c0001112:	f7 d1                	not    ecx
c0001114:	01 c0                	add    eax,eax
c0001116:	21 cf                	and    edi,ecx
c0001118:	89 3c 9d 34 b6 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc49cc],edi
c000111f:	eb ac                	jmp    c00010cd <dlmalloc+0x289>
c0001121:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001124:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001127:	83 e0 fc             	and    eax,0xfffffffc
c000112a:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000112d:	89 c3                	mov    ebx,eax
c000112f:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001132:	29 f3                	sub    ebx,esi
c0001134:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001137:	83 fb 0f             	cmp    ebx,0xf
c000113a:	8d 41 08             	lea    eax,[ecx+0x8]
c000113d:	77 09                	ja     c0001148 <dlmalloc+0x304>
c000113f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001143:	e9 82 00 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001148:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000114b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001151:	89 3d 3c b3 03 c0    	mov    DWORD PTR ds:0xc003b33c,edi
c0001157:	89 3d 40 b3 03 c0    	mov    DWORD PTR ds:0xc003b340,edi
c000115d:	c7 47 08 34 b3 03 c0 	mov    DWORD PTR [edi+0x8],0xc003b334
c0001164:	c7 47 0c 34 b3 03 c0 	mov    DWORD PTR [edi+0xc],0xc003b334
c000116b:	77 06                	ja     c0001173 <dlmalloc+0x32f>
c000116d:	89 3d 30 b3 03 c0    	mov    DWORD PTR ds:0xc003b330,edi
c0001173:	83 ce 01             	or     esi,0x1
c0001176:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001179:	89 d9                	mov    ecx,ebx
c000117b:	83 c9 01             	or     ecx,0x1
c000117e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001181:	89 1a                	mov    DWORD PTR [edx],ebx
c0001183:	eb 45                	jmp    c00011ca <dlmalloc+0x386>
c0001185:	a1 2c b3 03 c0       	mov    eax,ds:0xc003b32c
c000118a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000118d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001190:	83 e2 fc             	and    edx,0xfffffffc
c0001193:	39 d1                	cmp    ecx,edx
c0001195:	77 1e                	ja     c00011b5 <dlmalloc+0x371>
c0001197:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000119a:	89 f3                	mov    ebx,esi
c000119c:	89 0d 2c b3 03 c0    	mov    DWORD PTR ds:0xc003b32c,ecx
c00011a2:	83 cb 01             	or     ebx,0x1
c00011a5:	29 f2                	sub    edx,esi
c00011a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00011aa:	83 ca 01             	or     edx,0x1
c00011ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011b0:	e9 2d fd ff ff       	jmp    c0000ee2 <dlmalloc+0x9e>
c00011b5:	83 c4 1c             	add    esp,0x1c
c00011b8:	89 f0                	mov    eax,esi
c00011ba:	5b                   	pop    ebx
c00011bb:	ba 00 b3 03 c0       	mov    edx,0xc003b300
c00011c0:	5e                   	pop    esi
c00011c1:	5f                   	pop    edi
c00011c2:	5d                   	pop    ebp
c00011c3:	e9 16 fa ff ff       	jmp    c0000bde <sYSMALLOc>
c00011c8:	31 c0                	xor    eax,eax
c00011ca:	83 c4 1c             	add    esp,0x1c
c00011cd:	5b                   	pop    ebx
c00011ce:	5e                   	pop    esi
c00011cf:	5f                   	pop    edi
c00011d0:	5d                   	pop    ebp
c00011d1:	c3                   	ret    

c00011d2 <iALLOc>:
c00011d2:	55                   	push   ebp
c00011d3:	89 c5                	mov    ebp,eax
c00011d5:	57                   	push   edi
c00011d6:	56                   	push   esi
c00011d7:	53                   	push   ebx
c00011d8:	83 ec 2c             	sub    esp,0x2c
c00011db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00011df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00011e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011e7:	83 3d 00 b3 03 c0 00 	cmp    DWORD PTR ds:0xc003b300,0x0
c00011ee:	75 12                	jne    c0001202 <iALLOc+0x30>
c00011f0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00011f4:	b8 00 b3 03 c0       	mov    eax,0xc003b300
c00011f9:	e8 04 f8 ff ff       	call   c0000a02 <malloc_consolidate>
c00011fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001202:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001207:	74 12                	je     c000121b <iALLOc+0x49>
c0001209:	85 ed                	test   ebp,ebp
c000120b:	0f 84 64 01 00 00    	je     c0001375 <iALLOc+0x1a3>
c0001211:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001219:	eb 33                	jmp    c000124e <iALLOc+0x7c>
c000121b:	85 ed                	test   ebp,ebp
c000121d:	75 14                	jne    c0001233 <iALLOc+0x61>
c000121f:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001227:	83 c4 2c             	add    esp,0x2c
c000122a:	5b                   	pop    ebx
c000122b:	5e                   	pop    esi
c000122c:	5f                   	pop    edi
c000122d:	5d                   	pop    ebp
c000122e:	e9 11 fc ff ff       	jmp    c0000e44 <dlmalloc>
c0001233:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000123a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001242:	83 f8 0f             	cmp    eax,0xf
c0001245:	76 07                	jbe    c000124e <iALLOc+0x7c>
c0001247:	83 e0 f8             	and    eax,0xfffffff8
c000124a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000124e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001253:	75 09                	jne    c000125e <iALLOc+0x8c>
c0001255:	89 d0                	mov    eax,edx
c0001257:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000125a:	31 f6                	xor    esi,esi
c000125c:	eb 3b                	jmp    c0001299 <iALLOc+0xc7>
c000125e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001260:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001268:	83 c0 0b             	add    eax,0xb
c000126b:	83 f8 0f             	cmp    eax,0xf
c000126e:	76 07                	jbe    c0001277 <iALLOc+0xa5>
c0001270:	83 e0 f8             	and    eax,0xfffffff8
c0001273:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001277:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000127b:	0f af f5             	imul   esi,ebp
c000127e:	eb 25                	jmp    c00012a5 <iALLOc+0xd3>
c0001280:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001282:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001285:	bb 10 00 00 00       	mov    ebx,0x10
c000128a:	83 f9 0f             	cmp    ecx,0xf
c000128d:	76 05                	jbe    c0001294 <iALLOc+0xc2>
c000128f:	83 e1 f8             	and    ecx,0xfffffff8
c0001292:	89 cb                	mov    ebx,ecx
c0001294:	01 de                	add    esi,ebx
c0001296:	83 c0 04             	add    eax,0x4
c0001299:	39 c7                	cmp    edi,eax
c000129b:	75 e3                	jne    c0001280 <iALLOc+0xae>
c000129d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00012a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00012a9:	8b 1d 54 b6 03 c0    	mov    ebx,DWORD PTR ds:0xc003b654
c00012af:	83 ec 0c             	sub    esp,0xc
c00012b2:	c7 05 54 b6 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b654,0x0
c00012bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00012c0:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00012c4:	50                   	push   eax
c00012c5:	e8 7a fb ff ff       	call   c0000e44 <dlmalloc>
c00012ca:	83 c4 10             	add    esp,0x10
c00012cd:	89 1d 54 b6 03 c0    	mov    DWORD PTR ds:0xc003b654,ebx
c00012d3:	85 c0                	test   eax,eax
c00012d5:	0f 84 92 00 00 00    	je     c000136d <iALLOc+0x19b>
c00012db:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00012de:	8d 78 f8             	lea    edi,[eax-0x8]
c00012e1:	83 e3 fc             	and    ebx,0xfffffffc
c00012e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00012e8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00012ed:	74 1e                	je     c000130d <iALLOc+0x13b>
c00012ef:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00012f3:	89 d9                	mov    ecx,ebx
c00012f5:	52                   	push   edx
c00012f6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00012fa:	83 e9 04             	sub    ecx,0x4
c00012fd:	51                   	push   ecx
c00012fe:	6a 00                	push   0x0
c0001300:	50                   	push   eax
c0001301:	e8 02 f3 ff ff       	call   c0000608 <memset>
c0001306:	83 c4 10             	add    esp,0x10
c0001309:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000130d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001312:	75 14                	jne    c0001328 <iALLOc+0x156>
c0001314:	8d 04 37             	lea    eax,[edi+esi*1]
c0001317:	29 f3                	sub    ebx,esi
c0001319:	8d 48 08             	lea    ecx,[eax+0x8]
c000131c:	83 cb 01             	or     ebx,0x1
c000131f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001323:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001326:	89 f3                	mov    ebx,esi
c0001328:	31 c0                	xor    eax,eax
c000132a:	4d                   	dec    ebp
c000132b:	8d 4f 08             	lea    ecx,[edi+0x8]
c000132e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001332:	39 c5                	cmp    ebp,eax
c0001334:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001337:	74 2c                	je     c0001365 <iALLOc+0x193>
c0001339:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000133d:	85 c9                	test   ecx,ecx
c000133f:	75 15                	jne    c0001356 <iALLOc+0x184>
c0001341:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001344:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001347:	b9 10 00 00 00       	mov    ecx,0x10
c000134c:	83 fe 0f             	cmp    esi,0xf
c000134f:	76 05                	jbe    c0001356 <iALLOc+0x184>
c0001351:	83 e6 f8             	and    esi,0xfffffff8
c0001354:	89 f1                	mov    ecx,esi
c0001356:	89 ce                	mov    esi,ecx
c0001358:	29 cb                	sub    ebx,ecx
c000135a:	83 ce 01             	or     esi,0x1
c000135d:	40                   	inc    eax
c000135e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001361:	01 cf                	add    edi,ecx
c0001363:	eb c6                	jmp    c000132b <iALLOc+0x159>
c0001365:	83 cb 01             	or     ebx,0x1
c0001368:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000136b:	eb 08                	jmp    c0001375 <iALLOc+0x1a3>
c000136d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001375:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001379:	83 c4 2c             	add    esp,0x2c
c000137c:	5b                   	pop    ebx
c000137d:	5e                   	pop    esi
c000137e:	5f                   	pop    edi
c000137f:	5d                   	pop    ebp
c0001380:	c3                   	ret    

c0001381 <dlrealloc>:
c0001381:	55                   	push   ebp
c0001382:	57                   	push   edi
c0001383:	56                   	push   esi
c0001384:	53                   	push   ebx
c0001385:	83 ec 1c             	sub    esp,0x1c
c0001388:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000138c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001390:	85 db                	test   ebx,ebx
c0001392:	75 10                	jne    c00013a4 <dlrealloc+0x23>
c0001394:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001398:	83 c4 1c             	add    esp,0x1c
c000139b:	5b                   	pop    ebx
c000139c:	5e                   	pop    esi
c000139d:	5f                   	pop    edi
c000139e:	5d                   	pop    ebp
c000139f:	e9 a0 fa ff ff       	jmp    c0000e44 <dlmalloc>
c00013a4:	83 f8 df             	cmp    eax,0xffffffdf
c00013a7:	76 07                	jbe    c00013b0 <dlrealloc+0x2f>
c00013a9:	31 db                	xor    ebx,ebx
c00013ab:	e9 7c 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c00013b0:	83 c0 0b             	add    eax,0xb
c00013b3:	bf 10 00 00 00       	mov    edi,0x10
c00013b8:	83 f8 0f             	cmp    eax,0xf
c00013bb:	76 05                	jbe    c00013c2 <dlrealloc+0x41>
c00013bd:	83 e0 f8             	and    eax,0xfffffff8
c00013c0:	89 c7                	mov    edi,eax
c00013c2:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00013c5:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00013c8:	89 c6                	mov    esi,eax
c00013ca:	83 e6 fc             	and    esi,0xfffffffc
c00013cd:	a8 02                	test   al,0x2
c00013cf:	75 d8                	jne    c00013a9 <dlrealloc+0x28>
c00013d1:	39 f7                	cmp    edi,esi
c00013d3:	0f 86 15 01 00 00    	jbe    c00014ee <dlrealloc+0x16d>
c00013d9:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00013dd:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00013e0:	39 15 2c b3 03 c0    	cmp    DWORD PTR ds:0xc003b32c,edx
c00013e6:	75 33                	jne    c000141b <dlrealloc+0x9a>
c00013e8:	83 e1 fc             	and    ecx,0xfffffffc
c00013eb:	01 f1                	add    ecx,esi
c00013ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013f1:	8d 4f 10             	lea    ecx,[edi+0x10]
c00013f4:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00013f8:	77 49                	ja     c0001443 <dlrealloc+0xc2>
c00013fa:	01 fd                	add    ebp,edi
c00013fc:	83 e0 01             	and    eax,0x1
c00013ff:	09 f8                	or     eax,edi
c0001401:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001404:	89 2d 2c b3 03 c0    	mov    DWORD PTR ds:0xc003b32c,ebp
c000140a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000140e:	29 f8                	sub    eax,edi
c0001410:	83 c8 01             	or     eax,0x1
c0001413:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001416:	e9 11 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c000141b:	89 c8                	mov    eax,ecx
c000141d:	83 e0 fe             	and    eax,0xfffffffe
c0001420:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001425:	75 1c                	jne    c0001443 <dlrealloc+0xc2>
c0001427:	83 e1 fc             	and    ecx,0xfffffffc
c000142a:	01 f1                	add    ecx,esi
c000142c:	39 cf                	cmp    edi,ecx
c000142e:	77 13                	ja     c0001443 <dlrealloc+0xc2>
c0001430:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001433:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001436:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001439:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000143c:	89 ce                	mov    esi,ecx
c000143e:	e9 ab 00 00 00       	jmp    c00014ee <dlrealloc+0x16d>
c0001443:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001447:	8d 47 f9             	lea    eax,[edi-0x7]
c000144a:	83 ec 0c             	sub    esp,0xc
c000144d:	50                   	push   eax
c000144e:	e8 f1 f9 ff ff       	call   c0000e44 <dlmalloc>
c0001453:	83 c4 10             	add    esp,0x10
c0001456:	89 c1                	mov    ecx,eax
c0001458:	85 c0                	test   eax,eax
c000145a:	0f 84 49 ff ff ff    	je     c00013a9 <dlrealloc+0x28>
c0001460:	8d 40 f8             	lea    eax,[eax-0x8]
c0001463:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001467:	39 c2                	cmp    edx,eax
c0001469:	75 0a                	jne    c0001475 <dlrealloc+0xf4>
c000146b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000146e:	83 e0 fc             	and    eax,0xfffffffc
c0001471:	01 c6                	add    esi,eax
c0001473:	eb 79                	jmp    c00014ee <dlrealloc+0x16d>
c0001475:	83 ee 04             	sub    esi,0x4
c0001478:	83 fe 27             	cmp    esi,0x27
c000147b:	76 16                	jbe    c0001493 <dlrealloc+0x112>
c000147d:	50                   	push   eax
c000147e:	56                   	push   esi
c000147f:	53                   	push   ebx
c0001480:	51                   	push   ecx
c0001481:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001485:	e8 48 f1 ff ff       	call   c00005d2 <memcpy>
c000148a:	83 c4 10             	add    esp,0x10
c000148d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001491:	eb 43                	jmp    c00014d6 <dlrealloc+0x155>
c0001493:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001495:	83 fe 13             	cmp    esi,0x13
c0001498:	89 01                	mov    DWORD PTR [ecx],eax
c000149a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000149d:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c00014a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00014a3:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00014a6:	76 2e                	jbe    c00014d6 <dlrealloc+0x155>
c00014a8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00014ab:	83 fe 1b             	cmp    esi,0x1b
c00014ae:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00014b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00014b4:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c00014b7:	76 1d                	jbe    c00014d6 <dlrealloc+0x155>
c00014b9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00014bc:	83 fe 23             	cmp    esi,0x23
c00014bf:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00014c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00014c5:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00014c8:	76 0c                	jbe    c00014d6 <dlrealloc+0x155>
c00014ca:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00014cd:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00014d0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00014d3:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00014d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014da:	83 ec 0c             	sub    esp,0xc
c00014dd:	53                   	push   ebx
c00014de:	e8 06 f6 ff ff       	call   c0000ae9 <dlfree>
c00014e3:	83 c4 10             	add    esp,0x10
c00014e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00014ea:	89 cb                	mov    ebx,ecx
c00014ec:	eb 3e                	jmp    c000152c <dlrealloc+0x1ab>
c00014ee:	89 f2                	mov    edx,esi
c00014f0:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00014f3:	29 fa                	sub    edx,edi
c00014f5:	83 e1 01             	and    ecx,0x1
c00014f8:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00014fc:	83 fa 0f             	cmp    edx,0xf
c00014ff:	77 0b                	ja     c000150c <dlrealloc+0x18b>
c0001501:	09 ce                	or     esi,ecx
c0001503:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001506:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000150a:	eb 20                	jmp    c000152c <dlrealloc+0x1ab>
c000150c:	01 fd                	add    ebp,edi
c000150e:	83 ec 0c             	sub    esp,0xc
c0001511:	09 cf                	or     edi,ecx
c0001513:	83 ca 01             	or     edx,0x1
c0001516:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c0001519:	83 c5 08             	add    ebp,0x8
c000151c:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c000151f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001523:	55                   	push   ebp
c0001524:	e8 c0 f5 ff ff       	call   c0000ae9 <dlfree>
c0001529:	83 c4 10             	add    esp,0x10
c000152c:	83 c4 1c             	add    esp,0x1c
c000152f:	89 d8                	mov    eax,ebx
c0001531:	5b                   	pop    ebx
c0001532:	5e                   	pop    esi
c0001533:	5f                   	pop    edi
c0001534:	5d                   	pop    ebp
c0001535:	c3                   	ret    

c0001536 <dlmemalign>:
c0001536:	55                   	push   ebp
c0001537:	57                   	push   edi
c0001538:	56                   	push   esi
c0001539:	53                   	push   ebx
c000153a:	83 ec 0c             	sub    esp,0xc
c000153d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001541:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001545:	83 fa 08             	cmp    edx,0x8
c0001548:	77 10                	ja     c000155a <dlmemalign+0x24>
c000154a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000154e:	83 c4 0c             	add    esp,0xc
c0001551:	5b                   	pop    ebx
c0001552:	5e                   	pop    esi
c0001553:	5f                   	pop    edi
c0001554:	5d                   	pop    ebp
c0001555:	e9 ea f8 ff ff       	jmp    c0000e44 <dlmalloc>
c000155a:	bf 10 00 00 00       	mov    edi,0x10
c000155f:	83 fa 0f             	cmp    edx,0xf
c0001562:	76 13                	jbe    c0001577 <dlmemalign+0x41>
c0001564:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001567:	85 d1                	test   ecx,edx
c0001569:	75 04                	jne    c000156f <dlmemalign+0x39>
c000156b:	89 d7                	mov    edi,edx
c000156d:	eb 08                	jmp    c0001577 <dlmemalign+0x41>
c000156f:	39 d7                	cmp    edi,edx
c0001571:	73 04                	jae    c0001577 <dlmemalign+0x41>
c0001573:	01 ff                	add    edi,edi
c0001575:	eb f8                	jmp    c000156f <dlmemalign+0x39>
c0001577:	83 f8 df             	cmp    eax,0xffffffdf
c000157a:	76 07                	jbe    c0001583 <dlmemalign+0x4d>
c000157c:	31 c0                	xor    eax,eax
c000157e:	e9 ce 00 00 00       	jmp    c0001651 <dlmemalign+0x11b>
c0001583:	83 c0 0b             	add    eax,0xb
c0001586:	bd 10 00 00 00       	mov    ebp,0x10
c000158b:	83 f8 0f             	cmp    eax,0xf
c000158e:	76 05                	jbe    c0001595 <dlmemalign+0x5f>
c0001590:	83 e0 f8             	and    eax,0xfffffff8
c0001593:	89 c5                	mov    ebp,eax
c0001595:	83 ec 0c             	sub    esp,0xc
c0001598:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000159c:	50                   	push   eax
c000159d:	e8 a2 f8 ff ff       	call   c0000e44 <dlmalloc>
c00015a2:	83 c4 10             	add    esp,0x10
c00015a5:	89 c1                	mov    ecx,eax
c00015a7:	85 c0                	test   eax,eax
c00015a9:	74 d1                	je     c000157c <dlmemalign+0x46>
c00015ab:	31 d2                	xor    edx,edx
c00015ad:	8d 70 f8             	lea    esi,[eax-0x8]
c00015b0:	f7 f7                	div    edi
c00015b2:	85 d2                	test   edx,edx
c00015b4:	74 62                	je     c0001618 <dlmemalign+0xe2>
c00015b6:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00015ba:	89 f8                	mov    eax,edi
c00015bc:	f7 d8                	neg    eax
c00015be:	21 c3                	and    ebx,eax
c00015c0:	83 eb 08             	sub    ebx,0x8
c00015c3:	89 d8                	mov    eax,ebx
c00015c5:	29 f0                	sub    eax,esi
c00015c7:	83 f8 0f             	cmp    eax,0xf
c00015ca:	77 02                	ja     c00015ce <dlmemalign+0x98>
c00015cc:	01 fb                	add    ebx,edi
c00015ce:	89 d8                	mov    eax,ebx
c00015d0:	29 f0                	sub    eax,esi
c00015d2:	89 c6                	mov    esi,eax
c00015d4:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015d7:	89 c2                	mov    edx,eax
c00015d9:	83 e2 fc             	and    edx,0xfffffffc
c00015dc:	29 f2                	sub    edx,esi
c00015de:	a8 02                	test   al,0x2
c00015e0:	74 10                	je     c00015f2 <dlmemalign+0xbc>
c00015e2:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00015e5:	83 ca 02             	or     edx,0x2
c00015e8:	8d 43 08             	lea    eax,[ebx+0x8]
c00015eb:	89 33                	mov    DWORD PTR [ebx],esi
c00015ed:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00015f0:	eb 5f                	jmp    c0001651 <dlmemalign+0x11b>
c00015f2:	83 ec 0c             	sub    esp,0xc
c00015f5:	89 d0                	mov    eax,edx
c00015f7:	83 c8 01             	or     eax,0x1
c00015fa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00015fd:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001602:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001605:	83 e0 01             	and    eax,0x1
c0001608:	09 f0                	or     eax,esi
c000160a:	89 de                	mov    esi,ebx
c000160c:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000160f:	51                   	push   ecx
c0001610:	e8 d4 f4 ff ff       	call   c0000ae9 <dlfree>
c0001615:	83 c4 10             	add    esp,0x10
c0001618:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000161b:	a8 02                	test   al,0x2
c000161d:	75 2f                	jne    c000164e <dlmemalign+0x118>
c000161f:	83 e0 fc             	and    eax,0xfffffffc
c0001622:	8d 55 10             	lea    edx,[ebp+0x10]
c0001625:	39 c2                	cmp    edx,eax
c0001627:	73 25                	jae    c000164e <dlmemalign+0x118>
c0001629:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000162c:	83 ec 0c             	sub    esp,0xc
c000162f:	29 e8                	sub    eax,ebp
c0001631:	83 c2 08             	add    edx,0x8
c0001634:	83 c8 01             	or     eax,0x1
c0001637:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000163a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000163d:	83 e0 01             	and    eax,0x1
c0001640:	09 c5                	or     ebp,eax
c0001642:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001645:	52                   	push   edx
c0001646:	e8 9e f4 ff ff       	call   c0000ae9 <dlfree>
c000164b:	83 c4 10             	add    esp,0x10
c000164e:	8d 46 08             	lea    eax,[esi+0x8]
c0001651:	83 c4 0c             	add    esp,0xc
c0001654:	5b                   	pop    ebx
c0001655:	5e                   	pop    esi
c0001656:	5f                   	pop    edi
c0001657:	5d                   	pop    ebp
c0001658:	c3                   	ret    

c0001659 <dlcalloc>:
c0001659:	53                   	push   ebx
c000165a:	83 ec 14             	sub    esp,0x14
c000165d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001661:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001666:	50                   	push   eax
c0001667:	e8 d8 f7 ff ff       	call   c0000e44 <dlmalloc>
c000166c:	83 c4 10             	add    esp,0x10
c000166f:	89 c3                	mov    ebx,eax
c0001671:	85 c0                	test   eax,eax
c0001673:	74 77                	je     c00016ec <dlcalloc+0x93>
c0001675:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001678:	89 d0                	mov    eax,edx
c000167a:	83 e0 fc             	and    eax,0xfffffffc
c000167d:	80 e2 02             	and    dl,0x2
c0001680:	75 5a                	jne    c00016dc <dlcalloc+0x83>
c0001682:	83 e8 04             	sub    eax,0x4
c0001685:	83 f8 27             	cmp    eax,0x27
c0001688:	76 03                	jbe    c000168d <dlcalloc+0x34>
c000168a:	51                   	push   ecx
c000168b:	eb 53                	jmp    c00016e0 <dlcalloc+0x87>
c000168d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001693:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000169a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00016a1:	83 f8 13             	cmp    eax,0x13
c00016a4:	76 46                	jbe    c00016ec <dlcalloc+0x93>
c00016a6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00016ad:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00016b4:	83 f8 1b             	cmp    eax,0x1b
c00016b7:	76 33                	jbe    c00016ec <dlcalloc+0x93>
c00016b9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00016c0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00016c7:	83 f8 23             	cmp    eax,0x23
c00016ca:	76 20                	jbe    c00016ec <dlcalloc+0x93>
c00016cc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00016d3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00016da:	eb 10                	jmp    c00016ec <dlcalloc+0x93>
c00016dc:	83 e8 08             	sub    eax,0x8
c00016df:	52                   	push   edx
c00016e0:	50                   	push   eax
c00016e1:	6a 00                	push   0x0
c00016e3:	53                   	push   ebx
c00016e4:	e8 1f ef ff ff       	call   c0000608 <memset>
c00016e9:	83 c4 10             	add    esp,0x10
c00016ec:	89 d8                	mov    eax,ebx
c00016ee:	83 c4 08             	add    esp,0x8
c00016f1:	5b                   	pop    ebx
c00016f2:	c3                   	ret    

c00016f3 <dlcfree>:
c00016f3:	e9 f1 f3 ff ff       	jmp    c0000ae9 <dlfree>

c00016f8 <dlindependent_calloc>:
c00016f8:	83 ec 28             	sub    esp,0x28
c00016fb:	b9 03 00 00 00       	mov    ecx,0x3
c0001700:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001704:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001708:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000170c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001710:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001714:	e8 b9 fa ff ff       	call   c00011d2 <iALLOc>
c0001719:	83 c4 2c             	add    esp,0x2c
c000171c:	c3                   	ret    

c000171d <dlindependent_comalloc>:
c000171d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001721:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001725:	31 c9                	xor    ecx,ecx
c0001727:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000172b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000172f:	e9 9e fa ff ff       	jmp    c00011d2 <iALLOc>

c0001734 <dlvalloc>:
c0001734:	83 ec 0c             	sub    esp,0xc
c0001737:	83 3d 00 b3 03 c0 00 	cmp    DWORD PTR ds:0xc003b300,0x0
c000173e:	75 0a                	jne    c000174a <dlvalloc+0x16>
c0001740:	b8 00 b3 03 c0       	mov    eax,0xc003b300
c0001745:	e8 b8 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000174a:	50                   	push   eax
c000174b:	50                   	push   eax
c000174c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001750:	ff 35 5c b6 03 c0    	push   DWORD PTR ds:0xc003b65c
c0001756:	e8 db fd ff ff       	call   c0001536 <dlmemalign>
c000175b:	83 c4 1c             	add    esp,0x1c
c000175e:	c3                   	ret    

c000175f <dlpvalloc>:
c000175f:	83 ec 0c             	sub    esp,0xc
c0001762:	83 3d 00 b3 03 c0 00 	cmp    DWORD PTR ds:0xc003b300,0x0
c0001769:	75 0a                	jne    c0001775 <dlpvalloc+0x16>
c000176b:	b8 00 b3 03 c0       	mov    eax,0xc003b300
c0001770:	e8 8d f2 ff ff       	call   c0000a02 <malloc_consolidate>
c0001775:	a1 5c b6 03 c0       	mov    eax,ds:0xc003b65c
c000177a:	89 c1                	mov    ecx,eax
c000177c:	52                   	push   edx
c000177d:	f7 d9                	neg    ecx
c000177f:	52                   	push   edx
c0001780:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001784:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001788:	21 ca                	and    edx,ecx
c000178a:	52                   	push   edx
c000178b:	50                   	push   eax
c000178c:	e8 a5 fd ff ff       	call   c0001536 <dlmemalign>
c0001791:	83 c4 1c             	add    esp,0x1c
c0001794:	c3                   	ret    

c0001795 <dlmalloc_trim>:
c0001795:	b8 00 b3 03 c0       	mov    eax,0xc003b300
c000179a:	e8 63 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000179f:	31 c0                	xor    eax,eax
c00017a1:	c3                   	ret    

c00017a2 <dlmalloc_usable_size>:
c00017a2:	53                   	push   ebx
c00017a3:	31 c0                	xor    eax,eax
c00017a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00017a9:	85 c9                	test   ecx,ecx
c00017ab:	74 24                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017ad:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00017b0:	f6 c2 02             	test   dl,0x2
c00017b3:	74 08                	je     c00017bd <dlmalloc_usable_size+0x1b>
c00017b5:	83 e2 fc             	and    edx,0xfffffffc
c00017b8:	8d 42 f8             	lea    eax,[edx-0x8]
c00017bb:	eb 14                	jmp    c00017d1 <dlmalloc_usable_size+0x2f>
c00017bd:	89 d3                	mov    ebx,edx
c00017bf:	31 c0                	xor    eax,eax
c00017c1:	83 e3 fe             	and    ebx,0xfffffffe
c00017c4:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00017c9:	74 06                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017cb:	83 e2 fc             	and    edx,0xfffffffc
c00017ce:	8d 42 fc             	lea    eax,[edx-0x4]
c00017d1:	5b                   	pop    ebx
c00017d2:	c3                   	ret    

c00017d3 <dlmallinfo>:
c00017d3:	55                   	push   ebp
c00017d4:	57                   	push   edi
c00017d5:	56                   	push   esi
c00017d6:	53                   	push   ebx
c00017d7:	83 ec 08             	sub    esp,0x8
c00017da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00017de:	83 3d 2c b3 03 c0 00 	cmp    DWORD PTR ds:0xc003b32c,0x0
c00017e5:	75 0a                	jne    c00017f1 <dlmallinfo+0x1e>
c00017e7:	b8 00 b3 03 c0       	mov    eax,0xc003b300
c00017ec:	e8 11 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c00017f1:	a1 2c b3 03 c0       	mov    eax,ds:0xc003b32c
c00017f6:	31 ed                	xor    ebp,ebp
c00017f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00017fb:	31 c9                	xor    ecx,ecx
c00017fd:	83 e0 fc             	and    eax,0xfffffffc
c0001800:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001804:	31 c0                	xor    eax,eax
c0001806:	8b 14 85 04 b3 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc4cfc]
c000180d:	85 d2                	test   edx,edx
c000180f:	74 0e                	je     c000181f <dlmallinfo+0x4c>
c0001811:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001814:	45                   	inc    ebp
c0001815:	83 e6 fc             	and    esi,0xfffffffc
c0001818:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000181b:	01 f1                	add    ecx,esi
c000181d:	eb ee                	jmp    c000180d <dlmallinfo+0x3a>
c000181f:	40                   	inc    eax
c0001820:	83 f8 0a             	cmp    eax,0xa
c0001823:	75 e1                	jne    c0001806 <dlmallinfo+0x33>
c0001825:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001829:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001830:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001833:	b8 34 b3 03 c0       	mov    eax,0xc003b334
c0001838:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c000183b:	39 f0                	cmp    eax,esi
c000183d:	74 10                	je     c000184f <dlmallinfo+0x7c>
c000183f:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001842:	ff 04 24             	inc    DWORD PTR [esp]
c0001845:	83 e7 fc             	and    edi,0xfffffffc
c0001848:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c000184b:	01 fa                	add    edx,edi
c000184d:	eb ec                	jmp    c000183b <dlmallinfo+0x68>
c000184f:	83 c0 08             	add    eax,0x8
c0001852:	3d 2c b6 03 c0       	cmp    eax,0xc003b62c
c0001857:	75 df                	jne    c0001838 <dlmallinfo+0x65>
c0001859:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000185c:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000185f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001862:	a1 68 b6 03 c0       	mov    eax,ds:0xc003b668
c0001867:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000186a:	89 03                	mov    DWORD PTR [ebx],eax
c000186c:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000186f:	8b 35 50 b6 03 c0    	mov    esi,DWORD PTR ds:0xc003b650
c0001875:	29 d0                	sub    eax,edx
c0001877:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000187a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000187d:	8b 35 64 b6 03 c0    	mov    esi,DWORD PTR ds:0xc003b664
c0001883:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001887:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000188a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000188d:	8b 35 74 b6 03 c0    	mov    esi,DWORD PTR ds:0xc003b674
c0001893:	89 d8                	mov    eax,ebx
c0001895:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001898:	83 c4 08             	add    esp,0x8
c000189b:	5b                   	pop    ebx
c000189c:	5e                   	pop    esi
c000189d:	5f                   	pop    edi
c000189e:	5d                   	pop    ebp
c000189f:	c2 04 00             	ret    0x4

c00018a2 <dlmalloc_stats>:
c00018a2:	83 ec 30             	sub    esp,0x30
c00018a5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00018a9:	50                   	push   eax
c00018aa:	e8 24 ff ff ff       	call   c00017d3 <dlmallinfo>
c00018af:	83 c4 30             	add    esp,0x30
c00018b2:	c3                   	ret    

c00018b3 <dlmallopt>:
c00018b3:	56                   	push   esi
c00018b4:	b8 00 b3 03 c0       	mov    eax,0xc003b300
c00018b9:	53                   	push   ebx
c00018ba:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00018c2:	e8 3b f1 ff ff       	call   c0000a02 <malloc_consolidate>
c00018c7:	8d 46 04             	lea    eax,[esi+0x4]
c00018ca:	83 f8 05             	cmp    eax,0x5
c00018cd:	77 67                	ja     c0001936 <dlmallopt+0x83>
c00018cf:	ff 24 85 84 f3 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0c7c]
c00018d6:	83 fb 50             	cmp    ebx,0x50
c00018d9:	77 5b                	ja     c0001936 <dlmallopt+0x83>
c00018db:	ba 08 00 00 00       	mov    edx,0x8
c00018e0:	85 db                	test   ebx,ebx
c00018e2:	74 12                	je     c00018f6 <dlmallopt+0x43>
c00018e4:	83 c3 0b             	add    ebx,0xb
c00018e7:	ba 10 00 00 00       	mov    edx,0x10
c00018ec:	83 fb 0f             	cmp    ebx,0xf
c00018ef:	76 05                	jbe    c00018f6 <dlmallopt+0x43>
c00018f1:	89 da                	mov    edx,ebx
c00018f3:	83 e2 f8             	and    edx,0xfffffff8
c00018f6:	a1 00 b3 03 c0       	mov    eax,ds:0xc003b300
c00018fb:	83 e0 03             	and    eax,0x3
c00018fe:	09 d0                	or     eax,edx
c0001900:	a3 00 b3 03 c0       	mov    ds:0xc003b300,eax
c0001905:	eb 31                	jmp    c0001938 <dlmallopt+0x85>
c0001907:	89 1d 44 b6 03 c0    	mov    DWORD PTR ds:0xc003b644,ebx
c000190d:	eb 06                	jmp    c0001915 <dlmallopt+0x62>
c000190f:	89 1d 48 b6 03 c0    	mov    DWORD PTR ds:0xc003b648,ebx
c0001915:	be 01 00 00 00       	mov    esi,0x1
c000191a:	eb 1c                	jmp    c0001938 <dlmallopt+0x85>
c000191c:	89 1d 4c b6 03 c0    	mov    DWORD PTR ds:0xc003b64c,ebx
c0001922:	eb f1                	jmp    c0001915 <dlmallopt+0x62>
c0001924:	31 f6                	xor    esi,esi
c0001926:	85 db                	test   ebx,ebx
c0001928:	75 0e                	jne    c0001938 <dlmallopt+0x85>
c000192a:	c7 05 54 b6 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b654,0x0
c0001934:	eb df                	jmp    c0001915 <dlmallopt+0x62>
c0001936:	31 f6                	xor    esi,esi
c0001938:	89 f0                	mov    eax,esi
c000193a:	5b                   	pop    ebx
c000193b:	5e                   	pop    esi
c000193c:	c3                   	ret    

c000193d <disk_status>:
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <disk_initialize>:
c0001940:	31 c0                	xor    eax,eax
c0001942:	c3                   	ret    

c0001943 <disk_read>:
c0001943:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001948:	0f b6 04 85 60 c5 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc3aa0]
c0001950:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001954:	e9 25 7a 01 00       	jmp    c001937e <fatWrapperReadDisk>

c0001959 <disk_write>:
c0001959:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000195e:	0f b6 04 85 60 c5 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc3aa0]
c0001966:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000196a:	e9 56 7a 01 00       	jmp    c00193c5 <fatWrapperWriteDisk>

c000196f <disk_ioctl>:
c000196f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001978:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000197d:	0f b6 04 85 60 c5 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc3aa0]
c0001985:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001989:	e9 7e 7a 01 00       	jmp    c001940c <fatWrapperIoctl>

c000198e <ld_word>:
c000198e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001992:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001995:	c1 e2 08             	shl    edx,0x8
c0001998:	09 d0                	or     eax,edx
c000199a:	c3                   	ret    

c000199b <ld_dword>:
c000199b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c000199f:	89 d1                	mov    ecx,edx
c00019a1:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019a5:	c1 e1 08             	shl    ecx,0x8
c00019a8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019ab:	09 ca                	or     edx,ecx
c00019ad:	c1 e2 08             	shl    edx,0x8
c00019b0:	09 d0                	or     eax,edx
c00019b2:	c3                   	ret    

c00019b3 <ld_qword>:
c00019b3:	57                   	push   edi
c00019b4:	56                   	push   esi
c00019b5:	53                   	push   ebx
c00019b6:	31 db                	xor    ebx,ebx
c00019b8:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00019bb:	89 df                	mov    edi,ebx
c00019bd:	89 ce                	mov    esi,ecx
c00019bf:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00019c3:	0f a4 f7 08          	shld   edi,esi,0x8
c00019c7:	c1 e6 08             	shl    esi,0x8
c00019ca:	09 f2                	or     edx,esi
c00019cc:	89 d6                	mov    esi,edx
c00019ce:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00019d2:	0f a4 f7 08          	shld   edi,esi,0x8
c00019d6:	c1 e6 08             	shl    esi,0x8
c00019d9:	09 f2                	or     edx,esi
c00019db:	89 d6                	mov    esi,edx
c00019dd:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019e1:	0f a4 f7 08          	shld   edi,esi,0x8
c00019e5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019e8:	c1 e6 08             	shl    esi,0x8
c00019eb:	89 fb                	mov    ebx,edi
c00019ed:	09 f2                	or     edx,esi
c00019ef:	89 d1                	mov    ecx,edx
c00019f1:	0f a4 cb 08          	shld   ebx,ecx,0x8
c00019f5:	c1 e1 08             	shl    ecx,0x8
c00019f8:	89 da                	mov    edx,ebx
c00019fa:	09 c8                	or     eax,ecx
c00019fc:	5b                   	pop    ebx
c00019fd:	5e                   	pop    esi
c00019fe:	5f                   	pop    edi
c00019ff:	c3                   	ret    

c0001a00 <st_word>:
c0001a00:	66 89 10             	mov    WORD PTR [eax],dx
c0001a03:	c3                   	ret    

c0001a04 <st_dword>:
c0001a04:	89 10                	mov    DWORD PTR [eax],edx
c0001a06:	c3                   	ret    

c0001a07 <st_qword>:
c0001a07:	89 10                	mov    DWORD PTR [eax],edx
c0001a09:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a0c:	c3                   	ret    

c0001a0d <mem_cpy>:
c0001a0d:	85 c9                	test   ecx,ecx
c0001a0f:	74 10                	je     c0001a21 <mem_cpy+0x14>
c0001a11:	57                   	push   edi
c0001a12:	01 c1                	add    ecx,eax
c0001a14:	56                   	push   esi
c0001a15:	89 c7                	mov    edi,eax
c0001a17:	89 d6                	mov    esi,edx
c0001a19:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a1a:	39 f9                	cmp    ecx,edi
c0001a1c:	75 fb                	jne    c0001a19 <mem_cpy+0xc>
c0001a1e:	5e                   	pop    esi
c0001a1f:	5f                   	pop    edi
c0001a20:	c3                   	ret    
c0001a21:	c3                   	ret    

c0001a22 <mem_set>:
c0001a22:	01 c1                	add    ecx,eax
c0001a24:	40                   	inc    eax
c0001a25:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a28:	39 c8                	cmp    eax,ecx
c0001a2a:	75 f8                	jne    c0001a24 <mem_set+0x2>
c0001a2c:	c3                   	ret    

c0001a2d <mem_cmp>:
c0001a2d:	57                   	push   edi
c0001a2e:	56                   	push   esi
c0001a2f:	89 c6                	mov    esi,eax
c0001a31:	53                   	push   ebx
c0001a32:	46                   	inc    esi
c0001a33:	42                   	inc    edx
c0001a34:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001a38:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001a3c:	29 fb                	sub    ebx,edi
c0001a3e:	89 cf                	mov    edi,ecx
c0001a40:	29 f7                	sub    edi,esi
c0001a42:	01 c7                	add    edi,eax
c0001a44:	74 04                	je     c0001a4a <mem_cmp+0x1d>
c0001a46:	85 db                	test   ebx,ebx
c0001a48:	74 e8                	je     c0001a32 <mem_cmp+0x5>
c0001a4a:	89 d8                	mov    eax,ebx
c0001a4c:	5b                   	pop    ebx
c0001a4d:	5e                   	pop    esi
c0001a4e:	5f                   	pop    edi
c0001a4f:	c3                   	ret    

c0001a50 <chk_chr>:
c0001a50:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001a53:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001a56:	74 07                	je     c0001a5f <chk_chr+0xf>
c0001a58:	39 d1                	cmp    ecx,edx
c0001a5a:	74 03                	je     c0001a5f <chk_chr+0xf>
c0001a5c:	40                   	inc    eax
c0001a5d:	eb f1                	jmp    c0001a50 <chk_chr>
c0001a5f:	89 c8                	mov    eax,ecx
c0001a61:	c3                   	ret    

c0001a62 <dbc_1st>:
c0001a62:	31 c0                	xor    eax,eax
c0001a64:	c3                   	ret    

c0001a65 <dbc_2nd>:
c0001a65:	31 c0                	xor    eax,eax
c0001a67:	c3                   	ret    

c0001a68 <tchar2uni>:
c0001a68:	57                   	push   edi
c0001a69:	89 c7                	mov    edi,eax
c0001a6b:	56                   	push   esi
c0001a6c:	53                   	push   ebx
c0001a6d:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001a6f:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001a71:	8d 73 01             	lea    esi,[ebx+0x1]
c0001a74:	84 c9                	test   cl,cl
c0001a76:	78 0a                	js     c0001a82 <tchar2uni+0x1a>
c0001a78:	0f b6 d1             	movzx  edx,cl
c0001a7b:	89 f3                	mov    ebx,esi
c0001a7d:	e9 9f 00 00 00       	jmp    c0001b21 <tchar2uni+0xb9>
c0001a82:	88 ca                	mov    dl,cl
c0001a84:	83 e2 e0             	and    edx,0xffffffe0
c0001a87:	80 fa c0             	cmp    dl,0xc0
c0001a8a:	75 0c                	jne    c0001a98 <tchar2uni+0x30>
c0001a8c:	89 ca                	mov    edx,ecx
c0001a8e:	b9 01 00 00 00       	mov    ecx,0x1
c0001a93:	83 e2 1f             	and    edx,0x1f
c0001a96:	eb 2e                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001a98:	88 ca                	mov    dl,cl
c0001a9a:	83 e2 f0             	and    edx,0xfffffff0
c0001a9d:	80 fa e0             	cmp    dl,0xe0
c0001aa0:	75 0c                	jne    c0001aae <tchar2uni+0x46>
c0001aa2:	89 ca                	mov    edx,ecx
c0001aa4:	b9 02 00 00 00       	mov    ecx,0x2
c0001aa9:	83 e2 0f             	and    edx,0xf
c0001aac:	eb 18                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001aae:	88 ca                	mov    dl,cl
c0001ab0:	83 e2 f8             	and    edx,0xfffffff8
c0001ab3:	88 d0                	mov    al,dl
c0001ab5:	83 ca ff             	or     edx,0xffffffff
c0001ab8:	3c f0                	cmp    al,0xf0
c0001aba:	75 6c                	jne    c0001b28 <tchar2uni+0xc0>
c0001abc:	89 ca                	mov    edx,ecx
c0001abe:	b9 03 00 00 00       	mov    ecx,0x3
c0001ac3:	83 e2 07             	and    edx,0x7
c0001ac6:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001aca:	46                   	inc    esi
c0001acb:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ace:	88 c8                	mov    al,cl
c0001ad0:	83 e0 c0             	and    eax,0xffffffc0
c0001ad3:	3c 80                	cmp    al,0x80
c0001ad5:	75 4e                	jne    c0001b25 <tchar2uni+0xbd>
c0001ad7:	c1 e2 06             	shl    edx,0x6
c0001ada:	83 e1 3f             	and    ecx,0x3f
c0001add:	09 ca                	or     edx,ecx
c0001adf:	39 de                	cmp    esi,ebx
c0001ae1:	75 e7                	jne    c0001aca <tchar2uni+0x62>
c0001ae3:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ae6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001aec:	77 37                	ja     c0001b25 <tchar2uni+0xbd>
c0001aee:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001af4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001afa:	76 29                	jbe    c0001b25 <tchar2uni+0xbd>
c0001afc:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b02:	76 1d                	jbe    c0001b21 <tchar2uni+0xb9>
c0001b04:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b0a:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b10:	c1 e1 06             	shl    ecx,0x6
c0001b13:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b19:	09 ca                	or     edx,ecx
c0001b1b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b21:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b23:	eb 03                	jmp    c0001b28 <tchar2uni+0xc0>
c0001b25:	83 ca ff             	or     edx,0xffffffff
c0001b28:	5b                   	pop    ebx
c0001b29:	89 d0                	mov    eax,edx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	c3                   	ret    

c0001b2e <put_utf>:
c0001b2e:	53                   	push   ebx
c0001b2f:	83 f8 7f             	cmp    eax,0x7f
c0001b32:	89 c3                	mov    ebx,eax
c0001b34:	b0 00                	mov    al,0x0
c0001b36:	77 11                	ja     c0001b49 <put_utf+0x1b>
c0001b38:	85 c9                	test   ecx,ecx
c0001b3a:	0f 84 e5 00 00 00    	je     c0001c25 <put_utf+0xf7>
c0001b40:	88 1a                	mov    BYTE PTR [edx],bl
c0001b42:	b0 01                	mov    al,0x1
c0001b44:	e9 dc 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b49:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001b4f:	77 23                	ja     c0001b74 <put_utf+0x46>
c0001b51:	83 f9 01             	cmp    ecx,0x1
c0001b54:	0f 86 cb 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b5a:	89 d8                	mov    eax,ebx
c0001b5c:	83 e3 3f             	and    ebx,0x3f
c0001b5f:	c1 e8 06             	shr    eax,0x6
c0001b62:	83 cb 80             	or     ebx,0xffffff80
c0001b65:	83 c8 c0             	or     eax,0xffffffc0
c0001b68:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001b6b:	88 02                	mov    BYTE PTR [edx],al
c0001b6d:	b0 02                	mov    al,0x2
c0001b6f:	e9 b1 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b74:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001b7a:	77 40                	ja     c0001bbc <put_utf+0x8e>
c0001b7c:	83 f9 02             	cmp    ecx,0x2
c0001b7f:	0f 86 a0 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b85:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001b8b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b91:	0f 86 8e 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b97:	89 d8                	mov    eax,ebx
c0001b99:	c1 e8 0c             	shr    eax,0xc
c0001b9c:	83 c8 e0             	or     eax,0xffffffe0
c0001b9f:	88 02                	mov    BYTE PTR [edx],al
c0001ba1:	89 d8                	mov    eax,ebx
c0001ba3:	83 e3 3f             	and    ebx,0x3f
c0001ba6:	c1 e8 06             	shr    eax,0x6
c0001ba9:	83 cb 80             	or     ebx,0xffffff80
c0001bac:	83 e0 3f             	and    eax,0x3f
c0001baf:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001bb2:	83 c8 80             	or     eax,0xffffff80
c0001bb5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001bb8:	b0 03                	mov    al,0x3
c0001bba:	eb 69                	jmp    c0001c25 <put_utf+0xf7>
c0001bbc:	83 f9 03             	cmp    ecx,0x3
c0001bbf:	76 64                	jbe    c0001c25 <put_utf+0xf7>
c0001bc1:	89 d9                	mov    ecx,ebx
c0001bc3:	0f b7 c3             	movzx  eax,bx
c0001bc6:	66 31 c9             	xor    cx,cx
c0001bc9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001bcf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001bd5:	c1 e9 06             	shr    ecx,0x6
c0001bd8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001bde:	77 43                	ja     c0001c23 <put_utf+0xf5>
c0001be0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001be6:	77 3b                	ja     c0001c23 <put_utf+0xf5>
c0001be8:	09 cb                	or     ebx,ecx
c0001bea:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001bf0:	89 d8                	mov    eax,ebx
c0001bf2:	c1 e8 12             	shr    eax,0x12
c0001bf5:	83 c8 f0             	or     eax,0xfffffff0
c0001bf8:	88 02                	mov    BYTE PTR [edx],al
c0001bfa:	89 d8                	mov    eax,ebx
c0001bfc:	c1 e8 0c             	shr    eax,0xc
c0001bff:	83 e0 3f             	and    eax,0x3f
c0001c02:	83 c8 80             	or     eax,0xffffff80
c0001c05:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c08:	89 d8                	mov    eax,ebx
c0001c0a:	83 e3 3f             	and    ebx,0x3f
c0001c0d:	c1 e8 06             	shr    eax,0x6
c0001c10:	83 cb 80             	or     ebx,0xffffff80
c0001c13:	83 e0 3f             	and    eax,0x3f
c0001c16:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c19:	83 c8 80             	or     eax,0xffffff80
c0001c1c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c1f:	b0 04                	mov    al,0x4
c0001c21:	eb 02                	jmp    c0001c25 <put_utf+0xf7>
c0001c23:	31 c0                	xor    eax,eax
c0001c25:	5b                   	pop    ebx
c0001c26:	c3                   	ret    

c0001c27 <clst2sect>:
c0001c27:	89 c1                	mov    ecx,eax
c0001c29:	83 ea 02             	sub    edx,0x2
c0001c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001c2f:	83 e8 02             	sub    eax,0x2
c0001c32:	39 d0                	cmp    eax,edx
c0001c34:	76 0d                	jbe    c0001c43 <clst2sect+0x1c>
c0001c36:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001c3a:	f7 e2                	mul    edx
c0001c3c:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001c3f:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001c42:	c3                   	ret    
c0001c43:	31 c0                	xor    eax,eax
c0001c45:	31 d2                	xor    edx,edx
c0001c47:	c3                   	ret    

c0001c48 <clmt_clust>:
c0001c48:	57                   	push   edi
c0001c49:	89 cf                	mov    edi,ecx
c0001c4b:	56                   	push   esi
c0001c4c:	89 d6                	mov    esi,edx
c0001c4e:	53                   	push   ebx
c0001c4f:	0f ac fe 09          	shrd   esi,edi,0x9
c0001c53:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001c56:	89 f2                	mov    edx,esi
c0001c58:	8b 00                	mov    eax,DWORD PTR [eax]
c0001c5a:	c1 ef 09             	shr    edi,0x9
c0001c5d:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001c61:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001c64:	89 f9                	mov    ecx,edi
c0001c66:	31 ff                	xor    edi,edi
c0001c68:	57                   	push   edi
c0001c69:	56                   	push   esi
c0001c6a:	51                   	push   ecx
c0001c6b:	52                   	push   edx
c0001c6c:	e8 ab c7 01 00       	call   c001e41c <__udivdi3>
c0001c71:	83 c4 10             	add    esp,0x10
c0001c74:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001c76:	85 d2                	test   edx,edx
c0001c78:	74 10                	je     c0001c8a <clmt_clust+0x42>
c0001c7a:	39 d0                	cmp    eax,edx
c0001c7c:	72 07                	jb     c0001c85 <clmt_clust+0x3d>
c0001c7e:	29 d0                	sub    eax,edx
c0001c80:	83 c3 08             	add    ebx,0x8
c0001c83:	eb ef                	jmp    c0001c74 <clmt_clust+0x2c>
c0001c85:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001c88:	89 c2                	mov    edx,eax
c0001c8a:	5b                   	pop    ebx
c0001c8b:	89 d0                	mov    eax,edx
c0001c8d:	5e                   	pop    esi
c0001c8e:	5f                   	pop    edi
c0001c8f:	c3                   	ret    

c0001c90 <pick_lfn>:
c0001c90:	55                   	push   ebp
c0001c91:	57                   	push   edi
c0001c92:	56                   	push   esi
c0001c93:	89 d6                	mov    esi,edx
c0001c95:	53                   	push   ebx
c0001c96:	89 c3                	mov    ebx,eax
c0001c98:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001c9b:	e8 ee fc ff ff       	call   c000198e <ld_word>
c0001ca0:	66 85 c0             	test   ax,ax
c0001ca3:	74 04                	je     c0001ca9 <pick_lfn+0x19>
c0001ca5:	31 c0                	xor    eax,eax
c0001ca7:	eb 5c                	jmp    c0001d05 <pick_lfn+0x75>
c0001ca9:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001cac:	bd 01 00 00 00       	mov    ebp,0x1
c0001cb1:	83 e1 bf             	and    ecx,0xffffffbf
c0001cb4:	31 ff                	xor    edi,edi
c0001cb6:	49                   	dec    ecx
c0001cb7:	6b c9 0d             	imul   ecx,ecx,0xd
c0001cba:	0f b6 87 a0 f4 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe0b60]
c0001cc1:	01 f0                	add    eax,esi
c0001cc3:	e8 c6 fc ff ff       	call   c000198e <ld_word>
c0001cc8:	66 85 ed             	test   bp,bp
c0001ccb:	74 11                	je     c0001cde <pick_lfn+0x4e>
c0001ccd:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cd3:	77 d0                	ja     c0001ca5 <pick_lfn+0x15>
c0001cd5:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001cd9:	89 c5                	mov    ebp,eax
c0001cdb:	41                   	inc    ecx
c0001cdc:	eb 04                	jmp    c0001ce2 <pick_lfn+0x52>
c0001cde:	66 40                	inc    ax
c0001ce0:	75 c3                	jne    c0001ca5 <pick_lfn+0x15>
c0001ce2:	47                   	inc    edi
c0001ce3:	83 ff 0d             	cmp    edi,0xd
c0001ce6:	75 d2                	jne    c0001cba <pick_lfn+0x2a>
c0001ce8:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ceb:	74 13                	je     c0001d00 <pick_lfn+0x70>
c0001ced:	66 85 ed             	test   bp,bp
c0001cf0:	74 0e                	je     c0001d00 <pick_lfn+0x70>
c0001cf2:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cf8:	77 ab                	ja     c0001ca5 <pick_lfn+0x15>
c0001cfa:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d00:	b8 01 00 00 00       	mov    eax,0x1
c0001d05:	5b                   	pop    ebx
c0001d06:	5e                   	pop    esi
c0001d07:	5f                   	pop    edi
c0001d08:	5d                   	pop    ebp
c0001d09:	c3                   	ret    

c0001d0a <put_lfn>:
c0001d0a:	55                   	push   ebp
c0001d0b:	31 ed                	xor    ebp,ebp
c0001d0d:	57                   	push   edi
c0001d0e:	89 d7                	mov    edi,edx
c0001d10:	56                   	push   esi
c0001d11:	31 f6                	xor    esi,esi
c0001d13:	53                   	push   ebx
c0001d14:	83 ec 08             	sub    esp,0x8
c0001d17:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d1a:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d22:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d28:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001d2b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d2e:	31 d2                	xor    edx,edx
c0001d30:	e8 cb fc ff ff       	call   c0001a00 <st_word>
c0001d35:	0f b6 d9             	movzx  ebx,cl
c0001d38:	4b                   	dec    ebx
c0001d39:	6b db 0d             	imul   ebx,ebx,0xd
c0001d3c:	66 83 fe ff          	cmp    si,0xffff
c0001d40:	74 08                	je     c0001d4a <put_lfn+0x40>
c0001d42:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d45:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001d49:	43                   	inc    ebx
c0001d4a:	0f b6 85 a0 f4 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0b60]
c0001d51:	0f b7 d6             	movzx  edx,si
c0001d54:	01 f8                	add    eax,edi
c0001d56:	e8 a5 fc ff ff       	call   c0001a00 <st_word>
c0001d5b:	66 85 f6             	test   si,si
c0001d5e:	75 03                	jne    c0001d63 <put_lfn+0x59>
c0001d60:	83 ce ff             	or     esi,0xffffffff
c0001d63:	45                   	inc    ebp
c0001d64:	83 fd 0d             	cmp    ebp,0xd
c0001d67:	75 d3                	jne    c0001d3c <put_lfn+0x32>
c0001d69:	66 46                	inc    si
c0001d6b:	74 0a                	je     c0001d77 <put_lfn+0x6d>
c0001d6d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001d75:	75 09                	jne    c0001d80 <put_lfn+0x76>
c0001d77:	88 c8                	mov    al,cl
c0001d79:	83 c8 40             	or     eax,0x40
c0001d7c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001d80:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001d84:	88 07                	mov    BYTE PTR [edi],al
c0001d86:	83 c4 08             	add    esp,0x8
c0001d89:	5b                   	pop    ebx
c0001d8a:	5e                   	pop    esi
c0001d8b:	5f                   	pop    edi
c0001d8c:	5d                   	pop    ebp
c0001d8d:	c3                   	ret    

c0001d8e <gen_numname>:
c0001d8e:	57                   	push   edi
c0001d8f:	89 cf                	mov    edi,ecx
c0001d91:	56                   	push   esi
c0001d92:	b9 0b 00 00 00       	mov    ecx,0xb
c0001d97:	53                   	push   ebx
c0001d98:	89 c6                	mov    esi,eax
c0001d9a:	83 ec 10             	sub    esp,0x10
c0001d9d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001da1:	e8 67 fc ff ff       	call   c0001a0d <mem_cpy>
c0001da6:	83 fb 05             	cmp    ebx,0x5
c0001da9:	76 2d                	jbe    c0001dd8 <gen_numname+0x4a>
c0001dab:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001dae:	66 85 c0             	test   ax,ax
c0001db1:	74 25                	je     c0001dd8 <gen_numname+0x4a>
c0001db3:	83 c7 02             	add    edi,0x2
c0001db6:	ba 10 00 00 00       	mov    edx,0x10
c0001dbb:	01 db                	add    ebx,ebx
c0001dbd:	89 c1                	mov    ecx,eax
c0001dbf:	66 d1 e8             	shr    ax,1
c0001dc2:	83 e1 01             	and    ecx,0x1
c0001dc5:	01 cb                	add    ebx,ecx
c0001dc7:	0f ba e3 10          	bt     ebx,0x10
c0001dcb:	73 06                	jae    c0001dd3 <gen_numname+0x45>
c0001dcd:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001dd3:	4a                   	dec    edx
c0001dd4:	75 e5                	jne    c0001dbb <gen_numname+0x2d>
c0001dd6:	eb d3                	jmp    c0001dab <gen_numname+0x1d>
c0001dd8:	b8 07 00 00 00       	mov    eax,0x7
c0001ddd:	88 d9                	mov    cl,bl
c0001ddf:	83 e1 0f             	and    ecx,0xf
c0001de2:	8d 51 30             	lea    edx,[ecx+0x30]
c0001de5:	80 fa 39             	cmp    dl,0x39
c0001de8:	76 03                	jbe    c0001ded <gen_numname+0x5f>
c0001dea:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ded:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001df0:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001df4:	89 da                	mov    edx,ebx
c0001df6:	c1 ea 04             	shr    edx,0x4
c0001df9:	83 fb 0f             	cmp    ebx,0xf
c0001dfc:	76 06                	jbe    c0001e04 <gen_numname+0x76>
c0001dfe:	89 c8                	mov    eax,ecx
c0001e00:	89 d3                	mov    ebx,edx
c0001e02:	eb d9                	jmp    c0001ddd <gen_numname+0x4f>
c0001e04:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e09:	31 d2                	xor    edx,edx
c0001e0b:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e0e:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e11:	39 ca                	cmp    edx,ecx
c0001e13:	73 18                	jae    c0001e2d <gen_numname+0x9f>
c0001e15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e18:	3c 20                	cmp    al,0x20
c0001e1a:	74 11                	je     c0001e2d <gen_numname+0x9f>
c0001e1c:	e8 41 fc ff ff       	call   c0001a62 <dbc_1st>
c0001e21:	85 c0                	test   eax,eax
c0001e23:	74 05                	je     c0001e2a <gen_numname+0x9c>
c0001e25:	39 d3                	cmp    ebx,edx
c0001e27:	74 04                	je     c0001e2d <gen_numname+0x9f>
c0001e29:	42                   	inc    edx
c0001e2a:	42                   	inc    edx
c0001e2b:	eb e1                	jmp    c0001e0e <gen_numname+0x80>
c0001e2d:	b0 20                	mov    al,0x20
c0001e2f:	83 f9 07             	cmp    ecx,0x7
c0001e32:	77 05                	ja     c0001e39 <gen_numname+0xab>
c0001e34:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001e38:	41                   	inc    ecx
c0001e39:	42                   	inc    edx
c0001e3a:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001e3e:	83 fa 07             	cmp    edx,0x7
c0001e41:	76 ea                	jbe    c0001e2d <gen_numname+0x9f>
c0001e43:	83 c4 10             	add    esp,0x10
c0001e46:	5b                   	pop    ebx
c0001e47:	5e                   	pop    esi
c0001e48:	5f                   	pop    edi
c0001e49:	c3                   	ret    

c0001e4a <sum_sfn>:
c0001e4a:	31 c9                	xor    ecx,ecx
c0001e4c:	31 d2                	xor    edx,edx
c0001e4e:	d0 ca                	ror    dl,1
c0001e50:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001e53:	41                   	inc    ecx
c0001e54:	83 f9 0b             	cmp    ecx,0xb
c0001e57:	75 f5                	jne    c0001e4e <sum_sfn+0x4>
c0001e59:	88 d0                	mov    al,dl
c0001e5b:	c3                   	ret    

c0001e5c <xdir_sum>:
c0001e5c:	56                   	push   esi
c0001e5d:	31 c9                	xor    ecx,ecx
c0001e5f:	53                   	push   ebx
c0001e60:	31 d2                	xor    edx,edx
c0001e62:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001e66:	43                   	inc    ebx
c0001e67:	c1 e3 05             	shl    ebx,0x5
c0001e6a:	83 fa 02             	cmp    edx,0x2
c0001e6d:	74 0b                	je     c0001e7a <xdir_sum+0x1e>
c0001e6f:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001e73:	66 d1 c9             	ror    cx,1
c0001e76:	01 f1                	add    ecx,esi
c0001e78:	eb 05                	jmp    c0001e7f <xdir_sum+0x23>
c0001e7a:	ba 03 00 00 00       	mov    edx,0x3
c0001e7f:	42                   	inc    edx
c0001e80:	39 d3                	cmp    ebx,edx
c0001e82:	77 e6                	ja     c0001e6a <xdir_sum+0xe>
c0001e84:	89 c8                	mov    eax,ecx
c0001e86:	5b                   	pop    ebx
c0001e87:	5e                   	pop    esi
c0001e88:	c3                   	ret    

c0001e89 <xsum32>:
c0001e89:	d1 ca                	ror    edx,1
c0001e8b:	0f b6 c0             	movzx  eax,al
c0001e8e:	01 d0                	add    eax,edx
c0001e90:	c3                   	ret    

c0001e91 <get_xfileinfo>:
c0001e91:	55                   	push   ebp
c0001e92:	31 c9                	xor    ecx,ecx
c0001e94:	57                   	push   edi
c0001e95:	bd 40 00 00 00       	mov    ebp,0x40
c0001e9a:	56                   	push   esi
c0001e9b:	31 ff                	xor    edi,edi
c0001e9d:	53                   	push   ebx
c0001e9e:	89 c6                	mov    esi,eax
c0001ea0:	83 ec 0c             	sub    esp,0xc
c0001ea3:	89 d3                	mov    ebx,edx
c0001ea5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001eac:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001eb0:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001eb3:	76 6d                	jbe    c0001f22 <get_xfileinfo+0x91>
c0001eb5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001ebb:	76 0b                	jbe    c0001ec8 <get_xfileinfo+0x37>
c0001ebd:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001ec1:	bf 01 00 00 00       	mov    edi,0x1
c0001ec6:	eb 63                	jmp    c0001f2b <get_xfileinfo+0x9a>
c0001ec8:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001ece:	75 03                	jne    c0001ed3 <get_xfileinfo+0x42>
c0001ed0:	83 c5 02             	add    ebp,0x2
c0001ed3:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001ed6:	83 c5 02             	add    ebp,0x2
c0001ed9:	e8 b0 fa ff ff       	call   c000198e <ld_word>
c0001ede:	ff 04 24             	inc    DWORD PTR [esp]
c0001ee1:	66 85 c9             	test   cx,cx
c0001ee4:	75 0d                	jne    c0001ef3 <get_xfileinfo+0x62>
c0001ee6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001eec:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001ef1:	76 2b                	jbe    c0001f1e <get_xfileinfo+0x8d>
c0001ef3:	c1 e1 10             	shl    ecx,0x10
c0001ef6:	ba ff 00 00 00       	mov    edx,0xff
c0001efb:	0f b7 c0             	movzx  eax,ax
c0001efe:	29 fa                	sub    edx,edi
c0001f00:	09 c8                	or     eax,ecx
c0001f02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f06:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f0a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f0e:	e8 1b fc ff ff       	call   c0001b2e <put_utf>
c0001f13:	84 c0                	test   al,al
c0001f15:	74 a6                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f17:	0f b6 c0             	movzx  eax,al
c0001f1a:	01 c7                	add    edi,eax
c0001f1c:	31 c0                	xor    eax,eax
c0001f1e:	89 c1                	mov    ecx,eax
c0001f20:	eb 8a                	jmp    c0001eac <get_xfileinfo+0x1b>
c0001f22:	85 ff                	test   edi,edi
c0001f24:	74 97                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f26:	66 85 c9             	test   cx,cx
c0001f29:	75 92                	jne    c0001ebd <get_xfileinfo+0x2c>
c0001f2b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001f30:	31 c0                	xor    eax,eax
c0001f32:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001f36:	31 d2                	xor    edx,edx
c0001f38:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001f3b:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001f3e:	80 e1 10             	and    cl,0x10
c0001f41:	75 08                	jne    c0001f4b <get_xfileinfo+0xba>
c0001f43:	8d 46 38             	lea    eax,[esi+0x38]
c0001f46:	e8 68 fa ff ff       	call   c00019b3 <ld_qword>
c0001f4b:	89 03                	mov    DWORD PTR [ebx],eax
c0001f4d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001f50:	8d 46 0c             	lea    eax,[esi+0xc]
c0001f53:	e8 36 fa ff ff       	call   c000198e <ld_word>
c0001f58:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001f5c:	8d 46 0e             	lea    eax,[esi+0xe]
c0001f5f:	e8 2a fa ff ff       	call   c000198e <ld_word>
c0001f64:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001f68:	83 c4 0c             	add    esp,0xc
c0001f6b:	5b                   	pop    ebx
c0001f6c:	5e                   	pop    esi
c0001f6d:	5f                   	pop    edi
c0001f6e:	5d                   	pop    ebp
c0001f6f:	c3                   	ret    

c0001f70 <get_ldnumber>:
c0001f70:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f72:	85 d2                	test   edx,edx
c0001f74:	74 14                	je     c0001f8a <get_ldnumber+0x1a>
c0001f76:	56                   	push   esi
c0001f77:	53                   	push   ebx
c0001f78:	89 d3                	mov    ebx,edx
c0001f7a:	43                   	inc    ebx
c0001f7b:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001f7e:	80 f9 1f             	cmp    cl,0x1f
c0001f81:	76 0d                	jbe    c0001f90 <get_ldnumber+0x20>
c0001f83:	80 f9 3a             	cmp    cl,0x3a
c0001f86:	75 f2                	jne    c0001f7a <get_ldnumber+0xa>
c0001f88:	eb 0a                	jmp    c0001f94 <get_ldnumber+0x24>
c0001f8a:	83 c9 ff             	or     ecx,0xffffffff
c0001f8d:	89 c8                	mov    eax,ecx
c0001f8f:	c3                   	ret    
c0001f90:	31 c9                	xor    ecx,ecx
c0001f92:	eb 24                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001f94:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001f97:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001f9a:	80 f9 09             	cmp    cl,0x9
c0001f9d:	77 16                	ja     c0001fb5 <get_ldnumber+0x45>
c0001f9f:	83 c2 02             	add    edx,0x2
c0001fa2:	83 c9 ff             	or     ecx,0xffffffff
c0001fa5:	39 d3                	cmp    ebx,edx
c0001fa7:	75 0f                	jne    c0001fb8 <get_ldnumber+0x48>
c0001fa9:	89 f2                	mov    edx,esi
c0001fab:	89 18                	mov    DWORD PTR [eax],ebx
c0001fad:	0f be ca             	movsx  ecx,dl
c0001fb0:	83 e9 30             	sub    ecx,0x30
c0001fb3:	eb 03                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001fb5:	83 c9 ff             	or     ecx,0xffffffff
c0001fb8:	89 c8                	mov    eax,ecx
c0001fba:	5b                   	pop    ebx
c0001fbb:	5e                   	pop    esi
c0001fbc:	c3                   	ret    

c0001fbd <crc32>:
c0001fbd:	56                   	push   esi
c0001fbe:	89 d6                	mov    esi,edx
c0001fc0:	53                   	push   ebx
c0001fc1:	b2 01                	mov    dl,0x1
c0001fc3:	bb 08 00 00 00       	mov    ebx,0x8
c0001fc8:	89 f1                	mov    ecx,esi
c0001fca:	84 d1                	test   cl,dl
c0001fcc:	0f 95 c1             	setne  cl
c0001fcf:	0f b6 c9             	movzx  ecx,cl
c0001fd2:	31 c1                	xor    ecx,eax
c0001fd4:	89 c8                	mov    eax,ecx
c0001fd6:	d1 e8                	shr    eax,1
c0001fd8:	80 e1 01             	and    cl,0x1
c0001fdb:	74 05                	je     c0001fe2 <crc32+0x25>
c0001fdd:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0001fe2:	d1 e2                	shl    edx,1
c0001fe4:	4b                   	dec    ebx
c0001fe5:	75 e1                	jne    c0001fc8 <crc32+0xb>
c0001fe7:	5b                   	pop    ebx
c0001fe8:	5e                   	pop    esi
c0001fe9:	c3                   	ret    

c0001fea <test_gpt_header>:
c0001fea:	55                   	push   ebp
c0001feb:	b9 10 00 00 00       	mov    ecx,0x10
c0001ff0:	57                   	push   edi
c0001ff1:	ba a0 f3 01 c0       	mov    edx,0xc001f3a0
c0001ff6:	56                   	push   esi
c0001ff7:	31 ff                	xor    edi,edi
c0001ff9:	53                   	push   ebx
c0001ffa:	89 c3                	mov    ebx,eax
c0001ffc:	e8 2c fa ff ff       	call   c0001a2d <mem_cmp>
c0002001:	85 c0                	test   eax,eax
c0002003:	75 55                	jne    c000205a <test_gpt_header+0x70>
c0002005:	89 c7                	mov    edi,eax
c0002007:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000200c:	83 ce ff             	or     esi,0xffffffff
c000200f:	31 d2                	xor    edx,edx
c0002011:	83 fd 03             	cmp    ebp,0x3
c0002014:	76 05                	jbe    c000201b <test_gpt_header+0x31>
c0002016:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000201b:	89 f0                	mov    eax,esi
c000201d:	45                   	inc    ebp
c000201e:	e8 9a ff ff ff       	call   c0001fbd <crc32>
c0002023:	83 fd 4c             	cmp    ebp,0x4c
c0002026:	89 c6                	mov    esi,eax
c0002028:	75 e5                	jne    c000200f <test_gpt_header+0x25>
c000202a:	8d 43 10             	lea    eax,[ebx+0x10]
c000202d:	f7 d6                	not    esi
c000202f:	e8 67 f9 ff ff       	call   c000199b <ld_dword>
c0002034:	39 c6                	cmp    esi,eax
c0002036:	75 22                	jne    c000205a <test_gpt_header+0x70>
c0002038:	8d 43 54             	lea    eax,[ebx+0x54]
c000203b:	e8 5b f9 ff ff       	call   c000199b <ld_dword>
c0002040:	83 c0 80             	add    eax,0xffffff80
c0002043:	75 15                	jne    c000205a <test_gpt_header+0x70>
c0002045:	8d 43 50             	lea    eax,[ebx+0x50]
c0002048:	e8 4e f9 ff ff       	call   c000199b <ld_dword>
c000204d:	3d 80 00 00 00       	cmp    eax,0x80
c0002052:	0f 96 c0             	setbe  al
c0002055:	0f b6 c0             	movzx  eax,al
c0002058:	89 c7                	mov    edi,eax
c000205a:	5b                   	pop    ebx
c000205b:	89 f8                	mov    eax,edi
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <make_rand>:
c0002061:	56                   	push   esi
c0002062:	85 c0                	test   eax,eax
c0002064:	53                   	push   ebx
c0002065:	75 05                	jne    c000206c <make_rand+0xb>
c0002067:	b8 01 00 00 00       	mov    eax,0x1
c000206c:	01 d1                	add    ecx,edx
c000206e:	bb 08 00 00 00       	mov    ebx,0x8
c0002073:	89 c6                	mov    esi,eax
c0002075:	d1 e8                	shr    eax,1
c0002077:	83 e6 01             	and    esi,0x1
c000207a:	85 f6                	test   esi,esi
c000207c:	74 05                	je     c0002083 <make_rand+0x22>
c000207e:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002083:	4b                   	dec    ebx
c0002084:	75 ed                	jne    c0002073 <make_rand+0x12>
c0002086:	42                   	inc    edx
c0002087:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000208a:	39 ca                	cmp    edx,ecx
c000208c:	75 e0                	jne    c000206e <make_rand+0xd>
c000208e:	5b                   	pop    ebx
c000208f:	5e                   	pop    esi
c0002090:	c3                   	ret    

c0002091 <validate>:
c0002091:	56                   	push   esi
c0002092:	53                   	push   ebx
c0002093:	89 d6                	mov    esi,edx
c0002095:	51                   	push   ecx
c0002096:	85 c0                	test   eax,eax
c0002098:	75 09                	jne    c00020a3 <validate+0x12>
c000209a:	b8 09 00 00 00       	mov    eax,0x9
c000209f:	31 c9                	xor    ecx,ecx
c00020a1:	eb 2f                	jmp    c00020d2 <validate+0x41>
c00020a3:	89 c3                	mov    ebx,eax
c00020a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00020a7:	85 c0                	test   eax,eax
c00020a9:	74 ef                	je     c000209a <validate+0x9>
c00020ab:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00020ae:	74 ea                	je     c000209a <validate+0x9>
c00020b0:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00020b4:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00020b8:	75 e0                	jne    c000209a <validate+0x9>
c00020ba:	83 ec 0c             	sub    esp,0xc
c00020bd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020c1:	50                   	push   eax
c00020c2:	e8 76 f8 ff ff       	call   c000193d <disk_status>
c00020c7:	83 c4 10             	add    esp,0x10
c00020ca:	a8 01                	test   al,0x1
c00020cc:	75 cc                	jne    c000209a <validate+0x9>
c00020ce:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00020d0:	31 c0                	xor    eax,eax
c00020d2:	89 0e                	mov    DWORD PTR [esi],ecx
c00020d4:	5a                   	pop    edx
c00020d5:	5b                   	pop    ebx
c00020d6:	5e                   	pop    esi
c00020d7:	c3                   	ret    

c00020d8 <sync_window>:
c00020d8:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00020dc:	0f 84 85 00 00 00    	je     c0002167 <sync_window+0x8f>
c00020e2:	55                   	push   ebp
c00020e3:	8d 68 54             	lea    ebp,[eax+0x54]
c00020e6:	57                   	push   edi
c00020e7:	56                   	push   esi
c00020e8:	53                   	push   ebx
c00020e9:	89 c3                	mov    ebx,eax
c00020eb:	83 ec 28             	sub    esp,0x28
c00020ee:	6a 01                	push   0x1
c00020f0:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00020f3:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00020f6:	55                   	push   ebp
c00020f7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020fb:	50                   	push   eax
c00020fc:	e8 58 f8 ff ff       	call   c0001959 <disk_write>
c0002101:	83 c4 20             	add    esp,0x20
c0002104:	ba 01 00 00 00       	mov    edx,0x1
c0002109:	85 c0                	test   eax,eax
c000210b:	75 50                	jne    c000215d <sync_window+0x85>
c000210d:	31 ff                	xor    edi,edi
c000210f:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002112:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002116:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000211a:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000211d:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002120:	89 c6                	mov    esi,eax
c0002122:	89 d7                	mov    edi,edx
c0002124:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002127:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000212b:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000212e:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002132:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002136:	73 23                	jae    c000215b <sync_window+0x83>
c0002138:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000213c:	75 1d                	jne    c000215b <sync_window+0x83>
c000213e:	83 ec 0c             	sub    esp,0xc
c0002141:	6a 01                	push   0x1
c0002143:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002147:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000214b:	52                   	push   edx
c000214c:	50                   	push   eax
c000214d:	55                   	push   ebp
c000214e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002152:	50                   	push   eax
c0002153:	e8 01 f8 ff ff       	call   c0001959 <disk_write>
c0002158:	83 c4 20             	add    esp,0x20
c000215b:	31 d2                	xor    edx,edx
c000215d:	83 c4 1c             	add    esp,0x1c
c0002160:	89 d0                	mov    eax,edx
c0002162:	5b                   	pop    ebx
c0002163:	5e                   	pop    esi
c0002164:	5f                   	pop    edi
c0002165:	5d                   	pop    ebp
c0002166:	c3                   	ret    
c0002167:	31 d2                	xor    edx,edx
c0002169:	89 d0                	mov    eax,edx
c000216b:	c3                   	ret    

c000216c <move_window>:
c000216c:	56                   	push   esi
c000216d:	53                   	push   ebx
c000216e:	89 c3                	mov    ebx,eax
c0002170:	83 ec 14             	sub    esp,0x14
c0002173:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002176:	75 07                	jne    c000217f <move_window+0x13>
c0002178:	31 f6                	xor    esi,esi
c000217a:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000217d:	74 59                	je     c00021d8 <move_window+0x6c>
c000217f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002183:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002187:	89 d8                	mov    eax,ebx
c0002189:	e8 4a ff ff ff       	call   c00020d8 <sync_window>
c000218e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002192:	89 c6                	mov    esi,eax
c0002194:	85 c0                	test   eax,eax
c0002196:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000219a:	75 3c                	jne    c00021d8 <move_window+0x6c>
c000219c:	83 ec 0c             	sub    esp,0xc
c000219f:	8d 43 54             	lea    eax,[ebx+0x54]
c00021a2:	6a 01                	push   0x1
c00021a4:	51                   	push   ecx
c00021a5:	52                   	push   edx
c00021a6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00021aa:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00021ae:	50                   	push   eax
c00021af:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021b3:	50                   	push   eax
c00021b4:	e8 8a f7 ff ff       	call   c0001943 <disk_read>
c00021b9:	83 c4 20             	add    esp,0x20
c00021bc:	85 c0                	test   eax,eax
c00021be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00021c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00021c6:	74 0a                	je     c00021d2 <move_window+0x66>
c00021c8:	83 ca ff             	or     edx,0xffffffff
c00021cb:	be 01 00 00 00       	mov    esi,0x1
c00021d0:	89 d1                	mov    ecx,edx
c00021d2:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00021d5:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00021d8:	89 f0                	mov    eax,esi
c00021da:	83 c4 14             	add    esp,0x14
c00021dd:	5b                   	pop    ebx
c00021de:	5e                   	pop    esi
c00021df:	c3                   	ret    

c00021e0 <check_fs>:
c00021e0:	53                   	push   ebx
c00021e1:	89 c3                	mov    ebx,eax
c00021e3:	83 ec 08             	sub    esp,0x8
c00021e6:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00021ea:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00021f1:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00021f8:	e8 6f ff ff ff       	call   c000216c <move_window>
c00021fd:	ba 04 00 00 00       	mov    edx,0x4
c0002202:	85 c0                	test   eax,eax
c0002204:	0f 85 89 00 00 00    	jne    c0002293 <check_fs+0xb3>
c000220a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002210:	e8 79 f7 ff ff       	call   c000198e <ld_word>
c0002215:	ba 03 00 00 00       	mov    edx,0x3
c000221a:	66 3d 55 aa          	cmp    ax,0xaa55
c000221e:	75 73                	jne    c0002293 <check_fs+0xb3>
c0002220:	ba c0 f4 01 c0       	mov    edx,0xc001f4c0
c0002225:	8d 43 54             	lea    eax,[ebx+0x54]
c0002228:	b9 0b 00 00 00       	mov    ecx,0xb
c000222d:	e8 fb f7 ff ff       	call   c0001a2d <mem_cmp>
c0002232:	ba 01 00 00 00       	mov    edx,0x1
c0002237:	85 c0                	test   eax,eax
c0002239:	74 58                	je     c0002293 <check_fs+0xb3>
c000223b:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000223e:	8d 50 18             	lea    edx,[eax+0x18]
c0002241:	80 fa 01             	cmp    dl,0x1
c0002244:	76 09                	jbe    c000224f <check_fs+0x6f>
c0002246:	ba 02 00 00 00       	mov    edx,0x2
c000224b:	3c eb                	cmp    al,0xeb
c000224d:	75 44                	jne    c0002293 <check_fs+0xb3>
c000224f:	ba b4 a1 03 c0       	mov    edx,0xc003a1b4
c0002254:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000225a:	b9 03 00 00 00       	mov    ecx,0x3
c000225f:	e8 c9 f7 ff ff       	call   c0001a2d <mem_cmp>
c0002264:	31 d2                	xor    edx,edx
c0002266:	85 c0                	test   eax,eax
c0002268:	74 29                	je     c0002293 <check_fs+0xb3>
c000226a:	ba cc f4 01 c0       	mov    edx,0xc001f4cc
c000226f:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002275:	b9 05 00 00 00       	mov    ecx,0x5
c000227a:	e8 ae f7 ff ff       	call   c0001a2d <mem_cmp>
c000227f:	31 d2                	xor    edx,edx
c0002281:	85 c0                	test   eax,eax
c0002283:	74 0e                	je     c0002293 <check_fs+0xb3>
c0002285:	31 d2                	xor    edx,edx
c0002287:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000228e:	0f 95 c2             	setne  dl
c0002291:	01 d2                	add    edx,edx
c0002293:	89 d0                	mov    eax,edx
c0002295:	83 c4 08             	add    esp,0x8
c0002298:	5b                   	pop    ebx
c0002299:	c3                   	ret    

c000229a <find_volume>:
c000229a:	55                   	push   ebp
c000229b:	31 c9                	xor    ecx,ecx
c000229d:	57                   	push   edi
c000229e:	56                   	push   esi
c000229f:	89 d6                	mov    esi,edx
c00022a1:	53                   	push   ebx
c00022a2:	31 d2                	xor    edx,edx
c00022a4:	83 ec 3c             	sub    esp,0x3c
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	e8 32 ff ff ff       	call   c00021e0 <check_fs>
c00022ae:	83 f8 02             	cmp    eax,0x2
c00022b1:	74 0e                	je     c00022c1 <find_volume+0x27>
c00022b3:	0f 87 5d 01 00 00    	ja     c0002416 <find_volume+0x17c>
c00022b9:	85 f6                	test   esi,esi
c00022bb:	0f 84 55 01 00 00    	je     c0002416 <find_volume+0x17c>
c00022c1:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00022c8:	0f 85 dd 00 00 00    	jne    c00023ab <find_volume+0x111>
c00022ce:	31 c9                	xor    ecx,ecx
c00022d0:	ba 01 00 00 00       	mov    edx,0x1
c00022d5:	89 d8                	mov    eax,ebx
c00022d7:	e8 90 fe ff ff       	call   c000216c <move_window>
c00022dc:	85 c0                	test   eax,eax
c00022de:	74 0a                	je     c00022ea <find_volume+0x50>
c00022e0:	b8 04 00 00 00       	mov    eax,0x4
c00022e5:	e9 2c 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c00022ea:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00022ed:	89 e8                	mov    eax,ebp
c00022ef:	e8 f6 fc ff ff       	call   c0001fea <test_gpt_header>
c00022f4:	85 c0                	test   eax,eax
c00022f6:	75 0a                	jne    c0002302 <find_volume+0x68>
c00022f8:	b8 03 00 00 00       	mov    eax,0x3
c00022fd:	e9 14 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c0002302:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c0002308:	e8 8e f6 ff ff       	call   c000199b <ld_dword>
c000230d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002311:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002317:	e8 97 f6 ff ff       	call   c00019b3 <ld_qword>
c000231c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002324:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000232c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002334:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002338:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000233c:	74 ba                	je     c00022f8 <find_volume+0x5e>
c000233e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002342:	31 c9                	xor    ecx,ecx
c0002344:	c1 e7 07             	shl    edi,0x7
c0002347:	89 d8                	mov    eax,ebx
c0002349:	89 fa                	mov    edx,edi
c000234b:	c1 ea 09             	shr    edx,0x9
c000234e:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002352:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002356:	e8 11 fe ff ff       	call   c000216c <move_window>
c000235b:	85 c0                	test   eax,eax
c000235d:	75 81                	jne    c00022e0 <find_volume+0x46>
c000235f:	81 e7 80 01 00 00    	and    edi,0x180
c0002365:	b9 10 00 00 00       	mov    ecx,0x10
c000236a:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000236e:	ba b0 f4 01 c0       	mov    edx,0xc001f4b0
c0002373:	e8 b5 f6 ff ff       	call   c0001a2d <mem_cmp>
c0002378:	85 c0                	test   eax,eax
c000237a:	75 29                	jne    c00023a5 <find_volume+0x10b>
c000237c:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002380:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002384:	e8 2a f6 ff ff       	call   c00019b3 <ld_qword>
c0002389:	89 d1                	mov    ecx,edx
c000238b:	89 c2                	mov    edx,eax
c000238d:	89 d8                	mov    eax,ebx
c000238f:	e8 4c fe ff ff       	call   c00021e0 <check_fs>
c0002394:	85 f6                	test   esi,esi
c0002396:	75 07                	jne    c000239f <find_volume+0x105>
c0002398:	83 f8 01             	cmp    eax,0x1
c000239b:	77 08                	ja     c00023a5 <find_volume+0x10b>
c000239d:	eb 77                	jmp    c0002416 <find_volume+0x17c>
c000239f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00023a3:	74 71                	je     c0002416 <find_volume+0x17c>
c00023a5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00023a9:	eb 89                	jmp    c0002334 <find_volume+0x9a>
c00023ab:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00023af:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00023b5:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00023bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023bf:	89 cd                	mov    ebp,ecx
c00023c1:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00023c5:	89 f8                	mov    eax,edi
c00023c7:	83 c7 10             	add    edi,0x10
c00023ca:	e8 cc f5 ff ff       	call   c000199b <ld_dword>
c00023cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00023d3:	89 01                	mov    DWORD PTR [ecx],eax
c00023d5:	83 c1 04             	add    ecx,0x4
c00023d8:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00023dc:	75 e3                	jne    c00023c1 <find_volume+0x127>
c00023de:	31 ff                	xor    edi,edi
c00023e0:	85 f6                	test   esi,esi
c00023e2:	74 03                	je     c00023e7 <find_volume+0x14d>
c00023e4:	8d 7e ff             	lea    edi,[esi-0x1]
c00023e7:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00023eb:	85 d2                	test   edx,edx
c00023ed:	74 14                	je     c0002403 <find_volume+0x169>
c00023ef:	31 c9                	xor    ecx,ecx
c00023f1:	89 d8                	mov    eax,ebx
c00023f3:	e8 e8 fd ff ff       	call   c00021e0 <check_fs>
c00023f8:	83 f8 01             	cmp    eax,0x1
c00023fb:	76 19                	jbe    c0002416 <find_volume+0x17c>
c00023fd:	85 f6                	test   esi,esi
c00023ff:	74 0f                	je     c0002410 <find_volume+0x176>
c0002401:	eb 13                	jmp    c0002416 <find_volume+0x17c>
c0002403:	85 f6                	test   esi,esi
c0002405:	0f 85 ed fe ff ff    	jne    c00022f8 <find_volume+0x5e>
c000240b:	b8 03 00 00 00       	mov    eax,0x3
c0002410:	47                   	inc    edi
c0002411:	83 ff 03             	cmp    edi,0x3
c0002414:	76 d1                	jbe    c00023e7 <find_volume+0x14d>
c0002416:	83 c4 3c             	add    esp,0x3c
c0002419:	5b                   	pop    ebx
c000241a:	5e                   	pop    esi
c000241b:	5f                   	pop    edi
c000241c:	5d                   	pop    ebp
c000241d:	c3                   	ret    

c000241e <mount_volume>:
c000241e:	55                   	push   ebp
c000241f:	57                   	push   edi
c0002420:	89 cf                	mov    edi,ecx
c0002422:	56                   	push   esi
c0002423:	53                   	push   ebx
c0002424:	bb 0b 00 00 00       	mov    ebx,0xb
c0002429:	83 ec 3c             	sub    esp,0x3c
c000242c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002432:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002436:	e8 35 fb ff ff       	call   c0001f70 <get_ldnumber>
c000243b:	85 c0                	test   eax,eax
c000243d:	0f 88 3a 05 00 00    	js     c000297d <mount_volume+0x55f>
c0002443:	8b 2c 85 a0 b6 03 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffc4960]
c000244a:	89 c6                	mov    esi,eax
c000244c:	bb 0c 00 00 00       	mov    ebx,0xc
c0002451:	85 ed                	test   ebp,ebp
c0002453:	0f 84 24 05 00 00    	je     c000297d <mount_volume+0x55f>
c0002459:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245d:	83 e7 fe             	and    edi,0xfffffffe
c0002460:	89 2a                	mov    DWORD PTR [edx],ebp
c0002462:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002466:	74 32                	je     c000249a <mount_volume+0x7c>
c0002468:	83 ec 0c             	sub    esp,0xc
c000246b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000246f:	50                   	push   eax
c0002470:	e8 c8 f4 ff ff       	call   c000193d <disk_status>
c0002475:	83 c4 10             	add    esp,0x10
c0002478:	a8 01                	test   al,0x1
c000247a:	75 1e                	jne    c000249a <mount_volume+0x7c>
c000247c:	31 db                	xor    ebx,ebx
c000247e:	89 f9                	mov    ecx,edi
c0002480:	84 c9                	test   cl,cl
c0002482:	0f 84 f5 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002488:	a8 04                	test   al,0x4
c000248a:	0f 84 ed 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002490:	bb 0a 00 00 00       	mov    ebx,0xa
c0002495:	e9 e3 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c000249a:	83 ec 0c             	sub    esp,0xc
c000249d:	89 f0                	mov    eax,esi
c000249f:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00024a3:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c00024a6:	0f b6 f0             	movzx  esi,al
c00024a9:	bb 03 00 00 00       	mov    ebx,0x3
c00024ae:	56                   	push   esi
c00024af:	e8 8c f4 ff ff       	call   c0001940 <disk_initialize>
c00024b4:	83 c4 10             	add    esp,0x10
c00024b7:	a8 01                	test   al,0x1
c00024b9:	0f 85 be 04 00 00    	jne    c000297d <mount_volume+0x55f>
c00024bf:	89 f9                	mov    ecx,edi
c00024c1:	84 c9                	test   cl,cl
c00024c3:	74 04                	je     c00024c9 <mount_volume+0xab>
c00024c5:	a8 04                	test   al,0x4
c00024c7:	75 c7                	jne    c0002490 <mount_volume+0x72>
c00024c9:	31 d2                	xor    edx,edx
c00024cb:	89 e8                	mov    eax,ebp
c00024cd:	e8 c8 fd ff ff       	call   c000229a <find_volume>
c00024d2:	83 f8 04             	cmp    eax,0x4
c00024d5:	75 0a                	jne    c00024e1 <mount_volume+0xc3>
c00024d7:	bb 01 00 00 00       	mov    ebx,0x1
c00024dc:	e9 9c 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024e1:	83 f8 01             	cmp    eax,0x1
c00024e4:	76 0a                	jbe    c00024f0 <mount_volume+0xd2>
c00024e6:	bb 0d 00 00 00       	mov    ebx,0xd
c00024eb:	e9 8d 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024f0:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00024f3:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00024f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00024fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00024fe:	75 17                	jne    c0002517 <mount_volume+0xf9>
c0002500:	b8 0b 00 00 00       	mov    eax,0xb
c0002505:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000250a:	75 da                	jne    c00024e6 <mount_volume+0xc8>
c000250c:	40                   	inc    eax
c000250d:	83 f8 40             	cmp    eax,0x40
c0002510:	75 f3                	jne    c0002505 <mount_volume+0xe7>
c0002512:	e9 5a 02 00 00       	jmp    c0002771 <mount_volume+0x353>
c0002517:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000251a:	e8 6f f4 ff ff       	call   c000198e <ld_word>
c000251f:	66 3d 00 02          	cmp    ax,0x200
c0002523:	75 c1                	jne    c00024e6 <mount_volume+0xc8>
c0002525:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002528:	e8 61 f4 ff ff       	call   c000198e <ld_word>
c000252d:	0f b7 c0             	movzx  eax,ax
c0002530:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002534:	85 c0                	test   eax,eax
c0002536:	75 0c                	jne    c0002544 <mount_volume+0x126>
c0002538:	8d 45 78             	lea    eax,[ebp+0x78]
c000253b:	e8 5b f4 ff ff       	call   c000199b <ld_dword>
c0002540:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002548:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000254b:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000254e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002552:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002555:	48                   	dec    eax
c0002556:	3c 01                	cmp    al,0x1
c0002558:	77 8c                	ja     c00024e6 <mount_volume+0xc8>
c000255a:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000255e:	89 c3                	mov    ebx,eax
c0002560:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002564:	66 85 c0             	test   ax,ax
c0002567:	0f 84 79 ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c000256d:	8d 40 ff             	lea    eax,[eax-0x1]
c0002570:	85 d8                	test   eax,ebx
c0002572:	0f 85 6e ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002578:	8d 45 65             	lea    eax,[ebp+0x65]
c000257b:	e8 0e f4 ff ff       	call   c000198e <ld_word>
c0002580:	89 c7                	mov    edi,eax
c0002582:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002586:	a8 0f                	test   al,0xf
c0002588:	0f 85 58 ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c000258e:	8d 45 67             	lea    eax,[ebp+0x67]
c0002591:	e8 f8 f3 ff ff       	call   c000198e <ld_word>
c0002596:	0f b7 f0             	movzx  esi,ax
c0002599:	85 f6                	test   esi,esi
c000259b:	75 0a                	jne    c00025a7 <mount_volume+0x189>
c000259d:	8d 45 74             	lea    eax,[ebp+0x74]
c00025a0:	e8 f6 f3 ff ff       	call   c000199b <ld_dword>
c00025a5:	89 c6                	mov    esi,eax
c00025a7:	8d 45 62             	lea    eax,[ebp+0x62]
c00025aa:	e8 df f3 ff ff       	call   c000198e <ld_word>
c00025af:	66 85 c0             	test   ax,ax
c00025b2:	0f 84 2e ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c00025b8:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00025bd:	0f b7 c8             	movzx  ecx,ax
c00025c0:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00025c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00025c9:	89 fa                	mov    edx,edi
c00025cb:	66 c1 ea 04          	shr    dx,0x4
c00025cf:	0f b7 d2             	movzx  edx,dx
c00025d2:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00025d6:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00025d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025dd:	39 c6                	cmp    esi,eax
c00025df:	0f 82 01 ff ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025e5:	29 c6                	sub    esi,eax
c00025e7:	31 d2                	xor    edx,edx
c00025e9:	89 f0                	mov    eax,esi
c00025eb:	f7 f3                	div    ebx
c00025ed:	39 de                	cmp    esi,ebx
c00025ef:	0f 82 f1 fe ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025f5:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00025fa:	0f 87 e6 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c0002600:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002605:	0f 86 63 03 00 00    	jbe    c000296e <mount_volume+0x550>
c000260b:	bb 03 00 00 00       	mov    ebx,0x3
c0002610:	8d 70 02             	lea    esi,[eax+0x2]
c0002613:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002617:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000261b:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000261e:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002621:	31 d2                	xor    edx,edx
c0002623:	89 c8                	mov    eax,ecx
c0002625:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002628:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000262c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002630:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002634:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002638:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000263b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000263e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002642:	31 d2                	xor    edx,edx
c0002644:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002648:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000264c:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000264f:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002652:	83 fb 03             	cmp    ebx,0x3
c0002655:	75 2b                	jne    c0002682 <mount_volume+0x264>
c0002657:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000265a:	e8 2f f3 ff ff       	call   c000198e <ld_word>
c000265f:	66 09 c7             	or     di,ax
c0002662:	0f 85 7e fe ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002668:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000266e:	c1 e6 02             	shl    esi,0x2
c0002671:	e8 25 f3 ff ff       	call   c000199b <ld_dword>
c0002676:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000267d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002680:	eb 30                	jmp    c00026b2 <mount_volume+0x294>
c0002682:	66 85 ff             	test   di,di
c0002685:	0f 84 5b fe ff ff    	je     c00024e6 <mount_volume+0xc8>
c000268b:	31 d2                	xor    edx,edx
c000268d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002691:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002695:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002699:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000269c:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000269f:	83 fb 02             	cmp    ebx,0x2
c00026a2:	75 04                	jne    c00026a8 <mount_volume+0x28a>
c00026a4:	01 f6                	add    esi,esi
c00026a6:	eb 0a                	jmp    c00026b2 <mount_volume+0x294>
c00026a8:	8d 04 76             	lea    eax,[esi+esi*2]
c00026ab:	83 e6 01             	and    esi,0x1
c00026ae:	d1 e8                	shr    eax,1
c00026b0:	01 c6                	add    esi,eax
c00026b2:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00026b8:	c1 ee 09             	shr    esi,0x9
c00026bb:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00026bf:	0f 87 21 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00026c5:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00026cc:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00026d3:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00026d7:	83 fb 03             	cmp    ebx,0x3
c00026da:	75 7a                	jne    c0002756 <mount_volume+0x338>
c00026dc:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00026e2:	e8 a7 f2 ff ff       	call   c000198e <ld_word>
c00026e7:	66 48                	dec    ax
c00026e9:	75 6b                	jne    c0002756 <mount_volume+0x338>
c00026eb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026f3:	83 c2 01             	add    edx,0x1
c00026f6:	89 e8                	mov    eax,ebp
c00026f8:	83 d1 00             	adc    ecx,0x0
c00026fb:	e8 6c fa ff ff       	call   c000216c <move_window>
c0002700:	85 c0                	test   eax,eax
c0002702:	75 52                	jne    c0002756 <mount_volume+0x338>
c0002704:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c0002708:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c000270e:	e8 7b f2 ff ff       	call   c000198e <ld_word>
c0002713:	66 3d 55 aa          	cmp    ax,0xaa55
c0002717:	75 3d                	jne    c0002756 <mount_volume+0x338>
c0002719:	8d 45 54             	lea    eax,[ebp+0x54]
c000271c:	e8 7a f2 ff ff       	call   c000199b <ld_dword>
c0002721:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002726:	75 2e                	jne    c0002756 <mount_volume+0x338>
c0002728:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000272e:	e8 68 f2 ff ff       	call   c000199b <ld_dword>
c0002733:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002738:	75 1c                	jne    c0002756 <mount_volume+0x338>
c000273a:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002740:	e8 56 f2 ff ff       	call   c000199b <ld_dword>
c0002745:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002748:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000274e:	e8 48 f2 ff ff       	call   c000199b <ld_dword>
c0002753:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002756:	66 a1 80 b6 03 c0    	mov    ax,ds:0xc003b680
c000275c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000275f:	40                   	inc    eax
c0002760:	31 db                	xor    ebx,ebx
c0002762:	66 a3 80 b6 03 c0    	mov    ds:0xc003b680,ax
c0002768:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000276c:	e9 0c 02 00 00       	jmp    c000297d <mount_volume+0x55f>
c0002771:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002777:	e8 12 f2 ff ff       	call   c000198e <ld_word>
c000277c:	66 3d 00 01          	cmp    ax,0x100
c0002780:	0f 85 60 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002786:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000278d:	0f 85 53 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002793:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002799:	e8 15 f2 ff ff       	call   c00019b3 <ld_qword>
c000279e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00027a6:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c00027ac:	e8 ea f1 ff ff       	call   c000199b <ld_dword>
c00027b1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027b4:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c00027ba:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027bd:	fe c8                	dec    al
c00027bf:	0f 85 21 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c00027c5:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00027cc:	bb 01 00 00 00       	mov    ebx,0x1
c00027d1:	d3 e3                	shl    ebx,cl
c00027d3:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00027d7:	66 85 db             	test   bx,bx
c00027da:	0f 84 06 fd ff ff    	je     c00024e6 <mount_volume+0xc8>
c00027e0:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00027e6:	e8 b0 f1 ff ff       	call   c000199b <ld_dword>
c00027eb:	89 c6                	mov    esi,eax
c00027ed:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00027f2:	0f 87 ee fc ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00027f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027fc:	8d 40 02             	lea    eax,[eax+0x2]
c00027ff:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002802:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002805:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002809:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000280c:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002812:	e8 84 f1 ff ff       	call   c000199b <ld_dword>
c0002817:	31 d2                	xor    edx,edx
c0002819:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000281d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002821:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002825:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002829:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000282c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000282f:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002835:	e8 61 f1 ff ff       	call   c000199b <ld_dword>
c000283a:	31 d2                	xor    edx,edx
c000283c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002840:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002844:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002848:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000284b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000284e:	0f b7 c3             	movzx  eax,bx
c0002851:	31 d2                	xor    edx,edx
c0002853:	0f af f0             	imul   esi,eax
c0002856:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000285a:	89 f0                	mov    eax,esi
c000285c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002860:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002864:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002868:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000286c:	39 c1                	cmp    ecx,eax
c000286e:	89 df                	mov    edi,ebx
c0002870:	19 d7                	sbb    edi,edx
c0002872:	0f 82 6e fc ff ff    	jb     c00024e6 <mount_volume+0xc8>
c0002878:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000287e:	31 db                	xor    ebx,ebx
c0002880:	e8 16 f1 ff ff       	call   c000199b <ld_dword>
c0002885:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000288c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000288f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002897:	85 db                	test   ebx,ebx
c0002899:	75 39                	jne    c00028d4 <mount_volume+0x4b6>
c000289b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000289f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00028a3:	0f 86 3d fc ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028a9:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c00028ac:	31 ff                	xor    edi,edi
c00028ae:	89 e8                	mov    eax,ebp
c00028b0:	e8 72 f3 ff ff       	call   c0001c27 <clst2sect>
c00028b5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00028b9:	01 c6                	add    esi,eax
c00028bb:	89 e8                	mov    eax,ebp
c00028bd:	11 d7                	adc    edi,edx
c00028bf:	89 f2                	mov    edx,esi
c00028c1:	89 f9                	mov    ecx,edi
c00028c3:	e8 a4 f8 ff ff       	call   c000216c <move_window>
c00028c8:	85 c0                	test   eax,eax
c00028ca:	0f 85 07 fc ff ff    	jne    c00024d7 <mount_volume+0xb9>
c00028d0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00028d4:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00028d9:	74 0b                	je     c00028e6 <mount_volume+0x4c8>
c00028db:	83 c3 20             	add    ebx,0x20
c00028de:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00028e4:	eb b1                	jmp    c0002897 <mount_volume+0x479>
c00028e6:	8d 75 54             	lea    esi,[ebp+0x54]
c00028e9:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00028ed:	e8 a9 f0 ff ff       	call   c000199b <ld_dword>
c00028f2:	89 c3                	mov    ebx,eax
c00028f4:	83 f8 01             	cmp    eax,0x1
c00028f7:	0f 86 e9 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028fd:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002900:	0f 86 e0 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c0002906:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002909:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000290d:	0f af c2             	imul   eax,edx
c0002910:	31 d2                	xor    edx,edx
c0002912:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002915:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002918:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000291b:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c000291e:	31 c9                	xor    ecx,ecx
c0002920:	89 da                	mov    edx,ebx
c0002922:	89 e8                	mov    eax,ebp
c0002924:	c1 ea 07             	shr    edx,0x7
c0002927:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c000292a:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c000292d:	e8 3a f8 ff ff       	call   c000216c <move_window>
c0002932:	85 c0                	test   eax,eax
c0002934:	0f 85 9d fb ff ff    	jne    c00024d7 <mount_volume+0xb9>
c000293a:	89 d8                	mov    eax,ebx
c000293c:	83 e0 7f             	and    eax,0x7f
c000293f:	8d 04 86             	lea    eax,[esi+eax*4]
c0002942:	e8 54 f0 ff ff       	call   c000199b <ld_dword>
c0002947:	83 f8 ff             	cmp    eax,0xffffffff
c000294a:	74 0a                	je     c0002956 <mount_volume+0x538>
c000294c:	43                   	inc    ebx
c000294d:	39 d8                	cmp    eax,ebx
c000294f:	74 cd                	je     c000291e <mount_volume+0x500>
c0002951:	e9 90 fb ff ff       	jmp    c00024e6 <mount_volume+0xc8>
c0002956:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000295d:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002964:	bb 04 00 00 00       	mov    ebx,0x4
c0002969:	e9 e8 fd ff ff       	jmp    c0002756 <mount_volume+0x338>
c000296e:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002973:	19 db                	sbb    ebx,ebx
c0002975:	83 c3 02             	add    ebx,0x2
c0002978:	e9 93 fc ff ff       	jmp    c0002610 <mount_volume+0x1f2>
c000297d:	83 c4 3c             	add    esp,0x3c
c0002980:	89 d8                	mov    eax,ebx
c0002982:	5b                   	pop    ebx
c0002983:	5e                   	pop    esi
c0002984:	5f                   	pop    edi
c0002985:	5d                   	pop    ebp
c0002986:	c3                   	ret    

c0002987 <find_bitmap>:
c0002987:	55                   	push   ebp
c0002988:	57                   	push   edi
c0002989:	89 c7                	mov    edi,eax
c000298b:	56                   	push   esi
c000298c:	8d 72 fe             	lea    esi,[edx-0x2]
c000298f:	53                   	push   ebx
c0002990:	83 ec 1c             	sub    esp,0x1c
c0002993:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002996:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000299a:	83 e8 02             	sub    eax,0x2
c000299d:	39 f0                	cmp    eax,esi
c000299f:	77 02                	ja     c00029a3 <find_bitmap+0x1c>
c00029a1:	31 f6                	xor    esi,esi
c00029a3:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00029a7:	89 f3                	mov    ebx,esi
c00029a9:	31 ed                	xor    ebp,ebp
c00029ab:	31 c9                	xor    ecx,ecx
c00029ad:	89 da                	mov    edx,ebx
c00029af:	89 f8                	mov    eax,edi
c00029b1:	c1 ea 0c             	shr    edx,0xc
c00029b4:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c00029b7:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c00029ba:	e8 ad f7 ff ff       	call   c000216c <move_window>
c00029bf:	85 c0                	test   eax,eax
c00029c1:	75 68                	jne    c0002a2b <find_bitmap+0xa4>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	89 d9                	mov    ecx,ebx
c00029c7:	c1 ea 03             	shr    edx,0x3
c00029ca:	83 e1 07             	and    ecx,0x7
c00029cd:	b8 01 00 00 00       	mov    eax,0x1
c00029d2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c00029d8:	d3 e0                	shl    eax,cl
c00029da:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c00029dd:	83 e9 02             	sub    ecx,0x2
c00029e0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00029e4:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c00029e8:	43                   	inc    ebx
c00029e9:	21 c1                	and    ecx,eax
c00029eb:	d1 e0                	shl    eax,1
c00029ed:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c00029f1:	77 09                	ja     c00029fc <find_bitmap+0x75>
c00029f3:	31 db                	xor    ebx,ebx
c00029f5:	ba 00 02 00 00       	mov    edx,0x200
c00029fa:	31 c0                	xor    eax,eax
c00029fc:	84 c9                	test   cl,cl
c00029fe:	75 10                	jne    c0002a10 <find_bitmap+0x89>
c0002a00:	45                   	inc    ebp
c0002a01:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a05:	75 0f                	jne    c0002a16 <find_bitmap+0x8f>
c0002a07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a0b:	83 c0 02             	add    eax,0x2
c0002a0e:	eb 22                	jmp    c0002a32 <find_bitmap+0xab>
c0002a10:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a14:	31 ed                	xor    ebp,ebp
c0002a16:	39 de                	cmp    esi,ebx
c0002a18:	74 16                	je     c0002a30 <find_bitmap+0xa9>
c0002a1a:	84 c0                	test   al,al
c0002a1c:	75 c6                	jne    c00029e4 <find_bitmap+0x5d>
c0002a1e:	42                   	inc    edx
c0002a1f:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a25:	77 84                	ja     c00029ab <find_bitmap+0x24>
c0002a27:	b0 01                	mov    al,0x1
c0002a29:	eb b9                	jmp    c00029e4 <find_bitmap+0x5d>
c0002a2b:	83 c8 ff             	or     eax,0xffffffff
c0002a2e:	eb 02                	jmp    c0002a32 <find_bitmap+0xab>
c0002a30:	31 c0                	xor    eax,eax
c0002a32:	83 c4 1c             	add    esp,0x1c
c0002a35:	5b                   	pop    ebx
c0002a36:	5e                   	pop    esi
c0002a37:	5f                   	pop    edi
c0002a38:	5d                   	pop    ebp
c0002a39:	c3                   	ret    

c0002a3a <change_bitmap>:
c0002a3a:	55                   	push   ebp
c0002a3b:	89 cd                	mov    ebp,ecx
c0002a3d:	57                   	push   edi
c0002a3e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002a41:	56                   	push   esi
c0002a42:	89 c7                	mov    edi,eax
c0002a44:	53                   	push   ebx
c0002a45:	89 c8                	mov    eax,ecx
c0002a47:	83 ec 1c             	sub    esp,0x1c
c0002a4a:	31 d2                	xor    edx,edx
c0002a4c:	89 ce                	mov    esi,ecx
c0002a4e:	c1 e8 0c             	shr    eax,0xc
c0002a51:	bb 01 00 00 00       	mov    ebx,0x1
c0002a56:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002a59:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002a5c:	c1 ee 03             	shr    esi,0x3
c0002a5f:	83 e1 07             	and    ecx,0x7
c0002a62:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002a68:	d3 e3                	shl    ebx,cl
c0002a6a:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002a6e:	89 c1                	mov    ecx,eax
c0002a70:	89 d3                	mov    ebx,edx
c0002a72:	83 c1 01             	add    ecx,0x1
c0002a75:	83 d3 00             	adc    ebx,0x0
c0002a78:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a7c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002a80:	89 d1                	mov    ecx,edx
c0002a82:	89 c2                	mov    edx,eax
c0002a84:	89 f8                	mov    eax,edi
c0002a86:	e8 e1 f6 ff ff       	call   c000216c <move_window>
c0002a8b:	89 c1                	mov    ecx,eax
c0002a8d:	85 c0                	test   eax,eax
c0002a8f:	75 48                	jne    c0002ad9 <change_bitmap+0x9f>
c0002a91:	31 d2                	xor    edx,edx
c0002a93:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002a97:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002a9b:	0f 95 c2             	setne  dl
c0002a9e:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002aa2:	74 3c                	je     c0002ae0 <change_bitmap+0xa6>
c0002aa4:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002aa8:	4d                   	dec    ebp
c0002aa9:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002ab1:	74 32                	je     c0002ae5 <change_bitmap+0xab>
c0002ab3:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002ab7:	75 d8                	jne    c0002a91 <change_bitmap+0x57>
c0002ab9:	8d 46 01             	lea    eax,[esi+0x1]
c0002abc:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002ac1:	89 c3                	mov    ebx,eax
c0002ac3:	31 f6                	xor    esi,esi
c0002ac5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ac9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acd:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ad3:	74 99                	je     c0002a6e <change_bitmap+0x34>
c0002ad5:	89 de                	mov    esi,ebx
c0002ad7:	eb b8                	jmp    c0002a91 <change_bitmap+0x57>
c0002ad9:	b9 01 00 00 00       	mov    ecx,0x1
c0002ade:	eb 05                	jmp    c0002ae5 <change_bitmap+0xab>
c0002ae0:	b9 02 00 00 00       	mov    ecx,0x2
c0002ae5:	83 c4 1c             	add    esp,0x1c
c0002ae8:	89 c8                	mov    eax,ecx
c0002aea:	5b                   	pop    ebx
c0002aeb:	5e                   	pop    esi
c0002aec:	5f                   	pop    edi
c0002aed:	5d                   	pop    ebp
c0002aee:	c3                   	ret    

c0002aef <put_fat>:
c0002aef:	83 fa 01             	cmp    edx,0x1
c0002af2:	0f 86 7b 01 00 00    	jbe    c0002c73 <put_fat+0x184>
c0002af8:	55                   	push   ebp
c0002af9:	57                   	push   edi
c0002afa:	89 cf                	mov    edi,ecx
c0002afc:	56                   	push   esi
c0002afd:	b9 02 00 00 00       	mov    ecx,0x2
c0002b02:	53                   	push   ebx
c0002b03:	89 c6                	mov    esi,eax
c0002b05:	83 ec 1c             	sub    esp,0x1c
c0002b08:	89 d3                	mov    ebx,edx
c0002b0a:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b0d:	0f 86 68 01 00 00    	jbe    c0002c7b <put_fat+0x18c>
c0002b13:	8a 00                	mov    al,BYTE PTR [eax]
c0002b15:	3c 02                	cmp    al,0x2
c0002b17:	0f 84 c7 00 00 00    	je     c0002be4 <put_fat+0xf5>
c0002b1d:	77 09                	ja     c0002b28 <put_fat+0x39>
c0002b1f:	fe c8                	dec    al
c0002b21:	74 17                	je     c0002b3a <put_fat+0x4b>
c0002b23:	e9 53 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b28:	b9 02 00 00 00       	mov    ecx,0x2
c0002b2d:	3c 04                	cmp    al,0x4
c0002b2f:	0f 86 e1 00 00 00    	jbe    c0002c16 <put_fat+0x127>
c0002b35:	e9 41 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b3a:	89 d5                	mov    ebp,edx
c0002b3c:	31 c9                	xor    ecx,ecx
c0002b3e:	d1 ed                	shr    ebp,1
c0002b40:	89 f0                	mov    eax,esi
c0002b42:	01 d5                	add    ebp,edx
c0002b44:	89 ea                	mov    edx,ebp
c0002b46:	c1 ea 09             	shr    edx,0x9
c0002b49:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b4c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b4f:	e8 18 f6 ff ff       	call   c000216c <move_window>
c0002b54:	89 c1                	mov    ecx,eax
c0002b56:	85 c0                	test   eax,eax
c0002b58:	0f 85 1d 01 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002b5e:	8d 46 54             	lea    eax,[esi+0x54]
c0002b61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b65:	8d 45 01             	lea    eax,[ebp+0x1]
c0002b68:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002b6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b72:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002b76:	89 f8                	mov    eax,edi
c0002b78:	83 e3 01             	and    ebx,0x1
c0002b7b:	74 0d                	je     c0002b8a <put_fat+0x9b>
c0002b7d:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002b80:	89 fa                	mov    edx,edi
c0002b82:	83 e0 0f             	and    eax,0xf
c0002b85:	c1 e2 04             	shl    edx,0x4
c0002b88:	09 d0                	or     eax,edx
c0002b8a:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002b8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b91:	31 c9                	xor    ecx,ecx
c0002b93:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002b97:	c1 ea 09             	shr    edx,0x9
c0002b9a:	89 f0                	mov    eax,esi
c0002b9c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b9f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ba2:	e8 c5 f5 ff ff       	call   c000216c <move_window>
c0002ba7:	89 c1                	mov    ecx,eax
c0002ba9:	85 c0                	test   eax,eax
c0002bab:	0f 85 ca 00 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002bb1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002bb5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bbb:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bbf:	85 db                	test   ebx,ebx
c0002bc1:	74 07                	je     c0002bca <put_fat+0xdb>
c0002bc3:	c1 ef 04             	shr    edi,0x4
c0002bc6:	89 fa                	mov    edx,edi
c0002bc8:	eb 0e                	jmp    c0002bd8 <put_fat+0xe9>
c0002bca:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002bcd:	c1 ef 08             	shr    edi,0x8
c0002bd0:	83 e2 f0             	and    edx,0xfffffff0
c0002bd3:	83 e7 0f             	and    edi,0xf
c0002bd6:	09 fa                	or     edx,edi
c0002bd8:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002bdb:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bdf:	e9 97 00 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002be4:	31 c9                	xor    ecx,ecx
c0002be6:	c1 ea 08             	shr    edx,0x8
c0002be9:	89 f0                	mov    eax,esi
c0002beb:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bee:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bf1:	e8 76 f5 ff ff       	call   c000216c <move_window>
c0002bf6:	89 c1                	mov    ecx,eax
c0002bf8:	85 c0                	test   eax,eax
c0002bfa:	75 7f                	jne    c0002c7b <put_fat+0x18c>
c0002bfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c00:	01 db                	add    ebx,ebx
c0002c02:	0f b7 d7             	movzx  edx,di
c0002c05:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c0b:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c0f:	e8 ec ed ff ff       	call   c0001a00 <st_word>
c0002c14:	eb 53                	jmp    c0002c69 <put_fat+0x17a>
c0002c16:	31 c9                	xor    ecx,ecx
c0002c18:	c1 ea 07             	shr    edx,0x7
c0002c1b:	89 f0                	mov    eax,esi
c0002c1d:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c20:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c23:	e8 44 f5 ff ff       	call   c000216c <move_window>
c0002c28:	89 c1                	mov    ecx,eax
c0002c2a:	85 c0                	test   eax,eax
c0002c2c:	75 4d                	jne    c0002c7b <put_fat+0x18c>
c0002c2e:	c1 e3 02             	shl    ebx,0x2
c0002c31:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002c37:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002c3a:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002c3e:	74 1c                	je     c0002c5c <put_fat+0x16d>
c0002c40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c44:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002c4a:	89 d8                	mov    eax,ebx
c0002c4c:	e8 4a ed ff ff       	call   c000199b <ld_dword>
c0002c51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c55:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c5a:	09 c7                	or     edi,eax
c0002c5c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c60:	89 fa                	mov    edx,edi
c0002c62:	89 d8                	mov    eax,ebx
c0002c64:	e8 9b ed ff ff       	call   c0001a04 <st_dword>
c0002c69:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c6d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c71:	eb 08                	jmp    c0002c7b <put_fat+0x18c>
c0002c73:	b9 02 00 00 00       	mov    ecx,0x2
c0002c78:	89 c8                	mov    eax,ecx
c0002c7a:	c3                   	ret    
c0002c7b:	83 c4 1c             	add    esp,0x1c
c0002c7e:	89 c8                	mov    eax,ecx
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <fill_last_frag>:
c0002c85:	57                   	push   edi
c0002c86:	89 cf                	mov    edi,ecx
c0002c88:	56                   	push   esi
c0002c89:	89 d6                	mov    esi,edx
c0002c8b:	53                   	push   ebx
c0002c8c:	89 c3                	mov    ebx,eax
c0002c8e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002c91:	85 c0                	test   eax,eax
c0002c93:	74 21                	je     c0002cb6 <fill_last_frag+0x31>
c0002c95:	89 f9                	mov    ecx,edi
c0002c97:	83 f8 01             	cmp    eax,0x1
c0002c9a:	76 05                	jbe    c0002ca1 <fill_last_frag+0x1c>
c0002c9c:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002c9f:	29 c1                	sub    ecx,eax
c0002ca1:	8d 56 01             	lea    edx,[esi+0x1]
c0002ca4:	29 c2                	sub    edx,eax
c0002ca6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ca8:	e8 42 fe ff ff       	call   c0002aef <put_fat>
c0002cad:	85 c0                	test   eax,eax
c0002caf:	75 05                	jne    c0002cb6 <fill_last_frag+0x31>
c0002cb1:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002cb4:	eb d8                	jmp    c0002c8e <fill_last_frag+0x9>
c0002cb6:	5b                   	pop    ebx
c0002cb7:	5e                   	pop    esi
c0002cb8:	5f                   	pop    edi
c0002cb9:	c3                   	ret    

c0002cba <fill_first_frag>:
c0002cba:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002cbe:	75 2d                	jne    c0002ced <fill_first_frag+0x33>
c0002cc0:	57                   	push   edi
c0002cc1:	56                   	push   esi
c0002cc2:	53                   	push   ebx
c0002cc3:	89 c3                	mov    ebx,eax
c0002cc5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002cc8:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002ccb:	01 d7                	add    edi,edx
c0002ccd:	39 fa                	cmp    edx,edi
c0002ccf:	74 14                	je     c0002ce5 <fill_first_frag+0x2b>
c0002cd1:	8d 72 01             	lea    esi,[edx+0x1]
c0002cd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002cd6:	89 f1                	mov    ecx,esi
c0002cd8:	e8 12 fe ff ff       	call   c0002aef <put_fat>
c0002cdd:	89 f2                	mov    edx,esi
c0002cdf:	85 c0                	test   eax,eax
c0002ce1:	74 ea                	je     c0002ccd <fill_first_frag+0x13>
c0002ce3:	eb 0b                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ce5:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ce9:	31 c0                	xor    eax,eax
c0002ceb:	eb 03                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ced:	31 c0                	xor    eax,eax
c0002cef:	c3                   	ret    
c0002cf0:	5b                   	pop    ebx
c0002cf1:	5e                   	pop    esi
c0002cf2:	5f                   	pop    edi
c0002cf3:	c3                   	ret    

c0002cf4 <get_fat>:
c0002cf4:	83 fa 01             	cmp    edx,0x1
c0002cf7:	0f 86 db 01 00 00    	jbe    c0002ed8 <get_fat+0x1e4>
c0002cfd:	55                   	push   ebp
c0002cfe:	b9 01 00 00 00       	mov    ecx,0x1
c0002d03:	57                   	push   edi
c0002d04:	56                   	push   esi
c0002d05:	53                   	push   ebx
c0002d06:	83 ec 1c             	sub    esp,0x1c
c0002d09:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d0b:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d0e:	0f 86 cc 01 00 00    	jbe    c0002ee0 <get_fat+0x1ec>
c0002d14:	89 c3                	mov    ebx,eax
c0002d16:	89 d6                	mov    esi,edx
c0002d18:	8a 07                	mov    al,BYTE PTR [edi]
c0002d1a:	3c 02                	cmp    al,0x2
c0002d1c:	0f 84 99 00 00 00    	je     c0002dbb <get_fat+0xc7>
c0002d22:	77 09                	ja     c0002d2d <get_fat+0x39>
c0002d24:	fe c8                	dec    al
c0002d26:	74 1a                	je     c0002d42 <get_fat+0x4e>
c0002d28:	e9 b3 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d2d:	3c 03                	cmp    al,0x3
c0002d2f:	0f 84 b5 00 00 00    	je     c0002dea <get_fat+0xf6>
c0002d35:	3c 04                	cmp    al,0x4
c0002d37:	0f 84 e3 00 00 00    	je     c0002e20 <get_fat+0x12c>
c0002d3d:	e9 9e 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d42:	89 d3                	mov    ebx,edx
c0002d44:	31 c9                	xor    ecx,ecx
c0002d46:	d1 eb                	shr    ebx,1
c0002d48:	89 f8                	mov    eax,edi
c0002d4a:	01 d3                	add    ebx,edx
c0002d4c:	89 da                	mov    edx,ebx
c0002d4e:	c1 ea 09             	shr    edx,0x9
c0002d51:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d54:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d57:	e8 10 f4 ff ff       	call   c000216c <move_window>
c0002d5c:	85 c0                	test   eax,eax
c0002d5e:	74 08                	je     c0002d68 <get_fat+0x74>
c0002d60:	83 c9 ff             	or     ecx,0xffffffff
c0002d63:	e9 78 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d68:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002d6b:	31 c9                	xor    ecx,ecx
c0002d6d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002d73:	89 ea                	mov    edx,ebp
c0002d75:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002d79:	c1 ea 09             	shr    edx,0x9
c0002d7c:	89 f8                	mov    eax,edi
c0002d7e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d81:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d84:	e8 e3 f3 ff ff       	call   c000216c <move_window>
c0002d89:	85 c0                	test   eax,eax
c0002d8b:	75 d3                	jne    c0002d60 <get_fat+0x6c>
c0002d8d:	0f b6 c3             	movzx  eax,bl
c0002d90:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d96:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002d9b:	c1 e3 08             	shl    ebx,0x8
c0002d9e:	09 c3                	or     ebx,eax
c0002da0:	89 d9                	mov    ecx,ebx
c0002da2:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002da8:	83 e6 01             	and    esi,0x1
c0002dab:	0f 84 2f 01 00 00    	je     c0002ee0 <get_fat+0x1ec>
c0002db1:	89 d9                	mov    ecx,ebx
c0002db3:	c1 e9 04             	shr    ecx,0x4
c0002db6:	e9 25 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dbb:	31 c9                	xor    ecx,ecx
c0002dbd:	c1 ea 08             	shr    edx,0x8
c0002dc0:	89 f8                	mov    eax,edi
c0002dc2:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dc5:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dc8:	e8 9f f3 ff ff       	call   c000216c <move_window>
c0002dcd:	85 c0                	test   eax,eax
c0002dcf:	75 8f                	jne    c0002d60 <get_fat+0x6c>
c0002dd1:	01 f6                	add    esi,esi
c0002dd3:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002dd9:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ddd:	e8 ac eb ff ff       	call   c000198e <ld_word>
c0002de2:	0f b7 c8             	movzx  ecx,ax
c0002de5:	e9 f6 00 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dea:	31 c9                	xor    ecx,ecx
c0002dec:	c1 ea 07             	shr    edx,0x7
c0002def:	89 f8                	mov    eax,edi
c0002df1:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002df4:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002df7:	e8 70 f3 ff ff       	call   c000216c <move_window>
c0002dfc:	85 c0                	test   eax,eax
c0002dfe:	0f 85 5c ff ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002e04:	c1 e6 02             	shl    esi,0x2
c0002e07:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e0d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e11:	e8 85 eb ff ff       	call   c000199b <ld_dword>
c0002e16:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e1b:	e9 b4 00 00 00       	jmp    c0002ed4 <get_fat+0x1e0>
c0002e20:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e23:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e26:	89 d1                	mov    ecx,edx
c0002e28:	09 c1                	or     ecx,eax
c0002e2a:	74 06                	je     c0002e32 <get_fat+0x13e>
c0002e2c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002e30:	75 0f                	jne    c0002e41 <get_fat+0x14d>
c0002e32:	b9 01 00 00 00       	mov    ecx,0x1
c0002e37:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002e3b:	0f 85 9f 00 00 00    	jne    c0002ee0 <get_fat+0x1ec>
c0002e41:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002e45:	89 f5                	mov    ebp,esi
c0002e47:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002e4c:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002e4f:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002e52:	80 f9 02             	cmp    cl,0x2
c0002e55:	75 35                	jne    c0002e8c <get_fat+0x198>
c0002e57:	83 c0 ff             	add    eax,0xffffffff
c0002e5a:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002e5f:	83 d2 ff             	adc    edx,0xffffffff
c0002e62:	31 db                	xor    ebx,ebx
c0002e64:	0f ac d0 09          	shrd   eax,edx,0x9
c0002e68:	53                   	push   ebx
c0002e69:	c1 ea 09             	shr    edx,0x9
c0002e6c:	51                   	push   ecx
c0002e6d:	52                   	push   edx
c0002e6e:	50                   	push   eax
c0002e6f:	e8 a8 b5 01 00       	call   c001e41c <__udivdi3>
c0002e74:	83 c4 10             	add    esp,0x10
c0002e77:	b9 01 00 00 00       	mov    ecx,0x1
c0002e7c:	39 c5                	cmp    ebp,eax
c0002e7e:	77 60                	ja     c0002ee0 <get_fat+0x1ec>
c0002e80:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e85:	74 59                	je     c0002ee0 <get_fat+0x1ec>
c0002e87:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002e8a:	eb 54                	jmp    c0002ee0 <get_fat+0x1ec>
c0002e8c:	80 f9 03             	cmp    cl,0x3
c0002e8f:	75 05                	jne    c0002e96 <get_fat+0x1a2>
c0002e91:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002e94:	77 f1                	ja     c0002e87 <get_fat+0x193>
c0002e96:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e9b:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002e9f:	75 3f                	jne    c0002ee0 <get_fat+0x1ec>
c0002ea1:	31 c9                	xor    ecx,ecx
c0002ea3:	89 f2                	mov    edx,esi
c0002ea5:	89 f8                	mov    eax,edi
c0002ea7:	c1 ea 07             	shr    edx,0x7
c0002eaa:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ead:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eb0:	e8 b7 f2 ff ff       	call   c000216c <move_window>
c0002eb5:	85 c0                	test   eax,eax
c0002eb7:	0f 85 a3 fe ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002ebd:	c1 e6 02             	shl    esi,0x2
c0002ec0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ec6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002eca:	e8 cc ea ff ff       	call   c000199b <ld_dword>
c0002ecf:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002ed4:	89 c1                	mov    ecx,eax
c0002ed6:	eb 08                	jmp    c0002ee0 <get_fat+0x1ec>
c0002ed8:	b9 01 00 00 00       	mov    ecx,0x1
c0002edd:	89 c8                	mov    eax,ecx
c0002edf:	c3                   	ret    
c0002ee0:	83 c4 1c             	add    esp,0x1c
c0002ee3:	89 c8                	mov    eax,ecx
c0002ee5:	5b                   	pop    ebx
c0002ee6:	5e                   	pop    esi
c0002ee7:	5f                   	pop    edi
c0002ee8:	5d                   	pop    ebp
c0002ee9:	c3                   	ret    

c0002eea <dir_sdi>:
c0002eea:	55                   	push   ebp
c0002eeb:	57                   	push   edi
c0002eec:	56                   	push   esi
c0002eed:	53                   	push   ebx
c0002eee:	89 c3                	mov    ebx,eax
c0002ef0:	83 ec 1c             	sub    esp,0x1c
c0002ef3:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ef5:	31 c0                	xor    eax,eax
c0002ef7:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002efa:	0f 94 c0             	sete   al
c0002efd:	48                   	dec    eax
c0002efe:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f03:	05 00 00 00 10       	add    eax,0x10000000
c0002f08:	39 d0                	cmp    eax,edx
c0002f0a:	77 0a                	ja     c0002f16 <dir_sdi+0x2c>
c0002f0c:	b8 02 00 00 00       	mov    eax,0x2
c0002f11:	e9 c4 00 00 00       	jmp    c0002fda <dir_sdi+0xf0>
c0002f16:	89 d6                	mov    esi,edx
c0002f18:	f6 c2 1f             	test   dl,0x1f
c0002f1b:	75 ef                	jne    c0002f0c <dir_sdi+0x22>
c0002f1d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f20:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f23:	85 c9                	test   ecx,ecx
c0002f25:	75 2d                	jne    c0002f54 <dir_sdi+0x6a>
c0002f27:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f2a:	77 1b                	ja     c0002f47 <dir_sdi+0x5d>
c0002f2c:	89 f2                	mov    edx,esi
c0002f2e:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002f32:	c1 ea 05             	shr    edx,0x5
c0002f35:	39 c2                	cmp    edx,eax
c0002f37:	73 d3                	jae    c0002f0c <dir_sdi+0x22>
c0002f39:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f3c:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002f3f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f42:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f45:	eb 4b                	jmp    c0002f92 <dir_sdi+0xa8>
c0002f47:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f4a:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f4e:	85 c0                	test   eax,eax
c0002f50:	74 da                	je     c0002f2c <dir_sdi+0x42>
c0002f52:	89 c1                	mov    ecx,eax
c0002f54:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002f58:	c1 e5 09             	shl    ebp,0x9
c0002f5b:	89 ca                	mov    edx,ecx
c0002f5d:	39 ee                	cmp    esi,ebp
c0002f5f:	72 1c                	jb     c0002f7d <dir_sdi+0x93>
c0002f61:	89 d8                	mov    eax,ebx
c0002f63:	e8 8c fd ff ff       	call   c0002cf4 <get_fat>
c0002f68:	89 c1                	mov    ecx,eax
c0002f6a:	83 f8 ff             	cmp    eax,0xffffffff
c0002f6d:	74 66                	je     c0002fd5 <dir_sdi+0xeb>
c0002f6f:	83 f8 01             	cmp    eax,0x1
c0002f72:	76 98                	jbe    c0002f0c <dir_sdi+0x22>
c0002f74:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002f77:	76 93                	jbe    c0002f0c <dir_sdi+0x22>
c0002f79:	29 ee                	sub    esi,ebp
c0002f7b:	eb de                	jmp    c0002f5b <dir_sdi+0x71>
c0002f7d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f81:	89 f8                	mov    eax,edi
c0002f83:	e8 9f ec ff ff       	call   c0001c27 <clst2sect>
c0002f88:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f8c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f8f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f92:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0002f95:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002f98:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0002f9b:	89 d1                	mov    ecx,edx
c0002f9d:	09 c1                	or     ecx,eax
c0002f9f:	0f 84 67 ff ff ff    	je     c0002f0c <dir_sdi+0x22>
c0002fa5:	89 f1                	mov    ecx,esi
c0002fa7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002faf:	c1 e9 09             	shr    ecx,0x9
c0002fb2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002fb6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002fba:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002fbe:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fc1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002fc7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fca:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fce:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0002fd1:	31 c0                	xor    eax,eax
c0002fd3:	eb 05                	jmp    c0002fda <dir_sdi+0xf0>
c0002fd5:	b8 01 00 00 00       	mov    eax,0x1
c0002fda:	83 c4 1c             	add    esp,0x1c
c0002fdd:	5b                   	pop    ebx
c0002fde:	5e                   	pop    esi
c0002fdf:	5f                   	pop    edi
c0002fe0:	5d                   	pop    ebp
c0002fe1:	c3                   	ret    

c0002fe2 <create_chain>:
c0002fe2:	55                   	push   ebp
c0002fe3:	89 c5                	mov    ebp,eax
c0002fe5:	57                   	push   edi
c0002fe6:	56                   	push   esi
c0002fe7:	53                   	push   ebx
c0002fe8:	83 ec 1c             	sub    esp,0x1c
c0002feb:	85 d2                	test   edx,edx
c0002fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002ff1:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ff3:	75 0e                	jne    c0003003 <create_chain+0x21>
c0002ff5:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0002ff8:	85 ff                	test   edi,edi
c0002ffa:	74 39                	je     c0003035 <create_chain+0x53>
c0002ffc:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0002fff:	77 39                	ja     c000303a <create_chain+0x58>
c0003001:	eb 32                	jmp    c0003035 <create_chain+0x53>
c0003003:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003007:	e8 e8 fc ff ff       	call   c0002cf4 <get_fat>
c000300c:	89 c3                	mov    ebx,eax
c000300e:	83 f8 01             	cmp    eax,0x1
c0003011:	77 0a                	ja     c000301d <create_chain+0x3b>
c0003013:	bb 01 00 00 00       	mov    ebx,0x1
c0003018:	e9 ba 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c000301d:	83 f8 ff             	cmp    eax,0xffffffff
c0003020:	0f 84 62 01 00 00    	je     c0003188 <create_chain+0x1a6>
c0003026:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003029:	0f 87 a8 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c000302f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003033:	eb 05                	jmp    c000303a <create_chain+0x58>
c0003035:	bf 01 00 00 00       	mov    edi,0x1
c000303a:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000303e:	75 07                	jne    c0003047 <create_chain+0x65>
c0003040:	31 db                	xor    ebx,ebx
c0003042:	e9 90 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c0003047:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000304a:	75 74                	jne    c00030c0 <create_chain+0xde>
c000304c:	b9 01 00 00 00       	mov    ecx,0x1
c0003051:	89 fa                	mov    edx,edi
c0003053:	89 f0                	mov    eax,esi
c0003055:	e8 2d f9 ff ff       	call   c0002987 <find_bitmap>
c000305a:	89 c3                	mov    ebx,eax
c000305c:	8d 40 ff             	lea    eax,[eax-0x1]
c000305f:	83 f8 fd             	cmp    eax,0xfffffffd
c0003062:	0f 87 6f 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c0003068:	83 ec 0c             	sub    esp,0xc
c000306b:	b9 01 00 00 00       	mov    ecx,0x1
c0003070:	6a 01                	push   0x1
c0003072:	89 da                	mov    edx,ebx
c0003074:	89 f0                	mov    eax,esi
c0003076:	e8 bf f9 ff ff       	call   c0002a3a <change_bitmap>
c000307b:	83 c4 10             	add    esp,0x10
c000307e:	83 f8 02             	cmp    eax,0x2
c0003081:	74 90                	je     c0003013 <create_chain+0x31>
c0003083:	83 f8 01             	cmp    eax,0x1
c0003086:	0f 84 fc 00 00 00    	je     c0003188 <create_chain+0x1a6>
c000308c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003091:	75 09                	jne    c000309c <create_chain+0xba>
c0003093:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003097:	e9 0c 01 00 00       	jmp    c00031a8 <create_chain+0x1c6>
c000309c:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c00030a0:	0f 85 e7 00 00 00    	jne    c000318d <create_chain+0x1ab>
c00030a6:	8d 57 01             	lea    edx,[edi+0x1]
c00030a9:	39 da                	cmp    edx,ebx
c00030ab:	0f 84 f7 00 00 00    	je     c00031a8 <create_chain+0x1c6>
c00030b1:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00030b4:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00030b8:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00030bb:	e9 cd 00 00 00       	jmp    c000318d <create_chain+0x1ab>
c00030c0:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00030c4:	75 41                	jne    c0003107 <create_chain+0x125>
c00030c6:	8d 5f 01             	lea    ebx,[edi+0x1]
c00030c9:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00030cc:	77 05                	ja     c00030d3 <create_chain+0xf1>
c00030ce:	bb 02 00 00 00       	mov    ebx,0x2
c00030d3:	89 da                	mov    edx,ebx
c00030d5:	89 e8                	mov    eax,ebp
c00030d7:	e8 18 fc ff ff       	call   c0002cf4 <get_fat>
c00030dc:	83 f8 01             	cmp    eax,0x1
c00030df:	0f 84 2e ff ff ff    	je     c0003013 <create_chain+0x31>
c00030e5:	83 f8 ff             	cmp    eax,0xffffffff
c00030e8:	0f 84 9a 00 00 00    	je     c0003188 <create_chain+0x1a6>
c00030ee:	85 c0                	test   eax,eax
c00030f0:	74 11                	je     c0003103 <create_chain+0x121>
c00030f2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00030f5:	83 f8 01             	cmp    eax,0x1
c00030f8:	76 0d                	jbe    c0003107 <create_chain+0x125>
c00030fa:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030fd:	76 08                	jbe    c0003107 <create_chain+0x125>
c00030ff:	89 c7                	mov    edi,eax
c0003101:	eb 04                	jmp    c0003107 <create_chain+0x125>
c0003103:	85 db                	test   ebx,ebx
c0003105:	75 38                	jne    c000313f <create_chain+0x15d>
c0003107:	89 fb                	mov    ebx,edi
c0003109:	43                   	inc    ebx
c000310a:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000310d:	77 0e                	ja     c000311d <create_chain+0x13b>
c000310f:	83 ff 01             	cmp    edi,0x1
c0003112:	0f 86 28 ff ff ff    	jbe    c0003040 <create_chain+0x5e>
c0003118:	bb 02 00 00 00       	mov    ebx,0x2
c000311d:	89 da                	mov    edx,ebx
c000311f:	89 e8                	mov    eax,ebp
c0003121:	e8 ce fb ff ff       	call   c0002cf4 <get_fat>
c0003126:	85 c0                	test   eax,eax
c0003128:	74 15                	je     c000313f <create_chain+0x15d>
c000312a:	83 f8 01             	cmp    eax,0x1
c000312d:	0f 84 e0 fe ff ff    	je     c0003013 <create_chain+0x31>
c0003133:	40                   	inc    eax
c0003134:	74 52                	je     c0003188 <create_chain+0x1a6>
c0003136:	39 fb                	cmp    ebx,edi
c0003138:	75 cf                	jne    c0003109 <create_chain+0x127>
c000313a:	e9 01 ff ff ff       	jmp    c0003040 <create_chain+0x5e>
c000313f:	83 c9 ff             	or     ecx,0xffffffff
c0003142:	89 da                	mov    edx,ebx
c0003144:	89 f0                	mov    eax,esi
c0003146:	e8 a4 f9 ff ff       	call   c0002aef <put_fat>
c000314b:	85 c0                	test   eax,eax
c000314d:	75 32                	jne    c0003181 <create_chain+0x19f>
c000314f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003154:	74 11                	je     c0003167 <create_chain+0x185>
c0003156:	89 d9                	mov    ecx,ebx
c0003158:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000315c:	89 f0                	mov    eax,esi
c000315e:	e8 8c f9 ff ff       	call   c0002aef <put_fat>
c0003163:	85 c0                	test   eax,eax
c0003165:	75 1a                	jne    c0003181 <create_chain+0x19f>
c0003167:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000316a:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000316d:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003170:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003173:	39 d0                	cmp    eax,edx
c0003175:	77 04                	ja     c000317b <create_chain+0x199>
c0003177:	48                   	dec    eax
c0003178:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000317b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000317f:	eb 56                	jmp    c00031d7 <create_chain+0x1f5>
c0003181:	48                   	dec    eax
c0003182:	0f 85 8b fe ff ff    	jne    c0003013 <create_chain+0x31>
c0003188:	83 cb ff             	or     ebx,0xffffffff
c000318b:	eb 4a                	jmp    c00031d7 <create_chain+0x1f5>
c000318d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003191:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003194:	41                   	inc    ecx
c0003195:	39 d9                	cmp    ecx,ebx
c0003197:	75 19                	jne    c00031b2 <create_chain+0x1d0>
c0003199:	b9 02 00 00 00       	mov    ecx,0x2
c000319e:	85 d2                	test   edx,edx
c00031a0:	74 03                	je     c00031a5 <create_chain+0x1c3>
c00031a2:	8d 4a 01             	lea    ecx,[edx+0x1]
c00031a5:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c00031a8:	85 c0                	test   eax,eax
c00031aa:	0f 85 63 fe ff ff    	jne    c0003013 <create_chain+0x31>
c00031b0:	eb b5                	jmp    c0003167 <create_chain+0x185>
c00031b2:	85 d2                	test   edx,edx
c00031b4:	75 07                	jne    c00031bd <create_chain+0x1db>
c00031b6:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031bd:	89 d9                	mov    ecx,ebx
c00031bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031c3:	89 e8                	mov    eax,ebp
c00031c5:	e8 bb fa ff ff       	call   c0002c85 <fill_last_frag>
c00031ca:	85 c0                	test   eax,eax
c00031cc:	75 b3                	jne    c0003181 <create_chain+0x19f>
c00031ce:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031d5:	eb 90                	jmp    c0003167 <create_chain+0x185>
c00031d7:	83 c4 1c             	add    esp,0x1c
c00031da:	89 d8                	mov    eax,ebx
c00031dc:	5b                   	pop    ebx
c00031dd:	5e                   	pop    esi
c00031de:	5f                   	pop    edi
c00031df:	5d                   	pop    ebp
c00031e0:	c3                   	ret    

c00031e1 <remove_chain>:
c00031e1:	55                   	push   ebp
c00031e2:	57                   	push   edi
c00031e3:	56                   	push   esi
c00031e4:	53                   	push   ebx
c00031e5:	83 ec 1c             	sub    esp,0x1c
c00031e8:	83 fa 01             	cmp    edx,0x1
c00031eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00031ef:	8b 18                	mov    ebx,DWORD PTR [eax]
c00031f1:	77 0a                	ja     c00031fd <remove_chain+0x1c>
c00031f3:	b8 02 00 00 00       	mov    eax,0x2
c00031f8:	e9 24 01 00 00       	jmp    c0003321 <remove_chain+0x140>
c00031fd:	89 d6                	mov    esi,edx
c00031ff:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003202:	76 ef                	jbe    c00031f3 <remove_chain+0x12>
c0003204:	89 c7                	mov    edi,eax
c0003206:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000320b:	75 06                	jne    c0003213 <remove_chain+0x32>
c000320d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003211:	eb 54                	jmp    c0003267 <remove_chain+0x86>
c0003213:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003216:	75 06                	jne    c000321e <remove_chain+0x3d>
c0003218:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000321c:	74 ef                	je     c000320d <remove_chain+0x2c>
c000321e:	83 c9 ff             	or     ecx,0xffffffff
c0003221:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003225:	89 d8                	mov    eax,ebx
c0003227:	e8 c3 f8 ff ff       	call   c0002aef <put_fat>
c000322c:	85 c0                	test   eax,eax
c000322e:	74 dd                	je     c000320d <remove_chain+0x2c>
c0003230:	e9 ec 00 00 00       	jmp    c0003321 <remove_chain+0x140>
c0003235:	83 f8 01             	cmp    eax,0x1
c0003238:	74 b9                	je     c00031f3 <remove_chain+0x12>
c000323a:	83 f8 ff             	cmp    eax,0xffffffff
c000323d:	74 6d                	je     c00032ac <remove_chain+0xcb>
c000323f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003242:	75 6f                	jne    c00032b3 <remove_chain+0xd2>
c0003244:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003247:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000324a:	8d 51 fe             	lea    edx,[ecx-0x2]
c000324d:	39 d0                	cmp    eax,edx
c000324f:	73 08                	jae    c0003259 <remove_chain+0x78>
c0003251:	40                   	inc    eax
c0003252:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003256:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003259:	8d 4e 01             	lea    ecx,[esi+0x1]
c000325c:	39 e9                	cmp    ecx,ebp
c000325e:	75 64                	jne    c00032c4 <remove_chain+0xe3>
c0003260:	89 ee                	mov    esi,ebp
c0003262:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003265:	76 0f                	jbe    c0003276 <remove_chain+0x95>
c0003267:	89 f2                	mov    edx,esi
c0003269:	89 f8                	mov    eax,edi
c000326b:	e8 84 fa ff ff       	call   c0002cf4 <get_fat>
c0003270:	89 c5                	mov    ebp,eax
c0003272:	85 c0                	test   eax,eax
c0003274:	75 bf                	jne    c0003235 <remove_chain+0x54>
c0003276:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003279:	0f 85 a0 00 00 00    	jne    c000331f <remove_chain+0x13e>
c000327f:	eb 6c                	jmp    c00032ed <remove_chain+0x10c>
c0003281:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003284:	84 c0                	test   al,al
c0003286:	75 7d                	jne    c0003305 <remove_chain+0x124>
c0003288:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000328b:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000328f:	0f 84 86 00 00 00    	je     c000331b <remove_chain+0x13a>
c0003295:	89 da                	mov    edx,ebx
c0003297:	89 f8                	mov    eax,edi
c0003299:	e8 56 fa ff ff       	call   c0002cf4 <get_fat>
c000329e:	83 f8 01             	cmp    eax,0x1
c00032a1:	0f 86 4c ff ff ff    	jbe    c00031f3 <remove_chain+0x12>
c00032a7:	83 f8 ff             	cmp    eax,0xffffffff
c00032aa:	75 4e                	jne    c00032fa <remove_chain+0x119>
c00032ac:	b8 01 00 00 00       	mov    eax,0x1
c00032b1:	eb 6e                	jmp    c0003321 <remove_chain+0x140>
c00032b3:	31 c9                	xor    ecx,ecx
c00032b5:	89 f2                	mov    edx,esi
c00032b7:	89 d8                	mov    eax,ebx
c00032b9:	e8 31 f8 ff ff       	call   c0002aef <put_fat>
c00032be:	85 c0                	test   eax,eax
c00032c0:	74 82                	je     c0003244 <remove_chain+0x63>
c00032c2:	eb 5d                	jmp    c0003321 <remove_chain+0x140>
c00032c4:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c7:	75 1b                	jne    c00032e4 <remove_chain+0x103>
c00032c9:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00032cd:	89 d8                	mov    eax,ebx
c00032cf:	83 ec 0c             	sub    esp,0xc
c00032d2:	6a 00                	push   0x0
c00032d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00032d8:	e8 5d f7 ff ff       	call   c0002a3a <change_bitmap>
c00032dd:	83 c4 10             	add    esp,0x10
c00032e0:	85 c0                	test   eax,eax
c00032e2:	75 3d                	jne    c0003321 <remove_chain+0x140>
c00032e4:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00032e8:	e9 73 ff ff ff       	jmp    c0003260 <remove_chain+0x7f>
c00032ed:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032f2:	75 8d                	jne    c0003281 <remove_chain+0xa0>
c00032f4:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00032f8:	eb 25                	jmp    c000331f <remove_chain+0x13e>
c00032fa:	8d 53 01             	lea    edx,[ebx+0x1]
c00032fd:	89 c3                	mov    ebx,eax
c00032ff:	39 c2                	cmp    edx,eax
c0003301:	74 88                	je     c000328b <remove_chain+0xaa>
c0003303:	eb 1a                	jmp    c000331f <remove_chain+0x13e>
c0003305:	3c 03                	cmp    al,0x3
c0003307:	75 16                	jne    c000331f <remove_chain+0x13e>
c0003309:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000330c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003310:	77 0d                	ja     c000331f <remove_chain+0x13e>
c0003312:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003315:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003319:	72 04                	jb     c000331f <remove_chain+0x13e>
c000331b:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c000331f:	31 c0                	xor    eax,eax
c0003321:	83 c4 1c             	add    esp,0x1c
c0003324:	5b                   	pop    ebx
c0003325:	5e                   	pop    esi
c0003326:	5f                   	pop    edi
c0003327:	5d                   	pop    ebp
c0003328:	c3                   	ret    

c0003329 <dir_clear>:
c0003329:	55                   	push   ebp
c000332a:	57                   	push   edi
c000332b:	56                   	push   esi
c000332c:	89 c6                	mov    esi,eax
c000332e:	53                   	push   ebx
c000332f:	83 ec 1c             	sub    esp,0x1c
c0003332:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003336:	e8 9d ed ff ff       	call   c00020d8 <sync_window>
c000333b:	85 c0                	test   eax,eax
c000333d:	0f 85 de 00 00 00    	jne    c0003421 <dir_clear+0xf8>
c0003343:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003347:	89 f0                	mov    eax,esi
c0003349:	8d 6e 54             	lea    ebp,[esi+0x54]
c000334c:	e8 d6 e8 ff ff       	call   c0001c27 <clst2sect>
c0003351:	b9 00 02 00 00       	mov    ecx,0x200
c0003356:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000335a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000335e:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003361:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003364:	89 e8                	mov    eax,ebp
c0003366:	31 d2                	xor    edx,edx
c0003368:	e8 b5 e6 ff ff       	call   c0001a22 <mem_set>
c000336d:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003371:	c1 e3 09             	shl    ebx,0x9
c0003374:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000337a:	76 1f                	jbe    c000339b <dir_clear+0x72>
c000337c:	bb 00 80 00 00       	mov    ebx,0x8000
c0003381:	eb 18                	jmp    c000339b <dir_clear+0x72>
c0003383:	83 ec 0c             	sub    esp,0xc
c0003386:	53                   	push   ebx
c0003387:	e8 35 4e 00 00       	call   c00081c1 <ff_memalloc>
c000338c:	83 c4 10             	add    esp,0x10
c000338f:	89 c7                	mov    edi,eax
c0003391:	85 c0                	test   eax,eax
c0003393:	0f 85 8f 00 00 00    	jne    c0003428 <dir_clear+0xff>
c0003399:	d1 eb                	shr    ebx,1
c000339b:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00033a1:	77 e0                	ja     c0003383 <dir_clear+0x5a>
c00033a3:	31 db                	xor    ebx,ebx
c00033a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00033a9:	39 d8                	cmp    eax,ebx
c00033ab:	76 66                	jbe    c0003413 <dir_clear+0xea>
c00033ad:	83 ec 0c             	sub    esp,0xc
c00033b0:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033b4:	6a 01                	push   0x1
c00033b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033be:	55                   	push   ebp
c00033bf:	50                   	push   eax
c00033c0:	e8 94 e5 ff ff       	call   c0001959 <disk_write>
c00033c5:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00033ca:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00033cf:	83 c4 20             	add    esp,0x20
c00033d2:	85 c0                	test   eax,eax
c00033d4:	75 3d                	jne    c0003413 <dir_clear+0xea>
c00033d6:	43                   	inc    ebx
c00033d7:	eb cc                	jmp    c00033a5 <dir_clear+0x7c>
c00033d9:	83 ec 0c             	sub    esp,0xc
c00033dc:	31 d2                	xor    edx,edx
c00033de:	55                   	push   ebp
c00033df:	89 d8                	mov    eax,ebx
c00033e1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00033e5:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00033e9:	52                   	push   edx
c00033ea:	50                   	push   eax
c00033eb:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033ef:	57                   	push   edi
c00033f0:	50                   	push   eax
c00033f1:	e8 63 e5 ff ff       	call   c0001959 <disk_write>
c00033f6:	83 c4 20             	add    esp,0x20
c00033f9:	85 c0                	test   eax,eax
c00033fb:	75 0a                	jne    c0003407 <dir_clear+0xde>
c00033fd:	01 eb                	add    ebx,ebp
c00033ff:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003403:	39 d8                	cmp    eax,ebx
c0003405:	77 d2                	ja     c00033d9 <dir_clear+0xb0>
c0003407:	83 ec 0c             	sub    esp,0xc
c000340a:	57                   	push   edi
c000340b:	e8 c7 4d 00 00       	call   c00081d7 <ff_memfree>
c0003410:	83 c4 10             	add    esp,0x10
c0003413:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003417:	39 d8                	cmp    eax,ebx
c0003419:	0f 95 c0             	setne  al
c000341c:	0f b6 c0             	movzx  eax,al
c000341f:	eb 19                	jmp    c000343a <dir_clear+0x111>
c0003421:	b8 01 00 00 00       	mov    eax,0x1
c0003426:	eb 12                	jmp    c000343a <dir_clear+0x111>
c0003428:	89 d9                	mov    ecx,ebx
c000342a:	31 d2                	xor    edx,edx
c000342c:	c1 eb 09             	shr    ebx,0x9
c000342f:	e8 ee e5 ff ff       	call   c0001a22 <mem_set>
c0003434:	89 dd                	mov    ebp,ebx
c0003436:	31 db                	xor    ebx,ebx
c0003438:	eb c5                	jmp    c00033ff <dir_clear+0xd6>
c000343a:	83 c4 1c             	add    esp,0x1c
c000343d:	5b                   	pop    ebx
c000343e:	5e                   	pop    esi
c000343f:	5f                   	pop    edi
c0003440:	5d                   	pop    ebp
c0003441:	c3                   	ret    

c0003442 <dir_next>:
c0003442:	55                   	push   ebp
c0003443:	57                   	push   edi
c0003444:	56                   	push   esi
c0003445:	53                   	push   ebx
c0003446:	89 c3                	mov    ebx,eax
c0003448:	83 ec 1c             	sub    esp,0x1c
c000344b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000344d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003451:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003454:	8d 78 20             	lea    edi,[eax+0x20]
c0003457:	31 c0                	xor    eax,eax
c0003459:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000345d:	0f 94 c0             	sete   al
c0003460:	48                   	dec    eax
c0003461:	25 00 00 20 f0       	and    eax,0xf0200000
c0003466:	05 00 00 00 10       	add    eax,0x10000000
c000346b:	39 f8                	cmp    eax,edi
c000346d:	77 0e                	ja     c000347d <dir_next+0x3b>
c000346f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003476:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000347d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003480:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003483:	b8 04 00 00 00       	mov    eax,0x4
c0003488:	89 ce                	mov    esi,ecx
c000348a:	09 d6                	or     esi,edx
c000348c:	0f 84 da 00 00 00    	je     c000356c <dir_next+0x12a>
c0003492:	89 f8                	mov    eax,edi
c0003494:	25 ff 01 00 00       	and    eax,0x1ff
c0003499:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000349d:	0f 85 b9 00 00 00    	jne    c000355c <dir_next+0x11a>
c00034a3:	83 c2 01             	add    edx,0x1
c00034a6:	83 d1 00             	adc    ecx,0x0
c00034a9:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00034ac:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00034af:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00034b2:	85 d2                	test   edx,edx
c00034b4:	75 29                	jne    c00034df <dir_next+0x9d>
c00034b6:	89 fa                	mov    edx,edi
c00034b8:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034bc:	c1 ea 05             	shr    edx,0x5
c00034bf:	39 c2                	cmp    edx,eax
c00034c1:	0f 82 95 00 00 00    	jb     c000355c <dir_next+0x11a>
c00034c7:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034ce:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034d5:	b8 04 00 00 00       	mov    eax,0x4
c00034da:	e9 8d 00 00 00       	jmp    c000356c <dir_next+0x12a>
c00034df:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00034e3:	89 f9                	mov    ecx,edi
c00034e5:	48                   	dec    eax
c00034e6:	c1 e9 09             	shr    ecx,0x9
c00034e9:	85 c8                	test   eax,ecx
c00034eb:	75 6f                	jne    c000355c <dir_next+0x11a>
c00034ed:	89 d8                	mov    eax,ebx
c00034ef:	e8 00 f8 ff ff       	call   c0002cf4 <get_fat>
c00034f4:	89 c6                	mov    esi,eax
c00034f6:	83 f8 01             	cmp    eax,0x1
c00034f9:	77 07                	ja     c0003502 <dir_next+0xc0>
c00034fb:	b8 02 00 00 00       	mov    eax,0x2
c0003500:	eb 6a                	jmp    c000356c <dir_next+0x12a>
c0003502:	83 f8 ff             	cmp    eax,0xffffffff
c0003505:	75 07                	jne    c000350e <dir_next+0xcc>
c0003507:	b8 01 00 00 00       	mov    eax,0x1
c000350c:	eb 5e                	jmp    c000356c <dir_next+0x12a>
c000350e:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003511:	77 37                	ja     c000354a <dir_next+0x108>
c0003513:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003518:	74 ad                	je     c00034c7 <dir_next+0x85>
c000351a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000351d:	89 d8                	mov    eax,ebx
c000351f:	e8 be fa ff ff       	call   c0002fe2 <create_chain>
c0003524:	89 c6                	mov    esi,eax
c0003526:	b8 07 00 00 00       	mov    eax,0x7
c000352b:	85 f6                	test   esi,esi
c000352d:	74 3d                	je     c000356c <dir_next+0x12a>
c000352f:	83 fe 01             	cmp    esi,0x1
c0003532:	74 c7                	je     c00034fb <dir_next+0xb9>
c0003534:	83 fe ff             	cmp    esi,0xffffffff
c0003537:	74 ce                	je     c0003507 <dir_next+0xc5>
c0003539:	89 f2                	mov    edx,esi
c000353b:	89 e8                	mov    eax,ebp
c000353d:	e8 e7 fd ff ff       	call   c0003329 <dir_clear>
c0003542:	85 c0                	test   eax,eax
c0003544:	75 c1                	jne    c0003507 <dir_next+0xc5>
c0003546:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000354a:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000354d:	89 f2                	mov    edx,esi
c000354f:	89 e8                	mov    eax,ebp
c0003551:	e8 d1 e6 ff ff       	call   c0001c27 <clst2sect>
c0003556:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003559:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000355c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003560:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003563:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003567:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000356a:	31 c0                	xor    eax,eax
c000356c:	83 c4 1c             	add    esp,0x1c
c000356f:	5b                   	pop    ebx
c0003570:	5e                   	pop    esi
c0003571:	5f                   	pop    edi
c0003572:	5d                   	pop    ebp
c0003573:	c3                   	ret    

c0003574 <load_xdir>:
c0003574:	55                   	push   ebp
c0003575:	57                   	push   edi
c0003576:	56                   	push   esi
c0003577:	89 c6                	mov    esi,eax
c0003579:	53                   	push   ebx
c000357a:	83 ec 1c             	sub    esp,0x1c
c000357d:	8b 00                	mov    eax,DWORD PTR [eax]
c000357f:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003582:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003585:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003588:	e8 df eb ff ff       	call   c000216c <move_window>
c000358d:	89 c3                	mov    ebx,eax
c000358f:	85 c0                	test   eax,eax
c0003591:	0f 85 0c 01 00 00    	jne    c00036a3 <load_xdir+0x12f>
c0003597:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000359a:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000359d:	0f 85 fb 00 00 00    	jne    c000369e <load_xdir+0x12a>
c00035a3:	89 f8                	mov    eax,edi
c00035a5:	b9 20 00 00 00       	mov    ecx,0x20
c00035aa:	e8 5e e4 ff ff       	call   c0001a0d <mem_cpy>
c00035af:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00035b3:	40                   	inc    eax
c00035b4:	c1 e0 05             	shl    eax,0x5
c00035b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00035bb:	83 e8 60             	sub    eax,0x60
c00035be:	3d 00 02 00 00       	cmp    eax,0x200
c00035c3:	0f 87 d5 00 00 00    	ja     c000369e <load_xdir+0x12a>
c00035c9:	31 d2                	xor    edx,edx
c00035cb:	89 f0                	mov    eax,esi
c00035cd:	e8 70 fe ff ff       	call   c0003442 <dir_next>
c00035d2:	89 c3                	mov    ebx,eax
c00035d4:	83 f8 04             	cmp    eax,0x4
c00035d7:	0f 84 c1 00 00 00    	je     c000369e <load_xdir+0x12a>
c00035dd:	85 c0                	test   eax,eax
c00035df:	0f 85 be 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035e5:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035e8:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035eb:	8b 06                	mov    eax,DWORD PTR [esi]
c00035ed:	e8 7a eb ff ff       	call   c000216c <move_window>
c00035f2:	89 c3                	mov    ebx,eax
c00035f4:	85 c0                	test   eax,eax
c00035f6:	0f 85 a7 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035fc:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00035ff:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003602:	0f 85 96 00 00 00    	jne    c000369e <load_xdir+0x12a>
c0003608:	8d 47 20             	lea    eax,[edi+0x20]
c000360b:	b9 20 00 00 00       	mov    ecx,0x20
c0003610:	e8 f8 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003615:	31 d2                	xor    edx,edx
c0003617:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000361b:	b9 0f 00 00 00       	mov    ecx,0xf
c0003620:	83 c0 2c             	add    eax,0x2c
c0003623:	f7 f1                	div    ecx
c0003625:	c1 e0 05             	shl    eax,0x5
c0003628:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000362c:	77 70                	ja     c000369e <load_xdir+0x12a>
c000362e:	bd 40 00 00 00       	mov    ebp,0x40
c0003633:	31 d2                	xor    edx,edx
c0003635:	89 f0                	mov    eax,esi
c0003637:	e8 06 fe ff ff       	call   c0003442 <dir_next>
c000363c:	89 c3                	mov    ebx,eax
c000363e:	83 f8 04             	cmp    eax,0x4
c0003641:	74 5b                	je     c000369e <load_xdir+0x12a>
c0003643:	85 c0                	test   eax,eax
c0003645:	75 5c                	jne    c00036a3 <load_xdir+0x12f>
c0003647:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000364a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000364d:	8b 06                	mov    eax,DWORD PTR [esi]
c000364f:	e8 18 eb ff ff       	call   c000216c <move_window>
c0003654:	89 c3                	mov    ebx,eax
c0003656:	85 c0                	test   eax,eax
c0003658:	75 49                	jne    c00036a3 <load_xdir+0x12f>
c000365a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000365d:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003660:	75 3c                	jne    c000369e <load_xdir+0x12a>
c0003662:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003668:	77 0d                	ja     c0003677 <load_xdir+0x103>
c000366a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000366d:	b9 20 00 00 00       	mov    ecx,0x20
c0003672:	e8 96 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003677:	83 c5 20             	add    ebp,0x20
c000367a:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000367e:	77 b3                	ja     c0003633 <load_xdir+0xbf>
c0003680:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003686:	77 1b                	ja     c00036a3 <load_xdir+0x12f>
c0003688:	89 f8                	mov    eax,edi
c000368a:	e8 cd e7 ff ff       	call   c0001e5c <xdir_sum>
c000368f:	89 c1                	mov    ecx,eax
c0003691:	8d 47 02             	lea    eax,[edi+0x2]
c0003694:	e8 f5 e2 ff ff       	call   c000198e <ld_word>
c0003699:	66 39 c1             	cmp    cx,ax
c000369c:	74 05                	je     c00036a3 <load_xdir+0x12f>
c000369e:	bb 02 00 00 00       	mov    ebx,0x2
c00036a3:	83 c4 1c             	add    esp,0x1c
c00036a6:	89 d8                	mov    eax,ebx
c00036a8:	5b                   	pop    ebx
c00036a9:	5e                   	pop    esi
c00036aa:	5f                   	pop    edi
c00036ab:	5d                   	pop    ebp
c00036ac:	c3                   	ret    

c00036ad <load_obj_xdir>:
c00036ad:	53                   	push   ebx
c00036ae:	89 c3                	mov    ebx,eax
c00036b0:	83 ec 08             	sub    esp,0x8
c00036b3:	8b 02                	mov    eax,DWORD PTR [edx]
c00036b5:	89 03                	mov    DWORD PTR [ebx],eax
c00036b7:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00036ba:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00036bd:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c0:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00036c3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00036cd:	30 c0                	xor    al,al
c00036cf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00036d6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00036d9:	89 d8                	mov    eax,ebx
c00036db:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00036de:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00036e1:	e8 04 f8 ff ff       	call   c0002eea <dir_sdi>
c00036e6:	85 c0                	test   eax,eax
c00036e8:	75 0b                	jne    c00036f5 <load_obj_xdir+0x48>
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	83 c4 08             	add    esp,0x8
c00036ef:	5b                   	pop    ebx
c00036f0:	e9 7f fe ff ff       	jmp    c0003574 <load_xdir>
c00036f5:	83 c4 08             	add    esp,0x8
c00036f8:	5b                   	pop    ebx
c00036f9:	c3                   	ret    

c00036fa <dir_read>:
c00036fa:	55                   	push   ebp
c00036fb:	bd 04 00 00 00       	mov    ebp,0x4
c0003700:	57                   	push   edi
c0003701:	56                   	push   esi
c0003702:	be ff ff ff ff       	mov    esi,0xffffffff
c0003707:	53                   	push   ebx
c0003708:	89 c3                	mov    ebx,eax
c000370a:	83 ec 1c             	sub    esp,0x1c
c000370d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003711:	8b 38                	mov    edi,DWORD PTR [eax]
c0003713:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003718:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000371b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371e:	89 c8                	mov    eax,ecx
c0003720:	09 d0                	or     eax,edx
c0003722:	0f 84 25 01 00 00    	je     c000384d <dir_read+0x153>
c0003728:	89 f8                	mov    eax,edi
c000372a:	e8 3d ea ff ff       	call   c000216c <move_window>
c000372f:	89 c5                	mov    ebp,eax
c0003731:	85 c0                	test   eax,eax
c0003733:	0f 85 23 01 00 00    	jne    c000385c <dir_read+0x162>
c0003739:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000373c:	8a 0a                	mov    cl,BYTE PTR [edx]
c000373e:	84 c9                	test   cl,cl
c0003740:	0f 84 11 01 00 00    	je     c0003857 <dir_read+0x15d>
c0003746:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003749:	75 48                	jne    c0003793 <dir_read+0x99>
c000374b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003750:	74 10                	je     c0003762 <dir_read+0x68>
c0003752:	80 f9 83             	cmp    cl,0x83
c0003755:	0f 85 dd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000375b:	31 ed                	xor    ebp,ebp
c000375d:	e9 08 01 00 00       	jmp    c000386a <dir_read+0x170>
c0003762:	80 f9 85             	cmp    cl,0x85
c0003765:	0f 85 cd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000376b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000376e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003771:	89 d8                	mov    eax,ebx
c0003773:	e8 fc fd ff ff       	call   c0003574 <load_xdir>
c0003778:	89 c5                	mov    ebp,eax
c000377a:	85 c0                	test   eax,eax
c000377c:	0f 85 da 00 00 00    	jne    c000385c <dir_read+0x162>
c0003782:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003785:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003788:	83 e0 3f             	and    eax,0x3f
c000378b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000378e:	e9 d7 00 00 00       	jmp    c000386a <dir_read+0x170>
c0003793:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003796:	83 e0 3f             	and    eax,0x3f
c0003799:	80 f9 2e             	cmp    cl,0x2e
c000379c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00037a0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037a3:	0f 84 8a 00 00 00    	je     c0003833 <dir_read+0x139>
c00037a9:	80 f9 e5             	cmp    cl,0xe5
c00037ac:	0f 84 81 00 00 00    	je     c0003833 <dir_read+0x139>
c00037b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037b6:	83 e0 1f             	and    eax,0x1f
c00037b9:	83 f8 08             	cmp    eax,0x8
c00037bc:	0f 94 c0             	sete   al
c00037bf:	0f b6 c0             	movzx  eax,al
c00037c2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037c6:	75 6b                	jne    c0003833 <dir_read+0x139>
c00037c8:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00037cd:	75 44                	jne    c0003813 <dir_read+0x119>
c00037cf:	f6 c1 40             	test   cl,0x40
c00037d2:	74 12                	je     c00037e6 <dir_read+0xec>
c00037d4:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037d7:	83 e1 bf             	and    ecx,0xffffffbf
c00037da:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037de:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037e1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037e4:	eb 06                	jmp    c00037ec <dir_read+0xf2>
c00037e6:	89 f0                	mov    eax,esi
c00037e8:	38 c8                	cmp    al,cl
c00037ea:	75 47                	jne    c0003833 <dir_read+0x139>
c00037ec:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037f0:	be ff ff ff ff       	mov    esi,0xffffffff
c00037f5:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00037f8:	75 3e                	jne    c0003838 <dir_read+0x13e>
c00037fa:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00037fe:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003801:	e8 8a e4 ff ff       	call   c0001c90 <pick_lfn>
c0003806:	85 c0                	test   eax,eax
c0003808:	74 2e                	je     c0003838 <dir_read+0x13e>
c000380a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000380e:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003811:	eb 25                	jmp    c0003838 <dir_read+0x13e>
c0003813:	89 f0                	mov    eax,esi
c0003815:	84 c0                	test   al,al
c0003817:	75 11                	jne    c000382a <dir_read+0x130>
c0003819:	89 d0                	mov    eax,edx
c000381b:	e8 2a e6 ff ff       	call   c0001e4a <sum_sfn>
c0003820:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003824:	0f 84 31 ff ff ff    	je     c000375b <dir_read+0x61>
c000382a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003831:	eb 37                	jmp    c000386a <dir_read+0x170>
c0003833:	be ff ff ff ff       	mov    esi,0xffffffff
c0003838:	31 d2                	xor    edx,edx
c000383a:	89 d8                	mov    eax,ebx
c000383c:	e8 01 fc ff ff       	call   c0003442 <dir_next>
c0003841:	89 c5                	mov    ebp,eax
c0003843:	85 c0                	test   eax,eax
c0003845:	0f 84 cd fe ff ff    	je     c0003718 <dir_read+0x1e>
c000384b:	eb 0f                	jmp    c000385c <dir_read+0x162>
c000384d:	85 ed                	test   ebp,ebp
c000384f:	0f 84 06 ff ff ff    	je     c000375b <dir_read+0x61>
c0003855:	eb 05                	jmp    c000385c <dir_read+0x162>
c0003857:	bd 04 00 00 00       	mov    ebp,0x4
c000385c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003863:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000386a:	83 c4 1c             	add    esp,0x1c
c000386d:	89 e8                	mov    eax,ebp
c000386f:	5b                   	pop    ebx
c0003870:	5e                   	pop    esi
c0003871:	5f                   	pop    edi
c0003872:	5d                   	pop    ebp
c0003873:	c3                   	ret    

c0003874 <dir_alloc>:
c0003874:	55                   	push   ebp
c0003875:	89 d5                	mov    ebp,edx
c0003877:	57                   	push   edi
c0003878:	31 d2                	xor    edx,edx
c000387a:	56                   	push   esi
c000387b:	53                   	push   ebx
c000387c:	89 c3                	mov    ebx,eax
c000387e:	83 ec 0c             	sub    esp,0xc
c0003881:	8b 38                	mov    edi,DWORD PTR [eax]
c0003883:	e8 62 f6 ff ff       	call   c0002eea <dir_sdi>
c0003888:	85 c0                	test   eax,eax
c000388a:	75 4e                	jne    c00038da <dir_alloc+0x66>
c000388c:	31 f6                	xor    esi,esi
c000388e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003891:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003894:	89 f8                	mov    eax,edi
c0003896:	e8 d1 e8 ff ff       	call   c000216c <move_window>
c000389b:	85 c0                	test   eax,eax
c000389d:	75 3b                	jne    c00038da <dir_alloc+0x66>
c000389f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00038a2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00038a5:	8a 12                	mov    dl,BYTE PTR [edx]
c00038a7:	75 07                	jne    c00038b0 <dir_alloc+0x3c>
c00038a9:	f7 d2                	not    edx
c00038ab:	c0 ea 07             	shr    dl,0x7
c00038ae:	eb 0d                	jmp    c00038bd <dir_alloc+0x49>
c00038b0:	84 d2                	test   dl,dl
c00038b2:	0f 94 c1             	sete   cl
c00038b5:	80 fa e5             	cmp    dl,0xe5
c00038b8:	0f 94 c2             	sete   dl
c00038bb:	09 ca                	or     edx,ecx
c00038bd:	84 d2                	test   dl,dl
c00038bf:	74 07                	je     c00038c8 <dir_alloc+0x54>
c00038c1:	46                   	inc    esi
c00038c2:	39 ee                	cmp    esi,ebp
c00038c4:	75 04                	jne    c00038ca <dir_alloc+0x56>
c00038c6:	eb 1c                	jmp    c00038e4 <dir_alloc+0x70>
c00038c8:	31 f6                	xor    esi,esi
c00038ca:	ba 01 00 00 00       	mov    edx,0x1
c00038cf:	89 d8                	mov    eax,ebx
c00038d1:	e8 6c fb ff ff       	call   c0003442 <dir_next>
c00038d6:	85 c0                	test   eax,eax
c00038d8:	74 b4                	je     c000388e <dir_alloc+0x1a>
c00038da:	83 f8 04             	cmp    eax,0x4
c00038dd:	75 05                	jne    c00038e4 <dir_alloc+0x70>
c00038df:	b8 07 00 00 00       	mov    eax,0x7
c00038e4:	83 c4 0c             	add    esp,0xc
c00038e7:	5b                   	pop    ebx
c00038e8:	5e                   	pop    esi
c00038e9:	5f                   	pop    edi
c00038ea:	5d                   	pop    ebp
c00038eb:	c3                   	ret    

c00038ec <store_xdir>:
c00038ec:	55                   	push   ebp
c00038ed:	57                   	push   edi
c00038ee:	89 c7                	mov    edi,eax
c00038f0:	56                   	push   esi
c00038f1:	53                   	push   ebx
c00038f2:	83 ec 0c             	sub    esp,0xc
c00038f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00038f7:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00038fa:	89 e8                	mov    eax,ebp
c00038fc:	e8 5b e5 ff ff       	call   c0001e5c <xdir_sum>
c0003901:	0f b7 d0             	movzx  edx,ax
c0003904:	8d 45 02             	lea    eax,[ebp+0x2]
c0003907:	e8 f4 e0 ff ff       	call   c0001a00 <st_word>
c000390c:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003910:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003913:	89 f8                	mov    eax,edi
c0003915:	e8 d0 f5 ff ff       	call   c0002eea <dir_sdi>
c000391a:	89 c6                	mov    esi,eax
c000391c:	85 f6                	test   esi,esi
c000391e:	75 3d                	jne    c000395d <store_xdir+0x71>
c0003920:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003923:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003926:	8b 07                	mov    eax,DWORD PTR [edi]
c0003928:	e8 3f e8 ff ff       	call   c000216c <move_window>
c000392d:	89 c6                	mov    esi,eax
c000392f:	85 c0                	test   eax,eax
c0003931:	75 2a                	jne    c000395d <store_xdir+0x71>
c0003933:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003936:	b9 20 00 00 00       	mov    ecx,0x20
c000393b:	89 ea                	mov    edx,ebp
c000393d:	e8 cb e0 ff ff       	call   c0001a0d <mem_cpy>
c0003942:	8b 07                	mov    eax,DWORD PTR [edi]
c0003944:	85 db                	test   ebx,ebx
c0003946:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000394a:	74 11                	je     c000395d <store_xdir+0x71>
c000394c:	31 d2                	xor    edx,edx
c000394e:	89 f8                	mov    eax,edi
c0003950:	83 c5 20             	add    ebp,0x20
c0003953:	e8 ea fa ff ff       	call   c0003442 <dir_next>
c0003958:	4b                   	dec    ebx
c0003959:	89 c6                	mov    esi,eax
c000395b:	eb bf                	jmp    c000391c <store_xdir+0x30>
c000395d:	89 f0                	mov    eax,esi
c000395f:	83 fe 02             	cmp    esi,0x2
c0003962:	76 05                	jbe    c0003969 <store_xdir+0x7d>
c0003964:	b8 02 00 00 00       	mov    eax,0x2
c0003969:	83 c4 0c             	add    esp,0xc
c000396c:	5b                   	pop    ebx
c000396d:	5e                   	pop    esi
c000396e:	5f                   	pop    edi
c000396f:	5d                   	pop    ebp
c0003970:	c3                   	ret    

c0003971 <dir_remove>:
c0003971:	57                   	push   edi
c0003972:	56                   	push   esi
c0003973:	53                   	push   ebx
c0003974:	89 c3                	mov    ebx,eax
c0003976:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003979:	8b 30                	mov    esi,DWORD PTR [eax]
c000397b:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c000397e:	83 fa ff             	cmp    edx,0xffffffff
c0003981:	74 09                	je     c000398c <dir_remove+0x1b>
c0003983:	e8 62 f5 ff ff       	call   c0002eea <dir_sdi>
c0003988:	85 c0                	test   eax,eax
c000398a:	75 41                	jne    c00039cd <dir_remove+0x5c>
c000398c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000398f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003992:	89 f0                	mov    eax,esi
c0003994:	e8 d3 e7 ff ff       	call   c000216c <move_window>
c0003999:	85 c0                	test   eax,eax
c000399b:	75 26                	jne    c00039c3 <dir_remove+0x52>
c000399d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039a0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00039a3:	75 05                	jne    c00039aa <dir_remove+0x39>
c00039a5:	80 22 7f             	and    BYTE PTR [edx],0x7f
c00039a8:	eb 03                	jmp    c00039ad <dir_remove+0x3c>
c00039aa:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00039ad:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00039b1:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c00039b4:	73 17                	jae    c00039cd <dir_remove+0x5c>
c00039b6:	31 d2                	xor    edx,edx
c00039b8:	89 d8                	mov    eax,ebx
c00039ba:	e8 83 fa ff ff       	call   c0003442 <dir_next>
c00039bf:	85 c0                	test   eax,eax
c00039c1:	74 c9                	je     c000398c <dir_remove+0x1b>
c00039c3:	83 f8 04             	cmp    eax,0x4
c00039c6:	75 05                	jne    c00039cd <dir_remove+0x5c>
c00039c8:	b8 02 00 00 00       	mov    eax,0x2
c00039cd:	5b                   	pop    ebx
c00039ce:	5e                   	pop    esi
c00039cf:	5f                   	pop    edi
c00039d0:	c3                   	ret    

c00039d1 <create_name>:
c00039d1:	55                   	push   ebp
c00039d2:	89 d5                	mov    ebp,edx
c00039d4:	57                   	push   edi
c00039d5:	89 c7                	mov    edi,eax
c00039d7:	56                   	push   esi
c00039d8:	31 f6                	xor    esi,esi
c00039da:	53                   	push   ebx
c00039db:	83 ec 3c             	sub    esp,0x3c
c00039de:	8b 02                	mov    eax,DWORD PTR [edx]
c00039e0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00039e4:	8b 07                	mov    eax,DWORD PTR [edi]
c00039e6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00039ed:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00039f1:	e8 72 e0 ff ff       	call   c0001a68 <tchar2uni>
c00039f6:	89 c3                	mov    ebx,eax
c00039f8:	83 f8 ff             	cmp    eax,0xffffffff
c00039fb:	75 0a                	jne    c0003a07 <create_name+0x36>
c00039fd:	b8 06 00 00 00       	mov    eax,0x6
c0003a02:	e9 9e 02 00 00       	jmp    c0003ca5 <create_name+0x2d4>
c0003a07:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a0c:	76 0c                	jbe    c0003a1a <create_name+0x49>
c0003a0e:	c1 e8 10             	shr    eax,0x10
c0003a11:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a15:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a19:	46                   	inc    esi
c0003a1a:	66 83 fb 1f          	cmp    bx,0x1f
c0003a1e:	76 4f                	jbe    c0003a6f <create_name+0x9e>
c0003a20:	66 83 fb 5c          	cmp    bx,0x5c
c0003a24:	74 35                	je     c0003a5b <create_name+0x8a>
c0003a26:	66 83 fb 2f          	cmp    bx,0x2f
c0003a2a:	74 2f                	je     c0003a5b <create_name+0x8a>
c0003a2c:	66 83 fb 7f          	cmp    bx,0x7f
c0003a30:	77 11                	ja     c0003a43 <create_name+0x72>
c0003a32:	0f b7 d3             	movzx  edx,bx
c0003a35:	b8 d2 f4 01 c0       	mov    eax,0xc001f4d2
c0003a3a:	e8 11 e0 ff ff       	call   c0001a50 <chk_chr>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 ba                	jne    c00039fd <create_name+0x2c>
c0003a43:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003a49:	77 b2                	ja     c00039fd <create_name+0x2c>
c0003a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a4f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003a53:	46                   	inc    esi
c0003a54:	eb 97                	jmp    c00039ed <create_name+0x1c>
c0003a56:	40                   	inc    eax
c0003a57:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a5f:	8a 10                	mov    dl,BYTE PTR [eax]
c0003a61:	80 fa 2f             	cmp    dl,0x2f
c0003a64:	74 f0                	je     c0003a56 <create_name+0x85>
c0003a66:	80 fa 5c             	cmp    dl,0x5c
c0003a69:	74 eb                	je     c0003a56 <create_name+0x85>
c0003a6b:	31 db                	xor    ebx,ebx
c0003a6d:	eb 02                	jmp    c0003a71 <create_name+0xa0>
c0003a6f:	b3 04                	mov    bl,0x4
c0003a71:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a75:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003a78:	85 f6                	test   esi,esi
c0003a7a:	74 18                	je     c0003a94 <create_name+0xc3>
c0003a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a80:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003a85:	66 83 f8 20          	cmp    ax,0x20
c0003a89:	74 06                	je     c0003a91 <create_name+0xc0>
c0003a8b:	66 83 f8 2e          	cmp    ax,0x2e
c0003a8f:	75 03                	jne    c0003a94 <create_name+0xc3>
c0003a91:	4e                   	dec    esi
c0003a92:	eb e4                	jmp    c0003a78 <create_name+0xa7>
c0003a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a98:	31 ed                	xor    ebp,ebp
c0003a9a:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003aa0:	85 f6                	test   esi,esi
c0003aa2:	0f 84 55 ff ff ff    	je     c00039fd <create_name+0x2c>
c0003aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003aac:	8d 55 01             	lea    edx,[ebp+0x1]
c0003aaf:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003ab3:	66 83 f8 20          	cmp    ax,0x20
c0003ab7:	75 04                	jne    c0003abd <create_name+0xec>
c0003ab9:	89 d5                	mov    ebp,edx
c0003abb:	eb eb                	jmp    c0003aa8 <create_name+0xd7>
c0003abd:	85 ed                	test   ebp,ebp
c0003abf:	75 06                	jne    c0003ac7 <create_name+0xf6>
c0003ac1:	66 83 f8 2e          	cmp    ax,0x2e
c0003ac5:	75 08                	jne    c0003acf <create_name+0xfe>
c0003ac7:	83 cb 03             	or     ebx,0x3
c0003aca:	eb 03                	jmp    c0003acf <create_name+0xfe>
c0003acc:	4e                   	dec    esi
c0003acd:	74 0c                	je     c0003adb <create_name+0x10a>
c0003acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad3:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ad9:	75 f1                	jne    c0003acc <create_name+0xfb>
c0003adb:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ae0:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ae3:	ba 20 00 00 00       	mov    edx,0x20
c0003ae8:	e8 35 df ff ff       	call   c0001a22 <mem_set>
c0003aed:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003af5:	31 c9                	xor    ecx,ecx
c0003af7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003afc:	8d 45 01             	lea    eax,[ebp+0x1]
c0003aff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b07:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b0b:	66 85 ed             	test   bp,bp
c0003b0e:	0f 84 30 01 00 00    	je     c0003c44 <create_name+0x273>
c0003b14:	66 83 fd 20          	cmp    bp,0x20
c0003b18:	74 10                	je     c0003b2a <create_name+0x159>
c0003b1a:	66 83 fd 2e          	cmp    bp,0x2e
c0003b1e:	75 13                	jne    c0003b33 <create_name+0x162>
c0003b20:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b24:	0f 84 6b 01 00 00    	je     c0003c95 <create_name+0x2c4>
c0003b2a:	83 cb 03             	or     ebx,0x3
c0003b2d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003b31:	eb c9                	jmp    c0003afc <create_name+0x12b>
c0003b33:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003b37:	73 0b                	jae    c0003b44 <create_name+0x173>
c0003b39:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b3d:	75 47                	jne    c0003b86 <create_name+0x1b5>
c0003b3f:	e9 51 01 00 00       	jmp    c0003c95 <create_name+0x2c4>
c0003b44:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003b49:	75 10                	jne    c0003b5b <create_name+0x18a>
c0003b4b:	83 cb 03             	or     ebx,0x3
c0003b4e:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b56:	e9 e9 00 00 00       	jmp    c0003c44 <create_name+0x273>
c0003b5b:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b5f:	74 0d                	je     c0003b6e <create_name+0x19d>
c0003b61:	83 cb 03             	or     ebx,0x3
c0003b64:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b68:	0f 87 d6 00 00 00    	ja     c0003c44 <create_name+0x273>
c0003b6e:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003b73:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003b77:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b7f:	b9 08 00 00 00       	mov    ecx,0x8
c0003b84:	eb a7                	jmp    c0003b2d <create_name+0x15c>
c0003b86:	66 83 fd 7f          	cmp    bp,0x7f
c0003b8a:	76 68                	jbe    c0003bf4 <create_name+0x223>
c0003b8c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003b90:	88 da                	mov    dl,bl
c0003b92:	83 ca 02             	or     edx,0x2
c0003b95:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003b99:	50                   	push   eax
c0003b9a:	50                   	push   eax
c0003b9b:	68 b5 01 00 00       	push   0x1b5
c0003ba0:	55                   	push   ebp
c0003ba1:	e8 48 46 00 00       	call   c00081ee <ff_uni2oem>
c0003ba6:	83 c4 10             	add    esp,0x10
c0003ba9:	89 c5                	mov    ebp,eax
c0003bab:	a8 80                	test   al,0x80
c0003bad:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003bb1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003bb5:	74 0c                	je     c0003bc3 <create_name+0x1f2>
c0003bb7:	83 e5 7f             	and    ebp,0x7f
c0003bba:	0f b6 ad 20 f4 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe0be0]
c0003bc1:	eb 2a                	jmp    c0003bed <create_name+0x21c>
c0003bc3:	66 3d ff 00          	cmp    ax,0xff
c0003bc7:	76 24                	jbe    c0003bed <create_name+0x21c>
c0003bc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003bcd:	48                   	dec    eax
c0003bce:	39 c8                	cmp    eax,ecx
c0003bd0:	77 0c                	ja     c0003bde <create_name+0x20d>
c0003bd2:	83 cb 03             	or     ebx,0x3
c0003bd5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003bd9:	e9 4f ff ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003bde:	89 e8                	mov    eax,ebp
c0003be0:	88 d3                	mov    bl,dl
c0003be2:	66 c1 e8 08          	shr    ax,0x8
c0003be6:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003bea:	41                   	inc    ecx
c0003beb:	eb 4b                	jmp    c0003c38 <create_name+0x267>
c0003bed:	88 d3                	mov    bl,dl
c0003bef:	66 85 ed             	test   bp,bp
c0003bf2:	74 19                	je     c0003c0d <create_name+0x23c>
c0003bf4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003bf8:	0f b7 d5             	movzx  edx,bp
c0003bfb:	b8 db f4 01 c0       	mov    eax,0xc001f4db
c0003c00:	e8 4b de ff ff       	call   c0001a50 <chk_chr>
c0003c05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c09:	85 c0                	test   eax,eax
c0003c0b:	74 0a                	je     c0003c17 <create_name+0x246>
c0003c0d:	83 cb 03             	or     ebx,0x3
c0003c10:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c15:	eb 21                	jmp    c0003c38 <create_name+0x267>
c0003c17:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c1a:	66 83 f8 19          	cmp    ax,0x19
c0003c1e:	77 07                	ja     c0003c27 <create_name+0x256>
c0003c20:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c25:	eb 11                	jmp    c0003c38 <create_name+0x267>
c0003c27:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c2a:	66 83 f8 19          	cmp    ax,0x19
c0003c2e:	77 08                	ja     c0003c38 <create_name+0x267>
c0003c30:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003c35:	83 ed 20             	sub    ebp,0x20
c0003c38:	89 e8                	mov    eax,ebp
c0003c3a:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c3e:	41                   	inc    ecx
c0003c3f:	e9 e9 fe ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003c44:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003c48:	75 04                	jne    c0003c4e <create_name+0x27d>
c0003c4a:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003c4e:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003c53:	75 05                	jne    c0003c5a <create_name+0x289>
c0003c55:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c5a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c5e:	83 e0 0c             	and    eax,0xc
c0003c61:	3c 0c                	cmp    al,0xc
c0003c63:	74 0b                	je     c0003c70 <create_name+0x29f>
c0003c65:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c69:	83 e0 03             	and    eax,0x3
c0003c6c:	3c 03                	cmp    al,0x3
c0003c6e:	75 05                	jne    c0003c75 <create_name+0x2a4>
c0003c70:	83 cb 02             	or     ebx,0x2
c0003c73:	eb 19                	jmp    c0003c8e <create_name+0x2bd>
c0003c75:	f6 c3 02             	test   bl,0x2
c0003c78:	75 14                	jne    c0003c8e <create_name+0x2bd>
c0003c7a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003c7f:	74 03                	je     c0003c84 <create_name+0x2b3>
c0003c81:	83 cb 10             	or     ebx,0x10
c0003c84:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003c89:	74 03                	je     c0003c8e <create_name+0x2bd>
c0003c8b:	83 cb 08             	or     ebx,0x8
c0003c8e:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003c91:	31 c0                	xor    eax,eax
c0003c93:	eb 10                	jmp    c0003ca5 <create_name+0x2d4>
c0003c95:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c9a:	0f 85 ce fe ff ff    	jne    c0003b6e <create_name+0x19d>
c0003ca0:	e9 a6 fe ff ff       	jmp    c0003b4b <create_name+0x17a>
c0003ca5:	83 c4 3c             	add    esp,0x3c
c0003ca8:	5b                   	pop    ebx
c0003ca9:	5e                   	pop    esi
c0003caa:	5f                   	pop    edi
c0003cab:	5d                   	pop    ebp
c0003cac:	c3                   	ret    

c0003cad <xname_sum>:
c0003cad:	56                   	push   esi
c0003cae:	53                   	push   ebx
c0003caf:	89 c6                	mov    esi,eax
c0003cb1:	51                   	push   ecx
c0003cb2:	31 db                	xor    ebx,ebx
c0003cb4:	83 c6 02             	add    esi,0x2
c0003cb7:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003cbb:	66 85 c0             	test   ax,ax
c0003cbe:	74 1f                	je     c0003cdf <xname_sum+0x32>
c0003cc0:	83 ec 0c             	sub    esp,0xc
c0003cc3:	66 d1 cb             	ror    bx,1
c0003cc6:	50                   	push   eax
c0003cc7:	e8 1e 46 00 00       	call   c00082ea <ff_wtoupper>
c0003ccc:	83 c4 10             	add    esp,0x10
c0003ccf:	0f b6 d0             	movzx  edx,al
c0003cd2:	66 c1 e8 08          	shr    ax,0x8
c0003cd6:	01 d3                	add    ebx,edx
c0003cd8:	66 d1 cb             	ror    bx,1
c0003cdb:	01 c3                	add    ebx,eax
c0003cdd:	eb d5                	jmp    c0003cb4 <xname_sum+0x7>
c0003cdf:	89 d8                	mov    eax,ebx
c0003ce1:	5a                   	pop    edx
c0003ce2:	5b                   	pop    ebx
c0003ce3:	5e                   	pop    esi
c0003ce4:	c3                   	ret    

c0003ce5 <create_xdir>:
c0003ce5:	55                   	push   ebp
c0003ce6:	b9 40 00 00 00       	mov    ecx,0x40
c0003ceb:	57                   	push   edi
c0003cec:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf1:	56                   	push   esi
c0003cf2:	31 ff                	xor    edi,edi
c0003cf4:	53                   	push   ebx
c0003cf5:	be 40 00 00 00       	mov    esi,0x40
c0003cfa:	89 c3                	mov    ebx,eax
c0003cfc:	83 ec 1c             	sub    esp,0x1c
c0003cff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d03:	31 d2                	xor    edx,edx
c0003d05:	e8 18 dd ff ff       	call   c0001a22 <mem_set>
c0003d0a:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d0d:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d11:	31 c9                	xor    ecx,ecx
c0003d13:	8d 46 01             	lea    eax,[esi+0x1]
c0003d16:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d1a:	83 c6 02             	add    esi,0x2
c0003d1d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d21:	66 85 ed             	test   bp,bp
c0003d24:	74 12                	je     c0003d38 <create_xdir+0x53>
c0003d26:	0f b6 c1             	movzx  eax,cl
c0003d29:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d2d:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003d31:	66 83 fd 01          	cmp    bp,0x1
c0003d35:	80 d9 ff             	sbb    cl,0xff
c0003d38:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003d3b:	0f b7 d5             	movzx  edx,bp
c0003d3e:	83 c6 02             	add    esi,0x2
c0003d41:	e8 ba dc ff ff       	call   c0001a00 <st_word>
c0003d46:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003d4c:	75 d3                	jne    c0003d21 <create_xdir+0x3c>
c0003d4e:	8d 47 01             	lea    eax,[edi+0x1]
c0003d51:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d55:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003d59:	0f b6 c1             	movzx  eax,cl
c0003d5c:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003d61:	74 07                	je     c0003d6a <create_xdir+0x85>
c0003d63:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003d68:	eb a9                	jmp    c0003d13 <create_xdir+0x2e>
c0003d6a:	8d 47 02             	lea    eax,[edi+0x2]
c0003d6d:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003d70:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003d73:	89 d0                	mov    eax,edx
c0003d75:	e8 33 ff ff ff       	call   c0003cad <xname_sum>
c0003d7a:	83 c4 1c             	add    esp,0x1c
c0003d7d:	0f b7 d0             	movzx  edx,ax
c0003d80:	8d 43 24             	lea    eax,[ebx+0x24]
c0003d83:	5b                   	pop    ebx
c0003d84:	5e                   	pop    esi
c0003d85:	5f                   	pop    edi
c0003d86:	5d                   	pop    ebp
c0003d87:	e9 74 dc ff ff       	jmp    c0001a00 <st_word>

c0003d8c <cmp_lfn>:
c0003d8c:	55                   	push   ebp
c0003d8d:	57                   	push   edi
c0003d8e:	89 d7                	mov    edi,edx
c0003d90:	56                   	push   esi
c0003d91:	53                   	push   ebx
c0003d92:	83 ec 1c             	sub    esp,0x1c
c0003d95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003d99:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003d9c:	e8 ed db ff ff       	call   c000198e <ld_word>
c0003da1:	66 85 c0             	test   ax,ax
c0003da4:	74 07                	je     c0003dad <cmp_lfn+0x21>
c0003da6:	31 c0                	xor    eax,eax
c0003da8:	e9 9a 00 00 00       	jmp    c0003e47 <cmp_lfn+0xbb>
c0003dad:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003daf:	bd 01 00 00 00       	mov    ebp,0x1
c0003db4:	83 e3 3f             	and    ebx,0x3f
c0003db7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003dbf:	4b                   	dec    ebx
c0003dc0:	6b db 0d             	imul   ebx,ebx,0xd
c0003dc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003dc7:	0f b6 80 a0 f4 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0b60]
c0003dce:	01 f8                	add    eax,edi
c0003dd0:	e8 b9 db ff ff       	call   c000198e <ld_word>
c0003dd5:	66 85 ed             	test   bp,bp
c0003dd8:	89 c6                	mov    esi,eax
c0003dda:	74 3c                	je     c0003e18 <cmp_lfn+0x8c>
c0003ddc:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003de2:	77 c2                	ja     c0003da6 <cmp_lfn+0x1a>
c0003de4:	83 ec 0c             	sub    esp,0xc
c0003de7:	0f b7 c0             	movzx  eax,ax
c0003dea:	50                   	push   eax
c0003deb:	e8 fa 44 00 00       	call   c00082ea <ff_wtoupper>
c0003df0:	89 c5                	mov    ebp,eax
c0003df2:	8d 43 01             	lea    eax,[ebx+0x1]
c0003df5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003df9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003dfd:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e01:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e04:	e8 e1 44 00 00       	call   c00082ea <ff_wtoupper>
c0003e09:	83 c4 10             	add    esp,0x10
c0003e0c:	39 c5                	cmp    ebp,eax
c0003e0e:	75 96                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e10:	89 f5                	mov    ebp,esi
c0003e12:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e16:	eb 04                	jmp    c0003e1c <cmp_lfn+0x90>
c0003e18:	66 46                	inc    si
c0003e1a:	75 8a                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e1c:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e20:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e25:	75 9c                	jne    c0003dc3 <cmp_lfn+0x37>
c0003e27:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e2a:	74 16                	je     c0003e42 <cmp_lfn+0xb6>
c0003e2c:	66 85 ed             	test   bp,bp
c0003e2f:	74 11                	je     c0003e42 <cmp_lfn+0xb6>
c0003e31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e35:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003e3a:	0f 94 c0             	sete   al
c0003e3d:	0f b6 c0             	movzx  eax,al
c0003e40:	eb 05                	jmp    c0003e47 <cmp_lfn+0xbb>
c0003e42:	b8 01 00 00 00       	mov    eax,0x1
c0003e47:	83 c4 1c             	add    esp,0x1c
c0003e4a:	5b                   	pop    ebx
c0003e4b:	5e                   	pop    esi
c0003e4c:	5f                   	pop    edi
c0003e4d:	5d                   	pop    ebp
c0003e4e:	c3                   	ret    

c0003e4f <dir_find>:
c0003e4f:	55                   	push   ebp
c0003e50:	31 d2                	xor    edx,edx
c0003e52:	57                   	push   edi
c0003e53:	56                   	push   esi
c0003e54:	53                   	push   ebx
c0003e55:	89 c3                	mov    ebx,eax
c0003e57:	83 ec 1c             	sub    esp,0x1c
c0003e5a:	8b 30                	mov    esi,DWORD PTR [eax]
c0003e5c:	e8 89 f0 ff ff       	call   c0002eea <dir_sdi>
c0003e61:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e64:	85 c0                	test   eax,eax
c0003e66:	0f 85 9e 01 00 00    	jne    c000400a <dir_find+0x1bb>
c0003e6c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003e6f:	0f 85 8d 00 00 00    	jne    c0003f02 <dir_find+0xb3>
c0003e75:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003e78:	e8 30 fe ff ff       	call   c0003cad <xname_sum>
c0003e7d:	89 c7                	mov    edi,eax
c0003e7f:	31 d2                	xor    edx,edx
c0003e81:	89 d8                	mov    eax,ebx
c0003e83:	e8 72 f8 ff ff       	call   c00036fa <dir_read>
c0003e88:	85 c0                	test   eax,eax
c0003e8a:	0f 85 5e 01 00 00    	jne    c0003fee <dir_find+0x19f>
c0003e90:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003e93:	8d 41 24             	lea    eax,[ecx+0x24]
c0003e96:	e8 f3 da ff ff       	call   c000198e <ld_word>
c0003e9b:	66 39 f8             	cmp    ax,di
c0003e9e:	75 df                	jne    c0003e7f <dir_find+0x30>
c0003ea0:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003ea3:	31 ed                	xor    ebp,ebp
c0003ea5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003ea9:	ba 40 00 00 00       	mov    edx,0x40
c0003eae:	89 e9                	mov    ecx,ebp
c0003eb0:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003eb4:	0f 84 42 01 00 00    	je     c0003ffc <dir_find+0x1ad>
c0003eba:	f6 c2 1f             	test   dl,0x1f
c0003ebd:	75 03                	jne    c0003ec2 <dir_find+0x73>
c0003ebf:	83 c2 02             	add    edx,0x2
c0003ec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003ec6:	89 d0                	mov    eax,edx
c0003ec8:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003ecb:	e8 be da ff ff       	call   c000198e <ld_word>
c0003ed0:	83 ec 0c             	sub    esp,0xc
c0003ed3:	0f b7 c0             	movzx  eax,ax
c0003ed6:	50                   	push   eax
c0003ed7:	e8 0e 44 00 00       	call   c00082ea <ff_wtoupper>
c0003edc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003ee0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003ee3:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003ee7:	89 04 24             	mov    DWORD PTR [esp],eax
c0003eea:	e8 fb 43 00 00       	call   c00082ea <ff_wtoupper>
c0003eef:	83 c4 10             	add    esp,0x10
c0003ef2:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003ef6:	75 87                	jne    c0003e7f <dir_find+0x30>
c0003ef8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003efc:	45                   	inc    ebp
c0003efd:	83 c2 02             	add    edx,0x2
c0003f00:	eb ac                	jmp    c0003eae <dir_find+0x5f>
c0003f02:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f09:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f0e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f13:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f16:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f19:	89 f0                	mov    eax,esi
c0003f1b:	e8 4c e2 ff ff       	call   c000216c <move_window>
c0003f20:	85 c0                	test   eax,eax
c0003f22:	0f 85 c6 00 00 00    	jne    c0003fee <dir_find+0x19f>
c0003f28:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003f2b:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003f2e:	84 c9                	test   cl,cl
c0003f30:	0f 84 bd 00 00 00    	je     c0003ff3 <dir_find+0x1a4>
c0003f36:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003f39:	88 d0                	mov    al,dl
c0003f3b:	83 e0 3f             	and    eax,0x3f
c0003f3e:	80 f9 e5             	cmp    cl,0xe5
c0003f41:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003f44:	0f 84 87 00 00 00    	je     c0003fd1 <dir_find+0x182>
c0003f4a:	80 e2 08             	and    dl,0x8
c0003f4d:	74 06                	je     c0003f55 <dir_find+0x106>
c0003f4f:	3c 0f                	cmp    al,0xf
c0003f51:	75 7e                	jne    c0003fd1 <dir_find+0x182>
c0003f53:	eb 04                	jmp    c0003f59 <dir_find+0x10a>
c0003f55:	3c 0f                	cmp    al,0xf
c0003f57:	75 4c                	jne    c0003fa5 <dir_find+0x156>
c0003f59:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003f5d:	75 7e                	jne    c0003fdd <dir_find+0x18e>
c0003f5f:	f6 c1 40             	test   cl,0x40
c0003f62:	74 12                	je     c0003f76 <dir_find+0x127>
c0003f64:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003f67:	83 e1 bf             	and    ecx,0xffffffbf
c0003f6a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003f6e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003f71:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003f74:	eb 06                	jmp    c0003f7c <dir_find+0x12d>
c0003f76:	89 f8                	mov    eax,edi
c0003f78:	38 c8                	cmp    al,cl
c0003f7a:	75 5c                	jne    c0003fd8 <dir_find+0x189>
c0003f7c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003f80:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f85:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003f88:	75 53                	jne    c0003fdd <dir_find+0x18e>
c0003f8a:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0003f8e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f91:	89 ea                	mov    edx,ebp
c0003f93:	e8 f4 fd ff ff       	call   c0003d8c <cmp_lfn>
c0003f98:	85 c0                	test   eax,eax
c0003f9a:	74 41                	je     c0003fdd <dir_find+0x18e>
c0003f9c:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0003fa0:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003fa3:	eb 38                	jmp    c0003fdd <dir_find+0x18e>
c0003fa5:	89 f8                	mov    eax,edi
c0003fa7:	84 c0                	test   al,al
c0003fa9:	75 0d                	jne    c0003fb8 <dir_find+0x169>
c0003fab:	89 e8                	mov    eax,ebp
c0003fad:	e8 98 de ff ff       	call   c0001e4a <sum_sfn>
c0003fb2:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0003fb6:	74 52                	je     c000400a <dir_find+0x1bb>
c0003fb8:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0003fbc:	75 13                	jne    c0003fd1 <dir_find+0x182>
c0003fbe:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0003fc1:	b9 0b 00 00 00       	mov    ecx,0xb
c0003fc6:	89 e8                	mov    eax,ebp
c0003fc8:	e8 60 da ff ff       	call   c0001a2d <mem_cmp>
c0003fcd:	85 c0                	test   eax,eax
c0003fcf:	74 39                	je     c000400a <dir_find+0x1bb>
c0003fd1:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fd8:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fdd:	31 d2                	xor    edx,edx
c0003fdf:	89 d8                	mov    eax,ebx
c0003fe1:	e8 5c f4 ff ff       	call   c0003442 <dir_next>
c0003fe6:	85 c0                	test   eax,eax
c0003fe8:	0f 84 25 ff ff ff    	je     c0003f13 <dir_find+0xc4>
c0003fee:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ff1:	eb 17                	jmp    c000400a <dir_find+0x1bb>
c0003ff3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0003ffa:	eb 0e                	jmp    c000400a <dir_find+0x1bb>
c0003ffc:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003fff:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004004:	0f 85 75 fe ff ff    	jne    c0003e7f <dir_find+0x30>
c000400a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000400d:	83 c4 1c             	add    esp,0x1c
c0004010:	5b                   	pop    ebx
c0004011:	5e                   	pop    esi
c0004012:	5f                   	pop    edi
c0004013:	5d                   	pop    ebp
c0004014:	c3                   	ret    

c0004015 <dir_register>:
c0004015:	55                   	push   ebp
c0004016:	57                   	push   edi
c0004017:	56                   	push   esi
c0004018:	be 06 00 00 00       	mov    esi,0x6
c000401d:	53                   	push   ebx
c000401e:	83 ec 6c             	sub    esp,0x6c
c0004021:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004025:	0f 85 62 02 00 00    	jne    c000428d <dir_register+0x278>
c000402b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000402d:	31 ff                	xor    edi,edi
c000402f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004032:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004037:	74 03                	je     c000403c <dir_register+0x27>
c0004039:	47                   	inc    edi
c000403a:	eb f6                	jmp    c0004032 <dir_register+0x1d>
c000403c:	89 c3                	mov    ebx,eax
c000403e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004042:	0f 85 e1 00 00 00    	jne    c0004129 <dir_register+0x114>
c0004048:	83 c7 0e             	add    edi,0xe
c000404b:	b9 0f 00 00 00       	mov    ecx,0xf
c0004050:	89 f8                	mov    eax,edi
c0004052:	31 d2                	xor    edx,edx
c0004054:	f7 f1                	div    ecx
c0004056:	8d 50 02             	lea    edx,[eax+0x2]
c0004059:	89 c7                	mov    edi,eax
c000405b:	89 d8                	mov    eax,ebx
c000405d:	e8 12 f8 ff ff       	call   c0003874 <dir_alloc>
c0004062:	89 c6                	mov    esi,eax
c0004064:	85 c0                	test   eax,eax
c0004066:	0f 85 21 02 00 00    	jne    c000428d <dir_register+0x278>
c000406c:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004072:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004075:	c1 e7 05             	shl    edi,0x5
c0004078:	29 f8                	sub    eax,edi
c000407a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000407d:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004080:	a8 04                	test   al,0x4
c0004082:	0f 84 91 00 00 00    	je     c0004119 <dir_register+0x104>
c0004088:	83 e0 fb             	and    eax,0xfffffffb
c000408b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000408e:	89 d8                	mov    eax,ebx
c0004090:	e8 25 ec ff ff       	call   c0002cba <fill_first_frag>
c0004095:	85 c0                	test   eax,eax
c0004097:	0f 85 ee 01 00 00    	jne    c000428b <dir_register+0x276>
c000409d:	83 c9 ff             	or     ecx,0xffffffff
c00040a0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00040a3:	89 d8                	mov    eax,ebx
c00040a5:	e8 db eb ff ff       	call   c0002c85 <fill_last_frag>
c00040aa:	85 c0                	test   eax,eax
c00040ac:	0f 85 d9 01 00 00    	jne    c000428b <dir_register+0x276>
c00040b2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00040b6:	74 61                	je     c0004119 <dir_register+0x104>
c00040b8:	89 da                	mov    edx,ebx
c00040ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00040be:	e8 ea f5 ff ff       	call   c00036ad <load_obj_xdir>
c00040c3:	85 c0                	test   eax,eax
c00040c5:	0f 85 c0 01 00 00    	jne    c000428b <dir_register+0x276>
c00040cb:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00040cf:	31 c9                	xor    ecx,ecx
c00040d1:	c1 e2 09             	shl    edx,0x9
c00040d4:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00040d7:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00040da:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00040dd:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00040e0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040e3:	83 c0 38             	add    eax,0x38
c00040e6:	e8 1c d9 ff ff       	call   c0001a07 <st_qword>
c00040eb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040ee:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040f1:	83 c0 28             	add    eax,0x28
c00040f4:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00040f7:	e8 0b d9 ff ff       	call   c0001a07 <st_qword>
c00040fc:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040ff:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004102:	83 c8 01             	or     eax,0x1
c0004105:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c0004108:	8d 44 24 14          	lea    eax,[esp+0x14]
c000410c:	e8 db f7 ff ff       	call   c00038ec <store_xdir>
c0004111:	85 c0                	test   eax,eax
c0004113:	0f 85 72 01 00 00    	jne    c000428b <dir_register+0x276>
c0004119:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000411c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000411f:	e8 c1 fb ff ff       	call   c0003ce5 <create_xdir>
c0004124:	e9 64 01 00 00       	jmp    c000428d <dir_register+0x278>
c0004129:	8d 40 3c             	lea    eax,[eax+0x3c]
c000412c:	b9 0c 00 00 00       	mov    ecx,0xc
c0004131:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004135:	89 c2                	mov    edx,eax
c0004137:	8d 44 24 14          	lea    eax,[esp+0x14]
c000413b:	e8 cd d8 ff ff       	call   c0001a0d <mem_cpy>
c0004140:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004145:	74 58                	je     c000419f <dir_register+0x18a>
c0004147:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000414b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004153:	83 ec 0c             	sub    esp,0xc
c0004156:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004159:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000415d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004161:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004165:	e8 24 dc ff ff       	call   c0001d8e <gen_numname>
c000416a:	89 d8                	mov    eax,ebx
c000416c:	e8 de fc ff ff       	call   c0003e4f <dir_find>
c0004171:	83 c4 10             	add    esp,0x10
c0004174:	89 c6                	mov    esi,eax
c0004176:	85 c0                	test   eax,eax
c0004178:	75 15                	jne    c000418f <dir_register+0x17a>
c000417a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000417e:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004183:	75 ce                	jne    c0004153 <dir_register+0x13e>
c0004185:	be 07 00 00 00       	mov    esi,0x7
c000418a:	e9 fe 00 00 00       	jmp    c000428d <dir_register+0x278>
c000418f:	83 f8 04             	cmp    eax,0x4
c0004192:	0f 85 f5 00 00 00    	jne    c000428d <dir_register+0x278>
c0004198:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000419c:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000419f:	b9 01 00 00 00       	mov    ecx,0x1
c00041a4:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00041a9:	74 0f                	je     c00041ba <dir_register+0x1a5>
c00041ab:	b9 0d 00 00 00       	mov    ecx,0xd
c00041b0:	8d 47 0c             	lea    eax,[edi+0xc]
c00041b3:	31 d2                	xor    edx,edx
c00041b5:	f7 f1                	div    ecx
c00041b7:	8d 48 01             	lea    ecx,[eax+0x1]
c00041ba:	89 ca                	mov    edx,ecx
c00041bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041c0:	89 d8                	mov    eax,ebx
c00041c2:	e8 ad f6 ff ff       	call   c0003874 <dir_alloc>
c00041c7:	89 c6                	mov    esi,eax
c00041c9:	85 c0                	test   eax,eax
c00041cb:	0f 85 bc 00 00 00    	jne    c000428d <dir_register+0x278>
c00041d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041d5:	49                   	dec    ecx
c00041d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041da:	74 6a                	je     c0004246 <dir_register+0x231>
c00041dc:	89 c8                	mov    eax,ecx
c00041de:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00041e1:	c1 e0 05             	shl    eax,0x5
c00041e4:	29 c2                	sub    edx,eax
c00041e6:	89 d8                	mov    eax,ebx
c00041e8:	e8 fd ec ff ff       	call   c0002eea <dir_sdi>
c00041ed:	89 c6                	mov    esi,eax
c00041ef:	85 c0                	test   eax,eax
c00041f1:	0f 85 96 00 00 00    	jne    c000428d <dir_register+0x278>
c00041f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00041fb:	e8 4a dc ff ff       	call   c0001e4a <sum_sfn>
c0004200:	0f b6 f8             	movzx  edi,al
c0004203:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004206:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004209:	89 e8                	mov    eax,ebp
c000420b:	e8 5c df ff ff       	call   c000216c <move_window>
c0004210:	89 c6                	mov    esi,eax
c0004212:	85 c0                	test   eax,eax
c0004214:	75 77                	jne    c000428d <dir_register+0x278>
c0004216:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000421b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000421e:	83 ec 0c             	sub    esp,0xc
c0004221:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004224:	57                   	push   edi
c0004225:	e8 e0 da ff ff       	call   c0001d0a <put_lfn>
c000422a:	31 d2                	xor    edx,edx
c000422c:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004230:	89 d8                	mov    eax,ebx
c0004232:	e8 0b f2 ff ff       	call   c0003442 <dir_next>
c0004237:	83 c4 10             	add    esp,0x10
c000423a:	89 c6                	mov    esi,eax
c000423c:	85 c0                	test   eax,eax
c000423e:	75 4d                	jne    c000428d <dir_register+0x278>
c0004240:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004244:	75 bd                	jne    c0004203 <dir_register+0x1ee>
c0004246:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004249:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000424c:	89 e8                	mov    eax,ebp
c000424e:	e8 19 df ff ff       	call   c000216c <move_window>
c0004253:	89 c6                	mov    esi,eax
c0004255:	85 c0                	test   eax,eax
c0004257:	75 34                	jne    c000428d <dir_register+0x278>
c0004259:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000425c:	b9 20 00 00 00       	mov    ecx,0x20
c0004261:	31 d2                	xor    edx,edx
c0004263:	e8 ba d7 ff ff       	call   c0001a22 <mem_set>
c0004268:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000426b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000426f:	b9 0b 00 00 00       	mov    ecx,0xb
c0004274:	e8 94 d7 ff ff       	call   c0001a0d <mem_cpy>
c0004279:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000427c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000427f:	83 e0 18             	and    eax,0x18
c0004282:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004285:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004289:	eb 02                	jmp    c000428d <dir_register+0x278>
c000428b:	89 c6                	mov    esi,eax
c000428d:	83 c4 6c             	add    esp,0x6c
c0004290:	89 f0                	mov    eax,esi
c0004292:	5b                   	pop    ebx
c0004293:	5e                   	pop    esi
c0004294:	5f                   	pop    edi
c0004295:	5d                   	pop    ebp
c0004296:	c3                   	ret    

c0004297 <sync_fs>:
c0004297:	56                   	push   esi
c0004298:	53                   	push   ebx
c0004299:	53                   	push   ebx
c000429a:	89 c3                	mov    ebx,eax
c000429c:	e8 37 de ff ff       	call   c00020d8 <sync_window>
c00042a1:	85 c0                	test   eax,eax
c00042a3:	0f 85 b1 00 00 00    	jne    c000435a <sync_fs+0xc3>
c00042a9:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00042ac:	0f 85 8e 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042b2:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00042b6:	0f 85 84 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042bc:	b9 00 02 00 00       	mov    ecx,0x200
c00042c1:	8d 73 54             	lea    esi,[ebx+0x54]
c00042c4:	31 d2                	xor    edx,edx
c00042c6:	89 f0                	mov    eax,esi
c00042c8:	e8 55 d7 ff ff       	call   c0001a22 <mem_set>
c00042cd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00042d3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00042d8:	e8 23 d7 ff ff       	call   c0001a00 <st_word>
c00042dd:	ba 52 52 61 41       	mov    edx,0x41615252
c00042e2:	89 f0                	mov    eax,esi
c00042e4:	e8 1b d7 ff ff       	call   c0001a04 <st_dword>
c00042e9:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00042ef:	ba 72 72 41 61       	mov    edx,0x61417272
c00042f4:	e8 0b d7 ff ff       	call   c0001a04 <st_dword>
c00042f9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042fc:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004302:	e8 fd d6 ff ff       	call   c0001a04 <st_dword>
c0004307:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000430a:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004310:	e8 ef d6 ff ff       	call   c0001a04 <st_dword>
c0004315:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0004318:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000431b:	83 c0 01             	add    eax,0x1
c000431e:	83 d2 00             	adc    edx,0x0
c0004321:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004324:	83 ec 0c             	sub    esp,0xc
c0004327:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000432a:	6a 01                	push   0x1
c000432c:	52                   	push   edx
c000432d:	50                   	push   eax
c000432e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004332:	56                   	push   esi
c0004333:	50                   	push   eax
c0004334:	e8 20 d6 ff ff       	call   c0001959 <disk_write>
c0004339:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000433d:	83 c4 20             	add    esp,0x20
c0004340:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004344:	51                   	push   ecx
c0004345:	6a 00                	push   0x0
c0004347:	6a 00                	push   0x0
c0004349:	50                   	push   eax
c000434a:	e8 20 d6 ff ff       	call   c000196f <disk_ioctl>
c000434f:	83 c4 10             	add    esp,0x10
c0004352:	85 c0                	test   eax,eax
c0004354:	0f 95 c0             	setne  al
c0004357:	0f b6 c0             	movzx  eax,al
c000435a:	5a                   	pop    edx
c000435b:	5b                   	pop    ebx
c000435c:	5e                   	pop    esi
c000435d:	c3                   	ret    

c000435e <create_partition>:
c000435e:	55                   	push   ebp
c000435f:	0f b6 c0             	movzx  eax,al
c0004362:	57                   	push   edi
c0004363:	56                   	push   esi
c0004364:	53                   	push   ebx
c0004365:	83 ec 60             	sub    esp,0x60
c0004368:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000436c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004370:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004374:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004378:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000437c:	50                   	push   eax
c000437d:	6a 01                	push   0x1
c000437f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004383:	e8 e7 d5 ff ff       	call   c000196f <disk_ioctl>
c0004388:	83 c4 10             	add    esp,0x10
c000438b:	85 c0                	test   eax,eax
c000438d:	74 0a                	je     c0004399 <create_partition+0x3b>
c000438f:	b8 01 00 00 00       	mov    eax,0x1
c0004394:	e9 67 05 00 00       	jmp    c0004900 <create_partition+0x5a2>
c0004399:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000439d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00043a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00043a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00043a9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00043ae:	0f 86 ed 03 00 00    	jbe    c00047a1 <create_partition+0x443>
c00043b4:	83 c0 df             	add    eax,0xffffffdf
c00043b7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00043bf:	83 d2 ff             	adc    edx,0xffffffff
c00043c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00043ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043d2:	83 c0 bd             	add    eax,0xffffffbd
c00043d5:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00043dc:	83 d2 ff             	adc    edx,0xffffffff
c00043df:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00043e3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00043e7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00043ef:	be 22 00 00 00       	mov    esi,0x22
c00043f4:	31 ff                	xor    edi,edi
c00043f6:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00043fe:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004406:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000440e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004412:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004418:	75 0e                	jne    c0004428 <create_partition+0xca>
c000441a:	b9 00 02 00 00       	mov    ecx,0x200
c000441f:	31 d2                	xor    edx,edx
c0004421:	89 d8                	mov    eax,ebx
c0004423:	e8 fa d5 ff ff       	call   c0001a22 <mem_set>
c0004428:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000442c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004430:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004434:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004437:	0f 84 23 01 00 00    	je     c0004560 <create_partition+0x202>
c000443d:	89 f0                	mov    eax,esi
c000443f:	89 fa                	mov    edx,edi
c0004441:	05 ff 07 00 00       	add    eax,0x7ff
c0004446:	83 d2 00             	adc    edx,0x0
c0004449:	89 c1                	mov    ecx,eax
c000444b:	89 d7                	mov    edi,edx
c000444d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004453:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004457:	89 ce                	mov    esi,ecx
c0004459:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000445d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004461:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004465:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004468:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000446c:	89 04 24             	mov    DWORD PTR [esp],eax
c000446f:	b8 64 00 00 00       	mov    eax,0x64
c0004474:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004477:	b8 00 00 00 00       	mov    eax,0x0
c000447c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004480:	72 41                	jb     c00044c3 <create_partition+0x165>
c0004482:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000448a:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000448e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004493:	01 c1                	add    ecx,eax
c0004495:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004499:	f7 24 24             	mul    DWORD PTR [esp]
c000449c:	6a 00                	push   0x0
c000449e:	01 ca                	add    edx,ecx
c00044a0:	6a 64                	push   0x64
c00044a2:	52                   	push   edx
c00044a3:	50                   	push   eax
c00044a4:	e8 73 9f 01 00       	call   c001e41c <__udivdi3>
c00044a9:	83 c4 10             	add    esp,0x10
c00044ac:	05 ff 07 00 00       	add    eax,0x7ff
c00044b1:	83 d2 00             	adc    edx,0x0
c00044b4:	89 c1                	mov    ecx,eax
c00044b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ba:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044c0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00044c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00044c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00044ca:	01 f0                	add    eax,esi
c00044cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00044d0:	11 fa                	adc    edx,edi
c00044d2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00044d6:	19 d1                	sbb    ecx,edx
c00044d8:	73 2e                	jae    c0004508 <create_partition+0x1aa>
c00044da:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00044de:	89 f8                	mov    eax,edi
c00044e0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00044e7:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00044eb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044f3:	73 6b                	jae    c0004560 <create_partition+0x202>
c00044f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00044f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00044fd:	29 f0                	sub    eax,esi
c00044ff:	19 fa                	sbb    edx,edi
c0004501:	89 04 24             	mov    DWORD PTR [esp],eax
c0004504:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000450c:	0b 04 24             	or     eax,DWORD PTR [esp]
c000450f:	74 4f                	je     c0004560 <create_partition+0x202>
c0004511:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004514:	b9 10 00 00 00       	mov    ecx,0x10
c0004519:	ba b0 f4 01 c0       	mov    edx,0xc001f4b0
c000451e:	e8 ea d4 ff ff       	call   c0001a0d <mem_cpy>
c0004523:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004527:	b9 10 00 00 00       	mov    ecx,0x10
c000452c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004530:	e8 2c db ff ff       	call   c0002061 <make_rand>
c0004535:	89 f2                	mov    edx,esi
c0004537:	89 f9                	mov    ecx,edi
c0004539:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000453d:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004541:	e8 c1 d4 ff ff       	call   c0001a07 <st_qword>
c0004546:	03 34 24             	add    esi,DWORD PTR [esp]
c0004549:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000454d:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004551:	89 f2                	mov    edx,esi
c0004553:	89 f9                	mov    ecx,edi
c0004555:	83 c2 ff             	add    edx,0xffffffff
c0004558:	83 d1 ff             	adc    ecx,0xffffffff
c000455b:	e8 a7 d4 ff ff       	call   c0001a07 <st_qword>
c0004560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004564:	83 e8 80             	sub    eax,0xffffff80
c0004567:	89 c5                	mov    ebp,eax
c0004569:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000456d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004573:	75 6b                	jne    c00045e0 <create_partition+0x282>
c0004575:	45                   	inc    ebp
c0004576:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000457a:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000457f:	e8 39 da ff ff       	call   c0001fbd <crc32>
c0004584:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000458a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000458e:	75 e5                	jne    c0004575 <create_partition+0x217>
c0004590:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004594:	31 d2                	xor    edx,edx
c0004596:	83 ec 0c             	sub    esp,0xc
c0004599:	c1 ed 09             	shr    ebp,0x9
c000459c:	6a 01                	push   0x1
c000459e:	8d 45 02             	lea    eax,[ebp+0x2]
c00045a1:	52                   	push   edx
c00045a2:	50                   	push   eax
c00045a3:	53                   	push   ebx
c00045a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045a8:	e8 ac d3 ff ff       	call   c0001959 <disk_write>
c00045ad:	83 c4 20             	add    esp,0x20
c00045b0:	85 c0                	test   eax,eax
c00045b2:	0f 85 d7 fd ff ff    	jne    c000438f <create_partition+0x31>
c00045b8:	83 ec 0c             	sub    esp,0xc
c00045bb:	31 d2                	xor    edx,edx
c00045bd:	6a 01                	push   0x1
c00045bf:	89 e8                	mov    eax,ebp
c00045c1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00045c5:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00045c9:	52                   	push   edx
c00045ca:	50                   	push   eax
c00045cb:	53                   	push   ebx
c00045cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045d0:	e8 84 d3 ff ff       	call   c0001959 <disk_write>
c00045d5:	83 c4 20             	add    esp,0x20
c00045d8:	85 c0                	test   eax,eax
c00045da:	0f 85 af fd ff ff    	jne    c000438f <create_partition+0x31>
c00045e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00045e8:	3d 00 40 00 00       	cmp    eax,0x4000
c00045ed:	74 0d                	je     c00045fc <create_partition+0x29e>
c00045ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00045f3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045f7:	e9 12 fe ff ff       	jmp    c000440e <create_partition+0xb0>
c00045fc:	31 d2                	xor    edx,edx
c00045fe:	b9 00 02 00 00       	mov    ecx,0x200
c0004603:	89 d8                	mov    eax,ebx
c0004605:	8d 6b 20             	lea    ebp,[ebx+0x20]
c0004608:	e8 15 d4 ff ff       	call   c0001a22 <mem_set>
c000460d:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004610:	b9 10 00 00 00       	mov    ecx,0x10
c0004615:	ba a0 f3 01 c0       	mov    edx,0xc001f3a0
c000461a:	89 d8                	mov    eax,ebx
c000461c:	e8 ec d3 ff ff       	call   c0001a0d <mem_cpy>
c0004621:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004625:	8d 43 58             	lea    eax,[ebx+0x58]
c0004628:	f7 d2                	not    edx
c000462a:	e8 d5 d3 ff ff       	call   c0001a04 <st_dword>
c000462f:	8d 43 18             	lea    eax,[ebx+0x18]
c0004632:	31 c9                	xor    ecx,ecx
c0004634:	89 04 24             	mov    DWORD PTR [esp],eax
c0004637:	ba 01 00 00 00       	mov    edx,0x1
c000463c:	e8 c6 d3 ff ff       	call   c0001a07 <st_qword>
c0004641:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004645:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004649:	83 c2 ff             	add    edx,0xffffffff
c000464c:	89 e8                	mov    eax,ebp
c000464e:	83 d1 ff             	adc    ecx,0xffffffff
c0004651:	e8 b1 d3 ff ff       	call   c0001a07 <st_qword>
c0004656:	31 c9                	xor    ecx,ecx
c0004658:	8d 43 28             	lea    eax,[ebx+0x28]
c000465b:	ba 22 00 00 00       	mov    edx,0x22
c0004660:	e8 a2 d3 ff ff       	call   c0001a07 <st_qword>
c0004665:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004669:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000466d:	83 c2 de             	add    edx,0xffffffde
c0004670:	8d 43 30             	lea    eax,[ebx+0x30]
c0004673:	83 d1 ff             	adc    ecx,0xffffffff
c0004676:	31 f6                	xor    esi,esi
c0004678:	e8 8a d3 ff ff       	call   c0001a07 <st_qword>
c000467d:	8d 43 54             	lea    eax,[ebx+0x54]
c0004680:	ba 80 00 00 00       	mov    edx,0x80
c0004685:	e8 7a d3 ff ff       	call   c0001a04 <st_dword>
c000468a:	8d 43 50             	lea    eax,[ebx+0x50]
c000468d:	ba 80 00 00 00       	mov    edx,0x80
c0004692:	e8 6d d3 ff ff       	call   c0001a04 <st_dword>
c0004697:	ba 02 00 00 00       	mov    edx,0x2
c000469c:	89 f8                	mov    eax,edi
c000469e:	e8 61 d3 ff ff       	call   c0001a04 <st_dword>
c00046a3:	8d 53 38             	lea    edx,[ebx+0x38]
c00046a6:	b9 10 00 00 00       	mov    ecx,0x10
c00046ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046af:	e8 ad d9 ff ff       	call   c0002061 <make_rand>
c00046b4:	83 c8 ff             	or     eax,0xffffffff
c00046b7:	46                   	inc    esi
c00046b8:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00046bd:	e8 fb d8 ff ff       	call   c0001fbd <crc32>
c00046c2:	83 fe 5c             	cmp    esi,0x5c
c00046c5:	75 f0                	jne    c00046b7 <create_partition+0x359>
c00046c7:	f7 d0                	not    eax
c00046c9:	8d 73 10             	lea    esi,[ebx+0x10]
c00046cc:	89 c2                	mov    edx,eax
c00046ce:	89 f0                	mov    eax,esi
c00046d0:	e8 2f d3 ff ff       	call   c0001a04 <st_dword>
c00046d5:	83 ec 0c             	sub    esp,0xc
c00046d8:	6a 01                	push   0x1
c00046da:	6a 00                	push   0x0
c00046dc:	6a 01                	push   0x1
c00046de:	53                   	push   ebx
c00046df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00046e3:	e8 71 d2 ff ff       	call   c0001959 <disk_write>
c00046e8:	83 c4 20             	add    esp,0x20
c00046eb:	85 c0                	test   eax,eax
c00046ed:	0f 85 9c fc ff ff    	jne    c000438f <create_partition+0x31>
c00046f3:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046f7:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046fb:	83 c2 ff             	add    edx,0xffffffff
c00046fe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004701:	83 d1 ff             	adc    ecx,0xffffffff
c0004704:	e8 fe d2 ff ff       	call   c0001a07 <st_qword>
c0004709:	ba 01 00 00 00       	mov    edx,0x1
c000470e:	31 c9                	xor    ecx,ecx
c0004710:	89 e8                	mov    eax,ebp
c0004712:	e8 f0 d2 ff ff       	call   c0001a07 <st_qword>
c0004717:	89 f8                	mov    eax,edi
c0004719:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000471d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004721:	31 ff                	xor    edi,edi
c0004723:	e8 df d2 ff ff       	call   c0001a07 <st_qword>
c0004728:	89 f0                	mov    eax,esi
c000472a:	31 d2                	xor    edx,edx
c000472c:	e8 d3 d2 ff ff       	call   c0001a04 <st_dword>
c0004731:	83 c8 ff             	or     eax,0xffffffff
c0004734:	47                   	inc    edi
c0004735:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c000473a:	e8 7e d8 ff ff       	call   c0001fbd <crc32>
c000473f:	83 ff 5c             	cmp    edi,0x5c
c0004742:	75 f0                	jne    c0004734 <create_partition+0x3d6>
c0004744:	f7 d0                	not    eax
c0004746:	89 c2                	mov    edx,eax
c0004748:	89 f0                	mov    eax,esi
c000474a:	e8 b5 d2 ff ff       	call   c0001a04 <st_dword>
c000474f:	83 ec 0c             	sub    esp,0xc
c0004752:	6a 01                	push   0x1
c0004754:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004758:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000475c:	83 c0 ff             	add    eax,0xffffffff
c000475f:	83 d2 ff             	adc    edx,0xffffffff
c0004762:	52                   	push   edx
c0004763:	50                   	push   eax
c0004764:	53                   	push   ebx
c0004765:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004769:	e8 eb d1 ff ff       	call   c0001959 <disk_write>
c000476e:	83 c4 20             	add    esp,0x20
c0004771:	85 c0                	test   eax,eax
c0004773:	0f 85 16 fc ff ff    	jne    c000438f <create_partition+0x31>
c0004779:	31 d2                	xor    edx,edx
c000477b:	89 d8                	mov    eax,ebx
c000477d:	b9 00 02 00 00       	mov    ecx,0x200
c0004782:	e8 9b d2 ff ff       	call   c0001a22 <mem_set>
c0004787:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000478d:	b9 10 00 00 00       	mov    ecx,0x10
c0004792:	ba b0 f3 01 c0       	mov    edx,0xc001f3b0
c0004797:	e8 71 d2 ff ff       	call   c0001a0d <mem_cpy>
c000479c:	e9 21 01 00 00       	jmp    c00048c2 <create_partition+0x564>
c00047a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00047a5:	b9 05 00 00 00       	mov    ecx,0x5
c00047aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00047ad:	bf 08 00 00 00       	mov    edi,0x8
c00047b2:	89 f8                	mov    eax,edi
c00047b4:	31 d2                	xor    edx,edx
c00047b6:	0f b6 f0             	movzx  esi,al
c00047b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047bc:	f7 f6                	div    esi
c00047be:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00047c3:	76 0a                	jbe    c00047cf <create_partition+0x471>
c00047c5:	d1 e7                	shl    edi,1
c00047c7:	49                   	dec    ecx
c00047c8:	75 e8                	jne    c00047b2 <create_partition+0x454>
c00047ca:	bf ff ff ff ff       	mov    edi,0xffffffff
c00047cf:	b9 00 02 00 00       	mov    ecx,0x200
c00047d4:	31 d2                	xor    edx,edx
c00047d6:	89 d8                	mov    eax,ebx
c00047d8:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00047de:	e8 3f d2 ff ff       	call   c0001a22 <mem_set>
c00047e3:	b9 64 00 00 00       	mov    ecx,0x64
c00047e8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047eb:	31 d2                	xor    edx,edx
c00047ed:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00047f5:	f7 f1                	div    ecx
c00047f7:	b9 3f 00 00 00       	mov    ecx,0x3f
c00047fc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004800:	89 f8                	mov    eax,edi
c0004802:	0f b6 c0             	movzx  eax,al
c0004805:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004809:	e9 80 00 00 00       	jmp    c000488e <create_partition+0x530>
c000480e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004811:	29 cf                	sub    edi,ecx
c0004813:	89 ca                	mov    edx,ecx
c0004815:	89 f0                	mov    eax,esi
c0004817:	bd 3f 00 00 00       	mov    ebp,0x3f
c000481c:	e8 e3 d1 ff ff       	call   c0001a04 <st_dword>
c0004821:	8d 46 04             	lea    eax,[esi+0x4]
c0004824:	89 fa                	mov    edx,edi
c0004826:	83 c6 10             	add    esi,0x10
c0004829:	e8 d6 d1 ff ff       	call   c0001a04 <st_dword>
c000482e:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004832:	31 d2                	xor    edx,edx
c0004834:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004837:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000483b:	89 c8                	mov    eax,ecx
c000483d:	01 f9                	add    ecx,edi
c000483f:	f7 f5                	div    ebp
c0004841:	89 d5                	mov    ebp,edx
c0004843:	31 d2                	xor    edx,edx
c0004845:	45                   	inc    ebp
c0004846:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000484a:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c000484d:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004850:	89 c2                	mov    edx,eax
c0004852:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004855:	c1 ea 02             	shr    edx,0x2
c0004858:	83 e2 c0             	and    edx,0xffffffc0
c000485b:	09 ea                	or     edx,ebp
c000485d:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004862:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004865:	31 d2                	xor    edx,edx
c0004867:	f7 f5                	div    ebp
c0004869:	89 d7                	mov    edi,edx
c000486b:	31 d2                	xor    edx,edx
c000486d:	47                   	inc    edi
c000486e:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004872:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004875:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004878:	89 c5                	mov    ebp,eax
c000487a:	c1 ed 02             	shr    ebp,0x2
c000487d:	83 e5 c0             	and    ebp,0xffffffc0
c0004880:	09 ef                	or     edi,ebp
c0004882:	89 fa                	mov    edx,edi
c0004884:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004887:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000488c:	74 34                	je     c00048c2 <create_partition+0x564>
c000488e:	85 c9                	test   ecx,ecx
c0004890:	74 30                	je     c00048c2 <create_partition+0x564>
c0004892:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004895:	76 2b                	jbe    c00048c2 <create_partition+0x564>
c0004897:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000489b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000489f:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c00048a2:	83 ff 64             	cmp    edi,0x64
c00048a5:	76 4b                	jbe    c00048f2 <create_partition+0x594>
c00048a7:	89 f8                	mov    eax,edi
c00048a9:	01 c8                	add    eax,ecx
c00048ab:	0f 82 5d ff ff ff    	jb     c000480e <create_partition+0x4b0>
c00048b1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048b4:	0f 87 54 ff ff ff    	ja     c000480e <create_partition+0x4b0>
c00048ba:	85 ff                	test   edi,edi
c00048bc:	0f 85 51 ff ff ff    	jne    c0004813 <create_partition+0x4b5>
c00048c2:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00048c8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00048cd:	e8 2e d1 ff ff       	call   c0001a00 <st_word>
c00048d2:	83 ec 0c             	sub    esp,0xc
c00048d5:	6a 01                	push   0x1
c00048d7:	6a 00                	push   0x0
c00048d9:	6a 00                	push   0x0
c00048db:	53                   	push   ebx
c00048dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048e0:	e8 74 d0 ff ff       	call   c0001959 <disk_write>
c00048e5:	83 c4 20             	add    esp,0x20
c00048e8:	85 c0                	test   eax,eax
c00048ea:	0f 95 c0             	setne  al
c00048ed:	0f b6 c0             	movzx  eax,al
c00048f0:	eb 0e                	jmp    c0004900 <create_partition+0x5a2>
c00048f2:	74 07                	je     c00048fb <create_partition+0x59d>
c00048f4:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00048f9:	eb ac                	jmp    c00048a7 <create_partition+0x549>
c00048fb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048fe:	eb a7                	jmp    c00048a7 <create_partition+0x549>
c0004900:	83 c4 5c             	add    esp,0x5c
c0004903:	5b                   	pop    ebx
c0004904:	5e                   	pop    esi
c0004905:	5f                   	pop    edi
c0004906:	5d                   	pop    ebp
c0004907:	c3                   	ret    

c0004908 <get_fileinfo>:
c0004908:	55                   	push   ebp
c0004909:	57                   	push   edi
c000490a:	56                   	push   esi
c000490b:	53                   	push   ebx
c000490c:	83 ec 1c             	sub    esp,0x1c
c000490f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004911:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004915:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004919:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000491c:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c000491f:	0f 84 dc 01 00 00    	je     c0004b01 <get_fileinfo+0x1f9>
c0004925:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004928:	75 0f                	jne    c0004939 <get_fileinfo+0x31>
c000492a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000492d:	83 c4 1c             	add    esp,0x1c
c0004930:	5b                   	pop    ebx
c0004931:	5e                   	pop    esi
c0004932:	5f                   	pop    edi
c0004933:	5d                   	pop    ebp
c0004934:	e9 58 d5 ff ff       	jmp    c0001e91 <get_xfileinfo>
c0004939:	89 d3                	mov    ebx,edx
c000493b:	89 c6                	mov    esi,eax
c000493d:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004941:	74 6a                	je     c00049ad <get_fileinfo+0xa5>
c0004943:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000494b:	31 ed                	xor    ebp,ebp
c000494d:	31 ff                	xor    edi,edi
c000494f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004953:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004957:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000495a:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c000495e:	66 85 d2             	test   dx,dx
c0004961:	74 3e                	je     c00049a1 <get_fileinfo+0x99>
c0004963:	66 85 ed             	test   bp,bp
c0004966:	75 0c                	jne    c0004974 <get_fileinfo+0x6c>
c0004968:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c000496e:	66 3d ff 07          	cmp    ax,0x7ff
c0004972:	76 22                	jbe    c0004996 <get_fileinfo+0x8e>
c0004974:	b9 ff 00 00 00       	mov    ecx,0xff
c0004979:	89 e8                	mov    eax,ebp
c000497b:	29 f9                	sub    ecx,edi
c000497d:	c1 e0 10             	shl    eax,0x10
c0004980:	09 d0                	or     eax,edx
c0004982:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004986:	e8 a3 d1 ff ff       	call   c0001b2e <put_utf>
c000498b:	84 c0                	test   al,al
c000498d:	74 10                	je     c000499f <get_fileinfo+0x97>
c000498f:	0f b6 c0             	movzx  eax,al
c0004992:	31 d2                	xor    edx,edx
c0004994:	01 c7                	add    edi,eax
c0004996:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c000499b:	89 d5                	mov    ebp,edx
c000499d:	eb b0                	jmp    c000494f <get_fileinfo+0x47>
c000499f:	31 ff                	xor    edi,edi
c00049a1:	66 85 ed             	test   bp,bp
c00049a4:	74 02                	je     c00049a8 <get_fileinfo+0xa0>
c00049a6:	31 ff                	xor    edi,edi
c00049a8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00049ad:	31 ff                	xor    edi,edi
c00049af:	31 c9                	xor    ecx,ecx
c00049b1:	83 f9 0a             	cmp    ecx,0xa
c00049b4:	0f 87 ad 00 00 00    	ja     c0004a67 <get_fileinfo+0x15f>
c00049ba:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049bd:	8d 69 01             	lea    ebp,[ecx+0x1]
c00049c0:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c00049c4:	66 83 fa 20          	cmp    dx,0x20
c00049c8:	0f 84 92 00 00 00    	je     c0004a60 <get_fileinfo+0x158>
c00049ce:	66 83 fa 05          	cmp    dx,0x5
c00049d2:	75 05                	jne    c00049d9 <get_fileinfo+0xd1>
c00049d4:	ba e5 00 00 00       	mov    edx,0xe5
c00049d9:	83 ff 0b             	cmp    edi,0xb
c00049dc:	77 0b                	ja     c00049e9 <get_fileinfo+0xe1>
c00049de:	83 fd 09             	cmp    ebp,0x9
c00049e1:	75 06                	jne    c00049e9 <get_fileinfo+0xe1>
c00049e3:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c00049e8:	47                   	inc    edi
c00049e9:	0f b7 c2             	movzx  eax,dx
c00049ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049f0:	e8 6d d0 ff ff       	call   c0001a62 <dbc_1st>
c00049f5:	85 c0                	test   eax,eax
c00049f7:	74 2f                	je     c0004a28 <get_fileinfo+0x120>
c00049f9:	83 fd 08             	cmp    ebp,0x8
c00049fc:	74 2a                	je     c0004a28 <get_fileinfo+0x120>
c00049fe:	83 fd 0b             	cmp    ebp,0xb
c0004a01:	74 25                	je     c0004a28 <get_fileinfo+0x120>
c0004a03:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a06:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a0a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a0e:	e8 52 d0 ff ff       	call   c0001a65 <dbc_2nd>
c0004a13:	85 c0                	test   eax,eax
c0004a15:	74 11                	je     c0004a28 <get_fileinfo+0x120>
c0004a17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a1b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a20:	c1 e2 08             	shl    edx,0x8
c0004a23:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a26:	09 c2                	or     edx,eax
c0004a28:	0f b7 d2             	movzx  edx,dx
c0004a2b:	50                   	push   eax
c0004a2c:	50                   	push   eax
c0004a2d:	68 b5 01 00 00       	push   0x1b5
c0004a32:	52                   	push   edx
c0004a33:	e8 46 38 00 00       	call   c000827e <ff_oem2uni>
c0004a38:	83 c4 10             	add    esp,0x10
c0004a3b:	66 85 c0             	test   ax,ax
c0004a3e:	75 04                	jne    c0004a44 <get_fileinfo+0x13c>
c0004a40:	31 ff                	xor    edi,edi
c0004a42:	eb 23                	jmp    c0004a67 <get_fileinfo+0x15f>
c0004a44:	b9 0c 00 00 00       	mov    ecx,0xc
c0004a49:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004a4d:	29 f9                	sub    ecx,edi
c0004a4f:	0f b7 c0             	movzx  eax,ax
c0004a52:	e8 d7 d0 ff ff       	call   c0001b2e <put_utf>
c0004a57:	84 c0                	test   al,al
c0004a59:	74 e5                	je     c0004a40 <get_fileinfo+0x138>
c0004a5b:	0f b6 c0             	movzx  eax,al
c0004a5e:	01 c7                	add    edi,eax
c0004a60:	89 e9                	mov    ecx,ebp
c0004a62:	e9 4a ff ff ff       	jmp    c00049b1 <get_fileinfo+0xa9>
c0004a67:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004a6c:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004a70:	75 54                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004a72:	85 ff                	test   edi,edi
c0004a74:	75 0b                	jne    c0004a81 <get_fileinfo+0x179>
c0004a76:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004a7a:	ba 01 00 00 00       	mov    edx,0x1
c0004a7f:	eb 33                	jmp    c0004ab4 <get_fileinfo+0x1ac>
c0004a81:	b1 08                	mov    cl,0x8
c0004a83:	31 d2                	xor    edx,edx
c0004a85:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004a8b:	84 c0                	test   al,al
c0004a8d:	74 25                	je     c0004ab4 <get_fileinfo+0x1ac>
c0004a8f:	66 83 f8 2e          	cmp    ax,0x2e
c0004a93:	74 16                	je     c0004aab <get_fileinfo+0x1a3>
c0004a95:	8d 78 bf             	lea    edi,[eax-0x41]
c0004a98:	66 83 ff 19          	cmp    di,0x19
c0004a9c:	77 0f                	ja     c0004aad <get_fileinfo+0x1a5>
c0004a9e:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004aa1:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004aa4:	74 07                	je     c0004aad <get_fileinfo+0x1a5>
c0004aa6:	83 c0 20             	add    eax,0x20
c0004aa9:	eb 02                	jmp    c0004aad <get_fileinfo+0x1a5>
c0004aab:	b1 10                	mov    cl,0x10
c0004aad:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004ab1:	42                   	inc    edx
c0004ab2:	eb d1                	jmp    c0004a85 <get_fileinfo+0x17d>
c0004ab4:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004ab9:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004abc:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004ac0:	75 04                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004ac2:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ac6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac9:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004acc:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004acf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ad2:	83 c0 1c             	add    eax,0x1c
c0004ad5:	e8 c1 ce ff ff       	call   c000199b <ld_dword>
c0004ada:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ae1:	89 03                	mov    DWORD PTR [ebx],eax
c0004ae3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ae6:	83 c0 16             	add    eax,0x16
c0004ae9:	e8 a0 ce ff ff       	call   c000198e <ld_word>
c0004aee:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004af2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004af5:	83 c0 18             	add    eax,0x18
c0004af8:	e8 91 ce ff ff       	call   c000198e <ld_word>
c0004afd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b01:	83 c4 1c             	add    esp,0x1c
c0004b04:	5b                   	pop    ebx
c0004b05:	5e                   	pop    esi
c0004b06:	5f                   	pop    edi
c0004b07:	5d                   	pop    ebp
c0004b08:	c3                   	ret    

c0004b09 <ld_clust.isra.0>:
c0004b09:	56                   	push   esi
c0004b0a:	89 c6                	mov    esi,eax
c0004b0c:	53                   	push   ebx
c0004b0d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b10:	89 d3                	mov    ebx,edx
c0004b12:	e8 77 ce ff ff       	call   c000198e <ld_word>
c0004b17:	0f b7 c8             	movzx  ecx,ax
c0004b1a:	89 f0                	mov    eax,esi
c0004b1c:	3c 03                	cmp    al,0x3
c0004b1e:	75 0d                	jne    c0004b2d <ld_clust.isra.0+0x24>
c0004b20:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b23:	e8 66 ce ff ff       	call   c000198e <ld_word>
c0004b28:	c1 e0 10             	shl    eax,0x10
c0004b2b:	09 c1                	or     ecx,eax
c0004b2d:	89 c8                	mov    eax,ecx
c0004b2f:	5b                   	pop    ebx
c0004b30:	5e                   	pop    esi
c0004b31:	c3                   	ret    

c0004b32 <st_clust.isra.1>:
c0004b32:	56                   	push   esi
c0004b33:	89 c6                	mov    esi,eax
c0004b35:	53                   	push   ebx
c0004b36:	89 d3                	mov    ebx,edx
c0004b38:	0f b7 d1             	movzx  edx,cx
c0004b3b:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004b3e:	e8 bd ce ff ff       	call   c0001a00 <st_word>
c0004b43:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004b46:	75 0f                	jne    c0004b57 <st_clust.isra.1+0x25>
c0004b48:	c1 e9 10             	shr    ecx,0x10
c0004b4b:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b4e:	89 ca                	mov    edx,ecx
c0004b50:	5b                   	pop    ebx
c0004b51:	5e                   	pop    esi
c0004b52:	e9 a9 ce ff ff       	jmp    c0001a00 <st_word>
c0004b57:	5b                   	pop    ebx
c0004b58:	5e                   	pop    esi
c0004b59:	c3                   	ret    

c0004b5a <init_alloc_info.isra.2>:
c0004b5a:	56                   	push   esi
c0004b5b:	53                   	push   ebx
c0004b5c:	89 c6                	mov    esi,eax
c0004b5e:	89 d3                	mov    ebx,edx
c0004b60:	51                   	push   ecx
c0004b61:	8b 00                	mov    eax,DWORD PTR [eax]
c0004b63:	83 c0 34             	add    eax,0x34
c0004b66:	e8 30 ce ff ff       	call   c000199b <ld_dword>
c0004b6b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004b6e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b70:	83 c0 38             	add    eax,0x38
c0004b73:	e8 3b ce ff ff       	call   c00019b3 <ld_qword>
c0004b78:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004b7b:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004b7e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b80:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004b83:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004b8a:	83 e0 02             	and    eax,0x2
c0004b8d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004b90:	5b                   	pop    ebx
c0004b91:	5b                   	pop    ebx
c0004b92:	5e                   	pop    esi
c0004b93:	c3                   	ret    

c0004b94 <follow_path>:
c0004b94:	56                   	push   esi
c0004b95:	53                   	push   ebx
c0004b96:	89 c3                	mov    ebx,eax
c0004b98:	83 ec 14             	sub    esp,0x14
c0004b9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004b9f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ba1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ba5:	8a 10                	mov    dl,BYTE PTR [eax]
c0004ba7:	80 fa 5c             	cmp    dl,0x5c
c0004baa:	75 07                	jne    c0004bb3 <follow_path+0x1f>
c0004bac:	40                   	inc    eax
c0004bad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bb1:	eb ee                	jmp    c0004ba1 <follow_path+0xd>
c0004bb3:	80 fa 2f             	cmp    dl,0x2f
c0004bb6:	74 f4                	je     c0004bac <follow_path+0x18>
c0004bb8:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004bbf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bc6:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004bc9:	77 52                	ja     c0004c1d <follow_path+0x89>
c0004bcb:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004bcf:	31 d2                	xor    edx,edx
c0004bd1:	89 d8                	mov    eax,ebx
c0004bd3:	e8 12 e3 ff ff       	call   c0002eea <dir_sdi>
c0004bd8:	eb 7c                	jmp    c0004c56 <follow_path+0xc2>
c0004bda:	89 d8                	mov    eax,ebx
c0004bdc:	e8 6e f2 ff ff       	call   c0003e4f <dir_find>
c0004be1:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004be4:	85 c0                	test   eax,eax
c0004be6:	75 46                	jne    c0004c2e <follow_path+0x9a>
c0004be8:	80 e2 04             	and    dl,0x4
c0004beb:	75 69                	jne    c0004c56 <follow_path+0xc2>
c0004bed:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004bf1:	74 5e                	je     c0004c51 <follow_path+0xbd>
c0004bf3:	8a 06                	mov    al,BYTE PTR [esi]
c0004bf5:	3c 04                	cmp    al,0x4
c0004bf7:	75 41                	jne    c0004c3a <follow_path+0xa6>
c0004bf9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004bfc:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c00:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c03:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c06:	30 c0                	xor    al,al
c0004c08:	09 d0                	or     eax,edx
c0004c0a:	89 da                	mov    edx,ebx
c0004c0c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c0f:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c12:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c15:	8d 46 10             	lea    eax,[esi+0x10]
c0004c18:	e8 3d ff ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004c1d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c21:	89 d8                	mov    eax,ebx
c0004c23:	e8 a9 ed ff ff       	call   c00039d1 <create_name>
c0004c28:	85 c0                	test   eax,eax
c0004c2a:	74 ae                	je     c0004bda <follow_path+0x46>
c0004c2c:	eb 28                	jmp    c0004c56 <follow_path+0xc2>
c0004c2e:	83 f8 04             	cmp    eax,0x4
c0004c31:	75 23                	jne    c0004c56 <follow_path+0xc2>
c0004c33:	80 e2 04             	and    dl,0x4
c0004c36:	74 19                	je     c0004c51 <follow_path+0xbd>
c0004c38:	eb 1c                	jmp    c0004c56 <follow_path+0xc2>
c0004c3a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004c3d:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004c43:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004c47:	e8 bd fe ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004c4c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c4f:	eb cc                	jmp    c0004c1d <follow_path+0x89>
c0004c51:	b8 05 00 00 00       	mov    eax,0x5
c0004c56:	83 c4 14             	add    esp,0x14
c0004c59:	5b                   	pop    ebx
c0004c5a:	5e                   	pop    esi
c0004c5b:	c3                   	ret    

c0004c5c <f_mount>:
c0004c5c:	53                   	push   ebx
c0004c5d:	83 ec 18             	sub    esp,0x18
c0004c60:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004c64:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004c68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004c70:	e8 fb d2 ff ff       	call   c0001f70 <get_ldnumber>
c0004c75:	89 c2                	mov    edx,eax
c0004c77:	b8 0b 00 00 00       	mov    eax,0xb
c0004c7c:	85 d2                	test   edx,edx
c0004c7e:	78 39                	js     c0004cb9 <f_mount+0x5d>
c0004c80:	8b 04 95 a0 b6 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc4960]
c0004c87:	85 c0                	test   eax,eax
c0004c89:	74 03                	je     c0004c8e <f_mount+0x32>
c0004c8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c92:	85 c0                	test   eax,eax
c0004c94:	74 03                	je     c0004c99 <f_mount+0x3d>
c0004c96:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c9d:	89 04 95 a0 b6 03 c0 	mov    DWORD PTR [edx*4-0x3ffc4960],eax
c0004ca4:	31 c0                	xor    eax,eax
c0004ca6:	84 db                	test   bl,bl
c0004ca8:	74 0f                	je     c0004cb9 <f_mount+0x5d>
c0004caa:	31 c9                	xor    ecx,ecx
c0004cac:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004cb0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004cb4:	e8 65 d7 ff ff       	call   c000241e <mount_volume>
c0004cb9:	83 c4 18             	add    esp,0x18
c0004cbc:	5b                   	pop    ebx
c0004cbd:	c3                   	ret    

c0004cbe <f_open>:
c0004cbe:	55                   	push   ebp
c0004cbf:	bd 09 00 00 00       	mov    ebp,0x9
c0004cc4:	57                   	push   edi
c0004cc5:	56                   	push   esi
c0004cc6:	53                   	push   ebx
c0004cc7:	83 ec 7c             	sub    esp,0x7c
c0004cca:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004cd1:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004cd8:	85 db                	test   ebx,ebx
c0004cda:	0f 84 10 04 00 00    	je     c00050f0 <f_open+0x432>
c0004ce0:	89 fe                	mov    esi,edi
c0004ce2:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004ce6:	83 e6 3f             	and    esi,0x3f
c0004ce9:	89 f0                	mov    eax,esi
c0004ceb:	0f b6 c8             	movzx  ecx,al
c0004cee:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004cf5:	e8 24 d7 ff ff       	call   c000241e <mount_volume>
c0004cfa:	89 c5                	mov    ebp,eax
c0004cfc:	85 c0                	test   eax,eax
c0004cfe:	0f 85 e6 03 00 00    	jne    c00050ea <f_open+0x42c>
c0004d04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d08:	bd 11 00 00 00       	mov    ebp,0x11
c0004d0d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	68 60 04 00 00       	push   0x460
c0004d19:	e8 a3 34 00 00       	call   c00081c1 <ff_memalloc>
c0004d1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d2a:	0f 84 c0 03 00 00    	je     c00050f0 <f_open+0x432>
c0004d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004d38:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004d3e:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004d41:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004d44:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004d4b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d4f:	e8 40 fe ff ff       	call   c0004b94 <follow_path>
c0004d54:	89 c5                	mov    ebp,eax
c0004d56:	85 c0                	test   eax,eax
c0004d58:	75 0c                	jne    c0004d66 <f_open+0xa8>
c0004d5a:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004d5f:	79 05                	jns    c0004d66 <f_open+0xa8>
c0004d61:	bd 06 00 00 00       	mov    ebp,0x6
c0004d66:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004d6c:	0f 84 84 01 00 00    	je     c0004ef6 <f_open+0x238>
c0004d72:	85 ed                	test   ebp,ebp
c0004d74:	74 20                	je     c0004d96 <f_open+0xd8>
c0004d76:	83 fd 04             	cmp    ebp,0x4
c0004d79:	0f 85 58 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004d7f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d83:	83 ce 08             	or     esi,0x8
c0004d86:	e8 8a f2 ff ff       	call   c0004015 <dir_register>
c0004d8b:	89 c5                	mov    ebp,eax
c0004d8d:	85 c0                	test   eax,eax
c0004d8f:	74 2f                	je     c0004dc0 <f_open+0x102>
c0004d91:	e9 41 03 00 00       	jmp    c00050d7 <f_open+0x419>
c0004d96:	bd 07 00 00 00       	mov    ebp,0x7
c0004d9b:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004da0:	0f 85 31 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004da6:	bd 08 00 00 00       	mov    ebp,0x8
c0004dab:	f7 c7 04 00 00 00    	test   edi,0x4
c0004db1:	0f 85 20 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004db7:	83 e7 08             	and    edi,0x8
c0004dba:	0f 84 65 01 00 00    	je     c0004f25 <f_open+0x267>
c0004dc0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004dc4:	8a 02                	mov    al,BYTE PTR [edx]
c0004dc6:	3c 04                	cmp    al,0x4
c0004dc8:	0f 85 97 00 00 00    	jne    c0004e65 <f_open+0x1a7>
c0004dce:	8d 42 10             	lea    eax,[edx+0x10]
c0004dd1:	89 13                	mov    DWORD PTR [ebx],edx
c0004dd3:	89 da                	mov    edx,ebx
c0004dd5:	e8 80 fd ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004dda:	31 d2                	xor    edx,edx
c0004ddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004de0:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004de5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004de8:	83 c0 02             	add    eax,0x2
c0004deb:	e8 32 cc ff ff       	call   c0001a22 <mem_set>
c0004df0:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004df5:	31 d2                	xor    edx,edx
c0004df7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dfb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004dfe:	83 c0 26             	add    eax,0x26
c0004e01:	e8 1c cc ff ff       	call   c0001a22 <mem_set>
c0004e06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e0a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e0d:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e11:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e16:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e19:	83 c0 08             	add    eax,0x8
c0004e1c:	e8 e3 cb ff ff       	call   c0001a04 <st_dword>
c0004e21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e25:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e28:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004e2c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e30:	e8 b7 ea ff ff       	call   c00038ec <store_xdir>
c0004e35:	89 c5                	mov    ebp,eax
c0004e37:	85 c0                	test   eax,eax
c0004e39:	0f 85 98 02 00 00    	jne    c00050d7 <f_open+0x419>
c0004e3f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004e42:	85 d2                	test   edx,edx
c0004e44:	0f 84 db 00 00 00    	je     c0004f25 <f_open+0x267>
c0004e4a:	31 c9                	xor    ecx,ecx
c0004e4c:	89 d8                	mov    eax,ebx
c0004e4e:	e8 8e e3 ff ff       	call   c00031e1 <remove_chain>
c0004e53:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e57:	89 c5                	mov    ebp,eax
c0004e59:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e5c:	48                   	dec    eax
c0004e5d:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004e60:	e9 b8 00 00 00       	jmp    c0004f1d <f_open+0x25f>
c0004e65:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004e69:	89 ea                	mov    edx,ebp
c0004e6b:	e8 99 fc ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004e70:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e75:	89 c7                	mov    edi,eax
c0004e77:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004e7a:	e8 85 cb ff ff       	call   c0001a04 <st_dword>
c0004e7f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e83:	31 c9                	xor    ecx,ecx
c0004e85:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004e91:	e8 9c fc ff ff       	call   c0004b32 <st_clust.isra.1>
c0004e96:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e9a:	31 d2                	xor    edx,edx
c0004e9c:	83 c0 1c             	add    eax,0x1c
c0004e9f:	e8 60 cb ff ff       	call   c0001a04 <st_dword>
c0004ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea8:	85 ff                	test   edi,edi
c0004eaa:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004eae:	74 75                	je     c0004f25 <f_open+0x267>
c0004eb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb4:	31 c9                	xor    ecx,ecx
c0004eb6:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004eb9:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ec0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ec4:	89 fa                	mov    edx,edi
c0004ec6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eca:	e8 12 e3 ff ff       	call   c00031e1 <remove_chain>
c0004ecf:	89 c5                	mov    ebp,eax
c0004ed1:	85 c0                	test   eax,eax
c0004ed3:	0f 85 fe 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004ed9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004edd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee5:	4f                   	dec    edi
c0004ee6:	e8 81 d2 ff ff       	call   c000216c <move_window>
c0004eeb:	89 c5                	mov    ebp,eax
c0004eed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ef1:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004ef4:	eb 27                	jmp    c0004f1d <f_open+0x25f>
c0004ef6:	85 ed                	test   ebp,ebp
c0004ef8:	0f 85 d9 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004efe:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f02:	bd 04 00 00 00       	mov    ebp,0x4
c0004f07:	a8 10                	test   al,0x10
c0004f09:	0f 85 c8 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f0f:	83 e7 02             	and    edi,0x2
c0004f12:	74 11                	je     c0004f25 <f_open+0x267>
c0004f14:	bd 07 00 00 00       	mov    ebp,0x7
c0004f19:	a8 01                	test   al,0x1
c0004f1b:	eb 02                	jmp    c0004f1f <f_open+0x261>
c0004f1d:	85 ed                	test   ebp,ebp
c0004f1f:	0f 85 b2 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f25:	f7 c6 08 00 00 00    	test   esi,0x8
c0004f2b:	74 03                	je     c0004f30 <f_open+0x272>
c0004f2d:	83 ce 40             	or     esi,0x40
c0004f30:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f34:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004f37:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004f3a:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004f3d:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004f40:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004f44:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004f47:	8a 02                	mov    al,BYTE PTR [edx]
c0004f49:	3c 04                	cmp    al,0x4
c0004f4b:	75 2a                	jne    c0004f77 <f_open+0x2b9>
c0004f4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004f51:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004f56:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004f59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004f5d:	30 c0                	xor    al,al
c0004f5f:	09 c8                	or     eax,ecx
c0004f61:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f64:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004f68:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f6b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f6e:	89 da                	mov    edx,ebx
c0004f70:	e8 e5 fb ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004f75:	eb 1c                	jmp    c0004f93 <f_open+0x2d5>
c0004f77:	89 fa                	mov    edx,edi
c0004f79:	e8 8b fb ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004f7e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f81:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004f84:	e8 12 ca ff ff       	call   c000199b <ld_dword>
c0004f89:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0004f90:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004f93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f97:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0004f9e:	89 03                	mov    DWORD PTR [ebx],eax
c0004fa0:	31 d2                	xor    edx,edx
c0004fa2:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004fa6:	b9 00 02 00 00       	mov    ecx,0x200
c0004fab:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004faf:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0004fb3:	89 f0                	mov    eax,esi
c0004fb5:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0004fbc:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0004fbf:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0004fc6:	8d 43 50             	lea    eax,[ebx+0x50]
c0004fc9:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0004fd0:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0004fd7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004fdb:	e8 42 ca ff ff       	call   c0001a22 <mem_set>
c0004fe0:	83 e6 20             	and    esi,0x20
c0004fe3:	75 07                	jne    c0004fec <f_open+0x32e>
c0004fe5:	31 ed                	xor    ebp,ebp
c0004fe7:	e9 eb 00 00 00       	jmp    c00050d7 <f_open+0x419>
c0004fec:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004fef:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0004ff2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ff6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ffa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ffe:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005002:	74 e1                	je     c0004fe5 <f_open+0x327>
c0005004:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005008:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000500c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000500f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005012:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005016:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005019:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000501d:	31 ff                	xor    edi,edi
c000501f:	c1 e5 09             	shl    ebp,0x9
c0005022:	89 ee                	mov    esi,ebp
c0005024:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005028:	89 f8                	mov    eax,edi
c000502a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000502e:	73 22                	jae    c0005052 <f_open+0x394>
c0005030:	89 d8                	mov    eax,ebx
c0005032:	e8 bd dc ff ff       	call   c0002cf4 <get_fat>
c0005037:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000503b:	89 c2                	mov    edx,eax
c000503d:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005041:	83 f8 01             	cmp    eax,0x1
c0005044:	76 10                	jbe    c0005056 <f_open+0x398>
c0005046:	83 f8 ff             	cmp    eax,0xffffffff
c0005049:	75 d9                	jne    c0005024 <f_open+0x366>
c000504b:	bd 01 00 00 00       	mov    ebp,0x1
c0005050:	eb 09                	jmp    c000505b <f_open+0x39d>
c0005052:	31 ed                	xor    ebp,ebp
c0005054:	eb 05                	jmp    c000505b <f_open+0x39d>
c0005056:	bd 02 00 00 00       	mov    ebp,0x2
c000505b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000505e:	85 ed                	test   ebp,ebp
c0005060:	75 75                	jne    c00050d7 <f_open+0x419>
c0005062:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005066:	25 ff 01 00 00       	and    eax,0x1ff
c000506b:	0f 84 74 ff ff ff    	je     c0004fe5 <f_open+0x327>
c0005071:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005075:	bd 02 00 00 00       	mov    ebp,0x2
c000507a:	89 c8                	mov    eax,ecx
c000507c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005080:	e8 a2 cb ff ff       	call   c0001c27 <clst2sect>
c0005085:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005089:	89 d7                	mov    edi,edx
c000508b:	09 c7                	or     edi,eax
c000508d:	74 48                	je     c00050d7 <f_open+0x419>
c000508f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005093:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005097:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000509f:	0f ac fe 09          	shrd   esi,edi,0x9
c00050a3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00050a7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00050ab:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00050ae:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00050b2:	83 ec 0c             	sub    esp,0xc
c00050b5:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00050b8:	6a 01                	push   0x1
c00050ba:	52                   	push   edx
c00050bb:	50                   	push   eax
c00050bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00050c0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00050c4:	50                   	push   eax
c00050c5:	e8 79 c8 ff ff       	call   c0001943 <disk_read>
c00050ca:	83 c4 20             	add    esp,0x20
c00050cd:	85 c0                	test   eax,eax
c00050cf:	0f 95 c0             	setne  al
c00050d2:	0f b6 c0             	movzx  eax,al
c00050d5:	89 c5                	mov    ebp,eax
c00050d7:	83 ec 0c             	sub    esp,0xc
c00050da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00050de:	e8 f4 30 00 00       	call   c00081d7 <ff_memfree>
c00050e3:	83 c4 10             	add    esp,0x10
c00050e6:	85 ed                	test   ebp,ebp
c00050e8:	74 06                	je     c00050f0 <f_open+0x432>
c00050ea:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00050f0:	83 c4 7c             	add    esp,0x7c
c00050f3:	89 e8                	mov    eax,ebp
c00050f5:	5b                   	pop    ebx
c00050f6:	5e                   	pop    esi
c00050f7:	5f                   	pop    edi
c00050f8:	5d                   	pop    ebp
c00050f9:	c3                   	ret    

c00050fa <f_read>:
c00050fa:	55                   	push   ebp
c00050fb:	57                   	push   edi
c00050fc:	56                   	push   esi
c00050fd:	53                   	push   ebx
c00050fe:	83 ec 2c             	sub    esp,0x2c
c0005101:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005105:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005109:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000510f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005113:	89 d8                	mov    eax,ebx
c0005115:	e8 77 cf ff ff       	call   c0002091 <validate>
c000511a:	89 c5                	mov    ebp,eax
c000511c:	85 c0                	test   eax,eax
c000511e:	0f 85 4c 02 00 00    	jne    c0005370 <f_read+0x276>
c0005124:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005128:	85 ed                	test   ebp,ebp
c000512a:	0f 85 40 02 00 00    	jne    c0005370 <f_read+0x276>
c0005130:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005134:	0f 84 31 02 00 00    	je     c000536b <f_read+0x271>
c000513a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000513d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005140:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005143:	bf 00 00 00 00       	mov    edi,0x0
c0005148:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000514b:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000514f:	89 d1                	mov    ecx,edx
c0005151:	19 f9                	sbb    ecx,edi
c0005153:	0f 83 cf 00 00 00    	jae    c0005228 <f_read+0x12e>
c0005159:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000515d:	e9 c6 00 00 00       	jmp    c0005228 <f_read+0x12e>
c0005162:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005165:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005168:	89 d0                	mov    eax,edx
c000516a:	25 ff 01 00 00       	and    eax,0x1ff
c000516f:	0f 85 c9 01 00 00    	jne    c000533e <f_read+0x244>
c0005175:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005179:	89 d6                	mov    esi,edx
c000517b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000517f:	89 cf                	mov    edi,ecx
c0005181:	48                   	dec    eax
c0005182:	0f ac fe 09          	shrd   esi,edi,0x9
c0005186:	21 f0                	and    eax,esi
c0005188:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000518c:	0f 84 a6 00 00 00    	je     c0005238 <f_read+0x13e>
c0005192:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005196:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005199:	89 c8                	mov    eax,ecx
c000519b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000519e:	e8 84 ca ff ff       	call   c0001c27 <clst2sect>
c00051a3:	89 d7                	mov    edi,edx
c00051a5:	09 c7                	or     edi,eax
c00051a7:	0f 84 b4 00 00 00    	je     c0005261 <f_read+0x167>
c00051ad:	31 ff                	xor    edi,edi
c00051af:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00051b3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00051b6:	01 c6                	add    esi,eax
c00051b8:	11 d7                	adc    edi,edx
c00051ba:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00051c2:	0f 86 fd 00 00 00    	jbe    c00052c5 <f_read+0x1cb>
c00051c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00051cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d0:	c1 e8 09             	shr    eax,0x9
c00051d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00051d6:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00051da:	03 14 24             	add    edx,DWORD PTR [esp]
c00051dd:	39 c2                	cmp    edx,eax
c00051df:	76 07                	jbe    c00051e8 <f_read+0xee>
c00051e1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00051e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00051e8:	83 ec 0c             	sub    esp,0xc
c00051eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00051ef:	57                   	push   edi
c00051f0:	56                   	push   esi
c00051f1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00051f5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00051f9:	50                   	push   eax
c00051fa:	e8 44 c7 ff ff       	call   c0001943 <disk_read>
c00051ff:	83 c4 20             	add    esp,0x20
c0005202:	85 c0                	test   eax,eax
c0005204:	75 6e                	jne    c0005274 <f_read+0x17a>
c0005206:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000520a:	78 7e                	js     c000528a <f_read+0x190>
c000520c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000520f:	c1 e6 09             	shl    esi,0x9
c0005212:	31 ff                	xor    edi,edi
c0005214:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005218:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000521c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005220:	01 30                	add    DWORD PTR [eax],esi
c0005222:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005225:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005228:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000522d:	0f 85 2f ff ff ff    	jne    c0005162 <f_read+0x68>
c0005233:	e9 38 01 00 00       	jmp    c0005370 <f_read+0x276>
c0005238:	89 c8                	mov    eax,ecx
c000523a:	09 d0                	or     eax,edx
c000523c:	75 05                	jne    c0005243 <f_read+0x149>
c000523e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005241:	eb 19                	jmp    c000525c <f_read+0x162>
c0005243:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005247:	74 09                	je     c0005252 <f_read+0x158>
c0005249:	89 d8                	mov    eax,ebx
c000524b:	e8 f8 c9 ff ff       	call   c0001c48 <clmt_clust>
c0005250:	eb 0a                	jmp    c000525c <f_read+0x162>
c0005252:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005255:	89 d8                	mov    eax,ebx
c0005257:	e8 98 da ff ff       	call   c0002cf4 <get_fat>
c000525c:	83 f8 01             	cmp    eax,0x1
c000525f:	77 0e                	ja     c000526f <f_read+0x175>
c0005261:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005265:	bd 02 00 00 00       	mov    ebp,0x2
c000526a:	e9 01 01 00 00       	jmp    c0005370 <f_read+0x276>
c000526f:	83 f8 ff             	cmp    eax,0xffffffff
c0005272:	75 0e                	jne    c0005282 <f_read+0x188>
c0005274:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005278:	bd 01 00 00 00       	mov    ebp,0x1
c000527d:	e9 ee 00 00 00       	jmp    c0005370 <f_read+0x276>
c0005282:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005285:	e9 08 ff ff ff       	jmp    c0005192 <f_read+0x98>
c000528a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000528d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005290:	29 f0                	sub    eax,esi
c0005292:	19 fa                	sbb    edx,edi
c0005294:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005297:	89 d7                	mov    edi,edx
c0005299:	ba 00 00 00 00       	mov    edx,0x0
c000529e:	89 f9                	mov    ecx,edi
c00052a0:	19 d1                	sbb    ecx,edx
c00052a2:	0f 83 64 ff ff ff    	jae    c000520c <f_read+0x112>
c00052a8:	89 c7                	mov    edi,eax
c00052aa:	8d 53 50             	lea    edx,[ebx+0x50]
c00052ad:	c1 e7 09             	shl    edi,0x9
c00052b0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00052b4:	b9 00 02 00 00       	mov    ecx,0x200
c00052b9:	01 f8                	add    eax,edi
c00052bb:	e8 4d c7 ff ff       	call   c0001a0d <mem_cpy>
c00052c0:	e9 47 ff ff ff       	jmp    c000520c <f_read+0x112>
c00052c5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00052c8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00052cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00052ce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00052d2:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00052d6:	75 05                	jne    c00052dd <f_read+0x1e3>
c00052d8:	39 34 24             	cmp    DWORD PTR [esp],esi
c00052db:	74 5b                	je     c0005338 <f_read+0x23e>
c00052dd:	8d 43 50             	lea    eax,[ebx+0x50]
c00052e0:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00052e8:	79 2a                	jns    c0005314 <f_read+0x21a>
c00052ea:	83 ec 0c             	sub    esp,0xc
c00052ed:	6a 01                	push   0x1
c00052ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00052fb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052ff:	50                   	push   eax
c0005300:	e8 54 c6 ff ff       	call   c0001959 <disk_write>
c0005305:	83 c4 20             	add    esp,0x20
c0005308:	85 c0                	test   eax,eax
c000530a:	0f 85 64 ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005310:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005314:	83 ec 0c             	sub    esp,0xc
c0005317:	6a 01                	push   0x1
c0005319:	57                   	push   edi
c000531a:	56                   	push   esi
c000531b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000531f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005323:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005327:	50                   	push   eax
c0005328:	e8 16 c6 ff ff       	call   c0001943 <disk_read>
c000532d:	83 c4 20             	add    esp,0x20
c0005330:	85 c0                	test   eax,eax
c0005332:	0f 85 3c ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005338:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000533b:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000533e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005341:	ba 00 02 00 00       	mov    edx,0x200
c0005346:	25 ff 01 00 00       	and    eax,0x1ff
c000534b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000534f:	29 c2                	sub    edx,eax
c0005351:	39 d6                	cmp    esi,edx
c0005353:	76 02                	jbe    c0005357 <f_read+0x25d>
c0005355:	89 d6                	mov    esi,edx
c0005357:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000535b:	89 f1                	mov    ecx,esi
c000535d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005361:	e8 a7 c6 ff ff       	call   c0001a0d <mem_cpy>
c0005366:	e9 a7 fe ff ff       	jmp    c0005212 <f_read+0x118>
c000536b:	bd 07 00 00 00       	mov    ebp,0x7
c0005370:	83 c4 2c             	add    esp,0x2c
c0005373:	89 e8                	mov    eax,ebp
c0005375:	5b                   	pop    ebx
c0005376:	5e                   	pop    esi
c0005377:	5f                   	pop    edi
c0005378:	5d                   	pop    ebp
c0005379:	c3                   	ret    

c000537a <f_write>:
c000537a:	55                   	push   ebp
c000537b:	57                   	push   edi
c000537c:	56                   	push   esi
c000537d:	53                   	push   ebx
c000537e:	83 ec 2c             	sub    esp,0x2c
c0005381:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005385:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005389:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000538f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005393:	89 d8                	mov    eax,ebx
c0005395:	e8 f7 cc ff ff       	call   c0002091 <validate>
c000539a:	89 c5                	mov    ebp,eax
c000539c:	85 c0                	test   eax,eax
c000539e:	0f 85 86 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053a4:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053a8:	85 ed                	test   ebp,ebp
c00053aa:	0f 85 7a 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053b0:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00053b4:	0f 84 6b 02 00 00    	je     c0005625 <f_write+0x2ab>
c00053ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053be:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00053c1:	0f 84 43 01 00 00    	je     c000550a <f_write+0x190>
c00053c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053ca:	89 c1                	mov    ecx,eax
c00053cc:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00053d0:	0f 83 34 01 00 00    	jae    c000550a <f_write+0x190>
c00053d6:	f7 d0                	not    eax
c00053d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053dc:	e9 29 01 00 00       	jmp    c000550a <f_write+0x190>
c00053e1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053e4:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00053e7:	89 d0                	mov    eax,edx
c00053e9:	25 ff 01 00 00       	and    eax,0x1ff
c00053ee:	0f 85 00 02 00 00    	jne    c00055f4 <f_write+0x27a>
c00053f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053f8:	89 d6                	mov    esi,edx
c00053fa:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00053fe:	89 cf                	mov    edi,ecx
c0005400:	48                   	dec    eax
c0005401:	0f ac fe 09          	shrd   esi,edi,0x9
c0005405:	21 f0                	and    eax,esi
c0005407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000540b:	0f 84 06 01 00 00    	je     c0005517 <f_write+0x19d>
c0005411:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005415:	0f 88 6e 01 00 00    	js     c0005589 <f_write+0x20f>
c000541b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 c8                	mov    eax,ecx
c0005424:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005428:	e8 fa c7 ff ff       	call   c0001c27 <clst2sect>
c000542d:	89 d1                	mov    ecx,edx
c000542f:	09 c1                	or     ecx,eax
c0005431:	0f 84 1c 01 00 00    	je     c0005553 <f_write+0x1d9>
c0005437:	31 ff                	xor    edi,edi
c0005439:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000543d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005441:	01 c6                	add    esi,eax
c0005443:	11 d7                	adc    edi,edx
c0005445:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000544d:	0f 86 63 01 00 00    	jbe    c00055b6 <f_write+0x23c>
c0005453:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000545b:	c1 e8 09             	shr    eax,0x9
c000545e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005462:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005466:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000546a:	39 c2                	cmp    edx,eax
c000546c:	76 08                	jbe    c0005476 <f_write+0xfc>
c000546e:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005472:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005476:	83 ec 0c             	sub    esp,0xc
c0005479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000547d:	57                   	push   edi
c000547e:	56                   	push   esi
c000547f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005483:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005487:	50                   	push   eax
c0005488:	e8 cc c4 ff ff       	call   c0001959 <disk_write>
c000548d:	83 c4 20             	add    esp,0x20
c0005490:	85 c0                	test   eax,eax
c0005492:	0f 85 ce 00 00 00    	jne    c0005566 <f_write+0x1ec>
c0005498:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000549b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000549e:	29 f0                	sub    eax,esi
c00054a0:	19 fa                	sbb    edx,edi
c00054a2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00054a6:	89 d7                	mov    edi,edx
c00054a8:	ba 00 00 00 00       	mov    edx,0x0
c00054ad:	89 f9                	mov    ecx,edi
c00054af:	19 d1                	sbb    ecx,edx
c00054b1:	73 1c                	jae    c00054cf <f_write+0x155>
c00054b3:	89 c7                	mov    edi,eax
c00054b5:	b9 00 02 00 00       	mov    ecx,0x200
c00054ba:	c1 e7 09             	shl    edi,0x9
c00054bd:	8d 43 50             	lea    eax,[ebx+0x50]
c00054c0:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00054c4:	89 fa                	mov    edx,edi
c00054c6:	e8 42 c5 ff ff       	call   c0001a0d <mem_cpy>
c00054cb:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054cf:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00054d3:	c1 e6 09             	shl    esi,0x9
c00054d6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054da:	31 ff                	xor    edi,edi
c00054dc:	01 30                	add    DWORD PTR [eax],esi
c00054de:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054e2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054e6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00054e9:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00054ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00054ef:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00054f2:	89 c1                	mov    ecx,eax
c00054f4:	39 f2                	cmp    edx,esi
c00054f6:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00054f9:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00054fc:	19 f9                	sbb    ecx,edi
c00054fe:	73 04                	jae    c0005504 <f_write+0x18a>
c0005500:	89 f2                	mov    edx,esi
c0005502:	89 f8                	mov    eax,edi
c0005504:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0005507:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000550a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000550f:	0f 85 cc fe ff ff    	jne    c00053e1 <f_write+0x67>
c0005515:	eb 2e                	jmp    c0005545 <f_write+0x1cb>
c0005517:	89 c8                	mov    eax,ecx
c0005519:	09 d0                	or     eax,edx
c000551b:	75 0b                	jne    c0005528 <f_write+0x1ae>
c000551d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005520:	31 d2                	xor    edx,edx
c0005522:	85 c0                	test   eax,eax
c0005524:	75 28                	jne    c000554e <f_write+0x1d4>
c0005526:	eb 12                	jmp    c000553a <f_write+0x1c0>
c0005528:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000552c:	74 09                	je     c0005537 <f_write+0x1bd>
c000552e:	89 d8                	mov    eax,ebx
c0005530:	e8 13 c7 ff ff       	call   c0001c48 <clmt_clust>
c0005535:	eb 0a                	jmp    c0005541 <f_write+0x1c7>
c0005537:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000553a:	89 d8                	mov    eax,ebx
c000553c:	e8 a1 da ff ff       	call   c0002fe2 <create_chain>
c0005541:	85 c0                	test   eax,eax
c0005543:	75 09                	jne    c000554e <f_write+0x1d4>
c0005545:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005549:	e9 dc 00 00 00       	jmp    c000562a <f_write+0x2b0>
c000554e:	83 f8 01             	cmp    eax,0x1
c0005551:	75 0e                	jne    c0005561 <f_write+0x1e7>
c0005553:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005557:	bd 02 00 00 00       	mov    ebp,0x2
c000555c:	e9 c9 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005561:	83 f8 ff             	cmp    eax,0xffffffff
c0005564:	75 0e                	jne    c0005574 <f_write+0x1fa>
c0005566:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000556a:	bd 01 00 00 00       	mov    ebp,0x1
c000556f:	e9 b6 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005574:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005577:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000557b:	0f 85 90 fe ff ff    	jne    c0005411 <f_write+0x97>
c0005581:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005584:	e9 88 fe ff ff       	jmp    c0005411 <f_write+0x97>
c0005589:	83 ec 0c             	sub    esp,0xc
c000558c:	8d 43 50             	lea    eax,[ebx+0x50]
c000558f:	6a 01                	push   0x1
c0005591:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005594:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005597:	50                   	push   eax
c0005598:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000559c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055a0:	50                   	push   eax
c00055a1:	e8 b3 c3 ff ff       	call   c0001959 <disk_write>
c00055a6:	83 c4 20             	add    esp,0x20
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 b9                	jne    c0005566 <f_write+0x1ec>
c00055ad:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055b1:	e9 65 fe ff ff       	jmp    c000541b <f_write+0xa1>
c00055b6:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00055b9:	75 05                	jne    c00055c0 <f_write+0x246>
c00055bb:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00055be:	74 2e                	je     c00055ee <f_write+0x274>
c00055c0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00055c3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055c6:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00055c9:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00055cc:	73 20                	jae    c00055ee <f_write+0x274>
c00055ce:	83 ec 0c             	sub    esp,0xc
c00055d1:	8d 43 50             	lea    eax,[ebx+0x50]
c00055d4:	6a 01                	push   0x1
c00055d6:	57                   	push   edi
c00055d7:	56                   	push   esi
c00055d8:	50                   	push   eax
c00055d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055dd:	50                   	push   eax
c00055de:	e8 60 c3 ff ff       	call   c0001943 <disk_read>
c00055e3:	83 c4 20             	add    esp,0x20
c00055e6:	85 c0                	test   eax,eax
c00055e8:	0f 85 78 ff ff ff    	jne    c0005566 <f_write+0x1ec>
c00055ee:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055f1:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055f4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055f7:	ba 00 02 00 00       	mov    edx,0x200
c00055fc:	25 ff 01 00 00       	and    eax,0x1ff
c0005601:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005605:	29 c2                	sub    edx,eax
c0005607:	39 d6                	cmp    esi,edx
c0005609:	76 02                	jbe    c000560d <f_write+0x293>
c000560b:	89 d6                	mov    esi,edx
c000560d:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005611:	89 f1                	mov    ecx,esi
c0005613:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005617:	e8 f1 c3 ff ff       	call   c0001a0d <mem_cpy>
c000561c:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005620:	e9 b1 fe ff ff       	jmp    c00054d6 <f_write+0x15c>
c0005625:	bd 07 00 00 00       	mov    ebp,0x7
c000562a:	83 c4 2c             	add    esp,0x2c
c000562d:	89 e8                	mov    eax,ebp
c000562f:	5b                   	pop    ebx
c0005630:	5e                   	pop    esi
c0005631:	5f                   	pop    edi
c0005632:	5d                   	pop    ebp
c0005633:	c3                   	ret    

c0005634 <f_sync>:
c0005634:	56                   	push   esi
c0005635:	53                   	push   ebx
c0005636:	83 ec 64             	sub    esp,0x64
c0005639:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000563d:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005641:	89 d8                	mov    eax,ebx
c0005643:	e8 49 ca ff ff       	call   c0002091 <validate>
c0005648:	85 c0                	test   eax,eax
c000564a:	0f 85 ba 01 00 00    	jne    c000580a <f_sync+0x1d6>
c0005650:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005653:	f6 c2 40             	test   dl,0x40
c0005656:	0f 84 ae 01 00 00    	je     c000580a <f_sync+0x1d6>
c000565c:	84 d2                	test   dl,dl
c000565e:	79 33                	jns    c0005693 <f_sync+0x5f>
c0005660:	83 ec 0c             	sub    esp,0xc
c0005663:	8d 43 50             	lea    eax,[ebx+0x50]
c0005666:	6a 01                	push   0x1
c0005668:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000566b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000566e:	50                   	push   eax
c000566f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005673:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005677:	50                   	push   eax
c0005678:	e8 dc c2 ff ff       	call   c0001959 <disk_write>
c000567d:	83 c4 20             	add    esp,0x20
c0005680:	89 c2                	mov    edx,eax
c0005682:	b8 01 00 00 00       	mov    eax,0x1
c0005687:	85 d2                	test   edx,edx
c0005689:	0f 85 7b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c000568f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005697:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000569a:	0f 85 11 01 00 00    	jne    c00057b1 <f_sync+0x17d>
c00056a0:	89 d8                	mov    eax,ebx
c00056a2:	e8 13 d6 ff ff       	call   c0002cba <fill_first_frag>
c00056a7:	85 c0                	test   eax,eax
c00056a9:	0f 85 5b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056af:	83 c9 ff             	or     ecx,0xffffffff
c00056b2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056b5:	89 d8                	mov    eax,ebx
c00056b7:	e8 c9 d5 ff ff       	call   c0002c85 <fill_last_frag>
c00056bc:	85 c0                	test   eax,eax
c00056be:	0f 85 46 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056c4:	83 ec 0c             	sub    esp,0xc
c00056c7:	68 60 04 00 00       	push   0x460
c00056cc:	e8 f0 2a 00 00       	call   c00081c1 <ff_memalloc>
c00056d1:	83 c4 10             	add    esp,0x10
c00056d4:	89 c6                	mov    esi,eax
c00056d6:	b8 11 00 00 00       	mov    eax,0x11
c00056db:	85 f6                	test   esi,esi
c00056dd:	0f 84 27 01 00 00    	je     c000580a <f_sync+0x1d6>
c00056e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056e7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00056ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00056f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00056f3:	89 da                	mov    edx,ebx
c00056f5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00056f9:	e8 af df ff ff       	call   c00036ad <load_obj_xdir>
c00056fe:	85 c0                	test   eax,eax
c0005700:	0f 85 95 00 00 00    	jne    c000579b <f_sync+0x167>
c0005706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000570a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000570d:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005711:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005714:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005717:	83 ca 01             	or     edx,0x1
c000571a:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c000571d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005720:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005723:	83 c0 34             	add    eax,0x34
c0005726:	e8 d9 c2 ff ff       	call   c0001a04 <st_dword>
c000572b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000572f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005732:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005735:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005738:	83 c0 38             	add    eax,0x38
c000573b:	e8 c7 c2 ff ff       	call   c0001a07 <st_qword>
c0005740:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005747:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000574a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000574d:	83 c0 28             	add    eax,0x28
c0005750:	e8 b2 c2 ff ff       	call   c0001a07 <st_qword>
c0005755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005759:	ba 00 00 21 50       	mov    edx,0x50210000
c000575e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005761:	83 c0 0c             	add    eax,0xc
c0005764:	e8 9b c2 ff ff       	call   c0001a04 <st_dword>
c0005769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000576d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005770:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005774:	31 d2                	xor    edx,edx
c0005776:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005779:	83 c0 10             	add    eax,0x10
c000577c:	e8 83 c2 ff ff       	call   c0001a04 <st_dword>
c0005781:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005785:	e8 62 e1 ff ff       	call   c00038ec <store_xdir>
c000578a:	85 c0                	test   eax,eax
c000578c:	75 0d                	jne    c000579b <f_sync+0x167>
c000578e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005792:	e8 00 eb ff ff       	call   c0004297 <sync_fs>
c0005797:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000579b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000579f:	83 ec 0c             	sub    esp,0xc
c00057a2:	56                   	push   esi
c00057a3:	e8 2f 2a 00 00       	call   c00081d7 <ff_memfree>
c00057a8:	83 c4 10             	add    esp,0x10
c00057ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057af:	eb 59                	jmp    c000580a <f_sync+0x1d6>
c00057b1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00057b4:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00057b7:	e8 b0 c9 ff ff       	call   c000216c <move_window>
c00057bc:	85 c0                	test   eax,eax
c00057be:	75 4a                	jne    c000580a <f_sync+0x1d6>
c00057c0:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00057c3:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00057c7:	89 f2                	mov    edx,esi
c00057c9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00057cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00057ce:	e8 5f f3 ff ff       	call   c0004b32 <st_clust.isra.1>
c00057d3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057d6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00057d9:	e8 26 c2 ff ff       	call   c0001a04 <st_dword>
c00057de:	8d 46 16             	lea    eax,[esi+0x16]
c00057e1:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e6:	e8 19 c2 ff ff       	call   c0001a04 <st_dword>
c00057eb:	8d 46 12             	lea    eax,[esi+0x12]
c00057ee:	31 d2                	xor    edx,edx
c00057f0:	e8 0b c2 ff ff       	call   c0001a00 <st_word>
c00057f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00057fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005801:	e8 91 ea ff ff       	call   c0004297 <sync_fs>
c0005806:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000580a:	83 c4 64             	add    esp,0x64
c000580d:	5b                   	pop    ebx
c000580e:	5e                   	pop    esi
c000580f:	c3                   	ret    

c0005810 <f_close>:
c0005810:	53                   	push   ebx
c0005811:	83 ec 24             	sub    esp,0x24
c0005814:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005818:	53                   	push   ebx
c0005819:	e8 16 fe ff ff       	call   c0005634 <f_sync>
c000581e:	83 c4 10             	add    esp,0x10
c0005821:	85 c0                	test   eax,eax
c0005823:	75 15                	jne    c000583a <f_close+0x2a>
c0005825:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005829:	89 d8                	mov    eax,ebx
c000582b:	e8 61 c8 ff ff       	call   c0002091 <validate>
c0005830:	85 c0                	test   eax,eax
c0005832:	75 06                	jne    c000583a <f_close+0x2a>
c0005834:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000583a:	83 c4 18             	add    esp,0x18
c000583d:	5b                   	pop    ebx
c000583e:	c3                   	ret    

c000583f <f_lseek>:
c000583f:	55                   	push   ebp
c0005840:	57                   	push   edi
c0005841:	56                   	push   esi
c0005842:	53                   	push   ebx
c0005843:	83 ec 3c             	sub    esp,0x3c
c0005846:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000584a:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000584e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005852:	89 04 24             	mov    DWORD PTR [esp],eax
c0005855:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005859:	89 d8                	mov    eax,ebx
c000585b:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000585f:	e8 2d c8 ff ff       	call   c0002091 <validate>
c0005864:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005868:	85 c0                	test   eax,eax
c000586a:	0f 85 7a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005870:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005874:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005878:	85 c0                	test   eax,eax
c000587a:	0f 85 6a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005880:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005884:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005887:	74 0c                	je     c0005895 <f_lseek+0x56>
c0005889:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000588c:	85 c0                	test   eax,eax
c000588e:	75 1f                	jne    c00058af <f_lseek+0x70>
c0005890:	e9 b5 01 00 00       	jmp    c0005a4a <f_lseek+0x20b>
c0005895:	83 c9 ff             	or     ecx,0xffffffff
c0005898:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000589b:	89 d8                	mov    eax,ebx
c000589d:	e8 e3 d3 ff ff       	call   c0002c85 <fill_last_frag>
c00058a2:	85 c0                	test   eax,eax
c00058a4:	74 e3                	je     c0005889 <f_lseek+0x4a>
c00058a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058aa:	e9 3b 04 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c00058af:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00058b4:	0f 85 ac 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058ba:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c00058be:	0f 85 a2 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058c4:	8d 78 04             	lea    edi,[eax+0x4]
c00058c7:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00058ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00058cc:	be 02 00 00 00       	mov    esi,0x2
c00058d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058d5:	85 ed                	test   ebp,ebp
c00058d7:	74 73                	je     c000594c <f_lseek+0x10d>
c00058d9:	89 e9                	mov    ecx,ebp
c00058db:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00058e2:	ff 04 24             	inc    DWORD PTR [esp]
c00058e5:	89 ca                	mov    edx,ecx
c00058e7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00058eb:	89 d8                	mov    eax,ebx
c00058ed:	e8 02 d4 ff ff       	call   c0002cf4 <get_fat>
c00058f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00058f6:	83 f8 01             	cmp    eax,0x1
c00058f9:	77 11                	ja     c000590c <f_lseek+0xcd>
c00058fb:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00058ff:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005907:	e9 de 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c000590c:	83 f8 ff             	cmp    eax,0xffffffff
c000590f:	75 11                	jne    c0005922 <f_lseek+0xe3>
c0005911:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005915:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000591d:	e9 c8 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005922:	8d 51 01             	lea    edx,[ecx+0x1]
c0005925:	89 c1                	mov    ecx,eax
c0005927:	39 c2                	cmp    edx,eax
c0005929:	74 b7                	je     c00058e2 <f_lseek+0xa3>
c000592b:	83 c6 02             	add    esi,0x2
c000592e:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005932:	72 0b                	jb     c000593f <f_lseek+0x100>
c0005934:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005937:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c000593a:	89 0f                	mov    DWORD PTR [edi],ecx
c000593c:	83 c7 08             	add    edi,0x8
c000593f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005943:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005946:	76 04                	jbe    c000594c <f_lseek+0x10d>
c0005948:	89 c5                	mov    ebp,eax
c000594a:	eb 8d                	jmp    c00058d9 <f_lseek+0x9a>
c000594c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000594f:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005953:	89 30                	mov    DWORD PTR [eax],esi
c0005955:	0f 87 87 03 00 00    	ja     c0005ce2 <f_lseek+0x4a3>
c000595b:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005961:	e9 84 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005966:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005969:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000596c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005970:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005974:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005978:	39 04 24             	cmp    DWORD PTR [esp],eax
c000597b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000597f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005983:	73 0f                	jae    c0005994 <f_lseek+0x155>
c0005985:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005988:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000598c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005990:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005994:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005998:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000599c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000599f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00059a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00059a6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00059aa:	0f 84 3a 03 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00059b4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00059b8:	83 c6 ff             	add    esi,0xffffffff
c00059bb:	89 d8                	mov    eax,ebx
c00059bd:	83 d7 ff             	adc    edi,0xffffffff
c00059c0:	89 f2                	mov    edx,esi
c00059c2:	89 f9                	mov    ecx,edi
c00059c4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00059c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00059cb:	e8 78 c2 ff ff       	call   c0001c48 <clmt_clust>
c00059d0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00059d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00059d7:	89 c2                	mov    edx,eax
c00059d9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059dd:	89 c8                	mov    eax,ecx
c00059df:	e8 43 c2 ff ff       	call   c0001c27 <clst2sect>
c00059e4:	89 d7                	mov    edi,edx
c00059e6:	09 c7                	or     edi,eax
c00059e8:	0f 84 0d ff ff ff    	je     c00058fb <f_lseek+0xbc>
c00059ee:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00059f2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00059f8:	0f 84 ec 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059fe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a02:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a06:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a09:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a0d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a11:	4d                   	dec    ebp
c0005a12:	31 ff                	xor    edi,edi
c0005a14:	21 ee                	and    esi,ebp
c0005a16:	01 c6                	add    esi,eax
c0005a18:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a1b:	11 d7                	adc    edi,edx
c0005a1d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a20:	39 fa                	cmp    edx,edi
c0005a22:	75 08                	jne    c0005a2c <f_lseek+0x1ed>
c0005a24:	39 f0                	cmp    eax,esi
c0005a26:	0f 84 be 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c0005a2c:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005a2f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005a33:	0f 89 80 02 00 00    	jns    c0005cb9 <f_lseek+0x47a>
c0005a39:	83 ec 0c             	sub    esp,0xc
c0005a3c:	6a 01                	push   0x1
c0005a3e:	52                   	push   edx
c0005a3f:	50                   	push   eax
c0005a40:	55                   	push   ebp
c0005a41:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005a45:	e9 5a 02 00 00       	jmp    c0005ca4 <f_lseek+0x465>
c0005a4a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a4e:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005a51:	74 16                	je     c0005a69 <f_lseek+0x22a>
c0005a53:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005a58:	76 0f                	jbe    c0005a69 <f_lseek+0x22a>
c0005a5a:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005a61:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005a69:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005a6f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005a72:	89 c7                	mov    edi,eax
c0005a74:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005a78:	73 0d                	jae    c0005a87 <f_lseek+0x248>
c0005a7a:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005a7e:	75 07                	jne    c0005a87 <f_lseek+0x248>
c0005a80:	89 14 24             	mov    DWORD PTR [esp],edx
c0005a83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005a87:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005a8a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005a8d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a91:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005a98:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005a9f:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005aa2:	75 09                	jne    c0005aad <f_lseek+0x26e>
c0005aa4:	31 f6                	xor    esi,esi
c0005aa6:	31 ff                	xor    edi,edi
c0005aa8:	e9 af 01 00 00       	jmp    c0005c5c <f_lseek+0x41d>
c0005aad:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005ab1:	89 d7                	mov    edi,edx
c0005ab3:	c1 e1 09             	shl    ecx,0x9
c0005ab6:	09 c7                	or     edi,eax
c0005ab8:	89 cd                	mov    ebp,ecx
c0005aba:	74 6d                	je     c0005b29 <f_lseek+0x2ea>
c0005abc:	83 c0 ff             	add    eax,0xffffffff
c0005abf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ac3:	83 d2 ff             	adc    edx,0xffffffff
c0005ac6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ac9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005acd:	83 c0 ff             	add    eax,0xffffffff
c0005ad0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ad4:	83 d2 ff             	adc    edx,0xffffffff
c0005ad7:	31 ff                	xor    edi,edi
c0005ad9:	57                   	push   edi
c0005ada:	51                   	push   ecx
c0005adb:	52                   	push   edx
c0005adc:	50                   	push   eax
c0005add:	e8 3a 89 01 00       	call   c001e41c <__udivdi3>
c0005ae2:	83 c4 10             	add    esp,0x10
c0005ae5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ae9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005aed:	57                   	push   edi
c0005aee:	55                   	push   ebp
c0005aef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af7:	e8 20 89 01 00       	call   c001e41c <__udivdi3>
c0005afc:	83 c4 10             	add    esp,0x10
c0005aff:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b03:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b07:	19 d1                	sbb    ecx,edx
c0005b09:	72 1e                	jb     c0005b29 <f_lseek+0x2ea>
c0005b0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b0f:	89 e9                	mov    ecx,ebp
c0005b11:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b14:	f7 d9                	neg    ecx
c0005b16:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b19:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b1d:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b20:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b23:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b27:	eb 28                	jmp    c0005b51 <f_lseek+0x312>
c0005b29:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005b2c:	85 c0                	test   eax,eax
c0005b2e:	75 1e                	jne    c0005b4e <f_lseek+0x30f>
c0005b30:	31 d2                	xor    edx,edx
c0005b32:	89 d8                	mov    eax,ebx
c0005b34:	e8 a9 d4 ff ff       	call   c0002fe2 <create_chain>
c0005b39:	83 f8 01             	cmp    eax,0x1
c0005b3c:	0f 84 b9 fd ff ff    	je     c00058fb <f_lseek+0xbc>
c0005b42:	83 f8 ff             	cmp    eax,0xffffffff
c0005b45:	0f 84 c6 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005b4b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005b4e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b51:	85 c0                	test   eax,eax
c0005b53:	0f 84 4b ff ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005b59:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005b5d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005b65:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005b68:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b6c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005b6f:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005b72:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b76:	0f 83 9d 00 00 00    	jae    c0005c19 <f_lseek+0x3da>
c0005b7c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b80:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b84:	29 34 24             	sub    DWORD PTR [esp],esi
c0005b87:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005b8b:	01 f2                	add    edx,esi
c0005b8d:	11 f9                	adc    ecx,edi
c0005b8f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005b93:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005b97:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005b9a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005b9d:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005ba0:	f6 c1 02             	test   cl,0x2
c0005ba3:	74 35                	je     c0005bda <f_lseek+0x39b>
c0005ba5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005ba9:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005bac:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005baf:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005bb3:	73 16                	jae    c0005bcb <f_lseek+0x38c>
c0005bb5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005bb9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005bbd:	88 ca                	mov    dl,cl
c0005bbf:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005bc2:	83 ca 40             	or     edx,0x40
c0005bc5:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005bc8:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005bcb:	89 c2                	mov    edx,eax
c0005bcd:	89 d8                	mov    eax,ebx
c0005bcf:	e8 0e d4 ff ff       	call   c0002fe2 <create_chain>
c0005bd4:	85 c0                	test   eax,eax
c0005bd6:	75 0b                	jne    c0005be3 <f_lseek+0x3a4>
c0005bd8:	eb 30                	jmp    c0005c0a <f_lseek+0x3cb>
c0005bda:	89 c2                	mov    edx,eax
c0005bdc:	89 d8                	mov    eax,ebx
c0005bde:	e8 11 d1 ff ff       	call   c0002cf4 <get_fat>
c0005be3:	83 f8 ff             	cmp    eax,0xffffffff
c0005be6:	0f 84 25 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005bec:	83 f8 01             	cmp    eax,0x1
c0005bef:	0f 86 06 fd ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005bf5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bf9:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bfc:	0f 86 f9 fc ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005c02:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c05:	e9 5b ff ff ff       	jmp    c0005b65 <f_lseek+0x326>
c0005c0a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c19:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c1c:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c20:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c23:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c26:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c29:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c2f:	0f 84 6f fe ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005c35:	89 c2                	mov    edx,eax
c0005c37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c3b:	e8 e7 bf ff ff       	call   c0001c27 <clst2sect>
c0005c40:	89 d7                	mov    edi,edx
c0005c42:	09 c7                	or     edi,eax
c0005c44:	0f 84 b1 fc ff ff    	je     c00058fb <f_lseek+0xbc>
c0005c4a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c4e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005c51:	0f ac fe 09          	shrd   esi,edi,0x9
c0005c55:	c1 ef 09             	shr    edi,0x9
c0005c58:	01 c6                	add    esi,eax
c0005c5a:	11 d7                	adc    edi,edx
c0005c5c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c62:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c65:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005c68:	19 d1                	sbb    ecx,edx
c0005c6a:	73 0a                	jae    c0005c76 <f_lseek+0x437>
c0005c6c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005c6f:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005c72:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005c76:	a9 ff 01 00 00       	test   eax,0x1ff
c0005c7b:	74 6d                	je     c0005cea <f_lseek+0x4ab>
c0005c7d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005c80:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005c83:	39 fa                	cmp    edx,edi
c0005c85:	75 04                	jne    c0005c8b <f_lseek+0x44c>
c0005c87:	39 f0                	cmp    eax,esi
c0005c89:	74 5f                	je     c0005cea <f_lseek+0x4ab>
c0005c8b:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c8e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c92:	79 25                	jns    c0005cb9 <f_lseek+0x47a>
c0005c94:	83 ec 0c             	sub    esp,0xc
c0005c97:	6a 01                	push   0x1
c0005c99:	52                   	push   edx
c0005c9a:	50                   	push   eax
c0005c9b:	55                   	push   ebp
c0005c9c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005ca0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005ca4:	50                   	push   eax
c0005ca5:	e8 af bc ff ff       	call   c0001959 <disk_write>
c0005caa:	83 c4 20             	add    esp,0x20
c0005cad:	85 c0                	test   eax,eax
c0005caf:	0f 85 5c fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cb5:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005cb9:	83 ec 0c             	sub    esp,0xc
c0005cbc:	6a 01                	push   0x1
c0005cbe:	57                   	push   edi
c0005cbf:	56                   	push   esi
c0005cc0:	55                   	push   ebp
c0005cc1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005cc5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cc9:	50                   	push   eax
c0005cca:	e8 74 bc ff ff       	call   c0001943 <disk_read>
c0005ccf:	83 c4 20             	add    esp,0x20
c0005cd2:	85 c0                	test   eax,eax
c0005cd4:	0f 85 37 fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cda:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005cdd:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ce0:	eb 08                	jmp    c0005cea <f_lseek+0x4ab>
c0005ce2:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005cea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005cee:	83 c4 3c             	add    esp,0x3c
c0005cf1:	5b                   	pop    ebx
c0005cf2:	5e                   	pop    esi
c0005cf3:	5f                   	pop    edi
c0005cf4:	5d                   	pop    ebp
c0005cf5:	c3                   	ret    

c0005cf6 <f_opendir>:
c0005cf6:	56                   	push   esi
c0005cf7:	b8 09 00 00 00       	mov    eax,0x9
c0005cfc:	53                   	push   ebx
c0005cfd:	83 ec 24             	sub    esp,0x24
c0005d00:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d04:	85 db                	test   ebx,ebx
c0005d06:	0f 84 e6 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d0c:	31 c9                	xor    ecx,ecx
c0005d0e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d12:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d16:	e8 03 c7 ff ff       	call   c000241e <mount_volume>
c0005d1b:	85 c0                	test   eax,eax
c0005d1d:	0f 85 c9 00 00 00    	jne    c0005dec <f_opendir+0xf6>
c0005d23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d27:	83 ec 0c             	sub    esp,0xc
c0005d2a:	89 03                	mov    DWORD PTR [ebx],eax
c0005d2c:	68 60 04 00 00       	push   0x460
c0005d31:	e8 8b 24 00 00       	call   c00081c1 <ff_memalloc>
c0005d36:	83 c4 10             	add    esp,0x10
c0005d39:	89 c6                	mov    esi,eax
c0005d3b:	b8 11 00 00 00       	mov    eax,0x11
c0005d40:	85 f6                	test   esi,esi
c0005d42:	0f 84 aa 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d4c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005d52:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005d55:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005d58:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005d5c:	89 d8                	mov    eax,ebx
c0005d5e:	e8 31 ee ff ff       	call   c0004b94 <follow_path>
c0005d63:	85 c0                	test   eax,eax
c0005d65:	75 61                	jne    c0005dc8 <f_opendir+0xd2>
c0005d67:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005d6b:	78 46                	js     c0005db3 <f_opendir+0xbd>
c0005d6d:	b8 05 00 00 00       	mov    eax,0x5
c0005d72:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005d76:	74 50                	je     c0005dc8 <f_opendir+0xd2>
c0005d78:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005d7c:	8a 01                	mov    al,BYTE PTR [ecx]
c0005d7e:	3c 04                	cmp    al,0x4
c0005d80:	75 26                	jne    c0005da8 <f_opendir+0xb2>
c0005d82:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d85:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d88:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005d8b:	30 d2                	xor    dl,dl
c0005d8d:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005d91:	09 c2                	or     edx,eax
c0005d93:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005d96:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005d99:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005d9c:	89 da                	mov    edx,ebx
c0005d9e:	8d 41 10             	lea    eax,[ecx+0x10]
c0005da1:	e8 b4 ed ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0005da6:	eb 0b                	jmp    c0005db3 <f_opendir+0xbd>
c0005da8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005dab:	e8 59 ed ff ff       	call   c0004b09 <ld_clust.isra.0>
c0005db0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005db3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005db7:	31 d2                	xor    edx,edx
c0005db9:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005dbd:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005dc1:	89 d8                	mov    eax,ebx
c0005dc3:	e8 22 d1 ff ff       	call   c0002eea <dir_sdi>
c0005dc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dcc:	83 ec 0c             	sub    esp,0xc
c0005dcf:	56                   	push   esi
c0005dd0:	e8 02 24 00 00       	call   c00081d7 <ff_memfree>
c0005dd5:	83 c4 10             	add    esp,0x10
c0005dd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ddc:	83 f8 04             	cmp    eax,0x4
c0005ddf:	74 06                	je     c0005de7 <f_opendir+0xf1>
c0005de1:	85 c0                	test   eax,eax
c0005de3:	74 0d                	je     c0005df2 <f_opendir+0xfc>
c0005de5:	eb 05                	jmp    c0005dec <f_opendir+0xf6>
c0005de7:	b8 05 00 00 00       	mov    eax,0x5
c0005dec:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005df2:	83 c4 24             	add    esp,0x24
c0005df5:	5b                   	pop    ebx
c0005df6:	5e                   	pop    esi
c0005df7:	c3                   	ret    

c0005df8 <f_closedir>:
c0005df8:	53                   	push   ebx
c0005df9:	83 ec 18             	sub    esp,0x18
c0005dfc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e00:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e04:	89 d8                	mov    eax,ebx
c0005e06:	e8 86 c2 ff ff       	call   c0002091 <validate>
c0005e0b:	85 c0                	test   eax,eax
c0005e0d:	75 06                	jne    c0005e15 <f_closedir+0x1d>
c0005e0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e15:	83 c4 18             	add    esp,0x18
c0005e18:	5b                   	pop    ebx
c0005e19:	c3                   	ret    

c0005e1a <f_readdir>:
c0005e1a:	57                   	push   edi
c0005e1b:	56                   	push   esi
c0005e1c:	53                   	push   ebx
c0005e1d:	83 ec 20             	sub    esp,0x20
c0005e20:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e24:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e28:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e2c:	89 d8                	mov    eax,ebx
c0005e2e:	e8 5e c2 ff ff       	call   c0002091 <validate>
c0005e33:	85 c0                	test   eax,eax
c0005e35:	75 77                	jne    c0005eae <f_readdir+0x94>
c0005e37:	85 ff                	test   edi,edi
c0005e39:	75 0b                	jne    c0005e46 <f_readdir+0x2c>
c0005e3b:	31 d2                	xor    edx,edx
c0005e3d:	89 d8                	mov    eax,ebx
c0005e3f:	e8 a6 d0 ff ff       	call   c0002eea <dir_sdi>
c0005e44:	eb 68                	jmp    c0005eae <f_readdir+0x94>
c0005e46:	83 ec 0c             	sub    esp,0xc
c0005e49:	68 60 04 00 00       	push   0x460
c0005e4e:	e8 6e 23 00 00       	call   c00081c1 <ff_memalloc>
c0005e53:	83 c4 10             	add    esp,0x10
c0005e56:	89 c6                	mov    esi,eax
c0005e58:	b8 11 00 00 00       	mov    eax,0x11
c0005e5d:	85 f6                	test   esi,esi
c0005e5f:	74 4d                	je     c0005eae <f_readdir+0x94>
c0005e61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e65:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e6b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e6e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e71:	31 d2                	xor    edx,edx
c0005e73:	89 d8                	mov    eax,ebx
c0005e75:	e8 80 d8 ff ff       	call   c00036fa <dir_read>
c0005e7a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005e7f:	75 19                	jne    c0005e9a <f_readdir+0x80>
c0005e81:	89 fa                	mov    edx,edi
c0005e83:	89 d8                	mov    eax,ebx
c0005e85:	e8 7e ea ff ff       	call   c0004908 <get_fileinfo>
c0005e8a:	31 d2                	xor    edx,edx
c0005e8c:	89 d8                	mov    eax,ebx
c0005e8e:	e8 af d5 ff ff       	call   c0003442 <dir_next>
c0005e93:	83 f8 04             	cmp    eax,0x4
c0005e96:	75 02                	jne    c0005e9a <f_readdir+0x80>
c0005e98:	31 c0                	xor    eax,eax
c0005e9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e9e:	83 ec 0c             	sub    esp,0xc
c0005ea1:	56                   	push   esi
c0005ea2:	e8 30 23 00 00       	call   c00081d7 <ff_memfree>
c0005ea7:	83 c4 10             	add    esp,0x10
c0005eaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eae:	83 c4 20             	add    esp,0x20
c0005eb1:	5b                   	pop    ebx
c0005eb2:	5e                   	pop    esi
c0005eb3:	5f                   	pop    edi
c0005eb4:	c3                   	ret    

c0005eb5 <f_stat>:
c0005eb5:	57                   	push   edi
c0005eb6:	31 c9                	xor    ecx,ecx
c0005eb8:	56                   	push   esi
c0005eb9:	53                   	push   ebx
c0005eba:	83 ec 50             	sub    esp,0x50
c0005ebd:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005ec1:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005ec5:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005ec9:	e8 50 c5 ff ff       	call   c000241e <mount_volume>
c0005ece:	89 c3                	mov    ebx,eax
c0005ed0:	85 c0                	test   eax,eax
c0005ed2:	75 67                	jne    c0005f3b <f_stat+0x86>
c0005ed4:	83 ec 0c             	sub    esp,0xc
c0005ed7:	bb 11 00 00 00       	mov    ebx,0x11
c0005edc:	68 60 04 00 00       	push   0x460
c0005ee1:	e8 db 22 00 00       	call   c00081c1 <ff_memalloc>
c0005ee6:	83 c4 10             	add    esp,0x10
c0005ee9:	89 c6                	mov    esi,eax
c0005eeb:	85 c0                	test   eax,eax
c0005eed:	74 4c                	je     c0005f3b <f_stat+0x86>
c0005eef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ef3:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ef9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005efc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005eff:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f03:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f07:	e8 88 ec ff ff       	call   c0004b94 <follow_path>
c0005f0c:	89 c3                	mov    ebx,eax
c0005f0e:	85 c0                	test   eax,eax
c0005f10:	75 1d                	jne    c0005f2f <f_stat+0x7a>
c0005f12:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f17:	78 11                	js     c0005f2a <f_stat+0x75>
c0005f19:	85 ff                	test   edi,edi
c0005f1b:	74 12                	je     c0005f2f <f_stat+0x7a>
c0005f1d:	89 fa                	mov    edx,edi
c0005f1f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f23:	e8 e0 e9 ff ff       	call   c0004908 <get_fileinfo>
c0005f28:	eb 05                	jmp    c0005f2f <f_stat+0x7a>
c0005f2a:	bb 06 00 00 00       	mov    ebx,0x6
c0005f2f:	83 ec 0c             	sub    esp,0xc
c0005f32:	56                   	push   esi
c0005f33:	e8 9f 22 00 00       	call   c00081d7 <ff_memfree>
c0005f38:	83 c4 10             	add    esp,0x10
c0005f3b:	83 c4 50             	add    esp,0x50
c0005f3e:	89 d8                	mov    eax,ebx
c0005f40:	5b                   	pop    ebx
c0005f41:	5e                   	pop    esi
c0005f42:	5f                   	pop    edi
c0005f43:	c3                   	ret    

c0005f44 <f_getfree>:
c0005f44:	55                   	push   ebp
c0005f45:	31 c9                	xor    ecx,ecx
c0005f47:	57                   	push   edi
c0005f48:	56                   	push   esi
c0005f49:	53                   	push   ebx
c0005f4a:	83 ec 5c             	sub    esp,0x5c
c0005f4d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005f51:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005f55:	e8 c4 c4 ff ff       	call   c000241e <mount_volume>
c0005f5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f5e:	85 c0                	test   eax,eax
c0005f60:	0f 85 9d 01 00 00    	jne    c0006103 <f_getfree+0x1bf>
c0005f66:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005f6a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005f6e:	89 02                	mov    DWORD PTR [edx],eax
c0005f70:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005f73:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005f76:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005f79:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005f7d:	39 f2                	cmp    edx,esi
c0005f7f:	77 0b                	ja     c0005f8c <f_getfree+0x48>
c0005f81:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005f85:	89 10                	mov    DWORD PTR [eax],edx
c0005f87:	e9 77 01 00 00       	jmp    c0006103 <f_getfree+0x1bf>
c0005f8c:	8a 10                	mov    dl,BYTE PTR [eax]
c0005f8e:	80 fa 01             	cmp    dl,0x1
c0005f91:	75 3a                	jne    c0005fcd <f_getfree+0x89>
c0005f93:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005f97:	be 02 00 00 00       	mov    esi,0x2
c0005f9c:	31 db                	xor    ebx,ebx
c0005f9e:	89 f2                	mov    edx,esi
c0005fa0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005fa4:	e8 4b cd ff ff       	call   c0002cf4 <get_fat>
c0005fa9:	83 f8 ff             	cmp    eax,0xffffffff
c0005fac:	0f 84 28 01 00 00    	je     c00060da <f_getfree+0x196>
c0005fb2:	83 f8 01             	cmp    eax,0x1
c0005fb5:	0f 84 29 01 00 00    	je     c00060e4 <f_getfree+0x1a0>
c0005fbb:	83 d3 00             	adc    ebx,0x0
c0005fbe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fc2:	46                   	inc    esi
c0005fc3:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0005fc6:	77 d6                	ja     c0005f9e <f_getfree+0x5a>
c0005fc8:	e9 25 01 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c0005fcd:	80 fa 04             	cmp    dl,0x4
c0005fd0:	0f 85 88 00 00 00    	jne    c000605e <f_getfree+0x11a>
c0005fd6:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0005fd9:	31 ed                	xor    ebp,ebp
c0005fdb:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0005fde:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005fe2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005fe6:	31 db                	xor    ebx,ebx
c0005fe8:	85 ed                	test   ebp,ebp
c0005fea:	75 3f                	jne    c000602b <f_getfree+0xe7>
c0005fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ff0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ff4:	83 c0 01             	add    eax,0x1
c0005ff7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005ffb:	83 d2 00             	adc    edx,0x0
c0005ffe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006002:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006006:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000600a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000600e:	e8 59 c1 ff ff       	call   c000216c <move_window>
c0006013:	85 c0                	test   eax,eax
c0006015:	0f 85 d3 00 00 00    	jne    c00060ee <f_getfree+0x1aa>
c000601b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000601f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006023:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006027:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000602b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000602f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006032:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006036:	89 cf                	mov    edi,ecx
c0006038:	85 f6                	test   esi,esi
c000603a:	74 12                	je     c000604e <f_getfree+0x10a>
c000603c:	88 c1                	mov    cl,al
c000603e:	83 e1 01             	and    ecx,0x1
c0006041:	80 f9 01             	cmp    cl,0x1
c0006044:	83 d3 00             	adc    ebx,0x0
c0006047:	d0 e8                	shr    al,1
c0006049:	4e                   	dec    esi
c000604a:	39 fe                	cmp    esi,edi
c000604c:	75 ea                	jne    c0006038 <f_getfree+0xf4>
c000604e:	45                   	inc    ebp
c000604f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006055:	85 f6                	test   esi,esi
c0006057:	75 8f                	jne    c0005fe8 <f_getfree+0xa4>
c0006059:	e9 94 00 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c000605e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006061:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006064:	31 f6                	xor    esi,esi
c0006066:	31 db                	xor    ebx,ebx
c0006068:	85 f6                	test   esi,esi
c000606a:	75 1b                	jne    c0006087 <f_getfree+0x143>
c000606c:	89 d7                	mov    edi,edx
c000606e:	89 cd                	mov    ebp,ecx
c0006070:	83 c7 01             	add    edi,0x1
c0006073:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006077:	83 d5 00             	adc    ebp,0x0
c000607a:	e8 ed c0 ff ff       	call   c000216c <move_window>
c000607f:	85 c0                	test   eax,eax
c0006081:	75 6b                	jne    c00060ee <f_getfree+0x1aa>
c0006083:	89 fa                	mov    edx,edi
c0006085:	89 e9                	mov    ecx,ebp
c0006087:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000608f:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006093:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006096:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000609a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000609e:	75 11                	jne    c00060b1 <f_getfree+0x16d>
c00060a0:	e8 e9 b8 ff ff       	call   c000198e <ld_word>
c00060a5:	66 83 f8 01          	cmp    ax,0x1
c00060a9:	83 d3 00             	adc    ebx,0x0
c00060ac:	83 c6 02             	add    esi,0x2
c00060af:	eb 13                	jmp    c00060c4 <f_getfree+0x180>
c00060b1:	e8 e5 b8 ff ff       	call   c000199b <ld_dword>
c00060b6:	25 ff ff ff 0f       	and    eax,0xfffffff
c00060bb:	83 f8 01             	cmp    eax,0x1
c00060be:	83 d3 00             	adc    ebx,0x0
c00060c1:	83 c6 04             	add    esi,0x4
c00060c4:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00060ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00060ce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00060d2:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00060d6:	75 90                	jne    c0006068 <f_getfree+0x124>
c00060d8:	eb 18                	jmp    c00060f2 <f_getfree+0x1ae>
c00060da:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00060e2:	eb 0e                	jmp    c00060f2 <f_getfree+0x1ae>
c00060e4:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00060ec:	eb 04                	jmp    c00060f2 <f_getfree+0x1ae>
c00060ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060f2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00060f6:	89 18                	mov    DWORD PTR [eax],ebx
c00060f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fc:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00060ff:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006103:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006107:	83 c4 5c             	add    esp,0x5c
c000610a:	5b                   	pop    ebx
c000610b:	5e                   	pop    esi
c000610c:	5f                   	pop    edi
c000610d:	5d                   	pop    ebp
c000610e:	c3                   	ret    

c000610f <f_truncate>:
c000610f:	56                   	push   esi
c0006110:	53                   	push   ebx
c0006111:	83 ec 14             	sub    esp,0x14
c0006114:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006118:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 6e bf ff ff       	call   c0002091 <validate>
c0006123:	89 c6                	mov    esi,eax
c0006125:	85 c0                	test   eax,eax
c0006127:	0f 85 d2 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c000612d:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006131:	85 f6                	test   esi,esi
c0006133:	0f 85 c6 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c0006139:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000613d:	0f 84 b7 00 00 00    	je     c00061fa <f_truncate+0xeb>
c0006143:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006146:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006149:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000614c:	89 d1                	mov    ecx,edx
c000614e:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006151:	0f 83 a8 00 00 00    	jae    c00061ff <f_truncate+0xf0>
c0006157:	09 c2                	or     edx,eax
c0006159:	75 15                	jne    c0006170 <f_truncate+0x61>
c000615b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000615e:	31 c9                	xor    ecx,ecx
c0006160:	89 d8                	mov    eax,ebx
c0006162:	e8 7a d0 ff ff       	call   c00031e1 <remove_chain>
c0006167:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000616e:	eb 35                	jmp    c00061a5 <f_truncate+0x96>
c0006170:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006173:	89 d8                	mov    eax,ebx
c0006175:	e8 7a cb ff ff       	call   c0002cf4 <get_fat>
c000617a:	89 c2                	mov    edx,eax
c000617c:	b8 01 00 00 00       	mov    eax,0x1
c0006181:	83 fa ff             	cmp    edx,0xffffffff
c0006184:	74 1f                	je     c00061a5 <f_truncate+0x96>
c0006186:	b8 02 00 00 00       	mov    eax,0x2
c000618b:	83 fa 01             	cmp    edx,0x1
c000618e:	74 15                	je     c00061a5 <f_truncate+0x96>
c0006190:	31 c0                	xor    eax,eax
c0006192:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006196:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006199:	76 0a                	jbe    c00061a5 <f_truncate+0x96>
c000619b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000619e:	89 d8                	mov    eax,ebx
c00061a0:	e8 3c d0 ff ff       	call   c00031e1 <remove_chain>
c00061a5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00061a8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00061ab:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00061ae:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00061b1:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00061b4:	83 ca 40             	or     edx,0x40
c00061b7:	85 c0                	test   eax,eax
c00061b9:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00061bc:	75 35                	jne    c00061f3 <f_truncate+0xe4>
c00061be:	84 d2                	test   dl,dl
c00061c0:	79 3d                	jns    c00061ff <f_truncate+0xf0>
c00061c2:	83 ec 0c             	sub    esp,0xc
c00061c5:	8d 43 50             	lea    eax,[ebx+0x50]
c00061c8:	6a 01                	push   0x1
c00061ca:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00061cd:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00061d0:	50                   	push   eax
c00061d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00061d5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00061d9:	50                   	push   eax
c00061da:	e8 7a b7 ff ff       	call   c0001959 <disk_write>
c00061df:	83 c4 20             	add    esp,0x20
c00061e2:	85 c0                	test   eax,eax
c00061e4:	75 08                	jne    c00061ee <f_truncate+0xdf>
c00061e6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00061ea:	31 f6                	xor    esi,esi
c00061ec:	eb 11                	jmp    c00061ff <f_truncate+0xf0>
c00061ee:	b8 01 00 00 00       	mov    eax,0x1
c00061f3:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00061f6:	89 c6                	mov    esi,eax
c00061f8:	eb 05                	jmp    c00061ff <f_truncate+0xf0>
c00061fa:	be 07 00 00 00       	mov    esi,0x7
c00061ff:	89 f0                	mov    eax,esi
c0006201:	83 c4 14             	add    esp,0x14
c0006204:	5b                   	pop    ebx
c0006205:	5e                   	pop    esi
c0006206:	c3                   	ret    

c0006207 <f_unlink>:
c0006207:	56                   	push   esi
c0006208:	b9 02 00 00 00       	mov    ecx,0x2
c000620d:	53                   	push   ebx
c000620e:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006214:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006218:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c000621f:	e8 fa c1 ff ff       	call   c000241e <mount_volume>
c0006224:	85 c0                	test   eax,eax
c0006226:	0f 85 55 01 00 00    	jne    c0006381 <f_unlink+0x17a>
c000622c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006230:	83 ec 0c             	sub    esp,0xc
c0006233:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006237:	68 60 04 00 00       	push   0x460
c000623c:	e8 80 1f 00 00       	call   c00081c1 <ff_memalloc>
c0006241:	83 c4 10             	add    esp,0x10
c0006244:	89 c3                	mov    ebx,eax
c0006246:	b8 11 00 00 00       	mov    eax,0x11
c000624b:	85 db                	test   ebx,ebx
c000624d:	0f 84 2e 01 00 00    	je     c0006381 <f_unlink+0x17a>
c0006253:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006257:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000625d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006260:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006263:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000626a:	8d 44 24 48          	lea    eax,[esp+0x48]
c000626e:	e8 21 e9 ff ff       	call   c0004b94 <follow_path>
c0006273:	85 c0                	test   eax,eax
c0006275:	0f 85 f2 00 00 00    	jne    c000636d <f_unlink+0x166>
c000627b:	b8 06 00 00 00       	mov    eax,0x6
c0006280:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006288:	0f 88 df 00 00 00    	js     c000636d <f_unlink+0x166>
c000628e:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006293:	74 0a                	je     c000629f <f_unlink+0x98>
c0006295:	b8 07 00 00 00       	mov    eax,0x7
c000629a:	e9 ce 00 00 00       	jmp    c000636d <f_unlink+0x166>
c000629f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062a3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00062a7:	8a 02                	mov    al,BYTE PTR [edx]
c00062a9:	3c 04                	cmp    al,0x4
c00062ab:	75 12                	jne    c00062bf <f_unlink+0xb8>
c00062ad:	8d 42 10             	lea    eax,[edx+0x10]
c00062b0:	8d 54 24 20          	lea    edx,[esp+0x20]
c00062b4:	e8 a1 e8 ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c00062b9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00062bd:	eb 0e                	jmp    c00062cd <f_unlink+0xc6>
c00062bf:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00062c6:	e8 3e e8 ff ff       	call   c0004b09 <ld_clust.isra.0>
c00062cb:	89 c6                	mov    esi,eax
c00062cd:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00062d2:	75 12                	jne    c00062e6 <f_unlink+0xdf>
c00062d4:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062d8:	e8 94 d6 ff ff       	call   c0003971 <dir_remove>
c00062dd:	85 c0                	test   eax,eax
c00062df:	74 6c                	je     c000634d <f_unlink+0x146>
c00062e1:	e9 87 00 00 00       	jmp    c000636d <f_unlink+0x166>
c00062e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062ea:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00062f1:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00062f8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00062fb:	75 21                	jne    c000631e <f_unlink+0x117>
c00062fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006301:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006305:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000630c:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006313:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006317:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000631e:	31 d2                	xor    edx,edx
c0006320:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006327:	e8 be cb ff ff       	call   c0002eea <dir_sdi>
c000632c:	85 c0                	test   eax,eax
c000632e:	75 3d                	jne    c000636d <f_unlink+0x166>
c0006330:	31 d2                	xor    edx,edx
c0006332:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006339:	e8 bc d3 ff ff       	call   c00036fa <dir_read>
c000633e:	85 c0                	test   eax,eax
c0006340:	0f 84 4f ff ff ff    	je     c0006295 <f_unlink+0x8e>
c0006346:	83 f8 04             	cmp    eax,0x4
c0006349:	75 22                	jne    c000636d <f_unlink+0x166>
c000634b:	eb 87                	jmp    c00062d4 <f_unlink+0xcd>
c000634d:	85 f6                	test   esi,esi
c000634f:	75 0b                	jne    c000635c <f_unlink+0x155>
c0006351:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006355:	e8 3d df ff ff       	call   c0004297 <sync_fs>
c000635a:	eb 11                	jmp    c000636d <f_unlink+0x166>
c000635c:	31 c9                	xor    ecx,ecx
c000635e:	89 f2                	mov    edx,esi
c0006360:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006364:	e8 78 ce ff ff       	call   c00031e1 <remove_chain>
c0006369:	85 c0                	test   eax,eax
c000636b:	74 e4                	je     c0006351 <f_unlink+0x14a>
c000636d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006371:	83 ec 0c             	sub    esp,0xc
c0006374:	53                   	push   ebx
c0006375:	e8 5d 1e 00 00       	call   c00081d7 <ff_memfree>
c000637a:	83 c4 10             	add    esp,0x10
c000637d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006381:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006387:	5b                   	pop    ebx
c0006388:	5e                   	pop    esi
c0006389:	c3                   	ret    

c000638a <f_mkdir>:
c000638a:	57                   	push   edi
c000638b:	b9 02 00 00 00       	mov    ecx,0x2
c0006390:	56                   	push   esi
c0006391:	53                   	push   ebx
c0006392:	83 c4 80             	add    esp,0xffffff80
c0006395:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006399:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c00063a0:	e8 79 c0 ff ff       	call   c000241e <mount_volume>
c00063a5:	89 c3                	mov    ebx,eax
c00063a7:	85 c0                	test   eax,eax
c00063a9:	0f 85 fe 01 00 00    	jne    c00065ad <f_mkdir+0x223>
c00063af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063b3:	bb 11 00 00 00       	mov    ebx,0x11
c00063b8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00063bc:	83 ec 0c             	sub    esp,0xc
c00063bf:	68 60 04 00 00       	push   0x460
c00063c4:	e8 f8 1d 00 00       	call   c00081c1 <ff_memalloc>
c00063c9:	83 c4 10             	add    esp,0x10
c00063cc:	89 c7                	mov    edi,eax
c00063ce:	85 c0                	test   eax,eax
c00063d0:	0f 84 d7 01 00 00    	je     c00065ad <f_mkdir+0x223>
c00063d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063da:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00063e0:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00063e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00063e6:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00063ed:	8d 44 24 34          	lea    eax,[esp+0x34]
c00063f1:	e8 9e e7 ff ff       	call   c0004b94 <follow_path>
c00063f6:	89 c3                	mov    ebx,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	74 3e                	je     c000643a <f_mkdir+0xb0>
c00063fc:	83 f8 04             	cmp    eax,0x4
c00063ff:	75 3e                	jne    c000643f <f_mkdir+0xb5>
c0006401:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006405:	31 d2                	xor    edx,edx
c0006407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000640b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000640f:	e8 ce cb ff ff       	call   c0002fe2 <create_chain>
c0006414:	89 c6                	mov    esi,eax
c0006416:	85 c0                	test   eax,eax
c0006418:	74 0c                	je     c0006426 <f_mkdir+0x9c>
c000641a:	bb 02 00 00 00       	mov    ebx,0x2
c000641f:	83 f8 01             	cmp    eax,0x1
c0006422:	74 07                	je     c000642b <f_mkdir+0xa1>
c0006424:	eb 2a                	jmp    c0006450 <f_mkdir+0xc6>
c0006426:	bb 07 00 00 00       	mov    ebx,0x7
c000642b:	31 c9                	xor    ecx,ecx
c000642d:	89 f2                	mov    edx,esi
c000642f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006433:	e8 a9 cd ff ff       	call   c00031e1 <remove_chain>
c0006438:	eb 05                	jmp    c000643f <f_mkdir+0xb5>
c000643a:	bb 08 00 00 00       	mov    ebx,0x8
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	57                   	push   edi
c0006443:	e8 8f 1d 00 00       	call   c00081d7 <ff_memfree>
c0006448:	83 c4 10             	add    esp,0x10
c000644b:	e9 5d 01 00 00       	jmp    c00065ad <f_mkdir+0x223>
c0006450:	bb 01 00 00 00       	mov    ebx,0x1
c0006455:	83 f8 ff             	cmp    eax,0xffffffff
c0006458:	74 d1                	je     c000642b <f_mkdir+0xa1>
c000645a:	89 f2                	mov    edx,esi
c000645c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006460:	e8 c4 ce ff ff       	call   c0003329 <dir_clear>
c0006465:	89 c3                	mov    ebx,eax
c0006467:	85 c0                	test   eax,eax
c0006469:	75 c0                	jne    c000642b <f_mkdir+0xa1>
c000646b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000646f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006472:	74 69                	je     c00064dd <f_mkdir+0x153>
c0006474:	b9 0b 00 00 00       	mov    ecx,0xb
c0006479:	83 c0 54             	add    eax,0x54
c000647c:	ba 20 00 00 00       	mov    edx,0x20
c0006481:	e8 9c b5 ff ff       	call   c0001a22 <mem_set>
c0006486:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000648a:	ba 00 00 21 50       	mov    edx,0x50210000
c000648f:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006493:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006497:	83 c0 6a             	add    eax,0x6a
c000649a:	e8 65 b5 ff ff       	call   c0001a04 <st_dword>
c000649f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064a3:	89 f1                	mov    ecx,esi
c00064a5:	8d 50 54             	lea    edx,[eax+0x54]
c00064a8:	e8 85 e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064b1:	b9 20 00 00 00       	mov    ecx,0x20
c00064b6:	8d 50 54             	lea    edx,[eax+0x54]
c00064b9:	83 c0 74             	add    eax,0x74
c00064bc:	e8 4c b5 ff ff       	call   c0001a0d <mem_cpy>
c00064c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c5:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00064c9:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00064cd:	8d 50 74             	lea    edx,[eax+0x74]
c00064d0:	e8 5d e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00064dd:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064e1:	e8 2f db ff ff       	call   c0004015 <dir_register>
c00064e6:	89 c3                	mov    ebx,eax
c00064e8:	85 c0                	test   eax,eax
c00064ea:	0f 85 3b ff ff ff    	jne    c000642b <f_mkdir+0xa1>
c00064f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f7:	75 74                	jne    c000656d <f_mkdir+0x1e3>
c00064f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064fc:	ba 00 00 21 50       	mov    edx,0x50210000
c0006501:	83 c0 0c             	add    eax,0xc
c0006504:	e8 fb b4 ff ff       	call   c0001a04 <st_dword>
c0006509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650d:	89 f2                	mov    edx,esi
c000650f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006512:	83 c0 34             	add    eax,0x34
c0006515:	e8 ea b4 ff ff       	call   c0001a04 <st_dword>
c000651a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000651e:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006522:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006525:	c1 e2 09             	shl    edx,0x9
c0006528:	83 c0 38             	add    eax,0x38
c000652b:	e8 d4 b4 ff ff       	call   c0001a04 <st_dword>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006538:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000653b:	c1 e2 09             	shl    edx,0x9
c000653e:	83 c0 28             	add    eax,0x28
c0006541:	e8 be b4 ff ff       	call   c0001a04 <st_dword>
c0006546:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000654d:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006551:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006554:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006558:	8d 44 24 34          	lea    eax,[esp+0x34]
c000655c:	e8 8b d3 ff ff       	call   c00038ec <store_xdir>
c0006561:	89 c3                	mov    ebx,eax
c0006563:	85 c0                	test   eax,eax
c0006565:	0f 85 d4 fe ff ff    	jne    c000643f <f_mkdir+0xb5>
c000656b:	eb 30                	jmp    c000659d <f_mkdir+0x213>
c000656d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006571:	ba 00 00 21 50       	mov    edx,0x50210000
c0006576:	83 c0 16             	add    eax,0x16
c0006579:	e8 86 b4 ff ff       	call   c0001a04 <st_dword>
c000657e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006582:	89 f1                	mov    ecx,esi
c0006584:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006588:	e8 a5 e5 ff ff       	call   c0004b32 <st_clust.isra.1>
c000658d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006591:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006595:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006599:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	e8 f1 dc ff ff       	call   c0004297 <sync_fs>
c00065a6:	89 c3                	mov    ebx,eax
c00065a8:	e9 92 fe ff ff       	jmp    c000643f <f_mkdir+0xb5>
c00065ad:	83 ec 80             	sub    esp,0xffffff80
c00065b0:	89 d8                	mov    eax,ebx
c00065b2:	5b                   	pop    ebx
c00065b3:	5e                   	pop    esi
c00065b4:	5f                   	pop    edi
c00065b5:	c3                   	ret    

c00065b6 <f_rename>:
c00065b6:	55                   	push   ebp
c00065b7:	57                   	push   edi
c00065b8:	56                   	push   esi
c00065b9:	53                   	push   ebx
c00065ba:	81 ec fc 00 00 00    	sub    esp,0xfc
c00065c0:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00065c7:	e8 a4 b9 ff ff       	call   c0001f70 <get_ldnumber>
c00065cc:	b9 02 00 00 00       	mov    ecx,0x2
c00065d1:	8d 54 24 14          	lea    edx,[esp+0x14]
c00065d5:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00065dc:	e8 3d be ff ff       	call   c000241e <mount_volume>
c00065e1:	85 c0                	test   eax,eax
c00065e3:	0f 85 b5 02 00 00    	jne    c000689e <f_rename+0x2e8>
c00065e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065ed:	83 ec 0c             	sub    esp,0xc
c00065f0:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00065f4:	68 60 04 00 00       	push   0x460
c00065f9:	e8 c3 1b 00 00       	call   c00081c1 <ff_memalloc>
c00065fe:	83 c4 10             	add    esp,0x10
c0006601:	89 c3                	mov    ebx,eax
c0006603:	b8 11 00 00 00       	mov    eax,0x11
c0006608:	85 db                	test   ebx,ebx
c000660a:	0f 84 8e 02 00 00    	je     c000689e <f_rename+0x2e8>
c0006610:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006614:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000661a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000661d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006620:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006627:	8d 44 24 58          	lea    eax,[esp+0x58]
c000662b:	e8 64 e5 ff ff       	call   c0004b94 <follow_path>
c0006630:	85 c0                	test   eax,eax
c0006632:	0f 85 52 02 00 00    	jne    c000688a <f_rename+0x2d4>
c0006638:	b8 06 00 00 00       	mov    eax,0x6
c000663d:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006645:	0f 85 3f 02 00 00    	jne    c000688a <f_rename+0x2d4>
c000664b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000664f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006652:	0f 85 05 01 00 00    	jne    c000675d <f_rename+0x1a7>
c0006658:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000665b:	b9 40 00 00 00       	mov    ecx,0x40
c0006660:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006664:	e8 a4 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006669:	b9 4c 00 00 00       	mov    ecx,0x4c
c000666e:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006672:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006679:	e8 8f b3 ff ff       	call   c0001a0d <mem_cpy>
c000667e:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006685:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000668c:	e8 03 e5 ff ff       	call   c0004b94 <follow_path>
c0006691:	85 c0                	test   eax,eax
c0006693:	75 29                	jne    c00066be <f_rename+0x108>
c0006695:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006699:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00066a0:	74 0a                	je     c00066ac <f_rename+0xf6>
c00066a2:	b8 08 00 00 00       	mov    eax,0x8
c00066a7:	e9 de 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c00066ac:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00066b3:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00066ba:	75 e6                	jne    c00066a2 <f_rename+0xec>
c00066bc:	eb 09                	jmp    c00066c7 <f_rename+0x111>
c00066be:	83 f8 04             	cmp    eax,0x4
c00066c1:	0f 85 c3 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066c7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066ce:	e8 42 d9 ff ff       	call   c0004015 <dir_register>
c00066d3:	85 c0                	test   eax,eax
c00066d5:	0f 85 af 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066df:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00066e2:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00066e5:	89 c5                	mov    ebp,eax
c00066e7:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00066ea:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00066ee:	8d 46 24             	lea    eax,[esi+0x24]
c00066f1:	e8 98 b2 ff ff       	call   c000198e <ld_word>
c00066f6:	b9 40 00 00 00       	mov    ecx,0x40
c00066fb:	89 c7                	mov    edi,eax
c00066fd:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006701:	89 f0                	mov    eax,esi
c0006703:	e8 05 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006708:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000670c:	89 e9                	mov    ecx,ebp
c000670e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006711:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006714:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006718:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000671c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671f:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006722:	0f b7 d7             	movzx  edx,di
c0006725:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006728:	83 c0 24             	add    eax,0x24
c000672b:	e8 d0 b2 ff ff       	call   c0001a00 <st_word>
c0006730:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006734:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006737:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c000673a:	a8 10                	test   al,0x10
c000673c:	75 06                	jne    c0006744 <f_rename+0x18e>
c000673e:	83 c8 20             	or     eax,0x20
c0006741:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006744:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000674b:	e8 9c d1 ff ff       	call   c00038ec <store_xdir>
c0006750:	85 c0                	test   eax,eax
c0006752:	0f 84 1c 01 00 00    	je     c0006874 <f_rename+0x2be>
c0006758:	e9 2d 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c000675d:	b9 20 00 00 00       	mov    ecx,0x20
c0006762:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006769:	8d 44 24 18          	lea    eax,[esp+0x18]
c000676d:	e8 9b b2 ff ff       	call   c0001a0d <mem_cpy>
c0006772:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006777:	8d 54 24 58          	lea    edx,[esp+0x58]
c000677b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006782:	e8 86 b2 ff ff       	call   c0001a0d <mem_cpy>
c0006787:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000678e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006795:	e8 fa e3 ff ff       	call   c0004b94 <follow_path>
c000679a:	85 c0                	test   eax,eax
c000679c:	75 27                	jne    c00067c5 <f_rename+0x20f>
c000679e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00067a2:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00067a9:	0f 85 f3 fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067af:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00067b6:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00067bd:	0f 85 df fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067c3:	eb 09                	jmp    c00067ce <f_rename+0x218>
c00067c5:	83 f8 04             	cmp    eax,0x4
c00067c8:	0f 85 bc 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067ce:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067d5:	e8 3b d8 ff ff       	call   c0004015 <dir_register>
c00067da:	85 c0                	test   eax,eax
c00067dc:	0f 85 a8 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067e2:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00067e9:	b9 13 00 00 00       	mov    ecx,0x13
c00067ee:	8d 46 0d             	lea    eax,[esi+0xd]
c00067f1:	8d 54 24 25          	lea    edx,[esp+0x25]
c00067f5:	e8 13 b2 ff ff       	call   c0001a0d <mem_cpy>
c00067fa:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00067fe:	a8 10                	test   al,0x10
c0006800:	75 03                	jne    c0006805 <f_rename+0x24f>
c0006802:	83 c8 20             	or     eax,0x20
c0006805:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006808:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000680c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006810:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006814:	74 5e                	je     c0006874 <f_rename+0x2be>
c0006816:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c000681d:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006821:	74 51                	je     c0006874 <f_rename+0x2be>
c0006823:	89 f2                	mov    edx,esi
c0006825:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006829:	8a 07                	mov    al,BYTE PTR [edi]
c000682b:	e8 d9 e2 ff ff       	call   c0004b09 <ld_clust.isra.0>
c0006830:	89 c2                	mov    edx,eax
c0006832:	89 f8                	mov    eax,edi
c0006834:	e8 ee b3 ff ff       	call   c0001c27 <clst2sect>
c0006839:	89 c6                	mov    esi,eax
c000683b:	89 d1                	mov    ecx,edx
c000683d:	b8 02 00 00 00       	mov    eax,0x2
c0006842:	09 f2                	or     edx,esi
c0006844:	74 44                	je     c000688a <f_rename+0x2d4>
c0006846:	89 f2                	mov    edx,esi
c0006848:	89 f8                	mov    eax,edi
c000684a:	e8 1d b9 ff ff       	call   c000216c <move_window>
c000684f:	85 c0                	test   eax,eax
c0006851:	75 37                	jne    c000688a <f_rename+0x2d4>
c0006853:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006857:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c000685b:	75 17                	jne    c0006874 <f_rename+0x2be>
c000685d:	8d 50 74             	lea    edx,[eax+0x74]
c0006860:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006867:	e8 c6 e2 ff ff       	call   c0004b32 <st_clust.isra.1>
c000686c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006870:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006874:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006878:	e8 f4 d0 ff ff       	call   c0003971 <dir_remove>
c000687d:	85 c0                	test   eax,eax
c000687f:	75 09                	jne    c000688a <f_rename+0x2d4>
c0006881:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006885:	e8 0d da ff ff       	call   c0004297 <sync_fs>
c000688a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000688e:	83 ec 0c             	sub    esp,0xc
c0006891:	53                   	push   ebx
c0006892:	e8 40 19 00 00       	call   c00081d7 <ff_memfree>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000689e:	81 c4 fc 00 00 00    	add    esp,0xfc
c00068a4:	5b                   	pop    ebx
c00068a5:	5e                   	pop    esi
c00068a6:	5f                   	pop    edi
c00068a7:	5d                   	pop    ebp
c00068a8:	c3                   	ret    

c00068a9 <f_chmod>:
c00068a9:	57                   	push   edi
c00068aa:	b9 02 00 00 00       	mov    ecx,0x2
c00068af:	56                   	push   esi
c00068b0:	53                   	push   ebx
c00068b1:	83 ec 60             	sub    esp,0x60
c00068b4:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00068b8:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00068bc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00068c0:	8d 44 24 70          	lea    eax,[esp+0x70]
c00068c4:	e8 55 bb ff ff       	call   c000241e <mount_volume>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 af 00 00 00    	jne    c0006980 <f_chmod+0xd7>
c00068d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068d5:	83 ec 0c             	sub    esp,0xc
c00068d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00068dc:	68 60 04 00 00       	push   0x460
c00068e1:	e8 db 18 00 00       	call   c00081c1 <ff_memalloc>
c00068e6:	83 c4 10             	add    esp,0x10
c00068e9:	89 c6                	mov    esi,eax
c00068eb:	b8 11 00 00 00       	mov    eax,0x11
c00068f0:	85 f6                	test   esi,esi
c00068f2:	0f 84 88 00 00 00    	je     c0006980 <f_chmod+0xd7>
c00068f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068fc:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006902:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006905:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006908:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000690c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006910:	e8 7f e2 ff ff       	call   c0004b94 <follow_path>
c0006915:	85 c0                	test   eax,eax
c0006917:	75 53                	jne    c000696c <f_chmod+0xc3>
c0006919:	b8 06 00 00 00       	mov    eax,0x6
c000691e:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006923:	75 47                	jne    c000696c <f_chmod+0xc3>
c0006925:	89 f9                	mov    ecx,edi
c0006927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000692b:	83 e1 27             	and    ecx,0x27
c000692e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006931:	75 1d                	jne    c0006950 <f_chmod+0xa7>
c0006933:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006936:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006939:	21 cb                	and    ebx,ecx
c000693b:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c000693e:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006941:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006945:	e8 a2 cf ff ff       	call   c00038ec <store_xdir>
c000694a:	85 c0                	test   eax,eax
c000694c:	75 1e                	jne    c000696c <f_chmod+0xc3>
c000694e:	eb 13                	jmp    c0006963 <f_chmod+0xba>
c0006950:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006954:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006957:	21 cb                	and    ebx,ecx
c0006959:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c000695c:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c000695f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006967:	e8 2b d9 ff ff       	call   c0004297 <sync_fs>
c000696c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006970:	83 ec 0c             	sub    esp,0xc
c0006973:	56                   	push   esi
c0006974:	e8 5e 18 00 00       	call   c00081d7 <ff_memfree>
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006980:	83 c4 60             	add    esp,0x60
c0006983:	5b                   	pop    ebx
c0006984:	5e                   	pop    esi
c0006985:	5f                   	pop    edi
c0006986:	c3                   	ret    

c0006987 <f_utime>:
c0006987:	56                   	push   esi
c0006988:	b9 02 00 00 00       	mov    ecx,0x2
c000698d:	53                   	push   ebx
c000698e:	83 ec 64             	sub    esp,0x64
c0006991:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006995:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006999:	8d 44 24 70          	lea    eax,[esp+0x70]
c000699d:	e8 7c ba ff ff       	call   c000241e <mount_volume>
c00069a2:	85 c0                	test   eax,eax
c00069a4:	0f 85 b5 00 00 00    	jne    c0006a5f <f_utime+0xd8>
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	83 ec 0c             	sub    esp,0xc
c00069b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069b5:	68 60 04 00 00       	push   0x460
c00069ba:	e8 02 18 00 00       	call   c00081c1 <ff_memalloc>
c00069bf:	83 c4 10             	add    esp,0x10
c00069c2:	89 c3                	mov    ebx,eax
c00069c4:	b8 11 00 00 00       	mov    eax,0x11
c00069c9:	85 db                	test   ebx,ebx
c00069cb:	0f 84 8e 00 00 00    	je     c0006a5f <f_utime+0xd8>
c00069d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069d5:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00069db:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00069de:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069e1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069e9:	e8 a6 e1 ff ff       	call   c0004b94 <follow_path>
c00069ee:	85 c0                	test   eax,eax
c00069f0:	75 59                	jne    c0006a4b <f_utime+0xc4>
c00069f2:	b8 06 00 00 00       	mov    eax,0x6
c00069f7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069fc:	75 4d                	jne    c0006a4b <f_utime+0xc4>
c00069fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a02:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a06:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a0a:	c1 e2 10             	shl    edx,0x10
c0006a0d:	09 ca                	or     edx,ecx
c0006a0f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a12:	75 1a                	jne    c0006a2e <f_utime+0xa7>
c0006a14:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a17:	83 c0 0c             	add    eax,0xc
c0006a1a:	e8 e5 af ff ff       	call   c0001a04 <st_dword>
c0006a1f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a23:	e8 c4 ce ff ff       	call   c00038ec <store_xdir>
c0006a28:	85 c0                	test   eax,eax
c0006a2a:	75 1f                	jne    c0006a4b <f_utime+0xc4>
c0006a2c:	eb 14                	jmp    c0006a42 <f_utime+0xbb>
c0006a2e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006a32:	83 c0 16             	add    eax,0x16
c0006a35:	e8 ca af ff ff       	call   c0001a04 <st_dword>
c0006a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a3e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a46:	e8 4c d8 ff ff       	call   c0004297 <sync_fs>
c0006a4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a4f:	83 ec 0c             	sub    esp,0xc
c0006a52:	53                   	push   ebx
c0006a53:	e8 7f 17 00 00       	call   c00081d7 <ff_memfree>
c0006a58:	83 c4 10             	add    esp,0x10
c0006a5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a5f:	83 c4 64             	add    esp,0x64
c0006a62:	5b                   	pop    ebx
c0006a63:	5e                   	pop    esi
c0006a64:	c3                   	ret    

c0006a65 <f_getlabel>:
c0006a65:	55                   	push   ebp
c0006a66:	31 c9                	xor    ecx,ecx
c0006a68:	57                   	push   edi
c0006a69:	56                   	push   esi
c0006a6a:	53                   	push   ebx
c0006a6b:	83 ec 6c             	sub    esp,0x6c
c0006a6e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a72:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006a79:	e8 a0 b9 ff ff       	call   c000241e <mount_volume>
c0006a7e:	89 c6                	mov    esi,eax
c0006a80:	85 c0                	test   eax,eax
c0006a82:	0f 85 c1 01 00 00    	jne    c0006c49 <f_getlabel+0x1e4>
c0006a88:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006a90:	0f 84 5f 01 00 00    	je     c0006bf5 <f_getlabel+0x190>
c0006a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a9a:	31 d2                	xor    edx,edx
c0006a9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006aa0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006aa8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aac:	e8 39 c4 ff ff       	call   c0002eea <dir_sdi>
c0006ab1:	85 c0                	test   eax,eax
c0006ab3:	0f 85 2d 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006ab9:	ba 01 00 00 00       	mov    edx,0x1
c0006abe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ac2:	e8 33 cc ff ff       	call   c00036fa <dir_read>
c0006ac7:	85 c0                	test   eax,eax
c0006ac9:	0f 85 17 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ad3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ad6:	74 09                	je     c0006ae1 <f_getlabel+0x7c>
c0006ad8:	31 db                	xor    ebx,ebx
c0006ada:	31 c9                	xor    ecx,ecx
c0006adc:	e9 c8 00 00 00       	jmp    c0006ba9 <f_getlabel+0x144>
c0006ae1:	31 ed                	xor    ebp,ebp
c0006ae3:	31 db                	xor    ebx,ebx
c0006ae5:	31 ff                	xor    edi,edi
c0006ae7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aeb:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006aef:	39 fa                	cmp    edx,edi
c0006af1:	76 4b                	jbe    c0006b3e <f_getlabel+0xd9>
c0006af3:	47                   	inc    edi
c0006af4:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006af7:	01 d0                	add    eax,edx
c0006af9:	e8 90 ae ff ff       	call   c000198e <ld_word>
c0006afe:	66 85 ed             	test   bp,bp
c0006b01:	75 0d                	jne    c0006b10 <f_getlabel+0xab>
c0006b03:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b09:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b0e:	76 28                	jbe    c0006b38 <f_getlabel+0xd3>
c0006b10:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b17:	89 e9                	mov    ecx,ebp
c0006b19:	01 da                	add    edx,ebx
c0006b1b:	c1 e1 10             	shl    ecx,0x10
c0006b1e:	0f b7 c0             	movzx  eax,ax
c0006b21:	09 c8                	or     eax,ecx
c0006b23:	b9 04 00 00 00       	mov    ecx,0x4
c0006b28:	e8 01 b0 ff ff       	call   c0001b2e <put_utf>
c0006b2d:	84 c0                	test   al,al
c0006b2f:	74 0b                	je     c0006b3c <f_getlabel+0xd7>
c0006b31:	0f b6 c0             	movzx  eax,al
c0006b34:	01 c3                	add    ebx,eax
c0006b36:	31 c0                	xor    eax,eax
c0006b38:	89 c5                	mov    ebp,eax
c0006b3a:	eb ab                	jmp    c0006ae7 <f_getlabel+0x82>
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	66 85 ed             	test   bp,bp
c0006b41:	74 02                	je     c0006b45 <f_getlabel+0xe0>
c0006b43:	31 db                	xor    ebx,ebx
c0006b45:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006b4c:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006b50:	e9 a0 00 00 00       	jmp    c0006bf5 <f_getlabel+0x190>
c0006b55:	83 ff 0b             	cmp    edi,0xb
c0006b58:	74 11                	je     c0006b6b <f_getlabel+0x106>
c0006b5a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006b5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b63:	8d 79 02             	lea    edi,[ecx+0x2]
c0006b66:	c1 e0 08             	shl    eax,0x8
c0006b69:	09 c2                	or     edx,eax
c0006b6b:	0f b7 d2             	movzx  edx,dx
c0006b6e:	50                   	push   eax
c0006b6f:	50                   	push   eax
c0006b70:	68 b5 01 00 00       	push   0x1b5
c0006b75:	52                   	push   edx
c0006b76:	e8 03 17 00 00       	call   c000827e <ff_oem2uni>
c0006b7b:	83 c4 10             	add    esp,0x10
c0006b7e:	66 85 c0             	test   ax,ax
c0006b81:	74 46                	je     c0006bc9 <f_getlabel+0x164>
c0006b83:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b8a:	0f b7 c0             	movzx  eax,ax
c0006b8d:	01 da                	add    edx,ebx
c0006b8f:	b9 04 00 00 00       	mov    ecx,0x4
c0006b94:	e8 95 af ff ff       	call   c0001b2e <put_utf>
c0006b99:	84 c0                	test   al,al
c0006b9b:	74 2c                	je     c0006bc9 <f_getlabel+0x164>
c0006b9d:	0f b6 c0             	movzx  eax,al
c0006ba0:	01 c3                	add    ebx,eax
c0006ba2:	83 ff 0b             	cmp    edi,0xb
c0006ba5:	74 24                	je     c0006bcb <f_getlabel+0x166>
c0006ba7:	89 f9                	mov    ecx,edi
c0006ba9:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006bad:	8d 79 01             	lea    edi,[ecx+0x1]
c0006bb0:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006bb5:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006bba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bbe:	e8 9f ae ff ff       	call   c0001a62 <dbc_1st>
c0006bc3:	85 c0                	test   eax,eax
c0006bc5:	74 a4                	je     c0006b6b <f_getlabel+0x106>
c0006bc7:	eb 8c                	jmp    c0006b55 <f_getlabel+0xf0>
c0006bc9:	31 db                	xor    ebx,ebx
c0006bcb:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006bd2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006bd5:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006bdc:	74 17                	je     c0006bf5 <f_getlabel+0x190>
c0006bde:	4b                   	dec    ebx
c0006bdf:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006be2:	74 ee                	je     c0006bd2 <f_getlabel+0x16d>
c0006be4:	eb 0f                	jmp    c0006bf5 <f_getlabel+0x190>
c0006be6:	83 f8 04             	cmp    eax,0x4
c0006be9:	75 5c                	jne    c0006c47 <f_getlabel+0x1e2>
c0006beb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bf2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006bf5:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006bfd:	74 4a                	je     c0006c49 <f_getlabel+0x1e4>
c0006bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c03:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c06:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c09:	e8 5e b5 ff ff       	call   c000216c <move_window>
c0006c0e:	89 c6                	mov    esi,eax
c0006c10:	85 c0                	test   eax,eax
c0006c12:	75 35                	jne    c0006c49 <f_getlabel+0x1e4>
c0006c14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c18:	b8 43 00 00 00       	mov    eax,0x43
c0006c1d:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c1f:	80 f9 03             	cmp    cl,0x3
c0006c22:	74 0f                	je     c0006c33 <f_getlabel+0x1ce>
c0006c24:	31 c0                	xor    eax,eax
c0006c26:	80 f9 04             	cmp    cl,0x4
c0006c29:	0f 94 c0             	sete   al
c0006c2c:	48                   	dec    eax
c0006c2d:	83 e0 c3             	and    eax,0xffffffc3
c0006c30:	83 c0 64             	add    eax,0x64
c0006c33:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006c37:	e8 5f ad ff ff       	call   c000199b <ld_dword>
c0006c3c:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006c43:	89 07                	mov    DWORD PTR [edi],eax
c0006c45:	eb 02                	jmp    c0006c49 <f_getlabel+0x1e4>
c0006c47:	89 c6                	mov    esi,eax
c0006c49:	83 c4 6c             	add    esp,0x6c
c0006c4c:	89 f0                	mov    eax,esi
c0006c4e:	5b                   	pop    ebx
c0006c4f:	5e                   	pop    esi
c0006c50:	5f                   	pop    edi
c0006c51:	5d                   	pop    ebp
c0006c52:	c3                   	ret    

c0006c53 <f_setlabel>:
c0006c53:	56                   	push   esi
c0006c54:	b9 02 00 00 00       	mov    ecx,0x2
c0006c59:	53                   	push   ebx
c0006c5a:	83 ec 74             	sub    esp,0x74
c0006c5d:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006c61:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c68:	e8 b1 b7 ff ff       	call   c000241e <mount_volume>
c0006c6d:	89 c6                	mov    esi,eax
c0006c6f:	85 c0                	test   eax,eax
c0006c71:	0f 85 41 02 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006c77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c7b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c7e:	0f 85 8e 00 00 00    	jne    c0006d12 <f_setlabel+0xbf>
c0006c84:	b9 16 00 00 00       	mov    ecx,0x16
c0006c89:	31 d2                	xor    edx,edx
c0006c8b:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006c8f:	31 db                	xor    ebx,ebx
c0006c91:	e8 8c ad ff ff       	call   c0001a22 <mem_set>
c0006c96:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006c9d:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ca0:	0f 86 0a 01 00 00    	jbe    c0006db0 <f_setlabel+0x15d>
c0006ca6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cad:	e8 b6 ad ff ff       	call   c0001a68 <tchar2uni>
c0006cb2:	89 c6                	mov    esi,eax
c0006cb4:	3d ff ff 00 00       	cmp    eax,0xffff
c0006cb9:	76 2a                	jbe    c0006ce5 <f_setlabel+0x92>
c0006cbb:	83 f8 ff             	cmp    eax,0xffffffff
c0006cbe:	74 05                	je     c0006cc5 <f_setlabel+0x72>
c0006cc0:	83 fb 09             	cmp    ebx,0x9
c0006cc3:	76 0a                	jbe    c0006ccf <f_setlabel+0x7c>
c0006cc5:	be 06 00 00 00       	mov    esi,0x6
c0006cca:	e9 e9 01 00 00       	jmp    c0006eb8 <f_setlabel+0x265>
c0006ccf:	89 c2                	mov    edx,eax
c0006cd1:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006cd5:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006cd8:	c1 ea 10             	shr    edx,0x10
c0006cdb:	01 c8                	add    eax,ecx
c0006cdd:	43                   	inc    ebx
c0006cde:	e8 1d ad ff ff       	call   c0001a00 <st_word>
c0006ce3:	eb 04                	jmp    c0006ce9 <f_setlabel+0x96>
c0006ce5:	85 c0                	test   eax,eax
c0006ce7:	74 dc                	je     c0006cc5 <f_setlabel+0x72>
c0006ce9:	89 f2                	mov    edx,esi
c0006ceb:	b8 f7 f3 01 c0       	mov    eax,0xc001f3f7
c0006cf0:	e8 5b ad ff ff       	call   c0001a50 <chk_chr>
c0006cf5:	85 c0                	test   eax,eax
c0006cf7:	75 cc                	jne    c0006cc5 <f_setlabel+0x72>
c0006cf9:	83 fb 0a             	cmp    ebx,0xa
c0006cfc:	77 c7                	ja     c0006cc5 <f_setlabel+0x72>
c0006cfe:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d01:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d05:	0f b7 d6             	movzx  edx,si
c0006d08:	01 c8                	add    eax,ecx
c0006d0a:	43                   	inc    ebx
c0006d0b:	e8 f0 ac ff ff       	call   c0001a00 <st_word>
c0006d10:	eb 84                	jmp    c0006c96 <f_setlabel+0x43>
c0006d12:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d17:	ba 20 00 00 00       	mov    edx,0x20
c0006d1c:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d20:	31 db                	xor    ebx,ebx
c0006d22:	e8 fb ac ff ff       	call   c0001a22 <mem_set>
c0006d27:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d2e:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d31:	76 60                	jbe    c0006d93 <f_setlabel+0x140>
c0006d33:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d3a:	e8 29 ad ff ff       	call   c0001a68 <tchar2uni>
c0006d3f:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d44:	0f 87 7b ff ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006d4a:	83 ec 0c             	sub    esp,0xc
c0006d4d:	50                   	push   eax
c0006d4e:	e8 97 15 00 00       	call   c00082ea <ff_wtoupper>
c0006d53:	5a                   	pop    edx
c0006d54:	59                   	pop    ecx
c0006d55:	68 b5 01 00 00       	push   0x1b5
c0006d5a:	50                   	push   eax
c0006d5b:	e8 8e 14 00 00       	call   c00081ee <ff_uni2oem>
c0006d60:	83 c4 10             	add    esp,0x10
c0006d63:	89 c6                	mov    esi,eax
c0006d65:	66 85 c0             	test   ax,ax
c0006d68:	0f 84 57 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d6e:	0f b7 d0             	movzx  edx,ax
c0006d71:	b8 f0 f3 01 c0       	mov    eax,0xc001f3f0
c0006d76:	e8 d5 ac ff ff       	call   c0001a50 <chk_chr>
c0006d7b:	85 c0                	test   eax,eax
c0006d7d:	0f 85 42 ff ff ff    	jne    c0006cc5 <f_setlabel+0x72>
c0006d83:	66 81 fe ff 00       	cmp    si,0xff
c0006d88:	0f 87 14 01 00 00    	ja     c0006ea2 <f_setlabel+0x24f>
c0006d8e:	e9 fa 00 00 00       	jmp    c0006e8d <f_setlabel+0x23a>
c0006d93:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006d98:	0f 84 27 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d9e:	85 db                	test   ebx,ebx
c0006da0:	74 0e                	je     c0006db0 <f_setlabel+0x15d>
c0006da2:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006da5:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006daa:	75 04                	jne    c0006db0 <f_setlabel+0x15d>
c0006dac:	89 c3                	mov    ebx,eax
c0006dae:	eb ee                	jmp    c0006d9e <f_setlabel+0x14b>
c0006db0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006db4:	31 d2                	xor    edx,edx
c0006db6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006dba:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006dc2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dc6:	e8 1f c1 ff ff       	call   c0002eea <dir_sdi>
c0006dcb:	89 c6                	mov    esi,eax
c0006dcd:	85 c0                	test   eax,eax
c0006dcf:	0f 85 e3 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006dd5:	ba 01 00 00 00       	mov    edx,0x1
c0006dda:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dde:	e8 17 c9 ff ff       	call   c00036fa <dir_read>
c0006de3:	85 c0                	test   eax,eax
c0006de5:	75 21                	jne    c0006e08 <f_setlabel+0x1b5>
c0006de7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006deb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006def:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006df2:	74 5d                	je     c0006e51 <f_setlabel+0x1fe>
c0006df4:	85 db                	test   ebx,ebx
c0006df6:	74 0b                	je     c0006e03 <f_setlabel+0x1b0>
c0006df8:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dfd:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e01:	eb 70                	jmp    c0006e73 <f_setlabel+0x220>
c0006e03:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e06:	eb 70                	jmp    c0006e78 <f_setlabel+0x225>
c0006e08:	83 f8 04             	cmp    eax,0x4
c0006e0b:	75 7c                	jne    c0006e89 <f_setlabel+0x236>
c0006e0d:	85 db                	test   ebx,ebx
c0006e0f:	0f 84 a3 00 00 00    	je     c0006eb8 <f_setlabel+0x265>
c0006e15:	ba 01 00 00 00       	mov    edx,0x1
c0006e1a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e1e:	e8 51 ca ff ff       	call   c0003874 <dir_alloc>
c0006e23:	89 c6                	mov    esi,eax
c0006e25:	85 c0                	test   eax,eax
c0006e27:	0f 85 8b 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006e2d:	31 d2                	xor    edx,edx
c0006e2f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e33:	b9 20 00 00 00       	mov    ecx,0x20
c0006e38:	e8 e5 ab ff ff       	call   c0001a22 <mem_set>
c0006e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e41:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e44:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e48:	75 18                	jne    c0006e62 <f_setlabel+0x20f>
c0006e4a:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006e4d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e51:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006e54:	b9 16 00 00 00       	mov    ecx,0x16
c0006e59:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e5d:	83 c0 02             	add    eax,0x2
c0006e60:	eb 9b                	jmp    c0006dfd <f_setlabel+0x1aa>
c0006e62:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006e66:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e6b:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e6f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e73:	e8 95 ab ff ff       	call   c0001a0d <mem_cpy>
c0006e78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006e80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e84:	e8 0e d4 ff ff       	call   c0004297 <sync_fs>
c0006e89:	89 c6                	mov    esi,eax
c0006e8b:	eb 2b                	jmp    c0006eb8 <f_setlabel+0x265>
c0006e8d:	83 fb 0a             	cmp    ebx,0xa
c0006e90:	0f 87 2f fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006e96:	89 f0                	mov    eax,esi
c0006e98:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006e9c:	43                   	inc    ebx
c0006e9d:	e9 85 fe ff ff       	jmp    c0006d27 <f_setlabel+0xd4>
c0006ea2:	83 fb 09             	cmp    ebx,0x9
c0006ea5:	0f 87 1a fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006eab:	89 f0                	mov    eax,esi
c0006ead:	66 c1 e8 08          	shr    ax,0x8
c0006eb1:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006eb5:	43                   	inc    ebx
c0006eb6:	eb de                	jmp    c0006e96 <f_setlabel+0x243>
c0006eb8:	89 f0                	mov    eax,esi
c0006eba:	83 c4 74             	add    esp,0x74
c0006ebd:	5b                   	pop    ebx
c0006ebe:	5e                   	pop    esi
c0006ebf:	c3                   	ret    

c0006ec0 <f_forward>:
c0006ec0:	55                   	push   ebp
c0006ec1:	57                   	push   edi
c0006ec2:	56                   	push   esi
c0006ec3:	53                   	push   ebx
c0006ec4:	83 ec 2c             	sub    esp,0x2c
c0006ec7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ecb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006ecf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006ed5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006ed9:	89 d8                	mov    eax,ebx
c0006edb:	e8 b1 b1 ff ff       	call   c0002091 <validate>
c0006ee0:	89 c5                	mov    ebp,eax
c0006ee2:	85 c0                	test   eax,eax
c0006ee4:	0f 85 aa 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006eea:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006eee:	85 ed                	test   ebp,ebp
c0006ef0:	0f 85 9e 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006ef6:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006efa:	0f 84 8f 01 00 00    	je     c000708f <f_forward+0x1cf>
c0006f00:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f03:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f06:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f09:	bf 00 00 00 00       	mov    edi,0x0
c0006f0e:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f11:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f15:	89 d1                	mov    ecx,edx
c0006f17:	19 f9                	sbb    ecx,edi
c0006f19:	0f 83 cf 00 00 00    	jae    c0006fee <f_forward+0x12e>
c0006f1f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f23:	e9 c6 00 00 00       	jmp    c0006fee <f_forward+0x12e>
c0006f28:	50                   	push   eax
c0006f29:	50                   	push   eax
c0006f2a:	6a 00                	push   0x0
c0006f2c:	6a 00                	push   0x0
c0006f2e:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006f32:	83 c4 10             	add    esp,0x10
c0006f35:	85 c0                	test   eax,eax
c0006f37:	0f 84 57 01 00 00    	je     c0007094 <f_forward+0x1d4>
c0006f3d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006f40:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f44:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006f47:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006f4b:	89 d7                	mov    edi,edx
c0006f4d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006f50:	89 c6                	mov    esi,eax
c0006f52:	0f ac fe 09          	shrd   esi,edi,0x9
c0006f56:	21 ce                	and    esi,ecx
c0006f58:	89 c1                	mov    ecx,eax
c0006f5a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006f60:	0f 84 98 00 00 00    	je     c0006ffe <f_forward+0x13e>
c0006f66:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f6a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006f6d:	89 c8                	mov    eax,ecx
c0006f6f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006f73:	e8 af ac ff ff       	call   c0001c27 <clst2sect>
c0006f78:	89 d7                	mov    edi,edx
c0006f7a:	09 c7                	or     edi,eax
c0006f7c:	0f 84 9e 00 00 00    	je     c0007020 <f_forward+0x160>
c0006f82:	31 ff                	xor    edi,edi
c0006f84:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006f87:	01 c6                	add    esi,eax
c0006f89:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0006f8d:	11 d7                	adc    edi,edx
c0006f8f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0006f92:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0006f95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006f99:	39 fa                	cmp    edx,edi
c0006f9b:	0f 85 a2 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa1:	39 f0                	cmp    eax,esi
c0006fa3:	0f 85 9a 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fac:	ba 00 02 00 00       	mov    edx,0x200
c0006fb1:	25 ff 01 00 00       	and    eax,0x1ff
c0006fb6:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0006fba:	29 c2                	sub    edx,eax
c0006fbc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0006fbf:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0006fc2:	39 d1                	cmp    ecx,edx
c0006fc4:	76 02                	jbe    c0006fc8 <f_forward+0x108>
c0006fc6:	89 d1                	mov    ecx,edx
c0006fc8:	8d 73 50             	lea    esi,[ebx+0x50]
c0006fcb:	52                   	push   edx
c0006fcc:	01 c6                	add    esi,eax
c0006fce:	52                   	push   edx
c0006fcf:	51                   	push   ecx
c0006fd0:	56                   	push   esi
c0006fd1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fd5:	83 c4 10             	add    esp,0x10
c0006fd8:	85 c0                	test   eax,eax
c0006fda:	74 44                	je     c0007020 <f_forward+0x160>
c0006fdc:	31 ff                	xor    edi,edi
c0006fde:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0006fe1:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0006fe4:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0006fe8:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0006fec:	01 07                	add    DWORD PTR [edi],eax
c0006fee:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0006ff3:	0f 85 2f ff ff ff    	jne    c0006f28 <f_forward+0x68>
c0006ff9:	e9 96 00 00 00       	jmp    c0007094 <f_forward+0x1d4>
c0006ffe:	85 f6                	test   esi,esi
c0007000:	0f 85 60 ff ff ff    	jne    c0006f66 <f_forward+0xa6>
c0007006:	89 d7                	mov    edi,edx
c0007008:	09 c7                	or     edi,eax
c000700a:	75 05                	jne    c0007011 <f_forward+0x151>
c000700c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000700f:	eb 0a                	jmp    c000701b <f_forward+0x15b>
c0007011:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007014:	89 d8                	mov    eax,ebx
c0007016:	e8 d9 bc ff ff       	call   c0002cf4 <get_fat>
c000701b:	83 f8 01             	cmp    eax,0x1
c000701e:	77 0b                	ja     c000702b <f_forward+0x16b>
c0007020:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007024:	bd 02 00 00 00       	mov    ebp,0x2
c0007029:	eb 69                	jmp    c0007094 <f_forward+0x1d4>
c000702b:	83 f8 ff             	cmp    eax,0xffffffff
c000702e:	75 0b                	jne    c000703b <f_forward+0x17b>
c0007030:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007034:	bd 01 00 00 00       	mov    ebp,0x1
c0007039:	eb 59                	jmp    c0007094 <f_forward+0x1d4>
c000703b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000703e:	e9 23 ff ff ff       	jmp    c0006f66 <f_forward+0xa6>
c0007043:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007047:	79 20                	jns    c0007069 <f_forward+0x1a9>
c0007049:	83 ec 0c             	sub    esp,0xc
c000704c:	6a 01                	push   0x1
c000704e:	52                   	push   edx
c000704f:	50                   	push   eax
c0007050:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007054:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007058:	50                   	push   eax
c0007059:	e8 fb a8 ff ff       	call   c0001959 <disk_write>
c000705e:	83 c4 20             	add    esp,0x20
c0007061:	85 c0                	test   eax,eax
c0007063:	75 cb                	jne    c0007030 <f_forward+0x170>
c0007065:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007069:	83 ec 0c             	sub    esp,0xc
c000706c:	6a 01                	push   0x1
c000706e:	57                   	push   edi
c000706f:	56                   	push   esi
c0007070:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007074:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007078:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000707c:	50                   	push   eax
c000707d:	e8 c1 a8 ff ff       	call   c0001943 <disk_read>
c0007082:	83 c4 20             	add    esp,0x20
c0007085:	85 c0                	test   eax,eax
c0007087:	0f 84 1c ff ff ff    	je     c0006fa9 <f_forward+0xe9>
c000708d:	eb a1                	jmp    c0007030 <f_forward+0x170>
c000708f:	bd 07 00 00 00       	mov    ebp,0x7
c0007094:	83 c4 2c             	add    esp,0x2c
c0007097:	89 e8                	mov    eax,ebp
c0007099:	5b                   	pop    ebx
c000709a:	5e                   	pop    esi
c000709b:	5f                   	pop    edi
c000709c:	5d                   	pop    ebp
c000709d:	c3                   	ret    

c000709e <f_mkfs>:
c000709e:	55                   	push   ebp
c000709f:	57                   	push   edi
c00070a0:	56                   	push   esi
c00070a1:	53                   	push   ebx
c00070a2:	bb 0b 00 00 00       	mov    ebx,0xb
c00070a7:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00070ad:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00070b4:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00070bb:	e8 b0 ae ff ff       	call   c0001f70 <get_ldnumber>
c00070c0:	85 c0                	test   eax,eax
c00070c2:	0f 88 ec 10 00 00    	js     c00081b4 <f_mkfs+0x1116>
c00070c8:	8b 14 85 a0 b6 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc4960]
c00070cf:	85 d2                	test   edx,edx
c00070d1:	74 03                	je     c00070d6 <f_mkfs+0x38>
c00070d3:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00070d6:	85 f6                	test   esi,esi
c00070d8:	75 05                	jne    c00070df <f_mkfs+0x41>
c00070da:	be e0 f3 01 c0       	mov    esi,0xc001f3e0
c00070df:	83 ec 0c             	sub    esp,0xc
c00070e2:	0f b6 c0             	movzx  eax,al
c00070e5:	bb 03 00 00 00       	mov    ebx,0x3
c00070ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070f2:	e8 49 a8 ff ff       	call   c0001940 <disk_initialize>
c00070f7:	83 c4 10             	add    esp,0x10
c00070fa:	a8 01                	test   al,0x1
c00070fc:	0f 85 b2 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c0007102:	bb 0a 00 00 00       	mov    ebx,0xa
c0007107:	a8 04                	test   al,0x4
c0007109:	0f 85 a5 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c000710f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007112:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007116:	85 c0                	test   eax,eax
c0007118:	75 20                	jne    c000713a <f_mkfs+0x9c>
c000711a:	51                   	push   ecx
c000711b:	8d 44 24 78          	lea    eax,[esp+0x78]
c000711f:	50                   	push   eax
c0007120:	6a 03                	push   0x3
c0007122:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007126:	e8 44 a8 ff ff       	call   c000196f <disk_ioctl>
c000712b:	83 c4 10             	add    esp,0x10
c000712e:	85 c0                	test   eax,eax
c0007130:	74 08                	je     c000713a <f_mkfs+0x9c>
c0007132:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000713a:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000713e:	8d 42 ff             	lea    eax,[edx-0x1]
c0007141:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007146:	77 04                	ja     c000714c <f_mkfs+0xae>
c0007148:	85 c2                	test   edx,eax
c000714a:	74 08                	je     c0007154 <f_mkfs+0xb6>
c000714c:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007154:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007157:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000715b:	48                   	dec    eax
c000715c:	3c 01                	cmp    al,0x1
c000715e:	76 05                	jbe    c0007165 <f_mkfs+0xc7>
c0007160:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007165:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007168:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000716c:	48                   	dec    eax
c000716d:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007172:	77 07                	ja     c000717b <f_mkfs+0xdd>
c0007174:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007179:	74 08                	je     c0007183 <f_mkfs+0xe5>
c000717b:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007183:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007186:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000718c:	77 07                	ja     c0007195 <f_mkfs+0xf7>
c000718e:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007191:	85 d8                	test   eax,ebx
c0007193:	74 02                	je     c0007197 <f_mkfs+0xf9>
c0007195:	31 db                	xor    ebx,ebx
c0007197:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00071a2:	77 0a                	ja     c00071ae <f_mkfs+0x110>
c00071a4:	bb 11 00 00 00       	mov    ebx,0x11
c00071a9:	e9 06 10 00 00       	jmp    c00081b4 <f_mkfs+0x1116>
c00071ae:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00071b5:	8b 36                	mov    esi,DWORD PTR [esi]
c00071b7:	85 ed                	test   ebp,ebp
c00071b9:	75 1e                	jne    c00071d9 <f_mkfs+0x13b>
c00071bb:	83 ec 0c             	sub    esp,0xc
c00071be:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00071c5:	25 00 fe ff ff       	and    eax,0xfffffe00
c00071ca:	50                   	push   eax
c00071cb:	e8 f1 0f 00 00       	call   c00081c1 <ff_memalloc>
c00071d0:	83 c4 10             	add    esp,0x10
c00071d3:	89 c5                	mov    ebp,eax
c00071d5:	85 c0                	test   eax,eax
c00071d7:	74 cb                	je     c00071a4 <f_mkfs+0x106>
c00071d9:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00071e1:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00071e9:	52                   	push   edx
c00071ea:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00071ee:	50                   	push   eax
c00071ef:	6a 01                	push   0x1
c00071f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071f5:	e8 75 a7 ff ff       	call   c000196f <disk_ioctl>
c00071fa:	83 c4 10             	add    esp,0x10
c00071fd:	85 c0                	test   eax,eax
c00071ff:	0f 85 4a 0f 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007205:	89 f1                	mov    ecx,esi
c0007207:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000720f:	83 e1 0f             	and    ecx,0xf
c0007212:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000721a:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c000721e:	83 e6 08             	and    esi,0x8
c0007221:	75 56                	jne    c0007279 <f_mkfs+0x1db>
c0007223:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007227:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000722b:	83 ff 00             	cmp    edi,0x0
c000722e:	76 20                	jbe    c0007250 <f_mkfs+0x1b2>
c0007230:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007235:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000723d:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007243:	83 d7 ff             	adc    edi,0xffffffff
c0007246:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000724a:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000724e:	eb 21                	jmp    c0007271 <f_mkfs+0x1d3>
c0007250:	ba 3f 00 00 00       	mov    edx,0x3f
c0007255:	39 f2                	cmp    edx,esi
c0007257:	19 f8                	sbb    eax,edi
c0007259:	73 1e                	jae    c0007279 <f_mkfs+0x1db>
c000725b:	83 c6 c1             	add    esi,0xffffffc1
c000725e:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007266:	83 d7 ff             	adc    edi,0xffffffff
c0007269:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000726d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007271:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007279:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000727d:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007281:	89 04 24             	mov    DWORD PTR [esp],eax
c0007284:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007288:	31 c0                	xor    eax,eax
c000728a:	ba 7f 00 00 00       	mov    edx,0x7f
c000728f:	89 c7                	mov    edi,eax
c0007291:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007294:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007298:	0f 83 c5 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c000729e:	89 df                	mov    edi,ebx
c00072a0:	c1 ef 09             	shr    edi,0x9
c00072a3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00072a7:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00072ae:	c1 ef 09             	shr    edi,0x9
c00072b1:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00072b6:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00072ba:	74 29                	je     c00072e5 <f_mkfs+0x247>
c00072bc:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072c2:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00072c7:	0f 97 c2             	seta   dl
c00072ca:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00072cd:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00072d1:	0f 92 c0             	setb   al
c00072d4:	08 c2                	or     dl,al
c00072d6:	75 5b                	jne    c0007333 <f_mkfs+0x295>
c00072d8:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00072dc:	83 e0 07             	and    eax,0x7
c00072df:	3c 04                	cmp    al,0x4
c00072e1:	74 50                	je     c0007333 <f_mkfs+0x295>
c00072e3:	eb 1b                	jmp    c0007300 <f_mkfs+0x262>
c00072e5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00072ea:	0f 87 73 0a 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c00072f0:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072f6:	76 08                	jbe    c0007300 <f_mkfs+0x262>
c00072f8:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007300:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007304:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007308:	83 e0 01             	and    eax,0x1
c000730b:	80 e1 02             	and    cl,0x2
c000730e:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007312:	74 0d                	je     c0007321 <f_mkfs+0x283>
c0007314:	84 c0                	test   al,al
c0007316:	0f 84 53 09 00 00    	je     c0007c6f <f_mkfs+0xbd1>
c000731c:	e9 12 08 00 00       	jmp    c0007b33 <f_mkfs+0xa95>
c0007321:	bb 13 00 00 00       	mov    ebx,0x13
c0007326:	84 c0                	test   al,al
c0007328:	0f 85 05 08 00 00    	jne    c0007b33 <f_mkfs+0xa95>
c000732e:	e9 39 0e 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007333:	31 c0                	xor    eax,eax
c0007335:	ba ff 0f 00 00       	mov    edx,0xfff
c000733a:	89 c7                	mov    edi,eax
c000733c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000733f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007343:	0f 83 1a 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007349:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000734f:	77 39                	ja     c000738a <f_mkfs+0x2ec>
c0007351:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007356:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000735e:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007361:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007365:	73 08                	jae    c000736f <f_mkfs+0x2d1>
c0007367:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000736f:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007374:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007377:	b8 00 00 00 00       	mov    eax,0x0
c000737c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007380:	73 08                	jae    c000738a <f_mkfs+0x2ec>
c0007382:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000738a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000738e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007392:	83 c0 20             	add    eax,0x20
c0007395:	83 d2 00             	adc    edx,0x0
c0007398:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000739c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00073a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00073a4:	31 d2                	xor    edx,edx
c00073a6:	31 ff                	xor    edi,edi
c00073a8:	52                   	push   edx
c00073a9:	89 fb                	mov    ebx,edi
c00073ab:	50                   	push   eax
c00073ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b4:	e8 63 70 01 00       	call   c001e41c <__udivdi3>
c00073b9:	83 c4 10             	add    esp,0x10
c00073bc:	c1 e0 02             	shl    eax,0x2
c00073bf:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00073c3:	05 07 02 00 00       	add    eax,0x207
c00073c8:	89 f1                	mov    ecx,esi
c00073ca:	c1 e8 09             	shr    eax,0x9
c00073cd:	83 c1 ff             	add    ecx,0xffffffff
c00073d0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00073d4:	83 d3 ff             	adc    ebx,0xffffffff
c00073d7:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00073db:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00073df:	31 d2                	xor    edx,edx
c00073e1:	01 c8                	add    eax,ecx
c00073e3:	11 da                	adc    edx,ebx
c00073e5:	89 c1                	mov    ecx,eax
c00073e7:	f7 de                	neg    esi
c00073e9:	89 d0                	mov    eax,edx
c00073eb:	83 d7 00             	adc    edi,0x0
c00073ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00073f2:	f7 df                	neg    edi
c00073f4:	21 f1                	and    ecx,esi
c00073f6:	21 f8                	and    eax,edi
c00073f8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00073fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007400:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007404:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007408:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000740c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000740f:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007413:	0f ac d0 01          	shrd   eax,edx,0x1
c0007417:	89 df                	mov    edi,ebx
c0007419:	d1 ea                	shr    edx,1
c000741b:	39 c1                	cmp    ecx,eax
c000741d:	19 d7                	sbb    edi,edx
c000741f:	0f 83 3e 09 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007429:	31 d2                	xor    edx,edx
c000742b:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000742f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007433:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007437:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000743a:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000743e:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007442:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007446:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000744a:	83 f8 0f             	cmp    eax,0xf
c000744d:	0f 86 10 09 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007453:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000745b:	0f 87 02 09 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007461:	31 d2                	xor    edx,edx
c0007463:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007467:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000746f:	83 c0 07             	add    eax,0x7
c0007472:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000747a:	c1 e8 03             	shr    eax,0x3
c000747d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007484:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000748c:	c1 e0 09             	shl    eax,0x9
c000748f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007493:	48                   	dec    eax
c0007494:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007498:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000749c:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00074a0:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00074a4:	31 d2                	xor    edx,edx
c00074a6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00074aa:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00074b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074b5:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00074ba:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00074be:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00074c2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00074c6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00074ca:	31 ff                	xor    edi,edi
c00074cc:	31 f6                	xor    esi,esi
c00074ce:	31 db                	xor    ebx,ebx
c00074d0:	85 ff                	test   edi,edi
c00074d2:	74 05                	je     c00074d9 <f_mkfs+0x43b>
c00074d4:	4f                   	dec    edi
c00074d5:	74 44                	je     c000751b <f_mkfs+0x47d>
c00074d7:	eb 4f                	jmp    c0007528 <f_mkfs+0x48a>
c00074d9:	83 ec 0c             	sub    esp,0xc
c00074dc:	0f b7 c3             	movzx  eax,bx
c00074df:	50                   	push   eax
c00074e0:	e8 05 0e 00 00       	call   c00082ea <ff_wtoupper>
c00074e5:	83 c4 10             	add    esp,0x10
c00074e8:	89 c1                	mov    ecx,eax
c00074ea:	8d 53 01             	lea    edx,[ebx+0x1]
c00074ed:	66 39 c3             	cmp    bx,ax
c00074f0:	75 3e                	jne    c0007530 <f_mkfs+0x492>
c00074f2:	be 01 00 00 00       	mov    esi,0x1
c00074f7:	89 df                	mov    edi,ebx
c00074f9:	66 01 f7             	add    di,si
c00074fc:	75 07                	jne    c0007505 <f_mkfs+0x467>
c00074fe:	83 fe 7f             	cmp    esi,0x7f
c0007501:	77 31                	ja     c0007534 <f_mkfs+0x496>
c0007503:	eb 16                	jmp    c000751b <f_mkfs+0x47d>
c0007505:	83 ec 0c             	sub    esp,0xc
c0007508:	0f b7 ff             	movzx  edi,di
c000750b:	57                   	push   edi
c000750c:	e8 d9 0d 00 00       	call   c00082ea <ff_wtoupper>
c0007511:	83 c4 10             	add    esp,0x10
c0007514:	39 c7                	cmp    edi,eax
c0007516:	75 e6                	jne    c00074fe <f_mkfs+0x460>
c0007518:	46                   	inc    esi
c0007519:	eb dc                	jmp    c00074f7 <f_mkfs+0x459>
c000751b:	31 c0                	xor    eax,eax
c000751d:	89 d9                	mov    ecx,ebx
c000751f:	4e                   	dec    esi
c0007520:	0f 95 c0             	setne  al
c0007523:	43                   	inc    ebx
c0007524:	89 c7                	mov    edi,eax
c0007526:	eb 14                	jmp    c000753c <f_mkfs+0x49e>
c0007528:	89 f1                	mov    ecx,esi
c000752a:	01 f3                	add    ebx,esi
c000752c:	31 ff                	xor    edi,edi
c000752e:	eb 0c                	jmp    c000753c <f_mkfs+0x49e>
c0007530:	89 d3                	mov    ebx,edx
c0007532:	eb 08                	jmp    c000753c <f_mkfs+0x49e>
c0007534:	bf 02 00 00 00       	mov    edi,0x2
c0007539:	83 c9 ff             	or     ecx,0xffffffff
c000753c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007540:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007543:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007547:	0f b6 c1             	movzx  eax,cl
c000754a:	e8 3a a9 ff ff       	call   c0001e89 <xsum32>
c000754f:	66 c1 e9 08          	shr    cx,0x8
c0007553:	89 c2                	mov    edx,eax
c0007555:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007558:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000755c:	0f b7 c1             	movzx  eax,cx
c000755f:	e8 25 a9 ff ff       	call   c0001e89 <xsum32>
c0007564:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007569:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000756d:	66 85 db             	test   bx,bx
c0007570:	74 1f                	je     c0007591 <f_mkfs+0x4f3>
c0007572:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007575:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000757c:	83 c0 02             	add    eax,0x2
c000757f:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007585:	39 c2                	cmp    edx,eax
c0007587:	74 08                	je     c0007591 <f_mkfs+0x4f3>
c0007589:	89 04 24             	mov    DWORD PTR [esp],eax
c000758c:	e9 3f ff ff ff       	jmp    c00074d0 <f_mkfs+0x432>
c0007591:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007594:	83 ec 0c             	sub    esp,0xc
c0007597:	05 01 02 00 00       	add    eax,0x201
c000759c:	c1 e8 09             	shr    eax,0x9
c000759f:	50                   	push   eax
c00075a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00075a4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075a8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075ac:	55                   	push   ebp
c00075ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075b1:	e8 a3 a3 ff ff       	call   c0001959 <disk_write>
c00075b6:	83 c4 20             	add    esp,0x20
c00075b9:	85 c0                	test   eax,eax
c00075bb:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00075be:	0f 85 8b 0b 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00075c4:	89 d0                	mov    eax,edx
c00075c6:	31 d2                	xor    edx,edx
c00075c8:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00075cc:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00075d0:	66 85 db             	test   bx,bx
c00075d3:	74 04                	je     c00075d9 <f_mkfs+0x53b>
c00075d5:	31 c0                	xor    eax,eax
c00075d7:	eb b0                	jmp    c0007589 <f_mkfs+0x4eb>
c00075d9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00075dd:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00075e1:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00075e5:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00075eb:	31 d2                	xor    edx,edx
c00075ed:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00075f8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00075fc:	c1 eb 09             	shr    ebx,0x9
c00075ff:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007606:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000760a:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000760e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007612:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007616:	8d 70 01             	lea    esi,[eax+0x1]
c0007619:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000761d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007621:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007628:	31 d2                	xor    edx,edx
c000762a:	25 00 fe ff ff       	and    eax,0xfffffe00
c000762f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007632:	89 c1                	mov    ecx,eax
c0007634:	89 e8                	mov    eax,ebp
c0007636:	e8 e7 a3 ff ff       	call   c0001a22 <mem_set>
c000763b:	31 c0                	xor    eax,eax
c000763d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007640:	76 10                	jbe    c0007652 <f_mkfs+0x5b4>
c0007642:	83 fe 07             	cmp    esi,0x7
c0007645:	76 0b                	jbe    c0007652 <f_mkfs+0x5b4>
c0007647:	40                   	inc    eax
c0007648:	83 ee 08             	sub    esi,0x8
c000764b:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007650:	eb eb                	jmp    c000763d <f_mkfs+0x59f>
c0007652:	b2 01                	mov    dl,0x1
c0007654:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007658:	85 f6                	test   esi,esi
c000765a:	74 0c                	je     c0007668 <f_mkfs+0x5ca>
c000765c:	39 04 24             	cmp    DWORD PTR [esp],eax
c000765f:	76 07                	jbe    c0007668 <f_mkfs+0x5ca>
c0007661:	08 11                	or     BYTE PTR [ecx],dl
c0007663:	4e                   	dec    esi
c0007664:	d1 e2                	shl    edx,1
c0007666:	eb f0                	jmp    c0007658 <f_mkfs+0x5ba>
c0007668:	89 df                	mov    edi,ebx
c000766a:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000766e:	76 04                	jbe    c0007674 <f_mkfs+0x5d6>
c0007670:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007674:	83 ec 0c             	sub    esp,0xc
c0007677:	57                   	push   edi
c0007678:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000767c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007680:	55                   	push   ebp
c0007681:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007685:	e8 cf a2 ff ff       	call   c0001959 <disk_write>
c000768a:	83 c4 20             	add    esp,0x20
c000768d:	85 c0                	test   eax,eax
c000768f:	0f 85 ba 0a 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007695:	31 d2                	xor    edx,edx
c0007697:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000769b:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000769f:	29 fb                	sub    ebx,edi
c00076a1:	0f 85 7a ff ff ff    	jne    c0007621 <f_mkfs+0x583>
c00076a7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00076ab:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00076b3:	31 f6                	xor    esi,esi
c00076b5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00076b9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00076bc:	31 d2                	xor    edx,edx
c00076be:	89 e8                	mov    eax,ebp
c00076c0:	e8 5d a3 ff ff       	call   c0001a22 <mem_set>
c00076c5:	31 c9                	xor    ecx,ecx
c00076c7:	85 db                	test   ebx,ebx
c00076c9:	75 40                	jne    c000770b <f_mkfs+0x66d>
c00076cb:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00076d0:	89 e8                	mov    eax,ebp
c00076d2:	bb 02 00 00 00       	mov    ebx,0x2
c00076d7:	e8 28 a3 ff ff       	call   c0001a04 <st_dword>
c00076dc:	8d 45 04             	lea    eax,[ebp+0x4]
c00076df:	83 ca ff             	or     edx,0xffffffff
c00076e2:	e8 1d a3 ff ff       	call   c0001a04 <st_dword>
c00076e7:	b9 08 00 00 00       	mov    ecx,0x8
c00076ec:	eb 1d                	jmp    c000770b <f_mkfs+0x66d>
c00076ee:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00076f1:	76 3b                	jbe    c000772e <f_mkfs+0x690>
c00076f3:	43                   	inc    ebx
c00076f4:	83 fe 01             	cmp    esi,0x1
c00076f7:	89 da                	mov    edx,ebx
c00076f9:	77 03                	ja     c00076fe <f_mkfs+0x660>
c00076fb:	83 ca ff             	or     edx,0xffffffff
c00076fe:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007702:	4e                   	dec    esi
c0007703:	e8 fc a2 ff ff       	call   c0001a04 <st_dword>
c0007708:	83 c1 04             	add    ecx,0x4
c000770b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000770f:	85 f6                	test   esi,esi
c0007711:	75 db                	jne    c00076ee <f_mkfs+0x650>
c0007713:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007718:	77 14                	ja     c000772e <f_mkfs+0x690>
c000771a:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000771e:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007725:	85 f6                	test   esi,esi
c0007727:	74 05                	je     c000772e <f_mkfs+0x690>
c0007729:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000772c:	77 dd                	ja     c000770b <f_mkfs+0x66d>
c000772e:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007732:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007736:	39 cf                	cmp    edi,ecx
c0007738:	76 02                	jbe    c000773c <f_mkfs+0x69e>
c000773a:	89 cf                	mov    edi,ecx
c000773c:	83 ec 0c             	sub    esp,0xc
c000773f:	57                   	push   edi
c0007740:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007744:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007748:	55                   	push   ebp
c0007749:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000774d:	e8 07 a2 ff ff       	call   c0001959 <disk_write>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	85 c0                	test   eax,eax
c0007757:	0f 85 f2 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c000775d:	31 d2                	xor    edx,edx
c000775f:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007763:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007767:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c000776b:	0f 85 48 ff ff ff    	jne    c00076b9 <f_mkfs+0x61b>
c0007771:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007774:	31 d2                	xor    edx,edx
c0007776:	89 e8                	mov    eax,ebp
c0007778:	31 ff                	xor    edi,edi
c000777a:	e8 a3 a2 ff ff       	call   c0001a22 <mem_set>
c000777f:	8d 45 34             	lea    eax,[ebp+0x34]
c0007782:	ba 02 00 00 00       	mov    edx,0x2
c0007787:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000778b:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000778f:	e8 70 a2 ff ff       	call   c0001a04 <st_dword>
c0007794:	8d 45 38             	lea    eax,[ebp+0x38]
c0007797:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000779b:	e8 64 a2 ff ff       	call   c0001a04 <st_dword>
c00077a0:	8d 45 44             	lea    eax,[ebp+0x44]
c00077a3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077a7:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c00077ab:	e8 54 a2 ff ff       	call   c0001a04 <st_dword>
c00077b0:	8d 45 54             	lea    eax,[ebp+0x54]
c00077b3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00077b7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077bb:	83 c2 02             	add    edx,0x2
c00077be:	e8 41 a2 ff ff       	call   c0001a04 <st_dword>
c00077c3:	8d 45 58             	lea    eax,[ebp+0x58]
c00077c6:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00077ca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00077ce:	e8 31 a2 ff ff       	call   c0001a04 <st_dword>
c00077d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077d7:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c00077dc:	89 c6                	mov    esi,eax
c00077de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077e2:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00077e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00077e9:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00077ed:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00077f0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077f4:	39 cb                	cmp    ebx,ecx
c00077f6:	76 02                	jbe    c00077fa <f_mkfs+0x75c>
c00077f8:	89 cb                	mov    ebx,ecx
c00077fa:	83 ec 0c             	sub    esp,0xc
c00077fd:	53                   	push   ebx
c00077fe:	57                   	push   edi
c00077ff:	56                   	push   esi
c0007800:	55                   	push   ebp
c0007801:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007805:	e8 4f a1 ff ff       	call   c0001959 <disk_write>
c000780a:	83 c4 20             	add    esp,0x20
c000780d:	85 c0                	test   eax,eax
c000780f:	0f 85 3a 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007815:	31 d2                	xor    edx,edx
c0007817:	b9 00 02 00 00       	mov    ecx,0x200
c000781c:	89 e8                	mov    eax,ebp
c000781e:	e8 ff a1 ff ff       	call   c0001a22 <mem_set>
c0007823:	31 d2                	xor    edx,edx
c0007825:	01 de                	add    esi,ebx
c0007827:	11 d7                	adc    edi,edx
c0007829:	29 1c 24             	sub    DWORD PTR [esp],ebx
c000782c:	75 bf                	jne    c00077ed <f_mkfs+0x74f>
c000782e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007832:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007836:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c000783e:	b9 00 02 00 00       	mov    ecx,0x200
c0007843:	31 d2                	xor    edx,edx
c0007845:	89 e8                	mov    eax,ebp
c0007847:	e8 d6 a1 ff ff       	call   c0001a22 <mem_set>
c000784c:	b9 0b 00 00 00       	mov    ecx,0xb
c0007851:	ba c0 f4 01 c0       	mov    edx,0xc001f4c0
c0007856:	89 e8                	mov    eax,ebp
c0007858:	e8 b0 a1 ff ff       	call   c0001a0d <mem_cpy>
c000785d:	8d 45 40             	lea    eax,[ebp+0x40]
c0007860:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007864:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007868:	e8 9a a1 ff ff       	call   c0001a07 <st_qword>
c000786d:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007871:	8d 45 48             	lea    eax,[ebp+0x48]
c0007874:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007878:	e8 8a a1 ff ff       	call   c0001a07 <st_qword>
c000787d:	8d 45 50             	lea    eax,[ebp+0x50]
c0007880:	ba 20 00 00 00       	mov    edx,0x20
c0007885:	e8 7a a1 ff ff       	call   c0001a04 <st_dword>
c000788a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000788e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007892:	e8 6d a1 ff ff       	call   c0001a04 <st_dword>
c0007897:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000789b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000789f:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c00078a3:	e8 5c a1 ff ff       	call   c0001a04 <st_dword>
c00078a8:	8d 45 5c             	lea    eax,[ebp+0x5c]
c00078ab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00078af:	e8 50 a1 ff ff       	call   c0001a04 <st_dword>
c00078b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b8:	8d 50 02             	lea    edx,[eax+0x2]
c00078bb:	8d 45 60             	lea    eax,[ebp+0x60]
c00078be:	e8 41 a1 ff ff       	call   c0001a04 <st_dword>
c00078c3:	8d 45 64             	lea    eax,[ebp+0x64]
c00078c6:	ba 00 00 21 50       	mov    edx,0x50210000
c00078cb:	e8 34 a1 ff ff       	call   c0001a04 <st_dword>
c00078d0:	8d 45 68             	lea    eax,[ebp+0x68]
c00078d3:	ba 00 01 00 00       	mov    edx,0x100
c00078d8:	e8 23 a1 ff ff       	call   c0001a00 <st_word>
c00078dd:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c00078e1:	b8 0a 00 00 00       	mov    eax,0xa
c00078e6:	48                   	dec    eax
c00078e7:	74 05                	je     c00078ee <f_mkfs+0x850>
c00078e9:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00078ec:	eb f8                	jmp    c00078e6 <f_mkfs+0x848>
c00078ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078f2:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00078f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00078fa:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00078fe:	74 05                	je     c0007905 <f_mkfs+0x867>
c0007900:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007903:	eb f5                	jmp    c00078fa <f_mkfs+0x85c>
c0007905:	8d 45 78             	lea    eax,[ebp+0x78]
c0007908:	ba eb fe 00 00       	mov    edx,0xfeeb
c000790d:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007913:	31 db                	xor    ebx,ebx
c0007915:	e8 e6 a0 ff ff       	call   c0001a00 <st_word>
c000791a:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007920:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	e8 d3 a0 ff ff       	call   c0001a00 <st_word>
c000792d:	31 c9                	xor    ecx,ecx
c000792f:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007932:	83 f8 01             	cmp    eax,0x1
c0007935:	76 13                	jbe    c000794a <f_mkfs+0x8ac>
c0007937:	83 f9 70             	cmp    ecx,0x70
c000793a:	74 0e                	je     c000794a <f_mkfs+0x8ac>
c000793c:	89 da                	mov    edx,ebx
c000793e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007943:	e8 41 a5 ff ff       	call   c0001e89 <xsum32>
c0007948:	89 c3                	mov    ebx,eax
c000794a:	41                   	inc    ecx
c000794b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007951:	75 dc                	jne    c000792f <f_mkfs+0x891>
c0007953:	89 f0                	mov    eax,esi
c0007955:	89 fa                	mov    edx,edi
c0007957:	83 c0 01             	add    eax,0x1
c000795a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000795e:	83 d2 00             	adc    edx,0x0
c0007961:	83 ec 0c             	sub    esp,0xc
c0007964:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007968:	6a 01                	push   0x1
c000796a:	57                   	push   edi
c000796b:	56                   	push   esi
c000796c:	55                   	push   ebp
c000796d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007971:	e8 e3 9f ff ff       	call   c0001959 <disk_write>
c0007976:	83 c4 20             	add    esp,0x20
c0007979:	85 c0                	test   eax,eax
c000797b:	0f 85 ce 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007981:	31 d2                	xor    edx,edx
c0007983:	b9 00 02 00 00       	mov    ecx,0x200
c0007988:	89 e8                	mov    eax,ebp
c000798a:	e8 93 a0 ff ff       	call   c0001a22 <mem_set>
c000798f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	e8 64 a0 ff ff       	call   c0001a00 <st_word>
c000799c:	89 f0                	mov    eax,esi
c000799e:	89 fa                	mov    edx,edi
c00079a0:	83 c0 09             	add    eax,0x9
c00079a3:	83 d2 00             	adc    edx,0x0
c00079a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00079a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00079ad:	31 c9                	xor    ecx,ecx
c00079af:	41                   	inc    ecx
c00079b0:	89 da                	mov    edx,ebx
c00079b2:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c00079b7:	e8 cd a4 ff ff       	call   c0001e89 <xsum32>
c00079bc:	89 c3                	mov    ebx,eax
c00079be:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079c4:	75 e9                	jne    c00079af <f_mkfs+0x911>
c00079c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079ca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00079ce:	83 c0 01             	add    eax,0x1
c00079d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00079d5:	83 d2 00             	adc    edx,0x0
c00079d8:	83 ec 0c             	sub    esp,0xc
c00079db:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00079df:	6a 01                	push   0x1
c00079e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e9:	55                   	push   ebp
c00079ea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079ee:	e8 66 9f ff ff       	call   c0001959 <disk_write>
c00079f3:	83 c4 20             	add    esp,0x20
c00079f6:	85 c0                	test   eax,eax
c00079f8:	0f 85 51 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00079fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a02:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a06:	75 09                	jne    c0007a11 <f_mkfs+0x973>
c0007a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a0b:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a0f:	74 12                	je     c0007a23 <f_mkfs+0x985>
c0007a11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a15:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a21:	eb 8a                	jmp    c00079ad <f_mkfs+0x90f>
c0007a23:	31 d2                	xor    edx,edx
c0007a25:	b9 00 02 00 00       	mov    ecx,0x200
c0007a2a:	89 e8                	mov    eax,ebp
c0007a2c:	e8 f1 9f ff ff       	call   c0001a22 <mem_set>
c0007a31:	83 c6 0b             	add    esi,0xb
c0007a34:	83 d7 00             	adc    edi,0x0
c0007a37:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007a3b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007a3f:	31 c9                	xor    ecx,ecx
c0007a41:	41                   	inc    ecx
c0007a42:	89 da                	mov    edx,ebx
c0007a44:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a49:	e8 3b a4 ff ff       	call   c0001e89 <xsum32>
c0007a4e:	89 c3                	mov    ebx,eax
c0007a50:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a56:	75 e9                	jne    c0007a41 <f_mkfs+0x9a3>
c0007a58:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007a5b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007a5f:	83 c6 01             	add    esi,0x1
c0007a62:	83 d7 00             	adc    edi,0x0
c0007a65:	83 ec 0c             	sub    esp,0xc
c0007a68:	6a 01                	push   0x1
c0007a6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a72:	55                   	push   ebp
c0007a73:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a77:	e8 dd 9e ff ff       	call   c0001959 <disk_write>
c0007a7c:	83 c4 20             	add    esp,0x20
c0007a7f:	85 c0                	test   eax,eax
c0007a81:	0f 85 c8 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007a87:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007a8b:	75 06                	jne    c0007a93 <f_mkfs+0x9f5>
c0007a8d:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007a91:	74 09                	je     c0007a9c <f_mkfs+0x9fe>
c0007a93:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a96:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007a9a:	eb a3                	jmp    c0007a3f <f_mkfs+0x9a1>
c0007a9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007aa0:	89 da                	mov    edx,ebx
c0007aa2:	01 e8                	add    eax,ebp
c0007aa4:	e8 5b 9f ff ff       	call   c0001a04 <st_dword>
c0007aa9:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007aae:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007ab6:	75 e4                	jne    c0007a9c <f_mkfs+0x9fe>
c0007ab8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007abb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007abf:	83 c6 02             	add    esi,0x2
c0007ac2:	83 d7 00             	adc    edi,0x0
c0007ac5:	83 ec 0c             	sub    esp,0xc
c0007ac8:	6a 01                	push   0x1
c0007aca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ace:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ad2:	55                   	push   ebp
c0007ad3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad7:	e8 7d 9e ff ff       	call   c0001959 <disk_write>
c0007adc:	83 c4 20             	add    esp,0x20
c0007adf:	85 c0                	test   eax,eax
c0007ae1:	0f 85 68 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ae7:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007aec:	74 0d                	je     c0007afb <f_mkfs+0xa5d>
c0007aee:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007af6:	e9 43 fd ff ff       	jmp    c000783e <f_mkfs+0x7a0>
c0007afb:	b1 07                	mov    cl,0x7
c0007afd:	e9 e3 05 00 00       	jmp    c00080e5 <f_mkfs+0x1047>
c0007b02:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b07:	0f 85 4f 02 00 00    	jne    c0007d5c <f_mkfs+0xcbe>
c0007b0d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b12:	0f 86 22 02 00 00    	jbe    c0007d3a <f_mkfs+0xc9c>
c0007b18:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b1d:	0f 85 81 06 00 00    	jne    c00081a4 <f_mkfs+0x1106>
c0007b23:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b2a:	83 f8 40             	cmp    eax,0x40
c0007b2d:	0f 87 51 06 00 00    	ja     c0008184 <f_mkfs+0x10e6>
c0007b33:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007b37:	85 ff                	test   edi,edi
c0007b39:	75 1c                	jne    c0007b57 <f_mkfs+0xab9>
c0007b3b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b3e:	ba c0 f3 01 c0       	mov    edx,0xc001f3c0
c0007b43:	c1 e9 0c             	shr    ecx,0xc
c0007b46:	bf 01 00 00 00       	mov    edi,0x1
c0007b4b:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007b4e:	66 85 c0             	test   ax,ax
c0007b51:	0f 85 95 01 00 00    	jne    c0007cec <f_mkfs+0xc4e>
c0007b57:	31 d2                	xor    edx,edx
c0007b59:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007b5c:	f7 f7                	div    edi
c0007b5e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007b63:	0f 86 95 01 00 00    	jbe    c0007cfe <f_mkfs+0xc60>
c0007b69:	83 c0 02             	add    eax,0x2
c0007b6c:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007b71:	01 c0                	add    eax,eax
c0007b73:	05 ff 01 00 00       	add    eax,0x1ff
c0007b78:	be 01 00 00 00       	mov    esi,0x1
c0007b7d:	c1 e8 09             	shr    eax,0x9
c0007b80:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007b84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b88:	c1 e0 05             	shl    eax,0x5
c0007b8b:	c1 e8 09             	shr    eax,0x9
c0007b8e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007b92:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007b97:	31 d2                	xor    edx,edx
c0007b99:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007b9d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007ba1:	89 f0                	mov    eax,esi
c0007ba3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007ba7:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007bab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007baf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007bb3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007bb7:	31 d2                	xor    edx,edx
c0007bb9:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007bbe:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007bc2:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007bc6:	31 db                	xor    ebx,ebx
c0007bc8:	01 c8                	add    eax,ecx
c0007bca:	11 da                	adc    edx,ebx
c0007bcc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007bd0:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007bd4:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007bd8:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007bdc:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007be0:	f7 da                	neg    edx
c0007be2:	21 d1                	and    ecx,edx
c0007be4:	29 d9                	sub    ecx,ebx
c0007be6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007beb:	0f 85 20 01 00 00    	jne    c0007d11 <f_mkfs+0xc73>
c0007bf1:	31 db                	xor    ebx,ebx
c0007bf3:	01 ce                	add    esi,ecx
c0007bf5:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007bf9:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007bfd:	31 d2                	xor    edx,edx
c0007bff:	89 f8                	mov    eax,edi
c0007c01:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c05:	c1 e0 04             	shl    eax,0x4
c0007c08:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c0c:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c10:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c14:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c18:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c1b:	19 d3                	sbb    ebx,edx
c0007c1d:	0f 82 40 01 00 00    	jb     c0007d63 <f_mkfs+0xcc5>
c0007c23:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c26:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c2a:	89 c8                	mov    eax,ecx
c0007c2c:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007c31:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007c35:	29 f0                	sub    eax,esi
c0007c37:	29 d0                	sub    eax,edx
c0007c39:	31 d2                	xor    edx,edx
c0007c3b:	f7 f7                	div    edi
c0007c3d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c42:	89 c3                	mov    ebx,eax
c0007c44:	0f 85 b8 fe ff ff    	jne    c0007b02 <f_mkfs+0xa64>
c0007c4a:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007c4f:	0f 87 1d 01 00 00    	ja     c0007d72 <f_mkfs+0xcd4>
c0007c55:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c5a:	0f 85 03 01 00 00    	jne    c0007d63 <f_mkfs+0xcc5>
c0007c60:	83 ff 01             	cmp    edi,0x1
c0007c63:	0f 86 fa 00 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007c69:	d1 ef                	shr    edi,1
c0007c6b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007c6f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c73:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c76:	85 db                	test   ebx,ebx
c0007c78:	75 2d                	jne    c0007ca7 <f_mkfs+0xc09>
c0007c7a:	89 cb                	mov    ebx,ecx
c0007c7c:	ba d0 f3 01 c0       	mov    edx,0xc001f3d0
c0007c81:	c1 eb 11             	shr    ebx,0x11
c0007c84:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007c8c:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c8f:	66 85 c0             	test   ax,ax
c0007c92:	74 11                	je     c0007ca5 <f_mkfs+0xc07>
c0007c94:	83 c2 02             	add    edx,0x2
c0007c97:	39 d8                	cmp    eax,ebx
c0007c99:	77 0a                	ja     c0007ca5 <f_mkfs+0xc07>
c0007c9b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007c9f:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007ca3:	eb e7                	jmp    c0007c8c <f_mkfs+0xbee>
c0007ca5:	31 db                	xor    ebx,ebx
c0007ca7:	31 d2                	xor    edx,edx
c0007ca9:	89 c8                	mov    eax,ecx
c0007cab:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007caf:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007cb6:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007cbb:	c1 ea 09             	shr    edx,0x9
c0007cbe:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007cc3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007cc7:	0f 87 96 00 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007ccd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cd1:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007cd9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007cdd:	be 20 00 00 00       	mov    esi,0x20
c0007ce2:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007ce7:	e9 a6 fe ff ff       	jmp    c0007b92 <f_mkfs+0xaf4>
c0007cec:	83 c2 02             	add    edx,0x2
c0007cef:	39 c8                	cmp    eax,ecx
c0007cf1:	0f 87 60 fe ff ff    	ja     c0007b57 <f_mkfs+0xab9>
c0007cf7:	01 ff                	add    edi,edi
c0007cf9:	e9 4d fe ff ff       	jmp    c0007b4b <f_mkfs+0xaad>
c0007cfe:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d01:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d06:	40                   	inc    eax
c0007d07:	d1 e8                	shr    eax,1
c0007d09:	83 c0 03             	add    eax,0x3
c0007d0c:	e9 62 fe ff ff       	jmp    c0007b73 <f_mkfs+0xad5>
c0007d11:	31 d2                	xor    edx,edx
c0007d13:	89 c8                	mov    eax,ecx
c0007d15:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d19:	85 d2                	test   edx,edx
c0007d1b:	74 0c                	je     c0007d29 <f_mkfs+0xc8b>
c0007d1d:	49                   	dec    ecx
c0007d1e:	46                   	inc    esi
c0007d1f:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d24:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d29:	89 c8                	mov    eax,ecx
c0007d2b:	31 d2                	xor    edx,edx
c0007d2d:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d31:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007d35:	e9 c3 fe ff ff       	jmp    c0007bfd <f_mkfs+0xb5f>
c0007d3a:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d3f:	77 31                	ja     c0007d72 <f_mkfs+0xcd4>
c0007d41:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d46:	75 1b                	jne    c0007d63 <f_mkfs+0xcc5>
c0007d48:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007d4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007d4f:	3d 80 00 00 00       	cmp    eax,0x80
c0007d54:	0f 86 d9 fd ff ff    	jbe    c0007b33 <f_mkfs+0xa95>
c0007d5a:	eb 07                	jmp    c0007d63 <f_mkfs+0xcc5>
c0007d5c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d61:	76 0a                	jbe    c0007d6d <f_mkfs+0xccf>
c0007d63:	bb 0e 00 00 00       	mov    ebx,0xe
c0007d68:	e9 ff 03 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007d6d:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d72:	31 d2                	xor    edx,edx
c0007d74:	b9 00 02 00 00       	mov    ecx,0x200
c0007d79:	89 e8                	mov    eax,ebp
c0007d7b:	e8 a2 9c ff ff       	call   c0001a22 <mem_set>
c0007d80:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d85:	ba e2 f4 01 c0       	mov    edx,0xc001f4e2
c0007d8a:	89 e8                	mov    eax,ebp
c0007d8c:	e8 7c 9c ff ff       	call   c0001a0d <mem_cpy>
c0007d91:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007d94:	ba 00 02 00 00       	mov    edx,0x200
c0007d99:	e8 62 9c ff ff       	call   c0001a00 <st_word>
c0007d9e:	89 f8                	mov    eax,edi
c0007da0:	0f b7 d6             	movzx  edx,si
c0007da3:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007da6:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007da9:	e8 52 9c ff ff       	call   c0001a00 <st_word>
c0007dae:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007db2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007db7:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007dba:	75 08                	jne    c0007dc4 <f_mkfs+0xd26>
c0007dbc:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007dc4:	8d 45 11             	lea    eax,[ebp+0x11]
c0007dc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007dcb:	e8 30 9c ff ff       	call   c0001a00 <st_word>
c0007dd0:	b8 ff ff 00 00       	mov    eax,0xffff
c0007dd5:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007dd9:	39 d0                	cmp    eax,edx
c0007ddb:	b8 00 00 00 00       	mov    eax,0x0
c0007de0:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007de4:	72 0a                	jb     c0007df0 <f_mkfs+0xd52>
c0007de6:	8d 45 13             	lea    eax,[ebp+0x13]
c0007de9:	e8 12 9c ff ff       	call   c0001a00 <st_word>
c0007dee:	eb 08                	jmp    c0007df8 <f_mkfs+0xd5a>
c0007df0:	8d 45 20             	lea    eax,[ebp+0x20]
c0007df3:	e8 0c 9c ff ff       	call   c0001a04 <st_dword>
c0007df8:	8d 45 18             	lea    eax,[ebp+0x18]
c0007dfb:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e00:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e04:	e8 f7 9b ff ff       	call   c0001a00 <st_word>
c0007e09:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e0c:	ba ff 00 00 00       	mov    edx,0xff
c0007e11:	e8 ea 9b ff ff       	call   c0001a00 <st_word>
c0007e16:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e19:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e1d:	e8 e2 9b ff ff       	call   c0001a04 <st_dword>
c0007e22:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e27:	75 57                	jne    c0007e80 <f_mkfs+0xde2>
c0007e29:	8d 45 43             	lea    eax,[ebp+0x43]
c0007e2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e31:	e8 ce 9b ff ff       	call   c0001a04 <st_dword>
c0007e36:	8d 45 24             	lea    eax,[ebp+0x24]
c0007e39:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007e3d:	e8 c2 9b ff ff       	call   c0001a04 <st_dword>
c0007e42:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007e45:	ba 02 00 00 00       	mov    edx,0x2
c0007e4a:	e8 b5 9b ff ff       	call   c0001a04 <st_dword>
c0007e4f:	8d 45 30             	lea    eax,[ebp+0x30]
c0007e52:	ba 01 00 00 00       	mov    edx,0x1
c0007e57:	e8 a4 9b ff ff       	call   c0001a00 <st_word>
c0007e5c:	8d 45 32             	lea    eax,[ebp+0x32]
c0007e5f:	ba 06 00 00 00       	mov    edx,0x6
c0007e64:	e8 97 9b ff ff       	call   c0001a00 <st_word>
c0007e69:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007e6d:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007e71:	8d 45 47             	lea    eax,[ebp+0x47]
c0007e74:	b9 13 00 00 00       	mov    ecx,0x13
c0007e79:	ba ee f4 01 c0       	mov    edx,0xc001f4ee
c0007e7e:	eb 2f                	jmp    c0007eaf <f_mkfs+0xe11>
c0007e80:	8d 45 27             	lea    eax,[ebp+0x27]
c0007e83:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e88:	e8 77 9b ff ff       	call   c0001a04 <st_dword>
c0007e8d:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007e92:	8d 45 16             	lea    eax,[ebp+0x16]
c0007e95:	e8 66 9b ff ff       	call   c0001a00 <st_word>
c0007e9a:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007e9e:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007ea2:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007ea5:	b9 13 00 00 00       	mov    ecx,0x13
c0007eaa:	ba 02 f5 01 c0       	mov    edx,0xc001f502
c0007eaf:	e8 59 9b ff ff       	call   c0001a0d <mem_cpy>
c0007eb4:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007eba:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007ebf:	89 f0                	mov    eax,esi
c0007ec1:	e8 3a 9b ff ff       	call   c0001a00 <st_word>
c0007ec6:	83 ec 0c             	sub    esp,0xc
c0007ec9:	6a 01                	push   0x1
c0007ecb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ecf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ed3:	55                   	push   ebp
c0007ed4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ed8:	e8 7c 9a ff ff       	call   c0001959 <disk_write>
c0007edd:	83 c4 20             	add    esp,0x20
c0007ee0:	85 c0                	test   eax,eax
c0007ee2:	0f 85 67 02 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ee8:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eed:	0f 85 b7 00 00 00    	jne    c0007faa <f_mkfs+0xf0c>
c0007ef3:	83 ec 0c             	sub    esp,0xc
c0007ef6:	6a 01                	push   0x1
c0007ef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007efc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f00:	83 c0 06             	add    eax,0x6
c0007f03:	83 d2 00             	adc    edx,0x0
c0007f06:	52                   	push   edx
c0007f07:	50                   	push   eax
c0007f08:	55                   	push   ebp
c0007f09:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f0d:	e8 47 9a ff ff       	call   c0001959 <disk_write>
c0007f12:	83 c4 20             	add    esp,0x20
c0007f15:	b9 00 02 00 00       	mov    ecx,0x200
c0007f1a:	31 d2                	xor    edx,edx
c0007f1c:	89 e8                	mov    eax,ebp
c0007f1e:	e8 ff 9a ff ff       	call   c0001a22 <mem_set>
c0007f23:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f28:	89 e8                	mov    eax,ebp
c0007f2a:	e8 d5 9a ff ff       	call   c0001a04 <st_dword>
c0007f2f:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007f35:	ba 72 72 41 61       	mov    edx,0x61417272
c0007f3a:	e8 c5 9a ff ff       	call   c0001a04 <st_dword>
c0007f3f:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007f42:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007f48:	e8 b7 9a ff ff       	call   c0001a04 <st_dword>
c0007f4d:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007f53:	ba 02 00 00 00       	mov    edx,0x2
c0007f58:	e8 a7 9a ff ff       	call   c0001a04 <st_dword>
c0007f5d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f62:	89 f0                	mov    eax,esi
c0007f64:	e8 97 9a ff ff       	call   c0001a00 <st_word>
c0007f69:	83 ec 0c             	sub    esp,0xc
c0007f6c:	6a 01                	push   0x1
c0007f6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f72:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f76:	83 c0 07             	add    eax,0x7
c0007f79:	83 d2 00             	adc    edx,0x0
c0007f7c:	52                   	push   edx
c0007f7d:	50                   	push   eax
c0007f7e:	55                   	push   ebp
c0007f7f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f83:	e8 d1 99 ff ff       	call   c0001959 <disk_write>
c0007f88:	83 c4 14             	add    esp,0x14
c0007f8b:	6a 01                	push   0x1
c0007f8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f91:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f95:	83 c0 01             	add    eax,0x1
c0007f98:	83 d2 00             	adc    edx,0x0
c0007f9b:	52                   	push   edx
c0007f9c:	50                   	push   eax
c0007f9d:	55                   	push   ebp
c0007f9e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fa2:	e8 b2 99 ff ff       	call   c0001959 <disk_write>
c0007fa7:	83 c4 20             	add    esp,0x20
c0007faa:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0007fb1:	31 d2                	xor    edx,edx
c0007fb3:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0007fb9:	31 db                	xor    ebx,ebx
c0007fbb:	89 e8                	mov    eax,ebp
c0007fbd:	e8 60 9a ff ff       	call   c0001a22 <mem_set>
c0007fc2:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0007fc7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007fce:	0f 94 c3             	sete   bl
c0007fd1:	4b                   	dec    ebx
c0007fd2:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0007fd8:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0007fde:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fe3:	75 21                	jne    c0008006 <f_mkfs+0xf68>
c0007fe5:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007fea:	89 e8                	mov    eax,ebp
c0007fec:	e8 13 9a ff ff       	call   c0001a04 <st_dword>
c0007ff1:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ff4:	83 ca ff             	or     edx,0xffffffff
c0007ff7:	e8 08 9a ff ff       	call   c0001a04 <st_dword>
c0007ffc:	8d 45 08             	lea    eax,[ebp+0x8]
c0007fff:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008004:	eb 04                	jmp    c000800a <f_mkfs+0xf6c>
c0008006:	89 da                	mov    edx,ebx
c0008008:	89 e8                	mov    eax,ebp
c000800a:	e8 f5 99 ff ff       	call   c0001a04 <st_dword>
c000800f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008013:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008017:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000801b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000801f:	39 ce                	cmp    esi,ecx
c0008021:	76 02                	jbe    c0008025 <f_mkfs+0xf87>
c0008023:	89 ce                	mov    esi,ecx
c0008025:	83 ec 0c             	sub    esp,0xc
c0008028:	56                   	push   esi
c0008029:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000802d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008031:	55                   	push   ebp
c0008032:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008036:	e8 1e 99 ff ff       	call   c0001959 <disk_write>
c000803b:	83 c4 20             	add    esp,0x20
c000803e:	85 c0                	test   eax,eax
c0008040:	0f 85 09 01 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0008046:	31 d2                	xor    edx,edx
c0008048:	b9 00 02 00 00       	mov    ecx,0x200
c000804d:	89 e8                	mov    eax,ebp
c000804f:	e8 ce 99 ff ff       	call   c0001a22 <mem_set>
c0008054:	31 d2                	xor    edx,edx
c0008056:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000805a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000805e:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008062:	75 b3                	jne    c0008017 <f_mkfs+0xf79>
c0008064:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008067:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000806e:	40                   	inc    eax
c000806f:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008073:	0f 87 65 ff ff ff    	ja     c0007fde <f_mkfs+0xf40>
c0008079:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000807e:	74 04                	je     c0008084 <f_mkfs+0xfe6>
c0008080:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008084:	89 fb                	mov    ebx,edi
c0008086:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000808a:	76 04                	jbe    c0008090 <f_mkfs+0xff2>
c000808c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008090:	83 ec 0c             	sub    esp,0xc
c0008093:	53                   	push   ebx
c0008094:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008098:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000809c:	55                   	push   ebp
c000809d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080a1:	e8 b3 98 ff ff       	call   c0001959 <disk_write>
c00080a6:	83 c4 20             	add    esp,0x20
c00080a9:	85 c0                	test   eax,eax
c00080ab:	0f 85 9e 00 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00080b1:	31 d2                	xor    edx,edx
c00080b3:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00080b7:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080bb:	29 df                	sub    edi,ebx
c00080bd:	75 c5                	jne    c0008084 <f_mkfs+0xfe6>
c00080bf:	b1 0c                	mov    cl,0xc
c00080c1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c6:	74 1d                	je     c00080e5 <f_mkfs+0x1047>
c00080c8:	b8 ff ff 00 00       	mov    eax,0xffff
c00080cd:	b1 06                	mov    cl,0x6
c00080cf:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00080d3:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00080d7:	72 0c                	jb     c00080e5 <f_mkfs+0x1047>
c00080d9:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00080de:	0f 94 c1             	sete   cl
c00080e1:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00080e5:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00080ea:	75 4c                	jne    c0008138 <f_mkfs+0x109a>
c00080ec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00080f0:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00080f4:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00080fb:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008102:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c000810d:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008118:	0f b6 c9             	movzx  ecx,cl
c000811b:	83 ec 0c             	sub    esp,0xc
c000811e:	55                   	push   ebp
c000811f:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008126:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000812a:	e8 2f c2 ff ff       	call   c000435e <create_partition>
c000812f:	83 c4 10             	add    esp,0x10
c0008132:	89 c3                	mov    ebx,eax
c0008134:	85 c0                	test   eax,eax
c0008136:	75 34                	jne    c000816c <f_mkfs+0x10ce>
c0008138:	31 db                	xor    ebx,ebx
c000813a:	50                   	push   eax
c000813b:	6a 00                	push   0x0
c000813d:	6a 00                	push   0x0
c000813f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008143:	e8 27 98 ff ff       	call   c000196f <disk_ioctl>
c0008148:	83 c4 10             	add    esp,0x10
c000814b:	85 c0                	test   eax,eax
c000814d:	74 1d                	je     c000816c <f_mkfs+0x10ce>
c000814f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008157:	75 0c                	jne    c0008165 <f_mkfs+0x10c7>
c0008159:	83 ec 0c             	sub    esp,0xc
c000815c:	55                   	push   ebp
c000815d:	e8 75 00 00 00       	call   c00081d7 <ff_memfree>
c0008162:	83 c4 10             	add    esp,0x10
c0008165:	bb 01 00 00 00       	mov    ebx,0x1
c000816a:	eb 48                	jmp    c00081b4 <f_mkfs+0x1116>
c000816c:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008174:	75 3e                	jne    c00081b4 <f_mkfs+0x1116>
c0008176:	83 ec 0c             	sub    esp,0xc
c0008179:	55                   	push   ebp
c000817a:	e8 58 00 00 00       	call   c00081d7 <ff_memfree>
c000817f:	83 c4 10             	add    esp,0x10
c0008182:	eb 30                	jmp    c00081b4 <f_mkfs+0x1116>
c0008184:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008189:	0f 85 eb fa ff ff    	jne    c0007c7a <f_mkfs+0xbdc>
c000818f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008193:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008199:	0f 86 b8 f9 ff ff    	jbe    c0007b57 <f_mkfs+0xab9>
c000819f:	e9 bf fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081a4:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081a9:	0f 85 c0 fa ff ff    	jne    c0007c6f <f_mkfs+0xbd1>
c00081af:	e9 af fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081b4:	81 c4 9c 00 00 00    	add    esp,0x9c
c00081ba:	89 d8                	mov    eax,ebx
c00081bc:	5b                   	pop    ebx
c00081bd:	5e                   	pop    esi
c00081be:	5f                   	pop    edi
c00081bf:	5d                   	pop    ebp
c00081c0:	c3                   	ret    

c00081c1 <ff_memalloc>:
c00081c1:	83 ec 0c             	sub    esp,0xc
c00081c4:	83 ec 0c             	sub    esp,0xc
c00081c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081cb:	e8 fb 4f 00 00       	call   c000d1cb <malloc>
c00081d0:	83 c4 10             	add    esp,0x10
c00081d3:	83 c4 0c             	add    esp,0xc
c00081d6:	c3                   	ret    

c00081d7 <ff_memfree>:
c00081d7:	83 ec 0c             	sub    esp,0xc
c00081da:	83 ec 0c             	sub    esp,0xc
c00081dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081e1:	e8 f5 4f 00 00       	call   c000d1db <free>
c00081e6:	83 c4 10             	add    esp,0x10
c00081e9:	90                   	nop
c00081ea:	83 c4 0c             	add    esp,0xc
c00081ed:	c3                   	ret    

c00081ee <ff_uni2oem>:
c00081ee:	83 ec 14             	sub    esp,0x14
c00081f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081f5:	66 89 04 24          	mov    WORD PTR [esp],ax
c00081f9:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008200:	c7 44 24 0c 20 f8 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f820
c0008208:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000820d:	77 0b                	ja     c000821a <ff_uni2oem+0x2c>
c000820f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008213:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008218:	eb 5b                	jmp    c0008275 <ff_uni2oem+0x87>
c000821a:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008222:	77 51                	ja     c0008275 <ff_uni2oem+0x87>
c0008224:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000822a:	75 49                	jne    c0008275 <ff_uni2oem+0x87>
c000822c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008233:	eb 0b                	jmp    c0008240 <ff_uni2oem+0x52>
c0008235:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000823a:	40                   	inc    eax
c000823b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008240:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008246:	77 1b                	ja     c0008263 <ff_uni2oem+0x75>
c0008248:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000824d:	01 c0                	add    eax,eax
c000824f:	89 c2                	mov    edx,eax
c0008251:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008255:	01 d0                	add    eax,edx
c0008257:	66 8b 00             	mov    ax,WORD PTR [eax]
c000825a:	0f b7 c0             	movzx  eax,ax
c000825d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008261:	75 d2                	jne    c0008235 <ff_uni2oem+0x47>
c0008263:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008268:	83 e8 80             	sub    eax,0xffffff80
c000826b:	25 ff 00 00 00       	and    eax,0xff
c0008270:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008275:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000827a:	83 c4 14             	add    esp,0x14
c000827d:	c3                   	ret    

c000827e <ff_oem2uni>:
c000827e:	83 ec 18             	sub    esp,0x18
c0008281:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008285:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008289:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000828e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008292:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008299:	c7 44 24 10 20 f8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f820
c00082a1:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00082a7:	77 0b                	ja     c00082b4 <ff_oem2uni+0x36>
c00082a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ad:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082b2:	eb 2d                	jmp    c00082e1 <ff_oem2uni+0x63>
c00082b4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ba:	75 25                	jne    c00082e1 <ff_oem2uni+0x63>
c00082bc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00082c3:	77 1c                	ja     c00082e1 <ff_oem2uni+0x63>
c00082c5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00082ca:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00082cf:	01 c0                	add    eax,eax
c00082d1:	89 c2                	mov    edx,eax
c00082d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00082d7:	01 d0                	add    eax,edx
c00082d9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082dc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082e1:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00082e6:	83 c4 18             	add    esp,0x18
c00082e9:	c3                   	ret    

c00082ea <ff_wtoupper>:
c00082ea:	83 ec 10             	sub    esp,0x10
c00082ed:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00082f5:	0f 87 3e 01 00 00    	ja     c0008439 <ff_wtoupper+0x14f>
c00082fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00082ff:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008304:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000830b:	77 07                	ja     c0008314 <ff_wtoupper+0x2a>
c000830d:	b8 20 f6 01 c0       	mov    eax,0xc001f620
c0008312:	eb 05                	jmp    c0008319 <ff_wtoupper+0x2f>
c0008314:	b8 60 f5 01 c0       	mov    eax,0xc001f560
c0008319:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000831d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008321:	8d 50 02             	lea    edx,[eax+0x2]
c0008324:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008328:	66 8b 00             	mov    ax,WORD PTR [eax]
c000832b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008330:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008336:	0f 84 f4 00 00 00    	je     c0008430 <ff_wtoupper+0x146>
c000833c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008341:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008346:	0f 82 e4 00 00 00    	jb     c0008430 <ff_wtoupper+0x146>
c000834c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008350:	8d 50 02             	lea    edx,[eax+0x2]
c0008353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008357:	66 8b 00             	mov    ax,WORD PTR [eax]
c000835a:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000835f:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008364:	66 c1 e8 08          	shr    ax,0x8
c0008368:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000836d:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008374:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008379:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000837e:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008383:	01 ca                	add    edx,ecx
c0008385:	39 d0                	cmp    eax,edx
c0008387:	0f 8d 86 00 00 00    	jge    c0008413 <ff_wtoupper+0x129>
c000838d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008392:	83 f8 08             	cmp    eax,0x8
c0008395:	0f 87 94 00 00 00    	ja     c000842f <ff_wtoupper+0x145>
c000839b:	8b 04 85 20 f5 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0ae0]
c00083a2:	ff e0                	jmp    eax
c00083a4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00083a9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00083ae:	29 c2                	sub    edx,eax
c00083b0:	89 d0                	mov    eax,edx
c00083b2:	01 c0                	add    eax,eax
c00083b4:	89 c2                	mov    edx,eax
c00083b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083ba:	01 d0                	add    eax,edx
c00083bc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083bf:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083c4:	eb 4b                	jmp    c0008411 <ff_wtoupper+0x127>
c00083c6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083cb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00083cf:	83 e0 01             	and    eax,0x1
c00083d2:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00083d7:	eb 38                	jmp    c0008411 <ff_wtoupper+0x127>
c00083d9:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00083df:	eb 30                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e1:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00083e7:	eb 28                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e9:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00083ef:	eb 20                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f1:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00083f7:	eb 18                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f9:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00083ff:	eb 10                	jmp    c0008411 <ff_wtoupper+0x127>
c0008401:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008407:	eb 08                	jmp    c0008411 <ff_wtoupper+0x127>
c0008409:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008410:	90                   	nop
c0008411:	eb 1c                	jmp    c000842f <ff_wtoupper+0x145>
c0008413:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008419:	0f 85 fe fe ff ff    	jne    c000831d <ff_wtoupper+0x33>
c000841f:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008424:	01 c0                	add    eax,eax
c0008426:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000842a:	e9 ee fe ff ff       	jmp    c000831d <ff_wtoupper+0x33>
c000842f:	90                   	nop
c0008430:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008435:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008439:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000843d:	83 c4 10             	add    esp,0x10
c0008440:	c3                   	ret    

c0008441 <is_bad_src_ratio>:
c0008441:	83 ec 0c             	sub    esp,0xc
c0008444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008448:	89 04 24             	mov    DWORD PTR [esp],eax
c000844b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000844f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008453:	dd 04 24             	fld    QWORD PTR [esp]
c0008456:	dd 05 e0 fd 01 c0    	fld    QWORD PTR ds:0xc001fde0
c000845c:	de d9                	fcompp 
c000845e:	df e0                	fnstsw ax
c0008460:	f6 c4 45             	test   ah,0x45
c0008463:	74 10                	je     c0008475 <is_bad_src_ratio+0x34>
c0008465:	dd 04 24             	fld    QWORD PTR [esp]
c0008468:	dc 1d e8 fd 01 c0    	fcomp  QWORD PTR ds:0xc001fde8
c000846e:	df e0                	fnstsw ax
c0008470:	f6 c4 45             	test   ah,0x45
c0008473:	75 07                	jne    c000847c <is_bad_src_ratio+0x3b>
c0008475:	b8 01 00 00 00       	mov    eax,0x1
c000847a:	eb 05                	jmp    c0008481 <is_bad_src_ratio+0x40>
c000847c:	b8 00 00 00 00       	mov    eax,0x0
c0008481:	83 c4 0c             	add    esp,0xc
c0008484:	c3                   	ret    

c0008485 <psrc_set_converter>:
c0008485:	56                   	push   esi
c0008486:	89 d6                	mov    esi,edx
c0008488:	53                   	push   ebx
c0008489:	89 c3                	mov    ebx,eax
c000848b:	83 ec 0c             	sub    esp,0xc
c000848e:	52                   	push   edx
c000848f:	50                   	push   eax
c0008490:	e8 33 24 00 00       	call   c000a8c8 <sinc_set_converter>
c0008495:	83 c4 10             	add    esp,0x10
c0008498:	85 c0                	test   eax,eax
c000849a:	74 25                	je     c00084c1 <psrc_set_converter+0x3c>
c000849c:	50                   	push   eax
c000849d:	50                   	push   eax
c000849e:	56                   	push   esi
c000849f:	53                   	push   ebx
c00084a0:	e8 39 29 00 00       	call   c000adde <zoh_set_converter>
c00084a5:	83 c4 10             	add    esp,0x10
c00084a8:	85 c0                	test   eax,eax
c00084aa:	74 15                	je     c00084c1 <psrc_set_converter+0x3c>
c00084ac:	51                   	push   ecx
c00084ad:	51                   	push   ecx
c00084ae:	56                   	push   esi
c00084af:	53                   	push   ebx
c00084b0:	e8 10 0a 00 00       	call   c0008ec5 <linear_set_converter>
c00084b5:	83 c4 10             	add    esp,0x10
c00084b8:	ba 0a 00 00 00       	mov    edx,0xa
c00084bd:	85 c0                	test   eax,eax
c00084bf:	75 02                	jne    c00084c3 <psrc_set_converter+0x3e>
c00084c1:	31 d2                	xor    edx,edx
c00084c3:	89 d0                	mov    eax,edx
c00084c5:	5a                   	pop    edx
c00084c6:	5b                   	pop    ebx
c00084c7:	5e                   	pop    esi
c00084c8:	c3                   	ret    

c00084c9 <src_delete>:
c00084c9:	53                   	push   ebx
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084d1:	85 db                	test   ebx,ebx
c00084d3:	74 29                	je     c00084fe <src_delete+0x35>
c00084d5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00084d8:	85 c0                	test   eax,eax
c00084da:	74 0c                	je     c00084e8 <src_delete+0x1f>
c00084dc:	83 ec 0c             	sub    esp,0xc
c00084df:	50                   	push   eax
c00084e0:	e8 f6 4c 00 00       	call   c000d1db <free>
c00084e5:	83 c4 10             	add    esp,0x10
c00084e8:	50                   	push   eax
c00084e9:	6a 3c                	push   0x3c
c00084eb:	6a 00                	push   0x0
c00084ed:	53                   	push   ebx
c00084ee:	e8 15 81 ff ff       	call   c0000608 <memset>
c00084f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00084f6:	e8 e0 4c 00 00       	call   c000d1db <free>
c00084fb:	83 c4 10             	add    esp,0x10
c00084fe:	31 c0                	xor    eax,eax
c0008500:	83 c4 08             	add    esp,0x8
c0008503:	5b                   	pop    ebx
c0008504:	c3                   	ret    

c0008505 <src_process>:
c0008505:	56                   	push   esi
c0008506:	53                   	push   ebx
c0008507:	53                   	push   ebx
c0008508:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000850c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008510:	85 f6                	test   esi,esi
c0008512:	0f 84 e2 00 00 00    	je     c00085fa <src_process+0xf5>
c0008518:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c000851c:	0f 84 df 00 00 00    	je     c0008601 <src_process+0xfc>
c0008522:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c0008526:	0f 84 d5 00 00 00    	je     c0008601 <src_process+0xfc>
c000852c:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008533:	0f 85 cf 00 00 00    	jne    c0008608 <src_process+0x103>
c0008539:	85 db                	test   ebx,ebx
c000853b:	0f 84 ce 00 00 00    	je     c000860f <src_process+0x10a>
c0008541:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008544:	0f 84 cc 00 00 00    	je     c0008616 <src_process+0x111>
c000854a:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c000854e:	0f 84 c2 00 00 00    	je     c0008616 <src_process+0x111>
c0008554:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008557:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000855a:	e8 e2 fe ff ff       	call   c0008441 <is_bad_src_ratio>
c000855f:	5a                   	pop    edx
c0008560:	85 c0                	test   eax,eax
c0008562:	59                   	pop    ecx
c0008563:	0f 85 b4 00 00 00    	jne    c000861d <src_process+0x118>
c0008569:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000856d:	79 07                	jns    c0008576 <src_process+0x71>
c000856f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008576:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000857a:	79 07                	jns    c0008583 <src_process+0x7e>
c000857c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008583:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008585:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008588:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000858b:	39 ca                	cmp    edx,ecx
c000858d:	73 0b                	jae    c000859a <src_process+0x95>
c000858f:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008593:	8d 04 82             	lea    eax,[edx+eax*4]
c0008596:	39 c1                	cmp    ecx,eax
c0008598:	eb 09                	jmp    c00085a3 <src_process+0x9e>
c000859a:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c000859e:	8d 04 81             	lea    eax,[ecx+eax*4]
c00085a1:	39 c2                	cmp    edx,eax
c00085a3:	72 7f                	jb     c0008624 <src_process+0x11f>
c00085a5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00085ac:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00085b3:	d9 05 00 fe 01 c0    	fld    DWORD PTR ds:0xc001fe00
c00085b9:	dc 1e                	fcomp  QWORD PTR [esi]
c00085bb:	df e0                	fnstsw ax
c00085bd:	9e                   	sahf   
c00085be:	76 05                	jbe    c00085c5 <src_process+0xc0>
c00085c0:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c00085c3:	dd 1e                	fstp   QWORD PTR [esi]
c00085c5:	83 ec 10             	sub    esp,0x10
c00085c8:	dd 06                	fld    QWORD PTR [esi]
c00085ca:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c00085cd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00085d0:	e8 6b 60 01 00       	call   c001e640 <fabs>
c00085d5:	83 c4 10             	add    esp,0x10
c00085d8:	dd 05 f0 fd 01 c0    	fld    QWORD PTR ds:0xc001fdf0
c00085de:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00085e2:	de d9                	fcompp 
c00085e4:	df e0                	fnstsw ax
c00085e6:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00085ea:	9e                   	sahf   
c00085eb:	76 05                	jbe    c00085f2 <src_process+0xed>
c00085ed:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00085f0:	eb 03                	jmp    c00085f5 <src_process+0xf0>
c00085f2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00085f5:	59                   	pop    ecx
c00085f6:	5b                   	pop    ebx
c00085f7:	5e                   	pop    esi
c00085f8:	ff e0                	jmp    eax
c00085fa:	b8 02 00 00 00       	mov    eax,0x2
c00085ff:	eb 28                	jmp    c0008629 <src_process+0x124>
c0008601:	b8 07 00 00 00       	mov    eax,0x7
c0008606:	eb 21                	jmp    c0008629 <src_process+0x124>
c0008608:	b8 12 00 00 00       	mov    eax,0x12
c000860d:	eb 1a                	jmp    c0008629 <src_process+0x124>
c000860f:	b8 03 00 00 00       	mov    eax,0x3
c0008614:	eb 13                	jmp    c0008629 <src_process+0x124>
c0008616:	b8 04 00 00 00       	mov    eax,0x4
c000861b:	eb 0c                	jmp    c0008629 <src_process+0x124>
c000861d:	b8 06 00 00 00       	mov    eax,0x6
c0008622:	eb 05                	jmp    c0008629 <src_process+0x124>
c0008624:	b8 10 00 00 00       	mov    eax,0x10
c0008629:	5a                   	pop    edx
c000862a:	5b                   	pop    ebx
c000862b:	5e                   	pop    esi
c000862c:	c3                   	ret    

c000862d <src_callback_read>:
c000862d:	55                   	push   ebp
c000862e:	57                   	push   edi
c000862f:	56                   	push   esi
c0008630:	53                   	push   ebx
c0008631:	83 ec 4c             	sub    esp,0x4c
c0008634:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0008638:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c000863c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0008640:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008644:	85 ff                	test   edi,edi
c0008646:	0f 8e 36 01 00 00    	jle    c0008782 <src_callback_read+0x155>
c000864c:	85 db                	test   ebx,ebx
c000864e:	0f 84 2e 01 00 00    	je     c0008782 <src_callback_read+0x155>
c0008654:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000865b:	74 0c                	je     c0008669 <src_callback_read+0x3c>
c000865d:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008664:	e9 19 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c0008669:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000866d:	75 0c                	jne    c000867b <src_callback_read+0x4e>
c000866f:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008676:	e9 07 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c000867b:	51                   	push   ecx
c000867c:	6a 24                	push   0x24
c000867e:	6a 00                	push   0x0
c0008680:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008684:	50                   	push   eax
c0008685:	e8 7e 7f ff ff       	call   c0000608 <memset>
c000868a:	5e                   	pop    esi
c000868b:	5d                   	pop    ebp
c000868c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008694:	e8 a8 fd ff ff       	call   c0008441 <is_bad_src_ratio>
c0008699:	83 c4 10             	add    esp,0x10
c000869c:	85 c0                	test   eax,eax
c000869e:	74 0c                	je     c00086ac <src_callback_read+0x7f>
c00086a0:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00086a7:	e9 d6 00 00 00       	jmp    c0008782 <src_callback_read+0x155>
c00086ac:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00086b0:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00086b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086b8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00086bc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00086bf:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00086c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00086c7:	31 f6                	xor    esi,esi
c00086c9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00086cc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00086d0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00086d5:	75 30                	jne    c0008707 <src_callback_read+0xda>
c00086d7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00086db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086df:	52                   	push   edx
c00086e0:	52                   	push   edx
c00086e1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00086e5:	50                   	push   eax
c00086e6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086e9:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00086ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00086f0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00086f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00086f8:	83 c4 10             	add    esp,0x10
c00086fb:	85 c0                	test   eax,eax
c00086fd:	75 08                	jne    c0008707 <src_callback_read+0xda>
c00086ff:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008707:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c000870e:	50                   	push   eax
c000870f:	50                   	push   eax
c0008710:	8d 44 24 24          	lea    eax,[esp+0x24]
c0008714:	50                   	push   eax
c0008715:	53                   	push   ebx
c0008716:	e8 ea fd ff ff       	call   c0008505 <src_process>
c000871b:	83 c4 10             	add    esp,0x10
c000871e:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008725:	85 c0                	test   eax,eax
c0008727:	75 42                	jne    c000876b <src_callback_read+0x13e>
c0008729:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000872d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008730:	89 e9                	mov    ecx,ebp
c0008732:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c0008736:	0f af ca             	imul   ecx,edx
c0008739:	c1 e1 02             	shl    ecx,0x2
c000873c:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0008740:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0008744:	0f af d1             	imul   edx,ecx
c0008747:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c000874b:	c1 e2 02             	shl    edx,0x2
c000874e:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c0008752:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008755:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c000875a:	75 04                	jne    c0008760 <src_callback_read+0x133>
c000875c:	85 c9                	test   ecx,ecx
c000875e:	74 0b                	je     c000876b <src_callback_read+0x13e>
c0008760:	39 d7                	cmp    edi,edx
c0008762:	7e 09                	jle    c000876d <src_callback_read+0x140>
c0008764:	89 d6                	mov    esi,edx
c0008766:	e9 65 ff ff ff       	jmp    c00086d0 <src_callback_read+0xa3>
c000876b:	89 f2                	mov    edx,esi
c000876d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008771:	85 c0                	test   eax,eax
c0008773:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008776:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000877a:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000877d:	74 05                	je     c0008784 <src_callback_read+0x157>
c000877f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008782:	31 d2                	xor    edx,edx
c0008784:	83 c4 4c             	add    esp,0x4c
c0008787:	89 d0                	mov    eax,edx
c0008789:	5b                   	pop    ebx
c000878a:	5e                   	pop    esi
c000878b:	5f                   	pop    edi
c000878c:	5d                   	pop    ebp
c000878d:	c3                   	ret    

c000878e <src_set_ratio>:
c000878e:	53                   	push   ebx
c000878f:	b8 02 00 00 00       	mov    eax,0x2
c0008794:	83 ec 08             	sub    esp,0x8
c0008797:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000879b:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c000879f:	85 db                	test   ebx,ebx
c00087a1:	74 33                	je     c00087d6 <src_set_ratio+0x48>
c00087a3:	b8 07 00 00 00       	mov    eax,0x7
c00087a8:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00087ac:	74 2c                	je     c00087da <src_set_ratio+0x4c>
c00087ae:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00087b2:	74 2a                	je     c00087de <src_set_ratio+0x50>
c00087b4:	50                   	push   eax
c00087b5:	50                   	push   eax
c00087b6:	dd 14 24             	fst    QWORD PTR [esp]
c00087b9:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00087bd:	e8 7f fc ff ff       	call   c0008441 <is_bad_src_ratio>
c00087c2:	5a                   	pop    edx
c00087c3:	85 c0                	test   eax,eax
c00087c5:	59                   	pop    ecx
c00087c6:	75 07                	jne    c00087cf <src_set_ratio+0x41>
c00087c8:	dd 04 24             	fld    QWORD PTR [esp]
c00087cb:	dd 1b                	fstp   QWORD PTR [ebx]
c00087cd:	eb 11                	jmp    c00087e0 <src_set_ratio+0x52>
c00087cf:	b8 06 00 00 00       	mov    eax,0x6
c00087d4:	eb 0a                	jmp    c00087e0 <src_set_ratio+0x52>
c00087d6:	dd d8                	fstp   st(0)
c00087d8:	eb 06                	jmp    c00087e0 <src_set_ratio+0x52>
c00087da:	dd d8                	fstp   st(0)
c00087dc:	eb 02                	jmp    c00087e0 <src_set_ratio+0x52>
c00087de:	dd d8                	fstp   st(0)
c00087e0:	83 c4 08             	add    esp,0x8
c00087e3:	5b                   	pop    ebx
c00087e4:	c3                   	ret    

c00087e5 <src_get_channels>:
c00087e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00087e9:	b8 02 00 00 00       	mov    eax,0x2
c00087ee:	85 d2                	test   edx,edx
c00087f0:	74 14                	je     c0008806 <src_get_channels+0x21>
c00087f2:	b8 07 00 00 00       	mov    eax,0x7
c00087f7:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00087fb:	74 09                	je     c0008806 <src_get_channels+0x21>
c00087fd:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008801:	74 03                	je     c0008806 <src_get_channels+0x21>
c0008803:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008806:	c3                   	ret    

c0008807 <src_reset>:
c0008807:	53                   	push   ebx
c0008808:	b8 02 00 00 00       	mov    eax,0x2
c000880d:	83 ec 08             	sub    esp,0x8
c0008810:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008814:	85 db                	test   ebx,ebx
c0008816:	74 2e                	je     c0008846 <src_reset+0x3f>
c0008818:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000881b:	85 c0                	test   eax,eax
c000881d:	74 09                	je     c0008828 <src_reset+0x21>
c000881f:	83 ec 0c             	sub    esp,0xc
c0008822:	53                   	push   ebx
c0008823:	ff d0                	call   eax
c0008825:	83 c4 10             	add    esp,0x10
c0008828:	d9 ee                	fldz   
c000882a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008831:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0008834:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000883b:	dd 1b                	fstp   QWORD PTR [ebx]
c000883d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008844:	31 c0                	xor    eax,eax
c0008846:	83 c4 08             	add    esp,0x8
c0008849:	5b                   	pop    ebx
c000884a:	c3                   	ret    

c000884b <src_new>:
c000884b:	57                   	push   edi
c000884c:	56                   	push   esi
c000884d:	53                   	push   ebx
c000884e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008852:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008856:	85 f6                	test   esi,esi
c0008858:	74 73                	je     c00088cd <src_new+0x82>
c000885a:	85 ff                	test   edi,edi
c000885c:	7f 08                	jg     c0008866 <src_new+0x1b>
c000885e:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008864:	eb 1e                	jmp    c0008884 <src_new+0x39>
c0008866:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c000886c:	50                   	push   eax
c000886d:	50                   	push   eax
c000886e:	6a 3c                	push   0x3c
c0008870:	6a 01                	push   0x1
c0008872:	e8 84 49 00 00       	call   c000d1fb <calloc>
c0008877:	83 c4 10             	add    esp,0x10
c000887a:	89 c3                	mov    ebx,eax
c000887c:	85 c0                	test   eax,eax
c000887e:	75 10                	jne    c0008890 <src_new+0x45>
c0008880:	85 f6                	test   esi,esi
c0008882:	75 04                	jne    c0008888 <src_new+0x3d>
c0008884:	31 db                	xor    ebx,ebx
c0008886:	eb 4b                	jmp    c00088d3 <src_new+0x88>
c0008888:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c000888e:	eb 43                	jmp    c00088d3 <src_new+0x88>
c0008890:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008893:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000889a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000889e:	e8 e2 fb ff ff       	call   c0008485 <psrc_set_converter>
c00088a3:	85 c0                	test   eax,eax
c00088a5:	74 18                	je     c00088bf <src_new+0x74>
c00088a7:	85 f6                	test   esi,esi
c00088a9:	74 06                	je     c00088b1 <src_new+0x66>
c00088ab:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00088b1:	83 ec 0c             	sub    esp,0xc
c00088b4:	53                   	push   ebx
c00088b5:	31 db                	xor    ebx,ebx
c00088b7:	e8 1f 49 00 00       	call   c000d1db <free>
c00088bc:	83 c4 10             	add    esp,0x10
c00088bf:	83 ec 0c             	sub    esp,0xc
c00088c2:	53                   	push   ebx
c00088c3:	e8 3f ff ff ff       	call   c0008807 <src_reset>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	eb 06                	jmp    c00088d3 <src_new+0x88>
c00088cd:	85 ff                	test   edi,edi
c00088cf:	7f 9b                	jg     c000886c <src_new+0x21>
c00088d1:	eb b1                	jmp    c0008884 <src_new+0x39>
c00088d3:	89 d8                	mov    eax,ebx
c00088d5:	5b                   	pop    ebx
c00088d6:	5e                   	pop    esi
c00088d7:	5f                   	pop    edi
c00088d8:	c3                   	ret    

c00088d9 <src_callback_new>:
c00088d9:	56                   	push   esi
c00088da:	53                   	push   ebx
c00088db:	53                   	push   ebx
c00088dc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00088e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088e4:	85 f6                	test   esi,esi
c00088e6:	75 0e                	jne    c00088f6 <src_callback_new+0x1d>
c00088e8:	31 db                	xor    ebx,ebx
c00088ea:	85 c0                	test   eax,eax
c00088ec:	74 47                	je     c0008935 <src_callback_new+0x5c>
c00088ee:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00088f4:	eb 3f                	jmp    c0008935 <src_callback_new+0x5c>
c00088f6:	85 c0                	test   eax,eax
c00088f8:	74 06                	je     c0008900 <src_callback_new+0x27>
c00088fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008900:	51                   	push   ecx
c0008901:	50                   	push   eax
c0008902:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008906:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000890a:	e8 3c ff ff ff       	call   c000884b <src_new>
c000890f:	83 c4 10             	add    esp,0x10
c0008912:	89 c3                	mov    ebx,eax
c0008914:	85 c0                	test   eax,eax
c0008916:	74 1d                	je     c0008935 <src_callback_new+0x5c>
c0008918:	83 ec 0c             	sub    esp,0xc
c000891b:	50                   	push   eax
c000891c:	e8 e6 fe ff ff       	call   c0008807 <src_reset>
c0008921:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008925:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c000892c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000892f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008932:	83 c4 10             	add    esp,0x10
c0008935:	89 d8                	mov    eax,ebx
c0008937:	5a                   	pop    edx
c0008938:	5b                   	pop    ebx
c0008939:	5e                   	pop    esi
c000893a:	c3                   	ret    

c000893b <src_get_name>:
c000893b:	53                   	push   ebx
c000893c:	83 ec 14             	sub    esp,0x14
c000893f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008943:	53                   	push   ebx
c0008944:	e8 59 1f 00 00       	call   c000a8a2 <sinc_get_name>
c0008949:	83 c4 10             	add    esp,0x10
c000894c:	85 c0                	test   eax,eax
c000894e:	75 1d                	jne    c000896d <src_get_name+0x32>
c0008950:	83 ec 0c             	sub    esp,0xc
c0008953:	53                   	push   ebx
c0008954:	e8 67 24 00 00       	call   c000adc0 <zoh_get_name>
c0008959:	83 c4 10             	add    esp,0x10
c000895c:	85 c0                	test   eax,eax
c000895e:	75 0d                	jne    c000896d <src_get_name+0x32>
c0008960:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008964:	83 c4 08             	add    esp,0x8
c0008967:	5b                   	pop    ebx
c0008968:	e9 3a 05 00 00       	jmp    c0008ea7 <linear_get_name>
c000896d:	83 c4 08             	add    esp,0x8
c0008970:	5b                   	pop    ebx
c0008971:	c3                   	ret    

c0008972 <src_get_description>:
c0008972:	53                   	push   ebx
c0008973:	83 ec 14             	sub    esp,0x14
c0008976:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000897a:	53                   	push   ebx
c000897b:	e8 35 1f 00 00       	call   c000a8b5 <sinc_get_description>
c0008980:	83 c4 10             	add    esp,0x10
c0008983:	85 c0                	test   eax,eax
c0008985:	75 1d                	jne    c00089a4 <src_get_description+0x32>
c0008987:	83 ec 0c             	sub    esp,0xc
c000898a:	53                   	push   ebx
c000898b:	e8 3f 24 00 00       	call   c000adcf <zoh_get_description>
c0008990:	83 c4 10             	add    esp,0x10
c0008993:	85 c0                	test   eax,eax
c0008995:	75 0d                	jne    c00089a4 <src_get_description+0x32>
c0008997:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000899b:	83 c4 08             	add    esp,0x8
c000899e:	5b                   	pop    ebx
c000899f:	e9 12 05 00 00       	jmp    c0008eb6 <linear_get_description>
c00089a4:	83 c4 08             	add    esp,0x8
c00089a7:	5b                   	pop    ebx
c00089a8:	c3                   	ret    

c00089a9 <src_get_version>:
c00089a9:	b8 20 f9 01 c0       	mov    eax,0xc001f920
c00089ae:	c3                   	ret    

c00089af <src_is_valid_ratio>:
c00089af:	50                   	push   eax
c00089b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b8:	e8 84 fa ff ff       	call   c0008441 <is_bad_src_ratio>
c00089bd:	85 c0                	test   eax,eax
c00089bf:	0f 94 c0             	sete   al
c00089c2:	83 c4 0c             	add    esp,0xc
c00089c5:	0f b6 c0             	movzx  eax,al
c00089c8:	c3                   	ret    

c00089c9 <src_error>:
c00089c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089cd:	31 c0                	xor    eax,eax
c00089cf:	85 d2                	test   edx,edx
c00089d1:	74 03                	je     c00089d6 <src_error+0xd>
c00089d3:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00089d6:	c3                   	ret    

c00089d7 <src_strerror>:
c00089d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089db:	31 c0                	xor    eax,eax
c00089dd:	83 fa 17             	cmp    edx,0x17
c00089e0:	77 07                	ja     c00089e9 <src_strerror+0x12>
c00089e2:	8b 04 95 80 fd 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0280]
c00089e9:	c3                   	ret    

c00089ea <src_simple>:
c00089ea:	56                   	push   esi
c00089eb:	53                   	push   ebx
c00089ec:	83 ec 18             	sub    esp,0x18
c00089ef:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089f3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089f7:	50                   	push   eax
c00089f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00089fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a00:	e8 46 fe ff ff       	call   c000884b <src_new>
c0008a05:	83 c4 10             	add    esp,0x10
c0008a08:	85 c0                	test   eax,eax
c0008a0a:	75 06                	jne    c0008a12 <src_simple+0x28>
c0008a0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008a10:	eb 25                	jmp    c0008a37 <src_simple+0x4d>
c0008a12:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008a19:	89 c3                	mov    ebx,eax
c0008a1b:	50                   	push   eax
c0008a1c:	50                   	push   eax
c0008a1d:	56                   	push   esi
c0008a1e:	53                   	push   ebx
c0008a1f:	e8 e1 fa ff ff       	call   c0008505 <src_process>
c0008a24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008a27:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a2b:	e8 99 fa ff ff       	call   c00084c9 <src_delete>
c0008a30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a34:	83 c4 10             	add    esp,0x10
c0008a37:	83 c4 14             	add    esp,0x14
c0008a3a:	5b                   	pop    ebx
c0008a3b:	5e                   	pop    esi
c0008a3c:	c3                   	ret    

c0008a3d <src_short_to_float_array>:
c0008a3d:	83 ec 0c             	sub    esp,0xc
c0008a40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008a44:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008a4c:	85 c0                	test   eax,eax
c0008a4e:	74 0f                	je     c0008a5f <src_short_to_float_array+0x22>
c0008a50:	48                   	dec    eax
c0008a51:	d9 05 04 fe 01 c0    	fld    DWORD PTR ds:0xc001fe04
c0008a57:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008a5a:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008a5d:	eb ed                	jmp    c0008a4c <src_short_to_float_array+0xf>
c0008a5f:	83 c4 0c             	add    esp,0xc
c0008a62:	c3                   	ret    

c0008a63 <src_float_to_short_array>:
c0008a63:	56                   	push   esi
c0008a64:	53                   	push   ebx
c0008a65:	52                   	push   edx
c0008a66:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a6a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008a6e:	85 db                	test   ebx,ebx
c0008a70:	74 51                	je     c0008ac3 <src_float_to_short_array+0x60>
c0008a72:	4b                   	dec    ebx
c0008a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a77:	d9 05 08 fe 01 c0    	fld    DWORD PTR ds:0xc001fe08
c0008a7d:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008a80:	dc 15 f8 fd 01 c0    	fcom   QWORD PTR ds:0xc001fdf8
c0008a86:	df e0                	fnstsw ax
c0008a88:	9e                   	sahf   
c0008a89:	72 0a                	jb     c0008a95 <src_float_to_short_array+0x32>
c0008a8b:	dd d8                	fstp   st(0)
c0008a8d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008a93:	eb d9                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008a95:	d9 05 0c fe 01 c0    	fld    DWORD PTR ds:0xc001fe0c
c0008a9b:	d8 d9                	fcomp  st(1)
c0008a9d:	df e0                	fnstsw ax
c0008a9f:	9e                   	sahf   
c0008aa0:	72 0a                	jb     c0008aac <src_float_to_short_array+0x49>
c0008aa2:	dd d8                	fstp   st(0)
c0008aa4:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008aaa:	eb c2                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008aac:	83 ec 10             	sub    esp,0x10
c0008aaf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008ab2:	e8 a9 5b 01 00       	call   c001e660 <lrint>
c0008ab7:	83 c4 10             	add    esp,0x10
c0008aba:	c1 f8 10             	sar    eax,0x10
c0008abd:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ac1:	eb ab                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008ac3:	58                   	pop    eax
c0008ac4:	5b                   	pop    ebx
c0008ac5:	5e                   	pop    esi
c0008ac6:	c3                   	ret    

c0008ac7 <src_int_to_float_array>:
c0008ac7:	83 ec 0c             	sub    esp,0xc
c0008aca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ace:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ad2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008ad6:	85 c0                	test   eax,eax
c0008ad8:	74 0f                	je     c0008ae9 <src_int_to_float_array+0x22>
c0008ada:	48                   	dec    eax
c0008adb:	d9 05 10 fe 01 c0    	fld    DWORD PTR ds:0xc001fe10
c0008ae1:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008ae4:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008ae7:	eb ed                	jmp    c0008ad6 <src_int_to_float_array+0xf>
c0008ae9:	83 c4 0c             	add    esp,0xc
c0008aec:	c3                   	ret    

c0008aed <src_float_to_int_array>:
c0008aed:	56                   	push   esi
c0008aee:	53                   	push   ebx
c0008aef:	52                   	push   edx
c0008af0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008af4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008af8:	85 db                	test   ebx,ebx
c0008afa:	74 4f                	je     c0008b4b <src_float_to_int_array+0x5e>
c0008afc:	4b                   	dec    ebx
c0008afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b01:	d9 05 08 fe 01 c0    	fld    DWORD PTR ds:0xc001fe08
c0008b07:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b0a:	dc 15 f8 fd 01 c0    	fcom   QWORD PTR ds:0xc001fdf8
c0008b10:	df e0                	fnstsw ax
c0008b12:	9e                   	sahf   
c0008b13:	72 0b                	jb     c0008b20 <src_float_to_int_array+0x33>
c0008b15:	dd d8                	fstp   st(0)
c0008b17:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008b1e:	eb d8                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b20:	d9 05 0c fe 01 c0    	fld    DWORD PTR ds:0xc001fe0c
c0008b26:	d8 d9                	fcomp  st(1)
c0008b28:	df e0                	fnstsw ax
c0008b2a:	9e                   	sahf   
c0008b2b:	72 0b                	jb     c0008b38 <src_float_to_int_array+0x4b>
c0008b2d:	dd d8                	fstp   st(0)
c0008b2f:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008b36:	eb c0                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b38:	83 ec 10             	sub    esp,0x10
c0008b3b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b3e:	e8 1d 5b 01 00       	call   c001e660 <lrint>
c0008b43:	83 c4 10             	add    esp,0x10
c0008b46:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008b49:	eb ad                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b4b:	58                   	pop    eax
c0008b4c:	5b                   	pop    ebx
c0008b4d:	5e                   	pop    esi
c0008b4e:	c3                   	ret    

c0008b4f <is_bad_src_ratio>:
c0008b4f:	83 ec 0c             	sub    esp,0xc
c0008b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b56:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b5d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008b61:	dd 04 24             	fld    QWORD PTR [esp]
c0008b64:	dd 05 e0 fd 01 c0    	fld    QWORD PTR ds:0xc001fde0
c0008b6a:	de d9                	fcompp 
c0008b6c:	df e0                	fnstsw ax
c0008b6e:	f6 c4 45             	test   ah,0x45
c0008b71:	74 10                	je     c0008b83 <is_bad_src_ratio+0x34>
c0008b73:	dd 04 24             	fld    QWORD PTR [esp]
c0008b76:	dc 1d e8 fd 01 c0    	fcomp  QWORD PTR ds:0xc001fde8
c0008b7c:	df e0                	fnstsw ax
c0008b7e:	f6 c4 45             	test   ah,0x45
c0008b81:	75 07                	jne    c0008b8a <is_bad_src_ratio+0x3b>
c0008b83:	b8 01 00 00 00       	mov    eax,0x1
c0008b88:	eb 05                	jmp    c0008b8f <is_bad_src_ratio+0x40>
c0008b8a:	b8 00 00 00 00       	mov    eax,0x0
c0008b8f:	83 c4 0c             	add    esp,0xc
c0008b92:	c3                   	ret    

c0008b93 <fmod_one>:
c0008b93:	83 ec 2c             	sub    esp,0x2c
c0008b96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b9e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008ba2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ba6:	83 ec 08             	sub    esp,0x8
c0008ba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb1:	e8 aa 5a 01 00       	call   c001e660 <lrint>
c0008bb6:	83 c4 10             	add    esp,0x10
c0008bb9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008bbd:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008bc1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008bc5:	de e1                	fsubrp st(1),st
c0008bc7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008bcb:	d9 ee                	fldz   
c0008bcd:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008bd1:	df e0                	fnstsw ax
c0008bd3:	f6 c4 45             	test   ah,0x45
c0008bd6:	75 0a                	jne    c0008be2 <fmod_one+0x4f>
c0008bd8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008bdc:	d9 e8                	fld1   
c0008bde:	de c1                	faddp  st(1),st
c0008be0:	eb 04                	jmp    c0008be6 <fmod_one+0x53>
c0008be2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008be6:	83 c4 2c             	add    esp,0x2c
c0008be9:	c3                   	ret    

c0008bea <linear_vari_process>:
c0008bea:	55                   	push   ebp
c0008beb:	57                   	push   edi
c0008bec:	56                   	push   esi
c0008bed:	53                   	push   ebx
c0008bee:	83 ec 2c             	sub    esp,0x2c
c0008bf1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008bf5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008bf9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008c01:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008c05:	0f 8e 5e 02 00 00    	jle    c0008e69 <linear_vari_process+0x27f>
c0008c0b:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008c0e:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008c16:	85 db                	test   ebx,ebx
c0008c18:	0f 84 4b 02 00 00    	je     c0008e69 <linear_vari_process+0x27f>
c0008c1e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008c21:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008c25:	74 19                	je     c0008c40 <linear_vari_process+0x56>
c0008c27:	31 d2                	xor    edx,edx
c0008c29:	39 c2                	cmp    edx,eax
c0008c2b:	7d 0c                	jge    c0008c39 <linear_vari_process+0x4f>
c0008c2d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008c2f:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008c32:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008c36:	42                   	inc    edx
c0008c37:	eb f0                	jmp    c0008c29 <linear_vari_process+0x3f>
c0008c39:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008c40:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008c43:	0f af d0             	imul   edx,eax
c0008c46:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008c49:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008c4d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008c54:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008c57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008c5e:	dd 07                	fld    QWORD PTR [edi]
c0008c60:	dd 14 24             	fst    QWORD PTR [esp]
c0008c63:	50                   	push   eax
c0008c64:	50                   	push   eax
c0008c65:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008c68:	e8 e2 fe ff ff       	call   c0008b4f <is_bad_src_ratio>
c0008c6d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008c71:	5a                   	pop    edx
c0008c72:	59                   	pop    ecx
c0008c73:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008c78:	0f 85 e3 01 00 00    	jne    c0008e61 <linear_vari_process+0x277>
c0008c7e:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008c81:	d9 e8                	fld1   
c0008c83:	d8 d1                	fcom   st(1)
c0008c85:	df e0                	fnstsw ax
c0008c87:	9e                   	sahf   
c0008c88:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008c8c:	0f 86 99 00 00 00    	jbe    c0008d2b <linear_vari_process+0x141>
c0008c92:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008c95:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008c98:	0f 8d 8d 00 00 00    	jge    c0008d2b <linear_vari_process+0x141>
c0008c9e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008ca2:	d8 c1                	fadd   st,st(1)
c0008ca4:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008ca7:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008caa:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008cad:	df e0                	fnstsw ax
c0008caf:	9e                   	sahf   
c0008cb0:	73 79                	jae    c0008d2b <linear_vari_process+0x141>
c0008cb2:	85 d2                	test   edx,edx
c0008cb4:	7e 38                	jle    c0008cee <linear_vari_process+0x104>
c0008cb6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008cba:	83 ec 10             	sub    esp,0x10
c0008cbd:	dd 07                	fld    QWORD PTR [edi]
c0008cbf:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cc5:	e8 76 59 01 00       	call   c001e640 <fabs>
c0008cca:	83 c4 10             	add    esp,0x10
c0008ccd:	dc 1d 58 fe 01 c0    	fcomp  QWORD PTR ds:0xc001fe58
c0008cd3:	df e0                	fnstsw ax
c0008cd5:	9e                   	sahf   
c0008cd6:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008cda:	76 12                	jbe    c0008cee <linear_vari_process+0x104>
c0008cdc:	dd 07                	fld    QWORD PTR [edi]
c0008cde:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008ce1:	d8 e1                	fsub   st,st(1)
c0008ce3:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008ce6:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008ce9:	de c1                	faddp  st(1),st
c0008ceb:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cee:	31 c0                	xor    eax,eax
c0008cf0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008cf3:	7e 1f                	jle    c0008d14 <linear_vari_process+0x12a>
c0008cf5:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008cf9:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008cfb:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008cfe:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008d02:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008d05:	d8 e1                	fsub   st,st(1)
c0008d07:	40                   	inc    eax
c0008d08:	d8 ca                	fmul   st,st(2)
c0008d0a:	de c1                	faddp  st(1),st
c0008d0c:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008d0f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008d12:	eb dc                	jmp    c0008cf0 <linear_vari_process+0x106>
c0008d14:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d18:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d1b:	de c1                	faddp  st(1),st
c0008d1d:	e9 5f ff ff ff       	jmp    c0008c81 <linear_vari_process+0x97>
c0008d22:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d26:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d29:	de c1                	faddp  st(1),st
c0008d2b:	83 ec 10             	sub    esp,0x10
c0008d2e:	dd 14 24             	fst    QWORD PTR [esp]
c0008d31:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d35:	e8 59 fe ff ff       	call   c0008b93 <fmod_one>
c0008d3a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008d3d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008d41:	d8 e1                	fsub   st,st(1)
c0008d43:	d9 c9                	fxch   st(1)
c0008d45:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d49:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d4c:	e8 0f 59 01 00       	call   c001e660 <lrint>
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	0f af e8             	imul   ebp,eax
c0008d57:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d5b:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008d5e:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008d61:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008d64:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008d67:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008d6a:	0f 8d 97 00 00 00    	jge    c0008e07 <linear_vari_process+0x21d>
c0008d70:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008d74:	d9 c0                	fld    st(0)
c0008d76:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d79:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008d7d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008d81:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008d85:	de d9                	fcompp 
c0008d87:	df e0                	fnstsw ax
c0008d89:	9e                   	sahf   
c0008d8a:	76 7b                	jbe    c0008e07 <linear_vari_process+0x21d>
c0008d8c:	85 ed                	test   ebp,ebp
c0008d8e:	7e 38                	jle    c0008dc8 <linear_vari_process+0x1de>
c0008d90:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d94:	83 ec 10             	sub    esp,0x10
c0008d97:	dd 07                	fld    QWORD PTR [edi]
c0008d99:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d9c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d9f:	e8 9c 58 01 00       	call   c001e640 <fabs>
c0008da4:	83 c4 10             	add    esp,0x10
c0008da7:	dc 1d 58 fe 01 c0    	fcomp  QWORD PTR ds:0xc001fe58
c0008dad:	df e0                	fnstsw ax
c0008daf:	9e                   	sahf   
c0008db0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008db4:	76 12                	jbe    c0008dc8 <linear_vari_process+0x1de>
c0008db6:	dd 07                	fld    QWORD PTR [edi]
c0008db8:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008dbb:	d8 e1                	fsub   st,st(1)
c0008dbd:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008dc0:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008dc3:	de c1                	faddp  st(1),st
c0008dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008dc8:	31 c0                	xor    eax,eax
c0008dca:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008dcd:	39 c2                	cmp    edx,eax
c0008dcf:	0f 8e 4d ff ff ff    	jle    c0008d22 <linear_vari_process+0x138>
c0008dd5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dd7:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008dda:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008dde:	89 e9                	mov    ecx,ebp
c0008de0:	01 c5                	add    ebp,eax
c0008de2:	29 d1                	sub    ecx,edx
c0008de4:	89 ca                	mov    edx,ecx
c0008de6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008dea:	01 c2                	add    edx,eax
c0008dec:	40                   	inc    eax
c0008ded:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008df0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008df3:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008df6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008df9:	d8 e1                	fsub   st,st(1)
c0008dfb:	d8 ca                	fmul   st,st(2)
c0008dfd:	de c1                	faddp  st(1),st
c0008dff:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008e02:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008e05:	eb c3                	jmp    c0008dca <linear_vari_process+0x1e0>
c0008e07:	39 d1                	cmp    ecx,edx
c0008e09:	7d 13                	jge    c0008e1e <linear_vari_process+0x234>
c0008e0b:	89 d0                	mov    eax,edx
c0008e0d:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008e10:	29 c8                	sub    eax,ecx
c0008e12:	99                   	cdq    
c0008e13:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e1a:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008e1e:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008e21:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e24:	85 c0                	test   eax,eax
c0008e26:	7f 1b                	jg     c0008e43 <linear_vari_process+0x259>
c0008e28:	dd 04 24             	fld    QWORD PTR [esp]
c0008e2b:	dd 1f                	fstp   QWORD PTR [edi]
c0008e2d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e30:	99                   	cdq    
c0008e31:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e34:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008e37:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008e3a:	99                   	cdq    
c0008e3b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e3e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008e41:	eb 26                	jmp    c0008e69 <linear_vari_process+0x27f>
c0008e43:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008e46:	31 d2                	xor    edx,edx
c0008e48:	29 c8                	sub    eax,ecx
c0008e4a:	c1 e0 02             	shl    eax,0x2
c0008e4d:	39 d1                	cmp    ecx,edx
c0008e4f:	7e d7                	jle    c0008e28 <linear_vari_process+0x23e>
c0008e51:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008e53:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008e57:	83 c0 04             	add    eax,0x4
c0008e5a:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008e5e:	42                   	inc    edx
c0008e5f:	eb ec                	jmp    c0008e4d <linear_vari_process+0x263>
c0008e61:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008e69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008e6d:	83 c4 2c             	add    esp,0x2c
c0008e70:	5b                   	pop    ebx
c0008e71:	5e                   	pop    esi
c0008e72:	5f                   	pop    edi
c0008e73:	5d                   	pop    ebp
c0008e74:	c3                   	ret    

c0008e75 <linear_reset>:
c0008e75:	83 ec 0c             	sub    esp,0xc
c0008e78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008e7c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008e7f:	85 c0                	test   eax,eax
c0008e81:	74 20                	je     c0008ea3 <linear_reset+0x2e>
c0008e83:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008e86:	83 c0 1c             	add    eax,0x1c
c0008e89:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0008e8c:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0008e93:	c1 e2 02             	shl    edx,0x2
c0008e96:	51                   	push   ecx
c0008e97:	52                   	push   edx
c0008e98:	6a 00                	push   0x0
c0008e9a:	50                   	push   eax
c0008e9b:	e8 68 77 ff ff       	call   c0000608 <memset>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	83 c4 0c             	add    esp,0xc
c0008ea6:	c3                   	ret    

c0008ea7 <linear_get_name>:
c0008ea7:	31 c0                	xor    eax,eax
c0008ea9:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008eae:	75 05                	jne    c0008eb5 <linear_get_name+0xe>
c0008eb0:	b8 14 fe 01 c0       	mov    eax,0xc001fe14
c0008eb5:	c3                   	ret    

c0008eb6 <linear_get_description>:
c0008eb6:	31 c0                	xor    eax,eax
c0008eb8:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008ebd:	75 05                	jne    c0008ec4 <linear_get_description+0xe>
c0008ebf:	b8 28 fe 01 c0       	mov    eax,0xc001fe28
c0008ec4:	c3                   	ret    

c0008ec5 <linear_set_converter>:
c0008ec5:	53                   	push   ebx
c0008ec6:	b8 0a 00 00 00       	mov    eax,0xa
c0008ecb:	83 ec 08             	sub    esp,0x8
c0008ece:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ed2:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008ed7:	75 6e                	jne    c0008f47 <linear_set_converter+0x82>
c0008ed9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008edc:	85 c0                	test   eax,eax
c0008ede:	74 13                	je     c0008ef3 <linear_set_converter+0x2e>
c0008ee0:	83 ec 0c             	sub    esp,0xc
c0008ee3:	50                   	push   eax
c0008ee4:	e8 f2 42 00 00       	call   c000d1db <free>
c0008ee9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008ef0:	83 c4 10             	add    esp,0x10
c0008ef3:	50                   	push   eax
c0008ef4:	50                   	push   eax
c0008ef5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008ef8:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008eff:	50                   	push   eax
c0008f00:	6a 01                	push   0x1
c0008f02:	e8 f4 42 00 00       	call   c000d1fb <calloc>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	89 c2                	mov    edx,eax
c0008f0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008f0f:	85 d2                	test   edx,edx
c0008f11:	b8 01 00 00 00       	mov    eax,0x1
c0008f16:	74 2f                	je     c0008f47 <linear_set_converter+0x82>
c0008f18:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008f1e:	83 ec 0c             	sub    esp,0xc
c0008f21:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f24:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f27:	c7 43 24 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008bea
c0008f2e:	c7 43 20 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008bea
c0008f35:	c7 43 28 75 8e 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008e75
c0008f3c:	53                   	push   ebx
c0008f3d:	e8 33 ff ff ff       	call   c0008e75 <linear_reset>
c0008f42:	83 c4 10             	add    esp,0x10
c0008f45:	31 c0                	xor    eax,eax
c0008f47:	83 c4 08             	add    esp,0x8
c0008f4a:	5b                   	pop    ebx
c0008f4b:	c3                   	ret    

c0008f4c <is_bad_src_ratio>:
c0008f4c:	83 ec 0c             	sub    esp,0xc
c0008f4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f53:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008f5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008f5e:	dd 04 24             	fld    QWORD PTR [esp]
c0008f61:	dd 05 e0 fd 01 c0    	fld    QWORD PTR ds:0xc001fde0
c0008f67:	de d9                	fcompp 
c0008f69:	df e0                	fnstsw ax
c0008f6b:	f6 c4 45             	test   ah,0x45
c0008f6e:	74 10                	je     c0008f80 <is_bad_src_ratio+0x34>
c0008f70:	dd 04 24             	fld    QWORD PTR [esp]
c0008f73:	dc 1d e8 fd 01 c0    	fcomp  QWORD PTR ds:0xc001fde8
c0008f79:	df e0                	fnstsw ax
c0008f7b:	f6 c4 45             	test   ah,0x45
c0008f7e:	75 07                	jne    c0008f87 <is_bad_src_ratio+0x3b>
c0008f80:	b8 01 00 00 00       	mov    eax,0x1
c0008f85:	eb 05                	jmp    c0008f8c <is_bad_src_ratio+0x40>
c0008f87:	b8 00 00 00 00       	mov    eax,0x0
c0008f8c:	83 c4 0c             	add    esp,0xc
c0008f8f:	c3                   	ret    

c0008f90 <int_to_fp>:
c0008f90:	c1 e0 0c             	shl    eax,0xc
c0008f93:	c3                   	ret    

c0008f94 <fp_to_int>:
c0008f94:	c1 f8 0c             	sar    eax,0xc
c0008f97:	c3                   	ret    

c0008f98 <fp_fraction_part>:
c0008f98:	25 ff 0f 00 00       	and    eax,0xfff
c0008f9d:	c3                   	ret    

c0008f9e <fp_to_double>:
c0008f9e:	83 ec 0c             	sub    esp,0xc
c0008fa1:	e8 f2 ff ff ff       	call   c0008f98 <fp_fraction_part>
c0008fa6:	d9 05 20 85 03 c0    	fld    DWORD PTR ds:0xc0038520
c0008fac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008fb0:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0008fb4:	83 c4 0c             	add    esp,0xc
c0008fb7:	c3                   	ret    

c0008fb8 <calc_output_single>:
c0008fb8:	55                   	push   ebp
c0008fb9:	57                   	push   edi
c0008fba:	89 c7                	mov    edi,eax
c0008fbc:	56                   	push   esi
c0008fbd:	53                   	push   ebx
c0008fbe:	89 d3                	mov    ebx,edx
c0008fc0:	83 ec 24             	sub    esp,0x24
c0008fc3:	89 de                	mov    esi,ebx
c0008fc5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008fc8:	e8 c3 ff ff ff       	call   c0008f90 <int_to_fp>
c0008fcd:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0008fd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008fd4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008fdb:	29 c8                	sub    eax,ecx
c0008fdd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008fe5:	99                   	cdq    
c0008fe6:	f7 fb                	idiv   ebx
c0008fe8:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0008feb:	0f af f0             	imul   esi,eax
c0008fee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0008ff2:	01 ce                	add    esi,ecx
c0008ff4:	29 c2                	sub    edx,eax
c0008ff6:	8d 14 97             	lea    edx,[edi+edx*4]
c0008ff9:	89 f0                	mov    eax,esi
c0008ffb:	e8 9e ff ff ff       	call   c0008f9e <fp_to_double>
c0009000:	89 f0                	mov    eax,esi
c0009002:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009006:	e8 89 ff ff ff       	call   c0008f94 <fp_to_int>
c000900b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000900f:	83 c2 04             	add    edx,0x4
c0009012:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009016:	d8 e1                	fsub   st,st(1)
c0009018:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000901c:	de c9                	fmulp  st(1),st
c000901e:	de c1                	faddp  st(1),st
c0009020:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009026:	29 de                	sub    esi,ebx
c0009028:	dc 04 24             	fadd   QWORD PTR [esp]
c000902b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000902e:	79 c9                	jns    c0008ff9 <calc_output_single+0x41>
c0009030:	89 d8                	mov    eax,ebx
c0009032:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0009036:	29 c8                	sub    eax,ecx
c0009038:	d9 ee                	fldz   
c000903a:	89 c1                	mov    ecx,eax
c000903c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009040:	29 c8                	sub    eax,ecx
c0009042:	99                   	cdq    
c0009043:	f7 fb                	idiv   ebx
c0009045:	89 da                	mov    edx,ebx
c0009047:	0f af d0             	imul   edx,eax
c000904a:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c000904e:	01 d1                	add    ecx,edx
c0009050:	8d 14 87             	lea    edx,[edi+eax*4]
c0009053:	89 c8                	mov    eax,ecx
c0009055:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009059:	e8 40 ff ff ff       	call   c0008f9e <fp_to_double>
c000905e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009062:	89 c8                	mov    eax,ecx
c0009064:	e8 2b ff ff ff       	call   c0008f94 <fp_to_int>
c0009069:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000906d:	29 d9                	sub    ecx,ebx
c000906f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009073:	83 ea 04             	sub    edx,0x4
c0009076:	d8 e1                	fsub   st,st(1)
c0009078:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000907c:	de c9                	fmulp  st(1),st
c000907e:	de c1                	faddp  st(1),st
c0009080:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009086:	85 c9                	test   ecx,ecx
c0009088:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000908c:	de c1                	faddp  st(1),st
c000908e:	7f c3                	jg     c0009053 <calc_output_single+0x9b>
c0009090:	dd 04 24             	fld    QWORD PTR [esp]
c0009093:	83 c4 24             	add    esp,0x24
c0009096:	de c1                	faddp  st(1),st
c0009098:	5b                   	pop    ebx
c0009099:	5e                   	pop    esi
c000909a:	5f                   	pop    edi
c000909b:	5d                   	pop    ebp
c000909c:	c3                   	ret    

c000909d <calc_output_stereo>:
c000909d:	55                   	push   ebp
c000909e:	57                   	push   edi
c000909f:	89 c7                	mov    edi,eax
c00090a1:	56                   	push   esi
c00090a2:	53                   	push   ebx
c00090a3:	89 d3                	mov    ebx,edx
c00090a5:	83 ec 44             	sub    esp,0x44
c00090a8:	89 de                	mov    esi,ebx
c00090aa:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00090ae:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00090b1:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00090b5:	e8 d6 fe ff ff       	call   c0008f90 <int_to_fp>
c00090ba:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00090bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090c1:	d9 ee                	fldz   
c00090c3:	29 c8                	sub    eax,ecx
c00090c5:	dd 14 24             	fst    QWORD PTR [esp]
c00090c8:	99                   	cdq    
c00090c9:	f7 fb                	idiv   ebx
c00090cb:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00090ce:	0f af f0             	imul   esi,eax
c00090d1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00090d5:	01 ce                	add    esi,ecx
c00090d7:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00090da:	0f af c2             	imul   eax,edx
c00090dd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00090e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00090e5:	29 c2                	sub    edx,eax
c00090e7:	8d 14 97             	lea    edx,[edi+edx*4]
c00090ea:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00090ee:	89 f0                	mov    eax,esi
c00090f0:	e8 a9 fe ff ff       	call   c0008f9e <fp_to_double>
c00090f5:	89 f0                	mov    eax,esi
c00090f7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00090fb:	e8 94 fe ff ff       	call   c0008f94 <fp_to_int>
c0009100:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009104:	83 c2 08             	add    edx,0x8
c0009107:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000910b:	d8 e1                	fsub   st,st(1)
c000910d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009111:	de c9                	fmulp  st(1),st
c0009113:	de c1                	faddp  st(1),st
c0009115:	d9 c0                	fld    st(0)
c0009117:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000911d:	dc 04 24             	fadd   QWORD PTR [esp]
c0009120:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009123:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009129:	29 de                	sub    esi,ebx
c000912b:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000912f:	de c1                	faddp  st(1),st
c0009131:	79 b7                	jns    c00090ea <calc_output_stereo+0x4d>
c0009133:	89 d8                	mov    eax,ebx
c0009135:	d9 ee                	fldz   
c0009137:	d9 ee                	fldz   
c0009139:	29 c8                	sub    eax,ecx
c000913b:	89 c1                	mov    ecx,eax
c000913d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009141:	29 c8                	sub    eax,ecx
c0009143:	99                   	cdq    
c0009144:	f7 fb                	idiv   ebx
c0009146:	89 da                	mov    edx,ebx
c0009148:	0f af d0             	imul   edx,eax
c000914b:	40                   	inc    eax
c000914c:	01 d1                	add    ecx,edx
c000914e:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
c0009153:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0009157:	8d 14 87             	lea    edx,[edi+eax*4]
c000915a:	eb 04                	jmp    c0009160 <calc_output_stereo+0xc3>
c000915c:	d9 ca                	fxch   st(2)
c000915e:	d9 c9                	fxch   st(1)
c0009160:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009164:	d9 c9                	fxch   st(1)
c0009166:	89 c8                	mov    eax,ecx
c0009168:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000916c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009170:	e8 29 fe ff ff       	call   c0008f9e <fp_to_double>
c0009175:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009179:	89 c8                	mov    eax,ecx
c000917b:	e8 14 fe ff ff       	call   c0008f94 <fp_to_int>
c0009180:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009184:	29 d9                	sub    ecx,ebx
c0009186:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000918a:	83 ea 08             	sub    edx,0x8
c000918d:	d8 e1                	fsub   st,st(1)
c000918f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009193:	de c9                	fmulp  st(1),st
c0009195:	de c1                	faddp  st(1),st
c0009197:	d9 c0                	fld    st(0)
c0009199:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c000919f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00091a3:	de c1                	faddp  st(1),st
c00091a5:	d9 c9                	fxch   st(1)
c00091a7:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c00091ad:	85 c9                	test   ecx,ecx
c00091af:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00091b3:	de c1                	faddp  st(1),st
c00091b5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00091b9:	7f a1                	jg     c000915c <calc_output_stereo+0xbf>
c00091bb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00091bf:	dd 04 24             	fld    QWORD PTR [esp]
c00091c2:	de c3                	faddp  st(3),st
c00091c4:	d9 ca                	fxch   st(2)
c00091c6:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091ca:	d9 18                	fstp   DWORD PTR [eax]
c00091cc:	de c1                	faddp  st(1),st
c00091ce:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091d2:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c00091d5:	83 c4 44             	add    esp,0x44
c00091d8:	5b                   	pop    ebx
c00091d9:	5e                   	pop    esi
c00091da:	5f                   	pop    edi
c00091db:	5d                   	pop    ebp
c00091dc:	c3                   	ret    

c00091dd <calc_output_quad>:
c00091dd:	55                   	push   ebp
c00091de:	57                   	push   edi
c00091df:	56                   	push   esi
c00091e0:	89 c6                	mov    esi,eax
c00091e2:	53                   	push   ebx
c00091e3:	89 d3                	mov    ebx,edx
c00091e5:	83 ec 5c             	sub    esp,0x5c
c00091e8:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c00091ec:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00091ef:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091f2:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00091f6:	e8 95 fd ff ff       	call   c0008f90 <int_to_fp>
c00091fb:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c00091fe:	d9 ee                	fldz   
c0009200:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009204:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009208:	29 c8                	sub    eax,ecx
c000920a:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c000920e:	99                   	cdq    
c000920f:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009213:	f7 fb                	idiv   ebx
c0009215:	89 da                	mov    edx,ebx
c0009217:	0f af d0             	imul   edx,eax
c000921a:	01 ca                	add    edx,ecx
c000921c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009220:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c0009223:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009227:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000922a:	0f af c2             	imul   eax,edx
c000922d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009231:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009235:	29 c2                	sub    edx,eax
c0009237:	8d 14 96             	lea    edx,[esi+edx*4]
c000923a:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000923e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009242:	e8 57 fd ff ff       	call   c0008f9e <fp_to_double>
c0009247:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000924b:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000924f:	e8 40 fd ff ff       	call   c0008f94 <fp_to_int>
c0009254:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009258:	83 c2 10             	add    edx,0x10
c000925b:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000925f:	d8 e1                	fsub   st,st(1)
c0009261:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009265:	de c9                	fmulp  st(1),st
c0009267:	de c1                	faddp  st(1),st
c0009269:	d9 c0                	fld    st(0)
c000926b:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009271:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009275:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009279:	d9 c0                	fld    st(0)
c000927b:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009281:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009285:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009289:	d9 c0                	fld    st(0)
c000928b:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009291:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009295:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009299:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000929f:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c00092a3:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00092a7:	de c1                	faddp  st(1),st
c00092a9:	79 8f                	jns    c000923a <calc_output_quad+0x5d>
c00092ab:	89 d8                	mov    eax,ebx
c00092ad:	d9 ee                	fldz   
c00092af:	29 c8                	sub    eax,ecx
c00092b1:	d9 ee                	fldz   
c00092b3:	89 c1                	mov    ecx,eax
c00092b5:	d9 ee                	fldz   
c00092b7:	d9 ee                	fldz   
c00092b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00092bd:	29 c8                	sub    eax,ecx
c00092bf:	99                   	cdq    
c00092c0:	f7 fb                	idiv   ebx
c00092c2:	89 da                	mov    edx,ebx
c00092c4:	0f af d0             	imul   edx,eax
c00092c7:	40                   	inc    eax
c00092c8:	01 d1                	add    ecx,edx
c00092ca:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00092cf:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00092d3:	8d 14 86             	lea    edx,[esi+eax*4]
c00092d6:	eb 0a                	jmp    c00092e2 <calc_output_quad+0x105>
c00092d8:	d9 cc                	fxch   st(4)
c00092da:	d9 ca                	fxch   st(2)
c00092dc:	d9 c9                	fxch   st(1)
c00092de:	d9 cb                	fxch   st(3)
c00092e0:	d9 c9                	fxch   st(1)
c00092e2:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092e6:	d9 c9                	fxch   st(1)
c00092e8:	89 c8                	mov    eax,ecx
c00092ea:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092ee:	d9 c9                	fxch   st(1)
c00092f0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00092f4:	d9 c9                	fxch   st(1)
c00092f6:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00092fa:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00092fe:	e8 9b fc ff ff       	call   c0008f9e <fp_to_double>
c0009303:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009307:	89 c8                	mov    eax,ecx
c0009309:	e8 86 fc ff ff       	call   c0008f94 <fp_to_int>
c000930e:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009312:	29 d9                	sub    ecx,ebx
c0009314:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009318:	83 ea 10             	sub    edx,0x10
c000931b:	d8 e1                	fsub   st,st(1)
c000931d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009321:	de c9                	fmulp  st(1),st
c0009323:	de c1                	faddp  st(1),st
c0009325:	d9 c0                	fld    st(0)
c0009327:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c000932d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009331:	de c1                	faddp  st(1),st
c0009333:	d9 c1                	fld    st(1)
c0009335:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c000933b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000933f:	de c1                	faddp  st(1),st
c0009341:	d9 c2                	fld    st(2)
c0009343:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009349:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000934d:	de c1                	faddp  st(1),st
c000934f:	d9 cb                	fxch   st(3)
c0009351:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009357:	85 c9                	test   ecx,ecx
c0009359:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000935d:	de c1                	faddp  st(1),st
c000935f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009363:	0f 8f 6f ff ff ff    	jg     c00092d8 <calc_output_quad+0xfb>
c0009369:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000936d:	de c4                	faddp  st(4),st
c000936f:	d9 cb                	fxch   st(3)
c0009371:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009374:	d9 1f                	fstp   DWORD PTR [edi]
c0009376:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000937a:	de c2                	faddp  st(2),st
c000937c:	d9 c9                	fxch   st(1)
c000937e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009381:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009384:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009388:	de c3                	faddp  st(3),st
c000938a:	d9 ca                	fxch   st(2)
c000938c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000938f:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009392:	de c1                	faddp  st(1),st
c0009394:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009397:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c000939a:	83 c4 5c             	add    esp,0x5c
c000939d:	5b                   	pop    ebx
c000939e:	5e                   	pop    esi
c000939f:	5f                   	pop    edi
c00093a0:	5d                   	pop    ebp
c00093a1:	c3                   	ret    

c00093a2 <calc_output_hex>:
c00093a2:	55                   	push   ebp
c00093a3:	57                   	push   edi
c00093a4:	89 c7                	mov    edi,eax
c00093a6:	56                   	push   esi
c00093a7:	53                   	push   ebx
c00093a8:	89 d3                	mov    ebx,edx
c00093aa:	83 ec 7c             	sub    esp,0x7c
c00093ad:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c00093b4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00093b7:	dd 1c 24             	fstp   QWORD PTR [esp]
c00093ba:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c00093c1:	e8 ca fb ff ff       	call   c0008f90 <int_to_fp>
c00093c6:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00093c9:	d9 ee                	fldz   
c00093cb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00093cf:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00093d3:	29 c8                	sub    eax,ecx
c00093d5:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00093d9:	99                   	cdq    
c00093da:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00093de:	f7 fb                	idiv   ebx
c00093e0:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00093e4:	89 da                	mov    edx,ebx
c00093e6:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00093ea:	0f af d0             	imul   edx,eax
c00093ed:	01 ca                	add    edx,ecx
c00093ef:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00093f3:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00093f6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00093fa:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00093fd:	0f af c2             	imul   eax,edx
c0009400:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009404:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009408:	29 c2                	sub    edx,eax
c000940a:	8d 14 97             	lea    edx,[edi+edx*4]
c000940d:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c0009411:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009415:	e8 84 fb ff ff       	call   c0008f9e <fp_to_double>
c000941a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000941e:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0009422:	e8 6d fb ff ff       	call   c0008f94 <fp_to_int>
c0009427:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000942b:	83 c2 18             	add    edx,0x18
c000942e:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009432:	d8 e1                	fsub   st,st(1)
c0009434:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009438:	de c9                	fmulp  st(1),st
c000943a:	de c1                	faddp  st(1),st
c000943c:	d9 c0                	fld    st(0)
c000943e:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c0009444:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009448:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000944c:	d9 c0                	fld    st(0)
c000944e:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009454:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009458:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000945c:	d9 c0                	fld    st(0)
c000945e:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009464:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009468:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000946c:	d9 c0                	fld    st(0)
c000946e:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009474:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009478:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000947c:	d9 c0                	fld    st(0)
c000947e:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009484:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009488:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000948c:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009492:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009496:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000949a:	de c1                	faddp  st(1),st
c000949c:	0f 89 6b ff ff ff    	jns    c000940d <calc_output_hex+0x6b>
c00094a2:	d9 ee                	fldz   
c00094a4:	d9 ee                	fldz   
c00094a6:	89 d8                	mov    eax,ebx
c00094a8:	29 c8                	sub    eax,ecx
c00094aa:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c00094ae:	89 c1                	mov    ecx,eax
c00094b0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00094b4:	29 c8                	sub    eax,ecx
c00094b6:	99                   	cdq    
c00094b7:	f7 fb                	idiv   ebx
c00094b9:	89 da                	mov    edx,ebx
c00094bb:	0f af d0             	imul   edx,eax
c00094be:	40                   	inc    eax
c00094bf:	01 d1                	add    ecx,edx
c00094c1:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c00094c6:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00094ca:	dd 54 24 38          	fst    QWORD PTR [esp+0x38]
c00094ce:	8d 14 87             	lea    edx,[edi+eax*4]
c00094d1:	d9 ee                	fldz   
c00094d3:	d9 ee                	fldz   
c00094d5:	d9 ca                	fxch   st(2)
c00094d7:	eb 08                	jmp    c00094e1 <calc_output_hex+0x13f>
c00094d9:	d9 cc                	fxch   st(4)
c00094db:	d9 cb                	fxch   st(3)
c00094dd:	d9 ca                	fxch   st(2)
c00094df:	d9 c9                	fxch   st(1)
c00094e1:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c00094e5:	89 c8                	mov    eax,ecx
c00094e7:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c00094eb:	d9 ca                	fxch   st(2)
c00094ed:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094f1:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00094f5:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00094f9:	e8 a0 fa ff ff       	call   c0008f9e <fp_to_double>
c00094fe:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c0009502:	89 c8                	mov    eax,ecx
c0009504:	e8 8b fa ff ff       	call   c0008f94 <fp_to_int>
c0009509:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000950d:	29 d9                	sub    ecx,ebx
c000950f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009513:	83 ea 18             	sub    edx,0x18
c0009516:	d8 e1                	fsub   st,st(1)
c0009518:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000951c:	de c9                	fmulp  st(1),st
c000951e:	de c1                	faddp  st(1),st
c0009520:	d9 c0                	fld    st(0)
c0009522:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009528:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000952c:	de c1                	faddp  st(1),st
c000952e:	d9 c1                	fld    st(1)
c0009530:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009536:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c000953a:	de c1                	faddp  st(1),st
c000953c:	d9 c2                	fld    st(2)
c000953e:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c0009544:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009548:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000954c:	d9 c2                	fld    st(2)
c000954e:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009554:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009558:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000955c:	d9 c2                	fld    st(2)
c000955e:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009564:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009568:	de c1                	faddp  st(1),st
c000956a:	d9 cb                	fxch   st(3)
c000956c:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009572:	85 c9                	test   ecx,ecx
c0009574:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009578:	de c1                	faddp  st(1),st
c000957a:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000957e:	0f 8f 55 ff ff ff    	jg     c00094d9 <calc_output_hex+0x137>
c0009584:	d9 cb                	fxch   st(3)
c0009586:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000958a:	dc 0c 24             	fmul   QWORD PTR [esp]
c000958d:	d9 1e                	fstp   DWORD PTR [esi]
c000958f:	d9 c9                	fxch   st(1)
c0009591:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009595:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009598:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c000959b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000959f:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c00095a3:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095a6:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c00095a9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00095ad:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00095b1:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095b4:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c00095b7:	d9 ca                	fxch   st(2)
c00095b9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00095bd:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c0:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c00095c3:	de c1                	faddp  st(1),st
c00095c5:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c8:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c00095cb:	83 c4 7c             	add    esp,0x7c
c00095ce:	5b                   	pop    ebx
c00095cf:	5e                   	pop    esi
c00095d0:	5f                   	pop    edi
c00095d1:	5d                   	pop    ebp
c00095d2:	c3                   	ret    

c00095d3 <calc_output_multi>:
c00095d3:	55                   	push   ebp
c00095d4:	57                   	push   edi
c00095d5:	8d 78 44             	lea    edi,[eax+0x44]
c00095d8:	56                   	push   esi
c00095d9:	89 c6                	mov    esi,eax
c00095db:	53                   	push   ebx
c00095dc:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c00095e2:	83 ec 4c             	sub    esp,0x4c
c00095e5:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00095e9:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c00095ed:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00095f1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00095f5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00095f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095fd:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009600:	e8 8b f9 ff ff       	call   c0008f90 <int_to_fp>
c0009605:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c0009608:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000960c:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009610:	99                   	cdq    
c0009611:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009615:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009619:	0f af d0             	imul   edx,eax
c000961c:	0f af c3             	imul   eax,ebx
c000961f:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009623:	29 c5                	sub    ebp,eax
c0009625:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009629:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000962d:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009634:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009638:	52                   	push   edx
c0009639:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963d:	6a 00                	push   0x0
c000963f:	57                   	push   edi
c0009640:	e8 c3 6f ff ff       	call   c0000608 <memset>
c0009645:	83 c4 10             	add    esp,0x10
c0009648:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000964c:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009650:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009654:	e8 45 f9 ff ff       	call   c0008f9e <fp_to_double>
c0009659:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000965d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009661:	e8 2e f9 ff ff       	call   c0008f94 <fp_to_int>
c0009666:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0009669:	89 d9                	mov    ecx,ebx
c000966b:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c000966e:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009672:	d8 e1                	fsub   st,st(1)
c0009674:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009678:	de c9                	fmulp  st(1),st
c000967a:	de c1                	faddp  st(1),st
c000967c:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009680:	89 c8                	mov    eax,ecx
c0009682:	bd 08 00 00 00       	mov    ebp,0x8
c0009687:	99                   	cdq    
c0009688:	f7 fd                	idiv   ebp
c000968a:	4a                   	dec    edx
c000968b:	83 fa 06             	cmp    edx,0x6
c000968e:	77 07                	ja     c0009697 <calc_output_multi+0xc4>
c0009690:	ff 24 95 60 fe 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe01a0]
c0009697:	49                   	dec    ecx
c0009698:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000969c:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000969f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00096a6:	d9 c1                	fld    st(1)
c00096a8:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00096ac:	dc 00                	fadd   QWORD PTR [eax]
c00096ae:	dd 18                	fstp   QWORD PTR [eax]
c00096b0:	49                   	dec    ecx
c00096b1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00096b5:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00096b8:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00096bf:	d9 c1                	fld    st(1)
c00096c1:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00096c5:	dc 00                	fadd   QWORD PTR [eax]
c00096c7:	dd 18                	fstp   QWORD PTR [eax]
c00096c9:	49                   	dec    ecx
c00096ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00096ce:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00096d1:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00096d8:	d9 c1                	fld    st(1)
c00096da:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00096de:	dc 00                	fadd   QWORD PTR [eax]
c00096e0:	dd 18                	fstp   QWORD PTR [eax]
c00096e2:	49                   	dec    ecx
c00096e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00096e7:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00096ea:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00096f1:	d9 c1                	fld    st(1)
c00096f3:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00096f7:	dc 00                	fadd   QWORD PTR [eax]
c00096f9:	dd 18                	fstp   QWORD PTR [eax]
c00096fb:	49                   	dec    ecx
c00096fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009700:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009703:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000970a:	d9 c1                	fld    st(1)
c000970c:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009710:	dc 00                	fadd   QWORD PTR [eax]
c0009712:	dd 18                	fstp   QWORD PTR [eax]
c0009714:	49                   	dec    ecx
c0009715:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009719:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000971c:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009723:	d9 c1                	fld    st(1)
c0009725:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009729:	dc 00                	fadd   QWORD PTR [eax]
c000972b:	dd 18                	fstp   QWORD PTR [eax]
c000972d:	49                   	dec    ecx
c000972e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009732:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009735:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000973c:	d9 c1                	fld    st(1)
c000973e:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009742:	dc 00                	fadd   QWORD PTR [eax]
c0009744:	dd 18                	fstp   QWORD PTR [eax]
c0009746:	49                   	dec    ecx
c0009747:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000974b:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000974e:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009755:	d9 c1                	fld    st(1)
c0009757:	85 c9                	test   ecx,ecx
c0009759:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000975d:	dc 00                	fadd   QWORD PTR [eax]
c000975f:	dd 18                	fstp   QWORD PTR [eax]
c0009761:	0f 8f 19 ff ff ff    	jg     c0009680 <calc_output_multi+0xad>
c0009767:	dd d9                	fstp   st(1)
c0009769:	01 5c 24 0c          	add    DWORD PTR [esp+0xc],ebx
c000976d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009771:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c0009775:	0f 89 d1 fe ff ff    	jns    c000964c <calc_output_multi+0x79>
c000977b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000977f:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009783:	89 d1                	mov    ecx,edx
c0009785:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009789:	29 c8                	sub    eax,ecx
c000978b:	99                   	cdq    
c000978c:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009790:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009794:	0f af d0             	imul   edx,eax
c0009797:	40                   	inc    eax
c0009798:	01 d1                	add    ecx,edx
c000979a:	0f af c3             	imul   eax,ebx
c000979d:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00097a1:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c00097a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00097a8:	50                   	push   eax
c00097a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00097ad:	6a 00                	push   0x0
c00097af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097b3:	e8 50 6e ff ff       	call   c0000608 <memset>
c00097b8:	83 c4 10             	add    esp,0x10
c00097bb:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00097bf:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00097c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00097c7:	e8 d2 f7 ff ff       	call   c0008f9e <fp_to_double>
c00097cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00097d0:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00097d4:	e8 bb f7 ff ff       	call   c0008f94 <fp_to_int>
c00097d9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00097dc:	89 d9                	mov    ecx,ebx
c00097de:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00097e1:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00097e5:	d8 e1                	fsub   st,st(1)
c00097e7:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00097eb:	de c9                	fmulp  st(1),st
c00097ed:	de c1                	faddp  st(1),st
c00097ef:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00097f3:	89 c8                	mov    eax,ecx
c00097f5:	bd 08 00 00 00       	mov    ebp,0x8
c00097fa:	99                   	cdq    
c00097fb:	f7 fd                	idiv   ebp
c00097fd:	4a                   	dec    edx
c00097fe:	83 fa 06             	cmp    edx,0x6
c0009801:	77 07                	ja     c000980a <calc_output_multi+0x237>
c0009803:	ff 24 95 7c fe 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe0184]
c000980a:	49                   	dec    ecx
c000980b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000980f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009813:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009816:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000981d:	d9 c1                	fld    st(1)
c000981f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009823:	dc 00                	fadd   QWORD PTR [eax]
c0009825:	dd 18                	fstp   QWORD PTR [eax]
c0009827:	49                   	dec    ecx
c0009828:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000982c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009830:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009833:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000983a:	d9 c1                	fld    st(1)
c000983c:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009840:	dc 00                	fadd   QWORD PTR [eax]
c0009842:	dd 18                	fstp   QWORD PTR [eax]
c0009844:	49                   	dec    ecx
c0009845:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009849:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000984d:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009850:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009857:	d9 c1                	fld    st(1)
c0009859:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000985d:	dc 00                	fadd   QWORD PTR [eax]
c000985f:	dd 18                	fstp   QWORD PTR [eax]
c0009861:	49                   	dec    ecx
c0009862:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009866:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000986a:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000986d:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009874:	d9 c1                	fld    st(1)
c0009876:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000987a:	dc 00                	fadd   QWORD PTR [eax]
c000987c:	dd 18                	fstp   QWORD PTR [eax]
c000987e:	49                   	dec    ecx
c000987f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009883:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009887:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000988a:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009891:	d9 c1                	fld    st(1)
c0009893:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009897:	dc 00                	fadd   QWORD PTR [eax]
c0009899:	dd 18                	fstp   QWORD PTR [eax]
c000989b:	49                   	dec    ecx
c000989c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098a4:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098a7:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098ae:	d9 c1                	fld    st(1)
c00098b0:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098b4:	dc 00                	fadd   QWORD PTR [eax]
c00098b6:	dd 18                	fstp   QWORD PTR [eax]
c00098b8:	49                   	dec    ecx
c00098b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098c1:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098c4:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098cb:	d9 c1                	fld    st(1)
c00098cd:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098d1:	dc 00                	fadd   QWORD PTR [eax]
c00098d3:	dd 18                	fstp   QWORD PTR [eax]
c00098d5:	49                   	dec    ecx
c00098d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098de:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098e1:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098e8:	d9 c1                	fld    st(1)
c00098ea:	85 c9                	test   ecx,ecx
c00098ec:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098f0:	dc 00                	fadd   QWORD PTR [eax]
c00098f2:	dd 18                	fstp   QWORD PTR [eax]
c00098f4:	0f 8f f9 fe ff ff    	jg     c00097f3 <calc_output_multi+0x220>
c00098fa:	dd d9                	fstp   st(1)
c00098fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009900:	29 5c 24 0c          	sub    DWORD PTR [esp+0xc],ebx
c0009904:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c0009908:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000990d:	0f 8f ac fe ff ff    	jg     c00097bf <calc_output_multi+0x1ec>
c0009913:	b9 08 00 00 00       	mov    ecx,0x8
c0009918:	89 d8                	mov    eax,ebx
c000991a:	99                   	cdq    
c000991b:	f7 f9                	idiv   ecx
c000991d:	4a                   	dec    edx
c000991e:	83 fa 06             	cmp    edx,0x6
c0009921:	77 07                	ja     c000992a <calc_output_multi+0x357>
c0009923:	ff 24 95 98 fe 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe0168]
c000992a:	4b                   	dec    ebx
c000992b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000992f:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009932:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009935:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009939:	d8 c9                	fmul   st,st(1)
c000993b:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c000993e:	4b                   	dec    ebx
c000993f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009943:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009946:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009949:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000994d:	d8 c9                	fmul   st,st(1)
c000994f:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009952:	4b                   	dec    ebx
c0009953:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009957:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c000995a:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c000995d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009961:	d8 c9                	fmul   st,st(1)
c0009963:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009966:	4b                   	dec    ebx
c0009967:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000996b:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c000996e:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009971:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009975:	d8 c9                	fmul   st,st(1)
c0009977:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c000997a:	4b                   	dec    ebx
c000997b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000997f:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009982:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009985:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009989:	d8 c9                	fmul   st,st(1)
c000998b:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c000998e:	4b                   	dec    ebx
c000998f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009993:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009996:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009999:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000999d:	d8 c9                	fmul   st,st(1)
c000999f:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099a2:	4b                   	dec    ebx
c00099a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099a7:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099aa:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099ad:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099b1:	d8 c9                	fmul   st,st(1)
c00099b3:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099b6:	4b                   	dec    ebx
c00099b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099bb:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099be:	85 db                	test   ebx,ebx
c00099c0:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099c3:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099c7:	d8 c9                	fmul   st,st(1)
c00099c9:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099cc:	0f 8f 46 ff ff ff    	jg     c0009918 <calc_output_multi+0x345>
c00099d2:	dd d8                	fstp   st(0)
c00099d4:	83 c4 4c             	add    esp,0x4c
c00099d7:	5b                   	pop    ebx
c00099d8:	5e                   	pop    esi
c00099d9:	5f                   	pop    edi
c00099da:	5d                   	pop    ebp
c00099db:	c3                   	ret    

c00099dc <sinc_reset>:
c00099dc:	56                   	push   esi
c00099dd:	53                   	push   ebx
c00099de:	51                   	push   ecx
c00099df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099e3:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c00099e6:	85 db                	test   ebx,ebx
c00099e8:	74 51                	je     c0009a3b <sinc_reset+0x5f>
c00099ea:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00099f1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00099f8:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c00099ff:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c0009a05:	d9 ee                	fldz   
c0009a07:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c0009a0a:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c0009a0d:	52                   	push   edx
c0009a0e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009a11:	c1 e0 02             	shl    eax,0x2
c0009a14:	50                   	push   eax
c0009a15:	6a 00                	push   0x0
c0009a17:	56                   	push   esi
c0009a18:	e8 eb 6b ff ff       	call   c0000608 <memset>
c0009a1d:	83 c4 0c             	add    esp,0xc
c0009a20:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009a23:	c1 e0 02             	shl    eax,0x2
c0009a26:	50                   	push   eax
c0009a27:	68 aa 00 00 00       	push   0xaa
c0009a2c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009a2f:	8d 04 86             	lea    eax,[esi+eax*4]
c0009a32:	50                   	push   eax
c0009a33:	e8 d0 6b ff ff       	call   c0000608 <memset>
c0009a38:	83 c4 10             	add    esp,0x10
c0009a3b:	58                   	pop    eax
c0009a3c:	5b                   	pop    ebx
c0009a3d:	5e                   	pop    esi
c0009a3e:	c3                   	ret    

c0009a3f <double_to_fp>:
c0009a3f:	d9 05 24 85 03 c0    	fld    DWORD PTR ds:0xc0038524
c0009a45:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009a49:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009a4d:	e9 0e 4c 01 00       	jmp    c001e660 <lrint>

c0009a52 <fmod_one>:
c0009a52:	83 ec 2c             	sub    esp,0x2c
c0009a55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a65:	83 ec 08             	sub    esp,0x8
c0009a68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a70:	e8 eb 4b 01 00       	call   c001e660 <lrint>
c0009a75:	83 c4 10             	add    esp,0x10
c0009a78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a7c:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009a80:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009a84:	de e1                	fsubrp st(1),st
c0009a86:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009a8a:	d9 ee                	fldz   
c0009a8c:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009a90:	df e0                	fnstsw ax
c0009a92:	f6 c4 45             	test   ah,0x45
c0009a95:	75 0a                	jne    c0009aa1 <fmod_one+0x4f>
c0009a97:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009a9b:	d9 e8                	fld1   
c0009a9d:	de c1                	faddp  st(1),st
c0009a9f:	eb 04                	jmp    c0009aa5 <fmod_one+0x53>
c0009aa1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009aa5:	83 c4 2c             	add    esp,0x2c
c0009aa8:	c3                   	ret    

c0009aa9 <prepare_data>:
c0009aa9:	55                   	push   ebp
c0009aaa:	57                   	push   edi
c0009aab:	56                   	push   esi
c0009aac:	53                   	push   ebx
c0009aad:	83 ec 1c             	sub    esp,0x1c
c0009ab0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009ab4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009ab8:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009abc:	0f 89 57 01 00 00    	jns    c0009c19 <prepare_data+0x170>
c0009ac2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009ac5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009ac8:	85 d2                	test   edx,edx
c0009aca:	75 0d                	jne    c0009ad9 <prepare_data+0x30>
c0009acc:	8d 14 36             	lea    edx,[esi+esi*1]
c0009acf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009ad2:	29 d0                	sub    eax,edx
c0009ad4:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009ad7:	eb 44                	jmp    c0009b1d <prepare_data+0x74>
c0009ad9:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009adc:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009adf:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009ae2:	39 c1                	cmp    ecx,eax
c0009ae4:	7d 04                	jge    c0009aea <prepare_data+0x41>
c0009ae6:	29 d0                	sub    eax,edx
c0009ae8:	eb 2d                	jmp    c0009b17 <prepare_data+0x6e>
c0009aea:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009af0:	29 d7                	sub    edi,edx
c0009af2:	01 f7                	add    edi,esi
c0009af4:	51                   	push   ecx
c0009af5:	29 f2                	sub    edx,esi
c0009af7:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009afe:	8d 14 90             	lea    edx,[eax+edx*4]
c0009b01:	51                   	push   ecx
c0009b02:	52                   	push   edx
c0009b03:	50                   	push   eax
c0009b04:	e8 91 6a ff ff       	call   c000059a <memmove>
c0009b09:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b0c:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b0f:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009b12:	29 f0                	sub    eax,esi
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	29 f0                	sub    eax,esi
c0009b19:	79 02                	jns    c0009b1d <prepare_data+0x74>
c0009b1b:	31 c0                	xor    eax,eax
c0009b1d:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009b20:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009b23:	29 ef                	sub    edi,ebp
c0009b25:	39 c7                	cmp    edi,eax
c0009b27:	7e 02                	jle    c0009b2b <prepare_data+0x82>
c0009b29:	89 c7                	mov    edi,eax
c0009b2b:	89 f8                	mov    eax,edi
c0009b2d:	99                   	cdq    
c0009b2e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009b31:	b8 15 00 00 00       	mov    eax,0x15
c0009b36:	29 d7                	sub    edi,edx
c0009b38:	0f 88 dd 00 00 00    	js     c0009c1b <prepare_data+0x172>
c0009b3e:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009b41:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009b44:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009b47:	0f 8f ce 00 00 00    	jg     c0009c1b <prepare_data+0x172>
c0009b4d:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009b53:	50                   	push   eax
c0009b54:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009b5b:	50                   	push   eax
c0009b5c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b62:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009b65:	50                   	push   eax
c0009b66:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009b69:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009b6d:	50                   	push   eax
c0009b6e:	e8 5f 6a ff ff       	call   c00005d2 <memcpy>
c0009b73:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009b76:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009b79:	01 fd                	add    ebp,edi
c0009b7b:	01 f9                	add    ecx,edi
c0009b7d:	83 c4 10             	add    esp,0x10
c0009b80:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009b83:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009b86:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009b89:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b8d:	0f 85 86 00 00 00    	jne    c0009c19 <prepare_data+0x170>
c0009b93:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009b96:	89 e8                	mov    eax,ebp
c0009b98:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009b9b:	29 c8                	sub    eax,ecx
c0009b9d:	39 f8                	cmp    eax,edi
c0009b9f:	7d 78                	jge    c0009c19 <prepare_data+0x170>
c0009ba1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009ba5:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009ba9:	74 6e                	je     c0009c19 <prepare_data+0x170>
c0009bab:	8d 7e 04             	lea    edi,[esi+0x4]
c0009bae:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009bb2:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009bb5:	29 ef                	sub    edi,ebp
c0009bb7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009bbb:	7c 29                	jl     c0009be6 <prepare_data+0x13d>
c0009bbd:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bc0:	29 f1                	sub    ecx,esi
c0009bc2:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009bc9:	55                   	push   ebp
c0009bca:	50                   	push   eax
c0009bcb:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009bce:	50                   	push   eax
c0009bcf:	52                   	push   edx
c0009bd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009bd4:	e8 c1 69 ff ff       	call   c000059a <memmove>
c0009bd9:	83 c4 10             	add    esp,0x10
c0009bdc:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009bdf:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009be2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009be6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009be9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009bec:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009bef:	83 c6 05             	add    esi,0x5
c0009bf2:	78 07                	js     c0009bfb <prepare_data+0x152>
c0009bf4:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bf7:	39 cf                	cmp    edi,ecx
c0009bf9:	7e 04                	jle    c0009bff <prepare_data+0x156>
c0009bfb:	89 ce                	mov    esi,ecx
c0009bfd:	29 c6                	sub    esi,eax
c0009bff:	8d 04 82             	lea    eax,[edx+eax*4]
c0009c02:	51                   	push   ecx
c0009c03:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009c0a:	51                   	push   ecx
c0009c0b:	6a 00                	push   0x0
c0009c0d:	50                   	push   eax
c0009c0e:	e8 f5 69 ff ff       	call   c0000608 <memset>
c0009c13:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009c16:	83 c4 10             	add    esp,0x10
c0009c19:	31 c0                	xor    eax,eax
c0009c1b:	83 c4 1c             	add    esp,0x1c
c0009c1e:	5b                   	pop    ebx
c0009c1f:	5e                   	pop    esi
c0009c20:	5f                   	pop    edi
c0009c21:	5d                   	pop    ebp
c0009c22:	c3                   	ret    

c0009c23 <sinc_multichan_vari_process>:
c0009c23:	55                   	push   ebp
c0009c24:	b8 05 00 00 00       	mov    eax,0x5
c0009c29:	57                   	push   edi
c0009c2a:	56                   	push   esi
c0009c2b:	53                   	push   ebx
c0009c2c:	83 ec 3c             	sub    esp,0x3c
c0009c2f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009c33:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009c37:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009c3a:	85 db                	test   ebx,ebx
c0009c3c:	0f 84 5d 02 00 00    	je     c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c42:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009c45:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009c48:	0f af d0             	imul   edx,eax
c0009c4b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009c4e:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009c52:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009c59:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009c5c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009c63:	dd 06                	fld    QWORD PTR [esi]
c0009c65:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009c69:	55                   	push   ebp
c0009c6a:	55                   	push   ebp
c0009c6b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009c6e:	e8 d9 f2 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009c73:	89 c2                	mov    edx,eax
c0009c75:	58                   	pop    eax
c0009c76:	85 d2                	test   edx,edx
c0009c78:	59                   	pop    ecx
c0009c79:	b8 16 00 00 00       	mov    eax,0x16
c0009c7e:	0f 85 1b 02 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c84:	d9 05 28 85 03 c0    	fld    DWORD PTR ds:0xc0038528
c0009c8a:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009c8d:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009c90:	dd 06                	fld    QWORD PTR [esi]
c0009c92:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009c95:	d8 d1                	fcom   st(1)
c0009c97:	df e0                	fnstsw ax
c0009c99:	9e                   	sahf   
c0009c9a:	76 0f                	jbe    c0009cab <sinc_multichan_vari_process+0x88>
c0009c9c:	dd d8                	fstp   st(0)
c0009c9e:	d9 e8                	fld1   
c0009ca0:	d8 d9                	fcomp  st(1)
c0009ca2:	df e0                	fnstsw ax
c0009ca4:	9e                   	sahf   
c0009ca5:	77 0f                	ja     c0009cb6 <sinc_multichan_vari_process+0x93>
c0009ca7:	dd d8                	fstp   st(0)
c0009ca9:	eb 11                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cab:	dd d9                	fstp   st(1)
c0009cad:	d9 e8                	fld1   
c0009caf:	d8 d9                	fcomp  st(1)
c0009cb1:	df e0                	fnstsw ax
c0009cb3:	9e                   	sahf   
c0009cb4:	76 04                	jbe    c0009cba <sinc_multichan_vari_process+0x97>
c0009cb6:	de f9                	fdivp  st(1),st
c0009cb8:	eb 02                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cba:	dd d8                	fstp   st(0)
c0009cbc:	83 ec 10             	sub    esp,0x10
c0009cbf:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cc5:	e8 96 49 01 00       	call   c001e660 <lrint>
c0009cca:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009ccd:	40                   	inc    eax
c0009cce:	dd 14 24             	fst    QWORD PTR [esp]
c0009cd1:	0f af c5             	imul   eax,ebp
c0009cd4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009cd8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009cdc:	e8 71 fd ff ff       	call   c0009a52 <fmod_one>
c0009ce1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009ce4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009ce8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009ceb:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009cef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cf3:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009cf7:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cfa:	e8 61 49 01 00       	call   c001e660 <lrint>
c0009cff:	0f af e8             	imul   ebp,eax
c0009d02:	d9 e8                	fld1   
c0009d04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009d08:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009d0c:	01 e8                	add    eax,ebp
c0009d0e:	dc 05 58 fe 01 c0    	fadd   QWORD PTR ds:0xc001fe58
c0009d14:	99                   	cdq    
c0009d15:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d19:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009d1c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009d1f:	83 c4 10             	add    esp,0x10
c0009d22:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009d25:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009d28:	7d 4b                	jge    c0009d75 <sinc_multichan_vari_process+0x152>
c0009d2a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d2d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d30:	01 c8                	add    eax,ecx
c0009d32:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d35:	99                   	cdq    
c0009d36:	f7 f9                	idiv   ecx
c0009d38:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d3c:	7d 09                	jge    c0009d47 <sinc_multichan_vari_process+0x124>
c0009d3e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009d41:	85 c0                	test   eax,eax
c0009d43:	79 57                	jns    c0009d9c <sinc_multichan_vari_process+0x179>
c0009d45:	eb 70                	jmp    c0009db7 <sinc_multichan_vari_process+0x194>
c0009d47:	51                   	push   ecx
c0009d48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d4c:	57                   	push   edi
c0009d4d:	53                   	push   ebx
c0009d4e:	e8 56 fd ff ff       	call   c0009aa9 <prepare_data>
c0009d53:	83 c4 10             	add    esp,0x10
c0009d56:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009d59:	85 c0                	test   eax,eax
c0009d5b:	0f 85 3e 01 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d61:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d64:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d67:	01 c8                	add    eax,ecx
c0009d69:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d6c:	99                   	cdq    
c0009d6d:	f7 f9                	idiv   ecx
c0009d6f:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d73:	7c c9                	jl     c0009d3e <sinc_multichan_vari_process+0x11b>
c0009d75:	dd 04 24             	fld    QWORD PTR [esp]
c0009d78:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009d7b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009d7f:	dd 1e                	fstp   QWORD PTR [esi]
c0009d81:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009d84:	99                   	cdq    
c0009d85:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d88:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009d8b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009d8e:	99                   	cdq    
c0009d8f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d92:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009d95:	31 c0                	xor    eax,eax
c0009d97:	e9 03 01 00 00       	jmp    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da0:	dd 04 24             	fld    QWORD PTR [esp]
c0009da3:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009da6:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009daa:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009dae:	d9 c9                	fxch   st(1)
c0009db0:	de d9                	fcompp 
c0009db2:	df e0                	fnstsw ax
c0009db4:	9e                   	sahf   
c0009db5:	73 be                	jae    c0009d75 <sinc_multichan_vari_process+0x152>
c0009db7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009dbb:	7e 31                	jle    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009dbd:	83 ec 10             	sub    esp,0x10
c0009dc0:	dd 06                	fld    QWORD PTR [esi]
c0009dc2:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009dc8:	e8 73 48 01 00       	call   c001e640 <fabs>
c0009dcd:	83 c4 10             	add    esp,0x10
c0009dd0:	dc 1d 18 85 03 c0    	fcomp  QWORD PTR ds:0xc0038518
c0009dd6:	df e0                	fnstsw ax
c0009dd8:	9e                   	sahf   
c0009dd9:	76 13                	jbe    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009ddb:	dd 06                	fld    QWORD PTR [esi]
c0009ddd:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009de0:	d8 e1                	fsub   st,st(1)
c0009de2:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009de5:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009de8:	de c1                	faddp  st(1),st
c0009dea:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009dee:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009df1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009df5:	d9 e8                	fld1   
c0009df7:	d8 d9                	fcomp  st(1)
c0009df9:	df e0                	fnstsw ax
c0009dfb:	9e                   	sahf   
c0009dfc:	77 04                	ja     c0009e02 <sinc_multichan_vari_process+0x1df>
c0009dfe:	dd d8                	fstp   st(0)
c0009e00:	d9 e8                	fld1   
c0009e02:	de c9                	fmulp  st(1),st
c0009e04:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009e08:	50                   	push   eax
c0009e09:	50                   	push   eax
c0009e0a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e12:	e8 28 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e17:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009e1b:	89 c5                	mov    ebp,eax
c0009e1d:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009e21:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e24:	e8 16 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e29:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009e2c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009e2f:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009e32:	89 c1                	mov    ecx,eax
c0009e34:	52                   	push   edx
c0009e35:	89 d8                	mov    eax,ebx
c0009e37:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009e3b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009e3e:	52                   	push   edx
c0009e3f:	52                   	push   edx
c0009e40:	89 ea                	mov    edx,ebp
c0009e42:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e45:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009e48:	e8 86 f7 ff ff       	call   c00095d3 <calc_output_multi>
c0009e4d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009e50:	d9 e8                	fld1   
c0009e52:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009e55:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009e59:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e5d:	83 c4 10             	add    esp,0x10
c0009e60:	dd 14 24             	fst    QWORD PTR [esp]
c0009e63:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009e67:	e8 e6 fb ff ff       	call   c0009a52 <fmod_one>
c0009e6c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009e6f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009e73:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009e76:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009e7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e7e:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009e82:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e85:	e8 d6 47 01 00       	call   c001e660 <lrint>
c0009e8a:	0f af e8             	imul   ebp,eax
c0009e8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009e91:	01 e8                	add    eax,ebp
c0009e93:	99                   	cdq    
c0009e94:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009e97:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009e9a:	e9 80 fe ff ff       	jmp    c0009d1f <sinc_multichan_vari_process+0xfc>
c0009e9f:	83 c4 3c             	add    esp,0x3c
c0009ea2:	5b                   	pop    ebx
c0009ea3:	5e                   	pop    esi
c0009ea4:	5f                   	pop    edi
c0009ea5:	5d                   	pop    ebp
c0009ea6:	c3                   	ret    

c0009ea7 <sinc_hex_vari_process>:
c0009ea7:	55                   	push   ebp
c0009ea8:	b8 05 00 00 00       	mov    eax,0x5
c0009ead:	57                   	push   edi
c0009eae:	56                   	push   esi
c0009eaf:	53                   	push   ebx
c0009eb0:	83 ec 3c             	sub    esp,0x3c
c0009eb3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009eb7:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009ebb:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009ebe:	85 db                	test   ebx,ebx
c0009ec0:	0f 84 58 02 00 00    	je     c000a11e <sinc_hex_vari_process+0x277>
c0009ec6:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009ec9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009ecc:	0f af d0             	imul   edx,eax
c0009ecf:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009ed2:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009ed6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009edd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009ee0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009ee7:	dd 06                	fld    QWORD PTR [esi]
c0009ee9:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009eed:	55                   	push   ebp
c0009eee:	55                   	push   ebp
c0009eef:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ef2:	e8 55 f0 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009ef7:	89 c2                	mov    edx,eax
c0009ef9:	58                   	pop    eax
c0009efa:	85 d2                	test   edx,edx
c0009efc:	59                   	pop    ecx
c0009efd:	b8 16 00 00 00       	mov    eax,0x16
c0009f02:	0f 85 16 02 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009f08:	d9 05 28 85 03 c0    	fld    DWORD PTR ds:0xc0038528
c0009f0e:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009f11:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009f14:	dd 06                	fld    QWORD PTR [esi]
c0009f16:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009f19:	d8 d1                	fcom   st(1)
c0009f1b:	df e0                	fnstsw ax
c0009f1d:	9e                   	sahf   
c0009f1e:	76 0f                	jbe    c0009f2f <sinc_hex_vari_process+0x88>
c0009f20:	dd d8                	fstp   st(0)
c0009f22:	d9 e8                	fld1   
c0009f24:	d8 d9                	fcomp  st(1)
c0009f26:	df e0                	fnstsw ax
c0009f28:	9e                   	sahf   
c0009f29:	77 0f                	ja     c0009f3a <sinc_hex_vari_process+0x93>
c0009f2b:	dd d8                	fstp   st(0)
c0009f2d:	eb 11                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f2f:	dd d9                	fstp   st(1)
c0009f31:	d9 e8                	fld1   
c0009f33:	d8 d9                	fcomp  st(1)
c0009f35:	df e0                	fnstsw ax
c0009f37:	9e                   	sahf   
c0009f38:	76 04                	jbe    c0009f3e <sinc_hex_vari_process+0x97>
c0009f3a:	de f9                	fdivp  st(1),st
c0009f3c:	eb 02                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f3e:	dd d8                	fstp   st(0)
c0009f40:	83 ec 10             	sub    esp,0x10
c0009f43:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f46:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f49:	e8 12 47 01 00       	call   c001e660 <lrint>
c0009f4e:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009f51:	40                   	inc    eax
c0009f52:	dd 14 24             	fst    QWORD PTR [esp]
c0009f55:	0f af c5             	imul   eax,ebp
c0009f58:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f5c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009f60:	e8 ed fa ff ff       	call   c0009a52 <fmod_one>
c0009f65:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f68:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f6c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f6f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009f73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f77:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f7b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f7e:	e8 dd 46 01 00       	call   c001e660 <lrint>
c0009f83:	0f af e8             	imul   ebp,eax
c0009f86:	d9 e8                	fld1   
c0009f88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f8c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009f90:	01 e8                	add    eax,ebp
c0009f92:	dc 05 58 fe 01 c0    	fadd   QWORD PTR ds:0xc001fe58
c0009f98:	99                   	cdq    
c0009f99:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f9d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009fa0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009fa3:	83 c4 10             	add    esp,0x10
c0009fa6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009fa9:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009fac:	7d 4b                	jge    c0009ff9 <sinc_hex_vari_process+0x152>
c0009fae:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009fb4:	01 c8                	add    eax,ecx
c0009fb6:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009fb9:	99                   	cdq    
c0009fba:	f7 f9                	idiv   ecx
c0009fbc:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009fc0:	7d 09                	jge    c0009fcb <sinc_hex_vari_process+0x124>
c0009fc2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009fc5:	85 c0                	test   eax,eax
c0009fc7:	79 57                	jns    c000a020 <sinc_hex_vari_process+0x179>
c0009fc9:	eb 70                	jmp    c000a03b <sinc_hex_vari_process+0x194>
c0009fcb:	51                   	push   ecx
c0009fcc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009fd0:	57                   	push   edi
c0009fd1:	53                   	push   ebx
c0009fd2:	e8 d2 fa ff ff       	call   c0009aa9 <prepare_data>
c0009fd7:	83 c4 10             	add    esp,0x10
c0009fda:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009fdd:	85 c0                	test   eax,eax
c0009fdf:	0f 85 39 01 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009fe5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fe8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009feb:	01 c8                	add    eax,ecx
c0009fed:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009ff0:	99                   	cdq    
c0009ff1:	f7 f9                	idiv   ecx
c0009ff3:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009ff7:	7c c9                	jl     c0009fc2 <sinc_hex_vari_process+0x11b>
c0009ff9:	dd 04 24             	fld    QWORD PTR [esp]
c0009ffc:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009fff:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a003:	dd 1e                	fstp   QWORD PTR [esi]
c000a005:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a008:	99                   	cdq    
c000a009:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a00c:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a00f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a012:	99                   	cdq    
c000a013:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a016:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a019:	31 c0                	xor    eax,eax
c000a01b:	e9 fe 00 00 00       	jmp    c000a11e <sinc_hex_vari_process+0x277>
c000a020:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a024:	dd 04 24             	fld    QWORD PTR [esp]
c000a027:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a02a:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a02e:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a032:	d9 c9                	fxch   st(1)
c000a034:	de d9                	fcompp 
c000a036:	df e0                	fnstsw ax
c000a038:	9e                   	sahf   
c000a039:	73 be                	jae    c0009ff9 <sinc_hex_vari_process+0x152>
c000a03b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a03f:	7e 31                	jle    c000a072 <sinc_hex_vari_process+0x1cb>
c000a041:	83 ec 10             	sub    esp,0x10
c000a044:	dd 06                	fld    QWORD PTR [esi]
c000a046:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a049:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a04c:	e8 ef 45 01 00       	call   c001e640 <fabs>
c000a051:	83 c4 10             	add    esp,0x10
c000a054:	dc 1d 18 85 03 c0    	fcomp  QWORD PTR ds:0xc0038518
c000a05a:	df e0                	fnstsw ax
c000a05c:	9e                   	sahf   
c000a05d:	76 13                	jbe    c000a072 <sinc_hex_vari_process+0x1cb>
c000a05f:	dd 06                	fld    QWORD PTR [esi]
c000a061:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a064:	d8 e1                	fsub   st,st(1)
c000a066:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a069:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a06c:	de c1                	faddp  st(1),st
c000a06e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a072:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a075:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a079:	d9 e8                	fld1   
c000a07b:	d8 d9                	fcomp  st(1)
c000a07d:	df e0                	fnstsw ax
c000a07f:	9e                   	sahf   
c000a080:	77 04                	ja     c000a086 <sinc_hex_vari_process+0x1df>
c000a082:	dd d8                	fstp   st(0)
c000a084:	d9 e8                	fld1   
c000a086:	de c9                	fmulp  st(1),st
c000a088:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a08c:	50                   	push   eax
c000a08d:	50                   	push   eax
c000a08e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a092:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a096:	e8 a4 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a09b:	89 c5                	mov    ebp,eax
c000a09d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a0a1:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a0a5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0a8:	e8 92 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a0ad:	83 c4 0c             	add    esp,0xc
c000a0b0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a0b3:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a0b6:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a0b9:	89 c1                	mov    ecx,eax
c000a0bb:	52                   	push   edx
c000a0bc:	89 d8                	mov    eax,ebx
c000a0be:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a0c2:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a0c5:	52                   	push   edx
c000a0c6:	52                   	push   edx
c000a0c7:	89 ea                	mov    edx,ebp
c000a0c9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0cc:	e8 d1 f2 ff ff       	call   c00093a2 <calc_output_hex>
c000a0d1:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a0d5:	d9 e8                	fld1   
c000a0d7:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a0db:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a0df:	dd 14 24             	fst    QWORD PTR [esp]
c000a0e2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a0e6:	e8 67 f9 ff ff       	call   c0009a52 <fmod_one>
c000a0eb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a0ee:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a0f2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a0f5:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a0f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a0fd:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a101:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a104:	e8 57 45 01 00       	call   c001e660 <lrint>
c000a109:	0f af e8             	imul   ebp,eax
c000a10c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a110:	01 e8                	add    eax,ebp
c000a112:	99                   	cdq    
c000a113:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a116:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a119:	e9 85 fe ff ff       	jmp    c0009fa3 <sinc_hex_vari_process+0xfc>
c000a11e:	83 c4 3c             	add    esp,0x3c
c000a121:	5b                   	pop    ebx
c000a122:	5e                   	pop    esi
c000a123:	5f                   	pop    edi
c000a124:	5d                   	pop    ebp
c000a125:	c3                   	ret    

c000a126 <sinc_quad_vari_process>:
c000a126:	55                   	push   ebp
c000a127:	b8 05 00 00 00       	mov    eax,0x5
c000a12c:	57                   	push   edi
c000a12d:	56                   	push   esi
c000a12e:	53                   	push   ebx
c000a12f:	83 ec 3c             	sub    esp,0x3c
c000a132:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a136:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a13a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a13d:	85 db                	test   ebx,ebx
c000a13f:	0f 84 58 02 00 00    	je     c000a39d <sinc_quad_vari_process+0x277>
c000a145:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a148:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a14b:	0f af d0             	imul   edx,eax
c000a14e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a151:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a155:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a15c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a15f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a166:	dd 06                	fld    QWORD PTR [esi]
c000a168:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a16c:	55                   	push   ebp
c000a16d:	55                   	push   ebp
c000a16e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a171:	e8 d6 ed ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a176:	89 c2                	mov    edx,eax
c000a178:	58                   	pop    eax
c000a179:	85 d2                	test   edx,edx
c000a17b:	59                   	pop    ecx
c000a17c:	b8 16 00 00 00       	mov    eax,0x16
c000a181:	0f 85 16 02 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a187:	d9 05 28 85 03 c0    	fld    DWORD PTR ds:0xc0038528
c000a18d:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a190:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a193:	dd 06                	fld    QWORD PTR [esi]
c000a195:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a198:	d8 d1                	fcom   st(1)
c000a19a:	df e0                	fnstsw ax
c000a19c:	9e                   	sahf   
c000a19d:	76 0f                	jbe    c000a1ae <sinc_quad_vari_process+0x88>
c000a19f:	dd d8                	fstp   st(0)
c000a1a1:	d9 e8                	fld1   
c000a1a3:	d8 d9                	fcomp  st(1)
c000a1a5:	df e0                	fnstsw ax
c000a1a7:	9e                   	sahf   
c000a1a8:	77 0f                	ja     c000a1b9 <sinc_quad_vari_process+0x93>
c000a1aa:	dd d8                	fstp   st(0)
c000a1ac:	eb 11                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1ae:	dd d9                	fstp   st(1)
c000a1b0:	d9 e8                	fld1   
c000a1b2:	d8 d9                	fcomp  st(1)
c000a1b4:	df e0                	fnstsw ax
c000a1b6:	9e                   	sahf   
c000a1b7:	76 04                	jbe    c000a1bd <sinc_quad_vari_process+0x97>
c000a1b9:	de f9                	fdivp  st(1),st
c000a1bb:	eb 02                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1bd:	dd d8                	fstp   st(0)
c000a1bf:	83 ec 10             	sub    esp,0x10
c000a1c2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1c5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1c8:	e8 93 44 01 00       	call   c001e660 <lrint>
c000a1cd:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a1d0:	40                   	inc    eax
c000a1d1:	dd 14 24             	fst    QWORD PTR [esp]
c000a1d4:	0f af c5             	imul   eax,ebp
c000a1d7:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a1db:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a1df:	e8 6e f8 ff ff       	call   c0009a52 <fmod_one>
c000a1e4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a1e7:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a1eb:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1ee:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a1f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1f6:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a1fa:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1fd:	e8 5e 44 01 00       	call   c001e660 <lrint>
c000a202:	0f af e8             	imul   ebp,eax
c000a205:	d9 e8                	fld1   
c000a207:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a20b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a20f:	01 e8                	add    eax,ebp
c000a211:	dc 05 58 fe 01 c0    	fadd   QWORD PTR ds:0xc001fe58
c000a217:	99                   	cdq    
c000a218:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a21c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a21f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a222:	83 c4 10             	add    esp,0x10
c000a225:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a228:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a22b:	7d 4b                	jge    c000a278 <sinc_quad_vari_process+0x152>
c000a22d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a230:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a233:	01 c8                	add    eax,ecx
c000a235:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a238:	99                   	cdq    
c000a239:	f7 f9                	idiv   ecx
c000a23b:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a23f:	7d 09                	jge    c000a24a <sinc_quad_vari_process+0x124>
c000a241:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a244:	85 c0                	test   eax,eax
c000a246:	79 57                	jns    c000a29f <sinc_quad_vari_process+0x179>
c000a248:	eb 70                	jmp    c000a2ba <sinc_quad_vari_process+0x194>
c000a24a:	51                   	push   ecx
c000a24b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a24f:	57                   	push   edi
c000a250:	53                   	push   ebx
c000a251:	e8 53 f8 ff ff       	call   c0009aa9 <prepare_data>
c000a256:	83 c4 10             	add    esp,0x10
c000a259:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a25c:	85 c0                	test   eax,eax
c000a25e:	0f 85 39 01 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a264:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a267:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a26a:	01 c8                	add    eax,ecx
c000a26c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a26f:	99                   	cdq    
c000a270:	f7 f9                	idiv   ecx
c000a272:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a276:	7c c9                	jl     c000a241 <sinc_quad_vari_process+0x11b>
c000a278:	dd 04 24             	fld    QWORD PTR [esp]
c000a27b:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a27e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a282:	dd 1e                	fstp   QWORD PTR [esi]
c000a284:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a287:	99                   	cdq    
c000a288:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a28b:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a28e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a291:	99                   	cdq    
c000a292:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a295:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a298:	31 c0                	xor    eax,eax
c000a29a:	e9 fe 00 00 00       	jmp    c000a39d <sinc_quad_vari_process+0x277>
c000a29f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a2a3:	dd 04 24             	fld    QWORD PTR [esp]
c000a2a6:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a2a9:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a2ad:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a2b1:	d9 c9                	fxch   st(1)
c000a2b3:	de d9                	fcompp 
c000a2b5:	df e0                	fnstsw ax
c000a2b7:	9e                   	sahf   
c000a2b8:	73 be                	jae    c000a278 <sinc_quad_vari_process+0x152>
c000a2ba:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a2be:	7e 31                	jle    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2c0:	83 ec 10             	sub    esp,0x10
c000a2c3:	dd 06                	fld    QWORD PTR [esi]
c000a2c5:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a2c8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2cb:	e8 70 43 01 00       	call   c001e640 <fabs>
c000a2d0:	83 c4 10             	add    esp,0x10
c000a2d3:	dc 1d 18 85 03 c0    	fcomp  QWORD PTR ds:0xc0038518
c000a2d9:	df e0                	fnstsw ax
c000a2db:	9e                   	sahf   
c000a2dc:	76 13                	jbe    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2de:	dd 06                	fld    QWORD PTR [esi]
c000a2e0:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a2e3:	d8 e1                	fsub   st,st(1)
c000a2e5:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a2e8:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a2eb:	de c1                	faddp  st(1),st
c000a2ed:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a2f1:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a2f4:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a2f8:	d9 e8                	fld1   
c000a2fa:	d8 d9                	fcomp  st(1)
c000a2fc:	df e0                	fnstsw ax
c000a2fe:	9e                   	sahf   
c000a2ff:	77 04                	ja     c000a305 <sinc_quad_vari_process+0x1df>
c000a301:	dd d8                	fstp   st(0)
c000a303:	d9 e8                	fld1   
c000a305:	de c9                	fmulp  st(1),st
c000a307:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a30b:	50                   	push   eax
c000a30c:	50                   	push   eax
c000a30d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a311:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a315:	e8 25 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a31a:	89 c5                	mov    ebp,eax
c000a31c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a320:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a324:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a327:	e8 13 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a32c:	83 c4 0c             	add    esp,0xc
c000a32f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a332:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a335:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a338:	89 c1                	mov    ecx,eax
c000a33a:	52                   	push   edx
c000a33b:	89 d8                	mov    eax,ebx
c000a33d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a341:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a344:	52                   	push   edx
c000a345:	52                   	push   edx
c000a346:	89 ea                	mov    edx,ebp
c000a348:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a34b:	e8 8d ee ff ff       	call   c00091dd <calc_output_quad>
c000a350:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a354:	d9 e8                	fld1   
c000a356:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a35a:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a35e:	dd 14 24             	fst    QWORD PTR [esp]
c000a361:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a365:	e8 e8 f6 ff ff       	call   c0009a52 <fmod_one>
c000a36a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a36d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a371:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a374:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a37c:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a380:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a383:	e8 d8 42 01 00       	call   c001e660 <lrint>
c000a388:	0f af e8             	imul   ebp,eax
c000a38b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a38f:	01 e8                	add    eax,ebp
c000a391:	99                   	cdq    
c000a392:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a395:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a398:	e9 85 fe ff ff       	jmp    c000a222 <sinc_quad_vari_process+0xfc>
c000a39d:	83 c4 3c             	add    esp,0x3c
c000a3a0:	5b                   	pop    ebx
c000a3a1:	5e                   	pop    esi
c000a3a2:	5f                   	pop    edi
c000a3a3:	5d                   	pop    ebp
c000a3a4:	c3                   	ret    

c000a3a5 <sinc_stereo_vari_process>:
c000a3a5:	55                   	push   ebp
c000a3a6:	b8 05 00 00 00       	mov    eax,0x5
c000a3ab:	57                   	push   edi
c000a3ac:	56                   	push   esi
c000a3ad:	53                   	push   ebx
c000a3ae:	83 ec 3c             	sub    esp,0x3c
c000a3b1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a3b5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a3b9:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a3bc:	85 db                	test   ebx,ebx
c000a3be:	0f 84 58 02 00 00    	je     c000a61c <sinc_stereo_vari_process+0x277>
c000a3c4:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a3c7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a3ca:	0f af d0             	imul   edx,eax
c000a3cd:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a3d0:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a3d4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a3db:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a3de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a3e5:	dd 06                	fld    QWORD PTR [esi]
c000a3e7:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a3eb:	55                   	push   ebp
c000a3ec:	55                   	push   ebp
c000a3ed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3f0:	e8 57 eb ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a3f5:	89 c2                	mov    edx,eax
c000a3f7:	58                   	pop    eax
c000a3f8:	85 d2                	test   edx,edx
c000a3fa:	59                   	pop    ecx
c000a3fb:	b8 16 00 00 00       	mov    eax,0x16
c000a400:	0f 85 16 02 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a406:	d9 05 28 85 03 c0    	fld    DWORD PTR ds:0xc0038528
c000a40c:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a40f:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a412:	dd 06                	fld    QWORD PTR [esi]
c000a414:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a417:	d8 d1                	fcom   st(1)
c000a419:	df e0                	fnstsw ax
c000a41b:	9e                   	sahf   
c000a41c:	76 0f                	jbe    c000a42d <sinc_stereo_vari_process+0x88>
c000a41e:	dd d8                	fstp   st(0)
c000a420:	d9 e8                	fld1   
c000a422:	d8 d9                	fcomp  st(1)
c000a424:	df e0                	fnstsw ax
c000a426:	9e                   	sahf   
c000a427:	77 0f                	ja     c000a438 <sinc_stereo_vari_process+0x93>
c000a429:	dd d8                	fstp   st(0)
c000a42b:	eb 11                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a42d:	dd d9                	fstp   st(1)
c000a42f:	d9 e8                	fld1   
c000a431:	d8 d9                	fcomp  st(1)
c000a433:	df e0                	fnstsw ax
c000a435:	9e                   	sahf   
c000a436:	76 04                	jbe    c000a43c <sinc_stereo_vari_process+0x97>
c000a438:	de f9                	fdivp  st(1),st
c000a43a:	eb 02                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a43c:	dd d8                	fstp   st(0)
c000a43e:	83 ec 10             	sub    esp,0x10
c000a441:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a444:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a447:	e8 14 42 01 00       	call   c001e660 <lrint>
c000a44c:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a44f:	40                   	inc    eax
c000a450:	dd 14 24             	fst    QWORD PTR [esp]
c000a453:	0f af c5             	imul   eax,ebp
c000a456:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a45a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a45e:	e8 ef f5 ff ff       	call   c0009a52 <fmod_one>
c000a463:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a466:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a46a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a46d:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a471:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a475:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a479:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a47c:	e8 df 41 01 00       	call   c001e660 <lrint>
c000a481:	0f af e8             	imul   ebp,eax
c000a484:	d9 e8                	fld1   
c000a486:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a48a:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a48e:	01 e8                	add    eax,ebp
c000a490:	dc 05 58 fe 01 c0    	fadd   QWORD PTR ds:0xc001fe58
c000a496:	99                   	cdq    
c000a497:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a49b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a49e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a4a1:	83 c4 10             	add    esp,0x10
c000a4a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a4a7:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a4aa:	7d 4b                	jge    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a4ac:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4af:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4b2:	01 c8                	add    eax,ecx
c000a4b4:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4b7:	99                   	cdq    
c000a4b8:	f7 f9                	idiv   ecx
c000a4ba:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4be:	7d 09                	jge    c000a4c9 <sinc_stereo_vari_process+0x124>
c000a4c0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a4c3:	85 c0                	test   eax,eax
c000a4c5:	79 57                	jns    c000a51e <sinc_stereo_vari_process+0x179>
c000a4c7:	eb 70                	jmp    c000a539 <sinc_stereo_vari_process+0x194>
c000a4c9:	51                   	push   ecx
c000a4ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a4ce:	57                   	push   edi
c000a4cf:	53                   	push   ebx
c000a4d0:	e8 d4 f5 ff ff       	call   c0009aa9 <prepare_data>
c000a4d5:	83 c4 10             	add    esp,0x10
c000a4d8:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a4db:	85 c0                	test   eax,eax
c000a4dd:	0f 85 39 01 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a4e3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4e6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4e9:	01 c8                	add    eax,ecx
c000a4eb:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4ee:	99                   	cdq    
c000a4ef:	f7 f9                	idiv   ecx
c000a4f1:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4f5:	7c c9                	jl     c000a4c0 <sinc_stereo_vari_process+0x11b>
c000a4f7:	dd 04 24             	fld    QWORD PTR [esp]
c000a4fa:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a4fd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a501:	dd 1e                	fstp   QWORD PTR [esi]
c000a503:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a506:	99                   	cdq    
c000a507:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a50a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a50d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a510:	99                   	cdq    
c000a511:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a514:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a517:	31 c0                	xor    eax,eax
c000a519:	e9 fe 00 00 00       	jmp    c000a61c <sinc_stereo_vari_process+0x277>
c000a51e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a522:	dd 04 24             	fld    QWORD PTR [esp]
c000a525:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a528:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a52c:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a530:	d9 c9                	fxch   st(1)
c000a532:	de d9                	fcompp 
c000a534:	df e0                	fnstsw ax
c000a536:	9e                   	sahf   
c000a537:	73 be                	jae    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a539:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a53d:	7e 31                	jle    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a53f:	83 ec 10             	sub    esp,0x10
c000a542:	dd 06                	fld    QWORD PTR [esi]
c000a544:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a547:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a54a:	e8 f1 40 01 00       	call   c001e640 <fabs>
c000a54f:	83 c4 10             	add    esp,0x10
c000a552:	dc 1d 18 85 03 c0    	fcomp  QWORD PTR ds:0xc0038518
c000a558:	df e0                	fnstsw ax
c000a55a:	9e                   	sahf   
c000a55b:	76 13                	jbe    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a55d:	dd 06                	fld    QWORD PTR [esi]
c000a55f:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a562:	d8 e1                	fsub   st,st(1)
c000a564:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a567:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a56a:	de c1                	faddp  st(1),st
c000a56c:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a570:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a573:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a577:	d9 e8                	fld1   
c000a579:	d8 d9                	fcomp  st(1)
c000a57b:	df e0                	fnstsw ax
c000a57d:	9e                   	sahf   
c000a57e:	77 04                	ja     c000a584 <sinc_stereo_vari_process+0x1df>
c000a580:	dd d8                	fstp   st(0)
c000a582:	d9 e8                	fld1   
c000a584:	de c9                	fmulp  st(1),st
c000a586:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a58a:	50                   	push   eax
c000a58b:	50                   	push   eax
c000a58c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a594:	e8 a6 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a599:	89 c5                	mov    ebp,eax
c000a59b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a59f:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a5a3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5a6:	e8 94 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a5ab:	83 c4 0c             	add    esp,0xc
c000a5ae:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a5b1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a5b4:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a5b7:	89 c1                	mov    ecx,eax
c000a5b9:	52                   	push   edx
c000a5ba:	89 d8                	mov    eax,ebx
c000a5bc:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a5c0:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a5c3:	52                   	push   edx
c000a5c4:	52                   	push   edx
c000a5c5:	89 ea                	mov    edx,ebp
c000a5c7:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5ca:	e8 ce ea ff ff       	call   c000909d <calc_output_stereo>
c000a5cf:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a5d3:	d9 e8                	fld1   
c000a5d5:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a5d9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a5dd:	dd 14 24             	fst    QWORD PTR [esp]
c000a5e0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a5e4:	e8 69 f4 ff ff       	call   c0009a52 <fmod_one>
c000a5e9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a5ec:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a5f0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a5f3:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a5f7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5fb:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a5ff:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a602:	e8 59 40 01 00       	call   c001e660 <lrint>
c000a607:	0f af e8             	imul   ebp,eax
c000a60a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a60e:	01 e8                	add    eax,ebp
c000a610:	99                   	cdq    
c000a611:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a614:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a617:	e9 85 fe ff ff       	jmp    c000a4a1 <sinc_stereo_vari_process+0xfc>
c000a61c:	83 c4 3c             	add    esp,0x3c
c000a61f:	5b                   	pop    ebx
c000a620:	5e                   	pop    esi
c000a621:	5f                   	pop    edi
c000a622:	5d                   	pop    ebp
c000a623:	c3                   	ret    

c000a624 <sinc_mono_vari_process>:
c000a624:	55                   	push   ebp
c000a625:	b8 05 00 00 00       	mov    eax,0x5
c000a62a:	57                   	push   edi
c000a62b:	56                   	push   esi
c000a62c:	53                   	push   ebx
c000a62d:	83 ec 3c             	sub    esp,0x3c
c000a630:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a634:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a638:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a63b:	85 db                	test   ebx,ebx
c000a63d:	0f 84 57 02 00 00    	je     c000a89a <sinc_mono_vari_process+0x276>
c000a643:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a646:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a649:	0f af d0             	imul   edx,eax
c000a64c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a64f:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a653:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a65a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a65d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a664:	dd 06                	fld    QWORD PTR [esi]
c000a666:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a66a:	51                   	push   ecx
c000a66b:	51                   	push   ecx
c000a66c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a66f:	e8 d8 e8 ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a674:	5d                   	pop    ebp
c000a675:	89 c2                	mov    edx,eax
c000a677:	58                   	pop    eax
c000a678:	85 d2                	test   edx,edx
c000a67a:	b8 16 00 00 00       	mov    eax,0x16
c000a67f:	0f 85 15 02 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a685:	d9 05 28 85 03 c0    	fld    DWORD PTR ds:0xc0038528
c000a68b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a68e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a691:	dd 06                	fld    QWORD PTR [esi]
c000a693:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a696:	d8 d1                	fcom   st(1)
c000a698:	df e0                	fnstsw ax
c000a69a:	9e                   	sahf   
c000a69b:	76 0f                	jbe    c000a6ac <sinc_mono_vari_process+0x88>
c000a69d:	dd d8                	fstp   st(0)
c000a69f:	d9 e8                	fld1   
c000a6a1:	d8 d9                	fcomp  st(1)
c000a6a3:	df e0                	fnstsw ax
c000a6a5:	9e                   	sahf   
c000a6a6:	77 0f                	ja     c000a6b7 <sinc_mono_vari_process+0x93>
c000a6a8:	dd d8                	fstp   st(0)
c000a6aa:	eb 11                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6ac:	dd d9                	fstp   st(1)
c000a6ae:	d9 e8                	fld1   
c000a6b0:	d8 d9                	fcomp  st(1)
c000a6b2:	df e0                	fnstsw ax
c000a6b4:	9e                   	sahf   
c000a6b5:	76 04                	jbe    c000a6bb <sinc_mono_vari_process+0x97>
c000a6b7:	de f9                	fdivp  st(1),st
c000a6b9:	eb 02                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6bb:	dd d8                	fstp   st(0)
c000a6bd:	83 ec 10             	sub    esp,0x10
c000a6c0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a6c3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6c6:	e8 95 3f 01 00       	call   c001e660 <lrint>
c000a6cb:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a6ce:	40                   	inc    eax
c000a6cf:	dd 14 24             	fst    QWORD PTR [esp]
c000a6d2:	0f af e8             	imul   ebp,eax
c000a6d5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a6d9:	e8 74 f3 ff ff       	call   c0009a52 <fmod_one>
c000a6de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a6e1:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a6e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6e9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a6ed:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6f0:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a6f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a6f8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6fb:	e8 60 3f 01 00       	call   c001e660 <lrint>
c000a700:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a705:	d9 e8                	fld1   
c000a707:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a70b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a70f:	99                   	cdq    
c000a710:	dc 05 58 fe 01 c0    	fadd   QWORD PTR ds:0xc001fe58
c000a716:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a719:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a71d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a720:	83 c4 10             	add    esp,0x10
c000a723:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a726:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a729:	7d 44                	jge    c000a76f <sinc_mono_vari_process+0x14b>
c000a72b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a72e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a731:	01 c8                	add    eax,ecx
c000a733:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a736:	99                   	cdq    
c000a737:	f7 f9                	idiv   ecx
c000a739:	39 d5                	cmp    ebp,edx
c000a73b:	7d 09                	jge    c000a746 <sinc_mono_vari_process+0x122>
c000a73d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a740:	85 c0                	test   eax,eax
c000a742:	79 52                	jns    c000a796 <sinc_mono_vari_process+0x172>
c000a744:	eb 6b                	jmp    c000a7b1 <sinc_mono_vari_process+0x18d>
c000a746:	52                   	push   edx
c000a747:	55                   	push   ebp
c000a748:	57                   	push   edi
c000a749:	53                   	push   ebx
c000a74a:	e8 5a f3 ff ff       	call   c0009aa9 <prepare_data>
c000a74f:	83 c4 10             	add    esp,0x10
c000a752:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a755:	85 c0                	test   eax,eax
c000a757:	0f 85 3d 01 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a75d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a760:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a763:	01 c8                	add    eax,ecx
c000a765:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a768:	99                   	cdq    
c000a769:	f7 f9                	idiv   ecx
c000a76b:	39 d5                	cmp    ebp,edx
c000a76d:	7c ce                	jl     c000a73d <sinc_mono_vari_process+0x119>
c000a76f:	dd 04 24             	fld    QWORD PTR [esp]
c000a772:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a775:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a779:	dd 1e                	fstp   QWORD PTR [esi]
c000a77b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a77e:	99                   	cdq    
c000a77f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a782:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a785:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a788:	99                   	cdq    
c000a789:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a78c:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a78f:	31 c0                	xor    eax,eax
c000a791:	e9 04 01 00 00       	jmp    c000a89a <sinc_mono_vari_process+0x276>
c000a796:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a79a:	dd 04 24             	fld    QWORD PTR [esp]
c000a79d:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a7a0:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a7a4:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a7a8:	d9 c9                	fxch   st(1)
c000a7aa:	de d9                	fcompp 
c000a7ac:	df e0                	fnstsw ax
c000a7ae:	9e                   	sahf   
c000a7af:	77 be                	ja     c000a76f <sinc_mono_vari_process+0x14b>
c000a7b1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a7b5:	7e 31                	jle    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7b7:	83 ec 10             	sub    esp,0x10
c000a7ba:	dd 06                	fld    QWORD PTR [esi]
c000a7bc:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a7bf:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a7c2:	e8 79 3e 01 00       	call   c001e640 <fabs>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	dc 1d 18 85 03 c0    	fcomp  QWORD PTR ds:0xc0038518
c000a7d0:	df e0                	fnstsw ax
c000a7d2:	9e                   	sahf   
c000a7d3:	76 13                	jbe    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7d5:	dd 06                	fld    QWORD PTR [esi]
c000a7d7:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a7da:	d8 e1                	fsub   st,st(1)
c000a7dc:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a7df:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a7e2:	de c1                	faddp  st(1),st
c000a7e4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a7e8:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a7eb:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a7ef:	d9 e8                	fld1   
c000a7f1:	d8 d9                	fcomp  st(1)
c000a7f3:	df e0                	fnstsw ax
c000a7f5:	9e                   	sahf   
c000a7f6:	77 04                	ja     c000a7fc <sinc_mono_vari_process+0x1d8>
c000a7f8:	dd d8                	fstp   st(0)
c000a7fa:	d9 e8                	fld1   
c000a7fc:	de c9                	fmulp  st(1),st
c000a7fe:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a802:	50                   	push   eax
c000a803:	50                   	push   eax
c000a804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a80c:	e8 2e f2 ff ff       	call   c0009a3f <double_to_fp>
c000a811:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a815:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a819:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a81d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a820:	e8 1a f2 ff ff       	call   c0009a3f <double_to_fp>
c000a825:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a829:	89 c1                	mov    ecx,eax
c000a82b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a82f:	89 d8                	mov    eax,ebx
c000a831:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a834:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a838:	e8 7b e7 ff ff       	call   c0008fb8 <calc_output_single>
c000a83d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a840:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a843:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a847:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a84a:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a84d:	d9 e8                	fld1   
c000a84f:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a853:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a857:	dd 14 24             	fst    QWORD PTR [esp]
c000a85a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a85e:	e8 ef f1 ff ff       	call   c0009a52 <fmod_one>
c000a863:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a866:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a86a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a86e:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a872:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a875:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a879:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a87d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a880:	e8 db 3d 01 00       	call   c001e660 <lrint>
c000a885:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a88a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88e:	99                   	cdq    
c000a88f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a892:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a895:	e9 86 fe ff ff       	jmp    c000a720 <sinc_mono_vari_process+0xfc>
c000a89a:	83 c4 3c             	add    esp,0x3c
c000a89d:	5b                   	pop    ebx
c000a89e:	5e                   	pop    esi
c000a89f:	5f                   	pop    edi
c000a8a0:	5d                   	pop    ebp
c000a8a1:	c3                   	ret    

c000a8a2 <sinc_get_name>:
c000a8a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8a6:	31 c0                	xor    eax,eax
c000a8a8:	83 fa 02             	cmp    edx,0x2
c000a8ab:	77 07                	ja     c000a8b4 <sinc_get_name+0x12>
c000a8ad:	8b 04 95 c0 fe 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0140]
c000a8b4:	c3                   	ret    

c000a8b5 <sinc_get_description>:
c000a8b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8b9:	31 c0                	xor    eax,eax
c000a8bb:	83 fa 02             	cmp    edx,0x2
c000a8be:	77 07                	ja     c000a8c7 <sinc_get_description+0x12>
c000a8c0:	8b 04 95 b4 fe 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe014c]
c000a8c7:	c3                   	ret    

c000a8c8 <sinc_set_converter>:
c000a8c8:	55                   	push   ebp
c000a8c9:	57                   	push   edi
c000a8ca:	56                   	push   esi
c000a8cb:	53                   	push   ebx
c000a8cc:	81 ec 5c 08 00 00    	sub    esp,0x85c
c000a8d2:	8b 9c 24 70 08 00 00 	mov    ebx,DWORD PTR [esp+0x870]
c000a8d9:	8b ac 24 74 08 00 00 	mov    ebp,DWORD PTR [esp+0x874]
c000a8e0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a8e3:	85 c0                	test   eax,eax
c000a8e5:	74 13                	je     c000a8fa <sinc_set_converter+0x32>
c000a8e7:	83 ec 0c             	sub    esp,0xc
c000a8ea:	50                   	push   eax
c000a8eb:	e8 eb 28 00 00       	call   c000d1db <free>
c000a8f0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a8f7:	83 c4 10             	add    esp,0x10
c000a8fa:	56                   	push   esi
c000a8fb:	68 44 08 00 00       	push   0x844
c000a900:	6a 00                	push   0x0
c000a902:	8d 74 24 18          	lea    esi,[esp+0x18]
c000a906:	56                   	push   esi
c000a907:	e8 fc 5c ff ff       	call   c0000608 <memset>
c000a90c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a90f:	c7 44 24 1c 50 50 6a 02 	mov    DWORD PTR [esp+0x1c],0x26a5050
c000a917:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a91b:	b8 0b 00 00 00       	mov    eax,0xb
c000a920:	83 c4 10             	add    esp,0x10
c000a923:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a929:	0f 8f 58 01 00 00    	jg     c000aa87 <sinc_set_converter+0x1bf>
c000a92f:	83 fa 01             	cmp    edx,0x1
c000a932:	75 10                	jne    c000a944 <sinc_set_converter+0x7c>
c000a934:	c7 43 24 24 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a624
c000a93b:	c7 43 20 24 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a624
c000a942:	eb 4d                	jmp    c000a991 <sinc_set_converter+0xc9>
c000a944:	83 fa 02             	cmp    edx,0x2
c000a947:	75 10                	jne    c000a959 <sinc_set_converter+0x91>
c000a949:	c7 43 24 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a3a5
c000a950:	c7 43 20 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a3a5
c000a957:	eb 38                	jmp    c000a991 <sinc_set_converter+0xc9>
c000a959:	83 fa 04             	cmp    edx,0x4
c000a95c:	75 10                	jne    c000a96e <sinc_set_converter+0xa6>
c000a95e:	c7 43 24 26 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a126
c000a965:	c7 43 20 26 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a126
c000a96c:	eb 23                	jmp    c000a991 <sinc_set_converter+0xc9>
c000a96e:	83 fa 06             	cmp    edx,0x6
c000a971:	75 10                	jne    c000a983 <sinc_set_converter+0xbb>
c000a973:	c7 43 24 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009ea7
c000a97a:	c7 43 20 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009ea7
c000a981:	eb 0e                	jmp    c000a991 <sinc_set_converter+0xc9>
c000a983:	c7 43 24 23 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009c23
c000a98a:	c7 43 20 23 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009c23
c000a991:	c7 43 28 dc 99 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00099dc
c000a998:	83 fd 01             	cmp    ebp,0x1
c000a99b:	74 28                	je     c000a9c5 <sinc_set_converter+0xfd>
c000a99d:	b8 0a 00 00 00       	mov    eax,0xa
c000a9a2:	83 fd 02             	cmp    ebp,0x2
c000a9a5:	0f 85 dc 00 00 00    	jne    c000aa87 <sinc_set_converter+0x1bf>
c000a9ab:	c7 44 24 3c 84 5d 03 c0 	mov    DWORD PTR [esp+0x3c],0xc0035d84
c000a9b3:	c7 44 24 24 9e 09 00 00 	mov    DWORD PTR [esp+0x24],0x99e
c000a9bb:	c7 44 24 28 80 00 00 00 	mov    DWORD PTR [esp+0x28],0x80
c000a9c3:	eb 18                	jmp    c000a9dd <sinc_set_converter+0x115>
c000a9c5:	c7 44 24 3c e4 fe 01 c0 	mov    DWORD PTR [esp+0x3c],0xc001fee4
c000a9cd:	c7 44 24 24 a4 57 00 00 	mov    DWORD PTR [esp+0x24],0x57a4
c000a9d5:	c7 44 24 28 eb 01 00 00 	mov    DWORD PTR [esp+0x28],0x1eb
c000a9dd:	83 ec 10             	sub    esp,0x10
c000a9e0:	d9 05 2c 85 03 c0    	fld    DWORD PTR ds:0xc003852c
c000a9e6:	da 4c 24 34          	fimul  DWORD PTR [esp+0x34]
c000a9ea:	da 74 24 38          	fidiv  DWORD PTR [esp+0x38]
c000a9ee:	d8 0d 30 85 03 c0    	fmul   DWORD PTR ds:0xc0038530
c000a9f4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a9f7:	e8 64 3c 01 00       	call   c001e660 <lrint>
c000a9fc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000aa00:	83 c4 10             	add    esp,0x10
c000aa03:	3d 00 10 00 00       	cmp    eax,0x1000
c000aa08:	7d 05                	jge    c000aa0f <sinc_set_converter+0x147>
c000aa0a:	b8 00 10 00 00       	mov    eax,0x1000
c000aa0f:	0f af c2             	imul   eax,edx
c000aa12:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000aa16:	51                   	push   ecx
c000aa17:	8d 84 02 11 02 00 00 	lea    eax,[edx+eax*1+0x211]
c000aa1e:	51                   	push   ecx
c000aa1f:	c1 e0 02             	shl    eax,0x2
c000aa22:	50                   	push   eax
c000aa23:	6a 01                	push   0x1
c000aa25:	e8 d1 27 00 00       	call   c000d1fb <calloc>
c000aa2a:	83 c4 10             	add    esp,0x10
c000aa2d:	89 c5                	mov    ebp,eax
c000aa2f:	b8 01 00 00 00       	mov    eax,0x1
c000aa34:	85 ed                	test   ebp,ebp
c000aa36:	74 4f                	je     c000aa87 <sinc_set_converter+0x1bf>
c000aa38:	b9 11 02 00 00       	mov    ecx,0x211
c000aa3d:	fc                   	cld    
c000aa3e:	89 ef                	mov    edi,ebp
c000aa40:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000aa42:	50                   	push   eax
c000aa43:	68 44 08 00 00       	push   0x844
c000aa48:	68 ee 00 00 00       	push   0xee
c000aa4d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000aa51:	50                   	push   eax
c000aa52:	e8 b1 5b ff ff       	call   c0000608 <memset>
c000aa57:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c000aa5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000aa5d:	e8 7a ef ff ff       	call   c00099dc <sinc_reset>
c000aa62:	bb 01 00 00 00       	mov    ebx,0x1
c000aa67:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c000aa6a:	83 c4 10             	add    esp,0x10
c000aa6d:	31 c9                	xor    ecx,ecx
c000aa6f:	89 da                	mov    edx,ebx
c000aa71:	d3 e2                	shl    edx,cl
c000aa73:	39 c2                	cmp    edx,eax
c000aa75:	7d 05                	jge    c000aa7c <sinc_set_converter+0x1b4>
c000aa77:	09 d0                	or     eax,edx
c000aa79:	41                   	inc    ecx
c000aa7a:	eb f3                	jmp    c000aa6f <sinc_set_converter+0x1a7>
c000aa7c:	31 c0                	xor    eax,eax
c000aa7e:	83 f9 15             	cmp    ecx,0x15
c000aa81:	0f 9d c0             	setge  al
c000aa84:	8d 04 c0             	lea    eax,[eax+eax*8]
c000aa87:	81 c4 5c 08 00 00    	add    esp,0x85c
c000aa8d:	5b                   	pop    ebx
c000aa8e:	5e                   	pop    esi
c000aa8f:	5f                   	pop    edi
c000aa90:	5d                   	pop    ebp
c000aa91:	c3                   	ret    

c000aa92 <is_bad_src_ratio>:
c000aa92:	83 ec 0c             	sub    esp,0xc
c000aa95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa99:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aaa0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aaa4:	dd 04 24             	fld    QWORD PTR [esp]
c000aaa7:	dd 05 e0 fd 01 c0    	fld    QWORD PTR ds:0xc001fde0
c000aaad:	de d9                	fcompp 
c000aaaf:	df e0                	fnstsw ax
c000aab1:	f6 c4 45             	test   ah,0x45
c000aab4:	74 10                	je     c000aac6 <is_bad_src_ratio+0x34>
c000aab6:	dd 04 24             	fld    QWORD PTR [esp]
c000aab9:	dc 1d e8 fd 01 c0    	fcomp  QWORD PTR ds:0xc001fde8
c000aabf:	df e0                	fnstsw ax
c000aac1:	f6 c4 45             	test   ah,0x45
c000aac4:	75 07                	jne    c000aacd <is_bad_src_ratio+0x3b>
c000aac6:	b8 01 00 00 00       	mov    eax,0x1
c000aacb:	eb 05                	jmp    c000aad2 <is_bad_src_ratio+0x40>
c000aacd:	b8 00 00 00 00       	mov    eax,0x0
c000aad2:	83 c4 0c             	add    esp,0xc
c000aad5:	c3                   	ret    

c000aad6 <fmod_one>:
c000aad6:	83 ec 2c             	sub    esp,0x2c
c000aad9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aadd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aae1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aae5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aae9:	83 ec 08             	sub    esp,0x8
c000aaec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaf0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaf4:	e8 67 3b 01 00       	call   c001e660 <lrint>
c000aaf9:	83 c4 10             	add    esp,0x10
c000aafc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ab00:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000ab04:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000ab08:	de e1                	fsubrp st(1),st
c000ab0a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ab0e:	d9 ee                	fldz   
c000ab10:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000ab14:	df e0                	fnstsw ax
c000ab16:	f6 c4 45             	test   ah,0x45
c000ab19:	75 0a                	jne    c000ab25 <fmod_one+0x4f>
c000ab1b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab1f:	d9 e8                	fld1   
c000ab21:	de c1                	faddp  st(1),st
c000ab23:	eb 04                	jmp    c000ab29 <fmod_one+0x53>
c000ab25:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab29:	83 c4 2c             	add    esp,0x2c
c000ab2c:	c3                   	ret    

c000ab2d <zoh_vari_process>:
c000ab2d:	55                   	push   ebp
c000ab2e:	57                   	push   edi
c000ab2f:	56                   	push   esi
c000ab30:	53                   	push   ebx
c000ab31:	83 ec 2c             	sub    esp,0x2c
c000ab34:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000ab38:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ab3c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ab44:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000ab48:	0f 8e 34 02 00 00    	jle    c000ad82 <zoh_vari_process+0x255>
c000ab4e:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000ab51:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000ab59:	85 db                	test   ebx,ebx
c000ab5b:	0f 84 21 02 00 00    	je     c000ad82 <zoh_vari_process+0x255>
c000ab61:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab64:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000ab68:	74 19                	je     c000ab83 <zoh_vari_process+0x56>
c000ab6a:	31 d2                	xor    edx,edx
c000ab6c:	39 c2                	cmp    edx,eax
c000ab6e:	7d 0c                	jge    c000ab7c <zoh_vari_process+0x4f>
c000ab70:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ab72:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000ab75:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ab79:	42                   	inc    edx
c000ab7a:	eb f0                	jmp    c000ab6c <zoh_vari_process+0x3f>
c000ab7c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ab83:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ab86:	0f af d0             	imul   edx,eax
c000ab89:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ab8c:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ab90:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ab97:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ab9a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000aba1:	dd 07                	fld    QWORD PTR [edi]
c000aba3:	dd 14 24             	fst    QWORD PTR [esp]
c000aba6:	50                   	push   eax
c000aba7:	50                   	push   eax
c000aba8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abab:	e8 e2 fe ff ff       	call   c000aa92 <is_bad_src_ratio>
c000abb0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000abb4:	5a                   	pop    edx
c000abb5:	59                   	pop    ecx
c000abb6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000abbb:	0f 85 b9 01 00 00    	jne    c000ad7a <zoh_vari_process+0x24d>
c000abc1:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000abc4:	d9 e8                	fld1   
c000abc6:	d8 d1                	fcom   st(1)
c000abc8:	df e0                	fnstsw ax
c000abca:	9e                   	sahf   
c000abcb:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000abcf:	0f 86 85 00 00 00    	jbe    c000ac5a <zoh_vari_process+0x12d>
c000abd5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000abd8:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000abdb:	7d 7d                	jge    c000ac5a <zoh_vari_process+0x12d>
c000abdd:	d9 c0                	fld    st(0)
c000abdf:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000abe2:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000abe5:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000abe8:	df e0                	fnstsw ax
c000abea:	9e                   	sahf   
c000abeb:	73 6d                	jae    c000ac5a <zoh_vari_process+0x12d>
c000abed:	85 d2                	test   edx,edx
c000abef:	7e 38                	jle    c000ac29 <zoh_vari_process+0xfc>
c000abf1:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000abf5:	83 ec 10             	sub    esp,0x10
c000abf8:	dd 07                	fld    QWORD PTR [edi]
c000abfa:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000abfd:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac00:	e8 3b 3a 01 00       	call   c001e640 <fabs>
c000ac05:	83 c4 10             	add    esp,0x10
c000ac08:	dc 1d 58 fe 01 c0    	fcomp  QWORD PTR ds:0xc001fe58
c000ac0e:	df e0                	fnstsw ax
c000ac10:	9e                   	sahf   
c000ac11:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac15:	76 12                	jbe    c000ac29 <zoh_vari_process+0xfc>
c000ac17:	dd 07                	fld    QWORD PTR [edi]
c000ac19:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ac1c:	d8 e1                	fsub   st,st(1)
c000ac1e:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ac21:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ac24:	de c1                	faddp  st(1),st
c000ac26:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac29:	31 c0                	xor    eax,eax
c000ac2b:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000ac2e:	7e 13                	jle    c000ac43 <zoh_vari_process+0x116>
c000ac30:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000ac34:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ac37:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ac3a:	40                   	inc    eax
c000ac3b:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000ac3e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ac41:	eb e8                	jmp    c000ac2b <zoh_vari_process+0xfe>
c000ac43:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ac47:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ac4a:	de c1                	faddp  st(1),st
c000ac4c:	e9 73 ff ff ff       	jmp    c000abc4 <zoh_vari_process+0x97>
c000ac51:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ac55:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ac58:	de c1                	faddp  st(1),st
c000ac5a:	83 ec 10             	sub    esp,0x10
c000ac5d:	dd 14 24             	fst    QWORD PTR [esp]
c000ac60:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ac64:	e8 6d fe ff ff       	call   c000aad6 <fmod_one>
c000ac69:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ac6c:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000ac70:	d8 e1                	fsub   st,st(1)
c000ac72:	d9 c9                	fxch   st(1)
c000ac74:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ac78:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac7b:	e8 e0 39 01 00       	call   c001e660 <lrint>
c000ac80:	83 c4 10             	add    esp,0x10
c000ac83:	0f af e8             	imul   ebp,eax
c000ac86:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ac89:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ac8c:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac90:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ac93:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ac96:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ac99:	0f 8d 82 00 00 00    	jge    c000ad21 <zoh_vari_process+0x1f4>
c000ac9f:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000aca3:	d9 c0                	fld    st(0)
c000aca5:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aca8:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000acac:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000acb0:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000acb4:	de d9                	fcompp 
c000acb6:	df e0                	fnstsw ax
c000acb8:	9e                   	sahf   
c000acb9:	72 66                	jb     c000ad21 <zoh_vari_process+0x1f4>
c000acbb:	85 d2                	test   edx,edx
c000acbd:	7e 38                	jle    c000acf7 <zoh_vari_process+0x1ca>
c000acbf:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000acc3:	83 ec 10             	sub    esp,0x10
c000acc6:	dd 07                	fld    QWORD PTR [edi]
c000acc8:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000accb:	dd 1c 24             	fstp   QWORD PTR [esp]
c000acce:	e8 6d 39 01 00       	call   c001e640 <fabs>
c000acd3:	83 c4 10             	add    esp,0x10
c000acd6:	dc 1d 58 fe 01 c0    	fcomp  QWORD PTR ds:0xc001fe58
c000acdc:	df e0                	fnstsw ax
c000acde:	9e                   	sahf   
c000acdf:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ace3:	76 12                	jbe    c000acf7 <zoh_vari_process+0x1ca>
c000ace5:	dd 07                	fld    QWORD PTR [edi]
c000ace7:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000acea:	d8 e1                	fsub   st,st(1)
c000acec:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000acef:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000acf2:	de c1                	faddp  st(1),st
c000acf4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000acfc:	39 d0                	cmp    eax,edx
c000acfe:	0f 8e 4d ff ff ff    	jle    c000ac51 <zoh_vari_process+0x124>
c000ad04:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ad07:	29 c1                	sub    ecx,eax
c000ad09:	89 c8                	mov    eax,ecx
c000ad0b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ad0d:	01 d0                	add    eax,edx
c000ad0f:	42                   	inc    edx
c000ad10:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000ad13:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ad16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ad19:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000ad1c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ad1f:	eb d8                	jmp    c000acf9 <zoh_vari_process+0x1cc>
c000ad21:	39 e9                	cmp    ecx,ebp
c000ad23:	7d 13                	jge    c000ad38 <zoh_vari_process+0x20b>
c000ad25:	89 e8                	mov    eax,ebp
c000ad27:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000ad2a:	29 c8                	sub    eax,ecx
c000ad2c:	99                   	cdq    
c000ad2d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ad30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ad34:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000ad38:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000ad3b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ad3e:	85 c0                	test   eax,eax
c000ad40:	7f 1b                	jg     c000ad5d <zoh_vari_process+0x230>
c000ad42:	dd 04 24             	fld    QWORD PTR [esp]
c000ad45:	dd 1f                	fstp   QWORD PTR [edi]
c000ad47:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ad4a:	99                   	cdq    
c000ad4b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ad4e:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000ad51:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ad54:	99                   	cdq    
c000ad55:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ad58:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000ad5b:	eb 25                	jmp    c000ad82 <zoh_vari_process+0x255>
c000ad5d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ad60:	31 d2                	xor    edx,edx
c000ad62:	29 e8                	sub    eax,ebp
c000ad64:	c1 e0 02             	shl    eax,0x2
c000ad67:	39 d5                	cmp    ebp,edx
c000ad69:	7e d7                	jle    c000ad42 <zoh_vari_process+0x215>
c000ad6b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ad6d:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000ad70:	83 c0 04             	add    eax,0x4
c000ad73:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ad77:	42                   	inc    edx
c000ad78:	eb ed                	jmp    c000ad67 <zoh_vari_process+0x23a>
c000ad7a:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ad82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ad86:	83 c4 2c             	add    esp,0x2c
c000ad89:	5b                   	pop    ebx
c000ad8a:	5e                   	pop    esi
c000ad8b:	5f                   	pop    edi
c000ad8c:	5d                   	pop    ebp
c000ad8d:	c3                   	ret    

c000ad8e <zoh_reset>:
c000ad8e:	83 ec 0c             	sub    esp,0xc
c000ad91:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad95:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ad98:	85 c0                	test   eax,eax
c000ad9a:	74 20                	je     c000adbc <zoh_reset+0x2e>
c000ad9c:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ad9f:	83 c0 1c             	add    eax,0x1c
c000ada2:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000ada5:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000adac:	c1 e2 02             	shl    edx,0x2
c000adaf:	51                   	push   ecx
c000adb0:	52                   	push   edx
c000adb1:	6a 00                	push   0x0
c000adb3:	50                   	push   eax
c000adb4:	e8 4f 58 ff ff       	call   c0000608 <memset>
c000adb9:	83 c4 10             	add    esp,0x10
c000adbc:	83 c4 0c             	add    esp,0xc
c000adbf:	c3                   	ret    

c000adc0 <zoh_get_name>:
c000adc0:	31 c0                	xor    eax,eax
c000adc2:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000adc7:	75 05                	jne    c000adce <zoh_get_name+0xe>
c000adc9:	b8 34 85 03 c0       	mov    eax,0xc0038534
c000adce:	c3                   	ret    

c000adcf <zoh_get_description>:
c000adcf:	31 c0                	xor    eax,eax
c000add1:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000add6:	75 05                	jne    c000addd <zoh_get_description+0xe>
c000add8:	b8 45 85 03 c0       	mov    eax,0xc0038545
c000addd:	c3                   	ret    

c000adde <zoh_set_converter>:
c000adde:	53                   	push   ebx
c000addf:	b8 0a 00 00 00       	mov    eax,0xa
c000ade4:	83 ec 08             	sub    esp,0x8
c000ade7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000adeb:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000adf0:	75 6e                	jne    c000ae60 <zoh_set_converter+0x82>
c000adf2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000adf5:	85 c0                	test   eax,eax
c000adf7:	74 13                	je     c000ae0c <zoh_set_converter+0x2e>
c000adf9:	83 ec 0c             	sub    esp,0xc
c000adfc:	50                   	push   eax
c000adfd:	e8 d9 23 00 00       	call   c000d1db <free>
c000ae02:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ae09:	83 c4 10             	add    esp,0x10
c000ae0c:	50                   	push   eax
c000ae0d:	50                   	push   eax
c000ae0e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ae11:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ae18:	50                   	push   eax
c000ae19:	6a 01                	push   0x1
c000ae1b:	e8 db 23 00 00       	call   c000d1fb <calloc>
c000ae20:	83 c4 10             	add    esp,0x10
c000ae23:	89 c2                	mov    edx,eax
c000ae25:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000ae28:	85 d2                	test   edx,edx
c000ae2a:	b8 01 00 00 00       	mov    eax,0x1
c000ae2f:	74 2f                	je     c000ae60 <zoh_set_converter+0x82>
c000ae31:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000ae37:	83 ec 0c             	sub    esp,0xc
c000ae3a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ae3d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000ae40:	c7 43 24 2d ab 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ab2d
c000ae47:	c7 43 20 2d ab 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ab2d
c000ae4e:	c7 43 28 8e ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad8e
c000ae55:	53                   	push   ebx
c000ae56:	e8 33 ff ff ff       	call   c000ad8e <zoh_reset>
c000ae5b:	83 c4 10             	add    esp,0x10
c000ae5e:	31 c0                	xor    eax,eax
c000ae60:	83 c4 08             	add    esp,0x8
c000ae63:	5b                   	pop    ebx
c000ae64:	c3                   	ret    
c000ae65:	90                   	nop

c000ae66 <Computer::close(int, int, void*)>:
c000ae66:	57                   	push   edi
c000ae67:	56                   	push   esi
c000ae68:	53                   	push   ebx
c000ae69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae6d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ae71:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ae75:	83 ec 0c             	sub    esp,0xc
c000ae78:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000ae7e:	e8 7d 87 00 00       	call   c0013600 <Device::closeAll()>
c000ae83:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ae89:	83 c4 10             	add    esp,0x10
c000ae8c:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae8e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ae92:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ae9a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ae9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aea2:	5b                   	pop    ebx
c000aea3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000aea6:	5e                   	pop    esi
c000aea7:	5f                   	pop    edi
c000aea8:	ff e0                	jmp    eax

c000aeaa <Computer::Computer()>:
c000aeaa:	83 ec 0c             	sub    esp,0xc
c000aead:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb1:	83 ec 08             	sub    esp,0x8
c000aeb4:	68 7c 85 03 c0       	push   0xc003857c
c000aeb9:	50                   	push   eax
c000aeba:	e8 bb 87 00 00       	call   c001367a <Device::Device(char const*)>
c000aebf:	83 c4 10             	add    esp,0x10
c000aec2:	ba f8 85 03 c0       	mov    edx,0xc00385f8
c000aec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aecb:	89 10                	mov    DWORD PTR [eax],edx
c000aecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed1:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000aedb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aedf:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000aee9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeed:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000aef3:	83 ca 04             	or     edx,0x4
c000aef6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000aefc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af00:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af06:	0f b6 d0             	movzx  edx,al
c000af09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af0d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000af14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af18:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af1e:	0f b6 d0             	movzx  edx,al
c000af21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af25:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000af2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af2e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af34:	8d 50 01             	lea    edx,[eax+0x1]
c000af37:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af3b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af41:	0f b6 d0             	movzx  edx,al
c000af44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af48:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af4c:	83 e1 3f             	and    ecx,0x3f
c000af4f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af57:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af5d:	0f b6 d0             	movzx  edx,al
c000af60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af64:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000af6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af6f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af75:	0f b6 d0             	movzx  edx,al
c000af78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af7c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000af81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af85:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af8b:	8d 50 01             	lea    edx,[eax+0x1]
c000af8e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af92:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af98:	0f b6 d0             	movzx  edx,al
c000af9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af9f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000afa3:	83 e1 3f             	and    ecx,0x3f
c000afa6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000afaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afae:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000afb4:	0f b6 d0             	movzx  edx,al
c000afb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afbb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000afc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000afcc:	0f b6 d0             	movzx  edx,al
c000afcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afd3:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000afd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afdc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000afe2:	8d 50 01             	lea    edx,[eax+0x1]
c000afe5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000afe9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000afef:	0f b6 d0             	movzx  edx,al
c000aff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000affa:	83 e1 3f             	and    ecx,0x3f
c000affd:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000b001:	90                   	nop
c000b002:	83 c4 0c             	add    esp,0xc
c000b005:	c3                   	ret    

c000b006 <Computer::setBootMessage(char const*)>:
c000b006:	c3                   	ret    
c000b007:	90                   	nop

c000b008 <Computer::start()>:
c000b008:	56                   	push   esi
c000b009:	53                   	push   ebx
c000b00a:	50                   	push   eax
c000b00b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b00f:	e8 5e 30 00 00       	call   c000e072 <lockScheduler()>
c000b014:	e8 8d 33 00 00       	call   c000e3a6 <schedule()>
c000b019:	e8 56 30 00 00       	call   c000e074 <unlockScheduler()>
c000b01e:	fb                   	sti    
c000b01f:	83 ec 0c             	sub    esp,0xc
c000b022:	68 3b 07 00 00       	push   0x73b
c000b027:	e8 54 71 00 00       	call   c0012180 <operator new(unsigned long)>
c000b02c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b033:	89 c6                	mov    esi,eax
c000b035:	ff 35 5c b9 03 c0    	push   DWORD PTR ds:0xc003b95c
c000b03b:	68 85 85 03 c0       	push   0xc0038585
c000b040:	6a 01                	push   0x1
c000b042:	50                   	push   eax
c000b043:	e8 8a 2e 00 00       	call   c000ded2 <Process::Process(bool, char const*, Process*, char**)>
c000b048:	83 c4 20             	add    esp,0x20
c000b04b:	68 ff 00 00 00       	push   0xff
c000b050:	6a 00                	push   0x0
c000b052:	68 3f c6 00 c0       	push   0xc000c63f
c000b057:	56                   	push   esi
c000b058:	e8 3f 31 00 00       	call   c000e19c <Process::createThread(void (*)(void*), void*, int)>
c000b05d:	6a 7a                	push   0x7a
c000b05f:	6a 00                	push   0x0
c000b061:	68 e2 eb 00 c0       	push   0xc000ebe2
c000b066:	ff 35 5c b9 03 c0    	push   DWORD PTR ds:0xc003b95c
c000b06c:	e8 2b 31 00 00       	call   c000e19c <Process::createThread(void (*)(void*), void*, int)>
c000b071:	83 c4 20             	add    esp,0x20
c000b074:	a3 10 b9 03 c0       	mov    ds:0xc003b910,eax
c000b079:	c6 05 0d b7 03 c0 01 	mov    BYTE PTR ds:0xc003b70d,0x1
c000b080:	e8 55 73 00 00       	call   c00123da <initVFS()>
c000b085:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b08b:	8b 10                	mov    edx,DWORD PTR [eax]
c000b08d:	6a 00                	push   0x0
c000b08f:	6a 00                	push   0x0
c000b091:	6a 00                	push   0x0
c000b093:	50                   	push   eax
c000b094:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b097:	e8 e3 48 00 00       	call   c000f97f <setupSystemCalls()>
c000b09c:	e8 37 7e 00 00       	call   c0012ed8 <loadClockSettings()>
c000b0a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0a4:	e8 2b 85 00 00       	call   c00135d4 <Device::loadDriversForAll()>
c000b0a9:	c7 04 24 92 85 03 c0 	mov    DWORD PTR [esp],0xc0038592
c000b0b0:	8b 1d 08 b7 03 c0    	mov    ebx,DWORD PTR ds:0xc003b708
c000b0b6:	e8 f6 12 00 00       	call   c000c3b1 <loadDLL(char const*)>
c000b0bb:	5a                   	pop    edx
c000b0bc:	59                   	pop    ecx
c000b0bd:	53                   	push   ebx
c000b0be:	50                   	push   eax
c000b0bf:	e8 b6 13 00 00       	call   c000c47a <executeDLL(unsigned long, void*)>
c000b0c4:	c7 04 24 f4 9c 03 c0 	mov    DWORD PTR [esp],0xc0039cf4
c000b0cb:	e8 00 1b 00 00       	call   c000cbd0 <kprintf(char const*, ...)>
c000b0d0:	83 c4 10             	add    esp,0x10
c000b0d3:	83 ec 0c             	sub    esp,0xc
c000b0d6:	6a 02                	push   0x2
c000b0d8:	e8 94 35 00 00       	call   c000e671 <blockTask(TaskState)>
c000b0dd:	83 c4 10             	add    esp,0x10
c000b0e0:	eb f1                	jmp    c000b0d3 <Computer::start()+0xcb>

c000b0e2 <firstTask()>:
c000b0e2:	83 ec 18             	sub    esp,0x18
c000b0e5:	ff 35 08 b7 03 c0    	push   DWORD PTR ds:0xc003b708
c000b0eb:	e8 18 ff ff ff       	call   c000b008 <Computer::start()>

c000b0f0 <Computer::detectFeatures()>:
c000b0f0:	55                   	push   ebp
c000b0f1:	57                   	push   edi
c000b0f2:	56                   	push   esi
c000b0f3:	53                   	push   ebx
c000b0f4:	83 ec 1c             	sub    esp,0x1c
c000b0f7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b0fb:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000b105:	e8 b5 51 ff ff       	call   c00002bf <detectCPUID>
c000b10a:	85 c0                	test   eax,eax
c000b10c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b112:	0f 95 c2             	setne  dl
c000b115:	83 e0 fd             	and    eax,0xfffffffd
c000b118:	d1 e2                	shl    edx,1
c000b11a:	09 d0                	or     eax,edx
c000b11c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b122:	a8 02                	test   al,0x2
c000b124:	75 46                	jne    c000b16c <Computer::detectFeatures()+0x7c>
c000b126:	f6 05 b5 b8 03 c0 04 	test   BYTE PTR ds:0xc003b8b5,0x4
c000b12d:	74 07                	je     c000b136 <Computer::detectFeatures()+0x46>
c000b12f:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b136:	e8 ab 2f 01 00       	call   c001e0e6 <x87Detect>
c000b13b:	83 e0 01             	and    eax,0x1
c000b13e:	c1 e0 04             	shl    eax,0x4
c000b141:	88 c2                	mov    dl,al
c000b143:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b149:	83 e0 ef             	and    eax,0xffffffef
c000b14c:	09 d0                	or     eax,edx
c000b14e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b154:	a8 10                	test   al,0x10
c000b156:	0f 85 10 01 00 00    	jne    c000b26c <Computer::detectFeatures()+0x17c>
c000b15c:	84 c0                	test   al,al
c000b15e:	0f 88 2b 01 00 00    	js     c000b28f <Computer::detectFeatures()+0x19f>
c000b164:	83 c4 1c             	add    esp,0x1c
c000b167:	5b                   	pop    ebx
c000b168:	5e                   	pop    esi
c000b169:	5f                   	pop    edi
c000b16a:	5d                   	pop    ebp
c000b16b:	c3                   	ret    
c000b16c:	83 ec 0c             	sub    esp,0xc
c000b16f:	6a 20                	push   0x20
c000b171:	e8 89 bc 00 00       	call   c0016dff <cpuidCheckEDX(unsigned int)>
c000b176:	83 e0 01             	and    eax,0x1
c000b179:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b180:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b186:	83 e0 f7             	and    eax,0xfffffff7
c000b189:	09 d0                	or     eax,edx
c000b18b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b191:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b198:	e8 62 bc 00 00       	call   c0016dff <cpuidCheckEDX(unsigned int)>
c000b19d:	83 e0 01             	and    eax,0x1
c000b1a0:	88 c2                	mov    dl,al
c000b1a2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b1a8:	83 e0 fe             	and    eax,0xfffffffe
c000b1ab:	09 d0                	or     eax,edx
c000b1ad:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b1b3:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b1ba:	e8 40 bc 00 00       	call   c0016dff <cpuidCheckEDX(unsigned int)>
c000b1bf:	c1 e0 07             	shl    eax,0x7
c000b1c2:	88 c2                	mov    dl,al
c000b1c4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b1ca:	83 e0 7f             	and    eax,0x7f
c000b1cd:	09 d0                	or     eax,edx
c000b1cf:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b1d5:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b1dc:	e8 1e bc 00 00       	call   c0016dff <cpuidCheckEDX(unsigned int)>
c000b1e1:	83 c4 10             	add    esp,0x10
c000b1e4:	83 e0 01             	and    eax,0x1
c000b1e7:	c1 e0 05             	shl    eax,0x5
c000b1ea:	88 c2                	mov    dl,al
c000b1ec:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b1f2:	83 e0 df             	and    eax,0xffffffdf
c000b1f5:	09 d0                	or     eax,edx
c000b1f7:	f7 05 b4 b8 03 c0 01 04 00 00 	test   DWORD PTR ds:0xc003b8b4,0x401
c000b201:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b207:	0f 84 a8 00 00 00    	je     c000b2b5 <Computer::detectFeatures()+0x1c5>
c000b20d:	83 ec 0c             	sub    esp,0xc
c000b210:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b217:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b21b:	50                   	push   eax
c000b21c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b220:	55                   	push   ebp
c000b221:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b225:	57                   	push   edi
c000b226:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b22a:	56                   	push   esi
c000b22b:	68 00 00 00 80       	push   0x80000000
c000b230:	e8 47 bb 00 00       	call   c0016d7c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b235:	83 c4 20             	add    esp,0x20
c000b238:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b23f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b243:	0f 86 dd fe ff ff    	jbe    c000b126 <Computer::detectFeatures()+0x36>
c000b249:	83 ec 0c             	sub    esp,0xc
c000b24c:	50                   	push   eax
c000b24d:	55                   	push   ebp
c000b24e:	57                   	push   edi
c000b24f:	56                   	push   esi
c000b250:	68 01 00 00 80       	push   0x80000001
c000b255:	e8 22 bb 00 00       	call   c0016d7c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b25a:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b264:	83 c4 20             	add    esp,0x20
c000b267:	e9 ba fe ff ff       	jmp    c000b126 <Computer::detectFeatures()+0x36>
c000b26c:	e8 2f 2e 01 00       	call   c001e0a0 <sseDetect>
c000b271:	88 c2                	mov    dl,al
c000b273:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b279:	c1 e2 07             	shl    edx,0x7
c000b27c:	83 e0 7f             	and    eax,0x7f
c000b27f:	09 d0                	or     eax,edx
c000b281:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b287:	84 c0                	test   al,al
c000b289:	0f 89 d5 fe ff ff    	jns    c000b164 <Computer::detectFeatures()+0x74>
c000b28f:	e8 fc 2d 01 00       	call   c001e090 <avxDetect>
c000b294:	83 e0 01             	and    eax,0x1
c000b297:	c1 e0 05             	shl    eax,0x5
c000b29a:	88 c2                	mov    dl,al
c000b29c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b2a2:	83 e0 df             	and    eax,0xffffffdf
c000b2a5:	09 d0                	or     eax,edx
c000b2a7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b2ad:	83 c4 1c             	add    esp,0x1c
c000b2b0:	5b                   	pop    ebx
c000b2b1:	5e                   	pop    esi
c000b2b2:	5f                   	pop    edi
c000b2b3:	5d                   	pop    ebp
c000b2b4:	c3                   	ret    
c000b2b5:	83 ec 0c             	sub    esp,0xc
c000b2b8:	68 00 02 00 00       	push   0x200
c000b2bd:	e8 3d bb 00 00       	call   c0016dff <cpuidCheckEDX(unsigned int)>
c000b2c2:	83 c4 10             	add    esp,0x10
c000b2c5:	e9 43 ff ff ff       	jmp    c000b20d <Computer::detectFeatures()+0x11d>

c000b2ca <Computer::displayFeatures()>:
c000b2ca:	c3                   	ret    
c000b2cb:	90                   	nop

c000b2cc <Computer::rdmsr(unsigned int)>:
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2d3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b2da:	74 0a                	je     c000b2e6 <Computer::rdmsr(unsigned int)+0x1a>
c000b2dc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b2e0:	0f 32                	rdmsr  
c000b2e2:	83 c4 0c             	add    esp,0xc
c000b2e5:	c3                   	ret    
c000b2e6:	83 ec 0c             	sub    esp,0xc
c000b2e9:	68 ae 85 03 c0       	push   0xc00385ae
c000b2ee:	e8 fb 19 00 00       	call   c000ccee <panic(char const*)>
c000b2f3:	83 c4 10             	add    esp,0x10
c000b2f6:	eb e4                	jmp    c000b2dc <Computer::rdmsr(unsigned int)+0x10>

c000b2f8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b2f8:	57                   	push   edi
c000b2f9:	56                   	push   esi
c000b2fa:	52                   	push   edx
c000b2fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2ff:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b303:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b307:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b30e:	74 0e                	je     c000b31e <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b310:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b314:	89 f0                	mov    eax,esi
c000b316:	89 fa                	mov    edx,edi
c000b318:	0f 30                	wrmsr  
c000b31a:	58                   	pop    eax
c000b31b:	5e                   	pop    esi
c000b31c:	5f                   	pop    edi
c000b31d:	c3                   	ret    
c000b31e:	83 ec 0c             	sub    esp,0xc
c000b321:	68 b4 85 03 c0       	push   0xc00385b4
c000b326:	e8 c3 19 00 00       	call   c000ccee <panic(char const*)>
c000b32b:	83 c4 10             	add    esp,0x10
c000b32e:	eb e0                	jmp    c000b310 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b330 <Computer::nmiEnabled()>:
c000b330:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b334:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b33a:	c3                   	ret    
c000b33b:	90                   	nop

c000b33c <Computer::readCMOS(unsigned char)>:
c000b33c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b340:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b347:	19 c0                	sbb    eax,eax
c000b349:	83 e0 80             	and    eax,0xffffff80
c000b34c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b350:	e6 70                	out    0x70,al
c000b352:	e4 71                	in     al,0x71
c000b354:	c3                   	ret    
c000b355:	90                   	nop

c000b356 <Computer::enableNMI(bool)>:
c000b356:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b35a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b35e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b364:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b36c:	eb ce                	jmp    c000b33c <Computer::readCMOS(unsigned char)>

c000b36e <Computer::open(int, int, void*)>:
c000b36e:	56                   	push   esi
c000b36f:	53                   	push   ebx
c000b370:	83 ec 10             	sub    esp,0x10
c000b373:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b377:	f6 05 b4 b8 03 c0 04 	test   BYTE PTR ds:0xc003b8b4,0x4
c000b37e:	68 68 22 00 00       	push   0x2268
c000b383:	0f 94 05 40 ab 03 c0 	sete   BYTE PTR ds:0xc003ab40
c000b38a:	e8 f1 6d 00 00       	call   c0012180 <operator new(unsigned long)>
c000b38f:	89 04 24             	mov    DWORD PTR [esp],eax
c000b392:	89 c6                	mov    esi,eax
c000b394:	e8 25 b1 00 00       	call   c00164be <ACPI::ACPI()>
c000b399:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b39f:	58                   	pop    eax
c000b3a0:	5a                   	pop    edx
c000b3a1:	56                   	push   esi
c000b3a2:	53                   	push   ebx
c000b3a3:	e8 e2 80 00 00       	call   c001348a <Device::addChild(Device*)>
c000b3a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3ab:	e8 40 fd ff ff       	call   c000b0f0 <Computer::detectFeatures()>
c000b3b0:	59                   	pop    ecx
c000b3b1:	5e                   	pop    esi
c000b3b2:	6a 01                	push   0x1
c000b3b4:	53                   	push   ebx
c000b3b5:	e8 9c ff ff ff       	call   c000b356 <Computer::enableNMI(bool)>
c000b3ba:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b3c1:	e8 ba 6d 00 00       	call   c0012180 <operator new(unsigned long)>
c000b3c6:	89 04 24             	mov    DWORD PTR [esp],eax
c000b3c9:	89 c6                	mov    esi,eax
c000b3cb:	e8 fa ba 00 00       	call   c0016eca <CPU::CPU()>
c000b3d0:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b3d6:	58                   	pop    eax
c000b3d7:	5a                   	pop    edx
c000b3d8:	56                   	push   esi
c000b3d9:	53                   	push   ebx
c000b3da:	e8 ab 80 00 00       	call   c001348a <Device::addChild(Device*)>
c000b3df:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b3e5:	8b 10                	mov    edx,DWORD PTR [eax]
c000b3e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b3eb:	6a 00                	push   0x0
c000b3ed:	6a 00                	push   0x0
c000b3ef:	50                   	push   eax
c000b3f0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b3f3:	83 c4 20             	add    esp,0x20
c000b3f6:	e8 f7 85 00 00       	call   c00139f2 <setupFPU()>
c000b3fb:	83 ec 08             	sub    esp,0x8
c000b3fe:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b404:	50                   	push   eax
c000b405:	53                   	push   ebx
c000b406:	e8 7f 80 00 00       	call   c001348a <Device::addChild(Device*)>
c000b40b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b411:	8b 10                	mov    edx,DWORD PTR [eax]
c000b413:	6a 00                	push   0x0
c000b415:	6a 00                	push   0x0
c000b417:	6a 00                	push   0x0
c000b419:	50                   	push   eax
c000b41a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b41d:	83 c4 14             	add    esp,0x14
c000b420:	68 e2 b0 00 c0       	push   0xc000b0e2
c000b425:	e8 72 2e 00 00       	call   c000e29c <setupMultitasking(void (*)())>
c000b42a:	83 c4 14             	add    esp,0x14
c000b42d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b432:	5b                   	pop    ebx
c000b433:	5e                   	pop    esi
c000b434:	c3                   	ret    
c000b435:	90                   	nop

c000b436 <Computer::disableNMI()>:
c000b436:	6a 00                	push   0x0
c000b438:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b43c:	e8 15 ff ff ff       	call   c000b356 <Computer::enableNMI(bool)>
c000b441:	58                   	pop    eax
c000b442:	5a                   	pop    edx
c000b443:	c3                   	ret    

c000b444 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b444:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b448:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b44f:	19 c0                	sbb    eax,eax
c000b451:	83 e0 80             	and    eax,0xffffff80
c000b454:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b458:	e6 70                	out    0x70,al
c000b45a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b45e:	e6 71                	out    0x71,al
c000b460:	c3                   	ret    
c000b461:	90                   	nop

c000b462 <Computer::handleNMI()>:
c000b462:	56                   	push   esi
c000b463:	53                   	push   ebx
c000b464:	83 ec 10             	sub    esp,0x10
c000b467:	e4 92                	in     al,0x92
c000b469:	89 c6                	mov    esi,eax
c000b46b:	e4 61                	in     al,0x61
c000b46d:	68 ba 85 03 c0       	push   0xc00385ba
c000b472:	88 c3                	mov    bl,al
c000b474:	e8 57 17 00 00       	call   c000cbd0 <kprintf(char const*, ...)>
c000b479:	83 c4 10             	add    esp,0x10
c000b47c:	83 e6 10             	and    esi,0x10
c000b47f:	75 0d                	jne    c000b48e <Computer::handleNMI()+0x2c>
c000b481:	f6 c3 40             	test   bl,0x40
c000b484:	75 1d                	jne    c000b4a3 <Computer::handleNMI()+0x41>
c000b486:	84 db                	test   bl,bl
c000b488:	78 2d                	js     c000b4b7 <Computer::handleNMI()+0x55>
c000b48a:	58                   	pop    eax
c000b48b:	5b                   	pop    ebx
c000b48c:	5e                   	pop    esi
c000b48d:	c3                   	ret    
c000b48e:	83 ec 0c             	sub    esp,0xc
c000b491:	68 cb 85 03 c0       	push   0xc00385cb
c000b496:	e8 53 18 00 00       	call   c000ccee <panic(char const*)>
c000b49b:	83 c4 10             	add    esp,0x10
c000b49e:	f6 c3 40             	test   bl,0x40
c000b4a1:	74 e3                	je     c000b486 <Computer::handleNMI()+0x24>
c000b4a3:	83 ec 0c             	sub    esp,0xc
c000b4a6:	68 d8 85 03 c0       	push   0xc00385d8
c000b4ab:	e8 3e 18 00 00       	call   c000ccee <panic(char const*)>
c000b4b0:	83 c4 10             	add    esp,0x10
c000b4b3:	84 db                	test   bl,bl
c000b4b5:	79 d3                	jns    c000b48a <Computer::handleNMI()+0x28>
c000b4b7:	c7 44 24 10 e2 85 03 c0 	mov    DWORD PTR [esp+0x10],0xc00385e2
c000b4bf:	5a                   	pop    edx
c000b4c0:	5b                   	pop    ebx
c000b4c1:	5e                   	pop    esi
c000b4c2:	e9 27 18 00 00       	jmp    c000ccee <panic(char const*)>
c000b4c7:	90                   	nop

c000b4c8 <Computer::setDiskActivityLight(int, bool)>:
c000b4c8:	56                   	push   esi
c000b4c9:	53                   	push   ebx
c000b4ca:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b4ce:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b4d3:	77 1b                	ja     c000b4f0 <Computer::setDiskActivityLight(int, bool)+0x28>
c000b4d5:	e4 92                	in     al,0x92
c000b4d7:	bb 40 00 00 00       	mov    ebx,0x40
c000b4dc:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b4e0:	89 da                	mov    edx,ebx
c000b4e2:	d3 e2                	shl    edx,cl
c000b4e4:	89 f1                	mov    ecx,esi
c000b4e6:	f7 d2                	not    edx
c000b4e8:	d3 e3                	shl    ebx,cl
c000b4ea:	21 d0                	and    eax,edx
c000b4ec:	09 d8                	or     eax,ebx
c000b4ee:	e6 92                	out    0x92,al
c000b4f0:	5b                   	pop    ebx
c000b4f1:	5e                   	pop    esi
c000b4f2:	c3                   	ret    

c000b4f3 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c000b4f3:	55                   	push   ebp
c000b4f4:	89 e5                	mov    ebp,esp
c000b4f6:	57                   	push   edi
c000b4f7:	56                   	push   esi
c000b4f8:	53                   	push   ebx
c000b4f9:	81 ec 2c 10 00 00    	sub    esp,0x102c
c000b4ff:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c000b502:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c000b505:	85 c0                	test   eax,eax
c000b507:	0f 95 c1             	setne  cl
c000b50a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000b50e:	0f 94 c2             	sete   dl
c000b511:	84 d1                	test   cl,dl
c000b513:	74 26                	je     c000b53b <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c000b515:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c000b51c:	74 1d                	je     c000b53b <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c000b51e:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c000b521:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c000b527:	89 d6                	mov    esi,edx
c000b529:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b52f:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c000b535:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c000b538:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c000b53b:	83 ec 0c             	sub    esp,0xc
c000b53e:	05 ff 0f 00 00       	add    eax,0xfff
c000b543:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000b546:	6a 01                	push   0x1
c000b548:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c000b54e:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c000b554:	e8 96 5a 00 00       	call   c0010fef <Virt::allocateKernelVirtualPages(int)>
c000b559:	83 c4 10             	add    esp,0x10
c000b55c:	89 c6                	mov    esi,eax
c000b55e:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c000b564:	0f 86 21 01 00 00    	jbe    c000b68b <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c000b56a:	c1 eb 0c             	shr    ebx,0xc
c000b56d:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c000b577:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c000b57d:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000b580:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000b583:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c000b589:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c000b58c:	29 d8                	sub    eax,ebx
c000b58e:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c000b594:	0f 83 f4 00 00 00    	jae    c000b68e <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c000b59a:	83 ec 0c             	sub    esp,0xc
c000b59d:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c000b5a3:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000b5a6:	3d 00 10 00 00       	cmp    eax,0x1000
c000b5ab:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000b5ad:	52                   	push   edx
c000b5ae:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c000b5b4:	52                   	push   edx
c000b5b5:	76 05                	jbe    c000b5bc <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c000b5b7:	b8 00 10 00 00       	mov    eax,0x1000
c000b5bc:	31 d2                	xor    edx,edx
c000b5be:	52                   	push   edx
c000b5bf:	50                   	push   eax
c000b5c0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000b5c3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b5c6:	83 c4 20             	add    esp,0x20
c000b5c9:	85 c0                	test   eax,eax
c000b5cb:	74 1f                	je     c000b5ec <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c000b5cd:	51                   	push   ecx
c000b5ce:	51                   	push   ecx
c000b5cf:	50                   	push   eax
c000b5d0:	68 1c 86 03 c0       	push   0xc003861c
c000b5d5:	e8 f6 15 00 00       	call   c000cbd0 <kprintf(char const*, ...)>
c000b5da:	89 34 24             	mov    DWORD PTR [esp],esi
c000b5dd:	e8 43 5d 00 00       	call   c0011325 <Virt::freeKernelVirtualPages(unsigned long)>
c000b5e2:	83 c4 10             	add    esp,0x10
c000b5e5:	31 c0                	xor    eax,eax
c000b5e7:	e9 7c 01 00 00       	jmp    c000b768 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c000b5ec:	e8 81 2a 00 00       	call   c000e072 <lockScheduler()>
c000b5f1:	e8 7f 21 00 00       	call   c000d775 <Phys::allocatePage()>
c000b5f6:	6a 07                	push   0x7
c000b5f8:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c000b5fe:	56                   	push   esi
c000b5ff:	50                   	push   eax
c000b600:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b606:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c000b609:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c000b60f:	e8 12 60 00 00       	call   c0011626 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b614:	83 c4 0c             	add    esp,0xc
c000b617:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b61d:	6a 00                	push   0x0
c000b61f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b625:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c000b628:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c000b62e:	e8 51 5e 00 00       	call   c0011484 <VAS::mapOtherVASIn(bool, VAS*)>
c000b633:	58                   	pop    eax
c000b634:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c000b63a:	5a                   	pop    edx
c000b63b:	68 07 04 00 00       	push   0x407
c000b640:	53                   	push   ebx
c000b641:	81 c3 00 10 00 00    	add    ebx,0x1000
c000b647:	50                   	push   eax
c000b648:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b64e:	6a 00                	push   0x0
c000b650:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b655:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b658:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000b65e:	e8 c3 66 00 00       	call   c0011d26 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c000b663:	83 c4 1c             	add    esp,0x1c
c000b666:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c000b66c:	68 00 10 00 00       	push   0x1000
c000b671:	50                   	push   eax
c000b672:	56                   	push   esi
c000b673:	e8 5a 4f ff ff       	call   c00005d2 <memcpy>
c000b678:	e8 f7 29 00 00       	call   c000e074 <unlockScheduler()>
c000b67d:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c000b683:	83 c4 10             	add    esp,0x10
c000b686:	e9 f5 fe ff ff       	jmp    c000b580 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c000b68b:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000b68e:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c000b698:	0f 86 bc 00 00 00    	jbe    c000b75a <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c000b69e:	e8 cf 29 00 00       	call   c000e072 <lockScheduler()>
c000b6a3:	51                   	push   ecx
c000b6a4:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b6aa:	6a 00                	push   0x0
c000b6ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b6b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b6b4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000b6ba:	e8 c5 5d 00 00       	call   c0011484 <VAS::mapOtherVASIn(bool, VAS*)>
c000b6bf:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c000b6c5:	83 c4 10             	add    esp,0x10
c000b6c8:	c1 e8 0c             	shr    eax,0xc
c000b6cb:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c000b6d5:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c000b6db:	e8 95 20 00 00       	call   c000d775 <Phys::allocatePage()>
c000b6e0:	6a 07                	push   0x7
c000b6e2:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c000b6e8:	56                   	push   esi
c000b6e9:	50                   	push   eax
c000b6ea:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000b6f0:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000b6f3:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c000b6f9:	e8 28 5f 00 00       	call   c0011626 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b6fe:	58                   	pop    eax
c000b6ff:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c000b705:	5a                   	pop    edx
c000b706:	68 07 04 00 00       	push   0x407
c000b70b:	53                   	push   ebx
c000b70c:	81 c3 00 10 00 00    	add    ebx,0x1000
c000b712:	50                   	push   eax
c000b713:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b719:	6a 00                	push   0x0
c000b71b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b720:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b723:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000b729:	e8 f8 65 00 00       	call   c0011d26 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c000b72e:	83 c4 1c             	add    esp,0x1c
c000b731:	68 00 10 00 00       	push   0x1000
c000b736:	6a 00                	push   0x0
c000b738:	56                   	push   esi
c000b739:	e8 ca 4e ff ff       	call   c0000608 <memset>
c000b73e:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c000b744:	83 c4 10             	add    esp,0x10
c000b747:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c000b74d:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c000b753:	77 86                	ja     c000b6db <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c000b755:	e8 1a 29 00 00       	call   c000e074 <unlockScheduler()>
c000b75a:	83 ec 0c             	sub    esp,0xc
c000b75d:	56                   	push   esi
c000b75e:	e8 c2 5b 00 00       	call   c0011325 <Virt::freeKernelVirtualPages(unsigned long)>
c000b763:	83 c4 10             	add    esp,0x10
c000b766:	b0 01                	mov    al,0x1
c000b768:	8d 65 f4             	lea    esp,[ebp-0xc]
c000b76b:	5b                   	pop    ebx
c000b76c:	5e                   	pop    esi
c000b76d:	5f                   	pop    edi
c000b76e:	5d                   	pop    ebp
c000b76f:	c3                   	ret    

c000b770 <loadProgramIntoMemory(Process*, char const*)>:
c000b770:	55                   	push   ebp
c000b771:	57                   	push   edi
c000b772:	56                   	push   esi
c000b773:	53                   	push   ebx
c000b774:	83 ec 48             	sub    esp,0x48
c000b777:	68 14 01 00 00       	push   0x114
c000b77c:	e8 ff 69 00 00       	call   c0012180 <operator new(unsigned long)>
c000b781:	83 c4 0c             	add    esp,0xc
c000b784:	89 c6                	mov    esi,eax
c000b786:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b78a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b78e:	50                   	push   eax
c000b78f:	e8 1a 6e 00 00       	call   c00125ae <File::File(char const*, Process*)>
c000b794:	58                   	pop    eax
c000b795:	5a                   	pop    edx
c000b796:	6a 01                	push   0x1
c000b798:	56                   	push   esi
c000b799:	e8 74 6e 00 00       	call   c0012612 <File::open(FileOpenMode)>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	85 c0                	test   eax,eax
c000b7a3:	0f 85 47 01 00 00    	jne    c000b8f0 <loadProgramIntoMemory(Process*, char const*)+0x180>
c000b7a9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b7b1:	83 ec 0c             	sub    esp,0xc
c000b7b4:	6a 34                	push   0x34
c000b7b6:	e8 10 1a 00 00       	call   c000d1cb <malloc>
c000b7bb:	89 c3                	mov    ebx,eax
c000b7bd:	58                   	pop    eax
c000b7be:	8b 06                	mov    eax,DWORD PTR [esi]
c000b7c0:	8d 7c 24 38          	lea    edi,[esp+0x38]
c000b7c4:	57                   	push   edi
c000b7c5:	53                   	push   ebx
c000b7c6:	6a 00                	push   0x0
c000b7c8:	6a 34                	push   0x34
c000b7ca:	56                   	push   esi
c000b7cb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b7ce:	83 c4 20             	add    esp,0x20
c000b7d1:	85 c0                	test   eax,eax
c000b7d3:	0f 85 17 01 00 00    	jne    c000b8f0 <loadProgramIntoMemory(Process*, char const*)+0x180>
c000b7d9:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c000b7df:	0f 85 0b 01 00 00    	jne    c000b8f0 <loadProgramIntoMemory(Process*, char const*)+0x180>
c000b7e5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000b7e8:	85 c0                	test   eax,eax
c000b7ea:	0f 84 00 01 00 00    	je     c000b8f0 <loadProgramIntoMemory(Process*, char const*)+0x180>
c000b7f0:	31 d2                	xor    edx,edx
c000b7f2:	55                   	push   ebp
c000b7f3:	52                   	push   edx
c000b7f4:	50                   	push   eax
c000b7f5:	56                   	push   esi
c000b7f6:	e8 d5 6e 00 00       	call   c00126d0 <File::seek(unsigned long long)>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	85 c0                	test   eax,eax
c000b800:	0f 85 ea 00 00 00    	jne    c000b8f0 <loadProgramIntoMemory(Process*, char const*)+0x180>
c000b806:	83 ec 0c             	sub    esp,0xc
c000b809:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b80c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c000b810:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b814:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c000b818:	0f af c2             	imul   eax,edx
c000b81b:	50                   	push   eax
c000b81c:	e8 aa 19 00 00       	call   c000d1cb <malloc>
c000b821:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b824:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b828:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b82a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b82e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c000b832:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c000b836:	0f af c2             	imul   eax,edx
c000b839:	99                   	cdq    
c000b83a:	52                   	push   edx
c000b83b:	50                   	push   eax
c000b83c:	56                   	push   esi
c000b83d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b840:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000b843:	83 c4 20             	add    esp,0x20
c000b846:	85 c0                	test   eax,eax
c000b848:	0f 84 a2 00 00 00    	je     c000b8f0 <loadProgramIntoMemory(Process*, char const*)+0x180>
c000b84e:	31 d2                	xor    edx,edx
c000b850:	51                   	push   ecx
c000b851:	52                   	push   edx
c000b852:	50                   	push   eax
c000b853:	56                   	push   esi
c000b854:	e8 77 6e 00 00       	call   c00126d0 <File::seek(unsigned long long)>
c000b859:	83 c4 10             	add    esp,0x10
c000b85c:	85 c0                	test   eax,eax
c000b85e:	0f 85 8c 00 00 00    	jne    c000b8f0 <loadProgramIntoMemory(Process*, char const*)+0x180>
c000b864:	83 ec 0c             	sub    esp,0xc
c000b867:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c000b86b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c000b86f:	31 ed                	xor    ebp,ebp
c000b871:	0f af c2             	imul   eax,edx
c000b874:	50                   	push   eax
c000b875:	e8 51 19 00 00       	call   c000d1cb <malloc>
c000b87a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b87d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b881:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b883:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b887:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c000b88b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c000b88f:	0f af c2             	imul   eax,edx
c000b892:	99                   	cdq    
c000b893:	52                   	push   edx
c000b894:	50                   	push   eax
c000b895:	56                   	push   esi
c000b896:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b899:	83 c4 20             	add    esp,0x20
c000b89c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000b8a4:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c000b8a8:	0f 86 80 00 00 00    	jbe    c000b92e <loadProgramIntoMemory(Process*, char const*)+0x1be>
c000b8ae:	0f b7 fd             	movzx  edi,bp
c000b8b1:	c1 e7 05             	shl    edi,0x5
c000b8b4:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c000b8b8:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c000b8bb:	75 6b                	jne    c000b928 <loadProgramIntoMemory(Process*, char const*)+0x1b8>
c000b8bd:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b8c0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8c4:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c000b8c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b8cb:	52                   	push   edx
c000b8cc:	31 d2                	xor    edx,edx
c000b8ce:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000b8d1:	52                   	push   edx
c000b8d2:	50                   	push   eax
c000b8d3:	56                   	push   esi
c000b8d4:	e8 f7 6d 00 00       	call   c00126d0 <File::seek(unsigned long long)>
c000b8d9:	83 c4 10             	add    esp,0x10
c000b8dc:	85 c0                	test   eax,eax
c000b8de:	74 17                	je     c000b8f7 <loadProgramIntoMemory(Process*, char const*)+0x187>
c000b8e0:	83 ec 0c             	sub    esp,0xc
c000b8e3:	68 47 86 03 c0       	push   0xc0038647
c000b8e8:	e8 e3 12 00 00       	call   c000cbd0 <kprintf(char const*, ...)>
c000b8ed:	83 c4 10             	add    esp,0x10
c000b8f0:	31 c0                	xor    eax,eax
c000b8f2:	e9 87 00 00 00       	jmp    c000b97e <loadProgramIntoMemory(Process*, char const*)+0x20e>
c000b8f7:	83 ec 0c             	sub    esp,0xc
c000b8fa:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c000b8fd:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c000b900:	50                   	push   eax
c000b901:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b905:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b909:	56                   	push   esi
c000b90a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000b90e:	e8 e0 fb ff ff       	call   c000b4f3 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c000b913:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b917:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c000b91b:	83 c4 20             	add    esp,0x20
c000b91e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c000b922:	73 04                	jae    c000b928 <loadProgramIntoMemory(Process*, char const*)+0x1b8>
c000b924:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b928:	45                   	inc    ebp
c000b929:	e9 76 ff ff ff       	jmp    c000b8a4 <loadProgramIntoMemory(Process*, char const*)+0x134>
c000b92e:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000b932:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b936:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b93a:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c000b940:	83 ec 0c             	sub    esp,0xc
c000b943:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c000b949:	25 00 f0 ff ff       	and    eax,0xfffff000
c000b94e:	05 00 10 00 00       	add    eax,0x1000
c000b953:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b956:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b95a:	e8 7c 18 00 00       	call   c000d1db <free>
c000b95f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b962:	e8 74 18 00 00       	call   c000d1db <free>
c000b967:	58                   	pop    eax
c000b968:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b96c:	e8 6a 18 00 00       	call   c000d1db <free>
c000b971:	89 34 24             	mov    DWORD PTR [esp],esi
c000b974:	e8 f7 6c 00 00       	call   c0012670 <File::close()>
c000b979:	83 c4 10             	add    esp,0x10
c000b97c:	b0 01                	mov    al,0x1
c000b97e:	83 c4 3c             	add    esp,0x3c
c000b981:	5b                   	pop    ebx
c000b982:	5e                   	pop    esi
c000b983:	5f                   	pop    edi
c000b984:	5d                   	pop    ebp
c000b985:	c3                   	ret    

c000b986 <runtimeReferenceHelper()>:
c000b986:	83 ec 18             	sub    esp,0x18
c000b989:	68 4f 86 03 c0       	push   0xc003864f
c000b98e:	e8 3d 12 00 00       	call   c000cbd0 <kprintf(char const*, ...)>
c000b993:	fa                   	cli    
c000b994:	83 c4 10             	add    esp,0x10
c000b997:	eb fe                	jmp    c000b997 <runtimeReferenceHelper()+0x11>

c000b999 <getAddressOfKernelSymbol(char const*)>:
c000b999:	57                   	push   edi
c000b99a:	56                   	push   esi
c000b99b:	53                   	push   ebx
c000b99c:	31 db                	xor    ebx,ebx
c000b99e:	39 1d a0 b8 03 c0    	cmp    DWORD PTR ds:0xc003b8a0,ebx
c000b9a4:	7e 3c                	jle    c000b9e2 <getAddressOfKernelSymbol(char const*)+0x49>
c000b9a6:	8b 34 9d 20 b8 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffc47e0]
c000b9ad:	31 ff                	xor    edi,edi
c000b9af:	39 3c 9d 20 b7 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffc48e0],edi
c000b9b6:	7e 27                	jle    c000b9df <getAddressOfKernelSymbol(char const*)+0x46>
c000b9b8:	50                   	push   eax
c000b9b9:	50                   	push   eax
c000b9ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b9be:	8b 06                	mov    eax,DWORD PTR [esi]
c000b9c0:	03 04 9d a0 b7 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffc4860]
c000b9c7:	50                   	push   eax
c000b9c8:	e8 2b 4d ff ff       	call   c00006f8 <strcmp>
c000b9cd:	83 c4 10             	add    esp,0x10
c000b9d0:	85 c0                	test   eax,eax
c000b9d2:	75 05                	jne    c000b9d9 <getAddressOfKernelSymbol(char const*)+0x40>
c000b9d4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000b9d7:	eb 0b                	jmp    c000b9e4 <getAddressOfKernelSymbol(char const*)+0x4b>
c000b9d9:	83 c6 10             	add    esi,0x10
c000b9dc:	47                   	inc    edi
c000b9dd:	eb d0                	jmp    c000b9af <getAddressOfKernelSymbol(char const*)+0x16>
c000b9df:	43                   	inc    ebx
c000b9e0:	eb bc                	jmp    c000b99e <getAddressOfKernelSymbol(char const*)+0x5>
c000b9e2:	31 c0                	xor    eax,eax
c000b9e4:	5b                   	pop    ebx
c000b9e5:	5e                   	pop    esi
c000b9e6:	5f                   	pop    edi
c000b9e7:	c3                   	ret    

c000b9e8 <loadKernelSymbolTable(char const*)>:
c000b9e8:	55                   	push   ebp
c000b9e9:	57                   	push   edi
c000b9ea:	56                   	push   esi
c000b9eb:	53                   	push   ebx
c000b9ec:	83 ec 68             	sub    esp,0x68
c000b9ef:	8b 35 5c b9 03 c0    	mov    esi,DWORD PTR ds:0xc003b95c
c000b9f5:	68 14 01 00 00       	push   0x114
c000b9fa:	e8 81 67 00 00       	call   c0012180 <operator new(unsigned long)>
c000b9ff:	83 c4 0c             	add    esp,0xc
c000ba02:	89 c3                	mov    ebx,eax
c000ba04:	56                   	push   esi
c000ba05:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c000ba09:	50                   	push   eax
c000ba0a:	e8 9f 6b 00 00       	call   c00125ae <File::File(char const*, Process*)>
c000ba0f:	5e                   	pop    esi
c000ba10:	5f                   	pop    edi
c000ba11:	6a 01                	push   0x1
c000ba13:	53                   	push   ebx
c000ba14:	e8 f9 6b 00 00       	call   c0012612 <File::open(FileOpenMode)>
c000ba19:	83 c4 10             	add    esp,0x10
c000ba1c:	31 d2                	xor    edx,edx
c000ba1e:	85 c0                	test   eax,eax
c000ba20:	0f 85 79 02 00 00    	jne    c000bc9f <loadKernelSymbolTable(char const*)+0x2b7>
c000ba26:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000ba2e:	83 ec 0c             	sub    esp,0xc
c000ba31:	6a 34                	push   0x34
c000ba33:	e8 93 17 00 00       	call   c000d1cb <malloc>
c000ba38:	59                   	pop    ecx
c000ba39:	89 c7                	mov    edi,eax
c000ba3b:	8d 74 24 34          	lea    esi,[esp+0x34]
c000ba3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba41:	56                   	push   esi
c000ba42:	57                   	push   edi
c000ba43:	6a 00                	push   0x0
c000ba45:	6a 34                	push   0x34
c000ba47:	53                   	push   ebx
c000ba48:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ba4b:	83 c4 20             	add    esp,0x20
c000ba4e:	85 c0                	test   eax,eax
c000ba50:	74 17                	je     c000ba69 <loadKernelSymbolTable(char const*)+0x81>
c000ba52:	83 ec 0c             	sub    esp,0xc
c000ba55:	68 71 86 03 c0       	push   0xc0038671
c000ba5a:	e8 8f 12 00 00       	call   c000ccee <panic(char const*)>
c000ba5f:	83 c4 10             	add    esp,0x10
c000ba62:	31 d2                	xor    edx,edx
c000ba64:	e9 36 02 00 00       	jmp    c000bc9f <loadKernelSymbolTable(char const*)+0x2b7>
c000ba69:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c000ba6f:	75 e1                	jne    c000ba52 <loadKernelSymbolTable(char const*)+0x6a>
c000ba71:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c000ba74:	85 c0                	test   eax,eax
c000ba76:	74 da                	je     c000ba52 <loadKernelSymbolTable(char const*)+0x6a>
c000ba78:	52                   	push   edx
c000ba79:	31 d2                	xor    edx,edx
c000ba7b:	52                   	push   edx
c000ba7c:	50                   	push   eax
c000ba7d:	53                   	push   ebx
c000ba7e:	e8 4d 6c 00 00       	call   c00126d0 <File::seek(unsigned long long)>
c000ba83:	83 c4 10             	add    esp,0x10
c000ba86:	85 c0                	test   eax,eax
c000ba88:	75 c8                	jne    c000ba52 <loadKernelSymbolTable(char const*)+0x6a>
c000ba8a:	83 ec 0c             	sub    esp,0xc
c000ba8d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000ba91:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000ba95:	31 ed                	xor    ebp,ebp
c000ba97:	0f af c2             	imul   eax,edx
c000ba9a:	50                   	push   eax
c000ba9b:	e8 2b 17 00 00       	call   c000d1cb <malloc>
c000baa0:	89 34 24             	mov    DWORD PTR [esp],esi
c000baa3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000baa7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000baa9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000baad:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000bab1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000bab5:	0f af c2             	imul   eax,edx
c000bab8:	99                   	cdq    
c000bab9:	52                   	push   edx
c000baba:	50                   	push   eax
c000babb:	53                   	push   ebx
c000babc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000babf:	83 c4 20             	add    esp,0x20
c000bac2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000baca:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bad2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000bada:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000bae2:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c000bae6:	0f 86 aa 00 00 00    	jbe    c000bb96 <loadKernelSymbolTable(char const*)+0x1ae>
c000baec:	0f b7 f5             	movzx  esi,bp
c000baef:	6b f6 28             	imul   esi,esi,0x28
c000baf2:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c000baf6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000baf9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bafd:	50                   	push   eax
c000bafe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bb02:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c000bb06:	8b 16                	mov    edx,DWORD PTR [esi]
c000bb08:	6b c0 28             	imul   eax,eax,0x28
c000bb0b:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c000bb0f:	89 d0                	mov    eax,edx
c000bb11:	31 d2                	xor    edx,edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	53                   	push   ebx
c000bb16:	e8 b5 6b 00 00       	call   c00126d0 <File::seek(unsigned long long)>
c000bb1b:	83 c4 0c             	add    esp,0xc
c000bb1e:	6a 20                	push   0x20
c000bb20:	6a 00                	push   0x0
c000bb22:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c000bb26:	52                   	push   edx
c000bb27:	e8 dc 4a ff ff       	call   c0000608 <memset>
c000bb2c:	58                   	pop    eax
c000bb2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb2f:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c000bb33:	51                   	push   ecx
c000bb34:	8d 54 24 40          	lea    edx,[esp+0x40]
c000bb38:	52                   	push   edx
c000bb39:	6a 00                	push   0x0
c000bb3b:	6a 1f                	push   0x1f
c000bb3d:	53                   	push   ebx
c000bb3e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bb41:	83 c4 18             	add    esp,0x18
c000bb44:	68 88 86 03 c0       	push   0xc0038688
c000bb49:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c000bb4d:	52                   	push   edx
c000bb4e:	e8 a5 4b ff ff       	call   c00006f8 <strcmp>
c000bb53:	83 c4 10             	add    esp,0x10
c000bb56:	85 c0                	test   eax,eax
c000bb58:	75 0f                	jne    c000bb69 <loadKernelSymbolTable(char const*)+0x181>
c000bb5a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bb5d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bb61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bb65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb69:	50                   	push   eax
c000bb6a:	50                   	push   eax
c000bb6b:	68 90 86 03 c0       	push   0xc0038690
c000bb70:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000bb74:	50                   	push   eax
c000bb75:	e8 7e 4b ff ff       	call   c00006f8 <strcmp>
c000bb7a:	83 c4 10             	add    esp,0x10
c000bb7d:	85 c0                	test   eax,eax
c000bb7f:	75 0f                	jne    c000bb90 <loadKernelSymbolTable(char const*)+0x1a8>
c000bb81:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bb84:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bb8c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb90:	45                   	inc    ebp
c000bb91:	e9 4c ff ff ff       	jmp    c000bae2 <loadKernelSymbolTable(char const*)+0xfa>
c000bb96:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000bb9b:	75 10                	jne    c000bbad <loadKernelSymbolTable(char const*)+0x1c5>
c000bb9d:	83 ec 0c             	sub    esp,0xc
c000bba0:	68 98 86 03 c0       	push   0xc0038698
c000bba5:	e8 44 11 00 00       	call   c000ccee <panic(char const*)>
c000bbaa:	83 c4 10             	add    esp,0x10
c000bbad:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000bbb2:	75 10                	jne    c000bbc4 <loadKernelSymbolTable(char const*)+0x1dc>
c000bbb4:	83 ec 0c             	sub    esp,0xc
c000bbb7:	68 98 86 03 c0       	push   0xc0038698
c000bbbc:	e8 2d 11 00 00       	call   c000ccee <panic(char const*)>
c000bbc1:	83 c4 10             	add    esp,0x10
c000bbc4:	31 d2                	xor    edx,edx
c000bbc6:	50                   	push   eax
c000bbc7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bbcb:	52                   	push   edx
c000bbcc:	50                   	push   eax
c000bbcd:	53                   	push   ebx
c000bbce:	e8 fd 6a 00 00       	call   c00126d0 <File::seek(unsigned long long)>
c000bbd3:	5a                   	pop    edx
c000bbd4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bbd8:	e8 ee 15 00 00       	call   c000d1cb <malloc>
c000bbdd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bbe5:	89 c1                	mov    ecx,eax
c000bbe7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bbeb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbef:	5e                   	pop    esi
c000bbf0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bbf2:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c000bbf6:	55                   	push   ebp
c000bbf7:	51                   	push   ecx
c000bbf8:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c000bbfc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bc00:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bc04:	53                   	push   ebx
c000bc05:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bc08:	83 c4 14             	add    esp,0x14
c000bc0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc0f:	e8 b7 15 00 00       	call   c000d1cb <malloc>
c000bc14:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bc17:	89 c6                	mov    esi,eax
c000bc19:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc1b:	56                   	push   esi
c000bc1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bc20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bc24:	53                   	push   ebx
c000bc25:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bc28:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc2c:	8b 15 a0 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8a0
c000bc32:	83 c4 1c             	add    esp,0x1c
c000bc35:	c1 e8 04             	shr    eax,0x4
c000bc38:	89 04 95 20 b7 03 c0 	mov    DWORD PTR [edx*4-0x3ffc48e0],eax
c000bc3f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bc43:	31 d2                	xor    edx,edx
c000bc45:	52                   	push   edx
c000bc46:	50                   	push   eax
c000bc47:	53                   	push   ebx
c000bc48:	e8 83 6a 00 00       	call   c00126d0 <File::seek(unsigned long long)>
c000bc4d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bc50:	31 d2                	xor    edx,edx
c000bc52:	56                   	push   esi
c000bc53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc57:	52                   	push   edx
c000bc58:	50                   	push   eax
c000bc59:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc5b:	53                   	push   ebx
c000bc5c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bc5f:	83 c4 14             	add    esp,0x14
c000bc62:	53                   	push   ebx
c000bc63:	e8 08 6a 00 00       	call   c0012670 <File::close()>
c000bc68:	5d                   	pop    ebp
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	e8 69 15 00 00       	call   c000d1db <free>
c000bc72:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bc75:	e8 61 15 00 00       	call   c000d1db <free>
c000bc7a:	a1 a0 b8 03 c0       	mov    eax,ds:0xc003b8a0
c000bc7f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bc83:	8d 50 01             	lea    edx,[eax+0x1]
c000bc86:	89 0c 85 20 b8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc47e0],ecx
c000bc8d:	89 15 a0 b8 03 c0    	mov    DWORD PTR ds:0xc003b8a0,edx
c000bc93:	89 34 85 a0 b7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc4860],esi
c000bc9a:	83 c4 10             	add    esp,0x10
c000bc9d:	b2 01                	mov    dl,0x1
c000bc9f:	83 c4 5c             	add    esp,0x5c
c000bca2:	88 d0                	mov    al,dl
c000bca4:	5b                   	pop    ebx
c000bca5:	5e                   	pop    esi
c000bca6:	5f                   	pop    edi
c000bca7:	5d                   	pop    ebp
c000bca8:	c3                   	ret    

c000bca9 <loadDriverIntoMemory(char const*, unsigned long)>:
c000bca9:	55                   	push   ebp
c000bcaa:	57                   	push   edi
c000bcab:	56                   	push   esi
c000bcac:	53                   	push   ebx
c000bcad:	81 ec 68 03 00 00    	sub    esp,0x368
c000bcb3:	8b 1d 5c b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b95c
c000bcb9:	68 14 01 00 00       	push   0x114
c000bcbe:	e8 bd 64 00 00       	call   c0012180 <operator new(unsigned long)>
c000bcc3:	83 c4 0c             	add    esp,0xc
c000bcc6:	89 c5                	mov    ebp,eax
c000bcc8:	53                   	push   ebx
c000bcc9:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c000bcd0:	50                   	push   eax
c000bcd1:	e8 d8 68 00 00       	call   c00125ae <File::File(char const*, Process*)>
c000bcd6:	58                   	pop    eax
c000bcd7:	5a                   	pop    edx
c000bcd8:	6a 01                	push   0x1
c000bcda:	55                   	push   ebp
c000bcdb:	e8 32 69 00 00       	call   c0012612 <File::open(FileOpenMode)>
c000bce0:	83 c4 10             	add    esp,0x10
c000bce3:	85 c0                	test   eax,eax
c000bce5:	0f 85 2e 01 00 00    	jne    c000be19 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000bceb:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000bcf3:	83 ec 0c             	sub    esp,0xc
c000bcf6:	6a 34                	push   0x34
c000bcf8:	e8 ce 14 00 00       	call   c000d1cb <malloc>
c000bcfd:	89 c7                	mov    edi,eax
c000bcff:	58                   	pop    eax
c000bd00:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bd03:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c000bd07:	53                   	push   ebx
c000bd08:	57                   	push   edi
c000bd09:	6a 00                	push   0x0
c000bd0b:	6a 34                	push   0x34
c000bd0d:	55                   	push   ebp
c000bd0e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bd11:	83 c4 20             	add    esp,0x20
c000bd14:	85 c0                	test   eax,eax
c000bd16:	0f 85 fd 00 00 00    	jne    c000be19 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000bd1c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c000bd22:	0f 85 f1 00 00 00    	jne    c000be19 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000bd28:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c000bd2b:	85 c0                	test   eax,eax
c000bd2d:	0f 84 e6 00 00 00    	je     c000be19 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000bd33:	31 d2                	xor    edx,edx
c000bd35:	56                   	push   esi
c000bd36:	52                   	push   edx
c000bd37:	50                   	push   eax
c000bd38:	55                   	push   ebp
c000bd39:	e8 92 69 00 00       	call   c00126d0 <File::seek(unsigned long long)>
c000bd3e:	83 c4 10             	add    esp,0x10
c000bd41:	85 c0                	test   eax,eax
c000bd43:	0f 85 d0 00 00 00    	jne    c000be19 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000bd49:	83 ec 0c             	sub    esp,0xc
c000bd4c:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c000bd4f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000bd53:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bd57:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000bd5b:	0f af c2             	imul   eax,edx
c000bd5e:	50                   	push   eax
c000bd5f:	e8 67 14 00 00       	call   c000d1cb <malloc>
c000bd64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bd67:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bd6b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bd6e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd72:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000bd76:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000bd7a:	0f af c2             	imul   eax,edx
c000bd7d:	99                   	cdq    
c000bd7e:	52                   	push   edx
c000bd7f:	50                   	push   eax
c000bd80:	55                   	push   ebp
c000bd81:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bd84:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bd87:	83 c4 20             	add    esp,0x20
c000bd8a:	85 c0                	test   eax,eax
c000bd8c:	0f 84 87 00 00 00    	je     c000be19 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000bd92:	31 d2                	xor    edx,edx
c000bd94:	51                   	push   ecx
c000bd95:	52                   	push   edx
c000bd96:	50                   	push   eax
c000bd97:	55                   	push   ebp
c000bd98:	e8 33 69 00 00       	call   c00126d0 <File::seek(unsigned long long)>
c000bd9d:	83 c4 10             	add    esp,0x10
c000bda0:	85 c0                	test   eax,eax
c000bda2:	75 75                	jne    c000be19 <loadDriverIntoMemory(char const*, unsigned long)+0x170>
c000bda4:	83 ec 0c             	sub    esp,0xc
c000bda7:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c000bdab:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c000bdaf:	31 f6                	xor    esi,esi
c000bdb1:	0f af c2             	imul   eax,edx
c000bdb4:	50                   	push   eax
c000bdb5:	e8 11 14 00 00       	call   c000d1cb <malloc>
c000bdba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bdbd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000bdc1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bdc4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bdc8:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c000bdcc:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c000bdd0:	0f af c2             	imul   eax,edx
c000bdd3:	99                   	cdq    
c000bdd4:	52                   	push   edx
c000bdd5:	50                   	push   eax
c000bdd6:	55                   	push   ebp
c000bdd7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bdda:	83 c4 20             	add    esp,0x20
c000bddd:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c000bde1:	0f 86 8d 00 00 00    	jbe    c000be74 <loadDriverIntoMemory(char const*, unsigned long)+0x1cb>
c000bde7:	0f b7 de             	movzx  ebx,si
c000bdea:	c1 e3 05             	shl    ebx,0x5
c000bded:	03 5c 24 34          	add    ebx,DWORD PTR [esp+0x34]
c000bdf1:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c000bdf4:	75 78                	jne    c000be6e <loadDriverIntoMemory(char const*, unsigned long)+0x1c5>
c000bdf6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000bdf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bdfd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000be00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000be04:	52                   	push   edx
c000be05:	31 d2                	xor    edx,edx
c000be07:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000be0a:	52                   	push   edx
c000be0b:	50                   	push   eax
c000be0c:	55                   	push   ebp
c000be0d:	e8 be 68 00 00       	call   c00126d0 <File::seek(unsigned long long)>
c000be12:	83 c4 10             	add    esp,0x10
c000be15:	85 c0                	test   eax,eax
c000be17:	74 07                	je     c000be20 <loadDriverIntoMemory(char const*, unsigned long)+0x177>
c000be19:	31 c0                	xor    eax,eax
c000be1b:	e9 86 05 00 00       	jmp    c000c3a6 <loadDriverIntoMemory(char const*, unsigned long)+0x6fd>
c000be20:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c000be27:	31 d2                	xor    edx,edx
c000be29:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c000be2d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000be30:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000be34:	83 ec 0c             	sub    esp,0xc
c000be37:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000be3b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000be42:	50                   	push   eax
c000be43:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000be47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be4b:	52                   	push   edx
c000be4c:	50                   	push   eax
c000be4d:	55                   	push   ebp
c000be4e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000be51:	83 c4 1c             	add    esp,0x1c
c000be54:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000be57:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c000be5a:	50                   	push   eax
c000be5b:	6a 00                	push   0x0
c000be5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000be61:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000be65:	50                   	push   eax
c000be66:	e8 9d 47 ff ff       	call   c0000608 <memset>
c000be6b:	83 c4 10             	add    esp,0x10
c000be6e:	46                   	inc    esi
c000be6f:	e9 69 ff ff ff       	jmp    c000bddd <loadDriverIntoMemory(char const*, unsigned long)+0x134>
c000be74:	31 db                	xor    ebx,ebx
c000be76:	50                   	push   eax
c000be77:	68 00 01 00 00       	push   0x100
c000be7c:	6a 00                	push   0x0
c000be7e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c000be82:	50                   	push   eax
c000be83:	e8 80 47 ff ff       	call   c0000608 <memset>
c000be88:	83 c4 0c             	add    esp,0xc
c000be8b:	68 00 01 00 00       	push   0x100
c000be90:	6a 00                	push   0x0
c000be92:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c000be99:	50                   	push   eax
c000be9a:	e8 69 47 ff ff       	call   c0000608 <memset>
c000be9f:	83 c4 10             	add    esp,0x10
c000bea2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000beaa:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000beb2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000beba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000bec2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000beca:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c000bece:	0f 86 30 01 00 00    	jbe    c000c004 <loadDriverIntoMemory(char const*, unsigned long)+0x35b>
c000bed4:	0f b7 f3             	movzx  esi,bx
c000bed7:	6b f6 28             	imul   esi,esi,0x28
c000beda:	03 74 24 24          	add    esi,DWORD PTR [esp+0x24]
c000bede:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000bee1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bee5:	50                   	push   eax
c000bee6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000beea:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c000beee:	8b 06                	mov    eax,DWORD PTR [esi]
c000bef0:	6b d2 28             	imul   edx,edx,0x28
c000bef3:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c000bef7:	31 d2                	xor    edx,edx
c000bef9:	52                   	push   edx
c000befa:	50                   	push   eax
c000befb:	55                   	push   ebp
c000befc:	e8 cf 67 00 00       	call   c00126d0 <File::seek(unsigned long long)>
c000bf01:	83 c4 0c             	add    esp,0xc
c000bf04:	6a 20                	push   0x20
c000bf06:	6a 00                	push   0x0
c000bf08:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c000bf0f:	51                   	push   ecx
c000bf10:	e8 f3 46 ff ff       	call   c0000608 <memset>
c000bf15:	58                   	pop    eax
c000bf16:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf19:	8d 54 24 58          	lea    edx,[esp+0x58]
c000bf1d:	52                   	push   edx
c000bf1e:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c000bf25:	51                   	push   ecx
c000bf26:	6a 00                	push   0x0
c000bf28:	6a 1f                	push   0x1f
c000bf2a:	55                   	push   ebp
c000bf2b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf2e:	83 c4 1c             	add    esp,0x1c
c000bf31:	6a 09                	push   0x9
c000bf33:	68 b2 86 03 c0       	push   0xc00386b2
c000bf38:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c000bf3f:	51                   	push   ecx
c000bf40:	e8 2a 46 ff ff       	call   c000056f <memcmp>
c000bf45:	83 c4 10             	add    esp,0x10
c000bf48:	85 c0                	test   eax,eax
c000bf4a:	75 21                	jne    c000bf6d <loadDriverIntoMemory(char const*, unsigned long)+0x2c4>
c000bf4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf50:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bf54:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c000bf58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bf5c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bf5f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c000bf66:	89 d0                	mov    eax,edx
c000bf68:	40                   	inc    eax
c000bf69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf6d:	50                   	push   eax
c000bf6e:	6a 09                	push   0x9
c000bf70:	68 bc 86 03 c0       	push   0xc00386bc
c000bf75:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000bf7c:	50                   	push   eax
c000bf7d:	e8 ed 45 ff ff       	call   c000056f <memcmp>
c000bf82:	83 c4 10             	add    esp,0x10
c000bf85:	85 c0                	test   eax,eax
c000bf87:	75 21                	jne    c000bfaa <loadDriverIntoMemory(char const*, unsigned long)+0x301>
c000bf89:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bf91:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c000bf95:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bf99:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bf9c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c000bfa3:	89 d0                	mov    eax,edx
c000bfa5:	40                   	inc    eax
c000bfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfaa:	50                   	push   eax
c000bfab:	50                   	push   eax
c000bfac:	68 88 86 03 c0       	push   0xc0038688
c000bfb1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000bfb8:	50                   	push   eax
c000bfb9:	e8 3a 47 ff ff       	call   c00006f8 <strcmp>
c000bfbe:	83 c4 10             	add    esp,0x10
c000bfc1:	85 c0                	test   eax,eax
c000bfc3:	75 0f                	jne    c000bfd4 <loadDriverIntoMemory(char const*, unsigned long)+0x32b>
c000bfc5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bfcc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bfd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfd4:	50                   	push   eax
c000bfd5:	50                   	push   eax
c000bfd6:	68 90 86 03 c0       	push   0xc0038690
c000bfdb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000bfe2:	50                   	push   eax
c000bfe3:	e8 10 47 ff ff       	call   c00006f8 <strcmp>
c000bfe8:	83 c4 10             	add    esp,0x10
c000bfeb:	85 c0                	test   eax,eax
c000bfed:	75 0f                	jne    c000bffe <loadDriverIntoMemory(char const*, unsigned long)+0x355>
c000bfef:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bff2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bff6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bffa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bffe:	43                   	inc    ebx
c000bfff:	e9 c6 fe ff ff       	jmp    c000beca <loadDriverIntoMemory(char const*, unsigned long)+0x221>
c000c004:	31 d2                	xor    edx,edx
c000c006:	51                   	push   ecx
c000c007:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c00b:	52                   	push   edx
c000c00c:	50                   	push   eax
c000c00d:	55                   	push   ebp
c000c00e:	e8 bd 66 00 00       	call   c00126d0 <File::seek(unsigned long long)>
c000c013:	5b                   	pop    ebx
c000c014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c018:	e8 ae 11 00 00       	call   c000d1cb <malloc>
c000c01d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c020:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c024:	31 d2                	xor    edx,edx
c000c026:	5e                   	pop    esi
c000c027:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c000c02b:	53                   	push   ebx
c000c02c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c030:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c034:	52                   	push   edx
c000c035:	50                   	push   eax
c000c036:	55                   	push   ebp
c000c037:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c03a:	83 c4 14             	add    esp,0x14
c000c03d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c041:	e8 85 11 00 00       	call   c000d1cb <malloc>
c000c046:	31 d2                	xor    edx,edx
c000c048:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c04c:	83 c4 0c             	add    esp,0xc
c000c04f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c053:	52                   	push   edx
c000c054:	50                   	push   eax
c000c055:	55                   	push   ebp
c000c056:	e8 75 66 00 00       	call   c00126d0 <File::seek(unsigned long long)>
c000c05b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c05e:	31 d2                	xor    edx,edx
c000c060:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c064:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c067:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c06b:	52                   	push   edx
c000c06c:	50                   	push   eax
c000c06d:	55                   	push   ebp
c000c06e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c071:	83 c4 20             	add    esp,0x20
c000c074:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c07c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c080:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000c084:	0f 84 f2 02 00 00    	je     c000c37c <loadDriverIntoMemory(char const*, unsigned long)+0x6d3>
c000c08a:	8b 84 8c 50 01 00 00 	mov    eax,DWORD PTR [esp+ecx*4+0x150]
c000c091:	31 d2                	xor    edx,edx
c000c093:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c097:	c1 e8 03             	shr    eax,0x3
c000c09a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c09e:	50                   	push   eax
c000c09f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c0a3:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c000c0a7:	52                   	push   edx
c000c0a8:	50                   	push   eax
c000c0a9:	55                   	push   ebp
c000c0aa:	e8 21 66 00 00       	call   c00126d0 <File::seek(unsigned long long)>
c000c0af:	58                   	pop    eax
c000c0b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c0b4:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c000c0bb:	e8 0b 11 00 00       	call   c000d1cb <malloc>
c000c0c0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c0c3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0c7:	5a                   	pop    edx
c000c0c8:	31 d2                	xor    edx,edx
c000c0ca:	8d 44 24 58          	lea    eax,[esp+0x58]
c000c0ce:	50                   	push   eax
c000c0cf:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c0d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c0d7:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c000c0de:	52                   	push   edx
c000c0df:	50                   	push   eax
c000c0e0:	55                   	push   ebp
c000c0e1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c0e4:	83 c4 20             	add    esp,0x20
c000c0e7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c0ef:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000c0f3:	39 54 24 18          	cmp    DWORD PTR [esp+0x18],edx
c000c0f7:	0f 8d 67 02 00 00    	jge    c000c364 <loadDriverIntoMemory(char const*, unsigned long)+0x6bb>
c000c0fd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c101:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c105:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000c10a:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000c10d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c111:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c115:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c000c119:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c11d:	c1 e8 08             	shr    eax,0x8
c000c120:	89 c6                	mov    esi,eax
c000c122:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c126:	c1 e6 04             	shl    esi,0x4
c000c129:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c000c12d:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c000c130:	85 db                	test   ebx,ebx
c000c132:	0f 85 15 01 00 00    	jne    c000c24d <loadDriverIntoMemory(char const*, unsigned long)+0x5a4>
c000c138:	83 ec 0c             	sub    esp,0xc
c000c13b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c13f:	03 06                	add    eax,DWORD PTR [esi]
c000c141:	50                   	push   eax
c000c142:	e8 52 f8 ff ff       	call   c000b999 <getAddressOfKernelSymbol(char const*)>
c000c147:	83 c4 10             	add    esp,0x10
c000c14a:	89 c3                	mov    ebx,eax
c000c14c:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c000c151:	85 c0                	test   eax,eax
c000c153:	0f 85 f4 00 00 00    	jne    c000c24d <loadDriverIntoMemory(char const*, unsigned long)+0x5a4>
c000c159:	50                   	push   eax
c000c15a:	50                   	push   eax
c000c15b:	68 c6 86 03 c0       	push   0xc00386c6
c000c160:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c164:	03 06                	add    eax,DWORD PTR [esi]
c000c166:	50                   	push   eax
c000c167:	e8 8c 45 ff ff       	call   c00006f8 <strcmp>
c000c16c:	83 c4 10             	add    esp,0x10
c000c16f:	85 c0                	test   eax,eax
c000c171:	75 0a                	jne    c000c17d <loadDriverIntoMemory(char const*, unsigned long)+0x4d4>
c000c173:	bb 1c e4 01 c0       	mov    ebx,0xc001e41c
c000c178:	e9 cb 00 00 00       	jmp    c000c248 <loadDriverIntoMemory(char const*, unsigned long)+0x59f>
c000c17d:	50                   	push   eax
c000c17e:	50                   	push   eax
c000c17f:	68 d0 86 03 c0       	push   0xc00386d0
c000c184:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c188:	03 06                	add    eax,DWORD PTR [esi]
c000c18a:	50                   	push   eax
c000c18b:	e8 68 45 ff ff       	call   c00006f8 <strcmp>
c000c190:	83 c4 10             	add    esp,0x10
c000c193:	85 c0                	test   eax,eax
c000c195:	75 0a                	jne    c000c1a1 <loadDriverIntoMemory(char const*, unsigned long)+0x4f8>
c000c197:	bb 50 e1 01 c0       	mov    ebx,0xc001e150
c000c19c:	e9 a7 00 00 00       	jmp    c000c248 <loadDriverIntoMemory(char const*, unsigned long)+0x59f>
c000c1a1:	50                   	push   eax
c000c1a2:	50                   	push   eax
c000c1a3:	68 d9 86 03 c0       	push   0xc00386d9
c000c1a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c1ac:	03 06                	add    eax,DWORD PTR [esi]
c000c1ae:	50                   	push   eax
c000c1af:	e8 44 45 ff ff       	call   c00006f8 <strcmp>
c000c1b4:	83 c4 10             	add    esp,0x10
c000c1b7:	85 c0                	test   eax,eax
c000c1b9:	75 0a                	jne    c000c1c5 <loadDriverIntoMemory(char const*, unsigned long)+0x51c>
c000c1bb:	bb 1c e5 01 c0       	mov    ebx,0xc001e51c
c000c1c0:	e9 83 00 00 00       	jmp    c000c248 <loadDriverIntoMemory(char const*, unsigned long)+0x59f>
c000c1c5:	50                   	push   eax
c000c1c6:	50                   	push   eax
c000c1c7:	68 e3 86 03 c0       	push   0xc00386e3
c000c1cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c1d0:	03 06                	add    eax,DWORD PTR [esi]
c000c1d2:	50                   	push   eax
c000c1d3:	e8 20 45 ff ff       	call   c00006f8 <strcmp>
c000c1d8:	83 c4 10             	add    esp,0x10
c000c1db:	85 c0                	test   eax,eax
c000c1dd:	74 64                	je     c000c243 <loadDriverIntoMemory(char const*, unsigned long)+0x59a>
c000c1df:	50                   	push   eax
c000c1e0:	50                   	push   eax
c000c1e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c1e5:	03 06                	add    eax,DWORD PTR [esi]
c000c1e7:	50                   	push   eax
c000c1e8:	68 ec 86 03 c0       	push   0xc00386ec
c000c1ed:	e8 de 09 00 00       	call   c000cbd0 <kprintf(char const*, ...)>
c000c1f2:	58                   	pop    eax
c000c1f3:	5a                   	pop    edx
c000c1f4:	68 06 87 03 c0       	push   0xc0038706
c000c1f9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000c200:	50                   	push   eax
c000c201:	e8 a1 44 ff ff       	call   c00006a7 <strcpy>
c000c206:	59                   	pop    ecx
c000c207:	58                   	pop    eax
c000c208:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c20c:	03 06                	add    eax,DWORD PTR [esi]
c000c20e:	50                   	push   eax
c000c20f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000c216:	50                   	push   eax
c000c217:	e8 42 45 ff ff       	call   c000075e <strcat>
c000c21c:	58                   	pop    eax
c000c21d:	5a                   	pop    edx
c000c21e:	68 9c 87 03 c0       	push   0xc003879c
c000c223:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000c22a:	50                   	push   eax
c000c22b:	e8 2e 45 ff ff       	call   c000075e <strcat>
c000c230:	59                   	pop    ecx
c000c231:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c000c238:	50                   	push   eax
c000c239:	e8 b0 0a 00 00       	call   c000ccee <panic(char const*)>
c000c23e:	83 c4 10             	add    esp,0x10
c000c241:	eb 0a                	jmp    c000c24d <loadDriverIntoMemory(char const*, unsigned long)+0x5a4>
c000c243:	bb 9c e2 01 c0       	mov    ebx,0xc001e29c
c000c248:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c000c24d:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c000c252:	75 7a                	jne    c000c2ce <loadDriverIntoMemory(char const*, unsigned long)+0x625>
c000c254:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c000c25b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c000c25f:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c000c263:	01 ce                	add    esi,ecx
c000c265:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c000c26d:	8b 06                	mov    eax,DWORD PTR [esi]
c000c26f:	0f 94 c2             	sete   dl
c000c272:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c000c27a:	0f 94 44 24 10       	sete   BYTE PTR [esp+0x10]
c000c27f:	0b 54 24 10          	or     edx,DWORD PTR [esp+0x10]
c000c283:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000c288:	74 2b                	je     c000c2b5 <loadDriverIntoMemory(char const*, unsigned long)+0x60c>
c000c28a:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c000c28d:	84 d2                	test   dl,dl
c000c28f:	75 0a                	jne    c000c29b <loadDriverIntoMemory(char const*, unsigned long)+0x5f2>
c000c291:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000c295:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c000c299:	76 2c                	jbe    c000c2c7 <loadDriverIntoMemory(char const*, unsigned long)+0x61e>
c000c29b:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c29f:	83 ec 0c             	sub    esp,0xc
c000c2a2:	68 1d 87 03 c0       	push   0xc003871d
c000c2a7:	e8 42 0a 00 00       	call   c000ccee <panic(char const*)>
c000c2ac:	83 c4 10             	add    esp,0x10
c000c2af:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c2b3:	eb 12                	jmp    c000c2c7 <loadDriverIntoMemory(char const*, unsigned long)+0x61e>
c000c2b5:	01 c1                	add    ecx,eax
c000c2b7:	84 d2                	test   dl,dl
c000c2b9:	75 0c                	jne    c000c2c7 <loadDriverIntoMemory(char const*, unsigned long)+0x61e>
c000c2bb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000c2bf:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c000c2c3:	77 02                	ja     c000c2c7 <loadDriverIntoMemory(char const*, unsigned long)+0x61e>
c000c2c5:	01 d9                	add    ecx,ebx
c000c2c7:	89 0e                	mov    DWORD PTR [esi],ecx
c000c2c9:	e9 8d 00 00 00       	jmp    c000c35b <loadDriverIntoMemory(char const*, unsigned long)+0x6b2>
c000c2ce:	80 7c 24 10 02       	cmp    BYTE PTR [esp+0x10],0x2
c000c2d3:	75 65                	jne    c000c33a <loadDriverIntoMemory(char const*, unsigned long)+0x691>
c000c2d5:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c000c2dc:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c000c2e0:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c000c2e4:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c000c2ec:	74 14                	je     c000c302 <loadDriverIntoMemory(char const*, unsigned long)+0x659>
c000c2ee:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c000c2f6:	74 0a                	je     c000c302 <loadDriverIntoMemory(char const*, unsigned long)+0x659>
c000c2f8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000c2fc:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c000c300:	76 10                	jbe    c000c312 <loadDriverIntoMemory(char const*, unsigned long)+0x669>
c000c302:	83 ec 0c             	sub    esp,0xc
c000c305:	68 39 87 03 c0       	push   0xc0038739
c000c30a:	e8 df 09 00 00       	call   c000ccee <panic(char const*)>
c000c30f:	83 c4 10             	add    esp,0x10
c000c312:	8b 16                	mov    edx,DWORD PTR [esi]
c000c314:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000c319:	74 13                	je     c000c32e <loadDriverIntoMemory(char const*, unsigned long)+0x685>
c000c31b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c31f:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c000c326:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c000c32a:	01 d0                	add    eax,edx
c000c32c:	eb 06                	jmp    c000c334 <loadDriverIntoMemory(char const*, unsigned long)+0x68b>
c000c32e:	89 d0                	mov    eax,edx
c000c330:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c000c334:	01 c3                	add    ebx,eax
c000c336:	89 1e                	mov    DWORD PTR [esi],ebx
c000c338:	eb 21                	jmp    c000c35b <loadDriverIntoMemory(char const*, unsigned long)+0x6b2>
c000c33a:	51                   	push   ecx
c000c33b:	51                   	push   ecx
c000c33c:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000c341:	50                   	push   eax
c000c342:	68 55 87 03 c0       	push   0xc0038755
c000c347:	e8 84 08 00 00       	call   c000cbd0 <kprintf(char const*, ...)>
c000c34c:	c7 04 24 60 87 03 c0 	mov    DWORD PTR [esp],0xc0038760
c000c353:	e8 96 09 00 00       	call   c000ccee <panic(char const*)>
c000c358:	83 c4 10             	add    esp,0x10
c000c35b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c35f:	e9 8b fd ff ff       	jmp    c000c0ef <loadDriverIntoMemory(char const*, unsigned long)+0x446>
c000c364:	83 ec 0c             	sub    esp,0xc
c000c367:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c36b:	e8 6b 0e 00 00       	call   c000d1db <free>
c000c370:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c000c374:	83 c4 10             	add    esp,0x10
c000c377:	e9 00 fd ff ff       	jmp    c000c07c <loadDriverIntoMemory(char const*, unsigned long)+0x3d3>
c000c37c:	83 ec 0c             	sub    esp,0xc
c000c37f:	55                   	push   ebp
c000c380:	e8 eb 62 00 00       	call   c0012670 <File::close()>
c000c385:	58                   	pop    eax
c000c386:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c38a:	e8 4c 0e 00 00       	call   c000d1db <free>
c000c38f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c392:	e8 44 0e 00 00       	call   c000d1db <free>
c000c397:	5a                   	pop    edx
c000c398:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c39c:	e8 3a 0e 00 00       	call   c000d1db <free>
c000c3a1:	83 c4 10             	add    esp,0x10
c000c3a4:	b0 01                	mov    al,0x1
c000c3a6:	81 c4 5c 03 00 00    	add    esp,0x35c
c000c3ac:	5b                   	pop    ebx
c000c3ad:	5e                   	pop    esi
c000c3ae:	5f                   	pop    edi
c000c3af:	5d                   	pop    ebp
c000c3b0:	c3                   	ret    

c000c3b1 <loadDLL(char const*)>:
c000c3b1:	57                   	push   edi
c000c3b2:	56                   	push   esi
c000c3b3:	53                   	push   ebx
c000c3b4:	81 ec 18 01 00 00    	sub    esp,0x118
c000c3ba:	8b 9c 24 28 01 00 00 	mov    ebx,DWORD PTR [esp+0x128]
c000c3c1:	53                   	push   ebx
c000c3c2:	68 78 87 03 c0       	push   0xc0038778
c000c3c7:	e8 04 08 00 00       	call   c000cbd0 <kprintf(char const*, ...)>
c000c3cc:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000c3d3:	e8 a8 5d 00 00       	call   c0012180 <operator new(unsigned long)>
c000c3d8:	83 c4 0c             	add    esp,0xc
c000c3db:	89 c6                	mov    esi,eax
c000c3dd:	ff 35 5c b9 03 c0    	push   DWORD PTR ds:0xc003b95c
c000c3e3:	53                   	push   ebx
c000c3e4:	50                   	push   eax
c000c3e5:	e8 c4 61 00 00       	call   c00125ae <File::File(char const*, Process*)>
c000c3ea:	83 c4 0c             	add    esp,0xc
c000c3ed:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000c3f1:	50                   	push   eax
c000c3f2:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c3f6:	50                   	push   eax
c000c3f7:	56                   	push   esi
c000c3f8:	e8 c1 64 00 00       	call   c00128be <File::stat(unsigned long long*, bool*)>
c000c3fd:	83 c4 10             	add    esp,0x10
c000c400:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000c405:	75 0a                	jne    c000c411 <loadDLL(char const*)+0x60>
c000c407:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c40b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000c40f:	75 32                	jne    c000c443 <loadDLL(char const*)+0x92>
c000c411:	50                   	push   eax
c000c412:	50                   	push   eax
c000c413:	68 89 87 03 c0       	push   0xc0038789
c000c418:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000c41c:	57                   	push   edi
c000c41d:	e8 85 42 ff ff       	call   c00006a7 <strcpy>
c000c422:	58                   	pop    eax
c000c423:	5a                   	pop    edx
c000c424:	53                   	push   ebx
c000c425:	57                   	push   edi
c000c426:	e8 33 43 ff ff       	call   c000075e <strcat>
c000c42b:	59                   	pop    ecx
c000c42c:	58                   	pop    eax
c000c42d:	68 9c 87 03 c0       	push   0xc003879c
c000c432:	57                   	push   edi
c000c433:	e8 26 43 ff ff       	call   c000075e <strcat>
c000c438:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c43b:	e8 ae 08 00 00       	call   c000ccee <panic(char const*)>
c000c440:	83 c4 10             	add    esp,0x10
c000c443:	83 ec 0c             	sub    esp,0xc
c000c446:	8b 06                	mov    eax,DWORD PTR [esi]
c000c448:	56                   	push   esi
c000c449:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c44c:	58                   	pop    eax
c000c44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c451:	e8 75 0d 00 00       	call   c000d1cb <malloc>
c000c456:	5a                   	pop    edx
c000c457:	89 c6                	mov    esi,eax
c000c459:	59                   	pop    ecx
c000c45a:	50                   	push   eax
c000c45b:	68 9e 87 03 c0       	push   0xc003879e
c000c460:	e8 6b 07 00 00       	call   c000cbd0 <kprintf(char const*, ...)>
c000c465:	5f                   	pop    edi
c000c466:	58                   	pop    eax
c000c467:	56                   	push   esi
c000c468:	53                   	push   ebx
c000c469:	e8 3b f8 ff ff       	call   c000bca9 <loadDriverIntoMemory(char const*, unsigned long)>
c000c46e:	81 c4 20 01 00 00    	add    esp,0x120
c000c474:	89 f0                	mov    eax,esi
c000c476:	5b                   	pop    ebx
c000c477:	5e                   	pop    esi
c000c478:	5f                   	pop    edi
c000c479:	c3                   	ret    

c000c47a <executeDLL(unsigned long, void*)>:
c000c47a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c47e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c482:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c486:	ff e0                	jmp    eax

c000c488 <GDTEntry::setBase(unsigned int)>:
c000c488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c48c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c490:	89 c1                	mov    ecx,eax
c000c492:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000c496:	c1 e9 10             	shr    ecx,0x10
c000c499:	c1 e8 18             	shr    eax,0x18
c000c49c:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000c49f:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000c4a2:	c3                   	ret    
c000c4a3:	90                   	nop

c000c4a4 <GDTEntry::setLimit(unsigned int)>:
c000c4a4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c4a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c4ac:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000c4af:	66 89 01             	mov    WORD PTR [ecx],ax
c000c4b2:	83 e2 f0             	and    edx,0xfffffff0
c000c4b5:	c1 e8 10             	shr    eax,0x10
c000c4b8:	83 e0 0f             	and    eax,0xf
c000c4bb:	09 d0                	or     eax,edx
c000c4bd:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000c4c0:	c3                   	ret    
c000c4c1:	90                   	nop

c000c4c2 <GDT::GDT()>:
c000c4c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c4c6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c4cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c4d0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c4d6:	90                   	nop
c000c4d7:	c3                   	ret    

c000c4d8 <GDT::addEntry(GDTEntry)>:
c000c4d8:	53                   	push   ebx
c000c4d9:	83 ec 0c             	sub    esp,0xc
c000c4dc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c4e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c4e2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000c4e9:	52                   	push   edx
c000c4ea:	50                   	push   eax
c000c4eb:	68 bd 87 03 c0       	push   0xc00387bd
c000c4f0:	e8 db 06 00 00       	call   c000cbd0 <kprintf(char const*, ...)>
c000c4f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c4f7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c4fb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c4ff:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000c503:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000c507:	8d 50 01             	lea    edx,[eax+0x1]
c000c50a:	c1 e0 03             	shl    eax,0x3
c000c50d:	89 13                	mov    DWORD PTR [ebx],edx
c000c50f:	83 c4 18             	add    esp,0x18
c000c512:	5b                   	pop    ebx
c000c513:	c3                   	ret    

c000c514 <GDT::getNumberOfEntries()>:
c000c514:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c518:	8b 00                	mov    eax,DWORD PTR [eax]
c000c51a:	c3                   	ret    
c000c51b:	90                   	nop

c000c51c <GDT::flush()>:
c000c51c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c520:	8b 10                	mov    edx,DWORD PTR [eax]
c000c522:	83 c0 04             	add    eax,0x4
c000c525:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000c52c:	a3 a6 b8 03 c0       	mov    ds:0xc003b8a6,eax
c000c531:	66 89 15 a4 b8 03 c0 	mov    WORD PTR ds:0xc003b8a4,dx
c000c538:	e9 f6 3d ff ff       	jmp    c0000333 <loadGDT>
c000c53d:	90                   	nop

c000c53e <GDT::setup()>:
c000c53e:	55                   	push   ebp
c000c53f:	57                   	push   edi
c000c540:	56                   	push   esi
c000c541:	53                   	push   ebx
c000c542:	83 ec 3c             	sub    esp,0x3c
c000c545:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000c549:	6a 00                	push   0x0
c000c54b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000c54f:	53                   	push   ebx
c000c550:	e8 33 ff ff ff       	call   c000c488 <GDTEntry::setBase(unsigned int)>
c000c555:	6a 00                	push   0x0
c000c557:	53                   	push   ebx
c000c558:	e8 47 ff ff ff       	call   c000c4a4 <GDTEntry::setLimit(unsigned int)>
c000c55d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000c565:	6a 00                	push   0x0
c000c567:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000c56b:	53                   	push   ebx
c000c56c:	e8 17 ff ff ff       	call   c000c488 <GDTEntry::setBase(unsigned int)>
c000c571:	68 ff ff ff 00       	push   0xffffff
c000c576:	53                   	push   ebx
c000c577:	e8 28 ff ff ff       	call   c000c4a4 <GDTEntry::setLimit(unsigned int)>
c000c57c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c580:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000c585:	0d 00 9a c0 00       	or     eax,0xc09a00
c000c58a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c58e:	83 c4 20             	add    esp,0x20
c000c591:	6a 00                	push   0x0
c000c593:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000c597:	53                   	push   ebx
c000c598:	e8 eb fe ff ff       	call   c000c488 <GDTEntry::setBase(unsigned int)>
c000c59d:	68 ff ff ff 00       	push   0xffffff
c000c5a2:	53                   	push   ebx
c000c5a3:	e8 fc fe ff ff       	call   c000c4a4 <GDTEntry::setLimit(unsigned int)>
c000c5a8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c5ac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c5b0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000c5b4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000c5b8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c5bc:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000c5c1:	0d 00 92 c0 00       	or     eax,0xc09200
c000c5c6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c5ca:	89 d8                	mov    eax,ebx
c000c5cc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000c5d0:	80 cc 60             	or     ah,0x60
c000c5d3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c5d7:	83 c4 0c             	add    esp,0xc
c000c5da:	89 f8                	mov    eax,edi
c000c5dc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c5e0:	80 cc 60             	or     ah,0x60
c000c5e3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c5e7:	89 c7                	mov    edi,eax
c000c5e9:	55                   	push   ebp
c000c5ea:	e8 e9 fe ff ff       	call   c000c4d8 <GDT::addEntry(GDTEntry)>
c000c5ef:	83 c4 0c             	add    esp,0xc
c000c5f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c5f6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c5fa:	55                   	push   ebp
c000c5fb:	e8 d8 fe ff ff       	call   c000c4d8 <GDT::addEntry(GDTEntry)>
c000c600:	83 c4 0c             	add    esp,0xc
c000c603:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c607:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c60b:	55                   	push   ebp
c000c60c:	e8 c7 fe ff ff       	call   c000c4d8 <GDT::addEntry(GDTEntry)>
c000c611:	83 c4 0c             	add    esp,0xc
c000c614:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c618:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c61c:	53                   	push   ebx
c000c61d:	51                   	push   ecx
c000c61e:	55                   	push   ebp
c000c61f:	e8 b4 fe ff ff       	call   c000c4d8 <GDT::addEntry(GDTEntry)>
c000c624:	83 c4 0c             	add    esp,0xc
c000c627:	57                   	push   edi
c000c628:	56                   	push   esi
c000c629:	55                   	push   ebp
c000c62a:	e8 a9 fe ff ff       	call   c000c4d8 <GDT::addEntry(GDTEntry)>
c000c62f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c632:	e8 e5 fe ff ff       	call   c000c51c <GDT::flush()>
c000c637:	83 c4 4c             	add    esp,0x4c
c000c63a:	5b                   	pop    ebx
c000c63b:	5e                   	pop    esi
c000c63c:	5f                   	pop    edi
c000c63d:	5d                   	pop    ebp
c000c63e:	c3                   	ret    

c000c63f <idleFunction(void*)>:
c000c63f:	53                   	push   ebx
c000c640:	83 ec 08             	sub    esp,0x8
c000c643:	e8 2c 1a 00 00       	call   c000e074 <unlockScheduler()>
c000c648:	e8 69 a8 00 00       	call   c0016eb6 <thisCPU()>
c000c64d:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000c654:	74 41                	je     c000c697 <idleFunction(void*)+0x58>
c000c656:	a1 08 b7 03 c0       	mov    eax,ds:0xc003b708
c000c65b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000c662:	74 33                	je     c000c697 <idleFunction(void*)+0x58>
c000c664:	31 db                	xor    ebx,ebx
c000c666:	52                   	push   edx
c000c667:	52                   	push   edx
c000c668:	68 e1 00 00 00       	push   0xe1
c000c66d:	50                   	push   eax
c000c66e:	e8 59 ec ff ff       	call   c000b2cc <Computer::rdmsr(unsigned int)>
c000c673:	53                   	push   ebx
c000c674:	83 e0 02             	and    eax,0x2
c000c677:	50                   	push   eax
c000c678:	68 e1 00 00 00       	push   0xe1
c000c67d:	ff 35 08 b7 03 c0    	push   DWORD PTR ds:0xc003b708
c000c683:	e8 70 ec ff ff       	call   c000b2f8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000c688:	83 c4 20             	add    esp,0x20
c000c68b:	e8 c0 3a ff ff       	call   c0000150 <doTPAUSE>
c000c690:	e8 4b 20 01 00       	call   c001e6e0 <idleCommon()>
c000c695:	eb f4                	jmp    c000c68b <idleFunction(void*)+0x4c>
c000c697:	fb                   	sti    
c000c698:	f4                   	hlt    
c000c699:	e8 42 20 01 00       	call   c001e6e0 <idleCommon()>
c000c69e:	eb f7                	jmp    c000c697 <idleFunction(void*)+0x58>

c000c6a0 <IDTEntry::IDTEntry(bool)>:
c000c6a0:	83 ec 04             	sub    esp,0x4
c000c6a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c6a7:	88 04 24             	mov    BYTE PTR [esp],al
c000c6aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c6ae:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000c6b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c6b8:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000c6bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c6c0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c6c3:	83 e2 f0             	and    edx,0xfffffff0
c000c6c6:	83 ca 0e             	or     edx,0xe
c000c6c9:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c6cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c6d0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c6d3:	83 e2 ef             	and    edx,0xffffffef
c000c6d6:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c6d9:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000c6dd:	74 04                	je     c000c6e3 <IDTEntry::IDTEntry(bool)+0x43>
c000c6df:	b2 03                	mov    dl,0x3
c000c6e1:	eb 02                	jmp    c000c6e5 <IDTEntry::IDTEntry(bool)+0x45>
c000c6e3:	b2 00                	mov    dl,0x0
c000c6e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c6e9:	83 e2 03             	and    edx,0x3
c000c6ec:	88 d1                	mov    cl,dl
c000c6ee:	c1 e1 05             	shl    ecx,0x5
c000c6f1:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c6f4:	83 e2 9f             	and    edx,0xffffff9f
c000c6f7:	09 ca                	or     edx,ecx
c000c6f9:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c6fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c700:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c703:	83 ca 80             	or     edx,0xffffff80
c000c706:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c709:	90                   	nop
c000c70a:	83 c4 04             	add    esp,0x4
c000c70d:	c3                   	ret    

c000c70e <IDTEntry::setOffset(unsigned int)>:
c000c70e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c712:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c716:	66 89 02             	mov    WORD PTR [edx],ax
c000c719:	c1 e8 10             	shr    eax,0x10
c000c71c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000c720:	c3                   	ret    
c000c721:	90                   	nop

c000c722 <IDT::IDT()>:
c000c722:	90                   	nop
c000c723:	c3                   	ret    

c000c724 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000c724:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c728:	83 c0 30             	add    eax,0x30
c000c72b:	c3                   	ret    

c000c72c <IDT::addEntry(IDTEntry, int)>:
c000c72c:	53                   	push   ebx
c000c72d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c731:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c735:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c739:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c73d:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000c740:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000c744:	5b                   	pop    ebx
c000c745:	c3                   	ret    

c000c746 <IDT::addEntry(int, void (*)(), bool)>:
c000c746:	53                   	push   ebx
c000c747:	83 ec 10             	sub    esp,0x10
c000c74a:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000c74f:	50                   	push   eax
c000c750:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000c754:	53                   	push   ebx
c000c755:	e8 46 ff ff ff       	call   c000c6a0 <IDTEntry::IDTEntry(bool)>
c000c75a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c75e:	53                   	push   ebx
c000c75f:	e8 aa ff ff ff       	call   c000c70e <IDTEntry::setOffset(unsigned int)>
c000c764:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c768:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c76c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c770:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c774:	e8 b3 ff ff ff       	call   c000c72c <IDT::addEntry(IDTEntry, int)>
c000c779:	83 c4 30             	add    esp,0x30
c000c77c:	5b                   	pop    ebx
c000c77d:	c3                   	ret    

c000c77e <IDT::flush()>:
c000c77e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c782:	66 c7 05 ac b8 03 c0 ff 07 	mov    WORD PTR ds:0xc003b8ac,0x7ff
c000c78b:	a3 ae b8 03 c0       	mov    ds:0xc003b8ae,eax
c000c790:	0f 01 1d ac b8 03 c0 	lidtd  ds:0xc003b8ac
c000c797:	c3                   	ret    

c000c798 <IDT::setup()>:
c000c798:	57                   	push   edi
c000c799:	56                   	push   esi
c000c79a:	53                   	push   ebx
c000c79b:	83 ec 10             	sub    esp,0x10
c000c79e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c7a2:	6a 00                	push   0x0
c000c7a4:	68 53 03 00 c0       	push   0xc0000353
c000c7a9:	6a 00                	push   0x0
c000c7ab:	53                   	push   ebx
c000c7ac:	e8 95 ff ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c7b1:	6a 00                	push   0x0
c000c7b3:	68 63 03 00 c0       	push   0xc0000363
c000c7b8:	6a 01                	push   0x1
c000c7ba:	53                   	push   ebx
c000c7bb:	e8 86 ff ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c7c0:	83 c4 20             	add    esp,0x20
c000c7c3:	6a 00                	push   0x0
c000c7c5:	68 6d 03 00 c0       	push   0xc000036d
c000c7ca:	6a 02                	push   0x2
c000c7cc:	53                   	push   ebx
c000c7cd:	e8 74 ff ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c7d2:	6a 00                	push   0x0
c000c7d4:	68 77 03 00 c0       	push   0xc0000377
c000c7d9:	6a 03                	push   0x3
c000c7db:	53                   	push   ebx
c000c7dc:	e8 65 ff ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c7e1:	83 c4 20             	add    esp,0x20
c000c7e4:	6a 00                	push   0x0
c000c7e6:	68 81 03 00 c0       	push   0xc0000381
c000c7eb:	6a 04                	push   0x4
c000c7ed:	53                   	push   ebx
c000c7ee:	e8 53 ff ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c7f3:	6a 00                	push   0x0
c000c7f5:	68 8b 03 00 c0       	push   0xc000038b
c000c7fa:	6a 05                	push   0x5
c000c7fc:	53                   	push   ebx
c000c7fd:	e8 44 ff ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c802:	83 c4 20             	add    esp,0x20
c000c805:	6a 00                	push   0x0
c000c807:	68 95 03 00 c0       	push   0xc0000395
c000c80c:	6a 06                	push   0x6
c000c80e:	53                   	push   ebx
c000c80f:	e8 32 ff ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c814:	6a 00                	push   0x0
c000c816:	68 9f 03 00 c0       	push   0xc000039f
c000c81b:	6a 07                	push   0x7
c000c81d:	53                   	push   ebx
c000c81e:	e8 23 ff ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c823:	83 c4 20             	add    esp,0x20
c000c826:	6a 00                	push   0x0
c000c828:	68 a9 03 00 c0       	push   0xc00003a9
c000c82d:	6a 08                	push   0x8
c000c82f:	53                   	push   ebx
c000c830:	e8 11 ff ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c835:	6a 00                	push   0x0
c000c837:	68 b1 03 00 c0       	push   0xc00003b1
c000c83c:	6a 09                	push   0x9
c000c83e:	53                   	push   ebx
c000c83f:	e8 02 ff ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c844:	83 c4 20             	add    esp,0x20
c000c847:	6a 00                	push   0x0
c000c849:	68 bb 03 00 c0       	push   0xc00003bb
c000c84e:	6a 0a                	push   0xa
c000c850:	53                   	push   ebx
c000c851:	e8 f0 fe ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c856:	6a 00                	push   0x0
c000c858:	68 c3 03 00 c0       	push   0xc00003c3
c000c85d:	6a 0b                	push   0xb
c000c85f:	53                   	push   ebx
c000c860:	e8 e1 fe ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c865:	83 c4 20             	add    esp,0x20
c000c868:	6a 00                	push   0x0
c000c86a:	68 cb 03 00 c0       	push   0xc00003cb
c000c86f:	6a 0c                	push   0xc
c000c871:	53                   	push   ebx
c000c872:	e8 cf fe ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c877:	6a 00                	push   0x0
c000c879:	68 d3 03 00 c0       	push   0xc00003d3
c000c87e:	6a 0d                	push   0xd
c000c880:	53                   	push   ebx
c000c881:	e8 c0 fe ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c886:	83 c4 20             	add    esp,0x20
c000c889:	6a 00                	push   0x0
c000c88b:	68 db 03 00 c0       	push   0xc00003db
c000c890:	6a 0e                	push   0xe
c000c892:	53                   	push   ebx
c000c893:	e8 ae fe ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c898:	6a 00                	push   0x0
c000c89a:	68 e3 03 00 c0       	push   0xc00003e3
c000c89f:	6a 0f                	push   0xf
c000c8a1:	53                   	push   ebx
c000c8a2:	e8 9f fe ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c8a7:	83 c4 20             	add    esp,0x20
c000c8aa:	6a 00                	push   0x0
c000c8ac:	68 ed 03 00 c0       	push   0xc00003ed
c000c8b1:	6a 10                	push   0x10
c000c8b3:	53                   	push   ebx
c000c8b4:	e8 8d fe ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c8b9:	6a 00                	push   0x0
c000c8bb:	68 f7 03 00 c0       	push   0xc00003f7
c000c8c0:	6a 11                	push   0x11
c000c8c2:	53                   	push   ebx
c000c8c3:	e8 7e fe ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c8c8:	83 c4 20             	add    esp,0x20
c000c8cb:	6a 00                	push   0x0
c000c8cd:	68 01 04 00 c0       	push   0xc0000401
c000c8d2:	6a 12                	push   0x12
c000c8d4:	53                   	push   ebx
c000c8d5:	e8 6c fe ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c8da:	6a 01                	push   0x1
c000c8dc:	68 0b 04 00 c0       	push   0xc000040b
c000c8e1:	6a 60                	push   0x60
c000c8e3:	53                   	push   ebx
c000c8e4:	e8 5d fe ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c8e9:	83 c4 20             	add    esp,0x20
c000c8ec:	6a 00                	push   0x0
c000c8ee:	68 15 04 00 c0       	push   0xc0000415
c000c8f3:	6a 20                	push   0x20
c000c8f5:	53                   	push   ebx
c000c8f6:	e8 4b fe ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c8fb:	6a 00                	push   0x0
c000c8fd:	68 1f 04 00 c0       	push   0xc000041f
c000c902:	6a 21                	push   0x21
c000c904:	53                   	push   ebx
c000c905:	e8 3c fe ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c90a:	83 c4 20             	add    esp,0x20
c000c90d:	6a 00                	push   0x0
c000c90f:	68 29 04 00 c0       	push   0xc0000429
c000c914:	6a 22                	push   0x22
c000c916:	53                   	push   ebx
c000c917:	e8 2a fe ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c91c:	6a 00                	push   0x0
c000c91e:	68 33 04 00 c0       	push   0xc0000433
c000c923:	6a 23                	push   0x23
c000c925:	53                   	push   ebx
c000c926:	e8 1b fe ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c92b:	83 c4 20             	add    esp,0x20
c000c92e:	6a 00                	push   0x0
c000c930:	68 3d 04 00 c0       	push   0xc000043d
c000c935:	6a 24                	push   0x24
c000c937:	53                   	push   ebx
c000c938:	e8 09 fe ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c93d:	6a 00                	push   0x0
c000c93f:	68 47 04 00 c0       	push   0xc0000447
c000c944:	6a 25                	push   0x25
c000c946:	53                   	push   ebx
c000c947:	e8 fa fd ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c94c:	83 c4 20             	add    esp,0x20
c000c94f:	6a 00                	push   0x0
c000c951:	68 51 04 00 c0       	push   0xc0000451
c000c956:	6a 26                	push   0x26
c000c958:	53                   	push   ebx
c000c959:	e8 e8 fd ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c95e:	6a 00                	push   0x0
c000c960:	68 5b 04 00 c0       	push   0xc000045b
c000c965:	6a 27                	push   0x27
c000c967:	53                   	push   ebx
c000c968:	e8 d9 fd ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c96d:	83 c4 20             	add    esp,0x20
c000c970:	6a 00                	push   0x0
c000c972:	68 65 04 00 c0       	push   0xc0000465
c000c977:	6a 28                	push   0x28
c000c979:	53                   	push   ebx
c000c97a:	e8 c7 fd ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c97f:	6a 00                	push   0x0
c000c981:	68 6f 04 00 c0       	push   0xc000046f
c000c986:	6a 29                	push   0x29
c000c988:	53                   	push   ebx
c000c989:	e8 b8 fd ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c98e:	83 c4 20             	add    esp,0x20
c000c991:	6a 00                	push   0x0
c000c993:	68 79 04 00 c0       	push   0xc0000479
c000c998:	6a 2a                	push   0x2a
c000c99a:	53                   	push   ebx
c000c99b:	e8 a6 fd ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c9a0:	6a 00                	push   0x0
c000c9a2:	68 83 04 00 c0       	push   0xc0000483
c000c9a7:	6a 2b                	push   0x2b
c000c9a9:	53                   	push   ebx
c000c9aa:	e8 97 fd ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c9af:	83 c4 20             	add    esp,0x20
c000c9b2:	6a 00                	push   0x0
c000c9b4:	68 8d 04 00 c0       	push   0xc000048d
c000c9b9:	6a 2c                	push   0x2c
c000c9bb:	53                   	push   ebx
c000c9bc:	e8 85 fd ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c9c1:	6a 00                	push   0x0
c000c9c3:	68 97 04 00 c0       	push   0xc0000497
c000c9c8:	6a 2d                	push   0x2d
c000c9ca:	53                   	push   ebx
c000c9cb:	e8 76 fd ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c9d0:	83 c4 20             	add    esp,0x20
c000c9d3:	6a 00                	push   0x0
c000c9d5:	68 a1 04 00 c0       	push   0xc00004a1
c000c9da:	6a 2e                	push   0x2e
c000c9dc:	53                   	push   ebx
c000c9dd:	e8 64 fd ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c9e2:	6a 00                	push   0x0
c000c9e4:	68 ab 04 00 c0       	push   0xc00004ab
c000c9e9:	6a 2f                	push   0x2f
c000c9eb:	53                   	push   ebx
c000c9ec:	e8 55 fd ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000c9f1:	83 c4 20             	add    esp,0x20
c000c9f4:	6a 00                	push   0x0
c000c9f6:	68 b5 04 00 c0       	push   0xc00004b5
c000c9fb:	6a 30                	push   0x30
c000c9fd:	53                   	push   ebx
c000c9fe:	e8 43 fd ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000ca03:	6a 00                	push   0x0
c000ca05:	68 bf 04 00 c0       	push   0xc00004bf
c000ca0a:	6a 31                	push   0x31
c000ca0c:	53                   	push   ebx
c000ca0d:	e8 34 fd ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000ca12:	83 c4 20             	add    esp,0x20
c000ca15:	6a 00                	push   0x0
c000ca17:	68 c9 04 00 c0       	push   0xc00004c9
c000ca1c:	6a 32                	push   0x32
c000ca1e:	53                   	push   ebx
c000ca1f:	e8 22 fd ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000ca24:	6a 00                	push   0x0
c000ca26:	68 d3 04 00 c0       	push   0xc00004d3
c000ca2b:	6a 33                	push   0x33
c000ca2d:	53                   	push   ebx
c000ca2e:	e8 13 fd ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000ca33:	83 c4 20             	add    esp,0x20
c000ca36:	6a 00                	push   0x0
c000ca38:	68 dd 04 00 c0       	push   0xc00004dd
c000ca3d:	6a 34                	push   0x34
c000ca3f:	53                   	push   ebx
c000ca40:	e8 01 fd ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000ca45:	6a 00                	push   0x0
c000ca47:	68 e7 04 00 c0       	push   0xc00004e7
c000ca4c:	6a 35                	push   0x35
c000ca4e:	53                   	push   ebx
c000ca4f:	e8 f2 fc ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000ca54:	83 c4 20             	add    esp,0x20
c000ca57:	6a 00                	push   0x0
c000ca59:	68 f1 04 00 c0       	push   0xc00004f1
c000ca5e:	6a 36                	push   0x36
c000ca60:	53                   	push   ebx
c000ca61:	e8 e0 fc ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000ca66:	6a 00                	push   0x0
c000ca68:	68 fb 04 00 c0       	push   0xc00004fb
c000ca6d:	6a 37                	push   0x37
c000ca6f:	53                   	push   ebx
c000ca70:	e8 d1 fc ff ff       	call   c000c746 <IDT::addEntry(int, void (*)(), bool)>
c000ca75:	83 c4 20             	add    esp,0x20
c000ca78:	e8 02 47 00 00       	call   c001117f <Virt::getAKernelVAS()>
c000ca7d:	52                   	push   edx
c000ca7e:	6a 03                	push   0x3
c000ca80:	6a 02                	push   0x2
c000ca82:	50                   	push   eax
c000ca83:	e8 9e 4c 00 00       	call   c0011726 <VAS::allocatePages(int, int)>
c000ca88:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ca8f:	89 c6                	mov    esi,eax
c000ca91:	e8 ea 56 00 00       	call   c0012180 <operator new(unsigned long)>
c000ca96:	81 c6 00 20 00 00    	add    esi,0x2000
c000ca9c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca9f:	89 c7                	mov    edi,eax
c000caa1:	e8 30 40 00 00       	call   c0010ad6 <TSS::TSS()>
c000caa6:	83 c4 0c             	add    esp,0xc
c000caa9:	68 a9 03 00 c0       	push   0xc00003a9
c000caae:	56                   	push   esi
c000caaf:	57                   	push   edi
c000cab0:	e8 61 40 00 00       	call   c0010b16 <TSS::setup(unsigned long, unsigned long)>
c000cab5:	59                   	pop    ecx
c000cab6:	89 c6                	mov    esi,eax
c000cab8:	5f                   	pop    edi
c000cab9:	6a 00                	push   0x0
c000cabb:	8d 44 24 14          	lea    eax,[esp+0x14]
c000cabf:	50                   	push   eax
c000cac0:	e8 db fb ff ff       	call   c000c6a0 <IDTEntry::IDTEntry(bool)>
c000cac5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cac9:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000cace:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000cad5:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000cadb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cadf:	80 ce 05             	or     dh,0x5
c000cae2:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000cae5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cae9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000caed:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000caf0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000caf3:	e8 86 fc ff ff       	call   c000c77e <IDT::flush()>
c000caf8:	83 c4 20             	add    esp,0x20
c000cafb:	5b                   	pop    ebx
c000cafc:	5e                   	pop    esi
c000cafd:	5f                   	pop    edi
c000cafe:	c3                   	ret    

c000caff <stringifyxWithBase(unsigned int, char*, int)>:
c000caff:	57                   	push   edi
c000cb00:	b9 3f 00 00 00       	mov    ecx,0x3f
c000cb05:	56                   	push   esi
c000cb06:	be dc 87 03 c0       	mov    esi,0xc00387dc
c000cb0b:	53                   	push   ebx
c000cb0c:	83 ec 40             	sub    esp,0x40
c000cb0f:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000cb13:	8d 7c 24 01          	lea    edi,[esp+0x1]
c000cb17:	fc                   	cld    
c000cb18:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cb1a:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000cb1e:	83 f9 3e             	cmp    ecx,0x3e
c000cb21:	7e 05                	jle    c000cb28 <stringifyxWithBase(unsigned int, char*, int)+0x29>
c000cb23:	b9 3e 00 00 00       	mov    ecx,0x3e
c000cb28:	89 df                	mov    edi,ebx
c000cb2a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000cb2e:	eb 02                	jmp    c000cb32 <stringifyxWithBase(unsigned int, char*, int)+0x33>
c000cb30:	89 c7                	mov    edi,eax
c000cb32:	31 d2                	xor    edx,edx
c000cb34:	46                   	inc    esi
c000cb35:	89 f8                	mov    eax,edi
c000cb37:	f7 f1                	div    ecx
c000cb39:	39 cf                	cmp    edi,ecx
c000cb3b:	73 f3                	jae    c000cb30 <stringifyxWithBase(unsigned int, char*, int)+0x31>
c000cb3d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000cb40:	eb 02                	jmp    c000cb44 <stringifyxWithBase(unsigned int, char*, int)+0x45>
c000cb42:	89 c3                	mov    ebx,eax
c000cb44:	31 d2                	xor    edx,edx
c000cb46:	4e                   	dec    esi
c000cb47:	89 d8                	mov    eax,ebx
c000cb49:	f7 f1                	div    ecx
c000cb4b:	39 cb                	cmp    ebx,ecx
c000cb4d:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000cb51:	88 16                	mov    BYTE PTR [esi],dl
c000cb53:	73 ed                	jae    c000cb42 <stringifyxWithBase(unsigned int, char*, int)+0x43>
c000cb55:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000cb59:	83 c4 40             	add    esp,0x40
c000cb5c:	5b                   	pop    ebx
c000cb5d:	5e                   	pop    esi
c000cb5e:	5f                   	pop    edi
c000cb5f:	c3                   	ret    

c000cb60 <logc(char)>:
c000cb60:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cb64:	ba fd 03 00 00       	mov    edx,0x3fd
c000cb69:	ec                   	in     al,dx
c000cb6a:	a8 20                	test   al,0x20
c000cb6c:	74 fb                	je     c000cb69 <logc(char)+0x9>
c000cb6e:	ba f8 03 00 00       	mov    edx,0x3f8
c000cb73:	88 c8                	mov    al,cl
c000cb75:	ee                   	out    dx,al
c000cb76:	c3                   	ret    

c000cb77 <logs(char*)>:
c000cb77:	53                   	push   ebx
c000cb78:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000cb7c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cb7f:	84 c0                	test   al,al
c000cb81:	74 0f                	je     c000cb92 <logs(char*)+0x1b>
c000cb83:	50                   	push   eax
c000cb84:	43                   	inc    ebx
c000cb85:	e8 d6 ff ff ff       	call   c000cb60 <logc(char)>
c000cb8a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cb8d:	5a                   	pop    edx
c000cb8e:	84 c0                	test   al,al
c000cb90:	75 f1                	jne    c000cb83 <logs(char*)+0xc>
c000cb92:	5b                   	pop    ebx
c000cb93:	c3                   	ret    

c000cb94 <logWriteInt(unsigned int)>:
c000cb94:	83 ec 10             	sub    esp,0x10
c000cb97:	6a 0a                	push   0xa
c000cb99:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cb9d:	50                   	push   eax
c000cb9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cba2:	e8 58 ff ff ff       	call   c000caff <stringifyxWithBase(unsigned int, char*, int)>
c000cba7:	50                   	push   eax
c000cba8:	e8 ca ff ff ff       	call   c000cb77 <logs(char*)>
c000cbad:	83 c4 20             	add    esp,0x20
c000cbb0:	c3                   	ret    

c000cbb1 <logWriteIntBase(unsigned int, int)>:
c000cbb1:	83 ec 10             	sub    esp,0x10
c000cbb4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbb8:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cbbc:	50                   	push   eax
c000cbbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbc1:	e8 39 ff ff ff       	call   c000caff <stringifyxWithBase(unsigned int, char*, int)>
c000cbc6:	50                   	push   eax
c000cbc7:	e8 ab ff ff ff       	call   c000cb77 <logs(char*)>
c000cbcc:	83 c4 20             	add    esp,0x20
c000cbcf:	c3                   	ret    

c000cbd0 <kprintf(char const*, ...)>:
c000cbd0:	55                   	push   ebp
c000cbd1:	57                   	push   edi
c000cbd2:	56                   	push   esi
c000cbd3:	53                   	push   ebx
c000cbd4:	83 ec 0c             	sub    esp,0xc
c000cbd7:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cbdb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cbdf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cbe3:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cbe6:	84 c0                	test   al,al
c000cbe8:	74 4a                	je     c000cc34 <kprintf(char const*, ...)+0x64>
c000cbea:	31 db                	xor    ebx,ebx
c000cbec:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cbef:	3c 25                	cmp    al,0x25
c000cbf1:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cbf4:	0f 85 e4 00 00 00    	jne    c000ccde <kprintf(char const*, ...)+0x10e>
c000cbfa:	83 c3 02             	add    ebx,0x2
c000cbfd:	8a 07                	mov    al,BYTE PTR [edi]
c000cbff:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000cc02:	83 e8 25             	sub    eax,0x25
c000cc05:	3c 53                	cmp    al,0x53
c000cc07:	0f 87 ba 00 00 00    	ja     c000ccc7 <kprintf(char const*, ...)+0xf7>
c000cc0d:	0f b6 c0             	movzx  eax,al
c000cc10:	ff 24 85 30 89 03 c0 	jmp    DWORD PTR [eax*4-0x3ffc76d0]
c000cc17:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cc1b:	89 c8                	mov    eax,ecx
c000cc1d:	83 c1 04             	add    ecx,0x4
c000cc20:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cc24:	ff 30                	push   DWORD PTR [eax]
c000cc26:	e8 4c ff ff ff       	call   c000cb77 <logs(char*)>
c000cc2b:	58                   	pop    eax
c000cc2c:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000cc30:	84 c0                	test   al,al
c000cc32:	75 b8                	jne    c000cbec <kprintf(char const*, ...)+0x1c>
c000cc34:	83 c4 0c             	add    esp,0xc
c000cc37:	5b                   	pop    ebx
c000cc38:	5e                   	pop    esi
c000cc39:	5f                   	pop    edi
c000cc3a:	5d                   	pop    ebp
c000cc3b:	c3                   	ret    
c000cc3c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cc40:	89 d0                	mov    eax,edx
c000cc42:	83 c2 04             	add    edx,0x4
c000cc45:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cc49:	ff 30                	push   DWORD PTR [eax]
c000cc4b:	e8 44 ff ff ff       	call   c000cb94 <logWriteInt(unsigned int)>
c000cc50:	58                   	pop    eax
c000cc51:	eb d9                	jmp    c000cc2c <kprintf(char const*, ...)+0x5c>
c000cc53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cc57:	89 d0                	mov    eax,edx
c000cc59:	83 c2 04             	add    edx,0x4
c000cc5c:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cc5f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cc63:	50                   	push   eax
c000cc64:	e8 f7 fe ff ff       	call   c000cb60 <logc(char)>
c000cc69:	58                   	pop    eax
c000cc6a:	eb c0                	jmp    c000cc2c <kprintf(char const*, ...)+0x5c>
c000cc6c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cc70:	89 c8                	mov    eax,ecx
c000cc72:	83 c1 04             	add    ecx,0x4
c000cc75:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cc79:	ff 30                	push   DWORD PTR [eax]
c000cc7b:	e8 14 ff ff ff       	call   c000cb94 <logWriteInt(unsigned int)>
c000cc80:	5f                   	pop    edi
c000cc81:	eb a9                	jmp    c000cc2c <kprintf(char const*, ...)+0x5c>
c000cc83:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cc87:	89 c8                	mov    eax,ecx
c000cc89:	83 c1 04             	add    ecx,0x4
c000cc8c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cc90:	6a 10                	push   0x10
c000cc92:	ff 30                	push   DWORD PTR [eax]
c000cc94:	e8 18 ff ff ff       	call   c000cbb1 <logWriteIntBase(unsigned int, int)>
c000cc99:	59                   	pop    ecx
c000cc9a:	5f                   	pop    edi
c000cc9b:	eb 8f                	jmp    c000cc2c <kprintf(char const*, ...)+0x5c>
c000cc9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cca1:	89 d0                	mov    eax,edx
c000cca3:	83 c2 08             	add    edx,0x8
c000cca6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ccaa:	6a 10                	push   0x10
c000ccac:	ff 30                	push   DWORD PTR [eax]
c000ccae:	e8 fe fe ff ff       	call   c000cbb1 <logWriteIntBase(unsigned int, int)>
c000ccb3:	58                   	pop    eax
c000ccb4:	5a                   	pop    edx
c000ccb5:	e9 72 ff ff ff       	jmp    c000cc2c <kprintf(char const*, ...)+0x5c>
c000ccba:	6a 25                	push   0x25
c000ccbc:	e8 9f fe ff ff       	call   c000cb60 <logc(char)>
c000ccc1:	58                   	pop    eax
c000ccc2:	e9 65 ff ff ff       	jmp    c000cc2c <kprintf(char const*, ...)+0x5c>
c000ccc7:	6a 25                	push   0x25
c000ccc9:	e8 92 fe ff ff       	call   c000cb60 <logc(char)>
c000ccce:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ccd1:	50                   	push   eax
c000ccd2:	e8 89 fe ff ff       	call   c000cb60 <logc(char)>
c000ccd7:	5a                   	pop    edx
c000ccd8:	59                   	pop    ecx
c000ccd9:	e9 4e ff ff ff       	jmp    c000cc2c <kprintf(char const*, ...)+0x5c>
c000ccde:	50                   	push   eax
c000ccdf:	89 eb                	mov    ebx,ebp
c000cce1:	e8 7a fe ff ff       	call   c000cb60 <logc(char)>
c000cce6:	89 fd                	mov    ebp,edi
c000cce8:	58                   	pop    eax
c000cce9:	e9 3e ff ff ff       	jmp    c000cc2c <kprintf(char const*, ...)+0x5c>

c000ccee <panic(char const*)>:
c000ccee:	55                   	push   ebp
c000ccef:	89 e5                	mov    ebp,esp
c000ccf1:	53                   	push   ebx
c000ccf2:	50                   	push   eax
c000ccf3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000ccf6:	fa                   	cli    
c000ccf7:	c6 05 b2 b8 03 c0 01 	mov    BYTE PTR ds:0xc003b8b2,0x1
c000ccfe:	53                   	push   ebx
c000ccff:	c6 05 40 ab 03 c0 00 	mov    BYTE PTR ds:0xc003ab40,0x0
c000cd06:	68 80 8a 03 c0       	push   0xc0038a80
c000cd0b:	e8 c0 fe ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c000cd10:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c000cd15:	52                   	push   edx
c000cd16:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cd1c:	e8 36 36 00 00       	call   c0010357 <setActiveTerminal(VgaText*)>
c000cd21:	83 c4 0c             	add    esp,0xc
c000cd24:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c000cd29:	6a 01                	push   0x1
c000cd2b:	6a 0f                	push   0xf
c000cd2d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cd33:	e8 5e 30 00 00       	call   c000fd96 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000cd38:	59                   	pop    ecx
c000cd39:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c000cd3e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cd44:	e8 af 38 00 00       	call   c00105f8 <VgaText::clearScreen()>
c000cd49:	58                   	pop    eax
c000cd4a:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c000cd4f:	5a                   	pop    edx
c000cd50:	68 99 8a 03 c0       	push   0xc0038a99
c000cd55:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cd5b:	e8 16 3a 00 00       	call   c0010776 <VgaText::puts(char const*)>
c000cd60:	59                   	pop    ecx
c000cd61:	58                   	pop    eax
c000cd62:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c000cd67:	68 1c 88 03 c0       	push   0xc003881c
c000cd6c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cd72:	e8 ff 39 00 00       	call   c0010776 <VgaText::puts(char const*)>
c000cd77:	58                   	pop    eax
c000cd78:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c000cd7d:	5a                   	pop    edx
c000cd7e:	68 b5 8a 03 c0       	push   0xc0038ab5
c000cd83:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cd89:	e8 e8 39 00 00       	call   c0010776 <VgaText::puts(char const*)>
c000cd8e:	59                   	pop    ecx
c000cd8f:	58                   	pop    eax
c000cd90:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c000cd95:	53                   	push   ebx
c000cd96:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cd9c:	e8 d5 39 00 00       	call   c0010776 <VgaText::puts(char const*)>
c000cda1:	58                   	pop    eax
c000cda2:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c000cda7:	5a                   	pop    edx
c000cda8:	68 d5 8a 03 c0       	push   0xc0038ad5
c000cdad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cdb3:	e8 be 39 00 00       	call   c0010776 <VgaText::puts(char const*)>
c000cdb8:	59                   	pop    ecx
c000cdb9:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c000cdbe:	5b                   	pop    ebx
c000cdbf:	68 58 88 03 c0       	push   0xc0038858
c000cdc4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cdca:	e8 a7 39 00 00       	call   c0010776 <VgaText::puts(char const*)>
c000cdcf:	58                   	pop    eax
c000cdd0:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c000cdd5:	5a                   	pop    edx
c000cdd6:	68 b5 8a 03 c0       	push   0xc0038ab5
c000cddb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cde1:	e8 90 39 00 00       	call   c0010776 <VgaText::puts(char const*)>
c000cde6:	59                   	pop    ecx
c000cde7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000cdec:	5b                   	pop    ebx
c000cded:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000cdf0:	83 c0 0c             	add    eax,0xc
c000cdf3:	50                   	push   eax
c000cdf4:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c000cdf9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cdff:	e8 72 39 00 00       	call   c0010776 <VgaText::puts(char const*)>
c000ce04:	58                   	pop    eax
c000ce05:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c000ce0a:	5a                   	pop    edx
c000ce0b:	68 d4 8a 03 c0       	push   0xc0038ad4
c000ce10:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ce16:	e8 5b 39 00 00       	call   c0010776 <VgaText::puts(char const*)>
c000ce1b:	59                   	pop    ecx
c000ce1c:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c000ce21:	5b                   	pop    ebx
c000ce22:	68 84 88 03 c0       	push   0xc0038884
c000ce27:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ce2d:	e8 44 39 00 00       	call   c0010776 <VgaText::puts(char const*)>
c000ce32:	58                   	pop    eax
c000ce33:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c000ce38:	5a                   	pop    edx
c000ce39:	68 c4 88 03 c0       	push   0xc00388c4
c000ce3e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ce44:	e8 2d 39 00 00       	call   c0010776 <VgaText::puts(char const*)>
c000ce49:	59                   	pop    ecx
c000ce4a:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c000ce4f:	5b                   	pop    ebx
c000ce50:	68 c0 8a 03 c0       	push   0xc0038ac0
c000ce55:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ce5b:	e8 16 39 00 00       	call   c0010776 <VgaText::puts(char const*)>
c000ce60:	58                   	pop    eax
c000ce61:	5a                   	pop    edx
c000ce62:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ce65:	68 d8 8a 03 c0       	push   0xc0038ad8
c000ce6a:	e8 61 fd ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c000ce6f:	59                   	pop    ecx
c000ce70:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce73:	5b                   	pop    ebx
c000ce74:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ce77:	68 e1 8a 03 c0       	push   0xc0038ae1
c000ce7c:	e8 4f fd ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c000ce81:	5a                   	pop    edx
c000ce82:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce85:	59                   	pop    ecx
c000ce86:	8b 00                	mov    eax,DWORD PTR [eax]
c000ce88:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ce8b:	68 79 99 03 c0       	push   0xc0039979
c000ce90:	e8 3b fd ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c000ce95:	5b                   	pop    ebx
c000ce96:	58                   	pop    eax
c000ce97:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c000ce9c:	68 08 89 03 c0       	push   0xc0038908
c000cea1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cea7:	e8 ca 38 00 00       	call   c0010776 <VgaText::puts(char const*)>
c000ceac:	58                   	pop    eax
c000cead:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c000ceb2:	5a                   	pop    edx
c000ceb3:	68 ea 8a 03 c0       	push   0xc0038aea
c000ceb8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cebe:	e8 b3 38 00 00       	call   c0010776 <VgaText::puts(char const*)>
c000cec3:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c000cec8:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000cece:	e8 22 18 01 00       	call   c001e6f5 <CPU::readCR0()>
c000ced3:	59                   	pop    ecx
c000ced4:	5a                   	pop    edx
c000ced5:	50                   	push   eax
c000ced6:	53                   	push   ebx
c000ced7:	e8 c0 38 00 00       	call   c001079c <VgaText::putx(unsigned int)>
c000cedc:	59                   	pop    ecx
c000cedd:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c000cee2:	5b                   	pop    ebx
c000cee3:	68 f4 8a 03 c0       	push   0xc0038af4
c000cee8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000ceee:	e8 83 38 00 00       	call   c0010776 <VgaText::puts(char const*)>
c000cef3:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c000cef8:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000cefe:	e8 04 18 01 00       	call   c001e707 <CPU::readCR2()>
c000cf03:	5a                   	pop    edx
c000cf04:	59                   	pop    ecx
c000cf05:	50                   	push   eax
c000cf06:	53                   	push   ebx
c000cf07:	e8 90 38 00 00       	call   c001079c <VgaText::putx(unsigned int)>
c000cf0c:	5b                   	pop    ebx
c000cf0d:	58                   	pop    eax
c000cf0e:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c000cf13:	68 fe 8a 03 c0       	push   0xc0038afe
c000cf18:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cf1e:	e8 53 38 00 00       	call   c0010776 <VgaText::puts(char const*)>
c000cf23:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c000cf28:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000cf2e:	e8 e6 17 01 00       	call   c001e719 <CPU::readCR3()>
c000cf33:	5a                   	pop    edx
c000cf34:	59                   	pop    ecx
c000cf35:	50                   	push   eax
c000cf36:	53                   	push   ebx
c000cf37:	e8 60 38 00 00       	call   c001079c <VgaText::putx(unsigned int)>
c000cf3c:	5b                   	pop    ebx
c000cf3d:	58                   	pop    eax
c000cf3e:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c000cf43:	68 11 8b 03 c0       	push   0xc0038b11
c000cf48:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cf4e:	e8 23 38 00 00       	call   c0010776 <VgaText::puts(char const*)>
c000cf53:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c000cf58:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000cf5e:	e8 c8 17 01 00       	call   c001e72b <CPU::readCR4()>
c000cf63:	5a                   	pop    edx
c000cf64:	59                   	pop    ecx
c000cf65:	50                   	push   eax
c000cf66:	53                   	push   ebx
c000cf67:	e8 30 38 00 00       	call   c001079c <VgaText::putx(unsigned int)>
c000cf6c:	5b                   	pop    ebx
c000cf6d:	58                   	pop    eax
c000cf6e:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c000cf73:	68 1b 8b 03 c0       	push   0xc0038b1b
c000cf78:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cf7e:	e8 f3 37 00 00       	call   c0010776 <VgaText::puts(char const*)>
c000cf83:	5a                   	pop    edx
c000cf84:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c000cf89:	59                   	pop    ecx
c000cf8a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000cf90:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cf93:	50                   	push   eax
c000cf94:	e8 03 38 00 00       	call   c001079c <VgaText::putx(unsigned int)>
c000cf99:	5b                   	pop    ebx
c000cf9a:	58                   	pop    eax
c000cf9b:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c000cfa0:	68 32 8b 03 c0       	push   0xc0038b32
c000cfa5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cfab:	e8 c6 37 00 00       	call   c0010776 <VgaText::puts(char const*)>
c000cfb0:	5a                   	pop    edx
c000cfb1:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c000cfb6:	59                   	pop    ecx
c000cfb7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000cfbd:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000cfc0:	ff 72 04             	push   DWORD PTR [edx+0x4]
c000cfc3:	50                   	push   eax
c000cfc4:	e8 d3 37 00 00       	call   c001079c <VgaText::putx(unsigned int)>
c000cfc9:	5b                   	pop    ebx
c000cfca:	58                   	pop    eax
c000cfcb:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c000cfd0:	68 32 8b 03 c0       	push   0xc0038b32
c000cfd5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cfdb:	e8 96 37 00 00       	call   c0010776 <VgaText::puts(char const*)>
c000cfe0:	59                   	pop    ecx
c000cfe1:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c000cfe6:	5b                   	pop    ebx
c000cfe7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000cfed:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000cff0:	8b 12                	mov    edx,DWORD PTR [edx]
c000cff2:	ff 72 04             	push   DWORD PTR [edx+0x4]
c000cff5:	50                   	push   eax
c000cff6:	e8 a1 37 00 00       	call   c001079c <VgaText::putx(unsigned int)>
c000cffb:	83 c4 10             	add    esp,0x10
c000cffe:	b2 fe                	mov    dl,0xfe
c000d000:	e4 60                	in     al,0x60
c000d002:	3c 1c                	cmp    al,0x1c
c000d004:	74 04                	je     c000d00a <panic(char const*)+0x31c>
c000d006:	3c 5a                	cmp    al,0x5a
c000d008:	75 f6                	jne    c000d000 <panic(char const*)+0x312>
c000d00a:	e4 64                	in     al,0x64
c000d00c:	a8 02                	test   al,0x2
c000d00e:	75 fa                	jne    c000d00a <panic(char const*)+0x31c>
c000d010:	88 d0                	mov    al,dl
c000d012:	e6 64                	out    0x64,al
c000d014:	fa                   	cli    
c000d015:	f4                   	hlt    
c000d016:	eb e8                	jmp    c000d000 <panic(char const*)+0x312>

c000d018 <sbrk>:
c000d018:	55                   	push   ebp
c000d019:	57                   	push   edi
c000d01a:	56                   	push   esi
c000d01b:	53                   	push   ebx
c000d01c:	83 ec 1c             	sub    esp,0x1c
c000d01f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d023:	85 db                	test   ebx,ebx
c000d025:	74 37                	je     c000d05e <sbrk+0x46>
c000d027:	78 3f                	js     c000d068 <sbrk+0x50>
c000d029:	e8 88 9e 00 00       	call   c0016eb6 <thisCPU()>
c000d02e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000d034:	83 e0 01             	and    eax,0x1
c000d037:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000d03b:	a1 30 ab 03 c0       	mov    eax,ds:0xc003ab30
c000d040:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d044:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000d04a:	89 d8                	mov    eax,ebx
c000d04c:	78 35                	js     c000d083 <sbrk+0x6b>
c000d04e:	c1 f8 0c             	sar    eax,0xc
c000d051:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d055:	89 c7                	mov    edi,eax
c000d057:	be 00 00 00 00       	mov    esi,0x0
c000d05c:	eb 3c                	jmp    c000d09a <sbrk+0x82>
c000d05e:	a1 30 ab 03 c0       	mov    eax,ds:0xc003ab30
c000d063:	e9 ad 00 00 00       	jmp    c000d115 <sbrk+0xfd>
c000d068:	83 ec 08             	sub    esp,0x8
c000d06b:	53                   	push   ebx
c000d06c:	68 38 8b 03 c0       	push   0xc0038b38
c000d071:	e8 5a fb ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c000d076:	83 c4 10             	add    esp,0x10
c000d079:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d07e:	e9 92 00 00 00       	jmp    c000d115 <sbrk+0xfd>
c000d083:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000d089:	eb c3                	jmp    c000d04e <sbrk+0x36>
c000d08b:	81 05 30 ab 03 c0 00 10 00 00 	add    DWORD PTR ds:0xc003ab30,0x1000
c000d095:	46                   	inc    esi
c000d096:	39 f7                	cmp    edi,esi
c000d098:	74 34                	je     c000d0ce <sbrk+0xb6>
c000d09a:	e8 e0 40 00 00       	call   c001117f <Virt::getAKernelVAS()>
c000d09f:	89 c3                	mov    ebx,eax
c000d0a1:	8b 2d 30 ab 03 c0    	mov    ebp,DWORD PTR ds:0xc003ab30
c000d0a7:	e8 c9 06 00 00       	call   c000d775 <Phys::allocatePage()>
c000d0ac:	68 01 04 00 00       	push   0x401
c000d0b1:	55                   	push   ebp
c000d0b2:	50                   	push   eax
c000d0b3:	53                   	push   ebx
c000d0b4:	e8 6d 45 00 00       	call   c0011626 <VAS::mapPage(unsigned long, unsigned long, int)>
c000d0b9:	83 c4 10             	add    esp,0x10
c000d0bc:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d0c1:	74 c8                	je     c000d08b <sbrk+0x73>
c000d0c3:	8b 1d 30 ab 03 c0    	mov    ebx,DWORD PTR ds:0xc003ab30
c000d0c9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000d0cc:	eb bd                	jmp    c000d08b <sbrk+0x73>
c000d0ce:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d0d3:	74 48                	je     c000d11d <sbrk+0x105>
c000d0d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0d9:	89 d3                	mov    ebx,edx
c000d0db:	c1 eb 0a             	shr    ebx,0xa
c000d0de:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000d0e4:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000d0ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d0ee:	c1 e0 0c             	shl    eax,0xc
c000d0f1:	01 d0                	add    eax,edx
c000d0f3:	c1 e8 0a             	shr    eax,0xa
c000d0f6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000d0fb:	2d 00 00 40 00       	sub    eax,0x400000
c000d100:	39 c3                	cmp    ebx,eax
c000d102:	77 0d                	ja     c000d111 <sbrk+0xf9>
c000d104:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000d107:	81 c3 00 10 00 00    	add    ebx,0x1000
c000d10d:	39 d8                	cmp    eax,ebx
c000d10f:	73 f3                	jae    c000d104 <sbrk+0xec>
c000d111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d115:	83 c4 1c             	add    esp,0x1c
c000d118:	5b                   	pop    ebx
c000d119:	5e                   	pop    esi
c000d11a:	5f                   	pop    edi
c000d11b:	5d                   	pop    ebp
c000d11c:	c3                   	ret    
c000d11d:	e8 f7 15 01 00       	call   c001e719 <CPU::readCR3()>
c000d122:	83 ec 0c             	sub    esp,0xc
c000d125:	50                   	push   eax
c000d126:	e8 12 16 01 00       	call   c001e73d <CPU::writeCR3(unsigned long)>
c000d12b:	83 c4 10             	add    esp,0x10
c000d12e:	eb e1                	jmp    c000d111 <sbrk+0xf9>

c000d130 <mmap>:
c000d130:	83 ec 18             	sub    esp,0x18
c000d133:	68 68 8b 03 c0       	push   0xc0038b68
c000d138:	e8 b1 fb ff ff       	call   c000ccee <panic(char const*)>
c000d13d:	b8 00 00 00 00       	mov    eax,0x0
c000d142:	83 c4 1c             	add    esp,0x1c
c000d145:	c3                   	ret    

c000d146 <munmap>:
c000d146:	83 ec 18             	sub    esp,0x18
c000d149:	68 6d 8b 03 c0       	push   0xc0038b6d
c000d14e:	e8 9b fb ff ff       	call   c000ccee <panic(char const*)>
c000d153:	b8 00 00 00 00       	mov    eax,0x0
c000d158:	83 c4 1c             	add    esp,0x1c
c000d15b:	c3                   	ret    

c000d15c <liballoc_lock()>:
c000d15c:	83 ec 0c             	sub    esp,0xc
c000d15f:	e8 0e 0f 00 00       	call   c000e072 <lockScheduler()>
c000d164:	b8 00 00 00 00       	mov    eax,0x0
c000d169:	83 c4 0c             	add    esp,0xc
c000d16c:	c3                   	ret    

c000d16d <liballoc_unlock()>:
c000d16d:	83 ec 0c             	sub    esp,0xc
c000d170:	e8 ff 0e 00 00       	call   c000e074 <unlockScheduler()>
c000d175:	b8 00 00 00 00       	mov    eax,0x0
c000d17a:	83 c4 0c             	add    esp,0xc
c000d17d:	c3                   	ret    

c000d17e <liballoc_alloc(int)>:
c000d17e:	83 ec 0c             	sub    esp,0xc
c000d181:	e8 f9 3f 00 00       	call   c001117f <Virt::getAKernelVAS()>
c000d186:	83 ec 04             	sub    esp,0x4
c000d189:	6a 01                	push   0x1
c000d18b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d18f:	50                   	push   eax
c000d190:	e8 91 45 00 00       	call   c0011726 <VAS::allocatePages(int, int)>
c000d195:	83 c4 1c             	add    esp,0x1c
c000d198:	c3                   	ret    

c000d199 <liballoc_free(void*, int)>:
c000d199:	83 ec 0c             	sub    esp,0xc
c000d19c:	e8 de 3f 00 00       	call   c001117f <Virt::getAKernelVAS()>
c000d1a1:	83 ec 08             	sub    esp,0x8
c000d1a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d1a8:	50                   	push   eax
c000d1a9:	e8 9a 42 00 00       	call   c0011448 <VAS::freeAllocatedPages(unsigned long)>
c000d1ae:	b8 00 00 00 00       	mov    eax,0x0
c000d1b3:	83 c4 1c             	add    esp,0x1c
c000d1b6:	c3                   	ret    

c000d1b7 <realloc>:
c000d1b7:	83 ec 14             	sub    esp,0x14
c000d1ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1c2:	e8 ba 41 ff ff       	call   c0001381 <dlrealloc>
c000d1c7:	83 c4 1c             	add    esp,0x1c
c000d1ca:	c3                   	ret    

c000d1cb <malloc>:
c000d1cb:	83 ec 18             	sub    esp,0x18
c000d1ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1d2:	e8 6d 3c ff ff       	call   c0000e44 <dlmalloc>
c000d1d7:	83 c4 1c             	add    esp,0x1c
c000d1da:	c3                   	ret    

c000d1db <free>:
c000d1db:	83 ec 18             	sub    esp,0x18
c000d1de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1e2:	e8 02 39 ff ff       	call   c0000ae9 <dlfree>
c000d1e7:	83 c4 1c             	add    esp,0x1c
c000d1ea:	c3                   	ret    

c000d1eb <rfree>:
c000d1eb:	83 ec 18             	sub    esp,0x18
c000d1ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1f2:	e8 e4 ff ff ff       	call   c000d1db <free>
c000d1f7:	83 c4 1c             	add    esp,0x1c
c000d1fa:	c3                   	ret    

c000d1fb <calloc>:
c000d1fb:	56                   	push   esi
c000d1fc:	53                   	push   ebx
c000d1fd:	83 ec 10             	sub    esp,0x10
c000d200:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d204:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000d209:	53                   	push   ebx
c000d20a:	e8 bc ff ff ff       	call   c000d1cb <malloc>
c000d20f:	89 c6                	mov    esi,eax
c000d211:	83 c4 0c             	add    esp,0xc
c000d214:	53                   	push   ebx
c000d215:	6a 00                	push   0x0
c000d217:	50                   	push   eax
c000d218:	e8 eb 33 ff ff       	call   c0000608 <memset>
c000d21d:	89 f0                	mov    eax,esi
c000d21f:	83 c4 14             	add    esp,0x14
c000d222:	5b                   	pop    ebx
c000d223:	5e                   	pop    esi
c000d224:	c3                   	ret    

c000d225 <hwTextMode_loadInData(VgaText*)>:
c000d225:	57                   	push   edi
c000d226:	56                   	push   esi
c000d227:	53                   	push   ebx
c000d228:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d22c:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000d232:	85 c0                	test   eax,eax
c000d234:	7e 30                	jle    c000d266 <hwTextMode_loadInData(VgaText*)+0x41>
c000d236:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000d239:	31 f6                	xor    esi,esi
c000d23b:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000d23e:	31 c0                	xor    eax,eax
c000d240:	c1 e1 05             	shl    ecx,0x5
c000d243:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000d249:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000d24d:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000d251:	40                   	inc    eax
c000d252:	83 f8 50             	cmp    eax,0x50
c000d255:	75 f2                	jne    c000d249 <hwTextMode_loadInData(VgaText*)+0x24>
c000d257:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000d25d:	46                   	inc    esi
c000d25e:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000d264:	7f d5                	jg     c000d23b <hwTextMode_loadInData(VgaText*)+0x16>
c000d266:	5b                   	pop    ebx
c000d267:	5e                   	pop    esi
c000d268:	5f                   	pop    edi
c000d269:	c3                   	ret    

c000d26a <hwTextMode_loadInTitle(VgaText*, char*)>:
c000d26a:	56                   	push   esi
c000d26b:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000d270:	53                   	push   ebx
c000d271:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d275:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d279:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000d27f:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000d285:	c1 e0 04             	shl    eax,0x4
c000d288:	83 e6 0f             	and    esi,0xf
c000d28b:	0f b6 c0             	movzx  eax,al
c000d28e:	41                   	inc    ecx
c000d28f:	09 f0                	or     eax,esi
c000d291:	83 c2 02             	add    edx,0x2
c000d294:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000d298:	c1 e0 08             	shl    eax,0x8
c000d29b:	09 f0                	or     eax,esi
c000d29d:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000d2a1:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000d2a7:	75 d0                	jne    c000d279 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000d2a9:	5b                   	pop    ebx
c000d2aa:	5e                   	pop    esi
c000d2ab:	c3                   	ret    

c000d2ac <hwTextMode_showCursor(VgaText*, bool)>:
c000d2ac:	56                   	push   esi
c000d2ad:	53                   	push   ebx
c000d2ae:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000d2b3:	74 38                	je     c000d2ed <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000d2b5:	bb d4 03 00 00       	mov    ebx,0x3d4
c000d2ba:	b0 0a                	mov    al,0xa
c000d2bc:	89 da                	mov    edx,ebx
c000d2be:	ee                   	out    dx,al
c000d2bf:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000d2c4:	89 ca                	mov    edx,ecx
c000d2c6:	ec                   	in     al,dx
c000d2c7:	b2 0f                	mov    dl,0xf
c000d2c9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d2cd:	83 e0 c0             	and    eax,0xffffffc0
c000d2d0:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000d2d6:	09 d0                	or     eax,edx
c000d2d8:	89 ca                	mov    edx,ecx
c000d2da:	ee                   	out    dx,al
c000d2db:	b0 0b                	mov    al,0xb
c000d2dd:	89 da                	mov    edx,ebx
c000d2df:	ee                   	out    dx,al
c000d2e0:	89 ca                	mov    edx,ecx
c000d2e2:	ec                   	in     al,dx
c000d2e3:	83 e0 e0             	and    eax,0xffffffe0
c000d2e6:	83 c8 0f             	or     eax,0xf
c000d2e9:	ee                   	out    dx,al
c000d2ea:	5b                   	pop    ebx
c000d2eb:	5e                   	pop    esi
c000d2ec:	c3                   	ret    
c000d2ed:	b0 0a                	mov    al,0xa
c000d2ef:	ba d4 03 00 00       	mov    edx,0x3d4
c000d2f4:	ee                   	out    dx,al
c000d2f5:	b0 20                	mov    al,0x20
c000d2f7:	ba d5 03 00 00       	mov    edx,0x3d5
c000d2fc:	ee                   	out    dx,al
c000d2fd:	5b                   	pop    ebx
c000d2fe:	5e                   	pop    esi
c000d2ff:	c3                   	ret    

c000d300 <hwTextMode_update(VgaText*)>:
c000d300:	c3                   	ret    

c000d301 <hwTextMode_updateCursor(VgaText*)>:
c000d301:	56                   	push   esi
c000d302:	b9 19 00 00 00       	mov    ecx,0x19
c000d307:	53                   	push   ebx
c000d308:	be d4 03 00 00       	mov    esi,0x3d4
c000d30d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d311:	89 f2                	mov    edx,esi
c000d313:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000d319:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000d31f:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000d322:	c1 e1 04             	shl    ecx,0x4
c000d325:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000d32b:	b0 0f                	mov    al,0xf
c000d32d:	ee                   	out    dx,al
c000d32e:	bb d5 03 00 00       	mov    ebx,0x3d5
c000d333:	88 c8                	mov    al,cl
c000d335:	89 da                	mov    edx,ebx
c000d337:	ee                   	out    dx,al
c000d338:	b0 0e                	mov    al,0xe
c000d33a:	89 f2                	mov    edx,esi
c000d33c:	ee                   	out    dx,al
c000d33d:	89 c8                	mov    eax,ecx
c000d33f:	89 da                	mov    edx,ebx
c000d341:	66 c1 e8 08          	shr    ax,0x8
c000d345:	ee                   	out    dx,al
c000d346:	5b                   	pop    ebx
c000d347:	5e                   	pop    esi
c000d348:	c3                   	ret    

c000d349 <hwTextMode_disableBlink(VgaText*, bool)>:
c000d349:	ba da 03 00 00       	mov    edx,0x3da
c000d34e:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000d353:	75 18                	jne    c000d36d <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000d355:	ec                   	in     al,dx
c000d356:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000d35b:	b0 30                	mov    al,0x30
c000d35d:	89 ca                	mov    edx,ecx
c000d35f:	ee                   	out    dx,al
c000d360:	ba c1 03 00 00       	mov    edx,0x3c1
c000d365:	ec                   	in     al,dx
c000d366:	83 c8 08             	or     eax,0x8
c000d369:	89 ca                	mov    edx,ecx
c000d36b:	ee                   	out    dx,al
c000d36c:	c3                   	ret    
c000d36d:	ec                   	in     al,dx
c000d36e:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000d373:	b0 30                	mov    al,0x30
c000d375:	89 ca                	mov    edx,ecx
c000d377:	ee                   	out    dx,al
c000d378:	ba c1 03 00 00       	mov    edx,0x3c1
c000d37d:	ec                   	in     al,dx
c000d37e:	83 e0 f7             	and    eax,0xfffffff7
c000d381:	89 ca                	mov    edx,ecx
c000d383:	ee                   	out    dx,al
c000d384:	c3                   	ret    

c000d385 <hwTextMode_scrollScreen(VgaText*)>:
c000d385:	55                   	push   ebp
c000d386:	bd 02 00 00 00       	mov    ebp,0x2
c000d38b:	57                   	push   edi
c000d38c:	56                   	push   esi
c000d38d:	53                   	push   ebx
c000d38e:	83 ec 1c             	sub    esp,0x1c
c000d391:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000d399:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d39d:	31 c0                	xor    eax,eax
c000d39f:	eb 0b                	jmp    c000d3ac <hwTextMode_scrollScreen(VgaText*)+0x27>
c000d3a1:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000d3a7:	74 57                	je     c000d400 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000d3a9:	43                   	inc    ebx
c000d3aa:	89 f0                	mov    eax,esi
c000d3ac:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000d3b2:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000d3b8:	88 13                	mov    BYTE PTR [ebx],dl
c000d3ba:	8d 70 01             	lea    esi,[eax+0x1]
c000d3bd:	83 fd 18             	cmp    ebp,0x18
c000d3c0:	75 df                	jne    c000d3a1 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000d3c2:	a8 01                	test   al,0x1
c000d3c4:	75 13                	jne    c000d3d9 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000d3c6:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000d3c9:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000d3cf:	75 d8                	jne    c000d3a9 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000d3d1:	83 c4 1c             	add    esp,0x1c
c000d3d4:	5b                   	pop    ebx
c000d3d5:	5e                   	pop    esi
c000d3d6:	5f                   	pop    edi
c000d3d7:	5d                   	pop    ebp
c000d3d8:	c3                   	ret    
c000d3d9:	83 ec 08             	sub    esp,0x8
c000d3dc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d3e0:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000d3e7:	50                   	push   eax
c000d3e8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d3ec:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000d3f3:	50                   	push   eax
c000d3f4:	e8 bd 29 00 00       	call   c000fdb6 <VgaText::combineColours(unsigned char, unsigned char)>
c000d3f9:	83 c4 10             	add    esp,0x10
c000d3fc:	88 07                	mov    BYTE PTR [edi],al
c000d3fe:	eb c9                	jmp    c000d3c9 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000d400:	45                   	inc    ebp
c000d401:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000d409:	eb 8e                	jmp    c000d399 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000d40b <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000d40b:	56                   	push   esi
c000d40c:	53                   	push   ebx
c000d40d:	83 ec 0c             	sub    esp,0xc
c000d410:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d414:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000d418:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000d41d:	50                   	push   eax
c000d41e:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000d423:	50                   	push   eax
c000d424:	e8 8d 29 00 00       	call   c000fdb6 <VgaText::combineColours(unsigned char, unsigned char)>
c000d429:	5a                   	pop    edx
c000d42a:	0f b6 c0             	movzx  eax,al
c000d42d:	59                   	pop    ecx
c000d42e:	50                   	push   eax
c000d42f:	89 f0                	mov    eax,esi
c000d431:	0f be f0             	movsx  esi,al
c000d434:	56                   	push   esi
c000d435:	e8 22 2a 00 00       	call   c000fe5c <VgaText::combineCharAndColour(char, unsigned char)>
c000d43a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d43e:	ba 19 00 00 00       	mov    edx,0x19
c000d443:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000d449:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000d44c:	8d 14 92             	lea    edx,[edx+edx*4]
c000d44f:	c1 e1 04             	shl    ecx,0x4
c000d452:	c1 e2 04             	shl    edx,0x4
c000d455:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000d459:	01 ca                	add    edx,ecx
c000d45b:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000d463:	83 c4 14             	add    esp,0x14
c000d466:	5b                   	pop    ebx
c000d467:	5e                   	pop    esi
c000d468:	c3                   	ret    

c000d469 <setupTextMode()>:
c000d469:	c7 05 98 bb 03 c0 49 d3 00 c0 	mov    DWORD PTR ds:0xc003bb98,0xc000d349
c000d473:	c7 05 84 bb 03 c0 25 d2 00 c0 	mov    DWORD PTR ds:0xc003bb84,0xc000d225
c000d47d:	c7 05 80 bb 03 c0 6a d2 00 c0 	mov    DWORD PTR ds:0xc003bb80,0xc000d26a
c000d487:	c7 05 8c bb 03 c0 85 d3 00 c0 	mov    DWORD PTR ds:0xc003bb8c,0xc000d385
c000d491:	c7 05 94 bb 03 c0 ac d2 00 c0 	mov    DWORD PTR ds:0xc003bb94,0xc000d2ac
c000d49b:	c7 05 88 bb 03 c0 00 d3 00 c0 	mov    DWORD PTR ds:0xc003bb88,0xc000d300
c000d4a5:	c7 05 90 bb 03 c0 01 d3 00 c0 	mov    DWORD PTR ds:0xc003bb90,0xc000d301
c000d4af:	c7 05 9c bb 03 c0 0b d4 00 c0 	mov    DWORD PTR ds:0xc003bb9c,0xc000d40b
c000d4b9:	c3                   	ret    

c000d4ba <kernel_main>:
c000d4ba:	57                   	push   edi
c000d4bb:	bf f9 03 00 00       	mov    edi,0x3f9
c000d4c0:	56                   	push   esi
c000d4c1:	31 f6                	xor    esi,esi
c000d4c3:	53                   	push   ebx
c000d4c4:	83 ec 10             	sub    esp,0x10
c000d4c7:	e8 44 27 00 00       	call   c000fc10 <installVgaTextImplementation()>
c000d4cc:	e8 98 ff ff ff       	call   c000d469 <setupTextMode()>
c000d4d1:	89 f0                	mov    eax,esi
c000d4d3:	89 fa                	mov    edx,edi
c000d4d5:	ee                   	out    dx,al
c000d4d6:	bb fb 03 00 00       	mov    ebx,0x3fb
c000d4db:	b0 80                	mov    al,0x80
c000d4dd:	89 da                	mov    edx,ebx
c000d4df:	ee                   	out    dx,al
c000d4e0:	b1 03                	mov    cl,0x3
c000d4e2:	ba f8 03 00 00       	mov    edx,0x3f8
c000d4e7:	88 c8                	mov    al,cl
c000d4e9:	ee                   	out    dx,al
c000d4ea:	89 f0                	mov    eax,esi
c000d4ec:	89 fa                	mov    edx,edi
c000d4ee:	ee                   	out    dx,al
c000d4ef:	88 c8                	mov    al,cl
c000d4f1:	89 da                	mov    edx,ebx
c000d4f3:	ee                   	out    dx,al
c000d4f4:	b0 c7                	mov    al,0xc7
c000d4f6:	ba fa 03 00 00       	mov    edx,0x3fa
c000d4fb:	ee                   	out    dx,al
c000d4fc:	b0 0b                	mov    al,0xb
c000d4fe:	ba fc 03 00 00       	mov    edx,0x3fc
c000d503:	ee                   	out    dx,al
c000d504:	a1 24 05 00 00       	mov    eax,ds:0x524
c000d509:	83 ec 0c             	sub    esp,0xc
c000d50c:	05 ff 0f 00 00       	add    eax,0xfff
c000d511:	25 00 f0 ff ff       	and    eax,0xfffff000
c000d516:	50                   	push   eax
c000d517:	e8 4d 03 00 00       	call   c000d869 <Phys::physicalMemorySetup(unsigned int)>
c000d51c:	e8 df 3b 00 00       	call   c0011100 <Virt::virtualMemorySetup()>
c000d521:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000d527:	83 c4 10             	add    esp,0x10
c000d52a:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000d530:	75 0e                	jne    c000d540 <kernel_main+0x86>
c000d532:	89 d8                	mov    eax,ebx
c000d534:	25 48 03 00 00       	and    eax,0x348
c000d539:	3d 00 03 00 00       	cmp    eax,0x300
c000d53e:	74 10                	je     c000d550 <kernel_main+0x96>
c000d540:	83 ec 0c             	sub    esp,0xc
c000d543:	68 d7 8a 03 c0       	push   0xc0038ad7
c000d548:	e8 a1 f7 ff ff       	call   c000ccee <panic(char const*)>
c000d54d:	83 c4 10             	add    esp,0x10
c000d550:	83 ec 0c             	sub    esp,0xc
c000d553:	89 1d b4 b8 03 c0    	mov    DWORD PTR ds:0xc003b8b4,ebx
c000d559:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000d55d:	53                   	push   ebx
c000d55e:	e8 47 3d 00 00       	call   c00112aa <VAS::VAS()>
c000d563:	89 1d bc bb 03 c0    	mov    DWORD PTR ds:0xc003bbbc,ebx
c000d569:	e8 b2 2a ff ff       	call   c0000020 <callGlobalConstructors>
c000d56e:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000d575:	e8 06 4c 00 00       	call   c0012180 <operator new(unsigned long)>
c000d57a:	89 04 24             	mov    DWORD PTR [esp],eax
c000d57d:	89 c6                	mov    esi,eax
c000d57f:	e8 26 d9 ff ff       	call   c000aeaa <Computer::Computer()>
c000d584:	6a 00                	push   0x0
c000d586:	89 35 08 b7 03 c0    	mov    DWORD PTR ds:0xc003b708,esi
c000d58c:	6a 00                	push   0x0
c000d58e:	6a 00                	push   0x0
c000d590:	56                   	push   esi
c000d591:	e8 d8 dd ff ff       	call   c000b36e <Computer::open(int, int, void*)>
c000d596:	83 c4 14             	add    esp,0x14
c000d599:	53                   	push   ebx
c000d59a:	e8 1b 3f 00 00       	call   c00114ba <VAS::~VAS()>
c000d59f:	c7 04 24 74 8b 03 c0 	mov    DWORD PTR [esp],0xc0038b74
c000d5a6:	e8 43 f7 ff ff       	call   c000ccee <panic(char const*)>
c000d5ab:	83 c4 20             	add    esp,0x20
c000d5ae:	5b                   	pop    ebx
c000d5af:	5e                   	pop    esi
c000d5b0:	5f                   	pop    edi
c000d5b1:	c3                   	ret    

c000d5b2 <Phys::allocateDMA(unsigned long)>:
c000d5b2:	55                   	push   ebp
c000d5b3:	31 d2                	xor    edx,edx
c000d5b5:	57                   	push   edi
c000d5b6:	31 ed                	xor    ebp,ebp
c000d5b8:	56                   	push   esi
c000d5b9:	31 c9                	xor    ecx,ecx
c000d5bb:	53                   	push   ebx
c000d5bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d5c0:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000d5c6:	31 c0                	xor    eax,eax
c000d5c8:	c1 ee 0c             	shr    esi,0xc
c000d5cb:	eb 17                	jmp    c000d5e4 <Phys::allocateDMA(unsigned long)+0x32>
c000d5cd:	85 c9                	test   ecx,ecx
c000d5cf:	75 04                	jne    c000d5d5 <Phys::allocateDMA(unsigned long)+0x23>
c000d5d1:	89 d5                	mov    ebp,edx
c000d5d3:	89 d0                	mov    eax,edx
c000d5d5:	8d 59 01             	lea    ebx,[ecx+0x1]
c000d5d8:	39 de                	cmp    esi,ebx
c000d5da:	74 20                	je     c000d5fc <Phys::allocateDMA(unsigned long)+0x4a>
c000d5dc:	42                   	inc    edx
c000d5dd:	89 d9                	mov    ecx,ebx
c000d5df:	83 fa 2f             	cmp    edx,0x2f
c000d5e2:	7f 11                	jg     c000d5f5 <Phys::allocateDMA(unsigned long)+0x43>
c000d5e4:	80 ba e0 b8 03 c0 00 	cmp    BYTE PTR [edx-0x3ffc4720],0x0
c000d5eb:	74 e0                	je     c000d5cd <Phys::allocateDMA(unsigned long)+0x1b>
c000d5ed:	31 c9                	xor    ecx,ecx
c000d5ef:	42                   	inc    edx
c000d5f0:	83 fa 2f             	cmp    edx,0x2f
c000d5f3:	7e ef                	jle    c000d5e4 <Phys::allocateDMA(unsigned long)+0x32>
c000d5f5:	5b                   	pop    ebx
c000d5f6:	31 c0                	xor    eax,eax
c000d5f8:	5e                   	pop    esi
c000d5f9:	5f                   	pop    edi
c000d5fa:	5d                   	pop    ebp
c000d5fb:	c3                   	ret    
c000d5fc:	8d 14 30             	lea    edx,[eax+esi*1]
c000d5ff:	89 d7                	mov    edi,edx
c000d601:	4f                   	dec    edi
c000d602:	79 03                	jns    c000d607 <Phys::allocateDMA(unsigned long)+0x55>
c000d604:	8d 7a 0e             	lea    edi,[edx+0xe]
c000d607:	c1 ff 04             	sar    edi,0x4
c000d60a:	89 c2                	mov    edx,eax
c000d60c:	c1 fa 04             	sar    edx,0x4
c000d60f:	39 fa                	cmp    edx,edi
c000d611:	75 2f                	jne    c000d642 <Phys::allocateDMA(unsigned long)+0x90>
c000d613:	85 db                	test   ebx,ebx
c000d615:	74 1a                	je     c000d631 <Phys::allocateDMA(unsigned long)+0x7f>
c000d617:	be e0 b8 03 c0       	mov    esi,0xc003b8e0
c000d61c:	8d 90 e0 b8 03 c0    	lea    edx,[eax-0x3ffc4720]
c000d622:	f7 d6                	not    esi
c000d624:	29 c6                	sub    esi,eax
c000d626:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000d629:	42                   	inc    edx
c000d62a:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000d62d:	39 d9                	cmp    ecx,ebx
c000d62f:	7f f5                	jg     c000d626 <Phys::allocateDMA(unsigned long)+0x74>
c000d631:	85 ff                	test   edi,edi
c000d633:	74 13                	je     c000d648 <Phys::allocateDMA(unsigned long)+0x96>
c000d635:	5b                   	pop    ebx
c000d636:	05 50 20 0c 00       	add    eax,0xc2050
c000d63b:	5e                   	pop    esi
c000d63c:	c1 e0 0c             	shl    eax,0xc
c000d63f:	5f                   	pop    edi
c000d640:	5d                   	pop    ebp
c000d641:	c3                   	ret    
c000d642:	89 ea                	mov    edx,ebp
c000d644:	31 c9                	xor    ecx,ecx
c000d646:	eb a7                	jmp    c000d5ef <Phys::allocateDMA(unsigned long)+0x3d>
c000d648:	5b                   	pop    ebx
c000d649:	c1 e0 0c             	shl    eax,0xc
c000d64c:	5e                   	pop    esi
c000d64d:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000d652:	5f                   	pop    edi
c000d653:	5d                   	pop    ebp
c000d654:	c3                   	ret    

c000d655 <Phys::freeDMA(unsigned long, unsigned long)>:
c000d655:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d659:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d65d:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000d663:	c1 e9 0c             	shr    ecx,0xc
c000d666:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000d66b:	76 25                	jbe    c000d692 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000d66d:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000d672:	c1 e8 0c             	shr    eax,0xc
c000d675:	8d 50 10             	lea    edx,[eax+0x10]
c000d678:	85 c9                	test   ecx,ecx
c000d67a:	74 15                	je     c000d691 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000d67c:	8d 82 e0 b8 03 c0    	lea    eax,[edx-0x3ffc4720]
c000d682:	8d 94 11 e0 b8 03 c0 	lea    edx,[ecx+edx*1-0x3ffc4720]
c000d689:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000d68c:	40                   	inc    eax
c000d68d:	39 d0                	cmp    eax,edx
c000d68f:	75 f8                	jne    c000d689 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000d691:	c3                   	ret    
c000d692:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000d698:	c1 ea 0c             	shr    edx,0xc
c000d69b:	eb db                	jmp    c000d678 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000d69d <Phys::setPageState(unsigned long, bool)>:
c000d69d:	56                   	push   esi
c000d69e:	ba 01 00 00 00       	mov    edx,0x1
c000d6a3:	53                   	push   ebx
c000d6a4:	8b 35 34 ab 03 c0    	mov    esi,DWORD PTR ds:0xc003ab34
c000d6aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d6ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d6b2:	89 c8                	mov    eax,ecx
c000d6b4:	83 e1 07             	and    ecx,0x7
c000d6b7:	c1 e8 03             	shr    eax,0x3
c000d6ba:	d3 e3                	shl    ebx,cl
c000d6bc:	01 c6                	add    esi,eax
c000d6be:	d3 e2                	shl    edx,cl
c000d6c0:	f7 d2                	not    edx
c000d6c2:	20 16                	and    BYTE PTR [esi],dl
c000d6c4:	03 05 34 ab 03 c0    	add    eax,DWORD PTR ds:0xc003ab34
c000d6ca:	08 18                	or     BYTE PTR [eax],bl
c000d6cc:	5b                   	pop    ebx
c000d6cd:	5e                   	pop    esi
c000d6ce:	c3                   	ret    

c000d6cf <Phys::getPageState(unsigned long)>:
c000d6cf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d6d3:	8b 15 34 ab 03 c0    	mov    edx,DWORD PTR ds:0xc003ab34
c000d6d9:	89 c8                	mov    eax,ecx
c000d6db:	83 e1 07             	and    ecx,0x7
c000d6de:	c1 e8 03             	shr    eax,0x3
c000d6e1:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000d6e5:	d3 f8                	sar    eax,cl
c000d6e7:	83 e0 01             	and    eax,0x1
c000d6ea:	c3                   	ret    

c000d6eb <Phys::freePage(unsigned long)>:
c000d6eb:	53                   	push   ebx
c000d6ec:	83 ec 08             	sub    esp,0x8
c000d6ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d6f3:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000d6f9:	76 57                	jbe    c000d752 <Phys::freePage(unsigned long)+0x67>
c000d6fb:	c1 eb 0c             	shr    ebx,0xc
c000d6fe:	53                   	push   ebx
c000d6ff:	e8 cb ff ff ff       	call   c000d6cf <Phys::getPageState(unsigned long)>
c000d704:	5a                   	pop    edx
c000d705:	84 c0                	test   al,al
c000d707:	74 5b                	je     c000d764 <Phys::freePage(unsigned long)+0x79>
c000d709:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000d70e:	48                   	dec    eax
c000d70f:	a3 cc b8 03 c0       	mov    ds:0xc003b8cc,eax
c000d714:	8d 04 80             	lea    eax,[eax+eax*4]
c000d717:	8d 04 80             	lea    eax,[eax+eax*4]
c000d71a:	c1 e0 02             	shl    eax,0x2
c000d71d:	99                   	cdq    
c000d71e:	f7 3d d0 b8 03 c0    	idiv   DWORD PTR ds:0xc003b8d0
c000d724:	39 05 c8 b8 03 c0    	cmp    DWORD PTR ds:0xc003b8c8,eax
c000d72a:	75 13                	jne    c000d73f <Phys::freePage(unsigned long)+0x54>
c000d72c:	83 ec 08             	sub    esp,0x8
c000d72f:	6a 00                	push   0x0
c000d731:	53                   	push   ebx
c000d732:	e8 66 ff ff ff       	call   c000d69d <Phys::setPageState(unsigned long, bool)>
c000d737:	83 c4 10             	add    esp,0x10
c000d73a:	83 c4 08             	add    esp,0x8
c000d73d:	5b                   	pop    ebx
c000d73e:	c3                   	ret    
c000d73f:	83 ec 0c             	sub    esp,0xc
c000d742:	a3 c8 b8 03 c0       	mov    ds:0xc003b8c8,eax
c000d747:	50                   	push   eax
c000d748:	e8 57 28 00 00       	call   c000ffa4 <VgaText::updateRAMUsageDisplay(int)>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	eb da                	jmp    c000d72c <Phys::freePage(unsigned long)+0x41>
c000d752:	68 00 10 00 00       	push   0x1000
c000d757:	53                   	push   ebx
c000d758:	e8 f8 fe ff ff       	call   c000d655 <Phys::freeDMA(unsigned long, unsigned long)>
c000d75d:	59                   	pop    ecx
c000d75e:	5b                   	pop    ebx
c000d75f:	83 c4 08             	add    esp,0x8
c000d762:	5b                   	pop    ebx
c000d763:	c3                   	ret    
c000d764:	c7 44 24 10 8f 8b 03 c0 	mov    DWORD PTR [esp+0x10],0xc0038b8f
c000d76c:	83 c4 08             	add    esp,0x8
c000d76f:	5b                   	pop    ebx
c000d770:	e9 79 f5 ff ff       	jmp    c000ccee <panic(char const*)>

c000d775 <Phys::allocatePage()>:
c000d775:	56                   	push   esi
c000d776:	53                   	push   ebx
c000d777:	51                   	push   ecx
c000d778:	8b 35 c0 b8 03 c0    	mov    esi,DWORD PTR ds:0xc003b8c0
c000d77e:	89 f3                	mov    ebx,esi
c000d780:	eb 0a                	jmp    c000d78c <Phys::allocatePage()+0x17>
c000d782:	89 1d c0 b8 03 c0    	mov    DWORD PTR ds:0xc003b8c0,ebx
c000d788:	39 de                	cmp    esi,ebx
c000d78a:	74 24                	je     c000d7b0 <Phys::allocatePage()+0x3b>
c000d78c:	53                   	push   ebx
c000d78d:	e8 3d ff ff ff       	call   c000d6cf <Phys::getPageState(unsigned long)>
c000d792:	5a                   	pop    edx
c000d793:	84 c0                	test   al,al
c000d795:	74 4e                	je     c000d7e5 <Phys::allocatePage()+0x70>
c000d797:	43                   	inc    ebx
c000d798:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000d79e:	75 e2                	jne    c000d782 <Phys::allocatePage()+0xd>
c000d7a0:	31 db                	xor    ebx,ebx
c000d7a2:	c7 05 c0 b8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b8c0,0x0
c000d7ac:	39 de                	cmp    esi,ebx
c000d7ae:	75 dc                	jne    c000d78c <Phys::allocatePage()+0x17>
c000d7b0:	83 ec 0c             	sub    esp,0xc
c000d7b3:	68 00 10 00 00       	push   0x1000
c000d7b8:	e8 f5 fd ff ff       	call   c000d5b2 <Phys::allocateDMA(unsigned long)>
c000d7bd:	83 c4 10             	add    esp,0x10
c000d7c0:	85 c0                	test   eax,eax
c000d7c2:	75 56                	jne    c000d81a <Phys::allocatePage()+0xa5>
c000d7c4:	83 ec 0c             	sub    esp,0xc
c000d7c7:	68 a5 8b 03 c0       	push   0xc0038ba5
c000d7cc:	e8 1d f5 ff ff       	call   c000ccee <panic(char const*)>
c000d7d1:	83 c4 10             	add    esp,0x10
c000d7d4:	8b 1d c0 b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8c0
c000d7da:	53                   	push   ebx
c000d7db:	e8 ef fe ff ff       	call   c000d6cf <Phys::getPageState(unsigned long)>
c000d7e0:	5a                   	pop    edx
c000d7e1:	84 c0                	test   al,al
c000d7e3:	75 b2                	jne    c000d797 <Phys::allocatePage()+0x22>
c000d7e5:	6a 01                	push   0x1
c000d7e7:	53                   	push   ebx
c000d7e8:	e8 b0 fe ff ff       	call   c000d69d <Phys::setPageState(unsigned long, bool)>
c000d7ed:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000d7f2:	59                   	pop    ecx
c000d7f3:	40                   	inc    eax
c000d7f4:	5b                   	pop    ebx
c000d7f5:	a3 cc b8 03 c0       	mov    ds:0xc003b8cc,eax
c000d7fa:	8d 04 80             	lea    eax,[eax+eax*4]
c000d7fd:	8d 04 80             	lea    eax,[eax+eax*4]
c000d800:	c1 e0 02             	shl    eax,0x2
c000d803:	99                   	cdq    
c000d804:	f7 3d d0 b8 03 c0    	idiv   DWORD PTR ds:0xc003b8d0
c000d80a:	39 05 c8 b8 03 c0    	cmp    DWORD PTR ds:0xc003b8c8,eax
c000d810:	75 0c                	jne    c000d81e <Phys::allocatePage()+0xa9>
c000d812:	a1 c0 b8 03 c0       	mov    eax,ds:0xc003b8c0
c000d817:	c1 e0 0c             	shl    eax,0xc
c000d81a:	5a                   	pop    edx
c000d81b:	5b                   	pop    ebx
c000d81c:	5e                   	pop    esi
c000d81d:	c3                   	ret    
c000d81e:	83 ec 0c             	sub    esp,0xc
c000d821:	a3 c8 b8 03 c0       	mov    ds:0xc003b8c8,eax
c000d826:	50                   	push   eax
c000d827:	e8 78 27 00 00       	call   c000ffa4 <VgaText::updateRAMUsageDisplay(int)>
c000d82c:	83 c4 10             	add    esp,0x10
c000d82f:	eb e1                	jmp    c000d812 <Phys::allocatePage()+0x9d>

c000d831 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000d831:	56                   	push   esi
c000d832:	53                   	push   ebx
c000d833:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d837:	39 1d c4 b8 03 c0    	cmp    DWORD PTR ds:0xc003b8c4,ebx
c000d83d:	73 06                	jae    c000d845 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000d83f:	89 1d c4 b8 03 c0    	mov    DWORD PTR ds:0xc003b8c4,ebx
c000d845:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d849:	c1 eb 0c             	shr    ebx,0xc
c000d84c:	c1 e8 0c             	shr    eax,0xc
c000d84f:	39 d8                	cmp    eax,ebx
c000d851:	73 13                	jae    c000d866 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000d853:	6a 00                	push   0x0
c000d855:	8d 70 01             	lea    esi,[eax+0x1]
c000d858:	50                   	push   eax
c000d859:	e8 3f fe ff ff       	call   c000d69d <Phys::setPageState(unsigned long, bool)>
c000d85e:	5a                   	pop    edx
c000d85f:	89 f0                	mov    eax,esi
c000d861:	59                   	pop    ecx
c000d862:	39 f3                	cmp    ebx,esi
c000d864:	75 ed                	jne    c000d853 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000d866:	5b                   	pop    ebx
c000d867:	5e                   	pop    esi
c000d868:	c3                   	ret    

c000d869 <Phys::physicalMemorySetup(unsigned int)>:
c000d869:	55                   	push   ebp
c000d86a:	57                   	push   edi
c000d86b:	56                   	push   esi
c000d86c:	53                   	push   ebx
c000d86d:	31 db                	xor    ebx,ebx
c000d86f:	83 ec 30             	sub    esp,0x30
c000d872:	6a 30                	push   0x30
c000d874:	6a 00                	push   0x0
c000d876:	68 e0 b8 03 c0       	push   0xc003b8e0
c000d87b:	e8 88 2d ff ff       	call   c0000608 <memset>
c000d880:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d884:	25 00 f0 ff ff       	and    eax,0xfffff000
c000d889:	05 00 10 00 00       	add    eax,0x1000
c000d88e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d892:	83 c4 10             	add    esp,0x10
c000d895:	83 ec 08             	sub    esp,0x8
c000d898:	6a 01                	push   0x1
c000d89a:	53                   	push   ebx
c000d89b:	43                   	inc    ebx
c000d89c:	e8 fc fd ff ff       	call   c000d69d <Phys::setPageState(unsigned long, bool)>
c000d8a1:	83 c4 10             	add    esp,0x10
c000d8a4:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000d8aa:	75 e9                	jne    c000d895 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000d8ac:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000d8b3:	66 85 c0             	test   ax,ax
c000d8b6:	0f 84 28 01 00 00    	je     c000d9e4 <Phys::physicalMemorySetup(unsigned int)+0x17b>
c000d8bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d8c0:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000d8c6:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000d8cb:	8b 35 08 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000608
c000d8d1:	8b 3d 0c 06 00 c2    	mov    edi,DWORD PTR ds:0xc200060c
c000d8d7:	89 f1                	mov    ecx,esi
c000d8d9:	89 fb                	mov    ebx,edi
c000d8db:	01 c1                	add    ecx,eax
c000d8dd:	89 d5                	mov    ebp,edx
c000d8df:	11 d3                	adc    ebx,edx
c000d8e1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000d8e4:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000d8e8:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000d8ec:	8b 0d 10 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000610
c000d8f2:	09 dd                	or     ebp,ebx
c000d8f4:	0f 85 fa 00 00 00    	jne    c000d9f4 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000d8fa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d8fe:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000d906:	c7 44 24 0c 00 06 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000600
c000d90e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d912:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000d91a:	eb 45                	jmp    c000d961 <Phys::physicalMemorySetup(unsigned int)+0xf8>
c000d91c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000d920:	83 44 24 0c 18       	add    DWORD PTR [esp+0xc],0x18
c000d925:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d929:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000d92d:	0f 84 c1 00 00 00    	je     c000d9f4 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000d933:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000d937:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d93a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d93d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c000d940:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000d943:	89 c1                	mov    ecx,eax
c000d945:	89 d3                	mov    ebx,edx
c000d947:	01 f1                	add    ecx,esi
c000d949:	11 fb                	adc    ebx,edi
c000d94b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000d94e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000d952:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000d955:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000d959:	09 d3                	or     ebx,edx
c000d95b:	0f 85 93 00 00 00    	jne    c000d9f4 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000d961:	49                   	dec    ecx
c000d962:	75 b8                	jne    c000d91c <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000d964:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000d967:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d96b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000d96f:	39 e9                	cmp    ecx,ebp
c000d971:	89 d9                	mov    ecx,ebx
c000d973:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000d977:	72 a3                	jb     c000d91c <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000d979:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000d97e:	39 f1                	cmp    ecx,esi
c000d980:	b9 00 00 00 00       	mov    ecx,0x0
c000d985:	19 f9                	sbb    ecx,edi
c000d987:	73 93                	jae    c000d91c <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000d989:	39 e8                	cmp    eax,ebp
c000d98b:	89 d1                	mov    ecx,edx
c000d98d:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000d991:	73 13                	jae    c000d9a6 <Phys::physicalMemorySetup(unsigned int)+0x13d>
c000d993:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d996:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000d99a:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000d99e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d9a2:	1b 7c 24 1c          	sbb    edi,DWORD PTR [esp+0x1c]
c000d9a6:	83 ec 08             	sub    esp,0x8
c000d9a9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000d9ad:	50                   	push   eax
c000d9ae:	e8 7e fe ff ff       	call   c000d831 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000d9b3:	83 c4 0c             	add    esp,0xc
c000d9b6:	89 fa                	mov    edx,edi
c000d9b8:	89 f0                	mov    eax,esi
c000d9ba:	0f ac d0 0c          	shrd   eax,edx,0xc
c000d9be:	03 05 d0 b8 03 c0    	add    eax,DWORD PTR ds:0xc003b8d0
c000d9c4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000d9cb:	a3 d0 b8 03 c0       	mov    ds:0xc003b8d0,eax
c000d9d0:	52                   	push   edx
c000d9d1:	50                   	push   eax
c000d9d2:	68 c1 8b 03 c0       	push   0xc0038bc1
c000d9d7:	e8 f4 f1 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c000d9dc:	83 c4 10             	add    esp,0x10
c000d9df:	e9 38 ff ff ff       	jmp    c000d91c <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000d9e4:	83 ec 0c             	sub    esp,0xc
c000d9e7:	68 b3 8b 03 c0       	push   0xc0038bb3
c000d9ec:	e8 fd f2 ff ff       	call   c000ccee <panic(char const*)>
c000d9f1:	83 c4 10             	add    esp,0x10
c000d9f4:	bb 40 01 00 00       	mov    ebx,0x140
c000d9f9:	83 ec 08             	sub    esp,0x8
c000d9fc:	6a 00                	push   0x0
c000d9fe:	53                   	push   ebx
c000d9ff:	43                   	inc    ebx
c000da00:	e8 98 fc ff ff       	call   c000d69d <Phys::setPageState(unsigned long, bool)>
c000da05:	ff 05 d0 b8 03 c0    	inc    DWORD PTR ds:0xc003b8d0
c000da0b:	83 c4 10             	add    esp,0x10
c000da0e:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000da14:	75 e3                	jne    c000d9f9 <Phys::physicalMemorySetup(unsigned int)+0x190>
c000da16:	83 c4 2c             	add    esp,0x2c
c000da19:	5b                   	pop    ebx
c000da1a:	5e                   	pop    esi
c000da1b:	5f                   	pop    edi
c000da1c:	5d                   	pop    ebp
c000da1d:	c3                   	ret    

c000da1e <Pipe::isAtty()>:
c000da1e:	31 c0                	xor    eax,eax
c000da20:	c3                   	ret    
c000da21:	90                   	nop

c000da22 <Pipe::~Pipe()>:
c000da22:	83 ec 0c             	sub    esp,0xc
c000da25:	ba 20 8c 03 c0       	mov    edx,0xc0038c20
c000da2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da2e:	89 10                	mov    DWORD PTR [eax],edx
c000da30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da34:	83 ec 0c             	sub    esp,0xc
c000da37:	50                   	push   eax
c000da38:	e8 d3 33 00 00       	call   c0010e10 <UnixFile::~UnixFile()>
c000da3d:	83 c4 10             	add    esp,0x10
c000da40:	90                   	nop
c000da41:	83 c4 0c             	add    esp,0xc
c000da44:	c3                   	ret    
c000da45:	90                   	nop

c000da46 <Pipe::~Pipe()>:
c000da46:	83 ec 0c             	sub    esp,0xc
c000da49:	83 ec 0c             	sub    esp,0xc
c000da4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da50:	e8 cd ff ff ff       	call   c000da22 <Pipe::~Pipe()>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	83 ec 08             	sub    esp,0x8
c000da5b:	6a 20                	push   0x20
c000da5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da61:	e8 29 47 00 00       	call   c001218f <operator delete(void*, unsigned long)>
c000da66:	83 c4 10             	add    esp,0x10
c000da69:	83 c4 0c             	add    esp,0xc
c000da6c:	c3                   	ret    
c000da6d:	90                   	nop

c000da6e <Pipe::read(unsigned long long, void*, int*)>:
c000da6e:	55                   	push   ebp
c000da6f:	57                   	push   edi
c000da70:	56                   	push   esi
c000da71:	53                   	push   ebx
c000da72:	83 ec 1c             	sub    esp,0x1c
c000da75:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000da79:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000da7d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000da81:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000da84:	89 c8                	mov    eax,ecx
c000da86:	99                   	cdq    
c000da87:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000da8b:	74 19                	je     c000daa6 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000da8d:	39 f9                	cmp    ecx,edi
c000da8f:	89 d1                	mov    ecx,edx
c000da91:	19 f1                	sbb    ecx,esi
c000da93:	73 11                	jae    c000daa6 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000da95:	e8 d8 05 00 00       	call   c000e072 <lockScheduler()>
c000da9a:	e8 07 09 00 00       	call   c000e3a6 <schedule()>
c000da9f:	e8 d0 05 00 00       	call   c000e074 <unlockScheduler()>
c000daa4:	eb db                	jmp    c000da81 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000daa6:	39 f8                	cmp    eax,edi
c000daa8:	89 d1                	mov    ecx,edx
c000daaa:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000daae:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000dab2:	19 f1                	sbb    ecx,esi
c000dab4:	73 08                	jae    c000dabe <Pipe::read(unsigned long long, void*, int*)+0x50>
c000dab6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000daba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dabe:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000dac1:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000dac4:	29 c6                	sub    esi,eax
c000dac6:	89 f1                	mov    ecx,esi
c000dac8:	c1 f9 1f             	sar    ecx,0x1f
c000dacb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000dacf:	89 ca                	mov    edx,ecx
c000dad1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dad5:	19 d1                	sbb    ecx,edx
c000dad7:	73 04                	jae    c000dadd <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000dad9:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dadd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000dae1:	89 fd                	mov    ebp,edi
c000dae3:	29 f5                	sub    ebp,esi
c000dae5:	85 f6                	test   esi,esi
c000dae7:	74 12                	je     c000dafb <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000dae9:	52                   	push   edx
c000daea:	56                   	push   esi
c000daeb:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000daee:	50                   	push   eax
c000daef:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000daf3:	e8 da 2a ff ff       	call   c00005d2 <memcpy>
c000daf8:	83 c4 10             	add    esp,0x10
c000dafb:	85 ed                	test   ebp,ebp
c000dafd:	74 12                	je     c000db11 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000daff:	50                   	push   eax
c000db00:	55                   	push   ebp
c000db01:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000db04:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000db08:	56                   	push   esi
c000db09:	e8 c4 2a ff ff       	call   c00005d2 <memcpy>
c000db0e:	83 c4 10             	add    esp,0x10
c000db11:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000db14:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000db17:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000db1a:	99                   	cdq    
c000db1b:	89 f7                	mov    edi,esi
c000db1d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000db21:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000db25:	c1 ff 1f             	sar    edi,0x1f
c000db28:	57                   	push   edi
c000db29:	56                   	push   esi
c000db2a:	52                   	push   edx
c000db2b:	50                   	push   eax
c000db2c:	e8 eb 09 01 00       	call   c001e51c <__umoddi3>
c000db31:	83 c4 10             	add    esp,0x10
c000db34:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000db37:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000db3c:	75 10                	jne    c000db4e <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000db3e:	83 ec 0c             	sub    esp,0xc
c000db41:	68 dd 8b 03 c0       	push   0xc0038bdd
c000db46:	e8 a3 f1 ff ff       	call   c000ccee <panic(char const*)>
c000db4b:	83 c4 10             	add    esp,0x10
c000db4e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000db52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000db56:	89 10                	mov    DWORD PTR [eax],edx
c000db58:	83 c4 1c             	add    esp,0x1c
c000db5b:	31 c0                	xor    eax,eax
c000db5d:	5b                   	pop    ebx
c000db5e:	5e                   	pop    esi
c000db5f:	5f                   	pop    edi
c000db60:	5d                   	pop    ebp
c000db61:	c3                   	ret    

c000db62 <Pipe::write(unsigned long long, void*, int*)>:
c000db62:	55                   	push   ebp
c000db63:	57                   	push   edi
c000db64:	56                   	push   esi
c000db65:	53                   	push   ebx
c000db66:	83 ec 1c             	sub    esp,0x1c
c000db69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db6d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000db71:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000db75:	89 04 24             	mov    DWORD PTR [esp],eax
c000db78:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000db7b:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000db7e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000db82:	89 de                	mov    esi,ebx
c000db84:	89 df                	mov    edi,ebx
c000db86:	c1 ff 1f             	sar    edi,0x1f
c000db89:	01 c6                	add    esi,eax
c000db8b:	89 c8                	mov    eax,ecx
c000db8d:	11 d7                	adc    edi,edx
c000db8f:	99                   	cdq    
c000db90:	39 f1                	cmp    ecx,esi
c000db92:	89 d0                	mov    eax,edx
c000db94:	19 f8                	sbb    eax,edi
c000db96:	b8 01 00 00 00       	mov    eax,0x1
c000db9b:	0f 82 80 00 00 00    	jb     c000dc21 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000dba1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000dba4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dba7:	01 d8                	add    eax,ebx
c000dba9:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000dbad:	99                   	cdq    
c000dbae:	f7 f9                	idiv   ecx
c000dbb0:	29 d1                	sub    ecx,edx
c000dbb2:	89 d7                	mov    edi,edx
c000dbb4:	89 c8                	mov    eax,ecx
c000dbb6:	99                   	cdq    
c000dbb7:	39 ce                	cmp    esi,ecx
c000dbb9:	19 d3                	sbb    ebx,edx
c000dbbb:	bb 00 00 00 00       	mov    ebx,0x0
c000dbc0:	72 04                	jb     c000dbc6 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000dbc2:	89 f3                	mov    ebx,esi
c000dbc4:	29 cb                	sub    ebx,ecx
c000dbc6:	89 f1                	mov    ecx,esi
c000dbc8:	29 d9                	sub    ecx,ebx
c000dbca:	74 1a                	je     c000dbe6 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000dbcc:	52                   	push   edx
c000dbcd:	51                   	push   ecx
c000dbce:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000dbd9:	57                   	push   edi
c000dbda:	e8 f3 29 ff ff       	call   c00005d2 <memcpy>
c000dbdf:	83 c4 10             	add    esp,0x10
c000dbe2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dbe6:	85 db                	test   ebx,ebx
c000dbe8:	74 12                	je     c000dbfc <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000dbea:	50                   	push   eax
c000dbeb:	53                   	push   ebx
c000dbec:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000dbf0:	51                   	push   ecx
c000dbf1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000dbf4:	e8 d9 29 ff ff       	call   c00005d2 <memcpy>
c000dbf9:	83 c4 10             	add    esp,0x10
c000dbfc:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000dbff:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000dc04:	75 10                	jne    c000dc16 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000dc06:	83 ec 0c             	sub    esp,0xc
c000dc09:	68 f9 8b 03 c0       	push   0xc0038bf9
c000dc0e:	e8 db f0 ff ff       	call   c000ccee <panic(char const*)>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dc1a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000dc1d:	89 38                	mov    DWORD PTR [eax],edi
c000dc1f:	31 c0                	xor    eax,eax
c000dc21:	83 c4 1c             	add    esp,0x1c
c000dc24:	5b                   	pop    ebx
c000dc25:	5e                   	pop    esi
c000dc26:	5f                   	pop    edi
c000dc27:	5d                   	pop    ebp
c000dc28:	c3                   	ret    
c000dc29:	90                   	nop

c000dc2a <Pipe::Pipe(int)>:
c000dc2a:	83 ec 0c             	sub    esp,0xc
c000dc2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc31:	83 ec 08             	sub    esp,0x8
c000dc34:	6a 00                	push   0x0
c000dc36:	50                   	push   eax
c000dc37:	e8 70 31 00 00       	call   c0010dac <UnixFile::UnixFile(int)>
c000dc3c:	83 c4 10             	add    esp,0x10
c000dc3f:	ba 20 8c 03 c0       	mov    edx,0xc0038c20
c000dc44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc48:	89 10                	mov    DWORD PTR [eax],edx
c000dc4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc4e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000dc52:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000dc55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc59:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000dc60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc64:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000dc6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dc6f:	83 ec 0c             	sub    esp,0xc
c000dc72:	50                   	push   eax
c000dc73:	e8 53 f5 ff ff       	call   c000d1cb <malloc>
c000dc78:	83 c4 10             	add    esp,0x10
c000dc7b:	89 c2                	mov    edx,eax
c000dc7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc81:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dc84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc88:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000dc8c:	90                   	nop
c000dc8d:	83 c4 0c             	add    esp,0xc
c000dc90:	c3                   	ret    
c000dc91:	90                   	nop

c000dc92 <changeTSS>:
c000dc92:	83 ec 0c             	sub    esp,0xc
c000dc95:	e8 1c 92 00 00       	call   c0016eb6 <thisCPU()>
c000dc9a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000dca0:	83 ec 08             	sub    esp,0x8
c000dca3:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c000dca6:	05 7c 11 00 00       	add    eax,0x117c
c000dcab:	c1 e1 15             	shl    ecx,0x15
c000dcae:	ba 00 00 e8 01       	mov    edx,0x1e80000
c000dcb3:	29 ca                	sub    edx,ecx
c000dcb5:	52                   	push   edx
c000dcb6:	50                   	push   eax
c000dcb7:	e8 28 2e 00 00       	call   c0010ae4 <TSS::setESP(unsigned long)>
c000dcbc:	83 c4 1c             	add    esp,0x1c
c000dcbf:	c3                   	ret    

c000dcc0 <Process::addArgs(char**)>:
c000dcc0:	57                   	push   edi
c000dcc1:	56                   	push   esi
c000dcc2:	53                   	push   ebx
c000dcc3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dcc7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000dccb:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c000dcd5:	85 ff                	test   edi,edi
c000dcd7:	74 3d                	je     c000dd16 <Process::addArgs(char**)+0x56>
c000dcd9:	8b 07                	mov    eax,DWORD PTR [edi]
c000dcdb:	85 c0                	test   eax,eax
c000dcdd:	74 37                	je     c000dd16 <Process::addArgs(char**)+0x56>
c000dcdf:	31 db                	xor    ebx,ebx
c000dce1:	83 ec 0c             	sub    esp,0xc
c000dce4:	50                   	push   eax
c000dce5:	e8 3b 29 ff ff       	call   c0000625 <strlen>
c000dcea:	40                   	inc    eax
c000dceb:	89 04 24             	mov    DWORD PTR [esp],eax
c000dcee:	e8 d8 f4 ff ff       	call   c000d1cb <malloc>
c000dcf3:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c000dcfa:	5a                   	pop    edx
c000dcfb:	59                   	pop    ecx
c000dcfc:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c000dcff:	43                   	inc    ebx
c000dd00:	50                   	push   eax
c000dd01:	e8 a1 29 ff ff       	call   c00006a7 <strcpy>
c000dd06:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c000dd0c:	83 c4 10             	add    esp,0x10
c000dd0f:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c000dd12:	85 c0                	test   eax,eax
c000dd14:	75 cb                	jne    c000dce1 <Process::addArgs(char**)+0x21>
c000dd16:	5b                   	pop    ebx
c000dd17:	5e                   	pop    esi
c000dd18:	5f                   	pop    edi
c000dd19:	c3                   	ret    

c000dd1a <Process::Process(char const*, Process*, char**)>:
c000dd1a:	56                   	push   esi
c000dd1b:	53                   	push   ebx
c000dd1c:	83 ec 14             	sub    esp,0x14
c000dd1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd23:	05 0c 02 00 00       	add    eax,0x20c
c000dd28:	bb 07 00 00 00       	mov    ebx,0x7
c000dd2d:	89 c6                	mov    esi,eax
c000dd2f:	85 db                	test   ebx,ebx
c000dd31:	78 12                	js     c000dd45 <Process::Process(char const*, Process*, char**)+0x2b>
c000dd33:	83 ec 0c             	sub    esp,0xc
c000dd36:	56                   	push   esi
c000dd37:	e8 0c 0a 01 00       	call   c001e748 <ThreadControlBlock::ThreadControlBlock()>
c000dd3c:	83 c4 10             	add    esp,0x10
c000dd3f:	83 c6 63             	add    esi,0x63
c000dd42:	4b                   	dec    ebx
c000dd43:	eb ea                	jmp    c000dd2f <Process::Process(char const*, Process*, char**)+0x15>
c000dd45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd49:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c000dd50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd54:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c000dd5d:	a1 38 ab 03 c0       	mov    eax,ds:0xc003ab38
c000dd62:	8d 50 01             	lea    edx,[eax+0x1]
c000dd65:	89 15 38 ab 03 c0    	mov    DWORD PTR ds:0xc003ab38,edx
c000dd6b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dd6f:	89 02                	mov    DWORD PTR [edx],eax
c000dd71:	83 ec 0c             	sub    esp,0xc
c000dd74:	6a 10                	push   0x10
c000dd76:	e8 05 44 00 00       	call   c0012180 <operator new(unsigned long)>
c000dd7b:	83 c4 10             	add    esp,0x10
c000dd7e:	89 c3                	mov    ebx,eax
c000dd80:	83 ec 08             	sub    esp,0x8
c000dd83:	6a 00                	push   0x0
c000dd85:	53                   	push   ebx
c000dd86:	e8 89 40 00 00       	call   c0011e14 <VAS::VAS(bool)>
c000dd8b:	83 c4 10             	add    esp,0x10
c000dd8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd92:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c000dd98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd9c:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000dda6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddaa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ddae:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c000ddb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddb8:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000ddbe:	85 c0                	test   eax,eax
c000ddc0:	74 42                	je     c000de04 <Process::Process(char const*, Process*, char**)+0xea>
c000ddc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddc6:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000ddcc:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000ddd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddd6:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c000dddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dde0:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000dde6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000ddec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddf0:	05 0c 01 00 00       	add    eax,0x10c
c000ddf5:	83 ec 08             	sub    esp,0x8
c000ddf8:	52                   	push   edx
c000ddf9:	50                   	push   eax
c000ddfa:	e8 a8 28 ff ff       	call   c00006a7 <strcpy>
c000ddff:	83 c4 10             	add    esp,0x10
c000de02:	eb 5c                	jmp    c000de60 <Process::Process(char const*, Process*, char**)+0x146>
c000de04:	83 ec 0c             	sub    esp,0xc
c000de07:	68 60 12 00 00       	push   0x1260
c000de0c:	e8 6f 43 00 00       	call   c0012180 <operator new(unsigned long)>
c000de11:	83 c4 10             	add    esp,0x10
c000de14:	89 c3                	mov    ebx,eax
c000de16:	83 ec 08             	sub    esp,0x8
c000de19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de1d:	53                   	push   ebx
c000de1e:	e8 bf 29 00 00       	call   c00107e2 <VgaText::VgaText(char const*)>
c000de23:	83 c4 10             	add    esp,0x10
c000de26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de2a:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c000de30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de34:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000de3a:	83 ec 0c             	sub    esp,0xc
c000de3d:	50                   	push   eax
c000de3e:	e8 a0 1d 00 00       	call   c000fbe3 <addToTerminalCycle(VgaText*)>
c000de43:	83 c4 10             	add    esp,0x10
c000de46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de4a:	05 0c 01 00 00       	add    eax,0x10c
c000de4f:	83 ec 08             	sub    esp,0x8
c000de52:	68 34 8c 03 c0       	push   0xc0038c34
c000de57:	50                   	push   eax
c000de58:	e8 4a 28 ff ff       	call   c00006a7 <strcpy>
c000de5d:	83 c4 10             	add    esp,0x10
c000de60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de64:	83 c0 0c             	add    eax,0xc
c000de67:	83 ec 08             	sub    esp,0x8
c000de6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de6e:	50                   	push   eax
c000de6f:	e8 33 28 ff ff       	call   c00006a7 <strcpy>
c000de74:	83 c4 10             	add    esp,0x10
c000de77:	83 ec 08             	sub    esp,0x8
c000de7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000de7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de82:	e8 39 fe ff ff       	call   c000dcc0 <Process::addArgs(char**)>
c000de87:	83 c4 10             	add    esp,0x10
c000de8a:	83 ec 08             	sub    esp,0x8
c000de8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de95:	e8 d6 d8 ff ff       	call   c000b770 <loadProgramIntoMemory(Process*, char const*)>
c000de9a:	83 c4 10             	add    esp,0x10
c000de9d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dea1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dea5:	83 f0 01             	xor    eax,0x1
c000dea8:	88 c2                	mov    dl,al
c000deaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000deae:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c000deb4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000deb9:	83 ec 08             	sub    esp,0x8
c000debc:	50                   	push   eax
c000debd:	68 88 8c 03 c0       	push   0xc0038c88
c000dec2:	e8 09 ed ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c000dec7:	83 c4 10             	add    esp,0x10
c000deca:	90                   	nop
c000decb:	83 c4 14             	add    esp,0x14
c000dece:	5b                   	pop    ebx
c000decf:	5e                   	pop    esi
c000ded0:	c3                   	ret    
c000ded1:	90                   	nop

c000ded2 <Process::Process(bool, char const*, Process*, char**)>:
c000ded2:	56                   	push   esi
c000ded3:	53                   	push   ebx
c000ded4:	83 ec 14             	sub    esp,0x14
c000ded7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dedb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000dedf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dee3:	05 0c 02 00 00       	add    eax,0x20c
c000dee8:	bb 07 00 00 00       	mov    ebx,0x7
c000deed:	89 c6                	mov    esi,eax
c000deef:	85 db                	test   ebx,ebx
c000def1:	78 12                	js     c000df05 <Process::Process(bool, char const*, Process*, char**)+0x33>
c000def3:	83 ec 0c             	sub    esp,0xc
c000def6:	56                   	push   esi
c000def7:	e8 4c 08 01 00       	call   c001e748 <ThreadControlBlock::ThreadControlBlock()>
c000defc:	83 c4 10             	add    esp,0x10
c000deff:	83 c6 63             	add    esi,0x63
c000df02:	4b                   	dec    ebx
c000df03:	eb ea                	jmp    c000deef <Process::Process(bool, char const*, Process*, char**)+0x1d>
c000df05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df09:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c000df10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df14:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c000df1d:	a1 38 ab 03 c0       	mov    eax,ds:0xc003ab38
c000df22:	8d 50 01             	lea    edx,[eax+0x1]
c000df25:	89 15 38 ab 03 c0    	mov    DWORD PTR ds:0xc003ab38,edx
c000df2b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000df2f:	89 02                	mov    DWORD PTR [edx],eax
c000df31:	83 ec 0c             	sub    esp,0xc
c000df34:	6a 10                	push   0x10
c000df36:	e8 45 42 00 00       	call   c0012180 <operator new(unsigned long)>
c000df3b:	83 c4 10             	add    esp,0x10
c000df3e:	89 c3                	mov    ebx,eax
c000df40:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000df45:	83 ec 08             	sub    esp,0x8
c000df48:	50                   	push   eax
c000df49:	53                   	push   ebx
c000df4a:	e8 c5 3e 00 00       	call   c0011e14 <VAS::VAS(bool)>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df56:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c000df5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df60:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000df6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df6e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000df72:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c000df78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df7c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000df82:	85 c0                	test   eax,eax
c000df84:	74 42                	je     c000dfc8 <Process::Process(bool, char const*, Process*, char**)+0xf6>
c000df86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df8a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000df90:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000df96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df9a:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c000dfa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfa4:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000dfaa:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000dfb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfb4:	05 0c 01 00 00       	add    eax,0x10c
c000dfb9:	83 ec 08             	sub    esp,0x8
c000dfbc:	52                   	push   edx
c000dfbd:	50                   	push   eax
c000dfbe:	e8 e4 26 ff ff       	call   c00006a7 <strcpy>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	eb 5c                	jmp    c000e024 <Process::Process(bool, char const*, Process*, char**)+0x152>
c000dfc8:	83 ec 0c             	sub    esp,0xc
c000dfcb:	68 60 12 00 00       	push   0x1260
c000dfd0:	e8 ab 41 00 00       	call   c0012180 <operator new(unsigned long)>
c000dfd5:	83 c4 10             	add    esp,0x10
c000dfd8:	89 c3                	mov    ebx,eax
c000dfda:	83 ec 08             	sub    esp,0x8
c000dfdd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000dfe1:	53                   	push   ebx
c000dfe2:	e8 fb 27 00 00       	call   c00107e2 <VgaText::VgaText(char const*)>
c000dfe7:	83 c4 10             	add    esp,0x10
c000dfea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfee:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c000dff4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dff8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dffe:	83 ec 0c             	sub    esp,0xc
c000e001:	50                   	push   eax
c000e002:	e8 dc 1b 00 00       	call   c000fbe3 <addToTerminalCycle(VgaText*)>
c000e007:	83 c4 10             	add    esp,0x10
c000e00a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e00e:	05 0c 01 00 00       	add    eax,0x10c
c000e013:	83 ec 08             	sub    esp,0x8
c000e016:	68 34 8c 03 c0       	push   0xc0038c34
c000e01b:	50                   	push   eax
c000e01c:	e8 86 26 ff ff       	call   c00006a7 <strcpy>
c000e021:	83 c4 10             	add    esp,0x10
c000e024:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e028:	83 c0 0c             	add    eax,0xc
c000e02b:	83 ec 08             	sub    esp,0x8
c000e02e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e032:	50                   	push   eax
c000e033:	e8 6f 26 ff ff       	call   c00006a7 <strcpy>
c000e038:	83 c4 10             	add    esp,0x10
c000e03b:	83 ec 08             	sub    esp,0x8
c000e03e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	e8 75 fc ff ff       	call   c000dcc0 <Process::addArgs(char**)>
c000e04b:	83 c4 10             	add    esp,0x10
c000e04e:	90                   	nop
c000e04f:	83 c4 14             	add    esp,0x14
c000e052:	5b                   	pop    ebx
c000e053:	5e                   	pop    esi
c000e054:	c3                   	ret    

c000e055 <disableIRQs()>:
c000e055:	fa                   	cli    
c000e056:	ff 05 34 b9 03 c0    	inc    DWORD PTR ds:0xc003b934
c000e05c:	c3                   	ret    

c000e05d <getIRQNestingLevel()>:
c000e05d:	a1 34 b9 03 c0       	mov    eax,ds:0xc003b934
c000e062:	c3                   	ret    

c000e063 <enableIRQs()>:
c000e063:	a1 34 b9 03 c0       	mov    eax,ds:0xc003b934
c000e068:	48                   	dec    eax
c000e069:	a3 34 b9 03 c0       	mov    ds:0xc003b934,eax
c000e06e:	75 01                	jne    c000e071 <enableIRQs()+0xe>
c000e070:	fb                   	sti    
c000e071:	c3                   	ret    

c000e072 <lockScheduler()>:
c000e072:	eb e1                	jmp    c000e055 <disableIRQs()>

c000e074 <unlockScheduler()>:
c000e074:	eb ed                	jmp    c000e063 <enableIRQs()>

c000e076 <userModeEntryPoint(void*)>:
c000e076:	83 ec 0c             	sub    esp,0xc
c000e079:	e8 f6 ff ff ff       	call   c000e074 <unlockScheduler()>
c000e07e:	fb                   	sti    
c000e07f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e084:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e087:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c000e08d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e091:	83 c4 0c             	add    esp,0xc
c000e094:	e9 4d 21 ff ff       	jmp    c00001e6 <goToUsermode>

c000e099 <lockStuff()>:
c000e099:	e8 b7 ff ff ff       	call   c000e055 <disableIRQs()>
c000e09e:	ff 05 30 b9 03 c0    	inc    DWORD PTR ds:0xc003b930
c000e0a4:	c3                   	ret    

c000e0a5 <taskStartupFunction>:
c000e0a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e0aa:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c000e0ad:	c3                   	ret    

c000e0ae <updateTimeUsed()>:
c000e0ae:	57                   	push   edi
c000e0af:	56                   	push   esi
c000e0b0:	53                   	push   ebx
c000e0b1:	e8 00 8e 00 00       	call   c0016eb6 <thisCPU()>
c000e0b6:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c000e0bd:	74 49                	je     c000e108 <updateTimeUsed()+0x5a>
c000e0bf:	0f 31                	rdtsc  
c000e0c1:	89 c1                	mov    ecx,eax
c000e0c3:	a3 70 b9 03 c0       	mov    ds:0xc003b970,eax
c000e0c8:	2b 0d 60 b9 03 c0    	sub    ecx,DWORD PTR ds:0xc003b960
c000e0ce:	89 d3                	mov    ebx,edx
c000e0d0:	89 0d 68 b9 03 c0    	mov    DWORD PTR ds:0xc003b968,ecx
c000e0d6:	1b 1d 64 b9 03 c0    	sbb    ebx,DWORD PTR ds:0xc003b964
c000e0dc:	a3 60 b9 03 c0       	mov    ds:0xc003b960,eax
c000e0e1:	89 1d 6c b9 03 c0    	mov    DWORD PTR ds:0xc003b96c,ebx
c000e0e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e0ec:	89 15 74 b9 03 c0    	mov    DWORD PTR ds:0xc003b974,edx
c000e0f2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000e0f5:	89 15 64 b9 03 c0    	mov    DWORD PTR ds:0xc003b964,edx
c000e0fb:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c000e0fe:	01 f1                	add    ecx,esi
c000e100:	11 fb                	adc    ebx,edi
c000e102:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c000e105:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c000e108:	5b                   	pop    ebx
c000e109:	5e                   	pop    esi
c000e10a:	5f                   	pop    edi
c000e10b:	c3                   	ret    

c000e10c <switchToThread(ThreadControlBlock*)>:
c000e10c:	53                   	push   ebx
c000e10d:	83 ec 08             	sub    esp,0x8
c000e110:	a1 30 b9 03 c0       	mov    eax,ds:0xc003b930
c000e115:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e119:	85 c0                	test   eax,eax
c000e11b:	75 30                	jne    c000e14d <switchToThread(ThreadControlBlock*)+0x41>
c000e11d:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c000e120:	3c ff                	cmp    al,0xff
c000e122:	74 25                	je     c000e149 <switchToThread(ThreadControlBlock*)+0x3d>
c000e124:	0f b6 d0             	movzx  edx,al
c000e127:	b8 84 03 00 00       	mov    eax,0x384
c000e12c:	29 d0                	sub    eax,edx
c000e12e:	c1 e0 10             	shl    eax,0x10
c000e131:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c000e134:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000e137:	e8 72 ff ff ff       	call   c000e0ae <updateTimeUsed()>
c000e13c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000e140:	83 c4 08             	add    esp,0x8
c000e143:	5b                   	pop    ebx
c000e144:	e9 d6 20 ff ff       	jmp    c000021f <switchToThreadASM>
c000e149:	31 c0                	xor    eax,eax
c000e14b:	eb e7                	jmp    c000e134 <switchToThread(ThreadControlBlock*)+0x28>
c000e14d:	c7 05 2c b9 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003b92c,0x1
c000e157:	83 c4 08             	add    esp,0x8
c000e15a:	5b                   	pop    ebx
c000e15b:	c3                   	ret    

c000e15c <Semaphore::Semaphore(int)>:
c000e15c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e160:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e164:	89 10                	mov    DWORD PTR [eax],edx
c000e166:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e16a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000e171:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e175:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e17c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e180:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000e187:	90                   	nop
c000e188:	c3                   	ret    
c000e189:	90                   	nop

c000e18a <Mutex::Mutex()>:
c000e18a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e18e:	6a 01                	push   0x1
c000e190:	50                   	push   eax
c000e191:	e8 c6 ff ff ff       	call   c000e15c <Semaphore::Semaphore(int)>
c000e196:	83 c4 08             	add    esp,0x8
c000e199:	90                   	nop
c000e19a:	c3                   	ret    
c000e19b:	90                   	nop

c000e19c <Process::createThread(void (*)(void*), void*, int)>:
c000e19c:	55                   	push   ebp
c000e19d:	31 c9                	xor    ecx,ecx
c000e19f:	57                   	push   edi
c000e1a0:	56                   	push   esi
c000e1a1:	53                   	push   ebx
c000e1a2:	83 ec 1c             	sub    esp,0x1c
c000e1a5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e1a9:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c000e1b0:	89 f2                	mov    edx,esi
c000e1b2:	0f b7 c2             	movzx  eax,dx
c000e1b5:	83 e2 01             	and    edx,0x1
c000e1b8:	74 14                	je     c000e1ce <Process::createThread(void (*)(void*), void*, int)+0x32>
c000e1ba:	d1 f8                	sar    eax,1
c000e1bc:	41                   	inc    ecx
c000e1bd:	89 c2                	mov    edx,eax
c000e1bf:	83 f9 10             	cmp    ecx,0x10
c000e1c2:	75 ee                	jne    c000e1b2 <Process::createThread(void (*)(void*), void*, int)+0x16>
c000e1c4:	83 c4 1c             	add    esp,0x1c
c000e1c7:	31 c0                	xor    eax,eax
c000e1c9:	5b                   	pop    ebx
c000e1ca:	5e                   	pop    esi
c000e1cb:	5f                   	pop    edi
c000e1cc:	5d                   	pop    ebp
c000e1cd:	c3                   	ret    
c000e1ce:	83 ec 08             	sub    esp,0x8
c000e1d1:	b8 01 00 00 00       	mov    eax,0x1
c000e1d6:	d3 e0                	shl    eax,cl
c000e1d8:	09 c6                	or     esi,eax
c000e1da:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c000e1e0:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c000e1e7:	8d 34 09             	lea    esi,[ecx+ecx*1]
c000e1ea:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e1ed:	01 ce                	add    esi,ecx
c000e1ef:	89 f0                	mov    eax,esi
c000e1f1:	c1 e0 05             	shl    eax,0x5
c000e1f4:	01 c6                	add    esi,eax
c000e1f6:	8d 04 33             	lea    eax,[ebx+esi*1]
c000e1f9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c000e1ff:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c000e205:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e209:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c000e20f:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c000e215:	89 ca                	mov    edx,ecx
c000e217:	f7 da                	neg    edx
c000e219:	c1 e2 15             	shl    edx,0x15
c000e21c:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c000e222:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c000e228:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e22c:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c000e236:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c000e23c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e240:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c000e246:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c000e250:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c000e25a:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c000e261:	50                   	push   eax
c000e262:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e266:	68 50 b9 03 c0       	push   0xc003b950
c000e26b:	e8 6e 05 01 00       	call   c001e7de <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e270:	83 c4 10             	add    esp,0x10
c000e273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e277:	83 c4 1c             	add    esp,0x1c
c000e27a:	5b                   	pop    ebx
c000e27b:	5e                   	pop    esi
c000e27c:	5f                   	pop    edi
c000e27d:	5d                   	pop    ebp
c000e27e:	c3                   	ret    
c000e27f:	90                   	nop

c000e280 <Process::createUserThread()>:
c000e280:	83 ec 0c             	sub    esp,0xc
c000e283:	68 80 00 00 00       	push   0x80
c000e288:	6a 00                	push   0x0
c000e28a:	68 76 e0 00 c0       	push   0xc000e076
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	e8 04 ff ff ff       	call   c000e19c <Process::createThread(void (*)(void*), void*, int)>
c000e298:	83 c4 1c             	add    esp,0x1c
c000e29b:	c3                   	ret    

c000e29c <setupMultitasking(void (*)())>:
c000e29c:	56                   	push   esi
c000e29d:	53                   	push   ebx
c000e29e:	53                   	push   ebx
c000e29f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e2a3:	eb 10                	jmp    c000e2b5 <setupMultitasking(void (*)())+0x19>
c000e2a5:	83 ec 0c             	sub    esp,0xc
c000e2a8:	68 50 b9 03 c0       	push   0xc003b950
c000e2ad:	e8 1c 06 01 00       	call   c001e8ce <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e2b2:	83 c4 10             	add    esp,0x10
c000e2b5:	83 ec 0c             	sub    esp,0xc
c000e2b8:	68 50 b9 03 c0       	push   0xc003b950
c000e2bd:	e8 f0 05 01 00       	call   c001e8b2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e2c2:	83 c4 10             	add    esp,0x10
c000e2c5:	84 c0                	test   al,al
c000e2c7:	74 dc                	je     c000e2a5 <setupMultitasking(void (*)())+0x9>
c000e2c9:	83 ec 0c             	sub    esp,0xc
c000e2cc:	68 3b 07 00 00       	push   0x73b
c000e2d1:	e8 aa 3e 00 00       	call   c0012180 <operator new(unsigned long)>
c000e2d6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e2dd:	89 c3                	mov    ebx,eax
c000e2df:	6a 00                	push   0x0
c000e2e1:	68 38 8c 03 c0       	push   0xc0038c38
c000e2e6:	6a 01                	push   0x1
c000e2e8:	50                   	push   eax
c000e2e9:	e8 e4 fb ff ff       	call   c000ded2 <Process::Process(bool, char const*, Process*, char**)>
c000e2ee:	83 c4 18             	add    esp,0x18
c000e2f1:	89 1d 5c b9 03 c0    	mov    DWORD PTR ds:0xc003b95c,ebx
c000e2f7:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c000e2fd:	68 b0 8c 03 c0       	push   0xc0038cb0
c000e302:	e8 c9 e8 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c000e307:	58                   	pop    eax
c000e308:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c000e30e:	e8 44 20 00 00       	call   c0010357 <setActiveTerminal(VgaText*)>
c000e313:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c000e31b:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c000e321:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e324:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c000e32e:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c000e334:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c000e33a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c000e344:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c000e34e:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c000e358:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c000e35e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c000e364:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c000e36e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c000e374:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c000e37e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000e384:	5a                   	pop    edx
c000e385:	59                   	pop    ecx
c000e386:	68 34 8c 03 c0       	push   0xc0038c34
c000e38b:	50                   	push   eax
c000e38c:	e8 16 23 ff ff       	call   c00006a7 <strcpy>
c000e391:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c000e398:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e39c:	83 c4 14             	add    esp,0x14
c000e39f:	5b                   	pop    ebx
c000e3a0:	5e                   	pop    esi
c000e3a1:	e9 6b 1e ff ff       	jmp    c0000211 <switchToThreadASMFirstTime>

c000e3a6 <schedule()>:
c000e3a6:	a1 30 b9 03 c0       	mov    eax,ds:0xc003b930
c000e3ab:	85 c0                	test   eax,eax
c000e3ad:	74 0b                	je     c000e3ba <schedule()+0x14>
c000e3af:	c7 05 2c b9 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003b92c,0x1
c000e3b9:	c3                   	ret    
c000e3ba:	53                   	push   ebx
c000e3bb:	83 ec 14             	sub    esp,0x14
c000e3be:	68 50 b9 03 c0       	push   0xc003b950
c000e3c3:	e8 ea 04 01 00       	call   c001e8b2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e3c8:	83 c4 10             	add    esp,0x10
c000e3cb:	84 c0                	test   al,al
c000e3cd:	75 38                	jne    c000e407 <schedule()+0x61>
c000e3cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e3d4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000e3d7:	4a                   	dec    edx
c000e3d8:	74 32                	je     c000e40c <schedule()+0x66>
c000e3da:	83 ec 0c             	sub    esp,0xc
c000e3dd:	68 50 b9 03 c0       	push   0xc003b950
c000e3e2:	e8 95 05 01 00       	call   c001e97c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e3e7:	c7 04 24 50 b9 03 c0 	mov    DWORD PTR [esp],0xc003b950
c000e3ee:	89 c3                	mov    ebx,eax
c000e3f0:	e8 d9 04 01 00       	call   c001e8ce <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e3f5:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c000e3fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e3ff:	e8 08 fd ff ff       	call   c000e10c <switchToThread(ThreadControlBlock*)>
c000e404:	83 c4 10             	add    esp,0x10
c000e407:	83 c4 08             	add    esp,0x8
c000e40a:	5b                   	pop    ebx
c000e40b:	c3                   	ret    
c000e40c:	83 ec 08             	sub    esp,0x8
c000e40f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e416:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c000e41c:	68 50 b9 03 c0       	push   0xc003b950
c000e421:	e8 b8 03 01 00       	call   c001e7de <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	eb af                	jmp    c000e3da <schedule()+0x34>

c000e42b <unlockStuff()>:
c000e42b:	a1 30 b9 03 c0       	mov    eax,ds:0xc003b930
c000e430:	48                   	dec    eax
c000e431:	a3 30 b9 03 c0       	mov    ds:0xc003b930,eax
c000e436:	75 09                	jne    c000e441 <unlockStuff()+0x16>
c000e438:	a1 2c b9 03 c0       	mov    eax,ds:0xc003b92c
c000e43d:	85 c0                	test   eax,eax
c000e43f:	75 05                	jne    c000e446 <unlockStuff()+0x1b>
c000e441:	e9 1d fc ff ff       	jmp    c000e063 <enableIRQs()>
c000e446:	83 ec 0c             	sub    esp,0xc
c000e449:	c7 05 2c b9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b92c,0x0
c000e453:	e8 4e ff ff ff       	call   c000e3a6 <schedule()>
c000e458:	83 c4 0c             	add    esp,0xc
c000e45b:	e9 03 fc ff ff       	jmp    c000e063 <enableIRQs()>

c000e460 <forkProcess(regs*)>:
c000e460:	56                   	push   esi
c000e461:	53                   	push   ebx
c000e462:	50                   	push   eax
c000e463:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e468:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e46b:	66 83 b8 24 05 00 00 01 	cmp    WORD PTR [eax+0x524],0x1
c000e473:	0f 85 3e 01 00 00    	jne    c000e5b7 <forkProcess(regs*)+0x157>
c000e479:	e8 1b fc ff ff       	call   c000e099 <lockStuff()>
c000e47e:	83 ec 0c             	sub    esp,0xc
c000e481:	68 3b 07 00 00       	push   0x73b
c000e486:	e8 f5 3c 00 00       	call   c0012180 <operator new(unsigned long)>
c000e48b:	89 c3                	mov    ebx,eax
c000e48d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e492:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e495:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e49c:	50                   	push   eax
c000e49d:	83 c0 0c             	add    eax,0xc
c000e4a0:	50                   	push   eax
c000e4a1:	6a 00                	push   0x0
c000e4a3:	53                   	push   ebx
c000e4a4:	e8 29 fa ff ff       	call   c000ded2 <Process::Process(bool, char const*, Process*, char**)>
c000e4a9:	8b b3 32 05 00 00    	mov    esi,DWORD PTR [ebx+0x532]
c000e4af:	83 c4 20             	add    esp,0x20
c000e4b2:	85 f6                	test   esi,esi
c000e4b4:	74 16                	je     c000e4cc <forkProcess(regs*)+0x6c>
c000e4b6:	83 ec 0c             	sub    esp,0xc
c000e4b9:	56                   	push   esi
c000e4ba:	e8 fb 2f 00 00       	call   c00114ba <VAS::~VAS()>
c000e4bf:	59                   	pop    ecx
c000e4c0:	58                   	pop    eax
c000e4c1:	6a 10                	push   0x10
c000e4c3:	56                   	push   esi
c000e4c4:	e8 c6 3c 00 00       	call   c001218f <operator delete(void*, unsigned long)>
c000e4c9:	83 c4 10             	add    esp,0x10
c000e4cc:	83 ec 0c             	sub    esp,0xc
c000e4cf:	66 c7 83 24 05 00 00 01 00 	mov    WORD PTR [ebx+0x524],0x1
c000e4d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e4dd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e4e0:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c000e4e6:	89 83 2e 05 00 00    	mov    DWORD PTR [ebx+0x52e],eax
c000e4ec:	6a 10                	push   0x10
c000e4ee:	e8 8d 3c 00 00       	call   c0012180 <operator new(unsigned long)>
c000e4f3:	59                   	pop    ecx
c000e4f4:	89 c6                	mov    esi,eax
c000e4f6:	58                   	pop    eax
c000e4f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e4fc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e4ff:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000e505:	56                   	push   esi
c000e506:	e8 d1 34 00 00       	call   c00119dc <VAS::VAS(VAS*)>
c000e50b:	89 b3 32 05 00 00    	mov    DWORD PTR [ebx+0x532],esi
c000e511:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000e514:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e516:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c000e51c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e521:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e524:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
c000e52a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e52f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e532:	89 83 10 02 00 00    	mov    DWORD PTR [ebx+0x210],eax
c000e538:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e53d:	8a 40 44             	mov    al,BYTE PTR [eax+0x44]
c000e540:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c000e54a:	88 83 50 02 00 00    	mov    BYTE PTR [ebx+0x250],al
c000e550:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c000e556:	81 c3 0c 02 00 00    	add    ebx,0x20c
c000e55c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e561:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000e564:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000e56b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000e56e:	c7 43 0c 01 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1
c000e575:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000e57c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000e583:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e588:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000e58b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e58e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e593:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000e596:	58                   	pop    eax
c000e597:	5a                   	pop    edx
c000e598:	53                   	push   ebx
c000e599:	68 50 b9 03 c0       	push   0xc003b950
c000e59e:	e8 3b 02 01 00       	call   c001e7de <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e5a3:	e8 83 fe ff ff       	call   c000e42b <unlockStuff()>
c000e5a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e5ad:	83 c4 10             	add    esp,0x10
c000e5b0:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000e5b3:	5a                   	pop    edx
c000e5b4:	5b                   	pop    ebx
c000e5b5:	5e                   	pop    esi
c000e5b6:	c3                   	ret    
c000e5b7:	83 ec 0c             	sub    esp,0xc
c000e5ba:	68 e4 8c 03 c0       	push   0xc0038ce4
c000e5bf:	e8 0c e6 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c000e5c4:	83 c4 10             	add    esp,0x10
c000e5c7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e5cc:	eb e5                	jmp    c000e5b3 <forkProcess(regs*)+0x153>

c000e5ce <Semaphore::tryAcquire()>:
c000e5ce:	83 ec 0c             	sub    esp,0xc
c000e5d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5d5:	e8 bf fa ff ff       	call   c000e099 <lockStuff()>
c000e5da:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e5dd:	3b 10                	cmp    edx,DWORD PTR [eax]
c000e5df:	7c 0b                	jl     c000e5ec <Semaphore::tryAcquire()+0x1e>
c000e5e1:	e8 45 fe ff ff       	call   c000e42b <unlockStuff()>
c000e5e6:	31 c0                	xor    eax,eax
c000e5e8:	83 c4 0c             	add    esp,0xc
c000e5eb:	c3                   	ret    
c000e5ec:	42                   	inc    edx
c000e5ed:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e5f0:	e8 36 fe ff ff       	call   c000e42b <unlockStuff()>
c000e5f5:	b0 01                	mov    al,0x1
c000e5f7:	83 c4 0c             	add    esp,0xc
c000e5fa:	c3                   	ret    
c000e5fb:	90                   	nop

c000e5fc <Semaphore::assertLocked(char const*)>:
c000e5fc:	83 ec 0c             	sub    esp,0xc
c000e5ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e603:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e607:	e8 8d fa ff ff       	call   c000e099 <lockStuff()>
c000e60c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e60e:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c000e611:	7c 08                	jl     c000e61b <Semaphore::assertLocked(char const*)+0x1f>
c000e613:	83 c4 0c             	add    esp,0xc
c000e616:	e9 10 fe ff ff       	jmp    c000e42b <unlockStuff()>
c000e61b:	83 ec 0c             	sub    esp,0xc
c000e61e:	52                   	push   edx
c000e61f:	e8 ca e6 ff ff       	call   c000ccee <panic(char const*)>
c000e624:	83 c4 10             	add    esp,0x10
c000e627:	83 c4 0c             	add    esp,0xc
c000e62a:	e9 fc fd ff ff       	jmp    c000e42b <unlockStuff()>

c000e62f <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c000e62f:	83 ec 0c             	sub    esp,0xc
c000e632:	e8 26 fa ff ff       	call   c000e05d <getIRQNestingLevel()>
c000e637:	83 ec 08             	sub    esp,0x8
c000e63a:	50                   	push   eax
c000e63b:	68 10 8d 03 c0       	push   0xc0038d10
c000e640:	e8 8b e5 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c000e645:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e649:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e64e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000e651:	e8 50 fd ff ff       	call   c000e3a6 <schedule()>
c000e656:	e8 19 fa ff ff       	call   c000e074 <unlockScheduler()>
c000e65b:	e8 fd f9 ff ff       	call   c000e05d <getIRQNestingLevel()>
c000e660:	5a                   	pop    edx
c000e661:	59                   	pop    ecx
c000e662:	50                   	push   eax
c000e663:	68 44 8d 03 c0       	push   0xc0038d44
c000e668:	e8 63 e5 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c000e66d:	83 c4 1c             	add    esp,0x1c
c000e670:	c3                   	ret    

c000e671 <blockTask(TaskState)>:
c000e671:	83 ec 0c             	sub    esp,0xc
c000e674:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e678:	e8 f5 f9 ff ff       	call   c000e072 <lockScheduler()>
c000e67d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e682:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000e685:	e8 1c fd ff ff       	call   c000e3a6 <schedule()>
c000e68a:	83 c4 0c             	add    esp,0xc
c000e68d:	e9 e2 f9 ff ff       	jmp    c000e074 <unlockScheduler()>

c000e692 <waitTask(int, int*, int)>:
c000e692:	83 ec 18             	sub    esp,0x18
c000e695:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e69a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e69e:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c000e6a1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e6a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e6aa:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c000e6ad:	6a 07                	push   0x7
c000e6af:	e8 bd ff ff ff       	call   c000e671 <blockTask(TaskState)>
c000e6b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e6b9:	83 c4 10             	add    esp,0x10
c000e6bc:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c000e6bf:	85 d2                	test   edx,edx
c000e6c1:	74 0a                	je     c000e6cd <waitTask(int, int*, int)+0x3b>
c000e6c3:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c000e6c6:	89 02                	mov    DWORD PTR [edx],eax
c000e6c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e6cd:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c000e6d0:	83 c4 0c             	add    esp,0xc
c000e6d3:	c3                   	ret    

c000e6d4 <nanoSleepUntil(unsigned long long)>:
c000e6d4:	83 ec 0c             	sub    esp,0xc
c000e6d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e6df:	3b 05 d0 c0 03 c0    	cmp    eax,DWORD PTR ds:0xc003c0d0
c000e6e5:	89 d1                	mov    ecx,edx
c000e6e7:	1b 0d d4 c0 03 c0    	sbb    ecx,DWORD PTR ds:0xc003c0d4
c000e6ed:	73 04                	jae    c000e6f3 <nanoSleepUntil(unsigned long long)+0x1f>
c000e6ef:	83 c4 0c             	add    esp,0xc
c000e6f2:	c3                   	ret    
c000e6f3:	e8 a1 f9 ff ff       	call   c000e099 <lockStuff()>
c000e6f8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000e6fe:	83 ec 08             	sub    esp,0x8
c000e701:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c000e704:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c000e707:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c000e70d:	68 44 b9 03 c0       	push   0xc003b944
c000e712:	e8 c7 00 01 00       	call   c001e7de <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e717:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e71e:	e8 4e ff ff ff       	call   c000e671 <blockTask(TaskState)>
c000e723:	83 c4 1c             	add    esp,0x1c
c000e726:	e9 00 fd ff ff       	jmp    c000e42b <unlockStuff()>

c000e72b <nanoSleep(unsigned long long)>:
c000e72b:	a1 d0 c0 03 c0       	mov    eax,ds:0xc003c0d0
c000e730:	8b 15 d4 c0 03 c0    	mov    edx,DWORD PTR ds:0xc003c0d4
c000e736:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c000e73a:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c000e73e:	eb 94                	jmp    c000e6d4 <nanoSleepUntil(unsigned long long)>

c000e740 <sleep(unsigned long long)>:
c000e740:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c000e748:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c000e74d:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c000e751:	01 ca                	add    edx,ecx
c000e753:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e757:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e75b:	eb ce                	jmp    c000e72b <nanoSleep(unsigned long long)>
c000e75d:	90                   	nop

c000e75e <Semaphore::acquire()>:
c000e75e:	83 ec 0c             	sub    esp,0xc
c000e761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e765:	e8 2f f9 ff ff       	call   c000e099 <lockStuff()>
c000e76a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e76d:	3b 10                	cmp    edx,DWORD PTR [eax]
c000e76f:	7d 0c                	jge    c000e77d <Semaphore::acquire()+0x1f>
c000e771:	42                   	inc    edx
c000e772:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e775:	83 c4 0c             	add    esp,0xc
c000e778:	e9 ae fc ff ff       	jmp    c000e42b <unlockStuff()>
c000e77d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e783:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c000e78a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e78d:	85 d2                	test   edx,edx
c000e78f:	74 2a                	je     c000e7bb <Semaphore::acquire()+0x5d>
c000e791:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000e794:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000e79a:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c000e79d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e7a3:	83 ec 0c             	sub    esp,0xc
c000e7a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e7a9:	6a 05                	push   0x5
c000e7ab:	e8 c1 fe ff ff       	call   c000e671 <blockTask(TaskState)>
c000e7b0:	83 c4 10             	add    esp,0x10
c000e7b3:	83 c4 0c             	add    esp,0xc
c000e7b6:	e9 70 fc ff ff       	jmp    c000e42b <unlockStuff()>
c000e7bb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e7c1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000e7c4:	eb d7                	jmp    c000e79d <Semaphore::acquire()+0x3f>

c000e7c6 <execveProcess(char const*, char* const*, char* const*)>:
c000e7c6:	56                   	push   esi
c000e7c7:	53                   	push   ebx
c000e7c8:	50                   	push   eax
c000e7c9:	e8 cb f8 ff ff       	call   c000e099 <lockStuff()>
c000e7ce:	83 ec 0c             	sub    esp,0xc
c000e7d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e7d6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e7d9:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c000e7df:	68 3b 07 00 00       	push   0x73b
c000e7e4:	e8 97 39 00 00       	call   c0012180 <operator new(unsigned long)>
c000e7e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e7ed:	89 c3                	mov    ebx,eax
c000e7ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e7f4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e7f7:	ff b0 2a 05 00 00    	push   DWORD PTR [eax+0x52a]
c000e7fd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e801:	53                   	push   ebx
c000e802:	e8 13 f5 ff ff       	call   c000dd1a <Process::Process(char const*, Process*, char**)>
c000e807:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e80c:	83 c4 20             	add    esp,0x20
c000e80f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e812:	85 f6                	test   esi,esi
c000e814:	8b 00                	mov    eax,DWORD PTR [eax]
c000e816:	89 03                	mov    DWORD PTR [ebx],eax
c000e818:	74 06                	je     c000e820 <execveProcess(char const*, char* const*, char* const*)+0x5a>
c000e81a:	89 b3 26 05 00 00    	mov    DWORD PTR [ebx+0x526],esi
c000e820:	83 ec 0c             	sub    esp,0xc
c000e823:	53                   	push   ebx
c000e824:	e8 57 fa ff ff       	call   c000e280 <Process::createUserThread()>
c000e829:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000e830:	e8 3c fe ff ff       	call   c000e671 <blockTask(TaskState)>
c000e835:	e8 f1 fb ff ff       	call   c000e42b <unlockStuff()>
c000e83a:	e8 33 f8 ff ff       	call   c000e072 <lockScheduler()>
c000e83f:	e8 62 fb ff ff       	call   c000e3a6 <schedule()>
c000e844:	e8 2b f8 ff ff       	call   c000e074 <unlockScheduler()>
c000e849:	83 c4 14             	add    esp,0x14
c000e84c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e851:	5b                   	pop    ebx
c000e852:	5e                   	pop    esi
c000e853:	c3                   	ret    

c000e854 <taskReturned>:
c000e854:	83 ec 0c             	sub    esp,0xc
c000e857:	e8 18 f8 ff ff       	call   c000e074 <unlockScheduler()>
c000e85c:	83 ec 08             	sub    esp,0x8
c000e85f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e864:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e867:	83 c0 0c             	add    eax,0xc
c000e86a:	50                   	push   eax
c000e86b:	68 3f 8c 03 c0       	push   0xc0038c3f
c000e870:	e8 5b e3 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c000e875:	83 c4 10             	add    esp,0x10
c000e878:	83 ec 0c             	sub    esp,0xc
c000e87b:	6a 02                	push   0x2
c000e87d:	e8 ef fd ff ff       	call   c000e671 <blockTask(TaskState)>
c000e882:	e8 eb f7 ff ff       	call   c000e072 <lockScheduler()>
c000e887:	e8 1a fb ff ff       	call   c000e3a6 <schedule()>
c000e88c:	e8 e3 f7 ff ff       	call   c000e074 <unlockScheduler()>
c000e891:	83 c4 10             	add    esp,0x10
c000e894:	eb e2                	jmp    c000e878 <taskReturned+0x24>

c000e896 <unblockTask(ThreadControlBlock*)>:
c000e896:	53                   	push   ebx
c000e897:	83 ec 08             	sub    esp,0x8
c000e89a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e89e:	e8 cf f7 ff ff       	call   c000e072 <lockScheduler()>
c000e8a3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e8a6:	85 c0                	test   eax,eax
c000e8a8:	74 5c                	je     c000e906 <unblockTask(ThreadControlBlock*)+0x70>
c000e8aa:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e8ad:	48                   	dec    eax
c000e8ae:	74 31                	je     c000e8e1 <unblockTask(ThreadControlBlock*)+0x4b>
c000e8b0:	83 ec 0c             	sub    esp,0xc
c000e8b3:	68 50 b9 03 c0       	push   0xc003b950
c000e8b8:	e8 bf 00 01 00       	call   c001e97c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e8bd:	83 c4 10             	add    esp,0x10
c000e8c0:	85 c0                	test   eax,eax
c000e8c2:	75 17                	jne    c000e8db <unblockTask(ThreadControlBlock*)+0x45>
c000e8c4:	eb 65                	jmp    c000e92b <unblockTask(ThreadControlBlock*)+0x95>
c000e8c6:	83 ec 08             	sub    esp,0x8
c000e8c9:	50                   	push   eax
c000e8ca:	68 50 b9 03 c0       	push   0xc003b950
c000e8cf:	e8 b0 00 01 00       	call   c001e984 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c000e8d4:	83 c4 10             	add    esp,0x10
c000e8d7:	85 c0                	test   eax,eax
c000e8d9:	74 50                	je     c000e92b <unblockTask(ThreadControlBlock*)+0x95>
c000e8db:	39 c3                	cmp    ebx,eax
c000e8dd:	75 e7                	jne    c000e8c6 <unblockTask(ThreadControlBlock*)+0x30>
c000e8df:	eb 1c                	jmp    c000e8fd <unblockTask(ThreadControlBlock*)+0x67>
c000e8e1:	83 ec 0c             	sub    esp,0xc
c000e8e4:	68 34 8e 03 c0       	push   0xc0038e34
c000e8e9:	e8 e2 e2 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c000e8ee:	c7 04 24 c0 8d 03 c0 	mov    DWORD PTR [esp],0xc0038dc0
c000e8f5:	e8 d6 e2 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c000e8fa:	83 c4 10             	add    esp,0x10
c000e8fd:	83 c4 08             	add    esp,0x8
c000e900:	5b                   	pop    ebx
c000e901:	e9 6e f7 ff ff       	jmp    c000e074 <unlockScheduler()>
c000e906:	83 ec 0c             	sub    esp,0xc
c000e909:	68 78 8d 03 c0       	push   0xc0038d78
c000e90e:	e8 bd e2 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c000e913:	c7 04 24 c0 8d 03 c0 	mov    DWORD PTR [esp],0xc0038dc0
c000e91a:	e8 b1 e2 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c000e91f:	83 c4 10             	add    esp,0x10
c000e922:	83 c4 08             	add    esp,0x8
c000e925:	5b                   	pop    ebx
c000e926:	e9 49 f7 ff ff       	jmp    c000e074 <unlockScheduler()>
c000e92b:	83 ec 08             	sub    esp,0x8
c000e92e:	53                   	push   ebx
c000e92f:	68 50 b9 03 c0       	push   0xc003b950
c000e934:	e8 a5 fe 00 00       	call   c001e7de <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e939:	83 c4 10             	add    esp,0x10
c000e93c:	83 c4 08             	add    esp,0x8
c000e93f:	5b                   	pop    ebx
c000e940:	e9 2f f7 ff ff       	jmp    c000e074 <unlockScheduler()>

c000e945 <cleanupTerminatedTask(ThreadControlBlock*)>:
c000e945:	55                   	push   ebp
c000e946:	57                   	push   edi
c000e947:	56                   	push   esi
c000e948:	53                   	push   ebx
c000e949:	83 ec 1c             	sub    esp,0x1c
c000e94c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e950:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000e953:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c000e959:	85 c9                	test   ecx,ecx
c000e95b:	7e 20                	jle    c000e97d <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c000e95d:	31 f6                	xor    esi,esi
c000e95f:	83 ec 0c             	sub    esp,0xc
c000e962:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c000e969:	46                   	inc    esi
c000e96a:	e8 6c e8 ff ff       	call   c000d1db <free>
c000e96f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000e972:	83 c4 10             	add    esp,0x10
c000e975:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c000e97b:	7f e2                	jg     c000e95f <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c000e97d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000e987:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000e98c:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c000e98f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c000e992:	d3 c0                	rol    eax,cl
c000e994:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c000e99b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000e99e:	89 f7                	mov    edi,esi
c000e9a0:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c000e9a8:	0f 85 4f 01 00 00    	jne    c000eafd <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c000e9ae:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000e9b4:	85 c0                	test   eax,eax
c000e9b6:	0f 84 aa 00 00 00    	je     c000ea66 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c000e9bc:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c000e9bf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e9c3:	31 c9                	xor    ecx,ecx
c000e9c5:	eb 10                	jmp    c000e9d7 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c000e9c7:	41                   	inc    ecx
c000e9c8:	83 f9 10             	cmp    ecx,0x10
c000e9cb:	0f 84 95 00 00 00    	je     c000ea66 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c000e9d1:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000e9d7:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c000e9de:	d3 fa                	sar    edx,cl
c000e9e0:	83 e2 01             	and    edx,0x1
c000e9e3:	74 e2                	je     c000e9c7 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000e9e5:	8d 14 09             	lea    edx,[ecx+ecx*1]
c000e9e8:	01 ca                	add    edx,ecx
c000e9ea:	89 d5                	mov    ebp,edx
c000e9ec:	c1 e5 05             	shl    ebp,0x5
c000e9ef:	01 ea                	add    edx,ebp
c000e9f1:	01 d0                	add    eax,edx
c000e9f3:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c000e9f9:	83 fd 07             	cmp    ebp,0x7
c000e9fc:	75 c9                	jne    c000e9c7 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000e9fe:	05 40 02 00 00       	add    eax,0x240
c000ea03:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c000ea06:	83 fd ff             	cmp    ebp,0xffffffff
c000ea09:	0f 8c 01 01 00 00    	jl     c000eb10 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cb>
c000ea0f:	0f 84 b2 01 00 00    	je     c000ebc7 <cleanupTerminatedTask(ThreadControlBlock*)+0x282>
c000ea15:	85 ed                	test   ebp,ebp
c000ea17:	0f 84 99 01 00 00    	je     c000ebb6 <cleanupTerminatedTask(ThreadControlBlock*)+0x271>
c000ea1d:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c000ea1f:	75 a6                	jne    c000e9c7 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000ea21:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000ea27:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ea2b:	01 d0                	add    eax,edx
c000ea2d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ea31:	83 ec 0c             	sub    esp,0xc
c000ea34:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c000ea3a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ea3d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000ea43:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c000ea4a:	50                   	push   eax
c000ea4b:	e8 46 fe ff ff       	call   c000e896 <unblockTask(ThreadControlBlock*)>
c000ea50:	83 c4 10             	add    esp,0x10
c000ea53:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000ea56:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea5a:	89 f7                	mov    edi,esi
c000ea5c:	41                   	inc    ecx
c000ea5d:	83 f9 10             	cmp    ecx,0x10
c000ea60:	0f 85 6b ff ff ff    	jne    c000e9d1 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c000ea66:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c000ea6c:	85 c0                	test   eax,eax
c000ea6e:	74 5d                	je     c000eacd <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c000ea70:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c000ea76:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c000ea7c:	74 4f                	je     c000eacd <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c000ea7e:	83 ec 0c             	sub    esp,0xc
c000ea81:	68 50 b9 03 c0       	push   0xc003b950
c000ea86:	e8 f1 fe 00 00       	call   c001e97c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ea8b:	c7 04 24 50 b9 03 c0 	mov    DWORD PTR [esp],0xc003b950
c000ea92:	89 c7                	mov    edi,eax
c000ea94:	e8 19 fe 00 00       	call   c001e8b2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000ea99:	83 c4 10             	add    esp,0x10
c000ea9c:	84 c0                	test   al,al
c000ea9e:	0f 84 dd 00 00 00    	je     c000eb81 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c000eaa4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000eaa7:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000eaad:	85 d2                	test   edx,edx
c000eaaf:	74 0f                	je     c000eac0 <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c000eab1:	83 ec 0c             	sub    esp,0xc
c000eab4:	8b 02                	mov    eax,DWORD PTR [edx]
c000eab6:	52                   	push   edx
c000eab7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000eaba:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000eabd:	83 c4 10             	add    esp,0x10
c000eac0:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c000eaca:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000eacd:	8b b7 32 05 00 00    	mov    esi,DWORD PTR [edi+0x532]
c000ead3:	85 f6                	test   esi,esi
c000ead5:	74 16                	je     c000eaed <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c000ead7:	83 ec 0c             	sub    esp,0xc
c000eada:	56                   	push   esi
c000eadb:	e8 da 29 00 00       	call   c00114ba <VAS::~VAS()>
c000eae0:	58                   	pop    eax
c000eae1:	5a                   	pop    edx
c000eae2:	6a 10                	push   0x10
c000eae4:	56                   	push   esi
c000eae5:	e8 a5 36 00 00       	call   c001218f <operator delete(void*, unsigned long)>
c000eaea:	83 c4 10             	add    esp,0x10
c000eaed:	83 ec 0c             	sub    esp,0xc
c000eaf0:	68 5b 8c 03 c0       	push   0xc0038c5b
c000eaf5:	e8 d6 e0 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	83 ec 08             	sub    esp,0x8
c000eb00:	6a 63                	push   0x63
c000eb02:	53                   	push   ebx
c000eb03:	e8 87 36 00 00       	call   c001218f <operator delete(void*, unsigned long)>
c000eb08:	83 c4 2c             	add    esp,0x2c
c000eb0b:	5b                   	pop    ebx
c000eb0c:	5e                   	pop    esi
c000eb0d:	5f                   	pop    edi
c000eb0e:	5d                   	pop    ebp
c000eb0f:	c3                   	ret    
c000eb10:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000eb14:	83 ec 0c             	sub    esp,0xc
c000eb17:	68 78 8e 03 c0       	push   0xc0038e78
c000eb1c:	e8 cd e1 ff ff       	call   c000ccee <panic(char const*)>
c000eb21:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000eb24:	83 c4 10             	add    esp,0x10
c000eb27:	89 f7                	mov    edi,esi
c000eb29:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eb2d:	e9 95 fe ff ff       	jmp    c000e9c7 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000eb32:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000eb38:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c000eb3e:	75 1c                	jne    c000eb5c <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	68 e0 8e 03 c0       	push   0xc0038ee0
c000eb48:	e8 83 e0 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c000eb4d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000eb54:	e8 18 fb ff ff       	call   c000e671 <blockTask(TaskState)>
c000eb59:	83 c4 10             	add    esp,0x10
c000eb5c:	83 ec 08             	sub    esp,0x8
c000eb5f:	56                   	push   esi
c000eb60:	68 50 b9 03 c0       	push   0xc003b950
c000eb65:	e8 74 fc 00 00       	call   c001e7de <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000eb6a:	c7 04 24 50 b9 03 c0 	mov    DWORD PTR [esp],0xc003b950
c000eb71:	e8 06 fe 00 00       	call   c001e97c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000eb76:	83 c4 10             	add    esp,0x10
c000eb79:	39 f8                	cmp    eax,edi
c000eb7b:	0f 84 23 ff ff ff    	je     c000eaa4 <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c000eb81:	83 ec 0c             	sub    esp,0xc
c000eb84:	68 50 b9 03 c0       	push   0xc003b950
c000eb89:	e8 ee fd 00 00       	call   c001e97c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000eb8e:	c7 04 24 50 b9 03 c0 	mov    DWORD PTR [esp],0xc003b950
c000eb95:	89 c6                	mov    esi,eax
c000eb97:	e8 32 fd 00 00       	call   c001e8ce <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000eb9c:	83 c4 10             	add    esp,0x10
c000eb9f:	39 f3                	cmp    ebx,esi
c000eba1:	74 b9                	je     c000eb5c <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000eba3:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c000eba6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000eba9:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c000ebaf:	75 ab                	jne    c000eb5c <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000ebb1:	e9 7c ff ff ff       	jmp    c000eb32 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ed>
c000ebb6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ebba:	83 ec 0c             	sub    esp,0xc
c000ebbd:	68 ac 8e 03 c0       	push   0xc0038eac
c000ebc2:	e9 55 ff ff ff       	jmp    c000eb1c <cleanupTerminatedTask(ThreadControlBlock*)+0x1d7>
c000ebc7:	8b 36                	mov    esi,DWORD PTR [esi]
c000ebc9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ebcd:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c000ebd0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ebd3:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c000ebd9:	01 d7                	add    edi,edx
c000ebdb:	89 f8                	mov    eax,edi
c000ebdd:	e9 4b fe ff ff       	jmp    c000ea2d <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c000ebe2 <cleanerTaskFunction(void*)>:
c000ebe2:	53                   	push   ebx
c000ebe3:	83 ec 08             	sub    esp,0x8
c000ebe6:	e8 89 f4 ff ff       	call   c000e074 <unlockScheduler()>
c000ebeb:	e8 82 f4 ff ff       	call   c000e072 <lockScheduler()>
c000ebf0:	80 3d 14 b9 03 c0 00 	cmp    BYTE PTR ds:0xc003b914,0x0
c000ebf7:	75 72                	jne    c000ec6b <cleanerTaskFunction(void*)+0x89>
c000ebf9:	83 ec 0c             	sub    esp,0xc
c000ebfc:	6a 02                	push   0x2
c000ebfe:	e8 2c fa ff ff       	call   c000e62f <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c000ec03:	83 c4 10             	add    esp,0x10
c000ec06:	c6 05 14 b9 03 c0 00 	mov    BYTE PTR ds:0xc003b914,0x0
c000ec0d:	e8 87 f4 ff ff       	call   c000e099 <lockStuff()>
c000ec12:	e8 5b f4 ff ff       	call   c000e072 <lockScheduler()>
c000ec17:	83 ec 0c             	sub    esp,0xc
c000ec1a:	68 38 b9 03 c0       	push   0xc003b938
c000ec1f:	e8 8e fc 00 00       	call   c001e8b2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000ec24:	83 c4 10             	add    esp,0x10
c000ec27:	84 c0                	test   al,al
c000ec29:	75 28                	jne    c000ec53 <cleanerTaskFunction(void*)+0x71>
c000ec2b:	83 ec 0c             	sub    esp,0xc
c000ec2e:	68 38 b9 03 c0       	push   0xc003b938
c000ec33:	e8 44 fd 00 00       	call   c001e97c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ec38:	c7 04 24 38 b9 03 c0 	mov    DWORD PTR [esp],0xc003b938
c000ec3f:	89 c3                	mov    ebx,eax
c000ec41:	e8 88 fc 00 00       	call   c001e8ce <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000ec46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec49:	e8 f7 fc ff ff       	call   c000e945 <cleanupTerminatedTask(ThreadControlBlock*)>
c000ec4e:	83 c4 10             	add    esp,0x10
c000ec51:	eb c4                	jmp    c000ec17 <cleanerTaskFunction(void*)+0x35>
c000ec53:	e8 1c f4 ff ff       	call   c000e074 <unlockScheduler()>
c000ec58:	e8 ce f7 ff ff       	call   c000e42b <unlockStuff()>
c000ec5d:	e8 10 f4 ff ff       	call   c000e072 <lockScheduler()>
c000ec62:	80 3d 14 b9 03 c0 00 	cmp    BYTE PTR ds:0xc003b914,0x0
c000ec69:	74 8e                	je     c000ebf9 <cleanerTaskFunction(void*)+0x17>
c000ec6b:	e8 04 f4 ff ff       	call   c000e074 <unlockScheduler()>
c000ec70:	eb 94                	jmp    c000ec06 <cleanerTaskFunction(void*)+0x24>

c000ec72 <terminateTask(int)>:
c000ec72:	83 ec 0c             	sub    esp,0xc
c000ec75:	e8 1f f4 ff ff       	call   c000e099 <lockStuff()>
c000ec7a:	e8 f3 f3 ff ff       	call   c000e072 <lockScheduler()>
c000ec7f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ec83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ec88:	83 ec 08             	sub    esp,0x8
c000ec8b:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c000ec8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ec93:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000ec96:	50                   	push   eax
c000ec97:	68 38 b9 03 c0       	push   0xc003b938
c000ec9c:	e8 3d fb 00 00       	call   c001e7de <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000eca1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eca6:	83 c4 10             	add    esp,0x10
c000eca9:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c000ecb0:	a1 10 b9 03 c0       	mov    eax,ds:0xc003b910
c000ecb5:	85 c0                	test   eax,eax
c000ecb7:	74 2e                	je     c000ece7 <terminateTask(int)+0x75>
c000ecb9:	83 ec 0c             	sub    esp,0xc
c000ecbc:	c6 05 14 b9 03 c0 01 	mov    BYTE PTR ds:0xc003b914,0x1
c000ecc3:	50                   	push   eax
c000ecc4:	e8 cd fb ff ff       	call   c000e896 <unblockTask(ThreadControlBlock*)>
c000ecc9:	83 c4 10             	add    esp,0x10
c000eccc:	e8 a3 f3 ff ff       	call   c000e074 <unlockScheduler()>
c000ecd1:	e8 55 f7 ff ff       	call   c000e42b <unlockStuff()>
c000ecd6:	e8 97 f3 ff ff       	call   c000e072 <lockScheduler()>
c000ecdb:	e8 c6 f6 ff ff       	call   c000e3a6 <schedule()>
c000ece0:	e8 8f f3 ff ff       	call   c000e074 <unlockScheduler()>
c000ece5:	eb ef                	jmp    c000ecd6 <terminateTask(int)+0x64>
c000ece7:	83 ec 0c             	sub    esp,0xc
c000ecea:	68 69 8c 03 c0       	push   0xc0038c69
c000ecef:	e8 dc de ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c000ecf4:	83 c4 10             	add    esp,0x10
c000ecf7:	eb d3                	jmp    c000eccc <terminateTask(int)+0x5a>
c000ecf9:	90                   	nop

c000ecfa <Semaphore::release()>:
c000ecfa:	83 ec 0c             	sub    esp,0xc
c000ecfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed01:	e8 93 f3 ff ff       	call   c000e099 <lockStuff()>
c000ed06:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ed09:	85 d2                	test   edx,edx
c000ed0b:	74 1a                	je     c000ed27 <Semaphore::release()+0x2d>
c000ed0d:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c000ed10:	83 ec 0c             	sub    esp,0xc
c000ed13:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000ed16:	52                   	push   edx
c000ed17:	e8 7a fb ff ff       	call   c000e896 <unblockTask(ThreadControlBlock*)>
c000ed1c:	83 c4 10             	add    esp,0x10
c000ed1f:	83 c4 0c             	add    esp,0xc
c000ed22:	e9 04 f7 ff ff       	jmp    c000e42b <unlockStuff()>
c000ed27:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c000ed2a:	83 c4 0c             	add    esp,0xc
c000ed2d:	e9 f9 f6 ff ff       	jmp    c000e42b <unlockStuff()>

c000ed32 <__static_initialization_and_destruction_0(int, int)>:
c000ed32:	83 ec 0c             	sub    esp,0xc
c000ed35:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ed3a:	0f 85 88 00 00 00    	jne    c000edc8 <__static_initialization_and_destruction_0(int, int)+0x96>
c000ed40:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000ed48:	75 7e                	jne    c000edc8 <__static_initialization_and_destruction_0(int, int)+0x96>
c000ed4a:	83 ec 0c             	sub    esp,0xc
c000ed4d:	68 50 b9 03 c0       	push   0xc003b950
c000ed52:	e8 2f fa 00 00       	call   c001e786 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000ed57:	83 c4 10             	add    esp,0x10
c000ed5a:	83 ec 04             	sub    esp,0x4
c000ed5d:	68 2c ab 03 c0       	push   0xc003ab2c
c000ed62:	68 50 b9 03 c0       	push   0xc003b950
c000ed67:	68 46 e7 01 c0       	push   0xc001e746
c000ed6c:	e8 9a 33 00 00       	call   c001210b <__cxa_atexit>
c000ed71:	83 c4 10             	add    esp,0x10
c000ed74:	83 ec 0c             	sub    esp,0xc
c000ed77:	68 44 b9 03 c0       	push   0xc003b944
c000ed7c:	e8 05 fa 00 00       	call   c001e786 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000ed81:	83 c4 10             	add    esp,0x10
c000ed84:	83 ec 04             	sub    esp,0x4
c000ed87:	68 2c ab 03 c0       	push   0xc003ab2c
c000ed8c:	68 44 b9 03 c0       	push   0xc003b944
c000ed91:	68 46 e7 01 c0       	push   0xc001e746
c000ed96:	e8 70 33 00 00       	call   c001210b <__cxa_atexit>
c000ed9b:	83 c4 10             	add    esp,0x10
c000ed9e:	83 ec 0c             	sub    esp,0xc
c000eda1:	68 38 b9 03 c0       	push   0xc003b938
c000eda6:	e8 db f9 00 00       	call   c001e786 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000edab:	83 c4 10             	add    esp,0x10
c000edae:	83 ec 04             	sub    esp,0x4
c000edb1:	68 2c ab 03 c0       	push   0xc003ab2c
c000edb6:	68 38 b9 03 c0       	push   0xc003b938
c000edbb:	68 46 e7 01 c0       	push   0xc001e746
c000edc0:	e8 46 33 00 00       	call   c001210b <__cxa_atexit>
c000edc5:	83 c4 10             	add    esp,0x10
c000edc8:	90                   	nop
c000edc9:	83 c4 0c             	add    esp,0xc
c000edcc:	c3                   	ret    

c000edcd <_GLOBAL__sub_I_kernelProcess>:
c000edcd:	83 ec 0c             	sub    esp,0xc
c000edd0:	83 ec 08             	sub    esp,0x8
c000edd3:	68 ff ff 00 00       	push   0xffff
c000edd8:	6a 01                	push   0x1
c000edda:	e8 53 ff ff ff       	call   c000ed32 <__static_initialization_and_destruction_0(int, int)>
c000eddf:	83 c4 10             	add    esp,0x10
c000ede2:	83 c4 0c             	add    esp,0xc
c000ede5:	c3                   	ret    

c000ede6 <sysCallGetPID(regs*)>:
c000ede6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000edeb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000edee:	8b 00                	mov    eax,DWORD PTR [eax]
c000edf0:	99                   	cdq    
c000edf1:	c3                   	ret    

c000edf2 <sysCallSeekDir(regs*)>:
c000edf2:	31 c0                	xor    eax,eax
c000edf4:	31 d2                	xor    edx,edx
c000edf6:	c3                   	ret    

c000edf7 <sysCallTellDir(regs*)>:
c000edf7:	31 c0                	xor    eax,eax
c000edf9:	31 d2                	xor    edx,edx
c000edfb:	c3                   	ret    

c000edfc <sysCallVerify(regs*)>:
c000edfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee00:	31 d2                	xor    edx,edx
c000ee02:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ee05:	c3                   	ret    

c000ee06 <sysCallGetArgc(regs*)>:
c000ee06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee0b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ee0e:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c000ee14:	99                   	cdq    
c000ee15:	c3                   	ret    

c000ee16 <sysFormatDisk(regs*)>:
c000ee16:	56                   	push   esi
c000ee17:	53                   	push   ebx
c000ee18:	53                   	push   ebx
c000ee19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ee1d:	8b 1d c0 bb 03 c0    	mov    ebx,DWORD PTR ds:0xc003bbc0
c000ee23:	eb 25                	jmp    c000ee4a <sysFormatDisk(regs*)+0x34>
c000ee25:	83 ec 0c             	sub    esp,0xc
c000ee28:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000ee2b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ee2d:	ff 76 28             	push   DWORD PTR [esi+0x28]
c000ee30:	ff 76 24             	push   DWORD PTR [esi+0x24]
c000ee33:	50                   	push   eax
c000ee34:	ff 34 85 60 c0 03 c0 	push   DWORD PTR [eax*4-0x3ffc3fa0]
c000ee3b:	53                   	push   ebx
c000ee3c:	ff 52 48             	call   DWORD PTR [edx+0x48]
c000ee3f:	83 c4 20             	add    esp,0x20
c000ee42:	83 f8 08             	cmp    eax,0x8
c000ee45:	75 12                	jne    c000ee59 <sysFormatDisk(regs*)+0x43>
c000ee47:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000ee4a:	85 db                	test   ebx,ebx
c000ee4c:	75 d7                	jne    c000ee25 <sysFormatDisk(regs*)+0xf>
c000ee4e:	59                   	pop    ecx
c000ee4f:	b8 03 00 00 00       	mov    eax,0x3
c000ee54:	31 d2                	xor    edx,edx
c000ee56:	5b                   	pop    ebx
c000ee57:	5e                   	pop    esi
c000ee58:	c3                   	ret    
c000ee59:	85 c0                	test   eax,eax
c000ee5b:	74 1b                	je     c000ee78 <sysFormatDisk(regs*)+0x62>
c000ee5d:	83 f8 09             	cmp    eax,0x9
c000ee60:	74 0b                	je     c000ee6d <sysFormatDisk(regs*)+0x57>
c000ee62:	59                   	pop    ecx
c000ee63:	b8 02 00 00 00       	mov    eax,0x2
c000ee68:	31 d2                	xor    edx,edx
c000ee6a:	5b                   	pop    ebx
c000ee6b:	5e                   	pop    esi
c000ee6c:	c3                   	ret    
c000ee6d:	59                   	pop    ecx
c000ee6e:	b8 01 00 00 00       	mov    eax,0x1
c000ee73:	31 d2                	xor    edx,edx
c000ee75:	5b                   	pop    ebx
c000ee76:	5e                   	pop    esi
c000ee77:	c3                   	ret    
c000ee78:	59                   	pop    ecx
c000ee79:	31 c0                	xor    eax,eax
c000ee7b:	31 d2                	xor    edx,edx
c000ee7d:	5b                   	pop    ebx
c000ee7e:	5e                   	pop    esi
c000ee7f:	c3                   	ret    

c000ee80 <sysSetDiskVolumeLabel(regs*)>:
c000ee80:	56                   	push   esi
c000ee81:	53                   	push   ebx
c000ee82:	53                   	push   ebx
c000ee83:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ee87:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000ee8a:	83 f8 19             	cmp    eax,0x19
c000ee8d:	77 29                	ja     c000eeb8 <sysSetDiskVolumeLabel(regs*)+0x38>
c000ee8f:	8b 0c 85 60 c0 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc3fa0]
c000ee96:	85 c9                	test   ecx,ecx
c000ee98:	74 1e                	je     c000eeb8 <sysSetDiskVolumeLabel(regs*)+0x38>
c000ee9a:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c000ee9d:	85 d2                	test   edx,edx
c000ee9f:	74 17                	je     c000eeb8 <sysSetDiskVolumeLabel(regs*)+0x38>
c000eea1:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c000eea7:	8b 33                	mov    esi,DWORD PTR [ebx]
c000eea9:	52                   	push   edx
c000eeaa:	50                   	push   eax
c000eeab:	51                   	push   ecx
c000eeac:	53                   	push   ebx
c000eead:	ff 56 58             	call   DWORD PTR [esi+0x58]
c000eeb0:	83 c4 10             	add    esp,0x10
c000eeb3:	99                   	cdq    
c000eeb4:	59                   	pop    ecx
c000eeb5:	5b                   	pop    ebx
c000eeb6:	5e                   	pop    esi
c000eeb7:	c3                   	ret    
c000eeb8:	59                   	pop    ecx
c000eeb9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000eebe:	ba ff ff ff ff       	mov    edx,0xffffffff
c000eec3:	5b                   	pop    ebx
c000eec4:	5e                   	pop    esi
c000eec5:	c3                   	ret    

c000eec6 <sysGetDiskVolumeLabel(regs*)>:
c000eec6:	57                   	push   edi
c000eec7:	56                   	push   esi
c000eec8:	53                   	push   ebx
c000eec9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eecd:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000eed0:	83 fa 19             	cmp    edx,0x19
c000eed3:	77 34                	ja     c000ef09 <sysGetDiskVolumeLabel(regs*)+0x43>
c000eed5:	8b 0c 95 60 c0 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffc3fa0]
c000eedc:	85 c9                	test   ecx,ecx
c000eede:	74 29                	je     c000ef09 <sysGetDiskVolumeLabel(regs*)+0x43>
c000eee0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c000eee3:	85 db                	test   ebx,ebx
c000eee5:	74 22                	je     c000ef09 <sysGetDiskVolumeLabel(regs*)+0x43>
c000eee7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000eeea:	85 c0                	test   eax,eax
c000eeec:	74 1b                	je     c000ef09 <sysGetDiskVolumeLabel(regs*)+0x43>
c000eeee:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c000eef4:	83 ec 0c             	sub    esp,0xc
c000eef7:	8b 3e                	mov    edi,DWORD PTR [esi]
c000eef9:	50                   	push   eax
c000eefa:	53                   	push   ebx
c000eefb:	52                   	push   edx
c000eefc:	51                   	push   ecx
c000eefd:	56                   	push   esi
c000eefe:	ff 57 54             	call   DWORD PTR [edi+0x54]
c000ef01:	83 c4 20             	add    esp,0x20
c000ef04:	99                   	cdq    
c000ef05:	5b                   	pop    ebx
c000ef06:	5e                   	pop    esi
c000ef07:	5f                   	pop    edi
c000ef08:	c3                   	ret    
c000ef09:	5b                   	pop    ebx
c000ef0a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000ef0f:	ba ff ff ff ff       	mov    edx,0xffffffff
c000ef14:	5e                   	pop    esi
c000ef15:	5f                   	pop    edi
c000ef16:	c3                   	ret    

c000ef17 <sysShutdown(regs*)>:
c000ef17:	83 ec 0c             	sub    esp,0xc
c000ef1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef1e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ef21:	85 c0                	test   eax,eax
c000ef23:	74 24                	je     c000ef49 <sysShutdown(regs*)+0x32>
c000ef25:	48                   	dec    eax
c000ef26:	74 0e                	je     c000ef36 <sysShutdown(regs*)+0x1f>
c000ef28:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef2d:	ba ff ff ff ff       	mov    edx,0xffffffff
c000ef32:	83 c4 0c             	add    esp,0xc
c000ef35:	c3                   	ret    
c000ef36:	a1 e0 c0 03 c0       	mov    eax,ds:0xc003c0e0
c000ef3b:	85 c0                	test   eax,eax
c000ef3d:	74 02                	je     c000ef41 <sysShutdown(regs*)+0x2a>
c000ef3f:	ff d0                	call   eax
c000ef41:	31 c0                	xor    eax,eax
c000ef43:	31 d2                	xor    edx,edx
c000ef45:	83 c4 0c             	add    esp,0xc
c000ef48:	c3                   	ret    
c000ef49:	a1 08 b7 03 c0       	mov    eax,ds:0xc003b708
c000ef4e:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef50:	6a 00                	push   0x0
c000ef52:	6a 00                	push   0x0
c000ef54:	6a 00                	push   0x0
c000ef56:	50                   	push   eax
c000ef57:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000ef5a:	83 c4 10             	add    esp,0x10
c000ef5d:	eb c9                	jmp    c000ef28 <sysShutdown(regs*)+0x11>

c000ef5f <sysCallGetCwd(regs*)>:
c000ef5f:	83 ec 10             	sub    esp,0x10
c000ef62:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef66:	ff 70 28             	push   DWORD PTR [eax+0x28]
c000ef69:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000ef6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ef71:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000ef74:	e8 a6 39 00 00       	call   c001291f <getcwd(Process*, char*, int)>
c000ef79:	83 c4 1c             	add    esp,0x1c
c000ef7c:	99                   	cdq    
c000ef7d:	c3                   	ret    

c000ef7e <sysCallSetCwd(regs*)>:
c000ef7e:	83 ec 14             	sub    esp,0x14
c000ef81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef85:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000ef88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ef8d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000ef90:	e8 b4 39 00 00       	call   c0012949 <setcwd(Process*, char*)>
c000ef95:	83 c4 1c             	add    esp,0x1c
c000ef98:	99                   	cdq    
c000ef99:	c3                   	ret    

c000ef9a <sysCallRealpath(regs*)>:
c000ef9a:	83 ec 0c             	sub    esp,0xc
c000ef9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efa1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000efa4:	85 d2                	test   edx,edx
c000efa6:	74 07                	je     c000efaf <sysCallRealpath(regs*)+0x15>
c000efa8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000efab:	85 c0                	test   eax,eax
c000efad:	75 0b                	jne    c000efba <sysCallRealpath(regs*)+0x20>
c000efaf:	b8 01 00 00 00       	mov    eax,0x1
c000efb4:	31 d2                	xor    edx,edx
c000efb6:	83 c4 0c             	add    esp,0xc
c000efb9:	c3                   	ret    
c000efba:	51                   	push   ecx
c000efbb:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000efc1:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000efc4:	81 c1 0c 01 00 00    	add    ecx,0x10c
c000efca:	51                   	push   ecx
c000efcb:	52                   	push   edx
c000efcc:	50                   	push   eax
c000efcd:	e8 32 34 00 00       	call   c0012404 <standardiseFiles(char*, char const*, char const*)>
c000efd2:	83 c4 10             	add    esp,0x10
c000efd5:	31 c0                	xor    eax,eax
c000efd7:	31 d2                	xor    edx,edx
c000efd9:	83 c4 0c             	add    esp,0xc
c000efdc:	c3                   	ret    

c000efdd <sysCallOpen(regs*)>:
c000efdd:	56                   	push   esi
c000efde:	53                   	push   ebx
c000efdf:	81 ec 04 01 00 00    	sub    esp,0x104
c000efe5:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c000efec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000efef:	85 d2                	test   edx,edx
c000eff1:	0f 84 c3 00 00 00    	je     c000f0ba <sysCallOpen(regs*)+0xdd>
c000eff7:	50                   	push   eax
c000eff8:	68 af 8f 03 c0       	push   0xc0038faf
c000effd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f000:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f004:	56                   	push   esi
c000f005:	e8 fa 33 00 00       	call   c0012404 <standardiseFiles(char*, char const*, char const*)>
c000f00a:	89 34 24             	mov    DWORD PTR [esp],esi
c000f00d:	e8 13 16 ff ff       	call   c0000625 <strlen>
c000f012:	83 c4 10             	add    esp,0x10
c000f015:	48                   	dec    eax
c000f016:	74 1d                	je     c000f035 <sysCallOpen(regs*)+0x58>
c000f018:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c000f01b:	eb 0f                	jmp    c000f02c <sysCallOpen(regs*)+0x4f>
c000f01d:	80 fa 3a             	cmp    dl,0x3a
c000f020:	74 0f                	je     c000f031 <sysCallOpen(regs*)+0x54>
c000f022:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000f026:	48                   	dec    eax
c000f027:	74 0c                	je     c000f035 <sysCallOpen(regs*)+0x58>
c000f029:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c000f02c:	80 fa 2e             	cmp    dl,0x2e
c000f02f:	75 ec                	jne    c000f01d <sysCallOpen(regs*)+0x40>
c000f031:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c000f035:	83 ec 0c             	sub    esp,0xc
c000f038:	68 14 01 00 00       	push   0x114
c000f03d:	e8 3e 31 00 00       	call   c0012180 <operator new(unsigned long)>
c000f042:	83 c4 0c             	add    esp,0xc
c000f045:	89 c6                	mov    esi,eax
c000f047:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f04c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f04f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f052:	56                   	push   esi
c000f053:	e8 56 35 00 00       	call   c00125ae <File::File(char const*, Process*)>
c000f058:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000f05b:	83 c4 10             	add    esp,0x10
c000f05e:	0f b6 d0             	movzx  edx,al
c000f061:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c000f064:	89 c2                	mov    edx,eax
c000f066:	83 e2 01             	and    edx,0x1
c000f069:	a8 02                	test   al,0x2
c000f06b:	74 03                	je     c000f070 <sysCallOpen(regs*)+0x93>
c000f06d:	83 ca 02             	or     edx,0x2
c000f070:	a8 04                	test   al,0x4
c000f072:	74 03                	je     c000f077 <sysCallOpen(regs*)+0x9a>
c000f074:	83 ca 04             	or     edx,0x4
c000f077:	a8 08                	test   al,0x8
c000f079:	74 03                	je     c000f07e <sysCallOpen(regs*)+0xa1>
c000f07b:	83 ca 0a             	or     edx,0xa
c000f07e:	a8 10                	test   al,0x10
c000f080:	74 03                	je     c000f085 <sysCallOpen(regs*)+0xa8>
c000f082:	83 ca 12             	or     edx,0x12
c000f085:	83 ec 08             	sub    esp,0x8
c000f088:	52                   	push   edx
c000f089:	56                   	push   esi
c000f08a:	e8 83 35 00 00       	call   c0012612 <File::open(FileOpenMode)>
c000f08f:	83 c4 10             	add    esp,0x10
c000f092:	85 c0                	test   eax,eax
c000f094:	75 24                	jne    c000f0ba <sysCallOpen(regs*)+0xdd>
c000f096:	83 ec 0c             	sub    esp,0xc
c000f099:	56                   	push   esi
c000f09a:	e8 05 1d 00 00       	call   c0010da4 <UnixFile::getFileDescriptor()>
c000f09f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000f0a2:	83 c4 10             	add    esp,0x10
c000f0a5:	89 02                	mov    DWORD PTR [edx],eax
c000f0a7:	c1 f8 1f             	sar    eax,0x1f
c000f0aa:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000f0ad:	81 c4 04 01 00 00    	add    esp,0x104
c000f0b3:	31 c0                	xor    eax,eax
c000f0b5:	31 d2                	xor    edx,edx
c000f0b7:	5b                   	pop    ebx
c000f0b8:	5e                   	pop    esi
c000f0b9:	c3                   	ret    
c000f0ba:	81 c4 04 01 00 00    	add    esp,0x104
c000f0c0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f0c5:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f0ca:	5b                   	pop    ebx
c000f0cb:	5e                   	pop    esi
c000f0cc:	c3                   	ret    

c000f0cd <sysCallReadDir(regs*)>:
c000f0cd:	53                   	push   ebx
c000f0ce:	83 ec 18             	sub    esp,0x18
c000f0d1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f0d5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000f0d8:	83 f8 02             	cmp    eax,0x2
c000f0db:	77 0c                	ja     c000f0e9 <sysCallReadDir(regs*)+0x1c>
c000f0dd:	b8 01 00 00 00       	mov    eax,0x1
c000f0e2:	31 d2                	xor    edx,edx
c000f0e4:	83 c4 18             	add    esp,0x18
c000f0e7:	5b                   	pop    ebx
c000f0e8:	c3                   	ret    
c000f0e9:	83 ec 0c             	sub    esp,0xc
c000f0ec:	50                   	push   eax
c000f0ed:	e8 17 1e 00 00       	call   c0010f09 <getFromFileDescriptor(int)>
c000f0f2:	83 c4 10             	add    esp,0x10
c000f0f5:	85 c0                	test   eax,eax
c000f0f7:	74 37                	je     c000f130 <sysCallReadDir(regs*)+0x63>
c000f0f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f101:	83 ec 0c             	sub    esp,0xc
c000f104:	8b 10                	mov    edx,DWORD PTR [eax]
c000f106:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000f10a:	51                   	push   ecx
c000f10b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f10e:	6a 00                	push   0x0
c000f110:	68 10 01 00 00       	push   0x110
c000f115:	50                   	push   eax
c000f116:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000f119:	83 c4 20             	add    esp,0x20
c000f11c:	85 c0                	test   eax,eax
c000f11e:	74 0c                	je     c000f12c <sysCallReadDir(regs*)+0x5f>
c000f120:	83 f8 07             	cmp    eax,0x7
c000f123:	74 b8                	je     c000f0dd <sysCallReadDir(regs*)+0x10>
c000f125:	b8 02 00 00 00       	mov    eax,0x2
c000f12a:	eb b6                	jmp    c000f0e2 <sysCallReadDir(regs*)+0x15>
c000f12c:	31 c0                	xor    eax,eax
c000f12e:	eb b2                	jmp    c000f0e2 <sysCallReadDir(regs*)+0x15>
c000f130:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f135:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f13a:	eb a8                	jmp    c000f0e4 <sysCallReadDir(regs*)+0x17>

c000f13c <sysCallIsATTY(regs*)>:
c000f13c:	83 ec 0c             	sub    esp,0xc
c000f13f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f143:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f146:	83 f8 02             	cmp    eax,0x2
c000f149:	77 26                	ja     c000f171 <sysCallIsATTY(regs*)+0x35>
c000f14b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f150:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f153:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000f159:	85 c0                	test   eax,eax
c000f15b:	74 24                	je     c000f181 <sysCallIsATTY(regs*)+0x45>
c000f15d:	83 ec 0c             	sub    esp,0xc
c000f160:	8b 10                	mov    edx,DWORD PTR [eax]
c000f162:	50                   	push   eax
c000f163:	ff 12                	call   DWORD PTR [edx]
c000f165:	31 d2                	xor    edx,edx
c000f167:	0f b6 c0             	movzx  eax,al
c000f16a:	83 c4 10             	add    esp,0x10
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	c3                   	ret    
c000f171:	83 ec 0c             	sub    esp,0xc
c000f174:	50                   	push   eax
c000f175:	e8 8f 1d 00 00       	call   c0010f09 <getFromFileDescriptor(int)>
c000f17a:	83 c4 10             	add    esp,0x10
c000f17d:	85 c0                	test   eax,eax
c000f17f:	75 dc                	jne    c000f15d <sysCallIsATTY(regs*)+0x21>
c000f181:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f186:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f18b:	83 c4 0c             	add    esp,0xc
c000f18e:	c3                   	ret    

c000f18f <sysCallSeek(regs*)>:
c000f18f:	53                   	push   ebx
c000f190:	83 ec 08             	sub    esp,0x8
c000f193:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f197:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f19a:	83 f8 02             	cmp    eax,0x2
c000f19d:	76 32                	jbe    c000f1d1 <sysCallSeek(regs*)+0x42>
c000f19f:	83 ec 0c             	sub    esp,0xc
c000f1a2:	50                   	push   eax
c000f1a3:	e8 61 1d 00 00       	call   c0010f09 <getFromFileDescriptor(int)>
c000f1a8:	83 c4 0c             	add    esp,0xc
c000f1ab:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c000f1ae:	31 db                	xor    ebx,ebx
c000f1b0:	53                   	push   ebx
c000f1b1:	51                   	push   ecx
c000f1b2:	50                   	push   eax
c000f1b3:	e8 18 35 00 00       	call   c00126d0 <File::seek(unsigned long long)>
c000f1b8:	83 c4 10             	add    esp,0x10
c000f1bb:	85 c0                	test   eax,eax
c000f1bd:	0f 95 c0             	setne  al
c000f1c0:	31 d2                	xor    edx,edx
c000f1c2:	0f b6 c0             	movzx  eax,al
c000f1c5:	f7 d8                	neg    eax
c000f1c7:	83 d2 00             	adc    edx,0x0
c000f1ca:	83 c4 08             	add    esp,0x8
c000f1cd:	f7 da                	neg    edx
c000f1cf:	5b                   	pop    ebx
c000f1d0:	c3                   	ret    
c000f1d1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f1d6:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f1db:	83 c4 08             	add    esp,0x8
c000f1de:	5b                   	pop    ebx
c000f1df:	c3                   	ret    

c000f1e0 <sysCallTell(regs*)>:
c000f1e0:	53                   	push   ebx
c000f1e1:	83 ec 08             	sub    esp,0x8
c000f1e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1e8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f1eb:	83 f8 02             	cmp    eax,0x2
c000f1ee:	76 2d                	jbe    c000f21d <sysCallTell(regs*)+0x3d>
c000f1f0:	83 ec 0c             	sub    esp,0xc
c000f1f3:	50                   	push   eax
c000f1f4:	e8 10 1d 00 00       	call   c0010f09 <getFromFileDescriptor(int)>
c000f1f9:	5a                   	pop    edx
c000f1fa:	59                   	pop    ecx
c000f1fb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f1fe:	50                   	push   eax
c000f1ff:	e8 22 35 00 00       	call   c0012726 <File::tell(unsigned long long*)>
c000f204:	83 c4 10             	add    esp,0x10
c000f207:	85 c0                	test   eax,eax
c000f209:	0f 95 c0             	setne  al
c000f20c:	31 d2                	xor    edx,edx
c000f20e:	0f b6 c0             	movzx  eax,al
c000f211:	f7 d8                	neg    eax
c000f213:	83 d2 00             	adc    edx,0x0
c000f216:	83 c4 08             	add    esp,0x8
c000f219:	f7 da                	neg    edx
c000f21b:	5b                   	pop    ebx
c000f21c:	c3                   	ret    
c000f21d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f222:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f227:	83 c4 08             	add    esp,0x8
c000f22a:	5b                   	pop    ebx
c000f22b:	c3                   	ret    

c000f22c <sysCallSizeFromFilename(regs*)>:
c000f22c:	57                   	push   edi
c000f22d:	56                   	push   esi
c000f22e:	53                   	push   ebx
c000f22f:	83 ec 10             	sub    esp,0x10
c000f232:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000f236:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c000f239:	83 ff 02             	cmp    edi,0x2
c000f23c:	76 56                	jbe    c000f294 <sysCallSizeFromFilename(regs*)+0x68>
c000f23e:	83 ec 0c             	sub    esp,0xc
c000f241:	68 14 01 00 00       	push   0x114
c000f246:	e8 35 2f 00 00       	call   c0012180 <operator new(unsigned long)>
c000f24b:	83 c4 0c             	add    esp,0xc
c000f24e:	89 c3                	mov    ebx,eax
c000f250:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f255:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f258:	57                   	push   edi
c000f259:	53                   	push   ebx
c000f25a:	e8 4f 33 00 00       	call   c00125ae <File::File(char const*, Process*)>
c000f25f:	83 c4 0c             	add    esp,0xc
c000f262:	8d 44 24 13          	lea    eax,[esp+0x13]
c000f266:	50                   	push   eax
c000f267:	ff 76 28             	push   DWORD PTR [esi+0x28]
c000f26a:	53                   	push   ebx
c000f26b:	e8 4e 36 00 00       	call   c00128be <File::stat(unsigned long long*, bool*)>
c000f270:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f273:	89 c6                	mov    esi,eax
c000f275:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f277:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f27a:	83 c4 10             	add    esp,0x10
c000f27d:	31 c0                	xor    eax,eax
c000f27f:	85 f6                	test   esi,esi
c000f281:	0f 95 c0             	setne  al
c000f284:	31 d2                	xor    edx,edx
c000f286:	f7 d8                	neg    eax
c000f288:	83 d2 00             	adc    edx,0x0
c000f28b:	83 c4 10             	add    esp,0x10
c000f28e:	f7 da                	neg    edx
c000f290:	5b                   	pop    ebx
c000f291:	5e                   	pop    esi
c000f292:	5f                   	pop    edi
c000f293:	c3                   	ret    
c000f294:	83 c4 10             	add    esp,0x10
c000f297:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f29c:	5b                   	pop    ebx
c000f29d:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f2a2:	5e                   	pop    esi
c000f2a3:	5f                   	pop    edi
c000f2a4:	c3                   	ret    

c000f2a5 <sysCallSize(regs*)>:
c000f2a5:	53                   	push   ebx
c000f2a6:	83 ec 18             	sub    esp,0x18
c000f2a9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f2ad:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f2b0:	83 f8 02             	cmp    eax,0x2
c000f2b3:	76 33                	jbe    c000f2e8 <sysCallSize(regs*)+0x43>
c000f2b5:	83 ec 0c             	sub    esp,0xc
c000f2b8:	50                   	push   eax
c000f2b9:	e8 4b 1c 00 00       	call   c0010f09 <getFromFileDescriptor(int)>
c000f2be:	83 c4 0c             	add    esp,0xc
c000f2c1:	8d 54 24 13          	lea    edx,[esp+0x13]
c000f2c5:	52                   	push   edx
c000f2c6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f2c9:	50                   	push   eax
c000f2ca:	e8 ef 35 00 00       	call   c00128be <File::stat(unsigned long long*, bool*)>
c000f2cf:	83 c4 10             	add    esp,0x10
c000f2d2:	85 c0                	test   eax,eax
c000f2d4:	0f 95 c0             	setne  al
c000f2d7:	31 d2                	xor    edx,edx
c000f2d9:	0f b6 c0             	movzx  eax,al
c000f2dc:	f7 d8                	neg    eax
c000f2de:	83 d2 00             	adc    edx,0x0
c000f2e1:	83 c4 18             	add    esp,0x18
c000f2e4:	f7 da                	neg    edx
c000f2e6:	5b                   	pop    ebx
c000f2e7:	c3                   	ret    
c000f2e8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f2ed:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f2f2:	83 c4 18             	add    esp,0x18
c000f2f5:	5b                   	pop    ebx
c000f2f6:	c3                   	ret    

c000f2f7 <sysCallClose(regs*)>:
c000f2f7:	53                   	push   ebx
c000f2f8:	83 ec 08             	sub    esp,0x8
c000f2fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2ff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f302:	83 f8 02             	cmp    eax,0x2
c000f305:	76 2f                	jbe    c000f336 <sysCallClose(regs*)+0x3f>
c000f307:	83 ec 0c             	sub    esp,0xc
c000f30a:	50                   	push   eax
c000f30b:	e8 f9 1b 00 00       	call   c0010f09 <getFromFileDescriptor(int)>
c000f310:	89 c3                	mov    ebx,eax
c000f312:	89 04 24             	mov    DWORD PTR [esp],eax
c000f315:	e8 56 33 00 00       	call   c0012670 <File::close()>
c000f31a:	83 c4 10             	add    esp,0x10
c000f31d:	85 db                	test   ebx,ebx
c000f31f:	74 0c                	je     c000f32d <sysCallClose(regs*)+0x36>
c000f321:	83 ec 0c             	sub    esp,0xc
c000f324:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f326:	53                   	push   ebx
c000f327:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f32a:	83 c4 10             	add    esp,0x10
c000f32d:	31 c0                	xor    eax,eax
c000f32f:	31 d2                	xor    edx,edx
c000f331:	83 c4 08             	add    esp,0x8
c000f334:	5b                   	pop    ebx
c000f335:	c3                   	ret    
c000f336:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f33b:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f340:	83 c4 08             	add    esp,0x8
c000f343:	5b                   	pop    ebx
c000f344:	c3                   	ret    

c000f345 <sysCallOpenDir(regs*)>:
c000f345:	56                   	push   esi
c000f346:	53                   	push   ebx
c000f347:	53                   	push   ebx
c000f348:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f34c:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c000f34f:	85 f6                	test   esi,esi
c000f351:	74 51                	je     c000f3a4 <sysCallOpenDir(regs*)+0x5f>
c000f353:	83 ec 0c             	sub    esp,0xc
c000f356:	68 14 01 00 00       	push   0x114
c000f35b:	e8 20 2e 00 00       	call   c0012180 <operator new(unsigned long)>
c000f360:	83 c4 0c             	add    esp,0xc
c000f363:	89 c6                	mov    esi,eax
c000f365:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f36a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f36d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f370:	56                   	push   esi
c000f371:	e8 fa 36 00 00       	call   c0012a70 <Directory::Directory(char const*, Process*)>
c000f376:	89 34 24             	mov    DWORD PTR [esp],esi
c000f379:	e8 56 37 00 00       	call   c0012ad4 <Directory::open()>
c000f37e:	83 c4 10             	add    esp,0x10
c000f381:	85 c0                	test   eax,eax
c000f383:	75 1f                	jne    c000f3a4 <sysCallOpenDir(regs*)+0x5f>
c000f385:	83 ec 0c             	sub    esp,0xc
c000f388:	56                   	push   esi
c000f389:	e8 16 1a 00 00       	call   c0010da4 <UnixFile::getFileDescriptor()>
c000f38e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000f391:	83 c4 10             	add    esp,0x10
c000f394:	89 02                	mov    DWORD PTR [edx],eax
c000f396:	c1 f8 1f             	sar    eax,0x1f
c000f399:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000f39c:	31 c0                	xor    eax,eax
c000f39e:	59                   	pop    ecx
c000f39f:	31 d2                	xor    edx,edx
c000f3a1:	5b                   	pop    ebx
c000f3a2:	5e                   	pop    esi
c000f3a3:	c3                   	ret    
c000f3a4:	59                   	pop    ecx
c000f3a5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f3aa:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f3af:	5b                   	pop    ebx
c000f3b0:	5e                   	pop    esi
c000f3b1:	c3                   	ret    

c000f3b2 <sysCallMakeDir(regs*)>:
c000f3b2:	56                   	push   esi
c000f3b3:	53                   	push   ebx
c000f3b4:	83 ec 10             	sub    esp,0x10
c000f3b7:	68 14 01 00 00       	push   0x114
c000f3bc:	e8 bf 2d 00 00       	call   c0012180 <operator new(unsigned long)>
c000f3c1:	83 c4 0c             	add    esp,0xc
c000f3c4:	89 c3                	mov    ebx,eax
c000f3c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f3cb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f3ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3d2:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000f3d5:	53                   	push   ebx
c000f3d6:	e8 95 36 00 00       	call   c0012a70 <Directory::Directory(char const*, Process*)>
c000f3db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3de:	e8 d1 38 00 00       	call   c0012cb4 <Directory::create()>
c000f3e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3e6:	89 c6                	mov    esi,eax
c000f3e8:	e8 43 37 00 00       	call   c0012b30 <Directory::close()>
c000f3ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f3ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f3f5:	31 c0                	xor    eax,eax
c000f3f7:	85 f6                	test   esi,esi
c000f3f9:	0f 95 c0             	setne  al
c000f3fc:	31 d2                	xor    edx,edx
c000f3fe:	f7 d8                	neg    eax
c000f400:	83 d2 00             	adc    edx,0x0
c000f403:	83 c4 14             	add    esp,0x14
c000f406:	f7 da                	neg    edx
c000f408:	5b                   	pop    ebx
c000f409:	5e                   	pop    esi
c000f40a:	c3                   	ret    

c000f40b <sysCallCloseDir(regs*)>:
c000f40b:	53                   	push   ebx
c000f40c:	83 ec 08             	sub    esp,0x8
c000f40f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f413:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f416:	83 f8 02             	cmp    eax,0x2
c000f419:	76 2f                	jbe    c000f44a <sysCallCloseDir(regs*)+0x3f>
c000f41b:	83 ec 0c             	sub    esp,0xc
c000f41e:	50                   	push   eax
c000f41f:	e8 e5 1a 00 00       	call   c0010f09 <getFromFileDescriptor(int)>
c000f424:	89 c3                	mov    ebx,eax
c000f426:	89 04 24             	mov    DWORD PTR [esp],eax
c000f429:	e8 02 37 00 00       	call   c0012b30 <Directory::close()>
c000f42e:	83 c4 10             	add    esp,0x10
c000f431:	85 db                	test   ebx,ebx
c000f433:	74 0c                	je     c000f441 <sysCallCloseDir(regs*)+0x36>
c000f435:	83 ec 0c             	sub    esp,0xc
c000f438:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f43a:	53                   	push   ebx
c000f43b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f43e:	83 c4 10             	add    esp,0x10
c000f441:	31 c0                	xor    eax,eax
c000f443:	31 d2                	xor    edx,edx
c000f445:	83 c4 08             	add    esp,0x8
c000f448:	5b                   	pop    ebx
c000f449:	c3                   	ret    
c000f44a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f44f:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f454:	83 c4 08             	add    esp,0x8
c000f457:	5b                   	pop    ebx
c000f458:	c3                   	ret    

c000f459 <sysCallWait(regs*)>:
c000f459:	83 ec 10             	sub    esp,0x10
c000f45c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f460:	ff 70 28             	push   DWORD PTR [eax+0x28]
c000f463:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000f466:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000f469:	e8 24 f2 ff ff       	call   c000e692 <waitTask(int, int*, int)>
c000f46e:	83 c4 1c             	add    esp,0x1c
c000f471:	99                   	cdq    
c000f472:	c3                   	ret    

c000f473 <sysCallFork(regs*)>:
c000f473:	83 ec 18             	sub    esp,0x18
c000f476:	68 b3 8f 03 c0       	push   0xc0038fb3
c000f47b:	e8 50 d7 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c000f480:	58                   	pop    eax
c000f481:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f485:	e8 d6 ef ff ff       	call   c000e460 <forkProcess(regs*)>
c000f48a:	83 c4 1c             	add    esp,0x1c
c000f48d:	99                   	cdq    
c000f48e:	c3                   	ret    

c000f48f <sysCallExecve(regs*)>:
c000f48f:	53                   	push   ebx
c000f490:	81 ec 24 01 00 00    	sub    esp,0x124
c000f496:	8b 9c 24 2c 01 00 00 	mov    ebx,DWORD PTR [esp+0x12c]
c000f49d:	68 c1 8f 03 c0       	push   0xc0038fc1
c000f4a2:	e8 29 d7 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c000f4a7:	83 c4 0c             	add    esp,0xc
c000f4aa:	68 00 01 00 00       	push   0x100
c000f4af:	8d 44 24 17          	lea    eax,[esp+0x17]
c000f4b3:	50                   	push   eax
c000f4b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f4b9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f4bc:	e8 5e 34 00 00       	call   c001291f <getcwd(Process*, char*, int)>
c000f4c1:	83 c4 0c             	add    esp,0xc
c000f4c4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f4c7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f4ca:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000f4cd:	e8 f4 f2 ff ff       	call   c000e7c6 <execveProcess(char const*, char* const*, char* const*)>
c000f4d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f4d7:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f4dc:	81 c4 28 01 00 00    	add    esp,0x128
c000f4e2:	5b                   	pop    ebx
c000f4e3:	c3                   	ret    

c000f4e4 <sysCallRmdir(regs*)>:
c000f4e4:	56                   	push   esi
c000f4e5:	53                   	push   ebx
c000f4e6:	83 ec 10             	sub    esp,0x10
c000f4e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f4ed:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c000f4f0:	68 14 01 00 00       	push   0x114
c000f4f5:	e8 86 2c 00 00       	call   c0012180 <operator new(unsigned long)>
c000f4fa:	83 c4 0c             	add    esp,0xc
c000f4fd:	89 c3                	mov    ebx,eax
c000f4ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f504:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f507:	56                   	push   esi
c000f508:	53                   	push   ebx
c000f509:	e8 a0 30 00 00       	call   c00125ae <File::File(char const*, Process*)>
c000f50e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f511:	e8 74 32 00 00       	call   c001278a <File::unlink()>
c000f516:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f519:	89 c6                	mov    esi,eax
c000f51b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f51d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f520:	31 c0                	xor    eax,eax
c000f522:	85 f6                	test   esi,esi
c000f524:	0f 95 c0             	setne  al
c000f527:	31 d2                	xor    edx,edx
c000f529:	f7 d8                	neg    eax
c000f52b:	83 d2 00             	adc    edx,0x0
c000f52e:	83 c4 14             	add    esp,0x14
c000f531:	f7 da                	neg    edx
c000f533:	5b                   	pop    ebx
c000f534:	5e                   	pop    esi
c000f535:	c3                   	ret    

c000f536 <sysCallUnlink(regs*)>:
c000f536:	56                   	push   esi
c000f537:	53                   	push   ebx
c000f538:	83 ec 10             	sub    esp,0x10
c000f53b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f53f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c000f542:	68 14 01 00 00       	push   0x114
c000f547:	e8 34 2c 00 00       	call   c0012180 <operator new(unsigned long)>
c000f54c:	83 c4 0c             	add    esp,0xc
c000f54f:	89 c3                	mov    ebx,eax
c000f551:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f556:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f559:	56                   	push   esi
c000f55a:	53                   	push   ebx
c000f55b:	e8 4e 30 00 00       	call   c00125ae <File::File(char const*, Process*)>
c000f560:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f563:	e8 22 32 00 00       	call   c001278a <File::unlink()>
c000f568:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f56b:	89 c6                	mov    esi,eax
c000f56d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f56f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f572:	31 c0                	xor    eax,eax
c000f574:	85 f6                	test   esi,esi
c000f576:	0f 95 c0             	setne  al
c000f579:	31 d2                	xor    edx,edx
c000f57b:	f7 d8                	neg    eax
c000f57d:	83 d2 00             	adc    edx,0x0
c000f580:	83 c4 14             	add    esp,0x14
c000f583:	f7 da                	neg    edx
c000f585:	5b                   	pop    ebx
c000f586:	5e                   	pop    esi
c000f587:	c3                   	ret    

c000f588 <sysCallGetArgv(regs*)>:
c000f588:	83 ec 0c             	sub    esp,0xc
c000f58b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f58f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000f592:	85 c0                	test   eax,eax
c000f594:	78 2b                	js     c000f5c1 <sysCallGetArgv(regs*)+0x39>
c000f596:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000f59c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000f59f:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c000f5a5:	7d 1a                	jge    c000f5c1 <sysCallGetArgv(regs*)+0x39>
c000f5a7:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c000f5ae:	85 c0                	test   eax,eax
c000f5b0:	74 17                	je     c000f5c9 <sysCallGetArgv(regs*)+0x41>
c000f5b2:	83 ec 08             	sub    esp,0x8
c000f5b5:	50                   	push   eax
c000f5b6:	ff 72 24             	push   DWORD PTR [edx+0x24]
c000f5b9:	e8 e9 10 ff ff       	call   c00006a7 <strcpy>
c000f5be:	83 c4 10             	add    esp,0x10
c000f5c1:	31 c0                	xor    eax,eax
c000f5c3:	31 d2                	xor    edx,edx
c000f5c5:	83 c4 0c             	add    esp,0xc
c000f5c8:	c3                   	ret    
c000f5c9:	b8 01 00 00 00       	mov    eax,0x1
c000f5ce:	31 d2                	xor    edx,edx
c000f5d0:	83 c4 0c             	add    esp,0xc
c000f5d3:	c3                   	ret    

c000f5d4 <sysCallTTYName(regs*)>:
c000f5d4:	56                   	push   esi
c000f5d5:	53                   	push   ebx
c000f5d6:	53                   	push   ebx
c000f5d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f5db:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c000f5de:	85 c0                	test   eax,eax
c000f5e0:	74 58                	je     c000f63a <sysCallTTYName(regs*)+0x66>
c000f5e2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000f5e5:	83 f8 02             	cmp    eax,0x2
c000f5e8:	77 3e                	ja     c000f628 <sysCallTTYName(regs*)+0x54>
c000f5ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f5ef:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f5f2:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000f5f8:	85 db                	test   ebx,ebx
c000f5fa:	74 3e                	je     c000f63a <sysCallTTYName(regs*)+0x66>
c000f5fc:	83 ec 0c             	sub    esp,0xc
c000f5ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f601:	53                   	push   ebx
c000f602:	ff 10                	call   DWORD PTR [eax]
c000f604:	83 c4 10             	add    esp,0x10
c000f607:	84 c0                	test   al,al
c000f609:	74 3a                	je     c000f645 <sysCallTTYName(regs*)+0x71>
c000f60b:	83 ec 08             	sub    esp,0x8
c000f60e:	81 c3 1e 10 00 00    	add    ebx,0x101e
c000f614:	53                   	push   ebx
c000f615:	ff 76 24             	push   DWORD PTR [esi+0x24]
c000f618:	e8 8a 10 ff ff       	call   c00006a7 <strcpy>
c000f61d:	83 c4 10             	add    esp,0x10
c000f620:	31 c0                	xor    eax,eax
c000f622:	59                   	pop    ecx
c000f623:	31 d2                	xor    edx,edx
c000f625:	5b                   	pop    ebx
c000f626:	5e                   	pop    esi
c000f627:	c3                   	ret    
c000f628:	83 ec 0c             	sub    esp,0xc
c000f62b:	50                   	push   eax
c000f62c:	e8 d8 18 00 00       	call   c0010f09 <getFromFileDescriptor(int)>
c000f631:	83 c4 10             	add    esp,0x10
c000f634:	89 c3                	mov    ebx,eax
c000f636:	85 db                	test   ebx,ebx
c000f638:	75 c2                	jne    c000f5fc <sysCallTTYName(regs*)+0x28>
c000f63a:	59                   	pop    ecx
c000f63b:	b8 01 00 00 00       	mov    eax,0x1
c000f640:	31 d2                	xor    edx,edx
c000f642:	5b                   	pop    ebx
c000f643:	5e                   	pop    esi
c000f644:	c3                   	ret    
c000f645:	59                   	pop    ecx
c000f646:	b8 02 00 00 00       	mov    eax,0x2
c000f64b:	31 d2                	xor    edx,edx
c000f64d:	5b                   	pop    ebx
c000f64e:	5e                   	pop    esi
c000f64f:	c3                   	ret    

c000f650 <sysCallGetEnv(regs*)>:
c000f650:	83 ec 0c             	sub    esp,0xc
c000f653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f657:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000f65a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000f65d:	85 c9                	test   ecx,ecx
c000f65f:	75 0c                	jne    c000f66d <sysCallGetEnv(regs*)+0x1d>
c000f661:	85 d2                	test   edx,edx
c000f663:	74 14                	je     c000f679 <sysCallGetEnv(regs*)+0x29>
c000f665:	31 c0                	xor    eax,eax
c000f667:	31 d2                	xor    edx,edx
c000f669:	83 c4 0c             	add    esp,0xc
c000f66c:	c3                   	ret    
c000f66d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f670:	85 d2                	test   edx,edx
c000f672:	74 1b                	je     c000f68f <sysCallGetEnv(regs*)+0x3f>
c000f674:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f677:	eb ec                	jmp    c000f665 <sysCallGetEnv(regs*)+0x15>
c000f679:	83 ec 0c             	sub    esp,0xc
c000f67c:	68 0c 90 03 c0       	push   0xc003900c
c000f681:	e8 9f 0f ff ff       	call   c0000625 <strlen>
c000f686:	83 c4 10             	add    esp,0x10
c000f689:	31 d2                	xor    edx,edx
c000f68b:	83 c4 0c             	add    esp,0xc
c000f68e:	c3                   	ret    
c000f68f:	83 ec 08             	sub    esp,0x8
c000f692:	68 0c 90 03 c0       	push   0xc003900c
c000f697:	50                   	push   eax
c000f698:	e8 0a 10 ff ff       	call   c00006a7 <strcpy>
c000f69d:	83 c4 10             	add    esp,0x10
c000f6a0:	eb c3                	jmp    c000f665 <sysCallGetEnv(regs*)+0x15>

c000f6a2 <sysCallUSleep(regs*)>:
c000f6a2:	83 ec 14             	sub    esp,0x14
c000f6a5:	b8 e8 03 00 00       	mov    eax,0x3e8
c000f6aa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f6ae:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c000f6b5:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c000f6b8:	01 ca                	add    edx,ecx
c000f6ba:	52                   	push   edx
c000f6bb:	50                   	push   eax
c000f6bc:	e8 6a f0 ff ff       	call   c000e72b <nanoSleep(unsigned long long)>
c000f6c1:	31 c0                	xor    eax,eax
c000f6c3:	31 d2                	xor    edx,edx
c000f6c5:	83 c4 1c             	add    esp,0x1c
c000f6c8:	c3                   	ret    

c000f6c9 <sysCallSpawn(regs*)>:
c000f6c9:	56                   	push   esi
c000f6ca:	53                   	push   ebx
c000f6cb:	53                   	push   ebx
c000f6cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f6d0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c000f6d3:	85 f6                	test   esi,esi
c000f6d5:	75 08                	jne    c000f6df <sysCallSpawn(regs*)+0x16>
c000f6d7:	59                   	pop    ecx
c000f6d8:	31 c0                	xor    eax,eax
c000f6da:	31 d2                	xor    edx,edx
c000f6dc:	5b                   	pop    ebx
c000f6dd:	5e                   	pop    esi
c000f6de:	c3                   	ret    
c000f6df:	83 ec 0c             	sub    esp,0xc
c000f6e2:	68 d1 8f 03 c0       	push   0xc0038fd1
c000f6e7:	e8 e4 d4 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c000f6ec:	c7 04 24 3b 07 00 00 	mov    DWORD PTR [esp],0x73b
c000f6f3:	e8 88 2a 00 00       	call   c0012180 <operator new(unsigned long)>
c000f6f8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f6fb:	89 c6                	mov    esi,eax
c000f6fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f702:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f705:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f708:	56                   	push   esi
c000f709:	e8 0c e6 ff ff       	call   c000dd1a <Process::Process(char const*, Process*, char**)>
c000f70e:	83 c4 20             	add    esp,0x20
c000f711:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c000f718:	75 bd                	jne    c000f6d7 <sysCallSpawn(regs*)+0xe>
c000f71a:	83 ec 0c             	sub    esp,0xc
c000f71d:	68 dc 8f 03 c0       	push   0xc0038fdc
c000f722:	e8 a9 d4 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c000f727:	89 34 24             	mov    DWORD PTR [esp],esi
c000f72a:	e8 51 eb ff ff       	call   c000e280 <Process::createUserThread()>
c000f72f:	8b 06                	mov    eax,DWORD PTR [esi]
c000f731:	83 c4 10             	add    esp,0x10
c000f734:	99                   	cdq    
c000f735:	59                   	pop    ecx
c000f736:	5b                   	pop    ebx
c000f737:	5e                   	pop    esi
c000f738:	c3                   	ret    

c000f739 <sysAppSettings(regs*)>:
c000f739:	53                   	push   ebx
c000f73a:	83 ec 08             	sub    esp,0x8
c000f73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f741:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c000f744:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c000f74a:	25 e0 1f 00 00       	and    eax,0x1fe0
c000f74f:	66 3d c0 09          	cmp    ax,0x9c0
c000f753:	75 2f                	jne    c000f784 <sysAppSettings(regs*)+0x4b>
c000f755:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c000f75b:	83 e0 1f             	and    eax,0x1f
c000f75e:	3c 01                	cmp    al,0x1
c000f760:	74 2e                	je     c000f790 <sysAppSettings(regs*)+0x57>
c000f762:	3c 07                	cmp    al,0x7
c000f764:	0f 84 bd 00 00 00    	je     c000f827 <sysAppSettings(regs*)+0xee>
c000f76a:	84 c0                	test   al,al
c000f76c:	0f 84 dc 00 00 00    	je     c000f84e <sysAppSettings(regs*)+0x115>
c000f772:	3c 08                	cmp    al,0x8
c000f774:	74 6d                	je     c000f7e3 <sysAppSettings(regs*)+0xaa>
c000f776:	0f b6 c0             	movzx  eax,al
c000f779:	83 c4 08             	add    esp,0x8
c000f77c:	05 e8 03 00 00       	add    eax,0x3e8
c000f781:	5b                   	pop    ebx
c000f782:	99                   	cdq    
c000f783:	c3                   	ret    
c000f784:	b8 01 00 00 00       	mov    eax,0x1
c000f789:	31 d2                	xor    edx,edx
c000f78b:	83 c4 08             	add    esp,0x8
c000f78e:	5b                   	pop    ebx
c000f78f:	c3                   	ret    
c000f790:	51                   	push   ecx
c000f791:	68 00 01 00 00       	push   0x100
c000f796:	6a 00                	push   0x0
c000f798:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f79d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f7a0:	83 c0 0c             	add    eax,0xc
c000f7a3:	50                   	push   eax
c000f7a4:	e8 5f 0e ff ff       	call   c0000608 <memset>
c000f7a9:	83 c4 0c             	add    esp,0xc
c000f7ac:	68 ff 00 00 00       	push   0xff
c000f7b1:	53                   	push   ebx
c000f7b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f7b7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f7ba:	83 c0 0c             	add    eax,0xc
c000f7bd:	50                   	push   eax
c000f7be:	e8 0f 0e ff ff       	call   c00005d2 <memcpy>
c000f7c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f7c8:	5b                   	pop    ebx
c000f7c9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f7cc:	5a                   	pop    edx
c000f7cd:	8d 50 0c             	lea    edx,[eax+0xc]
c000f7d0:	52                   	push   edx
c000f7d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000f7d7:	e8 ee 09 00 00       	call   c00101ca <VgaText::setTitle(char*)>
c000f7dc:	83 c4 10             	add    esp,0x10
c000f7df:	31 c0                	xor    eax,eax
c000f7e1:	eb a6                	jmp    c000f789 <sysAppSettings(regs*)+0x50>
c000f7e3:	83 ec 08             	sub    esp,0x8
c000f7e6:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c000f7ec:	83 e0 0f             	and    eax,0xf
c000f7ef:	50                   	push   eax
c000f7f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f7f5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f7f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000f7fe:	e8 b7 09 00 00       	call   c00101ba <VgaText::setTitleColour(VgaColour)>
c000f803:	58                   	pop    eax
c000f804:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c000f80a:	5a                   	pop    edx
c000f80b:	c1 e8 04             	shr    eax,0x4
c000f80e:	83 e0 0f             	and    eax,0xf
c000f811:	50                   	push   eax
c000f812:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f817:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f81a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000f820:	e8 85 09 00 00       	call   c00101aa <VgaText::setTitleTextColour(VgaColour)>
c000f825:	eb b5                	jmp    c000f7dc <sysAppSettings(regs*)+0xa3>
c000f827:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f82c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f82f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000f835:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c000f83b:	c0 e8 06             	shr    al,0x6
c000f83e:	83 e0 01             	and    eax,0x1
c000f841:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c000f847:	31 c0                	xor    eax,eax
c000f849:	e9 3b ff ff ff       	jmp    c000f789 <sysAppSettings(regs*)+0x50>
c000f84e:	b8 02 00 00 00       	mov    eax,0x2
c000f853:	e9 31 ff ff ff       	jmp    c000f789 <sysAppSettings(regs*)+0x50>

c000f858 <sysSetFatAttrib(regs*)>:
c000f858:	57                   	push   edi
c000f859:	56                   	push   esi
c000f85a:	53                   	push   ebx
c000f85b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f85f:	83 ec 0c             	sub    esp,0xc
c000f862:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c000f865:	68 14 01 00 00       	push   0x114
c000f86a:	e8 11 29 00 00       	call   c0012180 <operator new(unsigned long)>
c000f86f:	83 c4 0c             	add    esp,0xc
c000f872:	89 c3                	mov    ebx,eax
c000f874:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f879:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f87c:	57                   	push   edi
c000f87d:	53                   	push   ebx
c000f87e:	e8 2b 2d 00 00       	call   c00125ae <File::File(char const*, Process*)>
c000f883:	83 c4 0c             	add    esp,0xc
c000f886:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c000f889:	0f b6 d4             	movzx  edx,ah
c000f88c:	0f b6 c0             	movzx  eax,al
c000f88f:	52                   	push   edx
c000f890:	50                   	push   eax
c000f891:	53                   	push   ebx
c000f892:	e8 8d 2f 00 00       	call   c0012824 <File::chfatattr(unsigned char, unsigned char)>
c000f897:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f89a:	89 c6                	mov    esi,eax
c000f89c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f89e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f8a1:	83 c4 10             	add    esp,0x10
c000f8a4:	31 c0                	xor    eax,eax
c000f8a6:	5b                   	pop    ebx
c000f8a7:	85 f6                	test   esi,esi
c000f8a9:	5e                   	pop    esi
c000f8aa:	0f 95 c0             	setne  al
c000f8ad:	5f                   	pop    edi
c000f8ae:	31 d2                	xor    edx,edx
c000f8b0:	f7 d8                	neg    eax
c000f8b2:	83 d2 00             	adc    edx,0x0
c000f8b5:	f7 da                	neg    edx
c000f8b7:	c3                   	ret    

c000f8b8 <sysPanic(regs*)>:
c000f8b8:	83 ec 18             	sub    esp,0x18
c000f8bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f8bf:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000f8c2:	e8 27 d4 ff ff       	call   c000ccee <panic(char const*)>
c000f8c7:	c7 04 24 e9 8f 03 c0 	mov    DWORD PTR [esp],0xc0038fe9
c000f8ce:	e8 1b d4 ff ff       	call   c000ccee <panic(char const*)>
c000f8d3:	b8 01 00 00 00       	mov    eax,0x1
c000f8d8:	31 d2                	xor    edx,edx
c000f8da:	83 c4 1c             	add    esp,0x1c
c000f8dd:	c3                   	ret    

c000f8de <sysPipe(regs*)>:
c000f8de:	57                   	push   edi
c000f8df:	56                   	push   esi
c000f8e0:	53                   	push   ebx
c000f8e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8e5:	83 ec 0c             	sub    esp,0xc
c000f8e8:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c000f8eb:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c000f8ee:	6a 20                	push   0x20
c000f8f0:	e8 8b 28 00 00       	call   c0012180 <operator new(unsigned long)>
c000f8f5:	89 c3                	mov    ebx,eax
c000f8f7:	58                   	pop    eax
c000f8f8:	5a                   	pop    edx
c000f8f9:	68 00 50 00 00       	push   0x5000
c000f8fe:	53                   	push   ebx
c000f8ff:	e8 26 e3 ff ff       	call   c000dc2a <Pipe::Pipe(int)>
c000f904:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f907:	e8 98 14 00 00       	call   c0010da4 <UnixFile::getFileDescriptor()>
c000f90c:	89 07                	mov    DWORD PTR [edi],eax
c000f90e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f911:	e8 8e 14 00 00       	call   c0010da4 <UnixFile::getFileDescriptor()>
c000f916:	83 c4 10             	add    esp,0x10
c000f919:	89 06                	mov    DWORD PTR [esi],eax
c000f91b:	31 d2                	xor    edx,edx
c000f91d:	5b                   	pop    ebx
c000f91e:	31 c0                	xor    eax,eax
c000f920:	5e                   	pop    esi
c000f921:	5f                   	pop    edi
c000f922:	c3                   	ret    

c000f923 <sysGetUnixTime(regs*)>:
c000f923:	a1 08 b7 03 c0       	mov    eax,ds:0xc003b708
c000f928:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000f92e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f932:	e9 3f 36 00 00       	jmp    c0012f76 <Clock::timeInSecondsLocal()>

c000f937 <string_ends_with(char const*, char const*)>:
c000f937:	57                   	push   edi
c000f938:	56                   	push   esi
c000f939:	53                   	push   ebx
c000f93a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f93e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f942:	83 ec 0c             	sub    esp,0xc
c000f945:	53                   	push   ebx
c000f946:	e8 da 0c ff ff       	call   c0000625 <strlen>
c000f94b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000f94e:	89 c6                	mov    esi,eax
c000f950:	e8 d0 0c ff ff       	call   c0000625 <strlen>
c000f955:	83 c4 10             	add    esp,0x10
c000f958:	39 c6                	cmp    esi,eax
c000f95a:	7d 06                	jge    c000f962 <string_ends_with(char const*, char const*)+0x2b>
c000f95c:	5b                   	pop    ebx
c000f95d:	31 c0                	xor    eax,eax
c000f95f:	5e                   	pop    esi
c000f960:	5f                   	pop    edi
c000f961:	c3                   	ret    
c000f962:	83 ec 08             	sub    esp,0x8
c000f965:	29 c6                	sub    esi,eax
c000f967:	57                   	push   edi
c000f968:	01 f3                	add    ebx,esi
c000f96a:	53                   	push   ebx
c000f96b:	e8 88 0d ff ff       	call   c00006f8 <strcmp>
c000f970:	83 c4 10             	add    esp,0x10
c000f973:	85 c0                	test   eax,eax
c000f975:	5b                   	pop    ebx
c000f976:	0f 94 c0             	sete   al
c000f979:	5e                   	pop    esi
c000f97a:	0f b6 c0             	movzx  eax,al
c000f97d:	5f                   	pop    edi
c000f97e:	c3                   	ret    

c000f97f <setupSystemCalls()>:
c000f97f:	c7 05 80 b9 03 c0 fc 81 01 c0 	mov    DWORD PTR ds:0xc003b980,0xc00181fc
c000f989:	c7 05 84 b9 03 c0 bf 80 01 c0 	mov    DWORD PTR ds:0xc003b984,0xc00180bf
c000f993:	c7 05 88 b9 03 c0 3f 81 01 c0 	mov    DWORD PTR ds:0xc003b988,0xc001813f
c000f99d:	c7 05 8c b9 03 c0 94 81 01 c0 	mov    DWORD PTR ds:0xc003b98c,0xc0018194
c000f9a7:	c7 05 90 b9 03 c0 d7 80 01 c0 	mov    DWORD PTR ds:0xc003b990,0xc00180d7
c000f9b1:	c7 05 94 b9 03 c0 e6 ed 00 c0 	mov    DWORD PTR ds:0xc003b994,0xc000ede6
c000f9bb:	c7 05 98 b9 03 c0 5f ef 00 c0 	mov    DWORD PTR ds:0xc003b998,0xc000ef5f
c000f9c5:	c7 05 9c b9 03 c0 7e ef 00 c0 	mov    DWORD PTR ds:0xc003b99c,0xc000ef7e
c000f9cf:	c7 05 a4 b9 03 c0 f7 f2 00 c0 	mov    DWORD PTR ds:0xc003b9a4,0xc000f2f7
c000f9d9:	c7 05 a0 b9 03 c0 dd ef 00 c0 	mov    DWORD PTR ds:0xc003b9a0,0xc000efdd
c000f9e3:	c7 05 a8 b9 03 c0 45 f3 00 c0 	mov    DWORD PTR ds:0xc003b9a8,0xc000f345
c000f9ed:	c7 05 ac b9 03 c0 cd f0 00 c0 	mov    DWORD PTR ds:0xc003b9ac,0xc000f0cd
c000f9f7:	c7 05 b0 b9 03 c0 f2 ed 00 c0 	mov    DWORD PTR ds:0xc003b9b0,0xc000edf2
c000fa01:	c7 05 b4 b9 03 c0 f7 ed 00 c0 	mov    DWORD PTR ds:0xc003b9b4,0xc000edf7
c000fa0b:	c7 05 b8 b9 03 c0 b2 f3 00 c0 	mov    DWORD PTR ds:0xc003b9b8,0xc000f3b2
c000fa15:	c7 05 bc b9 03 c0 0b f4 00 c0 	mov    DWORD PTR ds:0xc003b9bc,0xc000f40b
c000fa1f:	c7 05 c0 b9 03 c0 8f f1 00 c0 	mov    DWORD PTR ds:0xc003b9c0,0xc000f18f
c000fa29:	c7 05 c4 b9 03 c0 e0 f1 00 c0 	mov    DWORD PTR ds:0xc003b9c4,0xc000f1e0
c000fa33:	c7 05 c8 b9 03 c0 a5 f2 00 c0 	mov    DWORD PTR ds:0xc003b9c8,0xc000f2a5
c000fa3d:	c7 05 cc b9 03 c0 fc ed 00 c0 	mov    DWORD PTR ds:0xc003b9cc,0xc000edfc
c000fa47:	c7 05 d0 b9 03 c0 59 f4 00 c0 	mov    DWORD PTR ds:0xc003b9d0,0xc000f459
c000fa51:	c7 05 d4 b9 03 c0 73 f4 00 c0 	mov    DWORD PTR ds:0xc003b9d4,0xc000f473
c000fa5b:	c7 05 d8 b9 03 c0 8f f4 00 c0 	mov    DWORD PTR ds:0xc003b9d8,0xc000f48f
c000fa65:	c7 05 dc b9 03 c0 e4 f4 00 c0 	mov    DWORD PTR ds:0xc003b9dc,0xc000f4e4
c000fa6f:	c7 05 e0 b9 03 c0 36 f5 00 c0 	mov    DWORD PTR ds:0xc003b9e0,0xc000f536
c000fa79:	c7 05 e4 b9 03 c0 06 ee 00 c0 	mov    DWORD PTR ds:0xc003b9e4,0xc000ee06
c000fa83:	c7 05 e8 b9 03 c0 88 f5 00 c0 	mov    DWORD PTR ds:0xc003b9e8,0xc000f588
c000fa8d:	c7 05 ec b9 03 c0 9a ef 00 c0 	mov    DWORD PTR ds:0xc003b9ec,0xc000ef9a
c000fa97:	c7 05 f0 b9 03 c0 d4 f5 00 c0 	mov    DWORD PTR ds:0xc003b9f0,0xc000f5d4
c000faa1:	c7 05 f4 b9 03 c0 3c f1 00 c0 	mov    DWORD PTR ds:0xc003b9f4,0xc000f13c
c000faab:	c7 05 f8 b9 03 c0 a2 f6 00 c0 	mov    DWORD PTR ds:0xc003b9f8,0xc000f6a2
c000fab5:	c7 05 fc b9 03 c0 2c f2 00 c0 	mov    DWORD PTR ds:0xc003b9fc,0xc000f22c
c000fabf:	c7 05 00 ba 03 c0 c9 f6 00 c0 	mov    DWORD PTR ds:0xc003ba00,0xc000f6c9
c000fac9:	c7 05 04 ba 03 c0 50 f6 00 c0 	mov    DWORD PTR ds:0xc003ba04,0xc000f650
c000fad3:	c7 05 08 ba 03 c0 39 f7 00 c0 	mov    DWORD PTR ds:0xc003ba08,0xc000f739
c000fadd:	c7 05 0c ba 03 c0 16 ee 00 c0 	mov    DWORD PTR ds:0xc003ba0c,0xc000ee16
c000fae7:	c7 05 10 ba 03 c0 80 ee 00 c0 	mov    DWORD PTR ds:0xc003ba10,0xc000ee80
c000faf1:	c7 05 14 ba 03 c0 c6 ee 00 c0 	mov    DWORD PTR ds:0xc003ba14,0xc000eec6
c000fafb:	c7 05 18 ba 03 c0 58 f8 00 c0 	mov    DWORD PTR ds:0xc003ba18,0xc000f858
c000fb05:	c7 05 1c ba 03 c0 b8 f8 00 c0 	mov    DWORD PTR ds:0xc003ba1c,0xc000f8b8
c000fb0f:	c7 05 20 ba 03 c0 17 ef 00 c0 	mov    DWORD PTR ds:0xc003ba20,0xc000ef17
c000fb19:	c7 05 24 ba 03 c0 de f8 00 c0 	mov    DWORD PTR ds:0xc003ba24,0xc000f8de
c000fb23:	c7 05 28 ba 03 c0 23 f9 00 c0 	mov    DWORD PTR ds:0xc003ba28,0xc000f923
c000fb2d:	c3                   	ret    

c000fb2e <systemCall(regs*, void*)>:
c000fb2e:	53                   	push   ebx
c000fb2f:	83 ec 08             	sub    esp,0x8
c000fb32:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb36:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000fb39:	83 f8 7f             	cmp    eax,0x7f
c000fb3c:	77 16                	ja     c000fb54 <systemCall(regs*, void*)+0x26>
c000fb3e:	8b 14 85 80 b9 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc4680]
c000fb45:	85 d2                	test   edx,edx
c000fb47:	74 0b                	je     c000fb54 <systemCall(regs*, void*)+0x26>
c000fb49:	83 ec 0c             	sub    esp,0xc
c000fb4c:	53                   	push   ebx
c000fb4d:	ff d2                	call   edx
c000fb4f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000fb52:	eb 0d                	jmp    c000fb61 <systemCall(regs*, void*)+0x33>
c000fb54:	52                   	push   edx
c000fb55:	52                   	push   edx
c000fb56:	50                   	push   eax
c000fb57:	68 f8 8f 03 c0       	push   0xc0038ff8
c000fb5c:	e8 6f d0 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c000fb61:	83 c4 10             	add    esp,0x10
c000fb64:	b8 ef be ad de       	mov    eax,0xdeadbeef
c000fb69:	31 d2                	xor    edx,edx
c000fb6b:	83 c4 08             	add    esp,0x8
c000fb6e:	5b                   	pop    ebx
c000fb6f:	c3                   	ret    

c000fb70 <VgaText::isAtty()>:
c000fb70:	b0 01                	mov    al,0x1
c000fb72:	c3                   	ret    
c000fb73:	90                   	nop

c000fb74 <VgaText::~VgaText()>:
c000fb74:	83 ec 0c             	sub    esp,0xc
c000fb77:	ba 00 91 03 c0       	mov    edx,0xc0039100
c000fb7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb80:	89 10                	mov    DWORD PTR [eax],edx
c000fb82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb86:	83 ec 0c             	sub    esp,0xc
c000fb89:	50                   	push   eax
c000fb8a:	e8 81 12 00 00       	call   c0010e10 <UnixFile::~UnixFile()>
c000fb8f:	83 c4 10             	add    esp,0x10
c000fb92:	90                   	nop
c000fb93:	83 c4 0c             	add    esp,0xc
c000fb96:	c3                   	ret    
c000fb97:	90                   	nop

c000fb98 <VgaText::~VgaText()>:
c000fb98:	83 ec 0c             	sub    esp,0xc
c000fb9b:	83 ec 0c             	sub    esp,0xc
c000fb9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fba2:	e8 cd ff ff ff       	call   c000fb74 <VgaText::~VgaText()>
c000fba7:	83 c4 10             	add    esp,0x10
c000fbaa:	83 ec 08             	sub    esp,0x8
c000fbad:	68 60 12 00 00       	push   0x1260
c000fbb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fbb6:	e8 d4 25 00 00       	call   c001218f <operator delete(void*, unsigned long)>
c000fbbb:	83 c4 10             	add    esp,0x10
c000fbbe:	83 c4 0c             	add    esp,0xc
c000fbc1:	c3                   	ret    

c000fbc2 <VgaText::read(unsigned long long, void*, int*)>:
c000fbc2:	83 ec 10             	sub    esp,0x10
c000fbc5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fbc9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fbcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fbd1:	e8 34 4f 00 00       	call   c0014b0a <readKeyboard(VgaText*, char*, unsigned long)>
c000fbd6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fbda:	89 02                	mov    DWORD PTR [edx],eax
c000fbdc:	31 c0                	xor    eax,eax
c000fbde:	83 c4 1c             	add    esp,0x1c
c000fbe1:	c3                   	ret    

c000fbe2 <setTerminalScrollLock(bool)>:
c000fbe2:	c3                   	ret    

c000fbe3 <addToTerminalCycle(VgaText*)>:
c000fbe3:	8b 15 a0 bb 03 c0    	mov    edx,DWORD PTR ds:0xc003bba0
c000fbe9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fbed:	85 d2                	test   edx,edx
c000fbef:	75 0c                	jne    c000fbfd <addToTerminalCycle(VgaText*)+0x1a>
c000fbf1:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000fbf7:	a3 a0 bb 03 c0       	mov    ds:0xc003bba0,eax
c000fbfc:	c3                   	ret    
c000fbfd:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000fc03:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000fc09:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000fc0f:	c3                   	ret    

c000fc10 <installVgaTextImplementation()>:
c000fc10:	83 ec 10             	sub    esp,0x10
c000fc13:	6a 20                	push   0x20
c000fc15:	6a 00                	push   0x0
c000fc17:	68 80 bb 03 c0       	push   0xc003bb80
c000fc1c:	e8 e7 09 ff ff       	call   c0000608 <memset>
c000fc21:	83 c4 1c             	add    esp,0x1c
c000fc24:	c3                   	ret    

c000fc25 <scrollTerminalScrollLock(int)>:
c000fc25:	c3                   	ret    

c000fc26 <VgaText::load()>:
c000fc26:	53                   	push   ebx
c000fc27:	31 c0                	xor    eax,eax
c000fc29:	83 ec 58             	sub    esp,0x58
c000fc2c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000fc30:	89 e2                	mov    edx,esp
c000fc32:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000fc36:	40                   	inc    eax
c000fc37:	83 f8 50             	cmp    eax,0x50
c000fc3a:	75 f6                	jne    c000fc32 <VgaText::load()+0xc>
c000fc3c:	31 c0                	xor    eax,eax
c000fc3e:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000fc45:	84 c9                	test   cl,cl
c000fc47:	74 06                	je     c000fc4f <VgaText::load()+0x29>
c000fc49:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fc4c:	40                   	inc    eax
c000fc4d:	eb ef                	jmp    c000fc3e <VgaText::load()+0x18>
c000fc4f:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000fc55:	85 c0                	test   eax,eax
c000fc57:	74 09                	je     c000fc62 <VgaText::load()+0x3c>
c000fc59:	51                   	push   ecx
c000fc5a:	51                   	push   ecx
c000fc5b:	52                   	push   edx
c000fc5c:	53                   	push   ebx
c000fc5d:	ff d0                	call   eax
c000fc5f:	83 c4 10             	add    esp,0x10
c000fc62:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000fc68:	85 c0                	test   eax,eax
c000fc6a:	74 09                	je     c000fc75 <VgaText::load()+0x4f>
c000fc6c:	83 ec 0c             	sub    esp,0xc
c000fc6f:	53                   	push   ebx
c000fc70:	ff d0                	call   eax
c000fc72:	83 c4 10             	add    esp,0x10
c000fc75:	83 c4 58             	add    esp,0x58
c000fc78:	5b                   	pop    ebx
c000fc79:	c3                   	ret    

c000fc7a <VgaText::updateCursor()>:
c000fc7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fc7e:	39 05 a4 bb 03 c0    	cmp    DWORD PTR ds:0xc003bba4,eax
c000fc84:	75 0c                	jne    c000fc92 <VgaText::updateCursor()+0x18>
c000fc86:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000fc8c:	85 c0                	test   eax,eax
c000fc8e:	74 02                	je     c000fc92 <VgaText::updateCursor()+0x18>
c000fc90:	ff e0                	jmp    eax
c000fc92:	c3                   	ret    
c000fc93:	90                   	nop

c000fc94 <VgaText::showCursor(bool)>:
c000fc94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fc98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fc9c:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000fca2:	c3                   	ret    
c000fca3:	90                   	nop

c000fca4 <VgaText::disableBlink(bool)>:
c000fca4:	56                   	push   esi
c000fca5:	53                   	push   ebx
c000fca6:	51                   	push   ecx
c000fca7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fcab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fcaf:	39 1d a4 bb 03 c0    	cmp    DWORD PTR ds:0xc003bba4,ebx
c000fcb5:	75 18                	jne    c000fccf <VgaText::disableBlink(bool)+0x2b>
c000fcb7:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000fcbd:	85 c0                	test   eax,eax
c000fcbf:	74 0e                	je     c000fccf <VgaText::disableBlink(bool)+0x2b>
c000fcc1:	89 f1                	mov    ecx,esi
c000fcc3:	52                   	push   edx
c000fcc4:	52                   	push   edx
c000fcc5:	0f b6 d1             	movzx  edx,cl
c000fcc8:	52                   	push   edx
c000fcc9:	53                   	push   ebx
c000fcca:	ff d0                	call   eax
c000fccc:	83 c4 10             	add    esp,0x10
c000fccf:	89 f0                	mov    eax,esi
c000fcd1:	83 f0 01             	xor    eax,0x1
c000fcd4:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000fcda:	58                   	pop    eax
c000fcdb:	5b                   	pop    ebx
c000fcdc:	5e                   	pop    esi
c000fcdd:	c3                   	ret    

c000fcde <VgaText::doANSI_SGR(int)>:
c000fcde:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fce6:	85 d2                	test   edx,edx
c000fce8:	75 14                	jne    c000fcfe <VgaText::doANSI_SGR(int)+0x20>
c000fcea:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000fcf0:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fcf6:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000fcfc:	eb 65                	jmp    c000fd63 <VgaText::doANSI_SGR(int)+0x85>
c000fcfe:	83 fa 07             	cmp    edx,0x7
c000fd01:	75 14                	jne    c000fd17 <VgaText::doANSI_SGR(int)+0x39>
c000fd03:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000fd09:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000fd0f:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000fd15:	eb 4c                	jmp    c000fd63 <VgaText::doANSI_SGR(int)+0x85>
c000fd17:	83 fa 1b             	cmp    edx,0x1b
c000fd1a:	74 ce                	je     c000fcea <VgaText::doANSI_SGR(int)+0xc>
c000fd1c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000fd1f:	83 f9 07             	cmp    ecx,0x7
c000fd22:	77 09                	ja     c000fd2d <VgaText::doANSI_SGR(int)+0x4f>
c000fd24:	8b 14 8d 60 ab 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffc54a0]
c000fd2b:	eb 20                	jmp    c000fd4d <VgaText::doANSI_SGR(int)+0x6f>
c000fd2d:	8d 4a d8             	lea    ecx,[edx-0x28]
c000fd30:	83 f9 07             	cmp    ecx,0x7
c000fd33:	77 09                	ja     c000fd3e <VgaText::doANSI_SGR(int)+0x60>
c000fd35:	8b 14 8d 60 ab 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffc54a0]
c000fd3c:	eb 25                	jmp    c000fd63 <VgaText::doANSI_SGR(int)+0x85>
c000fd3e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000fd41:	83 f9 07             	cmp    ecx,0x7
c000fd44:	77 0e                	ja     c000fd54 <VgaText::doANSI_SGR(int)+0x76>
c000fd46:	8b 14 95 18 aa 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc55e8]
c000fd4d:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fd53:	c3                   	ret    
c000fd54:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000fd57:	83 f9 07             	cmp    ecx,0x7
c000fd5a:	77 0d                	ja     c000fd69 <VgaText::doANSI_SGR(int)+0x8b>
c000fd5c:	8b 14 95 f0 a9 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc5610]
c000fd63:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000fd69:	c3                   	ret    

c000fd6a <VgaText::setDefaultBgColour(VgaColour)>:
c000fd6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fd72:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000fd78:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000fd7e:	c3                   	ret    
c000fd7f:	90                   	nop

c000fd80 <VgaText::setDefaultFgColour(VgaColour)>:
c000fd80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fd88:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000fd8e:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fd94:	c3                   	ret    
c000fd95:	90                   	nop

c000fd96 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000fd96:	53                   	push   ebx
c000fd97:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fd9b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fd9f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fda3:	51                   	push   ecx
c000fda4:	e8 c1 ff ff ff       	call   c000fd6a <VgaText::setDefaultBgColour(VgaColour)>
c000fda9:	58                   	pop    eax
c000fdaa:	5a                   	pop    edx
c000fdab:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fdaf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000fdb3:	5b                   	pop    ebx
c000fdb4:	eb ca                	jmp    c000fd80 <VgaText::setDefaultFgColour(VgaColour)>

c000fdb6 <VgaText::combineColours(unsigned char, unsigned char)>:
c000fdb6:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000fdba:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000fdbf:	83 e0 0f             	and    eax,0xf
c000fdc2:	c1 e2 04             	shl    edx,0x4
c000fdc5:	09 d0                	or     eax,edx
c000fdc7:	c3                   	ret    

c000fdc8 <VgaText::scrollScreen()>:
c000fdc8:	57                   	push   edi
c000fdc9:	56                   	push   esi
c000fdca:	be 01 00 00 00       	mov    esi,0x1
c000fdcf:	53                   	push   ebx
c000fdd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fdd4:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000fdda:	31 ff                	xor    edi,edi
c000fddc:	01 d9                	add    ecx,ebx
c000fdde:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000fde1:	83 fe 17             	cmp    esi,0x17
c000fde4:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000fdea:	75 28                	jne    c000fe14 <VgaText::scrollScreen()+0x4c>
c000fdec:	f7 c7 01 00 00 00    	test   edi,0x1
c000fdf2:	74 1c                	je     c000fe10 <VgaText::scrollScreen()+0x48>
c000fdf4:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000fdfb:	50                   	push   eax
c000fdfc:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000fe03:	50                   	push   eax
c000fe04:	e8 ad ff ff ff       	call   c000fdb6 <VgaText::combineColours(unsigned char, unsigned char)>
c000fe09:	5a                   	pop    edx
c000fe0a:	5a                   	pop    edx
c000fe0b:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000fe0e:	eb 04                	jmp    c000fe14 <VgaText::scrollScreen()+0x4c>
c000fe10:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000fe14:	47                   	inc    edi
c000fe15:	41                   	inc    ecx
c000fe16:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000fe1c:	75 c0                	jne    c000fdde <VgaText::scrollScreen()+0x16>
c000fe1e:	46                   	inc    esi
c000fe1f:	83 fe 18             	cmp    esi,0x18
c000fe22:	75 b0                	jne    c000fdd4 <VgaText::scrollScreen()+0xc>
c000fe24:	39 1d a4 bb 03 c0    	cmp    DWORD PTR ds:0xc003bba4,ebx
c000fe2a:	75 24                	jne    c000fe50 <VgaText::scrollScreen()+0x88>
c000fe2c:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000fe33:	74 08                	je     c000fe3d <VgaText::scrollScreen()+0x75>
c000fe35:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000fe3b:	eb 13                	jmp    c000fe50 <VgaText::scrollScreen()+0x88>
c000fe3d:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000fe43:	85 c0                	test   eax,eax
c000fe45:	74 09                	je     c000fe50 <VgaText::scrollScreen()+0x88>
c000fe47:	83 ec 0c             	sub    esp,0xc
c000fe4a:	53                   	push   ebx
c000fe4b:	ff d0                	call   eax
c000fe4d:	83 c4 10             	add    esp,0x10
c000fe50:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000fe54:	5b                   	pop    ebx
c000fe55:	5e                   	pop    esi
c000fe56:	5f                   	pop    edi
c000fe57:	e9 1e fe ff ff       	jmp    c000fc7a <VgaText::updateCursor()>

c000fe5c <VgaText::combineCharAndColour(char, unsigned char)>:
c000fe5c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000fe61:	c1 e0 08             	shl    eax,0x8
c000fe64:	89 c2                	mov    edx,eax
c000fe66:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000fe6b:	09 d0                	or     eax,edx
c000fe6d:	c3                   	ret    

c000fe6e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000fe6e:	53                   	push   ebx
c000fe6f:	83 ec 08             	sub    esp,0x8
c000fe72:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fe76:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000fe7b:	50                   	push   eax
c000fe7c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000fe81:	50                   	push   eax
c000fe82:	e8 2f ff ff ff       	call   c000fdb6 <VgaText::combineColours(unsigned char, unsigned char)>
c000fe87:	5a                   	pop    edx
c000fe88:	0f b6 c0             	movzx  eax,al
c000fe8b:	5b                   	pop    ebx
c000fe8c:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000fe91:	50                   	push   eax
c000fe92:	53                   	push   ebx
c000fe93:	e8 c4 ff ff ff       	call   c000fe5c <VgaText::combineCharAndColour(char, unsigned char)>
c000fe98:	5a                   	pop    edx
c000fe99:	5a                   	pop    edx
c000fe9a:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000fea0:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000fea4:	0f b7 d2             	movzx  edx,dx
c000fea7:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000feac:	39 0d a4 bb 03 c0    	cmp    DWORD PTR ds:0xc003bba4,ecx
c000feb2:	75 14                	jne    c000fec8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000feb4:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000feba:	85 c0                	test   eax,eax
c000febc:	74 0a                	je     c000fec8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000febe:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000fec2:	83 c4 08             	add    esp,0x8
c000fec5:	5b                   	pop    ebx
c000fec6:	ff e0                	jmp    eax
c000fec8:	83 c4 08             	add    esp,0x8
c000fecb:	5b                   	pop    ebx
c000fecc:	c3                   	ret    
c000fecd:	90                   	nop

c000fece <VgaText::getCursorX()>:
c000fece:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fed2:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000fed8:	c3                   	ret    
c000fed9:	90                   	nop

c000feda <VgaText::getCursorY()>:
c000feda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fede:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000fee4:	c3                   	ret    
c000fee5:	90                   	nop

c000fee6 <VgaText::setCursor(int, int)>:
c000fee6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000feea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000feee:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000fef4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fef8:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000fefe:	e9 77 fd ff ff       	jmp    c000fc7a <VgaText::updateCursor()>
c000ff03:	90                   	nop

c000ff04 <VgaText::setCursorX(int)>:
c000ff04:	83 ec 10             	sub    esp,0x10
c000ff07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff0b:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000ff11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff15:	50                   	push   eax
c000ff16:	e8 cb ff ff ff       	call   c000fee6 <VgaText::setCursor(int, int)>
c000ff1b:	83 c4 1c             	add    esp,0x1c
c000ff1e:	c3                   	ret    
c000ff1f:	90                   	nop

c000ff20 <VgaText::setCursorY(int)>:
c000ff20:	83 ec 10             	sub    esp,0x10
c000ff23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff27:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff2b:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000ff31:	50                   	push   eax
c000ff32:	e8 af ff ff ff       	call   c000fee6 <VgaText::setCursor(int, int)>
c000ff37:	83 c4 1c             	add    esp,0x1c
c000ff3a:	c3                   	ret    
c000ff3b:	90                   	nop

c000ff3c <VgaText::incrementCursor(bool)>:
c000ff3c:	56                   	push   esi
c000ff3d:	53                   	push   ebx
c000ff3e:	51                   	push   ecx
c000ff3f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff43:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ff47:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000ff4d:	40                   	inc    eax
c000ff4e:	83 f8 50             	cmp    eax,0x50
c000ff51:	74 08                	je     c000ff5b <VgaText::incrementCursor(bool)+0x1f>
c000ff53:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000ff59:	eb 33                	jmp    c000ff8e <VgaText::incrementCursor(bool)+0x52>
c000ff5b:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000ff61:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000ff6b:	8d 50 01             	lea    edx,[eax+0x1]
c000ff6e:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000ff74:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000ff7a:	75 12                	jne    c000ff8e <VgaText::incrementCursor(bool)+0x52>
c000ff7c:	83 ec 0c             	sub    esp,0xc
c000ff7f:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000ff85:	53                   	push   ebx
c000ff86:	e8 3d fe ff ff       	call   c000fdc8 <VgaText::scrollScreen()>
c000ff8b:	83 c4 10             	add    esp,0x10
c000ff8e:	89 f0                	mov    eax,esi
c000ff90:	84 c0                	test   al,al
c000ff92:	74 0c                	je     c000ffa0 <VgaText::incrementCursor(bool)+0x64>
c000ff94:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ff98:	5a                   	pop    edx
c000ff99:	5b                   	pop    ebx
c000ff9a:	5e                   	pop    esi
c000ff9b:	e9 da fc ff ff       	jmp    c000fc7a <VgaText::updateCursor()>
c000ffa0:	58                   	pop    eax
c000ffa1:	5b                   	pop    ebx
c000ffa2:	5e                   	pop    esi
c000ffa3:	c3                   	ret    

c000ffa4 <VgaText::updateRAMUsageDisplay(int)>:
c000ffa4:	53                   	push   ebx
c000ffa5:	bb 0a 00 00 00       	mov    ebx,0xa
c000ffaa:	6a 0f                	push   0xf
c000ffac:	6a 00                	push   0x0
c000ffae:	e8 03 fe ff ff       	call   c000fdb6 <VgaText::combineColours(unsigned char, unsigned char)>
c000ffb3:	5a                   	pop    edx
c000ffb4:	59                   	pop    ecx
c000ffb5:	0f b6 c8             	movzx  ecx,al
c000ffb8:	51                   	push   ecx
c000ffb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ffbd:	99                   	cdq    
c000ffbe:	f7 fb                	idiv   ebx
c000ffc0:	89 d3                	mov    ebx,edx
c000ffc2:	83 c0 30             	add    eax,0x30
c000ffc5:	83 c3 30             	add    ebx,0x30
c000ffc8:	0f be c0             	movsx  eax,al
c000ffcb:	0f b6 db             	movzx  ebx,bl
c000ffce:	50                   	push   eax
c000ffcf:	e8 88 fe ff ff       	call   c000fe5c <VgaText::combineCharAndColour(char, unsigned char)>
c000ffd4:	5a                   	pop    edx
c000ffd5:	5a                   	pop    edx
c000ffd6:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000ffdc:	51                   	push   ecx
c000ffdd:	53                   	push   ebx
c000ffde:	e8 79 fe ff ff       	call   c000fe5c <VgaText::combineCharAndColour(char, unsigned char)>
c000ffe3:	5b                   	pop    ebx
c000ffe4:	5a                   	pop    edx
c000ffe5:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000ffeb:	51                   	push   ecx
c000ffec:	6a 25                	push   0x25
c000ffee:	e8 69 fe ff ff       	call   c000fe5c <VgaText::combineCharAndColour(char, unsigned char)>
c000fff3:	59                   	pop    ecx
c000fff4:	5b                   	pop    ebx
c000fff5:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000fffb:	5b                   	pop    ebx
c000fffc:	c3                   	ret    
c000fffd:	90                   	nop

c000fffe <VgaText::updateDiskUsage()>:
c000fffe:	55                   	push   ebp
c000ffff:	bd 10 27 00 00       	mov    ebp,0x2710
c0010004:	57                   	push   edi
c0010005:	56                   	push   esi
c0010006:	53                   	push   ebx
c0010007:	6a 0f                	push   0xf
c0010009:	6a 00                	push   0x0
c001000b:	e8 a6 fd ff ff       	call   c000fdb6 <VgaText::combineColours(unsigned char, unsigned char)>
c0010010:	5a                   	pop    edx
c0010011:	0f b6 d8             	movzx  ebx,al
c0010014:	59                   	pop    ecx
c0010015:	a1 e8 cd 03 c0       	mov    eax,ds:0xc003cde8
c001001a:	53                   	push   ebx
c001001b:	b9 0a 00 00 00       	mov    ecx,0xa
c0010020:	99                   	cdq    
c0010021:	f7 fd                	idiv   ebp
c0010023:	99                   	cdq    
c0010024:	f7 f9                	idiv   ecx
c0010026:	8d 42 30             	lea    eax,[edx+0x30]
c0010029:	0f b6 c0             	movzx  eax,al
c001002c:	50                   	push   eax
c001002d:	e8 2a fe ff ff       	call   c000fe5c <VgaText::combineCharAndColour(char, unsigned char)>
c0010032:	5e                   	pop    esi
c0010033:	5f                   	pop    edi
c0010034:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001003a:	bf e8 03 00 00       	mov    edi,0x3e8
c001003f:	53                   	push   ebx
c0010040:	a1 e8 cd 03 c0       	mov    eax,ds:0xc003cde8
c0010045:	99                   	cdq    
c0010046:	f7 ff                	idiv   edi
c0010048:	99                   	cdq    
c0010049:	f7 f9                	idiv   ecx
c001004b:	8d 42 30             	lea    eax,[edx+0x30]
c001004e:	0f b6 c0             	movzx  eax,al
c0010051:	50                   	push   eax
c0010052:	e8 05 fe ff ff       	call   c000fe5c <VgaText::combineCharAndColour(char, unsigned char)>
c0010057:	5a                   	pop    edx
c0010058:	5e                   	pop    esi
c0010059:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001005f:	be 64 00 00 00       	mov    esi,0x64
c0010064:	53                   	push   ebx
c0010065:	a1 e8 cd 03 c0       	mov    eax,ds:0xc003cde8
c001006a:	99                   	cdq    
c001006b:	f7 fe                	idiv   esi
c001006d:	99                   	cdq    
c001006e:	f7 f9                	idiv   ecx
c0010070:	8d 42 30             	lea    eax,[edx+0x30]
c0010073:	0f b6 c0             	movzx  eax,al
c0010076:	50                   	push   eax
c0010077:	e8 e0 fd ff ff       	call   c000fe5c <VgaText::combineCharAndColour(char, unsigned char)>
c001007c:	5a                   	pop    edx
c001007d:	5a                   	pop    edx
c001007e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c0010084:	53                   	push   ebx
c0010085:	a1 e8 cd 03 c0       	mov    eax,ds:0xc003cde8
c001008a:	99                   	cdq    
c001008b:	f7 f9                	idiv   ecx
c001008d:	99                   	cdq    
c001008e:	f7 f9                	idiv   ecx
c0010090:	8d 42 30             	lea    eax,[edx+0x30]
c0010093:	0f b6 c0             	movzx  eax,al
c0010096:	50                   	push   eax
c0010097:	e8 c0 fd ff ff       	call   c000fe5c <VgaText::combineCharAndColour(char, unsigned char)>
c001009c:	5a                   	pop    edx
c001009d:	5a                   	pop    edx
c001009e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c00100a4:	53                   	push   ebx
c00100a5:	a1 e8 cd 03 c0       	mov    eax,ds:0xc003cde8
c00100aa:	99                   	cdq    
c00100ab:	f7 f9                	idiv   ecx
c00100ad:	8d 42 30             	lea    eax,[edx+0x30]
c00100b0:	0f b6 c0             	movzx  eax,al
c00100b3:	50                   	push   eax
c00100b4:	e8 a3 fd ff ff       	call   c000fe5c <VgaText::combineCharAndColour(char, unsigned char)>
c00100b9:	5a                   	pop    edx
c00100ba:	5a                   	pop    edx
c00100bb:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c00100c1:	53                   	push   ebx
c00100c2:	a1 e4 cd 03 c0       	mov    eax,ds:0xc003cde4
c00100c7:	99                   	cdq    
c00100c8:	f7 fd                	idiv   ebp
c00100ca:	99                   	cdq    
c00100cb:	f7 f9                	idiv   ecx
c00100cd:	8d 42 30             	lea    eax,[edx+0x30]
c00100d0:	0f b6 c0             	movzx  eax,al
c00100d3:	50                   	push   eax
c00100d4:	e8 83 fd ff ff       	call   c000fe5c <VgaText::combineCharAndColour(char, unsigned char)>
c00100d9:	5d                   	pop    ebp
c00100da:	5a                   	pop    edx
c00100db:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c00100e1:	53                   	push   ebx
c00100e2:	a1 e4 cd 03 c0       	mov    eax,ds:0xc003cde4
c00100e7:	99                   	cdq    
c00100e8:	f7 ff                	idiv   edi
c00100ea:	99                   	cdq    
c00100eb:	f7 f9                	idiv   ecx
c00100ed:	8d 42 30             	lea    eax,[edx+0x30]
c00100f0:	0f b6 c0             	movzx  eax,al
c00100f3:	50                   	push   eax
c00100f4:	e8 63 fd ff ff       	call   c000fe5c <VgaText::combineCharAndColour(char, unsigned char)>
c00100f9:	5f                   	pop    edi
c00100fa:	5d                   	pop    ebp
c00100fb:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c0010101:	53                   	push   ebx
c0010102:	a1 e4 cd 03 c0       	mov    eax,ds:0xc003cde4
c0010107:	99                   	cdq    
c0010108:	f7 fe                	idiv   esi
c001010a:	99                   	cdq    
c001010b:	f7 f9                	idiv   ecx
c001010d:	8d 42 30             	lea    eax,[edx+0x30]
c0010110:	0f b6 c0             	movzx  eax,al
c0010113:	50                   	push   eax
c0010114:	e8 43 fd ff ff       	call   c000fe5c <VgaText::combineCharAndColour(char, unsigned char)>
c0010119:	5a                   	pop    edx
c001011a:	5e                   	pop    esi
c001011b:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c0010121:	53                   	push   ebx
c0010122:	a1 e4 cd 03 c0       	mov    eax,ds:0xc003cde4
c0010127:	99                   	cdq    
c0010128:	f7 f9                	idiv   ecx
c001012a:	99                   	cdq    
c001012b:	f7 f9                	idiv   ecx
c001012d:	8d 42 30             	lea    eax,[edx+0x30]
c0010130:	0f b6 c0             	movzx  eax,al
c0010133:	50                   	push   eax
c0010134:	e8 23 fd ff ff       	call   c000fe5c <VgaText::combineCharAndColour(char, unsigned char)>
c0010139:	5f                   	pop    edi
c001013a:	5d                   	pop    ebp
c001013b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c0010141:	53                   	push   ebx
c0010142:	a1 e4 cd 03 c0       	mov    eax,ds:0xc003cde4
c0010147:	99                   	cdq    
c0010148:	f7 f9                	idiv   ecx
c001014a:	83 c2 30             	add    edx,0x30
c001014d:	0f b6 d2             	movzx  edx,dl
c0010150:	52                   	push   edx
c0010151:	e8 06 fd ff ff       	call   c000fe5c <VgaText::combineCharAndColour(char, unsigned char)>
c0010156:	5a                   	pop    edx
c0010157:	59                   	pop    ecx
c0010158:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001015e:	5b                   	pop    ebx
c001015f:	5e                   	pop    esi
c0010160:	5f                   	pop    edi
c0010161:	5d                   	pop    ebp
c0010162:	c3                   	ret    
c0010163:	90                   	nop

c0010164 <VgaText::updateTitle()>:
c0010164:	53                   	push   ebx
c0010165:	31 c0                	xor    eax,eax
c0010167:	83 ec 58             	sub    esp,0x58
c001016a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c001016e:	89 e1                	mov    ecx,esp
c0010170:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010174:	40                   	inc    eax
c0010175:	83 f8 50             	cmp    eax,0x50
c0010178:	75 f6                	jne    c0010170 <VgaText::updateTitle()+0xc>
c001017a:	31 c0                	xor    eax,eax
c001017c:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010183:	84 db                	test   bl,bl
c0010185:	74 06                	je     c001018d <VgaText::updateTitle()+0x29>
c0010187:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c001018a:	40                   	inc    eax
c001018b:	eb ef                	jmp    c001017c <VgaText::updateTitle()+0x18>
c001018d:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010193:	85 c0                	test   eax,eax
c0010195:	74 09                	je     c00101a0 <VgaText::updateTitle()+0x3c>
c0010197:	53                   	push   ebx
c0010198:	53                   	push   ebx
c0010199:	51                   	push   ecx
c001019a:	52                   	push   edx
c001019b:	ff d0                	call   eax
c001019d:	83 c4 10             	add    esp,0x10
c00101a0:	e8 59 fe ff ff       	call   c000fffe <VgaText::updateDiskUsage()>
c00101a5:	83 c4 58             	add    esp,0x58
c00101a8:	5b                   	pop    ebx
c00101a9:	c3                   	ret    

c00101aa <VgaText::setTitleTextColour(VgaColour)>:
c00101aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101b2:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c00101b8:	eb aa                	jmp    c0010164 <VgaText::updateTitle()>

c00101ba <VgaText::setTitleColour(VgaColour)>:
c00101ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101c2:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c00101c8:	eb 9a                	jmp    c0010164 <VgaText::updateTitle()>

c00101ca <VgaText::setTitle(char*)>:
c00101ca:	53                   	push   ebx
c00101cb:	83 ec 10             	sub    esp,0x10
c00101ce:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101d6:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c00101dc:	50                   	push   eax
c00101dd:	e8 c5 04 ff ff       	call   c00006a7 <strcpy>
c00101e2:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00101e6:	83 c4 18             	add    esp,0x18
c00101e9:	5b                   	pop    ebx
c00101ea:	e9 75 ff ff ff       	jmp    c0010164 <VgaText::updateTitle()>
c00101ef:	90                   	nop

c00101f0 <VgaText::decrementCursor(bool)>:
c00101f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00101f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00101f8:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c00101fe:	85 c0                	test   eax,eax
c0010200:	74 07                	je     c0010209 <VgaText::decrementCursor(bool)+0x19>
c0010202:	48                   	dec    eax
c0010203:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010209:	84 c9                	test   cl,cl
c001020b:	74 09                	je     c0010216 <VgaText::decrementCursor(bool)+0x26>
c001020d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010211:	e9 64 fa ff ff       	jmp    c000fc7a <VgaText::updateCursor()>
c0010216:	c3                   	ret    
c0010217:	90                   	nop

c0010218 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010218:	53                   	push   ebx
c0010219:	83 ec 08             	sub    esp,0x8
c001021c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010220:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010224:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010228:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001022c:	3c 07                	cmp    al,0x7
c001022e:	75 2a                	jne    c001025a <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010230:	a1 c4 bb 03 c0       	mov    eax,ds:0xc003bbc4
c0010235:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001023d:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010245:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c001024d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010251:	83 c4 08             	add    esp,0x8
c0010254:	5b                   	pop    ebx
c0010255:	e9 10 2c 00 00       	jmp    c0012e6a <Buzzer::beep(int, int, bool)>
c001025a:	3c 0d                	cmp    al,0xd
c001025c:	75 0c                	jne    c001026a <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c001025e:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010268:	eb 3b                	jmp    c00102a5 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c001026a:	3c 0a                	cmp    al,0xa
c001026c:	75 40                	jne    c00102ae <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c001026e:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010274:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001027e:	8d 50 01             	lea    edx,[eax+0x1]
c0010281:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010287:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001028d:	75 12                	jne    c00102a1 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c001028f:	83 ec 0c             	sub    esp,0xc
c0010292:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010298:	53                   	push   ebx
c0010299:	e8 2a fb ff ff       	call   c000fdc8 <VgaText::scrollScreen()>
c001029e:	83 c4 10             	add    esp,0x10
c00102a1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00102a5:	83 c4 08             	add    esp,0x8
c00102a8:	5b                   	pop    ebx
c00102a9:	e9 cc f9 ff ff       	jmp    c000fc7a <VgaText::updateCursor()>
c00102ae:	3c 08                	cmp    al,0x8
c00102b0:	75 31                	jne    c00102e3 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c00102b2:	50                   	push   eax
c00102b3:	50                   	push   eax
c00102b4:	6a 01                	push   0x1
c00102b6:	53                   	push   ebx
c00102b7:	e8 34 ff ff ff       	call   c00101f0 <VgaText::decrementCursor(bool)>
c00102bc:	5a                   	pop    edx
c00102bd:	59                   	pop    ecx
c00102be:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00102c4:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00102ca:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00102d0:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00102d6:	6a 20                	push   0x20
c00102d8:	53                   	push   ebx
c00102d9:	e8 90 fb ff ff       	call   c000fe6e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00102de:	83 c4 28             	add    esp,0x28
c00102e1:	5b                   	pop    ebx
c00102e2:	c3                   	ret    
c00102e3:	83 ec 08             	sub    esp,0x8
c00102e6:	0f be c0             	movsx  eax,al
c00102e9:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00102ef:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00102f5:	51                   	push   ecx
c00102f6:	52                   	push   edx
c00102f7:	50                   	push   eax
c00102f8:	53                   	push   ebx
c00102f9:	e8 70 fb ff ff       	call   c000fe6e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00102fe:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010302:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001030a:	83 c4 28             	add    esp,0x28
c001030d:	5b                   	pop    ebx
c001030e:	e9 29 fc ff ff       	jmp    c000ff3c <VgaText::incrementCursor(bool)>
c0010313:	90                   	nop

c0010314 <VgaText::isShowingCursor()>:
c0010314:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010318:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c001031e:	c3                   	ret    
c001031f:	90                   	nop

c0010320 <VgaText::isBlinkDisabled()>:
c0010320:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010324:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c001032a:	83 f0 01             	xor    eax,0x1
c001032d:	c3                   	ret    

c001032e <VgaText::setCursorHeight(int)>:
c001032e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010332:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010336:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c001033c:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010343:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010347:	e9 48 f9 ff ff       	jmp    c000fc94 <VgaText::showCursor(bool)>

c001034c <VgaText::getCursorHeight()>:
c001034c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010350:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010356:	c3                   	ret    

c0010357 <setActiveTerminal(VgaText*)>:
c0010357:	53                   	push   ebx
c0010358:	83 ec 08             	sub    esp,0x8
c001035b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001035f:	85 db                	test   ebx,ebx
c0010361:	75 11                	jne    c0010374 <setActiveTerminal(VgaText*)+0x1d>
c0010363:	c7 44 24 10 58 90 03 c0 	mov    DWORD PTR [esp+0x10],0xc0039058
c001036b:	83 c4 08             	add    esp,0x8
c001036e:	5b                   	pop    ebx
c001036f:	e9 7a c9 ff ff       	jmp    c000ccee <panic(char const*)>
c0010374:	50                   	push   eax
c0010375:	50                   	push   eax
c0010376:	53                   	push   ebx
c0010377:	68 66 90 03 c0       	push   0xc0039066
c001037c:	e8 4f c8 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0010381:	a1 a4 bb 03 c0       	mov    eax,ds:0xc003bba4
c0010386:	83 c4 10             	add    esp,0x10
c0010389:	85 c0                	test   eax,eax
c001038b:	74 0c                	je     c0010399 <setActiveTerminal(VgaText*)+0x42>
c001038d:	83 ec 0c             	sub    esp,0xc
c0010390:	50                   	push   eax
c0010391:	e8 e4 f8 ff ff       	call   c000fc7a <VgaText::updateCursor()>
c0010396:	83 c4 10             	add    esp,0x10
c0010399:	89 1d a4 bb 03 c0    	mov    DWORD PTR ds:0xc003bba4,ebx
c001039f:	51                   	push   ecx
c00103a0:	51                   	push   ecx
c00103a1:	53                   	push   ebx
c00103a2:	68 7e 90 03 c0       	push   0xc003907e
c00103a7:	e8 24 c8 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c00103ac:	83 c4 0c             	add    esp,0xc
c00103af:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00103b5:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00103bb:	53                   	push   ebx
c00103bc:	e8 25 fb ff ff       	call   c000fee6 <VgaText::setCursor(int, int)>
c00103c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00103c4:	e8 57 ff ff ff       	call   c0010320 <VgaText::isBlinkDisabled()>
c00103c9:	5a                   	pop    edx
c00103ca:	0f b6 c0             	movzx  eax,al
c00103cd:	59                   	pop    ecx
c00103ce:	50                   	push   eax
c00103cf:	53                   	push   ebx
c00103d0:	e8 cf f8 ff ff       	call   c000fca4 <VgaText::disableBlink(bool)>
c00103d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00103d8:	e8 6f ff ff ff       	call   c001034c <VgaText::getCursorHeight()>
c00103dd:	5a                   	pop    edx
c00103de:	59                   	pop    ecx
c00103df:	50                   	push   eax
c00103e0:	53                   	push   ebx
c00103e1:	e8 48 ff ff ff       	call   c001032e <VgaText::setCursorHeight(int)>
c00103e6:	83 c4 10             	add    esp,0x10
c00103e9:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00103f0:	75 0a                	jne    c00103fc <setActiveTerminal(VgaText*)+0xa5>
c00103f2:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c00103fc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010400:	83 c4 08             	add    esp,0x8
c0010403:	5b                   	pop    ebx
c0010404:	e9 1d f8 ff ff       	jmp    c000fc26 <VgaText::load()>

c0010409 <doTerminalCycle()>:
c0010409:	83 ec 18             	sub    esp,0x18
c001040c:	a1 a0 bb 03 c0       	mov    eax,ds:0xc003bba0
c0010411:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010417:	50                   	push   eax
c0010418:	a3 a0 bb 03 c0       	mov    ds:0xc003bba0,eax
c001041d:	e8 35 ff ff ff       	call   c0010357 <setActiveTerminal(VgaText*)>
c0010422:	83 c4 1c             	add    esp,0x1c
c0010425:	c3                   	ret    

c0010426 <VgaText::doUpdate()>:
c0010426:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001042a:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010430:	85 c0                	test   eax,eax
c0010432:	74 02                	je     c0010436 <VgaText::doUpdate()+0x10>
c0010434:	ff e0                	jmp    eax
c0010436:	c3                   	ret    
c0010437:	90                   	nop

c0010438 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010438:	55                   	push   ebp
c0010439:	57                   	push   edi
c001043a:	56                   	push   esi
c001043b:	53                   	push   ebx
c001043c:	83 ec 1c             	sub    esp,0x1c
c001043f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010443:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010448:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c001044f:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010452:	50                   	push   eax
c0010453:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010458:	50                   	push   eax
c0010459:	e8 58 f9 ff ff       	call   c000fdb6 <VgaText::combineColours(unsigned char, unsigned char)>
c001045e:	59                   	pop    ecx
c001045f:	0f b6 c0             	movzx  eax,al
c0010462:	5b                   	pop    ebx
c0010463:	31 c9                	xor    ecx,ecx
c0010465:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c001046d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010471:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010477:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001047b:	0f b7 db             	movzx  ebx,bx
c001047e:	01 db                	add    ebx,ebx
c0010480:	01 fb                	add    ebx,edi
c0010482:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010485:	84 c0                	test   al,al
c0010487:	0f 84 38 01 00 00    	je     c00105c5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c001048d:	3c 0d                	cmp    al,0xd
c001048f:	75 0f                	jne    c00104a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010491:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c001049b:	e9 1f 01 00 00       	jmp    c00105bf <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00104a0:	3c 0a                	cmp    al,0xa
c00104a2:	75 5b                	jne    c00104ff <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c00104a4:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c00104aa:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00104b4:	8d 48 01             	lea    ecx,[eax+0x1]
c00104b7:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c00104bd:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c00104c3:	75 12                	jne    c00104d7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c00104c5:	83 ec 0c             	sub    esp,0xc
c00104c8:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c00104ce:	55                   	push   ebp
c00104cf:	e8 f4 f8 ff ff       	call   c000fdc8 <VgaText::scrollScreen()>
c00104d4:	83 c4 10             	add    esp,0x10
c00104d7:	83 ec 0c             	sub    esp,0xc
c00104da:	55                   	push   ebp
c00104db:	e8 9a f7 ff ff       	call   c000fc7a <VgaText::updateCursor()>
c00104e0:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00104e8:	83 c4 10             	add    esp,0x10
c00104eb:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c00104f1:	31 c9                	xor    ecx,ecx
c00104f3:	0f b7 db             	movzx  ebx,bx
c00104f6:	01 db                	add    ebx,ebx
c00104f8:	01 fb                	add    ebx,edi
c00104fa:	e9 c0 00 00 00       	jmp    c00105bf <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00104ff:	3c 08                	cmp    al,0x8
c0010501:	75 4e                	jne    c0010551 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010503:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010507:	53                   	push   ebx
c0010508:	53                   	push   ebx
c0010509:	6a 01                	push   0x1
c001050b:	55                   	push   ebp
c001050c:	e8 df fc ff ff       	call   c00101f0 <VgaText::decrementCursor(bool)>
c0010511:	58                   	pop    eax
c0010512:	5a                   	pop    edx
c0010513:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010519:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c001051f:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010525:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c001052b:	6a 20                	push   0x20
c001052d:	55                   	push   ebp
c001052e:	e8 3b f9 ff ff       	call   c000fe6e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010533:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c001053b:	83 c4 20             	add    esp,0x20
c001053e:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010544:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010548:	0f b7 db             	movzx  ebx,bx
c001054b:	01 db                	add    ebx,ebx
c001054d:	01 fb                	add    ebx,edi
c001054f:	eb 6e                	jmp    c00105bf <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010551:	51                   	push   ecx
c0010552:	51                   	push   ecx
c0010553:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010557:	50                   	push   eax
c0010558:	e8 ff f8 ff ff       	call   c000fe5c <VgaText::combineCharAndColour(char, unsigned char)>
c001055d:	83 c4 10             	add    esp,0x10
c0010560:	66 89 03             	mov    WORD PTR [ebx],ax
c0010563:	39 2d a4 bb 03 c0    	cmp    DWORD PTR ds:0xc003bba4,ebp
c0010569:	75 2a                	jne    c0010595 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c001056b:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010571:	85 c0                	test   eax,eax
c0010573:	74 20                	je     c0010595 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010575:	52                   	push   edx
c0010576:	52                   	push   edx
c0010577:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c001057d:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010583:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010587:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001058b:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c001058e:	51                   	push   ecx
c001058f:	55                   	push   ebp
c0010590:	ff d0                	call   eax
c0010592:	83 c4 20             	add    esp,0x20
c0010595:	83 c3 02             	add    ebx,0x2
c0010598:	50                   	push   eax
c0010599:	50                   	push   eax
c001059a:	6a 00                	push   0x0
c001059c:	55                   	push   ebp
c001059d:	e8 9a f9 ff ff       	call   c000ff3c <VgaText::incrementCursor(bool)>
c00105a2:	83 c4 10             	add    esp,0x10
c00105a5:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c00105ac:	75 0f                	jne    c00105bd <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c00105ae:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00105b6:	0f b7 db             	movzx  ebx,bx
c00105b9:	01 db                	add    ebx,ebx
c00105bb:	01 fb                	add    ebx,edi
c00105bd:	b1 01                	mov    cl,0x1
c00105bf:	46                   	inc    esi
c00105c0:	e9 bd fe ff ff       	jmp    c0010482 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c00105c5:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00105c9:	83 ec 0c             	sub    esp,0xc
c00105cc:	55                   	push   ebp
c00105cd:	e8 a8 f6 ff ff       	call   c000fc7a <VgaText::updateCursor()>
c00105d2:	83 c4 10             	add    esp,0x10
c00105d5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00105d9:	84 c9                	test   cl,cl
c00105db:	74 0c                	je     c00105e9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c00105dd:	83 ec 0c             	sub    esp,0xc
c00105e0:	55                   	push   ebp
c00105e1:	e8 40 fe ff ff       	call   c0010426 <VgaText::doUpdate()>
c00105e6:	83 c4 10             	add    esp,0x10
c00105e9:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c00105f0:	83 c4 1c             	add    esp,0x1c
c00105f3:	5b                   	pop    ebx
c00105f4:	5e                   	pop    esi
c00105f5:	5f                   	pop    edi
c00105f6:	5d                   	pop    ebp
c00105f7:	c3                   	ret    

c00105f8 <VgaText::clearScreen()>:
c00105f8:	57                   	push   edi
c00105f9:	56                   	push   esi
c00105fa:	31 f6                	xor    esi,esi
c00105fc:	53                   	push   ebx
c00105fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010601:	52                   	push   edx
c0010602:	6a 00                	push   0x0
c0010604:	6a 00                	push   0x0
c0010606:	53                   	push   ebx
c0010607:	e8 da f8 ff ff       	call   c000fee6 <VgaText::setCursor(int, int)>
c001060c:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010613:	83 c4 10             	add    esp,0x10
c0010616:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c001061c:	7e 26                	jle    c0010644 <VgaText::clearScreen()+0x4c>
c001061e:	31 ff                	xor    edi,edi
c0010620:	50                   	push   eax
c0010621:	50                   	push   eax
c0010622:	56                   	push   esi
c0010623:	57                   	push   edi
c0010624:	47                   	inc    edi
c0010625:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001062b:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010631:	6a 20                	push   0x20
c0010633:	53                   	push   ebx
c0010634:	e8 35 f8 ff ff       	call   c000fe6e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010639:	83 c4 20             	add    esp,0x20
c001063c:	83 ff 50             	cmp    edi,0x50
c001063f:	75 df                	jne    c0010620 <VgaText::clearScreen()+0x28>
c0010641:	46                   	inc    esi
c0010642:	eb d2                	jmp    c0010616 <VgaText::clearScreen()+0x1e>
c0010644:	83 ec 0c             	sub    esp,0xc
c0010647:	53                   	push   ebx
c0010648:	e8 d9 fd ff ff       	call   c0010426 <VgaText::doUpdate()>
c001064d:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010654:	83 c4 10             	add    esp,0x10
c0010657:	5b                   	pop    ebx
c0010658:	5e                   	pop    esi
c0010659:	5f                   	pop    edi
c001065a:	c3                   	ret    
c001065b:	90                   	nop

c001065c <VgaText::putchar(char)>:
c001065c:	56                   	push   esi
c001065d:	53                   	push   ebx
c001065e:	83 ec 14             	sub    esp,0x14
c0010661:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010665:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010669:	3c 5b                	cmp    al,0x5b
c001066b:	75 21                	jne    c001068e <VgaText::putchar(char)+0x32>
c001066d:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010674:	74 28                	je     c001069e <VgaText::putchar(char)+0x42>
c0010676:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c001067f:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010689:	e9 e2 00 00 00       	jmp    c0010770 <VgaText::putchar(char)+0x114>
c001068e:	3c 1b                	cmp    al,0x1b
c0010690:	75 0c                	jne    c001069e <VgaText::putchar(char)+0x42>
c0010692:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010699:	e9 d2 00 00 00       	jmp    c0010770 <VgaText::putchar(char)+0x114>
c001069e:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c00106a4:	84 c9                	test   cl,cl
c00106a6:	0f 84 ab 00 00 00    	je     c0010757 <VgaText::putchar(char)+0xfb>
c00106ac:	8d 50 c0             	lea    edx,[eax-0x40]
c00106af:	80 fa 3e             	cmp    dl,0x3e
c00106b2:	0f 87 82 00 00 00    	ja     c001073a <VgaText::putchar(char)+0xde>
c00106b8:	3c 6d                	cmp    al,0x6d
c00106ba:	75 4d                	jne    c0010709 <VgaText::putchar(char)+0xad>
c00106bc:	31 f6                	xor    esi,esi
c00106be:	31 d2                	xor    edx,edx
c00106c0:	31 c0                	xor    eax,eax
c00106c2:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00106c8:	7e 30                	jle    c00106fa <VgaText::putchar(char)+0x9e>
c00106ca:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00106d2:	80 fa 3b             	cmp    dl,0x3b
c00106d5:	75 17                	jne    c00106ee <VgaText::putchar(char)+0x92>
c00106d7:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00106db:	50                   	push   eax
c00106dc:	53                   	push   ebx
c00106dd:	e8 fc f5 ff ff       	call   c000fcde <VgaText::doANSI_SGR(int)>
c00106e2:	59                   	pop    ecx
c00106e3:	31 d2                	xor    edx,edx
c00106e5:	58                   	pop    eax
c00106e6:	31 c0                	xor    eax,eax
c00106e8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00106ec:	eb 09                	jmp    c00106f7 <VgaText::putchar(char)+0x9b>
c00106ee:	6b c0 0a             	imul   eax,eax,0xa
c00106f1:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00106f5:	88 ca                	mov    dl,cl
c00106f7:	46                   	inc    esi
c00106f8:	eb c8                	jmp    c00106c2 <VgaText::putchar(char)+0x66>
c00106fa:	84 d2                	test   dl,dl
c00106fc:	74 31                	je     c001072f <VgaText::putchar(char)+0xd3>
c00106fe:	50                   	push   eax
c00106ff:	53                   	push   ebx
c0010700:	e8 d9 f5 ff ff       	call   c000fcde <VgaText::doANSI_SGR(int)>
c0010705:	58                   	pop    eax
c0010706:	5a                   	pop    edx
c0010707:	eb 26                	jmp    c001072f <VgaText::putchar(char)+0xd3>
c0010709:	3c 4a                	cmp    al,0x4a
c001070b:	75 22                	jne    c001072f <VgaText::putchar(char)+0xd3>
c001070d:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010714:	75 19                	jne    c001072f <VgaText::putchar(char)+0xd3>
c0010716:	83 ec 0c             	sub    esp,0xc
c0010719:	53                   	push   ebx
c001071a:	e8 d9 fe ff ff       	call   c00105f8 <VgaText::clearScreen()>
c001071f:	83 c4 0c             	add    esp,0xc
c0010722:	6a 00                	push   0x0
c0010724:	6a 00                	push   0x0
c0010726:	53                   	push   ebx
c0010727:	e8 ba f7 ff ff       	call   c000fee6 <VgaText::setCursor(int, int)>
c001072c:	83 c4 10             	add    esp,0x10
c001072f:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010738:	eb 36                	jmp    c0010770 <VgaText::putchar(char)+0x114>
c001073a:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010740:	83 fa 0e             	cmp    edx,0xe
c0010743:	7f 2b                	jg     c0010770 <VgaText::putchar(char)+0x114>
c0010745:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010748:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c001074e:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010755:	eb 19                	jmp    c0010770 <VgaText::putchar(char)+0x114>
c0010757:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001075d:	0f be c0             	movsx  eax,al
c0010760:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010766:	50                   	push   eax
c0010767:	53                   	push   ebx
c0010768:	e8 ab fa ff ff       	call   c0010218 <VgaText::putchar(char, VgaColour, VgaColour)>
c001076d:	83 c4 10             	add    esp,0x10
c0010770:	83 c4 14             	add    esp,0x14
c0010773:	5b                   	pop    ebx
c0010774:	5e                   	pop    esi
c0010775:	c3                   	ret    

c0010776 <VgaText::puts(char const*)>:
c0010776:	53                   	push   ebx
c0010777:	83 ec 08             	sub    esp,0x8
c001077a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001077e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010781:	84 c0                	test   al,al
c0010783:	74 12                	je     c0010797 <VgaText::puts(char const*)+0x21>
c0010785:	43                   	inc    ebx
c0010786:	51                   	push   ecx
c0010787:	51                   	push   ecx
c0010788:	50                   	push   eax
c0010789:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001078d:	e8 ca fe ff ff       	call   c001065c <VgaText::putchar(char)>
c0010792:	83 c4 10             	add    esp,0x10
c0010795:	eb e7                	jmp    c001077e <VgaText::puts(char const*)+0x8>
c0010797:	83 c4 08             	add    esp,0x8
c001079a:	5b                   	pop    ebx
c001079b:	c3                   	ret    

c001079c <VgaText::putx(unsigned int)>:
c001079c:	57                   	push   edi
c001079d:	b9 11 00 00 00       	mov    ecx,0x11
c00107a2:	56                   	push   esi
c00107a3:	be 9a 90 03 c0       	mov    esi,0xc003909a
c00107a8:	53                   	push   ebx
c00107a9:	83 ec 20             	sub    esp,0x20
c00107ac:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00107b0:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00107b4:	fc                   	cld    
c00107b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107b7:	be 08 00 00 00       	mov    esi,0x8
c00107bc:	50                   	push   eax
c00107bd:	50                   	push   eax
c00107be:	89 d8                	mov    eax,ebx
c00107c0:	c1 e3 04             	shl    ebx,0x4
c00107c3:	c1 e8 1c             	shr    eax,0x1c
c00107c6:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00107cb:	50                   	push   eax
c00107cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00107d0:	e8 87 fe ff ff       	call   c001065c <VgaText::putchar(char)>
c00107d5:	83 c4 10             	add    esp,0x10
c00107d8:	4e                   	dec    esi
c00107d9:	75 e1                	jne    c00107bc <VgaText::putx(unsigned int)+0x20>
c00107db:	83 c4 20             	add    esp,0x20
c00107de:	5b                   	pop    ebx
c00107df:	5e                   	pop    esi
c00107e0:	5f                   	pop    edi
c00107e1:	c3                   	ret    

c00107e2 <VgaText::VgaText(char const*)>:
c00107e2:	57                   	push   edi
c00107e3:	56                   	push   esi
c00107e4:	53                   	push   ebx
c00107e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107e9:	83 ec 08             	sub    esp,0x8
c00107ec:	6a 00                	push   0x0
c00107ee:	50                   	push   eax
c00107ef:	e8 b8 05 00 00       	call   c0010dac <UnixFile::UnixFile(int)>
c00107f4:	83 c4 10             	add    esp,0x10
c00107f7:	ba 00 91 03 c0       	mov    edx,0xc0039100
c00107fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010800:	89 10                	mov    DWORD PTR [eax],edx
c0010802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010806:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010814:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c001081e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010822:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001082d:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010838:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010846:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010854:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c001085b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001085f:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001086a:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010870:	bb 80 bb 03 c0       	mov    ebx,0xc003bb80
c0010875:	b8 08 00 00 00       	mov    eax,0x8
c001087a:	fc                   	cld    
c001087b:	89 d7                	mov    edi,edx
c001087d:	89 de                	mov    esi,ebx
c001087f:	89 c1                	mov    ecx,eax
c0010881:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010887:	05 1e 10 00 00       	add    eax,0x101e
c001088c:	83 ec 08             	sub    esp,0x8
c001088f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010893:	50                   	push   eax
c0010894:	e8 0e fe fe ff       	call   c00006a7 <strcpy>
c0010899:	83 c4 10             	add    esp,0x10
c001089c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a0:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c00108aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ae:	83 c0 0c             	add    eax,0xc
c00108b1:	83 ec 04             	sub    esp,0x4
c00108b4:	68 00 0f 00 00       	push   0xf00
c00108b9:	6a 00                	push   0x0
c00108bb:	50                   	push   eax
c00108bc:	e8 47 fd fe ff       	call   c0000608 <memset>
c00108c1:	83 c4 10             	add    esp,0x10
c00108c4:	83 ec 04             	sub    esp,0x4
c00108c7:	6a 00                	push   0x0
c00108c9:	6a 07                	push   0x7
c00108cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108cf:	e8 c2 f4 ff ff       	call   c000fd96 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00108d4:	83 c4 10             	add    esp,0x10
c00108d7:	83 ec 08             	sub    esp,0x8
c00108da:	6a 02                	push   0x2
c00108dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108e0:	e8 49 fa ff ff       	call   c001032e <VgaText::setCursorHeight(int)>
c00108e5:	83 c4 10             	add    esp,0x10
c00108e8:	83 ec 04             	sub    esp,0x4
c00108eb:	6a 00                	push   0x0
c00108ed:	6a 00                	push   0x0
c00108ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108f3:	e8 ee f5 ff ff       	call   c000fee6 <VgaText::setCursor(int, int)>
c00108f8:	83 c4 10             	add    esp,0x10
c00108fb:	83 ec 08             	sub    esp,0x8
c00108fe:	6a 01                	push   0x1
c0010900:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010904:	e8 8b f3 ff ff       	call   c000fc94 <VgaText::showCursor(bool)>
c0010909:	83 c4 10             	add    esp,0x10
c001090c:	83 ec 08             	sub    esp,0x8
c001090f:	6a 01                	push   0x1
c0010911:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010915:	e8 8a f3 ff ff       	call   c000fca4 <VgaText::disableBlink(bool)>
c001091a:	83 c4 10             	add    esp,0x10
c001091d:	83 ec 0c             	sub    esp,0xc
c0010920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010924:	e8 cf fc ff ff       	call   c00105f8 <VgaText::clearScreen()>
c0010929:	83 c4 10             	add    esp,0x10
c001092c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010930:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001093b:	05 9e 10 00 00       	add    eax,0x109e
c0010940:	83 ec 04             	sub    esp,0x4
c0010943:	68 96 00 00 00       	push   0x96
c0010948:	6a 00                	push   0x0
c001094a:	50                   	push   eax
c001094b:	e8 b8 fc fe ff       	call   c0000608 <memset>
c0010950:	83 c4 10             	add    esp,0x10
c0010953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010957:	05 34 11 00 00       	add    eax,0x1134
c001095c:	83 ec 04             	sub    esp,0x4
c001095f:	68 2c 01 00 00       	push   0x12c
c0010964:	6a 00                	push   0x0
c0010966:	50                   	push   eax
c0010967:	e8 9c fc fe ff       	call   c0000608 <memset>
c001096c:	83 c4 10             	add    esp,0x10
c001096f:	90                   	nop
c0010970:	5b                   	pop    ebx
c0010971:	5e                   	pop    esi
c0010972:	5f                   	pop    edi
c0010973:	c3                   	ret    

c0010974 <VgaText::receiveKey(unsigned char)>:
c0010974:	55                   	push   ebp
c0010975:	57                   	push   edi
c0010976:	56                   	push   esi
c0010977:	53                   	push   ebx
c0010978:	83 ec 1c             	sub    esp,0x1c
c001097b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001097f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010983:	84 db                	test   bl,bl
c0010985:	0f 84 c9 00 00 00    	je     c0010a54 <VgaText::receiveKey(unsigned char)+0xe0>
c001098b:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010991:	80 fb 08             	cmp    bl,0x8
c0010994:	75 2c                	jne    c00109c2 <VgaText::receiveKey(unsigned char)+0x4e>
c0010996:	83 ec 0c             	sub    esp,0xc
c0010999:	57                   	push   edi
c001099a:	e8 86 fc fe ff       	call   c0000625 <strlen>
c001099f:	83 c4 10             	add    esp,0x10
c00109a2:	85 c0                	test   eax,eax
c00109a4:	74 41                	je     c00109e7 <VgaText::receiveKey(unsigned char)+0x73>
c00109a6:	50                   	push   eax
c00109a7:	50                   	push   eax
c00109a8:	6a 08                	push   0x8
c00109aa:	56                   	push   esi
c00109ab:	e8 ac fc ff ff       	call   c001065c <VgaText::putchar(char)>
c00109b0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00109b3:	e8 6d fc fe ff       	call   c0000625 <strlen>
c00109b8:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c00109c0:	eb 22                	jmp    c00109e4 <VgaText::receiveKey(unsigned char)+0x70>
c00109c2:	0f be c3             	movsx  eax,bl
c00109c5:	52                   	push   edx
c00109c6:	52                   	push   edx
c00109c7:	50                   	push   eax
c00109c8:	56                   	push   esi
c00109c9:	e8 8e fc ff ff       	call   c001065c <VgaText::putchar(char)>
c00109ce:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00109d2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00109d7:	59                   	pop    ecx
c00109d8:	5d                   	pop    ebp
c00109d9:	8d 44 24 16          	lea    eax,[esp+0x16]
c00109dd:	50                   	push   eax
c00109de:	57                   	push   edi
c00109df:	e8 7a fd fe ff       	call   c000075e <strcat>
c00109e4:	83 c4 10             	add    esp,0x10
c00109e7:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c00109ee:	75 05                	jne    c00109f5 <VgaText::receiveKey(unsigned char)+0x81>
c00109f0:	80 fb 0a             	cmp    bl,0xa
c00109f3:	75 53                	jne    c0010a48 <VgaText::receiveKey(unsigned char)+0xd4>
c00109f5:	83 ec 0c             	sub    esp,0xc
c00109f8:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00109fe:	53                   	push   ebx
c00109ff:	e8 21 fc fe ff       	call   c0000625 <strlen>
c0010a04:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a07:	89 c5                	mov    ebp,eax
c0010a09:	e8 17 fc fe ff       	call   c0000625 <strlen>
c0010a0e:	83 c4 10             	add    esp,0x10
c0010a11:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010a15:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010a1a:	76 10                	jbe    c0010a2c <VgaText::receiveKey(unsigned char)+0xb8>
c0010a1c:	83 ec 0c             	sub    esp,0xc
c0010a1f:	68 ab 90 03 c0       	push   0xc00390ab
c0010a24:	e8 c5 c2 ff ff       	call   c000ccee <panic(char const*)>
c0010a29:	83 c4 10             	add    esp,0x10
c0010a2c:	50                   	push   eax
c0010a2d:	50                   	push   eax
c0010a2e:	57                   	push   edi
c0010a2f:	53                   	push   ebx
c0010a30:	e8 29 fd fe ff       	call   c000075e <strcat>
c0010a35:	83 c4 0c             	add    esp,0xc
c0010a38:	68 96 00 00 00       	push   0x96
c0010a3d:	6a 00                	push   0x0
c0010a3f:	57                   	push   edi
c0010a40:	e8 c3 fb fe ff       	call   c0000608 <memset>
c0010a45:	83 c4 10             	add    esp,0x10
c0010a48:	83 ec 0c             	sub    esp,0xc
c0010a4b:	56                   	push   esi
c0010a4c:	e8 d5 f9 ff ff       	call   c0010426 <VgaText::doUpdate()>
c0010a51:	83 c4 10             	add    esp,0x10
c0010a54:	83 c4 1c             	add    esp,0x1c
c0010a57:	5b                   	pop    ebx
c0010a58:	5e                   	pop    esi
c0010a59:	5f                   	pop    edi
c0010a5a:	5d                   	pop    ebp
c0010a5b:	c3                   	ret    

c0010a5c <VgaText::write(unsigned long long, void*, int*)>:
c0010a5c:	55                   	push   ebp
c0010a5d:	57                   	push   edi
c0010a5e:	56                   	push   esi
c0010a5f:	53                   	push   ebx
c0010a60:	83 ec 0c             	sub    esp,0xc
c0010a63:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010a67:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010a6b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010a6f:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010a76:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010a79:	39 eb                	cmp    ebx,ebp
c0010a7b:	74 13                	je     c0010a90 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010a7d:	43                   	inc    ebx
c0010a7e:	50                   	push   eax
c0010a7f:	50                   	push   eax
c0010a80:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010a84:	50                   	push   eax
c0010a85:	56                   	push   esi
c0010a86:	e8 d1 fb ff ff       	call   c001065c <VgaText::putchar(char)>
c0010a8b:	83 c4 10             	add    esp,0x10
c0010a8e:	eb e9                	jmp    c0010a79 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010a90:	83 ec 0c             	sub    esp,0xc
c0010a93:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010a9a:	56                   	push   esi
c0010a9b:	e8 86 f9 ff ff       	call   c0010426 <VgaText::doUpdate()>
c0010aa0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010aa4:	89 38                	mov    DWORD PTR [eax],edi
c0010aa6:	83 c4 1c             	add    esp,0x1c
c0010aa9:	31 c0                	xor    eax,eax
c0010aab:	5b                   	pop    ebx
c0010aac:	5e                   	pop    esi
c0010aad:	5f                   	pop    edi
c0010aae:	5d                   	pop    ebp
c0010aaf:	c3                   	ret    

c0010ab0 <newTerminal(char*)>:
c0010ab0:	83 ec 28             	sub    esp,0x28
c0010ab3:	68 60 12 00 00       	push   0x1260
c0010ab8:	e8 c3 16 00 00       	call   c0012180 <operator new(unsigned long)>
c0010abd:	5a                   	pop    edx
c0010abe:	59                   	pop    ecx
c0010abf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010ac3:	50                   	push   eax
c0010ac4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010ac8:	e8 15 fd ff ff       	call   c00107e2 <VgaText::VgaText(char const*)>
c0010acd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ad1:	83 c4 2c             	add    esp,0x2c
c0010ad4:	c3                   	ret    
c0010ad5:	90                   	nop

c0010ad6 <TSS::TSS()>:
c0010ad6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ada:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010ae1:	90                   	nop
c0010ae2:	c3                   	ret    
c0010ae3:	90                   	nop

c0010ae4 <TSS::setESP(unsigned long)>:
c0010ae4:	55                   	push   ebp
c0010ae5:	89 e5                	mov    ebp,esp
c0010ae7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010aea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010aed:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010af0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010af3:	90                   	nop
c0010af4:	5d                   	pop    ebp
c0010af5:	c3                   	ret    

c0010af6 <TSS::flush()>:
c0010af6:	55                   	push   ebp
c0010af7:	89 e5                	mov    ebp,esp
c0010af9:	83 ec 10             	sub    esp,0x10
c0010afc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010aff:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b01:	83 c8 03             	or     eax,0x3
c0010b04:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010b08:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010b0c:	66 89 d0             	mov    ax,dx
c0010b0f:	0f 00 d8             	ltr    ax
c0010b12:	90                   	nop
c0010b13:	c9                   	leave  
c0010b14:	c3                   	ret    
c0010b15:	90                   	nop

c0010b16 <TSS::setup(unsigned long, unsigned long)>:
c0010b16:	55                   	push   ebp
c0010b17:	89 e5                	mov    ebp,esp
c0010b19:	53                   	push   ebx
c0010b1a:	83 ec 14             	sub    esp,0x14
c0010b1d:	83 ec 0c             	sub    esp,0xc
c0010b20:	6a 68                	push   0x68
c0010b22:	e8 a4 c6 ff ff       	call   c000d1cb <malloc>
c0010b27:	83 c4 10             	add    esp,0x10
c0010b2a:	89 c2                	mov    edx,eax
c0010b2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b2f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b35:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b38:	83 ec 04             	sub    esp,0x4
c0010b3b:	6a 68                	push   0x68
c0010b3d:	6a 00                	push   0x0
c0010b3f:	50                   	push   eax
c0010b40:	e8 c3 fa fe ff       	call   c0000608 <memset>
c0010b45:	83 c4 10             	add    esp,0x10
c0010b48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b4b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b4e:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010b54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b57:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b5a:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010b60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b63:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b66:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b69:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b6f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b72:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010b78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b7e:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010b84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b87:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b8a:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010b90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b93:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b96:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010b9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b9f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ba2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010ba5:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010ba8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bae:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010bb1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010bb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bb7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bba:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010bc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bc4:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c0010bc7:	e8 4d db 00 00       	call   c001e719 <CPU::readCR3()>
c0010bcc:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0010bcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bd2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bd5:	83 ec 08             	sub    esp,0x8
c0010bd8:	50                   	push   eax
c0010bd9:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010bdc:	50                   	push   eax
c0010bdd:	e8 a6 b8 ff ff       	call   c000c488 <GDTEntry::setBase(unsigned int)>
c0010be2:	83 c4 10             	add    esp,0x10
c0010be5:	83 ec 08             	sub    esp,0x8
c0010be8:	6a 68                	push   0x68
c0010bea:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010bed:	50                   	push   eax
c0010bee:	e8 b1 b8 ff ff       	call   c000c4a4 <GDTEntry::setLimit(unsigned int)>
c0010bf3:	83 c4 10             	add    esp,0x10
c0010bf6:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c0010bfa:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010bfd:	83 e0 0f             	and    eax,0xf
c0010c00:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010c03:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010c06:	83 c8 40             	or     eax,0x40
c0010c09:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010c0c:	e8 a5 62 00 00       	call   c0016eb6 <thisCPU()>
c0010c11:	05 78 01 00 00       	add    eax,0x178
c0010c16:	83 ec 04             	sub    esp,0x4
c0010c19:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0010c1c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010c1f:	50                   	push   eax
c0010c20:	e8 b3 b8 ff ff       	call   c000c4d8 <GDT::addEntry(GDTEntry)>
c0010c25:	83 c4 10             	add    esp,0x10
c0010c28:	89 c2                	mov    edx,eax
c0010c2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c2d:	89 10                	mov    DWORD PTR [eax],edx
c0010c2f:	e8 82 62 00 00       	call   c0016eb6 <thisCPU()>
c0010c34:	05 78 01 00 00       	add    eax,0x178
c0010c39:	83 ec 0c             	sub    esp,0xc
c0010c3c:	50                   	push   eax
c0010c3d:	e8 da b8 ff ff       	call   c000c51c <GDT::flush()>
c0010c42:	83 c4 10             	add    esp,0x10
c0010c45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c48:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c4a:	83 ec 08             	sub    esp,0x8
c0010c4d:	50                   	push   eax
c0010c4e:	68 14 91 03 c0       	push   0xc0039114
c0010c53:	e8 78 bf ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0010c58:	83 c4 10             	add    esp,0x10
c0010c5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c60:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010c63:	c9                   	leave  
c0010c64:	c3                   	ret    
c0010c65:	90                   	nop

c0010c66 <ReservedFilename::isAtty()>:
c0010c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c6a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010c6d:	31 c0                	xor    eax,eax
c0010c6f:	83 fa 08             	cmp    edx,0x8
c0010c72:	74 06                	je     c0010c7a <ReservedFilename::isAtty()+0x14>
c0010c74:	83 fa 06             	cmp    edx,0x6
c0010c77:	0f 94 c0             	sete   al
c0010c7a:	c3                   	ret    
c0010c7b:	90                   	nop

c0010c7c <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010c7c:	55                   	push   ebp
c0010c7d:	57                   	push   edi
c0010c7e:	56                   	push   esi
c0010c7f:	53                   	push   ebx
c0010c80:	83 ec 0c             	sub    esp,0xc
c0010c83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c87:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010c8b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c8e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010c92:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0010c96:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010c9a:	83 f8 08             	cmp    eax,0x8
c0010c9d:	75 08                	jne    c0010ca7 <ReservedFilename::read(unsigned long long, void*, int*)+0x2b>
c0010c9f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010ca5:	eb 5c                	jmp    c0010d03 <ReservedFilename::read(unsigned long long, void*, int*)+0x87>
c0010ca7:	83 f8 06             	cmp    eax,0x6
c0010caa:	75 3d                	jne    c0010ce9 <ReservedFilename::read(unsigned long long, void*, int*)+0x6d>
c0010cac:	83 ec 0c             	sub    esp,0xc
c0010caf:	68 32 91 03 c0       	push   0xc0039132
c0010cb4:	e8 17 bf ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0010cb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010cbe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010cc1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010cc7:	8b 10                	mov    edx,DWORD PTR [eax]
c0010cc9:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0010ccd:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c0010cd1:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c0010cd5:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c0010cd9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010cdd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0010ce0:	83 c4 1c             	add    esp,0x1c
c0010ce3:	5b                   	pop    ebx
c0010ce4:	5e                   	pop    esi
c0010ce5:	5f                   	pop    edi
c0010ce6:	5d                   	pop    ebp
c0010ce7:	ff e0                	jmp    eax
c0010ce9:	89 c2                	mov    edx,eax
c0010ceb:	83 e2 fd             	and    edx,0xfffffffd
c0010cee:	83 fa 05             	cmp    edx,0x5
c0010cf1:	74 ac                	je     c0010c9f <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c0010cf3:	8d 50 f5             	lea    edx,[eax-0xb]
c0010cf6:	83 fa 08             	cmp    edx,0x8
c0010cf9:	76 a4                	jbe    c0010c9f <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c0010cfb:	83 e8 15             	sub    eax,0x15
c0010cfe:	83 f8 08             	cmp    eax,0x8
c0010d01:	76 9c                	jbe    c0010c9f <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c0010d03:	83 c4 0c             	add    esp,0xc
c0010d06:	31 c0                	xor    eax,eax
c0010d08:	5b                   	pop    ebx
c0010d09:	5e                   	pop    esi
c0010d0a:	5f                   	pop    edi
c0010d0b:	5d                   	pop    ebp
c0010d0c:	c3                   	ret    
c0010d0d:	90                   	nop

c0010d0e <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010d0e:	55                   	push   ebp
c0010d0f:	57                   	push   edi
c0010d10:	56                   	push   esi
c0010d11:	53                   	push   ebx
c0010d12:	83 ec 0c             	sub    esp,0xc
c0010d15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d19:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010d1d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d20:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010d24:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0010d28:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010d2c:	83 f8 08             	cmp    eax,0x8
c0010d2f:	75 08                	jne    c0010d39 <ReservedFilename::write(unsigned long long, void*, int*)+0x2b>
c0010d31:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010d37:	eb 60                	jmp    c0010d99 <ReservedFilename::write(unsigned long long, void*, int*)+0x8b>
c0010d39:	83 f8 06             	cmp    eax,0x6
c0010d3c:	75 3d                	jne    c0010d7b <ReservedFilename::write(unsigned long long, void*, int*)+0x6d>
c0010d3e:	83 ec 0c             	sub    esp,0xc
c0010d41:	68 3f 91 03 c0       	push   0xc003913f
c0010d46:	e8 85 be ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0010d4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d50:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d53:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d59:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d5b:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0010d5f:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c0010d63:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c0010d67:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c0010d6b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010d6f:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0010d72:	83 c4 1c             	add    esp,0x1c
c0010d75:	5b                   	pop    ebx
c0010d76:	5e                   	pop    esi
c0010d77:	5f                   	pop    edi
c0010d78:	5d                   	pop    ebp
c0010d79:	ff e0                	jmp    eax
c0010d7b:	83 f8 05             	cmp    eax,0x5
c0010d7e:	75 04                	jne    c0010d84 <ReservedFilename::write(unsigned long long, void*, int*)+0x76>
c0010d80:	89 33                	mov    DWORD PTR [ebx],esi
c0010d82:	eb 15                	jmp    c0010d99 <ReservedFilename::write(unsigned long long, void*, int*)+0x8b>
c0010d84:	83 f8 07             	cmp    eax,0x7
c0010d87:	74 a8                	je     c0010d31 <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c0010d89:	8d 50 f5             	lea    edx,[eax-0xb]
c0010d8c:	83 fa 08             	cmp    edx,0x8
c0010d8f:	76 a0                	jbe    c0010d31 <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c0010d91:	83 e8 15             	sub    eax,0x15
c0010d94:	83 f8 08             	cmp    eax,0x8
c0010d97:	76 98                	jbe    c0010d31 <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c0010d99:	83 c4 0c             	add    esp,0xc
c0010d9c:	31 c0                	xor    eax,eax
c0010d9e:	5b                   	pop    ebx
c0010d9f:	5e                   	pop    esi
c0010da0:	5f                   	pop    edi
c0010da1:	5d                   	pop    ebp
c0010da2:	c3                   	ret    
c0010da3:	90                   	nop

c0010da4 <UnixFile::getFileDescriptor()>:
c0010da4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010da8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dab:	c3                   	ret    

c0010dac <UnixFile::UnixFile(int)>:
c0010dac:	83 ec 0c             	sub    esp,0xc
c0010daf:	ba a4 91 03 c0       	mov    edx,0xc00391a4
c0010db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010db8:	89 10                	mov    DWORD PTR [eax],edx
c0010dba:	a1 a0 ab 03 c0       	mov    eax,ds:0xc003aba0
c0010dbf:	8d 50 01             	lea    edx,[eax+0x1]
c0010dc2:	89 15 a0 ab 03 c0    	mov    DWORD PTR ds:0xc003aba0,edx
c0010dc8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010dcc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010dcf:	83 ec 08             	sub    esp,0x8
c0010dd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010dd6:	68 b0 bb 03 c0       	push   0xc003bbb0
c0010ddb:	e8 b8 dc 00 00       	call   c001ea98 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010de0:	83 c4 10             	add    esp,0x10
c0010de3:	90                   	nop
c0010de4:	83 c4 0c             	add    esp,0xc
c0010de7:	c3                   	ret    

c0010de8 <ReservedFilename::ReservedFilename(int)>:
c0010de8:	83 ec 0c             	sub    esp,0xc
c0010deb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010def:	83 ec 08             	sub    esp,0x8
c0010df2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010df6:	50                   	push   eax
c0010df7:	e8 b0 ff ff ff       	call   c0010dac <UnixFile::UnixFile(int)>
c0010dfc:	83 c4 10             	add    esp,0x10
c0010dff:	ba c0 91 03 c0       	mov    edx,0xc00391c0
c0010e04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e08:	89 10                	mov    DWORD PTR [eax],edx
c0010e0a:	90                   	nop
c0010e0b:	83 c4 0c             	add    esp,0xc
c0010e0e:	c3                   	ret    
c0010e0f:	90                   	nop

c0010e10 <UnixFile::~UnixFile()>:
c0010e10:	83 ec 1c             	sub    esp,0x1c
c0010e13:	ba a4 91 03 c0       	mov    edx,0xc00391a4
c0010e18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e1c:	89 10                	mov    DWORD PTR [eax],edx
c0010e1e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010e26:	83 ec 0c             	sub    esp,0xc
c0010e29:	68 b0 bb 03 c0       	push   0xc003bbb0
c0010e2e:	e8 b3 db 00 00       	call   c001e9e6 <LinkedList<UnixFile>::getFirstElement()>
c0010e33:	83 c4 10             	add    esp,0x10
c0010e36:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e3a:	83 ec 0c             	sub    esp,0xc
c0010e3d:	68 b0 bb 03 c0       	push   0xc003bbb0
c0010e42:	e8 a7 db 00 00       	call   c001e9ee <LinkedList<UnixFile>::removeFirst()>
c0010e47:	83 c4 10             	add    esp,0x10
c0010e4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e4e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010e52:	74 3d                	je     c0010e91 <UnixFile::~UnixFile()+0x81>
c0010e54:	83 ec 08             	sub    esp,0x8
c0010e57:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010e5b:	68 b0 bb 03 c0       	push   0xc003bbb0
c0010e60:	e8 33 dc 00 00       	call   c001ea98 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010e65:	83 c4 10             	add    esp,0x10
c0010e68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e6c:	8d 50 01             	lea    edx,[eax+0x1]
c0010e6f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010e73:	3d 88 13 00 00       	cmp    eax,0x1388
c0010e78:	0f 94 c0             	sete   al
c0010e7b:	84 c0                	test   al,al
c0010e7d:	74 a7                	je     c0010e26 <UnixFile::~UnixFile()+0x16>
c0010e7f:	83 ec 0c             	sub    esp,0xc
c0010e82:	68 7c 91 03 c0       	push   0xc003917c
c0010e87:	e8 62 be ff ff       	call   c000ccee <panic(char const*)>
c0010e8c:	83 c4 10             	add    esp,0x10
c0010e8f:	eb 95                	jmp    c0010e26 <UnixFile::~UnixFile()+0x16>
c0010e91:	90                   	nop
c0010e92:	83 c4 1c             	add    esp,0x1c
c0010e95:	c3                   	ret    

c0010e96 <UnixFile::~UnixFile()>:
c0010e96:	83 ec 0c             	sub    esp,0xc
c0010e99:	83 ec 0c             	sub    esp,0xc
c0010e9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ea0:	e8 6b ff ff ff       	call   c0010e10 <UnixFile::~UnixFile()>
c0010ea5:	83 c4 10             	add    esp,0x10
c0010ea8:	83 ec 08             	sub    esp,0x8
c0010eab:	6a 0c                	push   0xc
c0010ead:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010eb1:	e8 d9 12 00 00       	call   c001218f <operator delete(void*, unsigned long)>
c0010eb6:	83 c4 10             	add    esp,0x10
c0010eb9:	83 c4 0c             	add    esp,0xc
c0010ebc:	c3                   	ret    
c0010ebd:	90                   	nop

c0010ebe <ReservedFilename::~ReservedFilename()>:
c0010ebe:	83 ec 0c             	sub    esp,0xc
c0010ec1:	ba c0 91 03 c0       	mov    edx,0xc00391c0
c0010ec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010eca:	89 10                	mov    DWORD PTR [eax],edx
c0010ecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ed0:	83 ec 0c             	sub    esp,0xc
c0010ed3:	50                   	push   eax
c0010ed4:	e8 37 ff ff ff       	call   c0010e10 <UnixFile::~UnixFile()>
c0010ed9:	83 c4 10             	add    esp,0x10
c0010edc:	90                   	nop
c0010edd:	83 c4 0c             	add    esp,0xc
c0010ee0:	c3                   	ret    
c0010ee1:	90                   	nop

c0010ee2 <ReservedFilename::~ReservedFilename()>:
c0010ee2:	83 ec 0c             	sub    esp,0xc
c0010ee5:	83 ec 0c             	sub    esp,0xc
c0010ee8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010eec:	e8 cd ff ff ff       	call   c0010ebe <ReservedFilename::~ReservedFilename()>
c0010ef1:	83 c4 10             	add    esp,0x10
c0010ef4:	83 ec 08             	sub    esp,0x8
c0010ef7:	6a 0c                	push   0xc
c0010ef9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010efd:	e8 8d 12 00 00       	call   c001218f <operator delete(void*, unsigned long)>
c0010f02:	83 c4 10             	add    esp,0x10
c0010f05:	83 c4 0c             	add    esp,0xc
c0010f08:	c3                   	ret    

c0010f09 <getFromFileDescriptor(int)>:
c0010f09:	83 ec 18             	sub    esp,0x18
c0010f0c:	68 b0 bb 03 c0       	push   0xc003bbb0
c0010f11:	e8 d0 da 00 00       	call   c001e9e6 <LinkedList<UnixFile>::getFirstElement()>
c0010f16:	83 c4 10             	add    esp,0x10
c0010f19:	85 c0                	test   eax,eax
c0010f1b:	74 18                	je     c0010f35 <getFromFileDescriptor(int)+0x2c>
c0010f1d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010f21:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
c0010f24:	74 0f                	je     c0010f35 <getFromFileDescriptor(int)+0x2c>
c0010f26:	52                   	push   edx
c0010f27:	52                   	push   edx
c0010f28:	50                   	push   eax
c0010f29:	68 b0 bb 03 c0       	push   0xc003bbb0
c0010f2e:	e8 5d db 00 00       	call   c001ea90 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0010f33:	eb e1                	jmp    c0010f16 <getFromFileDescriptor(int)+0xd>
c0010f35:	83 c4 0c             	add    esp,0xc
c0010f38:	c3                   	ret    

c0010f39 <__static_initialization_and_destruction_0(int, int)>:
c0010f39:	83 ec 0c             	sub    esp,0xc
c0010f3c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0010f41:	75 34                	jne    c0010f77 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0010f43:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0010f4b:	75 2a                	jne    c0010f77 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0010f4d:	83 ec 0c             	sub    esp,0xc
c0010f50:	68 b0 bb 03 c0       	push   0xc003bbb0
c0010f55:	e8 34 da 00 00       	call   c001e98e <LinkedList<UnixFile>::LinkedList()>
c0010f5a:	83 c4 10             	add    esp,0x10
c0010f5d:	83 ec 04             	sub    esp,0x4
c0010f60:	68 2c ab 03 c0       	push   0xc003ab2c
c0010f65:	68 b0 bb 03 c0       	push   0xc003bbb0
c0010f6a:	68 8c e9 01 c0       	push   0xc001e98c
c0010f6f:	e8 97 11 00 00       	call   c001210b <__cxa_atexit>
c0010f74:	83 c4 10             	add    esp,0x10
c0010f77:	90                   	nop
c0010f78:	83 c4 0c             	add    esp,0xc
c0010f7b:	c3                   	ret    

c0010f7c <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0010f7c:	83 ec 0c             	sub    esp,0xc
c0010f7f:	83 ec 08             	sub    esp,0x8
c0010f82:	68 ff ff 00 00       	push   0xffff
c0010f87:	6a 01                	push   0x1
c0010f89:	e8 ab ff ff ff       	call   c0010f39 <__static_initialization_and_destruction_0(int, int)>
c0010f8e:	83 c4 10             	add    esp,0x10
c0010f91:	83 c4 0c             	add    esp,0xc
c0010f94:	c3                   	ret    
c0010f95:	90                   	nop

c0010f96 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0010f96:	53                   	push   ebx
c0010f97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010f9b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010f9f:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0010fa5:	89 c8                	mov    eax,ecx
c0010fa7:	d1 e8                	shr    eax,1
c0010fa9:	03 05 a8 ab 03 c0    	add    eax,DWORD PTR ds:0xc003aba8
c0010faf:	83 e1 01             	and    ecx,0x1
c0010fb2:	8a 10                	mov    dl,BYTE PTR [eax]
c0010fb4:	75 09                	jne    c0010fbf <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0010fb6:	83 e2 f0             	and    edx,0xfffffff0
c0010fb9:	09 da                	or     edx,ebx
c0010fbb:	88 10                	mov    BYTE PTR [eax],dl
c0010fbd:	5b                   	pop    ebx
c0010fbe:	c3                   	ret    
c0010fbf:	c1 e3 04             	shl    ebx,0x4
c0010fc2:	83 e2 0f             	and    edx,0xf
c0010fc5:	09 da                	or     edx,ebx
c0010fc7:	88 10                	mov    BYTE PTR [eax],dl
c0010fc9:	5b                   	pop    ebx
c0010fca:	c3                   	ret    

c0010fcb <Virt::getPageState(unsigned long)>:
c0010fcb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fcf:	8b 0d a8 ab 03 c0    	mov    ecx,DWORD PTR ds:0xc003aba8
c0010fd5:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0010fdb:	89 d0                	mov    eax,edx
c0010fdd:	d1 e8                	shr    eax,1
c0010fdf:	83 e2 01             	and    edx,0x1
c0010fe2:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0010fe5:	75 04                	jne    c0010feb <Virt::getPageState(unsigned long)+0x20>
c0010fe7:	83 e0 0f             	and    eax,0xf
c0010fea:	c3                   	ret    
c0010feb:	c0 e8 04             	shr    al,0x4
c0010fee:	c3                   	ret    

c0010fef <Virt::allocateKernelVirtualPages(int)>:
c0010fef:	55                   	push   ebp
c0010ff0:	31 ed                	xor    ebp,ebp
c0010ff2:	57                   	push   edi
c0010ff3:	56                   	push   esi
c0010ff4:	53                   	push   ebx
c0010ff5:	31 db                	xor    ebx,ebx
c0010ff7:	83 ec 1c             	sub    esp,0x1c
c0010ffa:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010ffe:	8b 3d a4 ab 03 c0    	mov    edi,DWORD PTR ds:0xc003aba4
c0011004:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011009:	57                   	push   edi
c001100a:	e8 bc ff ff ff       	call   c0010fcb <Virt::getPageState(unsigned long)>
c001100f:	5a                   	pop    edx
c0011010:	84 c0                	test   al,al
c0011012:	75 3a                	jne    c001104e <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011014:	85 db                	test   ebx,ebx
c0011016:	75 02                	jne    c001101a <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011018:	89 fd                	mov    ebp,edi
c001101a:	43                   	inc    ebx
c001101b:	39 f3                	cmp    ebx,esi
c001101d:	74 5a                	je     c0011079 <Virt::allocateKernelVirtualPages(int)+0x8a>
c001101f:	47                   	inc    edi
c0011020:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011026:	76 31                	jbe    c0011059 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011028:	c7 05 a4 ab 03 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc003aba4,0xc8000
c0011032:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011037:	75 28                	jne    c0011061 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011039:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001103e:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011043:	57                   	push   edi
c0011044:	e8 82 ff ff ff       	call   c0010fcb <Virt::getPageState(unsigned long)>
c0011049:	5a                   	pop    edx
c001104a:	84 c0                	test   al,al
c001104c:	74 c6                	je     c0011014 <Virt::allocateKernelVirtualPages(int)+0x25>
c001104e:	31 db                	xor    ebx,ebx
c0011050:	47                   	inc    edi
c0011051:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011057:	77 cf                	ja     c0011028 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011059:	89 3d a4 ab 03 c0    	mov    DWORD PTR ds:0xc003aba4,edi
c001105f:	eb a8                	jmp    c0011009 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011061:	83 ec 0c             	sub    esp,0xc
c0011064:	68 d4 91 03 c0       	push   0xc00391d4
c0011069:	e8 80 bc ff ff       	call   c000ccee <panic(char const*)>
c001106e:	8b 3d a4 ab 03 c0    	mov    edi,DWORD PTR ds:0xc003aba4
c0011074:	83 c4 10             	add    esp,0x10
c0011077:	eb 90                	jmp    c0011009 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011079:	89 2d a4 ab 03 c0    	mov    DWORD PTR ds:0xc003aba4,ebp
c001107f:	4b                   	dec    ebx
c0011080:	74 5f                	je     c00110e1 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011082:	85 f6                	test   esi,esi
c0011084:	74 3d                	je     c00110c3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011086:	89 e8                	mov    eax,ebp
c0011088:	31 db                	xor    ebx,ebx
c001108a:	8d 7e ff             	lea    edi,[esi-0x1]
c001108d:	eb 14                	jmp    c00110a3 <Virt::allocateKernelVirtualPages(int)+0xb4>
c001108f:	6a 01                	push   0x1
c0011091:	43                   	inc    ebx
c0011092:	50                   	push   eax
c0011093:	e8 fe fe ff ff       	call   c0010f96 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011098:	58                   	pop    eax
c0011099:	39 f3                	cmp    ebx,esi
c001109b:	5a                   	pop    edx
c001109c:	74 25                	je     c00110c3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001109e:	a1 a4 ab 03 c0       	mov    eax,ds:0xc003aba4
c00110a3:	8d 50 01             	lea    edx,[eax+0x1]
c00110a6:	85 db                	test   ebx,ebx
c00110a8:	89 15 a4 ab 03 c0    	mov    DWORD PTR ds:0xc003aba4,edx
c00110ae:	74 20                	je     c00110d0 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00110b0:	39 df                	cmp    edi,ebx
c00110b2:	75 db                	jne    c001108f <Virt::allocateKernelVirtualPages(int)+0xa0>
c00110b4:	6a 03                	push   0x3
c00110b6:	43                   	inc    ebx
c00110b7:	50                   	push   eax
c00110b8:	e8 d9 fe ff ff       	call   c0010f96 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00110bd:	59                   	pop    ecx
c00110be:	39 f3                	cmp    ebx,esi
c00110c0:	58                   	pop    eax
c00110c1:	75 db                	jne    c001109e <Virt::allocateKernelVirtualPages(int)+0xaf>
c00110c3:	83 c4 1c             	add    esp,0x1c
c00110c6:	89 e8                	mov    eax,ebp
c00110c8:	5b                   	pop    ebx
c00110c9:	c1 e0 0c             	shl    eax,0xc
c00110cc:	5e                   	pop    esi
c00110cd:	5f                   	pop    edi
c00110ce:	5d                   	pop    ebp
c00110cf:	c3                   	ret    
c00110d0:	6a 02                	push   0x2
c00110d2:	bb 01 00 00 00       	mov    ebx,0x1
c00110d7:	50                   	push   eax
c00110d8:	e8 b9 fe ff ff       	call   c0010f96 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00110dd:	58                   	pop    eax
c00110de:	5a                   	pop    edx
c00110df:	eb bd                	jmp    c001109e <Virt::allocateKernelVirtualPages(int)+0xaf>
c00110e1:	6a 04                	push   0x4
c00110e3:	8d 45 01             	lea    eax,[ebp+0x1]
c00110e6:	55                   	push   ebp
c00110e7:	a3 a4 ab 03 c0       	mov    ds:0xc003aba4,eax
c00110ec:	e8 a5 fe ff ff       	call   c0010f96 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00110f1:	59                   	pop    ecx
c00110f2:	89 e8                	mov    eax,ebp
c00110f4:	5b                   	pop    ebx
c00110f5:	c1 e0 0c             	shl    eax,0xc
c00110f8:	83 c4 1c             	add    esp,0x1c
c00110fb:	5b                   	pop    ebx
c00110fc:	5e                   	pop    esi
c00110fd:	5f                   	pop    edi
c00110fe:	5d                   	pop    ebp
c00110ff:	c3                   	ret    

c0011100 <Virt::virtualMemorySetup()>:
c0011100:	53                   	push   ebx
c0011101:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011106:	83 ec 08             	sub    esp,0x8
c0011109:	6a 0f                	push   0xf
c001110b:	53                   	push   ebx
c001110c:	43                   	inc    ebx
c001110d:	e8 84 fe ff ff       	call   c0010f96 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011112:	59                   	pop    ecx
c0011113:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011119:	58                   	pop    eax
c001111a:	75 ed                	jne    c0011109 <Virt::virtualMemorySetup()+0x9>
c001111c:	83 ec 08             	sub    esp,0x8
c001111f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011124:	68 00 00 00 c8       	push   0xc8000000
c0011129:	68 7f 93 03 c0       	push   0xc003937f
c001112e:	e8 9d ba ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0011133:	58                   	pop    eax
c0011134:	5a                   	pop    edx
c0011135:	68 00 f0 ff ef       	push   0xeffff000
c001113a:	68 93 93 03 c0       	push   0xc0039393
c001113f:	e8 8c ba ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0011144:	83 c4 10             	add    esp,0x10
c0011147:	83 ec 08             	sub    esp,0x8
c001114a:	6a 00                	push   0x0
c001114c:	53                   	push   ebx
c001114d:	43                   	inc    ebx
c001114e:	e8 43 fe ff ff       	call   c0010f96 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011153:	83 c4 10             	add    esp,0x10
c0011156:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001115c:	75 e9                	jne    c0011147 <Virt::virtualMemorySetup()+0x47>
c001115e:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011163:	83 ec 08             	sub    esp,0x8
c0011166:	6a 0f                	push   0xf
c0011168:	53                   	push   ebx
c0011169:	43                   	inc    ebx
c001116a:	e8 27 fe ff ff       	call   c0010f96 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001116f:	83 c4 10             	add    esp,0x10
c0011172:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011178:	75 e9                	jne    c0011163 <Virt::virtualMemorySetup()+0x63>
c001117a:	83 c4 08             	add    esp,0x8
c001117d:	5b                   	pop    ebx
c001117e:	c3                   	ret    

c001117f <Virt::getAKernelVAS()>:
c001117f:	a1 bc bb 03 c0       	mov    eax,ds:0xc003bbbc
c0011184:	c3                   	ret    

c0011185 <Virt::setupPageSwapping(int)>:
c0011185:	57                   	push   edi
c0011186:	56                   	push   esi
c0011187:	53                   	push   ebx
c0011188:	83 ec 1c             	sub    esp,0x1c
c001118b:	68 14 01 00 00       	push   0x114
c0011190:	e8 eb 0f 00 00       	call   c0012180 <operator new(unsigned long)>
c0011195:	83 c4 0c             	add    esp,0xc
c0011198:	89 c6                	mov    esi,eax
c001119a:	ff 35 5c b9 03 c0    	push   DWORD PTR ds:0xc003b95c
c00111a0:	68 a7 93 03 c0       	push   0xc00393a7
c00111a5:	50                   	push   eax
c00111a6:	e8 03 14 00 00       	call   c00125ae <File::File(char const*, Process*)>
c00111ab:	89 34 24             	mov    DWORD PTR [esp],esi
c00111ae:	e8 d7 15 00 00       	call   c001278a <File::unlink()>
c00111b3:	58                   	pop    eax
c00111b4:	5a                   	pop    edx
c00111b5:	6a 12                	push   0x12
c00111b7:	56                   	push   esi
c00111b8:	e8 55 14 00 00       	call   c0012612 <File::open(FileOpenMode)>
c00111bd:	83 c4 10             	add    esp,0x10
c00111c0:	85 c0                	test   eax,eax
c00111c2:	0f 85 bf 00 00 00    	jne    c0011287 <Virt::setupPageSwapping(int)+0x102>
c00111c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00111cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00111d4:	c1 e3 08             	shl    ebx,0x8
c00111d7:	83 ec 0c             	sub    esp,0xc
c00111da:	68 00 00 01 00       	push   0x10000
c00111df:	e8 e7 bf ff ff       	call   c000d1cb <malloc>
c00111e4:	83 c4 0c             	add    esp,0xc
c00111e7:	89 c7                	mov    edi,eax
c00111e9:	68 00 00 01 00       	push   0x10000
c00111ee:	6a 00                	push   0x0
c00111f0:	50                   	push   eax
c00111f1:	e8 12 f4 fe ff       	call   c0000608 <memset>
c00111f6:	83 c4 10             	add    esp,0x10
c00111f9:	85 db                	test   ebx,ebx
c00111fb:	79 03                	jns    c0011200 <Virt::setupPageSwapping(int)+0x7b>
c00111fd:	83 c3 0f             	add    ebx,0xf
c0011200:	c1 fb 04             	sar    ebx,0x4
c0011203:	4b                   	dec    ebx
c0011204:	83 fb ff             	cmp    ebx,0xffffffff
c0011207:	74 4b                	je     c0011254 <Virt::setupPageSwapping(int)+0xcf>
c0011209:	83 ec 0c             	sub    esp,0xc
c001120c:	8b 06                	mov    eax,DWORD PTR [esi]
c001120e:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011212:	52                   	push   edx
c0011213:	57                   	push   edi
c0011214:	6a 00                	push   0x0
c0011216:	68 00 00 01 00       	push   0x10000
c001121b:	56                   	push   esi
c001121c:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001121f:	83 c4 20             	add    esp,0x20
c0011222:	85 c0                	test   eax,eax
c0011224:	75 4e                	jne    c0011274 <Virt::setupPageSwapping(int)+0xef>
c0011226:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001122a:	3d 00 00 01 00       	cmp    eax,0x10000
c001122f:	74 d2                	je     c0011203 <Virt::setupPageSwapping(int)+0x7e>
c0011231:	83 ec 08             	sub    esp,0x8
c0011234:	4b                   	dec    ebx
c0011235:	50                   	push   eax
c0011236:	68 fa 93 03 c0       	push   0xc00393fa
c001123b:	e8 90 b9 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0011240:	c7 04 24 03 94 03 c0 	mov    DWORD PTR [esp],0xc0039403
c0011247:	e8 a2 ba ff ff       	call   c000ccee <panic(char const*)>
c001124c:	83 c4 10             	add    esp,0x10
c001124f:	83 fb ff             	cmp    ebx,0xffffffff
c0011252:	75 b5                	jne    c0011209 <Virt::setupPageSwapping(int)+0x84>
c0011254:	83 ec 0c             	sub    esp,0xc
c0011257:	56                   	push   esi
c0011258:	e8 13 14 00 00       	call   c0012670 <File::close()>
c001125d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011260:	e8 86 bf ff ff       	call   c000d1eb <rfree>
c0011265:	89 34 24             	mov    DWORD PTR [esp],esi
c0011268:	8b 06                	mov    eax,DWORD PTR [esi]
c001126a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001126d:	83 c4 20             	add    esp,0x20
c0011270:	5b                   	pop    ebx
c0011271:	5e                   	pop    esi
c0011272:	5f                   	pop    edi
c0011273:	c3                   	ret    
c0011274:	83 ec 08             	sub    esp,0x8
c0011277:	50                   	push   eax
c0011278:	68 e2 93 03 c0       	push   0xc00393e2
c001127d:	e8 4e b9 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0011282:	83 c4 10             	add    esp,0x10
c0011285:	eb 9f                	jmp    c0011226 <Virt::setupPageSwapping(int)+0xa1>
c0011287:	83 ec 08             	sub    esp,0x8
c001128a:	50                   	push   eax
c001128b:	68 be 93 03 c0       	push   0xc00393be
c0011290:	e8 3b b9 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0011295:	c7 04 24 c7 93 03 c0 	mov    DWORD PTR [esp],0xc00393c7
c001129c:	e8 4d ba ff ff       	call   c000ccee <panic(char const*)>
c00112a1:	83 c4 10             	add    esp,0x10
c00112a4:	e9 1f ff ff ff       	jmp    c00111c8 <Virt::setupPageSwapping(int)+0x43>
c00112a9:	90                   	nop

c00112aa <VAS::VAS()>:
c00112aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112ae:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112b9:	a3 bc bb 03 c0       	mov    ds:0xc003bbbc,eax
c00112be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112c2:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00112c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112ca:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00112cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112d1:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c00112d8:	90                   	nop
c00112d9:	c3                   	ret    

c00112da <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00112da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112de:	89 c2                	mov    edx,eax
c00112e0:	c1 e8 0a             	shr    eax,0xa
c00112e3:	c1 ea 16             	shr    edx,0x16
c00112e6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00112eb:	19 c9                	sbb    ecx,ecx
c00112ed:	c1 e2 0c             	shl    edx,0xc
c00112f0:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00112f6:	25 fc 0f 00 00       	and    eax,0xffc
c00112fb:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011302:	01 d0                	add    eax,edx
c0011304:	c3                   	ret    
c0011305:	90                   	nop

c0011306 <VAS::getPageTableEntry(unsigned long)>:
c0011306:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001130a:	89 ca                	mov    edx,ecx
c001130c:	c1 e9 0a             	shr    ecx,0xa
c001130f:	c1 ea 16             	shr    edx,0x16
c0011312:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011318:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001131e:	c1 e0 0c             	shl    eax,0xc
c0011321:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011324:	c3                   	ret    

c0011325 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011325:	57                   	push   edi
c0011326:	56                   	push   esi
c0011327:	be 01 00 00 00       	mov    esi,0x1
c001132c:	53                   	push   ebx
c001132d:	83 ec 10             	sub    esp,0x10
c0011330:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011334:	c1 eb 0c             	shr    ebx,0xc
c0011337:	eb 3f                	jmp    c0011378 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011339:	e8 41 fe ff ff       	call   c001117f <Virt::getAKernelVAS()>
c001133e:	83 ec 08             	sub    esp,0x8
c0011341:	57                   	push   edi
c0011342:	50                   	push   eax
c0011343:	e8 be ff ff ff       	call   c0011306 <VAS::getPageTableEntry(unsigned long)>
c0011348:	83 c4 10             	add    esp,0x10
c001134b:	8b 00                	mov    eax,DWORD PTR [eax]
c001134d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011351:	f6 c4 04             	test   ah,0x4
c0011354:	75 5f                	jne    c00113b5 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011356:	80 fa 04             	cmp    dl,0x4
c0011359:	74 78                	je     c00113d3 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c001135b:	80 fa 02             	cmp    dl,0x2
c001135e:	0f 84 88 00 00 00    	je     c00113ec <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011364:	80 fa 03             	cmp    dl,0x3
c0011367:	0f 84 ad 00 00 00    	je     c001141a <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c001136d:	fe ca                	dec    dl
c001136f:	0f 84 92 00 00 00    	je     c0011407 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011375:	43                   	inc    ebx
c0011376:	31 f6                	xor    esi,esi
c0011378:	53                   	push   ebx
c0011379:	e8 4d fc ff ff       	call   c0010fcb <Virt::getPageState(unsigned long)>
c001137e:	5f                   	pop    edi
c001137f:	89 df                	mov    edi,ebx
c0011381:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011385:	c1 e7 0c             	shl    edi,0xc
c0011388:	84 c0                	test   al,al
c001138a:	75 ad                	jne    c0011339 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c001138c:	83 ec 0c             	sub    esp,0xc
c001138f:	68 09 94 03 c0       	push   0xc0039409
c0011394:	e8 55 b9 ff ff       	call   c000ccee <panic(char const*)>
c0011399:	e8 e1 fd ff ff       	call   c001117f <Virt::getAKernelVAS()>
c001139e:	5a                   	pop    edx
c001139f:	59                   	pop    ecx
c00113a0:	57                   	push   edi
c00113a1:	50                   	push   eax
c00113a2:	e8 5f ff ff ff       	call   c0011306 <VAS::getPageTableEntry(unsigned long)>
c00113a7:	83 c4 10             	add    esp,0x10
c00113aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00113ac:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00113b0:	f6 c4 04             	test   ah,0x4
c00113b3:	74 c0                	je     c0011375 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00113b5:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00113b9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00113be:	83 ec 0c             	sub    esp,0xc
c00113c1:	50                   	push   eax
c00113c2:	e8 24 c3 ff ff       	call   c000d6eb <Phys::freePage(unsigned long)>
c00113c7:	83 c4 10             	add    esp,0x10
c00113ca:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00113ce:	80 fa 04             	cmp    dl,0x4
c00113d1:	75 88                	jne    c001135b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00113d3:	89 f0                	mov    eax,esi
c00113d5:	84 c0                	test   al,al
c00113d7:	75 47                	jne    c0011420 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00113d9:	c7 44 24 20 f4 91 03 c0 	mov    DWORD PTR [esp+0x20],0xc00391f4
c00113e1:	83 c4 10             	add    esp,0x10
c00113e4:	5b                   	pop    ebx
c00113e5:	5e                   	pop    esi
c00113e6:	5f                   	pop    edi
c00113e7:	e9 02 b9 ff ff       	jmp    c000ccee <panic(char const*)>
c00113ec:	89 f0                	mov    eax,esi
c00113ee:	84 c0                	test   al,al
c00113f0:	75 15                	jne    c0011407 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00113f2:	83 ec 0c             	sub    esp,0xc
c00113f5:	68 25 94 03 c0       	push   0xc0039425
c00113fa:	e8 ef b8 ff ff       	call   c000ccee <panic(char const*)>
c00113ff:	83 c4 10             	add    esp,0x10
c0011402:	e9 6e ff ff ff       	jmp    c0011375 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011407:	83 ec 08             	sub    esp,0x8
c001140a:	6a 00                	push   0x0
c001140c:	53                   	push   ebx
c001140d:	e8 84 fb ff ff       	call   c0010f96 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011412:	83 c4 10             	add    esp,0x10
c0011415:	e9 5b ff ff ff       	jmp    c0011375 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001141a:	89 f0                	mov    eax,esi
c001141c:	84 c0                	test   al,al
c001141e:	75 15                	jne    c0011435 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011420:	83 ec 08             	sub    esp,0x8
c0011423:	6a 00                	push   0x0
c0011425:	53                   	push   ebx
c0011426:	e8 6b fb ff ff       	call   c0010f96 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001142b:	83 c4 10             	add    esp,0x10
c001142e:	83 c4 10             	add    esp,0x10
c0011431:	5b                   	pop    ebx
c0011432:	5e                   	pop    esi
c0011433:	5f                   	pop    edi
c0011434:	c3                   	ret    
c0011435:	c7 44 24 20 41 94 03 c0 	mov    DWORD PTR [esp+0x20],0xc0039441
c001143d:	83 c4 10             	add    esp,0x10
c0011440:	5b                   	pop    ebx
c0011441:	5e                   	pop    esi
c0011442:	5f                   	pop    edi
c0011443:	e9 a6 b8 ff ff       	jmp    c000ccee <panic(char const*)>

c0011448 <VAS::freeAllocatedPages(unsigned long)>:
c0011448:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001144c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011450:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011454:	74 09                	je     c001145f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011456:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001145a:	e9 c6 fe ff ff       	jmp    c0011325 <Virt::freeKernelVirtualPages(unsigned long)>
c001145f:	c7 44 24 04 18 92 03 c0 	mov    DWORD PTR [esp+0x4],0xc0039218
c0011467:	e9 64 b7 ff ff       	jmp    c000cbd0 <kprintf(char const*, ...)>

c001146c <VAS::virtualToPhysical(unsigned long)>:
c001146c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011470:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011474:	e8 8d fe ff ff       	call   c0011306 <VAS::getPageTableEntry(unsigned long)>
c0011479:	5a                   	pop    edx
c001147a:	8b 00                	mov    eax,DWORD PTR [eax]
c001147c:	59                   	pop    ecx
c001147d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011482:	c3                   	ret    
c0011483:	90                   	nop

c0011484 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011484:	83 ec 0c             	sub    esp,0xc
c0011487:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001148c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011490:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011497:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c001149a:	19 c0                	sbb    eax,eax
c001149c:	83 ca 03             	or     edx,0x3
c001149f:	83 e0 fc             	and    eax,0xfffffffc
c00114a2:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00114a9:	e8 6b d2 00 00       	call   c001e719 <CPU::readCR3()>
c00114ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00114b2:	83 c4 0c             	add    esp,0xc
c00114b5:	e9 83 d2 00 00       	jmp    c001e73d <CPU::writeCR3(unsigned long)>

c00114ba <VAS::~VAS()>:
c00114ba:	83 ec 2c             	sub    esp,0x2c
c00114bd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00114c5:	e8 a8 cb ff ff       	call   c000e072 <lockScheduler()>
c00114ca:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00114cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00114d1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00114d4:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00114da:	83 ec 04             	sub    esp,0x4
c00114dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00114e1:	6a 01                	push   0x1
c00114e3:	50                   	push   eax
c00114e4:	e8 9b ff ff ff       	call   c0011484 <VAS::mapOtherVASIn(bool, VAS*)>
c00114e9:	83 c4 10             	add    esp,0x10
c00114ec:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00114f4:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00114fc:	0f 8f d7 00 00 00    	jg     c00115d9 <VAS::~VAS()+0x11f>
c0011502:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011506:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011509:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001150d:	c1 e2 02             	shl    edx,0x2
c0011510:	01 d0                	add    eax,edx
c0011512:	8b 00                	mov    eax,DWORD PTR [eax]
c0011514:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001151c:	83 e0 01             	and    eax,0x1
c001151f:	0f 84 ab 00 00 00    	je     c00115d0 <VAS::~VAS()+0x116>
c0011525:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001152d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011535:	7f 75                	jg     c00115ac <VAS::~VAS()+0xf2>
c0011537:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001153b:	c1 e0 0a             	shl    eax,0xa
c001153e:	89 c2                	mov    edx,eax
c0011540:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011544:	01 d0                	add    eax,edx
c0011546:	c1 e0 0c             	shl    eax,0xc
c0011549:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001154d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011552:	8b 00                	mov    eax,DWORD PTR [eax]
c0011554:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011557:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001155d:	83 ec 04             	sub    esp,0x4
c0011560:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011564:	6a 01                	push   0x1
c0011566:	50                   	push   eax
c0011567:	e8 6e fd ff ff       	call   c00112da <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001156c:	83 c4 10             	add    esp,0x10
c001156f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011573:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011577:	8b 00                	mov    eax,DWORD PTR [eax]
c0011579:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001157d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011581:	25 01 04 00 00       	and    eax,0x401
c0011586:	3d 01 04 00 00       	cmp    eax,0x401
c001158b:	75 19                	jne    c00115a6 <VAS::~VAS()+0xec>
c001158d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011591:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011596:	83 ec 0c             	sub    esp,0xc
c0011599:	50                   	push   eax
c001159a:	e8 4c c1 ff ff       	call   c000d6eb <Phys::freePage(unsigned long)>
c001159f:	83 c4 10             	add    esp,0x10
c00115a2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00115a6:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00115aa:	eb 81                	jmp    c001152d <VAS::~VAS()+0x73>
c00115ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115b0:	25 00 04 00 00       	and    eax,0x400
c00115b5:	74 19                	je     c00115d0 <VAS::~VAS()+0x116>
c00115b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115bb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00115c0:	83 ec 0c             	sub    esp,0xc
c00115c3:	50                   	push   eax
c00115c4:	e8 22 c1 ff ff       	call   c000d6eb <Phys::freePage(unsigned long)>
c00115c9:	83 c4 10             	add    esp,0x10
c00115cc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00115d0:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00115d4:	e9 1b ff ff ff       	jmp    c00114f4 <VAS::~VAS()+0x3a>
c00115d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115dd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00115e0:	83 ec 0c             	sub    esp,0xc
c00115e3:	50                   	push   eax
c00115e4:	e8 3c fd ff ff       	call   c0011325 <Virt::freeKernelVirtualPages(unsigned long)>
c00115e9:	83 c4 10             	add    esp,0x10
c00115ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00115f3:	83 ec 0c             	sub    esp,0xc
c00115f6:	50                   	push   eax
c00115f7:	e8 ef c0 ff ff       	call   c000d6eb <Phys::freePage(unsigned long)>
c00115fc:	83 c4 10             	add    esp,0x10
c00115ff:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011603:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011607:	c1 e0 02             	shl    eax,0x2
c001160a:	83 ec 08             	sub    esp,0x8
c001160d:	50                   	push   eax
c001160e:	68 3c 92 03 c0       	push   0xc003923c
c0011613:	e8 b8 b5 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0011618:	83 c4 10             	add    esp,0x10
c001161b:	e8 54 ca ff ff       	call   c000e074 <unlockScheduler()>
c0011620:	90                   	nop
c0011621:	83 c4 2c             	add    esp,0x2c
c0011624:	c3                   	ret    
c0011625:	90                   	nop

c0011626 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011626:	55                   	push   ebp
c0011627:	57                   	push   edi
c0011628:	56                   	push   esi
c0011629:	53                   	push   ebx
c001162a:	83 ec 1c             	sub    esp,0x1c
c001162d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011631:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011635:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001163b:	77 08                	ja     c0011645 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001163d:	0f 20 d8             	mov    eax,cr3
c0011640:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011643:	75 47                	jne    c001168c <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011645:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011649:	09 d8                	or     eax,ebx
c001164b:	a9 ff 0f 00 00       	test   eax,0xfff
c0011650:	75 57                	jne    c00116a9 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011652:	89 de                	mov    esi,ebx
c0011654:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011657:	c1 ee 16             	shr    esi,0x16
c001165a:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011661:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011665:	74 54                	je     c00116bb <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011667:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001166b:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011671:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011675:	c1 e6 0c             	shl    esi,0xc
c0011678:	c1 eb 0a             	shr    ebx,0xa
c001167b:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011681:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011684:	83 c4 1c             	add    esp,0x1c
c0011687:	5b                   	pop    ebx
c0011688:	5e                   	pop    esi
c0011689:	5f                   	pop    edi
c001168a:	5d                   	pop    ebp
c001168b:	c3                   	ret    
c001168c:	83 ec 0c             	sub    esp,0xc
c001168f:	68 5c 92 03 c0       	push   0xc003925c
c0011694:	e8 37 b5 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0011699:	83 c4 10             	add    esp,0x10
c001169c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00116a0:	09 d8                	or     eax,ebx
c00116a2:	a9 ff 0f 00 00       	test   eax,0xfff
c00116a7:	74 a9                	je     c0011652 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00116a9:	83 ec 0c             	sub    esp,0xc
c00116ac:	68 c4 92 03 c0       	push   0xc00392c4
c00116b1:	e8 38 b6 ff ff       	call   c000ccee <panic(char const*)>
c00116b6:	83 c4 10             	add    esp,0x10
c00116b9:	eb 97                	jmp    c0011652 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00116bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00116bf:	e8 b1 c0 ff ff       	call   c000d775 <Phys::allocatePage()>
c00116c4:	89 c5                	mov    ebp,eax
c00116c6:	e8 b4 fa ff ff       	call   c001117f <Virt::getAKernelVAS()>
c00116cb:	83 ec 0c             	sub    esp,0xc
c00116ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00116d2:	6a 01                	push   0x1
c00116d4:	e8 16 f9 ff ff       	call   c0010fef <Virt::allocateKernelVirtualPages(int)>
c00116d9:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00116e0:	6a 01                	push   0x1
c00116e2:	50                   	push   eax
c00116e3:	55                   	push   ebp
c00116e4:	81 cd 07 04 00 00    	or     ebp,0x407
c00116ea:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00116ee:	51                   	push   ecx
c00116ef:	e8 1e 02 00 00       	call   c0011912 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00116f4:	83 c4 1c             	add    esp,0x1c
c00116f7:	68 00 10 00 00       	push   0x1000
c00116fc:	6a 00                	push   0x0
c00116fe:	50                   	push   eax
c00116ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011703:	e8 00 ef fe ff       	call   c0000608 <memset>
c0011708:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001170c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001170f:	e8 11 fc ff ff       	call   c0011325 <Virt::freeKernelVirtualPages(unsigned long)>
c0011714:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011718:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001171b:	83 c4 10             	add    esp,0x10
c001171e:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011721:	e9 41 ff ff ff       	jmp    c0011667 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011726 <VAS::allocatePages(int, int)>:
c0011726:	55                   	push   ebp
c0011727:	57                   	push   edi
c0011728:	56                   	push   esi
c0011729:	53                   	push   ebx
c001172a:	83 ec 1c             	sub    esp,0x1c
c001172d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011731:	e8 80 57 00 00       	call   c0016eb6 <thisCPU()>
c0011736:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001173c:	83 e0 01             	and    eax,0x1
c001173f:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011743:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011747:	0f 85 d7 00 00 00    	jne    c0011824 <VAS::allocatePages(int, int)+0xfe>
c001174d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011750:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011754:	85 c0                	test   eax,eax
c0011756:	0f 84 ac 00 00 00    	je     c0011808 <VAS::allocatePages(int, int)+0xe2>
c001175c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011760:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011764:	c1 e6 0c             	shl    esi,0xc
c0011767:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001176b:	85 c0                	test   eax,eax
c001176d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011770:	7e 33                	jle    c00117a5 <VAS::allocatePages(int, int)+0x7f>
c0011772:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011776:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001177a:	81 cd 00 04 00 00    	or     ebp,0x400
c0011780:	e8 f0 bf ff ff       	call   c000d775 <Phys::allocatePage()>
c0011785:	55                   	push   ebp
c0011786:	53                   	push   ebx
c0011787:	50                   	push   eax
c0011788:	57                   	push   edi
c0011789:	e8 98 fe ff ff       	call   c0011626 <VAS::mapPage(unsigned long, unsigned long, int)>
c001178e:	83 c4 10             	add    esp,0x10
c0011791:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011796:	74 03                	je     c001179b <VAS::allocatePages(int, int)+0x75>
c0011798:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001179b:	81 c3 00 10 00 00    	add    ebx,0x1000
c00117a1:	39 de                	cmp    esi,ebx
c00117a3:	75 db                	jne    c0011780 <VAS::allocatePages(int, int)+0x5a>
c00117a5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00117aa:	74 3f                	je     c00117eb <VAS::allocatePages(int, int)+0xc5>
c00117ac:	c1 ee 0a             	shr    esi,0xa
c00117af:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00117b3:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00117b9:	c1 eb 0a             	shr    ebx,0xa
c00117bc:	81 ee 00 00 40 00    	sub    esi,0x400000
c00117c2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00117c8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00117ce:	39 f3                	cmp    ebx,esi
c00117d0:	77 0d                	ja     c00117df <VAS::allocatePages(int, int)+0xb9>
c00117d2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00117d5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00117db:	39 de                	cmp    esi,ebx
c00117dd:	73 f3                	jae    c00117d2 <VAS::allocatePages(int, int)+0xac>
c00117df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117e3:	83 c4 1c             	add    esp,0x1c
c00117e6:	5b                   	pop    ebx
c00117e7:	5e                   	pop    esi
c00117e8:	5f                   	pop    edi
c00117e9:	5d                   	pop    ebp
c00117ea:	c3                   	ret    
c00117eb:	e8 29 cf 00 00       	call   c001e719 <CPU::readCR3()>
c00117f0:	83 ec 0c             	sub    esp,0xc
c00117f3:	50                   	push   eax
c00117f4:	e8 44 cf 00 00       	call   c001e73d <CPU::writeCR3(unsigned long)>
c00117f9:	83 c4 10             	add    esp,0x10
c00117fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011800:	83 c4 1c             	add    esp,0x1c
c0011803:	5b                   	pop    ebx
c0011804:	5e                   	pop    esi
c0011805:	5f                   	pop    edi
c0011806:	5d                   	pop    ebp
c0011807:	c3                   	ret    
c0011808:	83 ec 0c             	sub    esp,0xc
c001180b:	68 e8 92 03 c0       	push   0xc00392e8
c0011810:	e8 d9 b4 ff ff       	call   c000ccee <panic(char const*)>
c0011815:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011818:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001181c:	83 c4 10             	add    esp,0x10
c001181f:	e9 38 ff ff ff       	jmp    c001175c <VAS::allocatePages(int, int)+0x36>
c0011824:	83 ec 0c             	sub    esp,0xc
c0011827:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001182b:	e8 bf f7 ff ff       	call   c0010fef <Virt::allocateKernelVirtualPages(int)>
c0011830:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011834:	83 c4 10             	add    esp,0x10
c0011837:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001183c:	0f 87 94 00 00 00    	ja     c00118d6 <VAS::allocatePages(int, int)+0x1b0>
c0011842:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011846:	85 d2                	test   edx,edx
c0011848:	7e 3c                	jle    c0011886 <VAS::allocatePages(int, int)+0x160>
c001184a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001184e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011852:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011856:	c1 e5 0c             	shl    ebp,0xc
c0011859:	81 ce 00 04 00 00    	or     esi,0x400
c001185f:	01 dd                	add    ebp,ebx
c0011861:	e8 0f bf ff ff       	call   c000d775 <Phys::allocatePage()>
c0011866:	56                   	push   esi
c0011867:	53                   	push   ebx
c0011868:	50                   	push   eax
c0011869:	57                   	push   edi
c001186a:	e8 b7 fd ff ff       	call   c0011626 <VAS::mapPage(unsigned long, unsigned long, int)>
c001186f:	83 c4 10             	add    esp,0x10
c0011872:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011877:	74 03                	je     c001187c <VAS::allocatePages(int, int)+0x156>
c0011879:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001187c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011882:	39 dd                	cmp    ebp,ebx
c0011884:	75 db                	jne    c0011861 <VAS::allocatePages(int, int)+0x13b>
c0011886:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001188b:	0f 84 5a ff ff ff    	je     c00117eb <VAS::allocatePages(int, int)+0xc5>
c0011891:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011895:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011899:	89 d3                	mov    ebx,edx
c001189b:	c1 e0 0c             	shl    eax,0xc
c001189e:	c1 eb 0a             	shr    ebx,0xa
c00118a1:	01 d0                	add    eax,edx
c00118a3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00118a9:	c1 e8 0a             	shr    eax,0xa
c00118ac:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00118b2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118b7:	2d 00 00 40 00       	sub    eax,0x400000
c00118bc:	39 c3                	cmp    ebx,eax
c00118be:	0f 87 1b ff ff ff    	ja     c00117df <VAS::allocatePages(int, int)+0xb9>
c00118c4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00118c7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00118cd:	39 d8                	cmp    eax,ebx
c00118cf:	73 f3                	jae    c00118c4 <VAS::allocatePages(int, int)+0x19e>
c00118d1:	e9 09 ff ff ff       	jmp    c00117df <VAS::allocatePages(int, int)+0xb9>
c00118d6:	e8 db 55 00 00       	call   c0016eb6 <thisCPU()>
c00118db:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00118e2:	0f 84 5a ff ff ff    	je     c0011842 <VAS::allocatePages(int, int)+0x11c>
c00118e8:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00118f0:	e9 4d ff ff ff       	jmp    c0011842 <VAS::allocatePages(int, int)+0x11c>
c00118f5:	90                   	nop

c00118f6 <VAS::setCPUSpecific(unsigned long)>:
c00118f6:	83 ec 0c             	sub    esp,0xc
c00118f9:	6a 05                	push   0x5
c00118fb:	68 00 00 40 c2       	push   0xc2400000
c0011900:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011908:	e8 19 fd ff ff       	call   c0011626 <VAS::mapPage(unsigned long, unsigned long, int)>
c001190d:	83 c4 1c             	add    esp,0x1c
c0011910:	c3                   	ret    
c0011911:	90                   	nop

c0011912 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011912:	55                   	push   ebp
c0011913:	57                   	push   edi
c0011914:	56                   	push   esi
c0011915:	53                   	push   ebx
c0011916:	83 ec 1c             	sub    esp,0x1c
c0011919:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001191d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011921:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011925:	e8 8c 55 00 00       	call   c0016eb6 <thisCPU()>
c001192a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011930:	83 e0 01             	and    eax,0x1
c0011933:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011937:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001193b:	85 c0                	test   eax,eax
c001193d:	7e 39                	jle    c0011978 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c001193f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011943:	89 f3                	mov    ebx,esi
c0011945:	c1 e0 0c             	shl    eax,0xc
c0011948:	01 f0                	add    eax,esi
c001194a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001194e:	55                   	push   ebp
c001194f:	53                   	push   ebx
c0011950:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011954:	29 f0                	sub    eax,esi
c0011956:	01 d8                	add    eax,ebx
c0011958:	50                   	push   eax
c0011959:	57                   	push   edi
c001195a:	e8 c7 fc ff ff       	call   c0011626 <VAS::mapPage(unsigned long, unsigned long, int)>
c001195f:	83 c4 10             	add    esp,0x10
c0011962:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011967:	74 03                	je     c001196c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c0011969:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001196c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011972:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011976:	75 d6                	jne    c001194e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c0011978:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001197d:	74 42                	je     c00119c1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c001197f:	89 f3                	mov    ebx,esi
c0011981:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011985:	c1 eb 0a             	shr    ebx,0xa
c0011988:	c1 e0 0c             	shl    eax,0xc
c001198b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011991:	01 f0                	add    eax,esi
c0011993:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011999:	c1 e8 0a             	shr    eax,0xa
c001199c:	25 00 f0 ff ff       	and    eax,0xfffff000
c00119a1:	2d 00 00 40 00       	sub    eax,0x400000
c00119a6:	39 c3                	cmp    ebx,eax
c00119a8:	77 0d                	ja     c00119b7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c00119aa:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00119ad:	81 c3 00 10 00 00    	add    ebx,0x1000
c00119b3:	39 d8                	cmp    eax,ebx
c00119b5:	73 f3                	jae    c00119aa <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c00119b7:	83 c4 1c             	add    esp,0x1c
c00119ba:	89 f0                	mov    eax,esi
c00119bc:	5b                   	pop    ebx
c00119bd:	5e                   	pop    esi
c00119be:	5f                   	pop    edi
c00119bf:	5d                   	pop    ebp
c00119c0:	c3                   	ret    
c00119c1:	e8 53 cd 00 00       	call   c001e719 <CPU::readCR3()>
c00119c6:	83 ec 0c             	sub    esp,0xc
c00119c9:	50                   	push   eax
c00119ca:	e8 6e cd 00 00       	call   c001e73d <CPU::writeCR3(unsigned long)>
c00119cf:	89 f0                	mov    eax,esi
c00119d1:	83 c4 10             	add    esp,0x10
c00119d4:	83 c4 1c             	add    esp,0x1c
c00119d7:	5b                   	pop    ebx
c00119d8:	5e                   	pop    esi
c00119d9:	5f                   	pop    edi
c00119da:	5d                   	pop    ebp
c00119db:	c3                   	ret    

c00119dc <VAS::VAS(VAS*)>:
c00119dc:	53                   	push   ebx
c00119dd:	83 ec 38             	sub    esp,0x38
c00119e0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00119e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00119eb:	e8 a9 c6 ff ff       	call   c000e099 <lockStuff()>
c00119f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00119f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00119f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00119fb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00119fe:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011a02:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c0011a05:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011a09:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011a0c:	e8 64 bd ff ff       	call   c000d775 <Phys::allocatePage()>
c0011a11:	89 c2                	mov    edx,eax
c0011a13:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011a17:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011a1a:	e8 60 f7 ff ff       	call   c001117f <Virt::getAKernelVAS()>
c0011a1f:	89 c3                	mov    ebx,eax
c0011a21:	83 ec 0c             	sub    esp,0xc
c0011a24:	6a 01                	push   0x1
c0011a26:	e8 c4 f5 ff ff       	call   c0010fef <Virt::allocateKernelVirtualPages(int)>
c0011a2b:	83 c4 10             	add    esp,0x10
c0011a2e:	89 c2                	mov    edx,eax
c0011a30:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011a34:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011a37:	83 ec 0c             	sub    esp,0xc
c0011a3a:	6a 03                	push   0x3
c0011a3c:	6a 01                	push   0x1
c0011a3e:	52                   	push   edx
c0011a3f:	50                   	push   eax
c0011a40:	53                   	push   ebx
c0011a41:	e8 cc fe ff ff       	call   c0011912 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a46:	83 c4 20             	add    esp,0x20
c0011a49:	89 c2                	mov    edx,eax
c0011a4b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011a4f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011a52:	83 ec 04             	sub    esp,0x4
c0011a55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011a59:	6a 01                	push   0x1
c0011a5b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011a5f:	e8 20 fa ff ff       	call   c0011484 <VAS::mapOtherVASIn(bool, VAS*)>
c0011a64:	83 c4 10             	add    esp,0x10
c0011a67:	83 ec 0c             	sub    esp,0xc
c0011a6a:	6a 01                	push   0x1
c0011a6c:	e8 7e f5 ff ff       	call   c0010fef <Virt::allocateKernelVirtualPages(int)>
c0011a71:	83 c4 10             	add    esp,0x10
c0011a74:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011a78:	83 ec 0c             	sub    esp,0xc
c0011a7b:	6a 01                	push   0x1
c0011a7d:	e8 6d f5 ff ff       	call   c0010fef <Virt::allocateKernelVirtualPages(int)>
c0011a82:	83 c4 10             	add    esp,0x10
c0011a85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011a89:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011a91:	81 7c 24 2c ff 03 00 00 	cmp    DWORD PTR [esp+0x2c],0x3ff
c0011a99:	0f 8f 5e 02 00 00    	jg     c0011cfd <VAS::VAS(VAS*)+0x321>
c0011a9f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011aa4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011aa6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011aa9:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011aaf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011ab2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011ab6:	c1 e2 02             	shl    edx,0x2
c0011ab9:	01 d0                	add    eax,edx
c0011abb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011abd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011ac1:	83 ec 08             	sub    esp,0x8
c0011ac4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011ac8:	68 5b 94 03 c0       	push   0xc003945b
c0011acd:	e8 fe b0 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0011ad2:	83 c4 10             	add    esp,0x10
c0011ad5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011ad9:	25 01 04 00 00       	and    eax,0x401
c0011ade:	3d 01 04 00 00       	cmp    eax,0x401
c0011ae3:	0f 85 e5 01 00 00    	jne    c0011cce <VAS::VAS(VAS*)+0x2f2>
c0011ae9:	83 ec 0c             	sub    esp,0xc
c0011aec:	68 6c 94 03 c0       	push   0xc003946c
c0011af1:	e8 da b0 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0011af6:	83 c4 10             	add    esp,0x10
c0011af9:	e8 77 bc ff ff       	call   c000d775 <Phys::allocatePage()>
c0011afe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011b02:	83 ec 08             	sub    esp,0x8
c0011b05:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011b09:	68 82 94 03 c0       	push   0xc0039482
c0011b0e:	e8 bd b0 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0011b13:	83 c4 10             	add    esp,0x10
c0011b16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011b1a:	25 ff 0f 00 00       	and    eax,0xfff
c0011b1f:	89 c1                	mov    ecx,eax
c0011b21:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011b25:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011b28:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011b2c:	c1 e2 02             	shl    edx,0x2
c0011b2f:	01 c2                	add    edx,eax
c0011b31:	89 c8                	mov    eax,ecx
c0011b33:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0011b37:	89 02                	mov    DWORD PTR [edx],eax
c0011b39:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0011b41:	81 7c 24 28 ff 03 00 00 	cmp    DWORD PTR [esp+0x28],0x3ff
c0011b49:	0f 8f a5 01 00 00    	jg     c0011cf4 <VAS::VAS(VAS*)+0x318>
c0011b4f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b53:	c1 e0 0a             	shl    eax,0xa
c0011b56:	89 c2                	mov    edx,eax
c0011b58:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b5c:	01 d0                	add    eax,edx
c0011b5e:	c1 e0 0c             	shl    eax,0xc
c0011b61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011b65:	83 ec 08             	sub    esp,0x8
c0011b68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011b6c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011b70:	e8 91 f7 ff ff       	call   c0011306 <VAS::getPageTableEntry(unsigned long)>
c0011b75:	83 c4 10             	add    esp,0x10
c0011b78:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011b7e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011b83:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b85:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011b88:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011b8e:	83 ec 04             	sub    esp,0x4
c0011b91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011b95:	6a 01                	push   0x1
c0011b97:	50                   	push   eax
c0011b98:	e8 3d f7 ff ff       	call   c00112da <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011b9d:	83 c4 10             	add    esp,0x10
c0011ba0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ba4:	83 ec 04             	sub    esp,0x4
c0011ba7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011bab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011baf:	68 14 93 03 c0       	push   0xc0039314
c0011bb4:	e8 17 b0 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0011bb9:	83 c4 10             	add    esp,0x10
c0011bbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bc0:	25 01 04 00 00       	and    eax,0x401
c0011bc5:	3d 01 04 00 00       	cmp    eax,0x401
c0011bca:	0f 85 db 00 00 00    	jne    c0011cab <VAS::VAS(VAS*)+0x2cf>
c0011bd0:	83 ec 0c             	sub    esp,0xc
c0011bd3:	68 91 94 03 c0       	push   0xc0039491
c0011bd8:	e8 f3 af ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0011bdd:	83 c4 10             	add    esp,0x10
c0011be0:	e8 90 bb ff ff       	call   c000d775 <Phys::allocatePage()>
c0011be5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011be9:	83 ec 08             	sub    esp,0x8
c0011bec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011bf0:	68 a0 94 03 c0       	push   0xc00394a0
c0011bf5:	e8 d6 af ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0011bfa:	83 c4 10             	add    esp,0x10
c0011bfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c01:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c06:	83 ec 08             	sub    esp,0x8
c0011c09:	50                   	push   eax
c0011c0a:	68 b4 94 03 c0       	push   0xc00394b4
c0011c0f:	e8 bc af ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0011c14:	83 c4 10             	add    esp,0x10
c0011c17:	e8 63 f5 ff ff       	call   c001117f <Virt::getAKernelVAS()>
c0011c1c:	83 ec 0c             	sub    esp,0xc
c0011c1f:	6a 03                	push   0x3
c0011c21:	6a 01                	push   0x1
c0011c23:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011c27:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011c2b:	50                   	push   eax
c0011c2c:	e8 e1 fc ff ff       	call   c0011912 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011c31:	83 c4 20             	add    esp,0x20
c0011c34:	e8 46 f5 ff ff       	call   c001117f <Virt::getAKernelVAS()>
c0011c39:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011c3d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011c43:	83 ec 0c             	sub    esp,0xc
c0011c46:	6a 03                	push   0x3
c0011c48:	6a 01                	push   0x1
c0011c4a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011c4e:	52                   	push   edx
c0011c4f:	50                   	push   eax
c0011c50:	e8 bd fc ff ff       	call   c0011912 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011c55:	83 c4 20             	add    esp,0x20
c0011c58:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011c5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011c60:	83 ec 04             	sub    esp,0x4
c0011c63:	68 00 10 00 00       	push   0x1000
c0011c68:	52                   	push   edx
c0011c69:	50                   	push   eax
c0011c6a:	e8 63 e9 fe ff       	call   c00005d2 <memcpy>
c0011c6f:	83 c4 10             	add    esp,0x10
c0011c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c76:	25 ff 0f 00 00       	and    eax,0xfff
c0011c7b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0011c7f:	89 c2                	mov    edx,eax
c0011c81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c85:	89 10                	mov    DWORD PTR [eax],edx
c0011c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c8b:	25 ff 0f 00 00       	and    eax,0xfff
c0011c90:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0011c94:	83 ec 04             	sub    esp,0x4
c0011c97:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011c9b:	50                   	push   eax
c0011c9c:	68 38 93 03 c0       	push   0xc0039338
c0011ca1:	e8 2a af ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0011ca6:	83 c4 10             	add    esp,0x10
c0011ca9:	eb 1a                	jmp    c0011cc5 <VAS::VAS(VAS*)+0x2e9>
c0011cab:	83 ec 0c             	sub    esp,0xc
c0011cae:	68 c8 94 03 c0       	push   0xc00394c8
c0011cb3:	e8 18 af ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0011cb8:	83 c4 10             	add    esp,0x10
c0011cbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cbf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011cc3:	89 10                	mov    DWORD PTR [eax],edx
c0011cc5:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0011cc9:	e9 73 fe ff ff       	jmp    c0011b41 <VAS::VAS(VAS*)+0x165>
c0011cce:	83 ec 0c             	sub    esp,0xc
c0011cd1:	68 cc 94 03 c0       	push   0xc00394cc
c0011cd6:	e8 f5 ae ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0011cdb:	83 c4 10             	add    esp,0x10
c0011cde:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011ce2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011ce5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011ce9:	c1 e2 02             	shl    edx,0x2
c0011cec:	01 c2                	add    edx,eax
c0011cee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cf2:	89 02                	mov    DWORD PTR [edx],eax
c0011cf4:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011cf8:	e9 94 fd ff ff       	jmp    c0011a91 <VAS::VAS(VAS*)+0xb5>
c0011cfd:	83 ec 0c             	sub    esp,0xc
c0011d00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011d04:	e8 1c f6 ff ff       	call   c0011325 <Virt::freeKernelVirtualPages(unsigned long)>
c0011d09:	83 c4 10             	add    esp,0x10
c0011d0c:	83 ec 0c             	sub    esp,0xc
c0011d0f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011d13:	e8 0d f6 ff ff       	call   c0011325 <Virt::freeKernelVirtualPages(unsigned long)>
c0011d18:	83 c4 10             	add    esp,0x10
c0011d1b:	e8 0b c7 ff ff       	call   c000e42b <unlockStuff()>
c0011d20:	90                   	nop
c0011d21:	83 c4 38             	add    esp,0x38
c0011d24:	5b                   	pop    ebx
c0011d25:	c3                   	ret    

c0011d26 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011d26:	55                   	push   ebp
c0011d27:	57                   	push   edi
c0011d28:	56                   	push   esi
c0011d29:	53                   	push   ebx
c0011d2a:	83 ec 1c             	sub    esp,0x1c
c0011d2d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d31:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011d35:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011d39:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011d3d:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d42:	75 4a                	jne    c0011d8e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011d44:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011d48:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011d4b:	c1 eb 16             	shr    ebx,0x16
c0011d4e:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011d55:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011d59:	74 4d                	je     c0011da8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011d5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d5f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011d63:	c1 e8 0a             	shr    eax,0xa
c0011d66:	80 fa 01             	cmp    dl,0x1
c0011d69:	19 d2                	sbb    edx,edx
c0011d6b:	c1 e3 0c             	shl    ebx,0xc
c0011d6e:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011d72:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011d78:	25 fc 0f 00 00       	and    eax,0xffc
c0011d7d:	01 d8                	add    eax,ebx
c0011d7f:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011d86:	83 c4 1c             	add    esp,0x1c
c0011d89:	5b                   	pop    ebx
c0011d8a:	5e                   	pop    esi
c0011d8b:	5f                   	pop    edi
c0011d8c:	5d                   	pop    ebp
c0011d8d:	c3                   	ret    
c0011d8e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011d92:	83 ec 0c             	sub    esp,0xc
c0011d95:	68 5c 93 03 c0       	push   0xc003935c
c0011d9a:	e8 4f af ff ff       	call   c000ccee <panic(char const*)>
c0011d9f:	83 c4 10             	add    esp,0x10
c0011da2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011da6:	eb 9c                	jmp    c0011d44 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011da8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011dac:	e8 c4 b9 ff ff       	call   c000d775 <Phys::allocatePage()>
c0011db1:	89 c5                	mov    ebp,eax
c0011db3:	e8 c7 f3 ff ff       	call   c001117f <Virt::getAKernelVAS()>
c0011db8:	83 ec 0c             	sub    esp,0xc
c0011dbb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011dbf:	6a 01                	push   0x1
c0011dc1:	e8 29 f2 ff ff       	call   c0010fef <Virt::allocateKernelVirtualPages(int)>
c0011dc6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011dcd:	6a 01                	push   0x1
c0011dcf:	50                   	push   eax
c0011dd0:	55                   	push   ebp
c0011dd1:	81 cd 07 04 00 00    	or     ebp,0x407
c0011dd7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011ddb:	51                   	push   ecx
c0011ddc:	e8 31 fb ff ff       	call   c0011912 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011de1:	83 c4 1c             	add    esp,0x1c
c0011de4:	68 00 10 00 00       	push   0x1000
c0011de9:	6a 00                	push   0x0
c0011deb:	50                   	push   eax
c0011dec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011df0:	e8 13 e8 fe ff       	call   c0000608 <memset>
c0011df5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011df9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011dfc:	e8 24 f5 ff ff       	call   c0011325 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e01:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011e04:	83 c4 10             	add    esp,0x10
c0011e07:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011e0a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e0e:	e9 48 ff ff ff       	jmp    c0011d5b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0011e13:	90                   	nop

c0011e14 <VAS::VAS(bool)>:
c0011e14:	53                   	push   ebx
c0011e15:	83 ec 28             	sub    esp,0x28
c0011e18:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e1c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011e20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e24:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e2f:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011e33:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011e36:	e8 3a b9 ff ff       	call   c000d775 <Phys::allocatePage()>
c0011e3b:	89 c2                	mov    edx,eax
c0011e3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e41:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011e44:	e8 36 f3 ff ff       	call   c001117f <Virt::getAKernelVAS()>
c0011e49:	89 c3                	mov    ebx,eax
c0011e4b:	83 ec 0c             	sub    esp,0xc
c0011e4e:	6a 01                	push   0x1
c0011e50:	e8 9a f1 ff ff       	call   c0010fef <Virt::allocateKernelVirtualPages(int)>
c0011e55:	83 c4 10             	add    esp,0x10
c0011e58:	89 c2                	mov    edx,eax
c0011e5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e5e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011e61:	83 ec 0c             	sub    esp,0xc
c0011e64:	6a 03                	push   0x3
c0011e66:	6a 01                	push   0x1
c0011e68:	52                   	push   edx
c0011e69:	50                   	push   eax
c0011e6a:	53                   	push   ebx
c0011e6b:	e8 a2 fa ff ff       	call   c0011912 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e70:	83 c4 20             	add    esp,0x20
c0011e73:	89 c2                	mov    edx,eax
c0011e75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e79:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011e7c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e84:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011e8c:	7f 1c                	jg     c0011eaa <VAS::VAS(bool)+0x96>
c0011e8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011e95:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e99:	c1 e2 02             	shl    edx,0x2
c0011e9c:	01 d0                	add    eax,edx
c0011e9e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011ea4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011ea8:	eb da                	jmp    c0011e84 <VAS::VAS(bool)+0x70>
c0011eaa:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011eb2:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011eba:	7f 71                	jg     c0011f2d <VAS::VAS(bool)+0x119>
c0011ebc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ec0:	2d 00 02 00 00       	sub    eax,0x200
c0011ec5:	c1 e0 0c             	shl    eax,0xc
c0011ec8:	83 c8 03             	or     eax,0x3
c0011ecb:	89 c3                	mov    ebx,eax
c0011ecd:	e8 e4 4f 00 00       	call   c0016eb6 <thisCPU()>
c0011ed2:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011ed8:	83 e0 10             	and    eax,0x10
c0011edb:	84 c0                	test   al,al
c0011edd:	74 07                	je     c0011ee6 <VAS::VAS(bool)+0xd2>
c0011edf:	b8 00 01 00 00       	mov    eax,0x100
c0011ee4:	eb 05                	jmp    c0011eeb <VAS::VAS(bool)+0xd7>
c0011ee6:	b8 00 00 00 00       	mov    eax,0x0
c0011eeb:	09 d8                	or     eax,ebx
c0011eed:	89 c1                	mov    ecx,eax
c0011eef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ef3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011ef6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011efa:	c1 e2 02             	shl    edx,0x2
c0011efd:	01 d0                	add    eax,edx
c0011eff:	89 ca                	mov    edx,ecx
c0011f01:	89 10                	mov    DWORD PTR [eax],edx
c0011f03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f07:	2d 40 03 00 00       	sub    eax,0x340
c0011f0c:	83 f8 7f             	cmp    eax,0x7f
c0011f0f:	77 16                	ja     c0011f27 <VAS::VAS(bool)+0x113>
c0011f11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f15:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011f18:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f1c:	c1 e2 02             	shl    edx,0x2
c0011f1f:	01 d0                	add    eax,edx
c0011f21:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f27:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f2b:	eb 85                	jmp    c0011eb2 <VAS::VAS(bool)+0x9e>
c0011f2d:	e8 84 4f 00 00       	call   c0016eb6 <thisCPU()>
c0011f32:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f38:	83 e0 10             	and    eax,0x10
c0011f3b:	84 c0                	test   al,al
c0011f3d:	74 07                	je     c0011f46 <VAS::VAS(bool)+0x132>
c0011f3f:	b8 03 41 00 00       	mov    eax,0x4103
c0011f44:	eb 05                	jmp    c0011f4b <VAS::VAS(bool)+0x137>
c0011f46:	b8 03 40 00 00       	mov    eax,0x4003
c0011f4b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f4f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011f52:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011f58:	89 02                	mov    DWORD PTR [edx],eax
c0011f5a:	e8 57 4f 00 00       	call   c0016eb6 <thisCPU()>
c0011f5f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011f65:	83 ec 08             	sub    esp,0x8
c0011f68:	50                   	push   eax
c0011f69:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011f6d:	e8 84 f9 ff ff       	call   c00118f6 <VAS::setCPUSpecific(unsigned long)>
c0011f72:	83 c4 10             	add    esp,0x10
c0011f75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f79:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c0011f7c:	e8 35 4f 00 00       	call   c0016eb6 <thisCPU()>
c0011f81:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f87:	83 e0 10             	and    eax,0x10
c0011f8a:	84 c0                	test   al,al
c0011f8c:	74 07                	je     c0011f95 <VAS::VAS(bool)+0x181>
c0011f8e:	b8 00 01 00 00       	mov    eax,0x100
c0011f93:	eb 05                	jmp    c0011f9a <VAS::VAS(bool)+0x186>
c0011f95:	b8 00 00 00 00       	mov    eax,0x0
c0011f9a:	09 d8                	or     eax,ebx
c0011f9c:	89 c2                	mov    edx,eax
c0011f9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fa2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011fa5:	05 fc 0f 00 00       	add    eax,0xffc
c0011faa:	83 ca 03             	or     edx,0x3
c0011fad:	89 10                	mov    DWORD PTR [eax],edx
c0011faf:	e8 02 4f 00 00       	call   c0016eb6 <thisCPU()>
c0011fb4:	83 ec 0c             	sub    esp,0xc
c0011fb7:	50                   	push   eax
c0011fb8:	e8 af 17 00 00       	call   c001376c <Device::getName()>
c0011fbd:	83 c4 10             	add    esp,0x10
c0011fc0:	83 ec 08             	sub    esp,0x8
c0011fc3:	68 dc 94 03 c0       	push   0xc00394dc
c0011fc8:	50                   	push   eax
c0011fc9:	e8 2a e7 fe ff       	call   c00006f8 <strcmp>
c0011fce:	83 c4 10             	add    esp,0x10
c0011fd1:	85 c0                	test   eax,eax
c0011fd3:	0f 94 c0             	sete   al
c0011fd6:	84 c0                	test   al,al
c0011fd8:	74 64                	je     c001203e <VAS::VAS(bool)+0x22a>
c0011fda:	e8 76 c0 ff ff       	call   c000e055 <disableIRQs()>
c0011fdf:	e8 d2 4e 00 00       	call   c0016eb6 <thisCPU()>
c0011fe4:	05 7c 09 00 00       	add    eax,0x97c
c0011fe9:	83 ec 0c             	sub    esp,0xc
c0011fec:	50                   	push   eax
c0011fed:	e8 32 a7 ff ff       	call   c000c724 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0011ff2:	83 c4 10             	add    esp,0x10
c0011ff5:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ffa:	89 c3                	mov    ebx,eax
c0011ffc:	e8 b5 4e 00 00       	call   c0016eb6 <thisCPU()>
c0012001:	05 7c 09 00 00       	add    eax,0x97c
c0012006:	83 ec 0c             	sub    esp,0xc
c0012009:	50                   	push   eax
c001200a:	e8 15 a7 ff ff       	call   c000c724 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001200f:	83 c4 10             	add    esp,0x10
c0012012:	83 ec 08             	sub    esp,0x8
c0012015:	50                   	push   eax
c0012016:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001201a:	e8 e7 f2 ff ff       	call   c0011306 <VAS::getPageTableEntry(unsigned long)>
c001201f:	83 c4 10             	add    esp,0x10
c0012022:	8b 00                	mov    eax,DWORD PTR [eax]
c0012024:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012029:	6a 11                	push   0x11
c001202b:	53                   	push   ebx
c001202c:	50                   	push   eax
c001202d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012031:	e8 f0 f5 ff ff       	call   c0011626 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012036:	83 c4 10             	add    esp,0x10
c0012039:	e8 25 c0 ff ff       	call   c000e063 <enableIRQs()>
c001203e:	90                   	nop
c001203f:	83 c4 28             	add    esp,0x28
c0012042:	5b                   	pop    ebx
c0012043:	c3                   	ret    

c0012044 <mapVASFirstTime>:
c0012044:	55                   	push   ebp
c0012045:	57                   	push   edi
c0012046:	56                   	push   esi
c0012047:	53                   	push   ebx
c0012048:	83 ec 0c             	sub    esp,0xc
c001204b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012050:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012053:	4a                   	dec    edx
c0012054:	0f 84 99 00 00 00    	je     c00120f3 <mapVASFirstTime+0xaf>
c001205a:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001205d:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012060:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012065:	c1 e5 15             	shl    ebp,0x15
c0012068:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c001206d:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012073:	29 eb                	sub    ebx,ebp
c0012075:	29 ee                	sub    esi,ebp
c0012077:	e8 f9 b6 ff ff       	call   c000d775 <Phys::allocatePage()>
c001207c:	83 ec 0c             	sub    esp,0xc
c001207f:	68 03 04 00 00       	push   0x403
c0012084:	6a 01                	push   0x1
c0012086:	53                   	push   ebx
c0012087:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001208d:	50                   	push   eax
c001208e:	57                   	push   edi
c001208f:	e8 7e f8 ff ff       	call   c0011912 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012094:	83 c4 20             	add    esp,0x20
c0012097:	39 f3                	cmp    ebx,esi
c0012099:	75 dc                	jne    c0012077 <mapVASFirstTime+0x33>
c001209b:	be 00 f0 ff 01       	mov    esi,0x1fff000
c00120a0:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c00120a5:	29 ee                	sub    esi,ebp
c00120a7:	29 e8                	sub    eax,ebp
c00120a9:	89 c5                	mov    ebp,eax
c00120ab:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c00120af:	19 db                	sbb    ebx,ebx
c00120b1:	e8 bf b6 ff ff       	call   c000d775 <Phys::allocatePage()>
c00120b6:	83 e3 04             	and    ebx,0x4
c00120b9:	83 ec 0c             	sub    esp,0xc
c00120bc:	81 c3 03 04 00 00    	add    ebx,0x403
c00120c2:	53                   	push   ebx
c00120c3:	6a 01                	push   0x1
c00120c5:	56                   	push   esi
c00120c6:	81 ee 00 10 00 00    	sub    esi,0x1000
c00120cc:	50                   	push   eax
c00120cd:	57                   	push   edi
c00120ce:	e8 3f f8 ff ff       	call   c0011912 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00120d3:	83 c4 20             	add    esp,0x20
c00120d6:	39 f5                	cmp    ebp,esi
c00120d8:	75 d1                	jne    c00120ab <mapVASFirstTime+0x67>
c00120da:	e8 3a c6 00 00       	call   c001e719 <CPU::readCR3()>
c00120df:	83 ec 0c             	sub    esp,0xc
c00120e2:	50                   	push   eax
c00120e3:	e8 55 c6 00 00       	call   c001e73d <CPU::writeCR3(unsigned long)>
c00120e8:	83 c4 10             	add    esp,0x10
c00120eb:	83 c4 0c             	add    esp,0xc
c00120ee:	5b                   	pop    ebx
c00120ef:	5e                   	pop    esi
c00120f0:	5f                   	pop    edi
c00120f1:	5d                   	pop    ebp
c00120f2:	c3                   	ret    
c00120f3:	83 ec 0c             	sub    esp,0xc
c00120f6:	68 ea 94 03 c0       	push   0xc00394ea
c00120fb:	e8 d0 aa ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0012100:	83 c4 10             	add    esp,0x10
c0012103:	83 c4 0c             	add    esp,0xc
c0012106:	5b                   	pop    ebx
c0012107:	5e                   	pop    esi
c0012108:	5f                   	pop    edi
c0012109:	5d                   	pop    ebp
c001210a:	c3                   	ret    

c001210b <__cxa_atexit>:
c001210b:	31 c0                	xor    eax,eax
c001210d:	c3                   	ret    

c001210e <__cxa_finalize>:
c001210e:	c3                   	ret    

c001210f <__stack_chk_fail>:
c001210f:	55                   	push   ebp
c0012110:	89 e5                	mov    ebp,esp
c0012112:	83 ec 10             	sub    esp,0x10
c0012115:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012118:	68 03 95 03 c0       	push   0xc0039503
c001211d:	e8 ae aa ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0012122:	58                   	pop    eax
c0012123:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012126:	5a                   	pop    edx
c0012127:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001212a:	68 03 95 03 c0       	push   0xc0039503
c001212f:	e8 9c aa ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0012134:	59                   	pop    ecx
c0012135:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012138:	5a                   	pop    edx
c0012139:	8b 00                	mov    eax,DWORD PTR [eax]
c001213b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001213e:	68 03 95 03 c0       	push   0xc0039503
c0012143:	e8 88 aa ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0012148:	59                   	pop    ecx
c0012149:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001214c:	5a                   	pop    edx
c001214d:	8b 00                	mov    eax,DWORD PTR [eax]
c001214f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012151:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012154:	68 03 95 03 c0       	push   0xc0039503
c0012159:	e8 72 aa ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001215e:	c7 04 24 0b 95 03 c0 	mov    DWORD PTR [esp],0xc003950b
c0012165:	e8 84 ab ff ff       	call   c000ccee <panic(char const*)>
c001216a:	83 c4 10             	add    esp,0x10
c001216d:	c9                   	leave  
c001216e:	c3                   	ret    

c001216f <__cxa_pure_virtual>:
c001216f:	83 ec 18             	sub    esp,0x18
c0012172:	68 23 95 03 c0       	push   0xc0039523
c0012177:	e8 72 ab ff ff       	call   c000ccee <panic(char const*)>
c001217c:	83 c4 1c             	add    esp,0x1c
c001217f:	c3                   	ret    

c0012180 <operator new(unsigned long)>:
c0012180:	e9 46 b0 ff ff       	jmp    c000d1cb <malloc>

c0012185 <operator new[](unsigned long)>:
c0012185:	e9 41 b0 ff ff       	jmp    c000d1cb <malloc>

c001218a <operator delete(void*)>:
c001218a:	e9 5c b0 ff ff       	jmp    c000d1eb <rfree>

c001218f <operator delete(void*, unsigned long)>:
c001218f:	e9 57 b0 ff ff       	jmp    c000d1eb <rfree>

c0012194 <operator delete[](void*)>:
c0012194:	e9 52 b0 ff ff       	jmp    c000d1eb <rfree>

c0012199 <operator delete[](void*, unsigned long)>:
c0012199:	e9 4d b0 ff ff       	jmp    c000d1eb <rfree>

c001219e <File::read(unsigned long long, void*, int*)>:
c001219e:	53                   	push   ebx
c001219f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00121a3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00121a7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00121ae:	3c 19                	cmp    al,0x19
c00121b0:	77 35                	ja     c00121e7 <File::read(unsigned long long, void*, int*)+0x49>
c00121b2:	8b 04 85 60 c0 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3fa0]
c00121b9:	85 c0                	test   eax,eax
c00121bb:	74 2a                	je     c00121e7 <File::read(unsigned long long, void*, int*)+0x49>
c00121bd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00121c3:	85 c0                	test   eax,eax
c00121c5:	74 20                	je     c00121e7 <File::read(unsigned long long, void*, int*)+0x49>
c00121c7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00121cb:	74 21                	je     c00121ee <File::read(unsigned long long, void*, int*)+0x50>
c00121cd:	8b 08                	mov    ecx,DWORD PTR [eax]
c00121cf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00121d3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00121d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00121dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00121e1:	5b                   	pop    ebx
c00121e2:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00121e5:	ff e0                	jmp    eax
c00121e7:	b8 0b 00 00 00       	mov    eax,0xb
c00121ec:	eb 05                	jmp    c00121f3 <File::read(unsigned long long, void*, int*)+0x55>
c00121ee:	b8 05 00 00 00       	mov    eax,0x5
c00121f3:	5b                   	pop    ebx
c00121f4:	c3                   	ret    
c00121f5:	90                   	nop

c00121f6 <File::write(unsigned long long, void*, int*)>:
c00121f6:	53                   	push   ebx
c00121f7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00121fb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00121ff:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012206:	3c 19                	cmp    al,0x19
c0012208:	77 35                	ja     c001223f <File::write(unsigned long long, void*, int*)+0x49>
c001220a:	8b 04 85 60 c0 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3fa0]
c0012211:	85 c0                	test   eax,eax
c0012213:	74 2a                	je     c001223f <File::write(unsigned long long, void*, int*)+0x49>
c0012215:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001221b:	85 c0                	test   eax,eax
c001221d:	74 20                	je     c001223f <File::write(unsigned long long, void*, int*)+0x49>
c001221f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012223:	74 21                	je     c0012246 <File::write(unsigned long long, void*, int*)+0x50>
c0012225:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012227:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001222b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012231:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012235:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012239:	5b                   	pop    ebx
c001223a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001223d:	ff e0                	jmp    eax
c001223f:	b8 0b 00 00 00       	mov    eax,0xb
c0012244:	eb 05                	jmp    c001224b <File::write(unsigned long long, void*, int*)+0x55>
c0012246:	b8 05 00 00 00       	mov    eax,0x5
c001224b:	5b                   	pop    ebx
c001224c:	c3                   	ret    
c001224d:	90                   	nop

c001224e <Directory::read(unsigned long long, void*, int*)>:
c001224e:	53                   	push   ebx
c001224f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012253:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012257:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001225e:	3c 19                	cmp    al,0x19
c0012260:	77 35                	ja     c0012297 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012262:	8b 04 85 60 c0 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3fa0]
c0012269:	85 c0                	test   eax,eax
c001226b:	74 2a                	je     c0012297 <Directory::read(unsigned long long, void*, int*)+0x49>
c001226d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012273:	85 c0                	test   eax,eax
c0012275:	74 20                	je     c0012297 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012277:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001227b:	74 21                	je     c001229e <Directory::read(unsigned long long, void*, int*)+0x50>
c001227d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001227f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012283:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012289:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001228d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012291:	5b                   	pop    ebx
c0012292:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012295:	ff e0                	jmp    eax
c0012297:	b8 0b 00 00 00       	mov    eax,0xb
c001229c:	eb 05                	jmp    c00122a3 <Directory::read(unsigned long long, void*, int*)+0x55>
c001229e:	b8 05 00 00 00       	mov    eax,0x5
c00122a3:	5b                   	pop    ebx
c00122a4:	c3                   	ret    
c00122a5:	90                   	nop

c00122a6 <Directory::write(unsigned long long, void*, int*)>:
c00122a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122aa:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00122b1:	b8 0b 00 00 00       	mov    eax,0xb
c00122b6:	80 fa 19             	cmp    dl,0x19
c00122b9:	77 18                	ja     c00122d3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00122bb:	8b 14 95 60 c0 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3fa0]
c00122c2:	85 d2                	test   edx,edx
c00122c4:	74 0d                	je     c00122d3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00122c6:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00122cd:	19 c0                	sbb    eax,eax
c00122cf:	83 e0 0a             	and    eax,0xa
c00122d2:	40                   	inc    eax
c00122d3:	c3                   	ret    

c00122d4 <File::isAtty()>:
c00122d4:	31 c0                	xor    eax,eax
c00122d6:	c3                   	ret    
c00122d7:	90                   	nop

c00122d8 <Directory::isAtty()>:
c00122d8:	31 c0                	xor    eax,eax
c00122da:	c3                   	ret    
c00122db:	90                   	nop

c00122dc <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00122dc:	b8 0a 00 00 00       	mov    eax,0xa
c00122e1:	c3                   	ret    

c00122e2 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00122e2:	b8 0a 00 00 00       	mov    eax,0xa
c00122e7:	c3                   	ret    

c00122e8 <File::~File()>:
c00122e8:	83 ec 0c             	sub    esp,0xc
c00122eb:	ba a4 95 03 c0       	mov    edx,0xc00395a4
c00122f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122f4:	89 10                	mov    DWORD PTR [eax],edx
c00122f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122fa:	83 ec 0c             	sub    esp,0xc
c00122fd:	50                   	push   eax
c00122fe:	e8 0d eb ff ff       	call   c0010e10 <UnixFile::~UnixFile()>
c0012303:	83 c4 10             	add    esp,0x10
c0012306:	90                   	nop
c0012307:	83 c4 0c             	add    esp,0xc
c001230a:	c3                   	ret    
c001230b:	90                   	nop

c001230c <File::~File()>:
c001230c:	83 ec 0c             	sub    esp,0xc
c001230f:	83 ec 0c             	sub    esp,0xc
c0012312:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012316:	e8 cd ff ff ff       	call   c00122e8 <File::~File()>
c001231b:	83 c4 10             	add    esp,0x10
c001231e:	83 ec 08             	sub    esp,0x8
c0012321:	68 14 01 00 00       	push   0x114
c0012326:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001232a:	e8 60 fe ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c001232f:	83 c4 10             	add    esp,0x10
c0012332:	83 c4 0c             	add    esp,0xc
c0012335:	c3                   	ret    

c0012336 <Directory::~Directory()>:
c0012336:	83 ec 0c             	sub    esp,0xc
c0012339:	ba c0 95 03 c0       	mov    edx,0xc00395c0
c001233e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012342:	89 10                	mov    DWORD PTR [eax],edx
c0012344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012348:	83 ec 0c             	sub    esp,0xc
c001234b:	50                   	push   eax
c001234c:	e8 bf ea ff ff       	call   c0010e10 <UnixFile::~UnixFile()>
c0012351:	83 c4 10             	add    esp,0x10
c0012354:	90                   	nop
c0012355:	83 c4 0c             	add    esp,0xc
c0012358:	c3                   	ret    
c0012359:	90                   	nop

c001235a <Directory::~Directory()>:
c001235a:	83 ec 0c             	sub    esp,0xc
c001235d:	83 ec 0c             	sub    esp,0xc
c0012360:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012364:	e8 cd ff ff ff       	call   c0012336 <Directory::~Directory()>
c0012369:	83 c4 10             	add    esp,0x10
c001236c:	83 ec 08             	sub    esp,0x8
c001236f:	68 14 01 00 00       	push   0x114
c0012374:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012378:	e8 12 fe ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c001237d:	83 c4 10             	add    esp,0x10
c0012380:	83 c4 0c             	add    esp,0xc
c0012383:	c3                   	ret    

c0012384 <Filesystem::Filesystem()>:
c0012384:	ba 40 95 03 c0       	mov    edx,0xc0039540
c0012389:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001238d:	89 10                	mov    DWORD PTR [eax],edx
c001238f:	8b 15 c0 bb 03 c0    	mov    edx,DWORD PTR ds:0xc003bbc0
c0012395:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012399:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001239c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00123a0:	a3 c0 bb 03 c0       	mov    ds:0xc003bbc0,eax
c00123a5:	90                   	nop
c00123a6:	c3                   	ret    
c00123a7:	90                   	nop

c00123a8 <Filesystem::~Filesystem()>:
c00123a8:	ba 40 95 03 c0       	mov    edx,0xc0039540
c00123ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00123b1:	89 10                	mov    DWORD PTR [eax],edx
c00123b3:	90                   	nop
c00123b4:	c3                   	ret    
c00123b5:	90                   	nop

c00123b6 <Filesystem::~Filesystem()>:
c00123b6:	83 ec 0c             	sub    esp,0xc
c00123b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00123bd:	e8 e6 ff ff ff       	call   c00123a8 <Filesystem::~Filesystem()>
c00123c2:	83 c4 04             	add    esp,0x4
c00123c5:	83 ec 08             	sub    esp,0x8
c00123c8:	6a 08                	push   0x8
c00123ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00123ce:	e8 bc fd ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c00123d3:	83 c4 10             	add    esp,0x10
c00123d6:	83 c4 0c             	add    esp,0xc
c00123d9:	c3                   	ret    

c00123da <initVFS()>:
c00123da:	83 ec 18             	sub    esp,0x18
c00123dd:	6a 08                	push   0x8
c00123df:	e8 9c fd ff ff       	call   c0012180 <operator new(unsigned long)>
c00123e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00123e7:	e8 24 71 00 00       	call   c0019510 <FAT::FAT()>
c00123ec:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00123f3:	e8 88 fd ff ff       	call   c0012180 <operator new(unsigned long)>
c00123f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00123fb:	e8 1a 83 00 00       	call   c001a71a <ISO9660::ISO9660()>
c0012400:	83 c4 1c             	add    esp,0x1c
c0012403:	c3                   	ret    

c0012404 <standardiseFiles(char*, char const*, char const*)>:
c0012404:	55                   	push   ebp
c0012405:	57                   	push   edi
c0012406:	56                   	push   esi
c0012407:	53                   	push   ebx
c0012408:	81 ec 10 04 00 00    	sub    esp,0x410
c001240e:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012415:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c001241c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012423:	68 00 04 00 00       	push   0x400
c0012428:	6a 00                	push   0x0
c001242a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001242e:	56                   	push   esi
c001242f:	e8 d4 e1 fe ff       	call   c0000608 <memset>
c0012434:	83 c4 10             	add    esp,0x10
c0012437:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c001243b:	75 0b                	jne    c0012448 <standardiseFiles(char*, char const*, char const*)+0x44>
c001243d:	50                   	push   eax
c001243e:	50                   	push   eax
c001243f:	57                   	push   edi
c0012440:	56                   	push   esi
c0012441:	e8 61 e2 fe ff       	call   c00006a7 <strcpy>
c0012446:	eb 41                	jmp    c0012489 <standardiseFiles(char*, char const*, char const*)+0x85>
c0012448:	8a 07                	mov    al,BYTE PTR [edi]
c001244a:	3c 5c                	cmp    al,0x5c
c001244c:	74 04                	je     c0012452 <standardiseFiles(char*, char const*, char const*)+0x4e>
c001244e:	3c 2f                	cmp    al,0x2f
c0012450:	75 18                	jne    c001246a <standardiseFiles(char*, char const*, char const*)+0x66>
c0012452:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012455:	3c 60                	cmp    al,0x60
c0012457:	7e 03                	jle    c001245c <standardiseFiles(char*, char const*, char const*)+0x58>
c0012459:	83 e8 20             	sub    eax,0x20
c001245c:	88 04 24             	mov    BYTE PTR [esp],al
c001245f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012466:	50                   	push   eax
c0012467:	50                   	push   eax
c0012468:	eb 18                	jmp    c0012482 <standardiseFiles(char*, char const*, char const*)+0x7e>
c001246a:	50                   	push   eax
c001246b:	50                   	push   eax
c001246c:	55                   	push   ebp
c001246d:	56                   	push   esi
c001246e:	e8 34 e2 fe ff       	call   c00006a7 <strcpy>
c0012473:	5a                   	pop    edx
c0012474:	59                   	pop    ecx
c0012475:	68 36 8c 03 c0       	push   0xc0038c36
c001247a:	56                   	push   esi
c001247b:	e8 de e2 fe ff       	call   c000075e <strcat>
c0012480:	5d                   	pop    ebp
c0012481:	58                   	pop    eax
c0012482:	57                   	push   edi
c0012483:	56                   	push   esi
c0012484:	e8 d5 e2 fe ff       	call   c000075e <strcat>
c0012489:	83 c4 10             	add    esp,0x10
c001248c:	8a 04 24             	mov    al,BYTE PTR [esp]
c001248f:	3c 60                	cmp    al,0x60
c0012491:	7e 03                	jle    c0012496 <standardiseFiles(char*, char const*, char const*)+0x92>
c0012493:	83 e8 20             	sub    eax,0x20
c0012496:	88 04 24             	mov    BYTE PTR [esp],al
c0012499:	88 03                	mov    BYTE PTR [ebx],al
c001249b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00124a2:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00124a8:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00124ac:	bf 03 00 00 00       	mov    edi,0x3
c00124b1:	b8 03 00 00 00       	mov    eax,0x3
c00124b6:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00124b9:	84 d2                	test   dl,dl
c00124bb:	0f 84 91 00 00 00    	je     c0012552 <standardiseFiles(char*, char const*, char const*)+0x14e>
c00124c1:	8d 4f 01             	lea    ecx,[edi+0x1]
c00124c4:	80 fa 5c             	cmp    dl,0x5c
c00124c7:	74 05                	je     c00124ce <standardiseFiles(char*, char const*, char const*)+0xca>
c00124c9:	80 fa 2f             	cmp    dl,0x2f
c00124cc:	75 12                	jne    c00124e0 <standardiseFiles(char*, char const*, char const*)+0xdc>
c00124ce:	89 c5                	mov    ebp,eax
c00124d0:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00124d5:	74 09                	je     c00124e0 <standardiseFiles(char*, char const*, char const*)+0xdc>
c00124d7:	40                   	inc    eax
c00124d8:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00124dc:	89 cf                	mov    edi,ecx
c00124de:	eb d6                	jmp    c00124b6 <standardiseFiles(char*, char const*, char const*)+0xb2>
c00124e0:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00124e5:	75 5b                	jne    c0012542 <standardiseFiles(char*, char const*, char const*)+0x13e>
c00124e7:	80 fa 2e             	cmp    dl,0x2e
c00124ea:	75 56                	jne    c0012542 <standardiseFiles(char*, char const*, char const*)+0x13e>
c00124ec:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00124f0:	74 19                	je     c001250b <standardiseFiles(char*, char const*, char const*)+0x107>
c00124f2:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00124f7:	74 53                	je     c001254c <standardiseFiles(char*, char const*, char const*)+0x148>
c00124f9:	89 f9                	mov    ecx,edi
c00124fb:	41                   	inc    ecx
c00124fc:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00124ff:	80 fa 2f             	cmp    dl,0x2f
c0012502:	74 f7                	je     c00124fb <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012504:	80 fa 5c             	cmp    dl,0x5c
c0012507:	74 f2                	je     c00124fb <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012509:	eb d1                	jmp    c00124dc <standardiseFiles(char*, char const*, char const*)+0xd8>
c001250b:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012510:	74 3a                	je     c001254c <standardiseFiles(char*, char const*, char const*)+0x148>
c0012512:	83 f8 03             	cmp    eax,0x3
c0012515:	74 c5                	je     c00124dc <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012517:	41                   	inc    ecx
c0012518:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001251b:	80 fa 2f             	cmp    dl,0x2f
c001251e:	74 f7                	je     c0012517 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012520:	80 fa 5c             	cmp    dl,0x5c
c0012523:	74 f2                	je     c0012517 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012525:	48                   	dec    eax
c0012526:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001252a:	75 06                	jne    c0012532 <standardiseFiles(char*, char const*, char const*)+0x12e>
c001252c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012530:	eb f3                	jmp    c0012525 <standardiseFiles(char*, char const*, char const*)+0x121>
c0012532:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012536:	74 07                	je     c001253f <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012538:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001253c:	48                   	dec    eax
c001253d:	eb f3                	jmp    c0012532 <standardiseFiles(char*, char const*, char const*)+0x12e>
c001253f:	40                   	inc    eax
c0012540:	eb 9a                	jmp    c00124dc <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012542:	80 fa 2f             	cmp    dl,0x2f
c0012545:	74 95                	je     c00124dc <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012547:	80 fa 5c             	cmp    dl,0x5c
c001254a:	74 90                	je     c00124dc <standardiseFiles(char*, char const*, char const*)+0xd8>
c001254c:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c001254f:	40                   	inc    eax
c0012550:	eb 8a                	jmp    c00124dc <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012552:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012556:	83 ec 0c             	sub    esp,0xc
c0012559:	53                   	push   ebx
c001255a:	e8 c6 e0 fe ff       	call   c0000625 <strlen>
c001255f:	83 c4 10             	add    esp,0x10
c0012562:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012567:	75 26                	jne    c001258f <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012569:	83 ec 0c             	sub    esp,0xc
c001256c:	53                   	push   ebx
c001256d:	e8 b3 e0 fe ff       	call   c0000625 <strlen>
c0012572:	83 c4 10             	add    esp,0x10
c0012575:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001257a:	74 26                	je     c00125a2 <standardiseFiles(char*, char const*, char const*)+0x19e>
c001257c:	83 ec 0c             	sub    esp,0xc
c001257f:	53                   	push   ebx
c0012580:	e8 a0 e0 fe ff       	call   c0000625 <strlen>
c0012585:	83 c4 10             	add    esp,0x10
c0012588:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001258d:	eb c7                	jmp    c0012556 <standardiseFiles(char*, char const*, char const*)+0x152>
c001258f:	83 ec 0c             	sub    esp,0xc
c0012592:	53                   	push   ebx
c0012593:	e8 8d e0 fe ff       	call   c0000625 <strlen>
c0012598:	83 c4 10             	add    esp,0x10
c001259b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00125a0:	74 c7                	je     c0012569 <standardiseFiles(char*, char const*, char const*)+0x165>
c00125a2:	81 c4 0c 04 00 00    	add    esp,0x40c
c00125a8:	5b                   	pop    ebx
c00125a9:	5e                   	pop    esi
c00125aa:	5f                   	pop    edi
c00125ab:	5d                   	pop    ebp
c00125ac:	c3                   	ret    
c00125ad:	90                   	nop

c00125ae <File::File(char const*, Process*)>:
c00125ae:	83 ec 0c             	sub    esp,0xc
c00125b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125b5:	83 ec 08             	sub    esp,0x8
c00125b8:	6a 00                	push   0x0
c00125ba:	50                   	push   eax
c00125bb:	e8 ec e7 ff ff       	call   c0010dac <UnixFile::UnixFile(int)>
c00125c0:	83 c4 10             	add    esp,0x10
c00125c3:	ba a4 95 03 c0       	mov    edx,0xc00395a4
c00125c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125cc:	89 10                	mov    DWORD PTR [eax],edx
c00125ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00125d2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00125d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125dc:	83 c0 0d             	add    eax,0xd
c00125df:	83 ec 04             	sub    esp,0x4
c00125e2:	52                   	push   edx
c00125e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125e7:	50                   	push   eax
c00125e8:	e8 17 fe ff ff       	call   c0012404 <standardiseFiles(char*, char const*, char const*)>
c00125ed:	83 c4 10             	add    esp,0x10
c00125f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125f4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00125f7:	8d 50 bf             	lea    edx,[eax-0x41]
c00125fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125fe:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012608:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001260c:	90                   	nop
c001260d:	83 c4 0c             	add    esp,0xc
c0012610:	c3                   	ret    
c0012611:	90                   	nop

c0012612 <File::open(FileOpenMode)>:
c0012612:	53                   	push   ebx
c0012613:	b8 0b 00 00 00       	mov    eax,0xb
c0012618:	83 ec 08             	sub    esp,0x8
c001261b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001261f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012626:	80 fa 19             	cmp    dl,0x19
c0012629:	77 40                	ja     c001266b <File::open(FileOpenMode)+0x59>
c001262b:	8b 14 95 60 c0 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3fa0]
c0012632:	85 d2                	test   edx,edx
c0012634:	74 35                	je     c001266b <File::open(FileOpenMode)+0x59>
c0012636:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001263c:	85 d2                	test   edx,edx
c001263e:	74 2b                	je     c001266b <File::open(FileOpenMode)+0x59>
c0012640:	b8 06 00 00 00       	mov    eax,0x6
c0012645:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012649:	75 20                	jne    c001266b <File::open(FileOpenMode)+0x59>
c001264b:	8b 02                	mov    eax,DWORD PTR [edx]
c001264d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012653:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012657:	51                   	push   ecx
c0012658:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001265b:	51                   	push   ecx
c001265c:	52                   	push   edx
c001265d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012660:	83 c4 10             	add    esp,0x10
c0012663:	85 c0                	test   eax,eax
c0012665:	75 04                	jne    c001266b <File::open(FileOpenMode)+0x59>
c0012667:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001266b:	83 c4 08             	add    esp,0x8
c001266e:	5b                   	pop    ebx
c001266f:	c3                   	ret    

c0012670 <File::close()>:
c0012670:	53                   	push   ebx
c0012671:	b8 0b 00 00 00       	mov    eax,0xb
c0012676:	83 ec 08             	sub    esp,0x8
c0012679:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001267d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012684:	80 fa 19             	cmp    dl,0x19
c0012687:	77 41                	ja     c00126ca <File::close()+0x5a>
c0012689:	8b 1c 95 60 c0 03 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffc3fa0]
c0012690:	85 db                	test   ebx,ebx
c0012692:	74 36                	je     c00126ca <File::close()+0x5a>
c0012694:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001269b:	74 2d                	je     c00126ca <File::close()+0x5a>
c001269d:	b8 05 00 00 00       	mov    eax,0x5
c00126a2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00126a6:	74 22                	je     c00126ca <File::close()+0x5a>
c00126a8:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00126ac:	8b 04 95 60 c0 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc3fa0]
c00126b3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00126b9:	53                   	push   ebx
c00126ba:	53                   	push   ebx
c00126bb:	8b 10                	mov    edx,DWORD PTR [eax]
c00126bd:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00126c3:	50                   	push   eax
c00126c4:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00126c7:	83 c4 10             	add    esp,0x10
c00126ca:	83 c4 08             	add    esp,0x8
c00126cd:	5b                   	pop    ebx
c00126ce:	c3                   	ret    
c00126cf:	90                   	nop

c00126d0 <File::seek(unsigned long long)>:
c00126d0:	56                   	push   esi
c00126d1:	53                   	push   ebx
c00126d2:	b8 0b 00 00 00       	mov    eax,0xb
c00126d7:	51                   	push   ecx
c00126d8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00126dc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00126e0:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00126e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00126eb:	80 fa 19             	cmp    dl,0x19
c00126ee:	77 31                	ja     c0012721 <File::seek(unsigned long long)+0x51>
c00126f0:	8b 14 95 60 c0 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3fa0]
c00126f7:	85 d2                	test   edx,edx
c00126f9:	74 26                	je     c0012721 <File::seek(unsigned long long)+0x51>
c00126fb:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012701:	85 d2                	test   edx,edx
c0012703:	74 1c                	je     c0012721 <File::seek(unsigned long long)+0x51>
c0012705:	b8 05 00 00 00       	mov    eax,0x5
c001270a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001270e:	74 11                	je     c0012721 <File::seek(unsigned long long)+0x51>
c0012710:	8b 02                	mov    eax,DWORD PTR [edx]
c0012712:	53                   	push   ebx
c0012713:	51                   	push   ecx
c0012714:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001271a:	52                   	push   edx
c001271b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001271e:	83 c4 10             	add    esp,0x10
c0012721:	5a                   	pop    edx
c0012722:	5b                   	pop    ebx
c0012723:	5e                   	pop    esi
c0012724:	c3                   	ret    
c0012725:	90                   	nop

c0012726 <File::tell(unsigned long long*)>:
c0012726:	83 ec 0c             	sub    esp,0xc
c0012729:	b8 0b 00 00 00       	mov    eax,0xb
c001272e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012732:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012739:	80 fa 19             	cmp    dl,0x19
c001273c:	77 34                	ja     c0012772 <File::tell(unsigned long long*)+0x4c>
c001273e:	8b 14 95 60 c0 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3fa0]
c0012745:	85 d2                	test   edx,edx
c0012747:	74 29                	je     c0012772 <File::tell(unsigned long long*)+0x4c>
c0012749:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001274f:	85 d2                	test   edx,edx
c0012751:	74 1f                	je     c0012772 <File::tell(unsigned long long*)+0x4c>
c0012753:	b8 05 00 00 00       	mov    eax,0x5
c0012758:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001275c:	74 14                	je     c0012772 <File::tell(unsigned long long*)+0x4c>
c001275e:	50                   	push   eax
c001275f:	8b 02                	mov    eax,DWORD PTR [edx]
c0012761:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012765:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001276b:	52                   	push   edx
c001276c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001276f:	83 c4 10             	add    esp,0x10
c0012772:	83 c4 0c             	add    esp,0xc
c0012775:	c3                   	ret    

c0012776 <File::rewind()>:
c0012776:	83 ec 10             	sub    esp,0x10
c0012779:	6a 00                	push   0x0
c001277b:	6a 00                	push   0x0
c001277d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012781:	e8 4a ff ff ff       	call   c00126d0 <File::seek(unsigned long long)>
c0012786:	83 c4 1c             	add    esp,0x1c
c0012789:	c3                   	ret    

c001278a <File::unlink()>:
c001278a:	83 ec 0c             	sub    esp,0xc
c001278d:	b8 0b 00 00 00       	mov    eax,0xb
c0012792:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012796:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001279d:	80 f9 19             	cmp    cl,0x19
c00127a0:	77 2f                	ja     c00127d1 <File::unlink()+0x47>
c00127a2:	8b 0c 8d 60 c0 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3fa0]
c00127a9:	85 c9                	test   ecx,ecx
c00127ab:	74 24                	je     c00127d1 <File::unlink()+0x47>
c00127ad:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00127b3:	85 c9                	test   ecx,ecx
c00127b5:	74 1a                	je     c00127d1 <File::unlink()+0x47>
c00127b7:	b8 06 00 00 00       	mov    eax,0x6
c00127bc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00127c0:	75 0f                	jne    c00127d1 <File::unlink()+0x47>
c00127c2:	83 c2 0d             	add    edx,0xd
c00127c5:	50                   	push   eax
c00127c6:	50                   	push   eax
c00127c7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00127c9:	52                   	push   edx
c00127ca:	51                   	push   ecx
c00127cb:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00127ce:	83 c4 10             	add    esp,0x10
c00127d1:	83 c4 0c             	add    esp,0xc
c00127d4:	c3                   	ret    
c00127d5:	90                   	nop

c00127d6 <File::rename(char const*)>:
c00127d6:	83 ec 0c             	sub    esp,0xc
c00127d9:	b8 0b 00 00 00       	mov    eax,0xb
c00127de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00127e2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00127e9:	80 f9 19             	cmp    cl,0x19
c00127ec:	77 32                	ja     c0012820 <File::rename(char const*)+0x4a>
c00127ee:	8b 0c 8d 60 c0 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3fa0]
c00127f5:	85 c9                	test   ecx,ecx
c00127f7:	74 27                	je     c0012820 <File::rename(char const*)+0x4a>
c00127f9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00127ff:	85 c9                	test   ecx,ecx
c0012801:	74 1d                	je     c0012820 <File::rename(char const*)+0x4a>
c0012803:	b8 06 00 00 00       	mov    eax,0x6
c0012808:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001280c:	75 12                	jne    c0012820 <File::rename(char const*)+0x4a>
c001280e:	83 c2 0d             	add    edx,0xd
c0012811:	50                   	push   eax
c0012812:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012814:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012818:	52                   	push   edx
c0012819:	51                   	push   ecx
c001281a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001281d:	83 c4 10             	add    esp,0x10
c0012820:	83 c4 0c             	add    esp,0xc
c0012823:	c3                   	ret    

c0012824 <File::chfatattr(unsigned char, unsigned char)>:
c0012824:	57                   	push   edi
c0012825:	b8 0b 00 00 00       	mov    eax,0xb
c001282a:	56                   	push   esi
c001282b:	53                   	push   ebx
c001282c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012830:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012834:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001283b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001283f:	80 f9 19             	cmp    cl,0x19
c0012842:	77 37                	ja     c001287b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012844:	8b 0c 8d 60 c0 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3fa0]
c001284b:	85 c9                	test   ecx,ecx
c001284d:	74 2c                	je     c001287b <File::chfatattr(unsigned char, unsigned char)+0x57>
c001284f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012855:	85 c9                	test   ecx,ecx
c0012857:	74 22                	je     c001287b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012859:	b8 06 00 00 00       	mov    eax,0x6
c001285e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012862:	75 17                	jne    c001287b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012864:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012866:	89 f0                	mov    eax,esi
c0012868:	83 c2 0d             	add    edx,0xd
c001286b:	0f b6 f0             	movzx  esi,al
c001286e:	0f b6 db             	movzx  ebx,bl
c0012871:	56                   	push   esi
c0012872:	53                   	push   ebx
c0012873:	52                   	push   edx
c0012874:	51                   	push   ecx
c0012875:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012878:	83 c4 10             	add    esp,0x10
c001287b:	5b                   	pop    ebx
c001287c:	5e                   	pop    esi
c001287d:	5f                   	pop    edi
c001287e:	c3                   	ret    
c001287f:	90                   	nop

c0012880 <File::exists()>:
c0012880:	83 ec 0c             	sub    esp,0xc
c0012883:	31 c0                	xor    eax,eax
c0012885:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012889:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012890:	80 f9 19             	cmp    cl,0x19
c0012893:	77 24                	ja     c00128b9 <File::exists()+0x39>
c0012895:	8b 0c 8d 60 c0 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3fa0]
c001289c:	85 c9                	test   ecx,ecx
c001289e:	74 19                	je     c00128b9 <File::exists()+0x39>
c00128a0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00128a6:	85 c9                	test   ecx,ecx
c00128a8:	74 0f                	je     c00128b9 <File::exists()+0x39>
c00128aa:	83 c2 0d             	add    edx,0xd
c00128ad:	50                   	push   eax
c00128ae:	50                   	push   eax
c00128af:	8b 01                	mov    eax,DWORD PTR [ecx]
c00128b1:	52                   	push   edx
c00128b2:	51                   	push   ecx
c00128b3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00128b6:	83 c4 10             	add    esp,0x10
c00128b9:	83 c4 0c             	add    esp,0xc
c00128bc:	c3                   	ret    
c00128bd:	90                   	nop

c00128be <File::stat(unsigned long long*, bool*)>:
c00128be:	56                   	push   esi
c00128bf:	53                   	push   ebx
c00128c0:	50                   	push   eax
c00128c1:	b8 0b 00 00 00       	mov    eax,0xb
c00128c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00128ca:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00128ce:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00128d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00128d9:	80 f9 19             	cmp    cl,0x19
c00128dc:	77 3d                	ja     c001291b <File::stat(unsigned long long*, bool*)+0x5d>
c00128de:	8b 0c 8d 60 c0 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3fa0]
c00128e5:	85 c9                	test   ecx,ecx
c00128e7:	74 32                	je     c001291b <File::stat(unsigned long long*, bool*)+0x5d>
c00128e9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00128ef:	85 c9                	test   ecx,ecx
c00128f1:	74 28                	je     c001291b <File::stat(unsigned long long*, bool*)+0x5d>
c00128f3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00128f5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00128f9:	74 13                	je     c001290e <File::stat(unsigned long long*, bool*)+0x50>
c00128fb:	83 ec 04             	sub    esp,0x4
c00128fe:	56                   	push   esi
c00128ff:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012905:	51                   	push   ecx
c0012906:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012909:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001290c:	eb 0a                	jmp    c0012918 <File::stat(unsigned long long*, bool*)+0x5a>
c001290e:	53                   	push   ebx
c001290f:	83 c2 0d             	add    edx,0xd
c0012912:	56                   	push   esi
c0012913:	52                   	push   edx
c0012914:	51                   	push   ecx
c0012915:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012918:	83 c4 10             	add    esp,0x10
c001291b:	5a                   	pop    edx
c001291c:	5b                   	pop    ebx
c001291d:	5e                   	pop    esi
c001291e:	c3                   	ret    

c001291f <getcwd(Process*, char*, int)>:
c001291f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012923:	31 c0                	xor    eax,eax
c0012925:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012928:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001292c:	7d 15                	jge    c0012943 <getcwd(Process*, char*, int)+0x24>
c001292e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012932:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012939:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001293c:	84 c9                	test   cl,cl
c001293e:	74 06                	je     c0012946 <getcwd(Process*, char*, int)+0x27>
c0012940:	40                   	inc    eax
c0012941:	eb e2                	jmp    c0012925 <getcwd(Process*, char*, int)+0x6>
c0012943:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012946:	31 c0                	xor    eax,eax
c0012948:	c3                   	ret    

c0012949 <setcwd(Process*, char*)>:
c0012949:	55                   	push   ebp
c001294a:	57                   	push   edi
c001294b:	56                   	push   esi
c001294c:	53                   	push   ebx
c001294d:	81 ec 20 02 00 00    	sub    esp,0x220
c0012953:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c001295a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012960:	57                   	push   edi
c0012961:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012968:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001296c:	56                   	push   esi
c001296d:	e8 92 fa ff ff       	call   c0012404 <standardiseFiles(char*, char const*, char const*)>
c0012972:	89 34 24             	mov    DWORD PTR [esp],esi
c0012975:	e8 ab dc fe ff       	call   c0000625 <strlen>
c001297a:	83 c4 10             	add    esp,0x10
c001297d:	83 f8 02             	cmp    eax,0x2
c0012980:	77 17                	ja     c0012999 <setcwd(Process*, char*)+0x50>
c0012982:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012987:	83 e8 41             	sub    eax,0x41
c001298a:	83 f8 19             	cmp    eax,0x19
c001298d:	76 24                	jbe    c00129b3 <setcwd(Process*, char*)+0x6a>
c001298f:	b8 03 00 00 00       	mov    eax,0x3
c0012994:	e9 cb 00 00 00       	jmp    c0012a64 <setcwd(Process*, char*)+0x11b>
c0012999:	83 ec 0c             	sub    esp,0xc
c001299c:	56                   	push   esi
c001299d:	e8 83 dc fe ff       	call   c0000625 <strlen>
c00129a2:	83 c4 10             	add    esp,0x10
c00129a5:	83 f8 03             	cmp    eax,0x3
c00129a8:	75 33                	jne    c00129dd <setcwd(Process*, char*)+0x94>
c00129aa:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00129af:	75 2c                	jne    c00129dd <setcwd(Process*, char*)+0x94>
c00129b1:	eb cf                	jmp    c0012982 <setcwd(Process*, char*)+0x39>
c00129b3:	8b 14 85 60 c0 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc3fa0]
c00129ba:	b8 05 00 00 00       	mov    eax,0x5
c00129bf:	85 d2                	test   edx,edx
c00129c1:	0f 84 9d 00 00 00    	je     c0012a64 <setcwd(Process*, char*)+0x11b>
c00129c7:	b8 06 00 00 00       	mov    eax,0x6
c00129cc:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00129d3:	0f 84 8b 00 00 00    	je     c0012a64 <setcwd(Process*, char*)+0x11b>
c00129d9:	51                   	push   ecx
c00129da:	51                   	push   ecx
c00129db:	eb 7b                	jmp    c0012a58 <setcwd(Process*, char*)+0x10f>
c00129dd:	83 ec 0c             	sub    esp,0xc
c00129e0:	68 14 01 00 00       	push   0x114
c00129e5:	e8 96 f7 ff ff       	call   c0012180 <operator new(unsigned long)>
c00129ea:	83 c4 0c             	add    esp,0xc
c00129ed:	89 c3                	mov    ebx,eax
c00129ef:	55                   	push   ebp
c00129f0:	56                   	push   esi
c00129f1:	50                   	push   eax
c00129f2:	e8 b7 fb ff ff       	call   c00125ae <File::File(char const*, Process*)>
c00129f7:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00129fc:	83 c4 0c             	add    esp,0xc
c00129ff:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012a03:	50                   	push   eax
c0012a04:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012a08:	50                   	push   eax
c0012a09:	53                   	push   ebx
c0012a0a:	e8 af fe ff ff       	call   c00128be <File::stat(unsigned long long*, bool*)>
c0012a0f:	83 c4 10             	add    esp,0x10
c0012a12:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012a14:	83 f8 02             	cmp    eax,0x2
c0012a17:	75 09                	jne    c0012a22 <setcwd(Process*, char*)+0xd9>
c0012a19:	83 ec 0c             	sub    esp,0xc
c0012a1c:	53                   	push   ebx
c0012a1d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012a20:	eb 0d                	jmp    c0012a2f <setcwd(Process*, char*)+0xe6>
c0012a22:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012a25:	85 c0                	test   eax,eax
c0012a27:	74 10                	je     c0012a39 <setcwd(Process*, char*)+0xf0>
c0012a29:	83 ec 0c             	sub    esp,0xc
c0012a2c:	53                   	push   ebx
c0012a2d:	ff d2                	call   edx
c0012a2f:	83 c4 10             	add    esp,0x10
c0012a32:	b8 01 00 00 00       	mov    eax,0x1
c0012a37:	eb 2b                	jmp    c0012a64 <setcwd(Process*, char*)+0x11b>
c0012a39:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012a3e:	75 10                	jne    c0012a50 <setcwd(Process*, char*)+0x107>
c0012a40:	83 ec 0c             	sub    esp,0xc
c0012a43:	53                   	push   ebx
c0012a44:	ff d2                	call   edx
c0012a46:	83 c4 10             	add    esp,0x10
c0012a49:	b8 02 00 00 00       	mov    eax,0x2
c0012a4e:	eb 14                	jmp    c0012a64 <setcwd(Process*, char*)+0x11b>
c0012a50:	83 ec 0c             	sub    esp,0xc
c0012a53:	53                   	push   ebx
c0012a54:	ff d2                	call   edx
c0012a56:	58                   	pop    eax
c0012a57:	5a                   	pop    edx
c0012a58:	56                   	push   esi
c0012a59:	57                   	push   edi
c0012a5a:	e8 48 dc fe ff       	call   c00006a7 <strcpy>
c0012a5f:	83 c4 10             	add    esp,0x10
c0012a62:	31 c0                	xor    eax,eax
c0012a64:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012a6a:	5b                   	pop    ebx
c0012a6b:	5e                   	pop    esi
c0012a6c:	5f                   	pop    edi
c0012a6d:	5d                   	pop    ebp
c0012a6e:	c3                   	ret    
c0012a6f:	90                   	nop

c0012a70 <Directory::Directory(char const*, Process*)>:
c0012a70:	83 ec 0c             	sub    esp,0xc
c0012a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a77:	83 ec 08             	sub    esp,0x8
c0012a7a:	6a 00                	push   0x0
c0012a7c:	50                   	push   eax
c0012a7d:	e8 2a e3 ff ff       	call   c0010dac <UnixFile::UnixFile(int)>
c0012a82:	83 c4 10             	add    esp,0x10
c0012a85:	ba c0 95 03 c0       	mov    edx,0xc00395c0
c0012a8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a8e:	89 10                	mov    DWORD PTR [eax],edx
c0012a90:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012a94:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012a9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a9e:	83 c0 0d             	add    eax,0xd
c0012aa1:	83 ec 04             	sub    esp,0x4
c0012aa4:	52                   	push   edx
c0012aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012aa9:	50                   	push   eax
c0012aaa:	e8 55 f9 ff ff       	call   c0012404 <standardiseFiles(char*, char const*, char const*)>
c0012aaf:	83 c4 10             	add    esp,0x10
c0012ab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ab6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012ab9:	8d 50 bf             	lea    edx,[eax-0x41]
c0012abc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ac0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012ac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aca:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012ace:	90                   	nop
c0012acf:	83 c4 0c             	add    esp,0xc
c0012ad2:	c3                   	ret    
c0012ad3:	90                   	nop

c0012ad4 <Directory::open()>:
c0012ad4:	53                   	push   ebx
c0012ad5:	b8 0b 00 00 00       	mov    eax,0xb
c0012ada:	83 ec 08             	sub    esp,0x8
c0012add:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012ae1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012ae8:	80 fa 19             	cmp    dl,0x19
c0012aeb:	77 3d                	ja     c0012b2a <Directory::open()+0x56>
c0012aed:	8b 14 95 60 c0 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3fa0]
c0012af4:	85 d2                	test   edx,edx
c0012af6:	74 32                	je     c0012b2a <Directory::open()+0x56>
c0012af8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012afe:	85 d2                	test   edx,edx
c0012b00:	74 28                	je     c0012b2a <Directory::open()+0x56>
c0012b02:	b8 06 00 00 00       	mov    eax,0x6
c0012b07:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012b0b:	75 1d                	jne    c0012b2a <Directory::open()+0x56>
c0012b0d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012b13:	50                   	push   eax
c0012b14:	8b 02                	mov    eax,DWORD PTR [edx]
c0012b16:	51                   	push   ecx
c0012b17:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012b1a:	51                   	push   ecx
c0012b1b:	52                   	push   edx
c0012b1c:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0012b1f:	83 c4 10             	add    esp,0x10
c0012b22:	85 c0                	test   eax,eax
c0012b24:	75 04                	jne    c0012b2a <Directory::open()+0x56>
c0012b26:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012b2a:	83 c4 08             	add    esp,0x8
c0012b2d:	5b                   	pop    ebx
c0012b2e:	c3                   	ret    
c0012b2f:	90                   	nop

c0012b30 <Directory::close()>:
c0012b30:	53                   	push   ebx
c0012b31:	b8 0b 00 00 00       	mov    eax,0xb
c0012b36:	83 ec 08             	sub    esp,0x8
c0012b39:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012b3d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012b44:	80 fa 19             	cmp    dl,0x19
c0012b47:	77 41                	ja     c0012b8a <Directory::close()+0x5a>
c0012b49:	8b 1c 95 60 c0 03 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffc3fa0]
c0012b50:	85 db                	test   ebx,ebx
c0012b52:	74 36                	je     c0012b8a <Directory::close()+0x5a>
c0012b54:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012b5b:	74 2d                	je     c0012b8a <Directory::close()+0x5a>
c0012b5d:	b8 05 00 00 00       	mov    eax,0x5
c0012b62:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012b66:	74 22                	je     c0012b8a <Directory::close()+0x5a>
c0012b68:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012b6c:	8b 04 95 60 c0 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc3fa0]
c0012b73:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012b79:	53                   	push   ebx
c0012b7a:	53                   	push   ebx
c0012b7b:	8b 10                	mov    edx,DWORD PTR [eax]
c0012b7d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012b83:	50                   	push   eax
c0012b84:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0012b87:	83 c4 10             	add    esp,0x10
c0012b8a:	83 c4 08             	add    esp,0x8
c0012b8d:	5b                   	pop    ebx
c0012b8e:	c3                   	ret    
c0012b8f:	90                   	nop

c0012b90 <Directory::unlink()>:
c0012b90:	83 ec 0c             	sub    esp,0xc
c0012b93:	b8 0b 00 00 00       	mov    eax,0xb
c0012b98:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012b9c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ba3:	80 f9 19             	cmp    cl,0x19
c0012ba6:	77 2f                	ja     c0012bd7 <Directory::unlink()+0x47>
c0012ba8:	8b 0c 8d 60 c0 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3fa0]
c0012baf:	85 c9                	test   ecx,ecx
c0012bb1:	74 24                	je     c0012bd7 <Directory::unlink()+0x47>
c0012bb3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012bb9:	85 c9                	test   ecx,ecx
c0012bbb:	74 1a                	je     c0012bd7 <Directory::unlink()+0x47>
c0012bbd:	b8 06 00 00 00       	mov    eax,0x6
c0012bc2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012bc6:	75 0f                	jne    c0012bd7 <Directory::unlink()+0x47>
c0012bc8:	83 c2 0d             	add    edx,0xd
c0012bcb:	50                   	push   eax
c0012bcc:	50                   	push   eax
c0012bcd:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012bcf:	52                   	push   edx
c0012bd0:	51                   	push   ecx
c0012bd1:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012bd4:	83 c4 10             	add    esp,0x10
c0012bd7:	83 c4 0c             	add    esp,0xc
c0012bda:	c3                   	ret    
c0012bdb:	90                   	nop

c0012bdc <Directory::rename(char const*)>:
c0012bdc:	83 ec 0c             	sub    esp,0xc
c0012bdf:	b8 0b 00 00 00       	mov    eax,0xb
c0012be4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012be8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012bef:	80 f9 19             	cmp    cl,0x19
c0012bf2:	77 32                	ja     c0012c26 <Directory::rename(char const*)+0x4a>
c0012bf4:	8b 0c 8d 60 c0 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3fa0]
c0012bfb:	85 c9                	test   ecx,ecx
c0012bfd:	74 27                	je     c0012c26 <Directory::rename(char const*)+0x4a>
c0012bff:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012c05:	85 c9                	test   ecx,ecx
c0012c07:	74 1d                	je     c0012c26 <Directory::rename(char const*)+0x4a>
c0012c09:	b8 06 00 00 00       	mov    eax,0x6
c0012c0e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012c12:	75 12                	jne    c0012c26 <Directory::rename(char const*)+0x4a>
c0012c14:	83 c2 0d             	add    edx,0xd
c0012c17:	50                   	push   eax
c0012c18:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012c1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c1e:	52                   	push   edx
c0012c1f:	51                   	push   ecx
c0012c20:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012c23:	83 c4 10             	add    esp,0x10
c0012c26:	83 c4 0c             	add    esp,0xc
c0012c29:	c3                   	ret    

c0012c2a <Directory::exists()>:
c0012c2a:	83 ec 0c             	sub    esp,0xc
c0012c2d:	31 c0                	xor    eax,eax
c0012c2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012c33:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012c3a:	80 f9 19             	cmp    cl,0x19
c0012c3d:	77 24                	ja     c0012c63 <Directory::exists()+0x39>
c0012c3f:	8b 0c 8d 60 c0 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3fa0]
c0012c46:	85 c9                	test   ecx,ecx
c0012c48:	74 19                	je     c0012c63 <Directory::exists()+0x39>
c0012c4a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012c50:	85 c9                	test   ecx,ecx
c0012c52:	74 0f                	je     c0012c63 <Directory::exists()+0x39>
c0012c54:	83 c2 0d             	add    edx,0xd
c0012c57:	50                   	push   eax
c0012c58:	50                   	push   eax
c0012c59:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012c5b:	52                   	push   edx
c0012c5c:	51                   	push   ecx
c0012c5d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012c60:	83 c4 10             	add    esp,0x10
c0012c63:	83 c4 0c             	add    esp,0xc
c0012c66:	c3                   	ret    
c0012c67:	90                   	nop

c0012c68 <Directory::read(dirent*)>:
c0012c68:	83 ec 1c             	sub    esp,0x1c
c0012c6b:	b8 0b 00 00 00       	mov    eax,0xb
c0012c70:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012c74:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012c7b:	80 fa 19             	cmp    dl,0x19
c0012c7e:	77 30                	ja     c0012cb0 <Directory::read(dirent*)+0x48>
c0012c80:	8b 14 95 60 c0 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3fa0]
c0012c87:	85 d2                	test   edx,edx
c0012c89:	74 25                	je     c0012cb0 <Directory::read(dirent*)+0x48>
c0012c8b:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012c92:	74 1c                	je     c0012cb0 <Directory::read(dirent*)+0x48>
c0012c94:	83 ec 0c             	sub    esp,0xc
c0012c97:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012c99:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012c9d:	52                   	push   edx
c0012c9e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012ca2:	6a 00                	push   0x0
c0012ca4:	68 10 01 00 00       	push   0x110
c0012ca9:	51                   	push   ecx
c0012caa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012cad:	83 c4 20             	add    esp,0x20
c0012cb0:	83 c4 1c             	add    esp,0x1c
c0012cb3:	c3                   	ret    

c0012cb4 <Directory::create()>:
c0012cb4:	83 ec 0c             	sub    esp,0xc
c0012cb7:	b8 0b 00 00 00       	mov    eax,0xb
c0012cbc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012cc0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012cc7:	80 f9 19             	cmp    cl,0x19
c0012cca:	77 2f                	ja     c0012cfb <Directory::create()+0x47>
c0012ccc:	8b 0c 8d 60 c0 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3fa0]
c0012cd3:	85 c9                	test   ecx,ecx
c0012cd5:	74 24                	je     c0012cfb <Directory::create()+0x47>
c0012cd7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012cdd:	85 c9                	test   ecx,ecx
c0012cdf:	74 1a                	je     c0012cfb <Directory::create()+0x47>
c0012ce1:	b8 06 00 00 00       	mov    eax,0x6
c0012ce6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012cea:	75 0f                	jne    c0012cfb <Directory::create()+0x47>
c0012cec:	83 c2 0d             	add    edx,0xd
c0012cef:	50                   	push   eax
c0012cf0:	50                   	push   eax
c0012cf1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012cf3:	52                   	push   edx
c0012cf4:	51                   	push   ecx
c0012cf5:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0012cf8:	83 c4 10             	add    esp,0x10
c0012cfb:	83 c4 0c             	add    esp,0xc
c0012cfe:	c3                   	ret    
c0012cff:	90                   	nop

c0012d00 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0012d00:	b8 0a 00 00 00       	mov    eax,0xa
c0012d05:	c3                   	ret    

c0012d06 <Bus::Bus(char const*)>:
c0012d06:	83 ec 0c             	sub    esp,0xc
c0012d09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d0d:	83 ec 08             	sub    esp,0x8
c0012d10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d14:	50                   	push   eax
c0012d15:	e8 60 09 00 00       	call   c001367a <Device::Device(char const*)>
c0012d1a:	83 c4 10             	add    esp,0x10
c0012d1d:	ba dc 95 03 c0       	mov    edx,0xc00395dc
c0012d22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d26:	89 10                	mov    DWORD PTR [eax],edx
c0012d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d2c:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0012d36:	90                   	nop
c0012d37:	83 c4 0c             	add    esp,0xc
c0012d3a:	c3                   	ret    
c0012d3b:	90                   	nop

c0012d3c <Bus::~Bus()>:
c0012d3c:	83 ec 0c             	sub    esp,0xc
c0012d3f:	ba dc 95 03 c0       	mov    edx,0xc00395dc
c0012d44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d48:	89 10                	mov    DWORD PTR [eax],edx
c0012d4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d4e:	83 ec 0c             	sub    esp,0xc
c0012d51:	50                   	push   eax
c0012d52:	e8 d5 05 00 00       	call   c001332c <Device::~Device()>
c0012d57:	83 c4 10             	add    esp,0x10
c0012d5a:	90                   	nop
c0012d5b:	83 c4 0c             	add    esp,0xc
c0012d5e:	c3                   	ret    
c0012d5f:	90                   	nop

c0012d60 <Bus::~Bus()>:
c0012d60:	83 ec 0c             	sub    esp,0xc
c0012d63:	83 ec 0c             	sub    esp,0xc
c0012d66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d6a:	e8 cd ff ff ff       	call   c0012d3c <Bus::~Bus()>
c0012d6f:	83 c4 10             	add    esp,0x10
c0012d72:	83 ec 08             	sub    esp,0x8
c0012d75:	68 58 01 00 00       	push   0x158
c0012d7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d7e:	e8 0c f4 ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c0012d83:	83 c4 10             	add    esp,0x10
c0012d86:	83 c4 0c             	add    esp,0xc
c0012d89:	c3                   	ret    

c0012d8a <Buzzer::Buzzer(char const*)>:
c0012d8a:	83 ec 0c             	sub    esp,0xc
c0012d8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d91:	83 ec 08             	sub    esp,0x8
c0012d94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d98:	50                   	push   eax
c0012d99:	e8 dc 08 00 00       	call   c001367a <Device::Device(char const*)>
c0012d9e:	83 c4 10             	add    esp,0x10
c0012da1:	ba 08 96 03 c0       	mov    edx,0xc0039608
c0012da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012daa:	89 10                	mov    DWORD PTR [eax],edx
c0012dac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012db0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0012dba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dbe:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0012dc8:	90                   	nop
c0012dc9:	83 c4 0c             	add    esp,0xc
c0012dcc:	c3                   	ret    
c0012dcd:	90                   	nop

c0012dce <Buzzer::~Buzzer()>:
c0012dce:	83 ec 0c             	sub    esp,0xc
c0012dd1:	ba 08 96 03 c0       	mov    edx,0xc0039608
c0012dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dda:	89 10                	mov    DWORD PTR [eax],edx
c0012ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012de0:	83 ec 0c             	sub    esp,0xc
c0012de3:	50                   	push   eax
c0012de4:	e8 43 05 00 00       	call   c001332c <Device::~Device()>
c0012de9:	83 c4 10             	add    esp,0x10
c0012dec:	90                   	nop
c0012ded:	83 c4 0c             	add    esp,0xc
c0012df0:	c3                   	ret    
c0012df1:	90                   	nop

c0012df2 <Buzzer::~Buzzer()>:
c0012df2:	83 ec 0c             	sub    esp,0xc
c0012df5:	83 ec 0c             	sub    esp,0xc
c0012df8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dfc:	e8 cd ff ff ff       	call   c0012dce <Buzzer::~Buzzer()>
c0012e01:	83 c4 10             	add    esp,0x10
c0012e04:	83 ec 08             	sub    esp,0x8
c0012e07:	68 5c 01 00 00       	push   0x15c
c0012e0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e10:	e8 7a f3 ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c0012e15:	83 c4 10             	add    esp,0x10
c0012e18:	83 c4 0c             	add    esp,0xc
c0012e1b:	c3                   	ret    

c0012e1c <Buzzer::stop()>:
c0012e1c:	83 ec 14             	sub    esp,0x14
c0012e1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e23:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e25:	6a 00                	push   0x0
c0012e27:	50                   	push   eax
c0012e28:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012e2b:	83 c4 1c             	add    esp,0x1c
c0012e2e:	c3                   	ret    

c0012e2f <beepThread(void*)>:
c0012e2f:	53                   	push   ebx
c0012e30:	83 ec 08             	sub    esp,0x8
c0012e33:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012e37:	e8 38 b2 ff ff       	call   c000e074 <unlockScheduler()>
c0012e3c:	b8 40 42 0f 00       	mov    eax,0xf4240
c0012e41:	52                   	push   edx
c0012e42:	52                   	push   edx
c0012e43:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0012e49:	52                   	push   edx
c0012e4a:	50                   	push   eax
c0012e4b:	e8 db b8 ff ff       	call   c000e72b <nanoSleep(unsigned long long)>
c0012e50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012e53:	e8 c4 ff ff ff       	call   c0012e1c <Buzzer::stop()>
c0012e58:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0012e60:	83 c4 18             	add    esp,0x18
c0012e63:	5b                   	pop    ebx
c0012e64:	e9 08 b8 ff ff       	jmp    c000e671 <blockTask(TaskState)>
c0012e69:	90                   	nop

c0012e6a <Buzzer::beep(int, int, bool)>:
c0012e6a:	57                   	push   edi
c0012e6b:	56                   	push   esi
c0012e6c:	53                   	push   ebx
c0012e6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012e71:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0012e75:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e79:	52                   	push   edx
c0012e7a:	52                   	push   edx
c0012e7b:	8b 06                	mov    eax,DWORD PTR [esi]
c0012e7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e81:	56                   	push   esi
c0012e82:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012e85:	83 c4 10             	add    esp,0x10
c0012e88:	89 f8                	mov    eax,edi
c0012e8a:	84 c0                	test   al,al
c0012e8c:	74 1f                	je     c0012ead <Buzzer::beep(int, int, bool)+0x43>
c0012e8e:	50                   	push   eax
c0012e8f:	50                   	push   eax
c0012e90:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0012e96:	99                   	cdq    
c0012e97:	52                   	push   edx
c0012e98:	50                   	push   eax
c0012e99:	e8 8d b8 ff ff       	call   c000e72b <nanoSleep(unsigned long long)>
c0012e9e:	83 c4 10             	add    esp,0x10
c0012ea1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0012ea5:	5b                   	pop    ebx
c0012ea6:	5e                   	pop    esi
c0012ea7:	5f                   	pop    edi
c0012ea8:	e9 6f ff ff ff       	jmp    c0012e1c <Buzzer::stop()>
c0012ead:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0012eb3:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c0012eb8:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0012ec0:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0012ec4:	c7 44 24 14 2f 2e 01 c0 	mov    DWORD PTR [esp+0x14],0xc0012e2f
c0012ecc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012ed0:	5b                   	pop    ebx
c0012ed1:	5e                   	pop    esi
c0012ed2:	5f                   	pop    edi
c0012ed3:	e9 c4 b2 ff ff       	jmp    c000e19c <Process::createThread(void (*)(void*), void*, int)>

c0012ed8 <loadClockSettings()>:
c0012ed8:	c7 05 cc bb 03 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc003bbcc,0xa
c0012ee2:	c6 05 c9 bb 03 c0 00 	mov    BYTE PTR ds:0xc003bbc9,0x0
c0012ee9:	c6 05 c8 bb 03 c0 01 	mov    BYTE PTR ds:0xc003bbc8,0x1
c0012ef0:	c3                   	ret    
c0012ef1:	90                   	nop

c0012ef2 <Clock::Clock(char const*)>:
c0012ef2:	83 ec 0c             	sub    esp,0xc
c0012ef5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ef9:	83 ec 08             	sub    esp,0x8
c0012efc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f00:	50                   	push   eax
c0012f01:	e8 74 07 00 00       	call   c001367a <Device::Device(char const*)>
c0012f06:	83 c4 10             	add    esp,0x10
c0012f09:	ba 38 96 03 c0       	mov    edx,0xc0039638
c0012f0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f12:	89 10                	mov    DWORD PTR [eax],edx
c0012f14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f18:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0012f22:	90                   	nop
c0012f23:	83 c4 0c             	add    esp,0xc
c0012f26:	c3                   	ret    
c0012f27:	90                   	nop

c0012f28 <Clock::~Clock()>:
c0012f28:	83 ec 0c             	sub    esp,0xc
c0012f2b:	ba 38 96 03 c0       	mov    edx,0xc0039638
c0012f30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f34:	89 10                	mov    DWORD PTR [eax],edx
c0012f36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f3a:	83 ec 0c             	sub    esp,0xc
c0012f3d:	50                   	push   eax
c0012f3e:	e8 e9 03 00 00       	call   c001332c <Device::~Device()>
c0012f43:	83 c4 10             	add    esp,0x10
c0012f46:	90                   	nop
c0012f47:	83 c4 0c             	add    esp,0xc
c0012f4a:	c3                   	ret    
c0012f4b:	90                   	nop

c0012f4c <Clock::~Clock()>:
c0012f4c:	83 ec 0c             	sub    esp,0xc
c0012f4f:	83 ec 0c             	sub    esp,0xc
c0012f52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f56:	e8 cd ff ff ff       	call   c0012f28 <Clock::~Clock()>
c0012f5b:	83 c4 10             	add    esp,0x10
c0012f5e:	83 ec 08             	sub    esp,0x8
c0012f61:	68 58 01 00 00       	push   0x158
c0012f66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f6a:	e8 20 f2 ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c0012f6f:	83 c4 10             	add    esp,0x10
c0012f72:	83 c4 0c             	add    esp,0xc
c0012f75:	c3                   	ret    

c0012f76 <Clock::timeInSecondsLocal()>:
c0012f76:	53                   	push   ebx
c0012f77:	83 ec 14             	sub    esp,0x14
c0012f7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f7e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f80:	50                   	push   eax
c0012f81:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012f84:	0f b6 0d c8 bb 03 c0 	movzx  ecx,BYTE PTR ds:0xc003bbc8
c0012f8b:	03 0d cc bb 03 c0    	add    ecx,DWORD PTR ds:0xc003bbcc
c0012f91:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0012f97:	89 cb                	mov    ebx,ecx
c0012f99:	c1 fb 1f             	sar    ebx,0x1f
c0012f9c:	01 c8                	add    eax,ecx
c0012f9e:	11 da                	adc    edx,ebx
c0012fa0:	83 c4 10             	add    esp,0x10
c0012fa3:	31 c9                	xor    ecx,ecx
c0012fa5:	80 3d c9 bb 03 c0 00 	cmp    BYTE PTR ds:0xc003bbc9,0x0
c0012fac:	74 05                	je     c0012fb3 <Clock::timeInSecondsLocal()+0x3d>
c0012fae:	b9 08 07 00 00       	mov    ecx,0x708
c0012fb3:	31 db                	xor    ebx,ebx
c0012fb5:	01 c8                	add    eax,ecx
c0012fb7:	11 da                	adc    edx,ebx
c0012fb9:	83 c4 08             	add    esp,0x8
c0012fbc:	5b                   	pop    ebx
c0012fbd:	c3                   	ret    

c0012fbe <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0012fbe:	57                   	push   edi
c0012fbf:	56                   	push   esi
c0012fc0:	53                   	push   ebx
c0012fc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012fc5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012fc9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012fcb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012fcf:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0012fd2:	0f b6 05 c8 bb 03 c0 	movzx  eax,BYTE PTR ds:0xc003bbc8
c0012fd9:	03 05 cc bb 03 c0    	add    eax,DWORD PTR ds:0xc003bbcc
c0012fdf:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0012fe5:	99                   	cdq    
c0012fe6:	29 c6                	sub    esi,eax
c0012fe8:	19 d7                	sbb    edi,edx
c0012fea:	89 f0                	mov    eax,esi
c0012fec:	89 fa                	mov    edx,edi
c0012fee:	31 f6                	xor    esi,esi
c0012ff0:	80 3d c9 bb 03 c0 00 	cmp    BYTE PTR ds:0xc003bbc9,0x0
c0012ff7:	74 05                	je     c0012ffe <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0012ff9:	be 08 07 00 00       	mov    esi,0x708
c0012ffe:	31 ff                	xor    edi,edi
c0013000:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013004:	29 f0                	sub    eax,esi
c0013006:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001300a:	19 fa                	sbb    edx,edi
c001300c:	89 d8                	mov    eax,ebx
c001300e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013012:	5b                   	pop    ebx
c0013013:	5e                   	pop    esi
c0013014:	5f                   	pop    edi
c0013015:	ff e0                	jmp    eax

c0013017 <datetimeToSeconds(datetime_t)>:
c0013017:	55                   	push   ebp
c0013018:	57                   	push   edi
c0013019:	56                   	push   esi
c001301a:	53                   	push   ebx
c001301b:	83 ec 14             	sub    esp,0x14
c001301e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013022:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013026:	89 d3                	mov    ebx,edx
c0013028:	0f b6 c6             	movzx  eax,dh
c001302b:	c1 eb 10             	shr    ebx,0x10
c001302e:	48                   	dec    eax
c001302f:	66 81 eb 6c 07       	sub    bx,0x76c
c0013034:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013038:	0f b6 f5             	movzx  esi,ch
c001303b:	89 cf                	mov    edi,ecx
c001303d:	6b f6 3c             	imul   esi,esi,0x3c
c0013040:	c1 ef 10             	shr    edi,0x10
c0013043:	0f b6 c9             	movzx  ecx,cl
c0013046:	89 f8                	mov    eax,edi
c0013048:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001304e:	0f b6 f8             	movzx  edi,al
c0013051:	0f b6 d2             	movzx  edx,dl
c0013054:	01 fe                	add    esi,edi
c0013056:	01 f1                	add    ecx,esi
c0013058:	0f b7 f3             	movzx  esi,bx
c001305b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001305f:	c1 f9 1f             	sar    ecx,0x1f
c0013062:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001306b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013070:	8b 0c 8d 80 96 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc6980]
c0013077:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001307b:	76 29                	jbe    c00130a6 <datetimeToSeconds(datetime_t)+0x8f>
c001307d:	f6 c3 03             	test   bl,0x3
c0013080:	75 24                	jne    c00130a6 <datetimeToSeconds(datetime_t)+0x8f>
c0013082:	31 d2                	xor    edx,edx
c0013084:	bf 64 00 00 00       	mov    edi,0x64
c0013089:	89 d8                	mov    eax,ebx
c001308b:	66 f7 f7             	div    di
c001308e:	66 85 d2             	test   dx,dx
c0013091:	75 12                	jne    c00130a5 <datetimeToSeconds(datetime_t)+0x8e>
c0013093:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013099:	bf 90 01 00 00       	mov    edi,0x190
c001309e:	99                   	cdq    
c001309f:	f7 ff                	idiv   edi
c00130a1:	85 d2                	test   edx,edx
c00130a3:	75 01                	jne    c00130a6 <datetimeToSeconds(datetime_t)+0x8f>
c00130a5:	41                   	inc    ecx
c00130a6:	66 83 fb 46          	cmp    bx,0x46
c00130aa:	76 45                	jbe    c00130f1 <datetimeToSeconds(datetime_t)+0xda>
c00130ac:	bb 46 00 00 00       	mov    ebx,0x46
c00130b1:	bf 64 00 00 00       	mov    edi,0x64
c00130b6:	bd 90 01 00 00       	mov    ebp,0x190
c00130bb:	b8 6d 01 00 00       	mov    eax,0x16d
c00130c0:	f6 c3 03             	test   bl,0x3
c00130c3:	75 23                	jne    c00130e8 <datetimeToSeconds(datetime_t)+0xd1>
c00130c5:	89 d8                	mov    eax,ebx
c00130c7:	99                   	cdq    
c00130c8:	f7 ff                	idiv   edi
c00130ca:	b8 6e 01 00 00       	mov    eax,0x16e
c00130cf:	85 d2                	test   edx,edx
c00130d1:	75 15                	jne    c00130e8 <datetimeToSeconds(datetime_t)+0xd1>
c00130d3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00130d9:	99                   	cdq    
c00130da:	f7 fd                	idiv   ebp
c00130dc:	83 fa 01             	cmp    edx,0x1
c00130df:	19 c0                	sbb    eax,eax
c00130e1:	f7 d0                	not    eax
c00130e3:	05 6e 01 00 00       	add    eax,0x16e
c00130e8:	01 c1                	add    ecx,eax
c00130ea:	43                   	inc    ebx
c00130eb:	39 f3                	cmp    ebx,esi
c00130ed:	7c cc                	jl     c00130bb <datetimeToSeconds(datetime_t)+0xa4>
c00130ef:	eb 35                	jmp    c0013126 <datetimeToSeconds(datetime_t)+0x10f>
c00130f1:	74 33                	je     c0013126 <datetimeToSeconds(datetime_t)+0x10f>
c00130f3:	b8 45 00 00 00       	mov    eax,0x45
c00130f8:	89 c2                	mov    edx,eax
c00130fa:	83 e2 03             	and    edx,0x3
c00130fd:	39 f0                	cmp    eax,esi
c00130ff:	7e 0f                	jle    c0013110 <datetimeToSeconds(datetime_t)+0xf9>
c0013101:	83 fa 01             	cmp    edx,0x1
c0013104:	19 d2                	sbb    edx,edx
c0013106:	48                   	dec    eax
c0013107:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001310e:	eb e8                	jmp    c00130f8 <datetimeToSeconds(datetime_t)+0xe1>
c0013110:	b8 6d 01 00 00       	mov    eax,0x16d
c0013115:	85 d2                	test   edx,edx
c0013117:	75 0b                	jne    c0013124 <datetimeToSeconds(datetime_t)+0x10d>
c0013119:	66 83 fb 01          	cmp    bx,0x1
c001311d:	19 c0                	sbb    eax,eax
c001311f:	05 6e 01 00 00       	add    eax,0x16e
c0013124:	29 c1                	sub    ecx,eax
c0013126:	b8 80 51 01 00       	mov    eax,0x15180
c001312b:	f7 e9                	imul   ecx
c001312d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013131:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013135:	83 c4 14             	add    esp,0x14
c0013138:	5b                   	pop    ebx
c0013139:	5e                   	pop    esi
c001313a:	5f                   	pop    edi
c001313b:	5d                   	pop    ebp
c001313c:	c3                   	ret    
c001313d:	90                   	nop

c001313e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001313e:	57                   	push   edi
c001313f:	56                   	push   esi
c0013140:	53                   	push   ebx
c0013141:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013145:	8b 06                	mov    eax,DWORD PTR [esi]
c0013147:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001314a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001314e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013152:	e8 c0 fe ff ff       	call   c0013017 <datetimeToSeconds(datetime_t)>
c0013157:	59                   	pop    ecx
c0013158:	0f b6 0d c8 bb 03 c0 	movzx  ecx,BYTE PTR ds:0xc003bbc8
c001315f:	5b                   	pop    ebx
c0013160:	03 0d cc bb 03 c0    	add    ecx,DWORD PTR ds:0xc003bbcc
c0013166:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001316c:	89 cb                	mov    ebx,ecx
c001316e:	c1 fb 1f             	sar    ebx,0x1f
c0013171:	29 c8                	sub    eax,ecx
c0013173:	19 da                	sbb    edx,ebx
c0013175:	31 c9                	xor    ecx,ecx
c0013177:	80 3d c9 bb 03 c0 00 	cmp    BYTE PTR ds:0xc003bbc9,0x0
c001317e:	74 05                	je     c0013185 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013180:	b9 08 07 00 00       	mov    ecx,0x708
c0013185:	31 db                	xor    ebx,ebx
c0013187:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001318b:	29 c8                	sub    eax,ecx
c001318d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013191:	19 da                	sbb    edx,ebx
c0013193:	89 f8                	mov    eax,edi
c0013195:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013199:	5b                   	pop    ebx
c001319a:	5e                   	pop    esi
c001319b:	5f                   	pop    edi
c001319c:	ff e0                	jmp    eax

c001319e <secondsToDatetime(unsigned long long)>:
c001319e:	55                   	push   ebp
c001319f:	57                   	push   edi
c00131a0:	56                   	push   esi
c00131a1:	53                   	push   ebx
c00131a2:	83 ec 1c             	sub    esp,0x1c
c00131a5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00131a9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00131ad:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00131b1:	6a 00                	push   0x0
c00131b3:	68 80 51 01 00       	push   0x15180
c00131b8:	55                   	push   ebp
c00131b9:	57                   	push   edi
c00131ba:	e8 5d b2 00 00       	call   c001e41c <__udivdi3>
c00131bf:	83 c4 10             	add    esp,0x10
c00131c2:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00131c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00131cc:	6a 00                	push   0x0
c00131ce:	68 80 51 01 00       	push   0x15180
c00131d3:	55                   	push   ebp
c00131d4:	57                   	push   edi
c00131d5:	bf 10 0e 00 00       	mov    edi,0xe10
c00131da:	e8 3d b3 00 00       	call   c001e51c <__umoddi3>
c00131df:	83 c4 10             	add    esp,0x10
c00131e2:	99                   	cdq    
c00131e3:	f7 ff                	idiv   edi
c00131e5:	bf 3c 00 00 00       	mov    edi,0x3c
c00131ea:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00131ed:	89 d0                	mov    eax,edx
c00131ef:	99                   	cdq    
c00131f0:	f7 ff                	idiv   edi
c00131f2:	85 db                	test   ebx,ebx
c00131f4:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00131f7:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00131fa:	79 11                	jns    c001320d <secondsToDatetime(unsigned long long)+0x6f>
c00131fc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013200:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013206:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001320b:	eb 07                	jmp    c0013214 <secondsToDatetime(unsigned long long)+0x76>
c001320d:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013212:	89 d8                	mov    eax,ebx
c0013214:	bf b4 05 00 00       	mov    edi,0x5b4
c0013219:	99                   	cdq    
c001321a:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001321f:	f7 f9                	idiv   ecx
c0013221:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013226:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001322a:	31 d2                	xor    edx,edx
c001322c:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013234:	01 c3                	add    ebx,eax
c0013236:	89 d8                	mov    eax,ebx
c0013238:	f7 f1                	div    ecx
c001323a:	31 d2                	xor    edx,edx
c001323c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001323f:	89 d8                	mov    eax,ebx
c0013241:	f7 f7                	div    edi
c0013243:	31 d2                	xor    edx,edx
c0013245:	29 c1                	sub    ecx,eax
c0013247:	89 d8                	mov    eax,ebx
c0013249:	f7 f5                	div    ebp
c001324b:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013250:	29 c1                	sub    ecx,eax
c0013252:	31 d2                	xor    edx,edx
c0013254:	89 c8                	mov    eax,ecx
c0013256:	f7 f5                	div    ebp
c0013258:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001325d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013261:	31 d2                	xor    edx,edx
c0013263:	89 c8                	mov    eax,ecx
c0013265:	f7 f5                	div    ebp
c0013267:	31 d2                	xor    edx,edx
c0013269:	01 c3                	add    ebx,eax
c001326b:	89 c8                	mov    eax,ecx
c001326d:	f7 f7                	div    edi
c001326f:	bf 99 00 00 00       	mov    edi,0x99
c0013274:	29 c3                	sub    ebx,eax
c0013276:	31 d2                	xor    edx,edx
c0013278:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013280:	29 c3                	sub    ebx,eax
c0013282:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013285:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013288:	bb 05 00 00 00       	mov    ebx,0x5
c001328d:	83 c1 02             	add    ecx,0x2
c0013290:	89 c8                	mov    eax,ecx
c0013292:	f7 f7                	div    edi
c0013294:	31 d2                	xor    edx,edx
c0013296:	89 c7                	mov    edi,eax
c0013298:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001329e:	83 c0 02             	add    eax,0x2
c00132a1:	f7 f3                	div    ebx
c00132a3:	89 eb                	mov    ebx,ebp
c00132a5:	29 c3                	sub    ebx,eax
c00132a7:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00132ad:	88 1e                	mov    BYTE PTR [esi],bl
c00132af:	19 c0                	sbb    eax,eax
c00132b1:	31 d2                	xor    edx,edx
c00132b3:	83 e0 0c             	and    eax,0xc
c00132b6:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00132ba:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00132c2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00132c6:	83 f9 01             	cmp    ecx,0x1
c00132c9:	0f 96 c2             	setbe  dl
c00132cc:	41                   	inc    ecx
c00132cd:	01 d0                	add    eax,edx
c00132cf:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00132d2:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00132d6:	83 c4 1c             	add    esp,0x1c
c00132d9:	89 f0                	mov    eax,esi
c00132db:	5b                   	pop    ebx
c00132dc:	5e                   	pop    esi
c00132dd:	5f                   	pop    edi
c00132de:	5d                   	pop    ebp
c00132df:	c2 04 00             	ret    0x4

c00132e2 <Clock::timeInDatetimeLocal()>:
c00132e2:	53                   	push   ebx
c00132e3:	83 ec 14             	sub    esp,0x14
c00132e6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00132ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00132ee:	e8 83 fc ff ff       	call   c0012f76 <Clock::timeInSecondsLocal()>
c00132f3:	83 c4 0c             	add    esp,0xc
c00132f6:	52                   	push   edx
c00132f7:	50                   	push   eax
c00132f8:	53                   	push   ebx
c00132f9:	e8 a0 fe ff ff       	call   c001319e <secondsToDatetime(unsigned long long)>
c00132fe:	89 d8                	mov    eax,ebx
c0013300:	83 c4 14             	add    esp,0x14
c0013303:	5b                   	pop    ebx
c0013304:	c2 04 00             	ret    0x4
c0013307:	90                   	nop

c0013308 <Device::hibernate()>:
c0013308:	c3                   	ret    
c0013309:	90                   	nop

c001330a <Device::wake()>:
c001330a:	c3                   	ret    
c001330b:	90                   	nop

c001330c <Device::detect()>:
c001330c:	c3                   	ret    
c001330d:	90                   	nop

c001330e <Device::disableLegacy()>:
c001330e:	c3                   	ret    
c001330f:	90                   	nop

c0013310 <Device::powerSaving(PowerSavingLevel)>:
c0013310:	c3                   	ret    
c0013311:	90                   	nop

c0013312 <DriverlessDevice::close(int, int, void*)>:
c0013312:	31 c0                	xor    eax,eax
c0013314:	c3                   	ret    
c0013315:	90                   	nop

c0013316 <DriverlessDevice::detect()>:
c0013316:	c3                   	ret    
c0013317:	90                   	nop

c0013318 <DriverlessDevice::open(int, int, void*)>:
c0013318:	83 ec 18             	sub    esp,0x18
c001331b:	68 b0 96 03 c0       	push   0xc00396b0
c0013320:	e8 c9 99 ff ff       	call   c000ccee <panic(char const*)>
c0013325:	83 c8 ff             	or     eax,0xffffffff
c0013328:	83 c4 1c             	add    esp,0x1c
c001332b:	c3                   	ret    

c001332c <Device::~Device()>:
c001332c:	ba d8 96 03 c0       	mov    edx,0xc00396d8
c0013331:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013335:	89 10                	mov    DWORD PTR [eax],edx
c0013337:	90                   	nop
c0013338:	c3                   	ret    
c0013339:	90                   	nop

c001333a <Device::~Device()>:
c001333a:	83 ec 0c             	sub    esp,0xc
c001333d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013341:	e8 e6 ff ff ff       	call   c001332c <Device::~Device()>
c0013346:	83 c4 04             	add    esp,0x4
c0013349:	83 ec 08             	sub    esp,0x8
c001334c:	68 58 01 00 00       	push   0x158
c0013351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013355:	e8 35 ee ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c001335a:	83 c4 10             	add    esp,0x10
c001335d:	83 c4 0c             	add    esp,0xc
c0013360:	c3                   	ret    
c0013361:	90                   	nop

c0013362 <Device::findAndLoadDriver()>:
c0013362:	c3                   	ret    
c0013363:	90                   	nop

c0013364 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013364:	57                   	push   edi
c0013365:	b9 09 00 00 00       	mov    ecx,0x9
c001336a:	56                   	push   esi
c001336b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001336f:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013373:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001337d:	81 c7 18 01 00 00    	add    edi,0x118
c0013383:	fc                   	cld    
c0013384:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013386:	5e                   	pop    esi
c0013387:	5f                   	pop    edi
c0013388:	c3                   	ret    
c0013389:	90                   	nop

c001338a <Device::preOpenACPI(void*, char*, char*)>:
c001338a:	56                   	push   esi
c001338b:	53                   	push   ebx
c001338c:	83 ec 08             	sub    esp,0x8
c001338f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013393:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013397:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c00133a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133a5:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00133ab:	6a 1e                	push   0x1e
c00133ad:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00133b3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00133b7:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00133bd:	50                   	push   eax
c00133be:	e8 0f d2 fe ff       	call   c00005d2 <memcpy>
c00133c3:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00133c7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00133cb:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00133d3:	83 c4 14             	add    esp,0x14
c00133d6:	5b                   	pop    ebx
c00133d7:	5e                   	pop    esi
c00133d8:	e9 f5 d1 fe ff       	jmp    c00005d2 <memcpy>
c00133dd:	90                   	nop

c00133de <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00133de:	55                   	push   ebp
c00133df:	57                   	push   edi
c00133e0:	56                   	push   esi
c00133e1:	53                   	push   ebx
c00133e2:	83 ec 0c             	sub    esp,0xc
c00133e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133e9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00133ed:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00133f1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00133f5:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00133fa:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013401:	75 0b                	jne    c001340e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c0013403:	8b 00                	mov    eax,DWORD PTR [eax]
c0013405:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0013409:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001340c:	eb 24                	jmp    c0013432 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c001340e:	e8 a3 3a 00 00       	call   c0016eb6 <thisCPU()>
c0013413:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013419:	8b 10                	mov    edx,DWORD PTR [eax]
c001341b:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001341f:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0013423:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0013427:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001342b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001342f:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013432:	83 c4 0c             	add    esp,0xc
c0013435:	5b                   	pop    ebx
c0013436:	5e                   	pop    esi
c0013437:	5f                   	pop    edi
c0013438:	5d                   	pop    ebp
c0013439:	ff e0                	jmp    eax
c001343b:	90                   	nop

c001343c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001343c:	57                   	push   edi
c001343d:	56                   	push   esi
c001343e:	53                   	push   ebx
c001343f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013443:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013447:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001344b:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0013450:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013457:	75 0b                	jne    c0013464 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c0013459:	8b 00                	mov    eax,DWORD PTR [eax]
c001345b:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c001345f:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013462:	eb 20                	jmp    c0013484 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c0013464:	e8 4d 3a 00 00       	call   c0016eb6 <thisCPU()>
c0013469:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001346f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013471:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0013475:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0013479:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001347d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013481:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0013484:	5b                   	pop    ebx
c0013485:	5e                   	pop    esi
c0013486:	5f                   	pop    edi
c0013487:	ff e0                	jmp    eax
c0013489:	90                   	nop

c001348a <Device::addChild(Device*)>:
c001348a:	53                   	push   ebx
c001348b:	83 ec 08             	sub    esp,0x8
c001348e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013492:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013496:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001349c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00134a2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00134a4:	85 d2                	test   edx,edx
c00134a6:	74 04                	je     c00134ac <Device::addChild(Device*)+0x22>
c00134a8:	89 d3                	mov    ebx,edx
c00134aa:	eb f6                	jmp    c00134a2 <Device::addChild(Device*)+0x18>
c00134ac:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00134af:	83 ec 0c             	sub    esp,0xc
c00134b2:	6a 08                	push   0x8
c00134b4:	e8 c7 ec ff ff       	call   c0012180 <operator new(unsigned long)>
c00134b9:	89 03                	mov    DWORD PTR [ebx],eax
c00134bb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00134c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00134c8:	83 c4 18             	add    esp,0x18
c00134cb:	5b                   	pop    ebx
c00134cc:	c3                   	ret    
c00134cd:	90                   	nop

c00134ce <Device::removeAllChildren()>:
c00134ce:	56                   	push   esi
c00134cf:	53                   	push   ebx
c00134d0:	52                   	push   edx
c00134d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00134d5:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00134db:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00134de:	74 17                	je     c00134f7 <Device::removeAllChildren()+0x29>
c00134e0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00134e3:	85 c0                	test   eax,eax
c00134e5:	74 0c                	je     c00134f3 <Device::removeAllChildren()+0x25>
c00134e7:	83 ec 0c             	sub    esp,0xc
c00134ea:	8b 10                	mov    edx,DWORD PTR [eax]
c00134ec:	50                   	push   eax
c00134ed:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00134f0:	83 c4 10             	add    esp,0x10
c00134f3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00134f5:	eb e4                	jmp    c00134db <Device::removeAllChildren()+0xd>
c00134f7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00134fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013503:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013509:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013510:	58                   	pop    eax
c0013511:	5b                   	pop    ebx
c0013512:	5e                   	pop    esi
c0013513:	c3                   	ret    

c0013514 <Device::hibernateAll()>:
c0013514:	53                   	push   ebx
c0013515:	83 ec 14             	sub    esp,0x14
c0013518:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001351c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001351e:	53                   	push   ebx
c001351f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013522:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013528:	83 c4 10             	add    esp,0x10
c001352b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001352e:	74 0f                	je     c001353f <Device::hibernateAll()+0x2b>
c0013530:	83 ec 0c             	sub    esp,0xc
c0013533:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013536:	e8 d9 ff ff ff       	call   c0013514 <Device::hibernateAll()>
c001353b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001353d:	eb e9                	jmp    c0013528 <Device::hibernateAll()+0x14>
c001353f:	83 c4 08             	add    esp,0x8
c0013542:	5b                   	pop    ebx
c0013543:	c3                   	ret    

c0013544 <Device::wakeAll()>:
c0013544:	53                   	push   ebx
c0013545:	83 ec 14             	sub    esp,0x14
c0013548:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001354c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001354e:	53                   	push   ebx
c001354f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013552:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013558:	83 c4 10             	add    esp,0x10
c001355b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001355e:	74 0f                	je     c001356f <Device::wakeAll()+0x2b>
c0013560:	83 ec 0c             	sub    esp,0xc
c0013563:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013566:	e8 d9 ff ff ff       	call   c0013544 <Device::wakeAll()>
c001356b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001356d:	eb e9                	jmp    c0013558 <Device::wakeAll()+0x14>
c001356f:	83 c4 08             	add    esp,0x8
c0013572:	5b                   	pop    ebx
c0013573:	c3                   	ret    

c0013574 <Device::detectAll()>:
c0013574:	53                   	push   ebx
c0013575:	83 ec 14             	sub    esp,0x14
c0013578:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001357c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001357e:	53                   	push   ebx
c001357f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013582:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013588:	83 c4 10             	add    esp,0x10
c001358b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001358e:	74 0f                	je     c001359f <Device::detectAll()+0x2b>
c0013590:	83 ec 0c             	sub    esp,0xc
c0013593:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013596:	e8 d9 ff ff ff       	call   c0013574 <Device::detectAll()>
c001359b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001359d:	eb e9                	jmp    c0013588 <Device::detectAll()+0x14>
c001359f:	83 c4 08             	add    esp,0x8
c00135a2:	5b                   	pop    ebx
c00135a3:	c3                   	ret    

c00135a4 <Device::disableLegacyAll()>:
c00135a4:	53                   	push   ebx
c00135a5:	83 ec 14             	sub    esp,0x14
c00135a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00135ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00135ae:	53                   	push   ebx
c00135af:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00135b2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00135b8:	83 c4 10             	add    esp,0x10
c00135bb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00135be:	74 0f                	je     c00135cf <Device::disableLegacyAll()+0x2b>
c00135c0:	83 ec 0c             	sub    esp,0xc
c00135c3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00135c6:	e8 d9 ff ff ff       	call   c00135a4 <Device::disableLegacyAll()>
c00135cb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00135cd:	eb e9                	jmp    c00135b8 <Device::disableLegacyAll()+0x14>
c00135cf:	83 c4 08             	add    esp,0x8
c00135d2:	5b                   	pop    ebx
c00135d3:	c3                   	ret    

c00135d4 <Device::loadDriversForAll()>:
c00135d4:	53                   	push   ebx
c00135d5:	83 ec 08             	sub    esp,0x8
c00135d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135dc:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00135e2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00135e4:	85 db                	test   ebx,ebx
c00135e6:	74 12                	je     c00135fa <Device::loadDriversForAll()+0x26>
c00135e8:	83 ec 0c             	sub    esp,0xc
c00135eb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00135ee:	e8 e1 ff ff ff       	call   c00135d4 <Device::loadDriversForAll()>
c00135f3:	83 c4 10             	add    esp,0x10
c00135f6:	89 d8                	mov    eax,ebx
c00135f8:	eb e8                	jmp    c00135e2 <Device::loadDriversForAll()+0xe>
c00135fa:	83 c4 08             	add    esp,0x8
c00135fd:	5b                   	pop    ebx
c00135fe:	c3                   	ret    
c00135ff:	90                   	nop

c0013600 <Device::closeAll()>:
c0013600:	53                   	push   ebx
c0013601:	83 ec 08             	sub    esp,0x8
c0013604:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013608:	8b 03                	mov    eax,DWORD PTR [ebx]
c001360a:	6a 00                	push   0x0
c001360c:	6a 00                	push   0x0
c001360e:	6a 00                	push   0x0
c0013610:	53                   	push   ebx
c0013611:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013614:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001361a:	83 c4 10             	add    esp,0x10
c001361d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013620:	74 0f                	je     c0013631 <Device::closeAll()+0x31>
c0013622:	83 ec 0c             	sub    esp,0xc
c0013625:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013628:	e8 d3 ff ff ff       	call   c0013600 <Device::closeAll()>
c001362d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001362f:	eb e9                	jmp    c001361a <Device::closeAll()+0x1a>
c0013631:	83 c4 08             	add    esp,0x8
c0013634:	5b                   	pop    ebx
c0013635:	c3                   	ret    

c0013636 <Device::powerSavingAll(PowerSavingLevel)>:
c0013636:	56                   	push   esi
c0013637:	53                   	push   ebx
c0013638:	83 ec 0c             	sub    esp,0xc
c001363b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001363f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013643:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013645:	56                   	push   esi
c0013646:	53                   	push   ebx
c0013647:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001364a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013650:	83 c4 10             	add    esp,0x10
c0013653:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013656:	74 0f                	je     c0013667 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013658:	52                   	push   edx
c0013659:	52                   	push   edx
c001365a:	56                   	push   esi
c001365b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001365e:	e8 d3 ff ff ff       	call   c0013636 <Device::powerSavingAll(PowerSavingLevel)>
c0013663:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013665:	eb e9                	jmp    c0013650 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013667:	58                   	pop    eax
c0013668:	5b                   	pop    ebx
c0013669:	5e                   	pop    esi
c001366a:	c3                   	ret    
c001366b:	90                   	nop

c001366c <Device::setName(char const*)>:
c001366c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013674:	e9 2e d0 fe ff       	jmp    c00006a7 <strcpy>
c0013679:	90                   	nop

c001367a <Device::Device(char const*)>:
c001367a:	83 ec 0c             	sub    esp,0xc
c001367d:	ba d8 96 03 c0       	mov    edx,0xc00396d8
c0013682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013686:	89 10                	mov    DWORD PTR [eax],edx
c0013688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001368c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001369a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00136a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136a8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00136b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136b6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00136c0:	83 ec 08             	sub    esp,0x8
c00136c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136cb:	e8 9c ff ff ff       	call   c001366c <Device::setName(char const*)>
c00136d0:	83 c4 10             	add    esp,0x10
c00136d3:	83 ec 0c             	sub    esp,0xc
c00136d6:	6a 08                	push   0x8
c00136d8:	e8 a3 ea ff ff       	call   c0012180 <operator new(unsigned long)>
c00136dd:	83 c4 10             	add    esp,0x10
c00136e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00136e6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00136ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136f1:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00136f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136fb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013701:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001370b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013711:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001371c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013727:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001372e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013732:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001373c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013740:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001374a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001374e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001375c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013766:	90                   	nop
c0013767:	83 c4 0c             	add    esp,0xc
c001376a:	c3                   	ret    
c001376b:	90                   	nop

c001376c <Device::getName()>:
c001376c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013770:	05 d0 00 00 00       	add    eax,0xd0
c0013775:	c3                   	ret    

c0013776 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013776:	83 ec 0c             	sub    esp,0xc
c0013779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001377d:	83 ec 08             	sub    esp,0x8
c0013780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013784:	50                   	push   eax
c0013785:	e8 f0 fe ff ff       	call   c001367a <Device::Device(char const*)>
c001378a:	83 c4 10             	add    esp,0x10
c001378d:	ba 04 97 03 c0       	mov    edx,0xc0039704
c0013792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013796:	89 10                	mov    DWORD PTR [eax],edx
c0013798:	90                   	nop
c0013799:	83 c4 0c             	add    esp,0xc
c001379c:	c3                   	ret    
c001379d:	90                   	nop

c001379e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001379e:	57                   	push   edi
c001379f:	56                   	push   esi
c00137a0:	53                   	push   ebx
c00137a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00137a5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00137a9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00137ad:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00137b3:	75 0c                	jne    c00137c1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00137b5:	52                   	push   edx
c00137b6:	52                   	push   edx
c00137b7:	53                   	push   ebx
c00137b8:	56                   	push   esi
c00137b9:	e8 4e b4 00 00       	call   c001ec0c <LinkedList<Device>::addElement(Device*)>
c00137be:	83 c4 10             	add    esp,0x10
c00137c1:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00137c7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00137ca:	74 12                	je     c00137de <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00137cc:	50                   	push   eax
c00137cd:	57                   	push   edi
c00137ce:	56                   	push   esi
c00137cf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00137d2:	e8 c7 ff ff ff       	call   c001379e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00137d7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00137d9:	83 c4 10             	add    esp,0x10
c00137dc:	eb e9                	jmp    c00137c7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00137de:	5b                   	pop    ebx
c00137df:	5e                   	pop    esi
c00137e0:	5f                   	pop    edi
c00137e1:	c3                   	ret    

c00137e2 <getDevicesOfType(DeviceType)>:
c00137e2:	53                   	push   ebx
c00137e3:	83 ec 14             	sub    esp,0x14
c00137e6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00137ea:	53                   	push   ebx
c00137eb:	e8 f8 b4 00 00       	call   c001ece8 <LinkedList<Device>::LinkedList()>
c00137f0:	83 c4 0c             	add    esp,0xc
c00137f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137f7:	53                   	push   ebx
c00137f8:	ff 35 08 b7 03 c0    	push   DWORD PTR ds:0xc003b708
c00137fe:	e8 9b ff ff ff       	call   c001379e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013803:	89 d8                	mov    eax,ebx
c0013805:	83 c4 18             	add    esp,0x18
c0013808:	5b                   	pop    ebx
c0013809:	c2 04 00             	ret    0x4

c001380c <HardDiskController::HardDiskController(char const*)>:
c001380c:	83 ec 0c             	sub    esp,0xc
c001380f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013813:	83 ec 08             	sub    esp,0x8
c0013816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001381a:	50                   	push   eax
c001381b:	e8 5a fe ff ff       	call   c001367a <Device::Device(char const*)>
c0013820:	83 c4 10             	add    esp,0x10
c0013823:	ba 30 97 03 c0       	mov    edx,0xc0039730
c0013828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001382c:	89 10                	mov    DWORD PTR [eax],edx
c001382e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013832:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001383c:	90                   	nop
c001383d:	83 c4 0c             	add    esp,0xc
c0013840:	c3                   	ret    
c0013841:	90                   	nop

c0013842 <HardDiskController::~HardDiskController()>:
c0013842:	83 ec 0c             	sub    esp,0xc
c0013845:	ba 30 97 03 c0       	mov    edx,0xc0039730
c001384a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001384e:	89 10                	mov    DWORD PTR [eax],edx
c0013850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013854:	83 ec 0c             	sub    esp,0xc
c0013857:	50                   	push   eax
c0013858:	e8 cf fa ff ff       	call   c001332c <Device::~Device()>
c001385d:	83 c4 10             	add    esp,0x10
c0013860:	90                   	nop
c0013861:	83 c4 0c             	add    esp,0xc
c0013864:	c3                   	ret    
c0013865:	90                   	nop

c0013866 <HardDiskController::~HardDiskController()>:
c0013866:	83 ec 0c             	sub    esp,0xc
c0013869:	83 ec 0c             	sub    esp,0xc
c001386c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013870:	e8 cd ff ff ff       	call   c0013842 <HardDiskController::~HardDiskController()>
c0013875:	83 c4 10             	add    esp,0x10
c0013878:	83 ec 08             	sub    esp,0x8
c001387b:	68 58 01 00 00       	push   0x158
c0013880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013884:	e8 06 e9 ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c0013889:	83 c4 10             	add    esp,0x10
c001388c:	83 c4 0c             	add    esp,0xc
c001388f:	c3                   	ret    

c0013890 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013890:	83 ec 0c             	sub    esp,0xc
c0013893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013897:	83 ec 08             	sub    esp,0x8
c001389a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001389e:	50                   	push   eax
c001389f:	e8 d6 fd ff ff       	call   c001367a <Device::Device(char const*)>
c00138a4:	83 c4 10             	add    esp,0x10
c00138a7:	ba 5c 97 03 c0       	mov    edx,0xc003975c
c00138ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138b0:	89 10                	mov    DWORD PTR [eax],edx
c00138b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138b6:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00138bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138c1:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00138c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138cc:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00138d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138da:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00138de:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00138e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138e8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00138f2:	90                   	nop
c00138f3:	83 c4 0c             	add    esp,0xc
c00138f6:	c3                   	ret    
c00138f7:	90                   	nop

c00138f8 <PhysicalDisk::startCache()>:
c00138f8:	56                   	push   esi
c00138f9:	53                   	push   ebx
c00138fa:	83 ec 10             	sub    esp,0x10
c00138fd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013901:	6a 30                	push   0x30
c0013903:	e8 78 e8 ff ff       	call   c0012180 <operator new(unsigned long)>
c0013908:	89 c6                	mov    esi,eax
c001390a:	58                   	pop    eax
c001390b:	5a                   	pop    edx
c001390c:	53                   	push   ebx
c001390d:	56                   	push   esi
c001390e:	e8 b7 1d 00 00       	call   c00156ca <VCache::VCache(PhysicalDisk*)>
c0013913:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013919:	83 c4 14             	add    esp,0x14
c001391c:	5b                   	pop    ebx
c001391d:	5e                   	pop    esi
c001391e:	c3                   	ret    
c001391f:	90                   	nop

c0013920 <PhysicalDisk::~PhysicalDisk()>:
c0013920:	83 ec 0c             	sub    esp,0xc
c0013923:	ba 5c 97 03 c0       	mov    edx,0xc003975c
c0013928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001392c:	89 10                	mov    DWORD PTR [eax],edx
c001392e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013932:	83 ec 0c             	sub    esp,0xc
c0013935:	50                   	push   eax
c0013936:	e8 f1 f9 ff ff       	call   c001332c <Device::~Device()>
c001393b:	83 c4 10             	add    esp,0x10
c001393e:	90                   	nop
c001393f:	83 c4 0c             	add    esp,0xc
c0013942:	c3                   	ret    
c0013943:	90                   	nop

c0013944 <PhysicalDisk::~PhysicalDisk()>:
c0013944:	83 ec 0c             	sub    esp,0xc
c0013947:	83 ec 0c             	sub    esp,0xc
c001394a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001394e:	e8 cd ff ff ff       	call   c0013920 <PhysicalDisk::~PhysicalDisk()>
c0013953:	83 c4 10             	add    esp,0x10
c0013956:	83 ec 08             	sub    esp,0x8
c0013959:	68 6c 01 00 00       	push   0x16c
c001395e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013962:	e8 28 e8 ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c0013967:	83 c4 10             	add    esp,0x10
c001396a:	83 c4 0c             	add    esp,0xc
c001396d:	c3                   	ret    

c001396e <FPU::FPU(char const*)>:
c001396e:	83 ec 0c             	sub    esp,0xc
c0013971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013975:	83 ec 08             	sub    esp,0x8
c0013978:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001397c:	50                   	push   eax
c001397d:	e8 f8 fc ff ff       	call   c001367a <Device::Device(char const*)>
c0013982:	83 c4 10             	add    esp,0x10
c0013985:	ba 98 97 03 c0       	mov    edx,0xc0039798
c001398a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001398e:	89 10                	mov    DWORD PTR [eax],edx
c0013990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013994:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001399e:	90                   	nop
c001399f:	83 c4 0c             	add    esp,0xc
c00139a2:	c3                   	ret    
c00139a3:	90                   	nop

c00139a4 <FPU::~FPU()>:
c00139a4:	83 ec 0c             	sub    esp,0xc
c00139a7:	ba 98 97 03 c0       	mov    edx,0xc0039798
c00139ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139b0:	89 10                	mov    DWORD PTR [eax],edx
c00139b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139b6:	83 ec 0c             	sub    esp,0xc
c00139b9:	50                   	push   eax
c00139ba:	e8 6d f9 ff ff       	call   c001332c <Device::~Device()>
c00139bf:	83 c4 10             	add    esp,0x10
c00139c2:	90                   	nop
c00139c3:	83 c4 0c             	add    esp,0xc
c00139c6:	c3                   	ret    
c00139c7:	90                   	nop

c00139c8 <FPU::~FPU()>:
c00139c8:	83 ec 0c             	sub    esp,0xc
c00139cb:	83 ec 0c             	sub    esp,0xc
c00139ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139d2:	e8 cd ff ff ff       	call   c00139a4 <FPU::~FPU()>
c00139d7:	83 c4 10             	add    esp,0x10
c00139da:	83 ec 08             	sub    esp,0x8
c00139dd:	68 58 01 00 00       	push   0x158
c00139e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139e6:	e8 a4 e7 ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c00139eb:	83 c4 10             	add    esp,0x10
c00139ee:	83 c4 0c             	add    esp,0xc
c00139f1:	c3                   	ret    

c00139f2 <setupFPU()>:
c00139f2:	53                   	push   ebx
c00139f3:	83 ec 08             	sub    esp,0x8
c00139f6:	a1 08 b7 03 c0       	mov    eax,ds:0xc003b708
c00139fb:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0013a02:	74 19                	je     c0013a1d <setupFPU()+0x2b>
c0013a04:	83 ec 0c             	sub    esp,0xc
c0013a07:	68 58 01 00 00       	push   0x158
c0013a0c:	e8 6f e7 ff ff       	call   c0012180 <operator new(unsigned long)>
c0013a11:	89 c3                	mov    ebx,eax
c0013a13:	89 04 24             	mov    DWORD PTR [esp],eax
c0013a16:	e8 d5 96 00 00       	call   c001d0f0 <AVX::AVX()>
c0013a1b:	eb 5b                	jmp    c0013a78 <setupFPU()+0x86>
c0013a1d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013a23:	84 c0                	test   al,al
c0013a25:	79 19                	jns    c0013a40 <setupFPU()+0x4e>
c0013a27:	83 ec 0c             	sub    esp,0xc
c0013a2a:	68 58 01 00 00       	push   0x158
c0013a2f:	e8 4c e7 ff ff       	call   c0012180 <operator new(unsigned long)>
c0013a34:	89 c3                	mov    ebx,eax
c0013a36:	89 04 24             	mov    DWORD PTR [esp],eax
c0013a39:	e8 d8 97 00 00       	call   c001d216 <SSE::SSE()>
c0013a3e:	eb 38                	jmp    c0013a78 <setupFPU()+0x86>
c0013a40:	a8 20                	test   al,0x20
c0013a42:	74 19                	je     c0013a5d <setupFPU()+0x6b>
c0013a44:	83 ec 0c             	sub    esp,0xc
c0013a47:	68 58 01 00 00       	push   0x158
c0013a4c:	e8 2f e7 ff ff       	call   c0012180 <operator new(unsigned long)>
c0013a51:	89 c3                	mov    ebx,eax
c0013a53:	89 04 24             	mov    DWORD PTR [esp],eax
c0013a56:	e8 25 97 00 00       	call   c001d180 <MMX::MMX()>
c0013a5b:	eb 1b                	jmp    c0013a78 <setupFPU()+0x86>
c0013a5d:	a8 10                	test   al,0x10
c0013a5f:	74 1c                	je     c0013a7d <setupFPU()+0x8b>
c0013a61:	83 ec 0c             	sub    esp,0xc
c0013a64:	68 58 01 00 00       	push   0x158
c0013a69:	e8 12 e7 ff ff       	call   c0012180 <operator new(unsigned long)>
c0013a6e:	89 c3                	mov    ebx,eax
c0013a70:	89 04 24             	mov    DWORD PTR [esp],eax
c0013a73:	e8 2c 98 00 00       	call   c001d2a4 <x87::x87()>
c0013a78:	83 c4 10             	add    esp,0x10
c0013a7b:	eb 12                	jmp    c0013a8f <setupFPU()+0x9d>
c0013a7d:	83 ec 0c             	sub    esp,0xc
c0013a80:	31 db                	xor    ebx,ebx
c0013a82:	68 88 97 03 c0       	push   0xc0039788
c0013a87:	e8 62 92 ff ff       	call   c000ccee <panic(char const*)>
c0013a8c:	83 c4 10             	add    esp,0x10
c0013a8f:	89 d8                	mov    eax,ebx
c0013a91:	83 c4 08             	add    esp,0x8
c0013a94:	5b                   	pop    ebx
c0013a95:	c3                   	ret    

c0013a96 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0013a96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a9a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013a9e:	c1 e0 04             	shl    eax,0x4
c0013aa1:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013aa5:	8d 50 10             	lea    edx,[eax+0x10]
c0013aa8:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0013aae:	74 08                	je     c0013ab8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0013ab0:	83 c0 04             	add    eax,0x4
c0013ab3:	39 d0                	cmp    eax,edx
c0013ab5:	75 f1                	jne    c0013aa8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0013ab7:	c3                   	ret    
c0013ab8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013ac2:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013acc:	eb e2                	jmp    c0013ab0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0013ace <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0013ace:	57                   	push   edi
c0013acf:	31 c0                	xor    eax,eax
c0013ad1:	56                   	push   esi
c0013ad2:	53                   	push   ebx
c0013ad3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013ad7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013adb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013adf:	89 da                	mov    edx,ebx
c0013ae1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013ae5:	c1 e2 04             	shl    edx,0x4
c0013ae8:	01 ca                	add    edx,ecx
c0013aea:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0013af2:	74 16                	je     c0013b0a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0013af4:	40                   	inc    eax
c0013af5:	83 f8 04             	cmp    eax,0x4
c0013af8:	75 f0                	jne    c0013aea <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0013afa:	c7 44 24 10 c8 97 03 c0 	mov    DWORD PTR [esp+0x10],0xc00397c8
c0013b02:	5b                   	pop    ebx
c0013b03:	5e                   	pop    esi
c0013b04:	5f                   	pop    edi
c0013b05:	e9 e4 91 ff ff       	jmp    c000ccee <panic(char const*)>
c0013b0a:	8d 04 98             	lea    eax,[eax+ebx*4]
c0013b0d:	8d 04 81             	lea    eax,[ecx+eax*4]
c0013b10:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0013b16:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0013b1c:	5b                   	pop    ebx
c0013b1d:	5e                   	pop    esi
c0013b1e:	5f                   	pop    edi
c0013b1f:	c3                   	ret    

c0013b20 <doubleFault(regs*, void*)>:
c0013b20:	c7 44 24 04 f8 98 03 c0 	mov    DWORD PTR [esp+0x4],0xc00398f8
c0013b28:	e9 c1 91 ff ff       	jmp    c000ccee <panic(char const*)>
c0013b2d:	90                   	nop

c0013b2e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013b2e:	56                   	push   esi
c0013b2f:	53                   	push   ebx
c0013b30:	50                   	push   eax
c0013b31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013b35:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013b39:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013b3e:	75 35                	jne    c0013b75 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0013b40:	8d 43 20             	lea    eax,[ebx+0x20]
c0013b43:	31 d2                	xor    edx,edx
c0013b45:	89 c1                	mov    ecx,eax
c0013b47:	c1 e1 04             	shl    ecx,0x4
c0013b4a:	01 f1                	add    ecx,esi
c0013b4c:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0013b54:	74 3e                	je     c0013b94 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0013b56:	42                   	inc    edx
c0013b57:	83 fa 04             	cmp    edx,0x4
c0013b5a:	75 f0                	jne    c0013b4c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0013b5c:	83 ec 0c             	sub    esp,0xc
c0013b5f:	68 3c 98 03 c0       	push   0xc003983c
c0013b64:	e8 85 91 ff ff       	call   c000ccee <panic(char const*)>
c0013b69:	83 c4 10             	add    esp,0x10
c0013b6c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013b71:	5a                   	pop    edx
c0013b72:	5b                   	pop    ebx
c0013b73:	5e                   	pop    esi
c0013b74:	c3                   	ret    
c0013b75:	83 ec 0c             	sub    esp,0xc
c0013b78:	56                   	push   esi
c0013b79:	e8 ee fb ff ff       	call   c001376c <Device::getName()>
c0013b7e:	83 c4 10             	add    esp,0x10
c0013b81:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013b84:	75 ba                	jne    c0013b40 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013b86:	83 fb 0f             	cmp    ebx,0xf
c0013b89:	7f 29                	jg     c0013bb4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0013b8b:	0f b6 9b 60 ae 03 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffc51a0]
c0013b92:	eb ac                	jmp    c0013b40 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013b94:	8d 04 82             	lea    eax,[edx+eax*4]
c0013b97:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b9b:	8d 04 86             	lea    eax,[esi+eax*4]
c0013b9e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0013ba4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013ba8:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0013bae:	89 d8                	mov    eax,ebx
c0013bb0:	5a                   	pop    edx
c0013bb1:	5b                   	pop    ebx
c0013bb2:	5e                   	pop    esi
c0013bb3:	c3                   	ret    
c0013bb4:	83 ec 0c             	sub    esp,0xc
c0013bb7:	68 04 98 03 c0       	push   0xc0039804
c0013bbc:	e8 2d 91 ff ff       	call   c000ccee <panic(char const*)>
c0013bc1:	83 c4 10             	add    esp,0x10
c0013bc4:	e9 77 ff ff ff       	jmp    c0013b40 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013bc9:	90                   	nop

c0013bca <InterruptController::clearAllHandlers(int, bool)>:
c0013bca:	56                   	push   esi
c0013bcb:	53                   	push   ebx
c0013bcc:	52                   	push   edx
c0013bcd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013bd1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013bd5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0013bda:	75 61                	jne    c0013c3d <InterruptController::clearAllHandlers(int, bool)+0x73>
c0013bdc:	8d 46 20             	lea    eax,[esi+0x20]
c0013bdf:	c1 e6 04             	shl    esi,0x4
c0013be2:	c1 e0 04             	shl    eax,0x4
c0013be5:	01 de                	add    esi,ebx
c0013be7:	01 d8                	add    eax,ebx
c0013be9:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0013bf3:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0013bfd:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0013c07:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0013c11:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0013c1b:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0013c25:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0013c2f:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0013c39:	58                   	pop    eax
c0013c3a:	5b                   	pop    ebx
c0013c3b:	5e                   	pop    esi
c0013c3c:	c3                   	ret    
c0013c3d:	83 ec 0c             	sub    esp,0xc
c0013c40:	53                   	push   ebx
c0013c41:	e8 26 fb ff ff       	call   c001376c <Device::getName()>
c0013c46:	83 c4 10             	add    esp,0x10
c0013c49:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013c4c:	75 8e                	jne    c0013bdc <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013c4e:	83 fe 0f             	cmp    esi,0xf
c0013c51:	7f 09                	jg     c0013c5c <InterruptController::clearAllHandlers(int, bool)+0x92>
c0013c53:	0f b6 b6 60 ae 03 c0 	movzx  esi,BYTE PTR [esi-0x3ffc51a0]
c0013c5a:	eb 80                	jmp    c0013bdc <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013c5c:	83 ec 0c             	sub    esp,0xc
c0013c5f:	68 78 98 03 c0       	push   0xc0039878
c0013c64:	e8 85 90 ff ff       	call   c000ccee <panic(char const*)>
c0013c69:	83 c4 10             	add    esp,0x10
c0013c6c:	e9 6b ff ff ff       	jmp    c0013bdc <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013c71:	90                   	nop

c0013c72 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013c72:	56                   	push   esi
c0013c73:	53                   	push   ebx
c0013c74:	52                   	push   edx
c0013c75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c79:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c7d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013c82:	75 3a                	jne    c0013cbe <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0013c84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c88:	8d 50 20             	lea    edx,[eax+0x20]
c0013c8b:	c1 e2 04             	shl    edx,0x4
c0013c8e:	8d 04 16             	lea    eax,[esi+edx*1]
c0013c91:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0013c95:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0013c9b:	74 0b                	je     c0013ca8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0013c9d:	83 c0 04             	add    eax,0x4
c0013ca0:	39 d0                	cmp    eax,edx
c0013ca2:	75 f1                	jne    c0013c95 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0013ca4:	58                   	pop    eax
c0013ca5:	5b                   	pop    ebx
c0013ca6:	5e                   	pop    esi
c0013ca7:	c3                   	ret    
c0013ca8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013cb2:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013cbc:	eb df                	jmp    c0013c9d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0013cbe:	83 ec 0c             	sub    esp,0xc
c0013cc1:	56                   	push   esi
c0013cc2:	e8 a5 fa ff ff       	call   c001376c <Device::getName()>
c0013cc7:	83 c4 10             	add    esp,0x10
c0013cca:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013ccd:	75 b5                	jne    c0013c84 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013ccf:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0013cd4:	7f 11                	jg     c0013ce7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0013cd6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cda:	0f b6 80 60 ae 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffc51a0]
c0013ce1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ce5:	eb 9d                	jmp    c0013c84 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013ce7:	83 ec 0c             	sub    esp,0xc
c0013cea:	68 78 98 03 c0       	push   0xc0039878
c0013cef:	e8 fa 8f ff ff       	call   c000ccee <panic(char const*)>
c0013cf4:	83 c4 10             	add    esp,0x10
c0013cf7:	eb 8b                	jmp    c0013c84 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0013cf9 <nmiHandler(regs*, void*)>:
c0013cf9:	a1 08 b7 03 c0       	mov    eax,ds:0xc003b708
c0013cfe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013d02:	e9 5b 77 ff ff       	jmp    c000b462 <Computer::handleNMI()>

c0013d07 <int_handler>:
c0013d07:	55                   	push   ebp
c0013d08:	57                   	push   edi
c0013d09:	56                   	push   esi
c0013d0a:	53                   	push   ebx
c0013d0b:	83 ec 0c             	sub    esp,0xc
c0013d0e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013d12:	80 3d b2 b8 03 c0 00 	cmp    BYTE PTR ds:0xc003b8b2,0x0
c0013d19:	74 0b                	je     c0013d26 <int_handler+0x1f>
c0013d1b:	fa                   	cli    
c0013d1c:	f4                   	hlt    
c0013d1d:	80 3d b2 b8 03 c0 00 	cmp    BYTE PTR ds:0xc003b8b2,0x0
c0013d24:	75 f5                	jne    c0013d1b <int_handler+0x14>
c0013d26:	e8 8b 31 00 00       	call   c0016eb6 <thisCPU()>
c0013d2b:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0013d2e:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0013d34:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013d37:	83 f8 17             	cmp    eax,0x17
c0013d3a:	77 13                	ja     c0013d4f <int_handler+0x48>
c0013d3c:	83 ec 08             	sub    esp,0x8
c0013d3f:	8b 17                	mov    edx,DWORD PTR [edi]
c0013d41:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013d44:	0f b6 c0             	movzx  eax,al
c0013d47:	50                   	push   eax
c0013d48:	57                   	push   edi
c0013d49:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0013d4c:	83 c4 10             	add    esp,0x10
c0013d4f:	83 c3 15             	add    ebx,0x15
c0013d52:	c1 e3 04             	shl    ebx,0x4
c0013d55:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0013d59:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0013d60:	31 db                	xor    ebx,ebx
c0013d62:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0013d66:	85 c0                	test   eax,eax
c0013d68:	74 13                	je     c0013d7d <int_handler+0x76>
c0013d6a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013d6d:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0013d71:	74 1c                	je     c0013d8f <int_handler+0x88>
c0013d73:	83 ec 08             	sub    esp,0x8
c0013d76:	52                   	push   edx
c0013d77:	56                   	push   esi
c0013d78:	ff d0                	call   eax
c0013d7a:	83 c4 10             	add    esp,0x10
c0013d7d:	43                   	inc    ebx
c0013d7e:	83 fb 04             	cmp    ebx,0x4
c0013d81:	75 df                	jne    c0013d62 <int_handler+0x5b>
c0013d83:	83 c4 0c             	add    esp,0xc
c0013d86:	31 c0                	xor    eax,eax
c0013d88:	5b                   	pop    ebx
c0013d89:	31 d2                	xor    edx,edx
c0013d8b:	5e                   	pop    esi
c0013d8c:	5f                   	pop    edi
c0013d8d:	5d                   	pop    ebp
c0013d8e:	c3                   	ret    
c0013d8f:	83 ec 08             	sub    esp,0x8
c0013d92:	52                   	push   edx
c0013d93:	56                   	push   esi
c0013d94:	ff d0                	call   eax
c0013d96:	83 c4 10             	add    esp,0x10
c0013d99:	83 c4 0c             	add    esp,0xc
c0013d9c:	5b                   	pop    ebx
c0013d9d:	5e                   	pop    esi
c0013d9e:	5f                   	pop    edi
c0013d9f:	5d                   	pop    ebp
c0013da0:	c3                   	ret    
c0013da1:	90                   	nop

c0013da2 <InterruptController::InterruptController(char const*)>:
c0013da2:	83 ec 1c             	sub    esp,0x1c
c0013da5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013da9:	83 ec 08             	sub    esp,0x8
c0013dac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013db0:	50                   	push   eax
c0013db1:	e8 c4 f8 ff ff       	call   c001367a <Device::Device(char const*)>
c0013db6:	83 c4 10             	add    esp,0x10
c0013db9:	ba 70 9a 03 c0       	mov    edx,0xc0039a70
c0013dbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dc2:	89 10                	mov    DWORD PTR [eax],edx
c0013dc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dc8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0013dd2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013dda:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0013de2:	7f 5e                	jg     c0013e42 <InterruptController::InterruptController(char const*)+0xa0>
c0013de4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013dec:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0013df1:	7f 49                	jg     c0013e3c <InterruptController::InterruptController(char const*)+0x9a>
c0013df3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013df7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013dfb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0013e02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013e06:	01 ca                	add    edx,ecx
c0013e08:	83 c2 54             	add    edx,0x54
c0013e0b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0013e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013e1b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0013e22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013e26:	01 ca                	add    edx,ecx
c0013e28:	81 c2 54 04 00 00    	add    edx,0x454
c0013e2e:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0013e36:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013e3a:	eb b0                	jmp    c0013dec <InterruptController::InterruptController(char const*)+0x4a>
c0013e3c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0013e40:	eb 98                	jmp    c0013dda <InterruptController::InterruptController(char const*)+0x38>
c0013e42:	90                   	nop
c0013e43:	83 c4 1c             	add    esp,0x1c
c0013e46:	c3                   	ret    
c0013e47:	90                   	nop

c0013e48 <InterruptController::~InterruptController()>:
c0013e48:	83 ec 0c             	sub    esp,0xc
c0013e4b:	ba 70 9a 03 c0       	mov    edx,0xc0039a70
c0013e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e54:	89 10                	mov    DWORD PTR [eax],edx
c0013e56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e5a:	83 ec 0c             	sub    esp,0xc
c0013e5d:	50                   	push   eax
c0013e5e:	e8 c9 f4 ff ff       	call   c001332c <Device::~Device()>
c0013e63:	83 c4 10             	add    esp,0x10
c0013e66:	90                   	nop
c0013e67:	83 c4 0c             	add    esp,0xc
c0013e6a:	c3                   	ret    
c0013e6b:	90                   	nop

c0013e6c <InterruptController::~InterruptController()>:
c0013e6c:	83 ec 0c             	sub    esp,0xc
c0013e6f:	83 ec 0c             	sub    esp,0xc
c0013e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e76:	e8 cd ff ff ff       	call   c0013e48 <InterruptController::~InterruptController()>
c0013e7b:	83 c4 10             	add    esp,0x10
c0013e7e:	83 ec 08             	sub    esp,0x8
c0013e81:	68 58 21 00 00       	push   0x2158
c0013e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e8a:	e8 00 e3 ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c0013e8f:	83 c4 10             	add    esp,0x10
c0013e92:	83 c4 0c             	add    esp,0xc
c0013e95:	c3                   	ret    

c0013e96 <displayDebugInfo(regs*)>:
c0013e96:	55                   	push   ebp
c0013e97:	57                   	push   edi
c0013e98:	56                   	push   esi
c0013e99:	53                   	push   ebx
c0013e9a:	83 ec 24             	sub    esp,0x24
c0013e9d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0013ea1:	0f 20 c2             	mov    edx,cr0
c0013ea4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0013ea8:	0f 20 d7             	mov    edi,cr2
c0013eab:	0f 20 de             	mov    esi,cr3
c0013eae:	0f 20 e5             	mov    ebp,cr4
c0013eb1:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0013eb4:	68 05 99 03 c0       	push   0xc0039905
c0013eb9:	e8 12 8d ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0013ebe:	58                   	pop    eax
c0013ebf:	5a                   	pop    edx
c0013ec0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013ec3:	68 10 99 03 c0       	push   0xc0039910
c0013ec8:	e8 03 8d ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0013ecd:	59                   	pop    ecx
c0013ece:	58                   	pop    eax
c0013ecf:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013ed2:	68 1b 99 03 c0       	push   0xc003991b
c0013ed7:	e8 f4 8c ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0013edc:	58                   	pop    eax
c0013edd:	5a                   	pop    edx
c0013ede:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013ee1:	68 26 99 03 c0       	push   0xc0039926
c0013ee6:	e8 e5 8c ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0013eeb:	59                   	pop    ecx
c0013eec:	58                   	pop    eax
c0013eed:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0013ef0:	68 31 99 03 c0       	push   0xc0039931
c0013ef5:	e8 d6 8c ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0013efa:	58                   	pop    eax
c0013efb:	5a                   	pop    edx
c0013efc:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0013eff:	68 3c 99 03 c0       	push   0xc003993c
c0013f04:	e8 c7 8c ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0013f09:	59                   	pop    ecx
c0013f0a:	58                   	pop    eax
c0013f0b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0013f0e:	68 56 99 03 c0       	push   0xc0039956
c0013f13:	e8 b8 8c ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0013f18:	58                   	pop    eax
c0013f19:	5a                   	pop    edx
c0013f1a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0013f1d:	68 47 99 03 c0       	push   0xc0039947
c0013f22:	e8 a9 8c ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0013f27:	59                   	pop    ecx
c0013f28:	58                   	pop    eax
c0013f29:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0013f2c:	68 52 99 03 c0       	push   0xc0039952
c0013f31:	e8 9a 8c ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0013f36:	58                   	pop    eax
c0013f37:	5a                   	pop    edx
c0013f38:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0013f3b:	68 61 99 03 c0       	push   0xc0039961
c0013f40:	e8 8b 8c ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0013f45:	59                   	pop    ecx
c0013f46:	58                   	pop    eax
c0013f47:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0013f4a:	68 6c 99 03 c0       	push   0xc003996c
c0013f4f:	e8 7c 8c ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0013f54:	58                   	pop    eax
c0013f55:	5a                   	pop    edx
c0013f56:	57                   	push   edi
c0013f57:	68 77 99 03 c0       	push   0xc0039977
c0013f5c:	e8 6f 8c ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0013f61:	59                   	pop    ecx
c0013f62:	58                   	pop    eax
c0013f63:	56                   	push   esi
c0013f64:	68 82 99 03 c0       	push   0xc0039982
c0013f69:	e8 62 8c ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0013f6e:	58                   	pop    eax
c0013f6f:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c0013f74:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013f7a:	e8 d8 c3 ff ff       	call   c0010357 <setActiveTerminal(VgaText*)>
c0013f7f:	58                   	pop    eax
c0013f80:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0013f83:	5a                   	pop    edx
c0013f84:	c1 e0 05             	shl    eax,0x5
c0013f87:	05 c0 ab 03 c0       	add    eax,0xc003abc0
c0013f8c:	50                   	push   eax
c0013f8d:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c0013f92:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013f98:	e8 d9 c7 ff ff       	call   c0010776 <VgaText::puts(char const*)>
c0013f9d:	59                   	pop    ecx
c0013f9e:	58                   	pop    eax
c0013f9f:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c0013fa4:	68 8d 99 03 c0       	push   0xc003998d
c0013fa9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013faf:	e8 c2 c7 ff ff       	call   c0010776 <VgaText::puts(char const*)>
c0013fb4:	58                   	pop    eax
c0013fb5:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c0013fba:	5a                   	pop    edx
c0013fbb:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0013fbe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013fc4:	e8 d3 c7 ff ff       	call   c001079c <VgaText::putx(unsigned int)>
c0013fc9:	59                   	pop    ecx
c0013fca:	58                   	pop    eax
c0013fcb:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c0013fd0:	68 95 99 03 c0       	push   0xc0039995
c0013fd5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013fdb:	e8 96 c7 ff ff       	call   c0010776 <VgaText::puts(char const*)>
c0013fe0:	58                   	pop    eax
c0013fe1:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c0013fe6:	5a                   	pop    edx
c0013fe7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0013fea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0013ff0:	e8 a7 c7 ff ff       	call   c001079c <VgaText::putx(unsigned int)>
c0013ff5:	59                   	pop    ecx
c0013ff6:	58                   	pop    eax
c0013ff7:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c0013ffc:	68 9d 99 03 c0       	push   0xc003999d
c0014001:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014007:	e8 6a c7 ff ff       	call   c0010776 <VgaText::puts(char const*)>
c001400c:	58                   	pop    eax
c001400d:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c0014012:	5a                   	pop    edx
c0014013:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014016:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001401c:	e8 7b c7 ff ff       	call   c001079c <VgaText::putx(unsigned int)>
c0014021:	59                   	pop    ecx
c0014022:	58                   	pop    eax
c0014023:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c0014028:	68 a5 99 03 c0       	push   0xc00399a5
c001402d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014033:	e8 3e c7 ff ff       	call   c0010776 <VgaText::puts(char const*)>
c0014038:	58                   	pop    eax
c0014039:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c001403e:	5a                   	pop    edx
c001403f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014042:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014048:	e8 4f c7 ff ff       	call   c001079c <VgaText::putx(unsigned int)>
c001404d:	59                   	pop    ecx
c001404e:	58                   	pop    eax
c001404f:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c0014054:	68 ad 99 03 c0       	push   0xc00399ad
c0014059:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001405f:	e8 12 c7 ff ff       	call   c0010776 <VgaText::puts(char const*)>
c0014064:	58                   	pop    eax
c0014065:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c001406a:	5a                   	pop    edx
c001406b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001406e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014074:	e8 23 c7 ff ff       	call   c001079c <VgaText::putx(unsigned int)>
c0014079:	59                   	pop    ecx
c001407a:	58                   	pop    eax
c001407b:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c0014080:	68 b5 99 03 c0       	push   0xc00399b5
c0014085:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001408b:	e8 e6 c6 ff ff       	call   c0010776 <VgaText::puts(char const*)>
c0014090:	58                   	pop    eax
c0014091:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c0014096:	5a                   	pop    edx
c0014097:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c001409a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00140a0:	e8 f7 c6 ff ff       	call   c001079c <VgaText::putx(unsigned int)>
c00140a5:	59                   	pop    ecx
c00140a6:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c00140ab:	5b                   	pop    ebx
c00140ac:	68 bd 99 03 c0       	push   0xc00399bd
c00140b1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00140b7:	e8 ba c6 ff ff       	call   c0010776 <VgaText::puts(char const*)>
c00140bc:	58                   	pop    eax
c00140bd:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c00140c2:	5a                   	pop    edx
c00140c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00140c7:	52                   	push   edx
c00140c8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00140ce:	e8 c9 c6 ff ff       	call   c001079c <VgaText::putx(unsigned int)>
c00140d3:	59                   	pop    ecx
c00140d4:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c00140d9:	5b                   	pop    ebx
c00140da:	68 c6 99 03 c0       	push   0xc00399c6
c00140df:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00140e5:	e8 8c c6 ff ff       	call   c0010776 <VgaText::puts(char const*)>
c00140ea:	58                   	pop    eax
c00140eb:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c00140f0:	5a                   	pop    edx
c00140f1:	57                   	push   edi
c00140f2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00140f8:	e8 9f c6 ff ff       	call   c001079c <VgaText::putx(unsigned int)>
c00140fd:	59                   	pop    ecx
c00140fe:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c0014103:	5b                   	pop    ebx
c0014104:	68 ce 99 03 c0       	push   0xc00399ce
c0014109:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001410f:	e8 62 c6 ff ff       	call   c0010776 <VgaText::puts(char const*)>
c0014114:	5f                   	pop    edi
c0014115:	58                   	pop    eax
c0014116:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c001411b:	56                   	push   esi
c001411c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014122:	e8 75 c6 ff ff       	call   c001079c <VgaText::putx(unsigned int)>
c0014127:	58                   	pop    eax
c0014128:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c001412d:	5a                   	pop    edx
c001412e:	68 d6 99 03 c0       	push   0xc00399d6
c0014133:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014139:	e8 38 c6 ff ff       	call   c0010776 <VgaText::puts(char const*)>
c001413e:	59                   	pop    ecx
c001413f:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c0014144:	5b                   	pop    ebx
c0014145:	55                   	push   ebp
c0014146:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001414c:	e8 4b c6 ff ff       	call   c001079c <VgaText::putx(unsigned int)>
c0014151:	5e                   	pop    esi
c0014152:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c0014157:	5f                   	pop    edi
c0014158:	68 de 99 03 c0       	push   0xc00399de
c001415d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014163:	e8 0e c6 ff ff       	call   c0010776 <VgaText::puts(char const*)>
c0014168:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c001416d:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014173:	e8 c8 ab 00 00       	call   c001ed40 <CPU::readDR0()>
c0014178:	5d                   	pop    ebp
c0014179:	5a                   	pop    edx
c001417a:	50                   	push   eax
c001417b:	53                   	push   ebx
c001417c:	e8 1b c6 ff ff       	call   c001079c <VgaText::putx(unsigned int)>
c0014181:	59                   	pop    ecx
c0014182:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c0014187:	5b                   	pop    ebx
c0014188:	68 e7 99 03 c0       	push   0xc00399e7
c001418d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014193:	e8 de c5 ff ff       	call   c0010776 <VgaText::puts(char const*)>
c0014198:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c001419d:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00141a3:	e8 aa ab 00 00       	call   c001ed52 <CPU::readDR1()>
c00141a8:	5e                   	pop    esi
c00141a9:	5f                   	pop    edi
c00141aa:	50                   	push   eax
c00141ab:	53                   	push   ebx
c00141ac:	e8 eb c5 ff ff       	call   c001079c <VgaText::putx(unsigned int)>
c00141b1:	5d                   	pop    ebp
c00141b2:	58                   	pop    eax
c00141b3:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c00141b8:	68 ef 99 03 c0       	push   0xc00399ef
c00141bd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141c3:	e8 ae c5 ff ff       	call   c0010776 <VgaText::puts(char const*)>
c00141c8:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c00141cd:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00141d3:	e8 8c ab 00 00       	call   c001ed64 <CPU::readDR2()>
c00141d8:	5a                   	pop    edx
c00141d9:	59                   	pop    ecx
c00141da:	50                   	push   eax
c00141db:	53                   	push   ebx
c00141dc:	e8 bb c5 ff ff       	call   c001079c <VgaText::putx(unsigned int)>
c00141e1:	5b                   	pop    ebx
c00141e2:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c00141e7:	5e                   	pop    esi
c00141e8:	68 f7 99 03 c0       	push   0xc00399f7
c00141ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141f3:	e8 7e c5 ff ff       	call   c0010776 <VgaText::puts(char const*)>
c00141f8:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c00141fd:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014203:	e8 6e ab 00 00       	call   c001ed76 <CPU::readDR3()>
c0014208:	5f                   	pop    edi
c0014209:	5d                   	pop    ebp
c001420a:	50                   	push   eax
c001420b:	53                   	push   ebx
c001420c:	e8 8b c5 ff ff       	call   c001079c <VgaText::putx(unsigned int)>
c0014211:	58                   	pop    eax
c0014212:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c0014217:	5a                   	pop    edx
c0014218:	68 ff 99 03 c0       	push   0xc00399ff
c001421d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014223:	e8 4e c5 ff ff       	call   c0010776 <VgaText::puts(char const*)>
c0014228:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c001422d:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014233:	e8 50 ab 00 00       	call   c001ed88 <CPU::readDR6()>
c0014238:	59                   	pop    ecx
c0014239:	5e                   	pop    esi
c001423a:	50                   	push   eax
c001423b:	53                   	push   ebx
c001423c:	e8 5b c5 ff ff       	call   c001079c <VgaText::putx(unsigned int)>
c0014241:	5f                   	pop    edi
c0014242:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c0014247:	5d                   	pop    ebp
c0014248:	68 07 9a 03 c0       	push   0xc0039a07
c001424d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014253:	e8 1e c5 ff ff       	call   c0010776 <VgaText::puts(char const*)>
c0014258:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c001425d:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014263:	e8 32 ab 00 00       	call   c001ed9a <CPU::readDR7()>
c0014268:	5a                   	pop    edx
c0014269:	59                   	pop    ecx
c001426a:	50                   	push   eax
c001426b:	53                   	push   ebx
c001426c:	e8 2b c5 ff ff       	call   c001079c <VgaText::putx(unsigned int)>
c0014271:	fa                   	cli    
c0014272:	f4                   	hlt    
c0014273:	83 c4 10             	add    esp,0x10
c0014276:	eb fe                	jmp    c0014276 <displayDebugInfo(regs*)+0x3e0>

c0014278 <gpFault(regs*, void*)>:
c0014278:	53                   	push   ebx
c0014279:	83 ec 14             	sub    esp,0x14
c001427c:	c7 05 e8 bb 03 c0 9b 84 01 c0 	mov    DWORD PTR ds:0xc003bbe8,0xc001849b
c0014286:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001428a:	53                   	push   ebx
c001428b:	e8 0b 42 00 00       	call   c001849b <vm8086FaultHandler(regs*)>
c0014290:	83 c4 10             	add    esp,0x10
c0014293:	84 c0                	test   al,al
c0014295:	74 05                	je     c001429c <gpFault(regs*, void*)+0x24>
c0014297:	83 c4 08             	add    esp,0x8
c001429a:	5b                   	pop    ebx
c001429b:	c3                   	ret    
c001429c:	83 ec 0c             	sub    esp,0xc
c001429f:	68 0f 9a 03 c0       	push   0xc0039a0f
c00142a4:	e8 27 89 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c00142a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00142ac:	e8 e5 fb ff ff       	call   c0013e96 <displayDebugInfo(regs*)>

c00142b1 <pgFault(regs*, void*)>:
c00142b1:	83 ec 18             	sub    esp,0x18
c00142b4:	68 2a 9a 03 c0       	push   0xc0039a2a
c00142b9:	e8 12 89 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c00142be:	58                   	pop    eax
c00142bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142c3:	e8 ce fb ff ff       	call   c0013e96 <displayDebugInfo(regs*)>

c00142c8 <otherISRHandler(regs*, void*)>:
c00142c8:	53                   	push   ebx
c00142c9:	83 ec 0c             	sub    esp,0xc
c00142cc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00142d0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00142d3:	50                   	push   eax
c00142d4:	50                   	push   eax
c00142d5:	68 37 9a 03 c0       	push   0xc0039a37
c00142da:	e8 f1 88 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c00142df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00142e2:	e8 af fb ff ff       	call   c0013e96 <displayDebugInfo(regs*)>

c00142e7 <opcodeFault(regs*, void*)>:
c00142e7:	53                   	push   ebx
c00142e8:	83 ec 08             	sub    esp,0x8
c00142eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00142ef:	e8 c2 2b 00 00       	call   c0016eb6 <thisCPU()>
c00142f4:	80 b8 94 11 00 00 00 	cmp    BYTE PTR [eax+0x1194],0x0
c00142fb:	74 16                	je     c0014313 <opcodeFault(regs*, void*)+0x2c>
c00142fd:	83 ec 0c             	sub    esp,0xc
c0014300:	68 b4 98 03 c0       	push   0xc00398b4
c0014305:	e8 c6 88 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001430a:	83 43 38 19          	add    DWORD PTR [ebx+0x38],0x19
c001430e:	83 c4 18             	add    esp,0x18
c0014311:	5b                   	pop    ebx
c0014312:	c3                   	ret    
c0014313:	83 ec 0c             	sub    esp,0xc
c0014316:	68 54 9a 03 c0       	push   0xc0039a54
c001431b:	e8 b0 88 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0014320:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014323:	c1 e0 04             	shl    eax,0x4
c0014326:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0014329:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c001432d:	89 14 24             	mov    DWORD PTR [esp],edx
c0014330:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0014334:	52                   	push   edx
c0014335:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0014339:	52                   	push   edx
c001433a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c001433d:	50                   	push   eax
c001433e:	68 d8 98 03 c0       	push   0xc00398d8
c0014343:	e8 88 88 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0014348:	83 c4 14             	add    esp,0x14
c001434b:	53                   	push   ebx
c001434c:	e8 45 fb ff ff       	call   c0013e96 <displayDebugInfo(regs*)>

c0014351 <displayProgramFault(char const*)>:
c0014351:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014356:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014359:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001435f:	85 c0                	test   eax,eax
c0014361:	74 15                	je     c0014378 <displayProgramFault(char const*)+0x27>
c0014363:	83 ec 0c             	sub    esp,0xc
c0014366:	6a 04                	push   0x4
c0014368:	6a 0f                	push   0xf
c001436a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001436e:	50                   	push   eax
c001436f:	e8 c4 c0 ff ff       	call   c0010438 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014374:	83 c4 1c             	add    esp,0x1c
c0014377:	c3                   	ret    
c0014378:	c3                   	ret    
c0014379:	90                   	nop

c001437a <InterruptController::convertLegacyIRQNumber(int)>:
c001437a:	53                   	push   ebx
c001437b:	83 ec 14             	sub    esp,0x14
c001437e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014386:	e8 e1 f3 ff ff       	call   c001376c <Device::getName()>
c001438b:	83 c4 10             	add    esp,0x10
c001438e:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014391:	74 07                	je     c001439a <InterruptController::convertLegacyIRQNumber(int)+0x20>
c0014393:	89 d8                	mov    eax,ebx
c0014395:	83 c4 08             	add    esp,0x8
c0014398:	5b                   	pop    ebx
c0014399:	c3                   	ret    
c001439a:	83 fb 0f             	cmp    ebx,0xf
c001439d:	7f 0e                	jg     c00143ad <InterruptController::convertLegacyIRQNumber(int)+0x33>
c001439f:	0f b6 9b 60 ae 03 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffc51a0]
c00143a6:	83 c4 08             	add    esp,0x8
c00143a9:	89 d8                	mov    eax,ebx
c00143ab:	5b                   	pop    ebx
c00143ac:	c3                   	ret    
c00143ad:	83 ec 0c             	sub    esp,0xc
c00143b0:	68 04 98 03 c0       	push   0xc0039804
c00143b5:	e8 34 89 ff ff       	call   c000ccee <panic(char const*)>
c00143ba:	89 d8                	mov    eax,ebx
c00143bc:	83 c4 10             	add    esp,0x10
c00143bf:	83 c4 08             	add    esp,0x8
c00143c2:	5b                   	pop    ebx
c00143c3:	c3                   	ret    

c00143c4 <setupInterruptController()>:
c00143c4:	56                   	push   esi
c00143c5:	53                   	push   ebx
c00143c6:	51                   	push   ecx
c00143c7:	e8 e7 2a 00 00       	call   c0016eb3 <getCPUNumber()>
c00143cc:	85 c0                	test   eax,eax
c00143ce:	0f 85 10 02 00 00    	jne    c00145e4 <setupInterruptController()+0x220>
c00143d4:	83 ec 0c             	sub    esp,0xc
c00143d7:	a1 08 b7 03 c0       	mov    eax,ds:0xc003b708
c00143dc:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00143e2:	68 58 21 00 00       	push   0x2158
c00143e7:	83 e0 01             	and    eax,0x1
c00143ea:	89 c6                	mov    esi,eax
c00143ec:	e8 8f dd ff ff       	call   c0012180 <operator new(unsigned long)>
c00143f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00143f4:	89 c3                	mov    ebx,eax
c00143f6:	e8 15 95 00 00       	call   c001d910 <PIC::PIC()>
c00143fb:	6a 00                	push   0x0
c00143fd:	6a 00                	push   0x0
c00143ff:	6a 00                	push   0x0
c0014401:	53                   	push   ebx
c0014402:	e8 4d 98 00 00       	call   c001dc54 <PIC::open(int, int, void*)>
c0014407:	83 c4 20             	add    esp,0x20
c001440a:	89 f0                	mov    eax,esi
c001440c:	84 c0                	test   al,al
c001440e:	0f 85 92 01 00 00    	jne    c00145a6 <setupInterruptController()+0x1e2>
c0014414:	83 ec 08             	sub    esp,0x8
c0014417:	53                   	push   ebx
c0014418:	ff 35 08 b7 03 c0    	push   DWORD PTR ds:0xc003b708
c001441e:	e8 67 f0 ff ff       	call   c001348a <Device::addChild(Device*)>
c0014423:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014425:	6a 00                	push   0x0
c0014427:	68 c8 42 01 c0       	push   0xc00142c8
c001442c:	6a 00                	push   0x0
c001442e:	53                   	push   ebx
c001442f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014432:	83 c4 20             	add    esp,0x20
c0014435:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014437:	6a 00                	push   0x0
c0014439:	68 c8 42 01 c0       	push   0xc00142c8
c001443e:	6a 01                	push   0x1
c0014440:	53                   	push   ebx
c0014441:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014444:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014446:	6a 00                	push   0x0
c0014448:	68 f9 3c 01 c0       	push   0xc0013cf9
c001444d:	6a 02                	push   0x2
c001444f:	53                   	push   ebx
c0014450:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014453:	83 c4 20             	add    esp,0x20
c0014456:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014458:	6a 00                	push   0x0
c001445a:	68 c8 42 01 c0       	push   0xc00142c8
c001445f:	6a 03                	push   0x3
c0014461:	53                   	push   ebx
c0014462:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014465:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014467:	6a 00                	push   0x0
c0014469:	68 c8 42 01 c0       	push   0xc00142c8
c001446e:	6a 04                	push   0x4
c0014470:	53                   	push   ebx
c0014471:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014474:	83 c4 20             	add    esp,0x20
c0014477:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014479:	6a 00                	push   0x0
c001447b:	68 c8 42 01 c0       	push   0xc00142c8
c0014480:	6a 05                	push   0x5
c0014482:	53                   	push   ebx
c0014483:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014486:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014488:	6a 00                	push   0x0
c001448a:	68 e7 42 01 c0       	push   0xc00142e7
c001448f:	6a 06                	push   0x6
c0014491:	53                   	push   ebx
c0014492:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014495:	83 c4 20             	add    esp,0x20
c0014498:	8b 03                	mov    eax,DWORD PTR [ebx]
c001449a:	6a 00                	push   0x0
c001449c:	68 c8 42 01 c0       	push   0xc00142c8
c00144a1:	6a 07                	push   0x7
c00144a3:	53                   	push   ebx
c00144a4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00144a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144a9:	6a 00                	push   0x0
c00144ab:	68 20 3b 01 c0       	push   0xc0013b20
c00144b0:	6a 08                	push   0x8
c00144b2:	53                   	push   ebx
c00144b3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00144b6:	83 c4 20             	add    esp,0x20
c00144b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144bb:	6a 00                	push   0x0
c00144bd:	68 c8 42 01 c0       	push   0xc00142c8
c00144c2:	6a 09                	push   0x9
c00144c4:	53                   	push   ebx
c00144c5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00144c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144ca:	6a 00                	push   0x0
c00144cc:	68 c8 42 01 c0       	push   0xc00142c8
c00144d1:	6a 0a                	push   0xa
c00144d3:	53                   	push   ebx
c00144d4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00144d7:	83 c4 20             	add    esp,0x20
c00144da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144dc:	6a 00                	push   0x0
c00144de:	68 c8 42 01 c0       	push   0xc00142c8
c00144e3:	6a 0b                	push   0xb
c00144e5:	53                   	push   ebx
c00144e6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00144e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144eb:	6a 00                	push   0x0
c00144ed:	68 c8 42 01 c0       	push   0xc00142c8
c00144f2:	6a 0c                	push   0xc
c00144f4:	53                   	push   ebx
c00144f5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00144f8:	83 c4 20             	add    esp,0x20
c00144fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144fd:	6a 00                	push   0x0
c00144ff:	68 78 42 01 c0       	push   0xc0014278
c0014504:	6a 0d                	push   0xd
c0014506:	53                   	push   ebx
c0014507:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001450a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001450c:	6a 00                	push   0x0
c001450e:	68 b1 42 01 c0       	push   0xc00142b1
c0014513:	6a 0e                	push   0xe
c0014515:	53                   	push   ebx
c0014516:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014519:	83 c4 20             	add    esp,0x20
c001451c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001451e:	6a 00                	push   0x0
c0014520:	68 c8 42 01 c0       	push   0xc00142c8
c0014525:	6a 0f                	push   0xf
c0014527:	53                   	push   ebx
c0014528:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001452b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001452d:	6a 00                	push   0x0
c001452f:	68 c8 42 01 c0       	push   0xc00142c8
c0014534:	6a 10                	push   0x10
c0014536:	53                   	push   ebx
c0014537:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001453a:	83 c4 20             	add    esp,0x20
c001453d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001453f:	6a 00                	push   0x0
c0014541:	68 c8 42 01 c0       	push   0xc00142c8
c0014546:	6a 11                	push   0x11
c0014548:	53                   	push   ebx
c0014549:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001454c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001454e:	6a 00                	push   0x0
c0014550:	68 c8 42 01 c0       	push   0xc00142c8
c0014555:	6a 12                	push   0x12
c0014557:	53                   	push   ebx
c0014558:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001455b:	83 c4 20             	add    esp,0x20
c001455e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014560:	6a 00                	push   0x0
c0014562:	68 c8 42 01 c0       	push   0xc00142c8
c0014567:	6a 13                	push   0x13
c0014569:	53                   	push   ebx
c001456a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001456d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001456f:	6a 00                	push   0x0
c0014571:	68 c8 42 01 c0       	push   0xc00142c8
c0014576:	6a 14                	push   0x14
c0014578:	53                   	push   ebx
c0014579:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001457c:	83 c4 20             	add    esp,0x20
c001457f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014581:	6a 00                	push   0x0
c0014583:	68 c8 42 01 c0       	push   0xc00142c8
c0014588:	6a 1e                	push   0x1e
c001458a:	53                   	push   ebx
c001458b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001458e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014590:	6a 00                	push   0x0
c0014592:	68 2e fb 00 c0       	push   0xc000fb2e
c0014597:	6a 60                	push   0x60
c0014599:	53                   	push   ebx
c001459a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001459d:	83 c4 20             	add    esp,0x20
c00145a0:	89 d8                	mov    eax,ebx
c00145a2:	5a                   	pop    edx
c00145a3:	5b                   	pop    ebx
c00145a4:	5e                   	pop    esi
c00145a5:	c3                   	ret    
c00145a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145a8:	6a 00                	push   0x0
c00145aa:	6a 00                	push   0x0
c00145ac:	6a 00                	push   0x0
c00145ae:	53                   	push   ebx
c00145af:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00145b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145b7:	ff 50 04             	call   DWORD PTR [eax+0x4]
c00145ba:	c7 04 24 58 21 00 00 	mov    DWORD PTR [esp],0x2158
c00145c1:	e8 ba db ff ff       	call   c0012180 <operator new(unsigned long)>
c00145c6:	89 04 24             	mov    DWORD PTR [esp],eax
c00145c9:	89 c3                	mov    ebx,eax
c00145cb:	e8 7e 8e 00 00       	call   c001d44e <APIC::APIC()>
c00145d0:	6a 00                	push   0x0
c00145d2:	6a 00                	push   0x0
c00145d4:	6a 00                	push   0x0
c00145d6:	53                   	push   ebx
c00145d7:	e8 90 8d 00 00       	call   c001d36c <APIC::open(int, int, void*)>
c00145dc:	83 c4 20             	add    esp,0x20
c00145df:	e9 30 fe ff ff       	jmp    c0014414 <setupInterruptController()+0x50>
c00145e4:	83 ec 0c             	sub    esp,0xc
c00145e7:	68 58 21 00 00       	push   0x2158
c00145ec:	e8 8f db ff ff       	call   c0012180 <operator new(unsigned long)>
c00145f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00145f4:	89 c3                	mov    ebx,eax
c00145f6:	e8 53 8e 00 00       	call   c001d44e <APIC::APIC()>
c00145fb:	6a 00                	push   0x0
c00145fd:	6a 00                	push   0x0
c00145ff:	6a 00                	push   0x0
c0014601:	53                   	push   ebx
c0014602:	e8 65 8d 00 00       	call   c001d36c <APIC::open(int, int, void*)>
c0014607:	83 c4 18             	add    esp,0x18
c001460a:	53                   	push   ebx
c001460b:	ff 35 08 b7 03 c0    	push   DWORD PTR ds:0xc003b708
c0014611:	e8 74 ee ff ff       	call   c001348a <Device::addChild(Device*)>
c0014616:	83 c4 10             	add    esp,0x10
c0014619:	89 d8                	mov    eax,ebx
c001461b:	5a                   	pop    edx
c001461c:	5b                   	pop    ebx
c001461d:	5e                   	pop    esi
c001461e:	c3                   	ret    
c001461f:	90                   	nop

c0014620 <startGUI(void*)>:
c0014620:	55                   	push   ebp
c0014621:	89 e5                	mov    ebp,esp
c0014623:	53                   	push   ebx
c0014624:	83 ec 04             	sub    esp,0x4
c0014627:	e8 48 9a ff ff       	call   c000e074 <unlockScheduler()>
c001462c:	e8 2c 9a ff ff       	call   c000e05d <getIRQNestingLevel()>
c0014631:	83 ec 08             	sub    esp,0x8
c0014634:	50                   	push   eax
c0014635:	68 b0 9a 03 c0       	push   0xc0039ab0
c001463a:	e8 91 85 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001463f:	83 c4 10             	add    esp,0x10
c0014642:	8b 1d 08 b7 03 c0    	mov    ebx,DWORD PTR ds:0xc003b708
c0014648:	83 ec 0c             	sub    esp,0xc
c001464b:	68 ca 9a 03 c0       	push   0xc0039aca
c0014650:	e8 5c 7d ff ff       	call   c000c3b1 <loadDLL(char const*)>
c0014655:	83 c4 10             	add    esp,0x10
c0014658:	83 ec 08             	sub    esp,0x8
c001465b:	53                   	push   ebx
c001465c:	50                   	push   eax
c001465d:	e8 18 7e ff ff       	call   c000c47a <executeDLL(unsigned long, void*)>
c0014662:	83 c4 10             	add    esp,0x10
c0014665:	8b 1d 08 b7 03 c0    	mov    ebx,DWORD PTR ds:0xc003b708
c001466b:	83 ec 0c             	sub    esp,0xc
c001466e:	68 e4 9a 03 c0       	push   0xc0039ae4
c0014673:	e8 39 7d ff ff       	call   c000c3b1 <loadDLL(char const*)>
c0014678:	83 c4 10             	add    esp,0x10
c001467b:	83 ec 08             	sub    esp,0x8
c001467e:	53                   	push   ebx
c001467f:	50                   	push   eax
c0014680:	e8 f5 7d ff ff       	call   c000c47a <executeDLL(unsigned long, void*)>
c0014685:	83 c4 10             	add    esp,0x10
c0014688:	90                   	nop
c0014689:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001468c:	c9                   	leave  
c001468d:	c3                   	ret    

c001468e <sendKeyToTerminal(unsigned char)>:
c001468e:	55                   	push   ebp
c001468f:	89 e5                	mov    ebp,esp
c0014691:	83 ec 28             	sub    esp,0x28
c0014694:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014697:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001469a:	a1 a4 bb 03 c0       	mov    eax,ds:0xc003bba4
c001469f:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00146a3:	83 ec 08             	sub    esp,0x8
c00146a6:	52                   	push   edx
c00146a7:	50                   	push   eax
c00146a8:	e8 c7 c2 ff ff       	call   c0010974 <VgaText::receiveKey(unsigned char)>
c00146ad:	83 c4 10             	add    esp,0x10
c00146b0:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00146b4:	75 41                	jne    c00146f7 <sendKeyToTerminal(unsigned char)+0x69>
c00146b6:	e8 de 99 ff ff       	call   c000e099 <lockStuff()>
c00146bb:	a1 00 bc 03 c0       	mov    eax,ds:0xc003bc00
c00146c0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00146c3:	c7 05 00 bc 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003bc00,0x0
c00146cd:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00146d1:	74 1f                	je     c00146f2 <sendKeyToTerminal(unsigned char)+0x64>
c00146d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146d6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00146d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00146dc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00146df:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00146e2:	83 ec 0c             	sub    esp,0xc
c00146e5:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00146e8:	e8 a9 a1 ff ff       	call   c000e896 <unblockTask(ThreadControlBlock*)>
c00146ed:	83 c4 10             	add    esp,0x10
c00146f0:	eb db                	jmp    c00146cd <sendKeyToTerminal(unsigned char)+0x3f>
c00146f2:	e8 34 9d ff ff       	call   c000e42b <unlockStuff()>
c00146f7:	90                   	nop
c00146f8:	c9                   	leave  
c00146f9:	c3                   	ret    

c00146fa <sendKeyboardToken(KeyboardToken)>:
c00146fa:	55                   	push   ebp
c00146fb:	89 e5                	mov    ebp,esp
c00146fd:	83 ec 18             	sub    esp,0x18
c0014700:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0014703:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014706:	0f b7 c0             	movzx  eax,ax
c0014709:	83 f2 01             	xor    edx,0x1
c001470c:	88 90 20 bc 03 c0    	mov    BYTE PTR [eax-0x3ffc43e0],dl
c0014712:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014715:	66 3d 03 02          	cmp    ax,0x203
c0014719:	75 07                	jne    c0014722 <sendKeyboardToken(KeyboardToken)+0x28>
c001471b:	a0 20 bd 03 c0       	mov    al,ds:0xc003bd20
c0014720:	84 c0                	test   al,al
c0014722:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0014726:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0014729:	a0 28 c0 03 c0       	mov    al,ds:0xc003c028
c001472e:	38 c2                	cmp    dl,al
c0014730:	74 1c                	je     c001474e <sendKeyboardToken(KeyboardToken)+0x54>
c0014732:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0014735:	a2 28 c0 03 c0       	mov    ds:0xc003c028,al
c001473a:	a0 28 c0 03 c0       	mov    al,ds:0xc003c028
c001473f:	0f b6 c0             	movzx  eax,al
c0014742:	83 ec 0c             	sub    esp,0xc
c0014745:	50                   	push   eax
c0014746:	e8 97 b4 ff ff       	call   c000fbe2 <setTerminalScrollLock(bool)>
c001474b:	83 c4 10             	add    esp,0x10
c001474e:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0014751:	84 c0                	test   al,al
c0014753:	0f 84 ae 00 00 00    	je     c0014807 <sendKeyboardToken(KeyboardToken)+0x10d>
c0014759:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001475c:	66 3d 10 03          	cmp    ax,0x310
c0014760:	75 06                	jne    c0014768 <sendKeyboardToken(KeyboardToken)+0x6e>
c0014762:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0014768:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001476b:	66 3d 11 03          	cmp    ax,0x311
c001476f:	75 06                	jne    c0014777 <sendKeyboardToken(KeyboardToken)+0x7d>
c0014771:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0014777:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001477a:	66 3d 12 03          	cmp    ax,0x312
c001477e:	75 06                	jne    c0014786 <sendKeyboardToken(KeyboardToken)+0x8c>
c0014780:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0014786:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014789:	66 3d 13 03          	cmp    ax,0x313
c001478d:	75 06                	jne    c0014795 <sendKeyboardToken(KeyboardToken)+0x9b>
c001478f:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0014795:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014798:	66 3d 14 03          	cmp    ax,0x314
c001479c:	75 06                	jne    c00147a4 <sendKeyboardToken(KeyboardToken)+0xaa>
c001479e:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00147a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147a7:	66 3d 15 03          	cmp    ax,0x315
c00147ab:	75 06                	jne    c00147b3 <sendKeyboardToken(KeyboardToken)+0xb9>
c00147ad:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00147b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147b6:	66 3d 16 03          	cmp    ax,0x316
c00147ba:	75 06                	jne    c00147c2 <sendKeyboardToken(KeyboardToken)+0xc8>
c00147bc:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00147c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147c5:	66 3d 17 03          	cmp    ax,0x317
c00147c9:	75 06                	jne    c00147d1 <sendKeyboardToken(KeyboardToken)+0xd7>
c00147cb:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00147d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147d4:	66 3d 18 03          	cmp    ax,0x318
c00147d8:	75 06                	jne    c00147e0 <sendKeyboardToken(KeyboardToken)+0xe6>
c00147da:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00147e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147e3:	66 3d 19 03          	cmp    ax,0x319
c00147e7:	75 06                	jne    c00147ef <sendKeyboardToken(KeyboardToken)+0xf5>
c00147e9:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00147ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147f2:	66 3d 1a 03          	cmp    ax,0x31a
c00147f6:	0f 85 c9 00 00 00    	jne    c00148c5 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00147fc:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0014802:	e9 be 00 00 00       	jmp    c00148c5 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0014807:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001480a:	66 3d 10 03          	cmp    ax,0x310
c001480e:	75 0a                	jne    c001481a <sendKeyboardToken(KeyboardToken)+0x120>
c0014810:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0014816:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001481a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001481d:	66 3d 11 03          	cmp    ax,0x311
c0014821:	75 0a                	jne    c001482d <sendKeyboardToken(KeyboardToken)+0x133>
c0014823:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0014829:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001482d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014830:	66 3d 12 03          	cmp    ax,0x312
c0014834:	75 0a                	jne    c0014840 <sendKeyboardToken(KeyboardToken)+0x146>
c0014836:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001483c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014840:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014843:	66 3d 13 03          	cmp    ax,0x313
c0014847:	75 0a                	jne    c0014853 <sendKeyboardToken(KeyboardToken)+0x159>
c0014849:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001484f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014853:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014856:	66 3d 14 03          	cmp    ax,0x314
c001485a:	75 0a                	jne    c0014866 <sendKeyboardToken(KeyboardToken)+0x16c>
c001485c:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0014862:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014866:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014869:	66 3d 15 03          	cmp    ax,0x315
c001486d:	75 0a                	jne    c0014879 <sendKeyboardToken(KeyboardToken)+0x17f>
c001486f:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0014875:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014879:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001487c:	66 3d 16 03          	cmp    ax,0x316
c0014880:	75 0a                	jne    c001488c <sendKeyboardToken(KeyboardToken)+0x192>
c0014882:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0014888:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001488c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001488f:	66 3d 17 03          	cmp    ax,0x317
c0014893:	75 0a                	jne    c001489f <sendKeyboardToken(KeyboardToken)+0x1a5>
c0014895:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001489b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001489f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148a2:	66 3d 18 03          	cmp    ax,0x318
c00148a6:	75 0a                	jne    c00148b2 <sendKeyboardToken(KeyboardToken)+0x1b8>
c00148a8:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00148ae:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00148b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148b5:	66 3d 19 03          	cmp    ax,0x319
c00148b9:	75 0a                	jne    c00148c5 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00148bb:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00148c1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00148c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148c8:	66 3d 00 02          	cmp    ax,0x200
c00148cc:	75 2a                	jne    c00148f8 <sendKeyboardToken(KeyboardToken)+0x1fe>
c00148ce:	a0 20 c0 03 c0       	mov    al,ds:0xc003c020
c00148d3:	83 f0 01             	xor    eax,0x1
c00148d6:	84 c0                	test   al,al
c00148d8:	74 1e                	je     c00148f8 <sendKeyboardToken(KeyboardToken)+0x1fe>
c00148da:	a1 5c b9 03 c0       	mov    eax,ds:0xc003b95c
c00148df:	6a 01                	push   0x1
c00148e1:	6a 00                	push   0x0
c00148e3:	68 20 46 01 c0       	push   0xc0014620
c00148e8:	50                   	push   eax
c00148e9:	e8 ae 98 ff ff       	call   c000e19c <Process::createThread(void (*)(void*), void*, int)>
c00148ee:	83 c4 10             	add    esp,0x10
c00148f1:	c6 05 20 c0 03 c0 01 	mov    BYTE PTR ds:0xc003c020,0x1
c00148f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148fb:	66 3d 1d 03          	cmp    ax,0x31d
c00148ff:	75 06                	jne    c0014907 <sendKeyboardToken(KeyboardToken)+0x20d>
c0014901:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0014907:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001490a:	66 3d 1c 03          	cmp    ax,0x31c
c001490e:	75 06                	jne    c0014916 <sendKeyboardToken(KeyboardToken)+0x21c>
c0014910:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0014916:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014919:	66 3d 1b 03          	cmp    ax,0x31b
c001491d:	75 06                	jne    c0014925 <sendKeyboardToken(KeyboardToken)+0x22b>
c001491f:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0014925:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014928:	66 3d 1e 03          	cmp    ax,0x31e
c001492c:	75 06                	jne    c0014934 <sendKeyboardToken(KeyboardToken)+0x23a>
c001492e:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0014934:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014937:	66 3d 1f 03          	cmp    ax,0x31f
c001493b:	75 06                	jne    c0014943 <sendKeyboardToken(KeyboardToken)+0x249>
c001493d:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0014943:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014946:	66 3d 1a 03          	cmp    ax,0x31a
c001494a:	75 06                	jne    c0014952 <sendKeyboardToken(KeyboardToken)+0x258>
c001494c:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0014952:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0014956:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014959:	83 f0 01             	xor    eax,0x1
c001495c:	84 c0                	test   al,al
c001495e:	74 77                	je     c00149d7 <sendKeyboardToken(KeyboardToken)+0x2dd>
c0014960:	a0 21 bd 03 c0       	mov    al,ds:0xc003bd21
c0014965:	84 c0                	test   al,al
c0014967:	74 41                	je     c00149aa <sendKeyboardToken(KeyboardToken)+0x2b0>
c0014969:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001496d:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0014971:	74 2b                	je     c001499e <sendKeyboardToken(KeyboardToken)+0x2a4>
c0014973:	8b 15 24 c0 03 c0    	mov    edx,DWORD PTR ds:0xc003c024
c0014979:	89 d0                	mov    eax,edx
c001497b:	c1 e0 02             	shl    eax,0x2
c001497e:	01 d0                	add    eax,edx
c0014980:	01 c0                	add    eax,eax
c0014982:	a3 24 c0 03 c0       	mov    ds:0xc003c024,eax
c0014987:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001498a:	0f b7 c0             	movzx  eax,ax
c001498d:	8d 50 d0             	lea    edx,[eax-0x30]
c0014990:	a1 24 c0 03 c0       	mov    eax,ds:0xc003c024
c0014995:	01 d0                	add    eax,edx
c0014997:	a3 24 c0 03 c0       	mov    ds:0xc003c024,eax
c001499c:	eb 6d                	jmp    c0014a0b <sendKeyboardToken(KeyboardToken)+0x311>
c001499e:	c7 05 24 c0 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c024,0x0
c00149a8:	eb 61                	jmp    c0014a0b <sendKeyboardToken(KeyboardToken)+0x311>
c00149aa:	a1 24 c0 03 c0       	mov    eax,ds:0xc003c024
c00149af:	85 c0                	test   eax,eax
c00149b1:	74 18                	je     c00149cb <sendKeyboardToken(KeyboardToken)+0x2d1>
c00149b3:	a1 24 c0 03 c0       	mov    eax,ds:0xc003c024
c00149b8:	0f b6 c0             	movzx  eax,al
c00149bb:	83 ec 0c             	sub    esp,0xc
c00149be:	50                   	push   eax
c00149bf:	e8 ca fc ff ff       	call   c001468e <sendKeyToTerminal(unsigned char)>
c00149c4:	83 c4 10             	add    esp,0x10
c00149c7:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00149cb:	c7 05 24 c0 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c024,0x0
c00149d5:	eb 34                	jmp    c0014a0b <sendKeyboardToken(KeyboardToken)+0x311>
c00149d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149da:	66 3d 01 01          	cmp    ax,0x101
c00149de:	75 2b                	jne    c0014a0b <sendKeyboardToken(KeyboardToken)+0x311>
c00149e0:	a1 24 c0 03 c0       	mov    eax,ds:0xc003c024
c00149e5:	85 c0                	test   eax,eax
c00149e7:	74 18                	je     c0014a01 <sendKeyboardToken(KeyboardToken)+0x307>
c00149e9:	a1 24 c0 03 c0       	mov    eax,ds:0xc003c024
c00149ee:	0f b6 c0             	movzx  eax,al
c00149f1:	83 ec 0c             	sub    esp,0xc
c00149f4:	50                   	push   eax
c00149f5:	e8 94 fc ff ff       	call   c001468e <sendKeyToTerminal(unsigned char)>
c00149fa:	83 c4 10             	add    esp,0x10
c00149fd:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0014a01:	c7 05 24 c0 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c024,0x0
c0014a0b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0014a0e:	83 f0 01             	xor    eax,0x1
c0014a11:	84 c0                	test   al,al
c0014a13:	74 4c                	je     c0014a61 <sendKeyboardToken(KeyboardToken)+0x367>
c0014a15:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014a18:	83 f0 01             	xor    eax,0x1
c0014a1b:	84 c0                	test   al,al
c0014a1d:	74 42                	je     c0014a61 <sendKeyboardToken(KeyboardToken)+0x367>
c0014a1f:	a0 20 bd 03 c0       	mov    al,ds:0xc003bd20
c0014a24:	83 f0 01             	xor    eax,0x1
c0014a27:	84 c0                	test   al,al
c0014a29:	74 36                	je     c0014a61 <sendKeyboardToken(KeyboardToken)+0x367>
c0014a2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a2e:	66 83 f8 1f          	cmp    ax,0x1f
c0014a32:	76 09                	jbe    c0014a3d <sendKeyboardToken(KeyboardToken)+0x343>
c0014a34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a37:	66 83 f8 7e          	cmp    ax,0x7e
c0014a3b:	76 12                	jbe    c0014a4f <sendKeyboardToken(KeyboardToken)+0x355>
c0014a3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a40:	66 83 f8 0a          	cmp    ax,0xa
c0014a44:	74 09                	je     c0014a4f <sendKeyboardToken(KeyboardToken)+0x355>
c0014a46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a49:	66 83 f8 08          	cmp    ax,0x8
c0014a4d:	75 12                	jne    c0014a61 <sendKeyboardToken(KeyboardToken)+0x367>
c0014a4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a52:	0f b6 c0             	movzx  eax,al
c0014a55:	83 ec 0c             	sub    esp,0xc
c0014a58:	50                   	push   eax
c0014a59:	e8 30 fc ff ff       	call   c001468e <sendKeyToTerminal(unsigned char)>
c0014a5e:	83 c4 10             	add    esp,0x10
c0014a61:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0014a64:	83 f0 01             	xor    eax,0x1
c0014a67:	84 c0                	test   al,al
c0014a69:	74 4f                	je     c0014aba <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014a6b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014a6e:	83 f0 01             	xor    eax,0x1
c0014a71:	84 c0                	test   al,al
c0014a73:	74 45                	je     c0014aba <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014a75:	a0 20 bd 03 c0       	mov    al,ds:0xc003bd20
c0014a7a:	84 c0                	test   al,al
c0014a7c:	74 3c                	je     c0014aba <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014a7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a81:	66 83 f8 3f          	cmp    ax,0x3f
c0014a85:	76 33                	jbe    c0014aba <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014a87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a8a:	66 83 f8 7f          	cmp    ax,0x7f
c0014a8e:	77 2a                	ja     c0014aba <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014a90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a93:	88 c2                	mov    dl,al
c0014a95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a98:	66 83 f8 5f          	cmp    ax,0x5f
c0014a9c:	76 04                	jbe    c0014aa2 <sendKeyboardToken(KeyboardToken)+0x3a8>
c0014a9e:	b0 20                	mov    al,0x20
c0014aa0:	eb 02                	jmp    c0014aa4 <sendKeyboardToken(KeyboardToken)+0x3aa>
c0014aa2:	b0 00                	mov    al,0x0
c0014aa4:	29 c2                	sub    edx,eax
c0014aa6:	88 d0                	mov    al,dl
c0014aa8:	83 e8 40             	sub    eax,0x40
c0014aab:	0f b6 c0             	movzx  eax,al
c0014aae:	83 ec 0c             	sub    esp,0xc
c0014ab1:	50                   	push   eax
c0014ab2:	e8 d7 fb ff ff       	call   c001468e <sendKeyToTerminal(unsigned char)>
c0014ab7:	83 c4 10             	add    esp,0x10
c0014aba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014abd:	66 3d 00 03          	cmp    ax,0x300
c0014ac1:	75 0f                	jne    c0014ad2 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0014ac3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014ac6:	83 f0 01             	xor    eax,0x1
c0014ac9:	84 c0                	test   al,al
c0014acb:	74 05                	je     c0014ad2 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0014acd:	e8 37 b9 ff ff       	call   c0010409 <doTerminalCycle()>
c0014ad2:	90                   	nop
c0014ad3:	c9                   	leave  
c0014ad4:	c3                   	ret    

c0014ad5 <clearInternalKeybuffer(VgaText*)>:
c0014ad5:	55                   	push   ebp
c0014ad6:	89 e5                	mov    ebp,esp
c0014ad8:	83 ec 08             	sub    esp,0x8
c0014adb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ade:	05 34 11 00 00       	add    eax,0x1134
c0014ae3:	83 ec 0c             	sub    esp,0xc
c0014ae6:	50                   	push   eax
c0014ae7:	e8 39 bb fe ff       	call   c0000625 <strlen>
c0014aec:	83 c4 10             	add    esp,0x10
c0014aef:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014af2:	81 c2 34 11 00 00    	add    edx,0x1134
c0014af8:	83 ec 04             	sub    esp,0x4
c0014afb:	50                   	push   eax
c0014afc:	6a 00                	push   0x0
c0014afe:	52                   	push   edx
c0014aff:	e8 04 bb fe ff       	call   c0000608 <memset>
c0014b04:	83 c4 10             	add    esp,0x10
c0014b07:	90                   	nop
c0014b08:	c9                   	leave  
c0014b09:	c3                   	ret    

c0014b0a <readKeyboard(VgaText*, char*, unsigned long)>:
c0014b0a:	55                   	push   ebp
c0014b0b:	89 e5                	mov    ebp,esp
c0014b0d:	83 ec 18             	sub    esp,0x18
c0014b10:	fb                   	sti    
c0014b11:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0014b18:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0014b1c:	74 77                	je     c0014b95 <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0014b1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b21:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0014b27:	84 c0                	test   al,al
c0014b29:	75 02                	jne    c0014b2d <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0014b2b:	eb f1                	jmp    c0014b1e <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0014b2d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014b30:	8d 50 01             	lea    edx,[eax+0x1]
c0014b33:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0014b36:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014b39:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0014b3f:	88 10                	mov    BYTE PTR [eax],dl
c0014b41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b44:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0014b4a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0014b4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b50:	05 34 11 00 00       	add    eax,0x1134
c0014b55:	83 ec 0c             	sub    esp,0xc
c0014b58:	50                   	push   eax
c0014b59:	e8 c7 ba fe ff       	call   c0000625 <strlen>
c0014b5e:	83 c4 10             	add    esp,0x10
c0014b61:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014b64:	81 c2 34 11 00 00    	add    edx,0x1134
c0014b6a:	8d 4a 01             	lea    ecx,[edx+0x1]
c0014b6d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014b70:	81 c2 34 11 00 00    	add    edx,0x1134
c0014b76:	83 ec 04             	sub    esp,0x4
c0014b79:	50                   	push   eax
c0014b7a:	51                   	push   ecx
c0014b7b:	52                   	push   edx
c0014b7c:	e8 19 ba fe ff       	call   c000059a <memmove>
c0014b81:	83 c4 10             	add    esp,0x10
c0014b84:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0014b87:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b8a:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0014b8e:	75 88                	jne    c0014b18 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0014b90:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b93:	eb 03                	jmp    c0014b98 <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c0014b95:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b98:	c9                   	leave  
c0014b99:	c3                   	ret    

c0014b9a <Keyboard::Keyboard(char const*)>:
c0014b9a:	83 ec 0c             	sub    esp,0xc
c0014b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ba1:	83 ec 08             	sub    esp,0x8
c0014ba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ba8:	50                   	push   eax
c0014ba9:	e8 cc ea ff ff       	call   c001367a <Device::Device(char const*)>
c0014bae:	83 c4 10             	add    esp,0x10
c0014bb1:	ba 08 9b 03 c0       	mov    edx,0xc0039b08
c0014bb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014bba:	89 10                	mov    DWORD PTR [eax],edx
c0014bbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014bc0:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0014bca:	c6 05 04 bc 03 c0 01 	mov    BYTE PTR ds:0xc003bc04,0x1
c0014bd1:	90                   	nop
c0014bd2:	83 c4 0c             	add    esp,0xc
c0014bd5:	c3                   	ret    

c0014bd6 <Keyboard::~Keyboard()>:
c0014bd6:	83 ec 0c             	sub    esp,0xc
c0014bd9:	ba 08 9b 03 c0       	mov    edx,0xc0039b08
c0014bde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014be2:	89 10                	mov    DWORD PTR [eax],edx
c0014be4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014be8:	83 ec 0c             	sub    esp,0xc
c0014beb:	50                   	push   eax
c0014bec:	e8 3b e7 ff ff       	call   c001332c <Device::~Device()>
c0014bf1:	83 c4 10             	add    esp,0x10
c0014bf4:	90                   	nop
c0014bf5:	83 c4 0c             	add    esp,0xc
c0014bf8:	c3                   	ret    
c0014bf9:	90                   	nop

c0014bfa <Keyboard::~Keyboard()>:
c0014bfa:	83 ec 0c             	sub    esp,0xc
c0014bfd:	83 ec 0c             	sub    esp,0xc
c0014c00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c04:	e8 cd ff ff ff       	call   c0014bd6 <Keyboard::~Keyboard()>
c0014c09:	83 c4 10             	add    esp,0x10
c0014c0c:	83 ec 08             	sub    esp,0x8
c0014c0f:	68 5c 01 00 00       	push   0x15c
c0014c14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c18:	e8 72 d5 ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c0014c1d:	83 c4 10             	add    esp,0x10
c0014c20:	83 c4 0c             	add    esp,0xc
c0014c23:	c3                   	ret    

c0014c24 <LogicalDisk::close(int, int, void*)>:
c0014c24:	83 c8 ff             	or     eax,0xffffffff
c0014c27:	c3                   	ret    

c0014c28 <LogicalDisk::~LogicalDisk()>:
c0014c28:	83 ec 0c             	sub    esp,0xc
c0014c2b:	ba b8 9b 03 c0       	mov    edx,0xc0039bb8
c0014c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c34:	89 10                	mov    DWORD PTR [eax],edx
c0014c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c3a:	83 ec 0c             	sub    esp,0xc
c0014c3d:	50                   	push   eax
c0014c3e:	e8 e9 e6 ff ff       	call   c001332c <Device::~Device()>
c0014c43:	83 c4 10             	add    esp,0x10
c0014c46:	90                   	nop
c0014c47:	83 c4 0c             	add    esp,0xc
c0014c4a:	c3                   	ret    
c0014c4b:	90                   	nop

c0014c4c <LogicalDisk::~LogicalDisk()>:
c0014c4c:	83 ec 0c             	sub    esp,0xc
c0014c4f:	83 ec 0c             	sub    esp,0xc
c0014c52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c56:	e8 cd ff ff ff       	call   c0014c28 <LogicalDisk::~LogicalDisk()>
c0014c5b:	83 c4 10             	add    esp,0x10
c0014c5e:	83 ec 08             	sub    esp,0x8
c0014c61:	68 74 01 00 00       	push   0x174
c0014c66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c6a:	e8 20 d5 ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c0014c6f:	83 c4 10             	add    esp,0x10
c0014c72:	83 c4 0c             	add    esp,0xc
c0014c75:	c3                   	ret    

c0014c76 <LogicalDisk::open(int, int, void*)>:
c0014c76:	83 ec 18             	sub    esp,0x18
c0014c79:	68 34 9b 03 c0       	push   0xc0039b34
c0014c7e:	e8 6b 80 ff ff       	call   c000ccee <panic(char const*)>
c0014c83:	83 c8 ff             	or     eax,0xffffffff
c0014c86:	83 c4 1c             	add    esp,0x1c
c0014c89:	c3                   	ret    

c0014c8a <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0014c8a:	53                   	push   ebx
c0014c8b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014c8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014c93:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014c97:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0014c9d:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0014ca3:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0014ca9:	77 10                	ja     c0014cbb <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0014cab:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0014cb1:	89 d3                	mov    ebx,edx
c0014cb3:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0014cb9:	72 05                	jb     c0014cc0 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0014cbb:	83 c8 ff             	or     eax,0xffffffff
c0014cbe:	89 c2                	mov    edx,eax
c0014cc0:	5b                   	pop    ebx
c0014cc1:	c3                   	ret    

c0014cc2 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0014cc2:	56                   	push   esi
c0014cc3:	83 c8 ff             	or     eax,0xffffffff
c0014cc6:	53                   	push   ebx
c0014cc7:	89 c2                	mov    edx,eax
c0014cc9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014ccd:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0014cd1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014cd5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0014cdb:	77 27                	ja     c0014d04 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0014cdd:	89 d8                	mov    eax,ebx
c0014cdf:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0014ce5:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0014ceb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014cf0:	89 c2                	mov    edx,eax
c0014cf2:	73 10                	jae    c0014d04 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0014cf4:	89 c8                	mov    eax,ecx
c0014cf6:	89 da                	mov    edx,ebx
c0014cf8:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0014cfe:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0014d04:	5b                   	pop    ebx
c0014d05:	5e                   	pop    esi
c0014d06:	c3                   	ret    
c0014d07:	90                   	nop

c0014d08 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0014d08:	83 ec 1c             	sub    esp,0x1c
c0014d0b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014d0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014d13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014d1b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014d1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d22:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0014d26:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d2e:	83 ec 08             	sub    esp,0x8
c0014d31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014d35:	50                   	push   eax
c0014d36:	e8 3f e9 ff ff       	call   c001367a <Device::Device(char const*)>
c0014d3b:	83 c4 10             	add    esp,0x10
c0014d3e:	ba b8 9b 03 c0       	mov    edx,0xc0039bb8
c0014d43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d47:	89 10                	mov    DWORD PTR [eax],edx
c0014d49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d4d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014d54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d58:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014d5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d63:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0014d6d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014d71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014d75:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d79:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0014d7f:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0014d85:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014d89:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014d8c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014d90:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0014d96:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0014d9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014da0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014da4:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0014daa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dae:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0014db8:	90                   	nop
c0014db9:	83 c4 1c             	add    esp,0x1c
c0014dbc:	c3                   	ret    
c0014dbd:	90                   	nop

c0014dbe <LogicalDisk::assignDriveLetter()>:
c0014dbe:	55                   	push   ebp
c0014dbf:	57                   	push   edi
c0014dc0:	56                   	push   esi
c0014dc1:	53                   	push   ebx
c0014dc2:	83 ec 14             	sub    esp,0x14
c0014dc5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014dc9:	8b 3d 40 c0 03 c0    	mov    edi,DWORD PTR ds:0xc003c040
c0014dcf:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0014dd5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0014dd9:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0014ddf:	8b 3d 44 c0 03 c0    	mov    edi,DWORD PTR ds:0xc003c044
c0014de5:	3c 01                	cmp    al,0x1
c0014de7:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0014deb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0014def:	19 c0                	sbb    eax,eax
c0014df1:	83 e0 02             	and    eax,0x2
c0014df4:	83 c0 41             	add    eax,0x41
c0014df7:	0f be e8             	movsx  ebp,al
c0014dfa:	3c 43                	cmp    al,0x43
c0014dfc:	75 10                	jne    c0014e0e <LogicalDisk::assignDriveLetter()+0x50>
c0014dfe:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0014e05:	75 5d                	jne    c0014e64 <LogicalDisk::assignDriveLetter()+0xa6>
c0014e07:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014e0c:	75 56                	jne    c0014e64 <LogicalDisk::assignDriveLetter()+0xa6>
c0014e0e:	8d 75 bf             	lea    esi,[ebp-0x41]
c0014e11:	ba 01 00 00 00       	mov    edx,0x1
c0014e16:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0014e1a:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0014e1e:	d3 e2                	shl    edx,cl
c0014e20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014e24:	89 d7                	mov    edi,edx
c0014e26:	89 d6                	mov    esi,edx
c0014e28:	c1 ff 1f             	sar    edi,0x1f
c0014e2b:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0014e2f:	21 f9                	and    ecx,edi
c0014e31:	09 d1                	or     ecx,edx
c0014e33:	75 2f                	jne    c0014e64 <LogicalDisk::assignDriveLetter()+0xa6>
c0014e35:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0014e39:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014e3d:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0014e43:	09 f2                	or     edx,esi
c0014e45:	89 15 40 c0 03 c0    	mov    DWORD PTR ds:0xc003c040,edx
c0014e4b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014e4f:	09 fa                	or     edx,edi
c0014e51:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0014e55:	89 15 44 c0 03 c0    	mov    DWORD PTR ds:0xc003c044,edx
c0014e5b:	89 1c bd 60 c0 03 c0 	mov    DWORD PTR [edi*4-0x3ffc3fa0],ebx
c0014e62:	eb 08                	jmp    c0014e6c <LogicalDisk::assignDriveLetter()+0xae>
c0014e64:	45                   	inc    ebp
c0014e65:	40                   	inc    eax
c0014e66:	3c 5b                	cmp    al,0x5b
c0014e68:	75 90                	jne    c0014dfa <LogicalDisk::assignDriveLetter()+0x3c>
c0014e6a:	31 c0                	xor    eax,eax
c0014e6c:	83 c4 14             	add    esp,0x14
c0014e6f:	5b                   	pop    ebx
c0014e70:	5e                   	pop    esi
c0014e71:	5f                   	pop    edi
c0014e72:	5d                   	pop    ebp
c0014e73:	c3                   	ret    

c0014e74 <LogicalDisk::mount()>:
c0014e74:	56                   	push   esi
c0014e75:	53                   	push   ebx
c0014e76:	51                   	push   ecx
c0014e77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014e7b:	8b 1d c0 bb 03 c0    	mov    ebx,DWORD PTR ds:0xc003bbc0
c0014e81:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0014e8b:	85 db                	test   ebx,ebx
c0014e8d:	74 50                	je     c0014edf <LogicalDisk::mount()+0x6b>
c0014e8f:	e8 c9 91 ff ff       	call   c000e05d <getIRQNestingLevel()>
c0014e94:	52                   	push   edx
c0014e95:	52                   	push   edx
c0014e96:	50                   	push   eax
c0014e97:	68 58 9b 03 c0       	push   0xc0039b58
c0014e9c:	e8 2f 7d ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0014ea1:	83 c4 0c             	add    esp,0xc
c0014ea4:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0014eab:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014ead:	83 e8 41             	sub    eax,0x41
c0014eb0:	50                   	push   eax
c0014eb1:	56                   	push   esi
c0014eb2:	53                   	push   ebx
c0014eb3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0014eb6:	83 c4 10             	add    esp,0x10
c0014eb9:	84 c0                	test   al,al
c0014ebb:	74 08                	je     c0014ec5 <LogicalDisk::mount()+0x51>
c0014ebd:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0014ec3:	eb 1c                	jmp    c0014ee1 <LogicalDisk::mount()+0x6d>
c0014ec5:	e8 93 91 ff ff       	call   c000e05d <getIRQNestingLevel()>
c0014eca:	51                   	push   ecx
c0014ecb:	51                   	push   ecx
c0014ecc:	50                   	push   eax
c0014ecd:	68 73 9b 03 c0       	push   0xc0039b73
c0014ed2:	e8 f9 7c ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0014ed7:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0014eda:	83 c4 10             	add    esp,0x10
c0014edd:	eb ac                	jmp    c0014e8b <LogicalDisk::mount()+0x17>
c0014edf:	31 c0                	xor    eax,eax
c0014ee1:	5a                   	pop    edx
c0014ee2:	5b                   	pop    ebx
c0014ee3:	5e                   	pop    esi
c0014ee4:	c3                   	ret    
c0014ee5:	90                   	nop

c0014ee6 <LogicalDisk::unmount()>:
c0014ee6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014eea:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0014ef4:	c3                   	ret    
c0014ef5:	90                   	nop

c0014ef6 <LogicalDisk::unassignDriveLetter()>:
c0014ef6:	57                   	push   edi
c0014ef7:	56                   	push   esi
c0014ef8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014efc:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0014f03:	84 c9                	test   cl,cl
c0014f05:	75 0f                	jne    c0014f16 <LogicalDisk::unassignDriveLetter()+0x20>
c0014f07:	c7 44 24 0c 8e 9b 03 c0 	mov    DWORD PTR [esp+0xc],0xc0039b8e
c0014f0f:	5e                   	pop    esi
c0014f10:	5f                   	pop    edi
c0014f11:	e9 d8 7d ff ff       	jmp    c000ccee <panic(char const*)>
c0014f16:	83 e9 41             	sub    ecx,0x41
c0014f19:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0014f20:	b8 01 00 00 00       	mov    eax,0x1
c0014f25:	c7 04 8d 60 c0 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffc3fa0],0x0
c0014f30:	d3 e0                	shl    eax,cl
c0014f32:	89 c7                	mov    edi,eax
c0014f34:	f7 d0                	not    eax
c0014f36:	c1 ff 1f             	sar    edi,0x1f
c0014f39:	21 05 40 c0 03 c0    	and    DWORD PTR ds:0xc003c040,eax
c0014f3f:	89 fe                	mov    esi,edi
c0014f41:	f7 d6                	not    esi
c0014f43:	21 35 44 c0 03 c0    	and    DWORD PTR ds:0xc003c044,esi
c0014f49:	5e                   	pop    esi
c0014f4a:	5f                   	pop    edi
c0014f4b:	c3                   	ret    

c0014f4c <LogicalDisk::read(unsigned long long, int, void*)>:
c0014f4c:	57                   	push   edi
c0014f4d:	56                   	push   esi
c0014f4e:	53                   	push   ebx
c0014f4f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014f53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014f57:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0014f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014f5f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0014f65:	77 41                	ja     c0014fa8 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0014f67:	99                   	cdq    
c0014f68:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0014f6e:	01 c8                	add    eax,ecx
c0014f70:	11 da                	adc    edx,ebx
c0014f72:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0014f78:	19 d7                	sbb    edi,edx
c0014f7a:	72 33                	jb     c0014faf <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0014f7c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0014f82:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0014f88:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0014f8c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0014f90:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0014f96:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0014f9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014fa0:	5b                   	pop    ebx
c0014fa1:	5e                   	pop    esi
c0014fa2:	5f                   	pop    edi
c0014fa3:	e9 9a 09 00 00       	jmp    c0015942 <VCache::read(unsigned long long, int, void*)>
c0014fa8:	b8 05 00 00 00       	mov    eax,0x5
c0014fad:	eb 05                	jmp    c0014fb4 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0014faf:	b8 07 00 00 00       	mov    eax,0x7
c0014fb4:	5b                   	pop    ebx
c0014fb5:	5e                   	pop    esi
c0014fb6:	5f                   	pop    edi
c0014fb7:	c3                   	ret    

c0014fb8 <LogicalDisk::write(unsigned long long, int, void*)>:
c0014fb8:	57                   	push   edi
c0014fb9:	56                   	push   esi
c0014fba:	53                   	push   ebx
c0014fbb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014fbf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014fc3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0014fc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014fcb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0014fd1:	77 41                	ja     c0015014 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0014fd3:	99                   	cdq    
c0014fd4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0014fda:	01 c8                	add    eax,ecx
c0014fdc:	11 da                	adc    edx,ebx
c0014fde:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0014fe4:	19 d7                	sbb    edi,edx
c0014fe6:	72 33                	jb     c001501b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0014fe8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0014fee:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0014ff4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0014ff8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0014ffc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015002:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015008:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001500c:	5b                   	pop    ebx
c001500d:	5e                   	pop    esi
c001500e:	5f                   	pop    edi
c001500f:	e9 4a 08 00 00       	jmp    c001585e <VCache::write(unsigned long long, int, void*)>
c0015014:	b8 05 00 00 00       	mov    eax,0x5
c0015019:	eb 05                	jmp    c0015020 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001501b:	b8 07 00 00 00       	mov    eax,0x7
c0015020:	5b                   	pop    ebx
c0015021:	5e                   	pop    esi
c0015022:	5f                   	pop    edi
c0015023:	c3                   	ret    

c0015024 <Mouse::Mouse(char const*)>:
c0015024:	83 ec 0c             	sub    esp,0xc
c0015027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001502b:	83 ec 08             	sub    esp,0x8
c001502e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015032:	50                   	push   eax
c0015033:	e8 42 e6 ff ff       	call   c001367a <Device::Device(char const*)>
c0015038:	83 c4 10             	add    esp,0x10
c001503b:	ba e4 9b 03 c0       	mov    edx,0xc0039be4
c0015040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015044:	89 10                	mov    DWORD PTR [eax],edx
c0015046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001504a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015054:	90                   	nop
c0015055:	83 c4 0c             	add    esp,0xc
c0015058:	c3                   	ret    
c0015059:	90                   	nop

c001505a <Mouse::~Mouse()>:
c001505a:	83 ec 0c             	sub    esp,0xc
c001505d:	ba e4 9b 03 c0       	mov    edx,0xc0039be4
c0015062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015066:	89 10                	mov    DWORD PTR [eax],edx
c0015068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001506c:	83 ec 0c             	sub    esp,0xc
c001506f:	50                   	push   eax
c0015070:	e8 b7 e2 ff ff       	call   c001332c <Device::~Device()>
c0015075:	83 c4 10             	add    esp,0x10
c0015078:	90                   	nop
c0015079:	83 c4 0c             	add    esp,0xc
c001507c:	c3                   	ret    
c001507d:	90                   	nop

c001507e <Mouse::~Mouse()>:
c001507e:	83 ec 0c             	sub    esp,0xc
c0015081:	83 ec 0c             	sub    esp,0xc
c0015084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015088:	e8 cd ff ff ff       	call   c001505a <Mouse::~Mouse()>
c001508d:	83 c4 10             	add    esp,0x10
c0015090:	83 ec 08             	sub    esp,0x8
c0015093:	68 58 01 00 00       	push   0x158
c0015098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001509c:	e8 ee d0 ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c00150a1:	83 c4 10             	add    esp,0x10
c00150a4:	83 c4 0c             	add    esp,0xc
c00150a7:	c3                   	ret    

c00150a8 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00150a8:	55                   	push   ebp
c00150a9:	57                   	push   edi
c00150aa:	56                   	push   esi
c00150ab:	53                   	push   ebx
c00150ac:	81 ec 28 01 00 00    	sub    esp,0x128
c00150b2:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00150b9:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00150c0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00150c7:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00150ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00150d2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00150d6:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00150dd:	e8 8a e6 ff ff       	call   c001376c <Device::getName()>
c00150e2:	5a                   	pop    edx
c00150e3:	59                   	pop    ecx
c00150e4:	50                   	push   eax
c00150e5:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00150e9:	55                   	push   ebp
c00150ea:	e8 b8 b5 fe ff       	call   c00006a7 <strcpy>
c00150ef:	5b                   	pop    ebx
c00150f0:	58                   	pop    eax
c00150f1:	68 08 9c 03 c0       	push   0xc0039c08
c00150f6:	55                   	push   ebp
c00150f7:	e8 62 b6 fe ff       	call   c000075e <strcat>
c00150fc:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015103:	e8 78 d0 ff ff       	call   c0012180 <operator new(unsigned long)>
c0015108:	83 c4 0c             	add    esp,0xc
c001510b:	89 c3                	mov    ebx,eax
c001510d:	57                   	push   edi
c001510e:	56                   	push   esi
c001510f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015113:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015117:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001511e:	55                   	push   ebp
c001511f:	50                   	push   eax
c0015120:	e8 e3 fb ff ff       	call   c0014d08 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015125:	83 c4 14             	add    esp,0x14
c0015128:	53                   	push   ebx
c0015129:	e8 90 fc ff ff       	call   c0014dbe <LogicalDisk::assignDriveLetter()>
c001512e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015131:	e8 3e fd ff ff       	call   c0014e74 <LogicalDisk::mount()>
c0015136:	58                   	pop    eax
c0015137:	5a                   	pop    edx
c0015138:	53                   	push   ebx
c0015139:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015140:	e8 45 e3 ff ff       	call   c001348a <Device::addChild(Device*)>
c0015145:	81 c4 2c 01 00 00    	add    esp,0x12c
c001514b:	5b                   	pop    ebx
c001514c:	5e                   	pop    esi
c001514d:	5f                   	pop    edi
c001514e:	5d                   	pop    ebp
c001514f:	c3                   	ret    

c0015150 <createPartitionsForDisk(PhysicalDisk*)>:
c0015150:	55                   	push   ebp
c0015151:	57                   	push   edi
c0015152:	56                   	push   esi
c0015153:	53                   	push   ebx
c0015154:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001515a:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0015161:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015167:	3d 00 02 00 00       	cmp    eax,0x200
c001516c:	74 27                	je     c0015195 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001516e:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0015174:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001517a:	83 ec 10             	sub    esp,0x10
c001517d:	0f a4 f7 0a          	shld   edi,esi,0xa
c0015181:	99                   	cdq    
c0015182:	c1 e6 0a             	shl    esi,0xa
c0015185:	52                   	push   edx
c0015186:	89 fd                	mov    ebp,edi
c0015188:	50                   	push   eax
c0015189:	55                   	push   ebp
c001518a:	56                   	push   esi
c001518b:	e8 8c 92 00 00       	call   c001e41c <__udivdi3>
c0015190:	e9 b1 00 00 00       	jmp    c0015246 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015195:	83 ec 0c             	sub    esp,0xc
c0015198:	8b 03                	mov    eax,DWORD PTR [ebx]
c001519a:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001519e:	56                   	push   esi
c001519f:	6a 01                	push   0x1
c00151a1:	6a 00                	push   0x0
c00151a3:	6a 00                	push   0x0
c00151a5:	53                   	push   ebx
c00151a6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00151a9:	83 c4 20             	add    esp,0x20
c00151ac:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00151b4:	75 0a                	jne    c00151c0 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00151b6:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00151be:	74 2c                	je     c00151ec <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00151c0:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00151c6:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00151cc:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00151d2:	83 ec 10             	sub    esp,0x10
c00151d5:	0f a4 c2 0a          	shld   edx,eax,0xa
c00151d9:	89 f7                	mov    edi,esi
c00151db:	c1 e0 0a             	shl    eax,0xa
c00151de:	c1 ff 1f             	sar    edi,0x1f
c00151e1:	57                   	push   edi
c00151e2:	56                   	push   esi
c00151e3:	52                   	push   edx
c00151e4:	50                   	push   eax
c00151e5:	e8 32 92 00 00       	call   c001e41c <__udivdi3>
c00151ea:	eb 5a                	jmp    c0015246 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00151ec:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00151f3:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00151fa:	83 e1 7f             	and    ecx,0x7f
c00151fd:	83 e0 7f             	and    eax,0x7f
c0015200:	01 c1                	add    ecx,eax
c0015202:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0015209:	83 e0 7f             	and    eax,0x7f
c001520c:	01 c1                	add    ecx,eax
c001520e:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0015215:	83 e0 7f             	and    eax,0x7f
c0015218:	00 c1                	add    cl,al
c001521a:	74 41                	je     c001525d <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001521c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015222:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015228:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001522e:	83 ec 10             	sub    esp,0x10
c0015231:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015235:	89 f7                	mov    edi,esi
c0015237:	c1 e0 0a             	shl    eax,0xa
c001523a:	c1 ff 1f             	sar    edi,0x1f
c001523d:	57                   	push   edi
c001523e:	56                   	push   esi
c001523f:	52                   	push   edx
c0015240:	50                   	push   eax
c0015241:	e8 d6 91 00 00       	call   c001e41c <__udivdi3>
c0015246:	83 c4 14             	add    esp,0x14
c0015249:	52                   	push   edx
c001524a:	50                   	push   eax
c001524b:	6a 00                	push   0x0
c001524d:	6a 00                	push   0x0
c001524f:	53                   	push   ebx
c0015250:	e8 53 fe ff ff       	call   c00150a8 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015255:	83 c4 20             	add    esp,0x20
c0015258:	e9 79 01 00 00       	jmp    c00153d6 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001525d:	89 f0                	mov    eax,esi
c001525f:	31 f6                	xor    esi,esi
c0015261:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0015268:	75 02                	jne    c001526c <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001526a:	89 f1                	mov    ecx,esi
c001526c:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0015273:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001527a:	c1 e2 08             	shl    edx,0x8
c001527d:	c1 e7 10             	shl    edi,0x10
c0015280:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0015288:	09 fa                	or     edx,edi
c001528a:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0015292:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0015299:	83 c0 10             	add    eax,0x10
c001529c:	09 fa                	or     edx,edi
c001529e:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00152a5:	c1 e7 18             	shl    edi,0x18
c00152a8:	09 fa                	or     edx,edi
c00152aa:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00152b1:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00152b5:	c1 e7 10             	shl    edi,0x10
c00152b8:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00152bf:	c1 e2 08             	shl    edx,0x8
c00152c2:	09 fa                	or     edx,edi
c00152c4:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00152cb:	09 fa                	or     edx,edi
c00152cd:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00152d4:	c1 e7 18             	shl    edi,0x18
c00152d7:	09 fa                	or     edx,edi
c00152d9:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00152dd:	46                   	inc    esi
c00152de:	83 fe 04             	cmp    esi,0x4
c00152e1:	0f 85 7a ff ff ff    	jne    c0015261 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00152e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00152eb:	83 f0 01             	xor    eax,0x1
c00152ee:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00152f2:	75 57                	jne    c001534b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00152f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00152f8:	83 f0 01             	xor    eax,0x1
c00152fb:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00152ff:	75 4a                	jne    c001534b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015301:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0015305:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001530d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015315:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001531b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015321:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015327:	0f a4 c2 0a          	shld   edx,eax,0xa
c001532b:	89 f7                	mov    edi,esi
c001532d:	c1 e0 0a             	shl    eax,0xa
c0015330:	c1 ff 1f             	sar    edi,0x1f
c0015333:	57                   	push   edi
c0015334:	56                   	push   esi
c0015335:	52                   	push   edx
c0015336:	50                   	push   eax
c0015337:	e8 e0 90 00 00       	call   c001e41c <__udivdi3>
c001533c:	83 c4 10             	add    esp,0x10
c001533f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015343:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015347:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001534b:	84 c9                	test   cl,cl
c001534d:	74 53                	je     c00153a2 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001534f:	0f b6 c9             	movzx  ecx,cl
c0015352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015356:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001535a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001535e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0015362:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015366:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001536a:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001536e:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0015372:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015376:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001537a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001537e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015382:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0015386:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001538a:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001538e:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0015392:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015396:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001539a:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001539e:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00153a2:	31 ed                	xor    ebp,ebp
c00153a4:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00153a8:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00153ac:	89 f8                	mov    eax,edi
c00153ae:	09 f0                	or     eax,esi
c00153b0:	74 1e                	je     c00153d0 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00153b2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00153b6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00153ba:	89 d1                	mov    ecx,edx
c00153bc:	09 c1                	or     ecx,eax
c00153be:	74 10                	je     c00153d0 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00153c0:	83 ec 0c             	sub    esp,0xc
c00153c3:	57                   	push   edi
c00153c4:	56                   	push   esi
c00153c5:	52                   	push   edx
c00153c6:	50                   	push   eax
c00153c7:	53                   	push   ebx
c00153c8:	e8 db fc ff ff       	call   c00150a8 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00153cd:	83 c4 20             	add    esp,0x20
c00153d0:	45                   	inc    ebp
c00153d1:	83 fd 04             	cmp    ebp,0x4
c00153d4:	75 ce                	jne    c00153a4 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00153d6:	81 c4 5c 02 00 00    	add    esp,0x25c
c00153dc:	5b                   	pop    ebx
c00153dd:	5e                   	pop    esi
c00153de:	5f                   	pop    edi
c00153df:	5d                   	pop    ebp
c00153e0:	c3                   	ret    
c00153e1:	90                   	nop

c00153e2 <Timer::Timer(char const*)>:
c00153e2:	83 ec 0c             	sub    esp,0xc
c00153e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00153e9:	83 ec 08             	sub    esp,0x8
c00153ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00153f0:	50                   	push   eax
c00153f1:	e8 84 e2 ff ff       	call   c001367a <Device::Device(char const*)>
c00153f6:	83 c4 10             	add    esp,0x10
c00153f9:	ba 1c 9c 03 c0       	mov    edx,0xc0039c1c
c00153fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015402:	89 10                	mov    DWORD PTR [eax],edx
c0015404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015408:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0015412:	90                   	nop
c0015413:	83 c4 0c             	add    esp,0xc
c0015416:	c3                   	ret    
c0015417:	90                   	nop

c0015418 <Timer::~Timer()>:
c0015418:	83 ec 0c             	sub    esp,0xc
c001541b:	ba 1c 9c 03 c0       	mov    edx,0xc0039c1c
c0015420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015424:	89 10                	mov    DWORD PTR [eax],edx
c0015426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001542a:	83 ec 0c             	sub    esp,0xc
c001542d:	50                   	push   eax
c001542e:	e8 f9 de ff ff       	call   c001332c <Device::~Device()>
c0015433:	83 c4 10             	add    esp,0x10
c0015436:	90                   	nop
c0015437:	83 c4 0c             	add    esp,0xc
c001543a:	c3                   	ret    
c001543b:	90                   	nop

c001543c <Timer::~Timer()>:
c001543c:	83 ec 0c             	sub    esp,0xc
c001543f:	83 ec 0c             	sub    esp,0xc
c0015442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015446:	e8 cd ff ff ff       	call   c0015418 <Timer::~Timer()>
c001544b:	83 c4 10             	add    esp,0x10
c001544e:	83 ec 08             	sub    esp,0x8
c0015451:	68 5c 01 00 00       	push   0x15c
c0015456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001545a:	e8 30 cd ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c001545f:	83 c4 10             	add    esp,0x10
c0015462:	83 c4 0c             	add    esp,0xc
c0015465:	c3                   	ret    

c0015466 <Timer::read()>:
c0015466:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001546a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015470:	c3                   	ret    

c0015471 <timerHandler(unsigned long long)>:
c0015471:	55                   	push   ebp
c0015472:	57                   	push   edi
c0015473:	56                   	push   esi
c0015474:	53                   	push   ebx
c0015475:	83 ec 0c             	sub    esp,0xc
c0015478:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001547c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0015480:	01 35 d0 c0 03 c0    	add    DWORD PTR ds:0xc003c0d0,esi
c0015486:	11 3d d4 c0 03 c0    	adc    DWORD PTR ds:0xc003c0d4,edi
c001548c:	80 3d 0d b7 03 c0 00 	cmp    BYTE PTR ds:0xc003b70d,0x0
c0015493:	0f 84 07 01 00 00    	je     c00155a0 <timerHandler(unsigned long long)+0x12f>
c0015499:	e8 fb 8b ff ff       	call   c000e099 <lockStuff()>
c001549e:	83 ec 0c             	sub    esp,0xc
c00154a1:	68 44 b9 03 c0       	push   0xc003b944
c00154a6:	e8 d1 94 00 00       	call   c001e97c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154ab:	c7 04 24 44 b9 03 c0 	mov    DWORD PTR [esp],0xc003b944
c00154b2:	89 c3                	mov    ebx,eax
c00154b4:	e8 f9 93 00 00       	call   c001e8b2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00154b9:	83 c4 10             	add    esp,0x10
c00154bc:	84 c0                	test   al,al
c00154be:	74 60                	je     c0015520 <timerHandler(unsigned long long)+0xaf>
c00154c0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00154c6:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00154c9:	85 c0                	test   eax,eax
c00154cb:	0f 85 91 00 00 00    	jne    c0015562 <timerHandler(unsigned long long)+0xf1>
c00154d1:	e9 be 00 00 00       	jmp    c0015594 <timerHandler(unsigned long long)+0x123>
c00154d6:	83 ec 0c             	sub    esp,0xc
c00154d9:	55                   	push   ebp
c00154da:	e8 b7 93 ff ff       	call   c000e896 <unblockTask(ThreadControlBlock*)>
c00154df:	83 c4 10             	add    esp,0x10
c00154e2:	39 eb                	cmp    ebx,ebp
c00154e4:	75 12                	jne    c00154f8 <timerHandler(unsigned long long)+0x87>
c00154e6:	83 ec 0c             	sub    esp,0xc
c00154e9:	68 44 b9 03 c0       	push   0xc003b944
c00154ee:	e8 89 94 00 00       	call   c001e97c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154f3:	89 c3                	mov    ebx,eax
c00154f5:	83 c4 10             	add    esp,0x10
c00154f8:	83 ec 0c             	sub    esp,0xc
c00154fb:	68 44 b9 03 c0       	push   0xc003b944
c0015500:	e8 ad 93 00 00       	call   c001e8b2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015505:	83 c4 10             	add    esp,0x10
c0015508:	84 c0                	test   al,al
c001550a:	75 b4                	jne    c00154c0 <timerHandler(unsigned long long)+0x4f>
c001550c:	83 ec 0c             	sub    esp,0xc
c001550f:	68 44 b9 03 c0       	push   0xc003b944
c0015514:	e8 63 94 00 00       	call   c001e97c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015519:	83 c4 10             	add    esp,0x10
c001551c:	39 d8                	cmp    eax,ebx
c001551e:	74 a0                	je     c00154c0 <timerHandler(unsigned long long)+0x4f>
c0015520:	83 ec 0c             	sub    esp,0xc
c0015523:	68 44 b9 03 c0       	push   0xc003b944
c0015528:	e8 4f 94 00 00       	call   c001e97c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001552d:	c7 04 24 44 b9 03 c0 	mov    DWORD PTR [esp],0xc003b944
c0015534:	89 c5                	mov    ebp,eax
c0015536:	e8 93 93 00 00       	call   c001e8ce <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001553b:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001553e:	83 c4 10             	add    esp,0x10
c0015541:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0015544:	39 15 d0 c0 03 c0    	cmp    DWORD PTR ds:0xc003c0d0,edx
c001554a:	a1 d4 c0 03 c0       	mov    eax,ds:0xc003c0d4
c001554f:	19 c8                	sbb    eax,ecx
c0015551:	73 83                	jae    c00154d6 <timerHandler(unsigned long long)+0x65>
c0015553:	50                   	push   eax
c0015554:	50                   	push   eax
c0015555:	55                   	push   ebp
c0015556:	68 44 b9 03 c0       	push   0xc003b944
c001555b:	e8 7e 92 00 00       	call   c001e7de <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015560:	eb 93                	jmp    c00154f5 <timerHandler(unsigned long long)+0x84>
c0015562:	80 3d 0c b7 03 c0 00 	cmp    BYTE PTR ds:0xc003b70c,0x0
c0015569:	74 29                	je     c0015594 <timerHandler(unsigned long long)+0x123>
c001556b:	39 c6                	cmp    esi,eax
c001556d:	bb 00 00 00 00       	mov    ebx,0x0
c0015572:	19 df                	sbb    edi,ebx
c0015574:	72 19                	jb     c001558f <timerHandler(unsigned long long)+0x11e>
c0015576:	e8 f7 8a ff ff       	call   c000e072 <lockScheduler()>
c001557b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015580:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0015583:	e8 1e 8e ff ff       	call   c000e3a6 <schedule()>
c0015588:	e8 e7 8a ff ff       	call   c000e074 <unlockScheduler()>
c001558d:	eb 05                	jmp    c0015594 <timerHandler(unsigned long long)+0x123>
c001558f:	29 f0                	sub    eax,esi
c0015591:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0015594:	83 c4 0c             	add    esp,0xc
c0015597:	5b                   	pop    ebx
c0015598:	5e                   	pop    esi
c0015599:	5f                   	pop    edi
c001559a:	5d                   	pop    ebp
c001559b:	e9 8b 8e ff ff       	jmp    c000e42b <unlockStuff()>
c00155a0:	83 c4 0c             	add    esp,0xc
c00155a3:	5b                   	pop    ebx
c00155a4:	5e                   	pop    esi
c00155a5:	5f                   	pop    edi
c00155a6:	5d                   	pop    ebp
c00155a7:	c3                   	ret    

c00155a8 <setupTimer(int)>:
c00155a8:	57                   	push   edi
c00155a9:	56                   	push   esi
c00155aa:	53                   	push   ebx
c00155ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00155af:	e8 ff 18 00 00       	call   c0016eb3 <getCPUNumber()>
c00155b4:	85 c0                	test   eax,eax
c00155b6:	74 32                	je     c00155ea <setupTimer(int)+0x42>
c00155b8:	83 ec 0c             	sub    esp,0xc
c00155bb:	68 60 01 00 00       	push   0x160
c00155c0:	e8 bb cb ff ff       	call   c0012180 <operator new(unsigned long)>
c00155c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00155c8:	89 c3                	mov    ebx,eax
c00155ca:	e8 ef 88 00 00       	call   c001debe <APICTimer::APICTimer()>
c00155cf:	6a 00                	push   0x0
c00155d1:	6a 00                	push   0x0
c00155d3:	56                   	push   esi
c00155d4:	53                   	push   ebx
c00155d5:	e8 ec 87 00 00       	call   c001ddc6 <APICTimer::open(int, int, void*)>
c00155da:	83 c4 20             	add    esp,0x20
c00155dd:	e8 d4 18 00 00       	call   c0016eb6 <thisCPU()>
c00155e2:	56                   	push   esi
c00155e3:	56                   	push   esi
c00155e4:	53                   	push   ebx
c00155e5:	e9 96 00 00 00       	jmp    c0015680 <setupTimer(int)+0xd8>
c00155ea:	e8 c7 18 00 00       	call   c0016eb6 <thisCPU()>
c00155ef:	83 ec 0c             	sub    esp,0xc
c00155f2:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00155f8:	e8 6f e1 ff ff       	call   c001376c <Device::getName()>
c00155fd:	83 c4 10             	add    esp,0x10
c0015600:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0015603:	0f 85 87 00 00 00    	jne    c0015690 <setupTimer(int)+0xe8>
c0015609:	a1 08 b7 03 c0       	mov    eax,ds:0xc003b708
c001560e:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0015615:	74 79                	je     c0015690 <setupTimer(int)+0xe8>
c0015617:	83 ec 0c             	sub    esp,0xc
c001561a:	68 5c 01 00 00       	push   0x15c
c001561f:	e8 5c cb ff ff       	call   c0012180 <operator new(unsigned long)>
c0015624:	89 04 24             	mov    DWORD PTR [esp],eax
c0015627:	89 c3                	mov    ebx,eax
c0015629:	e8 e0 89 00 00       	call   c001e00e <PIT::PIT()>
c001562e:	59                   	pop    ecx
c001562f:	5f                   	pop    edi
c0015630:	53                   	push   ebx
c0015631:	ff 35 08 b7 03 c0    	push   DWORD PTR ds:0xc003b708
c0015637:	e8 4e de ff ff       	call   c001348a <Device::addChild(Device*)>
c001563c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001563e:	6a 00                	push   0x0
c0015640:	6a 00                	push   0x0
c0015642:	56                   	push   esi
c0015643:	53                   	push   ebx
c0015644:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015647:	83 c4 14             	add    esp,0x14
c001564a:	68 60 01 00 00       	push   0x160
c001564f:	e8 2c cb ff ff       	call   c0012180 <operator new(unsigned long)>
c0015654:	89 04 24             	mov    DWORD PTR [esp],eax
c0015657:	89 c7                	mov    edi,eax
c0015659:	e8 60 88 00 00       	call   c001debe <APICTimer::APICTimer()>
c001565e:	6a 00                	push   0x0
c0015660:	6a 00                	push   0x0
c0015662:	56                   	push   esi
c0015663:	57                   	push   edi
c0015664:	e8 5d 87 00 00       	call   c001ddc6 <APICTimer::open(int, int, void*)>
c0015669:	83 c4 20             	add    esp,0x20
c001566c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001566e:	6a 00                	push   0x0
c0015670:	6a 00                	push   0x0
c0015672:	6a 00                	push   0x0
c0015674:	53                   	push   ebx
c0015675:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015678:	e8 39 18 00 00       	call   c0016eb6 <thisCPU()>
c001567d:	5a                   	pop    edx
c001567e:	59                   	pop    ecx
c001567f:	57                   	push   edi
c0015680:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015686:	e8 ff dd ff ff       	call   c001348a <Device::addChild(Device*)>
c001568b:	83 c4 10             	add    esp,0x10
c001568e:	eb 33                	jmp    c00156c3 <setupTimer(int)+0x11b>
c0015690:	83 ec 0c             	sub    esp,0xc
c0015693:	68 5c 01 00 00       	push   0x15c
c0015698:	e8 e3 ca ff ff       	call   c0012180 <operator new(unsigned long)>
c001569d:	89 04 24             	mov    DWORD PTR [esp],eax
c00156a0:	89 c3                	mov    ebx,eax
c00156a2:	e8 67 89 00 00       	call   c001e00e <PIT::PIT()>
c00156a7:	58                   	pop    eax
c00156a8:	5a                   	pop    edx
c00156a9:	53                   	push   ebx
c00156aa:	ff 35 08 b7 03 c0    	push   DWORD PTR ds:0xc003b708
c00156b0:	e8 d5 dd ff ff       	call   c001348a <Device::addChild(Device*)>
c00156b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00156b7:	6a 00                	push   0x0
c00156b9:	6a 00                	push   0x0
c00156bb:	56                   	push   esi
c00156bc:	53                   	push   ebx
c00156bd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00156c0:	83 c4 20             	add    esp,0x20
c00156c3:	89 d8                	mov    eax,ebx
c00156c5:	5b                   	pop    ebx
c00156c6:	5e                   	pop    esi
c00156c7:	5f                   	pop    edi
c00156c8:	c3                   	ret    
c00156c9:	90                   	nop

c00156ca <VCache::VCache(PhysicalDisk*)>:
c00156ca:	53                   	push   ebx
c00156cb:	83 ec 08             	sub    esp,0x8
c00156ce:	ba 4c 9c 03 c0       	mov    edx,0xc0039c4c
c00156d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156d7:	89 10                	mov    DWORD PTR [eax],edx
c00156d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156dd:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00156e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156e8:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00156ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156f3:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00156fa:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015701:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015705:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001570c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015713:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015717:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001571e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015722:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0015726:	83 ec 0c             	sub    esp,0xc
c0015729:	6a 10                	push   0x10
c001572b:	e8 50 ca ff ff       	call   c0012180 <operator new(unsigned long)>
c0015730:	83 c4 10             	add    esp,0x10
c0015733:	89 c3                	mov    ebx,eax
c0015735:	83 ec 0c             	sub    esp,0xc
c0015738:	53                   	push   ebx
c0015739:	e8 4c 8a ff ff       	call   c000e18a <Mutex::Mutex()>
c001573e:	83 c4 10             	add    esp,0x10
c0015741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015745:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0015748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001574c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015750:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0015753:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015757:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001575e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015762:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001576c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001576f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015773:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0015779:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001577f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015783:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0015786:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0015789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001578d:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0015791:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015795:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001579b:	c1 e0 06             	shl    eax,0x6
c001579e:	83 ec 0c             	sub    esp,0xc
c00157a1:	50                   	push   eax
c00157a2:	e8 24 7a ff ff       	call   c000d1cb <malloc>
c00157a7:	83 c4 10             	add    esp,0x10
c00157aa:	89 c2                	mov    edx,eax
c00157ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157b0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00157b3:	90                   	nop
c00157b4:	83 c4 08             	add    esp,0x8
c00157b7:	5b                   	pop    ebx
c00157b8:	c3                   	ret    
c00157b9:	90                   	nop

c00157ba <VCache::writeWriteBuffer()>:
c00157ba:	53                   	push   ebx
c00157bb:	83 ec 14             	sub    esp,0x14
c00157be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00157c2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00157c5:	8b 10                	mov    edx,DWORD PTR [eax]
c00157c7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00157ca:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00157cd:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00157d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00157d3:	50                   	push   eax
c00157d4:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00157d7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00157de:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00157e5:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00157e9:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00157f0:	83 c4 28             	add    esp,0x28
c00157f3:	5b                   	pop    ebx
c00157f4:	c3                   	ret    
c00157f5:	90                   	nop

c00157f6 <VCache::~VCache()>:
c00157f6:	83 ec 0c             	sub    esp,0xc
c00157f9:	ba 4c 9c 03 c0       	mov    edx,0xc0039c4c
c00157fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015802:	89 10                	mov    DWORD PTR [eax],edx
c0015804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015808:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001580b:	84 c0                	test   al,al
c001580d:	74 0f                	je     c001581e <VCache::~VCache()+0x28>
c001580f:	83 ec 0c             	sub    esp,0xc
c0015812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015816:	e8 9f ff ff ff       	call   c00157ba <VCache::writeWriteBuffer()>
c001581b:	83 c4 10             	add    esp,0x10
c001581e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015822:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015825:	83 ec 0c             	sub    esp,0xc
c0015828:	50                   	push   eax
c0015829:	e8 ad 79 ff ff       	call   c000d1db <free>
c001582e:	83 c4 10             	add    esp,0x10
c0015831:	90                   	nop
c0015832:	83 c4 0c             	add    esp,0xc
c0015835:	c3                   	ret    

c0015836 <VCache::~VCache()>:
c0015836:	83 ec 0c             	sub    esp,0xc
c0015839:	83 ec 0c             	sub    esp,0xc
c001583c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015840:	e8 b1 ff ff ff       	call   c00157f6 <VCache::~VCache()>
c0015845:	83 c4 10             	add    esp,0x10
c0015848:	83 ec 08             	sub    esp,0x8
c001584b:	6a 30                	push   0x30
c001584d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015851:	e8 39 c9 ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c0015856:	83 c4 10             	add    esp,0x10
c0015859:	83 c4 0c             	add    esp,0xc
c001585c:	c3                   	ret    
c001585d:	90                   	nop

c001585e <VCache::write(unsigned long long, int, void*)>:
c001585e:	55                   	push   ebp
c001585f:	57                   	push   edi
c0015860:	56                   	push   esi
c0015861:	53                   	push   ebx
c0015862:	83 ec 28             	sub    esp,0x28
c0015865:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0015869:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001586d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0015871:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0015875:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015878:	e8 e1 8e ff ff       	call   c000e75e <Semaphore::acquire()>
c001587d:	83 c4 10             	add    esp,0x10
c0015880:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0015884:	74 66                	je     c00158ec <VCache::write(unsigned long long, int, void*)+0x8e>
c0015886:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015889:	99                   	cdq    
c001588a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001588e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0015891:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0015894:	89 c1                	mov    ecx,eax
c0015896:	89 d0                	mov    eax,edx
c0015898:	31 f1                	xor    ecx,esi
c001589a:	31 f8                	xor    eax,edi
c001589c:	89 ca                	mov    edx,ecx
c001589e:	09 c2                	or     edx,eax
c00158a0:	75 3e                	jne    c00158e0 <VCache::write(unsigned long long, int, void*)+0x82>
c00158a2:	83 fd 01             	cmp    ebp,0x1
c00158a5:	75 39                	jne    c00158e0 <VCache::write(unsigned long long, int, void*)+0x82>
c00158a7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00158aa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00158b0:	51                   	push   ecx
c00158b1:	50                   	push   eax
c00158b2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00158b6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00158ba:	0f af c8             	imul   ecx,eax
c00158bd:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00158c0:	51                   	push   ecx
c00158c1:	e8 0c ad fe ff       	call   c00005d2 <memcpy>
c00158c6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00158c9:	83 c4 10             	add    esp,0x10
c00158cc:	40                   	inc    eax
c00158cd:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00158d0:	83 f8 40             	cmp    eax,0x40
c00158d3:	75 57                	jne    c001592c <VCache::write(unsigned long long, int, void*)+0xce>
c00158d5:	83 ec 0c             	sub    esp,0xc
c00158d8:	53                   	push   ebx
c00158d9:	e8 dc fe ff ff       	call   c00157ba <VCache::writeWriteBuffer()>
c00158de:	eb 34                	jmp    c0015914 <VCache::write(unsigned long long, int, void*)+0xb6>
c00158e0:	83 ec 0c             	sub    esp,0xc
c00158e3:	53                   	push   ebx
c00158e4:	e8 d1 fe ff ff       	call   c00157ba <VCache::writeWriteBuffer()>
c00158e9:	83 c4 10             	add    esp,0x10
c00158ec:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00158ef:	83 fd 3f             	cmp    ebp,0x3f
c00158f2:	7f 25                	jg     c0015919 <VCache::write(unsigned long long, int, void*)+0xbb>
c00158f4:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00158f7:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00158fa:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00158fd:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0015901:	52                   	push   edx
c0015902:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0015908:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001590c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001590f:	e8 be ac fe ff       	call   c00005d2 <memcpy>
c0015914:	83 c4 10             	add    esp,0x10
c0015917:	eb 13                	jmp    c001592c <VCache::write(unsigned long long, int, void*)+0xce>
c0015919:	83 ec 0c             	sub    esp,0xc
c001591c:	8b 10                	mov    edx,DWORD PTR [eax]
c001591e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015922:	55                   	push   ebp
c0015923:	57                   	push   edi
c0015924:	56                   	push   esi
c0015925:	50                   	push   eax
c0015926:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0015929:	83 c4 20             	add    esp,0x20
c001592c:	83 ec 0c             	sub    esp,0xc
c001592f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015932:	e8 c3 93 ff ff       	call   c000ecfa <Semaphore::release()>
c0015937:	83 c4 2c             	add    esp,0x2c
c001593a:	31 c0                	xor    eax,eax
c001593c:	5b                   	pop    ebx
c001593d:	5e                   	pop    esi
c001593e:	5f                   	pop    edi
c001593f:	5d                   	pop    ebp
c0015940:	c3                   	ret    
c0015941:	90                   	nop

c0015942 <VCache::read(unsigned long long, int, void*)>:
c0015942:	57                   	push   edi
c0015943:	56                   	push   esi
c0015944:	53                   	push   ebx
c0015945:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015949:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001594d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015951:	83 ec 0c             	sub    esp,0xc
c0015954:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015957:	e8 02 8e ff ff       	call   c000e75e <Semaphore::acquire()>
c001595c:	83 c4 10             	add    esp,0x10
c001595f:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0015963:	74 0c                	je     c0015971 <VCache::read(unsigned long long, int, void*)+0x2f>
c0015965:	83 ec 0c             	sub    esp,0xc
c0015968:	53                   	push   ebx
c0015969:	e8 4c fe ff ff       	call   c00157ba <VCache::writeWriteBuffer()>
c001596e:	83 c4 10             	add    esp,0x10
c0015971:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015974:	83 ec 0c             	sub    esp,0xc
c0015977:	8b 10                	mov    edx,DWORD PTR [eax]
c0015979:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001597d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015981:	57                   	push   edi
c0015982:	56                   	push   esi
c0015983:	50                   	push   eax
c0015984:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015987:	83 c4 14             	add    esp,0x14
c001598a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001598d:	e8 68 93 ff ff       	call   c000ecfa <Semaphore::release()>
c0015992:	83 c4 10             	add    esp,0x10
c0015995:	31 c0                	xor    eax,eax
c0015997:	5b                   	pop    ebx
c0015998:	5e                   	pop    esi
c0015999:	5f                   	pop    edi
c001599a:	c3                   	ret    
c001599b:	90                   	nop

c001599c <Video::putrect(int, int, int, int, unsigned int)>:
c001599c:	55                   	push   ebp
c001599d:	57                   	push   edi
c001599e:	56                   	push   esi
c001599f:	53                   	push   ebx
c00159a0:	83 ec 1c             	sub    esp,0x1c
c00159a3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00159a7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00159ab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00159af:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00159b3:	01 e8                	add    eax,ebp
c00159b5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00159b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00159bd:	01 df                	add    edi,ebx
c00159bf:	39 fb                	cmp    ebx,edi
c00159c1:	7d 1b                	jge    c00159de <Video::putrect(int, int, int, int, unsigned int)+0x42>
c00159c3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00159c7:	7d 12                	jge    c00159db <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c00159c9:	8b 16                	mov    edx,DWORD PTR [esi]
c00159cb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00159cf:	53                   	push   ebx
c00159d0:	55                   	push   ebp
c00159d1:	45                   	inc    ebp
c00159d2:	56                   	push   esi
c00159d3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00159d6:	83 c4 10             	add    esp,0x10
c00159d9:	eb e8                	jmp    c00159c3 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c00159db:	43                   	inc    ebx
c00159dc:	eb e1                	jmp    c00159bf <Video::putrect(int, int, int, int, unsigned int)+0x23>
c00159de:	83 c4 1c             	add    esp,0x1c
c00159e1:	5b                   	pop    ebx
c00159e2:	5e                   	pop    esi
c00159e3:	5f                   	pop    edi
c00159e4:	5d                   	pop    ebp
c00159e5:	c3                   	ret    

c00159e6 <Video::blit(unsigned int*, int, int, int, int)>:
c00159e6:	55                   	push   ebp
c00159e7:	57                   	push   edi
c00159e8:	56                   	push   esi
c00159e9:	53                   	push   ebx
c00159ea:	83 ec 1c             	sub    esp,0x1c
c00159ed:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00159f1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00159f5:	85 c0                	test   eax,eax
c00159f7:	79 02                	jns    c00159fb <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00159f9:	31 c0                	xor    eax,eax
c00159fb:	c1 e0 02             	shl    eax,0x2
c00159fe:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0015a02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a06:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015a0a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0015a0e:	39 d8                	cmp    eax,ebx
c0015a10:	7e 49                	jle    c0015a5b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0015a12:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0015a18:	7c 41                	jl     c0015a5b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0015a1a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0015a1e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0015a22:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0015a26:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0015a2a:	39 f9                	cmp    ecx,edi
c0015a2c:	7e 22                	jle    c0015a50 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0015a2e:	83 c5 04             	add    ebp,0x4
c0015a31:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0015a37:	7c 14                	jl     c0015a4d <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0015a39:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015a3b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0015a3e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015a42:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015a46:	56                   	push   esi
c0015a47:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0015a4a:	83 c4 10             	add    esp,0x10
c0015a4d:	47                   	inc    edi
c0015a4e:	eb d2                	jmp    c0015a22 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0015a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015a54:	43                   	inc    ebx
c0015a55:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0015a59:	eb ab                	jmp    c0015a06 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0015a5b:	83 c4 1c             	add    esp,0x1c
c0015a5e:	5b                   	pop    ebx
c0015a5f:	5e                   	pop    esi
c0015a60:	5f                   	pop    edi
c0015a61:	5d                   	pop    ebp
c0015a62:	c3                   	ret    
c0015a63:	90                   	nop

c0015a64 <Video::clearScreen(unsigned int)>:
c0015a64:	57                   	push   edi
c0015a65:	56                   	push   esi
c0015a66:	53                   	push   ebx
c0015a67:	31 db                	xor    ebx,ebx
c0015a69:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015a6d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0015a73:	7e 1f                	jle    c0015a94 <Video::clearScreen(unsigned int)+0x30>
c0015a75:	31 ff                	xor    edi,edi
c0015a77:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0015a7d:	7e 12                	jle    c0015a91 <Video::clearScreen(unsigned int)+0x2d>
c0015a7f:	8b 06                	mov    eax,DWORD PTR [esi]
c0015a81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015a85:	53                   	push   ebx
c0015a86:	57                   	push   edi
c0015a87:	47                   	inc    edi
c0015a88:	56                   	push   esi
c0015a89:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015a8c:	83 c4 10             	add    esp,0x10
c0015a8f:	eb e6                	jmp    c0015a77 <Video::clearScreen(unsigned int)+0x13>
c0015a91:	43                   	inc    ebx
c0015a92:	eb d9                	jmp    c0015a6d <Video::clearScreen(unsigned int)+0x9>
c0015a94:	5b                   	pop    ebx
c0015a95:	5e                   	pop    esi
c0015a96:	5f                   	pop    edi
c0015a97:	c3                   	ret    

c0015a98 <Video::putpixel(int, int, unsigned int)>:
c0015a98:	c7 44 24 04 54 9c 03 c0 	mov    DWORD PTR [esp+0x4],0xc0039c54
c0015aa0:	e9 2b 71 ff ff       	jmp    c000cbd0 <kprintf(char const*, ...)>
c0015aa5:	90                   	nop

c0015aa6 <Video::Video(char const*)>:
c0015aa6:	83 ec 0c             	sub    esp,0xc
c0015aa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015aad:	83 ec 08             	sub    esp,0x8
c0015ab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ab4:	50                   	push   eax
c0015ab5:	e8 c0 db ff ff       	call   c001367a <Device::Device(char const*)>
c0015aba:	83 c4 10             	add    esp,0x10
c0015abd:	ba 6c 9c 03 c0       	mov    edx,0xc0039c6c
c0015ac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ac6:	89 10                	mov    DWORD PTR [eax],edx
c0015ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015acc:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0015ad6:	90                   	nop
c0015ad7:	83 c4 0c             	add    esp,0xc
c0015ada:	c3                   	ret    
c0015adb:	90                   	nop

c0015adc <Video::~Video()>:
c0015adc:	83 ec 0c             	sub    esp,0xc
c0015adf:	ba 6c 9c 03 c0       	mov    edx,0xc0039c6c
c0015ae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ae8:	89 10                	mov    DWORD PTR [eax],edx
c0015aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015aee:	83 ec 0c             	sub    esp,0xc
c0015af1:	50                   	push   eax
c0015af2:	e8 35 d8 ff ff       	call   c001332c <Device::~Device()>
c0015af7:	83 c4 10             	add    esp,0x10
c0015afa:	90                   	nop
c0015afb:	83 c4 0c             	add    esp,0xc
c0015afe:	c3                   	ret    
c0015aff:	90                   	nop

c0015b00 <Video::~Video()>:
c0015b00:	83 ec 0c             	sub    esp,0xc
c0015b03:	83 ec 0c             	sub    esp,0xc
c0015b06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b0a:	e8 cd ff ff ff       	call   c0015adc <Video::~Video()>
c0015b0f:	83 c4 10             	add    esp,0x10
c0015b12:	83 ec 08             	sub    esp,0x8
c0015b15:	68 64 01 00 00       	push   0x164
c0015b1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b1e:	e8 6c c6 ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c0015b23:	83 c4 10             	add    esp,0x10
c0015b26:	83 c4 0c             	add    esp,0xc
c0015b29:	c3                   	ret    

c0015b2a <Video::isMonochrome()>:
c0015b2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b2e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0015b34:	c3                   	ret    
c0015b35:	90                   	nop

c0015b36 <Video::getWidth()>:
c0015b36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b3a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015b40:	c3                   	ret    
c0015b41:	90                   	nop

c0015b42 <Video::getHeight()>:
c0015b42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b46:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015b4c:	c3                   	ret    
c0015b4d:	90                   	nop

c0015b4e <Video::drawCursor(int, int, unsigned char*, int)>:
c0015b4e:	55                   	push   ebp
c0015b4f:	57                   	push   edi
c0015b50:	56                   	push   esi
c0015b51:	53                   	push   ebx
c0015b52:	83 ec 2c             	sub    esp,0x2c
c0015b55:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015b59:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0015b5d:	83 f8 01             	cmp    eax,0x1
c0015b60:	19 c9                	sbb    ecx,ecx
c0015b62:	31 db                	xor    ebx,ebx
c0015b64:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0015b68:	89 cd                	mov    ebp,ecx
c0015b6a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0015b72:	f7 d5                	not    ebp
c0015b74:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0015b7a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015b7e:	01 d8                	add    eax,ebx
c0015b80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015b84:	56                   	push   esi
c0015b85:	e8 b8 ff ff ff       	call   c0015b42 <Video::getHeight()>
c0015b8a:	59                   	pop    ecx
c0015b8b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0015b8f:	7e 70                	jle    c0015c01 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0015b91:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015b95:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0015b99:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0015b9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015ba0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015ba4:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0015bab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015baf:	89 f8                	mov    eax,edi
c0015bb1:	83 c0 20             	add    eax,0x20
c0015bb4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015bb8:	56                   	push   esi
c0015bb9:	e8 78 ff ff ff       	call   c0015b36 <Video::getWidth()>
c0015bbe:	5a                   	pop    edx
c0015bbf:	39 c7                	cmp    edi,eax
c0015bc1:	7d 34                	jge    c0015bf7 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0015bc3:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0015bc8:	74 05                	je     c0015bcf <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0015bca:	8b 06                	mov    eax,DWORD PTR [esi]
c0015bcc:	55                   	push   ebp
c0015bcd:	eb 0d                	jmp    c0015bdc <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0015bcf:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0015bd4:	74 12                	je     c0015be8 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0015bd6:	8b 06                	mov    eax,DWORD PTR [esi]
c0015bd8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015bdc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015be0:	57                   	push   edi
c0015be1:	56                   	push   esi
c0015be2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015be5:	83 c4 10             	add    esp,0x10
c0015be8:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0015bec:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0015bf0:	47                   	inc    edi
c0015bf1:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015bf5:	75 c1                	jne    c0015bb8 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0015bf7:	43                   	inc    ebx
c0015bf8:	83 fb 20             	cmp    ebx,0x20
c0015bfb:	0f 85 79 ff ff ff    	jne    c0015b7a <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0015c01:	83 c4 2c             	add    esp,0x2c
c0015c04:	5b                   	pop    ebx
c0015c05:	5e                   	pop    esi
c0015c06:	5f                   	pop    edi
c0015c07:	5d                   	pop    ebp
c0015c08:	c3                   	ret    
c0015c09:	90                   	nop

c0015c0a <ACPI::close(int, int, void*)>:
c0015c0a:	83 ec 1c             	sub    esp,0x1c
c0015c0d:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0015c15:	74 0a                	je     c0015c21 <ACPI::close(int, int, void*)+0x17>
c0015c17:	b8 00 00 00 00       	mov    eax,0x0
c0015c1c:	e9 9a 00 00 00       	jmp    c0015cbb <ACPI::close(int, int, void*)+0xb1>
c0015c21:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015c26:	75 37                	jne    c0015c5f <ACPI::close(int, int, void*)+0x55>
c0015c28:	83 ec 0c             	sub    esp,0xc
c0015c2b:	68 a4 9c 03 c0       	push   0xc0039ca4
c0015c30:	e8 9b 6f ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0015c35:	83 c4 10             	add    esp,0x10
c0015c38:	a1 e8 c0 03 c0       	mov    eax,ds:0xc003c0e8
c0015c3d:	85 c0                	test   eax,eax
c0015c3f:	74 07                	je     c0015c48 <ACPI::close(int, int, void*)+0x3e>
c0015c41:	a1 e8 c0 03 c0       	mov    eax,ds:0xc003c0e8
c0015c46:	ff d0                	call   eax
c0015c48:	83 ec 0c             	sub    esp,0xc
c0015c4b:	68 58 9d 03 c0       	push   0xc0039d58
c0015c50:	e8 99 70 ff ff       	call   c000ccee <panic(char const*)>
c0015c55:	83 c4 10             	add    esp,0x10
c0015c58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c5d:	eb 5c                	jmp    c0015cbb <ACPI::close(int, int, void*)+0xb1>
c0015c5f:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0015c64:	75 50                	jne    c0015cb6 <ACPI::close(int, int, void*)+0xac>
c0015c66:	a1 e4 c0 03 c0       	mov    eax,ds:0xc003c0e4
c0015c6b:	85 c0                	test   eax,eax
c0015c6d:	74 07                	je     c0015c76 <ACPI::close(int, int, void*)+0x6c>
c0015c6f:	a1 e4 c0 03 c0       	mov    eax,ds:0xc003c0e4
c0015c74:	ff d0                	call   eax
c0015c76:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0015c7b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015c80:	83 e0 02             	and    eax,0x2
c0015c83:	74 1c                	je     c0015ca1 <ACPI::close(int, int, void*)+0x97>
c0015c85:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0015c8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c90:	89 c2                	mov    edx,eax
c0015c92:	ec                   	in     al,dx
c0015c93:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0015c97:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0015c9b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015c9f:	eb da                	jmp    c0015c7b <ACPI::close(int, int, void*)+0x71>
c0015ca1:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0015ca8:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0015cad:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0015cb1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015cb5:	ee                   	out    dx,al
c0015cb6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015cbb:	83 c4 1c             	add    esp,0x1c
c0015cbe:	c3                   	ret    

c0015cbf <findRSDP()>:
c0015cbf:	83 ec 1c             	sub    esp,0x1c
c0015cc2:	a1 08 b7 03 c0       	mov    eax,ds:0xc003b708
c0015cc7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015ccd:	83 e0 04             	and    eax,0x4
c0015cd0:	84 c0                	test   al,al
c0015cd2:	75 07                	jne    c0015cdb <findRSDP()+0x1c>
c0015cd4:	b8 00 00 00 00       	mov    eax,0x0
c0015cd9:	eb 6a                	jmp    c0015d45 <findRSDP()+0x86>
c0015cdb:	a1 d0 b8 03 c0       	mov    eax,ds:0xc003b8d0
c0015ce0:	3d ff 07 00 00       	cmp    eax,0x7ff
c0015ce5:	7f 1b                	jg     c0015d02 <findRSDP()+0x43>
c0015ce7:	a1 08 b7 03 c0       	mov    eax,ds:0xc003b708
c0015cec:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015cf2:	83 e2 fb             	and    edx,0xfffffffb
c0015cf5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015cfb:	b8 00 00 00 00       	mov    eax,0x0
c0015d00:	eb 43                	jmp    c0015d45 <findRSDP()+0x86>
c0015d02:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0015d0a:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0015d12:	77 2c                	ja     c0015d40 <findRSDP()+0x81>
c0015d14:	83 ec 04             	sub    esp,0x4
c0015d17:	6a 08                	push   0x8
c0015d19:	68 b1 9c 03 c0       	push   0xc0039cb1
c0015d1e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015d22:	e8 48 a8 fe ff       	call   c000056f <memcmp>
c0015d27:	83 c4 10             	add    esp,0x10
c0015d2a:	85 c0                	test   eax,eax
c0015d2c:	0f 94 c0             	sete   al
c0015d2f:	84 c0                	test   al,al
c0015d31:	74 06                	je     c0015d39 <findRSDP()+0x7a>
c0015d33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d37:	eb 0c                	jmp    c0015d45 <findRSDP()+0x86>
c0015d39:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0015d3e:	eb ca                	jmp    c0015d0a <findRSDP()+0x4b>
c0015d40:	b8 00 00 00 00       	mov    eax,0x0
c0015d45:	83 c4 1c             	add    esp,0x1c
c0015d48:	c3                   	ret    

c0015d49 <loadACPITables(unsigned char*)>:
c0015d49:	56                   	push   esi
c0015d4a:	53                   	push   ebx
c0015d4b:	83 ec 44             	sub    esp,0x44
c0015d4e:	a1 08 b7 03 c0       	mov    eax,ds:0xc003b708
c0015d53:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015d59:	83 e0 04             	and    eax,0x4
c0015d5c:	84 c0                	test   al,al
c0015d5e:	0f 84 05 02 00 00    	je     c0015f69 <loadACPITables(unsigned char*)+0x220>
c0015d64:	a0 00 c3 03 c0       	mov    al,ds:0xc003c300
c0015d69:	84 c0                	test   al,al
c0015d6b:	74 75                	je     c0015de2 <loadACPITables(unsigned char*)+0x99>
c0015d6d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015d71:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015d75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d79:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015d7c:	83 e8 24             	sub    eax,0x24
c0015d7f:	c1 e8 03             	shr    eax,0x3
c0015d82:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015d86:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0015d8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015d92:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015d96:	0f 8d b2 00 00 00    	jge    c0015e4e <loadACPITables(unsigned char*)+0x105>
c0015d9c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015da0:	83 c0 24             	add    eax,0x24
c0015da3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015da7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015dab:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015db3:	c1 e0 03             	shl    eax,0x3
c0015db6:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0015dba:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015dbe:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015dc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015dc3:	89 c1                	mov    ecx,eax
c0015dc5:	a1 ec c0 03 c0       	mov    eax,ds:0xc003c0ec
c0015dca:	8d 50 01             	lea    edx,[eax+0x1]
c0015dcd:	89 15 ec c0 03 c0    	mov    DWORD PTR ds:0xc003c0ec,edx
c0015dd3:	89 ca                	mov    edx,ecx
c0015dd5:	89 14 c5 04 c1 03 c0 	mov    DWORD PTR [eax*8-0x3ffc3efc],edx
c0015ddc:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0015de0:	eb ac                	jmp    c0015d8e <loadACPITables(unsigned char*)+0x45>
c0015de2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015de6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015dea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015dee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015df1:	83 e8 24             	sub    eax,0x24
c0015df4:	c1 e8 02             	shr    eax,0x2
c0015df7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015dfb:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0015e03:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015e07:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0015e0b:	7d 41                	jge    c0015e4e <loadACPITables(unsigned char*)+0x105>
c0015e0d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015e11:	83 c0 24             	add    eax,0x24
c0015e14:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015e18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015e1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015e20:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015e24:	c1 e0 02             	shl    eax,0x2
c0015e27:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0015e2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015e2f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0015e31:	a1 ec c0 03 c0       	mov    eax,ds:0xc003c0ec
c0015e36:	8d 50 01             	lea    edx,[eax+0x1]
c0015e39:	89 15 ec c0 03 c0    	mov    DWORD PTR ds:0xc003c0ec,edx
c0015e3f:	89 ca                	mov    edx,ecx
c0015e41:	89 14 c5 04 c1 03 c0 	mov    DWORD PTR [eax*8-0x3ffc3efc],edx
c0015e48:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0015e4c:	eb b5                	jmp    c0015e03 <loadACPITables(unsigned char*)+0xba>
c0015e4e:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0015e56:	a1 ec c0 03 c0       	mov    eax,ds:0xc003c0ec
c0015e5b:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0015e5f:	0f 8d 05 01 00 00    	jge    c0015f6a <loadACPITables(unsigned char*)+0x221>
c0015e65:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015e69:	8b 04 c5 04 c1 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc3efc]
c0015e70:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e80:	25 ff 0f 00 00       	and    eax,0xfff
c0015e85:	89 c6                	mov    esi,eax
c0015e87:	e8 f3 b2 ff ff       	call   c001117f <Virt::getAKernelVAS()>
c0015e8c:	89 c3                	mov    ebx,eax
c0015e8e:	83 ec 0c             	sub    esp,0xc
c0015e91:	6a 01                	push   0x1
c0015e93:	e8 57 b1 ff ff       	call   c0010fef <Virt::allocateKernelVirtualPages(int)>
c0015e98:	83 c4 10             	add    esp,0x10
c0015e9b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e9f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0015ea5:	83 ec 0c             	sub    esp,0xc
c0015ea8:	6a 01                	push   0x1
c0015eaa:	6a 01                	push   0x1
c0015eac:	50                   	push   eax
c0015ead:	52                   	push   edx
c0015eae:	53                   	push   ebx
c0015eaf:	e8 5e ba ff ff       	call   c0011912 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015eb4:	83 c4 20             	add    esp,0x20
c0015eb7:	09 f0                	or     eax,esi
c0015eb9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015ebd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015ec1:	c1 e0 03             	shl    eax,0x3
c0015ec4:	05 00 c1 03 c0       	add    eax,0xc003c100
c0015ec9:	83 ec 04             	sub    esp,0x4
c0015ecc:	6a 04                	push   0x4
c0015ece:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015ed2:	50                   	push   eax
c0015ed3:	e8 fa a6 fe ff       	call   c00005d2 <memcpy>
c0015ed8:	83 c4 10             	add    esp,0x10
c0015edb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015edf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015ee2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015ee6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015eea:	05 00 10 00 00       	add    eax,0x1000
c0015eef:	c1 e8 0c             	shr    eax,0xc
c0015ef2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015ef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015efa:	89 04 24             	mov    DWORD PTR [esp],eax
c0015efd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f01:	25 ff 0f 00 00       	and    eax,0xfff
c0015f06:	89 c6                	mov    esi,eax
c0015f08:	e8 72 b2 ff ff       	call   c001117f <Virt::getAKernelVAS()>
c0015f0d:	89 c3                	mov    ebx,eax
c0015f0f:	83 ec 0c             	sub    esp,0xc
c0015f12:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015f16:	e8 d4 b0 ff ff       	call   c0010fef <Virt::allocateKernelVirtualPages(int)>
c0015f1b:	83 c4 10             	add    esp,0x10
c0015f1e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f22:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0015f28:	83 ec 0c             	sub    esp,0xc
c0015f2b:	6a 01                	push   0x1
c0015f2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015f31:	50                   	push   eax
c0015f32:	52                   	push   edx
c0015f33:	53                   	push   ebx
c0015f34:	e8 d9 b9 ff ff       	call   c0011912 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015f39:	83 c4 20             	add    esp,0x20
c0015f3c:	09 f0                	or     eax,esi
c0015f3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015f42:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015f45:	83 ec 0c             	sub    esp,0xc
c0015f48:	50                   	push   eax
c0015f49:	e8 d7 b3 ff ff       	call   c0011325 <Virt::freeKernelVirtualPages(unsigned long)>
c0015f4e:	83 c4 10             	add    esp,0x10
c0015f51:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015f55:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015f59:	89 14 c5 04 c1 03 c0 	mov    DWORD PTR [eax*8-0x3ffc3efc],edx
c0015f60:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0015f64:	e9 ed fe ff ff       	jmp    c0015e56 <loadACPITables(unsigned char*)+0x10d>
c0015f69:	90                   	nop
c0015f6a:	83 c4 44             	add    esp,0x44
c0015f6d:	5b                   	pop    ebx
c0015f6e:	5e                   	pop    esi
c0015f6f:	c3                   	ret    

c0015f70 <findRSDT(unsigned char*)>:
c0015f70:	56                   	push   esi
c0015f71:	53                   	push   ebx
c0015f72:	83 ec 44             	sub    esp,0x44
c0015f75:	a1 08 b7 03 c0       	mov    eax,ds:0xc003b708
c0015f7a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015f80:	83 e0 04             	and    eax,0x4
c0015f83:	84 c0                	test   al,al
c0015f85:	75 0a                	jne    c0015f91 <findRSDT(unsigned char*)+0x21>
c0015f87:	b8 00 00 00 00       	mov    eax,0x0
c0015f8c:	e9 f7 00 00 00       	jmp    c0016088 <findRSDT(unsigned char*)+0x118>
c0015f91:	83 ec 04             	sub    esp,0x4
c0015f94:	6a 24                	push   0x24
c0015f96:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0015f9a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0015f9e:	50                   	push   eax
c0015f9f:	e8 2e a6 fe ff       	call   c00005d2 <memcpy>
c0015fa4:	83 c4 10             	add    esp,0x10
c0015fa7:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015fab:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0015faf:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0015fb7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015fbb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015fbf:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0015fc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015fc7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015fcb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015fcf:	25 ff 0f 00 00       	and    eax,0xfff
c0015fd4:	89 c6                	mov    esi,eax
c0015fd6:	e8 a4 b1 ff ff       	call   c001117f <Virt::getAKernelVAS()>
c0015fdb:	89 c3                	mov    ebx,eax
c0015fdd:	83 ec 0c             	sub    esp,0xc
c0015fe0:	6a 02                	push   0x2
c0015fe2:	e8 08 b0 ff ff       	call   c0010fef <Virt::allocateKernelVirtualPages(int)>
c0015fe7:	83 c4 10             	add    esp,0x10
c0015fea:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015fee:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0015ff4:	83 ec 0c             	sub    esp,0xc
c0015ff7:	6a 01                	push   0x1
c0015ff9:	6a 02                	push   0x2
c0015ffb:	50                   	push   eax
c0015ffc:	52                   	push   edx
c0015ffd:	53                   	push   ebx
c0015ffe:	e8 0f b9 ff ff       	call   c0011912 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016003:	83 c4 20             	add    esp,0x20
c0016006:	09 f0                	or     eax,esi
c0016008:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001600c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016010:	25 ff 0f 00 00       	and    eax,0xfff
c0016015:	89 c6                	mov    esi,eax
c0016017:	e8 63 b1 ff ff       	call   c001117f <Virt::getAKernelVAS()>
c001601c:	89 c3                	mov    ebx,eax
c001601e:	83 ec 0c             	sub    esp,0xc
c0016021:	6a 02                	push   0x2
c0016023:	e8 c7 af ff ff       	call   c0010fef <Virt::allocateKernelVirtualPages(int)>
c0016028:	83 c4 10             	add    esp,0x10
c001602b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001602f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016035:	83 ec 0c             	sub    esp,0xc
c0016038:	6a 01                	push   0x1
c001603a:	6a 02                	push   0x2
c001603c:	50                   	push   eax
c001603d:	52                   	push   edx
c001603e:	53                   	push   ebx
c001603f:	e8 ce b8 ff ff       	call   c0011912 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016044:	83 c4 20             	add    esp,0x20
c0016047:	09 f0                	or     eax,esi
c0016049:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001604d:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0016052:	75 11                	jne    c0016065 <findRSDT(unsigned char*)+0xf5>
c0016054:	c6 05 00 c3 03 c0 00 	mov    BYTE PTR ds:0xc003c300,0x0
c001605b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001605f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016063:	eb 1f                	jmp    c0016084 <findRSDT(unsigned char*)+0x114>
c0016065:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c001606a:	75 11                	jne    c001607d <findRSDT(unsigned char*)+0x10d>
c001606c:	c6 05 00 c3 03 c0 01 	mov    BYTE PTR ds:0xc003c300,0x1
c0016073:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016077:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001607b:	eb 07                	jmp    c0016084 <findRSDT(unsigned char*)+0x114>
c001607d:	b8 00 00 00 00       	mov    eax,0x0
c0016082:	eb 04                	jmp    c0016088 <findRSDT(unsigned char*)+0x118>
c0016084:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016088:	83 c4 44             	add    esp,0x44
c001608b:	5b                   	pop    ebx
c001608c:	5e                   	pop    esi
c001608d:	c3                   	ret    

c001608e <findDataTable(unsigned char*, char*)>:
c001608e:	83 ec 1c             	sub    esp,0x1c
c0016091:	a1 08 b7 03 c0       	mov    eax,ds:0xc003b708
c0016096:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001609c:	83 e0 04             	and    eax,0x4
c001609f:	84 c0                	test   al,al
c00160a1:	75 07                	jne    c00160aa <findDataTable(unsigned char*, char*)+0x1c>
c00160a3:	b8 00 00 00 00       	mov    eax,0x0
c00160a8:	eb 7c                	jmp    c0016126 <findDataTable(unsigned char*, char*)+0x98>
c00160aa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00160b2:	a1 ec c0 03 c0       	mov    eax,ds:0xc003c0ec
c00160b7:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00160bb:	7d 3a                	jge    c00160f7 <findDataTable(unsigned char*, char*)+0x69>
c00160bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160c1:	c1 e0 03             	shl    eax,0x3
c00160c4:	05 00 c1 03 c0       	add    eax,0xc003c100
c00160c9:	83 ec 04             	sub    esp,0x4
c00160cc:	6a 04                	push   0x4
c00160ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160d2:	50                   	push   eax
c00160d3:	e8 97 a4 fe ff       	call   c000056f <memcmp>
c00160d8:	83 c4 10             	add    esp,0x10
c00160db:	85 c0                	test   eax,eax
c00160dd:	0f 94 c0             	sete   al
c00160e0:	84 c0                	test   al,al
c00160e2:	74 0d                	je     c00160f1 <findDataTable(unsigned char*, char*)+0x63>
c00160e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160e8:	8b 04 c5 04 c1 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc3efc]
c00160ef:	eb 35                	jmp    c0016126 <findDataTable(unsigned char*, char*)+0x98>
c00160f1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00160f5:	eb bb                	jmp    c00160b2 <findDataTable(unsigned char*, char*)+0x24>
c00160f7:	a0 00 c3 03 c0       	mov    al,ds:0xc003c300
c00160fc:	84 c0                	test   al,al
c00160fe:	74 07                	je     c0016107 <findDataTable(unsigned char*, char*)+0x79>
c0016100:	b8 58 00 00 00       	mov    eax,0x58
c0016105:	eb 05                	jmp    c001610c <findDataTable(unsigned char*, char*)+0x7e>
c0016107:	b8 52 00 00 00       	mov    eax,0x52
c001610c:	83 ec 04             	sub    esp,0x4
c001610f:	50                   	push   eax
c0016110:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016114:	68 7c 9d 03 c0       	push   0xc0039d7c
c0016119:	e8 b2 6a ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001611e:	83 c4 10             	add    esp,0x10
c0016121:	b8 00 00 00 00       	mov    eax,0x0
c0016126:	83 c4 1c             	add    esp,0x1c
c0016129:	c3                   	ret    

c001612a <scanMADT()>:
c001612a:	83 ec 2c             	sub    esp,0x2c
c001612d:	a1 08 b7 03 c0       	mov    eax,ds:0xc003b708
c0016132:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016138:	83 e0 04             	and    eax,0x4
c001613b:	84 c0                	test   al,al
c001613d:	0f 84 73 03 00 00    	je     c00164b6 <scanMADT()+0x38c>
c0016143:	e8 77 fb ff ff       	call   c0015cbf <findRSDP()>
c0016148:	a3 0c c3 03 c0       	mov    ds:0xc003c30c,eax
c001614d:	a1 0c c3 03 c0       	mov    eax,ds:0xc003c30c
c0016152:	85 c0                	test   eax,eax
c0016154:	75 19                	jne    c001616f <scanMADT()+0x45>
c0016156:	a1 08 b7 03 c0       	mov    eax,ds:0xc003b708
c001615b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016161:	83 e2 fb             	and    edx,0xfffffffb
c0016164:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001616a:	e9 4b 03 00 00       	jmp    c00164ba <scanMADT()+0x390>
c001616f:	a1 0c c3 03 c0       	mov    eax,ds:0xc003c30c
c0016174:	83 ec 0c             	sub    esp,0xc
c0016177:	50                   	push   eax
c0016178:	e8 f3 fd ff ff       	call   c0015f70 <findRSDT(unsigned char*)>
c001617d:	83 c4 10             	add    esp,0x10
c0016180:	a3 08 c3 03 c0       	mov    ds:0xc003c308,eax
c0016185:	a1 08 c3 03 c0       	mov    eax,ds:0xc003c308
c001618a:	85 c0                	test   eax,eax
c001618c:	75 19                	jne    c00161a7 <scanMADT()+0x7d>
c001618e:	a1 08 b7 03 c0       	mov    eax,ds:0xc003b708
c0016193:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016199:	83 e2 fb             	and    edx,0xfffffffb
c001619c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00161a2:	e9 13 03 00 00       	jmp    c00164ba <scanMADT()+0x390>
c00161a7:	a1 08 c3 03 c0       	mov    eax,ds:0xc003c308
c00161ac:	83 ec 0c             	sub    esp,0xc
c00161af:	50                   	push   eax
c00161b0:	e8 94 fb ff ff       	call   c0015d49 <loadACPITables(unsigned char*)>
c00161b5:	83 c4 10             	add    esp,0x10
c00161b8:	a1 08 c3 03 c0       	mov    eax,ds:0xc003c308
c00161bd:	83 ec 08             	sub    esp,0x8
c00161c0:	68 ba 9c 03 c0       	push   0xc0039cba
c00161c5:	50                   	push   eax
c00161c6:	e8 c3 fe ff ff       	call   c001608e <findDataTable(unsigned char*, char*)>
c00161cb:	83 c4 10             	add    esp,0x10
c00161ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00161d2:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00161d7:	75 19                	jne    c00161f2 <scanMADT()+0xc8>
c00161d9:	a1 08 b7 03 c0       	mov    eax,ds:0xc003b708
c00161de:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00161e4:	83 e2 fe             	and    edx,0xfffffffe
c00161e7:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00161ed:	e9 c8 02 00 00       	jmp    c00164ba <scanMADT()+0x390>
c00161f2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00161fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00161fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016201:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0016205:	0f 87 af 02 00 00    	ja     c00164ba <scanMADT()+0x390>
c001620b:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0016213:	0f 87 a1 02 00 00    	ja     c00164ba <scanMADT()+0x390>
c0016219:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001621d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016221:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016225:	8d 50 01             	lea    edx,[eax+0x1]
c0016228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001622c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016230:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016234:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0016238:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001623c:	8d 50 01             	lea    edx,[eax+0x1]
c001623f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016243:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016247:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001624b:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c001624f:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0016254:	0f 86 5f 02 00 00    	jbe    c00164b9 <scanMADT()+0x38f>
c001625a:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001625f:	75 57                	jne    c00162b8 <scanMADT()+0x18e>
c0016261:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016265:	8d 50 01             	lea    edx,[eax+0x1]
c0016268:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001626c:	8a 15 40 c4 03 c0    	mov    dl,BYTE PTR ds:0xc003c440
c0016272:	0f b6 d2             	movzx  edx,dl
c0016275:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016279:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001627d:	88 82 80 c4 03 c0    	mov    BYTE PTR [edx-0x3ffc3b80],al
c0016283:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016287:	8d 50 01             	lea    edx,[eax+0x1]
c001628a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001628e:	8a 15 40 c4 03 c0    	mov    dl,BYTE PTR ds:0xc003c440
c0016294:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016297:	88 0d 40 c4 03 c0    	mov    BYTE PTR ds:0xc003c440,cl
c001629d:	0f b6 d2             	movzx  edx,dl
c00162a0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00162a4:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00162a8:	88 82 60 c4 03 c0    	mov    BYTE PTR [edx-0x3ffc3ba0],al
c00162ae:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00162b3:	e9 ea 01 00 00       	jmp    c00164a2 <scanMADT()+0x378>
c00162b8:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c00162bd:	0f 85 14 01 00 00    	jne    c00163d7 <scanMADT()+0x2ad>
c00162c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162c7:	8d 50 01             	lea    edx,[eax+0x1]
c00162ca:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00162ce:	8a 15 10 c3 03 c0    	mov    dl,BYTE PTR ds:0xc003c310
c00162d4:	0f b6 d2             	movzx  edx,dl
c00162d7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00162db:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00162df:	88 82 20 c3 03 c0    	mov    BYTE PTR [edx-0x3ffc3ce0],al
c00162e5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00162e9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00162ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162f1:	01 d0                	add    eax,edx
c00162f3:	83 c0 2c             	add    eax,0x2c
c00162f6:	8a 00                	mov    al,BYTE PTR [eax]
c00162f8:	0f b6 d0             	movzx  edx,al
c00162fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162ff:	8d 48 01             	lea    ecx,[eax+0x1]
c0016302:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016306:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001630a:	0f b6 c0             	movzx  eax,al
c001630d:	c1 e0 08             	shl    eax,0x8
c0016310:	89 d1                	mov    ecx,edx
c0016312:	09 c1                	or     ecx,eax
c0016314:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016318:	8d 50 02             	lea    edx,[eax+0x2]
c001631b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001631f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016323:	0f b6 c0             	movzx  eax,al
c0016326:	c1 e0 10             	shl    eax,0x10
c0016329:	09 c1                	or     ecx,eax
c001632b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001632f:	8d 50 03             	lea    edx,[eax+0x3]
c0016332:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016336:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001633a:	0f b6 c0             	movzx  eax,al
c001633d:	c1 e0 18             	shl    eax,0x18
c0016340:	09 c1                	or     ecx,eax
c0016342:	89 ca                	mov    edx,ecx
c0016344:	a0 10 c3 03 c0       	mov    al,ds:0xc003c310
c0016349:	0f b6 c0             	movzx  eax,al
c001634c:	89 14 85 40 c3 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3cc0],edx
c0016353:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016358:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001635c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016360:	01 d0                	add    eax,edx
c0016362:	83 c0 2c             	add    eax,0x2c
c0016365:	8a 00                	mov    al,BYTE PTR [eax]
c0016367:	0f b6 d0             	movzx  edx,al
c001636a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001636e:	8d 48 01             	lea    ecx,[eax+0x1]
c0016371:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016375:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016379:	0f b6 c0             	movzx  eax,al
c001637c:	c1 e0 08             	shl    eax,0x8
c001637f:	89 d1                	mov    ecx,edx
c0016381:	09 c1                	or     ecx,eax
c0016383:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016387:	8d 50 02             	lea    edx,[eax+0x2]
c001638a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001638e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016392:	0f b6 c0             	movzx  eax,al
c0016395:	c1 e0 10             	shl    eax,0x10
c0016398:	09 c1                	or     ecx,eax
c001639a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001639e:	8d 50 03             	lea    edx,[eax+0x3]
c00163a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00163a5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00163a9:	0f b6 c0             	movzx  eax,al
c00163ac:	c1 e0 18             	shl    eax,0x18
c00163af:	09 c1                	or     ecx,eax
c00163b1:	89 ca                	mov    edx,ecx
c00163b3:	a0 10 c3 03 c0       	mov    al,ds:0xc003c310
c00163b8:	0f b6 c0             	movzx  eax,al
c00163bb:	89 14 85 c0 c3 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3c40],edx
c00163c2:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00163c7:	a0 10 c3 03 c0       	mov    al,ds:0xc003c310
c00163cc:	40                   	inc    eax
c00163cd:	a2 10 c3 03 c0       	mov    ds:0xc003c310,al
c00163d2:	e9 cb 00 00 00       	jmp    c00164a2 <scanMADT()+0x378>
c00163d7:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c00163dc:	0f 85 a6 00 00 00    	jne    c0016488 <scanMADT()+0x35e>
c00163e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00163e6:	8d 50 01             	lea    edx,[eax+0x1]
c00163e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00163ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00163f1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00163f5:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00163f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00163fd:	8d 50 01             	lea    edx,[eax+0x1]
c0016400:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016404:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016408:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001640c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0016410:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016414:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016418:	01 d0                	add    eax,edx
c001641a:	83 c0 2c             	add    eax,0x2c
c001641d:	8a 00                	mov    al,BYTE PTR [eax]
c001641f:	0f b6 d0             	movzx  edx,al
c0016422:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016426:	8d 48 01             	lea    ecx,[eax+0x1]
c0016429:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001642d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016431:	0f b6 c0             	movzx  eax,al
c0016434:	c1 e0 08             	shl    eax,0x8
c0016437:	89 d1                	mov    ecx,edx
c0016439:	09 c1                	or     ecx,eax
c001643b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001643f:	8d 50 02             	lea    edx,[eax+0x2]
c0016442:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016446:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001644a:	0f b6 c0             	movzx  eax,al
c001644d:	c1 e0 10             	shl    eax,0x10
c0016450:	09 c1                	or     ecx,eax
c0016452:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016456:	8d 50 03             	lea    edx,[eax+0x3]
c0016459:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001645d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016461:	0f b6 c0             	movzx  eax,al
c0016464:	c1 e0 18             	shl    eax,0x18
c0016467:	09 c8                	or     eax,ecx
c0016469:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001646d:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016472:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0016477:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001647c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016480:	88 90 60 ae 03 c0    	mov    BYTE PTR [eax-0x3ffc51a0],dl
c0016486:	eb 1a                	jmp    c00164a2 <scanMADT()+0x378>
c0016488:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c001648d:	75 07                	jne    c0016496 <scanMADT()+0x36c>
c001648f:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016494:	eb 0c                	jmp    c00164a2 <scanMADT()+0x378>
c0016496:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c001649b:	75 05                	jne    c00164a2 <scanMADT()+0x378>
c001649d:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c00164a2:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c00164a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00164ab:	01 d0                	add    eax,edx
c00164ad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00164b1:	e9 44 fd ff ff       	jmp    c00161fa <scanMADT()+0xd0>
c00164b6:	90                   	nop
c00164b7:	eb 01                	jmp    c00164ba <scanMADT()+0x390>
c00164b9:	90                   	nop
c00164ba:	83 c4 2c             	add    esp,0x2c
c00164bd:	c3                   	ret    

c00164be <ACPI::ACPI()>:
c00164be:	83 ec 0c             	sub    esp,0xc
c00164c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164c5:	83 ec 08             	sub    esp,0x8
c00164c8:	68 bf 9c 03 c0       	push   0xc0039cbf
c00164cd:	50                   	push   eax
c00164ce:	e8 a7 d1 ff ff       	call   c001367a <Device::Device(char const*)>
c00164d3:	83 c4 10             	add    esp,0x10
c00164d6:	ba 48 9e 03 c0       	mov    edx,0xc0039e48
c00164db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164df:	89 10                	mov    DWORD PTR [eax],edx
c00164e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164e5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00164ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164f0:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c00164fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164fe:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0016508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001650c:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0016513:	e8 12 fc ff ff       	call   c001612a <scanMADT()>
c0016518:	90                   	nop
c0016519:	83 c4 0c             	add    esp,0xc
c001651c:	c3                   	ret    
c001651d:	90                   	nop

c001651e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001651e:	83 ec 2c             	sub    esp,0x2c
c0016521:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016525:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016529:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001652d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0016531:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0016536:	88 d0                	mov    al,dl
c0016538:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001653c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0016541:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016549:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001654d:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016553:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0016557:	0f 8d 97 00 00 00    	jge    c00165f4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001655d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016561:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016565:	83 c2 2a             	add    edx,0x2a
c0016568:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001656c:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0016571:	75 78                	jne    c00165eb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016573:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016577:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001657b:	83 c2 2a             	add    edx,0x2a
c001657e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0016582:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0016586:	75 63                	jne    c00165eb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016588:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001658d:	74 3a                	je     c00165c9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c001658f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016593:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016597:	83 c2 2a             	add    edx,0x2a
c001659a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001659e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00165a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00165a5:	39 c2                	cmp    edx,eax
c00165a7:	74 10                	je     c00165b9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00165a9:	83 ec 0c             	sub    esp,0xc
c00165ac:	68 ac 9d 03 c0       	push   0xc0039dac
c00165b1:	e8 38 67 ff ff       	call   c000ccee <panic(char const*)>
c00165b6:	83 c4 10             	add    esp,0x10
c00165b9:	83 ec 0c             	sub    esp,0xc
c00165bc:	68 c4 9c 03 c0       	push   0xc0039cc4
c00165c1:	e8 28 67 ff ff       	call   c000ccee <panic(char const*)>
c00165c6:	83 c4 10             	add    esp,0x10
c00165c9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00165cd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00165d1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00165d5:	83 c2 2a             	add    edx,0x2a
c00165d8:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00165dc:	8b 02                	mov    eax,DWORD PTR [edx]
c00165de:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00165e1:	89 01                	mov    DWORD PTR [ecx],eax
c00165e3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00165e6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00165eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00165ef:	e9 55 ff ff ff       	jmp    c0016549 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00165f4:	90                   	nop
c00165f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00165f9:	83 c4 2c             	add    esp,0x2c
c00165fc:	c2 04 00             	ret    0x4
c00165ff:	90                   	nop

c0016600 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0016600:	56                   	push   esi
c0016601:	53                   	push   ebx
c0016602:	83 ec 14             	sub    esp,0x14
c0016605:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016609:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001660d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016611:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0016616:	88 c8                	mov    al,cl
c0016618:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001661c:	88 d0                	mov    al,dl
c001661e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016622:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016626:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c001662c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016630:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0016636:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c001663b:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0016640:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0016645:	83 ec 04             	sub    esp,0x4
c0016648:	56                   	push   esi
c0016649:	53                   	push   ebx
c001664a:	51                   	push   ecx
c001664b:	52                   	push   edx
c001664c:	50                   	push   eax
c001664d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016651:	68 dc 9d 03 c0       	push   0xc0039ddc
c0016656:	e8 75 65 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001665b:	83 c4 20             	add    esp,0x20
c001665e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016662:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016668:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001666c:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001666f:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0016673:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0016677:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001667b:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016681:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016685:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0016688:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001668c:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0016691:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016695:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001669b:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001669f:	8d 48 01             	lea    ecx,[eax+0x1]
c00166a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166a6:	83 c2 2a             	add    edx,0x2a
c00166a9:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00166ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166b1:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00166b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166bb:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00166be:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00166c2:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00166c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166ca:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00166d0:	8d 50 01             	lea    edx,[eax+0x1]
c00166d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166d7:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c00166dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166e1:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00166e7:	3d 00 08 00 00       	cmp    eax,0x800
c00166ec:	75 10                	jne    c00166fe <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c00166ee:	83 ec 0c             	sub    esp,0xc
c00166f1:	68 d3 9c 03 c0       	push   0xc0039cd3
c00166f6:	e8 f3 65 ff ff       	call   c000ccee <panic(char const*)>
c00166fb:	83 c4 10             	add    esp,0x10
c00166fe:	90                   	nop
c00166ff:	83 c4 14             	add    esp,0x14
c0016702:	5b                   	pop    ebx
c0016703:	5e                   	pop    esi
c0016704:	c3                   	ret    
c0016705:	90                   	nop

c0016706 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0016706:	b8 00 00 00 00       	mov    eax,0x0
c001670b:	c3                   	ret    

c001670c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001670c:	83 ec 1c             	sub    esp,0x1c
c001670f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016713:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0016716:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001671a:	a1 08 b7 03 c0       	mov    eax,ds:0xc003b708
c001671f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0016724:	83 ec 08             	sub    esp,0x8
c0016727:	52                   	push   edx
c0016728:	50                   	push   eax
c0016729:	e8 0e 4c ff ff       	call   c000b33c <Computer::readCMOS(unsigned char)>
c001672e:	83 c4 10             	add    esp,0x10
c0016731:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0016735:	a1 08 b7 03 c0       	mov    eax,ds:0xc003b708
c001673a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001673f:	83 ec 04             	sub    esp,0x4
c0016742:	6a 01                	push   0x1
c0016744:	52                   	push   edx
c0016745:	50                   	push   eax
c0016746:	e8 f9 4c ff ff       	call   c000b444 <Computer::writeCMOS(unsigned char, unsigned char)>
c001674b:	83 c4 10             	add    esp,0x10
c001674e:	90                   	nop
c001674f:	83 c4 1c             	add    esp,0x1c
c0016752:	c3                   	ret    
c0016753:	90                   	nop

c0016754 <ACPI::open(int, int, void*)>:
c0016754:	53                   	push   ebx
c0016755:	83 ec 18             	sub    esp,0x18
c0016758:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001675c:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0016763:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016767:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c001676d:	84 c0                	test   al,al
c001676f:	74 60                	je     c00167d1 <ACPI::open(int, int, void*)+0x7d>
c0016771:	83 ec 0c             	sub    esp,0xc
c0016774:	68 58 01 00 00       	push   0x158
c0016779:	e8 02 ba ff ff       	call   c0012180 <operator new(unsigned long)>
c001677e:	83 c4 10             	add    esp,0x10
c0016781:	89 c3                	mov    ebx,eax
c0016783:	83 ec 0c             	sub    esp,0xc
c0016786:	53                   	push   ebx
c0016787:	e8 26 45 00 00       	call   c001acb2 <PCI::PCI()>
c001678c:	83 c4 10             	add    esp,0x10
c001678f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0016793:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016797:	83 ec 08             	sub    esp,0x8
c001679a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001679e:	50                   	push   eax
c001679f:	e8 e6 cc ff ff       	call   c001348a <Device::addChild(Device*)>
c00167a4:	83 c4 10             	add    esp,0x10
c00167a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00167ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00167ad:	83 c0 08             	add    eax,0x8
c00167b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00167b2:	6a 00                	push   0x0
c00167b4:	6a 00                	push   0x0
c00167b6:	6a 00                	push   0x0
c00167b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00167bc:	ff d0                	call   eax
c00167be:	83 c4 10             	add    esp,0x10
c00167c1:	83 ec 0c             	sub    esp,0xc
c00167c4:	68 f0 9c 03 c0       	push   0xc0039cf0
c00167c9:	e8 02 64 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c00167ce:	83 c4 10             	add    esp,0x10
c00167d1:	83 ec 0c             	sub    esp,0xc
c00167d4:	68 fb 9c 03 c0       	push   0xc0039cfb
c00167d9:	e8 0a 52 ff ff       	call   c000b9e8 <loadKernelSymbolTable(char const*)>
c00167de:	83 c4 10             	add    esp,0x10
c00167e1:	8b 1d 08 b7 03 c0    	mov    ebx,DWORD PTR ds:0xc003b708
c00167e7:	83 ec 0c             	sub    esp,0xc
c00167ea:	68 19 9d 03 c0       	push   0xc0039d19
c00167ef:	e8 bd 5b ff ff       	call   c000c3b1 <loadDLL(char const*)>
c00167f4:	83 c4 10             	add    esp,0x10
c00167f7:	83 ec 08             	sub    esp,0x8
c00167fa:	53                   	push   ebx
c00167fb:	50                   	push   eax
c00167fc:	e8 79 5c ff ff       	call   c000c47a <executeDLL(unsigned long, void*)>
c0016801:	83 c4 10             	add    esp,0x10
c0016804:	a1 08 b7 03 c0       	mov    eax,ds:0xc003b708
c0016809:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001680f:	83 e0 04             	and    eax,0x4
c0016812:	84 c0                	test   al,al
c0016814:	74 57                	je     c001686d <ACPI::open(int, int, void*)+0x119>
c0016816:	8b 1d 08 b7 03 c0    	mov    ebx,DWORD PTR ds:0xc003b708
c001681c:	83 ec 0c             	sub    esp,0xc
c001681f:	68 36 9d 03 c0       	push   0xc0039d36
c0016824:	e8 88 5b ff ff       	call   c000c3b1 <loadDLL(char const*)>
c0016829:	83 c4 10             	add    esp,0x10
c001682c:	83 ec 08             	sub    esp,0x8
c001682f:	53                   	push   ebx
c0016830:	50                   	push   eax
c0016831:	e8 44 5c ff ff       	call   c000c47a <executeDLL(unsigned long, void*)>
c0016836:	83 c4 10             	add    esp,0x10
c0016839:	a1 08 c3 03 c0       	mov    eax,ds:0xc003c308
c001683e:	83 ec 08             	sub    esp,0x8
c0016841:	68 53 9d 03 c0       	push   0xc0039d53
c0016846:	50                   	push   eax
c0016847:	e8 42 f8 ff ff       	call   c001608e <findDataTable(unsigned char*, char*)>
c001684c:	83 c4 10             	add    esp,0x10
c001684f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016853:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016858:	74 13                	je     c001686d <ACPI::open(int, int, void*)+0x119>
c001685a:	83 ec 08             	sub    esp,0x8
c001685d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016861:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016865:	e8 a2 fe ff ff       	call   c001670c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001686a:	83 c4 10             	add    esp,0x10
c001686d:	b8 00 00 00 00       	mov    eax,0x0
c0016872:	83 c4 18             	add    esp,0x18
c0016875:	5b                   	pop    ebx
c0016876:	c3                   	ret    
c0016877:	90                   	nop

c0016878 <ACPI::sleep()>:
c0016878:	83 ec 0c             	sub    esp,0xc
c001687b:	a1 e0 c0 03 c0       	mov    eax,ds:0xc003c0e0
c0016880:	85 c0                	test   eax,eax
c0016882:	74 07                	je     c001688b <ACPI::sleep()+0x13>
c0016884:	a1 e0 c0 03 c0       	mov    eax,ds:0xc003c0e0
c0016889:	ff d0                	call   eax
c001688b:	90                   	nop
c001688c:	83 c4 0c             	add    esp,0xc
c001688f:	c3                   	ret    

c0016890 <CPU::close(int, int, void*)>:
c0016890:	31 c0                	xor    eax,eax
c0016892:	c3                   	ret    

c0016893 <lookupAMDCPUName(unsigned char, unsigned char)>:
c0016893:	55                   	push   ebp
c0016894:	57                   	push   edi
c0016895:	56                   	push   esi
c0016896:	53                   	push   ebx
c0016897:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001689b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001689f:	89 ce                	mov    esi,ecx
c00168a1:	89 d5                	mov    ebp,edx
c00168a3:	80 f9 04             	cmp    cl,0x4
c00168a6:	75 28                	jne    c00168d0 <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c00168a8:	8d 42 f9             	lea    eax,[edx-0x7]
c00168ab:	3c 03                	cmp    al,0x3
c00168ad:	0f 86 63 01 00 00    	jbe    c0016a16 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c00168b3:	80 fa 03             	cmp    dl,0x3
c00168b6:	0f 84 5a 01 00 00    	je     c0016a16 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c00168bc:	8d 7a f2             	lea    edi,[edx-0xe]
c00168bf:	b8 30 b0 03 c0       	mov    eax,0xc003b030
c00168c4:	89 fb                	mov    ebx,edi
c00168c6:	80 fb 01             	cmp    bl,0x1
c00168c9:	77 4e                	ja     c0016919 <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c00168cb:	e9 52 01 00 00       	jmp    c0016a22 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00168d0:	80 f9 05             	cmp    cl,0x5
c00168d3:	75 4d                	jne    c0016922 <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c00168d5:	b8 40 b0 03 c0       	mov    eax,0xc003b040
c00168da:	80 fa 03             	cmp    dl,0x3
c00168dd:	0f 86 3f 01 00 00    	jbe    c0016a22 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00168e3:	8d 7a fa             	lea    edi,[edx-0x6]
c00168e6:	b8 50 b0 03 c0       	mov    eax,0xc003b050
c00168eb:	89 fb                	mov    ebx,edi
c00168ed:	80 fb 01             	cmp    bl,0x1
c00168f0:	0f 86 2c 01 00 00    	jbe    c0016a22 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00168f6:	b8 60 b0 03 c0       	mov    eax,0xc003b060
c00168fb:	80 fa 08             	cmp    dl,0x8
c00168fe:	0f 84 1e 01 00 00    	je     c0016a22 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016904:	89 d7                	mov    edi,edx
c0016906:	b8 70 b0 03 c0       	mov    eax,0xc003b070
c001690b:	83 e7 fb             	and    edi,0xfffffffb
c001690e:	89 fb                	mov    ebx,edi
c0016910:	80 fb 09             	cmp    bl,0x9
c0016913:	0f 84 09 01 00 00    	je     c0016a22 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016919:	31 c0                	xor    eax,eax
c001691b:	89 eb                	mov    ebx,ebp
c001691d:	0f b6 fb             	movzx  edi,bl
c0016920:	eb 30                	jmp    c0016952 <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c0016922:	31 c0                	xor    eax,eax
c0016924:	80 f9 06             	cmp    cl,0x6
c0016927:	75 f2                	jne    c001691b <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0016929:	80 fa 0a             	cmp    dl,0xa
c001692c:	77 ed                	ja     c001691b <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c001692e:	bf de 05 00 00       	mov    edi,0x5de
c0016933:	0f a3 d7             	bt     edi,edx
c0016936:	73 e3                	jae    c001691b <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0016938:	b8 80 b0 03 c0       	mov    eax,0xc003b080
c001693d:	e9 e0 00 00 00       	jmp    c0016a22 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016942:	39 c7                	cmp    edi,eax
c0016944:	0f 84 d3 00 00 00    	je     c0016a1d <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c001694a:	40                   	inc    eax
c001694b:	3d d0 00 00 00       	cmp    eax,0xd0
c0016950:	74 09                	je     c001695b <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c0016952:	89 f3                	mov    ebx,esi
c0016954:	80 fb 0f             	cmp    bl,0xf
c0016957:	75 f1                	jne    c001694a <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c0016959:	eb e7                	jmp    c0016942 <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c001695b:	80 f9 10             	cmp    cl,0x10
c001695e:	75 14                	jne    c0016974 <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c0016960:	8d 42 fc             	lea    eax,[edx-0x4]
c0016963:	83 e0 fb             	and    eax,0xfffffffb
c0016966:	3c 02                	cmp    al,0x2
c0016968:	76 34                	jbe    c001699e <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c001696a:	b8 c1 9f 03 c0       	mov    eax,0xc0039fc1
c001696f:	80 fa 02             	cmp    dl,0x2
c0016972:	eb 24                	jmp    c0016998 <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c0016974:	80 f9 11             	cmp    cl,0x11
c0016977:	75 13                	jne    c001698c <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c0016979:	b8 c1 9f 03 c0       	mov    eax,0xc0039fc1
c001697e:	80 fa 03             	cmp    dl,0x3
c0016981:	0f 85 9b 00 00 00    	jne    c0016a22 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016987:	e9 91 00 00 00       	jmp    c0016a1d <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c001698c:	80 f9 12             	cmp    cl,0x12
c001698f:	75 14                	jne    c00169a5 <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c0016991:	b8 c1 9f 03 c0       	mov    eax,0xc0039fc1
c0016996:	fe ca                	dec    dl
c0016998:	0f 85 84 00 00 00    	jne    c0016a22 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001699e:	b8 a0 b0 03 c0       	mov    eax,0xc003b0a0
c00169a3:	eb 7d                	jmp    c0016a22 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00169a5:	80 f9 14             	cmp    cl,0x14
c00169a8:	75 12                	jne    c00169bc <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c00169aa:	4a                   	dec    edx
c00169ab:	b8 c1 9f 03 c0       	mov    eax,0xc0039fc1
c00169b0:	80 fa 01             	cmp    dl,0x1
c00169b3:	77 6d                	ja     c0016a22 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00169b5:	b8 b0 b0 03 c0       	mov    eax,0xc003b0b0
c00169ba:	eb 66                	jmp    c0016a22 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00169bc:	80 f9 15             	cmp    cl,0x15
c00169bf:	75 31                	jne    c00169f2 <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c00169c1:	b8 c0 b0 03 c0       	mov    eax,0xc003b0c0
c00169c6:	80 fa 01             	cmp    dl,0x1
c00169c9:	74 57                	je     c0016a22 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00169cb:	b8 c1 9f 03 c0       	mov    eax,0xc0039fc1
c00169d0:	80 fa 13             	cmp    dl,0x13
c00169d3:	76 0c                	jbe    c00169e1 <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c00169d5:	80 fa 30             	cmp    dl,0x30
c00169d8:	75 48                	jne    c0016a22 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00169da:	b8 e0 b0 03 c0       	mov    eax,0xc003b0e0
c00169df:	eb 41                	jmp    c0016a22 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00169e1:	b9 04 00 09 00       	mov    ecx,0x90004
c00169e6:	0f a3 d1             	bt     ecx,edx
c00169e9:	73 37                	jae    c0016a22 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00169eb:	b8 d0 b0 03 c0       	mov    eax,0xc003b0d0
c00169f0:	eb 30                	jmp    c0016a22 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00169f2:	b8 c1 9f 03 c0       	mov    eax,0xc0039fc1
c00169f7:	80 f9 16             	cmp    cl,0x16
c00169fa:	75 26                	jne    c0016a22 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00169fc:	b8 f0 b0 03 c0       	mov    eax,0xc003b0f0
c0016a01:	84 d2                	test   dl,dl
c0016a03:	74 1d                	je     c0016a22 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016a05:	b8 c1 9f 03 c0       	mov    eax,0xc0039fc1
c0016a0a:	80 fa 30             	cmp    dl,0x30
c0016a0d:	75 13                	jne    c0016a22 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016a0f:	b8 00 b1 03 c0       	mov    eax,0xc003b100
c0016a14:	eb 0c                	jmp    c0016a22 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016a16:	b8 20 b0 03 c0       	mov    eax,0xc003b020
c0016a1b:	eb 05                	jmp    c0016a22 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016a1d:	b8 90 b0 03 c0       	mov    eax,0xc003b090
c0016a22:	5b                   	pop    ebx
c0016a23:	5e                   	pop    esi
c0016a24:	5f                   	pop    edi
c0016a25:	5d                   	pop    ebp
c0016a26:	c3                   	ret    

c0016a27 <lookupIntelCPUName(unsigned char, unsigned char)>:
c0016a27:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016a2b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016a2f:	80 f9 04             	cmp    cl,0x4
c0016a32:	75 6b                	jne    c0016a9f <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0016a34:	b8 80 ae 03 c0       	mov    eax,0xc003ae80
c0016a39:	80 fa 01             	cmp    dl,0x1
c0016a3c:	0f 86 92 02 00 00    	jbe    c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016a42:	b8 90 ae 03 c0       	mov    eax,0xc003ae90
c0016a47:	80 fa 02             	cmp    dl,0x2
c0016a4a:	0f 84 84 02 00 00    	je     c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016a50:	b8 a0 ae 03 c0       	mov    eax,0xc003aea0
c0016a55:	80 fa 03             	cmp    dl,0x3
c0016a58:	0f 84 76 02 00 00    	je     c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016a5e:	b8 b0 ae 03 c0       	mov    eax,0xc003aeb0
c0016a63:	80 fa 04             	cmp    dl,0x4
c0016a66:	0f 84 68 02 00 00    	je     c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016a6c:	b8 c0 ae 03 c0       	mov    eax,0xc003aec0
c0016a71:	80 fa 05             	cmp    dl,0x5
c0016a74:	0f 84 5a 02 00 00    	je     c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016a7a:	b8 a0 ae 03 c0       	mov    eax,0xc003aea0
c0016a7f:	80 fa 07             	cmp    dl,0x7
c0016a82:	0f 84 4c 02 00 00    	je     c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016a88:	83 ea 08             	sub    edx,0x8
c0016a8b:	b8 c1 9f 03 c0       	mov    eax,0xc0039fc1
c0016a90:	80 fa 01             	cmp    dl,0x1
c0016a93:	0f 87 3b 02 00 00    	ja     c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016a99:	b8 d0 ae 03 c0       	mov    eax,0xc003aed0
c0016a9e:	c3                   	ret    
c0016a9f:	80 f9 05             	cmp    cl,0x5
c0016aa2:	75 45                	jne    c0016ae9 <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c0016aa4:	8d 4a ff             	lea    ecx,[edx-0x1]
c0016aa7:	b8 e0 ae 03 c0       	mov    eax,0xc003aee0
c0016aac:	80 f9 02             	cmp    cl,0x2
c0016aaf:	0f 86 1f 02 00 00    	jbe    c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ab5:	80 fa 04             	cmp    dl,0x4
c0016ab8:	0f 84 f3 01 00 00    	je     c0016cb1 <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c0016abe:	80 fa 07             	cmp    dl,0x7
c0016ac1:	0f 84 0d 02 00 00    	je     c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ac7:	b8 f0 ae 03 c0       	mov    eax,0xc003aef0
c0016acc:	80 fa 08             	cmp    dl,0x8
c0016acf:	0f 84 ff 01 00 00    	je     c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ad5:	b8 c1 9f 03 c0       	mov    eax,0xc0039fc1
c0016ada:	80 fa 09             	cmp    dl,0x9
c0016add:	0f 85 f1 01 00 00    	jne    c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ae3:	b8 00 af 03 c0       	mov    eax,0xc003af00
c0016ae8:	c3                   	ret    
c0016ae9:	80 f9 06             	cmp    cl,0x6
c0016aec:	0f 85 85 01 00 00    	jne    c0016c77 <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c0016af2:	b8 10 af 03 c0       	mov    eax,0xc003af10
c0016af7:	80 fa 01             	cmp    dl,0x1
c0016afa:	0f 84 d4 01 00 00    	je     c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b00:	8d 42 fb             	lea    eax,[edx-0x5]
c0016b03:	3c 01                	cmp    al,0x1
c0016b05:	0f 86 ac 01 00 00    	jbe    c0016cb7 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0016b0b:	80 fa 03             	cmp    dl,0x3
c0016b0e:	0f 84 a3 01 00 00    	je     c0016cb7 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0016b14:	8d 4a f9             	lea    ecx,[edx-0x7]
c0016b17:	b8 30 af 03 c0       	mov    eax,0xc003af30
c0016b1c:	80 f9 01             	cmp    cl,0x1
c0016b1f:	0f 86 af 01 00 00    	jbe    c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b25:	80 fa 09             	cmp    dl,0x9
c0016b28:	0f 84 8f 01 00 00    	je     c0016cbd <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0016b2e:	8d 4a f6             	lea    ecx,[edx-0xa]
c0016b31:	80 f9 01             	cmp    cl,0x1
c0016b34:	0f 86 9a 01 00 00    	jbe    c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b3a:	b8 40 af 03 c0       	mov    eax,0xc003af40
c0016b3f:	80 fa 0d             	cmp    dl,0xd
c0016b42:	0f 84 8c 01 00 00    	je     c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b48:	b8 50 af 03 c0       	mov    eax,0xc003af50
c0016b4d:	80 fa 0e             	cmp    dl,0xe
c0016b50:	0f 84 7e 01 00 00    	je     c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b56:	b8 60 af 03 c0       	mov    eax,0xc003af60
c0016b5b:	80 fa 0f             	cmp    dl,0xf
c0016b5e:	0f 84 70 01 00 00    	je     c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b64:	b8 40 af 03 c0       	mov    eax,0xc003af40
c0016b69:	80 fa 15             	cmp    dl,0x15
c0016b6c:	0f 84 62 01 00 00    	je     c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b72:	8d 4a ea             	lea    ecx,[edx-0x16]
c0016b75:	b8 60 af 03 c0       	mov    eax,0xc003af60
c0016b7a:	80 f9 01             	cmp    cl,0x1
c0016b7d:	0f 86 51 01 00 00    	jbe    c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b83:	80 fa 1a             	cmp    dl,0x1a
c0016b86:	0f 84 37 01 00 00    	je     c0016cc3 <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c0016b8c:	80 fa 1c             	cmp    dl,0x1c
c0016b8f:	0f 84 34 01 00 00    	je     c0016cc9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c0016b95:	80 fa 1d             	cmp    dl,0x1d
c0016b98:	0f 84 36 01 00 00    	je     c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016b9e:	b8 90 af 03 c0       	mov    eax,0xc003af90
c0016ba3:	80 fa 25             	cmp    dl,0x25
c0016ba6:	0f 84 28 01 00 00    	je     c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016bac:	8d 4a da             	lea    ecx,[edx-0x26]
c0016baf:	b8 80 af 03 c0       	mov    eax,0xc003af80
c0016bb4:	80 f9 01             	cmp    cl,0x1
c0016bb7:	0f 86 17 01 00 00    	jbe    c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016bbd:	b8 a0 af 03 c0       	mov    eax,0xc003afa0
c0016bc2:	80 fa 2a             	cmp    dl,0x2a
c0016bc5:	0f 84 09 01 00 00    	je     c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016bcb:	b8 90 af 03 c0       	mov    eax,0xc003af90
c0016bd0:	80 fa 2c             	cmp    dl,0x2c
c0016bd3:	0f 84 fb 00 00 00    	je     c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016bd9:	b8 a0 af 03 c0       	mov    eax,0xc003afa0
c0016bde:	80 fa 2d             	cmp    dl,0x2d
c0016be1:	0f 84 ed 00 00 00    	je     c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016be7:	b8 70 af 03 c0       	mov    eax,0xc003af70
c0016bec:	80 fa 2e             	cmp    dl,0x2e
c0016bef:	0f 84 df 00 00 00    	je     c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016bf5:	b8 90 af 03 c0       	mov    eax,0xc003af90
c0016bfa:	80 fa 2f             	cmp    dl,0x2f
c0016bfd:	0f 84 d1 00 00 00    	je     c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c03:	8d 4a cb             	lea    ecx,[edx-0x35]
c0016c06:	b8 80 af 03 c0       	mov    eax,0xc003af80
c0016c0b:	80 f9 01             	cmp    cl,0x1
c0016c0e:	0f 86 c0 00 00 00    	jbe    c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c14:	b8 b0 af 03 c0       	mov    eax,0xc003afb0
c0016c19:	80 fa 37             	cmp    dl,0x37
c0016c1c:	0f 84 b2 00 00 00    	je     c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c22:	b8 c0 af 03 c0       	mov    eax,0xc003afc0
c0016c27:	80 fa 3a             	cmp    dl,0x3a
c0016c2a:	0f 84 a4 00 00 00    	je     c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c30:	b8 d0 af 03 c0       	mov    eax,0xc003afd0
c0016c35:	80 fa 3c             	cmp    dl,0x3c
c0016c38:	0f 84 96 00 00 00    	je     c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c3e:	b8 e0 af 03 c0       	mov    eax,0xc003afe0
c0016c43:	80 fa 3d             	cmp    dl,0x3d
c0016c46:	0f 84 88 00 00 00    	je     c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c4c:	b8 c0 af 03 c0       	mov    eax,0xc003afc0
c0016c51:	80 fa 3e             	cmp    dl,0x3e
c0016c54:	74 7e                	je     c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c56:	8d 42 bb             	lea    eax,[edx-0x45]
c0016c59:	3c 01                	cmp    al,0x1
c0016c5b:	76 72                	jbe    c0016ccf <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0016c5d:	80 fa 3f             	cmp    dl,0x3f
c0016c60:	74 6d                	je     c0016ccf <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0016c62:	80 fa 4a             	cmp    dl,0x4a
c0016c65:	74 0a                	je     c0016c71 <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c0016c67:	b8 c1 9f 03 c0       	mov    eax,0xc0039fc1
c0016c6c:	80 fa 4d             	cmp    dl,0x4d
c0016c6f:	75 63                	jne    c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c71:	b8 b0 af 03 c0       	mov    eax,0xc003afb0
c0016c76:	c3                   	ret    
c0016c77:	b8 c1 9f 03 c0       	mov    eax,0xc0039fc1
c0016c7c:	80 f9 0b             	cmp    cl,0xb
c0016c7f:	75 0a                	jne    c0016c8b <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c0016c81:	fe ca                	dec    dl
c0016c83:	75 4f                	jne    c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c85:	b8 f0 af 03 c0       	mov    eax,0xc003aff0
c0016c8a:	c3                   	ret    
c0016c8b:	80 f9 0f             	cmp    cl,0xf
c0016c8e:	75 44                	jne    c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c90:	b8 00 b0 03 c0       	mov    eax,0xc003b000
c0016c95:	80 fa 02             	cmp    dl,0x2
c0016c98:	76 3a                	jbe    c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016c9a:	8d 42 fd             	lea    eax,[edx-0x3]
c0016c9d:	3c 01                	cmp    al,0x1
c0016c9f:	76 0a                	jbe    c0016cab <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c0016ca1:	b8 c1 9f 03 c0       	mov    eax,0xc0039fc1
c0016ca6:	80 fa 06             	cmp    dl,0x6
c0016ca9:	75 29                	jne    c0016cd4 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016cab:	b8 10 b0 03 c0       	mov    eax,0xc003b010
c0016cb0:	c3                   	ret    
c0016cb1:	b8 f0 ae 03 c0       	mov    eax,0xc003aef0
c0016cb6:	c3                   	ret    
c0016cb7:	b8 20 af 03 c0       	mov    eax,0xc003af20
c0016cbc:	c3                   	ret    
c0016cbd:	b8 40 af 03 c0       	mov    eax,0xc003af40
c0016cc2:	c3                   	ret    
c0016cc3:	b8 70 af 03 c0       	mov    eax,0xc003af70
c0016cc8:	c3                   	ret    
c0016cc9:	b8 80 af 03 c0       	mov    eax,0xc003af80
c0016cce:	c3                   	ret    
c0016ccf:	b8 d0 af 03 c0       	mov    eax,0xc003afd0
c0016cd4:	c3                   	ret    

c0016cd5 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0016cd5:	60                   	pusha  
c0016cd6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016cda:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016cde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016ce2:	9c                   	pushf  
c0016ce3:	fa                   	cli    
c0016ce4:	0f 09                	wbinvd 
c0016ce6:	0f 30                	wrmsr  
c0016ce8:	9d                   	popf   
c0016ce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016ced:	89 02                	mov    DWORD PTR [edx],eax
c0016cef:	61                   	popa   
c0016cf0:	c3                   	ret    

c0016cf1 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0016cf1:	60                   	pusha  
c0016cf2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016cf6:	9c                   	pushf  
c0016cf7:	fa                   	cli    
c0016cf8:	0f 09                	wbinvd 
c0016cfa:	31 c0                	xor    eax,eax
c0016cfc:	31 d2                	xor    edx,edx
c0016cfe:	0f 32                	rdmsr  
c0016d00:	9d                   	popf   
c0016d01:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016d05:	89 02                	mov    DWORD PTR [edx],eax
c0016d07:	61                   	popa   
c0016d08:	c3                   	ret    

c0016d09 <AMD_K6_writeback(int, int, int)>:
c0016d09:	56                   	push   esi
c0016d0a:	53                   	push   ebx
c0016d0b:	83 ec 10             	sub    esp,0x10
c0016d0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d12:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0016d17:	75 5d                	jne    c0016d76 <AMD_K6_writeback(int, int, int)+0x6d>
c0016d19:	83 f8 08             	cmp    eax,0x8
c0016d1c:	75 09                	jne    c0016d27 <AMD_K6_writeback(int, int, int)+0x1e>
c0016d1e:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0016d23:	7e 13                	jle    c0016d38 <AMD_K6_writeback(int, int, int)+0x2f>
c0016d25:	eb 30                	jmp    c0016d57 <AMD_K6_writeback(int, int, int)+0x4e>
c0016d27:	83 f8 06             	cmp    eax,0x6
c0016d2a:	7c 4a                	jl     c0016d76 <AMD_K6_writeback(int, int, int)+0x6d>
c0016d2c:	83 f8 07             	cmp    eax,0x7
c0016d2f:	7e 07                	jle    c0016d38 <AMD_K6_writeback(int, int, int)+0x2f>
c0016d31:	83 f8 09             	cmp    eax,0x9
c0016d34:	74 21                	je     c0016d57 <AMD_K6_writeback(int, int, int)+0x4e>
c0016d36:	eb 3e                	jmp    c0016d76 <AMD_K6_writeback(int, int, int)+0x6d>
c0016d38:	89 e6                	mov    esi,esp
c0016d3a:	8b 1d c4 b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8c4
c0016d40:	56                   	push   esi
c0016d41:	c1 eb 15             	shr    ebx,0x15
c0016d44:	68 82 00 00 c0       	push   0xc0000082
c0016d49:	83 e3 7e             	and    ebx,0x7e
c0016d4c:	e8 a0 ff ff ff       	call   c0016cf1 <AMD_K6_read_msr(unsigned int, REGS*)>
c0016d51:	56                   	push   esi
c0016d52:	6a 00                	push   0x0
c0016d54:	53                   	push   ebx
c0016d55:	eb 12                	jmp    c0016d69 <AMD_K6_writeback(int, int, int)+0x60>
c0016d57:	89 e3                	mov    ebx,esp
c0016d59:	53                   	push   ebx
c0016d5a:	68 82 00 00 c0       	push   0xc0000082
c0016d5f:	e8 8d ff ff ff       	call   c0016cf1 <AMD_K6_read_msr(unsigned int, REGS*)>
c0016d64:	53                   	push   ebx
c0016d65:	6a 00                	push   0x0
c0016d67:	6a 00                	push   0x0
c0016d69:	68 82 00 00 c0       	push   0xc0000082
c0016d6e:	e8 62 ff ff ff       	call   c0016cd5 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0016d73:	83 c4 18             	add    esp,0x18
c0016d76:	83 c4 10             	add    esp,0x10
c0016d79:	5b                   	pop    ebx
c0016d7a:	5e                   	pop    esi
c0016d7b:	c3                   	ret    

c0016d7c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0016d7c:	55                   	push   ebp
c0016d7d:	57                   	push   edi
c0016d7e:	56                   	push   esi
c0016d7f:	53                   	push   ebx
c0016d80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d84:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016d88:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0016d8c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0016d90:	39 05 20 b1 03 c0    	cmp    DWORD PTR ds:0xc003b120,eax
c0016d96:	75 23                	jne    c0016dbb <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0016d98:	a1 ac c4 03 c0       	mov    eax,ds:0xc003c4ac
c0016d9d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016da1:	89 06                	mov    DWORD PTR [esi],eax
c0016da3:	a1 a8 c4 03 c0       	mov    eax,ds:0xc003c4a8
c0016da8:	89 07                	mov    DWORD PTR [edi],eax
c0016daa:	a1 a4 c4 03 c0       	mov    eax,ds:0xc003c4a4
c0016daf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0016db2:	a1 a0 c4 03 c0       	mov    eax,ds:0xc003c4a0
c0016db7:	89 02                	mov    DWORD PTR [edx],eax
c0016db9:	eb 3f                	jmp    c0016dfa <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0016dbb:	31 c9                	xor    ecx,ecx
c0016dbd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016dc1:	0f a2                	cpuid  
c0016dc3:	89 06                	mov    DWORD PTR [esi],eax
c0016dc5:	89 1f                	mov    DWORD PTR [edi],ebx
c0016dc7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016dcb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0016dce:	89 10                	mov    DWORD PTR [eax],edx
c0016dd0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016dd4:	a3 20 b1 03 c0       	mov    ds:0xc003b120,eax
c0016dd9:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ddb:	a3 ac c4 03 c0       	mov    ds:0xc003c4ac,eax
c0016de0:	8b 07                	mov    eax,DWORD PTR [edi]
c0016de2:	a3 a8 c4 03 c0       	mov    ds:0xc003c4a8,eax
c0016de7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016dea:	a3 a4 c4 03 c0       	mov    ds:0xc003c4a4,eax
c0016def:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016df3:	8b 00                	mov    eax,DWORD PTR [eax]
c0016df5:	a3 a0 c4 03 c0       	mov    ds:0xc003c4a0,eax
c0016dfa:	5b                   	pop    ebx
c0016dfb:	5e                   	pop    esi
c0016dfc:	5f                   	pop    edi
c0016dfd:	5d                   	pop    ebp
c0016dfe:	c3                   	ret    

c0016dff <cpuidCheckEDX(unsigned int)>:
c0016dff:	83 ec 10             	sub    esp,0x10
c0016e02:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016e06:	50                   	push   eax
c0016e07:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016e0b:	50                   	push   eax
c0016e0c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016e10:	50                   	push   eax
c0016e11:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016e15:	50                   	push   eax
c0016e16:	6a 01                	push   0x1
c0016e18:	e8 5f ff ff ff       	call   c0016d7c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016e21:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0016e25:	0f 95 c0             	setne  al
c0016e28:	83 c4 24             	add    esp,0x24
c0016e2b:	c3                   	ret    

c0016e2c <cpuidCheckECX(unsigned int)>:
c0016e2c:	83 ec 10             	sub    esp,0x10
c0016e2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016e33:	50                   	push   eax
c0016e34:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016e38:	50                   	push   eax
c0016e39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016e3d:	50                   	push   eax
c0016e3e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016e42:	50                   	push   eax
c0016e43:	6a 01                	push   0x1
c0016e45:	e8 32 ff ff ff       	call   c0016d7c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016e4a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016e4e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0016e52:	0f 95 c0             	setne  al
c0016e55:	83 c4 24             	add    esp,0x24
c0016e58:	c3                   	ret    

c0016e59 <cpuidCheckExtendedEBX(unsigned int)>:
c0016e59:	83 ec 10             	sub    esp,0x10
c0016e5c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016e60:	50                   	push   eax
c0016e61:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016e65:	50                   	push   eax
c0016e66:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016e6a:	50                   	push   eax
c0016e6b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016e6f:	50                   	push   eax
c0016e70:	6a 07                	push   0x7
c0016e72:	e8 05 ff ff ff       	call   c0016d7c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016e77:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016e7b:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0016e7f:	0f 95 c0             	setne  al
c0016e82:	83 c4 24             	add    esp,0x24
c0016e85:	c3                   	ret    

c0016e86 <cpuidCheckExtendedECX(unsigned int)>:
c0016e86:	83 ec 10             	sub    esp,0x10
c0016e89:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016e8d:	50                   	push   eax
c0016e8e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016e92:	50                   	push   eax
c0016e93:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016e97:	50                   	push   eax
c0016e98:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016e9c:	50                   	push   eax
c0016e9d:	6a 07                	push   0x7
c0016e9f:	e8 d8 fe ff ff       	call   c0016d7c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016ea4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016ea8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0016eac:	0f 95 c0             	setne  al
c0016eaf:	83 c4 24             	add    esp,0x24
c0016eb2:	c3                   	ret    

c0016eb3 <getCPUNumber()>:
c0016eb3:	31 c0                	xor    eax,eax
c0016eb5:	c3                   	ret    

c0016eb6 <thisCPU()>:
c0016eb6:	e8 f8 ff ff ff       	call   c0016eb3 <getCPUNumber()>
c0016ebb:	8b 15 08 b7 03 c0    	mov    edx,DWORD PTR ds:0xc003b708
c0016ec1:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c0016ec8:	c3                   	ret    
c0016ec9:	90                   	nop

c0016eca <CPU::CPU()>:
c0016eca:	83 ec 0c             	sub    esp,0xc
c0016ecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ed1:	83 ec 08             	sub    esp,0x8
c0016ed4:	68 c1 9f 03 c0       	push   0xc0039fc1
c0016ed9:	50                   	push   eax
c0016eda:	e8 9b c7 ff ff       	call   c001367a <Device::Device(char const*)>
c0016edf:	83 c4 10             	add    esp,0x10
c0016ee2:	ba 98 a0 03 c0       	mov    edx,0xc003a098
c0016ee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016eeb:	89 10                	mov    DWORD PTR [eax],edx
c0016eed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ef1:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0016efb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016eff:	05 78 01 00 00       	add    eax,0x178
c0016f04:	83 ec 0c             	sub    esp,0xc
c0016f07:	50                   	push   eax
c0016f08:	e8 b5 55 ff ff       	call   c000c4c2 <GDT::GDT()>
c0016f0d:	83 c4 10             	add    esp,0x10
c0016f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f14:	05 7c 09 00 00       	add    eax,0x97c
c0016f19:	83 ec 0c             	sub    esp,0xc
c0016f1c:	50                   	push   eax
c0016f1d:	e8 00 58 ff ff       	call   c000c722 <IDT::IDT()>
c0016f22:	83 c4 10             	add    esp,0x10
c0016f25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f29:	05 7c 11 00 00       	add    eax,0x117c
c0016f2e:	83 ec 0c             	sub    esp,0xc
c0016f31:	50                   	push   eax
c0016f32:	e8 9f 9b ff ff       	call   c0010ad6 <TSS::TSS()>
c0016f37:	83 c4 10             	add    esp,0x10
c0016f3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f3e:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0016f45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f49:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0016f53:	90                   	nop
c0016f54:	83 c4 0c             	add    esp,0xc
c0016f57:	c3                   	ret    

c0016f58 <CPU::displayFeatures()>:
c0016f58:	c3                   	ret    
c0016f59:	90                   	nop

c0016f5a <CPU::detectFeatures()>:
c0016f5a:	55                   	push   ebp
c0016f5b:	57                   	push   edi
c0016f5c:	56                   	push   esi
c0016f5d:	53                   	push   ebx
c0016f5e:	83 ec 50             	sub    esp,0x50
c0016f61:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0016f65:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0016f6f:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0016f76:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0016f7c:	6a 0d                	push   0xd
c0016f7e:	6a 00                	push   0x0
c0016f80:	57                   	push   edi
c0016f81:	e8 82 96 fe ff       	call   c0000608 <memset>
c0016f86:	83 c4 10             	add    esp,0x10
c0016f89:	a1 08 b7 03 c0       	mov    eax,ds:0xc003b708
c0016f8e:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0016f95:	0f 84 20 09 00 00    	je     c00178bb <CPU::detectFeatures()+0x961>
c0016f9b:	83 ec 0c             	sub    esp,0xc
c0016f9e:	6a 10                	push   0x10
c0016fa0:	e8 5a fe ff ff       	call   c0016dff <cpuidCheckEDX(unsigned int)>
c0016fa5:	83 e0 01             	and    eax,0x1
c0016fa8:	8d 14 00             	lea    edx,[eax+eax*1]
c0016fab:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0016fb1:	83 e0 fd             	and    eax,0xfffffffd
c0016fb4:	09 d0                	or     eax,edx
c0016fb6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0016fbc:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0016fc3:	e8 37 fe ff ff       	call   c0016dff <cpuidCheckEDX(unsigned int)>
c0016fc8:	83 e0 01             	and    eax,0x1
c0016fcb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0016fd2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0016fd8:	83 e0 fb             	and    eax,0xfffffffb
c0016fdb:	09 d0                	or     eax,edx
c0016fdd:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0016fe3:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0016fea:	e8 10 fe ff ff       	call   c0016dff <cpuidCheckEDX(unsigned int)>
c0016fef:	83 e0 01             	and    eax,0x1
c0016ff2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0016ff9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0016fff:	83 e0 f7             	and    eax,0xfffffff7
c0017002:	09 d0                	or     eax,edx
c0017004:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001700a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0017011:	e8 e9 fd ff ff       	call   c0016dff <cpuidCheckEDX(unsigned int)>
c0017016:	83 e0 01             	and    eax,0x1
c0017019:	c1 e0 04             	shl    eax,0x4
c001701c:	88 c2                	mov    dl,al
c001701e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017024:	83 e0 ef             	and    eax,0xffffffef
c0017027:	09 d0                	or     eax,edx
c0017029:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001702f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0017036:	e8 c4 fd ff ff       	call   c0016dff <cpuidCheckEDX(unsigned int)>
c001703b:	83 e0 01             	and    eax,0x1
c001703e:	c1 e0 05             	shl    eax,0x5
c0017041:	88 c2                	mov    dl,al
c0017043:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017049:	83 e0 df             	and    eax,0xffffffdf
c001704c:	09 d0                	or     eax,edx
c001704e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017054:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001705b:	e8 9f fd ff ff       	call   c0016dff <cpuidCheckEDX(unsigned int)>
c0017060:	83 e0 01             	and    eax,0x1
c0017063:	8d 14 00             	lea    edx,[eax+eax*1]
c0017066:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001706c:	83 e0 fd             	and    eax,0xfffffffd
c001706f:	09 d0                	or     eax,edx
c0017071:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017077:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001707e:	e8 7c fd ff ff       	call   c0016dff <cpuidCheckEDX(unsigned int)>
c0017083:	83 e0 01             	and    eax,0x1
c0017086:	c1 e0 06             	shl    eax,0x6
c0017089:	88 c2                	mov    dl,al
c001708b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017091:	83 e0 bf             	and    eax,0xffffffbf
c0017094:	09 d0                	or     eax,edx
c0017096:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001709c:	58                   	pop    eax
c001709d:	8d 74 24 28          	lea    esi,[esp+0x28]
c00170a1:	56                   	push   esi
c00170a2:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00170a6:	55                   	push   ebp
c00170a7:	8d 44 24 28          	lea    eax,[esp+0x28]
c00170ab:	50                   	push   eax
c00170ac:	8d 54 24 28          	lea    edx,[esp+0x28]
c00170b0:	52                   	push   edx
c00170b1:	6a 00                	push   0x0
c00170b3:	e8 c4 fc ff ff       	call   c0016d7c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00170b8:	83 c4 1c             	add    esp,0x1c
c00170bb:	6a 04                	push   0x4
c00170bd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00170c1:	50                   	push   eax
c00170c2:	57                   	push   edi
c00170c3:	e8 0a 95 fe ff       	call   c00005d2 <memcpy>
c00170c8:	83 c4 0c             	add    esp,0xc
c00170cb:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00170d1:	6a 04                	push   0x4
c00170d3:	56                   	push   esi
c00170d4:	50                   	push   eax
c00170d5:	e8 f8 94 fe ff       	call   c00005d2 <memcpy>
c00170da:	83 c4 0c             	add    esp,0xc
c00170dd:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00170e3:	6a 04                	push   0x4
c00170e5:	55                   	push   ebp
c00170e6:	50                   	push   eax
c00170e7:	e8 e6 94 fe ff       	call   c00005d2 <memcpy>
c00170ec:	58                   	pop    eax
c00170ed:	5a                   	pop    edx
c00170ee:	68 6c 9e 03 c0       	push   0xc0039e6c
c00170f3:	57                   	push   edi
c00170f4:	e8 ff 95 fe ff       	call   c00006f8 <strcmp>
c00170f9:	83 c4 10             	add    esp,0x10
c00170fc:	85 c0                	test   eax,eax
c00170fe:	75 0f                	jne    c001710f <CPU::detectFeatures()+0x1b5>
c0017100:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001710a:	e9 22 02 00 00       	jmp    c0017331 <CPU::detectFeatures()+0x3d7>
c001710f:	50                   	push   eax
c0017110:	50                   	push   eax
c0017111:	68 79 9e 03 c0       	push   0xc0039e79
c0017116:	57                   	push   edi
c0017117:	e8 dc 95 fe ff       	call   c00006f8 <strcmp>
c001711c:	83 c4 10             	add    esp,0x10
c001711f:	85 c0                	test   eax,eax
c0017121:	74 dd                	je     c0017100 <CPU::detectFeatures()+0x1a6>
c0017123:	51                   	push   ecx
c0017124:	51                   	push   ecx
c0017125:	68 86 9e 03 c0       	push   0xc0039e86
c001712a:	57                   	push   edi
c001712b:	e8 c8 95 fe ff       	call   c00006f8 <strcmp>
c0017130:	83 c4 10             	add    esp,0x10
c0017133:	85 c0                	test   eax,eax
c0017135:	74 2a                	je     c0017161 <CPU::detectFeatures()+0x207>
c0017137:	52                   	push   edx
c0017138:	52                   	push   edx
c0017139:	68 93 9e 03 c0       	push   0xc0039e93
c001713e:	57                   	push   edi
c001713f:	e8 b4 95 fe ff       	call   c00006f8 <strcmp>
c0017144:	83 c4 10             	add    esp,0x10
c0017147:	85 c0                	test   eax,eax
c0017149:	74 16                	je     c0017161 <CPU::detectFeatures()+0x207>
c001714b:	50                   	push   eax
c001714c:	50                   	push   eax
c001714d:	68 a0 9e 03 c0       	push   0xc0039ea0
c0017152:	57                   	push   edi
c0017153:	e8 a0 95 fe ff       	call   c00006f8 <strcmp>
c0017158:	83 c4 10             	add    esp,0x10
c001715b:	85 c0                	test   eax,eax
c001715d:	74 48                	je     c00171a7 <CPU::detectFeatures()+0x24d>
c001715f:	eb 0f                	jmp    c0017170 <CPU::detectFeatures()+0x216>
c0017161:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001716b:	e9 c1 01 00 00       	jmp    c0017331 <CPU::detectFeatures()+0x3d7>
c0017170:	50                   	push   eax
c0017171:	50                   	push   eax
c0017172:	68 ad 9e 03 c0       	push   0xc0039ead
c0017177:	57                   	push   edi
c0017178:	e8 7b 95 fe ff       	call   c00006f8 <strcmp>
c001717d:	83 c4 10             	add    esp,0x10
c0017180:	85 c0                	test   eax,eax
c0017182:	74 23                	je     c00171a7 <CPU::detectFeatures()+0x24d>
c0017184:	50                   	push   eax
c0017185:	50                   	push   eax
c0017186:	68 ba 9e 03 c0       	push   0xc0039eba
c001718b:	57                   	push   edi
c001718c:	e8 67 95 fe ff       	call   c00006f8 <strcmp>
c0017191:	83 c4 10             	add    esp,0x10
c0017194:	85 c0                	test   eax,eax
c0017196:	75 1e                	jne    c00171b6 <CPU::detectFeatures()+0x25c>
c0017198:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00171a2:	e9 8a 01 00 00       	jmp    c0017331 <CPU::detectFeatures()+0x3d7>
c00171a7:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00171b1:	e9 7b 01 00 00       	jmp    c0017331 <CPU::detectFeatures()+0x3d7>
c00171b6:	50                   	push   eax
c00171b7:	50                   	push   eax
c00171b8:	68 c7 9e 03 c0       	push   0xc0039ec7
c00171bd:	57                   	push   edi
c00171be:	e8 35 95 fe ff       	call   c00006f8 <strcmp>
c00171c3:	83 c4 10             	add    esp,0x10
c00171c6:	85 c0                	test   eax,eax
c00171c8:	75 0f                	jne    c00171d9 <CPU::detectFeatures()+0x27f>
c00171ca:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00171d4:	e9 58 01 00 00       	jmp    c0017331 <CPU::detectFeatures()+0x3d7>
c00171d9:	50                   	push   eax
c00171da:	50                   	push   eax
c00171db:	68 86 9e 03 c0       	push   0xc0039e86
c00171e0:	57                   	push   edi
c00171e1:	e8 12 95 fe ff       	call   c00006f8 <strcmp>
c00171e6:	83 c4 10             	add    esp,0x10
c00171e9:	85 c0                	test   eax,eax
c00171eb:	75 0f                	jne    c00171fc <CPU::detectFeatures()+0x2a2>
c00171ed:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00171f7:	e9 35 01 00 00       	jmp    c0017331 <CPU::detectFeatures()+0x3d7>
c00171fc:	50                   	push   eax
c00171fd:	50                   	push   eax
c00171fe:	68 d4 9e 03 c0       	push   0xc0039ed4
c0017203:	57                   	push   edi
c0017204:	e8 ef 94 fe ff       	call   c00006f8 <strcmp>
c0017209:	83 c4 10             	add    esp,0x10
c001720c:	85 c0                	test   eax,eax
c001720e:	75 0f                	jne    c001721f <CPU::detectFeatures()+0x2c5>
c0017210:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001721a:	e9 12 01 00 00       	jmp    c0017331 <CPU::detectFeatures()+0x3d7>
c001721f:	51                   	push   ecx
c0017220:	51                   	push   ecx
c0017221:	68 e1 9e 03 c0       	push   0xc0039ee1
c0017226:	57                   	push   edi
c0017227:	e8 cc 94 fe ff       	call   c00006f8 <strcmp>
c001722c:	83 c4 10             	add    esp,0x10
c001722f:	85 c0                	test   eax,eax
c0017231:	75 0f                	jne    c0017242 <CPU::detectFeatures()+0x2e8>
c0017233:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001723d:	e9 ef 00 00 00       	jmp    c0017331 <CPU::detectFeatures()+0x3d7>
c0017242:	52                   	push   edx
c0017243:	52                   	push   edx
c0017244:	68 ee 9e 03 c0       	push   0xc0039eee
c0017249:	57                   	push   edi
c001724a:	e8 a9 94 fe ff       	call   c00006f8 <strcmp>
c001724f:	83 c4 10             	add    esp,0x10
c0017252:	85 c0                	test   eax,eax
c0017254:	75 0f                	jne    c0017265 <CPU::detectFeatures()+0x30b>
c0017256:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0017260:	e9 cc 00 00 00       	jmp    c0017331 <CPU::detectFeatures()+0x3d7>
c0017265:	50                   	push   eax
c0017266:	50                   	push   eax
c0017267:	68 fb 9e 03 c0       	push   0xc0039efb
c001726c:	57                   	push   edi
c001726d:	e8 86 94 fe ff       	call   c00006f8 <strcmp>
c0017272:	83 c4 10             	add    esp,0x10
c0017275:	85 c0                	test   eax,eax
c0017277:	75 0f                	jne    c0017288 <CPU::detectFeatures()+0x32e>
c0017279:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0017283:	e9 a9 00 00 00       	jmp    c0017331 <CPU::detectFeatures()+0x3d7>
c0017288:	50                   	push   eax
c0017289:	50                   	push   eax
c001728a:	68 08 9f 03 c0       	push   0xc0039f08
c001728f:	57                   	push   edi
c0017290:	e8 63 94 fe ff       	call   c00006f8 <strcmp>
c0017295:	83 c4 10             	add    esp,0x10
c0017298:	85 c0                	test   eax,eax
c001729a:	75 0f                	jne    c00172ab <CPU::detectFeatures()+0x351>
c001729c:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00172a6:	e9 86 00 00 00       	jmp    c0017331 <CPU::detectFeatures()+0x3d7>
c00172ab:	50                   	push   eax
c00172ac:	50                   	push   eax
c00172ad:	68 15 9f 03 c0       	push   0xc0039f15
c00172b2:	57                   	push   edi
c00172b3:	e8 40 94 fe ff       	call   c00006f8 <strcmp>
c00172b8:	83 c4 10             	add    esp,0x10
c00172bb:	85 c0                	test   eax,eax
c00172bd:	75 0c                	jne    c00172cb <CPU::detectFeatures()+0x371>
c00172bf:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00172c9:	eb 66                	jmp    c0017331 <CPU::detectFeatures()+0x3d7>
c00172cb:	50                   	push   eax
c00172cc:	50                   	push   eax
c00172cd:	68 22 9f 03 c0       	push   0xc0039f22
c00172d2:	57                   	push   edi
c00172d3:	e8 20 94 fe ff       	call   c00006f8 <strcmp>
c00172d8:	83 c4 10             	add    esp,0x10
c00172db:	85 c0                	test   eax,eax
c00172dd:	75 0c                	jne    c00172eb <CPU::detectFeatures()+0x391>
c00172df:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00172e9:	eb 46                	jmp    c0017331 <CPU::detectFeatures()+0x3d7>
c00172eb:	50                   	push   eax
c00172ec:	50                   	push   eax
c00172ed:	68 2f 9f 03 c0       	push   0xc0039f2f
c00172f2:	57                   	push   edi
c00172f3:	e8 00 94 fe ff       	call   c00006f8 <strcmp>
c00172f8:	83 c4 10             	add    esp,0x10
c00172fb:	85 c0                	test   eax,eax
c00172fd:	74 e0                	je     c00172df <CPU::detectFeatures()+0x385>
c00172ff:	50                   	push   eax
c0017300:	50                   	push   eax
c0017301:	68 3c 9f 03 c0       	push   0xc0039f3c
c0017306:	57                   	push   edi
c0017307:	e8 ec 93 fe ff       	call   c00006f8 <strcmp>
c001730c:	83 c4 10             	add    esp,0x10
c001730f:	85 c0                	test   eax,eax
c0017311:	74 cc                	je     c00172df <CPU::detectFeatures()+0x385>
c0017313:	51                   	push   ecx
c0017314:	51                   	push   ecx
c0017315:	68 49 9f 03 c0       	push   0xc0039f49
c001731a:	57                   	push   edi
c001731b:	e8 d8 93 fe ff       	call   c00006f8 <strcmp>
c0017320:	83 c4 10             	add    esp,0x10
c0017323:	85 c0                	test   eax,eax
c0017325:	74 b8                	je     c00172df <CPU::detectFeatures()+0x385>
c0017327:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0017331:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0017336:	0f 86 be 00 00 00    	jbe    c00173fa <CPU::detectFeatures()+0x4a0>
c001733c:	83 ec 0c             	sub    esp,0xc
c001733f:	68 80 00 00 00       	push   0x80
c0017344:	e8 10 fb ff ff       	call   c0016e59 <cpuidCheckExtendedEBX(unsigned int)>
c0017349:	83 e0 01             	and    eax,0x1
c001734c:	c1 e0 06             	shl    eax,0x6
c001734f:	88 c2                	mov    dl,al
c0017351:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017357:	83 e0 bf             	and    eax,0xffffffbf
c001735a:	09 d0                	or     eax,edx
c001735c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017362:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0017369:	e8 eb fa ff ff       	call   c0016e59 <cpuidCheckExtendedEBX(unsigned int)>
c001736e:	83 e0 01             	and    eax,0x1
c0017371:	c1 e0 04             	shl    eax,0x4
c0017374:	88 c2                	mov    dl,al
c0017376:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001737c:	83 e0 ef             	and    eax,0xffffffef
c001737f:	09 d0                	or     eax,edx
c0017381:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0017387:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001738e:	e8 c6 fa ff ff       	call   c0016e59 <cpuidCheckExtendedEBX(unsigned int)>
c0017393:	c1 e0 07             	shl    eax,0x7
c0017396:	88 c2                	mov    dl,al
c0017398:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001739e:	83 e0 7f             	and    eax,0x7f
c00173a1:	09 d0                	or     eax,edx
c00173a3:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00173a9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00173b0:	e8 d1 fa ff ff       	call   c0016e86 <cpuidCheckExtendedECX(unsigned int)>
c00173b5:	83 e0 01             	and    eax,0x1
c00173b8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00173bf:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00173c5:	83 e0 f7             	and    eax,0xfffffff7
c00173c8:	09 d0                	or     eax,edx
c00173ca:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00173d0:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00173d7:	e8 aa fa ff ff       	call   c0016e86 <cpuidCheckExtendedECX(unsigned int)>
c00173dc:	83 c4 10             	add    esp,0x10
c00173df:	83 e0 01             	and    eax,0x1
c00173e2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00173e9:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00173ef:	83 e0 fb             	and    eax,0xfffffffb
c00173f2:	09 d0                	or     eax,edx
c00173f4:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00173fa:	83 ec 0c             	sub    esp,0xc
c00173fd:	56                   	push   esi
c00173fe:	55                   	push   ebp
c00173ff:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0017403:	57                   	push   edi
c0017404:	8d 44 24 28          	lea    eax,[esp+0x28]
c0017408:	50                   	push   eax
c0017409:	6a 01                	push   0x1
c001740b:	e8 6c f9 ff ff       	call   c0016d7c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017410:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017414:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001741a:	88 ca                	mov    dl,cl
c001741c:	83 e0 f0             	and    eax,0xfffffff0
c001741f:	83 e2 0f             	and    edx,0xf
c0017422:	09 d0                	or     eax,edx
c0017424:	88 ca                	mov    dl,cl
c0017426:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001742c:	c0 ea 04             	shr    dl,0x4
c001742f:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0017433:	0f b6 c2             	movzx  eax,dl
c0017436:	83 c4 20             	add    esp,0x20
c0017439:	c1 e0 06             	shl    eax,0x6
c001743c:	89 c5                	mov    ebp,eax
c001743e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017444:	66 25 3f c0          	and    ax,0xc03f
c0017448:	09 e8                	or     eax,ebp
c001744a:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0017451:	89 c8                	mov    eax,ecx
c0017453:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0017459:	c1 e8 08             	shr    eax,0x8
c001745c:	83 e2 3f             	and    edx,0x3f
c001745f:	83 e0 0f             	and    eax,0xf
c0017462:	89 c5                	mov    ebp,eax
c0017464:	c1 e5 06             	shl    ebp,0x6
c0017467:	09 d5                	or     ebp,edx
c0017469:	89 ea                	mov    edx,ebp
c001746b:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0017471:	88 c2                	mov    dl,al
c0017473:	c0 ea 02             	shr    dl,0x2
c0017476:	89 d5                	mov    ebp,edx
c0017478:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001747e:	83 e2 c0             	and    edx,0xffffffc0
c0017481:	09 d5                	or     ebp,edx
c0017483:	89 ea                	mov    edx,ebp
c0017485:	89 cd                	mov    ebp,ecx
c0017487:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001748d:	c1 ed 0c             	shr    ebp,0xc
c0017490:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0017496:	83 e5 03             	and    ebp,0x3
c0017499:	83 e2 cf             	and    edx,0xffffffcf
c001749c:	c1 e5 04             	shl    ebp,0x4
c001749f:	09 d5                	or     ebp,edx
c00174a1:	3c 06                	cmp    al,0x6
c00174a3:	89 ea                	mov    edx,ebp
c00174a5:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00174ab:	74 04                	je     c00174b1 <CPU::detectFeatures()+0x557>
c00174ad:	3c 0f                	cmp    al,0xf
c00174af:	75 5c                	jne    c001750d <CPU::detectFeatures()+0x5b3>
c00174b1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00174b5:	89 cd                	mov    ebp,ecx
c00174b7:	c1 ed 10             	shr    ebp,0x10
c00174ba:	c1 e5 04             	shl    ebp,0x4
c00174bd:	09 ea                	or     edx,ebp
c00174bf:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00174c5:	0f b6 d2             	movzx  edx,dl
c00174c8:	66 81 e5 3f c0       	and    bp,0xc03f
c00174cd:	c1 e2 06             	shl    edx,0x6
c00174d0:	09 ea                	or     edx,ebp
c00174d2:	3c 0f                	cmp    al,0xf
c00174d4:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00174db:	75 30                	jne    c001750d <CPU::detectFeatures()+0x5b3>
c00174dd:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00174e3:	c1 e9 14             	shr    ecx,0x14
c00174e6:	83 e0 3f             	and    eax,0x3f
c00174e9:	83 c1 0f             	add    ecx,0xf
c00174ec:	88 ca                	mov    dl,cl
c00174ee:	c0 e9 02             	shr    cl,0x2
c00174f1:	c1 e2 06             	shl    edx,0x6
c00174f4:	09 d0                	or     eax,edx
c00174f6:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00174fc:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0017502:	83 e0 c0             	and    eax,0xffffffc0
c0017505:	09 c1                	or     ecx,eax
c0017507:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001750d:	83 ec 0c             	sub    esp,0xc
c0017510:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0017517:	56                   	push   esi
c0017518:	8d 44 24 28          	lea    eax,[esp+0x28]
c001751c:	50                   	push   eax
c001751d:	57                   	push   edi
c001751e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0017522:	55                   	push   ebp
c0017523:	68 00 00 00 80       	push   0x80000000
c0017528:	e8 4f f8 ff ff       	call   c0016d7c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001752d:	83 c4 20             	add    esp,0x20
c0017530:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0017538:	8d 44 24 18          	lea    eax,[esp+0x18]
c001753c:	76 1e                	jbe    c001755c <CPU::detectFeatures()+0x602>
c001753e:	83 ec 0c             	sub    esp,0xc
c0017541:	56                   	push   esi
c0017542:	50                   	push   eax
c0017543:	57                   	push   edi
c0017544:	55                   	push   ebp
c0017545:	68 01 00 00 80       	push   0x80000001
c001754a:	e8 2d f8 ff ff       	call   c0016d7c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001754f:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0017559:	83 c4 20             	add    esp,0x20
c001755c:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0017562:	83 f8 01             	cmp    eax,0x1
c0017565:	75 6f                	jne    c00175d6 <CPU::detectFeatures()+0x67c>
c0017567:	51                   	push   ecx
c0017568:	51                   	push   ecx
c0017569:	68 55 9f 03 c0       	push   0xc0039f55
c001756e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0017572:	56                   	push   esi
c0017573:	e8 2f 91 fe ff       	call   c00006a7 <strcpy>
c0017578:	5f                   	pop    edi
c0017579:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001757f:	5d                   	pop    ebp
c0017580:	66 c1 e8 06          	shr    ax,0x6
c0017584:	0f b6 c0             	movzx  eax,al
c0017587:	50                   	push   eax
c0017588:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001758e:	c1 e8 0e             	shr    eax,0xe
c0017591:	0f b6 c0             	movzx  eax,al
c0017594:	50                   	push   eax
c0017595:	e8 8d f4 ff ff       	call   c0016a27 <lookupIntelCPUName(unsigned char, unsigned char)>
c001759a:	5a                   	pop    edx
c001759b:	59                   	pop    ecx
c001759c:	50                   	push   eax
c001759d:	56                   	push   esi
c001759e:	e8 bb 91 fe ff       	call   c000075e <strcat>
c00175a3:	5f                   	pop    edi
c00175a4:	5d                   	pop    ebp
c00175a5:	56                   	push   esi
c00175a6:	53                   	push   ebx
c00175a7:	e8 c0 c0 ff ff       	call   c001366c <Device::setName(char const*)>
c00175ac:	58                   	pop    eax
c00175ad:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00175b3:	5a                   	pop    edx
c00175b4:	68 5c 9f 03 c0       	push   0xc0039f5c
c00175b9:	50                   	push   eax
c00175ba:	e8 39 91 fe ff       	call   c00006f8 <strcmp>
c00175bf:	83 c4 10             	add    esp,0x10
c00175c2:	85 c0                	test   eax,eax
c00175c4:	0f 85 73 03 00 00    	jne    c001793d <CPU::detectFeatures()+0x9e3>
c00175ca:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00175d1:	e9 67 03 00 00       	jmp    c001793d <CPU::detectFeatures()+0x9e3>
c00175d6:	83 f8 02             	cmp    eax,0x2
c00175d9:	0f 85 b5 00 00 00    	jne    c0017694 <CPU::detectFeatures()+0x73a>
c00175df:	57                   	push   edi
c00175e0:	57                   	push   edi
c00175e1:	68 6e 9f 03 c0       	push   0xc0039f6e
c00175e6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00175ea:	56                   	push   esi
c00175eb:	e8 b7 90 fe ff       	call   c00006a7 <strcpy>
c00175f0:	5d                   	pop    ebp
c00175f1:	58                   	pop    eax
c00175f2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00175f8:	66 c1 e8 06          	shr    ax,0x6
c00175fc:	0f b6 c0             	movzx  eax,al
c00175ff:	50                   	push   eax
c0017600:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017606:	c1 e8 0e             	shr    eax,0xe
c0017609:	0f b6 c0             	movzx  eax,al
c001760c:	50                   	push   eax
c001760d:	e8 81 f2 ff ff       	call   c0016893 <lookupAMDCPUName(unsigned char, unsigned char)>
c0017612:	5a                   	pop    edx
c0017613:	59                   	pop    ecx
c0017614:	50                   	push   eax
c0017615:	56                   	push   esi
c0017616:	e8 43 91 fe ff       	call   c000075e <strcat>
c001761b:	5f                   	pop    edi
c001761c:	5d                   	pop    ebp
c001761d:	56                   	push   esi
c001761e:	53                   	push   ebx
c001761f:	e8 48 c0 ff ff       	call   c001366c <Device::setName(char const*)>
c0017624:	58                   	pop    eax
c0017625:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001762b:	5a                   	pop    edx
c001762c:	68 73 9f 03 c0       	push   0xc0039f73
c0017631:	50                   	push   eax
c0017632:	e8 c1 90 fe ff       	call   c00006f8 <strcmp>
c0017637:	83 c4 10             	add    esp,0x10
c001763a:	85 c0                	test   eax,eax
c001763c:	75 20                	jne    c001765e <CPU::detectFeatures()+0x704>
c001763e:	8b 15 08 b7 03 c0    	mov    edx,DWORD PTR ds:0xc003b708
c0017644:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001764a:	a8 01                	test   al,0x1
c001764c:	74 10                	je     c001765e <CPU::detectFeatures()+0x704>
c001764e:	83 e0 fe             	and    eax,0xfffffffe
c0017651:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0017657:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001765e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017664:	c1 e8 0e             	shr    eax,0xe
c0017667:	3c 05                	cmp    al,0x5
c0017669:	0f 85 ce 02 00 00    	jne    c001793d <CPU::detectFeatures()+0x9e3>
c001766f:	56                   	push   esi
c0017670:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0017676:	83 e0 0f             	and    eax,0xf
c0017679:	50                   	push   eax
c001767a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017680:	66 c1 e8 06          	shr    ax,0x6
c0017684:	0f b6 c0             	movzx  eax,al
c0017687:	50                   	push   eax
c0017688:	6a 05                	push   0x5
c001768a:	e8 7a f6 ff ff       	call   c0016d09 <AMD_K6_writeback(int, int, int)>
c001768f:	e9 1f 02 00 00       	jmp    c00178b3 <CPU::detectFeatures()+0x959>
c0017694:	8d 50 fd             	lea    edx,[eax-0x3]
c0017697:	83 fa 01             	cmp    edx,0x1
c001769a:	76 09                	jbe    c00176a5 <CPU::detectFeatures()+0x74b>
c001769c:	83 f8 06             	cmp    eax,0x6
c001769f:	0f 85 91 01 00 00    	jne    c0017836 <CPU::detectFeatures()+0x8dc>
c00176a5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00176ab:	c1 ea 0e             	shr    edx,0xe
c00176ae:	80 fa 05             	cmp    dl,0x5
c00176b1:	75 7b                	jne    c001772e <CPU::detectFeatures()+0x7d4>
c00176b3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00176b9:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00176be:	66 81 fa 00 01       	cmp    dx,0x100
c00176c3:	75 0c                	jne    c00176d1 <CPU::detectFeatures()+0x777>
c00176c5:	51                   	push   ecx
c00176c6:	51                   	push   ecx
c00176c7:	68 7a 9f 03 c0       	push   0xc0039f7a
c00176cc:	e9 dc 01 00 00       	jmp    c00178ad <CPU::detectFeatures()+0x953>
c00176d1:	66 81 fa 00 02       	cmp    dx,0x200
c00176d6:	75 0c                	jne    c00176e4 <CPU::detectFeatures()+0x78a>
c00176d8:	52                   	push   edx
c00176d9:	52                   	push   edx
c00176da:	68 8d 9f 03 c0       	push   0xc0039f8d
c00176df:	e9 c9 01 00 00       	jmp    c00178ad <CPU::detectFeatures()+0x953>
c00176e4:	66 81 fa 40 02       	cmp    dx,0x240
c00176e9:	75 0c                	jne    c00176f7 <CPU::detectFeatures()+0x79d>
c00176eb:	50                   	push   eax
c00176ec:	50                   	push   eax
c00176ed:	68 9f 9f 03 c0       	push   0xc0039f9f
c00176f2:	e9 b6 01 00 00       	jmp    c00178ad <CPU::detectFeatures()+0x953>
c00176f7:	83 f8 06             	cmp    eax,0x6
c00176fa:	75 0c                	jne    c0017708 <CPU::detectFeatures()+0x7ae>
c00176fc:	50                   	push   eax
c00176fd:	50                   	push   eax
c00176fe:	68 b1 9f 03 c0       	push   0xc0039fb1
c0017703:	e9 a5 01 00 00       	jmp    c00178ad <CPU::detectFeatures()+0x953>
c0017708:	83 f8 04             	cmp    eax,0x4
c001770b:	75 0c                	jne    c0017719 <CPU::detectFeatures()+0x7bf>
c001770d:	50                   	push   eax
c001770e:	50                   	push   eax
c001770f:	68 bd 9f 03 c0       	push   0xc0039fbd
c0017714:	e9 94 01 00 00       	jmp    c00178ad <CPU::detectFeatures()+0x953>
c0017719:	83 f8 03             	cmp    eax,0x3
c001771c:	0f 85 1b 02 00 00    	jne    c001793d <CPU::detectFeatures()+0x9e3>
c0017722:	50                   	push   eax
c0017723:	50                   	push   eax
c0017724:	68 c5 9f 03 c0       	push   0xc0039fc5
c0017729:	e9 7f 01 00 00       	jmp    c00178ad <CPU::detectFeatures()+0x953>
c001772e:	80 fa 06             	cmp    dl,0x6
c0017731:	0f 85 db 00 00 00    	jne    c0017812 <CPU::detectFeatures()+0x8b8>
c0017737:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001773d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0017742:	66 81 fa 80 01       	cmp    dx,0x180
c0017747:	75 0c                	jne    c0017755 <CPU::detectFeatures()+0x7fb>
c0017749:	50                   	push   eax
c001774a:	50                   	push   eax
c001774b:	68 d0 9f 03 c0       	push   0xc0039fd0
c0017750:	e9 58 01 00 00       	jmp    c00178ad <CPU::detectFeatures()+0x953>
c0017755:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001775b:	66 f7 c1 80 ff       	test   cx,0xff80
c0017760:	75 0c                	jne    c001776e <CPU::detectFeatures()+0x814>
c0017762:	50                   	push   eax
c0017763:	50                   	push   eax
c0017764:	68 e0 9f 03 c0       	push   0xc0039fe0
c0017769:	e9 3f 01 00 00       	jmp    c00178ad <CPU::detectFeatures()+0x953>
c001776e:	66 81 fa 40 02       	cmp    dx,0x240
c0017773:	75 0c                	jne    c0017781 <CPU::detectFeatures()+0x827>
c0017775:	55                   	push   ebp
c0017776:	55                   	push   ebp
c0017777:	68 e7 9f 03 c0       	push   0xc0039fe7
c001777c:	e9 2c 01 00 00       	jmp    c00178ad <CPU::detectFeatures()+0x953>
c0017781:	66 81 fa 80 02       	cmp    dx,0x280
c0017786:	75 0c                	jne    c0017794 <CPU::detectFeatures()+0x83a>
c0017788:	57                   	push   edi
c0017789:	57                   	push   edi
c001778a:	68 f0 9f 03 c0       	push   0xc0039ff0
c001778f:	e9 19 01 00 00       	jmp    c00178ad <CPU::detectFeatures()+0x953>
c0017794:	66 81 fa 40 03       	cmp    dx,0x340
c0017799:	74 ed                	je     c0017788 <CPU::detectFeatures()+0x82e>
c001779b:	66 81 fa c0 03       	cmp    dx,0x3c0
c00177a0:	75 0c                	jne    c00177ae <CPU::detectFeatures()+0x854>
c00177a2:	56                   	push   esi
c00177a3:	56                   	push   esi
c00177a4:	68 f7 9f 03 c0       	push   0xc0039ff7
c00177a9:	e9 ff 00 00 00       	jmp    c00178ad <CPU::detectFeatures()+0x953>
c00177ae:	83 f8 06             	cmp    eax,0x6
c00177b1:	0f 84 45 ff ff ff    	je     c00176fc <CPU::detectFeatures()+0x7a2>
c00177b7:	83 f8 04             	cmp    eax,0x4
c00177ba:	0f 84 4d ff ff ff    	je     c001770d <CPU::detectFeatures()+0x7b3>
c00177c0:	83 f8 03             	cmp    eax,0x3
c00177c3:	0f 85 74 01 00 00    	jne    c001793d <CPU::detectFeatures()+0x9e3>
c00177c9:	51                   	push   ecx
c00177ca:	51                   	push   ecx
c00177cb:	68 00 a0 03 c0       	push   0xc003a000
c00177d0:	53                   	push   ebx
c00177d1:	e8 96 be ff ff       	call   c001366c <Device::setName(char const*)>
c00177d6:	b1 c1                	mov    cl,0xc1
c00177d8:	88 c8                	mov    al,cl
c00177da:	e6 22                	out    0x22,al
c00177dc:	e4 23                	in     al,0x23
c00177de:	88 c2                	mov    dl,al
c00177e0:	88 c8                	mov    al,cl
c00177e2:	e6 22                	out    0x22,al
c00177e4:	88 d0                	mov    al,dl
c00177e6:	83 c8 10             	or     eax,0x10
c00177e9:	e6 23                	out    0x23,al
c00177eb:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00177f2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00177f5:	89 d0                	mov    eax,edx
c00177f7:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00177fd:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0017801:	40                   	inc    eax
c0017802:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0017808:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001780d:	e9 a1 00 00 00       	jmp    c00178b3 <CPU::detectFeatures()+0x959>
c0017812:	83 f8 06             	cmp    eax,0x6
c0017815:	0f 84 e1 fe ff ff    	je     c00176fc <CPU::detectFeatures()+0x7a2>
c001781b:	83 f8 04             	cmp    eax,0x4
c001781e:	0f 84 e9 fe ff ff    	je     c001770d <CPU::detectFeatures()+0x7b3>
c0017824:	83 f8 03             	cmp    eax,0x3
c0017827:	0f 85 10 01 00 00    	jne    c001793d <CPU::detectFeatures()+0x9e3>
c001782d:	52                   	push   edx
c001782e:	52                   	push   edx
c001782f:	68 0b a0 03 c0       	push   0xc003a00b
c0017834:	eb 77                	jmp    c00178ad <CPU::detectFeatures()+0x953>
c0017836:	83 f8 07             	cmp    eax,0x7
c0017839:	75 09                	jne    c0017844 <CPU::detectFeatures()+0x8ea>
c001783b:	50                   	push   eax
c001783c:	50                   	push   eax
c001783d:	68 15 a0 03 c0       	push   0xc003a015
c0017842:	eb 69                	jmp    c00178ad <CPU::detectFeatures()+0x953>
c0017844:	83 f8 0a             	cmp    eax,0xa
c0017847:	75 09                	jne    c0017852 <CPU::detectFeatures()+0x8f8>
c0017849:	50                   	push   eax
c001784a:	50                   	push   eax
c001784b:	68 20 a0 03 c0       	push   0xc003a020
c0017850:	eb 5b                	jmp    c00178ad <CPU::detectFeatures()+0x953>
c0017852:	83 f8 0b             	cmp    eax,0xb
c0017855:	75 09                	jne    c0017860 <CPU::detectFeatures()+0x906>
c0017857:	50                   	push   eax
c0017858:	50                   	push   eax
c0017859:	68 28 a0 03 c0       	push   0xc003a028
c001785e:	eb 4d                	jmp    c00178ad <CPU::detectFeatures()+0x953>
c0017860:	83 f8 08             	cmp    eax,0x8
c0017863:	75 09                	jne    c001786e <CPU::detectFeatures()+0x914>
c0017865:	50                   	push   eax
c0017866:	50                   	push   eax
c0017867:	68 31 a0 03 c0       	push   0xc003a031
c001786c:	eb 3f                	jmp    c00178ad <CPU::detectFeatures()+0x953>
c001786e:	83 f8 09             	cmp    eax,0x9
c0017871:	75 09                	jne    c001787c <CPU::detectFeatures()+0x922>
c0017873:	50                   	push   eax
c0017874:	50                   	push   eax
c0017875:	68 39 a0 03 c0       	push   0xc003a039
c001787a:	eb 31                	jmp    c00178ad <CPU::detectFeatures()+0x953>
c001787c:	83 f8 05             	cmp    eax,0x5
c001787f:	75 09                	jne    c001788a <CPU::detectFeatures()+0x930>
c0017881:	50                   	push   eax
c0017882:	50                   	push   eax
c0017883:	68 41 a0 03 c0       	push   0xc003a041
c0017888:	eb 23                	jmp    c00178ad <CPU::detectFeatures()+0x953>
c001788a:	83 f8 0c             	cmp    eax,0xc
c001788d:	75 09                	jne    c0017898 <CPU::detectFeatures()+0x93e>
c001788f:	55                   	push   ebp
c0017890:	55                   	push   ebp
c0017891:	68 4f a0 03 c0       	push   0xc003a04f
c0017896:	eb 15                	jmp    c00178ad <CPU::detectFeatures()+0x953>
c0017898:	83 f8 0d             	cmp    eax,0xd
c001789b:	75 09                	jne    c00178a6 <CPU::detectFeatures()+0x94c>
c001789d:	57                   	push   edi
c001789e:	57                   	push   edi
c001789f:	68 5a a0 03 c0       	push   0xc003a05a
c00178a4:	eb 07                	jmp    c00178ad <CPU::detectFeatures()+0x953>
c00178a6:	56                   	push   esi
c00178a7:	56                   	push   esi
c00178a8:	68 6e a0 03 c0       	push   0xc003a06e
c00178ad:	53                   	push   ebx
c00178ae:	e8 b9 bd ff ff       	call   c001366c <Device::setName(char const*)>
c00178b3:	83 c4 10             	add    esp,0x10
c00178b6:	e9 82 00 00 00       	jmp    c001793d <CPU::detectFeatures()+0x9e3>
c00178bb:	51                   	push   ecx
c00178bc:	51                   	push   ecx
c00178bd:	68 ba 9e 03 c0       	push   0xc0039eba
c00178c2:	57                   	push   edi
c00178c3:	e8 df 8d fe ff       	call   c00006a7 <strcpy>
c00178c8:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00178d2:	e8 a8 88 fe ff       	call   c000017f <is486>
c00178d7:	83 c4 10             	add    esp,0x10
c00178da:	85 c0                	test   eax,eax
c00178dc:	74 2d                	je     c001790b <CPU::detectFeatures()+0x9b1>
c00178de:	52                   	push   edx
c00178df:	52                   	push   edx
c00178e0:	68 7a a0 03 c0       	push   0xc003a07a
c00178e5:	53                   	push   ebx
c00178e6:	e8 81 bd ff ff       	call   c001366c <Device::setName(char const*)>
c00178eb:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00178f2:	e8 fe 6d 00 00       	call   c001e6f5 <CPU::readCR0()>
c00178f7:	83 c4 10             	add    esp,0x10
c00178fa:	83 e0 14             	and    eax,0x14
c00178fd:	83 f8 04             	cmp    eax,0x4
c0017900:	75 1f                	jne    c0017921 <CPU::detectFeatures()+0x9c7>
c0017902:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0017909:	eb 32                	jmp    c001793d <CPU::detectFeatures()+0x9e3>
c001790b:	50                   	push   eax
c001790c:	50                   	push   eax
c001790d:	68 85 a0 03 c0       	push   0xc003a085
c0017912:	53                   	push   ebx
c0017913:	e8 54 bd ff ff       	call   c001366c <Device::setName(char const*)>
c0017918:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001791f:	eb d1                	jmp    c00178f2 <CPU::detectFeatures()+0x998>
c0017921:	e8 34 88 fe ff       	call   c000015a <hasLegacyFPU>
c0017926:	83 e0 01             	and    eax,0x1
c0017929:	8d 14 00             	lea    edx,[eax+eax*1]
c001792c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0017932:	83 e0 fd             	and    eax,0xfffffffd
c0017935:	09 d0                	or     eax,edx
c0017937:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001793d:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0017944:	83 c4 4c             	add    esp,0x4c
c0017947:	5b                   	pop    ebx
c0017948:	5e                   	pop    esi
c0017949:	5f                   	pop    edi
c001794a:	5d                   	pop    ebp
c001794b:	c3                   	ret    

c001794c <CPU::setupSMEP()>:
c001794c:	83 ec 0c             	sub    esp,0xc
c001794f:	e8 d7 6d 00 00       	call   c001e72b <CPU::readCR4()>
c0017954:	0d 00 00 10 00       	or     eax,0x100000
c0017959:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001795d:	83 c4 0c             	add    esp,0xc
c0017960:	e9 ec 74 00 00       	jmp    c001ee51 <CPU::writeCR4(unsigned long)>
c0017965:	90                   	nop

c0017966 <CPU::setupUMIP()>:
c0017966:	83 ec 0c             	sub    esp,0xc
c0017969:	e8 bd 6d 00 00       	call   c001e72b <CPU::readCR4()>
c001796e:	80 cc 08             	or     ah,0x8
c0017971:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017975:	83 c4 0c             	add    esp,0xc
c0017978:	e9 d4 74 00 00       	jmp    c001ee51 <CPU::writeCR4(unsigned long)>
c001797d:	90                   	nop

c001797e <CPU::setupTSC()>:
c001797e:	83 ec 0c             	sub    esp,0xc
c0017981:	e8 a5 6d 00 00       	call   c001e72b <CPU::readCR4()>
c0017986:	83 c8 04             	or     eax,0x4
c0017989:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001798d:	83 c4 0c             	add    esp,0xc
c0017990:	e9 bc 74 00 00       	jmp    c001ee51 <CPU::writeCR4(unsigned long)>
c0017995:	90                   	nop

c0017996 <CPU::setupLargePages()>:
c0017996:	83 ec 0c             	sub    esp,0xc
c0017999:	e8 8d 6d 00 00       	call   c001e72b <CPU::readCR4()>
c001799e:	83 c8 10             	or     eax,0x10
c00179a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00179a5:	83 c4 0c             	add    esp,0xc
c00179a8:	e9 a4 74 00 00       	jmp    c001ee51 <CPU::writeCR4(unsigned long)>
c00179ad:	90                   	nop

c00179ae <CPU::setupPAT()>:
c00179ae:	a1 08 b7 03 c0       	mov    eax,ds:0xc003b708
c00179b3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00179ba:	74 2c                	je     c00179e8 <CPU::setupPAT()+0x3a>
c00179bc:	53                   	push   ebx
c00179bd:	83 ec 10             	sub    esp,0x10
c00179c0:	68 77 02 00 00       	push   0x277
c00179c5:	50                   	push   eax
c00179c6:	e8 01 39 ff ff       	call   c000b2cc <Computer::rdmsr(unsigned int)>
c00179cb:	83 e2 f8             	and    edx,0xfffffff8
c00179ce:	83 ca 01             	or     edx,0x1
c00179d1:	52                   	push   edx
c00179d2:	50                   	push   eax
c00179d3:	68 77 02 00 00       	push   0x277
c00179d8:	ff 35 08 b7 03 c0    	push   DWORD PTR ds:0xc003b708
c00179de:	e8 15 39 ff ff       	call   c000b2f8 <Computer::wrmsr(unsigned int, unsigned long long)>
c00179e3:	83 c4 28             	add    esp,0x28
c00179e6:	5b                   	pop    ebx
c00179e7:	c3                   	ret    
c00179e8:	c3                   	ret    
c00179e9:	90                   	nop

c00179ea <CPU::setupMTRR()>:
c00179ea:	c3                   	ret    
c00179eb:	90                   	nop

c00179ec <CPU::setupGlobalPages()>:
c00179ec:	83 ec 0c             	sub    esp,0xc
c00179ef:	e8 37 6d 00 00       	call   c001e72b <CPU::readCR4()>
c00179f4:	0c 80                	or     al,0x80
c00179f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00179fa:	83 c4 0c             	add    esp,0xc
c00179fd:	e9 4f 74 00 00       	jmp    c001ee51 <CPU::writeCR4(unsigned long)>

c0017a02 <CPU::allowUsermodeDataAccess()>:
c0017a02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a06:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0017a0d:	74 03                	je     c0017a12 <CPU::allowUsermodeDataAccess()+0x10>
c0017a0f:	0f 01 cb             	stac   
c0017a12:	c3                   	ret    
c0017a13:	90                   	nop

c0017a14 <CPU::prohibitUsermodeDataAccess()>:
c0017a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a18:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0017a1f:	74 03                	je     c0017a24 <CPU::prohibitUsermodeDataAccess()+0x10>
c0017a21:	0f 01 ca             	clac   
c0017a24:	c3                   	ret    
c0017a25:	90                   	nop

c0017a26 <CPU::setupSMAP()>:
c0017a26:	53                   	push   ebx
c0017a27:	83 ec 08             	sub    esp,0x8
c0017a2a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017a2e:	e8 f8 6c 00 00       	call   c001e72b <CPU::readCR4()>
c0017a33:	83 ec 0c             	sub    esp,0xc
c0017a36:	0d 00 00 20 00       	or     eax,0x200000
c0017a3b:	50                   	push   eax
c0017a3c:	e8 10 74 00 00       	call   c001ee51 <CPU::writeCR4(unsigned long)>
c0017a41:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0017a45:	83 c4 18             	add    esp,0x18
c0017a48:	5b                   	pop    ebx
c0017a49:	eb c9                	jmp    c0017a14 <CPU::prohibitUsermodeDataAccess()>
c0017a4b:	90                   	nop

c0017a4c <CPU::setupFeatures()>:
c0017a4c:	53                   	push   ebx
c0017a4d:	83 ec 08             	sub    esp,0x8
c0017a50:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017a54:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0017a5b:	74 0c                	je     c0017a69 <CPU::setupFeatures()+0x1d>
c0017a5d:	83 ec 0c             	sub    esp,0xc
c0017a60:	53                   	push   ebx
c0017a61:	e8 e6 fe ff ff       	call   c001794c <CPU::setupSMEP()>
c0017a66:	83 c4 10             	add    esp,0x10
c0017a69:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0017a70:	74 0c                	je     c0017a7e <CPU::setupFeatures()+0x32>
c0017a72:	83 ec 0c             	sub    esp,0xc
c0017a75:	53                   	push   ebx
c0017a76:	e8 ab ff ff ff       	call   c0017a26 <CPU::setupSMAP()>
c0017a7b:	83 c4 10             	add    esp,0x10
c0017a7e:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0017a85:	74 0c                	je     c0017a93 <CPU::setupFeatures()+0x47>
c0017a87:	83 ec 0c             	sub    esp,0xc
c0017a8a:	53                   	push   ebx
c0017a8b:	e8 d6 fe ff ff       	call   c0017966 <CPU::setupUMIP()>
c0017a90:	83 c4 10             	add    esp,0x10
c0017a93:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0017a9a:	74 0c                	je     c0017aa8 <CPU::setupFeatures()+0x5c>
c0017a9c:	83 ec 0c             	sub    esp,0xc
c0017a9f:	53                   	push   ebx
c0017aa0:	e8 d9 fe ff ff       	call   c001797e <CPU::setupTSC()>
c0017aa5:	83 c4 10             	add    esp,0x10
c0017aa8:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0017aaf:	74 0c                	je     c0017abd <CPU::setupFeatures()+0x71>
c0017ab1:	83 ec 0c             	sub    esp,0xc
c0017ab4:	53                   	push   ebx
c0017ab5:	e8 dc fe ff ff       	call   c0017996 <CPU::setupLargePages()>
c0017aba:	83 c4 10             	add    esp,0x10
c0017abd:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0017ac4:	74 0c                	je     c0017ad2 <CPU::setupFeatures()+0x86>
c0017ac6:	83 ec 0c             	sub    esp,0xc
c0017ac9:	53                   	push   ebx
c0017aca:	e8 1d ff ff ff       	call   c00179ec <CPU::setupGlobalPages()>
c0017acf:	83 c4 10             	add    esp,0x10
c0017ad2:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0017ad9:	74 0d                	je     c0017ae8 <CPU::setupFeatures()+0x9c>
c0017adb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017adf:	83 c4 08             	add    esp,0x8
c0017ae2:	5b                   	pop    ebx
c0017ae3:	e9 c6 fe ff ff       	jmp    c00179ae <CPU::setupPAT()>
c0017ae8:	83 c4 08             	add    esp,0x8
c0017aeb:	5b                   	pop    ebx
c0017aec:	c3                   	ret    
c0017aed:	90                   	nop

c0017aee <CPU::open(int, int, void*)>:
c0017aee:	57                   	push   edi
c0017aef:	56                   	push   esi
c0017af0:	53                   	push   ebx
c0017af1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017af5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017af9:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0017aff:	83 ec 0c             	sub    esp,0xc
c0017b02:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0017b08:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0017b0e:	50                   	push   eax
c0017b0f:	e8 2a 4a ff ff       	call   c000c53e <GDT::setup()>
c0017b14:	83 c4 0c             	add    esp,0xc
c0017b17:	6a 00                	push   0x0
c0017b19:	68 ef be ad de       	push   0xdeadbeef
c0017b1e:	57                   	push   edi
c0017b1f:	e8 f2 8f ff ff       	call   c0010b16 <TSS::setup(unsigned long, unsigned long)>
c0017b24:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017b27:	e8 ca 8f ff ff       	call   c0010af6 <TSS::flush()>
c0017b2c:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0017b32:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b35:	e8 5e 4c ff ff       	call   c000c798 <IDT::setup()>
c0017b3a:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0017b41:	e8 02 73 00 00       	call   c001ee48 <CPU::writeDR7(unsigned long)>
c0017b46:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0017b50:	e8 20 5c ff ff       	call   c000d775 <Phys::allocatePage()>
c0017b55:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0017b5b:	89 30                	mov    DWORD PTR [eax],esi
c0017b5d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0017b63:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0017b66:	58                   	pop    eax
c0017b67:	5a                   	pop    edx
c0017b68:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0017b6e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017b72:	e8 7f 9d ff ff       	call   c00118f6 <VAS::setCPUSpecific(unsigned long)>
c0017b77:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017b7a:	e8 db f3 ff ff       	call   c0016f5a <CPU::detectFeatures()>
c0017b7f:	e8 40 c8 ff ff       	call   c00143c4 <setupInterruptController()>
c0017b84:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0017b8a:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c0017b8f:	83 e0 10             	and    eax,0x10
c0017b92:	83 f8 01             	cmp    eax,0x1
c0017b95:	19 c0                	sbb    eax,eax
c0017b97:	83 e0 46             	and    eax,0x46
c0017b9a:	83 c0 1e             	add    eax,0x1e
c0017b9d:	89 04 24             	mov    DWORD PTR [esp],eax
c0017ba0:	e8 03 da ff ff       	call   c00155a8 <setupTimer(int)>
c0017ba5:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0017bab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017bae:	e8 99 fe ff ff       	call   c0017a4c <CPU::setupFeatures()>
c0017bb3:	83 c4 10             	add    esp,0x10
c0017bb6:	31 c0                	xor    eax,eax
c0017bb8:	5b                   	pop    ebx
c0017bb9:	5e                   	pop    esi
c0017bba:	5f                   	pop    edi
c0017bbb:	c3                   	ret    

c0017bbc <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0017bbc:	55                   	push   ebp
c0017bbd:	57                   	push   edi
c0017bbe:	56                   	push   esi
c0017bbf:	53                   	push   ebx
c0017bc0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0017bc6:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0017bcd:	8a 1e                	mov    bl,BYTE PTR [esi]
c0017bcf:	8d 6e 01             	lea    ebp,[esi+0x1]
c0017bd2:	80 fb 40             	cmp    bl,0x40
c0017bd5:	75 1b                	jne    c0017bf2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0017bd7:	8a 16                	mov    dl,BYTE PTR [esi]
c0017bd9:	84 d2                	test   dl,dl
c0017bdb:	0f 84 f1 00 00 00    	je     c0017cd2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017be1:	8d 46 01             	lea    eax,[esi+0x1]
c0017be4:	80 fa 3a             	cmp    dl,0x3a
c0017be7:	74 04                	je     c0017bed <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0017be9:	89 c6                	mov    esi,eax
c0017beb:	eb ea                	jmp    c0017bd7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0017bed:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0017bf0:	89 c6                	mov    esi,eax
c0017bf2:	50                   	push   eax
c0017bf3:	6a 40                	push   0x40
c0017bf5:	6a 00                	push   0x0
c0017bf7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017bfb:	50                   	push   eax
c0017bfc:	e8 07 8a fe ff       	call   c0000608 <memset>
c0017c01:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0017c08:	31 c0                	xor    eax,eax
c0017c0a:	83 c4 10             	add    esp,0x10
c0017c0d:	8a 0f                	mov    cl,BYTE PTR [edi]
c0017c0f:	84 c9                	test   cl,cl
c0017c11:	0f 84 bb 00 00 00    	je     c0017cd2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017c17:	3d c7 00 00 00       	cmp    eax,0xc7
c0017c1c:	0f 8f b0 00 00 00    	jg     c0017cd2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017c22:	80 f9 0a             	cmp    cl,0xa
c0017c25:	0f 85 98 00 00 00    	jne    c0017cc3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0017c2b:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0017c30:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0017c34:	a8 df                	test   al,0xdf
c0017c36:	0f 94 c1             	sete   cl
c0017c39:	3c 23                	cmp    al,0x23
c0017c3b:	0f 94 c2             	sete   dl
c0017c3e:	08 d1                	or     cl,dl
c0017c40:	75 4a                	jne    c0017c8c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017c42:	8d 50 f7             	lea    edx,[eax-0x9]
c0017c45:	80 fa 01             	cmp    dl,0x1
c0017c48:	76 42                	jbe    c0017c8c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017c4a:	3c 5b                	cmp    al,0x5b
c0017c4c:	75 42                	jne    c0017c90 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0017c4e:	80 fb 40             	cmp    bl,0x40
c0017c51:	75 39                	jne    c0017c8c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017c53:	83 ec 0c             	sub    esp,0xc
c0017c56:	8d 54 24 65          	lea    edx,[esp+0x65]
c0017c5a:	52                   	push   edx
c0017c5b:	e8 c5 89 fe ff       	call   c0000625 <strlen>
c0017c60:	83 c4 10             	add    esp,0x10
c0017c63:	83 f8 3f             	cmp    eax,0x3f
c0017c66:	77 6a                	ja     c0017cd2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017c68:	50                   	push   eax
c0017c69:	50                   	push   eax
c0017c6a:	8d 54 24 61          	lea    edx,[esp+0x61]
c0017c6e:	52                   	push   edx
c0017c6f:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017c73:	52                   	push   edx
c0017c74:	e8 2e 8a fe ff       	call   c00006a7 <strcpy>
c0017c79:	58                   	pop    eax
c0017c7a:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017c7e:	52                   	push   edx
c0017c7f:	e8 a1 89 fe ff       	call   c0000625 <strlen>
c0017c84:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0017c89:	83 c4 10             	add    esp,0x10
c0017c8c:	31 d2                	xor    edx,edx
c0017c8e:	eb 3a                	jmp    c0017cca <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0017c90:	80 fb 40             	cmp    bl,0x40
c0017c93:	74 06                	je     c0017c9b <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0017c95:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017c99:	eb 20                	jmp    c0017cbb <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0017c9b:	50                   	push   eax
c0017c9c:	50                   	push   eax
c0017c9d:	55                   	push   ebp
c0017c9e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017ca2:	50                   	push   eax
c0017ca3:	e8 50 8a fe ff       	call   c00006f8 <strcmp>
c0017ca8:	83 c4 10             	add    esp,0x10
c0017cab:	85 c0                	test   eax,eax
c0017cad:	75 dd                	jne    c0017c8c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017caf:	eb e4                	jmp    c0017c95 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0017cb1:	8d 50 01             	lea    edx,[eax+0x1]
c0017cb4:	80 f9 3d             	cmp    cl,0x3d
c0017cb7:	74 1d                	je     c0017cd6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0017cb9:	89 d0                	mov    eax,edx
c0017cbb:	8a 08                	mov    cl,BYTE PTR [eax]
c0017cbd:	84 c9                	test   cl,cl
c0017cbf:	75 f0                	jne    c0017cb1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0017cc1:	eb 0f                	jmp    c0017cd2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017cc3:	8d 50 01             	lea    edx,[eax+0x1]
c0017cc6:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0017cca:	47                   	inc    edi
c0017ccb:	89 d0                	mov    eax,edx
c0017ccd:	e9 3b ff ff ff       	jmp    c0017c0d <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0017cd2:	31 c0                	xor    eax,eax
c0017cd4:	eb 33                	jmp    c0017d09 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0017cd6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017cda:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0017cdd:	50                   	push   eax
c0017cde:	50                   	push   eax
c0017cdf:	8d 44 24 60          	lea    eax,[esp+0x60]
c0017ce3:	50                   	push   eax
c0017ce4:	56                   	push   esi
c0017ce5:	e8 0e 8a fe ff       	call   c00006f8 <strcmp>
c0017cea:	83 c4 10             	add    esp,0x10
c0017ced:	85 c0                	test   eax,eax
c0017cef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017cf3:	75 97                	jne    c0017c8c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017cf5:	51                   	push   ecx
c0017cf6:	51                   	push   ecx
c0017cf7:	52                   	push   edx
c0017cf8:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0017cff:	e8 a3 89 fe ff       	call   c00006a7 <strcpy>
c0017d04:	83 c4 10             	add    esp,0x10
c0017d07:	b0 01                	mov    al,0x1
c0017d09:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017d0f:	5b                   	pop    ebx
c0017d10:	5e                   	pop    esi
c0017d11:	5f                   	pop    edi
c0017d12:	5d                   	pop    ebp
c0017d13:	c3                   	ret    

c0017d14 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0017d14:	57                   	push   edi
c0017d15:	56                   	push   esi
c0017d16:	53                   	push   ebx
c0017d17:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017d1d:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0017d24:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0017d2b:	53                   	push   ebx
c0017d2c:	e8 f4 88 fe ff       	call   c0000625 <strlen>
c0017d31:	89 34 24             	mov    DWORD PTR [esp],esi
c0017d34:	89 c7                	mov    edi,eax
c0017d36:	e8 ea 88 fe ff       	call   c0000625 <strlen>
c0017d3b:	83 c4 10             	add    esp,0x10
c0017d3e:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0017d42:	31 ff                	xor    edi,edi
c0017d44:	3d ff 00 00 00       	cmp    eax,0xff
c0017d49:	0f 87 18 01 00 00    	ja     c0017e67 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0017d4f:	51                   	push   ecx
c0017d50:	51                   	push   ecx
c0017d51:	56                   	push   esi
c0017d52:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0017d56:	56                   	push   esi
c0017d57:	e8 4b 89 fe ff       	call   c00006a7 <strcpy>
c0017d5c:	58                   	pop    eax
c0017d5d:	5a                   	pop    edx
c0017d5e:	68 36 8c 03 c0       	push   0xc0038c36
c0017d63:	56                   	push   esi
c0017d64:	e8 f5 89 fe ff       	call   c000075e <strcat>
c0017d69:	59                   	pop    ecx
c0017d6a:	58                   	pop    eax
c0017d6b:	53                   	push   ebx
c0017d6c:	56                   	push   esi
c0017d6d:	e8 ec 89 fe ff       	call   c000075e <strcat>
c0017d72:	58                   	pop    eax
c0017d73:	5a                   	pop    edx
c0017d74:	68 bc a0 03 c0       	push   0xc003a0bc
c0017d79:	56                   	push   esi
c0017d7a:	e8 df 89 fe ff       	call   c000075e <strcat>
c0017d7f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017d86:	e8 f5 a3 ff ff       	call   c0012180 <operator new(unsigned long)>
c0017d8b:	83 c4 0c             	add    esp,0xc
c0017d8e:	89 c3                	mov    ebx,eax
c0017d90:	ff 35 5c b9 03 c0    	push   DWORD PTR ds:0xc003b95c
c0017d96:	56                   	push   esi
c0017d97:	50                   	push   eax
c0017d98:	e8 11 a8 ff ff       	call   c00125ae <File::File(char const*, Process*)>
c0017d9d:	59                   	pop    ecx
c0017d9e:	5e                   	pop    esi
c0017d9f:	6a 01                	push   0x1
c0017da1:	53                   	push   ebx
c0017da2:	e8 6b a8 ff ff       	call   c0012612 <File::open(FileOpenMode)>
c0017da7:	83 c4 10             	add    esp,0x10
c0017daa:	85 c0                	test   eax,eax
c0017dac:	74 08                	je     c0017db6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0017dae:	83 ec 0c             	sub    esp,0xc
c0017db1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017db3:	53                   	push   ebx
c0017db4:	eb 2e                	jmp    c0017de4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0017db6:	52                   	push   edx
c0017db7:	8d 44 24 07          	lea    eax,[esp+0x7]
c0017dbb:	50                   	push   eax
c0017dbc:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017dc0:	50                   	push   eax
c0017dc1:	53                   	push   ebx
c0017dc2:	e8 f7 aa ff ff       	call   c00128be <File::stat(unsigned long long*, bool*)>
c0017dc7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017dcb:	83 c4 10             	add    esp,0x10
c0017dce:	89 c1                	mov    ecx,eax
c0017dd0:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0017dd4:	75 13                	jne    c0017de9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0017dd6:	83 ec 0c             	sub    esp,0xc
c0017dd9:	53                   	push   ebx
c0017dda:	e8 91 a8 ff ff       	call   c0012670 <File::close()>
c0017ddf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017de1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017de4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017de7:	eb 7b                	jmp    c0017e64 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0017de9:	83 ec 0c             	sub    esp,0xc
c0017dec:	50                   	push   eax
c0017ded:	e8 d9 53 ff ff       	call   c000d1cb <malloc>
c0017df2:	89 c6                	mov    esi,eax
c0017df4:	58                   	pop    eax
c0017df5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017df7:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017dfb:	52                   	push   edx
c0017dfc:	56                   	push   esi
c0017dfd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017e01:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017e05:	53                   	push   ebx
c0017e06:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017e09:	83 c4 20             	add    esp,0x20
c0017e0c:	85 c0                	test   eax,eax
c0017e0e:	75 0a                	jne    c0017e1a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0017e10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017e14:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0017e18:	74 18                	je     c0017e32 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0017e1a:	83 ec 0c             	sub    esp,0xc
c0017e1d:	31 ff                	xor    edi,edi
c0017e1f:	53                   	push   ebx
c0017e20:	e8 4b a8 ff ff       	call   c0012670 <File::close()>
c0017e25:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017e27:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017e2a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017e2d:	83 c4 10             	add    esp,0x10
c0017e30:	eb 35                	jmp    c0017e67 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0017e32:	83 ec 0c             	sub    esp,0xc
c0017e35:	53                   	push   ebx
c0017e36:	e8 35 a8 ff ff       	call   c0012670 <File::close()>
c0017e3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017e3d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017e40:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017e43:	83 c4 0c             	add    esp,0xc
c0017e46:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0017e4d:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0017e54:	56                   	push   esi
c0017e55:	e8 62 fd ff ff       	call   c0017bbc <Reg::findLineFromLoadedData(char*, char*, char*)>
c0017e5a:	89 34 24             	mov    DWORD PTR [esp],esi
c0017e5d:	89 c7                	mov    edi,eax
c0017e5f:	e8 77 53 ff ff       	call   c000d1db <free>
c0017e64:	83 c4 10             	add    esp,0x10
c0017e67:	81 c4 10 01 00 00    	add    esp,0x110
c0017e6d:	89 f8                	mov    eax,edi
c0017e6f:	5b                   	pop    ebx
c0017e70:	5e                   	pop    esi
c0017e71:	5f                   	pop    edi
c0017e72:	c3                   	ret    

c0017e73 <Reg::getLine(char*, char*, char*)>:
c0017e73:	57                   	push   edi
c0017e74:	56                   	push   esi
c0017e75:	53                   	push   ebx
c0017e76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017e7a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017e7e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0017e82:	57                   	push   edi
c0017e83:	56                   	push   esi
c0017e84:	53                   	push   ebx
c0017e85:	68 c1 a0 03 c0       	push   0xc003a0c1
c0017e8a:	e8 85 fe ff ff       	call   c0017d14 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0017e8f:	83 c4 10             	add    esp,0x10
c0017e92:	84 c0                	test   al,al
c0017e94:	75 10                	jne    c0017ea6 <Reg::getLine(char*, char*, char*)+0x33>
c0017e96:	57                   	push   edi
c0017e97:	56                   	push   esi
c0017e98:	53                   	push   ebx
c0017e99:	68 e6 a0 03 c0       	push   0xc003a0e6
c0017e9e:	e8 71 fe ff ff       	call   c0017d14 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0017ea3:	83 c4 10             	add    esp,0x10
c0017ea6:	5b                   	pop    ebx
c0017ea7:	5e                   	pop    esi
c0017ea8:	5f                   	pop    edi
c0017ea9:	c3                   	ret    

c0017eaa <Reg::readInt(char*, char*, int*)>:
c0017eaa:	55                   	push   ebp
c0017eab:	57                   	push   edi
c0017eac:	56                   	push   esi
c0017ead:	53                   	push   ebx
c0017eae:	81 ec f0 00 00 00    	sub    esp,0xf0
c0017eb4:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0017eb8:	57                   	push   edi
c0017eb9:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0017ec0:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0017ec7:	e8 a7 ff ff ff       	call   c0017e73 <Reg::getLine(char*, char*, char*)>
c0017ecc:	83 c4 10             	add    esp,0x10
c0017ecf:	84 c0                	test   al,al
c0017ed1:	0f 84 b3 00 00 00    	je     c0017f8a <Reg::readInt(char*, char*, int*)+0xe0>
c0017ed7:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0017edb:	80 fa 2b             	cmp    dl,0x2b
c0017ede:	74 0c                	je     c0017eec <Reg::readInt(char*, char*, int*)+0x42>
c0017ee0:	80 fa 2d             	cmp    dl,0x2d
c0017ee3:	75 0e                	jne    c0017ef3 <Reg::readInt(char*, char*, int*)+0x49>
c0017ee5:	ba 01 00 00 00       	mov    edx,0x1
c0017eea:	eb 0b                	jmp    c0017ef7 <Reg::readInt(char*, char*, int*)+0x4d>
c0017eec:	ba 01 00 00 00       	mov    edx,0x1
c0017ef1:	eb 02                	jmp    c0017ef5 <Reg::readInt(char*, char*, int*)+0x4b>
c0017ef3:	31 d2                	xor    edx,edx
c0017ef5:	31 c0                	xor    eax,eax
c0017ef7:	be 0a 00 00 00       	mov    esi,0xa
c0017efc:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0017f01:	75 20                	jne    c0017f23 <Reg::readInt(char*, char*, int*)+0x79>
c0017f03:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0017f07:	80 f9 78             	cmp    cl,0x78
c0017f0a:	75 0a                	jne    c0017f16 <Reg::readInt(char*, char*, int*)+0x6c>
c0017f0c:	83 c2 02             	add    edx,0x2
c0017f0f:	be 10 00 00 00       	mov    esi,0x10
c0017f14:	eb 0d                	jmp    c0017f23 <Reg::readInt(char*, char*, int*)+0x79>
c0017f16:	80 f9 62             	cmp    cl,0x62
c0017f19:	75 08                	jne    c0017f23 <Reg::readInt(char*, char*, int*)+0x79>
c0017f1b:	83 c2 02             	add    edx,0x2
c0017f1e:	be 02 00 00 00       	mov    esi,0x2
c0017f23:	01 d7                	add    edi,edx
c0017f25:	31 d2                	xor    edx,edx
c0017f27:	8a 1f                	mov    bl,BYTE PTR [edi]
c0017f29:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0017f2d:	80 fb 0d             	cmp    bl,0xd
c0017f30:	0f 94 c3             	sete   bl
c0017f33:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017f38:	0f 94 c1             	sete   cl
c0017f3b:	08 cb                	or     bl,cl
c0017f3d:	75 3a                	jne    c0017f79 <Reg::readInt(char*, char*, int*)+0xcf>
c0017f3f:	0f af d6             	imul   edx,esi
c0017f42:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0017f47:	83 fe 10             	cmp    esi,0x10
c0017f4a:	75 26                	jne    c0017f72 <Reg::readInt(char*, char*, int*)+0xc8>
c0017f4c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0017f50:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0017f53:	89 e9                	mov    ecx,ebp
c0017f55:	80 f9 05             	cmp    cl,0x5
c0017f58:	77 06                	ja     c0017f60 <Reg::readInt(char*, char*, int*)+0xb6>
c0017f5a:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0017f5e:	eb 16                	jmp    c0017f76 <Reg::readInt(char*, char*, int*)+0xcc>
c0017f60:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0017f64:	83 e9 61             	sub    ecx,0x61
c0017f67:	80 f9 05             	cmp    cl,0x5
c0017f6a:	77 06                	ja     c0017f72 <Reg::readInt(char*, char*, int*)+0xc8>
c0017f6c:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0017f70:	eb 04                	jmp    c0017f76 <Reg::readInt(char*, char*, int*)+0xcc>
c0017f72:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0017f76:	47                   	inc    edi
c0017f77:	eb ae                	jmp    c0017f27 <Reg::readInt(char*, char*, int*)+0x7d>
c0017f79:	84 c0                	test   al,al
c0017f7b:	74 02                	je     c0017f7f <Reg::readInt(char*, char*, int*)+0xd5>
c0017f7d:	f7 da                	neg    edx
c0017f7f:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0017f86:	89 10                	mov    DWORD PTR [eax],edx
c0017f88:	88 d8                	mov    al,bl
c0017f8a:	81 c4 ec 00 00 00    	add    esp,0xec
c0017f90:	5b                   	pop    ebx
c0017f91:	5e                   	pop    esi
c0017f92:	5f                   	pop    edi
c0017f93:	5d                   	pop    ebp
c0017f94:	c3                   	ret    

c0017f95 <Reg::readString(char*, char*, char*, int)>:
c0017f95:	57                   	push   edi
c0017f96:	56                   	push   esi
c0017f97:	53                   	push   ebx
c0017f98:	81 ec d4 00 00 00    	sub    esp,0xd4
c0017f9e:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0017fa5:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0017fa9:	57                   	push   edi
c0017faa:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0017fb1:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0017fb8:	e8 b6 fe ff ff       	call   c0017e73 <Reg::getLine(char*, char*, char*)>
c0017fbd:	83 c4 10             	add    esp,0x10
c0017fc0:	89 c6                	mov    esi,eax
c0017fc2:	84 c0                	test   al,al
c0017fc4:	74 44                	je     c001800a <Reg::readString(char*, char*, char*, int)+0x75>
c0017fc6:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0017fcd:	31 c0                	xor    eax,eax
c0017fcf:	4a                   	dec    edx
c0017fd0:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0017fd3:	84 c9                	test   cl,cl
c0017fd5:	74 0f                	je     c0017fe6 <Reg::readString(char*, char*, char*, int)+0x51>
c0017fd7:	39 c2                	cmp    edx,eax
c0017fd9:	7e 0b                	jle    c0017fe6 <Reg::readString(char*, char*, char*, int)+0x51>
c0017fdb:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0017fde:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0017fe3:	40                   	inc    eax
c0017fe4:	eb ea                	jmp    c0017fd0 <Reg::readString(char*, char*, char*, int)+0x3b>
c0017fe6:	83 ec 0c             	sub    esp,0xc
c0017fe9:	53                   	push   ebx
c0017fea:	e8 36 86 fe ff       	call   c0000625 <strlen>
c0017fef:	83 c4 10             	add    esp,0x10
c0017ff2:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0017ff7:	75 11                	jne    c001800a <Reg::readString(char*, char*, char*, int)+0x75>
c0017ff9:	83 ec 0c             	sub    esp,0xc
c0017ffc:	53                   	push   ebx
c0017ffd:	e8 23 86 fe ff       	call   c0000625 <strlen>
c0018002:	83 c4 10             	add    esp,0x10
c0018005:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001800a:	81 c4 d0 00 00 00    	add    esp,0xd0
c0018010:	89 f0                	mov    eax,esi
c0018012:	5b                   	pop    ebx
c0018013:	5e                   	pop    esi
c0018014:	5f                   	pop    edi
c0018015:	c3                   	ret    

c0018016 <Reg::readBool(char*, char*, bool*)>:
c0018016:	83 ec 20             	sub    esp,0x20
c0018019:	8d 44 24 10          	lea    eax,[esp+0x10]
c001801d:	50                   	push   eax
c001801e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018022:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018026:	e8 7f fe ff ff       	call   c0017eaa <Reg::readInt(char*, char*, int*)>
c001802b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018030:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018034:	0f 95 02             	setne  BYTE PTR [edx]
c0018037:	83 c4 2c             	add    esp,0x2c
c001803a:	c3                   	ret    

c001803b <Reg::readBoolWithDefault(char*, char*, bool)>:
c001803b:	53                   	push   ebx
c001803c:	83 ec 1c             	sub    esp,0x1c
c001803f:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0018043:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018047:	50                   	push   eax
c0018048:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001804c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018050:	e8 c1 ff ff ff       	call   c0018016 <Reg::readBool(char*, char*, bool*)>
c0018055:	83 c4 10             	add    esp,0x10
c0018058:	84 c0                	test   al,al
c001805a:	74 04                	je     c0018060 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001805c:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0018060:	88 d8                	mov    al,bl
c0018062:	83 c4 18             	add    esp,0x18
c0018065:	5b                   	pop    ebx
c0018066:	c3                   	ret    

c0018067 <Reg::readIntWithDefault(char*, char*, int)>:
c0018067:	53                   	push   ebx
c0018068:	83 ec 1c             	sub    esp,0x1c
c001806b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001806f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018073:	50                   	push   eax
c0018074:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018078:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001807c:	e8 29 fe ff ff       	call   c0017eaa <Reg::readInt(char*, char*, int*)>
c0018081:	83 c4 10             	add    esp,0x10
c0018084:	84 c0                	test   al,al
c0018086:	74 04                	je     c001808c <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0018088:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001808c:	89 d8                	mov    eax,ebx
c001808e:	83 c4 18             	add    esp,0x18
c0018091:	5b                   	pop    ebx
c0018092:	c3                   	ret    

c0018093 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0018093:	56                   	push   esi
c0018094:	53                   	push   ebx
c0018095:	51                   	push   ecx
c0018096:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001809a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001809e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00180a2:	56                   	push   esi
c00180a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00180a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00180ab:	e8 e5 fe ff ff       	call   c0017f95 <Reg::readString(char*, char*, char*, int)>
c00180b0:	83 c4 10             	add    esp,0x10
c00180b3:	84 c0                	test   al,al
c00180b5:	74 02                	je     c00180b9 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c00180b7:	89 f3                	mov    ebx,esi
c00180b9:	89 d8                	mov    eax,ebx
c00180bb:	5a                   	pop    edx
c00180bc:	5b                   	pop    ebx
c00180bd:	5e                   	pop    esi
c00180be:	c3                   	ret    

c00180bf <Sys::exit(regs*)>:
c00180bf:	83 ec 18             	sub    esp,0x18
c00180c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00180c6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00180c9:	e8 a4 6b ff ff       	call   c000ec72 <terminateTask(int)>
c00180ce:	83 c8 ff             	or     eax,0xffffffff
c00180d1:	83 c4 1c             	add    esp,0x1c
c00180d4:	89 c2                	mov    edx,eax
c00180d6:	c3                   	ret    

c00180d7 <Sys::read(regs*)>:
c00180d7:	57                   	push   edi
c00180d8:	56                   	push   esi
c00180d9:	53                   	push   ebx
c00180da:	83 ec 10             	sub    esp,0x10
c00180dd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00180e1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00180e4:	83 f8 02             	cmp    eax,0x2
c00180e7:	77 10                	ja     c00180f9 <Sys::read(regs*)+0x22>
c00180e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00180f1:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00180f7:	eb 0e                	jmp    c0018107 <Sys::read(regs*)+0x30>
c00180f9:	83 ec 0c             	sub    esp,0xc
c00180fc:	50                   	push   eax
c00180fd:	e8 07 8e ff ff       	call   c0010f09 <getFromFileDescriptor(int)>
c0018102:	83 c4 10             	add    esp,0x10
c0018105:	89 c1                	mov    ecx,eax
c0018107:	83 c8 ff             	or     eax,0xffffffff
c001810a:	85 c9                	test   ecx,ecx
c001810c:	89 c2                	mov    edx,eax
c001810e:	74 28                	je     c0018138 <Sys::read(regs*)+0x61>
c0018110:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018118:	31 ff                	xor    edi,edi
c001811a:	83 ec 0c             	sub    esp,0xc
c001811d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001811f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0018123:	52                   	push   edx
c0018124:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0018127:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001812a:	57                   	push   edi
c001812b:	56                   	push   esi
c001812c:	51                   	push   ecx
c001812d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0018130:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018134:	83 c4 20             	add    esp,0x20
c0018137:	99                   	cdq    
c0018138:	83 c4 10             	add    esp,0x10
c001813b:	5b                   	pop    ebx
c001813c:	5e                   	pop    esi
c001813d:	5f                   	pop    edi
c001813e:	c3                   	ret    

c001813f <Sys::sbrk(regs*)>:
c001813f:	56                   	push   esi
c0018140:	53                   	push   ebx
c0018141:	50                   	push   eax
c0018142:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018147:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001814b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001814e:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0018151:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c0018157:	85 db                	test   ebx,ebx
c0018159:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001815c:	74 02                	je     c0018160 <Sys::sbrk(regs*)+0x21>
c001815e:	79 06                	jns    c0018166 <Sys::sbrk(regs*)+0x27>
c0018160:	89 f0                	mov    eax,esi
c0018162:	31 d2                	xor    edx,edx
c0018164:	eb 2a                	jmp    c0018190 <Sys::sbrk(regs*)+0x51>
c0018166:	83 c8 ff             	or     eax,0xffffffff
c0018169:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001816f:	89 c2                	mov    edx,eax
c0018171:	77 1d                	ja     c0018190 <Sys::sbrk(regs*)+0x51>
c0018173:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0018179:	50                   	push   eax
c001817a:	c1 ea 0c             	shr    edx,0xc
c001817d:	68 07 04 00 00       	push   0x407
c0018182:	52                   	push   edx
c0018183:	51                   	push   ecx
c0018184:	e8 9d 95 ff ff       	call   c0011726 <VAS::allocatePages(int, int)>
c0018189:	89 f0                	mov    eax,esi
c001818b:	31 d2                	xor    edx,edx
c001818d:	83 c4 10             	add    esp,0x10
c0018190:	59                   	pop    ecx
c0018191:	5b                   	pop    ebx
c0018192:	5e                   	pop    esi
c0018193:	c3                   	ret    

c0018194 <Sys::write(regs*)>:
c0018194:	57                   	push   edi
c0018195:	56                   	push   esi
c0018196:	53                   	push   ebx
c0018197:	83 ec 10             	sub    esp,0x10
c001819a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001819e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00181a1:	83 f8 02             	cmp    eax,0x2
c00181a4:	77 10                	ja     c00181b6 <Sys::write(regs*)+0x22>
c00181a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181ab:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00181ae:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00181b4:	eb 0e                	jmp    c00181c4 <Sys::write(regs*)+0x30>
c00181b6:	83 ec 0c             	sub    esp,0xc
c00181b9:	50                   	push   eax
c00181ba:	e8 4a 8d ff ff       	call   c0010f09 <getFromFileDescriptor(int)>
c00181bf:	83 c4 10             	add    esp,0x10
c00181c2:	89 c1                	mov    ecx,eax
c00181c4:	83 c8 ff             	or     eax,0xffffffff
c00181c7:	85 c9                	test   ecx,ecx
c00181c9:	89 c2                	mov    edx,eax
c00181cb:	74 28                	je     c00181f5 <Sys::write(regs*)+0x61>
c00181cd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00181d5:	31 ff                	xor    edi,edi
c00181d7:	83 ec 0c             	sub    esp,0xc
c00181da:	8b 01                	mov    eax,DWORD PTR [ecx]
c00181dc:	8d 54 24 18          	lea    edx,[esp+0x18]
c00181e0:	52                   	push   edx
c00181e1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00181e4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00181e7:	57                   	push   edi
c00181e8:	56                   	push   esi
c00181e9:	51                   	push   ecx
c00181ea:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00181ed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181f1:	83 c4 20             	add    esp,0x20
c00181f4:	99                   	cdq    
c00181f5:	83 c4 10             	add    esp,0x10
c00181f8:	5b                   	pop    ebx
c00181f9:	5e                   	pop    esi
c00181fa:	5f                   	pop    edi
c00181fb:	c3                   	ret    

c00181fc <Sys::yield(regs*)>:
c00181fc:	83 ec 0c             	sub    esp,0xc
c00181ff:	e8 6e 5e ff ff       	call   c000e072 <lockScheduler()>
c0018204:	e8 9d 61 ff ff       	call   c000e3a6 <schedule()>
c0018209:	e8 66 5e ff ff       	call   c000e074 <unlockScheduler()>
c001820e:	31 c0                	xor    eax,eax
c0018210:	31 d2                	xor    edx,edx
c0018212:	83 c4 0c             	add    esp,0xc
c0018215:	c3                   	ret    

c0018216 <vm8086EntryPoint(void*)>:
c0018216:	83 ec 0c             	sub    esp,0xc
c0018219:	e8 56 5e ff ff       	call   c000e074 <unlockScheduler()>
c001821e:	fb                   	sti    
c001821f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018224:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0018228:	52                   	push   edx
c0018229:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001822d:	52                   	push   edx
c001822e:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018232:	52                   	push   edx
c0018233:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0018237:	50                   	push   eax
c0018238:	e8 78 7f fe ff       	call   c00001b5 <goToVM86>
c001823d:	83 c4 1c             	add    esp,0x1c
c0018240:	c3                   	ret    

c0018241 <inbv(unsigned short)>:
c0018241:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018245:	ec                   	in     al,dx
c0018246:	c3                   	ret    

c0018247 <outbv(unsigned short, unsigned char)>:
c0018247:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001824b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001824f:	ee                   	out    dx,al
c0018250:	c3                   	ret    

c0018251 <realToLinear(unsigned short, unsigned short)>:
c0018251:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018256:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001825b:	c1 e0 04             	shl    eax,0x4
c001825e:	01 d0                	add    eax,edx
c0018260:	c3                   	ret    

c0018261 <getSegment(unsigned int)>:
c0018261:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018265:	c1 e8 10             	shr    eax,0x10
c0018268:	c3                   	ret    

c0018269 <getOffset(unsigned int)>:
c0018269:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001826d:	c3                   	ret    

c001826e <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001826e:	55                   	push   ebp
c001826f:	57                   	push   edi
c0018270:	56                   	push   esi
c0018271:	53                   	push   ebx
c0018272:	83 ec 2c             	sub    esp,0x2c
c0018275:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0018279:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001827d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018281:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0018285:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0018289:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001828d:	e8 e0 5d ff ff       	call   c000e072 <lockScheduler()>
c0018292:	68 80 00 00 00       	push   0x80
c0018297:	6a 00                	push   0x0
c0018299:	68 16 82 01 c0       	push   0xc0018216
c001829e:	55                   	push   ebp
c001829f:	e8 f8 5e ff ff       	call   c000e19c <Process::createThread(void (*)(void*), void*, int)>
c00182a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00182a8:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c00182ac:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c00182b0:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c00182b4:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c00182b8:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00182bc:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00182c3:	e8 b8 9e ff ff       	call   c0012180 <operator new(unsigned long)>
c00182c8:	83 c4 0c             	add    esp,0xc
c00182cb:	89 c3                	mov    ebx,eax
c00182cd:	55                   	push   ebp
c00182ce:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00182d2:	50                   	push   eax
c00182d3:	e8 d6 a2 ff ff       	call   c00125ae <File::File(char const*, Process*)>
c00182d8:	83 c4 0c             	add    esp,0xc
c00182db:	8d 44 24 17          	lea    eax,[esp+0x17]
c00182df:	50                   	push   eax
c00182e0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00182e4:	50                   	push   eax
c00182e5:	53                   	push   ebx
c00182e6:	e8 d3 a5 ff ff       	call   c00128be <File::stat(unsigned long long*, bool*)>
c00182eb:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c00182ef:	83 c4 10             	add    esp,0x10
c00182f2:	84 d2                	test   dl,dl
c00182f4:	74 1c                	je     c0018312 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c00182f6:	83 ec 0c             	sub    esp,0xc
c00182f9:	68 01 a1 03 c0       	push   0xc003a101
c00182fe:	e8 eb 49 ff ff       	call   c000ccee <panic(char const*)>
c0018303:	e8 6c 5d ff ff       	call   c000e074 <unlockScheduler()>
c0018308:	83 c4 10             	add    esp,0x10
c001830b:	31 d2                	xor    edx,edx
c001830d:	e9 81 00 00 00       	jmp    c0018393 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0018312:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018316:	51                   	push   ecx
c0018317:	51                   	push   ecx
c0018318:	6a 01                	push   0x1
c001831a:	53                   	push   ebx
c001831b:	e8 f2 a2 ff ff       	call   c0012612 <File::open(FileOpenMode)>
c0018320:	83 c4 10             	add    esp,0x10
c0018323:	85 c0                	test   eax,eax
c0018325:	74 1b                	je     c0018342 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0018327:	83 ec 0c             	sub    esp,0xc
c001832a:	68 1a a1 03 c0       	push   0xc003a11a
c001832f:	e8 ba 49 ff ff       	call   c000ccee <panic(char const*)>
c0018334:	e8 3b 5d ff ff       	call   c000e074 <unlockScheduler()>
c0018339:	83 c4 10             	add    esp,0x10
c001833c:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018340:	eb 51                	jmp    c0018393 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0018342:	83 ec 0c             	sub    esp,0xc
c0018345:	0f b7 ff             	movzx  edi,di
c0018348:	6a 07                	push   0x7
c001834a:	0f b7 f6             	movzx  esi,si
c001834d:	68 00 01 00 00       	push   0x100
c0018352:	6a 00                	push   0x0
c0018354:	6a 00                	push   0x0
c0018356:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c001835c:	e8 b1 95 ff ff       	call   c0011912 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018361:	83 c4 18             	add    esp,0x18
c0018364:	57                   	push   edi
c0018365:	56                   	push   esi
c0018366:	e8 e6 fe ff ff       	call   c0018251 <realToLinear(unsigned short, unsigned short)>
c001836b:	5a                   	pop    edx
c001836c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001836e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0018372:	51                   	push   ecx
c0018373:	50                   	push   eax
c0018374:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018378:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001837c:	53                   	push   ebx
c001837d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018380:	83 c4 14             	add    esp,0x14
c0018383:	53                   	push   ebx
c0018384:	e8 e7 a2 ff ff       	call   c0012670 <File::close()>
c0018389:	e8 e6 5c ff ff       	call   c000e074 <unlockScheduler()>
c001838e:	83 c4 10             	add    esp,0x10
c0018391:	b2 01                	mov    dl,0x1
c0018393:	83 c4 2c             	add    esp,0x2c
c0018396:	88 d0                	mov    al,dl
c0018398:	5b                   	pop    ebx
c0018399:	5e                   	pop    esi
c001839a:	5f                   	pop    edi
c001839b:	5d                   	pop    ebp
c001839c:	c3                   	ret    

c001839d <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001839d:	57                   	push   edi
c001839e:	56                   	push   esi
c001839f:	53                   	push   ebx
c00183a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00183a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183a8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00183ac:	83 e8 06             	sub    eax,0x6
c00183af:	0f b7 c0             	movzx  eax,ax
c00183b2:	50                   	push   eax
c00183b3:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00183b8:	50                   	push   eax
c00183b9:	e8 93 fe ff ff       	call   c0018251 <realToLinear(unsigned short, unsigned short)>
c00183be:	5a                   	pop    edx
c00183bf:	5e                   	pop    esi
c00183c0:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00183c3:	8d 56 fa             	lea    edx,[esi-0x6]
c00183c6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00183cc:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00183cf:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00183d2:	83 c2 02             	add    edx,0x2
c00183d5:	66 89 10             	mov    WORD PTR [eax],dx
c00183d8:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00183db:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00183df:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00183e2:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00183e6:	89 d6                	mov    esi,edx
c00183e8:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00183ee:	66 81 e6 ff fd       	and    si,0xfdff
c00183f3:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c00183f7:	74 07                	je     c0018400 <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00183f9:	89 d6                	mov    esi,edx
c00183fb:	66 81 ce 00 02       	or     si,0x200
c0018400:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0018404:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018409:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001840d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0018415:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018418:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018420:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018423:	5b                   	pop    ebx
c0018424:	5e                   	pop    esi
c0018425:	5f                   	pop    edi
c0018426:	c3                   	ret    

c0018427 <readByteFromReal(unsigned short, unsigned short)>:
c0018427:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001842c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018431:	c1 e0 04             	shl    eax,0x4
c0018434:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018437:	c3                   	ret    

c0018438 <readWordFromReal(unsigned short, unsigned short)>:
c0018438:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001843d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018442:	c1 e0 04             	shl    eax,0x4
c0018445:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018449:	c3                   	ret    

c001844a <readDwordFromReal(unsigned short, unsigned short)>:
c001844a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001844f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018454:	c1 e0 04             	shl    eax,0x4
c0018457:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001845a:	c3                   	ret    

c001845b <writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001845b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018460:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018465:	c1 e0 04             	shl    eax,0x4
c0018468:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001846c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001846f:	c3                   	ret    

c0018470 <writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018470:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018475:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001847a:	c1 e0 04             	shl    eax,0x4
c001847d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018481:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018485:	c3                   	ret    

c0018486 <writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018486:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001848b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018490:	c1 e0 04             	shl    eax,0x4
c0018493:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018497:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001849a:	c3                   	ret    

c001849b <vm8086FaultHandler(regs*)>:
c001849b:	55                   	push   ebp
c001849c:	57                   	push   edi
c001849d:	56                   	push   esi
c001849e:	53                   	push   ebx
c001849f:	83 ec 1c             	sub    esp,0x1c
c00184a2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00184a6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00184a9:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00184ad:	0f b7 f0             	movzx  esi,ax
c00184b0:	52                   	push   edx
c00184b1:	0f b7 c0             	movzx  eax,ax
c00184b4:	50                   	push   eax
c00184b5:	e8 97 fd ff ff       	call   c0018251 <realToLinear(unsigned short, unsigned short)>
c00184ba:	5a                   	pop    edx
c00184bb:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00184be:	59                   	pop    ecx
c00184bf:	89 c7                	mov    edi,eax
c00184c1:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00184c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00184c8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00184cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00184d1:	0f b7 c5             	movzx  eax,bp
c00184d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00184d8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00184dc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00184e0:	e8 6c fd ff ff       	call   c0018251 <realToLinear(unsigned short, unsigned short)>
c00184e5:	5a                   	pop    edx
c00184e6:	59                   	pop    ecx
c00184e7:	b1 06                	mov    cl,0x6
c00184e9:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00184ee:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00184f3:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c00184f6:	80 fa 9d             	cmp    dl,0x9d
c00184f9:	0f 84 1d 02 00 00    	je     c001871c <vm8086FaultHandler(regs*)+0x281>
c00184ff:	0f 87 8e 00 00 00    	ja     c0018593 <vm8086FaultHandler(regs*)+0xf8>
c0018505:	80 fa 66             	cmp    dl,0x66
c0018508:	0f 84 89 01 00 00    	je     c0018697 <vm8086FaultHandler(regs*)+0x1fc>
c001850e:	77 44                	ja     c0018554 <vm8086FaultHandler(regs*)+0xb9>
c0018510:	80 fa 36             	cmp    dl,0x36
c0018513:	0f 84 74 01 00 00    	je     c001868d <vm8086FaultHandler(regs*)+0x1f2>
c0018519:	77 1a                	ja     c0018535 <vm8086FaultHandler(regs*)+0x9a>
c001851b:	80 fa 26             	cmp    dl,0x26
c001851e:	0f 84 4b 01 00 00    	je     c001866f <vm8086FaultHandler(regs*)+0x1d4>
c0018524:	80 fa 2e             	cmp    dl,0x2e
c0018527:	0f 85 4a 05 00 00    	jne    c0018a77 <vm8086FaultHandler(regs*)+0x5dc>
c001852d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018530:	31 c9                	xor    ecx,ecx
c0018532:	47                   	inc    edi
c0018533:	eb be                	jmp    c00184f3 <vm8086FaultHandler(regs*)+0x58>
c0018535:	80 fa 64             	cmp    dl,0x64
c0018538:	0f 84 3b 01 00 00    	je     c0018679 <vm8086FaultHandler(regs*)+0x1de>
c001853e:	0f 87 3f 01 00 00    	ja     c0018683 <vm8086FaultHandler(regs*)+0x1e8>
c0018544:	80 fa 3e             	cmp    dl,0x3e
c0018547:	0f 85 2a 05 00 00    	jne    c0018a77 <vm8086FaultHandler(regs*)+0x5dc>
c001854d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018550:	b1 01                	mov    cl,0x1
c0018552:	eb de                	jmp    c0018532 <vm8086FaultHandler(regs*)+0x97>
c0018554:	80 fa 6d             	cmp    dl,0x6d
c0018557:	0f 84 bf 02 00 00    	je     c001881c <vm8086FaultHandler(regs*)+0x381>
c001855d:	77 17                	ja     c0018576 <vm8086FaultHandler(regs*)+0xdb>
c001855f:	80 fa 67             	cmp    dl,0x67
c0018562:	0f 84 3c 01 00 00    	je     c00186a4 <vm8086FaultHandler(regs*)+0x209>
c0018568:	80 fa 6c             	cmp    dl,0x6c
c001856b:	0f 84 5d 02 00 00    	je     c00187ce <vm8086FaultHandler(regs*)+0x333>
c0018571:	e9 01 05 00 00       	jmp    c0018a77 <vm8086FaultHandler(regs*)+0x5dc>
c0018576:	80 fa 6f             	cmp    dl,0x6f
c0018579:	0f 84 8b 03 00 00    	je     c001890a <vm8086FaultHandler(regs*)+0x46f>
c001857f:	0f 82 0f 03 00 00    	jb     c0018894 <vm8086FaultHandler(regs*)+0x3f9>
c0018585:	80 fa 9c             	cmp    dl,0x9c
c0018588:	0f 84 23 01 00 00    	je     c00186b1 <vm8086FaultHandler(regs*)+0x216>
c001858e:	e9 e4 04 00 00       	jmp    c0018a77 <vm8086FaultHandler(regs*)+0x5dc>
c0018593:	80 fa ec             	cmp    dl,0xec
c0018596:	0f 84 7f 04 00 00    	je     c0018a1b <vm8086FaultHandler(regs*)+0x580>
c001859c:	77 7b                	ja     c0018619 <vm8086FaultHandler(regs*)+0x17e>
c001859e:	80 fa e4             	cmp    dl,0xe4
c00185a1:	0f 84 fe 03 00 00    	je     c00189a5 <vm8086FaultHandler(regs*)+0x50a>
c00185a7:	77 53                	ja     c00185fc <vm8086FaultHandler(regs*)+0x161>
c00185a9:	80 fa cd             	cmp    dl,0xcd
c00185ac:	0f 84 cd 01 00 00    	je     c001877f <vm8086FaultHandler(regs*)+0x2e4>
c00185b2:	80 fa cf             	cmp    dl,0xcf
c00185b5:	0f 85 bc 04 00 00    	jne    c0018a77 <vm8086FaultHandler(regs*)+0x5dc>
c00185bb:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00185be:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00185c1:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00185c5:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00185c8:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00185cc:	81 ca 00 02 02 00    	or     edx,0x20200
c00185d2:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00185d5:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00185d9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00185df:	66 c1 e8 09          	shr    ax,0x9
c00185e3:	83 e0 01             	and    eax,0x1
c00185e6:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00185e9:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00185ec:	83 c0 06             	add    eax,0x6
c00185ef:	25 ff ff 00 00       	and    eax,0xffff
c00185f4:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00185f7:	e9 77 04 00 00       	jmp    c0018a73 <vm8086FaultHandler(regs*)+0x5d8>
c00185fc:	80 fa e6             	cmp    dl,0xe6
c00185ff:	0f 84 ea 03 00 00    	je     c00189ef <vm8086FaultHandler(regs*)+0x554>
c0018605:	0f 82 b6 03 00 00    	jb     c00189c1 <vm8086FaultHandler(regs*)+0x526>
c001860b:	80 fa e7             	cmp    dl,0xe7
c001860e:	0f 84 f2 03 00 00    	je     c0018a06 <vm8086FaultHandler(regs*)+0x56b>
c0018614:	e9 5e 04 00 00       	jmp    c0018a77 <vm8086FaultHandler(regs*)+0x5dc>
c0018619:	80 fa ef             	cmp    dl,0xef
c001861c:	0f 84 3c 04 00 00    	je     c0018a5e <vm8086FaultHandler(regs*)+0x5c3>
c0018622:	77 28                	ja     c001864c <vm8086FaultHandler(regs*)+0x1b1>
c0018624:	80 fa ed             	cmp    dl,0xed
c0018627:	0f 84 0a 04 00 00    	je     c0018a37 <vm8086FaultHandler(regs*)+0x59c>
c001862d:	80 fa ee             	cmp    dl,0xee
c0018630:	0f 85 41 04 00 00    	jne    c0018a77 <vm8086FaultHandler(regs*)+0x5dc>
c0018636:	50                   	push   eax
c0018637:	50                   	push   eax
c0018638:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001863c:	50                   	push   eax
c001863d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018641:	50                   	push   eax
c0018642:	e8 00 fc ff ff       	call   c0018247 <outbv(unsigned short, unsigned char)>
c0018647:	e9 0a 04 00 00       	jmp    c0018a56 <vm8086FaultHandler(regs*)+0x5bb>
c001864c:	80 fa fa             	cmp    dl,0xfa
c001864f:	0f 84 5d 01 00 00    	je     c00187b2 <vm8086FaultHandler(regs*)+0x317>
c0018655:	80 fa fb             	cmp    dl,0xfb
c0018658:	0f 84 62 01 00 00    	je     c00187c0 <vm8086FaultHandler(regs*)+0x325>
c001865e:	80 fa f3             	cmp    dl,0xf3
c0018661:	0f 85 10 04 00 00    	jne    c0018a77 <vm8086FaultHandler(regs*)+0x5dc>
c0018667:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001866a:	e9 c3 fe ff ff       	jmp    c0018532 <vm8086FaultHandler(regs*)+0x97>
c001866f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018672:	b1 02                	mov    cl,0x2
c0018674:	e9 b9 fe ff ff       	jmp    c0018532 <vm8086FaultHandler(regs*)+0x97>
c0018679:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001867c:	b1 03                	mov    cl,0x3
c001867e:	e9 af fe ff ff       	jmp    c0018532 <vm8086FaultHandler(regs*)+0x97>
c0018683:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018686:	b1 04                	mov    cl,0x4
c0018688:	e9 a5 fe ff ff       	jmp    c0018532 <vm8086FaultHandler(regs*)+0x97>
c001868d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018690:	b1 05                	mov    cl,0x5
c0018692:	e9 9b fe ff ff       	jmp    c0018532 <vm8086FaultHandler(regs*)+0x97>
c0018697:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001869a:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001869f:	e9 8e fe ff ff       	jmp    c0018532 <vm8086FaultHandler(regs*)+0x97>
c00186a4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00186a7:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00186ac:	e9 81 fe ff ff       	jmp    c0018532 <vm8086FaultHandler(regs*)+0x97>
c00186b1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00186b4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00186b8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00186bd:	74 30                	je     c00186ef <vm8086FaultHandler(regs*)+0x254>
c00186bf:	83 e9 04             	sub    ecx,0x4
c00186c2:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00186c8:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00186ce:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00186d1:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00186d4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00186da:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c00186de:	0f 84 8c 03 00 00    	je     c0018a70 <vm8086FaultHandler(regs*)+0x5d5>
c00186e4:	80 ce 02             	or     dh,0x2
c00186e7:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00186ea:	e9 81 03 00 00       	jmp    c0018a70 <vm8086FaultHandler(regs*)+0x5d5>
c00186ef:	83 e9 02             	sub    ecx,0x2
c00186f2:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00186f8:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00186fb:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00186ff:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018705:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018709:	74 05                	je     c0018710 <vm8086FaultHandler(regs*)+0x275>
c001870b:	80 ce 02             	or     dh,0x2
c001870e:	eb 03                	jmp    c0018713 <vm8086FaultHandler(regs*)+0x278>
c0018710:	80 e6 fd             	and    dh,0xfd
c0018713:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018717:	e9 54 03 00 00       	jmp    c0018a70 <vm8086FaultHandler(regs*)+0x5d5>
c001871c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018721:	74 2a                	je     c001874d <vm8086FaultHandler(regs*)+0x2b2>
c0018723:	8b 10                	mov    edx,DWORD PTR [eax]
c0018725:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001872b:	81 ca 00 02 02 00    	or     edx,0x20200
c0018731:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018734:	8b 00                	mov    eax,DWORD PTR [eax]
c0018736:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001873c:	c1 e8 09             	shr    eax,0x9
c001873f:	83 e0 01             	and    eax,0x1
c0018742:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018745:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018748:	83 c0 04             	add    eax,0x4
c001874b:	eb 25                	jmp    c0018772 <vm8086FaultHandler(regs*)+0x2d7>
c001874d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018750:	81 ca 00 02 02 00    	or     edx,0x20200
c0018756:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018759:	66 8b 00             	mov    ax,WORD PTR [eax]
c001875c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018762:	66 c1 e8 09          	shr    ax,0x9
c0018766:	83 e0 01             	and    eax,0x1
c0018769:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001876c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001876f:	83 c0 02             	add    eax,0x2
c0018772:	25 ff ff 00 00       	and    eax,0xffff
c0018777:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001877a:	e9 f1 02 00 00       	jmp    c0018a70 <vm8086FaultHandler(regs*)+0x5d5>
c001877f:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018783:	3c ff                	cmp    al,0xff
c0018785:	75 10                	jne    c0018797 <vm8086FaultHandler(regs*)+0x2fc>
c0018787:	83 ec 0c             	sub    esp,0xc
c001878a:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001878d:	e8 e0 64 ff ff       	call   c000ec72 <terminateTask(int)>
c0018792:	e9 c2 02 00 00       	jmp    c0018a59 <vm8086FaultHandler(regs*)+0x5be>
c0018797:	83 ec 0c             	sub    esp,0xc
c001879a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001879e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00187a2:	57                   	push   edi
c00187a3:	50                   	push   eax
c00187a4:	53                   	push   ebx
c00187a5:	e8 f3 fb ff ff       	call   c001839d <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00187aa:	83 c4 20             	add    esp,0x20
c00187ad:	e9 c1 02 00 00       	jmp    c0018a73 <vm8086FaultHandler(regs*)+0x5d8>
c00187b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187b7:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00187bb:	e9 b0 02 00 00       	jmp    c0018a70 <vm8086FaultHandler(regs*)+0x5d5>
c00187c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187c5:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c00187c9:	e9 a2 02 00 00       	jmp    c0018a70 <vm8086FaultHandler(regs*)+0x5d5>
c00187ce:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00187d3:	74 0d                	je     c00187e2 <vm8086FaultHandler(regs*)+0x347>
c00187d5:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00187dc:	0f 87 e9 02 00 00    	ja     c0018acb <vm8086FaultHandler(regs*)+0x630>
c00187e2:	83 ec 0c             	sub    esp,0xc
c00187e5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00187e8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00187ec:	50                   	push   eax
c00187ed:	e8 4f fa ff ff       	call   c0018241 <inbv(unsigned short)>
c00187f2:	83 c4 0c             	add    esp,0xc
c00187f5:	0f b6 c0             	movzx  eax,al
c00187f8:	0f b7 c9             	movzx  ecx,cx
c00187fb:	50                   	push   eax
c00187fc:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0018800:	50                   	push   eax
c0018801:	51                   	push   ecx
c0018802:	e8 54 fc ff ff       	call   c001845b <writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0018807:	83 c4 10             	add    esp,0x10
c001880a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001880d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018811:	74 03                	je     c0018816 <vm8086FaultHandler(regs*)+0x37b>
c0018813:	48                   	dec    eax
c0018814:	eb 01                	jmp    c0018817 <vm8086FaultHandler(regs*)+0x37c>
c0018816:	40                   	inc    eax
c0018817:	0f b7 c0             	movzx  eax,ax
c001881a:	eb 70                	jmp    c001888c <vm8086FaultHandler(regs*)+0x3f1>
c001881c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001881f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0018822:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018827:	74 0c                	je     c0018835 <vm8086FaultHandler(regs*)+0x39a>
c0018829:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001882f:	0f 87 96 02 00 00    	ja     c0018acb <vm8086FaultHandler(regs*)+0x630>
c0018835:	0f b7 c9             	movzx  ecx,cx
c0018838:	0f b7 f6             	movzx  esi,si
c001883b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001883e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018843:	74 20                	je     c0018865 <vm8086FaultHandler(regs*)+0x3ca>
c0018845:	ed                   	in     eax,dx
c0018846:	55                   	push   ebp
c0018847:	50                   	push   eax
c0018848:	51                   	push   ecx
c0018849:	56                   	push   esi
c001884a:	e8 37 fc ff ff       	call   c0018486 <writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001884f:	83 c4 10             	add    esp,0x10
c0018852:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018855:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018859:	74 05                	je     c0018860 <vm8086FaultHandler(regs*)+0x3c5>
c001885b:	83 e8 04             	sub    eax,0x4
c001885e:	eb 27                	jmp    c0018887 <vm8086FaultHandler(regs*)+0x3ec>
c0018860:	83 c0 04             	add    eax,0x4
c0018863:	eb 22                	jmp    c0018887 <vm8086FaultHandler(regs*)+0x3ec>
c0018865:	66 ed                	in     ax,dx
c0018867:	0f b7 c0             	movzx  eax,ax
c001886a:	57                   	push   edi
c001886b:	50                   	push   eax
c001886c:	51                   	push   ecx
c001886d:	56                   	push   esi
c001886e:	e8 fd fb ff ff       	call   c0018470 <writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018873:	83 c4 10             	add    esp,0x10
c0018876:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018879:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001887d:	74 05                	je     c0018884 <vm8086FaultHandler(regs*)+0x3e9>
c001887f:	83 e8 02             	sub    eax,0x2
c0018882:	eb 03                	jmp    c0018887 <vm8086FaultHandler(regs*)+0x3ec>
c0018884:	83 c0 02             	add    eax,0x2
c0018887:	25 ff ff 00 00       	and    eax,0xffff
c001888c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001888f:	e9 dc 01 00 00       	jmp    c0018a70 <vm8086FaultHandler(regs*)+0x5d5>
c0018894:	49                   	dec    ecx
c0018895:	80 f9 05             	cmp    cl,0x5
c0018898:	77 24                	ja     c00188be <vm8086FaultHandler(regs*)+0x423>
c001889a:	0f b6 c9             	movzx  ecx,cl
c001889d:	ff 24 8d 60 a1 03 c0 	jmp    DWORD PTR [ecx*4-0x3ffc5ea0]
c00188a4:	0f b7 f5             	movzx  esi,bp
c00188a7:	eb 15                	jmp    c00188be <vm8086FaultHandler(regs*)+0x423>
c00188a9:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c00188ad:	eb 0f                	jmp    c00188be <vm8086FaultHandler(regs*)+0x423>
c00188af:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c00188b3:	eb 09                	jmp    c00188be <vm8086FaultHandler(regs*)+0x423>
c00188b5:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c00188b9:	eb 03                	jmp    c00188be <vm8086FaultHandler(regs*)+0x423>
c00188bb:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c00188be:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00188c1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00188c6:	74 0b                	je     c00188d3 <vm8086FaultHandler(regs*)+0x438>
c00188c8:	3d ff ff 00 00       	cmp    eax,0xffff
c00188cd:	0f 87 f8 01 00 00    	ja     c0018acb <vm8086FaultHandler(regs*)+0x630>
c00188d3:	0f b7 c0             	movzx  eax,ax
c00188d6:	52                   	push   edx
c00188d7:	52                   	push   edx
c00188d8:	50                   	push   eax
c00188d9:	56                   	push   esi
c00188da:	e8 48 fb ff ff       	call   c0018427 <readByteFromReal(unsigned short, unsigned short)>
c00188df:	59                   	pop    ecx
c00188e0:	0f b6 c0             	movzx  eax,al
c00188e3:	5e                   	pop    esi
c00188e4:	50                   	push   eax
c00188e5:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00188e9:	50                   	push   eax
c00188ea:	e8 58 f9 ff ff       	call   c0018247 <outbv(unsigned short, unsigned char)>
c00188ef:	83 c4 10             	add    esp,0x10
c00188f2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00188f5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00188f9:	74 03                	je     c00188fe <vm8086FaultHandler(regs*)+0x463>
c00188fb:	48                   	dec    eax
c00188fc:	eb 01                	jmp    c00188ff <vm8086FaultHandler(regs*)+0x464>
c00188fe:	40                   	inc    eax
c00188ff:	0f b7 c0             	movzx  eax,ax
c0018902:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018905:	e9 66 01 00 00       	jmp    c0018a70 <vm8086FaultHandler(regs*)+0x5d5>
c001890a:	49                   	dec    ecx
c001890b:	80 f9 05             	cmp    cl,0x5
c001890e:	77 1f                	ja     c001892f <vm8086FaultHandler(regs*)+0x494>
c0018910:	0f b6 c9             	movzx  ecx,cl
c0018913:	ff 24 8d 78 a1 03 c0 	jmp    DWORD PTR [ecx*4-0x3ffc5e88]
c001891a:	89 ee                	mov    esi,ebp
c001891c:	eb 11                	jmp    c001892f <vm8086FaultHandler(regs*)+0x494>
c001891e:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0018921:	eb 0c                	jmp    c001892f <vm8086FaultHandler(regs*)+0x494>
c0018923:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018926:	eb 07                	jmp    c001892f <vm8086FaultHandler(regs*)+0x494>
c0018928:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c001892b:	eb 02                	jmp    c001892f <vm8086FaultHandler(regs*)+0x494>
c001892d:	8b 33                	mov    esi,DWORD PTR [ebx]
c001892f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0018932:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018937:	74 0c                	je     c0018945 <vm8086FaultHandler(regs*)+0x4aa>
c0018939:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001893f:	0f 87 86 01 00 00    	ja     c0018acb <vm8086FaultHandler(regs*)+0x630>
c0018945:	0f b7 d6             	movzx  edx,si
c0018948:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001894b:	0f b7 c1             	movzx  eax,cx
c001894e:	81 e7 00 04 00 00    	and    edi,0x400
c0018954:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0018957:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001895c:	74 1d                	je     c001897b <vm8086FaultHandler(regs*)+0x4e0>
c001895e:	55                   	push   ebp
c001895f:	55                   	push   ebp
c0018960:	50                   	push   eax
c0018961:	52                   	push   edx
c0018962:	e8 e3 fa ff ff       	call   c001844a <readDwordFromReal(unsigned short, unsigned short)>
c0018967:	83 c4 10             	add    esp,0x10
c001896a:	89 f2                	mov    edx,esi
c001896c:	ef                   	out    dx,eax
c001896d:	85 ff                	test   edi,edi
c001896f:	74 05                	je     c0018976 <vm8086FaultHandler(regs*)+0x4db>
c0018971:	83 e9 04             	sub    ecx,0x4
c0018974:	eb 21                	jmp    c0018997 <vm8086FaultHandler(regs*)+0x4fc>
c0018976:	83 c1 04             	add    ecx,0x4
c0018979:	eb 1c                	jmp    c0018997 <vm8086FaultHandler(regs*)+0x4fc>
c001897b:	55                   	push   ebp
c001897c:	55                   	push   ebp
c001897d:	50                   	push   eax
c001897e:	52                   	push   edx
c001897f:	e8 b4 fa ff ff       	call   c0018438 <readWordFromReal(unsigned short, unsigned short)>
c0018984:	83 c4 10             	add    esp,0x10
c0018987:	89 f2                	mov    edx,esi
c0018989:	66 ef                	out    dx,ax
c001898b:	85 ff                	test   edi,edi
c001898d:	74 05                	je     c0018994 <vm8086FaultHandler(regs*)+0x4f9>
c001898f:	83 e9 02             	sub    ecx,0x2
c0018992:	eb 03                	jmp    c0018997 <vm8086FaultHandler(regs*)+0x4fc>
c0018994:	83 c1 02             	add    ecx,0x2
c0018997:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001899d:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00189a0:	e9 cb 00 00 00       	jmp    c0018a70 <vm8086FaultHandler(regs*)+0x5d5>
c00189a5:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00189ac:	83 ec 0c             	sub    esp,0xc
c00189af:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00189b3:	50                   	push   eax
c00189b4:	e8 88 f8 ff ff       	call   c0018241 <inbv(unsigned short)>
c00189b9:	0f b6 c0             	movzx  eax,al
c00189bc:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00189bf:	eb 3f                	jmp    c0018a00 <vm8086FaultHandler(regs*)+0x565>
c00189c1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00189c6:	74 07                	je     c00189cf <vm8086FaultHandler(regs*)+0x534>
c00189c8:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c00189cc:	ed                   	in     eax,dx
c00189cd:	eb 14                	jmp    c00189e3 <vm8086FaultHandler(regs*)+0x548>
c00189cf:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c00189d2:	66 31 c9             	xor    cx,cx
c00189d5:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00189d8:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c00189dc:	66 ed                	in     ax,dx
c00189de:	0f b7 c0             	movzx  eax,ax
c00189e1:	09 c8                	or     eax,ecx
c00189e3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00189e6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00189ea:	e9 84 00 00 00       	jmp    c0018a73 <vm8086FaultHandler(regs*)+0x5d8>
c00189ef:	52                   	push   edx
c00189f0:	52                   	push   edx
c00189f1:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00189f5:	50                   	push   eax
c00189f6:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00189fa:	50                   	push   eax
c00189fb:	e8 47 f8 ff ff       	call   c0018247 <outbv(unsigned short, unsigned char)>
c0018a00:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018a04:	eb 53                	jmp    c0018a59 <vm8086FaultHandler(regs*)+0x5be>
c0018a06:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018a09:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018a0d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018a12:	74 03                	je     c0018a17 <vm8086FaultHandler(regs*)+0x57c>
c0018a14:	ef                   	out    dx,eax
c0018a15:	eb cf                	jmp    c00189e6 <vm8086FaultHandler(regs*)+0x54b>
c0018a17:	66 ef                	out    dx,ax
c0018a19:	eb cb                	jmp    c00189e6 <vm8086FaultHandler(regs*)+0x54b>
c0018a1b:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018a22:	83 ec 0c             	sub    esp,0xc
c0018a25:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018a29:	50                   	push   eax
c0018a2a:	e8 12 f8 ff ff       	call   c0018241 <inbv(unsigned short)>
c0018a2f:	0f b6 c0             	movzx  eax,al
c0018a32:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018a35:	eb 1f                	jmp    c0018a56 <vm8086FaultHandler(regs*)+0x5bb>
c0018a37:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018a3a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018a3f:	74 03                	je     c0018a44 <vm8086FaultHandler(regs*)+0x5a9>
c0018a41:	ed                   	in     eax,dx
c0018a42:	eb 0d                	jmp    c0018a51 <vm8086FaultHandler(regs*)+0x5b6>
c0018a44:	66 ed                	in     ax,dx
c0018a46:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018a49:	0f b7 c0             	movzx  eax,ax
c0018a4c:	66 31 d2             	xor    dx,dx
c0018a4f:	09 d0                	or     eax,edx
c0018a51:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018a54:	eb 1a                	jmp    c0018a70 <vm8086FaultHandler(regs*)+0x5d5>
c0018a56:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018a59:	83 c4 10             	add    esp,0x10
c0018a5c:	eb 15                	jmp    c0018a73 <vm8086FaultHandler(regs*)+0x5d8>
c0018a5e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018a61:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018a64:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018a69:	74 03                	je     c0018a6e <vm8086FaultHandler(regs*)+0x5d3>
c0018a6b:	ef                   	out    dx,eax
c0018a6c:	eb 02                	jmp    c0018a70 <vm8086FaultHandler(regs*)+0x5d5>
c0018a6e:	66 ef                	out    dx,ax
c0018a70:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018a73:	b0 01                	mov    al,0x1
c0018a75:	eb 56                	jmp    c0018acd <vm8086FaultHandler(regs*)+0x632>
c0018a77:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0018a7b:	50                   	push   eax
c0018a7c:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0018a80:	50                   	push   eax
c0018a81:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0018a85:	50                   	push   eax
c0018a86:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0018a8a:	50                   	push   eax
c0018a8b:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018a8f:	50                   	push   eax
c0018a90:	52                   	push   edx
c0018a91:	52                   	push   edx
c0018a92:	68 33 a1 03 c0       	push   0xc003a133
c0018a97:	e8 34 41 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0018a9c:	83 c4 20             	add    esp,0x20
c0018a9f:	83 ec 0c             	sub    esp,0xc
c0018aa2:	6a 60                	push   0x60
c0018aa4:	e8 98 f7 ff ff       	call   c0018241 <inbv(unsigned short)>
c0018aa9:	83 c4 10             	add    esp,0x10
c0018aac:	3c 1c                	cmp    al,0x1c
c0018aae:	74 04                	je     c0018ab4 <vm8086FaultHandler(regs*)+0x619>
c0018ab0:	3c 5a                	cmp    al,0x5a
c0018ab2:	75 eb                	jne    c0018a9f <vm8086FaultHandler(regs*)+0x604>
c0018ab4:	3c 5a                	cmp    al,0x5a
c0018ab6:	74 04                	je     c0018abc <vm8086FaultHandler(regs*)+0x621>
c0018ab8:	3c 1c                	cmp    al,0x1c
c0018aba:	75 0f                	jne    c0018acb <vm8086FaultHandler(regs*)+0x630>
c0018abc:	83 ec 0c             	sub    esp,0xc
c0018abf:	6a 60                	push   0x60
c0018ac1:	e8 7b f7 ff ff       	call   c0018241 <inbv(unsigned short)>
c0018ac6:	83 c4 10             	add    esp,0x10
c0018ac9:	eb e9                	jmp    c0018ab4 <vm8086FaultHandler(regs*)+0x619>
c0018acb:	31 c0                	xor    eax,eax
c0018acd:	83 c4 1c             	add    esp,0x1c
c0018ad0:	5b                   	pop    ebx
c0018ad1:	5e                   	pop    esi
c0018ad2:	5f                   	pop    edi
c0018ad3:	5d                   	pop    ebp
c0018ad4:	c3                   	ret    
c0018ad5:	90                   	nop

c0018ad6 <FAT::getName()>:
c0018ad6:	b8 90 a1 03 c0       	mov    eax,0xc003a190
c0018adb:	c3                   	ret    

c0018adc <FAT::tell(void*, unsigned long long*)>:
c0018adc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018ae1:	75 06                	jne    c0018ae9 <FAT::tell(void*, unsigned long long*)+0xd>
c0018ae3:	b8 04 00 00 00       	mov    eax,0x4
c0018ae8:	c3                   	ret    
c0018ae9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018aee:	75 06                	jne    c0018af6 <FAT::tell(void*, unsigned long long*)+0x1a>
c0018af0:	b8 04 00 00 00       	mov    eax,0x4
c0018af5:	c3                   	ret    
c0018af6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018afa:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0018afd:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018b00:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018b04:	89 01                	mov    DWORD PTR [ecx],eax
c0018b06:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018b09:	b8 00 00 00 00       	mov    eax,0x0
c0018b0e:	c3                   	ret    
c0018b0f:	90                   	nop

c0018b10 <FAT::stat(void*, unsigned long long*)>:
c0018b10:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018b15:	75 06                	jne    c0018b1d <FAT::stat(void*, unsigned long long*)+0xd>
c0018b17:	b8 04 00 00 00       	mov    eax,0x4
c0018b1c:	c3                   	ret    
c0018b1d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018b22:	75 06                	jne    c0018b2a <FAT::stat(void*, unsigned long long*)+0x1a>
c0018b24:	b8 04 00 00 00       	mov    eax,0x4
c0018b29:	c3                   	ret    
c0018b2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b2e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018b31:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018b34:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018b38:	89 01                	mov    DWORD PTR [ecx],eax
c0018b3a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018b3d:	b8 00 00 00 00       	mov    eax,0x0
c0018b42:	c3                   	ret    
c0018b43:	90                   	nop

c0018b44 <FAT::exists(char const*)>:
c0018b44:	b0 00                	mov    al,0x0
c0018b46:	c3                   	ret    
c0018b47:	90                   	nop

c0018b48 <FAT::~FAT()>:
c0018b48:	83 ec 0c             	sub    esp,0xc
c0018b4b:	ba 14 a2 03 c0       	mov    edx,0xc003a214
c0018b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b54:	89 10                	mov    DWORD PTR [eax],edx
c0018b56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b5a:	83 ec 0c             	sub    esp,0xc
c0018b5d:	50                   	push   eax
c0018b5e:	e8 45 98 ff ff       	call   c00123a8 <Filesystem::~Filesystem()>
c0018b63:	83 c4 10             	add    esp,0x10
c0018b66:	90                   	nop
c0018b67:	83 c4 0c             	add    esp,0xc
c0018b6a:	c3                   	ret    
c0018b6b:	90                   	nop

c0018b6c <FAT::~FAT()>:
c0018b6c:	83 ec 0c             	sub    esp,0xc
c0018b6f:	83 ec 0c             	sub    esp,0xc
c0018b72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018b76:	e8 cd ff ff ff       	call   c0018b48 <FAT::~FAT()>
c0018b7b:	83 c4 10             	add    esp,0x10
c0018b7e:	83 ec 08             	sub    esp,0x8
c0018b81:	6a 08                	push   0x8
c0018b83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018b87:	e8 03 96 ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c0018b8c:	83 c4 10             	add    esp,0x10
c0018b8f:	83 c4 0c             	add    esp,0xc
c0018b92:	c3                   	ret    
c0018b93:	90                   	nop

c0018b94 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018b94:	83 ec 1c             	sub    esp,0x1c
c0018b97:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018b9e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018ba3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ba7:	8b 04 85 e0 c4 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3b20]
c0018bae:	83 f8 ff             	cmp    eax,0xffffffff
c0018bb1:	75 34                	jne    c0018be7 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0018bb3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018bb7:	88 c2                	mov    dl,al
c0018bb9:	a1 c0 c4 03 c0       	mov    eax,ds:0xc003c4c0
c0018bbe:	01 d0                	add    eax,edx
c0018bc0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018bc4:	8b 15 c0 c4 03 c0    	mov    edx,DWORD PTR ds:0xc003c4c0
c0018bca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018bce:	89 14 85 e0 c4 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3b20],edx
c0018bd5:	a1 c0 c4 03 c0       	mov    eax,ds:0xc003c4c0
c0018bda:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018bde:	89 14 85 60 c5 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3aa0],edx
c0018be5:	eb 17                	jmp    c0018bfe <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0018be7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018beb:	88 c2                	mov    dl,al
c0018bed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018bf1:	8b 04 85 e0 c4 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3b20]
c0018bf8:	01 d0                	add    eax,edx
c0018bfa:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018bfe:	83 ec 04             	sub    esp,0x4
c0018c01:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018c05:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018c09:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018c0d:	50                   	push   eax
c0018c0e:	e8 52 de fe ff       	call   c0006a65 <f_getlabel>
c0018c13:	83 c4 10             	add    esp,0x10
c0018c16:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c1a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018c1f:	75 07                	jne    c0018c28 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0018c21:	b8 00 00 00 00       	mov    eax,0x0
c0018c26:	eb 05                	jmp    c0018c2d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0018c28:	b8 01 00 00 00       	mov    eax,0x1
c0018c2d:	83 c4 1c             	add    esp,0x1c
c0018c30:	c3                   	ret    
c0018c31:	90                   	nop

c0018c32 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018c32:	57                   	push   edi
c0018c33:	83 ec 58             	sub    esp,0x58
c0018c36:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018c3e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018c42:	b9 0f 00 00 00       	mov    ecx,0xf
c0018c47:	b8 00 00 00 00       	mov    eax,0x0
c0018c4c:	fc                   	cld    
c0018c4d:	89 d7                	mov    edi,edx
c0018c4f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018c51:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018c55:	8b 04 85 e0 c4 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3b20]
c0018c5c:	83 f8 ff             	cmp    eax,0xffffffff
c0018c5f:	75 34                	jne    c0018c95 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0018c61:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018c65:	88 c2                	mov    dl,al
c0018c67:	a1 c0 c4 03 c0       	mov    eax,ds:0xc003c4c0
c0018c6c:	01 d0                	add    eax,edx
c0018c6e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018c72:	8b 15 c0 c4 03 c0    	mov    edx,DWORD PTR ds:0xc003c4c0
c0018c78:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018c7c:	89 14 85 e0 c4 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3b20],edx
c0018c83:	a1 c0 c4 03 c0       	mov    eax,ds:0xc003c4c0
c0018c88:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018c8c:	89 14 85 60 c5 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3aa0],edx
c0018c93:	eb 17                	jmp    c0018cac <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0018c95:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018c99:	88 c2                	mov    dl,al
c0018c9b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018c9f:	8b 04 85 e0 c4 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3b20]
c0018ca6:	01 d0                	add    eax,edx
c0018ca8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018cac:	83 ec 08             	sub    esp,0x8
c0018caf:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018cb3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018cb7:	50                   	push   eax
c0018cb8:	e8 a1 7a fe ff       	call   c000075e <strcat>
c0018cbd:	83 c4 10             	add    esp,0x10
c0018cc0:	83 ec 0c             	sub    esp,0xc
c0018cc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018cc7:	50                   	push   eax
c0018cc8:	e8 86 df fe ff       	call   c0006c53 <f_setlabel>
c0018ccd:	83 c4 10             	add    esp,0x10
c0018cd0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018cd4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018cd9:	75 07                	jne    c0018ce2 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0018cdb:	b8 00 00 00 00       	mov    eax,0x0
c0018ce0:	eb 05                	jmp    c0018ce7 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0018ce2:	b8 01 00 00 00       	mov    eax,0x1
c0018ce7:	83 c4 58             	add    esp,0x58
c0018cea:	5f                   	pop    edi
c0018ceb:	c3                   	ret    

c0018cec <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018cec:	83 ec 2c             	sub    esp,0x2c
c0018cef:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018cf7:	83 ec 08             	sub    esp,0x8
c0018cfa:	68 b4 a1 03 c0       	push   0xc003a1b4
c0018cff:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d03:	e8 f0 79 fe ff       	call   c00006f8 <strcmp>
c0018d08:	83 c4 10             	add    esp,0x10
c0018d0b:	85 c0                	test   eax,eax
c0018d0d:	0f 94 c0             	sete   al
c0018d10:	84 c0                	test   al,al
c0018d12:	74 0d                	je     c0018d21 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0018d14:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018d1c:	e9 a6 00 00 00       	jmp    c0018dc7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018d21:	83 ec 08             	sub    esp,0x8
c0018d24:	68 a6 a1 03 c0       	push   0xc003a1a6
c0018d29:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d2d:	e8 c6 79 fe ff       	call   c00006f8 <strcmp>
c0018d32:	83 c4 10             	add    esp,0x10
c0018d35:	85 c0                	test   eax,eax
c0018d37:	0f 94 c0             	sete   al
c0018d3a:	84 c0                	test   al,al
c0018d3c:	74 0a                	je     c0018d48 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0018d3e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018d46:	eb 7f                	jmp    c0018dc7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018d48:	83 ec 08             	sub    esp,0x8
c0018d4b:	68 ac a1 03 c0       	push   0xc003a1ac
c0018d50:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d54:	e8 9f 79 fe ff       	call   c00006f8 <strcmp>
c0018d59:	83 c4 10             	add    esp,0x10
c0018d5c:	85 c0                	test   eax,eax
c0018d5e:	0f 94 c0             	sete   al
c0018d61:	84 c0                	test   al,al
c0018d63:	74 0a                	je     c0018d6f <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0018d65:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018d6d:	eb 58                	jmp    c0018dc7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018d6f:	83 ec 08             	sub    esp,0x8
c0018d72:	68 cc f4 01 c0       	push   0xc001f4cc
c0018d77:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d7b:	e8 78 79 fe ff       	call   c00006f8 <strcmp>
c0018d80:	83 c4 10             	add    esp,0x10
c0018d83:	85 c0                	test   eax,eax
c0018d85:	0f 94 c0             	sete   al
c0018d88:	84 c0                	test   al,al
c0018d8a:	74 0a                	je     c0018d96 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0018d8c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018d94:	eb 31                	jmp    c0018dc7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018d96:	83 ec 08             	sub    esp,0x8
c0018d99:	68 b2 a1 03 c0       	push   0xc003a1b2
c0018d9e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018da2:	e8 51 79 fe ff       	call   c00006f8 <strcmp>
c0018da7:	83 c4 10             	add    esp,0x10
c0018daa:	85 c0                	test   eax,eax
c0018dac:	0f 94 c0             	sete   al
c0018daf:	84 c0                	test   al,al
c0018db1:	74 0a                	je     c0018dbd <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0018db3:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018dbb:	eb 0a                	jmp    c0018dc7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018dbd:	b8 08 00 00 00       	mov    eax,0x8
c0018dc2:	e9 04 01 00 00       	jmp    c0018ecb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0018dc7:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018dce:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018dd3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018dd7:	8b 04 85 e0 c4 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3b20]
c0018dde:	83 f8 ff             	cmp    eax,0xffffffff
c0018de1:	75 34                	jne    c0018e17 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0018de3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018de7:	88 c2                	mov    dl,al
c0018de9:	a1 c0 c4 03 c0       	mov    eax,ds:0xc003c4c0
c0018dee:	01 d0                	add    eax,edx
c0018df0:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018df4:	8b 15 c0 c4 03 c0    	mov    edx,DWORD PTR ds:0xc003c4c0
c0018dfa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018dfe:	89 14 85 e0 c4 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3b20],edx
c0018e05:	a1 c0 c4 03 c0       	mov    eax,ds:0xc003c4c0
c0018e0a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018e0e:	89 14 85 60 c5 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3aa0],edx
c0018e15:	eb 17                	jmp    c0018e2e <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0018e17:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018e1b:	88 c2                	mov    dl,al
c0018e1d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018e21:	8b 04 85 e0 c4 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3b20]
c0018e28:	01 d0                	add    eax,edx
c0018e2a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018e2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018e32:	88 04 24             	mov    BYTE PTR [esp],al
c0018e35:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018e39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018e3d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018e45:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018e4a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018e52:	83 ec 0c             	sub    esp,0xc
c0018e55:	68 00 20 00 00       	push   0x2000
c0018e5a:	e8 6c 43 ff ff       	call   c000d1cb <malloc>
c0018e5f:	83 c4 10             	add    esp,0x10
c0018e62:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018e66:	68 00 20 00 00       	push   0x2000
c0018e6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e6f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018e73:	50                   	push   eax
c0018e74:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018e78:	50                   	push   eax
c0018e79:	e8 20 e2 fe ff       	call   c000709e <f_mkfs>
c0018e7e:	83 c4 10             	add    esp,0x10
c0018e81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018e85:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018e8a:	75 07                	jne    c0018e93 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0018e8c:	b8 00 00 00 00       	mov    eax,0x0
c0018e91:	eb 38                	jmp    c0018ecb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0018e93:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018e98:	75 17                	jne    c0018eb1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0018e9a:	83 ec 0c             	sub    esp,0xc
c0018e9d:	68 e4 a1 03 c0       	push   0xc003a1e4
c0018ea2:	e8 29 3d ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0018ea7:	83 c4 10             	add    esp,0x10
c0018eaa:	b8 09 00 00 00       	mov    eax,0x9
c0018eaf:	eb 1a                	jmp    c0018ecb <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0018eb1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018eb5:	83 ec 08             	sub    esp,0x8
c0018eb8:	50                   	push   eax
c0018eb9:	68 b8 a1 03 c0       	push   0xc003a1b8
c0018ebe:	e8 0d 3d ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0018ec3:	83 c4 10             	add    esp,0x10
c0018ec6:	b8 01 00 00 00       	mov    eax,0x1
c0018ecb:	83 c4 2c             	add    esp,0x2c
c0018ece:	c3                   	ret    
c0018ecf:	90                   	nop

c0018ed0 <FAT::tryMount(LogicalDisk*, int)>:
c0018ed0:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0018ed6:	a1 c0 c4 03 c0       	mov    eax,ds:0xc003c4c0
c0018edb:	83 f8 14             	cmp    eax,0x14
c0018ede:	75 17                	jne    c0018ef7 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0018ee0:	83 ec 0c             	sub    esp,0xc
c0018ee3:	68 ca a1 03 c0       	push   0xc003a1ca
c0018ee8:	e8 01 3e ff ff       	call   c000ccee <panic(char const*)>
c0018eed:	83 c4 10             	add    esp,0x10
c0018ef0:	b0 00                	mov    al,0x0
c0018ef2:	e9 d7 01 00 00       	jmp    c00190ce <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0018ef7:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0018efe:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018f04:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018f0a:	3d 00 02 00 00       	cmp    eax,0x200
c0018f0f:	74 07                	je     c0018f18 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0018f11:	b0 00                	mov    al,0x0
c0018f13:	e9 b6 01 00 00       	jmp    c00190ce <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0018f18:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0018f20:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0018f27:	8b 04 85 e0 c4 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3b20]
c0018f2e:	83 f8 ff             	cmp    eax,0xffffffff
c0018f31:	74 07                	je     c0018f3a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0018f33:	b0 01                	mov    al,0x1
c0018f35:	e9 94 01 00 00       	jmp    c00190ce <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0018f3a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0018f44:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0018f4c:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0018f53:	88 c2                	mov    dl,al
c0018f55:	a1 c0 c4 03 c0       	mov    eax,ds:0xc003c4c0
c0018f5a:	01 d0                	add    eax,edx
c0018f5c:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0018f63:	8b 15 c0 c4 03 c0    	mov    edx,DWORD PTR ds:0xc003c4c0
c0018f69:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0018f70:	89 14 85 e0 c4 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3b20],edx
c0018f77:	a1 c0 c4 03 c0       	mov    eax,ds:0xc003c4c0
c0018f7c:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0018f83:	89 14 85 60 c5 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3aa0],edx
c0018f8a:	83 ec 0c             	sub    esp,0xc
c0018f8d:	68 54 02 00 00       	push   0x254
c0018f92:	e8 34 42 ff ff       	call   c000d1cb <malloc>
c0018f97:	83 c4 10             	add    esp,0x10
c0018f9a:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0018fa1:	83 ec 04             	sub    esp,0x4
c0018fa4:	6a 00                	push   0x0
c0018fa6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0018fad:	50                   	push   eax
c0018fae:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0018fb5:	e8 a2 bc fe ff       	call   c0004c5c <f_mount>
c0018fba:	83 c4 10             	add    esp,0x10
c0018fbd:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0018fc4:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0018fcc:	74 19                	je     c0018fe7 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0018fce:	83 ec 0c             	sub    esp,0xc
c0018fd1:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0018fd8:	e8 0e 42 ff ff       	call   c000d1eb <rfree>
c0018fdd:	83 c4 10             	add    esp,0x10
c0018fe0:	b0 00                	mov    al,0x0
c0018fe2:	e9 e7 00 00 00       	jmp    c00190ce <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0018fe7:	83 ec 04             	sub    esp,0x4
c0018fea:	68 00 01 00 00       	push   0x100
c0018fef:	6a 00                	push   0x0
c0018ff1:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0018ff8:	50                   	push   eax
c0018ff9:	e8 0a 76 fe ff       	call   c0000608 <memset>
c0018ffe:	83 c4 10             	add    esp,0x10
c0019001:	83 ec 08             	sub    esp,0x8
c0019004:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001900b:	50                   	push   eax
c001900c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019013:	50                   	push   eax
c0019014:	e8 45 77 fe ff       	call   c000075e <strcat>
c0019019:	83 c4 10             	add    esp,0x10
c001901c:	83 ec 08             	sub    esp,0x8
c001901f:	68 d8 a1 03 c0       	push   0xc003a1d8
c0019024:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001902b:	50                   	push   eax
c001902c:	e8 2d 77 fe ff       	call   c000075e <strcat>
c0019031:	83 c4 10             	add    esp,0x10
c0019034:	83 ec 04             	sub    esp,0x4
c0019037:	6a 01                	push   0x1
c0019039:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0019040:	50                   	push   eax
c0019041:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019045:	50                   	push   eax
c0019046:	e8 73 bc fe ff       	call   c0004cbe <f_open>
c001904b:	83 c4 10             	add    esp,0x10
c001904e:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019055:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001905c:	85 c0                	test   eax,eax
c001905e:	74 0a                	je     c001906a <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0019060:	78 2d                	js     c001908f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0019062:	83 e8 04             	sub    eax,0x4
c0019065:	83 f8 01             	cmp    eax,0x1
c0019068:	77 25                	ja     c001908f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001906a:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0019072:	83 ec 0c             	sub    esp,0xc
c0019075:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019079:	50                   	push   eax
c001907a:	e8 91 c7 fe ff       	call   c0005810 <f_close>
c001907f:	83 c4 10             	add    esp,0x10
c0019082:	90                   	nop
c0019083:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001908b:	74 3a                	je     c00190c7 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001908d:	eb 2d                	jmp    c00190bc <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001908f:	83 ec 0c             	sub    esp,0xc
c0019092:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019099:	e8 4d 41 ff ff       	call   c000d1eb <rfree>
c001909e:	83 c4 10             	add    esp,0x10
c00190a1:	83 ec 04             	sub    esp,0x4
c00190a4:	6a 00                	push   0x0
c00190a6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00190ad:	50                   	push   eax
c00190ae:	6a 00                	push   0x0
c00190b0:	e8 a7 bb fe ff       	call   c0004c5c <f_mount>
c00190b5:	83 c4 10             	add    esp,0x10
c00190b8:	b0 00                	mov    al,0x0
c00190ba:	eb 12                	jmp    c00190ce <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00190bc:	a1 c0 c4 03 c0       	mov    eax,ds:0xc003c4c0
c00190c1:	40                   	inc    eax
c00190c2:	a3 c0 c4 03 c0       	mov    ds:0xc003c4c0,eax
c00190c7:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00190ce:	81 c4 6c 03 00 00    	add    esp,0x36c
c00190d4:	c3                   	ret    
c00190d5:	90                   	nop

c00190d6 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00190d6:	81 ec 3c 02 00 00    	sub    esp,0x23c
c00190dc:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c00190e4:	74 0a                	je     c00190f0 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c00190e6:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c00190ee:	75 0a                	jne    c00190fa <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c00190f0:	b8 04 00 00 00       	mov    eax,0x4
c00190f5:	e9 dc 00 00 00       	jmp    c00191d6 <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c00190fa:	83 ec 08             	sub    esp,0x8
c00190fd:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019104:	50                   	push   eax
c0019105:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001910c:	e8 09 cd fe ff       	call   c0005e1a <f_readdir>
c0019111:	83 c4 10             	add    esp,0x10
c0019114:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001911b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019122:	83 ec 0c             	sub    esp,0xc
c0019125:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001912c:	83 c0 1a             	add    eax,0x1a
c001912f:	50                   	push   eax
c0019130:	e8 f0 74 fe ff       	call   c0000625 <strlen>
c0019135:	83 c4 10             	add    esp,0x10
c0019138:	ba 00 00 00 00       	mov    edx,0x0
c001913d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019141:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0019145:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001914c:	0f b6 c0             	movzx  eax,al
c001914f:	83 e0 10             	and    eax,0x10
c0019152:	74 07                	je     c001915b <FAT::readDir(void*, unsigned long, void*, int*)+0x85>
c0019154:	b8 02 00 00 00       	mov    eax,0x2
c0019159:	eb 05                	jmp    c0019160 <FAT::readDir(void*, unsigned long, void*, int*)+0x8a>
c001915b:	b8 01 00 00 00       	mov    eax,0x1
c0019160:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019164:	83 ec 08             	sub    esp,0x8
c0019167:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001916e:	83 c0 1a             	add    eax,0x1a
c0019171:	50                   	push   eax
c0019172:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019176:	83 c0 10             	add    eax,0x10
c0019179:	50                   	push   eax
c001917a:	e8 28 75 fe ff       	call   c00006a7 <strcpy>
c001917f:	83 c4 10             	add    esp,0x10
c0019182:	83 ec 04             	sub    esp,0x4
c0019185:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001918c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019190:	50                   	push   eax
c0019191:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0019198:	e8 35 74 fe ff       	call   c00005d2 <memcpy>
c001919d:	83 c4 10             	add    esp,0x10
c00191a0:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c00191a7:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00191ad:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c00191b4:	84 c0                	test   al,al
c00191b6:	75 07                	jne    c00191bf <FAT::readDir(void*, unsigned long, void*, int*)+0xe9>
c00191b8:	b8 07 00 00 00       	mov    eax,0x7
c00191bd:	eb 17                	jmp    c00191d6 <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c00191bf:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c00191c6:	85 c0                	test   eax,eax
c00191c8:	75 07                	jne    c00191d1 <FAT::readDir(void*, unsigned long, void*, int*)+0xfb>
c00191ca:	b8 00 00 00 00       	mov    eax,0x0
c00191cf:	eb 05                	jmp    c00191d6 <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c00191d1:	b8 01 00 00 00       	mov    eax,0x1
c00191d6:	81 c4 3c 02 00 00    	add    esp,0x23c
c00191dc:	c3                   	ret    
c00191dd:	90                   	nop

c00191de <FAT::read(void*, unsigned long, void*, int*)>:
c00191de:	83 ec 1c             	sub    esp,0x1c
c00191e1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00191e6:	74 07                	je     c00191ef <FAT::read(void*, unsigned long, void*, int*)+0x11>
c00191e8:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00191ed:	75 07                	jne    c00191f6 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00191ef:	b8 04 00 00 00       	mov    eax,0x4
c00191f4:	eb 3d                	jmp    c0019233 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00191f6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00191fa:	50                   	push   eax
c00191fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00191ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019203:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019207:	e8 ee be fe ff       	call   c00050fa <f_read>
c001920c:	83 c4 10             	add    esp,0x10
c001920f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019213:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019217:	89 c2                	mov    edx,eax
c0019219:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001921d:	89 10                	mov    DWORD PTR [eax],edx
c001921f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019223:	85 c0                	test   eax,eax
c0019225:	75 07                	jne    c001922e <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0019227:	b8 00 00 00 00       	mov    eax,0x0
c001922c:	eb 05                	jmp    c0019233 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001922e:	b8 01 00 00 00       	mov    eax,0x1
c0019233:	83 c4 1c             	add    esp,0x1c
c0019236:	c3                   	ret    
c0019237:	90                   	nop

c0019238 <FAT::write(void*, unsigned long, void*, int*)>:
c0019238:	83 ec 1c             	sub    esp,0x1c
c001923b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019240:	74 07                	je     c0019249 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0019242:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019247:	75 07                	jne    c0019250 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0019249:	b8 04 00 00 00       	mov    eax,0x4
c001924e:	eb 3d                	jmp    c001928d <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0019250:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019254:	50                   	push   eax
c0019255:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019259:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001925d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019261:	e8 14 c1 fe ff       	call   c000537a <f_write>
c0019266:	83 c4 10             	add    esp,0x10
c0019269:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001926d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019271:	89 c2                	mov    edx,eax
c0019273:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019277:	89 10                	mov    DWORD PTR [eax],edx
c0019279:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001927d:	85 c0                	test   eax,eax
c001927f:	75 07                	jne    c0019288 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0019281:	b8 00 00 00 00       	mov    eax,0x0
c0019286:	eb 05                	jmp    c001928d <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0019288:	b8 01 00 00 00       	mov    eax,0x1
c001928d:	83 c4 1c             	add    esp,0x1c
c0019290:	c3                   	ret    
c0019291:	90                   	nop

c0019292 <FAT::close(void*)>:
c0019292:	83 ec 1c             	sub    esp,0x1c
c0019295:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001929a:	75 07                	jne    c00192a3 <FAT::close(void*)+0x11>
c001929c:	b8 04 00 00 00       	mov    eax,0x4
c00192a1:	eb 36                	jmp    c00192d9 <FAT::close(void*)+0x47>
c00192a3:	83 ec 0c             	sub    esp,0xc
c00192a6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00192aa:	e8 61 c5 fe ff       	call   c0005810 <f_close>
c00192af:	83 c4 10             	add    esp,0x10
c00192b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00192b6:	83 ec 0c             	sub    esp,0xc
c00192b9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00192bd:	e8 19 3f ff ff       	call   c000d1db <free>
c00192c2:	83 c4 10             	add    esp,0x10
c00192c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00192c9:	85 c0                	test   eax,eax
c00192cb:	75 07                	jne    c00192d4 <FAT::close(void*)+0x42>
c00192cd:	b8 00 00 00 00       	mov    eax,0x0
c00192d2:	eb 05                	jmp    c00192d9 <FAT::close(void*)+0x47>
c00192d4:	b8 01 00 00 00       	mov    eax,0x1
c00192d9:	83 c4 1c             	add    esp,0x1c
c00192dc:	c3                   	ret    
c00192dd:	90                   	nop

c00192de <FAT::closeDir(void*)>:
c00192de:	83 ec 1c             	sub    esp,0x1c
c00192e1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00192e6:	75 07                	jne    c00192ef <FAT::closeDir(void*)+0x11>
c00192e8:	b8 04 00 00 00       	mov    eax,0x4
c00192ed:	eb 36                	jmp    c0019325 <FAT::closeDir(void*)+0x47>
c00192ef:	83 ec 0c             	sub    esp,0xc
c00192f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00192f6:	e8 fd ca fe ff       	call   c0005df8 <f_closedir>
c00192fb:	83 c4 10             	add    esp,0x10
c00192fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019302:	83 ec 0c             	sub    esp,0xc
c0019305:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019309:	e8 cd 3e ff ff       	call   c000d1db <free>
c001930e:	83 c4 10             	add    esp,0x10
c0019311:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019315:	85 c0                	test   eax,eax
c0019317:	75 07                	jne    c0019320 <FAT::closeDir(void*)+0x42>
c0019319:	b8 00 00 00 00       	mov    eax,0x0
c001931e:	eb 05                	jmp    c0019325 <FAT::closeDir(void*)+0x47>
c0019320:	b8 01 00 00 00       	mov    eax,0x1
c0019325:	83 c4 1c             	add    esp,0x1c
c0019328:	c3                   	ret    
c0019329:	90                   	nop

c001932a <FAT::seek(void*, unsigned long long)>:
c001932a:	83 ec 2c             	sub    esp,0x2c
c001932d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019331:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019335:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019339:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001933d:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019342:	75 07                	jne    c001934b <FAT::seek(void*, unsigned long long)+0x21>
c0019344:	b8 04 00 00 00       	mov    eax,0x4
c0019349:	eb 2f                	jmp    c001937a <FAT::seek(void*, unsigned long long)+0x50>
c001934b:	83 ec 04             	sub    esp,0x4
c001934e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019352:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019356:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001935a:	e8 e0 c4 fe ff       	call   c000583f <f_lseek>
c001935f:	83 c4 10             	add    esp,0x10
c0019362:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019366:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001936a:	85 c0                	test   eax,eax
c001936c:	75 07                	jne    c0019375 <FAT::seek(void*, unsigned long long)+0x4b>
c001936e:	b8 00 00 00 00       	mov    eax,0x0
c0019373:	eb 05                	jmp    c001937a <FAT::seek(void*, unsigned long long)+0x50>
c0019375:	b8 01 00 00 00       	mov    eax,0x1
c001937a:	83 c4 2c             	add    esp,0x2c
c001937d:	c3                   	ret    

c001937e <fatWrapperReadDisk>:
c001937e:	83 ec 1c             	sub    esp,0x1c
c0019381:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019385:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019389:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001938d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019390:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019394:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019398:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001939d:	8b 04 85 60 c0 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3fa0]
c00193a4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00193a8:	83 ec 0c             	sub    esp,0xc
c00193ab:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00193af:	52                   	push   edx
c00193b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00193b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00193b8:	50                   	push   eax
c00193b9:	e8 8e bb ff ff       	call   c0014f4c <LogicalDisk::read(unsigned long long, int, void*)>
c00193be:	83 c4 20             	add    esp,0x20
c00193c1:	83 c4 1c             	add    esp,0x1c
c00193c4:	c3                   	ret    

c00193c5 <fatWrapperWriteDisk>:
c00193c5:	83 ec 1c             	sub    esp,0x1c
c00193c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00193cc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00193d0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00193d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00193d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00193db:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00193df:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00193e4:	8b 04 85 60 c0 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3fa0]
c00193eb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00193ef:	83 ec 0c             	sub    esp,0xc
c00193f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00193f6:	52                   	push   edx
c00193f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00193fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00193ff:	50                   	push   eax
c0019400:	e8 b3 bb ff ff       	call   c0014fb8 <LogicalDisk::write(unsigned long long, int, void*)>
c0019405:	83 c4 20             	add    esp,0x20
c0019408:	83 c4 1c             	add    esp,0x1c
c001940b:	c3                   	ret    

c001940c <fatWrapperIoctl>:
c001940c:	53                   	push   ebx
c001940d:	83 ec 28             	sub    esp,0x28
c0019410:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019414:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019418:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001941c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019420:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0019425:	75 31                	jne    c0019458 <fatWrapperIoctl+0x4c>
c0019427:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001942b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001942f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019434:	8b 04 85 60 c0 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3fa0]
c001943b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019441:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019447:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001944b:	66 89 02             	mov    WORD PTR [edx],ax
c001944e:	b8 00 00 00 00       	mov    eax,0x0
c0019453:	e9 b2 00 00 00       	jmp    c001950a <fatWrapperIoctl+0xfe>
c0019458:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001945d:	75 6a                	jne    c00194c9 <fatWrapperIoctl+0xbd>
c001945f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019463:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019467:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001946c:	8b 04 85 60 c0 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3fa0]
c0019473:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019479:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001947f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019485:	89 c8                	mov    eax,ecx
c0019487:	89 da                	mov    edx,ebx
c0019489:	0f a4 c2 0a          	shld   edx,eax,0xa
c001948d:	c1 e0 0a             	shl    eax,0xa
c0019490:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019495:	8b 0c 8d 60 c0 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3fa0]
c001949c:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00194a2:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00194a8:	89 cb                	mov    ebx,ecx
c00194aa:	c1 fb 1f             	sar    ebx,0x1f
c00194ad:	53                   	push   ebx
c00194ae:	51                   	push   ecx
c00194af:	52                   	push   edx
c00194b0:	50                   	push   eax
c00194b1:	e8 66 4f 00 00       	call   c001e41c <__udivdi3>
c00194b6:	83 c4 10             	add    esp,0x10
c00194b9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00194bd:	89 01                	mov    DWORD PTR [ecx],eax
c00194bf:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00194c2:	b8 00 00 00 00       	mov    eax,0x0
c00194c7:	eb 41                	jmp    c001950a <fatWrapperIoctl+0xfe>
c00194c9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00194ce:	75 07                	jne    c00194d7 <fatWrapperIoctl+0xcb>
c00194d0:	b8 00 00 00 00       	mov    eax,0x0
c00194d5:	eb 33                	jmp    c001950a <fatWrapperIoctl+0xfe>
c00194d7:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00194dc:	75 19                	jne    c00194f7 <fatWrapperIoctl+0xeb>
c00194de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00194e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00194e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00194ea:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00194f0:	b8 00 00 00 00       	mov    eax,0x0
c00194f5:	eb 13                	jmp    c001950a <fatWrapperIoctl+0xfe>
c00194f7:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00194fc:	75 07                	jne    c0019505 <fatWrapperIoctl+0xf9>
c00194fe:	b8 00 00 00 00       	mov    eax,0x0
c0019503:	eb 05                	jmp    c001950a <fatWrapperIoctl+0xfe>
c0019505:	b8 04 00 00 00       	mov    eax,0x4
c001950a:	83 c4 28             	add    esp,0x28
c001950d:	5b                   	pop    ebx
c001950e:	c3                   	ret    
c001950f:	90                   	nop

c0019510 <FAT::FAT()>:
c0019510:	83 ec 1c             	sub    esp,0x1c
c0019513:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019517:	83 ec 0c             	sub    esp,0xc
c001951a:	50                   	push   eax
c001951b:	e8 64 8e ff ff       	call   c0012384 <Filesystem::Filesystem()>
c0019520:	83 c4 10             	add    esp,0x10
c0019523:	ba 14 a2 03 c0       	mov    edx,0xc003a214
c0019528:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001952c:	89 10                	mov    DWORD PTR [eax],edx
c001952e:	c7 05 c0 c4 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c4c0,0x0
c0019538:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019540:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019545:	7f 15                	jg     c001955c <FAT::FAT()+0x4c>
c0019547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001954b:	c7 04 85 e0 c4 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffc3b20],0xffffffff
c0019556:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001955a:	eb e4                	jmp    c0019540 <FAT::FAT()+0x30>
c001955c:	90                   	nop
c001955d:	83 c4 1c             	add    esp,0x1c
c0019560:	c3                   	ret    
c0019561:	90                   	nop

c0019562 <FAT::fixFilepath(char*)>:
c0019562:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019566:	8a 00                	mov    al,BYTE PTR [eax]
c0019568:	3c 40                	cmp    al,0x40
c001956a:	7e 2c                	jle    c0019598 <FAT::fixFilepath(char*)+0x36>
c001956c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019570:	8a 00                	mov    al,BYTE PTR [eax]
c0019572:	83 e8 41             	sub    eax,0x41
c0019575:	88 c2                	mov    dl,al
c0019577:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001957b:	88 10                	mov    BYTE PTR [eax],dl
c001957d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019581:	8a 00                	mov    al,BYTE PTR [eax]
c0019583:	0f be c0             	movsx  eax,al
c0019586:	8b 04 85 e0 c4 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3b20]
c001958d:	83 c0 30             	add    eax,0x30
c0019590:	88 c2                	mov    dl,al
c0019592:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019596:	88 10                	mov    BYTE PTR [eax],dl
c0019598:	90                   	nop
c0019599:	c3                   	ret    

c001959a <FAT::open(char const*, void**, FileOpenMode)>:
c001959a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00195a0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00195a8:	74 0a                	je     c00195b4 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00195aa:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00195b2:	75 0a                	jne    c00195be <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00195b4:	b8 04 00 00 00       	mov    eax,0x4
c00195b9:	e9 fd 00 00 00       	jmp    c00196bb <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00195be:	83 ec 08             	sub    esp,0x8
c00195c1:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00195c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00195cc:	50                   	push   eax
c00195cd:	e8 d5 70 fe ff       	call   c00006a7 <strcpy>
c00195d2:	83 c4 10             	add    esp,0x10
c00195d5:	83 ec 08             	sub    esp,0x8
c00195d8:	8d 44 24 10          	lea    eax,[esp+0x10]
c00195dc:	50                   	push   eax
c00195dd:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00195e4:	e8 79 ff ff ff       	call   c0019562 <FAT::fixFilepath(char*)>
c00195e9:	83 c4 10             	add    esp,0x10
c00195ec:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00195f4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00195fb:	83 e0 01             	and    eax,0x1
c00195fe:	74 08                	je     c0019608 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0019600:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0019608:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001960f:	83 e0 04             	and    eax,0x4
c0019612:	74 10                	je     c0019624 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0019614:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001961c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019624:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001962b:	83 e0 02             	and    eax,0x2
c001962e:	74 08                	je     c0019638 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0019630:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019638:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001963f:	83 e0 08             	and    eax,0x8
c0019642:	74 08                	je     c001964c <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0019644:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001964c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019653:	83 e0 10             	and    eax,0x10
c0019656:	74 08                	je     c0019660 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0019658:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0019660:	83 ec 0c             	sub    esp,0xc
c0019663:	68 50 02 00 00       	push   0x250
c0019668:	e8 5e 3b ff ff       	call   c000d1cb <malloc>
c001966d:	83 c4 10             	add    esp,0x10
c0019670:	89 c2                	mov    edx,eax
c0019672:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019679:	89 10                	mov    DWORD PTR [eax],edx
c001967b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019683:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001968a:	8b 00                	mov    eax,DWORD PTR [eax]
c001968c:	83 ec 04             	sub    esp,0x4
c001968f:	52                   	push   edx
c0019690:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019694:	52                   	push   edx
c0019695:	50                   	push   eax
c0019696:	e8 23 b6 fe ff       	call   c0004cbe <f_open>
c001969b:	83 c4 10             	add    esp,0x10
c001969e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00196a5:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00196ad:	74 07                	je     c00196b6 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00196af:	b8 01 00 00 00       	mov    eax,0x1
c00196b4:	eb 05                	jmp    c00196bb <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00196b6:	b8 00 00 00 00       	mov    eax,0x0
c00196bb:	81 c4 1c 01 00 00    	add    esp,0x11c
c00196c1:	c3                   	ret    

c00196c2 <FAT::openDir(char const*, void**)>:
c00196c2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00196c8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00196d0:	74 0a                	je     c00196dc <FAT::openDir(char const*, void**)+0x1a>
c00196d2:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00196da:	75 07                	jne    c00196e3 <FAT::openDir(char const*, void**)+0x21>
c00196dc:	b8 04 00 00 00       	mov    eax,0x4
c00196e1:	eb 7d                	jmp    c0019760 <FAT::openDir(char const*, void**)+0x9e>
c00196e3:	83 ec 08             	sub    esp,0x8
c00196e6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00196ed:	8d 44 24 18          	lea    eax,[esp+0x18]
c00196f1:	50                   	push   eax
c00196f2:	e8 b0 6f fe ff       	call   c00006a7 <strcpy>
c00196f7:	83 c4 10             	add    esp,0x10
c00196fa:	83 ec 08             	sub    esp,0x8
c00196fd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019701:	50                   	push   eax
c0019702:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019709:	e8 54 fe ff ff       	call   c0019562 <FAT::fixFilepath(char*)>
c001970e:	83 c4 10             	add    esp,0x10
c0019711:	83 ec 0c             	sub    esp,0xc
c0019714:	6a 4c                	push   0x4c
c0019716:	e8 b0 3a ff ff       	call   c000d1cb <malloc>
c001971b:	83 c4 10             	add    esp,0x10
c001971e:	89 c2                	mov    edx,eax
c0019720:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019727:	89 10                	mov    DWORD PTR [eax],edx
c0019729:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019730:	8b 00                	mov    eax,DWORD PTR [eax]
c0019732:	83 ec 08             	sub    esp,0x8
c0019735:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019739:	52                   	push   edx
c001973a:	50                   	push   eax
c001973b:	e8 b6 c5 fe ff       	call   c0005cf6 <f_opendir>
c0019740:	83 c4 10             	add    esp,0x10
c0019743:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001974a:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019752:	74 07                	je     c001975b <FAT::openDir(char const*, void**)+0x99>
c0019754:	b8 01 00 00 00       	mov    eax,0x1
c0019759:	eb 05                	jmp    c0019760 <FAT::openDir(char const*, void**)+0x9e>
c001975b:	b8 00 00 00 00       	mov    eax,0x0
c0019760:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019766:	c3                   	ret    
c0019767:	90                   	nop

c0019768 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019768:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001976e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019776:	75 0a                	jne    c0019782 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0019778:	b8 04 00 00 00       	mov    eax,0x4
c001977d:	e9 c9 00 00 00       	jmp    c001984b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019782:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001978a:	75 0a                	jne    c0019796 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001978c:	b8 04 00 00 00       	mov    eax,0x4
c0019791:	e9 b5 00 00 00       	jmp    c001984b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019796:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001979e:	75 0a                	jne    c00197aa <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00197a0:	b8 04 00 00 00       	mov    eax,0x4
c00197a5:	e9 a1 00 00 00       	jmp    c001984b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00197aa:	83 ec 08             	sub    esp,0x8
c00197ad:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00197b4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00197bb:	50                   	push   eax
c00197bc:	e8 e6 6e fe ff       	call   c00006a7 <strcpy>
c00197c1:	83 c4 10             	add    esp,0x10
c00197c4:	83 ec 08             	sub    esp,0x8
c00197c7:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00197ce:	50                   	push   eax
c00197cf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00197d6:	e8 87 fd ff ff       	call   c0019562 <FAT::fixFilepath(char*)>
c00197db:	83 c4 10             	add    esp,0x10
c00197de:	83 ec 08             	sub    esp,0x8
c00197e1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00197e5:	50                   	push   eax
c00197e6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00197ed:	50                   	push   eax
c00197ee:	e8 c2 c6 fe ff       	call   c0005eb5 <f_stat>
c00197f3:	83 c4 10             	add    esp,0x10
c00197f6:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00197fd:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019804:	85 c0                	test   eax,eax
c0019806:	74 07                	je     c001980f <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0019808:	83 f8 04             	cmp    eax,0x4
c001980b:	74 32                	je     c001983f <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c001980d:	eb 37                	jmp    c0019846 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c001980f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019813:	0f b6 c0             	movzx  eax,al
c0019816:	83 e0 10             	and    eax,0x10
c0019819:	0f 95 c2             	setne  dl
c001981c:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019823:	88 10                	mov    BYTE PTR [eax],dl
c0019825:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019828:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001982c:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019833:	89 01                	mov    DWORD PTR [ecx],eax
c0019835:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019838:	b8 00 00 00 00       	mov    eax,0x0
c001983d:	eb 0c                	jmp    c001984b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001983f:	b8 02 00 00 00       	mov    eax,0x2
c0019844:	eb 05                	jmp    c001984b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019846:	b8 01 00 00 00       	mov    eax,0x1
c001984b:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019851:	c3                   	ret    

c0019852 <FAT::unlink(char const*)>:
c0019852:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019858:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019860:	75 07                	jne    c0019869 <FAT::unlink(char const*)+0x17>
c0019862:	b8 04 00 00 00       	mov    eax,0x4
c0019867:	eb 5c                	jmp    c00198c5 <FAT::unlink(char const*)+0x73>
c0019869:	83 ec 08             	sub    esp,0x8
c001986c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019873:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019877:	50                   	push   eax
c0019878:	e8 2a 6e fe ff       	call   c00006a7 <strcpy>
c001987d:	83 c4 10             	add    esp,0x10
c0019880:	83 ec 08             	sub    esp,0x8
c0019883:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019887:	50                   	push   eax
c0019888:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001988f:	e8 ce fc ff ff       	call   c0019562 <FAT::fixFilepath(char*)>
c0019894:	83 c4 10             	add    esp,0x10
c0019897:	83 ec 0c             	sub    esp,0xc
c001989a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001989e:	50                   	push   eax
c001989f:	e8 63 c9 fe ff       	call   c0006207 <f_unlink>
c00198a4:	83 c4 10             	add    esp,0x10
c00198a7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00198ae:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00198b5:	85 c0                	test   eax,eax
c00198b7:	75 07                	jne    c00198c0 <FAT::unlink(char const*)+0x6e>
c00198b9:	b8 00 00 00 00       	mov    eax,0x0
c00198be:	eb 05                	jmp    c00198c5 <FAT::unlink(char const*)+0x73>
c00198c0:	b8 01 00 00 00       	mov    eax,0x1
c00198c5:	81 c4 1c 01 00 00    	add    esp,0x11c
c00198cb:	c3                   	ret    

c00198cc <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00198cc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00198d2:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00198d9:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00198e0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00198e4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00198e8:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00198f0:	75 0a                	jne    c00198fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00198f2:	b8 04 00 00 00       	mov    eax,0x4
c00198f7:	e9 1c 01 00 00       	jmp    c0019a18 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00198fc:	83 ec 08             	sub    esp,0x8
c00198ff:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019906:	8d 44 24 24          	lea    eax,[esp+0x24]
c001990a:	50                   	push   eax
c001990b:	e8 97 6d fe ff       	call   c00006a7 <strcpy>
c0019910:	83 c4 10             	add    esp,0x10
c0019913:	83 ec 08             	sub    esp,0x8
c0019916:	8d 44 24 20          	lea    eax,[esp+0x20]
c001991a:	50                   	push   eax
c001991b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019922:	e8 3b fc ff ff       	call   c0019562 <FAT::fixFilepath(char*)>
c0019927:	83 c4 10             	add    esp,0x10
c001992a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019932:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001993a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001993f:	83 e0 01             	and    eax,0x1
c0019942:	74 08                	je     c001994c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0019944:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001994c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019951:	83 e0 02             	and    eax,0x2
c0019954:	74 08                	je     c001995e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0019956:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001995e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019963:	83 e0 04             	and    eax,0x4
c0019966:	74 08                	je     c0019970 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0019968:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0019970:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019975:	83 e0 08             	and    eax,0x8
c0019978:	74 08                	je     c0019982 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001997a:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0019982:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019987:	83 e0 01             	and    eax,0x1
c001998a:	74 08                	je     c0019994 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001998c:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0019994:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019999:	83 e0 02             	and    eax,0x2
c001999c:	74 08                	je     c00199a6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001999e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00199a6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00199ab:	83 e0 04             	and    eax,0x4
c00199ae:	74 08                	je     c00199b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00199b0:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00199b8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00199bd:	83 e0 08             	and    eax,0x8
c00199c0:	74 08                	je     c00199ca <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00199c2:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00199ca:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00199d1:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00199d8:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00199e0:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00199e8:	83 ec 04             	sub    esp,0x4
c00199eb:	52                   	push   edx
c00199ec:	50                   	push   eax
c00199ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00199f1:	50                   	push   eax
c00199f2:	e8 b2 ce fe ff       	call   c00068a9 <f_chmod>
c00199f7:	83 c4 10             	add    esp,0x10
c00199fa:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019a01:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019a08:	85 c0                	test   eax,eax
c0019a0a:	75 07                	jne    c0019a13 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0019a0c:	b8 00 00 00 00       	mov    eax,0x0
c0019a11:	eb 05                	jmp    c0019a18 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0019a13:	b8 01 00 00 00       	mov    eax,0x1
c0019a18:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019a1e:	c3                   	ret    
c0019a1f:	90                   	nop

c0019a20 <FAT::rename(char const*, char const*)>:
c0019a20:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019a26:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019a2e:	74 0a                	je     c0019a3a <FAT::rename(char const*, char const*)+0x1a>
c0019a30:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019a38:	75 0a                	jne    c0019a44 <FAT::rename(char const*, char const*)+0x24>
c0019a3a:	b8 04 00 00 00       	mov    eax,0x4
c0019a3f:	e9 98 00 00 00       	jmp    c0019adc <FAT::rename(char const*, char const*)+0xbc>
c0019a44:	83 ec 08             	sub    esp,0x8
c0019a47:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019a4e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019a55:	50                   	push   eax
c0019a56:	e8 4c 6c fe ff       	call   c00006a7 <strcpy>
c0019a5b:	83 c4 10             	add    esp,0x10
c0019a5e:	83 ec 08             	sub    esp,0x8
c0019a61:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019a68:	50                   	push   eax
c0019a69:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019a70:	e8 ed fa ff ff       	call   c0019562 <FAT::fixFilepath(char*)>
c0019a75:	83 c4 10             	add    esp,0x10
c0019a78:	83 ec 08             	sub    esp,0x8
c0019a7b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019a82:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a86:	50                   	push   eax
c0019a87:	e8 1b 6c fe ff       	call   c00006a7 <strcpy>
c0019a8c:	83 c4 10             	add    esp,0x10
c0019a8f:	83 ec 08             	sub    esp,0x8
c0019a92:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019a96:	50                   	push   eax
c0019a97:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019a9e:	e8 bf fa ff ff       	call   c0019562 <FAT::fixFilepath(char*)>
c0019aa3:	83 c4 10             	add    esp,0x10
c0019aa6:	83 ec 08             	sub    esp,0x8
c0019aa9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019aad:	50                   	push   eax
c0019aae:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019ab5:	50                   	push   eax
c0019ab6:	e8 fb ca fe ff       	call   c00065b6 <f_rename>
c0019abb:	83 c4 10             	add    esp,0x10
c0019abe:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019ac5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019acc:	85 c0                	test   eax,eax
c0019ace:	75 07                	jne    c0019ad7 <FAT::rename(char const*, char const*)+0xb7>
c0019ad0:	b8 00 00 00 00       	mov    eax,0x0
c0019ad5:	eb 05                	jmp    c0019adc <FAT::rename(char const*, char const*)+0xbc>
c0019ad7:	b8 01 00 00 00       	mov    eax,0x1
c0019adc:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019ae2:	c3                   	ret    
c0019ae3:	90                   	nop

c0019ae4 <FAT::mkdir(char const*)>:
c0019ae4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019aea:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019af2:	75 07                	jne    c0019afb <FAT::mkdir(char const*)+0x17>
c0019af4:	b8 04 00 00 00       	mov    eax,0x4
c0019af9:	eb 5c                	jmp    c0019b57 <FAT::mkdir(char const*)+0x73>
c0019afb:	83 ec 08             	sub    esp,0x8
c0019afe:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019b05:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019b09:	50                   	push   eax
c0019b0a:	e8 98 6b fe ff       	call   c00006a7 <strcpy>
c0019b0f:	83 c4 10             	add    esp,0x10
c0019b12:	83 ec 08             	sub    esp,0x8
c0019b15:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019b19:	50                   	push   eax
c0019b1a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019b21:	e8 3c fa ff ff       	call   c0019562 <FAT::fixFilepath(char*)>
c0019b26:	83 c4 10             	add    esp,0x10
c0019b29:	83 ec 0c             	sub    esp,0xc
c0019b2c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019b30:	50                   	push   eax
c0019b31:	e8 54 c8 fe ff       	call   c000638a <f_mkdir>
c0019b36:	83 c4 10             	add    esp,0x10
c0019b39:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019b40:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019b47:	85 c0                	test   eax,eax
c0019b49:	75 07                	jne    c0019b52 <FAT::mkdir(char const*)+0x6e>
c0019b4b:	b8 00 00 00 00       	mov    eax,0x0
c0019b50:	eb 05                	jmp    c0019b57 <FAT::mkdir(char const*)+0x73>
c0019b52:	b8 01 00 00 00       	mov    eax,0x1
c0019b57:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019b5d:	c3                   	ret    

c0019b5e <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019b5e:	b8 08 00 00 00       	mov    eax,0x8
c0019b63:	c3                   	ret    

c0019b64 <ISO9660::seek(void*, unsigned long long)>:
c0019b64:	53                   	push   ebx
c0019b65:	b8 04 00 00 00       	mov    eax,0x4
c0019b6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019b6e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019b72:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019b76:	85 d2                	test   edx,edx
c0019b78:	74 17                	je     c0019b91 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019b7a:	89 c8                	mov    eax,ecx
c0019b7c:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0019b7f:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0019b82:	b8 01 00 00 00       	mov    eax,0x1
c0019b87:	73 08                	jae    c0019b91 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019b89:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0019b8c:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0019b8f:	31 c0                	xor    eax,eax
c0019b91:	5b                   	pop    ebx
c0019b92:	c3                   	ret    
c0019b93:	90                   	nop

c0019b94 <ISO9660::tell(void*, unsigned long long*)>:
c0019b94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019b98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b9c:	85 d2                	test   edx,edx
c0019b9e:	74 12                	je     c0019bb2 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019ba0:	85 c0                	test   eax,eax
c0019ba2:	74 0e                	je     c0019bb2 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019ba4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019ba7:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0019baa:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019bad:	89 10                	mov    DWORD PTR [eax],edx
c0019baf:	31 c0                	xor    eax,eax
c0019bb1:	c3                   	ret    
c0019bb2:	b8 04 00 00 00       	mov    eax,0x4
c0019bb7:	c3                   	ret    

c0019bb8 <ISO9660::getName()>:
c0019bb8:	b8 70 a2 03 c0       	mov    eax,0xc003a270
c0019bbd:	c3                   	ret    

c0019bbe <ISO9660::stat(void*, unsigned long long*)>:
c0019bbe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019bc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019bc6:	85 d2                	test   edx,edx
c0019bc8:	74 12                	je     c0019bdc <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019bca:	85 c0                	test   eax,eax
c0019bcc:	74 0e                	je     c0019bdc <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019bce:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0019bd1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0019bd4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019bd7:	89 10                	mov    DWORD PTR [eax],edx
c0019bd9:	31 c0                	xor    eax,eax
c0019bdb:	c3                   	ret    
c0019bdc:	b8 04 00 00 00       	mov    eax,0x4
c0019be1:	c3                   	ret    

c0019be2 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019be2:	b8 01 00 00 00       	mov    eax,0x1
c0019be7:	c3                   	ret    

c0019be8 <ISO9660::unlink(char const*)>:
c0019be8:	b8 01 00 00 00       	mov    eax,0x1
c0019bed:	c3                   	ret    

c0019bee <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019bee:	b8 01 00 00 00       	mov    eax,0x1
c0019bf3:	c3                   	ret    

c0019bf4 <ISO9660::rename(char const*, char const*)>:
c0019bf4:	b8 01 00 00 00       	mov    eax,0x1
c0019bf9:	c3                   	ret    

c0019bfa <ISO9660::mkdir(char const*)>:
c0019bfa:	b8 01 00 00 00       	mov    eax,0x1
c0019bff:	c3                   	ret    

c0019c00 <ISO9660::close(void*)>:
c0019c00:	83 ec 0c             	sub    esp,0xc
c0019c03:	b8 04 00 00 00       	mov    eax,0x4
c0019c08:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019c0c:	85 d2                	test   edx,edx
c0019c0e:	74 0e                	je     c0019c1e <ISO9660::close(void*)+0x1e>
c0019c10:	83 ec 0c             	sub    esp,0xc
c0019c13:	52                   	push   edx
c0019c14:	e8 c2 35 ff ff       	call   c000d1db <free>
c0019c19:	83 c4 10             	add    esp,0x10
c0019c1c:	31 c0                	xor    eax,eax
c0019c1e:	83 c4 0c             	add    esp,0xc
c0019c21:	c3                   	ret    

c0019c22 <ISO9660::closeDir(void*)>:
c0019c22:	83 ec 0c             	sub    esp,0xc
c0019c25:	b8 04 00 00 00       	mov    eax,0x4
c0019c2a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019c2e:	85 d2                	test   edx,edx
c0019c30:	74 0e                	je     c0019c40 <ISO9660::closeDir(void*)+0x1e>
c0019c32:	83 ec 0c             	sub    esp,0xc
c0019c35:	52                   	push   edx
c0019c36:	e8 a0 35 ff ff       	call   c000d1db <free>
c0019c3b:	83 c4 10             	add    esp,0x10
c0019c3e:	31 c0                	xor    eax,eax
c0019c40:	83 c4 0c             	add    esp,0xc
c0019c43:	c3                   	ret    

c0019c44 <ISO9660::~ISO9660()>:
c0019c44:	83 ec 0c             	sub    esp,0xc
c0019c47:	ba c4 a2 03 c0       	mov    edx,0xc003a2c4
c0019c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c50:	89 10                	mov    DWORD PTR [eax],edx
c0019c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c56:	83 ec 0c             	sub    esp,0xc
c0019c59:	50                   	push   eax
c0019c5a:	e8 49 87 ff ff       	call   c00123a8 <Filesystem::~Filesystem()>
c0019c5f:	83 c4 10             	add    esp,0x10
c0019c62:	90                   	nop
c0019c63:	83 c4 0c             	add    esp,0xc
c0019c66:	c3                   	ret    
c0019c67:	90                   	nop

c0019c68 <ISO9660::~ISO9660()>:
c0019c68:	83 ec 0c             	sub    esp,0xc
c0019c6b:	83 ec 0c             	sub    esp,0xc
c0019c6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019c72:	e8 cd ff ff ff       	call   c0019c44 <ISO9660::~ISO9660()>
c0019c77:	83 c4 10             	add    esp,0x10
c0019c7a:	83 ec 08             	sub    esp,0x8
c0019c7d:	6a 08                	push   0x8
c0019c7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019c83:	e8 07 85 ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c0019c88:	83 c4 10             	add    esp,0x10
c0019c8b:	83 c4 0c             	add    esp,0xc
c0019c8e:	c3                   	ret    

c0019c8f <__memmem(unsigned char*, int, unsigned char*, int)>:
c0019c8f:	55                   	push   ebp
c0019c90:	31 c9                	xor    ecx,ecx
c0019c92:	57                   	push   edi
c0019c93:	56                   	push   esi
c0019c94:	53                   	push   ebx
c0019c95:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0019c99:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019c9d:	89 eb                	mov    ebx,ebp
c0019c9f:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0019ca3:	39 ce                	cmp    esi,ecx
c0019ca5:	7e 17                	jle    c0019cbe <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0019ca7:	31 d2                	xor    edx,edx
c0019ca9:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0019cad:	7d 13                	jge    c0019cc2 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0019caf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019cb3:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0019cb6:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0019cb9:	75 0d                	jne    c0019cc8 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0019cbb:	42                   	inc    edx
c0019cbc:	eb eb                	jmp    c0019ca9 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0019cbe:	31 c0                	xor    eax,eax
c0019cc0:	eb 0a                	jmp    c0019ccc <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0019cc2:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0019cc6:	eb 04                	jmp    c0019ccc <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0019cc8:	41                   	inc    ecx
c0019cc9:	43                   	inc    ebx
c0019cca:	eb d7                	jmp    c0019ca3 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0019ccc:	5b                   	pop    ebx
c0019ccd:	5e                   	pop    esi
c0019cce:	5f                   	pop    edi
c0019ccf:	5d                   	pop    ebp
c0019cd0:	c3                   	ret    

c0019cd1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0019cd1:	56                   	push   esi
c0019cd2:	53                   	push   ebx
c0019cd3:	52                   	push   edx
c0019cd4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019cd8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019cdc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019ce0:	39 0d c0 c5 03 c0    	cmp    DWORD PTR ds:0xc003c5c0,ecx
c0019ce6:	75 08                	jne    c0019cf0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0019ce8:	38 05 24 b1 03 c0    	cmp    BYTE PTR ds:0xc003b124,al
c0019cee:	74 2b                	je     c0019d1b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0019cf0:	83 ec 0c             	sub    esp,0xc
c0019cf3:	a2 24 b1 03 c0       	mov    ds:0xc003b124,al
c0019cf8:	68 e0 c5 03 c0       	push   0xc003c5e0
c0019cfd:	0f be c0             	movsx  eax,al
c0019d00:	6a 01                	push   0x1
c0019d02:	89 0d c0 c5 03 c0    	mov    DWORD PTR ds:0xc003c5c0,ecx
c0019d08:	31 db                	xor    ebx,ebx
c0019d0a:	53                   	push   ebx
c0019d0b:	51                   	push   ecx
c0019d0c:	ff 34 85 5c bf 03 c0 	push   DWORD PTR [eax*4-0x3ffc40a4]
c0019d13:	e8 34 b2 ff ff       	call   c0014f4c <LogicalDisk::read(unsigned long long, int, void*)>
c0019d18:	83 c4 20             	add    esp,0x20
c0019d1b:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0019d23:	c7 44 24 14 e0 c5 03 c0 	mov    DWORD PTR [esp+0x14],0xc003c5e0
c0019d2b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0019d2f:	58                   	pop    eax
c0019d30:	5b                   	pop    ebx
c0019d31:	5e                   	pop    esi
c0019d32:	e9 9b 68 fe ff       	jmp    c00005d2 <memcpy>
c0019d37:	90                   	nop

c0019d38 <ISO9660::tryMount(LogicalDisk*, int)>:
c0019d38:	81 ec 10 08 00 00    	sub    esp,0x810
c0019d3e:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0019d45:	83 c0 41             	add    eax,0x41
c0019d48:	0f be c0             	movsx  eax,al
c0019d4b:	50                   	push   eax
c0019d4c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019d50:	50                   	push   eax
c0019d51:	6a 10                	push   0x10
c0019d53:	e8 79 ff ff ff       	call   c0019cd1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019d58:	83 c4 10             	add    esp,0x10
c0019d5b:	31 c0                	xor    eax,eax
c0019d5d:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019d62:	75 1d                	jne    c0019d81 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019d64:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0019d69:	75 16                	jne    c0019d81 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019d6b:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0019d70:	75 0f                	jne    c0019d81 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019d72:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0019d77:	75 08                	jne    c0019d81 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019d79:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0019d7e:	0f 94 c0             	sete   al
c0019d81:	81 c4 0c 08 00 00    	add    esp,0x80c
c0019d87:	c3                   	ret    

c0019d88 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0019d88:	55                   	push   ebp
c0019d89:	57                   	push   edi
c0019d8a:	56                   	push   esi
c0019d8b:	53                   	push   ebx
c0019d8c:	81 ec 34 08 00 00    	sub    esp,0x834
c0019d92:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c0019d99:	55                   	push   ebp
c0019d9a:	68 8b a2 03 c0       	push   0xc003a28b
c0019d9f:	e8 2c 2e ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c0019da4:	83 c4 10             	add    esp,0x10
c0019da7:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c0019daf:	0f 84 06 02 00 00    	je     c0019fbb <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c0019db5:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0019dbd:	0f 84 f8 01 00 00    	je     c0019fbb <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c0019dc3:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c0019dca:	b8 01 00 00 00       	mov    eax,0x1
c0019dcf:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c0019dd3:	0f 85 e7 01 00 00    	jne    c0019fc0 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c0019dd9:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0019ddc:	31 d2                	xor    edx,edx
c0019dde:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c0019de1:	89 e9                	mov    ecx,ebp
c0019de3:	89 d3                	mov    ebx,edx
c0019de5:	01 f1                	add    ecx,esi
c0019de7:	11 fb                	adc    ebx,edi
c0019de9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0019ded:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019df1:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c0019df8:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0019dfb:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c0019dfe:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0019e02:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0019e06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019e0a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019e0e:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c0019e12:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0019e16:	72 19                	jb     c0019e31 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c0019e18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e20:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019e24:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019e27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019e2b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019e2f:	eb 13                	jmp    c0019e44 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c0019e31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019e35:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019e39:	29 f0                	sub    eax,esi
c0019e3b:	19 fa                	sbb    edx,edi
c0019e3d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e40:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019e44:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c0019e4b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0019e4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e50:	53                   	push   ebx
c0019e51:	0f a4 c2 0b          	shld   edx,eax,0xb
c0019e55:	c1 e0 0b             	shl    eax,0xb
c0019e58:	01 c6                	add    esi,eax
c0019e5a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0019e61:	11 d7                	adc    edi,edx
c0019e63:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0019e67:	89 fa                	mov    edx,edi
c0019e69:	50                   	push   eax
c0019e6a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019e6e:	50                   	push   eax
c0019e6f:	89 f0                	mov    eax,esi
c0019e71:	0f ac d0 0b          	shrd   eax,edx,0xb
c0019e75:	50                   	push   eax
c0019e76:	e8 56 fe ff ff       	call   c0019cd1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019e7b:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0019e82:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019e86:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019e89:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0019e8d:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0019e93:	83 c4 10             	add    esp,0x10
c0019e96:	b8 00 08 00 00       	mov    eax,0x800
c0019e9b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0019e9f:	29 d0                	sub    eax,edx
c0019ea1:	39 c1                	cmp    ecx,eax
c0019ea3:	83 db 00             	sbb    ebx,0x0
c0019ea6:	7d 19                	jge    c0019ec1 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c0019ea8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019ead:	75 16                	jne    c0019ec5 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c0019eaf:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0019eb6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019ebc:	e9 f6 00 00 00       	jmp    c0019fb7 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c0019ec1:	89 c5                	mov    ebp,eax
c0019ec3:	eb 03                	jmp    c0019ec8 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c0019ec5:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0019ec8:	51                   	push   ecx
c0019ec9:	55                   	push   ebp
c0019eca:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c0019ece:	50                   	push   eax
c0019ecf:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c0019ed6:	e8 f7 66 fe ff       	call   c00005d2 <memcpy>
c0019edb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019edf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019ee3:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c0019eea:	01 e8                	add    eax,ebp
c0019eec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019ef0:	89 e8                	mov    eax,ebp
c0019ef2:	99                   	cdq    
c0019ef3:	01 ee                	add    esi,ebp
c0019ef5:	11 d7                	adc    edi,edx
c0019ef7:	29 e9                	sub    ecx,ebp
c0019ef9:	19 d3                	sbb    ebx,edx
c0019efb:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0019eff:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019f03:	83 c4 10             	add    esp,0x10
c0019f06:	b8 ff 07 00 00       	mov    eax,0x7ff
c0019f0b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0019f0e:	b8 00 00 00 00       	mov    eax,0x0
c0019f13:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0019f17:	7d 3f                	jge    c0019f58 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0019f19:	52                   	push   edx
c0019f1a:	89 fa                	mov    edx,edi
c0019f1c:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0019f23:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0019f27:	50                   	push   eax
c0019f28:	89 f0                	mov    eax,esi
c0019f2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f2e:	0f ac d0 0b          	shrd   eax,edx,0xb
c0019f32:	50                   	push   eax
c0019f33:	e8 99 fd ff ff       	call   c0019cd1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019f38:	81 c6 00 08 00 00    	add    esi,0x800
c0019f3e:	83 d7 00             	adc    edi,0x0
c0019f41:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0019f49:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0019f51:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0019f56:	eb ab                	jmp    c0019f03 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c0019f58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f5c:	0b 04 24             	or     eax,DWORD PTR [esp]
c0019f5f:	74 34                	je     c0019f95 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c0019f61:	89 fa                	mov    edx,edi
c0019f63:	50                   	push   eax
c0019f64:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0019f6b:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0019f6f:	50                   	push   eax
c0019f70:	89 f0                	mov    eax,esi
c0019f72:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019f76:	0f ac d0 0b          	shrd   eax,edx,0xb
c0019f7a:	55                   	push   ebp
c0019f7b:	50                   	push   eax
c0019f7c:	e8 50 fd ff ff       	call   c0019cd1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019f81:	83 c4 0c             	add    esp,0xc
c0019f84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0019f88:	55                   	push   ebp
c0019f89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f8d:	e8 40 66 fe ff       	call   c00005d2 <memcpy>
c0019f92:	83 c4 10             	add    esp,0x10
c0019f95:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0019f9c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019fa0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019fa4:	89 38                	mov    DWORD PTR [eax],edi
c0019fa6:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c0019fad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019fb1:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c0019fb4:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0019fb7:	31 c0                	xor    eax,eax
c0019fb9:	eb 05                	jmp    c0019fc0 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c0019fbb:	b8 04 00 00 00       	mov    eax,0x4
c0019fc0:	81 c4 2c 08 00 00    	add    esp,0x82c
c0019fc6:	5b                   	pop    ebx
c0019fc7:	5e                   	pop    esi
c0019fc8:	5f                   	pop    edi
c0019fc9:	5d                   	pop    ebp
c0019fca:	c3                   	ret    
c0019fcb:	90                   	nop

c0019fcc <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0019fcc:	55                   	push   ebp
c0019fcd:	57                   	push   edi
c0019fce:	56                   	push   esi
c0019fcf:	53                   	push   ebx
c0019fd0:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0019fd6:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0019fdd:	85 f6                	test   esi,esi
c0019fdf:	0f 84 65 02 00 00    	je     c001a24a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27e>
c0019fe5:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0019fed:	0f 84 57 02 00 00    	je     c001a24a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27e>
c0019ff3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0019ff6:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0019ff9:	75 0a                	jne    c001a005 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0019ffb:	b8 07 00 00 00       	mov    eax,0x7
c001a000:	e9 4a 02 00 00       	jmp    c001a24f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x283>
c001a005:	50                   	push   eax
c001a006:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a00a:	50                   	push   eax
c001a00b:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a012:	53                   	push   ebx
c001a013:	8b 06                	mov    eax,DWORD PTR [esi]
c001a015:	c1 e0 0b             	shl    eax,0xb
c001a018:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001a01b:	c1 e8 0b             	shr    eax,0xb
c001a01e:	50                   	push   eax
c001a01f:	e8 ad fc ff ff       	call   c0019cd1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a024:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a027:	83 c4 10             	add    esp,0x10
c001a02a:	89 c1                	mov    ecx,eax
c001a02c:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001a02f:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a035:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001a038:	84 db                	test   bl,bl
c001a03a:	0f 85 90 00 00 00    	jne    c001a0d0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001a040:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001a046:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a04c:	29 c7                	sub    edi,eax
c001a04e:	89 fb                	mov    ebx,edi
c001a050:	c1 fb 1f             	sar    ebx,0x1f
c001a053:	01 f8                	add    eax,edi
c001a055:	11 da                	adc    edx,ebx
c001a057:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a05b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a05f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001a062:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001a065:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a068:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a06b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a06e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a072:	89 d8                	mov    eax,ebx
c001a074:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001a077:	ba 00 00 00 00       	mov    edx,0x0
c001a07c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a080:	b8 00 00 00 00       	mov    eax,0x0
c001a085:	73 0b                	jae    c001a092 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a087:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a08a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a08e:	29 f8                	sub    eax,edi
c001a090:	19 da                	sbb    edx,ebx
c001a092:	89 d3                	mov    ebx,edx
c001a094:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a097:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a09a:	09 c3                	or     ebx,eax
c001a09c:	0f 84 59 ff ff ff    	je     c0019ffb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001a0a2:	55                   	push   ebp
c001a0a3:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a0a7:	50                   	push   eax
c001a0a8:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a0af:	53                   	push   ebx
c001a0b0:	8b 06                	mov    eax,DWORD PTR [esi]
c001a0b2:	c1 e0 0b             	shl    eax,0xb
c001a0b5:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001a0b9:	c1 e8 0b             	shr    eax,0xb
c001a0bc:	50                   	push   eax
c001a0bd:	e8 0f fc ff ff       	call   c0019cd1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a0c2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a0c5:	83 c4 10             	add    esp,0x10
c001a0c8:	25 ff 07 00 00       	and    eax,0x7ff
c001a0cd:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001a0d0:	57                   	push   edi
c001a0d1:	6a 28                	push   0x28
c001a0d3:	6a 00                	push   0x0
c001a0d5:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a0d9:	50                   	push   eax
c001a0da:	e8 29 65 fe ff       	call   c0000608 <memset>
c001a0df:	31 d2                	xor    edx,edx
c001a0e1:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a0e4:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a0ea:	89 f8                	mov    eax,edi
c001a0ec:	83 c0 21             	add    eax,0x21
c001a0ef:	83 d2 00             	adc    edx,0x0
c001a0f2:	89 c7                	mov    edi,eax
c001a0f4:	89 d5                	mov    ebp,edx
c001a0f6:	83 c4 10             	add    esp,0x10
c001a0f9:	31 c9                	xor    ecx,ecx
c001a0fb:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001a102:	83 f9 28             	cmp    ecx,0x28
c001a105:	88 04 24             	mov    BYTE PTR [esp],al
c001a108:	0f 94 c2             	sete   dl
c001a10b:	88 d0                	mov    al,dl
c001a10d:	ba ff 07 00 00       	mov    edx,0x7ff
c001a112:	39 fa                	cmp    edx,edi
c001a114:	ba 00 00 00 00       	mov    edx,0x0
c001a119:	19 ea                	sbb    edx,ebp
c001a11b:	0f 92 c2             	setb   dl
c001a11e:	09 c2                	or     edx,eax
c001a120:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001a124:	0f 94 c0             	sete   al
c001a127:	08 d0                	or     al,dl
c001a129:	75 16                	jne    c001a141 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a12b:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001a12f:	74 10                	je     c001a141 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a131:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a134:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001a138:	41                   	inc    ecx
c001a139:	83 c7 01             	add    edi,0x1
c001a13c:	83 d5 00             	adc    ebp,0x0
c001a13f:	eb ba                	jmp    c001a0fb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001a141:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c001a149:	83 ec 0c             	sub    esp,0xc
c001a14c:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001a150:	57                   	push   edi
c001a151:	e8 cf 64 fe ff       	call   c0000625 <strlen>
c001a156:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001a15e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a162:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001a169:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a16c:	5a                   	pop    edx
c001a16d:	25 ff 07 00 00       	and    eax,0x7ff
c001a172:	01 c8                	add    eax,ecx
c001a174:	59                   	pop    ecx
c001a175:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001a17b:	83 e0 02             	and    eax,0x2
c001a17e:	3c 01                	cmp    al,0x1
c001a180:	19 c0                	sbb    eax,eax
c001a182:	83 c0 02             	add    eax,0x2
c001a185:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a189:	57                   	push   edi
c001a18a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001a18e:	50                   	push   eax
c001a18f:	e8 13 65 fe ff       	call   c00006a7 <strcpy>
c001a194:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001a198:	83 c4 10             	add    esp,0x10
c001a19b:	84 c0                	test   al,al
c001a19d:	75 21                	jne    c001a1c0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f4>
c001a19f:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001a1a7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a1af:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a1b7:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001a1be:	eb 28                	jmp    c001a1e8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21c>
c001a1c0:	fe c8                	dec    al
c001a1c2:	75 24                	jne    c001a1e8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21c>
c001a1c4:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001a1cc:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a1d4:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a1dc:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001a1e3:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001a1e8:	0f b6 fb             	movzx  edi,bl
c001a1eb:	31 db                	xor    ebx,ebx
c001a1ed:	50                   	push   eax
c001a1ee:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001a1f5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a1f9:	50                   	push   eax
c001a1fa:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001a201:	e8 cc 63 fe ff       	call   c00005d2 <memcpy>
c001a206:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001a20d:	89 f9                	mov    ecx,edi
c001a20f:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a215:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001a218:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a21b:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001a21e:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a221:	83 c4 10             	add    esp,0x10
c001a224:	39 c7                	cmp    edi,eax
c001a226:	89 df                	mov    edi,ebx
c001a228:	19 d7                	sbb    edi,edx
c001a22a:	72 10                	jb     c001a23c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x270>
c001a22c:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001a233:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001a23a:	eb 0a                	jmp    c001a246 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27a>
c001a23c:	29 c8                	sub    eax,ecx
c001a23e:	19 da                	sbb    edx,ebx
c001a240:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a243:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a246:	31 c0                	xor    eax,eax
c001a248:	eb 05                	jmp    c001a24f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x283>
c001a24a:	b8 04 00 00 00       	mov    eax,0x4
c001a24f:	81 c4 5c 09 00 00    	add    esp,0x95c
c001a255:	5b                   	pop    ebx
c001a256:	5e                   	pop    esi
c001a257:	5f                   	pop    edi
c001a258:	5d                   	pop    ebp
c001a259:	c3                   	ret    

c001a25a <readRoot(unsigned int*, unsigned int*, char)>:
c001a25a:	81 ec 40 08 00 00    	sub    esp,0x840
c001a260:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001a268:	50                   	push   eax
c001a269:	8d 44 24 38          	lea    eax,[esp+0x38]
c001a26d:	50                   	push   eax
c001a26e:	6a 10                	push   0x10
c001a270:	e8 5c fa ff ff       	call   c0019cd1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a275:	83 c4 0c             	add    esp,0xc
c001a278:	6a 22                	push   0x22
c001a27a:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001a281:	50                   	push   eax
c001a282:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a286:	50                   	push   eax
c001a287:	e8 46 63 fe ff       	call   c00005d2 <memcpy>
c001a28c:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a293:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a297:	89 10                	mov    DWORD PTR [eax],edx
c001a299:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a2a0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a2a4:	89 10                	mov    DWORD PTR [eax],edx
c001a2a6:	b0 01                	mov    al,0x1
c001a2a8:	81 c4 4c 08 00 00    	add    esp,0x84c
c001a2ae:	c3                   	ret    

c001a2af <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001a2af:	55                   	push   ebp
c001a2b0:	57                   	push   edi
c001a2b1:	56                   	push   esi
c001a2b2:	53                   	push   ebx
c001a2b3:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a2b9:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a2c0:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001a2c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a2cb:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001a2cf:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a2d3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a2d7:	75 03                	jne    c001a2dc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a2d9:	83 c3 02             	add    ebx,0x2
c001a2dc:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001a2df:	75 03                	jne    c001a2e4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001a2e1:	43                   	inc    ebx
c001a2e2:	eb f8                	jmp    c001a2dc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a2e4:	51                   	push   ecx
c001a2e5:	68 00 01 00 00       	push   0x100
c001a2ea:	6a 00                	push   0x0
c001a2ec:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a2f0:	50                   	push   eax
c001a2f1:	e8 12 63 fe ff       	call   c0000608 <memset>
c001a2f6:	83 c4 10             	add    esp,0x10
c001a2f9:	31 d2                	xor    edx,edx
c001a2fb:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001a2fe:	84 c0                	test   al,al
c001a300:	74 21                	je     c001a323 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001a302:	3c 2f                	cmp    al,0x2f
c001a304:	75 0b                	jne    c001a311 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001a306:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001a30a:	bd 01 00 00 00       	mov    ebp,0x1
c001a30f:	eb 14                	jmp    c001a325 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001a311:	8d 48 9f             	lea    ecx,[eax-0x61]
c001a314:	80 f9 19             	cmp    cl,0x19
c001a317:	77 03                	ja     c001a31c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a319:	83 e8 20             	sub    eax,0x20
c001a31c:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001a320:	42                   	inc    edx
c001a321:	eb d8                	jmp    c001a2fb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001a323:	31 ed                	xor    ebp,ebp
c001a325:	83 ec 0c             	sub    esp,0xc
c001a328:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001a32f:	e8 97 2e ff ff       	call   c000d1cb <malloc>
c001a334:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a33b:	89 c6                	mov    esi,eax
c001a33d:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001a343:	c1 ef 0b             	shr    edi,0xb
c001a346:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001a34d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001a351:	83 c4 10             	add    esp,0x10
c001a354:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001a359:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a35d:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001a364:	74 28                	je     c001a38e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001a366:	52                   	push   edx
c001a367:	57                   	push   edi
c001a368:	50                   	push   eax
c001a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a36d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a374:	e8 58 f9 ff ff       	call   c0019cd1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a379:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a37d:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001a384:	05 00 08 00 00       	add    eax,0x800
c001a389:	83 c4 10             	add    esp,0x10
c001a38c:	eb cb                	jmp    c001a359 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001a38e:	83 ec 0c             	sub    esp,0xc
c001a391:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a395:	57                   	push   edi
c001a396:	e8 8a 62 fe ff       	call   c0000625 <strlen>
c001a39b:	50                   	push   eax
c001a39c:	57                   	push   edi
c001a39d:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001a3a4:	56                   	push   esi
c001a3a5:	e8 e5 f8 ff ff       	call   c0019c8f <__memmem(unsigned char*, int, unsigned char*, int)>
c001a3aa:	83 c4 20             	add    esp,0x20
c001a3ad:	85 c0                	test   eax,eax
c001a3af:	75 13                	jne    c001a3c4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001a3b1:	83 ec 0c             	sub    esp,0xc
c001a3b4:	56                   	push   esi
c001a3b5:	e8 21 2e ff ff       	call   c000d1db <free>
c001a3ba:	83 c4 10             	add    esp,0x10
c001a3bd:	31 c0                	xor    eax,eax
c001a3bf:	e9 b3 00 00 00       	jmp    c001a477 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a3c4:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001a3c8:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001a3cc:	c1 e7 08             	shl    edi,0x8
c001a3cf:	c1 e2 10             	shl    edx,0x10
c001a3d2:	09 d7                	or     edi,edx
c001a3d4:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001a3d8:	09 d7                	or     edi,edx
c001a3da:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001a3de:	c1 e2 18             	shl    edx,0x18
c001a3e1:	09 d7                	or     edi,edx
c001a3e3:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001a3e7:	89 d1                	mov    ecx,edx
c001a3e9:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001a3ed:	c1 e1 08             	shl    ecx,0x8
c001a3f0:	c1 e2 10             	shl    edx,0x10
c001a3f3:	09 ca                	or     edx,ecx
c001a3f5:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001a3f9:	09 ca                	or     edx,ecx
c001a3fb:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001a3ff:	c1 e1 18             	shl    ecx,0x18
c001a402:	09 ca                	or     edx,ecx
c001a404:	89 e9                	mov    ecx,ebp
c001a406:	84 c9                	test   cl,cl
c001a408:	74 3c                	je     c001a446 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001a40a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a40e:	83 ec 0c             	sub    esp,0xc
c001a411:	56                   	push   esi
c001a412:	e8 c4 2d ff ff       	call   c000d1db <free>
c001a417:	83 c4 0c             	add    esp,0xc
c001a41a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a421:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a426:	50                   	push   eax
c001a427:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a42e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a435:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a439:	52                   	push   edx
c001a43a:	57                   	push   edi
c001a43b:	53                   	push   ebx
c001a43c:	e8 6e fe ff ff       	call   c001a2af <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a441:	83 c4 20             	add    esp,0x20
c001a444:	eb 31                	jmp    c001a477 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a446:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001a449:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001a450:	d0 e8                	shr    al,1
c001a452:	89 3b                	mov    DWORD PTR [ebx],edi
c001a454:	83 e0 01             	and    eax,0x1
c001a457:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a45e:	83 ec 0c             	sub    esp,0xc
c001a461:	89 13                	mov    DWORD PTR [ebx],edx
c001a463:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001a46a:	89 03                	mov    DWORD PTR [ebx],eax
c001a46c:	56                   	push   esi
c001a46d:	e8 69 2d ff ff       	call   c000d1db <free>
c001a472:	83 c4 10             	add    esp,0x10
c001a475:	b0 01                	mov    al,0x1
c001a477:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a47d:	5b                   	pop    ebx
c001a47e:	5e                   	pop    esi
c001a47f:	5f                   	pop    edi
c001a480:	5d                   	pop    ebp
c001a481:	c3                   	ret    

c001a482 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001a482:	55                   	push   ebp
c001a483:	57                   	push   edi
c001a484:	56                   	push   esi
c001a485:	53                   	push   ebx
c001a486:	83 ec 20             	sub    esp,0x20
c001a489:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a48d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001a491:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a495:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a49d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001a4a5:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001a4aa:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001a4b0:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001a4b6:	57                   	push   edi
c001a4b7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a4bb:	50                   	push   eax
c001a4bc:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a4c0:	50                   	push   eax
c001a4c1:	e8 94 fd ff ff       	call   c001a25a <readRoot(unsigned int*, unsigned int*, char)>
c001a4c6:	5a                   	pop    edx
c001a4c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a4cb:	e8 55 61 fe ff       	call   c0000625 <strlen>
c001a4d0:	83 c4 10             	add    esp,0x10
c001a4d3:	83 f8 03             	cmp    eax,0x3
c001a4d6:	77 17                	ja     c001a4ef <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a4d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a4dc:	89 03                	mov    DWORD PTR [ebx],eax
c001a4de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a4e2:	89 06                	mov    DWORD PTR [esi],eax
c001a4e4:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001a4eb:	b0 01                	mov    al,0x1
c001a4ed:	eb 19                	jmp    c001a508 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001a4ef:	50                   	push   eax
c001a4f0:	55                   	push   ebp
c001a4f1:	57                   	push   edi
c001a4f2:	56                   	push   esi
c001a4f3:	53                   	push   ebx
c001a4f4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a4f8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a4fc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a500:	e8 aa fd ff ff       	call   c001a2af <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a505:	83 c4 20             	add    esp,0x20
c001a508:	83 c4 1c             	add    esp,0x1c
c001a50b:	5b                   	pop    ebx
c001a50c:	5e                   	pop    esi
c001a50d:	5f                   	pop    edi
c001a50e:	5d                   	pop    ebp
c001a50f:	c3                   	ret    

c001a510 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a510:	57                   	push   edi
c001a511:	56                   	push   esi
c001a512:	53                   	push   ebx
c001a513:	83 ec 10             	sub    esp,0x10
c001a516:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a51a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a51e:	85 ff                	test   edi,edi
c001a520:	74 7b                	je     c001a59d <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a522:	85 f6                	test   esi,esi
c001a524:	74 77                	je     c001a59d <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a526:	83 ec 0c             	sub    esp,0xc
c001a529:	6a 1c                	push   0x1c
c001a52b:	e8 9b 2c ff ff       	call   c000d1cb <malloc>
c001a530:	89 07                	mov    DWORD PTR [edi],eax
c001a532:	89 c3                	mov    ebx,eax
c001a534:	58                   	pop    eax
c001a535:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a539:	50                   	push   eax
c001a53a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a53d:	50                   	push   eax
c001a53e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a542:	50                   	push   eax
c001a543:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a547:	50                   	push   eax
c001a548:	56                   	push   esi
c001a549:	e8 34 ff ff ff       	call   c001a482 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a54e:	83 c4 20             	add    esp,0x20
c001a551:	84 c0                	test   al,al
c001a553:	74 07                	je     c001a55c <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001a555:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a55a:	74 0b                	je     c001a567 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a55c:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001a560:	b8 01 00 00 00       	mov    eax,0x1
c001a565:	eb 3b                	jmp    c001a5a2 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a567:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a56b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001a56f:	89 03                	mov    DWORD PTR [ebx],eax
c001a571:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001a578:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a57c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001a583:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a58a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a58d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a594:	8a 06                	mov    al,BYTE PTR [esi]
c001a596:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001a599:	31 c0                	xor    eax,eax
c001a59b:	eb 05                	jmp    c001a5a2 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a59d:	b8 04 00 00 00       	mov    eax,0x4
c001a5a2:	83 c4 10             	add    esp,0x10
c001a5a5:	5b                   	pop    ebx
c001a5a6:	5e                   	pop    esi
c001a5a7:	5f                   	pop    edi
c001a5a8:	c3                   	ret    
c001a5a9:	90                   	nop

c001a5aa <ISO9660::exists(char const*)>:
c001a5aa:	83 ec 28             	sub    esp,0x28
c001a5ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a5b1:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a5b5:	52                   	push   edx
c001a5b6:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001a5b9:	52                   	push   edx
c001a5ba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a5be:	52                   	push   edx
c001a5bf:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a5c3:	52                   	push   edx
c001a5c4:	50                   	push   eax
c001a5c5:	e8 b8 fe ff ff       	call   c001a482 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a5ca:	83 c4 3c             	add    esp,0x3c
c001a5cd:	c3                   	ret    

c001a5ce <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a5ce:	56                   	push   esi
c001a5cf:	53                   	push   ebx
c001a5d0:	83 ec 14             	sub    esp,0x14
c001a5d3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a5d7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a5db:	85 db                	test   ebx,ebx
c001a5dd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001a5e1:	0f 94 c2             	sete   dl
c001a5e4:	85 f6                	test   esi,esi
c001a5e6:	0f 94 c0             	sete   al
c001a5e9:	08 c2                	or     dl,al
c001a5eb:	75 68                	jne    c001a655 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001a5ed:	85 c9                	test   ecx,ecx
c001a5ef:	74 64                	je     c001a655 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001a5f1:	83 ec 0c             	sub    esp,0xc
c001a5f4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a5f7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a5fb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a601:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a608:	50                   	push   eax
c001a609:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001a60c:	50                   	push   eax
c001a60d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a611:	50                   	push   eax
c001a612:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a616:	50                   	push   eax
c001a617:	51                   	push   ecx
c001a618:	e8 65 fe ff ff       	call   c001a482 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a61d:	83 c4 20             	add    esp,0x20
c001a620:	ba 01 00 00 00       	mov    edx,0x1
c001a625:	84 c0                	test   al,al
c001a627:	74 31                	je     c001a65a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a62d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a634:	89 03                	mov    DWORD PTR [ebx],eax
c001a636:	ba 00 00 00 00       	mov    edx,0x0
c001a63b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a63f:	85 c0                	test   eax,eax
c001a641:	0f 95 06             	setne  BYTE PTR [esi]
c001a644:	74 14                	je     c001a65a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a646:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a64c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a653:	eb 05                	jmp    c001a65a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a655:	ba 04 00 00 00       	mov    edx,0x4
c001a65a:	83 c4 14             	add    esp,0x14
c001a65d:	89 d0                	mov    eax,edx
c001a65f:	5b                   	pop    ebx
c001a660:	5e                   	pop    esi
c001a661:	c3                   	ret    

c001a662 <ISO9660::openDir(char const*, void**)>:
c001a662:	57                   	push   edi
c001a663:	56                   	push   esi
c001a664:	53                   	push   ebx
c001a665:	83 ec 10             	sub    esp,0x10
c001a668:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a66c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a670:	85 ff                	test   edi,edi
c001a672:	0f 84 95 00 00 00    	je     c001a70d <ISO9660::openDir(char const*, void**)+0xab>
c001a678:	85 f6                	test   esi,esi
c001a67a:	0f 84 8d 00 00 00    	je     c001a70d <ISO9660::openDir(char const*, void**)+0xab>
c001a680:	83 ec 0c             	sub    esp,0xc
c001a683:	6a 1c                	push   0x1c
c001a685:	e8 41 2b ff ff       	call   c000d1cb <malloc>
c001a68a:	89 07                	mov    DWORD PTR [edi],eax
c001a68c:	89 c3                	mov    ebx,eax
c001a68e:	59                   	pop    ecx
c001a68f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a693:	50                   	push   eax
c001a694:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a697:	50                   	push   eax
c001a698:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a69c:	50                   	push   eax
c001a69d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a6a1:	50                   	push   eax
c001a6a2:	56                   	push   esi
c001a6a3:	e8 da fd ff ff       	call   c001a482 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a6a8:	83 c4 20             	add    esp,0x20
c001a6ab:	84 c0                	test   al,al
c001a6ad:	74 07                	je     c001a6b6 <ISO9660::openDir(char const*, void**)+0x54>
c001a6af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a6b4:	75 21                	jne    c001a6d7 <ISO9660::openDir(char const*, void**)+0x75>
c001a6b6:	0f b6 c0             	movzx  eax,al
c001a6b9:	52                   	push   edx
c001a6ba:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a6be:	50                   	push   eax
c001a6bf:	68 9e a2 03 c0       	push   0xc003a29e
c001a6c4:	e8 07 25 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001a6c9:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001a6cd:	83 c4 10             	add    esp,0x10
c001a6d0:	b8 01 00 00 00       	mov    eax,0x1
c001a6d5:	eb 3b                	jmp    c001a712 <ISO9660::openDir(char const*, void**)+0xb0>
c001a6d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6db:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001a6df:	89 03                	mov    DWORD PTR [ebx],eax
c001a6e1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001a6e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6ec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001a6f3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a6fa:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a6fd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a704:	8a 06                	mov    al,BYTE PTR [esi]
c001a706:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001a709:	31 c0                	xor    eax,eax
c001a70b:	eb 05                	jmp    c001a712 <ISO9660::openDir(char const*, void**)+0xb0>
c001a70d:	b8 04 00 00 00       	mov    eax,0x4
c001a712:	83 c4 10             	add    esp,0x10
c001a715:	5b                   	pop    ebx
c001a716:	5e                   	pop    esi
c001a717:	5f                   	pop    edi
c001a718:	c3                   	ret    
c001a719:	90                   	nop

c001a71a <ISO9660::ISO9660()>:
c001a71a:	83 ec 0c             	sub    esp,0xc
c001a71d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a721:	83 ec 0c             	sub    esp,0xc
c001a724:	50                   	push   eax
c001a725:	e8 5a 7c ff ff       	call   c0012384 <Filesystem::Filesystem()>
c001a72a:	83 c4 10             	add    esp,0x10
c001a72d:	ba c4 a2 03 c0       	mov    edx,0xc003a2c4
c001a732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a736:	89 10                	mov    DWORD PTR [eax],edx
c001a738:	90                   	nop
c001a739:	83 c4 0c             	add    esp,0xc
c001a73c:	c3                   	ret    
c001a73d:	90                   	nop

c001a73e <SoundChannel::~SoundChannel()>:
c001a73e:	83 ec 0c             	sub    esp,0xc
c001a741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a745:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a748:	83 ec 0c             	sub    esp,0xc
c001a74b:	50                   	push   eax
c001a74c:	e8 8a 2a ff ff       	call   c000d1db <free>
c001a751:	83 c4 10             	add    esp,0x10
c001a754:	90                   	nop
c001a755:	83 c4 0c             	add    esp,0xc
c001a758:	c3                   	ret    
c001a759:	90                   	nop

c001a75a <SoundChannel::setSpeed(float)>:
c001a75a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a75e:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001a762:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001a765:	c3                   	ret    

c001a766 <SoundChannel::getSpeed()>:
c001a766:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a76a:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001a76d:	c3                   	ret    

c001a76e <SoundChannel::setVolume(int)>:
c001a76e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a772:	83 f8 64             	cmp    eax,0x64
c001a775:	7e 05                	jle    c001a77c <SoundChannel::setVolume(int)+0xe>
c001a777:	b8 64 00 00 00       	mov    eax,0x64
c001a77c:	85 c0                	test   eax,eax
c001a77e:	79 02                	jns    c001a782 <SoundChannel::setVolume(int)+0x14>
c001a780:	31 c0                	xor    eax,eax
c001a782:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a786:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001a789:	c3                   	ret    

c001a78a <SoundChannel::getVolume()>:
c001a78a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a78e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a791:	c3                   	ret    

c001a792 <SoundChannel::pause()>:
c001a792:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a796:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001a79a:	c3                   	ret    
c001a79b:	90                   	nop

c001a79c <SoundChannel::SoundChannel(int, int, int, int)>:
c001a79c:	83 ec 1c             	sub    esp,0x1c
c001a79f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a7a3:	e8 ea ff ff ff       	call   c001a792 <SoundChannel::pause()>
c001a7a8:	83 c4 04             	add    esp,0x4
c001a7ab:	6a 50                	push   0x50
c001a7ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a7b1:	e8 b8 ff ff ff       	call   c001a76e <SoundChannel::setVolume(int)>
c001a7b6:	83 c4 08             	add    esp,0x8
c001a7b9:	d9 e8                	fld1   
c001a7bb:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001a7bf:	d9 1c 24             	fstp   DWORD PTR [esp]
c001a7c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a7c6:	e8 8f ff ff ff       	call   c001a75a <SoundChannel::setSpeed(float)>
c001a7cb:	83 c4 08             	add    esp,0x8
c001a7ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7d2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a7d6:	89 10                	mov    DWORD PTR [eax],edx
c001a7d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7dc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a7e0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a7e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7e7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a7eb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a7ee:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001a7f3:	75 23                	jne    c001a818 <SoundChannel::SoundChannel(int, int, int, int)+0x7c>
c001a7f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7f9:	8b 10                	mov    edx,DWORD PTR [eax]
c001a7fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a802:	0f af c2             	imul   eax,edx
c001a805:	85 c0                	test   eax,eax
c001a807:	79 03                	jns    c001a80c <SoundChannel::SoundChannel(int, int, int, int)+0x70>
c001a809:	83 c0 03             	add    eax,0x3
c001a80c:	c1 f8 02             	sar    eax,0x2
c001a80f:	05 a0 0f 00 00       	add    eax,0xfa0
c001a814:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a818:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a81c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a820:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001a823:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a827:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001a82e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a832:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001a839:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a83d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a840:	c1 e0 02             	shl    eax,0x2
c001a843:	83 ec 0c             	sub    esp,0xc
c001a846:	50                   	push   eax
c001a847:	e8 7f 29 ff ff       	call   c000d1cb <malloc>
c001a84c:	83 c4 10             	add    esp,0x10
c001a84f:	89 c2                	mov    edx,eax
c001a851:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a855:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a858:	83 ec 04             	sub    esp,0x4
c001a85b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a85f:	50                   	push   eax
c001a860:	6a 01                	push   0x1
c001a862:	6a 04                	push   0x4
c001a864:	e8 e2 df fe ff       	call   c000884b <src_new>
c001a869:	83 c4 10             	add    esp,0x10
c001a86c:	89 c2                	mov    edx,eax
c001a86e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a872:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a875:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a879:	85 c0                	test   eax,eax
c001a87b:	74 10                	je     c001a88d <SoundChannel::SoundChannel(int, int, int, int)+0xf1>
c001a87d:	83 ec 0c             	sub    esp,0xc
c001a880:	68 20 a3 03 c0       	push   0xc003a320
c001a885:	e8 64 24 ff ff       	call   c000ccee <panic(char const*)>
c001a88a:	83 c4 10             	add    esp,0x10
c001a88d:	90                   	nop
c001a88e:	83 c4 1c             	add    esp,0x1c
c001a891:	c3                   	ret    

c001a892 <SoundChannel::play()>:
c001a892:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a896:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001a89a:	c3                   	ret    
c001a89b:	90                   	nop

c001a89c <SoundChannel::paused()>:
c001a89c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8a0:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001a8a3:	c3                   	ret    

c001a8a4 <SoundChannel::getSampleRate()>:
c001a8a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8a8:	8b 00                	mov    eax,DWORD PTR [eax]
c001a8aa:	c3                   	ret    
c001a8ab:	90                   	nop

c001a8ac <SoundChannel::getBits()>:
c001a8ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a8b3:	c3                   	ret    

c001a8b4 <SoundChannel::getBufferUsed()>:
c001a8b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8b8:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001a8bb:	c3                   	ret    

c001a8bc <SoundChannel::getBufferSize()>:
c001a8bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8c0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a8c3:	c3                   	ret    

c001a8c4 <SoundChannel::unbuffer(float*, int, int)>:
c001a8c4:	53                   	push   ebx
c001a8c5:	83 ec 40             	sub    esp,0x40
c001a8c8:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001a8cc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001a8d4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a8d7:	db 03                	fild   DWORD PTR [ebx]
c001a8d9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a8dd:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001a8e1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001a8e4:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001a8e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a8eb:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001a8ef:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a8f3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a8f7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a8fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a8ff:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a903:	50                   	push   eax
c001a904:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001a907:	e8 f9 db fe ff       	call   c0008505 <src_process>
c001a90c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a910:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001a913:	83 c4 0c             	add    esp,0xc
c001a916:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a919:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001a91c:	29 d0                	sub    eax,edx
c001a91e:	c1 e0 02             	shl    eax,0x2
c001a921:	50                   	push   eax
c001a922:	8d 04 91             	lea    eax,[ecx+edx*4]
c001a925:	50                   	push   eax
c001a926:	51                   	push   ecx
c001a927:	e8 6e 5c fe ff       	call   c000059a <memmove>
c001a92c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a930:	83 c4 48             	add    esp,0x48
c001a933:	5b                   	pop    ebx
c001a934:	c3                   	ret    
c001a935:	90                   	nop

c001a936 <SoundChannel::buffer8(unsigned char*, int)>:
c001a936:	53                   	push   ebx
c001a937:	31 c0                	xor    eax,eax
c001a939:	83 ec 08             	sub    esp,0x8
c001a93c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a940:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001a943:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001a946:	74 35                	je     c001a97d <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001a948:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a94c:	7d 2f                	jge    c001a97d <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001a94e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a952:	d9 05 3c a3 03 c0    	fld    DWORD PTR ds:0xc003a33c
c001a958:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001a95c:	40                   	inc    eax
c001a95d:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001a962:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001a965:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001a969:	8d 59 01             	lea    ebx,[ecx+0x1]
c001a96c:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001a96f:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001a972:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001a975:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a978:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001a97b:	eb c9                	jmp    c001a946 <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001a97d:	83 c4 08             	add    esp,0x8
c001a980:	5b                   	pop    ebx
c001a981:	c3                   	ret    

c001a982 <SoundDevice::SoundDevice(char const*)>:
c001a982:	83 ec 1c             	sub    esp,0x1c
c001a985:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a989:	83 ec 08             	sub    esp,0x8
c001a98c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a990:	50                   	push   eax
c001a991:	e8 e4 8c ff ff       	call   c001367a <Device::Device(char const*)>
c001a996:	83 c4 10             	add    esp,0x10
c001a999:	ba 48 a3 03 c0       	mov    edx,0xc003a348
c001a99e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9a2:	89 10                	mov    DWORD PTR [eax],edx
c001a9a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9a8:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a9b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9b6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001a9c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a9c8:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a9cd:	7f 19                	jg     c001a9e8 <SoundDevice::SoundDevice(char const*)+0x66>
c001a9cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a9d7:	83 c2 54             	add    edx,0x54
c001a9da:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001a9e2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a9e6:	eb e0                	jmp    c001a9c8 <SoundDevice::SoundDevice(char const*)+0x46>
c001a9e8:	90                   	nop
c001a9e9:	83 c4 1c             	add    esp,0x1c
c001a9ec:	c3                   	ret    
c001a9ed:	90                   	nop

c001a9ee <SoundDevice::~SoundDevice()>:
c001a9ee:	53                   	push   ebx
c001a9ef:	83 ec 18             	sub    esp,0x18
c001a9f2:	ba 48 a3 03 c0       	mov    edx,0xc003a348
c001a9f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9fb:	89 10                	mov    DWORD PTR [eax],edx
c001a9fd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa05:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001aa0a:	7f 46                	jg     c001aa52 <SoundDevice::~SoundDevice()+0x64>
c001aa0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa10:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aa14:	83 c2 54             	add    edx,0x54
c001aa17:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001aa1b:	85 c0                	test   eax,eax
c001aa1d:	74 2d                	je     c001aa4c <SoundDevice::~SoundDevice()+0x5e>
c001aa1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa23:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aa27:	83 c2 54             	add    edx,0x54
c001aa2a:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001aa2e:	85 db                	test   ebx,ebx
c001aa30:	74 1a                	je     c001aa4c <SoundDevice::~SoundDevice()+0x5e>
c001aa32:	83 ec 0c             	sub    esp,0xc
c001aa35:	53                   	push   ebx
c001aa36:	e8 03 fd ff ff       	call   c001a73e <SoundChannel::~SoundChannel()>
c001aa3b:	83 c4 10             	add    esp,0x10
c001aa3e:	83 ec 08             	sub    esp,0x8
c001aa41:	6a 2c                	push   0x2c
c001aa43:	53                   	push   ebx
c001aa44:	e8 46 77 ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c001aa49:	83 c4 10             	add    esp,0x10
c001aa4c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa50:	eb b3                	jmp    c001aa05 <SoundDevice::~SoundDevice()+0x17>
c001aa52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa56:	83 ec 0c             	sub    esp,0xc
c001aa59:	50                   	push   eax
c001aa5a:	e8 cd 88 ff ff       	call   c001332c <Device::~Device()>
c001aa5f:	83 c4 10             	add    esp,0x10
c001aa62:	90                   	nop
c001aa63:	83 c4 18             	add    esp,0x18
c001aa66:	5b                   	pop    ebx
c001aa67:	c3                   	ret    

c001aa68 <SoundDevice::~SoundDevice()>:
c001aa68:	83 ec 0c             	sub    esp,0xc
c001aa6b:	83 ec 0c             	sub    esp,0xc
c001aa6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aa72:	e8 77 ff ff ff       	call   c001a9ee <SoundDevice::~SoundDevice()>
c001aa77:	83 c4 10             	add    esp,0x10
c001aa7a:	83 ec 08             	sub    esp,0x8
c001aa7d:	68 e4 01 00 00       	push   0x1e4
c001aa82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aa86:	e8 04 77 ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c001aa8b:	83 c4 10             	add    esp,0x10
c001aa8e:	83 c4 0c             	add    esp,0xc
c001aa91:	c3                   	ret    

c001aa92 <SoundDevice::getFreeChannelNum()>:
c001aa92:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aa96:	31 c0                	xor    eax,eax
c001aa98:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001aaa0:	74 09                	je     c001aaab <SoundDevice::getFreeChannelNum()+0x19>
c001aaa2:	40                   	inc    eax
c001aaa3:	83 f8 20             	cmp    eax,0x20
c001aaa6:	75 f0                	jne    c001aa98 <SoundDevice::getFreeChannelNum()+0x6>
c001aaa8:	83 c8 ff             	or     eax,0xffffffff
c001aaab:	c3                   	ret    

c001aaac <SoundDevice::addChannel(SoundChannel*)>:
c001aaac:	56                   	push   esi
c001aaad:	53                   	push   ebx
c001aaae:	51                   	push   ecx
c001aaaf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aab3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aab7:	53                   	push   ebx
c001aab8:	e8 d5 ff ff ff       	call   c001aa92 <SoundDevice::getFreeChannelNum()>
c001aabd:	5a                   	pop    edx
c001aabe:	83 f8 ff             	cmp    eax,0xffffffff
c001aac1:	74 51                	je     c001ab14 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001aac3:	85 f6                	test   esi,esi
c001aac5:	74 4d                	je     c001ab14 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001aac7:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001aace:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001aad5:	75 30                	jne    c001ab07 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001aad7:	83 ec 0c             	sub    esp,0xc
c001aada:	56                   	push   esi
c001aadb:	e8 c4 fd ff ff       	call   c001a8a4 <SoundChannel::getSampleRate()>
c001aae0:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001aae6:	89 34 24             	mov    DWORD PTR [esp],esi
c001aae9:	e8 be fd ff ff       	call   c001a8ac <SoundChannel::getBits()>
c001aaee:	83 c4 0c             	add    esp,0xc
c001aaf1:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001aaf7:	8b 13                	mov    edx,DWORD PTR [ebx]
c001aaf9:	50                   	push   eax
c001aafa:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001ab00:	53                   	push   ebx
c001ab01:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001ab04:	83 c4 10             	add    esp,0x10
c001ab07:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001ab0d:	b8 01 00 00 00       	mov    eax,0x1
c001ab12:	eb 03                	jmp    c001ab17 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001ab14:	83 c8 ff             	or     eax,0xffffffff
c001ab17:	5a                   	pop    edx
c001ab18:	5b                   	pop    ebx
c001ab19:	5e                   	pop    esi
c001ab1a:	c3                   	ret    
c001ab1b:	90                   	nop

c001ab1c <SoundDevice::removeChannel(int)>:
c001ab1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ab20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab24:	83 fa 1f             	cmp    edx,0x1f
c001ab27:	77 23                	ja     c001ab4c <SoundDevice::removeChannel(int)+0x30>
c001ab29:	8d 14 90             	lea    edx,[eax+edx*4]
c001ab2c:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001ab33:	74 17                	je     c001ab4c <SoundDevice::removeChannel(int)+0x30>
c001ab35:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001ab3f:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001ab45:	75 05                	jne    c001ab4c <SoundDevice::removeChannel(int)+0x30>
c001ab47:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab49:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001ab4c:	c3                   	ret    
c001ab4d:	90                   	nop

c001ab4e <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001ab4e:	56                   	push   esi
c001ab4f:	53                   	push   ebx
c001ab50:	31 db                	xor    ebx,ebx
c001ab52:	83 ec 14             	sub    esp,0x14
c001ab55:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ab59:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001ab5d:	7d 55                	jge    c001abb4 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001ab5f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab63:	d9 e8                	fld1   
c001ab65:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001ab68:	d8 0d 78 a3 03 c0    	fmul   DWORD PTR ds:0xc003a378
c001ab6e:	d8 0d 7c a3 03 c0    	fmul   DWORD PTR ds:0xc003a37c
c001ab74:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001ab78:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001ab7c:	d8 15 80 a3 03 c0    	fcom   DWORD PTR ds:0xc003a380
c001ab82:	df e0                	fnstsw ax
c001ab84:	9e                   	sahf   
c001ab85:	72 08                	jb     c001ab8f <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001ab87:	dd d8                	fstp   st(0)
c001ab89:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001ab8d:	eb 22                	jmp    c001abb1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001ab8f:	d9 ee                	fldz   
c001ab91:	d8 d9                	fcomp  st(1)
c001ab93:	df e0                	fnstsw ax
c001ab95:	9e                   	sahf   
c001ab96:	72 08                	jb     c001aba0 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001ab98:	dd d8                	fstp   st(0)
c001ab9a:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001ab9e:	eb 11                	jmp    c001abb1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001aba0:	83 ec 10             	sub    esp,0x10
c001aba3:	d9 1c 24             	fstp   DWORD PTR [esp]
c001aba6:	e8 c1 3a 00 00       	call   c001e66c <lrintf>
c001abab:	83 c4 10             	add    esp,0x10
c001abae:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001abb1:	43                   	inc    ebx
c001abb2:	eb a5                	jmp    c001ab59 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001abb4:	83 c4 14             	add    esp,0x14
c001abb7:	5b                   	pop    ebx
c001abb8:	5e                   	pop    esi
c001abb9:	c3                   	ret    

c001abba <SoundDevice::getAudio(int, float*, float*)>:
c001abba:	55                   	push   ebp
c001abbb:	57                   	push   edi
c001abbc:	56                   	push   esi
c001abbd:	53                   	push   ebx
c001abbe:	31 db                	xor    ebx,ebx
c001abc0:	83 ec 20             	sub    esp,0x20
c001abc3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abc7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001abcb:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001abcf:	c1 e0 02             	shl    eax,0x2
c001abd2:	50                   	push   eax
c001abd3:	6a 00                	push   0x0
c001abd5:	55                   	push   ebp
c001abd6:	e8 2d 5a fe ff       	call   c0000608 <memset>
c001abdb:	83 c4 10             	add    esp,0x10
c001abde:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001abe2:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001abe9:	85 c0                	test   eax,eax
c001abeb:	0f 84 94 00 00 00    	je     c001ac85 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001abf1:	83 ec 0c             	sub    esp,0xc
c001abf4:	50                   	push   eax
c001abf5:	e8 a2 fc ff ff       	call   c001a89c <SoundChannel::paused()>
c001abfa:	83 c4 10             	add    esp,0x10
c001abfd:	84 c0                	test   al,al
c001abff:	0f 85 80 00 00 00    	jne    c001ac85 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001ac05:	83 ec 0c             	sub    esp,0xc
c001ac08:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001ac0f:	e8 76 fb ff ff       	call   c001a78a <SoundChannel::getVolume()>
c001ac14:	83 c4 10             	add    esp,0x10
c001ac17:	85 c0                	test   eax,eax
c001ac19:	74 6a                	je     c001ac85 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001ac1b:	83 ec 0c             	sub    esp,0xc
c001ac1e:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001ac25:	e8 60 fb ff ff       	call   c001a78a <SoundChannel::getVolume()>
c001ac2a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ac2e:	d9 05 84 a3 03 c0    	fld    DWORD PTR ds:0xc003a384
c001ac34:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001ac38:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001ac3c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ac40:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001ac46:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001ac4a:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001ac51:	e8 6e fc ff ff       	call   c001a8c4 <SoundChannel::unbuffer(float*, int, int)>
c001ac56:	83 c4 20             	add    esp,0x20
c001ac59:	31 d2                	xor    edx,edx
c001ac5b:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001ac5f:	39 c2                	cmp    edx,eax
c001ac61:	7d 1a                	jge    c001ac7d <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001ac63:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001ac67:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c001ac6a:	d8 c9                	fmul   st,st(1)
c001ac6c:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001ac72:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001ac76:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001ac7a:	42                   	inc    edx
c001ac7b:	eb e2                	jmp    c001ac5f <SoundDevice::getAudio(int, float*, float*)+0xa5>
c001ac7d:	dd d8                	fstp   st(0)
c001ac7f:	39 c7                	cmp    edi,eax
c001ac81:	7e 02                	jle    c001ac85 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001ac83:	89 c7                	mov    edi,eax
c001ac85:	43                   	inc    ebx
c001ac86:	83 fb 20             	cmp    ebx,0x20
c001ac89:	0f 85 53 ff ff ff    	jne    c001abe2 <SoundDevice::getAudio(int, float*, float*)+0x28>
c001ac8f:	83 c4 1c             	add    esp,0x1c
c001ac92:	89 f8                	mov    eax,edi
c001ac94:	5b                   	pop    ebx
c001ac95:	5e                   	pop    esi
c001ac96:	5f                   	pop    edi
c001ac97:	5d                   	pop    ebp
c001ac98:	c3                   	ret    
c001ac99:	90                   	nop

c001ac9a <PCI::open(int, int, void*)>:
c001ac9a:	83 ec 18             	sub    esp,0x18
c001ac9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aca1:	8b 10                	mov    edx,DWORD PTR [eax]
c001aca3:	50                   	push   eax
c001aca4:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001aca7:	31 c0                	xor    eax,eax
c001aca9:	83 c4 1c             	add    esp,0x1c
c001acac:	c3                   	ret    
c001acad:	90                   	nop

c001acae <PCI::close(int, int, void*)>:
c001acae:	31 c0                	xor    eax,eax
c001acb0:	c3                   	ret    
c001acb1:	90                   	nop

c001acb2 <PCI::PCI()>:
c001acb2:	83 ec 0c             	sub    esp,0xc
c001acb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acb9:	83 ec 08             	sub    esp,0x8
c001acbc:	68 88 a3 03 c0       	push   0xc003a388
c001acc1:	50                   	push   eax
c001acc2:	e8 3f 80 ff ff       	call   c0012d06 <Bus::Bus(char const*)>
c001acc7:	83 c4 10             	add    esp,0x10
c001acca:	ba 34 a4 03 c0       	mov    edx,0xc003a434
c001accf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acd3:	89 10                	mov    DWORD PTR [eax],edx
c001acd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acd9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001acdf:	0f b6 d0             	movzx  edx,al
c001ace2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ace6:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001aced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acf1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001acf7:	0f b6 d0             	movzx  edx,al
c001acfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acfe:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001ad03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad07:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ad0d:	8d 50 01             	lea    edx,[eax+0x1]
c001ad10:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad14:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ad1a:	0f b6 d0             	movzx  edx,al
c001ad1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad21:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ad25:	83 c9 c0             	or     ecx,0xffffffc0
c001ad28:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ad2c:	90                   	nop
c001ad2d:	83 c4 0c             	add    esp,0xc
c001ad30:	c3                   	ret    
c001ad31:	90                   	nop

c001ad32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ad32:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ad36:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ad3b:	89 ca                	mov    edx,ecx
c001ad3d:	c1 e0 10             	shl    eax,0x10
c001ad40:	81 e2 fc 00 00 00    	and    edx,0xfc
c001ad46:	09 d0                	or     eax,edx
c001ad48:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001ad4d:	c1 e2 08             	shl    edx,0x8
c001ad50:	09 d0                	or     eax,edx
c001ad52:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001ad57:	c1 e2 0b             	shl    edx,0xb
c001ad5a:	09 d0                	or     eax,edx
c001ad5c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ad61:	0d 00 00 00 80       	or     eax,0x80000000
c001ad66:	ef                   	out    dx,eax
c001ad67:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ad6c:	ed                   	in     eax,dx
c001ad6d:	83 e1 02             	and    ecx,0x2
c001ad70:	0f b6 c9             	movzx  ecx,cl
c001ad73:	c1 e1 03             	shl    ecx,0x3
c001ad76:	d3 e8                	shr    eax,cl
c001ad78:	c3                   	ret    
c001ad79:	90                   	nop

c001ad7a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001ad7a:	6a 00                	push   0x0
c001ad7c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ad81:	50                   	push   eax
c001ad82:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ad87:	50                   	push   eax
c001ad88:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ad8d:	50                   	push   eax
c001ad8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ad92:	e8 9b ff ff ff       	call   c001ad32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ad97:	83 c4 14             	add    esp,0x14
c001ad9a:	c3                   	ret    
c001ad9b:	90                   	nop

c001ad9c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001ad9c:	6a 0e                	push   0xe
c001ad9e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ada3:	50                   	push   eax
c001ada4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ada9:	50                   	push   eax
c001adaa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001adaf:	50                   	push   eax
c001adb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001adb4:	e8 79 ff ff ff       	call   c001ad32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001adb9:	83 c4 14             	add    esp,0x14
c001adbc:	0f b6 c0             	movzx  eax,al
c001adbf:	c3                   	ret    

c001adc0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001adc0:	55                   	push   ebp
c001adc1:	57                   	push   edi
c001adc2:	56                   	push   esi
c001adc3:	53                   	push   ebx
c001adc4:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001adc9:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001adce:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001add3:	6a 0a                	push   0xa
c001add5:	56                   	push   esi
c001add6:	55                   	push   ebp
c001add7:	57                   	push   edi
c001add8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001addc:	e8 51 ff ff ff       	call   c001ad32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ade1:	6a 0a                	push   0xa
c001ade3:	89 c3                	mov    ebx,eax
c001ade5:	56                   	push   esi
c001ade6:	0f b6 db             	movzx  ebx,bl
c001ade9:	55                   	push   ebp
c001adea:	57                   	push   edi
c001adeb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001adef:	e8 3e ff ff ff       	call   c001ad32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001adf4:	83 c4 28             	add    esp,0x28
c001adf7:	25 00 ff 00 00       	and    eax,0xff00
c001adfc:	09 d8                	or     eax,ebx
c001adfe:	5b                   	pop    ebx
c001adff:	5e                   	pop    esi
c001ae00:	5f                   	pop    edi
c001ae01:	5d                   	pop    ebp
c001ae02:	c3                   	ret    
c001ae03:	90                   	nop

c001ae04 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001ae04:	6a 08                	push   0x8
c001ae06:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ae0b:	50                   	push   eax
c001ae0c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ae11:	50                   	push   eax
c001ae12:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ae17:	50                   	push   eax
c001ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ae1c:	e8 11 ff ff ff       	call   c001ad32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae21:	83 c4 14             	add    esp,0x14
c001ae24:	0f b6 c4             	movzx  eax,ah
c001ae27:	c3                   	ret    

c001ae28 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001ae28:	6a 08                	push   0x8
c001ae2a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ae2f:	50                   	push   eax
c001ae30:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ae35:	50                   	push   eax
c001ae36:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ae3b:	50                   	push   eax
c001ae3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ae40:	e8 ed fe ff ff       	call   c001ad32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae45:	83 c4 14             	add    esp,0x14
c001ae48:	c3                   	ret    
c001ae49:	90                   	nop

c001ae4a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001ae4a:	6a 3c                	push   0x3c
c001ae4c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ae51:	50                   	push   eax
c001ae52:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ae57:	50                   	push   eax
c001ae58:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ae5d:	50                   	push   eax
c001ae5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ae62:	e8 cb fe ff ff       	call   c001ad32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae67:	83 c4 14             	add    esp,0x14
c001ae6a:	c3                   	ret    
c001ae6b:	90                   	nop

c001ae6c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001ae6c:	6a 18                	push   0x18
c001ae6e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ae73:	50                   	push   eax
c001ae74:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ae79:	50                   	push   eax
c001ae7a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ae7f:	50                   	push   eax
c001ae80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ae84:	e8 a9 fe ff ff       	call   c001ad32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae89:	83 c4 14             	add    esp,0x14
c001ae8c:	0f b6 c4             	movzx  eax,ah
c001ae8f:	c3                   	ret    

c001ae90 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ae90:	55                   	push   ebp
c001ae91:	57                   	push   edi
c001ae92:	56                   	push   esi
c001ae93:	53                   	push   ebx
c001ae94:	50                   	push   eax
c001ae95:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001ae99:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001ae9e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001aea3:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001aea8:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001aeaf:	8d 43 12             	lea    eax,[ebx+0x12]
c001aeb2:	83 c3 10             	add    ebx,0x10
c001aeb5:	0f b6 c0             	movzx  eax,al
c001aeb8:	0f b6 db             	movzx  ebx,bl
c001aebb:	50                   	push   eax
c001aebc:	51                   	push   ecx
c001aebd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001aec1:	57                   	push   edi
c001aec2:	55                   	push   ebp
c001aec3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001aec7:	e8 66 fe ff ff       	call   c001ad32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aecc:	53                   	push   ebx
c001aecd:	89 c6                	mov    esi,eax
c001aecf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001aed3:	c1 e6 10             	shl    esi,0x10
c001aed6:	51                   	push   ecx
c001aed7:	57                   	push   edi
c001aed8:	55                   	push   ebp
c001aed9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aedd:	e8 50 fe ff ff       	call   c001ad32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aee2:	83 c4 2c             	add    esp,0x2c
c001aee5:	0f b7 c0             	movzx  eax,ax
c001aee8:	5b                   	pop    ebx
c001aee9:	09 f0                	or     eax,esi
c001aeeb:	5e                   	pop    esi
c001aeec:	5f                   	pop    edi
c001aeed:	5d                   	pop    ebp
c001aeee:	c3                   	ret    
c001aeef:	90                   	nop

c001aef0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001aef0:	53                   	push   ebx
c001aef1:	ba f8 0c 00 00       	mov    edx,0xcf8
c001aef6:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001aefb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aeff:	c1 e1 10             	shl    ecx,0x10
c001af02:	25 fc 00 00 00       	and    eax,0xfc
c001af07:	09 c1                	or     ecx,eax
c001af09:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001af0e:	c1 e0 08             	shl    eax,0x8
c001af11:	09 c1                	or     ecx,eax
c001af13:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001af18:	c1 e0 0b             	shl    eax,0xb
c001af1b:	09 c1                	or     ecx,eax
c001af1d:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001af23:	89 c8                	mov    eax,ecx
c001af25:	ef                   	out    dx,eax
c001af26:	ba fc 0c 00 00       	mov    edx,0xcfc
c001af2b:	ed                   	in     eax,dx
c001af2c:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001af31:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001af36:	74 0a                	je     c001af42 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001af38:	0f b7 d8             	movzx  ebx,ax
c001af3b:	89 d0                	mov    eax,edx
c001af3d:	c1 e0 10             	shl    eax,0x10
c001af40:	eb 05                	jmp    c001af47 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001af42:	66 31 c0             	xor    ax,ax
c001af45:	89 d3                	mov    ebx,edx
c001af47:	09 c3                	or     ebx,eax
c001af49:	ba f8 0c 00 00       	mov    edx,0xcf8
c001af4e:	89 c8                	mov    eax,ecx
c001af50:	ef                   	out    dx,eax
c001af51:	ba fc 0c 00 00       	mov    edx,0xcfc
c001af56:	89 d8                	mov    eax,ebx
c001af58:	ef                   	out    dx,eax
c001af59:	5b                   	pop    ebx
c001af5a:	c3                   	ret    
c001af5b:	90                   	nop

c001af5c <PCI::checkBus(unsigned char)>:
c001af5c:	56                   	push   esi
c001af5d:	53                   	push   ebx
c001af5e:	31 db                	xor    ebx,ebx
c001af60:	51                   	push   ecx
c001af61:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001af66:	52                   	push   edx
c001af67:	53                   	push   ebx
c001af68:	43                   	inc    ebx
c001af69:	56                   	push   esi
c001af6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af6e:	e8 4d 03 00 00       	call   c001b2c0 <PCI::checkDevice(unsigned char, unsigned char)>
c001af73:	83 c4 10             	add    esp,0x10
c001af76:	83 fb 20             	cmp    ebx,0x20
c001af79:	75 eb                	jne    c001af66 <PCI::checkBus(unsigned char)+0xa>
c001af7b:	58                   	pop    eax
c001af7c:	5b                   	pop    ebx
c001af7d:	5e                   	pop    esi
c001af7e:	c3                   	ret    
c001af7f:	90                   	nop

c001af80 <PCI::foundDevice(PCIDeviceInfo)>:
c001af80:	55                   	push   ebp
c001af81:	57                   	push   edi
c001af82:	56                   	push   esi
c001af83:	53                   	push   ebx
c001af84:	83 ec 1c             	sub    esp,0x1c
c001af87:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001af8b:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001af91:	0f 84 51 01 00 00    	je     c001b0e8 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001af97:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001af9b:	66 81 f9 06 04       	cmp    cx,0x406
c001afa0:	75 2c                	jne    c001afce <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001afa2:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001afa7:	50                   	push   eax
c001afa8:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001afad:	50                   	push   eax
c001afae:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001afb3:	50                   	push   eax
c001afb4:	56                   	push   esi
c001afb5:	e8 b2 fe ff ff       	call   c001ae6c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001afba:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001afbe:	0f b6 c0             	movzx  eax,al
c001afc1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001afc5:	83 c4 2c             	add    esp,0x2c
c001afc8:	5b                   	pop    ebx
c001afc9:	5e                   	pop    esi
c001afca:	5f                   	pop    edi
c001afcb:	5d                   	pop    ebp
c001afcc:	eb 8e                	jmp    c001af5c <PCI::checkBus(unsigned char)>
c001afce:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001afd2:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001afd8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001afdc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001afe0:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001afe4:	88 d3                	mov    bl,dl
c001afe6:	85 c0                	test   eax,eax
c001afe8:	74 33                	je     c001b01d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001afea:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001afed:	85 d2                	test   edx,edx
c001afef:	74 28                	je     c001b019 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001aff1:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001aff7:	31 ef                	xor    edi,ebp
c001aff9:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001afff:	75 18                	jne    c001b019 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b001:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b005:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001b00b:	75 0c                	jne    c001b019 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b00d:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001b013:	0f 84 cf 00 00 00    	je     c001b0e8 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b019:	8b 00                	mov    eax,DWORD PTR [eax]
c001b01b:	eb c9                	jmp    c001afe6 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001b01d:	66 81 f9 01 06       	cmp    cx,0x601
c001b022:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001b026:	75 18                	jne    c001b040 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001b028:	83 ec 0c             	sub    esp,0xc
c001b02b:	68 58 01 00 00       	push   0x158
c001b030:	e8 4b 71 ff ff       	call   c0012180 <operator new(unsigned long)>
c001b035:	59                   	pop    ecx
c001b036:	89 c5                	mov    ebp,eax
c001b038:	5f                   	pop    edi
c001b039:	68 90 a3 03 c0       	push   0xc003a390
c001b03e:	eb 7d                	jmp    c001b0bd <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001b040:	66 81 f9 01 01       	cmp    cx,0x101
c001b045:	75 60                	jne    c001b0a7 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001b047:	83 ec 0c             	sub    esp,0xc
c001b04a:	68 70 02 00 00       	push   0x270
c001b04f:	e8 2c 71 ff ff       	call   c0012180 <operator new(unsigned long)>
c001b054:	89 04 24             	mov    DWORD PTR [esp],eax
c001b057:	89 c5                	mov    ebp,eax
c001b059:	e8 e0 07 00 00       	call   c001b83e <IDE::IDE()>
c001b05e:	58                   	pop    eax
c001b05f:	5a                   	pop    edx
c001b060:	55                   	push   ebp
c001b061:	56                   	push   esi
c001b062:	e8 23 84 ff ff       	call   c001348a <Device::addChild(Device*)>
c001b067:	83 ec 1c             	sub    esp,0x1c
c001b06a:	b9 09 00 00 00       	mov    ecx,0x9
c001b06f:	fc                   	cld    
c001b070:	89 e7                	mov    edi,esp
c001b072:	89 de                	mov    esi,ebx
c001b074:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b076:	55                   	push   ebp
c001b077:	e8 e8 82 ff ff       	call   c0013364 <Device::preOpenPCI(PCIDeviceInfo)>
c001b07c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b07f:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b083:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b08b:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b093:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b09b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b09e:	83 c4 4c             	add    esp,0x4c
c001b0a1:	5b                   	pop    ebx
c001b0a2:	5e                   	pop    esi
c001b0a3:	5f                   	pop    edi
c001b0a4:	5d                   	pop    ebp
c001b0a5:	ff e0                	jmp    eax
c001b0a7:	83 ec 0c             	sub    esp,0xc
c001b0aa:	68 58 01 00 00       	push   0x158
c001b0af:	e8 cc 70 ff ff       	call   c0012180 <operator new(unsigned long)>
c001b0b4:	59                   	pop    ecx
c001b0b5:	89 c5                	mov    ebp,eax
c001b0b7:	5f                   	pop    edi
c001b0b8:	68 af a3 03 c0       	push   0xc003a3af
c001b0bd:	55                   	push   ebp
c001b0be:	e8 b3 86 ff ff       	call   c0013776 <DriverlessDevice::DriverlessDevice(char const*)>
c001b0c3:	58                   	pop    eax
c001b0c4:	5a                   	pop    edx
c001b0c5:	55                   	push   ebp
c001b0c6:	56                   	push   esi
c001b0c7:	e8 be 83 ff ff       	call   c001348a <Device::addChild(Device*)>
c001b0cc:	b9 09 00 00 00       	mov    ecx,0x9
c001b0d1:	fc                   	cld    
c001b0d2:	89 df                	mov    edi,ebx
c001b0d4:	89 de                	mov    esi,ebx
c001b0d6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b0d8:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001b0dc:	83 c4 2c             	add    esp,0x2c
c001b0df:	5b                   	pop    ebx
c001b0e0:	5e                   	pop    esi
c001b0e1:	5f                   	pop    edi
c001b0e2:	5d                   	pop    ebp
c001b0e3:	e9 7c 82 ff ff       	jmp    c0013364 <Device::preOpenPCI(PCIDeviceInfo)>
c001b0e8:	83 c4 1c             	add    esp,0x1c
c001b0eb:	5b                   	pop    ebx
c001b0ec:	5e                   	pop    esi
c001b0ed:	5f                   	pop    edi
c001b0ee:	5d                   	pop    ebp
c001b0ef:	c3                   	ret    

c001b0f0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b0f0:	55                   	push   ebp
c001b0f1:	57                   	push   edi
c001b0f2:	56                   	push   esi
c001b0f3:	53                   	push   ebx
c001b0f4:	83 ec 5c             	sub    esp,0x5c
c001b0f7:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001b0fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b0ff:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001b103:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001b108:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b10c:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001b110:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001b115:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b119:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001b11e:	6a 0c                	push   0xc
c001b120:	55                   	push   ebp
c001b121:	53                   	push   ebx
c001b122:	57                   	push   edi
c001b123:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001b12a:	e8 03 fc ff ff       	call   c001ad32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b12f:	83 c4 0c             	add    esp,0xc
c001b132:	6a 00                	push   0x0
c001b134:	68 c9 a3 03 c0       	push   0xc003a3c9
c001b139:	e8 92 1a ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001b13e:	55                   	push   ebp
c001b13f:	53                   	push   ebx
c001b140:	57                   	push   edi
c001b141:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b148:	e8 73 fc ff ff       	call   c001adc0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b14d:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001b152:	83 c4 20             	add    esp,0x20
c001b155:	55                   	push   ebp
c001b156:	53                   	push   ebx
c001b157:	57                   	push   edi
c001b158:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b15c:	e8 e9 fc ff ff       	call   c001ae4a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b161:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001b168:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b16c:	55                   	push   ebp
c001b16d:	53                   	push   ebx
c001b16e:	57                   	push   edi
c001b16f:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b176:	e8 b7 fb ff ff       	call   c001ad32 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b17b:	0f b6 c4             	movzx  eax,ah
c001b17e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b182:	83 c4 18             	add    esp,0x18
c001b185:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b189:	68 dd a3 03 c0       	push   0xc003a3dd
c001b18e:	e8 3d 1a ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001b193:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b197:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001b19b:	a1 08 b7 03 c0       	mov    eax,ds:0xc003b708
c001b1a0:	83 c4 10             	add    esp,0x10
c001b1a3:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001b1a9:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001b1b0:	74 6c                	je     c001b21e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b1b2:	31 f6                	xor    esi,esi
c001b1b4:	8b 15 08 b7 03 c0    	mov    edx,DWORD PTR ds:0xc003b708
c001b1ba:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b1c0:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001b1c6:	7e 56                	jle    c001b21e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b1c8:	8d 14 f2             	lea    edx,[edx+esi*8]
c001b1cb:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001b1d2:	39 cb                	cmp    ebx,ecx
c001b1d4:	75 45                	jne    c001b21b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b1d6:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001b1dd:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001b1e1:	75 38                	jne    c001b21b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b1e3:	83 ec 0c             	sub    esp,0xc
c001b1e6:	68 ec a3 03 c0       	push   0xc003a3ec
c001b1eb:	e8 e0 19 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001b1f0:	8b 15 08 b7 03 c0    	mov    edx,DWORD PTR ds:0xc003b708
c001b1f6:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b1fc:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001b204:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001b208:	52                   	push   edx
c001b209:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b20d:	53                   	push   ebx
c001b20e:	68 11 a4 03 c0       	push   0xc003a411
c001b213:	e8 b8 19 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001b218:	83 c4 20             	add    esp,0x20
c001b21b:	46                   	inc    esi
c001b21c:	eb 96                	jmp    c001b1b4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001b21e:	31 d2                	xor    edx,edx
c001b220:	83 ec 0c             	sub    esp,0xc
c001b223:	55                   	push   ebp
c001b224:	53                   	push   ebx
c001b225:	57                   	push   edi
c001b226:	52                   	push   edx
c001b227:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b22b:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b232:	e8 59 fc ff ff       	call   c001ae90 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b237:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001b23b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b23f:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b243:	42                   	inc    edx
c001b244:	83 c4 20             	add    esp,0x20
c001b247:	83 fa 06             	cmp    edx,0x6
c001b24a:	75 d4                	jne    c001b220 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001b24c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b250:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001b254:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001b258:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001b25c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001b260:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b264:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b269:	86 e0                	xchg   al,ah
c001b26b:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001b270:	55                   	push   ebp
c001b271:	53                   	push   ebx
c001b272:	57                   	push   edi
c001b273:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b277:	e8 88 fb ff ff       	call   c001ae04 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b27c:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b280:	55                   	push   ebp
c001b281:	53                   	push   ebx
c001b282:	57                   	push   edi
c001b283:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b28a:	e8 eb fa ff ff       	call   c001ad7a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b28f:	83 ec 0c             	sub    esp,0xc
c001b292:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001b297:	b9 09 00 00 00       	mov    ecx,0x9
c001b29c:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001b2a0:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001b2a4:	fc                   	cld    
c001b2a5:	89 e7                	mov    edi,esp
c001b2a7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b2a9:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001b2b0:	e8 cb fc ff ff       	call   c001af80 <PCI::foundDevice(PCIDeviceInfo)>
c001b2b5:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b2bb:	5b                   	pop    ebx
c001b2bc:	5e                   	pop    esi
c001b2bd:	5f                   	pop    edi
c001b2be:	5d                   	pop    ebp
c001b2bf:	c3                   	ret    

c001b2c0 <PCI::checkDevice(unsigned char, unsigned char)>:
c001b2c0:	55                   	push   ebp
c001b2c1:	57                   	push   edi
c001b2c2:	56                   	push   esi
c001b2c3:	53                   	push   ebx
c001b2c4:	83 ec 0c             	sub    esp,0xc
c001b2c7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b2cb:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b2d0:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b2d5:	6a 00                	push   0x0
c001b2d7:	56                   	push   esi
c001b2d8:	57                   	push   edi
c001b2d9:	55                   	push   ebp
c001b2da:	e8 9b fa ff ff       	call   c001ad7a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b2df:	6a 00                	push   0x0
c001b2e1:	56                   	push   esi
c001b2e2:	57                   	push   edi
c001b2e3:	55                   	push   ebp
c001b2e4:	e8 07 fe ff ff       	call   c001b0f0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b2e9:	83 c4 20             	add    esp,0x20
c001b2ec:	6a 00                	push   0x0
c001b2ee:	56                   	push   esi
c001b2ef:	57                   	push   edi
c001b2f0:	55                   	push   ebp
c001b2f1:	e8 a6 fa ff ff       	call   c001ad9c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b2f6:	83 c4 10             	add    esp,0x10
c001b2f9:	84 c0                	test   al,al
c001b2fb:	79 27                	jns    c001b324 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b2fd:	bb 01 00 00 00       	mov    ebx,0x1
c001b302:	53                   	push   ebx
c001b303:	56                   	push   esi
c001b304:	57                   	push   edi
c001b305:	55                   	push   ebp
c001b306:	e8 6f fa ff ff       	call   c001ad7a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b30b:	83 c4 10             	add    esp,0x10
c001b30e:	66 40                	inc    ax
c001b310:	74 0c                	je     c001b31e <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001b312:	53                   	push   ebx
c001b313:	56                   	push   esi
c001b314:	57                   	push   edi
c001b315:	55                   	push   ebp
c001b316:	e8 d5 fd ff ff       	call   c001b0f0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b31b:	83 c4 10             	add    esp,0x10
c001b31e:	43                   	inc    ebx
c001b31f:	83 fb 08             	cmp    ebx,0x8
c001b322:	75 de                	jne    c001b302 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b324:	83 c4 0c             	add    esp,0xc
c001b327:	5b                   	pop    ebx
c001b328:	5e                   	pop    esi
c001b329:	5f                   	pop    edi
c001b32a:	5d                   	pop    ebp
c001b32b:	c3                   	ret    

c001b32c <PCI::detect()>:
c001b32c:	56                   	push   esi
c001b32d:	53                   	push   ebx
c001b32e:	53                   	push   ebx
c001b32f:	31 db                	xor    ebx,ebx
c001b331:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b335:	6a 00                	push   0x0
c001b337:	6a 00                	push   0x0
c001b339:	6a 00                	push   0x0
c001b33b:	56                   	push   esi
c001b33c:	e8 5b fa ff ff       	call   c001ad9c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b341:	83 c4 10             	add    esp,0x10
c001b344:	a8 80                	test   al,0x80
c001b346:	75 21                	jne    c001b369 <PCI::detect()+0x3d>
c001b348:	51                   	push   ecx
c001b349:	51                   	push   ecx
c001b34a:	6a 00                	push   0x0
c001b34c:	56                   	push   esi
c001b34d:	e8 0a fc ff ff       	call   c001af5c <PCI::checkBus(unsigned char)>
c001b352:	83 c4 10             	add    esp,0x10
c001b355:	eb 24                	jmp    c001b37b <PCI::detect()+0x4f>
c001b357:	52                   	push   edx
c001b358:	52                   	push   edx
c001b359:	53                   	push   ebx
c001b35a:	43                   	inc    ebx
c001b35b:	56                   	push   esi
c001b35c:	e8 fb fb ff ff       	call   c001af5c <PCI::checkBus(unsigned char)>
c001b361:	83 c4 10             	add    esp,0x10
c001b364:	83 fb 08             	cmp    ebx,0x8
c001b367:	74 12                	je     c001b37b <PCI::detect()+0x4f>
c001b369:	53                   	push   ebx
c001b36a:	6a 00                	push   0x0
c001b36c:	6a 00                	push   0x0
c001b36e:	56                   	push   esi
c001b36f:	e8 06 fa ff ff       	call   c001ad7a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b374:	83 c4 10             	add    esp,0x10
c001b377:	66 40                	inc    ax
c001b379:	74 dc                	je     c001b357 <PCI::detect()+0x2b>
c001b37b:	58                   	pop    eax
c001b37c:	5b                   	pop    ebx
c001b37d:	5e                   	pop    esi
c001b37e:	c3                   	ret    
c001b37f:	90                   	nop

c001b380 <RTC::open(int, int, void*)>:
c001b380:	31 c0                	xor    eax,eax
c001b382:	c3                   	ret    
c001b383:	90                   	nop

c001b384 <RTC::close(int, int, void*)>:
c001b384:	31 c0                	xor    eax,eax
c001b386:	c3                   	ret    
c001b387:	90                   	nop

c001b388 <RTC::timeInSecondsUTC()>:
c001b388:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b38c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b392:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b398:	c3                   	ret    
c001b399:	90                   	nop

c001b39a <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001b39a:	31 c0                	xor    eax,eax
c001b39c:	c3                   	ret    
c001b39d:	90                   	nop

c001b39e <RTC::timeInDatetimeUTC()>:
c001b39e:	53                   	push   ebx
c001b39f:	83 ec 14             	sub    esp,0x14
c001b3a2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b3a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3aa:	8b 10                	mov    edx,DWORD PTR [eax]
c001b3ac:	50                   	push   eax
c001b3ad:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001b3b0:	83 c4 0c             	add    esp,0xc
c001b3b3:	52                   	push   edx
c001b3b4:	50                   	push   eax
c001b3b5:	53                   	push   ebx
c001b3b6:	e8 e3 7d ff ff       	call   c001319e <secondsToDatetime(unsigned long long)>
c001b3bb:	89 d8                	mov    eax,ebx
c001b3bd:	83 c4 14             	add    esp,0x14
c001b3c0:	5b                   	pop    ebx
c001b3c1:	c2 04 00             	ret    0x4

c001b3c4 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001b3c4:	56                   	push   esi
c001b3c5:	53                   	push   ebx
c001b3c6:	83 ec 14             	sub    esp,0x14
c001b3c9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b3cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3cf:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001b3d2:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b3d6:	52                   	push   edx
c001b3d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3df:	50                   	push   eax
c001b3e0:	e8 b9 7d ff ff       	call   c001319e <secondsToDatetime(unsigned long long)>
c001b3e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b3e9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b3ed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b3f1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001b3f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001b3f9:	89 f0                	mov    eax,esi
c001b3fb:	83 c4 20             	add    esp,0x20
c001b3fe:	5b                   	pop    ebx
c001b3ff:	5e                   	pop    esi
c001b400:	ff e0                	jmp    eax

c001b402 <RTC::~RTC()>:
c001b402:	83 ec 0c             	sub    esp,0xc
c001b405:	ba 8c a4 03 c0       	mov    edx,0xc003a48c
c001b40a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b40e:	89 10                	mov    DWORD PTR [eax],edx
c001b410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b414:	83 ec 0c             	sub    esp,0xc
c001b417:	50                   	push   eax
c001b418:	e8 0b 7b ff ff       	call   c0012f28 <Clock::~Clock()>
c001b41d:	83 c4 10             	add    esp,0x10
c001b420:	90                   	nop
c001b421:	83 c4 0c             	add    esp,0xc
c001b424:	c3                   	ret    
c001b425:	90                   	nop

c001b426 <RTC::~RTC()>:
c001b426:	83 ec 0c             	sub    esp,0xc
c001b429:	83 ec 0c             	sub    esp,0xc
c001b42c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b430:	e8 cd ff ff ff       	call   c001b402 <RTC::~RTC()>
c001b435:	83 c4 10             	add    esp,0x10
c001b438:	83 ec 08             	sub    esp,0x8
c001b43b:	68 60 01 00 00       	push   0x160
c001b440:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b444:	e8 46 6d ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c001b449:	83 c4 10             	add    esp,0x10
c001b44c:	83 c4 0c             	add    esp,0xc
c001b44f:	c3                   	ret    

c001b450 <RTC::get_update_in_progress_flag()>:
c001b450:	83 ec 14             	sub    esp,0x14
c001b453:	6a 0a                	push   0xa
c001b455:	ff 35 08 b7 03 c0    	push   DWORD PTR ds:0xc003b708
c001b45b:	e8 dc fe fe ff       	call   c000b33c <Computer::readCMOS(unsigned char)>
c001b460:	83 c4 1c             	add    esp,0x1c
c001b463:	c0 e8 07             	shr    al,0x7
c001b466:	c3                   	ret    
c001b467:	90                   	nop

c001b468 <RTC::completeRTCRefresh()>:
c001b468:	55                   	push   ebp
c001b469:	57                   	push   edi
c001b46a:	56                   	push   esi
c001b46b:	53                   	push   ebx
c001b46c:	83 ec 2c             	sub    esp,0x2c
c001b46f:	8b 35 d0 c0 03 c0    	mov    esi,DWORD PTR ds:0xc003c0d0
c001b475:	8b 3d d4 c0 03 c0    	mov    edi,DWORD PTR ds:0xc003c0d4
c001b47b:	81 c6 00 94 35 77    	add    esi,0x77359400
c001b481:	83 d7 00             	adc    edi,0x0
c001b484:	83 ec 0c             	sub    esp,0xc
c001b487:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b48b:	e8 c0 ff ff ff       	call   c001b450 <RTC::get_update_in_progress_flag()>
c001b490:	83 c4 10             	add    esp,0x10
c001b493:	84 c0                	test   al,al
c001b495:	74 10                	je     c001b4a7 <RTC::completeRTCRefresh()+0x3f>
c001b497:	3b 35 d0 c0 03 c0    	cmp    esi,DWORD PTR ds:0xc003c0d0
c001b49d:	89 f8                	mov    eax,edi
c001b49f:	1b 05 d4 c0 03 c0    	sbb    eax,DWORD PTR ds:0xc003c0d4
c001b4a5:	73 dd                	jae    c001b484 <RTC::completeRTCRefresh()+0x1c>
c001b4a7:	55                   	push   ebp
c001b4a8:	55                   	push   ebp
c001b4a9:	6a 00                	push   0x0
c001b4ab:	ff 35 08 b7 03 c0    	push   DWORD PTR ds:0xc003b708
c001b4b1:	e8 86 fe fe ff       	call   c000b33c <Computer::readCMOS(unsigned char)>
c001b4b6:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b4ba:	58                   	pop    eax
c001b4bb:	5a                   	pop    edx
c001b4bc:	6a 02                	push   0x2
c001b4be:	ff 35 08 b7 03 c0    	push   DWORD PTR ds:0xc003b708
c001b4c4:	e8 73 fe fe ff       	call   c000b33c <Computer::readCMOS(unsigned char)>
c001b4c9:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001b4cd:	59                   	pop    ecx
c001b4ce:	5b                   	pop    ebx
c001b4cf:	6a 04                	push   0x4
c001b4d1:	ff 35 08 b7 03 c0    	push   DWORD PTR ds:0xc003b708
c001b4d7:	e8 60 fe fe ff       	call   c000b33c <Computer::readCMOS(unsigned char)>
c001b4dc:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b4e0:	5e                   	pop    esi
c001b4e1:	5f                   	pop    edi
c001b4e2:	6a 07                	push   0x7
c001b4e4:	ff 35 08 b7 03 c0    	push   DWORD PTR ds:0xc003b708
c001b4ea:	e8 4d fe fe ff       	call   c000b33c <Computer::readCMOS(unsigned char)>
c001b4ef:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c001b4f3:	5d                   	pop    ebp
c001b4f4:	58                   	pop    eax
c001b4f5:	6a 08                	push   0x8
c001b4f7:	ff 35 08 b7 03 c0    	push   DWORD PTR ds:0xc003b708
c001b4fd:	e8 3a fe fe ff       	call   c000b33c <Computer::readCMOS(unsigned char)>
c001b502:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c001b506:	58                   	pop    eax
c001b507:	5a                   	pop    edx
c001b508:	6a 09                	push   0x9
c001b50a:	ff 35 08 b7 03 c0    	push   DWORD PTR ds:0xc003b708
c001b510:	e8 27 fe fe ff       	call   c000b33c <Computer::readCMOS(unsigned char)>
c001b515:	83 c4 10             	add    esp,0x10
c001b518:	0f b6 e8             	movzx  ebp,al
c001b51b:	8b 35 d0 c0 03 c0    	mov    esi,DWORD PTR ds:0xc003c0d0
c001b521:	8b 3d d4 c0 03 c0    	mov    edi,DWORD PTR ds:0xc003c0d4
c001b527:	81 c6 00 94 35 77    	add    esi,0x77359400
c001b52d:	83 d7 00             	adc    edi,0x0
c001b530:	83 ec 0c             	sub    esp,0xc
c001b533:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b537:	e8 14 ff ff ff       	call   c001b450 <RTC::get_update_in_progress_flag()>
c001b53c:	83 c4 10             	add    esp,0x10
c001b53f:	84 c0                	test   al,al
c001b541:	74 10                	je     c001b553 <RTC::completeRTCRefresh()+0xeb>
c001b543:	3b 35 d0 c0 03 c0    	cmp    esi,DWORD PTR ds:0xc003c0d0
c001b549:	89 f8                	mov    eax,edi
c001b54b:	1b 05 d4 c0 03 c0    	sbb    eax,DWORD PTR ds:0xc003c0d4
c001b551:	73 dd                	jae    c001b530 <RTC::completeRTCRefresh()+0xc8>
c001b553:	50                   	push   eax
c001b554:	50                   	push   eax
c001b555:	6a 00                	push   0x0
c001b557:	ff 35 08 b7 03 c0    	push   DWORD PTR ds:0xc003b708
c001b55d:	e8 da fd fe ff       	call   c000b33c <Computer::readCMOS(unsigned char)>
c001b562:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001b566:	58                   	pop    eax
c001b567:	5a                   	pop    edx
c001b568:	6a 02                	push   0x2
c001b56a:	ff 35 08 b7 03 c0    	push   DWORD PTR ds:0xc003b708
c001b570:	e8 c7 fd fe ff       	call   c000b33c <Computer::readCMOS(unsigned char)>
c001b575:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b579:	59                   	pop    ecx
c001b57a:	5b                   	pop    ebx
c001b57b:	6a 04                	push   0x4
c001b57d:	ff 35 08 b7 03 c0    	push   DWORD PTR ds:0xc003b708
c001b583:	e8 b4 fd fe ff       	call   c000b33c <Computer::readCMOS(unsigned char)>
c001b588:	5e                   	pop    esi
c001b589:	88 c3                	mov    bl,al
c001b58b:	5f                   	pop    edi
c001b58c:	6a 07                	push   0x7
c001b58e:	ff 35 08 b7 03 c0    	push   DWORD PTR ds:0xc003b708
c001b594:	e8 a3 fd fe ff       	call   c000b33c <Computer::readCMOS(unsigned char)>
c001b599:	89 c6                	mov    esi,eax
c001b59b:	58                   	pop    eax
c001b59c:	5a                   	pop    edx
c001b59d:	6a 08                	push   0x8
c001b59f:	ff 35 08 b7 03 c0    	push   DWORD PTR ds:0xc003b708
c001b5a5:	e8 92 fd fe ff       	call   c000b33c <Computer::readCMOS(unsigned char)>
c001b5aa:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b5ae:	59                   	pop    ecx
c001b5af:	5f                   	pop    edi
c001b5b0:	6a 09                	push   0x9
c001b5b2:	ff 35 08 b7 03 c0    	push   DWORD PTR ds:0xc003b708
c001b5b8:	e8 7f fd fe ff       	call   c000b33c <Computer::readCMOS(unsigned char)>
c001b5bd:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b5c1:	0f b6 f8             	movzx  edi,al
c001b5c4:	83 c4 10             	add    esp,0x10
c001b5c7:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001b5ca:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001b5ce:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c001b5d2:	89 f1                	mov    ecx,esi
c001b5d4:	0f 94 c0             	sete   al
c001b5d7:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c001b5db:	0f 94 c2             	sete   dl
c001b5de:	21 d0                	and    eax,edx
c001b5e0:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c001b5e4:	0f 94 c2             	sete   dl
c001b5e7:	21 c2                	and    edx,eax
c001b5e9:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c001b5ed:	0f 94 c0             	sete   al
c001b5f0:	21 d0                	and    eax,edx
c001b5f2:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001b5f6:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c001b5fa:	0f 94 c1             	sete   cl
c001b5fd:	84 c8                	test   al,cl
c001b5ff:	75 28                	jne    c001b629 <RTC::completeRTCRefresh()+0x1c1>
c001b601:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b605:	89 fd                	mov    ebp,edi
c001b607:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b60b:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c001b60f:	89 f0                	mov    eax,esi
c001b611:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001b615:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b619:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b61d:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b620:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b624:	e9 f2 fe ff ff       	jmp    c001b51b <RTC::completeRTCRefresh()+0xb3>
c001b629:	39 fd                	cmp    ebp,edi
c001b62b:	75 d4                	jne    c001b601 <RTC::completeRTCRefresh()+0x199>
c001b62d:	55                   	push   ebp
c001b62e:	55                   	push   ebp
c001b62f:	6a 0b                	push   0xb
c001b631:	ff 35 08 b7 03 c0    	push   DWORD PTR ds:0xc003b708
c001b637:	e8 00 fd fe ff       	call   c000b33c <Computer::readCMOS(unsigned char)>
c001b63c:	83 c4 10             	add    esp,0x10
c001b63f:	89 c5                	mov    ebp,eax
c001b641:	a8 04                	test   al,0x4
c001b643:	75 75                	jne    c001b6ba <RTC::completeRTCRefresh()+0x252>
c001b645:	b1 0a                	mov    cl,0xa
c001b647:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001b64a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b64d:	83 e2 0f             	and    edx,0xf
c001b650:	c0 e8 04             	shr    al,0x4
c001b653:	c1 ef 04             	shr    edi,0x4
c001b656:	f6 e1                	mul    cl
c001b658:	6b ff 0a             	imul   edi,edi,0xa
c001b65b:	01 d0                	add    eax,edx
c001b65d:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001b661:	88 04 24             	mov    BYTE PTR [esp],al
c001b664:	83 e2 0f             	and    edx,0xf
c001b667:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b66b:	c0 e8 04             	shr    al,0x4
c001b66e:	f6 e1                	mul    cl
c001b670:	01 d0                	add    eax,edx
c001b672:	88 da                	mov    dl,bl
c001b674:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b678:	83 e2 0f             	and    edx,0xf
c001b67b:	88 d8                	mov    al,bl
c001b67d:	83 e3 80             	and    ebx,0xffffff80
c001b680:	c0 e8 04             	shr    al,0x4
c001b683:	83 e0 07             	and    eax,0x7
c001b686:	f6 e1                	mul    cl
c001b688:	01 d0                	add    eax,edx
c001b68a:	89 f2                	mov    edx,esi
c001b68c:	09 c3                	or     ebx,eax
c001b68e:	83 e2 0f             	and    edx,0xf
c001b691:	89 f0                	mov    eax,esi
c001b693:	c0 e8 04             	shr    al,0x4
c001b696:	f6 e1                	mul    cl
c001b698:	8d 34 02             	lea    esi,[edx+eax*1]
c001b69b:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001b69f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b6a3:	83 e2 0f             	and    edx,0xf
c001b6a6:	c0 e8 04             	shr    al,0x4
c001b6a9:	f6 e1                	mul    cl
c001b6ab:	01 d0                	add    eax,edx
c001b6ad:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001b6b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b6b5:	83 e0 0f             	and    eax,0xf
c001b6b8:	01 c7                	add    edi,eax
c001b6ba:	83 e5 02             	and    ebp,0x2
c001b6bd:	75 14                	jne    c001b6d3 <RTC::completeRTCRefresh()+0x26b>
c001b6bf:	84 db                	test   bl,bl
c001b6c1:	79 10                	jns    c001b6d3 <RTC::completeRTCRefresh()+0x26b>
c001b6c3:	83 e3 7f             	and    ebx,0x7f
c001b6c6:	b9 18 00 00 00       	mov    ecx,0x18
c001b6cb:	8d 43 0c             	lea    eax,[ebx+0xc]
c001b6ce:	99                   	cdq    
c001b6cf:	f7 f9                	idiv   ecx
c001b6d1:	88 d3                	mov    bl,dl
c001b6d3:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001b6d9:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c001b6df:	77 06                	ja     c001b6e7 <RTC::completeRTCRefresh()+0x27f>
c001b6e1:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c001b6e7:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001b6eb:	31 d2                	xor    edx,edx
c001b6ed:	c1 e1 10             	shl    ecx,0x10
c001b6f0:	89 d7                	mov    edi,edx
c001b6f2:	c1 e5 10             	shl    ebp,0x10
c001b6f5:	31 c0                	xor    eax,eax
c001b6f7:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001b6fd:	09 cf                	or     edi,ecx
c001b6ff:	89 f1                	mov    ecx,esi
c001b701:	89 fa                	mov    edx,edi
c001b703:	88 c8                	mov    al,cl
c001b705:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c001b709:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c001b70d:	88 da                	mov    dl,bl
c001b70f:	0f b7 c8             	movzx  ecx,ax
c001b712:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b716:	09 e9                	or     ecx,ebp
c001b718:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b71b:	0f b6 db             	movzx  ebx,bl
c001b71e:	50                   	push   eax
c001b71f:	50                   	push   eax
c001b720:	53                   	push   ebx
c001b721:	68 58 a4 03 c0       	push   0xc003a458
c001b726:	e8 a5 14 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001b72b:	5a                   	pop    edx
c001b72c:	59                   	pop    ecx
c001b72d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b731:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b735:	52                   	push   edx
c001b736:	50                   	push   eax
c001b737:	e8 db 78 ff ff       	call   c0013017 <datetimeToSeconds(datetime_t)>
c001b73c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001b740:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001b746:	89 93 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],edx
c001b74c:	83 c4 3c             	add    esp,0x3c
c001b74f:	5b                   	pop    ebx
c001b750:	5e                   	pop    esi
c001b751:	5f                   	pop    edi
c001b752:	5d                   	pop    ebp
c001b753:	c3                   	ret    

c001b754 <rtcIRQHandler(regs*, void*)>:
c001b754:	53                   	push   ebx
c001b755:	83 ec 10             	sub    esp,0x10
c001b758:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b75c:	6a 0c                	push   0xc
c001b75e:	ff 35 08 b7 03 c0    	push   DWORD PTR ds:0xc003b708
c001b764:	e8 d3 fb fe ff       	call   c000b33c <Computer::readCMOS(unsigned char)>
c001b769:	83 c4 10             	add    esp,0x10
c001b76c:	84 c0                	test   al,al
c001b76e:	79 24                	jns    c001b794 <rtcIRQHandler(regs*, void*)+0x40>
c001b770:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001b777:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001b77e:	66 ff 05 e0 cd 03 c0 	inc    WORD PTR ds:0xc003cde0
c001b785:	75 0d                	jne    c001b794 <rtcIRQHandler(regs*, void*)+0x40>
c001b787:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001b78b:	83 c4 08             	add    esp,0x8
c001b78e:	5b                   	pop    ebx
c001b78f:	e9 d4 fc ff ff       	jmp    c001b468 <RTC::completeRTCRefresh()>
c001b794:	83 c4 08             	add    esp,0x8
c001b797:	5b                   	pop    ebx
c001b798:	c3                   	ret    
c001b799:	90                   	nop

c001b79a <RTC::RTC()>:
c001b79a:	83 ec 1c             	sub    esp,0x1c
c001b79d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7a1:	83 ec 08             	sub    esp,0x8
c001b7a4:	68 6e a4 03 c0       	push   0xc003a46e
c001b7a9:	50                   	push   eax
c001b7aa:	e8 43 77 ff ff       	call   c0012ef2 <Clock::Clock(char const*)>
c001b7af:	83 c4 10             	add    esp,0x10
c001b7b2:	ba 8c a4 03 c0       	mov    edx,0xc003a48c
c001b7b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7bb:	89 10                	mov    DWORD PTR [eax],edx
c001b7bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7c1:	83 ec 0c             	sub    esp,0xc
c001b7c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b7c8:	6a 01                	push   0x1
c001b7ca:	68 54 b7 01 c0       	push   0xc001b754
c001b7cf:	6a 08                	push   0x8
c001b7d1:	50                   	push   eax
c001b7d2:	e8 07 7c ff ff       	call   c00133de <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b7d7:	83 c4 20             	add    esp,0x20
c001b7da:	89 c2                	mov    edx,eax
c001b7dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7e0:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b7e6:	e8 6a 28 ff ff       	call   c000e055 <disableIRQs()>
c001b7eb:	a1 08 b7 03 c0       	mov    eax,ds:0xc003b708
c001b7f0:	83 ec 08             	sub    esp,0x8
c001b7f3:	6a 0b                	push   0xb
c001b7f5:	50                   	push   eax
c001b7f6:	e8 41 fb fe ff       	call   c000b33c <Computer::readCMOS(unsigned char)>
c001b7fb:	83 c4 10             	add    esp,0x10
c001b7fe:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b802:	a1 08 b7 03 c0       	mov    eax,ds:0xc003b708
c001b807:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001b80b:	83 ca 10             	or     edx,0x10
c001b80e:	0f b6 d2             	movzx  edx,dl
c001b811:	83 ec 04             	sub    esp,0x4
c001b814:	52                   	push   edx
c001b815:	6a 0b                	push   0xb
c001b817:	50                   	push   eax
c001b818:	e8 27 fc fe ff       	call   c000b444 <Computer::writeCMOS(unsigned char, unsigned char)>
c001b81d:	83 c4 10             	add    esp,0x10
c001b820:	83 ec 0c             	sub    esp,0xc
c001b823:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b827:	e8 3c fc ff ff       	call   c001b468 <RTC::completeRTCRefresh()>
c001b82c:	83 c4 10             	add    esp,0x10
c001b82f:	e8 2f 28 ff ff       	call   c000e063 <enableIRQs()>
c001b834:	90                   	nop
c001b835:	83 c4 1c             	add    esp,0x1c
c001b838:	c3                   	ret    
c001b839:	90                   	nop

c001b83a <IDE::close(int, int, void*)>:
c001b83a:	83 c8 ff             	or     eax,0xffffffff
c001b83d:	c3                   	ret    

c001b83e <IDE::IDE()>:
c001b83e:	83 ec 0c             	sub    esp,0xc
c001b841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b845:	83 ec 08             	sub    esp,0x8
c001b848:	68 c0 a4 03 c0       	push   0xc003a4c0
c001b84d:	50                   	push   eax
c001b84e:	e8 b9 7f ff ff       	call   c001380c <HardDiskController::HardDiskController(char const*)>
c001b853:	83 c4 10             	add    esp,0x10
c001b856:	ba 00 a7 03 c0       	mov    edx,0xc003a700
c001b85b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b85f:	89 10                	mov    DWORD PTR [eax],edx
c001b861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b865:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b86c:	90                   	nop
c001b86d:	83 c4 0c             	add    esp,0xc
c001b870:	c3                   	ret    
c001b871:	90                   	nop

c001b872 <IDE::prepareInterrupt(unsigned char)>:
c001b872:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b877:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b87b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b883:	c3                   	ret    

c001b884 <selectDrive(unsigned char, unsigned char)>:
c001b884:	c3                   	ret    
c001b885:	90                   	nop

c001b886 <IDE::getBase(unsigned char)>:
c001b886:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b88b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b88f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b897:	c3                   	ret    

c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b898:	55                   	push   ebp
c001b899:	57                   	push   edi
c001b89a:	56                   	push   esi
c001b89b:	53                   	push   ebx
c001b89c:	83 ec 1c             	sub    esp,0x1c
c001b89f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b8a3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b8a7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b8aa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b8ae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b8b2:	80 f9 03             	cmp    cl,0x3
c001b8b5:	77 51                	ja     c001b908 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001b8b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b8bb:	0f b6 f2             	movzx  esi,dl
c001b8be:	0f b6 db             	movzx  ebx,bl
c001b8c1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b8c4:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001b8c8:	83 ca 80             	or     edx,0xffffff80
c001b8cb:	0f b6 d2             	movzx  edx,dl
c001b8ce:	52                   	push   edx
c001b8cf:	6a 0c                	push   0xc
c001b8d1:	56                   	push   esi
c001b8d2:	57                   	push   edi
c001b8d3:	e8 c0 ff ff ff       	call   c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b8d8:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001b8dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b8e1:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b8e5:	ee                   	out    dx,al
c001b8e6:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001b8eb:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001b8ef:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001b8f3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b8f7:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b8ff:	83 c4 2c             	add    esp,0x2c
c001b902:	5b                   	pop    ebx
c001b903:	5e                   	pop    esi
c001b904:	5f                   	pop    edi
c001b905:	5d                   	pop    ebp
c001b906:	eb 90                	jmp    c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b908:	80 fb 07             	cmp    bl,0x7
c001b90b:	77 12                	ja     c001b91f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001b90d:	0f b6 d2             	movzx  edx,dl
c001b910:	0f b6 db             	movzx  ebx,bl
c001b913:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001b91b:	89 da                	mov    edx,ebx
c001b91d:	eb 2f                	jmp    c001b94e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001b91f:	80 fb 0d             	cmp    bl,0xd
c001b922:	77 13                	ja     c001b937 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001b924:	0f b6 d2             	movzx  edx,dl
c001b927:	0f b6 db             	movzx  ebx,bl
c001b92a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001b931:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b935:	eb 17                	jmp    c001b94e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001b937:	80 fb 15             	cmp    bl,0x15
c001b93a:	77 13                	ja     c001b94f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b93c:	0f b6 d2             	movzx  edx,dl
c001b93f:	0f b6 db             	movzx  ebx,bl
c001b942:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001b94a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b94e:	ee                   	out    dx,al
c001b94f:	83 c4 1c             	add    esp,0x1c
c001b952:	5b                   	pop    ebx
c001b953:	5e                   	pop    esi
c001b954:	5f                   	pop    edi
c001b955:	5d                   	pop    ebp
c001b956:	c3                   	ret    
c001b957:	90                   	nop

c001b958 <IDE::read(unsigned char, unsigned char)>:
c001b958:	55                   	push   ebp
c001b959:	57                   	push   edi
c001b95a:	56                   	push   esi
c001b95b:	53                   	push   ebx
c001b95c:	83 ec 1c             	sub    esp,0x1c
c001b95f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b963:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b967:	8d 43 f8             	lea    eax,[ebx-0x8]
c001b96a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b96e:	3c 03                	cmp    al,0x3
c001b970:	77 43                	ja     c001b9b5 <IDE::read(unsigned char, unsigned char)+0x5d>
c001b972:	0f b6 f2             	movzx  esi,dl
c001b975:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b978:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001b97c:	83 c8 80             	or     eax,0xffffff80
c001b97f:	0f b6 c0             	movzx  eax,al
c001b982:	50                   	push   eax
c001b983:	6a 0c                	push   0xc
c001b985:	56                   	push   esi
c001b986:	57                   	push   edi
c001b987:	e8 0c ff ff ff       	call   c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b98c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001b991:	0f b6 c3             	movzx  eax,bl
c001b994:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001b998:	ec                   	in     al,dx
c001b999:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b99d:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001b9a2:	52                   	push   edx
c001b9a3:	6a 0c                	push   0xc
c001b9a5:	56                   	push   esi
c001b9a6:	57                   	push   edi
c001b9a7:	e8 ec fe ff ff       	call   c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b9ac:	83 c4 20             	add    esp,0x20
c001b9af:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b9b3:	eb 49                	jmp    c001b9fe <IDE::read(unsigned char, unsigned char)+0xa6>
c001b9b5:	80 fb 07             	cmp    bl,0x7
c001b9b8:	77 12                	ja     c001b9cc <IDE::read(unsigned char, unsigned char)+0x74>
c001b9ba:	0f b6 d2             	movzx  edx,dl
c001b9bd:	0f b6 c3             	movzx  eax,bl
c001b9c0:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001b9c8:	89 c2                	mov    edx,eax
c001b9ca:	eb 31                	jmp    c001b9fd <IDE::read(unsigned char, unsigned char)+0xa5>
c001b9cc:	80 fb 0d             	cmp    bl,0xd
c001b9cf:	77 13                	ja     c001b9e4 <IDE::read(unsigned char, unsigned char)+0x8c>
c001b9d1:	0f b6 d2             	movzx  edx,dl
c001b9d4:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001b9db:	0f b6 d3             	movzx  edx,bl
c001b9de:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b9e2:	eb 19                	jmp    c001b9fd <IDE::read(unsigned char, unsigned char)+0xa5>
c001b9e4:	31 c0                	xor    eax,eax
c001b9e6:	80 fb 15             	cmp    bl,0x15
c001b9e9:	77 13                	ja     c001b9fe <IDE::read(unsigned char, unsigned char)+0xa6>
c001b9eb:	0f b6 d2             	movzx  edx,dl
c001b9ee:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001b9f6:	0f b6 d3             	movzx  edx,bl
c001b9f9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b9fd:	ec                   	in     al,dx
c001b9fe:	83 c4 1c             	add    esp,0x1c
c001ba01:	5b                   	pop    ebx
c001ba02:	5e                   	pop    esi
c001ba03:	5f                   	pop    edi
c001ba04:	5d                   	pop    ebp
c001ba05:	c3                   	ret    

c001ba06 <IDE::waitInterrupt(unsigned char)>:
c001ba06:	55                   	push   ebp
c001ba07:	57                   	push   edi
c001ba08:	56                   	push   esi
c001ba09:	53                   	push   ebx
c001ba0a:	31 db                	xor    ebx,ebx
c001ba0c:	83 ec 0c             	sub    esp,0xc
c001ba0f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ba13:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ba18:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ba20:	89 e8                	mov    eax,ebp
c001ba22:	84 c0                	test   al,al
c001ba24:	75 34                	jne    c001ba5a <IDE::waitInterrupt(unsigned char)+0x54>
c001ba26:	52                   	push   edx
c001ba27:	6a 0c                	push   0xc
c001ba29:	56                   	push   esi
c001ba2a:	57                   	push   edi
c001ba2b:	e8 28 ff ff ff       	call   c001b958 <IDE::read(unsigned char, unsigned char)>
c001ba30:	83 c4 10             	add    esp,0x10
c001ba33:	a8 01                	test   al,0x1
c001ba35:	75 2b                	jne    c001ba62 <IDE::waitInterrupt(unsigned char)+0x5c>
c001ba37:	f6 c3 04             	test   bl,0x4
c001ba3a:	75 16                	jne    c001ba52 <IDE::waitInterrupt(unsigned char)+0x4c>
c001ba3c:	83 fb 32             	cmp    ebx,0x32
c001ba3f:	7e 11                	jle    c001ba52 <IDE::waitInterrupt(unsigned char)+0x4c>
c001ba41:	50                   	push   eax
c001ba42:	50                   	push   eax
c001ba43:	6a 00                	push   0x0
c001ba45:	68 80 96 98 00       	push   0x989680
c001ba4a:	e8 dc 2c ff ff       	call   c000e72b <nanoSleep(unsigned long long)>
c001ba4f:	83 c4 10             	add    esp,0x10
c001ba52:	83 fb 3c             	cmp    ebx,0x3c
c001ba55:	74 0b                	je     c001ba62 <IDE::waitInterrupt(unsigned char)+0x5c>
c001ba57:	43                   	inc    ebx
c001ba58:	eb be                	jmp    c001ba18 <IDE::waitInterrupt(unsigned char)+0x12>
c001ba5a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ba62:	83 c4 0c             	add    esp,0xc
c001ba65:	89 e8                	mov    eax,ebp
c001ba67:	5b                   	pop    ebx
c001ba68:	5e                   	pop    esi
c001ba69:	5f                   	pop    edi
c001ba6a:	5d                   	pop    ebp
c001ba6b:	c3                   	ret    

c001ba6c <ideChannel0IRQHandler(regs*, void*)>:
c001ba6c:	83 ec 10             	sub    esp,0x10
c001ba6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba73:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ba7a:	6a 07                	push   0x7
c001ba7c:	6a 00                	push   0x0
c001ba7e:	50                   	push   eax
c001ba7f:	e8 d4 fe ff ff       	call   c001b958 <IDE::read(unsigned char, unsigned char)>
c001ba84:	83 c4 1c             	add    esp,0x1c
c001ba87:	c3                   	ret    

c001ba88 <ideChannel1IRQHandler(regs*, void*)>:
c001ba88:	83 ec 10             	sub    esp,0x10
c001ba8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba8f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ba96:	6a 07                	push   0x7
c001ba98:	6a 01                	push   0x1
c001ba9a:	50                   	push   eax
c001ba9b:	e8 b8 fe ff ff       	call   c001b958 <IDE::read(unsigned char, unsigned char)>
c001baa0:	83 c4 1c             	add    esp,0x1c
c001baa3:	c3                   	ret    

c001baa4 <IDE::enableIRQs(unsigned char, bool)>:
c001baa4:	57                   	push   edi
c001baa5:	56                   	push   esi
c001baa6:	be 04 00 00 00       	mov    esi,0x4
c001baab:	53                   	push   ebx
c001baac:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bab1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bab5:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001baba:	0f 94 c0             	sete   al
c001babd:	d1 e0                	shl    eax,1
c001babf:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001bac6:	0f b6 c0             	movzx  eax,al
c001bac9:	50                   	push   eax
c001baca:	6a 0c                	push   0xc
c001bacc:	57                   	push   edi
c001bacd:	53                   	push   ebx
c001bace:	e8 c5 fd ff ff       	call   c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bad3:	83 c4 10             	add    esp,0x10
c001bad6:	50                   	push   eax
c001bad7:	6a 0c                	push   0xc
c001bad9:	57                   	push   edi
c001bada:	53                   	push   ebx
c001badb:	e8 78 fe ff ff       	call   c001b958 <IDE::read(unsigned char, unsigned char)>
c001bae0:	83 c4 10             	add    esp,0x10
c001bae3:	4e                   	dec    esi
c001bae4:	75 f0                	jne    c001bad6 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001bae6:	5b                   	pop    ebx
c001bae7:	5e                   	pop    esi
c001bae8:	5f                   	pop    edi
c001bae9:	c3                   	ret    

c001baea <IDE::open(int, int, void*)>:
c001baea:	55                   	push   ebp
c001baeb:	57                   	push   edi
c001baec:	56                   	push   esi
c001baed:	53                   	push   ebx
c001baee:	83 ec 1c             	sub    esp,0x1c
c001baf1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001baf5:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bafe:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bb07:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bb0e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bb15:	0f 85 b0 02 00 00    	jne    c001bdcb <IDE::open(int, int, void*)+0x2e1>
c001bb1b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bb21:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001bb25:	83 e0 7f             	and    eax,0x7f
c001bb28:	3c 05                	cmp    al,0x5
c001bb2a:	74 04                	je     c001bb30 <IDE::open(int, int, void*)+0x46>
c001bb2c:	3c 0f                	cmp    al,0xf
c001bb2e:	75 32                	jne    c001bb62 <IDE::open(int, int, void*)+0x78>
c001bb30:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bb36:	83 e0 fc             	and    eax,0xfffffffc
c001bb39:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bb40:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bb46:	83 e0 fc             	and    eax,0xfffffffc
c001bb49:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bb50:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bb56:	83 e0 fc             	and    eax,0xfffffffc
c001bb59:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bb60:	eb 14                	jmp    c001bb76 <IDE::open(int, int, void*)+0x8c>
c001bb62:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bb6c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bb76:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001bb7d:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bb84:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bb88:	89 c6                	mov    esi,eax
c001bb8a:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bb8f:	c1 e6 10             	shl    esi,0x10
c001bb92:	89 e8                	mov    eax,ebp
c001bb94:	89 fa                	mov    edx,edi
c001bb96:	c1 e0 0b             	shl    eax,0xb
c001bb99:	09 f0                	or     eax,esi
c001bb9b:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001bba2:	c1 e6 08             	shl    esi,0x8
c001bba5:	09 c6                	or     esi,eax
c001bba7:	89 f0                	mov    eax,esi
c001bba9:	0d 08 00 00 80       	or     eax,0x80000008
c001bbae:	ef                   	out    dx,eax
c001bbaf:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001bbb4:	89 ca                	mov    edx,ecx
c001bbb6:	ed                   	in     eax,dx
c001bbb7:	c1 e8 10             	shr    eax,0x10
c001bbba:	3d ff ff 00 00       	cmp    eax,0xffff
c001bbbf:	0f 84 f5 00 00 00    	je     c001bcba <IDE::open(int, int, void*)+0x1d0>
c001bbc5:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001bbcb:	89 fa                	mov    edx,edi
c001bbcd:	89 f0                	mov    eax,esi
c001bbcf:	ef                   	out    dx,eax
c001bbd0:	b0 fe                	mov    al,0xfe
c001bbd2:	89 ca                	mov    edx,ecx
c001bbd4:	ee                   	out    dx,al
c001bbd5:	89 f0                	mov    eax,esi
c001bbd7:	89 fa                	mov    edx,edi
c001bbd9:	ef                   	out    dx,eax
c001bbda:	89 ca                	mov    edx,ecx
c001bbdc:	ed                   	in     eax,dx
c001bbdd:	3c fe                	cmp    al,0xfe
c001bbdf:	0f 85 a9 00 00 00    	jne    c001bc8e <IDE::open(int, int, void*)+0x1a4>
c001bbe5:	8b 15 08 b7 03 c0    	mov    edx,DWORD PTR ds:0xc003b708
c001bbeb:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001bbf2:	74 33                	je     c001bc27 <IDE::open(int, int, void*)+0x13d>
c001bbf4:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bbfa:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bbfe:	40                   	inc    eax
c001bbff:	83 ec 0c             	sub    esp,0xc
c001bc02:	0f b6 c0             	movzx  eax,al
c001bc05:	50                   	push   eax
c001bc06:	55                   	push   ebp
c001bc07:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bc0b:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001bc11:	51                   	push   ecx
c001bc12:	e8 07 a9 ff ff       	call   c001651e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bc17:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bc1c:	83 c4 1c             	add    esp,0x1c
c001bc1f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bc25:	eb 0a                	jmp    c001bc31 <IDE::open(int, int, void*)+0x147>
c001bc27:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bc31:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bc38:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bc3f:	c1 e1 10             	shl    ecx,0x10
c001bc42:	c1 e0 08             	shl    eax,0x8
c001bc45:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bc4a:	09 c1                	or     ecx,eax
c001bc4c:	89 fa                	mov    edx,edi
c001bc4e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bc55:	c1 e0 0b             	shl    eax,0xb
c001bc58:	09 c1                	or     ecx,eax
c001bc5a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bc60:	89 c8                	mov    eax,ecx
c001bc62:	ef                   	out    dx,eax
c001bc63:	be fc 0c 00 00       	mov    esi,0xcfc
c001bc68:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001bc6e:	89 f2                	mov    edx,esi
c001bc70:	ee                   	out    dx,al
c001bc71:	89 c8                	mov    eax,ecx
c001bc73:	89 fa                	mov    edx,edi
c001bc75:	ef                   	out    dx,eax
c001bc76:	89 f2                	mov    edx,esi
c001bc78:	ed                   	in     eax,dx
c001bc79:	0f b6 c0             	movzx  eax,al
c001bc7c:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001bc82:	74 46                	je     c001bcca <IDE::open(int, int, void*)+0x1e0>
c001bc84:	83 ec 0c             	sub    esp,0xc
c001bc87:	68 d8 a4 03 c0       	push   0xc003a4d8
c001bc8c:	eb 34                	jmp    c001bcc2 <IDE::open(int, int, void*)+0x1d8>
c001bc8e:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bc97:	75 17                	jne    c001bcb0 <IDE::open(int, int, void*)+0x1c6>
c001bc99:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001bc9e:	74 07                	je     c001bca7 <IDE::open(int, int, void*)+0x1bd>
c001bca0:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001bca5:	75 09                	jne    c001bcb0 <IDE::open(int, int, void*)+0x1c6>
c001bca7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bcae:	eb 1a                	jmp    c001bcca <IDE::open(int, int, void*)+0x1e0>
c001bcb0:	83 ec 0c             	sub    esp,0xc
c001bcb3:	68 e0 a4 03 c0       	push   0xc003a4e0
c001bcb8:	eb 08                	jmp    c001bcc2 <IDE::open(int, int, void*)+0x1d8>
c001bcba:	83 ec 0c             	sub    esp,0xc
c001bcbd:	68 11 a5 03 c0       	push   0xc003a511
c001bcc2:	e8 27 10 ff ff       	call   c000ccee <panic(char const*)>
c001bcc7:	83 c4 10             	add    esp,0x10
c001bcca:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001bcd1:	79 1a                	jns    c001bced <IDE::open(int, int, void*)+0x203>
c001bcd3:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bcd9:	83 e0 fc             	and    eax,0xfffffffc
c001bcdc:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bce3:	83 c0 08             	add    eax,0x8
c001bce6:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bced:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bcf3:	89 c2                	mov    edx,eax
c001bcf5:	83 e2 0f             	and    edx,0xf
c001bcf8:	66 83 fa 08          	cmp    dx,0x8
c001bcfc:	75 0a                	jne    c001bd08 <IDE::open(int, int, void*)+0x21e>
c001bcfe:	83 e8 02             	sub    eax,0x2
c001bd01:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bd08:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bd0e:	89 c2                	mov    edx,eax
c001bd10:	83 e2 0f             	and    edx,0xf
c001bd13:	66 83 fa 08          	cmp    dx,0x8
c001bd17:	75 0a                	jne    c001bd23 <IDE::open(int, int, void*)+0x239>
c001bd19:	83 e8 02             	sub    eax,0x2
c001bd1c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bd23:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bd2a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bd31:	89 d0                	mov    eax,edx
c001bd33:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bd36:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bd3a:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bd3e:	8d 4a 01             	lea    ecx,[edx+0x1]
c001bd41:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001bd46:	0f b6 c9             	movzx  ecx,cl
c001bd49:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bd50:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bd53:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bd57:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bd5b:	8d 50 02             	lea    edx,[eax+0x2]
c001bd5e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001bd63:	0f b6 d2             	movzx  edx,dl
c001bd66:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001bd6c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bd6f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bd73:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bd77:	8d 48 03             	lea    ecx,[eax+0x3]
c001bd7a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001bd7f:	0f b6 c9             	movzx  ecx,cl
c001bd82:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bd88:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bd8b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bd8f:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001bd93:	8d 50 04             	lea    edx,[eax+0x4]
c001bd96:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bd9c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001bda1:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001bda8:	66 85 f6             	test   si,si
c001bdab:	74 3e                	je     c001bdeb <IDE::open(int, int, void*)+0x301>
c001bdad:	0f b6 d2             	movzx  edx,dl
c001bdb0:	83 c0 05             	add    eax,0x5
c001bdb3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bdb6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bdba:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001bdbe:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001bdc4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001bdc9:	eb 20                	jmp    c001bdeb <IDE::open(int, int, void*)+0x301>
c001bdcb:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bdd5:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bddf:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bde6:	e9 02 ff ff ff       	jmp    c001bced <IDE::open(int, int, void*)+0x203>
c001bdeb:	52                   	push   edx
c001bdec:	52                   	push   edx
c001bded:	6a 00                	push   0x0
c001bdef:	53                   	push   ebx
c001bdf0:	e8 7d fa ff ff       	call   c001b872 <IDE::prepareInterrupt(unsigned char)>
c001bdf5:	59                   	pop    ecx
c001bdf6:	5e                   	pop    esi
c001bdf7:	6a 01                	push   0x1
c001bdf9:	53                   	push   ebx
c001bdfa:	e8 73 fa ff ff       	call   c001b872 <IDE::prepareInterrupt(unsigned char)>
c001bdff:	83 c4 0c             	add    esp,0xc
c001be02:	6a 00                	push   0x0
c001be04:	6a 00                	push   0x0
c001be06:	53                   	push   ebx
c001be07:	e8 98 fc ff ff       	call   c001baa4 <IDE::enableIRQs(unsigned char, bool)>
c001be0c:	83 c4 0c             	add    esp,0xc
c001be0f:	6a 00                	push   0x0
c001be11:	6a 01                	push   0x1
c001be13:	53                   	push   ebx
c001be14:	e8 8b fc ff ff       	call   c001baa4 <IDE::enableIRQs(unsigned char, bool)>
c001be19:	83 c4 10             	add    esp,0x10
c001be1c:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001be23:	74 40                	je     c001be65 <IDE::open(int, int, void*)+0x37b>
c001be25:	83 ec 0c             	sub    esp,0xc
c001be28:	68 3b a5 03 c0       	push   0xc003a53b
c001be2d:	e8 9e 0d ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001be32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be35:	6a 01                	push   0x1
c001be37:	68 6c ba 01 c0       	push   0xc001ba6c
c001be3c:	6a 0e                	push   0xe
c001be3e:	53                   	push   ebx
c001be3f:	e8 9a 75 ff ff       	call   c00133de <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001be44:	83 c4 14             	add    esp,0x14
c001be47:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001be4d:	53                   	push   ebx
c001be4e:	6a 01                	push   0x1
c001be50:	68 88 ba 01 c0       	push   0xc001ba88
c001be55:	6a 0f                	push   0xf
c001be57:	53                   	push   ebx
c001be58:	e8 81 75 ff ff       	call   c00133de <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001be5d:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001be63:	eb 4a                	jmp    c001beaf <IDE::open(int, int, void*)+0x3c5>
c001be65:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001be6f:	50                   	push   eax
c001be70:	6a 0f                	push   0xf
c001be72:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001be78:	68 57 a5 03 c0       	push   0xc003a557
c001be7d:	e8 4e 0d ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001be82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be85:	6a 00                	push   0x0
c001be87:	68 6c ba 01 c0       	push   0xc001ba6c
c001be8c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001be92:	53                   	push   ebx
c001be93:	e8 46 75 ff ff       	call   c00133de <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001be98:	83 c4 14             	add    esp,0x14
c001be9b:	53                   	push   ebx
c001be9c:	6a 00                	push   0x0
c001be9e:	68 88 ba 01 c0       	push   0xc001ba88
c001bea3:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001bea9:	53                   	push   ebx
c001beaa:	e8 2f 75 ff ff       	call   c00133de <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001beaf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001beb1:	83 c4 20             	add    esp,0x20
c001beb4:	83 ec 0c             	sub    esp,0xc
c001beb7:	53                   	push   ebx
c001beb8:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001bebb:	83 c4 0c             	add    esp,0xc
c001bebe:	6a 07                	push   0x7
c001bec0:	6a 00                	push   0x0
c001bec2:	53                   	push   ebx
c001bec3:	e8 90 fa ff ff       	call   c001b958 <IDE::read(unsigned char, unsigned char)>
c001bec8:	83 c4 0c             	add    esp,0xc
c001becb:	6a 07                	push   0x7
c001becd:	6a 01                	push   0x1
c001becf:	53                   	push   ebx
c001bed0:	e8 83 fa ff ff       	call   c001b958 <IDE::read(unsigned char, unsigned char)>
c001bed5:	83 c4 0c             	add    esp,0xc
c001bed8:	6a 01                	push   0x1
c001beda:	6a 00                	push   0x0
c001bedc:	53                   	push   ebx
c001bedd:	e8 c2 fb ff ff       	call   c001baa4 <IDE::enableIRQs(unsigned char, bool)>
c001bee2:	83 c4 0c             	add    esp,0xc
c001bee5:	6a 01                	push   0x1
c001bee7:	6a 01                	push   0x1
c001bee9:	53                   	push   ebx
c001beea:	e8 b5 fb ff ff       	call   c001baa4 <IDE::enableIRQs(unsigned char, bool)>
c001beef:	83 c4 2c             	add    esp,0x2c
c001bef2:	31 c0                	xor    eax,eax
c001bef4:	5b                   	pop    ebx
c001bef5:	5e                   	pop    esi
c001bef6:	5f                   	pop    edi
c001bef7:	5d                   	pop    ebp
c001bef8:	c3                   	ret    
c001bef9:	90                   	nop

c001befa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001befa:	55                   	push   ebp
c001befb:	57                   	push   edi
c001befc:	56                   	push   esi
c001befd:	53                   	push   ebx
c001befe:	83 ec 1c             	sub    esp,0x1c
c001bf01:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bf05:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bf09:	8d 50 f8             	lea    edx,[eax-0x8]
c001bf0c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bf10:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001bf14:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bf18:	80 fa 03             	cmp    dl,0x3
c001bf1b:	77 5d                	ja     c001bf7a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001bf1d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001bf21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bf25:	0f b6 db             	movzx  ebx,bl
c001bf28:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001bf2b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001bf2f:	83 ca 80             	or     edx,0xffffff80
c001bf32:	0f b6 d2             	movzx  edx,dl
c001bf35:	52                   	push   edx
c001bf36:	6a 0c                	push   0xc
c001bf38:	53                   	push   ebx
c001bf39:	56                   	push   esi
c001bf3a:	e8 59 f9 ff ff       	call   c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf3f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001bf44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf48:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bf4c:	0f b6 c0             	movzx  eax,al
c001bf4f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001bf53:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bf55:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bf5a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001bf5e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bf62:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bf66:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bf6e:	83 c4 2c             	add    esp,0x2c
c001bf71:	5b                   	pop    ebx
c001bf72:	5e                   	pop    esi
c001bf73:	5f                   	pop    edi
c001bf74:	5d                   	pop    ebp
c001bf75:	e9 1e f9 ff ff       	jmp    c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf7a:	3c 07                	cmp    al,0x7
c001bf7c:	77 10                	ja     c001bf8e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001bf7e:	0f b6 db             	movzx  ebx,bl
c001bf81:	0f b6 d0             	movzx  edx,al
c001bf84:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001bf8c:	eb 2d                	jmp    c001bfbb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001bf8e:	3c 0d                	cmp    al,0xd
c001bf90:	77 13                	ja     c001bfa5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001bf92:	0f b6 db             	movzx  ebx,bl
c001bf95:	0f b6 c0             	movzx  eax,al
c001bf98:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001bf9f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001bfa3:	eb 16                	jmp    c001bfbb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001bfa5:	3c 15                	cmp    al,0x15
c001bfa7:	77 14                	ja     c001bfbd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001bfa9:	0f b6 db             	movzx  ebx,bl
c001bfac:	0f b6 c0             	movzx  eax,al
c001bfaf:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001bfb7:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001bfbb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bfbd:	83 c4 1c             	add    esp,0x1c
c001bfc0:	5b                   	pop    ebx
c001bfc1:	5e                   	pop    esi
c001bfc2:	5f                   	pop    edi
c001bfc3:	5d                   	pop    ebp
c001bfc4:	c3                   	ret    
c001bfc5:	90                   	nop

c001bfc6 <IDE::detect()>:
c001bfc6:	55                   	push   ebp
c001bfc7:	57                   	push   edi
c001bfc8:	56                   	push   esi
c001bfc9:	53                   	push   ebx
c001bfca:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bfd0:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001bfd7:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001bfde:	0f 85 be 02 00 00    	jne    c001c2a2 <IDE::detect()+0x2dc>
c001bfe4:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001bfeb:	31 f6                	xor    esi,esi
c001bfed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bff5:	31 ed                	xor    ebp,ebp
c001bff7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bffb:	c1 e0 06             	shl    eax,0x6
c001bffe:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c006:	89 e8                	mov    eax,ebp
c001c008:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c00c:	c1 e0 04             	shl    eax,0x4
c001c00f:	83 c8 a0             	or     eax,0xffffffa0
c001c012:	0f b6 c0             	movzx  eax,al
c001c015:	50                   	push   eax
c001c016:	6a 06                	push   0x6
c001c018:	56                   	push   esi
c001c019:	53                   	push   ebx
c001c01a:	e8 79 f8 ff ff       	call   c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c01f:	83 c4 0c             	add    esp,0xc
c001c022:	6a 0c                	push   0xc
c001c024:	56                   	push   esi
c001c025:	53                   	push   ebx
c001c026:	e8 2d f9 ff ff       	call   c001b958 <IDE::read(unsigned char, unsigned char)>
c001c02b:	83 c4 0c             	add    esp,0xc
c001c02e:	6a 0c                	push   0xc
c001c030:	56                   	push   esi
c001c031:	53                   	push   ebx
c001c032:	e8 21 f9 ff ff       	call   c001b958 <IDE::read(unsigned char, unsigned char)>
c001c037:	83 c4 0c             	add    esp,0xc
c001c03a:	6a 0c                	push   0xc
c001c03c:	56                   	push   esi
c001c03d:	53                   	push   ebx
c001c03e:	e8 15 f9 ff ff       	call   c001b958 <IDE::read(unsigned char, unsigned char)>
c001c043:	83 c4 0c             	add    esp,0xc
c001c046:	6a 0c                	push   0xc
c001c048:	56                   	push   esi
c001c049:	53                   	push   ebx
c001c04a:	e8 09 f9 ff ff       	call   c001b958 <IDE::read(unsigned char, unsigned char)>
c001c04f:	68 ec 00 00 00       	push   0xec
c001c054:	6a 07                	push   0x7
c001c056:	56                   	push   esi
c001c057:	53                   	push   ebx
c001c058:	e8 3b f8 ff ff       	call   c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c05d:	83 c4 1c             	add    esp,0x1c
c001c060:	6a 0c                	push   0xc
c001c062:	56                   	push   esi
c001c063:	53                   	push   ebx
c001c064:	e8 ef f8 ff ff       	call   c001b958 <IDE::read(unsigned char, unsigned char)>
c001c069:	83 c4 0c             	add    esp,0xc
c001c06c:	6a 0c                	push   0xc
c001c06e:	56                   	push   esi
c001c06f:	53                   	push   ebx
c001c070:	e8 e3 f8 ff ff       	call   c001b958 <IDE::read(unsigned char, unsigned char)>
c001c075:	83 c4 0c             	add    esp,0xc
c001c078:	6a 0c                	push   0xc
c001c07a:	56                   	push   esi
c001c07b:	53                   	push   ebx
c001c07c:	e8 d7 f8 ff ff       	call   c001b958 <IDE::read(unsigned char, unsigned char)>
c001c081:	83 c4 0c             	add    esp,0xc
c001c084:	6a 0c                	push   0xc
c001c086:	56                   	push   esi
c001c087:	53                   	push   ebx
c001c088:	e8 cb f8 ff ff       	call   c001b958 <IDE::read(unsigned char, unsigned char)>
c001c08d:	83 c4 0c             	add    esp,0xc
c001c090:	6a 0c                	push   0xc
c001c092:	56                   	push   esi
c001c093:	53                   	push   ebx
c001c094:	e8 bf f8 ff ff       	call   c001b958 <IDE::read(unsigned char, unsigned char)>
c001c099:	83 c4 10             	add    esp,0x10
c001c09c:	84 c0                	test   al,al
c001c09e:	0f 84 8b 01 00 00    	je     c001c22f <IDE::detect()+0x269>
c001c0a4:	31 ff                	xor    edi,edi
c001c0a6:	50                   	push   eax
c001c0a7:	6a 0c                	push   0xc
c001c0a9:	56                   	push   esi
c001c0aa:	53                   	push   ebx
c001c0ab:	e8 a8 f8 ff ff       	call   c001b958 <IDE::read(unsigned char, unsigned char)>
c001c0b0:	83 c4 10             	add    esp,0x10
c001c0b3:	a8 01                	test   al,0x1
c001c0b5:	0f 85 8e 01 00 00    	jne    c001c249 <IDE::detect()+0x283>
c001c0bb:	84 c0                	test   al,al
c001c0bd:	78 04                	js     c001c0c3 <IDE::detect()+0xfd>
c001c0bf:	a8 08                	test   al,0x8
c001c0c1:	75 27                	jne    c001c0ea <IDE::detect()+0x124>
c001c0c3:	47                   	inc    edi
c001c0c4:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c0ca:	7e da                	jle    c001c0a6 <IDE::detect()+0xe0>
c001c0cc:	50                   	push   eax
c001c0cd:	50                   	push   eax
c001c0ce:	6a 00                	push   0x0
c001c0d0:	68 40 4b 4c 00       	push   0x4c4b40
c001c0d5:	e8 51 26 ff ff       	call   c000e72b <nanoSleep(unsigned long long)>
c001c0da:	83 c4 10             	add    esp,0x10
c001c0dd:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c0e3:	75 c1                	jne    c001c0a6 <IDE::detect()+0xe0>
c001c0e5:	e9 5f 01 00 00       	jmp    c001c249 <IDE::detect()+0x283>
c001c0ea:	31 c9                	xor    ecx,ecx
c001c0ec:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c0f0:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c0f4:	83 ec 0c             	sub    esp,0xc
c001c0f7:	68 80 00 00 00       	push   0x80
c001c0fc:	57                   	push   edi
c001c0fd:	6a 00                	push   0x0
c001c0ff:	56                   	push   esi
c001c100:	53                   	push   ebx
c001c101:	e8 f4 fd ff ff       	call   c001befa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c106:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c10b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c10f:	89 d1                	mov    ecx,edx
c001c111:	c1 e0 06             	shl    eax,0x6
c001c114:	01 d8                	add    eax,ebx
c001c116:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c11d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c124:	89 f2                	mov    edx,esi
c001c126:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c12c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c130:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c136:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c13a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c141:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c149:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c150:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c158:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c15e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c165:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c16b:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c16f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c173:	83 c4 20             	add    esp,0x20
c001c176:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c179:	83 c0 02             	add    eax,0x2
c001c17c:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c182:	83 c7 02             	add    edi,0x2
c001c185:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c188:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c18e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c192:	75 e2                	jne    c001c176 <IDE::detect()+0x1b0>
c001c194:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c198:	c1 e0 06             	shl    eax,0x6
c001c19b:	01 d8                	add    eax,ebx
c001c19d:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001c1a3:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c1aa:	66 c1 ea 09          	shr    dx,0x9
c001c1ae:	83 e2 01             	and    edx,0x1
c001c1b1:	84 c9                	test   cl,cl
c001c1b3:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c1b9:	75 2f                	jne    c001c1ea <IDE::detect()+0x224>
c001c1bb:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001c1c1:	85 c0                	test   eax,eax
c001c1c3:	74 66                	je     c001c22b <IDE::detect()+0x265>
c001c1c5:	50                   	push   eax
c001c1c6:	55                   	push   ebp
c001c1c7:	56                   	push   esi
c001c1c8:	68 73 a5 03 c0       	push   0xc003a573
c001c1cd:	e8 fe 09 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001c1d2:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c1d9:	e8 a2 5f ff ff       	call   c0012180 <operator new(unsigned long)>
c001c1de:	89 c7                	mov    edi,eax
c001c1e0:	89 04 24             	mov    DWORD PTR [esp],eax
c001c1e3:	e8 e8 02 00 00       	call   c001c4d0 <ATA::ATA()>
c001c1e8:	eb 28                	jmp    c001c212 <IDE::detect()+0x24c>
c001c1ea:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001c1f0:	55                   	push   ebp
c001c1f1:	56                   	push   esi
c001c1f2:	68 a2 a5 03 c0       	push   0xc003a5a2
c001c1f7:	e8 d4 09 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001c1fc:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001c203:	e8 78 5f ff ff       	call   c0012180 <operator new(unsigned long)>
c001c208:	89 c7                	mov    edi,eax
c001c20a:	89 04 24             	mov    DWORD PTR [esp],eax
c001c20d:	e8 ee 08 00 00       	call   c001cb00 <ATAPI::ATAPI()>
c001c212:	5a                   	pop    edx
c001c213:	59                   	pop    ecx
c001c214:	57                   	push   edi
c001c215:	53                   	push   ebx
c001c216:	e8 6f 72 ff ff       	call   c001348a <Device::addChild(Device*)>
c001c21b:	8b 07                	mov    eax,DWORD PTR [edi]
c001c21d:	53                   	push   ebx
c001c21e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c222:	6a 00                	push   0x0
c001c224:	57                   	push   edi
c001c225:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c228:	83 c4 20             	add    esp,0x20
c001c22b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001c22f:	4d                   	dec    ebp
c001c230:	74 0a                	je     c001c23c <IDE::detect()+0x276>
c001c232:	bd 01 00 00 00       	mov    ebp,0x1
c001c237:	e9 bb fd ff ff       	jmp    c001bff7 <IDE::detect()+0x31>
c001c23c:	4e                   	dec    esi
c001c23d:	74 63                	je     c001c2a2 <IDE::detect()+0x2dc>
c001c23f:	be 01 00 00 00       	mov    esi,0x1
c001c244:	e9 ac fd ff ff       	jmp    c001bff5 <IDE::detect()+0x2f>
c001c249:	50                   	push   eax
c001c24a:	6a 04                	push   0x4
c001c24c:	56                   	push   esi
c001c24d:	53                   	push   ebx
c001c24e:	e8 05 f7 ff ff       	call   c001b958 <IDE::read(unsigned char, unsigned char)>
c001c253:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c257:	83 c4 0c             	add    esp,0xc
c001c25a:	6a 05                	push   0x5
c001c25c:	56                   	push   esi
c001c25d:	53                   	push   ebx
c001c25e:	e8 f5 f6 ff ff       	call   c001b958 <IDE::read(unsigned char, unsigned char)>
c001c263:	83 c4 10             	add    esp,0x10
c001c266:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001c26a:	80 fa 14             	cmp    dl,0x14
c001c26d:	75 04                	jne    c001c273 <IDE::detect()+0x2ad>
c001c26f:	3c eb                	cmp    al,0xeb
c001c271:	eb 07                	jmp    c001c27a <IDE::detect()+0x2b4>
c001c273:	3c 96                	cmp    al,0x96
c001c275:	75 b8                	jne    c001c22f <IDE::detect()+0x269>
c001c277:	80 fa 69             	cmp    dl,0x69
c001c27a:	75 b3                	jne    c001c22f <IDE::detect()+0x269>
c001c27c:	68 a1 00 00 00       	push   0xa1
c001c281:	6a 07                	push   0x7
c001c283:	56                   	push   esi
c001c284:	53                   	push   ebx
c001c285:	e8 0e f6 ff ff       	call   c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c28a:	5f                   	pop    edi
c001c28b:	58                   	pop    eax
c001c28c:	6a 00                	push   0x0
c001c28e:	68 40 42 0f 00       	push   0xf4240
c001c293:	e8 93 24 ff ff       	call   c000e72b <nanoSleep(unsigned long long)>
c001c298:	83 c4 10             	add    esp,0x10
c001c29b:	b1 01                	mov    cl,0x1
c001c29d:	e9 4a fe ff ff       	jmp    c001c0ec <IDE::detect()+0x126>
c001c2a2:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c2a8:	5b                   	pop    ebx
c001c2a9:	5e                   	pop    esi
c001c2aa:	5f                   	pop    edi
c001c2ab:	5d                   	pop    ebp
c001c2ac:	c3                   	ret    
c001c2ad:	90                   	nop

c001c2ae <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c2ae:	55                   	push   ebp
c001c2af:	57                   	push   edi
c001c2b0:	56                   	push   esi
c001c2b1:	53                   	push   ebx
c001c2b2:	83 ec 1c             	sub    esp,0x1c
c001c2b5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c2b9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c2bd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c2c1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001c2c5:	88 c3                	mov    bl,al
c001c2c7:	84 c0                	test   al,al
c001c2c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c2cd:	0f 84 67 01 00 00    	je     c001c43a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001c2d3:	83 ec 0c             	sub    esp,0xc
c001c2d6:	68 d3 a5 03 c0       	push   0xc003a5d3
c001c2db:	e8 f0 08 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001c2e0:	83 c4 10             	add    esp,0x10
c001c2e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c2e7:	3c 01                	cmp    al,0x1
c001c2e9:	75 17                	jne    c001c302 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001c2eb:	83 ec 0c             	sub    esp,0xc
c001c2ee:	b3 13                	mov    bl,0x13
c001c2f0:	68 df a5 03 c0       	push   0xc003a5df
c001c2f5:	e8 d6 08 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001c2fa:	83 c4 10             	add    esp,0x10
c001c2fd:	e9 25 01 00 00       	jmp    c001c427 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c302:	3c 02                	cmp    al,0x2
c001c304:	0f 85 ef 00 00 00    	jne    c001c3f9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001c30a:	d1 e6                	shl    esi,1
c001c30c:	09 ee                	or     esi,ebp
c001c30e:	52                   	push   edx
c001c30f:	89 f0                	mov    eax,esi
c001c311:	6a 01                	push   0x1
c001c313:	0f b6 f0             	movzx  esi,al
c001c316:	c1 e6 06             	shl    esi,0x6
c001c319:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001c321:	50                   	push   eax
c001c322:	57                   	push   edi
c001c323:	e8 30 f6 ff ff       	call   c001b958 <IDE::read(unsigned char, unsigned char)>
c001c328:	83 c4 10             	add    esp,0x10
c001c32b:	89 c6                	mov    esi,eax
c001c32d:	a8 01                	test   al,0x1
c001c32f:	74 12                	je     c001c343 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001c331:	83 ec 0c             	sub    esp,0xc
c001c334:	b3 07                	mov    bl,0x7
c001c336:	68 f4 a5 03 c0       	push   0xc003a5f4
c001c33b:	e8 90 08 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001c340:	83 c4 10             	add    esp,0x10
c001c343:	f7 c6 02 00 00 00    	test   esi,0x2
c001c349:	74 12                	je     c001c35d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001c34b:	83 ec 0c             	sub    esp,0xc
c001c34e:	b3 03                	mov    bl,0x3
c001c350:	68 12 a6 03 c0       	push   0xc003a612
c001c355:	e8 76 08 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001c35a:	83 c4 10             	add    esp,0x10
c001c35d:	f7 c6 04 00 00 00    	test   esi,0x4
c001c363:	74 12                	je     c001c377 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001c365:	83 ec 0c             	sub    esp,0xc
c001c368:	b3 14                	mov    bl,0x14
c001c36a:	68 32 a6 03 c0       	push   0xc003a632
c001c36f:	e8 5c 08 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001c374:	83 c4 10             	add    esp,0x10
c001c377:	f7 c6 08 00 00 00    	test   esi,0x8
c001c37d:	74 12                	je     c001c391 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001c37f:	83 ec 0c             	sub    esp,0xc
c001c382:	b3 03                	mov    bl,0x3
c001c384:	68 12 a6 03 c0       	push   0xc003a612
c001c389:	e8 42 08 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001c38e:	83 c4 10             	add    esp,0x10
c001c391:	f7 c6 10 00 00 00    	test   esi,0x10
c001c397:	74 12                	je     c001c3ab <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001c399:	83 ec 0c             	sub    esp,0xc
c001c39c:	b3 15                	mov    bl,0x15
c001c39e:	68 4a a6 03 c0       	push   0xc003a64a
c001c3a3:	e8 28 08 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001c3a8:	83 c4 10             	add    esp,0x10
c001c3ab:	f7 c6 20 00 00 00    	test   esi,0x20
c001c3b1:	74 12                	je     c001c3c5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001c3b3:	83 ec 0c             	sub    esp,0xc
c001c3b6:	b3 03                	mov    bl,0x3
c001c3b8:	68 12 a6 03 c0       	push   0xc003a612
c001c3bd:	e8 0e 08 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001c3c2:	83 c4 10             	add    esp,0x10
c001c3c5:	f7 c6 40 00 00 00    	test   esi,0x40
c001c3cb:	74 12                	je     c001c3df <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001c3cd:	83 ec 0c             	sub    esp,0xc
c001c3d0:	b3 16                	mov    bl,0x16
c001c3d2:	68 64 a6 03 c0       	push   0xc003a664
c001c3d7:	e8 f4 07 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001c3dc:	83 c4 10             	add    esp,0x10
c001c3df:	89 f0                	mov    eax,esi
c001c3e1:	84 c0                	test   al,al
c001c3e3:	79 42                	jns    c001c427 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c3e5:	83 ec 0c             	sub    esp,0xc
c001c3e8:	b3 0d                	mov    bl,0xd
c001c3ea:	68 85 a6 03 c0       	push   0xc003a685
c001c3ef:	e8 dc 07 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001c3f4:	83 c4 10             	add    esp,0x10
c001c3f7:	eb 2e                	jmp    c001c427 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c3f9:	3c 03                	cmp    al,0x3
c001c3fb:	75 14                	jne    c001c411 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001c3fd:	83 ec 0c             	sub    esp,0xc
c001c400:	b3 17                	mov    bl,0x17
c001c402:	68 99 a6 03 c0       	push   0xc003a699
c001c407:	e8 c4 07 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001c40c:	83 c4 10             	add    esp,0x10
c001c40f:	eb 16                	jmp    c001c427 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c411:	3c 04                	cmp    al,0x4
c001c413:	75 12                	jne    c001c427 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c415:	83 ec 0c             	sub    esp,0xc
c001c418:	b3 08                	mov    bl,0x8
c001c41a:	68 af a6 03 c0       	push   0xc003a6af
c001c41f:	e8 ac 07 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001c424:	83 c4 10             	add    esp,0x10
c001c427:	50                   	push   eax
c001c428:	50                   	push   eax
c001c429:	0f b6 c3             	movzx  eax,bl
c001c42c:	50                   	push   eax
c001c42d:	68 c7 a6 03 c0       	push   0xc003a6c7
c001c432:	e8 99 07 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001c437:	83 c4 10             	add    esp,0x10
c001c43a:	83 c4 1c             	add    esp,0x1c
c001c43d:	88 d8                	mov    al,bl
c001c43f:	5b                   	pop    ebx
c001c440:	5e                   	pop    esi
c001c441:	5f                   	pop    edi
c001c442:	5d                   	pop    ebp
c001c443:	c3                   	ret    

c001c444 <IDE::polling(unsigned char, unsigned int)>:
c001c444:	57                   	push   edi
c001c445:	56                   	push   esi
c001c446:	53                   	push   ebx
c001c447:	bb 04 00 00 00       	mov    ebx,0x4
c001c44c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c450:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c455:	52                   	push   edx
c001c456:	6a 0c                	push   0xc
c001c458:	56                   	push   esi
c001c459:	57                   	push   edi
c001c45a:	e8 f9 f4 ff ff       	call   c001b958 <IDE::read(unsigned char, unsigned char)>
c001c45f:	83 c4 10             	add    esp,0x10
c001c462:	4b                   	dec    ebx
c001c463:	75 f0                	jne    c001c455 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c465:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c46a:	50                   	push   eax
c001c46b:	6a 0c                	push   0xc
c001c46d:	56                   	push   esi
c001c46e:	57                   	push   edi
c001c46f:	e8 e4 f4 ff ff       	call   c001b958 <IDE::read(unsigned char, unsigned char)>
c001c474:	83 c4 10             	add    esp,0x10
c001c477:	a8 01                	test   al,0x1
c001c479:	74 12                	je     c001c48d <IDE::polling(unsigned char, unsigned int)+0x49>
c001c47b:	83 ec 0c             	sub    esp,0xc
c001c47e:	68 e1 a6 03 c0       	push   0xc003a6e1
c001c483:	e8 48 07 ff ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001c488:	83 c4 10             	add    esp,0x10
c001c48b:	eb 17                	jmp    c001c4a4 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c48d:	a8 20                	test   al,0x20
c001c48f:	75 0f                	jne    c001c4a0 <IDE::polling(unsigned char, unsigned int)+0x5c>
c001c491:	4b                   	dec    ebx
c001c492:	74 10                	je     c001c4a4 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c494:	84 c0                	test   al,al
c001c496:	78 d2                	js     c001c46a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c498:	a8 08                	test   al,0x8
c001c49a:	74 ce                	je     c001c46a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c49c:	31 c0                	xor    eax,eax
c001c49e:	eb 06                	jmp    c001c4a6 <IDE::polling(unsigned char, unsigned int)+0x62>
c001c4a0:	b0 01                	mov    al,0x1
c001c4a2:	eb 02                	jmp    c001c4a6 <IDE::polling(unsigned char, unsigned int)+0x62>
c001c4a4:	b0 02                	mov    al,0x2
c001c4a6:	5b                   	pop    ebx
c001c4a7:	5e                   	pop    esi
c001c4a8:	5f                   	pop    edi
c001c4a9:	c3                   	ret    

c001c4aa <ATA::close(int, int, void*)>:
c001c4aa:	83 ec 0c             	sub    esp,0xc
c001c4ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4b1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c4b7:	85 c0                	test   eax,eax
c001c4b9:	74 0c                	je     c001c4c7 <ATA::close(int, int, void*)+0x1d>
c001c4bb:	83 ec 0c             	sub    esp,0xc
c001c4be:	8b 10                	mov    edx,DWORD PTR [eax]
c001c4c0:	50                   	push   eax
c001c4c1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c4c4:	83 c4 10             	add    esp,0x10
c001c4c7:	31 c0                	xor    eax,eax
c001c4c9:	83 c4 0c             	add    esp,0xc
c001c4cc:	c3                   	ret    
c001c4cd:	90                   	nop

c001c4ce <ATA::powerSaving(PowerSavingLevel)>:
c001c4ce:	c3                   	ret    
c001c4cf:	90                   	nop

c001c4d0 <ATA::ATA()>:
c001c4d0:	83 ec 0c             	sub    esp,0xc
c001c4d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4d7:	83 ec 04             	sub    esp,0x4
c001c4da:	68 00 02 00 00       	push   0x200
c001c4df:	68 24 a7 03 c0       	push   0xc003a724
c001c4e4:	50                   	push   eax
c001c4e5:	e8 a6 73 ff ff       	call   c0013890 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c4ea:	83 c4 10             	add    esp,0x10
c001c4ed:	ba 50 a7 03 c0       	mov    edx,0xc003a750
c001c4f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4f6:	89 10                	mov    DWORD PTR [eax],edx
c001c4f8:	90                   	nop
c001c4f9:	83 c4 0c             	add    esp,0xc
c001c4fc:	c3                   	ret    
c001c4fd:	90                   	nop

c001c4fe <ATA::flush(bool)>:
c001c4fe:	53                   	push   ebx
c001c4ff:	83 ec 08             	sub    esp,0x8
c001c502:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001c507:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c50b:	19 c0                	sbb    eax,eax
c001c50d:	83 e0 fd             	and    eax,0xfffffffd
c001c510:	05 ea 00 00 00       	add    eax,0xea
c001c515:	50                   	push   eax
c001c516:	6a 07                	push   0x7
c001c518:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c51f:	50                   	push   eax
c001c520:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c526:	e8 6d f3 ff ff       	call   c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c52b:	83 c4 0c             	add    esp,0xc
c001c52e:	6a 00                	push   0x0
c001c530:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c537:	50                   	push   eax
c001c538:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c53e:	e8 01 ff ff ff       	call   c001c444 <IDE::polling(unsigned char, unsigned int)>
c001c543:	83 c4 18             	add    esp,0x18
c001c546:	5b                   	pop    ebx
c001c547:	c3                   	ret    

c001c548 <ATA::readyForCommand()>:
c001c548:	56                   	push   esi
c001c549:	53                   	push   ebx
c001c54a:	31 db                	xor    ebx,ebx
c001c54c:	50                   	push   eax
c001c54d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c551:	50                   	push   eax
c001c552:	6a 0c                	push   0xc
c001c554:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c55b:	50                   	push   eax
c001c55c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c562:	e8 f1 f3 ff ff       	call   c001b958 <IDE::read(unsigned char, unsigned char)>
c001c567:	83 c4 10             	add    esp,0x10
c001c56a:	a8 88                	test   al,0x88
c001c56c:	74 23                	je     c001c591 <ATA::readyForCommand()+0x49>
c001c56e:	43                   	inc    ebx
c001c56f:	83 fb 63             	cmp    ebx,0x63
c001c572:	7e dd                	jle    c001c551 <ATA::readyForCommand()+0x9>
c001c574:	51                   	push   ecx
c001c575:	51                   	push   ecx
c001c576:	6a 00                	push   0x0
c001c578:	68 40 42 0f 00       	push   0xf4240
c001c57d:	e8 a9 21 ff ff       	call   c000e72b <nanoSleep(unsigned long long)>
c001c582:	83 c4 10             	add    esp,0x10
c001c585:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c58b:	75 c4                	jne    c001c551 <ATA::readyForCommand()+0x9>
c001c58d:	31 c0                	xor    eax,eax
c001c58f:	eb 02                	jmp    c001c593 <ATA::readyForCommand()+0x4b>
c001c591:	b0 01                	mov    al,0x1
c001c593:	5a                   	pop    edx
c001c594:	5b                   	pop    ebx
c001c595:	5e                   	pop    esi
c001c596:	c3                   	ret    
c001c597:	90                   	nop

c001c598 <ATA::access(unsigned long long, int, void*, bool)>:
c001c598:	55                   	push   ebp
c001c599:	57                   	push   edi
c001c59a:	56                   	push   esi
c001c59b:	53                   	push   ebx
c001c59c:	83 ec 2c             	sub    esp,0x2c
c001c59f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c5a3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c5a7:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c5ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c5af:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c5b3:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c5b7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c5bb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c5c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c5c5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c5cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c5cf:	c1 e0 06             	shl    eax,0x6
c001c5d2:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c5da:	74 5d                	je     c001c639 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c5dc:	89 fa                	mov    edx,edi
c001c5de:	89 f0                	mov    eax,esi
c001c5e0:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c5e4:	c1 ea 1c             	shr    edx,0x1c
c001c5e7:	89 d1                	mov    ecx,edx
c001c5e9:	09 c1                	or     ecx,eax
c001c5eb:	74 25                	je     c001c612 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c5ed:	31 ed                	xor    ebp,ebp
c001c5ef:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c5f6:	89 fa                	mov    edx,edi
c001c5f8:	89 f0                	mov    eax,esi
c001c5fa:	0f ad d0             	shrd   eax,edx,cl
c001c5fd:	d3 ea                	shr    edx,cl
c001c5ff:	f6 c1 20             	test   cl,0x20
c001c602:	74 02                	je     c001c606 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c604:	89 d0                	mov    eax,edx
c001c606:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c60a:	45                   	inc    ebp
c001c60b:	83 fd 06             	cmp    ebp,0x6
c001c60e:	75 df                	jne    c001c5ef <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c610:	eb 76                	jmp    c001c688 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c612:	89 f0                	mov    eax,esi
c001c614:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c619:	89 fa                	mov    edx,edi
c001c61b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c622:	0f ac d0 10          	shrd   eax,edx,0x10
c001c626:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c62b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c62f:	c1 ee 18             	shr    esi,0x18
c001c632:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c637:	eb 56                	jmp    c001c68f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c639:	6a 00                	push   0x0
c001c63b:	6a 3f                	push   0x3f
c001c63d:	57                   	push   edi
c001c63e:	56                   	push   esi
c001c63f:	e8 d8 1e 00 00       	call   c001e51c <__umoddi3>
c001c644:	83 c4 10             	add    esp,0x10
c001c647:	40                   	inc    eax
c001c648:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c64c:	6a 00                	push   0x0
c001c64e:	68 f0 03 00 00       	push   0x3f0
c001c653:	57                   	push   edi
c001c654:	56                   	push   esi
c001c655:	e8 c2 1d 00 00       	call   c001e41c <__udivdi3>
c001c65a:	83 c4 10             	add    esp,0x10
c001c65d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c662:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c669:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c66e:	6a 00                	push   0x0
c001c670:	6a 3f                	push   0x3f
c001c672:	57                   	push   edi
c001c673:	56                   	push   esi
c001c674:	e8 a3 1d 00 00       	call   c001e41c <__udivdi3>
c001c679:	83 c4 10             	add    esp,0x10
c001c67c:	89 c6                	mov    esi,eax
c001c67e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c683:	83 e6 0f             	and    esi,0xf
c001c686:	eb 07                	jmp    c001c68f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c688:	31 f6                	xor    esi,esi
c001c68a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c68f:	bf 01 00 00 00       	mov    edi,0x1
c001c694:	50                   	push   eax
c001c695:	6a 00                	push   0x0
c001c697:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c69e:	50                   	push   eax
c001c69f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c6a3:	e8 fc f3 ff ff       	call   c001baa4 <IDE::enableIRQs(unsigned char, bool)>
c001c6a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c6ab:	e8 98 fe ff ff       	call   c001c548 <ATA::readyForCommand()>
c001c6b0:	83 c4 10             	add    esp,0x10
c001c6b3:	84 c0                	test   al,al
c001c6b5:	0f 84 50 02 00 00    	je     c001c90b <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001c6bb:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c6c1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c6c7:	c1 e0 04             	shl    eax,0x4
c001c6ca:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c6d1:	09 c6                	or     esi,eax
c001c6d3:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001c6d8:	75 05                	jne    c001c6df <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c6da:	83 ce a0             	or     esi,0xffffffa0
c001c6dd:	eb 03                	jmp    c001c6e2 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c6df:	83 ce e0             	or     esi,0xffffffe0
c001c6e2:	89 f0                	mov    eax,esi
c001c6e4:	0f b6 f0             	movzx  esi,al
c001c6e7:	56                   	push   esi
c001c6e8:	6a 06                	push   0x6
c001c6ea:	51                   	push   ecx
c001c6eb:	52                   	push   edx
c001c6ec:	e8 a7 f1 ff ff       	call   c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6f1:	83 c4 10             	add    esp,0x10
c001c6f4:	6a 00                	push   0x0
c001c6f6:	6a 01                	push   0x1
c001c6f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c6ff:	50                   	push   eax
c001c700:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c706:	e8 8d f1 ff ff       	call   c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c70b:	83 c4 10             	add    esp,0x10
c001c70e:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001c713:	75 6e                	jne    c001c783 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001c715:	6a 00                	push   0x0
c001c717:	6a 08                	push   0x8
c001c719:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c720:	50                   	push   eax
c001c721:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c727:	e8 6c f1 ff ff       	call   c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c72c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c731:	50                   	push   eax
c001c732:	6a 09                	push   0x9
c001c734:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c73b:	50                   	push   eax
c001c73c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c742:	e8 51 f1 ff ff       	call   c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c747:	83 c4 20             	add    esp,0x20
c001c74a:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c74f:	50                   	push   eax
c001c750:	6a 0a                	push   0xa
c001c752:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c759:	50                   	push   eax
c001c75a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c760:	e8 33 f1 ff ff       	call   c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c765:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c76a:	50                   	push   eax
c001c76b:	6a 0b                	push   0xb
c001c76d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c774:	50                   	push   eax
c001c775:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c77b:	e8 18 f1 ff ff       	call   c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c780:	83 c4 20             	add    esp,0x20
c001c783:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c788:	50                   	push   eax
c001c789:	6a 02                	push   0x2
c001c78b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c792:	50                   	push   eax
c001c793:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c799:	e8 fa f0 ff ff       	call   c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c79e:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c7a3:	50                   	push   eax
c001c7a4:	6a 03                	push   0x3
c001c7a6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c7ad:	50                   	push   eax
c001c7ae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c7b4:	e8 df f0 ff ff       	call   c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c7b9:	83 c4 20             	add    esp,0x20
c001c7bc:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c7c1:	50                   	push   eax
c001c7c2:	6a 04                	push   0x4
c001c7c4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c7cb:	50                   	push   eax
c001c7cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c7d2:	e8 c1 f0 ff ff       	call   c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c7d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c7dc:	50                   	push   eax
c001c7dd:	6a 05                	push   0x5
c001c7df:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c7e6:	50                   	push   eax
c001c7e7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c7ed:	e8 a6 f0 ff ff       	call   c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c7f2:	83 c4 20             	add    esp,0x20
c001c7f5:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001c7fa:	0f 94 c0             	sete   al
c001c7fd:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c802:	74 09                	je     c001c80d <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001c804:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001c80b:	eb 07                	jmp    c001c814 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001c80d:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001c814:	0f b6 c0             	movzx  eax,al
c001c817:	50                   	push   eax
c001c818:	6a 07                	push   0x7
c001c81a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c821:	50                   	push   eax
c001c822:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c828:	e8 6b f0 ff ff       	call   c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c82d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001c831:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001c835:	83 c4 10             	add    esp,0x10
c001c838:	85 f6                	test   esi,esi
c001c83a:	0f 84 ac 00 00 00    	je     c001c8ec <ATA::access(unsigned long long, int, void*, bool)+0x354>
c001c840:	50                   	push   eax
c001c841:	6a 01                	push   0x1
c001c843:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c84a:	50                   	push   eax
c001c84b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c851:	e8 ee fb ff ff       	call   c001c444 <IDE::polling(unsigned char, unsigned int)>
c001c856:	83 c4 10             	add    esp,0x10
c001c859:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001c85f:	84 c0                	test   al,al
c001c861:	74 20                	je     c001c883 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c001c863:	0f b6 f8             	movzx  edi,al
c001c866:	0f b6 d2             	movzx  edx,dl
c001c869:	57                   	push   edi
c001c86a:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001c871:	50                   	push   eax
c001c872:	52                   	push   edx
c001c873:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c879:	e8 30 fa ff ff       	call   c001c2ae <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c87e:	e9 85 00 00 00       	jmp    c001c908 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c001c883:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001c888:	74 41                	je     c001c8cb <ATA::access(unsigned long long, int, void*, bool)+0x333>
c001c88a:	31 c9                	xor    ecx,ecx
c001c88c:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001c890:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c894:	50                   	push   eax
c001c895:	50                   	push   eax
c001c896:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c89d:	50                   	push   eax
c001c89e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8a4:	e8 dd ef ff ff       	call   c001b886 <IDE::getBase(unsigned char)>
c001c8a9:	89 c2                	mov    edx,eax
c001c8ab:	89 e8                	mov    eax,ebp
c001c8ad:	66 ef                	out    dx,ax
c001c8af:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c8b3:	83 c4 10             	add    esp,0x10
c001c8b6:	41                   	inc    ecx
c001c8b7:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001c8bd:	75 cd                	jne    c001c88c <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c001c8bf:	4e                   	dec    esi
c001c8c0:	81 c7 00 02 00 00    	add    edi,0x200
c001c8c6:	e9 6d ff ff ff       	jmp    c001c838 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c001c8cb:	0f b6 d2             	movzx  edx,dl
c001c8ce:	51                   	push   ecx
c001c8cf:	51                   	push   ecx
c001c8d0:	52                   	push   edx
c001c8d1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8d7:	e8 aa ef ff ff       	call   c001b886 <IDE::getBase(unsigned char)>
c001c8dc:	b9 00 01 00 00       	mov    ecx,0x100
c001c8e1:	89 c2                	mov    edx,eax
c001c8e3:	fc                   	cld    
c001c8e4:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001c8e7:	83 c4 10             	add    esp,0x10
c001c8ea:	eb d3                	jmp    c001c8bf <ATA::access(unsigned long long, int, void*, bool)+0x327>
c001c8ec:	31 ff                	xor    edi,edi
c001c8ee:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c8f3:	74 16                	je     c001c90b <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001c8f5:	50                   	push   eax
c001c8f6:	50                   	push   eax
c001c8f7:	31 c0                	xor    eax,eax
c001c8f9:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001c8fe:	0f 94 c0             	sete   al
c001c901:	50                   	push   eax
c001c902:	53                   	push   ebx
c001c903:	e8 f6 fb ff ff       	call   c001c4fe <ATA::flush(bool)>
c001c908:	83 c4 10             	add    esp,0x10
c001c90b:	83 c4 2c             	add    esp,0x2c
c001c90e:	89 f8                	mov    eax,edi
c001c910:	5b                   	pop    ebx
c001c911:	5e                   	pop    esi
c001c912:	5f                   	pop    edi
c001c913:	5d                   	pop    ebp
c001c914:	c3                   	ret    
c001c915:	90                   	nop

c001c916 <ATA::read(unsigned long long, int, void*)>:
c001c916:	57                   	push   edi
c001c917:	b8 04 00 00 00       	mov    eax,0x4
c001c91c:	56                   	push   esi
c001c91d:	53                   	push   ebx
c001c91e:	83 ec 10             	sub    esp,0x10
c001c921:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c925:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c929:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001c92c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c930:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c934:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001c93a:	77 3b                	ja     c001c977 <ATA::read(unsigned long long, int, void*)+0x61>
c001c93c:	b8 06 00 00 00       	mov    eax,0x6
c001c941:	85 d2                	test   edx,edx
c001c943:	74 32                	je     c001c977 <ATA::read(unsigned long long, int, void*)+0x61>
c001c945:	50                   	push   eax
c001c946:	50                   	push   eax
c001c947:	6a 00                	push   0x0
c001c949:	52                   	push   edx
c001c94a:	53                   	push   ebx
c001c94b:	57                   	push   edi
c001c94c:	56                   	push   esi
c001c94d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c951:	e8 42 fc ff ff       	call   c001c598 <ATA::access(unsigned long long, int, void*, bool)>
c001c956:	83 c4 20             	add    esp,0x20
c001c959:	85 c0                	test   eax,eax
c001c95b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c95f:	75 11                	jne    c001c972 <ATA::read(unsigned long long, int, void*)+0x5c>
c001c961:	01 1d e8 cd 03 c0    	add    DWORD PTR ds:0xc003cde8,ebx
c001c967:	e8 92 36 ff ff       	call   c000fffe <VgaText::updateDiskUsage()>
c001c96c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c970:	eb 05                	jmp    c001c977 <ATA::read(unsigned long long, int, void*)+0x61>
c001c972:	b8 01 00 00 00       	mov    eax,0x1
c001c977:	83 c4 10             	add    esp,0x10
c001c97a:	5b                   	pop    ebx
c001c97b:	5e                   	pop    esi
c001c97c:	5f                   	pop    edi
c001c97d:	c3                   	ret    

c001c97e <ATA::write(unsigned long long, int, void*)>:
c001c97e:	57                   	push   edi
c001c97f:	b8 04 00 00 00       	mov    eax,0x4
c001c984:	56                   	push   esi
c001c985:	53                   	push   ebx
c001c986:	83 ec 10             	sub    esp,0x10
c001c989:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c98d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c991:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001c994:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c998:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c99c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001c9a2:	77 3b                	ja     c001c9df <ATA::write(unsigned long long, int, void*)+0x61>
c001c9a4:	b8 06 00 00 00       	mov    eax,0x6
c001c9a9:	85 d2                	test   edx,edx
c001c9ab:	74 32                	je     c001c9df <ATA::write(unsigned long long, int, void*)+0x61>
c001c9ad:	50                   	push   eax
c001c9ae:	50                   	push   eax
c001c9af:	6a 01                	push   0x1
c001c9b1:	52                   	push   edx
c001c9b2:	53                   	push   ebx
c001c9b3:	57                   	push   edi
c001c9b4:	56                   	push   esi
c001c9b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c9b9:	e8 da fb ff ff       	call   c001c598 <ATA::access(unsigned long long, int, void*, bool)>
c001c9be:	83 c4 20             	add    esp,0x20
c001c9c1:	85 c0                	test   eax,eax
c001c9c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c9c7:	75 11                	jne    c001c9da <ATA::write(unsigned long long, int, void*)+0x5c>
c001c9c9:	01 1d e4 cd 03 c0    	add    DWORD PTR ds:0xc003cde4,ebx
c001c9cf:	e8 2a 36 ff ff       	call   c000fffe <VgaText::updateDiskUsage()>
c001c9d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9d8:	eb 05                	jmp    c001c9df <ATA::write(unsigned long long, int, void*)+0x61>
c001c9da:	b8 01 00 00 00       	mov    eax,0x1
c001c9df:	83 c4 10             	add    esp,0x10
c001c9e2:	5b                   	pop    ebx
c001c9e3:	5e                   	pop    esi
c001c9e4:	5f                   	pop    edi
c001c9e5:	c3                   	ret    

c001c9e6 <ATA::detectCHS()>:
c001c9e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c9ea:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001c9f0:	c1 e0 06             	shl    eax,0x6
c001c9f3:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001c9f9:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001ca03:	c7 44 24 04 33 a7 03 c0 	mov    DWORD PTR [esp+0x4],0xc003a733
c001ca0b:	e9 de 02 ff ff       	jmp    c000ccee <panic(char const*)>

c001ca10 <ATA::open(int, int, void*)>:
c001ca10:	53                   	push   ebx
c001ca11:	83 ec 08             	sub    esp,0x8
c001ca14:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ca18:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ca1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ca20:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ca26:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ca2c:	c1 e0 06             	shl    eax,0x6
c001ca2f:	01 d0                	add    eax,edx
c001ca31:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001ca38:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001ca3e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001ca45:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ca4f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001ca55:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001ca5c:	75 0c                	jne    c001ca6a <ATA::open(int, int, void*)+0x5a>
c001ca5e:	83 ec 0c             	sub    esp,0xc
c001ca61:	53                   	push   ebx
c001ca62:	e8 7f ff ff ff       	call   c001c9e6 <ATA::detectCHS()>
c001ca67:	83 c4 10             	add    esp,0x10
c001ca6a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ca70:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ca76:	c1 e0 06             	shl    eax,0x6
c001ca79:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001ca80:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ca8a:	d1 e8                	shr    eax,1
c001ca8c:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001ca92:	6a 04                	push   0x4
c001ca94:	6a 0c                	push   0xc
c001ca96:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca9d:	50                   	push   eax
c001ca9e:	52                   	push   edx
c001ca9f:	e8 f4 ed ff ff       	call   c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001caa4:	90                   	nop
c001caa5:	90                   	nop
c001caa6:	6a 00                	push   0x0
c001caa8:	6a 0c                	push   0xc
c001caaa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cab1:	50                   	push   eax
c001cab2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cab8:	e8 db ed ff ff       	call   c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cabd:	83 c4 14             	add    esp,0x14
c001cac0:	53                   	push   ebx
c001cac1:	e8 32 6e ff ff       	call   c00138f8 <PhysicalDisk::startCache()>
c001cac6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cac9:	e8 82 86 ff ff       	call   c0015150 <createPartitionsForDisk(PhysicalDisk*)>
c001cace:	31 c0                	xor    eax,eax
c001cad0:	83 c4 18             	add    esp,0x18
c001cad3:	5b                   	pop    ebx
c001cad4:	c3                   	ret    
c001cad5:	90                   	nop

c001cad6 <ATAPI::write(unsigned long long, int, void*)>:
c001cad6:	b8 03 00 00 00       	mov    eax,0x3
c001cadb:	c3                   	ret    

c001cadc <ATAPI::close(int, int, void*)>:
c001cadc:	83 ec 0c             	sub    esp,0xc
c001cadf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cae3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cae9:	85 c0                	test   eax,eax
c001caeb:	74 0c                	je     c001caf9 <ATAPI::close(int, int, void*)+0x1d>
c001caed:	83 ec 0c             	sub    esp,0xc
c001caf0:	8b 10                	mov    edx,DWORD PTR [eax]
c001caf2:	50                   	push   eax
c001caf3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001caf6:	83 c4 10             	add    esp,0x10
c001caf9:	31 c0                	xor    eax,eax
c001cafb:	83 c4 0c             	add    esp,0xc
c001cafe:	c3                   	ret    
c001caff:	90                   	nop

c001cb00 <ATAPI::ATAPI()>:
c001cb00:	83 ec 0c             	sub    esp,0xc
c001cb03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb07:	83 ec 04             	sub    esp,0x4
c001cb0a:	68 00 08 00 00       	push   0x800
c001cb0f:	68 7c a7 03 c0       	push   0xc003a77c
c001cb14:	50                   	push   eax
c001cb15:	e8 76 6d ff ff       	call   c0013890 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cb1a:	83 c4 10             	add    esp,0x10
c001cb1d:	ba bc a7 03 c0       	mov    edx,0xc003a7bc
c001cb22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb26:	89 10                	mov    DWORD PTR [eax],edx
c001cb28:	90                   	nop
c001cb29:	83 c4 0c             	add    esp,0xc
c001cb2c:	c3                   	ret    
c001cb2d:	90                   	nop

c001cb2e <ATAPI::readyForCommand()>:
c001cb2e:	56                   	push   esi
c001cb2f:	53                   	push   ebx
c001cb30:	31 db                	xor    ebx,ebx
c001cb32:	50                   	push   eax
c001cb33:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cb37:	50                   	push   eax
c001cb38:	6a 0c                	push   0xc
c001cb3a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cb41:	50                   	push   eax
c001cb42:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cb48:	e8 0b ee ff ff       	call   c001b958 <IDE::read(unsigned char, unsigned char)>
c001cb4d:	83 c4 10             	add    esp,0x10
c001cb50:	a8 88                	test   al,0x88
c001cb52:	74 23                	je     c001cb77 <ATAPI::readyForCommand()+0x49>
c001cb54:	43                   	inc    ebx
c001cb55:	83 fb 63             	cmp    ebx,0x63
c001cb58:	7e dd                	jle    c001cb37 <ATAPI::readyForCommand()+0x9>
c001cb5a:	51                   	push   ecx
c001cb5b:	51                   	push   ecx
c001cb5c:	6a 00                	push   0x0
c001cb5e:	68 40 42 0f 00       	push   0xf4240
c001cb63:	e8 c3 1b ff ff       	call   c000e72b <nanoSleep(unsigned long long)>
c001cb68:	83 c4 10             	add    esp,0x10
c001cb6b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cb71:	75 c4                	jne    c001cb37 <ATAPI::readyForCommand()+0x9>
c001cb73:	31 c0                	xor    eax,eax
c001cb75:	eb 02                	jmp    c001cb79 <ATAPI::readyForCommand()+0x4b>
c001cb77:	b0 01                	mov    al,0x1
c001cb79:	5a                   	pop    edx
c001cb7a:	5b                   	pop    ebx
c001cb7b:	5e                   	pop    esi
c001cb7c:	c3                   	ret    
c001cb7d:	90                   	nop

c001cb7e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001cb7e:	55                   	push   ebp
c001cb7f:	57                   	push   edi
c001cb80:	56                   	push   esi
c001cb81:	53                   	push   ebx
c001cb82:	83 ec 20             	sub    esp,0x20
c001cb85:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001cb89:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001cb8d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001cb91:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cb95:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001cb99:	6a 01                	push   0x1
c001cb9b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cba2:	50                   	push   eax
c001cba3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cba9:	e8 f6 ee ff ff       	call   c001baa4 <IDE::enableIRQs(unsigned char, bool)>
c001cbae:	5e                   	pop    esi
c001cbaf:	58                   	pop    eax
c001cbb0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cbb7:	50                   	push   eax
c001cbb8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cbbe:	e8 af ec ff ff       	call   c001b872 <IDE::prepareInterrupt(unsigned char)>
c001cbc3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cbc6:	e8 63 ff ff ff       	call   c001cb2e <ATAPI::readyForCommand()>
c001cbcb:	83 c4 10             	add    esp,0x10
c001cbce:	84 c0                	test   al,al
c001cbd0:	75 0a                	jne    c001cbdc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001cbd2:	bb 01 00 00 00       	mov    ebx,0x1
c001cbd7:	e9 57 02 00 00       	jmp    c001ce33 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cbdc:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001cbe2:	c1 e0 04             	shl    eax,0x4
c001cbe5:	0f b6 c0             	movzx  eax,al
c001cbe8:	50                   	push   eax
c001cbe9:	6a 06                	push   0x6
c001cbeb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cbf2:	50                   	push   eax
c001cbf3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cbf9:	e8 9a ec ff ff       	call   c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cbfe:	6a 00                	push   0x0
c001cc00:	6a 01                	push   0x1
c001cc02:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cc09:	50                   	push   eax
c001cc0a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cc10:	e8 83 ec ff ff       	call   c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc15:	83 c4 20             	add    esp,0x20
c001cc18:	0f b6 c3             	movzx  eax,bl
c001cc1b:	0f b6 df             	movzx  ebx,bh
c001cc1e:	50                   	push   eax
c001cc1f:	6a 04                	push   0x4
c001cc21:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cc28:	50                   	push   eax
c001cc29:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cc2f:	e8 64 ec ff ff       	call   c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc34:	53                   	push   ebx
c001cc35:	6a 05                	push   0x5
c001cc37:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cc3e:	50                   	push   eax
c001cc3f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cc45:	e8 4e ec ff ff       	call   c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc4a:	83 c4 20             	add    esp,0x20
c001cc4d:	68 a0 00 00 00       	push   0xa0
c001cc52:	6a 07                	push   0x7
c001cc54:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cc5b:	50                   	push   eax
c001cc5c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cc62:	e8 31 ec ff ff       	call   c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc67:	83 c4 0c             	add    esp,0xc
c001cc6a:	6a 01                	push   0x1
c001cc6c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cc73:	50                   	push   eax
c001cc74:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cc7a:	e8 c5 f7 ff ff       	call   c001c444 <IDE::polling(unsigned char, unsigned int)>
c001cc7f:	83 c4 10             	add    esp,0x10
c001cc82:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001cc88:	84 c0                	test   al,al
c001cc8a:	74 23                	je     c001ccaf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001cc8c:	0f b6 d8             	movzx  ebx,al
c001cc8f:	0f b6 d2             	movzx  edx,dl
c001cc92:	53                   	push   ebx
c001cc93:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001cc9a:	50                   	push   eax
c001cc9b:	52                   	push   edx
c001cc9c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cca2:	e8 07 f6 ff ff       	call   c001c2ae <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cca7:	83 c4 10             	add    esp,0x10
c001ccaa:	e9 84 01 00 00       	jmp    c001ce33 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ccaf:	0f b6 d2             	movzx  edx,dl
c001ccb2:	53                   	push   ebx
c001ccb3:	53                   	push   ebx
c001ccb4:	52                   	push   edx
c001ccb5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ccbb:	e8 c6 eb ff ff       	call   c001b886 <IDE::getBase(unsigned char)>
c001ccc0:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ccc4:	b9 06 00 00 00       	mov    ecx,0x6
c001ccc9:	89 c2                	mov    edx,eax
c001cccb:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001ccce:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001ccd2:	83 c4 10             	add    esp,0x10
c001ccd5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ccdb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cce2:	85 db                	test   ebx,ebx
c001cce4:	0f 84 ec 00 00 00    	je     c001cdd6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001ccea:	51                   	push   ecx
c001cceb:	51                   	push   ecx
c001ccec:	52                   	push   edx
c001cced:	50                   	push   eax
c001ccee:	e8 13 ed ff ff       	call   c001ba06 <IDE::waitInterrupt(unsigned char)>
c001ccf3:	83 c4 10             	add    esp,0x10
c001ccf6:	84 c0                	test   al,al
c001ccf8:	0f 84 d4 fe ff ff    	je     c001cbd2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ccfe:	56                   	push   esi
c001ccff:	56                   	push   esi
c001cd00:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cd07:	50                   	push   eax
c001cd08:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cd0e:	e8 5f eb ff ff       	call   c001b872 <IDE::prepareInterrupt(unsigned char)>
c001cd13:	83 c4 0c             	add    esp,0xc
c001cd16:	6a 04                	push   0x4
c001cd18:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cd1f:	50                   	push   eax
c001cd20:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cd26:	e8 2d ec ff ff       	call   c001b958 <IDE::read(unsigned char, unsigned char)>
c001cd2b:	83 c4 0c             	add    esp,0xc
c001cd2e:	89 c6                	mov    esi,eax
c001cd30:	6a 05                	push   0x5
c001cd32:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cd39:	50                   	push   eax
c001cd3a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cd40:	e8 13 ec ff ff       	call   c001b958 <IDE::read(unsigned char, unsigned char)>
c001cd45:	89 f1                	mov    ecx,esi
c001cd47:	0f b6 c0             	movzx  eax,al
c001cd4a:	0f b6 f1             	movzx  esi,cl
c001cd4d:	c1 e0 08             	shl    eax,0x8
c001cd50:	09 c6                	or     esi,eax
c001cd52:	d1 fe                	sar    esi,1
c001cd54:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001cd58:	83 c4 10             	add    esp,0x10
c001cd5b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001cd60:	74 41                	je     c001cda3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001cd62:	31 c9                	xor    ecx,ecx
c001cd64:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cd6a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cd71:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001cd75:	75 0a                	jne    c001cd81 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001cd77:	01 c9                	add    ecx,ecx
c001cd79:	01 cd                	add    ebp,ecx
c001cd7b:	4b                   	dec    ebx
c001cd7c:	e9 54 ff ff ff       	jmp    c001ccd5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001cd81:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001cd86:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cd8a:	51                   	push   ecx
c001cd8b:	51                   	push   ecx
c001cd8c:	52                   	push   edx
c001cd8d:	50                   	push   eax
c001cd8e:	e8 f3 ea ff ff       	call   c001b886 <IDE::getBase(unsigned char)>
c001cd93:	89 c2                	mov    edx,eax
c001cd95:	89 f0                	mov    eax,esi
c001cd97:	66 ef                	out    dx,ax
c001cd99:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cd9d:	83 c4 10             	add    esp,0x10
c001cda0:	41                   	inc    ecx
c001cda1:	eb c1                	jmp    c001cd64 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001cda3:	31 f6                	xor    esi,esi
c001cda5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cdab:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cdb2:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001cdb6:	75 06                	jne    c001cdbe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001cdb8:	01 f6                	add    esi,esi
c001cdba:	01 f5                	add    ebp,esi
c001cdbc:	eb bd                	jmp    c001cd7b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001cdbe:	51                   	push   ecx
c001cdbf:	51                   	push   ecx
c001cdc0:	52                   	push   edx
c001cdc1:	50                   	push   eax
c001cdc2:	e8 bf ea ff ff       	call   c001b886 <IDE::getBase(unsigned char)>
c001cdc7:	89 c2                	mov    edx,eax
c001cdc9:	66 ed                	in     ax,dx
c001cdcb:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001cdd0:	83 c4 10             	add    esp,0x10
c001cdd3:	46                   	inc    esi
c001cdd4:	eb cf                	jmp    c001cda5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001cdd6:	51                   	push   ecx
c001cdd7:	51                   	push   ecx
c001cdd8:	52                   	push   edx
c001cdd9:	50                   	push   eax
c001cdda:	e8 27 ec ff ff       	call   c001ba06 <IDE::waitInterrupt(unsigned char)>
c001cddf:	83 c4 10             	add    esp,0x10
c001cde2:	84 c0                	test   al,al
c001cde4:	0f 84 e8 fd ff ff    	je     c001cbd2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001cdea:	bb a0 86 01 00       	mov    ebx,0x186a0
c001cdef:	52                   	push   edx
c001cdf0:	52                   	push   edx
c001cdf1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cdf8:	50                   	push   eax
c001cdf9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cdff:	e8 6e ea ff ff       	call   c001b872 <IDE::prepareInterrupt(unsigned char)>
c001ce04:	83 c4 10             	add    esp,0x10
c001ce07:	50                   	push   eax
c001ce08:	50                   	push   eax
c001ce09:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ce10:	50                   	push   eax
c001ce11:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ce17:	e8 6a ea ff ff       	call   c001b886 <IDE::getBase(unsigned char)>
c001ce1c:	8d 50 07             	lea    edx,[eax+0x7]
c001ce1f:	ec                   	in     al,dx
c001ce20:	83 c4 10             	add    esp,0x10
c001ce23:	a8 88                	test   al,0x88
c001ce25:	74 0a                	je     c001ce31 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001ce27:	4b                   	dec    ebx
c001ce28:	75 dd                	jne    c001ce07 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001ce2a:	bb 02 00 00 00       	mov    ebx,0x2
c001ce2f:	eb 02                	jmp    c001ce33 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ce31:	31 db                	xor    ebx,ebx
c001ce33:	83 c4 1c             	add    esp,0x1c
c001ce36:	89 d8                	mov    eax,ebx
c001ce38:	5b                   	pop    ebx
c001ce39:	5e                   	pop    esi
c001ce3a:	5f                   	pop    edi
c001ce3b:	5d                   	pop    ebp
c001ce3c:	c3                   	ret    
c001ce3d:	90                   	nop

c001ce3e <ATAPI::diskRemoved()>:
c001ce3e:	83 ec 18             	sub    esp,0x18
c001ce41:	68 87 a7 03 c0       	push   0xc003a787
c001ce46:	e8 85 fd fe ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001ce4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce4f:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001ce56:	83 c4 1c             	add    esp,0x1c
c001ce59:	c3                   	ret    

c001ce5a <ATAPI::eject()>:
c001ce5a:	57                   	push   edi
c001ce5b:	b9 03 00 00 00       	mov    ecx,0x3
c001ce60:	53                   	push   ebx
c001ce61:	83 ec 14             	sub    esp,0x14
c001ce64:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ce68:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ce6c:	fc                   	cld    
c001ce6d:	31 c0                	xor    eax,eax
c001ce6f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ce71:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ce76:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ce7b:	50                   	push   eax
c001ce7c:	50                   	push   eax
c001ce7d:	6a 00                	push   0x0
c001ce7f:	6a 00                	push   0x0
c001ce81:	6a 00                	push   0x0
c001ce83:	6a 02                	push   0x2
c001ce85:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ce89:	50                   	push   eax
c001ce8a:	53                   	push   ebx
c001ce8b:	e8 ee fc ff ff       	call   c001cb7e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ce90:	83 c4 14             	add    esp,0x14
c001ce93:	53                   	push   ebx
c001ce94:	e8 a5 ff ff ff       	call   c001ce3e <ATAPI::diskRemoved()>
c001ce99:	83 c4 24             	add    esp,0x24
c001ce9c:	5b                   	pop    ebx
c001ce9d:	5f                   	pop    edi
c001ce9e:	c3                   	ret    
c001ce9f:	90                   	nop

c001cea0 <ATAPI::diskInserted()>:
c001cea0:	53                   	push   ebx
c001cea1:	83 ec 14             	sub    esp,0x14
c001cea4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001cea8:	68 9d a7 03 c0       	push   0xc003a79d
c001cead:	e8 1e fd fe ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001ceb2:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001ceb9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cebc:	e8 37 6a ff ff       	call   c00138f8 <PhysicalDisk::startCache()>
c001cec1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001cec5:	83 c4 18             	add    esp,0x18
c001cec8:	5b                   	pop    ebx
c001cec9:	e9 82 82 ff ff       	jmp    c0015150 <createPartitionsForDisk(PhysicalDisk*)>

c001cece <ATAPI::detectMedia()>:
c001cece:	56                   	push   esi
c001cecf:	53                   	push   ebx
c001ced0:	83 ec 28             	sub    esp,0x28
c001ced3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ced7:	6a 0c                	push   0xc
c001ced9:	6a 00                	push   0x0
c001cedb:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001cedf:	56                   	push   esi
c001cee0:	e8 23 37 fe ff       	call   c0000608 <memset>
c001cee5:	58                   	pop    eax
c001cee6:	5a                   	pop    edx
c001cee7:	6a 00                	push   0x0
c001cee9:	6a 00                	push   0x0
c001ceeb:	6a 00                	push   0x0
c001ceed:	6a 00                	push   0x0
c001ceef:	56                   	push   esi
c001cef0:	53                   	push   ebx
c001cef1:	e8 88 fc ff ff       	call   c001cb7e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cef6:	83 c4 1c             	add    esp,0x1c
c001cef9:	6a 0c                	push   0xc
c001cefb:	6a 00                	push   0x0
c001cefd:	56                   	push   esi
c001cefe:	e8 05 37 fe ff       	call   c0000608 <memset>
c001cf03:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001cf08:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001cf0d:	59                   	pop    ecx
c001cf0e:	58                   	pop    eax
c001cf0f:	6a 01                	push   0x1
c001cf11:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001cf15:	50                   	push   eax
c001cf16:	6a 00                	push   0x0
c001cf18:	6a 12                	push   0x12
c001cf1a:	56                   	push   esi
c001cf1b:	53                   	push   ebx
c001cf1c:	e8 5d fc ff ff       	call   c001cb7e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cf21:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001cf25:	83 c4 20             	add    esp,0x20
c001cf28:	83 e0 7f             	and    eax,0x7f
c001cf2b:	3c 70                	cmp    al,0x70
c001cf2d:	74 15                	je     c001cf44 <ATAPI::detectMedia()+0x76>
c001cf2f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cf36:	75 0c                	jne    c001cf44 <ATAPI::detectMedia()+0x76>
c001cf38:	83 ec 0c             	sub    esp,0xc
c001cf3b:	53                   	push   ebx
c001cf3c:	e8 5f ff ff ff       	call   c001cea0 <ATAPI::diskInserted()>
c001cf41:	83 c4 10             	add    esp,0x10
c001cf44:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001cf48:	83 e0 0f             	and    eax,0xf
c001cf4b:	3c 02                	cmp    al,0x2
c001cf4d:	75 1b                	jne    c001cf6a <ATAPI::detectMedia()+0x9c>
c001cf4f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001cf54:	75 2d                	jne    c001cf83 <ATAPI::detectMedia()+0xb5>
c001cf56:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cf5d:	74 24                	je     c001cf83 <ATAPI::detectMedia()+0xb5>
c001cf5f:	83 ec 0c             	sub    esp,0xc
c001cf62:	53                   	push   ebx
c001cf63:	e8 d6 fe ff ff       	call   c001ce3e <ATAPI::diskRemoved()>
c001cf68:	eb 16                	jmp    c001cf80 <ATAPI::detectMedia()+0xb2>
c001cf6a:	84 c0                	test   al,al
c001cf6c:	75 15                	jne    c001cf83 <ATAPI::detectMedia()+0xb5>
c001cf6e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cf75:	75 0c                	jne    c001cf83 <ATAPI::detectMedia()+0xb5>
c001cf77:	83 ec 0c             	sub    esp,0xc
c001cf7a:	53                   	push   ebx
c001cf7b:	e8 20 ff ff ff       	call   c001cea0 <ATAPI::diskInserted()>
c001cf80:	83 c4 10             	add    esp,0x10
c001cf83:	83 c4 24             	add    esp,0x24
c001cf86:	5b                   	pop    ebx
c001cf87:	5e                   	pop    esi
c001cf88:	c3                   	ret    
c001cf89:	90                   	nop

c001cf8a <ATAPI::open(int, int, void*)>:
c001cf8a:	53                   	push   ebx
c001cf8b:	83 ec 08             	sub    esp,0x8
c001cf8e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cf92:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf96:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cf9a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cfa0:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cfa6:	c1 e0 06             	shl    eax,0x6
c001cfa9:	01 d0                	add    eax,edx
c001cfab:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001cfb2:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001cfb8:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001cfbf:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001cfc9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001cfcf:	6a 04                	push   0x4
c001cfd1:	6a 0c                	push   0xc
c001cfd3:	51                   	push   ecx
c001cfd4:	52                   	push   edx
c001cfd5:	e8 be e8 ff ff       	call   c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfda:	90                   	nop
c001cfdb:	90                   	nop
c001cfdc:	6a 00                	push   0x0
c001cfde:	6a 0c                	push   0xc
c001cfe0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfe7:	50                   	push   eax
c001cfe8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfee:	e8 a5 e8 ff ff       	call   c001b898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cff3:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001cffa:	83 c4 14             	add    esp,0x14
c001cffd:	53                   	push   ebx
c001cffe:	e8 cb fe ff ff       	call   c001cece <ATAPI::detectMedia()>
c001d003:	31 c0                	xor    eax,eax
c001d005:	83 c4 18             	add    esp,0x18
c001d008:	5b                   	pop    ebx
c001d009:	c3                   	ret    

c001d00a <ATAPI::read(unsigned long long, int, void*)>:
c001d00a:	55                   	push   ebp
c001d00b:	57                   	push   edi
c001d00c:	56                   	push   esi
c001d00d:	53                   	push   ebx
c001d00e:	83 ec 1c             	sub    esp,0x1c
c001d011:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d015:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d019:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d01d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d024:	74 41                	je     c001d067 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001d026:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d02a:	b9 03 00 00 00       	mov    ecx,0x3
c001d02f:	fc                   	cld    
c001d030:	31 c0                	xor    eax,eax
c001d032:	86 fb                	xchg   bl,bh
c001d034:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d036:	c1 c3 10             	rol    ebx,0x10
c001d039:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d03e:	89 e8                	mov    eax,ebp
c001d040:	86 fb                	xchg   bl,bh
c001d042:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d046:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001d04a:	50                   	push   eax
c001d04b:	50                   	push   eax
c001d04c:	55                   	push   ebp
c001d04d:	c1 e5 0b             	shl    ebp,0xb
c001d050:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d054:	6a 00                	push   0x0
c001d056:	55                   	push   ebp
c001d057:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d05b:	50                   	push   eax
c001d05c:	56                   	push   esi
c001d05d:	e8 1c fb ff ff       	call   c001cb7e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d062:	83 c4 20             	add    esp,0x20
c001d065:	eb 1a                	jmp    c001d081 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001d067:	83 ec 0c             	sub    esp,0xc
c001d06a:	56                   	push   esi
c001d06b:	e8 5e fe ff ff       	call   c001cece <ATAPI::detectMedia()>
c001d070:	83 c4 10             	add    esp,0x10
c001d073:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d07a:	75 aa                	jne    c001d026 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d07c:	b8 02 00 00 00       	mov    eax,0x2
c001d081:	83 c4 1c             	add    esp,0x1c
c001d084:	5b                   	pop    ebx
c001d085:	5e                   	pop    esi
c001d086:	5f                   	pop    edi
c001d087:	5d                   	pop    ebp
c001d088:	c3                   	ret    
c001d089:	90                   	nop

c001d08a <AVX::open(int, int, void*)>:
c001d08a:	83 ec 0c             	sub    esp,0xc
c001d08d:	e8 06 10 00 00       	call   c001e098 <avxInit>
c001d092:	b8 00 00 00 00       	mov    eax,0x0
c001d097:	83 c4 0c             	add    esp,0xc
c001d09a:	c3                   	ret    
c001d09b:	90                   	nop

c001d09c <AVX::close(int, int, void*)>:
c001d09c:	83 ec 0c             	sub    esp,0xc
c001d09f:	e8 f5 0f 00 00       	call   c001e099 <avxClose>
c001d0a4:	b8 00 00 00 00       	mov    eax,0x0
c001d0a9:	83 c4 0c             	add    esp,0xc
c001d0ac:	c3                   	ret    
c001d0ad:	90                   	nop

c001d0ae <AVX::available()>:
c001d0ae:	83 ec 0c             	sub    esp,0xc
c001d0b1:	e8 da 0f 00 00       	call   c001e090 <avxDetect>
c001d0b6:	85 c0                	test   eax,eax
c001d0b8:	0f 95 c0             	setne  al
c001d0bb:	83 c4 0c             	add    esp,0xc
c001d0be:	c3                   	ret    
c001d0bf:	90                   	nop

c001d0c0 <AVX::save(void*)>:
c001d0c0:	83 ec 0c             	sub    esp,0xc
c001d0c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d0c7:	83 ec 0c             	sub    esp,0xc
c001d0ca:	50                   	push   eax
c001d0cb:	e8 c6 0f 00 00       	call   c001e096 <avxSave>
c001d0d0:	83 c4 10             	add    esp,0x10
c001d0d3:	90                   	nop
c001d0d4:	83 c4 0c             	add    esp,0xc
c001d0d7:	c3                   	ret    

c001d0d8 <AVX::load(void*)>:
c001d0d8:	83 ec 0c             	sub    esp,0xc
c001d0db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d0df:	83 ec 0c             	sub    esp,0xc
c001d0e2:	50                   	push   eax
c001d0e3:	e8 af 0f 00 00       	call   c001e097 <avxLoad>
c001d0e8:	83 c4 10             	add    esp,0x10
c001d0eb:	90                   	nop
c001d0ec:	83 c4 0c             	add    esp,0xc
c001d0ef:	c3                   	ret    

c001d0f0 <AVX::AVX()>:
c001d0f0:	83 ec 0c             	sub    esp,0xc
c001d0f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0f7:	83 ec 08             	sub    esp,0x8
c001d0fa:	68 e8 a7 03 c0       	push   0xc003a7e8
c001d0ff:	50                   	push   eax
c001d100:	e8 69 68 ff ff       	call   c001396e <FPU::FPU(char const*)>
c001d105:	83 c4 10             	add    esp,0x10
c001d108:	ba f8 a7 03 c0       	mov    edx,0xc003a7f8
c001d10d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d111:	89 10                	mov    DWORD PTR [eax],edx
c001d113:	90                   	nop
c001d114:	83 c4 0c             	add    esp,0xc
c001d117:	c3                   	ret    

c001d118 <MMX::available()>:
c001d118:	a1 08 b7 03 c0       	mov    eax,ds:0xc003b708
c001d11d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d123:	83 e0 20             	and    eax,0x20
c001d126:	84 c0                	test   al,al
c001d128:	0f 95 c0             	setne  al
c001d12b:	c3                   	ret    

c001d12c <MMX::open(int, int, void*)>:
c001d12c:	83 ec 0c             	sub    esp,0xc
c001d12f:	e8 d8 0f 00 00       	call   c001e10c <x87Init>
c001d134:	b8 00 00 00 00       	mov    eax,0x0
c001d139:	83 c4 0c             	add    esp,0xc
c001d13c:	c3                   	ret    
c001d13d:	90                   	nop

c001d13e <MMX::close(int, int, void*)>:
c001d13e:	83 ec 0c             	sub    esp,0xc
c001d141:	e8 e0 0f 00 00       	call   c001e126 <x87Close>
c001d146:	b8 00 00 00 00       	mov    eax,0x0
c001d14b:	83 c4 0c             	add    esp,0xc
c001d14e:	c3                   	ret    
c001d14f:	90                   	nop

c001d150 <MMX::save(void*)>:
c001d150:	83 ec 0c             	sub    esp,0xc
c001d153:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d157:	83 ec 0c             	sub    esp,0xc
c001d15a:	50                   	push   eax
c001d15b:	e8 a1 0f 00 00       	call   c001e101 <x87Save>
c001d160:	83 c4 10             	add    esp,0x10
c001d163:	90                   	nop
c001d164:	83 c4 0c             	add    esp,0xc
c001d167:	c3                   	ret    

c001d168 <MMX::load(void*)>:
c001d168:	83 ec 0c             	sub    esp,0xc
c001d16b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d16f:	83 ec 0c             	sub    esp,0xc
c001d172:	50                   	push   eax
c001d173:	e8 8f 0f 00 00       	call   c001e107 <x87Load>
c001d178:	83 c4 10             	add    esp,0x10
c001d17b:	90                   	nop
c001d17c:	83 c4 0c             	add    esp,0xc
c001d17f:	c3                   	ret    

c001d180 <MMX::MMX()>:
c001d180:	83 ec 0c             	sub    esp,0xc
c001d183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d187:	83 ec 08             	sub    esp,0x8
c001d18a:	68 28 a8 03 c0       	push   0xc003a828
c001d18f:	50                   	push   eax
c001d190:	e8 d9 67 ff ff       	call   c001396e <FPU::FPU(char const*)>
c001d195:	83 c4 10             	add    esp,0x10
c001d198:	ba 38 a8 03 c0       	mov    edx,0xc003a838
c001d19d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1a1:	89 10                	mov    DWORD PTR [eax],edx
c001d1a3:	90                   	nop
c001d1a4:	83 c4 0c             	add    esp,0xc
c001d1a7:	c3                   	ret    

c001d1a8 <SSE::open(int, int, void*)>:
c001d1a8:	83 ec 0c             	sub    esp,0xc
c001d1ab:	e8 17 0f 00 00       	call   c001e0c7 <sseInit>
c001d1b0:	b8 00 00 00 00       	mov    eax,0x0
c001d1b5:	83 c4 0c             	add    esp,0xc
c001d1b8:	c3                   	ret    
c001d1b9:	90                   	nop

c001d1ba <SSE::close(int, int, void*)>:
c001d1ba:	83 ec 0c             	sub    esp,0xc
c001d1bd:	e8 15 0f 00 00       	call   c001e0d7 <sseClose>
c001d1c2:	b8 00 00 00 00       	mov    eax,0x0
c001d1c7:	83 c4 0c             	add    esp,0xc
c001d1ca:	c3                   	ret    
c001d1cb:	90                   	nop

c001d1cc <SSE::available()>:
c001d1cc:	83 ec 1c             	sub    esp,0x1c
c001d1cf:	e8 cc 0e 00 00       	call   c001e0a0 <sseDetect>
c001d1d4:	85 c0                	test   eax,eax
c001d1d6:	0f 95 c0             	setne  al
c001d1d9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d1dd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d1e1:	83 c4 1c             	add    esp,0x1c
c001d1e4:	c3                   	ret    
c001d1e5:	90                   	nop

c001d1e6 <SSE::save(void*)>:
c001d1e6:	83 ec 0c             	sub    esp,0xc
c001d1e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d1ed:	83 ec 0c             	sub    esp,0xc
c001d1f0:	50                   	push   eax
c001d1f1:	e8 c5 0e 00 00       	call   c001e0bb <sseSave>
c001d1f6:	83 c4 10             	add    esp,0x10
c001d1f9:	90                   	nop
c001d1fa:	83 c4 0c             	add    esp,0xc
c001d1fd:	c3                   	ret    

c001d1fe <SSE::load(void*)>:
c001d1fe:	83 ec 0c             	sub    esp,0xc
c001d201:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d205:	83 ec 0c             	sub    esp,0xc
c001d208:	50                   	push   eax
c001d209:	e8 b3 0e 00 00       	call   c001e0c1 <sseLoad>
c001d20e:	83 c4 10             	add    esp,0x10
c001d211:	90                   	nop
c001d212:	83 c4 0c             	add    esp,0xc
c001d215:	c3                   	ret    

c001d216 <SSE::SSE()>:
c001d216:	83 ec 0c             	sub    esp,0xc
c001d219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d21d:	83 ec 08             	sub    esp,0x8
c001d220:	68 68 a8 03 c0       	push   0xc003a868
c001d225:	50                   	push   eax
c001d226:	e8 43 67 ff ff       	call   c001396e <FPU::FPU(char const*)>
c001d22b:	83 c4 10             	add    esp,0x10
c001d22e:	ba 78 a8 03 c0       	mov    edx,0xc003a878
c001d233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d237:	89 10                	mov    DWORD PTR [eax],edx
c001d239:	90                   	nop
c001d23a:	83 c4 0c             	add    esp,0xc
c001d23d:	c3                   	ret    

c001d23e <x87::open(int, int, void*)>:
c001d23e:	83 ec 0c             	sub    esp,0xc
c001d241:	e8 c6 0e 00 00       	call   c001e10c <x87Init>
c001d246:	b8 00 00 00 00       	mov    eax,0x0
c001d24b:	83 c4 0c             	add    esp,0xc
c001d24e:	c3                   	ret    
c001d24f:	90                   	nop

c001d250 <x87::close(int, int, void*)>:
c001d250:	83 ec 0c             	sub    esp,0xc
c001d253:	e8 ce 0e 00 00       	call   c001e126 <x87Close>
c001d258:	b8 00 00 00 00       	mov    eax,0x0
c001d25d:	83 c4 0c             	add    esp,0xc
c001d260:	c3                   	ret    
c001d261:	90                   	nop

c001d262 <x87::available()>:
c001d262:	83 ec 0c             	sub    esp,0xc
c001d265:	e8 7c 0e 00 00       	call   c001e0e6 <x87Detect>
c001d26a:	85 c0                	test   eax,eax
c001d26c:	0f 95 c0             	setne  al
c001d26f:	83 c4 0c             	add    esp,0xc
c001d272:	c3                   	ret    
c001d273:	90                   	nop

c001d274 <x87::save(void*)>:
c001d274:	83 ec 0c             	sub    esp,0xc
c001d277:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d27b:	83 ec 0c             	sub    esp,0xc
c001d27e:	50                   	push   eax
c001d27f:	e8 7d 0e 00 00       	call   c001e101 <x87Save>
c001d284:	83 c4 10             	add    esp,0x10
c001d287:	90                   	nop
c001d288:	83 c4 0c             	add    esp,0xc
c001d28b:	c3                   	ret    

c001d28c <x87::load(void*)>:
c001d28c:	83 ec 0c             	sub    esp,0xc
c001d28f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d293:	83 ec 0c             	sub    esp,0xc
c001d296:	50                   	push   eax
c001d297:	e8 6b 0e 00 00       	call   c001e107 <x87Load>
c001d29c:	83 c4 10             	add    esp,0x10
c001d29f:	90                   	nop
c001d2a0:	83 c4 0c             	add    esp,0xc
c001d2a3:	c3                   	ret    

c001d2a4 <x87::x87()>:
c001d2a4:	83 ec 0c             	sub    esp,0xc
c001d2a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2ab:	83 ec 08             	sub    esp,0x8
c001d2ae:	68 a8 a8 03 c0       	push   0xc003a8a8
c001d2b3:	50                   	push   eax
c001d2b4:	e8 b5 66 ff ff       	call   c001396e <FPU::FPU(char const*)>
c001d2b9:	83 c4 10             	add    esp,0x10
c001d2bc:	ba b8 a8 03 c0       	mov    edx,0xc003a8b8
c001d2c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2c5:	89 10                	mov    DWORD PTR [eax],edx
c001d2c7:	90                   	nop
c001d2c8:	83 c4 0c             	add    esp,0xc
c001d2cb:	c3                   	ret    

c001d2cc <APIC::disable()>:
c001d2cc:	90                   	nop
c001d2cd:	c3                   	ret    

c001d2ce <APIC::close(int, int, void*)>:
c001d2ce:	55                   	push   ebp
c001d2cf:	89 e5                	mov    ebp,esp
c001d2d1:	83 ec 08             	sub    esp,0x8
c001d2d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d2d7:	8b 00                	mov    eax,DWORD PTR [eax]
c001d2d9:	83 c0 3c             	add    eax,0x3c
c001d2dc:	8b 00                	mov    eax,DWORD PTR [eax]
c001d2de:	83 ec 0c             	sub    esp,0xc
c001d2e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d2e4:	ff d0                	call   eax
c001d2e6:	83 c4 10             	add    esp,0x10
c001d2e9:	b8 00 00 00 00       	mov    eax,0x0
c001d2ee:	c9                   	leave  
c001d2ef:	c3                   	ret    

c001d2f0 <IOAPIC::close(int, int, void*)>:
c001d2f0:	b8 00 00 00 00       	mov    eax,0x0
c001d2f5:	c3                   	ret    

c001d2f6 <APIC::io_wait()>:
c001d2f6:	eb 00                	jmp    c001d2f8 <APIC::io_wait()+0x2>
c001d2f8:	eb 00                	jmp    c001d2fa <APIC::io_wait()+0x4>
c001d2fa:	90                   	nop
c001d2fb:	c3                   	ret    

c001d2fc <APIC::getBase()>:
c001d2fc:	55                   	push   ebp
c001d2fd:	89 e5                	mov    ebp,esp
c001d2ff:	83 ec 18             	sub    esp,0x18
c001d302:	a1 08 b7 03 c0       	mov    eax,ds:0xc003b708
c001d307:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d30d:	83 e0 08             	and    eax,0x8
c001d310:	84 c0                	test   al,al
c001d312:	75 07                	jne    c001d31b <APIC::getBase()+0x1f>
c001d314:	b8 00 00 00 00       	mov    eax,0x0
c001d319:	eb 21                	jmp    c001d33c <APIC::getBase()+0x40>
c001d31b:	a1 08 b7 03 c0       	mov    eax,ds:0xc003b708
c001d320:	83 ec 08             	sub    esp,0x8
c001d323:	6a 1b                	push   0x1b
c001d325:	50                   	push   eax
c001d326:	e8 a1 df fe ff       	call   c000b2cc <Computer::rdmsr(unsigned int)>
c001d32b:	83 c4 10             	add    esp,0x10
c001d32e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d331:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d334:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d337:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d33c:	c9                   	leave  
c001d33d:	c3                   	ret    

c001d33e <APIC::eoi(unsigned char)>:
c001d33e:	55                   	push   ebp
c001d33f:	89 e5                	mov    ebp,esp
c001d341:	83 ec 28             	sub    esp,0x28
c001d344:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d347:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d34a:	83 ec 0c             	sub    esp,0xc
c001d34d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d350:	e8 a7 ff ff ff       	call   c001d2fc <APIC::getBase()>
c001d355:	83 c4 10             	add    esp,0x10
c001d358:	05 b0 00 00 00       	add    eax,0xb0
c001d35d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d360:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001d363:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001d369:	90                   	nop
c001d36a:	c9                   	leave  
c001d36b:	c3                   	ret    

c001d36c <APIC::open(int, int, void*)>:
c001d36c:	55                   	push   ebp
c001d36d:	89 e5                	mov    ebp,esp
c001d36f:	57                   	push   edi
c001d370:	56                   	push   esi
c001d371:	53                   	push   ebx
c001d372:	83 ec 1c             	sub    esp,0x1c
c001d375:	83 ec 0c             	sub    esp,0xc
c001d378:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d37b:	e8 7c ff ff ff       	call   c001d2fc <APIC::getBase()>
c001d380:	83 c4 10             	add    esp,0x10
c001d383:	05 f0 00 00 00       	add    eax,0xf0
c001d388:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d38b:	83 ec 0c             	sub    esp,0xc
c001d38e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d391:	e8 66 ff ff ff       	call   c001d2fc <APIC::getBase()>
c001d396:	83 c4 10             	add    esp,0x10
c001d399:	89 c2                	mov    edx,eax
c001d39b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d39e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d3a4:	0f b6 f8             	movzx  edi,al
c001d3a7:	89 d0                	mov    eax,edx
c001d3a9:	ba 00 00 00 00       	mov    edx,0x0
c001d3ae:	89 c1                	mov    ecx,eax
c001d3b0:	80 e5 ff             	and    ch,0xff
c001d3b3:	89 cb                	mov    ebx,ecx
c001d3b5:	0f b6 f2             	movzx  esi,dl
c001d3b8:	89 d8                	mov    eax,ebx
c001d3ba:	89 f2                	mov    edx,esi
c001d3bc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d3bf:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d3c2:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d3c6:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d3ca:	83 e0 00             	and    eax,0x0
c001d3cd:	09 d0                	or     eax,edx
c001d3cf:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d3d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d3d6:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d3dc:	8d 50 01             	lea    edx,[eax+0x1]
c001d3df:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d3e2:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d3e8:	0f b6 d0             	movzx  edx,al
c001d3eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d3ee:	83 c2 08             	add    edx,0x8
c001d3f1:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d3f5:	0f b6 c9             	movzx  ecx,cl
c001d3f8:	81 c9 00 00 01 00    	or     ecx,0x10000
c001d3fe:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d402:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d405:	8b 00                	mov    eax,DWORD PTR [eax]
c001d407:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d40a:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001d411:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d414:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001d417:	89 10                	mov    DWORD PTR [eax],edx
c001d419:	b8 00 00 00 00       	mov    eax,0x0
c001d41e:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d421:	5b                   	pop    ebx
c001d422:	5e                   	pop    esi
c001d423:	5f                   	pop    edi
c001d424:	5d                   	pop    ebp
c001d425:	c3                   	ret    

c001d426 <IOAPIC::IOAPIC()>:
c001d426:	83 ec 0c             	sub    esp,0xc
c001d429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d42d:	83 ec 08             	sub    esp,0x8
c001d430:	68 e8 a8 03 c0       	push   0xc003a8e8
c001d435:	50                   	push   eax
c001d436:	e8 3f 62 ff ff       	call   c001367a <Device::Device(char const*)>
c001d43b:	83 c4 10             	add    esp,0x10
c001d43e:	ba 10 aa 03 c0       	mov    edx,0xc003aa10
c001d443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d447:	89 10                	mov    DWORD PTR [eax],edx
c001d449:	90                   	nop
c001d44a:	83 c4 0c             	add    esp,0xc
c001d44d:	c3                   	ret    

c001d44e <APIC::APIC()>:
c001d44e:	53                   	push   ebx
c001d44f:	83 ec 18             	sub    esp,0x18
c001d452:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d456:	83 ec 08             	sub    esp,0x8
c001d459:	68 f0 a8 03 c0       	push   0xc003a8f0
c001d45e:	50                   	push   eax
c001d45f:	e8 3e 69 ff ff       	call   c0013da2 <InterruptController::InterruptController(char const*)>
c001d464:	83 c4 10             	add    esp,0x10
c001d467:	ba c8 a9 03 c0       	mov    edx,0xc003a9c8
c001d46c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d470:	89 10                	mov    DWORD PTR [eax],edx
c001d472:	a0 40 ce 03 c0       	mov    al,ds:0xc003ce40
c001d477:	83 f0 01             	xor    eax,0x1
c001d47a:	84 c0                	test   al,al
c001d47c:	0f 84 96 00 00 00    	je     c001d518 <APIC::APIC()+0xca>
c001d482:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001d487:	a0 10 c3 03 c0       	mov    al,ds:0xc003c310
c001d48c:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001d490:	73 7f                	jae    c001d511 <APIC::APIC()+0xc3>
c001d492:	83 ec 0c             	sub    esp,0xc
c001d495:	68 68 01 00 00       	push   0x168
c001d49a:	e8 e1 4c ff ff       	call   c0012180 <operator new(unsigned long)>
c001d49f:	83 c4 10             	add    esp,0x10
c001d4a2:	89 c3                	mov    ebx,eax
c001d4a4:	83 ec 0c             	sub    esp,0xc
c001d4a7:	53                   	push   ebx
c001d4a8:	e8 79 ff ff ff       	call   c001d426 <IOAPIC::IOAPIC()>
c001d4ad:	83 c4 10             	add    esp,0x10
c001d4b0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001d4b4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d4b9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d4bd:	89 14 85 20 ce 03 c0 	mov    DWORD PTR [eax*4-0x3ffc31e0],edx
c001d4c4:	a1 00 ce 03 c0       	mov    eax,ds:0xc003ce00
c001d4c9:	40                   	inc    eax
c001d4ca:	a3 00 ce 03 c0       	mov    ds:0xc003ce00,eax
c001d4cf:	a1 08 b7 03 c0       	mov    eax,ds:0xc003b708
c001d4d4:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d4da:	83 ec 08             	sub    esp,0x8
c001d4dd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d4e1:	50                   	push   eax
c001d4e2:	e8 a3 5f ff ff       	call   c001348a <Device::addChild(Device*)>
c001d4e7:	83 c4 10             	add    esp,0x10
c001d4ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d4ee:	8b 00                	mov    eax,DWORD PTR [eax]
c001d4f0:	83 c0 08             	add    eax,0x8
c001d4f3:	8b 00                	mov    eax,DWORD PTR [eax]
c001d4f5:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001d4fa:	6a 00                	push   0x0
c001d4fc:	6a 00                	push   0x0
c001d4fe:	52                   	push   edx
c001d4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d503:	ff d0                	call   eax
c001d505:	83 c4 10             	add    esp,0x10
c001d508:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001d50c:	e9 76 ff ff ff       	jmp    c001d487 <APIC::APIC()+0x39>
c001d511:	c6 05 40 ce 03 c0 01 	mov    BYTE PTR ds:0xc003ce40,0x1
c001d518:	90                   	nop
c001d519:	83 c4 18             	add    esp,0x18
c001d51c:	5b                   	pop    ebx
c001d51d:	c3                   	ret    

c001d51e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d51e:	55                   	push   ebp
c001d51f:	89 e5                	mov    ebp,esp
c001d521:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d524:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d52a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d52d:	72 1d                	jb     c001d54c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d52f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d532:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d538:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d53b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d541:	01 d0                	add    eax,edx
c001d543:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d546:	73 04                	jae    c001d54c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d548:	b0 01                	mov    al,0x1
c001d54a:	eb 02                	jmp    c001d54e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d54c:	b0 00                	mov    al,0x0
c001d54e:	5d                   	pop    ebp
c001d54f:	c3                   	ret    

c001d550 <IOAPIC::read(int)>:
c001d550:	55                   	push   ebp
c001d551:	89 e5                	mov    ebp,esp
c001d553:	83 ec 10             	sub    esp,0x10
c001d556:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d559:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d55f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d562:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d565:	0f b6 d0             	movzx  edx,al
c001d568:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d56b:	89 10                	mov    DWORD PTR [eax],edx
c001d56d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d570:	83 c0 10             	add    eax,0x10
c001d573:	8b 00                	mov    eax,DWORD PTR [eax]
c001d575:	c9                   	leave  
c001d576:	c3                   	ret    
c001d577:	90                   	nop

c001d578 <IOAPIC::open(int, int, void*)>:
c001d578:	55                   	push   ebp
c001d579:	89 e5                	mov    ebp,esp
c001d57b:	57                   	push   edi
c001d57c:	56                   	push   esi
c001d57d:	53                   	push   ebx
c001d57e:	83 ec 0c             	sub    esp,0xc
c001d581:	83 ec 0c             	sub    esp,0xc
c001d584:	68 1b a9 03 c0       	push   0xc003a91b
c001d589:	e8 42 f6 fe ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001d58e:	83 c4 10             	add    esp,0x10
c001d591:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d594:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d597:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d59d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d5a0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d5a6:	8b 14 85 40 c3 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc3cc0]
c001d5ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d5b0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d5b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d5b9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d5bf:	8b 14 85 c0 c3 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc3c40]
c001d5c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d5c9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d5cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d5d2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d5d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d5db:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d5e1:	0f b6 f8             	movzx  edi,al
c001d5e4:	89 d0                	mov    eax,edx
c001d5e6:	ba 00 00 00 00       	mov    edx,0x0
c001d5eb:	89 c1                	mov    ecx,eax
c001d5ed:	80 e5 ff             	and    ch,0xff
c001d5f0:	89 cb                	mov    ebx,ecx
c001d5f2:	0f b6 f2             	movzx  esi,dl
c001d5f5:	89 d8                	mov    eax,ebx
c001d5f7:	89 f2                	mov    edx,esi
c001d5f9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d5fc:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d5ff:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d603:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d607:	83 e0 00             	and    eax,0x0
c001d60a:	09 d0                	or     eax,edx
c001d60c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d610:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d613:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d619:	8d 50 01             	lea    edx,[eax+0x1]
c001d61c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d61f:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d625:	0f b6 d0             	movzx  edx,al
c001d628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d62b:	83 c2 08             	add    edx,0x8
c001d62e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d632:	0f b6 c9             	movzx  ecx,cl
c001d635:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d63b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d63f:	83 ec 08             	sub    esp,0x8
c001d642:	6a 01                	push   0x1
c001d644:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d647:	e8 04 ff ff ff       	call   c001d550 <IOAPIC::read(int)>
c001d64c:	83 c4 10             	add    esp,0x10
c001d64f:	c1 f8 10             	sar    eax,0x10
c001d652:	0f b6 c0             	movzx  eax,al
c001d655:	8d 50 01             	lea    edx,[eax+0x1]
c001d658:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d65b:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d661:	b8 00 00 00 00       	mov    eax,0x0
c001d666:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d669:	5b                   	pop    ebx
c001d66a:	5e                   	pop    esi
c001d66b:	5f                   	pop    edi
c001d66c:	5d                   	pop    ebp
c001d66d:	c3                   	ret    

c001d66e <IOAPIC::write(int, int)>:
c001d66e:	55                   	push   ebp
c001d66f:	89 e5                	mov    ebp,esp
c001d671:	83 ec 10             	sub    esp,0x10
c001d674:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d677:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d67d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d680:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d683:	0f b6 d0             	movzx  edx,al
c001d686:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d689:	89 10                	mov    DWORD PTR [eax],edx
c001d68b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d68e:	8d 50 10             	lea    edx,[eax+0x10]
c001d691:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d694:	89 02                	mov    DWORD PTR [edx],eax
c001d696:	90                   	nop
c001d697:	c9                   	leave  
c001d698:	c3                   	ret    
c001d699:	90                   	nop

c001d69a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001d69a:	55                   	push   ebp
c001d69b:	89 e5                	mov    ebp,esp
c001d69d:	83 ec 20             	sub    esp,0x20
c001d6a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d6a3:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d6a6:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001d6a9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d6ac:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d6af:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d6b2:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d6b5:	88 d0                	mov    al,dl
c001d6b7:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001d6ba:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d6be:	83 c0 08             	add    eax,0x8
c001d6c1:	01 c0                	add    eax,eax
c001d6c3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d6c6:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d6ca:	83 c0 08             	add    eax,0x8
c001d6cd:	01 c0                	add    eax,eax
c001d6cf:	40                   	inc    eax
c001d6d0:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001d6d3:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d6d6:	50                   	push   eax
c001d6d7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d6da:	e8 71 fe ff ff       	call   c001d550 <IOAPIC::read(int)>
c001d6df:	83 c4 08             	add    esp,0x8
c001d6e2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d6e5:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001d6ec:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001d6ef:	c1 e0 18             	shl    eax,0x18
c001d6f2:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001d6f5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001d6f8:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d6fb:	52                   	push   edx
c001d6fc:	50                   	push   eax
c001d6fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d700:	e8 69 ff ff ff       	call   c001d66e <IOAPIC::write(int, int)>
c001d705:	83 c4 0c             	add    esp,0xc
c001d708:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d70b:	50                   	push   eax
c001d70c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d70f:	e8 3c fe ff ff       	call   c001d550 <IOAPIC::read(int)>
c001d714:	83 c4 08             	add    esp,0x8
c001d717:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d71a:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001d721:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001d728:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001d72f:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001d736:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c001d73a:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001d73d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001d740:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d743:	52                   	push   edx
c001d744:	50                   	push   eax
c001d745:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d748:	e8 21 ff ff ff       	call   c001d66e <IOAPIC::write(int, int)>
c001d74d:	83 c4 0c             	add    esp,0xc
c001d750:	90                   	nop
c001d751:	c9                   	leave  
c001d752:	c3                   	ret    
c001d753:	90                   	nop

c001d754 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001d754:	55                   	push   ebp
c001d755:	89 e5                	mov    ebp,esp
c001d757:	56                   	push   esi
c001d758:	53                   	push   ebx
c001d759:	83 ec 20             	sub    esp,0x20
c001d75c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d75f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d762:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001d766:	74 28                	je     c001d790 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001d768:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001d76c:	7f 12                	jg     c001d780 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c001d76e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d771:	05 60 ae 03 c0       	add    eax,0xc003ae60
c001d776:	8a 00                	mov    al,BYTE PTR [eax]
c001d778:	0f b6 c0             	movzx  eax,al
c001d77b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001d77e:	eb 10                	jmp    c001d790 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001d780:	83 ec 0c             	sub    esp,0xc
c001d783:	68 2c a9 03 c0       	push   0xc003a92c
c001d788:	e8 61 f5 fe ff       	call   c000ccee <panic(char const*)>
c001d78d:	83 c4 10             	add    esp,0x10
c001d790:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d794:	a1 00 ce 03 c0       	mov    eax,ds:0xc003ce00
c001d799:	83 ec 08             	sub    esp,0x8
c001d79c:	50                   	push   eax
c001d79d:	68 64 a9 03 c0       	push   0xc003a964
c001d7a2:	e8 29 f4 fe ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001d7a7:	83 c4 10             	add    esp,0x10
c001d7aa:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d7b1:	a1 00 ce 03 c0       	mov    eax,ds:0xc003ce00
c001d7b6:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d7b9:	7d 58                	jge    c001d813 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001d7bb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d7be:	8b 04 85 20 ce 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc31e0]
c001d7c5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d7c8:	83 ec 08             	sub    esp,0x8
c001d7cb:	52                   	push   edx
c001d7cc:	50                   	push   eax
c001d7cd:	e8 4c fd ff ff       	call   c001d51e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001d7d2:	83 c4 10             	add    esp,0x10
c001d7d5:	84 c0                	test   al,al
c001d7d7:	74 35                	je     c001d80e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c001d7d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d7dc:	8b 1c 85 20 ce 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffc31e0]
c001d7e3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d7e6:	83 c0 20             	add    eax,0x20
c001d7e9:	0f b6 f0             	movzx  esi,al
c001d7ec:	e8 c2 96 ff ff       	call   c0016eb3 <getCPUNumber()>
c001d7f1:	99                   	cdq    
c001d7f2:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001d7f5:	0f b6 c9             	movzx  ecx,cl
c001d7f8:	83 ec 0c             	sub    esp,0xc
c001d7fb:	56                   	push   esi
c001d7fc:	52                   	push   edx
c001d7fd:	50                   	push   eax
c001d7fe:	51                   	push   ecx
c001d7ff:	53                   	push   ebx
c001d800:	e8 95 fe ff ff       	call   c001d69a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001d805:	83 c4 20             	add    esp,0x20
c001d808:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001d80c:	eb 05                	jmp    c001d813 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001d80e:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001d811:	eb 9e                	jmp    c001d7b1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c001d813:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d816:	83 f0 01             	xor    eax,0x1
c001d819:	84 c0                	test   al,al
c001d81b:	74 10                	je     c001d82d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c001d81d:	83 ec 0c             	sub    esp,0xc
c001d820:	68 7b a9 03 c0       	push   0xc003a97b
c001d825:	e8 c4 f4 fe ff       	call   c000ccee <panic(char const*)>
c001d82a:	83 c4 10             	add    esp,0x10
c001d82d:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001d831:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001d838:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001d83c:	7f 65                	jg     c001d8a3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c001d83e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d841:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d844:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001d84b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d84e:	01 ca                	add    edx,ecx
c001d850:	83 c2 54             	add    edx,0x54
c001d853:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001d857:	85 c0                	test   eax,eax
c001d859:	75 43                	jne    c001d89e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c001d85b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d85e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d861:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001d868:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d86b:	01 ca                	add    edx,ecx
c001d86d:	8d 4a 54             	lea    ecx,[edx+0x54]
c001d870:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001d873:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001d877:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d87a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d87d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001d884:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d887:	01 ca                	add    edx,ecx
c001d889:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001d88f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d892:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001d896:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d899:	83 e8 20             	sub    eax,0x20
c001d89c:	eb 1a                	jmp    c001d8b8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c001d89e:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001d8a1:	eb 95                	jmp    c001d838 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c001d8a3:	83 ec 0c             	sub    esp,0xc
c001d8a6:	68 88 a9 03 c0       	push   0xc003a988
c001d8ab:	e8 3e f4 fe ff       	call   c000ccee <panic(char const*)>
c001d8b0:	83 c4 10             	add    esp,0x10
c001d8b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001d8b8:	8d 65 f8             	lea    esp,[ebp-0x8]
c001d8bb:	5b                   	pop    ebx
c001d8bc:	5e                   	pop    esi
c001d8bd:	5d                   	pop    ebp
c001d8be:	c3                   	ret    
c001d8bf:	90                   	nop

c001d8c0 <PIC::disable()>:
c001d8c0:	55                   	push   ebp
c001d8c1:	89 e5                	mov    ebp,esp
c001d8c3:	83 ec 10             	sub    esp,0x10
c001d8c6:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001d8cc:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001d8d0:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001d8d3:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001d8d7:	ee                   	out    dx,al
c001d8d8:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001d8de:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001d8e2:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001d8e5:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001d8e9:	ee                   	out    dx,al
c001d8ea:	90                   	nop
c001d8eb:	c9                   	leave  
c001d8ec:	c3                   	ret    
c001d8ed:	90                   	nop

c001d8ee <PIC::close(int, int, void*)>:
c001d8ee:	55                   	push   ebp
c001d8ef:	89 e5                	mov    ebp,esp
c001d8f1:	83 ec 08             	sub    esp,0x8
c001d8f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8f7:	8b 00                	mov    eax,DWORD PTR [eax]
c001d8f9:	83 c0 3c             	add    eax,0x3c
c001d8fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001d8fe:	83 ec 0c             	sub    esp,0xc
c001d901:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d904:	ff d0                	call   eax
c001d906:	83 c4 10             	add    esp,0x10
c001d909:	b8 00 00 00 00       	mov    eax,0x0
c001d90e:	c9                   	leave  
c001d90f:	c3                   	ret    

c001d910 <PIC::PIC()>:
c001d910:	83 ec 0c             	sub    esp,0xc
c001d913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d917:	83 ec 08             	sub    esp,0x8
c001d91a:	68 34 aa 03 c0       	push   0xc003aa34
c001d91f:	50                   	push   eax
c001d920:	e8 7d 64 ff ff       	call   c0013da2 <InterruptController::InterruptController(char const*)>
c001d925:	83 c4 10             	add    esp,0x10
c001d928:	ba 60 aa 03 c0       	mov    edx,0xc003aa60
c001d92d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d931:	89 10                	mov    DWORD PTR [eax],edx
c001d933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d937:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d93d:	0f b6 d0             	movzx  edx,al
c001d940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d944:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001d94b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d94f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d955:	0f b6 d0             	movzx  edx,al
c001d958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d95c:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001d961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d965:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d96b:	8d 50 01             	lea    edx,[eax+0x1]
c001d96e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d972:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d978:	0f b6 d0             	movzx  edx,al
c001d97b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d97f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d983:	83 e1 3f             	and    ecx,0x3f
c001d986:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d98e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d994:	0f b6 d0             	movzx  edx,al
c001d997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d99b:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001d9a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9a6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d9ac:	0f b6 d0             	movzx  edx,al
c001d9af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9b3:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001d9b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9bc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d9c2:	8d 50 01             	lea    edx,[eax+0x1]
c001d9c5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d9c9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d9cf:	0f b6 d0             	movzx  edx,al
c001d9d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9d6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d9da:	83 e1 3f             	and    ecx,0x3f
c001d9dd:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d9e1:	90                   	nop
c001d9e2:	83 c4 0c             	add    esp,0xc
c001d9e5:	c3                   	ret    

c001d9e6 <PIC::ioWait()>:
c001d9e6:	eb 00                	jmp    c001d9e8 <PIC::ioWait()+0x2>
c001d9e8:	eb 00                	jmp    c001d9ea <PIC::ioWait()+0x4>
c001d9ea:	90                   	nop
c001d9eb:	c3                   	ret    

c001d9ec <PIC::getIRQReg(int)>:
c001d9ec:	55                   	push   ebp
c001d9ed:	89 e5                	mov    ebp,esp
c001d9ef:	83 ec 10             	sub    esp,0x10
c001d9f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d9f5:	0f b6 c0             	movzx  eax,al
c001d9f8:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001d9fe:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001da01:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001da04:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001da08:	ee                   	out    dx,al
c001da09:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001da0c:	0f b6 c0             	movzx  eax,al
c001da0f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001da15:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001da18:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001da1b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001da1f:	ee                   	out    dx,al
c001da20:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001da26:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001da2a:	89 c2                	mov    edx,eax
c001da2c:	ec                   	in     al,dx
c001da2d:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001da30:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001da33:	0f b6 c0             	movzx  eax,al
c001da36:	c1 e0 08             	shl    eax,0x8
c001da39:	89 c1                	mov    ecx,eax
c001da3b:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001da41:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001da45:	89 c2                	mov    edx,eax
c001da47:	ec                   	in     al,dx
c001da48:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001da4b:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001da4e:	0f b6 c0             	movzx  eax,al
c001da51:	09 c8                	or     eax,ecx
c001da53:	c9                   	leave  
c001da54:	c3                   	ret    
c001da55:	90                   	nop

c001da56 <PIC::eoi(unsigned char)>:
c001da56:	55                   	push   ebp
c001da57:	89 e5                	mov    ebp,esp
c001da59:	83 ec 14             	sub    esp,0x14
c001da5c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001da5f:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001da62:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001da66:	75 1e                	jne    c001da86 <PIC::eoi(unsigned char)+0x30>
c001da68:	6a 0b                	push   0xb
c001da6a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da6d:	e8 7a ff ff ff       	call   c001d9ec <PIC::getIRQReg(int)>
c001da72:	83 c4 08             	add    esp,0x8
c001da75:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001da79:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c001da7d:	25 80 00 00 00       	and    eax,0x80
c001da82:	85 c0                	test   eax,eax
c001da84:	74 5f                	je     c001dae5 <PIC::eoi(unsigned char)+0x8f>
c001da86:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001da8a:	75 2d                	jne    c001dab9 <PIC::eoi(unsigned char)+0x63>
c001da8c:	6a 0b                	push   0xb
c001da8e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da91:	e8 56 ff ff ff       	call   c001d9ec <PIC::getIRQReg(int)>
c001da96:	83 c4 08             	add    esp,0x8
c001da99:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001da9d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001daa0:	66 85 c0             	test   ax,ax
c001daa3:	78 14                	js     c001dab9 <PIC::eoi(unsigned char)+0x63>
c001daa5:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001daab:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001daaf:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001dab2:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001dab6:	ee                   	out    dx,al
c001dab7:	eb 2d                	jmp    c001dae6 <PIC::eoi(unsigned char)+0x90>
c001dab9:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001dabd:	76 12                	jbe    c001dad1 <PIC::eoi(unsigned char)+0x7b>
c001dabf:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001dac5:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001dac9:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001dacc:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001dad0:	ee                   	out    dx,al
c001dad1:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001dad7:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001dadb:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001dade:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001dae2:	ee                   	out    dx,al
c001dae3:	eb 01                	jmp    c001dae6 <PIC::eoi(unsigned char)+0x90>
c001dae5:	90                   	nop
c001dae6:	c9                   	leave  
c001dae7:	c3                   	ret    

c001dae8 <PIC::remap()>:
c001dae8:	55                   	push   ebp
c001dae9:	89 e5                	mov    ebp,esp
c001daeb:	83 ec 48             	sub    esp,0x48
c001daee:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001daf5:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001dafc:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001db02:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001db05:	89 c2                	mov    edx,eax
c001db07:	ec                   	in     al,dx
c001db08:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001db0b:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001db0e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001db11:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001db17:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001db1a:	89 c2                	mov    edx,eax
c001db1c:	ec                   	in     al,dx
c001db1d:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001db20:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001db23:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001db26:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001db2c:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001db30:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001db33:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001db36:	ee                   	out    dx,al
c001db37:	83 ec 0c             	sub    esp,0xc
c001db3a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db3d:	e8 a4 fe ff ff       	call   c001d9e6 <PIC::ioWait()>
c001db42:	83 c4 10             	add    esp,0x10
c001db45:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001db4b:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001db4f:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001db52:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001db55:	ee                   	out    dx,al
c001db56:	83 ec 0c             	sub    esp,0xc
c001db59:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db5c:	e8 85 fe ff ff       	call   c001d9e6 <PIC::ioWait()>
c001db61:	83 c4 10             	add    esp,0x10
c001db64:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001db67:	0f b6 c0             	movzx  eax,al
c001db6a:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001db70:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001db73:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001db76:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001db79:	ee                   	out    dx,al
c001db7a:	83 ec 0c             	sub    esp,0xc
c001db7d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db80:	e8 61 fe ff ff       	call   c001d9e6 <PIC::ioWait()>
c001db85:	83 c4 10             	add    esp,0x10
c001db88:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001db8b:	0f b6 c0             	movzx  eax,al
c001db8e:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001db94:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001db97:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001db9a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001db9d:	ee                   	out    dx,al
c001db9e:	83 ec 0c             	sub    esp,0xc
c001dba1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dba4:	e8 3d fe ff ff       	call   c001d9e6 <PIC::ioWait()>
c001dba9:	83 c4 10             	add    esp,0x10
c001dbac:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001dbb2:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001dbb6:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001dbb9:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001dbbc:	ee                   	out    dx,al
c001dbbd:	83 ec 0c             	sub    esp,0xc
c001dbc0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dbc3:	e8 1e fe ff ff       	call   c001d9e6 <PIC::ioWait()>
c001dbc8:	83 c4 10             	add    esp,0x10
c001dbcb:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001dbd1:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001dbd5:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001dbd8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001dbdb:	ee                   	out    dx,al
c001dbdc:	83 ec 0c             	sub    esp,0xc
c001dbdf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dbe2:	e8 ff fd ff ff       	call   c001d9e6 <PIC::ioWait()>
c001dbe7:	83 c4 10             	add    esp,0x10
c001dbea:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001dbf0:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001dbf4:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001dbf7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001dbfa:	ee                   	out    dx,al
c001dbfb:	83 ec 0c             	sub    esp,0xc
c001dbfe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc01:	e8 e0 fd ff ff       	call   c001d9e6 <PIC::ioWait()>
c001dc06:	83 c4 10             	add    esp,0x10
c001dc09:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001dc0f:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001dc13:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001dc16:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001dc19:	ee                   	out    dx,al
c001dc1a:	83 ec 0c             	sub    esp,0xc
c001dc1d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc20:	e8 c1 fd ff ff       	call   c001d9e6 <PIC::ioWait()>
c001dc25:	83 c4 10             	add    esp,0x10
c001dc28:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c001dc2c:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001dc32:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001dc35:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001dc38:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001dc3b:	ee                   	out    dx,al
c001dc3c:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c001dc40:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001dc46:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001dc49:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001dc4c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001dc4f:	ee                   	out    dx,al
c001dc50:	90                   	nop
c001dc51:	c9                   	leave  
c001dc52:	c3                   	ret    
c001dc53:	90                   	nop

c001dc54 <PIC::open(int, int, void*)>:
c001dc54:	55                   	push   ebp
c001dc55:	89 e5                	mov    ebp,esp
c001dc57:	83 ec 18             	sub    esp,0x18
c001dc5a:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001dc60:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001dc64:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001dc67:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001dc6b:	ee                   	out    dx,al
c001dc6c:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001dc72:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001dc76:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001dc79:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001dc7d:	ee                   	out    dx,al
c001dc7e:	83 ec 0c             	sub    esp,0xc
c001dc81:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc84:	e8 5f fe ff ff       	call   c001dae8 <PIC::remap()>
c001dc89:	83 c4 10             	add    esp,0x10
c001dc8c:	b8 00 00 00 00       	mov    eax,0x0
c001dc91:	c9                   	leave  
c001dc92:	c3                   	ret    
c001dc93:	90                   	nop

c001dc94 <APICTimer::close(int, int, void*)>:
c001dc94:	b8 00 00 00 00       	mov    eax,0x0
c001dc99:	c3                   	ret    

c001dc9a <apicTimerHandler(regs*, void*)>:
c001dc9a:	83 ec 0c             	sub    esp,0xc
c001dc9d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dca1:	8b 00                	mov    eax,DWORD PTR [eax]
c001dca3:	99                   	cdq    
c001dca4:	52                   	push   edx
c001dca5:	50                   	push   eax
c001dca6:	6a 00                	push   0x0
c001dca8:	68 00 ca 9a 3b       	push   0x3b9aca00
c001dcad:	e8 6a 07 00 00       	call   c001e41c <__udivdi3>
c001dcb2:	83 c4 10             	add    esp,0x10
c001dcb5:	83 ec 08             	sub    esp,0x8
c001dcb8:	52                   	push   edx
c001dcb9:	50                   	push   eax
c001dcba:	e8 b2 77 ff ff       	call   c0015471 <timerHandler(unsigned long long)>
c001dcbf:	83 c4 10             	add    esp,0x10
c001dcc2:	90                   	nop
c001dcc3:	83 c4 0c             	add    esp,0xc
c001dcc6:	c3                   	ret    
c001dcc7:	90                   	nop

c001dcc8 <APICTimer::write(int)>:
c001dcc8:	53                   	push   ebx
c001dcc9:	83 ec 28             	sub    esp,0x28
c001dccc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcd0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001dcd4:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dcda:	e8 d7 91 ff ff       	call   c0016eb6 <thisCPU()>
c001dcdf:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001dce5:	83 ec 0c             	sub    esp,0xc
c001dce8:	50                   	push   eax
c001dce9:	e8 0e f6 ff ff       	call   c001d2fc <APIC::getBase()>
c001dcee:	83 c4 10             	add    esp,0x10
c001dcf1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dcf5:	a1 d0 c0 03 c0       	mov    eax,ds:0xc003c0d0
c001dcfa:	8b 15 d4 c0 03 c0    	mov    edx,DWORD PTR ds:0xc003c0d4
c001dd00:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dd04:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001dd08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dd0c:	05 e0 03 00 00       	add    eax,0x3e0
c001dd11:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001dd17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dd1b:	05 80 03 00 00       	add    eax,0x380
c001dd20:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001dd26:	fb                   	sti    
c001dd27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd2b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dd2f:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001dd34:	83 d2 00             	adc    edx,0x0
c001dd37:	89 c1                	mov    ecx,eax
c001dd39:	89 d3                	mov    ebx,edx
c001dd3b:	a1 d0 c0 03 c0       	mov    eax,ds:0xc003c0d0
c001dd40:	8b 15 d4 c0 03 c0    	mov    edx,DWORD PTR ds:0xc003c0d4
c001dd46:	39 c8                	cmp    eax,ecx
c001dd48:	89 d0                	mov    eax,edx
c001dd4a:	19 d8                	sbb    eax,ebx
c001dd4c:	73 02                	jae    c001dd50 <APICTimer::write(int)+0x88>
c001dd4e:	eb d7                	jmp    c001dd27 <APICTimer::write(int)+0x5f>
c001dd50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dd54:	05 20 03 00 00       	add    eax,0x320
c001dd59:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001dd5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dd63:	05 90 03 00 00       	add    eax,0x390
c001dd68:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd6a:	f7 d0                	not    eax
c001dd6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dd70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dd74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd78:	ba 00 00 00 00       	mov    edx,0x0
c001dd7d:	f7 f3                	div    ebx
c001dd7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dd83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd87:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001dd8d:	0d 00 00 02 00       	or     eax,0x20000
c001dd92:	89 c2                	mov    edx,eax
c001dd94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dd98:	05 20 03 00 00       	add    eax,0x320
c001dd9d:	89 10                	mov    DWORD PTR [eax],edx
c001dd9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dda3:	05 e0 03 00 00       	add    eax,0x3e0
c001dda8:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001ddae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ddb2:	05 80 03 00 00       	add    eax,0x380
c001ddb7:	89 c2                	mov    edx,eax
c001ddb9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ddbd:	89 02                	mov    DWORD PTR [edx],eax
c001ddbf:	90                   	nop
c001ddc0:	83 c4 28             	add    esp,0x28
c001ddc3:	5b                   	pop    ebx
c001ddc4:	c3                   	ret    
c001ddc5:	90                   	nop

c001ddc6 <APICTimer::open(int, int, void*)>:
c001ddc6:	57                   	push   edi
c001ddc7:	56                   	push   esi
c001ddc8:	53                   	push   ebx
c001ddc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddcd:	8b 00                	mov    eax,DWORD PTR [eax]
c001ddcf:	83 c0 24             	add    eax,0x24
c001ddd2:	8b 00                	mov    eax,DWORD PTR [eax]
c001ddd4:	83 ec 08             	sub    esp,0x8
c001ddd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dddb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dddf:	ff d0                	call   eax
c001dde1:	83 c4 10             	add    esp,0x10
c001dde4:	e8 cd 90 ff ff       	call   c0016eb6 <thisCPU()>
c001dde9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001ddef:	83 ec 0c             	sub    esp,0xc
c001ddf2:	50                   	push   eax
c001ddf3:	e8 04 f5 ff ff       	call   c001d2fc <APIC::getBase()>
c001ddf8:	83 c4 10             	add    esp,0x10
c001ddfb:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001de01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de05:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001de0b:	0f b6 f8             	movzx  edi,al
c001de0e:	89 d0                	mov    eax,edx
c001de10:	ba 00 00 00 00       	mov    edx,0x0
c001de15:	89 c1                	mov    ecx,eax
c001de17:	80 e5 ff             	and    ch,0xff
c001de1a:	89 cb                	mov    ebx,ecx
c001de1c:	0f b6 f2             	movzx  esi,dl
c001de1f:	89 d8                	mov    eax,ebx
c001de21:	89 f2                	mov    edx,esi
c001de23:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001de27:	8d 5f 08             	lea    ebx,[edi+0x8]
c001de2a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001de2e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001de32:	83 e0 00             	and    eax,0x0
c001de35:	09 d0                	or     eax,edx
c001de37:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001de3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de3f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001de45:	8d 50 01             	lea    edx,[eax+0x1]
c001de48:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001de4c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001de52:	0f b6 d0             	movzx  edx,al
c001de55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de59:	83 c2 08             	add    edx,0x8
c001de5c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001de60:	0f b6 c9             	movzx  ecx,cl
c001de63:	81 c9 00 00 01 00    	or     ecx,0x10000
c001de69:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001de6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de71:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001de75:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001de7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de7f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001de83:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001de89:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001de8d:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001de93:	83 ec 0c             	sub    esp,0xc
c001de96:	51                   	push   ecx
c001de97:	6a 01                	push   0x1
c001de99:	68 9a dc 01 c0       	push   0xc001dc9a
c001de9e:	52                   	push   edx
c001de9f:	50                   	push   eax
c001dea0:	e8 39 55 ff ff       	call   c00133de <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dea5:	83 c4 20             	add    esp,0x20
c001dea8:	89 c2                	mov    edx,eax
c001deaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001deae:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001deb4:	b8 00 00 00 00       	mov    eax,0x0
c001deb9:	5b                   	pop    ebx
c001deba:	5e                   	pop    esi
c001debb:	5f                   	pop    edi
c001debc:	c3                   	ret    
c001debd:	90                   	nop

c001debe <APICTimer::APICTimer()>:
c001debe:	83 ec 0c             	sub    esp,0xc
c001dec1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dec5:	83 ec 08             	sub    esp,0x8
c001dec8:	68 a0 aa 03 c0       	push   0xc003aaa0
c001decd:	50                   	push   eax
c001dece:	e8 0f 75 ff ff       	call   c00153e2 <Timer::Timer(char const*)>
c001ded3:	83 c4 10             	add    esp,0x10
c001ded6:	ba b4 aa 03 c0       	mov    edx,0xc003aab4
c001dedb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dedf:	89 10                	mov    DWORD PTR [eax],edx
c001dee1:	90                   	nop
c001dee2:	83 c4 0c             	add    esp,0xc
c001dee5:	c3                   	ret    

c001dee6 <PIT::write(int)>:
c001dee6:	83 ec 10             	sub    esp,0x10
c001dee9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001deed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001def1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001def7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001defb:	a3 44 ce 03 c0       	mov    ds:0xc003ce44,eax
c001df00:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001df05:	99                   	cdq    
c001df06:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001df0a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001df0e:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001df15:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001df1a:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001df1e:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001df23:	ee                   	out    dx,al
c001df24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001df28:	0f b6 c0             	movzx  eax,al
c001df2b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001df32:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001df36:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001df3a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001df3f:	ee                   	out    dx,al
c001df40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001df44:	c1 f8 08             	sar    eax,0x8
c001df47:	0f b6 c0             	movzx  eax,al
c001df4a:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001df51:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001df55:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001df59:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001df5e:	ee                   	out    dx,al
c001df5f:	90                   	nop
c001df60:	83 c4 10             	add    esp,0x10
c001df63:	c3                   	ret    

c001df64 <pitHandler(regs*, void*)>:
c001df64:	83 ec 0c             	sub    esp,0xc
c001df67:	a1 44 ce 03 c0       	mov    eax,ds:0xc003ce44
c001df6c:	99                   	cdq    
c001df6d:	52                   	push   edx
c001df6e:	50                   	push   eax
c001df6f:	6a 00                	push   0x0
c001df71:	68 00 ca 9a 3b       	push   0x3b9aca00
c001df76:	e8 a1 04 00 00       	call   c001e41c <__udivdi3>
c001df7b:	83 c4 10             	add    esp,0x10
c001df7e:	83 ec 08             	sub    esp,0x8
c001df81:	52                   	push   edx
c001df82:	50                   	push   eax
c001df83:	e8 e9 74 ff ff       	call   c0015471 <timerHandler(unsigned long long)>
c001df88:	83 c4 10             	add    esp,0x10
c001df8b:	90                   	nop
c001df8c:	83 c4 0c             	add    esp,0xc
c001df8f:	c3                   	ret    

c001df90 <PIT::open(int, int, void*)>:
c001df90:	83 ec 0c             	sub    esp,0xc
c001df93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df97:	8b 00                	mov    eax,DWORD PTR [eax]
c001df99:	83 c0 24             	add    eax,0x24
c001df9c:	8b 00                	mov    eax,DWORD PTR [eax]
c001df9e:	83 ec 08             	sub    esp,0x8
c001dfa1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dfa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dfa9:	ff d0                	call   eax
c001dfab:	83 c4 10             	add    esp,0x10
c001dfae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfb2:	83 ec 0c             	sub    esp,0xc
c001dfb5:	6a 00                	push   0x0
c001dfb7:	6a 01                	push   0x1
c001dfb9:	68 64 df 01 c0       	push   0xc001df64
c001dfbe:	6a 00                	push   0x0
c001dfc0:	50                   	push   eax
c001dfc1:	e8 18 54 ff ff       	call   c00133de <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dfc6:	83 c4 20             	add    esp,0x20
c001dfc9:	89 c2                	mov    edx,eax
c001dfcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfcf:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001dfd5:	b8 00 00 00 00       	mov    eax,0x0
c001dfda:	83 c4 0c             	add    esp,0xc
c001dfdd:	c3                   	ret    

c001dfde <PIT::close(int, int, void*)>:
c001dfde:	83 ec 0c             	sub    esp,0xc
c001dfe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfe5:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001dfef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dff3:	6a 01                	push   0x1
c001dff5:	68 64 df 01 c0       	push   0xc001df64
c001dffa:	6a 00                	push   0x0
c001dffc:	50                   	push   eax
c001dffd:	e8 3a 54 ff ff       	call   c001343c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e002:	83 c4 10             	add    esp,0x10
c001e005:	b8 00 00 00 00       	mov    eax,0x0
c001e00a:	83 c4 0c             	add    esp,0xc
c001e00d:	c3                   	ret    

c001e00e <PIT::PIT()>:
c001e00e:	83 ec 0c             	sub    esp,0xc
c001e011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e015:	83 ec 08             	sub    esp,0x8
c001e018:	68 dc aa 03 c0       	push   0xc003aadc
c001e01d:	50                   	push   eax
c001e01e:	e8 bf 73 ff ff       	call   c00153e2 <Timer::Timer(char const*)>
c001e023:	83 c4 10             	add    esp,0x10
c001e026:	ba 04 ab 03 c0       	mov    edx,0xc003ab04
c001e02b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e02f:	89 10                	mov    DWORD PTR [eax],edx
c001e031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e035:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e03b:	0f b6 d0             	movzx  edx,al
c001e03e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e042:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001e049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e04d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e053:	0f b6 d0             	movzx  edx,al
c001e056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e05a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001e05f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e063:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e069:	8d 50 01             	lea    edx,[eax+0x1]
c001e06c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e070:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e076:	0f b6 d0             	movzx  edx,al
c001e079:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e07d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e081:	83 e1 3f             	and    ecx,0x3f
c001e084:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e088:	90                   	nop
c001e089:	83 c4 0c             	add    esp,0xc
c001e08c:	c3                   	ret    
c001e08d:	66 90                	xchg   ax,ax
c001e08f:	90                   	nop

c001e090 <avxDetect>:
c001e090:	b8 00 00 00 00       	mov    eax,0x0
c001e095:	c3                   	ret    

c001e096 <avxSave>:
c001e096:	c3                   	ret    

c001e097 <avxLoad>:
c001e097:	c3                   	ret    

c001e098 <avxInit>:
c001e098:	c3                   	ret    

c001e099 <avxClose>:
c001e099:	c3                   	ret    
c001e09a:	66 90                	xchg   ax,ax
c001e09c:	66 90                	xchg   ax,ax
c001e09e:	66 90                	xchg   ax,ax

c001e0a0 <sseDetect>:
c001e0a0:	b8 01 00 00 00       	mov    eax,0x1
c001e0a5:	0f a2                	cpuid  
c001e0a7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e0ad:	74 06                	je     c001e0b5 <sseDetect.noSSE>
c001e0af:	b8 01 00 00 00       	mov    eax,0x1
c001e0b4:	c3                   	ret    

c001e0b5 <sseDetect.noSSE>:
c001e0b5:	b8 00 00 00 00       	mov    eax,0x0
c001e0ba:	c3                   	ret    

c001e0bb <sseSave>:
c001e0bb:	0f ae 44 24 08       	fxsave [esp+0x8]
c001e0c0:	c3                   	ret    

c001e0c1 <sseLoad>:
c001e0c1:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001e0c6:	c3                   	ret    

c001e0c7 <sseInit>:
c001e0c7:	e8 40 00 00 00       	call   c001e10c <x87Init>
c001e0cc:	0f 20 e0             	mov    eax,cr4
c001e0cf:	66 0d 00 06          	or     ax,0x600
c001e0d3:	0f 22 e0             	mov    cr4,eax
c001e0d6:	c3                   	ret    

c001e0d7 <sseClose>:
c001e0d7:	c3                   	ret    
c001e0d8:	66 90                	xchg   ax,ax
c001e0da:	66 90                	xchg   ax,ax
c001e0dc:	66 90                	xchg   ax,ax
c001e0de:	66 90                	xchg   ax,ax

c001e0e0 <value_37F>:
c001e0e0:	7f 03                	jg     c001e0e5 <value_37A+0x1>

c001e0e2 <value_37E>:
c001e0e2:	7e 03                	jle    c001e0e7 <x87Detect+0x1>

c001e0e4 <value_37A>:
c001e0e4:	7a 03                	jp     c001e0e9 <x87Detect+0x3>

c001e0e6 <x87Detect>:
c001e0e6:	b8 01 00 00 00       	mov    eax,0x1
c001e0eb:	0f a2                	cpuid  
c001e0ed:	f7 c2 01 00 00 00    	test   edx,0x1
c001e0f3:	74 06                	je     c001e0fb <x87Detect.nox87>
c001e0f5:	b8 01 00 00 00       	mov    eax,0x1
c001e0fa:	c3                   	ret    

c001e0fb <x87Detect.nox87>:
c001e0fb:	b8 00 00 00 00       	mov    eax,0x0
c001e100:	c3                   	ret    

c001e101 <x87Save>:
c001e101:	9b dd 74 24 08       	fsave  [esp+0x8]
c001e106:	c3                   	ret    

c001e107 <x87Load>:
c001e107:	dd 64 24 08          	frstor [esp+0x8]
c001e10b:	c3                   	ret    

c001e10c <x87Init>:
c001e10c:	9b db e3             	finit  
c001e10f:	0f 20 c0             	mov    eax,cr0
c001e112:	66 25 fb ff          	and    ax,0xfffb
c001e116:	66 0d 22 00          	or     ax,0x22
c001e11a:	0f 22 c0             	mov    cr0,eax
c001e11d:	0f 06                	clts   
c001e11f:	d9 2d e4 e0 01 c0    	fldcw  WORD PTR ds:0xc001e0e4
c001e125:	c3                   	ret    

c001e126 <x87Close>:
c001e126:	c3                   	ret    
c001e127:	90                   	nop

c001e128 <__do_global_ctors_aux>:
c001e128:	a1 58 f2 01 c0       	mov    eax,ds:0xc001f258
c001e12d:	83 f8 ff             	cmp    eax,0xffffffff
c001e130:	74 1a                	je     c001e14c <__do_global_ctors_aux+0x24>
c001e132:	55                   	push   ebp
c001e133:	89 e5                	mov    ebp,esp
c001e135:	53                   	push   ebx
c001e136:	52                   	push   edx
c001e137:	bb 58 f2 01 c0       	mov    ebx,0xc001f258
c001e13c:	ff d0                	call   eax
c001e13e:	83 eb 04             	sub    ebx,0x4
c001e141:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e143:	83 f8 ff             	cmp    eax,0xffffffff
c001e146:	75 f4                	jne    c001e13c <__do_global_ctors_aux+0x14>
c001e148:	58                   	pop    eax
c001e149:	5b                   	pop    ebx
c001e14a:	5d                   	pop    ebp
c001e14b:	c3                   	ret    
c001e14c:	c3                   	ret    
c001e14d:	66 90                	xchg   ax,ax
c001e14f:	90                   	nop

c001e150 <__divdi3>:
c001e150:	55                   	push   ebp
c001e151:	57                   	push   edi
c001e152:	56                   	push   esi
c001e153:	53                   	push   ebx
c001e154:	83 ec 1c             	sub    esp,0x1c
c001e157:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e15b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e15f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e162:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e166:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e16a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e16e:	85 db                	test   ebx,ebx
c001e170:	0f 88 8e 00 00 00    	js     c001e204 <__divdi3+0xb4>
c001e176:	89 dd                	mov    ebp,ebx
c001e178:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e180:	89 d3                	mov    ebx,edx
c001e182:	85 d2                	test   edx,edx
c001e184:	79 0d                	jns    c001e193 <__divdi3+0x43>
c001e186:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e18a:	f7 d8                	neg    eax
c001e18c:	83 d2 00             	adc    edx,0x0
c001e18f:	f7 da                	neg    edx
c001e191:	89 d3                	mov    ebx,edx
c001e193:	89 c7                	mov    edi,eax
c001e195:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e198:	85 db                	test   ebx,ebx
c001e19a:	75 48                	jne    c001e1e4 <__divdi3+0x94>
c001e19c:	39 ef                	cmp    edi,ebp
c001e19e:	76 24                	jbe    c001e1c4 <__divdi3+0x74>
c001e1a0:	89 ea                	mov    edx,ebp
c001e1a2:	f7 f7                	div    edi
c001e1a4:	89 c1                	mov    ecx,eax
c001e1a6:	31 f6                	xor    esi,esi
c001e1a8:	89 c8                	mov    eax,ecx
c001e1aa:	89 f2                	mov    edx,esi
c001e1ac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e1b0:	85 c9                	test   ecx,ecx
c001e1b2:	74 07                	je     c001e1bb <__divdi3+0x6b>
c001e1b4:	f7 d8                	neg    eax
c001e1b6:	83 d2 00             	adc    edx,0x0
c001e1b9:	f7 da                	neg    edx
c001e1bb:	83 c4 1c             	add    esp,0x1c
c001e1be:	5b                   	pop    ebx
c001e1bf:	5e                   	pop    esi
c001e1c0:	5f                   	pop    edi
c001e1c1:	5d                   	pop    ebp
c001e1c2:	c3                   	ret    
c001e1c3:	90                   	nop
c001e1c4:	85 ff                	test   edi,edi
c001e1c6:	75 0b                	jne    c001e1d3 <__divdi3+0x83>
c001e1c8:	b8 01 00 00 00       	mov    eax,0x1
c001e1cd:	31 d2                	xor    edx,edx
c001e1cf:	f7 f3                	div    ebx
c001e1d1:	89 c7                	mov    edi,eax
c001e1d3:	31 d2                	xor    edx,edx
c001e1d5:	89 e8                	mov    eax,ebp
c001e1d7:	f7 f7                	div    edi
c001e1d9:	89 c6                	mov    esi,eax
c001e1db:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e1de:	f7 f7                	div    edi
c001e1e0:	89 c1                	mov    ecx,eax
c001e1e2:	eb c4                	jmp    c001e1a8 <__divdi3+0x58>
c001e1e4:	39 eb                	cmp    ebx,ebp
c001e1e6:	77 3c                	ja     c001e224 <__divdi3+0xd4>
c001e1e8:	0f bd f3             	bsr    esi,ebx
c001e1eb:	83 f6 1f             	xor    esi,0x1f
c001e1ee:	75 40                	jne    c001e230 <__divdi3+0xe0>
c001e1f0:	39 eb                	cmp    ebx,ebp
c001e1f2:	72 09                	jb     c001e1fd <__divdi3+0xad>
c001e1f4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e1f7:	0f 87 97 00 00 00    	ja     c001e294 <__divdi3+0x144>
c001e1fd:	b9 01 00 00 00       	mov    ecx,0x1
c001e202:	eb a4                	jmp    c001e1a8 <__divdi3+0x58>
c001e204:	f7 d9                	neg    ecx
c001e206:	83 d3 00             	adc    ebx,0x0
c001e209:	f7 db                	neg    ebx
c001e20b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e20e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e212:	89 dd                	mov    ebp,ebx
c001e214:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e21c:	e9 5f ff ff ff       	jmp    c001e180 <__divdi3+0x30>
c001e221:	8d 76 00             	lea    esi,[esi+0x0]
c001e224:	31 f6                	xor    esi,esi
c001e226:	31 c9                	xor    ecx,ecx
c001e228:	e9 7b ff ff ff       	jmp    c001e1a8 <__divdi3+0x58>
c001e22d:	8d 76 00             	lea    esi,[esi+0x0]
c001e230:	b8 20 00 00 00       	mov    eax,0x20
c001e235:	29 f0                	sub    eax,esi
c001e237:	89 f1                	mov    ecx,esi
c001e239:	d3 e3                	shl    ebx,cl
c001e23b:	89 fa                	mov    edx,edi
c001e23d:	88 c1                	mov    cl,al
c001e23f:	d3 ea                	shr    edx,cl
c001e241:	09 da                	or     edx,ebx
c001e243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e247:	89 f1                	mov    ecx,esi
c001e249:	d3 e7                	shl    edi,cl
c001e24b:	89 eb                	mov    ebx,ebp
c001e24d:	88 c1                	mov    cl,al
c001e24f:	d3 eb                	shr    ebx,cl
c001e251:	89 f1                	mov    ecx,esi
c001e253:	d3 e5                	shl    ebp,cl
c001e255:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e258:	88 c1                	mov    cl,al
c001e25a:	d3 ea                	shr    edx,cl
c001e25c:	09 d5                	or     ebp,edx
c001e25e:	89 e8                	mov    eax,ebp
c001e260:	89 da                	mov    edx,ebx
c001e262:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e266:	89 d3                	mov    ebx,edx
c001e268:	89 c5                	mov    ebp,eax
c001e26a:	f7 e7                	mul    edi
c001e26c:	39 d3                	cmp    ebx,edx
c001e26e:	72 18                	jb     c001e288 <__divdi3+0x138>
c001e270:	74 0a                	je     c001e27c <__divdi3+0x12c>
c001e272:	89 e9                	mov    ecx,ebp
c001e274:	31 f6                	xor    esi,esi
c001e276:	e9 2d ff ff ff       	jmp    c001e1a8 <__divdi3+0x58>
c001e27b:	90                   	nop
c001e27c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e27f:	89 f1                	mov    ecx,esi
c001e281:	d3 e7                	shl    edi,cl
c001e283:	39 c7                	cmp    edi,eax
c001e285:	73 eb                	jae    c001e272 <__divdi3+0x122>
c001e287:	90                   	nop
c001e288:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e28b:	31 f6                	xor    esi,esi
c001e28d:	e9 16 ff ff ff       	jmp    c001e1a8 <__divdi3+0x58>
c001e292:	66 90                	xchg   ax,ax
c001e294:	31 c9                	xor    ecx,ecx
c001e296:	e9 0d ff ff ff       	jmp    c001e1a8 <__divdi3+0x58>
c001e29b:	90                   	nop

c001e29c <__moddi3>:
c001e29c:	55                   	push   ebp
c001e29d:	57                   	push   edi
c001e29e:	56                   	push   esi
c001e29f:	53                   	push   ebx
c001e2a0:	83 ec 2c             	sub    esp,0x2c
c001e2a3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e2a7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e2ab:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e2af:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e2b3:	85 db                	test   ebx,ebx
c001e2b5:	0f 88 85 00 00 00    	js     c001e340 <__moddi3+0xa4>
c001e2bb:	89 de                	mov    esi,ebx
c001e2bd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e2c5:	89 d7                	mov    edi,edx
c001e2c7:	85 d2                	test   edx,edx
c001e2c9:	79 09                	jns    c001e2d4 <__moddi3+0x38>
c001e2cb:	f7 d8                	neg    eax
c001e2cd:	83 d2 00             	adc    edx,0x0
c001e2d0:	f7 da                	neg    edx
c001e2d2:	89 d7                	mov    edi,edx
c001e2d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e2d8:	89 cd                	mov    ebp,ecx
c001e2da:	85 ff                	test   edi,edi
c001e2dc:	75 52                	jne    c001e330 <__moddi3+0x94>
c001e2de:	89 c3                	mov    ebx,eax
c001e2e0:	39 f0                	cmp    eax,esi
c001e2e2:	76 24                	jbe    c001e308 <__moddi3+0x6c>
c001e2e4:	89 c8                	mov    eax,ecx
c001e2e6:	89 f2                	mov    edx,esi
c001e2e8:	f7 f3                	div    ebx
c001e2ea:	89 d6                	mov    esi,edx
c001e2ec:	89 f0                	mov    eax,esi
c001e2ee:	31 d2                	xor    edx,edx
c001e2f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e2f4:	85 c9                	test   ecx,ecx
c001e2f6:	74 07                	je     c001e2ff <__moddi3+0x63>
c001e2f8:	f7 d8                	neg    eax
c001e2fa:	83 d2 00             	adc    edx,0x0
c001e2fd:	f7 da                	neg    edx
c001e2ff:	83 c4 2c             	add    esp,0x2c
c001e302:	5b                   	pop    ebx
c001e303:	5e                   	pop    esi
c001e304:	5f                   	pop    edi
c001e305:	5d                   	pop    ebp
c001e306:	c3                   	ret    
c001e307:	90                   	nop
c001e308:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e30c:	85 db                	test   ebx,ebx
c001e30e:	75 0d                	jne    c001e31d <__moddi3+0x81>
c001e310:	b8 01 00 00 00       	mov    eax,0x1
c001e315:	31 d2                	xor    edx,edx
c001e317:	f7 f7                	div    edi
c001e319:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e31d:	89 f0                	mov    eax,esi
c001e31f:	31 d2                	xor    edx,edx
c001e321:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e325:	f7 f7                	div    edi
c001e327:	89 e8                	mov    eax,ebp
c001e329:	f7 f7                	div    edi
c001e32b:	89 d6                	mov    esi,edx
c001e32d:	eb bd                	jmp    c001e2ec <__moddi3+0x50>
c001e32f:	90                   	nop
c001e330:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e334:	39 f7                	cmp    edi,esi
c001e336:	76 20                	jbe    c001e358 <__moddi3+0xbc>
c001e338:	89 c8                	mov    eax,ecx
c001e33a:	89 f2                	mov    edx,esi
c001e33c:	eb b2                	jmp    c001e2f0 <__moddi3+0x54>
c001e33e:	66 90                	xchg   ax,ax
c001e340:	f7 d9                	neg    ecx
c001e342:	83 d3 00             	adc    ebx,0x0
c001e345:	f7 db                	neg    ebx
c001e347:	89 de                	mov    esi,ebx
c001e349:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e351:	e9 6f ff ff ff       	jmp    c001e2c5 <__moddi3+0x29>
c001e356:	66 90                	xchg   ax,ax
c001e358:	0f bd c7             	bsr    eax,edi
c001e35b:	83 f0 1f             	xor    eax,0x1f
c001e35e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e362:	75 24                	jne    c001e388 <__moddi3+0xec>
c001e364:	39 f7                	cmp    edi,esi
c001e366:	72 06                	jb     c001e36e <__moddi3+0xd2>
c001e368:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e36c:	77 0c                	ja     c001e37a <__moddi3+0xde>
c001e36e:	89 e9                	mov    ecx,ebp
c001e370:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e374:	19 fe                	sbb    esi,edi
c001e376:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e37a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e37e:	89 f2                	mov    edx,esi
c001e380:	e9 6b ff ff ff       	jmp    c001e2f0 <__moddi3+0x54>
c001e385:	8d 76 00             	lea    esi,[esi+0x0]
c001e388:	b8 20 00 00 00       	mov    eax,0x20
c001e38d:	89 c2                	mov    edx,eax
c001e38f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e393:	29 da                	sub    edx,ebx
c001e395:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e399:	88 d9                	mov    cl,bl
c001e39b:	d3 e7                	shl    edi,cl
c001e39d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e3a1:	88 d1                	mov    cl,dl
c001e3a3:	d3 e8                	shr    eax,cl
c001e3a5:	09 c7                	or     edi,eax
c001e3a7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e3ab:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e3af:	89 d8                	mov    eax,ebx
c001e3b1:	88 d9                	mov    cl,bl
c001e3b3:	d3 e7                	shl    edi,cl
c001e3b5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e3b9:	89 f3                	mov    ebx,esi
c001e3bb:	88 d1                	mov    cl,dl
c001e3bd:	d3 eb                	shr    ebx,cl
c001e3bf:	89 c7                	mov    edi,eax
c001e3c1:	88 c1                	mov    cl,al
c001e3c3:	d3 e6                	shl    esi,cl
c001e3c5:	89 e8                	mov    eax,ebp
c001e3c7:	88 d1                	mov    cl,dl
c001e3c9:	d3 e8                	shr    eax,cl
c001e3cb:	09 f0                	or     eax,esi
c001e3cd:	89 f9                	mov    ecx,edi
c001e3cf:	d3 e5                	shl    ebp,cl
c001e3d1:	89 da                	mov    edx,ebx
c001e3d3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e3d7:	89 d3                	mov    ebx,edx
c001e3d9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e3dd:	89 c6                	mov    esi,eax
c001e3df:	89 d1                	mov    ecx,edx
c001e3e1:	39 d3                	cmp    ebx,edx
c001e3e3:	72 27                	jb     c001e40c <__moddi3+0x170>
c001e3e5:	74 21                	je     c001e408 <__moddi3+0x16c>
c001e3e7:	29 f5                	sub    ebp,esi
c001e3e9:	19 cb                	sbb    ebx,ecx
c001e3eb:	89 de                	mov    esi,ebx
c001e3ed:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e3f1:	d3 e6                	shl    esi,cl
c001e3f3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e3f7:	89 f9                	mov    ecx,edi
c001e3f9:	d3 ed                	shr    ebp,cl
c001e3fb:	09 ee                	or     esi,ebp
c001e3fd:	89 f0                	mov    eax,esi
c001e3ff:	d3 eb                	shr    ebx,cl
c001e401:	89 da                	mov    edx,ebx
c001e403:	e9 e8 fe ff ff       	jmp    c001e2f0 <__moddi3+0x54>
c001e408:	39 c5                	cmp    ebp,eax
c001e40a:	73 db                	jae    c001e3e7 <__moddi3+0x14b>
c001e40c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e410:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e414:	89 d1                	mov    ecx,edx
c001e416:	89 c6                	mov    esi,eax
c001e418:	eb cd                	jmp    c001e3e7 <__moddi3+0x14b>
c001e41a:	66 90                	xchg   ax,ax

c001e41c <__udivdi3>:
c001e41c:	55                   	push   ebp
c001e41d:	57                   	push   edi
c001e41e:	56                   	push   esi
c001e41f:	53                   	push   ebx
c001e420:	83 ec 1c             	sub    esp,0x1c
c001e423:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e427:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e42b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e42f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e433:	85 d2                	test   edx,edx
c001e435:	75 41                	jne    c001e478 <__udivdi3+0x5c>
c001e437:	39 f7                	cmp    edi,esi
c001e439:	76 15                	jbe    c001e450 <__udivdi3+0x34>
c001e43b:	89 e8                	mov    eax,ebp
c001e43d:	89 f2                	mov    edx,esi
c001e43f:	f7 f7                	div    edi
c001e441:	31 db                	xor    ebx,ebx
c001e443:	89 da                	mov    edx,ebx
c001e445:	83 c4 1c             	add    esp,0x1c
c001e448:	5b                   	pop    ebx
c001e449:	5e                   	pop    esi
c001e44a:	5f                   	pop    edi
c001e44b:	5d                   	pop    ebp
c001e44c:	c3                   	ret    
c001e44d:	8d 76 00             	lea    esi,[esi+0x0]
c001e450:	89 f9                	mov    ecx,edi
c001e452:	85 ff                	test   edi,edi
c001e454:	75 0b                	jne    c001e461 <__udivdi3+0x45>
c001e456:	b8 01 00 00 00       	mov    eax,0x1
c001e45b:	31 d2                	xor    edx,edx
c001e45d:	f7 f7                	div    edi
c001e45f:	89 c1                	mov    ecx,eax
c001e461:	31 d2                	xor    edx,edx
c001e463:	89 f0                	mov    eax,esi
c001e465:	f7 f1                	div    ecx
c001e467:	89 c3                	mov    ebx,eax
c001e469:	89 e8                	mov    eax,ebp
c001e46b:	f7 f1                	div    ecx
c001e46d:	89 da                	mov    edx,ebx
c001e46f:	83 c4 1c             	add    esp,0x1c
c001e472:	5b                   	pop    ebx
c001e473:	5e                   	pop    esi
c001e474:	5f                   	pop    edi
c001e475:	5d                   	pop    ebp
c001e476:	c3                   	ret    
c001e477:	90                   	nop
c001e478:	39 f2                	cmp    edx,esi
c001e47a:	77 1c                	ja     c001e498 <__udivdi3+0x7c>
c001e47c:	0f bd da             	bsr    ebx,edx
c001e47f:	83 f3 1f             	xor    ebx,0x1f
c001e482:	75 24                	jne    c001e4a8 <__udivdi3+0x8c>
c001e484:	39 f2                	cmp    edx,esi
c001e486:	72 08                	jb     c001e490 <__udivdi3+0x74>
c001e488:	39 ef                	cmp    edi,ebp
c001e48a:	0f 87 84 00 00 00    	ja     c001e514 <__udivdi3+0xf8>
c001e490:	b8 01 00 00 00       	mov    eax,0x1
c001e495:	eb ac                	jmp    c001e443 <__udivdi3+0x27>
c001e497:	90                   	nop
c001e498:	31 db                	xor    ebx,ebx
c001e49a:	31 c0                	xor    eax,eax
c001e49c:	89 da                	mov    edx,ebx
c001e49e:	83 c4 1c             	add    esp,0x1c
c001e4a1:	5b                   	pop    ebx
c001e4a2:	5e                   	pop    esi
c001e4a3:	5f                   	pop    edi
c001e4a4:	5d                   	pop    ebp
c001e4a5:	c3                   	ret    
c001e4a6:	66 90                	xchg   ax,ax
c001e4a8:	b8 20 00 00 00       	mov    eax,0x20
c001e4ad:	29 d8                	sub    eax,ebx
c001e4af:	88 d9                	mov    cl,bl
c001e4b1:	d3 e2                	shl    edx,cl
c001e4b3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e4b7:	89 fa                	mov    edx,edi
c001e4b9:	88 c1                	mov    cl,al
c001e4bb:	d3 ea                	shr    edx,cl
c001e4bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e4c1:	09 d1                	or     ecx,edx
c001e4c3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e4c7:	88 d9                	mov    cl,bl
c001e4c9:	d3 e7                	shl    edi,cl
c001e4cb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e4cf:	89 f7                	mov    edi,esi
c001e4d1:	88 c1                	mov    cl,al
c001e4d3:	d3 ef                	shr    edi,cl
c001e4d5:	88 d9                	mov    cl,bl
c001e4d7:	d3 e6                	shl    esi,cl
c001e4d9:	89 ea                	mov    edx,ebp
c001e4db:	88 c1                	mov    cl,al
c001e4dd:	d3 ea                	shr    edx,cl
c001e4df:	09 d6                	or     esi,edx
c001e4e1:	89 f0                	mov    eax,esi
c001e4e3:	89 fa                	mov    edx,edi
c001e4e5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e4e9:	89 d7                	mov    edi,edx
c001e4eb:	89 c6                	mov    esi,eax
c001e4ed:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e4f1:	39 d7                	cmp    edi,edx
c001e4f3:	72 13                	jb     c001e508 <__udivdi3+0xec>
c001e4f5:	74 09                	je     c001e500 <__udivdi3+0xe4>
c001e4f7:	89 f0                	mov    eax,esi
c001e4f9:	31 db                	xor    ebx,ebx
c001e4fb:	e9 43 ff ff ff       	jmp    c001e443 <__udivdi3+0x27>
c001e500:	88 d9                	mov    cl,bl
c001e502:	d3 e5                	shl    ebp,cl
c001e504:	39 c5                	cmp    ebp,eax
c001e506:	73 ef                	jae    c001e4f7 <__udivdi3+0xdb>
c001e508:	8d 46 ff             	lea    eax,[esi-0x1]
c001e50b:	31 db                	xor    ebx,ebx
c001e50d:	e9 31 ff ff ff       	jmp    c001e443 <__udivdi3+0x27>
c001e512:	66 90                	xchg   ax,ax
c001e514:	31 c0                	xor    eax,eax
c001e516:	e9 28 ff ff ff       	jmp    c001e443 <__udivdi3+0x27>
c001e51b:	90                   	nop

c001e51c <__umoddi3>:
c001e51c:	55                   	push   ebp
c001e51d:	57                   	push   edi
c001e51e:	56                   	push   esi
c001e51f:	53                   	push   ebx
c001e520:	83 ec 1c             	sub    esp,0x1c
c001e523:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e527:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e52b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e52f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e533:	89 da                	mov    edx,ebx
c001e535:	85 c0                	test   eax,eax
c001e537:	75 37                	jne    c001e570 <__umoddi3+0x54>
c001e539:	39 df                	cmp    edi,ebx
c001e53b:	76 13                	jbe    c001e550 <__umoddi3+0x34>
c001e53d:	89 f0                	mov    eax,esi
c001e53f:	f7 f7                	div    edi
c001e541:	89 d0                	mov    eax,edx
c001e543:	31 d2                	xor    edx,edx
c001e545:	83 c4 1c             	add    esp,0x1c
c001e548:	5b                   	pop    ebx
c001e549:	5e                   	pop    esi
c001e54a:	5f                   	pop    edi
c001e54b:	5d                   	pop    ebp
c001e54c:	c3                   	ret    
c001e54d:	8d 76 00             	lea    esi,[esi+0x0]
c001e550:	89 fd                	mov    ebp,edi
c001e552:	85 ff                	test   edi,edi
c001e554:	75 0b                	jne    c001e561 <__umoddi3+0x45>
c001e556:	b8 01 00 00 00       	mov    eax,0x1
c001e55b:	31 d2                	xor    edx,edx
c001e55d:	f7 f7                	div    edi
c001e55f:	89 c5                	mov    ebp,eax
c001e561:	89 d8                	mov    eax,ebx
c001e563:	31 d2                	xor    edx,edx
c001e565:	f7 f5                	div    ebp
c001e567:	89 f0                	mov    eax,esi
c001e569:	f7 f5                	div    ebp
c001e56b:	89 d0                	mov    eax,edx
c001e56d:	eb d4                	jmp    c001e543 <__umoddi3+0x27>
c001e56f:	90                   	nop
c001e570:	89 f1                	mov    ecx,esi
c001e572:	39 d8                	cmp    eax,ebx
c001e574:	76 0a                	jbe    c001e580 <__umoddi3+0x64>
c001e576:	89 f0                	mov    eax,esi
c001e578:	83 c4 1c             	add    esp,0x1c
c001e57b:	5b                   	pop    ebx
c001e57c:	5e                   	pop    esi
c001e57d:	5f                   	pop    edi
c001e57e:	5d                   	pop    ebp
c001e57f:	c3                   	ret    
c001e580:	0f bd e8             	bsr    ebp,eax
c001e583:	83 f5 1f             	xor    ebp,0x1f
c001e586:	75 1c                	jne    c001e5a4 <__umoddi3+0x88>
c001e588:	39 d8                	cmp    eax,ebx
c001e58a:	72 04                	jb     c001e590 <__umoddi3+0x74>
c001e58c:	39 f7                	cmp    edi,esi
c001e58e:	77 08                	ja     c001e598 <__umoddi3+0x7c>
c001e590:	89 da                	mov    edx,ebx
c001e592:	29 fe                	sub    esi,edi
c001e594:	19 c2                	sbb    edx,eax
c001e596:	89 f1                	mov    ecx,esi
c001e598:	89 c8                	mov    eax,ecx
c001e59a:	83 c4 1c             	add    esp,0x1c
c001e59d:	5b                   	pop    ebx
c001e59e:	5e                   	pop    esi
c001e59f:	5f                   	pop    edi
c001e5a0:	5d                   	pop    ebp
c001e5a1:	c3                   	ret    
c001e5a2:	66 90                	xchg   ax,ax
c001e5a4:	ba 20 00 00 00       	mov    edx,0x20
c001e5a9:	29 ea                	sub    edx,ebp
c001e5ab:	89 e9                	mov    ecx,ebp
c001e5ad:	d3 e0                	shl    eax,cl
c001e5af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e5b3:	89 f8                	mov    eax,edi
c001e5b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e5b9:	88 d1                	mov    cl,dl
c001e5bb:	d3 e8                	shr    eax,cl
c001e5bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e5c1:	09 c1                	or     ecx,eax
c001e5c3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e5c7:	89 e9                	mov    ecx,ebp
c001e5c9:	d3 e7                	shl    edi,cl
c001e5cb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e5cf:	89 d8                	mov    eax,ebx
c001e5d1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e5d5:	88 d1                	mov    cl,dl
c001e5d7:	d3 e8                	shr    eax,cl
c001e5d9:	89 c7                	mov    edi,eax
c001e5db:	89 e9                	mov    ecx,ebp
c001e5dd:	d3 e3                	shl    ebx,cl
c001e5df:	89 f0                	mov    eax,esi
c001e5e1:	88 d1                	mov    cl,dl
c001e5e3:	d3 e8                	shr    eax,cl
c001e5e5:	09 d8                	or     eax,ebx
c001e5e7:	89 e9                	mov    ecx,ebp
c001e5e9:	d3 e6                	shl    esi,cl
c001e5eb:	89 f3                	mov    ebx,esi
c001e5ed:	89 fa                	mov    edx,edi
c001e5ef:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e5f3:	89 d1                	mov    ecx,edx
c001e5f5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e5f9:	89 c6                	mov    esi,eax
c001e5fb:	89 d7                	mov    edi,edx
c001e5fd:	39 d1                	cmp    ecx,edx
c001e5ff:	72 27                	jb     c001e628 <__umoddi3+0x10c>
c001e601:	74 21                	je     c001e624 <__umoddi3+0x108>
c001e603:	89 ca                	mov    edx,ecx
c001e605:	29 f3                	sub    ebx,esi
c001e607:	19 fa                	sbb    edx,edi
c001e609:	89 d0                	mov    eax,edx
c001e60b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e60f:	d3 e0                	shl    eax,cl
c001e611:	89 e9                	mov    ecx,ebp
c001e613:	d3 eb                	shr    ebx,cl
c001e615:	09 d8                	or     eax,ebx
c001e617:	d3 ea                	shr    edx,cl
c001e619:	83 c4 1c             	add    esp,0x1c
c001e61c:	5b                   	pop    ebx
c001e61d:	5e                   	pop    esi
c001e61e:	5f                   	pop    edi
c001e61f:	5d                   	pop    ebp
c001e620:	c3                   	ret    
c001e621:	8d 76 00             	lea    esi,[esi+0x0]
c001e624:	39 c3                	cmp    ebx,eax
c001e626:	73 db                	jae    c001e603 <__umoddi3+0xe7>
c001e628:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e62c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e630:	89 d7                	mov    edi,edx
c001e632:	89 c6                	mov    esi,eax
c001e634:	eb cd                	jmp    c001e603 <__umoddi3+0xe7>
c001e636:	66 90                	xchg   ax,ax
c001e638:	66 90                	xchg   ax,ax
c001e63a:	66 90                	xchg   ax,ax
c001e63c:	66 90                	xchg   ax,ax
c001e63e:	66 90                	xchg   ax,ax

c001e640 <fabs>:
c001e640:	83 ec 0c             	sub    esp,0xc
c001e643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e647:	89 04 24             	mov    DWORD PTR [esp],eax
c001e64a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e64e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001e653:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e657:	dd 04 24             	fld    QWORD PTR [esp]
c001e65a:	83 c4 0c             	add    esp,0xc
c001e65d:	c3                   	ret    
c001e65e:	66 90                	xchg   ax,ax

c001e660 <lrint>:
c001e660:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001e664:	83 ec 04             	sub    esp,0x4
c001e667:	db 1c 24             	fistp  DWORD PTR [esp]
c001e66a:	58                   	pop    eax
c001e66b:	c3                   	ret    

c001e66c <lrintf>:
c001e66c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001e670:	83 ec 04             	sub    esp,0x4
c001e673:	db 1c 24             	fistp  DWORD PTR [esp]
c001e676:	58                   	pop    eax
c001e677:	c3                   	ret    

Disassembly of section .init:

c001e678 <_init>:
c001e678:	55                   	push   ebp
c001e679:	89 e5                	mov    ebp,esp
c001e67b:	e8 98 1a fe ff       	call   c0000118 <frame_dummy>
c001e680:	e8 a3 fa ff ff       	call   c001e128 <__do_global_ctors_aux>
c001e685:	5d                   	pop    ebp
c001e686:	c3                   	ret    

Disassembly of section .fini:

c001e687 <_fini>:
c001e687:	55                   	push   ebp
c001e688:	89 e5                	mov    ebp,esp
c001e68a:	e8 19 1a fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001e68f:	5d                   	pop    ebp
c001e690:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e692 <Computer::~Computer()>:
c001e692:	83 ec 0c             	sub    esp,0xc
c001e695:	ba f8 85 03 c0       	mov    edx,0xc00385f8
c001e69a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e69e:	89 10                	mov    DWORD PTR [eax],edx
c001e6a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6a4:	83 ec 0c             	sub    esp,0xc
c001e6a7:	50                   	push   eax
c001e6a8:	e8 7f 4c ff ff       	call   c001332c <Device::~Device()>
c001e6ad:	83 c4 10             	add    esp,0x10
c001e6b0:	90                   	nop
c001e6b1:	83 c4 0c             	add    esp,0xc
c001e6b4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e6b6 <Computer::~Computer()>:
c001e6b6:	83 ec 0c             	sub    esp,0xc
c001e6b9:	83 ec 0c             	sub    esp,0xc
c001e6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e6c0:	e8 cd ff ff ff       	call   c001e692 <Computer::~Computer()>
c001e6c5:	83 c4 10             	add    esp,0x10
c001e6c8:	83 ec 08             	sub    esp,0x8
c001e6cb:	68 ec 01 00 00       	push   0x1ec
c001e6d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e6d4:	e8 b6 3a ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c001e6d9:	83 c4 10             	add    esp,0x10
c001e6dc:	83 c4 0c             	add    esp,0xc
c001e6df:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e6e0 <idleCommon()>:
c001e6e0:	83 ec 0c             	sub    esp,0xc
c001e6e3:	e8 8a f9 fe ff       	call   c000e072 <lockScheduler()>
c001e6e8:	e8 b9 fc fe ff       	call   c000e3a6 <schedule()>
c001e6ed:	83 c4 0c             	add    esp,0xc
c001e6f0:	e9 7f f9 fe ff       	jmp    c000e074 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001e6f5 <CPU::readCR0()>:
c001e6f5:	83 ec 10             	sub    esp,0x10
c001e6f8:	0f 20 c0             	mov    eax,cr0
c001e6fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e6ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e703:	83 c4 10             	add    esp,0x10
c001e706:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001e707 <CPU::readCR2()>:
c001e707:	83 ec 10             	sub    esp,0x10
c001e70a:	0f 20 d0             	mov    eax,cr2
c001e70d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e711:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e715:	83 c4 10             	add    esp,0x10
c001e718:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001e719 <CPU::readCR3()>:
c001e719:	83 ec 10             	sub    esp,0x10
c001e71c:	0f 20 d8             	mov    eax,cr3
c001e71f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e723:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e727:	83 c4 10             	add    esp,0x10
c001e72a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001e72b <CPU::readCR4()>:
c001e72b:	83 ec 10             	sub    esp,0x10
c001e72e:	0f 20 e0             	mov    eax,cr4
c001e731:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e735:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e739:	83 c4 10             	add    esp,0x10
c001e73c:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001e73d <CPU::writeCR3(unsigned long)>:
c001e73d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e741:	0f 22 d8             	mov    cr3,eax
c001e744:	90                   	nop
c001e745:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001e746 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001e746:	90                   	nop
c001e747:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001e748 <ThreadControlBlock::ThreadControlBlock()>:
c001e748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e74c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e753:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e757:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001e75e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e762:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001e769:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e76d:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001e774:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e778:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e77c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e780:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001e784:	90                   	nop
c001e785:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001e786 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001e786:	83 ec 0c             	sub    esp,0xc
c001e789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e78d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e793:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e797:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e79e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7a2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e7a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7ad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e7b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e7be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e7c9:	83 ec 0c             	sub    esp,0xc
c001e7cc:	68 08 8f 03 c0       	push   0xc0038f08
c001e7d1:	e8 fa e3 fe ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001e7d6:	83 c4 10             	add    esp,0x10
c001e7d9:	90                   	nop
c001e7da:	83 c4 0c             	add    esp,0xc
c001e7dd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001e7de <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001e7de:	83 ec 0c             	sub    esp,0xc
c001e7e1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e7e6:	75 10                	jne    c001e7f8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001e7e8:	83 ec 0c             	sub    esp,0xc
c001e7eb:	68 24 8f 03 c0       	push   0xc0038f24
c001e7f0:	e8 f9 e4 fe ff       	call   c000ccee <panic(char const*)>
c001e7f5:	83 c4 10             	add    esp,0x10
c001e7f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7fe:	85 c0                	test   eax,eax
c001e800:	74 34                	je     c001e836 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001e802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e806:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e809:	85 c0                	test   eax,eax
c001e80b:	74 29                	je     c001e836 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001e80d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e811:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e814:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e818:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001e81b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e81f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e823:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e82a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e82d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e834:	eb 65                	jmp    c001e89b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001e836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e83a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e83c:	85 c0                	test   eax,eax
c001e83e:	75 4b                	jne    c001e88b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e844:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e847:	85 c0                	test   eax,eax
c001e849:	75 40                	jne    c001e88b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001e84b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e84f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e853:	89 10                	mov    DWORD PTR [eax],edx
c001e855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e859:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e85d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e864:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e867:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e86e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e872:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e875:	85 c0                	test   eax,eax
c001e877:	74 22                	je     c001e89b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001e879:	83 ec 0c             	sub    esp,0xc
c001e87c:	68 46 8f 03 c0       	push   0xc0038f46
c001e881:	e8 68 e4 fe ff       	call   c000ccee <panic(char const*)>
c001e886:	83 c4 10             	add    esp,0x10
c001e889:	eb 10                	jmp    c001e89b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001e88b:	83 ec 0c             	sub    esp,0xc
c001e88e:	68 50 8f 03 c0       	push   0xc0038f50
c001e893:	e8 56 e4 fe ff       	call   c000ccee <panic(char const*)>
c001e898:	83 c4 10             	add    esp,0x10
c001e89b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e89f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e8a2:	8d 50 01             	lea    edx,[eax+0x1]
c001e8a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8a9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e8ac:	90                   	nop
c001e8ad:	83 c4 0c             	add    esp,0xc
c001e8b0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001e8b2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001e8b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8b6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8b8:	85 c0                	test   eax,eax
c001e8ba:	75 0e                	jne    c001e8ca <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e8bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8c3:	85 c0                	test   eax,eax
c001e8c5:	75 03                	jne    c001e8ca <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e8c7:	b0 01                	mov    al,0x1
c001e8c9:	c3                   	ret    
c001e8ca:	b0 00                	mov    al,0x0
c001e8cc:	90                   	nop
c001e8cd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001e8ce <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001e8ce:	83 ec 0c             	sub    esp,0xc
c001e8d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8d5:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8d7:	85 c0                	test   eax,eax
c001e8d9:	75 15                	jne    c001e8f0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001e8db:	83 ec 0c             	sub    esp,0xc
c001e8de:	68 5c 8f 03 c0       	push   0xc0038f5c
c001e8e3:	e8 06 e4 fe ff       	call   c000ccee <panic(char const*)>
c001e8e8:	83 c4 10             	add    esp,0x10
c001e8eb:	e9 88 00 00 00       	jmp    c001e978 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001e8f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8f7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e8fa:	85 c0                	test   eax,eax
c001e8fc:	0f 95 c0             	setne  al
c001e8ff:	84 c0                	test   al,al
c001e901:	74 10                	je     c001e913 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001e903:	83 ec 0c             	sub    esp,0xc
c001e906:	68 a7 8f 03 c0       	push   0xc0038fa7
c001e90b:	e8 de e3 fe ff       	call   c000ccee <panic(char const*)>
c001e910:	83 c4 10             	add    esp,0x10
c001e913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e917:	8b 00                	mov    eax,DWORD PTR [eax]
c001e919:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e91c:	85 c0                	test   eax,eax
c001e91e:	0f 94 c0             	sete   al
c001e921:	84 c0                	test   al,al
c001e923:	74 33                	je     c001e958 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001e925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e929:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e92f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e933:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e93a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e93e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e941:	83 f8 01             	cmp    eax,0x1
c001e944:	74 21                	je     c001e967 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001e946:	83 ec 0c             	sub    esp,0xc
c001e949:	68 80 8f 03 c0       	push   0xc0038f80
c001e94e:	e8 9b e3 fe ff       	call   c000ccee <panic(char const*)>
c001e953:	83 c4 10             	add    esp,0x10
c001e956:	eb 0f                	jmp    c001e967 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001e958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e95c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e95e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e965:	89 10                	mov    DWORD PTR [eax],edx
c001e967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e96b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e96e:	8d 50 ff             	lea    edx,[eax-0x1]
c001e971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e975:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e978:	83 c4 0c             	add    esp,0xc
c001e97b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001e97c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001e97c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e980:	8b 00                	mov    eax,DWORD PTR [eax]
c001e982:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001e984 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001e984:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e988:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e98b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e98c <LinkedList<UnixFile>::~LinkedList()>:
c001e98c:	90                   	nop
c001e98d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e98e <LinkedList<UnixFile>::LinkedList()>:
c001e98e:	83 ec 0c             	sub    esp,0xc
c001e991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e995:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e99b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e99f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e9a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9aa:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e9b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9b5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e9bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9bf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e9c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ca:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e9d1:	83 ec 0c             	sub    esp,0xc
c001e9d4:	68 08 8f 03 c0       	push   0xc0038f08
c001e9d9:	e8 f2 e1 fe ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001e9de:	83 c4 10             	add    esp,0x10
c001e9e1:	90                   	nop
c001e9e2:	83 c4 0c             	add    esp,0xc
c001e9e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e9e6 <LinkedList<UnixFile>::getFirstElement()>:
c001e9e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9ea:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9ec:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e9ee <LinkedList<UnixFile>::removeFirst()>:
c001e9ee:	83 ec 0c             	sub    esp,0xc
c001e9f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f5:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9f7:	85 c0                	test   eax,eax
c001e9f9:	75 12                	jne    c001ea0d <LinkedList<UnixFile>::removeFirst()+0x1f>
c001e9fb:	83 ec 0c             	sub    esp,0xc
c001e9fe:	68 5c 8f 03 c0       	push   0xc0038f5c
c001ea03:	e8 e6 e2 fe ff       	call   c000ccee <panic(char const*)>
c001ea08:	83 c4 10             	add    esp,0x10
c001ea0b:	eb 7e                	jmp    c001ea8b <LinkedList<UnixFile>::removeFirst()+0x9d>
c001ea0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea11:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea14:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea17:	85 c0                	test   eax,eax
c001ea19:	74 10                	je     c001ea2b <LinkedList<UnixFile>::removeFirst()+0x3d>
c001ea1b:	83 ec 0c             	sub    esp,0xc
c001ea1e:	68 a7 8f 03 c0       	push   0xc0038fa7
c001ea23:	e8 c6 e2 fe ff       	call   c000ccee <panic(char const*)>
c001ea28:	83 c4 10             	add    esp,0x10
c001ea2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea2f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea31:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea34:	85 c0                	test   eax,eax
c001ea36:	75 33                	jne    c001ea6b <LinkedList<UnixFile>::removeFirst()+0x7d>
c001ea38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea3c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ea42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea46:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ea4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea51:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea54:	83 f8 01             	cmp    eax,0x1
c001ea57:	74 21                	je     c001ea7a <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ea59:	83 ec 0c             	sub    esp,0xc
c001ea5c:	68 80 8f 03 c0       	push   0xc0038f80
c001ea61:	e8 88 e2 fe ff       	call   c000ccee <panic(char const*)>
c001ea66:	83 c4 10             	add    esp,0x10
c001ea69:	eb 0f                	jmp    c001ea7a <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ea6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea6f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea71:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001ea74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea78:	89 10                	mov    DWORD PTR [eax],edx
c001ea7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea7e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea81:	8d 50 ff             	lea    edx,[eax-0x1]
c001ea84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea88:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ea8b:	83 c4 0c             	add    esp,0xc
c001ea8e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001ea90 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001ea90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ea94:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea97:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001ea98 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001ea98:	83 ec 1c             	sub    esp,0x1c
c001ea9b:	83 ec 0c             	sub    esp,0xc
c001ea9e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001eaa2:	e8 3f ff ff ff       	call   c001e9e6 <LinkedList<UnixFile>::getFirstElement()>
c001eaa7:	83 c4 10             	add    esp,0x10
c001eaaa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eaae:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001eab3:	74 43                	je     c001eaf8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x60>
c001eab5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eab9:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c001eabd:	75 20                	jne    c001eadf <LinkedList<UnixFile>::addElement(UnixFile*)+0x47>
c001eabf:	83 ec 0c             	sub    esp,0xc
c001eac2:	68 4c 91 03 c0       	push   0xc003914c
c001eac7:	e8 04 e1 fe ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001eacc:	83 c4 10             	add    esp,0x10
c001eacf:	83 ec 0c             	sub    esp,0xc
c001ead2:	68 63 91 03 c0       	push   0xc0039163
c001ead7:	e8 12 e2 fe ff       	call   c000ccee <panic(char const*)>
c001eadc:	83 c4 10             	add    esp,0x10
c001eadf:	83 ec 08             	sub    esp,0x8
c001eae2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001eae6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001eaea:	e8 a1 ff ff ff       	call   c001ea90 <LinkedList<UnixFile>::getNext(UnixFile*)>
c001eaef:	83 c4 10             	add    esp,0x10
c001eaf2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eaf6:	eb b6                	jmp    c001eaae <LinkedList<UnixFile>::addElement(UnixFile*)+0x16>
c001eaf8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001eafd:	75 10                	jne    c001eb0f <LinkedList<UnixFile>::addElement(UnixFile*)+0x77>
c001eaff:	83 ec 0c             	sub    esp,0xc
c001eb02:	68 24 8f 03 c0       	push   0xc0038f24
c001eb07:	e8 e2 e1 fe ff       	call   c000ccee <panic(char const*)>
c001eb0c:	83 c4 10             	add    esp,0x10
c001eb0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb13:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb15:	85 c0                	test   eax,eax
c001eb17:	74 34                	je     c001eb4d <LinkedList<UnixFile>::addElement(UnixFile*)+0xb5>
c001eb19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb1d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb20:	85 c0                	test   eax,eax
c001eb22:	74 29                	je     c001eb4d <LinkedList<UnixFile>::addElement(UnixFile*)+0xb5>
c001eb24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb2b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001eb2f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eb32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb36:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001eb3a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb44:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eb4b:	eb 65                	jmp    c001ebb2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001eb4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb51:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb53:	85 c0                	test   eax,eax
c001eb55:	75 4b                	jne    c001eba2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x10a>
c001eb57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb5e:	85 c0                	test   eax,eax
c001eb60:	75 40                	jne    c001eba2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x10a>
c001eb62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb66:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001eb6a:	89 10                	mov    DWORD PTR [eax],edx
c001eb6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb70:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001eb74:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb7e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eb85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb89:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb8c:	85 c0                	test   eax,eax
c001eb8e:	74 22                	je     c001ebb2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001eb90:	83 ec 0c             	sub    esp,0xc
c001eb93:	68 46 8f 03 c0       	push   0xc0038f46
c001eb98:	e8 51 e1 fe ff       	call   c000ccee <panic(char const*)>
c001eb9d:	83 c4 10             	add    esp,0x10
c001eba0:	eb 10                	jmp    c001ebb2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001eba2:	83 ec 0c             	sub    esp,0xc
c001eba5:	68 50 8f 03 c0       	push   0xc0038f50
c001ebaa:	e8 3f e1 fe ff       	call   c000ccee <panic(char const*)>
c001ebaf:	83 c4 10             	add    esp,0x10
c001ebb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ebb6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebb9:	8d 50 01             	lea    edx,[eax+0x1]
c001ebbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ebc0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ebc3:	90                   	nop
c001ebc4:	83 c4 1c             	add    esp,0x1c
c001ebc7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001ebc8 <DriverlessDevice::~DriverlessDevice()>:
c001ebc8:	ba 04 97 03 c0       	mov    edx,0xc0039704
c001ebcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebd1:	89 10                	mov    DWORD PTR [eax],edx
c001ebd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebd7:	50                   	push   eax
c001ebd8:	e8 4f 47 ff ff       	call   c001332c <Device::~Device()>
c001ebdd:	83 c4 04             	add    esp,0x4
c001ebe0:	90                   	nop
c001ebe1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001ebe2 <DriverlessDevice::~DriverlessDevice()>:
c001ebe2:	83 ec 0c             	sub    esp,0xc
c001ebe5:	83 ec 0c             	sub    esp,0xc
c001ebe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebec:	e8 d7 ff ff ff       	call   c001ebc8 <DriverlessDevice::~DriverlessDevice()>
c001ebf1:	83 c4 10             	add    esp,0x10
c001ebf4:	83 ec 08             	sub    esp,0x8
c001ebf7:	68 58 01 00 00       	push   0x158
c001ebfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec00:	e8 8a 35 ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c001ec05:	83 c4 10             	add    esp,0x10
c001ec08:	83 c4 0c             	add    esp,0xc
c001ec0b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001ec0c <LinkedList<Device>::addElement(Device*)>:
c001ec0c:	83 ec 0c             	sub    esp,0xc
c001ec0f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ec14:	75 10                	jne    c001ec26 <LinkedList<Device>::addElement(Device*)+0x1a>
c001ec16:	83 ec 0c             	sub    esp,0xc
c001ec19:	68 24 8f 03 c0       	push   0xc0038f24
c001ec1e:	e8 cb e0 fe ff       	call   c000ccee <panic(char const*)>
c001ec23:	83 c4 10             	add    esp,0x10
c001ec26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec2a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec2c:	85 c0                	test   eax,eax
c001ec2e:	74 3a                	je     c001ec6a <LinkedList<Device>::addElement(Device*)+0x5e>
c001ec30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec37:	85 c0                	test   eax,eax
c001ec39:	74 2f                	je     c001ec6a <LinkedList<Device>::addElement(Device*)+0x5e>
c001ec3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec3f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec42:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ec46:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001ec4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec50:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ec54:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ec57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec5e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ec68:	eb 68                	jmp    c001ecd2 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ec6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec6e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec70:	85 c0                	test   eax,eax
c001ec72:	75 4e                	jne    c001ecc2 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ec74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec7b:	85 c0                	test   eax,eax
c001ec7d:	75 43                	jne    c001ecc2 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ec7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec83:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ec87:	89 10                	mov    DWORD PTR [eax],edx
c001ec89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec8d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ec91:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ec94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec9b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eca9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ecac:	85 c0                	test   eax,eax
c001ecae:	74 22                	je     c001ecd2 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ecb0:	83 ec 0c             	sub    esp,0xc
c001ecb3:	68 46 8f 03 c0       	push   0xc0038f46
c001ecb8:	e8 31 e0 fe ff       	call   c000ccee <panic(char const*)>
c001ecbd:	83 c4 10             	add    esp,0x10
c001ecc0:	eb 10                	jmp    c001ecd2 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ecc2:	83 ec 0c             	sub    esp,0xc
c001ecc5:	68 50 8f 03 c0       	push   0xc0038f50
c001ecca:	e8 1f e0 fe ff       	call   c000ccee <panic(char const*)>
c001eccf:	83 c4 10             	add    esp,0x10
c001ecd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecd6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ecd9:	8d 50 01             	lea    edx,[eax+0x1]
c001ecdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ece0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ece3:	90                   	nop
c001ece4:	83 c4 0c             	add    esp,0xc
c001ece7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001ece8 <LinkedList<Device>::LinkedList()>:
c001ece8:	83 ec 0c             	sub    esp,0xc
c001eceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ecf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecf9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ed00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed04:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ed0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed0f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ed15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed19:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ed20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed24:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ed2b:	83 ec 0c             	sub    esp,0xc
c001ed2e:	68 08 8f 03 c0       	push   0xc0038f08
c001ed33:	e8 98 de fe ff       	call   c000cbd0 <kprintf(char const*, ...)>
c001ed38:	83 c4 10             	add    esp,0x10
c001ed3b:	90                   	nop
c001ed3c:	83 c4 0c             	add    esp,0xc
c001ed3f:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001ed40 <CPU::readDR0()>:
c001ed40:	83 ec 10             	sub    esp,0x10
c001ed43:	0f 21 c0             	mov    eax,db0
c001ed46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ed4e:	83 c4 10             	add    esp,0x10
c001ed51:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001ed52 <CPU::readDR1()>:
c001ed52:	83 ec 10             	sub    esp,0x10
c001ed55:	0f 21 c8             	mov    eax,db1
c001ed58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ed60:	83 c4 10             	add    esp,0x10
c001ed63:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001ed64 <CPU::readDR2()>:
c001ed64:	83 ec 10             	sub    esp,0x10
c001ed67:	0f 21 d0             	mov    eax,db2
c001ed6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ed72:	83 c4 10             	add    esp,0x10
c001ed75:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001ed76 <CPU::readDR3()>:
c001ed76:	83 ec 10             	sub    esp,0x10
c001ed79:	0f 21 d8             	mov    eax,db3
c001ed7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ed84:	83 c4 10             	add    esp,0x10
c001ed87:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001ed88 <CPU::readDR6()>:
c001ed88:	83 ec 10             	sub    esp,0x10
c001ed8b:	0f 21 f0             	mov    eax,db6
c001ed8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ed96:	83 c4 10             	add    esp,0x10
c001ed99:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001ed9a <CPU::readDR7()>:
c001ed9a:	83 ec 10             	sub    esp,0x10
c001ed9d:	0f 21 f8             	mov    eax,db7
c001eda0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eda4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eda8:	83 c4 10             	add    esp,0x10
c001edab:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001edac <ACPI::~ACPI()>:
c001edac:	83 ec 0c             	sub    esp,0xc
c001edaf:	ba 48 9e 03 c0       	mov    edx,0xc0039e48
c001edb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb8:	89 10                	mov    DWORD PTR [eax],edx
c001edba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edbe:	83 ec 0c             	sub    esp,0xc
c001edc1:	50                   	push   eax
c001edc2:	e8 65 45 ff ff       	call   c001332c <Device::~Device()>
c001edc7:	83 c4 10             	add    esp,0x10
c001edca:	90                   	nop
c001edcb:	83 c4 0c             	add    esp,0xc
c001edce:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001edd0 <ACPI::~ACPI()>:
c001edd0:	83 ec 0c             	sub    esp,0xc
c001edd3:	83 ec 0c             	sub    esp,0xc
c001edd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edda:	e8 cd ff ff ff       	call   c001edac <ACPI::~ACPI()>
c001eddf:	83 c4 10             	add    esp,0x10
c001ede2:	83 ec 08             	sub    esp,0x8
c001ede5:	68 68 22 00 00       	push   0x2268
c001edea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edee:	e8 9c 33 ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c001edf3:	83 c4 10             	add    esp,0x10
c001edf6:	83 c4 0c             	add    esp,0xc
c001edf9:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001edfa <CPU::~CPU()>:
c001edfa:	83 ec 0c             	sub    esp,0xc
c001edfd:	ba 98 a0 03 c0       	mov    edx,0xc003a098
c001ee02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee06:	89 10                	mov    DWORD PTR [eax],edx
c001ee08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee0c:	83 ec 0c             	sub    esp,0xc
c001ee0f:	50                   	push   eax
c001ee10:	e8 17 45 ff ff       	call   c001332c <Device::~Device()>
c001ee15:	83 c4 10             	add    esp,0x10
c001ee18:	90                   	nop
c001ee19:	83 c4 0c             	add    esp,0xc
c001ee1c:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ee1e <CPU::~CPU()>:
c001ee1e:	83 ec 0c             	sub    esp,0xc
c001ee21:	83 ec 0c             	sub    esp,0xc
c001ee24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee28:	e8 cd ff ff ff       	call   c001edfa <CPU::~CPU()>
c001ee2d:	83 c4 10             	add    esp,0x10
c001ee30:	83 ec 08             	sub    esp,0x8
c001ee33:	68 98 11 00 00       	push   0x1198
c001ee38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee3c:	e8 4e 33 ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c001ee41:	83 c4 10             	add    esp,0x10
c001ee44:	83 c4 0c             	add    esp,0xc
c001ee47:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001ee48 <CPU::writeDR7(unsigned long)>:
c001ee48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee4c:	0f 23 f8             	mov    db7,eax
c001ee4f:	90                   	nop
c001ee50:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001ee51 <CPU::writeCR4(unsigned long)>:
c001ee51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee55:	0f 22 e0             	mov    cr4,eax
c001ee58:	90                   	nop
c001ee59:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001ee5a <PCI::~PCI()>:
c001ee5a:	83 ec 0c             	sub    esp,0xc
c001ee5d:	ba 34 a4 03 c0       	mov    edx,0xc003a434
c001ee62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee66:	89 10                	mov    DWORD PTR [eax],edx
c001ee68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee6c:	83 ec 0c             	sub    esp,0xc
c001ee6f:	50                   	push   eax
c001ee70:	e8 c7 3e ff ff       	call   c0012d3c <Bus::~Bus()>
c001ee75:	83 c4 10             	add    esp,0x10
c001ee78:	90                   	nop
c001ee79:	83 c4 0c             	add    esp,0xc
c001ee7c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001ee7e <PCI::~PCI()>:
c001ee7e:	83 ec 0c             	sub    esp,0xc
c001ee81:	83 ec 0c             	sub    esp,0xc
c001ee84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee88:	e8 cd ff ff ff       	call   c001ee5a <PCI::~PCI()>
c001ee8d:	83 c4 10             	add    esp,0x10
c001ee90:	83 ec 08             	sub    esp,0x8
c001ee93:	68 58 01 00 00       	push   0x158
c001ee98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee9c:	e8 ee 32 ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c001eea1:	83 c4 10             	add    esp,0x10
c001eea4:	83 c4 0c             	add    esp,0xc
c001eea7:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001eea8 <IDE::~IDE()>:
c001eea8:	83 ec 0c             	sub    esp,0xc
c001eeab:	ba 00 a7 03 c0       	mov    edx,0xc003a700
c001eeb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeb4:	89 10                	mov    DWORD PTR [eax],edx
c001eeb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeba:	83 ec 0c             	sub    esp,0xc
c001eebd:	50                   	push   eax
c001eebe:	e8 7f 49 ff ff       	call   c0013842 <HardDiskController::~HardDiskController()>
c001eec3:	83 c4 10             	add    esp,0x10
c001eec6:	90                   	nop
c001eec7:	83 c4 0c             	add    esp,0xc
c001eeca:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001eecc <IDE::~IDE()>:
c001eecc:	83 ec 0c             	sub    esp,0xc
c001eecf:	83 ec 0c             	sub    esp,0xc
c001eed2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eed6:	e8 cd ff ff ff       	call   c001eea8 <IDE::~IDE()>
c001eedb:	83 c4 10             	add    esp,0x10
c001eede:	83 ec 08             	sub    esp,0x8
c001eee1:	68 70 02 00 00       	push   0x270
c001eee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eeea:	e8 a0 32 ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c001eeef:	83 c4 10             	add    esp,0x10
c001eef2:	83 c4 0c             	add    esp,0xc
c001eef5:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001eef6 <ATA::~ATA()>:
c001eef6:	83 ec 0c             	sub    esp,0xc
c001eef9:	ba 50 a7 03 c0       	mov    edx,0xc003a750
c001eefe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef02:	89 10                	mov    DWORD PTR [eax],edx
c001ef04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef08:	83 ec 0c             	sub    esp,0xc
c001ef0b:	50                   	push   eax
c001ef0c:	e8 0f 4a ff ff       	call   c0013920 <PhysicalDisk::~PhysicalDisk()>
c001ef11:	83 c4 10             	add    esp,0x10
c001ef14:	90                   	nop
c001ef15:	83 c4 0c             	add    esp,0xc
c001ef18:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ef1a <ATA::~ATA()>:
c001ef1a:	83 ec 0c             	sub    esp,0xc
c001ef1d:	83 ec 0c             	sub    esp,0xc
c001ef20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef24:	e8 cd ff ff ff       	call   c001eef6 <ATA::~ATA()>
c001ef29:	83 c4 10             	add    esp,0x10
c001ef2c:	83 ec 08             	sub    esp,0x8
c001ef2f:	68 7c 01 00 00       	push   0x17c
c001ef34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef38:	e8 52 32 ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c001ef3d:	83 c4 10             	add    esp,0x10
c001ef40:	83 c4 0c             	add    esp,0xc
c001ef43:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001ef44 <ATAPI::~ATAPI()>:
c001ef44:	83 ec 0c             	sub    esp,0xc
c001ef47:	ba bc a7 03 c0       	mov    edx,0xc003a7bc
c001ef4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef50:	89 10                	mov    DWORD PTR [eax],edx
c001ef52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef56:	83 ec 0c             	sub    esp,0xc
c001ef59:	50                   	push   eax
c001ef5a:	e8 c1 49 ff ff       	call   c0013920 <PhysicalDisk::~PhysicalDisk()>
c001ef5f:	83 c4 10             	add    esp,0x10
c001ef62:	90                   	nop
c001ef63:	83 c4 0c             	add    esp,0xc
c001ef66:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001ef68 <ATAPI::~ATAPI()>:
c001ef68:	83 ec 0c             	sub    esp,0xc
c001ef6b:	83 ec 0c             	sub    esp,0xc
c001ef6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef72:	e8 cd ff ff ff       	call   c001ef44 <ATAPI::~ATAPI()>
c001ef77:	83 c4 10             	add    esp,0x10
c001ef7a:	83 ec 08             	sub    esp,0x8
c001ef7d:	68 80 01 00 00       	push   0x180
c001ef82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef86:	e8 04 32 ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c001ef8b:	83 c4 10             	add    esp,0x10
c001ef8e:	83 c4 0c             	add    esp,0xc
c001ef91:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001ef92 <AVX::~AVX()>:
c001ef92:	83 ec 0c             	sub    esp,0xc
c001ef95:	ba f8 a7 03 c0       	mov    edx,0xc003a7f8
c001ef9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef9e:	89 10                	mov    DWORD PTR [eax],edx
c001efa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efa4:	83 ec 0c             	sub    esp,0xc
c001efa7:	50                   	push   eax
c001efa8:	e8 f7 49 ff ff       	call   c00139a4 <FPU::~FPU()>
c001efad:	83 c4 10             	add    esp,0x10
c001efb0:	90                   	nop
c001efb1:	83 c4 0c             	add    esp,0xc
c001efb4:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001efb6 <AVX::~AVX()>:
c001efb6:	83 ec 0c             	sub    esp,0xc
c001efb9:	83 ec 0c             	sub    esp,0xc
c001efbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efc0:	e8 cd ff ff ff       	call   c001ef92 <AVX::~AVX()>
c001efc5:	83 c4 10             	add    esp,0x10
c001efc8:	83 ec 08             	sub    esp,0x8
c001efcb:	68 58 01 00 00       	push   0x158
c001efd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efd4:	e8 b6 31 ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c001efd9:	83 c4 10             	add    esp,0x10
c001efdc:	83 c4 0c             	add    esp,0xc
c001efdf:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001efe0 <MMX::~MMX()>:
c001efe0:	83 ec 0c             	sub    esp,0xc
c001efe3:	ba 38 a8 03 c0       	mov    edx,0xc003a838
c001efe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efec:	89 10                	mov    DWORD PTR [eax],edx
c001efee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eff2:	83 ec 0c             	sub    esp,0xc
c001eff5:	50                   	push   eax
c001eff6:	e8 a9 49 ff ff       	call   c00139a4 <FPU::~FPU()>
c001effb:	83 c4 10             	add    esp,0x10
c001effe:	90                   	nop
c001efff:	83 c4 0c             	add    esp,0xc
c001f002:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001f004 <MMX::~MMX()>:
c001f004:	83 ec 0c             	sub    esp,0xc
c001f007:	83 ec 0c             	sub    esp,0xc
c001f00a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f00e:	e8 cd ff ff ff       	call   c001efe0 <MMX::~MMX()>
c001f013:	83 c4 10             	add    esp,0x10
c001f016:	83 ec 08             	sub    esp,0x8
c001f019:	68 58 01 00 00       	push   0x158
c001f01e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f022:	e8 68 31 ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c001f027:	83 c4 10             	add    esp,0x10
c001f02a:	83 c4 0c             	add    esp,0xc
c001f02d:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001f02e <SSE::~SSE()>:
c001f02e:	83 ec 0c             	sub    esp,0xc
c001f031:	ba 78 a8 03 c0       	mov    edx,0xc003a878
c001f036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f03a:	89 10                	mov    DWORD PTR [eax],edx
c001f03c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f040:	83 ec 0c             	sub    esp,0xc
c001f043:	50                   	push   eax
c001f044:	e8 5b 49 ff ff       	call   c00139a4 <FPU::~FPU()>
c001f049:	83 c4 10             	add    esp,0x10
c001f04c:	90                   	nop
c001f04d:	83 c4 0c             	add    esp,0xc
c001f050:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001f052 <SSE::~SSE()>:
c001f052:	83 ec 0c             	sub    esp,0xc
c001f055:	83 ec 0c             	sub    esp,0xc
c001f058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f05c:	e8 cd ff ff ff       	call   c001f02e <SSE::~SSE()>
c001f061:	83 c4 10             	add    esp,0x10
c001f064:	83 ec 08             	sub    esp,0x8
c001f067:	68 58 01 00 00       	push   0x158
c001f06c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f070:	e8 1a 31 ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c001f075:	83 c4 10             	add    esp,0x10
c001f078:	83 c4 0c             	add    esp,0xc
c001f07b:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001f07c <x87::~x87()>:
c001f07c:	83 ec 0c             	sub    esp,0xc
c001f07f:	ba b8 a8 03 c0       	mov    edx,0xc003a8b8
c001f084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f088:	89 10                	mov    DWORD PTR [eax],edx
c001f08a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f08e:	83 ec 0c             	sub    esp,0xc
c001f091:	50                   	push   eax
c001f092:	e8 0d 49 ff ff       	call   c00139a4 <FPU::~FPU()>
c001f097:	83 c4 10             	add    esp,0x10
c001f09a:	90                   	nop
c001f09b:	83 c4 0c             	add    esp,0xc
c001f09e:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001f0a0 <x87::~x87()>:
c001f0a0:	83 ec 0c             	sub    esp,0xc
c001f0a3:	83 ec 0c             	sub    esp,0xc
c001f0a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0aa:	e8 cd ff ff ff       	call   c001f07c <x87::~x87()>
c001f0af:	83 c4 10             	add    esp,0x10
c001f0b2:	83 ec 08             	sub    esp,0x8
c001f0b5:	68 58 01 00 00       	push   0x158
c001f0ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0be:	e8 cc 30 ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c001f0c3:	83 c4 10             	add    esp,0x10
c001f0c6:	83 c4 0c             	add    esp,0xc
c001f0c9:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f0ca <IOAPIC::~IOAPIC()>:
c001f0ca:	83 ec 0c             	sub    esp,0xc
c001f0cd:	ba 10 aa 03 c0       	mov    edx,0xc003aa10
c001f0d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0d6:	89 10                	mov    DWORD PTR [eax],edx
c001f0d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0dc:	83 ec 0c             	sub    esp,0xc
c001f0df:	50                   	push   eax
c001f0e0:	e8 47 42 ff ff       	call   c001332c <Device::~Device()>
c001f0e5:	83 c4 10             	add    esp,0x10
c001f0e8:	90                   	nop
c001f0e9:	83 c4 0c             	add    esp,0xc
c001f0ec:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f0ee <IOAPIC::~IOAPIC()>:
c001f0ee:	83 ec 0c             	sub    esp,0xc
c001f0f1:	83 ec 0c             	sub    esp,0xc
c001f0f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0f8:	e8 cd ff ff ff       	call   c001f0ca <IOAPIC::~IOAPIC()>
c001f0fd:	83 c4 10             	add    esp,0x10
c001f100:	83 ec 08             	sub    esp,0x8
c001f103:	68 68 01 00 00       	push   0x168
c001f108:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f10c:	e8 7e 30 ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c001f111:	83 c4 10             	add    esp,0x10
c001f114:	83 c4 0c             	add    esp,0xc
c001f117:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001f118 <APIC::~APIC()>:
c001f118:	83 ec 0c             	sub    esp,0xc
c001f11b:	ba c8 a9 03 c0       	mov    edx,0xc003a9c8
c001f120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f124:	89 10                	mov    DWORD PTR [eax],edx
c001f126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f12a:	83 ec 0c             	sub    esp,0xc
c001f12d:	50                   	push   eax
c001f12e:	e8 15 4d ff ff       	call   c0013e48 <InterruptController::~InterruptController()>
c001f133:	83 c4 10             	add    esp,0x10
c001f136:	90                   	nop
c001f137:	83 c4 0c             	add    esp,0xc
c001f13a:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001f13c <APIC::~APIC()>:
c001f13c:	83 ec 0c             	sub    esp,0xc
c001f13f:	83 ec 0c             	sub    esp,0xc
c001f142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f146:	e8 cd ff ff ff       	call   c001f118 <APIC::~APIC()>
c001f14b:	83 c4 10             	add    esp,0x10
c001f14e:	83 ec 08             	sub    esp,0x8
c001f151:	68 58 21 00 00       	push   0x2158
c001f156:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f15a:	e8 30 30 ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c001f15f:	83 c4 10             	add    esp,0x10
c001f162:	83 c4 0c             	add    esp,0xc
c001f165:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001f166 <PIC::~PIC()>:
c001f166:	83 ec 0c             	sub    esp,0xc
c001f169:	ba 60 aa 03 c0       	mov    edx,0xc003aa60
c001f16e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f172:	89 10                	mov    DWORD PTR [eax],edx
c001f174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f178:	83 ec 0c             	sub    esp,0xc
c001f17b:	50                   	push   eax
c001f17c:	e8 c7 4c ff ff       	call   c0013e48 <InterruptController::~InterruptController()>
c001f181:	83 c4 10             	add    esp,0x10
c001f184:	90                   	nop
c001f185:	83 c4 0c             	add    esp,0xc
c001f188:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001f18a <PIC::~PIC()>:
c001f18a:	83 ec 0c             	sub    esp,0xc
c001f18d:	83 ec 0c             	sub    esp,0xc
c001f190:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f194:	e8 cd ff ff ff       	call   c001f166 <PIC::~PIC()>
c001f199:	83 c4 10             	add    esp,0x10
c001f19c:	83 ec 08             	sub    esp,0x8
c001f19f:	68 58 21 00 00       	push   0x2158
c001f1a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1a8:	e8 e2 2f ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c001f1ad:	83 c4 10             	add    esp,0x10
c001f1b0:	83 c4 0c             	add    esp,0xc
c001f1b3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f1b4 <APICTimer::~APICTimer()>:
c001f1b4:	83 ec 0c             	sub    esp,0xc
c001f1b7:	ba b4 aa 03 c0       	mov    edx,0xc003aab4
c001f1bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1c0:	89 10                	mov    DWORD PTR [eax],edx
c001f1c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1c6:	83 ec 0c             	sub    esp,0xc
c001f1c9:	50                   	push   eax
c001f1ca:	e8 49 62 ff ff       	call   c0015418 <Timer::~Timer()>
c001f1cf:	83 c4 10             	add    esp,0x10
c001f1d2:	90                   	nop
c001f1d3:	83 c4 0c             	add    esp,0xc
c001f1d6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f1d8 <APICTimer::~APICTimer()>:
c001f1d8:	83 ec 0c             	sub    esp,0xc
c001f1db:	83 ec 0c             	sub    esp,0xc
c001f1de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1e2:	e8 cd ff ff ff       	call   c001f1b4 <APICTimer::~APICTimer()>
c001f1e7:	83 c4 10             	add    esp,0x10
c001f1ea:	83 ec 08             	sub    esp,0x8
c001f1ed:	68 60 01 00 00       	push   0x160
c001f1f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1f6:	e8 94 2f ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c001f1fb:	83 c4 10             	add    esp,0x10
c001f1fe:	83 c4 0c             	add    esp,0xc
c001f201:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f202 <PIT::~PIT()>:
c001f202:	83 ec 0c             	sub    esp,0xc
c001f205:	ba 04 ab 03 c0       	mov    edx,0xc003ab04
c001f20a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f20e:	89 10                	mov    DWORD PTR [eax],edx
c001f210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f214:	83 ec 0c             	sub    esp,0xc
c001f217:	50                   	push   eax
c001f218:	e8 fb 61 ff ff       	call   c0015418 <Timer::~Timer()>
c001f21d:	83 c4 10             	add    esp,0x10
c001f220:	90                   	nop
c001f221:	83 c4 0c             	add    esp,0xc
c001f224:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f226 <PIT::~PIT()>:
c001f226:	83 ec 0c             	sub    esp,0xc
c001f229:	83 ec 0c             	sub    esp,0xc
c001f22c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f230:	e8 cd ff ff ff       	call   c001f202 <PIT::~PIT()>
c001f235:	83 c4 10             	add    esp,0x10
c001f238:	83 ec 08             	sub    esp,0x8
c001f23b:	68 5c 01 00 00       	push   0x15c
c001f240:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f244:	e8 46 2f ff ff       	call   c001218f <operator delete(void*, unsigned long)>
c001f249:	83 c4 10             	add    esp,0x10
c001f24c:	83 c4 0c             	add    esp,0xc
c001f24f:	c3                   	ret    
