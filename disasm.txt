
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d6 c2 00 00       	call   c000c2f6 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 43 f7 01 00       	call   c001f768 <_init>
c0000025:	c3                   	ret    
c0000026:	bb f2 02 02 c0       	mov    ebx,0xc00202f2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb fc 02 02 c0    	cmp    ebx,0xc00202fc
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 cc 41 02 c0       	mov    eax,0xc00241cc
c0000049:	3d cc 41 02 c0       	cmp    eax,0xc00241cc
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 cc 41 02 c0       	push   0xc00241cc
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 cc 41 02 c0       	mov    eax,0xc00241cc
c0000075:	2d cc 41 02 c0       	sub    eax,0xc00241cc
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 cc 41 02 c0       	push   0xc00241cc
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 6c 43 02 c0 00 	cmp    BYTE PTR ds:0xc002436c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 04 03 02 c0       	mov    ebx,0xc0020304
c00000bb:	81 eb 00 03 02 c0    	sub    ebx,0xc0020300
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 00 03 02 c0       	mov    esi,0xc0020300
c00000ca:	a1 70 43 02 c0       	mov    eax,ds:0xc0024370
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 70 43 02 c0       	mov    ds:0xc0024370,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 70 43 02 c0       	mov    eax,ds:0xc0024370
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 cc 41 02 c0       	push   0xc00241cc
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 6c 43 02 c0 01 	mov    BYTE PTR ds:0xc002436c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 74 43 02 c0       	push   0xc0024374
c000012c:	68 cc 41 02 c0       	push   0xc00241cc
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <voodooXADD>:
c0000150:	55                   	push   ebp
c0000151:	89 e5                	mov    ebp,esp
c0000153:	60                   	pusha  
c0000154:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000157:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000015a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c000015d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0000160:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000163:	89 35 0c 02 00 c0    	mov    DWORD PTR ds:0xc000020c,esi
c0000169:	89 25 08 02 00 c0    	mov    DWORD PTR ds:0xc0000208,esp
c000016f:	60                   	pusha  
c0000170:	b0 90                	mov    al,0x90
c0000172:	b9 20 00 00 00       	mov    ecx,0x20
c0000177:	bf e3 01 00 c0       	mov    edi,0xc00001e3
c000017c:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000017e:	61                   	popa   
c000017f:	60                   	pusha  
c0000180:	89 d6                	mov    esi,edx
c0000182:	bf e3 01 00 c0       	mov    edi,0xc00001e3
c0000187:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000189:	61                   	popa   
c000018a:	60                   	pusha  
c000018b:	89 d6                	mov    esi,edx
c000018d:	bf f3 01 00 c0       	mov    edi,0xc00001f3
c0000192:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000194:	61                   	popa   
c0000195:	c6 82 e3 01 00 c0 90 	mov    BYTE PTR [edx-0x3ffffe1d],0x90
c000019c:	80 aa e4 01 00 c0 c0 	sub    BYTE PTR [edx-0x3ffffe1c],0xc0
c00001a3:	80 82 e5 01 00 c0 86 	add    BYTE PTR [edx-0x3ffffe1b],0x86
c00001aa:	c6 82 f3 01 00 c0 90 	mov    BYTE PTR [edx-0x3ffffe0d],0x90
c00001b1:	80 aa f4 01 00 c0 c0 	sub    BYTE PTR [edx-0x3ffffe0c],0xc0
c00001b8:	80 82 f5 01 00 c0 02 	add    BYTE PTR [edx-0x3ffffe0b],0x2
c00001bf:	8b 60 10             	mov    esp,DWORD PTR [eax+0x10]
c00001c2:	5f                   	pop    edi
c00001c3:	5e                   	pop    esi
c00001c4:	5d                   	pop    ebp
c00001c5:	5b                   	pop    ebx
c00001c6:	5b                   	pop    ebx
c00001c7:	5a                   	pop    edx
c00001c8:	59                   	pop    ecx
c00001c9:	58                   	pop    eax
c00001ca:	8b 25 0c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000020c
c00001d0:	e9 fb ff ff ff       	jmp    c00001d0 <voodooXADD+0x80>
c00001d5:	e9 09 00 00 00       	jmp    c00001e3 <voodooXADD.helper>

c00001da <voodooXADD.finish>:
c00001da:	8b 25 08 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000208
c00001e0:	61                   	popa   
c00001e1:	c9                   	leave  
c00001e2:	c3                   	ret    

c00001e3 <voodooXADD.helper>:
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	e9 d2 ff ff ff       	jmp    c00001da <voodooXADD.finish>

c0000208 <voodooXADD.oldStack>:
c0000208:	00 00                	add    BYTE PTR [eax],al
	...

c000020c <voodooXADD.newStack>:
c000020c:	00 00                	add    BYTE PTR [eax],al
	...

c0000210 <doTPAUSE>:
c0000210:	fb                   	sti    
c0000211:	31 c0                	xor    eax,eax
c0000213:	31 d2                	xor    edx,edx
c0000215:	66 0f ae f0          	tpause eax
c0000219:	c3                   	ret    

c000021a <hasLegacyFPU>:
c000021a:	0f 20 c2             	mov    edx,cr0
c000021d:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000223:	0f 22 c2             	mov    cr0,edx
c0000226:	db e3                	fninit 
c0000228:	dd 3d 3d 02 00 c0    	fnstsw WORD PTR ds:0xc000023d
c000022e:	31 c0                	xor    eax,eax
c0000230:	66 81 3d 3d 02 00 c0 00 00 	cmp    WORD PTR ds:0xc000023d,0x0
c0000239:	75 01                	jne    c000023c <hasLegacyFPU.nofpu>

c000023b <hasLegacyFPU.hasfpu>:
c000023b:	40                   	inc    eax

c000023c <hasLegacyFPU.nofpu>:
c000023c:	c3                   	ret    

c000023d <testword>:
c000023d:	aa                   	stos   BYTE PTR es:[edi],al
c000023e:	55                   	push   ebp

c000023f <is486>:
c000023f:	0f 09                	wbinvd 
c0000241:	31 c0                	xor    eax,eax
c0000243:	40                   	inc    eax
c0000244:	c3                   	ret    
c0000245:	90                   	nop
c0000246:	90                   	nop
c0000247:	90                   	nop
c0000248:	90                   	nop
c0000249:	90                   	nop
c000024a:	90                   	nop
c000024b:	90                   	nop
c000024c:	90                   	nop
c000024d:	90                   	nop
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	31 c0                	xor    eax,eax
c0000274:	c3                   	ret    

c0000275 <goToVM86>:
c0000275:	fa                   	cli    
c0000276:	55                   	push   ebp
c0000277:	89 e5                	mov    ebp,esp
c0000279:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000027c:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c000027f:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000282:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000285:	25 ff ff 00 00       	and    eax,0xffff
c000028a:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000290:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0000296:	81 e2 ff ff 00 00    	and    edx,0xffff
c000029c:	52                   	push   edx
c000029d:	51                   	push   ecx
c000029e:	68 02 02 02 00       	push   0x20202
c00002a3:	53                   	push   ebx
c00002a4:	50                   	push   eax
c00002a5:	cf                   	iret   

c00002a6 <goToUsermode>:
c00002a6:	2e 0f c3 04 4b       	movnti DWORD PTR cs:[ebx+ecx*2],eax
c00002ab:	fa                   	cli    
c00002ac:	55                   	push   ebp
c00002ad:	89 e5                	mov    ebp,esp
c00002af:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002b2:	66 b8 23 00          	mov    ax,0x23
c00002b6:	66 8e d8             	mov    ds,ax
c00002b9:	66 8e c0             	mov    es,ax
c00002bc:	66 8e e0             	mov    fs,ax
c00002bf:	66 8e e8             	mov    gs,ax
c00002c2:	89 e0                	mov    eax,esp
c00002c4:	68 23 00 00 00       	push   0x23
c00002c9:	50                   	push   eax
c00002ca:	68 02 02 00 00       	push   0x202
c00002cf:	68 1b 00 00 00       	push   0x1b
c00002d4:	53                   	push   ebx
c00002d5:	cf                   	iret   

c00002d6 <switchToThreadASMFirstTime>:
c00002d6:	9c                   	pushf  
c00002d7:	fa                   	cli    
c00002d8:	50                   	push   eax
c00002d9:	53                   	push   ebx
c00002da:	51                   	push   ecx
c00002db:	52                   	push   edx
c00002dc:	56                   	push   esi
c00002dd:	57                   	push   edi
c00002de:	55                   	push   ebp
c00002df:	e9 11 00 00 00       	jmp    c00002f5 <commonThreadSwitch>

c00002e4 <switchToThreadASM>:
c00002e4:	9c                   	pushf  
c00002e5:	50                   	push   eax
c00002e6:	53                   	push   ebx
c00002e7:	51                   	push   ecx
c00002e8:	52                   	push   edx
c00002e9:	56                   	push   esi
c00002ea:	57                   	push   edi
c00002eb:	55                   	push   ebp
c00002ec:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002f2:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002f5 <commonThreadSwitch>:
c00002f5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002f9:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002ff:	8b 06                	mov    eax,DWORD PTR [esi]
c0000301:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000304:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000307:	0f 20 d9             	mov    ecx,cr3
c000030a:	39 c8                	cmp    eax,ecx
c000030c:	74 03                	je     c0000311 <commonThreadSwitch.doneVAS>
c000030e:	0f 22 d8             	mov    cr3,eax

c0000311 <commonThreadSwitch.doneVAS>:
c0000311:	85 d2                	test   edx,edx
c0000313:	74 4e                	je     c0000363 <commonThreadSwitch.notFirstTime>
c0000315:	fa                   	cli    
c0000316:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000319:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c000031e:	60                   	pusha  
c000031f:	e8 88 ec 00 00       	call   c000efac <mapVASFirstTime>
c0000324:	61                   	popa   
c0000325:	89 c4                	mov    esp,eax
c0000327:	56                   	push   esi
c0000328:	52                   	push   edx
c0000329:	e8 32 83 01 00       	call   c0018660 <changeTSS>
c000032e:	5a                   	pop    edx
c000032f:	5e                   	pop    esi
c0000330:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000337:	81 fa 01 00 00 00    	cmp    edx,0x1
c000033d:	74 39                	je     c0000378 <commonThreadSwitch.cameOffAFork>
c000033f:	5d                   	pop    ebp
c0000340:	5f                   	pop    edi
c0000341:	5e                   	pop    esi
c0000342:	59                   	pop    ecx
c0000343:	59                   	pop    ecx
c0000344:	5b                   	pop    ebx
c0000345:	58                   	pop    eax
c0000346:	81 c4 04 00 00 00    	add    esp,0x4
c000034c:	6a 02                	push   0x2
c000034e:	9d                   	popf   
c000034f:	52                   	push   edx
c0000350:	e8 38 87 01 00       	call   c0018a8d <taskStartupFunction>
c0000355:	5a                   	pop    edx
c0000356:	50                   	push   eax
c0000357:	ff d2                	call   edx
c0000359:	e8 ed 8c 01 00       	call   c001904b <taskReturned>
c000035e:	e9 fb ff ff ff       	jmp    c000035e <commonThreadSwitch.doneVAS+0x4d>

c0000363 <commonThreadSwitch.notFirstTime>:
c0000363:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000366:	56                   	push   esi
c0000367:	52                   	push   edx
c0000368:	e8 f3 82 01 00       	call   c0018660 <changeTSS>
c000036d:	5a                   	pop    edx
c000036e:	5e                   	pop    esi
c000036f:	5d                   	pop    ebp
c0000370:	5f                   	pop    edi
c0000371:	5e                   	pop    esi
c0000372:	5a                   	pop    edx
c0000373:	59                   	pop    ecx
c0000374:	5b                   	pop    ebx
c0000375:	58                   	pop    eax
c0000376:	9d                   	popf   
c0000377:	c3                   	ret    

c0000378 <commonThreadSwitch.cameOffAFork>:
c0000378:	31 c0                	xor    eax,eax
c000037a:	31 d2                	xor    edx,edx
c000037c:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c000037f:	e9 a2 02 00 00       	jmp    c0000626 <offAForkJumpThingy>

c0000384 <detectCPUID>:
c0000384:	9c                   	pushf  
c0000385:	9c                   	pushf  
c0000386:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c000038d:	9d                   	popf   
c000038e:	9c                   	pushf  
c000038f:	58                   	pop    eax
c0000390:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000393:	9d                   	popf   
c0000394:	25 00 00 20 00       	and    eax,0x200000
c0000399:	c3                   	ret    

c000039a <asmQuickAcquireLock>:
c000039a:	55                   	push   ebp
c000039b:	89 e5                	mov    ebp,esp
c000039d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003a0 <asmQuickAcquireLock.retry>:
c00003a0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003a5:	72 02                	jb     c00003a9 <asmQuickAcquireLock.spin_with_pause>
c00003a7:	fa                   	cli    
c00003a8:	c3                   	ret    

c00003a9 <asmQuickAcquireLock.spin_with_pause>:
c00003a9:	f3 90                	pause  
c00003ab:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003b1:	75 f6                	jne    c00003a9 <asmQuickAcquireLock.spin_with_pause>
c00003b3:	e9 e8 ff ff ff       	jmp    c00003a0 <asmQuickAcquireLock.retry>

c00003b8 <asmQuickReleaseLock>:
c00003b8:	55                   	push   ebp
c00003b9:	89 e5                	mov    ebp,esp
c00003bb:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003c2:	5d                   	pop    ebp
c00003c3:	c3                   	ret    

c00003c4 <asmAcquireLock>:
c00003c4:	55                   	push   ebp
c00003c5:	89 e5                	mov    ebp,esp
c00003c7:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003ca <asmAcquireLock.retry>:
c00003ca:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003cf:	72 05                	jb     c00003d6 <asmAcquireLock.spin_with_pause>
c00003d1:	9c                   	pushf  
c00003d2:	58                   	pop    eax
c00003d3:	fa                   	cli    
c00003d4:	5d                   	pop    ebp
c00003d5:	c3                   	ret    

c00003d6 <asmAcquireLock.spin_with_pause>:
c00003d6:	f3 90                	pause  
c00003d8:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003de:	75 f6                	jne    c00003d6 <asmAcquireLock.spin_with_pause>
c00003e0:	e9 e5 ff ff ff       	jmp    c00003ca <asmAcquireLock.retry>

c00003e5 <asmReleaseLock>:
c00003e5:	55                   	push   ebp
c00003e6:	89 e5                	mov    ebp,esp
c00003e8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003eb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003f4:	52                   	push   edx
c00003f5:	9d                   	popf   
c00003f6:	5d                   	pop    ebp
c00003f7:	c3                   	ret    

c00003f8 <loadGDT>:
c00003f8:	0f 01 15 b0 47 02 c0 	lgdtd  ds:0xc00247b0
c00003ff:	66 b8 10 00          	mov    ax,0x10
c0000403:	66 8e d8             	mov    ds,ax
c0000406:	66 8e c0             	mov    es,ax
c0000409:	66 8e e0             	mov    fs,ax
c000040c:	66 8e e8             	mov    gs,ax
c000040f:	66 8e d0             	mov    ss,ax
c0000412:	e9 00 00 00 00       	jmp    c0000417 <flush2>

c0000417 <flush2>:
c0000417:	c3                   	ret    

c0000418 <isr0>:
c0000418:	fa                   	cli    
c0000419:	68 00 00 00 00       	push   0x0
c000041e:	68 00 00 00 00       	push   0x0
c0000423:	e9 a2 01 00 00       	jmp    c00005ca <int_common_stub>

c0000428 <isr1>:
c0000428:	fa                   	cli    
c0000429:	6a 00                	push   0x0
c000042b:	6a 01                	push   0x1
c000042d:	e9 98 01 00 00       	jmp    c00005ca <int_common_stub>

c0000432 <isr2>:
c0000432:	fa                   	cli    
c0000433:	6a 00                	push   0x0
c0000435:	6a 02                	push   0x2
c0000437:	e9 8e 01 00 00       	jmp    c00005ca <int_common_stub>

c000043c <isr3>:
c000043c:	fa                   	cli    
c000043d:	6a 00                	push   0x0
c000043f:	6a 03                	push   0x3
c0000441:	e9 84 01 00 00       	jmp    c00005ca <int_common_stub>

c0000446 <isr4>:
c0000446:	fa                   	cli    
c0000447:	6a 00                	push   0x0
c0000449:	6a 04                	push   0x4
c000044b:	e9 7a 01 00 00       	jmp    c00005ca <int_common_stub>

c0000450 <isr5>:
c0000450:	fa                   	cli    
c0000451:	6a 00                	push   0x0
c0000453:	6a 05                	push   0x5
c0000455:	e9 70 01 00 00       	jmp    c00005ca <int_common_stub>

c000045a <isr6>:
c000045a:	fa                   	cli    
c000045b:	6a 00                	push   0x0
c000045d:	6a 06                	push   0x6
c000045f:	e9 66 01 00 00       	jmp    c00005ca <int_common_stub>

c0000464 <isr7>:
c0000464:	fa                   	cli    
c0000465:	6a 00                	push   0x0
c0000467:	6a 07                	push   0x7
c0000469:	e9 5c 01 00 00       	jmp    c00005ca <int_common_stub>

c000046e <isr8>:
c000046e:	fa                   	cli    
c000046f:	6a 08                	push   0x8
c0000471:	e9 54 01 00 00       	jmp    c00005ca <int_common_stub>

c0000476 <isr9>:
c0000476:	fa                   	cli    
c0000477:	6a 00                	push   0x0
c0000479:	6a 09                	push   0x9
c000047b:	e9 4a 01 00 00       	jmp    c00005ca <int_common_stub>

c0000480 <isr10>:
c0000480:	fa                   	cli    
c0000481:	6a 0a                	push   0xa
c0000483:	e9 42 01 00 00       	jmp    c00005ca <int_common_stub>

c0000488 <isr11>:
c0000488:	fa                   	cli    
c0000489:	6a 0b                	push   0xb
c000048b:	e9 3a 01 00 00       	jmp    c00005ca <int_common_stub>

c0000490 <isr12>:
c0000490:	fa                   	cli    
c0000491:	6a 0c                	push   0xc
c0000493:	e9 32 01 00 00       	jmp    c00005ca <int_common_stub>

c0000498 <isr13>:
c0000498:	fa                   	cli    
c0000499:	6a 0d                	push   0xd
c000049b:	e9 2a 01 00 00       	jmp    c00005ca <int_common_stub>

c00004a0 <isr14>:
c00004a0:	fa                   	cli    
c00004a1:	6a 0e                	push   0xe
c00004a3:	e9 22 01 00 00       	jmp    c00005ca <int_common_stub>

c00004a8 <isr15>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 0f                	push   0xf
c00004ad:	e9 18 01 00 00       	jmp    c00005ca <int_common_stub>

c00004b2 <isr16>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 10                	push   0x10
c00004b7:	e9 0e 01 00 00       	jmp    c00005ca <int_common_stub>

c00004bc <isr17>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 11                	push   0x11
c00004c1:	e9 04 01 00 00       	jmp    c00005ca <int_common_stub>

c00004c6 <isr18>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 12                	push   0x12
c00004cb:	e9 fa 00 00 00       	jmp    c00005ca <int_common_stub>

c00004d0 <isr96>:
c00004d0:	fa                   	cli    
c00004d1:	6a 00                	push   0x0
c00004d3:	6a 60                	push   0x60
c00004d5:	e9 20 01 00 00       	jmp    c00005fa <syscall_common_stub>

c00004da <irq0>:
c00004da:	fa                   	cli    
c00004db:	6a 00                	push   0x0
c00004dd:	6a 20                	push   0x20
c00004df:	e9 e6 00 00 00       	jmp    c00005ca <int_common_stub>

c00004e4 <irq1>:
c00004e4:	fa                   	cli    
c00004e5:	6a 00                	push   0x0
c00004e7:	6a 21                	push   0x21
c00004e9:	e9 dc 00 00 00       	jmp    c00005ca <int_common_stub>

c00004ee <irq2>:
c00004ee:	fa                   	cli    
c00004ef:	6a 00                	push   0x0
c00004f1:	6a 22                	push   0x22
c00004f3:	e9 d2 00 00 00       	jmp    c00005ca <int_common_stub>

c00004f8 <irq3>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 23                	push   0x23
c00004fd:	e9 c8 00 00 00       	jmp    c00005ca <int_common_stub>

c0000502 <irq4>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 24                	push   0x24
c0000507:	e9 be 00 00 00       	jmp    c00005ca <int_common_stub>

c000050c <irq5>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 25                	push   0x25
c0000511:	e9 b4 00 00 00       	jmp    c00005ca <int_common_stub>

c0000516 <irq6>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 26                	push   0x26
c000051b:	e9 aa 00 00 00       	jmp    c00005ca <int_common_stub>

c0000520 <irq7>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 27                	push   0x27
c0000525:	e9 a0 00 00 00       	jmp    c00005ca <int_common_stub>

c000052a <irq8>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 28                	push   0x28
c000052f:	e9 96 00 00 00       	jmp    c00005ca <int_common_stub>

c0000534 <irq9>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 29                	push   0x29
c0000539:	e9 8c 00 00 00       	jmp    c00005ca <int_common_stub>

c000053e <irq10>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 2a                	push   0x2a
c0000543:	e9 82 00 00 00       	jmp    c00005ca <int_common_stub>

c0000548 <irq11>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 2b                	push   0x2b
c000054d:	e9 78 00 00 00       	jmp    c00005ca <int_common_stub>

c0000552 <irq12>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 2c                	push   0x2c
c0000557:	e9 6e 00 00 00       	jmp    c00005ca <int_common_stub>

c000055c <irq13>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 2d                	push   0x2d
c0000561:	e9 64 00 00 00       	jmp    c00005ca <int_common_stub>

c0000566 <irq14>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2e                	push   0x2e
c000056b:	e9 5a 00 00 00       	jmp    c00005ca <int_common_stub>

c0000570 <irq15>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2f                	push   0x2f
c0000575:	e9 50 00 00 00       	jmp    c00005ca <int_common_stub>

c000057a <irq16>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 30                	push   0x30
c000057f:	e9 46 00 00 00       	jmp    c00005ca <int_common_stub>

c0000584 <irq17>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 31                	push   0x31
c0000589:	e9 3c 00 00 00       	jmp    c00005ca <int_common_stub>

c000058e <irq18>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 32                	push   0x32
c0000593:	e9 32 00 00 00       	jmp    c00005ca <int_common_stub>

c0000598 <irq19>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 33                	push   0x33
c000059d:	e9 28 00 00 00       	jmp    c00005ca <int_common_stub>

c00005a2 <irq20>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 34                	push   0x34
c00005a7:	e9 1e 00 00 00       	jmp    c00005ca <int_common_stub>

c00005ac <irq21>:
c00005ac:	fa                   	cli    
c00005ad:	6a 00                	push   0x0
c00005af:	6a 35                	push   0x35
c00005b1:	e9 14 00 00 00       	jmp    c00005ca <int_common_stub>

c00005b6 <irq22>:
c00005b6:	fa                   	cli    
c00005b7:	6a 00                	push   0x0
c00005b9:	6a 36                	push   0x36
c00005bb:	e9 0a 00 00 00       	jmp    c00005ca <int_common_stub>

c00005c0 <irq23>:
c00005c0:	fa                   	cli    
c00005c1:	6a 00                	push   0x0
c00005c3:	6a 37                	push   0x37
c00005c5:	e9 00 00 00 00       	jmp    c00005ca <int_common_stub>

c00005ca <int_common_stub>:
c00005ca:	60                   	pusha  
c00005cb:	1e                   	push   ds
c00005cc:	06                   	push   es
c00005cd:	0f a0                	push   fs
c00005cf:	0f a8                	push   gs
c00005d1:	66 b8 10 00          	mov    ax,0x10
c00005d5:	66 8e d8             	mov    ds,ax
c00005d8:	66 8e c0             	mov    es,ax
c00005db:	66 8e e0             	mov    fs,ax
c00005de:	66 8e e8             	mov    gs,ax
c00005e1:	89 e1                	mov    ecx,esp
c00005e3:	51                   	push   ecx
c00005e4:	b9 d5 0e 01 c0       	mov    ecx,0xc0010ed5
c00005e9:	ff d1                	call   ecx
c00005eb:	59                   	pop    ecx
c00005ec:	0f a9                	pop    gs
c00005ee:	0f a1                	pop    fs
c00005f0:	07                   	pop    es
c00005f1:	1f                   	pop    ds
c00005f2:	61                   	popa   
c00005f3:	81 c4 08 00 00 00    	add    esp,0x8
c00005f9:	cf                   	iret   

c00005fa <syscall_common_stub>:
c00005fa:	60                   	pusha  
c00005fb:	1e                   	push   ds
c00005fc:	06                   	push   es
c00005fd:	0f a0                	push   fs
c00005ff:	0f a8                	push   gs
c0000601:	66 b8 10 00          	mov    ax,0x10
c0000605:	66 8e d8             	mov    ds,ax
c0000608:	66 8e c0             	mov    es,ax
c000060b:	66 8e e0             	mov    fs,ax
c000060e:	66 8e e8             	mov    gs,ax
c0000611:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000617:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c000061a:	89 e1                	mov    ecx,esp
c000061c:	51                   	push   ecx
c000061d:	fb                   	sti    
c000061e:	b9 d5 0e 01 c0       	mov    ecx,0xc0010ed5
c0000623:	ff d1                	call   ecx
c0000625:	59                   	pop    ecx

c0000626 <offAForkJumpThingy>:
c0000626:	0f a9                	pop    gs
c0000628:	0f a1                	pop    fs
c000062a:	07                   	pop    es
c000062b:	1f                   	pop    ds
c000062c:	61                   	popa   
c000062d:	81 c4 08 00 00 00    	add    esp,0x8
c0000633:	cf                   	iret   

c0000634 <memcmp>:
c0000634:	56                   	push   esi
c0000635:	53                   	push   ebx
c0000636:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000063a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000642:	01 d6                	add    esi,edx
c0000644:	39 f2                	cmp    edx,esi
c0000646:	74 0e                	je     c0000656 <memcmp+0x22>
c0000648:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c000064b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000064e:	38 c8                	cmp    al,cl
c0000650:	75 08                	jne    c000065a <memcmp+0x26>
c0000652:	42                   	inc    edx
c0000653:	43                   	inc    ebx
c0000654:	eb ee                	jmp    c0000644 <memcmp+0x10>
c0000656:	31 c0                	xor    eax,eax
c0000658:	eb 02                	jmp    c000065c <memcmp+0x28>
c000065a:	29 c8                	sub    eax,ecx
c000065c:	5b                   	pop    ebx
c000065d:	5e                   	pop    esi
c000065e:	c3                   	ret    

c000065f <memmove>:
c000065f:	56                   	push   esi
c0000660:	53                   	push   ebx
c0000661:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000665:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000669:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000066d:	39 c8                	cmp    eax,ecx
c000066f:	73 12                	jae    c0000683 <memmove+0x24>
c0000671:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000674:	89 c3                	mov    ebx,eax
c0000676:	39 f1                	cmp    ecx,esi
c0000678:	74 1a                	je     c0000694 <memmove+0x35>
c000067a:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067c:	43                   	inc    ebx
c000067d:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000680:	41                   	inc    ecx
c0000681:	eb f3                	jmp    c0000676 <memmove+0x17>
c0000683:	76 0f                	jbe    c0000694 <memmove+0x35>
c0000685:	85 d2                	test   edx,edx
c0000687:	74 0b                	je     c0000694 <memmove+0x35>
c0000689:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000068d:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c0000691:	4a                   	dec    edx
c0000692:	eb f1                	jmp    c0000685 <memmove+0x26>
c0000694:	5b                   	pop    ebx
c0000695:	5e                   	pop    esi
c0000696:	c3                   	ret    

c0000697 <memcpy>:
c0000697:	57                   	push   edi
c0000698:	56                   	push   esi
c0000699:	53                   	push   ebx
c000069a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000069e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00006a2:	89 da                	mov    edx,ebx
c00006a4:	89 d9                	mov    ecx,ebx
c00006a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00006aa:	83 e2 fc             	and    edx,0xfffffffc
c00006ad:	c1 e9 02             	shr    ecx,0x2
c00006b0:	89 c7                	mov    edi,eax
c00006b2:	fc                   	cld    
c00006b3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00006b5:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00006b8:	01 c2                	add    edx,eax
c00006ba:	01 de                	add    esi,ebx
c00006bc:	39 f1                	cmp    ecx,esi
c00006be:	74 09                	je     c00006c9 <memcpy+0x32>
c00006c0:	8a 19                	mov    bl,BYTE PTR [ecx]
c00006c2:	42                   	inc    edx
c00006c3:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006c6:	41                   	inc    ecx
c00006c7:	eb f3                	jmp    c00006bc <memcpy+0x25>
c00006c9:	5b                   	pop    ebx
c00006ca:	5e                   	pop    esi
c00006cb:	5f                   	pop    edi
c00006cc:	c3                   	ret    

c00006cd <memset>:
c00006cd:	53                   	push   ebx
c00006ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006d2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006d6:	01 c1                	add    ecx,eax
c00006d8:	89 c2                	mov    edx,eax
c00006da:	39 ca                	cmp    edx,ecx
c00006dc:	74 0a                	je     c00006e8 <memset+0x1b>
c00006de:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006e2:	42                   	inc    edx
c00006e3:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006e6:	eb f2                	jmp    c00006da <memset+0xd>
c00006e8:	5b                   	pop    ebx
c00006e9:	c3                   	ret    

c00006ea <strlen>:
c00006ea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006ee:	31 c0                	xor    eax,eax
c00006f0:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006f4:	74 03                	je     c00006f9 <strlen+0xf>
c00006f6:	40                   	inc    eax
c00006f7:	eb f7                	jmp    c00006f0 <strlen+0x6>
c00006f9:	c3                   	ret    

c00006fa <strpbrk>:
c00006fa:	53                   	push   ebx
c00006fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ff:	8a 08                	mov    cl,BYTE PTR [eax]
c0000701:	84 c9                	test   cl,cl
c0000703:	74 14                	je     c0000719 <strpbrk+0x1f>
c0000705:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000709:	8a 1a                	mov    bl,BYTE PTR [edx]
c000070b:	84 db                	test   bl,bl
c000070d:	74 07                	je     c0000716 <strpbrk+0x1c>
c000070f:	38 cb                	cmp    bl,cl
c0000711:	74 08                	je     c000071b <strpbrk+0x21>
c0000713:	42                   	inc    edx
c0000714:	eb f3                	jmp    c0000709 <strpbrk+0xf>
c0000716:	40                   	inc    eax
c0000717:	eb e6                	jmp    c00006ff <strpbrk+0x5>
c0000719:	31 c0                	xor    eax,eax
c000071b:	5b                   	pop    ebx
c000071c:	c3                   	ret    

c000071d <strtok>:
c000071d:	56                   	push   esi
c000071e:	53                   	push   ebx
c000071f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000723:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000727:	85 db                	test   ebx,ebx
c0000729:	75 0e                	jne    c0000739 <strtok+0x1c>
c000072b:	8b 1d 8c 43 02 c0    	mov    ebx,DWORD PTR ds:0xc002438c
c0000731:	85 db                	test   ebx,ebx
c0000733:	75 04                	jne    c0000739 <strtok+0x1c>
c0000735:	31 db                	xor    ebx,ebx
c0000737:	eb 2e                	jmp    c0000767 <strtok+0x4a>
c0000739:	56                   	push   esi
c000073a:	53                   	push   ebx
c000073b:	e8 ba ff ff ff       	call   c00006fa <strpbrk>
c0000740:	a3 8c 43 02 c0       	mov    ds:0xc002438c,eax
c0000745:	5a                   	pop    edx
c0000746:	a1 8c 43 02 c0       	mov    eax,ds:0xc002438c
c000074b:	59                   	pop    ecx
c000074c:	39 d8                	cmp    eax,ebx
c000074e:	75 07                	jne    c0000757 <strtok+0x3a>
c0000750:	43                   	inc    ebx
c0000751:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000755:	eb e2                	jmp    c0000739 <strtok+0x1c>
c0000757:	85 c0                	test   eax,eax
c0000759:	74 da                	je     c0000735 <strtok+0x18>
c000075b:	8d 50 01             	lea    edx,[eax+0x1]
c000075e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000761:	89 15 8c 43 02 c0    	mov    DWORD PTR ds:0xc002438c,edx
c0000767:	89 d8                	mov    eax,ebx
c0000769:	5b                   	pop    ebx
c000076a:	5e                   	pop    esi
c000076b:	c3                   	ret    

c000076c <strcpy>:
c000076c:	53                   	push   ebx
c000076d:	31 d2                	xor    edx,edx
c000076f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000773:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000777:	8d 1c 10             	lea    ebx,[eax+edx*1]
c000077a:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000077d:	84 c9                	test   cl,cl
c000077f:	74 06                	je     c0000787 <strcpy+0x1b>
c0000781:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000784:	42                   	inc    edx
c0000785:	eb ec                	jmp    c0000773 <strcpy+0x7>
c0000787:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000078a:	5b                   	pop    ebx
c000078b:	c3                   	ret    

c000078c <strncpy>:
c000078c:	56                   	push   esi
c000078d:	53                   	push   ebx
c000078e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000792:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000796:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000079a:	89 c3                	mov    ebx,eax
c000079c:	85 c9                	test   ecx,ecx
c000079e:	74 1a                	je     c00007ba <strncpy+0x2e>
c00007a0:	46                   	inc    esi
c00007a1:	43                   	inc    ebx
c00007a2:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00007a5:	49                   	dec    ecx
c00007a6:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00007a9:	84 d2                	test   dl,dl
c00007ab:	75 ef                	jne    c000079c <strncpy+0x10>
c00007ad:	31 d2                	xor    edx,edx
c00007af:	39 d1                	cmp    ecx,edx
c00007b1:	74 07                	je     c00007ba <strncpy+0x2e>
c00007b3:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007b7:	42                   	inc    edx
c00007b8:	eb f5                	jmp    c00007af <strncpy+0x23>
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	c3                   	ret    

c00007bd <strcmp>:
c00007bd:	31 c9                	xor    ecx,ecx
c00007bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007c3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007c7:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007cb:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007cf:	38 d0                	cmp    al,dl
c00007d1:	75 08                	jne    c00007db <strcmp+0x1e>
c00007d3:	41                   	inc    ecx
c00007d4:	84 c0                	test   al,al
c00007d6:	75 e7                	jne    c00007bf <strcmp+0x2>
c00007d8:	31 c0                	xor    eax,eax
c00007da:	c3                   	ret    
c00007db:	29 d0                	sub    eax,edx
c00007dd:	c3                   	ret    

c00007de <strchr>:
c00007de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007e2:	8a 10                	mov    dl,BYTE PTR [eax]
c00007e4:	84 d2                	test   dl,dl
c00007e6:	74 09                	je     c00007f1 <strchr+0x13>
c00007e8:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007ec:	74 05                	je     c00007f3 <strchr+0x15>
c00007ee:	40                   	inc    eax
c00007ef:	eb f1                	jmp    c00007e2 <strchr+0x4>
c00007f1:	31 c0                	xor    eax,eax
c00007f3:	c3                   	ret    

c00007f4 <strncmp>:
c00007f4:	56                   	push   esi
c00007f5:	53                   	push   ebx
c00007f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007fa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000802:	01 d6                	add    esi,edx
c0000804:	39 f2                	cmp    edx,esi
c0000806:	74 12                	je     c000081a <strncmp+0x26>
c0000808:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c000080b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000080e:	38 c8                	cmp    al,cl
c0000810:	75 0c                	jne    c000081e <strncmp+0x2a>
c0000812:	42                   	inc    edx
c0000813:	84 c0                	test   al,al
c0000815:	74 03                	je     c000081a <strncmp+0x26>
c0000817:	43                   	inc    ebx
c0000818:	eb ea                	jmp    c0000804 <strncmp+0x10>
c000081a:	31 c0                	xor    eax,eax
c000081c:	eb 02                	jmp    c0000820 <strncmp+0x2c>
c000081e:	29 c8                	sub    eax,ecx
c0000820:	5b                   	pop    ebx
c0000821:	5e                   	pop    esi
c0000822:	c3                   	ret    

c0000823 <strcat>:
c0000823:	53                   	push   ebx
c0000824:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000828:	89 c1                	mov    ecx,eax
c000082a:	8d 51 01             	lea    edx,[ecx+0x1]
c000082d:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000831:	74 04                	je     c0000837 <strcat+0x14>
c0000833:	89 d1                	mov    ecx,edx
c0000835:	eb f3                	jmp    c000082a <strcat+0x7>
c0000837:	31 d2                	xor    edx,edx
c0000839:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000083d:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c0000840:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000843:	42                   	inc    edx
c0000844:	84 db                	test   bl,bl
c0000846:	75 f1                	jne    c0000839 <strcat+0x16>
c0000848:	5b                   	pop    ebx
c0000849:	c3                   	ret    

c000084a <strncat>:
c000084a:	56                   	push   esi
c000084b:	53                   	push   ebx
c000084c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000850:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000854:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000858:	89 c2                	mov    edx,eax
c000085a:	85 db                	test   ebx,ebx
c000085c:	74 23                	je     c0000881 <strncat+0x37>
c000085e:	8d 72 01             	lea    esi,[edx+0x1]
c0000861:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000865:	74 04                	je     c000086b <strncat+0x21>
c0000867:	89 f2                	mov    edx,esi
c0000869:	eb f3                	jmp    c000085e <strncat+0x14>
c000086b:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000086e:	41                   	inc    ecx
c000086f:	42                   	inc    edx
c0000870:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000873:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000876:	84 db                	test   bl,bl
c0000878:	74 07                	je     c0000881 <strncat+0x37>
c000087a:	39 f1                	cmp    ecx,esi
c000087c:	75 f0                	jne    c000086e <strncat+0x24>
c000087e:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000881:	5b                   	pop    ebx
c0000882:	5e                   	pop    esi
c0000883:	c3                   	ret    

c0000884 <strstr>:
c0000884:	57                   	push   edi
c0000885:	56                   	push   esi
c0000886:	53                   	push   ebx
c0000887:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000088b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000088f:	57                   	push   edi
c0000890:	e8 55 fe ff ff       	call   c00006ea <strlen>
c0000895:	59                   	pop    ecx
c0000896:	89 c6                	mov    esi,eax
c0000898:	85 c0                	test   eax,eax
c000089a:	74 1f                	je     c00008bb <strstr+0x37>
c000089c:	53                   	push   ebx
c000089d:	e8 48 fe ff ff       	call   c00006ea <strlen>
c00008a2:	5a                   	pop    edx
c00008a3:	39 f0                	cmp    eax,esi
c00008a5:	72 12                	jb     c00008b9 <strstr+0x35>
c00008a7:	56                   	push   esi
c00008a8:	57                   	push   edi
c00008a9:	53                   	push   ebx
c00008aa:	e8 85 fd ff ff       	call   c0000634 <memcmp>
c00008af:	83 c4 0c             	add    esp,0xc
c00008b2:	85 c0                	test   eax,eax
c00008b4:	74 05                	je     c00008bb <strstr+0x37>
c00008b6:	43                   	inc    ebx
c00008b7:	eb e3                	jmp    c000089c <strstr+0x18>
c00008b9:	31 db                	xor    ebx,ebx
c00008bb:	89 d8                	mov    eax,ebx
c00008bd:	5b                   	pop    ebx
c00008be:	5e                   	pop    esi
c00008bf:	5f                   	pop    edi
c00008c0:	c3                   	ret    

c00008c1 <toupper>:
c00008c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008c5:	0f b6 d0             	movzx  edx,al
c00008c8:	f6 82 20 03 02 c0 02 	test   BYTE PTR [edx-0x3ffdfce0],0x2
c00008cf:	74 03                	je     c00008d4 <toupper+0x13>
c00008d1:	83 e8 20             	sub    eax,0x20
c00008d4:	c3                   	ret    

c00008d5 <tolower>:
c00008d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d9:	0f b6 d0             	movzx  edx,al
c00008dc:	f6 82 20 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfce0],0x1
c00008e3:	74 03                	je     c00008e8 <tolower+0x13>
c00008e5:	83 c0 20             	add    eax,0x20
c00008e8:	c3                   	ret    

c00008e9 <simple_strtoul>:
c00008e9:	55                   	push   ebp
c00008ea:	57                   	push   edi
c00008eb:	56                   	push   esi
c00008ec:	53                   	push   ebx
c00008ed:	83 ec 08             	sub    esp,0x8
c00008f0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008f4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008f8:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008fb:	f6 82 20 03 02 c0 08 	test   BYTE PTR [edx-0x3ffdfce0],0x8
c0000902:	74 03                	je     c0000907 <simple_strtoul+0x1e>
c0000904:	41                   	inc    ecx
c0000905:	eb f1                	jmp    c00008f8 <simple_strtoul+0xf>
c0000907:	80 fa 09             	cmp    dl,0x9
c000090a:	74 f8                	je     c0000904 <simple_strtoul+0x1b>
c000090c:	80 fa 2d             	cmp    dl,0x2d
c000090f:	75 0b                	jne    c000091c <simple_strtoul+0x33>
c0000911:	41                   	inc    ecx
c0000912:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000091a:	eb 0e                	jmp    c000092a <simple_strtoul+0x41>
c000091c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000924:	80 fa 2b             	cmp    dl,0x2b
c0000927:	75 01                	jne    c000092a <simple_strtoul+0x41>
c0000929:	41                   	inc    ecx
c000092a:	85 f6                	test   esi,esi
c000092c:	75 22                	jne    c0000950 <simple_strtoul+0x67>
c000092e:	be 0a 00 00 00       	mov    esi,0xa
c0000933:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000936:	75 5a                	jne    c0000992 <simple_strtoul+0xa9>
c0000938:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000093c:	50                   	push   eax
c000093d:	e8 93 ff ff ff       	call   c00008d5 <tolower>
c0000942:	5a                   	pop    edx
c0000943:	83 f8 78             	cmp    eax,0x78
c0000946:	74 03                	je     c000094b <simple_strtoul+0x62>
c0000948:	41                   	inc    ecx
c0000949:	eb 16                	jmp    c0000961 <simple_strtoul+0x78>
c000094b:	83 c1 02             	add    ecx,0x2
c000094e:	eb 22                	jmp    c0000972 <simple_strtoul+0x89>
c0000950:	8d 46 fe             	lea    eax,[esi-0x2]
c0000953:	83 f8 22             	cmp    eax,0x22
c0000956:	0f 87 ab 00 00 00    	ja     c0000a07 <simple_strtoul+0x11e>
c000095c:	83 fe 08             	cmp    esi,0x8
c000095f:	75 0c                	jne    c000096d <simple_strtoul+0x84>
c0000961:	be 08 00 00 00       	mov    esi,0x8
c0000966:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000969:	75 27                	jne    c0000992 <simple_strtoul+0xa9>
c000096b:	eb 1f                	jmp    c000098c <simple_strtoul+0xa3>
c000096d:	83 fe 10             	cmp    esi,0x10
c0000970:	75 20                	jne    c0000992 <simple_strtoul+0xa9>
c0000972:	be 10 00 00 00       	mov    esi,0x10
c0000977:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000097a:	75 16                	jne    c0000992 <simple_strtoul+0xa9>
c000097c:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000980:	50                   	push   eax
c0000981:	e8 4f ff ff ff       	call   c00008d5 <tolower>
c0000986:	5d                   	pop    ebp
c0000987:	83 f8 78             	cmp    eax,0x78
c000098a:	74 03                	je     c000098f <simple_strtoul+0xa6>
c000098c:	41                   	inc    ecx
c000098d:	eb 03                	jmp    c0000992 <simple_strtoul+0xa9>
c000098f:	83 c1 02             	add    ecx,0x2
c0000992:	31 ed                	xor    ebp,ebp
c0000994:	31 db                	xor    ebx,ebx
c0000996:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000099d:	8a 11                	mov    dl,BYTE PTR [ecx]
c000099f:	84 d2                	test   dl,dl
c00009a1:	74 27                	je     c00009ca <simple_strtoul+0xe1>
c00009a3:	0f b6 fa             	movzx  edi,dl
c00009a6:	f6 87 20 03 02 c0 04 	test   BYTE PTR [edi-0x3ffdfce0],0x4
c00009ad:	74 05                	je     c00009b4 <simple_strtoul+0xcb>
c00009af:	83 ef 30             	sub    edi,0x30
c00009b2:	eb 22                	jmp    c00009d6 <simple_strtoul+0xed>
c00009b4:	0f be d2             	movsx  edx,dl
c00009b7:	52                   	push   edx
c00009b8:	e8 04 ff ff ff       	call   c00008c1 <toupper>
c00009bd:	0f b6 d0             	movzx  edx,al
c00009c0:	5f                   	pop    edi
c00009c1:	f6 82 20 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfce0],0x1
c00009c8:	75 09                	jne    c00009d3 <simple_strtoul+0xea>
c00009ca:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009cf:	75 2d                	jne    c00009fe <simple_strtoul+0x115>
c00009d1:	eb 59                	jmp    c0000a2c <simple_strtoul+0x143>
c00009d3:	8d 78 c9             	lea    edi,[eax-0x37]
c00009d6:	39 f7                	cmp    edi,esi
c00009d8:	73 f0                	jae    c00009ca <simple_strtoul+0xe1>
c00009da:	89 f8                	mov    eax,edi
c00009dc:	31 d2                	xor    edx,edx
c00009de:	f7 d0                	not    eax
c00009e0:	f7 f6                	div    esi
c00009e2:	39 d8                	cmp    eax,ebx
c00009e4:	72 0e                	jb     c00009f4 <simple_strtoul+0x10b>
c00009e6:	0f af de             	imul   ebx,esi
c00009e9:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009f0:	01 fb                	add    ebx,edi
c00009f2:	eb 07                	jmp    c00009fb <simple_strtoul+0x112>
c00009f4:	bd 01 00 00 00       	mov    ebp,0x1
c00009f9:	31 db                	xor    ebx,ebx
c00009fb:	41                   	inc    ecx
c00009fc:	eb 9f                	jmp    c000099d <simple_strtoul+0xb4>
c00009fe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a01:	09 d8                	or     eax,ebx
c0000a03:	75 21                	jne    c0000a26 <simple_strtoul+0x13d>
c0000a05:	eb 11                	jmp    c0000a18 <simple_strtoul+0x12f>
c0000a07:	31 db                	xor    ebx,ebx
c0000a09:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000a0e:	74 22                	je     c0000a32 <simple_strtoul+0x149>
c0000a10:	31 ed                	xor    ebp,ebp
c0000a12:	31 db                	xor    ebx,ebx
c0000a14:	85 c9                	test   ecx,ecx
c0000a16:	74 0e                	je     c0000a26 <simple_strtoul+0x13d>
c0000a18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a1c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a20:	31 db                	xor    ebx,ebx
c0000a22:	89 38                	mov    DWORD PTR [eax],edi
c0000a24:	eb 06                	jmp    c0000a2c <simple_strtoul+0x143>
c0000a26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a2a:	89 08                	mov    DWORD PTR [eax],ecx
c0000a2c:	4d                   	dec    ebp
c0000a2d:	75 03                	jne    c0000a32 <simple_strtoul+0x149>
c0000a2f:	83 cb ff             	or     ebx,0xffffffff
c0000a32:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a37:	75 02                	jne    c0000a3b <simple_strtoul+0x152>
c0000a39:	f7 db                	neg    ebx
c0000a3b:	83 c4 08             	add    esp,0x8
c0000a3e:	89 d8                	mov    eax,ebx
c0000a40:	5b                   	pop    ebx
c0000a41:	5e                   	pop    esi
c0000a42:	5f                   	pop    edi
c0000a43:	5d                   	pop    ebp
c0000a44:	c3                   	ret    

c0000a45 <largebin_index>:
c0000a45:	89 c2                	mov    edx,eax
c0000a47:	c1 ea 08             	shr    edx,0x8
c0000a4a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a50:	77 10                	ja     c0000a62 <largebin_index+0x1d>
c0000a52:	0f bd d2             	bsr    edx,edx
c0000a55:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a58:	d3 e8                	shr    eax,cl
c0000a5a:	83 e0 03             	and    eax,0x3
c0000a5d:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a61:	c3                   	ret    
c0000a62:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a67:	c3                   	ret    

c0000a68 <malloc_init_state>:
c0000a68:	8d 50 34             	lea    edx,[eax+0x34]
c0000a6b:	53                   	push   ebx
c0000a6c:	89 d1                	mov    ecx,edx
c0000a6e:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a74:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a77:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a7a:	83 c2 08             	add    edx,0x8
c0000a7d:	39 da                	cmp    edx,ebx
c0000a7f:	75 f3                	jne    c0000a74 <malloc_init_state+0xc>
c0000a81:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a83:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a8d:	83 e2 03             	and    edx,0x3
c0000a90:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a9a:	83 ca 48             	or     edx,0x48
c0000a9d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000aa7:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000ab1:	89 10                	mov    DWORD PTR [eax],edx
c0000ab3:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000aba:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000abd:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000ac7:	5b                   	pop    ebx
c0000ac8:	c3                   	ret    

c0000ac9 <malloc_consolidate>:
c0000ac9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000acb:	85 d2                	test   edx,edx
c0000acd:	0f 84 d8 00 00 00    	je     c0000bab <malloc_consolidate+0xe2>
c0000ad3:	55                   	push   ebp
c0000ad4:	83 e2 fd             	and    edx,0xfffffffd
c0000ad7:	57                   	push   edi
c0000ad8:	8d 78 34             	lea    edi,[eax+0x34]
c0000adb:	56                   	push   esi
c0000adc:	89 c5                	mov    ebp,eax
c0000ade:	53                   	push   ebx
c0000adf:	83 ec 10             	sub    esp,0x10
c0000ae2:	89 10                	mov    DWORD PTR [eax],edx
c0000ae4:	c1 ea 03             	shr    edx,0x3
c0000ae7:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000aeb:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000aef:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000af3:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000af6:	85 d2                	test   edx,edx
c0000af8:	0f 84 98 00 00 00    	je     c0000b96 <malloc_consolidate+0xcd>
c0000afe:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000b05:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000b08:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000b0b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000b0f:	89 f9                	mov    ecx,edi
c0000b11:	83 e1 fe             	and    ecx,0xfffffffe
c0000b14:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b17:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b1a:	83 e3 fc             	and    ebx,0xfffffffc
c0000b1d:	83 e7 01             	and    edi,0x1
c0000b20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b23:	75 14                	jne    c0000b39 <malloc_consolidate+0x70>
c0000b25:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b27:	29 fa                	sub    edx,edi
c0000b29:	01 f9                	add    ecx,edi
c0000b2b:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b2e:	89 fb                	mov    ebx,edi
c0000b30:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b33:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b36:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b39:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b3c:	74 40                	je     c0000b7e <malloc_consolidate+0xb5>
c0000b3e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b41:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b44:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b48:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b4b:	83 e7 01             	and    edi,0x1
c0000b4e:	75 0e                	jne    c0000b5e <malloc_consolidate+0x95>
c0000b50:	01 d9                	add    ecx,ebx
c0000b52:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b55:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b5b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b5e:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b61:	89 ce                	mov    esi,ecx
c0000b63:	83 ce 01             	or     esi,0x1
c0000b66:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b69:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b6c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b6f:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b73:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b76:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b79:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b7c:	eb 0c                	jmp    c0000b8a <malloc_consolidate+0xc1>
c0000b7e:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b81:	83 c9 01             	or     ecx,0x1
c0000b84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b87:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b8e:	85 d2                	test   edx,edx
c0000b90:	0f 85 6f ff ff ff    	jne    c0000b05 <malloc_consolidate+0x3c>
c0000b96:	83 c5 04             	add    ebp,0x4
c0000b99:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b9d:	0f 85 50 ff ff ff    	jne    c0000af3 <malloc_consolidate+0x2a>
c0000ba3:	83 c4 10             	add    esp,0x10
c0000ba6:	5b                   	pop    ebx
c0000ba7:	5e                   	pop    esi
c0000ba8:	5f                   	pop    edi
c0000ba9:	5d                   	pop    ebp
c0000baa:	c3                   	ret    
c0000bab:	e9 b8 fe ff ff       	jmp    c0000a68 <malloc_init_state>

c0000bb0 <dlfree>:
c0000bb0:	57                   	push   edi
c0000bb1:	56                   	push   esi
c0000bb2:	53                   	push   ebx
c0000bb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000bb7:	85 db                	test   ebx,ebx
c0000bb9:	0f 84 e2 00 00 00    	je     c0000ca1 <dlfree+0xf1>
c0000bbf:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000bc2:	8b 0d a0 43 02 c0    	mov    ecx,DWORD PTR ds:0xc00243a0
c0000bc8:	89 f0                	mov    eax,esi
c0000bca:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bcd:	83 e0 fc             	and    eax,0xfffffffc
c0000bd0:	39 c1                	cmp    ecx,eax
c0000bd2:	72 24                	jb     c0000bf8 <dlfree+0x48>
c0000bd4:	c1 e8 03             	shr    eax,0x3
c0000bd7:	83 c9 03             	or     ecx,0x3
c0000bda:	83 e8 02             	sub    eax,0x2
c0000bdd:	89 0d a0 43 02 c0    	mov    DWORD PTR ds:0xc00243a0,ecx
c0000be3:	8b 0c 85 a4 43 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbc5c]
c0000bea:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000bec:	89 14 85 a4 43 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbc5c],edx
c0000bf3:	e9 a9 00 00 00       	jmp    c0000ca1 <dlfree+0xf1>
c0000bf8:	83 e6 02             	and    esi,0x2
c0000bfb:	0f 85 a0 00 00 00    	jne    c0000ca1 <dlfree+0xf1>
c0000c01:	8d 34 02             	lea    esi,[edx+eax*1]
c0000c04:	83 c9 01             	or     ecx,0x1
c0000c07:	89 0d a0 43 02 c0    	mov    DWORD PTR ds:0xc00243a0,ecx
c0000c0d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000c10:	83 e1 fc             	and    ecx,0xfffffffc
c0000c13:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c17:	75 13                	jne    c0000c2c <dlfree+0x7c>
c0000c19:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c1c:	29 da                	sub    edx,ebx
c0000c1e:	01 d8                	add    eax,ebx
c0000c20:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c23:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c26:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c29:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c2c:	39 35 cc 43 02 c0    	cmp    DWORD PTR ds:0xc00243cc,esi
c0000c32:	74 40                	je     c0000c74 <dlfree+0xc4>
c0000c34:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c38:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c3b:	80 e3 01             	and    bl,0x1
c0000c3e:	75 0e                	jne    c0000c4e <dlfree+0x9e>
c0000c40:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c43:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c46:	01 c8                	add    eax,ecx
c0000c48:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c4b:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c4e:	8b 0d dc 43 02 c0    	mov    ecx,DWORD PTR ds:0xc00243dc
c0000c54:	c7 42 0c d4 43 02 c0 	mov    DWORD PTR [edx+0xc],0xc00243d4
c0000c5b:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c5e:	89 15 dc 43 02 c0    	mov    DWORD PTR ds:0xc00243dc,edx
c0000c64:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c67:	89 c1                	mov    ecx,eax
c0000c69:	83 c9 01             	or     ecx,0x1
c0000c6c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c6f:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c72:	eb 10                	jmp    c0000c84 <dlfree+0xd4>
c0000c74:	01 c8                	add    eax,ecx
c0000c76:	89 c1                	mov    ecx,eax
c0000c78:	83 c9 01             	or     ecx,0x1
c0000c7b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c7e:	89 15 cc 43 02 c0    	mov    DWORD PTR ds:0xc00243cc,edx
c0000c84:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c89:	76 16                	jbe    c0000ca1 <dlfree+0xf1>
c0000c8b:	f6 05 a0 43 02 c0 02 	test   BYTE PTR ds:0xc00243a0,0x2
c0000c92:	74 0d                	je     c0000ca1 <dlfree+0xf1>
c0000c94:	5b                   	pop    ebx
c0000c95:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0000c9a:	5e                   	pop    esi
c0000c9b:	5f                   	pop    edi
c0000c9c:	e9 28 fe ff ff       	jmp    c0000ac9 <malloc_consolidate>
c0000ca1:	5b                   	pop    ebx
c0000ca2:	5e                   	pop    esi
c0000ca3:	5f                   	pop    edi
c0000ca4:	c3                   	ret    

c0000ca5 <sYSMALLOc>:
c0000ca5:	55                   	push   ebp
c0000ca6:	57                   	push   edi
c0000ca7:	56                   	push   esi
c0000ca8:	53                   	push   ebx
c0000ca9:	89 d3                	mov    ebx,edx
c0000cab:	83 ec 2c             	sub    esp,0x2c
c0000cae:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000cb4:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000cb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000cbb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000cbe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cc2:	74 1f                	je     c0000ce3 <sYSMALLOc+0x3e>
c0000cc4:	89 d0                	mov    eax,edx
c0000cc6:	e8 fe fd ff ff       	call   c0000ac9 <malloc_consolidate>
c0000ccb:	83 ec 0c             	sub    esp,0xc
c0000cce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000cd2:	83 e8 07             	sub    eax,0x7
c0000cd5:	50                   	push   eax
c0000cd6:	e8 33 02 00 00       	call   c0000f0e <dlmalloc>
c0000cdb:	83 c4 10             	add    esp,0x10
c0000cde:	e9 23 02 00 00       	jmp    c0000f06 <sYSMALLOc+0x261>
c0000ce3:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000cea:	83 c0 10             	add    eax,0x10
c0000ced:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000cf3:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000cf6:	01 c2                	add    edx,eax
c0000cf8:	83 e5 fc             	and    ebp,0xfffffffc
c0000cfb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000cff:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000d06:	74 02                	je     c0000d0a <sYSMALLOc+0x65>
c0000d08:	29 ea                	sub    edx,ebp
c0000d0a:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000d0e:	f7 d9                	neg    ecx
c0000d10:	21 ca                	and    edx,ecx
c0000d12:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000d16:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000d1a:	7f 07                	jg     c0000d23 <sYSMALLOc+0x7e>
c0000d1c:	31 c0                	xor    eax,eax
c0000d1e:	e9 e3 01 00 00       	jmp    c0000f06 <sYSMALLOc+0x261>
c0000d23:	83 ec 0c             	sub    esp,0xc
c0000d26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d2a:	e8 0a b1 00 00       	call   c000be39 <sbrk>
c0000d2f:	83 c4 10             	add    esp,0x10
c0000d32:	89 c6                	mov    esi,eax
c0000d34:	83 f8 ff             	cmp    eax,0xffffffff
c0000d37:	74 e3                	je     c0000d1c <sYSMALLOc+0x77>
c0000d39:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d3d:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000d40:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000d46:	39 c2                	cmp    edx,eax
c0000d48:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000d4e:	75 11                	jne    c0000d61 <sYSMALLOc+0xbc>
c0000d50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d54:	01 e8                	add    eax,ebp
c0000d56:	83 c8 01             	or     eax,0x1
c0000d59:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d5c:	e9 93 00 00 00       	jmp    c0000df4 <sYSMALLOc+0x14f>
c0000d61:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000d67:	a8 01                	test   al,0x1
c0000d69:	0f 84 73 01 00 00    	je     c0000ee2 <sYSMALLOc+0x23d>
c0000d6f:	85 ed                	test   ebp,ebp
c0000d71:	74 12                	je     c0000d85 <sYSMALLOc+0xe0>
c0000d73:	39 f2                	cmp    edx,esi
c0000d75:	76 0e                	jbe    c0000d85 <sYSMALLOc+0xe0>
c0000d77:	83 e0 fe             	and    eax,0xfffffffe
c0000d7a:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000d80:	e9 5d 01 00 00       	jmp    c0000ee2 <sYSMALLOc+0x23d>
c0000d85:	85 ed                	test   ebp,ebp
c0000d87:	74 0c                	je     c0000d95 <sYSMALLOc+0xf0>
c0000d89:	89 f0                	mov    eax,esi
c0000d8b:	29 d0                	sub    eax,edx
c0000d8d:	01 c1                	add    ecx,eax
c0000d8f:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000d95:	89 f2                	mov    edx,esi
c0000d97:	83 e2 07             	and    edx,0x7
c0000d9a:	0f 84 b1 00 00 00    	je     c0000e51 <sYSMALLOc+0x1ac>
c0000da0:	b8 08 00 00 00       	mov    eax,0x8
c0000da5:	29 d0                	sub    eax,edx
c0000da7:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000daa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000dae:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000db2:	01 e8                	add    eax,ebp
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000dba:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000dbe:	01 f2                	add    edx,esi
c0000dc0:	01 d1                	add    ecx,edx
c0000dc2:	29 d0                	sub    eax,edx
c0000dc4:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000dc8:	01 c1                	add    ecx,eax
c0000dca:	51                   	push   ecx
c0000dcb:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000dcf:	e8 65 b0 00 00       	call   c000be39 <sbrk>
c0000dd4:	83 c4 10             	add    esp,0x10
c0000dd7:	83 f8 ff             	cmp    eax,0xffffffff
c0000dda:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000dde:	75 7c                	jne    c0000e5c <sYSMALLOc+0x1b7>
c0000de0:	83 ec 0c             	sub    esp,0xc
c0000de3:	6a 00                	push   0x0
c0000de5:	e8 4f b0 00 00       	call   c000be39 <sbrk>
c0000dea:	83 c4 10             	add    esp,0x10
c0000ded:	31 c9                	xor    ecx,ecx
c0000def:	83 f8 ff             	cmp    eax,0xffffffff
c0000df2:	75 7e                	jne    c0000e72 <sYSMALLOc+0x1cd>
c0000df4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000dfa:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000e00:	73 06                	jae    c0000e08 <sYSMALLOc+0x163>
c0000e02:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000e08:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e0e:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e14:	73 06                	jae    c0000e1c <sYSMALLOc+0x177>
c0000e16:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e1c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e1f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e22:	83 e2 fc             	and    edx,0xfffffffc
c0000e25:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000e29:	0f 87 ed fe ff ff    	ja     c0000d1c <sYSMALLOc+0x77>
c0000e2f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000e33:	29 fa                	sub    edx,edi
c0000e35:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e38:	83 ca 01             	or     edx,0x1
c0000e3b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e3e:	89 fb                	mov    ebx,edi
c0000e40:	83 cb 01             	or     ebx,0x1
c0000e43:	83 c0 08             	add    eax,0x8
c0000e46:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e49:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e4c:	e9 b5 00 00 00       	jmp    c0000f06 <sYSMALLOc+0x261>
c0000e51:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000e55:	31 c0                	xor    eax,eax
c0000e57:	e9 52 ff ff ff       	jmp    c0000dae <sYSMALLOc+0x109>
c0000e5c:	39 c6                	cmp    esi,eax
c0000e5e:	76 12                	jbe    c0000e72 <sYSMALLOc+0x1cd>
c0000e60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e64:	01 f0                	add    eax,esi
c0000e66:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e6d:	e9 7b ff ff ff       	jmp    c0000ded <sYSMALLOc+0x148>
c0000e72:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000e76:	29 f0                	sub    eax,esi
c0000e78:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0000e7b:	01 c8                	add    eax,ecx
c0000e7d:	83 c8 01             	or     eax,0x1
c0000e80:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0000e83:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0000e89:	85 ed                	test   ebp,ebp
c0000e8b:	0f 84 63 ff ff ff    	je     c0000df4 <sYSMALLOc+0x14f>
c0000e91:	8d 45 f4             	lea    eax,[ebp-0xc]
c0000e94:	83 e0 f8             	and    eax,0xfffffff8
c0000e97:	89 c2                	mov    edx,eax
c0000e99:	83 ca 01             	or     edx,0x1
c0000e9c:	83 f8 0f             	cmp    eax,0xf
c0000e9f:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000ea2:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000eaa:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000eb2:	0f 86 3c ff ff ff    	jbe    c0000df4 <sYSMALLOc+0x14f>
c0000eb8:	83 ec 0c             	sub    esp,0xc
c0000ebb:	83 c7 08             	add    edi,0x8
c0000ebe:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000ec4:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000ece:	57                   	push   edi
c0000ecf:	e8 dc fc ff ff       	call   c0000bb0 <dlfree>
c0000ed4:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000eda:	83 c4 10             	add    esp,0x10
c0000edd:	e9 12 ff ff ff       	jmp    c0000df4 <sYSMALLOc+0x14f>
c0000ee2:	83 ec 0c             	sub    esp,0xc
c0000ee5:	6a 00                	push   0x0
c0000ee7:	e8 4d af 00 00       	call   c000be39 <sbrk>
c0000eec:	89 c2                	mov    edx,eax
c0000eee:	29 f2                	sub    edx,esi
c0000ef0:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000ef4:	83 c4 10             	add    esp,0x10
c0000ef7:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000efd:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000f01:	e9 e7 fe ff ff       	jmp    c0000ded <sYSMALLOc+0x148>
c0000f06:	83 c4 2c             	add    esp,0x2c
c0000f09:	5b                   	pop    ebx
c0000f0a:	5e                   	pop    esi
c0000f0b:	5f                   	pop    edi
c0000f0c:	5d                   	pop    ebp
c0000f0d:	c3                   	ret    

c0000f0e <dlmalloc>:
c0000f0e:	55                   	push   ebp
c0000f0f:	57                   	push   edi
c0000f10:	56                   	push   esi
c0000f11:	53                   	push   ebx
c0000f12:	83 ec 1c             	sub    esp,0x1c
c0000f15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f19:	83 f8 df             	cmp    eax,0xffffffdf
c0000f1c:	0f 87 70 03 00 00    	ja     c0001292 <dlmalloc+0x384>
c0000f22:	83 c0 0b             	add    eax,0xb
c0000f25:	be 10 00 00 00       	mov    esi,0x10
c0000f2a:	83 f8 0f             	cmp    eax,0xf
c0000f2d:	76 05                	jbe    c0000f34 <dlmalloc+0x26>
c0000f2f:	83 e0 f8             	and    eax,0xfffffff8
c0000f32:	89 c6                	mov    esi,eax
c0000f34:	8b 3d a0 43 02 c0    	mov    edi,DWORD PTR ds:0xc00243a0
c0000f3a:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f40:	75 17                	jne    c0000f59 <dlmalloc+0x4b>
c0000f42:	85 ff                	test   edi,edi
c0000f44:	0f 85 05 03 00 00    	jne    c000124f <dlmalloc+0x341>
c0000f4a:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0000f4f:	e8 75 fb ff ff       	call   c0000ac9 <malloc_consolidate>
c0000f54:	e9 f6 02 00 00       	jmp    c000124f <dlmalloc+0x341>
c0000f59:	39 f7                	cmp    edi,esi
c0000f5b:	72 1f                	jb     c0000f7c <dlmalloc+0x6e>
c0000f5d:	89 f2                	mov    edx,esi
c0000f5f:	c1 ea 03             	shr    edx,0x3
c0000f62:	83 ea 02             	sub    edx,0x2
c0000f65:	8b 04 95 a4 43 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbc5c]
c0000f6c:	85 c0                	test   eax,eax
c0000f6e:	74 0c                	je     c0000f7c <dlmalloc+0x6e>
c0000f70:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f73:	89 0c 95 a4 43 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbc5c],ecx
c0000f7a:	eb 30                	jmp    c0000fac <dlmalloc+0x9e>
c0000f7c:	89 f0                	mov    eax,esi
c0000f7e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f84:	77 2e                	ja     c0000fb4 <dlmalloc+0xa6>
c0000f86:	c1 e8 03             	shr    eax,0x3
c0000f89:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f8d:	8d 14 c5 d4 43 02 c0 	lea    edx,[eax*8-0x3ffdbc2c]
c0000f94:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f97:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f9a:	39 c3                	cmp    ebx,eax
c0000f9c:	74 2e                	je     c0000fcc <dlmalloc+0xbe>
c0000f9e:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000fa1:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000fa6:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000fa9:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000fac:	83 c0 08             	add    eax,0x8
c0000faf:	e9 e0 02 00 00       	jmp    c0001294 <dlmalloc+0x386>
c0000fb4:	e8 8c fa ff ff       	call   c0000a45 <largebin_index>
c0000fb9:	83 e7 02             	and    edi,0x2
c0000fbc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fc0:	74 0a                	je     c0000fcc <dlmalloc+0xbe>
c0000fc2:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0000fc7:	e8 fd fa ff ff       	call   c0000ac9 <malloc_consolidate>
c0000fcc:	8d 46 10             	lea    eax,[esi+0x10]
c0000fcf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fd3:	8b 1d e0 43 02 c0    	mov    ebx,DWORD PTR ds:0xc00243e0
c0000fd9:	81 fb d4 43 02 c0    	cmp    ebx,0xc00243d4
c0000fdf:	0f 84 13 01 00 00    	je     c00010f8 <dlmalloc+0x1ea>
c0000fe5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fe8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000feb:	83 e7 fc             	and    edi,0xfffffffc
c0000fee:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000ff4:	77 4c                	ja     c0001042 <dlmalloc+0x134>
c0000ff6:	3d d4 43 02 c0       	cmp    eax,0xc00243d4
c0000ffb:	75 45                	jne    c0001042 <dlmalloc+0x134>
c0000ffd:	39 1d d0 43 02 c0    	cmp    DWORD PTR ds:0xc00243d0,ebx
c0001003:	75 3d                	jne    c0001042 <dlmalloc+0x134>
c0001005:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001009:	73 37                	jae    c0001042 <dlmalloc+0x134>
c000100b:	89 fa                	mov    edx,edi
c000100d:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001010:	29 f2                	sub    edx,esi
c0001012:	83 ce 01             	or     esi,0x1
c0001015:	89 d1                	mov    ecx,edx
c0001017:	a3 dc 43 02 c0       	mov    ds:0xc00243dc,eax
c000101c:	83 c9 01             	or     ecx,0x1
c000101f:	a3 e0 43 02 c0       	mov    ds:0xc00243e0,eax
c0001024:	a3 d0 43 02 c0       	mov    ds:0xc00243d0,eax
c0001029:	c7 40 08 d4 43 02 c0 	mov    DWORD PTR [eax+0x8],0xc00243d4
c0001030:	c7 40 0c d4 43 02 c0 	mov    DWORD PTR [eax+0xc],0xc00243d4
c0001037:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000103a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000103d:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001040:	eb 15                	jmp    c0001057 <dlmalloc+0x149>
c0001042:	a3 e0 43 02 c0       	mov    ds:0xc00243e0,eax
c0001047:	39 fe                	cmp    esi,edi
c0001049:	c7 40 08 d4 43 02 c0 	mov    DWORD PTR [eax+0x8],0xc00243d4
c0001050:	75 0d                	jne    c000105f <dlmalloc+0x151>
c0001052:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001057:	8d 43 08             	lea    eax,[ebx+0x8]
c000105a:	e9 35 02 00 00       	jmp    c0001294 <dlmalloc+0x386>
c000105f:	89 f8                	mov    eax,edi
c0001061:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001067:	77 19                	ja     c0001082 <dlmalloc+0x174>
c0001069:	c1 e8 03             	shr    eax,0x3
c000106c:	8d 14 00             	lea    edx,[eax+eax*1]
c000106f:	83 c2 0d             	add    edx,0xd
c0001072:	8d 2c 95 98 43 02 c0 	lea    ebp,[edx*4-0x3ffdbc68]
c0001079:	8b 14 95 a0 43 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbc60]
c0001080:	eb 46                	jmp    c00010c8 <dlmalloc+0x1ba>
c0001082:	e8 be f9 ff ff       	call   c0000a45 <largebin_index>
c0001087:	8d 14 00             	lea    edx,[eax+eax*1]
c000108a:	83 c2 0d             	add    edx,0xd
c000108d:	8d 0c 95 a0 43 02 c0 	lea    ecx,[edx*4-0x3ffdbc60]
c0001094:	8b 14 95 a0 43 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbc60]
c000109b:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000109e:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00010a2:	89 d5                	mov    ebp,edx
c00010a4:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00010a8:	74 1e                	je     c00010c8 <dlmalloc+0x1ba>
c00010aa:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00010ad:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00010b0:	77 12                	ja     c00010c4 <dlmalloc+0x1b6>
c00010b2:	83 cf 01             	or     edi,0x1
c00010b5:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010b8:	76 05                	jbe    c00010bf <dlmalloc+0x1b1>
c00010ba:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010bd:	eb f6                	jmp    c00010b5 <dlmalloc+0x1a7>
c00010bf:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010c2:	eb 04                	jmp    c00010c8 <dlmalloc+0x1ba>
c00010c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010c8:	89 c7                	mov    edi,eax
c00010ca:	88 c1                	mov    cl,al
c00010cc:	c1 ff 05             	sar    edi,0x5
c00010cf:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010d3:	bf 01 00 00 00       	mov    edi,0x1
c00010d8:	d3 e7                	shl    edi,cl
c00010da:	89 f8                	mov    eax,edi
c00010dc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010e0:	09 04 bd d4 46 02 c0 	or     DWORD PTR [edi*4-0x3ffdb92c],eax
c00010e7:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010ea:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010ed:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010f0:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010f3:	e9 db fe ff ff       	jmp    c0000fd3 <dlmalloc+0xc5>
c00010f8:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010fe:	76 78                	jbe    c0001178 <dlmalloc+0x26a>
c0001100:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001104:	8d 04 c5 d4 43 02 c0 	lea    eax,[eax*8-0x3ffdbc2c]
c000110b:	8d 48 f8             	lea    ecx,[eax-0x8]
c000110e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001111:	39 ca                	cmp    edx,ecx
c0001113:	74 63                	je     c0001178 <dlmalloc+0x26a>
c0001115:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001118:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000111b:	83 e3 fc             	and    ebx,0xfffffffc
c000111e:	39 de                	cmp    esi,ebx
c0001120:	77 52                	ja     c0001174 <dlmalloc+0x266>
c0001122:	89 df                	mov    edi,ebx
c0001124:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001127:	29 f7                	sub    edi,esi
c0001129:	01 d3                	add    ebx,edx
c000112b:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000112e:	83 ff 0f             	cmp    edi,0xf
c0001131:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001134:	8d 42 08             	lea    eax,[edx+0x8]
c0001137:	77 09                	ja     c0001142 <dlmalloc+0x234>
c0001139:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000113d:	e9 52 01 00 00       	jmp    c0001294 <dlmalloc+0x386>
c0001142:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001145:	83 ce 01             	or     esi,0x1
c0001148:	89 0d dc 43 02 c0    	mov    DWORD PTR ds:0xc00243dc,ecx
c000114e:	89 0d e0 43 02 c0    	mov    DWORD PTR ds:0xc00243e0,ecx
c0001154:	c7 41 08 d4 43 02 c0 	mov    DWORD PTR [ecx+0x8],0xc00243d4
c000115b:	c7 41 0c d4 43 02 c0 	mov    DWORD PTR [ecx+0xc],0xc00243d4
c0001162:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001165:	89 fa                	mov    edx,edi
c0001167:	83 ca 01             	or     edx,0x1
c000116a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000116d:	89 3b                	mov    DWORD PTR [ebx],edi
c000116f:	e9 20 01 00 00       	jmp    c0001294 <dlmalloc+0x386>
c0001174:	89 c2                	mov    edx,eax
c0001176:	eb 99                	jmp    c0001111 <dlmalloc+0x203>
c0001178:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000117c:	b8 01 00 00 00       	mov    eax,0x1
c0001181:	41                   	inc    ecx
c0001182:	89 cb                	mov    ebx,ecx
c0001184:	c1 eb 05             	shr    ebx,0x5
c0001187:	8d 14 cd cc 43 02 c0 	lea    edx,[ecx*8-0x3ffdbc34]
c000118e:	d3 e0                	shl    eax,cl
c0001190:	8b 3c 9d d4 46 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdb92c]
c0001197:	39 f8                	cmp    eax,edi
c0001199:	77 04                	ja     c000119f <dlmalloc+0x291>
c000119b:	85 c0                	test   eax,eax
c000119d:	75 26                	jne    c00011c5 <dlmalloc+0x2b7>
c000119f:	43                   	inc    ebx
c00011a0:	83 fb 02             	cmp    ebx,0x2
c00011a3:	0f 87 a6 00 00 00    	ja     c000124f <dlmalloc+0x341>
c00011a9:	8b 3c 9d d4 46 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdb92c]
c00011b0:	85 ff                	test   edi,edi
c00011b2:	74 eb                	je     c000119f <dlmalloc+0x291>
c00011b4:	89 d8                	mov    eax,ebx
c00011b6:	c1 e0 06             	shl    eax,0x6
c00011b9:	8d 14 85 cc 43 02 c0 	lea    edx,[eax*4-0x3ffdbc34]
c00011c0:	b8 01 00 00 00       	mov    eax,0x1
c00011c5:	85 f8                	test   eax,edi
c00011c7:	75 07                	jne    c00011d0 <dlmalloc+0x2c2>
c00011c9:	83 c2 08             	add    edx,0x8
c00011cc:	01 c0                	add    eax,eax
c00011ce:	eb f5                	jmp    c00011c5 <dlmalloc+0x2b7>
c00011d0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011d3:	39 ca                	cmp    edx,ecx
c00011d5:	75 14                	jne    c00011eb <dlmalloc+0x2dd>
c00011d7:	89 c1                	mov    ecx,eax
c00011d9:	83 c2 08             	add    edx,0x8
c00011dc:	f7 d1                	not    ecx
c00011de:	21 cf                	and    edi,ecx
c00011e0:	01 c0                	add    eax,eax
c00011e2:	89 3c 9d d4 46 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdb92c],edi
c00011e9:	eb ac                	jmp    c0001197 <dlmalloc+0x289>
c00011eb:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011ee:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011f1:	83 e0 fc             	and    eax,0xfffffffc
c00011f4:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011f7:	89 c3                	mov    ebx,eax
c00011f9:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011fc:	29 f3                	sub    ebx,esi
c00011fe:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001201:	83 fb 0f             	cmp    ebx,0xf
c0001204:	8d 41 08             	lea    eax,[ecx+0x8]
c0001207:	77 09                	ja     c0001212 <dlmalloc+0x304>
c0001209:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000120d:	e9 82 00 00 00       	jmp    c0001294 <dlmalloc+0x386>
c0001212:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001215:	81 fe ff 00 00 00    	cmp    esi,0xff
c000121b:	89 3d dc 43 02 c0    	mov    DWORD PTR ds:0xc00243dc,edi
c0001221:	89 3d e0 43 02 c0    	mov    DWORD PTR ds:0xc00243e0,edi
c0001227:	c7 47 08 d4 43 02 c0 	mov    DWORD PTR [edi+0x8],0xc00243d4
c000122e:	c7 47 0c d4 43 02 c0 	mov    DWORD PTR [edi+0xc],0xc00243d4
c0001235:	77 06                	ja     c000123d <dlmalloc+0x32f>
c0001237:	89 3d d0 43 02 c0    	mov    DWORD PTR ds:0xc00243d0,edi
c000123d:	83 ce 01             	or     esi,0x1
c0001240:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001243:	89 d9                	mov    ecx,ebx
c0001245:	83 c9 01             	or     ecx,0x1
c0001248:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000124b:	89 1a                	mov    DWORD PTR [edx],ebx
c000124d:	eb 45                	jmp    c0001294 <dlmalloc+0x386>
c000124f:	a1 cc 43 02 c0       	mov    eax,ds:0xc00243cc
c0001254:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001257:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000125a:	83 e2 fc             	and    edx,0xfffffffc
c000125d:	39 d1                	cmp    ecx,edx
c000125f:	77 1e                	ja     c000127f <dlmalloc+0x371>
c0001261:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001264:	89 f3                	mov    ebx,esi
c0001266:	29 f2                	sub    edx,esi
c0001268:	83 cb 01             	or     ebx,0x1
c000126b:	83 ca 01             	or     edx,0x1
c000126e:	89 0d cc 43 02 c0    	mov    DWORD PTR ds:0xc00243cc,ecx
c0001274:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001277:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000127a:	e9 2d fd ff ff       	jmp    c0000fac <dlmalloc+0x9e>
c000127f:	83 c4 1c             	add    esp,0x1c
c0001282:	89 f0                	mov    eax,esi
c0001284:	ba a0 43 02 c0       	mov    edx,0xc00243a0
c0001289:	5b                   	pop    ebx
c000128a:	5e                   	pop    esi
c000128b:	5f                   	pop    edi
c000128c:	5d                   	pop    ebp
c000128d:	e9 13 fa ff ff       	jmp    c0000ca5 <sYSMALLOc>
c0001292:	31 c0                	xor    eax,eax
c0001294:	83 c4 1c             	add    esp,0x1c
c0001297:	5b                   	pop    ebx
c0001298:	5e                   	pop    esi
c0001299:	5f                   	pop    edi
c000129a:	5d                   	pop    ebp
c000129b:	c3                   	ret    

c000129c <iALLOc>:
c000129c:	55                   	push   ebp
c000129d:	89 c5                	mov    ebp,eax
c000129f:	57                   	push   edi
c00012a0:	56                   	push   esi
c00012a1:	53                   	push   ebx
c00012a2:	83 ec 2c             	sub    esp,0x2c
c00012a5:	83 3d a0 43 02 c0 00 	cmp    DWORD PTR ds:0xc00243a0,0x0
c00012ac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00012b0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00012b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012b8:	75 12                	jne    c00012cc <iALLOc+0x30>
c00012ba:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c00012bf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012c3:	e8 01 f8 ff ff       	call   c0000ac9 <malloc_consolidate>
c00012c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012cc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012d1:	74 12                	je     c00012e5 <iALLOc+0x49>
c00012d3:	85 ed                	test   ebp,ebp
c00012d5:	0f 84 64 01 00 00    	je     c000143f <iALLOc+0x1a3>
c00012db:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012e3:	eb 33                	jmp    c0001318 <iALLOc+0x7c>
c00012e5:	85 ed                	test   ebp,ebp
c00012e7:	75 14                	jne    c00012fd <iALLOc+0x61>
c00012e9:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012f1:	83 c4 2c             	add    esp,0x2c
c00012f4:	5b                   	pop    ebx
c00012f5:	5e                   	pop    esi
c00012f6:	5f                   	pop    edi
c00012f7:	5d                   	pop    ebp
c00012f8:	e9 11 fc ff ff       	jmp    c0000f0e <dlmalloc>
c00012fd:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001304:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000130c:	83 f8 0f             	cmp    eax,0xf
c000130f:	76 07                	jbe    c0001318 <iALLOc+0x7c>
c0001311:	83 e0 f8             	and    eax,0xfffffff8
c0001314:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001318:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000131d:	75 09                	jne    c0001328 <iALLOc+0x8c>
c000131f:	89 d0                	mov    eax,edx
c0001321:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001324:	31 f6                	xor    esi,esi
c0001326:	eb 3b                	jmp    c0001363 <iALLOc+0xc7>
c0001328:	8b 02                	mov    eax,DWORD PTR [edx]
c000132a:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001332:	83 c0 0b             	add    eax,0xb
c0001335:	83 f8 0f             	cmp    eax,0xf
c0001338:	76 07                	jbe    c0001341 <iALLOc+0xa5>
c000133a:	83 e0 f8             	and    eax,0xfffffff8
c000133d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001341:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001345:	0f af f5             	imul   esi,ebp
c0001348:	eb 25                	jmp    c000136f <iALLOc+0xd3>
c000134a:	8b 18                	mov    ebx,DWORD PTR [eax]
c000134c:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000134f:	bb 10 00 00 00       	mov    ebx,0x10
c0001354:	83 f9 0f             	cmp    ecx,0xf
c0001357:	76 05                	jbe    c000135e <iALLOc+0xc2>
c0001359:	83 e1 f8             	and    ecx,0xfffffff8
c000135c:	89 cb                	mov    ebx,ecx
c000135e:	01 de                	add    esi,ebx
c0001360:	83 c0 04             	add    eax,0x4
c0001363:	39 c7                	cmp    edi,eax
c0001365:	75 e3                	jne    c000134a <iALLOc+0xae>
c0001367:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000136f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001373:	83 ec 0c             	sub    esp,0xc
c0001376:	8b 1d f4 46 02 c0    	mov    ebx,DWORD PTR ds:0xc00246f4
c000137c:	c7 05 f4 46 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00246f4,0x0
c0001386:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000138a:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000138e:	50                   	push   eax
c000138f:	e8 7a fb ff ff       	call   c0000f0e <dlmalloc>
c0001394:	83 c4 10             	add    esp,0x10
c0001397:	89 1d f4 46 02 c0    	mov    DWORD PTR ds:0xc00246f4,ebx
c000139d:	85 c0                	test   eax,eax
c000139f:	0f 84 92 00 00 00    	je     c0001437 <iALLOc+0x19b>
c00013a5:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00013a8:	8d 78 f8             	lea    edi,[eax-0x8]
c00013ab:	83 e3 fc             	and    ebx,0xfffffffc
c00013ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00013b2:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013b7:	74 1e                	je     c00013d7 <iALLOc+0x13b>
c00013b9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013bd:	89 d9                	mov    ecx,ebx
c00013bf:	52                   	push   edx
c00013c0:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013c4:	83 e9 04             	sub    ecx,0x4
c00013c7:	51                   	push   ecx
c00013c8:	6a 00                	push   0x0
c00013ca:	50                   	push   eax
c00013cb:	e8 fd f2 ff ff       	call   c00006cd <memset>
c00013d0:	83 c4 10             	add    esp,0x10
c00013d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013d7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013dc:	75 14                	jne    c00013f2 <iALLOc+0x156>
c00013de:	8d 04 37             	lea    eax,[edi+esi*1]
c00013e1:	29 f3                	sub    ebx,esi
c00013e3:	83 cb 01             	or     ebx,0x1
c00013e6:	8d 48 08             	lea    ecx,[eax+0x8]
c00013e9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013ec:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013f0:	89 f3                	mov    ebx,esi
c00013f2:	31 c0                	xor    eax,eax
c00013f4:	4d                   	dec    ebp
c00013f5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013f9:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013fc:	39 c5                	cmp    ebp,eax
c00013fe:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001401:	74 2c                	je     c000142f <iALLOc+0x193>
c0001403:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001407:	85 c9                	test   ecx,ecx
c0001409:	75 15                	jne    c0001420 <iALLOc+0x184>
c000140b:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000140e:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001411:	b9 10 00 00 00       	mov    ecx,0x10
c0001416:	83 fe 0f             	cmp    esi,0xf
c0001419:	76 05                	jbe    c0001420 <iALLOc+0x184>
c000141b:	83 e6 f8             	and    esi,0xfffffff8
c000141e:	89 f1                	mov    ecx,esi
c0001420:	89 ce                	mov    esi,ecx
c0001422:	29 cb                	sub    ebx,ecx
c0001424:	83 ce 01             	or     esi,0x1
c0001427:	40                   	inc    eax
c0001428:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000142b:	01 cf                	add    edi,ecx
c000142d:	eb c6                	jmp    c00013f5 <iALLOc+0x159>
c000142f:	83 cb 01             	or     ebx,0x1
c0001432:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001435:	eb 08                	jmp    c000143f <iALLOc+0x1a3>
c0001437:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000143f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001443:	83 c4 2c             	add    esp,0x2c
c0001446:	5b                   	pop    ebx
c0001447:	5e                   	pop    esi
c0001448:	5f                   	pop    edi
c0001449:	5d                   	pop    ebp
c000144a:	c3                   	ret    

c000144b <dlrealloc>:
c000144b:	55                   	push   ebp
c000144c:	57                   	push   edi
c000144d:	56                   	push   esi
c000144e:	53                   	push   ebx
c000144f:	83 ec 1c             	sub    esp,0x1c
c0001452:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001456:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000145a:	85 db                	test   ebx,ebx
c000145c:	75 10                	jne    c000146e <dlrealloc+0x23>
c000145e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001462:	83 c4 1c             	add    esp,0x1c
c0001465:	5b                   	pop    ebx
c0001466:	5e                   	pop    esi
c0001467:	5f                   	pop    edi
c0001468:	5d                   	pop    ebp
c0001469:	e9 a0 fa ff ff       	jmp    c0000f0e <dlmalloc>
c000146e:	83 f8 df             	cmp    eax,0xffffffdf
c0001471:	76 07                	jbe    c000147a <dlrealloc+0x2f>
c0001473:	31 db                	xor    ebx,ebx
c0001475:	e9 7c 01 00 00       	jmp    c00015f6 <dlrealloc+0x1ab>
c000147a:	83 c0 0b             	add    eax,0xb
c000147d:	bf 10 00 00 00       	mov    edi,0x10
c0001482:	83 f8 0f             	cmp    eax,0xf
c0001485:	76 05                	jbe    c000148c <dlrealloc+0x41>
c0001487:	83 e0 f8             	and    eax,0xfffffff8
c000148a:	89 c7                	mov    edi,eax
c000148c:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000148f:	8d 6b f8             	lea    ebp,[ebx-0x8]
c0001492:	89 c6                	mov    esi,eax
c0001494:	83 e6 fc             	and    esi,0xfffffffc
c0001497:	a8 02                	test   al,0x2
c0001499:	75 d8                	jne    c0001473 <dlrealloc+0x28>
c000149b:	39 f7                	cmp    edi,esi
c000149d:	0f 86 15 01 00 00    	jbe    c00015b8 <dlrealloc+0x16d>
c00014a3:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00014a7:	39 15 cc 43 02 c0    	cmp    DWORD PTR ds:0xc00243cc,edx
c00014ad:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00014b0:	75 33                	jne    c00014e5 <dlrealloc+0x9a>
c00014b2:	83 e1 fc             	and    ecx,0xfffffffc
c00014b5:	01 f1                	add    ecx,esi
c00014b7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014bb:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014be:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014c2:	77 49                	ja     c000150d <dlrealloc+0xc2>
c00014c4:	83 e0 01             	and    eax,0x1
c00014c7:	01 fd                	add    ebp,edi
c00014c9:	09 f8                	or     eax,edi
c00014cb:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014d2:	29 f8                	sub    eax,edi
c00014d4:	89 2d cc 43 02 c0    	mov    DWORD PTR ds:0xc00243cc,ebp
c00014da:	83 c8 01             	or     eax,0x1
c00014dd:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014e0:	e9 11 01 00 00       	jmp    c00015f6 <dlrealloc+0x1ab>
c00014e5:	89 c8                	mov    eax,ecx
c00014e7:	83 e0 fe             	and    eax,0xfffffffe
c00014ea:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014ef:	75 1c                	jne    c000150d <dlrealloc+0xc2>
c00014f1:	83 e1 fc             	and    ecx,0xfffffffc
c00014f4:	01 f1                	add    ecx,esi
c00014f6:	39 cf                	cmp    edi,ecx
c00014f8:	77 13                	ja     c000150d <dlrealloc+0xc2>
c00014fa:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014fd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001500:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001503:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	e9 ab 00 00 00       	jmp    c00015b8 <dlrealloc+0x16d>
c000150d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001511:	83 ec 0c             	sub    esp,0xc
c0001514:	8d 47 f9             	lea    eax,[edi-0x7]
c0001517:	50                   	push   eax
c0001518:	e8 f1 f9 ff ff       	call   c0000f0e <dlmalloc>
c000151d:	83 c4 10             	add    esp,0x10
c0001520:	89 c1                	mov    ecx,eax
c0001522:	85 c0                	test   eax,eax
c0001524:	0f 84 49 ff ff ff    	je     c0001473 <dlrealloc+0x28>
c000152a:	8d 40 f8             	lea    eax,[eax-0x8]
c000152d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001531:	39 c2                	cmp    edx,eax
c0001533:	75 0a                	jne    c000153f <dlrealloc+0xf4>
c0001535:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001538:	83 e0 fc             	and    eax,0xfffffffc
c000153b:	01 c6                	add    esi,eax
c000153d:	eb 79                	jmp    c00015b8 <dlrealloc+0x16d>
c000153f:	83 ee 04             	sub    esi,0x4
c0001542:	83 fe 27             	cmp    esi,0x27
c0001545:	76 16                	jbe    c000155d <dlrealloc+0x112>
c0001547:	50                   	push   eax
c0001548:	56                   	push   esi
c0001549:	53                   	push   ebx
c000154a:	51                   	push   ecx
c000154b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000154f:	e8 43 f1 ff ff       	call   c0000697 <memcpy>
c0001554:	83 c4 10             	add    esp,0x10
c0001557:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000155b:	eb 43                	jmp    c00015a0 <dlrealloc+0x155>
c000155d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000155f:	83 fe 13             	cmp    esi,0x13
c0001562:	89 01                	mov    DWORD PTR [ecx],eax
c0001564:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001567:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c000156a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000156d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001570:	76 2e                	jbe    c00015a0 <dlrealloc+0x155>
c0001572:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001575:	83 fe 1b             	cmp    esi,0x1b
c0001578:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000157b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000157e:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001581:	76 1d                	jbe    c00015a0 <dlrealloc+0x155>
c0001583:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001586:	83 fe 23             	cmp    esi,0x23
c0001589:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000158c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000158f:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c0001592:	76 0c                	jbe    c00015a0 <dlrealloc+0x155>
c0001594:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001597:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c000159a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000159d:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00015a0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a4:	83 ec 0c             	sub    esp,0xc
c00015a7:	53                   	push   ebx
c00015a8:	e8 03 f6 ff ff       	call   c0000bb0 <dlfree>
c00015ad:	83 c4 10             	add    esp,0x10
c00015b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015b4:	89 cb                	mov    ebx,ecx
c00015b6:	eb 3e                	jmp    c00015f6 <dlrealloc+0x1ab>
c00015b8:	89 f2                	mov    edx,esi
c00015ba:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015bd:	29 fa                	sub    edx,edi
c00015bf:	83 e1 01             	and    ecx,0x1
c00015c2:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015c6:	83 fa 0f             	cmp    edx,0xf
c00015c9:	77 0b                	ja     c00015d6 <dlrealloc+0x18b>
c00015cb:	09 ce                	or     esi,ecx
c00015cd:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015d0:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015d4:	eb 20                	jmp    c00015f6 <dlrealloc+0x1ab>
c00015d6:	01 fd                	add    ebp,edi
c00015d8:	83 ca 01             	or     edx,0x1
c00015db:	09 cf                	or     edi,ecx
c00015dd:	83 ec 0c             	sub    esp,0xc
c00015e0:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015e3:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c00015e6:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015ea:	83 c5 08             	add    ebp,0x8
c00015ed:	55                   	push   ebp
c00015ee:	e8 bd f5 ff ff       	call   c0000bb0 <dlfree>
c00015f3:	83 c4 10             	add    esp,0x10
c00015f6:	83 c4 1c             	add    esp,0x1c
c00015f9:	89 d8                	mov    eax,ebx
c00015fb:	5b                   	pop    ebx
c00015fc:	5e                   	pop    esi
c00015fd:	5f                   	pop    edi
c00015fe:	5d                   	pop    ebp
c00015ff:	c3                   	ret    

c0001600 <dlmemalign>:
c0001600:	55                   	push   ebp
c0001601:	57                   	push   edi
c0001602:	56                   	push   esi
c0001603:	53                   	push   ebx
c0001604:	83 ec 0c             	sub    esp,0xc
c0001607:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000160b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000160f:	83 fa 08             	cmp    edx,0x8
c0001612:	77 10                	ja     c0001624 <dlmemalign+0x24>
c0001614:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001618:	83 c4 0c             	add    esp,0xc
c000161b:	5b                   	pop    ebx
c000161c:	5e                   	pop    esi
c000161d:	5f                   	pop    edi
c000161e:	5d                   	pop    ebp
c000161f:	e9 ea f8 ff ff       	jmp    c0000f0e <dlmalloc>
c0001624:	bf 10 00 00 00       	mov    edi,0x10
c0001629:	83 fa 0f             	cmp    edx,0xf
c000162c:	76 13                	jbe    c0001641 <dlmemalign+0x41>
c000162e:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001631:	85 d1                	test   ecx,edx
c0001633:	75 04                	jne    c0001639 <dlmemalign+0x39>
c0001635:	89 d7                	mov    edi,edx
c0001637:	eb 08                	jmp    c0001641 <dlmemalign+0x41>
c0001639:	39 d7                	cmp    edi,edx
c000163b:	73 04                	jae    c0001641 <dlmemalign+0x41>
c000163d:	01 ff                	add    edi,edi
c000163f:	eb f8                	jmp    c0001639 <dlmemalign+0x39>
c0001641:	83 f8 df             	cmp    eax,0xffffffdf
c0001644:	76 07                	jbe    c000164d <dlmemalign+0x4d>
c0001646:	31 c0                	xor    eax,eax
c0001648:	e9 ce 00 00 00       	jmp    c000171b <dlmemalign+0x11b>
c000164d:	83 c0 0b             	add    eax,0xb
c0001650:	bd 10 00 00 00       	mov    ebp,0x10
c0001655:	83 f8 0f             	cmp    eax,0xf
c0001658:	76 05                	jbe    c000165f <dlmemalign+0x5f>
c000165a:	83 e0 f8             	and    eax,0xfffffff8
c000165d:	89 c5                	mov    ebp,eax
c000165f:	83 ec 0c             	sub    esp,0xc
c0001662:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001666:	50                   	push   eax
c0001667:	e8 a2 f8 ff ff       	call   c0000f0e <dlmalloc>
c000166c:	83 c4 10             	add    esp,0x10
c000166f:	89 c1                	mov    ecx,eax
c0001671:	85 c0                	test   eax,eax
c0001673:	74 d1                	je     c0001646 <dlmemalign+0x46>
c0001675:	31 d2                	xor    edx,edx
c0001677:	8d 70 f8             	lea    esi,[eax-0x8]
c000167a:	f7 f7                	div    edi
c000167c:	85 d2                	test   edx,edx
c000167e:	74 62                	je     c00016e2 <dlmemalign+0xe2>
c0001680:	89 f8                	mov    eax,edi
c0001682:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001686:	f7 d8                	neg    eax
c0001688:	21 c3                	and    ebx,eax
c000168a:	83 eb 08             	sub    ebx,0x8
c000168d:	89 d8                	mov    eax,ebx
c000168f:	29 f0                	sub    eax,esi
c0001691:	83 f8 0f             	cmp    eax,0xf
c0001694:	77 02                	ja     c0001698 <dlmemalign+0x98>
c0001696:	01 fb                	add    ebx,edi
c0001698:	89 d8                	mov    eax,ebx
c000169a:	29 f0                	sub    eax,esi
c000169c:	89 c6                	mov    esi,eax
c000169e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016a1:	89 c2                	mov    edx,eax
c00016a3:	83 e2 fc             	and    edx,0xfffffffc
c00016a6:	29 f2                	sub    edx,esi
c00016a8:	a8 02                	test   al,0x2
c00016aa:	74 10                	je     c00016bc <dlmemalign+0xbc>
c00016ac:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00016af:	83 ca 02             	or     edx,0x2
c00016b2:	8d 43 08             	lea    eax,[ebx+0x8]
c00016b5:	89 33                	mov    DWORD PTR [ebx],esi
c00016b7:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016ba:	eb 5f                	jmp    c000171b <dlmemalign+0x11b>
c00016bc:	89 d0                	mov    eax,edx
c00016be:	83 ec 0c             	sub    esp,0xc
c00016c1:	83 c8 01             	or     eax,0x1
c00016c4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016c7:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016cc:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f0                	or     eax,esi
c00016d4:	89 de                	mov    esi,ebx
c00016d6:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016d9:	51                   	push   ecx
c00016da:	e8 d1 f4 ff ff       	call   c0000bb0 <dlfree>
c00016df:	83 c4 10             	add    esp,0x10
c00016e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016e5:	a8 02                	test   al,0x2
c00016e7:	75 2f                	jne    c0001718 <dlmemalign+0x118>
c00016e9:	83 e0 fc             	and    eax,0xfffffffc
c00016ec:	8d 55 10             	lea    edx,[ebp+0x10]
c00016ef:	39 c2                	cmp    edx,eax
c00016f1:	73 25                	jae    c0001718 <dlmemalign+0x118>
c00016f3:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016f6:	29 e8                	sub    eax,ebp
c00016f8:	83 c8 01             	or     eax,0x1
c00016fb:	83 ec 0c             	sub    esp,0xc
c00016fe:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001701:	83 c2 08             	add    edx,0x8
c0001704:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001707:	83 e0 01             	and    eax,0x1
c000170a:	09 c5                	or     ebp,eax
c000170c:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000170f:	52                   	push   edx
c0001710:	e8 9b f4 ff ff       	call   c0000bb0 <dlfree>
c0001715:	83 c4 10             	add    esp,0x10
c0001718:	8d 46 08             	lea    eax,[esi+0x8]
c000171b:	83 c4 0c             	add    esp,0xc
c000171e:	5b                   	pop    ebx
c000171f:	5e                   	pop    esi
c0001720:	5f                   	pop    edi
c0001721:	5d                   	pop    ebp
c0001722:	c3                   	ret    

c0001723 <dlcalloc>:
c0001723:	53                   	push   ebx
c0001724:	83 ec 14             	sub    esp,0x14
c0001727:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000172b:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001730:	50                   	push   eax
c0001731:	e8 d8 f7 ff ff       	call   c0000f0e <dlmalloc>
c0001736:	83 c4 10             	add    esp,0x10
c0001739:	89 c3                	mov    ebx,eax
c000173b:	85 c0                	test   eax,eax
c000173d:	74 77                	je     c00017b6 <dlcalloc+0x93>
c000173f:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001742:	89 d0                	mov    eax,edx
c0001744:	83 e0 fc             	and    eax,0xfffffffc
c0001747:	80 e2 02             	and    dl,0x2
c000174a:	75 5a                	jne    c00017a6 <dlcalloc+0x83>
c000174c:	83 e8 04             	sub    eax,0x4
c000174f:	83 f8 27             	cmp    eax,0x27
c0001752:	76 03                	jbe    c0001757 <dlcalloc+0x34>
c0001754:	51                   	push   ecx
c0001755:	eb 53                	jmp    c00017aa <dlcalloc+0x87>
c0001757:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000175d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001764:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000176b:	83 f8 13             	cmp    eax,0x13
c000176e:	76 46                	jbe    c00017b6 <dlcalloc+0x93>
c0001770:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001777:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000177e:	83 f8 1b             	cmp    eax,0x1b
c0001781:	76 33                	jbe    c00017b6 <dlcalloc+0x93>
c0001783:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000178a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001791:	83 f8 23             	cmp    eax,0x23
c0001794:	76 20                	jbe    c00017b6 <dlcalloc+0x93>
c0001796:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000179d:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00017a4:	eb 10                	jmp    c00017b6 <dlcalloc+0x93>
c00017a6:	83 e8 08             	sub    eax,0x8
c00017a9:	52                   	push   edx
c00017aa:	50                   	push   eax
c00017ab:	6a 00                	push   0x0
c00017ad:	53                   	push   ebx
c00017ae:	e8 1a ef ff ff       	call   c00006cd <memset>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	83 c4 08             	add    esp,0x8
c00017b9:	89 d8                	mov    eax,ebx
c00017bb:	5b                   	pop    ebx
c00017bc:	c3                   	ret    

c00017bd <dlcfree>:
c00017bd:	e9 ee f3 ff ff       	jmp    c0000bb0 <dlfree>

c00017c2 <dlindependent_calloc>:
c00017c2:	83 ec 28             	sub    esp,0x28
c00017c5:	b9 03 00 00 00       	mov    ecx,0x3
c00017ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017da:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017de:	e8 b9 fa ff ff       	call   c000129c <iALLOc>
c00017e3:	83 c4 2c             	add    esp,0x2c
c00017e6:	c3                   	ret    

c00017e7 <dlindependent_comalloc>:
c00017e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017ef:	31 c9                	xor    ecx,ecx
c00017f1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017f5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017f9:	e9 9e fa ff ff       	jmp    c000129c <iALLOc>

c00017fe <dlvalloc>:
c00017fe:	83 ec 0c             	sub    esp,0xc
c0001801:	83 3d a0 43 02 c0 00 	cmp    DWORD PTR ds:0xc00243a0,0x0
c0001808:	75 0a                	jne    c0001814 <dlvalloc+0x16>
c000180a:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c000180f:	e8 b5 f2 ff ff       	call   c0000ac9 <malloc_consolidate>
c0001814:	50                   	push   eax
c0001815:	50                   	push   eax
c0001816:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000181a:	ff 35 fc 46 02 c0    	push   DWORD PTR ds:0xc00246fc
c0001820:	e8 db fd ff ff       	call   c0001600 <dlmemalign>
c0001825:	83 c4 1c             	add    esp,0x1c
c0001828:	c3                   	ret    

c0001829 <dlpvalloc>:
c0001829:	83 ec 0c             	sub    esp,0xc
c000182c:	83 3d a0 43 02 c0 00 	cmp    DWORD PTR ds:0xc00243a0,0x0
c0001833:	75 0a                	jne    c000183f <dlpvalloc+0x16>
c0001835:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c000183a:	e8 8a f2 ff ff       	call   c0000ac9 <malloc_consolidate>
c000183f:	52                   	push   edx
c0001840:	a1 fc 46 02 c0       	mov    eax,ds:0xc00246fc
c0001845:	52                   	push   edx
c0001846:	89 c1                	mov    ecx,eax
c0001848:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000184c:	f7 d9                	neg    ecx
c000184e:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001852:	21 ca                	and    edx,ecx
c0001854:	52                   	push   edx
c0001855:	50                   	push   eax
c0001856:	e8 a5 fd ff ff       	call   c0001600 <dlmemalign>
c000185b:	83 c4 1c             	add    esp,0x1c
c000185e:	c3                   	ret    

c000185f <dlmalloc_trim>:
c000185f:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0001864:	e8 60 f2 ff ff       	call   c0000ac9 <malloc_consolidate>
c0001869:	31 c0                	xor    eax,eax
c000186b:	c3                   	ret    

c000186c <dlmalloc_usable_size>:
c000186c:	53                   	push   ebx
c000186d:	31 c0                	xor    eax,eax
c000186f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001873:	85 c9                	test   ecx,ecx
c0001875:	74 24                	je     c000189b <dlmalloc_usable_size+0x2f>
c0001877:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000187a:	f6 c2 02             	test   dl,0x2
c000187d:	74 08                	je     c0001887 <dlmalloc_usable_size+0x1b>
c000187f:	83 e2 fc             	and    edx,0xfffffffc
c0001882:	8d 42 f8             	lea    eax,[edx-0x8]
c0001885:	eb 14                	jmp    c000189b <dlmalloc_usable_size+0x2f>
c0001887:	89 d3                	mov    ebx,edx
c0001889:	31 c0                	xor    eax,eax
c000188b:	83 e3 fe             	and    ebx,0xfffffffe
c000188e:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001893:	74 06                	je     c000189b <dlmalloc_usable_size+0x2f>
c0001895:	83 e2 fc             	and    edx,0xfffffffc
c0001898:	8d 42 fc             	lea    eax,[edx-0x4]
c000189b:	5b                   	pop    ebx
c000189c:	c3                   	ret    

c000189d <dlmallinfo>:
c000189d:	55                   	push   ebp
c000189e:	57                   	push   edi
c000189f:	56                   	push   esi
c00018a0:	53                   	push   ebx
c00018a1:	83 ec 08             	sub    esp,0x8
c00018a4:	83 3d cc 43 02 c0 00 	cmp    DWORD PTR ds:0xc00243cc,0x0
c00018ab:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00018af:	75 0a                	jne    c00018bb <dlmallinfo+0x1e>
c00018b1:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c00018b6:	e8 0e f2 ff ff       	call   c0000ac9 <malloc_consolidate>
c00018bb:	a1 cc 43 02 c0       	mov    eax,ds:0xc00243cc
c00018c0:	31 ed                	xor    ebp,ebp
c00018c2:	31 c9                	xor    ecx,ecx
c00018c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018c7:	83 e0 fc             	and    eax,0xfffffffc
c00018ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018ce:	31 c0                	xor    eax,eax
c00018d0:	8b 14 85 a4 43 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbc5c]
c00018d7:	85 d2                	test   edx,edx
c00018d9:	74 0e                	je     c00018e9 <dlmallinfo+0x4c>
c00018db:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018de:	45                   	inc    ebp
c00018df:	83 e6 fc             	and    esi,0xfffffffc
c00018e2:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018e5:	01 f1                	add    ecx,esi
c00018e7:	eb ee                	jmp    c00018d7 <dlmallinfo+0x3a>
c00018e9:	40                   	inc    eax
c00018ea:	83 f8 0a             	cmp    eax,0xa
c00018ed:	75 e1                	jne    c00018d0 <dlmallinfo+0x33>
c00018ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f3:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018fa:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018fd:	b8 d4 43 02 c0       	mov    eax,0xc00243d4
c0001902:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001905:	39 f0                	cmp    eax,esi
c0001907:	74 10                	je     c0001919 <dlmallinfo+0x7c>
c0001909:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000190c:	ff 04 24             	inc    DWORD PTR [esp]
c000190f:	83 e7 fc             	and    edi,0xfffffffc
c0001912:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001915:	01 fa                	add    edx,edi
c0001917:	eb ec                	jmp    c0001905 <dlmallinfo+0x68>
c0001919:	83 c0 08             	add    eax,0x8
c000191c:	3d cc 46 02 c0       	cmp    eax,0xc00246cc
c0001921:	75 df                	jne    c0001902 <dlmallinfo+0x65>
c0001923:	a1 08 47 02 c0       	mov    eax,ds:0xc0024708
c0001928:	8b 35 f0 46 02 c0    	mov    esi,DWORD PTR ds:0xc00246f0
c000192e:	89 03                	mov    DWORD PTR [ebx],eax
c0001930:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001933:	29 d0                	sub    eax,edx
c0001935:	8b 35 04 47 02 c0    	mov    esi,DWORD PTR ds:0xc0024704
c000193b:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000193e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001941:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001944:	8b 35 14 47 02 c0    	mov    esi,DWORD PTR ds:0xc0024714
c000194a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000194e:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001951:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001954:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001957:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000195a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000195d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001960:	83 c4 08             	add    esp,0x8
c0001963:	89 d8                	mov    eax,ebx
c0001965:	5b                   	pop    ebx
c0001966:	5e                   	pop    esi
c0001967:	5f                   	pop    edi
c0001968:	5d                   	pop    ebp
c0001969:	c2 04 00             	ret    0x4

c000196c <dlmalloc_stats>:
c000196c:	83 ec 30             	sub    esp,0x30
c000196f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001973:	50                   	push   eax
c0001974:	e8 24 ff ff ff       	call   c000189d <dlmallinfo>
c0001979:	83 c4 30             	add    esp,0x30
c000197c:	c3                   	ret    

c000197d <dlmallopt>:
c000197d:	56                   	push   esi
c000197e:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0001983:	53                   	push   ebx
c0001984:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001988:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000198c:	e8 38 f1 ff ff       	call   c0000ac9 <malloc_consolidate>
c0001991:	8d 46 04             	lea    eax,[esi+0x4]
c0001994:	83 f8 05             	cmp    eax,0x5
c0001997:	77 67                	ja     c0001a00 <dlmallopt+0x83>
c0001999:	ff 24 85 24 04 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfbdc]
c00019a0:	83 fb 50             	cmp    ebx,0x50
c00019a3:	77 5b                	ja     c0001a00 <dlmallopt+0x83>
c00019a5:	ba 08 00 00 00       	mov    edx,0x8
c00019aa:	85 db                	test   ebx,ebx
c00019ac:	74 12                	je     c00019c0 <dlmallopt+0x43>
c00019ae:	83 c3 0b             	add    ebx,0xb
c00019b1:	ba 10 00 00 00       	mov    edx,0x10
c00019b6:	83 fb 0f             	cmp    ebx,0xf
c00019b9:	76 05                	jbe    c00019c0 <dlmallopt+0x43>
c00019bb:	89 da                	mov    edx,ebx
c00019bd:	83 e2 f8             	and    edx,0xfffffff8
c00019c0:	a1 a0 43 02 c0       	mov    eax,ds:0xc00243a0
c00019c5:	83 e0 03             	and    eax,0x3
c00019c8:	09 d0                	or     eax,edx
c00019ca:	a3 a0 43 02 c0       	mov    ds:0xc00243a0,eax
c00019cf:	eb 31                	jmp    c0001a02 <dlmallopt+0x85>
c00019d1:	89 1d e4 46 02 c0    	mov    DWORD PTR ds:0xc00246e4,ebx
c00019d7:	eb 06                	jmp    c00019df <dlmallopt+0x62>
c00019d9:	89 1d e8 46 02 c0    	mov    DWORD PTR ds:0xc00246e8,ebx
c00019df:	be 01 00 00 00       	mov    esi,0x1
c00019e4:	eb 1c                	jmp    c0001a02 <dlmallopt+0x85>
c00019e6:	89 1d ec 46 02 c0    	mov    DWORD PTR ds:0xc00246ec,ebx
c00019ec:	eb f1                	jmp    c00019df <dlmallopt+0x62>
c00019ee:	31 f6                	xor    esi,esi
c00019f0:	85 db                	test   ebx,ebx
c00019f2:	75 0e                	jne    c0001a02 <dlmallopt+0x85>
c00019f4:	c7 05 f4 46 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00246f4,0x0
c00019fe:	eb df                	jmp    c00019df <dlmallopt+0x62>
c0001a00:	31 f6                	xor    esi,esi
c0001a02:	5b                   	pop    ebx
c0001a03:	89 f0                	mov    eax,esi
c0001a05:	5e                   	pop    esi
c0001a06:	c3                   	ret    

c0001a07 <disk_status>:
c0001a07:	31 c0                	xor    eax,eax
c0001a09:	c3                   	ret    

c0001a0a <disk_initialize>:
c0001a0a:	31 c0                	xor    eax,eax
c0001a0c:	c3                   	ret    

c0001a0d <disk_read>:
c0001a0d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a12:	0f b6 04 85 c0 5c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda340]
c0001a1a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a1e:	e9 a3 8d 01 00       	jmp    c001a7c6 <fatWrapperReadDisk>

c0001a23 <disk_write>:
c0001a23:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a28:	0f b6 04 85 c0 5c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda340]
c0001a30:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a34:	e9 d8 8d 01 00       	jmp    c001a811 <fatWrapperWriteDisk>

c0001a39 <disk_ioctl>:
c0001a39:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a42:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a47:	0f b6 04 85 c0 5c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda340]
c0001a4f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a53:	e9 04 8e 01 00       	jmp    c001a85c <fatWrapperIoctl>

c0001a58 <ld_word>:
c0001a58:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a5c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a5f:	c1 e2 08             	shl    edx,0x8
c0001a62:	09 d0                	or     eax,edx
c0001a64:	c3                   	ret    

c0001a65 <ld_dword>:
c0001a65:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a69:	89 d1                	mov    ecx,edx
c0001a6b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a6f:	c1 e1 08             	shl    ecx,0x8
c0001a72:	09 ca                	or     edx,ecx
c0001a74:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a77:	c1 e2 08             	shl    edx,0x8
c0001a7a:	09 d0                	or     eax,edx
c0001a7c:	c3                   	ret    

c0001a7d <ld_qword>:
c0001a7d:	57                   	push   edi
c0001a7e:	56                   	push   esi
c0001a7f:	53                   	push   ebx
c0001a80:	31 db                	xor    ebx,ebx
c0001a82:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a85:	89 df                	mov    edi,ebx
c0001a87:	89 ce                	mov    esi,ecx
c0001a89:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a8d:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a91:	c1 e6 08             	shl    esi,0x8
c0001a94:	09 f2                	or     edx,esi
c0001a96:	89 d6                	mov    esi,edx
c0001a98:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a9c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001aa0:	c1 e6 08             	shl    esi,0x8
c0001aa3:	09 f2                	or     edx,esi
c0001aa5:	89 d6                	mov    esi,edx
c0001aa7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001aab:	0f a4 f7 08          	shld   edi,esi,0x8
c0001aaf:	c1 e6 08             	shl    esi,0x8
c0001ab2:	89 fb                	mov    ebx,edi
c0001ab4:	09 f2                	or     edx,esi
c0001ab6:	89 d1                	mov    ecx,edx
c0001ab8:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001abc:	89 da                	mov    edx,ebx
c0001abe:	5b                   	pop    ebx
c0001abf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ac2:	c1 e1 08             	shl    ecx,0x8
c0001ac5:	5e                   	pop    esi
c0001ac6:	09 c8                	or     eax,ecx
c0001ac8:	5f                   	pop    edi
c0001ac9:	c3                   	ret    

c0001aca <st_word>:
c0001aca:	66 89 10             	mov    WORD PTR [eax],dx
c0001acd:	c3                   	ret    

c0001ace <st_dword>:
c0001ace:	89 10                	mov    DWORD PTR [eax],edx
c0001ad0:	c3                   	ret    

c0001ad1 <st_qword>:
c0001ad1:	89 10                	mov    DWORD PTR [eax],edx
c0001ad3:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ad6:	c3                   	ret    

c0001ad7 <mem_cpy>:
c0001ad7:	85 c9                	test   ecx,ecx
c0001ad9:	74 10                	je     c0001aeb <mem_cpy+0x14>
c0001adb:	57                   	push   edi
c0001adc:	01 c1                	add    ecx,eax
c0001ade:	56                   	push   esi
c0001adf:	89 c7                	mov    edi,eax
c0001ae1:	89 d6                	mov    esi,edx
c0001ae3:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ae4:	39 f9                	cmp    ecx,edi
c0001ae6:	75 fb                	jne    c0001ae3 <mem_cpy+0xc>
c0001ae8:	5e                   	pop    esi
c0001ae9:	5f                   	pop    edi
c0001aea:	c3                   	ret    
c0001aeb:	c3                   	ret    

c0001aec <mem_set>:
c0001aec:	01 c1                	add    ecx,eax
c0001aee:	40                   	inc    eax
c0001aef:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001af2:	39 c8                	cmp    eax,ecx
c0001af4:	75 f8                	jne    c0001aee <mem_set+0x2>
c0001af6:	c3                   	ret    

c0001af7 <mem_cmp>:
c0001af7:	57                   	push   edi
c0001af8:	56                   	push   esi
c0001af9:	89 c6                	mov    esi,eax
c0001afb:	53                   	push   ebx
c0001afc:	46                   	inc    esi
c0001afd:	42                   	inc    edx
c0001afe:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001b02:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001b06:	29 fb                	sub    ebx,edi
c0001b08:	89 cf                	mov    edi,ecx
c0001b0a:	29 f7                	sub    edi,esi
c0001b0c:	01 c7                	add    edi,eax
c0001b0e:	74 04                	je     c0001b14 <mem_cmp+0x1d>
c0001b10:	85 db                	test   ebx,ebx
c0001b12:	74 e8                	je     c0001afc <mem_cmp+0x5>
c0001b14:	89 d8                	mov    eax,ebx
c0001b16:	5b                   	pop    ebx
c0001b17:	5e                   	pop    esi
c0001b18:	5f                   	pop    edi
c0001b19:	c3                   	ret    

c0001b1a <chk_chr>:
c0001b1a:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b1d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b20:	74 07                	je     c0001b29 <chk_chr+0xf>
c0001b22:	39 d1                	cmp    ecx,edx
c0001b24:	74 03                	je     c0001b29 <chk_chr+0xf>
c0001b26:	40                   	inc    eax
c0001b27:	eb f1                	jmp    c0001b1a <chk_chr>
c0001b29:	89 c8                	mov    eax,ecx
c0001b2b:	c3                   	ret    

c0001b2c <dbc_1st>:
c0001b2c:	31 c0                	xor    eax,eax
c0001b2e:	c3                   	ret    

c0001b2f <dbc_2nd>:
c0001b2f:	31 c0                	xor    eax,eax
c0001b31:	c3                   	ret    

c0001b32 <tchar2uni>:
c0001b32:	57                   	push   edi
c0001b33:	89 c7                	mov    edi,eax
c0001b35:	56                   	push   esi
c0001b36:	53                   	push   ebx
c0001b37:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b39:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b3b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b3e:	84 c9                	test   cl,cl
c0001b40:	78 0a                	js     c0001b4c <tchar2uni+0x1a>
c0001b42:	0f b6 d1             	movzx  edx,cl
c0001b45:	89 f3                	mov    ebx,esi
c0001b47:	e9 9f 00 00 00       	jmp    c0001beb <tchar2uni+0xb9>
c0001b4c:	88 ca                	mov    dl,cl
c0001b4e:	83 e2 e0             	and    edx,0xffffffe0
c0001b51:	80 fa c0             	cmp    dl,0xc0
c0001b54:	75 0c                	jne    c0001b62 <tchar2uni+0x30>
c0001b56:	89 ca                	mov    edx,ecx
c0001b58:	b9 01 00 00 00       	mov    ecx,0x1
c0001b5d:	83 e2 1f             	and    edx,0x1f
c0001b60:	eb 2e                	jmp    c0001b90 <tchar2uni+0x5e>
c0001b62:	88 ca                	mov    dl,cl
c0001b64:	83 e2 f0             	and    edx,0xfffffff0
c0001b67:	80 fa e0             	cmp    dl,0xe0
c0001b6a:	75 0c                	jne    c0001b78 <tchar2uni+0x46>
c0001b6c:	89 ca                	mov    edx,ecx
c0001b6e:	b9 02 00 00 00       	mov    ecx,0x2
c0001b73:	83 e2 0f             	and    edx,0xf
c0001b76:	eb 18                	jmp    c0001b90 <tchar2uni+0x5e>
c0001b78:	88 ca                	mov    dl,cl
c0001b7a:	83 e2 f8             	and    edx,0xfffffff8
c0001b7d:	88 d0                	mov    al,dl
c0001b7f:	83 ca ff             	or     edx,0xffffffff
c0001b82:	3c f0                	cmp    al,0xf0
c0001b84:	75 6c                	jne    c0001bf2 <tchar2uni+0xc0>
c0001b86:	89 ca                	mov    edx,ecx
c0001b88:	b9 03 00 00 00       	mov    ecx,0x3
c0001b8d:	83 e2 07             	and    edx,0x7
c0001b90:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b94:	46                   	inc    esi
c0001b95:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b98:	88 c8                	mov    al,cl
c0001b9a:	83 e0 c0             	and    eax,0xffffffc0
c0001b9d:	3c 80                	cmp    al,0x80
c0001b9f:	75 4e                	jne    c0001bef <tchar2uni+0xbd>
c0001ba1:	c1 e2 06             	shl    edx,0x6
c0001ba4:	83 e1 3f             	and    ecx,0x3f
c0001ba7:	09 ca                	or     edx,ecx
c0001ba9:	39 de                	cmp    esi,ebx
c0001bab:	75 e7                	jne    c0001b94 <tchar2uni+0x62>
c0001bad:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001bb3:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001bb9:	76 34                	jbe    c0001bef <tchar2uni+0xbd>
c0001bbb:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001bbe:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001bc4:	77 29                	ja     c0001bef <tchar2uni+0xbd>
c0001bc6:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bcc:	76 1d                	jbe    c0001beb <tchar2uni+0xb9>
c0001bce:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bd4:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bda:	c1 e1 06             	shl    ecx,0x6
c0001bdd:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001be3:	09 ca                	or     edx,ecx
c0001be5:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001beb:	89 1f                	mov    DWORD PTR [edi],ebx
c0001bed:	eb 03                	jmp    c0001bf2 <tchar2uni+0xc0>
c0001bef:	83 ca ff             	or     edx,0xffffffff
c0001bf2:	5b                   	pop    ebx
c0001bf3:	89 d0                	mov    eax,edx
c0001bf5:	5e                   	pop    esi
c0001bf6:	5f                   	pop    edi
c0001bf7:	c3                   	ret    

c0001bf8 <put_utf>:
c0001bf8:	53                   	push   ebx
c0001bf9:	83 f8 7f             	cmp    eax,0x7f
c0001bfc:	89 c3                	mov    ebx,eax
c0001bfe:	b0 00                	mov    al,0x0
c0001c00:	77 11                	ja     c0001c13 <put_utf+0x1b>
c0001c02:	85 c9                	test   ecx,ecx
c0001c04:	0f 84 e5 00 00 00    	je     c0001cef <put_utf+0xf7>
c0001c0a:	88 1a                	mov    BYTE PTR [edx],bl
c0001c0c:	b0 01                	mov    al,0x1
c0001c0e:	e9 dc 00 00 00       	jmp    c0001cef <put_utf+0xf7>
c0001c13:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c19:	77 23                	ja     c0001c3e <put_utf+0x46>
c0001c1b:	83 f9 01             	cmp    ecx,0x1
c0001c1e:	0f 86 cb 00 00 00    	jbe    c0001cef <put_utf+0xf7>
c0001c24:	89 d8                	mov    eax,ebx
c0001c26:	83 e3 3f             	and    ebx,0x3f
c0001c29:	c1 e8 06             	shr    eax,0x6
c0001c2c:	83 cb 80             	or     ebx,0xffffff80
c0001c2f:	83 c8 c0             	or     eax,0xffffffc0
c0001c32:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c35:	88 02                	mov    BYTE PTR [edx],al
c0001c37:	b0 02                	mov    al,0x2
c0001c39:	e9 b1 00 00 00       	jmp    c0001cef <put_utf+0xf7>
c0001c3e:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c44:	77 40                	ja     c0001c86 <put_utf+0x8e>
c0001c46:	83 f9 02             	cmp    ecx,0x2
c0001c49:	0f 86 a0 00 00 00    	jbe    c0001cef <put_utf+0xf7>
c0001c4f:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c55:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c5b:	0f 86 8e 00 00 00    	jbe    c0001cef <put_utf+0xf7>
c0001c61:	89 d8                	mov    eax,ebx
c0001c63:	c1 e8 0c             	shr    eax,0xc
c0001c66:	83 c8 e0             	or     eax,0xffffffe0
c0001c69:	88 02                	mov    BYTE PTR [edx],al
c0001c6b:	89 d8                	mov    eax,ebx
c0001c6d:	c1 e8 06             	shr    eax,0x6
c0001c70:	83 e3 3f             	and    ebx,0x3f
c0001c73:	83 e0 3f             	and    eax,0x3f
c0001c76:	83 cb 80             	or     ebx,0xffffff80
c0001c79:	83 c8 80             	or     eax,0xffffff80
c0001c7c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c7f:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c82:	b0 03                	mov    al,0x3
c0001c84:	eb 69                	jmp    c0001cef <put_utf+0xf7>
c0001c86:	83 f9 03             	cmp    ecx,0x3
c0001c89:	76 64                	jbe    c0001cef <put_utf+0xf7>
c0001c8b:	89 d9                	mov    ecx,ebx
c0001c8d:	66 31 c9             	xor    cx,cx
c0001c90:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c96:	0f b7 c3             	movzx  eax,bx
c0001c99:	c1 e9 06             	shr    ecx,0x6
c0001c9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ca2:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001ca8:	77 43                	ja     c0001ced <put_utf+0xf5>
c0001caa:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001cb0:	77 3b                	ja     c0001ced <put_utf+0xf5>
c0001cb2:	09 cb                	or     ebx,ecx
c0001cb4:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001cba:	89 d8                	mov    eax,ebx
c0001cbc:	c1 e8 12             	shr    eax,0x12
c0001cbf:	83 c8 f0             	or     eax,0xfffffff0
c0001cc2:	88 02                	mov    BYTE PTR [edx],al
c0001cc4:	89 d8                	mov    eax,ebx
c0001cc6:	c1 e8 0c             	shr    eax,0xc
c0001cc9:	83 e0 3f             	and    eax,0x3f
c0001ccc:	83 c8 80             	or     eax,0xffffff80
c0001ccf:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cd2:	89 d8                	mov    eax,ebx
c0001cd4:	c1 e8 06             	shr    eax,0x6
c0001cd7:	83 e3 3f             	and    ebx,0x3f
c0001cda:	83 e0 3f             	and    eax,0x3f
c0001cdd:	83 cb 80             	or     ebx,0xffffff80
c0001ce0:	83 c8 80             	or     eax,0xffffff80
c0001ce3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001ce6:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ce9:	b0 04                	mov    al,0x4
c0001ceb:	eb 02                	jmp    c0001cef <put_utf+0xf7>
c0001ced:	31 c0                	xor    eax,eax
c0001cef:	5b                   	pop    ebx
c0001cf0:	c3                   	ret    

c0001cf1 <clst2sect>:
c0001cf1:	89 c1                	mov    ecx,eax
c0001cf3:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001cf6:	83 ea 02             	sub    edx,0x2
c0001cf9:	83 e8 02             	sub    eax,0x2
c0001cfc:	39 d0                	cmp    eax,edx
c0001cfe:	76 0d                	jbe    c0001d0d <clst2sect+0x1c>
c0001d00:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001d04:	f7 e2                	mul    edx
c0001d06:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001d09:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001d0c:	c3                   	ret    
c0001d0d:	31 c0                	xor    eax,eax
c0001d0f:	31 d2                	xor    edx,edx
c0001d11:	c3                   	ret    

c0001d12 <clmt_clust>:
c0001d12:	57                   	push   edi
c0001d13:	89 cf                	mov    edi,ecx
c0001d15:	56                   	push   esi
c0001d16:	89 d6                	mov    esi,edx
c0001d18:	53                   	push   ebx
c0001d19:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d1e:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d22:	c1 ef 09             	shr    edi,0x9
c0001d25:	89 f2                	mov    edx,esi
c0001d27:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d2a:	89 f9                	mov    ecx,edi
c0001d2c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d30:	31 ff                	xor    edi,edi
c0001d32:	57                   	push   edi
c0001d33:	56                   	push   esi
c0001d34:	51                   	push   ecx
c0001d35:	52                   	push   edx
c0001d36:	e8 d1 d7 01 00       	call   c001f50c <__udivdi3>
c0001d3b:	83 c4 10             	add    esp,0x10
c0001d3e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d40:	85 d2                	test   edx,edx
c0001d42:	74 10                	je     c0001d54 <clmt_clust+0x42>
c0001d44:	39 d0                	cmp    eax,edx
c0001d46:	72 07                	jb     c0001d4f <clmt_clust+0x3d>
c0001d48:	29 d0                	sub    eax,edx
c0001d4a:	83 c3 08             	add    ebx,0x8
c0001d4d:	eb ef                	jmp    c0001d3e <clmt_clust+0x2c>
c0001d4f:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d52:	89 c2                	mov    edx,eax
c0001d54:	5b                   	pop    ebx
c0001d55:	89 d0                	mov    eax,edx
c0001d57:	5e                   	pop    esi
c0001d58:	5f                   	pop    edi
c0001d59:	c3                   	ret    

c0001d5a <pick_lfn>:
c0001d5a:	55                   	push   ebp
c0001d5b:	57                   	push   edi
c0001d5c:	56                   	push   esi
c0001d5d:	89 d6                	mov    esi,edx
c0001d5f:	53                   	push   ebx
c0001d60:	89 c3                	mov    ebx,eax
c0001d62:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d65:	e8 ee fc ff ff       	call   c0001a58 <ld_word>
c0001d6a:	66 85 c0             	test   ax,ax
c0001d6d:	74 04                	je     c0001d73 <pick_lfn+0x19>
c0001d6f:	31 c0                	xor    eax,eax
c0001d71:	eb 5c                	jmp    c0001dcf <pick_lfn+0x75>
c0001d73:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d76:	83 e1 bf             	and    ecx,0xffffffbf
c0001d79:	bd 01 00 00 00       	mov    ebp,0x1
c0001d7e:	49                   	dec    ecx
c0001d7f:	31 ff                	xor    edi,edi
c0001d81:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d84:	0f b6 87 40 05 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdfac0]
c0001d8b:	01 f0                	add    eax,esi
c0001d8d:	e8 c6 fc ff ff       	call   c0001a58 <ld_word>
c0001d92:	66 85 ed             	test   bp,bp
c0001d95:	74 11                	je     c0001da8 <pick_lfn+0x4e>
c0001d97:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d9d:	77 d0                	ja     c0001d6f <pick_lfn+0x15>
c0001d9f:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001da3:	89 c5                	mov    ebp,eax
c0001da5:	41                   	inc    ecx
c0001da6:	eb 04                	jmp    c0001dac <pick_lfn+0x52>
c0001da8:	66 40                	inc    ax
c0001daa:	75 c3                	jne    c0001d6f <pick_lfn+0x15>
c0001dac:	47                   	inc    edi
c0001dad:	83 ff 0d             	cmp    edi,0xd
c0001db0:	75 d2                	jne    c0001d84 <pick_lfn+0x2a>
c0001db2:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001db5:	74 13                	je     c0001dca <pick_lfn+0x70>
c0001db7:	66 85 ed             	test   bp,bp
c0001dba:	74 0e                	je     c0001dca <pick_lfn+0x70>
c0001dbc:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001dc2:	77 ab                	ja     c0001d6f <pick_lfn+0x15>
c0001dc4:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001dca:	b8 01 00 00 00       	mov    eax,0x1
c0001dcf:	5b                   	pop    ebx
c0001dd0:	5e                   	pop    esi
c0001dd1:	5f                   	pop    edi
c0001dd2:	5d                   	pop    ebp
c0001dd3:	c3                   	ret    

c0001dd4 <put_lfn>:
c0001dd4:	55                   	push   ebp
c0001dd5:	31 ed                	xor    ebp,ebp
c0001dd7:	57                   	push   edi
c0001dd8:	89 d7                	mov    edi,edx
c0001dda:	56                   	push   esi
c0001ddb:	31 f6                	xor    esi,esi
c0001ddd:	53                   	push   ebx
c0001dde:	83 ec 08             	sub    esp,0x8
c0001de1:	89 04 24             	mov    DWORD PTR [esp],eax
c0001de4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001de8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001deb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001df1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001df4:	31 d2                	xor    edx,edx
c0001df6:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001dfa:	e8 cb fc ff ff       	call   c0001aca <st_word>
c0001dff:	0f b6 d9             	movzx  ebx,cl
c0001e02:	4b                   	dec    ebx
c0001e03:	6b db 0d             	imul   ebx,ebx,0xd
c0001e06:	66 83 fe ff          	cmp    si,0xffff
c0001e0a:	74 08                	je     c0001e14 <put_lfn+0x40>
c0001e0c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e0f:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e13:	43                   	inc    ebx
c0001e14:	0f b6 85 40 05 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdfac0]
c0001e1b:	0f b7 d6             	movzx  edx,si
c0001e1e:	01 f8                	add    eax,edi
c0001e20:	e8 a5 fc ff ff       	call   c0001aca <st_word>
c0001e25:	66 85 f6             	test   si,si
c0001e28:	75 03                	jne    c0001e2d <put_lfn+0x59>
c0001e2a:	83 ce ff             	or     esi,0xffffffff
c0001e2d:	45                   	inc    ebp
c0001e2e:	83 fd 0d             	cmp    ebp,0xd
c0001e31:	75 d3                	jne    c0001e06 <put_lfn+0x32>
c0001e33:	66 46                	inc    si
c0001e35:	74 0a                	je     c0001e41 <put_lfn+0x6d>
c0001e37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e3a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e3f:	75 09                	jne    c0001e4a <put_lfn+0x76>
c0001e41:	88 c8                	mov    al,cl
c0001e43:	83 c8 40             	or     eax,0x40
c0001e46:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e4a:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e4e:	88 07                	mov    BYTE PTR [edi],al
c0001e50:	83 c4 08             	add    esp,0x8
c0001e53:	5b                   	pop    ebx
c0001e54:	5e                   	pop    esi
c0001e55:	5f                   	pop    edi
c0001e56:	5d                   	pop    ebp
c0001e57:	c3                   	ret    

c0001e58 <gen_numname>:
c0001e58:	57                   	push   edi
c0001e59:	89 cf                	mov    edi,ecx
c0001e5b:	56                   	push   esi
c0001e5c:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e61:	53                   	push   ebx
c0001e62:	89 c6                	mov    esi,eax
c0001e64:	83 ec 10             	sub    esp,0x10
c0001e67:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e6b:	e8 67 fc ff ff       	call   c0001ad7 <mem_cpy>
c0001e70:	83 fb 05             	cmp    ebx,0x5
c0001e73:	76 2d                	jbe    c0001ea2 <gen_numname+0x4a>
c0001e75:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e78:	66 85 c0             	test   ax,ax
c0001e7b:	74 25                	je     c0001ea2 <gen_numname+0x4a>
c0001e7d:	83 c7 02             	add    edi,0x2
c0001e80:	ba 10 00 00 00       	mov    edx,0x10
c0001e85:	89 c1                	mov    ecx,eax
c0001e87:	01 db                	add    ebx,ebx
c0001e89:	66 d1 e8             	shr    ax,1
c0001e8c:	83 e1 01             	and    ecx,0x1
c0001e8f:	01 cb                	add    ebx,ecx
c0001e91:	0f ba e3 10          	bt     ebx,0x10
c0001e95:	73 06                	jae    c0001e9d <gen_numname+0x45>
c0001e97:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e9d:	4a                   	dec    edx
c0001e9e:	75 e5                	jne    c0001e85 <gen_numname+0x2d>
c0001ea0:	eb d3                	jmp    c0001e75 <gen_numname+0x1d>
c0001ea2:	b8 07 00 00 00       	mov    eax,0x7
c0001ea7:	88 d9                	mov    cl,bl
c0001ea9:	83 e1 0f             	and    ecx,0xf
c0001eac:	8d 51 30             	lea    edx,[ecx+0x30]
c0001eaf:	80 fa 39             	cmp    dl,0x39
c0001eb2:	76 03                	jbe    c0001eb7 <gen_numname+0x5f>
c0001eb4:	8d 51 37             	lea    edx,[ecx+0x37]
c0001eb7:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001eba:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001ebe:	89 da                	mov    edx,ebx
c0001ec0:	c1 ea 04             	shr    edx,0x4
c0001ec3:	83 fb 0f             	cmp    ebx,0xf
c0001ec6:	76 06                	jbe    c0001ece <gen_numname+0x76>
c0001ec8:	89 c8                	mov    eax,ecx
c0001eca:	89 d3                	mov    ebx,edx
c0001ecc:	eb d9                	jmp    c0001ea7 <gen_numname+0x4f>
c0001ece:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ed3:	31 d2                	xor    edx,edx
c0001ed5:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001ed8:	8d 04 16             	lea    eax,[esi+edx*1]
c0001edb:	39 ca                	cmp    edx,ecx
c0001edd:	73 18                	jae    c0001ef7 <gen_numname+0x9f>
c0001edf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ee2:	3c 20                	cmp    al,0x20
c0001ee4:	74 11                	je     c0001ef7 <gen_numname+0x9f>
c0001ee6:	e8 41 fc ff ff       	call   c0001b2c <dbc_1st>
c0001eeb:	85 c0                	test   eax,eax
c0001eed:	74 05                	je     c0001ef4 <gen_numname+0x9c>
c0001eef:	39 d3                	cmp    ebx,edx
c0001ef1:	74 04                	je     c0001ef7 <gen_numname+0x9f>
c0001ef3:	42                   	inc    edx
c0001ef4:	42                   	inc    edx
c0001ef5:	eb e1                	jmp    c0001ed8 <gen_numname+0x80>
c0001ef7:	b0 20                	mov    al,0x20
c0001ef9:	83 f9 07             	cmp    ecx,0x7
c0001efc:	77 05                	ja     c0001f03 <gen_numname+0xab>
c0001efe:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001f02:	41                   	inc    ecx
c0001f03:	42                   	inc    edx
c0001f04:	83 fa 07             	cmp    edx,0x7
c0001f07:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001f0b:	76 ea                	jbe    c0001ef7 <gen_numname+0x9f>
c0001f0d:	83 c4 10             	add    esp,0x10
c0001f10:	5b                   	pop    ebx
c0001f11:	5e                   	pop    esi
c0001f12:	5f                   	pop    edi
c0001f13:	c3                   	ret    

c0001f14 <sum_sfn>:
c0001f14:	31 c9                	xor    ecx,ecx
c0001f16:	31 d2                	xor    edx,edx
c0001f18:	d0 ca                	ror    dl,1
c0001f1a:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f1d:	41                   	inc    ecx
c0001f1e:	83 f9 0b             	cmp    ecx,0xb
c0001f21:	75 f5                	jne    c0001f18 <sum_sfn+0x4>
c0001f23:	88 d0                	mov    al,dl
c0001f25:	c3                   	ret    

c0001f26 <xdir_sum>:
c0001f26:	56                   	push   esi
c0001f27:	31 c9                	xor    ecx,ecx
c0001f29:	53                   	push   ebx
c0001f2a:	31 d2                	xor    edx,edx
c0001f2c:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f30:	43                   	inc    ebx
c0001f31:	c1 e3 05             	shl    ebx,0x5
c0001f34:	83 fa 02             	cmp    edx,0x2
c0001f37:	74 0b                	je     c0001f44 <xdir_sum+0x1e>
c0001f39:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f3d:	66 d1 c9             	ror    cx,1
c0001f40:	01 f1                	add    ecx,esi
c0001f42:	eb 05                	jmp    c0001f49 <xdir_sum+0x23>
c0001f44:	ba 03 00 00 00       	mov    edx,0x3
c0001f49:	42                   	inc    edx
c0001f4a:	39 d3                	cmp    ebx,edx
c0001f4c:	77 e6                	ja     c0001f34 <xdir_sum+0xe>
c0001f4e:	5b                   	pop    ebx
c0001f4f:	89 c8                	mov    eax,ecx
c0001f51:	5e                   	pop    esi
c0001f52:	c3                   	ret    

c0001f53 <xsum32>:
c0001f53:	d1 ca                	ror    edx,1
c0001f55:	0f b6 c0             	movzx  eax,al
c0001f58:	01 d0                	add    eax,edx
c0001f5a:	c3                   	ret    

c0001f5b <get_xfileinfo>:
c0001f5b:	55                   	push   ebp
c0001f5c:	31 c9                	xor    ecx,ecx
c0001f5e:	57                   	push   edi
c0001f5f:	bd 40 00 00 00       	mov    ebp,0x40
c0001f64:	56                   	push   esi
c0001f65:	31 ff                	xor    edi,edi
c0001f67:	53                   	push   ebx
c0001f68:	89 c6                	mov    esi,eax
c0001f6a:	83 ec 0c             	sub    esp,0xc
c0001f6d:	89 d3                	mov    ebx,edx
c0001f6f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f76:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f7a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f7d:	76 6d                	jbe    c0001fec <get_xfileinfo+0x91>
c0001f7f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f85:	76 0b                	jbe    c0001f92 <get_xfileinfo+0x37>
c0001f87:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f8b:	bf 01 00 00 00       	mov    edi,0x1
c0001f90:	eb 63                	jmp    c0001ff5 <get_xfileinfo+0x9a>
c0001f92:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f98:	75 03                	jne    c0001f9d <get_xfileinfo+0x42>
c0001f9a:	83 c5 02             	add    ebp,0x2
c0001f9d:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001fa0:	83 c5 02             	add    ebp,0x2
c0001fa3:	e8 b0 fa ff ff       	call   c0001a58 <ld_word>
c0001fa8:	ff 04 24             	inc    DWORD PTR [esp]
c0001fab:	66 85 c9             	test   cx,cx
c0001fae:	75 0d                	jne    c0001fbd <get_xfileinfo+0x62>
c0001fb0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fb6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fbb:	76 2b                	jbe    c0001fe8 <get_xfileinfo+0x8d>
c0001fbd:	c1 e1 10             	shl    ecx,0x10
c0001fc0:	ba ff 00 00 00       	mov    edx,0xff
c0001fc5:	29 fa                	sub    edx,edi
c0001fc7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fcb:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fcf:	0f b7 c0             	movzx  eax,ax
c0001fd2:	09 c8                	or     eax,ecx
c0001fd4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fd8:	e8 1b fc ff ff       	call   c0001bf8 <put_utf>
c0001fdd:	84 c0                	test   al,al
c0001fdf:	74 a6                	je     c0001f87 <get_xfileinfo+0x2c>
c0001fe1:	0f b6 c0             	movzx  eax,al
c0001fe4:	01 c7                	add    edi,eax
c0001fe6:	31 c0                	xor    eax,eax
c0001fe8:	89 c1                	mov    ecx,eax
c0001fea:	eb 8a                	jmp    c0001f76 <get_xfileinfo+0x1b>
c0001fec:	85 ff                	test   edi,edi
c0001fee:	74 97                	je     c0001f87 <get_xfileinfo+0x2c>
c0001ff0:	66 85 c9             	test   cx,cx
c0001ff3:	75 92                	jne    c0001f87 <get_xfileinfo+0x2c>
c0001ff5:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001ffa:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001ffe:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002001:	31 c0                	xor    eax,eax
c0002003:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002006:	31 d2                	xor    edx,edx
c0002008:	80 e1 10             	and    cl,0x10
c000200b:	75 08                	jne    c0002015 <get_xfileinfo+0xba>
c000200d:	8d 46 38             	lea    eax,[esi+0x38]
c0002010:	e8 68 fa ff ff       	call   c0001a7d <ld_qword>
c0002015:	89 03                	mov    DWORD PTR [ebx],eax
c0002017:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000201a:	8d 46 0c             	lea    eax,[esi+0xc]
c000201d:	e8 36 fa ff ff       	call   c0001a58 <ld_word>
c0002022:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002026:	8d 46 0e             	lea    eax,[esi+0xe]
c0002029:	e8 2a fa ff ff       	call   c0001a58 <ld_word>
c000202e:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002032:	83 c4 0c             	add    esp,0xc
c0002035:	5b                   	pop    ebx
c0002036:	5e                   	pop    esi
c0002037:	5f                   	pop    edi
c0002038:	5d                   	pop    ebp
c0002039:	c3                   	ret    

c000203a <get_ldnumber>:
c000203a:	57                   	push   edi
c000203b:	56                   	push   esi
c000203c:	53                   	push   ebx
c000203d:	83 cb ff             	or     ebx,0xffffffff
c0002040:	8b 10                	mov    edx,DWORD PTR [eax]
c0002042:	85 d2                	test   edx,edx
c0002044:	74 34                	je     c000207a <get_ldnumber+0x40>
c0002046:	89 c7                	mov    edi,eax
c0002048:	89 d1                	mov    ecx,edx
c000204a:	41                   	inc    ecx
c000204b:	8a 41 ff             	mov    al,BYTE PTR [ecx-0x1]
c000204e:	3c 1f                	cmp    al,0x1f
c0002050:	76 04                	jbe    c0002056 <get_ldnumber+0x1c>
c0002052:	3c 3a                	cmp    al,0x3a
c0002054:	75 f4                	jne    c000204a <get_ldnumber+0x10>
c0002056:	31 db                	xor    ebx,ebx
c0002058:	3c 3a                	cmp    al,0x3a
c000205a:	75 1e                	jne    c000207a <get_ldnumber+0x40>
c000205c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000205f:	83 cb ff             	or     ebx,0xffffffff
c0002062:	8d 46 d0             	lea    eax,[esi-0x30]
c0002065:	3c 09                	cmp    al,0x9
c0002067:	77 11                	ja     c000207a <get_ldnumber+0x40>
c0002069:	83 c2 02             	add    edx,0x2
c000206c:	39 d1                	cmp    ecx,edx
c000206e:	75 0a                	jne    c000207a <get_ldnumber+0x40>
c0002070:	89 f0                	mov    eax,esi
c0002072:	89 0f                	mov    DWORD PTR [edi],ecx
c0002074:	0f be d8             	movsx  ebx,al
c0002077:	83 eb 30             	sub    ebx,0x30
c000207a:	89 d8                	mov    eax,ebx
c000207c:	5b                   	pop    ebx
c000207d:	5e                   	pop    esi
c000207e:	5f                   	pop    edi
c000207f:	c3                   	ret    

c0002080 <crc32>:
c0002080:	56                   	push   esi
c0002081:	89 d6                	mov    esi,edx
c0002083:	53                   	push   ebx
c0002084:	b2 01                	mov    dl,0x1
c0002086:	bb 08 00 00 00       	mov    ebx,0x8
c000208b:	89 f1                	mov    ecx,esi
c000208d:	84 d1                	test   cl,dl
c000208f:	0f 95 c1             	setne  cl
c0002092:	0f b6 c9             	movzx  ecx,cl
c0002095:	31 c1                	xor    ecx,eax
c0002097:	89 c8                	mov    eax,ecx
c0002099:	d1 e8                	shr    eax,1
c000209b:	80 e1 01             	and    cl,0x1
c000209e:	74 05                	je     c00020a5 <crc32+0x25>
c00020a0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00020a5:	01 d2                	add    edx,edx
c00020a7:	4b                   	dec    ebx
c00020a8:	75 e1                	jne    c000208b <crc32+0xb>
c00020aa:	5b                   	pop    ebx
c00020ab:	5e                   	pop    esi
c00020ac:	c3                   	ret    

c00020ad <test_gpt_header>:
c00020ad:	55                   	push   ebp
c00020ae:	b9 10 00 00 00       	mov    ecx,0x10
c00020b3:	57                   	push   edi
c00020b4:	ba 40 04 02 c0       	mov    edx,0xc0020440
c00020b9:	56                   	push   esi
c00020ba:	31 ff                	xor    edi,edi
c00020bc:	53                   	push   ebx
c00020bd:	89 c3                	mov    ebx,eax
c00020bf:	e8 33 fa ff ff       	call   c0001af7 <mem_cmp>
c00020c4:	85 c0                	test   eax,eax
c00020c6:	75 55                	jne    c000211d <test_gpt_header+0x70>
c00020c8:	89 c7                	mov    edi,eax
c00020ca:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020cf:	83 ce ff             	or     esi,0xffffffff
c00020d2:	31 d2                	xor    edx,edx
c00020d4:	83 fd 03             	cmp    ebp,0x3
c00020d7:	76 05                	jbe    c00020de <test_gpt_header+0x31>
c00020d9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020de:	89 f0                	mov    eax,esi
c00020e0:	45                   	inc    ebp
c00020e1:	e8 9a ff ff ff       	call   c0002080 <crc32>
c00020e6:	83 fd 4c             	cmp    ebp,0x4c
c00020e9:	89 c6                	mov    esi,eax
c00020eb:	75 e5                	jne    c00020d2 <test_gpt_header+0x25>
c00020ed:	8d 43 10             	lea    eax,[ebx+0x10]
c00020f0:	e8 70 f9 ff ff       	call   c0001a65 <ld_dword>
c00020f5:	f7 d6                	not    esi
c00020f7:	39 c6                	cmp    esi,eax
c00020f9:	75 22                	jne    c000211d <test_gpt_header+0x70>
c00020fb:	8d 43 54             	lea    eax,[ebx+0x54]
c00020fe:	e8 62 f9 ff ff       	call   c0001a65 <ld_dword>
c0002103:	83 c0 80             	add    eax,0xffffff80
c0002106:	75 15                	jne    c000211d <test_gpt_header+0x70>
c0002108:	8d 43 50             	lea    eax,[ebx+0x50]
c000210b:	e8 55 f9 ff ff       	call   c0001a65 <ld_dword>
c0002110:	3d 80 00 00 00       	cmp    eax,0x80
c0002115:	0f 96 c0             	setbe  al
c0002118:	0f b6 c0             	movzx  eax,al
c000211b:	89 c7                	mov    edi,eax
c000211d:	5b                   	pop    ebx
c000211e:	89 f8                	mov    eax,edi
c0002120:	5e                   	pop    esi
c0002121:	5f                   	pop    edi
c0002122:	5d                   	pop    ebp
c0002123:	c3                   	ret    

c0002124 <make_rand>:
c0002124:	56                   	push   esi
c0002125:	85 c0                	test   eax,eax
c0002127:	53                   	push   ebx
c0002128:	75 05                	jne    c000212f <make_rand+0xb>
c000212a:	b8 01 00 00 00       	mov    eax,0x1
c000212f:	01 d1                	add    ecx,edx
c0002131:	bb 08 00 00 00       	mov    ebx,0x8
c0002136:	89 c6                	mov    esi,eax
c0002138:	d1 e8                	shr    eax,1
c000213a:	83 e6 01             	and    esi,0x1
c000213d:	85 f6                	test   esi,esi
c000213f:	74 05                	je     c0002146 <make_rand+0x22>
c0002141:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002146:	4b                   	dec    ebx
c0002147:	75 ed                	jne    c0002136 <make_rand+0x12>
c0002149:	42                   	inc    edx
c000214a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000214d:	39 ca                	cmp    edx,ecx
c000214f:	75 e0                	jne    c0002131 <make_rand+0xd>
c0002151:	5b                   	pop    ebx
c0002152:	5e                   	pop    esi
c0002153:	c3                   	ret    

c0002154 <validate>:
c0002154:	56                   	push   esi
c0002155:	89 d6                	mov    esi,edx
c0002157:	53                   	push   ebx
c0002158:	85 c0                	test   eax,eax
c000215a:	51                   	push   ecx
c000215b:	75 09                	jne    c0002166 <validate+0x12>
c000215d:	b8 09 00 00 00       	mov    eax,0x9
c0002162:	31 c9                	xor    ecx,ecx
c0002164:	eb 2f                	jmp    c0002195 <validate+0x41>
c0002166:	89 c3                	mov    ebx,eax
c0002168:	8b 00                	mov    eax,DWORD PTR [eax]
c000216a:	85 c0                	test   eax,eax
c000216c:	74 ef                	je     c000215d <validate+0x9>
c000216e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002171:	74 ea                	je     c000215d <validate+0x9>
c0002173:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002177:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000217b:	75 e0                	jne    c000215d <validate+0x9>
c000217d:	83 ec 0c             	sub    esp,0xc
c0002180:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002184:	50                   	push   eax
c0002185:	e8 7d f8 ff ff       	call   c0001a07 <disk_status>
c000218a:	83 c4 10             	add    esp,0x10
c000218d:	a8 01                	test   al,0x1
c000218f:	75 cc                	jne    c000215d <validate+0x9>
c0002191:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002193:	31 c0                	xor    eax,eax
c0002195:	89 0e                	mov    DWORD PTR [esi],ecx
c0002197:	5a                   	pop    edx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <sync_window>:
c000219b:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000219f:	0f 84 85 00 00 00    	je     c000222a <sync_window+0x8f>
c00021a5:	55                   	push   ebp
c00021a6:	8d 68 54             	lea    ebp,[eax+0x54]
c00021a9:	57                   	push   edi
c00021aa:	56                   	push   esi
c00021ab:	53                   	push   ebx
c00021ac:	89 c3                	mov    ebx,eax
c00021ae:	83 ec 28             	sub    esp,0x28
c00021b1:	6a 01                	push   0x1
c00021b3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021b6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021b9:	55                   	push   ebp
c00021ba:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021be:	50                   	push   eax
c00021bf:	e8 5f f8 ff ff       	call   c0001a23 <disk_write>
c00021c4:	83 c4 20             	add    esp,0x20
c00021c7:	ba 01 00 00 00       	mov    edx,0x1
c00021cc:	85 c0                	test   eax,eax
c00021ce:	75 50                	jne    c0002220 <sync_window+0x85>
c00021d0:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021d3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021d6:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021da:	89 c6                	mov    esi,eax
c00021dc:	31 ff                	xor    edi,edi
c00021de:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021e1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021e4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021e8:	89 d7                	mov    edi,edx
c00021ea:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021ee:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021f1:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021f5:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021f9:	73 23                	jae    c000221e <sync_window+0x83>
c00021fb:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021ff:	75 1d                	jne    c000221e <sync_window+0x83>
c0002201:	83 ec 0c             	sub    esp,0xc
c0002204:	6a 01                	push   0x1
c0002206:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000220a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000220e:	52                   	push   edx
c000220f:	50                   	push   eax
c0002210:	55                   	push   ebp
c0002211:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002215:	50                   	push   eax
c0002216:	e8 08 f8 ff ff       	call   c0001a23 <disk_write>
c000221b:	83 c4 20             	add    esp,0x20
c000221e:	31 d2                	xor    edx,edx
c0002220:	83 c4 1c             	add    esp,0x1c
c0002223:	89 d0                	mov    eax,edx
c0002225:	5b                   	pop    ebx
c0002226:	5e                   	pop    esi
c0002227:	5f                   	pop    edi
c0002228:	5d                   	pop    ebp
c0002229:	c3                   	ret    
c000222a:	31 d2                	xor    edx,edx
c000222c:	89 d0                	mov    eax,edx
c000222e:	c3                   	ret    

c000222f <move_window>:
c000222f:	56                   	push   esi
c0002230:	53                   	push   ebx
c0002231:	89 c3                	mov    ebx,eax
c0002233:	83 ec 14             	sub    esp,0x14
c0002236:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002239:	75 07                	jne    c0002242 <move_window+0x13>
c000223b:	31 f6                	xor    esi,esi
c000223d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002240:	74 59                	je     c000229b <move_window+0x6c>
c0002242:	89 d8                	mov    eax,ebx
c0002244:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002248:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000224c:	e8 4a ff ff ff       	call   c000219b <sync_window>
c0002251:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002255:	89 c6                	mov    esi,eax
c0002257:	85 c0                	test   eax,eax
c0002259:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000225d:	75 3c                	jne    c000229b <move_window+0x6c>
c000225f:	83 ec 0c             	sub    esp,0xc
c0002262:	8d 43 54             	lea    eax,[ebx+0x54]
c0002265:	6a 01                	push   0x1
c0002267:	51                   	push   ecx
c0002268:	52                   	push   edx
c0002269:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000226d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002271:	50                   	push   eax
c0002272:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002276:	50                   	push   eax
c0002277:	e8 91 f7 ff ff       	call   c0001a0d <disk_read>
c000227c:	83 c4 20             	add    esp,0x20
c000227f:	85 c0                	test   eax,eax
c0002281:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002285:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002289:	74 0a                	je     c0002295 <move_window+0x66>
c000228b:	83 ca ff             	or     edx,0xffffffff
c000228e:	be 01 00 00 00       	mov    esi,0x1
c0002293:	89 d1                	mov    ecx,edx
c0002295:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002298:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000229b:	83 c4 14             	add    esp,0x14
c000229e:	89 f0                	mov    eax,esi
c00022a0:	5b                   	pop    ebx
c00022a1:	5e                   	pop    esi
c00022a2:	c3                   	ret    

c00022a3 <check_fs>:
c00022a3:	53                   	push   ebx
c00022a4:	89 c3                	mov    ebx,eax
c00022a6:	83 ec 08             	sub    esp,0x8
c00022a9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022ad:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022b4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022bb:	e8 6f ff ff ff       	call   c000222f <move_window>
c00022c0:	ba 04 00 00 00       	mov    edx,0x4
c00022c5:	85 c0                	test   eax,eax
c00022c7:	0f 85 89 00 00 00    	jne    c0002356 <check_fs+0xb3>
c00022cd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022d3:	e8 80 f7 ff ff       	call   c0001a58 <ld_word>
c00022d8:	ba 03 00 00 00       	mov    edx,0x3
c00022dd:	66 3d 55 aa          	cmp    ax,0xaa55
c00022e1:	75 73                	jne    c0002356 <check_fs+0xb3>
c00022e3:	ba 60 05 02 c0       	mov    edx,0xc0020560
c00022e8:	8d 43 54             	lea    eax,[ebx+0x54]
c00022eb:	b9 0b 00 00 00       	mov    ecx,0xb
c00022f0:	e8 02 f8 ff ff       	call   c0001af7 <mem_cmp>
c00022f5:	ba 01 00 00 00       	mov    edx,0x1
c00022fa:	85 c0                	test   eax,eax
c00022fc:	74 58                	je     c0002356 <check_fs+0xb3>
c00022fe:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002301:	8d 50 18             	lea    edx,[eax+0x18]
c0002304:	80 fa 01             	cmp    dl,0x1
c0002307:	76 09                	jbe    c0002312 <check_fs+0x6f>
c0002309:	ba 02 00 00 00       	mov    edx,0x2
c000230e:	3c eb                	cmp    al,0xeb
c0002310:	75 44                	jne    c0002356 <check_fs+0xb3>
c0002312:	ba ac 32 02 c0       	mov    edx,0xc00232ac
c0002317:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000231d:	b9 03 00 00 00       	mov    ecx,0x3
c0002322:	e8 d0 f7 ff ff       	call   c0001af7 <mem_cmp>
c0002327:	31 d2                	xor    edx,edx
c0002329:	85 c0                	test   eax,eax
c000232b:	74 29                	je     c0002356 <check_fs+0xb3>
c000232d:	ba 6c 05 02 c0       	mov    edx,0xc002056c
c0002332:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002338:	b9 05 00 00 00       	mov    ecx,0x5
c000233d:	e8 b5 f7 ff ff       	call   c0001af7 <mem_cmp>
c0002342:	31 d2                	xor    edx,edx
c0002344:	85 c0                	test   eax,eax
c0002346:	74 0e                	je     c0002356 <check_fs+0xb3>
c0002348:	31 d2                	xor    edx,edx
c000234a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002351:	0f 95 c2             	setne  dl
c0002354:	01 d2                	add    edx,edx
c0002356:	83 c4 08             	add    esp,0x8
c0002359:	89 d0                	mov    eax,edx
c000235b:	5b                   	pop    ebx
c000235c:	c3                   	ret    

c000235d <find_volume>:
c000235d:	55                   	push   ebp
c000235e:	31 c9                	xor    ecx,ecx
c0002360:	57                   	push   edi
c0002361:	56                   	push   esi
c0002362:	89 d6                	mov    esi,edx
c0002364:	53                   	push   ebx
c0002365:	31 d2                	xor    edx,edx
c0002367:	83 ec 3c             	sub    esp,0x3c
c000236a:	89 c3                	mov    ebx,eax
c000236c:	e8 32 ff ff ff       	call   c00022a3 <check_fs>
c0002371:	83 f8 02             	cmp    eax,0x2
c0002374:	74 0e                	je     c0002384 <find_volume+0x27>
c0002376:	0f 87 56 01 00 00    	ja     c00024d2 <find_volume+0x175>
c000237c:	85 f6                	test   esi,esi
c000237e:	0f 84 4e 01 00 00    	je     c00024d2 <find_volume+0x175>
c0002384:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000238b:	0f 85 df 00 00 00    	jne    c0002470 <find_volume+0x113>
c0002391:	31 c9                	xor    ecx,ecx
c0002393:	ba 01 00 00 00       	mov    edx,0x1
c0002398:	89 d8                	mov    eax,ebx
c000239a:	e8 90 fe ff ff       	call   c000222f <move_window>
c000239f:	85 c0                	test   eax,eax
c00023a1:	74 0a                	je     c00023ad <find_volume+0x50>
c00023a3:	b8 04 00 00 00       	mov    eax,0x4
c00023a8:	e9 25 01 00 00       	jmp    c00024d2 <find_volume+0x175>
c00023ad:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00023b0:	89 e8                	mov    eax,ebp
c00023b2:	e8 f6 fc ff ff       	call   c00020ad <test_gpt_header>
c00023b7:	85 c0                	test   eax,eax
c00023b9:	75 0a                	jne    c00023c5 <find_volume+0x68>
c00023bb:	b8 03 00 00 00       	mov    eax,0x3
c00023c0:	e9 0d 01 00 00       	jmp    c00024d2 <find_volume+0x175>
c00023c5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023cb:	e8 95 f6 ff ff       	call   c0001a65 <ld_dword>
c00023d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023d4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023da:	e8 9e f6 ff ff       	call   c0001a7d <ld_qword>
c00023df:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023ef:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023f7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023fb:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023ff:	74 ba                	je     c00023bb <find_volume+0x5e>
c0002401:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002405:	31 c9                	xor    ecx,ecx
c0002407:	c1 e7 07             	shl    edi,0x7
c000240a:	89 d8                	mov    eax,ebx
c000240c:	89 fa                	mov    edx,edi
c000240e:	c1 ea 09             	shr    edx,0x9
c0002411:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002415:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002419:	e8 11 fe ff ff       	call   c000222f <move_window>
c000241e:	85 c0                	test   eax,eax
c0002420:	75 81                	jne    c00023a3 <find_volume+0x46>
c0002422:	81 e7 80 01 00 00    	and    edi,0x180
c0002428:	b9 10 00 00 00       	mov    ecx,0x10
c000242d:	ba 50 05 02 c0       	mov    edx,0xc0020550
c0002432:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002436:	e8 bc f6 ff ff       	call   c0001af7 <mem_cmp>
c000243b:	85 c0                	test   eax,eax
c000243d:	75 2b                	jne    c000246a <find_volume+0x10d>
c000243f:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002443:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002447:	e8 31 f6 ff ff       	call   c0001a7d <ld_qword>
c000244c:	89 d1                	mov    ecx,edx
c000244e:	89 c2                	mov    edx,eax
c0002450:	89 d8                	mov    eax,ebx
c0002452:	e8 4c fe ff ff       	call   c00022a3 <check_fs>
c0002457:	85 f6                	test   esi,esi
c0002459:	75 05                	jne    c0002460 <find_volume+0x103>
c000245b:	83 f8 01             	cmp    eax,0x1
c000245e:	76 72                	jbe    c00024d2 <find_volume+0x175>
c0002460:	85 f6                	test   esi,esi
c0002462:	74 06                	je     c000246a <find_volume+0x10d>
c0002464:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002468:	74 68                	je     c00024d2 <find_volume+0x175>
c000246a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000246e:	eb 87                	jmp    c00023f7 <find_volume+0x9a>
c0002470:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002474:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000247a:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002480:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002484:	89 cd                	mov    ebp,ecx
c0002486:	89 f8                	mov    eax,edi
c0002488:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000248c:	e8 d4 f5 ff ff       	call   c0001a65 <ld_dword>
c0002491:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002495:	83 c7 10             	add    edi,0x10
c0002498:	83 c1 04             	add    ecx,0x4
c000249b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000249e:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00024a2:	75 e2                	jne    c0002486 <find_volume+0x129>
c00024a4:	31 ff                	xor    edi,edi
c00024a6:	85 f6                	test   esi,esi
c00024a8:	74 03                	je     c00024ad <find_volume+0x150>
c00024aa:	8d 7e ff             	lea    edi,[esi-0x1]
c00024ad:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00024b1:	b8 03 00 00 00       	mov    eax,0x3
c00024b6:	85 d2                	test   edx,edx
c00024b8:	74 09                	je     c00024c3 <find_volume+0x166>
c00024ba:	31 c9                	xor    ecx,ecx
c00024bc:	89 d8                	mov    eax,ebx
c00024be:	e8 e0 fd ff ff       	call   c00022a3 <check_fs>
c00024c3:	85 f6                	test   esi,esi
c00024c5:	75 0b                	jne    c00024d2 <find_volume+0x175>
c00024c7:	83 f8 01             	cmp    eax,0x1
c00024ca:	76 06                	jbe    c00024d2 <find_volume+0x175>
c00024cc:	47                   	inc    edi
c00024cd:	83 ff 03             	cmp    edi,0x3
c00024d0:	76 db                	jbe    c00024ad <find_volume+0x150>
c00024d2:	83 c4 3c             	add    esp,0x3c
c00024d5:	5b                   	pop    ebx
c00024d6:	5e                   	pop    esi
c00024d7:	5f                   	pop    edi
c00024d8:	5d                   	pop    ebp
c00024d9:	c3                   	ret    

c00024da <mount_volume>:
c00024da:	55                   	push   ebp
c00024db:	57                   	push   edi
c00024dc:	89 cf                	mov    edi,ecx
c00024de:	56                   	push   esi
c00024df:	53                   	push   ebx
c00024e0:	bb 0b 00 00 00       	mov    ebx,0xb
c00024e5:	83 ec 3c             	sub    esp,0x3c
c00024e8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024ee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024f2:	e8 43 fb ff ff       	call   c000203a <get_ldnumber>
c00024f7:	85 c0                	test   eax,eax
c00024f9:	0f 88 3b 05 00 00    	js     c0002a3a <mount_volume+0x560>
c00024ff:	8b 2c 85 40 47 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdb8c0]
c0002506:	89 c6                	mov    esi,eax
c0002508:	bb 0c 00 00 00       	mov    ebx,0xc
c000250d:	85 ed                	test   ebp,ebp
c000250f:	0f 84 25 05 00 00    	je     c0002a3a <mount_volume+0x560>
c0002515:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002519:	83 e7 fe             	and    edi,0xfffffffe
c000251c:	89 2a                	mov    DWORD PTR [edx],ebp
c000251e:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002522:	74 32                	je     c0002556 <mount_volume+0x7c>
c0002524:	83 ec 0c             	sub    esp,0xc
c0002527:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000252b:	50                   	push   eax
c000252c:	e8 d6 f4 ff ff       	call   c0001a07 <disk_status>
c0002531:	83 c4 10             	add    esp,0x10
c0002534:	a8 01                	test   al,0x1
c0002536:	75 1e                	jne    c0002556 <mount_volume+0x7c>
c0002538:	89 f9                	mov    ecx,edi
c000253a:	31 db                	xor    ebx,ebx
c000253c:	84 c9                	test   cl,cl
c000253e:	0f 84 f6 04 00 00    	je     c0002a3a <mount_volume+0x560>
c0002544:	a8 04                	test   al,0x4
c0002546:	0f 84 ee 04 00 00    	je     c0002a3a <mount_volume+0x560>
c000254c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002551:	e9 e4 04 00 00       	jmp    c0002a3a <mount_volume+0x560>
c0002556:	83 ec 0c             	sub    esp,0xc
c0002559:	89 f0                	mov    eax,esi
c000255b:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000255f:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002562:	0f b6 f0             	movzx  esi,al
c0002565:	56                   	push   esi
c0002566:	e8 9f f4 ff ff       	call   c0001a0a <disk_initialize>
c000256b:	bb 03 00 00 00       	mov    ebx,0x3
c0002570:	83 c4 10             	add    esp,0x10
c0002573:	a8 01                	test   al,0x1
c0002575:	0f 85 bf 04 00 00    	jne    c0002a3a <mount_volume+0x560>
c000257b:	89 f9                	mov    ecx,edi
c000257d:	84 c9                	test   cl,cl
c000257f:	74 04                	je     c0002585 <mount_volume+0xab>
c0002581:	a8 04                	test   al,0x4
c0002583:	75 c7                	jne    c000254c <mount_volume+0x72>
c0002585:	31 d2                	xor    edx,edx
c0002587:	89 e8                	mov    eax,ebp
c0002589:	e8 cf fd ff ff       	call   c000235d <find_volume>
c000258e:	83 f8 04             	cmp    eax,0x4
c0002591:	75 0a                	jne    c000259d <mount_volume+0xc3>
c0002593:	bb 01 00 00 00       	mov    ebx,0x1
c0002598:	e9 9d 04 00 00       	jmp    c0002a3a <mount_volume+0x560>
c000259d:	83 f8 01             	cmp    eax,0x1
c00025a0:	76 0a                	jbe    c00025ac <mount_volume+0xd2>
c00025a2:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a7:	e9 8e 04 00 00       	jmp    c0002a3a <mount_volume+0x560>
c00025ac:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00025af:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00025b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025ba:	75 17                	jne    c00025d3 <mount_volume+0xf9>
c00025bc:	b8 0b 00 00 00       	mov    eax,0xb
c00025c1:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025c6:	75 da                	jne    c00025a2 <mount_volume+0xc8>
c00025c8:	40                   	inc    eax
c00025c9:	83 f8 40             	cmp    eax,0x40
c00025cc:	75 f3                	jne    c00025c1 <mount_volume+0xe7>
c00025ce:	e9 5a 02 00 00       	jmp    c000282d <mount_volume+0x353>
c00025d3:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025d6:	e8 7d f4 ff ff       	call   c0001a58 <ld_word>
c00025db:	66 3d 00 02          	cmp    ax,0x200
c00025df:	75 c1                	jne    c00025a2 <mount_volume+0xc8>
c00025e1:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025e4:	e8 6f f4 ff ff       	call   c0001a58 <ld_word>
c00025e9:	0f b7 c0             	movzx  eax,ax
c00025ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025f0:	85 c0                	test   eax,eax
c00025f2:	75 0c                	jne    c0002600 <mount_volume+0x126>
c00025f4:	8d 45 78             	lea    eax,[ebp+0x78]
c00025f7:	e8 69 f4 ff ff       	call   c0001a65 <ld_dword>
c00025fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002604:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002607:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000260a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000260e:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002611:	48                   	dec    eax
c0002612:	3c 01                	cmp    al,0x1
c0002614:	77 8c                	ja     c00025a2 <mount_volume+0xc8>
c0002616:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000261a:	89 c3                	mov    ebx,eax
c000261c:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002620:	66 85 c0             	test   ax,ax
c0002623:	0f 84 79 ff ff ff    	je     c00025a2 <mount_volume+0xc8>
c0002629:	8d 40 ff             	lea    eax,[eax-0x1]
c000262c:	85 d8                	test   eax,ebx
c000262e:	0f 85 6e ff ff ff    	jne    c00025a2 <mount_volume+0xc8>
c0002634:	8d 45 65             	lea    eax,[ebp+0x65]
c0002637:	e8 1c f4 ff ff       	call   c0001a58 <ld_word>
c000263c:	89 c7                	mov    edi,eax
c000263e:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002642:	a8 0f                	test   al,0xf
c0002644:	0f 85 58 ff ff ff    	jne    c00025a2 <mount_volume+0xc8>
c000264a:	8d 45 67             	lea    eax,[ebp+0x67]
c000264d:	e8 06 f4 ff ff       	call   c0001a58 <ld_word>
c0002652:	0f b7 f0             	movzx  esi,ax
c0002655:	85 f6                	test   esi,esi
c0002657:	75 0a                	jne    c0002663 <mount_volume+0x189>
c0002659:	8d 45 74             	lea    eax,[ebp+0x74]
c000265c:	e8 04 f4 ff ff       	call   c0001a65 <ld_dword>
c0002661:	89 c6                	mov    esi,eax
c0002663:	8d 45 62             	lea    eax,[ebp+0x62]
c0002666:	e8 ed f3 ff ff       	call   c0001a58 <ld_word>
c000266b:	66 85 c0             	test   ax,ax
c000266e:	0f 84 2e ff ff ff    	je     c00025a2 <mount_volume+0xc8>
c0002674:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002679:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000267e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002682:	89 fa                	mov    edx,edi
c0002684:	66 c1 ea 04          	shr    dx,0x4
c0002688:	0f b7 d2             	movzx  edx,dx
c000268b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000268f:	0f b7 c8             	movzx  ecx,ax
c0002692:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002695:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002699:	39 c6                	cmp    esi,eax
c000269b:	0f 82 01 ff ff ff    	jb     c00025a2 <mount_volume+0xc8>
c00026a1:	29 c6                	sub    esi,eax
c00026a3:	31 d2                	xor    edx,edx
c00026a5:	89 f0                	mov    eax,esi
c00026a7:	f7 f3                	div    ebx
c00026a9:	39 de                	cmp    esi,ebx
c00026ab:	0f 82 f1 fe ff ff    	jb     c00025a2 <mount_volume+0xc8>
c00026b1:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026b6:	0f 87 e6 fe ff ff    	ja     c00025a2 <mount_volume+0xc8>
c00026bc:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026c1:	0f 86 63 03 00 00    	jbe    c0002a2a <mount_volume+0x550>
c00026c7:	bb 03 00 00 00       	mov    ebx,0x3
c00026cc:	8d 70 02             	lea    esi,[eax+0x2]
c00026cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026d7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026da:	89 c8                	mov    eax,ecx
c00026dc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026df:	31 d2                	xor    edx,edx
c00026e1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026e5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026ed:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026f4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026f8:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026fb:	31 d2                	xor    edx,edx
c00026fd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002701:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002705:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002708:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000270b:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000270e:	83 fb 03             	cmp    ebx,0x3
c0002711:	75 2b                	jne    c000273e <mount_volume+0x264>
c0002713:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002716:	e8 3d f3 ff ff       	call   c0001a58 <ld_word>
c000271b:	66 09 c7             	or     di,ax
c000271e:	0f 85 7e fe ff ff    	jne    c00025a2 <mount_volume+0xc8>
c0002724:	c1 e6 02             	shl    esi,0x2
c0002727:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000272d:	e8 33 f3 ff ff       	call   c0001a65 <ld_dword>
c0002732:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002739:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000273c:	eb 30                	jmp    c000276e <mount_volume+0x294>
c000273e:	66 85 ff             	test   di,di
c0002741:	0f 84 5b fe ff ff    	je     c00025a2 <mount_volume+0xc8>
c0002747:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000274b:	31 d2                	xor    edx,edx
c000274d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002751:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002755:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002758:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000275b:	83 fb 02             	cmp    ebx,0x2
c000275e:	75 04                	jne    c0002764 <mount_volume+0x28a>
c0002760:	01 f6                	add    esi,esi
c0002762:	eb 0a                	jmp    c000276e <mount_volume+0x294>
c0002764:	8d 04 76             	lea    eax,[esi+esi*2]
c0002767:	83 e6 01             	and    esi,0x1
c000276a:	d1 e8                	shr    eax,1
c000276c:	01 c6                	add    esi,eax
c000276e:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002774:	c1 ee 09             	shr    esi,0x9
c0002777:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000277b:	0f 87 21 fe ff ff    	ja     c00025a2 <mount_volume+0xc8>
c0002781:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002788:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000278f:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002793:	83 fb 03             	cmp    ebx,0x3
c0002796:	75 7a                	jne    c0002812 <mount_volume+0x338>
c0002798:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000279e:	e8 b5 f2 ff ff       	call   c0001a58 <ld_word>
c00027a3:	66 48                	dec    ax
c00027a5:	75 6b                	jne    c0002812 <mount_volume+0x338>
c00027a7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00027ab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027af:	83 c2 01             	add    edx,0x1
c00027b2:	89 e8                	mov    eax,ebp
c00027b4:	83 d1 00             	adc    ecx,0x0
c00027b7:	e8 73 fa ff ff       	call   c000222f <move_window>
c00027bc:	85 c0                	test   eax,eax
c00027be:	75 52                	jne    c0002812 <mount_volume+0x338>
c00027c0:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027c4:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027ca:	e8 89 f2 ff ff       	call   c0001a58 <ld_word>
c00027cf:	66 3d 55 aa          	cmp    ax,0xaa55
c00027d3:	75 3d                	jne    c0002812 <mount_volume+0x338>
c00027d5:	8d 45 54             	lea    eax,[ebp+0x54]
c00027d8:	e8 88 f2 ff ff       	call   c0001a65 <ld_dword>
c00027dd:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027e2:	75 2e                	jne    c0002812 <mount_volume+0x338>
c00027e4:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027ea:	e8 76 f2 ff ff       	call   c0001a65 <ld_dword>
c00027ef:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027f4:	75 1c                	jne    c0002812 <mount_volume+0x338>
c00027f6:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027fc:	e8 64 f2 ff ff       	call   c0001a65 <ld_dword>
c0002801:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002804:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000280a:	e8 56 f2 ff ff       	call   c0001a65 <ld_dword>
c000280f:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002812:	66 a1 20 47 02 c0    	mov    ax,ds:0xc0024720
c0002818:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000281b:	40                   	inc    eax
c000281c:	31 db                	xor    ebx,ebx
c000281e:	66 a3 20 47 02 c0    	mov    ds:0xc0024720,ax
c0002824:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002828:	e9 0d 02 00 00       	jmp    c0002a3a <mount_volume+0x560>
c000282d:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002833:	e8 20 f2 ff ff       	call   c0001a58 <ld_word>
c0002838:	66 3d 00 01          	cmp    ax,0x100
c000283c:	0f 85 60 fd ff ff    	jne    c00025a2 <mount_volume+0xc8>
c0002842:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002849:	0f 85 53 fd ff ff    	jne    c00025a2 <mount_volume+0xc8>
c000284f:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002855:	e8 23 f2 ff ff       	call   c0001a7d <ld_qword>
c000285a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000285e:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002864:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002868:	e8 f8 f1 ff ff       	call   c0001a65 <ld_dword>
c000286d:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002870:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002876:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002879:	fe c8                	dec    al
c000287b:	0f 85 21 fd ff ff    	jne    c00025a2 <mount_volume+0xc8>
c0002881:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002888:	bb 01 00 00 00       	mov    ebx,0x1
c000288d:	d3 e3                	shl    ebx,cl
c000288f:	66 85 db             	test   bx,bx
c0002892:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002896:	0f 84 06 fd ff ff    	je     c00025a2 <mount_volume+0xc8>
c000289c:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00028a2:	e8 be f1 ff ff       	call   c0001a65 <ld_dword>
c00028a7:	89 c6                	mov    esi,eax
c00028a9:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00028ae:	0f 87 ee fc ff ff    	ja     c00025a2 <mount_volume+0xc8>
c00028b4:	8d 40 02             	lea    eax,[eax+0x2]
c00028b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028bb:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028c2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028c5:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028c8:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028ce:	e8 92 f1 ff ff       	call   c0001a65 <ld_dword>
c00028d3:	31 d2                	xor    edx,edx
c00028d5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028d9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028e1:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e4:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028e7:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028ed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028f1:	e8 6f f1 ff ff       	call   c0001a65 <ld_dword>
c00028f6:	31 d2                	xor    edx,edx
c00028f8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028fc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002900:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002904:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002907:	0f b7 c3             	movzx  eax,bx
c000290a:	0f af f0             	imul   esi,eax
c000290d:	89 f0                	mov    eax,esi
c000290f:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002912:	31 d2                	xor    edx,edx
c0002914:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002918:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c000291c:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002920:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002924:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002928:	39 c1                	cmp    ecx,eax
c000292a:	89 df                	mov    edi,ebx
c000292c:	19 d7                	sbb    edi,edx
c000292e:	0f 82 6e fc ff ff    	jb     c00025a2 <mount_volume+0xc8>
c0002934:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000293a:	31 db                	xor    ebx,ebx
c000293c:	e8 24 f1 ff ff       	call   c0001a65 <ld_dword>
c0002941:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002948:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000294b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002953:	85 db                	test   ebx,ebx
c0002955:	75 39                	jne    c0002990 <mount_volume+0x4b6>
c0002957:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000295b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000295f:	0f 86 3d fc ff ff    	jbe    c00025a2 <mount_volume+0xc8>
c0002965:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002968:	89 e8                	mov    eax,ebp
c000296a:	e8 82 f3 ff ff       	call   c0001cf1 <clst2sect>
c000296f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002973:	31 ff                	xor    edi,edi
c0002975:	01 c6                	add    esi,eax
c0002977:	11 d7                	adc    edi,edx
c0002979:	89 e8                	mov    eax,ebp
c000297b:	89 f2                	mov    edx,esi
c000297d:	89 f9                	mov    ecx,edi
c000297f:	e8 ab f8 ff ff       	call   c000222f <move_window>
c0002984:	85 c0                	test   eax,eax
c0002986:	0f 85 07 fc ff ff    	jne    c0002593 <mount_volume+0xb9>
c000298c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002990:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002995:	74 0b                	je     c00029a2 <mount_volume+0x4c8>
c0002997:	83 c3 20             	add    ebx,0x20
c000299a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00029a0:	eb b1                	jmp    c0002953 <mount_volume+0x479>
c00029a2:	8d 75 54             	lea    esi,[ebp+0x54]
c00029a5:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00029a9:	e8 b7 f0 ff ff       	call   c0001a65 <ld_dword>
c00029ae:	89 c3                	mov    ebx,eax
c00029b0:	83 f8 01             	cmp    eax,0x1
c00029b3:	0f 86 e9 fb ff ff    	jbe    c00025a2 <mount_volume+0xc8>
c00029b9:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029bc:	0f 86 e0 fb ff ff    	jbe    c00025a2 <mount_volume+0xc8>
c00029c2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029c6:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029c9:	0f af c2             	imul   eax,edx
c00029cc:	31 d2                	xor    edx,edx
c00029ce:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029d1:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029d4:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029d7:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029da:	89 da                	mov    edx,ebx
c00029dc:	31 c9                	xor    ecx,ecx
c00029de:	c1 ea 07             	shr    edx,0x7
c00029e1:	89 e8                	mov    eax,ebp
c00029e3:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029e6:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029e9:	e8 41 f8 ff ff       	call   c000222f <move_window>
c00029ee:	85 c0                	test   eax,eax
c00029f0:	0f 85 9d fb ff ff    	jne    c0002593 <mount_volume+0xb9>
c00029f6:	89 d8                	mov    eax,ebx
c00029f8:	83 e0 7f             	and    eax,0x7f
c00029fb:	8d 04 86             	lea    eax,[esi+eax*4]
c00029fe:	e8 62 f0 ff ff       	call   c0001a65 <ld_dword>
c0002a03:	83 f8 ff             	cmp    eax,0xffffffff
c0002a06:	74 0a                	je     c0002a12 <mount_volume+0x538>
c0002a08:	43                   	inc    ebx
c0002a09:	39 d8                	cmp    eax,ebx
c0002a0b:	74 cd                	je     c00029da <mount_volume+0x500>
c0002a0d:	e9 90 fb ff ff       	jmp    c00025a2 <mount_volume+0xc8>
c0002a12:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a19:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a20:	bb 04 00 00 00       	mov    ebx,0x4
c0002a25:	e9 e8 fd ff ff       	jmp    c0002812 <mount_volume+0x338>
c0002a2a:	31 db                	xor    ebx,ebx
c0002a2c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002a31:	0f 97 c3             	seta   bl
c0002a34:	43                   	inc    ebx
c0002a35:	e9 92 fc ff ff       	jmp    c00026cc <mount_volume+0x1f2>
c0002a3a:	83 c4 3c             	add    esp,0x3c
c0002a3d:	89 d8                	mov    eax,ebx
c0002a3f:	5b                   	pop    ebx
c0002a40:	5e                   	pop    esi
c0002a41:	5f                   	pop    edi
c0002a42:	5d                   	pop    ebp
c0002a43:	c3                   	ret    

c0002a44 <find_bitmap>:
c0002a44:	55                   	push   ebp
c0002a45:	57                   	push   edi
c0002a46:	89 c7                	mov    edi,eax
c0002a48:	56                   	push   esi
c0002a49:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a4c:	53                   	push   ebx
c0002a4d:	83 ec 1c             	sub    esp,0x1c
c0002a50:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a53:	83 e8 02             	sub    eax,0x2
c0002a56:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a5a:	39 f0                	cmp    eax,esi
c0002a5c:	77 02                	ja     c0002a60 <find_bitmap+0x1c>
c0002a5e:	31 f6                	xor    esi,esi
c0002a60:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a64:	89 f3                	mov    ebx,esi
c0002a66:	31 ed                	xor    ebp,ebp
c0002a68:	89 da                	mov    edx,ebx
c0002a6a:	31 c9                	xor    ecx,ecx
c0002a6c:	c1 ea 0c             	shr    edx,0xc
c0002a6f:	89 f8                	mov    eax,edi
c0002a71:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a74:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a77:	e8 b3 f7 ff ff       	call   c000222f <move_window>
c0002a7c:	85 c0                	test   eax,eax
c0002a7e:	75 68                	jne    c0002ae8 <find_bitmap+0xa4>
c0002a80:	89 d9                	mov    ecx,ebx
c0002a82:	b8 01 00 00 00       	mov    eax,0x1
c0002a87:	83 e1 07             	and    ecx,0x7
c0002a8a:	89 da                	mov    edx,ebx
c0002a8c:	d3 e0                	shl    eax,cl
c0002a8e:	c1 ea 03             	shr    edx,0x3
c0002a91:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a94:	83 e9 02             	sub    ecx,0x2
c0002a97:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a9d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aa1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002aa5:	43                   	inc    ebx
c0002aa6:	21 c1                	and    ecx,eax
c0002aa8:	01 c0                	add    eax,eax
c0002aaa:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002aae:	77 09                	ja     c0002ab9 <find_bitmap+0x75>
c0002ab0:	31 db                	xor    ebx,ebx
c0002ab2:	ba 00 02 00 00       	mov    edx,0x200
c0002ab7:	31 c0                	xor    eax,eax
c0002ab9:	84 c9                	test   cl,cl
c0002abb:	75 10                	jne    c0002acd <find_bitmap+0x89>
c0002abd:	45                   	inc    ebp
c0002abe:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ac2:	75 0f                	jne    c0002ad3 <find_bitmap+0x8f>
c0002ac4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ac8:	83 c0 02             	add    eax,0x2
c0002acb:	eb 22                	jmp    c0002aef <find_bitmap+0xab>
c0002acd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ad1:	31 ed                	xor    ebp,ebp
c0002ad3:	39 de                	cmp    esi,ebx
c0002ad5:	74 16                	je     c0002aed <find_bitmap+0xa9>
c0002ad7:	84 c0                	test   al,al
c0002ad9:	75 c6                	jne    c0002aa1 <find_bitmap+0x5d>
c0002adb:	42                   	inc    edx
c0002adc:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002ae2:	77 84                	ja     c0002a68 <find_bitmap+0x24>
c0002ae4:	b0 01                	mov    al,0x1
c0002ae6:	eb b9                	jmp    c0002aa1 <find_bitmap+0x5d>
c0002ae8:	83 c8 ff             	or     eax,0xffffffff
c0002aeb:	eb 02                	jmp    c0002aef <find_bitmap+0xab>
c0002aed:	31 c0                	xor    eax,eax
c0002aef:	83 c4 1c             	add    esp,0x1c
c0002af2:	5b                   	pop    ebx
c0002af3:	5e                   	pop    esi
c0002af4:	5f                   	pop    edi
c0002af5:	5d                   	pop    ebp
c0002af6:	c3                   	ret    

c0002af7 <change_bitmap>:
c0002af7:	55                   	push   ebp
c0002af8:	89 cd                	mov    ebp,ecx
c0002afa:	57                   	push   edi
c0002afb:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002afe:	56                   	push   esi
c0002aff:	89 c7                	mov    edi,eax
c0002b01:	53                   	push   ebx
c0002b02:	89 c8                	mov    eax,ecx
c0002b04:	83 ec 1c             	sub    esp,0x1c
c0002b07:	31 d2                	xor    edx,edx
c0002b09:	c1 e8 0c             	shr    eax,0xc
c0002b0c:	89 ce                	mov    esi,ecx
c0002b0e:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002b11:	bb 01 00 00 00       	mov    ebx,0x1
c0002b16:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b19:	83 e1 07             	and    ecx,0x7
c0002b1c:	c1 ee 03             	shr    esi,0x3
c0002b1f:	d3 e3                	shl    ebx,cl
c0002b21:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b27:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b2b:	89 c1                	mov    ecx,eax
c0002b2d:	89 d3                	mov    ebx,edx
c0002b2f:	83 c1 01             	add    ecx,0x1
c0002b32:	83 d3 00             	adc    ebx,0x0
c0002b35:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b39:	89 d1                	mov    ecx,edx
c0002b3b:	89 c2                	mov    edx,eax
c0002b3d:	89 f8                	mov    eax,edi
c0002b3f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b43:	e8 e7 f6 ff ff       	call   c000222f <move_window>
c0002b48:	89 c1                	mov    ecx,eax
c0002b4a:	85 c0                	test   eax,eax
c0002b4c:	75 48                	jne    c0002b96 <change_bitmap+0x9f>
c0002b4e:	31 d2                	xor    edx,edx
c0002b50:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b54:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b58:	0f 95 c2             	setne  dl
c0002b5b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b5f:	74 3c                	je     c0002b9d <change_bitmap+0xa6>
c0002b61:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b65:	4d                   	dec    ebp
c0002b66:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b6a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b6e:	74 32                	je     c0002ba2 <change_bitmap+0xab>
c0002b70:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b74:	75 d8                	jne    c0002b4e <change_bitmap+0x57>
c0002b76:	8d 46 01             	lea    eax,[esi+0x1]
c0002b79:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b7e:	89 c3                	mov    ebx,eax
c0002b80:	31 f6                	xor    esi,esi
c0002b82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b86:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b8a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b90:	74 99                	je     c0002b2b <change_bitmap+0x34>
c0002b92:	89 de                	mov    esi,ebx
c0002b94:	eb b8                	jmp    c0002b4e <change_bitmap+0x57>
c0002b96:	b9 01 00 00 00       	mov    ecx,0x1
c0002b9b:	eb 05                	jmp    c0002ba2 <change_bitmap+0xab>
c0002b9d:	b9 02 00 00 00       	mov    ecx,0x2
c0002ba2:	83 c4 1c             	add    esp,0x1c
c0002ba5:	89 c8                	mov    eax,ecx
c0002ba7:	5b                   	pop    ebx
c0002ba8:	5e                   	pop    esi
c0002ba9:	5f                   	pop    edi
c0002baa:	5d                   	pop    ebp
c0002bab:	c3                   	ret    

c0002bac <put_fat>:
c0002bac:	83 fa 01             	cmp    edx,0x1
c0002baf:	0f 86 7b 01 00 00    	jbe    c0002d30 <put_fat+0x184>
c0002bb5:	55                   	push   ebp
c0002bb6:	57                   	push   edi
c0002bb7:	89 cf                	mov    edi,ecx
c0002bb9:	56                   	push   esi
c0002bba:	b9 02 00 00 00       	mov    ecx,0x2
c0002bbf:	53                   	push   ebx
c0002bc0:	89 c6                	mov    esi,eax
c0002bc2:	83 ec 1c             	sub    esp,0x1c
c0002bc5:	89 d3                	mov    ebx,edx
c0002bc7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bca:	0f 86 68 01 00 00    	jbe    c0002d38 <put_fat+0x18c>
c0002bd0:	8a 00                	mov    al,BYTE PTR [eax]
c0002bd2:	3c 02                	cmp    al,0x2
c0002bd4:	0f 84 c7 00 00 00    	je     c0002ca1 <put_fat+0xf5>
c0002bda:	77 09                	ja     c0002be5 <put_fat+0x39>
c0002bdc:	fe c8                	dec    al
c0002bde:	74 17                	je     c0002bf7 <put_fat+0x4b>
c0002be0:	e9 53 01 00 00       	jmp    c0002d38 <put_fat+0x18c>
c0002be5:	b9 02 00 00 00       	mov    ecx,0x2
c0002bea:	3c 04                	cmp    al,0x4
c0002bec:	0f 86 e1 00 00 00    	jbe    c0002cd3 <put_fat+0x127>
c0002bf2:	e9 41 01 00 00       	jmp    c0002d38 <put_fat+0x18c>
c0002bf7:	89 d5                	mov    ebp,edx
c0002bf9:	31 c9                	xor    ecx,ecx
c0002bfb:	d1 ed                	shr    ebp,1
c0002bfd:	89 f0                	mov    eax,esi
c0002bff:	01 d5                	add    ebp,edx
c0002c01:	89 ea                	mov    edx,ebp
c0002c03:	c1 ea 09             	shr    edx,0x9
c0002c06:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c09:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c0c:	e8 1e f6 ff ff       	call   c000222f <move_window>
c0002c11:	89 c1                	mov    ecx,eax
c0002c13:	85 c0                	test   eax,eax
c0002c15:	0f 85 1d 01 00 00    	jne    c0002d38 <put_fat+0x18c>
c0002c1b:	8d 46 54             	lea    eax,[esi+0x54]
c0002c1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c22:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c25:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c2f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c33:	83 e3 01             	and    ebx,0x1
c0002c36:	89 f8                	mov    eax,edi
c0002c38:	74 0d                	je     c0002c47 <put_fat+0x9b>
c0002c3a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c3d:	89 fa                	mov    edx,edi
c0002c3f:	c1 e2 04             	shl    edx,0x4
c0002c42:	83 e0 0f             	and    eax,0xf
c0002c45:	09 d0                	or     eax,edx
c0002c47:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c4b:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c4e:	c1 ea 09             	shr    edx,0x9
c0002c51:	31 c9                	xor    ecx,ecx
c0002c53:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c56:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c5a:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c5d:	89 f0                	mov    eax,esi
c0002c5f:	e8 cb f5 ff ff       	call   c000222f <move_window>
c0002c64:	89 c1                	mov    ecx,eax
c0002c66:	85 c0                	test   eax,eax
c0002c68:	0f 85 ca 00 00 00    	jne    c0002d38 <put_fat+0x18c>
c0002c6e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c72:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c78:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c7c:	85 db                	test   ebx,ebx
c0002c7e:	74 07                	je     c0002c87 <put_fat+0xdb>
c0002c80:	c1 ef 04             	shr    edi,0x4
c0002c83:	89 fa                	mov    edx,edi
c0002c85:	eb 0e                	jmp    c0002c95 <put_fat+0xe9>
c0002c87:	c1 ef 08             	shr    edi,0x8
c0002c8a:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c8d:	83 e2 f0             	and    edx,0xfffffff0
c0002c90:	83 e7 0f             	and    edi,0xf
c0002c93:	09 fa                	or     edx,edi
c0002c95:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c98:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c9c:	e9 97 00 00 00       	jmp    c0002d38 <put_fat+0x18c>
c0002ca1:	c1 ea 08             	shr    edx,0x8
c0002ca4:	31 c9                	xor    ecx,ecx
c0002ca6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ca9:	89 f0                	mov    eax,esi
c0002cab:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cae:	e8 7c f5 ff ff       	call   c000222f <move_window>
c0002cb3:	89 c1                	mov    ecx,eax
c0002cb5:	85 c0                	test   eax,eax
c0002cb7:	75 7f                	jne    c0002d38 <put_fat+0x18c>
c0002cb9:	01 db                	add    ebx,ebx
c0002cbb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cbf:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cc5:	0f b7 d7             	movzx  edx,di
c0002cc8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ccc:	e8 f9 ed ff ff       	call   c0001aca <st_word>
c0002cd1:	eb 53                	jmp    c0002d26 <put_fat+0x17a>
c0002cd3:	c1 ea 07             	shr    edx,0x7
c0002cd6:	31 c9                	xor    ecx,ecx
c0002cd8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cdb:	89 f0                	mov    eax,esi
c0002cdd:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ce0:	e8 4a f5 ff ff       	call   c000222f <move_window>
c0002ce5:	89 c1                	mov    ecx,eax
c0002ce7:	85 c0                	test   eax,eax
c0002ce9:	75 4d                	jne    c0002d38 <put_fat+0x18c>
c0002ceb:	c1 e3 02             	shl    ebx,0x2
c0002cee:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cf4:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cf7:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cfb:	74 1c                	je     c0002d19 <put_fat+0x16d>
c0002cfd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d01:	89 d8                	mov    eax,ebx
c0002d03:	e8 5d ed ff ff       	call   c0001a65 <ld_dword>
c0002d08:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002d0e:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d13:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d17:	09 c7                	or     edi,eax
c0002d19:	89 fa                	mov    edx,edi
c0002d1b:	89 d8                	mov    eax,ebx
c0002d1d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d21:	e8 a8 ed ff ff       	call   c0001ace <st_dword>
c0002d26:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d2a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d2e:	eb 08                	jmp    c0002d38 <put_fat+0x18c>
c0002d30:	b9 02 00 00 00       	mov    ecx,0x2
c0002d35:	89 c8                	mov    eax,ecx
c0002d37:	c3                   	ret    
c0002d38:	83 c4 1c             	add    esp,0x1c
c0002d3b:	89 c8                	mov    eax,ecx
c0002d3d:	5b                   	pop    ebx
c0002d3e:	5e                   	pop    esi
c0002d3f:	5f                   	pop    edi
c0002d40:	5d                   	pop    ebp
c0002d41:	c3                   	ret    

c0002d42 <fill_last_frag>:
c0002d42:	57                   	push   edi
c0002d43:	89 cf                	mov    edi,ecx
c0002d45:	56                   	push   esi
c0002d46:	89 d6                	mov    esi,edx
c0002d48:	53                   	push   ebx
c0002d49:	89 c3                	mov    ebx,eax
c0002d4b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d4e:	85 c0                	test   eax,eax
c0002d50:	74 21                	je     c0002d73 <fill_last_frag+0x31>
c0002d52:	89 f9                	mov    ecx,edi
c0002d54:	83 f8 01             	cmp    eax,0x1
c0002d57:	76 05                	jbe    c0002d5e <fill_last_frag+0x1c>
c0002d59:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d5c:	29 c1                	sub    ecx,eax
c0002d5e:	8d 56 01             	lea    edx,[esi+0x1]
c0002d61:	29 c2                	sub    edx,eax
c0002d63:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d65:	e8 42 fe ff ff       	call   c0002bac <put_fat>
c0002d6a:	85 c0                	test   eax,eax
c0002d6c:	75 05                	jne    c0002d73 <fill_last_frag+0x31>
c0002d6e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d71:	eb d8                	jmp    c0002d4b <fill_last_frag+0x9>
c0002d73:	5b                   	pop    ebx
c0002d74:	5e                   	pop    esi
c0002d75:	5f                   	pop    edi
c0002d76:	c3                   	ret    

c0002d77 <fill_first_frag>:
c0002d77:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d7b:	75 2d                	jne    c0002daa <fill_first_frag+0x33>
c0002d7d:	57                   	push   edi
c0002d7e:	56                   	push   esi
c0002d7f:	53                   	push   ebx
c0002d80:	89 c3                	mov    ebx,eax
c0002d82:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d85:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d88:	01 d7                	add    edi,edx
c0002d8a:	39 fa                	cmp    edx,edi
c0002d8c:	74 14                	je     c0002da2 <fill_first_frag+0x2b>
c0002d8e:	8d 72 01             	lea    esi,[edx+0x1]
c0002d91:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d93:	89 f1                	mov    ecx,esi
c0002d95:	e8 12 fe ff ff       	call   c0002bac <put_fat>
c0002d9a:	89 f2                	mov    edx,esi
c0002d9c:	85 c0                	test   eax,eax
c0002d9e:	74 ea                	je     c0002d8a <fill_first_frag+0x13>
c0002da0:	eb 0b                	jmp    c0002dad <fill_first_frag+0x36>
c0002da2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002da6:	31 c0                	xor    eax,eax
c0002da8:	eb 03                	jmp    c0002dad <fill_first_frag+0x36>
c0002daa:	31 c0                	xor    eax,eax
c0002dac:	c3                   	ret    
c0002dad:	5b                   	pop    ebx
c0002dae:	5e                   	pop    esi
c0002daf:	5f                   	pop    edi
c0002db0:	c3                   	ret    

c0002db1 <get_fat>:
c0002db1:	83 fa 01             	cmp    edx,0x1
c0002db4:	0f 86 db 01 00 00    	jbe    c0002f95 <get_fat+0x1e4>
c0002dba:	55                   	push   ebp
c0002dbb:	b9 01 00 00 00       	mov    ecx,0x1
c0002dc0:	57                   	push   edi
c0002dc1:	56                   	push   esi
c0002dc2:	53                   	push   ebx
c0002dc3:	83 ec 1c             	sub    esp,0x1c
c0002dc6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002dc8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002dcb:	0f 86 cc 01 00 00    	jbe    c0002f9d <get_fat+0x1ec>
c0002dd1:	89 c3                	mov    ebx,eax
c0002dd3:	8a 07                	mov    al,BYTE PTR [edi]
c0002dd5:	89 d6                	mov    esi,edx
c0002dd7:	3c 02                	cmp    al,0x2
c0002dd9:	0f 84 99 00 00 00    	je     c0002e78 <get_fat+0xc7>
c0002ddf:	77 09                	ja     c0002dea <get_fat+0x39>
c0002de1:	fe c8                	dec    al
c0002de3:	74 1a                	je     c0002dff <get_fat+0x4e>
c0002de5:	e9 b3 01 00 00       	jmp    c0002f9d <get_fat+0x1ec>
c0002dea:	3c 03                	cmp    al,0x3
c0002dec:	0f 84 b5 00 00 00    	je     c0002ea7 <get_fat+0xf6>
c0002df2:	3c 04                	cmp    al,0x4
c0002df4:	0f 84 e3 00 00 00    	je     c0002edd <get_fat+0x12c>
c0002dfa:	e9 9e 01 00 00       	jmp    c0002f9d <get_fat+0x1ec>
c0002dff:	89 d3                	mov    ebx,edx
c0002e01:	31 c9                	xor    ecx,ecx
c0002e03:	d1 eb                	shr    ebx,1
c0002e05:	89 f8                	mov    eax,edi
c0002e07:	01 d3                	add    ebx,edx
c0002e09:	89 da                	mov    edx,ebx
c0002e0b:	c1 ea 09             	shr    edx,0x9
c0002e0e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e11:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e14:	e8 16 f4 ff ff       	call   c000222f <move_window>
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	74 08                	je     c0002e25 <get_fat+0x74>
c0002e1d:	83 c9 ff             	or     ecx,0xffffffff
c0002e20:	e9 78 01 00 00       	jmp    c0002f9d <get_fat+0x1ec>
c0002e25:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e28:	31 c9                	xor    ecx,ecx
c0002e2a:	89 ea                	mov    edx,ebp
c0002e2c:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e32:	c1 ea 09             	shr    edx,0x9
c0002e35:	89 f8                	mov    eax,edi
c0002e37:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e3a:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e3e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e41:	e8 e9 f3 ff ff       	call   c000222f <move_window>
c0002e46:	85 c0                	test   eax,eax
c0002e48:	75 d3                	jne    c0002e1d <get_fat+0x6c>
c0002e4a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e50:	0f b6 c3             	movzx  eax,bl
c0002e53:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e58:	c1 e3 08             	shl    ebx,0x8
c0002e5b:	09 c3                	or     ebx,eax
c0002e5d:	89 d9                	mov    ecx,ebx
c0002e5f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e65:	83 e6 01             	and    esi,0x1
c0002e68:	0f 84 2f 01 00 00    	je     c0002f9d <get_fat+0x1ec>
c0002e6e:	89 d9                	mov    ecx,ebx
c0002e70:	c1 e9 04             	shr    ecx,0x4
c0002e73:	e9 25 01 00 00       	jmp    c0002f9d <get_fat+0x1ec>
c0002e78:	c1 ea 08             	shr    edx,0x8
c0002e7b:	31 c9                	xor    ecx,ecx
c0002e7d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e80:	89 f8                	mov    eax,edi
c0002e82:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e85:	e8 a5 f3 ff ff       	call   c000222f <move_window>
c0002e8a:	85 c0                	test   eax,eax
c0002e8c:	75 8f                	jne    c0002e1d <get_fat+0x6c>
c0002e8e:	01 f6                	add    esi,esi
c0002e90:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e96:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e9a:	e8 b9 eb ff ff       	call   c0001a58 <ld_word>
c0002e9f:	0f b7 c8             	movzx  ecx,ax
c0002ea2:	e9 f6 00 00 00       	jmp    c0002f9d <get_fat+0x1ec>
c0002ea7:	c1 ea 07             	shr    edx,0x7
c0002eaa:	31 c9                	xor    ecx,ecx
c0002eac:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002eaf:	89 f8                	mov    eax,edi
c0002eb1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eb4:	e8 76 f3 ff ff       	call   c000222f <move_window>
c0002eb9:	85 c0                	test   eax,eax
c0002ebb:	0f 85 5c ff ff ff    	jne    c0002e1d <get_fat+0x6c>
c0002ec1:	c1 e6 02             	shl    esi,0x2
c0002ec4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002eca:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ece:	e8 92 eb ff ff       	call   c0001a65 <ld_dword>
c0002ed3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ed8:	e9 b4 00 00 00       	jmp    c0002f91 <get_fat+0x1e0>
c0002edd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ee0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ee3:	89 d1                	mov    ecx,edx
c0002ee5:	09 c1                	or     ecx,eax
c0002ee7:	74 06                	je     c0002eef <get_fat+0x13e>
c0002ee9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eed:	75 0f                	jne    c0002efe <get_fat+0x14d>
c0002eef:	b9 01 00 00 00       	mov    ecx,0x1
c0002ef4:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ef8:	0f 85 9f 00 00 00    	jne    c0002f9d <get_fat+0x1ec>
c0002efe:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002f02:	89 f5                	mov    ebp,esi
c0002f04:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002f09:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002f0c:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002f0f:	80 f9 02             	cmp    cl,0x2
c0002f12:	75 35                	jne    c0002f49 <get_fat+0x198>
c0002f14:	83 c0 ff             	add    eax,0xffffffff
c0002f17:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f1c:	83 d2 ff             	adc    edx,0xffffffff
c0002f1f:	31 db                	xor    ebx,ebx
c0002f21:	53                   	push   ebx
c0002f22:	51                   	push   ecx
c0002f23:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f27:	c1 ea 09             	shr    edx,0x9
c0002f2a:	52                   	push   edx
c0002f2b:	50                   	push   eax
c0002f2c:	e8 db c5 01 00       	call   c001f50c <__udivdi3>
c0002f31:	83 c4 10             	add    esp,0x10
c0002f34:	b9 01 00 00 00       	mov    ecx,0x1
c0002f39:	39 c5                	cmp    ebp,eax
c0002f3b:	77 60                	ja     c0002f9d <get_fat+0x1ec>
c0002f3d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f42:	74 59                	je     c0002f9d <get_fat+0x1ec>
c0002f44:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f47:	eb 54                	jmp    c0002f9d <get_fat+0x1ec>
c0002f49:	80 f9 03             	cmp    cl,0x3
c0002f4c:	75 05                	jne    c0002f53 <get_fat+0x1a2>
c0002f4e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f51:	77 f1                	ja     c0002f44 <get_fat+0x193>
c0002f53:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f58:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f5c:	75 3f                	jne    c0002f9d <get_fat+0x1ec>
c0002f5e:	89 f2                	mov    edx,esi
c0002f60:	31 c9                	xor    ecx,ecx
c0002f62:	c1 ea 07             	shr    edx,0x7
c0002f65:	89 f8                	mov    eax,edi
c0002f67:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f6a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f6d:	e8 bd f2 ff ff       	call   c000222f <move_window>
c0002f72:	85 c0                	test   eax,eax
c0002f74:	0f 85 a3 fe ff ff    	jne    c0002e1d <get_fat+0x6c>
c0002f7a:	c1 e6 02             	shl    esi,0x2
c0002f7d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f83:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f87:	e8 d9 ea ff ff       	call   c0001a65 <ld_dword>
c0002f8c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f91:	89 c1                	mov    ecx,eax
c0002f93:	eb 08                	jmp    c0002f9d <get_fat+0x1ec>
c0002f95:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9a:	89 c8                	mov    eax,ecx
c0002f9c:	c3                   	ret    
c0002f9d:	83 c4 1c             	add    esp,0x1c
c0002fa0:	89 c8                	mov    eax,ecx
c0002fa2:	5b                   	pop    ebx
c0002fa3:	5e                   	pop    esi
c0002fa4:	5f                   	pop    edi
c0002fa5:	5d                   	pop    ebp
c0002fa6:	c3                   	ret    

c0002fa7 <dir_sdi>:
c0002fa7:	55                   	push   ebp
c0002fa8:	57                   	push   edi
c0002fa9:	56                   	push   esi
c0002faa:	53                   	push   ebx
c0002fab:	89 c3                	mov    ebx,eax
c0002fad:	83 ec 1c             	sub    esp,0x1c
c0002fb0:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fb2:	31 c0                	xor    eax,eax
c0002fb4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fb7:	0f 94 c0             	sete   al
c0002fba:	48                   	dec    eax
c0002fbb:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fc0:	05 00 00 00 10       	add    eax,0x10000000
c0002fc5:	39 d0                	cmp    eax,edx
c0002fc7:	77 0a                	ja     c0002fd3 <dir_sdi+0x2c>
c0002fc9:	b8 02 00 00 00       	mov    eax,0x2
c0002fce:	e9 c4 00 00 00       	jmp    c0003097 <dir_sdi+0xf0>
c0002fd3:	89 d6                	mov    esi,edx
c0002fd5:	f6 c2 1f             	test   dl,0x1f
c0002fd8:	75 ef                	jne    c0002fc9 <dir_sdi+0x22>
c0002fda:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fdd:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fe0:	85 c9                	test   ecx,ecx
c0002fe2:	75 2d                	jne    c0003011 <dir_sdi+0x6a>
c0002fe4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fe7:	77 1b                	ja     c0003004 <dir_sdi+0x5d>
c0002fe9:	89 f2                	mov    edx,esi
c0002feb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fef:	c1 ea 05             	shr    edx,0x5
c0002ff2:	39 c2                	cmp    edx,eax
c0002ff4:	73 d3                	jae    c0002fc9 <dir_sdi+0x22>
c0002ff6:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002ff9:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002ffc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fff:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003002:	eb 4b                	jmp    c000304f <dir_sdi+0xa8>
c0003004:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003007:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000300b:	85 c0                	test   eax,eax
c000300d:	74 da                	je     c0002fe9 <dir_sdi+0x42>
c000300f:	89 c1                	mov    ecx,eax
c0003011:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003015:	c1 e5 09             	shl    ebp,0x9
c0003018:	89 ca                	mov    edx,ecx
c000301a:	39 ee                	cmp    esi,ebp
c000301c:	72 1c                	jb     c000303a <dir_sdi+0x93>
c000301e:	89 d8                	mov    eax,ebx
c0003020:	e8 8c fd ff ff       	call   c0002db1 <get_fat>
c0003025:	89 c1                	mov    ecx,eax
c0003027:	83 f8 ff             	cmp    eax,0xffffffff
c000302a:	74 66                	je     c0003092 <dir_sdi+0xeb>
c000302c:	83 f8 01             	cmp    eax,0x1
c000302f:	76 98                	jbe    c0002fc9 <dir_sdi+0x22>
c0003031:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003034:	76 93                	jbe    c0002fc9 <dir_sdi+0x22>
c0003036:	29 ee                	sub    esi,ebp
c0003038:	eb de                	jmp    c0003018 <dir_sdi+0x71>
c000303a:	89 f8                	mov    eax,edi
c000303c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003040:	e8 ac ec ff ff       	call   c0001cf1 <clst2sect>
c0003045:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003049:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000304c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000304f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003052:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003055:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003058:	89 d1                	mov    ecx,edx
c000305a:	09 c1                	or     ecx,eax
c000305c:	0f 84 67 ff ff ff    	je     c0002fc9 <dir_sdi+0x22>
c0003062:	89 f1                	mov    ecx,esi
c0003064:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000306c:	c1 e9 09             	shr    ecx,0x9
c000306f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003073:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003077:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000307b:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003081:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003084:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003088:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000308b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000308e:	31 c0                	xor    eax,eax
c0003090:	eb 05                	jmp    c0003097 <dir_sdi+0xf0>
c0003092:	b8 01 00 00 00       	mov    eax,0x1
c0003097:	83 c4 1c             	add    esp,0x1c
c000309a:	5b                   	pop    ebx
c000309b:	5e                   	pop    esi
c000309c:	5f                   	pop    edi
c000309d:	5d                   	pop    ebp
c000309e:	c3                   	ret    

c000309f <create_chain>:
c000309f:	55                   	push   ebp
c00030a0:	89 c5                	mov    ebp,eax
c00030a2:	57                   	push   edi
c00030a3:	56                   	push   esi
c00030a4:	53                   	push   ebx
c00030a5:	83 ec 1c             	sub    esp,0x1c
c00030a8:	85 d2                	test   edx,edx
c00030aa:	8b 30                	mov    esi,DWORD PTR [eax]
c00030ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00030b0:	75 0e                	jne    c00030c0 <create_chain+0x21>
c00030b2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030b5:	85 ff                	test   edi,edi
c00030b7:	74 39                	je     c00030f2 <create_chain+0x53>
c00030b9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030bc:	77 39                	ja     c00030f7 <create_chain+0x58>
c00030be:	eb 32                	jmp    c00030f2 <create_chain+0x53>
c00030c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030c4:	e8 e8 fc ff ff       	call   c0002db1 <get_fat>
c00030c9:	89 c3                	mov    ebx,eax
c00030cb:	83 f8 01             	cmp    eax,0x1
c00030ce:	77 0a                	ja     c00030da <create_chain+0x3b>
c00030d0:	bb 01 00 00 00       	mov    ebx,0x1
c00030d5:	e9 bc 01 00 00       	jmp    c0003296 <create_chain+0x1f7>
c00030da:	83 f8 ff             	cmp    eax,0xffffffff
c00030dd:	0f 84 60 01 00 00    	je     c0003243 <create_chain+0x1a4>
c00030e3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030e6:	0f 87 aa 01 00 00    	ja     c0003296 <create_chain+0x1f7>
c00030ec:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030f0:	eb 05                	jmp    c00030f7 <create_chain+0x58>
c00030f2:	bf 01 00 00 00       	mov    edi,0x1
c00030f7:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030fb:	75 07                	jne    c0003104 <create_chain+0x65>
c00030fd:	31 db                	xor    ebx,ebx
c00030ff:	e9 92 01 00 00       	jmp    c0003296 <create_chain+0x1f7>
c0003104:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003107:	75 74                	jne    c000317d <create_chain+0xde>
c0003109:	b9 01 00 00 00       	mov    ecx,0x1
c000310e:	89 fa                	mov    edx,edi
c0003110:	89 f0                	mov    eax,esi
c0003112:	e8 2d f9 ff ff       	call   c0002a44 <find_bitmap>
c0003117:	89 c3                	mov    ebx,eax
c0003119:	8d 40 ff             	lea    eax,[eax-0x1]
c000311c:	83 f8 fd             	cmp    eax,0xfffffffd
c000311f:	0f 87 71 01 00 00    	ja     c0003296 <create_chain+0x1f7>
c0003125:	83 ec 0c             	sub    esp,0xc
c0003128:	b9 01 00 00 00       	mov    ecx,0x1
c000312d:	89 da                	mov    edx,ebx
c000312f:	89 f0                	mov    eax,esi
c0003131:	6a 01                	push   0x1
c0003133:	e8 bf f9 ff ff       	call   c0002af7 <change_bitmap>
c0003138:	83 c4 10             	add    esp,0x10
c000313b:	83 f8 02             	cmp    eax,0x2
c000313e:	74 90                	je     c00030d0 <create_chain+0x31>
c0003140:	83 f8 01             	cmp    eax,0x1
c0003143:	0f 84 fa 00 00 00    	je     c0003243 <create_chain+0x1a4>
c0003149:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000314e:	75 09                	jne    c0003159 <create_chain+0xba>
c0003150:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003154:	e9 0e 01 00 00       	jmp    c0003267 <create_chain+0x1c8>
c0003159:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000315d:	0f 85 e9 00 00 00    	jne    c000324c <create_chain+0x1ad>
c0003163:	8d 57 01             	lea    edx,[edi+0x1]
c0003166:	39 da                	cmp    edx,ebx
c0003168:	0f 84 f9 00 00 00    	je     c0003267 <create_chain+0x1c8>
c000316e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003171:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003175:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003178:	e9 cf 00 00 00       	jmp    c000324c <create_chain+0x1ad>
c000317d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003181:	75 41                	jne    c00031c4 <create_chain+0x125>
c0003183:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003186:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003189:	77 05                	ja     c0003190 <create_chain+0xf1>
c000318b:	bb 02 00 00 00       	mov    ebx,0x2
c0003190:	89 da                	mov    edx,ebx
c0003192:	89 e8                	mov    eax,ebp
c0003194:	e8 18 fc ff ff       	call   c0002db1 <get_fat>
c0003199:	83 f8 01             	cmp    eax,0x1
c000319c:	0f 84 a6 00 00 00    	je     c0003248 <create_chain+0x1a9>
c00031a2:	83 f8 ff             	cmp    eax,0xffffffff
c00031a5:	0f 84 9d 00 00 00    	je     c0003248 <create_chain+0x1a9>
c00031ab:	85 c0                	test   eax,eax
c00031ad:	74 11                	je     c00031c0 <create_chain+0x121>
c00031af:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00031b2:	83 f8 01             	cmp    eax,0x1
c00031b5:	76 0d                	jbe    c00031c4 <create_chain+0x125>
c00031b7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031ba:	76 08                	jbe    c00031c4 <create_chain+0x125>
c00031bc:	89 c7                	mov    edi,eax
c00031be:	eb 04                	jmp    c00031c4 <create_chain+0x125>
c00031c0:	85 db                	test   ebx,ebx
c00031c2:	75 36                	jne    c00031fa <create_chain+0x15b>
c00031c4:	89 fb                	mov    ebx,edi
c00031c6:	43                   	inc    ebx
c00031c7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031ca:	77 0e                	ja     c00031da <create_chain+0x13b>
c00031cc:	83 ff 01             	cmp    edi,0x1
c00031cf:	0f 86 28 ff ff ff    	jbe    c00030fd <create_chain+0x5e>
c00031d5:	bb 02 00 00 00       	mov    ebx,0x2
c00031da:	89 da                	mov    edx,ebx
c00031dc:	89 e8                	mov    eax,ebp
c00031de:	e8 ce fb ff ff       	call   c0002db1 <get_fat>
c00031e3:	85 c0                	test   eax,eax
c00031e5:	74 13                	je     c00031fa <create_chain+0x15b>
c00031e7:	83 f8 01             	cmp    eax,0x1
c00031ea:	74 5c                	je     c0003248 <create_chain+0x1a9>
c00031ec:	83 f8 ff             	cmp    eax,0xffffffff
c00031ef:	74 57                	je     c0003248 <create_chain+0x1a9>
c00031f1:	39 fb                	cmp    ebx,edi
c00031f3:	75 d1                	jne    c00031c6 <create_chain+0x127>
c00031f5:	e9 03 ff ff ff       	jmp    c00030fd <create_chain+0x5e>
c00031fa:	83 c9 ff             	or     ecx,0xffffffff
c00031fd:	89 da                	mov    edx,ebx
c00031ff:	89 f0                	mov    eax,esi
c0003201:	e8 a6 f9 ff ff       	call   c0002bac <put_fat>
c0003206:	85 c0                	test   eax,eax
c0003208:	75 14                	jne    c000321e <create_chain+0x17f>
c000320a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000320f:	74 0d                	je     c000321e <create_chain+0x17f>
c0003211:	89 d9                	mov    ecx,ebx
c0003213:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003217:	89 f0                	mov    eax,esi
c0003219:	e8 8e f9 ff ff       	call   c0002bac <put_fat>
c000321e:	85 c0                	test   eax,eax
c0003220:	75 1a                	jne    c000323c <create_chain+0x19d>
c0003222:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003225:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003228:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000322b:	8d 51 fe             	lea    edx,[ecx-0x2]
c000322e:	39 d0                	cmp    eax,edx
c0003230:	77 04                	ja     c0003236 <create_chain+0x197>
c0003232:	48                   	dec    eax
c0003233:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003236:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000323a:	eb 5a                	jmp    c0003296 <create_chain+0x1f7>
c000323c:	48                   	dec    eax
c000323d:	0f 85 8d fe ff ff    	jne    c00030d0 <create_chain+0x31>
c0003243:	83 cb ff             	or     ebx,0xffffffff
c0003246:	eb 4e                	jmp    c0003296 <create_chain+0x1f7>
c0003248:	89 c3                	mov    ebx,eax
c000324a:	eb 4a                	jmp    c0003296 <create_chain+0x1f7>
c000324c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003250:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003253:	41                   	inc    ecx
c0003254:	39 d9                	cmp    ecx,ebx
c0003256:	75 19                	jne    c0003271 <create_chain+0x1d2>
c0003258:	b9 02 00 00 00       	mov    ecx,0x2
c000325d:	85 d2                	test   edx,edx
c000325f:	74 03                	je     c0003264 <create_chain+0x1c5>
c0003261:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003264:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003267:	85 c0                	test   eax,eax
c0003269:	0f 85 61 fe ff ff    	jne    c00030d0 <create_chain+0x31>
c000326f:	eb b1                	jmp    c0003222 <create_chain+0x183>
c0003271:	85 d2                	test   edx,edx
c0003273:	75 07                	jne    c000327c <create_chain+0x1dd>
c0003275:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000327c:	89 d9                	mov    ecx,ebx
c000327e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003282:	89 e8                	mov    eax,ebp
c0003284:	e8 b9 fa ff ff       	call   c0002d42 <fill_last_frag>
c0003289:	85 c0                	test   eax,eax
c000328b:	75 af                	jne    c000323c <create_chain+0x19d>
c000328d:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003294:	eb 8c                	jmp    c0003222 <create_chain+0x183>
c0003296:	83 c4 1c             	add    esp,0x1c
c0003299:	89 d8                	mov    eax,ebx
c000329b:	5b                   	pop    ebx
c000329c:	5e                   	pop    esi
c000329d:	5f                   	pop    edi
c000329e:	5d                   	pop    ebp
c000329f:	c3                   	ret    

c00032a0 <remove_chain>:
c00032a0:	55                   	push   ebp
c00032a1:	57                   	push   edi
c00032a2:	56                   	push   esi
c00032a3:	53                   	push   ebx
c00032a4:	83 ec 1c             	sub    esp,0x1c
c00032a7:	83 fa 01             	cmp    edx,0x1
c00032aa:	8b 18                	mov    ebx,DWORD PTR [eax]
c00032ac:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032b0:	77 0a                	ja     c00032bc <remove_chain+0x1c>
c00032b2:	b8 02 00 00 00       	mov    eax,0x2
c00032b7:	e9 24 01 00 00       	jmp    c00033e0 <remove_chain+0x140>
c00032bc:	89 d6                	mov    esi,edx
c00032be:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032c1:	76 ef                	jbe    c00032b2 <remove_chain+0x12>
c00032c3:	89 c7                	mov    edi,eax
c00032c5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032ca:	75 06                	jne    c00032d2 <remove_chain+0x32>
c00032cc:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032d0:	eb 54                	jmp    c0003326 <remove_chain+0x86>
c00032d2:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032d5:	75 06                	jne    c00032dd <remove_chain+0x3d>
c00032d7:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032db:	74 ef                	je     c00032cc <remove_chain+0x2c>
c00032dd:	83 c9 ff             	or     ecx,0xffffffff
c00032e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032e4:	89 d8                	mov    eax,ebx
c00032e6:	e8 c1 f8 ff ff       	call   c0002bac <put_fat>
c00032eb:	85 c0                	test   eax,eax
c00032ed:	74 dd                	je     c00032cc <remove_chain+0x2c>
c00032ef:	e9 ec 00 00 00       	jmp    c00033e0 <remove_chain+0x140>
c00032f4:	83 f8 01             	cmp    eax,0x1
c00032f7:	74 b9                	je     c00032b2 <remove_chain+0x12>
c00032f9:	83 f8 ff             	cmp    eax,0xffffffff
c00032fc:	74 6d                	je     c000336b <remove_chain+0xcb>
c00032fe:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003301:	75 6f                	jne    c0003372 <remove_chain+0xd2>
c0003303:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003306:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003309:	8d 51 fe             	lea    edx,[ecx-0x2]
c000330c:	39 d0                	cmp    eax,edx
c000330e:	73 08                	jae    c0003318 <remove_chain+0x78>
c0003310:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003314:	40                   	inc    eax
c0003315:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003318:	8d 4e 01             	lea    ecx,[esi+0x1]
c000331b:	39 e9                	cmp    ecx,ebp
c000331d:	75 64                	jne    c0003383 <remove_chain+0xe3>
c000331f:	89 ee                	mov    esi,ebp
c0003321:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003324:	76 0f                	jbe    c0003335 <remove_chain+0x95>
c0003326:	89 f2                	mov    edx,esi
c0003328:	89 f8                	mov    eax,edi
c000332a:	e8 82 fa ff ff       	call   c0002db1 <get_fat>
c000332f:	89 c5                	mov    ebp,eax
c0003331:	85 c0                	test   eax,eax
c0003333:	75 bf                	jne    c00032f4 <remove_chain+0x54>
c0003335:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003338:	0f 85 a0 00 00 00    	jne    c00033de <remove_chain+0x13e>
c000333e:	eb 6c                	jmp    c00033ac <remove_chain+0x10c>
c0003340:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003343:	84 c0                	test   al,al
c0003345:	75 7d                	jne    c00033c4 <remove_chain+0x124>
c0003347:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000334a:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000334e:	0f 84 86 00 00 00    	je     c00033da <remove_chain+0x13a>
c0003354:	89 da                	mov    edx,ebx
c0003356:	89 f8                	mov    eax,edi
c0003358:	e8 54 fa ff ff       	call   c0002db1 <get_fat>
c000335d:	83 f8 01             	cmp    eax,0x1
c0003360:	0f 86 4c ff ff ff    	jbe    c00032b2 <remove_chain+0x12>
c0003366:	83 f8 ff             	cmp    eax,0xffffffff
c0003369:	75 4e                	jne    c00033b9 <remove_chain+0x119>
c000336b:	b8 01 00 00 00       	mov    eax,0x1
c0003370:	eb 6e                	jmp    c00033e0 <remove_chain+0x140>
c0003372:	31 c9                	xor    ecx,ecx
c0003374:	89 f2                	mov    edx,esi
c0003376:	89 d8                	mov    eax,ebx
c0003378:	e8 2f f8 ff ff       	call   c0002bac <put_fat>
c000337d:	85 c0                	test   eax,eax
c000337f:	74 82                	je     c0003303 <remove_chain+0x63>
c0003381:	eb 5d                	jmp    c00033e0 <remove_chain+0x140>
c0003383:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003386:	75 1b                	jne    c00033a3 <remove_chain+0x103>
c0003388:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000338c:	83 ec 0c             	sub    esp,0xc
c000338f:	6a 00                	push   0x0
c0003391:	89 d8                	mov    eax,ebx
c0003393:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003397:	e8 5b f7 ff ff       	call   c0002af7 <change_bitmap>
c000339c:	83 c4 10             	add    esp,0x10
c000339f:	85 c0                	test   eax,eax
c00033a1:	75 3d                	jne    c00033e0 <remove_chain+0x140>
c00033a3:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00033a7:	e9 73 ff ff ff       	jmp    c000331f <remove_chain+0x7f>
c00033ac:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033b1:	75 8d                	jne    c0003340 <remove_chain+0xa0>
c00033b3:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033b7:	eb 25                	jmp    c00033de <remove_chain+0x13e>
c00033b9:	8d 53 01             	lea    edx,[ebx+0x1]
c00033bc:	89 c3                	mov    ebx,eax
c00033be:	39 c2                	cmp    edx,eax
c00033c0:	74 88                	je     c000334a <remove_chain+0xaa>
c00033c2:	eb 1a                	jmp    c00033de <remove_chain+0x13e>
c00033c4:	3c 03                	cmp    al,0x3
c00033c6:	75 16                	jne    c00033de <remove_chain+0x13e>
c00033c8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033cb:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033cf:	77 0d                	ja     c00033de <remove_chain+0x13e>
c00033d1:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033d4:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033d8:	72 04                	jb     c00033de <remove_chain+0x13e>
c00033da:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033de:	31 c0                	xor    eax,eax
c00033e0:	83 c4 1c             	add    esp,0x1c
c00033e3:	5b                   	pop    ebx
c00033e4:	5e                   	pop    esi
c00033e5:	5f                   	pop    edi
c00033e6:	5d                   	pop    ebp
c00033e7:	c3                   	ret    

c00033e8 <dir_clear>:
c00033e8:	55                   	push   ebp
c00033e9:	57                   	push   edi
c00033ea:	56                   	push   esi
c00033eb:	89 c6                	mov    esi,eax
c00033ed:	53                   	push   ebx
c00033ee:	83 ec 1c             	sub    esp,0x1c
c00033f1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033f5:	e8 a1 ed ff ff       	call   c000219b <sync_window>
c00033fa:	85 c0                	test   eax,eax
c00033fc:	0f 85 de 00 00 00    	jne    c00034e0 <dir_clear+0xf8>
c0003402:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003406:	89 f0                	mov    eax,esi
c0003408:	e8 e4 e8 ff ff       	call   c0001cf1 <clst2sect>
c000340d:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003410:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003414:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003418:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000341b:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c000341e:	b9 00 02 00 00       	mov    ecx,0x200
c0003423:	31 d2                	xor    edx,edx
c0003425:	89 e8                	mov    eax,ebp
c0003427:	e8 c0 e6 ff ff       	call   c0001aec <mem_set>
c000342c:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003430:	c1 e3 09             	shl    ebx,0x9
c0003433:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003439:	76 1f                	jbe    c000345a <dir_clear+0x72>
c000343b:	bb 00 80 00 00       	mov    ebx,0x8000
c0003440:	eb 18                	jmp    c000345a <dir_clear+0x72>
c0003442:	83 ec 0c             	sub    esp,0xc
c0003445:	53                   	push   ebx
c0003446:	e8 f3 4d 00 00       	call   c000823e <ff_memalloc>
c000344b:	83 c4 10             	add    esp,0x10
c000344e:	89 c7                	mov    edi,eax
c0003450:	85 c0                	test   eax,eax
c0003452:	0f 85 8f 00 00 00    	jne    c00034e7 <dir_clear+0xff>
c0003458:	d1 eb                	shr    ebx,1
c000345a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003460:	77 e0                	ja     c0003442 <dir_clear+0x5a>
c0003462:	31 db                	xor    ebx,ebx
c0003464:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003468:	39 d8                	cmp    eax,ebx
c000346a:	76 66                	jbe    c00034d2 <dir_clear+0xea>
c000346c:	83 ec 0c             	sub    esp,0xc
c000346f:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003473:	6a 01                	push   0x1
c0003475:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003479:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000347d:	55                   	push   ebp
c000347e:	50                   	push   eax
c000347f:	e8 9f e5 ff ff       	call   c0001a23 <disk_write>
c0003484:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003489:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000348e:	83 c4 20             	add    esp,0x20
c0003491:	85 c0                	test   eax,eax
c0003493:	75 3d                	jne    c00034d2 <dir_clear+0xea>
c0003495:	43                   	inc    ebx
c0003496:	eb cc                	jmp    c0003464 <dir_clear+0x7c>
c0003498:	83 ec 0c             	sub    esp,0xc
c000349b:	89 d8                	mov    eax,ebx
c000349d:	31 d2                	xor    edx,edx
c000349f:	55                   	push   ebp
c00034a0:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00034a4:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00034a8:	52                   	push   edx
c00034a9:	50                   	push   eax
c00034aa:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00034ae:	57                   	push   edi
c00034af:	50                   	push   eax
c00034b0:	e8 6e e5 ff ff       	call   c0001a23 <disk_write>
c00034b5:	83 c4 20             	add    esp,0x20
c00034b8:	85 c0                	test   eax,eax
c00034ba:	75 0a                	jne    c00034c6 <dir_clear+0xde>
c00034bc:	01 eb                	add    ebx,ebp
c00034be:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034c2:	39 d8                	cmp    eax,ebx
c00034c4:	77 d2                	ja     c0003498 <dir_clear+0xb0>
c00034c6:	83 ec 0c             	sub    esp,0xc
c00034c9:	57                   	push   edi
c00034ca:	e8 85 4d 00 00       	call   c0008254 <ff_memfree>
c00034cf:	83 c4 10             	add    esp,0x10
c00034d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034d6:	39 d8                	cmp    eax,ebx
c00034d8:	0f 95 c0             	setne  al
c00034db:	0f b6 c0             	movzx  eax,al
c00034de:	eb 19                	jmp    c00034f9 <dir_clear+0x111>
c00034e0:	b8 01 00 00 00       	mov    eax,0x1
c00034e5:	eb 12                	jmp    c00034f9 <dir_clear+0x111>
c00034e7:	89 d9                	mov    ecx,ebx
c00034e9:	31 d2                	xor    edx,edx
c00034eb:	c1 eb 09             	shr    ebx,0x9
c00034ee:	e8 f9 e5 ff ff       	call   c0001aec <mem_set>
c00034f3:	89 dd                	mov    ebp,ebx
c00034f5:	31 db                	xor    ebx,ebx
c00034f7:	eb c5                	jmp    c00034be <dir_clear+0xd6>
c00034f9:	83 c4 1c             	add    esp,0x1c
c00034fc:	5b                   	pop    ebx
c00034fd:	5e                   	pop    esi
c00034fe:	5f                   	pop    edi
c00034ff:	5d                   	pop    ebp
c0003500:	c3                   	ret    

c0003501 <dir_next>:
c0003501:	55                   	push   ebp
c0003502:	57                   	push   edi
c0003503:	56                   	push   esi
c0003504:	53                   	push   ebx
c0003505:	89 c3                	mov    ebx,eax
c0003507:	83 ec 1c             	sub    esp,0x1c
c000350a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000350c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000350f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003513:	8d 78 20             	lea    edi,[eax+0x20]
c0003516:	31 c0                	xor    eax,eax
c0003518:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000351c:	0f 94 c0             	sete   al
c000351f:	48                   	dec    eax
c0003520:	25 00 00 20 f0       	and    eax,0xf0200000
c0003525:	05 00 00 00 10       	add    eax,0x10000000
c000352a:	39 f8                	cmp    eax,edi
c000352c:	77 0e                	ja     c000353c <dir_next+0x3b>
c000352e:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003535:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000353c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000353f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003542:	89 ce                	mov    esi,ecx
c0003544:	b8 04 00 00 00       	mov    eax,0x4
c0003549:	09 d6                	or     esi,edx
c000354b:	0f 84 da 00 00 00    	je     c000362b <dir_next+0x12a>
c0003551:	89 f8                	mov    eax,edi
c0003553:	25 ff 01 00 00       	and    eax,0x1ff
c0003558:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000355c:	0f 85 b9 00 00 00    	jne    c000361b <dir_next+0x11a>
c0003562:	83 c2 01             	add    edx,0x1
c0003565:	83 d1 00             	adc    ecx,0x0
c0003568:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000356b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000356e:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003571:	85 d2                	test   edx,edx
c0003573:	75 29                	jne    c000359e <dir_next+0x9d>
c0003575:	89 fa                	mov    edx,edi
c0003577:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000357b:	c1 ea 05             	shr    edx,0x5
c000357e:	39 c2                	cmp    edx,eax
c0003580:	0f 82 95 00 00 00    	jb     c000361b <dir_next+0x11a>
c0003586:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000358d:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003594:	b8 04 00 00 00       	mov    eax,0x4
c0003599:	e9 8d 00 00 00       	jmp    c000362b <dir_next+0x12a>
c000359e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00035a2:	89 f9                	mov    ecx,edi
c00035a4:	48                   	dec    eax
c00035a5:	c1 e9 09             	shr    ecx,0x9
c00035a8:	85 c8                	test   eax,ecx
c00035aa:	75 6f                	jne    c000361b <dir_next+0x11a>
c00035ac:	89 d8                	mov    eax,ebx
c00035ae:	e8 fe f7 ff ff       	call   c0002db1 <get_fat>
c00035b3:	89 c6                	mov    esi,eax
c00035b5:	83 f8 01             	cmp    eax,0x1
c00035b8:	77 07                	ja     c00035c1 <dir_next+0xc0>
c00035ba:	b8 02 00 00 00       	mov    eax,0x2
c00035bf:	eb 6a                	jmp    c000362b <dir_next+0x12a>
c00035c1:	83 f8 ff             	cmp    eax,0xffffffff
c00035c4:	75 07                	jne    c00035cd <dir_next+0xcc>
c00035c6:	b8 01 00 00 00       	mov    eax,0x1
c00035cb:	eb 5e                	jmp    c000362b <dir_next+0x12a>
c00035cd:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035d0:	77 37                	ja     c0003609 <dir_next+0x108>
c00035d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035d7:	74 ad                	je     c0003586 <dir_next+0x85>
c00035d9:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035dc:	89 d8                	mov    eax,ebx
c00035de:	e8 bc fa ff ff       	call   c000309f <create_chain>
c00035e3:	89 c6                	mov    esi,eax
c00035e5:	b8 07 00 00 00       	mov    eax,0x7
c00035ea:	85 f6                	test   esi,esi
c00035ec:	74 3d                	je     c000362b <dir_next+0x12a>
c00035ee:	83 fe 01             	cmp    esi,0x1
c00035f1:	74 c7                	je     c00035ba <dir_next+0xb9>
c00035f3:	83 fe ff             	cmp    esi,0xffffffff
c00035f6:	74 ce                	je     c00035c6 <dir_next+0xc5>
c00035f8:	89 f2                	mov    edx,esi
c00035fa:	89 e8                	mov    eax,ebp
c00035fc:	e8 e7 fd ff ff       	call   c00033e8 <dir_clear>
c0003601:	85 c0                	test   eax,eax
c0003603:	75 c1                	jne    c00035c6 <dir_next+0xc5>
c0003605:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003609:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000360c:	89 f2                	mov    edx,esi
c000360e:	89 e8                	mov    eax,ebp
c0003610:	e8 dc e6 ff ff       	call   c0001cf1 <clst2sect>
c0003615:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003618:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000361b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000361f:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003622:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003626:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003629:	31 c0                	xor    eax,eax
c000362b:	83 c4 1c             	add    esp,0x1c
c000362e:	5b                   	pop    ebx
c000362f:	5e                   	pop    esi
c0003630:	5f                   	pop    edi
c0003631:	5d                   	pop    ebp
c0003632:	c3                   	ret    

c0003633 <load_xdir>:
c0003633:	55                   	push   ebp
c0003634:	57                   	push   edi
c0003635:	56                   	push   esi
c0003636:	89 c6                	mov    esi,eax
c0003638:	53                   	push   ebx
c0003639:	83 ec 1c             	sub    esp,0x1c
c000363c:	8b 00                	mov    eax,DWORD PTR [eax]
c000363e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003641:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003644:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003647:	e8 e3 eb ff ff       	call   c000222f <move_window>
c000364c:	89 c3                	mov    ebx,eax
c000364e:	85 c0                	test   eax,eax
c0003650:	0f 85 0c 01 00 00    	jne    c0003762 <load_xdir+0x12f>
c0003656:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003659:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000365c:	0f 85 fb 00 00 00    	jne    c000375d <load_xdir+0x12a>
c0003662:	89 f8                	mov    eax,edi
c0003664:	b9 20 00 00 00       	mov    ecx,0x20
c0003669:	e8 69 e4 ff ff       	call   c0001ad7 <mem_cpy>
c000366e:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003672:	40                   	inc    eax
c0003673:	c1 e0 05             	shl    eax,0x5
c0003676:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000367a:	83 e8 60             	sub    eax,0x60
c000367d:	3d 00 02 00 00       	cmp    eax,0x200
c0003682:	0f 87 d5 00 00 00    	ja     c000375d <load_xdir+0x12a>
c0003688:	31 d2                	xor    edx,edx
c000368a:	89 f0                	mov    eax,esi
c000368c:	e8 70 fe ff ff       	call   c0003501 <dir_next>
c0003691:	89 c3                	mov    ebx,eax
c0003693:	83 f8 04             	cmp    eax,0x4
c0003696:	0f 84 c1 00 00 00    	je     c000375d <load_xdir+0x12a>
c000369c:	85 c0                	test   eax,eax
c000369e:	0f 85 be 00 00 00    	jne    c0003762 <load_xdir+0x12f>
c00036a4:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036a7:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036aa:	8b 06                	mov    eax,DWORD PTR [esi]
c00036ac:	e8 7e eb ff ff       	call   c000222f <move_window>
c00036b1:	89 c3                	mov    ebx,eax
c00036b3:	85 c0                	test   eax,eax
c00036b5:	0f 85 a7 00 00 00    	jne    c0003762 <load_xdir+0x12f>
c00036bb:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036be:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036c1:	0f 85 96 00 00 00    	jne    c000375d <load_xdir+0x12a>
c00036c7:	8d 47 20             	lea    eax,[edi+0x20]
c00036ca:	b9 20 00 00 00       	mov    ecx,0x20
c00036cf:	e8 03 e4 ff ff       	call   c0001ad7 <mem_cpy>
c00036d4:	31 d2                	xor    edx,edx
c00036d6:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036da:	b9 0f 00 00 00       	mov    ecx,0xf
c00036df:	83 c0 2c             	add    eax,0x2c
c00036e2:	f7 f1                	div    ecx
c00036e4:	c1 e0 05             	shl    eax,0x5
c00036e7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036eb:	77 70                	ja     c000375d <load_xdir+0x12a>
c00036ed:	bd 40 00 00 00       	mov    ebp,0x40
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	89 f0                	mov    eax,esi
c00036f6:	e8 06 fe ff ff       	call   c0003501 <dir_next>
c00036fb:	89 c3                	mov    ebx,eax
c00036fd:	83 f8 04             	cmp    eax,0x4
c0003700:	74 5b                	je     c000375d <load_xdir+0x12a>
c0003702:	85 c0                	test   eax,eax
c0003704:	75 5c                	jne    c0003762 <load_xdir+0x12f>
c0003706:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003709:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000370c:	8b 06                	mov    eax,DWORD PTR [esi]
c000370e:	e8 1c eb ff ff       	call   c000222f <move_window>
c0003713:	89 c3                	mov    ebx,eax
c0003715:	85 c0                	test   eax,eax
c0003717:	75 49                	jne    c0003762 <load_xdir+0x12f>
c0003719:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000371c:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000371f:	75 3c                	jne    c000375d <load_xdir+0x12a>
c0003721:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003727:	77 0d                	ja     c0003736 <load_xdir+0x103>
c0003729:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000372c:	b9 20 00 00 00       	mov    ecx,0x20
c0003731:	e8 a1 e3 ff ff       	call   c0001ad7 <mem_cpy>
c0003736:	83 c5 20             	add    ebp,0x20
c0003739:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000373d:	77 b3                	ja     c00036f2 <load_xdir+0xbf>
c000373f:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003745:	77 1b                	ja     c0003762 <load_xdir+0x12f>
c0003747:	89 f8                	mov    eax,edi
c0003749:	e8 d8 e7 ff ff       	call   c0001f26 <xdir_sum>
c000374e:	89 c1                	mov    ecx,eax
c0003750:	8d 47 02             	lea    eax,[edi+0x2]
c0003753:	e8 00 e3 ff ff       	call   c0001a58 <ld_word>
c0003758:	66 39 c1             	cmp    cx,ax
c000375b:	74 05                	je     c0003762 <load_xdir+0x12f>
c000375d:	bb 02 00 00 00       	mov    ebx,0x2
c0003762:	83 c4 1c             	add    esp,0x1c
c0003765:	89 d8                	mov    eax,ebx
c0003767:	5b                   	pop    ebx
c0003768:	5e                   	pop    esi
c0003769:	5f                   	pop    edi
c000376a:	5d                   	pop    ebp
c000376b:	c3                   	ret    

c000376c <load_obj_xdir>:
c000376c:	53                   	push   ebx
c000376d:	89 c3                	mov    ebx,eax
c000376f:	83 ec 08             	sub    esp,0x8
c0003772:	8b 02                	mov    eax,DWORD PTR [edx]
c0003774:	89 03                	mov    DWORD PTR [ebx],eax
c0003776:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003779:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000377c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000377f:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003782:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003785:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000378c:	30 c0                	xor    al,al
c000378e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003795:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003798:	89 d8                	mov    eax,ebx
c000379a:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c000379d:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00037a0:	e8 02 f8 ff ff       	call   c0002fa7 <dir_sdi>
c00037a5:	85 c0                	test   eax,eax
c00037a7:	75 0b                	jne    c00037b4 <load_obj_xdir+0x48>
c00037a9:	83 c4 08             	add    esp,0x8
c00037ac:	89 d8                	mov    eax,ebx
c00037ae:	5b                   	pop    ebx
c00037af:	e9 7f fe ff ff       	jmp    c0003633 <load_xdir>
c00037b4:	83 c4 08             	add    esp,0x8
c00037b7:	5b                   	pop    ebx
c00037b8:	c3                   	ret    

c00037b9 <dir_read>:
c00037b9:	55                   	push   ebp
c00037ba:	bd 04 00 00 00       	mov    ebp,0x4
c00037bf:	57                   	push   edi
c00037c0:	56                   	push   esi
c00037c1:	be ff ff ff ff       	mov    esi,0xffffffff
c00037c6:	53                   	push   ebx
c00037c7:	89 c3                	mov    ebx,eax
c00037c9:	83 ec 1c             	sub    esp,0x1c
c00037cc:	8b 38                	mov    edi,DWORD PTR [eax]
c00037ce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037d2:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037d7:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037da:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037dd:	89 c8                	mov    eax,ecx
c00037df:	09 d0                	or     eax,edx
c00037e1:	0f 84 25 01 00 00    	je     c000390c <dir_read+0x153>
c00037e7:	89 f8                	mov    eax,edi
c00037e9:	e8 41 ea ff ff       	call   c000222f <move_window>
c00037ee:	89 c5                	mov    ebp,eax
c00037f0:	85 c0                	test   eax,eax
c00037f2:	0f 85 23 01 00 00    	jne    c000391b <dir_read+0x162>
c00037f8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037fb:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037fd:	84 c9                	test   cl,cl
c00037ff:	0f 84 11 01 00 00    	je     c0003916 <dir_read+0x15d>
c0003805:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003808:	75 48                	jne    c0003852 <dir_read+0x99>
c000380a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000380f:	74 10                	je     c0003821 <dir_read+0x68>
c0003811:	80 f9 83             	cmp    cl,0x83
c0003814:	0f 85 dd 00 00 00    	jne    c00038f7 <dir_read+0x13e>
c000381a:	31 ed                	xor    ebp,ebp
c000381c:	e9 08 01 00 00       	jmp    c0003929 <dir_read+0x170>
c0003821:	80 f9 85             	cmp    cl,0x85
c0003824:	0f 85 cd 00 00 00    	jne    c00038f7 <dir_read+0x13e>
c000382a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000382d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003830:	89 d8                	mov    eax,ebx
c0003832:	e8 fc fd ff ff       	call   c0003633 <load_xdir>
c0003837:	89 c5                	mov    ebp,eax
c0003839:	85 c0                	test   eax,eax
c000383b:	0f 85 da 00 00 00    	jne    c000391b <dir_read+0x162>
c0003841:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003844:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003847:	83 e0 3f             	and    eax,0x3f
c000384a:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000384d:	e9 d7 00 00 00       	jmp    c0003929 <dir_read+0x170>
c0003852:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003855:	83 e0 3f             	and    eax,0x3f
c0003858:	80 f9 e5             	cmp    cl,0xe5
c000385b:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000385f:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003862:	0f 84 8a 00 00 00    	je     c00038f2 <dir_read+0x139>
c0003868:	80 f9 2e             	cmp    cl,0x2e
c000386b:	0f 84 81 00 00 00    	je     c00038f2 <dir_read+0x139>
c0003871:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003875:	83 e0 1f             	and    eax,0x1f
c0003878:	83 f8 08             	cmp    eax,0x8
c000387b:	0f 94 c0             	sete   al
c000387e:	0f b6 c0             	movzx  eax,al
c0003881:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003885:	75 6b                	jne    c00038f2 <dir_read+0x139>
c0003887:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000388c:	75 44                	jne    c00038d2 <dir_read+0x119>
c000388e:	f6 c1 40             	test   cl,0x40
c0003891:	74 12                	je     c00038a5 <dir_read+0xec>
c0003893:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003896:	83 e1 bf             	and    ecx,0xffffffbf
c0003899:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000389d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00038a0:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00038a3:	eb 06                	jmp    c00038ab <dir_read+0xf2>
c00038a5:	89 f0                	mov    eax,esi
c00038a7:	38 c8                	cmp    al,cl
c00038a9:	75 47                	jne    c00038f2 <dir_read+0x139>
c00038ab:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038af:	be ff ff ff ff       	mov    esi,0xffffffff
c00038b4:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038b7:	75 3e                	jne    c00038f7 <dir_read+0x13e>
c00038b9:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038bc:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038c0:	e8 95 e4 ff ff       	call   c0001d5a <pick_lfn>
c00038c5:	85 c0                	test   eax,eax
c00038c7:	74 2e                	je     c00038f7 <dir_read+0x13e>
c00038c9:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038cd:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038d0:	eb 25                	jmp    c00038f7 <dir_read+0x13e>
c00038d2:	89 f0                	mov    eax,esi
c00038d4:	84 c0                	test   al,al
c00038d6:	75 11                	jne    c00038e9 <dir_read+0x130>
c00038d8:	89 d0                	mov    eax,edx
c00038da:	e8 35 e6 ff ff       	call   c0001f14 <sum_sfn>
c00038df:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038e3:	0f 84 31 ff ff ff    	je     c000381a <dir_read+0x61>
c00038e9:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038f0:	eb 37                	jmp    c0003929 <dir_read+0x170>
c00038f2:	be ff ff ff ff       	mov    esi,0xffffffff
c00038f7:	31 d2                	xor    edx,edx
c00038f9:	89 d8                	mov    eax,ebx
c00038fb:	e8 01 fc ff ff       	call   c0003501 <dir_next>
c0003900:	89 c5                	mov    ebp,eax
c0003902:	85 c0                	test   eax,eax
c0003904:	0f 84 cd fe ff ff    	je     c00037d7 <dir_read+0x1e>
c000390a:	eb 0f                	jmp    c000391b <dir_read+0x162>
c000390c:	85 ed                	test   ebp,ebp
c000390e:	0f 84 06 ff ff ff    	je     c000381a <dir_read+0x61>
c0003914:	eb 05                	jmp    c000391b <dir_read+0x162>
c0003916:	bd 04 00 00 00       	mov    ebp,0x4
c000391b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003922:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003929:	83 c4 1c             	add    esp,0x1c
c000392c:	89 e8                	mov    eax,ebp
c000392e:	5b                   	pop    ebx
c000392f:	5e                   	pop    esi
c0003930:	5f                   	pop    edi
c0003931:	5d                   	pop    ebp
c0003932:	c3                   	ret    

c0003933 <dir_alloc>:
c0003933:	55                   	push   ebp
c0003934:	89 d5                	mov    ebp,edx
c0003936:	57                   	push   edi
c0003937:	31 d2                	xor    edx,edx
c0003939:	56                   	push   esi
c000393a:	53                   	push   ebx
c000393b:	89 c3                	mov    ebx,eax
c000393d:	83 ec 0c             	sub    esp,0xc
c0003940:	8b 38                	mov    edi,DWORD PTR [eax]
c0003942:	e8 60 f6 ff ff       	call   c0002fa7 <dir_sdi>
c0003947:	85 c0                	test   eax,eax
c0003949:	75 4e                	jne    c0003999 <dir_alloc+0x66>
c000394b:	31 f6                	xor    esi,esi
c000394d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003950:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003953:	89 f8                	mov    eax,edi
c0003955:	e8 d5 e8 ff ff       	call   c000222f <move_window>
c000395a:	85 c0                	test   eax,eax
c000395c:	75 3b                	jne    c0003999 <dir_alloc+0x66>
c000395e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003961:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003964:	8a 12                	mov    dl,BYTE PTR [edx]
c0003966:	75 07                	jne    c000396f <dir_alloc+0x3c>
c0003968:	f7 d2                	not    edx
c000396a:	c0 ea 07             	shr    dl,0x7
c000396d:	eb 0d                	jmp    c000397c <dir_alloc+0x49>
c000396f:	80 fa e5             	cmp    dl,0xe5
c0003972:	0f 94 c1             	sete   cl
c0003975:	84 d2                	test   dl,dl
c0003977:	0f 94 c2             	sete   dl
c000397a:	09 ca                	or     edx,ecx
c000397c:	84 d2                	test   dl,dl
c000397e:	74 07                	je     c0003987 <dir_alloc+0x54>
c0003980:	46                   	inc    esi
c0003981:	39 ee                	cmp    esi,ebp
c0003983:	75 04                	jne    c0003989 <dir_alloc+0x56>
c0003985:	eb 1c                	jmp    c00039a3 <dir_alloc+0x70>
c0003987:	31 f6                	xor    esi,esi
c0003989:	ba 01 00 00 00       	mov    edx,0x1
c000398e:	89 d8                	mov    eax,ebx
c0003990:	e8 6c fb ff ff       	call   c0003501 <dir_next>
c0003995:	85 c0                	test   eax,eax
c0003997:	74 b4                	je     c000394d <dir_alloc+0x1a>
c0003999:	83 f8 04             	cmp    eax,0x4
c000399c:	75 05                	jne    c00039a3 <dir_alloc+0x70>
c000399e:	b8 07 00 00 00       	mov    eax,0x7
c00039a3:	83 c4 0c             	add    esp,0xc
c00039a6:	5b                   	pop    ebx
c00039a7:	5e                   	pop    esi
c00039a8:	5f                   	pop    edi
c00039a9:	5d                   	pop    ebp
c00039aa:	c3                   	ret    

c00039ab <store_xdir>:
c00039ab:	55                   	push   ebp
c00039ac:	57                   	push   edi
c00039ad:	89 c7                	mov    edi,eax
c00039af:	56                   	push   esi
c00039b0:	53                   	push   ebx
c00039b1:	83 ec 0c             	sub    esp,0xc
c00039b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00039b6:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039b9:	89 e8                	mov    eax,ebp
c00039bb:	e8 66 e5 ff ff       	call   c0001f26 <xdir_sum>
c00039c0:	0f b7 d0             	movzx  edx,ax
c00039c3:	8d 45 02             	lea    eax,[ebp+0x2]
c00039c6:	e8 ff e0 ff ff       	call   c0001aca <st_word>
c00039cb:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039ce:	89 f8                	mov    eax,edi
c00039d0:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039d4:	e8 ce f5 ff ff       	call   c0002fa7 <dir_sdi>
c00039d9:	89 c6                	mov    esi,eax
c00039db:	85 f6                	test   esi,esi
c00039dd:	75 3d                	jne    c0003a1c <store_xdir+0x71>
c00039df:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039e2:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039e5:	8b 07                	mov    eax,DWORD PTR [edi]
c00039e7:	e8 43 e8 ff ff       	call   c000222f <move_window>
c00039ec:	89 c6                	mov    esi,eax
c00039ee:	85 c0                	test   eax,eax
c00039f0:	75 2a                	jne    c0003a1c <store_xdir+0x71>
c00039f2:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039f5:	b9 20 00 00 00       	mov    ecx,0x20
c00039fa:	89 ea                	mov    edx,ebp
c00039fc:	e8 d6 e0 ff ff       	call   c0001ad7 <mem_cpy>
c0003a01:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a03:	85 db                	test   ebx,ebx
c0003a05:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003a09:	74 11                	je     c0003a1c <store_xdir+0x71>
c0003a0b:	31 d2                	xor    edx,edx
c0003a0d:	89 f8                	mov    eax,edi
c0003a0f:	e8 ed fa ff ff       	call   c0003501 <dir_next>
c0003a14:	83 c5 20             	add    ebp,0x20
c0003a17:	89 c6                	mov    esi,eax
c0003a19:	4b                   	dec    ebx
c0003a1a:	eb bf                	jmp    c00039db <store_xdir+0x30>
c0003a1c:	89 f0                	mov    eax,esi
c0003a1e:	83 fe 02             	cmp    esi,0x2
c0003a21:	76 05                	jbe    c0003a28 <store_xdir+0x7d>
c0003a23:	b8 02 00 00 00       	mov    eax,0x2
c0003a28:	83 c4 0c             	add    esp,0xc
c0003a2b:	5b                   	pop    ebx
c0003a2c:	5e                   	pop    esi
c0003a2d:	5f                   	pop    edi
c0003a2e:	5d                   	pop    ebp
c0003a2f:	c3                   	ret    

c0003a30 <dir_remove>:
c0003a30:	57                   	push   edi
c0003a31:	56                   	push   esi
c0003a32:	53                   	push   ebx
c0003a33:	89 c3                	mov    ebx,eax
c0003a35:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a38:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a3a:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a3d:	83 fa ff             	cmp    edx,0xffffffff
c0003a40:	74 09                	je     c0003a4b <dir_remove+0x1b>
c0003a42:	e8 60 f5 ff ff       	call   c0002fa7 <dir_sdi>
c0003a47:	85 c0                	test   eax,eax
c0003a49:	75 41                	jne    c0003a8c <dir_remove+0x5c>
c0003a4b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a4e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a51:	89 f0                	mov    eax,esi
c0003a53:	e8 d7 e7 ff ff       	call   c000222f <move_window>
c0003a58:	85 c0                	test   eax,eax
c0003a5a:	75 26                	jne    c0003a82 <dir_remove+0x52>
c0003a5c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a5f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a62:	75 05                	jne    c0003a69 <dir_remove+0x39>
c0003a64:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a67:	eb 03                	jmp    c0003a6c <dir_remove+0x3c>
c0003a69:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a6c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a70:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a73:	73 17                	jae    c0003a8c <dir_remove+0x5c>
c0003a75:	31 d2                	xor    edx,edx
c0003a77:	89 d8                	mov    eax,ebx
c0003a79:	e8 83 fa ff ff       	call   c0003501 <dir_next>
c0003a7e:	85 c0                	test   eax,eax
c0003a80:	74 c9                	je     c0003a4b <dir_remove+0x1b>
c0003a82:	83 f8 04             	cmp    eax,0x4
c0003a85:	75 05                	jne    c0003a8c <dir_remove+0x5c>
c0003a87:	b8 02 00 00 00       	mov    eax,0x2
c0003a8c:	5b                   	pop    ebx
c0003a8d:	5e                   	pop    esi
c0003a8e:	5f                   	pop    edi
c0003a8f:	c3                   	ret    

c0003a90 <create_name>:
c0003a90:	55                   	push   ebp
c0003a91:	89 d5                	mov    ebp,edx
c0003a93:	57                   	push   edi
c0003a94:	89 c7                	mov    edi,eax
c0003a96:	56                   	push   esi
c0003a97:	31 f6                	xor    esi,esi
c0003a99:	53                   	push   ebx
c0003a9a:	83 ec 3c             	sub    esp,0x3c
c0003a9d:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a9f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003aa3:	8b 07                	mov    eax,DWORD PTR [edi]
c0003aa5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003aa8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003aac:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003ab0:	e8 7d e0 ff ff       	call   c0001b32 <tchar2uni>
c0003ab5:	89 c3                	mov    ebx,eax
c0003ab7:	83 f8 ff             	cmp    eax,0xffffffff
c0003aba:	75 0a                	jne    c0003ac6 <create_name+0x36>
c0003abc:	b8 06 00 00 00       	mov    eax,0x6
c0003ac1:	e9 83 02 00 00       	jmp    c0003d49 <create_name+0x2b9>
c0003ac6:	3d ff ff 00 00       	cmp    eax,0xffff
c0003acb:	76 0c                	jbe    c0003ad9 <create_name+0x49>
c0003acd:	c1 e8 10             	shr    eax,0x10
c0003ad0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ad4:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003ad8:	46                   	inc    esi
c0003ad9:	66 83 fb 1f          	cmp    bx,0x1f
c0003add:	89 d8                	mov    eax,ebx
c0003adf:	76 36                	jbe    c0003b17 <create_name+0x87>
c0003ae1:	66 83 fb 2f          	cmp    bx,0x2f
c0003ae5:	74 30                	je     c0003b17 <create_name+0x87>
c0003ae7:	66 83 fb 5c          	cmp    bx,0x5c
c0003aeb:	74 39                	je     c0003b26 <create_name+0x96>
c0003aed:	66 83 fb 7f          	cmp    bx,0x7f
c0003af1:	77 11                	ja     c0003b04 <create_name+0x74>
c0003af3:	0f b7 d3             	movzx  edx,bx
c0003af6:	b8 72 05 02 c0       	mov    eax,0xc0020572
c0003afb:	e8 1a e0 ff ff       	call   c0001b1a <chk_chr>
c0003b00:	85 c0                	test   eax,eax
c0003b02:	75 b8                	jne    c0003abc <create_name+0x2c>
c0003b04:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003b0a:	77 b0                	ja     c0003abc <create_name+0x2c>
c0003b0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b10:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b14:	46                   	inc    esi
c0003b15:	eb 95                	jmp    c0003aac <create_name+0x1c>
c0003b17:	66 83 f8 1f          	cmp    ax,0x1f
c0003b1b:	b3 04                	mov    bl,0x4
c0003b1d:	76 19                	jbe    c0003b38 <create_name+0xa8>
c0003b1f:	eb 05                	jmp    c0003b26 <create_name+0x96>
c0003b21:	40                   	inc    eax
c0003b22:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b2a:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b2c:	80 fa 2f             	cmp    dl,0x2f
c0003b2f:	74 f0                	je     c0003b21 <create_name+0x91>
c0003b31:	80 fa 5c             	cmp    dl,0x5c
c0003b34:	74 eb                	je     c0003b21 <create_name+0x91>
c0003b36:	31 db                	xor    ebx,ebx
c0003b38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b3c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b3f:	85 f6                	test   esi,esi
c0003b41:	74 18                	je     c0003b5b <create_name+0xcb>
c0003b43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b47:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b4c:	66 83 f8 20          	cmp    ax,0x20
c0003b50:	74 06                	je     c0003b58 <create_name+0xc8>
c0003b52:	66 83 f8 2e          	cmp    ax,0x2e
c0003b56:	75 03                	jne    c0003b5b <create_name+0xcb>
c0003b58:	4e                   	dec    esi
c0003b59:	eb e4                	jmp    c0003b3f <create_name+0xaf>
c0003b5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b5f:	31 ed                	xor    ebp,ebp
c0003b61:	85 f6                	test   esi,esi
c0003b63:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b69:	0f 84 4d ff ff ff    	je     c0003abc <create_name+0x2c>
c0003b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b73:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b76:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b7a:	66 83 f8 20          	cmp    ax,0x20
c0003b7e:	75 04                	jne    c0003b84 <create_name+0xf4>
c0003b80:	89 d5                	mov    ebp,edx
c0003b82:	eb eb                	jmp    c0003b6f <create_name+0xdf>
c0003b84:	85 ed                	test   ebp,ebp
c0003b86:	75 06                	jne    c0003b8e <create_name+0xfe>
c0003b88:	66 83 f8 2e          	cmp    ax,0x2e
c0003b8c:	75 08                	jne    c0003b96 <create_name+0x106>
c0003b8e:	83 cb 03             	or     ebx,0x3
c0003b91:	eb 03                	jmp    c0003b96 <create_name+0x106>
c0003b93:	4e                   	dec    esi
c0003b94:	74 0c                	je     c0003ba2 <create_name+0x112>
c0003b96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b9a:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ba0:	75 f1                	jne    c0003b93 <create_name+0x103>
c0003ba2:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ba7:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003baa:	ba 20 00 00 00       	mov    edx,0x20
c0003baf:	e8 38 df ff ff       	call   c0001aec <mem_set>
c0003bb4:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0003bbc:	31 c9                	xor    ecx,ecx
c0003bbe:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0003bc3:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bc6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bce:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bd2:	66 85 ed             	test   bp,bp
c0003bd5:	0f 84 1f 01 00 00    	je     c0003cfa <create_name+0x26a>
c0003bdb:	66 83 fd 20          	cmp    bp,0x20
c0003bdf:	74 0c                	je     c0003bed <create_name+0x15d>
c0003be1:	66 83 fd 2e          	cmp    bp,0x2e
c0003be5:	75 0f                	jne    c0003bf6 <create_name+0x166>
c0003be7:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003beb:	74 09                	je     c0003bf6 <create_name+0x166>
c0003bed:	83 cb 03             	or     ebx,0x3
c0003bf0:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
c0003bf4:	eb cd                	jmp    c0003bc3 <create_name+0x133>
c0003bf6:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0003bfa:	73 06                	jae    c0003c02 <create_name+0x172>
c0003bfc:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003c00:	75 3a                	jne    c0003c3c <create_name+0x1ac>
c0003c02:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0003c07:	75 08                	jne    c0003c11 <create_name+0x181>
c0003c09:	83 cb 03             	or     ebx,0x3
c0003c0c:	e9 e9 00 00 00       	jmp    c0003cfa <create_name+0x26a>
c0003c11:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003c15:	74 0d                	je     c0003c24 <create_name+0x194>
c0003c17:	83 cb 03             	or     ebx,0x3
c0003c1a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003c1e:	0f 87 d6 00 00 00    	ja     c0003cfa <create_name+0x26a>
c0003c24:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003c29:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0003c2d:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0003c35:	b9 08 00 00 00       	mov    ecx,0x8
c0003c3a:	eb b4                	jmp    c0003bf0 <create_name+0x160>
c0003c3c:	66 83 fd 7f          	cmp    bp,0x7f
c0003c40:	76 68                	jbe    c0003caa <create_name+0x21a>
c0003c42:	88 da                	mov    dl,bl
c0003c44:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c48:	83 ca 02             	or     edx,0x2
c0003c4b:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c4f:	50                   	push   eax
c0003c50:	50                   	push   eax
c0003c51:	68 b5 01 00 00       	push   0x1b5
c0003c56:	55                   	push   ebp
c0003c57:	e8 0f 46 00 00       	call   c000826b <ff_uni2oem>
c0003c5c:	83 c4 10             	add    esp,0x10
c0003c5f:	89 c5                	mov    ebp,eax
c0003c61:	a8 80                	test   al,0x80
c0003c63:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c67:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c6b:	74 0c                	je     c0003c79 <create_name+0x1e9>
c0003c6d:	83 e5 7f             	and    ebp,0x7f
c0003c70:	0f b6 ad c0 04 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdfb40]
c0003c77:	eb 2a                	jmp    c0003ca3 <create_name+0x213>
c0003c79:	66 3d ff 00          	cmp    ax,0xff
c0003c7d:	76 24                	jbe    c0003ca3 <create_name+0x213>
c0003c7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0003c83:	48                   	dec    eax
c0003c84:	39 c8                	cmp    eax,ecx
c0003c86:	77 0c                	ja     c0003c94 <create_name+0x204>
c0003c88:	83 cb 03             	or     ebx,0x3
c0003c8b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0003c8f:	e9 5c ff ff ff       	jmp    c0003bf0 <create_name+0x160>
c0003c94:	89 e8                	mov    eax,ebp
c0003c96:	88 d3                	mov    bl,dl
c0003c98:	66 c1 e8 08          	shr    ax,0x8
c0003c9c:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ca0:	41                   	inc    ecx
c0003ca1:	eb 4b                	jmp    c0003cee <create_name+0x25e>
c0003ca3:	66 85 ed             	test   bp,bp
c0003ca6:	88 d3                	mov    bl,dl
c0003ca8:	74 19                	je     c0003cc3 <create_name+0x233>
c0003caa:	0f b7 d5             	movzx  edx,bp
c0003cad:	b8 7b 05 02 c0       	mov    eax,0xc002057b
c0003cb2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003cb6:	e8 5f de ff ff       	call   c0001b1a <chk_chr>
c0003cbb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003cbf:	85 c0                	test   eax,eax
c0003cc1:	74 0a                	je     c0003ccd <create_name+0x23d>
c0003cc3:	83 cb 03             	or     ebx,0x3
c0003cc6:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ccb:	eb 21                	jmp    c0003cee <create_name+0x25e>
c0003ccd:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cd0:	66 83 f8 19          	cmp    ax,0x19
c0003cd4:	77 07                	ja     c0003cdd <create_name+0x24d>
c0003cd6:	80 4c 24 0b 02       	or     BYTE PTR [esp+0xb],0x2
c0003cdb:	eb 11                	jmp    c0003cee <create_name+0x25e>
c0003cdd:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ce0:	66 83 f8 19          	cmp    ax,0x19
c0003ce4:	77 08                	ja     c0003cee <create_name+0x25e>
c0003ce6:	80 4c 24 0b 01       	or     BYTE PTR [esp+0xb],0x1
c0003ceb:	83 ed 20             	sub    ebp,0x20
c0003cee:	89 e8                	mov    eax,ebp
c0003cf0:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cf4:	41                   	inc    ecx
c0003cf5:	e9 f6 fe ff ff       	jmp    c0003bf0 <create_name+0x160>
c0003cfa:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003cfe:	75 04                	jne    c0003d04 <create_name+0x274>
c0003d00:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003d04:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0003d09:	75 05                	jne    c0003d10 <create_name+0x280>
c0003d0b:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003d10:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003d14:	83 e0 0c             	and    eax,0xc
c0003d17:	3c 0c                	cmp    al,0xc
c0003d19:	74 0b                	je     c0003d26 <create_name+0x296>
c0003d1b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003d1f:	83 e0 03             	and    eax,0x3
c0003d22:	3c 03                	cmp    al,0x3
c0003d24:	75 05                	jne    c0003d2b <create_name+0x29b>
c0003d26:	83 cb 02             	or     ebx,0x2
c0003d29:	eb 19                	jmp    c0003d44 <create_name+0x2b4>
c0003d2b:	f6 c3 02             	test   bl,0x2
c0003d2e:	75 14                	jne    c0003d44 <create_name+0x2b4>
c0003d30:	f6 44 24 0b 01       	test   BYTE PTR [esp+0xb],0x1
c0003d35:	74 03                	je     c0003d3a <create_name+0x2aa>
c0003d37:	83 cb 10             	or     ebx,0x10
c0003d3a:	f6 44 24 0b 04       	test   BYTE PTR [esp+0xb],0x4
c0003d3f:	74 03                	je     c0003d44 <create_name+0x2b4>
c0003d41:	83 cb 08             	or     ebx,0x8
c0003d44:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d47:	31 c0                	xor    eax,eax
c0003d49:	83 c4 3c             	add    esp,0x3c
c0003d4c:	5b                   	pop    ebx
c0003d4d:	5e                   	pop    esi
c0003d4e:	5f                   	pop    edi
c0003d4f:	5d                   	pop    ebp
c0003d50:	c3                   	ret    

c0003d51 <xname_sum>:
c0003d51:	56                   	push   esi
c0003d52:	89 c6                	mov    esi,eax
c0003d54:	53                   	push   ebx
c0003d55:	31 db                	xor    ebx,ebx
c0003d57:	51                   	push   ecx
c0003d58:	83 c6 02             	add    esi,0x2
c0003d5b:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d5f:	66 85 c0             	test   ax,ax
c0003d62:	74 1f                	je     c0003d83 <xname_sum+0x32>
c0003d64:	66 d1 cb             	ror    bx,1
c0003d67:	83 ec 0c             	sub    esp,0xc
c0003d6a:	50                   	push   eax
c0003d6b:	e8 00 46 00 00       	call   c0008370 <ff_wtoupper>
c0003d70:	0f b6 d0             	movzx  edx,al
c0003d73:	01 d3                	add    ebx,edx
c0003d75:	83 c4 10             	add    esp,0x10
c0003d78:	66 c1 e8 08          	shr    ax,0x8
c0003d7c:	66 d1 cb             	ror    bx,1
c0003d7f:	01 c3                	add    ebx,eax
c0003d81:	eb d5                	jmp    c0003d58 <xname_sum+0x7>
c0003d83:	5a                   	pop    edx
c0003d84:	89 d8                	mov    eax,ebx
c0003d86:	5b                   	pop    ebx
c0003d87:	5e                   	pop    esi
c0003d88:	c3                   	ret    

c0003d89 <create_xdir>:
c0003d89:	55                   	push   ebp
c0003d8a:	b9 40 00 00 00       	mov    ecx,0x40
c0003d8f:	57                   	push   edi
c0003d90:	bd 01 00 00 00       	mov    ebp,0x1
c0003d95:	56                   	push   esi
c0003d96:	31 ff                	xor    edi,edi
c0003d98:	53                   	push   ebx
c0003d99:	89 c3                	mov    ebx,eax
c0003d9b:	83 ec 1c             	sub    esp,0x1c
c0003d9e:	be 40 00 00 00       	mov    esi,0x40
c0003da3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003da7:	31 d2                	xor    edx,edx
c0003da9:	e8 3e dd ff ff       	call   c0001aec <mem_set>
c0003dae:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003db1:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003db5:	31 c9                	xor    ecx,ecx
c0003db7:	8d 46 01             	lea    eax,[esi+0x1]
c0003dba:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003dbe:	83 c6 02             	add    esi,0x2
c0003dc1:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003dc5:	66 85 ed             	test   bp,bp
c0003dc8:	74 12                	je     c0003ddc <create_xdir+0x53>
c0003dca:	0f b6 c1             	movzx  eax,cl
c0003dcd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dd1:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003dd5:	66 83 fd 01          	cmp    bp,0x1
c0003dd9:	80 d9 ff             	sbb    cl,0xff
c0003ddc:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003ddf:	83 c6 02             	add    esi,0x2
c0003de2:	0f b7 d5             	movzx  edx,bp
c0003de5:	e8 e0 dc ff ff       	call   c0001aca <st_word>
c0003dea:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003df0:	75 d3                	jne    c0003dc5 <create_xdir+0x3c>
c0003df2:	8d 47 01             	lea    eax,[edi+0x1]
c0003df5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003df9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003dfd:	0f b6 c1             	movzx  eax,cl
c0003e00:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003e05:	74 07                	je     c0003e0e <create_xdir+0x85>
c0003e07:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003e0c:	eb a9                	jmp    c0003db7 <create_xdir+0x2e>
c0003e0e:	8d 47 02             	lea    eax,[edi+0x2]
c0003e11:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e14:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e17:	89 d0                	mov    eax,edx
c0003e19:	e8 33 ff ff ff       	call   c0003d51 <xname_sum>
c0003e1e:	83 c4 1c             	add    esp,0x1c
c0003e21:	0f b7 d0             	movzx  edx,ax
c0003e24:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e27:	5b                   	pop    ebx
c0003e28:	5e                   	pop    esi
c0003e29:	5f                   	pop    edi
c0003e2a:	5d                   	pop    ebp
c0003e2b:	e9 9a dc ff ff       	jmp    c0001aca <st_word>

c0003e30 <cmp_lfn>:
c0003e30:	55                   	push   ebp
c0003e31:	57                   	push   edi
c0003e32:	89 d7                	mov    edi,edx
c0003e34:	56                   	push   esi
c0003e35:	53                   	push   ebx
c0003e36:	83 ec 1c             	sub    esp,0x1c
c0003e39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e3d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e40:	e8 13 dc ff ff       	call   c0001a58 <ld_word>
c0003e45:	66 85 c0             	test   ax,ax
c0003e48:	74 07                	je     c0003e51 <cmp_lfn+0x21>
c0003e4a:	31 c0                	xor    eax,eax
c0003e4c:	e9 9a 00 00 00       	jmp    c0003eeb <cmp_lfn+0xbb>
c0003e51:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e53:	bd 01 00 00 00       	mov    ebp,0x1
c0003e58:	83 e3 3f             	and    ebx,0x3f
c0003e5b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e63:	4b                   	dec    ebx
c0003e64:	6b db 0d             	imul   ebx,ebx,0xd
c0003e67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e6b:	0f b6 80 40 05 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfac0]
c0003e72:	01 f8                	add    eax,edi
c0003e74:	e8 df db ff ff       	call   c0001a58 <ld_word>
c0003e79:	66 85 ed             	test   bp,bp
c0003e7c:	89 c6                	mov    esi,eax
c0003e7e:	74 3c                	je     c0003ebc <cmp_lfn+0x8c>
c0003e80:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e86:	77 c2                	ja     c0003e4a <cmp_lfn+0x1a>
c0003e88:	83 ec 0c             	sub    esp,0xc
c0003e8b:	0f b7 c0             	movzx  eax,ax
c0003e8e:	50                   	push   eax
c0003e8f:	e8 dc 44 00 00       	call   c0008370 <ff_wtoupper>
c0003e94:	89 c5                	mov    ebp,eax
c0003e96:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e99:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003ea1:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003ea5:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ea8:	e8 c3 44 00 00       	call   c0008370 <ff_wtoupper>
c0003ead:	83 c4 10             	add    esp,0x10
c0003eb0:	39 c5                	cmp    ebp,eax
c0003eb2:	75 96                	jne    c0003e4a <cmp_lfn+0x1a>
c0003eb4:	89 f5                	mov    ebp,esi
c0003eb6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003eba:	eb 04                	jmp    c0003ec0 <cmp_lfn+0x90>
c0003ebc:	66 46                	inc    si
c0003ebe:	75 8a                	jne    c0003e4a <cmp_lfn+0x1a>
c0003ec0:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003ec4:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ec9:	75 9c                	jne    c0003e67 <cmp_lfn+0x37>
c0003ecb:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ece:	74 16                	je     c0003ee6 <cmp_lfn+0xb6>
c0003ed0:	66 85 ed             	test   bp,bp
c0003ed3:	74 11                	je     c0003ee6 <cmp_lfn+0xb6>
c0003ed5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ed9:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ede:	0f 94 c0             	sete   al
c0003ee1:	0f b6 c0             	movzx  eax,al
c0003ee4:	eb 05                	jmp    c0003eeb <cmp_lfn+0xbb>
c0003ee6:	b8 01 00 00 00       	mov    eax,0x1
c0003eeb:	83 c4 1c             	add    esp,0x1c
c0003eee:	5b                   	pop    ebx
c0003eef:	5e                   	pop    esi
c0003ef0:	5f                   	pop    edi
c0003ef1:	5d                   	pop    ebp
c0003ef2:	c3                   	ret    

c0003ef3 <dir_find>:
c0003ef3:	55                   	push   ebp
c0003ef4:	31 d2                	xor    edx,edx
c0003ef6:	57                   	push   edi
c0003ef7:	56                   	push   esi
c0003ef8:	53                   	push   ebx
c0003ef9:	89 c3                	mov    ebx,eax
c0003efb:	83 ec 1c             	sub    esp,0x1c
c0003efe:	8b 30                	mov    esi,DWORD PTR [eax]
c0003f00:	e8 a2 f0 ff ff       	call   c0002fa7 <dir_sdi>
c0003f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f08:	85 c0                	test   eax,eax
c0003f0a:	0f 85 9f 01 00 00    	jne    c00040af <dir_find+0x1bc>
c0003f10:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f13:	0f 85 8e 00 00 00    	jne    c0003fa7 <dir_find+0xb4>
c0003f19:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f1c:	e8 30 fe ff ff       	call   c0003d51 <xname_sum>
c0003f21:	89 c5                	mov    ebp,eax
c0003f23:	31 d2                	xor    edx,edx
c0003f25:	89 d8                	mov    eax,ebx
c0003f27:	e8 8d f8 ff ff       	call   c00037b9 <dir_read>
c0003f2c:	85 c0                	test   eax,eax
c0003f2e:	0f 85 5f 01 00 00    	jne    c0004093 <dir_find+0x1a0>
c0003f34:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f37:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f3a:	e8 19 db ff ff       	call   c0001a58 <ld_word>
c0003f3f:	66 39 e8             	cmp    ax,bp
c0003f42:	75 df                	jne    c0003f23 <dir_find+0x30>
c0003f44:	0f b6 49 23          	movzx  ecx,BYTE PTR [ecx+0x23]
c0003f48:	31 ff                	xor    edi,edi
c0003f4a:	ba 40 00 00 00       	mov    edx,0x40
c0003f4f:	39 f9                	cmp    ecx,edi
c0003f51:	0f 84 4a 01 00 00    	je     c00040a1 <dir_find+0x1ae>
c0003f57:	f6 c2 1f             	test   dl,0x1f
c0003f5a:	75 03                	jne    c0003f5f <dir_find+0x6c>
c0003f5c:	83 c2 02             	add    edx,0x2
c0003f5f:	89 d0                	mov    eax,edx
c0003f61:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003f65:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f68:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f6c:	e8 e7 da ff ff       	call   c0001a58 <ld_word>
c0003f71:	83 ec 0c             	sub    esp,0xc
c0003f74:	0f b7 c0             	movzx  eax,ax
c0003f77:	50                   	push   eax
c0003f78:	e8 f3 43 00 00       	call   c0008370 <ff_wtoupper>
c0003f7d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f81:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f84:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0003f88:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f8b:	e8 e0 43 00 00       	call   c0008370 <ff_wtoupper>
c0003f90:	83 c4 10             	add    esp,0x10
c0003f93:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f97:	75 8a                	jne    c0003f23 <dir_find+0x30>
c0003f99:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f9d:	47                   	inc    edi
c0003f9e:	83 c2 02             	add    edx,0x2
c0003fa1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fa5:	eb a8                	jmp    c0003f4f <dir_find+0x5c>
c0003fa7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fae:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fb3:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fb8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003fbb:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fbe:	89 f0                	mov    eax,esi
c0003fc0:	e8 6a e2 ff ff       	call   c000222f <move_window>
c0003fc5:	85 c0                	test   eax,eax
c0003fc7:	0f 85 c6 00 00 00    	jne    c0004093 <dir_find+0x1a0>
c0003fcd:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fd0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fd3:	84 c9                	test   cl,cl
c0003fd5:	0f 84 bd 00 00 00    	je     c0004098 <dir_find+0x1a5>
c0003fdb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fde:	88 d0                	mov    al,dl
c0003fe0:	83 e0 3f             	and    eax,0x3f
c0003fe3:	80 f9 e5             	cmp    cl,0xe5
c0003fe6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fe9:	0f 84 87 00 00 00    	je     c0004076 <dir_find+0x183>
c0003fef:	80 e2 08             	and    dl,0x8
c0003ff2:	74 06                	je     c0003ffa <dir_find+0x107>
c0003ff4:	3c 0f                	cmp    al,0xf
c0003ff6:	75 7e                	jne    c0004076 <dir_find+0x183>
c0003ff8:	eb 04                	jmp    c0003ffe <dir_find+0x10b>
c0003ffa:	3c 0f                	cmp    al,0xf
c0003ffc:	75 4c                	jne    c000404a <dir_find+0x157>
c0003ffe:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004002:	75 7e                	jne    c0004082 <dir_find+0x18f>
c0004004:	f6 c1 40             	test   cl,0x40
c0004007:	74 12                	je     c000401b <dir_find+0x128>
c0004009:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000400c:	83 e1 bf             	and    ecx,0xffffffbf
c000400f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004013:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004016:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004019:	eb 06                	jmp    c0004021 <dir_find+0x12e>
c000401b:	89 f8                	mov    eax,edi
c000401d:	38 c8                	cmp    al,cl
c000401f:	75 5c                	jne    c000407d <dir_find+0x18a>
c0004021:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004025:	bf ff ff ff ff       	mov    edi,0xffffffff
c000402a:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000402d:	75 53                	jne    c0004082 <dir_find+0x18f>
c000402f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004032:	89 ea                	mov    edx,ebp
c0004034:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0004038:	e8 f3 fd ff ff       	call   c0003e30 <cmp_lfn>
c000403d:	85 c0                	test   eax,eax
c000403f:	74 41                	je     c0004082 <dir_find+0x18f>
c0004041:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0004045:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004048:	eb 38                	jmp    c0004082 <dir_find+0x18f>
c000404a:	89 f8                	mov    eax,edi
c000404c:	84 c0                	test   al,al
c000404e:	75 0d                	jne    c000405d <dir_find+0x16a>
c0004050:	89 e8                	mov    eax,ebp
c0004052:	e8 bd de ff ff       	call   c0001f14 <sum_sfn>
c0004057:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000405b:	74 52                	je     c00040af <dir_find+0x1bc>
c000405d:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004061:	75 13                	jne    c0004076 <dir_find+0x183>
c0004063:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004066:	b9 0b 00 00 00       	mov    ecx,0xb
c000406b:	89 e8                	mov    eax,ebp
c000406d:	e8 85 da ff ff       	call   c0001af7 <mem_cmp>
c0004072:	85 c0                	test   eax,eax
c0004074:	74 39                	je     c00040af <dir_find+0x1bc>
c0004076:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000407d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004082:	31 d2                	xor    edx,edx
c0004084:	89 d8                	mov    eax,ebx
c0004086:	e8 76 f4 ff ff       	call   c0003501 <dir_next>
c000408b:	85 c0                	test   eax,eax
c000408d:	0f 84 25 ff ff ff    	je     c0003fb8 <dir_find+0xc5>
c0004093:	89 04 24             	mov    DWORD PTR [esp],eax
c0004096:	eb 17                	jmp    c00040af <dir_find+0x1bc>
c0004098:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000409f:	eb 0e                	jmp    c00040af <dir_find+0x1bc>
c00040a1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040a4:	66 83 3c 48 00       	cmp    WORD PTR [eax+ecx*2],0x0
c00040a9:	0f 85 74 fe ff ff    	jne    c0003f23 <dir_find+0x30>
c00040af:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00040b2:	83 c4 1c             	add    esp,0x1c
c00040b5:	5b                   	pop    ebx
c00040b6:	5e                   	pop    esi
c00040b7:	5f                   	pop    edi
c00040b8:	5d                   	pop    ebp
c00040b9:	c3                   	ret    

c00040ba <dir_register>:
c00040ba:	55                   	push   ebp
c00040bb:	57                   	push   edi
c00040bc:	56                   	push   esi
c00040bd:	be 06 00 00 00       	mov    esi,0x6
c00040c2:	53                   	push   ebx
c00040c3:	83 ec 6c             	sub    esp,0x6c
c00040c6:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040ca:	0f 85 63 02 00 00    	jne    c0004333 <dir_register+0x279>
c00040d0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040d2:	31 ff                	xor    edi,edi
c00040d4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040d7:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040dc:	74 03                	je     c00040e1 <dir_register+0x27>
c00040de:	47                   	inc    edi
c00040df:	eb f6                	jmp    c00040d7 <dir_register+0x1d>
c00040e1:	89 c3                	mov    ebx,eax
c00040e3:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040e7:	0f 85 e1 00 00 00    	jne    c00041ce <dir_register+0x114>
c00040ed:	83 c7 0e             	add    edi,0xe
c00040f0:	b9 0f 00 00 00       	mov    ecx,0xf
c00040f5:	89 f8                	mov    eax,edi
c00040f7:	31 d2                	xor    edx,edx
c00040f9:	f7 f1                	div    ecx
c00040fb:	89 c7                	mov    edi,eax
c00040fd:	8d 50 02             	lea    edx,[eax+0x2]
c0004100:	89 d8                	mov    eax,ebx
c0004102:	e8 2c f8 ff ff       	call   c0003933 <dir_alloc>
c0004107:	89 c6                	mov    esi,eax
c0004109:	85 c0                	test   eax,eax
c000410b:	0f 85 22 02 00 00    	jne    c0004333 <dir_register+0x279>
c0004111:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004117:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000411a:	c1 e7 05             	shl    edi,0x5
c000411d:	29 f8                	sub    eax,edi
c000411f:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004122:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004125:	a8 04                	test   al,0x4
c0004127:	0f 84 91 00 00 00    	je     c00041be <dir_register+0x104>
c000412d:	83 e0 fb             	and    eax,0xfffffffb
c0004130:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004133:	89 d8                	mov    eax,ebx
c0004135:	e8 3d ec ff ff       	call   c0002d77 <fill_first_frag>
c000413a:	85 c0                	test   eax,eax
c000413c:	0f 85 ef 01 00 00    	jne    c0004331 <dir_register+0x277>
c0004142:	83 c9 ff             	or     ecx,0xffffffff
c0004145:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004148:	89 d8                	mov    eax,ebx
c000414a:	e8 f3 eb ff ff       	call   c0002d42 <fill_last_frag>
c000414f:	85 c0                	test   eax,eax
c0004151:	0f 85 da 01 00 00    	jne    c0004331 <dir_register+0x277>
c0004157:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000415b:	74 61                	je     c00041be <dir_register+0x104>
c000415d:	89 da                	mov    edx,ebx
c000415f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004163:	e8 04 f6 ff ff       	call   c000376c <load_obj_xdir>
c0004168:	85 c0                	test   eax,eax
c000416a:	0f 85 c1 01 00 00    	jne    c0004331 <dir_register+0x277>
c0004170:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004174:	c1 e2 09             	shl    edx,0x9
c0004177:	31 c9                	xor    ecx,ecx
c0004179:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000417c:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000417f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004182:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004185:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004188:	83 c0 38             	add    eax,0x38
c000418b:	e8 41 d9 ff ff       	call   c0001ad1 <st_qword>
c0004190:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004193:	83 c0 28             	add    eax,0x28
c0004196:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004199:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000419c:	e8 30 d9 ff ff       	call   c0001ad1 <st_qword>
c00041a1:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00041a4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00041a7:	83 c8 01             	or     eax,0x1
c00041aa:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00041ad:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041b1:	e8 f5 f7 ff ff       	call   c00039ab <store_xdir>
c00041b6:	85 c0                	test   eax,eax
c00041b8:	0f 85 73 01 00 00    	jne    c0004331 <dir_register+0x277>
c00041be:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041c1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041c4:	e8 c0 fb ff ff       	call   c0003d89 <create_xdir>
c00041c9:	e9 65 01 00 00       	jmp    c0004333 <dir_register+0x279>
c00041ce:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041d1:	b9 0c 00 00 00       	mov    ecx,0xc
c00041d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041da:	89 c2                	mov    edx,eax
c00041dc:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041e0:	e8 f2 d8 ff ff       	call   c0001ad7 <mem_cpy>
c00041e5:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041ea:	74 58                	je     c0004244 <dir_register+0x18a>
c00041ec:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041f0:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041f8:	83 ec 0c             	sub    esp,0xc
c00041fb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004202:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004206:	8d 54 24 24          	lea    edx,[esp+0x24]
c000420a:	e8 49 dc ff ff       	call   c0001e58 <gen_numname>
c000420f:	89 d8                	mov    eax,ebx
c0004211:	e8 dd fc ff ff       	call   c0003ef3 <dir_find>
c0004216:	83 c4 10             	add    esp,0x10
c0004219:	89 c6                	mov    esi,eax
c000421b:	85 c0                	test   eax,eax
c000421d:	75 15                	jne    c0004234 <dir_register+0x17a>
c000421f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004223:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004228:	75 ce                	jne    c00041f8 <dir_register+0x13e>
c000422a:	be 07 00 00 00       	mov    esi,0x7
c000422f:	e9 ff 00 00 00       	jmp    c0004333 <dir_register+0x279>
c0004234:	83 f8 04             	cmp    eax,0x4
c0004237:	0f 85 f6 00 00 00    	jne    c0004333 <dir_register+0x279>
c000423d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004241:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004244:	b9 01 00 00 00       	mov    ecx,0x1
c0004249:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000424e:	74 0f                	je     c000425f <dir_register+0x1a5>
c0004250:	b9 0d 00 00 00       	mov    ecx,0xd
c0004255:	8d 47 0c             	lea    eax,[edi+0xc]
c0004258:	31 d2                	xor    edx,edx
c000425a:	f7 f1                	div    ecx
c000425c:	8d 48 01             	lea    ecx,[eax+0x1]
c000425f:	89 ca                	mov    edx,ecx
c0004261:	89 d8                	mov    eax,ebx
c0004263:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004267:	e8 c7 f6 ff ff       	call   c0003933 <dir_alloc>
c000426c:	89 c6                	mov    esi,eax
c000426e:	85 c0                	test   eax,eax
c0004270:	0f 85 bd 00 00 00    	jne    c0004333 <dir_register+0x279>
c0004276:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000427a:	89 cf                	mov    edi,ecx
c000427c:	4f                   	dec    edi
c000427d:	74 6d                	je     c00042ec <dir_register+0x232>
c000427f:	89 f8                	mov    eax,edi
c0004281:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004284:	c1 e0 05             	shl    eax,0x5
c0004287:	29 c2                	sub    edx,eax
c0004289:	89 d8                	mov    eax,ebx
c000428b:	e8 17 ed ff ff       	call   c0002fa7 <dir_sdi>
c0004290:	89 c6                	mov    esi,eax
c0004292:	85 c0                	test   eax,eax
c0004294:	0f 85 99 00 00 00    	jne    c0004333 <dir_register+0x279>
c000429a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000429e:	e8 71 dc ff ff       	call   c0001f14 <sum_sfn>
c00042a3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00042a7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042aa:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042ad:	89 e8                	mov    eax,ebp
c00042af:	e8 7b df ff ff       	call   c000222f <move_window>
c00042b4:	89 c6                	mov    esi,eax
c00042b6:	85 c0                	test   eax,eax
c00042b8:	75 79                	jne    c0004333 <dir_register+0x279>
c00042ba:	83 ec 0c             	sub    esp,0xc
c00042bd:	89 f8                	mov    eax,edi
c00042bf:	0f b6 c8             	movzx  ecx,al
c00042c2:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00042c7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042ca:	52                   	push   edx
c00042cb:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042ce:	e8 01 db ff ff       	call   c0001dd4 <put_lfn>
c00042d3:	31 d2                	xor    edx,edx
c00042d5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042d9:	89 d8                	mov    eax,ebx
c00042db:	e8 21 f2 ff ff       	call   c0003501 <dir_next>
c00042e0:	83 c4 10             	add    esp,0x10
c00042e3:	89 c6                	mov    esi,eax
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 4a                	jne    c0004333 <dir_register+0x279>
c00042e9:	4f                   	dec    edi
c00042ea:	75 bb                	jne    c00042a7 <dir_register+0x1ed>
c00042ec:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042ef:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042f2:	89 e8                	mov    eax,ebp
c00042f4:	e8 36 df ff ff       	call   c000222f <move_window>
c00042f9:	89 c6                	mov    esi,eax
c00042fb:	85 c0                	test   eax,eax
c00042fd:	75 34                	jne    c0004333 <dir_register+0x279>
c00042ff:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004302:	b9 20 00 00 00       	mov    ecx,0x20
c0004307:	31 d2                	xor    edx,edx
c0004309:	e8 de d7 ff ff       	call   c0001aec <mem_set>
c000430e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004311:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004315:	b9 0b 00 00 00       	mov    ecx,0xb
c000431a:	e8 b8 d7 ff ff       	call   c0001ad7 <mem_cpy>
c000431f:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004322:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004325:	83 e0 18             	and    eax,0x18
c0004328:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000432b:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000432f:	eb 02                	jmp    c0004333 <dir_register+0x279>
c0004331:	89 c6                	mov    esi,eax
c0004333:	83 c4 6c             	add    esp,0x6c
c0004336:	89 f0                	mov    eax,esi
c0004338:	5b                   	pop    ebx
c0004339:	5e                   	pop    esi
c000433a:	5f                   	pop    edi
c000433b:	5d                   	pop    ebp
c000433c:	c3                   	ret    

c000433d <sync_fs>:
c000433d:	56                   	push   esi
c000433e:	53                   	push   ebx
c000433f:	53                   	push   ebx
c0004340:	89 c3                	mov    ebx,eax
c0004342:	e8 54 de ff ff       	call   c000219b <sync_window>
c0004347:	85 c0                	test   eax,eax
c0004349:	0f 85 b1 00 00 00    	jne    c0004400 <sync_fs+0xc3>
c000434f:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004352:	0f 85 8e 00 00 00    	jne    c00043e6 <sync_fs+0xa9>
c0004358:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000435c:	0f 85 84 00 00 00    	jne    c00043e6 <sync_fs+0xa9>
c0004362:	8d 73 54             	lea    esi,[ebx+0x54]
c0004365:	b9 00 02 00 00       	mov    ecx,0x200
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 f0                	mov    eax,esi
c000436e:	e8 79 d7 ff ff       	call   c0001aec <mem_set>
c0004373:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004379:	ba 55 aa 00 00       	mov    edx,0xaa55
c000437e:	e8 47 d7 ff ff       	call   c0001aca <st_word>
c0004383:	ba 52 52 61 41       	mov    edx,0x41615252
c0004388:	89 f0                	mov    eax,esi
c000438a:	e8 3f d7 ff ff       	call   c0001ace <st_dword>
c000438f:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004395:	ba 72 72 41 61       	mov    edx,0x61417272
c000439a:	e8 2f d7 ff ff       	call   c0001ace <st_dword>
c000439f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043a2:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00043a8:	e8 21 d7 ff ff       	call   c0001ace <st_dword>
c00043ad:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043b0:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043b6:	e8 13 d7 ff ff       	call   c0001ace <st_dword>
c00043bb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043be:	83 c0 01             	add    eax,0x1
c00043c1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043c4:	83 d2 00             	adc    edx,0x0
c00043c7:	83 ec 0c             	sub    esp,0xc
c00043ca:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043cd:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043d0:	6a 01                	push   0x1
c00043d2:	52                   	push   edx
c00043d3:	50                   	push   eax
c00043d4:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043d8:	56                   	push   esi
c00043d9:	50                   	push   eax
c00043da:	e8 44 d6 ff ff       	call   c0001a23 <disk_write>
c00043df:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043e3:	83 c4 20             	add    esp,0x20
c00043e6:	51                   	push   ecx
c00043e7:	6a 00                	push   0x0
c00043e9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043ed:	6a 00                	push   0x0
c00043ef:	50                   	push   eax
c00043f0:	e8 44 d6 ff ff       	call   c0001a39 <disk_ioctl>
c00043f5:	83 c4 10             	add    esp,0x10
c00043f8:	85 c0                	test   eax,eax
c00043fa:	0f 95 c0             	setne  al
c00043fd:	0f b6 c0             	movzx  eax,al
c0004400:	5a                   	pop    edx
c0004401:	5b                   	pop    ebx
c0004402:	5e                   	pop    esi
c0004403:	c3                   	ret    

c0004404 <create_partition>:
c0004404:	55                   	push   ebp
c0004405:	57                   	push   edi
c0004406:	56                   	push   esi
c0004407:	53                   	push   ebx
c0004408:	83 ec 60             	sub    esp,0x60
c000440b:	0f b6 c0             	movzx  eax,al
c000440e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004412:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004416:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000441a:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000441e:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004422:	50                   	push   eax
c0004423:	6a 01                	push   0x1
c0004425:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004429:	e8 0b d6 ff ff       	call   c0001a39 <disk_ioctl>
c000442e:	83 c4 10             	add    esp,0x10
c0004431:	85 c0                	test   eax,eax
c0004433:	74 0a                	je     c000443f <create_partition+0x3b>
c0004435:	b8 01 00 00 00       	mov    eax,0x1
c000443a:	e9 73 05 00 00       	jmp    c00049b2 <create_partition+0x5ae>
c000443f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004443:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004447:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000444b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000444f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004454:	0f 86 ed 03 00 00    	jbe    c0004847 <create_partition+0x443>
c000445a:	83 c0 df             	add    eax,0xffffffdf
c000445d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004465:	83 d2 ff             	adc    edx,0xffffffff
c0004468:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000446c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004470:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004474:	83 c0 bd             	add    eax,0xffffffbd
c0004477:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000447b:	83 d2 ff             	adc    edx,0xffffffff
c000447e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004482:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004486:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000448d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004495:	be 22 00 00 00       	mov    esi,0x22
c000449a:	31 ff                	xor    edi,edi
c000449c:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00044a4:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00044ac:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044b4:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044b8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044be:	75 0e                	jne    c00044ce <create_partition+0xca>
c00044c0:	b9 00 02 00 00       	mov    ecx,0x200
c00044c5:	31 d2                	xor    edx,edx
c00044c7:	89 d8                	mov    eax,ebx
c00044c9:	e8 1e d6 ff ff       	call   c0001aec <mem_set>
c00044ce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044d2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044da:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044dd:	0f 84 23 01 00 00    	je     c0004606 <create_partition+0x202>
c00044e3:	89 f0                	mov    eax,esi
c00044e5:	89 fa                	mov    edx,edi
c00044e7:	05 ff 07 00 00       	add    eax,0x7ff
c00044ec:	83 d2 00             	adc    edx,0x0
c00044ef:	89 c1                	mov    ecx,eax
c00044f1:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044fb:	89 ce                	mov    esi,ecx
c00044fd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004501:	89 d7                	mov    edi,edx
c0004503:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004507:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c000450b:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000450e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004511:	b8 64 00 00 00       	mov    eax,0x64
c0004516:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004519:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000451d:	b8 00 00 00 00       	mov    eax,0x0
c0004522:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004526:	72 41                	jb     c0004569 <create_partition+0x165>
c0004528:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000452c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004530:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004535:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004539:	01 c1                	add    ecx,eax
c000453b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000453f:	f7 24 24             	mul    DWORD PTR [esp]
c0004542:	6a 00                	push   0x0
c0004544:	01 ca                	add    edx,ecx
c0004546:	6a 64                	push   0x64
c0004548:	52                   	push   edx
c0004549:	50                   	push   eax
c000454a:	e8 bd af 01 00       	call   c001f50c <__udivdi3>
c000454f:	83 c4 10             	add    esp,0x10
c0004552:	05 ff 07 00 00       	add    eax,0x7ff
c0004557:	83 d2 00             	adc    edx,0x0
c000455a:	89 c1                	mov    ecx,eax
c000455c:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004562:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004566:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004569:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000456c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004570:	01 f0                	add    eax,esi
c0004572:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004576:	11 fa                	adc    edx,edi
c0004578:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000457c:	19 d1                	sbb    ecx,edx
c000457e:	73 2e                	jae    c00045ae <create_partition+0x1aa>
c0004580:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004584:	89 f8                	mov    eax,edi
c0004586:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c000458a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004591:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004599:	73 6b                	jae    c0004606 <create_partition+0x202>
c000459b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000459f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00045a3:	29 f0                	sub    eax,esi
c00045a5:	19 fa                	sbb    edx,edi
c00045a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00045aa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00045ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045b2:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045b5:	74 4f                	je     c0004606 <create_partition+0x202>
c00045b7:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045ba:	b9 10 00 00 00       	mov    ecx,0x10
c00045bf:	ba 50 05 02 c0       	mov    edx,0xc0020550
c00045c4:	e8 0e d5 ff ff       	call   c0001ad7 <mem_cpy>
c00045c9:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045cd:	b9 10 00 00 00       	mov    ecx,0x10
c00045d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045d6:	e8 49 db ff ff       	call   c0002124 <make_rand>
c00045db:	89 f2                	mov    edx,esi
c00045dd:	89 f9                	mov    ecx,edi
c00045df:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045e3:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045e7:	e8 e5 d4 ff ff       	call   c0001ad1 <st_qword>
c00045ec:	03 34 24             	add    esi,DWORD PTR [esp]
c00045ef:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045f3:	89 f2                	mov    edx,esi
c00045f5:	89 f9                	mov    ecx,edi
c00045f7:	83 c2 ff             	add    edx,0xffffffff
c00045fa:	83 d1 ff             	adc    ecx,0xffffffff
c00045fd:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004601:	e8 cb d4 ff ff       	call   c0001ad1 <st_qword>
c0004606:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000460a:	83 e8 80             	sub    eax,0xffffff80
c000460d:	89 c5                	mov    ebp,eax
c000460f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004613:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004619:	75 6b                	jne    c0004686 <create_partition+0x282>
c000461b:	45                   	inc    ebp
c000461c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004620:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004625:	e8 56 da ff ff       	call   c0002080 <crc32>
c000462a:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004630:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004634:	75 e5                	jne    c000461b <create_partition+0x217>
c0004636:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	c1 ed 09             	shr    ebp,0x9
c0004640:	31 d2                	xor    edx,edx
c0004642:	6a 01                	push   0x1
c0004644:	52                   	push   edx
c0004645:	8d 45 02             	lea    eax,[ebp+0x2]
c0004648:	50                   	push   eax
c0004649:	53                   	push   ebx
c000464a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000464e:	e8 d0 d3 ff ff       	call   c0001a23 <disk_write>
c0004653:	83 c4 20             	add    esp,0x20
c0004656:	85 c0                	test   eax,eax
c0004658:	0f 85 d7 fd ff ff    	jne    c0004435 <create_partition+0x31>
c000465e:	83 ec 0c             	sub    esp,0xc
c0004661:	89 e8                	mov    eax,ebp
c0004663:	31 d2                	xor    edx,edx
c0004665:	6a 01                	push   0x1
c0004667:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000466b:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000466f:	52                   	push   edx
c0004670:	50                   	push   eax
c0004671:	53                   	push   ebx
c0004672:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004676:	e8 a8 d3 ff ff       	call   c0001a23 <disk_write>
c000467b:	83 c4 20             	add    esp,0x20
c000467e:	85 c0                	test   eax,eax
c0004680:	0f 85 af fd ff ff    	jne    c0004435 <create_partition+0x31>
c0004686:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000468a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000468e:	3d 00 40 00 00       	cmp    eax,0x4000
c0004693:	74 0d                	je     c00046a2 <create_partition+0x29e>
c0004695:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004699:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000469d:	e9 12 fe ff ff       	jmp    c00044b4 <create_partition+0xb0>
c00046a2:	31 d2                	xor    edx,edx
c00046a4:	b9 00 02 00 00       	mov    ecx,0x200
c00046a9:	89 d8                	mov    eax,ebx
c00046ab:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00046ae:	e8 39 d4 ff ff       	call   c0001aec <mem_set>
c00046b3:	b9 10 00 00 00       	mov    ecx,0x10
c00046b8:	ba 40 04 02 c0       	mov    edx,0xc0020440
c00046bd:	89 d8                	mov    eax,ebx
c00046bf:	e8 13 d4 ff ff       	call   c0001ad7 <mem_cpy>
c00046c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046c8:	f7 d2                	not    edx
c00046ca:	8d 43 58             	lea    eax,[ebx+0x58]
c00046cd:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046d0:	e8 f9 d3 ff ff       	call   c0001ace <st_dword>
c00046d5:	8d 43 18             	lea    eax,[ebx+0x18]
c00046d8:	31 c9                	xor    ecx,ecx
c00046da:	ba 01 00 00 00       	mov    edx,0x1
c00046df:	89 04 24             	mov    DWORD PTR [esp],eax
c00046e2:	e8 ea d3 ff ff       	call   c0001ad1 <st_qword>
c00046e7:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046eb:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046ef:	83 c2 ff             	add    edx,0xffffffff
c00046f2:	89 e8                	mov    eax,ebp
c00046f4:	83 d1 ff             	adc    ecx,0xffffffff
c00046f7:	e8 d5 d3 ff ff       	call   c0001ad1 <st_qword>
c00046fc:	31 c9                	xor    ecx,ecx
c00046fe:	8d 43 28             	lea    eax,[ebx+0x28]
c0004701:	ba 22 00 00 00       	mov    edx,0x22
c0004706:	e8 c6 d3 ff ff       	call   c0001ad1 <st_qword>
c000470b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000470f:	83 c2 de             	add    edx,0xffffffde
c0004712:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004716:	83 d1 ff             	adc    ecx,0xffffffff
c0004719:	8d 43 30             	lea    eax,[ebx+0x30]
c000471c:	e8 b0 d3 ff ff       	call   c0001ad1 <st_qword>
c0004721:	8d 43 54             	lea    eax,[ebx+0x54]
c0004724:	ba 80 00 00 00       	mov    edx,0x80
c0004729:	31 f6                	xor    esi,esi
c000472b:	e8 9e d3 ff ff       	call   c0001ace <st_dword>
c0004730:	8d 43 50             	lea    eax,[ebx+0x50]
c0004733:	ba 80 00 00 00       	mov    edx,0x80
c0004738:	e8 91 d3 ff ff       	call   c0001ace <st_dword>
c000473d:	ba 02 00 00 00       	mov    edx,0x2
c0004742:	89 f8                	mov    eax,edi
c0004744:	e8 85 d3 ff ff       	call   c0001ace <st_dword>
c0004749:	8d 53 38             	lea    edx,[ebx+0x38]
c000474c:	b9 10 00 00 00       	mov    ecx,0x10
c0004751:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004755:	e8 ca d9 ff ff       	call   c0002124 <make_rand>
c000475a:	83 c8 ff             	or     eax,0xffffffff
c000475d:	46                   	inc    esi
c000475e:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004763:	e8 18 d9 ff ff       	call   c0002080 <crc32>
c0004768:	83 fe 5c             	cmp    esi,0x5c
c000476b:	75 f0                	jne    c000475d <create_partition+0x359>
c000476d:	f7 d0                	not    eax
c000476f:	8d 73 10             	lea    esi,[ebx+0x10]
c0004772:	89 c2                	mov    edx,eax
c0004774:	89 f0                	mov    eax,esi
c0004776:	e8 53 d3 ff ff       	call   c0001ace <st_dword>
c000477b:	83 ec 0c             	sub    esp,0xc
c000477e:	6a 01                	push   0x1
c0004780:	6a 00                	push   0x0
c0004782:	6a 01                	push   0x1
c0004784:	53                   	push   ebx
c0004785:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004789:	e8 95 d2 ff ff       	call   c0001a23 <disk_write>
c000478e:	83 c4 20             	add    esp,0x20
c0004791:	85 c0                	test   eax,eax
c0004793:	0f 85 9c fc ff ff    	jne    c0004435 <create_partition+0x31>
c0004799:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000479d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00047a1:	83 c2 ff             	add    edx,0xffffffff
c00047a4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047a7:	83 d1 ff             	adc    ecx,0xffffffff
c00047aa:	e8 22 d3 ff ff       	call   c0001ad1 <st_qword>
c00047af:	ba 01 00 00 00       	mov    edx,0x1
c00047b4:	31 c9                	xor    ecx,ecx
c00047b6:	89 e8                	mov    eax,ebp
c00047b8:	e8 14 d3 ff ff       	call   c0001ad1 <st_qword>
c00047bd:	89 f8                	mov    eax,edi
c00047bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047c3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047c7:	e8 05 d3 ff ff       	call   c0001ad1 <st_qword>
c00047cc:	89 f0                	mov    eax,esi
c00047ce:	31 d2                	xor    edx,edx
c00047d0:	31 ff                	xor    edi,edi
c00047d2:	e8 f7 d2 ff ff       	call   c0001ace <st_dword>
c00047d7:	83 c8 ff             	or     eax,0xffffffff
c00047da:	47                   	inc    edi
c00047db:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047e0:	e8 9b d8 ff ff       	call   c0002080 <crc32>
c00047e5:	83 ff 5c             	cmp    edi,0x5c
c00047e8:	75 f0                	jne    c00047da <create_partition+0x3d6>
c00047ea:	f7 d0                	not    eax
c00047ec:	89 c2                	mov    edx,eax
c00047ee:	89 f0                	mov    eax,esi
c00047f0:	e8 d9 d2 ff ff       	call   c0001ace <st_dword>
c00047f5:	83 ec 0c             	sub    esp,0xc
c00047f8:	6a 01                	push   0x1
c00047fa:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047fe:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004802:	83 c0 ff             	add    eax,0xffffffff
c0004805:	83 d2 ff             	adc    edx,0xffffffff
c0004808:	52                   	push   edx
c0004809:	50                   	push   eax
c000480a:	53                   	push   ebx
c000480b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000480f:	e8 0f d2 ff ff       	call   c0001a23 <disk_write>
c0004814:	83 c4 20             	add    esp,0x20
c0004817:	85 c0                	test   eax,eax
c0004819:	0f 85 16 fc ff ff    	jne    c0004435 <create_partition+0x31>
c000481f:	31 d2                	xor    edx,edx
c0004821:	89 d8                	mov    eax,ebx
c0004823:	b9 00 02 00 00       	mov    ecx,0x200
c0004828:	e8 bf d2 ff ff       	call   c0001aec <mem_set>
c000482d:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004833:	b9 10 00 00 00       	mov    ecx,0x10
c0004838:	ba 50 04 02 c0       	mov    edx,0xc0020450
c000483d:	e8 95 d2 ff ff       	call   c0001ad7 <mem_cpy>
c0004842:	e9 3d 01 00 00       	jmp    c0004984 <create_partition+0x580>
c0004847:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000484b:	b9 05 00 00 00       	mov    ecx,0x5
c0004850:	89 04 24             	mov    DWORD PTR [esp],eax
c0004853:	c6 44 24 10 08       	mov    BYTE PTR [esp+0x10],0x8
c0004858:	0f b6 74 24 10       	movzx  esi,BYTE PTR [esp+0x10]
c000485d:	31 d2                	xor    edx,edx
c000485f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004862:	f7 f6                	div    esi
c0004864:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004869:	76 0c                	jbe    c0004877 <create_partition+0x473>
c000486b:	d0 64 24 10          	shl    BYTE PTR [esp+0x10],1
c000486f:	49                   	dec    ecx
c0004870:	75 e6                	jne    c0004858 <create_partition+0x454>
c0004872:	c6 44 24 10 ff       	mov    BYTE PTR [esp+0x10],0xff
c0004877:	b9 00 02 00 00       	mov    ecx,0x200
c000487c:	31 d2                	xor    edx,edx
c000487e:	89 d8                	mov    eax,ebx
c0004880:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004885:	e8 62 d2 ff ff       	call   c0001aec <mem_set>
c000488a:	b9 64 00 00 00       	mov    ecx,0x64
c000488f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004892:	31 d2                	xor    edx,edx
c0004894:	f7 f1                	div    ecx
c0004896:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000489a:	8d 8b c6 01 00 00    	lea    ecx,[ebx+0x1c6]
c00048a0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00048a8:	83 7c 24 18 03       	cmp    DWORD PTR [esp+0x18],0x3
c00048ad:	0f 96 c2             	setbe  dl
c00048b0:	85 ed                	test   ebp,ebp
c00048b2:	0f 95 c0             	setne  al
c00048b5:	84 c2                	test   dl,al
c00048b7:	0f 84 c7 00 00 00    	je     c0004984 <create_partition+0x580>
c00048bd:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00048c0:	0f 83 be 00 00 00    	jae    c0004984 <create_partition+0x580>
c00048c6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00048ca:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00048ce:	8b 34 f8             	mov    esi,DWORD PTR [eax+edi*8]
c00048d1:	83 fe 64             	cmp    esi,0x64
c00048d4:	77 0c                	ja     c00048e2 <create_partition+0x4de>
c00048d6:	74 07                	je     c00048df <create_partition+0x4db>
c00048d8:	0f af 74 24 28       	imul   esi,DWORD PTR [esp+0x28]
c00048dd:	eb 03                	jmp    c00048e2 <create_partition+0x4de>
c00048df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00048e2:	89 e8                	mov    eax,ebp
c00048e4:	01 f0                	add    eax,esi
c00048e6:	72 05                	jb     c00048ed <create_partition+0x4e9>
c00048e8:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048eb:	76 07                	jbe    c00048f4 <create_partition+0x4f0>
c00048ed:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00048f0:	29 ee                	sub    esi,ebp
c00048f2:	eb 08                	jmp    c00048fc <create_partition+0x4f8>
c00048f4:	85 f6                	test   esi,esi
c00048f6:	0f 84 88 00 00 00    	je     c0004984 <create_partition+0x580>
c00048fc:	89 c8                	mov    eax,ecx
c00048fe:	89 ea                	mov    edx,ebp
c0004900:	e8 c9 d1 ff ff       	call   c0001ace <st_dword>
c0004905:	89 f2                	mov    edx,esi
c0004907:	bf 3f 00 00 00       	mov    edi,0x3f
c000490c:	8d 41 04             	lea    eax,[ecx+0x4]
c000490f:	e8 ba d1 ff ff       	call   c0001ace <st_dword>
c0004914:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0004918:	31 d2                	xor    edx,edx
c000491a:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000491e:	88 41 fc             	mov    BYTE PTR [ecx-0x4],al
c0004921:	83 c1 10             	add    ecx,0x10
c0004924:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0004929:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000492d:	89 e8                	mov    eax,ebp
c000492f:	f7 f7                	div    edi
c0004931:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0004935:	31 d2                	xor    edx,edx
c0004937:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c000493b:	88 51 e9             	mov    BYTE PTR [ecx-0x17],dl
c000493e:	89 c2                	mov    edx,eax
c0004940:	c1 ea 02             	shr    edx,0x2
c0004943:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0004947:	47                   	inc    edi
c0004948:	01 f5                	add    ebp,esi
c000494a:	83 e2 c0             	and    edx,0xffffffc0
c000494d:	88 41 eb             	mov    BYTE PTR [ecx-0x15],al
c0004950:	09 fa                	or     edx,edi
c0004952:	8d 45 ff             	lea    eax,[ebp-0x1]
c0004955:	88 51 ea             	mov    BYTE PTR [ecx-0x16],dl
c0004958:	bf 3f 00 00 00       	mov    edi,0x3f
c000495d:	31 d2                	xor    edx,edx
c000495f:	f7 f7                	div    edi
c0004961:	89 d6                	mov    esi,edx
c0004963:	31 d2                	xor    edx,edx
c0004965:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0004969:	89 c7                	mov    edi,eax
c000496b:	46                   	inc    esi
c000496c:	c1 ef 02             	shr    edi,0x2
c000496f:	88 51 ed             	mov    BYTE PTR [ecx-0x13],dl
c0004972:	83 e7 c0             	and    edi,0xffffffc0
c0004975:	88 41 ef             	mov    BYTE PTR [ecx-0x11],al
c0004978:	09 fe                	or     esi,edi
c000497a:	89 f2                	mov    edx,esi
c000497c:	88 51 ee             	mov    BYTE PTR [ecx-0x12],dl
c000497f:	e9 24 ff ff ff       	jmp    c00048a8 <create_partition+0x4a4>
c0004984:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000498a:	ba 55 aa 00 00       	mov    edx,0xaa55
c000498f:	e8 36 d1 ff ff       	call   c0001aca <st_word>
c0004994:	83 ec 0c             	sub    esp,0xc
c0004997:	6a 01                	push   0x1
c0004999:	6a 00                	push   0x0
c000499b:	6a 00                	push   0x0
c000499d:	53                   	push   ebx
c000499e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049a2:	e8 7c d0 ff ff       	call   c0001a23 <disk_write>
c00049a7:	83 c4 20             	add    esp,0x20
c00049aa:	85 c0                	test   eax,eax
c00049ac:	0f 95 c0             	setne  al
c00049af:	0f b6 c0             	movzx  eax,al
c00049b2:	83 c4 5c             	add    esp,0x5c
c00049b5:	5b                   	pop    ebx
c00049b6:	5e                   	pop    esi
c00049b7:	5f                   	pop    edi
c00049b8:	5d                   	pop    ebp
c00049b9:	c3                   	ret    

c00049ba <get_fileinfo>:
c00049ba:	55                   	push   ebp
c00049bb:	57                   	push   edi
c00049bc:	56                   	push   esi
c00049bd:	53                   	push   ebx
c00049be:	83 ec 1c             	sub    esp,0x1c
c00049c1:	8b 30                	mov    esi,DWORD PTR [eax]
c00049c3:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049c7:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049ca:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049ce:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049d1:	0f 84 dc 01 00 00    	je     c0004bb3 <get_fileinfo+0x1f9>
c00049d7:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049da:	75 0f                	jne    c00049eb <get_fileinfo+0x31>
c00049dc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049df:	83 c4 1c             	add    esp,0x1c
c00049e2:	5b                   	pop    ebx
c00049e3:	5e                   	pop    esi
c00049e4:	5f                   	pop    edi
c00049e5:	5d                   	pop    ebp
c00049e6:	e9 70 d5 ff ff       	jmp    c0001f5b <get_xfileinfo>
c00049eb:	89 d3                	mov    ebx,edx
c00049ed:	89 c6                	mov    esi,eax
c00049ef:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049f3:	74 6a                	je     c0004a5f <get_fileinfo+0xa5>
c00049f5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049fd:	31 ed                	xor    ebp,ebp
c00049ff:	31 ff                	xor    edi,edi
c0004a01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004a05:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004a09:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004a0c:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004a10:	66 85 d2             	test   dx,dx
c0004a13:	74 3e                	je     c0004a53 <get_fileinfo+0x99>
c0004a15:	66 85 ed             	test   bp,bp
c0004a18:	75 0c                	jne    c0004a26 <get_fileinfo+0x6c>
c0004a1a:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a20:	66 3d ff 07          	cmp    ax,0x7ff
c0004a24:	76 22                	jbe    c0004a48 <get_fileinfo+0x8e>
c0004a26:	89 e8                	mov    eax,ebp
c0004a28:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a2d:	c1 e0 10             	shl    eax,0x10
c0004a30:	29 f9                	sub    ecx,edi
c0004a32:	09 d0                	or     eax,edx
c0004a34:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a38:	e8 bb d1 ff ff       	call   c0001bf8 <put_utf>
c0004a3d:	84 c0                	test   al,al
c0004a3f:	74 10                	je     c0004a51 <get_fileinfo+0x97>
c0004a41:	0f b6 c0             	movzx  eax,al
c0004a44:	01 c7                	add    edi,eax
c0004a46:	31 d2                	xor    edx,edx
c0004a48:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a4d:	89 d5                	mov    ebp,edx
c0004a4f:	eb b0                	jmp    c0004a01 <get_fileinfo+0x47>
c0004a51:	31 ff                	xor    edi,edi
c0004a53:	66 85 ed             	test   bp,bp
c0004a56:	74 02                	je     c0004a5a <get_fileinfo+0xa0>
c0004a58:	31 ff                	xor    edi,edi
c0004a5a:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a5f:	31 ff                	xor    edi,edi
c0004a61:	31 c9                	xor    ecx,ecx
c0004a63:	83 f9 0a             	cmp    ecx,0xa
c0004a66:	0f 87 ad 00 00 00    	ja     c0004b19 <get_fileinfo+0x15f>
c0004a6c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a6f:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a72:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a76:	66 83 fa 20          	cmp    dx,0x20
c0004a7a:	0f 84 92 00 00 00    	je     c0004b12 <get_fileinfo+0x158>
c0004a80:	66 83 fa 05          	cmp    dx,0x5
c0004a84:	75 05                	jne    c0004a8b <get_fileinfo+0xd1>
c0004a86:	ba e5 00 00 00       	mov    edx,0xe5
c0004a8b:	83 fd 09             	cmp    ebp,0x9
c0004a8e:	75 0b                	jne    c0004a9b <get_fileinfo+0xe1>
c0004a90:	83 ff 0b             	cmp    edi,0xb
c0004a93:	77 06                	ja     c0004a9b <get_fileinfo+0xe1>
c0004a95:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a9a:	47                   	inc    edi
c0004a9b:	0f b7 c2             	movzx  eax,dx
c0004a9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004aa2:	e8 85 d0 ff ff       	call   c0001b2c <dbc_1st>
c0004aa7:	85 c0                	test   eax,eax
c0004aa9:	74 2f                	je     c0004ada <get_fileinfo+0x120>
c0004aab:	83 fd 08             	cmp    ebp,0x8
c0004aae:	74 2a                	je     c0004ada <get_fileinfo+0x120>
c0004ab0:	83 fd 0b             	cmp    ebp,0xb
c0004ab3:	74 25                	je     c0004ada <get_fileinfo+0x120>
c0004ab5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ab8:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004abc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ac0:	e8 6a d0 ff ff       	call   c0001b2f <dbc_2nd>
c0004ac5:	85 c0                	test   eax,eax
c0004ac7:	74 11                	je     c0004ada <get_fileinfo+0x120>
c0004ac9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004acd:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004ad0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004ad5:	c1 e2 08             	shl    edx,0x8
c0004ad8:	09 c2                	or     edx,eax
c0004ada:	50                   	push   eax
c0004adb:	50                   	push   eax
c0004adc:	68 b5 01 00 00       	push   0x1b5
c0004ae1:	0f b7 d2             	movzx  edx,dx
c0004ae4:	52                   	push   edx
c0004ae5:	e8 17 38 00 00       	call   c0008301 <ff_oem2uni>
c0004aea:	83 c4 10             	add    esp,0x10
c0004aed:	66 85 c0             	test   ax,ax
c0004af0:	75 04                	jne    c0004af6 <get_fileinfo+0x13c>
c0004af2:	31 ff                	xor    edi,edi
c0004af4:	eb 23                	jmp    c0004b19 <get_fileinfo+0x15f>
c0004af6:	b9 0c 00 00 00       	mov    ecx,0xc
c0004afb:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004aff:	29 f9                	sub    ecx,edi
c0004b01:	0f b7 c0             	movzx  eax,ax
c0004b04:	e8 ef d0 ff ff       	call   c0001bf8 <put_utf>
c0004b09:	84 c0                	test   al,al
c0004b0b:	74 e5                	je     c0004af2 <get_fileinfo+0x138>
c0004b0d:	0f b6 c0             	movzx  eax,al
c0004b10:	01 c7                	add    edi,eax
c0004b12:	89 e9                	mov    ecx,ebp
c0004b14:	e9 4a ff ff ff       	jmp    c0004a63 <get_fileinfo+0xa9>
c0004b19:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b1e:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b22:	75 54                	jne    c0004b78 <get_fileinfo+0x1be>
c0004b24:	85 ff                	test   edi,edi
c0004b26:	75 0b                	jne    c0004b33 <get_fileinfo+0x179>
c0004b28:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b2c:	ba 01 00 00 00       	mov    edx,0x1
c0004b31:	eb 33                	jmp    c0004b66 <get_fileinfo+0x1ac>
c0004b33:	b1 08                	mov    cl,0x8
c0004b35:	31 d2                	xor    edx,edx
c0004b37:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b3d:	84 c0                	test   al,al
c0004b3f:	74 25                	je     c0004b66 <get_fileinfo+0x1ac>
c0004b41:	66 83 f8 2e          	cmp    ax,0x2e
c0004b45:	74 16                	je     c0004b5d <get_fileinfo+0x1a3>
c0004b47:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b4a:	66 83 ff 19          	cmp    di,0x19
c0004b4e:	77 0f                	ja     c0004b5f <get_fileinfo+0x1a5>
c0004b50:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b53:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b56:	74 07                	je     c0004b5f <get_fileinfo+0x1a5>
c0004b58:	83 c0 20             	add    eax,0x20
c0004b5b:	eb 02                	jmp    c0004b5f <get_fileinfo+0x1a5>
c0004b5d:	b1 10                	mov    cl,0x10
c0004b5f:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b63:	42                   	inc    edx
c0004b64:	eb d1                	jmp    c0004b37 <get_fileinfo+0x17d>
c0004b66:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b6b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b6e:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b72:	75 04                	jne    c0004b78 <get_fileinfo+0x1be>
c0004b74:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b78:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b7b:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b7e:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b81:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b84:	83 c0 1c             	add    eax,0x1c
c0004b87:	e8 d9 ce ff ff       	call   c0001a65 <ld_dword>
c0004b8c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b93:	89 03                	mov    DWORD PTR [ebx],eax
c0004b95:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b98:	83 c0 16             	add    eax,0x16
c0004b9b:	e8 b8 ce ff ff       	call   c0001a58 <ld_word>
c0004ba0:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004ba4:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ba7:	83 c0 18             	add    eax,0x18
c0004baa:	e8 a9 ce ff ff       	call   c0001a58 <ld_word>
c0004baf:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004bb3:	83 c4 1c             	add    esp,0x1c
c0004bb6:	5b                   	pop    ebx
c0004bb7:	5e                   	pop    esi
c0004bb8:	5f                   	pop    edi
c0004bb9:	5d                   	pop    ebp
c0004bba:	c3                   	ret    

c0004bbb <ld_clust.isra.0>:
c0004bbb:	56                   	push   esi
c0004bbc:	89 c6                	mov    esi,eax
c0004bbe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bc1:	53                   	push   ebx
c0004bc2:	89 d3                	mov    ebx,edx
c0004bc4:	e8 8f ce ff ff       	call   c0001a58 <ld_word>
c0004bc9:	0f b7 c8             	movzx  ecx,ax
c0004bcc:	89 f0                	mov    eax,esi
c0004bce:	3c 03                	cmp    al,0x3
c0004bd0:	75 0d                	jne    c0004bdf <ld_clust.isra.0+0x24>
c0004bd2:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bd5:	e8 7e ce ff ff       	call   c0001a58 <ld_word>
c0004bda:	c1 e0 10             	shl    eax,0x10
c0004bdd:	09 c1                	or     ecx,eax
c0004bdf:	5b                   	pop    ebx
c0004be0:	89 c8                	mov    eax,ecx
c0004be2:	5e                   	pop    esi
c0004be3:	c3                   	ret    

c0004be4 <st_clust.isra.1>:
c0004be4:	56                   	push   esi
c0004be5:	89 c6                	mov    esi,eax
c0004be7:	53                   	push   ebx
c0004be8:	89 d3                	mov    ebx,edx
c0004bea:	0f b7 d1             	movzx  edx,cx
c0004bed:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bf0:	e8 d5 ce ff ff       	call   c0001aca <st_word>
c0004bf5:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bf8:	75 0f                	jne    c0004c09 <st_clust.isra.1+0x25>
c0004bfa:	c1 e9 10             	shr    ecx,0x10
c0004bfd:	8d 43 14             	lea    eax,[ebx+0x14]
c0004c00:	89 ca                	mov    edx,ecx
c0004c02:	5b                   	pop    ebx
c0004c03:	5e                   	pop    esi
c0004c04:	e9 c1 ce ff ff       	jmp    c0001aca <st_word>
c0004c09:	5b                   	pop    ebx
c0004c0a:	5e                   	pop    esi
c0004c0b:	c3                   	ret    

c0004c0c <init_alloc_info.isra.2>:
c0004c0c:	56                   	push   esi
c0004c0d:	89 c6                	mov    esi,eax
c0004c0f:	53                   	push   ebx
c0004c10:	89 d3                	mov    ebx,edx
c0004c12:	51                   	push   ecx
c0004c13:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c15:	83 c0 34             	add    eax,0x34
c0004c18:	e8 48 ce ff ff       	call   c0001a65 <ld_dword>
c0004c1d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c20:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c22:	83 c0 38             	add    eax,0x38
c0004c25:	e8 53 ce ff ff       	call   c0001a7d <ld_qword>
c0004c2a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c2d:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c30:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c32:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c35:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c3c:	83 e0 02             	and    eax,0x2
c0004c3f:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c42:	5b                   	pop    ebx
c0004c43:	5b                   	pop    ebx
c0004c44:	5e                   	pop    esi
c0004c45:	c3                   	ret    

c0004c46 <follow_path>:
c0004c46:	56                   	push   esi
c0004c47:	53                   	push   ebx
c0004c48:	89 c3                	mov    ebx,eax
c0004c4a:	83 ec 14             	sub    esp,0x14
c0004c4d:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c59:	80 fa 2f             	cmp    dl,0x2f
c0004c5c:	75 07                	jne    c0004c65 <follow_path+0x1f>
c0004c5e:	40                   	inc    eax
c0004c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c63:	eb ee                	jmp    c0004c53 <follow_path+0xd>
c0004c65:	80 fa 5c             	cmp    dl,0x5c
c0004c68:	74 f4                	je     c0004c5e <follow_path+0x18>
c0004c6a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c71:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c78:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c7b:	77 52                	ja     c0004ccf <follow_path+0x89>
c0004c7d:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c81:	31 d2                	xor    edx,edx
c0004c83:	89 d8                	mov    eax,ebx
c0004c85:	e8 1d e3 ff ff       	call   c0002fa7 <dir_sdi>
c0004c8a:	eb 7c                	jmp    c0004d08 <follow_path+0xc2>
c0004c8c:	89 d8                	mov    eax,ebx
c0004c8e:	e8 60 f2 ff ff       	call   c0003ef3 <dir_find>
c0004c93:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c96:	85 c0                	test   eax,eax
c0004c98:	75 46                	jne    c0004ce0 <follow_path+0x9a>
c0004c9a:	80 e2 04             	and    dl,0x4
c0004c9d:	75 69                	jne    c0004d08 <follow_path+0xc2>
c0004c9f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ca3:	74 5e                	je     c0004d03 <follow_path+0xbd>
c0004ca5:	8a 06                	mov    al,BYTE PTR [esi]
c0004ca7:	3c 04                	cmp    al,0x4
c0004ca9:	75 41                	jne    c0004cec <follow_path+0xa6>
c0004cab:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004cae:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004cb2:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004cb5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004cb8:	30 c0                	xor    al,al
c0004cba:	09 d0                	or     eax,edx
c0004cbc:	89 da                	mov    edx,ebx
c0004cbe:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004cc1:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004cc4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cc7:	8d 46 10             	lea    eax,[esi+0x10]
c0004cca:	e8 3d ff ff ff       	call   c0004c0c <init_alloc_info.isra.2>
c0004ccf:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cd3:	89 d8                	mov    eax,ebx
c0004cd5:	e8 b6 ed ff ff       	call   c0003a90 <create_name>
c0004cda:	85 c0                	test   eax,eax
c0004cdc:	74 ae                	je     c0004c8c <follow_path+0x46>
c0004cde:	eb 28                	jmp    c0004d08 <follow_path+0xc2>
c0004ce0:	83 f8 04             	cmp    eax,0x4
c0004ce3:	75 23                	jne    c0004d08 <follow_path+0xc2>
c0004ce5:	80 e2 04             	and    dl,0x4
c0004ce8:	74 19                	je     c0004d03 <follow_path+0xbd>
c0004cea:	eb 1c                	jmp    c0004d08 <follow_path+0xc2>
c0004cec:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cef:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cf5:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cf9:	e8 bd fe ff ff       	call   c0004bbb <ld_clust.isra.0>
c0004cfe:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d01:	eb cc                	jmp    c0004ccf <follow_path+0x89>
c0004d03:	b8 05 00 00 00       	mov    eax,0x5
c0004d08:	83 c4 14             	add    esp,0x14
c0004d0b:	5b                   	pop    ebx
c0004d0c:	5e                   	pop    esi
c0004d0d:	c3                   	ret    

c0004d0e <f_mount>:
c0004d0e:	53                   	push   ebx
c0004d0f:	83 ec 18             	sub    esp,0x18
c0004d12:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d16:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d1e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d22:	e8 13 d3 ff ff       	call   c000203a <get_ldnumber>
c0004d27:	89 c2                	mov    edx,eax
c0004d29:	b8 0b 00 00 00       	mov    eax,0xb
c0004d2e:	85 d2                	test   edx,edx
c0004d30:	78 39                	js     c0004d6b <f_mount+0x5d>
c0004d32:	8b 04 95 40 47 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb8c0]
c0004d39:	85 c0                	test   eax,eax
c0004d3b:	74 03                	je     c0004d40 <f_mount+0x32>
c0004d3d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d44:	85 c0                	test   eax,eax
c0004d46:	74 03                	je     c0004d4b <f_mount+0x3d>
c0004d48:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d4f:	89 04 95 40 47 02 c0 	mov    DWORD PTR [edx*4-0x3ffdb8c0],eax
c0004d56:	31 c0                	xor    eax,eax
c0004d58:	84 db                	test   bl,bl
c0004d5a:	74 0f                	je     c0004d6b <f_mount+0x5d>
c0004d5c:	31 c9                	xor    ecx,ecx
c0004d5e:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d62:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d66:	e8 6f d7 ff ff       	call   c00024da <mount_volume>
c0004d6b:	83 c4 18             	add    esp,0x18
c0004d6e:	5b                   	pop    ebx
c0004d6f:	c3                   	ret    

c0004d70 <f_open>:
c0004d70:	55                   	push   ebp
c0004d71:	bd 09 00 00 00       	mov    ebp,0x9
c0004d76:	57                   	push   edi
c0004d77:	56                   	push   esi
c0004d78:	53                   	push   ebx
c0004d79:	83 ec 7c             	sub    esp,0x7c
c0004d7c:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d83:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d8a:	85 db                	test   ebx,ebx
c0004d8c:	0f 84 10 04 00 00    	je     c00051a2 <f_open+0x432>
c0004d92:	89 fe                	mov    esi,edi
c0004d94:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d98:	83 e6 3f             	and    esi,0x3f
c0004d9b:	89 f0                	mov    eax,esi
c0004d9d:	0f b6 c8             	movzx  ecx,al
c0004da0:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004da7:	e8 2e d7 ff ff       	call   c00024da <mount_volume>
c0004dac:	89 c5                	mov    ebp,eax
c0004dae:	85 c0                	test   eax,eax
c0004db0:	0f 85 e6 03 00 00    	jne    c000519c <f_open+0x42c>
c0004db6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dba:	83 ec 0c             	sub    esp,0xc
c0004dbd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004dc1:	bd 11 00 00 00       	mov    ebp,0x11
c0004dc6:	68 60 04 00 00       	push   0x460
c0004dcb:	e8 6e 34 00 00       	call   c000823e <ff_memalloc>
c0004dd0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dd4:	83 c4 10             	add    esp,0x10
c0004dd7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ddc:	0f 84 c0 03 00 00    	je     c00051a2 <f_open+0x432>
c0004de2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004de6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dea:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004df0:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004df3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004df6:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dfd:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e01:	e8 40 fe ff ff       	call   c0004c46 <follow_path>
c0004e06:	89 c5                	mov    ebp,eax
c0004e08:	85 c0                	test   eax,eax
c0004e0a:	75 0c                	jne    c0004e18 <f_open+0xa8>
c0004e0c:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004e11:	79 05                	jns    c0004e18 <f_open+0xa8>
c0004e13:	bd 06 00 00 00       	mov    ebp,0x6
c0004e18:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e1e:	0f 84 84 01 00 00    	je     c0004fa8 <f_open+0x238>
c0004e24:	85 ed                	test   ebp,ebp
c0004e26:	74 20                	je     c0004e48 <f_open+0xd8>
c0004e28:	83 fd 04             	cmp    ebp,0x4
c0004e2b:	0f 85 58 03 00 00    	jne    c0005189 <f_open+0x419>
c0004e31:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e35:	83 ce 08             	or     esi,0x8
c0004e38:	e8 7d f2 ff ff       	call   c00040ba <dir_register>
c0004e3d:	89 c5                	mov    ebp,eax
c0004e3f:	85 c0                	test   eax,eax
c0004e41:	74 2f                	je     c0004e72 <f_open+0x102>
c0004e43:	e9 41 03 00 00       	jmp    c0005189 <f_open+0x419>
c0004e48:	bd 07 00 00 00       	mov    ebp,0x7
c0004e4d:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e52:	0f 85 31 03 00 00    	jne    c0005189 <f_open+0x419>
c0004e58:	bd 08 00 00 00       	mov    ebp,0x8
c0004e5d:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e63:	0f 85 20 03 00 00    	jne    c0005189 <f_open+0x419>
c0004e69:	83 e7 08             	and    edi,0x8
c0004e6c:	0f 84 65 01 00 00    	je     c0004fd7 <f_open+0x267>
c0004e72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e76:	8a 02                	mov    al,BYTE PTR [edx]
c0004e78:	3c 04                	cmp    al,0x4
c0004e7a:	0f 85 97 00 00 00    	jne    c0004f17 <f_open+0x1a7>
c0004e80:	8d 42 10             	lea    eax,[edx+0x10]
c0004e83:	89 13                	mov    DWORD PTR [ebx],edx
c0004e85:	89 da                	mov    edx,ebx
c0004e87:	e8 80 fd ff ff       	call   c0004c0c <init_alloc_info.isra.2>
c0004e8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e90:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e93:	31 d2                	xor    edx,edx
c0004e95:	83 c0 02             	add    eax,0x2
c0004e98:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e9d:	e8 4a cc ff ff       	call   c0001aec <mem_set>
c0004ea2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ea9:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004eae:	83 c0 26             	add    eax,0x26
c0004eb1:	31 d2                	xor    edx,edx
c0004eb3:	e8 34 cc ff ff       	call   c0001aec <mem_set>
c0004eb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ebc:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004ebf:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004ec3:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ec8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ecb:	83 c0 08             	add    eax,0x8
c0004ece:	e8 fb cb ff ff       	call   c0001ace <st_dword>
c0004ed3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eda:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ede:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ee2:	e8 c4 ea ff ff       	call   c00039ab <store_xdir>
c0004ee7:	89 c5                	mov    ebp,eax
c0004ee9:	85 c0                	test   eax,eax
c0004eeb:	0f 85 98 02 00 00    	jne    c0005189 <f_open+0x419>
c0004ef1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ef4:	85 d2                	test   edx,edx
c0004ef6:	0f 84 db 00 00 00    	je     c0004fd7 <f_open+0x267>
c0004efc:	31 c9                	xor    ecx,ecx
c0004efe:	89 d8                	mov    eax,ebx
c0004f00:	e8 9b e3 ff ff       	call   c00032a0 <remove_chain>
c0004f05:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f09:	89 c5                	mov    ebp,eax
c0004f0b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f0e:	48                   	dec    eax
c0004f0f:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004f12:	e9 b8 00 00 00       	jmp    c0004fcf <f_open+0x25f>
c0004f17:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f1b:	89 ea                	mov    edx,ebp
c0004f1d:	e8 99 fc ff ff       	call   c0004bbb <ld_clust.isra.0>
c0004f22:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f27:	89 c7                	mov    edi,eax
c0004f29:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f2c:	e8 9d cb ff ff       	call   c0001ace <st_dword>
c0004f31:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f35:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f39:	31 c9                	xor    ecx,ecx
c0004f3b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f43:	e8 9c fc ff ff       	call   c0004be4 <st_clust.isra.1>
c0004f48:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f4c:	83 c0 1c             	add    eax,0x1c
c0004f4f:	31 d2                	xor    edx,edx
c0004f51:	e8 78 cb ff ff       	call   c0001ace <st_dword>
c0004f56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f5a:	85 ff                	test   edi,edi
c0004f5c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f60:	74 75                	je     c0004fd7 <f_open+0x267>
c0004f62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f66:	31 c9                	xor    ecx,ecx
c0004f68:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f6b:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f6e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f72:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f76:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f7a:	89 fa                	mov    edx,edi
c0004f7c:	e8 1f e3 ff ff       	call   c00032a0 <remove_chain>
c0004f81:	89 c5                	mov    ebp,eax
c0004f83:	85 c0                	test   eax,eax
c0004f85:	0f 85 fe 01 00 00    	jne    c0005189 <f_open+0x419>
c0004f8b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f8f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f97:	4f                   	dec    edi
c0004f98:	e8 92 d2 ff ff       	call   c000222f <move_window>
c0004f9d:	89 c5                	mov    ebp,eax
c0004f9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa3:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004fa6:	eb 27                	jmp    c0004fcf <f_open+0x25f>
c0004fa8:	85 ed                	test   ebp,ebp
c0004faa:	0f 85 d9 01 00 00    	jne    c0005189 <f_open+0x419>
c0004fb0:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fb4:	bd 04 00 00 00       	mov    ebp,0x4
c0004fb9:	a8 10                	test   al,0x10
c0004fbb:	0f 85 c8 01 00 00    	jne    c0005189 <f_open+0x419>
c0004fc1:	83 e7 02             	and    edi,0x2
c0004fc4:	74 11                	je     c0004fd7 <f_open+0x267>
c0004fc6:	bd 07 00 00 00       	mov    ebp,0x7
c0004fcb:	a8 01                	test   al,0x1
c0004fcd:	eb 02                	jmp    c0004fd1 <f_open+0x261>
c0004fcf:	85 ed                	test   ebp,ebp
c0004fd1:	0f 85 b2 01 00 00    	jne    c0005189 <f_open+0x419>
c0004fd7:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fdd:	74 03                	je     c0004fe2 <f_open+0x272>
c0004fdf:	83 ce 40             	or     esi,0x40
c0004fe2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fe6:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fe9:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fec:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fef:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004ff3:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004ff6:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004ff9:	8a 02                	mov    al,BYTE PTR [edx]
c0004ffb:	3c 04                	cmp    al,0x4
c0004ffd:	75 2a                	jne    c0005029 <f_open+0x2b9>
c0004fff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005003:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005006:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000500a:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c000500f:	30 c0                	xor    al,al
c0005011:	09 c8                	or     eax,ecx
c0005013:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005016:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000501a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000501d:	8d 42 10             	lea    eax,[edx+0x10]
c0005020:	89 da                	mov    edx,ebx
c0005022:	e8 e5 fb ff ff       	call   c0004c0c <init_alloc_info.isra.2>
c0005027:	eb 1c                	jmp    c0005045 <f_open+0x2d5>
c0005029:	89 fa                	mov    edx,edi
c000502b:	e8 8b fb ff ff       	call   c0004bbb <ld_clust.isra.0>
c0005030:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005033:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005036:	e8 2a ca ff ff       	call   c0001a65 <ld_dword>
c000503b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005042:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005045:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005049:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005050:	89 03                	mov    DWORD PTR [ebx],eax
c0005052:	31 d2                	xor    edx,edx
c0005054:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005058:	b9 00 02 00 00       	mov    ecx,0x200
c000505d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005061:	89 f0                	mov    eax,esi
c0005063:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005066:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000506a:	8d 43 50             	lea    eax,[ebx+0x50]
c000506d:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005074:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000507b:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005082:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005089:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000508d:	e8 5a ca ff ff       	call   c0001aec <mem_set>
c0005092:	83 e6 20             	and    esi,0x20
c0005095:	75 07                	jne    c000509e <f_open+0x32e>
c0005097:	31 ed                	xor    ebp,ebp
c0005099:	e9 eb 00 00 00       	jmp    c0005189 <f_open+0x419>
c000509e:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00050a1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00050a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00050a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050b0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050b4:	74 e1                	je     c0005097 <f_open+0x327>
c00050b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050be:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050c5:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050c8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050cb:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050cf:	c1 e5 09             	shl    ebp,0x9
c00050d2:	31 ff                	xor    edi,edi
c00050d4:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050d8:	89 f8                	mov    eax,edi
c00050da:	89 ee                	mov    esi,ebp
c00050dc:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050e0:	73 22                	jae    c0005104 <f_open+0x394>
c00050e2:	89 d8                	mov    eax,ebx
c00050e4:	e8 c8 dc ff ff       	call   c0002db1 <get_fat>
c00050e9:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050ed:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050f1:	89 c2                	mov    edx,eax
c00050f3:	83 f8 01             	cmp    eax,0x1
c00050f6:	76 10                	jbe    c0005108 <f_open+0x398>
c00050f8:	83 f8 ff             	cmp    eax,0xffffffff
c00050fb:	75 d5                	jne    c00050d2 <f_open+0x362>
c00050fd:	bd 01 00 00 00       	mov    ebp,0x1
c0005102:	eb 09                	jmp    c000510d <f_open+0x39d>
c0005104:	31 ed                	xor    ebp,ebp
c0005106:	eb 05                	jmp    c000510d <f_open+0x39d>
c0005108:	bd 02 00 00 00       	mov    ebp,0x2
c000510d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005110:	85 ed                	test   ebp,ebp
c0005112:	75 75                	jne    c0005189 <f_open+0x419>
c0005114:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005118:	25 ff 01 00 00       	and    eax,0x1ff
c000511d:	0f 84 74 ff ff ff    	je     c0005097 <f_open+0x327>
c0005123:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005127:	bd 02 00 00 00       	mov    ebp,0x2
c000512c:	89 c8                	mov    eax,ecx
c000512e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005132:	e8 ba cb ff ff       	call   c0001cf1 <clst2sect>
c0005137:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000513b:	89 d7                	mov    edi,edx
c000513d:	09 c7                	or     edi,eax
c000513f:	74 48                	je     c0005189 <f_open+0x419>
c0005141:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005145:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005149:	0f ac fe 09          	shrd   esi,edi,0x9
c000514d:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005151:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005159:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000515d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005161:	83 ec 0c             	sub    esp,0xc
c0005164:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005167:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000516a:	6a 01                	push   0x1
c000516c:	52                   	push   edx
c000516d:	50                   	push   eax
c000516e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005172:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005176:	50                   	push   eax
c0005177:	e8 91 c8 ff ff       	call   c0001a0d <disk_read>
c000517c:	83 c4 20             	add    esp,0x20
c000517f:	85 c0                	test   eax,eax
c0005181:	0f 95 c0             	setne  al
c0005184:	0f b6 c0             	movzx  eax,al
c0005187:	89 c5                	mov    ebp,eax
c0005189:	83 ec 0c             	sub    esp,0xc
c000518c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005190:	e8 bf 30 00 00       	call   c0008254 <ff_memfree>
c0005195:	83 c4 10             	add    esp,0x10
c0005198:	85 ed                	test   ebp,ebp
c000519a:	74 06                	je     c00051a2 <f_open+0x432>
c000519c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00051a2:	83 c4 7c             	add    esp,0x7c
c00051a5:	89 e8                	mov    eax,ebp
c00051a7:	5b                   	pop    ebx
c00051a8:	5e                   	pop    esi
c00051a9:	5f                   	pop    edi
c00051aa:	5d                   	pop    ebp
c00051ab:	c3                   	ret    

c00051ac <f_read>:
c00051ac:	55                   	push   ebp
c00051ad:	57                   	push   edi
c00051ae:	56                   	push   esi
c00051af:	53                   	push   ebx
c00051b0:	83 ec 2c             	sub    esp,0x2c
c00051b3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051b7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051bb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051c5:	89 d8                	mov    eax,ebx
c00051c7:	e8 88 cf ff ff       	call   c0002154 <validate>
c00051cc:	89 c5                	mov    ebp,eax
c00051ce:	85 c0                	test   eax,eax
c00051d0:	0f 85 4c 02 00 00    	jne    c0005422 <f_read+0x276>
c00051d6:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051da:	85 ed                	test   ebp,ebp
c00051dc:	0f 85 40 02 00 00    	jne    c0005422 <f_read+0x276>
c00051e2:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051e6:	0f 84 31 02 00 00    	je     c000541d <f_read+0x271>
c00051ec:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051ef:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051f2:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051f5:	bf 00 00 00 00       	mov    edi,0x0
c00051fa:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051fd:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005201:	89 d1                	mov    ecx,edx
c0005203:	19 f9                	sbb    ecx,edi
c0005205:	0f 83 cf 00 00 00    	jae    c00052da <f_read+0x12e>
c000520b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000520f:	e9 c6 00 00 00       	jmp    c00052da <f_read+0x12e>
c0005214:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005217:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000521a:	89 d0                	mov    eax,edx
c000521c:	25 ff 01 00 00       	and    eax,0x1ff
c0005221:	0f 85 c9 01 00 00    	jne    c00053f0 <f_read+0x244>
c0005227:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000522b:	89 d6                	mov    esi,edx
c000522d:	89 cf                	mov    edi,ecx
c000522f:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005233:	0f ac fe 09          	shrd   esi,edi,0x9
c0005237:	48                   	dec    eax
c0005238:	21 f0                	and    eax,esi
c000523a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000523e:	0f 84 a6 00 00 00    	je     c00052ea <f_read+0x13e>
c0005244:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005248:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000524b:	89 c8                	mov    eax,ecx
c000524d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005250:	e8 9c ca ff ff       	call   c0001cf1 <clst2sect>
c0005255:	89 d7                	mov    edi,edx
c0005257:	09 c7                	or     edi,eax
c0005259:	0f 84 b4 00 00 00    	je     c0005313 <f_read+0x167>
c000525f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005263:	31 ff                	xor    edi,edi
c0005265:	01 c6                	add    esi,eax
c0005267:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000526a:	11 d7                	adc    edi,edx
c000526c:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005274:	0f 86 fd 00 00 00    	jbe    c0005377 <f_read+0x1cb>
c000527a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000527e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005282:	c1 e8 09             	shr    eax,0x9
c0005285:	89 04 24             	mov    DWORD PTR [esp],eax
c0005288:	03 14 24             	add    edx,DWORD PTR [esp]
c000528b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000528f:	39 c2                	cmp    edx,eax
c0005291:	76 07                	jbe    c000529a <f_read+0xee>
c0005293:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005297:	89 04 24             	mov    DWORD PTR [esp],eax
c000529a:	83 ec 0c             	sub    esp,0xc
c000529d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00052a1:	57                   	push   edi
c00052a2:	56                   	push   esi
c00052a3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00052a7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052ab:	50                   	push   eax
c00052ac:	e8 5c c7 ff ff       	call   c0001a0d <disk_read>
c00052b1:	83 c4 20             	add    esp,0x20
c00052b4:	85 c0                	test   eax,eax
c00052b6:	75 6e                	jne    c0005326 <f_read+0x17a>
c00052b8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052bc:	78 7e                	js     c000533c <f_read+0x190>
c00052be:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052c1:	c1 e6 09             	shl    esi,0x9
c00052c4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052c8:	31 ff                	xor    edi,edi
c00052ca:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052ce:	01 30                	add    DWORD PTR [eax],esi
c00052d0:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052d4:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052d7:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052da:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052df:	0f 85 2f ff ff ff    	jne    c0005214 <f_read+0x68>
c00052e5:	e9 38 01 00 00       	jmp    c0005422 <f_read+0x276>
c00052ea:	89 c8                	mov    eax,ecx
c00052ec:	09 d0                	or     eax,edx
c00052ee:	75 05                	jne    c00052f5 <f_read+0x149>
c00052f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052f3:	eb 19                	jmp    c000530e <f_read+0x162>
c00052f5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052f9:	74 09                	je     c0005304 <f_read+0x158>
c00052fb:	89 d8                	mov    eax,ebx
c00052fd:	e8 10 ca ff ff       	call   c0001d12 <clmt_clust>
c0005302:	eb 0a                	jmp    c000530e <f_read+0x162>
c0005304:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005307:	89 d8                	mov    eax,ebx
c0005309:	e8 a3 da ff ff       	call   c0002db1 <get_fat>
c000530e:	83 f8 01             	cmp    eax,0x1
c0005311:	77 0e                	ja     c0005321 <f_read+0x175>
c0005313:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005317:	bd 02 00 00 00       	mov    ebp,0x2
c000531c:	e9 01 01 00 00       	jmp    c0005422 <f_read+0x276>
c0005321:	83 f8 ff             	cmp    eax,0xffffffff
c0005324:	75 0e                	jne    c0005334 <f_read+0x188>
c0005326:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000532a:	bd 01 00 00 00       	mov    ebp,0x1
c000532f:	e9 ee 00 00 00       	jmp    c0005422 <f_read+0x276>
c0005334:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005337:	e9 08 ff ff ff       	jmp    c0005244 <f_read+0x98>
c000533c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000533f:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005342:	29 f0                	sub    eax,esi
c0005344:	19 fa                	sbb    edx,edi
c0005346:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005349:	89 d7                	mov    edi,edx
c000534b:	ba 00 00 00 00       	mov    edx,0x0
c0005350:	89 f9                	mov    ecx,edi
c0005352:	19 d1                	sbb    ecx,edx
c0005354:	0f 83 64 ff ff ff    	jae    c00052be <f_read+0x112>
c000535a:	89 c7                	mov    edi,eax
c000535c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005360:	c1 e7 09             	shl    edi,0x9
c0005363:	8d 53 50             	lea    edx,[ebx+0x50]
c0005366:	01 f8                	add    eax,edi
c0005368:	b9 00 02 00 00       	mov    ecx,0x200
c000536d:	e8 65 c7 ff ff       	call   c0001ad7 <mem_cpy>
c0005372:	e9 47 ff ff ff       	jmp    c00052be <f_read+0x112>
c0005377:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000537a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000537d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005381:	89 04 24             	mov    DWORD PTR [esp],eax
c0005384:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005388:	75 05                	jne    c000538f <f_read+0x1e3>
c000538a:	39 34 24             	cmp    DWORD PTR [esp],esi
c000538d:	74 5b                	je     c00053ea <f_read+0x23e>
c000538f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005392:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005396:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000539a:	79 2a                	jns    c00053c6 <f_read+0x21a>
c000539c:	83 ec 0c             	sub    esp,0xc
c000539f:	6a 01                	push   0x1
c00053a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053ad:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053b1:	50                   	push   eax
c00053b2:	e8 6c c6 ff ff       	call   c0001a23 <disk_write>
c00053b7:	83 c4 20             	add    esp,0x20
c00053ba:	85 c0                	test   eax,eax
c00053bc:	0f 85 64 ff ff ff    	jne    c0005326 <f_read+0x17a>
c00053c2:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053c6:	83 ec 0c             	sub    esp,0xc
c00053c9:	6a 01                	push   0x1
c00053cb:	57                   	push   edi
c00053cc:	56                   	push   esi
c00053cd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053d1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053d5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053d9:	50                   	push   eax
c00053da:	e8 2e c6 ff ff       	call   c0001a0d <disk_read>
c00053df:	83 c4 20             	add    esp,0x20
c00053e2:	85 c0                	test   eax,eax
c00053e4:	0f 85 3c ff ff ff    	jne    c0005326 <f_read+0x17a>
c00053ea:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053ed:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053f0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053f3:	ba 00 02 00 00       	mov    edx,0x200
c00053f8:	25 ff 01 00 00       	and    eax,0x1ff
c00053fd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005401:	29 c2                	sub    edx,eax
c0005403:	39 d6                	cmp    esi,edx
c0005405:	76 02                	jbe    c0005409 <f_read+0x25d>
c0005407:	89 d6                	mov    esi,edx
c0005409:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000540d:	89 f1                	mov    ecx,esi
c000540f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005413:	e8 bf c6 ff ff       	call   c0001ad7 <mem_cpy>
c0005418:	e9 a7 fe ff ff       	jmp    c00052c4 <f_read+0x118>
c000541d:	bd 07 00 00 00       	mov    ebp,0x7
c0005422:	83 c4 2c             	add    esp,0x2c
c0005425:	89 e8                	mov    eax,ebp
c0005427:	5b                   	pop    ebx
c0005428:	5e                   	pop    esi
c0005429:	5f                   	pop    edi
c000542a:	5d                   	pop    ebp
c000542b:	c3                   	ret    

c000542c <f_write>:
c000542c:	55                   	push   ebp
c000542d:	57                   	push   edi
c000542e:	56                   	push   esi
c000542f:	53                   	push   ebx
c0005430:	83 ec 2c             	sub    esp,0x2c
c0005433:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005437:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000543b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000543f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005445:	89 d8                	mov    eax,ebx
c0005447:	e8 08 cd ff ff       	call   c0002154 <validate>
c000544c:	89 c5                	mov    ebp,eax
c000544e:	85 c0                	test   eax,eax
c0005450:	0f 85 86 02 00 00    	jne    c00056dc <f_write+0x2b0>
c0005456:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000545a:	85 ed                	test   ebp,ebp
c000545c:	0f 85 7a 02 00 00    	jne    c00056dc <f_write+0x2b0>
c0005462:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005466:	0f 84 6b 02 00 00    	je     c00056d7 <f_write+0x2ab>
c000546c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005470:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005473:	0f 84 43 01 00 00    	je     c00055bc <f_write+0x190>
c0005479:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000547c:	89 c1                	mov    ecx,eax
c000547e:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005482:	0f 83 34 01 00 00    	jae    c00055bc <f_write+0x190>
c0005488:	f7 d0                	not    eax
c000548a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000548e:	e9 29 01 00 00       	jmp    c00055bc <f_write+0x190>
c0005493:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005496:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005499:	89 d0                	mov    eax,edx
c000549b:	25 ff 01 00 00       	and    eax,0x1ff
c00054a0:	0f 85 00 02 00 00    	jne    c00056a6 <f_write+0x27a>
c00054a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054aa:	89 d6                	mov    esi,edx
c00054ac:	89 cf                	mov    edi,ecx
c00054ae:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00054b2:	0f ac fe 09          	shrd   esi,edi,0x9
c00054b6:	48                   	dec    eax
c00054b7:	21 f0                	and    eax,esi
c00054b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054bd:	0f 84 06 01 00 00    	je     c00055c9 <f_write+0x19d>
c00054c3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054c7:	0f 88 6e 01 00 00    	js     c000563b <f_write+0x20f>
c00054cd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054d1:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054d4:	89 c8                	mov    eax,ecx
c00054d6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054da:	e8 12 c8 ff ff       	call   c0001cf1 <clst2sect>
c00054df:	89 d1                	mov    ecx,edx
c00054e1:	09 c1                	or     ecx,eax
c00054e3:	0f 84 1c 01 00 00    	je     c0005605 <f_write+0x1d9>
c00054e9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054ed:	31 ff                	xor    edi,edi
c00054ef:	01 c6                	add    esi,eax
c00054f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054f5:	11 d7                	adc    edi,edx
c00054f7:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054ff:	0f 86 63 01 00 00    	jbe    c0005668 <f_write+0x23c>
c0005505:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005509:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000550d:	c1 e8 09             	shr    eax,0x9
c0005510:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005514:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005518:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000551c:	39 c2                	cmp    edx,eax
c000551e:	76 08                	jbe    c0005528 <f_write+0xfc>
c0005520:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005524:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005528:	83 ec 0c             	sub    esp,0xc
c000552b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000552f:	57                   	push   edi
c0005530:	56                   	push   esi
c0005531:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005535:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005539:	50                   	push   eax
c000553a:	e8 e4 c4 ff ff       	call   c0001a23 <disk_write>
c000553f:	83 c4 20             	add    esp,0x20
c0005542:	85 c0                	test   eax,eax
c0005544:	0f 85 ce 00 00 00    	jne    c0005618 <f_write+0x1ec>
c000554a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000554d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005550:	29 f0                	sub    eax,esi
c0005552:	19 fa                	sbb    edx,edi
c0005554:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005558:	89 d7                	mov    edi,edx
c000555a:	ba 00 00 00 00       	mov    edx,0x0
c000555f:	89 f9                	mov    ecx,edi
c0005561:	19 d1                	sbb    ecx,edx
c0005563:	73 1c                	jae    c0005581 <f_write+0x155>
c0005565:	89 c7                	mov    edi,eax
c0005567:	b9 00 02 00 00       	mov    ecx,0x200
c000556c:	c1 e7 09             	shl    edi,0x9
c000556f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005572:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005576:	89 fa                	mov    edx,edi
c0005578:	e8 5a c5 ff ff       	call   c0001ad7 <mem_cpy>
c000557d:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005581:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005585:	c1 e6 09             	shl    esi,0x9
c0005588:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000558c:	31 ff                	xor    edi,edi
c000558e:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005592:	01 30                	add    DWORD PTR [eax],esi
c0005594:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005598:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000559b:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c000559e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00055a1:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00055a4:	89 c1                	mov    ecx,eax
c00055a6:	39 f2                	cmp    edx,esi
c00055a8:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00055ab:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00055ae:	19 f9                	sbb    ecx,edi
c00055b0:	73 04                	jae    c00055b6 <f_write+0x18a>
c00055b2:	89 f2                	mov    edx,esi
c00055b4:	89 f8                	mov    eax,edi
c00055b6:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055b9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055bc:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055c1:	0f 85 cc fe ff ff    	jne    c0005493 <f_write+0x67>
c00055c7:	eb 2e                	jmp    c00055f7 <f_write+0x1cb>
c00055c9:	89 c8                	mov    eax,ecx
c00055cb:	09 d0                	or     eax,edx
c00055cd:	75 0b                	jne    c00055da <f_write+0x1ae>
c00055cf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055d2:	31 d2                	xor    edx,edx
c00055d4:	85 c0                	test   eax,eax
c00055d6:	75 28                	jne    c0005600 <f_write+0x1d4>
c00055d8:	eb 12                	jmp    c00055ec <f_write+0x1c0>
c00055da:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055de:	74 09                	je     c00055e9 <f_write+0x1bd>
c00055e0:	89 d8                	mov    eax,ebx
c00055e2:	e8 2b c7 ff ff       	call   c0001d12 <clmt_clust>
c00055e7:	eb 0a                	jmp    c00055f3 <f_write+0x1c7>
c00055e9:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ec:	89 d8                	mov    eax,ebx
c00055ee:	e8 ac da ff ff       	call   c000309f <create_chain>
c00055f3:	85 c0                	test   eax,eax
c00055f5:	75 09                	jne    c0005600 <f_write+0x1d4>
c00055f7:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055fb:	e9 dc 00 00 00       	jmp    c00056dc <f_write+0x2b0>
c0005600:	83 f8 01             	cmp    eax,0x1
c0005603:	75 0e                	jne    c0005613 <f_write+0x1e7>
c0005605:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005609:	bd 02 00 00 00       	mov    ebp,0x2
c000560e:	e9 c9 00 00 00       	jmp    c00056dc <f_write+0x2b0>
c0005613:	83 f8 ff             	cmp    eax,0xffffffff
c0005616:	75 0e                	jne    c0005626 <f_write+0x1fa>
c0005618:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000561c:	bd 01 00 00 00       	mov    ebp,0x1
c0005621:	e9 b6 00 00 00       	jmp    c00056dc <f_write+0x2b0>
c0005626:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005629:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000562d:	0f 85 90 fe ff ff    	jne    c00054c3 <f_write+0x97>
c0005633:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005636:	e9 88 fe ff ff       	jmp    c00054c3 <f_write+0x97>
c000563b:	83 ec 0c             	sub    esp,0xc
c000563e:	8d 43 50             	lea    eax,[ebx+0x50]
c0005641:	6a 01                	push   0x1
c0005643:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005646:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005649:	50                   	push   eax
c000564a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000564e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005652:	50                   	push   eax
c0005653:	e8 cb c3 ff ff       	call   c0001a23 <disk_write>
c0005658:	83 c4 20             	add    esp,0x20
c000565b:	85 c0                	test   eax,eax
c000565d:	75 b9                	jne    c0005618 <f_write+0x1ec>
c000565f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005663:	e9 65 fe ff ff       	jmp    c00054cd <f_write+0xa1>
c0005668:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000566b:	75 05                	jne    c0005672 <f_write+0x246>
c000566d:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005670:	74 2e                	je     c00056a0 <f_write+0x274>
c0005672:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005675:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005678:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000567b:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000567e:	73 20                	jae    c00056a0 <f_write+0x274>
c0005680:	83 ec 0c             	sub    esp,0xc
c0005683:	8d 43 50             	lea    eax,[ebx+0x50]
c0005686:	6a 01                	push   0x1
c0005688:	57                   	push   edi
c0005689:	56                   	push   esi
c000568a:	50                   	push   eax
c000568b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000568f:	50                   	push   eax
c0005690:	e8 78 c3 ff ff       	call   c0001a0d <disk_read>
c0005695:	83 c4 20             	add    esp,0x20
c0005698:	85 c0                	test   eax,eax
c000569a:	0f 85 78 ff ff ff    	jne    c0005618 <f_write+0x1ec>
c00056a0:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00056a3:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00056a6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056a9:	ba 00 02 00 00       	mov    edx,0x200
c00056ae:	25 ff 01 00 00       	and    eax,0x1ff
c00056b3:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056b7:	29 c2                	sub    edx,eax
c00056b9:	39 d6                	cmp    esi,edx
c00056bb:	76 02                	jbe    c00056bf <f_write+0x293>
c00056bd:	89 d6                	mov    esi,edx
c00056bf:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056c3:	89 f1                	mov    ecx,esi
c00056c5:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056c9:	e8 09 c4 ff ff       	call   c0001ad7 <mem_cpy>
c00056ce:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056d2:	e9 b1 fe ff ff       	jmp    c0005588 <f_write+0x15c>
c00056d7:	bd 07 00 00 00       	mov    ebp,0x7
c00056dc:	83 c4 2c             	add    esp,0x2c
c00056df:	89 e8                	mov    eax,ebp
c00056e1:	5b                   	pop    ebx
c00056e2:	5e                   	pop    esi
c00056e3:	5f                   	pop    edi
c00056e4:	5d                   	pop    ebp
c00056e5:	c3                   	ret    

c00056e6 <f_sync>:
c00056e6:	56                   	push   esi
c00056e7:	53                   	push   ebx
c00056e8:	83 ec 64             	sub    esp,0x64
c00056eb:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056ef:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056f3:	89 d8                	mov    eax,ebx
c00056f5:	e8 5a ca ff ff       	call   c0002154 <validate>
c00056fa:	85 c0                	test   eax,eax
c00056fc:	0f 85 ba 01 00 00    	jne    c00058bc <f_sync+0x1d6>
c0005702:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005705:	f6 c2 40             	test   dl,0x40
c0005708:	0f 84 ae 01 00 00    	je     c00058bc <f_sync+0x1d6>
c000570e:	84 d2                	test   dl,dl
c0005710:	79 33                	jns    c0005745 <f_sync+0x5f>
c0005712:	83 ec 0c             	sub    esp,0xc
c0005715:	8d 43 50             	lea    eax,[ebx+0x50]
c0005718:	6a 01                	push   0x1
c000571a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000571d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005720:	50                   	push   eax
c0005721:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005725:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005729:	50                   	push   eax
c000572a:	e8 f4 c2 ff ff       	call   c0001a23 <disk_write>
c000572f:	89 c2                	mov    edx,eax
c0005731:	83 c4 20             	add    esp,0x20
c0005734:	b8 01 00 00 00       	mov    eax,0x1
c0005739:	85 d2                	test   edx,edx
c000573b:	0f 85 7b 01 00 00    	jne    c00058bc <f_sync+0x1d6>
c0005741:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005749:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000574c:	0f 85 11 01 00 00    	jne    c0005863 <f_sync+0x17d>
c0005752:	89 d8                	mov    eax,ebx
c0005754:	e8 1e d6 ff ff       	call   c0002d77 <fill_first_frag>
c0005759:	85 c0                	test   eax,eax
c000575b:	0f 85 5b 01 00 00    	jne    c00058bc <f_sync+0x1d6>
c0005761:	83 c9 ff             	or     ecx,0xffffffff
c0005764:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005767:	89 d8                	mov    eax,ebx
c0005769:	e8 d4 d5 ff ff       	call   c0002d42 <fill_last_frag>
c000576e:	85 c0                	test   eax,eax
c0005770:	0f 85 46 01 00 00    	jne    c00058bc <f_sync+0x1d6>
c0005776:	83 ec 0c             	sub    esp,0xc
c0005779:	68 60 04 00 00       	push   0x460
c000577e:	e8 bb 2a 00 00       	call   c000823e <ff_memalloc>
c0005783:	89 c6                	mov    esi,eax
c0005785:	83 c4 10             	add    esp,0x10
c0005788:	b8 11 00 00 00       	mov    eax,0x11
c000578d:	85 f6                	test   esi,esi
c000578f:	0f 84 27 01 00 00    	je     c00058bc <f_sync+0x1d6>
c0005795:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005799:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000579f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00057a2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00057a5:	89 da                	mov    edx,ebx
c00057a7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057ab:	e8 bc df ff ff       	call   c000376c <load_obj_xdir>
c00057b0:	85 c0                	test   eax,eax
c00057b2:	0f 85 95 00 00 00    	jne    c000584d <f_sync+0x167>
c00057b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057bc:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057bf:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057c3:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057c6:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057c9:	83 ca 01             	or     edx,0x1
c00057cc:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057cf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057d5:	83 c0 34             	add    eax,0x34
c00057d8:	e8 f1 c2 ff ff       	call   c0001ace <st_dword>
c00057dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057e7:	83 c0 38             	add    eax,0x38
c00057ea:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057ed:	e8 df c2 ff ff       	call   c0001ad1 <st_qword>
c00057f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057f9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057fc:	83 c0 28             	add    eax,0x28
c00057ff:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005802:	e8 ca c2 ff ff       	call   c0001ad1 <st_qword>
c0005807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000580b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000580e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005813:	83 c0 0c             	add    eax,0xc
c0005816:	e8 b3 c2 ff ff       	call   c0001ace <st_dword>
c000581b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000581f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005822:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005826:	31 d2                	xor    edx,edx
c0005828:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000582b:	83 c0 10             	add    eax,0x10
c000582e:	e8 9b c2 ff ff       	call   c0001ace <st_dword>
c0005833:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005837:	e8 6f e1 ff ff       	call   c00039ab <store_xdir>
c000583c:	85 c0                	test   eax,eax
c000583e:	75 0d                	jne    c000584d <f_sync+0x167>
c0005840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005844:	e8 f4 ea ff ff       	call   c000433d <sync_fs>
c0005849:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000584d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005851:	83 ec 0c             	sub    esp,0xc
c0005854:	56                   	push   esi
c0005855:	e8 fa 29 00 00       	call   c0008254 <ff_memfree>
c000585a:	83 c4 10             	add    esp,0x10
c000585d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005861:	eb 59                	jmp    c00058bc <f_sync+0x1d6>
c0005863:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005866:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005869:	e8 c1 c9 ff ff       	call   c000222f <move_window>
c000586e:	85 c0                	test   eax,eax
c0005870:	75 4a                	jne    c00058bc <f_sync+0x1d6>
c0005872:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005875:	89 f2                	mov    edx,esi
c0005877:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000587b:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000587e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005880:	e8 5f f3 ff ff       	call   c0004be4 <st_clust.isra.1>
c0005885:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005888:	8d 46 1c             	lea    eax,[esi+0x1c]
c000588b:	e8 3e c2 ff ff       	call   c0001ace <st_dword>
c0005890:	8d 46 16             	lea    eax,[esi+0x16]
c0005893:	ba 00 00 21 50       	mov    edx,0x50210000
c0005898:	e8 31 c2 ff ff       	call   c0001ace <st_dword>
c000589d:	8d 46 12             	lea    eax,[esi+0x12]
c00058a0:	31 d2                	xor    edx,edx
c00058a2:	e8 23 c2 ff ff       	call   c0001aca <st_word>
c00058a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058ab:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00058af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b3:	e8 85 ea ff ff       	call   c000433d <sync_fs>
c00058b8:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058bc:	83 c4 64             	add    esp,0x64
c00058bf:	5b                   	pop    ebx
c00058c0:	5e                   	pop    esi
c00058c1:	c3                   	ret    

c00058c2 <f_close>:
c00058c2:	53                   	push   ebx
c00058c3:	83 ec 24             	sub    esp,0x24
c00058c6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058ca:	53                   	push   ebx
c00058cb:	e8 16 fe ff ff       	call   c00056e6 <f_sync>
c00058d0:	83 c4 10             	add    esp,0x10
c00058d3:	85 c0                	test   eax,eax
c00058d5:	75 15                	jne    c00058ec <f_close+0x2a>
c00058d7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058db:	89 d8                	mov    eax,ebx
c00058dd:	e8 72 c8 ff ff       	call   c0002154 <validate>
c00058e2:	85 c0                	test   eax,eax
c00058e4:	75 06                	jne    c00058ec <f_close+0x2a>
c00058e6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058ec:	83 c4 18             	add    esp,0x18
c00058ef:	5b                   	pop    ebx
c00058f0:	c3                   	ret    

c00058f1 <f_lseek>:
c00058f1:	55                   	push   ebp
c00058f2:	57                   	push   edi
c00058f3:	56                   	push   esi
c00058f4:	53                   	push   ebx
c00058f5:	83 ec 3c             	sub    esp,0x3c
c00058f8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058fc:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005900:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005904:	89 04 24             	mov    DWORD PTR [esp],eax
c0005907:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000590b:	89 d8                	mov    eax,ebx
c000590d:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005911:	e8 3e c8 ff ff       	call   c0002154 <validate>
c0005916:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000591a:	85 c0                	test   eax,eax
c000591c:	0f 85 28 04 00 00    	jne    c0005d4a <f_lseek+0x459>
c0005922:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005926:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000592a:	85 c0                	test   eax,eax
c000592c:	0f 85 18 04 00 00    	jne    c0005d4a <f_lseek+0x459>
c0005932:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005936:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005939:	74 0c                	je     c0005947 <f_lseek+0x56>
c000593b:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000593e:	85 c0                	test   eax,eax
c0005940:	75 1f                	jne    c0005961 <f_lseek+0x70>
c0005942:	e9 8b 01 00 00       	jmp    c0005ad2 <f_lseek+0x1e1>
c0005947:	83 c9 ff             	or     ecx,0xffffffff
c000594a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594d:	89 d8                	mov    eax,ebx
c000594f:	e8 ee d3 ff ff       	call   c0002d42 <fill_last_frag>
c0005954:	85 c0                	test   eax,eax
c0005956:	74 e3                	je     c000593b <f_lseek+0x4a>
c0005958:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000595c:	e9 e9 03 00 00       	jmp    c0005d4a <f_lseek+0x459>
c0005961:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005966:	0f 85 ac 00 00 00    	jne    c0005a18 <f_lseek+0x127>
c000596c:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005970:	0f 85 a2 00 00 00    	jne    c0005a18 <f_lseek+0x127>
c0005976:	8d 78 04             	lea    edi,[eax+0x4]
c0005979:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c000597c:	8b 00                	mov    eax,DWORD PTR [eax]
c000597e:	be 02 00 00 00       	mov    esi,0x2
c0005983:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005987:	85 ed                	test   ebp,ebp
c0005989:	74 73                	je     c00059fe <f_lseek+0x10d>
c000598b:	89 e9                	mov    ecx,ebp
c000598d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005994:	89 ca                	mov    edx,ecx
c0005996:	89 d8                	mov    eax,ebx
c0005998:	ff 04 24             	inc    DWORD PTR [esp]
c000599b:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000599f:	e8 0d d4 ff ff       	call   c0002db1 <get_fat>
c00059a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00059a8:	83 f8 01             	cmp    eax,0x1
c00059ab:	77 11                	ja     c00059be <f_lseek+0xcd>
c00059ad:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00059b1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00059b9:	e9 8c 03 00 00       	jmp    c0005d4a <f_lseek+0x459>
c00059be:	83 f8 ff             	cmp    eax,0xffffffff
c00059c1:	75 11                	jne    c00059d4 <f_lseek+0xe3>
c00059c3:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059c7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00059cf:	e9 76 03 00 00       	jmp    c0005d4a <f_lseek+0x459>
c00059d4:	8d 51 01             	lea    edx,[ecx+0x1]
c00059d7:	89 c1                	mov    ecx,eax
c00059d9:	39 c2                	cmp    edx,eax
c00059db:	74 b7                	je     c0005994 <f_lseek+0xa3>
c00059dd:	83 c6 02             	add    esi,0x2
c00059e0:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c00059e4:	72 0b                	jb     c00059f1 <f_lseek+0x100>
c00059e6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059e9:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059ec:	89 0f                	mov    DWORD PTR [edi],ecx
c00059ee:	83 c7 08             	add    edi,0x8
c00059f1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059f5:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059f8:	76 04                	jbe    c00059fe <f_lseek+0x10d>
c00059fa:	89 c5                	mov    ebp,eax
c00059fc:	eb 8d                	jmp    c000598b <f_lseek+0x9a>
c00059fe:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a01:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
c0005a05:	89 30                	mov    DWORD PTR [eax],esi
c0005a07:	0f 87 35 03 00 00    	ja     c0005d42 <f_lseek+0x451>
c0005a0d:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a13:	e9 32 03 00 00       	jmp    c0005d4a <f_lseek+0x459>
c0005a18:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0005a1b:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005a1e:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a25:	19 f8                	sbb    eax,edi
c0005a27:	73 07                	jae    c0005a30 <f_lseek+0x13f>
c0005a29:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a2c:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a30:	89 f8                	mov    eax,edi
c0005a32:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005a35:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005a38:	09 f0                	or     eax,esi
c0005a3a:	0f 84 0a 03 00 00    	je     c0005d4a <f_lseek+0x459>
c0005a40:	89 f0                	mov    eax,esi
c0005a42:	89 fa                	mov    edx,edi
c0005a44:	83 c0 ff             	add    eax,0xffffffff
c0005a47:	83 d2 ff             	adc    edx,0xffffffff
c0005a4a:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a4d:	89 d1                	mov    ecx,edx
c0005a4f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a53:	89 c2                	mov    edx,eax
c0005a55:	89 d8                	mov    eax,ebx
c0005a57:	e8 b6 c2 ff ff       	call   c0001d12 <clmt_clust>
c0005a5c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a60:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a63:	89 c2                	mov    edx,eax
c0005a65:	89 c8                	mov    eax,ecx
c0005a67:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0005a6b:	e8 81 c2 ff ff       	call   c0001cf1 <clst2sect>
c0005a70:	89 d1                	mov    ecx,edx
c0005a72:	09 c1                	or     ecx,eax
c0005a74:	0f 84 33 ff ff ff    	je     c00059ad <f_lseek+0xbc>
c0005a7a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0005a80:	0f 84 c4 02 00 00    	je     c0005d4a <f_lseek+0x459>
c0005a86:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0005a8a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a8e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a91:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a95:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a99:	4d                   	dec    ebp
c0005a9a:	31 ff                	xor    edi,edi
c0005a9c:	21 ee                	and    esi,ebp
c0005a9e:	01 c6                	add    esi,eax
c0005aa0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005aa3:	11 d7                	adc    edi,edx
c0005aa5:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005aa8:	39 fa                	cmp    edx,edi
c0005aaa:	75 08                	jne    c0005ab4 <f_lseek+0x1c3>
c0005aac:	39 f0                	cmp    eax,esi
c0005aae:	0f 84 96 02 00 00    	je     c0005d4a <f_lseek+0x459>
c0005ab4:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ab7:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005abb:	0f 89 58 02 00 00    	jns    c0005d19 <f_lseek+0x428>
c0005ac1:	83 ec 0c             	sub    esp,0xc
c0005ac4:	6a 01                	push   0x1
c0005ac6:	52                   	push   edx
c0005ac7:	50                   	push   eax
c0005ac8:	55                   	push   ebp
c0005ac9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005acd:	e9 32 02 00 00       	jmp    c0005d04 <f_lseek+0x413>
c0005ad2:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ad6:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ad9:	74 16                	je     c0005af1 <f_lseek+0x200>
c0005adb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005ae0:	76 0f                	jbe    c0005af1 <f_lseek+0x200>
c0005ae2:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ae9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005af1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005af4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005af7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005afa:	89 c7                	mov    edi,eax
c0005afc:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b00:	73 0d                	jae    c0005b0f <f_lseek+0x21e>
c0005b02:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b06:	75 07                	jne    c0005b0f <f_lseek+0x21e>
c0005b08:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b0b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b0f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b13:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b16:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b19:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b20:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b27:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b2a:	75 09                	jne    c0005b35 <f_lseek+0x244>
c0005b2c:	31 f6                	xor    esi,esi
c0005b2e:	31 ff                	xor    edi,edi
c0005b30:	e9 87 01 00 00       	jmp    c0005cbc <f_lseek+0x3cb>
c0005b35:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b39:	c1 e1 09             	shl    ecx,0x9
c0005b3c:	89 d7                	mov    edi,edx
c0005b3e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0005b42:	09 c7                	or     edi,eax
c0005b44:	74 6b                	je     c0005bb1 <f_lseek+0x2c0>
c0005b46:	83 c0 ff             	add    eax,0xffffffff
c0005b49:	89 cf                	mov    edi,ecx
c0005b4b:	83 d2 ff             	adc    edx,0xffffffff
c0005b4e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b55:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005b59:	83 c0 ff             	add    eax,0xffffffff
c0005b5c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b60:	83 d2 ff             	adc    edx,0xffffffff
c0005b63:	31 ed                	xor    ebp,ebp
c0005b65:	55                   	push   ebp
c0005b66:	51                   	push   ecx
c0005b67:	52                   	push   edx
c0005b68:	50                   	push   eax
c0005b69:	e8 9e 99 01 00       	call   c001f50c <__udivdi3>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005b75:	89 d6                	mov    esi,edx
c0005b77:	55                   	push   ebp
c0005b78:	57                   	push   edi
c0005b79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005b7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005b81:	e8 86 99 01 00       	call   c001f50c <__udivdi3>
c0005b86:	83 c4 10             	add    esp,0x10
c0005b89:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005b8d:	19 d6                	sbb    esi,edx
c0005b8f:	72 20                	jb     c0005bb1 <f_lseek+0x2c0>
c0005b91:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0005b95:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005b99:	f7 d9                	neg    ecx
c0005b9b:	23 4c 24 10          	and    ecx,DWORD PTR [esp+0x10]
c0005b9f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005ba2:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ba5:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005ba8:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005bac:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005baf:	eb 28                	jmp    c0005bd9 <f_lseek+0x2e8>
c0005bb1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005bb4:	85 c0                	test   eax,eax
c0005bb6:	75 1e                	jne    c0005bd6 <f_lseek+0x2e5>
c0005bb8:	31 d2                	xor    edx,edx
c0005bba:	89 d8                	mov    eax,ebx
c0005bbc:	e8 de d4 ff ff       	call   c000309f <create_chain>
c0005bc1:	83 f8 01             	cmp    eax,0x1
c0005bc4:	0f 84 e3 fd ff ff    	je     c00059ad <f_lseek+0xbc>
c0005bca:	83 f8 ff             	cmp    eax,0xffffffff
c0005bcd:	0f 84 f0 fd ff ff    	je     c00059c3 <f_lseek+0xd2>
c0005bd3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bd6:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bd9:	85 c0                	test   eax,eax
c0005bdb:	0f 84 4b ff ff ff    	je     c0005b2c <f_lseek+0x23b>
c0005be1:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0005be5:	31 ff                	xor    edi,edi
c0005be7:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005bea:	89 fd                	mov    ebp,edi
c0005bec:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005bf0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005bf3:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005bf6:	1b 6c 24 04          	sbb    ebp,DWORD PTR [esp+0x4]
c0005bfa:	73 7d                	jae    c0005c79 <f_lseek+0x388>
c0005bfc:	29 34 24             	sub    DWORD PTR [esp],esi
c0005bff:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c03:	01 d6                	add    esi,edx
c0005c05:	11 cf                	adc    edi,ecx
c0005c07:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005c0a:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005c0d:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005c10:	f6 c2 02             	test   dl,0x2
c0005c13:	74 25                	je     c0005c3a <f_lseek+0x349>
c0005c15:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0005c18:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c1b:	19 f9                	sbb    ecx,edi
c0005c1d:	73 0c                	jae    c0005c2b <f_lseek+0x33a>
c0005c1f:	83 ca 40             	or     edx,0x40
c0005c22:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c25:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c28:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c2b:	89 c2                	mov    edx,eax
c0005c2d:	89 d8                	mov    eax,ebx
c0005c2f:	e8 6b d4 ff ff       	call   c000309f <create_chain>
c0005c34:	85 c0                	test   eax,eax
c0005c36:	75 0b                	jne    c0005c43 <f_lseek+0x352>
c0005c38:	eb 30                	jmp    c0005c6a <f_lseek+0x379>
c0005c3a:	89 c2                	mov    edx,eax
c0005c3c:	89 d8                	mov    eax,ebx
c0005c3e:	e8 6e d1 ff ff       	call   c0002db1 <get_fat>
c0005c43:	83 f8 ff             	cmp    eax,0xffffffff
c0005c46:	0f 84 77 fd ff ff    	je     c00059c3 <f_lseek+0xd2>
c0005c4c:	83 f8 01             	cmp    eax,0x1
c0005c4f:	0f 86 58 fd ff ff    	jbe    c00059ad <f_lseek+0xbc>
c0005c55:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c59:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c5c:	0f 86 4b fd ff ff    	jbe    c00059ad <f_lseek+0xbc>
c0005c62:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c65:	e9 77 ff ff ff       	jmp    c0005be1 <f_lseek+0x2f0>
c0005c6a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c71:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c79:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c7c:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c80:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c83:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c86:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c89:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c8f:	0f 84 97 fe ff ff    	je     c0005b2c <f_lseek+0x23b>
c0005c95:	89 c2                	mov    edx,eax
c0005c97:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c9b:	e8 51 c0 ff ff       	call   c0001cf1 <clst2sect>
c0005ca0:	89 d7                	mov    edi,edx
c0005ca2:	09 c7                	or     edi,eax
c0005ca4:	0f 84 03 fd ff ff    	je     c00059ad <f_lseek+0xbc>
c0005caa:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cae:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cb1:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cb5:	c1 ef 09             	shr    edi,0x9
c0005cb8:	01 c6                	add    esi,eax
c0005cba:	11 d7                	adc    edi,edx
c0005cbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005cbf:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005cc2:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005cc5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005cc8:	19 d1                	sbb    ecx,edx
c0005cca:	73 0a                	jae    c0005cd6 <f_lseek+0x3e5>
c0005ccc:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005cd0:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005cd3:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005cd6:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cdb:	74 6d                	je     c0005d4a <f_lseek+0x459>
c0005cdd:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005ce0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005ce3:	39 fa                	cmp    edx,edi
c0005ce5:	75 04                	jne    c0005ceb <f_lseek+0x3fa>
c0005ce7:	39 f0                	cmp    eax,esi
c0005ce9:	74 5f                	je     c0005d4a <f_lseek+0x459>
c0005ceb:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cee:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005cf2:	79 25                	jns    c0005d19 <f_lseek+0x428>
c0005cf4:	83 ec 0c             	sub    esp,0xc
c0005cf7:	6a 01                	push   0x1
c0005cf9:	52                   	push   edx
c0005cfa:	50                   	push   eax
c0005cfb:	55                   	push   ebp
c0005cfc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d00:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d04:	50                   	push   eax
c0005d05:	e8 19 bd ff ff       	call   c0001a23 <disk_write>
c0005d0a:	83 c4 20             	add    esp,0x20
c0005d0d:	85 c0                	test   eax,eax
c0005d0f:	0f 85 ae fc ff ff    	jne    c00059c3 <f_lseek+0xd2>
c0005d15:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d19:	83 ec 0c             	sub    esp,0xc
c0005d1c:	6a 01                	push   0x1
c0005d1e:	57                   	push   edi
c0005d1f:	56                   	push   esi
c0005d20:	55                   	push   ebp
c0005d21:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d25:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d29:	50                   	push   eax
c0005d2a:	e8 de bc ff ff       	call   c0001a0d <disk_read>
c0005d2f:	83 c4 20             	add    esp,0x20
c0005d32:	85 c0                	test   eax,eax
c0005d34:	0f 85 89 fc ff ff    	jne    c00059c3 <f_lseek+0xd2>
c0005d3a:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d3d:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d40:	eb 08                	jmp    c0005d4a <f_lseek+0x459>
c0005d42:	c7 44 24 0c 11 00 00 00 	mov    DWORD PTR [esp+0xc],0x11
c0005d4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005d4e:	83 c4 3c             	add    esp,0x3c
c0005d51:	5b                   	pop    ebx
c0005d52:	5e                   	pop    esi
c0005d53:	5f                   	pop    edi
c0005d54:	5d                   	pop    ebp
c0005d55:	c3                   	ret    

c0005d56 <f_opendir>:
c0005d56:	56                   	push   esi
c0005d57:	b8 09 00 00 00       	mov    eax,0x9
c0005d5c:	53                   	push   ebx
c0005d5d:	83 ec 24             	sub    esp,0x24
c0005d60:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d64:	85 db                	test   ebx,ebx
c0005d66:	0f 84 e6 00 00 00    	je     c0005e52 <f_opendir+0xfc>
c0005d6c:	31 c9                	xor    ecx,ecx
c0005d6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d72:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d76:	e8 5f c7 ff ff       	call   c00024da <mount_volume>
c0005d7b:	85 c0                	test   eax,eax
c0005d7d:	0f 85 c9 00 00 00    	jne    c0005e4c <f_opendir+0xf6>
c0005d83:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d87:	83 ec 0c             	sub    esp,0xc
c0005d8a:	89 03                	mov    DWORD PTR [ebx],eax
c0005d8c:	68 60 04 00 00       	push   0x460
c0005d91:	e8 a8 24 00 00       	call   c000823e <ff_memalloc>
c0005d96:	89 c6                	mov    esi,eax
c0005d98:	83 c4 10             	add    esp,0x10
c0005d9b:	b8 11 00 00 00       	mov    eax,0x11
c0005da0:	85 f6                	test   esi,esi
c0005da2:	0f 84 aa 00 00 00    	je     c0005e52 <f_opendir+0xfc>
c0005da8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dac:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005db2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005db5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005db8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005dbc:	89 d8                	mov    eax,ebx
c0005dbe:	e8 83 ee ff ff       	call   c0004c46 <follow_path>
c0005dc3:	85 c0                	test   eax,eax
c0005dc5:	75 61                	jne    c0005e28 <f_opendir+0xd2>
c0005dc7:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005dcb:	78 46                	js     c0005e13 <f_opendir+0xbd>
c0005dcd:	b8 05 00 00 00       	mov    eax,0x5
c0005dd2:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005dd6:	74 50                	je     c0005e28 <f_opendir+0xd2>
c0005dd8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005ddc:	8a 01                	mov    al,BYTE PTR [ecx]
c0005dde:	3c 04                	cmp    al,0x4
c0005de0:	75 26                	jne    c0005e08 <f_opendir+0xb2>
c0005de2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005de5:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005de8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005deb:	30 d2                	xor    dl,dl
c0005ded:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005df1:	09 c2                	or     edx,eax
c0005df3:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005df6:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005df9:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005dfc:	89 da                	mov    edx,ebx
c0005dfe:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e01:	e8 06 ee ff ff       	call   c0004c0c <init_alloc_info.isra.2>
c0005e06:	eb 0b                	jmp    c0005e13 <f_opendir+0xbd>
c0005e08:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e0b:	e8 ab ed ff ff       	call   c0004bbb <ld_clust.isra.0>
c0005e10:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e13:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e17:	31 d2                	xor    edx,edx
c0005e19:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e1d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e21:	89 d8                	mov    eax,ebx
c0005e23:	e8 7f d1 ff ff       	call   c0002fa7 <dir_sdi>
c0005e28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e2c:	83 ec 0c             	sub    esp,0xc
c0005e2f:	56                   	push   esi
c0005e30:	e8 1f 24 00 00       	call   c0008254 <ff_memfree>
c0005e35:	83 c4 10             	add    esp,0x10
c0005e38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e3c:	83 f8 04             	cmp    eax,0x4
c0005e3f:	74 06                	je     c0005e47 <f_opendir+0xf1>
c0005e41:	85 c0                	test   eax,eax
c0005e43:	74 0d                	je     c0005e52 <f_opendir+0xfc>
c0005e45:	eb 05                	jmp    c0005e4c <f_opendir+0xf6>
c0005e47:	b8 05 00 00 00       	mov    eax,0x5
c0005e4c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e52:	83 c4 24             	add    esp,0x24
c0005e55:	5b                   	pop    ebx
c0005e56:	5e                   	pop    esi
c0005e57:	c3                   	ret    

c0005e58 <f_closedir>:
c0005e58:	53                   	push   ebx
c0005e59:	83 ec 18             	sub    esp,0x18
c0005e5c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e60:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e64:	89 d8                	mov    eax,ebx
c0005e66:	e8 e9 c2 ff ff       	call   c0002154 <validate>
c0005e6b:	85 c0                	test   eax,eax
c0005e6d:	75 06                	jne    c0005e75 <f_closedir+0x1d>
c0005e6f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e75:	83 c4 18             	add    esp,0x18
c0005e78:	5b                   	pop    ebx
c0005e79:	c3                   	ret    

c0005e7a <f_readdir>:
c0005e7a:	57                   	push   edi
c0005e7b:	56                   	push   esi
c0005e7c:	53                   	push   ebx
c0005e7d:	83 ec 20             	sub    esp,0x20
c0005e80:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e84:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e88:	89 d8                	mov    eax,ebx
c0005e8a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e8e:	e8 c1 c2 ff ff       	call   c0002154 <validate>
c0005e93:	85 c0                	test   eax,eax
c0005e95:	75 77                	jne    c0005f0e <f_readdir+0x94>
c0005e97:	85 ff                	test   edi,edi
c0005e99:	75 0b                	jne    c0005ea6 <f_readdir+0x2c>
c0005e9b:	31 d2                	xor    edx,edx
c0005e9d:	89 d8                	mov    eax,ebx
c0005e9f:	e8 03 d1 ff ff       	call   c0002fa7 <dir_sdi>
c0005ea4:	eb 68                	jmp    c0005f0e <f_readdir+0x94>
c0005ea6:	83 ec 0c             	sub    esp,0xc
c0005ea9:	68 60 04 00 00       	push   0x460
c0005eae:	e8 8b 23 00 00       	call   c000823e <ff_memalloc>
c0005eb3:	89 c6                	mov    esi,eax
c0005eb5:	83 c4 10             	add    esp,0x10
c0005eb8:	b8 11 00 00 00       	mov    eax,0x11
c0005ebd:	85 f6                	test   esi,esi
c0005ebf:	74 4d                	je     c0005f0e <f_readdir+0x94>
c0005ec1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ec5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ecb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ece:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ed1:	31 d2                	xor    edx,edx
c0005ed3:	89 d8                	mov    eax,ebx
c0005ed5:	e8 df d8 ff ff       	call   c00037b9 <dir_read>
c0005eda:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005edf:	75 19                	jne    c0005efa <f_readdir+0x80>
c0005ee1:	89 fa                	mov    edx,edi
c0005ee3:	89 d8                	mov    eax,ebx
c0005ee5:	e8 d0 ea ff ff       	call   c00049ba <get_fileinfo>
c0005eea:	31 d2                	xor    edx,edx
c0005eec:	89 d8                	mov    eax,ebx
c0005eee:	e8 0e d6 ff ff       	call   c0003501 <dir_next>
c0005ef3:	83 f8 04             	cmp    eax,0x4
c0005ef6:	75 02                	jne    c0005efa <f_readdir+0x80>
c0005ef8:	31 c0                	xor    eax,eax
c0005efa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005efe:	83 ec 0c             	sub    esp,0xc
c0005f01:	56                   	push   esi
c0005f02:	e8 4d 23 00 00       	call   c0008254 <ff_memfree>
c0005f07:	83 c4 10             	add    esp,0x10
c0005f0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f0e:	83 c4 20             	add    esp,0x20
c0005f11:	5b                   	pop    ebx
c0005f12:	5e                   	pop    esi
c0005f13:	5f                   	pop    edi
c0005f14:	c3                   	ret    

c0005f15 <f_stat>:
c0005f15:	57                   	push   edi
c0005f16:	31 c9                	xor    ecx,ecx
c0005f18:	56                   	push   esi
c0005f19:	53                   	push   ebx
c0005f1a:	83 ec 50             	sub    esp,0x50
c0005f1d:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f21:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f25:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f29:	e8 ac c5 ff ff       	call   c00024da <mount_volume>
c0005f2e:	89 c3                	mov    ebx,eax
c0005f30:	85 c0                	test   eax,eax
c0005f32:	75 67                	jne    c0005f9b <f_stat+0x86>
c0005f34:	83 ec 0c             	sub    esp,0xc
c0005f37:	bb 11 00 00 00       	mov    ebx,0x11
c0005f3c:	68 60 04 00 00       	push   0x460
c0005f41:	e8 f8 22 00 00       	call   c000823e <ff_memalloc>
c0005f46:	83 c4 10             	add    esp,0x10
c0005f49:	89 c6                	mov    esi,eax
c0005f4b:	85 c0                	test   eax,eax
c0005f4d:	74 4c                	je     c0005f9b <f_stat+0x86>
c0005f4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f53:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f59:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f5c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f5f:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f63:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f67:	e8 da ec ff ff       	call   c0004c46 <follow_path>
c0005f6c:	89 c3                	mov    ebx,eax
c0005f6e:	85 c0                	test   eax,eax
c0005f70:	75 1d                	jne    c0005f8f <f_stat+0x7a>
c0005f72:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f77:	78 11                	js     c0005f8a <f_stat+0x75>
c0005f79:	85 ff                	test   edi,edi
c0005f7b:	74 12                	je     c0005f8f <f_stat+0x7a>
c0005f7d:	89 fa                	mov    edx,edi
c0005f7f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f83:	e8 32 ea ff ff       	call   c00049ba <get_fileinfo>
c0005f88:	eb 05                	jmp    c0005f8f <f_stat+0x7a>
c0005f8a:	bb 06 00 00 00       	mov    ebx,0x6
c0005f8f:	83 ec 0c             	sub    esp,0xc
c0005f92:	56                   	push   esi
c0005f93:	e8 bc 22 00 00       	call   c0008254 <ff_memfree>
c0005f98:	83 c4 10             	add    esp,0x10
c0005f9b:	83 c4 50             	add    esp,0x50
c0005f9e:	89 d8                	mov    eax,ebx
c0005fa0:	5b                   	pop    ebx
c0005fa1:	5e                   	pop    esi
c0005fa2:	5f                   	pop    edi
c0005fa3:	c3                   	ret    

c0005fa4 <f_getfree>:
c0005fa4:	55                   	push   ebp
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	57                   	push   edi
c0005fa8:	56                   	push   esi
c0005fa9:	53                   	push   ebx
c0005faa:	83 ec 5c             	sub    esp,0x5c
c0005fad:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005fb1:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fb5:	e8 20 c5 ff ff       	call   c00024da <mount_volume>
c0005fba:	89 c5                	mov    ebp,eax
c0005fbc:	85 c0                	test   eax,eax
c0005fbe:	0f 85 be 01 00 00    	jne    c0006182 <f_getfree+0x1de>
c0005fc4:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005fc8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fcc:	89 02                	mov    DWORD PTR [edx],eax
c0005fce:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0005fd1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005fd4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0005fd8:	8d 73 fe             	lea    esi,[ebx-0x2]
c0005fdb:	39 f2                	cmp    edx,esi
c0005fdd:	77 0b                	ja     c0005fea <f_getfree+0x46>
c0005fdf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005fe3:	89 10                	mov    DWORD PTR [eax],edx
c0005fe5:	e9 98 01 00 00       	jmp    c0006182 <f_getfree+0x1de>
c0005fea:	8a 10                	mov    dl,BYTE PTR [eax]
c0005fec:	80 fa 01             	cmp    dl,0x1
c0005fef:	75 3a                	jne    c000602b <f_getfree+0x87>
c0005ff1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005ff5:	be 02 00 00 00       	mov    esi,0x2
c0005ffa:	31 db                	xor    ebx,ebx
c0005ffc:	89 f2                	mov    edx,esi
c0005ffe:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006002:	e8 aa cd ff ff       	call   c0002db1 <get_fat>
c0006007:	83 f8 ff             	cmp    eax,0xffffffff
c000600a:	0f 84 51 01 00 00    	je     c0006161 <f_getfree+0x1bd>
c0006010:	83 f8 01             	cmp    eax,0x1
c0006013:	0f 84 4f 01 00 00    	je     c0006168 <f_getfree+0x1c4>
c0006019:	83 d3 00             	adc    ebx,0x0
c000601c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006020:	46                   	inc    esi
c0006021:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006024:	77 d6                	ja     c0005ffc <f_getfree+0x58>
c0006026:	e9 46 01 00 00       	jmp    c0006171 <f_getfree+0x1cd>
c000602b:	80 fa 04             	cmp    dl,0x4
c000602e:	0f 85 94 00 00 00    	jne    c00060c8 <f_getfree+0x124>
c0006034:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006037:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c000603a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000603e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006042:	31 ff                	xor    edi,edi
c0006044:	31 db                	xor    ebx,ebx
c0006046:	85 ff                	test   edi,edi
c0006048:	75 3f                	jne    c0006089 <f_getfree+0xe5>
c000604a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000604e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006052:	83 c0 01             	add    eax,0x1
c0006055:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006059:	83 d2 00             	adc    edx,0x0
c000605c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006060:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006064:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006068:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000606c:	e8 be c1 ff ff       	call   c000222f <move_window>
c0006071:	85 c0                	test   eax,eax
c0006073:	0f 85 f6 00 00 00    	jne    c000616f <f_getfree+0x1cb>
c0006079:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000607d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006081:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006085:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006089:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608d:	8a 44 38 54          	mov    al,BYTE PTR [eax+edi*1+0x54]
c0006091:	88 c2                	mov    dl,al
c0006093:	b8 08 00 00 00       	mov    eax,0x8
c0006098:	29 f0                	sub    eax,esi
c000609a:	89 c1                	mov    ecx,eax
c000609c:	01 f1                	add    ecx,esi
c000609e:	74 18                	je     c00060b8 <f_getfree+0x114>
c00060a0:	85 f6                	test   esi,esi
c00060a2:	74 14                	je     c00060b8 <f_getfree+0x114>
c00060a4:	88 d1                	mov    cl,dl
c00060a6:	83 e1 01             	and    ecx,0x1
c00060a9:	80 f9 01             	cmp    cl,0x1
c00060ac:	88 d1                	mov    cl,dl
c00060ae:	83 d3 00             	adc    ebx,0x0
c00060b1:	4e                   	dec    esi
c00060b2:	d0 e9                	shr    cl,1
c00060b4:	88 ca                	mov    dl,cl
c00060b6:	eb e2                	jmp    c000609a <f_getfree+0xf6>
c00060b8:	47                   	inc    edi
c00060b9:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00060bf:	85 f6                	test   esi,esi
c00060c1:	75 83                	jne    c0006046 <f_getfree+0xa2>
c00060c3:	e9 a9 00 00 00       	jmp    c0006171 <f_getfree+0x1cd>
c00060c8:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060cb:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060ce:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00060d6:	31 db                	xor    ebx,ebx
c00060d8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00060dd:	75 1b                	jne    c00060fa <f_getfree+0x156>
c00060df:	89 d6                	mov    esi,edx
c00060e1:	89 cf                	mov    edi,ecx
c00060e3:	83 c6 01             	add    esi,0x1
c00060e6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060ea:	83 d7 00             	adc    edi,0x0
c00060ed:	e8 3d c1 ff ff       	call   c000222f <move_window>
c00060f2:	85 c0                	test   eax,eax
c00060f4:	75 79                	jne    c000616f <f_getfree+0x1cb>
c00060f6:	89 f2                	mov    edx,esi
c00060f8:	89 f9                	mov    ecx,edi
c00060fa:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00060fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006102:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006106:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000610a:	8d 44 38 54          	lea    eax,[eax+edi*1+0x54]
c000610e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006112:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006115:	75 15                	jne    c000612c <f_getfree+0x188>
c0006117:	e8 3c b9 ff ff       	call   c0001a58 <ld_word>
c000611c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0006120:	66 83 f8 01          	cmp    ax,0x1
c0006124:	83 d3 00             	adc    ebx,0x0
c0006127:	83 c6 02             	add    esi,0x2
c000612a:	eb 17                	jmp    c0006143 <f_getfree+0x19f>
c000612c:	e8 34 b9 ff ff       	call   c0001a65 <ld_dword>
c0006131:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0006135:	25 ff ff ff 0f       	and    eax,0xfffffff
c000613a:	83 f8 01             	cmp    eax,0x1
c000613d:	83 d3 00             	adc    ebx,0x0
c0006140:	83 c6 04             	add    esi,0x4
c0006143:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006149:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000614d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006151:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006155:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006159:	0f 85 79 ff ff ff    	jne    c00060d8 <f_getfree+0x134>
c000615f:	eb 10                	jmp    c0006171 <f_getfree+0x1cd>
c0006161:	bd 01 00 00 00       	mov    ebp,0x1
c0006166:	eb 09                	jmp    c0006171 <f_getfree+0x1cd>
c0006168:	bd 02 00 00 00       	mov    ebp,0x2
c000616d:	eb 02                	jmp    c0006171 <f_getfree+0x1cd>
c000616f:	89 c5                	mov    ebp,eax
c0006171:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006175:	89 18                	mov    DWORD PTR [eax],ebx
c0006177:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000617b:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000617f:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006182:	83 c4 5c             	add    esp,0x5c
c0006185:	89 e8                	mov    eax,ebp
c0006187:	5b                   	pop    ebx
c0006188:	5e                   	pop    esi
c0006189:	5f                   	pop    edi
c000618a:	5d                   	pop    ebp
c000618b:	c3                   	ret    

c000618c <f_truncate>:
c000618c:	56                   	push   esi
c000618d:	53                   	push   ebx
c000618e:	83 ec 14             	sub    esp,0x14
c0006191:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006195:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006199:	89 d8                	mov    eax,ebx
c000619b:	e8 b4 bf ff ff       	call   c0002154 <validate>
c00061a0:	89 c6                	mov    esi,eax
c00061a2:	85 c0                	test   eax,eax
c00061a4:	0f 85 d2 00 00 00    	jne    c000627c <f_truncate+0xf0>
c00061aa:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061ae:	85 f6                	test   esi,esi
c00061b0:	0f 85 c6 00 00 00    	jne    c000627c <f_truncate+0xf0>
c00061b6:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061ba:	0f 84 b7 00 00 00    	je     c0006277 <f_truncate+0xeb>
c00061c0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061c3:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061c6:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061c9:	89 d1                	mov    ecx,edx
c00061cb:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061ce:	0f 83 a8 00 00 00    	jae    c000627c <f_truncate+0xf0>
c00061d4:	09 c2                	or     edx,eax
c00061d6:	75 15                	jne    c00061ed <f_truncate+0x61>
c00061d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061db:	31 c9                	xor    ecx,ecx
c00061dd:	89 d8                	mov    eax,ebx
c00061df:	e8 bc d0 ff ff       	call   c00032a0 <remove_chain>
c00061e4:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061eb:	eb 35                	jmp    c0006222 <f_truncate+0x96>
c00061ed:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061f0:	89 d8                	mov    eax,ebx
c00061f2:	e8 ba cb ff ff       	call   c0002db1 <get_fat>
c00061f7:	89 c2                	mov    edx,eax
c00061f9:	b8 01 00 00 00       	mov    eax,0x1
c00061fe:	83 fa ff             	cmp    edx,0xffffffff
c0006201:	74 1f                	je     c0006222 <f_truncate+0x96>
c0006203:	b8 02 00 00 00       	mov    eax,0x2
c0006208:	83 fa 01             	cmp    edx,0x1
c000620b:	74 15                	je     c0006222 <f_truncate+0x96>
c000620d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006211:	31 c0                	xor    eax,eax
c0006213:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006216:	76 0a                	jbe    c0006222 <f_truncate+0x96>
c0006218:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000621b:	89 d8                	mov    eax,ebx
c000621d:	e8 7e d0 ff ff       	call   c00032a0 <remove_chain>
c0006222:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006225:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006228:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000622b:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000622e:	83 ca 40             	or     edx,0x40
c0006231:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006234:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006237:	85 c0                	test   eax,eax
c0006239:	75 35                	jne    c0006270 <f_truncate+0xe4>
c000623b:	84 d2                	test   dl,dl
c000623d:	79 3d                	jns    c000627c <f_truncate+0xf0>
c000623f:	83 ec 0c             	sub    esp,0xc
c0006242:	8d 43 50             	lea    eax,[ebx+0x50]
c0006245:	6a 01                	push   0x1
c0006247:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000624a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000624d:	50                   	push   eax
c000624e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006252:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006256:	50                   	push   eax
c0006257:	e8 c7 b7 ff ff       	call   c0001a23 <disk_write>
c000625c:	83 c4 20             	add    esp,0x20
c000625f:	85 c0                	test   eax,eax
c0006261:	75 08                	jne    c000626b <f_truncate+0xdf>
c0006263:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006267:	31 f6                	xor    esi,esi
c0006269:	eb 11                	jmp    c000627c <f_truncate+0xf0>
c000626b:	b8 01 00 00 00       	mov    eax,0x1
c0006270:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006273:	89 c6                	mov    esi,eax
c0006275:	eb 05                	jmp    c000627c <f_truncate+0xf0>
c0006277:	be 07 00 00 00       	mov    esi,0x7
c000627c:	83 c4 14             	add    esp,0x14
c000627f:	89 f0                	mov    eax,esi
c0006281:	5b                   	pop    ebx
c0006282:	5e                   	pop    esi
c0006283:	c3                   	ret    

c0006284 <f_unlink>:
c0006284:	56                   	push   esi
c0006285:	b9 02 00 00 00       	mov    ecx,0x2
c000628a:	53                   	push   ebx
c000628b:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006291:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006295:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c000629c:	e8 39 c2 ff ff       	call   c00024da <mount_volume>
c00062a1:	85 c0                	test   eax,eax
c00062a3:	0f 85 53 01 00 00    	jne    c00063fc <f_unlink+0x178>
c00062a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062ad:	83 ec 0c             	sub    esp,0xc
c00062b0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062b4:	68 60 04 00 00       	push   0x460
c00062b9:	e8 80 1f 00 00       	call   c000823e <ff_memalloc>
c00062be:	89 c3                	mov    ebx,eax
c00062c0:	83 c4 10             	add    esp,0x10
c00062c3:	b8 11 00 00 00       	mov    eax,0x11
c00062c8:	85 db                	test   ebx,ebx
c00062ca:	0f 84 2c 01 00 00    	je     c00063fc <f_unlink+0x178>
c00062d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062d4:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062da:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062dd:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062e0:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062e7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062eb:	e8 56 e9 ff ff       	call   c0004c46 <follow_path>
c00062f0:	85 c0                	test   eax,eax
c00062f2:	0f 85 f0 00 00 00    	jne    c00063e8 <f_unlink+0x164>
c00062f8:	b8 06 00 00 00       	mov    eax,0x6
c00062fd:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006305:	0f 88 dd 00 00 00    	js     c00063e8 <f_unlink+0x164>
c000630b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006310:	74 0a                	je     c000631c <f_unlink+0x98>
c0006312:	b8 07 00 00 00       	mov    eax,0x7
c0006317:	e9 cc 00 00 00       	jmp    c00063e8 <f_unlink+0x164>
c000631c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006320:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006324:	8a 02                	mov    al,BYTE PTR [edx]
c0006326:	3c 04                	cmp    al,0x4
c0006328:	75 12                	jne    c000633c <f_unlink+0xb8>
c000632a:	8d 42 10             	lea    eax,[edx+0x10]
c000632d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006331:	e8 d6 e8 ff ff       	call   c0004c0c <init_alloc_info.isra.2>
c0006336:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000633a:	eb 0e                	jmp    c000634a <f_unlink+0xc6>
c000633c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006343:	e8 73 e8 ff ff       	call   c0004bbb <ld_clust.isra.0>
c0006348:	89 c6                	mov    esi,eax
c000634a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000634f:	75 20                	jne    c0006371 <f_unlink+0xed>
c0006351:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006355:	e8 d6 d6 ff ff       	call   c0003a30 <dir_remove>
c000635a:	85 c0                	test   eax,eax
c000635c:	75 7d                	jne    c00063db <f_unlink+0x157>
c000635e:	85 f6                	test   esi,esi
c0006360:	74 79                	je     c00063db <f_unlink+0x157>
c0006362:	31 c9                	xor    ecx,ecx
c0006364:	89 f2                	mov    edx,esi
c0006366:	8d 44 24 20          	lea    eax,[esp+0x20]
c000636a:	e8 31 cf ff ff       	call   c00032a0 <remove_chain>
c000636f:	eb 6a                	jmp    c00063db <f_unlink+0x157>
c0006371:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006375:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000637c:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006383:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006386:	75 21                	jne    c00063a9 <f_unlink+0x125>
c0006388:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000638c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006390:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c0006397:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c000639b:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00063a2:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063a9:	31 d2                	xor    edx,edx
c00063ab:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063b2:	e8 f0 cb ff ff       	call   c0002fa7 <dir_sdi>
c00063b7:	85 c0                	test   eax,eax
c00063b9:	75 2d                	jne    c00063e8 <f_unlink+0x164>
c00063bb:	31 d2                	xor    edx,edx
c00063bd:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063c4:	e8 f0 d3 ff ff       	call   c00037b9 <dir_read>
c00063c9:	85 c0                	test   eax,eax
c00063cb:	0f 84 41 ff ff ff    	je     c0006312 <f_unlink+0x8e>
c00063d1:	83 f8 04             	cmp    eax,0x4
c00063d4:	75 12                	jne    c00063e8 <f_unlink+0x164>
c00063d6:	e9 76 ff ff ff       	jmp    c0006351 <f_unlink+0xcd>
c00063db:	85 c0                	test   eax,eax
c00063dd:	75 09                	jne    c00063e8 <f_unlink+0x164>
c00063df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063e3:	e8 55 df ff ff       	call   c000433d <sync_fs>
c00063e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063ec:	83 ec 0c             	sub    esp,0xc
c00063ef:	53                   	push   ebx
c00063f0:	e8 5f 1e 00 00       	call   c0008254 <ff_memfree>
c00063f5:	83 c4 10             	add    esp,0x10
c00063f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063fc:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006402:	5b                   	pop    ebx
c0006403:	5e                   	pop    esi
c0006404:	c3                   	ret    

c0006405 <f_mkdir>:
c0006405:	57                   	push   edi
c0006406:	b9 02 00 00 00       	mov    ecx,0x2
c000640b:	56                   	push   esi
c000640c:	53                   	push   ebx
c000640d:	83 c4 80             	add    esp,0xffffff80
c0006410:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006414:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000641b:	e8 ba c0 ff ff       	call   c00024da <mount_volume>
c0006420:	89 c3                	mov    ebx,eax
c0006422:	85 c0                	test   eax,eax
c0006424:	0f 85 fe 01 00 00    	jne    c0006628 <f_mkdir+0x223>
c000642a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000642e:	83 ec 0c             	sub    esp,0xc
c0006431:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0006435:	bb 11 00 00 00       	mov    ebx,0x11
c000643a:	68 60 04 00 00       	push   0x460
c000643f:	e8 fa 1d 00 00       	call   c000823e <ff_memalloc>
c0006444:	83 c4 10             	add    esp,0x10
c0006447:	89 c7                	mov    edi,eax
c0006449:	85 c0                	test   eax,eax
c000644b:	0f 84 d7 01 00 00    	je     c0006628 <f_mkdir+0x223>
c0006451:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006455:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c000645b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000645e:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006461:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006468:	8d 44 24 34          	lea    eax,[esp+0x34]
c000646c:	e8 d5 e7 ff ff       	call   c0004c46 <follow_path>
c0006471:	89 c3                	mov    ebx,eax
c0006473:	85 c0                	test   eax,eax
c0006475:	74 3e                	je     c00064b5 <f_mkdir+0xb0>
c0006477:	83 f8 04             	cmp    eax,0x4
c000647a:	75 3e                	jne    c00064ba <f_mkdir+0xb5>
c000647c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006480:	31 d2                	xor    edx,edx
c0006482:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006486:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000648a:	e8 10 cc ff ff       	call   c000309f <create_chain>
c000648f:	89 c6                	mov    esi,eax
c0006491:	85 c0                	test   eax,eax
c0006493:	74 0c                	je     c00064a1 <f_mkdir+0x9c>
c0006495:	bb 02 00 00 00       	mov    ebx,0x2
c000649a:	83 f8 01             	cmp    eax,0x1
c000649d:	74 07                	je     c00064a6 <f_mkdir+0xa1>
c000649f:	eb 2a                	jmp    c00064cb <f_mkdir+0xc6>
c00064a1:	bb 07 00 00 00       	mov    ebx,0x7
c00064a6:	31 c9                	xor    ecx,ecx
c00064a8:	89 f2                	mov    edx,esi
c00064aa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064ae:	e8 ed cd ff ff       	call   c00032a0 <remove_chain>
c00064b3:	eb 05                	jmp    c00064ba <f_mkdir+0xb5>
c00064b5:	bb 08 00 00 00       	mov    ebx,0x8
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	57                   	push   edi
c00064be:	e8 91 1d 00 00       	call   c0008254 <ff_memfree>
c00064c3:	83 c4 10             	add    esp,0x10
c00064c6:	e9 5d 01 00 00       	jmp    c0006628 <f_mkdir+0x223>
c00064cb:	bb 01 00 00 00       	mov    ebx,0x1
c00064d0:	83 f8 ff             	cmp    eax,0xffffffff
c00064d3:	74 d1                	je     c00064a6 <f_mkdir+0xa1>
c00064d5:	89 f2                	mov    edx,esi
c00064d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064db:	e8 08 cf ff ff       	call   c00033e8 <dir_clear>
c00064e0:	89 c3                	mov    ebx,eax
c00064e2:	85 c0                	test   eax,eax
c00064e4:	75 c0                	jne    c00064a6 <f_mkdir+0xa1>
c00064e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064ea:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064ed:	74 69                	je     c0006558 <f_mkdir+0x153>
c00064ef:	b9 0b 00 00 00       	mov    ecx,0xb
c00064f4:	83 c0 54             	add    eax,0x54
c00064f7:	ba 20 00 00 00       	mov    edx,0x20
c00064fc:	e8 eb b5 ff ff       	call   c0001aec <mem_set>
c0006501:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006505:	83 c0 6a             	add    eax,0x6a
c0006508:	c6 40 ea 2e          	mov    BYTE PTR [eax-0x16],0x2e
c000650c:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0006510:	ba 00 00 21 50       	mov    edx,0x50210000
c0006515:	e8 b4 b5 ff ff       	call   c0001ace <st_dword>
c000651a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000651e:	89 f1                	mov    ecx,esi
c0006520:	8d 50 54             	lea    edx,[eax+0x54]
c0006523:	e8 bc e6 ff ff       	call   c0004be4 <st_clust.isra.1>
c0006528:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000652c:	b9 20 00 00 00       	mov    ecx,0x20
c0006531:	8d 50 54             	lea    edx,[eax+0x54]
c0006534:	83 c0 74             	add    eax,0x74
c0006537:	e8 9b b5 ff ff       	call   c0001ad7 <mem_cpy>
c000653c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006540:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006544:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006548:	8d 50 74             	lea    edx,[eax+0x74]
c000654b:	e8 94 e6 ff ff       	call   c0004be4 <st_clust.isra.1>
c0006550:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006554:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006558:	8d 44 24 34          	lea    eax,[esp+0x34]
c000655c:	e8 59 db ff ff       	call   c00040ba <dir_register>
c0006561:	89 c3                	mov    ebx,eax
c0006563:	85 c0                	test   eax,eax
c0006565:	0f 85 3b ff ff ff    	jne    c00064a6 <f_mkdir+0xa1>
c000656b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000656f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006572:	75 74                	jne    c00065e8 <f_mkdir+0x1e3>
c0006574:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006577:	ba 00 00 21 50       	mov    edx,0x50210000
c000657c:	83 c0 0c             	add    eax,0xc
c000657f:	e8 4a b5 ff ff       	call   c0001ace <st_dword>
c0006584:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006588:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000658b:	89 f2                	mov    edx,esi
c000658d:	83 c0 34             	add    eax,0x34
c0006590:	e8 39 b5 ff ff       	call   c0001ace <st_dword>
c0006595:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006599:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000659d:	c1 e2 09             	shl    edx,0x9
c00065a0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065a3:	83 c0 38             	add    eax,0x38
c00065a6:	e8 23 b5 ff ff       	call   c0001ace <st_dword>
c00065ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065af:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065b3:	c1 e2 09             	shl    edx,0x9
c00065b6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065b9:	83 c0 28             	add    eax,0x28
c00065bc:	e8 0d b5 ff ff       	call   c0001ace <st_dword>
c00065c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065c5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065c8:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065cf:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065d3:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065d7:	e8 cf d3 ff ff       	call   c00039ab <store_xdir>
c00065dc:	89 c3                	mov    ebx,eax
c00065de:	85 c0                	test   eax,eax
c00065e0:	0f 85 d4 fe ff ff    	jne    c00064ba <f_mkdir+0xb5>
c00065e6:	eb 30                	jmp    c0006618 <f_mkdir+0x213>
c00065e8:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065ec:	ba 00 00 21 50       	mov    edx,0x50210000
c00065f1:	83 c0 16             	add    eax,0x16
c00065f4:	e8 d5 b4 ff ff       	call   c0001ace <st_dword>
c00065f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065fd:	89 f1                	mov    ecx,esi
c00065ff:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006603:	e8 dc e5 ff ff       	call   c0004be4 <st_clust.isra.1>
c0006608:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000660c:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006610:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006614:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006618:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000661c:	e8 1c dd ff ff       	call   c000433d <sync_fs>
c0006621:	89 c3                	mov    ebx,eax
c0006623:	e9 92 fe ff ff       	jmp    c00064ba <f_mkdir+0xb5>
c0006628:	83 ec 80             	sub    esp,0xffffff80
c000662b:	89 d8                	mov    eax,ebx
c000662d:	5b                   	pop    ebx
c000662e:	5e                   	pop    esi
c000662f:	5f                   	pop    edi
c0006630:	c3                   	ret    

c0006631 <f_rename>:
c0006631:	55                   	push   ebp
c0006632:	57                   	push   edi
c0006633:	56                   	push   esi
c0006634:	53                   	push   ebx
c0006635:	81 ec fc 00 00 00    	sub    esp,0xfc
c000663b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006642:	e8 f3 b9 ff ff       	call   c000203a <get_ldnumber>
c0006647:	b9 02 00 00 00       	mov    ecx,0x2
c000664c:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006650:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006657:	e8 7e be ff ff       	call   c00024da <mount_volume>
c000665c:	85 c0                	test   eax,eax
c000665e:	0f 85 b5 02 00 00    	jne    c0006919 <f_rename+0x2e8>
c0006664:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006668:	83 ec 0c             	sub    esp,0xc
c000666b:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000666f:	68 60 04 00 00       	push   0x460
c0006674:	e8 c5 1b 00 00       	call   c000823e <ff_memalloc>
c0006679:	89 c3                	mov    ebx,eax
c000667b:	83 c4 10             	add    esp,0x10
c000667e:	b8 11 00 00 00       	mov    eax,0x11
c0006683:	85 db                	test   ebx,ebx
c0006685:	0f 84 8e 02 00 00    	je     c0006919 <f_rename+0x2e8>
c000668b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000668f:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006695:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006698:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000669b:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066a2:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066a6:	e8 9b e5 ff ff       	call   c0004c46 <follow_path>
c00066ab:	85 c0                	test   eax,eax
c00066ad:	0f 85 52 02 00 00    	jne    c0006905 <f_rename+0x2d4>
c00066b3:	b8 06 00 00 00       	mov    eax,0x6
c00066b8:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066c0:	0f 85 3f 02 00 00    	jne    c0006905 <f_rename+0x2d4>
c00066c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066ca:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066cd:	0f 85 05 01 00 00    	jne    c00067d8 <f_rename+0x1a7>
c00066d3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066d6:	b9 40 00 00 00       	mov    ecx,0x40
c00066db:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066df:	e8 f3 b3 ff ff       	call   c0001ad7 <mem_cpy>
c00066e4:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066e9:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066ed:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066f4:	e8 de b3 ff ff       	call   c0001ad7 <mem_cpy>
c00066f9:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006700:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006707:	e8 3a e5 ff ff       	call   c0004c46 <follow_path>
c000670c:	85 c0                	test   eax,eax
c000670e:	75 29                	jne    c0006739 <f_rename+0x108>
c0006710:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006714:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000671b:	74 0a                	je     c0006727 <f_rename+0xf6>
c000671d:	b8 08 00 00 00       	mov    eax,0x8
c0006722:	e9 de 01 00 00       	jmp    c0006905 <f_rename+0x2d4>
c0006727:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000672e:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006735:	75 e6                	jne    c000671d <f_rename+0xec>
c0006737:	eb 09                	jmp    c0006742 <f_rename+0x111>
c0006739:	83 f8 04             	cmp    eax,0x4
c000673c:	0f 85 c3 01 00 00    	jne    c0006905 <f_rename+0x2d4>
c0006742:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006749:	e8 6c d9 ff ff       	call   c00040ba <dir_register>
c000674e:	85 c0                	test   eax,eax
c0006750:	0f 85 af 01 00 00    	jne    c0006905 <f_rename+0x2d4>
c0006756:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000675a:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000675d:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006760:	89 c5                	mov    ebp,eax
c0006762:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006765:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006769:	8d 46 24             	lea    eax,[esi+0x24]
c000676c:	e8 e7 b2 ff ff       	call   c0001a58 <ld_word>
c0006771:	b9 40 00 00 00       	mov    ecx,0x40
c0006776:	89 c7                	mov    edi,eax
c0006778:	8d 54 24 18          	lea    edx,[esp+0x18]
c000677c:	89 f0                	mov    eax,esi
c000677e:	e8 54 b3 ff ff       	call   c0001ad7 <mem_cpy>
c0006783:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006787:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000678a:	89 e9                	mov    ecx,ebp
c000678c:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c000678f:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006793:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006797:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000679a:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c000679d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067a0:	83 c0 24             	add    eax,0x24
c00067a3:	0f b7 d7             	movzx  edx,di
c00067a6:	e8 1f b3 ff ff       	call   c0001aca <st_word>
c00067ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067af:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067b2:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067b5:	a8 10                	test   al,0x10
c00067b7:	75 06                	jne    c00067bf <f_rename+0x18e>
c00067b9:	83 c8 20             	or     eax,0x20
c00067bc:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067bf:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067c6:	e8 e0 d1 ff ff       	call   c00039ab <store_xdir>
c00067cb:	85 c0                	test   eax,eax
c00067cd:	0f 84 1c 01 00 00    	je     c00068ef <f_rename+0x2be>
c00067d3:	e9 2d 01 00 00       	jmp    c0006905 <f_rename+0x2d4>
c00067d8:	b9 20 00 00 00       	mov    ecx,0x20
c00067dd:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067e4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067e8:	e8 ea b2 ff ff       	call   c0001ad7 <mem_cpy>
c00067ed:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067f2:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067f6:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067fd:	e8 d5 b2 ff ff       	call   c0001ad7 <mem_cpy>
c0006802:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006809:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006810:	e8 31 e4 ff ff       	call   c0004c46 <follow_path>
c0006815:	85 c0                	test   eax,eax
c0006817:	75 27                	jne    c0006840 <f_rename+0x20f>
c0006819:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000681d:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006824:	0f 85 f3 fe ff ff    	jne    c000671d <f_rename+0xec>
c000682a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006831:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006838:	0f 85 df fe ff ff    	jne    c000671d <f_rename+0xec>
c000683e:	eb 09                	jmp    c0006849 <f_rename+0x218>
c0006840:	83 f8 04             	cmp    eax,0x4
c0006843:	0f 85 bc 00 00 00    	jne    c0006905 <f_rename+0x2d4>
c0006849:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006850:	e8 65 d8 ff ff       	call   c00040ba <dir_register>
c0006855:	85 c0                	test   eax,eax
c0006857:	0f 85 a8 00 00 00    	jne    c0006905 <f_rename+0x2d4>
c000685d:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006864:	b9 13 00 00 00       	mov    ecx,0x13
c0006869:	8d 54 24 25          	lea    edx,[esp+0x25]
c000686d:	8d 46 0d             	lea    eax,[esi+0xd]
c0006870:	e8 62 b2 ff ff       	call   c0001ad7 <mem_cpy>
c0006875:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006879:	a8 10                	test   al,0x10
c000687b:	75 03                	jne    c0006880 <f_rename+0x24f>
c000687d:	83 c8 20             	or     eax,0x20
c0006880:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006883:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006887:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000688b:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c000688f:	74 5e                	je     c00068ef <f_rename+0x2be>
c0006891:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006898:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c000689c:	74 51                	je     c00068ef <f_rename+0x2be>
c000689e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068a2:	89 f2                	mov    edx,esi
c00068a4:	8a 07                	mov    al,BYTE PTR [edi]
c00068a6:	e8 10 e3 ff ff       	call   c0004bbb <ld_clust.isra.0>
c00068ab:	89 c2                	mov    edx,eax
c00068ad:	89 f8                	mov    eax,edi
c00068af:	e8 3d b4 ff ff       	call   c0001cf1 <clst2sect>
c00068b4:	89 c6                	mov    esi,eax
c00068b6:	89 d1                	mov    ecx,edx
c00068b8:	b8 02 00 00 00       	mov    eax,0x2
c00068bd:	09 f2                	or     edx,esi
c00068bf:	74 44                	je     c0006905 <f_rename+0x2d4>
c00068c1:	89 f2                	mov    edx,esi
c00068c3:	89 f8                	mov    eax,edi
c00068c5:	e8 65 b9 ff ff       	call   c000222f <move_window>
c00068ca:	85 c0                	test   eax,eax
c00068cc:	75 37                	jne    c0006905 <f_rename+0x2d4>
c00068ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d2:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068d6:	75 17                	jne    c00068ef <f_rename+0x2be>
c00068d8:	8d 50 74             	lea    edx,[eax+0x74]
c00068db:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068e2:	e8 fd e2 ff ff       	call   c0004be4 <st_clust.isra.1>
c00068e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068eb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068ef:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068f3:	e8 38 d1 ff ff       	call   c0003a30 <dir_remove>
c00068f8:	85 c0                	test   eax,eax
c00068fa:	75 09                	jne    c0006905 <f_rename+0x2d4>
c00068fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006900:	e8 38 da ff ff       	call   c000433d <sync_fs>
c0006905:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006909:	83 ec 0c             	sub    esp,0xc
c000690c:	53                   	push   ebx
c000690d:	e8 42 19 00 00       	call   c0008254 <ff_memfree>
c0006912:	83 c4 10             	add    esp,0x10
c0006915:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006919:	81 c4 fc 00 00 00    	add    esp,0xfc
c000691f:	5b                   	pop    ebx
c0006920:	5e                   	pop    esi
c0006921:	5f                   	pop    edi
c0006922:	5d                   	pop    ebp
c0006923:	c3                   	ret    

c0006924 <f_chmod>:
c0006924:	57                   	push   edi
c0006925:	b9 02 00 00 00       	mov    ecx,0x2
c000692a:	56                   	push   esi
c000692b:	53                   	push   ebx
c000692c:	83 ec 60             	sub    esp,0x60
c000692f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006933:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006937:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000693b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000693f:	e8 96 bb ff ff       	call   c00024da <mount_volume>
c0006944:	85 c0                	test   eax,eax
c0006946:	0f 85 af 00 00 00    	jne    c00069fb <f_chmod+0xd7>
c000694c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006950:	83 ec 0c             	sub    esp,0xc
c0006953:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006957:	68 60 04 00 00       	push   0x460
c000695c:	e8 dd 18 00 00       	call   c000823e <ff_memalloc>
c0006961:	89 c6                	mov    esi,eax
c0006963:	83 c4 10             	add    esp,0x10
c0006966:	b8 11 00 00 00       	mov    eax,0x11
c000696b:	85 f6                	test   esi,esi
c000696d:	0f 84 88 00 00 00    	je     c00069fb <f_chmod+0xd7>
c0006973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006977:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000697d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006980:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006983:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006987:	8d 44 24 14          	lea    eax,[esp+0x14]
c000698b:	e8 b6 e2 ff ff       	call   c0004c46 <follow_path>
c0006990:	85 c0                	test   eax,eax
c0006992:	75 53                	jne    c00069e7 <f_chmod+0xc3>
c0006994:	b8 06 00 00 00       	mov    eax,0x6
c0006999:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c000699e:	75 47                	jne    c00069e7 <f_chmod+0xc3>
c00069a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069a4:	89 f9                	mov    ecx,edi
c00069a6:	83 e1 27             	and    ecx,0x27
c00069a9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069ac:	75 1d                	jne    c00069cb <f_chmod+0xa7>
c00069ae:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069b1:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069b4:	21 cb                	and    ebx,ecx
c00069b6:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069b9:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069bc:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069c0:	e8 e6 cf ff ff       	call   c00039ab <store_xdir>
c00069c5:	85 c0                	test   eax,eax
c00069c7:	75 1e                	jne    c00069e7 <f_chmod+0xc3>
c00069c9:	eb 13                	jmp    c00069de <f_chmod+0xba>
c00069cb:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069cf:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069d2:	21 cb                	and    ebx,ecx
c00069d4:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069d7:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069da:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069e2:	e8 56 d9 ff ff       	call   c000433d <sync_fs>
c00069e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069eb:	83 ec 0c             	sub    esp,0xc
c00069ee:	56                   	push   esi
c00069ef:	e8 60 18 00 00       	call   c0008254 <ff_memfree>
c00069f4:	83 c4 10             	add    esp,0x10
c00069f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00069fb:	83 c4 60             	add    esp,0x60
c00069fe:	5b                   	pop    ebx
c00069ff:	5e                   	pop    esi
c0006a00:	5f                   	pop    edi
c0006a01:	c3                   	ret    

c0006a02 <f_utime>:
c0006a02:	56                   	push   esi
c0006a03:	b9 02 00 00 00       	mov    ecx,0x2
c0006a08:	53                   	push   ebx
c0006a09:	83 ec 64             	sub    esp,0x64
c0006a0c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a10:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a14:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a18:	e8 bd ba ff ff       	call   c00024da <mount_volume>
c0006a1d:	85 c0                	test   eax,eax
c0006a1f:	0f 85 b5 00 00 00    	jne    c0006ada <f_utime+0xd8>
c0006a25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a29:	83 ec 0c             	sub    esp,0xc
c0006a2c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a30:	68 60 04 00 00       	push   0x460
c0006a35:	e8 04 18 00 00       	call   c000823e <ff_memalloc>
c0006a3a:	89 c3                	mov    ebx,eax
c0006a3c:	83 c4 10             	add    esp,0x10
c0006a3f:	b8 11 00 00 00       	mov    eax,0x11
c0006a44:	85 db                	test   ebx,ebx
c0006a46:	0f 84 8e 00 00 00    	je     c0006ada <f_utime+0xd8>
c0006a4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a50:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a56:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a59:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a5c:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a60:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a64:	e8 dd e1 ff ff       	call   c0004c46 <follow_path>
c0006a69:	85 c0                	test   eax,eax
c0006a6b:	75 59                	jne    c0006ac6 <f_utime+0xc4>
c0006a6d:	b8 06 00 00 00       	mov    eax,0x6
c0006a72:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a77:	75 4d                	jne    c0006ac6 <f_utime+0xc4>
c0006a79:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a81:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a85:	c1 e2 10             	shl    edx,0x10
c0006a88:	09 ca                	or     edx,ecx
c0006a8a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a8d:	75 1a                	jne    c0006aa9 <f_utime+0xa7>
c0006a8f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a92:	83 c0 0c             	add    eax,0xc
c0006a95:	e8 34 b0 ff ff       	call   c0001ace <st_dword>
c0006a9a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a9e:	e8 08 cf ff ff       	call   c00039ab <store_xdir>
c0006aa3:	85 c0                	test   eax,eax
c0006aa5:	75 1f                	jne    c0006ac6 <f_utime+0xc4>
c0006aa7:	eb 14                	jmp    c0006abd <f_utime+0xbb>
c0006aa9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aad:	83 c0 16             	add    eax,0x16
c0006ab0:	e8 19 b0 ff ff       	call   c0001ace <st_dword>
c0006ab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac1:	e8 77 d8 ff ff       	call   c000433d <sync_fs>
c0006ac6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006aca:	83 ec 0c             	sub    esp,0xc
c0006acd:	53                   	push   ebx
c0006ace:	e8 81 17 00 00       	call   c0008254 <ff_memfree>
c0006ad3:	83 c4 10             	add    esp,0x10
c0006ad6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ada:	83 c4 64             	add    esp,0x64
c0006add:	5b                   	pop    ebx
c0006ade:	5e                   	pop    esi
c0006adf:	c3                   	ret    

c0006ae0 <f_getlabel>:
c0006ae0:	55                   	push   ebp
c0006ae1:	31 c9                	xor    ecx,ecx
c0006ae3:	57                   	push   edi
c0006ae4:	56                   	push   esi
c0006ae5:	53                   	push   ebx
c0006ae6:	83 ec 6c             	sub    esp,0x6c
c0006ae9:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006aed:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006af4:	e8 e1 b9 ff ff       	call   c00024da <mount_volume>
c0006af9:	89 c3                	mov    ebx,eax
c0006afb:	85 c0                	test   eax,eax
c0006afd:	0f 85 73 01 00 00    	jne    c0006c76 <f_getlabel+0x196>
c0006b03:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b0b:	0f 84 65 01 00 00    	je     c0006c76 <f_getlabel+0x196>
c0006b11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b15:	31 d2                	xor    edx,edx
c0006b17:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b1b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b1f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b27:	e8 7b c4 ff ff       	call   c0002fa7 <dir_sdi>
c0006b2c:	89 c3                	mov    ebx,eax
c0006b2e:	85 c0                	test   eax,eax
c0006b30:	0f 85 2f 01 00 00    	jne    c0006c65 <f_getlabel+0x185>
c0006b36:	ba 01 00 00 00       	mov    edx,0x1
c0006b3b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b3f:	e8 75 cc ff ff       	call   c00037b9 <dir_read>
c0006b44:	89 c3                	mov    ebx,eax
c0006b46:	85 c0                	test   eax,eax
c0006b48:	0f 85 17 01 00 00    	jne    c0006c65 <f_getlabel+0x185>
c0006b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b52:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b55:	74 09                	je     c0006b60 <f_getlabel+0x80>
c0006b57:	31 f6                	xor    esi,esi
c0006b59:	31 c9                	xor    ecx,ecx
c0006b5b:	e9 c8 00 00 00       	jmp    c0006c28 <f_getlabel+0x148>
c0006b60:	31 ed                	xor    ebp,ebp
c0006b62:	31 f6                	xor    esi,esi
c0006b64:	31 ff                	xor    edi,edi
c0006b66:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b6a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b6e:	39 fa                	cmp    edx,edi
c0006b70:	76 4b                	jbe    c0006bbd <f_getlabel+0xdd>
c0006b72:	47                   	inc    edi
c0006b73:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b76:	01 d0                	add    eax,edx
c0006b78:	e8 db ae ff ff       	call   c0001a58 <ld_word>
c0006b7d:	66 85 ed             	test   bp,bp
c0006b80:	75 0d                	jne    c0006b8f <f_getlabel+0xaf>
c0006b82:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b88:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b8d:	76 28                	jbe    c0006bb7 <f_getlabel+0xd7>
c0006b8f:	89 e9                	mov    ecx,ebp
c0006b91:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b98:	c1 e1 10             	shl    ecx,0x10
c0006b9b:	01 f2                	add    edx,esi
c0006b9d:	0f b7 c0             	movzx  eax,ax
c0006ba0:	09 c8                	or     eax,ecx
c0006ba2:	b9 04 00 00 00       	mov    ecx,0x4
c0006ba7:	e8 4c b0 ff ff       	call   c0001bf8 <put_utf>
c0006bac:	84 c0                	test   al,al
c0006bae:	74 0b                	je     c0006bbb <f_getlabel+0xdb>
c0006bb0:	0f b6 c0             	movzx  eax,al
c0006bb3:	01 c6                	add    esi,eax
c0006bb5:	31 c0                	xor    eax,eax
c0006bb7:	89 c5                	mov    ebp,eax
c0006bb9:	eb ab                	jmp    c0006b66 <f_getlabel+0x86>
c0006bbb:	31 f6                	xor    esi,esi
c0006bbd:	66 85 ed             	test   bp,bp
c0006bc0:	74 02                	je     c0006bc4 <f_getlabel+0xe4>
c0006bc2:	31 f6                	xor    esi,esi
c0006bc4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bcb:	c6 04 30 00          	mov    BYTE PTR [eax+esi*1],0x0
c0006bcf:	e9 a2 00 00 00       	jmp    c0006c76 <f_getlabel+0x196>
c0006bd4:	83 ff 0b             	cmp    edi,0xb
c0006bd7:	74 11                	je     c0006bea <f_getlabel+0x10a>
c0006bd9:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006bde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006be2:	8d 79 02             	lea    edi,[ecx+0x2]
c0006be5:	c1 e0 08             	shl    eax,0x8
c0006be8:	09 c2                	or     edx,eax
c0006bea:	50                   	push   eax
c0006beb:	50                   	push   eax
c0006bec:	68 b5 01 00 00       	push   0x1b5
c0006bf1:	0f b7 d2             	movzx  edx,dx
c0006bf4:	52                   	push   edx
c0006bf5:	e8 07 17 00 00       	call   c0008301 <ff_oem2uni>
c0006bfa:	83 c4 10             	add    esp,0x10
c0006bfd:	66 85 c0             	test   ax,ax
c0006c00:	74 46                	je     c0006c48 <f_getlabel+0x168>
c0006c02:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c09:	b9 04 00 00 00       	mov    ecx,0x4
c0006c0e:	01 f2                	add    edx,esi
c0006c10:	0f b7 c0             	movzx  eax,ax
c0006c13:	e8 e0 af ff ff       	call   c0001bf8 <put_utf>
c0006c18:	84 c0                	test   al,al
c0006c1a:	74 2c                	je     c0006c48 <f_getlabel+0x168>
c0006c1c:	0f b6 c0             	movzx  eax,al
c0006c1f:	01 c6                	add    esi,eax
c0006c21:	83 ff 0b             	cmp    edi,0xb
c0006c24:	74 24                	je     c0006c4a <f_getlabel+0x16a>
c0006c26:	89 f9                	mov    ecx,edi
c0006c28:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c2c:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c2f:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c34:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c3d:	e8 ea ae ff ff       	call   c0001b2c <dbc_1st>
c0006c42:	85 c0                	test   eax,eax
c0006c44:	74 a4                	je     c0006bea <f_getlabel+0x10a>
c0006c46:	eb 8c                	jmp    c0006bd4 <f_getlabel+0xf4>
c0006c48:	31 f6                	xor    esi,esi
c0006c4a:	03 b4 24 84 00 00 00 	add    esi,DWORD PTR [esp+0x84]
c0006c51:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0006c54:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
c0006c5b:	74 19                	je     c0006c76 <f_getlabel+0x196>
c0006c5d:	4e                   	dec    esi
c0006c5e:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c0006c61:	74 ee                	je     c0006c51 <f_getlabel+0x171>
c0006c63:	eb 11                	jmp    c0006c76 <f_getlabel+0x196>
c0006c65:	83 fb 04             	cmp    ebx,0x4
c0006c68:	75 0c                	jne    c0006c76 <f_getlabel+0x196>
c0006c6a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c71:	31 db                	xor    ebx,ebx
c0006c73:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c76:	85 db                	test   ebx,ebx
c0006c78:	75 50                	jne    c0006cca <f_getlabel+0x1ea>
c0006c7a:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c82:	74 46                	je     c0006cca <f_getlabel+0x1ea>
c0006c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c88:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c8b:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c8e:	e8 9c b5 ff ff       	call   c000222f <move_window>
c0006c93:	89 c3                	mov    ebx,eax
c0006c95:	85 c0                	test   eax,eax
c0006c97:	75 31                	jne    c0006cca <f_getlabel+0x1ea>
c0006c99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c9d:	b8 43 00 00 00       	mov    eax,0x43
c0006ca2:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ca4:	80 f9 03             	cmp    cl,0x3
c0006ca7:	74 0f                	je     c0006cb8 <f_getlabel+0x1d8>
c0006ca9:	31 c0                	xor    eax,eax
c0006cab:	80 f9 04             	cmp    cl,0x4
c0006cae:	0f 94 c0             	sete   al
c0006cb1:	48                   	dec    eax
c0006cb2:	83 e0 c3             	and    eax,0xffffffc3
c0006cb5:	83 c0 64             	add    eax,0x64
c0006cb8:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cbc:	e8 a4 ad ff ff       	call   c0001a65 <ld_dword>
c0006cc1:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cc8:	89 07                	mov    DWORD PTR [edi],eax
c0006cca:	83 c4 6c             	add    esp,0x6c
c0006ccd:	89 d8                	mov    eax,ebx
c0006ccf:	5b                   	pop    ebx
c0006cd0:	5e                   	pop    esi
c0006cd1:	5f                   	pop    edi
c0006cd2:	5d                   	pop    ebp
c0006cd3:	c3                   	ret    

c0006cd4 <f_setlabel>:
c0006cd4:	56                   	push   esi
c0006cd5:	b9 02 00 00 00       	mov    ecx,0x2
c0006cda:	53                   	push   ebx
c0006cdb:	83 ec 74             	sub    esp,0x74
c0006cde:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006ce2:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006ce9:	e8 ec b7 ff ff       	call   c00024da <mount_volume>
c0006cee:	89 c6                	mov    esi,eax
c0006cf0:	85 c0                	test   eax,eax
c0006cf2:	0f 85 41 02 00 00    	jne    c0006f39 <f_setlabel+0x265>
c0006cf8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006cfc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cff:	0f 85 8e 00 00 00    	jne    c0006d93 <f_setlabel+0xbf>
c0006d05:	b9 16 00 00 00       	mov    ecx,0x16
c0006d0a:	31 d2                	xor    edx,edx
c0006d0c:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d10:	31 db                	xor    ebx,ebx
c0006d12:	e8 d5 ad ff ff       	call   c0001aec <mem_set>
c0006d17:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d1e:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d21:	0f 86 0a 01 00 00    	jbe    c0006e31 <f_setlabel+0x15d>
c0006d27:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d2e:	e8 ff ad ff ff       	call   c0001b32 <tchar2uni>
c0006d33:	89 c6                	mov    esi,eax
c0006d35:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d3a:	76 2a                	jbe    c0006d66 <f_setlabel+0x92>
c0006d3c:	83 f8 ff             	cmp    eax,0xffffffff
c0006d3f:	74 05                	je     c0006d46 <f_setlabel+0x72>
c0006d41:	83 fb 09             	cmp    ebx,0x9
c0006d44:	76 0a                	jbe    c0006d50 <f_setlabel+0x7c>
c0006d46:	be 06 00 00 00       	mov    esi,0x6
c0006d4b:	e9 e9 01 00 00       	jmp    c0006f39 <f_setlabel+0x265>
c0006d50:	89 c2                	mov    edx,eax
c0006d52:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d56:	c1 ea 10             	shr    edx,0x10
c0006d59:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d5c:	01 c8                	add    eax,ecx
c0006d5e:	43                   	inc    ebx
c0006d5f:	e8 66 ad ff ff       	call   c0001aca <st_word>
c0006d64:	eb 04                	jmp    c0006d6a <f_setlabel+0x96>
c0006d66:	85 c0                	test   eax,eax
c0006d68:	74 dc                	je     c0006d46 <f_setlabel+0x72>
c0006d6a:	89 f2                	mov    edx,esi
c0006d6c:	b8 97 04 02 c0       	mov    eax,0xc0020497
c0006d71:	e8 a4 ad ff ff       	call   c0001b1a <chk_chr>
c0006d76:	85 c0                	test   eax,eax
c0006d78:	75 cc                	jne    c0006d46 <f_setlabel+0x72>
c0006d7a:	83 fb 0a             	cmp    ebx,0xa
c0006d7d:	77 c7                	ja     c0006d46 <f_setlabel+0x72>
c0006d7f:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d82:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d86:	0f b7 d6             	movzx  edx,si
c0006d89:	01 c8                	add    eax,ecx
c0006d8b:	43                   	inc    ebx
c0006d8c:	e8 39 ad ff ff       	call   c0001aca <st_word>
c0006d91:	eb 84                	jmp    c0006d17 <f_setlabel+0x43>
c0006d93:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d98:	ba 20 00 00 00       	mov    edx,0x20
c0006d9d:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006da1:	31 db                	xor    ebx,ebx
c0006da3:	e8 44 ad ff ff       	call   c0001aec <mem_set>
c0006da8:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006daf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006db2:	76 60                	jbe    c0006e14 <f_setlabel+0x140>
c0006db4:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006dbb:	e8 72 ad ff ff       	call   c0001b32 <tchar2uni>
c0006dc0:	3d ff ff 00 00       	cmp    eax,0xffff
c0006dc5:	0f 87 7b ff ff ff    	ja     c0006d46 <f_setlabel+0x72>
c0006dcb:	83 ec 0c             	sub    esp,0xc
c0006dce:	50                   	push   eax
c0006dcf:	e8 9c 15 00 00       	call   c0008370 <ff_wtoupper>
c0006dd4:	5a                   	pop    edx
c0006dd5:	59                   	pop    ecx
c0006dd6:	68 b5 01 00 00       	push   0x1b5
c0006ddb:	50                   	push   eax
c0006ddc:	e8 8a 14 00 00       	call   c000826b <ff_uni2oem>
c0006de1:	83 c4 10             	add    esp,0x10
c0006de4:	89 c6                	mov    esi,eax
c0006de6:	66 85 c0             	test   ax,ax
c0006de9:	0f 84 57 ff ff ff    	je     c0006d46 <f_setlabel+0x72>
c0006def:	0f b7 d0             	movzx  edx,ax
c0006df2:	b8 90 04 02 c0       	mov    eax,0xc0020490
c0006df7:	e8 1e ad ff ff       	call   c0001b1a <chk_chr>
c0006dfc:	85 c0                	test   eax,eax
c0006dfe:	0f 85 42 ff ff ff    	jne    c0006d46 <f_setlabel+0x72>
c0006e04:	66 81 fe ff 00       	cmp    si,0xff
c0006e09:	0f 87 14 01 00 00    	ja     c0006f23 <f_setlabel+0x24f>
c0006e0f:	e9 fa 00 00 00       	jmp    c0006f0e <f_setlabel+0x23a>
c0006e14:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e19:	0f 84 27 ff ff ff    	je     c0006d46 <f_setlabel+0x72>
c0006e1f:	85 db                	test   ebx,ebx
c0006e21:	74 0e                	je     c0006e31 <f_setlabel+0x15d>
c0006e23:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e26:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e2b:	75 04                	jne    c0006e31 <f_setlabel+0x15d>
c0006e2d:	89 c3                	mov    ebx,eax
c0006e2f:	eb ee                	jmp    c0006e1f <f_setlabel+0x14b>
c0006e31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e35:	31 d2                	xor    edx,edx
c0006e37:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e3b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e3f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e47:	e8 5b c1 ff ff       	call   c0002fa7 <dir_sdi>
c0006e4c:	89 c6                	mov    esi,eax
c0006e4e:	85 c0                	test   eax,eax
c0006e50:	0f 85 e3 00 00 00    	jne    c0006f39 <f_setlabel+0x265>
c0006e56:	ba 01 00 00 00       	mov    edx,0x1
c0006e5b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e5f:	e8 55 c9 ff ff       	call   c00037b9 <dir_read>
c0006e64:	85 c0                	test   eax,eax
c0006e66:	75 21                	jne    c0006e89 <f_setlabel+0x1b5>
c0006e68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e6c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e70:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e73:	74 5d                	je     c0006ed2 <f_setlabel+0x1fe>
c0006e75:	85 db                	test   ebx,ebx
c0006e77:	74 0b                	je     c0006e84 <f_setlabel+0x1b0>
c0006e79:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e7e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e82:	eb 70                	jmp    c0006ef4 <f_setlabel+0x220>
c0006e84:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e87:	eb 70                	jmp    c0006ef9 <f_setlabel+0x225>
c0006e89:	83 f8 04             	cmp    eax,0x4
c0006e8c:	75 7c                	jne    c0006f0a <f_setlabel+0x236>
c0006e8e:	85 db                	test   ebx,ebx
c0006e90:	0f 84 a3 00 00 00    	je     c0006f39 <f_setlabel+0x265>
c0006e96:	ba 01 00 00 00       	mov    edx,0x1
c0006e9b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e9f:	e8 8f ca ff ff       	call   c0003933 <dir_alloc>
c0006ea4:	89 c6                	mov    esi,eax
c0006ea6:	85 c0                	test   eax,eax
c0006ea8:	0f 85 8b 00 00 00    	jne    c0006f39 <f_setlabel+0x265>
c0006eae:	31 d2                	xor    edx,edx
c0006eb0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eb4:	b9 20 00 00 00       	mov    ecx,0x20
c0006eb9:	e8 2e ac ff ff       	call   c0001aec <mem_set>
c0006ebe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ec2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ec5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ec9:	75 18                	jne    c0006ee3 <f_setlabel+0x20f>
c0006ecb:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ece:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed2:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ed5:	b9 16 00 00 00       	mov    ecx,0x16
c0006eda:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ede:	83 c0 02             	add    eax,0x2
c0006ee1:	eb 9b                	jmp    c0006e7e <f_setlabel+0x1aa>
c0006ee3:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006ee7:	b9 0b 00 00 00       	mov    ecx,0xb
c0006eec:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ef0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ef4:	e8 de ab ff ff       	call   c0001ad7 <mem_cpy>
c0006ef9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006efd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f05:	e8 33 d4 ff ff       	call   c000433d <sync_fs>
c0006f0a:	89 c6                	mov    esi,eax
c0006f0c:	eb 2b                	jmp    c0006f39 <f_setlabel+0x265>
c0006f0e:	83 fb 0a             	cmp    ebx,0xa
c0006f11:	0f 87 2f fe ff ff    	ja     c0006d46 <f_setlabel+0x72>
c0006f17:	89 f0                	mov    eax,esi
c0006f19:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f1d:	43                   	inc    ebx
c0006f1e:	e9 85 fe ff ff       	jmp    c0006da8 <f_setlabel+0xd4>
c0006f23:	83 fb 09             	cmp    ebx,0x9
c0006f26:	0f 87 1a fe ff ff    	ja     c0006d46 <f_setlabel+0x72>
c0006f2c:	89 f0                	mov    eax,esi
c0006f2e:	66 c1 e8 08          	shr    ax,0x8
c0006f32:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f36:	43                   	inc    ebx
c0006f37:	eb de                	jmp    c0006f17 <f_setlabel+0x243>
c0006f39:	83 c4 74             	add    esp,0x74
c0006f3c:	89 f0                	mov    eax,esi
c0006f3e:	5b                   	pop    ebx
c0006f3f:	5e                   	pop    esi
c0006f40:	c3                   	ret    

c0006f41 <f_forward>:
c0006f41:	55                   	push   ebp
c0006f42:	57                   	push   edi
c0006f43:	56                   	push   esi
c0006f44:	53                   	push   ebx
c0006f45:	83 ec 2c             	sub    esp,0x2c
c0006f48:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f4c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f50:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f54:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f5a:	89 d8                	mov    eax,ebx
c0006f5c:	e8 f3 b1 ff ff       	call   c0002154 <validate>
c0006f61:	89 c5                	mov    ebp,eax
c0006f63:	85 c0                	test   eax,eax
c0006f65:	0f 85 aa 01 00 00    	jne    c0007115 <f_forward+0x1d4>
c0006f6b:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f6f:	85 ed                	test   ebp,ebp
c0006f71:	0f 85 9e 01 00 00    	jne    c0007115 <f_forward+0x1d4>
c0006f77:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f7b:	0f 84 8f 01 00 00    	je     c0007110 <f_forward+0x1cf>
c0006f81:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f84:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f87:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f8a:	bf 00 00 00 00       	mov    edi,0x0
c0006f8f:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f92:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f96:	89 d1                	mov    ecx,edx
c0006f98:	19 f9                	sbb    ecx,edi
c0006f9a:	0f 83 cf 00 00 00    	jae    c000706f <f_forward+0x12e>
c0006fa0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fa4:	e9 c6 00 00 00       	jmp    c000706f <f_forward+0x12e>
c0006fa9:	50                   	push   eax
c0006faa:	50                   	push   eax
c0006fab:	6a 00                	push   0x0
c0006fad:	6a 00                	push   0x0
c0006faf:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fb3:	83 c4 10             	add    esp,0x10
c0006fb6:	85 c0                	test   eax,eax
c0006fb8:	0f 84 57 01 00 00    	je     c0007115 <f_forward+0x1d4>
c0006fbe:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fc2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fc5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fc8:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fcc:	89 d7                	mov    edi,edx
c0006fce:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fd1:	89 c6                	mov    esi,eax
c0006fd3:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fd7:	21 ce                	and    esi,ecx
c0006fd9:	89 c1                	mov    ecx,eax
c0006fdb:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fe1:	0f 84 98 00 00 00    	je     c000707f <f_forward+0x13e>
c0006fe7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006feb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006fee:	89 c8                	mov    eax,ecx
c0006ff0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006ff4:	e8 f8 ac ff ff       	call   c0001cf1 <clst2sect>
c0006ff9:	89 d7                	mov    edi,edx
c0006ffb:	09 c7                	or     edi,eax
c0006ffd:	0f 84 9e 00 00 00    	je     c00070a1 <f_forward+0x160>
c0007003:	31 ff                	xor    edi,edi
c0007005:	01 c6                	add    esi,eax
c0007007:	11 d7                	adc    edi,edx
c0007009:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000700c:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000700f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007013:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007016:	39 fa                	cmp    edx,edi
c0007018:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000701c:	0f 85 a2 00 00 00    	jne    c00070c4 <f_forward+0x183>
c0007022:	39 f0                	cmp    eax,esi
c0007024:	0f 85 9a 00 00 00    	jne    c00070c4 <f_forward+0x183>
c000702a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000702d:	ba 00 02 00 00       	mov    edx,0x200
c0007032:	25 ff 01 00 00       	and    eax,0x1ff
c0007037:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000703b:	29 c2                	sub    edx,eax
c000703d:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007040:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007043:	39 d1                	cmp    ecx,edx
c0007045:	76 02                	jbe    c0007049 <f_forward+0x108>
c0007047:	89 d1                	mov    ecx,edx
c0007049:	52                   	push   edx
c000704a:	8d 73 50             	lea    esi,[ebx+0x50]
c000704d:	52                   	push   edx
c000704e:	01 c6                	add    esi,eax
c0007050:	51                   	push   ecx
c0007051:	56                   	push   esi
c0007052:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007056:	83 c4 10             	add    esp,0x10
c0007059:	85 c0                	test   eax,eax
c000705b:	74 44                	je     c00070a1 <f_forward+0x160>
c000705d:	31 ff                	xor    edi,edi
c000705f:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007062:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007065:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007069:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c000706d:	01 07                	add    DWORD PTR [edi],eax
c000706f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007074:	0f 85 2f ff ff ff    	jne    c0006fa9 <f_forward+0x68>
c000707a:	e9 96 00 00 00       	jmp    c0007115 <f_forward+0x1d4>
c000707f:	85 f6                	test   esi,esi
c0007081:	0f 85 60 ff ff ff    	jne    c0006fe7 <f_forward+0xa6>
c0007087:	89 d7                	mov    edi,edx
c0007089:	09 c7                	or     edi,eax
c000708b:	75 05                	jne    c0007092 <f_forward+0x151>
c000708d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007090:	eb 0a                	jmp    c000709c <f_forward+0x15b>
c0007092:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007095:	89 d8                	mov    eax,ebx
c0007097:	e8 15 bd ff ff       	call   c0002db1 <get_fat>
c000709c:	83 f8 01             	cmp    eax,0x1
c000709f:	77 0b                	ja     c00070ac <f_forward+0x16b>
c00070a1:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070a5:	bd 02 00 00 00       	mov    ebp,0x2
c00070aa:	eb 69                	jmp    c0007115 <f_forward+0x1d4>
c00070ac:	83 f8 ff             	cmp    eax,0xffffffff
c00070af:	75 0b                	jne    c00070bc <f_forward+0x17b>
c00070b1:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070b5:	bd 01 00 00 00       	mov    ebp,0x1
c00070ba:	eb 59                	jmp    c0007115 <f_forward+0x1d4>
c00070bc:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070bf:	e9 23 ff ff ff       	jmp    c0006fe7 <f_forward+0xa6>
c00070c4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070c8:	79 20                	jns    c00070ea <f_forward+0x1a9>
c00070ca:	83 ec 0c             	sub    esp,0xc
c00070cd:	6a 01                	push   0x1
c00070cf:	52                   	push   edx
c00070d0:	50                   	push   eax
c00070d1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070d5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070d9:	50                   	push   eax
c00070da:	e8 44 a9 ff ff       	call   c0001a23 <disk_write>
c00070df:	83 c4 20             	add    esp,0x20
c00070e2:	85 c0                	test   eax,eax
c00070e4:	75 cb                	jne    c00070b1 <f_forward+0x170>
c00070e6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070ea:	83 ec 0c             	sub    esp,0xc
c00070ed:	6a 01                	push   0x1
c00070ef:	57                   	push   edi
c00070f0:	56                   	push   esi
c00070f1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070f5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070f9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070fd:	50                   	push   eax
c00070fe:	e8 0a a9 ff ff       	call   c0001a0d <disk_read>
c0007103:	83 c4 20             	add    esp,0x20
c0007106:	85 c0                	test   eax,eax
c0007108:	0f 84 1c ff ff ff    	je     c000702a <f_forward+0xe9>
c000710e:	eb a1                	jmp    c00070b1 <f_forward+0x170>
c0007110:	bd 07 00 00 00       	mov    ebp,0x7
c0007115:	83 c4 2c             	add    esp,0x2c
c0007118:	89 e8                	mov    eax,ebp
c000711a:	5b                   	pop    ebx
c000711b:	5e                   	pop    esi
c000711c:	5f                   	pop    edi
c000711d:	5d                   	pop    ebp
c000711e:	c3                   	ret    

c000711f <f_mkfs>:
c000711f:	55                   	push   ebp
c0007120:	57                   	push   edi
c0007121:	56                   	push   esi
c0007122:	53                   	push   ebx
c0007123:	bb 0b 00 00 00       	mov    ebx,0xb
c0007128:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000712e:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007135:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000713c:	e8 f9 ae ff ff       	call   c000203a <get_ldnumber>
c0007141:	85 c0                	test   eax,eax
c0007143:	0f 88 e8 10 00 00    	js     c0008231 <f_mkfs+0x1112>
c0007149:	8b 14 85 40 47 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb8c0]
c0007150:	85 d2                	test   edx,edx
c0007152:	74 03                	je     c0007157 <f_mkfs+0x38>
c0007154:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007157:	85 f6                	test   esi,esi
c0007159:	75 05                	jne    c0007160 <f_mkfs+0x41>
c000715b:	be 80 04 02 c0       	mov    esi,0xc0020480
c0007160:	0f b6 c0             	movzx  eax,al
c0007163:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007167:	83 ec 0c             	sub    esp,0xc
c000716a:	bb 03 00 00 00       	mov    ebx,0x3
c000716f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007173:	e8 92 a8 ff ff       	call   c0001a0a <disk_initialize>
c0007178:	83 c4 10             	add    esp,0x10
c000717b:	a8 01                	test   al,0x1
c000717d:	0f 85 ae 10 00 00    	jne    c0008231 <f_mkfs+0x1112>
c0007183:	bb 0a 00 00 00       	mov    ebx,0xa
c0007188:	a8 04                	test   al,0x4
c000718a:	0f 85 a1 10 00 00    	jne    c0008231 <f_mkfs+0x1112>
c0007190:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007193:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007197:	85 c0                	test   eax,eax
c0007199:	75 20                	jne    c00071bb <f_mkfs+0x9c>
c000719b:	51                   	push   ecx
c000719c:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071a0:	50                   	push   eax
c00071a1:	6a 03                	push   0x3
c00071a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071a7:	e8 8d a8 ff ff       	call   c0001a39 <disk_ioctl>
c00071ac:	83 c4 10             	add    esp,0x10
c00071af:	85 c0                	test   eax,eax
c00071b1:	74 08                	je     c00071bb <f_mkfs+0x9c>
c00071b3:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071bb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071bf:	8d 42 ff             	lea    eax,[edx-0x1]
c00071c2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071c7:	77 04                	ja     c00071cd <f_mkfs+0xae>
c00071c9:	85 c2                	test   edx,eax
c00071cb:	74 08                	je     c00071d5 <f_mkfs+0xb6>
c00071cd:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071d5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071d8:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c00071dc:	48                   	dec    eax
c00071dd:	3c 01                	cmp    al,0x1
c00071df:	76 05                	jbe    c00071e6 <f_mkfs+0xc7>
c00071e1:	c6 44 24 40 01       	mov    BYTE PTR [esp+0x40],0x1
c00071e6:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071ed:	48                   	dec    eax
c00071ee:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071f3:	77 07                	ja     c00071fc <f_mkfs+0xdd>
c00071f5:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071fa:	74 08                	je     c0007204 <f_mkfs+0xe5>
c00071fc:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007204:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007207:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000720d:	77 07                	ja     c0007216 <f_mkfs+0xf7>
c000720f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007212:	85 d8                	test   eax,ebx
c0007214:	74 02                	je     c0007218 <f_mkfs+0xf9>
c0007216:	31 db                	xor    ebx,ebx
c0007218:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007223:	77 0a                	ja     c000722f <f_mkfs+0x110>
c0007225:	bb 11 00 00 00       	mov    ebx,0x11
c000722a:	e9 02 10 00 00       	jmp    c0008231 <f_mkfs+0x1112>
c000722f:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007236:	8b 36                	mov    esi,DWORD PTR [esi]
c0007238:	85 ed                	test   ebp,ebp
c000723a:	75 1e                	jne    c000725a <f_mkfs+0x13b>
c000723c:	83 ec 0c             	sub    esp,0xc
c000723f:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007246:	25 00 fe ff ff       	and    eax,0xfffffe00
c000724b:	50                   	push   eax
c000724c:	e8 ed 0f 00 00       	call   c000823e <ff_memalloc>
c0007251:	83 c4 10             	add    esp,0x10
c0007254:	89 c5                	mov    ebp,eax
c0007256:	85 c0                	test   eax,eax
c0007258:	74 cb                	je     c0007225 <f_mkfs+0x106>
c000725a:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007262:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000726a:	52                   	push   edx
c000726b:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c000726f:	50                   	push   eax
c0007270:	6a 01                	push   0x1
c0007272:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007276:	e8 be a7 ff ff       	call   c0001a39 <disk_ioctl>
c000727b:	83 c4 10             	add    esp,0x10
c000727e:	85 c0                	test   eax,eax
c0007280:	0f 85 46 0f 00 00    	jne    c00081cc <f_mkfs+0x10ad>
c0007286:	89 f1                	mov    ecx,esi
c0007288:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007290:	83 e1 0f             	and    ecx,0xf
c0007293:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000729b:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c000729f:	83 e6 08             	and    esi,0x8
c00072a2:	75 56                	jne    c00072fa <f_mkfs+0x1db>
c00072a4:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072a8:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072ac:	83 ff 00             	cmp    edi,0x0
c00072af:	76 20                	jbe    c00072d1 <f_mkfs+0x1b2>
c00072b1:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072b6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072bc:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072c4:	83 d7 ff             	adc    edi,0xffffffff
c00072c7:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072cb:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072cf:	eb 21                	jmp    c00072f2 <f_mkfs+0x1d3>
c00072d1:	ba 3f 00 00 00       	mov    edx,0x3f
c00072d6:	39 f2                	cmp    edx,esi
c00072d8:	19 f8                	sbb    eax,edi
c00072da:	73 1e                	jae    c00072fa <f_mkfs+0x1db>
c00072dc:	83 c6 c1             	add    esi,0xffffffc1
c00072df:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072e7:	83 d7 ff             	adc    edi,0xffffffff
c00072ea:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072ee:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072f2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072fa:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00072fe:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007302:	89 04 24             	mov    DWORD PTR [esp],eax
c0007305:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007309:	ba 7f 00 00 00       	mov    edx,0x7f
c000730e:	31 c0                	xor    eax,eax
c0007310:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007313:	89 c7                	mov    edi,eax
c0007315:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007319:	0f 83 c1 0a 00 00    	jae    c0007de0 <f_mkfs+0xcc1>
c000731f:	89 df                	mov    edi,ebx
c0007321:	c1 ef 09             	shr    edi,0x9
c0007324:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007328:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000732f:	c1 ef 09             	shr    edi,0x9
c0007332:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007337:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000733b:	74 29                	je     c0007366 <f_mkfs+0x247>
c000733d:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007342:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007348:	0f 97 c2             	seta   dl
c000734b:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c000734e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007352:	0f 92 c0             	setb   al
c0007355:	08 c2                	or     dl,al
c0007357:	75 5b                	jne    c00073b4 <f_mkfs+0x295>
c0007359:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000735d:	83 e0 07             	and    eax,0x7
c0007360:	3c 04                	cmp    al,0x4
c0007362:	74 50                	je     c00073b4 <f_mkfs+0x295>
c0007364:	eb 1b                	jmp    c0007381 <f_mkfs+0x262>
c0007366:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000736b:	0f 87 6f 0a 00 00    	ja     c0007de0 <f_mkfs+0xcc1>
c0007371:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007377:	76 08                	jbe    c0007381 <f_mkfs+0x262>
c0007379:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007381:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007385:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007389:	83 e0 01             	and    eax,0x1
c000738c:	80 e1 02             	and    cl,0x2
c000738f:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007393:	74 0d                	je     c00073a2 <f_mkfs+0x283>
c0007395:	84 c0                	test   al,al
c0007397:	0f 84 4f 09 00 00    	je     c0007cec <f_mkfs+0xbcd>
c000739d:	e9 0e 08 00 00       	jmp    c0007bb0 <f_mkfs+0xa91>
c00073a2:	bb 13 00 00 00       	mov    ebx,0x13
c00073a7:	84 c0                	test   al,al
c00073a9:	0f 85 01 08 00 00    	jne    c0007bb0 <f_mkfs+0xa91>
c00073af:	e9 35 0e 00 00       	jmp    c00081e9 <f_mkfs+0x10ca>
c00073b4:	ba ff 0f 00 00       	mov    edx,0xfff
c00073b9:	31 c0                	xor    eax,eax
c00073bb:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073be:	89 c7                	mov    edi,eax
c00073c0:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073c4:	0f 83 16 0a 00 00    	jae    c0007de0 <f_mkfs+0xcc1>
c00073ca:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073d0:	77 39                	ja     c000740b <f_mkfs+0x2ec>
c00073d2:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073d7:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073df:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073e2:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073e6:	73 08                	jae    c00073f0 <f_mkfs+0x2d1>
c00073e8:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073f0:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073f5:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073f8:	b8 00 00 00 00       	mov    eax,0x0
c00073fd:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007401:	73 08                	jae    c000740b <f_mkfs+0x2ec>
c0007403:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000740b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000740f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007413:	83 c0 20             	add    eax,0x20
c0007416:	83 d2 00             	adc    edx,0x0
c0007419:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000741d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007421:	31 d2                	xor    edx,edx
c0007423:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007427:	52                   	push   edx
c0007428:	50                   	push   eax
c0007429:	31 ff                	xor    edi,edi
c000742b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000742f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007433:	e8 d4 80 01 00       	call   c001f50c <__udivdi3>
c0007438:	83 c4 10             	add    esp,0x10
c000743b:	c1 e0 02             	shl    eax,0x2
c000743e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007442:	05 07 02 00 00       	add    eax,0x207
c0007447:	89 f1                	mov    ecx,esi
c0007449:	c1 e8 09             	shr    eax,0x9
c000744c:	89 fb                	mov    ebx,edi
c000744e:	83 c1 ff             	add    ecx,0xffffffff
c0007451:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007455:	83 d3 ff             	adc    ebx,0xffffffff
c0007458:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000745c:	13 5c 24 44          	adc    ebx,DWORD PTR [esp+0x44]
c0007460:	31 d2                	xor    edx,edx
c0007462:	01 c8                	add    eax,ecx
c0007464:	11 da                	adc    edx,ebx
c0007466:	89 c1                	mov    ecx,eax
c0007468:	f7 de                	neg    esi
c000746a:	83 d7 00             	adc    edi,0x0
c000746d:	21 f1                	and    ecx,esi
c000746f:	f7 df                	neg    edi
c0007471:	89 d0                	mov    eax,edx
c0007473:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007477:	21 f8                	and    eax,edi
c0007479:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000747d:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007481:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007485:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007489:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000748d:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007491:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007494:	0f ac d0 01          	shrd   eax,edx,0x1
c0007498:	d1 ea                	shr    edx,1
c000749a:	89 df                	mov    edi,ebx
c000749c:	39 c1                	cmp    ecx,eax
c000749e:	19 d7                	sbb    edi,edx
c00074a0:	0f 83 3a 09 00 00    	jae    c0007de0 <f_mkfs+0xcc1>
c00074a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074aa:	31 d2                	xor    edx,edx
c00074ac:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074b4:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074b8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074bb:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074bf:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074c3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074c7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074cb:	83 f8 0f             	cmp    eax,0xf
c00074ce:	0f 86 0c 09 00 00    	jbe    c0007de0 <f_mkfs+0xcc1>
c00074d4:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074dc:	0f 87 fe 08 00 00    	ja     c0007de0 <f_mkfs+0xcc1>
c00074e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074e6:	31 d2                	xor    edx,edx
c00074e8:	83 c0 07             	add    eax,0x7
c00074eb:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074f3:	c1 e8 03             	shr    eax,0x3
c00074f6:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074fe:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007502:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007506:	c1 e0 09             	shl    eax,0x9
c0007509:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007510:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007514:	48                   	dec    eax
c0007515:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007519:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
c000751d:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007521:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007525:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000752c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007530:	31 d2                	xor    edx,edx
c0007532:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007537:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000753b:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000753f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007543:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007547:	31 ff                	xor    edi,edi
c0007549:	31 f6                	xor    esi,esi
c000754b:	31 db                	xor    ebx,ebx
c000754d:	85 ff                	test   edi,edi
c000754f:	74 05                	je     c0007556 <f_mkfs+0x437>
c0007551:	4f                   	dec    edi
c0007552:	74 44                	je     c0007598 <f_mkfs+0x479>
c0007554:	eb 4f                	jmp    c00075a5 <f_mkfs+0x486>
c0007556:	83 ec 0c             	sub    esp,0xc
c0007559:	0f b7 c3             	movzx  eax,bx
c000755c:	50                   	push   eax
c000755d:	e8 0e 0e 00 00       	call   c0008370 <ff_wtoupper>
c0007562:	83 c4 10             	add    esp,0x10
c0007565:	89 c1                	mov    ecx,eax
c0007567:	66 39 c3             	cmp    bx,ax
c000756a:	8d 53 01             	lea    edx,[ebx+0x1]
c000756d:	75 3e                	jne    c00075ad <f_mkfs+0x48e>
c000756f:	be 01 00 00 00       	mov    esi,0x1
c0007574:	89 df                	mov    edi,ebx
c0007576:	66 01 f7             	add    di,si
c0007579:	75 07                	jne    c0007582 <f_mkfs+0x463>
c000757b:	83 fe 7f             	cmp    esi,0x7f
c000757e:	77 31                	ja     c00075b1 <f_mkfs+0x492>
c0007580:	eb 16                	jmp    c0007598 <f_mkfs+0x479>
c0007582:	83 ec 0c             	sub    esp,0xc
c0007585:	0f b7 ff             	movzx  edi,di
c0007588:	57                   	push   edi
c0007589:	e8 e2 0d 00 00       	call   c0008370 <ff_wtoupper>
c000758e:	83 c4 10             	add    esp,0x10
c0007591:	39 c7                	cmp    edi,eax
c0007593:	75 e6                	jne    c000757b <f_mkfs+0x45c>
c0007595:	46                   	inc    esi
c0007596:	eb dc                	jmp    c0007574 <f_mkfs+0x455>
c0007598:	31 c0                	xor    eax,eax
c000759a:	4e                   	dec    esi
c000759b:	0f 95 c0             	setne  al
c000759e:	89 d9                	mov    ecx,ebx
c00075a0:	89 c7                	mov    edi,eax
c00075a2:	43                   	inc    ebx
c00075a3:	eb 14                	jmp    c00075b9 <f_mkfs+0x49a>
c00075a5:	89 f1                	mov    ecx,esi
c00075a7:	01 f3                	add    ebx,esi
c00075a9:	31 ff                	xor    edi,edi
c00075ab:	eb 0c                	jmp    c00075b9 <f_mkfs+0x49a>
c00075ad:	89 d3                	mov    ebx,edx
c00075af:	eb 08                	jmp    c00075b9 <f_mkfs+0x49a>
c00075b1:	bf 02 00 00 00       	mov    edi,0x2
c00075b6:	83 c9 ff             	or     ecx,0xffffffff
c00075b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075bc:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075c0:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075c4:	0f b6 c1             	movzx  eax,cl
c00075c7:	e8 87 a9 ff ff       	call   c0001f53 <xsum32>
c00075cc:	66 c1 e9 08          	shr    cx,0x8
c00075d0:	89 c2                	mov    edx,eax
c00075d2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075d5:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075d9:	0f b7 c1             	movzx  eax,cx
c00075dc:	e8 72 a9 ff ff       	call   c0001f53 <xsum32>
c00075e1:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075e6:	66 85 db             	test   bx,bx
c00075e9:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075ed:	74 1f                	je     c000760e <f_mkfs+0x4ef>
c00075ef:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075f2:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075f9:	83 c0 02             	add    eax,0x2
c00075fc:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007602:	39 c2                	cmp    edx,eax
c0007604:	74 08                	je     c000760e <f_mkfs+0x4ef>
c0007606:	89 04 24             	mov    DWORD PTR [esp],eax
c0007609:	e9 3f ff ff ff       	jmp    c000754d <f_mkfs+0x42e>
c000760e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007611:	83 ec 0c             	sub    esp,0xc
c0007614:	05 01 02 00 00       	add    eax,0x201
c0007619:	c1 e8 09             	shr    eax,0x9
c000761c:	50                   	push   eax
c000761d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007621:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007625:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007629:	55                   	push   ebp
c000762a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000762e:	e8 f0 a3 ff ff       	call   c0001a23 <disk_write>
c0007633:	83 c4 20             	add    esp,0x20
c0007636:	85 c0                	test   eax,eax
c0007638:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000763b:	0f 85 8b 0b 00 00    	jne    c00081cc <f_mkfs+0x10ad>
c0007641:	89 d0                	mov    eax,edx
c0007643:	31 d2                	xor    edx,edx
c0007645:	01 44 24 48          	add    DWORD PTR [esp+0x48],eax
c0007649:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c000764d:	66 85 db             	test   bx,bx
c0007650:	74 04                	je     c0007656 <f_mkfs+0x537>
c0007652:	31 c0                	xor    eax,eax
c0007654:	eb b0                	jmp    c0007606 <f_mkfs+0x4e7>
c0007656:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000765a:	31 d2                	xor    edx,edx
c000765c:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007660:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007664:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007668:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000766f:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007673:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007679:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000767d:	8d 70 01             	lea    esi,[eax+0x1]
c0007680:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007684:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007688:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007693:	c1 eb 09             	shr    ebx,0x9
c0007696:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000769a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000769e:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076a5:	31 d2                	xor    edx,edx
c00076a7:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00076af:	89 c1                	mov    ecx,eax
c00076b1:	89 e8                	mov    eax,ebp
c00076b3:	e8 34 a4 ff ff       	call   c0001aec <mem_set>
c00076b8:	31 c0                	xor    eax,eax
c00076ba:	83 fe 07             	cmp    esi,0x7
c00076bd:	76 10                	jbe    c00076cf <f_mkfs+0x5b0>
c00076bf:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076c2:	76 0b                	jbe    c00076cf <f_mkfs+0x5b0>
c00076c4:	40                   	inc    eax
c00076c5:	83 ee 08             	sub    esi,0x8
c00076c8:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076cd:	eb eb                	jmp    c00076ba <f_mkfs+0x59b>
c00076cf:	b2 01                	mov    dl,0x1
c00076d1:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076d5:	85 f6                	test   esi,esi
c00076d7:	74 0c                	je     c00076e5 <f_mkfs+0x5c6>
c00076d9:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076dc:	76 07                	jbe    c00076e5 <f_mkfs+0x5c6>
c00076de:	08 11                	or     BYTE PTR [ecx],dl
c00076e0:	4e                   	dec    esi
c00076e1:	01 d2                	add    edx,edx
c00076e3:	eb f0                	jmp    c00076d5 <f_mkfs+0x5b6>
c00076e5:	89 df                	mov    edi,ebx
c00076e7:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076eb:	76 04                	jbe    c00076f1 <f_mkfs+0x5d2>
c00076ed:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076f1:	83 ec 0c             	sub    esp,0xc
c00076f4:	57                   	push   edi
c00076f5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076f9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076fd:	55                   	push   ebp
c00076fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007702:	e8 1c a3 ff ff       	call   c0001a23 <disk_write>
c0007707:	83 c4 20             	add    esp,0x20
c000770a:	85 c0                	test   eax,eax
c000770c:	0f 85 ba 0a 00 00    	jne    c00081cc <f_mkfs+0x10ad>
c0007712:	31 d2                	xor    edx,edx
c0007714:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007718:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000771c:	29 fb                	sub    ebx,edi
c000771e:	0f 85 7a ff ff ff    	jne    c000769e <f_mkfs+0x57f>
c0007724:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007728:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007730:	31 f6                	xor    esi,esi
c0007732:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007736:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007739:	31 d2                	xor    edx,edx
c000773b:	89 e8                	mov    eax,ebp
c000773d:	e8 aa a3 ff ff       	call   c0001aec <mem_set>
c0007742:	31 c9                	xor    ecx,ecx
c0007744:	85 db                	test   ebx,ebx
c0007746:	75 40                	jne    c0007788 <f_mkfs+0x669>
c0007748:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000774d:	89 e8                	mov    eax,ebp
c000774f:	e8 7a a3 ff ff       	call   c0001ace <st_dword>
c0007754:	8d 45 04             	lea    eax,[ebp+0x4]
c0007757:	83 ca ff             	or     edx,0xffffffff
c000775a:	bb 02 00 00 00       	mov    ebx,0x2
c000775f:	e8 6a a3 ff ff       	call   c0001ace <st_dword>
c0007764:	b9 08 00 00 00       	mov    ecx,0x8
c0007769:	eb 1d                	jmp    c0007788 <f_mkfs+0x669>
c000776b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000776e:	76 3b                	jbe    c00077ab <f_mkfs+0x68c>
c0007770:	43                   	inc    ebx
c0007771:	83 fe 01             	cmp    esi,0x1
c0007774:	89 da                	mov    edx,ebx
c0007776:	77 03                	ja     c000777b <f_mkfs+0x65c>
c0007778:	83 ca ff             	or     edx,0xffffffff
c000777b:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000777f:	4e                   	dec    esi
c0007780:	e8 49 a3 ff ff       	call   c0001ace <st_dword>
c0007785:	83 c1 04             	add    ecx,0x4
c0007788:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000778c:	85 f6                	test   esi,esi
c000778e:	75 db                	jne    c000776b <f_mkfs+0x64c>
c0007790:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007795:	77 14                	ja     c00077ab <f_mkfs+0x68c>
c0007797:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c000779e:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077a2:	85 f6                	test   esi,esi
c00077a4:	74 05                	je     c00077ab <f_mkfs+0x68c>
c00077a6:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077a9:	77 dd                	ja     c0007788 <f_mkfs+0x669>
c00077ab:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00077af:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077b3:	39 cf                	cmp    edi,ecx
c00077b5:	76 02                	jbe    c00077b9 <f_mkfs+0x69a>
c00077b7:	89 cf                	mov    edi,ecx
c00077b9:	83 ec 0c             	sub    esp,0xc
c00077bc:	57                   	push   edi
c00077bd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077c1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077c5:	55                   	push   ebp
c00077c6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077ca:	e8 54 a2 ff ff       	call   c0001a23 <disk_write>
c00077cf:	83 c4 20             	add    esp,0x20
c00077d2:	85 c0                	test   eax,eax
c00077d4:	0f 85 f2 09 00 00    	jne    c00081cc <f_mkfs+0x10ad>
c00077da:	31 d2                	xor    edx,edx
c00077dc:	01 7c 24 40          	add    DWORD PTR [esp+0x40],edi
c00077e0:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00077e4:	29 7c 24 50          	sub    DWORD PTR [esp+0x50],edi
c00077e8:	0f 85 48 ff ff ff    	jne    c0007736 <f_mkfs+0x617>
c00077ee:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077f1:	31 d2                	xor    edx,edx
c00077f3:	89 e8                	mov    eax,ebp
c00077f5:	31 ff                	xor    edi,edi
c00077f7:	e8 f0 a2 ff ff       	call   c0001aec <mem_set>
c00077fc:	8d 45 34             	lea    eax,[ebp+0x34]
c00077ff:	ba 02 00 00 00       	mov    edx,0x2
c0007804:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007808:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000780c:	e8 bd a2 ff ff       	call   c0001ace <st_dword>
c0007811:	8d 45 38             	lea    eax,[ebp+0x38]
c0007814:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007818:	e8 b1 a2 ff ff       	call   c0001ace <st_dword>
c000781d:	8d 45 44             	lea    eax,[ebp+0x44]
c0007820:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007824:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007828:	e8 a1 a2 ff ff       	call   c0001ace <st_dword>
c000782d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007831:	8d 45 54             	lea    eax,[ebp+0x54]
c0007834:	83 c2 02             	add    edx,0x2
c0007837:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000783b:	e8 8e a2 ff ff       	call   c0001ace <st_dword>
c0007840:	8d 45 58             	lea    eax,[ebp+0x58]
c0007843:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007847:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000784b:	e8 7e a2 ff ff       	call   c0001ace <st_dword>
c0007850:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007854:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c0007859:	89 c6                	mov    esi,eax
c000785b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000785f:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007863:	89 04 24             	mov    DWORD PTR [esp],eax
c0007866:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c000786a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c000786d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007871:	39 cb                	cmp    ebx,ecx
c0007873:	76 02                	jbe    c0007877 <f_mkfs+0x758>
c0007875:	89 cb                	mov    ebx,ecx
c0007877:	83 ec 0c             	sub    esp,0xc
c000787a:	53                   	push   ebx
c000787b:	57                   	push   edi
c000787c:	56                   	push   esi
c000787d:	55                   	push   ebp
c000787e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007882:	e8 9c a1 ff ff       	call   c0001a23 <disk_write>
c0007887:	83 c4 20             	add    esp,0x20
c000788a:	85 c0                	test   eax,eax
c000788c:	0f 85 3a 09 00 00    	jne    c00081cc <f_mkfs+0x10ad>
c0007892:	31 d2                	xor    edx,edx
c0007894:	b9 00 02 00 00       	mov    ecx,0x200
c0007899:	89 e8                	mov    eax,ebp
c000789b:	e8 4c a2 ff ff       	call   c0001aec <mem_set>
c00078a0:	31 d2                	xor    edx,edx
c00078a2:	01 de                	add    esi,ebx
c00078a4:	11 d7                	adc    edi,edx
c00078a6:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078a9:	75 bf                	jne    c000786a <f_mkfs+0x74b>
c00078ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078af:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078b3:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078bb:	b9 00 02 00 00       	mov    ecx,0x200
c00078c0:	31 d2                	xor    edx,edx
c00078c2:	89 e8                	mov    eax,ebp
c00078c4:	e8 23 a2 ff ff       	call   c0001aec <mem_set>
c00078c9:	b9 0b 00 00 00       	mov    ecx,0xb
c00078ce:	ba 60 05 02 c0       	mov    edx,0xc0020560
c00078d3:	89 e8                	mov    eax,ebp
c00078d5:	e8 fd a1 ff ff       	call   c0001ad7 <mem_cpy>
c00078da:	8d 45 40             	lea    eax,[ebp+0x40]
c00078dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078e1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078e5:	e8 e7 a1 ff ff       	call   c0001ad1 <st_qword>
c00078ea:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078ee:	8d 45 48             	lea    eax,[ebp+0x48]
c00078f1:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078f5:	e8 d7 a1 ff ff       	call   c0001ad1 <st_qword>
c00078fa:	8d 45 50             	lea    eax,[ebp+0x50]
c00078fd:	ba 20 00 00 00       	mov    edx,0x20
c0007902:	e8 c7 a1 ff ff       	call   c0001ace <st_dword>
c0007907:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000790b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000790f:	e8 ba a1 ff ff       	call   c0001ace <st_dword>
c0007914:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007918:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c000791c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007920:	e8 a9 a1 ff ff       	call   c0001ace <st_dword>
c0007925:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007928:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000792c:	e8 9d a1 ff ff       	call   c0001ace <st_dword>
c0007931:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007935:	8d 50 02             	lea    edx,[eax+0x2]
c0007938:	8d 45 60             	lea    eax,[ebp+0x60]
c000793b:	e8 8e a1 ff ff       	call   c0001ace <st_dword>
c0007940:	8d 45 64             	lea    eax,[ebp+0x64]
c0007943:	ba 00 00 21 50       	mov    edx,0x50210000
c0007948:	e8 81 a1 ff ff       	call   c0001ace <st_dword>
c000794d:	8d 45 68             	lea    eax,[ebp+0x68]
c0007950:	ba 00 01 00 00       	mov    edx,0x100
c0007955:	e8 70 a1 ff ff       	call   c0001aca <st_word>
c000795a:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c000795e:	b8 0a 00 00 00       	mov    eax,0xa
c0007963:	48                   	dec    eax
c0007964:	74 05                	je     c000796b <f_mkfs+0x84c>
c0007966:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007969:	eb f8                	jmp    c0007963 <f_mkfs+0x844>
c000796b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000796f:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007973:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007977:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c000797b:	74 05                	je     c0007982 <f_mkfs+0x863>
c000797d:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007980:	eb f5                	jmp    c0007977 <f_mkfs+0x858>
c0007982:	8d 45 78             	lea    eax,[ebp+0x78]
c0007985:	ba eb fe 00 00       	mov    edx,0xfeeb
c000798a:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007990:	31 db                	xor    ebx,ebx
c0007992:	e8 33 a1 ff ff       	call   c0001aca <st_word>
c0007997:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c000799d:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00079a5:	e8 20 a1 ff ff       	call   c0001aca <st_word>
c00079aa:	31 c9                	xor    ecx,ecx
c00079ac:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079af:	83 f8 01             	cmp    eax,0x1
c00079b2:	76 13                	jbe    c00079c7 <f_mkfs+0x8a8>
c00079b4:	83 f9 70             	cmp    ecx,0x70
c00079b7:	74 0e                	je     c00079c7 <f_mkfs+0x8a8>
c00079b9:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079be:	89 da                	mov    edx,ebx
c00079c0:	e8 8e a5 ff ff       	call   c0001f53 <xsum32>
c00079c5:	89 c3                	mov    ebx,eax
c00079c7:	41                   	inc    ecx
c00079c8:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079ce:	75 dc                	jne    c00079ac <f_mkfs+0x88d>
c00079d0:	89 f0                	mov    eax,esi
c00079d2:	89 fa                	mov    edx,edi
c00079d4:	83 c0 01             	add    eax,0x1
c00079d7:	83 d2 00             	adc    edx,0x0
c00079da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00079e2:	83 ec 0c             	sub    esp,0xc
c00079e5:	6a 01                	push   0x1
c00079e7:	57                   	push   edi
c00079e8:	56                   	push   esi
c00079e9:	55                   	push   ebp
c00079ea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079ee:	e8 30 a0 ff ff       	call   c0001a23 <disk_write>
c00079f3:	83 c4 20             	add    esp,0x20
c00079f6:	85 c0                	test   eax,eax
c00079f8:	0f 85 ce 07 00 00    	jne    c00081cc <f_mkfs+0x10ad>
c00079fe:	31 d2                	xor    edx,edx
c0007a00:	b9 00 02 00 00       	mov    ecx,0x200
c0007a05:	89 e8                	mov    eax,ebp
c0007a07:	e8 e0 a0 ff ff       	call   c0001aec <mem_set>
c0007a0c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a11:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a14:	e8 b1 a0 ff ff       	call   c0001aca <st_word>
c0007a19:	89 f0                	mov    eax,esi
c0007a1b:	83 c0 09             	add    eax,0x9
c0007a1e:	89 fa                	mov    edx,edi
c0007a20:	83 d2 00             	adc    edx,0x0
c0007a23:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a2a:	31 c9                	xor    ecx,ecx
c0007a2c:	41                   	inc    ecx
c0007a2d:	89 da                	mov    edx,ebx
c0007a2f:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a34:	e8 1a a5 ff ff       	call   c0001f53 <xsum32>
c0007a39:	89 c3                	mov    ebx,eax
c0007a3b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a41:	75 e9                	jne    c0007a2c <f_mkfs+0x90d>
c0007a43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a47:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a4b:	83 c0 01             	add    eax,0x1
c0007a4e:	83 d2 00             	adc    edx,0x0
c0007a51:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a55:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007a59:	83 ec 0c             	sub    esp,0xc
c0007a5c:	6a 01                	push   0x1
c0007a5e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a62:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a66:	55                   	push   ebp
c0007a67:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a6b:	e8 b3 9f ff ff       	call   c0001a23 <disk_write>
c0007a70:	83 c4 20             	add    esp,0x20
c0007a73:	85 c0                	test   eax,eax
c0007a75:	0f 85 51 07 00 00    	jne    c00081cc <f_mkfs+0x10ad>
c0007a7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a7f:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a83:	75 09                	jne    c0007a8e <f_mkfs+0x96f>
c0007a85:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a88:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a8c:	74 12                	je     c0007aa0 <f_mkfs+0x981>
c0007a8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a92:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a96:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a9e:	eb 8a                	jmp    c0007a2a <f_mkfs+0x90b>
c0007aa0:	31 d2                	xor    edx,edx
c0007aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0007aa7:	89 e8                	mov    eax,ebp
c0007aa9:	e8 3e a0 ff ff       	call   c0001aec <mem_set>
c0007aae:	83 c6 0b             	add    esi,0xb
c0007ab1:	83 d7 00             	adc    edi,0x0
c0007ab4:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007ab8:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007abc:	31 c9                	xor    ecx,ecx
c0007abe:	41                   	inc    ecx
c0007abf:	89 da                	mov    edx,ebx
c0007ac1:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ac6:	e8 88 a4 ff ff       	call   c0001f53 <xsum32>
c0007acb:	89 c3                	mov    ebx,eax
c0007acd:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ad3:	75 e9                	jne    c0007abe <f_mkfs+0x99f>
c0007ad5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ad8:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007adc:	83 c6 01             	add    esi,0x1
c0007adf:	83 d7 00             	adc    edi,0x0
c0007ae2:	83 ec 0c             	sub    esp,0xc
c0007ae5:	6a 01                	push   0x1
c0007ae7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007aeb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007aef:	55                   	push   ebp
c0007af0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007af4:	e8 2a 9f ff ff       	call   c0001a23 <disk_write>
c0007af9:	83 c4 20             	add    esp,0x20
c0007afc:	85 c0                	test   eax,eax
c0007afe:	0f 85 c8 06 00 00    	jne    c00081cc <f_mkfs+0x10ad>
c0007b04:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b08:	75 06                	jne    c0007b10 <f_mkfs+0x9f1>
c0007b0a:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b0e:	74 09                	je     c0007b19 <f_mkfs+0x9fa>
c0007b10:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b13:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b17:	eb a3                	jmp    c0007abc <f_mkfs+0x99d>
c0007b19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b1d:	89 da                	mov    edx,ebx
c0007b1f:	01 e8                	add    eax,ebp
c0007b21:	e8 a8 9f ff ff       	call   c0001ace <st_dword>
c0007b26:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b2b:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b33:	75 e4                	jne    c0007b19 <f_mkfs+0x9fa>
c0007b35:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b38:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b3c:	83 c6 02             	add    esi,0x2
c0007b3f:	83 d7 00             	adc    edi,0x0
c0007b42:	83 ec 0c             	sub    esp,0xc
c0007b45:	6a 01                	push   0x1
c0007b47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b4b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b4f:	55                   	push   ebp
c0007b50:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b54:	e8 ca 9e ff ff       	call   c0001a23 <disk_write>
c0007b59:	83 c4 20             	add    esp,0x20
c0007b5c:	85 c0                	test   eax,eax
c0007b5e:	0f 85 68 06 00 00    	jne    c00081cc <f_mkfs+0x10ad>
c0007b64:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b69:	74 0d                	je     c0007b78 <f_mkfs+0xa59>
c0007b6b:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b73:	e9 43 fd ff ff       	jmp    c00078bb <f_mkfs+0x79c>
c0007b78:	b1 07                	mov    cl,0x7
c0007b7a:	e9 e3 05 00 00       	jmp    c0008162 <f_mkfs+0x1043>
c0007b7f:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b84:	0f 85 4f 02 00 00    	jne    c0007dd9 <f_mkfs+0xcba>
c0007b8a:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b8f:	0f 86 22 02 00 00    	jbe    c0007db7 <f_mkfs+0xc98>
c0007b95:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b9a:	0f 85 81 06 00 00    	jne    c0008221 <f_mkfs+0x1102>
c0007ba0:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ba7:	83 f8 40             	cmp    eax,0x40
c0007baa:	0f 87 51 06 00 00    	ja     c0008201 <f_mkfs+0x10e2>
c0007bb0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bb4:	85 ff                	test   edi,edi
c0007bb6:	75 1c                	jne    c0007bd4 <f_mkfs+0xab5>
c0007bb8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bbb:	ba 60 04 02 c0       	mov    edx,0xc0020460
c0007bc0:	c1 e9 0c             	shr    ecx,0xc
c0007bc3:	bf 01 00 00 00       	mov    edi,0x1
c0007bc8:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bcb:	66 85 c0             	test   ax,ax
c0007bce:	0f 85 95 01 00 00    	jne    c0007d69 <f_mkfs+0xc4a>
c0007bd4:	31 d2                	xor    edx,edx
c0007bd6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bd9:	f7 f7                	div    edi
c0007bdb:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007be0:	0f 86 95 01 00 00    	jbe    c0007d7b <f_mkfs+0xc5c>
c0007be6:	83 c0 02             	add    eax,0x2
c0007be9:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007bee:	01 c0                	add    eax,eax
c0007bf0:	05 ff 01 00 00       	add    eax,0x1ff
c0007bf5:	be 01 00 00 00       	mov    esi,0x1
c0007bfa:	c1 e8 09             	shr    eax,0x9
c0007bfd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c01:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c05:	c1 e0 05             	shl    eax,0x5
c0007c08:	c1 e8 09             	shr    eax,0x9
c0007c0b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007c0f:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0007c14:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c18:	89 f0                	mov    eax,esi
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c20:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c24:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c28:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c2c:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007c30:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007c35:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c39:	31 d2                	xor    edx,edx
c0007c3b:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c3f:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c43:	31 db                	xor    ebx,ebx
c0007c45:	01 c8                	add    eax,ecx
c0007c47:	11 da                	adc    edx,ebx
c0007c49:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c4d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c51:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c55:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c59:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c5d:	f7 da                	neg    edx
c0007c5f:	21 d1                	and    ecx,edx
c0007c61:	29 d9                	sub    ecx,ebx
c0007c63:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c68:	0f 85 20 01 00 00    	jne    c0007d8e <f_mkfs+0xc6f>
c0007c6e:	31 db                	xor    ebx,ebx
c0007c70:	01 ce                	add    esi,ecx
c0007c72:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c76:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c7a:	89 f8                	mov    eax,edi
c0007c7c:	31 d2                	xor    edx,edx
c0007c7e:	c1 e0 04             	shl    eax,0x4
c0007c81:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c85:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c89:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c8d:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c91:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c95:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c98:	19 d3                	sbb    ebx,edx
c0007c9a:	0f 82 40 01 00 00    	jb     c0007de0 <f_mkfs+0xcc1>
c0007ca0:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ca4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ca7:	0f af 54 24 50       	imul   edx,DWORD PTR [esp+0x50]
c0007cac:	89 c8                	mov    eax,ecx
c0007cae:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
c0007cb2:	29 f0                	sub    eax,esi
c0007cb4:	29 d0                	sub    eax,edx
c0007cb6:	31 d2                	xor    edx,edx
c0007cb8:	f7 f7                	div    edi
c0007cba:	89 c3                	mov    ebx,eax
c0007cbc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cc1:	0f 85 b8 fe ff ff    	jne    c0007b7f <f_mkfs+0xa60>
c0007cc7:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ccc:	0f 87 1d 01 00 00    	ja     c0007def <f_mkfs+0xcd0>
c0007cd2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cd7:	0f 85 03 01 00 00    	jne    c0007de0 <f_mkfs+0xcc1>
c0007cdd:	83 ff 01             	cmp    edi,0x1
c0007ce0:	0f 86 fa 00 00 00    	jbe    c0007de0 <f_mkfs+0xcc1>
c0007ce6:	d1 ef                	shr    edi,1
c0007ce8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007cec:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007cf0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007cf3:	85 db                	test   ebx,ebx
c0007cf5:	75 2d                	jne    c0007d24 <f_mkfs+0xc05>
c0007cf7:	89 cb                	mov    ebx,ecx
c0007cf9:	ba 70 04 02 c0       	mov    edx,0xc0020470
c0007cfe:	c1 eb 11             	shr    ebx,0x11
c0007d01:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d09:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d0c:	66 85 c0             	test   ax,ax
c0007d0f:	74 11                	je     c0007d22 <f_mkfs+0xc03>
c0007d11:	83 c2 02             	add    edx,0x2
c0007d14:	39 d8                	cmp    eax,ebx
c0007d16:	77 0a                	ja     c0007d22 <f_mkfs+0xc03>
c0007d18:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d1c:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d20:	eb e7                	jmp    c0007d09 <f_mkfs+0xbea>
c0007d22:	31 db                	xor    ebx,ebx
c0007d24:	31 d2                	xor    edx,edx
c0007d26:	89 c8                	mov    eax,ecx
c0007d28:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d2c:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d33:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d38:	c1 ea 09             	shr    edx,0x9
c0007d3b:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d40:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d44:	0f 87 96 00 00 00    	ja     c0007de0 <f_mkfs+0xcc1>
c0007d4a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d4e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0007d56:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d5a:	be 20 00 00 00       	mov    esi,0x20
c0007d5f:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d64:	e9 a6 fe ff ff       	jmp    c0007c0f <f_mkfs+0xaf0>
c0007d69:	83 c2 02             	add    edx,0x2
c0007d6c:	39 c8                	cmp    eax,ecx
c0007d6e:	0f 87 60 fe ff ff    	ja     c0007bd4 <f_mkfs+0xab5>
c0007d74:	01 ff                	add    edi,edi
c0007d76:	e9 4d fe ff ff       	jmp    c0007bc8 <f_mkfs+0xaa9>
c0007d7b:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d7e:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d83:	40                   	inc    eax
c0007d84:	d1 e8                	shr    eax,1
c0007d86:	83 c0 03             	add    eax,0x3
c0007d89:	e9 62 fe ff ff       	jmp    c0007bf0 <f_mkfs+0xad1>
c0007d8e:	31 d2                	xor    edx,edx
c0007d90:	89 c8                	mov    eax,ecx
c0007d92:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007d96:	85 d2                	test   edx,edx
c0007d98:	74 0c                	je     c0007da6 <f_mkfs+0xc87>
c0007d9a:	49                   	dec    ecx
c0007d9b:	46                   	inc    esi
c0007d9c:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007da1:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007da6:	89 c8                	mov    eax,ecx
c0007da8:	31 d2                	xor    edx,edx
c0007daa:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007dae:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007db2:	e9 c3 fe ff ff       	jmp    c0007c7a <f_mkfs+0xb5b>
c0007db7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dbc:	77 31                	ja     c0007def <f_mkfs+0xcd0>
c0007dbe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dc3:	75 1b                	jne    c0007de0 <f_mkfs+0xcc1>
c0007dc5:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dc8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dcc:	3d 80 00 00 00       	cmp    eax,0x80
c0007dd1:	0f 86 d9 fd ff ff    	jbe    c0007bb0 <f_mkfs+0xa91>
c0007dd7:	eb 07                	jmp    c0007de0 <f_mkfs+0xcc1>
c0007dd9:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dde:	76 0a                	jbe    c0007dea <f_mkfs+0xccb>
c0007de0:	bb 0e 00 00 00       	mov    ebx,0xe
c0007de5:	e9 ff 03 00 00       	jmp    c00081e9 <f_mkfs+0x10ca>
c0007dea:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007def:	31 d2                	xor    edx,edx
c0007df1:	b9 00 02 00 00       	mov    ecx,0x200
c0007df6:	89 e8                	mov    eax,ebp
c0007df8:	e8 ef 9c ff ff       	call   c0001aec <mem_set>
c0007dfd:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e02:	ba 82 05 02 c0       	mov    edx,0xc0020582
c0007e07:	89 e8                	mov    eax,ebp
c0007e09:	e8 c9 9c ff ff       	call   c0001ad7 <mem_cpy>
c0007e0e:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e11:	ba 00 02 00 00       	mov    edx,0x200
c0007e16:	e8 af 9c ff ff       	call   c0001aca <st_word>
c0007e1b:	89 f8                	mov    eax,edi
c0007e1d:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e20:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e23:	0f b7 d6             	movzx  edx,si
c0007e26:	e8 9f 9c ff ff       	call   c0001aca <st_word>
c0007e2b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0007e2f:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e32:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e37:	75 08                	jne    c0007e41 <f_mkfs+0xd22>
c0007e39:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e41:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e44:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e48:	e8 7d 9c ff ff       	call   c0001aca <st_word>
c0007e4d:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e52:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e56:	39 d0                	cmp    eax,edx
c0007e58:	b8 00 00 00 00       	mov    eax,0x0
c0007e5d:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e61:	72 0a                	jb     c0007e6d <f_mkfs+0xd4e>
c0007e63:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e66:	e8 5f 9c ff ff       	call   c0001aca <st_word>
c0007e6b:	eb 08                	jmp    c0007e75 <f_mkfs+0xd56>
c0007e6d:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e70:	e8 59 9c ff ff       	call   c0001ace <st_dword>
c0007e75:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e78:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e7d:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e81:	e8 44 9c ff ff       	call   c0001aca <st_word>
c0007e86:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e89:	ba ff 00 00 00       	mov    edx,0xff
c0007e8e:	e8 37 9c ff ff       	call   c0001aca <st_word>
c0007e93:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e96:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e9a:	e8 2f 9c ff ff       	call   c0001ace <st_dword>
c0007e9f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ea4:	75 57                	jne    c0007efd <f_mkfs+0xdde>
c0007ea6:	8d 45 43             	lea    eax,[ebp+0x43]
c0007ea9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007eae:	e8 1b 9c ff ff       	call   c0001ace <st_dword>
c0007eb3:	8d 45 24             	lea    eax,[ebp+0x24]
c0007eb6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007eba:	e8 0f 9c ff ff       	call   c0001ace <st_dword>
c0007ebf:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007ec2:	ba 02 00 00 00       	mov    edx,0x2
c0007ec7:	e8 02 9c ff ff       	call   c0001ace <st_dword>
c0007ecc:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ecf:	ba 01 00 00 00       	mov    edx,0x1
c0007ed4:	e8 f1 9b ff ff       	call   c0001aca <st_word>
c0007ed9:	8d 45 32             	lea    eax,[ebp+0x32]
c0007edc:	ba 06 00 00 00       	mov    edx,0x6
c0007ee1:	e8 e4 9b ff ff       	call   c0001aca <st_word>
c0007ee6:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007eea:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007eee:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ef1:	b9 13 00 00 00       	mov    ecx,0x13
c0007ef6:	ba 8e 05 02 c0       	mov    edx,0xc002058e
c0007efb:	eb 2f                	jmp    c0007f2c <f_mkfs+0xe0d>
c0007efd:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f00:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f05:	e8 c4 9b ff ff       	call   c0001ace <st_dword>
c0007f0a:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f0d:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f12:	e8 b3 9b ff ff       	call   c0001aca <st_word>
c0007f17:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f1b:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f1f:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f22:	b9 13 00 00 00       	mov    ecx,0x13
c0007f27:	ba a2 05 02 c0       	mov    edx,0xc00205a2
c0007f2c:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f32:	e8 a0 9b ff ff       	call   c0001ad7 <mem_cpy>
c0007f37:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f3c:	89 f0                	mov    eax,esi
c0007f3e:	e8 87 9b ff ff       	call   c0001aca <st_word>
c0007f43:	83 ec 0c             	sub    esp,0xc
c0007f46:	6a 01                	push   0x1
c0007f48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f4c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f50:	55                   	push   ebp
c0007f51:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f55:	e8 c9 9a ff ff       	call   c0001a23 <disk_write>
c0007f5a:	83 c4 20             	add    esp,0x20
c0007f5d:	85 c0                	test   eax,eax
c0007f5f:	0f 85 67 02 00 00    	jne    c00081cc <f_mkfs+0x10ad>
c0007f65:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f6a:	0f 85 b7 00 00 00    	jne    c0008027 <f_mkfs+0xf08>
c0007f70:	83 ec 0c             	sub    esp,0xc
c0007f73:	6a 01                	push   0x1
c0007f75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f79:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f7d:	83 c0 06             	add    eax,0x6
c0007f80:	83 d2 00             	adc    edx,0x0
c0007f83:	52                   	push   edx
c0007f84:	50                   	push   eax
c0007f85:	55                   	push   ebp
c0007f86:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f8a:	e8 94 9a ff ff       	call   c0001a23 <disk_write>
c0007f8f:	83 c4 20             	add    esp,0x20
c0007f92:	b9 00 02 00 00       	mov    ecx,0x200
c0007f97:	31 d2                	xor    edx,edx
c0007f99:	89 e8                	mov    eax,ebp
c0007f9b:	e8 4c 9b ff ff       	call   c0001aec <mem_set>
c0007fa0:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fa5:	89 e8                	mov    eax,ebp
c0007fa7:	e8 22 9b ff ff       	call   c0001ace <st_dword>
c0007fac:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007fb2:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fb7:	e8 12 9b ff ff       	call   c0001ace <st_dword>
c0007fbc:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fbf:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fc5:	e8 04 9b ff ff       	call   c0001ace <st_dword>
c0007fca:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fd0:	ba 02 00 00 00       	mov    edx,0x2
c0007fd5:	e8 f4 9a ff ff       	call   c0001ace <st_dword>
c0007fda:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fdf:	89 f0                	mov    eax,esi
c0007fe1:	e8 e4 9a ff ff       	call   c0001aca <st_word>
c0007fe6:	83 ec 0c             	sub    esp,0xc
c0007fe9:	6a 01                	push   0x1
c0007feb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fef:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ff3:	83 c0 07             	add    eax,0x7
c0007ff6:	83 d2 00             	adc    edx,0x0
c0007ff9:	52                   	push   edx
c0007ffa:	50                   	push   eax
c0007ffb:	55                   	push   ebp
c0007ffc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008000:	e8 1e 9a ff ff       	call   c0001a23 <disk_write>
c0008005:	83 c4 14             	add    esp,0x14
c0008008:	6a 01                	push   0x1
c000800a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000800e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008012:	83 c0 01             	add    eax,0x1
c0008015:	83 d2 00             	adc    edx,0x0
c0008018:	52                   	push   edx
c0008019:	50                   	push   eax
c000801a:	55                   	push   ebp
c000801b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000801f:	e8 ff 99 ff ff       	call   c0001a23 <disk_write>
c0008024:	83 c4 20             	add    esp,0x20
c0008027:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000802e:	31 d2                	xor    edx,edx
c0008030:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008036:	31 db                	xor    ebx,ebx
c0008038:	89 e8                	mov    eax,ebp
c000803a:	e8 ad 9a ff ff       	call   c0001aec <mem_set>
c000803f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008046:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000804b:	0f 94 c3             	sete   bl
c000804e:	4b                   	dec    ebx
c000804f:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008055:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c000805b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008060:	75 21                	jne    c0008083 <f_mkfs+0xf64>
c0008062:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008067:	89 e8                	mov    eax,ebp
c0008069:	e8 60 9a ff ff       	call   c0001ace <st_dword>
c000806e:	8d 45 04             	lea    eax,[ebp+0x4]
c0008071:	83 ca ff             	or     edx,0xffffffff
c0008074:	e8 55 9a ff ff       	call   c0001ace <st_dword>
c0008079:	8d 45 08             	lea    eax,[ebp+0x8]
c000807c:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008081:	eb 04                	jmp    c0008087 <f_mkfs+0xf68>
c0008083:	89 da                	mov    edx,ebx
c0008085:	89 e8                	mov    eax,ebp
c0008087:	e8 42 9a ff ff       	call   c0001ace <st_dword>
c000808c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008090:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008094:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008098:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000809c:	39 ce                	cmp    esi,ecx
c000809e:	76 02                	jbe    c00080a2 <f_mkfs+0xf83>
c00080a0:	89 ce                	mov    esi,ecx
c00080a2:	83 ec 0c             	sub    esp,0xc
c00080a5:	56                   	push   esi
c00080a6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080aa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080ae:	55                   	push   ebp
c00080af:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080b3:	e8 6b 99 ff ff       	call   c0001a23 <disk_write>
c00080b8:	83 c4 20             	add    esp,0x20
c00080bb:	85 c0                	test   eax,eax
c00080bd:	0f 85 09 01 00 00    	jne    c00081cc <f_mkfs+0x10ad>
c00080c3:	31 d2                	xor    edx,edx
c00080c5:	b9 00 02 00 00       	mov    ecx,0x200
c00080ca:	89 e8                	mov    eax,ebp
c00080cc:	e8 1b 9a ff ff       	call   c0001aec <mem_set>
c00080d1:	31 d2                	xor    edx,edx
c00080d3:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080d7:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080db:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080df:	75 b3                	jne    c0008094 <f_mkfs+0xf75>
c00080e1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080e4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080eb:	40                   	inc    eax
c00080ec:	39 44 24 50          	cmp    DWORD PTR [esp+0x50],eax
c00080f0:	0f 87 65 ff ff ff    	ja     c000805b <f_mkfs+0xf3c>
c00080f6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fb:	74 04                	je     c0008101 <f_mkfs+0xfe2>
c00080fd:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0008101:	89 fb                	mov    ebx,edi
c0008103:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008107:	76 04                	jbe    c000810d <f_mkfs+0xfee>
c0008109:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000810d:	83 ec 0c             	sub    esp,0xc
c0008110:	53                   	push   ebx
c0008111:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008115:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008119:	55                   	push   ebp
c000811a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000811e:	e8 00 99 ff ff       	call   c0001a23 <disk_write>
c0008123:	83 c4 20             	add    esp,0x20
c0008126:	85 c0                	test   eax,eax
c0008128:	0f 85 9e 00 00 00    	jne    c00081cc <f_mkfs+0x10ad>
c000812e:	31 d2                	xor    edx,edx
c0008130:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008134:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008138:	29 df                	sub    edi,ebx
c000813a:	75 c5                	jne    c0008101 <f_mkfs+0xfe2>
c000813c:	b1 0c                	mov    cl,0xc
c000813e:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008143:	74 1d                	je     c0008162 <f_mkfs+0x1043>
c0008145:	b8 ff ff 00 00       	mov    eax,0xffff
c000814a:	b1 06                	mov    cl,0x6
c000814c:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008150:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008154:	72 0c                	jb     c0008162 <f_mkfs+0x1043>
c0008156:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c000815b:	0f 94 c1             	sete   cl
c000815e:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008162:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008167:	75 4c                	jne    c00081b5 <f_mkfs+0x1096>
c0008169:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000816d:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008171:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008178:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000817f:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c000818a:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008195:	83 ec 0c             	sub    esp,0xc
c0008198:	0f b6 c9             	movzx  ecx,cl
c000819b:	55                   	push   ebp
c000819c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081a0:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081a7:	e8 58 c2 ff ff       	call   c0004404 <create_partition>
c00081ac:	83 c4 10             	add    esp,0x10
c00081af:	89 c3                	mov    ebx,eax
c00081b1:	85 c0                	test   eax,eax
c00081b3:	75 34                	jne    c00081e9 <f_mkfs+0x10ca>
c00081b5:	50                   	push   eax
c00081b6:	31 db                	xor    ebx,ebx
c00081b8:	6a 00                	push   0x0
c00081ba:	6a 00                	push   0x0
c00081bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081c0:	e8 74 98 ff ff       	call   c0001a39 <disk_ioctl>
c00081c5:	83 c4 10             	add    esp,0x10
c00081c8:	85 c0                	test   eax,eax
c00081ca:	74 1d                	je     c00081e9 <f_mkfs+0x10ca>
c00081cc:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081d4:	75 0c                	jne    c00081e2 <f_mkfs+0x10c3>
c00081d6:	83 ec 0c             	sub    esp,0xc
c00081d9:	55                   	push   ebp
c00081da:	e8 75 00 00 00       	call   c0008254 <ff_memfree>
c00081df:	83 c4 10             	add    esp,0x10
c00081e2:	bb 01 00 00 00       	mov    ebx,0x1
c00081e7:	eb 48                	jmp    c0008231 <f_mkfs+0x1112>
c00081e9:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081f1:	75 3e                	jne    c0008231 <f_mkfs+0x1112>
c00081f3:	83 ec 0c             	sub    esp,0xc
c00081f6:	55                   	push   ebp
c00081f7:	e8 58 00 00 00       	call   c0008254 <ff_memfree>
c00081fc:	83 c4 10             	add    esp,0x10
c00081ff:	eb 30                	jmp    c0008231 <f_mkfs+0x1112>
c0008201:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008206:	0f 85 eb fa ff ff    	jne    c0007cf7 <f_mkfs+0xbd8>
c000820c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008210:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008216:	0f 86 b8 f9 ff ff    	jbe    c0007bd4 <f_mkfs+0xab5>
c000821c:	e9 bf fb ff ff       	jmp    c0007de0 <f_mkfs+0xcc1>
c0008221:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008226:	0f 85 c0 fa ff ff    	jne    c0007cec <f_mkfs+0xbcd>
c000822c:	e9 af fb ff ff       	jmp    c0007de0 <f_mkfs+0xcc1>
c0008231:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008237:	89 d8                	mov    eax,ebx
c0008239:	5b                   	pop    ebx
c000823a:	5e                   	pop    esi
c000823b:	5f                   	pop    edi
c000823c:	5d                   	pop    ebp
c000823d:	c3                   	ret    

c000823e <ff_memalloc>:
c000823e:	83 ec 0c             	sub    esp,0xc
c0008241:	83 ec 0c             	sub    esp,0xc
c0008244:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008248:	e8 9e 3d 00 00       	call   c000bfeb <malloc>
c000824d:	83 c4 10             	add    esp,0x10
c0008250:	83 c4 0c             	add    esp,0xc
c0008253:	c3                   	ret    

c0008254 <ff_memfree>:
c0008254:	83 ec 0c             	sub    esp,0xc
c0008257:	83 ec 0c             	sub    esp,0xc
c000825a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000825e:	e8 98 3d 00 00       	call   c000bffb <free>
c0008263:	83 c4 10             	add    esp,0x10
c0008266:	90                   	nop
c0008267:	83 c4 0c             	add    esp,0xc
c000826a:	c3                   	ret    

c000826b <ff_uni2oem>:
c000826b:	83 ec 14             	sub    esp,0x14
c000826e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008272:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008276:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000827d:	c7 44 24 0c c0 08 02 c0 	mov    DWORD PTR [esp+0xc],0xc00208c0
c0008285:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000828a:	77 0b                	ja     c0008297 <ff_uni2oem+0x2c>
c000828c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008290:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008295:	eb 61                	jmp    c00082f8 <ff_uni2oem+0x8d>
c0008297:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c000829f:	77 57                	ja     c00082f8 <ff_uni2oem+0x8d>
c00082a1:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082a7:	75 4f                	jne    c00082f8 <ff_uni2oem+0x8d>
c00082a9:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082b0:	eb 0b                	jmp    c00082bd <ff_uni2oem+0x52>
c00082b2:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082b7:	40                   	inc    eax
c00082b8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082bd:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082c3:	77 21                	ja     c00082e6 <ff_uni2oem+0x7b>
c00082c5:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082ca:	25 ff ff 00 00       	and    eax,0xffff
c00082cf:	8d 14 00             	lea    edx,[eax+eax*1]
c00082d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082d6:	01 d0                	add    eax,edx
c00082d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082db:	25 ff ff 00 00       	and    eax,0xffff
c00082e0:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082e4:	75 cc                	jne    c00082b2 <ff_uni2oem+0x47>
c00082e6:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082eb:	83 e8 80             	sub    eax,0xffffff80
c00082ee:	25 ff 00 00 00       	and    eax,0xff
c00082f3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082f8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082fd:	83 c4 14             	add    esp,0x14
c0008300:	c3                   	ret    

c0008301 <ff_oem2uni>:
c0008301:	83 ec 18             	sub    esp,0x18
c0008304:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008308:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000830c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008311:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008315:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000831c:	c7 44 24 10 c0 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc00208c0
c0008324:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000832a:	77 0b                	ja     c0008337 <ff_oem2uni+0x36>
c000832c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008330:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008335:	eb 30                	jmp    c0008367 <ff_oem2uni+0x66>
c0008337:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000833d:	75 28                	jne    c0008367 <ff_oem2uni+0x66>
c000833f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008346:	77 1f                	ja     c0008367 <ff_oem2uni+0x66>
c0008348:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000834c:	25 ff ff 00 00       	and    eax,0xffff
c0008351:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008356:	8d 14 00             	lea    edx,[eax+eax*1]
c0008359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000835d:	01 d0                	add    eax,edx
c000835f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008362:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008367:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000836c:	83 c4 18             	add    esp,0x18
c000836f:	c3                   	ret    

c0008370 <ff_wtoupper>:
c0008370:	83 ec 10             	sub    esp,0x10
c0008373:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000837b:	0f 87 62 01 00 00    	ja     c00084e3 <ff_wtoupper+0x173>
c0008381:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008385:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000838a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008391:	77 07                	ja     c000839a <ff_wtoupper+0x2a>
c0008393:	b8 c0 06 02 c0       	mov    eax,0xc00206c0
c0008398:	eb 05                	jmp    c000839f <ff_wtoupper+0x2f>
c000839a:	b8 00 06 02 c0       	mov    eax,0xc0020600
c000839f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a7:	8d 50 02             	lea    edx,[eax+0x2]
c00083aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083ae:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083b1:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083b6:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083bc:	0f 84 13 01 00 00    	je     c00084d5 <ff_wtoupper+0x165>
c00083c2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083c7:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083cc:	0f 82 03 01 00 00    	jb     c00084d5 <ff_wtoupper+0x165>
c00083d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083d6:	8d 50 02             	lea    edx,[eax+0x2]
c00083d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083dd:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083e0:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083e5:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083ea:	66 c1 e8 08          	shr    ax,0x8
c00083ee:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083f3:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083fa:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083ff:	31 d2                	xor    edx,edx
c0008401:	66 89 c2             	mov    dx,ax
c0008404:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008408:	31 c9                	xor    ecx,ecx
c000840a:	66 89 c1             	mov    cx,ax
c000840d:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008412:	25 ff ff 00 00       	and    eax,0xffff
c0008417:	01 c8                	add    eax,ecx
c0008419:	39 c2                	cmp    edx,eax
c000841b:	0f 8d 92 00 00 00    	jge    c00084b3 <ff_wtoupper+0x143>
c0008421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008425:	25 ff ff 00 00       	and    eax,0xffff
c000842a:	83 f8 08             	cmp    eax,0x8
c000842d:	0f 87 a1 00 00 00    	ja     c00084d4 <ff_wtoupper+0x164>
c0008433:	8b 04 85 c0 05 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfa40]
c000843a:	ff e0                	jmp    eax
c000843c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008441:	31 d2                	xor    edx,edx
c0008443:	66 89 c2             	mov    dx,ax
c0008446:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000844a:	25 ff ff 00 00       	and    eax,0xffff
c000844f:	29 c2                	sub    edx,eax
c0008451:	89 d0                	mov    eax,edx
c0008453:	8d 14 00             	lea    edx,[eax+eax*1]
c0008456:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000845a:	01 d0                	add    eax,edx
c000845c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000845f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008464:	eb 4b                	jmp    c00084b1 <ff_wtoupper+0x141>
c0008466:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000846b:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000846f:	83 e0 01             	and    eax,0x1
c0008472:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008477:	eb 38                	jmp    c00084b1 <ff_wtoupper+0x141>
c0008479:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c000847f:	eb 30                	jmp    c00084b1 <ff_wtoupper+0x141>
c0008481:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008487:	eb 28                	jmp    c00084b1 <ff_wtoupper+0x141>
c0008489:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000848f:	eb 20                	jmp    c00084b1 <ff_wtoupper+0x141>
c0008491:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008497:	eb 18                	jmp    c00084b1 <ff_wtoupper+0x141>
c0008499:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000849f:	eb 10                	jmp    c00084b1 <ff_wtoupper+0x141>
c00084a1:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00084a7:	eb 08                	jmp    c00084b1 <ff_wtoupper+0x141>
c00084a9:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00084b0:	90                   	nop
c00084b1:	eb 21                	jmp    c00084d4 <ff_wtoupper+0x164>
c00084b3:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084b9:	0f 85 e4 fe ff ff    	jne    c00083a3 <ff_wtoupper+0x33>
c00084bf:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00084c4:	25 ff ff 00 00       	and    eax,0xffff
c00084c9:	01 c0                	add    eax,eax
c00084cb:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084cf:	e9 cf fe ff ff       	jmp    c00083a3 <ff_wtoupper+0x33>
c00084d4:	90                   	nop
c00084d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00084da:	25 ff ff 00 00       	and    eax,0xffff
c00084df:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084e7:	83 c4 10             	add    esp,0x10
c00084ea:	c3                   	ret    

c00084eb <is_bad_src_ratio>:
c00084eb:	83 ec 0c             	sub    esp,0xc
c00084ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00084f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084f9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00084fd:	dd 04 24             	fld    QWORD PTR [esp]
c0008500:	dd 05 80 0e 02 c0    	fld    QWORD PTR ds:0xc0020e80
c0008506:	de d9                	fcompp 
c0008508:	df e0                	fnstsw ax
c000850a:	f6 c4 45             	test   ah,0x45
c000850d:	74 10                	je     c000851f <is_bad_src_ratio+0x34>
c000850f:	dd 04 24             	fld    QWORD PTR [esp]
c0008512:	dc 1d 88 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e88
c0008518:	df e0                	fnstsw ax
c000851a:	f6 c4 45             	test   ah,0x45
c000851d:	75 07                	jne    c0008526 <is_bad_src_ratio+0x3b>
c000851f:	b8 01 00 00 00       	mov    eax,0x1
c0008524:	eb 05                	jmp    c000852b <is_bad_src_ratio+0x40>
c0008526:	b8 00 00 00 00       	mov    eax,0x0
c000852b:	83 c4 0c             	add    esp,0xc
c000852e:	c3                   	ret    

c000852f <psrc_set_converter>:
c000852f:	56                   	push   esi
c0008530:	89 d6                	mov    esi,edx
c0008532:	53                   	push   ebx
c0008533:	89 c3                	mov    ebx,eax
c0008535:	83 ec 0c             	sub    esp,0xc
c0008538:	52                   	push   edx
c0008539:	50                   	push   eax
c000853a:	e8 21 24 00 00       	call   c000a960 <sinc_set_converter>
c000853f:	83 c4 10             	add    esp,0x10
c0008542:	85 c0                	test   eax,eax
c0008544:	74 25                	je     c000856b <psrc_set_converter+0x3c>
c0008546:	50                   	push   eax
c0008547:	50                   	push   eax
c0008548:	56                   	push   esi
c0008549:	53                   	push   ebx
c000854a:	e8 1c 28 00 00       	call   c000ad6b <zoh_set_converter>
c000854f:	83 c4 10             	add    esp,0x10
c0008552:	85 c0                	test   eax,eax
c0008554:	74 15                	je     c000856b <psrc_set_converter+0x3c>
c0008556:	51                   	push   ecx
c0008557:	51                   	push   ecx
c0008558:	56                   	push   esi
c0008559:	53                   	push   ebx
c000855a:	e8 0c 0a 00 00       	call   c0008f6b <linear_set_converter>
c000855f:	83 c4 10             	add    esp,0x10
c0008562:	ba 0a 00 00 00       	mov    edx,0xa
c0008567:	85 c0                	test   eax,eax
c0008569:	75 02                	jne    c000856d <psrc_set_converter+0x3e>
c000856b:	31 d2                	xor    edx,edx
c000856d:	89 d0                	mov    eax,edx
c000856f:	5a                   	pop    edx
c0008570:	5b                   	pop    ebx
c0008571:	5e                   	pop    esi
c0008572:	c3                   	ret    

c0008573 <src_delete>:
c0008573:	53                   	push   ebx
c0008574:	83 ec 08             	sub    esp,0x8
c0008577:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000857b:	85 db                	test   ebx,ebx
c000857d:	74 29                	je     c00085a8 <src_delete+0x35>
c000857f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008582:	85 c0                	test   eax,eax
c0008584:	74 0c                	je     c0008592 <src_delete+0x1f>
c0008586:	83 ec 0c             	sub    esp,0xc
c0008589:	50                   	push   eax
c000858a:	e8 6c 3a 00 00       	call   c000bffb <free>
c000858f:	83 c4 10             	add    esp,0x10
c0008592:	50                   	push   eax
c0008593:	6a 3c                	push   0x3c
c0008595:	6a 00                	push   0x0
c0008597:	53                   	push   ebx
c0008598:	e8 30 81 ff ff       	call   c00006cd <memset>
c000859d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00085a0:	e8 56 3a 00 00       	call   c000bffb <free>
c00085a5:	83 c4 10             	add    esp,0x10
c00085a8:	83 c4 08             	add    esp,0x8
c00085ab:	31 c0                	xor    eax,eax
c00085ad:	5b                   	pop    ebx
c00085ae:	c3                   	ret    

c00085af <src_process>:
c00085af:	56                   	push   esi
c00085b0:	53                   	push   ebx
c00085b1:	53                   	push   ebx
c00085b2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00085b6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00085ba:	85 f6                	test   esi,esi
c00085bc:	0f 84 e2 00 00 00    	je     c00086a4 <src_process+0xf5>
c00085c2:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00085c6:	0f 84 df 00 00 00    	je     c00086ab <src_process+0xfc>
c00085cc:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c00085d0:	0f 84 d5 00 00 00    	je     c00086ab <src_process+0xfc>
c00085d6:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c00085dd:	0f 85 cf 00 00 00    	jne    c00086b2 <src_process+0x103>
c00085e3:	85 db                	test   ebx,ebx
c00085e5:	0f 84 ce 00 00 00    	je     c00086b9 <src_process+0x10a>
c00085eb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00085ee:	0f 84 cc 00 00 00    	je     c00086c0 <src_process+0x111>
c00085f4:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c00085f8:	0f 84 c2 00 00 00    	je     c00086c0 <src_process+0x111>
c00085fe:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008601:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008604:	e8 e2 fe ff ff       	call   c00084eb <is_bad_src_ratio>
c0008609:	5a                   	pop    edx
c000860a:	85 c0                	test   eax,eax
c000860c:	59                   	pop    ecx
c000860d:	0f 85 b4 00 00 00    	jne    c00086c7 <src_process+0x118>
c0008613:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008617:	79 07                	jns    c0008620 <src_process+0x71>
c0008619:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008620:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0008624:	79 07                	jns    c000862d <src_process+0x7e>
c0008626:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000862d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000862f:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008632:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0008635:	39 ca                	cmp    edx,ecx
c0008637:	73 0b                	jae    c0008644 <src_process+0x95>
c0008639:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c000863d:	8d 04 82             	lea    eax,[edx+eax*4]
c0008640:	39 c1                	cmp    ecx,eax
c0008642:	eb 09                	jmp    c000864d <src_process+0x9e>
c0008644:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c0008648:	8d 04 81             	lea    eax,[ecx+eax*4]
c000864b:	39 c2                	cmp    edx,eax
c000864d:	72 7f                	jb     c00086ce <src_process+0x11f>
c000864f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008656:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000865d:	d9 05 a0 0e 02 c0    	fld    DWORD PTR ds:0xc0020ea0
c0008663:	dc 1e                	fcomp  QWORD PTR [esi]
c0008665:	df e0                	fnstsw ax
c0008667:	9e                   	sahf   
c0008668:	76 05                	jbe    c000866f <src_process+0xc0>
c000866a:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c000866d:	dd 1e                	fstp   QWORD PTR [esi]
c000866f:	dd 06                	fld    QWORD PTR [esi]
c0008671:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c0008674:	83 ec 10             	sub    esp,0x10
c0008677:	dd 1c 24             	fstp   QWORD PTR [esp]
c000867a:	e8 b1 70 01 00       	call   c001f730 <fabs>
c000867f:	83 c4 10             	add    esp,0x10
c0008682:	dd 05 90 0e 02 c0    	fld    QWORD PTR ds:0xc0020e90
c0008688:	de d9                	fcompp 
c000868a:	df e0                	fnstsw ax
c000868c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0008690:	9e                   	sahf   
c0008691:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0008695:	76 05                	jbe    c000869c <src_process+0xed>
c0008697:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c000869a:	eb 03                	jmp    c000869f <src_process+0xf0>
c000869c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000869f:	59                   	pop    ecx
c00086a0:	5b                   	pop    ebx
c00086a1:	5e                   	pop    esi
c00086a2:	ff e0                	jmp    eax
c00086a4:	b8 02 00 00 00       	mov    eax,0x2
c00086a9:	eb 28                	jmp    c00086d3 <src_process+0x124>
c00086ab:	b8 07 00 00 00       	mov    eax,0x7
c00086b0:	eb 21                	jmp    c00086d3 <src_process+0x124>
c00086b2:	b8 12 00 00 00       	mov    eax,0x12
c00086b7:	eb 1a                	jmp    c00086d3 <src_process+0x124>
c00086b9:	b8 03 00 00 00       	mov    eax,0x3
c00086be:	eb 13                	jmp    c00086d3 <src_process+0x124>
c00086c0:	b8 04 00 00 00       	mov    eax,0x4
c00086c5:	eb 0c                	jmp    c00086d3 <src_process+0x124>
c00086c7:	b8 06 00 00 00       	mov    eax,0x6
c00086cc:	eb 05                	jmp    c00086d3 <src_process+0x124>
c00086ce:	b8 10 00 00 00       	mov    eax,0x10
c00086d3:	5a                   	pop    edx
c00086d4:	5b                   	pop    ebx
c00086d5:	5e                   	pop    esi
c00086d6:	c3                   	ret    

c00086d7 <src_callback_read>:
c00086d7:	55                   	push   ebp
c00086d8:	57                   	push   edi
c00086d9:	56                   	push   esi
c00086da:	53                   	push   ebx
c00086db:	83 ec 4c             	sub    esp,0x4c
c00086de:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c00086e2:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c00086e6:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00086ea:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00086ee:	85 ff                	test   edi,edi
c00086f0:	0f 8e 36 01 00 00    	jle    c000882c <src_callback_read+0x155>
c00086f6:	85 db                	test   ebx,ebx
c00086f8:	0f 84 2e 01 00 00    	je     c000882c <src_callback_read+0x155>
c00086fe:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008705:	74 0c                	je     c0008713 <src_callback_read+0x3c>
c0008707:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c000870e:	e9 19 01 00 00       	jmp    c000882c <src_callback_read+0x155>
c0008713:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008717:	75 0c                	jne    c0008725 <src_callback_read+0x4e>
c0008719:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008720:	e9 07 01 00 00       	jmp    c000882c <src_callback_read+0x155>
c0008725:	51                   	push   ecx
c0008726:	6a 24                	push   0x24
c0008728:	6a 00                	push   0x0
c000872a:	8d 44 24 28          	lea    eax,[esp+0x28]
c000872e:	50                   	push   eax
c000872f:	e8 99 7f ff ff       	call   c00006cd <memset>
c0008734:	5e                   	pop    esi
c0008735:	5d                   	pop    ebp
c0008736:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000873a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000873e:	e8 a8 fd ff ff       	call   c00084eb <is_bad_src_ratio>
c0008743:	83 c4 10             	add    esp,0x10
c0008746:	85 c0                	test   eax,eax
c0008748:	74 0c                	je     c0008756 <src_callback_read+0x7f>
c000874a:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008751:	e9 d6 00 00 00       	jmp    c000882c <src_callback_read+0x155>
c0008756:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000875a:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000875e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008762:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008766:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008769:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000876d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0008770:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0008774:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008778:	31 f6                	xor    esi,esi
c000877a:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000877f:	75 30                	jne    c00087b1 <src_callback_read+0xda>
c0008781:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008785:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008789:	52                   	push   edx
c000878a:	52                   	push   edx
c000878b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000878f:	50                   	push   eax
c0008790:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008793:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008796:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000879a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000879e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00087a2:	83 c4 10             	add    esp,0x10
c00087a5:	85 c0                	test   eax,eax
c00087a7:	75 08                	jne    c00087b1 <src_callback_read+0xda>
c00087a9:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00087b1:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087b8:	50                   	push   eax
c00087b9:	50                   	push   eax
c00087ba:	8d 44 24 24          	lea    eax,[esp+0x24]
c00087be:	50                   	push   eax
c00087bf:	53                   	push   ebx
c00087c0:	e8 ea fd ff ff       	call   c00085af <src_process>
c00087c5:	83 c4 10             	add    esp,0x10
c00087c8:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00087cf:	85 c0                	test   eax,eax
c00087d1:	75 42                	jne    c0008815 <src_callback_read+0x13e>
c00087d3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00087d7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00087da:	89 e9                	mov    ecx,ebp
c00087dc:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c00087e0:	0f af ca             	imul   ecx,edx
c00087e3:	c1 e1 02             	shl    ecx,0x2
c00087e6:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c00087ea:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00087ee:	0f af d1             	imul   edx,ecx
c00087f1:	c1 e2 02             	shl    edx,0x2
c00087f4:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c00087f8:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c00087fc:	8d 14 31             	lea    edx,[ecx+esi*1]
c00087ff:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c0008804:	75 04                	jne    c000880a <src_callback_read+0x133>
c0008806:	85 c9                	test   ecx,ecx
c0008808:	74 0b                	je     c0008815 <src_callback_read+0x13e>
c000880a:	39 d7                	cmp    edi,edx
c000880c:	7e 09                	jle    c0008817 <src_callback_read+0x140>
c000880e:	89 d6                	mov    esi,edx
c0008810:	e9 65 ff ff ff       	jmp    c000877a <src_callback_read+0xa3>
c0008815:	89 f2                	mov    edx,esi
c0008817:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000881b:	85 c0                	test   eax,eax
c000881d:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008820:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008824:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008827:	74 05                	je     c000882e <src_callback_read+0x157>
c0008829:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000882c:	31 d2                	xor    edx,edx
c000882e:	83 c4 4c             	add    esp,0x4c
c0008831:	89 d0                	mov    eax,edx
c0008833:	5b                   	pop    ebx
c0008834:	5e                   	pop    esi
c0008835:	5f                   	pop    edi
c0008836:	5d                   	pop    ebp
c0008837:	c3                   	ret    

c0008838 <src_set_ratio>:
c0008838:	53                   	push   ebx
c0008839:	b8 02 00 00 00       	mov    eax,0x2
c000883e:	83 ec 08             	sub    esp,0x8
c0008841:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008845:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c0008849:	85 db                	test   ebx,ebx
c000884b:	74 33                	je     c0008880 <src_set_ratio+0x48>
c000884d:	b8 07 00 00 00       	mov    eax,0x7
c0008852:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008856:	74 2c                	je     c0008884 <src_set_ratio+0x4c>
c0008858:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000885c:	74 2a                	je     c0008888 <src_set_ratio+0x50>
c000885e:	50                   	push   eax
c000885f:	50                   	push   eax
c0008860:	dd 14 24             	fst    QWORD PTR [esp]
c0008863:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008867:	e8 7f fc ff ff       	call   c00084eb <is_bad_src_ratio>
c000886c:	5a                   	pop    edx
c000886d:	59                   	pop    ecx
c000886e:	85 c0                	test   eax,eax
c0008870:	75 07                	jne    c0008879 <src_set_ratio+0x41>
c0008872:	dd 04 24             	fld    QWORD PTR [esp]
c0008875:	dd 1b                	fstp   QWORD PTR [ebx]
c0008877:	eb 11                	jmp    c000888a <src_set_ratio+0x52>
c0008879:	b8 06 00 00 00       	mov    eax,0x6
c000887e:	eb 0a                	jmp    c000888a <src_set_ratio+0x52>
c0008880:	dd d8                	fstp   st(0)
c0008882:	eb 06                	jmp    c000888a <src_set_ratio+0x52>
c0008884:	dd d8                	fstp   st(0)
c0008886:	eb 02                	jmp    c000888a <src_set_ratio+0x52>
c0008888:	dd d8                	fstp   st(0)
c000888a:	83 c4 08             	add    esp,0x8
c000888d:	5b                   	pop    ebx
c000888e:	c3                   	ret    

c000888f <src_get_channels>:
c000888f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008893:	b8 02 00 00 00       	mov    eax,0x2
c0008898:	85 d2                	test   edx,edx
c000889a:	74 14                	je     c00088b0 <src_get_channels+0x21>
c000889c:	b8 07 00 00 00       	mov    eax,0x7
c00088a1:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00088a5:	74 09                	je     c00088b0 <src_get_channels+0x21>
c00088a7:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088ab:	74 03                	je     c00088b0 <src_get_channels+0x21>
c00088ad:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00088b0:	c3                   	ret    

c00088b1 <src_reset>:
c00088b1:	53                   	push   ebx
c00088b2:	b8 02 00 00 00       	mov    eax,0x2
c00088b7:	83 ec 08             	sub    esp,0x8
c00088ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088be:	85 db                	test   ebx,ebx
c00088c0:	74 2e                	je     c00088f0 <src_reset+0x3f>
c00088c2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00088c5:	85 c0                	test   eax,eax
c00088c7:	74 09                	je     c00088d2 <src_reset+0x21>
c00088c9:	83 ec 0c             	sub    esp,0xc
c00088cc:	53                   	push   ebx
c00088cd:	ff d0                	call   eax
c00088cf:	83 c4 10             	add    esp,0x10
c00088d2:	d9 ee                	fldz   
c00088d4:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00088db:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00088e2:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c00088e5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00088ec:	31 c0                	xor    eax,eax
c00088ee:	dd 1b                	fstp   QWORD PTR [ebx]
c00088f0:	83 c4 08             	add    esp,0x8
c00088f3:	5b                   	pop    ebx
c00088f4:	c3                   	ret    

c00088f5 <src_new>:
c00088f5:	57                   	push   edi
c00088f6:	56                   	push   esi
c00088f7:	53                   	push   ebx
c00088f8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00088fc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008900:	85 f6                	test   esi,esi
c0008902:	74 73                	je     c0008977 <src_new+0x82>
c0008904:	85 ff                	test   edi,edi
c0008906:	7f 08                	jg     c0008910 <src_new+0x1b>
c0008908:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c000890e:	eb 1e                	jmp    c000892e <src_new+0x39>
c0008910:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008916:	50                   	push   eax
c0008917:	50                   	push   eax
c0008918:	6a 3c                	push   0x3c
c000891a:	6a 01                	push   0x1
c000891c:	e8 fa 36 00 00       	call   c000c01b <calloc>
c0008921:	83 c4 10             	add    esp,0x10
c0008924:	89 c3                	mov    ebx,eax
c0008926:	85 c0                	test   eax,eax
c0008928:	75 10                	jne    c000893a <src_new+0x45>
c000892a:	85 f6                	test   esi,esi
c000892c:	75 04                	jne    c0008932 <src_new+0x3d>
c000892e:	31 db                	xor    ebx,ebx
c0008930:	eb 4b                	jmp    c000897d <src_new+0x88>
c0008932:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008938:	eb 43                	jmp    c000897d <src_new+0x88>
c000893a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000893d:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008944:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008948:	e8 e2 fb ff ff       	call   c000852f <psrc_set_converter>
c000894d:	85 c0                	test   eax,eax
c000894f:	74 18                	je     c0008969 <src_new+0x74>
c0008951:	85 f6                	test   esi,esi
c0008953:	74 06                	je     c000895b <src_new+0x66>
c0008955:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c000895b:	83 ec 0c             	sub    esp,0xc
c000895e:	53                   	push   ebx
c000895f:	31 db                	xor    ebx,ebx
c0008961:	e8 95 36 00 00       	call   c000bffb <free>
c0008966:	83 c4 10             	add    esp,0x10
c0008969:	83 ec 0c             	sub    esp,0xc
c000896c:	53                   	push   ebx
c000896d:	e8 3f ff ff ff       	call   c00088b1 <src_reset>
c0008972:	83 c4 10             	add    esp,0x10
c0008975:	eb 06                	jmp    c000897d <src_new+0x88>
c0008977:	85 ff                	test   edi,edi
c0008979:	7f 9b                	jg     c0008916 <src_new+0x21>
c000897b:	eb b1                	jmp    c000892e <src_new+0x39>
c000897d:	89 d8                	mov    eax,ebx
c000897f:	5b                   	pop    ebx
c0008980:	5e                   	pop    esi
c0008981:	5f                   	pop    edi
c0008982:	c3                   	ret    

c0008983 <src_callback_new>:
c0008983:	56                   	push   esi
c0008984:	53                   	push   ebx
c0008985:	53                   	push   ebx
c0008986:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000898a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000898e:	85 f6                	test   esi,esi
c0008990:	75 0e                	jne    c00089a0 <src_callback_new+0x1d>
c0008992:	31 db                	xor    ebx,ebx
c0008994:	85 c0                	test   eax,eax
c0008996:	74 47                	je     c00089df <src_callback_new+0x5c>
c0008998:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c000899e:	eb 3f                	jmp    c00089df <src_callback_new+0x5c>
c00089a0:	85 c0                	test   eax,eax
c00089a2:	74 06                	je     c00089aa <src_callback_new+0x27>
c00089a4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00089aa:	51                   	push   ecx
c00089ab:	50                   	push   eax
c00089ac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089b0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089b4:	e8 3c ff ff ff       	call   c00088f5 <src_new>
c00089b9:	83 c4 10             	add    esp,0x10
c00089bc:	89 c3                	mov    ebx,eax
c00089be:	85 c0                	test   eax,eax
c00089c0:	74 1d                	je     c00089df <src_callback_new+0x5c>
c00089c2:	83 ec 0c             	sub    esp,0xc
c00089c5:	50                   	push   eax
c00089c6:	e8 e6 fe ff ff       	call   c00088b1 <src_reset>
c00089cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089cf:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00089d6:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00089d9:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00089dc:	83 c4 10             	add    esp,0x10
c00089df:	5a                   	pop    edx
c00089e0:	89 d8                	mov    eax,ebx
c00089e2:	5b                   	pop    ebx
c00089e3:	5e                   	pop    esi
c00089e4:	c3                   	ret    

c00089e5 <src_get_name>:
c00089e5:	53                   	push   ebx
c00089e6:	83 ec 14             	sub    esp,0x14
c00089e9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00089ed:	53                   	push   ebx
c00089ee:	e8 47 1f 00 00       	call   c000a93a <sinc_get_name>
c00089f3:	83 c4 10             	add    esp,0x10
c00089f6:	85 c0                	test   eax,eax
c00089f8:	75 1d                	jne    c0008a17 <src_get_name+0x32>
c00089fa:	83 ec 0c             	sub    esp,0xc
c00089fd:	53                   	push   ebx
c00089fe:	e8 4a 23 00 00       	call   c000ad4d <zoh_get_name>
c0008a03:	83 c4 10             	add    esp,0x10
c0008a06:	85 c0                	test   eax,eax
c0008a08:	75 0d                	jne    c0008a17 <src_get_name+0x32>
c0008a0a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a0e:	83 c4 08             	add    esp,0x8
c0008a11:	5b                   	pop    ebx
c0008a12:	e9 36 05 00 00       	jmp    c0008f4d <linear_get_name>
c0008a17:	83 c4 08             	add    esp,0x8
c0008a1a:	5b                   	pop    ebx
c0008a1b:	c3                   	ret    

c0008a1c <src_get_description>:
c0008a1c:	53                   	push   ebx
c0008a1d:	83 ec 14             	sub    esp,0x14
c0008a20:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a24:	53                   	push   ebx
c0008a25:	e8 23 1f 00 00       	call   c000a94d <sinc_get_description>
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 1d                	jne    c0008a4e <src_get_description+0x32>
c0008a31:	83 ec 0c             	sub    esp,0xc
c0008a34:	53                   	push   ebx
c0008a35:	e8 22 23 00 00       	call   c000ad5c <zoh_get_description>
c0008a3a:	83 c4 10             	add    esp,0x10
c0008a3d:	85 c0                	test   eax,eax
c0008a3f:	75 0d                	jne    c0008a4e <src_get_description+0x32>
c0008a41:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a45:	83 c4 08             	add    esp,0x8
c0008a48:	5b                   	pop    ebx
c0008a49:	e9 0e 05 00 00       	jmp    c0008f5c <linear_get_description>
c0008a4e:	83 c4 08             	add    esp,0x8
c0008a51:	5b                   	pop    ebx
c0008a52:	c3                   	ret    

c0008a53 <src_get_version>:
c0008a53:	b8 c0 09 02 c0       	mov    eax,0xc00209c0
c0008a58:	c3                   	ret    

c0008a59 <src_is_valid_ratio>:
c0008a59:	50                   	push   eax
c0008a5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a62:	e8 84 fa ff ff       	call   c00084eb <is_bad_src_ratio>
c0008a67:	85 c0                	test   eax,eax
c0008a69:	0f 94 c0             	sete   al
c0008a6c:	0f b6 c0             	movzx  eax,al
c0008a6f:	83 c4 0c             	add    esp,0xc
c0008a72:	c3                   	ret    

c0008a73 <src_error>:
c0008a73:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a77:	31 c0                	xor    eax,eax
c0008a79:	85 d2                	test   edx,edx
c0008a7b:	74 03                	je     c0008a80 <src_error+0xd>
c0008a7d:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008a80:	c3                   	ret    

c0008a81 <src_strerror>:
c0008a81:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a85:	31 c0                	xor    eax,eax
c0008a87:	83 fa 17             	cmp    edx,0x17
c0008a8a:	77 07                	ja     c0008a93 <src_strerror+0x12>
c0008a8c:	8b 04 95 20 0e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf1e0]
c0008a93:	c3                   	ret    

c0008a94 <src_simple>:
c0008a94:	56                   	push   esi
c0008a95:	53                   	push   ebx
c0008a96:	83 ec 18             	sub    esp,0x18
c0008a99:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a9d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008aa1:	50                   	push   eax
c0008aa2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008aa6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008aaa:	e8 46 fe ff ff       	call   c00088f5 <src_new>
c0008aaf:	83 c4 10             	add    esp,0x10
c0008ab2:	85 c0                	test   eax,eax
c0008ab4:	75 06                	jne    c0008abc <src_simple+0x28>
c0008ab6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008aba:	eb 25                	jmp    c0008ae1 <src_simple+0x4d>
c0008abc:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008ac3:	89 c3                	mov    ebx,eax
c0008ac5:	50                   	push   eax
c0008ac6:	50                   	push   eax
c0008ac7:	56                   	push   esi
c0008ac8:	53                   	push   ebx
c0008ac9:	e8 e1 fa ff ff       	call   c00085af <src_process>
c0008ace:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008ad1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ad5:	e8 99 fa ff ff       	call   c0008573 <src_delete>
c0008ada:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	83 c4 14             	add    esp,0x14
c0008ae4:	5b                   	pop    ebx
c0008ae5:	5e                   	pop    esi
c0008ae6:	c3                   	ret    

c0008ae7 <src_short_to_float_array>:
c0008ae7:	83 ec 0c             	sub    esp,0xc
c0008aea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008aee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008af2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008af6:	85 c0                	test   eax,eax
c0008af8:	74 0f                	je     c0008b09 <src_short_to_float_array+0x22>
c0008afa:	48                   	dec    eax
c0008afb:	d9 05 a4 0e 02 c0    	fld    DWORD PTR ds:0xc0020ea4
c0008b01:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008b04:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008b07:	eb ed                	jmp    c0008af6 <src_short_to_float_array+0xf>
c0008b09:	83 c4 0c             	add    esp,0xc
c0008b0c:	c3                   	ret    

c0008b0d <src_float_to_short_array>:
c0008b0d:	56                   	push   esi
c0008b0e:	53                   	push   ebx
c0008b0f:	52                   	push   edx
c0008b10:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b14:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b18:	85 db                	test   ebx,ebx
c0008b1a:	74 51                	je     c0008b6d <src_float_to_short_array+0x60>
c0008b1c:	4b                   	dec    ebx
c0008b1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b21:	d9 05 a8 0e 02 c0    	fld    DWORD PTR ds:0xc0020ea8
c0008b27:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b2a:	dc 15 98 0e 02 c0    	fcom   QWORD PTR ds:0xc0020e98
c0008b30:	df e0                	fnstsw ax
c0008b32:	9e                   	sahf   
c0008b33:	72 0a                	jb     c0008b3f <src_float_to_short_array+0x32>
c0008b35:	dd d8                	fstp   st(0)
c0008b37:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008b3d:	eb d9                	jmp    c0008b18 <src_float_to_short_array+0xb>
c0008b3f:	d9 05 ac 0e 02 c0    	fld    DWORD PTR ds:0xc0020eac
c0008b45:	d8 d9                	fcomp  st(1)
c0008b47:	df e0                	fnstsw ax
c0008b49:	9e                   	sahf   
c0008b4a:	72 0a                	jb     c0008b56 <src_float_to_short_array+0x49>
c0008b4c:	dd d8                	fstp   st(0)
c0008b4e:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008b54:	eb c2                	jmp    c0008b18 <src_float_to_short_array+0xb>
c0008b56:	83 ec 10             	sub    esp,0x10
c0008b59:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b5c:	e8 ef 6b 01 00       	call   c001f750 <lrint>
c0008b61:	83 c4 10             	add    esp,0x10
c0008b64:	c1 f8 10             	sar    eax,0x10
c0008b67:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008b6b:	eb ab                	jmp    c0008b18 <src_float_to_short_array+0xb>
c0008b6d:	58                   	pop    eax
c0008b6e:	5b                   	pop    ebx
c0008b6f:	5e                   	pop    esi
c0008b70:	c3                   	ret    

c0008b71 <src_int_to_float_array>:
c0008b71:	83 ec 0c             	sub    esp,0xc
c0008b74:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008b78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008b7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008b80:	85 c0                	test   eax,eax
c0008b82:	74 0f                	je     c0008b93 <src_int_to_float_array+0x22>
c0008b84:	48                   	dec    eax
c0008b85:	d9 05 b0 0e 02 c0    	fld    DWORD PTR ds:0xc0020eb0
c0008b8b:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008b8e:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008b91:	eb ed                	jmp    c0008b80 <src_int_to_float_array+0xf>
c0008b93:	83 c4 0c             	add    esp,0xc
c0008b96:	c3                   	ret    

c0008b97 <src_float_to_int_array>:
c0008b97:	56                   	push   esi
c0008b98:	53                   	push   ebx
c0008b99:	52                   	push   edx
c0008b9a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b9e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008ba2:	85 db                	test   ebx,ebx
c0008ba4:	74 4f                	je     c0008bf5 <src_float_to_int_array+0x5e>
c0008ba6:	4b                   	dec    ebx
c0008ba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bab:	d9 05 a8 0e 02 c0    	fld    DWORD PTR ds:0xc0020ea8
c0008bb1:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008bb4:	dc 15 98 0e 02 c0    	fcom   QWORD PTR ds:0xc0020e98
c0008bba:	df e0                	fnstsw ax
c0008bbc:	9e                   	sahf   
c0008bbd:	72 0b                	jb     c0008bca <src_float_to_int_array+0x33>
c0008bbf:	dd d8                	fstp   st(0)
c0008bc1:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008bc8:	eb d8                	jmp    c0008ba2 <src_float_to_int_array+0xb>
c0008bca:	d9 05 ac 0e 02 c0    	fld    DWORD PTR ds:0xc0020eac
c0008bd0:	d8 d9                	fcomp  st(1)
c0008bd2:	df e0                	fnstsw ax
c0008bd4:	9e                   	sahf   
c0008bd5:	72 0b                	jb     c0008be2 <src_float_to_int_array+0x4b>
c0008bd7:	dd d8                	fstp   st(0)
c0008bd9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008be0:	eb c0                	jmp    c0008ba2 <src_float_to_int_array+0xb>
c0008be2:	83 ec 10             	sub    esp,0x10
c0008be5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008be8:	e8 63 6b 01 00       	call   c001f750 <lrint>
c0008bed:	83 c4 10             	add    esp,0x10
c0008bf0:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008bf3:	eb ad                	jmp    c0008ba2 <src_float_to_int_array+0xb>
c0008bf5:	58                   	pop    eax
c0008bf6:	5b                   	pop    ebx
c0008bf7:	5e                   	pop    esi
c0008bf8:	c3                   	ret    

c0008bf9 <is_bad_src_ratio>:
c0008bf9:	83 ec 0c             	sub    esp,0xc
c0008bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c00:	89 04 24             	mov    DWORD PTR [esp],eax
c0008c03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c0b:	dd 04 24             	fld    QWORD PTR [esp]
c0008c0e:	dd 05 80 0e 02 c0    	fld    QWORD PTR ds:0xc0020e80
c0008c14:	de d9                	fcompp 
c0008c16:	df e0                	fnstsw ax
c0008c18:	f6 c4 45             	test   ah,0x45
c0008c1b:	74 10                	je     c0008c2d <is_bad_src_ratio+0x34>
c0008c1d:	dd 04 24             	fld    QWORD PTR [esp]
c0008c20:	dc 1d 88 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e88
c0008c26:	df e0                	fnstsw ax
c0008c28:	f6 c4 45             	test   ah,0x45
c0008c2b:	75 07                	jne    c0008c34 <is_bad_src_ratio+0x3b>
c0008c2d:	b8 01 00 00 00       	mov    eax,0x1
c0008c32:	eb 05                	jmp    c0008c39 <is_bad_src_ratio+0x40>
c0008c34:	b8 00 00 00 00       	mov    eax,0x0
c0008c39:	83 c4 0c             	add    esp,0xc
c0008c3c:	c3                   	ret    

c0008c3d <fmod_one>:
c0008c3d:	83 ec 2c             	sub    esp,0x2c
c0008c40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c44:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c48:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008c4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008c50:	83 ec 08             	sub    esp,0x8
c0008c53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c5b:	e8 f0 6a 01 00       	call   c001f750 <lrint>
c0008c60:	83 c4 10             	add    esp,0x10
c0008c63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c67:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008c6b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008c6f:	de e1                	fsubrp st(1),st
c0008c71:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008c75:	d9 ee                	fldz   
c0008c77:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008c7b:	df e0                	fnstsw ax
c0008c7d:	f6 c4 45             	test   ah,0x45
c0008c80:	75 0a                	jne    c0008c8c <fmod_one+0x4f>
c0008c82:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c86:	d9 e8                	fld1   
c0008c88:	de c1                	faddp  st(1),st
c0008c8a:	eb 04                	jmp    c0008c90 <fmod_one+0x53>
c0008c8c:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c90:	83 c4 2c             	add    esp,0x2c
c0008c93:	c3                   	ret    

c0008c94 <linear_vari_process>:
c0008c94:	55                   	push   ebp
c0008c95:	57                   	push   edi
c0008c96:	56                   	push   esi
c0008c97:	53                   	push   ebx
c0008c98:	83 ec 2c             	sub    esp,0x2c
c0008c9b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008c9f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008ca3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008cab:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008caf:	0f 8e 5a 02 00 00    	jle    c0008f0f <linear_vari_process+0x27b>
c0008cb5:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008cb8:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008cc0:	85 db                	test   ebx,ebx
c0008cc2:	0f 84 47 02 00 00    	je     c0008f0f <linear_vari_process+0x27b>
c0008cc8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008ccb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008ccf:	74 19                	je     c0008cea <linear_vari_process+0x56>
c0008cd1:	31 d2                	xor    edx,edx
c0008cd3:	39 c2                	cmp    edx,eax
c0008cd5:	7d 0c                	jge    c0008ce3 <linear_vari_process+0x4f>
c0008cd7:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008cd9:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008cdc:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008ce0:	42                   	inc    edx
c0008ce1:	eb f0                	jmp    c0008cd3 <linear_vari_process+0x3f>
c0008ce3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008cea:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008ced:	0f af d0             	imul   edx,eax
c0008cf0:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008cf3:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008cf7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008cfe:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008d01:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008d08:	dd 07                	fld    QWORD PTR [edi]
c0008d0a:	dd 14 24             	fst    QWORD PTR [esp]
c0008d0d:	50                   	push   eax
c0008d0e:	50                   	push   eax
c0008d0f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d12:	e8 e2 fe ff ff       	call   c0008bf9 <is_bad_src_ratio>
c0008d17:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008d1b:	5a                   	pop    edx
c0008d1c:	59                   	pop    ecx
c0008d1d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008d22:	0f 85 df 01 00 00    	jne    c0008f07 <linear_vari_process+0x273>
c0008d28:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008d2b:	d9 e8                	fld1   
c0008d2d:	d8 d1                	fcom   st(1)
c0008d2f:	df e0                	fnstsw ax
c0008d31:	9e                   	sahf   
c0008d32:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008d36:	0f 86 97 00 00 00    	jbe    c0008dd3 <linear_vari_process+0x13f>
c0008d3c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008d3f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008d42:	0f 8d 8b 00 00 00    	jge    c0008dd3 <linear_vari_process+0x13f>
c0008d48:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d4c:	d8 c1                	fadd   st,st(1)
c0008d4e:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d51:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008d54:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008d57:	df e0                	fnstsw ax
c0008d59:	9e                   	sahf   
c0008d5a:	73 77                	jae    c0008dd3 <linear_vari_process+0x13f>
c0008d5c:	85 d2                	test   edx,edx
c0008d5e:	7e 36                	jle    c0008d96 <linear_vari_process+0x102>
c0008d60:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d64:	dd 07                	fld    QWORD PTR [edi]
c0008d66:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d69:	83 ec 10             	sub    esp,0x10
c0008d6c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d6f:	e8 bc 69 01 00       	call   c001f730 <fabs>
c0008d74:	83 c4 10             	add    esp,0x10
c0008d77:	dc 1d f8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ef8
c0008d7d:	df e0                	fnstsw ax
c0008d7f:	9e                   	sahf   
c0008d80:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d84:	76 10                	jbe    c0008d96 <linear_vari_process+0x102>
c0008d86:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008d89:	dc 27                	fsub   QWORD PTR [edi]
c0008d8b:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008d8e:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008d91:	dc 07                	fadd   QWORD PTR [edi]
c0008d93:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d96:	31 c0                	xor    eax,eax
c0008d98:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008d9b:	7e 1f                	jle    c0008dbc <linear_vari_process+0x128>
c0008d9d:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008d9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008da2:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008da6:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008daa:	d8 e1                	fsub   st,st(1)
c0008dac:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008daf:	40                   	inc    eax
c0008db0:	d8 ca                	fmul   st,st(2)
c0008db2:	de c1                	faddp  st(1),st
c0008db4:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008db7:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008dba:	eb dc                	jmp    c0008d98 <linear_vari_process+0x104>
c0008dbc:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008dc0:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008dc3:	de c1                	faddp  st(1),st
c0008dc5:	e9 61 ff ff ff       	jmp    c0008d2b <linear_vari_process+0x97>
c0008dca:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008dce:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008dd1:	de c1                	faddp  st(1),st
c0008dd3:	83 ec 10             	sub    esp,0x10
c0008dd6:	dd 14 24             	fst    QWORD PTR [esp]
c0008dd9:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008ddd:	e8 5b fe ff ff       	call   c0008c3d <fmod_one>
c0008de2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008de5:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008de9:	d8 e1                	fsub   st,st(1)
c0008deb:	d9 c9                	fxch   st(1)
c0008ded:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008df1:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008df4:	e8 57 69 01 00       	call   c001f750 <lrint>
c0008df9:	83 c4 10             	add    esp,0x10
c0008dfc:	0f af e8             	imul   ebp,eax
c0008dff:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008e02:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008e05:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008e09:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008e0c:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008e0f:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008e12:	0f 8d 95 00 00 00    	jge    c0008ead <linear_vari_process+0x219>
c0008e18:	d9 c0                	fld    st(0)
c0008e1a:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008e1d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008e21:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008e25:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e29:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008e2d:	de d9                	fcompp 
c0008e2f:	df e0                	fnstsw ax
c0008e31:	9e                   	sahf   
c0008e32:	76 79                	jbe    c0008ead <linear_vari_process+0x219>
c0008e34:	85 ed                	test   ebp,ebp
c0008e36:	7e 36                	jle    c0008e6e <linear_vari_process+0x1da>
c0008e38:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008e3c:	dd 07                	fld    QWORD PTR [edi]
c0008e3e:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008e41:	83 ec 10             	sub    esp,0x10
c0008e44:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e47:	e8 e4 68 01 00       	call   c001f730 <fabs>
c0008e4c:	83 c4 10             	add    esp,0x10
c0008e4f:	dc 1d f8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ef8
c0008e55:	df e0                	fnstsw ax
c0008e57:	9e                   	sahf   
c0008e58:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008e5c:	76 10                	jbe    c0008e6e <linear_vari_process+0x1da>
c0008e5e:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008e61:	dc 27                	fsub   QWORD PTR [edi]
c0008e63:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008e66:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008e69:	dc 07                	fadd   QWORD PTR [edi]
c0008e6b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e6e:	31 c0                	xor    eax,eax
c0008e70:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008e73:	39 c2                	cmp    edx,eax
c0008e75:	0f 8e 4f ff ff ff    	jle    c0008dca <linear_vari_process+0x136>
c0008e7b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008e7d:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008e80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e84:	89 e9                	mov    ecx,ebp
c0008e86:	29 d1                	sub    ecx,edx
c0008e88:	01 c5                	add    ebp,eax
c0008e8a:	89 ca                	mov    edx,ecx
c0008e8c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008e90:	01 c2                	add    edx,eax
c0008e92:	40                   	inc    eax
c0008e93:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008e96:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008e99:	d8 e1                	fsub   st,st(1)
c0008e9b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008e9e:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008ea1:	d8 ca                	fmul   st,st(2)
c0008ea3:	de c1                	faddp  st(1),st
c0008ea5:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008ea8:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008eab:	eb c3                	jmp    c0008e70 <linear_vari_process+0x1dc>
c0008ead:	39 d1                	cmp    ecx,edx
c0008eaf:	7d 13                	jge    c0008ec4 <linear_vari_process+0x230>
c0008eb1:	89 d0                	mov    eax,edx
c0008eb3:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008eb6:	29 c8                	sub    eax,ecx
c0008eb8:	99                   	cdq    
c0008eb9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ebc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ec0:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008ec4:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008ec7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008eca:	85 c0                	test   eax,eax
c0008ecc:	7f 1b                	jg     c0008ee9 <linear_vari_process+0x255>
c0008ece:	dd 04 24             	fld    QWORD PTR [esp]
c0008ed1:	dd 1f                	fstp   QWORD PTR [edi]
c0008ed3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008ed6:	99                   	cdq    
c0008ed7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008eda:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008edd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008ee0:	99                   	cdq    
c0008ee1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ee4:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008ee7:	eb 26                	jmp    c0008f0f <linear_vari_process+0x27b>
c0008ee9:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008eec:	31 d2                	xor    edx,edx
c0008eee:	29 c8                	sub    eax,ecx
c0008ef0:	c1 e0 02             	shl    eax,0x2
c0008ef3:	39 d1                	cmp    ecx,edx
c0008ef5:	7e d7                	jle    c0008ece <linear_vari_process+0x23a>
c0008ef7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008ef9:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008efd:	83 c0 04             	add    eax,0x4
c0008f00:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008f04:	42                   	inc    edx
c0008f05:	eb ec                	jmp    c0008ef3 <linear_vari_process+0x25f>
c0008f07:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008f0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008f13:	83 c4 2c             	add    esp,0x2c
c0008f16:	5b                   	pop    ebx
c0008f17:	5e                   	pop    esi
c0008f18:	5f                   	pop    edi
c0008f19:	5d                   	pop    ebp
c0008f1a:	c3                   	ret    

c0008f1b <linear_reset>:
c0008f1b:	83 ec 0c             	sub    esp,0xc
c0008f1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008f22:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008f25:	85 c0                	test   eax,eax
c0008f27:	74 20                	je     c0008f49 <linear_reset+0x2e>
c0008f29:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008f2c:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c0008f33:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f36:	51                   	push   ecx
c0008f37:	c1 e2 02             	shl    edx,0x2
c0008f3a:	83 c0 1c             	add    eax,0x1c
c0008f3d:	52                   	push   edx
c0008f3e:	6a 00                	push   0x0
c0008f40:	50                   	push   eax
c0008f41:	e8 87 77 ff ff       	call   c00006cd <memset>
c0008f46:	83 c4 10             	add    esp,0x10
c0008f49:	83 c4 0c             	add    esp,0xc
c0008f4c:	c3                   	ret    

c0008f4d <linear_get_name>:
c0008f4d:	31 c0                	xor    eax,eax
c0008f4f:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f54:	75 05                	jne    c0008f5b <linear_get_name+0xe>
c0008f56:	b8 b4 0e 02 c0       	mov    eax,0xc0020eb4
c0008f5b:	c3                   	ret    

c0008f5c <linear_get_description>:
c0008f5c:	31 c0                	xor    eax,eax
c0008f5e:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f63:	75 05                	jne    c0008f6a <linear_get_description+0xe>
c0008f65:	b8 c8 0e 02 c0       	mov    eax,0xc0020ec8
c0008f6a:	c3                   	ret    

c0008f6b <linear_set_converter>:
c0008f6b:	53                   	push   ebx
c0008f6c:	b8 0a 00 00 00       	mov    eax,0xa
c0008f71:	83 ec 08             	sub    esp,0x8
c0008f74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008f78:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008f7d:	75 6e                	jne    c0008fed <linear_set_converter+0x82>
c0008f7f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008f82:	85 c0                	test   eax,eax
c0008f84:	74 13                	je     c0008f99 <linear_set_converter+0x2e>
c0008f86:	83 ec 0c             	sub    esp,0xc
c0008f89:	50                   	push   eax
c0008f8a:	e8 6c 30 00 00       	call   c000bffb <free>
c0008f8f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	50                   	push   eax
c0008f9a:	50                   	push   eax
c0008f9b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f9e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008fa5:	50                   	push   eax
c0008fa6:	6a 01                	push   0x1
c0008fa8:	e8 6e 30 00 00       	call   c000c01b <calloc>
c0008fad:	89 c2                	mov    edx,eax
c0008faf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008fb2:	83 c4 10             	add    esp,0x10
c0008fb5:	b8 01 00 00 00       	mov    eax,0x1
c0008fba:	85 d2                	test   edx,edx
c0008fbc:	74 2f                	je     c0008fed <linear_set_converter+0x82>
c0008fbe:	83 ec 0c             	sub    esp,0xc
c0008fc1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008fc4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008fc7:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008fcd:	c7 43 24 94 8c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008c94
c0008fd4:	c7 43 20 94 8c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008c94
c0008fdb:	c7 43 28 1b 8f 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008f1b
c0008fe2:	53                   	push   ebx
c0008fe3:	e8 33 ff ff ff       	call   c0008f1b <linear_reset>
c0008fe8:	83 c4 10             	add    esp,0x10
c0008feb:	31 c0                	xor    eax,eax
c0008fed:	83 c4 08             	add    esp,0x8
c0008ff0:	5b                   	pop    ebx
c0008ff1:	c3                   	ret    

c0008ff2 <is_bad_src_ratio>:
c0008ff2:	83 ec 0c             	sub    esp,0xc
c0008ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ff9:	89 04 24             	mov    DWORD PTR [esp],eax
c0008ffc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009000:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009004:	dd 04 24             	fld    QWORD PTR [esp]
c0009007:	dd 05 80 0e 02 c0    	fld    QWORD PTR ds:0xc0020e80
c000900d:	de d9                	fcompp 
c000900f:	df e0                	fnstsw ax
c0009011:	f6 c4 45             	test   ah,0x45
c0009014:	74 10                	je     c0009026 <is_bad_src_ratio+0x34>
c0009016:	dd 04 24             	fld    QWORD PTR [esp]
c0009019:	dc 1d 88 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e88
c000901f:	df e0                	fnstsw ax
c0009021:	f6 c4 45             	test   ah,0x45
c0009024:	75 07                	jne    c000902d <is_bad_src_ratio+0x3b>
c0009026:	b8 01 00 00 00       	mov    eax,0x1
c000902b:	eb 05                	jmp    c0009032 <is_bad_src_ratio+0x40>
c000902d:	b8 00 00 00 00       	mov    eax,0x0
c0009032:	83 c4 0c             	add    esp,0xc
c0009035:	c3                   	ret    

c0009036 <int_to_fp>:
c0009036:	c1 e0 0c             	shl    eax,0xc
c0009039:	c3                   	ret    

c000903a <fp_to_int>:
c000903a:	c1 f8 0c             	sar    eax,0xc
c000903d:	c3                   	ret    

c000903e <fp_fraction_part>:
c000903e:	25 ff 0f 00 00       	and    eax,0xfff
c0009043:	c3                   	ret    

c0009044 <fp_to_double>:
c0009044:	83 ec 0c             	sub    esp,0xc
c0009047:	e8 f2 ff ff ff       	call   c000903e <fp_fraction_part>
c000904c:	d9 05 88 10 02 c0    	fld    DWORD PTR ds:0xc0021088
c0009052:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009056:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c000905a:	83 c4 0c             	add    esp,0xc
c000905d:	c3                   	ret    

c000905e <calc_output_single>:
c000905e:	55                   	push   ebp
c000905f:	57                   	push   edi
c0009060:	89 c7                	mov    edi,eax
c0009062:	56                   	push   esi
c0009063:	53                   	push   ebx
c0009064:	89 d3                	mov    ebx,edx
c0009066:	83 ec 24             	sub    esp,0x24
c0009069:	89 de                	mov    esi,ebx
c000906b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000906e:	e8 c3 ff ff ff       	call   c0009036 <int_to_fp>
c0009073:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0009076:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000907a:	29 c8                	sub    eax,ecx
c000907c:	99                   	cdq    
c000907d:	f7 fb                	idiv   ebx
c000907f:	0f af f0             	imul   esi,eax
c0009082:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009085:	01 ce                	add    esi,ecx
c0009087:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000908b:	29 c2                	sub    edx,eax
c000908d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0009094:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000909c:	8d 14 97             	lea    edx,[edi+edx*4]
c000909f:	89 f0                	mov    eax,esi
c00090a1:	e8 9e ff ff ff       	call   c0009044 <fp_to_double>
c00090a6:	89 f0                	mov    eax,esi
c00090a8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00090ac:	e8 89 ff ff ff       	call   c000903a <fp_to_int>
c00090b1:	83 c2 04             	add    edx,0x4
c00090b4:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00090b8:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00090bc:	d8 e1                	fsub   st,st(1)
c00090be:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00090c2:	de c9                	fmulp  st(1),st
c00090c4:	de c1                	faddp  st(1),st
c00090c6:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00090cc:	29 de                	sub    esi,ebx
c00090ce:	dc 04 24             	fadd   QWORD PTR [esp]
c00090d1:	dd 1c 24             	fstp   QWORD PTR [esp]
c00090d4:	79 c9                	jns    c000909f <calc_output_single+0x41>
c00090d6:	89 d8                	mov    eax,ebx
c00090d8:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00090dc:	29 c8                	sub    eax,ecx
c00090de:	89 c1                	mov    ecx,eax
c00090e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090e4:	29 c8                	sub    eax,ecx
c00090e6:	99                   	cdq    
c00090e7:	f7 fb                	idiv   ebx
c00090e9:	89 da                	mov    edx,ebx
c00090eb:	0f af d0             	imul   edx,eax
c00090ee:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c00090f2:	01 d1                	add    ecx,edx
c00090f4:	d9 ee                	fldz   
c00090f6:	8d 14 87             	lea    edx,[edi+eax*4]
c00090f9:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00090fd:	89 c8                	mov    eax,ecx
c00090ff:	e8 40 ff ff ff       	call   c0009044 <fp_to_double>
c0009104:	89 c8                	mov    eax,ecx
c0009106:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000910a:	e8 2b ff ff ff       	call   c000903a <fp_to_int>
c000910f:	29 d9                	sub    ecx,ebx
c0009111:	83 ea 04             	sub    edx,0x4
c0009114:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009118:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000911c:	d8 e1                	fsub   st,st(1)
c000911e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009122:	de c9                	fmulp  st(1),st
c0009124:	de c1                	faddp  st(1),st
c0009126:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c000912c:	85 c9                	test   ecx,ecx
c000912e:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009132:	de c1                	faddp  st(1),st
c0009134:	7f c3                	jg     c00090f9 <calc_output_single+0x9b>
c0009136:	dd 04 24             	fld    QWORD PTR [esp]
c0009139:	de c1                	faddp  st(1),st
c000913b:	83 c4 24             	add    esp,0x24
c000913e:	5b                   	pop    ebx
c000913f:	5e                   	pop    esi
c0009140:	5f                   	pop    edi
c0009141:	5d                   	pop    ebp
c0009142:	c3                   	ret    

c0009143 <calc_output_stereo>:
c0009143:	55                   	push   ebp
c0009144:	57                   	push   edi
c0009145:	89 c7                	mov    edi,eax
c0009147:	56                   	push   esi
c0009148:	53                   	push   ebx
c0009149:	89 d3                	mov    ebx,edx
c000914b:	83 ec 44             	sub    esp,0x44
c000914e:	89 de                	mov    esi,ebx
c0009150:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009153:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0009157:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000915b:	e8 d6 fe ff ff       	call   c0009036 <int_to_fp>
c0009160:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0009163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009167:	29 c8                	sub    eax,ecx
c0009169:	99                   	cdq    
c000916a:	f7 fb                	idiv   ebx
c000916c:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c000916f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009177:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000917b:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000917e:	0f af f0             	imul   esi,eax
c0009181:	0f af c2             	imul   eax,edx
c0009184:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009188:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000918c:	d9 ee                	fldz   
c000918e:	29 c2                	sub    edx,eax
c0009190:	01 ce                	add    esi,ecx
c0009192:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009195:	8d 14 97             	lea    edx,[edi+edx*4]
c0009198:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00091a0:	89 f0                	mov    eax,esi
c00091a2:	e8 9d fe ff ff       	call   c0009044 <fp_to_double>
c00091a7:	89 f0                	mov    eax,esi
c00091a9:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00091ad:	e8 88 fe ff ff       	call   c000903a <fp_to_int>
c00091b2:	83 c2 08             	add    edx,0x8
c00091b5:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00091b9:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00091bd:	d8 e1                	fsub   st,st(1)
c00091bf:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00091c3:	de c9                	fmulp  st(1),st
c00091c5:	de c1                	faddp  st(1),st
c00091c7:	d9 c0                	fld    st(0)
c00091c9:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c00091cf:	dc 04 24             	fadd   QWORD PTR [esp]
c00091d2:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091d5:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00091db:	29 de                	sub    esi,ebx
c00091dd:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00091e1:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00091e5:	79 b9                	jns    c00091a0 <calc_output_stereo+0x5d>
c00091e7:	89 d8                	mov    eax,ebx
c00091e9:	29 c8                	sub    eax,ecx
c00091eb:	89 c1                	mov    ecx,eax
c00091ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091f1:	29 c8                	sub    eax,ecx
c00091f3:	99                   	cdq    
c00091f4:	f7 fb                	idiv   ebx
c00091f6:	89 da                	mov    edx,ebx
c00091f8:	0f af d0             	imul   edx,eax
c00091fb:	40                   	inc    eax
c00091fc:	01 d1                	add    ecx,edx
c00091fe:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
c0009203:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0009207:	d9 ee                	fldz   
c0009209:	d9 ee                	fldz   
c000920b:	8d 14 87             	lea    edx,[edi+eax*4]
c000920e:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009212:	89 c8                	mov    eax,ecx
c0009214:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009218:	e8 27 fe ff ff       	call   c0009044 <fp_to_double>
c000921d:	89 c8                	mov    eax,ecx
c000921f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009223:	e8 12 fe ff ff       	call   c000903a <fp_to_int>
c0009228:	29 d9                	sub    ecx,ebx
c000922a:	83 ea 08             	sub    edx,0x8
c000922d:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009231:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009235:	d8 e1                	fsub   st,st(1)
c0009237:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000923b:	de c9                	fmulp  st(1),st
c000923d:	de c1                	faddp  st(1),st
c000923f:	d9 c0                	fld    st(0)
c0009241:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c0009247:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000924b:	de c1                	faddp  st(1),st
c000924d:	d9 c9                	fxch   st(1)
c000924f:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c0009255:	85 c9                	test   ecx,ecx
c0009257:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000925b:	de c1                	faddp  st(1),st
c000925d:	7f af                	jg     c000920e <calc_output_stereo+0xcb>
c000925f:	dd 04 24             	fld    QWORD PTR [esp]
c0009262:	de c2                	faddp  st(2),st
c0009264:	d9 c9                	fxch   st(1)
c0009266:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000926a:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000926e:	d9 18                	fstp   DWORD PTR [eax]
c0009270:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009274:	de c1                	faddp  st(1),st
c0009276:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000927a:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c000927d:	83 c4 44             	add    esp,0x44
c0009280:	5b                   	pop    ebx
c0009281:	5e                   	pop    esi
c0009282:	5f                   	pop    edi
c0009283:	5d                   	pop    ebp
c0009284:	c3                   	ret    

c0009285 <calc_output_quad>:
c0009285:	55                   	push   ebp
c0009286:	57                   	push   edi
c0009287:	56                   	push   esi
c0009288:	89 c6                	mov    esi,eax
c000928a:	53                   	push   ebx
c000928b:	89 d3                	mov    ebx,edx
c000928d:	83 ec 5c             	sub    esp,0x5c
c0009290:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009293:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c0009297:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000929b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000929e:	e8 93 fd ff ff       	call   c0009036 <int_to_fp>
c00092a3:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c00092a6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00092aa:	29 c8                	sub    eax,ecx
c00092ac:	99                   	cdq    
c00092ad:	f7 fb                	idiv   ebx
c00092af:	89 da                	mov    edx,ebx
c00092b1:	0f af d0             	imul   edx,eax
c00092b4:	01 ca                	add    edx,ecx
c00092b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00092ba:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c00092bd:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00092c1:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00092c4:	0f af c2             	imul   eax,edx
c00092c7:	d9 ee                	fldz   
c00092c9:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00092cd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00092d1:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00092d5:	29 c2                	sub    edx,eax
c00092d7:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00092db:	8d 14 96             	lea    edx,[esi+edx*4]
c00092de:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00092e2:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092ea:	e8 55 fd ff ff       	call   c0009044 <fp_to_double>
c00092ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092f3:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092f7:	e8 3e fd ff ff       	call   c000903a <fp_to_int>
c00092fc:	83 c2 10             	add    edx,0x10
c00092ff:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009303:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009307:	d8 e1                	fsub   st,st(1)
c0009309:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000930d:	de c9                	fmulp  st(1),st
c000930f:	de c1                	faddp  st(1),st
c0009311:	d9 c0                	fld    st(0)
c0009313:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009319:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000931d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009321:	d9 c0                	fld    st(0)
c0009323:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009329:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000932d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009331:	d9 c0                	fld    st(0)
c0009333:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009339:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000933d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009341:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009347:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c000934b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000934f:	de c1                	faddp  st(1),st
c0009351:	79 8f                	jns    c00092e2 <calc_output_quad+0x5d>
c0009353:	89 d8                	mov    eax,ebx
c0009355:	29 c8                	sub    eax,ecx
c0009357:	89 c1                	mov    ecx,eax
c0009359:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000935d:	29 c8                	sub    eax,ecx
c000935f:	99                   	cdq    
c0009360:	f7 fb                	idiv   ebx
c0009362:	89 da                	mov    edx,ebx
c0009364:	0f af d0             	imul   edx,eax
c0009367:	40                   	inc    eax
c0009368:	01 d1                	add    ecx,edx
c000936a:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000936f:	d9 ee                	fldz   
c0009371:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009375:	d9 ee                	fldz   
c0009377:	d9 ee                	fldz   
c0009379:	d9 ee                	fldz   
c000937b:	8d 14 86             	lea    edx,[esi+eax*4]
c000937e:	eb 0a                	jmp    c000938a <calc_output_quad+0x105>
c0009380:	d9 cc                	fxch   st(4)
c0009382:	d9 ca                	fxch   st(2)
c0009384:	d9 c9                	fxch   st(1)
c0009386:	d9 cb                	fxch   st(3)
c0009388:	d9 c9                	fxch   st(1)
c000938a:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000938e:	d9 c9                	fxch   st(1)
c0009390:	89 c8                	mov    eax,ecx
c0009392:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c0009396:	d9 c9                	fxch   st(1)
c0009398:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000939c:	d9 c9                	fxch   st(1)
c000939e:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00093a2:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00093a6:	e8 99 fc ff ff       	call   c0009044 <fp_to_double>
c00093ab:	89 c8                	mov    eax,ecx
c00093ad:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00093b1:	e8 84 fc ff ff       	call   c000903a <fp_to_int>
c00093b6:	29 d9                	sub    ecx,ebx
c00093b8:	83 ea 10             	sub    edx,0x10
c00093bb:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00093bf:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00093c3:	d8 e1                	fsub   st,st(1)
c00093c5:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00093c9:	de c9                	fmulp  st(1),st
c00093cb:	de c1                	faddp  st(1),st
c00093cd:	d9 c0                	fld    st(0)
c00093cf:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c00093d5:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00093d9:	de c1                	faddp  st(1),st
c00093db:	d9 c1                	fld    st(1)
c00093dd:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c00093e3:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00093e7:	de c1                	faddp  st(1),st
c00093e9:	d9 c2                	fld    st(2)
c00093eb:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00093f1:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00093f5:	de c1                	faddp  st(1),st
c00093f7:	d9 cb                	fxch   st(3)
c00093f9:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c00093ff:	85 c9                	test   ecx,ecx
c0009401:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009405:	de c1                	faddp  st(1),st
c0009407:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000940b:	0f 8f 6f ff ff ff    	jg     c0009380 <calc_output_quad+0xfb>
c0009411:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009415:	de c4                	faddp  st(4),st
c0009417:	d9 cb                	fxch   st(3)
c0009419:	dc 0c 24             	fmul   QWORD PTR [esp]
c000941c:	d9 1f                	fstp   DWORD PTR [edi]
c000941e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009422:	de c2                	faddp  st(2),st
c0009424:	d9 c9                	fxch   st(1)
c0009426:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009429:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c000942c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009430:	de c3                	faddp  st(3),st
c0009432:	d9 ca                	fxch   st(2)
c0009434:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009437:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c000943a:	de c1                	faddp  st(1),st
c000943c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000943f:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c0009442:	83 c4 5c             	add    esp,0x5c
c0009445:	5b                   	pop    ebx
c0009446:	5e                   	pop    esi
c0009447:	5f                   	pop    edi
c0009448:	5d                   	pop    ebp
c0009449:	c3                   	ret    

c000944a <calc_output_hex>:
c000944a:	55                   	push   ebp
c000944b:	57                   	push   edi
c000944c:	89 c7                	mov    edi,eax
c000944e:	56                   	push   esi
c000944f:	53                   	push   ebx
c0009450:	89 d3                	mov    ebx,edx
c0009452:	83 ec 7c             	sub    esp,0x7c
c0009455:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009458:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c000945f:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c0009466:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009469:	e8 c8 fb ff ff       	call   c0009036 <int_to_fp>
c000946e:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0009471:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009475:	29 c8                	sub    eax,ecx
c0009477:	99                   	cdq    
c0009478:	f7 fb                	idiv   ebx
c000947a:	89 da                	mov    edx,ebx
c000947c:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0009484:	0f af d0             	imul   edx,eax
c0009487:	01 ca                	add    edx,ecx
c0009489:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0009491:	d9 ee                	fldz   
c0009493:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009497:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c000949a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000949e:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00094a1:	0f af c2             	imul   eax,edx
c00094a4:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00094a8:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00094ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00094b0:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00094b4:	29 c2                	sub    edx,eax
c00094b6:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00094ba:	8d 14 97             	lea    edx,[edi+edx*4]
c00094bd:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00094c1:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00094c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094c9:	e8 76 fb ff ff       	call   c0009044 <fp_to_double>
c00094ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094d2:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094d6:	e8 5f fb ff ff       	call   c000903a <fp_to_int>
c00094db:	83 c2 18             	add    edx,0x18
c00094de:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00094e2:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00094e6:	d8 e1                	fsub   st,st(1)
c00094e8:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00094ec:	de c9                	fmulp  st(1),st
c00094ee:	de c1                	faddp  st(1),st
c00094f0:	d9 c0                	fld    st(0)
c00094f2:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c00094f8:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00094fc:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009500:	d9 c0                	fld    st(0)
c0009502:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009508:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c000950c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009510:	d9 c0                	fld    st(0)
c0009512:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009518:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000951c:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009520:	d9 c0                	fld    st(0)
c0009522:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009528:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000952c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009530:	d9 c0                	fld    st(0)
c0009532:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009538:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000953c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009540:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009546:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c000954a:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c000954e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009552:	0f 89 6d ff ff ff    	jns    c00094c5 <calc_output_hex+0x7b>
c0009558:	89 d8                	mov    eax,ebx
c000955a:	29 c8                	sub    eax,ecx
c000955c:	89 c1                	mov    ecx,eax
c000955e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009562:	29 c8                	sub    eax,ecx
c0009564:	99                   	cdq    
c0009565:	f7 fb                	idiv   ebx
c0009567:	89 da                	mov    edx,ebx
c0009569:	0f af d0             	imul   edx,eax
c000956c:	40                   	inc    eax
c000956d:	01 d1                	add    ecx,edx
c000956f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c0009574:	d9 ee                	fldz   
c0009576:	d9 ee                	fldz   
c0009578:	d9 ee                	fldz   
c000957a:	d9 ca                	fxch   st(2)
c000957c:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
c0009580:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c0009584:	d9 ee                	fldz   
c0009586:	8d 14 87             	lea    edx,[edi+eax*4]
c0009589:	d9 ee                	fldz   
c000958b:	d9 ca                	fxch   st(2)
c000958d:	eb 0a                	jmp    c0009599 <calc_output_hex+0x14f>
c000958f:	d9 c9                	fxch   st(1)
c0009591:	d9 cc                	fxch   st(4)
c0009593:	d9 cb                	fxch   st(3)
c0009595:	d9 ca                	fxch   st(2)
c0009597:	d9 c9                	fxch   st(1)
c0009599:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c000959d:	89 c8                	mov    eax,ecx
c000959f:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c00095a3:	d9 ca                	fxch   st(2)
c00095a5:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00095a9:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00095ad:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00095b1:	e8 8e fa ff ff       	call   c0009044 <fp_to_double>
c00095b6:	89 c8                	mov    eax,ecx
c00095b8:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00095bc:	e8 79 fa ff ff       	call   c000903a <fp_to_int>
c00095c1:	29 d9                	sub    ecx,ebx
c00095c3:	83 ea 18             	sub    edx,0x18
c00095c6:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00095ca:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00095ce:	d8 e1                	fsub   st,st(1)
c00095d0:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00095d4:	de c9                	fmulp  st(1),st
c00095d6:	de c1                	faddp  st(1),st
c00095d8:	d9 c0                	fld    st(0)
c00095da:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00095e0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00095e4:	de c1                	faddp  st(1),st
c00095e6:	d9 c1                	fld    st(1)
c00095e8:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c00095ee:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c00095f2:	de c1                	faddp  st(1),st
c00095f4:	d9 c2                	fld    st(2)
c00095f6:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c00095fc:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009600:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009604:	d9 c2                	fld    st(2)
c0009606:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c000960c:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0009610:	de c1                	faddp  st(1),st
c0009612:	d9 c3                	fld    st(3)
c0009614:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c000961a:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c000961e:	de c1                	faddp  st(1),st
c0009620:	d9 cc                	fxch   st(4)
c0009622:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009628:	85 c9                	test   ecx,ecx
c000962a:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c000962e:	de c1                	faddp  st(1),st
c0009630:	0f 8f 59 ff ff ff    	jg     c000958f <calc_output_hex+0x145>
c0009636:	d9 cb                	fxch   st(3)
c0009638:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000963c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000963f:	d9 1e                	fstp   DWORD PTR [esi]
c0009641:	d9 c9                	fxch   st(1)
c0009643:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009647:	dc 0c 24             	fmul   QWORD PTR [esp]
c000964a:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c000964d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009651:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009655:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009658:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c000965b:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000965f:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009662:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c0009665:	d9 c9                	fxch   st(1)
c0009667:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000966b:	dc 0c 24             	fmul   QWORD PTR [esp]
c000966e:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c0009671:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009675:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009678:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c000967b:	83 c4 7c             	add    esp,0x7c
c000967e:	5b                   	pop    ebx
c000967f:	5e                   	pop    esi
c0009680:	5f                   	pop    edi
c0009681:	5d                   	pop    ebp
c0009682:	c3                   	ret    

c0009683 <sinc_reset>:
c0009683:	56                   	push   esi
c0009684:	53                   	push   ebx
c0009685:	51                   	push   ecx
c0009686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000968a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000968d:	85 db                	test   ebx,ebx
c000968f:	74 51                	je     c00096e2 <sinc_reset+0x5f>
c0009691:	d9 ee                	fldz   
c0009693:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000969a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00096a1:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c00096a4:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c00096ab:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c00096b1:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c00096b4:	52                   	push   edx
c00096b5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096b8:	c1 e0 02             	shl    eax,0x2
c00096bb:	50                   	push   eax
c00096bc:	6a 00                	push   0x0
c00096be:	56                   	push   esi
c00096bf:	e8 09 70 ff ff       	call   c00006cd <memset>
c00096c4:	83 c4 0c             	add    esp,0xc
c00096c7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00096ca:	c1 e0 02             	shl    eax,0x2
c00096cd:	50                   	push   eax
c00096ce:	68 aa 00 00 00       	push   0xaa
c00096d3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096d6:	8d 04 86             	lea    eax,[esi+eax*4]
c00096d9:	50                   	push   eax
c00096da:	e8 ee 6f ff ff       	call   c00006cd <memset>
c00096df:	83 c4 10             	add    esp,0x10
c00096e2:	58                   	pop    eax
c00096e3:	5b                   	pop    ebx
c00096e4:	5e                   	pop    esi
c00096e5:	c3                   	ret    

c00096e6 <calc_output_multi>:
c00096e6:	55                   	push   ebp
c00096e7:	57                   	push   edi
c00096e8:	8d 78 44             	lea    edi,[eax+0x44]
c00096eb:	56                   	push   esi
c00096ec:	89 c6                	mov    esi,eax
c00096ee:	53                   	push   ebx
c00096ef:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c00096f5:	83 ec 4c             	sub    esp,0x4c
c00096f8:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c00096fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009700:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009703:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009707:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000970b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000970f:	e8 22 f9 ff ff       	call   c0009036 <int_to_fp>
c0009714:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0009718:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000971c:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0009720:	99                   	cdq    
c0009721:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c0009725:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009729:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c000972c:	0f af d0             	imul   edx,eax
c000972f:	0f af c3             	imul   eax,ebx
c0009732:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0009736:	29 c5                	sub    ebp,eax
c0009738:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000973f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009743:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0009747:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000974b:	52                   	push   edx
c000974c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009750:	6a 00                	push   0x0
c0009752:	57                   	push   edi
c0009753:	e8 75 6f ff ff       	call   c00006cd <memset>
c0009758:	83 c4 10             	add    esp,0x10
c000975b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000975f:	e8 e0 f8 ff ff       	call   c0009044 <fp_to_double>
c0009764:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009768:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000976c:	e8 c9 f8 ff ff       	call   c000903a <fp_to_int>
c0009771:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0009774:	89 d9                	mov    ecx,ebx
c0009776:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009779:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c000977d:	d8 e1                	fsub   st,st(1)
c000977f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009783:	de c9                	fmulp  st(1),st
c0009785:	de c1                	faddp  st(1),st
c0009787:	89 c8                	mov    eax,ecx
c0009789:	bd 08 00 00 00       	mov    ebp,0x8
c000978e:	99                   	cdq    
c000978f:	f7 fd                	idiv   ebp
c0009791:	4a                   	dec    edx
c0009792:	83 fa 06             	cmp    edx,0x6
c0009795:	77 07                	ja     c000979e <calc_output_multi+0xb8>
c0009797:	ff 24 95 00 0f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf100]
c000979e:	49                   	dec    ecx
c000979f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097a3:	d9 c0                	fld    st(0)
c00097a5:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097ac:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097af:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097b3:	dc 00                	fadd   QWORD PTR [eax]
c00097b5:	dd 18                	fstp   QWORD PTR [eax]
c00097b7:	49                   	dec    ecx
c00097b8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097bc:	d9 c0                	fld    st(0)
c00097be:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097c5:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097c8:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097cc:	dc 00                	fadd   QWORD PTR [eax]
c00097ce:	dd 18                	fstp   QWORD PTR [eax]
c00097d0:	49                   	dec    ecx
c00097d1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097d5:	d9 c0                	fld    st(0)
c00097d7:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097de:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097e1:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097e5:	dc 00                	fadd   QWORD PTR [eax]
c00097e7:	dd 18                	fstp   QWORD PTR [eax]
c00097e9:	49                   	dec    ecx
c00097ea:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097ee:	d9 c0                	fld    st(0)
c00097f0:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097f7:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097fa:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097fe:	dc 00                	fadd   QWORD PTR [eax]
c0009800:	dd 18                	fstp   QWORD PTR [eax]
c0009802:	49                   	dec    ecx
c0009803:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009807:	d9 c0                	fld    st(0)
c0009809:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009810:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009813:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009817:	dc 00                	fadd   QWORD PTR [eax]
c0009819:	dd 18                	fstp   QWORD PTR [eax]
c000981b:	49                   	dec    ecx
c000981c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009820:	d9 c0                	fld    st(0)
c0009822:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009829:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000982c:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009830:	dc 00                	fadd   QWORD PTR [eax]
c0009832:	dd 18                	fstp   QWORD PTR [eax]
c0009834:	49                   	dec    ecx
c0009835:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009839:	d9 c0                	fld    st(0)
c000983b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009842:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009845:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009849:	dc 00                	fadd   QWORD PTR [eax]
c000984b:	dd 18                	fstp   QWORD PTR [eax]
c000984d:	49                   	dec    ecx
c000984e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009852:	d9 c0                	fld    st(0)
c0009854:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000985b:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000985e:	85 c9                	test   ecx,ecx
c0009860:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009864:	dc 00                	fadd   QWORD PTR [eax]
c0009866:	dd 18                	fstp   QWORD PTR [eax]
c0009868:	0f 8f 19 ff ff ff    	jg     c0009787 <calc_output_multi+0xa1>
c000986e:	dd d8                	fstp   st(0)
c0009870:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009874:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0009878:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c000987c:	0f 89 d9 fe ff ff    	jns    c000975b <calc_output_multi+0x75>
c0009882:	89 d1                	mov    ecx,edx
c0009884:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009888:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c000988c:	29 c8                	sub    eax,ecx
c000988e:	99                   	cdq    
c000988f:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c0009893:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009897:	0f af d0             	imul   edx,eax
c000989a:	40                   	inc    eax
c000989b:	01 d1                	add    ecx,edx
c000989d:	0f af c3             	imul   eax,ebx
c00098a0:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c00098a3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c00098a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098ab:	50                   	push   eax
c00098ac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00098b0:	6a 00                	push   0x0
c00098b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00098b6:	e8 12 6e ff ff       	call   c00006cd <memset>
c00098bb:	83 c4 10             	add    esp,0x10
c00098be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00098c2:	e8 7d f7 ff ff       	call   c0009044 <fp_to_double>
c00098c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00098cb:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00098cf:	e8 66 f7 ff ff       	call   c000903a <fp_to_int>
c00098d4:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00098d7:	89 d9                	mov    ecx,ebx
c00098d9:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00098dc:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00098e0:	d8 e1                	fsub   st,st(1)
c00098e2:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00098e6:	de c9                	fmulp  st(1),st
c00098e8:	de c1                	faddp  st(1),st
c00098ea:	89 c8                	mov    eax,ecx
c00098ec:	bd 08 00 00 00       	mov    ebp,0x8
c00098f1:	99                   	cdq    
c00098f2:	f7 fd                	idiv   ebp
c00098f4:	4a                   	dec    edx
c00098f5:	83 fa 06             	cmp    edx,0x6
c00098f8:	77 07                	ja     c0009901 <calc_output_multi+0x21b>
c00098fa:	ff 24 95 1c 0f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf0e4]
c0009901:	49                   	dec    ecx
c0009902:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009906:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000990a:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009911:	d9 c0                	fld    st(0)
c0009913:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009917:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000991a:	dc 00                	fadd   QWORD PTR [eax]
c000991c:	dd 18                	fstp   QWORD PTR [eax]
c000991e:	49                   	dec    ecx
c000991f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009923:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009927:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000992e:	d9 c0                	fld    st(0)
c0009930:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009934:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009937:	dc 00                	fadd   QWORD PTR [eax]
c0009939:	dd 18                	fstp   QWORD PTR [eax]
c000993b:	49                   	dec    ecx
c000993c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009940:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009944:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000994b:	d9 c0                	fld    st(0)
c000994d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009951:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009954:	dc 00                	fadd   QWORD PTR [eax]
c0009956:	dd 18                	fstp   QWORD PTR [eax]
c0009958:	49                   	dec    ecx
c0009959:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000995d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009961:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009968:	d9 c0                	fld    st(0)
c000996a:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000996e:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009971:	dc 00                	fadd   QWORD PTR [eax]
c0009973:	dd 18                	fstp   QWORD PTR [eax]
c0009975:	49                   	dec    ecx
c0009976:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000997a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000997e:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009985:	d9 c0                	fld    st(0)
c0009987:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000998b:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000998e:	dc 00                	fadd   QWORD PTR [eax]
c0009990:	dd 18                	fstp   QWORD PTR [eax]
c0009992:	49                   	dec    ecx
c0009993:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009997:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000999b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099a2:	d9 c0                	fld    st(0)
c00099a4:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099a8:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099ab:	dc 00                	fadd   QWORD PTR [eax]
c00099ad:	dd 18                	fstp   QWORD PTR [eax]
c00099af:	49                   	dec    ecx
c00099b0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00099b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099b8:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099bf:	d9 c0                	fld    st(0)
c00099c1:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099c5:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099c8:	dc 00                	fadd   QWORD PTR [eax]
c00099ca:	dd 18                	fstp   QWORD PTR [eax]
c00099cc:	49                   	dec    ecx
c00099cd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00099d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099d5:	85 c9                	test   ecx,ecx
c00099d7:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099de:	d9 c0                	fld    st(0)
c00099e0:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099e4:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099e7:	dc 00                	fadd   QWORD PTR [eax]
c00099e9:	dd 18                	fstp   QWORD PTR [eax]
c00099eb:	0f 8f f9 fe ff ff    	jg     c00098ea <calc_output_multi+0x204>
c00099f1:	dd d8                	fstp   st(0)
c00099f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00099f7:	29 5c 24 18          	sub    DWORD PTR [esp+0x18],ebx
c00099fb:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c00099ff:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0009a04:	0f 8f b4 fe ff ff    	jg     c00098be <calc_output_multi+0x1d8>
c0009a0a:	b9 08 00 00 00       	mov    ecx,0x8
c0009a0f:	89 d8                	mov    eax,ebx
c0009a11:	99                   	cdq    
c0009a12:	f7 f9                	idiv   ecx
c0009a14:	4a                   	dec    edx
c0009a15:	83 fa 06             	cmp    edx,0x6
c0009a18:	77 07                	ja     c0009a21 <calc_output_multi+0x33b>
c0009a1a:	ff 24 95 38 0f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf0c8]
c0009a21:	4b                   	dec    ebx
c0009a22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a26:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a29:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a2c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a30:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a34:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a37:	4b                   	dec    ebx
c0009a38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a3c:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a3f:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a42:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a46:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a4a:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a4d:	4b                   	dec    ebx
c0009a4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a52:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a55:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a58:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a5c:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a60:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a63:	4b                   	dec    ebx
c0009a64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a68:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a6b:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a6e:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a72:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a76:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a79:	4b                   	dec    ebx
c0009a7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a7e:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a81:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a84:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a88:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a8c:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a8f:	4b                   	dec    ebx
c0009a90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a94:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a97:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a9a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a9e:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009aa2:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009aa5:	4b                   	dec    ebx
c0009aa6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009aaa:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009aad:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009ab0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ab4:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009ab8:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009abb:	4b                   	dec    ebx
c0009abc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ac0:	85 db                	test   ebx,ebx
c0009ac2:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009ac5:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009ac8:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009acc:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009ad0:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009ad3:	0f 8f 36 ff ff ff    	jg     c0009a0f <calc_output_multi+0x329>
c0009ad9:	83 c4 4c             	add    esp,0x4c
c0009adc:	5b                   	pop    ebx
c0009add:	5e                   	pop    esi
c0009ade:	5f                   	pop    edi
c0009adf:	5d                   	pop    ebp
c0009ae0:	c3                   	ret    

c0009ae1 <double_to_fp>:
c0009ae1:	d9 05 8c 10 02 c0    	fld    DWORD PTR ds:0xc002108c
c0009ae7:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009aeb:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009aef:	e9 5c 5c 01 00       	jmp    c001f750 <lrint>

c0009af4 <fmod_one>:
c0009af4:	83 ec 2c             	sub    esp,0x2c
c0009af7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009afb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009aff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b07:	83 ec 08             	sub    esp,0x8
c0009b0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b12:	e8 39 5c 01 00       	call   c001f750 <lrint>
c0009b17:	83 c4 10             	add    esp,0x10
c0009b1a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009b1e:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009b22:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009b26:	de e1                	fsubrp st(1),st
c0009b28:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009b2c:	d9 ee                	fldz   
c0009b2e:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009b32:	df e0                	fnstsw ax
c0009b34:	f6 c4 45             	test   ah,0x45
c0009b37:	75 0a                	jne    c0009b43 <fmod_one+0x4f>
c0009b39:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b3d:	d9 e8                	fld1   
c0009b3f:	de c1                	faddp  st(1),st
c0009b41:	eb 04                	jmp    c0009b47 <fmod_one+0x53>
c0009b43:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b47:	83 c4 2c             	add    esp,0x2c
c0009b4a:	c3                   	ret    

c0009b4b <prepare_data>:
c0009b4b:	55                   	push   ebp
c0009b4c:	57                   	push   edi
c0009b4d:	56                   	push   esi
c0009b4e:	53                   	push   ebx
c0009b4f:	83 ec 1c             	sub    esp,0x1c
c0009b52:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009b56:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b5a:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009b5e:	0f 89 57 01 00 00    	jns    c0009cbb <prepare_data+0x170>
c0009b64:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009b67:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b6a:	85 d2                	test   edx,edx
c0009b6c:	75 0d                	jne    c0009b7b <prepare_data+0x30>
c0009b6e:	8d 14 36             	lea    edx,[esi+esi*1]
c0009b71:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009b74:	29 d0                	sub    eax,edx
c0009b76:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b79:	eb 44                	jmp    c0009bbf <prepare_data+0x74>
c0009b7b:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009b7e:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009b81:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009b84:	39 c1                	cmp    ecx,eax
c0009b86:	7d 04                	jge    c0009b8c <prepare_data+0x41>
c0009b88:	29 d0                	sub    eax,edx
c0009b8a:	eb 2d                	jmp    c0009bb9 <prepare_data+0x6e>
c0009b8c:	29 d7                	sub    edi,edx
c0009b8e:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009b94:	01 f7                	add    edi,esi
c0009b96:	29 f2                	sub    edx,esi
c0009b98:	51                   	push   ecx
c0009b99:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009ba0:	8d 14 90             	lea    edx,[eax+edx*4]
c0009ba3:	51                   	push   ecx
c0009ba4:	52                   	push   edx
c0009ba5:	50                   	push   eax
c0009ba6:	e8 b4 6a ff ff       	call   c000065f <memmove>
c0009bab:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009bae:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009bb1:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009bb4:	29 f0                	sub    eax,esi
c0009bb6:	83 c4 10             	add    esp,0x10
c0009bb9:	29 f0                	sub    eax,esi
c0009bbb:	79 02                	jns    c0009bbf <prepare_data+0x74>
c0009bbd:	31 c0                	xor    eax,eax
c0009bbf:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009bc2:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009bc5:	29 ef                	sub    edi,ebp
c0009bc7:	39 c7                	cmp    edi,eax
c0009bc9:	7e 02                	jle    c0009bcd <prepare_data+0x82>
c0009bcb:	89 c7                	mov    edi,eax
c0009bcd:	89 f8                	mov    eax,edi
c0009bcf:	99                   	cdq    
c0009bd0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009bd3:	29 d7                	sub    edi,edx
c0009bd5:	b8 15 00 00 00       	mov    eax,0x15
c0009bda:	0f 88 dd 00 00 00    	js     c0009cbd <prepare_data+0x172>
c0009be0:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009be3:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009be6:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009be9:	0f 8f ce 00 00 00    	jg     c0009cbd <prepare_data+0x172>
c0009bef:	50                   	push   eax
c0009bf0:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009bf7:	50                   	push   eax
c0009bf8:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009bfe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c02:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c04:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009c07:	50                   	push   eax
c0009c08:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009c0b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009c0f:	50                   	push   eax
c0009c10:	e8 82 6a ff ff       	call   c0000697 <memcpy>
c0009c15:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009c18:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009c1b:	83 c4 10             	add    esp,0x10
c0009c1e:	01 fd                	add    ebp,edi
c0009c20:	01 f9                	add    ecx,edi
c0009c22:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009c25:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009c28:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009c2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c2f:	0f 85 86 00 00 00    	jne    c0009cbb <prepare_data+0x170>
c0009c35:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009c38:	89 e8                	mov    eax,ebp
c0009c3a:	29 c8                	sub    eax,ecx
c0009c3c:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009c3f:	39 f8                	cmp    eax,edi
c0009c41:	7d 78                	jge    c0009cbb <prepare_data+0x170>
c0009c43:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009c47:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009c4b:	74 6e                	je     c0009cbb <prepare_data+0x170>
c0009c4d:	8d 7e 04             	lea    edi,[esi+0x4]
c0009c50:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009c54:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009c57:	29 ef                	sub    edi,ebp
c0009c59:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009c5d:	7c 29                	jl     c0009c88 <prepare_data+0x13d>
c0009c5f:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c62:	29 f1                	sub    ecx,esi
c0009c64:	55                   	push   ebp
c0009c65:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009c6c:	50                   	push   eax
c0009c6d:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009c70:	50                   	push   eax
c0009c71:	52                   	push   edx
c0009c72:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c76:	e8 e4 69 ff ff       	call   c000065f <memmove>
c0009c7b:	83 c4 10             	add    esp,0x10
c0009c7e:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009c81:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009c84:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c88:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009c8b:	83 c6 05             	add    esi,0x5
c0009c8e:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009c91:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009c94:	78 07                	js     c0009c9d <prepare_data+0x152>
c0009c96:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c99:	39 cf                	cmp    edi,ecx
c0009c9b:	7e 04                	jle    c0009ca1 <prepare_data+0x156>
c0009c9d:	89 ce                	mov    esi,ecx
c0009c9f:	29 c6                	sub    esi,eax
c0009ca1:	51                   	push   ecx
c0009ca2:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009ca9:	51                   	push   ecx
c0009caa:	8d 04 82             	lea    eax,[edx+eax*4]
c0009cad:	6a 00                	push   0x0
c0009caf:	50                   	push   eax
c0009cb0:	e8 18 6a ff ff       	call   c00006cd <memset>
c0009cb5:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009cb8:	83 c4 10             	add    esp,0x10
c0009cbb:	31 c0                	xor    eax,eax
c0009cbd:	83 c4 1c             	add    esp,0x1c
c0009cc0:	5b                   	pop    ebx
c0009cc1:	5e                   	pop    esi
c0009cc2:	5f                   	pop    edi
c0009cc3:	5d                   	pop    ebp
c0009cc4:	c3                   	ret    

c0009cc5 <sinc_multichan_vari_process>:
c0009cc5:	55                   	push   ebp
c0009cc6:	b8 05 00 00 00       	mov    eax,0x5
c0009ccb:	57                   	push   edi
c0009ccc:	56                   	push   esi
c0009ccd:	53                   	push   ebx
c0009cce:	83 ec 3c             	sub    esp,0x3c
c0009cd1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009cd5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009cd9:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009cdc:	85 db                	test   ebx,ebx
c0009cde:	0f 84 5b 02 00 00    	je     c0009f3f <sinc_multichan_vari_process+0x27a>
c0009ce4:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009ce7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009cea:	0f af d0             	imul   edx,eax
c0009ced:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009cf0:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009cf4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009cfb:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009cfe:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009d05:	dd 06                	fld    QWORD PTR [esi]
c0009d07:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009d0b:	55                   	push   ebp
c0009d0c:	55                   	push   ebp
c0009d0d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d10:	e8 dd f2 ff ff       	call   c0008ff2 <is_bad_src_ratio>
c0009d15:	89 c2                	mov    edx,eax
c0009d17:	58                   	pop    eax
c0009d18:	59                   	pop    ecx
c0009d19:	b8 16 00 00 00       	mov    eax,0x16
c0009d1e:	85 d2                	test   edx,edx
c0009d20:	0f 85 19 02 00 00    	jne    c0009f3f <sinc_multichan_vari_process+0x27a>
c0009d26:	d9 05 90 10 02 c0    	fld    DWORD PTR ds:0xc0021090
c0009d2c:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009d2f:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009d32:	dd 06                	fld    QWORD PTR [esi]
c0009d34:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009d37:	d8 d1                	fcom   st(1)
c0009d39:	df e0                	fnstsw ax
c0009d3b:	9e                   	sahf   
c0009d3c:	76 0f                	jbe    c0009d4d <sinc_multichan_vari_process+0x88>
c0009d3e:	dd d8                	fstp   st(0)
c0009d40:	d9 e8                	fld1   
c0009d42:	d8 d9                	fcomp  st(1)
c0009d44:	df e0                	fnstsw ax
c0009d46:	9e                   	sahf   
c0009d47:	77 0f                	ja     c0009d58 <sinc_multichan_vari_process+0x93>
c0009d49:	dd d8                	fstp   st(0)
c0009d4b:	eb 11                	jmp    c0009d5e <sinc_multichan_vari_process+0x99>
c0009d4d:	dd d9                	fstp   st(1)
c0009d4f:	d9 e8                	fld1   
c0009d51:	d8 d9                	fcomp  st(1)
c0009d53:	df e0                	fnstsw ax
c0009d55:	9e                   	sahf   
c0009d56:	76 04                	jbe    c0009d5c <sinc_multichan_vari_process+0x97>
c0009d58:	de f9                	fdivp  st(1),st
c0009d5a:	eb 02                	jmp    c0009d5e <sinc_multichan_vari_process+0x99>
c0009d5c:	dd d8                	fstp   st(0)
c0009d5e:	83 ec 10             	sub    esp,0x10
c0009d61:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d64:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d67:	e8 e4 59 01 00       	call   c001f750 <lrint>
c0009d6c:	40                   	inc    eax
c0009d6d:	0f af c5             	imul   eax,ebp
c0009d70:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009d73:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009d77:	dd 14 24             	fst    QWORD PTR [esp]
c0009d7a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d7e:	e8 71 fd ff ff       	call   c0009af4 <fmod_one>
c0009d83:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009d86:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d89:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009d8d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009d91:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009d95:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009d99:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d9c:	e8 af 59 01 00       	call   c001f750 <lrint>
c0009da1:	d9 e8                	fld1   
c0009da3:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009da7:	0f af e8             	imul   ebp,eax
c0009daa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009dae:	01 e8                	add    eax,ebp
c0009db0:	99                   	cdq    
c0009db1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009db4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009db7:	dc 05 f8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ef8
c0009dbd:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009dc1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009dc4:	83 c4 10             	add    esp,0x10
c0009dc7:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009dca:	7d 4b                	jge    c0009e17 <sinc_multichan_vari_process+0x152>
c0009dcc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009dcf:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009dd2:	01 c8                	add    eax,ecx
c0009dd4:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009dd7:	99                   	cdq    
c0009dd8:	f7 f9                	idiv   ecx
c0009dda:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009dde:	7d 09                	jge    c0009de9 <sinc_multichan_vari_process+0x124>
c0009de0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009de3:	85 c0                	test   eax,eax
c0009de5:	79 57                	jns    c0009e3e <sinc_multichan_vari_process+0x179>
c0009de7:	eb 70                	jmp    c0009e59 <sinc_multichan_vari_process+0x194>
c0009de9:	51                   	push   ecx
c0009dea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009dee:	57                   	push   edi
c0009def:	53                   	push   ebx
c0009df0:	e8 56 fd ff ff       	call   c0009b4b <prepare_data>
c0009df5:	83 c4 10             	add    esp,0x10
c0009df8:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009dfb:	85 c0                	test   eax,eax
c0009dfd:	0f 85 3c 01 00 00    	jne    c0009f3f <sinc_multichan_vari_process+0x27a>
c0009e03:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009e06:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009e09:	01 c8                	add    eax,ecx
c0009e0b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009e0e:	99                   	cdq    
c0009e0f:	f7 f9                	idiv   ecx
c0009e11:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009e15:	7c c9                	jl     c0009de0 <sinc_multichan_vari_process+0x11b>
c0009e17:	dd 04 24             	fld    QWORD PTR [esp]
c0009e1a:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009e1d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e21:	dd 1e                	fstp   QWORD PTR [esi]
c0009e23:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009e26:	99                   	cdq    
c0009e27:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e2a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009e2d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009e30:	99                   	cdq    
c0009e31:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e34:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009e37:	31 c0                	xor    eax,eax
c0009e39:	e9 01 01 00 00       	jmp    c0009f3f <sinc_multichan_vari_process+0x27a>
c0009e3e:	dd 04 24             	fld    QWORD PTR [esp]
c0009e41:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009e44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e48:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e4c:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009e50:	d9 c9                	fxch   st(1)
c0009e52:	de d9                	fcompp 
c0009e54:	df e0                	fnstsw ax
c0009e56:	9e                   	sahf   
c0009e57:	73 be                	jae    c0009e17 <sinc_multichan_vari_process+0x152>
c0009e59:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009e5d:	7e 2f                	jle    c0009e8e <sinc_multichan_vari_process+0x1c9>
c0009e5f:	dd 06                	fld    QWORD PTR [esi]
c0009e61:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009e64:	83 ec 10             	sub    esp,0x10
c0009e67:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e6a:	e8 c1 58 01 00       	call   c001f730 <fabs>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	dc 1d 80 10 02 c0    	fcomp  QWORD PTR ds:0xc0021080
c0009e78:	df e0                	fnstsw ax
c0009e7a:	9e                   	sahf   
c0009e7b:	76 11                	jbe    c0009e8e <sinc_multichan_vari_process+0x1c9>
c0009e7d:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009e80:	dc 26                	fsub   QWORD PTR [esi]
c0009e82:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009e85:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009e88:	dc 06                	fadd   QWORD PTR [esi]
c0009e8a:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009e8e:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009e91:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e95:	d9 e8                	fld1   
c0009e97:	d8 d9                	fcomp  st(1)
c0009e99:	df e0                	fnstsw ax
c0009e9b:	9e                   	sahf   
c0009e9c:	77 04                	ja     c0009ea2 <sinc_multichan_vari_process+0x1dd>
c0009e9e:	dd d8                	fstp   st(0)
c0009ea0:	d9 e8                	fld1   
c0009ea2:	de c9                	fmulp  st(1),st
c0009ea4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009ea8:	50                   	push   eax
c0009ea9:	50                   	push   eax
c0009eaa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009eae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009eb2:	e8 2a fc ff ff       	call   c0009ae1 <double_to_fp>
c0009eb7:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009ebb:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009ebf:	89 c5                	mov    ebp,eax
c0009ec1:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ec4:	e8 18 fc ff ff       	call   c0009ae1 <double_to_fp>
c0009ec9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009ecc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009ecf:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009ed2:	89 c1                	mov    ecx,eax
c0009ed4:	52                   	push   edx
c0009ed5:	89 d8                	mov    eax,ebx
c0009ed7:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009edb:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009ede:	52                   	push   edx
c0009edf:	52                   	push   edx
c0009ee0:	89 ea                	mov    edx,ebp
c0009ee2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ee5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009ee8:	e8 f9 f7 ff ff       	call   c00096e6 <calc_output_multi>
c0009eed:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009ef0:	d9 e8                	fld1   
c0009ef2:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009ef6:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009ef9:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009efd:	83 c4 10             	add    esp,0x10
c0009f00:	dd 14 24             	fst    QWORD PTR [esp]
c0009f03:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009f07:	e8 e8 fb ff ff       	call   c0009af4 <fmod_one>
c0009f0c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f0f:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f16:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f1a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009f1e:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f22:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f25:	e8 26 58 01 00       	call   c001f750 <lrint>
c0009f2a:	0f af e8             	imul   ebp,eax
c0009f2d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f31:	01 e8                	add    eax,ebp
c0009f33:	99                   	cdq    
c0009f34:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009f37:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009f3a:	e9 82 fe ff ff       	jmp    c0009dc1 <sinc_multichan_vari_process+0xfc>
c0009f3f:	83 c4 3c             	add    esp,0x3c
c0009f42:	5b                   	pop    ebx
c0009f43:	5e                   	pop    esi
c0009f44:	5f                   	pop    edi
c0009f45:	5d                   	pop    ebp
c0009f46:	c3                   	ret    

c0009f47 <sinc_hex_vari_process>:
c0009f47:	55                   	push   ebp
c0009f48:	b8 05 00 00 00       	mov    eax,0x5
c0009f4d:	57                   	push   edi
c0009f4e:	56                   	push   esi
c0009f4f:	53                   	push   ebx
c0009f50:	83 ec 3c             	sub    esp,0x3c
c0009f53:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009f57:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009f5b:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009f5e:	85 db                	test   ebx,ebx
c0009f60:	0f 84 56 02 00 00    	je     c000a1bc <sinc_hex_vari_process+0x275>
c0009f66:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009f69:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009f6c:	0f af d0             	imul   edx,eax
c0009f6f:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009f72:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009f76:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009f7d:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009f80:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009f87:	dd 06                	fld    QWORD PTR [esi]
c0009f89:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009f8d:	55                   	push   ebp
c0009f8e:	55                   	push   ebp
c0009f8f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f92:	e8 5b f0 ff ff       	call   c0008ff2 <is_bad_src_ratio>
c0009f97:	89 c2                	mov    edx,eax
c0009f99:	58                   	pop    eax
c0009f9a:	59                   	pop    ecx
c0009f9b:	b8 16 00 00 00       	mov    eax,0x16
c0009fa0:	85 d2                	test   edx,edx
c0009fa2:	0f 85 14 02 00 00    	jne    c000a1bc <sinc_hex_vari_process+0x275>
c0009fa8:	d9 05 90 10 02 c0    	fld    DWORD PTR ds:0xc0021090
c0009fae:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009fb1:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009fb4:	dd 06                	fld    QWORD PTR [esi]
c0009fb6:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009fb9:	d8 d1                	fcom   st(1)
c0009fbb:	df e0                	fnstsw ax
c0009fbd:	9e                   	sahf   
c0009fbe:	76 0f                	jbe    c0009fcf <sinc_hex_vari_process+0x88>
c0009fc0:	dd d8                	fstp   st(0)
c0009fc2:	d9 e8                	fld1   
c0009fc4:	d8 d9                	fcomp  st(1)
c0009fc6:	df e0                	fnstsw ax
c0009fc8:	9e                   	sahf   
c0009fc9:	77 0f                	ja     c0009fda <sinc_hex_vari_process+0x93>
c0009fcb:	dd d8                	fstp   st(0)
c0009fcd:	eb 11                	jmp    c0009fe0 <sinc_hex_vari_process+0x99>
c0009fcf:	dd d9                	fstp   st(1)
c0009fd1:	d9 e8                	fld1   
c0009fd3:	d8 d9                	fcomp  st(1)
c0009fd5:	df e0                	fnstsw ax
c0009fd7:	9e                   	sahf   
c0009fd8:	76 04                	jbe    c0009fde <sinc_hex_vari_process+0x97>
c0009fda:	de f9                	fdivp  st(1),st
c0009fdc:	eb 02                	jmp    c0009fe0 <sinc_hex_vari_process+0x99>
c0009fde:	dd d8                	fstp   st(0)
c0009fe0:	83 ec 10             	sub    esp,0x10
c0009fe3:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009fe6:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009fe9:	e8 62 57 01 00       	call   c001f750 <lrint>
c0009fee:	40                   	inc    eax
c0009fef:	0f af c5             	imul   eax,ebp
c0009ff2:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009ff5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ff9:	dd 14 24             	fst    QWORD PTR [esp]
c0009ffc:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a000:	e8 ef fa ff ff       	call   c0009af4 <fmod_one>
c000a005:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a008:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a00b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a00f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a013:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a017:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a01b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a01e:	e8 2d 57 01 00       	call   c001f750 <lrint>
c000a023:	d9 e8                	fld1   
c000a025:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a029:	0f af e8             	imul   ebp,eax
c000a02c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a030:	01 e8                	add    eax,ebp
c000a032:	99                   	cdq    
c000a033:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a036:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a039:	dc 05 f8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ef8
c000a03f:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a043:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a046:	83 c4 10             	add    esp,0x10
c000a049:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a04c:	7d 4b                	jge    c000a099 <sinc_hex_vari_process+0x152>
c000a04e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a051:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a054:	01 c8                	add    eax,ecx
c000a056:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a059:	99                   	cdq    
c000a05a:	f7 f9                	idiv   ecx
c000a05c:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a060:	7d 09                	jge    c000a06b <sinc_hex_vari_process+0x124>
c000a062:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a065:	85 c0                	test   eax,eax
c000a067:	79 57                	jns    c000a0c0 <sinc_hex_vari_process+0x179>
c000a069:	eb 70                	jmp    c000a0db <sinc_hex_vari_process+0x194>
c000a06b:	51                   	push   ecx
c000a06c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a070:	57                   	push   edi
c000a071:	53                   	push   ebx
c000a072:	e8 d4 fa ff ff       	call   c0009b4b <prepare_data>
c000a077:	83 c4 10             	add    esp,0x10
c000a07a:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a07d:	85 c0                	test   eax,eax
c000a07f:	0f 85 37 01 00 00    	jne    c000a1bc <sinc_hex_vari_process+0x275>
c000a085:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a088:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a08b:	01 c8                	add    eax,ecx
c000a08d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a090:	99                   	cdq    
c000a091:	f7 f9                	idiv   ecx
c000a093:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a097:	7c c9                	jl     c000a062 <sinc_hex_vari_process+0x11b>
c000a099:	dd 04 24             	fld    QWORD PTR [esp]
c000a09c:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a09f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a0a3:	dd 1e                	fstp   QWORD PTR [esi]
c000a0a5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a0a8:	99                   	cdq    
c000a0a9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0ac:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a0af:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a0b2:	99                   	cdq    
c000a0b3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0b6:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a0b9:	31 c0                	xor    eax,eax
c000a0bb:	e9 fc 00 00 00       	jmp    c000a1bc <sinc_hex_vari_process+0x275>
c000a0c0:	dd 04 24             	fld    QWORD PTR [esp]
c000a0c3:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a0c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0ca:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a0ce:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a0d2:	d9 c9                	fxch   st(1)
c000a0d4:	de d9                	fcompp 
c000a0d6:	df e0                	fnstsw ax
c000a0d8:	9e                   	sahf   
c000a0d9:	73 be                	jae    c000a099 <sinc_hex_vari_process+0x152>
c000a0db:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a0df:	7e 2f                	jle    c000a110 <sinc_hex_vari_process+0x1c9>
c000a0e1:	dd 06                	fld    QWORD PTR [esi]
c000a0e3:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a0e6:	83 ec 10             	sub    esp,0x10
c000a0e9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0ec:	e8 3f 56 01 00       	call   c001f730 <fabs>
c000a0f1:	83 c4 10             	add    esp,0x10
c000a0f4:	dc 1d 80 10 02 c0    	fcomp  QWORD PTR ds:0xc0021080
c000a0fa:	df e0                	fnstsw ax
c000a0fc:	9e                   	sahf   
c000a0fd:	76 11                	jbe    c000a110 <sinc_hex_vari_process+0x1c9>
c000a0ff:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a102:	dc 26                	fsub   QWORD PTR [esi]
c000a104:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a107:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a10a:	dc 06                	fadd   QWORD PTR [esi]
c000a10c:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a110:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a113:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a117:	d9 e8                	fld1   
c000a119:	d8 d9                	fcomp  st(1)
c000a11b:	df e0                	fnstsw ax
c000a11d:	9e                   	sahf   
c000a11e:	77 04                	ja     c000a124 <sinc_hex_vari_process+0x1dd>
c000a120:	dd d8                	fstp   st(0)
c000a122:	d9 e8                	fld1   
c000a124:	de c9                	fmulp  st(1),st
c000a126:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a12a:	50                   	push   eax
c000a12b:	50                   	push   eax
c000a12c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a130:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a134:	e8 a8 f9 ff ff       	call   c0009ae1 <double_to_fp>
c000a139:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a13d:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a141:	89 c5                	mov    ebp,eax
c000a143:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a146:	e8 96 f9 ff ff       	call   c0009ae1 <double_to_fp>
c000a14b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a14e:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a151:	83 c4 0c             	add    esp,0xc
c000a154:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a157:	89 c1                	mov    ecx,eax
c000a159:	52                   	push   edx
c000a15a:	89 d8                	mov    eax,ebx
c000a15c:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a160:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a163:	52                   	push   edx
c000a164:	52                   	push   edx
c000a165:	89 ea                	mov    edx,ebp
c000a167:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a16a:	e8 db f2 ff ff       	call   c000944a <calc_output_hex>
c000a16f:	d9 e8                	fld1   
c000a171:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a175:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a179:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a17d:	dd 14 24             	fst    QWORD PTR [esp]
c000a180:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a184:	e8 6b f9 ff ff       	call   c0009af4 <fmod_one>
c000a189:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a18c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a18f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a193:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a197:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a19b:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a19f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1a2:	e8 a9 55 01 00       	call   c001f750 <lrint>
c000a1a7:	0f af e8             	imul   ebp,eax
c000a1aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a1ae:	01 e8                	add    eax,ebp
c000a1b0:	99                   	cdq    
c000a1b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a1b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a1b7:	e9 87 fe ff ff       	jmp    c000a043 <sinc_hex_vari_process+0xfc>
c000a1bc:	83 c4 3c             	add    esp,0x3c
c000a1bf:	5b                   	pop    ebx
c000a1c0:	5e                   	pop    esi
c000a1c1:	5f                   	pop    edi
c000a1c2:	5d                   	pop    ebp
c000a1c3:	c3                   	ret    

c000a1c4 <sinc_quad_vari_process>:
c000a1c4:	55                   	push   ebp
c000a1c5:	b8 05 00 00 00       	mov    eax,0x5
c000a1ca:	57                   	push   edi
c000a1cb:	56                   	push   esi
c000a1cc:	53                   	push   ebx
c000a1cd:	83 ec 3c             	sub    esp,0x3c
c000a1d0:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a1d4:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a1d8:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a1db:	85 db                	test   ebx,ebx
c000a1dd:	0f 84 56 02 00 00    	je     c000a439 <sinc_quad_vari_process+0x275>
c000a1e3:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a1e6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a1e9:	0f af d0             	imul   edx,eax
c000a1ec:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a1ef:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a1f3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a1fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a1fd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a204:	dd 06                	fld    QWORD PTR [esi]
c000a206:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a20a:	55                   	push   ebp
c000a20b:	55                   	push   ebp
c000a20c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a20f:	e8 de ed ff ff       	call   c0008ff2 <is_bad_src_ratio>
c000a214:	89 c2                	mov    edx,eax
c000a216:	58                   	pop    eax
c000a217:	59                   	pop    ecx
c000a218:	b8 16 00 00 00       	mov    eax,0x16
c000a21d:	85 d2                	test   edx,edx
c000a21f:	0f 85 14 02 00 00    	jne    c000a439 <sinc_quad_vari_process+0x275>
c000a225:	d9 05 90 10 02 c0    	fld    DWORD PTR ds:0xc0021090
c000a22b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a22e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a231:	dd 06                	fld    QWORD PTR [esi]
c000a233:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a236:	d8 d1                	fcom   st(1)
c000a238:	df e0                	fnstsw ax
c000a23a:	9e                   	sahf   
c000a23b:	76 0f                	jbe    c000a24c <sinc_quad_vari_process+0x88>
c000a23d:	dd d8                	fstp   st(0)
c000a23f:	d9 e8                	fld1   
c000a241:	d8 d9                	fcomp  st(1)
c000a243:	df e0                	fnstsw ax
c000a245:	9e                   	sahf   
c000a246:	77 0f                	ja     c000a257 <sinc_quad_vari_process+0x93>
c000a248:	dd d8                	fstp   st(0)
c000a24a:	eb 11                	jmp    c000a25d <sinc_quad_vari_process+0x99>
c000a24c:	dd d9                	fstp   st(1)
c000a24e:	d9 e8                	fld1   
c000a250:	d8 d9                	fcomp  st(1)
c000a252:	df e0                	fnstsw ax
c000a254:	9e                   	sahf   
c000a255:	76 04                	jbe    c000a25b <sinc_quad_vari_process+0x97>
c000a257:	de f9                	fdivp  st(1),st
c000a259:	eb 02                	jmp    c000a25d <sinc_quad_vari_process+0x99>
c000a25b:	dd d8                	fstp   st(0)
c000a25d:	83 ec 10             	sub    esp,0x10
c000a260:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a263:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a266:	e8 e5 54 01 00       	call   c001f750 <lrint>
c000a26b:	40                   	inc    eax
c000a26c:	0f af c5             	imul   eax,ebp
c000a26f:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a272:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a276:	dd 14 24             	fst    QWORD PTR [esp]
c000a279:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a27d:	e8 72 f8 ff ff       	call   c0009af4 <fmod_one>
c000a282:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a285:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a288:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a28c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a290:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a294:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a298:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a29b:	e8 b0 54 01 00       	call   c001f750 <lrint>
c000a2a0:	d9 e8                	fld1   
c000a2a2:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a2a6:	0f af e8             	imul   ebp,eax
c000a2a9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a2ad:	01 e8                	add    eax,ebp
c000a2af:	99                   	cdq    
c000a2b0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a2b3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a2b6:	dc 05 f8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ef8
c000a2bc:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a2c0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a2c3:	83 c4 10             	add    esp,0x10
c000a2c6:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a2c9:	7d 4b                	jge    c000a316 <sinc_quad_vari_process+0x152>
c000a2cb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2ce:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2d1:	01 c8                	add    eax,ecx
c000a2d3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a2d6:	99                   	cdq    
c000a2d7:	f7 f9                	idiv   ecx
c000a2d9:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a2dd:	7d 09                	jge    c000a2e8 <sinc_quad_vari_process+0x124>
c000a2df:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a2e2:	85 c0                	test   eax,eax
c000a2e4:	79 57                	jns    c000a33d <sinc_quad_vari_process+0x179>
c000a2e6:	eb 70                	jmp    c000a358 <sinc_quad_vari_process+0x194>
c000a2e8:	51                   	push   ecx
c000a2e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a2ed:	57                   	push   edi
c000a2ee:	53                   	push   ebx
c000a2ef:	e8 57 f8 ff ff       	call   c0009b4b <prepare_data>
c000a2f4:	83 c4 10             	add    esp,0x10
c000a2f7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a2fa:	85 c0                	test   eax,eax
c000a2fc:	0f 85 37 01 00 00    	jne    c000a439 <sinc_quad_vari_process+0x275>
c000a302:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a305:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a308:	01 c8                	add    eax,ecx
c000a30a:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a30d:	99                   	cdq    
c000a30e:	f7 f9                	idiv   ecx
c000a310:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a314:	7c c9                	jl     c000a2df <sinc_quad_vari_process+0x11b>
c000a316:	dd 04 24             	fld    QWORD PTR [esp]
c000a319:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a31c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a320:	dd 1e                	fstp   QWORD PTR [esi]
c000a322:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a325:	99                   	cdq    
c000a326:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a329:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a32c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a32f:	99                   	cdq    
c000a330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a333:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a336:	31 c0                	xor    eax,eax
c000a338:	e9 fc 00 00 00       	jmp    c000a439 <sinc_quad_vari_process+0x275>
c000a33d:	dd 04 24             	fld    QWORD PTR [esp]
c000a340:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a343:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a347:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a34b:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a34f:	d9 c9                	fxch   st(1)
c000a351:	de d9                	fcompp 
c000a353:	df e0                	fnstsw ax
c000a355:	9e                   	sahf   
c000a356:	73 be                	jae    c000a316 <sinc_quad_vari_process+0x152>
c000a358:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a35c:	7e 2f                	jle    c000a38d <sinc_quad_vari_process+0x1c9>
c000a35e:	dd 06                	fld    QWORD PTR [esi]
c000a360:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a363:	83 ec 10             	sub    esp,0x10
c000a366:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a369:	e8 c2 53 01 00       	call   c001f730 <fabs>
c000a36e:	83 c4 10             	add    esp,0x10
c000a371:	dc 1d 80 10 02 c0    	fcomp  QWORD PTR ds:0xc0021080
c000a377:	df e0                	fnstsw ax
c000a379:	9e                   	sahf   
c000a37a:	76 11                	jbe    c000a38d <sinc_quad_vari_process+0x1c9>
c000a37c:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a37f:	dc 26                	fsub   QWORD PTR [esi]
c000a381:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a384:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a387:	dc 06                	fadd   QWORD PTR [esi]
c000a389:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a38d:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a390:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a394:	d9 e8                	fld1   
c000a396:	d8 d9                	fcomp  st(1)
c000a398:	df e0                	fnstsw ax
c000a39a:	9e                   	sahf   
c000a39b:	77 04                	ja     c000a3a1 <sinc_quad_vari_process+0x1dd>
c000a39d:	dd d8                	fstp   st(0)
c000a39f:	d9 e8                	fld1   
c000a3a1:	de c9                	fmulp  st(1),st
c000a3a3:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a3a7:	50                   	push   eax
c000a3a8:	50                   	push   eax
c000a3a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3b1:	e8 2b f7 ff ff       	call   c0009ae1 <double_to_fp>
c000a3b6:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a3ba:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a3be:	89 c5                	mov    ebp,eax
c000a3c0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3c3:	e8 19 f7 ff ff       	call   c0009ae1 <double_to_fp>
c000a3c8:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a3cb:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a3ce:	83 c4 0c             	add    esp,0xc
c000a3d1:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a3d4:	89 c1                	mov    ecx,eax
c000a3d6:	52                   	push   edx
c000a3d7:	89 d8                	mov    eax,ebx
c000a3d9:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a3dd:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a3e0:	52                   	push   edx
c000a3e1:	52                   	push   edx
c000a3e2:	89 ea                	mov    edx,ebp
c000a3e4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3e7:	e8 99 ee ff ff       	call   c0009285 <calc_output_quad>
c000a3ec:	d9 e8                	fld1   
c000a3ee:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a3f2:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a3f6:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a3fa:	dd 14 24             	fst    QWORD PTR [esp]
c000a3fd:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a401:	e8 ee f6 ff ff       	call   c0009af4 <fmod_one>
c000a406:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a409:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a40c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a410:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a414:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a418:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a41c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a41f:	e8 2c 53 01 00       	call   c001f750 <lrint>
c000a424:	0f af e8             	imul   ebp,eax
c000a427:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a42b:	01 e8                	add    eax,ebp
c000a42d:	99                   	cdq    
c000a42e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a431:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a434:	e9 87 fe ff ff       	jmp    c000a2c0 <sinc_quad_vari_process+0xfc>
c000a439:	83 c4 3c             	add    esp,0x3c
c000a43c:	5b                   	pop    ebx
c000a43d:	5e                   	pop    esi
c000a43e:	5f                   	pop    edi
c000a43f:	5d                   	pop    ebp
c000a440:	c3                   	ret    

c000a441 <sinc_stereo_vari_process>:
c000a441:	55                   	push   ebp
c000a442:	b8 05 00 00 00       	mov    eax,0x5
c000a447:	57                   	push   edi
c000a448:	56                   	push   esi
c000a449:	53                   	push   ebx
c000a44a:	83 ec 3c             	sub    esp,0x3c
c000a44d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a451:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a455:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a458:	85 db                	test   ebx,ebx
c000a45a:	0f 84 56 02 00 00    	je     c000a6b6 <sinc_stereo_vari_process+0x275>
c000a460:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a463:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a466:	0f af d0             	imul   edx,eax
c000a469:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a46c:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a470:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a477:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a47a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a481:	dd 06                	fld    QWORD PTR [esi]
c000a483:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a487:	55                   	push   ebp
c000a488:	55                   	push   ebp
c000a489:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a48c:	e8 61 eb ff ff       	call   c0008ff2 <is_bad_src_ratio>
c000a491:	89 c2                	mov    edx,eax
c000a493:	58                   	pop    eax
c000a494:	59                   	pop    ecx
c000a495:	b8 16 00 00 00       	mov    eax,0x16
c000a49a:	85 d2                	test   edx,edx
c000a49c:	0f 85 14 02 00 00    	jne    c000a6b6 <sinc_stereo_vari_process+0x275>
c000a4a2:	d9 05 90 10 02 c0    	fld    DWORD PTR ds:0xc0021090
c000a4a8:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a4ab:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a4ae:	dd 06                	fld    QWORD PTR [esi]
c000a4b0:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a4b3:	d8 d1                	fcom   st(1)
c000a4b5:	df e0                	fnstsw ax
c000a4b7:	9e                   	sahf   
c000a4b8:	76 0f                	jbe    c000a4c9 <sinc_stereo_vari_process+0x88>
c000a4ba:	dd d8                	fstp   st(0)
c000a4bc:	d9 e8                	fld1   
c000a4be:	d8 d9                	fcomp  st(1)
c000a4c0:	df e0                	fnstsw ax
c000a4c2:	9e                   	sahf   
c000a4c3:	77 0f                	ja     c000a4d4 <sinc_stereo_vari_process+0x93>
c000a4c5:	dd d8                	fstp   st(0)
c000a4c7:	eb 11                	jmp    c000a4da <sinc_stereo_vari_process+0x99>
c000a4c9:	dd d9                	fstp   st(1)
c000a4cb:	d9 e8                	fld1   
c000a4cd:	d8 d9                	fcomp  st(1)
c000a4cf:	df e0                	fnstsw ax
c000a4d1:	9e                   	sahf   
c000a4d2:	76 04                	jbe    c000a4d8 <sinc_stereo_vari_process+0x97>
c000a4d4:	de f9                	fdivp  st(1),st
c000a4d6:	eb 02                	jmp    c000a4da <sinc_stereo_vari_process+0x99>
c000a4d8:	dd d8                	fstp   st(0)
c000a4da:	83 ec 10             	sub    esp,0x10
c000a4dd:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4e0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a4e3:	e8 68 52 01 00       	call   c001f750 <lrint>
c000a4e8:	40                   	inc    eax
c000a4e9:	0f af c5             	imul   eax,ebp
c000a4ec:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a4ef:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4f3:	dd 14 24             	fst    QWORD PTR [esp]
c000a4f6:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a4fa:	e8 f5 f5 ff ff       	call   c0009af4 <fmod_one>
c000a4ff:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a502:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a505:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a509:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a50d:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a511:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a515:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a518:	e8 33 52 01 00       	call   c001f750 <lrint>
c000a51d:	d9 e8                	fld1   
c000a51f:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a523:	0f af e8             	imul   ebp,eax
c000a526:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a52a:	01 e8                	add    eax,ebp
c000a52c:	99                   	cdq    
c000a52d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a530:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a533:	dc 05 f8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ef8
c000a539:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a53d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a540:	83 c4 10             	add    esp,0x10
c000a543:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a546:	7d 4b                	jge    c000a593 <sinc_stereo_vari_process+0x152>
c000a548:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a54b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a54e:	01 c8                	add    eax,ecx
c000a550:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a553:	99                   	cdq    
c000a554:	f7 f9                	idiv   ecx
c000a556:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a55a:	7d 09                	jge    c000a565 <sinc_stereo_vari_process+0x124>
c000a55c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a55f:	85 c0                	test   eax,eax
c000a561:	79 57                	jns    c000a5ba <sinc_stereo_vari_process+0x179>
c000a563:	eb 70                	jmp    c000a5d5 <sinc_stereo_vari_process+0x194>
c000a565:	51                   	push   ecx
c000a566:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a56a:	57                   	push   edi
c000a56b:	53                   	push   ebx
c000a56c:	e8 da f5 ff ff       	call   c0009b4b <prepare_data>
c000a571:	83 c4 10             	add    esp,0x10
c000a574:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a577:	85 c0                	test   eax,eax
c000a579:	0f 85 37 01 00 00    	jne    c000a6b6 <sinc_stereo_vari_process+0x275>
c000a57f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a582:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a585:	01 c8                	add    eax,ecx
c000a587:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a58a:	99                   	cdq    
c000a58b:	f7 f9                	idiv   ecx
c000a58d:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a591:	7c c9                	jl     c000a55c <sinc_stereo_vari_process+0x11b>
c000a593:	dd 04 24             	fld    QWORD PTR [esp]
c000a596:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a599:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a59d:	dd 1e                	fstp   QWORD PTR [esi]
c000a59f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a5a2:	99                   	cdq    
c000a5a3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a5a6:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a5a9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a5ac:	99                   	cdq    
c000a5ad:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a5b0:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a5b3:	31 c0                	xor    eax,eax
c000a5b5:	e9 fc 00 00 00       	jmp    c000a6b6 <sinc_stereo_vari_process+0x275>
c000a5ba:	dd 04 24             	fld    QWORD PTR [esp]
c000a5bd:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a5c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5c4:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a5c8:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a5cc:	d9 c9                	fxch   st(1)
c000a5ce:	de d9                	fcompp 
c000a5d0:	df e0                	fnstsw ax
c000a5d2:	9e                   	sahf   
c000a5d3:	73 be                	jae    c000a593 <sinc_stereo_vari_process+0x152>
c000a5d5:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a5d9:	7e 2f                	jle    c000a60a <sinc_stereo_vari_process+0x1c9>
c000a5db:	dd 06                	fld    QWORD PTR [esi]
c000a5dd:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a5e0:	83 ec 10             	sub    esp,0x10
c000a5e3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5e6:	e8 45 51 01 00       	call   c001f730 <fabs>
c000a5eb:	83 c4 10             	add    esp,0x10
c000a5ee:	dc 1d 80 10 02 c0    	fcomp  QWORD PTR ds:0xc0021080
c000a5f4:	df e0                	fnstsw ax
c000a5f6:	9e                   	sahf   
c000a5f7:	76 11                	jbe    c000a60a <sinc_stereo_vari_process+0x1c9>
c000a5f9:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a5fc:	dc 26                	fsub   QWORD PTR [esi]
c000a5fe:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a601:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a604:	dc 06                	fadd   QWORD PTR [esi]
c000a606:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a60a:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a60d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a611:	d9 e8                	fld1   
c000a613:	d8 d9                	fcomp  st(1)
c000a615:	df e0                	fnstsw ax
c000a617:	9e                   	sahf   
c000a618:	77 04                	ja     c000a61e <sinc_stereo_vari_process+0x1dd>
c000a61a:	dd d8                	fstp   st(0)
c000a61c:	d9 e8                	fld1   
c000a61e:	de c9                	fmulp  st(1),st
c000a620:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a624:	50                   	push   eax
c000a625:	50                   	push   eax
c000a626:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a62a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a62e:	e8 ae f4 ff ff       	call   c0009ae1 <double_to_fp>
c000a633:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a637:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a63b:	89 c5                	mov    ebp,eax
c000a63d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a640:	e8 9c f4 ff ff       	call   c0009ae1 <double_to_fp>
c000a645:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a648:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a64b:	83 c4 0c             	add    esp,0xc
c000a64e:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a651:	89 c1                	mov    ecx,eax
c000a653:	52                   	push   edx
c000a654:	89 d8                	mov    eax,ebx
c000a656:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a65a:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a65d:	52                   	push   edx
c000a65e:	52                   	push   edx
c000a65f:	89 ea                	mov    edx,ebp
c000a661:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a664:	e8 da ea ff ff       	call   c0009143 <calc_output_stereo>
c000a669:	d9 e8                	fld1   
c000a66b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a66f:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a673:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a677:	dd 14 24             	fst    QWORD PTR [esp]
c000a67a:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a67e:	e8 71 f4 ff ff       	call   c0009af4 <fmod_one>
c000a683:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a686:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a689:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a68d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a691:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a695:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a699:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a69c:	e8 af 50 01 00       	call   c001f750 <lrint>
c000a6a1:	0f af e8             	imul   ebp,eax
c000a6a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a6a8:	01 e8                	add    eax,ebp
c000a6aa:	99                   	cdq    
c000a6ab:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a6ae:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a6b1:	e9 87 fe ff ff       	jmp    c000a53d <sinc_stereo_vari_process+0xfc>
c000a6b6:	83 c4 3c             	add    esp,0x3c
c000a6b9:	5b                   	pop    ebx
c000a6ba:	5e                   	pop    esi
c000a6bb:	5f                   	pop    edi
c000a6bc:	5d                   	pop    ebp
c000a6bd:	c3                   	ret    

c000a6be <sinc_mono_vari_process>:
c000a6be:	55                   	push   ebp
c000a6bf:	b8 05 00 00 00       	mov    eax,0x5
c000a6c4:	57                   	push   edi
c000a6c5:	56                   	push   esi
c000a6c6:	53                   	push   ebx
c000a6c7:	83 ec 3c             	sub    esp,0x3c
c000a6ca:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a6ce:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a6d2:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a6d5:	85 db                	test   ebx,ebx
c000a6d7:	0f 84 55 02 00 00    	je     c000a932 <sinc_mono_vari_process+0x274>
c000a6dd:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a6e0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6e3:	0f af d0             	imul   edx,eax
c000a6e6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a6e9:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a6ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a6f4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a6f7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a6fe:	dd 06                	fld    QWORD PTR [esi]
c000a700:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a704:	51                   	push   ecx
c000a705:	51                   	push   ecx
c000a706:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a709:	e8 e4 e8 ff ff       	call   c0008ff2 <is_bad_src_ratio>
c000a70e:	5d                   	pop    ebp
c000a70f:	89 c2                	mov    edx,eax
c000a711:	58                   	pop    eax
c000a712:	85 d2                	test   edx,edx
c000a714:	b8 16 00 00 00       	mov    eax,0x16
c000a719:	0f 85 13 02 00 00    	jne    c000a932 <sinc_mono_vari_process+0x274>
c000a71f:	d9 05 90 10 02 c0    	fld    DWORD PTR ds:0xc0021090
c000a725:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a728:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a72b:	dd 06                	fld    QWORD PTR [esi]
c000a72d:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a730:	d8 d1                	fcom   st(1)
c000a732:	df e0                	fnstsw ax
c000a734:	9e                   	sahf   
c000a735:	76 0f                	jbe    c000a746 <sinc_mono_vari_process+0x88>
c000a737:	dd d8                	fstp   st(0)
c000a739:	d9 e8                	fld1   
c000a73b:	d8 d9                	fcomp  st(1)
c000a73d:	df e0                	fnstsw ax
c000a73f:	9e                   	sahf   
c000a740:	77 0f                	ja     c000a751 <sinc_mono_vari_process+0x93>
c000a742:	dd d8                	fstp   st(0)
c000a744:	eb 11                	jmp    c000a757 <sinc_mono_vari_process+0x99>
c000a746:	dd d9                	fstp   st(1)
c000a748:	d9 e8                	fld1   
c000a74a:	d8 d9                	fcomp  st(1)
c000a74c:	df e0                	fnstsw ax
c000a74e:	9e                   	sahf   
c000a74f:	76 04                	jbe    c000a755 <sinc_mono_vari_process+0x97>
c000a751:	de f9                	fdivp  st(1),st
c000a753:	eb 02                	jmp    c000a757 <sinc_mono_vari_process+0x99>
c000a755:	dd d8                	fstp   st(0)
c000a757:	83 ec 10             	sub    esp,0x10
c000a75a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a75d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a760:	e8 eb 4f 01 00       	call   c001f750 <lrint>
c000a765:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a768:	40                   	inc    eax
c000a769:	dd 14 24             	fst    QWORD PTR [esp]
c000a76c:	0f af e8             	imul   ebp,eax
c000a76f:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a773:	e8 7c f3 ff ff       	call   c0009af4 <fmod_one>
c000a778:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a77b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a77f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a782:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a786:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a78a:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a78e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a792:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a795:	e8 b6 4f 01 00       	call   c001f750 <lrint>
c000a79a:	d9 e8                	fld1   
c000a79c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a7a0:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a7a5:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a7a9:	99                   	cdq    
c000a7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a7b0:	dc 05 f8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ef8
c000a7b6:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a7ba:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a7c3:	7d 44                	jge    c000a809 <sinc_mono_vari_process+0x14b>
c000a7c5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7c8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7cb:	01 c8                	add    eax,ecx
c000a7cd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7d0:	99                   	cdq    
c000a7d1:	f7 f9                	idiv   ecx
c000a7d3:	39 d5                	cmp    ebp,edx
c000a7d5:	7d 09                	jge    c000a7e0 <sinc_mono_vari_process+0x122>
c000a7d7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a7da:	85 c0                	test   eax,eax
c000a7dc:	79 52                	jns    c000a830 <sinc_mono_vari_process+0x172>
c000a7de:	eb 6b                	jmp    c000a84b <sinc_mono_vari_process+0x18d>
c000a7e0:	52                   	push   edx
c000a7e1:	55                   	push   ebp
c000a7e2:	57                   	push   edi
c000a7e3:	53                   	push   ebx
c000a7e4:	e8 62 f3 ff ff       	call   c0009b4b <prepare_data>
c000a7e9:	83 c4 10             	add    esp,0x10
c000a7ec:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a7ef:	85 c0                	test   eax,eax
c000a7f1:	0f 85 3b 01 00 00    	jne    c000a932 <sinc_mono_vari_process+0x274>
c000a7f7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7fa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7fd:	01 c8                	add    eax,ecx
c000a7ff:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a802:	99                   	cdq    
c000a803:	f7 f9                	idiv   ecx
c000a805:	39 d5                	cmp    ebp,edx
c000a807:	7c ce                	jl     c000a7d7 <sinc_mono_vari_process+0x119>
c000a809:	dd 04 24             	fld    QWORD PTR [esp]
c000a80c:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a80f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a813:	dd 1e                	fstp   QWORD PTR [esi]
c000a815:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a818:	99                   	cdq    
c000a819:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a81c:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a81f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a822:	99                   	cdq    
c000a823:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a826:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a829:	31 c0                	xor    eax,eax
c000a82b:	e9 02 01 00 00       	jmp    c000a932 <sinc_mono_vari_process+0x274>
c000a830:	dd 04 24             	fld    QWORD PTR [esp]
c000a833:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a836:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a83a:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a83e:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a842:	d9 c9                	fxch   st(1)
c000a844:	de d9                	fcompp 
c000a846:	df e0                	fnstsw ax
c000a848:	9e                   	sahf   
c000a849:	77 be                	ja     c000a809 <sinc_mono_vari_process+0x14b>
c000a84b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a84f:	7e 2f                	jle    c000a880 <sinc_mono_vari_process+0x1c2>
c000a851:	dd 06                	fld    QWORD PTR [esi]
c000a853:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a856:	83 ec 10             	sub    esp,0x10
c000a859:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a85c:	e8 cf 4e 01 00       	call   c001f730 <fabs>
c000a861:	83 c4 10             	add    esp,0x10
c000a864:	dc 1d 80 10 02 c0    	fcomp  QWORD PTR ds:0xc0021080
c000a86a:	df e0                	fnstsw ax
c000a86c:	9e                   	sahf   
c000a86d:	76 11                	jbe    c000a880 <sinc_mono_vari_process+0x1c2>
c000a86f:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a872:	dc 26                	fsub   QWORD PTR [esi]
c000a874:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a877:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a87a:	dc 06                	fadd   QWORD PTR [esi]
c000a87c:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a880:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a883:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a887:	d9 e8                	fld1   
c000a889:	d8 d9                	fcomp  st(1)
c000a88b:	df e0                	fnstsw ax
c000a88d:	9e                   	sahf   
c000a88e:	77 04                	ja     c000a894 <sinc_mono_vari_process+0x1d6>
c000a890:	dd d8                	fstp   st(0)
c000a892:	d9 e8                	fld1   
c000a894:	de c9                	fmulp  st(1),st
c000a896:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a89a:	50                   	push   eax
c000a89b:	50                   	push   eax
c000a89c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8a4:	e8 38 f2 ff ff       	call   c0009ae1 <double_to_fp>
c000a8a9:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a8ad:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a8b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a8b5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8b8:	e8 24 f2 ff ff       	call   c0009ae1 <double_to_fp>
c000a8bd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a8c1:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a8c5:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a8c8:	89 c1                	mov    ecx,eax
c000a8ca:	89 d8                	mov    eax,ebx
c000a8cc:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a8d0:	e8 89 e7 ff ff       	call   c000905e <calc_output_single>
c000a8d5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a8d8:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a8dc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a8df:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a8e2:	d9 e8                	fld1   
c000a8e4:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a8e8:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a8eb:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a8ef:	dd 14 24             	fst    QWORD PTR [esp]
c000a8f2:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a8f6:	e8 f9 f1 ff ff       	call   c0009af4 <fmod_one>
c000a8fb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a8fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a902:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a905:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a909:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a90d:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a911:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a915:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a918:	e8 33 4e 01 00       	call   c001f750 <lrint>
c000a91d:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a922:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a926:	99                   	cdq    
c000a927:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a92a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a92d:	e9 88 fe ff ff       	jmp    c000a7ba <sinc_mono_vari_process+0xfc>
c000a932:	83 c4 3c             	add    esp,0x3c
c000a935:	5b                   	pop    ebx
c000a936:	5e                   	pop    esi
c000a937:	5f                   	pop    edi
c000a938:	5d                   	pop    ebp
c000a939:	c3                   	ret    

c000a93a <sinc_get_name>:
c000a93a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a93e:	31 c0                	xor    eax,eax
c000a940:	83 fa 02             	cmp    edx,0x2
c000a943:	77 07                	ja     c000a94c <sinc_get_name+0x12>
c000a945:	8b 04 95 60 0f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf0a0]
c000a94c:	c3                   	ret    

c000a94d <sinc_get_description>:
c000a94d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a951:	31 c0                	xor    eax,eax
c000a953:	83 fa 02             	cmp    edx,0x2
c000a956:	77 07                	ja     c000a95f <sinc_get_description+0x12>
c000a958:	8b 04 95 54 0f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf0ac]
c000a95f:	c3                   	ret    

c000a960 <sinc_set_converter>:
c000a960:	53                   	push   ebx
c000a961:	81 ec 58 08 00 00    	sub    esp,0x858
c000a967:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a96e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a971:	85 c0                	test   eax,eax
c000a973:	74 13                	je     c000a988 <sinc_set_converter+0x28>
c000a975:	83 ec 0c             	sub    esp,0xc
c000a978:	50                   	push   eax
c000a979:	e8 7d 16 00 00       	call   c000bffb <free>
c000a97e:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a985:	83 c4 10             	add    esp,0x10
c000a988:	50                   	push   eax
c000a989:	68 44 08 00 00       	push   0x844
c000a98e:	6a 00                	push   0x0
c000a990:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a994:	50                   	push   eax
c000a995:	e8 33 5d ff ff       	call   c00006cd <memset>
c000a99a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a99d:	83 c4 10             	add    esp,0x10
c000a9a0:	b8 0b 00 00 00       	mov    eax,0xb
c000a9a5:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a9ab:	7f 6e                	jg     c000aa1b <sinc_set_converter+0xbb>
c000a9ad:	83 fa 01             	cmp    edx,0x1
c000a9b0:	75 10                	jne    c000a9c2 <sinc_set_converter+0x62>
c000a9b2:	c7 43 24 be a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a6be
c000a9b9:	c7 43 20 be a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a6be
c000a9c0:	eb 4d                	jmp    c000aa0f <sinc_set_converter+0xaf>
c000a9c2:	83 fa 02             	cmp    edx,0x2
c000a9c5:	75 10                	jne    c000a9d7 <sinc_set_converter+0x77>
c000a9c7:	c7 43 24 41 a4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a441
c000a9ce:	c7 43 20 41 a4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a441
c000a9d5:	eb 38                	jmp    c000aa0f <sinc_set_converter+0xaf>
c000a9d7:	83 fa 04             	cmp    edx,0x4
c000a9da:	75 10                	jne    c000a9ec <sinc_set_converter+0x8c>
c000a9dc:	c7 43 24 c4 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a1c4
c000a9e3:	c7 43 20 c4 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a1c4
c000a9ea:	eb 23                	jmp    c000aa0f <sinc_set_converter+0xaf>
c000a9ec:	83 fa 06             	cmp    edx,0x6
c000a9ef:	75 10                	jne    c000aa01 <sinc_set_converter+0xa1>
c000a9f1:	c7 43 24 47 9f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009f47
c000a9f8:	c7 43 20 47 9f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009f47
c000a9ff:	eb 0e                	jmp    c000aa0f <sinc_set_converter+0xaf>
c000aa01:	c7 43 24 c5 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009cc5
c000aa08:	c7 43 20 c5 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009cc5
c000aa0f:	c7 43 28 83 96 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009683
c000aa16:	b8 0a 00 00 00       	mov    eax,0xa
c000aa1b:	81 c4 58 08 00 00    	add    esp,0x858
c000aa21:	5b                   	pop    ebx
c000aa22:	c3                   	ret    

c000aa23 <is_bad_src_ratio>:
c000aa23:	83 ec 0c             	sub    esp,0xc
c000aa26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa31:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa35:	dd 04 24             	fld    QWORD PTR [esp]
c000aa38:	dd 05 80 0e 02 c0    	fld    QWORD PTR ds:0xc0020e80
c000aa3e:	de d9                	fcompp 
c000aa40:	df e0                	fnstsw ax
c000aa42:	f6 c4 45             	test   ah,0x45
c000aa45:	74 10                	je     c000aa57 <is_bad_src_ratio+0x34>
c000aa47:	dd 04 24             	fld    QWORD PTR [esp]
c000aa4a:	dc 1d 88 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e88
c000aa50:	df e0                	fnstsw ax
c000aa52:	f6 c4 45             	test   ah,0x45
c000aa55:	75 07                	jne    c000aa5e <is_bad_src_ratio+0x3b>
c000aa57:	b8 01 00 00 00       	mov    eax,0x1
c000aa5c:	eb 05                	jmp    c000aa63 <is_bad_src_ratio+0x40>
c000aa5e:	b8 00 00 00 00       	mov    eax,0x0
c000aa63:	83 c4 0c             	add    esp,0xc
c000aa66:	c3                   	ret    

c000aa67 <fmod_one>:
c000aa67:	83 ec 2c             	sub    esp,0x2c
c000aa6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa6e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa72:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aa76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa7a:	83 ec 08             	sub    esp,0x8
c000aa7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa85:	e8 c6 4c 01 00       	call   c001f750 <lrint>
c000aa8a:	83 c4 10             	add    esp,0x10
c000aa8d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa91:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000aa95:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa99:	de e1                	fsubrp st(1),st
c000aa9b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aa9f:	d9 ee                	fldz   
c000aaa1:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aaa5:	df e0                	fnstsw ax
c000aaa7:	f6 c4 45             	test   ah,0x45
c000aaaa:	75 0a                	jne    c000aab6 <fmod_one+0x4f>
c000aaac:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aab0:	d9 e8                	fld1   
c000aab2:	de c1                	faddp  st(1),st
c000aab4:	eb 04                	jmp    c000aaba <fmod_one+0x53>
c000aab6:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aaba:	83 c4 2c             	add    esp,0x2c
c000aabd:	c3                   	ret    

c000aabe <zoh_vari_process>:
c000aabe:	55                   	push   ebp
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	53                   	push   ebx
c000aac2:	83 ec 2c             	sub    esp,0x2c
c000aac5:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aac9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aacd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aad5:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aad9:	0f 8e 30 02 00 00    	jle    c000ad0f <zoh_vari_process+0x251>
c000aadf:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aae2:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aaea:	85 db                	test   ebx,ebx
c000aaec:	0f 84 1d 02 00 00    	je     c000ad0f <zoh_vari_process+0x251>
c000aaf2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aaf5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aaf9:	74 19                	je     c000ab14 <zoh_vari_process+0x56>
c000aafb:	31 d2                	xor    edx,edx
c000aafd:	39 c2                	cmp    edx,eax
c000aaff:	7d 0c                	jge    c000ab0d <zoh_vari_process+0x4f>
c000ab01:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ab03:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000ab06:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ab0a:	42                   	inc    edx
c000ab0b:	eb f0                	jmp    c000aafd <zoh_vari_process+0x3f>
c000ab0d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ab14:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ab17:	0f af d0             	imul   edx,eax
c000ab1a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ab1d:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ab21:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ab28:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ab2b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ab32:	dd 07                	fld    QWORD PTR [edi]
c000ab34:	dd 14 24             	fst    QWORD PTR [esp]
c000ab37:	50                   	push   eax
c000ab38:	50                   	push   eax
c000ab39:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab3c:	e8 e2 fe ff ff       	call   c000aa23 <is_bad_src_ratio>
c000ab41:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ab45:	5a                   	pop    edx
c000ab46:	59                   	pop    ecx
c000ab47:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000ab4c:	0f 85 b5 01 00 00    	jne    c000ad07 <zoh_vari_process+0x249>
c000ab52:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000ab55:	d9 e8                	fld1   
c000ab57:	d8 d1                	fcom   st(1)
c000ab59:	df e0                	fnstsw ax
c000ab5b:	9e                   	sahf   
c000ab5c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000ab60:	0f 86 83 00 00 00    	jbe    c000abe9 <zoh_vari_process+0x12b>
c000ab66:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab69:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab6c:	7d 7b                	jge    c000abe9 <zoh_vari_process+0x12b>
c000ab6e:	d9 c0                	fld    st(0)
c000ab70:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ab73:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000ab76:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000ab79:	df e0                	fnstsw ax
c000ab7b:	9e                   	sahf   
c000ab7c:	73 6b                	jae    c000abe9 <zoh_vari_process+0x12b>
c000ab7e:	85 d2                	test   edx,edx
c000ab80:	7e 36                	jle    c000abb8 <zoh_vari_process+0xfa>
c000ab82:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ab86:	dd 07                	fld    QWORD PTR [edi]
c000ab88:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ab8b:	83 ec 10             	sub    esp,0x10
c000ab8e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab91:	e8 9a 4b 01 00       	call   c001f730 <fabs>
c000ab96:	83 c4 10             	add    esp,0x10
c000ab99:	dc 1d f8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ef8
c000ab9f:	df e0                	fnstsw ax
c000aba1:	9e                   	sahf   
c000aba2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aba6:	76 10                	jbe    c000abb8 <zoh_vari_process+0xfa>
c000aba8:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000abab:	dc 27                	fsub   QWORD PTR [edi]
c000abad:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000abb0:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000abb3:	dc 07                	fadd   QWORD PTR [edi]
c000abb5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abb8:	31 c0                	xor    eax,eax
c000abba:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000abbd:	7e 13                	jle    c000abd2 <zoh_vari_process+0x114>
c000abbf:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000abc3:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000abc6:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000abc9:	40                   	inc    eax
c000abca:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000abcd:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000abd0:	eb e8                	jmp    c000abba <zoh_vari_process+0xfc>
c000abd2:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000abd6:	dc 34 24             	fdiv   QWORD PTR [esp]
c000abd9:	de c1                	faddp  st(1),st
c000abdb:	e9 75 ff ff ff       	jmp    c000ab55 <zoh_vari_process+0x97>
c000abe0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000abe4:	dc 34 24             	fdiv   QWORD PTR [esp]
c000abe7:	de c1                	faddp  st(1),st
c000abe9:	83 ec 10             	sub    esp,0x10
c000abec:	dd 14 24             	fst    QWORD PTR [esp]
c000abef:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000abf3:	e8 6f fe ff ff       	call   c000aa67 <fmod_one>
c000abf8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000abfb:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000abff:	d8 e1                	fsub   st,st(1)
c000ac01:	d9 c9                	fxch   st(1)
c000ac03:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ac07:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac0a:	e8 41 4b 01 00       	call   c001f750 <lrint>
c000ac0f:	83 c4 10             	add    esp,0x10
c000ac12:	0f af e8             	imul   ebp,eax
c000ac15:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ac18:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ac1b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac1f:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ac22:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ac25:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ac28:	0f 8d 80 00 00 00    	jge    c000acae <zoh_vari_process+0x1f0>
c000ac2e:	d9 c0                	fld    st(0)
c000ac30:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ac33:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ac37:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000ac3b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ac3f:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000ac43:	de d9                	fcompp 
c000ac45:	df e0                	fnstsw ax
c000ac47:	9e                   	sahf   
c000ac48:	72 64                	jb     c000acae <zoh_vari_process+0x1f0>
c000ac4a:	85 d2                	test   edx,edx
c000ac4c:	7e 36                	jle    c000ac84 <zoh_vari_process+0x1c6>
c000ac4e:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ac52:	dd 07                	fld    QWORD PTR [edi]
c000ac54:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ac57:	83 ec 10             	sub    esp,0x10
c000ac5a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac5d:	e8 ce 4a 01 00       	call   c001f730 <fabs>
c000ac62:	83 c4 10             	add    esp,0x10
c000ac65:	dc 1d f8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ef8
c000ac6b:	df e0                	fnstsw ax
c000ac6d:	9e                   	sahf   
c000ac6e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac72:	76 10                	jbe    c000ac84 <zoh_vari_process+0x1c6>
c000ac74:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ac77:	dc 27                	fsub   QWORD PTR [edi]
c000ac79:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ac7c:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ac7f:	dc 07                	fadd   QWORD PTR [edi]
c000ac81:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac84:	31 d2                	xor    edx,edx
c000ac86:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ac89:	39 d0                	cmp    eax,edx
c000ac8b:	0f 8e 4f ff ff ff    	jle    c000abe0 <zoh_vari_process+0x122>
c000ac91:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ac94:	29 c1                	sub    ecx,eax
c000ac96:	89 c8                	mov    eax,ecx
c000ac98:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac9a:	01 d0                	add    eax,edx
c000ac9c:	42                   	inc    edx
c000ac9d:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000aca0:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000aca3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000aca6:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000aca9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000acac:	eb d8                	jmp    c000ac86 <zoh_vari_process+0x1c8>
c000acae:	39 e9                	cmp    ecx,ebp
c000acb0:	7d 13                	jge    c000acc5 <zoh_vari_process+0x207>
c000acb2:	89 e8                	mov    eax,ebp
c000acb4:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000acb7:	29 c8                	sub    eax,ecx
c000acb9:	99                   	cdq    
c000acba:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acbd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acc1:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000acc5:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000acc8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000accb:	85 c0                	test   eax,eax
c000accd:	7f 1b                	jg     c000acea <zoh_vari_process+0x22c>
c000accf:	dd 04 24             	fld    QWORD PTR [esp]
c000acd2:	dd 1f                	fstp   QWORD PTR [edi]
c000acd4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000acd7:	99                   	cdq    
c000acd8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acdb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000acde:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ace1:	99                   	cdq    
c000ace2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ace5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000ace8:	eb 25                	jmp    c000ad0f <zoh_vari_process+0x251>
c000acea:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000aced:	31 d2                	xor    edx,edx
c000acef:	29 e8                	sub    eax,ebp
c000acf1:	c1 e0 02             	shl    eax,0x2
c000acf4:	39 d5                	cmp    ebp,edx
c000acf6:	7e d7                	jle    c000accf <zoh_vari_process+0x211>
c000acf8:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000acfa:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000acfd:	83 c0 04             	add    eax,0x4
c000ad00:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ad04:	42                   	inc    edx
c000ad05:	eb ed                	jmp    c000acf4 <zoh_vari_process+0x236>
c000ad07:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ad0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ad13:	83 c4 2c             	add    esp,0x2c
c000ad16:	5b                   	pop    ebx
c000ad17:	5e                   	pop    esi
c000ad18:	5f                   	pop    edi
c000ad19:	5d                   	pop    ebp
c000ad1a:	c3                   	ret    

c000ad1b <zoh_reset>:
c000ad1b:	83 ec 0c             	sub    esp,0xc
c000ad1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad22:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ad25:	85 c0                	test   eax,eax
c000ad27:	74 20                	je     c000ad49 <zoh_reset+0x2e>
c000ad29:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ad2c:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c000ad33:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ad36:	51                   	push   ecx
c000ad37:	c1 e2 02             	shl    edx,0x2
c000ad3a:	83 c0 1c             	add    eax,0x1c
c000ad3d:	52                   	push   edx
c000ad3e:	6a 00                	push   0x0
c000ad40:	50                   	push   eax
c000ad41:	e8 87 59 ff ff       	call   c00006cd <memset>
c000ad46:	83 c4 10             	add    esp,0x10
c000ad49:	83 c4 0c             	add    esp,0xc
c000ad4c:	c3                   	ret    

c000ad4d <zoh_get_name>:
c000ad4d:	31 c0                	xor    eax,eax
c000ad4f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad54:	75 05                	jne    c000ad5b <zoh_get_name+0xe>
c000ad56:	b8 94 10 02 c0       	mov    eax,0xc0021094
c000ad5b:	c3                   	ret    

c000ad5c <zoh_get_description>:
c000ad5c:	31 c0                	xor    eax,eax
c000ad5e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad63:	75 05                	jne    c000ad6a <zoh_get_description+0xe>
c000ad65:	b8 a5 10 02 c0       	mov    eax,0xc00210a5
c000ad6a:	c3                   	ret    

c000ad6b <zoh_set_converter>:
c000ad6b:	53                   	push   ebx
c000ad6c:	b8 0a 00 00 00       	mov    eax,0xa
c000ad71:	83 ec 08             	sub    esp,0x8
c000ad74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad78:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000ad7d:	75 6e                	jne    c000aded <zoh_set_converter+0x82>
c000ad7f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000ad82:	85 c0                	test   eax,eax
c000ad84:	74 13                	je     c000ad99 <zoh_set_converter+0x2e>
c000ad86:	83 ec 0c             	sub    esp,0xc
c000ad89:	50                   	push   eax
c000ad8a:	e8 6c 12 00 00       	call   c000bffb <free>
c000ad8f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ad96:	83 c4 10             	add    esp,0x10
c000ad99:	50                   	push   eax
c000ad9a:	50                   	push   eax
c000ad9b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad9e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ada5:	50                   	push   eax
c000ada6:	6a 01                	push   0x1
c000ada8:	e8 6e 12 00 00       	call   c000c01b <calloc>
c000adad:	89 c2                	mov    edx,eax
c000adaf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000adb2:	83 c4 10             	add    esp,0x10
c000adb5:	b8 01 00 00 00       	mov    eax,0x1
c000adba:	85 d2                	test   edx,edx
c000adbc:	74 2f                	je     c000aded <zoh_set_converter+0x82>
c000adbe:	83 ec 0c             	sub    esp,0xc
c000adc1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000adc4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000adc7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000adcd:	c7 43 24 be aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aabe
c000add4:	c7 43 20 be aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aabe
c000addb:	c7 43 28 1b ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad1b
c000ade2:	53                   	push   ebx
c000ade3:	e8 33 ff ff ff       	call   c000ad1b <zoh_reset>
c000ade8:	83 c4 10             	add    esp,0x10
c000adeb:	31 c0                	xor    eax,eax
c000aded:	83 c4 08             	add    esp,0x8
c000adf0:	5b                   	pop    ebx
c000adf1:	c3                   	ret    

c000adf2 <Computer::close(int, int, void*)>:
c000adf2:	57                   	push   edi
c000adf3:	56                   	push   esi
c000adf4:	53                   	push   ebx
c000adf5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000adf9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000adfd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ae01:	83 ec 0c             	sub    esp,0xc
c000ae04:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ae0a:	50                   	push   eax
c000ae0b:	e8 98 59 00 00       	call   c00107a8 <Device::closeAll()>
c000ae10:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ae16:	83 c4 10             	add    esp,0x10
c000ae19:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae1b:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ae1f:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ae27:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ae2b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae2f:	5b                   	pop    ebx
c000ae30:	5e                   	pop    esi
c000ae31:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ae34:	5f                   	pop    edi
c000ae35:	ff e0                	jmp    eax
c000ae37:	90                   	nop

c000ae38 <Computer::Computer()>:
c000ae38:	83 ec 0c             	sub    esp,0xc
c000ae3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae3f:	83 ec 08             	sub    esp,0x8
c000ae42:	68 dc 10 02 c0       	push   0xc00210dc
c000ae47:	50                   	push   eax
c000ae48:	e8 d5 59 00 00       	call   c0010822 <Device::Device(char const*)>
c000ae4d:	83 c4 10             	add    esp,0x10
c000ae50:	ba a4 12 02 c0       	mov    edx,0xc00212a4
c000ae55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae59:	89 10                	mov    DWORD PTR [eax],edx
c000ae5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae5f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ae69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae6d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ae77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000ae81:	83 ca 04             	or     edx,0x4
c000ae84:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000ae8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae8e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae94:	31 d2                	xor    edx,edx
c000ae96:	88 c2                	mov    dl,al
c000ae98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae9c:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000aea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aead:	31 d2                	xor    edx,edx
c000aeaf:	88 c2                	mov    dl,al
c000aeb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000aeba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aebe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aec4:	8d 50 01             	lea    edx,[eax+0x1]
c000aec7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aecb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aed1:	31 d2                	xor    edx,edx
c000aed3:	88 c2                	mov    dl,al
c000aed5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aedd:	83 e1 3f             	and    ecx,0x3f
c000aee0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeee:	31 d2                	xor    edx,edx
c000aef0:	88 c2                	mov    dl,al
c000aef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aef6:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000aefd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af01:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af07:	31 d2                	xor    edx,edx
c000af09:	88 c2                	mov    dl,al
c000af0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af0f:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000af14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af18:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af1e:	8d 50 01             	lea    edx,[eax+0x1]
c000af21:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af25:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af2b:	31 d2                	xor    edx,edx
c000af2d:	88 c2                	mov    dl,al
c000af2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af33:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af37:	83 e1 3f             	and    ecx,0x3f
c000af3a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af42:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af48:	31 d2                	xor    edx,edx
c000af4a:	88 c2                	mov    dl,al
c000af4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af50:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000af57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af5b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af61:	31 d2                	xor    edx,edx
c000af63:	88 c2                	mov    dl,al
c000af65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af69:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000af6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af72:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af78:	8d 50 01             	lea    edx,[eax+0x1]
c000af7b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af7f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af85:	31 d2                	xor    edx,edx
c000af87:	88 c2                	mov    dl,al
c000af89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af8d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af91:	83 e1 3f             	and    ecx,0x3f
c000af94:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af98:	90                   	nop
c000af99:	83 c4 0c             	add    esp,0xc
c000af9c:	c3                   	ret    
c000af9d:	90                   	nop

c000af9e <Computer::setBootMessage(char const*)>:
c000af9e:	c3                   	ret    
c000af9f:	90                   	nop

c000afa0 <Computer::start()>:
c000afa0:	56                   	push   esi
c000afa1:	53                   	push   ebx
c000afa2:	83 ec 14             	sub    esp,0x14
c000afa5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000afa9:	e8 a7 da 00 00       	call   c0018a55 <lockScheduler()>
c000afae:	e8 eb dd 00 00       	call   c0018d9e <schedule()>
c000afb3:	e8 9f da 00 00       	call   c0018a57 <unlockScheduler()>
c000afb8:	fb                   	sti    
c000afb9:	83 ec 0c             	sub    esp,0xc
c000afbc:	68 3b 07 00 00       	push   0x73b
c000afc1:	e8 22 41 00 00       	call   c000f0e8 <operator new(unsigned long)>
c000afc6:	89 c6                	mov    esi,eax
c000afc8:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c000afcd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000afd4:	50                   	push   eax
c000afd5:	68 e5 10 02 c0       	push   0xc00210e5
c000afda:	6a 01                	push   0x1
c000afdc:	56                   	push   esi
c000afdd:	e8 ca d8 00 00       	call   c00188ac <Process::Process(bool, char const*, Process*, char**)>
c000afe2:	83 c4 20             	add    esp,0x20
c000afe5:	68 ff 00 00 00       	push   0xff
c000afea:	6a 00                	push   0x0
c000afec:	68 79 b9 00 c0       	push   0xc000b979
c000aff1:	56                   	push   esi
c000aff2:	e8 93 db 00 00       	call   c0018b8a <Process::createThread(void (*)(void*), void*, int)>
c000aff7:	6a 7a                	push   0x7a
c000aff9:	8b 15 f4 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025bf4
c000afff:	6a 00                	push   0x0
c000b001:	68 cf 93 01 c0       	push   0xc00193cf
c000b006:	52                   	push   edx
c000b007:	e8 7e db 00 00       	call   c0018b8a <Process::createThread(void (*)(void*), void*, int)>
c000b00c:	83 c4 20             	add    esp,0x20
c000b00f:	a3 a8 5b 02 c0       	mov    ds:0xc0025ba8,eax
c000b014:	c6 05 ad 47 02 c0 01 	mov    BYTE PTR ds:0xc00247ad,0x1
c000b01b:	e8 60 45 00 00       	call   c000f580 <initVFS()>
c000b020:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b026:	8b 10                	mov    edx,DWORD PTR [eax]
c000b028:	6a 00                	push   0x0
c000b02a:	6a 00                	push   0x0
c000b02c:	6a 00                	push   0x0
c000b02e:	50                   	push   eax
c000b02f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b032:	e8 6c c2 00 00       	call   c00172a3 <setupSystemCalls()>
c000b037:	e8 42 50 00 00       	call   c001007e <loadClockSettings()>
c000b03c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b03f:	e8 38 57 00 00       	call   c001077c <Device::loadDriversForAll()>
c000b044:	bb 02 00 00 00       	mov    ebx,0x2
c000b049:	b8 01 00 00 00       	mov    eax,0x1
c000b04e:	31 d2                	xor    edx,edx
c000b050:	31 c9                	xor    ecx,ecx
c000b052:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b05a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b062:	f0 0f c7 4c 24 18    	lock cmpxchg8b QWORD PTR [esp+0x18]
c000b068:	59                   	pop    ecx
c000b069:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c000b06f:	5e                   	pop    esi
c000b070:	6a 01                	push   0x1
c000b072:	68 f2 10 02 c0       	push   0xc00210f2
c000b077:	e8 f3 d3 00 00       	call   c001846f <Thr::loadDLL(char const*, bool)>
c000b07c:	5a                   	pop    edx
c000b07d:	59                   	pop    ecx
c000b07e:	53                   	push   ebx
c000b07f:	50                   	push   eax
c000b080:	e8 b0 d5 00 00       	call   c0018635 <Thr::executeDLL(unsigned long, void*)>
c000b085:	c7 04 24 e8 22 02 c0 	mov    DWORD PTR [esp],0xc00222e8
c000b08c:	e8 8c 41 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000b091:	83 c4 10             	add    esp,0x10
c000b094:	83 ec 0c             	sub    esp,0xc
c000b097:	6a 02                	push   0x2
c000b099:	e8 59 de 00 00       	call   c0018ef7 <blockTask(TaskState)>
c000b09e:	83 c4 10             	add    esp,0x10
c000b0a1:	eb f1                	jmp    c000b094 <Computer::start()+0xf4>

c000b0a3 <firstTask()>:
c000b0a3:	83 ec 18             	sub    esp,0x18
c000b0a6:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c000b0ab:	50                   	push   eax
c000b0ac:	e8 ef fe ff ff       	call   c000afa0 <Computer::start()>
c000b0b1:	90                   	nop

c000b0b2 <Computer::detectFeatures()>:
c000b0b2:	55                   	push   ebp
c000b0b3:	57                   	push   edi
c000b0b4:	56                   	push   esi
c000b0b5:	53                   	push   ebx
c000b0b6:	83 ec 1c             	sub    esp,0x1c
c000b0b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b0bd:	8b b3 e8 01 00 00    	mov    esi,DWORD PTR [ebx+0x1e8]
c000b0c3:	81 e6 04 00 fc ff    	and    esi,0xfffc0004
c000b0c9:	89 b3 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],esi
c000b0cf:	e8 b0 52 ff ff       	call   c0000384 <detectCPUID>
c000b0d4:	85 c0                	test   eax,eax
c000b0d6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0dc:	0f 95 c2             	setne  dl
c000b0df:	01 d2                	add    edx,edx
c000b0e1:	83 e0 fd             	and    eax,0xfffffffd
c000b0e4:	09 d0                	or     eax,edx
c000b0e6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b0ec:	a8 02                	test   al,0x2
c000b0ee:	75 4e                	jne    c000b13e <Computer::detectFeatures()+0x8c>
c000b0f0:	f6 05 c1 47 02 c0 04 	test   BYTE PTR ds:0xc00247c1,0x4
c000b0f7:	74 0f                	je     c000b108 <Computer::detectFeatures()+0x56>
c000b0f9:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0ff:	83 e0 fb             	and    eax,0xfffffffb
c000b102:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b108:	e8 c9 40 01 00       	call   c001f1d6 <x87Detect>
c000b10d:	83 e0 01             	and    eax,0x1
c000b110:	c1 e0 04             	shl    eax,0x4
c000b113:	88 c2                	mov    dl,al
c000b115:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b11b:	83 e0 ef             	and    eax,0xffffffef
c000b11e:	09 d0                	or     eax,edx
c000b120:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b126:	a8 10                	test   al,0x10
c000b128:	0f 85 20 01 00 00    	jne    c000b24e <Computer::detectFeatures()+0x19c>
c000b12e:	84 c0                	test   al,al
c000b130:	0f 88 3b 01 00 00    	js     c000b271 <Computer::detectFeatures()+0x1bf>
c000b136:	83 c4 1c             	add    esp,0x1c
c000b139:	5b                   	pop    ebx
c000b13a:	5e                   	pop    esi
c000b13b:	5f                   	pop    edi
c000b13c:	5d                   	pop    ebp
c000b13d:	c3                   	ret    
c000b13e:	83 ec 0c             	sub    esp,0xc
c000b141:	6a 20                	push   0x20
c000b143:	e8 e1 96 00 00       	call   c0014829 <cpuidCheckEDX(unsigned int)>
c000b148:	83 e0 01             	and    eax,0x1
c000b14b:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b152:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b158:	83 e0 f7             	and    eax,0xfffffff7
c000b15b:	09 d0                	or     eax,edx
c000b15d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b163:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b16a:	e8 ba 96 00 00       	call   c0014829 <cpuidCheckEDX(unsigned int)>
c000b16f:	83 e0 01             	and    eax,0x1
c000b172:	88 c2                	mov    dl,al
c000b174:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b17a:	83 e0 fe             	and    eax,0xfffffffe
c000b17d:	09 d0                	or     eax,edx
c000b17f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b185:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b18c:	e8 98 96 00 00       	call   c0014829 <cpuidCheckEDX(unsigned int)>
c000b191:	c1 e0 07             	shl    eax,0x7
c000b194:	88 c2                	mov    dl,al
c000b196:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b19c:	83 e0 7f             	and    eax,0x7f
c000b19f:	09 d0                	or     eax,edx
c000b1a1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b1a7:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b1ae:	e8 76 96 00 00       	call   c0014829 <cpuidCheckEDX(unsigned int)>
c000b1b3:	83 c4 10             	add    esp,0x10
c000b1b6:	83 e0 01             	and    eax,0x1
c000b1b9:	c1 e0 05             	shl    eax,0x5
c000b1bc:	88 c2                	mov    dl,al
c000b1be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b1c4:	83 e0 df             	and    eax,0xffffffdf
c000b1c7:	09 d0                	or     eax,edx
c000b1c9:	f7 05 c0 47 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00247c0,0x401
c000b1d3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b1d9:	0f 84 b8 00 00 00    	je     c000b297 <Computer::detectFeatures()+0x1e5>
c000b1df:	83 ec 0c             	sub    esp,0xc
c000b1e2:	8a 8b e8 01 00 00    	mov    cl,BYTE PTR [ebx+0x1e8]
c000b1e8:	83 e1 fe             	and    ecx,0xfffffffe
c000b1eb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b1ef:	88 8b e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],cl
c000b1f5:	50                   	push   eax
c000b1f6:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b1fa:	55                   	push   ebp
c000b1fb:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b1ff:	57                   	push   edi
c000b200:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b204:	56                   	push   esi
c000b205:	68 00 00 00 80       	push   0x80000000
c000b20a:	e8 97 95 00 00       	call   c00147a6 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b20f:	83 c4 20             	add    esp,0x20
c000b212:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b219:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b21d:	0f 86 cd fe ff ff    	jbe    c000b0f0 <Computer::detectFeatures()+0x3e>
c000b223:	83 ec 0c             	sub    esp,0xc
c000b226:	50                   	push   eax
c000b227:	55                   	push   ebp
c000b228:	57                   	push   edi
c000b229:	56                   	push   esi
c000b22a:	68 01 00 00 80       	push   0x80000001
c000b22f:	e8 72 95 00 00       	call   c00147a6 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b234:	8b 93 e8 01 00 00    	mov    edx,DWORD PTR [ebx+0x1e8]
c000b23a:	83 c4 20             	add    esp,0x20
c000b23d:	81 e2 bf ff fc ff    	and    edx,0xfffcffbf
c000b243:	89 93 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],edx
c000b249:	e9 a2 fe ff ff       	jmp    c000b0f0 <Computer::detectFeatures()+0x3e>
c000b24e:	e8 3d 3f 01 00       	call   c001f190 <sseDetect>
c000b253:	88 c2                	mov    dl,al
c000b255:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b25b:	c1 e2 07             	shl    edx,0x7
c000b25e:	83 e0 7f             	and    eax,0x7f
c000b261:	09 d0                	or     eax,edx
c000b263:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b269:	84 c0                	test   al,al
c000b26b:	0f 89 c5 fe ff ff    	jns    c000b136 <Computer::detectFeatures()+0x84>
c000b271:	e8 0a 3f 01 00       	call   c001f180 <avxDetect>
c000b276:	83 e0 01             	and    eax,0x1
c000b279:	c1 e0 05             	shl    eax,0x5
c000b27c:	88 c2                	mov    dl,al
c000b27e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b284:	83 e0 df             	and    eax,0xffffffdf
c000b287:	09 d0                	or     eax,edx
c000b289:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b28f:	83 c4 1c             	add    esp,0x1c
c000b292:	5b                   	pop    ebx
c000b293:	5e                   	pop    esi
c000b294:	5f                   	pop    edi
c000b295:	5d                   	pop    ebp
c000b296:	c3                   	ret    
c000b297:	83 ec 0c             	sub    esp,0xc
c000b29a:	68 00 02 00 00       	push   0x200
c000b29f:	e8 85 95 00 00       	call   c0014829 <cpuidCheckEDX(unsigned int)>
c000b2a4:	83 c4 10             	add    esp,0x10
c000b2a7:	e9 33 ff ff ff       	jmp    c000b1df <Computer::detectFeatures()+0x12d>

c000b2ac <Computer::displayFeatures()>:
c000b2ac:	53                   	push   ebx
c000b2ad:	83 ec 14             	sub    esp,0x14
c000b2b0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b2b4:	68 15 11 02 c0       	push   0xc0021115
c000b2b9:	e8 5f 3f 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b2c6:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000b2cd:	74 05                	je     c000b2d4 <Computer::displayFeatures()+0x28>
c000b2cf:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b2d4:	51                   	push   ecx
c000b2d5:	51                   	push   ecx
c000b2d6:	50                   	push   eax
c000b2d7:	68 28 11 02 c0       	push   0xc0021128
c000b2dc:	e8 3c 3f 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000b2e1:	83 c4 10             	add    esp,0x10
c000b2e4:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b2e9:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000b2f0:	75 05                	jne    c000b2f7 <Computer::displayFeatures()+0x4b>
c000b2f2:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b2f7:	52                   	push   edx
c000b2f8:	52                   	push   edx
c000b2f9:	50                   	push   eax
c000b2fa:	68 39 11 02 c0       	push   0xc0021139
c000b2ff:	e8 19 3f 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000b304:	83 c4 10             	add    esp,0x10
c000b307:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b30c:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000b313:	75 05                	jne    c000b31a <Computer::displayFeatures()+0x6e>
c000b315:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b31a:	51                   	push   ecx
c000b31b:	51                   	push   ecx
c000b31c:	50                   	push   eax
c000b31d:	68 4a 11 02 c0       	push   0xc002114a
c000b322:	e8 f6 3e 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000b327:	83 c4 10             	add    esp,0x10
c000b32a:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b32f:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000b336:	75 05                	jne    c000b33d <Computer::displayFeatures()+0x91>
c000b338:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b33d:	52                   	push   edx
c000b33e:	52                   	push   edx
c000b33f:	50                   	push   eax
c000b340:	68 5b 11 02 c0       	push   0xc002115b
c000b345:	e8 d3 3e 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000b34a:	83 c4 10             	add    esp,0x10
c000b34d:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b352:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000b359:	75 05                	jne    c000b360 <Computer::displayFeatures()+0xb4>
c000b35b:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b360:	51                   	push   ecx
c000b361:	51                   	push   ecx
c000b362:	50                   	push   eax
c000b363:	68 6c 11 02 c0       	push   0xc002116c
c000b368:	e8 b0 3e 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000b36d:	83 c4 10             	add    esp,0x10
c000b370:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b375:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000b37c:	75 05                	jne    c000b383 <Computer::displayFeatures()+0xd7>
c000b37e:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b383:	52                   	push   edx
c000b384:	52                   	push   edx
c000b385:	50                   	push   eax
c000b386:	68 7d 11 02 c0       	push   0xc002117d
c000b38b:	e8 8d 3e 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000b390:	83 c4 10             	add    esp,0x10
c000b393:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b398:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000b39f:	75 05                	jne    c000b3a6 <Computer::displayFeatures()+0xfa>
c000b3a1:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b3a6:	51                   	push   ecx
c000b3a7:	51                   	push   ecx
c000b3a8:	50                   	push   eax
c000b3a9:	68 8e 11 02 c0       	push   0xc002118e
c000b3ae:	e8 6a 3e 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000b3b3:	83 c4 10             	add    esp,0x10
c000b3b6:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b3bb:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000b3c2:	78 05                	js     c000b3c9 <Computer::displayFeatures()+0x11d>
c000b3c4:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b3c9:	52                   	push   edx
c000b3ca:	52                   	push   edx
c000b3cb:	50                   	push   eax
c000b3cc:	68 9f 11 02 c0       	push   0xc002119f
c000b3d1:	e8 47 3e 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000b3d6:	83 c4 10             	add    esp,0x10
c000b3d9:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b3de:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000b3e5:	0f 84 93 01 00 00    	je     c000b57e <Computer::displayFeatures()+0x2d2>
c000b3eb:	51                   	push   ecx
c000b3ec:	51                   	push   ecx
c000b3ed:	50                   	push   eax
c000b3ee:	68 b0 11 02 c0       	push   0xc00211b0
c000b3f3:	e8 25 3e 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000b3f8:	83 c4 10             	add    esp,0x10
c000b3fb:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b400:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000b407:	0f 84 67 01 00 00    	je     c000b574 <Computer::displayFeatures()+0x2c8>
c000b40d:	52                   	push   edx
c000b40e:	52                   	push   edx
c000b40f:	50                   	push   eax
c000b410:	68 c1 11 02 c0       	push   0xc00211c1
c000b415:	e8 03 3e 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000b41a:	83 c4 10             	add    esp,0x10
c000b41d:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b422:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000b429:	0f 84 3b 01 00 00    	je     c000b56a <Computer::displayFeatures()+0x2be>
c000b42f:	51                   	push   ecx
c000b430:	51                   	push   ecx
c000b431:	50                   	push   eax
c000b432:	68 d2 11 02 c0       	push   0xc00211d2
c000b437:	e8 e1 3d 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000b43c:	83 c4 10             	add    esp,0x10
c000b43f:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b444:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000b44b:	0f 84 0f 01 00 00    	je     c000b560 <Computer::displayFeatures()+0x2b4>
c000b451:	52                   	push   edx
c000b452:	52                   	push   edx
c000b453:	50                   	push   eax
c000b454:	68 e3 11 02 c0       	push   0xc00211e3
c000b459:	e8 bf 3d 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000b45e:	83 c4 10             	add    esp,0x10
c000b461:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b466:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000b46d:	0f 84 e3 00 00 00    	je     c000b556 <Computer::displayFeatures()+0x2aa>
c000b473:	51                   	push   ecx
c000b474:	51                   	push   ecx
c000b475:	50                   	push   eax
c000b476:	68 f4 11 02 c0       	push   0xc00211f4
c000b47b:	e8 9d 3d 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000b480:	83 c4 10             	add    esp,0x10
c000b483:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b488:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000b48f:	0f 84 b7 00 00 00    	je     c000b54c <Computer::displayFeatures()+0x2a0>
c000b495:	52                   	push   edx
c000b496:	52                   	push   edx
c000b497:	50                   	push   eax
c000b498:	68 05 12 02 c0       	push   0xc0021205
c000b49d:	e8 7b 3d 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000b4a2:	83 c4 10             	add    esp,0x10
c000b4a5:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b4aa:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000b4b1:	0f 84 8b 00 00 00    	je     c000b542 <Computer::displayFeatures()+0x296>
c000b4b7:	51                   	push   ecx
c000b4b8:	51                   	push   ecx
c000b4b9:	50                   	push   eax
c000b4ba:	68 16 12 02 c0       	push   0xc0021216
c000b4bf:	e8 59 3d 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000b4c4:	83 c4 10             	add    esp,0x10
c000b4c7:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b4cc:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000b4d3:	78 05                	js     c000b4da <Computer::displayFeatures()+0x22e>
c000b4d5:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b4da:	52                   	push   edx
c000b4db:	52                   	push   edx
c000b4dc:	50                   	push   eax
c000b4dd:	68 27 12 02 c0       	push   0xc0021227
c000b4e2:	e8 36 3d 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000b4e7:	83 c4 10             	add    esp,0x10
c000b4ea:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b4ef:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000b4f6:	74 43                	je     c000b53b <Computer::displayFeatures()+0x28f>
c000b4f8:	51                   	push   ecx
c000b4f9:	51                   	push   ecx
c000b4fa:	50                   	push   eax
c000b4fb:	68 38 12 02 c0       	push   0xc0021238
c000b500:	e8 18 3d 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000b505:	83 c4 10             	add    esp,0x10
c000b508:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b50d:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000b514:	74 1e                	je     c000b534 <Computer::displayFeatures()+0x288>
c000b516:	52                   	push   edx
c000b517:	52                   	push   edx
c000b518:	50                   	push   eax
c000b519:	68 49 12 02 c0       	push   0xc0021249
c000b51e:	e8 fa 3c 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000b523:	c7 44 24 20 c6 28 02 c0 	mov    DWORD PTR [esp+0x20],0xc00228c6
c000b52b:	83 c4 18             	add    esp,0x18
c000b52e:	5b                   	pop    ebx
c000b52f:	e9 e9 3c 00 00       	jmp    c000f21d <Dbg::kprintf(char const*, ...)>
c000b534:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b539:	eb db                	jmp    c000b516 <Computer::displayFeatures()+0x26a>
c000b53b:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b540:	eb b6                	jmp    c000b4f8 <Computer::displayFeatures()+0x24c>
c000b542:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b547:	e9 6b ff ff ff       	jmp    c000b4b7 <Computer::displayFeatures()+0x20b>
c000b54c:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b551:	e9 3f ff ff ff       	jmp    c000b495 <Computer::displayFeatures()+0x1e9>
c000b556:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b55b:	e9 13 ff ff ff       	jmp    c000b473 <Computer::displayFeatures()+0x1c7>
c000b560:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b565:	e9 e7 fe ff ff       	jmp    c000b451 <Computer::displayFeatures()+0x1a5>
c000b56a:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b56f:	e9 bb fe ff ff       	jmp    c000b42f <Computer::displayFeatures()+0x183>
c000b574:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b579:	e9 8f fe ff ff       	jmp    c000b40d <Computer::displayFeatures()+0x161>
c000b57e:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b583:	e9 63 fe ff ff       	jmp    c000b3eb <Computer::displayFeatures()+0x13f>

c000b588 <Computer::rdmsr(unsigned int)>:
c000b588:	83 ec 0c             	sub    esp,0xc
c000b58b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b58f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b596:	74 0a                	je     c000b5a2 <Computer::rdmsr(unsigned int)+0x1a>
c000b598:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b59c:	0f 32                	rdmsr  
c000b59e:	83 c4 0c             	add    esp,0xc
c000b5a1:	c3                   	ret    
c000b5a2:	83 ec 0c             	sub    esp,0xc
c000b5a5:	68 5a 12 02 c0       	push   0xc002125a
c000b5aa:	e8 9d a4 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c000b5af:	83 c4 10             	add    esp,0x10
c000b5b2:	eb e4                	jmp    c000b598 <Computer::rdmsr(unsigned int)+0x10>

c000b5b4 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b5b4:	57                   	push   edi
c000b5b5:	56                   	push   esi
c000b5b6:	52                   	push   edx
c000b5b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5bb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b5bf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b5c3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5ca:	74 0e                	je     c000b5da <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b5cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5d0:	89 f0                	mov    eax,esi
c000b5d2:	89 fa                	mov    edx,edi
c000b5d4:	0f 30                	wrmsr  
c000b5d6:	58                   	pop    eax
c000b5d7:	5e                   	pop    esi
c000b5d8:	5f                   	pop    edi
c000b5d9:	c3                   	ret    
c000b5da:	83 ec 0c             	sub    esp,0xc
c000b5dd:	68 60 12 02 c0       	push   0xc0021260
c000b5e2:	e8 65 a4 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c000b5e7:	83 c4 10             	add    esp,0x10
c000b5ea:	eb e0                	jmp    c000b5cc <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b5ec <Computer::nmiEnabled()>:
c000b5ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5f0:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b5f6:	c3                   	ret    
c000b5f7:	90                   	nop

c000b5f8 <Computer::readCMOS(unsigned char)>:
c000b5f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b600:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b607:	19 c0                	sbb    eax,eax
c000b609:	83 e0 80             	and    eax,0xffffff80
c000b60c:	09 d0                	or     eax,edx
c000b60e:	e6 70                	out    0x70,al
c000b610:	e4 71                	in     al,0x71
c000b612:	c3                   	ret    
c000b613:	90                   	nop

c000b614 <Computer::enableNMI(bool)>:
c000b614:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b618:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b61c:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b622:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b62a:	eb cc                	jmp    c000b5f8 <Computer::readCMOS(unsigned char)>

c000b62c <Computer::open(int, int, void*)>:
c000b62c:	56                   	push   esi
c000b62d:	53                   	push   ebx
c000b62e:	83 ec 10             	sub    esp,0x10
c000b631:	f6 05 c0 47 02 c0 04 	test   BYTE PTR ds:0xc00247c0,0x4
c000b638:	0f 94 05 e0 3b 02 c0 	sete   BYTE PTR ds:0xc0023be0
c000b63f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b643:	68 68 22 00 00       	push   0x2268
c000b648:	e8 9b 3a 00 00       	call   c000f0e8 <operator new(unsigned long)>
c000b64d:	89 c6                	mov    esi,eax
c000b64f:	89 04 24             	mov    DWORD PTR [esp],eax
c000b652:	e8 bf 87 00 00       	call   c0013e16 <ACPI::ACPI()>
c000b657:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b65d:	59                   	pop    ecx
c000b65e:	58                   	pop    eax
c000b65f:	56                   	push   esi
c000b660:	53                   	push   ebx
c000b661:	e8 cc 4f 00 00       	call   c0010632 <Device::addChild(Device*)>
c000b666:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b669:	e8 44 fa ff ff       	call   c000b0b2 <Computer::detectFeatures()>
c000b66e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b671:	e8 36 fc ff ff       	call   c000b2ac <Computer::displayFeatures()>
c000b676:	58                   	pop    eax
c000b677:	5a                   	pop    edx
c000b678:	6a 01                	push   0x1
c000b67a:	53                   	push   ebx
c000b67b:	e8 94 ff ff ff       	call   c000b614 <Computer::enableNMI(bool)>
c000b680:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b687:	e8 5c 3a 00 00       	call   c000f0e8 <operator new(unsigned long)>
c000b68c:	89 c6                	mov    esi,eax
c000b68e:	89 04 24             	mov    DWORD PTR [esp],eax
c000b691:	e8 5e 92 00 00       	call   c00148f4 <CPU::CPU()>
c000b696:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b69c:	59                   	pop    ecx
c000b69d:	58                   	pop    eax
c000b69e:	56                   	push   esi
c000b69f:	53                   	push   ebx
c000b6a0:	e8 8d 4f 00 00       	call   c0010632 <Device::addChild(Device*)>
c000b6a5:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b6ab:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b6af:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6b1:	51                   	push   ecx
c000b6b2:	6a 00                	push   0x0
c000b6b4:	6a 00                	push   0x0
c000b6b6:	50                   	push   eax
c000b6b7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b6ba:	83 c4 20             	add    esp,0x20
c000b6bd:	e8 d8 54 00 00       	call   c0010b9a <setupFPU()>
c000b6c2:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b6c8:	85 c0                	test   eax,eax
c000b6ca:	74 1e                	je     c000b6ea <Computer::open(int, int, void*)+0xbe>
c000b6cc:	52                   	push   edx
c000b6cd:	52                   	push   edx
c000b6ce:	50                   	push   eax
c000b6cf:	53                   	push   ebx
c000b6d0:	e8 5d 4f 00 00       	call   c0010632 <Device::addChild(Device*)>
c000b6d5:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b6db:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6dd:	6a 00                	push   0x0
c000b6df:	6a 00                	push   0x0
c000b6e1:	6a 00                	push   0x0
c000b6e3:	50                   	push   eax
c000b6e4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b6e7:	83 c4 20             	add    esp,0x20
c000b6ea:	83 ec 0c             	sub    esp,0xc
c000b6ed:	68 a3 b0 00 c0       	push   0xc000b0a3
c000b6f2:	e8 92 d5 00 00       	call   c0018c89 <setupMultitasking(void (*)())>
c000b6f7:	83 c4 14             	add    esp,0x14
c000b6fa:	83 c8 ff             	or     eax,0xffffffff
c000b6fd:	5b                   	pop    ebx
c000b6fe:	5e                   	pop    esi
c000b6ff:	c3                   	ret    

c000b700 <Computer::disableNMI()>:
c000b700:	6a 00                	push   0x0
c000b702:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b706:	50                   	push   eax
c000b707:	e8 08 ff ff ff       	call   c000b614 <Computer::enableNMI(bool)>
c000b70c:	5a                   	pop    edx
c000b70d:	59                   	pop    ecx
c000b70e:	c3                   	ret    
c000b70f:	90                   	nop

c000b710 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b714:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b718:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b71f:	19 c0                	sbb    eax,eax
c000b721:	83 e0 80             	and    eax,0xffffff80
c000b724:	09 d0                	or     eax,edx
c000b726:	e6 70                	out    0x70,al
c000b728:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b72c:	e6 71                	out    0x71,al
c000b72e:	c3                   	ret    
c000b72f:	90                   	nop

c000b730 <Computer::handleNMI()>:
c000b730:	56                   	push   esi
c000b731:	53                   	push   ebx
c000b732:	83 ec 10             	sub    esp,0x10
c000b735:	e4 92                	in     al,0x92
c000b737:	89 c6                	mov    esi,eax
c000b739:	e4 61                	in     al,0x61
c000b73b:	68 66 12 02 c0       	push   0xc0021266
c000b740:	88 c3                	mov    bl,al
c000b742:	e8 d6 3a 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000b747:	83 c4 10             	add    esp,0x10
c000b74a:	83 e6 10             	and    esi,0x10
c000b74d:	75 0d                	jne    c000b75c <Computer::handleNMI()+0x2c>
c000b74f:	f6 c3 40             	test   bl,0x40
c000b752:	75 1d                	jne    c000b771 <Computer::handleNMI()+0x41>
c000b754:	84 db                	test   bl,bl
c000b756:	78 2d                	js     c000b785 <Computer::handleNMI()+0x55>
c000b758:	58                   	pop    eax
c000b759:	5b                   	pop    ebx
c000b75a:	5e                   	pop    esi
c000b75b:	c3                   	ret    
c000b75c:	83 ec 0c             	sub    esp,0xc
c000b75f:	68 77 12 02 c0       	push   0xc0021277
c000b764:	e8 e3 a2 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c000b769:	83 c4 10             	add    esp,0x10
c000b76c:	f6 c3 40             	test   bl,0x40
c000b76f:	74 e3                	je     c000b754 <Computer::handleNMI()+0x24>
c000b771:	83 ec 0c             	sub    esp,0xc
c000b774:	68 84 12 02 c0       	push   0xc0021284
c000b779:	e8 ce a2 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c000b77e:	83 c4 10             	add    esp,0x10
c000b781:	84 db                	test   bl,bl
c000b783:	79 d3                	jns    c000b758 <Computer::handleNMI()+0x28>
c000b785:	c7 44 24 10 8e 12 02 c0 	mov    DWORD PTR [esp+0x10],0xc002128e
c000b78d:	5a                   	pop    edx
c000b78e:	5b                   	pop    ebx
c000b78f:	5e                   	pop    esi
c000b790:	e9 b7 a2 00 00       	jmp    c0015a4c <Krnl::panic(char const*)>
c000b795:	90                   	nop

c000b796 <Computer::setDiskActivityLight(int, bool)>:
c000b796:	56                   	push   esi
c000b797:	53                   	push   ebx
c000b798:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b79c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b7a1:	77 1c                	ja     c000b7bf <Computer::setDiskActivityLight(int, bool)+0x29>
c000b7a3:	e4 92                	in     al,0x92
c000b7a5:	bb 40 00 00 00       	mov    ebx,0x40
c000b7aa:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b7ae:	89 da                	mov    edx,ebx
c000b7b0:	d3 e2                	shl    edx,cl
c000b7b2:	83 f2 ff             	xor    edx,0xffffffff
c000b7b5:	89 f1                	mov    ecx,esi
c000b7b7:	21 d0                	and    eax,edx
c000b7b9:	d3 e3                	shl    ebx,cl
c000b7bb:	09 d8                	or     eax,ebx
c000b7bd:	e6 92                	out    0x92,al
c000b7bf:	5b                   	pop    ebx
c000b7c0:	5e                   	pop    esi
c000b7c1:	c3                   	ret    

c000b7c2 <GDTEntry::setBase(unsigned int)>:
c000b7c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b7ca:	89 c1                	mov    ecx,eax
c000b7cc:	c1 e9 10             	shr    ecx,0x10
c000b7cf:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b7d3:	c1 e8 18             	shr    eax,0x18
c000b7d6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b7d9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b7dc:	c3                   	ret    
c000b7dd:	90                   	nop

c000b7de <GDTEntry::setLimit(unsigned int)>:
c000b7de:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b7e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7e6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b7e9:	66 89 01             	mov    WORD PTR [ecx],ax
c000b7ec:	c1 e8 10             	shr    eax,0x10
c000b7ef:	83 e2 f0             	and    edx,0xfffffff0
c000b7f2:	83 e0 0f             	and    eax,0xf
c000b7f5:	09 d0                	or     eax,edx
c000b7f7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b7fa:	c3                   	ret    
c000b7fb:	90                   	nop

c000b7fc <GDT::GDT()>:
c000b7fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b800:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b806:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b80a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b810:	90                   	nop
c000b811:	c3                   	ret    

c000b812 <GDT::addEntry(GDTEntry)>:
c000b812:	53                   	push   ebx
c000b813:	83 ec 0c             	sub    esp,0xc
c000b816:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b81a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b81c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b823:	52                   	push   edx
c000b824:	50                   	push   eax
c000b825:	68 c8 12 02 c0       	push   0xc00212c8
c000b82a:	e8 ee 39 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000b82f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b831:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b835:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b839:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b83d:	8d 50 01             	lea    edx,[eax+0x1]
c000b840:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b844:	89 13                	mov    DWORD PTR [ebx],edx
c000b846:	c1 e0 03             	shl    eax,0x3
c000b849:	83 c4 18             	add    esp,0x18
c000b84c:	5b                   	pop    ebx
c000b84d:	c3                   	ret    

c000b84e <GDT::getNumberOfEntries()>:
c000b84e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b852:	8b 00                	mov    eax,DWORD PTR [eax]
c000b854:	c3                   	ret    
c000b855:	90                   	nop

c000b856 <GDT::flush()>:
c000b856:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b85a:	83 c0 04             	add    eax,0x4
c000b85d:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000b860:	a3 b2 47 02 c0       	mov    ds:0xc00247b2,eax
c000b865:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b86c:	66 89 15 b0 47 02 c0 	mov    WORD PTR ds:0xc00247b0,dx
c000b873:	e9 80 4b ff ff       	jmp    c00003f8 <loadGDT>

c000b878 <GDT::setup()>:
c000b878:	55                   	push   ebp
c000b879:	57                   	push   edi
c000b87a:	56                   	push   esi
c000b87b:	53                   	push   ebx
c000b87c:	83 ec 3c             	sub    esp,0x3c
c000b87f:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b883:	6a 00                	push   0x0
c000b885:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b889:	53                   	push   ebx
c000b88a:	e8 33 ff ff ff       	call   c000b7c2 <GDTEntry::setBase(unsigned int)>
c000b88f:	6a 00                	push   0x0
c000b891:	53                   	push   ebx
c000b892:	e8 47 ff ff ff       	call   c000b7de <GDTEntry::setLimit(unsigned int)>
c000b897:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b89f:	6a 00                	push   0x0
c000b8a1:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b8a5:	53                   	push   ebx
c000b8a6:	e8 17 ff ff ff       	call   c000b7c2 <GDTEntry::setBase(unsigned int)>
c000b8ab:	68 ff ff ff 00       	push   0xffffff
c000b8b0:	53                   	push   ebx
c000b8b1:	e8 28 ff ff ff       	call   c000b7de <GDTEntry::setLimit(unsigned int)>
c000b8b6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b8ba:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b8bf:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b8c4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b8c8:	83 c4 20             	add    esp,0x20
c000b8cb:	6a 00                	push   0x0
c000b8cd:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b8d1:	53                   	push   ebx
c000b8d2:	e8 eb fe ff ff       	call   c000b7c2 <GDTEntry::setBase(unsigned int)>
c000b8d7:	68 ff ff ff 00       	push   0xffffff
c000b8dc:	53                   	push   ebx
c000b8dd:	e8 fc fe ff ff       	call   c000b7de <GDTEntry::setLimit(unsigned int)>
c000b8e2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b8e6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b8ea:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b8ef:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b8f3:	0d 00 92 c0 00       	or     eax,0xc09200
c000b8f8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b8fc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b900:	89 d8                	mov    eax,ebx
c000b902:	80 cc 60             	or     ah,0x60
c000b905:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b909:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b90d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b911:	83 c4 0c             	add    esp,0xc
c000b914:	89 f8                	mov    eax,edi
c000b916:	80 cc 60             	or     ah,0x60
c000b919:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b91d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b921:	89 c7                	mov    edi,eax
c000b923:	55                   	push   ebp
c000b924:	e8 e9 fe ff ff       	call   c000b812 <GDT::addEntry(GDTEntry)>
c000b929:	83 c4 0c             	add    esp,0xc
c000b92c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b930:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b934:	55                   	push   ebp
c000b935:	e8 d8 fe ff ff       	call   c000b812 <GDT::addEntry(GDTEntry)>
c000b93a:	83 c4 0c             	add    esp,0xc
c000b93d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b941:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b945:	55                   	push   ebp
c000b946:	e8 c7 fe ff ff       	call   c000b812 <GDT::addEntry(GDTEntry)>
c000b94b:	83 c4 0c             	add    esp,0xc
c000b94e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b952:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b956:	53                   	push   ebx
c000b957:	51                   	push   ecx
c000b958:	55                   	push   ebp
c000b959:	e8 b4 fe ff ff       	call   c000b812 <GDT::addEntry(GDTEntry)>
c000b95e:	83 c4 0c             	add    esp,0xc
c000b961:	57                   	push   edi
c000b962:	56                   	push   esi
c000b963:	55                   	push   ebp
c000b964:	e8 a9 fe ff ff       	call   c000b812 <GDT::addEntry(GDTEntry)>
c000b969:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b96c:	e8 e5 fe ff ff       	call   c000b856 <GDT::flush()>
c000b971:	83 c4 4c             	add    esp,0x4c
c000b974:	5b                   	pop    ebx
c000b975:	5e                   	pop    esi
c000b976:	5f                   	pop    edi
c000b977:	5d                   	pop    ebp
c000b978:	c3                   	ret    

c000b979 <idleFunction(void*)>:
c000b979:	53                   	push   ebx
c000b97a:	83 ec 08             	sub    esp,0x8
c000b97d:	e8 d5 d0 00 00       	call   c0018a57 <unlockScheduler()>
c000b982:	e8 59 8f 00 00       	call   c00148e0 <thisCPU()>
c000b987:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b98e:	74 41                	je     c000b9d1 <idleFunction(void*)+0x58>
c000b990:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c000b995:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b99c:	74 33                	je     c000b9d1 <idleFunction(void*)+0x58>
c000b99e:	52                   	push   edx
c000b99f:	31 db                	xor    ebx,ebx
c000b9a1:	52                   	push   edx
c000b9a2:	68 e1 00 00 00       	push   0xe1
c000b9a7:	50                   	push   eax
c000b9a8:	e8 db fb ff ff       	call   c000b588 <Computer::rdmsr(unsigned int)>
c000b9ad:	53                   	push   ebx
c000b9ae:	83 e0 02             	and    eax,0x2
c000b9b1:	50                   	push   eax
c000b9b2:	68 e1 00 00 00       	push   0xe1
c000b9b7:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c000b9bd:	e8 f2 fb ff ff       	call   c000b5b4 <Computer::wrmsr(unsigned int, unsigned long long)>
c000b9c2:	83 c4 20             	add    esp,0x20
c000b9c5:	e8 46 48 ff ff       	call   c0000210 <doTPAUSE>
c000b9ca:	e8 01 3e 01 00       	call   c001f7d0 <idleCommon()>
c000b9cf:	eb f4                	jmp    c000b9c5 <idleFunction(void*)+0x4c>
c000b9d1:	fb                   	sti    
c000b9d2:	f4                   	hlt    
c000b9d3:	e8 f8 3d 01 00       	call   c001f7d0 <idleCommon()>
c000b9d8:	eb f7                	jmp    c000b9d1 <idleFunction(void*)+0x58>

c000b9da <IDTEntry::IDTEntry(bool)>:
c000b9da:	83 ec 04             	sub    esp,0x4
c000b9dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9e1:	88 04 24             	mov    BYTE PTR [esp],al
c000b9e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9e8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000b9ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9f2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000b9f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9fa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b9fd:	83 e2 f0             	and    edx,0xfffffff0
c000ba00:	83 ca 0e             	or     edx,0xe
c000ba03:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba0a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba0d:	83 e2 ef             	and    edx,0xffffffef
c000ba10:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba13:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ba17:	74 04                	je     c000ba1d <IDTEntry::IDTEntry(bool)+0x43>
c000ba19:	b2 03                	mov    dl,0x3
c000ba1b:	eb 02                	jmp    c000ba1f <IDTEntry::IDTEntry(bool)+0x45>
c000ba1d:	b2 00                	mov    dl,0x0
c000ba1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba23:	83 e2 03             	and    edx,0x3
c000ba26:	88 d1                	mov    cl,dl
c000ba28:	c1 e1 05             	shl    ecx,0x5
c000ba2b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba2e:	83 e2 9f             	and    edx,0xffffff9f
c000ba31:	09 ca                	or     edx,ecx
c000ba33:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba3a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba3d:	83 ca 80             	or     edx,0xffffff80
c000ba40:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba43:	90                   	nop
c000ba44:	83 c4 04             	add    esp,0x4
c000ba47:	c3                   	ret    

c000ba48 <IDTEntry::setOffset(unsigned int)>:
c000ba48:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ba4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba50:	66 89 02             	mov    WORD PTR [edx],ax
c000ba53:	c1 e8 10             	shr    eax,0x10
c000ba56:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ba5a:	c3                   	ret    
c000ba5b:	90                   	nop

c000ba5c <IDT::IDT()>:
c000ba5c:	90                   	nop
c000ba5d:	c3                   	ret    

c000ba5e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ba5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba62:	83 c0 30             	add    eax,0x30
c000ba65:	c3                   	ret    

c000ba66 <IDT::addEntry(IDTEntry, int)>:
c000ba66:	53                   	push   ebx
c000ba67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba6b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba6f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ba73:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ba77:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ba7a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ba7e:	5b                   	pop    ebx
c000ba7f:	c3                   	ret    

c000ba80 <IDT::addEntry(int, void (*)(), bool)>:
c000ba80:	53                   	push   ebx
c000ba81:	83 ec 10             	sub    esp,0x10
c000ba84:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ba89:	50                   	push   eax
c000ba8a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ba8e:	53                   	push   ebx
c000ba8f:	e8 46 ff ff ff       	call   c000b9da <IDTEntry::IDTEntry(bool)>
c000ba94:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ba98:	53                   	push   ebx
c000ba99:	e8 aa ff ff ff       	call   c000ba48 <IDTEntry::setOffset(unsigned int)>
c000ba9e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000baa2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000baa6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000baaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baae:	e8 b3 ff ff ff       	call   c000ba66 <IDT::addEntry(IDTEntry, int)>
c000bab3:	83 c4 30             	add    esp,0x30
c000bab6:	5b                   	pop    ebx
c000bab7:	c3                   	ret    

c000bab8 <IDT::flush()>:
c000bab8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000babc:	66 c7 05 b8 47 02 c0 ff 07 	mov    WORD PTR ds:0xc00247b8,0x7ff
c000bac5:	a3 ba 47 02 c0       	mov    ds:0xc00247ba,eax
c000baca:	0f 01 1d b8 47 02 c0 	lidtd  ds:0xc00247b8
c000bad1:	c3                   	ret    

c000bad2 <IDT::setup()>:
c000bad2:	57                   	push   edi
c000bad3:	56                   	push   esi
c000bad4:	53                   	push   ebx
c000bad5:	83 ec 10             	sub    esp,0x10
c000bad8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000badc:	6a 00                	push   0x0
c000bade:	68 18 04 00 c0       	push   0xc0000418
c000bae3:	6a 00                	push   0x0
c000bae5:	53                   	push   ebx
c000bae6:	e8 95 ff ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000baeb:	6a 00                	push   0x0
c000baed:	68 28 04 00 c0       	push   0xc0000428
c000baf2:	6a 01                	push   0x1
c000baf4:	53                   	push   ebx
c000baf5:	e8 86 ff ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bafa:	83 c4 20             	add    esp,0x20
c000bafd:	6a 00                	push   0x0
c000baff:	68 32 04 00 c0       	push   0xc0000432
c000bb04:	6a 02                	push   0x2
c000bb06:	53                   	push   ebx
c000bb07:	e8 74 ff ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bb0c:	6a 00                	push   0x0
c000bb0e:	68 3c 04 00 c0       	push   0xc000043c
c000bb13:	6a 03                	push   0x3
c000bb15:	53                   	push   ebx
c000bb16:	e8 65 ff ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bb1b:	83 c4 20             	add    esp,0x20
c000bb1e:	6a 00                	push   0x0
c000bb20:	68 46 04 00 c0       	push   0xc0000446
c000bb25:	6a 04                	push   0x4
c000bb27:	53                   	push   ebx
c000bb28:	e8 53 ff ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bb2d:	6a 00                	push   0x0
c000bb2f:	68 50 04 00 c0       	push   0xc0000450
c000bb34:	6a 05                	push   0x5
c000bb36:	53                   	push   ebx
c000bb37:	e8 44 ff ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bb3c:	83 c4 20             	add    esp,0x20
c000bb3f:	6a 00                	push   0x0
c000bb41:	68 5a 04 00 c0       	push   0xc000045a
c000bb46:	6a 06                	push   0x6
c000bb48:	53                   	push   ebx
c000bb49:	e8 32 ff ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bb4e:	6a 00                	push   0x0
c000bb50:	68 64 04 00 c0       	push   0xc0000464
c000bb55:	6a 07                	push   0x7
c000bb57:	53                   	push   ebx
c000bb58:	e8 23 ff ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bb5d:	83 c4 20             	add    esp,0x20
c000bb60:	6a 00                	push   0x0
c000bb62:	68 6e 04 00 c0       	push   0xc000046e
c000bb67:	6a 08                	push   0x8
c000bb69:	53                   	push   ebx
c000bb6a:	e8 11 ff ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bb6f:	6a 00                	push   0x0
c000bb71:	68 76 04 00 c0       	push   0xc0000476
c000bb76:	6a 09                	push   0x9
c000bb78:	53                   	push   ebx
c000bb79:	e8 02 ff ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bb7e:	83 c4 20             	add    esp,0x20
c000bb81:	6a 00                	push   0x0
c000bb83:	68 80 04 00 c0       	push   0xc0000480
c000bb88:	6a 0a                	push   0xa
c000bb8a:	53                   	push   ebx
c000bb8b:	e8 f0 fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bb90:	6a 00                	push   0x0
c000bb92:	68 88 04 00 c0       	push   0xc0000488
c000bb97:	6a 0b                	push   0xb
c000bb99:	53                   	push   ebx
c000bb9a:	e8 e1 fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bb9f:	83 c4 20             	add    esp,0x20
c000bba2:	6a 00                	push   0x0
c000bba4:	68 90 04 00 c0       	push   0xc0000490
c000bba9:	6a 0c                	push   0xc
c000bbab:	53                   	push   ebx
c000bbac:	e8 cf fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bbb1:	6a 00                	push   0x0
c000bbb3:	68 98 04 00 c0       	push   0xc0000498
c000bbb8:	6a 0d                	push   0xd
c000bbba:	53                   	push   ebx
c000bbbb:	e8 c0 fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bbc0:	83 c4 20             	add    esp,0x20
c000bbc3:	6a 00                	push   0x0
c000bbc5:	68 a0 04 00 c0       	push   0xc00004a0
c000bbca:	6a 0e                	push   0xe
c000bbcc:	53                   	push   ebx
c000bbcd:	e8 ae fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bbd2:	6a 00                	push   0x0
c000bbd4:	68 a8 04 00 c0       	push   0xc00004a8
c000bbd9:	6a 0f                	push   0xf
c000bbdb:	53                   	push   ebx
c000bbdc:	e8 9f fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bbe1:	83 c4 20             	add    esp,0x20
c000bbe4:	6a 00                	push   0x0
c000bbe6:	68 b2 04 00 c0       	push   0xc00004b2
c000bbeb:	6a 10                	push   0x10
c000bbed:	53                   	push   ebx
c000bbee:	e8 8d fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bbf3:	6a 00                	push   0x0
c000bbf5:	68 bc 04 00 c0       	push   0xc00004bc
c000bbfa:	6a 11                	push   0x11
c000bbfc:	53                   	push   ebx
c000bbfd:	e8 7e fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bc02:	83 c4 20             	add    esp,0x20
c000bc05:	6a 00                	push   0x0
c000bc07:	68 c6 04 00 c0       	push   0xc00004c6
c000bc0c:	6a 12                	push   0x12
c000bc0e:	53                   	push   ebx
c000bc0f:	e8 6c fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bc14:	6a 01                	push   0x1
c000bc16:	68 d0 04 00 c0       	push   0xc00004d0
c000bc1b:	6a 60                	push   0x60
c000bc1d:	53                   	push   ebx
c000bc1e:	e8 5d fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bc23:	83 c4 20             	add    esp,0x20
c000bc26:	6a 00                	push   0x0
c000bc28:	68 da 04 00 c0       	push   0xc00004da
c000bc2d:	6a 20                	push   0x20
c000bc2f:	53                   	push   ebx
c000bc30:	e8 4b fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bc35:	6a 00                	push   0x0
c000bc37:	68 e4 04 00 c0       	push   0xc00004e4
c000bc3c:	6a 21                	push   0x21
c000bc3e:	53                   	push   ebx
c000bc3f:	e8 3c fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bc44:	83 c4 20             	add    esp,0x20
c000bc47:	6a 00                	push   0x0
c000bc49:	68 ee 04 00 c0       	push   0xc00004ee
c000bc4e:	6a 22                	push   0x22
c000bc50:	53                   	push   ebx
c000bc51:	e8 2a fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bc56:	6a 00                	push   0x0
c000bc58:	68 f8 04 00 c0       	push   0xc00004f8
c000bc5d:	6a 23                	push   0x23
c000bc5f:	53                   	push   ebx
c000bc60:	e8 1b fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bc65:	83 c4 20             	add    esp,0x20
c000bc68:	6a 00                	push   0x0
c000bc6a:	68 02 05 00 c0       	push   0xc0000502
c000bc6f:	6a 24                	push   0x24
c000bc71:	53                   	push   ebx
c000bc72:	e8 09 fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bc77:	6a 00                	push   0x0
c000bc79:	68 0c 05 00 c0       	push   0xc000050c
c000bc7e:	6a 25                	push   0x25
c000bc80:	53                   	push   ebx
c000bc81:	e8 fa fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bc86:	83 c4 20             	add    esp,0x20
c000bc89:	6a 00                	push   0x0
c000bc8b:	68 16 05 00 c0       	push   0xc0000516
c000bc90:	6a 26                	push   0x26
c000bc92:	53                   	push   ebx
c000bc93:	e8 e8 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bc98:	6a 00                	push   0x0
c000bc9a:	68 20 05 00 c0       	push   0xc0000520
c000bc9f:	6a 27                	push   0x27
c000bca1:	53                   	push   ebx
c000bca2:	e8 d9 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bca7:	83 c4 20             	add    esp,0x20
c000bcaa:	6a 00                	push   0x0
c000bcac:	68 2a 05 00 c0       	push   0xc000052a
c000bcb1:	6a 28                	push   0x28
c000bcb3:	53                   	push   ebx
c000bcb4:	e8 c7 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bcb9:	6a 00                	push   0x0
c000bcbb:	68 34 05 00 c0       	push   0xc0000534
c000bcc0:	6a 29                	push   0x29
c000bcc2:	53                   	push   ebx
c000bcc3:	e8 b8 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bcc8:	83 c4 20             	add    esp,0x20
c000bccb:	6a 00                	push   0x0
c000bccd:	68 3e 05 00 c0       	push   0xc000053e
c000bcd2:	6a 2a                	push   0x2a
c000bcd4:	53                   	push   ebx
c000bcd5:	e8 a6 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bcda:	6a 00                	push   0x0
c000bcdc:	68 48 05 00 c0       	push   0xc0000548
c000bce1:	6a 2b                	push   0x2b
c000bce3:	53                   	push   ebx
c000bce4:	e8 97 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bce9:	83 c4 20             	add    esp,0x20
c000bcec:	6a 00                	push   0x0
c000bcee:	68 52 05 00 c0       	push   0xc0000552
c000bcf3:	6a 2c                	push   0x2c
c000bcf5:	53                   	push   ebx
c000bcf6:	e8 85 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bcfb:	6a 00                	push   0x0
c000bcfd:	68 5c 05 00 c0       	push   0xc000055c
c000bd02:	6a 2d                	push   0x2d
c000bd04:	53                   	push   ebx
c000bd05:	e8 76 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bd0a:	83 c4 20             	add    esp,0x20
c000bd0d:	6a 00                	push   0x0
c000bd0f:	68 66 05 00 c0       	push   0xc0000566
c000bd14:	6a 2e                	push   0x2e
c000bd16:	53                   	push   ebx
c000bd17:	e8 64 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bd1c:	6a 00                	push   0x0
c000bd1e:	68 70 05 00 c0       	push   0xc0000570
c000bd23:	6a 2f                	push   0x2f
c000bd25:	53                   	push   ebx
c000bd26:	e8 55 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bd2b:	83 c4 20             	add    esp,0x20
c000bd2e:	6a 00                	push   0x0
c000bd30:	68 7a 05 00 c0       	push   0xc000057a
c000bd35:	6a 30                	push   0x30
c000bd37:	53                   	push   ebx
c000bd38:	e8 43 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bd3d:	6a 00                	push   0x0
c000bd3f:	68 84 05 00 c0       	push   0xc0000584
c000bd44:	6a 31                	push   0x31
c000bd46:	53                   	push   ebx
c000bd47:	e8 34 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bd4c:	83 c4 20             	add    esp,0x20
c000bd4f:	6a 00                	push   0x0
c000bd51:	68 8e 05 00 c0       	push   0xc000058e
c000bd56:	6a 32                	push   0x32
c000bd58:	53                   	push   ebx
c000bd59:	e8 22 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bd5e:	6a 00                	push   0x0
c000bd60:	68 98 05 00 c0       	push   0xc0000598
c000bd65:	6a 33                	push   0x33
c000bd67:	53                   	push   ebx
c000bd68:	e8 13 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bd6d:	83 c4 20             	add    esp,0x20
c000bd70:	6a 00                	push   0x0
c000bd72:	68 a2 05 00 c0       	push   0xc00005a2
c000bd77:	6a 34                	push   0x34
c000bd79:	53                   	push   ebx
c000bd7a:	e8 01 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bd7f:	6a 00                	push   0x0
c000bd81:	68 ac 05 00 c0       	push   0xc00005ac
c000bd86:	6a 35                	push   0x35
c000bd88:	53                   	push   ebx
c000bd89:	e8 f2 fc ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bd8e:	83 c4 20             	add    esp,0x20
c000bd91:	6a 00                	push   0x0
c000bd93:	68 b6 05 00 c0       	push   0xc00005b6
c000bd98:	6a 36                	push   0x36
c000bd9a:	53                   	push   ebx
c000bd9b:	e8 e0 fc ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bda0:	6a 00                	push   0x0
c000bda2:	68 c0 05 00 c0       	push   0xc00005c0
c000bda7:	6a 37                	push   0x37
c000bda9:	53                   	push   ebx
c000bdaa:	e8 d1 fc ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bdaf:	83 c4 20             	add    esp,0x20
c000bdb2:	e8 d8 25 00 00       	call   c000e38f <Virt::getAKernelVAS()>
c000bdb7:	52                   	push   edx
c000bdb8:	6a 03                	push   0x3
c000bdba:	6a 02                	push   0x2
c000bdbc:	50                   	push   eax
c000bdbd:	e8 0e 2c 00 00       	call   c000e9d0 <VAS::allocatePages(int, int)>
c000bdc2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000bdc9:	89 c6                	mov    esi,eax
c000bdcb:	e8 18 33 00 00       	call   c000f0e8 <operator new(unsigned long)>
c000bdd0:	81 c6 00 20 00 00    	add    esi,0x2000
c000bdd6:	89 04 24             	mov    DWORD PTR [esp],eax
c000bdd9:	89 c7                	mov    edi,eax
c000bddb:	e8 ee 1c 00 00       	call   c000dace <TSS::TSS()>
c000bde0:	83 c4 0c             	add    esp,0xc
c000bde3:	68 6e 04 00 c0       	push   0xc000046e
c000bde8:	56                   	push   esi
c000bde9:	57                   	push   edi
c000bdea:	e8 1f 1d 00 00       	call   c000db0e <TSS::setup(unsigned long, unsigned long)>
c000bdef:	59                   	pop    ecx
c000bdf0:	89 c6                	mov    esi,eax
c000bdf2:	5f                   	pop    edi
c000bdf3:	6a 00                	push   0x0
c000bdf5:	8d 44 24 14          	lea    eax,[esp+0x14]
c000bdf9:	50                   	push   eax
c000bdfa:	e8 db fb ff ff       	call   c000b9da <IDTEntry::IDTEntry(bool)>
c000bdff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be03:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000be08:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000be0e:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000be15:	80 ce 05             	or     dh,0x5
c000be18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be1c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be20:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000be23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be27:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000be2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000be2d:	e8 86 fc ff ff       	call   c000bab8 <IDT::flush()>
c000be32:	83 c4 20             	add    esp,0x20
c000be35:	5b                   	pop    ebx
c000be36:	5e                   	pop    esi
c000be37:	5f                   	pop    edi
c000be38:	c3                   	ret    

c000be39 <sbrk>:
c000be39:	55                   	push   ebp
c000be3a:	57                   	push   edi
c000be3b:	56                   	push   esi
c000be3c:	53                   	push   ebx
c000be3d:	83 ec 1c             	sub    esp,0x1c
c000be40:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000be44:	85 db                	test   ebx,ebx
c000be46:	a1 c0 3b 02 c0       	mov    eax,ds:0xc0023bc0
c000be4b:	0f 84 e4 00 00 00    	je     c000bf35 <sbrk+0xfc>
c000be51:	78 3d                	js     c000be90 <sbrk+0x57>
c000be53:	e8 88 8a 00 00       	call   c00148e0 <thisCPU()>
c000be58:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000be5e:	83 e0 01             	and    eax,0x1
c000be61:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000be65:	a1 c0 3b 02 c0       	mov    eax,ds:0xc0023bc0
c000be6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be6e:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000be74:	89 d8                	mov    eax,ebx
c000be76:	c1 f8 1f             	sar    eax,0x1f
c000be79:	25 ff 0f 00 00       	and    eax,0xfff
c000be7e:	01 c3                	add    ebx,eax
c000be80:	c1 fb 0c             	sar    ebx,0xc
c000be83:	89 df                	mov    edi,ebx
c000be85:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000be89:	be 00 00 00 00       	mov    esi,0x0
c000be8e:	eb 2a                	jmp    c000beba <sbrk+0x81>
c000be90:	83 ec 08             	sub    esp,0x8
c000be93:	53                   	push   ebx
c000be94:	68 e4 12 02 c0       	push   0xc00212e4
c000be99:	e8 7f 33 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000be9e:	83 c4 10             	add    esp,0x10
c000bea1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bea6:	e9 8a 00 00 00       	jmp    c000bf35 <sbrk+0xfc>
c000beab:	81 05 c0 3b 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023bc0,0x1000
c000beb5:	46                   	inc    esi
c000beb6:	39 f7                	cmp    edi,esi
c000beb8:	74 34                	je     c000beee <sbrk+0xb5>
c000beba:	e8 d0 24 00 00       	call   c000e38f <Virt::getAKernelVAS()>
c000bebf:	89 c3                	mov    ebx,eax
c000bec1:	8b 2d c0 3b 02 c0    	mov    ebp,DWORD PTR ds:0xc0023bc0
c000bec7:	e8 f5 06 00 00       	call   c000c5c1 <Phys::allocatePage()>
c000becc:	68 01 04 00 00       	push   0x401
c000bed1:	55                   	push   ebp
c000bed2:	50                   	push   eax
c000bed3:	53                   	push   ebx
c000bed4:	e8 f5 29 00 00       	call   c000e8ce <VAS::mapPage(unsigned long, unsigned long, int)>
c000bed9:	83 c4 10             	add    esp,0x10
c000bedc:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bee1:	74 c8                	je     c000beab <sbrk+0x72>
c000bee3:	8b 1d c0 3b 02 c0    	mov    ebx,DWORD PTR ds:0xc0023bc0
c000bee9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000beec:	eb bd                	jmp    c000beab <sbrk+0x72>
c000beee:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bef3:	74 48                	je     c000bf3d <sbrk+0x104>
c000bef5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bef9:	89 d3                	mov    ebx,edx
c000befb:	c1 eb 0a             	shr    ebx,0xa
c000befe:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bf04:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bf0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf0e:	c1 e0 0c             	shl    eax,0xc
c000bf11:	01 d0                	add    eax,edx
c000bf13:	c1 e8 0a             	shr    eax,0xa
c000bf16:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf1b:	2d 00 00 40 00       	sub    eax,0x400000
c000bf20:	39 c3                	cmp    ebx,eax
c000bf22:	77 0d                	ja     c000bf31 <sbrk+0xf8>
c000bf24:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf27:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf2d:	39 d8                	cmp    eax,ebx
c000bf2f:	73 f3                	jae    c000bf24 <sbrk+0xeb>
c000bf31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf35:	83 c4 1c             	add    esp,0x1c
c000bf38:	5b                   	pop    ebx
c000bf39:	5e                   	pop    esi
c000bf3a:	5f                   	pop    edi
c000bf3b:	5d                   	pop    ebp
c000bf3c:	c3                   	ret    
c000bf3d:	e8 a3 38 01 00       	call   c001f7e5 <CPU::readCR3()>
c000bf42:	83 ec 0c             	sub    esp,0xc
c000bf45:	50                   	push   eax
c000bf46:	e8 ac 38 01 00       	call   c001f7f7 <CPU::writeCR3(unsigned long)>
c000bf4b:	83 c4 10             	add    esp,0x10
c000bf4e:	eb e1                	jmp    c000bf31 <sbrk+0xf8>

c000bf50 <mmap>:
c000bf50:	83 ec 18             	sub    esp,0x18
c000bf53:	68 14 13 02 c0       	push   0xc0021314
c000bf58:	e8 ef 9a 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c000bf5d:	b8 00 00 00 00       	mov    eax,0x0
c000bf62:	83 c4 1c             	add    esp,0x1c
c000bf65:	c3                   	ret    

c000bf66 <munmap>:
c000bf66:	83 ec 18             	sub    esp,0x18
c000bf69:	68 19 13 02 c0       	push   0xc0021319
c000bf6e:	e8 d9 9a 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c000bf73:	b8 00 00 00 00       	mov    eax,0x0
c000bf78:	83 c4 1c             	add    esp,0x1c
c000bf7b:	c3                   	ret    

c000bf7c <liballoc_lock()>:
c000bf7c:	83 ec 0c             	sub    esp,0xc
c000bf7f:	e8 d1 ca 00 00       	call   c0018a55 <lockScheduler()>
c000bf84:	b8 00 00 00 00       	mov    eax,0x0
c000bf89:	83 c4 0c             	add    esp,0xc
c000bf8c:	c3                   	ret    

c000bf8d <liballoc_unlock()>:
c000bf8d:	83 ec 0c             	sub    esp,0xc
c000bf90:	e8 c2 ca 00 00       	call   c0018a57 <unlockScheduler()>
c000bf95:	b8 00 00 00 00       	mov    eax,0x0
c000bf9a:	83 c4 0c             	add    esp,0xc
c000bf9d:	c3                   	ret    

c000bf9e <liballoc_alloc(int)>:
c000bf9e:	83 ec 0c             	sub    esp,0xc
c000bfa1:	e8 e9 23 00 00       	call   c000e38f <Virt::getAKernelVAS()>
c000bfa6:	83 ec 04             	sub    esp,0x4
c000bfa9:	6a 01                	push   0x1
c000bfab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfaf:	50                   	push   eax
c000bfb0:	e8 1b 2a 00 00       	call   c000e9d0 <VAS::allocatePages(int, int)>
c000bfb5:	83 c4 1c             	add    esp,0x1c
c000bfb8:	c3                   	ret    

c000bfb9 <liballoc_free(void*, int)>:
c000bfb9:	83 ec 0c             	sub    esp,0xc
c000bfbc:	e8 ce 23 00 00       	call   c000e38f <Virt::getAKernelVAS()>
c000bfc1:	83 ec 08             	sub    esp,0x8
c000bfc4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfc8:	50                   	push   eax
c000bfc9:	e8 a2 26 00 00       	call   c000e670 <VAS::freeAllocatedPages(unsigned long)>
c000bfce:	b8 00 00 00 00       	mov    eax,0x0
c000bfd3:	83 c4 1c             	add    esp,0x1c
c000bfd6:	c3                   	ret    

c000bfd7 <realloc>:
c000bfd7:	83 ec 14             	sub    esp,0x14
c000bfda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfe2:	e8 64 54 ff ff       	call   c000144b <dlrealloc>
c000bfe7:	83 c4 1c             	add    esp,0x1c
c000bfea:	c3                   	ret    

c000bfeb <malloc>:
c000bfeb:	83 ec 18             	sub    esp,0x18
c000bfee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bff2:	e8 17 4f ff ff       	call   c0000f0e <dlmalloc>
c000bff7:	83 c4 1c             	add    esp,0x1c
c000bffa:	c3                   	ret    

c000bffb <free>:
c000bffb:	83 ec 18             	sub    esp,0x18
c000bffe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c002:	e8 a9 4b ff ff       	call   c0000bb0 <dlfree>
c000c007:	83 c4 1c             	add    esp,0x1c
c000c00a:	c3                   	ret    

c000c00b <rfree>:
c000c00b:	83 ec 18             	sub    esp,0x18
c000c00e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c012:	e8 e4 ff ff ff       	call   c000bffb <free>
c000c017:	83 c4 1c             	add    esp,0x1c
c000c01a:	c3                   	ret    

c000c01b <calloc>:
c000c01b:	56                   	push   esi
c000c01c:	53                   	push   ebx
c000c01d:	83 ec 10             	sub    esp,0x10
c000c020:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c024:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000c029:	53                   	push   ebx
c000c02a:	e8 bc ff ff ff       	call   c000bfeb <malloc>
c000c02f:	89 c6                	mov    esi,eax
c000c031:	83 c4 0c             	add    esp,0xc
c000c034:	53                   	push   ebx
c000c035:	6a 00                	push   0x0
c000c037:	50                   	push   eax
c000c038:	e8 90 46 ff ff       	call   c00006cd <memset>
c000c03d:	89 f0                	mov    eax,esi
c000c03f:	83 c4 14             	add    esp,0x14
c000c042:	5b                   	pop    ebx
c000c043:	5e                   	pop    esi
c000c044:	c3                   	ret    

c000c045 <hwTextMode_loadInData(VgaText*)>:
c000c045:	57                   	push   edi
c000c046:	56                   	push   esi
c000c047:	53                   	push   ebx
c000c048:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000c04c:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000c052:	85 c0                	test   eax,eax
c000c054:	7e 30                	jle    c000c086 <hwTextMode_loadInData(VgaText*)+0x41>
c000c056:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000c059:	31 f6                	xor    esi,esi
c000c05b:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000c05e:	31 c0                	xor    eax,eax
c000c060:	c1 e1 05             	shl    ecx,0x5
c000c063:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000c069:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000c06d:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000c071:	40                   	inc    eax
c000c072:	83 f8 50             	cmp    eax,0x50
c000c075:	75 f2                	jne    c000c069 <hwTextMode_loadInData(VgaText*)+0x24>
c000c077:	46                   	inc    esi
c000c078:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000c07e:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000c084:	7f d5                	jg     c000c05b <hwTextMode_loadInData(VgaText*)+0x16>
c000c086:	5b                   	pop    ebx
c000c087:	5e                   	pop    esi
c000c088:	5f                   	pop    edi
c000c089:	c3                   	ret    

c000c08a <hwTextMode_loadInTitle(VgaText*, char*)>:
c000c08a:	56                   	push   esi
c000c08b:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000c090:	53                   	push   ebx
c000c091:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c095:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c099:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000c09f:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000c0a5:	c1 e0 04             	shl    eax,0x4
c000c0a8:	83 e6 0f             	and    esi,0xf
c000c0ab:	25 ff 00 00 00       	and    eax,0xff
c000c0b0:	83 c2 02             	add    edx,0x2
c000c0b3:	09 f0                	or     eax,esi
c000c0b5:	41                   	inc    ecx
c000c0b6:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000c0ba:	c1 e0 08             	shl    eax,0x8
c000c0bd:	81 e6 ff 00 00 00    	and    esi,0xff
c000c0c3:	09 f0                	or     eax,esi
c000c0c5:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000c0c9:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000c0cf:	75 c8                	jne    c000c099 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000c0d1:	5b                   	pop    ebx
c000c0d2:	5e                   	pop    esi
c000c0d3:	c3                   	ret    

c000c0d4 <hwTextMode_showCursor(VgaText*, bool)>:
c000c0d4:	56                   	push   esi
c000c0d5:	53                   	push   ebx
c000c0d6:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000c0db:	74 38                	je     c000c115 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000c0dd:	bb d4 03 00 00       	mov    ebx,0x3d4
c000c0e2:	b0 0a                	mov    al,0xa
c000c0e4:	89 da                	mov    edx,ebx
c000c0e6:	ee                   	out    dx,al
c000c0e7:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000c0ec:	89 ca                	mov    edx,ecx
c000c0ee:	ec                   	in     al,dx
c000c0ef:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c0f3:	b2 0f                	mov    dl,0xf
c000c0f5:	83 e0 c0             	and    eax,0xffffffc0
c000c0f8:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000c0fe:	09 d0                	or     eax,edx
c000c100:	89 ca                	mov    edx,ecx
c000c102:	ee                   	out    dx,al
c000c103:	b0 0b                	mov    al,0xb
c000c105:	89 da                	mov    edx,ebx
c000c107:	ee                   	out    dx,al
c000c108:	89 ca                	mov    edx,ecx
c000c10a:	ec                   	in     al,dx
c000c10b:	83 e0 e0             	and    eax,0xffffffe0
c000c10e:	83 c8 0f             	or     eax,0xf
c000c111:	ee                   	out    dx,al
c000c112:	5b                   	pop    ebx
c000c113:	5e                   	pop    esi
c000c114:	c3                   	ret    
c000c115:	b0 0a                	mov    al,0xa
c000c117:	ba d4 03 00 00       	mov    edx,0x3d4
c000c11c:	ee                   	out    dx,al
c000c11d:	b0 20                	mov    al,0x20
c000c11f:	ba d5 03 00 00       	mov    edx,0x3d5
c000c124:	ee                   	out    dx,al
c000c125:	5b                   	pop    ebx
c000c126:	5e                   	pop    esi
c000c127:	c3                   	ret    

c000c128 <hwTextMode_update(VgaText*)>:
c000c128:	c3                   	ret    

c000c129 <hwTextMode_updateCursor(VgaText*)>:
c000c129:	56                   	push   esi
c000c12a:	b9 19 00 00 00       	mov    ecx,0x19
c000c12f:	53                   	push   ebx
c000c130:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c134:	8b 90 ac 0f 00 00    	mov    edx,DWORD PTR [eax+0xfac]
c000c13a:	8b 98 b4 0f 00 00    	mov    ebx,DWORD PTR [eax+0xfb4]
c000c140:	29 d1                	sub    ecx,edx
c000c142:	8b b0 b0 0f 00 00    	mov    esi,DWORD PTR [eax+0xfb0]
c000c148:	01 d9                	add    ecx,ebx
c000c14a:	b0 0f                	mov    al,0xf
c000c14c:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000c14f:	c1 e1 04             	shl    ecx,0x4
c000c152:	01 f1                	add    ecx,esi
c000c154:	be d4 03 00 00       	mov    esi,0x3d4
c000c159:	89 f2                	mov    edx,esi
c000c15b:	ee                   	out    dx,al
c000c15c:	bb d5 03 00 00       	mov    ebx,0x3d5
c000c161:	88 c8                	mov    al,cl
c000c163:	89 da                	mov    edx,ebx
c000c165:	ee                   	out    dx,al
c000c166:	b0 0e                	mov    al,0xe
c000c168:	89 f2                	mov    edx,esi
c000c16a:	ee                   	out    dx,al
c000c16b:	89 c8                	mov    eax,ecx
c000c16d:	89 da                	mov    edx,ebx
c000c16f:	66 c1 e8 08          	shr    ax,0x8
c000c173:	ee                   	out    dx,al
c000c174:	5b                   	pop    ebx
c000c175:	5e                   	pop    esi
c000c176:	c3                   	ret    

c000c177 <hwTextMode_disableBlink(VgaText*, bool)>:
c000c177:	ba da 03 00 00       	mov    edx,0x3da
c000c17c:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000c181:	75 18                	jne    c000c19b <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000c183:	ec                   	in     al,dx
c000c184:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c189:	b0 30                	mov    al,0x30
c000c18b:	89 ca                	mov    edx,ecx
c000c18d:	ee                   	out    dx,al
c000c18e:	ba c1 03 00 00       	mov    edx,0x3c1
c000c193:	ec                   	in     al,dx
c000c194:	83 c8 08             	or     eax,0x8
c000c197:	89 ca                	mov    edx,ecx
c000c199:	ee                   	out    dx,al
c000c19a:	c3                   	ret    
c000c19b:	ec                   	in     al,dx
c000c19c:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c1a1:	b0 30                	mov    al,0x30
c000c1a3:	89 ca                	mov    edx,ecx
c000c1a5:	ee                   	out    dx,al
c000c1a6:	ba c1 03 00 00       	mov    edx,0x3c1
c000c1ab:	ec                   	in     al,dx
c000c1ac:	83 e0 f7             	and    eax,0xfffffff7
c000c1af:	89 ca                	mov    edx,ecx
c000c1b1:	ee                   	out    dx,al
c000c1b2:	c3                   	ret    

c000c1b3 <hwTextMode_scrollScreen(VgaText*)>:
c000c1b3:	55                   	push   ebp
c000c1b4:	bd 02 00 00 00       	mov    ebp,0x2
c000c1b9:	57                   	push   edi
c000c1ba:	56                   	push   esi
c000c1bb:	53                   	push   ebx
c000c1bc:	83 ec 1c             	sub    esp,0x1c
c000c1bf:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000c1c7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c1cb:	31 c0                	xor    eax,eax
c000c1cd:	eb 0b                	jmp    c000c1da <hwTextMode_scrollScreen(VgaText*)+0x27>
c000c1cf:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c1d5:	74 58                	je     c000c22f <hwTextMode_scrollScreen(VgaText*)+0x7c>
c000c1d7:	43                   	inc    ebx
c000c1d8:	89 f0                	mov    eax,esi
c000c1da:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000c1e0:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000c1e6:	88 13                	mov    BYTE PTR [ebx],dl
c000c1e8:	8d 70 01             	lea    esi,[eax+0x1]
c000c1eb:	83 fd 18             	cmp    ebp,0x18
c000c1ee:	75 df                	jne    c000c1cf <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000c1f0:	a8 01                	test   al,0x1
c000c1f2:	75 13                	jne    c000c207 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000c1f4:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000c1f7:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c1fd:	75 d8                	jne    c000c1d7 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000c1ff:	83 c4 1c             	add    esp,0x1c
c000c202:	5b                   	pop    ebx
c000c203:	5e                   	pop    esi
c000c204:	5f                   	pop    edi
c000c205:	5d                   	pop    ebp
c000c206:	c3                   	ret    
c000c207:	52                   	push   edx
c000c208:	31 c0                	xor    eax,eax
c000c20a:	52                   	push   edx
c000c20b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c20f:	8a 81 cc 0f 00 00    	mov    al,BYTE PTR [ecx+0xfcc]
c000c215:	50                   	push   eax
c000c216:	31 c0                	xor    eax,eax
c000c218:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000c21c:	8a 81 d0 0f 00 00    	mov    al,BYTE PTR [ecx+0xfd0]
c000c222:	50                   	push   eax
c000c223:	e8 84 0b 00 00       	call   c000cdac <VgaText::combineColours(unsigned char, unsigned char)>
c000c228:	83 c4 10             	add    esp,0x10
c000c22b:	88 07                	mov    BYTE PTR [edi],al
c000c22d:	eb c8                	jmp    c000c1f7 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000c22f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c233:	45                   	inc    ebp
c000c234:	05 a0 00 00 00       	add    eax,0xa0
c000c239:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c23d:	eb 88                	jmp    c000c1c7 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000c23f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000c23f:	56                   	push   esi
c000c240:	31 c0                	xor    eax,eax
c000c242:	53                   	push   ebx
c000c243:	83 ec 0c             	sub    esp,0xc
c000c246:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c24a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c24e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000c252:	50                   	push   eax
c000c253:	31 c0                	xor    eax,eax
c000c255:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c259:	50                   	push   eax
c000c25a:	e8 4d 0b 00 00       	call   c000cdac <VgaText::combineColours(unsigned char, unsigned char)>
c000c25f:	5a                   	pop    edx
c000c260:	25 ff 00 00 00       	and    eax,0xff
c000c265:	59                   	pop    ecx
c000c266:	50                   	push   eax
c000c267:	89 f0                	mov    eax,esi
c000c269:	0f be f0             	movsx  esi,al
c000c26c:	56                   	push   esi
c000c26d:	e8 e0 0b 00 00       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000c272:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c276:	ba 19 00 00 00       	mov    edx,0x19
c000c27b:	8b b1 ac 0f 00 00    	mov    esi,DWORD PTR [ecx+0xfac]
c000c281:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c284:	29 f2                	sub    edx,esi
c000c286:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c28a:	c1 e1 04             	shl    ecx,0x4
c000c28d:	8d 14 92             	lea    edx,[edx+edx*4]
c000c290:	01 d9                	add    ecx,ebx
c000c292:	c1 e2 04             	shl    edx,0x4
c000c295:	01 ca                	add    edx,ecx
c000c297:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000c29f:	83 c4 14             	add    esp,0x14
c000c2a2:	5b                   	pop    ebx
c000c2a3:	5e                   	pop    esi
c000c2a4:	c3                   	ret    

c000c2a5 <setupTextMode()>:
c000c2a5:	c7 05 58 48 02 c0 77 c1 00 c0 	mov    DWORD PTR ds:0xc0024858,0xc000c177
c000c2af:	c7 05 44 48 02 c0 45 c0 00 c0 	mov    DWORD PTR ds:0xc0024844,0xc000c045
c000c2b9:	c7 05 40 48 02 c0 8a c0 00 c0 	mov    DWORD PTR ds:0xc0024840,0xc000c08a
c000c2c3:	c7 05 4c 48 02 c0 b3 c1 00 c0 	mov    DWORD PTR ds:0xc002484c,0xc000c1b3
c000c2cd:	c7 05 54 48 02 c0 d4 c0 00 c0 	mov    DWORD PTR ds:0xc0024854,0xc000c0d4
c000c2d7:	c7 05 48 48 02 c0 28 c1 00 c0 	mov    DWORD PTR ds:0xc0024848,0xc000c128
c000c2e1:	c7 05 50 48 02 c0 29 c1 00 c0 	mov    DWORD PTR ds:0xc0024850,0xc000c129
c000c2eb:	c7 05 5c 48 02 c0 3f c2 00 c0 	mov    DWORD PTR ds:0xc002485c,0xc000c23f
c000c2f5:	c3                   	ret    

c000c2f6 <kernel_main>:
c000c2f6:	57                   	push   edi
c000c2f7:	bf f9 03 00 00       	mov    edi,0x3f9
c000c2fc:	56                   	push   esi
c000c2fd:	31 f6                	xor    esi,esi
c000c2ff:	53                   	push   ebx
c000c300:	83 ec 10             	sub    esp,0x10
c000c303:	e8 fe 08 00 00       	call   c000cc06 <installVgaTextImplementation()>
c000c308:	e8 98 ff ff ff       	call   c000c2a5 <setupTextMode()>
c000c30d:	89 f0                	mov    eax,esi
c000c30f:	89 fa                	mov    edx,edi
c000c311:	ee                   	out    dx,al
c000c312:	bb fb 03 00 00       	mov    ebx,0x3fb
c000c317:	b0 80                	mov    al,0x80
c000c319:	89 da                	mov    edx,ebx
c000c31b:	ee                   	out    dx,al
c000c31c:	b1 03                	mov    cl,0x3
c000c31e:	ba f8 03 00 00       	mov    edx,0x3f8
c000c323:	88 c8                	mov    al,cl
c000c325:	ee                   	out    dx,al
c000c326:	89 f0                	mov    eax,esi
c000c328:	89 fa                	mov    edx,edi
c000c32a:	ee                   	out    dx,al
c000c32b:	88 c8                	mov    al,cl
c000c32d:	89 da                	mov    edx,ebx
c000c32f:	ee                   	out    dx,al
c000c330:	b0 c7                	mov    al,0xc7
c000c332:	ba fa 03 00 00       	mov    edx,0x3fa
c000c337:	ee                   	out    dx,al
c000c338:	b0 0b                	mov    al,0xb
c000c33a:	ba fc 03 00 00       	mov    edx,0x3fc
c000c33f:	ee                   	out    dx,al
c000c340:	a1 24 05 00 00       	mov    eax,ds:0x524
c000c345:	83 ec 0c             	sub    esp,0xc
c000c348:	05 ff 0f 00 00       	add    eax,0xfff
c000c34d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c352:	50                   	push   eax
c000c353:	e8 6d 03 00 00       	call   c000c6c5 <Phys::physicalMemorySetup(unsigned int)>
c000c358:	e8 b6 1f 00 00       	call   c000e313 <Virt::virtualMemorySetup()>
c000c35d:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000c363:	83 c4 10             	add    esp,0x10
c000c366:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000c36c:	75 0e                	jne    c000c37c <kernel_main+0x86>
c000c36e:	89 d8                	mov    eax,ebx
c000c370:	25 48 03 00 00       	and    eax,0x348
c000c375:	3d 00 03 00 00       	cmp    eax,0x300
c000c37a:	74 10                	je     c000c38c <kernel_main+0x96>
c000c37c:	83 ec 0c             	sub    esp,0xc
c000c37f:	68 c7 28 02 c0       	push   0xc00228c7
c000c384:	e8 c3 96 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c000c389:	83 c4 10             	add    esp,0x10
c000c38c:	83 ec 0c             	sub    esp,0xc
c000c38f:	89 1d c0 47 02 c0    	mov    DWORD PTR ds:0xc00247c0,ebx
c000c395:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000c399:	53                   	push   ebx
c000c39a:	e8 11 21 00 00       	call   c000e4b0 <VAS::VAS()>
c000c39f:	89 1d 04 49 02 c0    	mov    DWORD PTR ds:0xc0024904,ebx
c000c3a5:	e8 76 3c ff ff       	call   c0000020 <callGlobalConstructors>
c000c3aa:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000c3b1:	e8 32 2d 00 00       	call   c000f0e8 <operator new(unsigned long)>
c000c3b6:	89 04 24             	mov    DWORD PTR [esp],eax
c000c3b9:	89 c6                	mov    esi,eax
c000c3bb:	e8 78 ea ff ff       	call   c000ae38 <Computer::Computer()>
c000c3c0:	6a 00                	push   0x0
c000c3c2:	6a 00                	push   0x0
c000c3c4:	89 35 a8 47 02 c0    	mov    DWORD PTR ds:0xc00247a8,esi
c000c3ca:	6a 00                	push   0x0
c000c3cc:	56                   	push   esi
c000c3cd:	e8 5a f2 ff ff       	call   c000b62c <Computer::open(int, int, void*)>
c000c3d2:	83 c4 14             	add    esp,0x14
c000c3d5:	53                   	push   ebx
c000c3d6:	e8 87 23 00 00       	call   c000e762 <VAS::~VAS()>
c000c3db:	c7 04 24 20 13 02 c0 	mov    DWORD PTR [esp],0xc0021320
c000c3e2:	e8 65 96 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c000c3e7:	83 c4 20             	add    esp,0x20
c000c3ea:	5b                   	pop    ebx
c000c3eb:	5e                   	pop    esi
c000c3ec:	5f                   	pop    edi
c000c3ed:	c3                   	ret    

c000c3ee <Phys::allocateDMA(unsigned long)>:
c000c3ee:	57                   	push   edi
c000c3ef:	31 d2                	xor    edx,edx
c000c3f1:	56                   	push   esi
c000c3f2:	31 ff                	xor    edi,edi
c000c3f4:	53                   	push   ebx
c000c3f5:	31 c9                	xor    ecx,ecx
c000c3f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3fb:	31 f6                	xor    esi,esi
c000c3fd:	05 ff 0f 00 00       	add    eax,0xfff
c000c402:	c1 e8 0c             	shr    eax,0xc
c000c405:	eb 17                	jmp    c000c41e <Phys::allocateDMA(unsigned long)+0x30>
c000c407:	85 c9                	test   ecx,ecx
c000c409:	75 04                	jne    c000c40f <Phys::allocateDMA(unsigned long)+0x21>
c000c40b:	89 d7                	mov    edi,edx
c000c40d:	89 d6                	mov    esi,edx
c000c40f:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c412:	39 d8                	cmp    eax,ebx
c000c414:	74 1f                	je     c000c435 <Phys::allocateDMA(unsigned long)+0x47>
c000c416:	42                   	inc    edx
c000c417:	89 d9                	mov    ecx,ebx
c000c419:	83 fa 2f             	cmp    edx,0x2f
c000c41c:	7f 11                	jg     c000c42f <Phys::allocateDMA(unsigned long)+0x41>
c000c41e:	80 ba 00 48 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdb800],0x0
c000c425:	74 e0                	je     c000c407 <Phys::allocateDMA(unsigned long)+0x19>
c000c427:	31 c9                	xor    ecx,ecx
c000c429:	42                   	inc    edx
c000c42a:	83 fa 2f             	cmp    edx,0x2f
c000c42d:	7e ef                	jle    c000c41e <Phys::allocateDMA(unsigned long)+0x30>
c000c42f:	5b                   	pop    ebx
c000c430:	31 c0                	xor    eax,eax
c000c432:	5e                   	pop    esi
c000c433:	5f                   	pop    edi
c000c434:	c3                   	ret    
c000c435:	8d 54 06 ff          	lea    edx,[esi+eax*1-0x1]
c000c439:	89 d3                	mov    ebx,edx
c000c43b:	c1 fb 1f             	sar    ebx,0x1f
c000c43e:	83 e3 0f             	and    ebx,0xf
c000c441:	01 d3                	add    ebx,edx
c000c443:	89 f2                	mov    edx,esi
c000c445:	c1 fb 04             	sar    ebx,0x4
c000c448:	c1 fa 04             	sar    edx,0x4
c000c44b:	39 da                	cmp    edx,ebx
c000c44d:	75 30                	jne    c000c47f <Phys::allocateDMA(unsigned long)+0x91>
c000c44f:	85 c0                	test   eax,eax
c000c451:	74 1b                	je     c000c46e <Phys::allocateDMA(unsigned long)+0x80>
c000c453:	bf 00 48 02 c0       	mov    edi,0xc0024800
c000c458:	8d 96 00 48 02 c0    	lea    edx,[esi-0x3ffdb800]
c000c45e:	83 f7 ff             	xor    edi,0xffffffff
c000c461:	29 f7                	sub    edi,esi
c000c463:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c466:	42                   	inc    edx
c000c467:	8d 04 17             	lea    eax,[edi+edx*1]
c000c46a:	39 c1                	cmp    ecx,eax
c000c46c:	7f f5                	jg     c000c463 <Phys::allocateDMA(unsigned long)+0x75>
c000c46e:	85 db                	test   ebx,ebx
c000c470:	74 13                	je     c000c485 <Phys::allocateDMA(unsigned long)+0x97>
c000c472:	5b                   	pop    ebx
c000c473:	8d 86 50 20 0c 00    	lea    eax,[esi+0xc2050]
c000c479:	c1 e0 0c             	shl    eax,0xc
c000c47c:	5e                   	pop    esi
c000c47d:	5f                   	pop    edi
c000c47e:	c3                   	ret    
c000c47f:	89 fa                	mov    edx,edi
c000c481:	31 c9                	xor    ecx,ecx
c000c483:	eb a4                	jmp    c000c429 <Phys::allocateDMA(unsigned long)+0x3b>
c000c485:	c1 e6 0c             	shl    esi,0xc
c000c488:	5b                   	pop    ebx
c000c489:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000c48f:	5e                   	pop    esi
c000c490:	5f                   	pop    edi
c000c491:	c3                   	ret    

c000c492 <Phys::freeDMA(unsigned long, unsigned long)>:
c000c492:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c496:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c49a:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c4a0:	c1 e9 0c             	shr    ecx,0xc
c000c4a3:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c4a8:	76 25                	jbe    c000c4cf <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c4aa:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c4af:	c1 e8 0c             	shr    eax,0xc
c000c4b2:	8d 50 10             	lea    edx,[eax+0x10]
c000c4b5:	85 c9                	test   ecx,ecx
c000c4b7:	74 15                	je     c000c4ce <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c4b9:	8d 82 00 48 02 c0    	lea    eax,[edx-0x3ffdb800]
c000c4bf:	8d 94 11 00 48 02 c0 	lea    edx,[ecx+edx*1-0x3ffdb800]
c000c4c6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c4c9:	40                   	inc    eax
c000c4ca:	39 d0                	cmp    eax,edx
c000c4cc:	75 f8                	jne    c000c4c6 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c4ce:	c3                   	ret    
c000c4cf:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c4d5:	c1 ea 0c             	shr    edx,0xc
c000c4d8:	eb db                	jmp    c000c4b5 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c4da <Phys::setPageState(unsigned long, bool)>:
c000c4da:	56                   	push   esi
c000c4db:	ba 01 00 00 00       	mov    edx,0x1
c000c4e0:	53                   	push   ebx
c000c4e1:	8b 35 c4 3b 02 c0    	mov    esi,DWORD PTR ds:0xc0023bc4
c000c4e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c4eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c4ef:	89 c8                	mov    eax,ecx
c000c4f1:	83 e1 07             	and    ecx,0x7
c000c4f4:	c1 e8 03             	shr    eax,0x3
c000c4f7:	01 c6                	add    esi,eax
c000c4f9:	d3 e2                	shl    edx,cl
c000c4fb:	83 f2 ff             	xor    edx,0xffffffff
c000c4fe:	20 16                	and    BYTE PTR [esi],dl
c000c500:	8b 15 c4 3b 02 c0    	mov    edx,DWORD PTR ds:0xc0023bc4
c000c506:	01 d0                	add    eax,edx
c000c508:	d3 e3                	shl    ebx,cl
c000c50a:	8a 08                	mov    cl,BYTE PTR [eax]
c000c50c:	09 d9                	or     ecx,ebx
c000c50e:	88 08                	mov    BYTE PTR [eax],cl
c000c510:	5b                   	pop    ebx
c000c511:	5e                   	pop    esi
c000c512:	c3                   	ret    

c000c513 <Phys::getPageState(unsigned long)>:
c000c513:	53                   	push   ebx
c000c514:	8b 15 c4 3b 02 c0    	mov    edx,DWORD PTR ds:0xc0023bc4
c000c51a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c51e:	31 db                	xor    ebx,ebx
c000c520:	89 c8                	mov    eax,ecx
c000c522:	83 e1 07             	and    ecx,0x7
c000c525:	c1 e8 03             	shr    eax,0x3
c000c528:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c000c52b:	89 d8                	mov    eax,ebx
c000c52d:	5b                   	pop    ebx
c000c52e:	d3 f8                	sar    eax,cl
c000c530:	83 e0 01             	and    eax,0x1
c000c533:	c3                   	ret    

c000c534 <Phys::freePage(unsigned long)>:
c000c534:	53                   	push   ebx
c000c535:	83 ec 08             	sub    esp,0x8
c000c538:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c53c:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c542:	76 5a                	jbe    c000c59e <Phys::freePage(unsigned long)+0x6a>
c000c544:	c1 eb 0c             	shr    ebx,0xc
c000c547:	53                   	push   ebx
c000c548:	e8 c6 ff ff ff       	call   c000c513 <Phys::getPageState(unsigned long)>
c000c54d:	5a                   	pop    edx
c000c54e:	84 c0                	test   al,al
c000c550:	74 5e                	je     c000c5b0 <Phys::freePage(unsigned long)+0x7c>
c000c552:	a1 ec 47 02 c0       	mov    eax,ds:0xc00247ec
c000c557:	48                   	dec    eax
c000c558:	a3 ec 47 02 c0       	mov    ds:0xc00247ec,eax
c000c55d:	8d 04 80             	lea    eax,[eax+eax*4]
c000c560:	8d 04 80             	lea    eax,[eax+eax*4]
c000c563:	c1 e0 02             	shl    eax,0x2
c000c566:	89 c2                	mov    edx,eax
c000c568:	c1 fa 1f             	sar    edx,0x1f
c000c56b:	f7 3d f0 47 02 c0    	idiv   DWORD PTR ds:0xc00247f0
c000c571:	39 05 e8 47 02 c0    	cmp    DWORD PTR ds:0xc00247e8,eax
c000c577:	75 12                	jne    c000c58b <Phys::freePage(unsigned long)+0x57>
c000c579:	51                   	push   ecx
c000c57a:	51                   	push   ecx
c000c57b:	6a 00                	push   0x0
c000c57d:	53                   	push   ebx
c000c57e:	e8 57 ff ff ff       	call   c000c4da <Phys::setPageState(unsigned long, bool)>
c000c583:	83 c4 10             	add    esp,0x10
c000c586:	83 c4 08             	add    esp,0x8
c000c589:	5b                   	pop    ebx
c000c58a:	c3                   	ret    
c000c58b:	83 ec 0c             	sub    esp,0xc
c000c58e:	a3 e8 47 02 c0       	mov    ds:0xc00247e8,eax
c000c593:	50                   	push   eax
c000c594:	e8 01 0a 00 00       	call   c000cf9a <VgaText::updateRAMUsageDisplay(int)>
c000c599:	83 c4 10             	add    esp,0x10
c000c59c:	eb db                	jmp    c000c579 <Phys::freePage(unsigned long)+0x45>
c000c59e:	68 00 10 00 00       	push   0x1000
c000c5a3:	53                   	push   ebx
c000c5a4:	e8 e9 fe ff ff       	call   c000c492 <Phys::freeDMA(unsigned long, unsigned long)>
c000c5a9:	59                   	pop    ecx
c000c5aa:	5b                   	pop    ebx
c000c5ab:	83 c4 08             	add    esp,0x8
c000c5ae:	5b                   	pop    ebx
c000c5af:	c3                   	ret    
c000c5b0:	c7 44 24 10 3b 13 02 c0 	mov    DWORD PTR [esp+0x10],0xc002133b
c000c5b8:	83 c4 08             	add    esp,0x8
c000c5bb:	5b                   	pop    ebx
c000c5bc:	e9 8b 94 00 00       	jmp    c0015a4c <Krnl::panic(char const*)>

c000c5c1 <Phys::allocatePage()>:
c000c5c1:	56                   	push   esi
c000c5c2:	53                   	push   ebx
c000c5c3:	51                   	push   ecx
c000c5c4:	8b 35 e0 47 02 c0    	mov    esi,DWORD PTR ds:0xc00247e0
c000c5ca:	89 f3                	mov    ebx,esi
c000c5cc:	eb 0a                	jmp    c000c5d8 <Phys::allocatePage()+0x17>
c000c5ce:	89 1d e0 47 02 c0    	mov    DWORD PTR ds:0xc00247e0,ebx
c000c5d4:	39 de                	cmp    esi,ebx
c000c5d6:	74 24                	je     c000c5fc <Phys::allocatePage()+0x3b>
c000c5d8:	53                   	push   ebx
c000c5d9:	e8 35 ff ff ff       	call   c000c513 <Phys::getPageState(unsigned long)>
c000c5de:	5a                   	pop    edx
c000c5df:	84 c0                	test   al,al
c000c5e1:	74 5a                	je     c000c63d <Phys::allocatePage()+0x7c>
c000c5e3:	43                   	inc    ebx
c000c5e4:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c5ea:	75 e2                	jne    c000c5ce <Phys::allocatePage()+0xd>
c000c5ec:	31 db                	xor    ebx,ebx
c000c5ee:	c7 05 e0 47 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00247e0,0x0
c000c5f8:	39 de                	cmp    esi,ebx
c000c5fa:	75 dc                	jne    c000c5d8 <Phys::allocatePage()+0x17>
c000c5fc:	83 ec 0c             	sub    esp,0xc
c000c5ff:	68 51 13 02 c0       	push   0xc0021351
c000c604:	e8 14 2c 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000c609:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000c610:	e8 d9 fd ff ff       	call   c000c3ee <Phys::allocateDMA(unsigned long)>
c000c615:	83 c4 10             	add    esp,0x10
c000c618:	85 c0                	test   eax,eax
c000c61a:	75 5a                	jne    c000c676 <Phys::allocatePage()+0xb5>
c000c61c:	83 ec 0c             	sub    esp,0xc
c000c61f:	68 62 13 02 c0       	push   0xc0021362
c000c624:	e8 23 94 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c000c629:	83 c4 10             	add    esp,0x10
c000c62c:	8b 1d e0 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247e0
c000c632:	53                   	push   ebx
c000c633:	e8 db fe ff ff       	call   c000c513 <Phys::getPageState(unsigned long)>
c000c638:	5a                   	pop    edx
c000c639:	84 c0                	test   al,al
c000c63b:	75 a6                	jne    c000c5e3 <Phys::allocatePage()+0x22>
c000c63d:	6a 01                	push   0x1
c000c63f:	53                   	push   ebx
c000c640:	e8 95 fe ff ff       	call   c000c4da <Phys::setPageState(unsigned long, bool)>
c000c645:	a1 ec 47 02 c0       	mov    eax,ds:0xc00247ec
c000c64a:	59                   	pop    ecx
c000c64b:	40                   	inc    eax
c000c64c:	5b                   	pop    ebx
c000c64d:	a3 ec 47 02 c0       	mov    ds:0xc00247ec,eax
c000c652:	8d 04 80             	lea    eax,[eax+eax*4]
c000c655:	8d 04 80             	lea    eax,[eax+eax*4]
c000c658:	c1 e0 02             	shl    eax,0x2
c000c65b:	89 c2                	mov    edx,eax
c000c65d:	c1 fa 1f             	sar    edx,0x1f
c000c660:	f7 3d f0 47 02 c0    	idiv   DWORD PTR ds:0xc00247f0
c000c666:	39 05 e8 47 02 c0    	cmp    DWORD PTR ds:0xc00247e8,eax
c000c66c:	75 0c                	jne    c000c67a <Phys::allocatePage()+0xb9>
c000c66e:	a1 e0 47 02 c0       	mov    eax,ds:0xc00247e0
c000c673:	c1 e0 0c             	shl    eax,0xc
c000c676:	5a                   	pop    edx
c000c677:	5b                   	pop    ebx
c000c678:	5e                   	pop    esi
c000c679:	c3                   	ret    
c000c67a:	83 ec 0c             	sub    esp,0xc
c000c67d:	a3 e8 47 02 c0       	mov    ds:0xc00247e8,eax
c000c682:	50                   	push   eax
c000c683:	e8 12 09 00 00       	call   c000cf9a <VgaText::updateRAMUsageDisplay(int)>
c000c688:	83 c4 10             	add    esp,0x10
c000c68b:	eb e1                	jmp    c000c66e <Phys::allocatePage()+0xad>

c000c68d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c68d:	56                   	push   esi
c000c68e:	53                   	push   ebx
c000c68f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c693:	39 1d e4 47 02 c0    	cmp    DWORD PTR ds:0xc00247e4,ebx
c000c699:	73 06                	jae    c000c6a1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c69b:	89 1d e4 47 02 c0    	mov    DWORD PTR ds:0xc00247e4,ebx
c000c6a1:	c1 eb 0c             	shr    ebx,0xc
c000c6a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c6a8:	c1 e8 0c             	shr    eax,0xc
c000c6ab:	39 d8                	cmp    eax,ebx
c000c6ad:	73 13                	jae    c000c6c2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c6af:	6a 00                	push   0x0
c000c6b1:	8d 70 01             	lea    esi,[eax+0x1]
c000c6b4:	50                   	push   eax
c000c6b5:	e8 20 fe ff ff       	call   c000c4da <Phys::setPageState(unsigned long, bool)>
c000c6ba:	5a                   	pop    edx
c000c6bb:	89 f0                	mov    eax,esi
c000c6bd:	59                   	pop    ecx
c000c6be:	39 f3                	cmp    ebx,esi
c000c6c0:	75 ed                	jne    c000c6af <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c6c2:	5b                   	pop    ebx
c000c6c3:	5e                   	pop    esi
c000c6c4:	c3                   	ret    

c000c6c5 <Phys::physicalMemorySetup(unsigned int)>:
c000c6c5:	55                   	push   ebp
c000c6c6:	57                   	push   edi
c000c6c7:	56                   	push   esi
c000c6c8:	53                   	push   ebx
c000c6c9:	31 db                	xor    ebx,ebx
c000c6cb:	83 ec 40             	sub    esp,0x40
c000c6ce:	6a 30                	push   0x30
c000c6d0:	6a 00                	push   0x0
c000c6d2:	68 00 48 02 c0       	push   0xc0024800
c000c6d7:	e8 f1 3f ff ff       	call   c00006cd <memset>
c000c6dc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c6e0:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c6e5:	05 00 10 00 00       	add    eax,0x1000
c000c6ea:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c6ee:	83 c4 10             	add    esp,0x10
c000c6f1:	56                   	push   esi
c000c6f2:	56                   	push   esi
c000c6f3:	6a 01                	push   0x1
c000c6f5:	53                   	push   ebx
c000c6f6:	43                   	inc    ebx
c000c6f7:	e8 de fd ff ff       	call   c000c4da <Phys::setPageState(unsigned long, bool)>
c000c6fc:	83 c4 10             	add    esp,0x10
c000c6ff:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c705:	75 ea                	jne    c000c6f1 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c707:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c000c70d:	66 85 c0             	test   ax,ax
c000c710:	0f 84 3b 01 00 00    	je     c000c851 <Phys::physicalMemorySetup(unsigned int)+0x18c>
c000c716:	89 c7                	mov    edi,eax
c000c718:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c720:	81 e7 ff ff 00 00    	and    edi,0xffff
c000c726:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000c72b:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000c72f:	eb 6d                	jmp    c000c79e <Phys::physicalMemorySetup(unsigned int)+0xd9>
c000c731:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000c735:	89 c1                	mov    ecx,eax
c000c737:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000c73b:	0f 83 bc 00 00 00    	jae    c000c7fd <Phys::physicalMemorySetup(unsigned int)+0x138>
c000c741:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c745:	ba 00 00 0a 00       	mov    edx,0xa0000
c000c74a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c74e:	39 f2                	cmp    edx,esi
c000c750:	19 f8                	sbb    eax,edi
c000c752:	73 07                	jae    c000c75b <Phys::physicalMemorySetup(unsigned int)+0x96>
c000c754:	be 00 00 0a 00       	mov    esi,0xa0000
c000c759:	31 ff                	xor    edi,edi
c000c75b:	89 f2                	mov    edx,esi
c000c75d:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000c762:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000c768:	89 f9                	mov    ecx,edi
c000c76a:	83 d1 ff             	adc    ecx,0xffffffff
c000c76d:	39 d0                	cmp    eax,edx
c000c76f:	b8 00 00 00 00       	mov    eax,0x0
c000c774:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c778:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c77c:	19 c8                	sbb    eax,ecx
c000c77e:	0f 82 0d 01 00 00    	jb     c000c891 <Phys::physicalMemorySetup(unsigned int)+0x1cc>
c000c784:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c788:	83 c3 18             	add    ebx,0x18
c000c78b:	41                   	inc    ecx
c000c78c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c790:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c794:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000c798:	0f 84 c3 00 00 00    	je     c000c861 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c79e:	8b 33                	mov    esi,DWORD PTR [ebx]
c000c7a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c7a3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000c7a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7aa:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000c7ad:	01 f0                	add    eax,esi
c000c7af:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7b6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c7ba:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000c7be:	11 fa                	adc    edx,edi
c000c7c0:	55                   	push   ebp
c000c7c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7c5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c7c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c7cd:	51                   	push   ecx
c000c7ce:	56                   	push   esi
c000c7cf:	68 9c 13 02 c0       	push   0xc002139c
c000c7d4:	e8 44 2a 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000c7d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c7dd:	83 c4 10             	add    esp,0x10
c000c7e0:	09 f8                	or     eax,edi
c000c7e2:	75 7d                	jne    c000c861 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c7e4:	83 fd 01             	cmp    ebp,0x1
c000c7e7:	75 11                	jne    c000c7fa <Phys::physicalMemorySetup(unsigned int)+0x135>
c000c7e9:	ba 00 00 08 00       	mov    edx,0x80000
c000c7ee:	89 c1                	mov    ecx,eax
c000c7f0:	39 f2                	cmp    edx,esi
c000c7f2:	19 f9                	sbb    ecx,edi
c000c7f4:	0f 83 37 ff ff ff    	jae    c000c731 <Phys::physicalMemorySetup(unsigned int)+0x6c>
c000c7fa:	4d                   	dec    ebp
c000c7fb:	75 87                	jne    c000c784 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c7fd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c801:	31 d2                	xor    edx,edx
c000c803:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000c807:	89 c8                	mov    eax,ecx
c000c809:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c80d:	19 d1                	sbb    ecx,edx
c000c80f:	0f 82 6f ff ff ff    	jb     c000c784 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c815:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000c81a:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c000c81e:	b9 00 00 00 00       	mov    ecx,0x0
c000c823:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c827:	0f 83 57 ff ff ff    	jae    c000c784 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c82d:	39 c6                	cmp    esi,eax
c000c82f:	19 d7                	sbb    edi,edx
c000c831:	73 6a                	jae    c000c89d <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c833:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c837:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c83b:	29 c7                	sub    edi,eax
c000c83d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c841:	19 d5                	sbb    ebp,edx
c000c843:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000c847:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000c84b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c84f:	eb 4c                	jmp    c000c89d <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c851:	83 ec 0c             	sub    esp,0xc
c000c854:	68 70 13 02 c0       	push   0xc0021370
c000c859:	e8 ee 91 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c000c85e:	83 c4 10             	add    esp,0x10
c000c861:	bb 40 01 00 00       	mov    ebx,0x140
c000c866:	50                   	push   eax
c000c867:	50                   	push   eax
c000c868:	6a 00                	push   0x0
c000c86a:	53                   	push   ebx
c000c86b:	e8 6a fc ff ff       	call   c000c4da <Phys::setPageState(unsigned long, bool)>
c000c870:	8b 15 f0 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247f0
c000c876:	43                   	inc    ebx
c000c877:	42                   	inc    edx
c000c878:	83 c4 10             	add    esp,0x10
c000c87b:	89 15 f0 47 02 c0    	mov    DWORD PTR ds:0xc00247f0,edx
c000c881:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c887:	75 dd                	jne    c000c866 <Phys::physicalMemorySetup(unsigned int)+0x1a1>
c000c889:	83 c4 3c             	add    esp,0x3c
c000c88c:	5b                   	pop    ebx
c000c88d:	5e                   	pop    esi
c000c88e:	5f                   	pop    edi
c000c88f:	5d                   	pop    ebp
c000c890:	c3                   	ret    
c000c891:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c000c895:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c000c89d:	56                   	push   esi
c000c89e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000c8a2:	56                   	push   esi
c000c8a3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000c8a7:	57                   	push   edi
c000c8a8:	68 c0 13 02 c0       	push   0xc00213c0
c000c8ad:	e8 6b 29 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000c8b2:	5d                   	pop    ebp
c000c8b3:	58                   	pop    eax
c000c8b4:	56                   	push   esi
c000c8b5:	57                   	push   edi
c000c8b6:	e8 d2 fd ff ff       	call   c000c68d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c8bb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c8bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c8c3:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c8c7:	8b 15 f0 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247f0
c000c8cd:	83 c4 0c             	add    esp,0xc
c000c8d0:	01 d0                	add    eax,edx
c000c8d2:	a3 f0 47 02 c0       	mov    ds:0xc00247f0,eax
c000c8d7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c8de:	52                   	push   edx
c000c8df:	50                   	push   eax
c000c8e0:	68 7e 13 02 c0       	push   0xc002137e
c000c8e5:	e8 33 29 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000c8ea:	83 c4 10             	add    esp,0x10
c000c8ed:	e9 92 fe ff ff       	jmp    c000c784 <Phys::physicalMemorySetup(unsigned int)+0xbf>

c000c8f2 <Pipe::isAtty()>:
c000c8f2:	31 c0                	xor    eax,eax
c000c8f4:	c3                   	ret    
c000c8f5:	90                   	nop

c000c8f6 <Pipe::~Pipe()>:
c000c8f6:	83 ec 0c             	sub    esp,0xc
c000c8f9:	ba 2c 14 02 c0       	mov    edx,0xc002142c
c000c8fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c902:	89 10                	mov    DWORD PTR [eax],edx
c000c904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c908:	83 ec 0c             	sub    esp,0xc
c000c90b:	50                   	push   eax
c000c90c:	e8 5d 16 00 00       	call   c000df6e <UnixFile::~UnixFile()>
c000c911:	83 c4 10             	add    esp,0x10
c000c914:	90                   	nop
c000c915:	83 c4 0c             	add    esp,0xc
c000c918:	c3                   	ret    
c000c919:	90                   	nop

c000c91a <Pipe::~Pipe()>:
c000c91a:	83 ec 0c             	sub    esp,0xc
c000c91d:	83 ec 0c             	sub    esp,0xc
c000c920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c924:	e8 cd ff ff ff       	call   c000c8f6 <Pipe::~Pipe()>
c000c929:	83 c4 10             	add    esp,0x10
c000c92c:	83 ec 08             	sub    esp,0x8
c000c92f:	6a 20                	push   0x20
c000c931:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c935:	e8 bd 27 00 00       	call   c000f0f7 <operator delete(void*, unsigned long)>
c000c93a:	83 c4 10             	add    esp,0x10
c000c93d:	83 c4 0c             	add    esp,0xc
c000c940:	c3                   	ret    
c000c941:	90                   	nop

c000c942 <Pipe::read(unsigned long long, void*, int*)>:
c000c942:	55                   	push   ebp
c000c943:	57                   	push   edi
c000c944:	56                   	push   esi
c000c945:	53                   	push   ebx
c000c946:	83 ec 1c             	sub    esp,0x1c
c000c949:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c94d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c951:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c955:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c958:	89 c8                	mov    eax,ecx
c000c95a:	99                   	cdq    
c000c95b:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c95f:	74 19                	je     c000c97a <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c961:	39 f9                	cmp    ecx,edi
c000c963:	89 d1                	mov    ecx,edx
c000c965:	19 f1                	sbb    ecx,esi
c000c967:	73 11                	jae    c000c97a <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c969:	e8 e7 c0 00 00       	call   c0018a55 <lockScheduler()>
c000c96e:	e8 2b c4 00 00       	call   c0018d9e <schedule()>
c000c973:	e8 df c0 00 00       	call   c0018a57 <unlockScheduler()>
c000c978:	eb db                	jmp    c000c955 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c97a:	39 f8                	cmp    eax,edi
c000c97c:	89 d1                	mov    ecx,edx
c000c97e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c982:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c986:	19 f1                	sbb    ecx,esi
c000c988:	73 08                	jae    c000c992 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c98a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c98e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c992:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c995:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c998:	29 c6                	sub    esi,eax
c000c99a:	89 f1                	mov    ecx,esi
c000c99c:	c1 f9 1f             	sar    ecx,0x1f
c000c99f:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c9a3:	89 ca                	mov    edx,ecx
c000c9a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c9a9:	19 d1                	sbb    ecx,edx
c000c9ab:	73 04                	jae    c000c9b1 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c9ad:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c9b1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c9b5:	89 fd                	mov    ebp,edi
c000c9b7:	29 f5                	sub    ebp,esi
c000c9b9:	85 f6                	test   esi,esi
c000c9bb:	74 12                	je     c000c9cf <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c9bd:	52                   	push   edx
c000c9be:	56                   	push   esi
c000c9bf:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c9c2:	50                   	push   eax
c000c9c3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c9c7:	e8 cb 3c ff ff       	call   c0000697 <memcpy>
c000c9cc:	83 c4 10             	add    esp,0x10
c000c9cf:	85 ed                	test   ebp,ebp
c000c9d1:	74 12                	je     c000c9e5 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c9d3:	50                   	push   eax
c000c9d4:	55                   	push   ebp
c000c9d5:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c9d8:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c9dc:	56                   	push   esi
c000c9dd:	e8 b5 3c ff ff       	call   c0000697 <memcpy>
c000c9e2:	83 c4 10             	add    esp,0x10
c000c9e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c9e8:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000c9eb:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c9ee:	99                   	cdq    
c000c9ef:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c9f3:	89 f7                	mov    edi,esi
c000c9f5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000c9f9:	c1 ff 1f             	sar    edi,0x1f
c000c9fc:	57                   	push   edi
c000c9fd:	56                   	push   esi
c000c9fe:	52                   	push   edx
c000c9ff:	50                   	push   eax
c000ca00:	e8 07 2c 01 00       	call   c001f60c <__umoddi3>
c000ca05:	83 c4 10             	add    esp,0x10
c000ca08:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ca0b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ca10:	75 10                	jne    c000ca22 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000ca12:	83 ec 0c             	sub    esp,0xc
c000ca15:	68 e9 13 02 c0       	push   0xc00213e9
c000ca1a:	e8 2d 90 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c000ca1f:	83 c4 10             	add    esp,0x10
c000ca22:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca26:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca2a:	89 10                	mov    DWORD PTR [eax],edx
c000ca2c:	83 c4 1c             	add    esp,0x1c
c000ca2f:	31 c0                	xor    eax,eax
c000ca31:	5b                   	pop    ebx
c000ca32:	5e                   	pop    esi
c000ca33:	5f                   	pop    edi
c000ca34:	5d                   	pop    ebp
c000ca35:	c3                   	ret    

c000ca36 <Pipe::write(unsigned long long, void*, int*)>:
c000ca36:	55                   	push   ebp
c000ca37:	57                   	push   edi
c000ca38:	56                   	push   esi
c000ca39:	53                   	push   ebx
c000ca3a:	83 ec 1c             	sub    esp,0x1c
c000ca3d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ca41:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ca45:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ca49:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca4c:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000ca4f:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000ca52:	89 de                	mov    esi,ebx
c000ca54:	89 df                	mov    edi,ebx
c000ca56:	c1 ff 1f             	sar    edi,0x1f
c000ca59:	01 c6                	add    esi,eax
c000ca5b:	89 c8                	mov    eax,ecx
c000ca5d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ca61:	11 d7                	adc    edi,edx
c000ca63:	99                   	cdq    
c000ca64:	89 d0                	mov    eax,edx
c000ca66:	39 f1                	cmp    ecx,esi
c000ca68:	19 f8                	sbb    eax,edi
c000ca6a:	b8 01 00 00 00       	mov    eax,0x1
c000ca6f:	0f 82 80 00 00 00    	jb     c000caf5 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ca75:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ca78:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ca7b:	01 d8                	add    eax,ebx
c000ca7d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000ca81:	99                   	cdq    
c000ca82:	f7 f9                	idiv   ecx
c000ca84:	29 d1                	sub    ecx,edx
c000ca86:	89 d7                	mov    edi,edx
c000ca88:	89 c8                	mov    eax,ecx
c000ca8a:	99                   	cdq    
c000ca8b:	39 ce                	cmp    esi,ecx
c000ca8d:	19 d3                	sbb    ebx,edx
c000ca8f:	bb 00 00 00 00       	mov    ebx,0x0
c000ca94:	72 04                	jb     c000ca9a <Pipe::write(unsigned long long, void*, int*)+0x64>
c000ca96:	89 f3                	mov    ebx,esi
c000ca98:	29 cb                	sub    ebx,ecx
c000ca9a:	89 f1                	mov    ecx,esi
c000ca9c:	29 d9                	sub    ecx,ebx
c000ca9e:	74 1a                	je     c000caba <Pipe::write(unsigned long long, void*, int*)+0x84>
c000caa0:	52                   	push   edx
c000caa1:	51                   	push   ecx
c000caa2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000caa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000caaa:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000caad:	57                   	push   edi
c000caae:	e8 e4 3b ff ff       	call   c0000697 <memcpy>
c000cab3:	83 c4 10             	add    esp,0x10
c000cab6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000caba:	85 db                	test   ebx,ebx
c000cabc:	74 12                	je     c000cad0 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000cabe:	50                   	push   eax
c000cabf:	53                   	push   ebx
c000cac0:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000cac4:	51                   	push   ecx
c000cac5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000cac8:	e8 ca 3b ff ff       	call   c0000697 <memcpy>
c000cacd:	83 c4 10             	add    esp,0x10
c000cad0:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000cad3:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000cad8:	75 10                	jne    c000caea <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000cada:	83 ec 0c             	sub    esp,0xc
c000cadd:	68 05 14 02 c0       	push   0xc0021405
c000cae2:	e8 65 8f 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c000cae7:	83 c4 10             	add    esp,0x10
c000caea:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000caee:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000caf1:	89 38                	mov    DWORD PTR [eax],edi
c000caf3:	31 c0                	xor    eax,eax
c000caf5:	83 c4 1c             	add    esp,0x1c
c000caf8:	5b                   	pop    ebx
c000caf9:	5e                   	pop    esi
c000cafa:	5f                   	pop    edi
c000cafb:	5d                   	pop    ebp
c000cafc:	c3                   	ret    
c000cafd:	90                   	nop

c000cafe <Pipe::Pipe(int)>:
c000cafe:	83 ec 0c             	sub    esp,0xc
c000cb01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb05:	83 ec 08             	sub    esp,0x8
c000cb08:	6a 00                	push   0x0
c000cb0a:	50                   	push   eax
c000cb0b:	e8 bc 12 00 00       	call   c000ddcc <UnixFile::UnixFile(int)>
c000cb10:	83 c4 10             	add    esp,0x10
c000cb13:	ba 2c 14 02 c0       	mov    edx,0xc002142c
c000cb18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1c:	89 10                	mov    DWORD PTR [eax],edx
c000cb1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb22:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb26:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000cb29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb2d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000cb34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb38:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000cb3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cb43:	83 ec 0c             	sub    esp,0xc
c000cb46:	50                   	push   eax
c000cb47:	e8 9f f4 ff ff       	call   c000bfeb <malloc>
c000cb4c:	83 c4 10             	add    esp,0x10
c000cb4f:	89 c2                	mov    edx,eax
c000cb51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb55:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000cb58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb5c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000cb60:	90                   	nop
c000cb61:	83 c4 0c             	add    esp,0xc
c000cb64:	c3                   	ret    
c000cb65:	90                   	nop

c000cb66 <VgaText::isAtty()>:
c000cb66:	b0 01                	mov    al,0x1
c000cb68:	c3                   	ret    
c000cb69:	90                   	nop

c000cb6a <VgaText::~VgaText()>:
c000cb6a:	83 ec 0c             	sub    esp,0xc
c000cb6d:	ba e8 14 02 c0       	mov    edx,0xc00214e8
c000cb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb76:	89 10                	mov    DWORD PTR [eax],edx
c000cb78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb7c:	83 ec 0c             	sub    esp,0xc
c000cb7f:	50                   	push   eax
c000cb80:	e8 e9 13 00 00       	call   c000df6e <UnixFile::~UnixFile()>
c000cb85:	83 c4 10             	add    esp,0x10
c000cb88:	90                   	nop
c000cb89:	83 c4 0c             	add    esp,0xc
c000cb8c:	c3                   	ret    
c000cb8d:	90                   	nop

c000cb8e <VgaText::~VgaText()>:
c000cb8e:	83 ec 0c             	sub    esp,0xc
c000cb91:	83 ec 0c             	sub    esp,0xc
c000cb94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb98:	e8 cd ff ff ff       	call   c000cb6a <VgaText::~VgaText()>
c000cb9d:	83 c4 10             	add    esp,0x10
c000cba0:	83 ec 08             	sub    esp,0x8
c000cba3:	68 60 12 00 00       	push   0x1260
c000cba8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbac:	e8 46 25 00 00       	call   c000f0f7 <operator delete(void*, unsigned long)>
c000cbb1:	83 c4 10             	add    esp,0x10
c000cbb4:	83 c4 0c             	add    esp,0xc
c000cbb7:	c3                   	ret    

c000cbb8 <VgaText::read(unsigned long long, void*, int*)>:
c000cbb8:	83 ec 10             	sub    esp,0x10
c000cbbb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbbf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbc7:	e8 69 58 00 00       	call   c0012435 <readKeyboard(VgaText*, char*, unsigned long)>
c000cbcc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000cbd0:	89 02                	mov    DWORD PTR [edx],eax
c000cbd2:	31 c0                	xor    eax,eax
c000cbd4:	83 c4 1c             	add    esp,0x1c
c000cbd7:	c3                   	ret    

c000cbd8 <setTerminalScrollLock(bool)>:
c000cbd8:	c3                   	ret    

c000cbd9 <addToTerminalCycle(VgaText*)>:
c000cbd9:	8b 15 60 48 02 c0    	mov    edx,DWORD PTR ds:0xc0024860
c000cbdf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbe3:	85 d2                	test   edx,edx
c000cbe5:	75 0c                	jne    c000cbf3 <addToTerminalCycle(VgaText*)+0x1a>
c000cbe7:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000cbed:	a3 60 48 02 c0       	mov    ds:0xc0024860,eax
c000cbf2:	c3                   	ret    
c000cbf3:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000cbf9:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000cbff:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000cc05:	c3                   	ret    

c000cc06 <installVgaTextImplementation()>:
c000cc06:	83 ec 10             	sub    esp,0x10
c000cc09:	6a 20                	push   0x20
c000cc0b:	6a 00                	push   0x0
c000cc0d:	68 40 48 02 c0       	push   0xc0024840
c000cc12:	e8 b6 3a ff ff       	call   c00006cd <memset>
c000cc17:	83 c4 1c             	add    esp,0x1c
c000cc1a:	c3                   	ret    

c000cc1b <scrollTerminalScrollLock(int)>:
c000cc1b:	c3                   	ret    

c000cc1c <VgaText::load()>:
c000cc1c:	53                   	push   ebx
c000cc1d:	31 c0                	xor    eax,eax
c000cc1f:	83 ec 58             	sub    esp,0x58
c000cc22:	89 e2                	mov    edx,esp
c000cc24:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000cc28:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000cc2c:	40                   	inc    eax
c000cc2d:	83 f8 50             	cmp    eax,0x50
c000cc30:	75 f6                	jne    c000cc28 <VgaText::load()+0xc>
c000cc32:	31 c0                	xor    eax,eax
c000cc34:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000cc3b:	84 c9                	test   cl,cl
c000cc3d:	74 06                	je     c000cc45 <VgaText::load()+0x29>
c000cc3f:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cc42:	40                   	inc    eax
c000cc43:	eb ef                	jmp    c000cc34 <VgaText::load()+0x18>
c000cc45:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000cc4b:	85 c0                	test   eax,eax
c000cc4d:	74 09                	je     c000cc58 <VgaText::load()+0x3c>
c000cc4f:	51                   	push   ecx
c000cc50:	51                   	push   ecx
c000cc51:	52                   	push   edx
c000cc52:	53                   	push   ebx
c000cc53:	ff d0                	call   eax
c000cc55:	83 c4 10             	add    esp,0x10
c000cc58:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000cc5e:	85 c0                	test   eax,eax
c000cc60:	74 09                	je     c000cc6b <VgaText::load()+0x4f>
c000cc62:	83 ec 0c             	sub    esp,0xc
c000cc65:	53                   	push   ebx
c000cc66:	ff d0                	call   eax
c000cc68:	83 c4 10             	add    esp,0x10
c000cc6b:	83 c4 58             	add    esp,0x58
c000cc6e:	5b                   	pop    ebx
c000cc6f:	c3                   	ret    

c000cc70 <VgaText::updateCursor()>:
c000cc70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc74:	39 05 64 48 02 c0    	cmp    DWORD PTR ds:0xc0024864,eax
c000cc7a:	75 0c                	jne    c000cc88 <VgaText::updateCursor()+0x18>
c000cc7c:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000cc82:	85 c0                	test   eax,eax
c000cc84:	74 02                	je     c000cc88 <VgaText::updateCursor()+0x18>
c000cc86:	ff e0                	jmp    eax
c000cc88:	c3                   	ret    
c000cc89:	90                   	nop

c000cc8a <VgaText::showCursor(bool)>:
c000cc8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc92:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000cc98:	c3                   	ret    
c000cc99:	90                   	nop

c000cc9a <VgaText::disableBlink(bool)>:
c000cc9a:	56                   	push   esi
c000cc9b:	53                   	push   ebx
c000cc9c:	51                   	push   ecx
c000cc9d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cca1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cca5:	39 1d 64 48 02 c0    	cmp    DWORD PTR ds:0xc0024864,ebx
c000ccab:	75 18                	jne    c000ccc5 <VgaText::disableBlink(bool)+0x2b>
c000ccad:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000ccb3:	85 c0                	test   eax,eax
c000ccb5:	74 0e                	je     c000ccc5 <VgaText::disableBlink(bool)+0x2b>
c000ccb7:	89 f1                	mov    ecx,esi
c000ccb9:	52                   	push   edx
c000ccba:	52                   	push   edx
c000ccbb:	0f b6 d1             	movzx  edx,cl
c000ccbe:	52                   	push   edx
c000ccbf:	53                   	push   ebx
c000ccc0:	ff d0                	call   eax
c000ccc2:	83 c4 10             	add    esp,0x10
c000ccc5:	89 f0                	mov    eax,esi
c000ccc7:	83 f0 01             	xor    eax,0x1
c000ccca:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000ccd0:	58                   	pop    eax
c000ccd1:	5b                   	pop    ebx
c000ccd2:	5e                   	pop    esi
c000ccd3:	c3                   	ret    

c000ccd4 <VgaText::doANSI_SGR(int)>:
c000ccd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ccd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccdc:	85 d2                	test   edx,edx
c000ccde:	75 14                	jne    c000ccf4 <VgaText::doANSI_SGR(int)+0x20>
c000cce0:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000cce6:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000ccec:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000ccf2:	eb 65                	jmp    c000cd59 <VgaText::doANSI_SGR(int)+0x85>
c000ccf4:	83 fa 07             	cmp    edx,0x7
c000ccf7:	75 14                	jne    c000cd0d <VgaText::doANSI_SGR(int)+0x39>
c000ccf9:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000ccff:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000cd05:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000cd0b:	eb 4c                	jmp    c000cd59 <VgaText::doANSI_SGR(int)+0x85>
c000cd0d:	83 fa 1b             	cmp    edx,0x1b
c000cd10:	74 ce                	je     c000cce0 <VgaText::doANSI_SGR(int)+0xc>
c000cd12:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000cd15:	83 f9 07             	cmp    ecx,0x7
c000cd18:	77 09                	ja     c000cd23 <VgaText::doANSI_SGR(int)+0x4f>
c000cd1a:	8b 14 8d 00 3c 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc400]
c000cd21:	eb 20                	jmp    c000cd43 <VgaText::doANSI_SGR(int)+0x6f>
c000cd23:	8d 4a d8             	lea    ecx,[edx-0x28]
c000cd26:	83 f9 07             	cmp    ecx,0x7
c000cd29:	77 09                	ja     c000cd34 <VgaText::doANSI_SGR(int)+0x60>
c000cd2b:	8b 14 8d 00 3c 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc400]
c000cd32:	eb 25                	jmp    c000cd59 <VgaText::doANSI_SGR(int)+0x85>
c000cd34:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000cd37:	83 f9 07             	cmp    ecx,0x7
c000cd3a:	77 0e                	ja     c000cd4a <VgaText::doANSI_SGR(int)+0x76>
c000cd3c:	8b 14 95 b8 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc548]
c000cd43:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd49:	c3                   	ret    
c000cd4a:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000cd4d:	83 f9 07             	cmp    ecx,0x7
c000cd50:	77 0d                	ja     c000cd5f <VgaText::doANSI_SGR(int)+0x8b>
c000cd52:	8b 14 95 90 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc570]
c000cd59:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd5f:	c3                   	ret    

c000cd60 <VgaText::setDefaultBgColour(VgaColour)>:
c000cd60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd68:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000cd6e:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd74:	c3                   	ret    
c000cd75:	90                   	nop

c000cd76 <VgaText::setDefaultFgColour(VgaColour)>:
c000cd76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd7e:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000cd84:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd8a:	c3                   	ret    
c000cd8b:	90                   	nop

c000cd8c <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000cd8c:	53                   	push   ebx
c000cd8d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cd91:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cd95:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cd99:	51                   	push   ecx
c000cd9a:	e8 c1 ff ff ff       	call   c000cd60 <VgaText::setDefaultBgColour(VgaColour)>
c000cd9f:	58                   	pop    eax
c000cda0:	5a                   	pop    edx
c000cda1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cda5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000cda9:	5b                   	pop    ebx
c000cdaa:	eb ca                	jmp    c000cd76 <VgaText::setDefaultFgColour(VgaColour)>

c000cdac <VgaText::combineColours(unsigned char, unsigned char)>:
c000cdac:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000cdb1:	c1 e2 04             	shl    edx,0x4
c000cdb4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000cdb8:	83 e0 0f             	and    eax,0xf
c000cdbb:	09 d0                	or     eax,edx
c000cdbd:	c3                   	ret    

c000cdbe <VgaText::scrollScreen()>:
c000cdbe:	57                   	push   edi
c000cdbf:	56                   	push   esi
c000cdc0:	be 01 00 00 00       	mov    esi,0x1
c000cdc5:	53                   	push   ebx
c000cdc6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cdca:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000cdd0:	31 ff                	xor    edi,edi
c000cdd2:	01 d9                	add    ecx,ebx
c000cdd4:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000cdd7:	83 fe 17             	cmp    esi,0x17
c000cdda:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000cde0:	75 28                	jne    c000ce0a <VgaText::scrollScreen()+0x4c>
c000cde2:	f7 c7 01 00 00 00    	test   edi,0x1
c000cde8:	74 1c                	je     c000ce06 <VgaText::scrollScreen()+0x48>
c000cdea:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000cdf1:	50                   	push   eax
c000cdf2:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000cdf9:	50                   	push   eax
c000cdfa:	e8 ad ff ff ff       	call   c000cdac <VgaText::combineColours(unsigned char, unsigned char)>
c000cdff:	5a                   	pop    edx
c000ce00:	5a                   	pop    edx
c000ce01:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000ce04:	eb 04                	jmp    c000ce0a <VgaText::scrollScreen()+0x4c>
c000ce06:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000ce0a:	47                   	inc    edi
c000ce0b:	41                   	inc    ecx
c000ce0c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ce12:	75 c0                	jne    c000cdd4 <VgaText::scrollScreen()+0x16>
c000ce14:	46                   	inc    esi
c000ce15:	83 fe 18             	cmp    esi,0x18
c000ce18:	75 b0                	jne    c000cdca <VgaText::scrollScreen()+0xc>
c000ce1a:	39 1d 64 48 02 c0    	cmp    DWORD PTR ds:0xc0024864,ebx
c000ce20:	75 24                	jne    c000ce46 <VgaText::scrollScreen()+0x88>
c000ce22:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ce29:	74 08                	je     c000ce33 <VgaText::scrollScreen()+0x75>
c000ce2b:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ce31:	eb 13                	jmp    c000ce46 <VgaText::scrollScreen()+0x88>
c000ce33:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ce39:	85 c0                	test   eax,eax
c000ce3b:	74 09                	je     c000ce46 <VgaText::scrollScreen()+0x88>
c000ce3d:	83 ec 0c             	sub    esp,0xc
c000ce40:	53                   	push   ebx
c000ce41:	ff d0                	call   eax
c000ce43:	83 c4 10             	add    esp,0x10
c000ce46:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce4a:	5b                   	pop    ebx
c000ce4b:	5e                   	pop    esi
c000ce4c:	5f                   	pop    edi
c000ce4d:	e9 1e fe ff ff       	jmp    c000cc70 <VgaText::updateCursor()>

c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ce52:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ce57:	c1 e0 08             	shl    eax,0x8
c000ce5a:	89 c2                	mov    edx,eax
c000ce5c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ce61:	09 d0                	or     eax,edx
c000ce63:	c3                   	ret    

c000ce64 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ce64:	53                   	push   ebx
c000ce65:	83 ec 08             	sub    esp,0x8
c000ce68:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce6d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ce71:	50                   	push   eax
c000ce72:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce77:	50                   	push   eax
c000ce78:	e8 2f ff ff ff       	call   c000cdac <VgaText::combineColours(unsigned char, unsigned char)>
c000ce7d:	5a                   	pop    edx
c000ce7e:	5b                   	pop    ebx
c000ce7f:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ce84:	0f b6 c0             	movzx  eax,al
c000ce87:	50                   	push   eax
c000ce88:	53                   	push   ebx
c000ce89:	e8 c4 ff ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000ce8e:	5a                   	pop    edx
c000ce8f:	5a                   	pop    edx
c000ce90:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ce96:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ce9a:	0f b7 d2             	movzx  edx,dx
c000ce9d:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000cea2:	39 0d 64 48 02 c0    	cmp    DWORD PTR ds:0xc0024864,ecx
c000cea8:	75 14                	jne    c000cebe <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ceaa:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000ceb0:	85 c0                	test   eax,eax
c000ceb2:	74 0a                	je     c000cebe <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ceb4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ceb8:	83 c4 08             	add    esp,0x8
c000cebb:	5b                   	pop    ebx
c000cebc:	ff e0                	jmp    eax
c000cebe:	83 c4 08             	add    esp,0x8
c000cec1:	5b                   	pop    ebx
c000cec2:	c3                   	ret    
c000cec3:	90                   	nop

c000cec4 <VgaText::getCursorX()>:
c000cec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cec8:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000cece:	c3                   	ret    
c000cecf:	90                   	nop

c000ced0 <VgaText::getCursorY()>:
c000ced0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ced4:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000ceda:	c3                   	ret    
c000cedb:	90                   	nop

c000cedc <VgaText::setCursor(int, int)>:
c000cedc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cee0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cee4:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000ceea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ceee:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000cef4:	e9 77 fd ff ff       	jmp    c000cc70 <VgaText::updateCursor()>
c000cef9:	90                   	nop

c000cefa <VgaText::setCursorX(int)>:
c000cefa:	83 ec 10             	sub    esp,0x10
c000cefd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cf01:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000cf07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf0b:	50                   	push   eax
c000cf0c:	e8 cb ff ff ff       	call   c000cedc <VgaText::setCursor(int, int)>
c000cf11:	83 c4 1c             	add    esp,0x1c
c000cf14:	c3                   	ret    
c000cf15:	90                   	nop

c000cf16 <VgaText::setCursorY(int)>:
c000cf16:	83 ec 10             	sub    esp,0x10
c000cf19:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cf1d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf21:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000cf27:	50                   	push   eax
c000cf28:	e8 af ff ff ff       	call   c000cedc <VgaText::setCursor(int, int)>
c000cf2d:	83 c4 1c             	add    esp,0x1c
c000cf30:	c3                   	ret    
c000cf31:	90                   	nop

c000cf32 <VgaText::incrementCursor(bool)>:
c000cf32:	56                   	push   esi
c000cf33:	53                   	push   ebx
c000cf34:	51                   	push   ecx
c000cf35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf39:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf3d:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000cf43:	40                   	inc    eax
c000cf44:	83 f8 50             	cmp    eax,0x50
c000cf47:	74 08                	je     c000cf51 <VgaText::incrementCursor(bool)+0x1f>
c000cf49:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cf4f:	eb 33                	jmp    c000cf84 <VgaText::incrementCursor(bool)+0x52>
c000cf51:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cf57:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cf61:	8d 50 01             	lea    edx,[eax+0x1]
c000cf64:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cf6a:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000cf70:	75 12                	jne    c000cf84 <VgaText::incrementCursor(bool)+0x52>
c000cf72:	83 ec 0c             	sub    esp,0xc
c000cf75:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000cf7b:	53                   	push   ebx
c000cf7c:	e8 3d fe ff ff       	call   c000cdbe <VgaText::scrollScreen()>
c000cf81:	83 c4 10             	add    esp,0x10
c000cf84:	89 f0                	mov    eax,esi
c000cf86:	84 c0                	test   al,al
c000cf88:	74 0c                	je     c000cf96 <VgaText::incrementCursor(bool)+0x64>
c000cf8a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cf8e:	5a                   	pop    edx
c000cf8f:	5b                   	pop    ebx
c000cf90:	5e                   	pop    esi
c000cf91:	e9 da fc ff ff       	jmp    c000cc70 <VgaText::updateCursor()>
c000cf96:	58                   	pop    eax
c000cf97:	5b                   	pop    ebx
c000cf98:	5e                   	pop    esi
c000cf99:	c3                   	ret    

c000cf9a <VgaText::updateRAMUsageDisplay(int)>:
c000cf9a:	53                   	push   ebx
c000cf9b:	bb 0a 00 00 00       	mov    ebx,0xa
c000cfa0:	6a 0f                	push   0xf
c000cfa2:	6a 00                	push   0x0
c000cfa4:	e8 03 fe ff ff       	call   c000cdac <VgaText::combineColours(unsigned char, unsigned char)>
c000cfa9:	5a                   	pop    edx
c000cfaa:	59                   	pop    ecx
c000cfab:	0f b6 c8             	movzx  ecx,al
c000cfae:	51                   	push   ecx
c000cfaf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cfb3:	99                   	cdq    
c000cfb4:	f7 fb                	idiv   ebx
c000cfb6:	83 c0 30             	add    eax,0x30
c000cfb9:	89 d3                	mov    ebx,edx
c000cfbb:	0f be c0             	movsx  eax,al
c000cfbe:	50                   	push   eax
c000cfbf:	e8 8e fe ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfc4:	5a                   	pop    edx
c000cfc5:	83 c3 30             	add    ebx,0x30
c000cfc8:	5a                   	pop    edx
c000cfc9:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cfcf:	0f b6 db             	movzx  ebx,bl
c000cfd2:	51                   	push   ecx
c000cfd3:	53                   	push   ebx
c000cfd4:	e8 79 fe ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfd9:	5b                   	pop    ebx
c000cfda:	5a                   	pop    edx
c000cfdb:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cfe1:	51                   	push   ecx
c000cfe2:	6a 25                	push   0x25
c000cfe4:	e8 69 fe ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfe9:	59                   	pop    ecx
c000cfea:	5b                   	pop    ebx
c000cfeb:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000cff1:	5b                   	pop    ebx
c000cff2:	c3                   	ret    
c000cff3:	90                   	nop

c000cff4 <VgaText::updateDiskUsage()>:
c000cff4:	55                   	push   ebp
c000cff5:	bd 10 27 00 00       	mov    ebp,0x2710
c000cffa:	57                   	push   edi
c000cffb:	56                   	push   esi
c000cffc:	53                   	push   ebx
c000cffd:	6a 0f                	push   0xf
c000cfff:	6a 00                	push   0x0
c000d001:	e8 a6 fd ff ff       	call   c000cdac <VgaText::combineColours(unsigned char, unsigned char)>
c000d006:	0f b6 d8             	movzx  ebx,al
c000d009:	a1 44 65 02 c0       	mov    eax,ds:0xc0026544
c000d00e:	5a                   	pop    edx
c000d00f:	99                   	cdq    
c000d010:	f7 fd                	idiv   ebp
c000d012:	59                   	pop    ecx
c000d013:	b9 0a 00 00 00       	mov    ecx,0xa
c000d018:	99                   	cdq    
c000d019:	f7 f9                	idiv   ecx
c000d01b:	53                   	push   ebx
c000d01c:	8d 42 30             	lea    eax,[edx+0x30]
c000d01f:	0f b6 c0             	movzx  eax,al
c000d022:	50                   	push   eax
c000d023:	e8 2a fe ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d028:	5e                   	pop    esi
c000d029:	5f                   	pop    edi
c000d02a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000d030:	a1 44 65 02 c0       	mov    eax,ds:0xc0026544
c000d035:	bf e8 03 00 00       	mov    edi,0x3e8
c000d03a:	99                   	cdq    
c000d03b:	f7 ff                	idiv   edi
c000d03d:	99                   	cdq    
c000d03e:	f7 f9                	idiv   ecx
c000d040:	53                   	push   ebx
c000d041:	8d 42 30             	lea    eax,[edx+0x30]
c000d044:	0f b6 c0             	movzx  eax,al
c000d047:	50                   	push   eax
c000d048:	e8 05 fe ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d04d:	5a                   	pop    edx
c000d04e:	5e                   	pop    esi
c000d04f:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000d055:	a1 44 65 02 c0       	mov    eax,ds:0xc0026544
c000d05a:	be 64 00 00 00       	mov    esi,0x64
c000d05f:	99                   	cdq    
c000d060:	f7 fe                	idiv   esi
c000d062:	99                   	cdq    
c000d063:	f7 f9                	idiv   ecx
c000d065:	53                   	push   ebx
c000d066:	8d 42 30             	lea    eax,[edx+0x30]
c000d069:	0f b6 c0             	movzx  eax,al
c000d06c:	50                   	push   eax
c000d06d:	e8 e0 fd ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d072:	5a                   	pop    edx
c000d073:	5a                   	pop    edx
c000d074:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000d07a:	a1 44 65 02 c0       	mov    eax,ds:0xc0026544
c000d07f:	53                   	push   ebx
c000d080:	99                   	cdq    
c000d081:	f7 f9                	idiv   ecx
c000d083:	99                   	cdq    
c000d084:	f7 f9                	idiv   ecx
c000d086:	8d 42 30             	lea    eax,[edx+0x30]
c000d089:	0f b6 c0             	movzx  eax,al
c000d08c:	50                   	push   eax
c000d08d:	e8 c0 fd ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d092:	5a                   	pop    edx
c000d093:	5a                   	pop    edx
c000d094:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000d09a:	a1 44 65 02 c0       	mov    eax,ds:0xc0026544
c000d09f:	53                   	push   ebx
c000d0a0:	99                   	cdq    
c000d0a1:	f7 f9                	idiv   ecx
c000d0a3:	8d 42 30             	lea    eax,[edx+0x30]
c000d0a6:	0f b6 c0             	movzx  eax,al
c000d0a9:	50                   	push   eax
c000d0aa:	e8 a3 fd ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0af:	5a                   	pop    edx
c000d0b0:	5a                   	pop    edx
c000d0b1:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000d0b7:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c000d0bc:	53                   	push   ebx
c000d0bd:	99                   	cdq    
c000d0be:	f7 fd                	idiv   ebp
c000d0c0:	99                   	cdq    
c000d0c1:	f7 f9                	idiv   ecx
c000d0c3:	8d 42 30             	lea    eax,[edx+0x30]
c000d0c6:	0f b6 c0             	movzx  eax,al
c000d0c9:	50                   	push   eax
c000d0ca:	e8 83 fd ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0cf:	5d                   	pop    ebp
c000d0d0:	5a                   	pop    edx
c000d0d1:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000d0d7:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c000d0dc:	53                   	push   ebx
c000d0dd:	99                   	cdq    
c000d0de:	f7 ff                	idiv   edi
c000d0e0:	99                   	cdq    
c000d0e1:	f7 f9                	idiv   ecx
c000d0e3:	8d 42 30             	lea    eax,[edx+0x30]
c000d0e6:	0f b6 c0             	movzx  eax,al
c000d0e9:	50                   	push   eax
c000d0ea:	e8 63 fd ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0ef:	5f                   	pop    edi
c000d0f0:	5d                   	pop    ebp
c000d0f1:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000d0f7:	53                   	push   ebx
c000d0f8:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c000d0fd:	99                   	cdq    
c000d0fe:	f7 fe                	idiv   esi
c000d100:	99                   	cdq    
c000d101:	f7 f9                	idiv   ecx
c000d103:	8d 42 30             	lea    eax,[edx+0x30]
c000d106:	0f b6 c0             	movzx  eax,al
c000d109:	50                   	push   eax
c000d10a:	e8 43 fd ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d10f:	5a                   	pop    edx
c000d110:	5e                   	pop    esi
c000d111:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000d117:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c000d11c:	53                   	push   ebx
c000d11d:	99                   	cdq    
c000d11e:	f7 f9                	idiv   ecx
c000d120:	99                   	cdq    
c000d121:	f7 f9                	idiv   ecx
c000d123:	8d 42 30             	lea    eax,[edx+0x30]
c000d126:	0f b6 c0             	movzx  eax,al
c000d129:	50                   	push   eax
c000d12a:	e8 23 fd ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d12f:	5f                   	pop    edi
c000d130:	5d                   	pop    ebp
c000d131:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000d137:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c000d13c:	53                   	push   ebx
c000d13d:	99                   	cdq    
c000d13e:	f7 f9                	idiv   ecx
c000d140:	83 c2 30             	add    edx,0x30
c000d143:	0f b6 d2             	movzx  edx,dl
c000d146:	52                   	push   edx
c000d147:	e8 06 fd ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d14c:	5a                   	pop    edx
c000d14d:	59                   	pop    ecx
c000d14e:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000d154:	5b                   	pop    ebx
c000d155:	5e                   	pop    esi
c000d156:	5f                   	pop    edi
c000d157:	5d                   	pop    ebp
c000d158:	c3                   	ret    
c000d159:	90                   	nop

c000d15a <VgaText::updateTitle()>:
c000d15a:	53                   	push   ebx
c000d15b:	31 c0                	xor    eax,eax
c000d15d:	83 ec 58             	sub    esp,0x58
c000d160:	89 e1                	mov    ecx,esp
c000d162:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000d166:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000d16a:	40                   	inc    eax
c000d16b:	83 f8 50             	cmp    eax,0x50
c000d16e:	75 f6                	jne    c000d166 <VgaText::updateTitle()+0xc>
c000d170:	31 c0                	xor    eax,eax
c000d172:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000d179:	84 db                	test   bl,bl
c000d17b:	74 06                	je     c000d183 <VgaText::updateTitle()+0x29>
c000d17d:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000d180:	40                   	inc    eax
c000d181:	eb ef                	jmp    c000d172 <VgaText::updateTitle()+0x18>
c000d183:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000d189:	85 c0                	test   eax,eax
c000d18b:	74 09                	je     c000d196 <VgaText::updateTitle()+0x3c>
c000d18d:	53                   	push   ebx
c000d18e:	53                   	push   ebx
c000d18f:	51                   	push   ecx
c000d190:	52                   	push   edx
c000d191:	ff d0                	call   eax
c000d193:	83 c4 10             	add    esp,0x10
c000d196:	e8 59 fe ff ff       	call   c000cff4 <VgaText::updateDiskUsage()>
c000d19b:	83 c4 58             	add    esp,0x58
c000d19e:	5b                   	pop    ebx
c000d19f:	c3                   	ret    

c000d1a0 <VgaText::setTitleTextColour(VgaColour)>:
c000d1a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1a8:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000d1ae:	eb aa                	jmp    c000d15a <VgaText::updateTitle()>

c000d1b0 <VgaText::setTitleColour(VgaColour)>:
c000d1b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1b8:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000d1be:	eb 9a                	jmp    c000d15a <VgaText::updateTitle()>

c000d1c0 <VgaText::setTitle(char*)>:
c000d1c0:	53                   	push   ebx
c000d1c1:	83 ec 10             	sub    esp,0x10
c000d1c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1cc:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000d1d2:	50                   	push   eax
c000d1d3:	e8 94 35 ff ff       	call   c000076c <strcpy>
c000d1d8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000d1dc:	83 c4 18             	add    esp,0x18
c000d1df:	5b                   	pop    ebx
c000d1e0:	e9 75 ff ff ff       	jmp    c000d15a <VgaText::updateTitle()>
c000d1e5:	90                   	nop

c000d1e6 <VgaText::decrementCursor(bool)>:
c000d1e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d1ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d1ee:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000d1f4:	85 c0                	test   eax,eax
c000d1f6:	74 07                	je     c000d1ff <VgaText::decrementCursor(bool)+0x19>
c000d1f8:	48                   	dec    eax
c000d1f9:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000d1ff:	84 c9                	test   cl,cl
c000d201:	74 09                	je     c000d20c <VgaText::decrementCursor(bool)+0x26>
c000d203:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d207:	e9 64 fa ff ff       	jmp    c000cc70 <VgaText::updateCursor()>
c000d20c:	c3                   	ret    
c000d20d:	90                   	nop

c000d20e <VgaText::putchar(char, VgaColour, VgaColour)>:
c000d20e:	53                   	push   ebx
c000d20f:	83 ec 08             	sub    esp,0x8
c000d212:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d216:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d21a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d21e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d222:	3c 07                	cmp    al,0x7
c000d224:	75 2a                	jne    c000d250 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000d226:	a1 0c 49 02 c0       	mov    eax,ds:0xc002490c
c000d22b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000d233:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000d23b:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000d243:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d247:	83 c4 08             	add    esp,0x8
c000d24a:	5b                   	pop    ebx
c000d24b:	e9 c0 2d 00 00       	jmp    c0010010 <Buzzer::beep(int, int, bool)>
c000d250:	3c 0d                	cmp    al,0xd
c000d252:	75 0c                	jne    c000d260 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000d254:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d25e:	eb 3b                	jmp    c000d29b <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000d260:	3c 0a                	cmp    al,0xa
c000d262:	75 40                	jne    c000d2a4 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000d264:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000d26a:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d274:	8d 50 01             	lea    edx,[eax+0x1]
c000d277:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000d27d:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000d283:	75 12                	jne    c000d297 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000d285:	83 ec 0c             	sub    esp,0xc
c000d288:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000d28e:	53                   	push   ebx
c000d28f:	e8 2a fb ff ff       	call   c000cdbe <VgaText::scrollScreen()>
c000d294:	83 c4 10             	add    esp,0x10
c000d297:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d29b:	83 c4 08             	add    esp,0x8
c000d29e:	5b                   	pop    ebx
c000d29f:	e9 cc f9 ff ff       	jmp    c000cc70 <VgaText::updateCursor()>
c000d2a4:	3c 08                	cmp    al,0x8
c000d2a6:	75 31                	jne    c000d2d9 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000d2a8:	50                   	push   eax
c000d2a9:	50                   	push   eax
c000d2aa:	6a 01                	push   0x1
c000d2ac:	53                   	push   ebx
c000d2ad:	e8 34 ff ff ff       	call   c000d1e6 <VgaText::decrementCursor(bool)>
c000d2b2:	5a                   	pop    edx
c000d2b3:	59                   	pop    ecx
c000d2b4:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2ba:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2c0:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d2c6:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d2cc:	6a 20                	push   0x20
c000d2ce:	53                   	push   ebx
c000d2cf:	e8 90 fb ff ff       	call   c000ce64 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d2d4:	83 c4 28             	add    esp,0x28
c000d2d7:	5b                   	pop    ebx
c000d2d8:	c3                   	ret    
c000d2d9:	83 ec 08             	sub    esp,0x8
c000d2dc:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2e2:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2e8:	0f be c0             	movsx  eax,al
c000d2eb:	51                   	push   ecx
c000d2ec:	52                   	push   edx
c000d2ed:	50                   	push   eax
c000d2ee:	53                   	push   ebx
c000d2ef:	e8 70 fb ff ff       	call   c000ce64 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d2f4:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000d2f8:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000d300:	83 c4 28             	add    esp,0x28
c000d303:	5b                   	pop    ebx
c000d304:	e9 29 fc ff ff       	jmp    c000cf32 <VgaText::incrementCursor(bool)>
c000d309:	90                   	nop

c000d30a <VgaText::isShowingCursor()>:
c000d30a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d30e:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000d314:	c3                   	ret    
c000d315:	90                   	nop

c000d316 <VgaText::isBlinkDisabled()>:
c000d316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d31a:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000d320:	83 f0 01             	xor    eax,0x1
c000d323:	c3                   	ret    

c000d324 <VgaText::setCursorHeight(int)>:
c000d324:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d328:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d32c:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000d332:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000d339:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d33d:	e9 48 f9 ff ff       	jmp    c000cc8a <VgaText::showCursor(bool)>

c000d342 <VgaText::getCursorHeight()>:
c000d342:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d346:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000d34c:	c3                   	ret    

c000d34d <setActiveTerminal(VgaText*)>:
c000d34d:	53                   	push   ebx
c000d34e:	83 ec 08             	sub    esp,0x8
c000d351:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d355:	85 db                	test   ebx,ebx
c000d357:	75 11                	jne    c000d36a <setActiveTerminal(VgaText*)+0x1d>
c000d359:	c7 44 24 10 40 14 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021440
c000d361:	83 c4 08             	add    esp,0x8
c000d364:	5b                   	pop    ebx
c000d365:	e9 e2 86 00 00       	jmp    c0015a4c <Krnl::panic(char const*)>
c000d36a:	50                   	push   eax
c000d36b:	50                   	push   eax
c000d36c:	53                   	push   ebx
c000d36d:	68 4e 14 02 c0       	push   0xc002144e
c000d372:	e8 a6 1e 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000d377:	a1 64 48 02 c0       	mov    eax,ds:0xc0024864
c000d37c:	83 c4 10             	add    esp,0x10
c000d37f:	85 c0                	test   eax,eax
c000d381:	74 0c                	je     c000d38f <setActiveTerminal(VgaText*)+0x42>
c000d383:	83 ec 0c             	sub    esp,0xc
c000d386:	50                   	push   eax
c000d387:	e8 e4 f8 ff ff       	call   c000cc70 <VgaText::updateCursor()>
c000d38c:	83 c4 10             	add    esp,0x10
c000d38f:	51                   	push   ecx
c000d390:	89 1d 64 48 02 c0    	mov    DWORD PTR ds:0xc0024864,ebx
c000d396:	51                   	push   ecx
c000d397:	53                   	push   ebx
c000d398:	68 66 14 02 c0       	push   0xc0021466
c000d39d:	e8 7b 1e 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000d3a2:	83 c4 0c             	add    esp,0xc
c000d3a5:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d3ab:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d3b1:	53                   	push   ebx
c000d3b2:	e8 25 fb ff ff       	call   c000cedc <VgaText::setCursor(int, int)>
c000d3b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3ba:	e8 57 ff ff ff       	call   c000d316 <VgaText::isBlinkDisabled()>
c000d3bf:	5a                   	pop    edx
c000d3c0:	59                   	pop    ecx
c000d3c1:	0f b6 c0             	movzx  eax,al
c000d3c4:	50                   	push   eax
c000d3c5:	53                   	push   ebx
c000d3c6:	e8 cf f8 ff ff       	call   c000cc9a <VgaText::disableBlink(bool)>
c000d3cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3ce:	e8 6f ff ff ff       	call   c000d342 <VgaText::getCursorHeight()>
c000d3d3:	5a                   	pop    edx
c000d3d4:	59                   	pop    ecx
c000d3d5:	50                   	push   eax
c000d3d6:	53                   	push   ebx
c000d3d7:	e8 48 ff ff ff       	call   c000d324 <VgaText::setCursorHeight(int)>
c000d3dc:	83 c4 10             	add    esp,0x10
c000d3df:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000d3e6:	75 0a                	jne    c000d3f2 <setActiveTerminal(VgaText*)+0xa5>
c000d3e8:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000d3f2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d3f6:	83 c4 08             	add    esp,0x8
c000d3f9:	5b                   	pop    ebx
c000d3fa:	e9 1d f8 ff ff       	jmp    c000cc1c <VgaText::load()>

c000d3ff <doTerminalCycle()>:
c000d3ff:	83 ec 18             	sub    esp,0x18
c000d402:	a1 60 48 02 c0       	mov    eax,ds:0xc0024860
c000d407:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000d40d:	50                   	push   eax
c000d40e:	a3 60 48 02 c0       	mov    ds:0xc0024860,eax
c000d413:	e8 35 ff ff ff       	call   c000d34d <setActiveTerminal(VgaText*)>
c000d418:	83 c4 1c             	add    esp,0x1c
c000d41b:	c3                   	ret    

c000d41c <VgaText::doUpdate()>:
c000d41c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d420:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000d426:	85 c0                	test   eax,eax
c000d428:	74 02                	je     c000d42c <VgaText::doUpdate()+0x10>
c000d42a:	ff e0                	jmp    eax
c000d42c:	c3                   	ret    
c000d42d:	90                   	nop

c000d42e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000d42e:	55                   	push   ebp
c000d42f:	57                   	push   edi
c000d430:	56                   	push   esi
c000d431:	53                   	push   ebx
c000d432:	83 ec 1c             	sub    esp,0x1c
c000d435:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d439:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d43e:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000d445:	50                   	push   eax
c000d446:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d44b:	50                   	push   eax
c000d44c:	e8 5b f9 ff ff       	call   c000cdac <VgaText::combineColours(unsigned char, unsigned char)>
c000d451:	59                   	pop    ecx
c000d452:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000d455:	5b                   	pop    ebx
c000d456:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d45e:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d464:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d468:	0f b7 db             	movzx  ebx,bx
c000d46b:	01 db                	add    ebx,ebx
c000d46d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d471:	01 fb                	add    ebx,edi
c000d473:	31 c0                	xor    eax,eax
c000d475:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d478:	84 c9                	test   cl,cl
c000d47a:	0f 84 3d 01 00 00    	je     c000d5bd <VgaText::puts(char const*, VgaColour, VgaColour)+0x18f>
c000d480:	80 f9 0d             	cmp    cl,0xd
c000d483:	75 0f                	jne    c000d494 <VgaText::puts(char const*, VgaColour, VgaColour)+0x66>
c000d485:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d48f:	e9 23 01 00 00       	jmp    c000d5b7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d494:	80 f9 0a             	cmp    cl,0xa
c000d497:	75 5b                	jne    c000d4f4 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc6>
c000d499:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d49f:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d4a9:	8d 48 01             	lea    ecx,[eax+0x1]
c000d4ac:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d4b2:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d4b8:	75 12                	jne    c000d4cc <VgaText::puts(char const*, VgaColour, VgaColour)+0x9e>
c000d4ba:	83 ec 0c             	sub    esp,0xc
c000d4bd:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d4c3:	55                   	push   ebp
c000d4c4:	e8 f5 f8 ff ff       	call   c000cdbe <VgaText::scrollScreen()>
c000d4c9:	83 c4 10             	add    esp,0x10
c000d4cc:	83 ec 0c             	sub    esp,0xc
c000d4cf:	55                   	push   ebp
c000d4d0:	e8 9b f7 ff ff       	call   c000cc70 <VgaText::updateCursor()>
c000d4d5:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d4dd:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d4e3:	83 c4 10             	add    esp,0x10
c000d4e6:	0f b7 db             	movzx  ebx,bx
c000d4e9:	01 db                	add    ebx,ebx
c000d4eb:	31 c0                	xor    eax,eax
c000d4ed:	01 fb                	add    ebx,edi
c000d4ef:	e9 c3 00 00 00       	jmp    c000d5b7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d4f4:	80 f9 08             	cmp    cl,0x8
c000d4f7:	75 4e                	jne    c000d547 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d4f9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000d4fd:	50                   	push   eax
c000d4fe:	50                   	push   eax
c000d4ff:	6a 01                	push   0x1
c000d501:	55                   	push   ebp
c000d502:	e8 df fc ff ff       	call   c000d1e6 <VgaText::decrementCursor(bool)>
c000d507:	58                   	pop    eax
c000d508:	5a                   	pop    edx
c000d509:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d50f:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d515:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d51b:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d521:	6a 20                	push   0x20
c000d523:	55                   	push   ebp
c000d524:	e8 3b f9 ff ff       	call   c000ce64 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d529:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d531:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d537:	83 c4 20             	add    esp,0x20
c000d53a:	0f b7 db             	movzx  ebx,bx
c000d53d:	01 db                	add    ebx,ebx
c000d53f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d543:	01 fb                	add    ebx,edi
c000d545:	eb 70                	jmp    c000d5b7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d547:	50                   	push   eax
c000d548:	50                   	push   eax
c000d549:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d54e:	50                   	push   eax
c000d54f:	51                   	push   ecx
c000d550:	e8 fd f8 ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d555:	66 89 03             	mov    WORD PTR [ebx],ax
c000d558:	83 c4 10             	add    esp,0x10
c000d55b:	39 2d 64 48 02 c0    	cmp    DWORD PTR ds:0xc0024864,ebp
c000d561:	75 2a                	jne    c000d58d <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d563:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d569:	85 c0                	test   eax,eax
c000d56b:	74 20                	je     c000d58d <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d56d:	52                   	push   edx
c000d56e:	52                   	push   edx
c000d56f:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d575:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d57b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d57f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d583:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d586:	51                   	push   ecx
c000d587:	55                   	push   ebp
c000d588:	ff d0                	call   eax
c000d58a:	83 c4 20             	add    esp,0x20
c000d58d:	50                   	push   eax
c000d58e:	83 c3 02             	add    ebx,0x2
c000d591:	50                   	push   eax
c000d592:	6a 00                	push   0x0
c000d594:	55                   	push   ebp
c000d595:	e8 98 f9 ff ff       	call   c000cf32 <VgaText::incrementCursor(bool)>
c000d59a:	83 c4 10             	add    esp,0x10
c000d59d:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d5a4:	75 0f                	jne    c000d5b5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d5a6:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d5ae:	0f b7 db             	movzx  ebx,bx
c000d5b1:	01 db                	add    ebx,ebx
c000d5b3:	01 fb                	add    ebx,edi
c000d5b5:	b0 01                	mov    al,0x1
c000d5b7:	46                   	inc    esi
c000d5b8:	e9 b8 fe ff ff       	jmp    c000d475 <VgaText::puts(char const*, VgaColour, VgaColour)+0x47>
c000d5bd:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d5c1:	83 ec 0c             	sub    esp,0xc
c000d5c4:	55                   	push   ebp
c000d5c5:	e8 a6 f6 ff ff       	call   c000cc70 <VgaText::updateCursor()>
c000d5ca:	83 c4 10             	add    esp,0x10
c000d5cd:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000d5d1:	84 c0                	test   al,al
c000d5d3:	74 0c                	je     c000d5e1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b3>
c000d5d5:	83 ec 0c             	sub    esp,0xc
c000d5d8:	55                   	push   ebp
c000d5d9:	e8 3e fe ff ff       	call   c000d41c <VgaText::doUpdate()>
c000d5de:	83 c4 10             	add    esp,0x10
c000d5e1:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d5e8:	83 c4 1c             	add    esp,0x1c
c000d5eb:	5b                   	pop    ebx
c000d5ec:	5e                   	pop    esi
c000d5ed:	5f                   	pop    edi
c000d5ee:	5d                   	pop    ebp
c000d5ef:	c3                   	ret    

c000d5f0 <VgaText::clearScreen()>:
c000d5f0:	57                   	push   edi
c000d5f1:	56                   	push   esi
c000d5f2:	31 f6                	xor    esi,esi
c000d5f4:	53                   	push   ebx
c000d5f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d5f9:	52                   	push   edx
c000d5fa:	6a 00                	push   0x0
c000d5fc:	6a 00                	push   0x0
c000d5fe:	53                   	push   ebx
c000d5ff:	e8 d8 f8 ff ff       	call   c000cedc <VgaText::setCursor(int, int)>
c000d604:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d60b:	83 c4 10             	add    esp,0x10
c000d60e:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d614:	7e 26                	jle    c000d63c <VgaText::clearScreen()+0x4c>
c000d616:	31 ff                	xor    edi,edi
c000d618:	50                   	push   eax
c000d619:	50                   	push   eax
c000d61a:	56                   	push   esi
c000d61b:	57                   	push   edi
c000d61c:	47                   	inc    edi
c000d61d:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d623:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d629:	6a 20                	push   0x20
c000d62b:	53                   	push   ebx
c000d62c:	e8 33 f8 ff ff       	call   c000ce64 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d631:	83 c4 20             	add    esp,0x20
c000d634:	83 ff 50             	cmp    edi,0x50
c000d637:	75 df                	jne    c000d618 <VgaText::clearScreen()+0x28>
c000d639:	46                   	inc    esi
c000d63a:	eb d2                	jmp    c000d60e <VgaText::clearScreen()+0x1e>
c000d63c:	83 ec 0c             	sub    esp,0xc
c000d63f:	53                   	push   ebx
c000d640:	e8 d7 fd ff ff       	call   c000d41c <VgaText::doUpdate()>
c000d645:	83 c4 10             	add    esp,0x10
c000d648:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d64f:	5b                   	pop    ebx
c000d650:	5e                   	pop    esi
c000d651:	5f                   	pop    edi
c000d652:	c3                   	ret    
c000d653:	90                   	nop

c000d654 <VgaText::putchar(char)>:
c000d654:	56                   	push   esi
c000d655:	53                   	push   ebx
c000d656:	83 ec 14             	sub    esp,0x14
c000d659:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d65d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d661:	3c 5b                	cmp    al,0x5b
c000d663:	75 21                	jne    c000d686 <VgaText::putchar(char)+0x32>
c000d665:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d66c:	74 28                	je     c000d696 <VgaText::putchar(char)+0x42>
c000d66e:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d677:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d681:	e9 e2 00 00 00       	jmp    c000d768 <VgaText::putchar(char)+0x114>
c000d686:	3c 1b                	cmp    al,0x1b
c000d688:	75 0c                	jne    c000d696 <VgaText::putchar(char)+0x42>
c000d68a:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d691:	e9 d2 00 00 00       	jmp    c000d768 <VgaText::putchar(char)+0x114>
c000d696:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d69c:	84 c9                	test   cl,cl
c000d69e:	0f 84 ab 00 00 00    	je     c000d74f <VgaText::putchar(char)+0xfb>
c000d6a4:	8d 50 c0             	lea    edx,[eax-0x40]
c000d6a7:	80 fa 3e             	cmp    dl,0x3e
c000d6aa:	0f 87 82 00 00 00    	ja     c000d732 <VgaText::putchar(char)+0xde>
c000d6b0:	3c 6d                	cmp    al,0x6d
c000d6b2:	75 4d                	jne    c000d701 <VgaText::putchar(char)+0xad>
c000d6b4:	31 f6                	xor    esi,esi
c000d6b6:	31 d2                	xor    edx,edx
c000d6b8:	31 c0                	xor    eax,eax
c000d6ba:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d6c0:	7e 30                	jle    c000d6f2 <VgaText::putchar(char)+0x9e>
c000d6c2:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d6ca:	80 fa 3b             	cmp    dl,0x3b
c000d6cd:	75 17                	jne    c000d6e6 <VgaText::putchar(char)+0x92>
c000d6cf:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d6d3:	50                   	push   eax
c000d6d4:	53                   	push   ebx
c000d6d5:	e8 fa f5 ff ff       	call   c000ccd4 <VgaText::doANSI_SGR(int)>
c000d6da:	59                   	pop    ecx
c000d6db:	31 d2                	xor    edx,edx
c000d6dd:	58                   	pop    eax
c000d6de:	31 c0                	xor    eax,eax
c000d6e0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d6e4:	eb 09                	jmp    c000d6ef <VgaText::putchar(char)+0x9b>
c000d6e6:	6b c0 0a             	imul   eax,eax,0xa
c000d6e9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d6ed:	88 ca                	mov    dl,cl
c000d6ef:	46                   	inc    esi
c000d6f0:	eb c8                	jmp    c000d6ba <VgaText::putchar(char)+0x66>
c000d6f2:	84 d2                	test   dl,dl
c000d6f4:	74 31                	je     c000d727 <VgaText::putchar(char)+0xd3>
c000d6f6:	50                   	push   eax
c000d6f7:	53                   	push   ebx
c000d6f8:	e8 d7 f5 ff ff       	call   c000ccd4 <VgaText::doANSI_SGR(int)>
c000d6fd:	58                   	pop    eax
c000d6fe:	5a                   	pop    edx
c000d6ff:	eb 26                	jmp    c000d727 <VgaText::putchar(char)+0xd3>
c000d701:	3c 4a                	cmp    al,0x4a
c000d703:	75 22                	jne    c000d727 <VgaText::putchar(char)+0xd3>
c000d705:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d70c:	75 19                	jne    c000d727 <VgaText::putchar(char)+0xd3>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	53                   	push   ebx
c000d712:	e8 d9 fe ff ff       	call   c000d5f0 <VgaText::clearScreen()>
c000d717:	83 c4 0c             	add    esp,0xc
c000d71a:	6a 00                	push   0x0
c000d71c:	6a 00                	push   0x0
c000d71e:	53                   	push   ebx
c000d71f:	e8 b8 f7 ff ff       	call   c000cedc <VgaText::setCursor(int, int)>
c000d724:	83 c4 10             	add    esp,0x10
c000d727:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d730:	eb 36                	jmp    c000d768 <VgaText::putchar(char)+0x114>
c000d732:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d738:	83 fa 0e             	cmp    edx,0xe
c000d73b:	7f 2b                	jg     c000d768 <VgaText::putchar(char)+0x114>
c000d73d:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d740:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d746:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d74d:	eb 19                	jmp    c000d768 <VgaText::putchar(char)+0x114>
c000d74f:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d755:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d75b:	0f be c0             	movsx  eax,al
c000d75e:	50                   	push   eax
c000d75f:	53                   	push   ebx
c000d760:	e8 a9 fa ff ff       	call   c000d20e <VgaText::putchar(char, VgaColour, VgaColour)>
c000d765:	83 c4 10             	add    esp,0x10
c000d768:	83 c4 14             	add    esp,0x14
c000d76b:	5b                   	pop    ebx
c000d76c:	5e                   	pop    esi
c000d76d:	c3                   	ret    

c000d76e <VgaText::puts(char const*)>:
c000d76e:	53                   	push   ebx
c000d76f:	83 ec 08             	sub    esp,0x8
c000d772:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d776:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d779:	84 c0                	test   al,al
c000d77b:	74 12                	je     c000d78f <VgaText::puts(char const*)+0x21>
c000d77d:	51                   	push   ecx
c000d77e:	43                   	inc    ebx
c000d77f:	51                   	push   ecx
c000d780:	50                   	push   eax
c000d781:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d785:	e8 ca fe ff ff       	call   c000d654 <VgaText::putchar(char)>
c000d78a:	83 c4 10             	add    esp,0x10
c000d78d:	eb e7                	jmp    c000d776 <VgaText::puts(char const*)+0x8>
c000d78f:	83 c4 08             	add    esp,0x8
c000d792:	5b                   	pop    ebx
c000d793:	c3                   	ret    

c000d794 <VgaText::putx(unsigned int)>:
c000d794:	57                   	push   edi
c000d795:	b9 11 00 00 00       	mov    ecx,0x11
c000d79a:	56                   	push   esi
c000d79b:	be 82 14 02 c0       	mov    esi,0xc0021482
c000d7a0:	53                   	push   ebx
c000d7a1:	83 ec 20             	sub    esp,0x20
c000d7a4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d7a8:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d7ac:	fc                   	cld    
c000d7ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7af:	be 08 00 00 00       	mov    esi,0x8
c000d7b4:	50                   	push   eax
c000d7b5:	50                   	push   eax
c000d7b6:	89 d8                	mov    eax,ebx
c000d7b8:	c1 e8 1c             	shr    eax,0x1c
c000d7bb:	c1 e3 04             	shl    ebx,0x4
c000d7be:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d7c3:	50                   	push   eax
c000d7c4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d7c8:	e8 87 fe ff ff       	call   c000d654 <VgaText::putchar(char)>
c000d7cd:	83 c4 10             	add    esp,0x10
c000d7d0:	4e                   	dec    esi
c000d7d1:	75 e1                	jne    c000d7b4 <VgaText::putx(unsigned int)+0x20>
c000d7d3:	83 c4 20             	add    esp,0x20
c000d7d6:	5b                   	pop    ebx
c000d7d7:	5e                   	pop    esi
c000d7d8:	5f                   	pop    edi
c000d7d9:	c3                   	ret    

c000d7da <VgaText::VgaText(char const*)>:
c000d7da:	57                   	push   edi
c000d7db:	56                   	push   esi
c000d7dc:	53                   	push   ebx
c000d7dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7e1:	83 ec 08             	sub    esp,0x8
c000d7e4:	6a 00                	push   0x0
c000d7e6:	50                   	push   eax
c000d7e7:	e8 e0 05 00 00       	call   c000ddcc <UnixFile::UnixFile(int)>
c000d7ec:	83 c4 10             	add    esp,0x10
c000d7ef:	ba e8 14 02 c0       	mov    edx,0xc00214e8
c000d7f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f8:	89 10                	mov    DWORD PTR [eax],edx
c000d7fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7fe:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d80c:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d81a:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d821:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d825:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d830:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d83e:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d84c:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d857:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d85e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d862:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d868:	bb 40 48 02 c0       	mov    ebx,0xc0024840
c000d86d:	b8 08 00 00 00       	mov    eax,0x8
c000d872:	fc                   	cld    
c000d873:	89 d7                	mov    edi,edx
c000d875:	89 de                	mov    esi,ebx
c000d877:	89 c1                	mov    ecx,eax
c000d879:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d87b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d87f:	05 1e 10 00 00       	add    eax,0x101e
c000d884:	83 ec 08             	sub    esp,0x8
c000d887:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d88b:	50                   	push   eax
c000d88c:	e8 db 2e ff ff       	call   c000076c <strcpy>
c000d891:	83 c4 10             	add    esp,0x10
c000d894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d898:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a6:	83 c0 0c             	add    eax,0xc
c000d8a9:	83 ec 04             	sub    esp,0x4
c000d8ac:	68 00 0f 00 00       	push   0xf00
c000d8b1:	6a 00                	push   0x0
c000d8b3:	50                   	push   eax
c000d8b4:	e8 14 2e ff ff       	call   c00006cd <memset>
c000d8b9:	83 c4 10             	add    esp,0x10
c000d8bc:	83 ec 04             	sub    esp,0x4
c000d8bf:	6a 00                	push   0x0
c000d8c1:	6a 07                	push   0x7
c000d8c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8c7:	e8 c0 f4 ff ff       	call   c000cd8c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d8cc:	83 c4 10             	add    esp,0x10
c000d8cf:	83 ec 08             	sub    esp,0x8
c000d8d2:	6a 02                	push   0x2
c000d8d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8d8:	e8 47 fa ff ff       	call   c000d324 <VgaText::setCursorHeight(int)>
c000d8dd:	83 c4 10             	add    esp,0x10
c000d8e0:	83 ec 04             	sub    esp,0x4
c000d8e3:	6a 00                	push   0x0
c000d8e5:	6a 00                	push   0x0
c000d8e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8eb:	e8 ec f5 ff ff       	call   c000cedc <VgaText::setCursor(int, int)>
c000d8f0:	83 c4 10             	add    esp,0x10
c000d8f3:	83 ec 08             	sub    esp,0x8
c000d8f6:	6a 01                	push   0x1
c000d8f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8fc:	e8 89 f3 ff ff       	call   c000cc8a <VgaText::showCursor(bool)>
c000d901:	83 c4 10             	add    esp,0x10
c000d904:	83 ec 08             	sub    esp,0x8
c000d907:	6a 01                	push   0x1
c000d909:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d90d:	e8 88 f3 ff ff       	call   c000cc9a <VgaText::disableBlink(bool)>
c000d912:	83 c4 10             	add    esp,0x10
c000d915:	83 ec 0c             	sub    esp,0xc
c000d918:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d91c:	e8 cf fc ff ff       	call   c000d5f0 <VgaText::clearScreen()>
c000d921:	83 c4 10             	add    esp,0x10
c000d924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d928:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d92f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d933:	05 9e 10 00 00       	add    eax,0x109e
c000d938:	83 ec 04             	sub    esp,0x4
c000d93b:	68 96 00 00 00       	push   0x96
c000d940:	6a 00                	push   0x0
c000d942:	50                   	push   eax
c000d943:	e8 85 2d ff ff       	call   c00006cd <memset>
c000d948:	83 c4 10             	add    esp,0x10
c000d94b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d94f:	05 34 11 00 00       	add    eax,0x1134
c000d954:	83 ec 04             	sub    esp,0x4
c000d957:	68 2c 01 00 00       	push   0x12c
c000d95c:	6a 00                	push   0x0
c000d95e:	50                   	push   eax
c000d95f:	e8 69 2d ff ff       	call   c00006cd <memset>
c000d964:	83 c4 10             	add    esp,0x10
c000d967:	90                   	nop
c000d968:	5b                   	pop    ebx
c000d969:	5e                   	pop    esi
c000d96a:	5f                   	pop    edi
c000d96b:	c3                   	ret    

c000d96c <VgaText::receiveKey(unsigned char)>:
c000d96c:	55                   	push   ebp
c000d96d:	57                   	push   edi
c000d96e:	56                   	push   esi
c000d96f:	53                   	push   ebx
c000d970:	83 ec 1c             	sub    esp,0x1c
c000d973:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d977:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d97b:	84 db                	test   bl,bl
c000d97d:	0f 84 c9 00 00 00    	je     c000da4c <VgaText::receiveKey(unsigned char)+0xe0>
c000d983:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d989:	80 fb 08             	cmp    bl,0x8
c000d98c:	75 2c                	jne    c000d9ba <VgaText::receiveKey(unsigned char)+0x4e>
c000d98e:	83 ec 0c             	sub    esp,0xc
c000d991:	57                   	push   edi
c000d992:	e8 53 2d ff ff       	call   c00006ea <strlen>
c000d997:	83 c4 10             	add    esp,0x10
c000d99a:	85 c0                	test   eax,eax
c000d99c:	74 41                	je     c000d9df <VgaText::receiveKey(unsigned char)+0x73>
c000d99e:	50                   	push   eax
c000d99f:	50                   	push   eax
c000d9a0:	6a 08                	push   0x8
c000d9a2:	56                   	push   esi
c000d9a3:	e8 ac fc ff ff       	call   c000d654 <VgaText::putchar(char)>
c000d9a8:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d9ab:	e8 3a 2d ff ff       	call   c00006ea <strlen>
c000d9b0:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d9b8:	eb 22                	jmp    c000d9dc <VgaText::receiveKey(unsigned char)+0x70>
c000d9ba:	52                   	push   edx
c000d9bb:	52                   	push   edx
c000d9bc:	0f be c3             	movsx  eax,bl
c000d9bf:	50                   	push   eax
c000d9c0:	56                   	push   esi
c000d9c1:	e8 8e fc ff ff       	call   c000d654 <VgaText::putchar(char)>
c000d9c6:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d9ca:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d9cf:	59                   	pop    ecx
c000d9d0:	5d                   	pop    ebp
c000d9d1:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d9d5:	50                   	push   eax
c000d9d6:	57                   	push   edi
c000d9d7:	e8 47 2e ff ff       	call   c0000823 <strcat>
c000d9dc:	83 c4 10             	add    esp,0x10
c000d9df:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000d9e6:	75 05                	jne    c000d9ed <VgaText::receiveKey(unsigned char)+0x81>
c000d9e8:	80 fb 0a             	cmp    bl,0xa
c000d9eb:	75 53                	jne    c000da40 <VgaText::receiveKey(unsigned char)+0xd4>
c000d9ed:	83 ec 0c             	sub    esp,0xc
c000d9f0:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000d9f6:	53                   	push   ebx
c000d9f7:	e8 ee 2c ff ff       	call   c00006ea <strlen>
c000d9fc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d9ff:	89 c5                	mov    ebp,eax
c000da01:	e8 e4 2c ff ff       	call   c00006ea <strlen>
c000da06:	83 c4 10             	add    esp,0x10
c000da09:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000da0d:	3d 2c 01 00 00       	cmp    eax,0x12c
c000da12:	76 10                	jbe    c000da24 <VgaText::receiveKey(unsigned char)+0xb8>
c000da14:	83 ec 0c             	sub    esp,0xc
c000da17:	68 93 14 02 c0       	push   0xc0021493
c000da1c:	e8 2b 80 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c000da21:	83 c4 10             	add    esp,0x10
c000da24:	50                   	push   eax
c000da25:	50                   	push   eax
c000da26:	57                   	push   edi
c000da27:	53                   	push   ebx
c000da28:	e8 f6 2d ff ff       	call   c0000823 <strcat>
c000da2d:	83 c4 0c             	add    esp,0xc
c000da30:	68 96 00 00 00       	push   0x96
c000da35:	6a 00                	push   0x0
c000da37:	57                   	push   edi
c000da38:	e8 90 2c ff ff       	call   c00006cd <memset>
c000da3d:	83 c4 10             	add    esp,0x10
c000da40:	83 ec 0c             	sub    esp,0xc
c000da43:	56                   	push   esi
c000da44:	e8 d3 f9 ff ff       	call   c000d41c <VgaText::doUpdate()>
c000da49:	83 c4 10             	add    esp,0x10
c000da4c:	83 c4 1c             	add    esp,0x1c
c000da4f:	5b                   	pop    ebx
c000da50:	5e                   	pop    esi
c000da51:	5f                   	pop    edi
c000da52:	5d                   	pop    ebp
c000da53:	c3                   	ret    

c000da54 <VgaText::write(unsigned long long, void*, int*)>:
c000da54:	55                   	push   ebp
c000da55:	57                   	push   edi
c000da56:	56                   	push   esi
c000da57:	53                   	push   ebx
c000da58:	83 ec 0c             	sub    esp,0xc
c000da5b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000da5f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000da63:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000da67:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000da6e:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000da71:	39 eb                	cmp    ebx,ebp
c000da73:	74 13                	je     c000da88 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000da75:	50                   	push   eax
c000da76:	43                   	inc    ebx
c000da77:	50                   	push   eax
c000da78:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000da7c:	50                   	push   eax
c000da7d:	56                   	push   esi
c000da7e:	e8 d1 fb ff ff       	call   c000d654 <VgaText::putchar(char)>
c000da83:	83 c4 10             	add    esp,0x10
c000da86:	eb e9                	jmp    c000da71 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000da88:	83 ec 0c             	sub    esp,0xc
c000da8b:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000da92:	56                   	push   esi
c000da93:	e8 84 f9 ff ff       	call   c000d41c <VgaText::doUpdate()>
c000da98:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000da9c:	89 38                	mov    DWORD PTR [eax],edi
c000da9e:	83 c4 1c             	add    esp,0x1c
c000daa1:	31 c0                	xor    eax,eax
c000daa3:	5b                   	pop    ebx
c000daa4:	5e                   	pop    esi
c000daa5:	5f                   	pop    edi
c000daa6:	5d                   	pop    ebp
c000daa7:	c3                   	ret    

c000daa8 <newTerminal(char*)>:
c000daa8:	83 ec 28             	sub    esp,0x28
c000daab:	68 60 12 00 00       	push   0x1260
c000dab0:	e8 33 16 00 00       	call   c000f0e8 <operator new(unsigned long)>
c000dab5:	5a                   	pop    edx
c000dab6:	59                   	pop    ecx
c000dab7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dabb:	50                   	push   eax
c000dabc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dac0:	e8 15 fd ff ff       	call   c000d7da <VgaText::VgaText(char const*)>
c000dac5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dac9:	83 c4 2c             	add    esp,0x2c
c000dacc:	c3                   	ret    
c000dacd:	90                   	nop

c000dace <TSS::TSS()>:
c000dace:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dad2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dad9:	90                   	nop
c000dada:	c3                   	ret    
c000dadb:	90                   	nop

c000dadc <TSS::setESP(unsigned long)>:
c000dadc:	55                   	push   ebp
c000dadd:	89 e5                	mov    ebp,esp
c000dadf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dae2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dae5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000dae8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000daeb:	90                   	nop
c000daec:	5d                   	pop    ebp
c000daed:	c3                   	ret    

c000daee <TSS::flush()>:
c000daee:	55                   	push   ebp
c000daef:	89 e5                	mov    ebp,esp
c000daf1:	83 ec 10             	sub    esp,0x10
c000daf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000daf7:	8b 00                	mov    eax,DWORD PTR [eax]
c000daf9:	83 c8 03             	or     eax,0x3
c000dafc:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000db00:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000db04:	66 89 d0             	mov    ax,dx
c000db07:	0f 00 d8             	ltr    ax
c000db0a:	90                   	nop
c000db0b:	c9                   	leave  
c000db0c:	c3                   	ret    
c000db0d:	90                   	nop

c000db0e <TSS::setup(unsigned long, unsigned long)>:
c000db0e:	55                   	push   ebp
c000db0f:	89 e5                	mov    ebp,esp
c000db11:	53                   	push   ebx
c000db12:	83 ec 14             	sub    esp,0x14
c000db15:	83 ec 0c             	sub    esp,0xc
c000db18:	6a 68                	push   0x68
c000db1a:	e8 cc e4 ff ff       	call   c000bfeb <malloc>
c000db1f:	83 c4 10             	add    esp,0x10
c000db22:	89 c2                	mov    edx,eax
c000db24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db2d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db30:	83 ec 04             	sub    esp,0x4
c000db33:	6a 68                	push   0x68
c000db35:	6a 00                	push   0x0
c000db37:	50                   	push   eax
c000db38:	e8 90 2b ff ff       	call   c00006cd <memset>
c000db3d:	83 c4 10             	add    esp,0x10
c000db40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db43:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db46:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000db4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db4f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db52:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000db58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db5e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000db61:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db6a:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000db70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db76:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000db7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db82:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000db88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db8b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db8e:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000db94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db9a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000db9d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000dba0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dba3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dba6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000dba9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000dbac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbaf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbb2:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000dbb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbbc:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000dbbf:	e8 21 1c 01 00       	call   c001f7e5 <CPU::readCR3()>
c000dbc4:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000dbc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbcd:	83 ec 08             	sub    esp,0x8
c000dbd0:	50                   	push   eax
c000dbd1:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbd4:	50                   	push   eax
c000dbd5:	e8 e8 db ff ff       	call   c000b7c2 <GDTEntry::setBase(unsigned int)>
c000dbda:	83 c4 10             	add    esp,0x10
c000dbdd:	83 ec 08             	sub    esp,0x8
c000dbe0:	6a 68                	push   0x68
c000dbe2:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbe5:	50                   	push   eax
c000dbe6:	e8 f3 db ff ff       	call   c000b7de <GDTEntry::setLimit(unsigned int)>
c000dbeb:	83 c4 10             	add    esp,0x10
c000dbee:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000dbf2:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dbf5:	83 e0 0f             	and    eax,0xf
c000dbf8:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dbfb:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dbfe:	83 c8 40             	or     eax,0x40
c000dc01:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dc04:	e8 d7 6c 00 00       	call   c00148e0 <thisCPU()>
c000dc09:	05 78 01 00 00       	add    eax,0x178
c000dc0e:	83 ec 04             	sub    esp,0x4
c000dc11:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000dc14:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000dc17:	50                   	push   eax
c000dc18:	e8 f5 db ff ff       	call   c000b812 <GDT::addEntry(GDTEntry)>
c000dc1d:	83 c4 10             	add    esp,0x10
c000dc20:	89 c2                	mov    edx,eax
c000dc22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc25:	89 10                	mov    DWORD PTR [eax],edx
c000dc27:	e8 b4 6c 00 00       	call   c00148e0 <thisCPU()>
c000dc2c:	05 78 01 00 00       	add    eax,0x178
c000dc31:	83 ec 0c             	sub    esp,0xc
c000dc34:	50                   	push   eax
c000dc35:	e8 1c dc ff ff       	call   c000b856 <GDT::flush()>
c000dc3a:	83 c4 10             	add    esp,0x10
c000dc3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc40:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc42:	83 ec 08             	sub    esp,0x8
c000dc45:	50                   	push   eax
c000dc46:	68 fc 14 02 c0       	push   0xc00214fc
c000dc4b:	e8 cd 15 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000dc50:	83 c4 10             	add    esp,0x10
c000dc53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc56:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc58:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000dc5b:	c9                   	leave  
c000dc5c:	c3                   	ret    
c000dc5d:	90                   	nop

c000dc5e <ReservedFilename::read(unsigned long long, void*, int*)>:
c000dc5e:	55                   	push   ebp
c000dc5f:	57                   	push   edi
c000dc60:	56                   	push   esi
c000dc61:	53                   	push   ebx
c000dc62:	83 ec 0c             	sub    esp,0xc
c000dc65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc69:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dc6d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dc71:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000dc75:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc78:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dc7c:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dc81:	75 08                	jne    c000dc8b <ReservedFilename::read(unsigned long long, void*, int*)+0x2d>
c000dc83:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dc89:	eb 5e                	jmp    c000dce9 <ReservedFilename::read(unsigned long long, void*, int*)+0x8b>
c000dc8b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dc90:	75 3d                	jne    c000dccf <ReservedFilename::read(unsigned long long, void*, int*)+0x71>
c000dc92:	83 ec 0c             	sub    esp,0xc
c000dc95:	68 1a 15 02 c0       	push   0xc002151a
c000dc9a:	e8 7e 15 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000dc9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dca4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dca7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dcad:	8b 10                	mov    edx,DWORD PTR [eax]
c000dcaf:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000dcb3:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dcb7:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dcbb:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000dcbf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dcc3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000dcc6:	83 c4 1c             	add    esp,0x1c
c000dcc9:	5b                   	pop    ebx
c000dcca:	5e                   	pop    esi
c000dccb:	5f                   	pop    edi
c000dccc:	5d                   	pop    ebp
c000dccd:	ff e0                	jmp    eax
c000dccf:	89 c2                	mov    edx,eax
c000dcd1:	83 e2 fd             	and    edx,0xfffffffd
c000dcd4:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c000dcda:	74 a7                	je     c000dc83 <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000dcdc:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dce1:	83 e0 ef             	and    eax,0xffffffef
c000dce4:	83 f8 08             	cmp    eax,0x8
c000dce7:	76 9a                	jbe    c000dc83 <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000dce9:	83 c4 0c             	add    esp,0xc
c000dcec:	31 c0                	xor    eax,eax
c000dcee:	5b                   	pop    ebx
c000dcef:	5e                   	pop    esi
c000dcf0:	5f                   	pop    edi
c000dcf1:	5d                   	pop    ebp
c000dcf2:	c3                   	ret    
c000dcf3:	90                   	nop

c000dcf4 <ReservedFilename::isAtty()>:
c000dcf4:	83 ec 18             	sub    esp,0x18
c000dcf7:	68 27 15 02 c0       	push   0xc0021527
c000dcfc:	e8 1c 15 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000dd01:	83 c4 10             	add    esp,0x10
c000dd04:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dd08:	31 c0                	xor    eax,eax
c000dd0a:	81 7a 04 01 ff ff 0f 	cmp    DWORD PTR [edx+0x4],0xfffff01
c000dd11:	75 12                	jne    c000dd25 <ReservedFilename::isAtty()+0x31>
c000dd13:	83 ec 0c             	sub    esp,0xc
c000dd16:	68 3d 15 02 c0       	push   0xc002153d
c000dd1b:	e8 fd 14 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000dd20:	83 c4 10             	add    esp,0x10
c000dd23:	b0 01                	mov    al,0x1
c000dd25:	83 c4 0c             	add    esp,0xc
c000dd28:	c3                   	ret    
c000dd29:	90                   	nop

c000dd2a <ReservedFilename::write(unsigned long long, void*, int*)>:
c000dd2a:	55                   	push   ebp
c000dd2b:	57                   	push   edi
c000dd2c:	56                   	push   esi
c000dd2d:	53                   	push   ebx
c000dd2e:	83 ec 0c             	sub    esp,0xc
c000dd31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dd39:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dd3d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000dd41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd44:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dd48:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dd4d:	75 08                	jne    c000dd57 <ReservedFilename::write(unsigned long long, void*, int*)+0x2d>
c000dd4f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dd55:	eb 63                	jmp    c000ddba <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000dd57:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dd5c:	75 3d                	jne    c000dd9b <ReservedFilename::write(unsigned long long, void*, int*)+0x71>
c000dd5e:	83 ec 0c             	sub    esp,0xc
c000dd61:	68 50 15 02 c0       	push   0xc0021550
c000dd66:	e8 b2 14 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000dd6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dd70:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dd73:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dd79:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd7b:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000dd7f:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dd83:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dd87:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000dd8b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dd8f:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c000dd92:	83 c4 1c             	add    esp,0x1c
c000dd95:	5b                   	pop    ebx
c000dd96:	5e                   	pop    esi
c000dd97:	5f                   	pop    edi
c000dd98:	5d                   	pop    ebp
c000dd99:	ff e0                	jmp    eax
c000dd9b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000dda0:	75 04                	jne    c000dda6 <ReservedFilename::write(unsigned long long, void*, int*)+0x7c>
c000dda2:	89 33                	mov    DWORD PTR [ebx],esi
c000dda4:	eb 14                	jmp    c000ddba <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000dda6:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000ddab:	74 a2                	je     c000dd4f <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000ddad:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000ddb2:	83 e0 ef             	and    eax,0xffffffef
c000ddb5:	83 f8 08             	cmp    eax,0x8
c000ddb8:	76 95                	jbe    c000dd4f <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000ddba:	83 c4 0c             	add    esp,0xc
c000ddbd:	31 c0                	xor    eax,eax
c000ddbf:	5b                   	pop    ebx
c000ddc0:	5e                   	pop    esi
c000ddc1:	5f                   	pop    edi
c000ddc2:	5d                   	pop    ebp
c000ddc3:	c3                   	ret    

c000ddc4 <UnixFile::getFileDescriptor()>:
c000ddc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ddc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ddcb:	c3                   	ret    

c000ddcc <UnixFile::UnixFile(int)>:
c000ddcc:	53                   	push   ebx
c000ddcd:	83 ec 18             	sub    esp,0x18
c000ddd0:	ba 6c 16 02 c0       	mov    edx,0xc002166c
c000ddd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddd9:	89 10                	mov    DWORD PTR [eax],edx
c000dddb:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c000dde3:	0f 8f 4d 01 00 00    	jg     c000df36 <UnixFile::UnixFile(int)+0x16a>
c000dde9:	a1 40 3c 02 c0       	mov    eax,ds:0xc0023c40
c000ddee:	8d 50 01             	lea    edx,[eax+0x1]
c000ddf1:	89 15 40 3c 02 c0    	mov    DWORD PTR ds:0xc0023c40,edx
c000ddf7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ddfb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000ddfe:	83 ec 08             	sub    esp,0x8
c000de01:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000de05:	68 f8 48 02 c0       	push   0xc00248f8
c000de0a:	e8 4b 1a 01 00       	call   c001f85a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000de0f:	83 c4 10             	add    esp,0x10
c000de12:	a0 f4 48 02 c0       	mov    al,ds:0xc00248f4
c000de17:	83 f0 01             	xor    eax,0x1
c000de1a:	84 c0                	test   al,al
c000de1c:	0f 84 15 01 00 00    	je     c000df37 <UnixFile::UnixFile(int)+0x16b>
c000de22:	c6 05 f4 48 02 c0 01 	mov    BYTE PTR ds:0xc00248f4,0x1
c000de29:	83 ec 0c             	sub    esp,0xc
c000de2c:	6a 0c                	push   0xc
c000de2e:	e8 b5 12 00 00       	call   c000f0e8 <operator new(unsigned long)>
c000de33:	83 c4 10             	add    esp,0x10
c000de36:	89 c3                	mov    ebx,eax
c000de38:	83 ec 08             	sub    esp,0x8
c000de3b:	68 03 ff ff 0f       	push   0xfffff03
c000de40:	53                   	push   ebx
c000de41:	e8 f6 00 00 00       	call   c000df3c <ReservedFilename::ReservedFilename(int)>
c000de46:	83 c4 10             	add    esp,0x10
c000de49:	89 1d ec 48 02 c0    	mov    DWORD PTR ds:0xc00248ec,ebx
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	6a 0c                	push   0xc
c000de54:	e8 8f 12 00 00       	call   c000f0e8 <operator new(unsigned long)>
c000de59:	83 c4 10             	add    esp,0x10
c000de5c:	89 c3                	mov    ebx,eax
c000de5e:	83 ec 08             	sub    esp,0x8
c000de61:	68 01 ff ff 0f       	push   0xfffff01
c000de66:	53                   	push   ebx
c000de67:	e8 d0 00 00 00       	call   c000df3c <ReservedFilename::ReservedFilename(int)>
c000de6c:	83 c4 10             	add    esp,0x10
c000de6f:	89 1d f0 48 02 c0    	mov    DWORD PTR ds:0xc00248f0,ebx
c000de75:	83 ec 0c             	sub    esp,0xc
c000de78:	6a 0c                	push   0xc
c000de7a:	e8 69 12 00 00       	call   c000f0e8 <operator new(unsigned long)>
c000de7f:	83 c4 10             	add    esp,0x10
c000de82:	89 c3                	mov    ebx,eax
c000de84:	83 ec 08             	sub    esp,0x8
c000de87:	68 00 ff ff 0f       	push   0xfffff00
c000de8c:	53                   	push   ebx
c000de8d:	e8 aa 00 00 00       	call   c000df3c <ReservedFilename::ReservedFilename(int)>
c000de92:	83 c4 10             	add    esp,0x10
c000de95:	89 1d e4 48 02 c0    	mov    DWORD PTR ds:0xc00248e4,ebx
c000de9b:	83 ec 0c             	sub    esp,0xc
c000de9e:	6a 0c                	push   0xc
c000dea0:	e8 43 12 00 00       	call   c000f0e8 <operator new(unsigned long)>
c000dea5:	83 c4 10             	add    esp,0x10
c000dea8:	89 c3                	mov    ebx,eax
c000deaa:	83 ec 08             	sub    esp,0x8
c000dead:	68 02 ff ff 0f       	push   0xfffff02
c000deb2:	53                   	push   ebx
c000deb3:	e8 84 00 00 00       	call   c000df3c <ReservedFilename::ReservedFilename(int)>
c000deb8:	83 c4 10             	add    esp,0x10
c000debb:	89 1d e8 48 02 c0    	mov    DWORD PTR ds:0xc00248e8,ebx
c000dec1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dec9:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000dece:	7f 67                	jg     c000df37 <UnixFile::UnixFile(int)+0x16b>
c000ded0:	83 ec 0c             	sub    esp,0xc
c000ded3:	6a 0c                	push   0xc
c000ded5:	e8 0e 12 00 00       	call   c000f0e8 <operator new(unsigned long)>
c000deda:	83 c4 10             	add    esp,0x10
c000dedd:	89 c3                	mov    ebx,eax
c000dedf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dee3:	05 10 ff ff 0f       	add    eax,0xfffff10
c000dee8:	83 ec 08             	sub    esp,0x8
c000deeb:	50                   	push   eax
c000deec:	53                   	push   ebx
c000deed:	e8 4a 00 00 00       	call   c000df3c <ReservedFilename::ReservedFilename(int)>
c000def2:	83 c4 10             	add    esp,0x10
c000def5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000def9:	89 1c 85 c0 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb740],ebx
c000df00:	83 ec 0c             	sub    esp,0xc
c000df03:	6a 0c                	push   0xc
c000df05:	e8 de 11 00 00       	call   c000f0e8 <operator new(unsigned long)>
c000df0a:	83 c4 10             	add    esp,0x10
c000df0d:	89 c3                	mov    ebx,eax
c000df0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df13:	05 20 ff ff 0f       	add    eax,0xfffff20
c000df18:	83 ec 08             	sub    esp,0x8
c000df1b:	50                   	push   eax
c000df1c:	53                   	push   ebx
c000df1d:	e8 1a 00 00 00       	call   c000df3c <ReservedFilename::ReservedFilename(int)>
c000df22:	83 c4 10             	add    esp,0x10
c000df25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df29:	89 1c 85 80 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb780],ebx
c000df30:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000df34:	eb 93                	jmp    c000dec9 <UnixFile::UnixFile(int)+0xfd>
c000df36:	90                   	nop
c000df37:	83 c4 18             	add    esp,0x18
c000df3a:	5b                   	pop    ebx
c000df3b:	c3                   	ret    

c000df3c <ReservedFilename::ReservedFilename(int)>:
c000df3c:	83 ec 0c             	sub    esp,0xc
c000df3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df43:	83 ec 08             	sub    esp,0x8
c000df46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df4a:	50                   	push   eax
c000df4b:	e8 7c fe ff ff       	call   c000ddcc <UnixFile::UnixFile(int)>
c000df50:	83 c4 10             	add    esp,0x10
c000df53:	ba 88 16 02 c0       	mov    edx,0xc0021688
c000df58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df5c:	89 10                	mov    DWORD PTR [eax],edx
c000df5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df62:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000df66:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000df69:	90                   	nop
c000df6a:	83 c4 0c             	add    esp,0xc
c000df6d:	c3                   	ret    

c000df6e <UnixFile::~UnixFile()>:
c000df6e:	83 ec 1c             	sub    esp,0x1c
c000df71:	ba 6c 16 02 c0       	mov    edx,0xc002166c
c000df76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df7a:	89 10                	mov    DWORD PTR [eax],edx
c000df7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df83:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000df88:	7f 73                	jg     c000dffd <UnixFile::~UnixFile()+0x8f>
c000df8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000df92:	83 ec 0c             	sub    esp,0xc
c000df95:	68 f8 48 02 c0       	push   0xc00248f8
c000df9a:	e8 8f 19 01 00       	call   c001f92e <LinkedList<UnixFile>::getFirstElement()>
c000df9f:	83 c4 10             	add    esp,0x10
c000dfa2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfa6:	83 ec 0c             	sub    esp,0xc
c000dfa9:	68 f8 48 02 c0       	push   0xc00248f8
c000dfae:	e8 83 19 01 00       	call   c001f936 <LinkedList<UnixFile>::removeFirst()>
c000dfb3:	83 c4 10             	add    esp,0x10
c000dfb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dfba:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000dfbe:	74 40                	je     c000e000 <UnixFile::~UnixFile()+0x92>
c000dfc0:	83 ec 08             	sub    esp,0x8
c000dfc3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dfc7:	68 f8 48 02 c0       	push   0xc00248f8
c000dfcc:	e8 89 18 01 00       	call   c001f85a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000dfd1:	83 c4 10             	add    esp,0x10
c000dfd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dfd8:	8d 50 01             	lea    edx,[eax+0x1]
c000dfdb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfdf:	3d 88 13 00 00       	cmp    eax,0x1388
c000dfe4:	0f 94 c0             	sete   al
c000dfe7:	84 c0                	test   al,al
c000dfe9:	74 a7                	je     c000df92 <UnixFile::~UnixFile()+0x24>
c000dfeb:	83 ec 0c             	sub    esp,0xc
c000dfee:	68 44 16 02 c0       	push   0xc0021644
c000dff3:	e8 54 7a 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c000dff8:	83 c4 10             	add    esp,0x10
c000dffb:	eb 95                	jmp    c000df92 <UnixFile::~UnixFile()+0x24>
c000dffd:	90                   	nop
c000dffe:	eb 01                	jmp    c000e001 <UnixFile::~UnixFile()+0x93>
c000e000:	90                   	nop
c000e001:	90                   	nop
c000e002:	83 c4 1c             	add    esp,0x1c
c000e005:	c3                   	ret    

c000e006 <UnixFile::~UnixFile()>:
c000e006:	83 ec 0c             	sub    esp,0xc
c000e009:	83 ec 0c             	sub    esp,0xc
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 59 ff ff ff       	call   c000df6e <UnixFile::~UnixFile()>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	83 ec 08             	sub    esp,0x8
c000e01b:	6a 0c                	push   0xc
c000e01d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e021:	e8 d1 10 00 00       	call   c000f0f7 <operator delete(void*, unsigned long)>
c000e026:	83 c4 10             	add    esp,0x10
c000e029:	83 c4 0c             	add    esp,0xc
c000e02c:	c3                   	ret    
c000e02d:	90                   	nop

c000e02e <ReservedFilename::~ReservedFilename()>:
c000e02e:	83 ec 0c             	sub    esp,0xc
c000e031:	ba 88 16 02 c0       	mov    edx,0xc0021688
c000e036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e03a:	89 10                	mov    DWORD PTR [eax],edx
c000e03c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e040:	83 ec 0c             	sub    esp,0xc
c000e043:	50                   	push   eax
c000e044:	e8 25 ff ff ff       	call   c000df6e <UnixFile::~UnixFile()>
c000e049:	83 c4 10             	add    esp,0x10
c000e04c:	90                   	nop
c000e04d:	83 c4 0c             	add    esp,0xc
c000e050:	c3                   	ret    
c000e051:	90                   	nop

c000e052 <ReservedFilename::~ReservedFilename()>:
c000e052:	83 ec 0c             	sub    esp,0xc
c000e055:	83 ec 0c             	sub    esp,0xc
c000e058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e05c:	e8 cd ff ff ff       	call   c000e02e <ReservedFilename::~ReservedFilename()>
c000e061:	83 c4 10             	add    esp,0x10
c000e064:	83 ec 08             	sub    esp,0x8
c000e067:	6a 0c                	push   0xc
c000e069:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e06d:	e8 85 10 00 00       	call   c000f0f7 <operator delete(void*, unsigned long)>
c000e072:	83 c4 10             	add    esp,0x10
c000e075:	83 c4 0c             	add    esp,0xc
c000e078:	c3                   	ret    

c000e079 <getFromFileDescriptor(int)>:
c000e079:	53                   	push   ebx
c000e07a:	83 ec 08             	sub    esp,0x8
c000e07d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e081:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000e087:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000e08d:	7f 33                	jg     c000e0c2 <getFromFileDescriptor(int)+0x49>
c000e08f:	83 ec 0c             	sub    esp,0xc
c000e092:	68 f8 48 02 c0       	push   0xc00248f8
c000e097:	e8 92 18 01 00       	call   c001f92e <LinkedList<UnixFile>::getFirstElement()>
c000e09c:	83 c4 10             	add    esp,0x10
c000e09f:	85 c0                	test   eax,eax
c000e0a1:	75 07                	jne    c000e0aa <getFromFileDescriptor(int)+0x31>
c000e0a3:	31 c0                	xor    eax,eax
c000e0a5:	e9 98 00 00 00       	jmp    c000e142 <getFromFileDescriptor(int)+0xc9>
c000e0aa:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000e0ad:	0f 84 8f 00 00 00    	je     c000e142 <getFromFileDescriptor(int)+0xc9>
c000e0b3:	52                   	push   edx
c000e0b4:	52                   	push   edx
c000e0b5:	50                   	push   eax
c000e0b6:	68 f8 48 02 c0       	push   0xc00248f8
c000e0bb:	e8 18 19 01 00       	call   c001f9d8 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000e0c0:	eb da                	jmp    c000e09c <getFromFileDescriptor(int)+0x23>
c000e0c2:	83 ec 0c             	sub    esp,0xc
c000e0c5:	68 5d 15 02 c0       	push   0xc002155d
c000e0ca:	e8 4e 11 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000e0cf:	83 c4 10             	add    esp,0x10
c000e0d2:	a1 ec 48 02 c0       	mov    eax,ds:0xc00248ec
c000e0d7:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000e0dd:	74 63                	je     c000e142 <getFromFileDescriptor(int)+0xc9>
c000e0df:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000e0e5:	75 17                	jne    c000e0fe <getFromFileDescriptor(int)+0x85>
c000e0e7:	83 ec 0c             	sub    esp,0xc
c000e0ea:	68 84 15 02 c0       	push   0xc0021584
c000e0ef:	e8 29 11 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000e0f4:	a1 f0 48 02 c0       	mov    eax,ds:0xc00248f0
c000e0f9:	83 c4 10             	add    esp,0x10
c000e0fc:	eb 44                	jmp    c000e142 <getFromFileDescriptor(int)+0xc9>
c000e0fe:	a1 e8 48 02 c0       	mov    eax,ds:0xc00248e8
c000e103:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000e109:	74 37                	je     c000e142 <getFromFileDescriptor(int)+0xc9>
c000e10b:	a1 e4 48 02 c0       	mov    eax,ds:0xc00248e4
c000e110:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000e116:	74 2a                	je     c000e142 <getFromFileDescriptor(int)+0xc9>
c000e118:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000e11e:	83 f8 08             	cmp    eax,0x8
c000e121:	77 09                	ja     c000e12c <getFromFileDescriptor(int)+0xb3>
c000e123:	8b 04 85 c0 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb740]
c000e12a:	eb 16                	jmp    c000e142 <getFromFileDescriptor(int)+0xc9>
c000e12c:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000e132:	83 fb 08             	cmp    ebx,0x8
c000e135:	0f 87 68 ff ff ff    	ja     c000e0a3 <getFromFileDescriptor(int)+0x2a>
c000e13b:	8b 04 9d 80 48 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb780]
c000e142:	83 c4 08             	add    esp,0x8
c000e145:	5b                   	pop    ebx
c000e146:	c3                   	ret    

c000e147 <__static_initialization_and_destruction_0(int, int)>:
c000e147:	83 ec 0c             	sub    esp,0xc
c000e14a:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e14f:	75 34                	jne    c000e185 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e151:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000e159:	75 2a                	jne    c000e185 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e15b:	83 ec 0c             	sub    esp,0xc
c000e15e:	68 f8 48 02 c0       	push   0xc00248f8
c000e163:	e8 9a 16 01 00       	call   c001f802 <LinkedList<UnixFile>::LinkedList()>
c000e168:	83 c4 10             	add    esp,0x10
c000e16b:	83 ec 04             	sub    esp,0x4
c000e16e:	68 bc 3b 02 c0       	push   0xc0023bbc
c000e173:	68 f8 48 02 c0       	push   0xc00248f8
c000e178:	68 00 f8 01 c0       	push   0xc001f800
c000e17d:	e8 f1 0e 00 00       	call   c000f073 <__cxa_atexit>
c000e182:	83 c4 10             	add    esp,0x10
c000e185:	90                   	nop
c000e186:	83 c4 0c             	add    esp,0xc
c000e189:	c3                   	ret    

c000e18a <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000e18a:	83 ec 0c             	sub    esp,0xc
c000e18d:	83 ec 08             	sub    esp,0x8
c000e190:	68 ff ff 00 00       	push   0xffff
c000e195:	6a 01                	push   0x1
c000e197:	e8 ab ff ff ff       	call   c000e147 <__static_initialization_and_destruction_0(int, int)>
c000e19c:	83 c4 10             	add    esp,0x10
c000e19f:	83 c4 0c             	add    esp,0xc
c000e1a2:	c3                   	ret    
c000e1a3:	90                   	nop

c000e1a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000e1a4:	53                   	push   ebx
c000e1a5:	8b 15 48 3c 02 c0    	mov    edx,DWORD PTR ds:0xc0023c48
c000e1ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e1af:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e1b3:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000e1b9:	89 c8                	mov    eax,ecx
c000e1bb:	d1 e8                	shr    eax,1
c000e1bd:	01 d0                	add    eax,edx
c000e1bf:	83 e1 01             	and    ecx,0x1
c000e1c2:	8a 10                	mov    dl,BYTE PTR [eax]
c000e1c4:	75 09                	jne    c000e1cf <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c000e1c6:	83 e2 f0             	and    edx,0xfffffff0
c000e1c9:	09 da                	or     edx,ebx
c000e1cb:	88 10                	mov    BYTE PTR [eax],dl
c000e1cd:	5b                   	pop    ebx
c000e1ce:	c3                   	ret    
c000e1cf:	c1 e3 04             	shl    ebx,0x4
c000e1d2:	83 e2 0f             	and    edx,0xf
c000e1d5:	09 da                	or     edx,ebx
c000e1d7:	88 10                	mov    BYTE PTR [eax],dl
c000e1d9:	5b                   	pop    ebx
c000e1da:	c3                   	ret    

c000e1db <Virt::getPageState(unsigned long)>:
c000e1db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1df:	8b 0d 48 3c 02 c0    	mov    ecx,DWORD PTR ds:0xc0023c48
c000e1e5:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000e1eb:	89 d0                	mov    eax,edx
c000e1ed:	d1 e8                	shr    eax,1
c000e1ef:	8a 0c 01             	mov    cl,BYTE PTR [ecx+eax*1]
c000e1f2:	88 c8                	mov    al,cl
c000e1f4:	c0 e8 04             	shr    al,0x4
c000e1f7:	83 e2 01             	and    edx,0x1
c000e1fa:	75 05                	jne    c000e201 <Virt::getPageState(unsigned long)+0x26>
c000e1fc:	88 c8                	mov    al,cl
c000e1fe:	83 e0 0f             	and    eax,0xf
c000e201:	c3                   	ret    

c000e202 <Virt::allocateKernelVirtualPages(int)>:
c000e202:	55                   	push   ebp
c000e203:	31 ed                	xor    ebp,ebp
c000e205:	57                   	push   edi
c000e206:	56                   	push   esi
c000e207:	53                   	push   ebx
c000e208:	31 db                	xor    ebx,ebx
c000e20a:	83 ec 1c             	sub    esp,0x1c
c000e20d:	8b 3d 44 3c 02 c0    	mov    edi,DWORD PTR ds:0xc0023c44
c000e213:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e217:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e21c:	57                   	push   edi
c000e21d:	e8 b9 ff ff ff       	call   c000e1db <Virt::getPageState(unsigned long)>
c000e222:	5a                   	pop    edx
c000e223:	84 c0                	test   al,al
c000e225:	75 3a                	jne    c000e261 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000e227:	85 db                	test   ebx,ebx
c000e229:	75 02                	jne    c000e22d <Virt::allocateKernelVirtualPages(int)+0x2b>
c000e22b:	89 fd                	mov    ebp,edi
c000e22d:	43                   	inc    ebx
c000e22e:	39 f3                	cmp    ebx,esi
c000e230:	74 5a                	je     c000e28c <Virt::allocateKernelVirtualPages(int)+0x8a>
c000e232:	47                   	inc    edi
c000e233:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e239:	76 31                	jbe    c000e26c <Virt::allocateKernelVirtualPages(int)+0x6a>
c000e23b:	c7 05 44 3c 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023c44,0xc8000
c000e245:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e24a:	75 28                	jne    c000e274 <Virt::allocateKernelVirtualPages(int)+0x72>
c000e24c:	bf 00 80 0c 00       	mov    edi,0xc8000
c000e251:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e256:	57                   	push   edi
c000e257:	e8 7f ff ff ff       	call   c000e1db <Virt::getPageState(unsigned long)>
c000e25c:	5a                   	pop    edx
c000e25d:	84 c0                	test   al,al
c000e25f:	74 c6                	je     c000e227 <Virt::allocateKernelVirtualPages(int)+0x25>
c000e261:	47                   	inc    edi
c000e262:	31 db                	xor    ebx,ebx
c000e264:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e26a:	77 cf                	ja     c000e23b <Virt::allocateKernelVirtualPages(int)+0x39>
c000e26c:	89 3d 44 3c 02 c0    	mov    DWORD PTR ds:0xc0023c44,edi
c000e272:	eb a8                	jmp    c000e21c <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e274:	83 ec 0c             	sub    esp,0xc
c000e277:	68 9c 16 02 c0       	push   0xc002169c
c000e27c:	e8 cb 77 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c000e281:	8b 3d 44 3c 02 c0    	mov    edi,DWORD PTR ds:0xc0023c44
c000e287:	83 c4 10             	add    esp,0x10
c000e28a:	eb 90                	jmp    c000e21c <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e28c:	89 2d 44 3c 02 c0    	mov    DWORD PTR ds:0xc0023c44,ebp
c000e292:	4b                   	dec    ebx
c000e293:	74 5f                	je     c000e2f4 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000e295:	85 f6                	test   esi,esi
c000e297:	74 3d                	je     c000e2d6 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e299:	89 e8                	mov    eax,ebp
c000e29b:	31 db                	xor    ebx,ebx
c000e29d:	8d 7e ff             	lea    edi,[esi-0x1]
c000e2a0:	eb 14                	jmp    c000e2b6 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000e2a2:	6a 01                	push   0x1
c000e2a4:	43                   	inc    ebx
c000e2a5:	50                   	push   eax
c000e2a6:	e8 f9 fe ff ff       	call   c000e1a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2ab:	58                   	pop    eax
c000e2ac:	39 f3                	cmp    ebx,esi
c000e2ae:	5a                   	pop    edx
c000e2af:	74 25                	je     c000e2d6 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e2b1:	a1 44 3c 02 c0       	mov    eax,ds:0xc0023c44
c000e2b6:	8d 50 01             	lea    edx,[eax+0x1]
c000e2b9:	85 db                	test   ebx,ebx
c000e2bb:	89 15 44 3c 02 c0    	mov    DWORD PTR ds:0xc0023c44,edx
c000e2c1:	74 20                	je     c000e2e3 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000e2c3:	39 df                	cmp    edi,ebx
c000e2c5:	75 db                	jne    c000e2a2 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000e2c7:	6a 03                	push   0x3
c000e2c9:	43                   	inc    ebx
c000e2ca:	50                   	push   eax
c000e2cb:	e8 d4 fe ff ff       	call   c000e1a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2d0:	59                   	pop    ecx
c000e2d1:	39 f3                	cmp    ebx,esi
c000e2d3:	58                   	pop    eax
c000e2d4:	75 db                	jne    c000e2b1 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e2d6:	83 c4 1c             	add    esp,0x1c
c000e2d9:	89 e8                	mov    eax,ebp
c000e2db:	c1 e0 0c             	shl    eax,0xc
c000e2de:	5b                   	pop    ebx
c000e2df:	5e                   	pop    esi
c000e2e0:	5f                   	pop    edi
c000e2e1:	5d                   	pop    ebp
c000e2e2:	c3                   	ret    
c000e2e3:	6a 02                	push   0x2
c000e2e5:	bb 01 00 00 00       	mov    ebx,0x1
c000e2ea:	50                   	push   eax
c000e2eb:	e8 b4 fe ff ff       	call   c000e1a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2f0:	58                   	pop    eax
c000e2f1:	5a                   	pop    edx
c000e2f2:	eb bd                	jmp    c000e2b1 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e2f4:	6a 04                	push   0x4
c000e2f6:	8d 45 01             	lea    eax,[ebp+0x1]
c000e2f9:	55                   	push   ebp
c000e2fa:	a3 44 3c 02 c0       	mov    ds:0xc0023c44,eax
c000e2ff:	e8 a0 fe ff ff       	call   c000e1a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e304:	59                   	pop    ecx
c000e305:	5b                   	pop    ebx
c000e306:	89 e8                	mov    eax,ebp
c000e308:	c1 e0 0c             	shl    eax,0xc
c000e30b:	83 c4 1c             	add    esp,0x1c
c000e30e:	5b                   	pop    ebx
c000e30f:	5e                   	pop    esi
c000e310:	5f                   	pop    edi
c000e311:	5d                   	pop    ebp
c000e312:	c3                   	ret    

c000e313 <Virt::virtualMemorySetup()>:
c000e313:	53                   	push   ebx
c000e314:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e319:	83 ec 08             	sub    esp,0x8
c000e31c:	6a 0f                	push   0xf
c000e31e:	53                   	push   ebx
c000e31f:	43                   	inc    ebx
c000e320:	e8 7f fe ff ff       	call   c000e1a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e325:	59                   	pop    ecx
c000e326:	58                   	pop    eax
c000e327:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e32d:	75 ed                	jne    c000e31c <Virt::virtualMemorySetup()+0x9>
c000e32f:	50                   	push   eax
c000e330:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e335:	50                   	push   eax
c000e336:	68 00 00 00 c8       	push   0xc8000000
c000e33b:	68 23 18 02 c0       	push   0xc0021823
c000e340:	e8 d8 0e 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000e345:	58                   	pop    eax
c000e346:	5a                   	pop    edx
c000e347:	68 00 f0 ff ef       	push   0xeffff000
c000e34c:	68 37 18 02 c0       	push   0xc0021837
c000e351:	e8 c7 0e 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000e356:	83 c4 10             	add    esp,0x10
c000e359:	50                   	push   eax
c000e35a:	50                   	push   eax
c000e35b:	6a 00                	push   0x0
c000e35d:	53                   	push   ebx
c000e35e:	43                   	inc    ebx
c000e35f:	e8 40 fe ff ff       	call   c000e1a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e364:	83 c4 10             	add    esp,0x10
c000e367:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e36d:	75 ea                	jne    c000e359 <Virt::virtualMemorySetup()+0x46>
c000e36f:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000e374:	51                   	push   ecx
c000e375:	51                   	push   ecx
c000e376:	6a 0f                	push   0xf
c000e378:	53                   	push   ebx
c000e379:	43                   	inc    ebx
c000e37a:	e8 25 fe ff ff       	call   c000e1a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e37f:	83 c4 10             	add    esp,0x10
c000e382:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000e388:	75 ea                	jne    c000e374 <Virt::virtualMemorySetup()+0x61>
c000e38a:	83 c4 08             	add    esp,0x8
c000e38d:	5b                   	pop    ebx
c000e38e:	c3                   	ret    

c000e38f <Virt::getAKernelVAS()>:
c000e38f:	a1 04 49 02 c0       	mov    eax,ds:0xc0024904
c000e394:	c3                   	ret    

c000e395 <Virt::setupPageSwapping(int)>:
c000e395:	57                   	push   edi
c000e396:	56                   	push   esi
c000e397:	53                   	push   ebx
c000e398:	83 ec 1c             	sub    esp,0x1c
c000e39b:	68 14 01 00 00       	push   0x114
c000e3a0:	e8 43 0d 00 00       	call   c000f0e8 <operator new(unsigned long)>
c000e3a5:	83 c4 0c             	add    esp,0xc
c000e3a8:	8b 3d f4 5b 02 c0    	mov    edi,DWORD PTR ds:0xc0025bf4
c000e3ae:	89 c6                	mov    esi,eax
c000e3b0:	57                   	push   edi
c000e3b1:	68 4b 18 02 c0       	push   0xc002184b
c000e3b6:	50                   	push   eax
c000e3b7:	e8 98 13 00 00       	call   c000f754 <File::File(char const*, Process*)>
c000e3bc:	89 34 24             	mov    DWORD PTR [esp],esi
c000e3bf:	e8 6c 15 00 00       	call   c000f930 <File::unlink()>
c000e3c4:	58                   	pop    eax
c000e3c5:	5a                   	pop    edx
c000e3c6:	6a 12                	push   0x12
c000e3c8:	56                   	push   esi
c000e3c9:	e8 ea 13 00 00       	call   c000f7b8 <File::open(FileOpenMode)>
c000e3ce:	83 c4 10             	add    esp,0x10
c000e3d1:	85 c0                	test   eax,eax
c000e3d3:	0f 85 b6 00 00 00    	jne    c000e48f <Virt::setupPageSwapping(int)+0xfa>
c000e3d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e3dd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e3e5:	c1 e3 08             	shl    ebx,0x8
c000e3e8:	83 ec 0c             	sub    esp,0xc
c000e3eb:	c1 fb 04             	sar    ebx,0x4
c000e3ee:	68 00 00 01 00       	push   0x10000
c000e3f3:	e8 f3 db ff ff       	call   c000bfeb <malloc>
c000e3f8:	83 c4 0c             	add    esp,0xc
c000e3fb:	89 c7                	mov    edi,eax
c000e3fd:	68 00 00 01 00       	push   0x10000
c000e402:	6a 00                	push   0x0
c000e404:	50                   	push   eax
c000e405:	e8 c3 22 ff ff       	call   c00006cd <memset>
c000e40a:	83 c4 10             	add    esp,0x10
c000e40d:	4b                   	dec    ebx
c000e40e:	83 fb ff             	cmp    ebx,0xffffffff
c000e411:	74 4a                	je     c000e45d <Virt::setupPageSwapping(int)+0xc8>
c000e413:	83 ec 0c             	sub    esp,0xc
c000e416:	8b 06                	mov    eax,DWORD PTR [esi]
c000e418:	8d 54 24 18          	lea    edx,[esp+0x18]
c000e41c:	52                   	push   edx
c000e41d:	57                   	push   edi
c000e41e:	6a 00                	push   0x0
c000e420:	68 00 00 01 00       	push   0x10000
c000e425:	56                   	push   esi
c000e426:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e429:	83 c4 20             	add    esp,0x20
c000e42c:	85 c0                	test   eax,eax
c000e42e:	75 4d                	jne    c000e47d <Virt::setupPageSwapping(int)+0xe8>
c000e430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e434:	3d 00 00 01 00       	cmp    eax,0x10000
c000e439:	74 d2                	je     c000e40d <Virt::setupPageSwapping(int)+0x78>
c000e43b:	52                   	push   edx
c000e43c:	4b                   	dec    ebx
c000e43d:	52                   	push   edx
c000e43e:	50                   	push   eax
c000e43f:	68 9e 18 02 c0       	push   0xc002189e
c000e444:	e8 d4 0d 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000e449:	c7 04 24 a7 18 02 c0 	mov    DWORD PTR [esp],0xc00218a7
c000e450:	e8 f7 75 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c000e455:	83 c4 10             	add    esp,0x10
c000e458:	83 fb ff             	cmp    ebx,0xffffffff
c000e45b:	75 b6                	jne    c000e413 <Virt::setupPageSwapping(int)+0x7e>
c000e45d:	83 ec 0c             	sub    esp,0xc
c000e460:	56                   	push   esi
c000e461:	e8 b0 13 00 00       	call   c000f816 <File::close()>
c000e466:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e469:	e8 9d db ff ff       	call   c000c00b <rfree>
c000e46e:	8b 06                	mov    eax,DWORD PTR [esi]
c000e470:	89 34 24             	mov    DWORD PTR [esp],esi
c000e473:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e476:	83 c4 20             	add    esp,0x20
c000e479:	5b                   	pop    ebx
c000e47a:	5e                   	pop    esi
c000e47b:	5f                   	pop    edi
c000e47c:	c3                   	ret    
c000e47d:	51                   	push   ecx
c000e47e:	51                   	push   ecx
c000e47f:	50                   	push   eax
c000e480:	68 86 18 02 c0       	push   0xc0021886
c000e485:	e8 93 0d 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000e48a:	83 c4 10             	add    esp,0x10
c000e48d:	eb a1                	jmp    c000e430 <Virt::setupPageSwapping(int)+0x9b>
c000e48f:	53                   	push   ebx
c000e490:	53                   	push   ebx
c000e491:	50                   	push   eax
c000e492:	68 62 18 02 c0       	push   0xc0021862
c000e497:	e8 81 0d 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000e49c:	c7 04 24 6b 18 02 c0 	mov    DWORD PTR [esp],0xc002186b
c000e4a3:	e8 a4 75 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c000e4a8:	83 c4 10             	add    esp,0x10
c000e4ab:	e9 29 ff ff ff       	jmp    c000e3d9 <Virt::setupPageSwapping(int)+0x44>

c000e4b0 <VAS::VAS()>:
c000e4b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4bf:	a3 04 49 02 c0       	mov    ds:0xc0024904,eax
c000e4c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4c8:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000e4cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4d0:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e4d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4d7:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e4de:	90                   	nop
c000e4df:	c3                   	ret    

c000e4e0 <VAS::VAS(VAS*)>:
c000e4e0:	83 ec 0c             	sub    esp,0xc
c000e4e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4ee:	83 ec 0c             	sub    esp,0xc
c000e4f1:	68 bc 16 02 c0       	push   0xc00216bc
c000e4f6:	e8 51 75 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c000e4fb:	83 c4 10             	add    esp,0x10
c000e4fe:	90                   	nop
c000e4ff:	83 c4 0c             	add    esp,0xc
c000e502:	c3                   	ret    
c000e503:	90                   	nop

c000e504 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e504:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e508:	89 c2                	mov    edx,eax
c000e50a:	c1 ea 16             	shr    edx,0x16
c000e50d:	c1 e8 0a             	shr    eax,0xa
c000e510:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e515:	19 c9                	sbb    ecx,ecx
c000e517:	25 fc 0f 00 00       	and    eax,0xffc
c000e51c:	c1 e2 0c             	shl    edx,0xc
c000e51f:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e525:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e52c:	01 d0                	add    eax,edx
c000e52e:	c3                   	ret    
c000e52f:	90                   	nop

c000e530 <VAS::getPageTableEntry(unsigned long)>:
c000e530:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e534:	89 ca                	mov    edx,ecx
c000e536:	c1 ea 16             	shr    edx,0x16
c000e539:	c1 e9 0a             	shr    ecx,0xa
c000e53c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e542:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e548:	c1 e0 0c             	shl    eax,0xc
c000e54b:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e54e:	c3                   	ret    

c000e54f <Virt::freeKernelVirtualPages(unsigned long)>:
c000e54f:	57                   	push   edi
c000e550:	56                   	push   esi
c000e551:	be 01 00 00 00       	mov    esi,0x1
c000e556:	53                   	push   ebx
c000e557:	83 ec 10             	sub    esp,0x10
c000e55a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e55e:	c1 eb 0c             	shr    ebx,0xc
c000e561:	eb 3e                	jmp    c000e5a1 <Virt::freeKernelVirtualPages(unsigned long)+0x52>
c000e563:	e8 27 fe ff ff       	call   c000e38f <Virt::getAKernelVAS()>
c000e568:	51                   	push   ecx
c000e569:	51                   	push   ecx
c000e56a:	57                   	push   edi
c000e56b:	50                   	push   eax
c000e56c:	e8 bf ff ff ff       	call   c000e530 <VAS::getPageTableEntry(unsigned long)>
c000e571:	83 c4 10             	add    esp,0x10
c000e574:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e578:	8b 00                	mov    eax,DWORD PTR [eax]
c000e57a:	f6 c4 04             	test   ah,0x4
c000e57d:	75 5f                	jne    c000e5de <Virt::freeKernelVirtualPages(unsigned long)+0x8f>
c000e57f:	80 fa 04             	cmp    dl,0x4
c000e582:	74 78                	je     c000e5fc <Virt::freeKernelVirtualPages(unsigned long)+0xad>
c000e584:	80 fa 02             	cmp    dl,0x2
c000e587:	0f 84 88 00 00 00    	je     c000e615 <Virt::freeKernelVirtualPages(unsigned long)+0xc6>
c000e58d:	80 fa 03             	cmp    dl,0x3
c000e590:	0f 84 ac 00 00 00    	je     c000e642 <Virt::freeKernelVirtualPages(unsigned long)+0xf3>
c000e596:	fe ca                	dec    dl
c000e598:	0f 84 92 00 00 00    	je     c000e630 <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e59e:	43                   	inc    ebx
c000e59f:	31 f6                	xor    esi,esi
c000e5a1:	53                   	push   ebx
c000e5a2:	e8 34 fc ff ff       	call   c000e1db <Virt::getPageState(unsigned long)>
c000e5a7:	5f                   	pop    edi
c000e5a8:	89 df                	mov    edi,ebx
c000e5aa:	c1 e7 0c             	shl    edi,0xc
c000e5ad:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e5b1:	84 c0                	test   al,al
c000e5b3:	75 ae                	jne    c000e563 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e5b5:	83 ec 0c             	sub    esp,0xc
c000e5b8:	68 ad 18 02 c0       	push   0xc00218ad
c000e5bd:	e8 8a 74 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c000e5c2:	e8 c8 fd ff ff       	call   c000e38f <Virt::getAKernelVAS()>
c000e5c7:	5a                   	pop    edx
c000e5c8:	59                   	pop    ecx
c000e5c9:	57                   	push   edi
c000e5ca:	50                   	push   eax
c000e5cb:	e8 60 ff ff ff       	call   c000e530 <VAS::getPageTableEntry(unsigned long)>
c000e5d0:	83 c4 10             	add    esp,0x10
c000e5d3:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e5d7:	8b 00                	mov    eax,DWORD PTR [eax]
c000e5d9:	f6 c4 04             	test   ah,0x4
c000e5dc:	74 c0                	je     c000e59e <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e5de:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e5e2:	83 ec 0c             	sub    esp,0xc
c000e5e5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e5ea:	50                   	push   eax
c000e5eb:	e8 44 df ff ff       	call   c000c534 <Phys::freePage(unsigned long)>
c000e5f0:	83 c4 10             	add    esp,0x10
c000e5f3:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e5f7:	80 fa 04             	cmp    dl,0x4
c000e5fa:	75 88                	jne    c000e584 <Virt::freeKernelVirtualPages(unsigned long)+0x35>
c000e5fc:	89 f0                	mov    eax,esi
c000e5fe:	84 c0                	test   al,al
c000e600:	75 46                	jne    c000e648 <Virt::freeKernelVirtualPages(unsigned long)+0xf9>
c000e602:	c7 44 24 20 e0 16 02 c0 	mov    DWORD PTR [esp+0x20],0xc00216e0
c000e60a:	83 c4 10             	add    esp,0x10
c000e60d:	5b                   	pop    ebx
c000e60e:	5e                   	pop    esi
c000e60f:	5f                   	pop    edi
c000e610:	e9 37 74 00 00       	jmp    c0015a4c <Krnl::panic(char const*)>
c000e615:	89 f0                	mov    eax,esi
c000e617:	84 c0                	test   al,al
c000e619:	75 15                	jne    c000e630 <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e61b:	83 ec 0c             	sub    esp,0xc
c000e61e:	68 c9 18 02 c0       	push   0xc00218c9
c000e623:	e8 24 74 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c000e628:	83 c4 10             	add    esp,0x10
c000e62b:	e9 6e ff ff ff       	jmp    c000e59e <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e630:	50                   	push   eax
c000e631:	50                   	push   eax
c000e632:	6a 00                	push   0x0
c000e634:	53                   	push   ebx
c000e635:	e8 6a fb ff ff       	call   c000e1a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e63a:	83 c4 10             	add    esp,0x10
c000e63d:	e9 5c ff ff ff       	jmp    c000e59e <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e642:	89 f0                	mov    eax,esi
c000e644:	84 c0                	test   al,al
c000e646:	75 14                	jne    c000e65c <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000e648:	52                   	push   edx
c000e649:	52                   	push   edx
c000e64a:	6a 00                	push   0x0
c000e64c:	53                   	push   ebx
c000e64d:	e8 52 fb ff ff       	call   c000e1a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e652:	83 c4 10             	add    esp,0x10
c000e655:	83 c4 10             	add    esp,0x10
c000e658:	5b                   	pop    ebx
c000e659:	5e                   	pop    esi
c000e65a:	5f                   	pop    edi
c000e65b:	c3                   	ret    
c000e65c:	c7 44 24 20 e5 18 02 c0 	mov    DWORD PTR [esp+0x20],0xc00218e5
c000e664:	83 c4 10             	add    esp,0x10
c000e667:	5b                   	pop    ebx
c000e668:	5e                   	pop    esi
c000e669:	5f                   	pop    edi
c000e66a:	e9 dd 73 00 00       	jmp    c0015a4c <Krnl::panic(char const*)>
c000e66f:	90                   	nop

c000e670 <VAS::freeAllocatedPages(unsigned long)>:
c000e670:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e674:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e678:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e67c:	74 09                	je     c000e687 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e67e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e682:	e9 c8 fe ff ff       	jmp    c000e54f <Virt::freeKernelVirtualPages(unsigned long)>
c000e687:	c7 44 24 04 04 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021704
c000e68f:	e9 89 0b 00 00       	jmp    c000f21d <Dbg::kprintf(char const*, ...)>

c000e694 <VAS::virtualToPhysical(unsigned long)>:
c000e694:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e698:	50                   	push   eax
c000e699:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e69d:	52                   	push   edx
c000e69e:	e8 8d fe ff ff       	call   c000e530 <VAS::getPageTableEntry(unsigned long)>
c000e6a3:	59                   	pop    ecx
c000e6a4:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6a6:	5a                   	pop    edx
c000e6a7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e6ac:	c3                   	ret    
c000e6ad:	90                   	nop

c000e6ae <VAS::reflagRange(unsigned long, int, int, int)>:
c000e6ae:	55                   	push   ebp
c000e6af:	57                   	push   edi
c000e6b0:	56                   	push   esi
c000e6b1:	53                   	push   ebx
c000e6b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e6b6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e6ba:	89 c3                	mov    ebx,eax
c000e6bc:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000e6c0:	c1 e3 0c             	shl    ebx,0xc
c000e6c3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000e6c7:	01 f3                	add    ebx,esi
c000e6c9:	85 c0                	test   eax,eax
c000e6cb:	7e 1f                	jle    c000e6ec <VAS::reflagRange(unsigned long, int, int, int)+0x3e>
c000e6cd:	56                   	push   esi
c000e6ce:	81 c6 00 10 00 00    	add    esi,0x1000
c000e6d4:	55                   	push   ebp
c000e6d5:	e8 56 fe ff ff       	call   c000e530 <VAS::getPageTableEntry(unsigned long)>
c000e6da:	5a                   	pop    edx
c000e6db:	59                   	pop    ecx
c000e6dc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e6de:	21 f9                	and    ecx,edi
c000e6e0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e6e4:	09 d1                	or     ecx,edx
c000e6e6:	39 f3                	cmp    ebx,esi
c000e6e8:	89 08                	mov    DWORD PTR [eax],ecx
c000e6ea:	75 e1                	jne    c000e6cd <VAS::reflagRange(unsigned long, int, int, int)+0x1f>
c000e6ec:	5b                   	pop    ebx
c000e6ed:	5e                   	pop    esi
c000e6ee:	5f                   	pop    edi
c000e6ef:	5d                   	pop    ebp
c000e6f0:	c3                   	ret    
c000e6f1:	90                   	nop

c000e6f2 <VAS::setToWriteCombining(unsigned long, int)>:
c000e6f2:	83 ec 0c             	sub    esp,0xc
c000e6f5:	e8 e6 61 00 00       	call   c00148e0 <thisCPU()>
c000e6fa:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000e701:	75 04                	jne    c000e707 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000e703:	83 c4 0c             	add    esp,0xc
c000e706:	c3                   	ret    
c000e707:	83 ec 0c             	sub    esp,0xc
c000e70a:	68 80 00 00 00       	push   0x80
c000e70f:	6a ff                	push   0xffffffff
c000e711:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e715:	50                   	push   eax
c000e716:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e71a:	52                   	push   edx
c000e71b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e71f:	51                   	push   ecx
c000e720:	e8 89 ff ff ff       	call   c000e6ae <VAS::reflagRange(unsigned long, int, int, int)>
c000e725:	83 c4 20             	add    esp,0x20
c000e728:	83 c4 0c             	add    esp,0xc
c000e72b:	c3                   	ret    

c000e72c <VAS::mapOtherVASIn(bool, VAS*)>:
c000e72c:	83 ec 0c             	sub    esp,0xc
c000e72f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e733:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e738:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e73b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e73f:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e742:	19 c0                	sbb    eax,eax
c000e744:	83 ca 03             	or     edx,0x3
c000e747:	83 e0 fc             	and    eax,0xfffffffc
c000e74a:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e751:	e8 8f 10 01 00       	call   c001f7e5 <CPU::readCR3()>
c000e756:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e75a:	83 c4 0c             	add    esp,0xc
c000e75d:	e9 95 10 01 00       	jmp    c001f7f7 <CPU::writeCR3(unsigned long)>

c000e762 <VAS::~VAS()>:
c000e762:	83 ec 2c             	sub    esp,0x2c
c000e765:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e76d:	e8 e3 a2 00 00       	call   c0018a55 <lockScheduler()>
c000e772:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e777:	8b 00                	mov    eax,DWORD PTR [eax]
c000e779:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e77c:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e782:	83 ec 04             	sub    esp,0x4
c000e785:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e789:	6a 01                	push   0x1
c000e78b:	50                   	push   eax
c000e78c:	e8 9b ff ff ff       	call   c000e72c <VAS::mapOtherVASIn(bool, VAS*)>
c000e791:	83 c4 10             	add    esp,0x10
c000e794:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e79c:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e7a4:	0f 8f d7 00 00 00    	jg     c000e881 <VAS::~VAS()+0x11f>
c000e7aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7ae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e7b1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e7b5:	c1 e2 02             	shl    edx,0x2
c000e7b8:	01 d0                	add    eax,edx
c000e7ba:	8b 00                	mov    eax,DWORD PTR [eax]
c000e7bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e7c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c4:	83 e0 01             	and    eax,0x1
c000e7c7:	0f 84 ab 00 00 00    	je     c000e878 <VAS::~VAS()+0x116>
c000e7cd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e7d5:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e7dd:	7f 75                	jg     c000e854 <VAS::~VAS()+0xf2>
c000e7df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e7e3:	c1 e0 0a             	shl    eax,0xa
c000e7e6:	89 c2                	mov    edx,eax
c000e7e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e7ec:	01 d0                	add    eax,edx
c000e7ee:	c1 e0 0c             	shl    eax,0xc
c000e7f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e7f5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e7fa:	8b 00                	mov    eax,DWORD PTR [eax]
c000e7fc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e7ff:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e805:	83 ec 04             	sub    esp,0x4
c000e808:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e80c:	6a 01                	push   0x1
c000e80e:	50                   	push   eax
c000e80f:	e8 f0 fc ff ff       	call   c000e504 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e814:	83 c4 10             	add    esp,0x10
c000e817:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e81b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e81f:	8b 00                	mov    eax,DWORD PTR [eax]
c000e821:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e825:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e829:	25 01 04 00 00       	and    eax,0x401
c000e82e:	3d 01 04 00 00       	cmp    eax,0x401
c000e833:	75 19                	jne    c000e84e <VAS::~VAS()+0xec>
c000e835:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e839:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e83e:	83 ec 0c             	sub    esp,0xc
c000e841:	50                   	push   eax
c000e842:	e8 ed dc ff ff       	call   c000c534 <Phys::freePage(unsigned long)>
c000e847:	83 c4 10             	add    esp,0x10
c000e84a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e84e:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e852:	eb 81                	jmp    c000e7d5 <VAS::~VAS()+0x73>
c000e854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e858:	25 00 04 00 00       	and    eax,0x400
c000e85d:	74 19                	je     c000e878 <VAS::~VAS()+0x116>
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e868:	83 ec 0c             	sub    esp,0xc
c000e86b:	50                   	push   eax
c000e86c:	e8 c3 dc ff ff       	call   c000c534 <Phys::freePage(unsigned long)>
c000e871:	83 c4 10             	add    esp,0x10
c000e874:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e878:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e87c:	e9 1b ff ff ff       	jmp    c000e79c <VAS::~VAS()+0x3a>
c000e881:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e885:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e888:	83 ec 0c             	sub    esp,0xc
c000e88b:	50                   	push   eax
c000e88c:	e8 be fc ff ff       	call   c000e54f <Virt::freeKernelVirtualPages(unsigned long)>
c000e891:	83 c4 10             	add    esp,0x10
c000e894:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e898:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e89b:	83 ec 0c             	sub    esp,0xc
c000e89e:	50                   	push   eax
c000e89f:	e8 90 dc ff ff       	call   c000c534 <Phys::freePage(unsigned long)>
c000e8a4:	83 c4 10             	add    esp,0x10
c000e8a7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e8ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e8af:	c1 e0 02             	shl    eax,0x2
c000e8b2:	83 ec 08             	sub    esp,0x8
c000e8b5:	50                   	push   eax
c000e8b6:	68 28 17 02 c0       	push   0xc0021728
c000e8bb:	e8 5d 09 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000e8c0:	83 c4 10             	add    esp,0x10
c000e8c3:	e8 8f a1 00 00       	call   c0018a57 <unlockScheduler()>
c000e8c8:	90                   	nop
c000e8c9:	83 c4 2c             	add    esp,0x2c
c000e8cc:	c3                   	ret    
c000e8cd:	90                   	nop

c000e8ce <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e8ce:	55                   	push   ebp
c000e8cf:	57                   	push   edi
c000e8d0:	56                   	push   esi
c000e8d1:	53                   	push   ebx
c000e8d2:	83 ec 1c             	sub    esp,0x1c
c000e8d5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e8d9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e8dd:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e8e3:	77 08                	ja     c000e8ed <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e8e5:	0f 20 d8             	mov    eax,cr3
c000e8e8:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e8eb:	75 49                	jne    c000e936 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c000e8ed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e8f1:	09 d8                	or     eax,ebx
c000e8f3:	a9 ff 0f 00 00       	test   eax,0xfff
c000e8f8:	75 59                	jne    c000e953 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c000e8fa:	89 de                	mov    esi,ebx
c000e8fc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e8ff:	c1 ee 16             	shr    esi,0x16
c000e902:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e909:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e90d:	74 56                	je     c000e965 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c000e90f:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e915:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e919:	c1 eb 0a             	shr    ebx,0xa
c000e91c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e920:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e926:	09 d0                	or     eax,edx
c000e928:	c1 e6 0c             	shl    esi,0xc
c000e92b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e92e:	83 c4 1c             	add    esp,0x1c
c000e931:	5b                   	pop    ebx
c000e932:	5e                   	pop    esi
c000e933:	5f                   	pop    edi
c000e934:	5d                   	pop    ebp
c000e935:	c3                   	ret    
c000e936:	83 ec 0c             	sub    esp,0xc
c000e939:	68 48 17 02 c0       	push   0xc0021748
c000e93e:	e8 da 08 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000e943:	83 c4 10             	add    esp,0x10
c000e946:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e94a:	09 d8                	or     eax,ebx
c000e94c:	a9 ff 0f 00 00       	test   eax,0xfff
c000e951:	74 a7                	je     c000e8fa <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e953:	83 ec 0c             	sub    esp,0xc
c000e956:	68 b0 17 02 c0       	push   0xc00217b0
c000e95b:	e8 ec 70 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c000e960:	83 c4 10             	add    esp,0x10
c000e963:	eb 95                	jmp    c000e8fa <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e965:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e969:	e8 53 dc ff ff       	call   c000c5c1 <Phys::allocatePage()>
c000e96e:	89 c5                	mov    ebp,eax
c000e970:	e8 1a fa ff ff       	call   c000e38f <Virt::getAKernelVAS()>
c000e975:	83 ec 0c             	sub    esp,0xc
c000e978:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e97c:	6a 01                	push   0x1
c000e97e:	e8 7f f8 ff ff       	call   c000e202 <Virt::allocateKernelVirtualPages(int)>
c000e983:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e98a:	6a 01                	push   0x1
c000e98c:	50                   	push   eax
c000e98d:	55                   	push   ebp
c000e98e:	81 cd 07 04 00 00    	or     ebp,0x407
c000e994:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e998:	51                   	push   ecx
c000e999:	e8 22 02 00 00       	call   c000ebc0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e99e:	83 c4 1c             	add    esp,0x1c
c000e9a1:	68 00 10 00 00       	push   0x1000
c000e9a6:	6a 00                	push   0x0
c000e9a8:	50                   	push   eax
c000e9a9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e9ad:	e8 1b 1d ff ff       	call   c00006cd <memset>
c000e9b2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e9b6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e9b9:	e8 91 fb ff ff       	call   c000e54f <Virt::freeKernelVirtualPages(unsigned long)>
c000e9be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e9c2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9c5:	83 c4 10             	add    esp,0x10
c000e9c8:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e9cb:	e9 3f ff ff ff       	jmp    c000e90f <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e9d0 <VAS::allocatePages(int, int)>:
c000e9d0:	55                   	push   ebp
c000e9d1:	57                   	push   edi
c000e9d2:	56                   	push   esi
c000e9d3:	53                   	push   ebx
c000e9d4:	83 ec 1c             	sub    esp,0x1c
c000e9d7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e9db:	e8 00 5f 00 00       	call   c00148e0 <thisCPU()>
c000e9e0:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e9e6:	83 e0 01             	and    eax,0x1
c000e9e9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e9ed:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e9f1:	0f 85 d5 00 00 00    	jne    c000eacc <VAS::allocatePages(int, int)+0xfc>
c000e9f7:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e9fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9fe:	85 c0                	test   eax,eax
c000ea00:	0f 84 aa 00 00 00    	je     c000eab0 <VAS::allocatePages(int, int)+0xe0>
c000ea06:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000ea0a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ea0e:	c1 e6 0c             	shl    esi,0xc
c000ea11:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000ea15:	01 de                	add    esi,ebx
c000ea17:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea1b:	81 cd 00 04 00 00    	or     ebp,0x400
c000ea21:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000ea24:	85 c0                	test   eax,eax
c000ea26:	7e 25                	jle    c000ea4d <VAS::allocatePages(int, int)+0x7d>
c000ea28:	e8 94 db ff ff       	call   c000c5c1 <Phys::allocatePage()>
c000ea2d:	55                   	push   ebp
c000ea2e:	53                   	push   ebx
c000ea2f:	50                   	push   eax
c000ea30:	57                   	push   edi
c000ea31:	e8 98 fe ff ff       	call   c000e8ce <VAS::mapPage(unsigned long, unsigned long, int)>
c000ea36:	83 c4 10             	add    esp,0x10
c000ea39:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea3e:	74 03                	je     c000ea43 <VAS::allocatePages(int, int)+0x73>
c000ea40:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea43:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea49:	39 de                	cmp    esi,ebx
c000ea4b:	75 db                	jne    c000ea28 <VAS::allocatePages(int, int)+0x58>
c000ea4d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea52:	74 3f                	je     c000ea93 <VAS::allocatePages(int, int)+0xc3>
c000ea54:	c1 ee 0a             	shr    esi,0xa
c000ea57:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ea5b:	c1 eb 0a             	shr    ebx,0xa
c000ea5e:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000ea64:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000ea6a:	81 ee 00 00 40 00    	sub    esi,0x400000
c000ea70:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000ea76:	39 f3                	cmp    ebx,esi
c000ea78:	77 0d                	ja     c000ea87 <VAS::allocatePages(int, int)+0xb7>
c000ea7a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea7d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea83:	39 de                	cmp    esi,ebx
c000ea85:	73 f3                	jae    c000ea7a <VAS::allocatePages(int, int)+0xaa>
c000ea87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea8b:	83 c4 1c             	add    esp,0x1c
c000ea8e:	5b                   	pop    ebx
c000ea8f:	5e                   	pop    esi
c000ea90:	5f                   	pop    edi
c000ea91:	5d                   	pop    ebp
c000ea92:	c3                   	ret    
c000ea93:	e8 4d 0d 01 00       	call   c001f7e5 <CPU::readCR3()>
c000ea98:	83 ec 0c             	sub    esp,0xc
c000ea9b:	50                   	push   eax
c000ea9c:	e8 56 0d 01 00       	call   c001f7f7 <CPU::writeCR3(unsigned long)>
c000eaa1:	83 c4 10             	add    esp,0x10
c000eaa4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eaa8:	83 c4 1c             	add    esp,0x1c
c000eaab:	5b                   	pop    ebx
c000eaac:	5e                   	pop    esi
c000eaad:	5f                   	pop    edi
c000eaae:	5d                   	pop    ebp
c000eaaf:	c3                   	ret    
c000eab0:	83 ec 0c             	sub    esp,0xc
c000eab3:	68 d4 17 02 c0       	push   0xc00217d4
c000eab8:	e8 8f 6f 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c000eabd:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000eac0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eac4:	83 c4 10             	add    esp,0x10
c000eac7:	e9 3a ff ff ff       	jmp    c000ea06 <VAS::allocatePages(int, int)+0x36>
c000eacc:	83 ec 0c             	sub    esp,0xc
c000eacf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ead3:	53                   	push   ebx
c000ead4:	e8 29 f7 ff ff       	call   c000e202 <Virt::allocateKernelVirtualPages(int)>
c000ead9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eadd:	83 c4 10             	add    esp,0x10
c000eae0:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000eae5:	0f 87 94 00 00 00    	ja     c000eb7f <VAS::allocatePages(int, int)+0x1af>
c000eaeb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eaef:	85 d2                	test   edx,edx
c000eaf1:	7e 3c                	jle    c000eb2f <VAS::allocatePages(int, int)+0x15f>
c000eaf3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eaf7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eafb:	c1 e5 0c             	shl    ebp,0xc
c000eafe:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000eb02:	81 ce 00 04 00 00    	or     esi,0x400
c000eb08:	01 dd                	add    ebp,ebx
c000eb0a:	e8 b2 da ff ff       	call   c000c5c1 <Phys::allocatePage()>
c000eb0f:	56                   	push   esi
c000eb10:	53                   	push   ebx
c000eb11:	50                   	push   eax
c000eb12:	57                   	push   edi
c000eb13:	e8 b6 fd ff ff       	call   c000e8ce <VAS::mapPage(unsigned long, unsigned long, int)>
c000eb18:	83 c4 10             	add    esp,0x10
c000eb1b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb20:	74 03                	je     c000eb25 <VAS::allocatePages(int, int)+0x155>
c000eb22:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb25:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb2b:	39 dd                	cmp    ebp,ebx
c000eb2d:	75 db                	jne    c000eb0a <VAS::allocatePages(int, int)+0x13a>
c000eb2f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb34:	0f 84 59 ff ff ff    	je     c000ea93 <VAS::allocatePages(int, int)+0xc3>
c000eb3a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eb3e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb42:	c1 e0 0c             	shl    eax,0xc
c000eb45:	89 d3                	mov    ebx,edx
c000eb47:	c1 eb 0a             	shr    ebx,0xa
c000eb4a:	01 d0                	add    eax,edx
c000eb4c:	c1 e8 0a             	shr    eax,0xa
c000eb4f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000eb55:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eb5a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000eb60:	2d 00 00 40 00       	sub    eax,0x400000
c000eb65:	39 c3                	cmp    ebx,eax
c000eb67:	0f 87 1a ff ff ff    	ja     c000ea87 <VAS::allocatePages(int, int)+0xb7>
c000eb6d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb70:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb76:	39 d8                	cmp    eax,ebx
c000eb78:	73 f3                	jae    c000eb6d <VAS::allocatePages(int, int)+0x19d>
c000eb7a:	e9 08 ff ff ff       	jmp    c000ea87 <VAS::allocatePages(int, int)+0xb7>
c000eb7f:	e8 5c 5d 00 00       	call   c00148e0 <thisCPU()>
c000eb84:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000eb8b:	0f 84 5a ff ff ff    	je     c000eaeb <VAS::allocatePages(int, int)+0x11b>
c000eb91:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eb95:	80 cd 01             	or     ch,0x1
c000eb98:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c000eb9c:	e9 4a ff ff ff       	jmp    c000eaeb <VAS::allocatePages(int, int)+0x11b>
c000eba1:	90                   	nop

c000eba2 <VAS::setCPUSpecific(unsigned long)>:
c000eba2:	83 ec 0c             	sub    esp,0xc
c000eba5:	6a 05                	push   0x5
c000eba7:	68 00 00 40 c2       	push   0xc2400000
c000ebac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ebb0:	50                   	push   eax
c000ebb1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ebb5:	52                   	push   edx
c000ebb6:	e8 13 fd ff ff       	call   c000e8ce <VAS::mapPage(unsigned long, unsigned long, int)>
c000ebbb:	83 c4 1c             	add    esp,0x1c
c000ebbe:	c3                   	ret    
c000ebbf:	90                   	nop

c000ebc0 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000ebc0:	55                   	push   ebp
c000ebc1:	57                   	push   edi
c000ebc2:	56                   	push   esi
c000ebc3:	53                   	push   ebx
c000ebc4:	83 ec 1c             	sub    esp,0x1c
c000ebc7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000ebcb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ebcf:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000ebd3:	e8 08 5d 00 00       	call   c00148e0 <thisCPU()>
c000ebd8:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000ebde:	83 e0 01             	and    eax,0x1
c000ebe1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ebe5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebe9:	85 c0                	test   eax,eax
c000ebeb:	7e 39                	jle    c000ec26 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000ebed:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebf1:	89 f3                	mov    ebx,esi
c000ebf3:	c1 e0 0c             	shl    eax,0xc
c000ebf6:	01 f0                	add    eax,esi
c000ebf8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ebfc:	55                   	push   ebp
c000ebfd:	53                   	push   ebx
c000ebfe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ec02:	29 f0                	sub    eax,esi
c000ec04:	01 d8                	add    eax,ebx
c000ec06:	50                   	push   eax
c000ec07:	57                   	push   edi
c000ec08:	e8 c1 fc ff ff       	call   c000e8ce <VAS::mapPage(unsigned long, unsigned long, int)>
c000ec0d:	83 c4 10             	add    esp,0x10
c000ec10:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ec15:	74 03                	je     c000ec1a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000ec17:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ec1a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ec20:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000ec24:	75 d6                	jne    c000ebfc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000ec26:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ec2b:	74 42                	je     c000ec6f <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000ec2d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ec31:	89 f3                	mov    ebx,esi
c000ec33:	c1 e0 0c             	shl    eax,0xc
c000ec36:	c1 eb 0a             	shr    ebx,0xa
c000ec39:	01 f0                	add    eax,esi
c000ec3b:	c1 e8 0a             	shr    eax,0xa
c000ec3e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000ec44:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ec49:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000ec4f:	2d 00 00 40 00       	sub    eax,0x400000
c000ec54:	39 c3                	cmp    ebx,eax
c000ec56:	77 0d                	ja     c000ec65 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000ec58:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ec5b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ec61:	39 d8                	cmp    eax,ebx
c000ec63:	73 f3                	jae    c000ec58 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000ec65:	83 c4 1c             	add    esp,0x1c
c000ec68:	89 f0                	mov    eax,esi
c000ec6a:	5b                   	pop    ebx
c000ec6b:	5e                   	pop    esi
c000ec6c:	5f                   	pop    edi
c000ec6d:	5d                   	pop    ebp
c000ec6e:	c3                   	ret    
c000ec6f:	e8 71 0b 01 00       	call   c001f7e5 <CPU::readCR3()>
c000ec74:	83 ec 0c             	sub    esp,0xc
c000ec77:	50                   	push   eax
c000ec78:	e8 7a 0b 01 00       	call   c001f7f7 <CPU::writeCR3(unsigned long)>
c000ec7d:	83 c4 10             	add    esp,0x10
c000ec80:	89 f0                	mov    eax,esi
c000ec82:	83 c4 1c             	add    esp,0x1c
c000ec85:	5b                   	pop    ebx
c000ec86:	5e                   	pop    esi
c000ec87:	5f                   	pop    edi
c000ec88:	5d                   	pop    ebp
c000ec89:	c3                   	ret    

c000ec8a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000ec8a:	55                   	push   ebp
c000ec8b:	57                   	push   edi
c000ec8c:	56                   	push   esi
c000ec8d:	53                   	push   ebx
c000ec8e:	83 ec 1c             	sub    esp,0x1c
c000ec91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ec95:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ec99:	09 f0                	or     eax,esi
c000ec9b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ec9f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000eca3:	a9 ff 0f 00 00       	test   eax,0xfff
c000eca8:	75 4c                	jne    c000ecf6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6c>
c000ecaa:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ecae:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ecb1:	c1 eb 16             	shr    ebx,0x16
c000ecb4:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000ecbb:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000ecbf:	74 4f                	je     c000ed10 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x86>
c000ecc1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ecc5:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000ecc9:	c1 e8 0a             	shr    eax,0xa
c000eccc:	80 fa 01             	cmp    dl,0x1
c000eccf:	19 d2                	sbb    edx,edx
c000ecd1:	25 fc 0f 00 00       	and    eax,0xffc
c000ecd6:	c1 e3 0c             	shl    ebx,0xc
c000ecd9:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000ecdf:	01 d8                	add    eax,ebx
c000ece1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ece5:	09 d9                	or     ecx,ebx
c000ece7:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000ecee:	83 c4 1c             	add    esp,0x1c
c000ecf1:	5b                   	pop    ebx
c000ecf2:	5e                   	pop    esi
c000ecf3:	5f                   	pop    edi
c000ecf4:	5d                   	pop    ebp
c000ecf5:	c3                   	ret    
c000ecf6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ecfa:	83 ec 0c             	sub    esp,0xc
c000ecfd:	68 00 18 02 c0       	push   0xc0021800
c000ed02:	e8 45 6d 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ed0e:	eb 9a                	jmp    c000ecaa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c000ed10:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ed14:	e8 a8 d8 ff ff       	call   c000c5c1 <Phys::allocatePage()>
c000ed19:	89 c5                	mov    ebp,eax
c000ed1b:	e8 6f f6 ff ff       	call   c000e38f <Virt::getAKernelVAS()>
c000ed20:	83 ec 0c             	sub    esp,0xc
c000ed23:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ed27:	6a 01                	push   0x1
c000ed29:	e8 d4 f4 ff ff       	call   c000e202 <Virt::allocateKernelVirtualPages(int)>
c000ed2e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000ed35:	6a 01                	push   0x1
c000ed37:	50                   	push   eax
c000ed38:	55                   	push   ebp
c000ed39:	81 cd 07 04 00 00    	or     ebp,0x407
c000ed3f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000ed43:	51                   	push   ecx
c000ed44:	e8 77 fe ff ff       	call   c000ebc0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ed49:	83 c4 1c             	add    esp,0x1c
c000ed4c:	68 00 10 00 00       	push   0x1000
c000ed51:	6a 00                	push   0x0
c000ed53:	50                   	push   eax
c000ed54:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ed58:	e8 70 19 ff ff       	call   c00006cd <memset>
c000ed5d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ed61:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ed64:	e8 e6 f7 ff ff       	call   c000e54f <Virt::freeKernelVirtualPages(unsigned long)>
c000ed69:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ed6c:	83 c4 10             	add    esp,0x10
c000ed6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ed73:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000ed76:	e9 46 ff ff ff       	jmp    c000ecc1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000ed7b:	90                   	nop

c000ed7c <VAS::VAS(bool)>:
c000ed7c:	53                   	push   ebx
c000ed7d:	83 ec 28             	sub    esp,0x28
c000ed80:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed84:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ed88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed8c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ed93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed97:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000ed9b:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000ed9e:	e8 1e d8 ff ff       	call   c000c5c1 <Phys::allocatePage()>
c000eda3:	89 c2                	mov    edx,eax
c000eda5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eda9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000edac:	e8 de f5 ff ff       	call   c000e38f <Virt::getAKernelVAS()>
c000edb1:	89 c3                	mov    ebx,eax
c000edb3:	83 ec 0c             	sub    esp,0xc
c000edb6:	6a 01                	push   0x1
c000edb8:	e8 45 f4 ff ff       	call   c000e202 <Virt::allocateKernelVirtualPages(int)>
c000edbd:	83 c4 10             	add    esp,0x10
c000edc0:	89 c2                	mov    edx,eax
c000edc2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edc6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000edc9:	83 ec 0c             	sub    esp,0xc
c000edcc:	6a 03                	push   0x3
c000edce:	6a 01                	push   0x1
c000edd0:	52                   	push   edx
c000edd1:	50                   	push   eax
c000edd2:	53                   	push   ebx
c000edd3:	e8 e8 fd ff ff       	call   c000ebc0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000edd8:	83 c4 20             	add    esp,0x20
c000eddb:	89 c2                	mov    edx,eax
c000eddd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ede1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ede4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000edec:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000edf4:	7f 1c                	jg     c000ee12 <VAS::VAS(bool)+0x96>
c000edf6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edfa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000edfd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ee01:	c1 e2 02             	shl    edx,0x2
c000ee04:	01 d0                	add    eax,edx
c000ee06:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ee0c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ee10:	eb da                	jmp    c000edec <VAS::VAS(bool)+0x70>
c000ee12:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000ee1a:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000ee22:	7f 71                	jg     c000ee95 <VAS::VAS(bool)+0x119>
c000ee24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee28:	2d 00 02 00 00       	sub    eax,0x200
c000ee2d:	c1 e0 0c             	shl    eax,0xc
c000ee30:	83 c8 03             	or     eax,0x3
c000ee33:	89 c3                	mov    ebx,eax
c000ee35:	e8 a6 5a 00 00       	call   c00148e0 <thisCPU()>
c000ee3a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ee40:	83 e0 10             	and    eax,0x10
c000ee43:	84 c0                	test   al,al
c000ee45:	74 07                	je     c000ee4e <VAS::VAS(bool)+0xd2>
c000ee47:	b8 00 01 00 00       	mov    eax,0x100
c000ee4c:	eb 05                	jmp    c000ee53 <VAS::VAS(bool)+0xd7>
c000ee4e:	b8 00 00 00 00       	mov    eax,0x0
c000ee53:	09 d8                	or     eax,ebx
c000ee55:	89 c1                	mov    ecx,eax
c000ee57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee5b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee5e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee62:	c1 e2 02             	shl    edx,0x2
c000ee65:	01 d0                	add    eax,edx
c000ee67:	89 ca                	mov    edx,ecx
c000ee69:	89 10                	mov    DWORD PTR [eax],edx
c000ee6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee6f:	2d 40 03 00 00       	sub    eax,0x340
c000ee74:	83 f8 7f             	cmp    eax,0x7f
c000ee77:	77 16                	ja     c000ee8f <VAS::VAS(bool)+0x113>
c000ee79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee7d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee80:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee84:	c1 e2 02             	shl    edx,0x2
c000ee87:	01 d0                	add    eax,edx
c000ee89:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ee8f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ee93:	eb 85                	jmp    c000ee1a <VAS::VAS(bool)+0x9e>
c000ee95:	e8 46 5a 00 00       	call   c00148e0 <thisCPU()>
c000ee9a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000eea0:	83 e0 10             	and    eax,0x10
c000eea3:	84 c0                	test   al,al
c000eea5:	74 07                	je     c000eeae <VAS::VAS(bool)+0x132>
c000eea7:	b8 03 41 00 00       	mov    eax,0x4103
c000eeac:	eb 05                	jmp    c000eeb3 <VAS::VAS(bool)+0x137>
c000eeae:	b8 03 40 00 00       	mov    eax,0x4003
c000eeb3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000eeb7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000eeba:	81 c2 20 0c 00 00    	add    edx,0xc20
c000eec0:	89 02                	mov    DWORD PTR [edx],eax
c000eec2:	e8 19 5a 00 00       	call   c00148e0 <thisCPU()>
c000eec7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000eecd:	83 ec 08             	sub    esp,0x8
c000eed0:	50                   	push   eax
c000eed1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eed5:	e8 c8 fc ff ff       	call   c000eba2 <VAS::setCPUSpecific(unsigned long)>
c000eeda:	83 c4 10             	add    esp,0x10
c000eedd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eee1:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000eee4:	e8 f7 59 00 00       	call   c00148e0 <thisCPU()>
c000eee9:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000eeef:	83 e0 10             	and    eax,0x10
c000eef2:	84 c0                	test   al,al
c000eef4:	74 07                	je     c000eefd <VAS::VAS(bool)+0x181>
c000eef6:	b8 00 01 00 00       	mov    eax,0x100
c000eefb:	eb 05                	jmp    c000ef02 <VAS::VAS(bool)+0x186>
c000eefd:	b8 00 00 00 00       	mov    eax,0x0
c000ef02:	09 d8                	or     eax,ebx
c000ef04:	89 c2                	mov    edx,eax
c000ef06:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef0a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ef0d:	05 fc 0f 00 00       	add    eax,0xffc
c000ef12:	83 ca 03             	or     edx,0x3
c000ef15:	89 10                	mov    DWORD PTR [eax],edx
c000ef17:	e8 c4 59 00 00       	call   c00148e0 <thisCPU()>
c000ef1c:	83 ec 0c             	sub    esp,0xc
c000ef1f:	50                   	push   eax
c000ef20:	e8 ef 19 00 00       	call   c0010914 <Device::getName()>
c000ef25:	83 c4 10             	add    esp,0x10
c000ef28:	83 ec 08             	sub    esp,0x8
c000ef2b:	68 ff 18 02 c0       	push   0xc00218ff
c000ef30:	50                   	push   eax
c000ef31:	e8 87 18 ff ff       	call   c00007bd <strcmp>
c000ef36:	83 c4 10             	add    esp,0x10
c000ef39:	85 c0                	test   eax,eax
c000ef3b:	0f 94 c0             	sete   al
c000ef3e:	84 c0                	test   al,al
c000ef40:	74 64                	je     c000efa6 <VAS::VAS(bool)+0x22a>
c000ef42:	e8 ec 9a 00 00       	call   c0018a33 <disableIRQs()>
c000ef47:	e8 94 59 00 00       	call   c00148e0 <thisCPU()>
c000ef4c:	05 7c 09 00 00       	add    eax,0x97c
c000ef51:	83 ec 0c             	sub    esp,0xc
c000ef54:	50                   	push   eax
c000ef55:	e8 04 cb ff ff       	call   c000ba5e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ef5a:	83 c4 10             	add    esp,0x10
c000ef5d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ef62:	89 c3                	mov    ebx,eax
c000ef64:	e8 77 59 00 00       	call   c00148e0 <thisCPU()>
c000ef69:	05 7c 09 00 00       	add    eax,0x97c
c000ef6e:	83 ec 0c             	sub    esp,0xc
c000ef71:	50                   	push   eax
c000ef72:	e8 e7 ca ff ff       	call   c000ba5e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ef77:	83 c4 10             	add    esp,0x10
c000ef7a:	83 ec 08             	sub    esp,0x8
c000ef7d:	50                   	push   eax
c000ef7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ef82:	e8 a9 f5 ff ff       	call   c000e530 <VAS::getPageTableEntry(unsigned long)>
c000ef87:	83 c4 10             	add    esp,0x10
c000ef8a:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ef91:	6a 11                	push   0x11
c000ef93:	53                   	push   ebx
c000ef94:	50                   	push   eax
c000ef95:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ef99:	e8 30 f9 ff ff       	call   c000e8ce <VAS::mapPage(unsigned long, unsigned long, int)>
c000ef9e:	83 c4 10             	add    esp,0x10
c000efa1:	e8 a0 9a 00 00       	call   c0018a46 <enableIRQs()>
c000efa6:	90                   	nop
c000efa7:	83 c4 28             	add    esp,0x28
c000efaa:	5b                   	pop    ebx
c000efab:	c3                   	ret    

c000efac <mapVASFirstTime>:
c000efac:	55                   	push   ebp
c000efad:	57                   	push   edi
c000efae:	56                   	push   esi
c000efaf:	53                   	push   ebx
c000efb0:	83 ec 0c             	sub    esp,0xc
c000efb3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000efb8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000efbb:	4a                   	dec    edx
c000efbc:	0f 84 99 00 00 00    	je     c000f05b <mapVASFirstTime+0xaf>
c000efc2:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000efc5:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000efc8:	c1 e5 15             	shl    ebp,0x15
c000efcb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000efd0:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000efd5:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000efdb:	29 eb                	sub    ebx,ebp
c000efdd:	29 ee                	sub    esi,ebp
c000efdf:	e8 dd d5 ff ff       	call   c000c5c1 <Phys::allocatePage()>
c000efe4:	83 ec 0c             	sub    esp,0xc
c000efe7:	68 03 04 00 00       	push   0x403
c000efec:	6a 01                	push   0x1
c000efee:	53                   	push   ebx
c000efef:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000eff5:	50                   	push   eax
c000eff6:	57                   	push   edi
c000eff7:	e8 c4 fb ff ff       	call   c000ebc0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000effc:	83 c4 20             	add    esp,0x20
c000efff:	39 f3                	cmp    ebx,esi
c000f001:	75 dc                	jne    c000efdf <mapVASFirstTime+0x33>
c000f003:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000f008:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000f00d:	29 e8                	sub    eax,ebp
c000f00f:	29 ee                	sub    esi,ebp
c000f011:	89 c5                	mov    ebp,eax
c000f013:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000f017:	19 db                	sbb    ebx,ebx
c000f019:	e8 a3 d5 ff ff       	call   c000c5c1 <Phys::allocatePage()>
c000f01e:	83 e3 04             	and    ebx,0x4
c000f021:	83 ec 0c             	sub    esp,0xc
c000f024:	81 c3 03 04 00 00    	add    ebx,0x403
c000f02a:	53                   	push   ebx
c000f02b:	6a 01                	push   0x1
c000f02d:	56                   	push   esi
c000f02e:	81 ee 00 10 00 00    	sub    esi,0x1000
c000f034:	50                   	push   eax
c000f035:	57                   	push   edi
c000f036:	e8 85 fb ff ff       	call   c000ebc0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f03b:	83 c4 20             	add    esp,0x20
c000f03e:	39 f5                	cmp    ebp,esi
c000f040:	75 d1                	jne    c000f013 <mapVASFirstTime+0x67>
c000f042:	e8 9e 07 01 00       	call   c001f7e5 <CPU::readCR3()>
c000f047:	83 ec 0c             	sub    esp,0xc
c000f04a:	50                   	push   eax
c000f04b:	e8 a7 07 01 00       	call   c001f7f7 <CPU::writeCR3(unsigned long)>
c000f050:	83 c4 10             	add    esp,0x10
c000f053:	83 c4 0c             	add    esp,0xc
c000f056:	5b                   	pop    ebx
c000f057:	5e                   	pop    esi
c000f058:	5f                   	pop    edi
c000f059:	5d                   	pop    ebp
c000f05a:	c3                   	ret    
c000f05b:	83 ec 0c             	sub    esp,0xc
c000f05e:	68 0d 19 02 c0       	push   0xc002190d
c000f063:	e8 b5 01 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000f068:	83 c4 10             	add    esp,0x10
c000f06b:	83 c4 0c             	add    esp,0xc
c000f06e:	5b                   	pop    ebx
c000f06f:	5e                   	pop    esi
c000f070:	5f                   	pop    edi
c000f071:	5d                   	pop    ebp
c000f072:	c3                   	ret    

c000f073 <__cxa_atexit>:
c000f073:	31 c0                	xor    eax,eax
c000f075:	c3                   	ret    

c000f076 <__cxa_finalize>:
c000f076:	c3                   	ret    

c000f077 <__stack_chk_fail>:
c000f077:	55                   	push   ebp
c000f078:	89 e5                	mov    ebp,esp
c000f07a:	83 ec 10             	sub    esp,0x10
c000f07d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000f080:	68 26 19 02 c0       	push   0xc0021926
c000f085:	e8 93 01 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000f08a:	58                   	pop    eax
c000f08b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f08e:	5a                   	pop    edx
c000f08f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f092:	68 26 19 02 c0       	push   0xc0021926
c000f097:	e8 81 01 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000f09c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f09f:	59                   	pop    ecx
c000f0a0:	5a                   	pop    edx
c000f0a1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0a3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f0a6:	68 26 19 02 c0       	push   0xc0021926
c000f0ab:	e8 6d 01 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000f0b0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f0b3:	59                   	pop    ecx
c000f0b4:	5a                   	pop    edx
c000f0b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f0bc:	68 26 19 02 c0       	push   0xc0021926
c000f0c1:	e8 57 01 00 00       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c000f0c6:	c7 04 24 2e 19 02 c0 	mov    DWORD PTR [esp],0xc002192e
c000f0cd:	e8 7a 69 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c000f0d2:	83 c4 10             	add    esp,0x10
c000f0d5:	c9                   	leave  
c000f0d6:	c3                   	ret    

c000f0d7 <__cxa_pure_virtual>:
c000f0d7:	83 ec 18             	sub    esp,0x18
c000f0da:	68 46 19 02 c0       	push   0xc0021946
c000f0df:	e8 68 69 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c000f0e4:	83 c4 1c             	add    esp,0x1c
c000f0e7:	c3                   	ret    

c000f0e8 <operator new(unsigned long)>:
c000f0e8:	e9 fe ce ff ff       	jmp    c000bfeb <malloc>

c000f0ed <operator new[](unsigned long)>:
c000f0ed:	e9 f9 ce ff ff       	jmp    c000bfeb <malloc>

c000f0f2 <operator delete(void*)>:
c000f0f2:	e9 14 cf ff ff       	jmp    c000c00b <rfree>

c000f0f7 <operator delete(void*, unsigned long)>:
c000f0f7:	e9 0f cf ff ff       	jmp    c000c00b <rfree>

c000f0fc <operator delete[](void*)>:
c000f0fc:	e9 0a cf ff ff       	jmp    c000c00b <rfree>

c000f101 <operator delete[](void*, unsigned long)>:
c000f101:	e9 05 cf ff ff       	jmp    c000c00b <rfree>

c000f106 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000f106:	57                   	push   edi
c000f107:	56                   	push   esi
c000f108:	be 5d 19 02 c0       	mov    esi,0xc002195d
c000f10d:	53                   	push   ebx
c000f10e:	83 ec 40             	sub    esp,0x40
c000f111:	a0 5c 19 02 c0       	mov    al,ds:0xc002195c
c000f116:	8d 7c 24 02          	lea    edi,[esp+0x2]
c000f11a:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c000f11e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000f122:	b8 3e 00 00 00       	mov    eax,0x3e
c000f127:	f7 c7 02 00 00 00    	test   edi,0x2
c000f12d:	75 69                	jne    c000f198 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x92>
c000f12f:	89 c1                	mov    ecx,eax
c000f131:	c1 e9 02             	shr    ecx,0x2
c000f134:	fc                   	cld    
c000f135:	31 d2                	xor    edx,edx
c000f137:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f139:	a8 02                	test   al,0x2
c000f13b:	74 0b                	je     c000f148 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x42>
c000f13d:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f140:	66 89 17             	mov    WORD PTR [edi],dx
c000f143:	ba 02 00 00 00       	mov    edx,0x2
c000f148:	a8 01                	test   al,0x1
c000f14a:	74 06                	je     c000f152 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000f14c:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000f14f:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000f152:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000f156:	83 f9 3e             	cmp    ecx,0x3e
c000f159:	7e 05                	jle    c000f160 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5a>
c000f15b:	b9 3e 00 00 00       	mov    ecx,0x3e
c000f160:	89 df                	mov    edi,ebx
c000f162:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000f166:	eb 02                	jmp    c000f16a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x64>
c000f168:	89 c7                	mov    edi,eax
c000f16a:	31 d2                	xor    edx,edx
c000f16c:	89 f8                	mov    eax,edi
c000f16e:	46                   	inc    esi
c000f16f:	f7 f1                	div    ecx
c000f171:	39 cf                	cmp    edi,ecx
c000f173:	73 f3                	jae    c000f168 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x62>
c000f175:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000f178:	eb 02                	jmp    c000f17c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x76>
c000f17a:	89 c3                	mov    ebx,eax
c000f17c:	31 d2                	xor    edx,edx
c000f17e:	89 d8                	mov    eax,ebx
c000f180:	f7 f1                	div    ecx
c000f182:	4e                   	dec    esi
c000f183:	39 cb                	cmp    ebx,ecx
c000f185:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000f189:	88 16                	mov    BYTE PTR [esi],dl
c000f18b:	73 ed                	jae    c000f17a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x74>
c000f18d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f191:	83 c4 40             	add    esp,0x40
c000f194:	5b                   	pop    ebx
c000f195:	5e                   	pop    esi
c000f196:	5f                   	pop    edi
c000f197:	c3                   	ret    
c000f198:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f19b:	83 c7 02             	add    edi,0x2
c000f19e:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000f1a2:	83 c6 02             	add    esi,0x2
c000f1a5:	83 e8 02             	sub    eax,0x2
c000f1a8:	eb 85                	jmp    c000f12f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>

c000f1aa <Dbg::logc(char)>:
c000f1aa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1ae:	ba fd 03 00 00       	mov    edx,0x3fd
c000f1b3:	ec                   	in     al,dx
c000f1b4:	a8 20                	test   al,0x20
c000f1b6:	74 fb                	je     c000f1b3 <Dbg::logc(char)+0x9>
c000f1b8:	ba f8 03 00 00       	mov    edx,0x3f8
c000f1bd:	88 c8                	mov    al,cl
c000f1bf:	ee                   	out    dx,al
c000f1c0:	c3                   	ret    

c000f1c1 <Dbg::logs(char*)>:
c000f1c1:	53                   	push   ebx
c000f1c2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000f1c6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f1c9:	84 c0                	test   al,al
c000f1cb:	74 0f                	je     c000f1dc <Dbg::logs(char*)+0x1b>
c000f1cd:	43                   	inc    ebx
c000f1ce:	50                   	push   eax
c000f1cf:	e8 d6 ff ff ff       	call   c000f1aa <Dbg::logc(char)>
c000f1d4:	5a                   	pop    edx
c000f1d5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f1d8:	84 c0                	test   al,al
c000f1da:	75 f1                	jne    c000f1cd <Dbg::logs(char*)+0xc>
c000f1dc:	5b                   	pop    ebx
c000f1dd:	c3                   	ret    

c000f1de <Dbg::logWriteInt(unsigned int)>:
c000f1de:	83 ec 10             	sub    esp,0x10
c000f1e1:	6a 0a                	push   0xa
c000f1e3:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f1e7:	50                   	push   eax
c000f1e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f1ec:	50                   	push   eax
c000f1ed:	e8 14 ff ff ff       	call   c000f106 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f1f2:	50                   	push   eax
c000f1f3:	e8 c9 ff ff ff       	call   c000f1c1 <Dbg::logs(char*)>
c000f1f8:	83 c4 20             	add    esp,0x20
c000f1fb:	c3                   	ret    

c000f1fc <Dbg::logWriteIntBase(unsigned int, int)>:
c000f1fc:	83 ec 10             	sub    esp,0x10
c000f1ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f203:	50                   	push   eax
c000f204:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f208:	50                   	push   eax
c000f209:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f20d:	52                   	push   edx
c000f20e:	e8 f3 fe ff ff       	call   c000f106 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f213:	50                   	push   eax
c000f214:	e8 a8 ff ff ff       	call   c000f1c1 <Dbg::logs(char*)>
c000f219:	83 c4 20             	add    esp,0x20
c000f21c:	c3                   	ret    

c000f21d <Dbg::kprintf(char const*, ...)>:
c000f21d:	55                   	push   ebp
c000f21e:	57                   	push   edi
c000f21f:	56                   	push   esi
c000f220:	53                   	push   ebx
c000f221:	83 ec 0c             	sub    esp,0xc
c000f224:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f228:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f22c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f230:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f233:	84 c0                	test   al,al
c000f235:	74 4d                	je     c000f284 <Dbg::kprintf(char const*, ...)+0x67>
c000f237:	31 ff                	xor    edi,edi
c000f239:	8d 77 01             	lea    esi,[edi+0x1]
c000f23c:	3c 25                	cmp    al,0x25
c000f23e:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000f241:	0f 85 ec 00 00 00    	jne    c000f333 <Dbg::kprintf(char const*, ...)+0x116>
c000f247:	83 c7 02             	add    edi,0x2
c000f24a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f24d:	83 e8 25             	sub    eax,0x25
c000f250:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000f253:	3c 53                	cmp    al,0x53
c000f255:	0f 87 c0 00 00 00    	ja     c000f31b <Dbg::kprintf(char const*, ...)+0xfe>
c000f25b:	25 ff 00 00 00       	and    eax,0xff
c000f260:	ff 24 85 9c 19 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde664]
c000f267:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f26b:	89 c8                	mov    eax,ecx
c000f26d:	83 c1 04             	add    ecx,0x4
c000f270:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f274:	8b 00                	mov    eax,DWORD PTR [eax]
c000f276:	50                   	push   eax
c000f277:	e8 45 ff ff ff       	call   c000f1c1 <Dbg::logs(char*)>
c000f27c:	58                   	pop    eax
c000f27d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000f280:	84 c0                	test   al,al
c000f282:	75 b5                	jne    c000f239 <Dbg::kprintf(char const*, ...)+0x1c>
c000f284:	83 c4 0c             	add    esp,0xc
c000f287:	5b                   	pop    ebx
c000f288:	5e                   	pop    esi
c000f289:	5f                   	pop    edi
c000f28a:	5d                   	pop    ebp
c000f28b:	c3                   	ret    
c000f28c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f290:	89 d0                	mov    eax,edx
c000f292:	83 c2 04             	add    edx,0x4
c000f295:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f299:	8b 00                	mov    eax,DWORD PTR [eax]
c000f29b:	50                   	push   eax
c000f29c:	e8 3d ff ff ff       	call   c000f1de <Dbg::logWriteInt(unsigned int)>
c000f2a1:	58                   	pop    eax
c000f2a2:	eb d9                	jmp    c000f27d <Dbg::kprintf(char const*, ...)+0x60>
c000f2a4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2a8:	89 d0                	mov    eax,edx
c000f2aa:	83 c2 04             	add    edx,0x4
c000f2ad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f2b1:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000f2b4:	50                   	push   eax
c000f2b5:	e8 f0 fe ff ff       	call   c000f1aa <Dbg::logc(char)>
c000f2ba:	58                   	pop    eax
c000f2bb:	eb c0                	jmp    c000f27d <Dbg::kprintf(char const*, ...)+0x60>
c000f2bd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f2c1:	89 c8                	mov    eax,ecx
c000f2c3:	83 c1 04             	add    ecx,0x4
c000f2c6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f2ca:	8b 28                	mov    ebp,DWORD PTR [eax]
c000f2cc:	55                   	push   ebp
c000f2cd:	e8 0c ff ff ff       	call   c000f1de <Dbg::logWriteInt(unsigned int)>
c000f2d2:	58                   	pop    eax
c000f2d3:	eb a8                	jmp    c000f27d <Dbg::kprintf(char const*, ...)+0x60>
c000f2d5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f2d9:	89 c8                	mov    eax,ecx
c000f2db:	83 c1 04             	add    ecx,0x4
c000f2de:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f2e2:	6a 10                	push   0x10
c000f2e4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f2e6:	51                   	push   ecx
c000f2e7:	e8 10 ff ff ff       	call   c000f1fc <Dbg::logWriteIntBase(unsigned int, int)>
c000f2ec:	5d                   	pop    ebp
c000f2ed:	58                   	pop    eax
c000f2ee:	eb 8d                	jmp    c000f27d <Dbg::kprintf(char const*, ...)+0x60>
c000f2f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2f4:	89 d0                	mov    eax,edx
c000f2f6:	83 c2 08             	add    edx,0x8
c000f2f9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f2fd:	6a 10                	push   0x10
c000f2ff:	8b 00                	mov    eax,DWORD PTR [eax]
c000f301:	50                   	push   eax
c000f302:	e8 f5 fe ff ff       	call   c000f1fc <Dbg::logWriteIntBase(unsigned int, int)>
c000f307:	58                   	pop    eax
c000f308:	5a                   	pop    edx
c000f309:	e9 6f ff ff ff       	jmp    c000f27d <Dbg::kprintf(char const*, ...)+0x60>
c000f30e:	6a 25                	push   0x25
c000f310:	e8 95 fe ff ff       	call   c000f1aa <Dbg::logc(char)>
c000f315:	5a                   	pop    edx
c000f316:	e9 62 ff ff ff       	jmp    c000f27d <Dbg::kprintf(char const*, ...)+0x60>
c000f31b:	6a 25                	push   0x25
c000f31d:	e8 88 fe ff ff       	call   c000f1aa <Dbg::logc(char)>
c000f322:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000f326:	50                   	push   eax
c000f327:	e8 7e fe ff ff       	call   c000f1aa <Dbg::logc(char)>
c000f32c:	5a                   	pop    edx
c000f32d:	59                   	pop    ecx
c000f32e:	e9 4a ff ff ff       	jmp    c000f27d <Dbg::kprintf(char const*, ...)+0x60>
c000f333:	50                   	push   eax
c000f334:	89 f7                	mov    edi,esi
c000f336:	e8 6f fe ff ff       	call   c000f1aa <Dbg::logc(char)>
c000f33b:	89 ee                	mov    esi,ebp
c000f33d:	58                   	pop    eax
c000f33e:	e9 3a ff ff ff       	jmp    c000f27d <Dbg::kprintf(char const*, ...)+0x60>
c000f343:	90                   	nop

c000f344 <File::read(unsigned long long, void*, int*)>:
c000f344:	53                   	push   ebx
c000f345:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f349:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f34d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f354:	3c 19                	cmp    al,0x19
c000f356:	77 35                	ja     c000f38d <File::read(unsigned long long, void*, int*)+0x49>
c000f358:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c000f35f:	85 c0                	test   eax,eax
c000f361:	74 2a                	je     c000f38d <File::read(unsigned long long, void*, int*)+0x49>
c000f363:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f369:	85 c0                	test   eax,eax
c000f36b:	74 20                	je     c000f38d <File::read(unsigned long long, void*, int*)+0x49>
c000f36d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f371:	74 21                	je     c000f394 <File::read(unsigned long long, void*, int*)+0x50>
c000f373:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f375:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f379:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f37f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f383:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f387:	5b                   	pop    ebx
c000f388:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000f38b:	ff e0                	jmp    eax
c000f38d:	b8 0b 00 00 00       	mov    eax,0xb
c000f392:	eb 05                	jmp    c000f399 <File::read(unsigned long long, void*, int*)+0x55>
c000f394:	b8 05 00 00 00       	mov    eax,0x5
c000f399:	5b                   	pop    ebx
c000f39a:	c3                   	ret    
c000f39b:	90                   	nop

c000f39c <File::write(unsigned long long, void*, int*)>:
c000f39c:	53                   	push   ebx
c000f39d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f3a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f3a5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f3ac:	3c 19                	cmp    al,0x19
c000f3ae:	77 35                	ja     c000f3e5 <File::write(unsigned long long, void*, int*)+0x49>
c000f3b0:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c000f3b7:	85 c0                	test   eax,eax
c000f3b9:	74 2a                	je     c000f3e5 <File::write(unsigned long long, void*, int*)+0x49>
c000f3bb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f3c1:	85 c0                	test   eax,eax
c000f3c3:	74 20                	je     c000f3e5 <File::write(unsigned long long, void*, int*)+0x49>
c000f3c5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f3c9:	74 21                	je     c000f3ec <File::write(unsigned long long, void*, int*)+0x50>
c000f3cb:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f3cd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f3d1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f3d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f3db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f3df:	5b                   	pop    ebx
c000f3e0:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000f3e3:	ff e0                	jmp    eax
c000f3e5:	b8 0b 00 00 00       	mov    eax,0xb
c000f3ea:	eb 05                	jmp    c000f3f1 <File::write(unsigned long long, void*, int*)+0x55>
c000f3ec:	b8 05 00 00 00       	mov    eax,0x5
c000f3f1:	5b                   	pop    ebx
c000f3f2:	c3                   	ret    
c000f3f3:	90                   	nop

c000f3f4 <Directory::read(unsigned long long, void*, int*)>:
c000f3f4:	53                   	push   ebx
c000f3f5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f3f9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f3fd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f404:	3c 19                	cmp    al,0x19
c000f406:	77 35                	ja     c000f43d <Directory::read(unsigned long long, void*, int*)+0x49>
c000f408:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c000f40f:	85 c0                	test   eax,eax
c000f411:	74 2a                	je     c000f43d <Directory::read(unsigned long long, void*, int*)+0x49>
c000f413:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f419:	85 c0                	test   eax,eax
c000f41b:	74 20                	je     c000f43d <Directory::read(unsigned long long, void*, int*)+0x49>
c000f41d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f421:	74 21                	je     c000f444 <Directory::read(unsigned long long, void*, int*)+0x50>
c000f423:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f425:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f429:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f42f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f433:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f437:	5b                   	pop    ebx
c000f438:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000f43b:	ff e0                	jmp    eax
c000f43d:	b8 0b 00 00 00       	mov    eax,0xb
c000f442:	eb 05                	jmp    c000f449 <Directory::read(unsigned long long, void*, int*)+0x55>
c000f444:	b8 05 00 00 00       	mov    eax,0x5
c000f449:	5b                   	pop    ebx
c000f44a:	c3                   	ret    
c000f44b:	90                   	nop

c000f44c <Directory::write(unsigned long long, void*, int*)>:
c000f44c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f450:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f457:	b8 0b 00 00 00       	mov    eax,0xb
c000f45c:	80 fa 19             	cmp    dl,0x19
c000f45f:	77 18                	ja     c000f479 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f461:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000f468:	85 d2                	test   edx,edx
c000f46a:	74 0d                	je     c000f479 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f46c:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f473:	19 c0                	sbb    eax,eax
c000f475:	83 e0 0a             	and    eax,0xa
c000f478:	40                   	inc    eax
c000f479:	c3                   	ret    

c000f47a <File::isAtty()>:
c000f47a:	31 c0                	xor    eax,eax
c000f47c:	c3                   	ret    
c000f47d:	90                   	nop

c000f47e <Directory::isAtty()>:
c000f47e:	31 c0                	xor    eax,eax
c000f480:	c3                   	ret    
c000f481:	90                   	nop

c000f482 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f482:	b8 0a 00 00 00       	mov    eax,0xa
c000f487:	c3                   	ret    

c000f488 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f488:	b8 0a 00 00 00       	mov    eax,0xa
c000f48d:	c3                   	ret    

c000f48e <File::~File()>:
c000f48e:	83 ec 0c             	sub    esp,0xc
c000f491:	ba 58 1b 02 c0       	mov    edx,0xc0021b58
c000f496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f49a:	89 10                	mov    DWORD PTR [eax],edx
c000f49c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4a0:	83 ec 0c             	sub    esp,0xc
c000f4a3:	50                   	push   eax
c000f4a4:	e8 c5 ea ff ff       	call   c000df6e <UnixFile::~UnixFile()>
c000f4a9:	83 c4 10             	add    esp,0x10
c000f4ac:	90                   	nop
c000f4ad:	83 c4 0c             	add    esp,0xc
c000f4b0:	c3                   	ret    
c000f4b1:	90                   	nop

c000f4b2 <File::~File()>:
c000f4b2:	83 ec 0c             	sub    esp,0xc
c000f4b5:	83 ec 0c             	sub    esp,0xc
c000f4b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4bc:	e8 cd ff ff ff       	call   c000f48e <File::~File()>
c000f4c1:	83 c4 10             	add    esp,0x10
c000f4c4:	83 ec 08             	sub    esp,0x8
c000f4c7:	68 14 01 00 00       	push   0x114
c000f4cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4d0:	e8 22 fc ff ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c000f4d5:	83 c4 10             	add    esp,0x10
c000f4d8:	83 c4 0c             	add    esp,0xc
c000f4db:	c3                   	ret    

c000f4dc <Directory::~Directory()>:
c000f4dc:	83 ec 0c             	sub    esp,0xc
c000f4df:	ba 74 1b 02 c0       	mov    edx,0xc0021b74
c000f4e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4e8:	89 10                	mov    DWORD PTR [eax],edx
c000f4ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4ee:	83 ec 0c             	sub    esp,0xc
c000f4f1:	50                   	push   eax
c000f4f2:	e8 77 ea ff ff       	call   c000df6e <UnixFile::~UnixFile()>
c000f4f7:	83 c4 10             	add    esp,0x10
c000f4fa:	90                   	nop
c000f4fb:	83 c4 0c             	add    esp,0xc
c000f4fe:	c3                   	ret    
c000f4ff:	90                   	nop

c000f500 <Directory::~Directory()>:
c000f500:	83 ec 0c             	sub    esp,0xc
c000f503:	83 ec 0c             	sub    esp,0xc
c000f506:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f50a:	e8 cd ff ff ff       	call   c000f4dc <Directory::~Directory()>
c000f50f:	83 c4 10             	add    esp,0x10
c000f512:	83 ec 08             	sub    esp,0x8
c000f515:	68 14 01 00 00       	push   0x114
c000f51a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f51e:	e8 d4 fb ff ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c000f523:	83 c4 10             	add    esp,0x10
c000f526:	83 c4 0c             	add    esp,0xc
c000f529:	c3                   	ret    

c000f52a <Filesystem::Filesystem()>:
c000f52a:	ba f4 1a 02 c0       	mov    edx,0xc0021af4
c000f52f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f533:	89 10                	mov    DWORD PTR [eax],edx
c000f535:	8b 15 08 49 02 c0    	mov    edx,DWORD PTR ds:0xc0024908
c000f53b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f53f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f546:	a3 08 49 02 c0       	mov    ds:0xc0024908,eax
c000f54b:	90                   	nop
c000f54c:	c3                   	ret    
c000f54d:	90                   	nop

c000f54e <Filesystem::~Filesystem()>:
c000f54e:	ba f4 1a 02 c0       	mov    edx,0xc0021af4
c000f553:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f557:	89 10                	mov    DWORD PTR [eax],edx
c000f559:	90                   	nop
c000f55a:	c3                   	ret    
c000f55b:	90                   	nop

c000f55c <Filesystem::~Filesystem()>:
c000f55c:	83 ec 0c             	sub    esp,0xc
c000f55f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f563:	e8 e6 ff ff ff       	call   c000f54e <Filesystem::~Filesystem()>
c000f568:	83 c4 04             	add    esp,0x4
c000f56b:	83 ec 08             	sub    esp,0x8
c000f56e:	6a 08                	push   0x8
c000f570:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f574:	e8 7e fb ff ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c000f579:	83 c4 10             	add    esp,0x10
c000f57c:	83 c4 0c             	add    esp,0xc
c000f57f:	c3                   	ret    

c000f580 <initVFS()>:
c000f580:	83 ec 18             	sub    esp,0x18
c000f583:	6a 08                	push   0x8
c000f585:	e8 5e fb ff ff       	call   c000f0e8 <operator new(unsigned long)>
c000f58a:	89 04 24             	mov    DWORD PTR [esp],eax
c000f58d:	e8 da b3 00 00       	call   c001a96c <FAT::FAT()>
c000f592:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f599:	e8 4a fb ff ff       	call   c000f0e8 <operator new(unsigned long)>
c000f59e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f5a1:	e8 66 c6 00 00       	call   c001bc0c <ISO9660::ISO9660()>
c000f5a6:	83 c4 1c             	add    esp,0x1c
c000f5a9:	c3                   	ret    

c000f5aa <standardiseFiles(char*, char const*, char const*)>:
c000f5aa:	55                   	push   ebp
c000f5ab:	57                   	push   edi
c000f5ac:	56                   	push   esi
c000f5ad:	53                   	push   ebx
c000f5ae:	81 ec 10 04 00 00    	sub    esp,0x410
c000f5b4:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f5bb:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f5c2:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f5c9:	68 00 04 00 00       	push   0x400
c000f5ce:	6a 00                	push   0x0
c000f5d0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f5d4:	56                   	push   esi
c000f5d5:	e8 f3 10 ff ff       	call   c00006cd <memset>
c000f5da:	83 c4 10             	add    esp,0x10
c000f5dd:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f5e1:	75 0b                	jne    c000f5ee <standardiseFiles(char*, char const*, char const*)+0x44>
c000f5e3:	50                   	push   eax
c000f5e4:	50                   	push   eax
c000f5e5:	57                   	push   edi
c000f5e6:	56                   	push   esi
c000f5e7:	e8 80 11 ff ff       	call   c000076c <strcpy>
c000f5ec:	eb 41                	jmp    c000f62f <standardiseFiles(char*, char const*, char const*)+0x85>
c000f5ee:	8a 07                	mov    al,BYTE PTR [edi]
c000f5f0:	3c 5c                	cmp    al,0x5c
c000f5f2:	74 04                	je     c000f5f8 <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f5f4:	3c 2f                	cmp    al,0x2f
c000f5f6:	75 18                	jne    c000f610 <standardiseFiles(char*, char const*, char const*)+0x66>
c000f5f8:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f5fb:	3c 60                	cmp    al,0x60
c000f5fd:	7e 03                	jle    c000f602 <standardiseFiles(char*, char const*, char const*)+0x58>
c000f5ff:	83 e8 20             	sub    eax,0x20
c000f602:	88 04 24             	mov    BYTE PTR [esp],al
c000f605:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f60c:	50                   	push   eax
c000f60d:	50                   	push   eax
c000f60e:	eb 18                	jmp    c000f628 <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f610:	50                   	push   eax
c000f611:	50                   	push   eax
c000f612:	55                   	push   ebp
c000f613:	56                   	push   esi
c000f614:	e8 53 11 ff ff       	call   c000076c <strcpy>
c000f619:	5a                   	pop    edx
c000f61a:	59                   	pop    ecx
c000f61b:	68 54 2e 02 c0       	push   0xc0022e54
c000f620:	56                   	push   esi
c000f621:	e8 fd 11 ff ff       	call   c0000823 <strcat>
c000f626:	5d                   	pop    ebp
c000f627:	58                   	pop    eax
c000f628:	57                   	push   edi
c000f629:	56                   	push   esi
c000f62a:	e8 f4 11 ff ff       	call   c0000823 <strcat>
c000f62f:	83 c4 10             	add    esp,0x10
c000f632:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f635:	3c 60                	cmp    al,0x60
c000f637:	7e 03                	jle    c000f63c <standardiseFiles(char*, char const*, char const*)+0x92>
c000f639:	83 e8 20             	sub    eax,0x20
c000f63c:	88 04 24             	mov    BYTE PTR [esp],al
c000f63f:	88 03                	mov    BYTE PTR [ebx],al
c000f641:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f648:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f64e:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f652:	bf 03 00 00 00       	mov    edi,0x3
c000f657:	b8 03 00 00 00       	mov    eax,0x3
c000f65c:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f65f:	84 d2                	test   dl,dl
c000f661:	0f 84 91 00 00 00    	je     c000f6f8 <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f667:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f66a:	80 fa 2f             	cmp    dl,0x2f
c000f66d:	74 05                	je     c000f674 <standardiseFiles(char*, char const*, char const*)+0xca>
c000f66f:	80 fa 5c             	cmp    dl,0x5c
c000f672:	75 12                	jne    c000f686 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f674:	89 c5                	mov    ebp,eax
c000f676:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f67b:	74 09                	je     c000f686 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f67d:	40                   	inc    eax
c000f67e:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f682:	89 cf                	mov    edi,ecx
c000f684:	eb d6                	jmp    c000f65c <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f686:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f68b:	75 5b                	jne    c000f6e8 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f68d:	80 fa 2e             	cmp    dl,0x2e
c000f690:	75 56                	jne    c000f6e8 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f692:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f696:	74 19                	je     c000f6b1 <standardiseFiles(char*, char const*, char const*)+0x107>
c000f698:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f69d:	74 53                	je     c000f6f2 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f69f:	89 f9                	mov    ecx,edi
c000f6a1:	41                   	inc    ecx
c000f6a2:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f6a5:	80 fa 5c             	cmp    dl,0x5c
c000f6a8:	74 f7                	je     c000f6a1 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f6aa:	80 fa 2f             	cmp    dl,0x2f
c000f6ad:	74 f2                	je     c000f6a1 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f6af:	eb d1                	jmp    c000f682 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6b1:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f6b6:	74 3a                	je     c000f6f2 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f6b8:	83 f8 03             	cmp    eax,0x3
c000f6bb:	74 c5                	je     c000f682 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6bd:	41                   	inc    ecx
c000f6be:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f6c1:	80 fa 2f             	cmp    dl,0x2f
c000f6c4:	74 f7                	je     c000f6bd <standardiseFiles(char*, char const*, char const*)+0x113>
c000f6c6:	80 fa 5c             	cmp    dl,0x5c
c000f6c9:	74 f2                	je     c000f6bd <standardiseFiles(char*, char const*, char const*)+0x113>
c000f6cb:	48                   	dec    eax
c000f6cc:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f6d0:	75 06                	jne    c000f6d8 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f6d2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f6d6:	eb f3                	jmp    c000f6cb <standardiseFiles(char*, char const*, char const*)+0x121>
c000f6d8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f6dc:	74 07                	je     c000f6e5 <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f6de:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f6e2:	48                   	dec    eax
c000f6e3:	eb f3                	jmp    c000f6d8 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f6e5:	40                   	inc    eax
c000f6e6:	eb 9a                	jmp    c000f682 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6e8:	80 fa 2f             	cmp    dl,0x2f
c000f6eb:	74 95                	je     c000f682 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6ed:	80 fa 5c             	cmp    dl,0x5c
c000f6f0:	74 90                	je     c000f682 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6f2:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f6f5:	40                   	inc    eax
c000f6f6:	eb 8a                	jmp    c000f682 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6f8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f6fc:	83 ec 0c             	sub    esp,0xc
c000f6ff:	53                   	push   ebx
c000f700:	e8 e5 0f ff ff       	call   c00006ea <strlen>
c000f705:	83 c4 10             	add    esp,0x10
c000f708:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f70d:	75 26                	jne    c000f735 <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f70f:	83 ec 0c             	sub    esp,0xc
c000f712:	53                   	push   ebx
c000f713:	e8 d2 0f ff ff       	call   c00006ea <strlen>
c000f718:	83 c4 10             	add    esp,0x10
c000f71b:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f720:	74 26                	je     c000f748 <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f722:	83 ec 0c             	sub    esp,0xc
c000f725:	53                   	push   ebx
c000f726:	e8 bf 0f ff ff       	call   c00006ea <strlen>
c000f72b:	83 c4 10             	add    esp,0x10
c000f72e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f733:	eb c7                	jmp    c000f6fc <standardiseFiles(char*, char const*, char const*)+0x152>
c000f735:	83 ec 0c             	sub    esp,0xc
c000f738:	53                   	push   ebx
c000f739:	e8 ac 0f ff ff       	call   c00006ea <strlen>
c000f73e:	83 c4 10             	add    esp,0x10
c000f741:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f746:	74 c7                	je     c000f70f <standardiseFiles(char*, char const*, char const*)+0x165>
c000f748:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f74e:	5b                   	pop    ebx
c000f74f:	5e                   	pop    esi
c000f750:	5f                   	pop    edi
c000f751:	5d                   	pop    ebp
c000f752:	c3                   	ret    
c000f753:	90                   	nop

c000f754 <File::File(char const*, Process*)>:
c000f754:	83 ec 0c             	sub    esp,0xc
c000f757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f75b:	83 ec 08             	sub    esp,0x8
c000f75e:	6a 00                	push   0x0
c000f760:	50                   	push   eax
c000f761:	e8 66 e6 ff ff       	call   c000ddcc <UnixFile::UnixFile(int)>
c000f766:	83 c4 10             	add    esp,0x10
c000f769:	ba 58 1b 02 c0       	mov    edx,0xc0021b58
c000f76e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f772:	89 10                	mov    DWORD PTR [eax],edx
c000f774:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f778:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f77e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f782:	83 c0 0d             	add    eax,0xd
c000f785:	83 ec 04             	sub    esp,0x4
c000f788:	52                   	push   edx
c000f789:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f78d:	50                   	push   eax
c000f78e:	e8 17 fe ff ff       	call   c000f5aa <standardiseFiles(char*, char const*, char const*)>
c000f793:	83 c4 10             	add    esp,0x10
c000f796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f79a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f79d:	8d 50 bf             	lea    edx,[eax-0x41]
c000f7a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7a4:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f7aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7ae:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f7b2:	90                   	nop
c000f7b3:	83 c4 0c             	add    esp,0xc
c000f7b6:	c3                   	ret    
c000f7b7:	90                   	nop

c000f7b8 <File::open(FileOpenMode)>:
c000f7b8:	53                   	push   ebx
c000f7b9:	b8 0b 00 00 00       	mov    eax,0xb
c000f7be:	83 ec 08             	sub    esp,0x8
c000f7c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f7c5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f7cc:	80 fa 19             	cmp    dl,0x19
c000f7cf:	77 40                	ja     c000f811 <File::open(FileOpenMode)+0x59>
c000f7d1:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000f7d8:	85 d2                	test   edx,edx
c000f7da:	74 35                	je     c000f811 <File::open(FileOpenMode)+0x59>
c000f7dc:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f7e2:	85 d2                	test   edx,edx
c000f7e4:	74 2b                	je     c000f811 <File::open(FileOpenMode)+0x59>
c000f7e6:	b8 06 00 00 00       	mov    eax,0x6
c000f7eb:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f7ef:	75 20                	jne    c000f811 <File::open(FileOpenMode)+0x59>
c000f7f1:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7f3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f7f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f7fd:	51                   	push   ecx
c000f7fe:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f801:	51                   	push   ecx
c000f802:	52                   	push   edx
c000f803:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f806:	83 c4 10             	add    esp,0x10
c000f809:	85 c0                	test   eax,eax
c000f80b:	75 04                	jne    c000f811 <File::open(FileOpenMode)+0x59>
c000f80d:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f811:	83 c4 08             	add    esp,0x8
c000f814:	5b                   	pop    ebx
c000f815:	c3                   	ret    

c000f816 <File::close()>:
c000f816:	53                   	push   ebx
c000f817:	b8 0b 00 00 00       	mov    eax,0xb
c000f81c:	83 ec 08             	sub    esp,0x8
c000f81f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f823:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f82a:	80 fa 19             	cmp    dl,0x19
c000f82d:	77 41                	ja     c000f870 <File::close()+0x5a>
c000f82f:	8b 1c 95 a0 4d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb260]
c000f836:	85 db                	test   ebx,ebx
c000f838:	74 36                	je     c000f870 <File::close()+0x5a>
c000f83a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f841:	74 2d                	je     c000f870 <File::close()+0x5a>
c000f843:	b8 05 00 00 00       	mov    eax,0x5
c000f848:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f84c:	74 22                	je     c000f870 <File::close()+0x5a>
c000f84e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f852:	8b 04 95 a0 4d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb260]
c000f859:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f85f:	53                   	push   ebx
c000f860:	53                   	push   ebx
c000f861:	8b 10                	mov    edx,DWORD PTR [eax]
c000f863:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f869:	50                   	push   eax
c000f86a:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f86d:	83 c4 10             	add    esp,0x10
c000f870:	83 c4 08             	add    esp,0x8
c000f873:	5b                   	pop    ebx
c000f874:	c3                   	ret    
c000f875:	90                   	nop

c000f876 <File::seek(unsigned long long)>:
c000f876:	56                   	push   esi
c000f877:	b8 0b 00 00 00       	mov    eax,0xb
c000f87c:	53                   	push   ebx
c000f87d:	51                   	push   ecx
c000f87e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f882:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f886:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f88a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f891:	80 fa 19             	cmp    dl,0x19
c000f894:	77 31                	ja     c000f8c7 <File::seek(unsigned long long)+0x51>
c000f896:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000f89d:	85 d2                	test   edx,edx
c000f89f:	74 26                	je     c000f8c7 <File::seek(unsigned long long)+0x51>
c000f8a1:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f8a7:	85 d2                	test   edx,edx
c000f8a9:	74 1c                	je     c000f8c7 <File::seek(unsigned long long)+0x51>
c000f8ab:	b8 05 00 00 00       	mov    eax,0x5
c000f8b0:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f8b4:	74 11                	je     c000f8c7 <File::seek(unsigned long long)+0x51>
c000f8b6:	8b 02                	mov    eax,DWORD PTR [edx]
c000f8b8:	53                   	push   ebx
c000f8b9:	51                   	push   ecx
c000f8ba:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f8c0:	52                   	push   edx
c000f8c1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f8c4:	83 c4 10             	add    esp,0x10
c000f8c7:	5a                   	pop    edx
c000f8c8:	5b                   	pop    ebx
c000f8c9:	5e                   	pop    esi
c000f8ca:	c3                   	ret    
c000f8cb:	90                   	nop

c000f8cc <File::tell(unsigned long long*)>:
c000f8cc:	83 ec 0c             	sub    esp,0xc
c000f8cf:	b8 0b 00 00 00       	mov    eax,0xb
c000f8d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f8d8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f8df:	80 fa 19             	cmp    dl,0x19
c000f8e2:	77 34                	ja     c000f918 <File::tell(unsigned long long*)+0x4c>
c000f8e4:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000f8eb:	85 d2                	test   edx,edx
c000f8ed:	74 29                	je     c000f918 <File::tell(unsigned long long*)+0x4c>
c000f8ef:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f8f5:	85 d2                	test   edx,edx
c000f8f7:	74 1f                	je     c000f918 <File::tell(unsigned long long*)+0x4c>
c000f8f9:	b8 05 00 00 00       	mov    eax,0x5
c000f8fe:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f902:	74 14                	je     c000f918 <File::tell(unsigned long long*)+0x4c>
c000f904:	50                   	push   eax
c000f905:	8b 02                	mov    eax,DWORD PTR [edx]
c000f907:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f90b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f911:	52                   	push   edx
c000f912:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f915:	83 c4 10             	add    esp,0x10
c000f918:	83 c4 0c             	add    esp,0xc
c000f91b:	c3                   	ret    

c000f91c <File::rewind()>:
c000f91c:	83 ec 10             	sub    esp,0x10
c000f91f:	6a 00                	push   0x0
c000f921:	6a 00                	push   0x0
c000f923:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f927:	e8 4a ff ff ff       	call   c000f876 <File::seek(unsigned long long)>
c000f92c:	83 c4 1c             	add    esp,0x1c
c000f92f:	c3                   	ret    

c000f930 <File::unlink()>:
c000f930:	83 ec 0c             	sub    esp,0xc
c000f933:	b8 0b 00 00 00       	mov    eax,0xb
c000f938:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f93c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f943:	80 f9 19             	cmp    cl,0x19
c000f946:	77 2f                	ja     c000f977 <File::unlink()+0x47>
c000f948:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000f94f:	85 c9                	test   ecx,ecx
c000f951:	74 24                	je     c000f977 <File::unlink()+0x47>
c000f953:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f959:	85 c9                	test   ecx,ecx
c000f95b:	74 1a                	je     c000f977 <File::unlink()+0x47>
c000f95d:	b8 06 00 00 00       	mov    eax,0x6
c000f962:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f966:	75 0f                	jne    c000f977 <File::unlink()+0x47>
c000f968:	50                   	push   eax
c000f969:	83 c2 0d             	add    edx,0xd
c000f96c:	50                   	push   eax
c000f96d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f96f:	52                   	push   edx
c000f970:	51                   	push   ecx
c000f971:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f974:	83 c4 10             	add    esp,0x10
c000f977:	83 c4 0c             	add    esp,0xc
c000f97a:	c3                   	ret    
c000f97b:	90                   	nop

c000f97c <File::rename(char const*)>:
c000f97c:	83 ec 0c             	sub    esp,0xc
c000f97f:	b8 0b 00 00 00       	mov    eax,0xb
c000f984:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f988:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f98f:	80 f9 19             	cmp    cl,0x19
c000f992:	77 32                	ja     c000f9c6 <File::rename(char const*)+0x4a>
c000f994:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000f99b:	85 c9                	test   ecx,ecx
c000f99d:	74 27                	je     c000f9c6 <File::rename(char const*)+0x4a>
c000f99f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f9a5:	85 c9                	test   ecx,ecx
c000f9a7:	74 1d                	je     c000f9c6 <File::rename(char const*)+0x4a>
c000f9a9:	b8 06 00 00 00       	mov    eax,0x6
c000f9ae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f9b2:	75 12                	jne    c000f9c6 <File::rename(char const*)+0x4a>
c000f9b4:	50                   	push   eax
c000f9b5:	83 c2 0d             	add    edx,0xd
c000f9b8:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f9ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f9be:	52                   	push   edx
c000f9bf:	51                   	push   ecx
c000f9c0:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f9c3:	83 c4 10             	add    esp,0x10
c000f9c6:	83 c4 0c             	add    esp,0xc
c000f9c9:	c3                   	ret    

c000f9ca <File::chfatattr(unsigned char, unsigned char)>:
c000f9ca:	57                   	push   edi
c000f9cb:	b8 0b 00 00 00       	mov    eax,0xb
c000f9d0:	56                   	push   esi
c000f9d1:	53                   	push   ebx
c000f9d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f9d6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f9da:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f9de:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f9e5:	80 f9 19             	cmp    cl,0x19
c000f9e8:	77 37                	ja     c000fa21 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f9ea:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000f9f1:	85 c9                	test   ecx,ecx
c000f9f3:	74 2c                	je     c000fa21 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f9f5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f9fb:	85 c9                	test   ecx,ecx
c000f9fd:	74 22                	je     c000fa21 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f9ff:	b8 06 00 00 00       	mov    eax,0x6
c000fa04:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fa08:	75 17                	jne    c000fa21 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000fa0a:	89 f0                	mov    eax,esi
c000fa0c:	8b 39                	mov    edi,DWORD PTR [ecx]
c000fa0e:	0f b6 f0             	movzx  esi,al
c000fa11:	56                   	push   esi
c000fa12:	83 c2 0d             	add    edx,0xd
c000fa15:	0f b6 db             	movzx  ebx,bl
c000fa18:	53                   	push   ebx
c000fa19:	52                   	push   edx
c000fa1a:	51                   	push   ecx
c000fa1b:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000fa1e:	83 c4 10             	add    esp,0x10
c000fa21:	5b                   	pop    ebx
c000fa22:	5e                   	pop    esi
c000fa23:	5f                   	pop    edi
c000fa24:	c3                   	ret    
c000fa25:	90                   	nop

c000fa26 <File::exists()>:
c000fa26:	83 ec 0c             	sub    esp,0xc
c000fa29:	31 c0                	xor    eax,eax
c000fa2b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fa2f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fa36:	80 f9 19             	cmp    cl,0x19
c000fa39:	77 24                	ja     c000fa5f <File::exists()+0x39>
c000fa3b:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fa42:	85 c9                	test   ecx,ecx
c000fa44:	74 19                	je     c000fa5f <File::exists()+0x39>
c000fa46:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fa4c:	85 c9                	test   ecx,ecx
c000fa4e:	74 0f                	je     c000fa5f <File::exists()+0x39>
c000fa50:	50                   	push   eax
c000fa51:	83 c2 0d             	add    edx,0xd
c000fa54:	50                   	push   eax
c000fa55:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fa57:	52                   	push   edx
c000fa58:	51                   	push   ecx
c000fa59:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fa5c:	83 c4 10             	add    esp,0x10
c000fa5f:	83 c4 0c             	add    esp,0xc
c000fa62:	c3                   	ret    
c000fa63:	90                   	nop

c000fa64 <File::stat(unsigned long long*, bool*)>:
c000fa64:	56                   	push   esi
c000fa65:	53                   	push   ebx
c000fa66:	50                   	push   eax
c000fa67:	b8 0b 00 00 00       	mov    eax,0xb
c000fa6c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fa70:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fa74:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fa78:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fa7f:	80 f9 19             	cmp    cl,0x19
c000fa82:	77 3d                	ja     c000fac1 <File::stat(unsigned long long*, bool*)+0x5d>
c000fa84:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fa8b:	85 c9                	test   ecx,ecx
c000fa8d:	74 32                	je     c000fac1 <File::stat(unsigned long long*, bool*)+0x5d>
c000fa8f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fa95:	85 c9                	test   ecx,ecx
c000fa97:	74 28                	je     c000fac1 <File::stat(unsigned long long*, bool*)+0x5d>
c000fa99:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fa9b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fa9f:	74 13                	je     c000fab4 <File::stat(unsigned long long*, bool*)+0x50>
c000faa1:	83 ec 04             	sub    esp,0x4
c000faa4:	56                   	push   esi
c000faa5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000faab:	51                   	push   ecx
c000faac:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000faaf:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000fab2:	eb 0a                	jmp    c000fabe <File::stat(unsigned long long*, bool*)+0x5a>
c000fab4:	53                   	push   ebx
c000fab5:	83 c2 0d             	add    edx,0xd
c000fab8:	56                   	push   esi
c000fab9:	52                   	push   edx
c000faba:	51                   	push   ecx
c000fabb:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000fabe:	83 c4 10             	add    esp,0x10
c000fac1:	5a                   	pop    edx
c000fac2:	5b                   	pop    ebx
c000fac3:	5e                   	pop    esi
c000fac4:	c3                   	ret    

c000fac5 <getcwd(Process*, char*, int)>:
c000fac5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fac9:	31 c0                	xor    eax,eax
c000facb:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000face:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000fad2:	7d 15                	jge    c000fae9 <getcwd(Process*, char*, int)+0x24>
c000fad4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fad8:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000fadf:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fae2:	84 c9                	test   cl,cl
c000fae4:	74 06                	je     c000faec <getcwd(Process*, char*, int)+0x27>
c000fae6:	40                   	inc    eax
c000fae7:	eb e2                	jmp    c000facb <getcwd(Process*, char*, int)+0x6>
c000fae9:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000faec:	31 c0                	xor    eax,eax
c000faee:	c3                   	ret    

c000faef <setcwd(Process*, char*)>:
c000faef:	55                   	push   ebp
c000faf0:	57                   	push   edi
c000faf1:	56                   	push   esi
c000faf2:	53                   	push   ebx
c000faf3:	81 ec 20 02 00 00    	sub    esp,0x220
c000faf9:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000fb00:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000fb06:	57                   	push   edi
c000fb07:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000fb0e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000fb12:	56                   	push   esi
c000fb13:	e8 92 fa ff ff       	call   c000f5aa <standardiseFiles(char*, char const*, char const*)>
c000fb18:	89 34 24             	mov    DWORD PTR [esp],esi
c000fb1b:	e8 ca 0b ff ff       	call   c00006ea <strlen>
c000fb20:	83 c4 10             	add    esp,0x10
c000fb23:	83 f8 02             	cmp    eax,0x2
c000fb26:	77 17                	ja     c000fb3f <setcwd(Process*, char*)+0x50>
c000fb28:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000fb2d:	83 e8 41             	sub    eax,0x41
c000fb30:	83 f8 19             	cmp    eax,0x19
c000fb33:	76 24                	jbe    c000fb59 <setcwd(Process*, char*)+0x6a>
c000fb35:	b8 03 00 00 00       	mov    eax,0x3
c000fb3a:	e9 cb 00 00 00       	jmp    c000fc0a <setcwd(Process*, char*)+0x11b>
c000fb3f:	83 ec 0c             	sub    esp,0xc
c000fb42:	56                   	push   esi
c000fb43:	e8 a2 0b ff ff       	call   c00006ea <strlen>
c000fb48:	83 c4 10             	add    esp,0x10
c000fb4b:	83 f8 03             	cmp    eax,0x3
c000fb4e:	75 33                	jne    c000fb83 <setcwd(Process*, char*)+0x94>
c000fb50:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000fb55:	75 2c                	jne    c000fb83 <setcwd(Process*, char*)+0x94>
c000fb57:	eb cf                	jmp    c000fb28 <setcwd(Process*, char*)+0x39>
c000fb59:	8b 14 85 a0 4d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb260]
c000fb60:	b8 05 00 00 00       	mov    eax,0x5
c000fb65:	85 d2                	test   edx,edx
c000fb67:	0f 84 9d 00 00 00    	je     c000fc0a <setcwd(Process*, char*)+0x11b>
c000fb6d:	b8 06 00 00 00       	mov    eax,0x6
c000fb72:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fb79:	0f 84 8b 00 00 00    	je     c000fc0a <setcwd(Process*, char*)+0x11b>
c000fb7f:	51                   	push   ecx
c000fb80:	51                   	push   ecx
c000fb81:	eb 7b                	jmp    c000fbfe <setcwd(Process*, char*)+0x10f>
c000fb83:	83 ec 0c             	sub    esp,0xc
c000fb86:	68 14 01 00 00       	push   0x114
c000fb8b:	e8 58 f5 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c000fb90:	83 c4 0c             	add    esp,0xc
c000fb93:	89 c3                	mov    ebx,eax
c000fb95:	55                   	push   ebp
c000fb96:	56                   	push   esi
c000fb97:	50                   	push   eax
c000fb98:	e8 b7 fb ff ff       	call   c000f754 <File::File(char const*, Process*)>
c000fb9d:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000fba2:	83 c4 0c             	add    esp,0xc
c000fba5:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000fba9:	50                   	push   eax
c000fbaa:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fbae:	50                   	push   eax
c000fbaf:	53                   	push   ebx
c000fbb0:	e8 af fe ff ff       	call   c000fa64 <File::stat(unsigned long long*, bool*)>
c000fbb5:	83 c4 10             	add    esp,0x10
c000fbb8:	8b 13                	mov    edx,DWORD PTR [ebx]
c000fbba:	83 f8 02             	cmp    eax,0x2
c000fbbd:	75 09                	jne    c000fbc8 <setcwd(Process*, char*)+0xd9>
c000fbbf:	83 ec 0c             	sub    esp,0xc
c000fbc2:	53                   	push   ebx
c000fbc3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fbc6:	eb 0d                	jmp    c000fbd5 <setcwd(Process*, char*)+0xe6>
c000fbc8:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000fbcb:	85 c0                	test   eax,eax
c000fbcd:	74 10                	je     c000fbdf <setcwd(Process*, char*)+0xf0>
c000fbcf:	83 ec 0c             	sub    esp,0xc
c000fbd2:	53                   	push   ebx
c000fbd3:	ff d2                	call   edx
c000fbd5:	83 c4 10             	add    esp,0x10
c000fbd8:	b8 01 00 00 00       	mov    eax,0x1
c000fbdd:	eb 2b                	jmp    c000fc0a <setcwd(Process*, char*)+0x11b>
c000fbdf:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000fbe4:	75 10                	jne    c000fbf6 <setcwd(Process*, char*)+0x107>
c000fbe6:	83 ec 0c             	sub    esp,0xc
c000fbe9:	53                   	push   ebx
c000fbea:	ff d2                	call   edx
c000fbec:	83 c4 10             	add    esp,0x10
c000fbef:	b8 02 00 00 00       	mov    eax,0x2
c000fbf4:	eb 14                	jmp    c000fc0a <setcwd(Process*, char*)+0x11b>
c000fbf6:	83 ec 0c             	sub    esp,0xc
c000fbf9:	53                   	push   ebx
c000fbfa:	ff d2                	call   edx
c000fbfc:	58                   	pop    eax
c000fbfd:	5a                   	pop    edx
c000fbfe:	56                   	push   esi
c000fbff:	57                   	push   edi
c000fc00:	e8 67 0b ff ff       	call   c000076c <strcpy>
c000fc05:	83 c4 10             	add    esp,0x10
c000fc08:	31 c0                	xor    eax,eax
c000fc0a:	81 c4 1c 02 00 00    	add    esp,0x21c
c000fc10:	5b                   	pop    ebx
c000fc11:	5e                   	pop    esi
c000fc12:	5f                   	pop    edi
c000fc13:	5d                   	pop    ebp
c000fc14:	c3                   	ret    
c000fc15:	90                   	nop

c000fc16 <Directory::Directory(char const*, Process*)>:
c000fc16:	83 ec 0c             	sub    esp,0xc
c000fc19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc1d:	83 ec 08             	sub    esp,0x8
c000fc20:	6a 00                	push   0x0
c000fc22:	50                   	push   eax
c000fc23:	e8 a4 e1 ff ff       	call   c000ddcc <UnixFile::UnixFile(int)>
c000fc28:	83 c4 10             	add    esp,0x10
c000fc2b:	ba 74 1b 02 c0       	mov    edx,0xc0021b74
c000fc30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc34:	89 10                	mov    DWORD PTR [eax],edx
c000fc36:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fc3a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000fc40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc44:	83 c0 0d             	add    eax,0xd
c000fc47:	83 ec 04             	sub    esp,0x4
c000fc4a:	52                   	push   edx
c000fc4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc4f:	50                   	push   eax
c000fc50:	e8 55 f9 ff ff       	call   c000f5aa <standardiseFiles(char*, char const*, char const*)>
c000fc55:	83 c4 10             	add    esp,0x10
c000fc58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc5c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000fc5f:	8d 50 bf             	lea    edx,[eax-0x41]
c000fc62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc66:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000fc6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc70:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000fc74:	90                   	nop
c000fc75:	83 c4 0c             	add    esp,0xc
c000fc78:	c3                   	ret    
c000fc79:	90                   	nop

c000fc7a <Directory::open()>:
c000fc7a:	53                   	push   ebx
c000fc7b:	b8 0b 00 00 00       	mov    eax,0xb
c000fc80:	83 ec 08             	sub    esp,0x8
c000fc83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc87:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000fc8e:	80 fa 19             	cmp    dl,0x19
c000fc91:	77 3d                	ja     c000fcd0 <Directory::open()+0x56>
c000fc93:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000fc9a:	85 d2                	test   edx,edx
c000fc9c:	74 32                	je     c000fcd0 <Directory::open()+0x56>
c000fc9e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000fca4:	85 d2                	test   edx,edx
c000fca6:	74 28                	je     c000fcd0 <Directory::open()+0x56>
c000fca8:	b8 06 00 00 00       	mov    eax,0x6
c000fcad:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000fcb1:	75 1d                	jne    c000fcd0 <Directory::open()+0x56>
c000fcb3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000fcb9:	50                   	push   eax
c000fcba:	8b 02                	mov    eax,DWORD PTR [edx]
c000fcbc:	51                   	push   ecx
c000fcbd:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000fcc0:	51                   	push   ecx
c000fcc1:	52                   	push   edx
c000fcc2:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000fcc5:	83 c4 10             	add    esp,0x10
c000fcc8:	85 c0                	test   eax,eax
c000fcca:	75 04                	jne    c000fcd0 <Directory::open()+0x56>
c000fccc:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000fcd0:	83 c4 08             	add    esp,0x8
c000fcd3:	5b                   	pop    ebx
c000fcd4:	c3                   	ret    
c000fcd5:	90                   	nop

c000fcd6 <Directory::close()>:
c000fcd6:	53                   	push   ebx
c000fcd7:	b8 0b 00 00 00       	mov    eax,0xb
c000fcdc:	83 ec 08             	sub    esp,0x8
c000fcdf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fce3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fcea:	80 fa 19             	cmp    dl,0x19
c000fced:	77 41                	ja     c000fd30 <Directory::close()+0x5a>
c000fcef:	8b 1c 95 a0 4d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb260]
c000fcf6:	85 db                	test   ebx,ebx
c000fcf8:	74 36                	je     c000fd30 <Directory::close()+0x5a>
c000fcfa:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000fd01:	74 2d                	je     c000fd30 <Directory::close()+0x5a>
c000fd03:	b8 05 00 00 00       	mov    eax,0x5
c000fd08:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000fd0c:	74 22                	je     c000fd30 <Directory::close()+0x5a>
c000fd0e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000fd12:	8b 04 95 a0 4d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb260]
c000fd19:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000fd1f:	53                   	push   ebx
c000fd20:	53                   	push   ebx
c000fd21:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd23:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000fd29:	50                   	push   eax
c000fd2a:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000fd2d:	83 c4 10             	add    esp,0x10
c000fd30:	83 c4 08             	add    esp,0x8
c000fd33:	5b                   	pop    ebx
c000fd34:	c3                   	ret    
c000fd35:	90                   	nop

c000fd36 <Directory::unlink()>:
c000fd36:	83 ec 0c             	sub    esp,0xc
c000fd39:	b8 0b 00 00 00       	mov    eax,0xb
c000fd3e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd42:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd49:	80 f9 19             	cmp    cl,0x19
c000fd4c:	77 2f                	ja     c000fd7d <Directory::unlink()+0x47>
c000fd4e:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fd55:	85 c9                	test   ecx,ecx
c000fd57:	74 24                	je     c000fd7d <Directory::unlink()+0x47>
c000fd59:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fd5f:	85 c9                	test   ecx,ecx
c000fd61:	74 1a                	je     c000fd7d <Directory::unlink()+0x47>
c000fd63:	b8 06 00 00 00       	mov    eax,0x6
c000fd68:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fd6c:	75 0f                	jne    c000fd7d <Directory::unlink()+0x47>
c000fd6e:	50                   	push   eax
c000fd6f:	83 c2 0d             	add    edx,0xd
c000fd72:	50                   	push   eax
c000fd73:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd75:	52                   	push   edx
c000fd76:	51                   	push   ecx
c000fd77:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000fd7a:	83 c4 10             	add    esp,0x10
c000fd7d:	83 c4 0c             	add    esp,0xc
c000fd80:	c3                   	ret    
c000fd81:	90                   	nop

c000fd82 <Directory::rename(char const*)>:
c000fd82:	83 ec 0c             	sub    esp,0xc
c000fd85:	b8 0b 00 00 00       	mov    eax,0xb
c000fd8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd8e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd95:	80 f9 19             	cmp    cl,0x19
c000fd98:	77 32                	ja     c000fdcc <Directory::rename(char const*)+0x4a>
c000fd9a:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fda1:	85 c9                	test   ecx,ecx
c000fda3:	74 27                	je     c000fdcc <Directory::rename(char const*)+0x4a>
c000fda5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fdab:	85 c9                	test   ecx,ecx
c000fdad:	74 1d                	je     c000fdcc <Directory::rename(char const*)+0x4a>
c000fdaf:	b8 06 00 00 00       	mov    eax,0x6
c000fdb4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fdb8:	75 12                	jne    c000fdcc <Directory::rename(char const*)+0x4a>
c000fdba:	50                   	push   eax
c000fdbb:	83 c2 0d             	add    edx,0xd
c000fdbe:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fdc0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fdc4:	52                   	push   edx
c000fdc5:	51                   	push   ecx
c000fdc6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000fdc9:	83 c4 10             	add    esp,0x10
c000fdcc:	83 c4 0c             	add    esp,0xc
c000fdcf:	c3                   	ret    

c000fdd0 <Directory::exists()>:
c000fdd0:	83 ec 0c             	sub    esp,0xc
c000fdd3:	31 c0                	xor    eax,eax
c000fdd5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fdd9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fde0:	80 f9 19             	cmp    cl,0x19
c000fde3:	77 24                	ja     c000fe09 <Directory::exists()+0x39>
c000fde5:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fdec:	85 c9                	test   ecx,ecx
c000fdee:	74 19                	je     c000fe09 <Directory::exists()+0x39>
c000fdf0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fdf6:	85 c9                	test   ecx,ecx
c000fdf8:	74 0f                	je     c000fe09 <Directory::exists()+0x39>
c000fdfa:	50                   	push   eax
c000fdfb:	83 c2 0d             	add    edx,0xd
c000fdfe:	50                   	push   eax
c000fdff:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fe01:	52                   	push   edx
c000fe02:	51                   	push   ecx
c000fe03:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fe06:	83 c4 10             	add    esp,0x10
c000fe09:	83 c4 0c             	add    esp,0xc
c000fe0c:	c3                   	ret    
c000fe0d:	90                   	nop

c000fe0e <Directory::read(dirent*)>:
c000fe0e:	83 ec 1c             	sub    esp,0x1c
c000fe11:	b8 0b 00 00 00       	mov    eax,0xb
c000fe16:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000fe1a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fe21:	80 fa 19             	cmp    dl,0x19
c000fe24:	77 30                	ja     c000fe56 <Directory::read(dirent*)+0x48>
c000fe26:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000fe2d:	85 d2                	test   edx,edx
c000fe2f:	74 25                	je     c000fe56 <Directory::read(dirent*)+0x48>
c000fe31:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fe38:	74 1c                	je     c000fe56 <Directory::read(dirent*)+0x48>
c000fe3a:	83 ec 0c             	sub    esp,0xc
c000fe3d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fe3f:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fe43:	52                   	push   edx
c000fe44:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fe48:	6a 00                	push   0x0
c000fe4a:	68 10 01 00 00       	push   0x110
c000fe4f:	51                   	push   ecx
c000fe50:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fe53:	83 c4 20             	add    esp,0x20
c000fe56:	83 c4 1c             	add    esp,0x1c
c000fe59:	c3                   	ret    

c000fe5a <Directory::create()>:
c000fe5a:	83 ec 0c             	sub    esp,0xc
c000fe5d:	b8 0b 00 00 00       	mov    eax,0xb
c000fe62:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fe66:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fe6d:	80 f9 19             	cmp    cl,0x19
c000fe70:	77 2f                	ja     c000fea1 <Directory::create()+0x47>
c000fe72:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fe79:	85 c9                	test   ecx,ecx
c000fe7b:	74 24                	je     c000fea1 <Directory::create()+0x47>
c000fe7d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fe83:	85 c9                	test   ecx,ecx
c000fe85:	74 1a                	je     c000fea1 <Directory::create()+0x47>
c000fe87:	b8 06 00 00 00       	mov    eax,0x6
c000fe8c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fe90:	75 0f                	jne    c000fea1 <Directory::create()+0x47>
c000fe92:	50                   	push   eax
c000fe93:	83 c2 0d             	add    edx,0xd
c000fe96:	50                   	push   eax
c000fe97:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fe99:	52                   	push   edx
c000fe9a:	51                   	push   ecx
c000fe9b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000fe9e:	83 c4 10             	add    esp,0x10
c000fea1:	83 c4 0c             	add    esp,0xc
c000fea4:	c3                   	ret    
c000fea5:	90                   	nop

c000fea6 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000fea6:	b8 0a 00 00 00       	mov    eax,0xa
c000feab:	c3                   	ret    

c000feac <Bus::Bus(char const*)>:
c000feac:	83 ec 0c             	sub    esp,0xc
c000feaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feb3:	83 ec 08             	sub    esp,0x8
c000feb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000feba:	50                   	push   eax
c000febb:	e8 62 09 00 00       	call   c0010822 <Device::Device(char const*)>
c000fec0:	83 c4 10             	add    esp,0x10
c000fec3:	ba 90 1b 02 c0       	mov    edx,0xc0021b90
c000fec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fecc:	89 10                	mov    DWORD PTR [eax],edx
c000fece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fed2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fedc:	90                   	nop
c000fedd:	83 c4 0c             	add    esp,0xc
c000fee0:	c3                   	ret    
c000fee1:	90                   	nop

c000fee2 <Bus::~Bus()>:
c000fee2:	83 ec 0c             	sub    esp,0xc
c000fee5:	ba 90 1b 02 c0       	mov    edx,0xc0021b90
c000feea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feee:	89 10                	mov    DWORD PTR [eax],edx
c000fef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fef4:	83 ec 0c             	sub    esp,0xc
c000fef7:	50                   	push   eax
c000fef8:	e8 db 05 00 00       	call   c00104d8 <Device::~Device()>
c000fefd:	83 c4 10             	add    esp,0x10
c000ff00:	90                   	nop
c000ff01:	83 c4 0c             	add    esp,0xc
c000ff04:	c3                   	ret    
c000ff05:	90                   	nop

c000ff06 <Bus::~Bus()>:
c000ff06:	83 ec 0c             	sub    esp,0xc
c000ff09:	83 ec 0c             	sub    esp,0xc
c000ff0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff10:	e8 cd ff ff ff       	call   c000fee2 <Bus::~Bus()>
c000ff15:	83 c4 10             	add    esp,0x10
c000ff18:	83 ec 08             	sub    esp,0x8
c000ff1b:	68 58 01 00 00       	push   0x158
c000ff20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff24:	e8 ce f1 ff ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c000ff29:	83 c4 10             	add    esp,0x10
c000ff2c:	83 c4 0c             	add    esp,0xc
c000ff2f:	c3                   	ret    

c000ff30 <Buzzer::Buzzer(char const*)>:
c000ff30:	83 ec 0c             	sub    esp,0xc
c000ff33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff37:	83 ec 08             	sub    esp,0x8
c000ff3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff3e:	50                   	push   eax
c000ff3f:	e8 de 08 00 00       	call   c0010822 <Device::Device(char const*)>
c000ff44:	83 c4 10             	add    esp,0x10
c000ff47:	ba bc 1b 02 c0       	mov    edx,0xc0021bbc
c000ff4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff50:	89 10                	mov    DWORD PTR [eax],edx
c000ff52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff56:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ff60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff64:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000ff6e:	90                   	nop
c000ff6f:	83 c4 0c             	add    esp,0xc
c000ff72:	c3                   	ret    
c000ff73:	90                   	nop

c000ff74 <Buzzer::~Buzzer()>:
c000ff74:	83 ec 0c             	sub    esp,0xc
c000ff77:	ba bc 1b 02 c0       	mov    edx,0xc0021bbc
c000ff7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff80:	89 10                	mov    DWORD PTR [eax],edx
c000ff82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff86:	83 ec 0c             	sub    esp,0xc
c000ff89:	50                   	push   eax
c000ff8a:	e8 49 05 00 00       	call   c00104d8 <Device::~Device()>
c000ff8f:	83 c4 10             	add    esp,0x10
c000ff92:	90                   	nop
c000ff93:	83 c4 0c             	add    esp,0xc
c000ff96:	c3                   	ret    
c000ff97:	90                   	nop

c000ff98 <Buzzer::~Buzzer()>:
c000ff98:	83 ec 0c             	sub    esp,0xc
c000ff9b:	83 ec 0c             	sub    esp,0xc
c000ff9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffa2:	e8 cd ff ff ff       	call   c000ff74 <Buzzer::~Buzzer()>
c000ffa7:	83 c4 10             	add    esp,0x10
c000ffaa:	83 ec 08             	sub    esp,0x8
c000ffad:	68 5c 01 00 00       	push   0x15c
c000ffb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffb6:	e8 3c f1 ff ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c000ffbb:	83 c4 10             	add    esp,0x10
c000ffbe:	83 c4 0c             	add    esp,0xc
c000ffc1:	c3                   	ret    

c000ffc2 <Buzzer::stop()>:
c000ffc2:	83 ec 14             	sub    esp,0x14
c000ffc5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ffc9:	8b 10                	mov    edx,DWORD PTR [eax]
c000ffcb:	6a 00                	push   0x0
c000ffcd:	50                   	push   eax
c000ffce:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ffd1:	83 c4 1c             	add    esp,0x1c
c000ffd4:	c3                   	ret    

c000ffd5 <beepThread(void*)>:
c000ffd5:	53                   	push   ebx
c000ffd6:	83 ec 08             	sub    esp,0x8
c000ffd9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffdd:	e8 75 8a 00 00       	call   c0018a57 <unlockScheduler()>
c000ffe2:	52                   	push   edx
c000ffe3:	b8 40 42 0f 00       	mov    eax,0xf4240
c000ffe8:	52                   	push   edx
c000ffe9:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000ffef:	52                   	push   edx
c000fff0:	50                   	push   eax
c000fff1:	e8 bd 8f 00 00       	call   c0018fb3 <nanoSleep(unsigned long long)>
c000fff6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fff9:	e8 c4 ff ff ff       	call   c000ffc2 <Buzzer::stop()>
c000fffe:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0010006:	83 c4 18             	add    esp,0x18
c0010009:	5b                   	pop    ebx
c001000a:	e9 e8 8e 00 00       	jmp    c0018ef7 <blockTask(TaskState)>
c001000f:	90                   	nop

c0010010 <Buzzer::beep(int, int, bool)>:
c0010010:	57                   	push   edi
c0010011:	56                   	push   esi
c0010012:	53                   	push   ebx
c0010013:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010017:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001001b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001001f:	52                   	push   edx
c0010020:	52                   	push   edx
c0010021:	8b 06                	mov    eax,DWORD PTR [esi]
c0010023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010027:	56                   	push   esi
c0010028:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001002b:	89 f8                	mov    eax,edi
c001002d:	83 c4 10             	add    esp,0x10
c0010030:	84 c0                	test   al,al
c0010032:	74 1f                	je     c0010053 <Buzzer::beep(int, int, bool)+0x43>
c0010034:	50                   	push   eax
c0010035:	50                   	push   eax
c0010036:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c001003c:	99                   	cdq    
c001003d:	52                   	push   edx
c001003e:	50                   	push   eax
c001003f:	e8 6f 8f 00 00       	call   c0018fb3 <nanoSleep(unsigned long long)>
c0010044:	83 c4 10             	add    esp,0x10
c0010047:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001004b:	5b                   	pop    ebx
c001004c:	5e                   	pop    esi
c001004d:	5f                   	pop    edi
c001004e:	e9 6f ff ff ff       	jmp    c000ffc2 <Buzzer::stop()>
c0010053:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0010059:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001005e:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0010066:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001006a:	c7 44 24 14 d5 ff 00 c0 	mov    DWORD PTR [esp+0x14],0xc000ffd5
c0010072:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010076:	5b                   	pop    ebx
c0010077:	5e                   	pop    esi
c0010078:	5f                   	pop    edi
c0010079:	e9 0c 8b 00 00       	jmp    c0018b8a <Process::createThread(void (*)(void*), void*, int)>

c001007e <loadClockSettings()>:
c001007e:	c7 05 14 49 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc0024914,0xa
c0010088:	c6 05 11 49 02 c0 00 	mov    BYTE PTR ds:0xc0024911,0x0
c001008f:	c6 05 10 49 02 c0 01 	mov    BYTE PTR ds:0xc0024910,0x1
c0010096:	c3                   	ret    
c0010097:	90                   	nop

c0010098 <Clock::Clock(char const*)>:
c0010098:	83 ec 0c             	sub    esp,0xc
c001009b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001009f:	83 ec 08             	sub    esp,0x8
c00100a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100a6:	50                   	push   eax
c00100a7:	e8 76 07 00 00       	call   c0010822 <Device::Device(char const*)>
c00100ac:	83 c4 10             	add    esp,0x10
c00100af:	ba ec 1b 02 c0       	mov    edx,0xc0021bec
c00100b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100b8:	89 10                	mov    DWORD PTR [eax],edx
c00100ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100be:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00100c8:	90                   	nop
c00100c9:	83 c4 0c             	add    esp,0xc
c00100cc:	c3                   	ret    
c00100cd:	90                   	nop

c00100ce <Clock::~Clock()>:
c00100ce:	83 ec 0c             	sub    esp,0xc
c00100d1:	ba ec 1b 02 c0       	mov    edx,0xc0021bec
c00100d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100da:	89 10                	mov    DWORD PTR [eax],edx
c00100dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100e0:	83 ec 0c             	sub    esp,0xc
c00100e3:	50                   	push   eax
c00100e4:	e8 ef 03 00 00       	call   c00104d8 <Device::~Device()>
c00100e9:	83 c4 10             	add    esp,0x10
c00100ec:	90                   	nop
c00100ed:	83 c4 0c             	add    esp,0xc
c00100f0:	c3                   	ret    
c00100f1:	90                   	nop

c00100f2 <Clock::~Clock()>:
c00100f2:	83 ec 0c             	sub    esp,0xc
c00100f5:	83 ec 0c             	sub    esp,0xc
c00100f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100fc:	e8 cd ff ff ff       	call   c00100ce <Clock::~Clock()>
c0010101:	83 c4 10             	add    esp,0x10
c0010104:	83 ec 08             	sub    esp,0x8
c0010107:	68 58 01 00 00       	push   0x158
c001010c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010110:	e8 e2 ef ff ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c0010115:	83 c4 10             	add    esp,0x10
c0010118:	83 c4 0c             	add    esp,0xc
c001011b:	c3                   	ret    

c001011c <Clock::timeInSecondsLocal()>:
c001011c:	53                   	push   ebx
c001011d:	83 ec 14             	sub    esp,0x14
c0010120:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010124:	8b 10                	mov    edx,DWORD PTR [eax]
c0010126:	50                   	push   eax
c0010127:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001012a:	0f b6 0d 10 49 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024910
c0010131:	03 0d 14 49 02 c0    	add    ecx,DWORD PTR ds:0xc0024914
c0010137:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001013d:	89 cb                	mov    ebx,ecx
c001013f:	c1 fb 1f             	sar    ebx,0x1f
c0010142:	01 c8                	add    eax,ecx
c0010144:	11 da                	adc    edx,ebx
c0010146:	83 c4 10             	add    esp,0x10
c0010149:	31 c9                	xor    ecx,ecx
c001014b:	80 3d 11 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024911,0x0
c0010152:	74 05                	je     c0010159 <Clock::timeInSecondsLocal()+0x3d>
c0010154:	b9 08 07 00 00       	mov    ecx,0x708
c0010159:	31 db                	xor    ebx,ebx
c001015b:	01 c8                	add    eax,ecx
c001015d:	11 da                	adc    edx,ebx
c001015f:	83 c4 08             	add    esp,0x8
c0010162:	5b                   	pop    ebx
c0010163:	c3                   	ret    

c0010164 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0010164:	57                   	push   edi
c0010165:	56                   	push   esi
c0010166:	53                   	push   ebx
c0010167:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001016b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001016f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010173:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010175:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0010178:	0f b6 05 10 49 02 c0 	movzx  eax,BYTE PTR ds:0xc0024910
c001017f:	03 05 14 49 02 c0    	add    eax,DWORD PTR ds:0xc0024914
c0010185:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001018b:	99                   	cdq    
c001018c:	29 c6                	sub    esi,eax
c001018e:	19 d7                	sbb    edi,edx
c0010190:	89 f0                	mov    eax,esi
c0010192:	89 fa                	mov    edx,edi
c0010194:	31 f6                	xor    esi,esi
c0010196:	80 3d 11 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024911,0x0
c001019d:	74 05                	je     c00101a4 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001019f:	be 08 07 00 00       	mov    esi,0x708
c00101a4:	31 ff                	xor    edi,edi
c00101a6:	29 f0                	sub    eax,esi
c00101a8:	19 fa                	sbb    edx,edi
c00101aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00101ae:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00101b2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00101b6:	89 d8                	mov    eax,ebx
c00101b8:	5b                   	pop    ebx
c00101b9:	5e                   	pop    esi
c00101ba:	5f                   	pop    edi
c00101bb:	ff e0                	jmp    eax

c00101bd <datetimeToSeconds(datetime_t)>:
c00101bd:	55                   	push   ebp
c00101be:	57                   	push   edi
c00101bf:	56                   	push   esi
c00101c0:	53                   	push   ebx
c00101c1:	83 ec 14             	sub    esp,0x14
c00101c4:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00101c8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00101cc:	0f b6 f5             	movzx  esi,ch
c00101cf:	6b f6 3c             	imul   esi,esi,0x3c
c00101d2:	89 cf                	mov    edi,ecx
c00101d4:	89 d3                	mov    ebx,edx
c00101d6:	0f b6 c9             	movzx  ecx,cl
c00101d9:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00101df:	0f b6 c6             	movzx  eax,dh
c00101e2:	c1 ef 10             	shr    edi,0x10
c00101e5:	48                   	dec    eax
c00101e6:	c1 eb 10             	shr    ebx,0x10
c00101e9:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00101ed:	89 f8                	mov    eax,edi
c00101ef:	0f b6 f8             	movzx  edi,al
c00101f2:	01 fe                	add    esi,edi
c00101f4:	01 f1                	add    ecx,esi
c00101f6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00101fa:	c1 f9 1f             	sar    ecx,0x1f
c00101fd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0010201:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0010206:	0f b6 d2             	movzx  edx,dl
c0010209:	66 81 eb 6c 07       	sub    bx,0x76c
c001020e:	8b 0c 8d 20 1c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde3e0]
c0010215:	0f b7 f3             	movzx  esi,bx
c0010218:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001021c:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0010221:	76 29                	jbe    c001024c <datetimeToSeconds(datetime_t)+0x8f>
c0010223:	f6 c3 03             	test   bl,0x3
c0010226:	75 24                	jne    c001024c <datetimeToSeconds(datetime_t)+0x8f>
c0010228:	31 d2                	xor    edx,edx
c001022a:	bf 64 00 00 00       	mov    edi,0x64
c001022f:	89 d8                	mov    eax,ebx
c0010231:	66 f7 f7             	div    di
c0010234:	66 85 d2             	test   dx,dx
c0010237:	75 12                	jne    c001024b <datetimeToSeconds(datetime_t)+0x8e>
c0010239:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001023f:	bf 90 01 00 00       	mov    edi,0x190
c0010244:	99                   	cdq    
c0010245:	f7 ff                	idiv   edi
c0010247:	85 d2                	test   edx,edx
c0010249:	75 01                	jne    c001024c <datetimeToSeconds(datetime_t)+0x8f>
c001024b:	41                   	inc    ecx
c001024c:	66 83 fb 46          	cmp    bx,0x46
c0010250:	76 45                	jbe    c0010297 <datetimeToSeconds(datetime_t)+0xda>
c0010252:	bb 46 00 00 00       	mov    ebx,0x46
c0010257:	bf 64 00 00 00       	mov    edi,0x64
c001025c:	bd 90 01 00 00       	mov    ebp,0x190
c0010261:	b8 6d 01 00 00       	mov    eax,0x16d
c0010266:	f6 c3 03             	test   bl,0x3
c0010269:	75 23                	jne    c001028e <datetimeToSeconds(datetime_t)+0xd1>
c001026b:	89 d8                	mov    eax,ebx
c001026d:	99                   	cdq    
c001026e:	f7 ff                	idiv   edi
c0010270:	85 d2                	test   edx,edx
c0010272:	b8 6e 01 00 00       	mov    eax,0x16e
c0010277:	75 15                	jne    c001028e <datetimeToSeconds(datetime_t)+0xd1>
c0010279:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001027f:	99                   	cdq    
c0010280:	f7 fd                	idiv   ebp
c0010282:	31 c0                	xor    eax,eax
c0010284:	85 d2                	test   edx,edx
c0010286:	0f 94 c0             	sete   al
c0010289:	05 6d 01 00 00       	add    eax,0x16d
c001028e:	43                   	inc    ebx
c001028f:	01 c1                	add    ecx,eax
c0010291:	39 f3                	cmp    ebx,esi
c0010293:	7c cc                	jl     c0010261 <datetimeToSeconds(datetime_t)+0xa4>
c0010295:	eb 3b                	jmp    c00102d2 <datetimeToSeconds(datetime_t)+0x115>
c0010297:	74 39                	je     c00102d2 <datetimeToSeconds(datetime_t)+0x115>
c0010299:	b8 45 00 00 00       	mov    eax,0x45
c001029e:	89 c2                	mov    edx,eax
c00102a0:	83 e2 03             	and    edx,0x3
c00102a3:	39 f0                	cmp    eax,esi
c00102a5:	7e 13                	jle    c00102ba <datetimeToSeconds(datetime_t)+0xfd>
c00102a7:	85 d2                	test   edx,edx
c00102a9:	0f 94 c2             	sete   dl
c00102ac:	0f b6 d2             	movzx  edx,dl
c00102af:	81 c2 6d 01 00 00    	add    edx,0x16d
c00102b5:	48                   	dec    eax
c00102b6:	29 d1                	sub    ecx,edx
c00102b8:	eb e4                	jmp    c001029e <datetimeToSeconds(datetime_t)+0xe1>
c00102ba:	b8 6d 01 00 00       	mov    eax,0x16d
c00102bf:	85 d2                	test   edx,edx
c00102c1:	75 0d                	jne    c00102d0 <datetimeToSeconds(datetime_t)+0x113>
c00102c3:	31 c0                	xor    eax,eax
c00102c5:	66 85 db             	test   bx,bx
c00102c8:	0f 95 c0             	setne  al
c00102cb:	05 6d 01 00 00       	add    eax,0x16d
c00102d0:	29 c1                	sub    ecx,eax
c00102d2:	b8 80 51 01 00       	mov    eax,0x15180
c00102d7:	f7 e9                	imul   ecx
c00102d9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00102dd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00102e1:	83 c4 14             	add    esp,0x14
c00102e4:	5b                   	pop    ebx
c00102e5:	5e                   	pop    esi
c00102e6:	5f                   	pop    edi
c00102e7:	5d                   	pop    ebp
c00102e8:	c3                   	ret    
c00102e9:	90                   	nop

c00102ea <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00102ea:	57                   	push   edi
c00102eb:	56                   	push   esi
c00102ec:	53                   	push   ebx
c00102ed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00102f1:	8b 06                	mov    eax,DWORD PTR [esi]
c00102f3:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00102f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102fe:	e8 ba fe ff ff       	call   c00101bd <datetimeToSeconds(datetime_t)>
c0010303:	59                   	pop    ecx
c0010304:	0f b6 0d 10 49 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024910
c001030b:	03 0d 14 49 02 c0    	add    ecx,DWORD PTR ds:0xc0024914
c0010311:	5b                   	pop    ebx
c0010312:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010318:	89 cb                	mov    ebx,ecx
c001031a:	c1 fb 1f             	sar    ebx,0x1f
c001031d:	29 c8                	sub    eax,ecx
c001031f:	19 da                	sbb    edx,ebx
c0010321:	31 c9                	xor    ecx,ecx
c0010323:	80 3d 11 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024911,0x0
c001032a:	74 05                	je     c0010331 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001032c:	b9 08 07 00 00       	mov    ecx,0x708
c0010331:	31 db                	xor    ebx,ebx
c0010333:	29 c8                	sub    eax,ecx
c0010335:	19 da                	sbb    edx,ebx
c0010337:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001033b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001033f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0010343:	5b                   	pop    ebx
c0010344:	89 f8                	mov    eax,edi
c0010346:	5e                   	pop    esi
c0010347:	5f                   	pop    edi
c0010348:	ff e0                	jmp    eax

c001034a <secondsToDatetime(unsigned long long)>:
c001034a:	55                   	push   ebp
c001034b:	57                   	push   edi
c001034c:	56                   	push   esi
c001034d:	53                   	push   ebx
c001034e:	83 ec 1c             	sub    esp,0x1c
c0010351:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010355:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010359:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001035d:	6a 00                	push   0x0
c001035f:	68 80 51 01 00       	push   0x15180
c0010364:	55                   	push   ebp
c0010365:	57                   	push   edi
c0010366:	e8 a1 f1 00 00       	call   c001f50c <__udivdi3>
c001036b:	83 c4 10             	add    esp,0x10
c001036e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010372:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0010378:	6a 00                	push   0x0
c001037a:	68 80 51 01 00       	push   0x15180
c001037f:	55                   	push   ebp
c0010380:	57                   	push   edi
c0010381:	e8 86 f2 00 00       	call   c001f60c <__umoddi3>
c0010386:	bf 10 0e 00 00       	mov    edi,0xe10
c001038b:	83 c4 10             	add    esp,0x10
c001038e:	99                   	cdq    
c001038f:	f7 ff                	idiv   edi
c0010391:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0010394:	89 d0                	mov    eax,edx
c0010396:	99                   	cdq    
c0010397:	bf 3c 00 00 00       	mov    edi,0x3c
c001039c:	f7 ff                	idiv   edi
c001039e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00103a1:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00103a4:	85 db                	test   ebx,ebx
c00103a6:	79 11                	jns    c00103b9 <secondsToDatetime(unsigned long long)+0x6f>
c00103a8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00103ac:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00103b2:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00103b7:	eb 07                	jmp    c00103c0 <secondsToDatetime(unsigned long long)+0x76>
c00103b9:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00103be:	89 d8                	mov    eax,ebx
c00103c0:	99                   	cdq    
c00103c1:	f7 f9                	idiv   ecx
c00103c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00103c7:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00103cc:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00103d4:	01 c3                	add    ebx,eax
c00103d6:	31 d2                	xor    edx,edx
c00103d8:	89 d8                	mov    eax,ebx
c00103da:	bf b4 05 00 00       	mov    edi,0x5b4
c00103df:	f7 f1                	div    ecx
c00103e1:	31 d2                	xor    edx,edx
c00103e3:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00103e8:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00103eb:	89 d8                	mov    eax,ebx
c00103ed:	f7 f7                	div    edi
c00103ef:	29 c1                	sub    ecx,eax
c00103f1:	31 d2                	xor    edx,edx
c00103f3:	89 d8                	mov    eax,ebx
c00103f5:	f7 f5                	div    ebp
c00103f7:	29 c1                	sub    ecx,eax
c00103f9:	bd 6d 01 00 00       	mov    ebp,0x16d
c00103fe:	89 c8                	mov    eax,ecx
c0010400:	31 d2                	xor    edx,edx
c0010402:	f7 f5                	div    ebp
c0010404:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010408:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001040d:	89 c8                	mov    eax,ecx
c001040f:	31 d2                	xor    edx,edx
c0010411:	f7 f5                	div    ebp
c0010413:	01 c3                	add    ebx,eax
c0010415:	31 d2                	xor    edx,edx
c0010417:	89 c8                	mov    eax,ecx
c0010419:	f7 f7                	div    edi
c001041b:	29 c3                	sub    ebx,eax
c001041d:	bf 99 00 00 00       	mov    edi,0x99
c0010422:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001042a:	29 c3                	sub    ebx,eax
c001042c:	31 d2                	xor    edx,edx
c001042e:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0010431:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0010434:	83 c1 02             	add    ecx,0x2
c0010437:	bb 05 00 00 00       	mov    ebx,0x5
c001043c:	89 c8                	mov    eax,ecx
c001043e:	f7 f7                	div    edi
c0010440:	89 c7                	mov    edi,eax
c0010442:	31 d2                	xor    edx,edx
c0010444:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001044a:	83 c0 02             	add    eax,0x2
c001044d:	f7 f3                	div    ebx
c001044f:	89 eb                	mov    ebx,ebp
c0010451:	29 c3                	sub    ebx,eax
c0010453:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0010459:	19 c0                	sbb    eax,eax
c001045b:	31 d2                	xor    edx,edx
c001045d:	83 e0 0c             	and    eax,0xc
c0010460:	88 1e                	mov    BYTE PTR [esi],bl
c0010462:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0010466:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001046e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0010472:	83 f9 01             	cmp    ecx,0x1
c0010475:	0f 96 c2             	setbe  dl
c0010478:	01 d0                	add    eax,edx
c001047a:	41                   	inc    ecx
c001047b:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001047f:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0010482:	83 c4 1c             	add    esp,0x1c
c0010485:	89 f0                	mov    eax,esi
c0010487:	5b                   	pop    ebx
c0010488:	5e                   	pop    esi
c0010489:	5f                   	pop    edi
c001048a:	5d                   	pop    ebp
c001048b:	c2 04 00             	ret    0x4

c001048e <Clock::timeInDatetimeLocal()>:
c001048e:	53                   	push   ebx
c001048f:	83 ec 14             	sub    esp,0x14
c0010492:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010496:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001049a:	e8 7d fc ff ff       	call   c001011c <Clock::timeInSecondsLocal()>
c001049f:	83 c4 0c             	add    esp,0xc
c00104a2:	52                   	push   edx
c00104a3:	50                   	push   eax
c00104a4:	53                   	push   ebx
c00104a5:	e8 a0 fe ff ff       	call   c001034a <secondsToDatetime(unsigned long long)>
c00104aa:	83 c4 14             	add    esp,0x14
c00104ad:	89 d8                	mov    eax,ebx
c00104af:	5b                   	pop    ebx
c00104b0:	c2 04 00             	ret    0x4
c00104b3:	90                   	nop

c00104b4 <Device::hibernate()>:
c00104b4:	c3                   	ret    
c00104b5:	90                   	nop

c00104b6 <Device::wake()>:
c00104b6:	c3                   	ret    
c00104b7:	90                   	nop

c00104b8 <Device::detect()>:
c00104b8:	c3                   	ret    
c00104b9:	90                   	nop

c00104ba <Device::disableLegacy()>:
c00104ba:	c3                   	ret    
c00104bb:	90                   	nop

c00104bc <Device::powerSaving(PowerSavingLevel)>:
c00104bc:	c3                   	ret    
c00104bd:	90                   	nop

c00104be <DriverlessDevice::close(int, int, void*)>:
c00104be:	31 c0                	xor    eax,eax
c00104c0:	c3                   	ret    
c00104c1:	90                   	nop

c00104c2 <DriverlessDevice::detect()>:
c00104c2:	c3                   	ret    
c00104c3:	90                   	nop

c00104c4 <DriverlessDevice::open(int, int, void*)>:
c00104c4:	83 ec 18             	sub    esp,0x18
c00104c7:	68 50 1c 02 c0       	push   0xc0021c50
c00104cc:	e8 7b 55 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c00104d1:	83 c8 ff             	or     eax,0xffffffff
c00104d4:	83 c4 1c             	add    esp,0x1c
c00104d7:	c3                   	ret    

c00104d8 <Device::~Device()>:
c00104d8:	ba 78 1c 02 c0       	mov    edx,0xc0021c78
c00104dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104e1:	89 10                	mov    DWORD PTR [eax],edx
c00104e3:	90                   	nop
c00104e4:	c3                   	ret    
c00104e5:	90                   	nop

c00104e6 <Device::~Device()>:
c00104e6:	83 ec 0c             	sub    esp,0xc
c00104e9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00104ed:	e8 e6 ff ff ff       	call   c00104d8 <Device::~Device()>
c00104f2:	83 c4 04             	add    esp,0x4
c00104f5:	83 ec 08             	sub    esp,0x8
c00104f8:	68 58 01 00 00       	push   0x158
c00104fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010501:	e8 f1 eb ff ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c0010506:	83 c4 10             	add    esp,0x10
c0010509:	83 c4 0c             	add    esp,0xc
c001050c:	c3                   	ret    
c001050d:	90                   	nop

c001050e <Device::findAndLoadDriver()>:
c001050e:	c3                   	ret    
c001050f:	90                   	nop

c0010510 <Device::preOpenPCI(PCIDeviceInfo)>:
c0010510:	57                   	push   edi
c0010511:	b9 09 00 00 00       	mov    ecx,0x9
c0010516:	56                   	push   esi
c0010517:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001051b:	81 c7 18 01 00 00    	add    edi,0x118
c0010521:	8d 74 24 10          	lea    esi,[esp+0x10]
c0010525:	c7 47 fc 02 00 00 00 	mov    DWORD PTR [edi-0x4],0x2
c001052c:	fc                   	cld    
c001052d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001052f:	5e                   	pop    esi
c0010530:	5f                   	pop    edi
c0010531:	c3                   	ret    

c0010532 <Device::preOpenACPI(void*, char*, char*)>:
c0010532:	56                   	push   esi
c0010533:	53                   	push   ebx
c0010534:	83 ec 08             	sub    esp,0x8
c0010537:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001053b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001053f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010543:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0010549:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0010553:	6a 1e                	push   0x1e
c0010555:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c001055b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001055f:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0010565:	50                   	push   eax
c0010566:	e8 2c 01 ff ff       	call   c0000697 <memcpy>
c001056b:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001056f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010573:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c001057b:	83 c4 14             	add    esp,0x14
c001057e:	5b                   	pop    ebx
c001057f:	5e                   	pop    esi
c0010580:	e9 12 01 ff ff       	jmp    c0000697 <memcpy>
c0010585:	90                   	nop

c0010586 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010586:	55                   	push   ebp
c0010587:	57                   	push   edi
c0010588:	56                   	push   esi
c0010589:	53                   	push   ebx
c001058a:	83 ec 0c             	sub    esp,0xc
c001058d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010591:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010595:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010599:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001059d:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00105a2:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00105a9:	75 0b                	jne    c00105b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00105ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00105ad:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00105b1:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00105b4:	eb 24                	jmp    c00105da <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00105b6:	e8 25 43 00 00       	call   c00148e0 <thisCPU()>
c00105bb:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00105c1:	8b 10                	mov    edx,DWORD PTR [eax]
c00105c3:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00105c7:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00105cb:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00105cf:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00105d3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00105d7:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00105da:	83 c4 0c             	add    esp,0xc
c00105dd:	5b                   	pop    ebx
c00105de:	5e                   	pop    esi
c00105df:	5f                   	pop    edi
c00105e0:	5d                   	pop    ebp
c00105e1:	ff e0                	jmp    eax
c00105e3:	90                   	nop

c00105e4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00105e4:	57                   	push   edi
c00105e5:	56                   	push   esi
c00105e6:	53                   	push   ebx
c00105e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105eb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00105ef:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00105f3:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00105f8:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00105ff:	75 0b                	jne    c001060c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c0010601:	8b 00                	mov    eax,DWORD PTR [eax]
c0010603:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010607:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001060a:	eb 20                	jmp    c001062c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c001060c:	e8 cf 42 00 00       	call   c00148e0 <thisCPU()>
c0010611:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0010617:	8b 10                	mov    edx,DWORD PTR [eax]
c0010619:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c001061d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010621:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0010625:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010629:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c001062c:	5b                   	pop    ebx
c001062d:	5e                   	pop    esi
c001062e:	5f                   	pop    edi
c001062f:	ff e0                	jmp    eax
c0010631:	90                   	nop

c0010632 <Device::addChild(Device*)>:
c0010632:	53                   	push   ebx
c0010633:	83 ec 08             	sub    esp,0x8
c0010636:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001063a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001063e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0010644:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001064a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001064c:	85 d2                	test   edx,edx
c001064e:	74 04                	je     c0010654 <Device::addChild(Device*)+0x22>
c0010650:	89 d3                	mov    ebx,edx
c0010652:	eb f6                	jmp    c001064a <Device::addChild(Device*)+0x18>
c0010654:	83 ec 0c             	sub    esp,0xc
c0010657:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001065a:	6a 08                	push   0x8
c001065c:	e8 87 ea ff ff       	call   c000f0e8 <operator new(unsigned long)>
c0010661:	89 03                	mov    DWORD PTR [ebx],eax
c0010663:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010669:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010670:	83 c4 18             	add    esp,0x18
c0010673:	5b                   	pop    ebx
c0010674:	c3                   	ret    
c0010675:	90                   	nop

c0010676 <Device::removeAllChildren()>:
c0010676:	56                   	push   esi
c0010677:	53                   	push   ebx
c0010678:	52                   	push   edx
c0010679:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001067d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0010683:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010686:	74 17                	je     c001069f <Device::removeAllChildren()+0x29>
c0010688:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001068b:	85 c0                	test   eax,eax
c001068d:	74 0c                	je     c001069b <Device::removeAllChildren()+0x25>
c001068f:	83 ec 0c             	sub    esp,0xc
c0010692:	8b 10                	mov    edx,DWORD PTR [eax]
c0010694:	50                   	push   eax
c0010695:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0010698:	83 c4 10             	add    esp,0x10
c001069b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001069d:	eb e4                	jmp    c0010683 <Device::removeAllChildren()+0xd>
c001069f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00106a5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00106ab:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00106b1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00106b8:	58                   	pop    eax
c00106b9:	5b                   	pop    ebx
c00106ba:	5e                   	pop    esi
c00106bb:	c3                   	ret    

c00106bc <Device::hibernateAll()>:
c00106bc:	53                   	push   ebx
c00106bd:	83 ec 14             	sub    esp,0x14
c00106c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00106c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106c6:	53                   	push   ebx
c00106c7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00106ca:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106d0:	83 c4 10             	add    esp,0x10
c00106d3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106d6:	74 0f                	je     c00106e7 <Device::hibernateAll()+0x2b>
c00106d8:	83 ec 0c             	sub    esp,0xc
c00106db:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00106de:	e8 d9 ff ff ff       	call   c00106bc <Device::hibernateAll()>
c00106e3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00106e5:	eb e9                	jmp    c00106d0 <Device::hibernateAll()+0x14>
c00106e7:	83 c4 08             	add    esp,0x8
c00106ea:	5b                   	pop    ebx
c00106eb:	c3                   	ret    

c00106ec <Device::wakeAll()>:
c00106ec:	53                   	push   ebx
c00106ed:	83 ec 14             	sub    esp,0x14
c00106f0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00106f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106f6:	53                   	push   ebx
c00106f7:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00106fa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010700:	83 c4 10             	add    esp,0x10
c0010703:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010706:	74 0f                	je     c0010717 <Device::wakeAll()+0x2b>
c0010708:	83 ec 0c             	sub    esp,0xc
c001070b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001070e:	e8 d9 ff ff ff       	call   c00106ec <Device::wakeAll()>
c0010713:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010715:	eb e9                	jmp    c0010700 <Device::wakeAll()+0x14>
c0010717:	83 c4 08             	add    esp,0x8
c001071a:	5b                   	pop    ebx
c001071b:	c3                   	ret    

c001071c <Device::detectAll()>:
c001071c:	53                   	push   ebx
c001071d:	83 ec 14             	sub    esp,0x14
c0010720:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010724:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010726:	53                   	push   ebx
c0010727:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001072a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010730:	83 c4 10             	add    esp,0x10
c0010733:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010736:	74 0f                	je     c0010747 <Device::detectAll()+0x2b>
c0010738:	83 ec 0c             	sub    esp,0xc
c001073b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001073e:	e8 d9 ff ff ff       	call   c001071c <Device::detectAll()>
c0010743:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010745:	eb e9                	jmp    c0010730 <Device::detectAll()+0x14>
c0010747:	83 c4 08             	add    esp,0x8
c001074a:	5b                   	pop    ebx
c001074b:	c3                   	ret    

c001074c <Device::disableLegacyAll()>:
c001074c:	53                   	push   ebx
c001074d:	83 ec 14             	sub    esp,0x14
c0010750:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010754:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010756:	53                   	push   ebx
c0010757:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001075a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010760:	83 c4 10             	add    esp,0x10
c0010763:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010766:	74 0f                	je     c0010777 <Device::disableLegacyAll()+0x2b>
c0010768:	83 ec 0c             	sub    esp,0xc
c001076b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001076e:	e8 d9 ff ff ff       	call   c001074c <Device::disableLegacyAll()>
c0010773:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010775:	eb e9                	jmp    c0010760 <Device::disableLegacyAll()+0x14>
c0010777:	83 c4 08             	add    esp,0x8
c001077a:	5b                   	pop    ebx
c001077b:	c3                   	ret    

c001077c <Device::loadDriversForAll()>:
c001077c:	53                   	push   ebx
c001077d:	83 ec 08             	sub    esp,0x8
c0010780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010784:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001078a:	8b 18                	mov    ebx,DWORD PTR [eax]
c001078c:	85 db                	test   ebx,ebx
c001078e:	74 12                	je     c00107a2 <Device::loadDriversForAll()+0x26>
c0010790:	83 ec 0c             	sub    esp,0xc
c0010793:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0010796:	e8 e1 ff ff ff       	call   c001077c <Device::loadDriversForAll()>
c001079b:	83 c4 10             	add    esp,0x10
c001079e:	89 d8                	mov    eax,ebx
c00107a0:	eb e8                	jmp    c001078a <Device::loadDriversForAll()+0xe>
c00107a2:	83 c4 08             	add    esp,0x8
c00107a5:	5b                   	pop    ebx
c00107a6:	c3                   	ret    
c00107a7:	90                   	nop

c00107a8 <Device::closeAll()>:
c00107a8:	53                   	push   ebx
c00107a9:	83 ec 08             	sub    esp,0x8
c00107ac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107b2:	6a 00                	push   0x0
c00107b4:	6a 00                	push   0x0
c00107b6:	6a 00                	push   0x0
c00107b8:	53                   	push   ebx
c00107b9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00107bc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00107c2:	83 c4 10             	add    esp,0x10
c00107c5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00107c8:	74 0f                	je     c00107d9 <Device::closeAll()+0x31>
c00107ca:	83 ec 0c             	sub    esp,0xc
c00107cd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00107d0:	e8 d3 ff ff ff       	call   c00107a8 <Device::closeAll()>
c00107d5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00107d7:	eb e9                	jmp    c00107c2 <Device::closeAll()+0x1a>
c00107d9:	83 c4 08             	add    esp,0x8
c00107dc:	5b                   	pop    ebx
c00107dd:	c3                   	ret    

c00107de <Device::powerSavingAll(PowerSavingLevel)>:
c00107de:	56                   	push   esi
c00107df:	53                   	push   ebx
c00107e0:	83 ec 0c             	sub    esp,0xc
c00107e3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00107e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00107eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107ed:	56                   	push   esi
c00107ee:	53                   	push   ebx
c00107ef:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00107f2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00107f8:	83 c4 10             	add    esp,0x10
c00107fb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00107fe:	74 0f                	je     c001080f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0010800:	52                   	push   edx
c0010801:	52                   	push   edx
c0010802:	56                   	push   esi
c0010803:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010806:	e8 d3 ff ff ff       	call   c00107de <Device::powerSavingAll(PowerSavingLevel)>
c001080b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001080d:	eb e9                	jmp    c00107f8 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001080f:	58                   	pop    eax
c0010810:	5b                   	pop    ebx
c0010811:	5e                   	pop    esi
c0010812:	c3                   	ret    
c0010813:	90                   	nop

c0010814 <Device::setName(char const*)>:
c0010814:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001081c:	e9 4b ff fe ff       	jmp    c000076c <strcpy>
c0010821:	90                   	nop

c0010822 <Device::Device(char const*)>:
c0010822:	83 ec 0c             	sub    esp,0xc
c0010825:	ba 78 1c 02 c0       	mov    edx,0xc0021c78
c001082a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001082e:	89 10                	mov    DWORD PTR [eax],edx
c0010830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010834:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001083e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010842:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001084c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010850:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001085a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001085e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0010868:	83 ec 08             	sub    esp,0x8
c001086b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001086f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010873:	e8 9c ff ff ff       	call   c0010814 <Device::setName(char const*)>
c0010878:	83 c4 10             	add    esp,0x10
c001087b:	83 ec 0c             	sub    esp,0xc
c001087e:	6a 08                	push   0x8
c0010880:	e8 63 e8 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c0010885:	83 c4 10             	add    esp,0x10
c0010888:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001088e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010895:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010899:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001089f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00108a9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00108af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00108b9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00108c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c4:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00108cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108cf:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00108d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108da:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00108e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00108f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010904:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001090e:	90                   	nop
c001090f:	83 c4 0c             	add    esp,0xc
c0010912:	c3                   	ret    
c0010913:	90                   	nop

c0010914 <Device::getName()>:
c0010914:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010918:	05 d0 00 00 00       	add    eax,0xd0
c001091d:	c3                   	ret    

c001091e <DriverlessDevice::DriverlessDevice(char const*)>:
c001091e:	83 ec 0c             	sub    esp,0xc
c0010921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010925:	83 ec 08             	sub    esp,0x8
c0010928:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001092c:	50                   	push   eax
c001092d:	e8 f0 fe ff ff       	call   c0010822 <Device::Device(char const*)>
c0010932:	83 c4 10             	add    esp,0x10
c0010935:	ba a4 1c 02 c0       	mov    edx,0xc0021ca4
c001093a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001093e:	89 10                	mov    DWORD PTR [eax],edx
c0010940:	90                   	nop
c0010941:	83 c4 0c             	add    esp,0xc
c0010944:	c3                   	ret    
c0010945:	90                   	nop

c0010946 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0010946:	57                   	push   edi
c0010947:	56                   	push   esi
c0010948:	53                   	push   ebx
c0010949:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001094d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010951:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010955:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001095b:	75 0c                	jne    c0010969 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001095d:	52                   	push   edx
c001095e:	52                   	push   edx
c001095f:	53                   	push   ebx
c0010960:	56                   	push   esi
c0010961:	e8 be f0 00 00       	call   c001fa24 <LinkedList<Device>::addElement(Device*)>
c0010966:	83 c4 10             	add    esp,0x10
c0010969:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001096f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010972:	74 12                	je     c0010986 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0010974:	50                   	push   eax
c0010975:	57                   	push   edi
c0010976:	56                   	push   esi
c0010977:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001097a:	e8 c7 ff ff ff       	call   c0010946 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001097f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010981:	83 c4 10             	add    esp,0x10
c0010984:	eb e9                	jmp    c001096f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0010986:	5b                   	pop    ebx
c0010987:	5e                   	pop    esi
c0010988:	5f                   	pop    edi
c0010989:	c3                   	ret    

c001098a <getDevicesOfType(DeviceType)>:
c001098a:	53                   	push   ebx
c001098b:	83 ec 14             	sub    esp,0x14
c001098e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010992:	53                   	push   ebx
c0010993:	e8 68 f1 00 00       	call   c001fb00 <LinkedList<Device>::LinkedList()>
c0010998:	83 c4 0c             	add    esp,0xc
c001099b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001099f:	53                   	push   ebx
c00109a0:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c00109a6:	e8 9b ff ff ff       	call   c0010946 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00109ab:	83 c4 18             	add    esp,0x18
c00109ae:	89 d8                	mov    eax,ebx
c00109b0:	5b                   	pop    ebx
c00109b1:	c2 04 00             	ret    0x4

c00109b4 <HardDiskController::HardDiskController(char const*)>:
c00109b4:	83 ec 0c             	sub    esp,0xc
c00109b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109bb:	83 ec 08             	sub    esp,0x8
c00109be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109c2:	50                   	push   eax
c00109c3:	e8 5a fe ff ff       	call   c0010822 <Device::Device(char const*)>
c00109c8:	83 c4 10             	add    esp,0x10
c00109cb:	ba d0 1c 02 c0       	mov    edx,0xc0021cd0
c00109d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109d4:	89 10                	mov    DWORD PTR [eax],edx
c00109d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109da:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00109e4:	90                   	nop
c00109e5:	83 c4 0c             	add    esp,0xc
c00109e8:	c3                   	ret    
c00109e9:	90                   	nop

c00109ea <HardDiskController::~HardDiskController()>:
c00109ea:	83 ec 0c             	sub    esp,0xc
c00109ed:	ba d0 1c 02 c0       	mov    edx,0xc0021cd0
c00109f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109f6:	89 10                	mov    DWORD PTR [eax],edx
c00109f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109fc:	83 ec 0c             	sub    esp,0xc
c00109ff:	50                   	push   eax
c0010a00:	e8 d3 fa ff ff       	call   c00104d8 <Device::~Device()>
c0010a05:	83 c4 10             	add    esp,0x10
c0010a08:	90                   	nop
c0010a09:	83 c4 0c             	add    esp,0xc
c0010a0c:	c3                   	ret    
c0010a0d:	90                   	nop

c0010a0e <HardDiskController::~HardDiskController()>:
c0010a0e:	83 ec 0c             	sub    esp,0xc
c0010a11:	83 ec 0c             	sub    esp,0xc
c0010a14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a18:	e8 cd ff ff ff       	call   c00109ea <HardDiskController::~HardDiskController()>
c0010a1d:	83 c4 10             	add    esp,0x10
c0010a20:	83 ec 08             	sub    esp,0x8
c0010a23:	68 58 01 00 00       	push   0x158
c0010a28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a2c:	e8 c6 e6 ff ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c0010a31:	83 c4 10             	add    esp,0x10
c0010a34:	83 c4 0c             	add    esp,0xc
c0010a37:	c3                   	ret    

c0010a38 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0010a38:	83 ec 0c             	sub    esp,0xc
c0010a3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a3f:	83 ec 08             	sub    esp,0x8
c0010a42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a46:	50                   	push   eax
c0010a47:	e8 d6 fd ff ff       	call   c0010822 <Device::Device(char const*)>
c0010a4c:	83 c4 10             	add    esp,0x10
c0010a4f:	ba fc 1c 02 c0       	mov    edx,0xc0021cfc
c0010a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a58:	89 10                	mov    DWORD PTR [eax],edx
c0010a5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a5e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010a65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a69:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0010a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a74:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0010a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a82:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010a86:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0010a8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a90:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010a9a:	90                   	nop
c0010a9b:	83 c4 0c             	add    esp,0xc
c0010a9e:	c3                   	ret    
c0010a9f:	90                   	nop

c0010aa0 <PhysicalDisk::startCache()>:
c0010aa0:	56                   	push   esi
c0010aa1:	53                   	push   ebx
c0010aa2:	83 ec 10             	sub    esp,0x10
c0010aa5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010aa9:	6a 30                	push   0x30
c0010aab:	e8 38 e6 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c0010ab0:	89 c6                	mov    esi,eax
c0010ab2:	58                   	pop    eax
c0010ab3:	5a                   	pop    edx
c0010ab4:	53                   	push   ebx
c0010ab5:	56                   	push   esi
c0010ab6:	e8 3b 25 00 00       	call   c0012ff6 <VCache::VCache(PhysicalDisk*)>
c0010abb:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0010ac1:	83 c4 14             	add    esp,0x14
c0010ac4:	5b                   	pop    ebx
c0010ac5:	5e                   	pop    esi
c0010ac6:	c3                   	ret    
c0010ac7:	90                   	nop

c0010ac8 <PhysicalDisk::~PhysicalDisk()>:
c0010ac8:	83 ec 0c             	sub    esp,0xc
c0010acb:	ba fc 1c 02 c0       	mov    edx,0xc0021cfc
c0010ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ad4:	89 10                	mov    DWORD PTR [eax],edx
c0010ad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ada:	83 ec 0c             	sub    esp,0xc
c0010add:	50                   	push   eax
c0010ade:	e8 f5 f9 ff ff       	call   c00104d8 <Device::~Device()>
c0010ae3:	83 c4 10             	add    esp,0x10
c0010ae6:	90                   	nop
c0010ae7:	83 c4 0c             	add    esp,0xc
c0010aea:	c3                   	ret    
c0010aeb:	90                   	nop

c0010aec <PhysicalDisk::~PhysicalDisk()>:
c0010aec:	83 ec 0c             	sub    esp,0xc
c0010aef:	83 ec 0c             	sub    esp,0xc
c0010af2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010af6:	e8 cd ff ff ff       	call   c0010ac8 <PhysicalDisk::~PhysicalDisk()>
c0010afb:	83 c4 10             	add    esp,0x10
c0010afe:	83 ec 08             	sub    esp,0x8
c0010b01:	68 6c 01 00 00       	push   0x16c
c0010b06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b0a:	e8 e8 e5 ff ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c0010b0f:	83 c4 10             	add    esp,0x10
c0010b12:	83 c4 0c             	add    esp,0xc
c0010b15:	c3                   	ret    

c0010b16 <FPU::FPU(char const*)>:
c0010b16:	83 ec 0c             	sub    esp,0xc
c0010b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b1d:	83 ec 08             	sub    esp,0x8
c0010b20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b24:	50                   	push   eax
c0010b25:	e8 f8 fc ff ff       	call   c0010822 <Device::Device(char const*)>
c0010b2a:	83 c4 10             	add    esp,0x10
c0010b2d:	ba 3c 1d 02 c0       	mov    edx,0xc0021d3c
c0010b32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b36:	89 10                	mov    DWORD PTR [eax],edx
c0010b38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b3c:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0010b46:	90                   	nop
c0010b47:	83 c4 0c             	add    esp,0xc
c0010b4a:	c3                   	ret    
c0010b4b:	90                   	nop

c0010b4c <FPU::~FPU()>:
c0010b4c:	83 ec 0c             	sub    esp,0xc
c0010b4f:	ba 3c 1d 02 c0       	mov    edx,0xc0021d3c
c0010b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b58:	89 10                	mov    DWORD PTR [eax],edx
c0010b5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b5e:	83 ec 0c             	sub    esp,0xc
c0010b61:	50                   	push   eax
c0010b62:	e8 71 f9 ff ff       	call   c00104d8 <Device::~Device()>
c0010b67:	83 c4 10             	add    esp,0x10
c0010b6a:	90                   	nop
c0010b6b:	83 c4 0c             	add    esp,0xc
c0010b6e:	c3                   	ret    
c0010b6f:	90                   	nop

c0010b70 <FPU::~FPU()>:
c0010b70:	83 ec 0c             	sub    esp,0xc
c0010b73:	83 ec 0c             	sub    esp,0xc
c0010b76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b7a:	e8 cd ff ff ff       	call   c0010b4c <FPU::~FPU()>
c0010b7f:	83 c4 10             	add    esp,0x10
c0010b82:	83 ec 08             	sub    esp,0x8
c0010b85:	68 58 01 00 00       	push   0x158
c0010b8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b8e:	e8 64 e5 ff ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c0010b93:	83 c4 10             	add    esp,0x10
c0010b96:	83 c4 0c             	add    esp,0xc
c0010b99:	c3                   	ret    

c0010b9a <setupFPU()>:
c0010b9a:	53                   	push   ebx
c0010b9b:	83 ec 08             	sub    esp,0x8
c0010b9e:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0010ba3:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0010baa:	74 19                	je     c0010bc5 <setupFPU()+0x2b>
c0010bac:	83 ec 0c             	sub    esp,0xc
c0010baf:	68 58 01 00 00       	push   0x158
c0010bb4:	e8 2f e5 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c0010bb9:	89 c3                	mov    ebx,eax
c0010bbb:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bbe:	e8 97 d5 00 00       	call   c001e15a <AVX::AVX()>
c0010bc3:	eb 5b                	jmp    c0010c20 <setupFPU()+0x86>
c0010bc5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010bcb:	84 c0                	test   al,al
c0010bcd:	79 19                	jns    c0010be8 <setupFPU()+0x4e>
c0010bcf:	83 ec 0c             	sub    esp,0xc
c0010bd2:	68 58 01 00 00       	push   0x158
c0010bd7:	e8 0c e5 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c0010bdc:	89 c3                	mov    ebx,eax
c0010bde:	89 04 24             	mov    DWORD PTR [esp],eax
c0010be1:	e8 9a d6 00 00       	call   c001e280 <SSE::SSE()>
c0010be6:	eb 38                	jmp    c0010c20 <setupFPU()+0x86>
c0010be8:	a8 20                	test   al,0x20
c0010bea:	74 19                	je     c0010c05 <setupFPU()+0x6b>
c0010bec:	83 ec 0c             	sub    esp,0xc
c0010bef:	68 58 01 00 00       	push   0x158
c0010bf4:	e8 ef e4 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c0010bf9:	89 c3                	mov    ebx,eax
c0010bfb:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bfe:	e8 e7 d5 00 00       	call   c001e1ea <MMX::MMX()>
c0010c03:	eb 1b                	jmp    c0010c20 <setupFPU()+0x86>
c0010c05:	a8 10                	test   al,0x10
c0010c07:	74 1c                	je     c0010c25 <setupFPU()+0x8b>
c0010c09:	83 ec 0c             	sub    esp,0xc
c0010c0c:	68 58 01 00 00       	push   0x158
c0010c11:	e8 d2 e4 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c0010c16:	89 c3                	mov    ebx,eax
c0010c18:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c1b:	e8 ee d6 00 00       	call   c001e30e <x87::x87()>
c0010c20:	83 c4 10             	add    esp,0x10
c0010c23:	eb 2c                	jmp    c0010c51 <setupFPU()+0xb7>
c0010c25:	83 ec 0c             	sub    esp,0xc
c0010c28:	31 db                	xor    ebx,ebx
c0010c2a:	68 28 1d 02 c0       	push   0xc0021d28
c0010c2f:	e8 e9 e5 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0010c34:	e8 a7 3c 00 00       	call   c00148e0 <thisCPU()>
c0010c39:	e8 a2 3c 00 00       	call   c00148e0 <thisCPU()>
c0010c3e:	e8 15 ef 00 00       	call   c001fb58 <CPU::readCR0()>
c0010c43:	83 c8 04             	or     eax,0x4
c0010c46:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c49:	e8 1c ef 00 00       	call   c001fb6a <CPU::writeCR0(unsigned long)>
c0010c4e:	83 c4 10             	add    esp,0x10
c0010c51:	83 c4 08             	add    esp,0x8
c0010c54:	89 d8                	mov    eax,ebx
c0010c56:	5b                   	pop    ebx
c0010c57:	c3                   	ret    

c0010c58 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0010c58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c5c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010c60:	c1 e0 04             	shl    eax,0x4
c0010c63:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0010c67:	8d 50 10             	lea    edx,[eax+0x10]
c0010c6a:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0010c70:	74 08                	je     c0010c7a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0010c72:	83 c0 04             	add    eax,0x4
c0010c75:	39 d0                	cmp    eax,edx
c0010c77:	75 f1                	jne    c0010c6a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0010c79:	c3                   	ret    
c0010c7a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010c84:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010c8e:	eb e2                	jmp    c0010c72 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0010c90 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0010c90:	57                   	push   edi
c0010c91:	31 c0                	xor    eax,eax
c0010c93:	56                   	push   esi
c0010c94:	53                   	push   ebx
c0010c95:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010c99:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c9d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010ca1:	89 da                	mov    edx,ebx
c0010ca3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010ca7:	c1 e2 04             	shl    edx,0x4
c0010caa:	01 ca                	add    edx,ecx
c0010cac:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010cb4:	74 16                	je     c0010ccc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010cb6:	40                   	inc    eax
c0010cb7:	83 f8 04             	cmp    eax,0x4
c0010cba:	75 f0                	jne    c0010cac <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0010cbc:	c7 44 24 10 6c 1d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021d6c
c0010cc4:	5b                   	pop    ebx
c0010cc5:	5e                   	pop    esi
c0010cc6:	5f                   	pop    edi
c0010cc7:	e9 80 4d 00 00       	jmp    c0015a4c <Krnl::panic(char const*)>
c0010ccc:	8d 04 98             	lea    eax,[eax+ebx*4]
c0010ccf:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010cd2:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010cd8:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010cde:	5b                   	pop    ebx
c0010cdf:	5e                   	pop    esi
c0010ce0:	5f                   	pop    edi
c0010ce1:	c3                   	ret    

c0010ce2 <doubleFault(regs*, void*)>:
c0010ce2:	55                   	push   ebp
c0010ce3:	89 e5                	mov    ebp,esp
c0010ce5:	83 ec 08             	sub    esp,0x8
c0010ce8:	83 ec 0c             	sub    esp,0xc
c0010ceb:	68 a7 1d 02 c0       	push   0xc0021da7
c0010cf0:	e8 57 4d 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c0010cf5:	83 c4 10             	add    esp,0x10
c0010cf8:	90                   	nop
c0010cf9:	c9                   	leave  
c0010cfa:	c3                   	ret    
c0010cfb:	90                   	nop

c0010cfc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010cfc:	56                   	push   esi
c0010cfd:	53                   	push   ebx
c0010cfe:	50                   	push   eax
c0010cff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010d03:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010d07:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010d0c:	75 35                	jne    c0010d43 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0010d0e:	8d 43 20             	lea    eax,[ebx+0x20]
c0010d11:	31 d2                	xor    edx,edx
c0010d13:	89 c1                	mov    ecx,eax
c0010d15:	c1 e1 04             	shl    ecx,0x4
c0010d18:	01 f1                	add    ecx,esi
c0010d1a:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0010d22:	74 3e                	je     c0010d62 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0010d24:	42                   	inc    edx
c0010d25:	83 fa 04             	cmp    edx,0x4
c0010d28:	75 f0                	jne    c0010d1a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0010d2a:	83 ec 0c             	sub    esp,0xc
c0010d2d:	68 ec 1d 02 c0       	push   0xc0021dec
c0010d32:	e8 15 4d 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c0010d37:	83 c4 10             	add    esp,0x10
c0010d3a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d3f:	5a                   	pop    edx
c0010d40:	5b                   	pop    ebx
c0010d41:	5e                   	pop    esi
c0010d42:	c3                   	ret    
c0010d43:	83 ec 0c             	sub    esp,0xc
c0010d46:	56                   	push   esi
c0010d47:	e8 c8 fb ff ff       	call   c0010914 <Device::getName()>
c0010d4c:	83 c4 10             	add    esp,0x10
c0010d4f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010d52:	75 ba                	jne    c0010d0e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010d54:	83 fb 0f             	cmp    ebx,0xf
c0010d57:	7f 29                	jg     c0010d82 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0010d59:	0f b6 9b 00 3f 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc100]
c0010d60:	eb ac                	jmp    c0010d0e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010d62:	8d 04 82             	lea    eax,[edx+eax*4]
c0010d65:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010d69:	8d 04 86             	lea    eax,[esi+eax*4]
c0010d6c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010d72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010d76:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0010d7c:	89 d8                	mov    eax,ebx
c0010d7e:	5a                   	pop    edx
c0010d7f:	5b                   	pop    ebx
c0010d80:	5e                   	pop    esi
c0010d81:	c3                   	ret    
c0010d82:	83 ec 0c             	sub    esp,0xc
c0010d85:	68 b4 1d 02 c0       	push   0xc0021db4
c0010d8a:	e8 bd 4c 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c0010d8f:	83 c4 10             	add    esp,0x10
c0010d92:	e9 77 ff ff ff       	jmp    c0010d0e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010d97:	90                   	nop

c0010d98 <InterruptController::clearAllHandlers(int, bool)>:
c0010d98:	56                   	push   esi
c0010d99:	53                   	push   ebx
c0010d9a:	52                   	push   edx
c0010d9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d9f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010da3:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0010da8:	75 61                	jne    c0010e0b <InterruptController::clearAllHandlers(int, bool)+0x73>
c0010daa:	8d 46 20             	lea    eax,[esi+0x20]
c0010dad:	c1 e6 04             	shl    esi,0x4
c0010db0:	c1 e0 04             	shl    eax,0x4
c0010db3:	01 de                	add    esi,ebx
c0010db5:	01 d8                	add    eax,ebx
c0010db7:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010dc1:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0010dcb:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010dd5:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010ddf:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010de9:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010df3:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010dfd:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010e07:	58                   	pop    eax
c0010e08:	5b                   	pop    ebx
c0010e09:	5e                   	pop    esi
c0010e0a:	c3                   	ret    
c0010e0b:	83 ec 0c             	sub    esp,0xc
c0010e0e:	53                   	push   ebx
c0010e0f:	e8 00 fb ff ff       	call   c0010914 <Device::getName()>
c0010e14:	83 c4 10             	add    esp,0x10
c0010e17:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010e1a:	75 8e                	jne    c0010daa <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010e1c:	83 fe 0f             	cmp    esi,0xf
c0010e1f:	7f 09                	jg     c0010e2a <InterruptController::clearAllHandlers(int, bool)+0x92>
c0010e21:	0f b6 b6 00 3f 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc100]
c0010e28:	eb 80                	jmp    c0010daa <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010e2a:	83 ec 0c             	sub    esp,0xc
c0010e2d:	68 28 1e 02 c0       	push   0xc0021e28
c0010e32:	e8 15 4c 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c0010e37:	83 c4 10             	add    esp,0x10
c0010e3a:	e9 6b ff ff ff       	jmp    c0010daa <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010e3f:	90                   	nop

c0010e40 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010e40:	56                   	push   esi
c0010e41:	53                   	push   ebx
c0010e42:	52                   	push   edx
c0010e43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010e47:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010e4b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010e50:	75 3a                	jne    c0010e8c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0010e52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e56:	8d 50 20             	lea    edx,[eax+0x20]
c0010e59:	c1 e2 04             	shl    edx,0x4
c0010e5c:	8d 04 16             	lea    eax,[esi+edx*1]
c0010e5f:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0010e63:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010e69:	74 0b                	je     c0010e76 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010e6b:	83 c0 04             	add    eax,0x4
c0010e6e:	39 d0                	cmp    eax,edx
c0010e70:	75 f1                	jne    c0010e63 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010e72:	58                   	pop    eax
c0010e73:	5b                   	pop    ebx
c0010e74:	5e                   	pop    esi
c0010e75:	c3                   	ret    
c0010e76:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010e80:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010e8a:	eb df                	jmp    c0010e6b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010e8c:	83 ec 0c             	sub    esp,0xc
c0010e8f:	56                   	push   esi
c0010e90:	e8 7f fa ff ff       	call   c0010914 <Device::getName()>
c0010e95:	83 c4 10             	add    esp,0x10
c0010e98:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010e9b:	75 b5                	jne    c0010e52 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010e9d:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010ea2:	7f 11                	jg     c0010eb5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0010ea4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010ea8:	0f b6 80 00 3f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc100]
c0010eaf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010eb3:	eb 9d                	jmp    c0010e52 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010eb5:	83 ec 0c             	sub    esp,0xc
c0010eb8:	68 28 1e 02 c0       	push   0xc0021e28
c0010ebd:	e8 8a 4b 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c0010ec2:	83 c4 10             	add    esp,0x10
c0010ec5:	eb 8b                	jmp    c0010e52 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010ec7 <nmiHandler(regs*, void*)>:
c0010ec7:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0010ecc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010ed0:	e9 5b a8 ff ff       	jmp    c000b730 <Computer::handleNMI()>

c0010ed5 <int_handler>:
c0010ed5:	55                   	push   ebp
c0010ed6:	57                   	push   edi
c0010ed7:	56                   	push   esi
c0010ed8:	53                   	push   ebx
c0010ed9:	83 ec 0c             	sub    esp,0xc
c0010edc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010ee0:	80 3d f4 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251f4,0x0
c0010ee7:	74 0b                	je     c0010ef4 <int_handler+0x1f>
c0010ee9:	fa                   	cli    
c0010eea:	f4                   	hlt    
c0010eeb:	80 3d f4 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251f4,0x0
c0010ef2:	75 f5                	jne    c0010ee9 <int_handler+0x14>
c0010ef4:	e8 e7 39 00 00       	call   c00148e0 <thisCPU()>
c0010ef9:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010efc:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010f02:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010f05:	83 f8 17             	cmp    eax,0x17
c0010f08:	77 13                	ja     c0010f1d <int_handler+0x48>
c0010f0a:	83 ec 08             	sub    esp,0x8
c0010f0d:	8b 17                	mov    edx,DWORD PTR [edi]
c0010f0f:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010f12:	0f b6 c0             	movzx  eax,al
c0010f15:	50                   	push   eax
c0010f16:	57                   	push   edi
c0010f17:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010f1a:	83 c4 10             	add    esp,0x10
c0010f1d:	83 c3 15             	add    ebx,0x15
c0010f20:	c1 e3 04             	shl    ebx,0x4
c0010f23:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010f27:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010f2e:	31 db                	xor    ebx,ebx
c0010f30:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010f34:	85 c0                	test   eax,eax
c0010f36:	74 13                	je     c0010f4b <int_handler+0x76>
c0010f38:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010f3b:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010f3f:	74 1c                	je     c0010f5d <int_handler+0x88>
c0010f41:	83 ec 08             	sub    esp,0x8
c0010f44:	52                   	push   edx
c0010f45:	56                   	push   esi
c0010f46:	ff d0                	call   eax
c0010f48:	83 c4 10             	add    esp,0x10
c0010f4b:	43                   	inc    ebx
c0010f4c:	83 fb 04             	cmp    ebx,0x4
c0010f4f:	75 df                	jne    c0010f30 <int_handler+0x5b>
c0010f51:	83 c4 0c             	add    esp,0xc
c0010f54:	31 c0                	xor    eax,eax
c0010f56:	5b                   	pop    ebx
c0010f57:	31 d2                	xor    edx,edx
c0010f59:	5e                   	pop    esi
c0010f5a:	5f                   	pop    edi
c0010f5b:	5d                   	pop    ebp
c0010f5c:	c3                   	ret    
c0010f5d:	83 ec 08             	sub    esp,0x8
c0010f60:	52                   	push   edx
c0010f61:	56                   	push   esi
c0010f62:	ff d0                	call   eax
c0010f64:	83 c4 10             	add    esp,0x10
c0010f67:	83 c4 0c             	add    esp,0xc
c0010f6a:	5b                   	pop    ebx
c0010f6b:	5e                   	pop    esi
c0010f6c:	5f                   	pop    edi
c0010f6d:	5d                   	pop    ebp
c0010f6e:	c3                   	ret    
c0010f6f:	90                   	nop

c0010f70 <InterruptController::InterruptController(char const*)>:
c0010f70:	83 ec 1c             	sub    esp,0x1c
c0010f73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f77:	83 ec 08             	sub    esp,0x8
c0010f7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010f7e:	50                   	push   eax
c0010f7f:	e8 9e f8 ff ff       	call   c0010822 <Device::Device(char const*)>
c0010f84:	83 c4 10             	add    esp,0x10
c0010f87:	ba 64 20 02 c0       	mov    edx,0xc0022064
c0010f8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f90:	89 10                	mov    DWORD PTR [eax],edx
c0010f92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f96:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010fa0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010fa8:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010fb0:	7f 5e                	jg     c0011010 <InterruptController::InterruptController(char const*)+0xa0>
c0010fb2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010fba:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010fbf:	7f 49                	jg     c001100a <InterruptController::InterruptController(char const*)+0x9a>
c0010fc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fc5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010fc9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010fd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010fd4:	01 ca                	add    edx,ecx
c0010fd6:	83 c2 54             	add    edx,0x54
c0010fd9:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010fe1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fe5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010fe9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010ff0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ff4:	01 ca                	add    edx,ecx
c0010ff6:	81 c2 54 04 00 00    	add    edx,0x454
c0010ffc:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0011004:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011008:	eb b0                	jmp    c0010fba <InterruptController::InterruptController(char const*)+0x4a>
c001100a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001100e:	eb 98                	jmp    c0010fa8 <InterruptController::InterruptController(char const*)+0x38>
c0011010:	90                   	nop
c0011011:	83 c4 1c             	add    esp,0x1c
c0011014:	c3                   	ret    
c0011015:	90                   	nop

c0011016 <InterruptController::~InterruptController()>:
c0011016:	83 ec 0c             	sub    esp,0xc
c0011019:	ba 64 20 02 c0       	mov    edx,0xc0022064
c001101e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011022:	89 10                	mov    DWORD PTR [eax],edx
c0011024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011028:	83 ec 0c             	sub    esp,0xc
c001102b:	50                   	push   eax
c001102c:	e8 a7 f4 ff ff       	call   c00104d8 <Device::~Device()>
c0011031:	83 c4 10             	add    esp,0x10
c0011034:	90                   	nop
c0011035:	83 c4 0c             	add    esp,0xc
c0011038:	c3                   	ret    
c0011039:	90                   	nop

c001103a <InterruptController::~InterruptController()>:
c001103a:	83 ec 0c             	sub    esp,0xc
c001103d:	83 ec 0c             	sub    esp,0xc
c0011040:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011044:	e8 cd ff ff ff       	call   c0011016 <InterruptController::~InterruptController()>
c0011049:	83 c4 10             	add    esp,0x10
c001104c:	83 ec 08             	sub    esp,0x8
c001104f:	68 58 21 00 00       	push   0x2158
c0011054:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011058:	e8 9a e0 ff ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c001105d:	83 c4 10             	add    esp,0x10
c0011060:	83 c4 0c             	add    esp,0xc
c0011063:	c3                   	ret    

c0011064 <displayDebugInfo(regs*)>:
c0011064:	55                   	push   ebp
c0011065:	57                   	push   edi
c0011066:	56                   	push   esi
c0011067:	53                   	push   ebx
c0011068:	83 ec 24             	sub    esp,0x24
c001106b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001106f:	0f 20 c2             	mov    edx,cr0
c0011072:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0011076:	0f 20 d7             	mov    edi,cr2
c0011079:	0f 20 de             	mov    esi,cr3
c001107c:	0f 20 e5             	mov    ebp,cr4
c001107f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0011082:	68 62 1e 02 c0       	push   0xc0021e62
c0011087:	e8 91 e1 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001108c:	58                   	pop    eax
c001108d:	5a                   	pop    edx
c001108e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011091:	68 6d 1e 02 c0       	push   0xc0021e6d
c0011096:	e8 82 e1 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001109b:	59                   	pop    ecx
c001109c:	58                   	pop    eax
c001109d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00110a0:	68 78 1e 02 c0       	push   0xc0021e78
c00110a5:	e8 73 e1 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c00110aa:	58                   	pop    eax
c00110ab:	5a                   	pop    edx
c00110ac:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00110af:	68 83 1e 02 c0       	push   0xc0021e83
c00110b4:	e8 64 e1 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c00110b9:	59                   	pop    ecx
c00110ba:	58                   	pop    eax
c00110bb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00110be:	68 8e 1e 02 c0       	push   0xc0021e8e
c00110c3:	e8 55 e1 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c00110c8:	58                   	pop    eax
c00110c9:	5a                   	pop    edx
c00110ca:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00110cd:	68 99 1e 02 c0       	push   0xc0021e99
c00110d2:	e8 46 e1 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c00110d7:	59                   	pop    ecx
c00110d8:	58                   	pop    eax
c00110d9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00110dc:	68 a4 1e 02 c0       	push   0xc0021ea4
c00110e1:	e8 37 e1 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c00110e6:	58                   	pop    eax
c00110e7:	5a                   	pop    edx
c00110e8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00110eb:	68 af 1e 02 c0       	push   0xc0021eaf
c00110f0:	e8 28 e1 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c00110f5:	59                   	pop    ecx
c00110f6:	58                   	pop    eax
c00110f7:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00110fa:	68 ba 1e 02 c0       	push   0xc0021eba
c00110ff:	e8 19 e1 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0011104:	58                   	pop    eax
c0011105:	5a                   	pop    edx
c0011106:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0011109:	68 c9 1e 02 c0       	push   0xc0021ec9
c001110e:	e8 0a e1 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0011113:	59                   	pop    ecx
c0011114:	58                   	pop    eax
c0011115:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011118:	68 d4 1e 02 c0       	push   0xc0021ed4
c001111d:	e8 fb e0 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0011122:	58                   	pop    eax
c0011123:	5a                   	pop    edx
c0011124:	57                   	push   edi
c0011125:	68 df 1e 02 c0       	push   0xc0021edf
c001112a:	e8 ee e0 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001112f:	59                   	pop    ecx
c0011130:	58                   	pop    eax
c0011131:	56                   	push   esi
c0011132:	68 ea 1e 02 c0       	push   0xc0021eea
c0011137:	e8 e1 e0 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001113c:	58                   	pop    eax
c001113d:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011142:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011148:	e8 00 c2 ff ff       	call   c000d34d <setActiveTerminal(VgaText*)>
c001114d:	58                   	pop    eax
c001114e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0011151:	5a                   	pop    edx
c0011152:	c1 e0 05             	shl    eax,0x5
c0011155:	05 60 3c 02 c0       	add    eax,0xc0023c60
c001115a:	50                   	push   eax
c001115b:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011160:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011166:	e8 03 c6 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c001116b:	59                   	pop    ecx
c001116c:	58                   	pop    eax
c001116d:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011172:	68 f5 1e 02 c0       	push   0xc0021ef5
c0011177:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001117d:	e8 ec c5 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0011182:	58                   	pop    eax
c0011183:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011188:	5a                   	pop    edx
c0011189:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001118c:	83 c0 0c             	add    eax,0xc
c001118f:	50                   	push   eax
c0011190:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011195:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001119b:	e8 ce c5 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c00111a0:	59                   	pop    ecx
c00111a1:	58                   	pop    eax
c00111a2:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00111a7:	68 fe 1e 02 c0       	push   0xc0021efe
c00111ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111b2:	e8 b7 c5 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c00111b7:	58                   	pop    eax
c00111b8:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00111bd:	5a                   	pop    edx
c00111be:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00111c1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111c7:	e8 c8 c5 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c00111cc:	59                   	pop    ecx
c00111cd:	58                   	pop    eax
c00111ce:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00111d3:	68 06 1f 02 c0       	push   0xc0021f06
c00111d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111de:	e8 8b c5 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c00111e3:	58                   	pop    eax
c00111e4:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00111e9:	5a                   	pop    edx
c00111ea:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00111ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111f3:	e8 9c c5 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c00111f8:	59                   	pop    ecx
c00111f9:	58                   	pop    eax
c00111fa:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00111ff:	68 0e 1f 02 c0       	push   0xc0021f0e
c0011204:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001120a:	e8 5f c5 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c001120f:	58                   	pop    eax
c0011210:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011215:	5a                   	pop    edx
c0011216:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0011219:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001121f:	e8 70 c5 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0011224:	59                   	pop    ecx
c0011225:	58                   	pop    eax
c0011226:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001122b:	68 16 1f 02 c0       	push   0xc0021f16
c0011230:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011236:	e8 33 c5 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c001123b:	58                   	pop    eax
c001123c:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011241:	5a                   	pop    edx
c0011242:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0011245:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001124b:	e8 44 c5 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0011250:	59                   	pop    ecx
c0011251:	58                   	pop    eax
c0011252:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011257:	68 1e 1f 02 c0       	push   0xc0021f1e
c001125c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011262:	e8 07 c5 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0011267:	58                   	pop    eax
c0011268:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001126d:	5a                   	pop    edx
c001126e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011271:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011277:	e8 18 c5 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c001127c:	59                   	pop    ecx
c001127d:	58                   	pop    eax
c001127e:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011283:	68 26 1f 02 c0       	push   0xc0021f26
c0011288:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001128e:	e8 db c4 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0011293:	58                   	pop    eax
c0011294:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011299:	5a                   	pop    edx
c001129a:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c001129d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112a3:	e8 ec c4 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c00112a8:	59                   	pop    ecx
c00112a9:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00112ae:	5b                   	pop    ebx
c00112af:	68 2e 1f 02 c0       	push   0xc0021f2e
c00112b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112ba:	e8 af c4 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c00112bf:	58                   	pop    eax
c00112c0:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00112c5:	5a                   	pop    edx
c00112c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00112ca:	52                   	push   edx
c00112cb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112d1:	e8 be c4 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c00112d6:	59                   	pop    ecx
c00112d7:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00112dc:	5b                   	pop    ebx
c00112dd:	68 37 1f 02 c0       	push   0xc0021f37
c00112e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112e8:	e8 81 c4 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c00112ed:	58                   	pop    eax
c00112ee:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00112f3:	5a                   	pop    edx
c00112f4:	57                   	push   edi
c00112f5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112fb:	e8 94 c4 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0011300:	59                   	pop    ecx
c0011301:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011306:	5b                   	pop    ebx
c0011307:	68 3f 1f 02 c0       	push   0xc0021f3f
c001130c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011312:	e8 57 c4 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0011317:	5f                   	pop    edi
c0011318:	58                   	pop    eax
c0011319:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001131e:	56                   	push   esi
c001131f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011325:	e8 6a c4 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c001132a:	58                   	pop    eax
c001132b:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011330:	5a                   	pop    edx
c0011331:	68 47 1f 02 c0       	push   0xc0021f47
c0011336:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001133c:	e8 2d c4 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0011341:	59                   	pop    ecx
c0011342:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011347:	5b                   	pop    ebx
c0011348:	55                   	push   ebp
c0011349:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001134f:	e8 40 c4 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0011354:	5e                   	pop    esi
c0011355:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001135a:	5f                   	pop    edi
c001135b:	68 4f 1f 02 c0       	push   0xc0021f4f
c0011360:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011366:	e8 03 c4 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c001136b:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011370:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011376:	e8 f8 e7 00 00       	call   c001fb73 <CPU::readDR0()>
c001137b:	5d                   	pop    ebp
c001137c:	5a                   	pop    edx
c001137d:	50                   	push   eax
c001137e:	53                   	push   ebx
c001137f:	e8 10 c4 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0011384:	59                   	pop    ecx
c0011385:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001138a:	5b                   	pop    ebx
c001138b:	68 58 1f 02 c0       	push   0xc0021f58
c0011390:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011396:	e8 d3 c3 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c001139b:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00113a0:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00113a6:	e8 da e7 00 00       	call   c001fb85 <CPU::readDR1()>
c00113ab:	5e                   	pop    esi
c00113ac:	5f                   	pop    edi
c00113ad:	50                   	push   eax
c00113ae:	53                   	push   ebx
c00113af:	e8 e0 c3 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c00113b4:	5d                   	pop    ebp
c00113b5:	58                   	pop    eax
c00113b6:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00113bb:	68 60 1f 02 c0       	push   0xc0021f60
c00113c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00113c6:	e8 a3 c3 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c00113cb:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00113d0:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00113d6:	e8 bc e7 00 00       	call   c001fb97 <CPU::readDR2()>
c00113db:	5a                   	pop    edx
c00113dc:	59                   	pop    ecx
c00113dd:	50                   	push   eax
c00113de:	53                   	push   ebx
c00113df:	e8 b0 c3 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c00113e4:	5b                   	pop    ebx
c00113e5:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00113ea:	5e                   	pop    esi
c00113eb:	68 68 1f 02 c0       	push   0xc0021f68
c00113f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00113f6:	e8 73 c3 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c00113fb:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011400:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011406:	e8 9e e7 00 00       	call   c001fba9 <CPU::readDR3()>
c001140b:	5f                   	pop    edi
c001140c:	5d                   	pop    ebp
c001140d:	50                   	push   eax
c001140e:	53                   	push   ebx
c001140f:	e8 80 c3 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0011414:	58                   	pop    eax
c0011415:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001141a:	5a                   	pop    edx
c001141b:	68 70 1f 02 c0       	push   0xc0021f70
c0011420:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011426:	e8 43 c3 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c001142b:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011430:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011436:	e8 80 e7 00 00       	call   c001fbbb <CPU::readDR6()>
c001143b:	59                   	pop    ecx
c001143c:	5e                   	pop    esi
c001143d:	50                   	push   eax
c001143e:	53                   	push   ebx
c001143f:	e8 50 c3 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0011444:	5f                   	pop    edi
c0011445:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001144a:	5d                   	pop    ebp
c001144b:	68 78 1f 02 c0       	push   0xc0021f78
c0011450:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011456:	e8 13 c3 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c001145b:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011460:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011466:	e8 62 e7 00 00       	call   c001fbcd <CPU::readDR7()>
c001146b:	5a                   	pop    edx
c001146c:	59                   	pop    ecx
c001146d:	50                   	push   eax
c001146e:	53                   	push   ebx
c001146f:	e8 20 c3 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0011474:	fa                   	cli    
c0011475:	f4                   	hlt    
c0011476:	83 c4 10             	add    esp,0x10
c0011479:	eb fe                	jmp    c0011479 <displayDebugInfo(regs*)+0x415>

c001147b <x87EmulHandler(regs*, void*)>:
c001147b:	53                   	push   ebx
c001147c:	83 ec 08             	sub    esp,0x8
c001147f:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c0011484:	85 c0                	test   eax,eax
c0011486:	74 15                	je     c001149d <x87EmulHandler(regs*, void*)+0x22>
c0011488:	83 ec 0c             	sub    esp,0xc
c001148b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001148f:	ff d0                	call   eax
c0011491:	83 c4 10             	add    esp,0x10
c0011494:	84 c0                	test   al,al
c0011496:	74 2f                	je     c00114c7 <x87EmulHandler(regs*, void*)+0x4c>
c0011498:	83 c4 08             	add    esp,0x8
c001149b:	5b                   	pop    ebx
c001149c:	c3                   	ret    
c001149d:	83 ec 08             	sub    esp,0x8
c00114a0:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c00114a6:	6a 01                	push   0x1
c00114a8:	68 80 1f 02 c0       	push   0xc0021f80
c00114ad:	e8 bd 6f 00 00       	call   c001846f <Thr::loadDLL(char const*, bool)>
c00114b2:	5a                   	pop    edx
c00114b3:	59                   	pop    ecx
c00114b4:	53                   	push   ebx
c00114b5:	50                   	push   eax
c00114b6:	e8 7a 71 00 00       	call   c0018635 <Thr::executeDLL(unsigned long, void*)>
c00114bb:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c00114c0:	83 c4 10             	add    esp,0x10
c00114c3:	85 c0                	test   eax,eax
c00114c5:	75 c1                	jne    c0011488 <x87EmulHandler(regs*, void*)+0xd>
c00114c7:	83 ec 0c             	sub    esp,0xc
c00114ca:	68 9d 1f 02 c0       	push   0xc0021f9d
c00114cf:	e8 49 dd ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c00114d4:	58                   	pop    eax
c00114d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114d9:	e8 86 fb ff ff       	call   c0011064 <displayDebugInfo(regs*)>

c00114de <gpFault(regs*, void*)>:
c00114de:	53                   	push   ebx
c00114df:	83 ec 14             	sub    esp,0x14
c00114e2:	c7 05 30 49 02 c0 e7 98 01 c0 	mov    DWORD PTR ds:0xc0024930,0xc00198e7
c00114ec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00114f0:	53                   	push   ebx
c00114f1:	e8 f1 83 00 00       	call   c00198e7 <Vm::faultHandler(regs*)>
c00114f6:	83 c4 10             	add    esp,0x10
c00114f9:	84 c0                	test   al,al
c00114fb:	74 05                	je     c0011502 <gpFault(regs*, void*)+0x24>
c00114fd:	83 c4 08             	add    esp,0x8
c0011500:	5b                   	pop    ebx
c0011501:	c3                   	ret    
c0011502:	83 ec 0c             	sub    esp,0xc
c0011505:	68 9d 1f 02 c0       	push   0xc0021f9d
c001150a:	e8 0e dd ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001150f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011512:	e8 4d fb ff ff       	call   c0011064 <displayDebugInfo(regs*)>

c0011517 <pgFault(regs*, void*)>:
c0011517:	83 ec 18             	sub    esp,0x18
c001151a:	68 b8 1f 02 c0       	push   0xc0021fb8
c001151f:	e8 f9 dc ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0011524:	58                   	pop    eax
c0011525:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011529:	e8 36 fb ff ff       	call   c0011064 <displayDebugInfo(regs*)>

c001152e <otherISRHandler(regs*, void*)>:
c001152e:	53                   	push   ebx
c001152f:	83 ec 0c             	sub    esp,0xc
c0011532:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011536:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0011539:	50                   	push   eax
c001153a:	50                   	push   eax
c001153b:	68 c5 1f 02 c0       	push   0xc0021fc5
c0011540:	e8 d8 dc ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0011545:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011548:	e8 17 fb ff ff       	call   c0011064 <displayDebugInfo(regs*)>

c001154d <opcodeFault(regs*, void*)>:
c001154d:	55                   	push   ebp
c001154e:	89 e5                	mov    ebp,esp
c0011550:	56                   	push   esi
c0011551:	53                   	push   ebx
c0011552:	83 ec 40             	sub    esp,0x40
c0011555:	e8 86 33 00 00       	call   c00148e0 <thisCPU()>
c001155a:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0011560:	84 c0                	test   al,al
c0011562:	74 24                	je     c0011588 <opcodeFault(regs*, void*)+0x3b>
c0011564:	83 ec 0c             	sub    esp,0xc
c0011567:	68 e4 1f 02 c0       	push   0xc0021fe4
c001156c:	e8 ac dc ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0011571:	83 c4 10             	add    esp,0x10
c0011574:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011577:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001157a:	8d 50 19             	lea    edx,[eax+0x19]
c001157d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011580:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011583:	e9 77 05 00 00       	jmp    c0011aff <opcodeFault(regs*, void*)+0x5b2>
c0011588:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001158b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001158e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011591:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0011595:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0011599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001159c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001159f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00115a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115a5:	8a 00                	mov    al,BYTE PTR [eax]
c00115a7:	3c f0                	cmp    al,0xf0
c00115a9:	75 17                	jne    c00115c2 <opcodeFault(regs*, void*)+0x75>
c00115ab:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115b4:	8d 50 01             	lea    edx,[eax+0x1]
c00115b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ba:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115bd:	e9 da 00 00 00       	jmp    c001169c <opcodeFault(regs*, void*)+0x14f>
c00115c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115c5:	8a 00                	mov    al,BYTE PTR [eax]
c00115c7:	3c f2                	cmp    al,0xf2
c00115c9:	74 09                	je     c00115d4 <opcodeFault(regs*, void*)+0x87>
c00115cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115ce:	8a 00                	mov    al,BYTE PTR [eax]
c00115d0:	3c f3                	cmp    al,0xf3
c00115d2:	75 1b                	jne    c00115ef <opcodeFault(regs*, void*)+0xa2>
c00115d4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00115d8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115de:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115e1:	8d 50 01             	lea    edx,[eax+0x1]
c00115e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115e7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115ea:	e9 ad 00 00 00       	jmp    c001169c <opcodeFault(regs*, void*)+0x14f>
c00115ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115f2:	8a 00                	mov    al,BYTE PTR [eax]
c00115f4:	3c 66                	cmp    al,0x66
c00115f6:	75 1f                	jne    c0011617 <opcodeFault(regs*, void*)+0xca>
c00115f8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00115fc:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0011600:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011603:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011606:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011609:	8d 50 01             	lea    edx,[eax+0x1]
c001160c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001160f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011612:	e9 85 00 00 00       	jmp    c001169c <opcodeFault(regs*, void*)+0x14f>
c0011617:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001161a:	8a 00                	mov    al,BYTE PTR [eax]
c001161c:	3c 67                	cmp    al,0x67
c001161e:	75 18                	jne    c0011638 <opcodeFault(regs*, void*)+0xeb>
c0011620:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011624:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011627:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001162a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001162d:	8d 50 01             	lea    edx,[eax+0x1]
c0011630:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011633:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011636:	eb 64                	jmp    c001169c <opcodeFault(regs*, void*)+0x14f>
c0011638:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001163b:	8a 00                	mov    al,BYTE PTR [eax]
c001163d:	3c 2e                	cmp    al,0x2e
c001163f:	74 09                	je     c001164a <opcodeFault(regs*, void*)+0xfd>
c0011641:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011644:	8a 00                	mov    al,BYTE PTR [eax]
c0011646:	3c 3e                	cmp    al,0x3e
c0011648:	75 18                	jne    c0011662 <opcodeFault(regs*, void*)+0x115>
c001164a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001164e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011651:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011654:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011657:	8d 50 01             	lea    edx,[eax+0x1]
c001165a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001165d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011660:	eb 3a                	jmp    c001169c <opcodeFault(regs*, void*)+0x14f>
c0011662:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011665:	8a 00                	mov    al,BYTE PTR [eax]
c0011667:	3c 36                	cmp    al,0x36
c0011669:	74 1b                	je     c0011686 <opcodeFault(regs*, void*)+0x139>
c001166b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001166e:	8a 00                	mov    al,BYTE PTR [eax]
c0011670:	3c 26                	cmp    al,0x26
c0011672:	74 12                	je     c0011686 <opcodeFault(regs*, void*)+0x139>
c0011674:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011677:	8a 00                	mov    al,BYTE PTR [eax]
c0011679:	3c 64                	cmp    al,0x64
c001167b:	74 09                	je     c0011686 <opcodeFault(regs*, void*)+0x139>
c001167d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011680:	8a 00                	mov    al,BYTE PTR [eax]
c0011682:	3c 65                	cmp    al,0x65
c0011684:	75 16                	jne    c001169c <opcodeFault(regs*, void*)+0x14f>
c0011686:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001168a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001168d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011690:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011693:	8d 50 01             	lea    edx,[eax+0x1]
c0011696:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011699:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001169c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001169f:	8a 00                	mov    al,BYTE PTR [eax]
c00116a1:	3c 0f                	cmp    al,0xf
c00116a3:	0f 85 ad 00 00 00    	jne    c0011756 <opcodeFault(regs*, void*)+0x209>
c00116a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116ac:	40                   	inc    eax
c00116ad:	8a 00                	mov    al,BYTE PTR [eax]
c00116af:	3c c2                	cmp    al,0xc2
c00116b1:	74 0e                	je     c00116c1 <opcodeFault(regs*, void*)+0x174>
c00116b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116b6:	40                   	inc    eax
c00116b7:	8a 00                	mov    al,BYTE PTR [eax]
c00116b9:	3c c3                	cmp    al,0xc3
c00116bb:	0f 85 95 00 00 00    	jne    c0011756 <opcodeFault(regs*, void*)+0x209>
c00116c1:	83 ec 0c             	sub    esp,0xc
c00116c4:	68 07 20 02 c0       	push   0xc0022007
c00116c9:	e8 4f db ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c00116ce:	83 c4 10             	add    esp,0x10
c00116d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116d4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00116d7:	8d 50 01             	lea    edx,[eax+0x1]
c00116da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116dd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00116e0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00116e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116e6:	8a 00                	mov    al,BYTE PTR [eax]
c00116e8:	8d 50 fe             	lea    edx,[eax-0x2]
c00116eb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116ee:	88 10                	mov    BYTE PTR [eax],dl
c00116f0:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00116f3:	50                   	push   eax
c00116f4:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00116f7:	50                   	push   eax
c00116f8:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00116fb:	50                   	push   eax
c00116fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00116ff:	e8 48 41 00 00       	call   c001584c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0011704:	83 c4 10             	add    esp,0x10
c0011707:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001170a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001170d:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0011710:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0011713:	01 d0                	add    eax,edx
c0011715:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0011718:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001171b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001171e:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0011721:	48                   	dec    eax
c0011722:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0011725:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011728:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001172b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001172e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011731:	83 ec 04             	sub    esp,0x4
c0011734:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0011737:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001173a:	50                   	push   eax
c001173b:	e8 10 ea fe ff       	call   c0000150 <voodooXADD>
c0011740:	83 c4 10             	add    esp,0x10
c0011743:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0011746:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0011749:	01 c2                	add    edx,eax
c001174b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001174e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011751:	e9 a9 03 00 00       	jmp    c0011aff <opcodeFault(regs*, void*)+0x5b2>
c0011756:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011759:	8a 00                	mov    al,BYTE PTR [eax]
c001175b:	3c 0f                	cmp    al,0xf
c001175d:	0f 85 8b 01 00 00    	jne    c00118ee <opcodeFault(regs*, void*)+0x3a1>
c0011763:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011766:	40                   	inc    eax
c0011767:	8a 00                	mov    al,BYTE PTR [eax]
c0011769:	3c c7                	cmp    al,0xc7
c001176b:	0f 86 7d 01 00 00    	jbe    c00118ee <opcodeFault(regs*, void*)+0x3a1>
c0011771:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011774:	40                   	inc    eax
c0011775:	8a 00                	mov    al,BYTE PTR [eax]
c0011777:	3c cf                	cmp    al,0xcf
c0011779:	0f 87 6f 01 00 00    	ja     c00118ee <opcodeFault(regs*, void*)+0x3a1>
c001177f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011782:	40                   	inc    eax
c0011783:	8a 00                	mov    al,BYTE PTR [eax]
c0011785:	83 c0 38             	add    eax,0x38
c0011788:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001178b:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001178f:	75 0b                	jne    c001179c <opcodeFault(regs*, void*)+0x24f>
c0011791:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011794:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0011797:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001179a:	eb 75                	jmp    c0011811 <opcodeFault(regs*, void*)+0x2c4>
c001179c:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00117a0:	75 0b                	jne    c00117ad <opcodeFault(regs*, void*)+0x260>
c00117a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117a5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00117a8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117ab:	eb 64                	jmp    c0011811 <opcodeFault(regs*, void*)+0x2c4>
c00117ad:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00117b1:	75 0b                	jne    c00117be <opcodeFault(regs*, void*)+0x271>
c00117b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117b6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00117b9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117bc:	eb 53                	jmp    c0011811 <opcodeFault(regs*, void*)+0x2c4>
c00117be:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00117c2:	75 0b                	jne    c00117cf <opcodeFault(regs*, void*)+0x282>
c00117c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117c7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00117ca:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117cd:	eb 42                	jmp    c0011811 <opcodeFault(regs*, void*)+0x2c4>
c00117cf:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00117d3:	75 0b                	jne    c00117e0 <opcodeFault(regs*, void*)+0x293>
c00117d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117d8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00117db:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117de:	eb 31                	jmp    c0011811 <opcodeFault(regs*, void*)+0x2c4>
c00117e0:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00117e4:	75 0b                	jne    c00117f1 <opcodeFault(regs*, void*)+0x2a4>
c00117e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117e9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00117ec:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117ef:	eb 20                	jmp    c0011811 <opcodeFault(regs*, void*)+0x2c4>
c00117f1:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00117f5:	75 0b                	jne    c0011802 <opcodeFault(regs*, void*)+0x2b5>
c00117f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117fa:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00117fd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011800:	eb 0f                	jmp    c0011811 <opcodeFault(regs*, void*)+0x2c4>
c0011802:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0011806:	75 09                	jne    c0011811 <opcodeFault(regs*, void*)+0x2c4>
c0011808:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001180b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001180e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011811:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0011815:	74 10                	je     c0011827 <opcodeFault(regs*, void*)+0x2da>
c0011817:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c001181e:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0011825:	eb 2d                	jmp    c0011854 <opcodeFault(regs*, void*)+0x307>
c0011827:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001182a:	c1 e0 18             	shl    eax,0x18
c001182d:	89 c2                	mov    edx,eax
c001182f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011832:	c1 e0 08             	shl    eax,0x8
c0011835:	25 00 00 ff 00       	and    eax,0xff0000
c001183a:	09 c2                	or     edx,eax
c001183c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001183f:	c1 e8 08             	shr    eax,0x8
c0011842:	25 00 ff 00 00       	and    eax,0xff00
c0011847:	09 c2                	or     edx,eax
c0011849:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001184c:	c1 e8 18             	shr    eax,0x18
c001184f:	09 d0                	or     eax,edx
c0011851:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011854:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0011858:	75 0b                	jne    c0011865 <opcodeFault(regs*, void*)+0x318>
c001185a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001185d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011860:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011863:	eb 75                	jmp    c00118da <opcodeFault(regs*, void*)+0x38d>
c0011865:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0011869:	75 0b                	jne    c0011876 <opcodeFault(regs*, void*)+0x329>
c001186b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001186e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011871:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0011874:	eb 64                	jmp    c00118da <opcodeFault(regs*, void*)+0x38d>
c0011876:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001187a:	75 0b                	jne    c0011887 <opcodeFault(regs*, void*)+0x33a>
c001187c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001187f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011882:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0011885:	eb 53                	jmp    c00118da <opcodeFault(regs*, void*)+0x38d>
c0011887:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001188b:	75 0b                	jne    c0011898 <opcodeFault(regs*, void*)+0x34b>
c001188d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011890:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011893:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011896:	eb 42                	jmp    c00118da <opcodeFault(regs*, void*)+0x38d>
c0011898:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001189c:	75 0b                	jne    c00118a9 <opcodeFault(regs*, void*)+0x35c>
c001189e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118a1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00118a4:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00118a7:	eb 31                	jmp    c00118da <opcodeFault(regs*, void*)+0x38d>
c00118a9:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00118ad:	75 0b                	jne    c00118ba <opcodeFault(regs*, void*)+0x36d>
c00118af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118b2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00118b5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00118b8:	eb 20                	jmp    c00118da <opcodeFault(regs*, void*)+0x38d>
c00118ba:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00118be:	75 0b                	jne    c00118cb <opcodeFault(regs*, void*)+0x37e>
c00118c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118c3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00118c6:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00118c9:	eb 0f                	jmp    c00118da <opcodeFault(regs*, void*)+0x38d>
c00118cb:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00118cf:	75 09                	jne    c00118da <opcodeFault(regs*, void*)+0x38d>
c00118d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118d4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00118d7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00118da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118dd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00118e0:	8d 50 02             	lea    edx,[eax+0x2]
c00118e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118e6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00118e9:	e9 11 02 00 00       	jmp    c0011aff <opcodeFault(regs*, void*)+0x5b2>
c00118ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00118f1:	8a 00                	mov    al,BYTE PTR [eax]
c00118f3:	3c 0f                	cmp    al,0xf
c00118f5:	0f 85 76 01 00 00    	jne    c0011a71 <opcodeFault(regs*, void*)+0x524>
c00118fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00118fe:	40                   	inc    eax
c00118ff:	8a 00                	mov    al,BYTE PTR [eax]
c0011901:	3c c7                	cmp    al,0xc7
c0011903:	0f 85 68 01 00 00    	jne    c0011a71 <opcodeFault(regs*, void*)+0x524>
c0011909:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001190c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001190f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011912:	8d 50 01             	lea    edx,[eax+0x1]
c0011915:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011918:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001191b:	8d 45 ba             	lea    eax,[ebp-0x46]
c001191e:	50                   	push   eax
c001191f:	8d 45 bb             	lea    eax,[ebp-0x45]
c0011922:	50                   	push   eax
c0011923:	8d 45 bc             	lea    eax,[ebp-0x44]
c0011926:	50                   	push   eax
c0011927:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001192a:	e8 1d 3f 00 00       	call   c001584c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001192f:	83 c4 10             	add    esp,0x10
c0011932:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0011935:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0011938:	83 f0 01             	xor    eax,0x1
c001193b:	84 c0                	test   al,al
c001193d:	0f 84 2e 01 00 00    	je     c0011a71 <opcodeFault(regs*, void*)+0x524>
c0011943:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0011946:	3c 01                	cmp    al,0x1
c0011948:	0f 85 23 01 00 00    	jne    c0011a71 <opcodeFault(regs*, void*)+0x524>
c001194e:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0011951:	83 f0 01             	xor    eax,0x1
c0011954:	84 c0                	test   al,al
c0011956:	0f 84 15 01 00 00    	je     c0011a71 <opcodeFault(regs*, void*)+0x524>
c001195c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001195f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011962:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0011965:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001196c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001196f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0011972:	89 c2                	mov    edx,eax
c0011974:	b8 00 00 00 00       	mov    eax,0x0
c0011979:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001197c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001197f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011982:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0011985:	ba 00 00 00 00       	mov    edx,0x0
c001198a:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001198d:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0011990:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011993:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0011996:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0011999:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00119a0:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00119a3:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00119a6:	89 c2                	mov    edx,eax
c00119a8:	b8 00 00 00 00       	mov    eax,0x0
c00119ad:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00119b0:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00119b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119b6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00119b9:	ba 00 00 00 00       	mov    edx,0x0
c00119be:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00119c1:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00119c4:	e8 8c 70 00 00       	call   c0018a55 <lockScheduler()>
c00119c9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00119cc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00119cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00119d1:	89 c1                	mov    ecx,eax
c00119d3:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00119d6:	89 cb                	mov    ebx,ecx
c00119d8:	89 d0                	mov    eax,edx
c00119da:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00119dd:	89 c6                	mov    esi,eax
c00119df:	89 f0                	mov    eax,esi
c00119e1:	09 d8                	or     eax,ebx
c00119e3:	85 c0                	test   eax,eax
c00119e5:	75 21                	jne    c0011a08 <opcodeFault(regs*, void*)+0x4bb>
c00119e7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00119ea:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00119ed:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00119f0:	89 01                	mov    DWORD PTR [ecx],eax
c00119f2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00119f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119f8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119fb:	83 c8 40             	or     eax,0x40
c00119fe:	89 c2                	mov    edx,eax
c0011a00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a03:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0011a06:	eb 3e                	jmp    c0011a46 <opcodeFault(regs*, void*)+0x4f9>
c0011a08:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0011a0b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011a0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a10:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0011a13:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0011a16:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0011a19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a1c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011a1f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0011a22:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0011a25:	89 d0                	mov    eax,edx
c0011a27:	31 d2                	xor    edx,edx
c0011a29:	89 c3                	mov    ebx,eax
c0011a2b:	89 d6                	mov    esi,edx
c0011a2d:	89 da                	mov    edx,ebx
c0011a2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a32:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0011a35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a38:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a3b:	83 e0 bf             	and    eax,0xffffffbf
c0011a3e:	89 c2                	mov    edx,eax
c0011a40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a43:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0011a46:	e8 0c 70 00 00       	call   c0018a57 <unlockScheduler()>
c0011a4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a4e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011a51:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0011a54:	01 c2                	add    edx,eax
c0011a56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a59:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011a5c:	83 ec 0c             	sub    esp,0xc
c0011a5f:	68 16 20 02 c0       	push   0xc0022016
c0011a64:	e8 b4 d7 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0011a69:	83 c4 10             	add    esp,0x10
c0011a6c:	e9 8e 00 00 00       	jmp    c0011aff <opcodeFault(regs*, void*)+0x5b2>
c0011a71:	83 ec 0c             	sub    esp,0xc
c0011a74:	68 29 20 02 c0       	push   0xc0022029
c0011a79:	e8 9f d7 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0011a7e:	83 c4 10             	add    esp,0x10
c0011a81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a84:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011a87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a8a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a8d:	c1 e0 04             	shl    eax,0x4
c0011a90:	01 d0                	add    eax,edx
c0011a92:	83 c0 03             	add    eax,0x3
c0011a95:	8a 00                	mov    al,BYTE PTR [eax]
c0011a97:	0f b6 d8             	movzx  ebx,al
c0011a9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a9d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011aa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aa3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011aa6:	c1 e0 04             	shl    eax,0x4
c0011aa9:	01 d0                	add    eax,edx
c0011aab:	83 c0 02             	add    eax,0x2
c0011aae:	8a 00                	mov    al,BYTE PTR [eax]
c0011ab0:	0f b6 c8             	movzx  ecx,al
c0011ab3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ab6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011ab9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011abc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011abf:	c1 e0 04             	shl    eax,0x4
c0011ac2:	01 d0                	add    eax,edx
c0011ac4:	40                   	inc    eax
c0011ac5:	8a 00                	mov    al,BYTE PTR [eax]
c0011ac7:	0f b6 d0             	movzx  edx,al
c0011aca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011acd:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0011ad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ad3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ad6:	c1 e0 04             	shl    eax,0x4
c0011ad9:	01 f0                	add    eax,esi
c0011adb:	8a 00                	mov    al,BYTE PTR [eax]
c0011add:	0f b6 c0             	movzx  eax,al
c0011ae0:	83 ec 0c             	sub    esp,0xc
c0011ae3:	53                   	push   ebx
c0011ae4:	51                   	push   ecx
c0011ae5:	52                   	push   edx
c0011ae6:	50                   	push   eax
c0011ae7:	68 3c 20 02 c0       	push   0xc002203c
c0011aec:	e8 2c d7 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0011af1:	83 c4 20             	add    esp,0x20
c0011af4:	83 ec 0c             	sub    esp,0xc
c0011af7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011afa:	e8 65 f5 ff ff       	call   c0011064 <displayDebugInfo(regs*)>
c0011aff:	8d 65 f8             	lea    esp,[ebp-0x8]
c0011b02:	5b                   	pop    ebx
c0011b03:	5e                   	pop    esi
c0011b04:	5d                   	pop    ebp
c0011b05:	c3                   	ret    

c0011b06 <displayProgramFault(char const*)>:
c0011b06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b0b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011b0e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011b14:	85 c0                	test   eax,eax
c0011b16:	74 15                	je     c0011b2d <displayProgramFault(char const*)+0x27>
c0011b18:	83 ec 0c             	sub    esp,0xc
c0011b1b:	6a 04                	push   0x4
c0011b1d:	6a 0f                	push   0xf
c0011b1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011b23:	50                   	push   eax
c0011b24:	e8 05 b9 ff ff       	call   c000d42e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0011b29:	83 c4 1c             	add    esp,0x1c
c0011b2c:	c3                   	ret    
c0011b2d:	c3                   	ret    

c0011b2e <setupInterruptController()>:
c0011b2e:	55                   	push   ebp
c0011b2f:	89 e5                	mov    ebp,esp
c0011b31:	53                   	push   ebx
c0011b32:	83 ec 14             	sub    esp,0x14
c0011b35:	e8 a3 2d 00 00       	call   c00148dd <getCPUNumber()>
c0011b3a:	85 c0                	test   eax,eax
c0011b3c:	0f 95 c0             	setne  al
c0011b3f:	84 c0                	test   al,al
c0011b41:	74 56                	je     c0011b99 <setupInterruptController()+0x6b>
c0011b43:	83 ec 0c             	sub    esp,0xc
c0011b46:	68 58 21 00 00       	push   0x2158
c0011b4b:	e8 98 d5 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c0011b50:	83 c4 10             	add    esp,0x10
c0011b53:	89 c3                	mov    ebx,eax
c0011b55:	83 ec 0c             	sub    esp,0xc
c0011b58:	53                   	push   ebx
c0011b59:	e8 6a c9 00 00       	call   c001e4c8 <APIC::APIC()>
c0011b5e:	83 c4 10             	add    esp,0x10
c0011b61:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0011b64:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0011b67:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011b6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b6c:	83 c0 08             	add    eax,0x8
c0011b6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b71:	6a 00                	push   0x0
c0011b73:	6a 00                	push   0x0
c0011b75:	6a 00                	push   0x0
c0011b77:	52                   	push   edx
c0011b78:	ff d0                	call   eax
c0011b7a:	83 c4 10             	add    esp,0x10
c0011b7d:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0011b82:	83 ec 08             	sub    esp,0x8
c0011b85:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011b88:	50                   	push   eax
c0011b89:	e8 a4 ea ff ff       	call   c0010632 <Device::addChild(Device*)>
c0011b8e:	83 c4 10             	add    esp,0x10
c0011b91:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011b94:	e9 48 03 00 00       	jmp    c0011ee1 <setupInterruptController()+0x3b3>
c0011b99:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0011b9e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011ba4:	83 e0 01             	and    eax,0x1
c0011ba7:	84 c0                	test   al,al
c0011ba9:	0f 95 c0             	setne  al
c0011bac:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0011baf:	83 ec 0c             	sub    esp,0xc
c0011bb2:	68 58 21 00 00       	push   0x2158
c0011bb7:	e8 2c d5 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c0011bbc:	83 c4 10             	add    esp,0x10
c0011bbf:	89 c3                	mov    ebx,eax
c0011bc1:	83 ec 0c             	sub    esp,0xc
c0011bc4:	53                   	push   ebx
c0011bc5:	e8 f8 cd 00 00       	call   c001e9c2 <PIC::PIC()>
c0011bca:	83 c4 10             	add    esp,0x10
c0011bcd:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011bd0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011bd3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bd8:	83 c0 08             	add    eax,0x8
c0011bdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bdd:	6a 00                	push   0x0
c0011bdf:	6a 00                	push   0x0
c0011be1:	6a 00                	push   0x0
c0011be3:	52                   	push   edx
c0011be4:	ff d0                	call   eax
c0011be6:	83 c4 10             	add    esp,0x10
c0011be9:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0011bed:	74 6e                	je     c0011c5d <setupInterruptController()+0x12f>
c0011bef:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011bf2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bf7:	83 c0 0c             	add    eax,0xc
c0011bfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bfc:	6a 00                	push   0x0
c0011bfe:	6a 00                	push   0x0
c0011c00:	6a 00                	push   0x0
c0011c02:	52                   	push   edx
c0011c03:	ff d0                	call   eax
c0011c05:	83 c4 10             	add    esp,0x10
c0011c08:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011c0c:	74 15                	je     c0011c23 <setupInterruptController()+0xf5>
c0011c0e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c11:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c13:	83 c0 04             	add    eax,0x4
c0011c16:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c18:	83 ec 0c             	sub    esp,0xc
c0011c1b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c1e:	ff d0                	call   eax
c0011c20:	83 c4 10             	add    esp,0x10
c0011c23:	83 ec 0c             	sub    esp,0xc
c0011c26:	68 58 21 00 00       	push   0x2158
c0011c2b:	e8 b8 d4 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c0011c30:	83 c4 10             	add    esp,0x10
c0011c33:	89 c3                	mov    ebx,eax
c0011c35:	83 ec 0c             	sub    esp,0xc
c0011c38:	53                   	push   ebx
c0011c39:	e8 8a c8 00 00       	call   c001e4c8 <APIC::APIC()>
c0011c3e:	83 c4 10             	add    esp,0x10
c0011c41:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011c44:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011c47:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c4c:	83 c0 08             	add    eax,0x8
c0011c4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c51:	6a 00                	push   0x0
c0011c53:	6a 00                	push   0x0
c0011c55:	6a 00                	push   0x0
c0011c57:	52                   	push   edx
c0011c58:	ff d0                	call   eax
c0011c5a:	83 c4 10             	add    esp,0x10
c0011c5d:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0011c62:	83 ec 08             	sub    esp,0x8
c0011c65:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c68:	50                   	push   eax
c0011c69:	e8 c4 e9 ff ff       	call   c0010632 <Device::addChild(Device*)>
c0011c6e:	83 c4 10             	add    esp,0x10
c0011c71:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c74:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c76:	83 c0 24             	add    eax,0x24
c0011c79:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c7b:	6a 00                	push   0x0
c0011c7d:	68 2e 15 01 c0       	push   0xc001152e
c0011c82:	6a 00                	push   0x0
c0011c84:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c87:	ff d0                	call   eax
c0011c89:	83 c4 10             	add    esp,0x10
c0011c8c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c91:	83 c0 24             	add    eax,0x24
c0011c94:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c96:	6a 00                	push   0x0
c0011c98:	68 2e 15 01 c0       	push   0xc001152e
c0011c9d:	6a 01                	push   0x1
c0011c9f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ca2:	ff d0                	call   eax
c0011ca4:	83 c4 10             	add    esp,0x10
c0011ca7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011caa:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cac:	83 c0 24             	add    eax,0x24
c0011caf:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cb1:	6a 00                	push   0x0
c0011cb3:	68 c7 0e 01 c0       	push   0xc0010ec7
c0011cb8:	6a 02                	push   0x2
c0011cba:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cbd:	ff d0                	call   eax
c0011cbf:	83 c4 10             	add    esp,0x10
c0011cc2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cc7:	83 c0 24             	add    eax,0x24
c0011cca:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ccc:	6a 00                	push   0x0
c0011cce:	68 2e 15 01 c0       	push   0xc001152e
c0011cd3:	6a 03                	push   0x3
c0011cd5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cd8:	ff d0                	call   eax
c0011cda:	83 c4 10             	add    esp,0x10
c0011cdd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ce0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ce2:	83 c0 24             	add    eax,0x24
c0011ce5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ce7:	6a 00                	push   0x0
c0011ce9:	68 2e 15 01 c0       	push   0xc001152e
c0011cee:	6a 04                	push   0x4
c0011cf0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cf3:	ff d0                	call   eax
c0011cf5:	83 c4 10             	add    esp,0x10
c0011cf8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cfd:	83 c0 24             	add    eax,0x24
c0011d00:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d02:	6a 00                	push   0x0
c0011d04:	68 2e 15 01 c0       	push   0xc001152e
c0011d09:	6a 05                	push   0x5
c0011d0b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d0e:	ff d0                	call   eax
c0011d10:	83 c4 10             	add    esp,0x10
c0011d13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d16:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d18:	83 c0 24             	add    eax,0x24
c0011d1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d1d:	6a 00                	push   0x0
c0011d1f:	68 4d 15 01 c0       	push   0xc001154d
c0011d24:	6a 06                	push   0x6
c0011d26:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d29:	ff d0                	call   eax
c0011d2b:	83 c4 10             	add    esp,0x10
c0011d2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d31:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d33:	83 c0 24             	add    eax,0x24
c0011d36:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d38:	6a 00                	push   0x0
c0011d3a:	68 7b 14 01 c0       	push   0xc001147b
c0011d3f:	6a 07                	push   0x7
c0011d41:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d44:	ff d0                	call   eax
c0011d46:	83 c4 10             	add    esp,0x10
c0011d49:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d4e:	83 c0 24             	add    eax,0x24
c0011d51:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d53:	6a 00                	push   0x0
c0011d55:	68 e2 0c 01 c0       	push   0xc0010ce2
c0011d5a:	6a 08                	push   0x8
c0011d5c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d5f:	ff d0                	call   eax
c0011d61:	83 c4 10             	add    esp,0x10
c0011d64:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d67:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d69:	83 c0 24             	add    eax,0x24
c0011d6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d6e:	6a 00                	push   0x0
c0011d70:	68 2e 15 01 c0       	push   0xc001152e
c0011d75:	6a 09                	push   0x9
c0011d77:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d7a:	ff d0                	call   eax
c0011d7c:	83 c4 10             	add    esp,0x10
c0011d7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d82:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d84:	83 c0 24             	add    eax,0x24
c0011d87:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d89:	6a 00                	push   0x0
c0011d8b:	68 2e 15 01 c0       	push   0xc001152e
c0011d90:	6a 0a                	push   0xa
c0011d92:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d95:	ff d0                	call   eax
c0011d97:	83 c4 10             	add    esp,0x10
c0011d9a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d9f:	83 c0 24             	add    eax,0x24
c0011da2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011da4:	6a 00                	push   0x0
c0011da6:	68 2e 15 01 c0       	push   0xc001152e
c0011dab:	6a 0b                	push   0xb
c0011dad:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011db0:	ff d0                	call   eax
c0011db2:	83 c4 10             	add    esp,0x10
c0011db5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011db8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dba:	83 c0 24             	add    eax,0x24
c0011dbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dbf:	6a 00                	push   0x0
c0011dc1:	68 2e 15 01 c0       	push   0xc001152e
c0011dc6:	6a 0c                	push   0xc
c0011dc8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011dcb:	ff d0                	call   eax
c0011dcd:	83 c4 10             	add    esp,0x10
c0011dd0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011dd3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dd5:	83 c0 24             	add    eax,0x24
c0011dd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dda:	6a 00                	push   0x0
c0011ddc:	68 de 14 01 c0       	push   0xc00114de
c0011de1:	6a 0d                	push   0xd
c0011de3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011de6:	ff d0                	call   eax
c0011de8:	83 c4 10             	add    esp,0x10
c0011deb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011dee:	8b 00                	mov    eax,DWORD PTR [eax]
c0011df0:	83 c0 24             	add    eax,0x24
c0011df3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011df5:	6a 00                	push   0x0
c0011df7:	68 17 15 01 c0       	push   0xc0011517
c0011dfc:	6a 0e                	push   0xe
c0011dfe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e01:	ff d0                	call   eax
c0011e03:	83 c4 10             	add    esp,0x10
c0011e06:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e09:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e0b:	83 c0 24             	add    eax,0x24
c0011e0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e10:	6a 00                	push   0x0
c0011e12:	68 2e 15 01 c0       	push   0xc001152e
c0011e17:	6a 0f                	push   0xf
c0011e19:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e1c:	ff d0                	call   eax
c0011e1e:	83 c4 10             	add    esp,0x10
c0011e21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e24:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e26:	83 c0 24             	add    eax,0x24
c0011e29:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e2b:	6a 00                	push   0x0
c0011e2d:	68 2e 15 01 c0       	push   0xc001152e
c0011e32:	6a 10                	push   0x10
c0011e34:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e37:	ff d0                	call   eax
c0011e39:	83 c4 10             	add    esp,0x10
c0011e3c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e41:	83 c0 24             	add    eax,0x24
c0011e44:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e46:	6a 00                	push   0x0
c0011e48:	68 2e 15 01 c0       	push   0xc001152e
c0011e4d:	6a 11                	push   0x11
c0011e4f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e52:	ff d0                	call   eax
c0011e54:	83 c4 10             	add    esp,0x10
c0011e57:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e5c:	83 c0 24             	add    eax,0x24
c0011e5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e61:	6a 00                	push   0x0
c0011e63:	68 2e 15 01 c0       	push   0xc001152e
c0011e68:	6a 12                	push   0x12
c0011e6a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e6d:	ff d0                	call   eax
c0011e6f:	83 c4 10             	add    esp,0x10
c0011e72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e75:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e77:	83 c0 24             	add    eax,0x24
c0011e7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e7c:	6a 00                	push   0x0
c0011e7e:	68 2e 15 01 c0       	push   0xc001152e
c0011e83:	6a 13                	push   0x13
c0011e85:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e88:	ff d0                	call   eax
c0011e8a:	83 c4 10             	add    esp,0x10
c0011e8d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e90:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e92:	83 c0 24             	add    eax,0x24
c0011e95:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e97:	6a 00                	push   0x0
c0011e99:	68 2e 15 01 c0       	push   0xc001152e
c0011e9e:	6a 14                	push   0x14
c0011ea0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ea3:	ff d0                	call   eax
c0011ea5:	83 c4 10             	add    esp,0x10
c0011ea8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011eab:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ead:	83 c0 24             	add    eax,0x24
c0011eb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011eb2:	6a 00                	push   0x0
c0011eb4:	68 2e 15 01 c0       	push   0xc001152e
c0011eb9:	6a 1e                	push   0x1e
c0011ebb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ebe:	ff d0                	call   eax
c0011ec0:	83 c4 10             	add    esp,0x10
c0011ec3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ec6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ec8:	83 c0 24             	add    eax,0x24
c0011ecb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ecd:	6a 00                	push   0x0
c0011ecf:	68 5c 74 01 c0       	push   0xc001745c
c0011ed4:	6a 60                	push   0x60
c0011ed6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ed9:	ff d0                	call   eax
c0011edb:	83 c4 10             	add    esp,0x10
c0011ede:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ee1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011ee4:	c9                   	leave  
c0011ee5:	c3                   	ret    

c0011ee6 <InterruptController::convertLegacyIRQNumber(int)>:
c0011ee6:	55                   	push   ebp
c0011ee7:	89 e5                	mov    ebp,esp
c0011ee9:	83 ec 08             	sub    esp,0x8
c0011eec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011eef:	83 ec 0c             	sub    esp,0xc
c0011ef2:	50                   	push   eax
c0011ef3:	e8 1c ea ff ff       	call   c0010914 <Device::getName()>
c0011ef8:	83 c4 10             	add    esp,0x10
c0011efb:	8a 00                	mov    al,BYTE PTR [eax]
c0011efd:	3c 41                	cmp    al,0x41
c0011eff:	0f 94 c0             	sete   al
c0011f02:	84 c0                	test   al,al
c0011f04:	74 28                	je     c0011f2e <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011f06:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0011f0a:	7f 12                	jg     c0011f1e <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0011f0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011f0f:	05 00 3f 02 c0       	add    eax,0xc0023f00
c0011f14:	8a 00                	mov    al,BYTE PTR [eax]
c0011f16:	0f b6 c0             	movzx  eax,al
c0011f19:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0011f1c:	eb 10                	jmp    c0011f2e <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011f1e:	83 ec 0c             	sub    esp,0xc
c0011f21:	68 b4 1d 02 c0       	push   0xc0021db4
c0011f26:	e8 21 3b 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c0011f2b:	83 c4 10             	add    esp,0x10
c0011f2e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011f31:	c9                   	leave  
c0011f32:	c3                   	ret    
c0011f33:	90                   	nop

c0011f34 <startGUI(void*)>:
c0011f34:	55                   	push   ebp
c0011f35:	89 e5                	mov    ebp,esp
c0011f37:	53                   	push   ebx
c0011f38:	83 ec 04             	sub    esp,0x4
c0011f3b:	e8 17 6b 00 00       	call   c0018a57 <unlockScheduler()>
c0011f40:	e8 fb 6a 00 00       	call   c0018a40 <getIRQNestingLevel()>
c0011f45:	83 ec 08             	sub    esp,0x8
c0011f48:	50                   	push   eax
c0011f49:	68 a4 20 02 c0       	push   0xc00220a4
c0011f4e:	e8 ca d2 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0011f53:	83 c4 10             	add    esp,0x10
c0011f56:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c0011f5c:	83 ec 08             	sub    esp,0x8
c0011f5f:	6a 01                	push   0x1
c0011f61:	68 be 20 02 c0       	push   0xc00220be
c0011f66:	e8 04 65 00 00       	call   c001846f <Thr::loadDLL(char const*, bool)>
c0011f6b:	83 c4 10             	add    esp,0x10
c0011f6e:	83 ec 08             	sub    esp,0x8
c0011f71:	53                   	push   ebx
c0011f72:	50                   	push   eax
c0011f73:	e8 bd 66 00 00       	call   c0018635 <Thr::executeDLL(unsigned long, void*)>
c0011f78:	83 c4 10             	add    esp,0x10
c0011f7b:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c0011f81:	83 ec 08             	sub    esp,0x8
c0011f84:	6a 01                	push   0x1
c0011f86:	68 d8 20 02 c0       	push   0xc00220d8
c0011f8b:	e8 df 64 00 00       	call   c001846f <Thr::loadDLL(char const*, bool)>
c0011f90:	83 c4 10             	add    esp,0x10
c0011f93:	83 ec 08             	sub    esp,0x8
c0011f96:	53                   	push   ebx
c0011f97:	50                   	push   eax
c0011f98:	e8 98 66 00 00       	call   c0018635 <Thr::executeDLL(unsigned long, void*)>
c0011f9d:	83 c4 10             	add    esp,0x10
c0011fa0:	90                   	nop
c0011fa1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011fa4:	c9                   	leave  
c0011fa5:	c3                   	ret    

c0011fa6 <sendKeyToTerminal(unsigned char)>:
c0011fa6:	55                   	push   ebp
c0011fa7:	89 e5                	mov    ebp,esp
c0011fa9:	83 ec 28             	sub    esp,0x28
c0011fac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011faf:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0011fb2:	8b 15 64 48 02 c0    	mov    edx,DWORD PTR ds:0xc0024864
c0011fb8:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c0011fbb:	25 ff 00 00 00       	and    eax,0xff
c0011fc0:	83 ec 08             	sub    esp,0x8
c0011fc3:	50                   	push   eax
c0011fc4:	52                   	push   edx
c0011fc5:	e8 a2 b9 ff ff       	call   c000d96c <VgaText::receiveKey(unsigned char)>
c0011fca:	83 c4 10             	add    esp,0x10
c0011fcd:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0011fd1:	75 41                	jne    c0012014 <sendKeyToTerminal(unsigned char)+0x6e>
c0011fd3:	e8 a4 6a 00 00       	call   c0018a7c <lockStuff()>
c0011fd8:	a1 40 49 02 c0       	mov    eax,ds:0xc0024940
c0011fdd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011fe0:	c7 05 40 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024940,0x0
c0011fea:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011fee:	74 1f                	je     c001200f <sendKeyToTerminal(unsigned char)+0x69>
c0011ff0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ff3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0011ff6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011ff9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ffc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011fff:	83 ec 0c             	sub    esp,0xc
c0012002:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0012005:	e8 6f 70 00 00       	call   c0019079 <unblockTask(ThreadControlBlock*)>
c001200a:	83 c4 10             	add    esp,0x10
c001200d:	eb db                	jmp    c0011fea <sendKeyToTerminal(unsigned char)+0x44>
c001200f:	e8 0f 6e 00 00       	call   c0018e23 <unlockStuff()>
c0012014:	90                   	nop
c0012015:	c9                   	leave  
c0012016:	c3                   	ret    

c0012017 <sendKeyboardToken(KeyboardToken)>:
c0012017:	55                   	push   ebp
c0012018:	89 e5                	mov    ebp,esp
c001201a:	83 ec 18             	sub    esp,0x18
c001201d:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0012020:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012023:	25 ff ff 00 00       	and    eax,0xffff
c0012028:	83 f2 01             	xor    edx,0x1
c001202b:	88 90 60 49 02 c0    	mov    BYTE PTR [eax-0x3ffdb6a0],dl
c0012031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012034:	66 3d 03 02          	cmp    ax,0x203
c0012038:	75 07                	jne    c0012041 <sendKeyboardToken(KeyboardToken)+0x2a>
c001203a:	a0 60 4a 02 c0       	mov    al,ds:0xc0024a60
c001203f:	84 c0                	test   al,al
c0012041:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0012045:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0012048:	a0 68 4d 02 c0       	mov    al,ds:0xc0024d68
c001204d:	38 c2                	cmp    dl,al
c001204f:	74 1e                	je     c001206f <sendKeyboardToken(KeyboardToken)+0x58>
c0012051:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0012054:	a2 68 4d 02 c0       	mov    ds:0xc0024d68,al
c0012059:	a0 68 4d 02 c0       	mov    al,ds:0xc0024d68
c001205e:	25 ff 00 00 00       	and    eax,0xff
c0012063:	83 ec 0c             	sub    esp,0xc
c0012066:	50                   	push   eax
c0012067:	e8 6c ab ff ff       	call   c000cbd8 <setTerminalScrollLock(bool)>
c001206c:	83 c4 10             	add    esp,0x10
c001206f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0012072:	84 c0                	test   al,al
c0012074:	0f 84 ae 00 00 00    	je     c0012128 <sendKeyboardToken(KeyboardToken)+0x111>
c001207a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001207d:	66 3d 10 03          	cmp    ax,0x310
c0012081:	75 06                	jne    c0012089 <sendKeyboardToken(KeyboardToken)+0x72>
c0012083:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0012089:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001208c:	66 3d 11 03          	cmp    ax,0x311
c0012090:	75 06                	jne    c0012098 <sendKeyboardToken(KeyboardToken)+0x81>
c0012092:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0012098:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001209b:	66 3d 12 03          	cmp    ax,0x312
c001209f:	75 06                	jne    c00120a7 <sendKeyboardToken(KeyboardToken)+0x90>
c00120a1:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00120a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120aa:	66 3d 13 03          	cmp    ax,0x313
c00120ae:	75 06                	jne    c00120b6 <sendKeyboardToken(KeyboardToken)+0x9f>
c00120b0:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00120b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120b9:	66 3d 14 03          	cmp    ax,0x314
c00120bd:	75 06                	jne    c00120c5 <sendKeyboardToken(KeyboardToken)+0xae>
c00120bf:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00120c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120c8:	66 3d 15 03          	cmp    ax,0x315
c00120cc:	75 06                	jne    c00120d4 <sendKeyboardToken(KeyboardToken)+0xbd>
c00120ce:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00120d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120d7:	66 3d 16 03          	cmp    ax,0x316
c00120db:	75 06                	jne    c00120e3 <sendKeyboardToken(KeyboardToken)+0xcc>
c00120dd:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00120e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120e6:	66 3d 17 03          	cmp    ax,0x317
c00120ea:	75 06                	jne    c00120f2 <sendKeyboardToken(KeyboardToken)+0xdb>
c00120ec:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00120f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120f5:	66 3d 18 03          	cmp    ax,0x318
c00120f9:	75 06                	jne    c0012101 <sendKeyboardToken(KeyboardToken)+0xea>
c00120fb:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0012101:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012104:	66 3d 19 03          	cmp    ax,0x319
c0012108:	75 06                	jne    c0012110 <sendKeyboardToken(KeyboardToken)+0xf9>
c001210a:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0012110:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012113:	66 3d 1a 03          	cmp    ax,0x31a
c0012117:	0f 85 c9 00 00 00    	jne    c00121e6 <sendKeyboardToken(KeyboardToken)+0x1cf>
c001211d:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0012123:	e9 be 00 00 00       	jmp    c00121e6 <sendKeyboardToken(KeyboardToken)+0x1cf>
c0012128:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001212b:	66 3d 10 03          	cmp    ax,0x310
c001212f:	75 0a                	jne    c001213b <sendKeyboardToken(KeyboardToken)+0x124>
c0012131:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0012137:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001213b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001213e:	66 3d 11 03          	cmp    ax,0x311
c0012142:	75 0a                	jne    c001214e <sendKeyboardToken(KeyboardToken)+0x137>
c0012144:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001214a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001214e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012151:	66 3d 12 03          	cmp    ax,0x312
c0012155:	75 0a                	jne    c0012161 <sendKeyboardToken(KeyboardToken)+0x14a>
c0012157:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001215d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012161:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012164:	66 3d 13 03          	cmp    ax,0x313
c0012168:	75 0a                	jne    c0012174 <sendKeyboardToken(KeyboardToken)+0x15d>
c001216a:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0012170:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012174:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012177:	66 3d 14 03          	cmp    ax,0x314
c001217b:	75 0a                	jne    c0012187 <sendKeyboardToken(KeyboardToken)+0x170>
c001217d:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0012183:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012187:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001218a:	66 3d 15 03          	cmp    ax,0x315
c001218e:	75 0a                	jne    c001219a <sendKeyboardToken(KeyboardToken)+0x183>
c0012190:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0012196:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001219a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001219d:	66 3d 16 03          	cmp    ax,0x316
c00121a1:	75 0a                	jne    c00121ad <sendKeyboardToken(KeyboardToken)+0x196>
c00121a3:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00121a9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121b0:	66 3d 17 03          	cmp    ax,0x317
c00121b4:	75 0a                	jne    c00121c0 <sendKeyboardToken(KeyboardToken)+0x1a9>
c00121b6:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00121bc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121c3:	66 3d 18 03          	cmp    ax,0x318
c00121c7:	75 0a                	jne    c00121d3 <sendKeyboardToken(KeyboardToken)+0x1bc>
c00121c9:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00121cf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121d6:	66 3d 19 03          	cmp    ax,0x319
c00121da:	75 0a                	jne    c00121e6 <sendKeyboardToken(KeyboardToken)+0x1cf>
c00121dc:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00121e2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121e9:	66 3d 00 02          	cmp    ax,0x200
c00121ed:	75 2a                	jne    c0012219 <sendKeyboardToken(KeyboardToken)+0x202>
c00121ef:	a0 60 4d 02 c0       	mov    al,ds:0xc0024d60
c00121f4:	83 f0 01             	xor    eax,0x1
c00121f7:	84 c0                	test   al,al
c00121f9:	74 1e                	je     c0012219 <sendKeyboardToken(KeyboardToken)+0x202>
c00121fb:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0012200:	6a 01                	push   0x1
c0012202:	6a 00                	push   0x0
c0012204:	68 34 1f 01 c0       	push   0xc0011f34
c0012209:	50                   	push   eax
c001220a:	e8 7b 69 00 00       	call   c0018b8a <Process::createThread(void (*)(void*), void*, int)>
c001220f:	83 c4 10             	add    esp,0x10
c0012212:	c6 05 60 4d 02 c0 01 	mov    BYTE PTR ds:0xc0024d60,0x1
c0012219:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001221c:	66 3d 1d 03          	cmp    ax,0x31d
c0012220:	75 06                	jne    c0012228 <sendKeyboardToken(KeyboardToken)+0x211>
c0012222:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0012228:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001222b:	66 3d 1c 03          	cmp    ax,0x31c
c001222f:	75 06                	jne    c0012237 <sendKeyboardToken(KeyboardToken)+0x220>
c0012231:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0012237:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001223a:	66 3d 1b 03          	cmp    ax,0x31b
c001223e:	75 06                	jne    c0012246 <sendKeyboardToken(KeyboardToken)+0x22f>
c0012240:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0012246:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012249:	66 3d 1e 03          	cmp    ax,0x31e
c001224d:	75 06                	jne    c0012255 <sendKeyboardToken(KeyboardToken)+0x23e>
c001224f:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0012255:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012258:	66 3d 1f 03          	cmp    ax,0x31f
c001225c:	75 06                	jne    c0012264 <sendKeyboardToken(KeyboardToken)+0x24d>
c001225e:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0012264:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012267:	66 3d 1a 03          	cmp    ax,0x31a
c001226b:	75 06                	jne    c0012273 <sendKeyboardToken(KeyboardToken)+0x25c>
c001226d:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0012273:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0012277:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001227a:	83 f0 01             	xor    eax,0x1
c001227d:	84 c0                	test   al,al
c001227f:	74 7b                	je     c00122fc <sendKeyboardToken(KeyboardToken)+0x2e5>
c0012281:	a0 61 4a 02 c0       	mov    al,ds:0xc0024a61
c0012286:	84 c0                	test   al,al
c0012288:	74 43                	je     c00122cd <sendKeyboardToken(KeyboardToken)+0x2b6>
c001228a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001228e:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0012292:	74 2d                	je     c00122c1 <sendKeyboardToken(KeyboardToken)+0x2aa>
c0012294:	8b 15 64 4d 02 c0    	mov    edx,DWORD PTR ds:0xc0024d64
c001229a:	89 d0                	mov    eax,edx
c001229c:	c1 e0 02             	shl    eax,0x2
c001229f:	01 d0                	add    eax,edx
c00122a1:	01 c0                	add    eax,eax
c00122a3:	a3 64 4d 02 c0       	mov    ds:0xc0024d64,eax
c00122a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122ab:	25 ff ff 00 00       	and    eax,0xffff
c00122b0:	8d 50 d0             	lea    edx,[eax-0x30]
c00122b3:	a1 64 4d 02 c0       	mov    eax,ds:0xc0024d64
c00122b8:	01 d0                	add    eax,edx
c00122ba:	a3 64 4d 02 c0       	mov    ds:0xc0024d64,eax
c00122bf:	eb 71                	jmp    c0012332 <sendKeyboardToken(KeyboardToken)+0x31b>
c00122c1:	c7 05 64 4d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024d64,0x0
c00122cb:	eb 65                	jmp    c0012332 <sendKeyboardToken(KeyboardToken)+0x31b>
c00122cd:	a1 64 4d 02 c0       	mov    eax,ds:0xc0024d64
c00122d2:	85 c0                	test   eax,eax
c00122d4:	74 1a                	je     c00122f0 <sendKeyboardToken(KeyboardToken)+0x2d9>
c00122d6:	a1 64 4d 02 c0       	mov    eax,ds:0xc0024d64
c00122db:	25 ff 00 00 00       	and    eax,0xff
c00122e0:	83 ec 0c             	sub    esp,0xc
c00122e3:	50                   	push   eax
c00122e4:	e8 bd fc ff ff       	call   c0011fa6 <sendKeyToTerminal(unsigned char)>
c00122e9:	83 c4 10             	add    esp,0x10
c00122ec:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00122f0:	c7 05 64 4d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024d64,0x0
c00122fa:	eb 36                	jmp    c0012332 <sendKeyboardToken(KeyboardToken)+0x31b>
c00122fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122ff:	66 3d 01 01          	cmp    ax,0x101
c0012303:	75 2d                	jne    c0012332 <sendKeyboardToken(KeyboardToken)+0x31b>
c0012305:	a1 64 4d 02 c0       	mov    eax,ds:0xc0024d64
c001230a:	85 c0                	test   eax,eax
c001230c:	74 1a                	je     c0012328 <sendKeyboardToken(KeyboardToken)+0x311>
c001230e:	a1 64 4d 02 c0       	mov    eax,ds:0xc0024d64
c0012313:	25 ff 00 00 00       	and    eax,0xff
c0012318:	83 ec 0c             	sub    esp,0xc
c001231b:	50                   	push   eax
c001231c:	e8 85 fc ff ff       	call   c0011fa6 <sendKeyToTerminal(unsigned char)>
c0012321:	83 c4 10             	add    esp,0x10
c0012324:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0012328:	c7 05 64 4d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024d64,0x0
c0012332:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0012335:	83 f0 01             	xor    eax,0x1
c0012338:	84 c0                	test   al,al
c001233a:	74 4e                	je     c001238a <sendKeyboardToken(KeyboardToken)+0x373>
c001233c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001233f:	83 f0 01             	xor    eax,0x1
c0012342:	84 c0                	test   al,al
c0012344:	74 44                	je     c001238a <sendKeyboardToken(KeyboardToken)+0x373>
c0012346:	a0 60 4a 02 c0       	mov    al,ds:0xc0024a60
c001234b:	83 f0 01             	xor    eax,0x1
c001234e:	84 c0                	test   al,al
c0012350:	74 38                	je     c001238a <sendKeyboardToken(KeyboardToken)+0x373>
c0012352:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012355:	66 83 f8 1f          	cmp    ax,0x1f
c0012359:	76 09                	jbe    c0012364 <sendKeyboardToken(KeyboardToken)+0x34d>
c001235b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001235e:	66 83 f8 7e          	cmp    ax,0x7e
c0012362:	76 12                	jbe    c0012376 <sendKeyboardToken(KeyboardToken)+0x35f>
c0012364:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012367:	66 83 f8 0a          	cmp    ax,0xa
c001236b:	74 09                	je     c0012376 <sendKeyboardToken(KeyboardToken)+0x35f>
c001236d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012370:	66 83 f8 08          	cmp    ax,0x8
c0012374:	75 14                	jne    c001238a <sendKeyboardToken(KeyboardToken)+0x373>
c0012376:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012379:	25 ff 00 00 00       	and    eax,0xff
c001237e:	83 ec 0c             	sub    esp,0xc
c0012381:	50                   	push   eax
c0012382:	e8 1f fc ff ff       	call   c0011fa6 <sendKeyToTerminal(unsigned char)>
c0012387:	83 c4 10             	add    esp,0x10
c001238a:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001238d:	83 f0 01             	xor    eax,0x1
c0012390:	84 c0                	test   al,al
c0012392:	74 51                	je     c00123e5 <sendKeyboardToken(KeyboardToken)+0x3ce>
c0012394:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0012397:	83 f0 01             	xor    eax,0x1
c001239a:	84 c0                	test   al,al
c001239c:	74 47                	je     c00123e5 <sendKeyboardToken(KeyboardToken)+0x3ce>
c001239e:	a0 60 4a 02 c0       	mov    al,ds:0xc0024a60
c00123a3:	84 c0                	test   al,al
c00123a5:	74 3e                	je     c00123e5 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00123a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123aa:	66 83 f8 3f          	cmp    ax,0x3f
c00123ae:	76 35                	jbe    c00123e5 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00123b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123b3:	66 83 f8 7f          	cmp    ax,0x7f
c00123b7:	77 2c                	ja     c00123e5 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00123b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123bc:	88 c2                	mov    dl,al
c00123be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123c1:	66 83 f8 5f          	cmp    ax,0x5f
c00123c5:	76 04                	jbe    c00123cb <sendKeyboardToken(KeyboardToken)+0x3b4>
c00123c7:	b0 20                	mov    al,0x20
c00123c9:	eb 02                	jmp    c00123cd <sendKeyboardToken(KeyboardToken)+0x3b6>
c00123cb:	b0 00                	mov    al,0x0
c00123cd:	29 c2                	sub    edx,eax
c00123cf:	88 d0                	mov    al,dl
c00123d1:	83 e8 40             	sub    eax,0x40
c00123d4:	25 ff 00 00 00       	and    eax,0xff
c00123d9:	83 ec 0c             	sub    esp,0xc
c00123dc:	50                   	push   eax
c00123dd:	e8 c4 fb ff ff       	call   c0011fa6 <sendKeyToTerminal(unsigned char)>
c00123e2:	83 c4 10             	add    esp,0x10
c00123e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123e8:	66 3d 00 03          	cmp    ax,0x300
c00123ec:	75 0f                	jne    c00123fd <sendKeyboardToken(KeyboardToken)+0x3e6>
c00123ee:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00123f1:	83 f0 01             	xor    eax,0x1
c00123f4:	84 c0                	test   al,al
c00123f6:	74 05                	je     c00123fd <sendKeyboardToken(KeyboardToken)+0x3e6>
c00123f8:	e8 02 b0 ff ff       	call   c000d3ff <doTerminalCycle()>
c00123fd:	90                   	nop
c00123fe:	c9                   	leave  
c00123ff:	c3                   	ret    

c0012400 <clearInternalKeybuffer(VgaText*)>:
c0012400:	55                   	push   ebp
c0012401:	89 e5                	mov    ebp,esp
c0012403:	83 ec 08             	sub    esp,0x8
c0012406:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012409:	05 34 11 00 00       	add    eax,0x1134
c001240e:	83 ec 0c             	sub    esp,0xc
c0012411:	50                   	push   eax
c0012412:	e8 d3 e2 fe ff       	call   c00006ea <strlen>
c0012417:	83 c4 10             	add    esp,0x10
c001241a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001241d:	81 c2 34 11 00 00    	add    edx,0x1134
c0012423:	83 ec 04             	sub    esp,0x4
c0012426:	50                   	push   eax
c0012427:	6a 00                	push   0x0
c0012429:	52                   	push   edx
c001242a:	e8 9e e2 fe ff       	call   c00006cd <memset>
c001242f:	83 c4 10             	add    esp,0x10
c0012432:	90                   	nop
c0012433:	c9                   	leave  
c0012434:	c3                   	ret    

c0012435 <readKeyboard(VgaText*, char*, unsigned long)>:
c0012435:	55                   	push   ebp
c0012436:	89 e5                	mov    ebp,esp
c0012438:	83 ec 18             	sub    esp,0x18
c001243b:	fb                   	sti    
c001243c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0012443:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0012447:	74 77                	je     c00124c0 <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0012449:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001244c:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0012452:	84 c0                	test   al,al
c0012454:	75 02                	jne    c0012458 <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0012456:	eb f1                	jmp    c0012449 <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0012458:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001245b:	8d 50 01             	lea    edx,[eax+0x1]
c001245e:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0012461:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012464:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c001246a:	88 10                	mov    BYTE PTR [eax],dl
c001246c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001246f:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0012475:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0012478:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001247b:	05 34 11 00 00       	add    eax,0x1134
c0012480:	83 ec 0c             	sub    esp,0xc
c0012483:	50                   	push   eax
c0012484:	e8 61 e2 fe ff       	call   c00006ea <strlen>
c0012489:	83 c4 10             	add    esp,0x10
c001248c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001248f:	81 c2 34 11 00 00    	add    edx,0x1134
c0012495:	8d 4a 01             	lea    ecx,[edx+0x1]
c0012498:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001249b:	81 c2 34 11 00 00    	add    edx,0x1134
c00124a1:	83 ec 04             	sub    esp,0x4
c00124a4:	50                   	push   eax
c00124a5:	51                   	push   ecx
c00124a6:	52                   	push   edx
c00124a7:	e8 b3 e1 fe ff       	call   c000065f <memmove>
c00124ac:	83 c4 10             	add    esp,0x10
c00124af:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00124b2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00124b5:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00124b9:	75 88                	jne    c0012443 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00124bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00124be:	eb 03                	jmp    c00124c3 <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c00124c0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00124c3:	c9                   	leave  
c00124c4:	c3                   	ret    
c00124c5:	90                   	nop

c00124c6 <Keyboard::Keyboard(char const*)>:
c00124c6:	83 ec 0c             	sub    esp,0xc
c00124c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124cd:	83 ec 08             	sub    esp,0x8
c00124d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124d4:	50                   	push   eax
c00124d5:	e8 48 e3 ff ff       	call   c0010822 <Device::Device(char const*)>
c00124da:	83 c4 10             	add    esp,0x10
c00124dd:	ba fc 20 02 c0       	mov    edx,0xc00220fc
c00124e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124e6:	89 10                	mov    DWORD PTR [eax],edx
c00124e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124ec:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00124f6:	c6 05 44 49 02 c0 01 	mov    BYTE PTR ds:0xc0024944,0x1
c00124fd:	90                   	nop
c00124fe:	83 c4 0c             	add    esp,0xc
c0012501:	c3                   	ret    

c0012502 <Keyboard::~Keyboard()>:
c0012502:	83 ec 0c             	sub    esp,0xc
c0012505:	ba fc 20 02 c0       	mov    edx,0xc00220fc
c001250a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001250e:	89 10                	mov    DWORD PTR [eax],edx
c0012510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012514:	83 ec 0c             	sub    esp,0xc
c0012517:	50                   	push   eax
c0012518:	e8 bb df ff ff       	call   c00104d8 <Device::~Device()>
c001251d:	83 c4 10             	add    esp,0x10
c0012520:	90                   	nop
c0012521:	83 c4 0c             	add    esp,0xc
c0012524:	c3                   	ret    
c0012525:	90                   	nop

c0012526 <Keyboard::~Keyboard()>:
c0012526:	83 ec 0c             	sub    esp,0xc
c0012529:	83 ec 0c             	sub    esp,0xc
c001252c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012530:	e8 cd ff ff ff       	call   c0012502 <Keyboard::~Keyboard()>
c0012535:	83 c4 10             	add    esp,0x10
c0012538:	83 ec 08             	sub    esp,0x8
c001253b:	68 5c 01 00 00       	push   0x15c
c0012540:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012544:	e8 ae cb ff ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c0012549:	83 c4 10             	add    esp,0x10
c001254c:	83 c4 0c             	add    esp,0xc
c001254f:	c3                   	ret    

c0012550 <LogicalDisk::close(int, int, void*)>:
c0012550:	83 c8 ff             	or     eax,0xffffffff
c0012553:	c3                   	ret    

c0012554 <LogicalDisk::~LogicalDisk()>:
c0012554:	83 ec 0c             	sub    esp,0xc
c0012557:	ba ac 21 02 c0       	mov    edx,0xc00221ac
c001255c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012560:	89 10                	mov    DWORD PTR [eax],edx
c0012562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012566:	83 ec 0c             	sub    esp,0xc
c0012569:	50                   	push   eax
c001256a:	e8 69 df ff ff       	call   c00104d8 <Device::~Device()>
c001256f:	83 c4 10             	add    esp,0x10
c0012572:	90                   	nop
c0012573:	83 c4 0c             	add    esp,0xc
c0012576:	c3                   	ret    
c0012577:	90                   	nop

c0012578 <LogicalDisk::~LogicalDisk()>:
c0012578:	83 ec 0c             	sub    esp,0xc
c001257b:	83 ec 0c             	sub    esp,0xc
c001257e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012582:	e8 cd ff ff ff       	call   c0012554 <LogicalDisk::~LogicalDisk()>
c0012587:	83 c4 10             	add    esp,0x10
c001258a:	83 ec 08             	sub    esp,0x8
c001258d:	68 74 01 00 00       	push   0x174
c0012592:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012596:	e8 5c cb ff ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c001259b:	83 c4 10             	add    esp,0x10
c001259e:	83 c4 0c             	add    esp,0xc
c00125a1:	c3                   	ret    

c00125a2 <LogicalDisk::open(int, int, void*)>:
c00125a2:	83 ec 18             	sub    esp,0x18
c00125a5:	68 28 21 02 c0       	push   0xc0022128
c00125aa:	e8 9d 34 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c00125af:	83 c8 ff             	or     eax,0xffffffff
c00125b2:	83 c4 1c             	add    esp,0x1c
c00125b5:	c3                   	ret    

c00125b6 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00125b6:	53                   	push   ebx
c00125b7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00125bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00125c3:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00125c9:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00125cf:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00125d5:	77 10                	ja     c00125e7 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00125d7:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00125dd:	89 d3                	mov    ebx,edx
c00125df:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00125e5:	72 05                	jb     c00125ec <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00125e7:	83 c8 ff             	or     eax,0xffffffff
c00125ea:	89 c2                	mov    edx,eax
c00125ec:	5b                   	pop    ebx
c00125ed:	c3                   	ret    

c00125ee <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00125ee:	56                   	push   esi
c00125ef:	83 c8 ff             	or     eax,0xffffffff
c00125f2:	53                   	push   ebx
c00125f3:	89 c2                	mov    edx,eax
c00125f5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00125f9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00125fd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012601:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0012607:	77 27                	ja     c0012630 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0012609:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001260f:	89 d8                	mov    eax,ebx
c0012611:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0012617:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001261c:	89 c2                	mov    edx,eax
c001261e:	73 10                	jae    c0012630 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0012620:	89 c8                	mov    eax,ecx
c0012622:	89 da                	mov    edx,ebx
c0012624:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001262a:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0012630:	5b                   	pop    ebx
c0012631:	5e                   	pop    esi
c0012632:	c3                   	ret    
c0012633:	90                   	nop

c0012634 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0012634:	83 ec 1c             	sub    esp,0x1c
c0012637:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001263b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001263f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012643:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012647:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001264b:	89 04 24             	mov    DWORD PTR [esp],eax
c001264e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012652:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012656:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001265a:	83 ec 08             	sub    esp,0x8
c001265d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012661:	50                   	push   eax
c0012662:	e8 bb e1 ff ff       	call   c0010822 <Device::Device(char const*)>
c0012667:	83 c4 10             	add    esp,0x10
c001266a:	ba ac 21 02 c0       	mov    edx,0xc00221ac
c001266f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012673:	89 10                	mov    DWORD PTR [eax],edx
c0012675:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012679:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0012680:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012684:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001268b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001268f:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0012699:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001269d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00126a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00126a5:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00126ab:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00126b1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00126b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00126b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00126bc:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00126c2:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00126c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126cc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00126d0:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00126d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126da:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00126e4:	90                   	nop
c00126e5:	83 c4 1c             	add    esp,0x1c
c00126e8:	c3                   	ret    
c00126e9:	90                   	nop

c00126ea <LogicalDisk::assignDriveLetter()>:
c00126ea:	55                   	push   ebp
c00126eb:	57                   	push   edi
c00126ec:	56                   	push   esi
c00126ed:	53                   	push   ebx
c00126ee:	83 ec 14             	sub    esp,0x14
c00126f1:	8b 3d 80 4d 02 c0    	mov    edi,DWORD PTR ds:0xc0024d80
c00126f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00126fb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00126ff:	8b 3d 84 4d 02 c0    	mov    edi,DWORD PTR ds:0xc0024d84
c0012705:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001270b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001270f:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0012715:	3c 01                	cmp    al,0x1
c0012717:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001271b:	19 c0                	sbb    eax,eax
c001271d:	83 e0 02             	and    eax,0x2
c0012720:	83 c0 41             	add    eax,0x41
c0012723:	0f be e8             	movsx  ebp,al
c0012726:	3c 43                	cmp    al,0x43
c0012728:	75 10                	jne    c001273a <LogicalDisk::assignDriveLetter()+0x50>
c001272a:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0012731:	75 5d                	jne    c0012790 <LogicalDisk::assignDriveLetter()+0xa6>
c0012733:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0012738:	75 56                	jne    c0012790 <LogicalDisk::assignDriveLetter()+0xa6>
c001273a:	8d 75 bf             	lea    esi,[ebp-0x41]
c001273d:	ba 01 00 00 00       	mov    edx,0x1
c0012742:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0012746:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001274a:	d3 e2                	shl    edx,cl
c001274c:	89 d7                	mov    edi,edx
c001274e:	89 d6                	mov    esi,edx
c0012750:	c1 ff 1f             	sar    edi,0x1f
c0012753:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0012757:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001275b:	21 f9                	and    ecx,edi
c001275d:	09 d1                	or     ecx,edx
c001275f:	75 2f                	jne    c0012790 <LogicalDisk::assignDriveLetter()+0xa6>
c0012761:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012765:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0012769:	09 f2                	or     edx,esi
c001276b:	89 15 80 4d 02 c0    	mov    DWORD PTR ds:0xc0024d80,edx
c0012771:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012775:	09 fa                	or     edx,edi
c0012777:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001277b:	89 15 84 4d 02 c0    	mov    DWORD PTR ds:0xc0024d84,edx
c0012781:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0012787:	89 1c bd a0 4d 02 c0 	mov    DWORD PTR [edi*4-0x3ffdb260],ebx
c001278e:	eb 08                	jmp    c0012798 <LogicalDisk::assignDriveLetter()+0xae>
c0012790:	40                   	inc    eax
c0012791:	45                   	inc    ebp
c0012792:	3c 5b                	cmp    al,0x5b
c0012794:	75 90                	jne    c0012726 <LogicalDisk::assignDriveLetter()+0x3c>
c0012796:	31 c0                	xor    eax,eax
c0012798:	83 c4 14             	add    esp,0x14
c001279b:	5b                   	pop    ebx
c001279c:	5e                   	pop    esi
c001279d:	5f                   	pop    edi
c001279e:	5d                   	pop    ebp
c001279f:	c3                   	ret    

c00127a0 <LogicalDisk::mount()>:
c00127a0:	56                   	push   esi
c00127a1:	53                   	push   ebx
c00127a2:	51                   	push   ecx
c00127a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00127a7:	8b 1d 08 49 02 c0    	mov    ebx,DWORD PTR ds:0xc0024908
c00127ad:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00127b7:	85 db                	test   ebx,ebx
c00127b9:	74 50                	je     c001280b <LogicalDisk::mount()+0x6b>
c00127bb:	e8 80 62 00 00       	call   c0018a40 <getIRQNestingLevel()>
c00127c0:	52                   	push   edx
c00127c1:	52                   	push   edx
c00127c2:	50                   	push   eax
c00127c3:	68 4c 21 02 c0       	push   0xc002214c
c00127c8:	e8 50 ca ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c00127cd:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00127d4:	83 c4 0c             	add    esp,0xc
c00127d7:	83 e8 41             	sub    eax,0x41
c00127da:	8b 13                	mov    edx,DWORD PTR [ebx]
c00127dc:	50                   	push   eax
c00127dd:	56                   	push   esi
c00127de:	53                   	push   ebx
c00127df:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00127e2:	83 c4 10             	add    esp,0x10
c00127e5:	84 c0                	test   al,al
c00127e7:	74 08                	je     c00127f1 <LogicalDisk::mount()+0x51>
c00127e9:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00127ef:	eb 1c                	jmp    c001280d <LogicalDisk::mount()+0x6d>
c00127f1:	e8 4a 62 00 00       	call   c0018a40 <getIRQNestingLevel()>
c00127f6:	51                   	push   ecx
c00127f7:	51                   	push   ecx
c00127f8:	50                   	push   eax
c00127f9:	68 67 21 02 c0       	push   0xc0022167
c00127fe:	e8 1a ca ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0012803:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0012806:	83 c4 10             	add    esp,0x10
c0012809:	eb ac                	jmp    c00127b7 <LogicalDisk::mount()+0x17>
c001280b:	31 c0                	xor    eax,eax
c001280d:	5a                   	pop    edx
c001280e:	5b                   	pop    ebx
c001280f:	5e                   	pop    esi
c0012810:	c3                   	ret    
c0012811:	90                   	nop

c0012812 <LogicalDisk::unmount()>:
c0012812:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012816:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0012820:	c3                   	ret    
c0012821:	90                   	nop

c0012822 <LogicalDisk::unassignDriveLetter()>:
c0012822:	57                   	push   edi
c0012823:	56                   	push   esi
c0012824:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012828:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001282f:	84 c9                	test   cl,cl
c0012831:	75 0f                	jne    c0012842 <LogicalDisk::unassignDriveLetter()+0x20>
c0012833:	c7 44 24 0c 82 21 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022182
c001283b:	5e                   	pop    esi
c001283c:	5f                   	pop    edi
c001283d:	e9 0a 32 00 00       	jmp    c0015a4c <Krnl::panic(char const*)>
c0012842:	83 e9 41             	sub    ecx,0x41
c0012845:	b8 01 00 00 00       	mov    eax,0x1
c001284a:	d3 e0                	shl    eax,cl
c001284c:	89 c7                	mov    edi,eax
c001284e:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0012855:	c1 ff 1f             	sar    edi,0x1f
c0012858:	c7 04 8d a0 4d 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdb260],0x0
c0012863:	89 fe                	mov    esi,edi
c0012865:	f7 d6                	not    esi
c0012867:	f7 d0                	not    eax
c0012869:	21 35 84 4d 02 c0    	and    DWORD PTR ds:0xc0024d84,esi
c001286f:	5e                   	pop    esi
c0012870:	21 05 80 4d 02 c0    	and    DWORD PTR ds:0xc0024d80,eax
c0012876:	5f                   	pop    edi
c0012877:	c3                   	ret    

c0012878 <LogicalDisk::read(unsigned long long, int, void*)>:
c0012878:	57                   	push   edi
c0012879:	56                   	push   esi
c001287a:	53                   	push   ebx
c001287b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001287f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012883:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012887:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001288b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0012891:	77 41                	ja     c00128d4 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0012893:	99                   	cdq    
c0012894:	01 c8                	add    eax,ecx
c0012896:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001289c:	11 da                	adc    edx,ebx
c001289e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00128a4:	19 d7                	sbb    edi,edx
c00128a6:	72 33                	jb     c00128db <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00128a8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00128ae:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00128b4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00128b8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00128bc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00128c2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00128c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00128cc:	5b                   	pop    ebx
c00128cd:	5e                   	pop    esi
c00128ce:	5f                   	pop    edi
c00128cf:	e9 9a 09 00 00       	jmp    c001326e <VCache::read(unsigned long long, int, void*)>
c00128d4:	b8 05 00 00 00       	mov    eax,0x5
c00128d9:	eb 05                	jmp    c00128e0 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00128db:	b8 07 00 00 00       	mov    eax,0x7
c00128e0:	5b                   	pop    ebx
c00128e1:	5e                   	pop    esi
c00128e2:	5f                   	pop    edi
c00128e3:	c3                   	ret    

c00128e4 <LogicalDisk::write(unsigned long long, int, void*)>:
c00128e4:	57                   	push   edi
c00128e5:	56                   	push   esi
c00128e6:	53                   	push   ebx
c00128e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00128eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00128ef:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00128f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00128f7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00128fd:	77 41                	ja     c0012940 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00128ff:	99                   	cdq    
c0012900:	01 c8                	add    eax,ecx
c0012902:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0012908:	11 da                	adc    edx,ebx
c001290a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0012910:	19 d7                	sbb    edi,edx
c0012912:	72 33                	jb     c0012947 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0012914:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001291a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0012920:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012924:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0012928:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001292e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012934:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012938:	5b                   	pop    ebx
c0012939:	5e                   	pop    esi
c001293a:	5f                   	pop    edi
c001293b:	e9 4a 08 00 00       	jmp    c001318a <VCache::write(unsigned long long, int, void*)>
c0012940:	b8 05 00 00 00       	mov    eax,0x5
c0012945:	eb 05                	jmp    c001294c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0012947:	b8 07 00 00 00       	mov    eax,0x7
c001294c:	5b                   	pop    ebx
c001294d:	5e                   	pop    esi
c001294e:	5f                   	pop    edi
c001294f:	c3                   	ret    

c0012950 <Mouse::Mouse(char const*)>:
c0012950:	83 ec 0c             	sub    esp,0xc
c0012953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012957:	83 ec 08             	sub    esp,0x8
c001295a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001295e:	50                   	push   eax
c001295f:	e8 be de ff ff       	call   c0010822 <Device::Device(char const*)>
c0012964:	83 c4 10             	add    esp,0x10
c0012967:	ba d8 21 02 c0       	mov    edx,0xc00221d8
c001296c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012970:	89 10                	mov    DWORD PTR [eax],edx
c0012972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012976:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0012980:	90                   	nop
c0012981:	83 c4 0c             	add    esp,0xc
c0012984:	c3                   	ret    
c0012985:	90                   	nop

c0012986 <Mouse::~Mouse()>:
c0012986:	83 ec 0c             	sub    esp,0xc
c0012989:	ba d8 21 02 c0       	mov    edx,0xc00221d8
c001298e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012992:	89 10                	mov    DWORD PTR [eax],edx
c0012994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012998:	83 ec 0c             	sub    esp,0xc
c001299b:	50                   	push   eax
c001299c:	e8 37 db ff ff       	call   c00104d8 <Device::~Device()>
c00129a1:	83 c4 10             	add    esp,0x10
c00129a4:	90                   	nop
c00129a5:	83 c4 0c             	add    esp,0xc
c00129a8:	c3                   	ret    
c00129a9:	90                   	nop

c00129aa <Mouse::~Mouse()>:
c00129aa:	83 ec 0c             	sub    esp,0xc
c00129ad:	83 ec 0c             	sub    esp,0xc
c00129b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129b4:	e8 cd ff ff ff       	call   c0012986 <Mouse::~Mouse()>
c00129b9:	83 c4 10             	add    esp,0x10
c00129bc:	83 ec 08             	sub    esp,0x8
c00129bf:	68 58 01 00 00       	push   0x158
c00129c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129c8:	e8 2a c7 ff ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c00129cd:	83 c4 10             	add    esp,0x10
c00129d0:	83 c4 0c             	add    esp,0xc
c00129d3:	c3                   	ret    

c00129d4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00129d4:	55                   	push   ebp
c00129d5:	57                   	push   edi
c00129d6:	56                   	push   esi
c00129d7:	53                   	push   ebx
c00129d8:	81 ec 28 01 00 00    	sub    esp,0x128
c00129de:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00129e5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00129ec:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00129f3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00129fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00129fe:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012a02:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0012a09:	e8 06 df ff ff       	call   c0010914 <Device::getName()>
c0012a0e:	5a                   	pop    edx
c0012a0f:	59                   	pop    ecx
c0012a10:	50                   	push   eax
c0012a11:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012a15:	55                   	push   ebp
c0012a16:	e8 51 dd fe ff       	call   c000076c <strcpy>
c0012a1b:	5b                   	pop    ebx
c0012a1c:	58                   	pop    eax
c0012a1d:	68 fc 21 02 c0       	push   0xc00221fc
c0012a22:	55                   	push   ebp
c0012a23:	e8 fb dd fe ff       	call   c0000823 <strcat>
c0012a28:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0012a2f:	e8 b4 c6 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c0012a34:	83 c4 0c             	add    esp,0xc
c0012a37:	89 c3                	mov    ebx,eax
c0012a39:	57                   	push   edi
c0012a3a:	56                   	push   esi
c0012a3b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a3f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a43:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0012a4a:	55                   	push   ebp
c0012a4b:	50                   	push   eax
c0012a4c:	e8 e3 fb ff ff       	call   c0012634 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0012a51:	83 c4 14             	add    esp,0x14
c0012a54:	53                   	push   ebx
c0012a55:	e8 90 fc ff ff       	call   c00126ea <LogicalDisk::assignDriveLetter()>
c0012a5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a5d:	e8 3e fd ff ff       	call   c00127a0 <LogicalDisk::mount()>
c0012a62:	58                   	pop    eax
c0012a63:	5a                   	pop    edx
c0012a64:	53                   	push   ebx
c0012a65:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0012a6c:	e8 c1 db ff ff       	call   c0010632 <Device::addChild(Device*)>
c0012a71:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012a77:	5b                   	pop    ebx
c0012a78:	5e                   	pop    esi
c0012a79:	5f                   	pop    edi
c0012a7a:	5d                   	pop    ebp
c0012a7b:	c3                   	ret    

c0012a7c <createPartitionsForDisk(PhysicalDisk*)>:
c0012a7c:	55                   	push   ebp
c0012a7d:	57                   	push   edi
c0012a7e:	56                   	push   esi
c0012a7f:	53                   	push   ebx
c0012a80:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0012a86:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0012a8d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0012a93:	3d 00 02 00 00       	cmp    eax,0x200
c0012a98:	74 27                	je     c0012ac1 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0012a9a:	83 ec 10             	sub    esp,0x10
c0012a9d:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0012aa3:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0012aa9:	99                   	cdq    
c0012aaa:	52                   	push   edx
c0012aab:	0f a4 f7 0a          	shld   edi,esi,0xa
c0012aaf:	50                   	push   eax
c0012ab0:	89 fd                	mov    ebp,edi
c0012ab2:	c1 e6 0a             	shl    esi,0xa
c0012ab5:	55                   	push   ebp
c0012ab6:	56                   	push   esi
c0012ab7:	e8 50 ca 00 00       	call   c001f50c <__udivdi3>
c0012abc:	e9 b1 00 00 00       	jmp    c0012b72 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012ac1:	83 ec 0c             	sub    esp,0xc
c0012ac4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ac6:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0012aca:	56                   	push   esi
c0012acb:	6a 01                	push   0x1
c0012acd:	6a 00                	push   0x0
c0012acf:	6a 00                	push   0x0
c0012ad1:	53                   	push   ebx
c0012ad2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012ad5:	83 c4 20             	add    esp,0x20
c0012ad8:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0012ae0:	75 0a                	jne    c0012aec <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0012ae2:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0012aea:	74 2c                	je     c0012b18 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0012aec:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012af2:	83 ec 10             	sub    esp,0x10
c0012af5:	89 f7                	mov    edi,esi
c0012af7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012afd:	c1 ff 1f             	sar    edi,0x1f
c0012b00:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012b06:	57                   	push   edi
c0012b07:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012b0b:	c1 e0 0a             	shl    eax,0xa
c0012b0e:	56                   	push   esi
c0012b0f:	52                   	push   edx
c0012b10:	50                   	push   eax
c0012b11:	e8 f6 c9 00 00       	call   c001f50c <__udivdi3>
c0012b16:	eb 5a                	jmp    c0012b72 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012b18:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0012b1f:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0012b26:	83 e0 7f             	and    eax,0x7f
c0012b29:	83 e1 7f             	and    ecx,0x7f
c0012b2c:	01 c1                	add    ecx,eax
c0012b2e:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0012b35:	83 e0 7f             	and    eax,0x7f
c0012b38:	01 c1                	add    ecx,eax
c0012b3a:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0012b41:	83 e0 7f             	and    eax,0x7f
c0012b44:	00 c1                	add    cl,al
c0012b46:	74 41                	je     c0012b89 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0012b48:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012b4e:	83 ec 10             	sub    esp,0x10
c0012b51:	89 f7                	mov    edi,esi
c0012b53:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012b59:	c1 ff 1f             	sar    edi,0x1f
c0012b5c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012b62:	57                   	push   edi
c0012b63:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012b67:	c1 e0 0a             	shl    eax,0xa
c0012b6a:	56                   	push   esi
c0012b6b:	52                   	push   edx
c0012b6c:	50                   	push   eax
c0012b6d:	e8 9a c9 00 00       	call   c001f50c <__udivdi3>
c0012b72:	83 c4 14             	add    esp,0x14
c0012b75:	52                   	push   edx
c0012b76:	50                   	push   eax
c0012b77:	6a 00                	push   0x0
c0012b79:	6a 00                	push   0x0
c0012b7b:	53                   	push   ebx
c0012b7c:	e8 53 fe ff ff       	call   c00129d4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012b81:	83 c4 20             	add    esp,0x20
c0012b84:	e9 79 01 00 00       	jmp    c0012d02 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0012b89:	89 f0                	mov    eax,esi
c0012b8b:	31 f6                	xor    esi,esi
c0012b8d:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0012b94:	75 02                	jne    c0012b98 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0012b96:	89 f1                	mov    ecx,esi
c0012b98:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0012b9f:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0012ba6:	c1 e2 08             	shl    edx,0x8
c0012ba9:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0012bb1:	c1 e7 10             	shl    edi,0x10
c0012bb4:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0012bbc:	09 fa                	or     edx,edi
c0012bbe:	83 c0 10             	add    eax,0x10
c0012bc1:	0f b6 b8 b6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b6]
c0012bc8:	09 fa                	or     edx,edi
c0012bca:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0012bd1:	c1 e7 18             	shl    edi,0x18
c0012bd4:	09 fa                	or     edx,edi
c0012bd6:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0012bda:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0012be1:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0012be8:	c1 e7 10             	shl    edi,0x10
c0012beb:	c1 e2 08             	shl    edx,0x8
c0012bee:	09 fa                	or     edx,edi
c0012bf0:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0012bf7:	09 fa                	or     edx,edi
c0012bf9:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0012c00:	c1 e7 18             	shl    edi,0x18
c0012c03:	09 fa                	or     edx,edi
c0012c05:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0012c09:	46                   	inc    esi
c0012c0a:	83 fe 04             	cmp    esi,0x4
c0012c0d:	0f 85 7a ff ff ff    	jne    c0012b8d <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0012c13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c17:	83 f0 01             	xor    eax,0x1
c0012c1a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012c1e:	75 57                	jne    c0012c77 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012c20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c24:	83 f0 01             	xor    eax,0x1
c0012c27:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012c2b:	75 4a                	jne    c0012c77 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012c2d:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012c33:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0012c37:	89 f7                	mov    edi,esi
c0012c39:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012c41:	c1 ff 1f             	sar    edi,0x1f
c0012c44:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012c4c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012c52:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012c58:	57                   	push   edi
c0012c59:	56                   	push   esi
c0012c5a:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012c5e:	c1 e0 0a             	shl    eax,0xa
c0012c61:	52                   	push   edx
c0012c62:	50                   	push   eax
c0012c63:	e8 a4 c8 00 00       	call   c001f50c <__udivdi3>
c0012c68:	83 c4 10             	add    esp,0x10
c0012c6b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012c6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012c73:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0012c77:	84 c9                	test   cl,cl
c0012c79:	74 53                	je     c0012cce <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0012c7b:	0f b6 c9             	movzx  ecx,cl
c0012c7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c82:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012c86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012c8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012c8e:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0012c92:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0012c96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0012c9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012c9e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012ca2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012ca6:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012caa:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0012cae:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0012cb2:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0012cb6:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0012cba:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0012cbe:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012cc2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012cc6:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0012cca:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0012cce:	31 ed                	xor    ebp,ebp
c0012cd0:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0012cd4:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0012cd8:	89 f8                	mov    eax,edi
c0012cda:	09 f0                	or     eax,esi
c0012cdc:	74 1e                	je     c0012cfc <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012cde:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0012ce2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0012ce6:	89 d1                	mov    ecx,edx
c0012ce8:	09 c1                	or     ecx,eax
c0012cea:	74 10                	je     c0012cfc <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012cec:	83 ec 0c             	sub    esp,0xc
c0012cef:	57                   	push   edi
c0012cf0:	56                   	push   esi
c0012cf1:	52                   	push   edx
c0012cf2:	50                   	push   eax
c0012cf3:	53                   	push   ebx
c0012cf4:	e8 db fc ff ff       	call   c00129d4 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012cf9:	83 c4 20             	add    esp,0x20
c0012cfc:	45                   	inc    ebp
c0012cfd:	83 fd 04             	cmp    ebp,0x4
c0012d00:	75 ce                	jne    c0012cd0 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0012d02:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012d08:	5b                   	pop    ebx
c0012d09:	5e                   	pop    esi
c0012d0a:	5f                   	pop    edi
c0012d0b:	5d                   	pop    ebp
c0012d0c:	c3                   	ret    
c0012d0d:	90                   	nop

c0012d0e <Timer::Timer(char const*)>:
c0012d0e:	83 ec 0c             	sub    esp,0xc
c0012d11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d15:	83 ec 08             	sub    esp,0x8
c0012d18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d1c:	50                   	push   eax
c0012d1d:	e8 00 db ff ff       	call   c0010822 <Device::Device(char const*)>
c0012d22:	83 c4 10             	add    esp,0x10
c0012d25:	ba 10 22 02 c0       	mov    edx,0xc0022210
c0012d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d2e:	89 10                	mov    DWORD PTR [eax],edx
c0012d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d34:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0012d3e:	90                   	nop
c0012d3f:	83 c4 0c             	add    esp,0xc
c0012d42:	c3                   	ret    
c0012d43:	90                   	nop

c0012d44 <Timer::~Timer()>:
c0012d44:	83 ec 0c             	sub    esp,0xc
c0012d47:	ba 10 22 02 c0       	mov    edx,0xc0022210
c0012d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d50:	89 10                	mov    DWORD PTR [eax],edx
c0012d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d56:	83 ec 0c             	sub    esp,0xc
c0012d59:	50                   	push   eax
c0012d5a:	e8 79 d7 ff ff       	call   c00104d8 <Device::~Device()>
c0012d5f:	83 c4 10             	add    esp,0x10
c0012d62:	90                   	nop
c0012d63:	83 c4 0c             	add    esp,0xc
c0012d66:	c3                   	ret    
c0012d67:	90                   	nop

c0012d68 <Timer::~Timer()>:
c0012d68:	83 ec 0c             	sub    esp,0xc
c0012d6b:	83 ec 0c             	sub    esp,0xc
c0012d6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d72:	e8 cd ff ff ff       	call   c0012d44 <Timer::~Timer()>
c0012d77:	83 c4 10             	add    esp,0x10
c0012d7a:	83 ec 08             	sub    esp,0x8
c0012d7d:	68 5c 01 00 00       	push   0x15c
c0012d82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d86:	e8 6c c3 ff ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c0012d8b:	83 c4 10             	add    esp,0x10
c0012d8e:	83 c4 0c             	add    esp,0xc
c0012d91:	c3                   	ret    

c0012d92 <Timer::read()>:
c0012d92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d96:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012d9c:	c3                   	ret    

c0012d9d <timerHandler(unsigned long long)>:
c0012d9d:	55                   	push   ebp
c0012d9e:	57                   	push   edi
c0012d9f:	56                   	push   esi
c0012da0:	53                   	push   ebx
c0012da1:	83 ec 0c             	sub    esp,0xc
c0012da4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012da8:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012dac:	01 35 10 4e 02 c0    	add    DWORD PTR ds:0xc0024e10,esi
c0012db2:	11 3d 14 4e 02 c0    	adc    DWORD PTR ds:0xc0024e14,edi
c0012db8:	80 3d ad 47 02 c0 00 	cmp    BYTE PTR ds:0xc00247ad,0x0
c0012dbf:	0f 84 07 01 00 00    	je     c0012ecc <timerHandler(unsigned long long)+0x12f>
c0012dc5:	e8 b2 5c 00 00       	call   c0018a7c <lockStuff()>
c0012dca:	83 ec 0c             	sub    esp,0xc
c0012dcd:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012dd2:	e8 09 ce 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012dd7:	c7 04 24 dc 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bdc
c0012dde:	89 c3                	mov    ebx,eax
c0012de0:	e8 03 ce 00 00       	call   c001fbe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012de5:	83 c4 10             	add    esp,0x10
c0012de8:	84 c0                	test   al,al
c0012dea:	74 60                	je     c0012e4c <timerHandler(unsigned long long)+0xaf>
c0012dec:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012df2:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0012df5:	85 c0                	test   eax,eax
c0012df7:	0f 85 91 00 00 00    	jne    c0012e8e <timerHandler(unsigned long long)+0xf1>
c0012dfd:	e9 be 00 00 00       	jmp    c0012ec0 <timerHandler(unsigned long long)+0x123>
c0012e02:	83 ec 0c             	sub    esp,0xc
c0012e05:	55                   	push   ebp
c0012e06:	e8 6e 62 00 00       	call   c0019079 <unblockTask(ThreadControlBlock*)>
c0012e0b:	83 c4 10             	add    esp,0x10
c0012e0e:	39 eb                	cmp    ebx,ebp
c0012e10:	75 12                	jne    c0012e24 <timerHandler(unsigned long long)+0x87>
c0012e12:	83 ec 0c             	sub    esp,0xc
c0012e15:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012e1a:	e8 c1 cd 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e1f:	89 c3                	mov    ebx,eax
c0012e21:	83 c4 10             	add    esp,0x10
c0012e24:	83 ec 0c             	sub    esp,0xc
c0012e27:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012e2c:	e8 b7 cd 00 00       	call   c001fbe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012e31:	83 c4 10             	add    esp,0x10
c0012e34:	84 c0                	test   al,al
c0012e36:	75 b4                	jne    c0012dec <timerHandler(unsigned long long)+0x4f>
c0012e38:	83 ec 0c             	sub    esp,0xc
c0012e3b:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012e40:	e8 9b cd 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e45:	83 c4 10             	add    esp,0x10
c0012e48:	39 d8                	cmp    eax,ebx
c0012e4a:	74 a0                	je     c0012dec <timerHandler(unsigned long long)+0x4f>
c0012e4c:	83 ec 0c             	sub    esp,0xc
c0012e4f:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012e54:	e8 87 cd 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e59:	89 c5                	mov    ebp,eax
c0012e5b:	c7 04 24 dc 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bdc
c0012e62:	e8 9d cd 00 00       	call   c001fc04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012e67:	83 c4 10             	add    esp,0x10
c0012e6a:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0012e6d:	a1 14 4e 02 c0       	mov    eax,ds:0xc0024e14
c0012e72:	39 15 10 4e 02 c0    	cmp    DWORD PTR ds:0xc0024e10,edx
c0012e78:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0012e7b:	19 c8                	sbb    eax,ecx
c0012e7d:	73 83                	jae    c0012e02 <timerHandler(unsigned long long)+0x65>
c0012e7f:	50                   	push   eax
c0012e80:	50                   	push   eax
c0012e81:	55                   	push   ebp
c0012e82:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012e87:	e8 26 ce 00 00       	call   c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012e8c:	eb 93                	jmp    c0012e21 <timerHandler(unsigned long long)+0x84>
c0012e8e:	80 3d ac 47 02 c0 00 	cmp    BYTE PTR ds:0xc00247ac,0x0
c0012e95:	74 29                	je     c0012ec0 <timerHandler(unsigned long long)+0x123>
c0012e97:	39 c6                	cmp    esi,eax
c0012e99:	bb 00 00 00 00       	mov    ebx,0x0
c0012e9e:	19 df                	sbb    edi,ebx
c0012ea0:	72 19                	jb     c0012ebb <timerHandler(unsigned long long)+0x11e>
c0012ea2:	e8 ae 5b 00 00       	call   c0018a55 <lockScheduler()>
c0012ea7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012eac:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0012eaf:	e8 ea 5e 00 00       	call   c0018d9e <schedule()>
c0012eb4:	e8 9e 5b 00 00       	call   c0018a57 <unlockScheduler()>
c0012eb9:	eb 05                	jmp    c0012ec0 <timerHandler(unsigned long long)+0x123>
c0012ebb:	29 f0                	sub    eax,esi
c0012ebd:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0012ec0:	83 c4 0c             	add    esp,0xc
c0012ec3:	5b                   	pop    ebx
c0012ec4:	5e                   	pop    esi
c0012ec5:	5f                   	pop    edi
c0012ec6:	5d                   	pop    ebp
c0012ec7:	e9 57 5f 00 00       	jmp    c0018e23 <unlockStuff()>
c0012ecc:	83 c4 0c             	add    esp,0xc
c0012ecf:	5b                   	pop    ebx
c0012ed0:	5e                   	pop    esi
c0012ed1:	5f                   	pop    edi
c0012ed2:	5d                   	pop    ebp
c0012ed3:	c3                   	ret    

c0012ed4 <setupTimer(int)>:
c0012ed4:	57                   	push   edi
c0012ed5:	56                   	push   esi
c0012ed6:	53                   	push   ebx
c0012ed7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012edb:	e8 fd 19 00 00       	call   c00148dd <getCPUNumber()>
c0012ee0:	85 c0                	test   eax,eax
c0012ee2:	74 32                	je     c0012f16 <setupTimer(int)+0x42>
c0012ee4:	83 ec 0c             	sub    esp,0xc
c0012ee7:	68 60 01 00 00       	push   0x160
c0012eec:	e8 f7 c1 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c0012ef1:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ef4:	89 c3                	mov    ebx,eax
c0012ef6:	e8 a7 c0 00 00       	call   c001efa2 <APICTimer::APICTimer()>
c0012efb:	6a 00                	push   0x0
c0012efd:	6a 00                	push   0x0
c0012eff:	56                   	push   esi
c0012f00:	53                   	push   ebx
c0012f01:	e8 96 bf 00 00       	call   c001ee9c <APICTimer::open(int, int, void*)>
c0012f06:	83 c4 20             	add    esp,0x20
c0012f09:	e8 d2 19 00 00       	call   c00148e0 <thisCPU()>
c0012f0e:	56                   	push   esi
c0012f0f:	56                   	push   esi
c0012f10:	53                   	push   ebx
c0012f11:	e9 96 00 00 00       	jmp    c0012fac <setupTimer(int)+0xd8>
c0012f16:	e8 c5 19 00 00       	call   c00148e0 <thisCPU()>
c0012f1b:	83 ec 0c             	sub    esp,0xc
c0012f1e:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012f24:	e8 eb d9 ff ff       	call   c0010914 <Device::getName()>
c0012f29:	83 c4 10             	add    esp,0x10
c0012f2c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0012f2f:	0f 85 87 00 00 00    	jne    c0012fbc <setupTimer(int)+0xe8>
c0012f35:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0012f3a:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0012f41:	74 79                	je     c0012fbc <setupTimer(int)+0xe8>
c0012f43:	83 ec 0c             	sub    esp,0xc
c0012f46:	68 5c 01 00 00       	push   0x15c
c0012f4b:	e8 98 c1 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c0012f50:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f53:	89 c3                	mov    ebx,eax
c0012f55:	e8 a4 c1 00 00       	call   c001f0fe <PIT::PIT()>
c0012f5a:	59                   	pop    ecx
c0012f5b:	5f                   	pop    edi
c0012f5c:	53                   	push   ebx
c0012f5d:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c0012f63:	e8 ca d6 ff ff       	call   c0010632 <Device::addChild(Device*)>
c0012f68:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f6a:	6a 00                	push   0x0
c0012f6c:	6a 00                	push   0x0
c0012f6e:	56                   	push   esi
c0012f6f:	53                   	push   ebx
c0012f70:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f73:	83 c4 14             	add    esp,0x14
c0012f76:	68 60 01 00 00       	push   0x160
c0012f7b:	e8 68 c1 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c0012f80:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f83:	89 c7                	mov    edi,eax
c0012f85:	e8 18 c0 00 00       	call   c001efa2 <APICTimer::APICTimer()>
c0012f8a:	6a 00                	push   0x0
c0012f8c:	6a 00                	push   0x0
c0012f8e:	56                   	push   esi
c0012f8f:	57                   	push   edi
c0012f90:	e8 07 bf 00 00       	call   c001ee9c <APICTimer::open(int, int, void*)>
c0012f95:	83 c4 20             	add    esp,0x20
c0012f98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f9a:	6a 00                	push   0x0
c0012f9c:	6a 00                	push   0x0
c0012f9e:	6a 00                	push   0x0
c0012fa0:	53                   	push   ebx
c0012fa1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012fa4:	e8 37 19 00 00       	call   c00148e0 <thisCPU()>
c0012fa9:	5a                   	pop    edx
c0012faa:	59                   	pop    ecx
c0012fab:	57                   	push   edi
c0012fac:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012fb2:	e8 7b d6 ff ff       	call   c0010632 <Device::addChild(Device*)>
c0012fb7:	83 c4 10             	add    esp,0x10
c0012fba:	eb 33                	jmp    c0012fef <setupTimer(int)+0x11b>
c0012fbc:	83 ec 0c             	sub    esp,0xc
c0012fbf:	68 5c 01 00 00       	push   0x15c
c0012fc4:	e8 1f c1 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c0012fc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0012fcc:	89 c3                	mov    ebx,eax
c0012fce:	e8 2b c1 00 00       	call   c001f0fe <PIT::PIT()>
c0012fd3:	58                   	pop    eax
c0012fd4:	5a                   	pop    edx
c0012fd5:	53                   	push   ebx
c0012fd6:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c0012fdc:	e8 51 d6 ff ff       	call   c0010632 <Device::addChild(Device*)>
c0012fe1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fe3:	6a 00                	push   0x0
c0012fe5:	6a 00                	push   0x0
c0012fe7:	56                   	push   esi
c0012fe8:	53                   	push   ebx
c0012fe9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012fec:	83 c4 20             	add    esp,0x20
c0012fef:	89 d8                	mov    eax,ebx
c0012ff1:	5b                   	pop    ebx
c0012ff2:	5e                   	pop    esi
c0012ff3:	5f                   	pop    edi
c0012ff4:	c3                   	ret    
c0012ff5:	90                   	nop

c0012ff6 <VCache::VCache(PhysicalDisk*)>:
c0012ff6:	53                   	push   ebx
c0012ff7:	83 ec 08             	sub    esp,0x8
c0012ffa:	ba 40 22 02 c0       	mov    edx,0xc0022240
c0012fff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013003:	89 10                	mov    DWORD PTR [eax],edx
c0013005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013009:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0013010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013014:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001301b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001301f:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0013026:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001302d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013031:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0013038:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001303f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013043:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001304a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001304e:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0013052:	83 ec 0c             	sub    esp,0xc
c0013055:	6a 10                	push   0x10
c0013057:	e8 8c c0 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c001305c:	83 c4 10             	add    esp,0x10
c001305f:	89 c3                	mov    ebx,eax
c0013061:	83 ec 0c             	sub    esp,0xc
c0013064:	53                   	push   ebx
c0013065:	e8 0e 5b 00 00       	call   c0018b78 <Mutex::Mutex()>
c001306a:	83 c4 10             	add    esp,0x10
c001306d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013071:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0013074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013078:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001307c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001307f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013083:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001308a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001308e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0013094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013098:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001309b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001309f:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00130a5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00130ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00130af:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00130b2:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00130b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130b9:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00130bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00130c1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00130c7:	c1 e0 06             	shl    eax,0x6
c00130ca:	83 ec 0c             	sub    esp,0xc
c00130cd:	50                   	push   eax
c00130ce:	e8 18 8f ff ff       	call   c000bfeb <malloc>
c00130d3:	83 c4 10             	add    esp,0x10
c00130d6:	89 c2                	mov    edx,eax
c00130d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130dc:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00130df:	90                   	nop
c00130e0:	83 c4 08             	add    esp,0x8
c00130e3:	5b                   	pop    ebx
c00130e4:	c3                   	ret    
c00130e5:	90                   	nop

c00130e6 <VCache::writeWriteBuffer()>:
c00130e6:	53                   	push   ebx
c00130e7:	83 ec 14             	sub    esp,0x14
c00130ea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00130ee:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00130f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00130f3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00130f6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00130f9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00130fc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00130ff:	50                   	push   eax
c0013100:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0013103:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001310a:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0013111:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0013115:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001311c:	83 c4 28             	add    esp,0x28
c001311f:	5b                   	pop    ebx
c0013120:	c3                   	ret    
c0013121:	90                   	nop

c0013122 <VCache::~VCache()>:
c0013122:	83 ec 0c             	sub    esp,0xc
c0013125:	ba 40 22 02 c0       	mov    edx,0xc0022240
c001312a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001312e:	89 10                	mov    DWORD PTR [eax],edx
c0013130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013134:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0013137:	84 c0                	test   al,al
c0013139:	74 0f                	je     c001314a <VCache::~VCache()+0x28>
c001313b:	83 ec 0c             	sub    esp,0xc
c001313e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013142:	e8 9f ff ff ff       	call   c00130e6 <VCache::writeWriteBuffer()>
c0013147:	83 c4 10             	add    esp,0x10
c001314a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001314e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013151:	83 ec 0c             	sub    esp,0xc
c0013154:	50                   	push   eax
c0013155:	e8 a1 8e ff ff       	call   c000bffb <free>
c001315a:	83 c4 10             	add    esp,0x10
c001315d:	90                   	nop
c001315e:	83 c4 0c             	add    esp,0xc
c0013161:	c3                   	ret    

c0013162 <VCache::~VCache()>:
c0013162:	83 ec 0c             	sub    esp,0xc
c0013165:	83 ec 0c             	sub    esp,0xc
c0013168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001316c:	e8 b1 ff ff ff       	call   c0013122 <VCache::~VCache()>
c0013171:	83 c4 10             	add    esp,0x10
c0013174:	83 ec 08             	sub    esp,0x8
c0013177:	6a 30                	push   0x30
c0013179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001317d:	e8 75 bf ff ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c0013182:	83 c4 10             	add    esp,0x10
c0013185:	83 c4 0c             	add    esp,0xc
c0013188:	c3                   	ret    
c0013189:	90                   	nop

c001318a <VCache::write(unsigned long long, int, void*)>:
c001318a:	55                   	push   ebp
c001318b:	57                   	push   edi
c001318c:	56                   	push   esi
c001318d:	53                   	push   ebx
c001318e:	83 ec 28             	sub    esp,0x28
c0013191:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013195:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0013199:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001319d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00131a1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00131a4:	e8 3d 5e 00 00       	call   c0018fe6 <Semaphore::acquire()>
c00131a9:	83 c4 10             	add    esp,0x10
c00131ac:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00131b0:	74 66                	je     c0013218 <VCache::write(unsigned long long, int, void*)+0x8e>
c00131b2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00131b5:	99                   	cdq    
c00131b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00131ba:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00131bd:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00131c0:	89 c1                	mov    ecx,eax
c00131c2:	31 f1                	xor    ecx,esi
c00131c4:	89 d0                	mov    eax,edx
c00131c6:	31 f8                	xor    eax,edi
c00131c8:	89 ca                	mov    edx,ecx
c00131ca:	09 c2                	or     edx,eax
c00131cc:	75 3e                	jne    c001320c <VCache::write(unsigned long long, int, void*)+0x82>
c00131ce:	83 fd 01             	cmp    ebp,0x1
c00131d1:	75 39                	jne    c001320c <VCache::write(unsigned long long, int, void*)+0x82>
c00131d3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00131d6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00131dc:	51                   	push   ecx
c00131dd:	50                   	push   eax
c00131de:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00131e2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00131e6:	0f af c8             	imul   ecx,eax
c00131e9:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00131ec:	51                   	push   ecx
c00131ed:	e8 a5 d4 fe ff       	call   c0000697 <memcpy>
c00131f2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00131f5:	83 c4 10             	add    esp,0x10
c00131f8:	40                   	inc    eax
c00131f9:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00131fc:	83 f8 40             	cmp    eax,0x40
c00131ff:	75 57                	jne    c0013258 <VCache::write(unsigned long long, int, void*)+0xce>
c0013201:	83 ec 0c             	sub    esp,0xc
c0013204:	53                   	push   ebx
c0013205:	e8 dc fe ff ff       	call   c00130e6 <VCache::writeWriteBuffer()>
c001320a:	eb 34                	jmp    c0013240 <VCache::write(unsigned long long, int, void*)+0xb6>
c001320c:	83 ec 0c             	sub    esp,0xc
c001320f:	53                   	push   ebx
c0013210:	e8 d1 fe ff ff       	call   c00130e6 <VCache::writeWriteBuffer()>
c0013215:	83 c4 10             	add    esp,0x10
c0013218:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001321b:	83 fd 3f             	cmp    ebp,0x3f
c001321e:	7f 25                	jg     c0013245 <VCache::write(unsigned long long, int, void*)+0xbb>
c0013220:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0013223:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0013226:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0013229:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001322d:	52                   	push   edx
c001322e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013234:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0013238:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001323b:	e8 57 d4 fe ff       	call   c0000697 <memcpy>
c0013240:	83 c4 10             	add    esp,0x10
c0013243:	eb 13                	jmp    c0013258 <VCache::write(unsigned long long, int, void*)+0xce>
c0013245:	83 ec 0c             	sub    esp,0xc
c0013248:	8b 10                	mov    edx,DWORD PTR [eax]
c001324a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001324e:	55                   	push   ebp
c001324f:	57                   	push   edi
c0013250:	56                   	push   esi
c0013251:	50                   	push   eax
c0013252:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0013255:	83 c4 20             	add    esp,0x20
c0013258:	83 ec 0c             	sub    esp,0xc
c001325b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001325e:	e8 0f 63 00 00       	call   c0019572 <Semaphore::release()>
c0013263:	83 c4 2c             	add    esp,0x2c
c0013266:	5b                   	pop    ebx
c0013267:	31 c0                	xor    eax,eax
c0013269:	5e                   	pop    esi
c001326a:	5f                   	pop    edi
c001326b:	5d                   	pop    ebp
c001326c:	c3                   	ret    
c001326d:	90                   	nop

c001326e <VCache::read(unsigned long long, int, void*)>:
c001326e:	57                   	push   edi
c001326f:	56                   	push   esi
c0013270:	53                   	push   ebx
c0013271:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013275:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013279:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001327d:	83 ec 0c             	sub    esp,0xc
c0013280:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013283:	e8 5e 5d 00 00       	call   c0018fe6 <Semaphore::acquire()>
c0013288:	83 c4 10             	add    esp,0x10
c001328b:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001328f:	74 0c                	je     c001329d <VCache::read(unsigned long long, int, void*)+0x2f>
c0013291:	83 ec 0c             	sub    esp,0xc
c0013294:	53                   	push   ebx
c0013295:	e8 4c fe ff ff       	call   c00130e6 <VCache::writeWriteBuffer()>
c001329a:	83 c4 10             	add    esp,0x10
c001329d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00132a0:	83 ec 0c             	sub    esp,0xc
c00132a3:	8b 10                	mov    edx,DWORD PTR [eax]
c00132a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132ad:	57                   	push   edi
c00132ae:	56                   	push   esi
c00132af:	50                   	push   eax
c00132b0:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00132b3:	83 c4 14             	add    esp,0x14
c00132b6:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00132b9:	e8 b4 62 00 00       	call   c0019572 <Semaphore::release()>
c00132be:	83 c4 10             	add    esp,0x10
c00132c1:	5b                   	pop    ebx
c00132c2:	31 c0                	xor    eax,eax
c00132c4:	5e                   	pop    esi
c00132c5:	5f                   	pop    edi
c00132c6:	c3                   	ret    
c00132c7:	90                   	nop

c00132c8 <Video::putrect(int, int, int, int, unsigned int)>:
c00132c8:	55                   	push   ebp
c00132c9:	57                   	push   edi
c00132ca:	56                   	push   esi
c00132cb:	53                   	push   ebx
c00132cc:	83 ec 1c             	sub    esp,0x1c
c00132cf:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00132d3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00132d7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00132db:	01 e8                	add    eax,ebp
c00132dd:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00132e1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00132e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00132e9:	01 df                	add    edi,ebx
c00132eb:	39 fb                	cmp    ebx,edi
c00132ed:	7d 1b                	jge    c001330a <Video::putrect(int, int, int, int, unsigned int)+0x42>
c00132ef:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00132f3:	7d 12                	jge    c0013307 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c00132f5:	8b 16                	mov    edx,DWORD PTR [esi]
c00132f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00132fb:	53                   	push   ebx
c00132fc:	55                   	push   ebp
c00132fd:	45                   	inc    ebp
c00132fe:	56                   	push   esi
c00132ff:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013302:	83 c4 10             	add    esp,0x10
c0013305:	eb e8                	jmp    c00132ef <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0013307:	43                   	inc    ebx
c0013308:	eb e1                	jmp    c00132eb <Video::putrect(int, int, int, int, unsigned int)+0x23>
c001330a:	83 c4 1c             	add    esp,0x1c
c001330d:	5b                   	pop    ebx
c001330e:	5e                   	pop    esi
c001330f:	5f                   	pop    edi
c0013310:	5d                   	pop    ebp
c0013311:	c3                   	ret    

c0013312 <Video::blit(unsigned int*, int, int, int, int)>:
c0013312:	55                   	push   ebp
c0013313:	57                   	push   edi
c0013314:	56                   	push   esi
c0013315:	53                   	push   ebx
c0013316:	83 ec 1c             	sub    esp,0x1c
c0013319:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001331d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013321:	85 c0                	test   eax,eax
c0013323:	79 02                	jns    c0013327 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0013325:	31 c0                	xor    eax,eax
c0013327:	c1 e0 02             	shl    eax,0x2
c001332a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001332e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013332:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013336:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001333a:	39 d8                	cmp    eax,ebx
c001333c:	7e 49                	jle    c0013387 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001333e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0013344:	7c 41                	jl     c0013387 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0013346:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001334a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001334e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013352:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0013356:	39 f9                	cmp    ecx,edi
c0013358:	7e 22                	jle    c001337c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001335a:	83 c5 04             	add    ebp,0x4
c001335d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0013363:	7c 14                	jl     c0013379 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0013365:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013367:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001336a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001336e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013372:	56                   	push   esi
c0013373:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0013376:	83 c4 10             	add    esp,0x10
c0013379:	47                   	inc    edi
c001337a:	eb d2                	jmp    c001334e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001337c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013380:	43                   	inc    ebx
c0013381:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0013385:	eb ab                	jmp    c0013332 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0013387:	83 c4 1c             	add    esp,0x1c
c001338a:	5b                   	pop    ebx
c001338b:	5e                   	pop    esi
c001338c:	5f                   	pop    edi
c001338d:	5d                   	pop    ebp
c001338e:	c3                   	ret    
c001338f:	90                   	nop

c0013390 <Video::clearScreen(unsigned int)>:
c0013390:	57                   	push   edi
c0013391:	56                   	push   esi
c0013392:	53                   	push   ebx
c0013393:	31 db                	xor    ebx,ebx
c0013395:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013399:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001339f:	7e 1f                	jle    c00133c0 <Video::clearScreen(unsigned int)+0x30>
c00133a1:	31 ff                	xor    edi,edi
c00133a3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00133a9:	7e 12                	jle    c00133bd <Video::clearScreen(unsigned int)+0x2d>
c00133ab:	8b 06                	mov    eax,DWORD PTR [esi]
c00133ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00133b1:	53                   	push   ebx
c00133b2:	57                   	push   edi
c00133b3:	47                   	inc    edi
c00133b4:	56                   	push   esi
c00133b5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00133b8:	83 c4 10             	add    esp,0x10
c00133bb:	eb e6                	jmp    c00133a3 <Video::clearScreen(unsigned int)+0x13>
c00133bd:	43                   	inc    ebx
c00133be:	eb d9                	jmp    c0013399 <Video::clearScreen(unsigned int)+0x9>
c00133c0:	5b                   	pop    ebx
c00133c1:	5e                   	pop    esi
c00133c2:	5f                   	pop    edi
c00133c3:	c3                   	ret    

c00133c4 <Video::putpixel(int, int, unsigned int)>:
c00133c4:	c7 44 24 04 48 22 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022248
c00133cc:	e9 4c be ff ff       	jmp    c000f21d <Dbg::kprintf(char const*, ...)>
c00133d1:	90                   	nop

c00133d2 <Video::Video(char const*)>:
c00133d2:	83 ec 0c             	sub    esp,0xc
c00133d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133d9:	83 ec 08             	sub    esp,0x8
c00133dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133e0:	50                   	push   eax
c00133e1:	e8 3c d4 ff ff       	call   c0010822 <Device::Device(char const*)>
c00133e6:	83 c4 10             	add    esp,0x10
c00133e9:	ba 60 22 02 c0       	mov    edx,0xc0022260
c00133ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f2:	89 10                	mov    DWORD PTR [eax],edx
c00133f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0013402:	90                   	nop
c0013403:	83 c4 0c             	add    esp,0xc
c0013406:	c3                   	ret    
c0013407:	90                   	nop

c0013408 <Video::~Video()>:
c0013408:	83 ec 0c             	sub    esp,0xc
c001340b:	ba 60 22 02 c0       	mov    edx,0xc0022260
c0013410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013414:	89 10                	mov    DWORD PTR [eax],edx
c0013416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001341a:	83 ec 0c             	sub    esp,0xc
c001341d:	50                   	push   eax
c001341e:	e8 b5 d0 ff ff       	call   c00104d8 <Device::~Device()>
c0013423:	83 c4 10             	add    esp,0x10
c0013426:	90                   	nop
c0013427:	83 c4 0c             	add    esp,0xc
c001342a:	c3                   	ret    
c001342b:	90                   	nop

c001342c <Video::~Video()>:
c001342c:	83 ec 0c             	sub    esp,0xc
c001342f:	83 ec 0c             	sub    esp,0xc
c0013432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013436:	e8 cd ff ff ff       	call   c0013408 <Video::~Video()>
c001343b:	83 c4 10             	add    esp,0x10
c001343e:	83 ec 08             	sub    esp,0x8
c0013441:	68 64 01 00 00       	push   0x164
c0013446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001344a:	e8 a8 bc ff ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c001344f:	83 c4 10             	add    esp,0x10
c0013452:	83 c4 0c             	add    esp,0xc
c0013455:	c3                   	ret    

c0013456 <Video::isMonochrome()>:
c0013456:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001345a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0013460:	c3                   	ret    
c0013461:	90                   	nop

c0013462 <Video::getWidth()>:
c0013462:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013466:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001346c:	c3                   	ret    
c001346d:	90                   	nop

c001346e <Video::getHeight()>:
c001346e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013472:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013478:	c3                   	ret    
c0013479:	90                   	nop

c001347a <Video::drawCursor(int, int, unsigned char*, int)>:
c001347a:	55                   	push   ebp
c001347b:	57                   	push   edi
c001347c:	56                   	push   esi
c001347d:	53                   	push   ebx
c001347e:	83 ec 2c             	sub    esp,0x2c
c0013481:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013485:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0013489:	83 f8 01             	cmp    eax,0x1
c001348c:	19 c9                	sbb    ecx,ecx
c001348e:	31 db                	xor    ebx,ebx
c0013490:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0013494:	89 cd                	mov    ebp,ecx
c0013496:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001349e:	f7 d5                	not    ebp
c00134a0:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00134a6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00134aa:	01 d8                	add    eax,ebx
c00134ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00134b0:	56                   	push   esi
c00134b1:	e8 b8 ff ff ff       	call   c001346e <Video::getHeight()>
c00134b6:	59                   	pop    ecx
c00134b7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00134bb:	7e 70                	jle    c001352d <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00134bd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00134c1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00134c5:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00134c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00134cc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00134d0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00134d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00134db:	89 f8                	mov    eax,edi
c00134dd:	83 c0 20             	add    eax,0x20
c00134e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134e4:	56                   	push   esi
c00134e5:	e8 78 ff ff ff       	call   c0013462 <Video::getWidth()>
c00134ea:	5a                   	pop    edx
c00134eb:	39 c7                	cmp    edi,eax
c00134ed:	7d 34                	jge    c0013523 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00134ef:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00134f4:	74 05                	je     c00134fb <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00134f6:	8b 06                	mov    eax,DWORD PTR [esi]
c00134f8:	55                   	push   ebp
c00134f9:	eb 0d                	jmp    c0013508 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00134fb:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0013500:	74 12                	je     c0013514 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0013502:	8b 06                	mov    eax,DWORD PTR [esi]
c0013504:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013508:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001350c:	57                   	push   edi
c001350d:	56                   	push   esi
c001350e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013511:	83 c4 10             	add    esp,0x10
c0013514:	47                   	inc    edi
c0013515:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0013519:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001351d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013521:	75 c1                	jne    c00134e4 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0013523:	43                   	inc    ebx
c0013524:	83 fb 20             	cmp    ebx,0x20
c0013527:	0f 85 79 ff ff ff    	jne    c00134a6 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001352d:	83 c4 2c             	add    esp,0x2c
c0013530:	5b                   	pop    ebx
c0013531:	5e                   	pop    esi
c0013532:	5f                   	pop    edi
c0013533:	5d                   	pop    ebp
c0013534:	c3                   	ret    
c0013535:	90                   	nop

c0013536 <ACPI::close(int, int, void*)>:
c0013536:	83 ec 1c             	sub    esp,0x1c
c0013539:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0013541:	74 0a                	je     c001354d <ACPI::close(int, int, void*)+0x17>
c0013543:	b8 00 00 00 00       	mov    eax,0x0
c0013548:	e9 9e 00 00 00       	jmp    c00135eb <ACPI::close(int, int, void*)+0xb5>
c001354d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0013552:	75 37                	jne    c001358b <ACPI::close(int, int, void*)+0x55>
c0013554:	83 ec 0c             	sub    esp,0xc
c0013557:	68 98 22 02 c0       	push   0xc0022298
c001355c:	e8 bc bc ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0013561:	83 c4 10             	add    esp,0x10
c0013564:	a1 28 4e 02 c0       	mov    eax,ds:0xc0024e28
c0013569:	85 c0                	test   eax,eax
c001356b:	74 07                	je     c0013574 <ACPI::close(int, int, void*)+0x3e>
c001356d:	a1 28 4e 02 c0       	mov    eax,ds:0xc0024e28
c0013572:	ff d0                	call   eax
c0013574:	83 ec 0c             	sub    esp,0xc
c0013577:	68 6c 23 02 c0       	push   0xc002236c
c001357c:	e8 cb 24 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c0013581:	83 c4 10             	add    esp,0x10
c0013584:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013589:	eb 60                	jmp    c00135eb <ACPI::close(int, int, void*)+0xb5>
c001358b:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0013590:	75 54                	jne    c00135e6 <ACPI::close(int, int, void*)+0xb0>
c0013592:	a1 24 4e 02 c0       	mov    eax,ds:0xc0024e24
c0013597:	85 c0                	test   eax,eax
c0013599:	74 07                	je     c00135a2 <ACPI::close(int, int, void*)+0x6c>
c001359b:	a1 24 4e 02 c0       	mov    eax,ds:0xc0024e24
c00135a0:	ff d0                	call   eax
c00135a2:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00135a7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00135ab:	25 ff 00 00 00       	and    eax,0xff
c00135b0:	83 e0 02             	and    eax,0x2
c00135b3:	74 1c                	je     c00135d1 <ACPI::close(int, int, void*)+0x9b>
c00135b5:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00135bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135c0:	89 c2                	mov    edx,eax
c00135c2:	ec                   	in     al,dx
c00135c3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00135c7:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00135cb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00135cf:	eb d6                	jmp    c00135a7 <ACPI::close(int, int, void*)+0x71>
c00135d1:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00135d8:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00135dd:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00135e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00135e5:	ee                   	out    dx,al
c00135e6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00135eb:	83 c4 1c             	add    esp,0x1c
c00135ee:	c3                   	ret    

c00135ef <findRSDP()>:
c00135ef:	83 ec 1c             	sub    esp,0x1c
c00135f2:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c00135f7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00135fd:	83 e0 04             	and    eax,0x4
c0013600:	84 c0                	test   al,al
c0013602:	75 07                	jne    c001360b <findRSDP()+0x1c>
c0013604:	b8 00 00 00 00       	mov    eax,0x0
c0013609:	eb 6a                	jmp    c0013675 <findRSDP()+0x86>
c001360b:	a1 f0 47 02 c0       	mov    eax,ds:0xc00247f0
c0013610:	3d ff 07 00 00       	cmp    eax,0x7ff
c0013615:	7f 1b                	jg     c0013632 <findRSDP()+0x43>
c0013617:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001361c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013622:	83 e2 fb             	and    edx,0xfffffffb
c0013625:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001362b:	b8 00 00 00 00       	mov    eax,0x0
c0013630:	eb 43                	jmp    c0013675 <findRSDP()+0x86>
c0013632:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001363a:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0013642:	77 2c                	ja     c0013670 <findRSDP()+0x81>
c0013644:	83 ec 04             	sub    esp,0x4
c0013647:	6a 08                	push   0x8
c0013649:	68 a5 22 02 c0       	push   0xc00222a5
c001364e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013652:	e8 dd cf fe ff       	call   c0000634 <memcmp>
c0013657:	83 c4 10             	add    esp,0x10
c001365a:	85 c0                	test   eax,eax
c001365c:	0f 94 c0             	sete   al
c001365f:	84 c0                	test   al,al
c0013661:	74 06                	je     c0013669 <findRSDP()+0x7a>
c0013663:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013667:	eb 0c                	jmp    c0013675 <findRSDP()+0x86>
c0013669:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001366e:	eb ca                	jmp    c001363a <findRSDP()+0x4b>
c0013670:	b8 00 00 00 00       	mov    eax,0x0
c0013675:	83 c4 1c             	add    esp,0x1c
c0013678:	c3                   	ret    

c0013679 <loadACPITables(unsigned char*)>:
c0013679:	56                   	push   esi
c001367a:	53                   	push   ebx
c001367b:	83 ec 44             	sub    esp,0x44
c001367e:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013683:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013689:	83 e0 04             	and    eax,0x4
c001368c:	84 c0                	test   al,al
c001368e:	0f 84 05 02 00 00    	je     c0013899 <loadACPITables(unsigned char*)+0x220>
c0013694:	a0 40 50 02 c0       	mov    al,ds:0xc0025040
c0013699:	84 c0                	test   al,al
c001369b:	74 75                	je     c0013712 <loadACPITables(unsigned char*)+0x99>
c001369d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00136a1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00136a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136a9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00136ac:	83 e8 24             	sub    eax,0x24
c00136af:	c1 e8 03             	shr    eax,0x3
c00136b2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00136b6:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00136be:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00136c2:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00136c6:	0f 8d b2 00 00 00    	jge    c001377e <loadACPITables(unsigned char*)+0x105>
c00136cc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00136d0:	83 c0 24             	add    eax,0x24
c00136d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00136d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00136db:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00136df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00136e3:	c1 e0 03             	shl    eax,0x3
c00136e6:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00136ea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00136ee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00136f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00136f3:	89 c1                	mov    ecx,eax
c00136f5:	a1 2c 4e 02 c0       	mov    eax,ds:0xc0024e2c
c00136fa:	8d 50 01             	lea    edx,[eax+0x1]
c00136fd:	89 15 2c 4e 02 c0    	mov    DWORD PTR ds:0xc0024e2c,edx
c0013703:	89 ca                	mov    edx,ecx
c0013705:	89 14 c5 44 4e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb1bc],edx
c001370c:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0013710:	eb ac                	jmp    c00136be <loadACPITables(unsigned char*)+0x45>
c0013712:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013716:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001371a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001371e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013721:	83 e8 24             	sub    eax,0x24
c0013724:	c1 e8 02             	shr    eax,0x2
c0013727:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001372b:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0013733:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013737:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c001373b:	7d 41                	jge    c001377e <loadACPITables(unsigned char*)+0x105>
c001373d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013741:	83 c0 24             	add    eax,0x24
c0013744:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013748:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001374c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013750:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013754:	c1 e0 02             	shl    eax,0x2
c0013757:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c001375b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001375f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013761:	a1 2c 4e 02 c0       	mov    eax,ds:0xc0024e2c
c0013766:	8d 50 01             	lea    edx,[eax+0x1]
c0013769:	89 15 2c 4e 02 c0    	mov    DWORD PTR ds:0xc0024e2c,edx
c001376f:	89 ca                	mov    edx,ecx
c0013771:	89 14 c5 44 4e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb1bc],edx
c0013778:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c001377c:	eb b5                	jmp    c0013733 <loadACPITables(unsigned char*)+0xba>
c001377e:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0013786:	a1 2c 4e 02 c0       	mov    eax,ds:0xc0024e2c
c001378b:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c001378f:	0f 8d 05 01 00 00    	jge    c001389a <loadACPITables(unsigned char*)+0x221>
c0013795:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013799:	8b 04 c5 44 4e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb1bc]
c00137a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00137a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00137ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137b0:	25 ff 0f 00 00       	and    eax,0xfff
c00137b5:	89 c6                	mov    esi,eax
c00137b7:	e8 d3 ab ff ff       	call   c000e38f <Virt::getAKernelVAS()>
c00137bc:	89 c3                	mov    ebx,eax
c00137be:	83 ec 0c             	sub    esp,0xc
c00137c1:	6a 01                	push   0x1
c00137c3:	e8 3a aa ff ff       	call   c000e202 <Virt::allocateKernelVirtualPages(int)>
c00137c8:	83 c4 10             	add    esp,0x10
c00137cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00137cf:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00137d5:	83 ec 0c             	sub    esp,0xc
c00137d8:	6a 01                	push   0x1
c00137da:	6a 01                	push   0x1
c00137dc:	50                   	push   eax
c00137dd:	52                   	push   edx
c00137de:	53                   	push   ebx
c00137df:	e8 dc b3 ff ff       	call   c000ebc0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00137e4:	83 c4 20             	add    esp,0x20
c00137e7:	09 f0                	or     eax,esi
c00137e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00137ed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00137f1:	c1 e0 03             	shl    eax,0x3
c00137f4:	05 40 4e 02 c0       	add    eax,0xc0024e40
c00137f9:	83 ec 04             	sub    esp,0x4
c00137fc:	6a 04                	push   0x4
c00137fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013802:	50                   	push   eax
c0013803:	e8 8f ce fe ff       	call   c0000697 <memcpy>
c0013808:	83 c4 10             	add    esp,0x10
c001380b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001380f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013812:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013816:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001381a:	05 00 10 00 00       	add    eax,0x1000
c001381f:	c1 e8 0c             	shr    eax,0xc
c0013822:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001382a:	89 04 24             	mov    DWORD PTR [esp],eax
c001382d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013831:	25 ff 0f 00 00       	and    eax,0xfff
c0013836:	89 c6                	mov    esi,eax
c0013838:	e8 52 ab ff ff       	call   c000e38f <Virt::getAKernelVAS()>
c001383d:	89 c3                	mov    ebx,eax
c001383f:	83 ec 0c             	sub    esp,0xc
c0013842:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013846:	e8 b7 a9 ff ff       	call   c000e202 <Virt::allocateKernelVirtualPages(int)>
c001384b:	83 c4 10             	add    esp,0x10
c001384e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013852:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013858:	83 ec 0c             	sub    esp,0xc
c001385b:	6a 01                	push   0x1
c001385d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013861:	50                   	push   eax
c0013862:	52                   	push   edx
c0013863:	53                   	push   ebx
c0013864:	e8 57 b3 ff ff       	call   c000ebc0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013869:	83 c4 20             	add    esp,0x20
c001386c:	09 f0                	or     eax,esi
c001386e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013872:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0013875:	83 ec 0c             	sub    esp,0xc
c0013878:	50                   	push   eax
c0013879:	e8 d1 ac ff ff       	call   c000e54f <Virt::freeKernelVirtualPages(unsigned long)>
c001387e:	83 c4 10             	add    esp,0x10
c0013881:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013885:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013889:	89 14 c5 44 4e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb1bc],edx
c0013890:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0013894:	e9 ed fe ff ff       	jmp    c0013786 <loadACPITables(unsigned char*)+0x10d>
c0013899:	90                   	nop
c001389a:	83 c4 44             	add    esp,0x44
c001389d:	5b                   	pop    ebx
c001389e:	5e                   	pop    esi
c001389f:	c3                   	ret    

c00138a0 <findRSDT(unsigned char*)>:
c00138a0:	56                   	push   esi
c00138a1:	53                   	push   ebx
c00138a2:	83 ec 44             	sub    esp,0x44
c00138a5:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c00138aa:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00138b0:	83 e0 04             	and    eax,0x4
c00138b3:	84 c0                	test   al,al
c00138b5:	75 0a                	jne    c00138c1 <findRSDT(unsigned char*)+0x21>
c00138b7:	b8 00 00 00 00       	mov    eax,0x0
c00138bc:	e9 f7 00 00 00       	jmp    c00139b8 <findRSDT(unsigned char*)+0x118>
c00138c1:	83 ec 04             	sub    esp,0x4
c00138c4:	6a 24                	push   0x24
c00138c6:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00138ca:	8d 44 24 18          	lea    eax,[esp+0x18]
c00138ce:	50                   	push   eax
c00138cf:	e8 c3 cd fe ff       	call   c0000697 <memcpy>
c00138d4:	83 c4 10             	add    esp,0x10
c00138d7:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00138db:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00138df:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00138e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00138eb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00138ef:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00138f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00138f7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00138fb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00138ff:	25 ff 0f 00 00       	and    eax,0xfff
c0013904:	89 c6                	mov    esi,eax
c0013906:	e8 84 aa ff ff       	call   c000e38f <Virt::getAKernelVAS()>
c001390b:	89 c3                	mov    ebx,eax
c001390d:	83 ec 0c             	sub    esp,0xc
c0013910:	6a 02                	push   0x2
c0013912:	e8 eb a8 ff ff       	call   c000e202 <Virt::allocateKernelVirtualPages(int)>
c0013917:	83 c4 10             	add    esp,0x10
c001391a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001391e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013924:	83 ec 0c             	sub    esp,0xc
c0013927:	6a 01                	push   0x1
c0013929:	6a 02                	push   0x2
c001392b:	50                   	push   eax
c001392c:	52                   	push   edx
c001392d:	53                   	push   ebx
c001392e:	e8 8d b2 ff ff       	call   c000ebc0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013933:	83 c4 20             	add    esp,0x20
c0013936:	09 f0                	or     eax,esi
c0013938:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001393c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013940:	25 ff 0f 00 00       	and    eax,0xfff
c0013945:	89 c6                	mov    esi,eax
c0013947:	e8 43 aa ff ff       	call   c000e38f <Virt::getAKernelVAS()>
c001394c:	89 c3                	mov    ebx,eax
c001394e:	83 ec 0c             	sub    esp,0xc
c0013951:	6a 02                	push   0x2
c0013953:	e8 aa a8 ff ff       	call   c000e202 <Virt::allocateKernelVirtualPages(int)>
c0013958:	83 c4 10             	add    esp,0x10
c001395b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001395f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013965:	83 ec 0c             	sub    esp,0xc
c0013968:	6a 01                	push   0x1
c001396a:	6a 02                	push   0x2
c001396c:	50                   	push   eax
c001396d:	52                   	push   edx
c001396e:	53                   	push   ebx
c001396f:	e8 4c b2 ff ff       	call   c000ebc0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013974:	83 c4 20             	add    esp,0x20
c0013977:	09 f0                	or     eax,esi
c0013979:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001397d:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0013982:	75 11                	jne    c0013995 <findRSDT(unsigned char*)+0xf5>
c0013984:	c6 05 40 50 02 c0 00 	mov    BYTE PTR ds:0xc0025040,0x0
c001398b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001398f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013993:	eb 1f                	jmp    c00139b4 <findRSDT(unsigned char*)+0x114>
c0013995:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c001399a:	75 11                	jne    c00139ad <findRSDT(unsigned char*)+0x10d>
c001399c:	c6 05 40 50 02 c0 01 	mov    BYTE PTR ds:0xc0025040,0x1
c00139a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00139a7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00139ab:	eb 07                	jmp    c00139b4 <findRSDT(unsigned char*)+0x114>
c00139ad:	b8 00 00 00 00       	mov    eax,0x0
c00139b2:	eb 04                	jmp    c00139b8 <findRSDT(unsigned char*)+0x118>
c00139b4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00139b8:	83 c4 44             	add    esp,0x44
c00139bb:	5b                   	pop    ebx
c00139bc:	5e                   	pop    esi
c00139bd:	c3                   	ret    

c00139be <findDataTable(unsigned char*, char*)>:
c00139be:	83 ec 1c             	sub    esp,0x1c
c00139c1:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c00139c6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00139cc:	83 e0 04             	and    eax,0x4
c00139cf:	84 c0                	test   al,al
c00139d1:	75 07                	jne    c00139da <findDataTable(unsigned char*, char*)+0x1c>
c00139d3:	b8 00 00 00 00       	mov    eax,0x0
c00139d8:	eb 7c                	jmp    c0013a56 <findDataTable(unsigned char*, char*)+0x98>
c00139da:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00139e2:	a1 2c 4e 02 c0       	mov    eax,ds:0xc0024e2c
c00139e7:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00139eb:	7d 3a                	jge    c0013a27 <findDataTable(unsigned char*, char*)+0x69>
c00139ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139f1:	c1 e0 03             	shl    eax,0x3
c00139f4:	05 40 4e 02 c0       	add    eax,0xc0024e40
c00139f9:	83 ec 04             	sub    esp,0x4
c00139fc:	6a 04                	push   0x4
c00139fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a02:	50                   	push   eax
c0013a03:	e8 2c cc fe ff       	call   c0000634 <memcmp>
c0013a08:	83 c4 10             	add    esp,0x10
c0013a0b:	85 c0                	test   eax,eax
c0013a0d:	0f 94 c0             	sete   al
c0013a10:	84 c0                	test   al,al
c0013a12:	74 0d                	je     c0013a21 <findDataTable(unsigned char*, char*)+0x63>
c0013a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a18:	8b 04 c5 44 4e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb1bc]
c0013a1f:	eb 35                	jmp    c0013a56 <findDataTable(unsigned char*, char*)+0x98>
c0013a21:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0013a25:	eb bb                	jmp    c00139e2 <findDataTable(unsigned char*, char*)+0x24>
c0013a27:	a0 40 50 02 c0       	mov    al,ds:0xc0025040
c0013a2c:	84 c0                	test   al,al
c0013a2e:	74 07                	je     c0013a37 <findDataTable(unsigned char*, char*)+0x79>
c0013a30:	b8 58 00 00 00       	mov    eax,0x58
c0013a35:	eb 05                	jmp    c0013a3c <findDataTable(unsigned char*, char*)+0x7e>
c0013a37:	b8 52 00 00 00       	mov    eax,0x52
c0013a3c:	83 ec 04             	sub    esp,0x4
c0013a3f:	50                   	push   eax
c0013a40:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a44:	68 90 23 02 c0       	push   0xc0022390
c0013a49:	e8 cf b7 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0013a4e:	83 c4 10             	add    esp,0x10
c0013a51:	b8 00 00 00 00       	mov    eax,0x0
c0013a56:	83 c4 1c             	add    esp,0x1c
c0013a59:	c3                   	ret    

c0013a5a <scanMADT()>:
c0013a5a:	83 ec 2c             	sub    esp,0x2c
c0013a5d:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013a62:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013a68:	83 e0 04             	and    eax,0x4
c0013a6b:	84 c0                	test   al,al
c0013a6d:	0f 84 9a 03 00 00    	je     c0013e0d <scanMADT()+0x3b3>
c0013a73:	e8 77 fb ff ff       	call   c00135ef <findRSDP()>
c0013a78:	a3 4c 50 02 c0       	mov    ds:0xc002504c,eax
c0013a7d:	a1 4c 50 02 c0       	mov    eax,ds:0xc002504c
c0013a82:	85 c0                	test   eax,eax
c0013a84:	75 19                	jne    c0013a9f <scanMADT()+0x45>
c0013a86:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013a8b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013a91:	83 e2 fb             	and    edx,0xfffffffb
c0013a94:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013a9a:	e9 72 03 00 00       	jmp    c0013e11 <scanMADT()+0x3b7>
c0013a9f:	a1 4c 50 02 c0       	mov    eax,ds:0xc002504c
c0013aa4:	83 ec 0c             	sub    esp,0xc
c0013aa7:	50                   	push   eax
c0013aa8:	e8 f3 fd ff ff       	call   c00138a0 <findRSDT(unsigned char*)>
c0013aad:	83 c4 10             	add    esp,0x10
c0013ab0:	a3 48 50 02 c0       	mov    ds:0xc0025048,eax
c0013ab5:	a1 48 50 02 c0       	mov    eax,ds:0xc0025048
c0013aba:	85 c0                	test   eax,eax
c0013abc:	75 19                	jne    c0013ad7 <scanMADT()+0x7d>
c0013abe:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013ac3:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013ac9:	83 e2 fb             	and    edx,0xfffffffb
c0013acc:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013ad2:	e9 3a 03 00 00       	jmp    c0013e11 <scanMADT()+0x3b7>
c0013ad7:	a1 48 50 02 c0       	mov    eax,ds:0xc0025048
c0013adc:	83 ec 0c             	sub    esp,0xc
c0013adf:	50                   	push   eax
c0013ae0:	e8 94 fb ff ff       	call   c0013679 <loadACPITables(unsigned char*)>
c0013ae5:	83 c4 10             	add    esp,0x10
c0013ae8:	a1 48 50 02 c0       	mov    eax,ds:0xc0025048
c0013aed:	83 ec 08             	sub    esp,0x8
c0013af0:	68 ae 22 02 c0       	push   0xc00222ae
c0013af5:	50                   	push   eax
c0013af6:	e8 c3 fe ff ff       	call   c00139be <findDataTable(unsigned char*, char*)>
c0013afb:	83 c4 10             	add    esp,0x10
c0013afe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013b02:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013b07:	75 19                	jne    c0013b22 <scanMADT()+0xc8>
c0013b09:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013b0e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013b14:	83 e2 fe             	and    edx,0xfffffffe
c0013b17:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013b1d:	e9 ef 02 00 00       	jmp    c0013e11 <scanMADT()+0x3b7>
c0013b22:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013b2a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013b31:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0013b35:	0f 87 d6 02 00 00    	ja     c0013e11 <scanMADT()+0x3b7>
c0013b3b:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0013b43:	0f 87 c8 02 00 00    	ja     c0013e11 <scanMADT()+0x3b7>
c0013b49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b55:	8d 50 01             	lea    edx,[eax+0x1]
c0013b58:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b5c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b60:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013b64:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0013b68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b6c:	8d 50 01             	lea    edx,[eax+0x1]
c0013b6f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b73:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b77:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013b7b:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0013b7f:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0013b84:	0f 86 86 02 00 00    	jbe    c0013e10 <scanMADT()+0x3b6>
c0013b8a:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0013b8f:	75 5b                	jne    c0013bec <scanMADT()+0x192>
c0013b91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b95:	8d 50 01             	lea    edx,[eax+0x1]
c0013b98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b9c:	8a 15 80 51 02 c0    	mov    dl,BYTE PTR ds:0xc0025180
c0013ba2:	81 e2 ff 00 00 00    	and    edx,0xff
c0013ba8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013bac:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013bb0:	88 82 c0 51 02 c0    	mov    BYTE PTR [edx-0x3ffdae40],al
c0013bb6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013bba:	8d 42 01             	lea    eax,[edx+0x1]
c0013bbd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013bc1:	a0 80 51 02 c0       	mov    al,ds:0xc0025180
c0013bc6:	8d 48 01             	lea    ecx,[eax+0x1]
c0013bc9:	88 0d 80 51 02 c0    	mov    BYTE PTR ds:0xc0025180,cl
c0013bcf:	25 ff 00 00 00       	and    eax,0xff
c0013bd4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013bd8:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c0013bdc:	88 90 a0 51 02 c0    	mov    BYTE PTR [eax-0x3ffdae60],dl
c0013be2:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013be7:	e9 0a 02 00 00       	jmp    c0013df6 <scanMADT()+0x39c>
c0013bec:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0013bf1:	0f 85 29 01 00 00    	jne    c0013d20 <scanMADT()+0x2c6>
c0013bf7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bfb:	8d 50 01             	lea    edx,[eax+0x1]
c0013bfe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013c02:	8a 15 50 50 02 c0    	mov    dl,BYTE PTR ds:0xc0025050
c0013c08:	81 e2 ff 00 00 00    	and    edx,0xff
c0013c0e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013c12:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013c16:	88 82 60 50 02 c0    	mov    BYTE PTR [edx-0x3ffdafa0],al
c0013c1c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0013c20:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c28:	01 d0                	add    eax,edx
c0013c2a:	83 c0 2c             	add    eax,0x2c
c0013c2d:	8a 00                	mov    al,BYTE PTR [eax]
c0013c2f:	31 d2                	xor    edx,edx
c0013c31:	88 c2                	mov    dl,al
c0013c33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c37:	8d 48 01             	lea    ecx,[eax+0x1]
c0013c3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c3e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013c42:	25 ff 00 00 00       	and    eax,0xff
c0013c47:	c1 e0 08             	shl    eax,0x8
c0013c4a:	89 d1                	mov    ecx,edx
c0013c4c:	09 c1                	or     ecx,eax
c0013c4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c52:	8d 50 02             	lea    edx,[eax+0x2]
c0013c55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c59:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c5d:	25 ff 00 00 00       	and    eax,0xff
c0013c62:	c1 e0 10             	shl    eax,0x10
c0013c65:	09 c1                	or     ecx,eax
c0013c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c6b:	8d 50 03             	lea    edx,[eax+0x3]
c0013c6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c72:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c76:	25 ff 00 00 00       	and    eax,0xff
c0013c7b:	c1 e0 18             	shl    eax,0x18
c0013c7e:	09 c1                	or     ecx,eax
c0013c80:	89 ca                	mov    edx,ecx
c0013c82:	a0 50 50 02 c0       	mov    al,ds:0xc0025050
c0013c87:	25 ff 00 00 00       	and    eax,0xff
c0013c8c:	89 14 85 80 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf80],edx
c0013c93:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013c98:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c9c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ca0:	01 d0                	add    eax,edx
c0013ca2:	83 c0 2c             	add    eax,0x2c
c0013ca5:	8a 00                	mov    al,BYTE PTR [eax]
c0013ca7:	31 d2                	xor    edx,edx
c0013ca9:	88 c2                	mov    dl,al
c0013cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013caf:	8d 48 01             	lea    ecx,[eax+0x1]
c0013cb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cb6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013cba:	25 ff 00 00 00       	and    eax,0xff
c0013cbf:	c1 e0 08             	shl    eax,0x8
c0013cc2:	89 d1                	mov    ecx,edx
c0013cc4:	09 c1                	or     ecx,eax
c0013cc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cca:	8d 50 02             	lea    edx,[eax+0x2]
c0013ccd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cd1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013cd5:	25 ff 00 00 00       	and    eax,0xff
c0013cda:	c1 e0 10             	shl    eax,0x10
c0013cdd:	09 c1                	or     ecx,eax
c0013cdf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ce3:	8d 50 03             	lea    edx,[eax+0x3]
c0013ce6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cea:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013cee:	25 ff 00 00 00       	and    eax,0xff
c0013cf3:	c1 e0 18             	shl    eax,0x18
c0013cf6:	09 c1                	or     ecx,eax
c0013cf8:	89 ca                	mov    edx,ecx
c0013cfa:	a0 50 50 02 c0       	mov    al,ds:0xc0025050
c0013cff:	25 ff 00 00 00       	and    eax,0xff
c0013d04:	89 14 85 00 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf00],edx
c0013d0b:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013d10:	a0 50 50 02 c0       	mov    al,ds:0xc0025050
c0013d15:	40                   	inc    eax
c0013d16:	a2 50 50 02 c0       	mov    ds:0xc0025050,al
c0013d1b:	e9 d6 00 00 00       	jmp    c0013df6 <scanMADT()+0x39c>
c0013d20:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0013d25:	0f 85 b1 00 00 00    	jne    c0013ddc <scanMADT()+0x382>
c0013d2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d2f:	8d 50 01             	lea    edx,[eax+0x1]
c0013d32:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013d36:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d3a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013d3e:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0013d42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d46:	8d 50 01             	lea    edx,[eax+0x1]
c0013d49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013d4d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d51:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013d55:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013d59:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d61:	01 d0                	add    eax,edx
c0013d63:	83 c0 2c             	add    eax,0x2c
c0013d66:	8a 00                	mov    al,BYTE PTR [eax]
c0013d68:	31 d2                	xor    edx,edx
c0013d6a:	88 c2                	mov    dl,al
c0013d6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d70:	8d 48 01             	lea    ecx,[eax+0x1]
c0013d73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d77:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013d7b:	25 ff 00 00 00       	and    eax,0xff
c0013d80:	c1 e0 08             	shl    eax,0x8
c0013d83:	89 d1                	mov    ecx,edx
c0013d85:	09 c1                	or     ecx,eax
c0013d87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d8b:	8d 50 02             	lea    edx,[eax+0x2]
c0013d8e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d92:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013d96:	25 ff 00 00 00       	and    eax,0xff
c0013d9b:	c1 e0 10             	shl    eax,0x10
c0013d9e:	09 c1                	or     ecx,eax
c0013da0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013da4:	8d 50 03             	lea    edx,[eax+0x3]
c0013da7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013dab:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013daf:	25 ff 00 00 00       	and    eax,0xff
c0013db4:	c1 e0 18             	shl    eax,0x18
c0013db7:	09 c8                	or     eax,ecx
c0013db9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013dbd:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013dc2:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0013dc7:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0013dcb:	25 ff 00 00 00       	and    eax,0xff
c0013dd0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013dd4:	88 90 00 3f 02 c0    	mov    BYTE PTR [eax-0x3ffdc100],dl
c0013dda:	eb 1a                	jmp    c0013df6 <scanMADT()+0x39c>
c0013ddc:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0013de1:	75 07                	jne    c0013dea <scanMADT()+0x390>
c0013de3:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013de8:	eb 0c                	jmp    c0013df6 <scanMADT()+0x39c>
c0013dea:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0013def:	75 05                	jne    c0013df6 <scanMADT()+0x39c>
c0013df1:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0013df6:	8a 44 24 12          	mov    al,BYTE PTR [esp+0x12]
c0013dfa:	31 d2                	xor    edx,edx
c0013dfc:	88 c2                	mov    dl,al
c0013dfe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e02:	01 d0                	add    eax,edx
c0013e04:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e08:	e9 1d fd ff ff       	jmp    c0013b2a <scanMADT()+0xd0>
c0013e0d:	90                   	nop
c0013e0e:	eb 01                	jmp    c0013e11 <scanMADT()+0x3b7>
c0013e10:	90                   	nop
c0013e11:	83 c4 2c             	add    esp,0x2c
c0013e14:	c3                   	ret    
c0013e15:	90                   	nop

c0013e16 <ACPI::ACPI()>:
c0013e16:	83 ec 0c             	sub    esp,0xc
c0013e19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e1d:	83 ec 08             	sub    esp,0x8
c0013e20:	68 b3 22 02 c0       	push   0xc00222b3
c0013e25:	50                   	push   eax
c0013e26:	e8 f7 c9 ff ff       	call   c0010822 <Device::Device(char const*)>
c0013e2b:	83 c4 10             	add    esp,0x10
c0013e2e:	ba 5c 24 02 c0       	mov    edx,0xc002245c
c0013e33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e37:	89 10                	mov    DWORD PTR [eax],edx
c0013e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e3d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0013e44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e48:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0013e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e56:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0013e60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e64:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0013e6b:	e8 ea fb ff ff       	call   c0013a5a <scanMADT()>
c0013e70:	90                   	nop
c0013e71:	83 c4 0c             	add    esp,0xc
c0013e74:	c3                   	ret    
c0013e75:	90                   	nop

c0013e76 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0013e76:	83 ec 2c             	sub    esp,0x2c
c0013e79:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013e7d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013e81:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013e85:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013e89:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013e8e:	88 d0                	mov    al,dl
c0013e90:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013e94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0013e99:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013ea1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013ea5:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013eab:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013eaf:	0f 8d 97 00 00 00    	jge    c0013f4c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0013eb5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013eb9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ebd:	83 c2 2a             	add    edx,0x2a
c0013ec0:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0013ec4:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0013ec9:	75 78                	jne    c0013f43 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013ecb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013ecf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ed3:	83 c2 2a             	add    edx,0x2a
c0013ed6:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0013eda:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0013ede:	75 63                	jne    c0013f43 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013ee0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013ee5:	74 3a                	je     c0013f21 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0013ee7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013eeb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013eef:	83 c2 2a             	add    edx,0x2a
c0013ef2:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0013ef6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013efa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013efd:	39 c2                	cmp    edx,eax
c0013eff:	74 10                	je     c0013f11 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0013f01:	83 ec 0c             	sub    esp,0xc
c0013f04:	68 c0 23 02 c0       	push   0xc00223c0
c0013f09:	e8 3e 1b 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c0013f0e:	83 c4 10             	add    esp,0x10
c0013f11:	83 ec 0c             	sub    esp,0xc
c0013f14:	68 b8 22 02 c0       	push   0xc00222b8
c0013f19:	e8 2e 1b 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c0013f1e:	83 c4 10             	add    esp,0x10
c0013f21:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013f25:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013f29:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013f2d:	83 c2 2a             	add    edx,0x2a
c0013f30:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0013f34:	8b 02                	mov    eax,DWORD PTR [edx]
c0013f36:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0013f39:	89 01                	mov    DWORD PTR [ecx],eax
c0013f3b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0013f3e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0013f43:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0013f47:	e9 55 ff ff ff       	jmp    c0013ea1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0013f4c:	90                   	nop
c0013f4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f51:	83 c4 2c             	add    esp,0x2c
c0013f54:	c2 04 00             	ret    0x4
c0013f57:	90                   	nop

c0013f58 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0013f58:	56                   	push   esi
c0013f59:	53                   	push   ebx
c0013f5a:	83 ec 14             	sub    esp,0x14
c0013f5d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013f61:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013f65:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013f69:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013f6e:	88 c8                	mov    al,cl
c0013f70:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013f74:	88 d0                	mov    al,dl
c0013f76:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013f7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f7e:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0013f84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f88:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0013f8e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0013f92:	31 c9                	xor    ecx,ecx
c0013f94:	88 c1                	mov    cl,al
c0013f96:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013f9a:	31 d2                	xor    edx,edx
c0013f9c:	88 c2                	mov    dl,al
c0013f9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013fa2:	25 ff ff 00 00       	and    eax,0xffff
c0013fa7:	83 ec 04             	sub    esp,0x4
c0013faa:	56                   	push   esi
c0013fab:	53                   	push   ebx
c0013fac:	51                   	push   ecx
c0013fad:	52                   	push   edx
c0013fae:	50                   	push   eax
c0013faf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013fb3:	68 f0 23 02 c0       	push   0xc00223f0
c0013fb8:	e8 60 b2 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0013fbd:	83 c4 20             	add    esp,0x20
c0013fc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fc4:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013fca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fce:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013fd1:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013fd5:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0013fd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fdd:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013fe3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013fe7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0013fea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013fee:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0013ff3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ff7:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013ffd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0014001:	8d 48 01             	lea    ecx,[eax+0x1]
c0014004:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014008:	83 c2 2a             	add    edx,0x2a
c001400b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001400f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014013:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0014019:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001401d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0014020:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014024:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0014028:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001402c:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0014032:	8d 50 01             	lea    edx,[eax+0x1]
c0014035:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014039:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c001403f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014043:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0014049:	3d 00 08 00 00       	cmp    eax,0x800
c001404e:	75 10                	jne    c0014060 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0x108>
c0014050:	83 ec 0c             	sub    esp,0xc
c0014053:	68 c7 22 02 c0       	push   0xc00222c7
c0014058:	e8 ef 19 00 00       	call   c0015a4c <Krnl::panic(char const*)>
c001405d:	83 c4 10             	add    esp,0x10
c0014060:	90                   	nop
c0014061:	83 c4 14             	add    esp,0x14
c0014064:	5b                   	pop    ebx
c0014065:	5e                   	pop    esi
c0014066:	c3                   	ret    
c0014067:	90                   	nop

c0014068 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0014068:	b8 00 00 00 00       	mov    eax,0x0
c001406d:	c3                   	ret    

c001406e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001406e:	83 ec 1c             	sub    esp,0x1c
c0014071:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014075:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0014078:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001407c:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c0014082:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014086:	25 ff 00 00 00       	and    eax,0xff
c001408b:	83 ec 08             	sub    esp,0x8
c001408e:	50                   	push   eax
c001408f:	52                   	push   edx
c0014090:	e8 63 75 ff ff       	call   c000b5f8 <Computer::readCMOS(unsigned char)>
c0014095:	83 c4 10             	add    esp,0x10
c0014098:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001409c:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c00140a2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00140a6:	25 ff 00 00 00       	and    eax,0xff
c00140ab:	83 ec 04             	sub    esp,0x4
c00140ae:	6a 01                	push   0x1
c00140b0:	50                   	push   eax
c00140b1:	52                   	push   edx
c00140b2:	e8 59 76 ff ff       	call   c000b710 <Computer::writeCMOS(unsigned char, unsigned char)>
c00140b7:	83 c4 10             	add    esp,0x10
c00140ba:	90                   	nop
c00140bb:	83 c4 1c             	add    esp,0x1c
c00140be:	c3                   	ret    
c00140bf:	90                   	nop

c00140c0 <ACPI::open(int, int, void*)>:
c00140c0:	53                   	push   ebx
c00140c1:	83 ec 18             	sub    esp,0x18
c00140c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140c8:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00140cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140d3:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00140d9:	84 c0                	test   al,al
c00140db:	74 60                	je     c001413d <ACPI::open(int, int, void*)+0x7d>
c00140dd:	83 ec 0c             	sub    esp,0xc
c00140e0:	68 58 01 00 00       	push   0x158
c00140e5:	e8 fe af ff ff       	call   c000f0e8 <operator new(unsigned long)>
c00140ea:	83 c4 10             	add    esp,0x10
c00140ed:	89 c3                	mov    ebx,eax
c00140ef:	83 ec 0c             	sub    esp,0xc
c00140f2:	53                   	push   ebx
c00140f3:	e8 a8 80 00 00       	call   c001c1a0 <PCI::PCI()>
c00140f8:	83 c4 10             	add    esp,0x10
c00140fb:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00140ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014103:	83 ec 08             	sub    esp,0x8
c0014106:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001410a:	50                   	push   eax
c001410b:	e8 22 c5 ff ff       	call   c0010632 <Device::addChild(Device*)>
c0014110:	83 c4 10             	add    esp,0x10
c0014113:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014117:	8b 00                	mov    eax,DWORD PTR [eax]
c0014119:	83 c0 08             	add    eax,0x8
c001411c:	8b 00                	mov    eax,DWORD PTR [eax]
c001411e:	6a 00                	push   0x0
c0014120:	6a 00                	push   0x0
c0014122:	6a 00                	push   0x0
c0014124:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014128:	ff d0                	call   eax
c001412a:	83 c4 10             	add    esp,0x10
c001412d:	83 ec 0c             	sub    esp,0xc
c0014130:	68 e4 22 02 c0       	push   0xc00222e4
c0014135:	e8 e3 b0 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001413a:	83 c4 10             	add    esp,0x10
c001413d:	83 ec 0c             	sub    esp,0xc
c0014140:	68 ef 22 02 c0       	push   0xc00222ef
c0014145:	e8 43 38 00 00       	call   c001798d <Thr::loadKernelSymbolTable(char const*)>
c001414a:	83 c4 10             	add    esp,0x10
c001414d:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c0014153:	83 ec 08             	sub    esp,0x8
c0014156:	6a 01                	push   0x1
c0014158:	68 0d 23 02 c0       	push   0xc002230d
c001415d:	e8 0d 43 00 00       	call   c001846f <Thr::loadDLL(char const*, bool)>
c0014162:	83 c4 10             	add    esp,0x10
c0014165:	83 ec 08             	sub    esp,0x8
c0014168:	53                   	push   ebx
c0014169:	50                   	push   eax
c001416a:	e8 c6 44 00 00       	call   c0018635 <Thr::executeDLL(unsigned long, void*)>
c001416f:	83 c4 10             	add    esp,0x10
c0014172:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c0014178:	83 ec 08             	sub    esp,0x8
c001417b:	6a 01                	push   0x1
c001417d:	68 2a 23 02 c0       	push   0xc002232a
c0014182:	e8 e8 42 00 00       	call   c001846f <Thr::loadDLL(char const*, bool)>
c0014187:	83 c4 10             	add    esp,0x10
c001418a:	83 ec 08             	sub    esp,0x8
c001418d:	53                   	push   ebx
c001418e:	50                   	push   eax
c001418f:	e8 a1 44 00 00       	call   c0018635 <Thr::executeDLL(unsigned long, void*)>
c0014194:	83 c4 10             	add    esp,0x10
c0014197:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001419c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00141a2:	83 e0 04             	and    eax,0x4
c00141a5:	84 c0                	test   al,al
c00141a7:	0f 84 cf 00 00 00    	je     c001427c <ACPI::open(int, int, void*)+0x1bc>
c00141ad:	83 ec 0c             	sub    esp,0xc
c00141b0:	68 14 01 00 00       	push   0x114
c00141b5:	e8 2e af ff ff       	call   c000f0e8 <operator new(unsigned long)>
c00141ba:	83 c4 10             	add    esp,0x10
c00141bd:	89 c3                	mov    ebx,eax
c00141bf:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00141c4:	83 ec 04             	sub    esp,0x4
c00141c7:	50                   	push   eax
c00141c8:	68 47 23 02 c0       	push   0xc0022347
c00141cd:	53                   	push   ebx
c00141ce:	e8 81 b5 ff ff       	call   c000f754 <File::File(char const*, Process*)>
c00141d3:	83 c4 10             	add    esp,0x10
c00141d6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00141da:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00141df:	74 17                	je     c00141f8 <ACPI::open(int, int, void*)+0x138>
c00141e1:	83 ec 0c             	sub    esp,0xc
c00141e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00141e8:	e8 39 b8 ff ff       	call   c000fa26 <File::exists()>
c00141ed:	83 c4 10             	add    esp,0x10
c00141f0:	84 c0                	test   al,al
c00141f2:	74 04                	je     c00141f8 <ACPI::open(int, int, void*)+0x138>
c00141f4:	b0 01                	mov    al,0x1
c00141f6:	eb 02                	jmp    c00141fa <ACPI::open(int, int, void*)+0x13a>
c00141f8:	b0 00                	mov    al,0x0
c00141fa:	84 c0                	test   al,al
c00141fc:	74 25                	je     c0014223 <ACPI::open(int, int, void*)+0x163>
c00141fe:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c0014204:	83 ec 08             	sub    esp,0x8
c0014207:	6a 01                	push   0x1
c0014209:	68 47 23 02 c0       	push   0xc0022347
c001420e:	e8 5c 42 00 00       	call   c001846f <Thr::loadDLL(char const*, bool)>
c0014213:	83 c4 10             	add    esp,0x10
c0014216:	83 ec 08             	sub    esp,0x8
c0014219:	53                   	push   ebx
c001421a:	50                   	push   eax
c001421b:	e8 15 44 00 00       	call   c0018635 <Thr::executeDLL(unsigned long, void*)>
c0014220:	83 c4 10             	add    esp,0x10
c0014223:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014228:	74 1e                	je     c0014248 <ACPI::open(int, int, void*)+0x188>
c001422a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001422f:	74 17                	je     c0014248 <ACPI::open(int, int, void*)+0x188>
c0014231:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014235:	8b 00                	mov    eax,DWORD PTR [eax]
c0014237:	83 c0 08             	add    eax,0x8
c001423a:	8b 00                	mov    eax,DWORD PTR [eax]
c001423c:	83 ec 0c             	sub    esp,0xc
c001423f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014243:	ff d0                	call   eax
c0014245:	83 c4 10             	add    esp,0x10
c0014248:	a1 48 50 02 c0       	mov    eax,ds:0xc0025048
c001424d:	83 ec 08             	sub    esp,0x8
c0014250:	68 64 23 02 c0       	push   0xc0022364
c0014255:	50                   	push   eax
c0014256:	e8 63 f7 ff ff       	call   c00139be <findDataTable(unsigned char*, char*)>
c001425b:	83 c4 10             	add    esp,0x10
c001425e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014262:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0014267:	74 13                	je     c001427c <ACPI::open(int, int, void*)+0x1bc>
c0014269:	83 ec 08             	sub    esp,0x8
c001426c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014270:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014274:	e8 f5 fd ff ff       	call   c001406e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0014279:	83 c4 10             	add    esp,0x10
c001427c:	b8 00 00 00 00       	mov    eax,0x0
c0014281:	83 c4 18             	add    esp,0x18
c0014284:	5b                   	pop    ebx
c0014285:	c3                   	ret    

c0014286 <ACPI::sleep()>:
c0014286:	83 ec 0c             	sub    esp,0xc
c0014289:	a1 20 4e 02 c0       	mov    eax,ds:0xc0024e20
c001428e:	85 c0                	test   eax,eax
c0014290:	74 07                	je     c0014299 <ACPI::sleep()+0x13>
c0014292:	a1 20 4e 02 c0       	mov    eax,ds:0xc0024e20
c0014297:	ff d0                	call   eax
c0014299:	90                   	nop
c001429a:	83 c4 0c             	add    esp,0xc
c001429d:	c3                   	ret    

c001429e <CPU::close(int, int, void*)>:
c001429e:	31 c0                	xor    eax,eax
c00142a0:	c3                   	ret    

c00142a1 <lookupAMDCPUName(unsigned char, unsigned char)>:
c00142a1:	55                   	push   ebp
c00142a2:	57                   	push   edi
c00142a3:	56                   	push   esi
c00142a4:	53                   	push   ebx
c00142a5:	51                   	push   ecx
c00142a6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00142aa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00142ae:	89 d6                	mov    esi,edx
c00142b0:	89 cd                	mov    ebp,ecx
c00142b2:	80 fa 04             	cmp    dl,0x4
c00142b5:	75 28                	jne    c00142df <lookupAMDCPUName(unsigned char, unsigned char)+0x3e>
c00142b7:	8d 41 f9             	lea    eax,[ecx-0x7]
c00142ba:	3c 03                	cmp    al,0x3
c00142bc:	0f 86 64 01 00 00    	jbe    c0014426 <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c00142c2:	80 f9 03             	cmp    cl,0x3
c00142c5:	0f 84 5b 01 00 00    	je     c0014426 <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c00142cb:	8d 79 f2             	lea    edi,[ecx-0xe]
c00142ce:	b8 d0 40 02 c0       	mov    eax,0xc00240d0
c00142d3:	89 fb                	mov    ebx,edi
c00142d5:	80 fb 01             	cmp    bl,0x1
c00142d8:	77 4e                	ja     c0014328 <lookupAMDCPUName(unsigned char, unsigned char)+0x87>
c00142da:	e9 61 01 00 00       	jmp    c0014440 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142df:	80 fa 05             	cmp    dl,0x5
c00142e2:	75 4d                	jne    c0014331 <lookupAMDCPUName(unsigned char, unsigned char)+0x90>
c00142e4:	b8 e0 40 02 c0       	mov    eax,0xc00240e0
c00142e9:	80 f9 03             	cmp    cl,0x3
c00142ec:	0f 86 4e 01 00 00    	jbe    c0014440 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142f2:	8d 79 fa             	lea    edi,[ecx-0x6]
c00142f5:	b8 f0 40 02 c0       	mov    eax,0xc00240f0
c00142fa:	89 fb                	mov    ebx,edi
c00142fc:	80 fb 01             	cmp    bl,0x1
c00142ff:	0f 86 3b 01 00 00    	jbe    c0014440 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014305:	b8 00 41 02 c0       	mov    eax,0xc0024100
c001430a:	80 f9 08             	cmp    cl,0x8
c001430d:	0f 84 2d 01 00 00    	je     c0014440 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014313:	89 cf                	mov    edi,ecx
c0014315:	b8 10 41 02 c0       	mov    eax,0xc0024110
c001431a:	83 e7 fb             	and    edi,0xfffffffb
c001431d:	89 fb                	mov    ebx,edi
c001431f:	80 fb 09             	cmp    bl,0x9
c0014322:	0f 84 18 01 00 00    	je     c0014440 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014328:	31 c0                	xor    eax,eax
c001432a:	89 eb                	mov    ebx,ebp
c001432c:	0f b6 fb             	movzx  edi,bl
c001432f:	eb 30                	jmp    c0014361 <lookupAMDCPUName(unsigned char, unsigned char)+0xc0>
c0014331:	31 c0                	xor    eax,eax
c0014333:	80 fa 06             	cmp    dl,0x6
c0014336:	75 f2                	jne    c001432a <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0014338:	80 f9 0a             	cmp    cl,0xa
c001433b:	77 ed                	ja     c001432a <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c001433d:	bf de 05 00 00       	mov    edi,0x5de
c0014342:	0f a3 cf             	bt     edi,ecx
c0014345:	73 e3                	jae    c001432a <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0014347:	b8 20 41 02 c0       	mov    eax,0xc0024120
c001434c:	e9 ef 00 00 00       	jmp    c0014440 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014351:	39 c7                	cmp    edi,eax
c0014353:	0f 84 d4 00 00 00    	je     c001442d <lookupAMDCPUName(unsigned char, unsigned char)+0x18c>
c0014359:	40                   	inc    eax
c001435a:	3d d0 00 00 00       	cmp    eax,0xd0
c001435f:	74 09                	je     c001436a <lookupAMDCPUName(unsigned char, unsigned char)+0xc9>
c0014361:	89 f3                	mov    ebx,esi
c0014363:	80 fb 0f             	cmp    bl,0xf
c0014366:	75 f1                	jne    c0014359 <lookupAMDCPUName(unsigned char, unsigned char)+0xb8>
c0014368:	eb e7                	jmp    c0014351 <lookupAMDCPUName(unsigned char, unsigned char)+0xb0>
c001436a:	80 fa 10             	cmp    dl,0x10
c001436d:	75 19                	jne    c0014388 <lookupAMDCPUName(unsigned char, unsigned char)+0xe7>
c001436f:	8d 41 fc             	lea    eax,[ecx-0x4]
c0014372:	83 e0 fb             	and    eax,0xfffffffb
c0014375:	3c 02                	cmp    al,0x2
c0014377:	0f 86 b7 00 00 00    	jbe    c0014434 <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c001437d:	80 f9 02             	cmp    cl,0x2
c0014380:	0f 84 ae 00 00 00    	je     c0014434 <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c0014386:	eb 13                	jmp    c001439b <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c0014388:	80 fa 11             	cmp    dl,0x11
c001438b:	75 0e                	jne    c001439b <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c001438d:	b8 30 41 02 c0       	mov    eax,0xc0024130
c0014392:	80 f9 03             	cmp    cl,0x3
c0014395:	0f 84 a5 00 00 00    	je     c0014440 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001439b:	80 fa 12             	cmp    dl,0x12
c001439e:	75 0e                	jne    c00143ae <lookupAMDCPUName(unsigned char, unsigned char)+0x10d>
c00143a0:	b8 40 41 02 c0       	mov    eax,0xc0024140
c00143a5:	80 f9 01             	cmp    cl,0x1
c00143a8:	0f 84 92 00 00 00    	je     c0014440 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143ae:	80 fa 14             	cmp    dl,0x14
c00143b1:	be 01 00 00 00       	mov    esi,0x1
c00143b6:	0f 94 c3             	sete   bl
c00143b9:	80 f9 13             	cmp    cl,0x13
c00143bc:	77 0c                	ja     c00143ca <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c00143be:	be 04 00 09 00       	mov    esi,0x90004
c00143c3:	d3 ee                	shr    esi,cl
c00143c5:	f7 d6                	not    esi
c00143c7:	83 e6 01             	and    esi,0x1
c00143ca:	8d 41 ff             	lea    eax,[ecx-0x1]
c00143cd:	3c 01                	cmp    al,0x1
c00143cf:	b8 50 41 02 c0       	mov    eax,0xc0024150
c00143d4:	0f 96 44 24 03       	setbe  BYTE PTR [esp+0x3]
c00143d9:	84 5c 24 03          	test   BYTE PTR [esp+0x3],bl
c00143dd:	75 61                	jne    c0014440 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143df:	80 fa 15             	cmp    dl,0x15
c00143e2:	75 1f                	jne    c0014403 <lookupAMDCPUName(unsigned char, unsigned char)+0x162>
c00143e4:	b8 60 41 02 c0       	mov    eax,0xc0024160
c00143e9:	80 f9 01             	cmp    cl,0x1
c00143ec:	74 52                	je     c0014440 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143ee:	89 f3                	mov    ebx,esi
c00143f0:	b8 70 41 02 c0       	mov    eax,0xc0024170
c00143f5:	84 db                	test   bl,bl
c00143f7:	74 47                	je     c0014440 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143f9:	b8 80 41 02 c0       	mov    eax,0xc0024180
c00143fe:	80 f9 30             	cmp    cl,0x30
c0014401:	74 3d                	je     c0014440 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014403:	80 fa 16             	cmp    dl,0x16
c0014406:	0f 94 c2             	sete   dl
c0014409:	84 c9                	test   cl,cl
c001440b:	75 09                	jne    c0014416 <lookupAMDCPUName(unsigned char, unsigned char)+0x175>
c001440d:	b8 90 41 02 c0       	mov    eax,0xc0024190
c0014412:	84 d2                	test   dl,dl
c0014414:	75 2a                	jne    c0014440 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014416:	80 f9 30             	cmp    cl,0x30
c0014419:	75 20                	jne    c001443b <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c001441b:	b8 a0 41 02 c0       	mov    eax,0xc00241a0
c0014420:	84 d2                	test   dl,dl
c0014422:	75 1c                	jne    c0014440 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014424:	eb 15                	jmp    c001443b <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c0014426:	b8 c0 40 02 c0       	mov    eax,0xc00240c0
c001442b:	eb 13                	jmp    c0014440 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001442d:	b8 30 41 02 c0       	mov    eax,0xc0024130
c0014432:	eb 0c                	jmp    c0014440 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014434:	b8 40 41 02 c0       	mov    eax,0xc0024140
c0014439:	eb 05                	jmp    c0014440 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001443b:	b8 72 27 02 c0       	mov    eax,0xc0022772
c0014440:	5a                   	pop    edx
c0014441:	5b                   	pop    ebx
c0014442:	5e                   	pop    esi
c0014443:	5f                   	pop    edi
c0014444:	5d                   	pop    ebp
c0014445:	c3                   	ret    

c0014446 <lookupIntelCPUName(unsigned char, unsigned char)>:
c0014446:	53                   	push   ebx
c0014447:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001444b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001444f:	80 f9 04             	cmp    cl,0x4
c0014452:	75 6a                	jne    c00144be <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0014454:	b8 20 3f 02 c0       	mov    eax,0xc0023f20
c0014459:	80 fa 01             	cmp    dl,0x1
c001445c:	0f 86 9b 02 00 00    	jbe    c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014462:	b8 30 3f 02 c0       	mov    eax,0xc0023f30
c0014467:	80 fa 02             	cmp    dl,0x2
c001446a:	0f 84 8d 02 00 00    	je     c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014470:	b8 40 3f 02 c0       	mov    eax,0xc0023f40
c0014475:	80 fa 03             	cmp    dl,0x3
c0014478:	0f 84 7f 02 00 00    	je     c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001447e:	b8 50 3f 02 c0       	mov    eax,0xc0023f50
c0014483:	80 fa 04             	cmp    dl,0x4
c0014486:	0f 84 71 02 00 00    	je     c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001448c:	b8 60 3f 02 c0       	mov    eax,0xc0023f60
c0014491:	80 fa 05             	cmp    dl,0x5
c0014494:	0f 84 63 02 00 00    	je     c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001449a:	b8 40 3f 02 c0       	mov    eax,0xc0023f40
c001449f:	80 fa 07             	cmp    dl,0x7
c00144a2:	0f 84 55 02 00 00    	je     c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144a8:	8d 5a f8             	lea    ebx,[edx-0x8]
c00144ab:	b8 70 3f 02 c0       	mov    eax,0xc0023f70
c00144b0:	80 fb 01             	cmp    bl,0x1
c00144b3:	0f 87 e0 01 00 00    	ja     c0014699 <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c00144b9:	e9 3f 02 00 00       	jmp    c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144be:	80 f9 05             	cmp    cl,0x5
c00144c1:	75 3e                	jne    c0014501 <lookupIntelCPUName(unsigned char, unsigned char)+0xbb>
c00144c3:	8d 5a ff             	lea    ebx,[edx-0x1]
c00144c6:	b8 80 3f 02 c0       	mov    eax,0xc0023f80
c00144cb:	80 fb 02             	cmp    bl,0x2
c00144ce:	0f 86 29 02 00 00    	jbe    c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144d4:	80 fa 04             	cmp    dl,0x4
c00144d7:	0f 84 f1 01 00 00    	je     c00146ce <lookupIntelCPUName(unsigned char, unsigned char)+0x288>
c00144dd:	80 fa 07             	cmp    dl,0x7
c00144e0:	0f 84 17 02 00 00    	je     c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144e6:	b8 90 3f 02 c0       	mov    eax,0xc0023f90
c00144eb:	80 fa 08             	cmp    dl,0x8
c00144ee:	0f 84 09 02 00 00    	je     c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144f4:	b8 a0 3f 02 c0       	mov    eax,0xc0023fa0
c00144f9:	80 fa 09             	cmp    dl,0x9
c00144fc:	e9 96 01 00 00       	jmp    c0014697 <lookupIntelCPUName(unsigned char, unsigned char)+0x251>
c0014501:	80 f9 06             	cmp    cl,0x6
c0014504:	0f 85 80 01 00 00    	jne    c001468a <lookupIntelCPUName(unsigned char, unsigned char)+0x244>
c001450a:	b8 b0 3f 02 c0       	mov    eax,0xc0023fb0
c001450f:	80 fa 01             	cmp    dl,0x1
c0014512:	0f 84 e5 01 00 00    	je     c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014518:	8d 42 fb             	lea    eax,[edx-0x5]
c001451b:	3c 01                	cmp    al,0x1
c001451d:	0f 86 b2 01 00 00    	jbe    c00146d5 <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c0014523:	80 fa 03             	cmp    dl,0x3
c0014526:	0f 84 a9 01 00 00    	je     c00146d5 <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c001452c:	8d 5a f9             	lea    ebx,[edx-0x7]
c001452f:	b8 d0 3f 02 c0       	mov    eax,0xc0023fd0
c0014534:	80 fb 01             	cmp    bl,0x1
c0014537:	0f 86 c0 01 00 00    	jbe    c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001453d:	80 fa 09             	cmp    dl,0x9
c0014540:	0f 84 96 01 00 00    	je     c00146dc <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0014546:	8d 5a f6             	lea    ebx,[edx-0xa]
c0014549:	80 fb 01             	cmp    bl,0x1
c001454c:	0f 86 ab 01 00 00    	jbe    c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014552:	b8 e0 3f 02 c0       	mov    eax,0xc0023fe0
c0014557:	80 fa 0d             	cmp    dl,0xd
c001455a:	0f 84 9d 01 00 00    	je     c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014560:	b8 f0 3f 02 c0       	mov    eax,0xc0023ff0
c0014565:	80 fa 0e             	cmp    dl,0xe
c0014568:	0f 84 8f 01 00 00    	je     c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001456e:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0014573:	80 fa 0f             	cmp    dl,0xf
c0014576:	0f 84 81 01 00 00    	je     c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001457c:	b8 e0 3f 02 c0       	mov    eax,0xc0023fe0
c0014581:	80 fa 15             	cmp    dl,0x15
c0014584:	0f 84 73 01 00 00    	je     c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001458a:	8d 5a ea             	lea    ebx,[edx-0x16]
c001458d:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0014592:	80 fb 01             	cmp    bl,0x1
c0014595:	0f 86 62 01 00 00    	jbe    c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001459b:	80 fa 1a             	cmp    dl,0x1a
c001459e:	0f 84 3f 01 00 00    	je     c00146e3 <lookupIntelCPUName(unsigned char, unsigned char)+0x29d>
c00145a4:	80 fa 1c             	cmp    dl,0x1c
c00145a7:	0f 84 3d 01 00 00    	je     c00146ea <lookupIntelCPUName(unsigned char, unsigned char)+0x2a4>
c00145ad:	80 fa 1d             	cmp    dl,0x1d
c00145b0:	0f 84 47 01 00 00    	je     c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145b6:	b8 30 40 02 c0       	mov    eax,0xc0024030
c00145bb:	80 fa 25             	cmp    dl,0x25
c00145be:	0f 84 39 01 00 00    	je     c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145c4:	8d 5a da             	lea    ebx,[edx-0x26]
c00145c7:	b8 20 40 02 c0       	mov    eax,0xc0024020
c00145cc:	80 fb 01             	cmp    bl,0x1
c00145cf:	0f 86 28 01 00 00    	jbe    c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145d5:	b8 40 40 02 c0       	mov    eax,0xc0024040
c00145da:	80 fa 2a             	cmp    dl,0x2a
c00145dd:	0f 84 1a 01 00 00    	je     c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145e3:	b8 30 40 02 c0       	mov    eax,0xc0024030
c00145e8:	80 fa 2c             	cmp    dl,0x2c
c00145eb:	0f 84 0c 01 00 00    	je     c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145f1:	b8 40 40 02 c0       	mov    eax,0xc0024040
c00145f6:	80 fa 2d             	cmp    dl,0x2d
c00145f9:	0f 84 fe 00 00 00    	je     c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145ff:	b8 10 40 02 c0       	mov    eax,0xc0024010
c0014604:	80 fa 2e             	cmp    dl,0x2e
c0014607:	0f 84 f0 00 00 00    	je     c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001460d:	b8 30 40 02 c0       	mov    eax,0xc0024030
c0014612:	80 fa 2f             	cmp    dl,0x2f
c0014615:	0f 84 e2 00 00 00    	je     c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001461b:	8d 5a cb             	lea    ebx,[edx-0x35]
c001461e:	b8 20 40 02 c0       	mov    eax,0xc0024020
c0014623:	80 fb 01             	cmp    bl,0x1
c0014626:	0f 86 d1 00 00 00    	jbe    c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001462c:	b8 50 40 02 c0       	mov    eax,0xc0024050
c0014631:	80 fa 37             	cmp    dl,0x37
c0014634:	0f 84 c3 00 00 00    	je     c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001463a:	b8 60 40 02 c0       	mov    eax,0xc0024060
c001463f:	80 fa 3a             	cmp    dl,0x3a
c0014642:	0f 84 b5 00 00 00    	je     c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014648:	b8 70 40 02 c0       	mov    eax,0xc0024070
c001464d:	80 fa 3c             	cmp    dl,0x3c
c0014650:	0f 84 a7 00 00 00    	je     c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014656:	b8 80 40 02 c0       	mov    eax,0xc0024080
c001465b:	80 fa 3d             	cmp    dl,0x3d
c001465e:	0f 84 99 00 00 00    	je     c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014664:	b8 60 40 02 c0       	mov    eax,0xc0024060
c0014669:	80 fa 3e             	cmp    dl,0x3e
c001466c:	0f 84 8b 00 00 00    	je     c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014672:	8d 42 bb             	lea    eax,[edx-0x45]
c0014675:	3c 01                	cmp    al,0x1
c0014677:	76 78                	jbe    c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c0014679:	80 fa 3f             	cmp    dl,0x3f
c001467c:	74 73                	je     c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c001467e:	80 fa 4a             	cmp    dl,0x4a
c0014681:	74 75                	je     c00146f8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c0014683:	80 fa 4d             	cmp    dl,0x4d
c0014686:	75 11                	jne    c0014699 <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c0014688:	eb 6e                	jmp    c00146f8 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c001468a:	80 f9 0b             	cmp    cl,0xb
c001468d:	75 0a                	jne    c0014699 <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c001468f:	b8 90 40 02 c0       	mov    eax,0xc0024090
c0014694:	80 fa 01             	cmp    dl,0x1
c0014697:	74 64                	je     c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014699:	80 f9 0f             	cmp    cl,0xf
c001469c:	b8 a0 40 02 c0       	mov    eax,0xc00240a0
c00146a1:	0f 94 c1             	sete   cl
c00146a4:	80 fa 02             	cmp    dl,0x2
c00146a7:	0f 96 c3             	setbe  bl
c00146aa:	84 cb                	test   bl,cl
c00146ac:	75 4f                	jne    c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146ae:	8d 42 fd             	lea    eax,[edx-0x3]
c00146b1:	3c 01                	cmp    al,0x1
c00146b3:	0f 96 c0             	setbe  al
c00146b6:	80 fa 06             	cmp    dl,0x6
c00146b9:	0f 94 c2             	sete   dl
c00146bc:	09 c2                	or     edx,eax
c00146be:	b8 72 27 02 c0       	mov    eax,0xc0022772
c00146c3:	84 ca                	test   dl,cl
c00146c5:	74 36                	je     c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146c7:	b8 b0 40 02 c0       	mov    eax,0xc00240b0
c00146cc:	eb 2f                	jmp    c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146ce:	b8 90 3f 02 c0       	mov    eax,0xc0023f90
c00146d3:	eb 28                	jmp    c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146d5:	b8 c0 3f 02 c0       	mov    eax,0xc0023fc0
c00146da:	eb 21                	jmp    c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146dc:	b8 e0 3f 02 c0       	mov    eax,0xc0023fe0
c00146e1:	eb 1a                	jmp    c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146e3:	b8 10 40 02 c0       	mov    eax,0xc0024010
c00146e8:	eb 13                	jmp    c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146ea:	b8 20 40 02 c0       	mov    eax,0xc0024020
c00146ef:	eb 0c                	jmp    c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146f1:	b8 70 40 02 c0       	mov    eax,0xc0024070
c00146f6:	eb 05                	jmp    c00146fd <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146f8:	b8 50 40 02 c0       	mov    eax,0xc0024050
c00146fd:	5b                   	pop    ebx
c00146fe:	c3                   	ret    

c00146ff <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c00146ff:	60                   	pusha  
c0014700:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014708:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001470c:	9c                   	pushf  
c001470d:	fa                   	cli    
c001470e:	0f 09                	wbinvd 
c0014710:	0f 30                	wrmsr  
c0014712:	9d                   	popf   
c0014713:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014717:	89 02                	mov    DWORD PTR [edx],eax
c0014719:	61                   	popa   
c001471a:	c3                   	ret    

c001471b <AMD_K6_read_msr(unsigned int, REGS*)>:
c001471b:	60                   	pusha  
c001471c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014720:	9c                   	pushf  
c0014721:	fa                   	cli    
c0014722:	0f 09                	wbinvd 
c0014724:	31 c0                	xor    eax,eax
c0014726:	31 d2                	xor    edx,edx
c0014728:	0f 32                	rdmsr  
c001472a:	9d                   	popf   
c001472b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001472f:	89 02                	mov    DWORD PTR [edx],eax
c0014731:	61                   	popa   
c0014732:	c3                   	ret    

c0014733 <AMD_K6_writeback(int, int, int)>:
c0014733:	56                   	push   esi
c0014734:	53                   	push   ebx
c0014735:	83 ec 10             	sub    esp,0x10
c0014738:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001473c:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0014741:	75 5d                	jne    c00147a0 <AMD_K6_writeback(int, int, int)+0x6d>
c0014743:	83 f8 08             	cmp    eax,0x8
c0014746:	75 09                	jne    c0014751 <AMD_K6_writeback(int, int, int)+0x1e>
c0014748:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001474d:	7e 13                	jle    c0014762 <AMD_K6_writeback(int, int, int)+0x2f>
c001474f:	eb 30                	jmp    c0014781 <AMD_K6_writeback(int, int, int)+0x4e>
c0014751:	83 f8 06             	cmp    eax,0x6
c0014754:	7c 4a                	jl     c00147a0 <AMD_K6_writeback(int, int, int)+0x6d>
c0014756:	83 f8 07             	cmp    eax,0x7
c0014759:	7e 07                	jle    c0014762 <AMD_K6_writeback(int, int, int)+0x2f>
c001475b:	83 f8 09             	cmp    eax,0x9
c001475e:	74 21                	je     c0014781 <AMD_K6_writeback(int, int, int)+0x4e>
c0014760:	eb 3e                	jmp    c00147a0 <AMD_K6_writeback(int, int, int)+0x6d>
c0014762:	89 e6                	mov    esi,esp
c0014764:	8b 1d e4 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247e4
c001476a:	c1 eb 15             	shr    ebx,0x15
c001476d:	56                   	push   esi
c001476e:	68 82 00 00 c0       	push   0xc0000082
c0014773:	e8 a3 ff ff ff       	call   c001471b <AMD_K6_read_msr(unsigned int, REGS*)>
c0014778:	56                   	push   esi
c0014779:	83 e3 7e             	and    ebx,0x7e
c001477c:	6a 00                	push   0x0
c001477e:	53                   	push   ebx
c001477f:	eb 12                	jmp    c0014793 <AMD_K6_writeback(int, int, int)+0x60>
c0014781:	89 e3                	mov    ebx,esp
c0014783:	53                   	push   ebx
c0014784:	68 82 00 00 c0       	push   0xc0000082
c0014789:	e8 8d ff ff ff       	call   c001471b <AMD_K6_read_msr(unsigned int, REGS*)>
c001478e:	53                   	push   ebx
c001478f:	6a 00                	push   0x0
c0014791:	6a 00                	push   0x0
c0014793:	68 82 00 00 c0       	push   0xc0000082
c0014798:	e8 62 ff ff ff       	call   c00146ff <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c001479d:	83 c4 18             	add    esp,0x18
c00147a0:	83 c4 10             	add    esp,0x10
c00147a3:	5b                   	pop    ebx
c00147a4:	5e                   	pop    esi
c00147a5:	c3                   	ret    

c00147a6 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00147a6:	55                   	push   ebp
c00147a7:	57                   	push   edi
c00147a8:	56                   	push   esi
c00147a9:	53                   	push   ebx
c00147aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147ae:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00147b2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00147b6:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00147ba:	39 05 c0 41 02 c0    	cmp    DWORD PTR ds:0xc00241c0,eax
c00147c0:	75 23                	jne    c00147e5 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00147c2:	a1 ec 51 02 c0       	mov    eax,ds:0xc00251ec
c00147c7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00147cb:	89 06                	mov    DWORD PTR [esi],eax
c00147cd:	a1 e8 51 02 c0       	mov    eax,ds:0xc00251e8
c00147d2:	89 07                	mov    DWORD PTR [edi],eax
c00147d4:	a1 e4 51 02 c0       	mov    eax,ds:0xc00251e4
c00147d9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00147dc:	a1 e0 51 02 c0       	mov    eax,ds:0xc00251e0
c00147e1:	89 02                	mov    DWORD PTR [edx],eax
c00147e3:	eb 3f                	jmp    c0014824 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00147e5:	31 c9                	xor    ecx,ecx
c00147e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147eb:	0f a2                	cpuid  
c00147ed:	89 06                	mov    DWORD PTR [esi],eax
c00147ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00147f3:	89 1f                	mov    DWORD PTR [edi],ebx
c00147f5:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00147f8:	89 10                	mov    DWORD PTR [eax],edx
c00147fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147fe:	a3 c0 41 02 c0       	mov    ds:0xc00241c0,eax
c0014803:	8b 06                	mov    eax,DWORD PTR [esi]
c0014805:	a3 ec 51 02 c0       	mov    ds:0xc00251ec,eax
c001480a:	8b 07                	mov    eax,DWORD PTR [edi]
c001480c:	a3 e8 51 02 c0       	mov    ds:0xc00251e8,eax
c0014811:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014814:	a3 e4 51 02 c0       	mov    ds:0xc00251e4,eax
c0014819:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001481d:	8b 00                	mov    eax,DWORD PTR [eax]
c001481f:	a3 e0 51 02 c0       	mov    ds:0xc00251e0,eax
c0014824:	5b                   	pop    ebx
c0014825:	5e                   	pop    esi
c0014826:	5f                   	pop    edi
c0014827:	5d                   	pop    ebp
c0014828:	c3                   	ret    

c0014829 <cpuidCheckEDX(unsigned int)>:
c0014829:	83 ec 10             	sub    esp,0x10
c001482c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014830:	50                   	push   eax
c0014831:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014835:	50                   	push   eax
c0014836:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001483a:	50                   	push   eax
c001483b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001483f:	50                   	push   eax
c0014840:	6a 01                	push   0x1
c0014842:	e8 5f ff ff ff       	call   c00147a6 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014847:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001484b:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001484f:	0f 95 c0             	setne  al
c0014852:	83 c4 24             	add    esp,0x24
c0014855:	c3                   	ret    

c0014856 <cpuidCheckECX(unsigned int)>:
c0014856:	83 ec 10             	sub    esp,0x10
c0014859:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001485d:	50                   	push   eax
c001485e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014862:	50                   	push   eax
c0014863:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014867:	50                   	push   eax
c0014868:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001486c:	50                   	push   eax
c001486d:	6a 01                	push   0x1
c001486f:	e8 32 ff ff ff       	call   c00147a6 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014874:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014878:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001487c:	0f 95 c0             	setne  al
c001487f:	83 c4 24             	add    esp,0x24
c0014882:	c3                   	ret    

c0014883 <cpuidCheckExtendedEBX(unsigned int)>:
c0014883:	83 ec 10             	sub    esp,0x10
c0014886:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001488a:	50                   	push   eax
c001488b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001488f:	50                   	push   eax
c0014890:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014894:	50                   	push   eax
c0014895:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014899:	50                   	push   eax
c001489a:	6a 07                	push   0x7
c001489c:	e8 05 ff ff ff       	call   c00147a6 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00148a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00148a5:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00148a9:	0f 95 c0             	setne  al
c00148ac:	83 c4 24             	add    esp,0x24
c00148af:	c3                   	ret    

c00148b0 <cpuidCheckExtendedECX(unsigned int)>:
c00148b0:	83 ec 10             	sub    esp,0x10
c00148b3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148b7:	50                   	push   eax
c00148b8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148bc:	50                   	push   eax
c00148bd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148c1:	50                   	push   eax
c00148c2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148c6:	50                   	push   eax
c00148c7:	6a 07                	push   0x7
c00148c9:	e8 d8 fe ff ff       	call   c00147a6 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00148ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00148d2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00148d6:	0f 95 c0             	setne  al
c00148d9:	83 c4 24             	add    esp,0x24
c00148dc:	c3                   	ret    

c00148dd <getCPUNumber()>:
c00148dd:	31 c0                	xor    eax,eax
c00148df:	c3                   	ret    

c00148e0 <thisCPU()>:
c00148e0:	e8 f8 ff ff ff       	call   c00148dd <getCPUNumber()>
c00148e5:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c00148eb:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c00148f2:	c3                   	ret    
c00148f3:	90                   	nop

c00148f4 <CPU::CPU()>:
c00148f4:	83 ec 0c             	sub    esp,0xc
c00148f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148fb:	83 ec 08             	sub    esp,0x8
c00148fe:	68 72 27 02 c0       	push   0xc0022772
c0014903:	50                   	push   eax
c0014904:	e8 19 bf ff ff       	call   c0010822 <Device::Device(char const*)>
c0014909:	83 c4 10             	add    esp,0x10
c001490c:	ba 4c 28 02 c0       	mov    edx,0xc002284c
c0014911:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014915:	89 10                	mov    DWORD PTR [eax],edx
c0014917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001491b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0014925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014929:	05 78 01 00 00       	add    eax,0x178
c001492e:	83 ec 0c             	sub    esp,0xc
c0014931:	50                   	push   eax
c0014932:	e8 c5 6e ff ff       	call   c000b7fc <GDT::GDT()>
c0014937:	83 c4 10             	add    esp,0x10
c001493a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001493e:	05 7c 09 00 00       	add    eax,0x97c
c0014943:	83 ec 0c             	sub    esp,0xc
c0014946:	50                   	push   eax
c0014947:	e8 10 71 ff ff       	call   c000ba5c <IDT::IDT()>
c001494c:	83 c4 10             	add    esp,0x10
c001494f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014953:	05 7c 11 00 00       	add    eax,0x117c
c0014958:	83 ec 0c             	sub    esp,0xc
c001495b:	50                   	push   eax
c001495c:	e8 6d 91 ff ff       	call   c000dace <TSS::TSS()>
c0014961:	83 c4 10             	add    esp,0x10
c0014964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014968:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001496f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014973:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001497d:	90                   	nop
c001497e:	83 c4 0c             	add    esp,0xc
c0014981:	c3                   	ret    

c0014982 <CPU::displayFeatures()>:
c0014982:	53                   	push   ebx
c0014983:	83 ec 10             	sub    esp,0x10
c0014986:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001498a:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0014990:	68 80 24 02 c0       	push   0xc0022480
c0014995:	e8 83 a8 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001499a:	59                   	pop    ecx
c001499b:	58                   	pop    eax
c001499c:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00149a2:	50                   	push   eax
c00149a3:	68 91 24 02 c0       	push   0xc0022491
c00149a8:	e8 70 a8 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c00149ad:	58                   	pop    eax
c00149ae:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00149b4:	c1 e8 0e             	shr    eax,0xe
c00149b7:	5a                   	pop    edx
c00149b8:	0f b6 c0             	movzx  eax,al
c00149bb:	50                   	push   eax
c00149bc:	68 a2 24 02 c0       	push   0xc00224a2
c00149c1:	e8 57 a8 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c00149c6:	59                   	pop    ecx
c00149c7:	58                   	pop    eax
c00149c8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00149ce:	66 c1 e8 06          	shr    ax,0x6
c00149d2:	0f b6 c0             	movzx  eax,al
c00149d5:	50                   	push   eax
c00149d6:	68 b3 24 02 c0       	push   0xc00224b3
c00149db:	e8 3d a8 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c00149e0:	c7 04 24 c6 28 02 c0 	mov    DWORD PTR [esp],0xc00228c6
c00149e7:	e8 31 a8 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c00149ec:	83 c4 10             	add    esp,0x10
c00149ef:	b8 12 11 02 c0       	mov    eax,0xc0021112
c00149f4:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00149fb:	74 05                	je     c0014a02 <CPU::displayFeatures()+0x80>
c00149fd:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014a02:	52                   	push   edx
c0014a03:	52                   	push   edx
c0014a04:	50                   	push   eax
c0014a05:	68 c4 24 02 c0       	push   0xc00224c4
c0014a0a:	e8 0e a8 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0014a0f:	83 c4 10             	add    esp,0x10
c0014a12:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014a17:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0014a1e:	78 05                	js     c0014a25 <CPU::displayFeatures()+0xa3>
c0014a20:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014a25:	51                   	push   ecx
c0014a26:	51                   	push   ecx
c0014a27:	50                   	push   eax
c0014a28:	68 db 24 02 c0       	push   0xc00224db
c0014a2d:	e8 eb a7 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0014a32:	83 c4 10             	add    esp,0x10
c0014a35:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014a3a:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0014a41:	75 05                	jne    c0014a48 <CPU::displayFeatures()+0xc6>
c0014a43:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014a48:	52                   	push   edx
c0014a49:	52                   	push   edx
c0014a4a:	50                   	push   eax
c0014a4b:	68 f2 24 02 c0       	push   0xc00224f2
c0014a50:	e8 c8 a7 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0014a55:	83 c4 10             	add    esp,0x10
c0014a58:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014a5d:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0014a64:	75 05                	jne    c0014a6b <CPU::displayFeatures()+0xe9>
c0014a66:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014a6b:	51                   	push   ecx
c0014a6c:	51                   	push   ecx
c0014a6d:	50                   	push   eax
c0014a6e:	68 09 25 02 c0       	push   0xc0022509
c0014a73:	e8 a5 a7 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0014a78:	83 c4 10             	add    esp,0x10
c0014a7b:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014a80:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014a87:	75 05                	jne    c0014a8e <CPU::displayFeatures()+0x10c>
c0014a89:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014a8e:	52                   	push   edx
c0014a8f:	52                   	push   edx
c0014a90:	50                   	push   eax
c0014a91:	68 20 25 02 c0       	push   0xc0022520
c0014a96:	e8 82 a7 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0014a9b:	83 c4 10             	add    esp,0x10
c0014a9e:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014aa3:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014aaa:	75 05                	jne    c0014ab1 <CPU::displayFeatures()+0x12f>
c0014aac:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014ab1:	51                   	push   ecx
c0014ab2:	51                   	push   ecx
c0014ab3:	50                   	push   eax
c0014ab4:	68 37 25 02 c0       	push   0xc0022537
c0014ab9:	e8 5f a7 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0014abe:	83 c4 10             	add    esp,0x10
c0014ac1:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014ac6:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014acd:	75 05                	jne    c0014ad4 <CPU::displayFeatures()+0x152>
c0014acf:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014ad4:	52                   	push   edx
c0014ad5:	52                   	push   edx
c0014ad6:	50                   	push   eax
c0014ad7:	68 4e 25 02 c0       	push   0xc002254e
c0014adc:	e8 3c a7 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0014ae1:	83 c4 10             	add    esp,0x10
c0014ae4:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014ae9:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0014af0:	75 05                	jne    c0014af7 <CPU::displayFeatures()+0x175>
c0014af2:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014af7:	51                   	push   ecx
c0014af8:	51                   	push   ecx
c0014af9:	50                   	push   eax
c0014afa:	68 65 25 02 c0       	push   0xc0022565
c0014aff:	e8 19 a7 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0014b04:	83 c4 10             	add    esp,0x10
c0014b07:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014b0c:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0014b13:	75 05                	jne    c0014b1a <CPU::displayFeatures()+0x198>
c0014b15:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014b1a:	52                   	push   edx
c0014b1b:	52                   	push   edx
c0014b1c:	50                   	push   eax
c0014b1d:	68 7c 25 02 c0       	push   0xc002257c
c0014b22:	e8 f6 a6 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0014b27:	83 c4 10             	add    esp,0x10
c0014b2a:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014b2f:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0014b36:	75 05                	jne    c0014b3d <CPU::displayFeatures()+0x1bb>
c0014b38:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014b3d:	51                   	push   ecx
c0014b3e:	51                   	push   ecx
c0014b3f:	50                   	push   eax
c0014b40:	68 93 25 02 c0       	push   0xc0022593
c0014b45:	e8 d3 a6 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0014b4a:	83 c4 10             	add    esp,0x10
c0014b4d:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014b52:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014b59:	75 05                	jne    c0014b60 <CPU::displayFeatures()+0x1de>
c0014b5b:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014b60:	52                   	push   edx
c0014b61:	52                   	push   edx
c0014b62:	50                   	push   eax
c0014b63:	68 aa 25 02 c0       	push   0xc00225aa
c0014b68:	e8 b0 a6 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0014b6d:	83 c4 10             	add    esp,0x10
c0014b70:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014b75:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0014b7c:	75 05                	jne    c0014b83 <CPU::displayFeatures()+0x201>
c0014b7e:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014b83:	51                   	push   ecx
c0014b84:	51                   	push   ecx
c0014b85:	50                   	push   eax
c0014b86:	68 c1 25 02 c0       	push   0xc00225c1
c0014b8b:	e8 8d a6 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0014b90:	83 c4 10             	add    esp,0x10
c0014b93:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014b98:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0014b9f:	75 05                	jne    c0014ba6 <CPU::displayFeatures()+0x224>
c0014ba1:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014ba6:	52                   	push   edx
c0014ba7:	52                   	push   edx
c0014ba8:	50                   	push   eax
c0014ba9:	68 d8 25 02 c0       	push   0xc00225d8
c0014bae:	e8 6a a6 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0014bb3:	83 c4 10             	add    esp,0x10
c0014bb6:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014bbb:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0014bc2:	78 05                	js     c0014bc9 <CPU::displayFeatures()+0x247>
c0014bc4:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014bc9:	51                   	push   ecx
c0014bca:	51                   	push   ecx
c0014bcb:	50                   	push   eax
c0014bcc:	68 ef 25 02 c0       	push   0xc00225ef
c0014bd1:	e8 47 a6 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0014bd6:	83 c4 10             	add    esp,0x10
c0014bd9:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014bde:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0014be5:	75 05                	jne    c0014bec <CPU::displayFeatures()+0x26a>
c0014be7:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014bec:	52                   	push   edx
c0014bed:	52                   	push   edx
c0014bee:	50                   	push   eax
c0014bef:	68 06 26 02 c0       	push   0xc0022606
c0014bf4:	e8 24 a6 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0014bf9:	83 c4 18             	add    esp,0x18
c0014bfc:	5b                   	pop    ebx
c0014bfd:	c3                   	ret    

c0014bfe <CPU::detectFeatures()>:
c0014bfe:	55                   	push   ebp
c0014bff:	57                   	push   edi
c0014c00:	56                   	push   esi
c0014c01:	53                   	push   ebx
c0014c02:	83 ec 50             	sub    esp,0x50
c0014c05:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0014c09:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0014c13:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0014c1a:	6a 0d                	push   0xd
c0014c1c:	6a 00                	push   0x0
c0014c1e:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0014c24:	57                   	push   edi
c0014c25:	e8 a3 ba fe ff       	call   c00006cd <memset>
c0014c2a:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0014c2f:	83 c4 10             	add    esp,0x10
c0014c32:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0014c39:	0f 84 04 09 00 00    	je     c0015543 <CPU::detectFeatures()+0x945>
c0014c3f:	83 ec 0c             	sub    esp,0xc
c0014c42:	6a 10                	push   0x10
c0014c44:	e8 e0 fb ff ff       	call   c0014829 <cpuidCheckEDX(unsigned int)>
c0014c49:	83 e0 01             	and    eax,0x1
c0014c4c:	8d 14 00             	lea    edx,[eax+eax*1]
c0014c4f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014c55:	83 e0 fd             	and    eax,0xfffffffd
c0014c58:	09 d0                	or     eax,edx
c0014c5a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014c60:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0014c67:	e8 bd fb ff ff       	call   c0014829 <cpuidCheckEDX(unsigned int)>
c0014c6c:	83 e0 01             	and    eax,0x1
c0014c6f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014c76:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014c7c:	83 e0 fb             	and    eax,0xfffffffb
c0014c7f:	09 d0                	or     eax,edx
c0014c81:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014c87:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0014c8e:	e8 96 fb ff ff       	call   c0014829 <cpuidCheckEDX(unsigned int)>
c0014c93:	83 e0 01             	and    eax,0x1
c0014c96:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014c9d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014ca3:	83 e0 f7             	and    eax,0xfffffff7
c0014ca6:	09 d0                	or     eax,edx
c0014ca8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014cae:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0014cb5:	e8 6f fb ff ff       	call   c0014829 <cpuidCheckEDX(unsigned int)>
c0014cba:	83 e0 01             	and    eax,0x1
c0014cbd:	c1 e0 04             	shl    eax,0x4
c0014cc0:	88 c2                	mov    dl,al
c0014cc2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014cc8:	83 e0 ef             	and    eax,0xffffffef
c0014ccb:	09 d0                	or     eax,edx
c0014ccd:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014cd3:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0014cda:	e8 4a fb ff ff       	call   c0014829 <cpuidCheckEDX(unsigned int)>
c0014cdf:	83 e0 01             	and    eax,0x1
c0014ce2:	c1 e0 05             	shl    eax,0x5
c0014ce5:	88 c2                	mov    dl,al
c0014ce7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014ced:	83 e0 df             	and    eax,0xffffffdf
c0014cf0:	09 d0                	or     eax,edx
c0014cf2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014cf8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0014cff:	e8 25 fb ff ff       	call   c0014829 <cpuidCheckEDX(unsigned int)>
c0014d04:	83 e0 01             	and    eax,0x1
c0014d07:	8d 14 00             	lea    edx,[eax+eax*1]
c0014d0a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014d10:	83 e0 fd             	and    eax,0xfffffffd
c0014d13:	09 d0                	or     eax,edx
c0014d15:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014d1b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0014d22:	e8 02 fb ff ff       	call   c0014829 <cpuidCheckEDX(unsigned int)>
c0014d27:	83 e0 01             	and    eax,0x1
c0014d2a:	c1 e0 06             	shl    eax,0x6
c0014d2d:	88 c2                	mov    dl,al
c0014d2f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014d35:	83 e0 bf             	and    eax,0xffffffbf
c0014d38:	09 d0                	or     eax,edx
c0014d3a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014d40:	58                   	pop    eax
c0014d41:	8d 74 24 28          	lea    esi,[esp+0x28]
c0014d45:	56                   	push   esi
c0014d46:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0014d4a:	55                   	push   ebp
c0014d4b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014d4f:	50                   	push   eax
c0014d50:	8d 54 24 28          	lea    edx,[esp+0x28]
c0014d54:	52                   	push   edx
c0014d55:	6a 00                	push   0x0
c0014d57:	e8 4a fa ff ff       	call   c00147a6 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014d5c:	83 c4 1c             	add    esp,0x1c
c0014d5f:	6a 04                	push   0x4
c0014d61:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0014d65:	50                   	push   eax
c0014d66:	57                   	push   edi
c0014d67:	e8 2b b9 fe ff       	call   c0000697 <memcpy>
c0014d6c:	83 c4 0c             	add    esp,0xc
c0014d6f:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0014d75:	6a 04                	push   0x4
c0014d77:	56                   	push   esi
c0014d78:	50                   	push   eax
c0014d79:	e8 19 b9 fe ff       	call   c0000697 <memcpy>
c0014d7e:	83 c4 0c             	add    esp,0xc
c0014d81:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0014d87:	6a 04                	push   0x4
c0014d89:	55                   	push   ebp
c0014d8a:	50                   	push   eax
c0014d8b:	e8 07 b9 fe ff       	call   c0000697 <memcpy>
c0014d90:	58                   	pop    eax
c0014d91:	5a                   	pop    edx
c0014d92:	68 1d 26 02 c0       	push   0xc002261d
c0014d97:	57                   	push   edi
c0014d98:	e8 20 ba fe ff       	call   c00007bd <strcmp>
c0014d9d:	83 c4 10             	add    esp,0x10
c0014da0:	85 c0                	test   eax,eax
c0014da2:	75 0f                	jne    c0014db3 <CPU::detectFeatures()+0x1b5>
c0014da4:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0014dae:	e9 22 02 00 00       	jmp    c0014fd5 <CPU::detectFeatures()+0x3d7>
c0014db3:	50                   	push   eax
c0014db4:	50                   	push   eax
c0014db5:	68 2a 26 02 c0       	push   0xc002262a
c0014dba:	57                   	push   edi
c0014dbb:	e8 fd b9 fe ff       	call   c00007bd <strcmp>
c0014dc0:	83 c4 10             	add    esp,0x10
c0014dc3:	85 c0                	test   eax,eax
c0014dc5:	74 dd                	je     c0014da4 <CPU::detectFeatures()+0x1a6>
c0014dc7:	51                   	push   ecx
c0014dc8:	51                   	push   ecx
c0014dc9:	68 37 26 02 c0       	push   0xc0022637
c0014dce:	57                   	push   edi
c0014dcf:	e8 e9 b9 fe ff       	call   c00007bd <strcmp>
c0014dd4:	83 c4 10             	add    esp,0x10
c0014dd7:	85 c0                	test   eax,eax
c0014dd9:	74 2a                	je     c0014e05 <CPU::detectFeatures()+0x207>
c0014ddb:	52                   	push   edx
c0014ddc:	52                   	push   edx
c0014ddd:	68 44 26 02 c0       	push   0xc0022644
c0014de2:	57                   	push   edi
c0014de3:	e8 d5 b9 fe ff       	call   c00007bd <strcmp>
c0014de8:	83 c4 10             	add    esp,0x10
c0014deb:	85 c0                	test   eax,eax
c0014ded:	74 16                	je     c0014e05 <CPU::detectFeatures()+0x207>
c0014def:	50                   	push   eax
c0014df0:	50                   	push   eax
c0014df1:	68 51 26 02 c0       	push   0xc0022651
c0014df6:	57                   	push   edi
c0014df7:	e8 c1 b9 fe ff       	call   c00007bd <strcmp>
c0014dfc:	83 c4 10             	add    esp,0x10
c0014dff:	85 c0                	test   eax,eax
c0014e01:	74 48                	je     c0014e4b <CPU::detectFeatures()+0x24d>
c0014e03:	eb 0f                	jmp    c0014e14 <CPU::detectFeatures()+0x216>
c0014e05:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0014e0f:	e9 c1 01 00 00       	jmp    c0014fd5 <CPU::detectFeatures()+0x3d7>
c0014e14:	50                   	push   eax
c0014e15:	50                   	push   eax
c0014e16:	68 5e 26 02 c0       	push   0xc002265e
c0014e1b:	57                   	push   edi
c0014e1c:	e8 9c b9 fe ff       	call   c00007bd <strcmp>
c0014e21:	83 c4 10             	add    esp,0x10
c0014e24:	85 c0                	test   eax,eax
c0014e26:	74 23                	je     c0014e4b <CPU::detectFeatures()+0x24d>
c0014e28:	50                   	push   eax
c0014e29:	50                   	push   eax
c0014e2a:	68 6b 26 02 c0       	push   0xc002266b
c0014e2f:	57                   	push   edi
c0014e30:	e8 88 b9 fe ff       	call   c00007bd <strcmp>
c0014e35:	83 c4 10             	add    esp,0x10
c0014e38:	85 c0                	test   eax,eax
c0014e3a:	75 1e                	jne    c0014e5a <CPU::detectFeatures()+0x25c>
c0014e3c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014e46:	e9 8a 01 00 00       	jmp    c0014fd5 <CPU::detectFeatures()+0x3d7>
c0014e4b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0014e55:	e9 7b 01 00 00       	jmp    c0014fd5 <CPU::detectFeatures()+0x3d7>
c0014e5a:	50                   	push   eax
c0014e5b:	50                   	push   eax
c0014e5c:	68 78 26 02 c0       	push   0xc0022678
c0014e61:	57                   	push   edi
c0014e62:	e8 56 b9 fe ff       	call   c00007bd <strcmp>
c0014e67:	83 c4 10             	add    esp,0x10
c0014e6a:	85 c0                	test   eax,eax
c0014e6c:	75 0f                	jne    c0014e7d <CPU::detectFeatures()+0x27f>
c0014e6e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0014e78:	e9 58 01 00 00       	jmp    c0014fd5 <CPU::detectFeatures()+0x3d7>
c0014e7d:	50                   	push   eax
c0014e7e:	50                   	push   eax
c0014e7f:	68 37 26 02 c0       	push   0xc0022637
c0014e84:	57                   	push   edi
c0014e85:	e8 33 b9 fe ff       	call   c00007bd <strcmp>
c0014e8a:	83 c4 10             	add    esp,0x10
c0014e8d:	85 c0                	test   eax,eax
c0014e8f:	75 0f                	jne    c0014ea0 <CPU::detectFeatures()+0x2a2>
c0014e91:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0014e9b:	e9 35 01 00 00       	jmp    c0014fd5 <CPU::detectFeatures()+0x3d7>
c0014ea0:	50                   	push   eax
c0014ea1:	50                   	push   eax
c0014ea2:	68 85 26 02 c0       	push   0xc0022685
c0014ea7:	57                   	push   edi
c0014ea8:	e8 10 b9 fe ff       	call   c00007bd <strcmp>
c0014ead:	83 c4 10             	add    esp,0x10
c0014eb0:	85 c0                	test   eax,eax
c0014eb2:	75 0f                	jne    c0014ec3 <CPU::detectFeatures()+0x2c5>
c0014eb4:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0014ebe:	e9 12 01 00 00       	jmp    c0014fd5 <CPU::detectFeatures()+0x3d7>
c0014ec3:	51                   	push   ecx
c0014ec4:	51                   	push   ecx
c0014ec5:	68 92 26 02 c0       	push   0xc0022692
c0014eca:	57                   	push   edi
c0014ecb:	e8 ed b8 fe ff       	call   c00007bd <strcmp>
c0014ed0:	83 c4 10             	add    esp,0x10
c0014ed3:	85 c0                	test   eax,eax
c0014ed5:	75 0f                	jne    c0014ee6 <CPU::detectFeatures()+0x2e8>
c0014ed7:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0014ee1:	e9 ef 00 00 00       	jmp    c0014fd5 <CPU::detectFeatures()+0x3d7>
c0014ee6:	52                   	push   edx
c0014ee7:	52                   	push   edx
c0014ee8:	68 9f 26 02 c0       	push   0xc002269f
c0014eed:	57                   	push   edi
c0014eee:	e8 ca b8 fe ff       	call   c00007bd <strcmp>
c0014ef3:	83 c4 10             	add    esp,0x10
c0014ef6:	85 c0                	test   eax,eax
c0014ef8:	75 0f                	jne    c0014f09 <CPU::detectFeatures()+0x30b>
c0014efa:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0014f04:	e9 cc 00 00 00       	jmp    c0014fd5 <CPU::detectFeatures()+0x3d7>
c0014f09:	50                   	push   eax
c0014f0a:	50                   	push   eax
c0014f0b:	68 ac 26 02 c0       	push   0xc00226ac
c0014f10:	57                   	push   edi
c0014f11:	e8 a7 b8 fe ff       	call   c00007bd <strcmp>
c0014f16:	83 c4 10             	add    esp,0x10
c0014f19:	85 c0                	test   eax,eax
c0014f1b:	75 0f                	jne    c0014f2c <CPU::detectFeatures()+0x32e>
c0014f1d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0014f27:	e9 a9 00 00 00       	jmp    c0014fd5 <CPU::detectFeatures()+0x3d7>
c0014f2c:	50                   	push   eax
c0014f2d:	50                   	push   eax
c0014f2e:	68 b9 26 02 c0       	push   0xc00226b9
c0014f33:	57                   	push   edi
c0014f34:	e8 84 b8 fe ff       	call   c00007bd <strcmp>
c0014f39:	83 c4 10             	add    esp,0x10
c0014f3c:	85 c0                	test   eax,eax
c0014f3e:	75 0f                	jne    c0014f4f <CPU::detectFeatures()+0x351>
c0014f40:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0014f4a:	e9 86 00 00 00       	jmp    c0014fd5 <CPU::detectFeatures()+0x3d7>
c0014f4f:	50                   	push   eax
c0014f50:	50                   	push   eax
c0014f51:	68 c6 26 02 c0       	push   0xc00226c6
c0014f56:	57                   	push   edi
c0014f57:	e8 61 b8 fe ff       	call   c00007bd <strcmp>
c0014f5c:	83 c4 10             	add    esp,0x10
c0014f5f:	85 c0                	test   eax,eax
c0014f61:	75 0c                	jne    c0014f6f <CPU::detectFeatures()+0x371>
c0014f63:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0014f6d:	eb 66                	jmp    c0014fd5 <CPU::detectFeatures()+0x3d7>
c0014f6f:	50                   	push   eax
c0014f70:	50                   	push   eax
c0014f71:	68 d3 26 02 c0       	push   0xc00226d3
c0014f76:	57                   	push   edi
c0014f77:	e8 41 b8 fe ff       	call   c00007bd <strcmp>
c0014f7c:	83 c4 10             	add    esp,0x10
c0014f7f:	85 c0                	test   eax,eax
c0014f81:	75 0c                	jne    c0014f8f <CPU::detectFeatures()+0x391>
c0014f83:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0014f8d:	eb 46                	jmp    c0014fd5 <CPU::detectFeatures()+0x3d7>
c0014f8f:	50                   	push   eax
c0014f90:	50                   	push   eax
c0014f91:	68 e0 26 02 c0       	push   0xc00226e0
c0014f96:	57                   	push   edi
c0014f97:	e8 21 b8 fe ff       	call   c00007bd <strcmp>
c0014f9c:	83 c4 10             	add    esp,0x10
c0014f9f:	85 c0                	test   eax,eax
c0014fa1:	74 e0                	je     c0014f83 <CPU::detectFeatures()+0x385>
c0014fa3:	50                   	push   eax
c0014fa4:	50                   	push   eax
c0014fa5:	68 ed 26 02 c0       	push   0xc00226ed
c0014faa:	57                   	push   edi
c0014fab:	e8 0d b8 fe ff       	call   c00007bd <strcmp>
c0014fb0:	83 c4 10             	add    esp,0x10
c0014fb3:	85 c0                	test   eax,eax
c0014fb5:	74 cc                	je     c0014f83 <CPU::detectFeatures()+0x385>
c0014fb7:	51                   	push   ecx
c0014fb8:	51                   	push   ecx
c0014fb9:	68 fa 26 02 c0       	push   0xc00226fa
c0014fbe:	57                   	push   edi
c0014fbf:	e8 f9 b7 fe ff       	call   c00007bd <strcmp>
c0014fc4:	83 c4 10             	add    esp,0x10
c0014fc7:	85 c0                	test   eax,eax
c0014fc9:	74 b8                	je     c0014f83 <CPU::detectFeatures()+0x385>
c0014fcb:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0014fd5:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0014fda:	0f 86 be 00 00 00    	jbe    c001509e <CPU::detectFeatures()+0x4a0>
c0014fe0:	83 ec 0c             	sub    esp,0xc
c0014fe3:	68 80 00 00 00       	push   0x80
c0014fe8:	e8 96 f8 ff ff       	call   c0014883 <cpuidCheckExtendedEBX(unsigned int)>
c0014fed:	83 e0 01             	and    eax,0x1
c0014ff0:	c1 e0 06             	shl    eax,0x6
c0014ff3:	88 c2                	mov    dl,al
c0014ff5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014ffb:	83 e0 bf             	and    eax,0xffffffbf
c0014ffe:	09 d0                	or     eax,edx
c0015000:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0015006:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001500d:	e8 71 f8 ff ff       	call   c0014883 <cpuidCheckExtendedEBX(unsigned int)>
c0015012:	83 e0 01             	and    eax,0x1
c0015015:	c1 e0 04             	shl    eax,0x4
c0015018:	88 c2                	mov    dl,al
c001501a:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0015020:	83 e0 ef             	and    eax,0xffffffef
c0015023:	09 d0                	or     eax,edx
c0015025:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001502b:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0015032:	e8 4c f8 ff ff       	call   c0014883 <cpuidCheckExtendedEBX(unsigned int)>
c0015037:	c1 e0 07             	shl    eax,0x7
c001503a:	88 c2                	mov    dl,al
c001503c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0015042:	83 e0 7f             	and    eax,0x7f
c0015045:	09 d0                	or     eax,edx
c0015047:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001504d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0015054:	e8 57 f8 ff ff       	call   c00148b0 <cpuidCheckExtendedECX(unsigned int)>
c0015059:	83 e0 01             	and    eax,0x1
c001505c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0015063:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0015069:	83 e0 f7             	and    eax,0xfffffff7
c001506c:	09 d0                	or     eax,edx
c001506e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0015074:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001507b:	e8 30 f8 ff ff       	call   c00148b0 <cpuidCheckExtendedECX(unsigned int)>
c0015080:	83 c4 10             	add    esp,0x10
c0015083:	83 e0 01             	and    eax,0x1
c0015086:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001508d:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0015093:	83 e0 fb             	and    eax,0xfffffffb
c0015096:	09 d0                	or     eax,edx
c0015098:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001509e:	83 ec 0c             	sub    esp,0xc
c00150a1:	56                   	push   esi
c00150a2:	55                   	push   ebp
c00150a3:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00150a7:	57                   	push   edi
c00150a8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00150ac:	50                   	push   eax
c00150ad:	6a 01                	push   0x1
c00150af:	e8 f2 f6 ff ff       	call   c00147a6 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00150b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150b8:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00150be:	88 c1                	mov    cl,al
c00150c0:	83 e2 f0             	and    edx,0xfffffff0
c00150c3:	83 e1 0f             	and    ecx,0xf
c00150c6:	09 ca                	or     edx,ecx
c00150c8:	88 c1                	mov    cl,al
c00150ca:	c0 e9 04             	shr    cl,0x4
c00150cd:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00150d3:	0f b6 d1             	movzx  edx,cl
c00150d6:	c1 e2 06             	shl    edx,0x6
c00150d9:	88 4c 24 2f          	mov    BYTE PTR [esp+0x2f],cl
c00150dd:	89 d5                	mov    ebp,edx
c00150df:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00150e5:	66 81 e2 3f c0       	and    dx,0xc03f
c00150ea:	83 c4 20             	add    esp,0x20
c00150ed:	09 ea                	or     edx,ebp
c00150ef:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00150f6:	89 c2                	mov    edx,eax
c00150f8:	c1 ea 08             	shr    edx,0x8
c00150fb:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0015101:	83 e2 0f             	and    edx,0xf
c0015104:	83 e1 3f             	and    ecx,0x3f
c0015107:	89 d5                	mov    ebp,edx
c0015109:	c1 e5 06             	shl    ebp,0x6
c001510c:	09 cd                	or     ebp,ecx
c001510e:	89 e9                	mov    ecx,ebp
c0015110:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0015116:	88 d1                	mov    cl,dl
c0015118:	c0 e9 02             	shr    cl,0x2
c001511b:	89 cd                	mov    ebp,ecx
c001511d:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0015123:	83 e1 c0             	and    ecx,0xffffffc0
c0015126:	09 cd                	or     ebp,ecx
c0015128:	89 e9                	mov    ecx,ebp
c001512a:	89 c5                	mov    ebp,eax
c001512c:	c1 ed 0c             	shr    ebp,0xc
c001512f:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0015135:	83 e5 03             	and    ebp,0x3
c0015138:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001513e:	c1 e5 04             	shl    ebp,0x4
c0015141:	83 e1 cf             	and    ecx,0xffffffcf
c0015144:	09 cd                	or     ebp,ecx
c0015146:	80 fa 06             	cmp    dl,0x6
c0015149:	89 e9                	mov    ecx,ebp
c001514b:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0015151:	74 05                	je     c0015158 <CPU::detectFeatures()+0x55a>
c0015153:	80 fa 0f             	cmp    dl,0xf
c0015156:	75 5d                	jne    c00151b5 <CPU::detectFeatures()+0x5b7>
c0015158:	89 c5                	mov    ebp,eax
c001515a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001515e:	c1 ed 10             	shr    ebp,0x10
c0015161:	c1 e5 04             	shl    ebp,0x4
c0015164:	09 e9                	or     ecx,ebp
c0015166:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001516c:	0f b6 c9             	movzx  ecx,cl
c001516f:	c1 e1 06             	shl    ecx,0x6
c0015172:	66 81 e5 3f c0       	and    bp,0xc03f
c0015177:	09 e9                	or     ecx,ebp
c0015179:	80 fa 0f             	cmp    dl,0xf
c001517c:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0015183:	75 30                	jne    c00151b5 <CPU::detectFeatures()+0x5b7>
c0015185:	c1 e8 14             	shr    eax,0x14
c0015188:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001518e:	83 c0 0f             	add    eax,0xf
c0015191:	83 e2 3f             	and    edx,0x3f
c0015194:	88 c1                	mov    cl,al
c0015196:	c1 e1 06             	shl    ecx,0x6
c0015199:	c0 e8 02             	shr    al,0x2
c001519c:	09 ca                	or     edx,ecx
c001519e:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00151a4:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00151aa:	83 e2 c0             	and    edx,0xffffffc0
c00151ad:	09 d0                	or     eax,edx
c00151af:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00151b5:	83 ec 0c             	sub    esp,0xc
c00151b8:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00151bf:	56                   	push   esi
c00151c0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00151c4:	50                   	push   eax
c00151c5:	57                   	push   edi
c00151c6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00151ca:	55                   	push   ebp
c00151cb:	68 00 00 00 80       	push   0x80000000
c00151d0:	e8 d1 f5 ff ff       	call   c00147a6 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00151d5:	83 c4 20             	add    esp,0x20
c00151d8:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00151e0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00151e4:	76 1e                	jbe    c0015204 <CPU::detectFeatures()+0x606>
c00151e6:	83 ec 0c             	sub    esp,0xc
c00151e9:	56                   	push   esi
c00151ea:	50                   	push   eax
c00151eb:	57                   	push   edi
c00151ec:	55                   	push   ebp
c00151ed:	68 01 00 00 80       	push   0x80000001
c00151f2:	e8 af f5 ff ff       	call   c00147a6 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00151f7:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0015201:	83 c4 20             	add    esp,0x20
c0015204:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001520a:	83 f8 01             	cmp    eax,0x1
c001520d:	75 6f                	jne    c001527e <CPU::detectFeatures()+0x680>
c001520f:	51                   	push   ecx
c0015210:	51                   	push   ecx
c0015211:	68 06 27 02 c0       	push   0xc0022706
c0015216:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001521a:	56                   	push   esi
c001521b:	e8 4c b5 fe ff       	call   c000076c <strcpy>
c0015220:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015226:	5f                   	pop    edi
c0015227:	66 c1 e8 06          	shr    ax,0x6
c001522b:	5d                   	pop    ebp
c001522c:	0f b6 c0             	movzx  eax,al
c001522f:	50                   	push   eax
c0015230:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015236:	c1 e8 0e             	shr    eax,0xe
c0015239:	0f b6 c0             	movzx  eax,al
c001523c:	50                   	push   eax
c001523d:	e8 04 f2 ff ff       	call   c0014446 <lookupIntelCPUName(unsigned char, unsigned char)>
c0015242:	5a                   	pop    edx
c0015243:	59                   	pop    ecx
c0015244:	50                   	push   eax
c0015245:	56                   	push   esi
c0015246:	e8 d8 b5 fe ff       	call   c0000823 <strcat>
c001524b:	5f                   	pop    edi
c001524c:	5d                   	pop    ebp
c001524d:	56                   	push   esi
c001524e:	53                   	push   ebx
c001524f:	e8 c0 b5 ff ff       	call   c0010814 <Device::setName(char const*)>
c0015254:	58                   	pop    eax
c0015255:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001525b:	5a                   	pop    edx
c001525c:	68 0d 27 02 c0       	push   0xc002270d
c0015261:	50                   	push   eax
c0015262:	e8 56 b5 fe ff       	call   c00007bd <strcmp>
c0015267:	83 c4 10             	add    esp,0x10
c001526a:	85 c0                	test   eax,eax
c001526c:	0f 85 53 03 00 00    	jne    c00155c5 <CPU::detectFeatures()+0x9c7>
c0015272:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0015279:	e9 47 03 00 00       	jmp    c00155c5 <CPU::detectFeatures()+0x9c7>
c001527e:	83 f8 02             	cmp    eax,0x2
c0015281:	0f 85 b5 00 00 00    	jne    c001533c <CPU::detectFeatures()+0x73e>
c0015287:	57                   	push   edi
c0015288:	57                   	push   edi
c0015289:	68 1f 27 02 c0       	push   0xc002271f
c001528e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015292:	56                   	push   esi
c0015293:	e8 d4 b4 fe ff       	call   c000076c <strcpy>
c0015298:	5d                   	pop    ebp
c0015299:	58                   	pop    eax
c001529a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00152a0:	66 c1 e8 06          	shr    ax,0x6
c00152a4:	0f b6 c0             	movzx  eax,al
c00152a7:	50                   	push   eax
c00152a8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00152ae:	c1 e8 0e             	shr    eax,0xe
c00152b1:	0f b6 c0             	movzx  eax,al
c00152b4:	50                   	push   eax
c00152b5:	e8 e7 ef ff ff       	call   c00142a1 <lookupAMDCPUName(unsigned char, unsigned char)>
c00152ba:	5a                   	pop    edx
c00152bb:	59                   	pop    ecx
c00152bc:	50                   	push   eax
c00152bd:	56                   	push   esi
c00152be:	e8 60 b5 fe ff       	call   c0000823 <strcat>
c00152c3:	5f                   	pop    edi
c00152c4:	5d                   	pop    ebp
c00152c5:	56                   	push   esi
c00152c6:	53                   	push   ebx
c00152c7:	e8 48 b5 ff ff       	call   c0010814 <Device::setName(char const*)>
c00152cc:	58                   	pop    eax
c00152cd:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00152d3:	5a                   	pop    edx
c00152d4:	68 24 27 02 c0       	push   0xc0022724
c00152d9:	50                   	push   eax
c00152da:	e8 de b4 fe ff       	call   c00007bd <strcmp>
c00152df:	83 c4 10             	add    esp,0x10
c00152e2:	85 c0                	test   eax,eax
c00152e4:	75 20                	jne    c0015306 <CPU::detectFeatures()+0x708>
c00152e6:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c00152ec:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00152f2:	a8 01                	test   al,0x1
c00152f4:	74 10                	je     c0015306 <CPU::detectFeatures()+0x708>
c00152f6:	83 e0 fe             	and    eax,0xfffffffe
c00152f9:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00152ff:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0015306:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001530c:	c1 e8 0e             	shr    eax,0xe
c001530f:	3c 05                	cmp    al,0x5
c0015311:	0f 85 ae 02 00 00    	jne    c00155c5 <CPU::detectFeatures()+0x9c7>
c0015317:	56                   	push   esi
c0015318:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001531e:	83 e0 0f             	and    eax,0xf
c0015321:	50                   	push   eax
c0015322:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015328:	66 c1 e8 06          	shr    ax,0x6
c001532c:	0f b6 c0             	movzx  eax,al
c001532f:	50                   	push   eax
c0015330:	6a 05                	push   0x5
c0015332:	e8 fc f3 ff ff       	call   c0014733 <AMD_K6_writeback(int, int, int)>
c0015337:	e9 ff 01 00 00       	jmp    c001553b <CPU::detectFeatures()+0x93d>
c001533c:	89 c1                	mov    ecx,eax
c001533e:	83 e1 fd             	and    ecx,0xfffffffd
c0015341:	83 f9 04             	cmp    ecx,0x4
c0015344:	74 09                	je     c001534f <CPU::detectFeatures()+0x751>
c0015346:	83 f8 03             	cmp    eax,0x3
c0015349:	0f 85 6f 01 00 00    	jne    c00154be <CPU::detectFeatures()+0x8c0>
c001534f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0015355:	c1 ea 0e             	shr    edx,0xe
c0015358:	80 fa 05             	cmp    dl,0x5
c001535b:	75 62                	jne    c00153bf <CPU::detectFeatures()+0x7c1>
c001535d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0015363:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0015368:	66 81 fa 00 01       	cmp    dx,0x100
c001536d:	75 0c                	jne    c001537b <CPU::detectFeatures()+0x77d>
c001536f:	51                   	push   ecx
c0015370:	51                   	push   ecx
c0015371:	68 2b 27 02 c0       	push   0xc002272b
c0015376:	e9 ba 01 00 00       	jmp    c0015535 <CPU::detectFeatures()+0x937>
c001537b:	66 81 fa 00 02       	cmp    dx,0x200
c0015380:	75 0c                	jne    c001538e <CPU::detectFeatures()+0x790>
c0015382:	52                   	push   edx
c0015383:	52                   	push   edx
c0015384:	68 3e 27 02 c0       	push   0xc002273e
c0015389:	e9 a7 01 00 00       	jmp    c0015535 <CPU::detectFeatures()+0x937>
c001538e:	66 81 fa 40 02       	cmp    dx,0x240
c0015393:	75 0c                	jne    c00153a1 <CPU::detectFeatures()+0x7a3>
c0015395:	50                   	push   eax
c0015396:	50                   	push   eax
c0015397:	68 50 27 02 c0       	push   0xc0022750
c001539c:	e9 94 01 00 00       	jmp    c0015535 <CPU::detectFeatures()+0x937>
c00153a1:	83 f8 06             	cmp    eax,0x6
c00153a4:	0f 84 ee 00 00 00    	je     c0015498 <CPU::detectFeatures()+0x89a>
c00153aa:	83 f9 04             	cmp    ecx,0x4
c00153ad:	0f 84 f6 00 00 00    	je     c00154a9 <CPU::detectFeatures()+0x8ab>
c00153b3:	50                   	push   eax
c00153b4:	50                   	push   eax
c00153b5:	68 76 27 02 c0       	push   0xc0022776
c00153ba:	e9 76 01 00 00       	jmp    c0015535 <CPU::detectFeatures()+0x937>
c00153bf:	80 fa 06             	cmp    dl,0x6
c00153c2:	0f 85 cb 00 00 00    	jne    c0015493 <CPU::detectFeatures()+0x895>
c00153c8:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00153ce:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00153d3:	66 81 fa 80 01       	cmp    dx,0x180
c00153d8:	75 0c                	jne    c00153e6 <CPU::detectFeatures()+0x7e8>
c00153da:	50                   	push   eax
c00153db:	50                   	push   eax
c00153dc:	68 81 27 02 c0       	push   0xc0022781
c00153e1:	e9 4f 01 00 00       	jmp    c0015535 <CPU::detectFeatures()+0x937>
c00153e6:	66 81 fa c0 01       	cmp    dx,0x1c0
c00153eb:	74 07                	je     c00153f4 <CPU::detectFeatures()+0x7f6>
c00153ed:	66 81 fa 00 02       	cmp    dx,0x200
c00153f2:	75 0c                	jne    c0015400 <CPU::detectFeatures()+0x802>
c00153f4:	50                   	push   eax
c00153f5:	50                   	push   eax
c00153f6:	68 91 27 02 c0       	push   0xc0022791
c00153fb:	e9 35 01 00 00       	jmp    c0015535 <CPU::detectFeatures()+0x937>
c0015400:	66 81 fa 40 02       	cmp    dx,0x240
c0015405:	75 0c                	jne    c0015413 <CPU::detectFeatures()+0x815>
c0015407:	50                   	push   eax
c0015408:	50                   	push   eax
c0015409:	68 98 27 02 c0       	push   0xc0022798
c001540e:	e9 22 01 00 00       	jmp    c0015535 <CPU::detectFeatures()+0x937>
c0015413:	66 81 fa 80 02       	cmp    dx,0x280
c0015418:	74 07                	je     c0015421 <CPU::detectFeatures()+0x823>
c001541a:	66 81 fa 40 03       	cmp    dx,0x340
c001541f:	75 0c                	jne    c001542d <CPU::detectFeatures()+0x82f>
c0015421:	50                   	push   eax
c0015422:	50                   	push   eax
c0015423:	68 a1 27 02 c0       	push   0xc00227a1
c0015428:	e9 08 01 00 00       	jmp    c0015535 <CPU::detectFeatures()+0x937>
c001542d:	66 81 fa c0 03       	cmp    dx,0x3c0
c0015432:	75 0c                	jne    c0015440 <CPU::detectFeatures()+0x842>
c0015434:	55                   	push   ebp
c0015435:	55                   	push   ebp
c0015436:	68 a8 27 02 c0       	push   0xc00227a8
c001543b:	e9 f5 00 00 00       	jmp    c0015535 <CPU::detectFeatures()+0x937>
c0015440:	83 f8 06             	cmp    eax,0x6
c0015443:	74 53                	je     c0015498 <CPU::detectFeatures()+0x89a>
c0015445:	83 f9 04             	cmp    ecx,0x4
c0015448:	74 5f                	je     c00154a9 <CPU::detectFeatures()+0x8ab>
c001544a:	57                   	push   edi
c001544b:	57                   	push   edi
c001544c:	68 b1 27 02 c0       	push   0xc00227b1
c0015451:	53                   	push   ebx
c0015452:	e8 bd b3 ff ff       	call   c0010814 <Device::setName(char const*)>
c0015457:	b1 c1                	mov    cl,0xc1
c0015459:	88 c8                	mov    al,cl
c001545b:	e6 22                	out    0x22,al
c001545d:	e4 23                	in     al,0x23
c001545f:	88 c2                	mov    dl,al
c0015461:	88 c8                	mov    al,cl
c0015463:	e6 22                	out    0x22,al
c0015465:	88 d0                	mov    al,dl
c0015467:	83 c8 10             	or     eax,0x10
c001546a:	e6 23                	out    0x23,al
c001546c:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0015473:	89 d0                	mov    eax,edx
c0015475:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0015478:	40                   	inc    eax
c0015479:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001547f:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0015483:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0015489:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001548e:	e9 a8 00 00 00       	jmp    c001553b <CPU::detectFeatures()+0x93d>
c0015493:	83 f8 06             	cmp    eax,0x6
c0015496:	75 0c                	jne    c00154a4 <CPU::detectFeatures()+0x8a6>
c0015498:	56                   	push   esi
c0015499:	56                   	push   esi
c001549a:	68 62 27 02 c0       	push   0xc0022762
c001549f:	e9 91 00 00 00       	jmp    c0015535 <CPU::detectFeatures()+0x937>
c00154a4:	83 f9 04             	cmp    ecx,0x4
c00154a7:	75 0c                	jne    c00154b5 <CPU::detectFeatures()+0x8b7>
c00154a9:	51                   	push   ecx
c00154aa:	51                   	push   ecx
c00154ab:	68 6e 27 02 c0       	push   0xc002276e
c00154b0:	e9 80 00 00 00       	jmp    c0015535 <CPU::detectFeatures()+0x937>
c00154b5:	52                   	push   edx
c00154b6:	52                   	push   edx
c00154b7:	68 bc 27 02 c0       	push   0xc00227bc
c00154bc:	eb 77                	jmp    c0015535 <CPU::detectFeatures()+0x937>
c00154be:	83 f8 07             	cmp    eax,0x7
c00154c1:	75 09                	jne    c00154cc <CPU::detectFeatures()+0x8ce>
c00154c3:	50                   	push   eax
c00154c4:	50                   	push   eax
c00154c5:	68 c6 27 02 c0       	push   0xc00227c6
c00154ca:	eb 69                	jmp    c0015535 <CPU::detectFeatures()+0x937>
c00154cc:	83 f8 0a             	cmp    eax,0xa
c00154cf:	75 09                	jne    c00154da <CPU::detectFeatures()+0x8dc>
c00154d1:	50                   	push   eax
c00154d2:	50                   	push   eax
c00154d3:	68 d1 27 02 c0       	push   0xc00227d1
c00154d8:	eb 5b                	jmp    c0015535 <CPU::detectFeatures()+0x937>
c00154da:	83 f8 0b             	cmp    eax,0xb
c00154dd:	75 09                	jne    c00154e8 <CPU::detectFeatures()+0x8ea>
c00154df:	50                   	push   eax
c00154e0:	50                   	push   eax
c00154e1:	68 d9 27 02 c0       	push   0xc00227d9
c00154e6:	eb 4d                	jmp    c0015535 <CPU::detectFeatures()+0x937>
c00154e8:	83 f8 08             	cmp    eax,0x8
c00154eb:	75 09                	jne    c00154f6 <CPU::detectFeatures()+0x8f8>
c00154ed:	50                   	push   eax
c00154ee:	50                   	push   eax
c00154ef:	68 e2 27 02 c0       	push   0xc00227e2
c00154f4:	eb 3f                	jmp    c0015535 <CPU::detectFeatures()+0x937>
c00154f6:	83 f8 09             	cmp    eax,0x9
c00154f9:	75 09                	jne    c0015504 <CPU::detectFeatures()+0x906>
c00154fb:	50                   	push   eax
c00154fc:	50                   	push   eax
c00154fd:	68 ea 27 02 c0       	push   0xc00227ea
c0015502:	eb 31                	jmp    c0015535 <CPU::detectFeatures()+0x937>
c0015504:	83 f8 05             	cmp    eax,0x5
c0015507:	75 09                	jne    c0015512 <CPU::detectFeatures()+0x914>
c0015509:	50                   	push   eax
c001550a:	50                   	push   eax
c001550b:	68 f2 27 02 c0       	push   0xc00227f2
c0015510:	eb 23                	jmp    c0015535 <CPU::detectFeatures()+0x937>
c0015512:	83 f8 0c             	cmp    eax,0xc
c0015515:	75 09                	jne    c0015520 <CPU::detectFeatures()+0x922>
c0015517:	55                   	push   ebp
c0015518:	55                   	push   ebp
c0015519:	68 00 28 02 c0       	push   0xc0022800
c001551e:	eb 15                	jmp    c0015535 <CPU::detectFeatures()+0x937>
c0015520:	83 f8 0d             	cmp    eax,0xd
c0015523:	75 09                	jne    c001552e <CPU::detectFeatures()+0x930>
c0015525:	57                   	push   edi
c0015526:	57                   	push   edi
c0015527:	68 0b 28 02 c0       	push   0xc002280b
c001552c:	eb 07                	jmp    c0015535 <CPU::detectFeatures()+0x937>
c001552e:	56                   	push   esi
c001552f:	56                   	push   esi
c0015530:	68 1f 28 02 c0       	push   0xc002281f
c0015535:	53                   	push   ebx
c0015536:	e8 d9 b2 ff ff       	call   c0010814 <Device::setName(char const*)>
c001553b:	83 c4 10             	add    esp,0x10
c001553e:	e9 82 00 00 00       	jmp    c00155c5 <CPU::detectFeatures()+0x9c7>
c0015543:	51                   	push   ecx
c0015544:	51                   	push   ecx
c0015545:	68 6b 26 02 c0       	push   0xc002266b
c001554a:	57                   	push   edi
c001554b:	e8 1c b2 fe ff       	call   c000076c <strcpy>
c0015550:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001555a:	e8 e0 ac fe ff       	call   c000023f <is486>
c001555f:	83 c4 10             	add    esp,0x10
c0015562:	85 c0                	test   eax,eax
c0015564:	74 2d                	je     c0015593 <CPU::detectFeatures()+0x995>
c0015566:	52                   	push   edx
c0015567:	52                   	push   edx
c0015568:	68 2b 28 02 c0       	push   0xc002282b
c001556d:	53                   	push   ebx
c001556e:	e8 a1 b2 ff ff       	call   c0010814 <Device::setName(char const*)>
c0015573:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001557a:	e8 d9 a5 00 00       	call   c001fb58 <CPU::readCR0()>
c001557f:	83 c4 10             	add    esp,0x10
c0015582:	83 e0 14             	and    eax,0x14
c0015585:	83 f8 04             	cmp    eax,0x4
c0015588:	75 1f                	jne    c00155a9 <CPU::detectFeatures()+0x9ab>
c001558a:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0015591:	eb 32                	jmp    c00155c5 <CPU::detectFeatures()+0x9c7>
c0015593:	50                   	push   eax
c0015594:	50                   	push   eax
c0015595:	68 36 28 02 c0       	push   0xc0022836
c001559a:	53                   	push   ebx
c001559b:	e8 74 b2 ff ff       	call   c0010814 <Device::setName(char const*)>
c00155a0:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00155a7:	eb d1                	jmp    c001557a <CPU::detectFeatures()+0x97c>
c00155a9:	e8 6c ac fe ff       	call   c000021a <hasLegacyFPU>
c00155ae:	83 e0 01             	and    eax,0x1
c00155b1:	8d 14 00             	lea    edx,[eax+eax*1]
c00155b4:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00155ba:	83 e0 fd             	and    eax,0xfffffffd
c00155bd:	09 d0                	or     eax,edx
c00155bf:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00155c5:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00155cc:	83 c4 4c             	add    esp,0x4c
c00155cf:	5b                   	pop    ebx
c00155d0:	5e                   	pop    esi
c00155d1:	5f                   	pop    edi
c00155d2:	5d                   	pop    ebp
c00155d3:	c3                   	ret    

c00155d4 <CPU::setupSMEP()>:
c00155d4:	83 ec 0c             	sub    esp,0xc
c00155d7:	e8 46 a8 00 00       	call   c001fe22 <CPU::readCR4()>
c00155dc:	0d 00 00 10 00       	or     eax,0x100000
c00155e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00155e5:	83 c4 0c             	add    esp,0xc
c00155e8:	e9 50 a8 00 00       	jmp    c001fe3d <CPU::writeCR4(unsigned long)>
c00155ed:	90                   	nop

c00155ee <CPU::setupUMIP()>:
c00155ee:	83 ec 0c             	sub    esp,0xc
c00155f1:	e8 2c a8 00 00       	call   c001fe22 <CPU::readCR4()>
c00155f6:	80 cc 08             	or     ah,0x8
c00155f9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00155fd:	83 c4 0c             	add    esp,0xc
c0015600:	e9 38 a8 00 00       	jmp    c001fe3d <CPU::writeCR4(unsigned long)>
c0015605:	90                   	nop

c0015606 <CPU::setupTSC()>:
c0015606:	83 ec 0c             	sub    esp,0xc
c0015609:	e8 14 a8 00 00       	call   c001fe22 <CPU::readCR4()>
c001560e:	83 c8 04             	or     eax,0x4
c0015611:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015615:	83 c4 0c             	add    esp,0xc
c0015618:	e9 20 a8 00 00       	jmp    c001fe3d <CPU::writeCR4(unsigned long)>
c001561d:	90                   	nop

c001561e <CPU::setupLargePages()>:
c001561e:	83 ec 0c             	sub    esp,0xc
c0015621:	e8 fc a7 00 00       	call   c001fe22 <CPU::readCR4()>
c0015626:	83 c8 10             	or     eax,0x10
c0015629:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001562d:	83 c4 0c             	add    esp,0xc
c0015630:	e9 08 a8 00 00       	jmp    c001fe3d <CPU::writeCR4(unsigned long)>
c0015635:	90                   	nop

c0015636 <CPU::setupPAT()>:
c0015636:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001563b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0015642:	74 2c                	je     c0015670 <CPU::setupPAT()+0x3a>
c0015644:	53                   	push   ebx
c0015645:	83 ec 10             	sub    esp,0x10
c0015648:	68 77 02 00 00       	push   0x277
c001564d:	50                   	push   eax
c001564e:	e8 35 5f ff ff       	call   c000b588 <Computer::rdmsr(unsigned int)>
c0015653:	83 e2 f8             	and    edx,0xfffffff8
c0015656:	83 ca 01             	or     edx,0x1
c0015659:	52                   	push   edx
c001565a:	50                   	push   eax
c001565b:	68 77 02 00 00       	push   0x277
c0015660:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c0015666:	e8 49 5f ff ff       	call   c000b5b4 <Computer::wrmsr(unsigned int, unsigned long long)>
c001566b:	83 c4 28             	add    esp,0x28
c001566e:	5b                   	pop    ebx
c001566f:	c3                   	ret    
c0015670:	c3                   	ret    
c0015671:	90                   	nop

c0015672 <CPU::setupMTRR()>:
c0015672:	c3                   	ret    
c0015673:	90                   	nop

c0015674 <CPU::setupGlobalPages()>:
c0015674:	83 ec 0c             	sub    esp,0xc
c0015677:	e8 a6 a7 00 00       	call   c001fe22 <CPU::readCR4()>
c001567c:	0c 80                	or     al,0x80
c001567e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015682:	83 c4 0c             	add    esp,0xc
c0015685:	e9 b3 a7 00 00       	jmp    c001fe3d <CPU::writeCR4(unsigned long)>

c001568a <CPU::allowUsermodeDataAccess()>:
c001568a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001568e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0015695:	74 03                	je     c001569a <CPU::allowUsermodeDataAccess()+0x10>
c0015697:	0f 01 cb             	stac   
c001569a:	c3                   	ret    
c001569b:	90                   	nop

c001569c <CPU::prohibitUsermodeDataAccess()>:
c001569c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00156a0:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00156a7:	74 03                	je     c00156ac <CPU::prohibitUsermodeDataAccess()+0x10>
c00156a9:	0f 01 ca             	clac   
c00156ac:	c3                   	ret    
c00156ad:	90                   	nop

c00156ae <CPU::setupSMAP()>:
c00156ae:	53                   	push   ebx
c00156af:	83 ec 08             	sub    esp,0x8
c00156b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00156b6:	e8 67 a7 00 00       	call   c001fe22 <CPU::readCR4()>
c00156bb:	83 ec 0c             	sub    esp,0xc
c00156be:	0d 00 00 20 00       	or     eax,0x200000
c00156c3:	50                   	push   eax
c00156c4:	e8 74 a7 00 00       	call   c001fe3d <CPU::writeCR4(unsigned long)>
c00156c9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00156cd:	83 c4 18             	add    esp,0x18
c00156d0:	5b                   	pop    ebx
c00156d1:	eb c9                	jmp    c001569c <CPU::prohibitUsermodeDataAccess()>
c00156d3:	90                   	nop

c00156d4 <CPU::setupFeatures()>:
c00156d4:	53                   	push   ebx
c00156d5:	83 ec 08             	sub    esp,0x8
c00156d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00156dc:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00156e3:	74 0c                	je     c00156f1 <CPU::setupFeatures()+0x1d>
c00156e5:	83 ec 0c             	sub    esp,0xc
c00156e8:	53                   	push   ebx
c00156e9:	e8 e6 fe ff ff       	call   c00155d4 <CPU::setupSMEP()>
c00156ee:	83 c4 10             	add    esp,0x10
c00156f1:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00156f8:	74 0c                	je     c0015706 <CPU::setupFeatures()+0x32>
c00156fa:	83 ec 0c             	sub    esp,0xc
c00156fd:	53                   	push   ebx
c00156fe:	e8 ab ff ff ff       	call   c00156ae <CPU::setupSMAP()>
c0015703:	83 c4 10             	add    esp,0x10
c0015706:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c001570d:	74 0c                	je     c001571b <CPU::setupFeatures()+0x47>
c001570f:	83 ec 0c             	sub    esp,0xc
c0015712:	53                   	push   ebx
c0015713:	e8 d6 fe ff ff       	call   c00155ee <CPU::setupUMIP()>
c0015718:	83 c4 10             	add    esp,0x10
c001571b:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0015722:	74 0c                	je     c0015730 <CPU::setupFeatures()+0x5c>
c0015724:	83 ec 0c             	sub    esp,0xc
c0015727:	53                   	push   ebx
c0015728:	e8 d9 fe ff ff       	call   c0015606 <CPU::setupTSC()>
c001572d:	83 c4 10             	add    esp,0x10
c0015730:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0015737:	74 0c                	je     c0015745 <CPU::setupFeatures()+0x71>
c0015739:	83 ec 0c             	sub    esp,0xc
c001573c:	53                   	push   ebx
c001573d:	e8 dc fe ff ff       	call   c001561e <CPU::setupLargePages()>
c0015742:	83 c4 10             	add    esp,0x10
c0015745:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001574c:	74 0c                	je     c001575a <CPU::setupFeatures()+0x86>
c001574e:	83 ec 0c             	sub    esp,0xc
c0015751:	53                   	push   ebx
c0015752:	e8 1d ff ff ff       	call   c0015674 <CPU::setupGlobalPages()>
c0015757:	83 c4 10             	add    esp,0x10
c001575a:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0015761:	74 0d                	je     c0015770 <CPU::setupFeatures()+0x9c>
c0015763:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0015767:	83 c4 08             	add    esp,0x8
c001576a:	5b                   	pop    ebx
c001576b:	e9 c6 fe ff ff       	jmp    c0015636 <CPU::setupPAT()>
c0015770:	83 c4 08             	add    esp,0x8
c0015773:	5b                   	pop    ebx
c0015774:	c3                   	ret    
c0015775:	90                   	nop

c0015776 <CPU::open(int, int, void*)>:
c0015776:	57                   	push   edi
c0015777:	56                   	push   esi
c0015778:	53                   	push   ebx
c0015779:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001577d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015781:	83 ec 0c             	sub    esp,0xc
c0015784:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001578a:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0015790:	50                   	push   eax
c0015791:	e8 e2 60 ff ff       	call   c000b878 <GDT::setup()>
c0015796:	83 c4 0c             	add    esp,0xc
c0015799:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001579f:	6a 00                	push   0x0
c00157a1:	68 ef be ad de       	push   0xdeadbeef
c00157a6:	57                   	push   edi
c00157a7:	e8 62 83 ff ff       	call   c000db0e <TSS::setup(unsigned long, unsigned long)>
c00157ac:	89 3c 24             	mov    DWORD PTR [esp],edi
c00157af:	e8 3a 83 ff ff       	call   c000daee <TSS::flush()>
c00157b4:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00157ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00157bd:	e8 10 63 ff ff       	call   c000bad2 <IDT::setup()>
c00157c2:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c00157c9:	e8 66 a6 00 00       	call   c001fe34 <CPU::writeDR7(unsigned long)>
c00157ce:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00157d8:	e8 e4 6d ff ff       	call   c000c5c1 <Phys::allocatePage()>
c00157dd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00157e3:	89 30                	mov    DWORD PTR [eax],esi
c00157e5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00157eb:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00157ee:	58                   	pop    eax
c00157ef:	5a                   	pop    edx
c00157f0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00157f6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00157fa:	e8 a3 93 ff ff       	call   c000eba2 <VAS::setCPUSpecific(unsigned long)>
c00157ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015802:	e8 f7 f3 ff ff       	call   c0014bfe <CPU::detectFeatures()>
c0015807:	e8 22 c3 ff ff       	call   c0011b2e <setupInterruptController()>
c001580c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0015812:	a1 c0 47 02 c0       	mov    eax,ds:0xc00247c0
c0015817:	83 e0 10             	and    eax,0x10
c001581a:	83 f8 01             	cmp    eax,0x1
c001581d:	19 c0                	sbb    eax,eax
c001581f:	83 e0 46             	and    eax,0x46
c0015822:	83 c0 1e             	add    eax,0x1e
c0015825:	89 04 24             	mov    DWORD PTR [esp],eax
c0015828:	e8 a7 d6 ff ff       	call   c0012ed4 <setupTimer(int)>
c001582d:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0015833:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015836:	e8 99 fe ff ff       	call   c00156d4 <CPU::setupFeatures()>
c001583b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001583e:	e8 3f f1 ff ff       	call   c0014982 <CPU::displayFeatures()>
c0015843:	83 c4 10             	add    esp,0x10
c0015846:	5b                   	pop    ebx
c0015847:	31 c0                	xor    eax,eax
c0015849:	5e                   	pop    esi
c001584a:	5f                   	pop    edi
c001584b:	c3                   	ret    

c001584c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001584c:	56                   	push   esi
c001584d:	53                   	push   ebx
c001584e:	51                   	push   ecx
c001584f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015853:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015857:	8b 5a 38             	mov    ebx,DWORD PTR [edx+0x38]
c001585a:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c001585d:	88 c1                	mov    cl,al
c001585f:	c0 e9 06             	shr    cl,0x6
c0015862:	88 0c 24             	mov    BYTE PTR [esp],cl
c0015865:	88 c1                	mov    cl,al
c0015867:	66 c1 e8 03          	shr    ax,0x3
c001586b:	83 e1 07             	and    ecx,0x7
c001586e:	83 e0 07             	and    eax,0x7
c0015871:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c0015875:	88 06                	mov    BYTE PTR [esi],al
c0015877:	74 7f                	je     c00158f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c0015879:	80 f9 04             	cmp    cl,0x4
c001587c:	74 7a                	je     c00158f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c001587e:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0015882:	75 05                	jne    c0015889 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x3d>
c0015884:	80 f9 05             	cmp    cl,0x5
c0015887:	74 6f                	je     c00158f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c0015889:	84 c9                	test   cl,cl
c001588b:	75 05                	jne    c0015892 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x46>
c001588d:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c0015890:	eb 3c                	jmp    c00158ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015892:	80 f9 01             	cmp    cl,0x1
c0015895:	75 05                	jne    c001589c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x50>
c0015897:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001589a:	eb 32                	jmp    c00158ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c001589c:	80 f9 02             	cmp    cl,0x2
c001589f:	75 05                	jne    c00158a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5a>
c00158a1:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00158a4:	eb 28                	jmp    c00158ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158a6:	31 c0                	xor    eax,eax
c00158a8:	80 f9 03             	cmp    cl,0x3
c00158ab:	75 05                	jne    c00158b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x66>
c00158ad:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00158b0:	eb 1c                	jmp    c00158ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158b2:	80 f9 05             	cmp    cl,0x5
c00158b5:	75 05                	jne    c00158bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x70>
c00158b7:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c00158ba:	eb 12                	jmp    c00158ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158bc:	80 f9 06             	cmp    cl,0x6
c00158bf:	75 05                	jne    c00158c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7a>
c00158c1:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00158c4:	eb 08                	jmp    c00158ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158c6:	80 f9 07             	cmp    cl,0x7
c00158c9:	75 03                	jne    c00158ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158cb:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00158ce:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c00158d2:	75 10                	jne    c00158e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x98>
c00158d4:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00158d8:	b9 03 00 00 00       	mov    ecx,0x3
c00158dd:	01 d0                	add    eax,edx
c00158df:	e9 42 01 00 00       	jmp    c0015a26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c00158e4:	b9 02 00 00 00       	mov    ecx,0x2
c00158e9:	80 3c 24 02          	cmp    BYTE PTR [esp],0x2
c00158ed:	0f 85 33 01 00 00    	jne    c0015a26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c00158f3:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00158f6:	eb 18                	jmp    c0015910 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xc4>
c00158f8:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00158fc:	0f 94 44 24 02       	sete   BYTE PTR [esp+0x2]
c0015901:	80 f9 05             	cmp    cl,0x5
c0015904:	0f 94 c0             	sete   al
c0015907:	84 44 24 02          	test   BYTE PTR [esp+0x2],al
c001590b:	74 0d                	je     c001591a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001590d:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0015910:	b9 06 00 00 00       	mov    ecx,0x6
c0015915:	e9 0c 01 00 00       	jmp    c0015a26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c001591a:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c001591e:	0f 84 06 01 00 00    	je     c0015a2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1de>
c0015924:	80 f9 04             	cmp    cl,0x4
c0015927:	0f 85 06 01 00 00    	jne    c0015a33 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c001592d:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0015930:	89 c6                	mov    esi,eax
c0015932:	88 c1                	mov    cl,al
c0015934:	66 c1 ee 03          	shr    si,0x3
c0015938:	c0 e9 06             	shr    cl,0x6
c001593b:	83 e6 07             	and    esi,0x7
c001593e:	24 07                	and    al,0x7
c0015940:	88 4c 24 03          	mov    BYTE PTR [esp+0x3],cl
c0015944:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015948:	89 f1                	mov    ecx,esi
c001594a:	75 05                	jne    c0015951 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x105>
c001594c:	8b 72 2c             	mov    esi,DWORD PTR [edx+0x2c]
c001594f:	eb 4b                	jmp    c001599c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015951:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0015956:	75 05                	jne    c001595d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x111>
c0015958:	8b 72 28             	mov    esi,DWORD PTR [edx+0x28]
c001595b:	eb 3f                	jmp    c001599c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001595d:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0015962:	75 05                	jne    c0015969 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x11d>
c0015964:	8b 72 24             	mov    esi,DWORD PTR [edx+0x24]
c0015967:	eb 33                	jmp    c001599c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015969:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001596e:	75 05                	jne    c0015975 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x129>
c0015970:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0015973:	eb 27                	jmp    c001599c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015975:	80 7c 24 01 04       	cmp    BYTE PTR [esp+0x1],0x4
c001597a:	75 05                	jne    c0015981 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x135>
c001597c:	8b 72 44             	mov    esi,DWORD PTR [edx+0x44]
c001597f:	eb 1b                	jmp    c001599c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015981:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c0015986:	75 05                	jne    c001598d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x141>
c0015988:	8b 72 18             	mov    esi,DWORD PTR [edx+0x18]
c001598b:	eb 0f                	jmp    c001599c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001598d:	80 7c 24 01 06       	cmp    BYTE PTR [esp+0x1],0x6
c0015992:	75 05                	jne    c0015999 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14d>
c0015994:	8b 72 14             	mov    esi,DWORD PTR [edx+0x14]
c0015997:	eb 03                	jmp    c001599c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015999:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c001599c:	84 c9                	test   cl,cl
c001599e:	75 05                	jne    c00159a5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00159a0:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c00159a3:	eb 3c                	jmp    c00159e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159a5:	80 f9 01             	cmp    cl,0x1
c00159a8:	75 05                	jne    c00159af <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00159aa:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00159ad:	eb 32                	jmp    c00159e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159af:	80 f9 02             	cmp    cl,0x2
c00159b2:	75 05                	jne    c00159b9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00159b4:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00159b7:	eb 28                	jmp    c00159e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159b9:	80 f9 03             	cmp    cl,0x3
c00159bc:	75 05                	jne    c00159c3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x177>
c00159be:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00159c1:	eb 1e                	jmp    c00159e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159c3:	31 c0                	xor    eax,eax
c00159c5:	80 f9 04             	cmp    cl,0x4
c00159c8:	74 17                	je     c00159e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159ca:	80 f9 05             	cmp    cl,0x5
c00159cd:	75 05                	jne    c00159d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00159cf:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c00159d2:	eb 0d                	jmp    c00159e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159d4:	80 f9 06             	cmp    cl,0x6
c00159d7:	75 05                	jne    c00159de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x192>
c00159d9:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00159dc:	eb 03                	jmp    c00159e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159de:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00159e1:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c00159e6:	8a 4c 24 03          	mov    cl,BYTE PTR [esp+0x3]
c00159ea:	0f 94 c2             	sete   dl
c00159ed:	d3 e0                	shl    eax,cl
c00159ef:	22 54 24 02          	and    dl,BYTE PTR [esp+0x2]
c00159f3:	74 07                	je     c00159fc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b0>
c00159f5:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00159f8:	31 d2                	xor    edx,edx
c00159fa:	eb 23                	jmp    c0015a1f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00159fc:	01 f0                	add    eax,esi
c00159fe:	b9 03 00 00 00       	mov    ecx,0x3
c0015a03:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0015a07:	74 33                	je     c0015a3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015a09:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c0015a0d:	75 0d                	jne    c0015a1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d0>
c0015a0f:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0015a13:	01 c8                	add    eax,ecx
c0015a15:	b9 04 00 00 00       	mov    ecx,0x4
c0015a1a:	eb 20                	jmp    c0015a3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015a1c:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0015a1f:	b9 07 00 00 00       	mov    ecx,0x7
c0015a24:	eb 16                	jmp    c0015a3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015a26:	31 d2                	xor    edx,edx
c0015a28:	eb 12                	jmp    c0015a3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015a2a:	b9 02 00 00 00       	mov    ecx,0x2
c0015a2f:	b2 01                	mov    dl,0x1
c0015a31:	eb 07                	jmp    c0015a3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ee>
c0015a33:	31 d2                	xor    edx,edx
c0015a35:	b9 02 00 00 00       	mov    ecx,0x2
c0015a3a:	31 c0                	xor    eax,eax
c0015a3c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015a40:	89 0b                	mov    DWORD PTR [ebx],ecx
c0015a42:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015a46:	88 11                	mov    BYTE PTR [ecx],dl
c0015a48:	5a                   	pop    edx
c0015a49:	5b                   	pop    ebx
c0015a4a:	5e                   	pop    esi
c0015a4b:	c3                   	ret    

c0015a4c <Krnl::panic(char const*)>:
c0015a4c:	55                   	push   ebp
c0015a4d:	89 e5                	mov    ebp,esp
c0015a4f:	53                   	push   ebx
c0015a50:	51                   	push   ecx
c0015a51:	a1 f0 51 02 c0       	mov    eax,ds:0xc00251f0
c0015a56:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0015a59:	85 c0                	test   eax,eax
c0015a5b:	74 02                	je     c0015a5f <Krnl::panic(char const*)+0x13>
c0015a5d:	ff d0                	call   eax
c0015a5f:	fa                   	cli    
c0015a60:	50                   	push   eax
c0015a61:	c6 05 f4 51 02 c0 01 	mov    BYTE PTR ds:0xc00251f4,0x1
c0015a68:	50                   	push   eax
c0015a69:	c6 05 e0 3b 02 c0 00 	mov    BYTE PTR ds:0xc0023be0,0x0
c0015a70:	53                   	push   ebx
c0015a71:	68 70 28 02 c0       	push   0xc0022870
c0015a76:	e8 a2 97 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0015a7b:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015a80:	5a                   	pop    edx
c0015a81:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015a87:	51                   	push   ecx
c0015a88:	e8 c0 78 ff ff       	call   c000d34d <setActiveTerminal(VgaText*)>
c0015a8d:	83 c4 0c             	add    esp,0xc
c0015a90:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015a95:	6a 01                	push   0x1
c0015a97:	6a 0f                	push   0xf
c0015a99:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015a9f:	50                   	push   eax
c0015aa0:	e8 e7 72 ff ff       	call   c000cd8c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015aa5:	58                   	pop    eax
c0015aa6:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015aab:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015ab1:	50                   	push   eax
c0015ab2:	e8 39 7b ff ff       	call   c000d5f0 <VgaText::clearScreen()>
c0015ab7:	58                   	pop    eax
c0015ab8:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015abd:	5a                   	pop    edx
c0015abe:	68 89 28 02 c0       	push   0xc0022889
c0015ac3:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015ac9:	51                   	push   ecx
c0015aca:	e8 9f 7c ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015acf:	58                   	pop    eax
c0015ad0:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015ad5:	5a                   	pop    edx
c0015ad6:	68 30 29 02 c0       	push   0xc0022930
c0015adb:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015ae1:	51                   	push   ecx
c0015ae2:	e8 87 7c ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015ae7:	58                   	pop    eax
c0015ae8:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015aed:	5a                   	pop    edx
c0015aee:	68 a5 28 02 c0       	push   0xc00228a5
c0015af3:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015af9:	51                   	push   ecx
c0015afa:	e8 6f 7c ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015aff:	58                   	pop    eax
c0015b00:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b05:	5a                   	pop    edx
c0015b06:	53                   	push   ebx
c0015b07:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b0d:	51                   	push   ecx
c0015b0e:	e8 5b 7c ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015b13:	5b                   	pop    ebx
c0015b14:	58                   	pop    eax
c0015b15:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b1a:	68 c5 28 02 c0       	push   0xc00228c5
c0015b1f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b25:	50                   	push   eax
c0015b26:	e8 43 7c ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015b2b:	58                   	pop    eax
c0015b2c:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b31:	5a                   	pop    edx
c0015b32:	68 6c 29 02 c0       	push   0xc002296c
c0015b37:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b3d:	51                   	push   ecx
c0015b3e:	e8 2b 7c ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015b43:	5b                   	pop    ebx
c0015b44:	58                   	pop    eax
c0015b45:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b4a:	68 a5 28 02 c0       	push   0xc00228a5
c0015b4f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b55:	50                   	push   eax
c0015b56:	e8 13 7c ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015b5b:	58                   	pop    eax
c0015b5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b61:	5a                   	pop    edx
c0015b62:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015b65:	83 c0 0c             	add    eax,0xc
c0015b68:	50                   	push   eax
c0015b69:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b6e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b74:	51                   	push   ecx
c0015b75:	e8 f4 7b ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015b7a:	5b                   	pop    ebx
c0015b7b:	58                   	pop    eax
c0015b7c:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b81:	68 c4 28 02 c0       	push   0xc00228c4
c0015b86:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b8c:	50                   	push   eax
c0015b8d:	e8 dc 7b ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015b92:	58                   	pop    eax
c0015b93:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b98:	5a                   	pop    edx
c0015b99:	68 98 29 02 c0       	push   0xc0022998
c0015b9e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015ba4:	51                   	push   ecx
c0015ba5:	e8 c4 7b ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015baa:	5b                   	pop    ebx
c0015bab:	58                   	pop    eax
c0015bac:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015bb1:	68 d8 29 02 c0       	push   0xc00229d8
c0015bb6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015bbc:	50                   	push   eax
c0015bbd:	e8 ac 7b ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015bc2:	58                   	pop    eax
c0015bc3:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015bc8:	5a                   	pop    edx
c0015bc9:	68 b0 28 02 c0       	push   0xc00228b0
c0015bce:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015bd4:	51                   	push   ecx
c0015bd5:	e8 94 7b ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015bda:	5b                   	pop    ebx
c0015bdb:	58                   	pop    eax
c0015bdc:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0015bdf:	50                   	push   eax
c0015be0:	68 c8 28 02 c0       	push   0xc00228c8
c0015be5:	e8 33 96 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0015bea:	58                   	pop    eax
c0015beb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015bee:	5a                   	pop    edx
c0015bef:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015bf2:	51                   	push   ecx
c0015bf3:	68 d1 28 02 c0       	push   0xc00228d1
c0015bf8:	e8 20 96 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0015bfd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015c00:	5b                   	pop    ebx
c0015c01:	5a                   	pop    edx
c0015c02:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c04:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015c07:	51                   	push   ecx
c0015c08:	68 da 28 02 c0       	push   0xc00228da
c0015c0d:	e8 0b 96 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0015c12:	5b                   	pop    ebx
c0015c13:	58                   	pop    eax
c0015c14:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c19:	68 1c 2a 02 c0       	push   0xc0022a1c
c0015c1e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c24:	50                   	push   eax
c0015c25:	e8 44 7b ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015c2a:	58                   	pop    eax
c0015c2b:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c30:	5a                   	pop    edx
c0015c31:	68 e3 28 02 c0       	push   0xc00228e3
c0015c36:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015c3c:	51                   	push   ecx
c0015c3d:	e8 2c 7b ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015c42:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c47:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015c4d:	e8 06 9f 00 00       	call   c001fb58 <CPU::readCR0()>
c0015c52:	5a                   	pop    edx
c0015c53:	59                   	pop    ecx
c0015c54:	50                   	push   eax
c0015c55:	53                   	push   ebx
c0015c56:	e8 39 7b ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0015c5b:	5b                   	pop    ebx
c0015c5c:	58                   	pop    eax
c0015c5d:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c62:	68 ed 28 02 c0       	push   0xc00228ed
c0015c67:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c6d:	50                   	push   eax
c0015c6e:	e8 fb 7a ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015c73:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c78:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015c7e:	e8 c3 a1 00 00       	call   c001fe46 <CPU::readCR2()>
c0015c83:	5a                   	pop    edx
c0015c84:	59                   	pop    ecx
c0015c85:	50                   	push   eax
c0015c86:	53                   	push   ebx
c0015c87:	e8 08 7b ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0015c8c:	5b                   	pop    ebx
c0015c8d:	58                   	pop    eax
c0015c8e:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c93:	68 f7 28 02 c0       	push   0xc00228f7
c0015c98:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c9e:	50                   	push   eax
c0015c9f:	e8 ca 7a ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015ca4:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015ca9:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015caf:	e8 31 9b 00 00       	call   c001f7e5 <CPU::readCR3()>
c0015cb4:	5a                   	pop    edx
c0015cb5:	59                   	pop    ecx
c0015cb6:	50                   	push   eax
c0015cb7:	53                   	push   ebx
c0015cb8:	e8 d7 7a ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0015cbd:	5b                   	pop    ebx
c0015cbe:	58                   	pop    eax
c0015cbf:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015cc4:	68 0a 29 02 c0       	push   0xc002290a
c0015cc9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015ccf:	50                   	push   eax
c0015cd0:	e8 99 7a ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015cd5:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015cda:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015ce0:	e8 3d a1 00 00       	call   c001fe22 <CPU::readCR4()>
c0015ce5:	5a                   	pop    edx
c0015ce6:	59                   	pop    ecx
c0015ce7:	50                   	push   eax
c0015ce8:	53                   	push   ebx
c0015ce9:	e8 a6 7a ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0015cee:	5b                   	pop    ebx
c0015cef:	58                   	pop    eax
c0015cf0:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015cf5:	68 14 29 02 c0       	push   0xc0022914
c0015cfa:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d00:	50                   	push   eax
c0015d01:	e8 68 7a ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015d06:	5a                   	pop    edx
c0015d07:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015d0c:	59                   	pop    ecx
c0015d0d:	8b 5d 04             	mov    ebx,DWORD PTR [ebp+0x4]
c0015d10:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d16:	53                   	push   ebx
c0015d17:	50                   	push   eax
c0015d18:	e8 77 7a ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0015d1d:	58                   	pop    eax
c0015d1e:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015d23:	5a                   	pop    edx
c0015d24:	68 2b 29 02 c0       	push   0xc002292b
c0015d29:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015d2f:	51                   	push   ecx
c0015d30:	e8 39 7a ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015d35:	5b                   	pop    ebx
c0015d36:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015d3b:	5a                   	pop    edx
c0015d3c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015d3f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d45:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015d48:	51                   	push   ecx
c0015d49:	50                   	push   eax
c0015d4a:	e8 45 7a ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0015d4f:	5b                   	pop    ebx
c0015d50:	58                   	pop    eax
c0015d51:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015d56:	68 2b 29 02 c0       	push   0xc002292b
c0015d5b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d61:	50                   	push   eax
c0015d62:	e8 07 7a ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015d67:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015d6a:	59                   	pop    ecx
c0015d6b:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015d70:	5b                   	pop    ebx
c0015d71:	8b 12                	mov    edx,DWORD PTR [edx]
c0015d73:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d79:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0015d7c:	52                   	push   edx
c0015d7d:	50                   	push   eax
c0015d7e:	e8 11 7a ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0015d83:	83 c4 10             	add    esp,0x10
c0015d86:	b2 fe                	mov    dl,0xfe
c0015d88:	e4 60                	in     al,0x60
c0015d8a:	3c 1c                	cmp    al,0x1c
c0015d8c:	74 04                	je     c0015d92 <Krnl::panic(char const*)+0x346>
c0015d8e:	3c 5a                	cmp    al,0x5a
c0015d90:	75 f6                	jne    c0015d88 <Krnl::panic(char const*)+0x33c>
c0015d92:	e4 64                	in     al,0x64
c0015d94:	a8 02                	test   al,0x2
c0015d96:	75 fa                	jne    c0015d92 <Krnl::panic(char const*)+0x346>
c0015d98:	88 d0                	mov    al,dl
c0015d9a:	e6 64                	out    0x64,al
c0015d9c:	fa                   	cli    
c0015d9d:	f4                   	hlt    
c0015d9e:	eb e8                	jmp    c0015d88 <Krnl::panic(char const*)+0x33c>

c0015da0 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015da0:	55                   	push   ebp
c0015da1:	57                   	push   edi
c0015da2:	56                   	push   esi
c0015da3:	53                   	push   ebx
c0015da4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015daa:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015db1:	8d 46 01             	lea    eax,[esi+0x1]
c0015db4:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015db6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015dba:	80 fb 40             	cmp    bl,0x40
c0015dbd:	75 19                	jne    c0015dd8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x38>
c0015dbf:	8a 06                	mov    al,BYTE PTR [esi]
c0015dc1:	84 c0                	test   al,al
c0015dc3:	74 07                	je     c0015dcc <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c0015dc5:	3c 3a                	cmp    al,0x3a
c0015dc7:	74 03                	je     c0015dcc <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c0015dc9:	46                   	inc    esi
c0015dca:	eb f3                	jmp    c0015dbf <Reg::findLineFromLoadedData(char*, char*, char*)+0x1f>
c0015dcc:	84 c0                	test   al,al
c0015dce:	0f 84 1f 01 00 00    	je     c0015ef3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015dd4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015dd7:	46                   	inc    esi
c0015dd8:	50                   	push   eax
c0015dd9:	6a 40                	push   0x40
c0015ddb:	6a 00                	push   0x0
c0015ddd:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015de1:	50                   	push   eax
c0015de2:	e8 e6 a8 fe ff       	call   c00006cd <memset>
c0015de7:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015dee:	31 d2                	xor    edx,edx
c0015df0:	83 c4 10             	add    esp,0x10
c0015df3:	8a 07                	mov    al,BYTE PTR [edi]
c0015df5:	84 c0                	test   al,al
c0015df7:	0f 84 f6 00 00 00    	je     c0015ef3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015dfd:	81 fa c7 00 00 00    	cmp    edx,0xc7
c0015e03:	0f 8f ea 00 00 00    	jg     c0015ef3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015e09:	3c 0a                	cmp    al,0xa
c0015e0b:	0f 85 d3 00 00 00    	jne    c0015ee4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x144>
c0015e11:	c6 44 14 58 00       	mov    BYTE PTR [esp+edx*1+0x58],0x0
c0015e16:	8a 4c 24 58          	mov    cl,BYTE PTR [esp+0x58]
c0015e1a:	f6 c1 df             	test   cl,0xdf
c0015e1d:	0f 94 c2             	sete   dl
c0015e20:	80 f9 23             	cmp    cl,0x23
c0015e23:	0f 94 c0             	sete   al
c0015e26:	08 c2                	or     dl,al
c0015e28:	75 47                	jne    c0015e71 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e2a:	8d 41 f7             	lea    eax,[ecx-0x9]
c0015e2d:	3c 01                	cmp    al,0x1
c0015e2f:	76 40                	jbe    c0015e71 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e31:	80 f9 5b             	cmp    cl,0x5b
c0015e34:	75 3f                	jne    c0015e75 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd5>
c0015e36:	80 fb 40             	cmp    bl,0x40
c0015e39:	75 36                	jne    c0015e71 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e3b:	83 ec 0c             	sub    esp,0xc
c0015e3e:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0015e42:	55                   	push   ebp
c0015e43:	e8 a2 a8 fe ff       	call   c00006ea <strlen>
c0015e48:	83 c4 10             	add    esp,0x10
c0015e4b:	83 f8 3f             	cmp    eax,0x3f
c0015e4e:	0f 87 9f 00 00 00    	ja     c0015ef3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015e54:	50                   	push   eax
c0015e55:	50                   	push   eax
c0015e56:	55                   	push   ebp
c0015e57:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0015e5b:	55                   	push   ebp
c0015e5c:	e8 0b a9 fe ff       	call   c000076c <strcpy>
c0015e61:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015e64:	e8 81 a8 fe ff       	call   c00006ea <strlen>
c0015e69:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015e6e:	83 c4 10             	add    esp,0x10
c0015e71:	31 c9                	xor    ecx,ecx
c0015e73:	eb 76                	jmp    c0015eeb <Reg::findLineFromLoadedData(char*, char*, char*)+0x14b>
c0015e75:	80 fb 40             	cmp    bl,0x40
c0015e78:	74 06                	je     c0015e80 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe0>
c0015e7a:	8d 6c 24 58          	lea    ebp,[esp+0x58]
c0015e7e:	eb 19                	jmp    c0015e99 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015e80:	51                   	push   ecx
c0015e81:	51                   	push   ecx
c0015e82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015e86:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015e8a:	50                   	push   eax
c0015e8b:	e8 2d a9 fe ff       	call   c00007bd <strcmp>
c0015e90:	83 c4 10             	add    esp,0x10
c0015e93:	85 c0                	test   eax,eax
c0015e95:	75 da                	jne    c0015e71 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e97:	eb e1                	jmp    c0015e7a <Reg::findLineFromLoadedData(char*, char*, char*)+0xda>
c0015e99:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0015e9c:	84 c0                	test   al,al
c0015e9e:	0f 94 c1             	sete   cl
c0015ea1:	3c 3d                	cmp    al,0x3d
c0015ea3:	0f 94 c2             	sete   dl
c0015ea6:	08 d1                	or     cl,dl
c0015ea8:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0015eac:	75 03                	jne    c0015eb1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x111>
c0015eae:	45                   	inc    ebp
c0015eaf:	eb e8                	jmp    c0015e99 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015eb1:	84 c0                	test   al,al
c0015eb3:	74 3e                	je     c0015ef3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015eb5:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0015eb9:	52                   	push   edx
c0015eba:	52                   	push   edx
c0015ebb:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015ebf:	50                   	push   eax
c0015ec0:	56                   	push   esi
c0015ec1:	e8 f7 a8 fe ff       	call   c00007bd <strcmp>
c0015ec6:	83 c4 10             	add    esp,0x10
c0015ec9:	85 c0                	test   eax,eax
c0015ecb:	75 a4                	jne    c0015e71 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015ecd:	50                   	push   eax
c0015ece:	8d 55 01             	lea    edx,[ebp+0x1]
c0015ed1:	50                   	push   eax
c0015ed2:	52                   	push   edx
c0015ed3:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015eda:	e8 8d a8 fe ff       	call   c000076c <strcpy>
c0015edf:	83 c4 10             	add    esp,0x10
c0015ee2:	eb 14                	jmp    c0015ef8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x158>
c0015ee4:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015ee7:	88 44 14 58          	mov    BYTE PTR [esp+edx*1+0x58],al
c0015eeb:	47                   	inc    edi
c0015eec:	89 ca                	mov    edx,ecx
c0015eee:	e9 00 ff ff ff       	jmp    c0015df3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x53>
c0015ef3:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0015ef8:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0015efc:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015f02:	5b                   	pop    ebx
c0015f03:	5e                   	pop    esi
c0015f04:	5f                   	pop    edi
c0015f05:	5d                   	pop    ebp
c0015f06:	c3                   	ret    

c0015f07 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015f07:	57                   	push   edi
c0015f08:	56                   	push   esi
c0015f09:	53                   	push   ebx
c0015f0a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0015f10:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0015f17:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0015f1e:	53                   	push   ebx
c0015f1f:	e8 c6 a7 fe ff       	call   c00006ea <strlen>
c0015f24:	89 34 24             	mov    DWORD PTR [esp],esi
c0015f27:	89 c7                	mov    edi,eax
c0015f29:	e8 bc a7 fe ff       	call   c00006ea <strlen>
c0015f2e:	83 c4 10             	add    esp,0x10
c0015f31:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015f35:	31 ff                	xor    edi,edi
c0015f37:	3d ff 00 00 00       	cmp    eax,0xff
c0015f3c:	0f 87 18 01 00 00    	ja     c001605a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015f42:	51                   	push   ecx
c0015f43:	51                   	push   ecx
c0015f44:	56                   	push   esi
c0015f45:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0015f49:	56                   	push   esi
c0015f4a:	e8 1d a8 fe ff       	call   c000076c <strcpy>
c0015f4f:	58                   	pop    eax
c0015f50:	5a                   	pop    edx
c0015f51:	68 54 2e 02 c0       	push   0xc0022e54
c0015f56:	56                   	push   esi
c0015f57:	e8 c7 a8 fe ff       	call   c0000823 <strcat>
c0015f5c:	59                   	pop    ecx
c0015f5d:	58                   	pop    eax
c0015f5e:	53                   	push   ebx
c0015f5f:	56                   	push   esi
c0015f60:	e8 be a8 fe ff       	call   c0000823 <strcat>
c0015f65:	58                   	pop    eax
c0015f66:	5a                   	pop    edx
c0015f67:	68 42 2a 02 c0       	push   0xc0022a42
c0015f6c:	56                   	push   esi
c0015f6d:	e8 b1 a8 fe ff       	call   c0000823 <strcat>
c0015f72:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015f79:	e8 6a 91 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c0015f7e:	83 c4 0c             	add    esp,0xc
c0015f81:	89 c3                	mov    ebx,eax
c0015f83:	ff 35 f4 5b 02 c0    	push   DWORD PTR ds:0xc0025bf4
c0015f89:	56                   	push   esi
c0015f8a:	50                   	push   eax
c0015f8b:	e8 c4 97 ff ff       	call   c000f754 <File::File(char const*, Process*)>
c0015f90:	59                   	pop    ecx
c0015f91:	5e                   	pop    esi
c0015f92:	6a 01                	push   0x1
c0015f94:	53                   	push   ebx
c0015f95:	e8 1e 98 ff ff       	call   c000f7b8 <File::open(FileOpenMode)>
c0015f9a:	83 c4 10             	add    esp,0x10
c0015f9d:	85 c0                	test   eax,eax
c0015f9f:	74 08                	je     c0015fa9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0015fa1:	83 ec 0c             	sub    esp,0xc
c0015fa4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fa6:	53                   	push   ebx
c0015fa7:	eb 2e                	jmp    c0015fd7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0015fa9:	52                   	push   edx
c0015faa:	8d 44 24 07          	lea    eax,[esp+0x7]
c0015fae:	50                   	push   eax
c0015faf:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015fb3:	50                   	push   eax
c0015fb4:	53                   	push   ebx
c0015fb5:	e8 aa 9a ff ff       	call   c000fa64 <File::stat(unsigned long long*, bool*)>
c0015fba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015fbe:	83 c4 10             	add    esp,0x10
c0015fc1:	89 c1                	mov    ecx,eax
c0015fc3:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0015fc7:	75 13                	jne    c0015fdc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0015fc9:	83 ec 0c             	sub    esp,0xc
c0015fcc:	53                   	push   ebx
c0015fcd:	e8 44 98 ff ff       	call   c000f816 <File::close()>
c0015fd2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fd4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015fd7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015fda:	eb 7b                	jmp    c0016057 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0015fdc:	83 ec 0c             	sub    esp,0xc
c0015fdf:	50                   	push   eax
c0015fe0:	e8 06 60 ff ff       	call   c000bfeb <malloc>
c0015fe5:	89 c6                	mov    esi,eax
c0015fe7:	58                   	pop    eax
c0015fe8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fea:	8d 54 24 10          	lea    edx,[esp+0x10]
c0015fee:	52                   	push   edx
c0015fef:	56                   	push   esi
c0015ff0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015ff4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015ff8:	53                   	push   ebx
c0015ff9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015ffc:	83 c4 20             	add    esp,0x20
c0015fff:	85 c0                	test   eax,eax
c0016001:	75 0a                	jne    c001600d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0016003:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016007:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001600b:	74 18                	je     c0016025 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c001600d:	83 ec 0c             	sub    esp,0xc
c0016010:	31 ff                	xor    edi,edi
c0016012:	53                   	push   ebx
c0016013:	e8 fe 97 ff ff       	call   c000f816 <File::close()>
c0016018:	8b 03                	mov    eax,DWORD PTR [ebx]
c001601a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001601d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016020:	83 c4 10             	add    esp,0x10
c0016023:	eb 35                	jmp    c001605a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0016025:	83 ec 0c             	sub    esp,0xc
c0016028:	53                   	push   ebx
c0016029:	e8 e8 97 ff ff       	call   c000f816 <File::close()>
c001602e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016030:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016033:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016036:	83 c4 0c             	add    esp,0xc
c0016039:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0016040:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0016047:	56                   	push   esi
c0016048:	e8 53 fd ff ff       	call   c0015da0 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001604d:	89 34 24             	mov    DWORD PTR [esp],esi
c0016050:	89 c7                	mov    edi,eax
c0016052:	e8 a4 5f ff ff       	call   c000bffb <free>
c0016057:	83 c4 10             	add    esp,0x10
c001605a:	81 c4 10 01 00 00    	add    esp,0x110
c0016060:	89 f8                	mov    eax,edi
c0016062:	5b                   	pop    ebx
c0016063:	5e                   	pop    esi
c0016064:	5f                   	pop    edi
c0016065:	c3                   	ret    

c0016066 <Reg::getLine(char*, char*, char*)>:
c0016066:	57                   	push   edi
c0016067:	56                   	push   esi
c0016068:	53                   	push   ebx
c0016069:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001606d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016071:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016075:	57                   	push   edi
c0016076:	56                   	push   esi
c0016077:	53                   	push   ebx
c0016078:	68 47 2a 02 c0       	push   0xc0022a47
c001607d:	e8 85 fe ff ff       	call   c0015f07 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0016082:	83 c4 10             	add    esp,0x10
c0016085:	84 c0                	test   al,al
c0016087:	75 10                	jne    c0016099 <Reg::getLine(char*, char*, char*)+0x33>
c0016089:	57                   	push   edi
c001608a:	56                   	push   esi
c001608b:	53                   	push   ebx
c001608c:	68 6c 2a 02 c0       	push   0xc0022a6c
c0016091:	e8 71 fe ff ff       	call   c0015f07 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0016096:	83 c4 10             	add    esp,0x10
c0016099:	5b                   	pop    ebx
c001609a:	5e                   	pop    esi
c001609b:	5f                   	pop    edi
c001609c:	c3                   	ret    

c001609d <Reg::readInt(char*, char*, int*)>:
c001609d:	55                   	push   ebp
c001609e:	57                   	push   edi
c001609f:	56                   	push   esi
c00160a0:	53                   	push   ebx
c00160a1:	81 ec f0 00 00 00    	sub    esp,0xf0
c00160a7:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00160ab:	57                   	push   edi
c00160ac:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00160b3:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00160ba:	e8 a7 ff ff ff       	call   c0016066 <Reg::getLine(char*, char*, char*)>
c00160bf:	83 c4 10             	add    esp,0x10
c00160c2:	84 c0                	test   al,al
c00160c4:	0f 84 b2 00 00 00    	je     c001617c <Reg::readInt(char*, char*, int*)+0xdf>
c00160ca:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00160ce:	80 fa 2b             	cmp    dl,0x2b
c00160d1:	74 0c                	je     c00160df <Reg::readInt(char*, char*, int*)+0x42>
c00160d3:	80 fa 2d             	cmp    dl,0x2d
c00160d6:	75 0e                	jne    c00160e6 <Reg::readInt(char*, char*, int*)+0x49>
c00160d8:	ba 01 00 00 00       	mov    edx,0x1
c00160dd:	eb 0b                	jmp    c00160ea <Reg::readInt(char*, char*, int*)+0x4d>
c00160df:	ba 01 00 00 00       	mov    edx,0x1
c00160e4:	eb 02                	jmp    c00160e8 <Reg::readInt(char*, char*, int*)+0x4b>
c00160e6:	31 d2                	xor    edx,edx
c00160e8:	31 c0                	xor    eax,eax
c00160ea:	be 0a 00 00 00       	mov    esi,0xa
c00160ef:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00160f4:	75 20                	jne    c0016116 <Reg::readInt(char*, char*, int*)+0x79>
c00160f6:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00160fa:	80 f9 78             	cmp    cl,0x78
c00160fd:	75 0a                	jne    c0016109 <Reg::readInt(char*, char*, int*)+0x6c>
c00160ff:	83 c2 02             	add    edx,0x2
c0016102:	be 10 00 00 00       	mov    esi,0x10
c0016107:	eb 0d                	jmp    c0016116 <Reg::readInt(char*, char*, int*)+0x79>
c0016109:	80 f9 62             	cmp    cl,0x62
c001610c:	75 08                	jne    c0016116 <Reg::readInt(char*, char*, int*)+0x79>
c001610e:	83 c2 02             	add    edx,0x2
c0016111:	be 02 00 00 00       	mov    esi,0x2
c0016116:	01 d7                	add    edi,edx
c0016118:	31 d2                	xor    edx,edx
c001611a:	8a 1f                	mov    bl,BYTE PTR [edi]
c001611c:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0016120:	84 db                	test   bl,bl
c0016122:	0f 94 c3             	sete   bl
c0016125:	80 7c 24 0f 0d       	cmp    BYTE PTR [esp+0xf],0xd
c001612a:	0f 94 c1             	sete   cl
c001612d:	08 cb                	or     bl,cl
c001612f:	75 3a                	jne    c001616b <Reg::readInt(char*, char*, int*)+0xce>
c0016131:	0f af d6             	imul   edx,esi
c0016134:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0016139:	83 fe 10             	cmp    esi,0x10
c001613c:	75 26                	jne    c0016164 <Reg::readInt(char*, char*, int*)+0xc7>
c001613e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0016142:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0016145:	89 e9                	mov    ecx,ebp
c0016147:	80 f9 05             	cmp    cl,0x5
c001614a:	77 06                	ja     c0016152 <Reg::readInt(char*, char*, int*)+0xb5>
c001614c:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0016150:	eb 16                	jmp    c0016168 <Reg::readInt(char*, char*, int*)+0xcb>
c0016152:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0016156:	83 e9 61             	sub    ecx,0x61
c0016159:	80 f9 05             	cmp    cl,0x5
c001615c:	77 06                	ja     c0016164 <Reg::readInt(char*, char*, int*)+0xc7>
c001615e:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0016162:	eb 04                	jmp    c0016168 <Reg::readInt(char*, char*, int*)+0xcb>
c0016164:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0016168:	47                   	inc    edi
c0016169:	eb af                	jmp    c001611a <Reg::readInt(char*, char*, int*)+0x7d>
c001616b:	84 c0                	test   al,al
c001616d:	74 02                	je     c0016171 <Reg::readInt(char*, char*, int*)+0xd4>
c001616f:	f7 da                	neg    edx
c0016171:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0016178:	89 10                	mov    DWORD PTR [eax],edx
c001617a:	88 d8                	mov    al,bl
c001617c:	81 c4 ec 00 00 00    	add    esp,0xec
c0016182:	5b                   	pop    ebx
c0016183:	5e                   	pop    esi
c0016184:	5f                   	pop    edi
c0016185:	5d                   	pop    ebp
c0016186:	c3                   	ret    

c0016187 <Reg::readString(char*, char*, char*, int)>:
c0016187:	57                   	push   edi
c0016188:	56                   	push   esi
c0016189:	53                   	push   ebx
c001618a:	81 ec d4 00 00 00    	sub    esp,0xd4
c0016190:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0016194:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001619b:	57                   	push   edi
c001619c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00161a3:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00161aa:	e8 b7 fe ff ff       	call   c0016066 <Reg::getLine(char*, char*, char*)>
c00161af:	83 c4 10             	add    esp,0x10
c00161b2:	89 c6                	mov    esi,eax
c00161b4:	84 c0                	test   al,al
c00161b6:	74 44                	je     c00161fc <Reg::readString(char*, char*, char*, int)+0x75>
c00161b8:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00161bf:	31 c0                	xor    eax,eax
c00161c1:	4a                   	dec    edx
c00161c2:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00161c5:	84 c9                	test   cl,cl
c00161c7:	74 0f                	je     c00161d8 <Reg::readString(char*, char*, char*, int)+0x51>
c00161c9:	39 c2                	cmp    edx,eax
c00161cb:	7e 0b                	jle    c00161d8 <Reg::readString(char*, char*, char*, int)+0x51>
c00161cd:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00161d0:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00161d5:	40                   	inc    eax
c00161d6:	eb ea                	jmp    c00161c2 <Reg::readString(char*, char*, char*, int)+0x3b>
c00161d8:	83 ec 0c             	sub    esp,0xc
c00161db:	53                   	push   ebx
c00161dc:	e8 09 a5 fe ff       	call   c00006ea <strlen>
c00161e1:	83 c4 10             	add    esp,0x10
c00161e4:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00161e9:	75 11                	jne    c00161fc <Reg::readString(char*, char*, char*, int)+0x75>
c00161eb:	83 ec 0c             	sub    esp,0xc
c00161ee:	53                   	push   ebx
c00161ef:	e8 f6 a4 fe ff       	call   c00006ea <strlen>
c00161f4:	83 c4 10             	add    esp,0x10
c00161f7:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00161fc:	81 c4 d0 00 00 00    	add    esp,0xd0
c0016202:	89 f0                	mov    eax,esi
c0016204:	5b                   	pop    ebx
c0016205:	5e                   	pop    esi
c0016206:	5f                   	pop    edi
c0016207:	c3                   	ret    

c0016208 <Reg::readBool(char*, char*, bool*)>:
c0016208:	83 ec 20             	sub    esp,0x20
c001620b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001620f:	50                   	push   eax
c0016210:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016214:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016218:	e8 80 fe ff ff       	call   c001609d <Reg::readInt(char*, char*, int*)>
c001621d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016221:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0016226:	0f 95 02             	setne  BYTE PTR [edx]
c0016229:	83 c4 2c             	add    esp,0x2c
c001622c:	c3                   	ret    

c001622d <Reg::readBoolWithDefault(char*, char*, bool)>:
c001622d:	53                   	push   ebx
c001622e:	83 ec 1c             	sub    esp,0x1c
c0016231:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016235:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0016239:	50                   	push   eax
c001623a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001623e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016242:	e8 c1 ff ff ff       	call   c0016208 <Reg::readBool(char*, char*, bool*)>
c0016247:	83 c4 10             	add    esp,0x10
c001624a:	84 c0                	test   al,al
c001624c:	74 04                	je     c0016252 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001624e:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0016252:	83 c4 18             	add    esp,0x18
c0016255:	88 d8                	mov    al,bl
c0016257:	5b                   	pop    ebx
c0016258:	c3                   	ret    

c0016259 <Reg::readIntWithDefault(char*, char*, int)>:
c0016259:	53                   	push   ebx
c001625a:	83 ec 1c             	sub    esp,0x1c
c001625d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016261:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016265:	50                   	push   eax
c0016266:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001626a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001626e:	e8 2a fe ff ff       	call   c001609d <Reg::readInt(char*, char*, int*)>
c0016273:	83 c4 10             	add    esp,0x10
c0016276:	84 c0                	test   al,al
c0016278:	74 04                	je     c001627e <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001627a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001627e:	83 c4 18             	add    esp,0x18
c0016281:	89 d8                	mov    eax,ebx
c0016283:	5b                   	pop    ebx
c0016284:	c3                   	ret    

c0016285 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0016285:	56                   	push   esi
c0016286:	53                   	push   ebx
c0016287:	51                   	push   ecx
c0016288:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001628c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016290:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016294:	56                   	push   esi
c0016295:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016299:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001629d:	e8 e5 fe ff ff       	call   c0016187 <Reg::readString(char*, char*, char*, int)>
c00162a2:	83 c4 10             	add    esp,0x10
c00162a5:	84 c0                	test   al,al
c00162a7:	74 02                	je     c00162ab <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c00162a9:	89 f3                	mov    ebx,esi
c00162ab:	5a                   	pop    edx
c00162ac:	89 d8                	mov    eax,ebx
c00162ae:	5b                   	pop    ebx
c00162af:	5e                   	pop    esi
c00162b0:	c3                   	ret    

c00162b1 <Sys::exit(regs*)>:
c00162b1:	83 ec 18             	sub    esp,0x18
c00162b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162b8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00162bb:	e8 c2 31 00 00       	call   c0019482 <terminateTask(int)>
c00162c0:	83 c8 ff             	or     eax,0xffffffff
c00162c3:	89 c2                	mov    edx,eax
c00162c5:	83 c4 1c             	add    esp,0x1c
c00162c8:	c3                   	ret    

c00162c9 <Sys::loadDLL(regs*)>:
c00162c9:	56                   	push   esi
c00162ca:	31 d2                	xor    edx,edx
c00162cc:	53                   	push   ebx
c00162cd:	b8 01 00 00 00       	mov    eax,0x1
c00162d2:	51                   	push   ecx
c00162d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162d7:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00162db:	74 7d                	je     c001635a <Sys::loadDLL(regs*)+0x91>
c00162dd:	83 ec 0c             	sub    esp,0xc
c00162e0:	68 14 01 00 00       	push   0x114
c00162e5:	e8 fe 8d ff ff       	call   c000f0e8 <operator new(unsigned long)>
c00162ea:	89 c3                	mov    ebx,eax
c00162ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162f1:	83 c4 0c             	add    esp,0xc
c00162f4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00162f7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00162fa:	53                   	push   ebx
c00162fb:	e8 54 94 ff ff       	call   c000f754 <File::File(char const*, Process*)>
c0016300:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016303:	e8 1e 97 ff ff       	call   c000fa26 <File::exists()>
c0016308:	83 c4 10             	add    esp,0x10
c001630b:	84 c0                	test   al,al
c001630d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001630f:	75 11                	jne    c0016322 <Sys::loadDLL(regs*)+0x59>
c0016311:	83 ec 0c             	sub    esp,0xc
c0016314:	53                   	push   ebx
c0016315:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016318:	83 c4 10             	add    esp,0x10
c001631b:	b8 03 00 00 00       	mov    eax,0x3
c0016320:	eb 36                	jmp    c0016358 <Sys::loadDLL(regs*)+0x8f>
c0016322:	83 ec 0c             	sub    esp,0xc
c0016325:	53                   	push   ebx
c0016326:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016329:	58                   	pop    eax
c001632a:	5a                   	pop    edx
c001632b:	6a 00                	push   0x0
c001632d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0016330:	e8 3a 21 00 00       	call   c001846f <Thr::loadDLL(char const*, bool)>
c0016335:	83 c4 10             	add    esp,0x10
c0016338:	89 c1                	mov    ecx,eax
c001633a:	31 d2                	xor    edx,edx
c001633c:	b8 04 00 00 00       	mov    eax,0x4
c0016341:	85 c9                	test   ecx,ecx
c0016343:	74 15                	je     c001635a <Sys::loadDLL(regs*)+0x91>
c0016345:	53                   	push   ebx
c0016346:	53                   	push   ebx
c0016347:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c001634d:	51                   	push   ecx
c001634e:	e8 e2 22 00 00       	call   c0018635 <Thr::executeDLL(unsigned long, void*)>
c0016353:	83 c4 10             	add    esp,0x10
c0016356:	31 c0                	xor    eax,eax
c0016358:	31 d2                	xor    edx,edx
c001635a:	59                   	pop    ecx
c001635b:	5b                   	pop    ebx
c001635c:	5e                   	pop    esi
c001635d:	c3                   	ret    

c001635e <Sys::read(regs*)>:
c001635e:	57                   	push   edi
c001635f:	56                   	push   esi
c0016360:	53                   	push   ebx
c0016361:	83 ec 10             	sub    esp,0x10
c0016364:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016368:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001636b:	83 f8 02             	cmp    eax,0x2
c001636e:	77 10                	ja     c0016380 <Sys::read(regs*)+0x22>
c0016370:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016375:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016378:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001637e:	eb 0e                	jmp    c001638e <Sys::read(regs*)+0x30>
c0016380:	83 ec 0c             	sub    esp,0xc
c0016383:	50                   	push   eax
c0016384:	e8 f0 7c ff ff       	call   c000e079 <getFromFileDescriptor(int)>
c0016389:	83 c4 10             	add    esp,0x10
c001638c:	89 c1                	mov    ecx,eax
c001638e:	83 c8 ff             	or     eax,0xffffffff
c0016391:	85 c9                	test   ecx,ecx
c0016393:	89 c2                	mov    edx,eax
c0016395:	74 28                	je     c00163bf <Sys::read(regs*)+0x61>
c0016397:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001639f:	83 ec 0c             	sub    esp,0xc
c00163a2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00163a4:	31 ff                	xor    edi,edi
c00163a6:	8d 54 24 18          	lea    edx,[esp+0x18]
c00163aa:	52                   	push   edx
c00163ab:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00163ae:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00163b1:	57                   	push   edi
c00163b2:	56                   	push   esi
c00163b3:	51                   	push   ecx
c00163b4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00163b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00163bb:	83 c4 20             	add    esp,0x20
c00163be:	99                   	cdq    
c00163bf:	83 c4 10             	add    esp,0x10
c00163c2:	5b                   	pop    ebx
c00163c3:	5e                   	pop    esi
c00163c4:	5f                   	pop    edi
c00163c5:	c3                   	ret    

c00163c6 <Sys::sbrk(regs*)>:
c00163c6:	56                   	push   esi
c00163c7:	53                   	push   ebx
c00163c8:	50                   	push   eax
c00163c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163d2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00163d5:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00163d8:	85 db                	test   ebx,ebx
c00163da:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c00163e0:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00163e3:	74 02                	je     c00163e7 <Sys::sbrk(regs*)+0x21>
c00163e5:	79 06                	jns    c00163ed <Sys::sbrk(regs*)+0x27>
c00163e7:	89 f0                	mov    eax,esi
c00163e9:	31 d2                	xor    edx,edx
c00163eb:	eb 2a                	jmp    c0016417 <Sys::sbrk(regs*)+0x51>
c00163ed:	83 c8 ff             	or     eax,0xffffffff
c00163f0:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00163f6:	89 c2                	mov    edx,eax
c00163f8:	77 1d                	ja     c0016417 <Sys::sbrk(regs*)+0x51>
c00163fa:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0016400:	50                   	push   eax
c0016401:	c1 ea 0c             	shr    edx,0xc
c0016404:	68 07 04 00 00       	push   0x407
c0016409:	52                   	push   edx
c001640a:	51                   	push   ecx
c001640b:	e8 c0 85 ff ff       	call   c000e9d0 <VAS::allocatePages(int, int)>
c0016410:	89 f0                	mov    eax,esi
c0016412:	31 d2                	xor    edx,edx
c0016414:	83 c4 10             	add    esp,0x10
c0016417:	59                   	pop    ecx
c0016418:	5b                   	pop    ebx
c0016419:	5e                   	pop    esi
c001641a:	c3                   	ret    

c001641b <Sys::write(regs*)>:
c001641b:	57                   	push   edi
c001641c:	56                   	push   esi
c001641d:	53                   	push   ebx
c001641e:	83 ec 18             	sub    esp,0x18
c0016421:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016425:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016428:	68 87 2a 02 c0       	push   0xc0022a87
c001642d:	e8 eb 8d ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0016432:	83 c4 10             	add    esp,0x10
c0016435:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c0016439:	77 10                	ja     c001644b <Sys::write(regs*)+0x30>
c001643b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016440:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016443:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016449:	eb 1b                	jmp    c0016466 <Sys::write(regs*)+0x4b>
c001644b:	83 ec 0c             	sub    esp,0xc
c001644e:	68 a6 2a 02 c0       	push   0xc0022aa6
c0016453:	e8 c5 8d ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0016458:	58                   	pop    eax
c0016459:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001645c:	e8 18 7c ff ff       	call   c000e079 <getFromFileDescriptor(int)>
c0016461:	83 c4 10             	add    esp,0x10
c0016464:	89 c1                	mov    ecx,eax
c0016466:	83 c8 ff             	or     eax,0xffffffff
c0016469:	85 c9                	test   ecx,ecx
c001646b:	89 c2                	mov    edx,eax
c001646d:	74 28                	je     c0016497 <Sys::write(regs*)+0x7c>
c001646f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016477:	83 ec 0c             	sub    esp,0xc
c001647a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001647c:	31 ff                	xor    edi,edi
c001647e:	8d 54 24 18          	lea    edx,[esp+0x18]
c0016482:	52                   	push   edx
c0016483:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016486:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0016489:	57                   	push   edi
c001648a:	56                   	push   esi
c001648b:	51                   	push   ecx
c001648c:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001648f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016493:	83 c4 20             	add    esp,0x20
c0016496:	99                   	cdq    
c0016497:	83 c4 10             	add    esp,0x10
c001649a:	5b                   	pop    ebx
c001649b:	5e                   	pop    esi
c001649c:	5f                   	pop    edi
c001649d:	c3                   	ret    

c001649e <Sys::yield(regs*)>:
c001649e:	83 ec 0c             	sub    esp,0xc
c00164a1:	e8 af 25 00 00       	call   c0018a55 <lockScheduler()>
c00164a6:	e8 f3 28 00 00       	call   c0018d9e <schedule()>
c00164ab:	e8 a7 25 00 00       	call   c0018a57 <unlockScheduler()>
c00164b0:	31 c0                	xor    eax,eax
c00164b2:	31 d2                	xor    edx,edx
c00164b4:	83 c4 0c             	add    esp,0xc
c00164b7:	c3                   	ret    

c00164b8 <sysCallGetPID(regs*)>:
c00164b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164bd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00164c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00164c2:	89 c2                	mov    edx,eax
c00164c4:	c1 fa 1f             	sar    edx,0x1f
c00164c7:	c3                   	ret    

c00164c8 <sysCallSeekDir(regs*)>:
c00164c8:	31 c0                	xor    eax,eax
c00164ca:	31 d2                	xor    edx,edx
c00164cc:	c3                   	ret    

c00164cd <sysCallTellDir(regs*)>:
c00164cd:	31 c0                	xor    eax,eax
c00164cf:	31 d2                	xor    edx,edx
c00164d1:	c3                   	ret    

c00164d2 <sysCallVerify(regs*)>:
c00164d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00164d6:	31 d2                	xor    edx,edx
c00164d8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00164db:	c3                   	ret    

c00164dc <sysCallFork(regs*)>:
c00164dc:	83 c8 ff             	or     eax,0xffffffff
c00164df:	83 ca ff             	or     edx,0xffffffff
c00164e2:	c3                   	ret    

c00164e3 <sysCallExecve(regs*)>:
c00164e3:	83 c8 ff             	or     eax,0xffffffff
c00164e6:	83 ca ff             	or     edx,0xffffffff
c00164e9:	c3                   	ret    

c00164ea <sysCallGetArgc(regs*)>:
c00164ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164ef:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00164f2:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c00164f8:	89 c2                	mov    edx,eax
c00164fa:	c1 fa 1f             	sar    edx,0x1f
c00164fd:	c3                   	ret    

c00164fe <sysFormatDisk(regs*)>:
c00164fe:	56                   	push   esi
c00164ff:	53                   	push   ebx
c0016500:	50                   	push   eax
c0016501:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016505:	8b 1d 08 49 02 c0    	mov    ebx,DWORD PTR ds:0xc0024908
c001650b:	eb 2a                	jmp    c0016537 <sysFormatDisk(regs*)+0x39>
c001650d:	83 ec 0c             	sub    esp,0xc
c0016510:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0016513:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016516:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016518:	51                   	push   ecx
c0016519:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c001651c:	51                   	push   ecx
c001651d:	50                   	push   eax
c001651e:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c0016525:	50                   	push   eax
c0016526:	53                   	push   ebx
c0016527:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001652a:	83 c4 20             	add    esp,0x20
c001652d:	89 c1                	mov    ecx,eax
c001652f:	83 f8 08             	cmp    eax,0x8
c0016532:	75 12                	jne    c0016546 <sysFormatDisk(regs*)+0x48>
c0016534:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016537:	85 db                	test   ebx,ebx
c0016539:	75 d2                	jne    c001650d <sysFormatDisk(regs*)+0xf>
c001653b:	b8 03 00 00 00       	mov    eax,0x3
c0016540:	31 d2                	xor    edx,edx
c0016542:	59                   	pop    ecx
c0016543:	5b                   	pop    ebx
c0016544:	5e                   	pop    esi
c0016545:	c3                   	ret    
c0016546:	85 c0                	test   eax,eax
c0016548:	74 13                	je     c001655d <sysFormatDisk(regs*)+0x5f>
c001654a:	31 d2                	xor    edx,edx
c001654c:	b8 01 00 00 00       	mov    eax,0x1
c0016551:	83 f9 09             	cmp    ecx,0x9
c0016554:	74 ec                	je     c0016542 <sysFormatDisk(regs*)+0x44>
c0016556:	b8 02 00 00 00       	mov    eax,0x2
c001655b:	eb e3                	jmp    c0016540 <sysFormatDisk(regs*)+0x42>
c001655d:	31 c0                	xor    eax,eax
c001655f:	eb df                	jmp    c0016540 <sysFormatDisk(regs*)+0x42>

c0016561 <sysSetDiskVolumeLabel(regs*)>:
c0016561:	56                   	push   esi
c0016562:	53                   	push   ebx
c0016563:	53                   	push   ebx
c0016564:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016568:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001656b:	83 f8 19             	cmp    eax,0x19
c001656e:	77 2d                	ja     c001659d <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016570:	8b 0c 85 a0 4d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdb260]
c0016577:	85 c9                	test   ecx,ecx
c0016579:	74 22                	je     c001659d <sysSetDiskVolumeLabel(regs*)+0x3c>
c001657b:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001657e:	85 d2                	test   edx,edx
c0016580:	74 1b                	je     c001659d <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016582:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c0016588:	8b 33                	mov    esi,DWORD PTR [ebx]
c001658a:	52                   	push   edx
c001658b:	50                   	push   eax
c001658c:	51                   	push   ecx
c001658d:	53                   	push   ebx
c001658e:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0016591:	83 c4 10             	add    esp,0x10
c0016594:	89 c2                	mov    edx,eax
c0016596:	c1 fa 1f             	sar    edx,0x1f
c0016599:	59                   	pop    ecx
c001659a:	5b                   	pop    ebx
c001659b:	5e                   	pop    esi
c001659c:	c3                   	ret    
c001659d:	59                   	pop    ecx
c001659e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00165a3:	5b                   	pop    ebx
c00165a4:	83 ca ff             	or     edx,0xffffffff
c00165a7:	5e                   	pop    esi
c00165a8:	c3                   	ret    

c00165a9 <sysGetDiskVolumeLabel(regs*)>:
c00165a9:	57                   	push   edi
c00165aa:	56                   	push   esi
c00165ab:	53                   	push   ebx
c00165ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165b0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00165b3:	83 fa 19             	cmp    edx,0x19
c00165b6:	77 38                	ja     c00165f0 <sysGetDiskVolumeLabel(regs*)+0x47>
c00165b8:	8b 0c 95 a0 4d 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdb260]
c00165bf:	85 c9                	test   ecx,ecx
c00165c1:	74 2d                	je     c00165f0 <sysGetDiskVolumeLabel(regs*)+0x47>
c00165c3:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00165c6:	85 db                	test   ebx,ebx
c00165c8:	74 26                	je     c00165f0 <sysGetDiskVolumeLabel(regs*)+0x47>
c00165ca:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00165cd:	85 c0                	test   eax,eax
c00165cf:	74 1f                	je     c00165f0 <sysGetDiskVolumeLabel(regs*)+0x47>
c00165d1:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c00165d7:	83 ec 0c             	sub    esp,0xc
c00165da:	8b 3e                	mov    edi,DWORD PTR [esi]
c00165dc:	50                   	push   eax
c00165dd:	53                   	push   ebx
c00165de:	52                   	push   edx
c00165df:	51                   	push   ecx
c00165e0:	56                   	push   esi
c00165e1:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00165e4:	83 c4 20             	add    esp,0x20
c00165e7:	89 c2                	mov    edx,eax
c00165e9:	c1 fa 1f             	sar    edx,0x1f
c00165ec:	5b                   	pop    ebx
c00165ed:	5e                   	pop    esi
c00165ee:	5f                   	pop    edi
c00165ef:	c3                   	ret    
c00165f0:	5b                   	pop    ebx
c00165f1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00165f6:	5e                   	pop    esi
c00165f7:	83 ca ff             	or     edx,0xffffffff
c00165fa:	5f                   	pop    edi
c00165fb:	c3                   	ret    

c00165fc <sysShutdown(regs*)>:
c00165fc:	57                   	push   edi
c00165fd:	56                   	push   esi
c00165fe:	56                   	push   esi
c00165ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016603:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016606:	85 c0                	test   eax,eax
c0016608:	74 18                	je     c0016622 <sysShutdown(regs*)+0x26>
c001660a:	83 f8 01             	cmp    eax,0x1
c001660d:	74 51                	je     c0016660 <sysShutdown(regs*)+0x64>
c001660f:	83 ce ff             	or     esi,0xffffffff
c0016612:	83 cf ff             	or     edi,0xffffffff
c0016615:	83 f8 02             	cmp    eax,0x2
c0016618:	74 2a                	je     c0016644 <sysShutdown(regs*)+0x48>
c001661a:	59                   	pop    ecx
c001661b:	89 f0                	mov    eax,esi
c001661d:	5e                   	pop    esi
c001661e:	89 fa                	mov    edx,edi
c0016620:	5f                   	pop    edi
c0016621:	c3                   	ret    
c0016622:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0016627:	83 ce ff             	or     esi,0xffffffff
c001662a:	83 cf ff             	or     edi,0xffffffff
c001662d:	8b 10                	mov    edx,DWORD PTR [eax]
c001662f:	6a 00                	push   0x0
c0016631:	6a 00                	push   0x0
c0016633:	6a 00                	push   0x0
c0016635:	50                   	push   eax
c0016636:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016639:	83 c4 10             	add    esp,0x10
c001663c:	89 f0                	mov    eax,esi
c001663e:	89 fa                	mov    edx,edi
c0016640:	59                   	pop    ecx
c0016641:	5e                   	pop    esi
c0016642:	5f                   	pop    edi
c0016643:	c3                   	ret    
c0016644:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0016649:	8b 10                	mov    edx,DWORD PTR [eax]
c001664b:	6a 00                	push   0x0
c001664d:	6a 00                	push   0x0
c001664f:	6a 01                	push   0x1
c0016651:	50                   	push   eax
c0016652:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016655:	83 c4 10             	add    esp,0x10
c0016658:	89 f0                	mov    eax,esi
c001665a:	89 fa                	mov    edx,edi
c001665c:	59                   	pop    ecx
c001665d:	5e                   	pop    esi
c001665e:	5f                   	pop    edi
c001665f:	c3                   	ret    
c0016660:	a1 20 4e 02 c0       	mov    eax,ds:0xc0024e20
c0016665:	85 c0                	test   eax,eax
c0016667:	74 02                	je     c001666b <sysShutdown(regs*)+0x6f>
c0016669:	ff d0                	call   eax
c001666b:	31 f6                	xor    esi,esi
c001666d:	59                   	pop    ecx
c001666e:	31 ff                	xor    edi,edi
c0016670:	89 f0                	mov    eax,esi
c0016672:	5e                   	pop    esi
c0016673:	89 fa                	mov    edx,edi
c0016675:	5f                   	pop    edi
c0016676:	c3                   	ret    

c0016677 <sysCallGetCwd(regs*)>:
c0016677:	83 ec 10             	sub    esp,0x10
c001667a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001667e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016681:	52                   	push   edx
c0016682:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016685:	51                   	push   ecx
c0016686:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001668b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001668e:	50                   	push   eax
c001668f:	e8 31 94 ff ff       	call   c000fac5 <getcwd(Process*, char*, int)>
c0016694:	89 c2                	mov    edx,eax
c0016696:	83 c4 1c             	add    esp,0x1c
c0016699:	c1 fa 1f             	sar    edx,0x1f
c001669c:	c3                   	ret    

c001669d <sysCallSetCwd(regs*)>:
c001669d:	83 ec 14             	sub    esp,0x14
c00166a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00166a4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00166a7:	50                   	push   eax
c00166a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166ad:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00166b0:	52                   	push   edx
c00166b1:	e8 39 94 ff ff       	call   c000faef <setcwd(Process*, char*)>
c00166b6:	89 c2                	mov    edx,eax
c00166b8:	83 c4 1c             	add    esp,0x1c
c00166bb:	c1 fa 1f             	sar    edx,0x1f
c00166be:	c3                   	ret    

c00166bf <sysCallRealpath(regs*)>:
c00166bf:	53                   	push   ebx
c00166c0:	83 ec 08             	sub    esp,0x8
c00166c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166c7:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00166ca:	85 c9                	test   ecx,ecx
c00166cc:	74 35                	je     c0016703 <sysCallRealpath(regs*)+0x44>
c00166ce:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00166d1:	31 d2                	xor    edx,edx
c00166d3:	b8 01 00 00 00       	mov    eax,0x1
c00166d8:	85 db                	test   ebx,ebx
c00166da:	75 05                	jne    c00166e1 <sysCallRealpath(regs*)+0x22>
c00166dc:	83 c4 08             	add    esp,0x8
c00166df:	5b                   	pop    ebx
c00166e0:	c3                   	ret    
c00166e1:	50                   	push   eax
c00166e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166e7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00166ea:	05 0c 01 00 00       	add    eax,0x10c
c00166ef:	50                   	push   eax
c00166f0:	51                   	push   ecx
c00166f1:	53                   	push   ebx
c00166f2:	e8 b3 8e ff ff       	call   c000f5aa <standardiseFiles(char*, char const*, char const*)>
c00166f7:	83 c4 10             	add    esp,0x10
c00166fa:	31 c0                	xor    eax,eax
c00166fc:	31 d2                	xor    edx,edx
c00166fe:	83 c4 08             	add    esp,0x8
c0016701:	5b                   	pop    ebx
c0016702:	c3                   	ret    
c0016703:	b8 01 00 00 00       	mov    eax,0x1
c0016708:	31 d2                	xor    edx,edx
c001670a:	eb f2                	jmp    c00166fe <sysCallRealpath(regs*)+0x3f>

c001670c <sysCallReadDir(regs*)>:
c001670c:	53                   	push   ebx
c001670d:	83 ec 18             	sub    esp,0x18
c0016710:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016714:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016717:	83 f8 02             	cmp    eax,0x2
c001671a:	76 56                	jbe    c0016772 <sysCallReadDir(regs*)+0x66>
c001671c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001671f:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c0016725:	77 57                	ja     c001677e <sysCallReadDir(regs*)+0x72>
c0016727:	83 ec 0c             	sub    esp,0xc
c001672a:	50                   	push   eax
c001672b:	e8 49 79 ff ff       	call   c000e079 <getFromFileDescriptor(int)>
c0016730:	83 c4 10             	add    esp,0x10
c0016733:	85 c0                	test   eax,eax
c0016735:	74 57                	je     c001678e <sysCallReadDir(regs*)+0x82>
c0016737:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001673f:	83 ec 0c             	sub    esp,0xc
c0016742:	8b 10                	mov    edx,DWORD PTR [eax]
c0016744:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0016748:	51                   	push   ecx
c0016749:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001674c:	51                   	push   ecx
c001674d:	6a 00                	push   0x0
c001674f:	68 10 01 00 00       	push   0x110
c0016754:	50                   	push   eax
c0016755:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016758:	83 c4 20             	add    esp,0x20
c001675b:	89 c1                	mov    ecx,eax
c001675d:	85 c0                	test   eax,eax
c001675f:	74 38                	je     c0016799 <sysCallReadDir(regs*)+0x8d>
c0016761:	31 d2                	xor    edx,edx
c0016763:	b8 02 00 00 00       	mov    eax,0x2
c0016768:	83 f9 07             	cmp    ecx,0x7
c001676b:	74 05                	je     c0016772 <sysCallReadDir(regs*)+0x66>
c001676d:	83 c4 18             	add    esp,0x18
c0016770:	5b                   	pop    ebx
c0016771:	c3                   	ret    
c0016772:	b8 01 00 00 00       	mov    eax,0x1
c0016777:	31 d2                	xor    edx,edx
c0016779:	83 c4 18             	add    esp,0x18
c001677c:	5b                   	pop    ebx
c001677d:	c3                   	ret    
c001677e:	53                   	push   ebx
c001677f:	53                   	push   ebx
c0016780:	52                   	push   edx
c0016781:	68 c8 2a 02 c0       	push   0xc0022ac8
c0016786:	e8 92 8a ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001678b:	83 c4 10             	add    esp,0x10
c001678e:	83 c4 18             	add    esp,0x18
c0016791:	83 c8 ff             	or     eax,0xffffffff
c0016794:	83 ca ff             	or     edx,0xffffffff
c0016797:	5b                   	pop    ebx
c0016798:	c3                   	ret    
c0016799:	31 c0                	xor    eax,eax
c001679b:	31 d2                	xor    edx,edx
c001679d:	eb da                	jmp    c0016779 <sysCallReadDir(regs*)+0x6d>

c001679f <sysCallIsATTY(regs*)>:
c001679f:	83 ec 0c             	sub    esp,0xc
c00167a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167a6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00167a9:	83 f8 02             	cmp    eax,0x2
c00167ac:	76 07                	jbe    c00167b5 <sysCallIsATTY(regs*)+0x16>
c00167ae:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00167b3:	75 28                	jne    c00167dd <sysCallIsATTY(regs*)+0x3e>
c00167b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167ba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00167bd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00167c3:	85 c0                	test   eax,eax
c00167c5:	74 26                	je     c00167ed <sysCallIsATTY(regs*)+0x4e>
c00167c7:	83 ec 0c             	sub    esp,0xc
c00167ca:	8b 10                	mov    edx,DWORD PTR [eax]
c00167cc:	50                   	push   eax
c00167cd:	ff 12                	call   DWORD PTR [edx]
c00167cf:	83 c4 10             	add    esp,0x10
c00167d2:	25 ff 00 00 00       	and    eax,0xff
c00167d7:	31 d2                	xor    edx,edx
c00167d9:	83 c4 0c             	add    esp,0xc
c00167dc:	c3                   	ret    
c00167dd:	83 ec 0c             	sub    esp,0xc
c00167e0:	50                   	push   eax
c00167e1:	e8 93 78 ff ff       	call   c000e079 <getFromFileDescriptor(int)>
c00167e6:	83 c4 10             	add    esp,0x10
c00167e9:	85 c0                	test   eax,eax
c00167eb:	75 da                	jne    c00167c7 <sysCallIsATTY(regs*)+0x28>
c00167ed:	83 c8 ff             	or     eax,0xffffffff
c00167f0:	83 ca ff             	or     edx,0xffffffff
c00167f3:	83 c4 0c             	add    esp,0xc
c00167f6:	c3                   	ret    

c00167f7 <sysCallSeek(regs*)>:
c00167f7:	53                   	push   ebx
c00167f8:	83 ec 08             	sub    esp,0x8
c00167fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00167ff:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016802:	83 f8 02             	cmp    eax,0x2
c0016805:	76 4b                	jbe    c0016852 <sysCallSeek(regs*)+0x5b>
c0016807:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001680c:	77 34                	ja     c0016842 <sysCallSeek(regs*)+0x4b>
c001680e:	83 ec 0c             	sub    esp,0xc
c0016811:	50                   	push   eax
c0016812:	e8 62 78 ff ff       	call   c000e079 <getFromFileDescriptor(int)>
c0016817:	83 c4 0c             	add    esp,0xc
c001681a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001681d:	31 db                	xor    ebx,ebx
c001681f:	53                   	push   ebx
c0016820:	51                   	push   ecx
c0016821:	50                   	push   eax
c0016822:	e8 4f 90 ff ff       	call   c000f876 <File::seek(unsigned long long)>
c0016827:	83 c4 10             	add    esp,0x10
c001682a:	85 c0                	test   eax,eax
c001682c:	0f 95 c0             	setne  al
c001682f:	25 ff 00 00 00       	and    eax,0xff
c0016834:	31 d2                	xor    edx,edx
c0016836:	f7 d8                	neg    eax
c0016838:	83 d2 00             	adc    edx,0x0
c001683b:	83 c4 08             	add    esp,0x8
c001683e:	f7 da                	neg    edx
c0016840:	5b                   	pop    ebx
c0016841:	c3                   	ret    
c0016842:	52                   	push   edx
c0016843:	52                   	push   edx
c0016844:	50                   	push   eax
c0016845:	68 84 2b 02 c0       	push   0xc0022b84
c001684a:	e8 ce 89 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001684f:	83 c4 10             	add    esp,0x10
c0016852:	83 c4 08             	add    esp,0x8
c0016855:	83 c8 ff             	or     eax,0xffffffff
c0016858:	83 ca ff             	or     edx,0xffffffff
c001685b:	5b                   	pop    ebx
c001685c:	c3                   	ret    

c001685d <sysCallTell(regs*)>:
c001685d:	53                   	push   ebx
c001685e:	83 ec 08             	sub    esp,0x8
c0016861:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016865:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016868:	83 f8 02             	cmp    eax,0x2
c001686b:	76 60                	jbe    c00168cd <sysCallTell(regs*)+0x70>
c001686d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016872:	77 30                	ja     c00168a4 <sysCallTell(regs*)+0x47>
c0016874:	83 ec 0c             	sub    esp,0xc
c0016877:	50                   	push   eax
c0016878:	e8 fc 77 ff ff       	call   c000e079 <getFromFileDescriptor(int)>
c001687d:	5a                   	pop    edx
c001687e:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0016881:	59                   	pop    ecx
c0016882:	53                   	push   ebx
c0016883:	50                   	push   eax
c0016884:	e8 43 90 ff ff       	call   c000f8cc <File::tell(unsigned long long*)>
c0016889:	83 c4 10             	add    esp,0x10
c001688c:	85 c0                	test   eax,eax
c001688e:	0f 95 c0             	setne  al
c0016891:	25 ff 00 00 00       	and    eax,0xff
c0016896:	31 d2                	xor    edx,edx
c0016898:	f7 d8                	neg    eax
c001689a:	83 d2 00             	adc    edx,0x0
c001689d:	83 c4 08             	add    esp,0x8
c00168a0:	f7 da                	neg    edx
c00168a2:	5b                   	pop    ebx
c00168a3:	c3                   	ret    
c00168a4:	52                   	push   edx
c00168a5:	52                   	push   edx
c00168a6:	50                   	push   eax
c00168a7:	68 9e 2b 02 c0       	push   0xc0022b9e
c00168ac:	e8 6c 89 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c00168b1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00168b4:	83 c4 10             	add    esp,0x10
c00168b7:	31 d2                	xor    edx,edx
c00168b9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00168bf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00168c6:	83 c4 08             	add    esp,0x8
c00168c9:	31 c0                	xor    eax,eax
c00168cb:	5b                   	pop    ebx
c00168cc:	c3                   	ret    
c00168cd:	83 c4 08             	add    esp,0x8
c00168d0:	83 c8 ff             	or     eax,0xffffffff
c00168d3:	83 ca ff             	or     edx,0xffffffff
c00168d6:	5b                   	pop    ebx
c00168d7:	c3                   	ret    

c00168d8 <sysCallSizeFromFilename(regs*)>:
c00168d8:	57                   	push   edi
c00168d9:	56                   	push   esi
c00168da:	53                   	push   ebx
c00168db:	83 ec 10             	sub    esp,0x10
c00168de:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00168e2:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00168e5:	83 fb 02             	cmp    ebx,0x2
c00168e8:	0f 86 8b 00 00 00    	jbe    c0016979 <sysCallSizeFromFilename(regs*)+0xa1>
c00168ee:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00168f4:	77 58                	ja     c001694e <sysCallSizeFromFilename(regs*)+0x76>
c00168f6:	83 ec 0c             	sub    esp,0xc
c00168f9:	68 14 01 00 00       	push   0x114
c00168fe:	e8 e5 87 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c0016903:	89 c7                	mov    edi,eax
c0016905:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001690a:	83 c4 0c             	add    esp,0xc
c001690d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016910:	50                   	push   eax
c0016911:	53                   	push   ebx
c0016912:	57                   	push   edi
c0016913:	e8 3c 8e ff ff       	call   c000f754 <File::File(char const*, Process*)>
c0016918:	83 c4 0c             	add    esp,0xc
c001691b:	8d 44 24 13          	lea    eax,[esp+0x13]
c001691f:	50                   	push   eax
c0016920:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0016923:	52                   	push   edx
c0016924:	57                   	push   edi
c0016925:	e8 3a 91 ff ff       	call   c000fa64 <File::stat(unsigned long long*, bool*)>
c001692a:	89 c3                	mov    ebx,eax
c001692c:	8b 07                	mov    eax,DWORD PTR [edi]
c001692e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016931:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016934:	31 c0                	xor    eax,eax
c0016936:	83 c4 10             	add    esp,0x10
c0016939:	85 db                	test   ebx,ebx
c001693b:	0f 95 c0             	setne  al
c001693e:	31 d2                	xor    edx,edx
c0016940:	f7 d8                	neg    eax
c0016942:	83 d2 00             	adc    edx,0x0
c0016945:	83 c4 10             	add    esp,0x10
c0016948:	f7 da                	neg    edx
c001694a:	5b                   	pop    ebx
c001694b:	5e                   	pop    esi
c001694c:	5f                   	pop    edi
c001694d:	c3                   	ret    
c001694e:	51                   	push   ecx
c001694f:	51                   	push   ecx
c0016950:	53                   	push   ebx
c0016951:	68 b8 2b 02 c0       	push   0xc0022bb8
c0016956:	e8 c2 88 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001695b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001695e:	83 c4 10             	add    esp,0x10
c0016961:	31 d2                	xor    edx,edx
c0016963:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016969:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016970:	83 c4 10             	add    esp,0x10
c0016973:	31 c0                	xor    eax,eax
c0016975:	5b                   	pop    ebx
c0016976:	5e                   	pop    esi
c0016977:	5f                   	pop    edi
c0016978:	c3                   	ret    
c0016979:	83 c4 10             	add    esp,0x10
c001697c:	83 c8 ff             	or     eax,0xffffffff
c001697f:	83 ca ff             	or     edx,0xffffffff
c0016982:	5b                   	pop    ebx
c0016983:	5e                   	pop    esi
c0016984:	5f                   	pop    edi
c0016985:	c3                   	ret    

c0016986 <sysCallSize(regs*)>:
c0016986:	53                   	push   ebx
c0016987:	83 ec 18             	sub    esp,0x18
c001698a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001698e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016991:	83 f8 02             	cmp    eax,0x2
c0016994:	76 66                	jbe    c00169fc <sysCallSize(regs*)+0x76>
c0016996:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001699b:	77 36                	ja     c00169d3 <sysCallSize(regs*)+0x4d>
c001699d:	83 ec 0c             	sub    esp,0xc
c00169a0:	50                   	push   eax
c00169a1:	e8 d3 76 ff ff       	call   c000e079 <getFromFileDescriptor(int)>
c00169a6:	83 c4 0c             	add    esp,0xc
c00169a9:	8d 54 24 13          	lea    edx,[esp+0x13]
c00169ad:	52                   	push   edx
c00169ae:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00169b1:	52                   	push   edx
c00169b2:	50                   	push   eax
c00169b3:	e8 ac 90 ff ff       	call   c000fa64 <File::stat(unsigned long long*, bool*)>
c00169b8:	83 c4 10             	add    esp,0x10
c00169bb:	85 c0                	test   eax,eax
c00169bd:	0f 95 c0             	setne  al
c00169c0:	25 ff 00 00 00       	and    eax,0xff
c00169c5:	31 d2                	xor    edx,edx
c00169c7:	f7 d8                	neg    eax
c00169c9:	83 d2 00             	adc    edx,0x0
c00169cc:	83 c4 18             	add    esp,0x18
c00169cf:	f7 da                	neg    edx
c00169d1:	5b                   	pop    ebx
c00169d2:	c3                   	ret    
c00169d3:	51                   	push   ecx
c00169d4:	51                   	push   ecx
c00169d5:	50                   	push   eax
c00169d6:	68 b8 2b 02 c0       	push   0xc0022bb8
c00169db:	e8 3d 88 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c00169e0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00169e3:	83 c4 10             	add    esp,0x10
c00169e6:	31 d2                	xor    edx,edx
c00169e8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00169ee:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00169f5:	83 c4 18             	add    esp,0x18
c00169f8:	31 c0                	xor    eax,eax
c00169fa:	5b                   	pop    ebx
c00169fb:	c3                   	ret    
c00169fc:	83 c4 18             	add    esp,0x18
c00169ff:	83 c8 ff             	or     eax,0xffffffff
c0016a02:	83 ca ff             	or     edx,0xffffffff
c0016a05:	5b                   	pop    ebx
c0016a06:	c3                   	ret    

c0016a07 <sysCallClose(regs*)>:
c0016a07:	53                   	push   ebx
c0016a08:	83 ec 08             	sub    esp,0x8
c0016a0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a0f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016a12:	83 f8 02             	cmp    eax,0x2
c0016a15:	76 4f                	jbe    c0016a66 <sysCallClose(regs*)+0x5f>
c0016a17:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016a1c:	74 53                	je     c0016a71 <sysCallClose(regs*)+0x6a>
c0016a1e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016a23:	74 5b                	je     c0016a80 <sysCallClose(regs*)+0x79>
c0016a25:	77 2f                	ja     c0016a56 <sysCallClose(regs*)+0x4f>
c0016a27:	83 ec 0c             	sub    esp,0xc
c0016a2a:	50                   	push   eax
c0016a2b:	e8 49 76 ff ff       	call   c000e079 <getFromFileDescriptor(int)>
c0016a30:	89 c3                	mov    ebx,eax
c0016a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a35:	e8 dc 8d ff ff       	call   c000f816 <File::close()>
c0016a3a:	83 c4 10             	add    esp,0x10
c0016a3d:	85 db                	test   ebx,ebx
c0016a3f:	74 0c                	je     c0016a4d <sysCallClose(regs*)+0x46>
c0016a41:	83 ec 0c             	sub    esp,0xc
c0016a44:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a46:	53                   	push   ebx
c0016a47:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a4a:	83 c4 10             	add    esp,0x10
c0016a4d:	83 c4 08             	add    esp,0x8
c0016a50:	31 c0                	xor    eax,eax
c0016a52:	31 d2                	xor    edx,edx
c0016a54:	5b                   	pop    ebx
c0016a55:	c3                   	ret    
c0016a56:	52                   	push   edx
c0016a57:	52                   	push   edx
c0016a58:	50                   	push   eax
c0016a59:	68 ec 2a 02 c0       	push   0xc0022aec
c0016a5e:	e8 ba 87 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0016a63:	83 c4 10             	add    esp,0x10
c0016a66:	83 c4 08             	add    esp,0x8
c0016a69:	83 c8 ff             	or     eax,0xffffffff
c0016a6c:	83 ca ff             	or     edx,0xffffffff
c0016a6f:	5b                   	pop    ebx
c0016a70:	c3                   	ret    
c0016a71:	83 ec 0c             	sub    esp,0xc
c0016a74:	68 d3 2b 02 c0       	push   0xc0022bd3
c0016a79:	e8 9f 87 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0016a7e:	eb ca                	jmp    c0016a4a <sysCallClose(regs*)+0x43>
c0016a80:	83 ec 0c             	sub    esp,0xc
c0016a83:	68 e1 2b 02 c0       	push   0xc0022be1
c0016a88:	eb ef                	jmp    c0016a79 <sysCallClose(regs*)+0x72>

c0016a8a <sysCallOpenDir(regs*)>:
c0016a8a:	56                   	push   esi
c0016a8b:	53                   	push   ebx
c0016a8c:	50                   	push   eax
c0016a8d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016a91:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016a94:	85 c0                	test   eax,eax
c0016a96:	74 53                	je     c0016aeb <sysCallOpenDir(regs*)+0x61>
c0016a98:	83 ec 0c             	sub    esp,0xc
c0016a9b:	68 14 01 00 00       	push   0x114
c0016aa0:	e8 43 86 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c0016aa5:	89 c6                	mov    esi,eax
c0016aa7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016aac:	83 c4 0c             	add    esp,0xc
c0016aaf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ab2:	50                   	push   eax
c0016ab3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016ab6:	50                   	push   eax
c0016ab7:	56                   	push   esi
c0016ab8:	e8 59 91 ff ff       	call   c000fc16 <Directory::Directory(char const*, Process*)>
c0016abd:	89 34 24             	mov    DWORD PTR [esp],esi
c0016ac0:	e8 b5 91 ff ff       	call   c000fc7a <Directory::open()>
c0016ac5:	83 c4 10             	add    esp,0x10
c0016ac8:	85 c0                	test   eax,eax
c0016aca:	75 1f                	jne    c0016aeb <sysCallOpenDir(regs*)+0x61>
c0016acc:	83 ec 0c             	sub    esp,0xc
c0016acf:	56                   	push   esi
c0016ad0:	e8 ef 72 ff ff       	call   c000ddc4 <UnixFile::getFileDescriptor()>
c0016ad5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016ad8:	83 c4 10             	add    esp,0x10
c0016adb:	89 02                	mov    DWORD PTR [edx],eax
c0016add:	c1 f8 1f             	sar    eax,0x1f
c0016ae0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016ae3:	31 c0                	xor    eax,eax
c0016ae5:	59                   	pop    ecx
c0016ae6:	31 d2                	xor    edx,edx
c0016ae8:	5b                   	pop    ebx
c0016ae9:	5e                   	pop    esi
c0016aea:	c3                   	ret    
c0016aeb:	59                   	pop    ecx
c0016aec:	83 c8 ff             	or     eax,0xffffffff
c0016aef:	5b                   	pop    ebx
c0016af0:	83 ca ff             	or     edx,0xffffffff
c0016af3:	5e                   	pop    esi
c0016af4:	c3                   	ret    

c0016af5 <sysCallMakeDir(regs*)>:
c0016af5:	56                   	push   esi
c0016af6:	53                   	push   ebx
c0016af7:	83 ec 10             	sub    esp,0x10
c0016afa:	68 14 01 00 00       	push   0x114
c0016aff:	e8 e4 85 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c0016b04:	89 c3                	mov    ebx,eax
c0016b06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b0b:	83 c4 0c             	add    esp,0xc
c0016b0e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016b11:	50                   	push   eax
c0016b12:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b16:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0016b19:	52                   	push   edx
c0016b1a:	53                   	push   ebx
c0016b1b:	e8 f6 90 ff ff       	call   c000fc16 <Directory::Directory(char const*, Process*)>
c0016b20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b23:	e8 32 93 ff ff       	call   c000fe5a <Directory::create()>
c0016b28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b2b:	89 c6                	mov    esi,eax
c0016b2d:	e8 a4 91 ff ff       	call   c000fcd6 <Directory::close()>
c0016b32:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b37:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b3a:	31 c0                	xor    eax,eax
c0016b3c:	85 f6                	test   esi,esi
c0016b3e:	0f 95 c0             	setne  al
c0016b41:	31 d2                	xor    edx,edx
c0016b43:	f7 d8                	neg    eax
c0016b45:	83 d2 00             	adc    edx,0x0
c0016b48:	83 c4 14             	add    esp,0x14
c0016b4b:	f7 da                	neg    edx
c0016b4d:	5b                   	pop    ebx
c0016b4e:	5e                   	pop    esi
c0016b4f:	c3                   	ret    

c0016b50 <sysCallCloseDir(regs*)>:
c0016b50:	53                   	push   ebx
c0016b51:	83 ec 08             	sub    esp,0x8
c0016b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b58:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016b5b:	83 f8 02             	cmp    eax,0x2
c0016b5e:	76 46                	jbe    c0016ba6 <sysCallCloseDir(regs*)+0x56>
c0016b60:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016b65:	77 2f                	ja     c0016b96 <sysCallCloseDir(regs*)+0x46>
c0016b67:	83 ec 0c             	sub    esp,0xc
c0016b6a:	50                   	push   eax
c0016b6b:	e8 09 75 ff ff       	call   c000e079 <getFromFileDescriptor(int)>
c0016b70:	89 c3                	mov    ebx,eax
c0016b72:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b75:	e8 5c 91 ff ff       	call   c000fcd6 <Directory::close()>
c0016b7a:	83 c4 10             	add    esp,0x10
c0016b7d:	85 db                	test   ebx,ebx
c0016b7f:	74 0c                	je     c0016b8d <sysCallCloseDir(regs*)+0x3d>
c0016b81:	83 ec 0c             	sub    esp,0xc
c0016b84:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b86:	53                   	push   ebx
c0016b87:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b8a:	83 c4 10             	add    esp,0x10
c0016b8d:	83 c4 08             	add    esp,0x8
c0016b90:	31 c0                	xor    eax,eax
c0016b92:	31 d2                	xor    edx,edx
c0016b94:	5b                   	pop    ebx
c0016b95:	c3                   	ret    
c0016b96:	52                   	push   edx
c0016b97:	52                   	push   edx
c0016b98:	50                   	push   eax
c0016b99:	68 14 2b 02 c0       	push   0xc0022b14
c0016b9e:	e8 7a 86 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0016ba3:	83 c4 10             	add    esp,0x10
c0016ba6:	83 c4 08             	add    esp,0x8
c0016ba9:	83 c8 ff             	or     eax,0xffffffff
c0016bac:	83 ca ff             	or     edx,0xffffffff
c0016baf:	5b                   	pop    ebx
c0016bb0:	c3                   	ret    

c0016bb1 <sysCallWait(regs*)>:
c0016bb1:	83 ec 10             	sub    esp,0x10
c0016bb4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016bb8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016bbb:	52                   	push   edx
c0016bbc:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0016bbf:	51                   	push   ecx
c0016bc0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016bc3:	50                   	push   eax
c0016bc4:	e8 4f 23 00 00       	call   c0018f18 <waitTask(int, int*, int)>
c0016bc9:	89 c2                	mov    edx,eax
c0016bcb:	83 c4 1c             	add    esp,0x1c
c0016bce:	c1 fa 1f             	sar    edx,0x1f
c0016bd1:	c3                   	ret    

c0016bd2 <sysCallRmdir(regs*)>:
c0016bd2:	56                   	push   esi
c0016bd3:	53                   	push   ebx
c0016bd4:	83 ec 10             	sub    esp,0x10
c0016bd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bdb:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016bde:	68 14 01 00 00       	push   0x114
c0016be3:	e8 00 85 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c0016be8:	83 c4 0c             	add    esp,0xc
c0016beb:	89 c3                	mov    ebx,eax
c0016bed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bf2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016bf5:	50                   	push   eax
c0016bf6:	56                   	push   esi
c0016bf7:	53                   	push   ebx
c0016bf8:	e8 57 8b ff ff       	call   c000f754 <File::File(char const*, Process*)>
c0016bfd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c00:	e8 2b 8d ff ff       	call   c000f930 <File::unlink()>
c0016c05:	89 c6                	mov    esi,eax
c0016c07:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c0c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016c0f:	31 c0                	xor    eax,eax
c0016c11:	85 f6                	test   esi,esi
c0016c13:	0f 95 c0             	setne  al
c0016c16:	31 d2                	xor    edx,edx
c0016c18:	f7 d8                	neg    eax
c0016c1a:	83 d2 00             	adc    edx,0x0
c0016c1d:	83 c4 14             	add    esp,0x14
c0016c20:	f7 da                	neg    edx
c0016c22:	5b                   	pop    ebx
c0016c23:	5e                   	pop    esi
c0016c24:	c3                   	ret    

c0016c25 <sysCallUnlink(regs*)>:
c0016c25:	56                   	push   esi
c0016c26:	53                   	push   ebx
c0016c27:	83 ec 10             	sub    esp,0x10
c0016c2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c2e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016c31:	68 14 01 00 00       	push   0x114
c0016c36:	e8 ad 84 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c0016c3b:	83 c4 0c             	add    esp,0xc
c0016c3e:	89 c3                	mov    ebx,eax
c0016c40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c45:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016c48:	50                   	push   eax
c0016c49:	56                   	push   esi
c0016c4a:	53                   	push   ebx
c0016c4b:	e8 04 8b ff ff       	call   c000f754 <File::File(char const*, Process*)>
c0016c50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c53:	e8 d8 8c ff ff       	call   c000f930 <File::unlink()>
c0016c58:	89 c6                	mov    esi,eax
c0016c5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c5f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016c62:	31 c0                	xor    eax,eax
c0016c64:	85 f6                	test   esi,esi
c0016c66:	0f 95 c0             	setne  al
c0016c69:	31 d2                	xor    edx,edx
c0016c6b:	f7 d8                	neg    eax
c0016c6d:	83 d2 00             	adc    edx,0x0
c0016c70:	83 c4 14             	add    esp,0x14
c0016c73:	f7 da                	neg    edx
c0016c75:	5b                   	pop    ebx
c0016c76:	5e                   	pop    esi
c0016c77:	c3                   	ret    

c0016c78 <sysCallGetArgv(regs*)>:
c0016c78:	83 ec 0c             	sub    esp,0xc
c0016c7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016c7f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016c82:	85 c0                	test   eax,eax
c0016c84:	78 2b                	js     c0016cb1 <sysCallGetArgv(regs*)+0x39>
c0016c86:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016c8c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0016c8f:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0016c95:	7d 1a                	jge    c0016cb1 <sysCallGetArgv(regs*)+0x39>
c0016c97:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0016c9e:	85 c0                	test   eax,eax
c0016ca0:	74 17                	je     c0016cb9 <sysCallGetArgv(regs*)+0x41>
c0016ca2:	51                   	push   ecx
c0016ca3:	51                   	push   ecx
c0016ca4:	50                   	push   eax
c0016ca5:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0016ca8:	50                   	push   eax
c0016ca9:	e8 be 9a fe ff       	call   c000076c <strcpy>
c0016cae:	83 c4 10             	add    esp,0x10
c0016cb1:	31 c0                	xor    eax,eax
c0016cb3:	31 d2                	xor    edx,edx
c0016cb5:	83 c4 0c             	add    esp,0xc
c0016cb8:	c3                   	ret    
c0016cb9:	b8 01 00 00 00       	mov    eax,0x1
c0016cbe:	31 d2                	xor    edx,edx
c0016cc0:	83 c4 0c             	add    esp,0xc
c0016cc3:	c3                   	ret    

c0016cc4 <sysCallTTYName(regs*)>:
c0016cc4:	56                   	push   esi
c0016cc5:	53                   	push   ebx
c0016cc6:	50                   	push   eax
c0016cc7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016ccb:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016cce:	85 c0                	test   eax,eax
c0016cd0:	74 4d                	je     c0016d1f <sysCallTTYName(regs*)+0x5b>
c0016cd2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016cd5:	83 f8 02             	cmp    eax,0x2
c0016cd8:	76 07                	jbe    c0016ce1 <sysCallTTYName(regs*)+0x1d>
c0016cda:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016cdf:	75 54                	jne    c0016d35 <sysCallTTYName(regs*)+0x71>
c0016ce1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ce6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ce9:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016cef:	85 db                	test   ebx,ebx
c0016cf1:	74 2c                	je     c0016d1f <sysCallTTYName(regs*)+0x5b>
c0016cf3:	83 ec 0c             	sub    esp,0xc
c0016cf6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016cf8:	53                   	push   ebx
c0016cf9:	ff 10                	call   DWORD PTR [eax]
c0016cfb:	83 c4 10             	add    esp,0x10
c0016cfe:	84 c0                	test   al,al
c0016d00:	74 28                	je     c0016d2a <sysCallTTYName(regs*)+0x66>
c0016d02:	50                   	push   eax
c0016d03:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0016d09:	50                   	push   eax
c0016d0a:	53                   	push   ebx
c0016d0b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016d0e:	50                   	push   eax
c0016d0f:	e8 58 9a fe ff       	call   c000076c <strcpy>
c0016d14:	83 c4 10             	add    esp,0x10
c0016d17:	31 c0                	xor    eax,eax
c0016d19:	31 d2                	xor    edx,edx
c0016d1b:	59                   	pop    ecx
c0016d1c:	5b                   	pop    ebx
c0016d1d:	5e                   	pop    esi
c0016d1e:	c3                   	ret    
c0016d1f:	59                   	pop    ecx
c0016d20:	b8 01 00 00 00       	mov    eax,0x1
c0016d25:	5b                   	pop    ebx
c0016d26:	31 d2                	xor    edx,edx
c0016d28:	5e                   	pop    esi
c0016d29:	c3                   	ret    
c0016d2a:	59                   	pop    ecx
c0016d2b:	b8 02 00 00 00       	mov    eax,0x2
c0016d30:	5b                   	pop    ebx
c0016d31:	31 d2                	xor    edx,edx
c0016d33:	5e                   	pop    esi
c0016d34:	c3                   	ret    
c0016d35:	83 ec 0c             	sub    esp,0xc
c0016d38:	50                   	push   eax
c0016d39:	e8 3b 73 ff ff       	call   c000e079 <getFromFileDescriptor(int)>
c0016d3e:	83 c4 10             	add    esp,0x10
c0016d41:	89 c3                	mov    ebx,eax
c0016d43:	eb aa                	jmp    c0016cef <sysCallTTYName(regs*)+0x2b>

c0016d45 <sysCallGetEnv(regs*)>:
c0016d45:	83 ec 0c             	sub    esp,0xc
c0016d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d4c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016d4f:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016d52:	85 d2                	test   edx,edx
c0016d54:	75 22                	jne    c0016d78 <sysCallGetEnv(regs*)+0x33>
c0016d56:	31 c0                	xor    eax,eax
c0016d58:	31 d2                	xor    edx,edx
c0016d5a:	85 c9                	test   ecx,ecx
c0016d5c:	74 04                	je     c0016d62 <sysCallGetEnv(regs*)+0x1d>
c0016d5e:	83 c4 0c             	add    esp,0xc
c0016d61:	c3                   	ret    
c0016d62:	83 ec 0c             	sub    esp,0xc
c0016d65:	68 38 2b 02 c0       	push   0xc0022b38
c0016d6a:	e8 7b 99 fe ff       	call   c00006ea <strlen>
c0016d6f:	83 c4 10             	add    esp,0x10
c0016d72:	31 d2                	xor    edx,edx
c0016d74:	83 c4 0c             	add    esp,0xc
c0016d77:	c3                   	ret    
c0016d78:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016d7b:	85 c9                	test   ecx,ecx
c0016d7d:	74 0b                	je     c0016d8a <sysCallGetEnv(regs*)+0x45>
c0016d7f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0016d82:	31 c0                	xor    eax,eax
c0016d84:	31 d2                	xor    edx,edx
c0016d86:	83 c4 0c             	add    esp,0xc
c0016d89:	c3                   	ret    
c0016d8a:	52                   	push   edx
c0016d8b:	52                   	push   edx
c0016d8c:	68 38 2b 02 c0       	push   0xc0022b38
c0016d91:	50                   	push   eax
c0016d92:	e8 d5 99 fe ff       	call   c000076c <strcpy>
c0016d97:	83 c4 10             	add    esp,0x10
c0016d9a:	eb e6                	jmp    c0016d82 <sysCallGetEnv(regs*)+0x3d>

c0016d9c <sysCallUSleep(regs*)>:
c0016d9c:	57                   	push   edi
c0016d9d:	56                   	push   esi
c0016d9e:	53                   	push   ebx
c0016d9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016da3:	52                   	push   edx
c0016da4:	52                   	push   edx
c0016da5:	8b 58 28             	mov    ebx,DWORD PTR [eax+0x28]
c0016da8:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016dab:	89 c8                	mov    eax,ecx
c0016dad:	89 da                	mov    edx,ebx
c0016daf:	0f a4 c2 05          	shld   edx,eax,0x5
c0016db3:	c1 e0 05             	shl    eax,0x5
c0016db6:	29 c8                	sub    eax,ecx
c0016db8:	19 da                	sbb    edx,ebx
c0016dba:	0f a4 c2 02          	shld   edx,eax,0x2
c0016dbe:	c1 e0 02             	shl    eax,0x2
c0016dc1:	01 c8                	add    eax,ecx
c0016dc3:	11 da                	adc    edx,ebx
c0016dc5:	0f a4 c2 03          	shld   edx,eax,0x3
c0016dc9:	c1 e0 03             	shl    eax,0x3
c0016dcc:	52                   	push   edx
c0016dcd:	50                   	push   eax
c0016dce:	e8 e0 21 00 00       	call   c0018fb3 <nanoSleep(unsigned long long)>
c0016dd3:	83 c4 10             	add    esp,0x10
c0016dd6:	31 c0                	xor    eax,eax
c0016dd8:	31 d2                	xor    edx,edx
c0016dda:	5b                   	pop    ebx
c0016ddb:	5e                   	pop    esi
c0016ddc:	5f                   	pop    edi
c0016ddd:	c3                   	ret    

c0016dde <sysCallSpawn(regs*)>:
c0016dde:	56                   	push   esi
c0016ddf:	53                   	push   ebx
c0016de0:	50                   	push   eax
c0016de1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016de5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016de8:	85 c0                	test   eax,eax
c0016dea:	75 08                	jne    c0016df4 <sysCallSpawn(regs*)+0x16>
c0016dec:	59                   	pop    ecx
c0016ded:	31 c0                	xor    eax,eax
c0016def:	5b                   	pop    ebx
c0016df0:	31 d2                	xor    edx,edx
c0016df2:	5e                   	pop    esi
c0016df3:	c3                   	ret    
c0016df4:	83 ec 0c             	sub    esp,0xc
c0016df7:	68 3b 07 00 00       	push   0x73b
c0016dfc:	e8 e7 82 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c0016e01:	89 c6                	mov    esi,eax
c0016e03:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016e06:	50                   	push   eax
c0016e07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e0c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016e0f:	50                   	push   eax
c0016e10:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016e13:	50                   	push   eax
c0016e14:	56                   	push   esi
c0016e15:	e8 d6 18 00 00       	call   c00186f0 <Process::Process(char const*, Process*, char**)>
c0016e1a:	83 c4 20             	add    esp,0x20
c0016e1d:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0016e24:	75 c6                	jne    c0016dec <sysCallSpawn(regs*)+0xe>
c0016e26:	83 ec 0c             	sub    esp,0xc
c0016e29:	56                   	push   esi
c0016e2a:	e8 3d 1e 00 00       	call   c0018c6c <Process::createUserThread()>
c0016e2f:	83 c4 10             	add    esp,0x10
c0016e32:	8b 06                	mov    eax,DWORD PTR [esi]
c0016e34:	89 c2                	mov    edx,eax
c0016e36:	c1 fa 1f             	sar    edx,0x1f
c0016e39:	59                   	pop    ecx
c0016e3a:	5b                   	pop    ebx
c0016e3b:	5e                   	pop    esi
c0016e3c:	c3                   	ret    

c0016e3d <sysAppSettings(regs*)>:
c0016e3d:	53                   	push   ebx
c0016e3e:	31 d2                	xor    edx,edx
c0016e40:	83 ec 08             	sub    esp,0x8
c0016e43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e47:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0016e4a:	b8 01 00 00 00       	mov    eax,0x1
c0016e4f:	8b 8b 00 01 00 00    	mov    ecx,DWORD PTR [ebx+0x100]
c0016e55:	81 e1 e0 1f 00 00    	and    ecx,0x1fe0
c0016e5b:	66 81 f9 c0 09       	cmp    cx,0x9c0
c0016e60:	75 30                	jne    c0016e92 <sysAppSettings(regs*)+0x55>
c0016e62:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0016e68:	83 e0 1f             	and    eax,0x1f
c0016e6b:	3c 01                	cmp    al,0x1
c0016e6d:	74 28                	je     c0016e97 <sysAppSettings(regs*)+0x5a>
c0016e6f:	3c 07                	cmp    al,0x7
c0016e71:	0f 84 be 00 00 00    	je     c0016f35 <sysAppSettings(regs*)+0xf8>
c0016e77:	84 c0                	test   al,al
c0016e79:	0f 84 da 00 00 00    	je     c0016f59 <sysAppSettings(regs*)+0x11c>
c0016e7f:	3c 08                	cmp    al,0x8
c0016e81:	74 6d                	je     c0016ef0 <sysAppSettings(regs*)+0xb3>
c0016e83:	25 ff 00 00 00       	and    eax,0xff
c0016e88:	05 e8 03 00 00       	add    eax,0x3e8
c0016e8d:	89 c2                	mov    edx,eax
c0016e8f:	c1 fa 1f             	sar    edx,0x1f
c0016e92:	83 c4 08             	add    esp,0x8
c0016e95:	5b                   	pop    ebx
c0016e96:	c3                   	ret    
c0016e97:	50                   	push   eax
c0016e98:	68 00 01 00 00       	push   0x100
c0016e9d:	6a 00                	push   0x0
c0016e9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ea4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ea7:	83 c0 0c             	add    eax,0xc
c0016eaa:	50                   	push   eax
c0016eab:	e8 1d 98 fe ff       	call   c00006cd <memset>
c0016eb0:	83 c4 0c             	add    esp,0xc
c0016eb3:	68 ff 00 00 00       	push   0xff
c0016eb8:	53                   	push   ebx
c0016eb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ebe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ec1:	83 c0 0c             	add    eax,0xc
c0016ec4:	50                   	push   eax
c0016ec5:	e8 cd 97 fe ff       	call   c0000697 <memcpy>
c0016eca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ecf:	5a                   	pop    edx
c0016ed0:	59                   	pop    ecx
c0016ed1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ed4:	8d 50 0c             	lea    edx,[eax+0xc]
c0016ed7:	52                   	push   edx
c0016ed8:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016ede:	53                   	push   ebx
c0016edf:	e8 dc 62 ff ff       	call   c000d1c0 <VgaText::setTitle(char*)>
c0016ee4:	83 c4 10             	add    esp,0x10
c0016ee7:	31 c0                	xor    eax,eax
c0016ee9:	31 d2                	xor    edx,edx
c0016eeb:	83 c4 08             	add    esp,0x8
c0016eee:	5b                   	pop    ebx
c0016eef:	c3                   	ret    
c0016ef0:	50                   	push   eax
c0016ef1:	50                   	push   eax
c0016ef2:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016ef8:	83 e0 0f             	and    eax,0xf
c0016efb:	50                   	push   eax
c0016efc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f01:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f04:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0016f0a:	50                   	push   eax
c0016f0b:	e8 a0 62 ff ff       	call   c000d1b0 <VgaText::setTitleColour(VgaColour)>
c0016f10:	58                   	pop    eax
c0016f11:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016f17:	c1 e8 04             	shr    eax,0x4
c0016f1a:	5a                   	pop    edx
c0016f1b:	83 e0 0f             	and    eax,0xf
c0016f1e:	50                   	push   eax
c0016f1f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f24:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f27:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016f2d:	51                   	push   ecx
c0016f2e:	e8 6d 62 ff ff       	call   c000d1a0 <VgaText::setTitleTextColour(VgaColour)>
c0016f33:	eb af                	jmp    c0016ee4 <sysAppSettings(regs*)+0xa7>
c0016f35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f3a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f3d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0016f43:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0016f49:	c0 e8 06             	shr    al,0x6
c0016f4c:	83 e0 01             	and    eax,0x1
c0016f4f:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0016f55:	31 c0                	xor    eax,eax
c0016f57:	eb 90                	jmp    c0016ee9 <sysAppSettings(regs*)+0xac>
c0016f59:	b8 02 00 00 00       	mov    eax,0x2
c0016f5e:	31 d2                	xor    edx,edx
c0016f60:	eb 89                	jmp    c0016eeb <sysAppSettings(regs*)+0xae>

c0016f62 <sysSetFatAttrib(regs*)>:
c0016f62:	57                   	push   edi
c0016f63:	56                   	push   esi
c0016f64:	53                   	push   ebx
c0016f65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f69:	83 ec 0c             	sub    esp,0xc
c0016f6c:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016f6f:	68 14 01 00 00       	push   0x114
c0016f74:	e8 6f 81 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c0016f79:	83 c4 0c             	add    esp,0xc
c0016f7c:	89 c3                	mov    ebx,eax
c0016f7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f83:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f86:	50                   	push   eax
c0016f87:	57                   	push   edi
c0016f88:	53                   	push   ebx
c0016f89:	e8 c6 87 ff ff       	call   c000f754 <File::File(char const*, Process*)>
c0016f8e:	83 c4 0c             	add    esp,0xc
c0016f91:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016f94:	0f b6 d4             	movzx  edx,ah
c0016f97:	52                   	push   edx
c0016f98:	25 ff 00 00 00       	and    eax,0xff
c0016f9d:	50                   	push   eax
c0016f9e:	53                   	push   ebx
c0016f9f:	e8 26 8a ff ff       	call   c000f9ca <File::chfatattr(unsigned char, unsigned char)>
c0016fa4:	89 c6                	mov    esi,eax
c0016fa6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fa8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016fab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016fae:	83 c4 10             	add    esp,0x10
c0016fb1:	31 c0                	xor    eax,eax
c0016fb3:	85 f6                	test   esi,esi
c0016fb5:	0f 95 c0             	setne  al
c0016fb8:	5b                   	pop    ebx
c0016fb9:	31 d2                	xor    edx,edx
c0016fbb:	f7 d8                	neg    eax
c0016fbd:	83 d2 00             	adc    edx,0x0
c0016fc0:	5e                   	pop    esi
c0016fc1:	f7 da                	neg    edx
c0016fc3:	5f                   	pop    edi
c0016fc4:	c3                   	ret    

c0016fc5 <sysPanic(regs*)>:
c0016fc5:	83 ec 18             	sub    esp,0x18
c0016fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016fcc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016fcf:	50                   	push   eax
c0016fd0:	e8 77 ea ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c0016fd5:	c7 04 24 ef 2b 02 c0 	mov    DWORD PTR [esp],0xc0022bef
c0016fdc:	e8 6b ea ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c0016fe1:	b8 01 00 00 00       	mov    eax,0x1
c0016fe6:	31 d2                	xor    edx,edx
c0016fe8:	83 c4 1c             	add    esp,0x1c
c0016feb:	c3                   	ret    

c0016fec <sysPipe(regs*)>:
c0016fec:	57                   	push   edi
c0016fed:	56                   	push   esi
c0016fee:	53                   	push   ebx
c0016fef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ff3:	83 ec 0c             	sub    esp,0xc
c0016ff6:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016ff9:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016ffc:	6a 20                	push   0x20
c0016ffe:	e8 e5 80 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c0017003:	89 c3                	mov    ebx,eax
c0017005:	58                   	pop    eax
c0017006:	5a                   	pop    edx
c0017007:	68 00 50 00 00       	push   0x5000
c001700c:	53                   	push   ebx
c001700d:	e8 ec 5a ff ff       	call   c000cafe <Pipe::Pipe(int)>
c0017012:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017015:	e8 aa 6d ff ff       	call   c000ddc4 <UnixFile::getFileDescriptor()>
c001701a:	89 07                	mov    DWORD PTR [edi],eax
c001701c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001701f:	e8 a0 6d ff ff       	call   c000ddc4 <UnixFile::getFileDescriptor()>
c0017024:	83 c4 10             	add    esp,0x10
c0017027:	89 06                	mov    DWORD PTR [esi],eax
c0017029:	31 d2                	xor    edx,edx
c001702b:	5b                   	pop    ebx
c001702c:	31 c0                	xor    eax,eax
c001702e:	5e                   	pop    esi
c001702f:	5f                   	pop    edi
c0017030:	c3                   	ret    

c0017031 <sysGetUnixTime(regs*)>:
c0017031:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0017036:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001703c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017040:	e9 d7 90 ff ff       	jmp    c001011c <Clock::timeInSecondsLocal()>

c0017045 <string_ends_with(char const*, char const*)>:
c0017045:	57                   	push   edi
c0017046:	56                   	push   esi
c0017047:	53                   	push   ebx
c0017048:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001704c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017050:	83 ec 0c             	sub    esp,0xc
c0017053:	53                   	push   ebx
c0017054:	e8 91 96 fe ff       	call   c00006ea <strlen>
c0017059:	89 3c 24             	mov    DWORD PTR [esp],edi
c001705c:	89 c6                	mov    esi,eax
c001705e:	e8 87 96 fe ff       	call   c00006ea <strlen>
c0017063:	83 c4 10             	add    esp,0x10
c0017066:	31 d2                	xor    edx,edx
c0017068:	39 c6                	cmp    esi,eax
c001706a:	7d 06                	jge    c0017072 <string_ends_with(char const*, char const*)+0x2d>
c001706c:	5b                   	pop    ebx
c001706d:	89 d0                	mov    eax,edx
c001706f:	5e                   	pop    esi
c0017070:	5f                   	pop    edi
c0017071:	c3                   	ret    
c0017072:	52                   	push   edx
c0017073:	29 c6                	sub    esi,eax
c0017075:	52                   	push   edx
c0017076:	01 f3                	add    ebx,esi
c0017078:	57                   	push   edi
c0017079:	53                   	push   ebx
c001707a:	e8 3e 97 fe ff       	call   c00007bd <strcmp>
c001707f:	83 c4 10             	add    esp,0x10
c0017082:	31 d2                	xor    edx,edx
c0017084:	85 c0                	test   eax,eax
c0017086:	5b                   	pop    ebx
c0017087:	0f 94 c2             	sete   dl
c001708a:	5e                   	pop    esi
c001708b:	89 d0                	mov    eax,edx
c001708d:	5f                   	pop    edi
c001708e:	c3                   	ret    

c001708f <sysCallOpen(regs*)>:
c001708f:	56                   	push   esi
c0017090:	53                   	push   ebx
c0017091:	81 ec 04 01 00 00    	sub    esp,0x104
c0017097:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001709e:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00170a1:	85 c9                	test   ecx,ecx
c00170a3:	0f 84 bb 00 00 00    	je     c0017164 <sysCallOpen(regs*)+0xd5>
c00170a9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00170ac:	85 c0                	test   eax,eax
c00170ae:	0f 84 b0 00 00 00    	je     c0017164 <sysCallOpen(regs*)+0xd5>
c00170b4:	52                   	push   edx
c00170b5:	68 fe 2b 02 c0       	push   0xc0022bfe
c00170ba:	50                   	push   eax
c00170bb:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00170bf:	56                   	push   esi
c00170c0:	e8 e5 84 ff ff       	call   c000f5aa <standardiseFiles(char*, char const*, char const*)>
c00170c5:	89 34 24             	mov    DWORD PTR [esp],esi
c00170c8:	e8 1d 96 fe ff       	call   c00006ea <strlen>
c00170cd:	83 c4 10             	add    esp,0x10
c00170d0:	48                   	dec    eax
c00170d1:	74 25                	je     c00170f8 <sysCallOpen(regs*)+0x69>
c00170d3:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00170d6:	80 fa 2e             	cmp    dl,0x2e
c00170d9:	74 19                	je     c00170f4 <sysCallOpen(regs*)+0x65>
c00170db:	80 fa 3a             	cmp    dl,0x3a
c00170de:	74 14                	je     c00170f4 <sysCallOpen(regs*)+0x65>
c00170e0:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00170e4:	48                   	dec    eax
c00170e5:	74 11                	je     c00170f8 <sysCallOpen(regs*)+0x69>
c00170e7:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00170ea:	80 fa 3a             	cmp    dl,0x3a
c00170ed:	74 05                	je     c00170f4 <sysCallOpen(regs*)+0x65>
c00170ef:	80 fa 2e             	cmp    dl,0x2e
c00170f2:	75 ec                	jne    c00170e0 <sysCallOpen(regs*)+0x51>
c00170f4:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00170f8:	51                   	push   ecx
c00170f9:	51                   	push   ecx
c00170fa:	68 02 2c 02 c0       	push   0xc0022c02
c00170ff:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017102:	50                   	push   eax
c0017103:	e8 3d ff ff ff       	call   c0017045 <string_ends_with(char const*, char const*)>
c0017108:	83 c4 10             	add    esp,0x10
c001710b:	85 c0                	test   eax,eax
c001710d:	75 17                	jne    c0017126 <sysCallOpen(regs*)+0x97>
c001710f:	50                   	push   eax
c0017110:	50                   	push   eax
c0017111:	68 23 2c 02 c0       	push   0xc0022c23
c0017116:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017119:	50                   	push   eax
c001711a:	e8 26 ff ff ff       	call   c0017045 <string_ends_with(char const*, char const*)>
c001711f:	83 c4 10             	add    esp,0x10
c0017122:	85 c0                	test   eax,eax
c0017124:	74 4d                	je     c0017173 <sysCallOpen(regs*)+0xe4>
c0017126:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017129:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001712f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017136:	50                   	push   eax
c0017137:	50                   	push   eax
c0017138:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001713b:	8b 10                	mov    edx,DWORD PTR [eax]
c001713d:	52                   	push   edx
c001713e:	68 07 2c 02 c0       	push   0xc0022c07
c0017143:	e8 d5 80 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0017148:	c7 04 24 16 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c16
c001714f:	e8 c9 80 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0017154:	83 c4 10             	add    esp,0x10
c0017157:	81 c4 04 01 00 00    	add    esp,0x104
c001715d:	31 c0                	xor    eax,eax
c001715f:	31 d2                	xor    edx,edx
c0017161:	5b                   	pop    ebx
c0017162:	5e                   	pop    esi
c0017163:	c3                   	ret    
c0017164:	81 c4 04 01 00 00    	add    esp,0x104
c001716a:	83 c8 ff             	or     eax,0xffffffff
c001716d:	83 ca ff             	or     edx,0xffffffff
c0017170:	5b                   	pop    ebx
c0017171:	5e                   	pop    esi
c0017172:	c3                   	ret    
c0017173:	50                   	push   eax
c0017174:	50                   	push   eax
c0017175:	68 03 2c 02 c0       	push   0xc0022c03
c001717a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001717d:	50                   	push   eax
c001717e:	e8 3a 96 fe ff       	call   c00007bd <strcmp>
c0017183:	83 c4 10             	add    esp,0x10
c0017186:	85 c0                	test   eax,eax
c0017188:	74 9c                	je     c0017126 <sysCallOpen(regs*)+0x97>
c001718a:	50                   	push   eax
c001718b:	50                   	push   eax
c001718c:	68 02 2c 02 c0       	push   0xc0022c02
c0017191:	56                   	push   esi
c0017192:	e8 ae fe ff ff       	call   c0017045 <string_ends_with(char const*, char const*)>
c0017197:	83 c4 10             	add    esp,0x10
c001719a:	85 c0                	test   eax,eax
c001719c:	75 88                	jne    c0017126 <sysCallOpen(regs*)+0x97>
c001719e:	52                   	push   edx
c001719f:	52                   	push   edx
c00171a0:	68 28 2c 02 c0       	push   0xc0022c28
c00171a5:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00171a8:	51                   	push   ecx
c00171a9:	e8 97 fe ff ff       	call   c0017045 <string_ends_with(char const*, char const*)>
c00171ae:	83 c4 10             	add    esp,0x10
c00171b1:	85 c0                	test   eax,eax
c00171b3:	0f 85 d5 00 00 00    	jne    c001728e <sysCallOpen(regs*)+0x1ff>
c00171b9:	50                   	push   eax
c00171ba:	50                   	push   eax
c00171bb:	68 2d 2c 02 c0       	push   0xc0022c2d
c00171c0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171c3:	50                   	push   eax
c00171c4:	e8 7c fe ff ff       	call   c0017045 <string_ends_with(char const*, char const*)>
c00171c9:	83 c4 10             	add    esp,0x10
c00171cc:	85 c0                	test   eax,eax
c00171ce:	0f 85 ba 00 00 00    	jne    c001728e <sysCallOpen(regs*)+0x1ff>
c00171d4:	50                   	push   eax
c00171d5:	50                   	push   eax
c00171d6:	68 29 2c 02 c0       	push   0xc0022c29
c00171db:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171de:	50                   	push   eax
c00171df:	e8 d9 95 fe ff       	call   c00007bd <strcmp>
c00171e4:	83 c4 10             	add    esp,0x10
c00171e7:	85 c0                	test   eax,eax
c00171e9:	0f 84 9f 00 00 00    	je     c001728e <sysCallOpen(regs*)+0x1ff>
c00171ef:	50                   	push   eax
c00171f0:	50                   	push   eax
c00171f1:	68 28 2c 02 c0       	push   0xc0022c28
c00171f6:	56                   	push   esi
c00171f7:	e8 49 fe ff ff       	call   c0017045 <string_ends_with(char const*, char const*)>
c00171fc:	83 c4 10             	add    esp,0x10
c00171ff:	85 c0                	test   eax,eax
c0017201:	0f 85 87 00 00 00    	jne    c001728e <sysCallOpen(regs*)+0x1ff>
c0017207:	83 ec 0c             	sub    esp,0xc
c001720a:	68 14 01 00 00       	push   0x114
c001720f:	e8 d4 7e ff ff       	call   c000f0e8 <operator new(unsigned long)>
c0017214:	89 c6                	mov    esi,eax
c0017216:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001721b:	83 c4 0c             	add    esp,0xc
c001721e:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0017221:	51                   	push   ecx
c0017222:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017225:	50                   	push   eax
c0017226:	56                   	push   esi
c0017227:	e8 28 85 ff ff       	call   c000f754 <File::File(char const*, Process*)>
c001722c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001722f:	83 c4 10             	add    esp,0x10
c0017232:	89 d0                	mov    eax,edx
c0017234:	25 ff 00 00 00       	and    eax,0xff
c0017239:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001723c:	89 d0                	mov    eax,edx
c001723e:	83 e0 01             	and    eax,0x1
c0017241:	f6 c2 02             	test   dl,0x2
c0017244:	74 03                	je     c0017249 <sysCallOpen(regs*)+0x1ba>
c0017246:	83 c8 02             	or     eax,0x2
c0017249:	f6 c2 04             	test   dl,0x4
c001724c:	74 03                	je     c0017251 <sysCallOpen(regs*)+0x1c2>
c001724e:	83 c8 04             	or     eax,0x4
c0017251:	f6 c2 08             	test   dl,0x8
c0017254:	74 03                	je     c0017259 <sysCallOpen(regs*)+0x1ca>
c0017256:	83 c8 0a             	or     eax,0xa
c0017259:	83 e2 10             	and    edx,0x10
c001725c:	74 03                	je     c0017261 <sysCallOpen(regs*)+0x1d2>
c001725e:	83 c8 12             	or     eax,0x12
c0017261:	52                   	push   edx
c0017262:	52                   	push   edx
c0017263:	50                   	push   eax
c0017264:	56                   	push   esi
c0017265:	e8 4e 85 ff ff       	call   c000f7b8 <File::open(FileOpenMode)>
c001726a:	83 c4 10             	add    esp,0x10
c001726d:	85 c0                	test   eax,eax
c001726f:	0f 85 ef fe ff ff    	jne    c0017164 <sysCallOpen(regs*)+0xd5>
c0017275:	83 ec 0c             	sub    esp,0xc
c0017278:	56                   	push   esi
c0017279:	e8 46 6b ff ff       	call   c000ddc4 <UnixFile::getFileDescriptor()>
c001727e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0017281:	89 02                	mov    DWORD PTR [edx],eax
c0017283:	c1 f8 1f             	sar    eax,0x1f
c0017286:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017289:	e9 c6 fe ff ff       	jmp    c0017154 <sysCallOpen(regs*)+0xc5>
c001728e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017291:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0017297:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001729e:	e9 b4 fe ff ff       	jmp    c0017157 <sysCallOpen(regs*)+0xc8>

c00172a3 <setupSystemCalls()>:
c00172a3:	c7 05 00 52 02 c0 9e 64 01 c0 	mov    DWORD PTR ds:0xc0025200,0xc001649e
c00172ad:	c7 05 04 52 02 c0 b1 62 01 c0 	mov    DWORD PTR ds:0xc0025204,0xc00162b1
c00172b7:	c7 05 08 52 02 c0 c6 63 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc00163c6
c00172c1:	c7 05 0c 52 02 c0 1b 64 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001641b
c00172cb:	c7 05 10 52 02 c0 5e 63 01 c0 	mov    DWORD PTR ds:0xc0025210,0xc001635e
c00172d5:	c7 05 14 52 02 c0 b8 64 01 c0 	mov    DWORD PTR ds:0xc0025214,0xc00164b8
c00172df:	c7 05 18 52 02 c0 77 66 01 c0 	mov    DWORD PTR ds:0xc0025218,0xc0016677
c00172e9:	c7 05 1c 52 02 c0 9d 66 01 c0 	mov    DWORD PTR ds:0xc002521c,0xc001669d
c00172f3:	c7 05 24 52 02 c0 07 6a 01 c0 	mov    DWORD PTR ds:0xc0025224,0xc0016a07
c00172fd:	c7 05 20 52 02 c0 8f 70 01 c0 	mov    DWORD PTR ds:0xc0025220,0xc001708f
c0017307:	c7 05 28 52 02 c0 8a 6a 01 c0 	mov    DWORD PTR ds:0xc0025228,0xc0016a8a
c0017311:	c7 05 2c 52 02 c0 0c 67 01 c0 	mov    DWORD PTR ds:0xc002522c,0xc001670c
c001731b:	c7 05 30 52 02 c0 c8 64 01 c0 	mov    DWORD PTR ds:0xc0025230,0xc00164c8
c0017325:	c7 05 34 52 02 c0 cd 64 01 c0 	mov    DWORD PTR ds:0xc0025234,0xc00164cd
c001732f:	c7 05 38 52 02 c0 f5 6a 01 c0 	mov    DWORD PTR ds:0xc0025238,0xc0016af5
c0017339:	c7 05 3c 52 02 c0 50 6b 01 c0 	mov    DWORD PTR ds:0xc002523c,0xc0016b50
c0017343:	c7 05 40 52 02 c0 f7 67 01 c0 	mov    DWORD PTR ds:0xc0025240,0xc00167f7
c001734d:	c7 05 44 52 02 c0 5d 68 01 c0 	mov    DWORD PTR ds:0xc0025244,0xc001685d
c0017357:	c7 05 48 52 02 c0 86 69 01 c0 	mov    DWORD PTR ds:0xc0025248,0xc0016986
c0017361:	c7 05 4c 52 02 c0 d2 64 01 c0 	mov    DWORD PTR ds:0xc002524c,0xc00164d2
c001736b:	c7 05 50 52 02 c0 b1 6b 01 c0 	mov    DWORD PTR ds:0xc0025250,0xc0016bb1
c0017375:	c7 05 54 52 02 c0 dc 64 01 c0 	mov    DWORD PTR ds:0xc0025254,0xc00164dc
c001737f:	c7 05 58 52 02 c0 e3 64 01 c0 	mov    DWORD PTR ds:0xc0025258,0xc00164e3
c0017389:	c7 05 5c 52 02 c0 d2 6b 01 c0 	mov    DWORD PTR ds:0xc002525c,0xc0016bd2
c0017393:	c7 05 60 52 02 c0 25 6c 01 c0 	mov    DWORD PTR ds:0xc0025260,0xc0016c25
c001739d:	c7 05 64 52 02 c0 ea 64 01 c0 	mov    DWORD PTR ds:0xc0025264,0xc00164ea
c00173a7:	c7 05 68 52 02 c0 78 6c 01 c0 	mov    DWORD PTR ds:0xc0025268,0xc0016c78
c00173b1:	c7 05 6c 52 02 c0 bf 66 01 c0 	mov    DWORD PTR ds:0xc002526c,0xc00166bf
c00173bb:	c7 05 70 52 02 c0 c4 6c 01 c0 	mov    DWORD PTR ds:0xc0025270,0xc0016cc4
c00173c5:	c7 05 74 52 02 c0 9f 67 01 c0 	mov    DWORD PTR ds:0xc0025274,0xc001679f
c00173cf:	c7 05 78 52 02 c0 9c 6d 01 c0 	mov    DWORD PTR ds:0xc0025278,0xc0016d9c
c00173d9:	c7 05 7c 52 02 c0 d8 68 01 c0 	mov    DWORD PTR ds:0xc002527c,0xc00168d8
c00173e3:	c7 05 80 52 02 c0 de 6d 01 c0 	mov    DWORD PTR ds:0xc0025280,0xc0016dde
c00173ed:	c7 05 84 52 02 c0 45 6d 01 c0 	mov    DWORD PTR ds:0xc0025284,0xc0016d45
c00173f7:	c7 05 88 52 02 c0 3d 6e 01 c0 	mov    DWORD PTR ds:0xc0025288,0xc0016e3d
c0017401:	c7 05 8c 52 02 c0 fe 64 01 c0 	mov    DWORD PTR ds:0xc002528c,0xc00164fe
c001740b:	c7 05 90 52 02 c0 61 65 01 c0 	mov    DWORD PTR ds:0xc0025290,0xc0016561
c0017415:	c7 05 94 52 02 c0 a9 65 01 c0 	mov    DWORD PTR ds:0xc0025294,0xc00165a9
c001741f:	c7 05 98 52 02 c0 62 6f 01 c0 	mov    DWORD PTR ds:0xc0025298,0xc0016f62
c0017429:	c7 05 9c 52 02 c0 c5 6f 01 c0 	mov    DWORD PTR ds:0xc002529c,0xc0016fc5
c0017433:	c7 05 a0 52 02 c0 fc 65 01 c0 	mov    DWORD PTR ds:0xc00252a0,0xc00165fc
c001743d:	c7 05 a4 52 02 c0 ec 6f 01 c0 	mov    DWORD PTR ds:0xc00252a4,0xc0016fec
c0017447:	c7 05 a8 52 02 c0 31 70 01 c0 	mov    DWORD PTR ds:0xc00252a8,0xc0017031
c0017451:	c7 05 ac 52 02 c0 c9 62 01 c0 	mov    DWORD PTR ds:0xc00252ac,0xc00162c9
c001745b:	c3                   	ret    

c001745c <systemCall(regs*, void*)>:
c001745c:	53                   	push   ebx
c001745d:	83 ec 08             	sub    esp,0x8
c0017460:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017464:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017467:	83 f8 7f             	cmp    eax,0x7f
c001746a:	77 16                	ja     c0017482 <systemCall(regs*, void*)+0x26>
c001746c:	8b 14 85 00 52 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdae00]
c0017473:	85 d2                	test   edx,edx
c0017475:	74 0b                	je     c0017482 <systemCall(regs*, void*)+0x26>
c0017477:	83 ec 0c             	sub    esp,0xc
c001747a:	53                   	push   ebx
c001747b:	ff d2                	call   edx
c001747d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017480:	eb 0d                	jmp    c001748f <systemCall(regs*, void*)+0x33>
c0017482:	52                   	push   edx
c0017483:	52                   	push   edx
c0017484:	50                   	push   eax
c0017485:	68 32 2c 02 c0       	push   0xc0022c32
c001748a:	e8 8e 7d ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001748f:	83 c4 10             	add    esp,0x10
c0017492:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0017497:	83 c4 08             	add    esp,0x8
c001749a:	31 d2                	xor    edx,edx
c001749c:	5b                   	pop    ebx
c001749d:	c3                   	ret    

c001749e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001749e:	55                   	push   ebp
c001749f:	89 e5                	mov    ebp,esp
c00174a1:	57                   	push   edi
c00174a2:	56                   	push   esi
c00174a3:	53                   	push   ebx
c00174a4:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00174aa:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00174ad:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00174b0:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c00174b7:	74 27                	je     c00174e0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c00174b9:	85 c0                	test   eax,eax
c00174bb:	74 23                	je     c00174e0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c00174bd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00174c1:	75 1d                	jne    c00174e0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c00174c3:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
c00174c6:	8d 96 00 10 00 00    	lea    edx,[esi+0x1000]
c00174cc:	89 d1                	mov    ecx,edx
c00174ce:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00174d4:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00174da:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00174dd:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
c00174e0:	83 ec 0c             	sub    esp,0xc
c00174e3:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00174e6:	05 ff 0f 00 00       	add    eax,0xfff
c00174eb:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c00174f1:	6a 01                	push   0x1
c00174f3:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c00174f9:	e8 04 6d ff ff       	call   c000e202 <Virt::allocateKernelVirtualPages(int)>
c00174fe:	83 c4 10             	add    esp,0x10
c0017501:	89 c6                	mov    esi,eax
c0017503:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c0017509:	0f 86 21 01 00 00    	jbe    c0017630 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c001750f:	c1 eb 0c             	shr    ebx,0xc
c0017512:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001751c:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c0017522:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0017525:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0017528:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001752e:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c0017531:	29 d8                	sub    eax,ebx
c0017533:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c0017539:	0f 83 f4 00 00 00    	jae    c0017633 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x195>
c001753f:	83 ec 0c             	sub    esp,0xc
c0017542:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0017545:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001754b:	3d 00 10 00 00       	cmp    eax,0x1000
c0017550:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0017552:	52                   	push   edx
c0017553:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c0017559:	52                   	push   edx
c001755a:	76 05                	jbe    c0017561 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c001755c:	b8 00 10 00 00       	mov    eax,0x1000
c0017561:	31 d2                	xor    edx,edx
c0017563:	52                   	push   edx
c0017564:	50                   	push   eax
c0017565:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0017568:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001756b:	83 c4 20             	add    esp,0x20
c001756e:	85 c0                	test   eax,eax
c0017570:	74 1f                	je     c0017591 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf3>
c0017572:	51                   	push   ecx
c0017573:	51                   	push   ecx
c0017574:	50                   	push   eax
c0017575:	68 46 2c 02 c0       	push   0xc0022c46
c001757a:	e8 9e 7c ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001757f:	89 34 24             	mov    DWORD PTR [esp],esi
c0017582:	e8 c8 6f ff ff       	call   c000e54f <Virt::freeKernelVirtualPages(unsigned long)>
c0017587:	83 c4 10             	add    esp,0x10
c001758a:	31 c0                	xor    eax,eax
c001758c:	e9 7c 01 00 00       	jmp    c001770d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26f>
c0017591:	e8 bf 14 00 00       	call   c0018a55 <lockScheduler()>
c0017596:	e8 26 50 ff ff       	call   c000c5c1 <Phys::allocatePage()>
c001759b:	6a 07                	push   0x7
c001759d:	56                   	push   esi
c001759e:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c00175a4:	50                   	push   eax
c00175a5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00175ab:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00175ae:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00175b4:	e8 15 73 ff ff       	call   c000e8ce <VAS::mapPage(unsigned long, unsigned long, int)>
c00175b9:	83 c4 0c             	add    esp,0xc
c00175bc:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00175c2:	6a 00                	push   0x0
c00175c4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00175ca:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00175cd:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00175d3:	e8 54 71 ff ff       	call   c000e72c <VAS::mapOtherVASIn(bool, VAS*)>
c00175d8:	58                   	pop    eax
c00175d9:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c00175df:	5a                   	pop    edx
c00175e0:	68 07 04 00 00       	push   0x407
c00175e5:	53                   	push   ebx
c00175e6:	81 c3 00 10 00 00    	add    ebx,0x1000
c00175ec:	50                   	push   eax
c00175ed:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00175f3:	6a 00                	push   0x0
c00175f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175fa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00175fd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0017603:	e8 82 76 ff ff       	call   c000ec8a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0017608:	83 c4 1c             	add    esp,0x1c
c001760b:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c0017611:	68 00 10 00 00       	push   0x1000
c0017616:	50                   	push   eax
c0017617:	56                   	push   esi
c0017618:	e8 7a 90 fe ff       	call   c0000697 <memcpy>
c001761d:	e8 35 14 00 00       	call   c0018a57 <unlockScheduler()>
c0017622:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c0017628:	83 c4 10             	add    esp,0x10
c001762b:	e9 f5 fe ff ff       	jmp    c0017525 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x87>
c0017630:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0017633:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001763d:	0f 86 bc 00 00 00    	jbe    c00176ff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x261>
c0017643:	e8 0d 14 00 00       	call   c0018a55 <lockScheduler()>
c0017648:	51                   	push   ecx
c0017649:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001764f:	6a 00                	push   0x0
c0017651:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017656:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017659:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001765f:	e8 c8 70 ff ff       	call   c000e72c <VAS::mapOtherVASIn(bool, VAS*)>
c0017664:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001766a:	c1 e8 0c             	shr    eax,0xc
c001766d:	83 c4 10             	add    esp,0x10
c0017670:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c0017676:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c0017680:	e8 3c 4f ff ff       	call   c000c5c1 <Phys::allocatePage()>
c0017685:	6a 07                	push   0x7
c0017687:	56                   	push   esi
c0017688:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001768e:	50                   	push   eax
c001768f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017695:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0017698:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001769e:	e8 2b 72 ff ff       	call   c000e8ce <VAS::mapPage(unsigned long, unsigned long, int)>
c00176a3:	58                   	pop    eax
c00176a4:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c00176aa:	5a                   	pop    edx
c00176ab:	68 07 04 00 00       	push   0x407
c00176b0:	53                   	push   ebx
c00176b1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00176b7:	50                   	push   eax
c00176b8:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00176be:	6a 00                	push   0x0
c00176c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00176c5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00176c8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00176ce:	e8 b7 75 ff ff       	call   c000ec8a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00176d3:	83 c4 1c             	add    esp,0x1c
c00176d6:	68 00 10 00 00       	push   0x1000
c00176db:	6a 00                	push   0x0
c00176dd:	56                   	push   esi
c00176de:	e8 ea 8f fe ff       	call   c00006cd <memset>
c00176e3:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c00176e9:	83 c4 10             	add    esp,0x10
c00176ec:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c00176f2:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c00176f8:	77 86                	ja     c0017680 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e2>
c00176fa:	e8 58 13 00 00       	call   c0018a57 <unlockScheduler()>
c00176ff:	83 ec 0c             	sub    esp,0xc
c0017702:	56                   	push   esi
c0017703:	e8 47 6e ff ff       	call   c000e54f <Virt::freeKernelVirtualPages(unsigned long)>
c0017708:	83 c4 10             	add    esp,0x10
c001770b:	b0 01                	mov    al,0x1
c001770d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0017710:	5b                   	pop    ebx
c0017711:	5e                   	pop    esi
c0017712:	5f                   	pop    edi
c0017713:	5d                   	pop    ebp
c0017714:	c3                   	ret    

c0017715 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0017715:	55                   	push   ebp
c0017716:	57                   	push   edi
c0017717:	56                   	push   esi
c0017718:	53                   	push   ebx
c0017719:	83 ec 48             	sub    esp,0x48
c001771c:	68 14 01 00 00       	push   0x114
c0017721:	e8 c2 79 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c0017726:	83 c4 0c             	add    esp,0xc
c0017729:	89 c6                	mov    esi,eax
c001772b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001772f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017733:	50                   	push   eax
c0017734:	e8 1b 80 ff ff       	call   c000f754 <File::File(char const*, Process*)>
c0017739:	58                   	pop    eax
c001773a:	5a                   	pop    edx
c001773b:	6a 01                	push   0x1
c001773d:	56                   	push   esi
c001773e:	e8 75 80 ff ff       	call   c000f7b8 <File::open(FileOpenMode)>
c0017743:	83 c4 10             	add    esp,0x10
c0017746:	85 c0                	test   eax,eax
c0017748:	0f 85 47 01 00 00    	jne    c0017895 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001774e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017756:	83 ec 0c             	sub    esp,0xc
c0017759:	6a 34                	push   0x34
c001775b:	e8 8b 48 ff ff       	call   c000bfeb <malloc>
c0017760:	89 c3                	mov    ebx,eax
c0017762:	58                   	pop    eax
c0017763:	8b 06                	mov    eax,DWORD PTR [esi]
c0017765:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0017769:	57                   	push   edi
c001776a:	53                   	push   ebx
c001776b:	6a 00                	push   0x0
c001776d:	6a 34                	push   0x34
c001776f:	56                   	push   esi
c0017770:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017773:	83 c4 20             	add    esp,0x20
c0017776:	85 c0                	test   eax,eax
c0017778:	0f 85 17 01 00 00    	jne    c0017895 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001777e:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0017784:	0f 85 0b 01 00 00    	jne    c0017895 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001778a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001778d:	85 c0                	test   eax,eax
c001778f:	0f 84 00 01 00 00    	je     c0017895 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017795:	31 d2                	xor    edx,edx
c0017797:	55                   	push   ebp
c0017798:	52                   	push   edx
c0017799:	50                   	push   eax
c001779a:	56                   	push   esi
c001779b:	e8 d6 80 ff ff       	call   c000f876 <File::seek(unsigned long long)>
c00177a0:	83 c4 10             	add    esp,0x10
c00177a3:	85 c0                	test   eax,eax
c00177a5:	0f 85 ea 00 00 00    	jne    c0017895 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00177ab:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00177ae:	83 ec 0c             	sub    esp,0xc
c00177b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00177b5:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00177b9:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00177bd:	0f af c2             	imul   eax,edx
c00177c0:	50                   	push   eax
c00177c1:	e8 25 48 ff ff       	call   c000bfeb <malloc>
c00177c6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00177ca:	89 3c 24             	mov    DWORD PTR [esp],edi
c00177cd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00177d1:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00177d5:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00177d9:	0f af c2             	imul   eax,edx
c00177dc:	99                   	cdq    
c00177dd:	52                   	push   edx
c00177de:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00177e0:	50                   	push   eax
c00177e1:	56                   	push   esi
c00177e2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00177e5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00177e8:	83 c4 20             	add    esp,0x20
c00177eb:	85 c0                	test   eax,eax
c00177ed:	0f 84 a2 00 00 00    	je     c0017895 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00177f3:	31 d2                	xor    edx,edx
c00177f5:	51                   	push   ecx
c00177f6:	52                   	push   edx
c00177f7:	50                   	push   eax
c00177f8:	56                   	push   esi
c00177f9:	e8 78 80 ff ff       	call   c000f876 <File::seek(unsigned long long)>
c00177fe:	83 c4 10             	add    esp,0x10
c0017801:	85 c0                	test   eax,eax
c0017803:	0f 85 8c 00 00 00    	jne    c0017895 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017809:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001780d:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017811:	0f af c2             	imul   eax,edx
c0017814:	83 ec 0c             	sub    esp,0xc
c0017817:	31 ed                	xor    ebp,ebp
c0017819:	50                   	push   eax
c001781a:	e8 cc 47 ff ff       	call   c000bfeb <malloc>
c001781f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017823:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017826:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001782a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001782e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017832:	0f af c2             	imul   eax,edx
c0017835:	99                   	cdq    
c0017836:	52                   	push   edx
c0017837:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017839:	50                   	push   eax
c001783a:	56                   	push   esi
c001783b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001783e:	83 c4 20             	add    esp,0x20
c0017841:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017849:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001784d:	0f 86 80 00 00 00    	jbe    c00178d3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0017853:	0f b7 fd             	movzx  edi,bp
c0017856:	c1 e7 05             	shl    edi,0x5
c0017859:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001785d:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0017860:	75 6b                	jne    c00178cd <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017862:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0017865:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017869:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001786c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017870:	52                   	push   edx
c0017871:	31 d2                	xor    edx,edx
c0017873:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0017876:	52                   	push   edx
c0017877:	50                   	push   eax
c0017878:	56                   	push   esi
c0017879:	e8 f8 7f ff ff       	call   c000f876 <File::seek(unsigned long long)>
c001787e:	83 c4 10             	add    esp,0x10
c0017881:	85 c0                	test   eax,eax
c0017883:	74 17                	je     c001789c <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0017885:	83 ec 0c             	sub    esp,0xc
c0017888:	68 71 2c 02 c0       	push   0xc0022c71
c001788d:	e8 8b 79 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0017892:	83 c4 10             	add    esp,0x10
c0017895:	31 c0                	xor    eax,eax
c0017897:	e9 87 00 00 00       	jmp    c0017923 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001789c:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001789f:	83 ec 0c             	sub    esp,0xc
c00178a2:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00178a5:	50                   	push   eax
c00178a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00178aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178ae:	56                   	push   esi
c00178af:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00178b3:	e8 e6 fb ff ff       	call   c001749e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00178b8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178bc:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00178c0:	83 c4 20             	add    esp,0x20
c00178c3:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00178c7:	73 04                	jae    c00178cd <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00178c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00178cd:	45                   	inc    ebp
c00178ce:	e9 76 ff ff ff       	jmp    c0017849 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00178d3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00178d7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00178db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00178df:	83 ec 0c             	sub    esp,0xc
c00178e2:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c00178e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00178ed:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c00178f3:	05 00 10 00 00       	add    eax,0x1000
c00178f8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00178fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00178ff:	e8 f7 46 ff ff       	call   c000bffb <free>
c0017904:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017907:	e8 ef 46 ff ff       	call   c000bffb <free>
c001790c:	58                   	pop    eax
c001790d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017911:	e8 e5 46 ff ff       	call   c000bffb <free>
c0017916:	89 34 24             	mov    DWORD PTR [esp],esi
c0017919:	e8 f8 7e ff ff       	call   c000f816 <File::close()>
c001791e:	83 c4 10             	add    esp,0x10
c0017921:	b0 01                	mov    al,0x1
c0017923:	83 c4 3c             	add    esp,0x3c
c0017926:	5b                   	pop    ebx
c0017927:	5e                   	pop    esi
c0017928:	5f                   	pop    edi
c0017929:	5d                   	pop    ebp
c001792a:	c3                   	ret    

c001792b <Thr::runtimeReferenceHelper()>:
c001792b:	83 ec 18             	sub    esp,0x18
c001792e:	68 79 2c 02 c0       	push   0xc0022c79
c0017933:	e8 e5 78 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0017938:	fa                   	cli    
c0017939:	83 c4 10             	add    esp,0x10
c001793c:	eb fe                	jmp    c001793c <Thr::runtimeReferenceHelper()+0x11>

c001793e <Thr::getAddressOfKernelSymbol(char const*)>:
c001793e:	57                   	push   edi
c001793f:	56                   	push   esi
c0017940:	53                   	push   ebx
c0017941:	31 db                	xor    ebx,ebx
c0017943:	39 1d a0 5b 02 c0    	cmp    DWORD PTR ds:0xc0025ba0,ebx
c0017949:	7e 3c                	jle    c0017987 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001794b:	8b 34 9d 20 5b 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffda4e0]
c0017952:	31 ff                	xor    edi,edi
c0017954:	39 3c 9d 20 5a 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffda5e0],edi
c001795b:	7e 27                	jle    c0017984 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001795d:	50                   	push   eax
c001795e:	50                   	push   eax
c001795f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017963:	8b 06                	mov    eax,DWORD PTR [esi]
c0017965:	03 04 9d a0 5a 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffda560]
c001796c:	50                   	push   eax
c001796d:	e8 4b 8e fe ff       	call   c00007bd <strcmp>
c0017972:	83 c4 10             	add    esp,0x10
c0017975:	85 c0                	test   eax,eax
c0017977:	75 05                	jne    c001797e <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0017979:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001797c:	eb 0b                	jmp    c0017989 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001797e:	83 c6 10             	add    esi,0x10
c0017981:	47                   	inc    edi
c0017982:	eb d0                	jmp    c0017954 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0017984:	43                   	inc    ebx
c0017985:	eb bc                	jmp    c0017943 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0017987:	31 c0                	xor    eax,eax
c0017989:	5b                   	pop    ebx
c001798a:	5e                   	pop    esi
c001798b:	5f                   	pop    edi
c001798c:	c3                   	ret    

c001798d <Thr::loadKernelSymbolTable(char const*)>:
c001798d:	55                   	push   ebp
c001798e:	57                   	push   edi
c001798f:	56                   	push   esi
c0017990:	53                   	push   ebx
c0017991:	83 ec 68             	sub    esp,0x68
c0017994:	8b 35 f4 5b 02 c0    	mov    esi,DWORD PTR ds:0xc0025bf4
c001799a:	68 14 01 00 00       	push   0x114
c001799f:	e8 44 77 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c00179a4:	83 c4 0c             	add    esp,0xc
c00179a7:	89 c3                	mov    ebx,eax
c00179a9:	56                   	push   esi
c00179aa:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00179ae:	50                   	push   eax
c00179af:	e8 a0 7d ff ff       	call   c000f754 <File::File(char const*, Process*)>
c00179b4:	5e                   	pop    esi
c00179b5:	5f                   	pop    edi
c00179b6:	6a 01                	push   0x1
c00179b8:	53                   	push   ebx
c00179b9:	e8 fa 7d ff ff       	call   c000f7b8 <File::open(FileOpenMode)>
c00179be:	83 c4 10             	add    esp,0x10
c00179c1:	31 d2                	xor    edx,edx
c00179c3:	85 c0                	test   eax,eax
c00179c5:	0f 85 79 02 00 00    	jne    c0017c44 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c00179cb:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00179d3:	83 ec 0c             	sub    esp,0xc
c00179d6:	6a 34                	push   0x34
c00179d8:	e8 0e 46 ff ff       	call   c000bfeb <malloc>
c00179dd:	59                   	pop    ecx
c00179de:	89 c7                	mov    edi,eax
c00179e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00179e2:	8d 74 24 34          	lea    esi,[esp+0x34]
c00179e6:	56                   	push   esi
c00179e7:	57                   	push   edi
c00179e8:	6a 00                	push   0x0
c00179ea:	6a 34                	push   0x34
c00179ec:	53                   	push   ebx
c00179ed:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00179f0:	83 c4 20             	add    esp,0x20
c00179f3:	85 c0                	test   eax,eax
c00179f5:	74 17                	je     c0017a0e <Thr::loadKernelSymbolTable(char const*)+0x81>
c00179f7:	83 ec 0c             	sub    esp,0xc
c00179fa:	68 9b 2c 02 c0       	push   0xc0022c9b
c00179ff:	e8 48 e0 ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c0017a04:	83 c4 10             	add    esp,0x10
c0017a07:	31 d2                	xor    edx,edx
c0017a09:	e9 36 02 00 00       	jmp    c0017c44 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c0017a0e:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017a14:	75 e1                	jne    c00179f7 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017a16:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017a19:	85 c0                	test   eax,eax
c0017a1b:	74 da                	je     c00179f7 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017a1d:	52                   	push   edx
c0017a1e:	31 d2                	xor    edx,edx
c0017a20:	52                   	push   edx
c0017a21:	50                   	push   eax
c0017a22:	53                   	push   ebx
c0017a23:	e8 4e 7e ff ff       	call   c000f876 <File::seek(unsigned long long)>
c0017a28:	83 c4 10             	add    esp,0x10
c0017a2b:	85 c0                	test   eax,eax
c0017a2d:	75 c8                	jne    c00179f7 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017a2f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017a33:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017a37:	0f af c2             	imul   eax,edx
c0017a3a:	83 ec 0c             	sub    esp,0xc
c0017a3d:	31 ed                	xor    ebp,ebp
c0017a3f:	50                   	push   eax
c0017a40:	e8 a6 45 ff ff       	call   c000bfeb <malloc>
c0017a45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017a49:	89 34 24             	mov    DWORD PTR [esp],esi
c0017a4c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017a50:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017a54:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017a58:	0f af c2             	imul   eax,edx
c0017a5b:	99                   	cdq    
c0017a5c:	52                   	push   edx
c0017a5d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017a5f:	50                   	push   eax
c0017a60:	53                   	push   ebx
c0017a61:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017a64:	83 c4 20             	add    esp,0x20
c0017a67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017a6f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017a77:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017a7f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017a87:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0017a8b:	0f 86 aa 00 00 00    	jbe    c0017b3b <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c0017a91:	0f b7 f5             	movzx  esi,bp
c0017a94:	6b f6 28             	imul   esi,esi,0x28
c0017a97:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c0017a9b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017a9e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017aa2:	50                   	push   eax
c0017aa3:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0017aa7:	6b c0 28             	imul   eax,eax,0x28
c0017aaa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017aae:	8b 16                	mov    edx,DWORD PTR [esi]
c0017ab0:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0017ab4:	89 d0                	mov    eax,edx
c0017ab6:	31 d2                	xor    edx,edx
c0017ab8:	52                   	push   edx
c0017ab9:	50                   	push   eax
c0017aba:	53                   	push   ebx
c0017abb:	e8 b6 7d ff ff       	call   c000f876 <File::seek(unsigned long long)>
c0017ac0:	83 c4 0c             	add    esp,0xc
c0017ac3:	6a 20                	push   0x20
c0017ac5:	6a 00                	push   0x0
c0017ac7:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017acb:	52                   	push   edx
c0017acc:	e8 fc 8b fe ff       	call   c00006cd <memset>
c0017ad1:	58                   	pop    eax
c0017ad2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ad4:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0017ad8:	51                   	push   ecx
c0017ad9:	8d 54 24 40          	lea    edx,[esp+0x40]
c0017add:	52                   	push   edx
c0017ade:	6a 00                	push   0x0
c0017ae0:	6a 1f                	push   0x1f
c0017ae2:	53                   	push   ebx
c0017ae3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017ae6:	83 c4 18             	add    esp,0x18
c0017ae9:	68 b2 2c 02 c0       	push   0xc0022cb2
c0017aee:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017af2:	52                   	push   edx
c0017af3:	e8 c5 8c fe ff       	call   c00007bd <strcmp>
c0017af8:	83 c4 10             	add    esp,0x10
c0017afb:	85 c0                	test   eax,eax
c0017afd:	75 0f                	jne    c0017b0e <Thr::loadKernelSymbolTable(char const*)+0x181>
c0017aff:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017b02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017b06:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017b0e:	50                   	push   eax
c0017b0f:	50                   	push   eax
c0017b10:	68 ba 2c 02 c0       	push   0xc0022cba
c0017b15:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017b19:	50                   	push   eax
c0017b1a:	e8 9e 8c fe ff       	call   c00007bd <strcmp>
c0017b1f:	83 c4 10             	add    esp,0x10
c0017b22:	85 c0                	test   eax,eax
c0017b24:	75 0f                	jne    c0017b35 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c0017b26:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017b29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b31:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017b35:	45                   	inc    ebp
c0017b36:	e9 4c ff ff ff       	jmp    c0017a87 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c0017b3b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017b40:	75 10                	jne    c0017b52 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c0017b42:	83 ec 0c             	sub    esp,0xc
c0017b45:	68 c2 2c 02 c0       	push   0xc0022cc2
c0017b4a:	e8 fd de ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c0017b4f:	83 c4 10             	add    esp,0x10
c0017b52:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017b57:	75 10                	jne    c0017b69 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c0017b59:	83 ec 0c             	sub    esp,0xc
c0017b5c:	68 c2 2c 02 c0       	push   0xc0022cc2
c0017b61:	e8 e6 de ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c0017b66:	83 c4 10             	add    esp,0x10
c0017b69:	31 d2                	xor    edx,edx
c0017b6b:	50                   	push   eax
c0017b6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b70:	52                   	push   edx
c0017b71:	50                   	push   eax
c0017b72:	53                   	push   ebx
c0017b73:	e8 fe 7c ff ff       	call   c000f876 <File::seek(unsigned long long)>
c0017b78:	5a                   	pop    edx
c0017b79:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b7d:	e8 69 44 ff ff       	call   c000bfeb <malloc>
c0017b82:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017b8a:	89 c1                	mov    ecx,eax
c0017b8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b94:	5e                   	pop    esi
c0017b95:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017b97:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017b9b:	55                   	push   ebp
c0017b9c:	51                   	push   ecx
c0017b9d:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0017ba1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017ba5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017ba9:	53                   	push   ebx
c0017baa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017bad:	83 c4 14             	add    esp,0x14
c0017bb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017bb4:	e8 32 44 ff ff       	call   c000bfeb <malloc>
c0017bb9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017bbc:	89 c6                	mov    esi,eax
c0017bbe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017bc0:	56                   	push   esi
c0017bc1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017bc5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017bc9:	53                   	push   ebx
c0017bca:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017bcd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017bd1:	8b 15 a0 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025ba0
c0017bd7:	c1 e8 04             	shr    eax,0x4
c0017bda:	83 c4 1c             	add    esp,0x1c
c0017bdd:	89 04 95 20 5a 02 c0 	mov    DWORD PTR [edx*4-0x3ffda5e0],eax
c0017be4:	31 d2                	xor    edx,edx
c0017be6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017bea:	52                   	push   edx
c0017beb:	50                   	push   eax
c0017bec:	53                   	push   ebx
c0017bed:	e8 84 7c ff ff       	call   c000f876 <File::seek(unsigned long long)>
c0017bf2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017bf5:	31 d2                	xor    edx,edx
c0017bf7:	56                   	push   esi
c0017bf8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bfc:	52                   	push   edx
c0017bfd:	50                   	push   eax
c0017bfe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017c00:	53                   	push   ebx
c0017c01:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017c04:	83 c4 14             	add    esp,0x14
c0017c07:	53                   	push   ebx
c0017c08:	e8 09 7c ff ff       	call   c000f816 <File::close()>
c0017c0d:	5d                   	pop    ebp
c0017c0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c12:	e8 e4 43 ff ff       	call   c000bffb <free>
c0017c17:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017c1a:	e8 dc 43 ff ff       	call   c000bffb <free>
c0017c1f:	a1 a0 5b 02 c0       	mov    eax,ds:0xc0025ba0
c0017c24:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017c28:	8d 50 01             	lea    edx,[eax+0x1]
c0017c2b:	89 15 a0 5b 02 c0    	mov    DWORD PTR ds:0xc0025ba0,edx
c0017c31:	89 0c 85 20 5b 02 c0 	mov    DWORD PTR [eax*4-0x3ffda4e0],ecx
c0017c38:	89 34 85 a0 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda560],esi
c0017c3f:	83 c4 10             	add    esp,0x10
c0017c42:	b2 01                	mov    dl,0x1
c0017c44:	83 c4 5c             	add    esp,0x5c
c0017c47:	88 d0                	mov    al,dl
c0017c49:	5b                   	pop    ebx
c0017c4a:	5e                   	pop    esi
c0017c4b:	5f                   	pop    edi
c0017c4c:	5d                   	pop    ebp
c0017c4d:	c3                   	ret    

c0017c4e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017c4e:	55                   	push   ebp
c0017c4f:	57                   	push   edi
c0017c50:	56                   	push   esi
c0017c51:	53                   	push   ebx
c0017c52:	81 ec 68 03 00 00    	sub    esp,0x368
c0017c58:	8b 1d f4 5b 02 c0    	mov    ebx,DWORD PTR ds:0xc0025bf4
c0017c5e:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017c65:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0017c69:	68 14 01 00 00       	push   0x114
c0017c6e:	e8 75 74 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c0017c73:	83 c4 0c             	add    esp,0xc
c0017c76:	53                   	push   ebx
c0017c77:	89 c7                	mov    edi,eax
c0017c79:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017c80:	50                   	push   eax
c0017c81:	e8 ce 7a ff ff       	call   c000f754 <File::File(char const*, Process*)>
c0017c86:	5e                   	pop    esi
c0017c87:	5d                   	pop    ebp
c0017c88:	6a 01                	push   0x1
c0017c8a:	57                   	push   edi
c0017c8b:	e8 28 7b ff ff       	call   c000f7b8 <File::open(FileOpenMode)>
c0017c90:	83 c4 10             	add    esp,0x10
c0017c93:	85 c0                	test   eax,eax
c0017c95:	0f 85 10 07 00 00    	jne    c00183ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017c9b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017ca3:	83 ec 0c             	sub    esp,0xc
c0017ca6:	6a 34                	push   0x34
c0017ca8:	e8 3e 43 ff ff       	call   c000bfeb <malloc>
c0017cad:	5b                   	pop    ebx
c0017cae:	89 c5                	mov    ebp,eax
c0017cb0:	8b 07                	mov    eax,DWORD PTR [edi]
c0017cb2:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017cb6:	53                   	push   ebx
c0017cb7:	55                   	push   ebp
c0017cb8:	6a 00                	push   0x0
c0017cba:	6a 34                	push   0x34
c0017cbc:	57                   	push   edi
c0017cbd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017cc0:	83 c4 20             	add    esp,0x20
c0017cc3:	85 c0                	test   eax,eax
c0017cc5:	0f 85 e0 06 00 00    	jne    c00183ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017ccb:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0017cd2:	0f 85 d3 06 00 00    	jne    c00183ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017cd8:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0017cdb:	85 c0                	test   eax,eax
c0017cdd:	0f 84 c8 06 00 00    	je     c00183ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017ce3:	31 d2                	xor    edx,edx
c0017ce5:	51                   	push   ecx
c0017ce6:	52                   	push   edx
c0017ce7:	50                   	push   eax
c0017ce8:	57                   	push   edi
c0017ce9:	e8 88 7b ff ff       	call   c000f876 <File::seek(unsigned long long)>
c0017cee:	83 c4 10             	add    esp,0x10
c0017cf1:	85 c0                	test   eax,eax
c0017cf3:	0f 85 b2 06 00 00    	jne    c00183ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017cf9:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017cfc:	83 ec 0c             	sub    esp,0xc
c0017cff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017d03:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017d07:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017d0b:	0f af c2             	imul   eax,edx
c0017d0e:	50                   	push   eax
c0017d0f:	e8 d7 42 ff ff       	call   c000bfeb <malloc>
c0017d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017d18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017d1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d1f:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017d23:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017d27:	0f af c2             	imul   eax,edx
c0017d2a:	99                   	cdq    
c0017d2b:	52                   	push   edx
c0017d2c:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017d2e:	50                   	push   eax
c0017d2f:	57                   	push   edi
c0017d30:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017d33:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0017d36:	83 c4 20             	add    esp,0x20
c0017d39:	85 c0                	test   eax,eax
c0017d3b:	0f 84 6a 06 00 00    	je     c00183ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017d41:	52                   	push   edx
c0017d42:	31 d2                	xor    edx,edx
c0017d44:	52                   	push   edx
c0017d45:	50                   	push   eax
c0017d46:	57                   	push   edi
c0017d47:	e8 2a 7b ff ff       	call   c000f876 <File::seek(unsigned long long)>
c0017d4c:	83 c4 10             	add    esp,0x10
c0017d4f:	85 c0                	test   eax,eax
c0017d51:	0f 85 54 06 00 00    	jne    c00183ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017d57:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017d5b:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017d5f:	0f af c2             	imul   eax,edx
c0017d62:	83 ec 0c             	sub    esp,0xc
c0017d65:	31 f6                	xor    esi,esi
c0017d67:	50                   	push   eax
c0017d68:	e8 7e 42 ff ff       	call   c000bfeb <malloc>
c0017d6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017d71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017d74:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d78:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017d7c:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017d80:	0f af c2             	imul   eax,edx
c0017d83:	99                   	cdq    
c0017d84:	52                   	push   edx
c0017d85:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017d87:	50                   	push   eax
c0017d88:	57                   	push   edi
c0017d89:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017d8c:	83 c4 20             	add    esp,0x20
c0017d8f:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c0017d93:	0f 86 af 00 00 00    	jbe    c0017e48 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c0017d99:	0f b7 de             	movzx  ebx,si
c0017d9c:	c1 e3 05             	shl    ebx,0x5
c0017d9f:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0017da3:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017da6:	0f 85 96 00 00 00    	jne    c0017e42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c0017dac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017daf:	31 d2                	xor    edx,edx
c0017db1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017db5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017db8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017dbc:	50                   	push   eax
c0017dbd:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017dc0:	52                   	push   edx
c0017dc1:	50                   	push   eax
c0017dc2:	57                   	push   edi
c0017dc3:	e8 ae 7a ff ff       	call   c000f876 <File::seek(unsigned long long)>
c0017dc8:	83 c4 10             	add    esp,0x10
c0017dcb:	85 c0                	test   eax,eax
c0017dcd:	0f 85 d8 05 00 00    	jne    c00183ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017dd3:	52                   	push   edx
c0017dd4:	52                   	push   edx
c0017dd5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017dd9:	68 dc 2c 02 c0       	push   0xc0022cdc
c0017dde:	e8 3a 74 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0017de3:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c0017dea:	31 d2                	xor    edx,edx
c0017dec:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c0017df0:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017df4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017df8:	59                   	pop    ecx
c0017df9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017dfb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017e02:	50                   	push   eax
c0017e03:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017e07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017e0b:	52                   	push   edx
c0017e0c:	50                   	push   eax
c0017e0d:	57                   	push   edi
c0017e0e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017e11:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017e14:	83 c4 18             	add    esp,0x18
c0017e17:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017e1a:	50                   	push   eax
c0017e1b:	68 00 2d 02 c0       	push   0xc0022d00
c0017e20:	e8 f8 73 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0017e25:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017e28:	83 c4 0c             	add    esp,0xc
c0017e2b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017e2e:	50                   	push   eax
c0017e2f:	6a 00                	push   0x0
c0017e31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e35:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0017e39:	50                   	push   eax
c0017e3a:	e8 8e 88 fe ff       	call   c00006cd <memset>
c0017e3f:	83 c4 10             	add    esp,0x10
c0017e42:	46                   	inc    esi
c0017e43:	e9 47 ff ff ff       	jmp    c0017d8f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c0017e48:	50                   	push   eax
c0017e49:	31 db                	xor    ebx,ebx
c0017e4b:	68 00 01 00 00       	push   0x100
c0017e50:	6a 00                	push   0x0
c0017e52:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017e56:	50                   	push   eax
c0017e57:	e8 71 88 fe ff       	call   c00006cd <memset>
c0017e5c:	83 c4 0c             	add    esp,0xc
c0017e5f:	68 00 01 00 00       	push   0x100
c0017e64:	6a 00                	push   0x0
c0017e66:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017e6d:	50                   	push   eax
c0017e6e:	e8 5a 88 fe ff       	call   c00006cd <memset>
c0017e73:	83 c4 10             	add    esp,0x10
c0017e76:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017e7e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017e86:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017e8e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017e96:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017e9e:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c0017ea2:	0f 86 2f 01 00 00    	jbe    c0017fd7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c0017ea8:	0f b7 f3             	movzx  esi,bx
c0017eab:	6b f6 28             	imul   esi,esi,0x28
c0017eae:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0017eb2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017eb5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017eb9:	50                   	push   eax
c0017eba:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0017ebe:	6b d2 28             	imul   edx,edx,0x28
c0017ec1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017ec5:	8b 06                	mov    eax,DWORD PTR [esi]
c0017ec7:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017ecb:	31 d2                	xor    edx,edx
c0017ecd:	52                   	push   edx
c0017ece:	50                   	push   eax
c0017ecf:	57                   	push   edi
c0017ed0:	e8 a1 79 ff ff       	call   c000f876 <File::seek(unsigned long long)>
c0017ed5:	83 c4 0c             	add    esp,0xc
c0017ed8:	6a 20                	push   0x20
c0017eda:	6a 00                	push   0x0
c0017edc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017ee3:	51                   	push   ecx
c0017ee4:	e8 e4 87 fe ff       	call   c00006cd <memset>
c0017ee9:	58                   	pop    eax
c0017eea:	8b 07                	mov    eax,DWORD PTR [edi]
c0017eec:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017ef0:	52                   	push   edx
c0017ef1:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017ef8:	51                   	push   ecx
c0017ef9:	6a 00                	push   0x0
c0017efb:	6a 1f                	push   0x1f
c0017efd:	57                   	push   edi
c0017efe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017f01:	83 c4 1c             	add    esp,0x1c
c0017f04:	6a 09                	push   0x9
c0017f06:	68 1d 2d 02 c0       	push   0xc0022d1d
c0017f0b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017f12:	51                   	push   ecx
c0017f13:	e8 1c 87 fe ff       	call   c0000634 <memcmp>
c0017f18:	83 c4 10             	add    esp,0x10
c0017f1b:	85 c0                	test   eax,eax
c0017f1d:	75 21                	jne    c0017f40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c0017f1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f23:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017f27:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017f2b:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017f2f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017f32:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017f39:	89 c8                	mov    eax,ecx
c0017f3b:	40                   	inc    eax
c0017f3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f40:	50                   	push   eax
c0017f41:	6a 09                	push   0x9
c0017f43:	68 27 2d 02 c0       	push   0xc0022d27
c0017f48:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f4f:	50                   	push   eax
c0017f50:	e8 df 86 fe ff       	call   c0000634 <memcmp>
c0017f55:	83 c4 10             	add    esp,0x10
c0017f58:	85 c0                	test   eax,eax
c0017f5a:	75 21                	jne    c0017f7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c0017f5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017f64:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017f68:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017f6c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017f6f:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017f76:	89 c8                	mov    eax,ecx
c0017f78:	40                   	inc    eax
c0017f79:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f7d:	50                   	push   eax
c0017f7e:	50                   	push   eax
c0017f7f:	68 b2 2c 02 c0       	push   0xc0022cb2
c0017f84:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f8b:	50                   	push   eax
c0017f8c:	e8 2c 88 fe ff       	call   c00007bd <strcmp>
c0017f91:	83 c4 10             	add    esp,0x10
c0017f94:	85 c0                	test   eax,eax
c0017f96:	75 0f                	jne    c0017fa7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c0017f98:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017f9b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017f9f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fa3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017fa7:	50                   	push   eax
c0017fa8:	50                   	push   eax
c0017fa9:	68 ba 2c 02 c0       	push   0xc0022cba
c0017fae:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017fb5:	50                   	push   eax
c0017fb6:	e8 02 88 fe ff       	call   c00007bd <strcmp>
c0017fbb:	83 c4 10             	add    esp,0x10
c0017fbe:	85 c0                	test   eax,eax
c0017fc0:	75 0f                	jne    c0017fd1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c0017fc2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017fc5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017fc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fcd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017fd1:	43                   	inc    ebx
c0017fd2:	e9 c7 fe ff ff       	jmp    c0017e9e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c0017fd7:	31 d2                	xor    edx,edx
c0017fd9:	50                   	push   eax
c0017fda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017fde:	52                   	push   edx
c0017fdf:	50                   	push   eax
c0017fe0:	57                   	push   edi
c0017fe1:	e8 90 78 ff ff       	call   c000f876 <File::seek(unsigned long long)>
c0017fe6:	5a                   	pop    edx
c0017fe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017feb:	e8 fb 3f ff ff       	call   c000bfeb <malloc>
c0017ff0:	31 d2                	xor    edx,edx
c0017ff2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017ff6:	59                   	pop    ecx
c0017ff7:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017ff9:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017ffd:	53                   	push   ebx
c0017ffe:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018002:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018006:	52                   	push   edx
c0018007:	50                   	push   eax
c0018008:	57                   	push   edi
c0018009:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001800c:	83 c4 14             	add    esp,0x14
c001800f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018013:	e8 d3 3f ff ff       	call   c000bfeb <malloc>
c0018018:	31 d2                	xor    edx,edx
c001801a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001801e:	83 c4 0c             	add    esp,0xc
c0018021:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018025:	52                   	push   edx
c0018026:	50                   	push   eax
c0018027:	57                   	push   edi
c0018028:	e8 49 78 ff ff       	call   c000f876 <File::seek(unsigned long long)>
c001802d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018030:	31 d2                	xor    edx,edx
c0018032:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018036:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001803a:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001803c:	52                   	push   edx
c001803d:	50                   	push   eax
c001803e:	57                   	push   edi
c001803f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0018042:	83 c4 20             	add    esp,0x20
c0018045:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001804d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018051:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c0018055:	0f 84 54 03 00 00    	je     c00183af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c001805b:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c0018062:	31 d2                	xor    edx,edx
c0018064:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018068:	c1 e8 03             	shr    eax,0x3
c001806b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001806f:	50                   	push   eax
c0018070:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018074:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0018078:	52                   	push   edx
c0018079:	50                   	push   eax
c001807a:	57                   	push   edi
c001807b:	e8 f6 77 ff ff       	call   c000f876 <File::seek(unsigned long long)>
c0018080:	58                   	pop    eax
c0018081:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018085:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001808c:	e8 5a 3f ff ff       	call   c000bfeb <malloc>
c0018091:	31 d2                	xor    edx,edx
c0018093:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018097:	58                   	pop    eax
c0018098:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001809a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001809e:	50                   	push   eax
c001809f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00180a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00180a7:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00180ae:	52                   	push   edx
c00180af:	50                   	push   eax
c00180b0:	57                   	push   edi
c00180b1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00180b4:	83 c4 20             	add    esp,0x20
c00180b7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00180bf:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00180c3:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c00180c7:	0f 8d c6 02 00 00    	jge    c0018393 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c00180cd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180d5:	31 db                	xor    ebx,ebx
c00180d7:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c00180da:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00180de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180e2:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c00180e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00180ea:	c1 e8 08             	shr    eax,0x8
c00180ed:	89 c6                	mov    esi,eax
c00180ef:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00180f3:	c1 e6 04             	shl    esi,0x4
c00180f6:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c00180fa:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00180fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018101:	85 c0                	test   eax,eax
c0018103:	0f 85 17 01 00 00    	jne    c0018220 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0018109:	83 ec 0c             	sub    esp,0xc
c001810c:	b3 01                	mov    bl,0x1
c001810e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018112:	03 06                	add    eax,DWORD PTR [esi]
c0018114:	50                   	push   eax
c0018115:	e8 24 f8 ff ff       	call   c001793e <Thr::getAddressOfKernelSymbol(char const*)>
c001811a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001811e:	83 c4 10             	add    esp,0x10
c0018121:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018126:	0f 85 f4 00 00 00    	jne    c0018220 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001812c:	50                   	push   eax
c001812d:	50                   	push   eax
c001812e:	68 31 2d 02 c0       	push   0xc0022d31
c0018133:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018137:	03 06                	add    eax,DWORD PTR [esi]
c0018139:	50                   	push   eax
c001813a:	e8 7e 86 fe ff       	call   c00007bd <strcmp>
c001813f:	83 c4 10             	add    esp,0x10
c0018142:	85 c0                	test   eax,eax
c0018144:	75 0a                	jne    c0018150 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c0018146:	b8 0c f5 01 c0       	mov    eax,0xc001f50c
c001814b:	e9 ca 00 00 00       	jmp    c001821a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0018150:	50                   	push   eax
c0018151:	50                   	push   eax
c0018152:	68 3b 2d 02 c0       	push   0xc0022d3b
c0018157:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001815b:	03 06                	add    eax,DWORD PTR [esi]
c001815d:	50                   	push   eax
c001815e:	e8 5a 86 fe ff       	call   c00007bd <strcmp>
c0018163:	83 c4 10             	add    esp,0x10
c0018166:	85 c0                	test   eax,eax
c0018168:	75 0a                	jne    c0018174 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c001816a:	b8 40 f2 01 c0       	mov    eax,0xc001f240
c001816f:	e9 a6 00 00 00       	jmp    c001821a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0018174:	53                   	push   ebx
c0018175:	53                   	push   ebx
c0018176:	68 44 2d 02 c0       	push   0xc0022d44
c001817b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001817f:	03 06                	add    eax,DWORD PTR [esi]
c0018181:	50                   	push   eax
c0018182:	e8 36 86 fe ff       	call   c00007bd <strcmp>
c0018187:	83 c4 10             	add    esp,0x10
c001818a:	85 c0                	test   eax,eax
c001818c:	75 0a                	jne    c0018198 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c001818e:	b8 0c f6 01 c0       	mov    eax,0xc001f60c
c0018193:	e9 82 00 00 00       	jmp    c001821a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0018198:	51                   	push   ecx
c0018199:	51                   	push   ecx
c001819a:	68 4e 2d 02 c0       	push   0xc0022d4e
c001819f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00181a3:	03 06                	add    eax,DWORD PTR [esi]
c00181a5:	50                   	push   eax
c00181a6:	e8 12 86 fe ff       	call   c00007bd <strcmp>
c00181ab:	83 c4 10             	add    esp,0x10
c00181ae:	85 c0                	test   eax,eax
c00181b0:	74 63                	je     c0018215 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c00181b2:	50                   	push   eax
c00181b3:	50                   	push   eax
c00181b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00181b8:	03 06                	add    eax,DWORD PTR [esi]
c00181ba:	50                   	push   eax
c00181bb:	68 57 2d 02 c0       	push   0xc0022d57
c00181c0:	e8 58 70 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c00181c5:	58                   	pop    eax
c00181c6:	5a                   	pop    edx
c00181c7:	68 71 2d 02 c0       	push   0xc0022d71
c00181cc:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c00181d3:	53                   	push   ebx
c00181d4:	e8 93 85 fe ff       	call   c000076c <strcpy>
c00181d9:	59                   	pop    ecx
c00181da:	58                   	pop    eax
c00181db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00181df:	03 06                	add    eax,DWORD PTR [esi]
c00181e1:	50                   	push   eax
c00181e2:	53                   	push   ebx
c00181e3:	e8 3b 86 fe ff       	call   c0000823 <strcat>
c00181e8:	58                   	pop    eax
c00181e9:	5a                   	pop    edx
c00181ea:	68 07 2e 02 c0       	push   0xc0022e07
c00181ef:	53                   	push   ebx
c00181f0:	e8 2e 86 fe ff       	call   c0000823 <strcat>
c00181f5:	83 c4 10             	add    esp,0x10
c00181f8:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00181fd:	0f 84 4b 01 00 00    	je     c001834e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0018203:	83 ec 0c             	sub    esp,0xc
c0018206:	53                   	push   ebx
c0018207:	e8 40 d8 ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c001820c:	83 c4 10             	add    esp,0x10
c001820f:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c0018213:	eb 0b                	jmp    c0018220 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0018215:	b8 8c f3 01 c0       	mov    eax,0xc001f38c
c001821a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001821e:	b3 01                	mov    bl,0x1
c0018220:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0018225:	0f 85 80 00 00 00    	jne    c00182ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c001822b:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0018232:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018236:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001823a:	01 ce                	add    esi,ecx
c001823c:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0018244:	0f 94 c2             	sete   dl
c0018247:	8b 06                	mov    eax,DWORD PTR [esi]
c0018249:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0018251:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c0018256:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001825a:	84 db                	test   bl,bl
c001825c:	74 31                	je     c001828f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c001825e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018262:	01 c3                	add    ebx,eax
c0018264:	84 d2                	test   dl,dl
c0018266:	75 0a                	jne    c0018272 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c0018268:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001826c:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0018270:	76 32                	jbe    c00182a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018272:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0018277:	0f 84 d1 00 00 00    	je     c001834e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001827d:	83 ec 0c             	sub    esp,0xc
c0018280:	68 88 2d 02 c0       	push   0xc0022d88
c0018285:	e8 c2 d7 ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c001828a:	83 c4 10             	add    esp,0x10
c001828d:	eb 15                	jmp    c00182a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001828f:	8d 1c 01             	lea    ebx,[ecx+eax*1]
c0018292:	84 d2                	test   dl,dl
c0018294:	75 0e                	jne    c00182a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018296:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001829a:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001829e:	77 04                	ja     c00182a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c00182a0:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00182a4:	89 1e                	mov    DWORD PTR [esi],ebx
c00182a6:	e9 df 00 00 00       	jmp    c001838a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c00182ab:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00182b0:	75 6e                	jne    c0018320 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c00182b2:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00182b9:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c00182bd:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c00182c1:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00182c9:	74 17                	je     c00182e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c00182cb:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00182d3:	74 0d                	je     c00182e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c00182d5:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00182d9:	83 e8 04             	sub    eax,0x4
c00182dc:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00182e0:	76 17                	jbe    c00182f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c00182e2:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00182e7:	74 65                	je     c001834e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00182e9:	83 ec 0c             	sub    esp,0xc
c00182ec:	68 a4 2d 02 c0       	push   0xc0022da4
c00182f1:	e8 56 d7 ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c00182f6:	83 c4 10             	add    esp,0x10
c00182f9:	8b 16                	mov    edx,DWORD PTR [esi]
c00182fb:	84 db                	test   bl,bl
c00182fd:	74 13                	je     c0018312 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c00182ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018303:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001830a:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001830e:	01 d0                	add    eax,edx
c0018310:	eb 06                	jmp    c0018318 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c0018312:	89 d0                	mov    eax,edx
c0018314:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0018318:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001831c:	89 06                	mov    DWORD PTR [esi],eax
c001831e:	eb 6a                	jmp    c001838a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0018320:	50                   	push   eax
c0018321:	50                   	push   eax
c0018322:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0018327:	50                   	push   eax
c0018328:	68 c0 2d 02 c0       	push   0xc0022dc0
c001832d:	e8 eb 6e ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0018332:	83 c4 10             	add    esp,0x10
c0018335:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001833a:	74 12                	je     c001834e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001833c:	83 ec 0c             	sub    esp,0xc
c001833f:	68 cb 2d 02 c0       	push   0xc0022dcb
c0018344:	e8 03 d7 ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c0018349:	83 c4 10             	add    esp,0x10
c001834c:	eb 3c                	jmp    c001838a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001834e:	83 ec 0c             	sub    esp,0xc
c0018351:	57                   	push   edi
c0018352:	e8 bf 74 ff ff       	call   c000f816 <File::close()>
c0018357:	8b 07                	mov    eax,DWORD PTR [edi]
c0018359:	89 3c 24             	mov    DWORD PTR [esp],edi
c001835c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001835f:	59                   	pop    ecx
c0018360:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018364:	e8 92 3c ff ff       	call   c000bffb <free>
c0018369:	5b                   	pop    ebx
c001836a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001836e:	e8 88 3c ff ff       	call   c000bffb <free>
c0018373:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018376:	e8 80 3c ff ff       	call   c000bffb <free>
c001837b:	5e                   	pop    esi
c001837c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018380:	e8 76 3c ff ff       	call   c000bffb <free>
c0018385:	83 c4 10             	add    esp,0x10
c0018388:	eb 21                	jmp    c00183ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001838a:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001838e:	e9 2c fd ff ff       	jmp    c00180bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c0018393:	83 ec 0c             	sub    esp,0xc
c0018396:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001839a:	e8 5c 3c ff ff       	call   c000bffb <free>
c001839f:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c00183a3:	83 c4 10             	add    esp,0x10
c00183a6:	e9 a2 fc ff ff       	jmp    c001804d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c00183ab:	31 c0                	xor    eax,eax
c00183ad:	eb 32                	jmp    c00183e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c00183af:	83 ec 0c             	sub    esp,0xc
c00183b2:	57                   	push   edi
c00183b3:	e8 5e 74 ff ff       	call   c000f816 <File::close()>
c00183b8:	8b 07                	mov    eax,DWORD PTR [edi]
c00183ba:	89 3c 24             	mov    DWORD PTR [esp],edi
c00183bd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00183c0:	58                   	pop    eax
c00183c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00183c5:	e8 31 3c ff ff       	call   c000bffb <free>
c00183ca:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00183cd:	e8 29 3c ff ff       	call   c000bffb <free>
c00183d2:	5a                   	pop    edx
c00183d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00183d7:	e8 1f 3c ff ff       	call   c000bffb <free>
c00183dc:	83 c4 10             	add    esp,0x10
c00183df:	b0 01                	mov    al,0x1
c00183e1:	81 c4 5c 03 00 00    	add    esp,0x35c
c00183e7:	5b                   	pop    ebx
c00183e8:	5e                   	pop    esi
c00183e9:	5f                   	pop    edi
c00183ea:	5d                   	pop    ebp
c00183eb:	c3                   	ret    

c00183ec <Thr::getDriverBaseFromAddress(unsigned long)>:
c00183ec:	56                   	push   esi
c00183ed:	31 d2                	xor    edx,edx
c00183ef:	53                   	push   ebx
c00183f0:	8b 1d 00 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025400
c00183f6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00183fa:	39 d3                	cmp    ebx,edx
c00183fc:	7e 1b                	jle    c0018419 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00183fe:	8b 04 95 20 56 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffda9e0]
c0018405:	39 c8                	cmp    eax,ecx
c0018407:	77 0d                	ja     c0018416 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0018409:	8b 34 95 20 54 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdabe0]
c0018410:	01 c6                	add    esi,eax
c0018412:	39 ce                	cmp    esi,ecx
c0018414:	77 05                	ja     c001841b <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0018416:	42                   	inc    edx
c0018417:	eb e1                	jmp    c00183fa <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0018419:	31 c0                	xor    eax,eax
c001841b:	5b                   	pop    ebx
c001841c:	5e                   	pop    esi
c001841d:	c3                   	ret    

c001841e <Thr::getDriverNameFromAddress(unsigned long)>:
c001841e:	53                   	push   ebx
c001841f:	31 c0                	xor    eax,eax
c0018421:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018425:	8b 1d 00 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025400
c001842b:	39 c3                	cmp    ebx,eax
c001842d:	7e 22                	jle    c0018451 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001842f:	8b 14 85 20 56 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda9e0]
c0018436:	39 ca                	cmp    edx,ecx
c0018438:	77 14                	ja     c001844e <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001843a:	03 14 85 20 54 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdabe0]
c0018441:	39 ca                	cmp    edx,ecx
c0018443:	76 09                	jbe    c001844e <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0018445:	8b 04 85 20 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda7e0]
c001844c:	eb 05                	jmp    c0018453 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001844e:	40                   	inc    eax
c001844f:	eb da                	jmp    c001842b <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0018451:	31 c0                	xor    eax,eax
c0018453:	5b                   	pop    ebx
c0018454:	c3                   	ret    

c0018455 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0018455:	53                   	push   ebx
c0018456:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001845a:	53                   	push   ebx
c001845b:	e8 8c ff ff ff       	call   c00183ec <Thr::getDriverBaseFromAddress(unsigned long)>
c0018460:	5a                   	pop    edx
c0018461:	31 d2                	xor    edx,edx
c0018463:	85 c0                	test   eax,eax
c0018465:	74 04                	je     c001846b <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0018467:	89 da                	mov    edx,ebx
c0018469:	29 c2                	sub    edx,eax
c001846b:	89 d0                	mov    eax,edx
c001846d:	5b                   	pop    ebx
c001846e:	c3                   	ret    

c001846f <Thr::loadDLL(char const*, bool)>:
c001846f:	55                   	push   ebp
c0018470:	57                   	push   edi
c0018471:	56                   	push   esi
c0018472:	53                   	push   ebx
c0018473:	81 ec 34 01 00 00    	sub    esp,0x134
c0018479:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0018480:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0018487:	56                   	push   esi
c0018488:	68 e3 2d 02 c0       	push   0xc0022de3
c001848d:	e8 8b 6d ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0018492:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018499:	e8 4a 6c ff ff       	call   c000f0e8 <operator new(unsigned long)>
c001849e:	83 c4 0c             	add    esp,0xc
c00184a1:	89 c3                	mov    ebx,eax
c00184a3:	ff 35 f4 5b 02 c0    	push   DWORD PTR ds:0xc0025bf4
c00184a9:	56                   	push   esi
c00184aa:	50                   	push   eax
c00184ab:	e8 a4 72 ff ff       	call   c000f754 <File::File(char const*, Process*)>
c00184b0:	83 c4 0c             	add    esp,0xc
c00184b3:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00184b7:	50                   	push   eax
c00184b8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00184bc:	50                   	push   eax
c00184bd:	53                   	push   ebx
c00184be:	e8 a1 75 ff ff       	call   c000fa64 <File::stat(unsigned long long*, bool*)>
c00184c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00184c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00184c8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00184cb:	83 c4 10             	add    esp,0x10
c00184ce:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00184d3:	75 0a                	jne    c00184df <Thr::loadDLL(char const*, bool)+0x70>
c00184d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00184d9:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00184dd:	75 3c                	jne    c001851b <Thr::loadDLL(char const*, bool)+0xac>
c00184df:	89 e8                	mov    eax,ebp
c00184e1:	84 c0                	test   al,al
c00184e3:	0f 84 3d 01 00 00    	je     c0018626 <Thr::loadDLL(char const*, bool)+0x1b7>
c00184e9:	50                   	push   eax
c00184ea:	50                   	push   eax
c00184eb:	68 f4 2d 02 c0       	push   0xc0022df4
c00184f0:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00184f4:	53                   	push   ebx
c00184f5:	e8 72 82 fe ff       	call   c000076c <strcpy>
c00184fa:	58                   	pop    eax
c00184fb:	5a                   	pop    edx
c00184fc:	56                   	push   esi
c00184fd:	53                   	push   ebx
c00184fe:	e8 20 83 fe ff       	call   c0000823 <strcat>
c0018503:	59                   	pop    ecx
c0018504:	5f                   	pop    edi
c0018505:	68 07 2e 02 c0       	push   0xc0022e07
c001850a:	53                   	push   ebx
c001850b:	e8 13 83 fe ff       	call   c0000823 <strcat>
c0018510:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018513:	e8 34 d5 ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c0018518:	83 c4 10             	add    esp,0x10
c001851b:	e8 6f 5e ff ff       	call   c000e38f <Virt::getAKernelVAS()>
c0018520:	51                   	push   ecx
c0018521:	6a 03                	push   0x3
c0018523:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0018527:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001852b:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c0018531:	83 d3 00             	adc    ebx,0x0
c0018534:	89 ca                	mov    edx,ecx
c0018536:	89 d1                	mov    ecx,edx
c0018538:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001853c:	51                   	push   ecx
c001853d:	50                   	push   eax
c001853e:	e8 8d 64 ff ff       	call   c000e9d0 <VAS::allocatePages(int, int)>
c0018543:	89 34 24             	mov    DWORD PTR [esp],esi
c0018546:	89 c3                	mov    ebx,eax
c0018548:	e8 9d 81 fe ff       	call   c00006ea <strlen>
c001854d:	8b 3d 00 54 02 c0    	mov    edi,DWORD PTR ds:0xc0025400
c0018553:	40                   	inc    eax
c0018554:	89 04 24             	mov    DWORD PTR [esp],eax
c0018557:	e8 8f 3a ff ff       	call   c000bfeb <malloc>
c001855c:	89 04 bd 20 58 02 c0 	mov    DWORD PTR [edi*4-0x3ffda7e0],eax
c0018563:	5f                   	pop    edi
c0018564:	58                   	pop    eax
c0018565:	a1 00 54 02 c0       	mov    eax,ds:0xc0025400
c001856a:	56                   	push   esi
c001856b:	ff 34 85 20 58 02 c0 	push   DWORD PTR [eax*4-0x3ffda7e0]
c0018572:	e8 f5 81 fe ff       	call   c000076c <strcpy>
c0018577:	a1 00 54 02 c0       	mov    eax,ds:0xc0025400
c001857c:	8d 50 01             	lea    edx,[eax+0x1]
c001857f:	89 1c 85 20 56 02 c0 	mov    DWORD PTR [eax*4-0x3ffda9e0],ebx
c0018586:	89 15 00 54 02 c0    	mov    DWORD PTR ds:0xc0025400,edx
c001858c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018590:	83 c4 0c             	add    esp,0xc
c0018593:	89 14 85 20 54 02 c0 	mov    DWORD PTR [eax*4-0x3ffdabe0],edx
c001859a:	6a 01                	push   0x1
c001859c:	53                   	push   ebx
c001859d:	56                   	push   esi
c001859e:	e8 ab f6 ff ff       	call   c0017c4e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00185a3:	83 c4 10             	add    esp,0x10
c00185a6:	89 c7                	mov    edi,eax
c00185a8:	fe c8                	dec    al
c00185aa:	74 16                	je     c00185c2 <Thr::loadDLL(char const*, bool)+0x153>
c00185ac:	89 e8                	mov    eax,ebp
c00185ae:	84 c0                	test   al,al
c00185b0:	74 10                	je     c00185c2 <Thr::loadDLL(char const*, bool)+0x153>
c00185b2:	83 ec 0c             	sub    esp,0xc
c00185b5:	68 09 2e 02 c0       	push   0xc0022e09
c00185ba:	e8 8d d4 ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c00185bf:	83 c4 10             	add    esp,0x10
c00185c2:	31 f6                	xor    esi,esi
c00185c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00185c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00185cc:	05 ff 0f 00 00       	add    eax,0xfff
c00185d1:	83 d2 00             	adc    edx,0x0
c00185d4:	0f ac d0 0c          	shrd   eax,edx,0xc
c00185d8:	c1 ea 0c             	shr    edx,0xc
c00185db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00185df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00185e3:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00185e7:	ba 00 00 00 00       	mov    edx,0x0
c00185ec:	89 d0                	mov    eax,edx
c00185ee:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00185f2:	73 2c                	jae    c0018620 <Thr::loadDLL(char const*, bool)+0x1b1>
c00185f4:	e8 96 5d ff ff       	call   c000e38f <Virt::getAKernelVAS()>
c00185f9:	89 f5                	mov    ebp,esi
c00185fb:	c1 e5 0c             	shl    ebp,0xc
c00185fe:	52                   	push   edx
c00185ff:	52                   	push   edx
c0018600:	01 dd                	add    ebp,ebx
c0018602:	55                   	push   ebp
c0018603:	50                   	push   eax
c0018604:	e8 27 5f ff ff       	call   c000e530 <VAS::getPageTableEntry(unsigned long)>
c0018609:	83 c4 10             	add    esp,0x10
c001860c:	f6 00 60             	test   BYTE PTR [eax],0x60
c001860f:	75 0c                	jne    c001861d <Thr::loadDLL(char const*, bool)+0x1ae>
c0018611:	83 ec 0c             	sub    esp,0xc
c0018614:	55                   	push   ebp
c0018615:	e8 1a 3f ff ff       	call   c000c534 <Phys::freePage(unsigned long)>
c001861a:	83 c4 10             	add    esp,0x10
c001861d:	46                   	inc    esi
c001861e:	eb a4                	jmp    c00185c4 <Thr::loadDLL(char const*, bool)+0x155>
c0018620:	89 f8                	mov    eax,edi
c0018622:	84 c0                	test   al,al
c0018624:	75 02                	jne    c0018628 <Thr::loadDLL(char const*, bool)+0x1b9>
c0018626:	31 db                	xor    ebx,ebx
c0018628:	81 c4 2c 01 00 00    	add    esp,0x12c
c001862e:	89 d8                	mov    eax,ebx
c0018630:	5b                   	pop    ebx
c0018631:	5e                   	pop    esi
c0018632:	5f                   	pop    edi
c0018633:	5d                   	pop    ebp
c0018634:	c3                   	ret    

c0018635 <Thr::executeDLL(unsigned long, void*)>:
c0018635:	56                   	push   esi
c0018636:	53                   	push   ebx
c0018637:	51                   	push   ecx
c0018638:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001863c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018640:	85 db                	test   ebx,ebx
c0018642:	75 10                	jne    c0018654 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0018644:	83 ec 0c             	sub    esp,0xc
c0018647:	68 28 2e 02 c0       	push   0xc0022e28
c001864c:	e8 fb d3 ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c0018651:	83 c4 10             	add    esp,0x10
c0018654:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0018658:	5a                   	pop    edx
c0018659:	89 d8                	mov    eax,ebx
c001865b:	5b                   	pop    ebx
c001865c:	5e                   	pop    esi
c001865d:	ff e0                	jmp    eax
c001865f:	90                   	nop

c0018660 <changeTSS>:
c0018660:	83 ec 0c             	sub    esp,0xc
c0018663:	e8 78 c2 ff ff       	call   c00148e0 <thisCPU()>
c0018668:	52                   	push   edx
c0018669:	05 7c 11 00 00       	add    eax,0x117c
c001866e:	52                   	push   edx
c001866f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018675:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0018678:	ba 00 00 e8 01       	mov    edx,0x1e80000
c001867d:	c1 e1 15             	shl    ecx,0x15
c0018680:	29 ca                	sub    edx,ecx
c0018682:	52                   	push   edx
c0018683:	50                   	push   eax
c0018684:	e8 53 54 ff ff       	call   c000dadc <TSS::setESP(unsigned long)>
c0018689:	83 c4 1c             	add    esp,0x1c
c001868c:	c3                   	ret    
c001868d:	90                   	nop

c001868e <Process::addArgs(char**)>:
c001868e:	57                   	push   edi
c001868f:	56                   	push   esi
c0018690:	53                   	push   ebx
c0018691:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018695:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018699:	85 ff                	test   edi,edi
c001869b:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c00186a5:	74 45                	je     c00186ec <Process::addArgs(char**)+0x5e>
c00186a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00186a9:	85 c0                	test   eax,eax
c00186ab:	74 3f                	je     c00186ec <Process::addArgs(char**)+0x5e>
c00186ad:	31 db                	xor    ebx,ebx
c00186af:	83 ec 0c             	sub    esp,0xc
c00186b2:	50                   	push   eax
c00186b3:	e8 32 80 fe ff       	call   c00006ea <strlen>
c00186b8:	40                   	inc    eax
c00186b9:	89 04 24             	mov    DWORD PTR [esp],eax
c00186bc:	e8 2a 39 ff ff       	call   c000bfeb <malloc>
c00186c1:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c00186c8:	5a                   	pop    edx
c00186c9:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00186cc:	59                   	pop    ecx
c00186cd:	43                   	inc    ebx
c00186ce:	52                   	push   edx
c00186cf:	50                   	push   eax
c00186d0:	e8 97 80 fe ff       	call   c000076c <strcpy>
c00186d5:	8b 8e 36 05 00 00    	mov    ecx,DWORD PTR [esi+0x536]
c00186db:	83 c4 10             	add    esp,0x10
c00186de:	41                   	inc    ecx
c00186df:	89 8e 36 05 00 00    	mov    DWORD PTR [esi+0x536],ecx
c00186e5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00186e8:	85 c0                	test   eax,eax
c00186ea:	75 c3                	jne    c00186af <Process::addArgs(char**)+0x21>
c00186ec:	5b                   	pop    ebx
c00186ed:	5e                   	pop    esi
c00186ee:	5f                   	pop    edi
c00186ef:	c3                   	ret    

c00186f0 <Process::Process(char const*, Process*, char**)>:
c00186f0:	56                   	push   esi
c00186f1:	53                   	push   ebx
c00186f2:	83 ec 14             	sub    esp,0x14
c00186f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186f9:	05 0c 02 00 00       	add    eax,0x20c
c00186fe:	bb 07 00 00 00       	mov    ebx,0x7
c0018703:	89 c6                	mov    esi,eax
c0018705:	85 db                	test   ebx,ebx
c0018707:	78 12                	js     c001871b <Process::Process(char const*, Process*, char**)+0x2b>
c0018709:	83 ec 0c             	sub    esp,0xc
c001870c:	56                   	push   esi
c001870d:	e8 48 77 00 00       	call   c001fe5a <ThreadControlBlock::ThreadControlBlock()>
c0018712:	83 c4 10             	add    esp,0x10
c0018715:	83 c6 63             	add    esi,0x63
c0018718:	4b                   	dec    ebx
c0018719:	eb ea                	jmp    c0018705 <Process::Process(char const*, Process*, char**)+0x15>
c001871b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001871f:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c0018726:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001872a:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c0018733:	a1 c4 41 02 c0       	mov    eax,ds:0xc00241c4
c0018738:	8d 50 01             	lea    edx,[eax+0x1]
c001873b:	89 15 c4 41 02 c0    	mov    DWORD PTR ds:0xc00241c4,edx
c0018741:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018745:	89 02                	mov    DWORD PTR [edx],eax
c0018747:	83 ec 0c             	sub    esp,0xc
c001874a:	6a 10                	push   0x10
c001874c:	e8 97 69 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c0018751:	83 c4 10             	add    esp,0x10
c0018754:	89 c3                	mov    ebx,eax
c0018756:	83 ec 08             	sub    esp,0x8
c0018759:	6a 00                	push   0x0
c001875b:	53                   	push   ebx
c001875c:	e8 1b 66 ff ff       	call   c000ed7c <VAS::VAS(bool)>
c0018761:	83 c4 10             	add    esp,0x10
c0018764:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018768:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001876e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018772:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001877c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018780:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018784:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001878a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001878e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018794:	85 c0                	test   eax,eax
c0018796:	74 42                	je     c00187da <Process::Process(char const*, Process*, char**)+0xea>
c0018798:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001879c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00187a2:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c00187a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187ac:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c00187b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187b6:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00187bc:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00187c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187c6:	05 0c 01 00 00       	add    eax,0x10c
c00187cb:	83 ec 08             	sub    esp,0x8
c00187ce:	52                   	push   edx
c00187cf:	50                   	push   eax
c00187d0:	e8 97 7f fe ff       	call   c000076c <strcpy>
c00187d5:	83 c4 10             	add    esp,0x10
c00187d8:	eb 5c                	jmp    c0018836 <Process::Process(char const*, Process*, char**)+0x146>
c00187da:	83 ec 0c             	sub    esp,0xc
c00187dd:	68 60 12 00 00       	push   0x1260
c00187e2:	e8 01 69 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c00187e7:	83 c4 10             	add    esp,0x10
c00187ea:	89 c3                	mov    ebx,eax
c00187ec:	83 ec 08             	sub    esp,0x8
c00187ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187f3:	53                   	push   ebx
c00187f4:	e8 e1 4f ff ff       	call   c000d7da <VgaText::VgaText(char const*)>
c00187f9:	83 c4 10             	add    esp,0x10
c00187fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018800:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c0018806:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001880a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018810:	83 ec 0c             	sub    esp,0xc
c0018813:	50                   	push   eax
c0018814:	e8 c0 43 ff ff       	call   c000cbd9 <addToTerminalCycle(VgaText*)>
c0018819:	83 c4 10             	add    esp,0x10
c001881c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018820:	05 0c 01 00 00       	add    eax,0x10c
c0018825:	83 ec 08             	sub    esp,0x8
c0018828:	68 52 2e 02 c0       	push   0xc0022e52
c001882d:	50                   	push   eax
c001882e:	e8 39 7f fe ff       	call   c000076c <strcpy>
c0018833:	83 c4 10             	add    esp,0x10
c0018836:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001883a:	83 c0 0c             	add    eax,0xc
c001883d:	83 ec 08             	sub    esp,0x8
c0018840:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018844:	50                   	push   eax
c0018845:	e8 22 7f fe ff       	call   c000076c <strcpy>
c001884a:	83 c4 10             	add    esp,0x10
c001884d:	83 ec 08             	sub    esp,0x8
c0018850:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018854:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018858:	e8 31 fe ff ff       	call   c001868e <Process::addArgs(char**)>
c001885d:	83 c4 10             	add    esp,0x10
c0018860:	83 ec 08             	sub    esp,0x8
c0018863:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018867:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001886b:	e8 a5 ee ff ff       	call   c0017715 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0018870:	83 c4 10             	add    esp,0x10
c0018873:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018877:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001887b:	83 f0 01             	xor    eax,0x1
c001887e:	88 c2                	mov    dl,al
c0018880:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018884:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c001888a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001888e:	25 ff 00 00 00       	and    eax,0xff
c0018893:	83 ec 08             	sub    esp,0x8
c0018896:	50                   	push   eax
c0018897:	68 50 2f 02 c0       	push   0xc0022f50
c001889c:	e8 7c 69 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c00188a1:	83 c4 10             	add    esp,0x10
c00188a4:	90                   	nop
c00188a5:	83 c4 14             	add    esp,0x14
c00188a8:	5b                   	pop    ebx
c00188a9:	5e                   	pop    esi
c00188aa:	c3                   	ret    
c00188ab:	90                   	nop

c00188ac <Process::Process(bool, char const*, Process*, char**)>:
c00188ac:	56                   	push   esi
c00188ad:	53                   	push   ebx
c00188ae:	83 ec 14             	sub    esp,0x14
c00188b1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00188b5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00188b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188bd:	05 0c 02 00 00       	add    eax,0x20c
c00188c2:	bb 07 00 00 00       	mov    ebx,0x7
c00188c7:	89 c6                	mov    esi,eax
c00188c9:	85 db                	test   ebx,ebx
c00188cb:	78 12                	js     c00188df <Process::Process(bool, char const*, Process*, char**)+0x33>
c00188cd:	83 ec 0c             	sub    esp,0xc
c00188d0:	56                   	push   esi
c00188d1:	e8 84 75 00 00       	call   c001fe5a <ThreadControlBlock::ThreadControlBlock()>
c00188d6:	83 c4 10             	add    esp,0x10
c00188d9:	83 c6 63             	add    esi,0x63
c00188dc:	4b                   	dec    ebx
c00188dd:	eb ea                	jmp    c00188c9 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c00188df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188e3:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c00188ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188ee:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c00188f7:	a1 c4 41 02 c0       	mov    eax,ds:0xc00241c4
c00188fc:	8d 50 01             	lea    edx,[eax+0x1]
c00188ff:	89 15 c4 41 02 c0    	mov    DWORD PTR ds:0xc00241c4,edx
c0018905:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018909:	89 02                	mov    DWORD PTR [edx],eax
c001890b:	83 ec 0c             	sub    esp,0xc
c001890e:	6a 10                	push   0x10
c0018910:	e8 d3 67 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c0018915:	83 c4 10             	add    esp,0x10
c0018918:	89 c3                	mov    ebx,eax
c001891a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001891e:	25 ff 00 00 00       	and    eax,0xff
c0018923:	83 ec 08             	sub    esp,0x8
c0018926:	50                   	push   eax
c0018927:	53                   	push   ebx
c0018928:	e8 4f 64 ff ff       	call   c000ed7c <VAS::VAS(bool)>
c001892d:	83 c4 10             	add    esp,0x10
c0018930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018934:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001893a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001893e:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018948:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001894c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018950:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0018956:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001895a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018960:	85 c0                	test   eax,eax
c0018962:	74 42                	je     c00189a6 <Process::Process(bool, char const*, Process*, char**)+0xfa>
c0018964:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018968:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001896e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018974:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018978:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001897e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018982:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018988:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001898e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018992:	05 0c 01 00 00       	add    eax,0x10c
c0018997:	83 ec 08             	sub    esp,0x8
c001899a:	52                   	push   edx
c001899b:	50                   	push   eax
c001899c:	e8 cb 7d fe ff       	call   c000076c <strcpy>
c00189a1:	83 c4 10             	add    esp,0x10
c00189a4:	eb 5c                	jmp    c0018a02 <Process::Process(bool, char const*, Process*, char**)+0x156>
c00189a6:	83 ec 0c             	sub    esp,0xc
c00189a9:	68 60 12 00 00       	push   0x1260
c00189ae:	e8 35 67 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c00189b3:	83 c4 10             	add    esp,0x10
c00189b6:	89 c3                	mov    ebx,eax
c00189b8:	83 ec 08             	sub    esp,0x8
c00189bb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00189bf:	53                   	push   ebx
c00189c0:	e8 15 4e ff ff       	call   c000d7da <VgaText::VgaText(char const*)>
c00189c5:	83 c4 10             	add    esp,0x10
c00189c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189cc:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00189d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189d6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00189dc:	83 ec 0c             	sub    esp,0xc
c00189df:	50                   	push   eax
c00189e0:	e8 f4 41 ff ff       	call   c000cbd9 <addToTerminalCycle(VgaText*)>
c00189e5:	83 c4 10             	add    esp,0x10
c00189e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189ec:	05 0c 01 00 00       	add    eax,0x10c
c00189f1:	83 ec 08             	sub    esp,0x8
c00189f4:	68 52 2e 02 c0       	push   0xc0022e52
c00189f9:	50                   	push   eax
c00189fa:	e8 6d 7d fe ff       	call   c000076c <strcpy>
c00189ff:	83 c4 10             	add    esp,0x10
c0018a02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a06:	83 c0 0c             	add    eax,0xc
c0018a09:	83 ec 08             	sub    esp,0x8
c0018a0c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018a10:	50                   	push   eax
c0018a11:	e8 56 7d fe ff       	call   c000076c <strcpy>
c0018a16:	83 c4 10             	add    esp,0x10
c0018a19:	83 ec 08             	sub    esp,0x8
c0018a1c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018a20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018a24:	e8 65 fc ff ff       	call   c001868e <Process::addArgs(char**)>
c0018a29:	83 c4 10             	add    esp,0x10
c0018a2c:	90                   	nop
c0018a2d:	83 c4 14             	add    esp,0x14
c0018a30:	5b                   	pop    ebx
c0018a31:	5e                   	pop    esi
c0018a32:	c3                   	ret    

c0018a33 <disableIRQs()>:
c0018a33:	fa                   	cli    
c0018a34:	a1 cc 5b 02 c0       	mov    eax,ds:0xc0025bcc
c0018a39:	40                   	inc    eax
c0018a3a:	a3 cc 5b 02 c0       	mov    ds:0xc0025bcc,eax
c0018a3f:	c3                   	ret    

c0018a40 <getIRQNestingLevel()>:
c0018a40:	a1 cc 5b 02 c0       	mov    eax,ds:0xc0025bcc
c0018a45:	c3                   	ret    

c0018a46 <enableIRQs()>:
c0018a46:	a1 cc 5b 02 c0       	mov    eax,ds:0xc0025bcc
c0018a4b:	48                   	dec    eax
c0018a4c:	a3 cc 5b 02 c0       	mov    ds:0xc0025bcc,eax
c0018a51:	75 01                	jne    c0018a54 <enableIRQs()+0xe>
c0018a53:	fb                   	sti    
c0018a54:	c3                   	ret    

c0018a55 <lockScheduler()>:
c0018a55:	eb dc                	jmp    c0018a33 <disableIRQs()>

c0018a57 <unlockScheduler()>:
c0018a57:	eb ed                	jmp    c0018a46 <enableIRQs()>

c0018a59 <userModeEntryPoint(void*)>:
c0018a59:	83 ec 0c             	sub    esp,0xc
c0018a5c:	e8 f6 ff ff ff       	call   c0018a57 <unlockScheduler()>
c0018a61:	fb                   	sti    
c0018a62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a67:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018a6a:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0018a70:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018a74:	83 c4 0c             	add    esp,0xc
c0018a77:	e9 2a 78 fe ff       	jmp    c00002a6 <goToUsermode>

c0018a7c <lockStuff()>:
c0018a7c:	e8 b2 ff ff ff       	call   c0018a33 <disableIRQs()>
c0018a81:	a1 c8 5b 02 c0       	mov    eax,ds:0xc0025bc8
c0018a86:	40                   	inc    eax
c0018a87:	a3 c8 5b 02 c0       	mov    ds:0xc0025bc8,eax
c0018a8c:	c3                   	ret    

c0018a8d <taskStartupFunction>:
c0018a8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a92:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018a95:	c3                   	ret    

c0018a96 <updateTimeUsed()>:
c0018a96:	57                   	push   edi
c0018a97:	56                   	push   esi
c0018a98:	53                   	push   ebx
c0018a99:	e8 42 be ff ff       	call   c00148e0 <thisCPU()>
c0018a9e:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0018aa5:	74 49                	je     c0018af0 <updateTimeUsed()+0x5a>
c0018aa7:	0f 31                	rdtsc  
c0018aa9:	89 c1                	mov    ecx,eax
c0018aab:	a3 08 5c 02 c0       	mov    ds:0xc0025c08,eax
c0018ab0:	2b 0d f8 5b 02 c0    	sub    ecx,DWORD PTR ds:0xc0025bf8
c0018ab6:	a3 f8 5b 02 c0       	mov    ds:0xc0025bf8,eax
c0018abb:	89 0d 00 5c 02 c0    	mov    DWORD PTR ds:0xc0025c00,ecx
c0018ac1:	89 d3                	mov    ebx,edx
c0018ac3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ac8:	89 15 0c 5c 02 c0    	mov    DWORD PTR ds:0xc0025c0c,edx
c0018ace:	1b 1d fc 5b 02 c0    	sbb    ebx,DWORD PTR ds:0xc0025bfc
c0018ad4:	89 15 fc 5b 02 c0    	mov    DWORD PTR ds:0xc0025bfc,edx
c0018ada:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0018add:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0018ae0:	01 f1                	add    ecx,esi
c0018ae2:	89 1d 04 5c 02 c0    	mov    DWORD PTR ds:0xc0025c04,ebx
c0018ae8:	11 fb                	adc    ebx,edi
c0018aea:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c0018aed:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0018af0:	5b                   	pop    ebx
c0018af1:	5e                   	pop    esi
c0018af2:	5f                   	pop    edi
c0018af3:	c3                   	ret    

c0018af4 <switchToThread(ThreadControlBlock*)>:
c0018af4:	53                   	push   ebx
c0018af5:	83 ec 08             	sub    esp,0x8
c0018af8:	a1 c8 5b 02 c0       	mov    eax,ds:0xc0025bc8
c0018afd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018b01:	85 c0                	test   eax,eax
c0018b03:	75 36                	jne    c0018b3b <switchToThread(ThreadControlBlock*)+0x47>
c0018b05:	8a 53 44             	mov    dl,BYTE PTR [ebx+0x44]
c0018b08:	80 fa ff             	cmp    dl,0xff
c0018b0b:	74 2a                	je     c0018b37 <switchToThread(ThreadControlBlock*)+0x43>
c0018b0d:	81 e2 ff 00 00 00    	and    edx,0xff
c0018b13:	b8 84 03 00 00       	mov    eax,0x384
c0018b18:	29 d0                	sub    eax,edx
c0018b1a:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0018b1d:	c1 e0 10             	shl    eax,0x10
c0018b20:	01 c8                	add    eax,ecx
c0018b22:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018b25:	e8 6c ff ff ff       	call   c0018a96 <updateTimeUsed()>
c0018b2a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018b2e:	83 c4 08             	add    esp,0x8
c0018b31:	5b                   	pop    ebx
c0018b32:	e9 ad 77 fe ff       	jmp    c00002e4 <switchToThreadASM>
c0018b37:	31 c0                	xor    eax,eax
c0018b39:	eb e7                	jmp    c0018b22 <switchToThread(ThreadControlBlock*)+0x2e>
c0018b3b:	c7 05 c4 5b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025bc4,0x1
c0018b45:	83 c4 08             	add    esp,0x8
c0018b48:	5b                   	pop    ebx
c0018b49:	c3                   	ret    

c0018b4a <Semaphore::Semaphore(int)>:
c0018b4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018b52:	89 10                	mov    DWORD PTR [eax],edx
c0018b54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b58:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018b5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b63:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018b6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b6e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018b75:	90                   	nop
c0018b76:	c3                   	ret    
c0018b77:	90                   	nop

c0018b78 <Mutex::Mutex()>:
c0018b78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b7c:	6a 01                	push   0x1
c0018b7e:	50                   	push   eax
c0018b7f:	e8 c6 ff ff ff       	call   c0018b4a <Semaphore::Semaphore(int)>
c0018b84:	83 c4 08             	add    esp,0x8
c0018b87:	90                   	nop
c0018b88:	c3                   	ret    
c0018b89:	90                   	nop

c0018b8a <Process::createThread(void (*)(void*), void*, int)>:
c0018b8a:	55                   	push   ebp
c0018b8b:	31 c9                	xor    ecx,ecx
c0018b8d:	57                   	push   edi
c0018b8e:	56                   	push   esi
c0018b8f:	53                   	push   ebx
c0018b90:	83 ec 1c             	sub    esp,0x1c
c0018b93:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018b97:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c0018b9e:	89 f2                	mov    edx,esi
c0018ba0:	31 c0                	xor    eax,eax
c0018ba2:	66 89 d0             	mov    ax,dx
c0018ba5:	83 e2 01             	and    edx,0x1
c0018ba8:	74 14                	je     c0018bbe <Process::createThread(void (*)(void*), void*, int)+0x34>
c0018baa:	d1 f8                	sar    eax,1
c0018bac:	41                   	inc    ecx
c0018bad:	89 c2                	mov    edx,eax
c0018baf:	83 f9 10             	cmp    ecx,0x10
c0018bb2:	75 ec                	jne    c0018ba0 <Process::createThread(void (*)(void*), void*, int)+0x16>
c0018bb4:	83 c4 1c             	add    esp,0x1c
c0018bb7:	31 c0                	xor    eax,eax
c0018bb9:	5b                   	pop    ebx
c0018bba:	5e                   	pop    esi
c0018bbb:	5f                   	pop    edi
c0018bbc:	5d                   	pop    ebp
c0018bbd:	c3                   	ret    
c0018bbe:	b8 01 00 00 00       	mov    eax,0x1
c0018bc3:	d3 e0                	shl    eax,cl
c0018bc5:	09 c6                	or     esi,eax
c0018bc7:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018bcd:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c0018bd4:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0018bd7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018bda:	89 f0                	mov    eax,esi
c0018bdc:	c1 e0 05             	shl    eax,0x5
c0018bdf:	01 c6                	add    esi,eax
c0018be1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0018be4:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018bea:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018bee:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0018bf4:	89 ca                	mov    edx,ecx
c0018bf6:	f7 da                	neg    edx
c0018bf8:	c1 e2 15             	shl    edx,0x15
c0018bfb:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0018c01:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018c07:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0018c0d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018c13:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018c17:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0018c1d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018c21:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018c2b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018c31:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0018c3b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018c45:	52                   	push   edx
c0018c46:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c0018c4d:	52                   	push   edx
c0018c4e:	50                   	push   eax
c0018c4f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018c53:	68 e8 5b 02 c0       	push   0xc0025be8
c0018c58:	e8 55 70 00 00       	call   c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018c5d:	83 c4 10             	add    esp,0x10
c0018c60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018c64:	83 c4 1c             	add    esp,0x1c
c0018c67:	5b                   	pop    ebx
c0018c68:	5e                   	pop    esi
c0018c69:	5f                   	pop    edi
c0018c6a:	5d                   	pop    ebp
c0018c6b:	c3                   	ret    

c0018c6c <Process::createUserThread()>:
c0018c6c:	83 ec 0c             	sub    esp,0xc
c0018c6f:	68 80 00 00 00       	push   0x80
c0018c74:	6a 00                	push   0x0
c0018c76:	68 59 8a 01 c0       	push   0xc0018a59
c0018c7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c7f:	50                   	push   eax
c0018c80:	e8 05 ff ff ff       	call   c0018b8a <Process::createThread(void (*)(void*), void*, int)>
c0018c85:	83 c4 1c             	add    esp,0x1c
c0018c88:	c3                   	ret    

c0018c89 <setupMultitasking(void (*)())>:
c0018c89:	56                   	push   esi
c0018c8a:	53                   	push   ebx
c0018c8b:	51                   	push   ecx
c0018c8c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018c90:	eb 10                	jmp    c0018ca2 <setupMultitasking(void (*)())+0x19>
c0018c92:	83 ec 0c             	sub    esp,0xc
c0018c95:	68 e8 5b 02 c0       	push   0xc0025be8
c0018c9a:	e8 65 6f 00 00       	call   c001fc04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018c9f:	83 c4 10             	add    esp,0x10
c0018ca2:	83 ec 0c             	sub    esp,0xc
c0018ca5:	68 e8 5b 02 c0       	push   0xc0025be8
c0018caa:	e8 39 6f 00 00       	call   c001fbe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018caf:	83 c4 10             	add    esp,0x10
c0018cb2:	84 c0                	test   al,al
c0018cb4:	74 dc                	je     c0018c92 <setupMultitasking(void (*)())+0x9>
c0018cb6:	83 ec 0c             	sub    esp,0xc
c0018cb9:	68 3b 07 00 00       	push   0x73b
c0018cbe:	e8 25 64 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c0018cc3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018cca:	6a 00                	push   0x0
c0018ccc:	68 56 2e 02 c0       	push   0xc0022e56
c0018cd1:	89 c3                	mov    ebx,eax
c0018cd3:	6a 01                	push   0x1
c0018cd5:	50                   	push   eax
c0018cd6:	e8 d1 fb ff ff       	call   c00188ac <Process::Process(bool, char const*, Process*, char**)>
c0018cdb:	83 c4 18             	add    esp,0x18
c0018cde:	8b 83 26 05 00 00    	mov    eax,DWORD PTR [ebx+0x526]
c0018ce4:	89 1d f4 5b 02 c0    	mov    DWORD PTR ds:0xc0025bf4,ebx
c0018cea:	50                   	push   eax
c0018ceb:	68 78 2f 02 c0       	push   0xc0022f78
c0018cf0:	e8 28 65 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0018cf5:	5a                   	pop    edx
c0018cf6:	8b 8b 26 05 00 00    	mov    ecx,DWORD PTR [ebx+0x526]
c0018cfc:	51                   	push   ecx
c0018cfd:	e8 4b 46 ff ff       	call   c000d34d <setActiveTerminal(VgaText*)>
c0018d02:	66 8b 83 24 05 00 00 	mov    ax,WORD PTR [ebx+0x524]
c0018d09:	83 c8 01             	or     eax,0x1
c0018d0c:	66 89 83 24 05 00 00 	mov    WORD PTR [ebx+0x524],ax
c0018d13:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018d19:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018d1c:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0018d26:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018d2c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018d36:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018d40:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018d46:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018d4c:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018d56:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0018d5c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018d66:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0018d70:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018d76:	58                   	pop    eax
c0018d77:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018d7d:	5a                   	pop    edx
c0018d7e:	68 52 2e 02 c0       	push   0xc0022e52
c0018d83:	50                   	push   eax
c0018d84:	e8 e3 79 fe ff       	call   c000076c <strcpy>
c0018d89:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0018d90:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018d94:	83 c4 14             	add    esp,0x14
c0018d97:	5b                   	pop    ebx
c0018d98:	5e                   	pop    esi
c0018d99:	e9 38 75 fe ff       	jmp    c00002d6 <switchToThreadASMFirstTime>

c0018d9e <schedule()>:
c0018d9e:	a1 c8 5b 02 c0       	mov    eax,ds:0xc0025bc8
c0018da3:	85 c0                	test   eax,eax
c0018da5:	74 0b                	je     c0018db2 <schedule()+0x14>
c0018da7:	c7 05 c4 5b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025bc4,0x1
c0018db1:	c3                   	ret    
c0018db2:	53                   	push   ebx
c0018db3:	83 ec 14             	sub    esp,0x14
c0018db6:	68 e8 5b 02 c0       	push   0xc0025be8
c0018dbb:	e8 28 6e 00 00       	call   c001fbe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018dc0:	83 c4 10             	add    esp,0x10
c0018dc3:	84 c0                	test   al,al
c0018dc5:	75 38                	jne    c0018dff <schedule()+0x61>
c0018dc7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018dcc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018dcf:	4a                   	dec    edx
c0018dd0:	74 32                	je     c0018e04 <schedule()+0x66>
c0018dd2:	83 ec 0c             	sub    esp,0xc
c0018dd5:	68 e8 5b 02 c0       	push   0xc0025be8
c0018dda:	e8 01 6e 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018ddf:	89 c3                	mov    ebx,eax
c0018de1:	c7 04 24 e8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025be8
c0018de8:	e8 17 6e 00 00       	call   c001fc04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018ded:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018df4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018df7:	e8 f8 fc ff ff       	call   c0018af4 <switchToThread(ThreadControlBlock*)>
c0018dfc:	83 c4 10             	add    esp,0x10
c0018dff:	83 c4 08             	add    esp,0x8
c0018e02:	5b                   	pop    ebx
c0018e03:	c3                   	ret    
c0018e04:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018e0b:	51                   	push   ecx
c0018e0c:	51                   	push   ecx
c0018e0d:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018e13:	53                   	push   ebx
c0018e14:	68 e8 5b 02 c0       	push   0xc0025be8
c0018e19:	e8 94 6e 00 00       	call   c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018e1e:	83 c4 10             	add    esp,0x10
c0018e21:	eb af                	jmp    c0018dd2 <schedule()+0x34>

c0018e23 <unlockStuff()>:
c0018e23:	a1 c8 5b 02 c0       	mov    eax,ds:0xc0025bc8
c0018e28:	48                   	dec    eax
c0018e29:	a3 c8 5b 02 c0       	mov    ds:0xc0025bc8,eax
c0018e2e:	75 09                	jne    c0018e39 <unlockStuff()+0x16>
c0018e30:	a1 c4 5b 02 c0       	mov    eax,ds:0xc0025bc4
c0018e35:	85 c0                	test   eax,eax
c0018e37:	75 05                	jne    c0018e3e <unlockStuff()+0x1b>
c0018e39:	e9 08 fc ff ff       	jmp    c0018a46 <enableIRQs()>
c0018e3e:	83 ec 0c             	sub    esp,0xc
c0018e41:	c7 05 c4 5b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025bc4,0x0
c0018e4b:	e8 4e ff ff ff       	call   c0018d9e <schedule()>
c0018e50:	83 c4 0c             	add    esp,0xc
c0018e53:	e9 ee fb ff ff       	jmp    c0018a46 <enableIRQs()>

c0018e58 <Semaphore::tryAcquire()>:
c0018e58:	83 ec 0c             	sub    esp,0xc
c0018e5b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e5f:	e8 18 fc ff ff       	call   c0018a7c <lockStuff()>
c0018e64:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018e67:	3b 02                	cmp    eax,DWORD PTR [edx]
c0018e69:	7c 0b                	jl     c0018e76 <Semaphore::tryAcquire()+0x1e>
c0018e6b:	e8 b3 ff ff ff       	call   c0018e23 <unlockStuff()>
c0018e70:	31 c0                	xor    eax,eax
c0018e72:	83 c4 0c             	add    esp,0xc
c0018e75:	c3                   	ret    
c0018e76:	40                   	inc    eax
c0018e77:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0018e7a:	e8 a4 ff ff ff       	call   c0018e23 <unlockStuff()>
c0018e7f:	b0 01                	mov    al,0x1
c0018e81:	83 c4 0c             	add    esp,0xc
c0018e84:	c3                   	ret    
c0018e85:	90                   	nop

c0018e86 <Semaphore::assertLocked(char const*)>:
c0018e86:	83 ec 0c             	sub    esp,0xc
c0018e89:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e8d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018e91:	e8 e6 fb ff ff       	call   c0018a7c <lockStuff()>
c0018e96:	8b 02                	mov    eax,DWORD PTR [edx]
c0018e98:	39 42 0c             	cmp    DWORD PTR [edx+0xc],eax
c0018e9b:	7c 05                	jl     c0018ea2 <Semaphore::assertLocked(char const*)+0x1c>
c0018e9d:	83 c4 0c             	add    esp,0xc
c0018ea0:	eb 81                	jmp    c0018e23 <unlockStuff()>
c0018ea2:	83 ec 0c             	sub    esp,0xc
c0018ea5:	51                   	push   ecx
c0018ea6:	e8 a1 cb ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c0018eab:	83 c4 10             	add    esp,0x10
c0018eae:	83 c4 0c             	add    esp,0xc
c0018eb1:	e9 6d ff ff ff       	jmp    c0018e23 <unlockStuff()>

c0018eb6 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018eb6:	83 ec 0c             	sub    esp,0xc
c0018eb9:	e8 82 fb ff ff       	call   c0018a40 <getIRQNestingLevel()>
c0018ebe:	52                   	push   edx
c0018ebf:	52                   	push   edx
c0018ec0:	50                   	push   eax
c0018ec1:	68 ac 2f 02 c0       	push   0xc0022fac
c0018ec6:	e8 52 63 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0018ecb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ed0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018ed4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018ed7:	e8 c2 fe ff ff       	call   c0018d9e <schedule()>
c0018edc:	e8 76 fb ff ff       	call   c0018a57 <unlockScheduler()>
c0018ee1:	e8 5a fb ff ff       	call   c0018a40 <getIRQNestingLevel()>
c0018ee6:	59                   	pop    ecx
c0018ee7:	5a                   	pop    edx
c0018ee8:	50                   	push   eax
c0018ee9:	68 e0 2f 02 c0       	push   0xc0022fe0
c0018eee:	e8 2a 63 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0018ef3:	83 c4 1c             	add    esp,0x1c
c0018ef6:	c3                   	ret    

c0018ef7 <blockTask(TaskState)>:
c0018ef7:	83 ec 0c             	sub    esp,0xc
c0018efa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018efe:	e8 52 fb ff ff       	call   c0018a55 <lockScheduler()>
c0018f03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f08:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018f0b:	e8 8e fe ff ff       	call   c0018d9e <schedule()>
c0018f10:	83 c4 0c             	add    esp,0xc
c0018f13:	e9 3f fb ff ff       	jmp    c0018a57 <unlockScheduler()>

c0018f18 <waitTask(int, int*, int)>:
c0018f18:	83 ec 18             	sub    esp,0x18
c0018f1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f20:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f24:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018f27:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018f2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f30:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0018f33:	6a 07                	push   0x7
c0018f35:	e8 bd ff ff ff       	call   c0018ef7 <blockTask(TaskState)>
c0018f3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f3f:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0018f42:	83 c4 10             	add    esp,0x10
c0018f45:	85 d2                	test   edx,edx
c0018f47:	74 0a                	je     c0018f53 <waitTask(int, int*, int)+0x3b>
c0018f49:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0018f4c:	89 02                	mov    DWORD PTR [edx],eax
c0018f4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f53:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0018f56:	83 c4 0c             	add    esp,0xc
c0018f59:	c3                   	ret    

c0018f5a <nanoSleepUntil(unsigned long long)>:
c0018f5a:	53                   	push   ebx
c0018f5b:	83 ec 08             	sub    esp,0x8
c0018f5e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018f62:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018f66:	3b 0d 10 4e 02 c0    	cmp    ecx,DWORD PTR ds:0xc0024e10
c0018f6c:	89 d8                	mov    eax,ebx
c0018f6e:	1b 05 14 4e 02 c0    	sbb    eax,DWORD PTR ds:0xc0024e14
c0018f74:	73 05                	jae    c0018f7b <nanoSleepUntil(unsigned long long)+0x21>
c0018f76:	83 c4 08             	add    esp,0x8
c0018f79:	5b                   	pop    ebx
c0018f7a:	c3                   	ret    
c0018f7b:	e8 fc fa ff ff       	call   c0018a7c <lockStuff()>
c0018f80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f85:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0018f88:	89 58 30             	mov    DWORD PTR [eax+0x30],ebx
c0018f8b:	51                   	push   ecx
c0018f8c:	51                   	push   ecx
c0018f8d:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018f93:	53                   	push   ebx
c0018f94:	68 dc 5b 02 c0       	push   0xc0025bdc
c0018f99:	e8 14 6d 00 00       	call   c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018f9e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018fa5:	e8 4d ff ff ff       	call   c0018ef7 <blockTask(TaskState)>
c0018faa:	83 c4 18             	add    esp,0x18
c0018fad:	5b                   	pop    ebx
c0018fae:	e9 70 fe ff ff       	jmp    c0018e23 <unlockStuff()>

c0018fb3 <nanoSleep(unsigned long long)>:
c0018fb3:	a1 10 4e 02 c0       	mov    eax,ds:0xc0024e10
c0018fb8:	8b 15 14 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024e14
c0018fbe:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018fc2:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0018fc6:	eb 92                	jmp    c0018f5a <nanoSleepUntil(unsigned long long)>

c0018fc8 <sleep(unsigned long long)>:
c0018fc8:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c0018fcd:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c0018fd5:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0018fd9:	01 ca                	add    edx,ecx
c0018fdb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018fdf:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018fe3:	eb ce                	jmp    c0018fb3 <nanoSleep(unsigned long long)>
c0018fe5:	90                   	nop

c0018fe6 <Semaphore::acquire()>:
c0018fe6:	83 ec 0c             	sub    esp,0xc
c0018fe9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018fed:	e8 8a fa ff ff       	call   c0018a7c <lockStuff()>
c0018ff2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018ff5:	3b 02                	cmp    eax,DWORD PTR [edx]
c0018ff7:	7d 0c                	jge    c0019005 <Semaphore::acquire()+0x1f>
c0018ff9:	40                   	inc    eax
c0018ffa:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0018ffd:	83 c4 0c             	add    esp,0xc
c0019000:	e9 1e fe ff ff       	jmp    c0018e23 <unlockStuff()>
c0019005:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001900a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0019011:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019014:	85 c0                	test   eax,eax
c0019016:	74 29                	je     c0019041 <Semaphore::acquire()+0x5b>
c0019018:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001901b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019021:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0019024:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019029:	83 ec 0c             	sub    esp,0xc
c001902c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001902f:	6a 05                	push   0x5
c0019031:	e8 c1 fe ff ff       	call   c0018ef7 <blockTask(TaskState)>
c0019036:	83 c4 10             	add    esp,0x10
c0019039:	83 c4 0c             	add    esp,0xc
c001903c:	e9 e2 fd ff ff       	jmp    c0018e23 <unlockStuff()>
c0019041:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019046:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0019049:	eb d9                	jmp    c0019024 <Semaphore::acquire()+0x3e>

c001904b <taskReturned>:
c001904b:	83 ec 18             	sub    esp,0x18
c001904e:	68 14 30 02 c0       	push   0xc0023014
c0019053:	e8 f4 c9 ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c0019058:	83 c4 10             	add    esp,0x10
c001905b:	83 ec 0c             	sub    esp,0xc
c001905e:	6a 02                	push   0x2
c0019060:	e8 92 fe ff ff       	call   c0018ef7 <blockTask(TaskState)>
c0019065:	e8 eb f9 ff ff       	call   c0018a55 <lockScheduler()>
c001906a:	e8 2f fd ff ff       	call   c0018d9e <schedule()>
c001906f:	e8 e3 f9 ff ff       	call   c0018a57 <unlockScheduler()>
c0019074:	83 c4 10             	add    esp,0x10
c0019077:	eb e2                	jmp    c001905b <taskReturned+0x10>

c0019079 <unblockTask(ThreadControlBlock*)>:
c0019079:	53                   	push   ebx
c001907a:	83 ec 08             	sub    esp,0x8
c001907d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019081:	e8 cf f9 ff ff       	call   c0018a55 <lockScheduler()>
c0019086:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0019089:	85 c0                	test   eax,eax
c001908b:	74 5b                	je     c00190e8 <unblockTask(ThreadControlBlock*)+0x6f>
c001908d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0019090:	48                   	dec    eax
c0019091:	74 30                	je     c00190c3 <unblockTask(ThreadControlBlock*)+0x4a>
c0019093:	83 ec 0c             	sub    esp,0xc
c0019096:	68 e8 5b 02 c0       	push   0xc0025be8
c001909b:	e8 40 6b 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00190a0:	83 c4 10             	add    esp,0x10
c00190a3:	85 c0                	test   eax,eax
c00190a5:	75 16                	jne    c00190bd <unblockTask(ThreadControlBlock*)+0x44>
c00190a7:	eb 64                	jmp    c001910d <unblockTask(ThreadControlBlock*)+0x94>
c00190a9:	52                   	push   edx
c00190aa:	52                   	push   edx
c00190ab:	50                   	push   eax
c00190ac:	68 e8 5b 02 c0       	push   0xc0025be8
c00190b1:	e8 3a 6e 00 00       	call   c001fef0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00190b6:	83 c4 10             	add    esp,0x10
c00190b9:	85 c0                	test   eax,eax
c00190bb:	74 50                	je     c001910d <unblockTask(ThreadControlBlock*)+0x94>
c00190bd:	39 c3                	cmp    ebx,eax
c00190bf:	75 e8                	jne    c00190a9 <unblockTask(ThreadControlBlock*)+0x30>
c00190c1:	eb 1c                	jmp    c00190df <unblockTask(ThreadControlBlock*)+0x66>
c00190c3:	83 ec 0c             	sub    esp,0xc
c00190c6:	68 04 31 02 c0       	push   0xc0023104
c00190cb:	e8 4d 61 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c00190d0:	c7 04 24 90 30 02 c0 	mov    DWORD PTR [esp],0xc0023090
c00190d7:	e8 41 61 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c00190dc:	83 c4 10             	add    esp,0x10
c00190df:	83 c4 08             	add    esp,0x8
c00190e2:	5b                   	pop    ebx
c00190e3:	e9 6f f9 ff ff       	jmp    c0018a57 <unlockScheduler()>
c00190e8:	83 ec 0c             	sub    esp,0xc
c00190eb:	68 48 30 02 c0       	push   0xc0023048
c00190f0:	e8 28 61 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c00190f5:	c7 04 24 90 30 02 c0 	mov    DWORD PTR [esp],0xc0023090
c00190fc:	e8 1c 61 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0019101:	83 c4 10             	add    esp,0x10
c0019104:	83 c4 08             	add    esp,0x8
c0019107:	5b                   	pop    ebx
c0019108:	e9 4a f9 ff ff       	jmp    c0018a57 <unlockScheduler()>
c001910d:	50                   	push   eax
c001910e:	50                   	push   eax
c001910f:	53                   	push   ebx
c0019110:	68 e8 5b 02 c0       	push   0xc0025be8
c0019115:	e8 98 6b 00 00       	call   c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001911a:	83 c4 10             	add    esp,0x10
c001911d:	83 c4 08             	add    esp,0x8
c0019120:	5b                   	pop    ebx
c0019121:	e9 31 f9 ff ff       	jmp    c0018a57 <unlockScheduler()>

c0019126 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0019126:	55                   	push   ebp
c0019127:	57                   	push   edi
c0019128:	56                   	push   esi
c0019129:	53                   	push   ebx
c001912a:	83 ec 1c             	sub    esp,0x1c
c001912d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019131:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019134:	8b a8 36 05 00 00    	mov    ebp,DWORD PTR [eax+0x536]
c001913a:	85 ed                	test   ebp,ebp
c001913c:	7e 21                	jle    c001915f <cleanupTerminatedTask(ThreadControlBlock*)+0x39>
c001913e:	31 f6                	xor    esi,esi
c0019140:	83 ec 0c             	sub    esp,0xc
c0019143:	8b bc b0 3a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x53a]
c001914a:	46                   	inc    esi
c001914b:	57                   	push   edi
c001914c:	e8 aa 2e ff ff       	call   c000bffb <free>
c0019151:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019154:	83 c4 10             	add    esp,0x10
c0019157:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001915d:	7f e1                	jg     c0019140 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001915f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0019169:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001916e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019171:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0019174:	d3 c0                	rol    eax,cl
c0019176:	66 8b 8a 24 05 00 00 	mov    cx,WORD PTR [edx+0x524]
c001917d:	21 c1                	and    ecx,eax
c001917f:	66 89 8a 24 05 00 00 	mov    WORD PTR [edx+0x524],cx
c0019186:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0019189:	89 f7                	mov    edi,esi
c001918b:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c0019193:	0f 85 4f 01 00 00    	jne    c00192e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c2>
c0019199:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001919f:	85 c0                	test   eax,eax
c00191a1:	0f 84 aa 00 00 00    	je     c0019251 <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c00191a7:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c00191aa:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00191ae:	31 c9                	xor    ecx,ecx
c00191b0:	eb 10                	jmp    c00191c2 <cleanupTerminatedTask(ThreadControlBlock*)+0x9c>
c00191b2:	41                   	inc    ecx
c00191b3:	83 f9 10             	cmp    ecx,0x10
c00191b6:	0f 84 95 00 00 00    	je     c0019251 <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c00191bc:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00191c2:	31 d2                	xor    edx,edx
c00191c4:	66 8b 90 24 05 00 00 	mov    dx,WORD PTR [eax+0x524]
c00191cb:	d3 fa                	sar    edx,cl
c00191cd:	83 e2 01             	and    edx,0x1
c00191d0:	74 e0                	je     c00191b2 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00191d2:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00191d5:	89 d5                	mov    ebp,edx
c00191d7:	c1 e5 05             	shl    ebp,0x5
c00191da:	01 ea                	add    edx,ebp
c00191dc:	01 d0                	add    eax,edx
c00191de:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00191e4:	83 fd 07             	cmp    ebp,0x7
c00191e7:	75 c9                	jne    c00191b2 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00191e9:	05 40 02 00 00       	add    eax,0x240
c00191ee:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c00191f1:	83 fd ff             	cmp    ebp,0xffffffff
c00191f4:	0f 8c 07 01 00 00    	jl     c0019301 <cleanupTerminatedTask(ThreadControlBlock*)+0x1db>
c00191fa:	0f 84 b4 01 00 00    	je     c00193b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x28e>
c0019200:	85 ed                	test   ebp,ebp
c0019202:	0f 84 9b 01 00 00    	je     c00193a3 <cleanupTerminatedTask(ThreadControlBlock*)+0x27d>
c0019208:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001920a:	75 a6                	jne    c00191b2 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c001920c:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0019212:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019216:	01 d0                	add    eax,edx
c0019218:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001921c:	83 ec 0c             	sub    esp,0xc
c001921f:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0019225:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019228:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001922e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0019235:	50                   	push   eax
c0019236:	e8 3e fe ff ff       	call   c0019079 <unblockTask(ThreadControlBlock*)>
c001923b:	83 c4 10             	add    esp,0x10
c001923e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019242:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0019245:	41                   	inc    ecx
c0019246:	89 f7                	mov    edi,esi
c0019248:	83 f9 10             	cmp    ecx,0x10
c001924b:	0f 85 6b ff ff ff    	jne    c00191bc <cleanupTerminatedTask(ThreadControlBlock*)+0x96>
c0019251:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c0019257:	85 c0                	test   eax,eax
c0019259:	74 5d                	je     c00192b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c001925b:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c0019261:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c0019267:	74 4f                	je     c00192b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c0019269:	83 ec 0c             	sub    esp,0xc
c001926c:	68 e8 5b 02 c0       	push   0xc0025be8
c0019271:	e8 6a 69 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019276:	c7 04 24 e8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025be8
c001927d:	89 c7                	mov    edi,eax
c001927f:	e8 64 69 00 00       	call   c001fbe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0019284:	83 c4 10             	add    esp,0x10
c0019287:	84 c0                	test   al,al
c0019289:	0f 84 e2 00 00 00    	je     c0019371 <cleanupTerminatedTask(ThreadControlBlock*)+0x24b>
c001928f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019292:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0019298:	85 d2                	test   edx,edx
c001929a:	74 0f                	je     c00192ab <cleanupTerminatedTask(ThreadControlBlock*)+0x185>
c001929c:	83 ec 0c             	sub    esp,0xc
c001929f:	8b 02                	mov    eax,DWORD PTR [edx]
c00192a1:	52                   	push   edx
c00192a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00192a5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00192a8:	83 c4 10             	add    esp,0x10
c00192ab:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c00192b5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c00192b8:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c00192be:	85 db                	test   ebx,ebx
c00192c0:	74 16                	je     c00192d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b2>
c00192c2:	83 ec 0c             	sub    esp,0xc
c00192c5:	53                   	push   ebx
c00192c6:	e8 97 54 ff ff       	call   c000e762 <VAS::~VAS()>
c00192cb:	5a                   	pop    edx
c00192cc:	59                   	pop    ecx
c00192cd:	6a 10                	push   0x10
c00192cf:	53                   	push   ebx
c00192d0:	e8 22 5e ff ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c00192d5:	83 c4 10             	add    esp,0x10
c00192d8:	83 ec 0c             	sub    esp,0xc
c00192db:	68 5d 2e 02 c0       	push   0xc0022e5d
c00192e0:	e8 38 5f ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c00192e5:	83 c4 10             	add    esp,0x10
c00192e8:	50                   	push   eax
c00192e9:	50                   	push   eax
c00192ea:	68 3b 07 00 00       	push   0x73b
c00192ef:	68 6b 2e 02 c0       	push   0xc0022e6b
c00192f4:	e8 24 5f ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c00192f9:	83 c4 2c             	add    esp,0x2c
c00192fc:	5b                   	pop    ebx
c00192fd:	5e                   	pop    esi
c00192fe:	5f                   	pop    edi
c00192ff:	5d                   	pop    ebp
c0019300:	c3                   	ret    
c0019301:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019305:	83 ec 0c             	sub    esp,0xc
c0019308:	68 48 31 02 c0       	push   0xc0023148
c001930d:	e8 3a c7 ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c0019312:	83 c4 10             	add    esp,0x10
c0019315:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0019318:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001931c:	89 f7                	mov    edi,esi
c001931e:	e9 8f fe ff ff       	jmp    c00191b2 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0019323:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019329:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001932f:	75 1c                	jne    c001934d <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0019331:	83 ec 0c             	sub    esp,0xc
c0019334:	68 b0 31 02 c0       	push   0xc00231b0
c0019339:	e8 df 5e ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001933e:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019345:	e8 ad fb ff ff       	call   c0018ef7 <blockTask(TaskState)>
c001934a:	83 c4 10             	add    esp,0x10
c001934d:	55                   	push   ebp
c001934e:	55                   	push   ebp
c001934f:	56                   	push   esi
c0019350:	68 e8 5b 02 c0       	push   0xc0025be8
c0019355:	e8 58 69 00 00       	call   c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001935a:	c7 04 24 e8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025be8
c0019361:	e8 7a 68 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019366:	83 c4 10             	add    esp,0x10
c0019369:	39 f8                	cmp    eax,edi
c001936b:	0f 84 1e ff ff ff    	je     c001928f <cleanupTerminatedTask(ThreadControlBlock*)+0x169>
c0019371:	83 ec 0c             	sub    esp,0xc
c0019374:	68 e8 5b 02 c0       	push   0xc0025be8
c0019379:	e8 62 68 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001937e:	89 c6                	mov    esi,eax
c0019380:	c7 04 24 e8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025be8
c0019387:	e8 78 68 00 00       	call   c001fc04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001938c:	83 c4 10             	add    esp,0x10
c001938f:	39 f3                	cmp    ebx,esi
c0019391:	74 ba                	je     c001934d <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0019393:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0019396:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019399:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001939f:	75 ac                	jne    c001934d <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c00193a1:	eb 80                	jmp    c0019323 <cleanupTerminatedTask(ThreadControlBlock*)+0x1fd>
c00193a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00193a7:	83 ec 0c             	sub    esp,0xc
c00193aa:	68 7c 31 02 c0       	push   0xc002317c
c00193af:	e9 59 ff ff ff       	jmp    c001930d <cleanupTerminatedTask(ThreadControlBlock*)+0x1e7>
c00193b4:	8b 36                	mov    esi,DWORD PTR [esi]
c00193b6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00193ba:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c00193bd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00193c0:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c00193c6:	01 d7                	add    edi,edx
c00193c8:	89 f8                	mov    eax,edi
c00193ca:	e9 49 fe ff ff       	jmp    c0019218 <cleanupTerminatedTask(ThreadControlBlock*)+0xf2>

c00193cf <cleanerTaskFunction(void*)>:
c00193cf:	53                   	push   ebx
c00193d0:	83 ec 08             	sub    esp,0x8
c00193d3:	e8 7f f6 ff ff       	call   c0018a57 <unlockScheduler()>
c00193d8:	e8 78 f6 ff ff       	call   c0018a55 <lockScheduler()>
c00193dd:	80 3d ac 5b 02 c0 00 	cmp    BYTE PTR ds:0xc0025bac,0x0
c00193e4:	0f 85 8e 00 00 00    	jne    c0019478 <cleanerTaskFunction(void*)+0xa9>
c00193ea:	83 ec 0c             	sub    esp,0xc
c00193ed:	6a 02                	push   0x2
c00193ef:	e8 c2 fa ff ff       	call   c0018eb6 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00193f4:	83 c4 10             	add    esp,0x10
c00193f7:	c6 05 ac 5b 02 c0 00 	mov    BYTE PTR ds:0xc0025bac,0x0
c00193fe:	e8 79 f6 ff ff       	call   c0018a7c <lockStuff()>
c0019403:	e8 4d f6 ff ff       	call   c0018a55 <lockScheduler()>
c0019408:	83 ec 0c             	sub    esp,0xc
c001940b:	68 d0 5b 02 c0       	push   0xc0025bd0
c0019410:	e8 d3 67 00 00       	call   c001fbe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0019415:	83 c4 10             	add    esp,0x10
c0019418:	84 c0                	test   al,al
c001941a:	75 40                	jne    c001945c <cleanerTaskFunction(void*)+0x8d>
c001941c:	83 ec 0c             	sub    esp,0xc
c001941f:	68 d0 5b 02 c0       	push   0xc0025bd0
c0019424:	e8 b7 67 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019429:	89 c3                	mov    ebx,eax
c001942b:	c7 04 24 d0 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bd0
c0019432:	e8 cd 67 00 00       	call   c001fc04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0019437:	c7 04 24 81 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e81
c001943e:	e8 da 5d ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0019443:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019446:	e8 db fc ff ff       	call   c0019126 <cleanupTerminatedTask(ThreadControlBlock*)>
c001944b:	c7 04 24 9a 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e9a
c0019452:	e8 c6 5d ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0019457:	83 c4 10             	add    esp,0x10
c001945a:	eb ac                	jmp    c0019408 <cleanerTaskFunction(void*)+0x39>
c001945c:	e8 f6 f5 ff ff       	call   c0018a57 <unlockScheduler()>
c0019461:	e8 bd f9 ff ff       	call   c0018e23 <unlockStuff()>
c0019466:	e8 ea f5 ff ff       	call   c0018a55 <lockScheduler()>
c001946b:	80 3d ac 5b 02 c0 00 	cmp    BYTE PTR ds:0xc0025bac,0x0
c0019472:	0f 84 72 ff ff ff    	je     c00193ea <cleanerTaskFunction(void*)+0x1b>
c0019478:	e8 da f5 ff ff       	call   c0018a57 <unlockScheduler()>
c001947d:	e9 75 ff ff ff       	jmp    c00193f7 <cleanerTaskFunction(void*)+0x28>

c0019482 <terminateTask(int)>:
c0019482:	83 ec 14             	sub    esp,0x14
c0019485:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001948a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001948d:	83 c0 0c             	add    eax,0xc
c0019490:	50                   	push   eax
c0019491:	68 d8 31 02 c0       	push   0xc00231d8
c0019496:	e8 82 5d ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001949b:	e8 dc f5 ff ff       	call   c0018a7c <lockStuff()>
c00194a0:	e8 b0 f5 ff ff       	call   c0018a55 <lockScheduler()>
c00194a5:	c7 04 24 ad 2e 02 c0 	mov    DWORD PTR [esp],0xc0022ead
c00194ac:	e8 6c 5d ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c00194b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00194b6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00194ba:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c00194bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00194c2:	59                   	pop    ecx
c00194c3:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00194c6:	5a                   	pop    edx
c00194c7:	50                   	push   eax
c00194c8:	68 d0 5b 02 c0       	push   0xc0025bd0
c00194cd:	e8 e0 67 00 00       	call   c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00194d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00194d7:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00194de:	c7 04 24 c7 2e 02 c0 	mov    DWORD PTR [esp],0xc0022ec7
c00194e5:	e8 33 5d ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c00194ea:	8b 0d a8 5b 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ba8
c00194f0:	83 c4 10             	add    esp,0x10
c00194f3:	85 c9                	test   ecx,ecx
c00194f5:	74 5b                	je     c0019552 <terminateTask(int)+0xd0>
c00194f7:	83 ec 0c             	sub    esp,0xc
c00194fa:	68 e1 2e 02 c0       	push   0xc0022ee1
c00194ff:	e8 19 5d ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0019504:	58                   	pop    eax
c0019505:	8b 15 a8 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025ba8
c001950b:	52                   	push   edx
c001950c:	c6 05 ac 5b 02 c0 01 	mov    BYTE PTR ds:0xc0025bac,0x1
c0019513:	e8 61 fb ff ff       	call   c0019079 <unblockTask(ThreadControlBlock*)>
c0019518:	c7 04 24 fb 2e 02 c0 	mov    DWORD PTR [esp],0xc0022efb
c001951f:	e8 f9 5c ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0019524:	83 c4 10             	add    esp,0x10
c0019527:	e8 2b f5 ff ff       	call   c0018a57 <unlockScheduler()>
c001952c:	e8 f2 f8 ff ff       	call   c0018e23 <unlockStuff()>
c0019531:	83 ec 0c             	sub    esp,0xc
c0019534:	68 33 2f 02 c0       	push   0xc0022f33
c0019539:	e8 df 5c ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001953e:	83 c4 10             	add    esp,0x10
c0019541:	e8 0f f5 ff ff       	call   c0018a55 <lockScheduler()>
c0019546:	e8 53 f8 ff ff       	call   c0018d9e <schedule()>
c001954b:	e8 07 f5 ff ff       	call   c0018a57 <unlockScheduler()>
c0019550:	eb ef                	jmp    c0019541 <terminateTask(int)+0xbf>
c0019552:	83 ec 0c             	sub    esp,0xc
c0019555:	68 15 2f 02 c0       	push   0xc0022f15
c001955a:	e8 be 5c ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001955f:	83 c4 10             	add    esp,0x10
c0019562:	eb c3                	jmp    c0019527 <terminateTask(int)+0xa5>

c0019564 <Thr::terminateFromIRQ(int)>:
c0019564:	83 ec 18             	sub    esp,0x18
c0019567:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001956b:	50                   	push   eax
c001956c:	e8 11 ff ff ff       	call   c0019482 <terminateTask(int)>
c0019571:	90                   	nop

c0019572 <Semaphore::release()>:
c0019572:	83 ec 0c             	sub    esp,0xc
c0019575:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019579:	e8 fe f4 ff ff       	call   c0018a7c <lockStuff()>
c001957e:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019581:	85 c0                	test   eax,eax
c0019583:	74 1a                	je     c001959f <Semaphore::release()+0x2d>
c0019585:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0019588:	83 ec 0c             	sub    esp,0xc
c001958b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c001958e:	50                   	push   eax
c001958f:	e8 e5 fa ff ff       	call   c0019079 <unblockTask(ThreadControlBlock*)>
c0019594:	83 c4 10             	add    esp,0x10
c0019597:	83 c4 0c             	add    esp,0xc
c001959a:	e9 84 f8 ff ff       	jmp    c0018e23 <unlockStuff()>
c001959f:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00195a2:	48                   	dec    eax
c00195a3:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c00195a6:	83 c4 0c             	add    esp,0xc
c00195a9:	e9 75 f8 ff ff       	jmp    c0018e23 <unlockStuff()>

c00195ae <__static_initialization_and_destruction_0(int, int)>:
c00195ae:	83 ec 0c             	sub    esp,0xc
c00195b1:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00195b6:	0f 85 88 00 00 00    	jne    c0019644 <__static_initialization_and_destruction_0(int, int)+0x96>
c00195bc:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00195c4:	75 7e                	jne    c0019644 <__static_initialization_and_destruction_0(int, int)+0x96>
c00195c6:	83 ec 0c             	sub    esp,0xc
c00195c9:	68 e8 5b 02 c0       	push   0xc0025be8
c00195ce:	e8 c5 68 00 00       	call   c001fe98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00195d3:	83 c4 10             	add    esp,0x10
c00195d6:	83 ec 04             	sub    esp,0x4
c00195d9:	68 bc 3b 02 c0       	push   0xc0023bbc
c00195de:	68 e8 5b 02 c0       	push   0xc0025be8
c00195e3:	68 58 fe 01 c0       	push   0xc001fe58
c00195e8:	e8 86 5a ff ff       	call   c000f073 <__cxa_atexit>
c00195ed:	83 c4 10             	add    esp,0x10
c00195f0:	83 ec 0c             	sub    esp,0xc
c00195f3:	68 dc 5b 02 c0       	push   0xc0025bdc
c00195f8:	e8 9b 68 00 00       	call   c001fe98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00195fd:	83 c4 10             	add    esp,0x10
c0019600:	83 ec 04             	sub    esp,0x4
c0019603:	68 bc 3b 02 c0       	push   0xc0023bbc
c0019608:	68 dc 5b 02 c0       	push   0xc0025bdc
c001960d:	68 58 fe 01 c0       	push   0xc001fe58
c0019612:	e8 5c 5a ff ff       	call   c000f073 <__cxa_atexit>
c0019617:	83 c4 10             	add    esp,0x10
c001961a:	83 ec 0c             	sub    esp,0xc
c001961d:	68 d0 5b 02 c0       	push   0xc0025bd0
c0019622:	e8 71 68 00 00       	call   c001fe98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019627:	83 c4 10             	add    esp,0x10
c001962a:	83 ec 04             	sub    esp,0x4
c001962d:	68 bc 3b 02 c0       	push   0xc0023bbc
c0019632:	68 d0 5b 02 c0       	push   0xc0025bd0
c0019637:	68 58 fe 01 c0       	push   0xc001fe58
c001963c:	e8 32 5a ff ff       	call   c000f073 <__cxa_atexit>
c0019641:	83 c4 10             	add    esp,0x10
c0019644:	90                   	nop
c0019645:	83 c4 0c             	add    esp,0xc
c0019648:	c3                   	ret    

c0019649 <_GLOBAL__sub_I_kernelProcess>:
c0019649:	83 ec 0c             	sub    esp,0xc
c001964c:	83 ec 08             	sub    esp,0x8
c001964f:	68 ff ff 00 00       	push   0xffff
c0019654:	6a 01                	push   0x1
c0019656:	e8 53 ff ff ff       	call   c00195ae <__static_initialization_and_destruction_0(int, int)>
c001965b:	83 c4 10             	add    esp,0x10
c001965e:	83 c4 0c             	add    esp,0xc
c0019661:	c3                   	ret    

c0019662 <Vm::vm8086EntryPoint(void*)>:
c0019662:	83 ec 0c             	sub    esp,0xc
c0019665:	e8 ed f3 ff ff       	call   c0018a57 <unlockScheduler()>
c001966a:	fb                   	sti    
c001966b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019670:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0019674:	52                   	push   edx
c0019675:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0019679:	52                   	push   edx
c001967a:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001967e:	52                   	push   edx
c001967f:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0019683:	50                   	push   eax
c0019684:	e8 ec 6b fe ff       	call   c0000275 <goToVM86>
c0019689:	83 c4 1c             	add    esp,0x1c
c001968c:	c3                   	ret    

c001968d <Vm::inbv(unsigned short)>:
c001968d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019691:	ec                   	in     al,dx
c0019692:	c3                   	ret    

c0019693 <Vm::outbv(unsigned short, unsigned char)>:
c0019693:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019697:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001969b:	ee                   	out    dx,al
c001969c:	c3                   	ret    

c001969d <Vm::realToLinear(unsigned short, unsigned short)>:
c001969d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00196a2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00196a7:	c1 e0 04             	shl    eax,0x4
c00196aa:	01 d0                	add    eax,edx
c00196ac:	c3                   	ret    

c00196ad <Vm::getSegment(unsigned int)>:
c00196ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196b1:	c1 e8 10             	shr    eax,0x10
c00196b4:	c3                   	ret    

c00196b5 <Vm::getOffset(unsigned int)>:
c00196b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196b9:	c3                   	ret    

c00196ba <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00196ba:	55                   	push   ebp
c00196bb:	57                   	push   edi
c00196bc:	56                   	push   esi
c00196bd:	53                   	push   ebx
c00196be:	83 ec 2c             	sub    esp,0x2c
c00196c1:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00196c5:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00196c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00196cd:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00196d1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00196d5:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00196d9:	e8 77 f3 ff ff       	call   c0018a55 <lockScheduler()>
c00196de:	68 80 00 00 00       	push   0x80
c00196e3:	6a 00                	push   0x0
c00196e5:	68 62 96 01 c0       	push   0xc0019662
c00196ea:	55                   	push   ebp
c00196eb:	e8 9a f4 ff ff       	call   c0018b8a <Process::createThread(void (*)(void*), void*, int)>
c00196f0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00196f4:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c00196f8:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c00196fc:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c0019700:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c0019704:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0019708:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001970f:	e8 d4 59 ff ff       	call   c000f0e8 <operator new(unsigned long)>
c0019714:	83 c4 0c             	add    esp,0xc
c0019717:	55                   	push   ebp
c0019718:	89 c3                	mov    ebx,eax
c001971a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001971e:	50                   	push   eax
c001971f:	e8 30 60 ff ff       	call   c000f754 <File::File(char const*, Process*)>
c0019724:	83 c4 0c             	add    esp,0xc
c0019727:	8d 44 24 17          	lea    eax,[esp+0x17]
c001972b:	50                   	push   eax
c001972c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019730:	50                   	push   eax
c0019731:	53                   	push   ebx
c0019732:	e8 2d 63 ff ff       	call   c000fa64 <File::stat(unsigned long long*, bool*)>
c0019737:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c001973b:	83 c4 10             	add    esp,0x10
c001973e:	84 d2                	test   dl,dl
c0019740:	74 1c                	je     c001975e <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c0019742:	83 ec 0c             	sub    esp,0xc
c0019745:	68 f7 31 02 c0       	push   0xc00231f7
c001974a:	e8 fd c2 ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c001974f:	e8 03 f3 ff ff       	call   c0018a57 <unlockScheduler()>
c0019754:	83 c4 10             	add    esp,0x10
c0019757:	31 d2                	xor    edx,edx
c0019759:	e9 81 00 00 00       	jmp    c00197df <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001975e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019762:	51                   	push   ecx
c0019763:	51                   	push   ecx
c0019764:	6a 01                	push   0x1
c0019766:	53                   	push   ebx
c0019767:	e8 4c 60 ff ff       	call   c000f7b8 <File::open(FileOpenMode)>
c001976c:	83 c4 10             	add    esp,0x10
c001976f:	85 c0                	test   eax,eax
c0019771:	74 1b                	je     c001978e <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0019773:	83 ec 0c             	sub    esp,0xc
c0019776:	68 10 32 02 c0       	push   0xc0023210
c001977b:	e8 cc c2 ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c0019780:	e8 d2 f2 ff ff       	call   c0018a57 <unlockScheduler()>
c0019785:	83 c4 10             	add    esp,0x10
c0019788:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001978c:	eb 51                	jmp    c00197df <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001978e:	83 ec 0c             	sub    esp,0xc
c0019791:	0f b7 ff             	movzx  edi,di
c0019794:	6a 07                	push   0x7
c0019796:	68 00 01 00 00       	push   0x100
c001979b:	6a 00                	push   0x0
c001979d:	6a 00                	push   0x0
c001979f:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c00197a5:	e8 16 54 ff ff       	call   c000ebc0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00197aa:	83 c4 18             	add    esp,0x18
c00197ad:	0f b7 f6             	movzx  esi,si
c00197b0:	57                   	push   edi
c00197b1:	56                   	push   esi
c00197b2:	e8 e6 fe ff ff       	call   c001969d <Vm::realToLinear(unsigned short, unsigned short)>
c00197b7:	5a                   	pop    edx
c00197b8:	8b 13                	mov    edx,DWORD PTR [ebx]
c00197ba:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00197be:	51                   	push   ecx
c00197bf:	50                   	push   eax
c00197c0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00197c4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00197c8:	53                   	push   ebx
c00197c9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00197cc:	83 c4 14             	add    esp,0x14
c00197cf:	53                   	push   ebx
c00197d0:	e8 41 60 ff ff       	call   c000f816 <File::close()>
c00197d5:	e8 7d f2 ff ff       	call   c0018a57 <unlockScheduler()>
c00197da:	83 c4 10             	add    esp,0x10
c00197dd:	b2 01                	mov    dl,0x1
c00197df:	83 c4 2c             	add    esp,0x2c
c00197e2:	88 d0                	mov    al,dl
c00197e4:	5b                   	pop    ebx
c00197e5:	5e                   	pop    esi
c00197e6:	5f                   	pop    edi
c00197e7:	5d                   	pop    ebp
c00197e8:	c3                   	ret    

c00197e9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00197e9:	57                   	push   edi
c00197ea:	56                   	push   esi
c00197eb:	53                   	push   ebx
c00197ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00197f4:	83 e8 06             	sub    eax,0x6
c00197f7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00197fb:	0f b7 c0             	movzx  eax,ax
c00197fe:	50                   	push   eax
c00197ff:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0019804:	50                   	push   eax
c0019805:	e8 93 fe ff ff       	call   c001969d <Vm::realToLinear(unsigned short, unsigned short)>
c001980a:	5a                   	pop    edx
c001980b:	5e                   	pop    esi
c001980c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001980f:	8d 56 fa             	lea    edx,[esi-0x6]
c0019812:	81 e2 ff ff 00 00    	and    edx,0xffff
c0019818:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001981b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001981e:	83 c2 02             	add    edx,0x2
c0019821:	66 89 10             	mov    WORD PTR [eax],dx
c0019824:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0019827:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001982b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001982e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0019832:	89 d6                	mov    esi,edx
c0019834:	66 81 e6 ff fd       	and    si,0xfdff
c0019839:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001983f:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c0019843:	74 07                	je     c001984c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0019845:	89 d6                	mov    esi,edx
c0019847:	66 81 ce 00 02       	or     si,0x200
c001984c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0019850:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019855:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0019859:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019861:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0019864:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001986c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001986f:	5b                   	pop    ebx
c0019870:	5e                   	pop    esi
c0019871:	5f                   	pop    edi
c0019872:	c3                   	ret    

c0019873 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0019873:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019878:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001987d:	c1 e0 04             	shl    eax,0x4
c0019880:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019883:	c3                   	ret    

c0019884 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0019884:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019889:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001988e:	c1 e0 04             	shl    eax,0x4
c0019891:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019895:	c3                   	ret    

c0019896 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0019896:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001989b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00198a0:	c1 e0 04             	shl    eax,0x4
c00198a3:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00198a6:	c3                   	ret    

c00198a7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00198a7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00198ac:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00198b1:	c1 e0 04             	shl    eax,0x4
c00198b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00198b8:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00198bb:	c3                   	ret    

c00198bc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00198bc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00198c1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00198c6:	c1 e0 04             	shl    eax,0x4
c00198c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00198cd:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00198d1:	c3                   	ret    

c00198d2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00198d2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00198d7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00198dc:	c1 e0 04             	shl    eax,0x4
c00198df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00198e3:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00198e6:	c3                   	ret    

c00198e7 <Vm::faultHandler(regs*)>:
c00198e7:	55                   	push   ebp
c00198e8:	57                   	push   edi
c00198e9:	56                   	push   esi
c00198ea:	53                   	push   ebx
c00198eb:	83 ec 1c             	sub    esp,0x1c
c00198ee:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00198f2:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00198f6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00198f9:	52                   	push   edx
c00198fa:	0f b7 f0             	movzx  esi,ax
c00198fd:	0f b7 c0             	movzx  eax,ax
c0019900:	50                   	push   eax
c0019901:	e8 97 fd ff ff       	call   c001969d <Vm::realToLinear(unsigned short, unsigned short)>
c0019906:	5a                   	pop    edx
c0019907:	89 c7                	mov    edi,eax
c0019909:	59                   	pop    ecx
c001990a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001990d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019911:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0019914:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019919:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001991d:	0f b7 c5             	movzx  eax,bp
c0019920:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019924:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0019928:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001992c:	e8 6c fd ff ff       	call   c001969d <Vm::realToLinear(unsigned short, unsigned short)>
c0019931:	5a                   	pop    edx
c0019932:	59                   	pop    ecx
c0019933:	b1 06                	mov    cl,0x6
c0019935:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001993a:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001993f:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0019942:	80 fa 9d             	cmp    dl,0x9d
c0019945:	0f 84 1d 02 00 00    	je     c0019b68 <Vm::faultHandler(regs*)+0x281>
c001994b:	0f 87 8e 00 00 00    	ja     c00199df <Vm::faultHandler(regs*)+0xf8>
c0019951:	80 fa 66             	cmp    dl,0x66
c0019954:	0f 84 89 01 00 00    	je     c0019ae3 <Vm::faultHandler(regs*)+0x1fc>
c001995a:	77 44                	ja     c00199a0 <Vm::faultHandler(regs*)+0xb9>
c001995c:	80 fa 36             	cmp    dl,0x36
c001995f:	0f 84 74 01 00 00    	je     c0019ad9 <Vm::faultHandler(regs*)+0x1f2>
c0019965:	77 1a                	ja     c0019981 <Vm::faultHandler(regs*)+0x9a>
c0019967:	80 fa 26             	cmp    dl,0x26
c001996a:	0f 84 4b 01 00 00    	je     c0019abb <Vm::faultHandler(regs*)+0x1d4>
c0019970:	80 fa 2e             	cmp    dl,0x2e
c0019973:	0f 85 4a 05 00 00    	jne    c0019ec3 <Vm::faultHandler(regs*)+0x5dc>
c0019979:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001997c:	31 c9                	xor    ecx,ecx
c001997e:	47                   	inc    edi
c001997f:	eb be                	jmp    c001993f <Vm::faultHandler(regs*)+0x58>
c0019981:	80 fa 64             	cmp    dl,0x64
c0019984:	0f 84 3b 01 00 00    	je     c0019ac5 <Vm::faultHandler(regs*)+0x1de>
c001998a:	0f 87 3f 01 00 00    	ja     c0019acf <Vm::faultHandler(regs*)+0x1e8>
c0019990:	80 fa 3e             	cmp    dl,0x3e
c0019993:	0f 85 2a 05 00 00    	jne    c0019ec3 <Vm::faultHandler(regs*)+0x5dc>
c0019999:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001999c:	b1 01                	mov    cl,0x1
c001999e:	eb de                	jmp    c001997e <Vm::faultHandler(regs*)+0x97>
c00199a0:	80 fa 6d             	cmp    dl,0x6d
c00199a3:	0f 84 bf 02 00 00    	je     c0019c68 <Vm::faultHandler(regs*)+0x381>
c00199a9:	77 17                	ja     c00199c2 <Vm::faultHandler(regs*)+0xdb>
c00199ab:	80 fa 67             	cmp    dl,0x67
c00199ae:	0f 84 3c 01 00 00    	je     c0019af0 <Vm::faultHandler(regs*)+0x209>
c00199b4:	80 fa 6c             	cmp    dl,0x6c
c00199b7:	0f 84 5d 02 00 00    	je     c0019c1a <Vm::faultHandler(regs*)+0x333>
c00199bd:	e9 01 05 00 00       	jmp    c0019ec3 <Vm::faultHandler(regs*)+0x5dc>
c00199c2:	80 fa 6f             	cmp    dl,0x6f
c00199c5:	0f 84 8b 03 00 00    	je     c0019d56 <Vm::faultHandler(regs*)+0x46f>
c00199cb:	0f 82 0f 03 00 00    	jb     c0019ce0 <Vm::faultHandler(regs*)+0x3f9>
c00199d1:	80 fa 9c             	cmp    dl,0x9c
c00199d4:	0f 84 23 01 00 00    	je     c0019afd <Vm::faultHandler(regs*)+0x216>
c00199da:	e9 e4 04 00 00       	jmp    c0019ec3 <Vm::faultHandler(regs*)+0x5dc>
c00199df:	80 fa ec             	cmp    dl,0xec
c00199e2:	0f 84 7f 04 00 00    	je     c0019e67 <Vm::faultHandler(regs*)+0x580>
c00199e8:	77 7b                	ja     c0019a65 <Vm::faultHandler(regs*)+0x17e>
c00199ea:	80 fa e4             	cmp    dl,0xe4
c00199ed:	0f 84 fe 03 00 00    	je     c0019df1 <Vm::faultHandler(regs*)+0x50a>
c00199f3:	77 53                	ja     c0019a48 <Vm::faultHandler(regs*)+0x161>
c00199f5:	80 fa cd             	cmp    dl,0xcd
c00199f8:	0f 84 cd 01 00 00    	je     c0019bcb <Vm::faultHandler(regs*)+0x2e4>
c00199fe:	80 fa cf             	cmp    dl,0xcf
c0019a01:	0f 85 bc 04 00 00    	jne    c0019ec3 <Vm::faultHandler(regs*)+0x5dc>
c0019a07:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019a0a:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0019a0d:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0019a11:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0019a14:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0019a18:	81 ca 00 02 02 00    	or     edx,0x20200
c0019a1e:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019a21:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0019a25:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019a2b:	66 c1 e8 09          	shr    ax,0x9
c0019a2f:	83 e0 01             	and    eax,0x1
c0019a32:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019a35:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019a38:	83 c0 06             	add    eax,0x6
c0019a3b:	25 ff ff 00 00       	and    eax,0xffff
c0019a40:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019a43:	e9 77 04 00 00       	jmp    c0019ebf <Vm::faultHandler(regs*)+0x5d8>
c0019a48:	80 fa e6             	cmp    dl,0xe6
c0019a4b:	0f 84 ea 03 00 00    	je     c0019e3b <Vm::faultHandler(regs*)+0x554>
c0019a51:	0f 82 b6 03 00 00    	jb     c0019e0d <Vm::faultHandler(regs*)+0x526>
c0019a57:	80 fa e7             	cmp    dl,0xe7
c0019a5a:	0f 84 f2 03 00 00    	je     c0019e52 <Vm::faultHandler(regs*)+0x56b>
c0019a60:	e9 5e 04 00 00       	jmp    c0019ec3 <Vm::faultHandler(regs*)+0x5dc>
c0019a65:	80 fa ef             	cmp    dl,0xef
c0019a68:	0f 84 3c 04 00 00    	je     c0019eaa <Vm::faultHandler(regs*)+0x5c3>
c0019a6e:	77 28                	ja     c0019a98 <Vm::faultHandler(regs*)+0x1b1>
c0019a70:	80 fa ed             	cmp    dl,0xed
c0019a73:	0f 84 0a 04 00 00    	je     c0019e83 <Vm::faultHandler(regs*)+0x59c>
c0019a79:	80 fa ee             	cmp    dl,0xee
c0019a7c:	0f 85 41 04 00 00    	jne    c0019ec3 <Vm::faultHandler(regs*)+0x5dc>
c0019a82:	50                   	push   eax
c0019a83:	50                   	push   eax
c0019a84:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019a88:	50                   	push   eax
c0019a89:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019a8d:	50                   	push   eax
c0019a8e:	e8 00 fc ff ff       	call   c0019693 <Vm::outbv(unsigned short, unsigned char)>
c0019a93:	e9 0a 04 00 00       	jmp    c0019ea2 <Vm::faultHandler(regs*)+0x5bb>
c0019a98:	80 fa fa             	cmp    dl,0xfa
c0019a9b:	0f 84 5d 01 00 00    	je     c0019bfe <Vm::faultHandler(regs*)+0x317>
c0019aa1:	80 fa fb             	cmp    dl,0xfb
c0019aa4:	0f 84 62 01 00 00    	je     c0019c0c <Vm::faultHandler(regs*)+0x325>
c0019aaa:	80 fa f3             	cmp    dl,0xf3
c0019aad:	0f 85 10 04 00 00    	jne    c0019ec3 <Vm::faultHandler(regs*)+0x5dc>
c0019ab3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ab6:	e9 c3 fe ff ff       	jmp    c001997e <Vm::faultHandler(regs*)+0x97>
c0019abb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019abe:	b1 02                	mov    cl,0x2
c0019ac0:	e9 b9 fe ff ff       	jmp    c001997e <Vm::faultHandler(regs*)+0x97>
c0019ac5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ac8:	b1 03                	mov    cl,0x3
c0019aca:	e9 af fe ff ff       	jmp    c001997e <Vm::faultHandler(regs*)+0x97>
c0019acf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ad2:	b1 04                	mov    cl,0x4
c0019ad4:	e9 a5 fe ff ff       	jmp    c001997e <Vm::faultHandler(regs*)+0x97>
c0019ad9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019adc:	b1 05                	mov    cl,0x5
c0019ade:	e9 9b fe ff ff       	jmp    c001997e <Vm::faultHandler(regs*)+0x97>
c0019ae3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ae6:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019aeb:	e9 8e fe ff ff       	jmp    c001997e <Vm::faultHandler(regs*)+0x97>
c0019af0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019af3:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0019af8:	e9 81 fe ff ff       	jmp    c001997e <Vm::faultHandler(regs*)+0x97>
c0019afd:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019b00:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019b04:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019b09:	74 30                	je     c0019b3b <Vm::faultHandler(regs*)+0x254>
c0019b0b:	83 e9 04             	sub    ecx,0x4
c0019b0e:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019b14:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019b1a:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019b1d:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019b20:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019b26:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019b2a:	0f 84 8c 03 00 00    	je     c0019ebc <Vm::faultHandler(regs*)+0x5d5>
c0019b30:	80 ce 02             	or     dh,0x2
c0019b33:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019b36:	e9 81 03 00 00       	jmp    c0019ebc <Vm::faultHandler(regs*)+0x5d5>
c0019b3b:	83 e9 02             	sub    ecx,0x2
c0019b3e:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019b44:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019b47:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019b4b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019b51:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019b55:	74 05                	je     c0019b5c <Vm::faultHandler(regs*)+0x275>
c0019b57:	80 ce 02             	or     dh,0x2
c0019b5a:	eb 03                	jmp    c0019b5f <Vm::faultHandler(regs*)+0x278>
c0019b5c:	80 e6 fd             	and    dh,0xfd
c0019b5f:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019b63:	e9 54 03 00 00       	jmp    c0019ebc <Vm::faultHandler(regs*)+0x5d5>
c0019b68:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019b6d:	74 2a                	je     c0019b99 <Vm::faultHandler(regs*)+0x2b2>
c0019b6f:	8b 10                	mov    edx,DWORD PTR [eax]
c0019b71:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019b77:	81 ca 00 02 02 00    	or     edx,0x20200
c0019b7d:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019b80:	8b 00                	mov    eax,DWORD PTR [eax]
c0019b82:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019b88:	c1 e8 09             	shr    eax,0x9
c0019b8b:	83 e0 01             	and    eax,0x1
c0019b8e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019b91:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019b94:	83 c0 04             	add    eax,0x4
c0019b97:	eb 25                	jmp    c0019bbe <Vm::faultHandler(regs*)+0x2d7>
c0019b99:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019b9c:	81 ca 00 02 02 00    	or     edx,0x20200
c0019ba2:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019ba5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019ba8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019bae:	66 c1 e8 09          	shr    ax,0x9
c0019bb2:	83 e0 01             	and    eax,0x1
c0019bb5:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019bb8:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019bbb:	83 c0 02             	add    eax,0x2
c0019bbe:	25 ff ff 00 00       	and    eax,0xffff
c0019bc3:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019bc6:	e9 f1 02 00 00       	jmp    c0019ebc <Vm::faultHandler(regs*)+0x5d5>
c0019bcb:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019bcf:	3c ff                	cmp    al,0xff
c0019bd1:	75 10                	jne    c0019be3 <Vm::faultHandler(regs*)+0x2fc>
c0019bd3:	83 ec 0c             	sub    esp,0xc
c0019bd6:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0019bd9:	e8 86 f9 ff ff       	call   c0019564 <Thr::terminateFromIRQ(int)>
c0019bde:	e9 c2 02 00 00       	jmp    c0019ea5 <Vm::faultHandler(regs*)+0x5be>
c0019be3:	83 ec 0c             	sub    esp,0xc
c0019be6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019bea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019bee:	57                   	push   edi
c0019bef:	50                   	push   eax
c0019bf0:	53                   	push   ebx
c0019bf1:	e8 f3 fb ff ff       	call   c00197e9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0019bf6:	83 c4 20             	add    esp,0x20
c0019bf9:	e9 c1 02 00 00       	jmp    c0019ebf <Vm::faultHandler(regs*)+0x5d8>
c0019bfe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019c03:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0019c07:	e9 b0 02 00 00       	jmp    c0019ebc <Vm::faultHandler(regs*)+0x5d5>
c0019c0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019c11:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0019c15:	e9 a2 02 00 00       	jmp    c0019ebc <Vm::faultHandler(regs*)+0x5d5>
c0019c1a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019c1f:	74 0d                	je     c0019c2e <Vm::faultHandler(regs*)+0x347>
c0019c21:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0019c28:	0f 87 e9 02 00 00    	ja     c0019f17 <Vm::faultHandler(regs*)+0x630>
c0019c2e:	83 ec 0c             	sub    esp,0xc
c0019c31:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0019c34:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019c38:	50                   	push   eax
c0019c39:	e8 4f fa ff ff       	call   c001968d <Vm::inbv(unsigned short)>
c0019c3e:	83 c4 0c             	add    esp,0xc
c0019c41:	0f b6 c0             	movzx  eax,al
c0019c44:	50                   	push   eax
c0019c45:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0019c49:	0f b7 c9             	movzx  ecx,cx
c0019c4c:	50                   	push   eax
c0019c4d:	51                   	push   ecx
c0019c4e:	e8 54 fc ff ff       	call   c00198a7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019c53:	83 c4 10             	add    esp,0x10
c0019c56:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019c59:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019c5d:	74 03                	je     c0019c62 <Vm::faultHandler(regs*)+0x37b>
c0019c5f:	48                   	dec    eax
c0019c60:	eb 01                	jmp    c0019c63 <Vm::faultHandler(regs*)+0x37c>
c0019c62:	40                   	inc    eax
c0019c63:	0f b7 c0             	movzx  eax,ax
c0019c66:	eb 70                	jmp    c0019cd8 <Vm::faultHandler(regs*)+0x3f1>
c0019c68:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019c6b:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0019c6e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019c73:	74 0c                	je     c0019c81 <Vm::faultHandler(regs*)+0x39a>
c0019c75:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019c7b:	0f 87 96 02 00 00    	ja     c0019f17 <Vm::faultHandler(regs*)+0x630>
c0019c81:	0f b7 c9             	movzx  ecx,cx
c0019c84:	0f b7 f6             	movzx  esi,si
c0019c87:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019c8a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c8f:	74 20                	je     c0019cb1 <Vm::faultHandler(regs*)+0x3ca>
c0019c91:	ed                   	in     eax,dx
c0019c92:	55                   	push   ebp
c0019c93:	50                   	push   eax
c0019c94:	51                   	push   ecx
c0019c95:	56                   	push   esi
c0019c96:	e8 37 fc ff ff       	call   c00198d2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019c9b:	83 c4 10             	add    esp,0x10
c0019c9e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019ca1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019ca5:	74 05                	je     c0019cac <Vm::faultHandler(regs*)+0x3c5>
c0019ca7:	83 e8 04             	sub    eax,0x4
c0019caa:	eb 27                	jmp    c0019cd3 <Vm::faultHandler(regs*)+0x3ec>
c0019cac:	83 c0 04             	add    eax,0x4
c0019caf:	eb 22                	jmp    c0019cd3 <Vm::faultHandler(regs*)+0x3ec>
c0019cb1:	66 ed                	in     ax,dx
c0019cb3:	0f b7 c0             	movzx  eax,ax
c0019cb6:	57                   	push   edi
c0019cb7:	50                   	push   eax
c0019cb8:	51                   	push   ecx
c0019cb9:	56                   	push   esi
c0019cba:	e8 fd fb ff ff       	call   c00198bc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019cbf:	83 c4 10             	add    esp,0x10
c0019cc2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019cc5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019cc9:	74 05                	je     c0019cd0 <Vm::faultHandler(regs*)+0x3e9>
c0019ccb:	83 e8 02             	sub    eax,0x2
c0019cce:	eb 03                	jmp    c0019cd3 <Vm::faultHandler(regs*)+0x3ec>
c0019cd0:	83 c0 02             	add    eax,0x2
c0019cd3:	25 ff ff 00 00       	and    eax,0xffff
c0019cd8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019cdb:	e9 dc 01 00 00       	jmp    c0019ebc <Vm::faultHandler(regs*)+0x5d5>
c0019ce0:	49                   	dec    ecx
c0019ce1:	80 f9 05             	cmp    cl,0x5
c0019ce4:	77 24                	ja     c0019d0a <Vm::faultHandler(regs*)+0x423>
c0019ce6:	0f b6 c9             	movzx  ecx,cl
c0019ce9:	ff 24 8d 58 32 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdcda8]
c0019cf0:	0f b7 f5             	movzx  esi,bp
c0019cf3:	eb 15                	jmp    c0019d0a <Vm::faultHandler(regs*)+0x423>
c0019cf5:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0019cf9:	eb 0f                	jmp    c0019d0a <Vm::faultHandler(regs*)+0x423>
c0019cfb:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0019cff:	eb 09                	jmp    c0019d0a <Vm::faultHandler(regs*)+0x423>
c0019d01:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0019d05:	eb 03                	jmp    c0019d0a <Vm::faultHandler(regs*)+0x423>
c0019d07:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0019d0a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019d0d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019d12:	74 0b                	je     c0019d1f <Vm::faultHandler(regs*)+0x438>
c0019d14:	3d ff ff 00 00       	cmp    eax,0xffff
c0019d19:	0f 87 f8 01 00 00    	ja     c0019f17 <Vm::faultHandler(regs*)+0x630>
c0019d1f:	52                   	push   edx
c0019d20:	52                   	push   edx
c0019d21:	0f b7 c0             	movzx  eax,ax
c0019d24:	50                   	push   eax
c0019d25:	56                   	push   esi
c0019d26:	e8 48 fb ff ff       	call   c0019873 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019d2b:	59                   	pop    ecx
c0019d2c:	5e                   	pop    esi
c0019d2d:	0f b6 c0             	movzx  eax,al
c0019d30:	50                   	push   eax
c0019d31:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019d35:	50                   	push   eax
c0019d36:	e8 58 f9 ff ff       	call   c0019693 <Vm::outbv(unsigned short, unsigned char)>
c0019d3b:	83 c4 10             	add    esp,0x10
c0019d3e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019d41:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019d45:	74 03                	je     c0019d4a <Vm::faultHandler(regs*)+0x463>
c0019d47:	48                   	dec    eax
c0019d48:	eb 01                	jmp    c0019d4b <Vm::faultHandler(regs*)+0x464>
c0019d4a:	40                   	inc    eax
c0019d4b:	0f b7 c0             	movzx  eax,ax
c0019d4e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019d51:	e9 66 01 00 00       	jmp    c0019ebc <Vm::faultHandler(regs*)+0x5d5>
c0019d56:	49                   	dec    ecx
c0019d57:	80 f9 05             	cmp    cl,0x5
c0019d5a:	77 1f                	ja     c0019d7b <Vm::faultHandler(regs*)+0x494>
c0019d5c:	0f b6 c9             	movzx  ecx,cl
c0019d5f:	ff 24 8d 70 32 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdcd90]
c0019d66:	89 ee                	mov    esi,ebp
c0019d68:	eb 11                	jmp    c0019d7b <Vm::faultHandler(regs*)+0x494>
c0019d6a:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0019d6d:	eb 0c                	jmp    c0019d7b <Vm::faultHandler(regs*)+0x494>
c0019d6f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019d72:	eb 07                	jmp    c0019d7b <Vm::faultHandler(regs*)+0x494>
c0019d74:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0019d77:	eb 02                	jmp    c0019d7b <Vm::faultHandler(regs*)+0x494>
c0019d79:	8b 33                	mov    esi,DWORD PTR [ebx]
c0019d7b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0019d7e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019d83:	74 0c                	je     c0019d91 <Vm::faultHandler(regs*)+0x4aa>
c0019d85:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019d8b:	0f 87 86 01 00 00    	ja     c0019f17 <Vm::faultHandler(regs*)+0x630>
c0019d91:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0019d94:	0f b7 d6             	movzx  edx,si
c0019d97:	81 e7 00 04 00 00    	and    edi,0x400
c0019d9d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019da0:	0f b7 c1             	movzx  eax,cx
c0019da3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019da8:	74 1d                	je     c0019dc7 <Vm::faultHandler(regs*)+0x4e0>
c0019daa:	55                   	push   ebp
c0019dab:	55                   	push   ebp
c0019dac:	50                   	push   eax
c0019dad:	52                   	push   edx
c0019dae:	e8 e3 fa ff ff       	call   c0019896 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019db3:	83 c4 10             	add    esp,0x10
c0019db6:	89 f2                	mov    edx,esi
c0019db8:	ef                   	out    dx,eax
c0019db9:	85 ff                	test   edi,edi
c0019dbb:	74 05                	je     c0019dc2 <Vm::faultHandler(regs*)+0x4db>
c0019dbd:	83 e9 04             	sub    ecx,0x4
c0019dc0:	eb 21                	jmp    c0019de3 <Vm::faultHandler(regs*)+0x4fc>
c0019dc2:	83 c1 04             	add    ecx,0x4
c0019dc5:	eb 1c                	jmp    c0019de3 <Vm::faultHandler(regs*)+0x4fc>
c0019dc7:	55                   	push   ebp
c0019dc8:	55                   	push   ebp
c0019dc9:	50                   	push   eax
c0019dca:	52                   	push   edx
c0019dcb:	e8 b4 fa ff ff       	call   c0019884 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019dd0:	83 c4 10             	add    esp,0x10
c0019dd3:	89 f2                	mov    edx,esi
c0019dd5:	66 ef                	out    dx,ax
c0019dd7:	85 ff                	test   edi,edi
c0019dd9:	74 05                	je     c0019de0 <Vm::faultHandler(regs*)+0x4f9>
c0019ddb:	83 e9 02             	sub    ecx,0x2
c0019dde:	eb 03                	jmp    c0019de3 <Vm::faultHandler(regs*)+0x4fc>
c0019de0:	83 c1 02             	add    ecx,0x2
c0019de3:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019de9:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0019dec:	e9 cb 00 00 00       	jmp    c0019ebc <Vm::faultHandler(regs*)+0x5d5>
c0019df1:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019df8:	83 ec 0c             	sub    esp,0xc
c0019dfb:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019dff:	50                   	push   eax
c0019e00:	e8 88 f8 ff ff       	call   c001968d <Vm::inbv(unsigned short)>
c0019e05:	0f b6 c0             	movzx  eax,al
c0019e08:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019e0b:	eb 3f                	jmp    c0019e4c <Vm::faultHandler(regs*)+0x565>
c0019e0d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019e12:	74 07                	je     c0019e1b <Vm::faultHandler(regs*)+0x534>
c0019e14:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019e18:	ed                   	in     eax,dx
c0019e19:	eb 14                	jmp    c0019e2f <Vm::faultHandler(regs*)+0x548>
c0019e1b:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0019e1e:	66 31 c9             	xor    cx,cx
c0019e21:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0019e24:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019e28:	66 ed                	in     ax,dx
c0019e2a:	0f b7 c0             	movzx  eax,ax
c0019e2d:	09 c8                	or     eax,ecx
c0019e2f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019e32:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019e36:	e9 84 00 00 00       	jmp    c0019ebf <Vm::faultHandler(regs*)+0x5d8>
c0019e3b:	52                   	push   edx
c0019e3c:	52                   	push   edx
c0019e3d:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019e41:	50                   	push   eax
c0019e42:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019e46:	50                   	push   eax
c0019e47:	e8 47 f8 ff ff       	call   c0019693 <Vm::outbv(unsigned short, unsigned char)>
c0019e4c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019e50:	eb 53                	jmp    c0019ea5 <Vm::faultHandler(regs*)+0x5be>
c0019e52:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019e55:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019e59:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019e5e:	74 03                	je     c0019e63 <Vm::faultHandler(regs*)+0x57c>
c0019e60:	ef                   	out    dx,eax
c0019e61:	eb cf                	jmp    c0019e32 <Vm::faultHandler(regs*)+0x54b>
c0019e63:	66 ef                	out    dx,ax
c0019e65:	eb cb                	jmp    c0019e32 <Vm::faultHandler(regs*)+0x54b>
c0019e67:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019e6e:	83 ec 0c             	sub    esp,0xc
c0019e71:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019e75:	50                   	push   eax
c0019e76:	e8 12 f8 ff ff       	call   c001968d <Vm::inbv(unsigned short)>
c0019e7b:	0f b6 c0             	movzx  eax,al
c0019e7e:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019e81:	eb 1f                	jmp    c0019ea2 <Vm::faultHandler(regs*)+0x5bb>
c0019e83:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019e86:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019e8b:	74 03                	je     c0019e90 <Vm::faultHandler(regs*)+0x5a9>
c0019e8d:	ed                   	in     eax,dx
c0019e8e:	eb 0d                	jmp    c0019e9d <Vm::faultHandler(regs*)+0x5b6>
c0019e90:	66 ed                	in     ax,dx
c0019e92:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019e95:	66 31 d2             	xor    dx,dx
c0019e98:	0f b7 c0             	movzx  eax,ax
c0019e9b:	09 d0                	or     eax,edx
c0019e9d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019ea0:	eb 1a                	jmp    c0019ebc <Vm::faultHandler(regs*)+0x5d5>
c0019ea2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ea5:	83 c4 10             	add    esp,0x10
c0019ea8:	eb 15                	jmp    c0019ebf <Vm::faultHandler(regs*)+0x5d8>
c0019eaa:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019ead:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019eb0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019eb5:	74 03                	je     c0019eba <Vm::faultHandler(regs*)+0x5d3>
c0019eb7:	ef                   	out    dx,eax
c0019eb8:	eb 02                	jmp    c0019ebc <Vm::faultHandler(regs*)+0x5d5>
c0019eba:	66 ef                	out    dx,ax
c0019ebc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ebf:	b0 01                	mov    al,0x1
c0019ec1:	eb 56                	jmp    c0019f19 <Vm::faultHandler(regs*)+0x632>
c0019ec3:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0019ec7:	50                   	push   eax
c0019ec8:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0019ecc:	50                   	push   eax
c0019ecd:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0019ed1:	50                   	push   eax
c0019ed2:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0019ed6:	50                   	push   eax
c0019ed7:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019edb:	50                   	push   eax
c0019edc:	52                   	push   edx
c0019edd:	52                   	push   edx
c0019ede:	68 29 32 02 c0       	push   0xc0023229
c0019ee3:	e8 35 53 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c0019ee8:	83 c4 20             	add    esp,0x20
c0019eeb:	83 ec 0c             	sub    esp,0xc
c0019eee:	6a 60                	push   0x60
c0019ef0:	e8 98 f7 ff ff       	call   c001968d <Vm::inbv(unsigned short)>
c0019ef5:	83 c4 10             	add    esp,0x10
c0019ef8:	3c 1c                	cmp    al,0x1c
c0019efa:	74 04                	je     c0019f00 <Vm::faultHandler(regs*)+0x619>
c0019efc:	3c 5a                	cmp    al,0x5a
c0019efe:	75 eb                	jne    c0019eeb <Vm::faultHandler(regs*)+0x604>
c0019f00:	3c 1c                	cmp    al,0x1c
c0019f02:	74 04                	je     c0019f08 <Vm::faultHandler(regs*)+0x621>
c0019f04:	3c 5a                	cmp    al,0x5a
c0019f06:	75 0f                	jne    c0019f17 <Vm::faultHandler(regs*)+0x630>
c0019f08:	83 ec 0c             	sub    esp,0xc
c0019f0b:	6a 60                	push   0x60
c0019f0d:	e8 7b f7 ff ff       	call   c001968d <Vm::inbv(unsigned short)>
c0019f12:	83 c4 10             	add    esp,0x10
c0019f15:	eb e9                	jmp    c0019f00 <Vm::faultHandler(regs*)+0x619>
c0019f17:	31 c0                	xor    eax,eax
c0019f19:	83 c4 1c             	add    esp,0x1c
c0019f1c:	5b                   	pop    ebx
c0019f1d:	5e                   	pop    esi
c0019f1e:	5f                   	pop    edi
c0019f1f:	5d                   	pop    ebp
c0019f20:	c3                   	ret    
c0019f21:	90                   	nop

c0019f22 <FAT::getName()>:
c0019f22:	b8 88 32 02 c0       	mov    eax,0xc0023288
c0019f27:	c3                   	ret    

c0019f28 <FAT::tell(void*, unsigned long long*)>:
c0019f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019f2d:	75 06                	jne    c0019f35 <FAT::tell(void*, unsigned long long*)+0xd>
c0019f2f:	b8 04 00 00 00       	mov    eax,0x4
c0019f34:	c3                   	ret    
c0019f35:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019f3a:	75 06                	jne    c0019f42 <FAT::tell(void*, unsigned long long*)+0x1a>
c0019f3c:	b8 04 00 00 00       	mov    eax,0x4
c0019f41:	c3                   	ret    
c0019f42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f46:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0019f49:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019f4c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f50:	89 01                	mov    DWORD PTR [ecx],eax
c0019f52:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019f55:	b8 00 00 00 00       	mov    eax,0x0
c0019f5a:	c3                   	ret    
c0019f5b:	90                   	nop

c0019f5c <FAT::stat(void*, unsigned long long*)>:
c0019f5c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019f61:	75 06                	jne    c0019f69 <FAT::stat(void*, unsigned long long*)+0xd>
c0019f63:	b8 04 00 00 00       	mov    eax,0x4
c0019f68:	c3                   	ret    
c0019f69:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019f6e:	75 06                	jne    c0019f76 <FAT::stat(void*, unsigned long long*)+0x1a>
c0019f70:	b8 04 00 00 00       	mov    eax,0x4
c0019f75:	c3                   	ret    
c0019f76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f7a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019f7d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019f80:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f84:	89 01                	mov    DWORD PTR [ecx],eax
c0019f86:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019f89:	b8 00 00 00 00       	mov    eax,0x0
c0019f8e:	c3                   	ret    
c0019f8f:	90                   	nop

c0019f90 <FAT::~FAT()>:
c0019f90:	83 ec 0c             	sub    esp,0xc
c0019f93:	ba 0c 33 02 c0       	mov    edx,0xc002330c
c0019f98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f9c:	89 10                	mov    DWORD PTR [eax],edx
c0019f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fa2:	83 ec 0c             	sub    esp,0xc
c0019fa5:	50                   	push   eax
c0019fa6:	e8 a3 55 ff ff       	call   c000f54e <Filesystem::~Filesystem()>
c0019fab:	83 c4 10             	add    esp,0x10
c0019fae:	90                   	nop
c0019faf:	83 c4 0c             	add    esp,0xc
c0019fb2:	c3                   	ret    
c0019fb3:	90                   	nop

c0019fb4 <FAT::~FAT()>:
c0019fb4:	83 ec 0c             	sub    esp,0xc
c0019fb7:	83 ec 0c             	sub    esp,0xc
c0019fba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fbe:	e8 cd ff ff ff       	call   c0019f90 <FAT::~FAT()>
c0019fc3:	83 c4 10             	add    esp,0x10
c0019fc6:	83 ec 08             	sub    esp,0x8
c0019fc9:	6a 08                	push   0x8
c0019fcb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fcf:	e8 23 51 ff ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c0019fd4:	83 c4 10             	add    esp,0x10
c0019fd7:	83 c4 0c             	add    esp,0xc
c0019fda:	c3                   	ret    
c0019fdb:	90                   	nop

c0019fdc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019fdc:	83 ec 1c             	sub    esp,0x1c
c0019fdf:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019fe6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019feb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019fef:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c0019ff6:	83 f8 ff             	cmp    eax,0xffffffff
c0019ff9:	75 34                	jne    c001a02f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0019ffb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019fff:	88 c2                	mov    dl,al
c001a001:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a006:	01 d0                	add    eax,edx
c001a008:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a00c:	8b 15 20 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c20
c001a012:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a016:	89 14 85 40 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3c0],edx
c001a01d:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a022:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a026:	89 14 85 c0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda340],edx
c001a02d:	eb 17                	jmp    c001a046 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001a02f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a033:	88 c2                	mov    dl,al
c001a035:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a039:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a040:	01 d0                	add    eax,edx
c001a042:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a046:	83 ec 04             	sub    esp,0x4
c001a049:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a04d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a051:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a055:	50                   	push   eax
c001a056:	e8 85 ca fe ff       	call   c0006ae0 <f_getlabel>
c001a05b:	83 c4 10             	add    esp,0x10
c001a05e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a062:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a067:	75 07                	jne    c001a070 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001a069:	b8 00 00 00 00       	mov    eax,0x0
c001a06e:	eb 05                	jmp    c001a075 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001a070:	b8 01 00 00 00       	mov    eax,0x1
c001a075:	83 c4 1c             	add    esp,0x1c
c001a078:	c3                   	ret    
c001a079:	90                   	nop

c001a07a <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a07a:	57                   	push   edi
c001a07b:	83 ec 58             	sub    esp,0x58
c001a07e:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a086:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a08a:	b8 00 00 00 00       	mov    eax,0x0
c001a08f:	b9 0f 00 00 00       	mov    ecx,0xf
c001a094:	fc                   	cld    
c001a095:	89 d7                	mov    edi,edx
c001a097:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a099:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a09d:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a0a4:	83 f8 ff             	cmp    eax,0xffffffff
c001a0a7:	75 34                	jne    c001a0dd <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001a0a9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a0ad:	88 c2                	mov    dl,al
c001a0af:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a0b4:	01 d0                	add    eax,edx
c001a0b6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a0ba:	8b 15 20 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c20
c001a0c0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a0c4:	89 14 85 40 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3c0],edx
c001a0cb:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a0d0:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a0d4:	89 14 85 c0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda340],edx
c001a0db:	eb 17                	jmp    c001a0f4 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001a0dd:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a0e1:	88 c2                	mov    dl,al
c001a0e3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a0e7:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a0ee:	01 d0                	add    eax,edx
c001a0f0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a0f4:	83 ec 08             	sub    esp,0x8
c001a0f7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a0fb:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a0ff:	50                   	push   eax
c001a100:	e8 1e 67 fe ff       	call   c0000823 <strcat>
c001a105:	83 c4 10             	add    esp,0x10
c001a108:	83 ec 0c             	sub    esp,0xc
c001a10b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a10f:	50                   	push   eax
c001a110:	e8 bf cb fe ff       	call   c0006cd4 <f_setlabel>
c001a115:	83 c4 10             	add    esp,0x10
c001a118:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a11c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a121:	75 07                	jne    c001a12a <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001a123:	b8 00 00 00 00       	mov    eax,0x0
c001a128:	eb 05                	jmp    c001a12f <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001a12a:	b8 01 00 00 00       	mov    eax,0x1
c001a12f:	83 c4 58             	add    esp,0x58
c001a132:	5f                   	pop    edi
c001a133:	c3                   	ret    

c001a134 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a134:	83 ec 2c             	sub    esp,0x2c
c001a137:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a13f:	83 ec 08             	sub    esp,0x8
c001a142:	68 ac 32 02 c0       	push   0xc00232ac
c001a147:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a14b:	e8 6d 66 fe ff       	call   c00007bd <strcmp>
c001a150:	83 c4 10             	add    esp,0x10
c001a153:	85 c0                	test   eax,eax
c001a155:	0f 94 c0             	sete   al
c001a158:	84 c0                	test   al,al
c001a15a:	74 0d                	je     c001a169 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001a15c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a164:	e9 a6 00 00 00       	jmp    c001a20f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a169:	83 ec 08             	sub    esp,0x8
c001a16c:	68 9e 32 02 c0       	push   0xc002329e
c001a171:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a175:	e8 43 66 fe ff       	call   c00007bd <strcmp>
c001a17a:	83 c4 10             	add    esp,0x10
c001a17d:	85 c0                	test   eax,eax
c001a17f:	0f 94 c0             	sete   al
c001a182:	84 c0                	test   al,al
c001a184:	74 0a                	je     c001a190 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001a186:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a18e:	eb 7f                	jmp    c001a20f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a190:	83 ec 08             	sub    esp,0x8
c001a193:	68 a4 32 02 c0       	push   0xc00232a4
c001a198:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a19c:	e8 1c 66 fe ff       	call   c00007bd <strcmp>
c001a1a1:	83 c4 10             	add    esp,0x10
c001a1a4:	85 c0                	test   eax,eax
c001a1a6:	0f 94 c0             	sete   al
c001a1a9:	84 c0                	test   al,al
c001a1ab:	74 0a                	je     c001a1b7 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001a1ad:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a1b5:	eb 58                	jmp    c001a20f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a1b7:	83 ec 08             	sub    esp,0x8
c001a1ba:	68 6c 05 02 c0       	push   0xc002056c
c001a1bf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a1c3:	e8 f5 65 fe ff       	call   c00007bd <strcmp>
c001a1c8:	83 c4 10             	add    esp,0x10
c001a1cb:	85 c0                	test   eax,eax
c001a1cd:	0f 94 c0             	sete   al
c001a1d0:	84 c0                	test   al,al
c001a1d2:	74 0a                	je     c001a1de <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001a1d4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a1dc:	eb 31                	jmp    c001a20f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a1de:	83 ec 08             	sub    esp,0x8
c001a1e1:	68 aa 32 02 c0       	push   0xc00232aa
c001a1e6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a1ea:	e8 ce 65 fe ff       	call   c00007bd <strcmp>
c001a1ef:	83 c4 10             	add    esp,0x10
c001a1f2:	85 c0                	test   eax,eax
c001a1f4:	0f 94 c0             	sete   al
c001a1f7:	84 c0                	test   al,al
c001a1f9:	74 0a                	je     c001a205 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001a1fb:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a203:	eb 0a                	jmp    c001a20f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a205:	b8 08 00 00 00       	mov    eax,0x8
c001a20a:	e9 04 01 00 00       	jmp    c001a313 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a20f:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a216:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a21b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a21f:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a226:	83 f8 ff             	cmp    eax,0xffffffff
c001a229:	75 34                	jne    c001a25f <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001a22b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a22f:	88 c2                	mov    dl,al
c001a231:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a236:	01 d0                	add    eax,edx
c001a238:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a23c:	8b 15 20 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c20
c001a242:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a246:	89 14 85 40 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3c0],edx
c001a24d:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a252:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a256:	89 14 85 c0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda340],edx
c001a25d:	eb 17                	jmp    c001a276 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001a25f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a263:	88 c2                	mov    dl,al
c001a265:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a269:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a270:	01 d0                	add    eax,edx
c001a272:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a276:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a27a:	88 04 24             	mov    BYTE PTR [esp],al
c001a27d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a281:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a285:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a28d:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a292:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a29a:	83 ec 0c             	sub    esp,0xc
c001a29d:	68 00 20 00 00       	push   0x2000
c001a2a2:	e8 44 1d ff ff       	call   c000bfeb <malloc>
c001a2a7:	83 c4 10             	add    esp,0x10
c001a2aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a2ae:	68 00 20 00 00       	push   0x2000
c001a2b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2b7:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a2bb:	50                   	push   eax
c001a2bc:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a2c0:	50                   	push   eax
c001a2c1:	e8 59 ce fe ff       	call   c000711f <f_mkfs>
c001a2c6:	83 c4 10             	add    esp,0x10
c001a2c9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a2cd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a2d2:	75 07                	jne    c001a2db <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001a2d4:	b8 00 00 00 00       	mov    eax,0x0
c001a2d9:	eb 38                	jmp    c001a313 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a2db:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a2e0:	75 17                	jne    c001a2f9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001a2e2:	83 ec 0c             	sub    esp,0xc
c001a2e5:	68 dc 32 02 c0       	push   0xc00232dc
c001a2ea:	e8 2e 4f ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001a2ef:	83 c4 10             	add    esp,0x10
c001a2f2:	b8 09 00 00 00       	mov    eax,0x9
c001a2f7:	eb 1a                	jmp    c001a313 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a2f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a2fd:	83 ec 08             	sub    esp,0x8
c001a300:	50                   	push   eax
c001a301:	68 b0 32 02 c0       	push   0xc00232b0
c001a306:	e8 12 4f ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001a30b:	83 c4 10             	add    esp,0x10
c001a30e:	b8 01 00 00 00       	mov    eax,0x1
c001a313:	83 c4 2c             	add    esp,0x2c
c001a316:	c3                   	ret    
c001a317:	90                   	nop

c001a318 <FAT::tryMount(LogicalDisk*, int)>:
c001a318:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a31e:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a323:	83 f8 14             	cmp    eax,0x14
c001a326:	75 17                	jne    c001a33f <FAT::tryMount(LogicalDisk*, int)+0x27>
c001a328:	83 ec 0c             	sub    esp,0xc
c001a32b:	68 c2 32 02 c0       	push   0xc00232c2
c001a330:	e8 17 b7 ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c001a335:	83 c4 10             	add    esp,0x10
c001a338:	b0 00                	mov    al,0x0
c001a33a:	e9 d7 01 00 00       	jmp    c001a516 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a33f:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a346:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a34c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a352:	3d 00 02 00 00       	cmp    eax,0x200
c001a357:	74 07                	je     c001a360 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001a359:	b0 00                	mov    al,0x0
c001a35b:	e9 b6 01 00 00       	jmp    c001a516 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a360:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a368:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a36f:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a376:	83 f8 ff             	cmp    eax,0xffffffff
c001a379:	74 07                	je     c001a382 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001a37b:	b0 01                	mov    al,0x1
c001a37d:	e9 94 01 00 00       	jmp    c001a516 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a382:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a38c:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a394:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a39b:	88 c2                	mov    dl,al
c001a39d:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a3a2:	01 d0                	add    eax,edx
c001a3a4:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a3ab:	8b 15 20 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c20
c001a3b1:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a3b8:	89 14 85 40 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3c0],edx
c001a3bf:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a3c4:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a3cb:	89 14 85 c0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda340],edx
c001a3d2:	83 ec 0c             	sub    esp,0xc
c001a3d5:	68 54 02 00 00       	push   0x254
c001a3da:	e8 0c 1c ff ff       	call   c000bfeb <malloc>
c001a3df:	83 c4 10             	add    esp,0x10
c001a3e2:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a3e9:	83 ec 04             	sub    esp,0x4
c001a3ec:	6a 00                	push   0x0
c001a3ee:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a3f5:	50                   	push   eax
c001a3f6:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a3fd:	e8 0c a9 fe ff       	call   c0004d0e <f_mount>
c001a402:	83 c4 10             	add    esp,0x10
c001a405:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a40c:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a414:	74 19                	je     c001a42f <FAT::tryMount(LogicalDisk*, int)+0x117>
c001a416:	83 ec 0c             	sub    esp,0xc
c001a419:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a420:	e8 e6 1b ff ff       	call   c000c00b <rfree>
c001a425:	83 c4 10             	add    esp,0x10
c001a428:	b0 00                	mov    al,0x0
c001a42a:	e9 e7 00 00 00       	jmp    c001a516 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a42f:	83 ec 04             	sub    esp,0x4
c001a432:	68 00 01 00 00       	push   0x100
c001a437:	6a 00                	push   0x0
c001a439:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a440:	50                   	push   eax
c001a441:	e8 87 62 fe ff       	call   c00006cd <memset>
c001a446:	83 c4 10             	add    esp,0x10
c001a449:	83 ec 08             	sub    esp,0x8
c001a44c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a453:	50                   	push   eax
c001a454:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a45b:	50                   	push   eax
c001a45c:	e8 c2 63 fe ff       	call   c0000823 <strcat>
c001a461:	83 c4 10             	add    esp,0x10
c001a464:	83 ec 08             	sub    esp,0x8
c001a467:	68 d0 32 02 c0       	push   0xc00232d0
c001a46c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a473:	50                   	push   eax
c001a474:	e8 aa 63 fe ff       	call   c0000823 <strcat>
c001a479:	83 c4 10             	add    esp,0x10
c001a47c:	83 ec 04             	sub    esp,0x4
c001a47f:	6a 01                	push   0x1
c001a481:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001a488:	50                   	push   eax
c001a489:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a48d:	50                   	push   eax
c001a48e:	e8 dd a8 fe ff       	call   c0004d70 <f_open>
c001a493:	83 c4 10             	add    esp,0x10
c001a496:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a49d:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001a4a4:	85 c0                	test   eax,eax
c001a4a6:	74 0a                	je     c001a4b2 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001a4a8:	78 2d                	js     c001a4d7 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a4aa:	83 e8 04             	sub    eax,0x4
c001a4ad:	83 f8 01             	cmp    eax,0x1
c001a4b0:	77 25                	ja     c001a4d7 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a4b2:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001a4ba:	83 ec 0c             	sub    esp,0xc
c001a4bd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a4c1:	50                   	push   eax
c001a4c2:	e8 fb b3 fe ff       	call   c00058c2 <f_close>
c001a4c7:	83 c4 10             	add    esp,0x10
c001a4ca:	90                   	nop
c001a4cb:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001a4d3:	74 3a                	je     c001a50f <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001a4d5:	eb 2d                	jmp    c001a504 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001a4d7:	83 ec 0c             	sub    esp,0xc
c001a4da:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a4e1:	e8 25 1b ff ff       	call   c000c00b <rfree>
c001a4e6:	83 c4 10             	add    esp,0x10
c001a4e9:	83 ec 04             	sub    esp,0x4
c001a4ec:	6a 00                	push   0x0
c001a4ee:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a4f5:	50                   	push   eax
c001a4f6:	6a 00                	push   0x0
c001a4f8:	e8 11 a8 fe ff       	call   c0004d0e <f_mount>
c001a4fd:	83 c4 10             	add    esp,0x10
c001a500:	b0 00                	mov    al,0x0
c001a502:	eb 12                	jmp    c001a516 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a504:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a509:	40                   	inc    eax
c001a50a:	a3 20 5c 02 c0       	mov    ds:0xc0025c20,eax
c001a50f:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001a516:	81 c4 6c 03 00 00    	add    esp,0x36c
c001a51c:	c3                   	ret    
c001a51d:	90                   	nop

c001a51e <FAT::readDir(void*, unsigned long, void*, int*)>:
c001a51e:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001a524:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001a52c:	74 0a                	je     c001a538 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001a52e:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001a536:	75 0a                	jne    c001a542 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001a538:	b8 04 00 00 00       	mov    eax,0x4
c001a53d:	e9 dd 00 00 00       	jmp    c001a61f <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a542:	83 ec 08             	sub    esp,0x8
c001a545:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a54c:	50                   	push   eax
c001a54d:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001a554:	e8 21 b9 fe ff       	call   c0005e7a <f_readdir>
c001a559:	83 c4 10             	add    esp,0x10
c001a55c:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001a563:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a569:	83 ec 0c             	sub    esp,0xc
c001a56c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001a573:	83 c0 1a             	add    eax,0x1a
c001a576:	50                   	push   eax
c001a577:	e8 6e 61 fe ff       	call   c00006ea <strlen>
c001a57c:	83 c4 10             	add    esp,0x10
c001a57f:	ba 00 00 00 00       	mov    edx,0x0
c001a584:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a588:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a58c:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001a593:	25 ff 00 00 00       	and    eax,0xff
c001a598:	83 e0 10             	and    eax,0x10
c001a59b:	74 07                	je     c001a5a4 <FAT::readDir(void*, unsigned long, void*, int*)+0x86>
c001a59d:	b8 02 00 00 00       	mov    eax,0x2
c001a5a2:	eb 05                	jmp    c001a5a9 <FAT::readDir(void*, unsigned long, void*, int*)+0x8b>
c001a5a4:	b8 01 00 00 00       	mov    eax,0x1
c001a5a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a5ad:	83 ec 08             	sub    esp,0x8
c001a5b0:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a5b7:	83 c0 1a             	add    eax,0x1a
c001a5ba:	50                   	push   eax
c001a5bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a5bf:	83 c0 10             	add    eax,0x10
c001a5c2:	50                   	push   eax
c001a5c3:	e8 a4 61 fe ff       	call   c000076c <strcpy>
c001a5c8:	83 c4 10             	add    esp,0x10
c001a5cb:	83 ec 04             	sub    esp,0x4
c001a5ce:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001a5d5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a5d9:	50                   	push   eax
c001a5da:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001a5e1:	e8 b1 60 fe ff       	call   c0000697 <memcpy>
c001a5e6:	83 c4 10             	add    esp,0x10
c001a5e9:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001a5f0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a5f6:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001a5fd:	84 c0                	test   al,al
c001a5ff:	75 07                	jne    c001a608 <FAT::readDir(void*, unsigned long, void*, int*)+0xea>
c001a601:	b8 07 00 00 00       	mov    eax,0x7
c001a606:	eb 17                	jmp    c001a61f <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a608:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001a60f:	85 c0                	test   eax,eax
c001a611:	75 07                	jne    c001a61a <FAT::readDir(void*, unsigned long, void*, int*)+0xfc>
c001a613:	b8 00 00 00 00       	mov    eax,0x0
c001a618:	eb 05                	jmp    c001a61f <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a61a:	b8 01 00 00 00       	mov    eax,0x1
c001a61f:	81 c4 3c 02 00 00    	add    esp,0x23c
c001a625:	c3                   	ret    

c001a626 <FAT::read(void*, unsigned long, void*, int*)>:
c001a626:	83 ec 1c             	sub    esp,0x1c
c001a629:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a62e:	74 07                	je     c001a637 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001a630:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a635:	75 07                	jne    c001a63e <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001a637:	b8 04 00 00 00       	mov    eax,0x4
c001a63c:	eb 3d                	jmp    c001a67b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a63e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a642:	50                   	push   eax
c001a643:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a647:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a64b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a64f:	e8 58 ab fe ff       	call   c00051ac <f_read>
c001a654:	83 c4 10             	add    esp,0x10
c001a657:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a65b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a65f:	89 c2                	mov    edx,eax
c001a661:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a665:	89 10                	mov    DWORD PTR [eax],edx
c001a667:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a66b:	85 c0                	test   eax,eax
c001a66d:	75 07                	jne    c001a676 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001a66f:	b8 00 00 00 00       	mov    eax,0x0
c001a674:	eb 05                	jmp    c001a67b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a676:	b8 01 00 00 00       	mov    eax,0x1
c001a67b:	83 c4 1c             	add    esp,0x1c
c001a67e:	c3                   	ret    
c001a67f:	90                   	nop

c001a680 <FAT::write(void*, unsigned long, void*, int*)>:
c001a680:	83 ec 1c             	sub    esp,0x1c
c001a683:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a688:	74 07                	je     c001a691 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001a68a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a68f:	75 07                	jne    c001a698 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001a691:	b8 04 00 00 00       	mov    eax,0x4
c001a696:	eb 3d                	jmp    c001a6d5 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a698:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a69c:	50                   	push   eax
c001a69d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a6a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a6a5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a6a9:	e8 7e ad fe ff       	call   c000542c <f_write>
c001a6ae:	83 c4 10             	add    esp,0x10
c001a6b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6b9:	89 c2                	mov    edx,eax
c001a6bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a6bf:	89 10                	mov    DWORD PTR [eax],edx
c001a6c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a6c5:	85 c0                	test   eax,eax
c001a6c7:	75 07                	jne    c001a6d0 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001a6c9:	b8 00 00 00 00       	mov    eax,0x0
c001a6ce:	eb 05                	jmp    c001a6d5 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a6d0:	b8 01 00 00 00       	mov    eax,0x1
c001a6d5:	83 c4 1c             	add    esp,0x1c
c001a6d8:	c3                   	ret    
c001a6d9:	90                   	nop

c001a6da <FAT::close(void*)>:
c001a6da:	83 ec 1c             	sub    esp,0x1c
c001a6dd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a6e2:	75 07                	jne    c001a6eb <FAT::close(void*)+0x11>
c001a6e4:	b8 04 00 00 00       	mov    eax,0x4
c001a6e9:	eb 36                	jmp    c001a721 <FAT::close(void*)+0x47>
c001a6eb:	83 ec 0c             	sub    esp,0xc
c001a6ee:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a6f2:	e8 cb b1 fe ff       	call   c00058c2 <f_close>
c001a6f7:	83 c4 10             	add    esp,0x10
c001a6fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6fe:	83 ec 0c             	sub    esp,0xc
c001a701:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a705:	e8 f1 18 ff ff       	call   c000bffb <free>
c001a70a:	83 c4 10             	add    esp,0x10
c001a70d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a711:	85 c0                	test   eax,eax
c001a713:	75 07                	jne    c001a71c <FAT::close(void*)+0x42>
c001a715:	b8 00 00 00 00       	mov    eax,0x0
c001a71a:	eb 05                	jmp    c001a721 <FAT::close(void*)+0x47>
c001a71c:	b8 01 00 00 00       	mov    eax,0x1
c001a721:	83 c4 1c             	add    esp,0x1c
c001a724:	c3                   	ret    
c001a725:	90                   	nop

c001a726 <FAT::closeDir(void*)>:
c001a726:	83 ec 1c             	sub    esp,0x1c
c001a729:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a72e:	75 07                	jne    c001a737 <FAT::closeDir(void*)+0x11>
c001a730:	b8 04 00 00 00       	mov    eax,0x4
c001a735:	eb 36                	jmp    c001a76d <FAT::closeDir(void*)+0x47>
c001a737:	83 ec 0c             	sub    esp,0xc
c001a73a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a73e:	e8 15 b7 fe ff       	call   c0005e58 <f_closedir>
c001a743:	83 c4 10             	add    esp,0x10
c001a746:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a74a:	83 ec 0c             	sub    esp,0xc
c001a74d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a751:	e8 a5 18 ff ff       	call   c000bffb <free>
c001a756:	83 c4 10             	add    esp,0x10
c001a759:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a75d:	85 c0                	test   eax,eax
c001a75f:	75 07                	jne    c001a768 <FAT::closeDir(void*)+0x42>
c001a761:	b8 00 00 00 00       	mov    eax,0x0
c001a766:	eb 05                	jmp    c001a76d <FAT::closeDir(void*)+0x47>
c001a768:	b8 01 00 00 00       	mov    eax,0x1
c001a76d:	83 c4 1c             	add    esp,0x1c
c001a770:	c3                   	ret    
c001a771:	90                   	nop

c001a772 <FAT::seek(void*, unsigned long long)>:
c001a772:	83 ec 2c             	sub    esp,0x2c
c001a775:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a779:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a77d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a781:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a785:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a78a:	75 07                	jne    c001a793 <FAT::seek(void*, unsigned long long)+0x21>
c001a78c:	b8 04 00 00 00       	mov    eax,0x4
c001a791:	eb 2f                	jmp    c001a7c2 <FAT::seek(void*, unsigned long long)+0x50>
c001a793:	83 ec 04             	sub    esp,0x4
c001a796:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a79a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a79e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a7a2:	e8 4a b1 fe ff       	call   c00058f1 <f_lseek>
c001a7a7:	83 c4 10             	add    esp,0x10
c001a7aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a7ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a7b2:	85 c0                	test   eax,eax
c001a7b4:	75 07                	jne    c001a7bd <FAT::seek(void*, unsigned long long)+0x4b>
c001a7b6:	b8 00 00 00 00       	mov    eax,0x0
c001a7bb:	eb 05                	jmp    c001a7c2 <FAT::seek(void*, unsigned long long)+0x50>
c001a7bd:	b8 01 00 00 00       	mov    eax,0x1
c001a7c2:	83 c4 2c             	add    esp,0x2c
c001a7c5:	c3                   	ret    

c001a7c6 <fatWrapperReadDisk>:
c001a7c6:	83 ec 1c             	sub    esp,0x1c
c001a7c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7cd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a7d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a7d5:	89 04 24             	mov    DWORD PTR [esp],eax
c001a7d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a7dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a7e0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a7e4:	25 ff 00 00 00       	and    eax,0xff
c001a7e9:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c001a7f0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a7f4:	83 ec 0c             	sub    esp,0xc
c001a7f7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a7fb:	52                   	push   edx
c001a7fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a804:	50                   	push   eax
c001a805:	e8 6e 80 ff ff       	call   c0012878 <LogicalDisk::read(unsigned long long, int, void*)>
c001a80a:	83 c4 20             	add    esp,0x20
c001a80d:	83 c4 1c             	add    esp,0x1c
c001a810:	c3                   	ret    

c001a811 <fatWrapperWriteDisk>:
c001a811:	83 ec 1c             	sub    esp,0x1c
c001a814:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a818:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a81c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a820:	89 04 24             	mov    DWORD PTR [esp],eax
c001a823:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a827:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a82b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a82f:	25 ff 00 00 00       	and    eax,0xff
c001a834:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c001a83b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a83f:	83 ec 0c             	sub    esp,0xc
c001a842:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a846:	52                   	push   edx
c001a847:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a84b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a84f:	50                   	push   eax
c001a850:	e8 8f 80 ff ff       	call   c00128e4 <LogicalDisk::write(unsigned long long, int, void*)>
c001a855:	83 c4 20             	add    esp,0x20
c001a858:	83 c4 1c             	add    esp,0x1c
c001a85b:	c3                   	ret    

c001a85c <fatWrapperIoctl>:
c001a85c:	53                   	push   ebx
c001a85d:	83 ec 28             	sub    esp,0x28
c001a860:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a864:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a868:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a86c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a870:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001a875:	75 35                	jne    c001a8ac <fatWrapperIoctl+0x50>
c001a877:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a87b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a87f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a883:	25 ff 00 00 00       	and    eax,0xff
c001a888:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c001a88f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a895:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a89b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a89f:	66 89 02             	mov    WORD PTR [edx],ax
c001a8a2:	b8 00 00 00 00       	mov    eax,0x0
c001a8a7:	e9 bb 00 00 00       	jmp    c001a967 <fatWrapperIoctl+0x10b>
c001a8ac:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001a8b1:	75 73                	jne    c001a926 <fatWrapperIoctl+0xca>
c001a8b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a8b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a8bb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a8bf:	25 ff 00 00 00       	and    eax,0xff
c001a8c4:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c001a8cb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a8d1:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a8d7:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a8dd:	89 c8                	mov    eax,ecx
c001a8df:	89 da                	mov    edx,ebx
c001a8e1:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a8e5:	c1 e0 0a             	shl    eax,0xa
c001a8e8:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a8ec:	81 e1 ff 00 00 00    	and    ecx,0xff
c001a8f2:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c001a8f9:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a8ff:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a905:	89 cb                	mov    ebx,ecx
c001a907:	c1 fb 1f             	sar    ebx,0x1f
c001a90a:	53                   	push   ebx
c001a90b:	51                   	push   ecx
c001a90c:	52                   	push   edx
c001a90d:	50                   	push   eax
c001a90e:	e8 f9 4b 00 00       	call   c001f50c <__udivdi3>
c001a913:	83 c4 10             	add    esp,0x10
c001a916:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a91a:	89 01                	mov    DWORD PTR [ecx],eax
c001a91c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a91f:	b8 00 00 00 00       	mov    eax,0x0
c001a924:	eb 41                	jmp    c001a967 <fatWrapperIoctl+0x10b>
c001a926:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001a92b:	75 07                	jne    c001a934 <fatWrapperIoctl+0xd8>
c001a92d:	b8 00 00 00 00       	mov    eax,0x0
c001a932:	eb 33                	jmp    c001a967 <fatWrapperIoctl+0x10b>
c001a934:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001a939:	75 19                	jne    c001a954 <fatWrapperIoctl+0xf8>
c001a93b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a93f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a943:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a947:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a94d:	b8 00 00 00 00       	mov    eax,0x0
c001a952:	eb 13                	jmp    c001a967 <fatWrapperIoctl+0x10b>
c001a954:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001a959:	75 07                	jne    c001a962 <fatWrapperIoctl+0x106>
c001a95b:	b8 00 00 00 00       	mov    eax,0x0
c001a960:	eb 05                	jmp    c001a967 <fatWrapperIoctl+0x10b>
c001a962:	b8 04 00 00 00       	mov    eax,0x4
c001a967:	83 c4 28             	add    esp,0x28
c001a96a:	5b                   	pop    ebx
c001a96b:	c3                   	ret    

c001a96c <FAT::FAT()>:
c001a96c:	83 ec 1c             	sub    esp,0x1c
c001a96f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a973:	83 ec 0c             	sub    esp,0xc
c001a976:	50                   	push   eax
c001a977:	e8 ae 4b ff ff       	call   c000f52a <Filesystem::Filesystem()>
c001a97c:	83 c4 10             	add    esp,0x10
c001a97f:	ba 0c 33 02 c0       	mov    edx,0xc002330c
c001a984:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a988:	89 10                	mov    DWORD PTR [eax],edx
c001a98a:	c7 05 20 5c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025c20,0x0
c001a994:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a99c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a9a1:	7f 15                	jg     c001a9b8 <FAT::FAT()+0x4c>
c001a9a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a9a7:	c7 04 85 40 5c 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffda3c0],0xffffffff
c001a9b2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a9b6:	eb e4                	jmp    c001a99c <FAT::FAT()+0x30>
c001a9b8:	90                   	nop
c001a9b9:	83 c4 1c             	add    esp,0x1c
c001a9bc:	c3                   	ret    
c001a9bd:	90                   	nop

c001a9be <FAT::fixFilepath(char*)>:
c001a9be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9c2:	8a 00                	mov    al,BYTE PTR [eax]
c001a9c4:	3c 40                	cmp    al,0x40
c001a9c6:	7e 2c                	jle    c001a9f4 <FAT::fixFilepath(char*)+0x36>
c001a9c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9cc:	8a 00                	mov    al,BYTE PTR [eax]
c001a9ce:	83 e8 41             	sub    eax,0x41
c001a9d1:	88 c2                	mov    dl,al
c001a9d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9d7:	88 10                	mov    BYTE PTR [eax],dl
c001a9d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9dd:	8a 00                	mov    al,BYTE PTR [eax]
c001a9df:	0f be c0             	movsx  eax,al
c001a9e2:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a9e9:	83 c0 30             	add    eax,0x30
c001a9ec:	88 c2                	mov    dl,al
c001a9ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9f2:	88 10                	mov    BYTE PTR [eax],dl
c001a9f4:	90                   	nop
c001a9f5:	c3                   	ret    

c001a9f6 <FAT::open(char const*, void**, FileOpenMode)>:
c001a9f6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a9fc:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001aa04:	74 0a                	je     c001aa10 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001aa06:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001aa0e:	75 0a                	jne    c001aa1a <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001aa10:	b8 04 00 00 00       	mov    eax,0x4
c001aa15:	e9 00 01 00 00       	jmp    c001ab1a <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001aa1a:	83 ec 08             	sub    esp,0x8
c001aa1d:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa24:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa28:	50                   	push   eax
c001aa29:	e8 3e 5d fe ff       	call   c000076c <strcpy>
c001aa2e:	83 c4 10             	add    esp,0x10
c001aa31:	83 ec 08             	sub    esp,0x8
c001aa34:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aa38:	50                   	push   eax
c001aa39:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa40:	e8 79 ff ff ff       	call   c001a9be <FAT::fixFilepath(char*)>
c001aa45:	83 c4 10             	add    esp,0x10
c001aa48:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001aa50:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa57:	83 e0 01             	and    eax,0x1
c001aa5a:	74 08                	je     c001aa64 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001aa5c:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001aa64:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa6b:	83 e0 04             	and    eax,0x4
c001aa6e:	74 10                	je     c001aa80 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001aa70:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001aa78:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001aa80:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa87:	83 e0 02             	and    eax,0x2
c001aa8a:	74 08                	je     c001aa94 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001aa8c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001aa94:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa9b:	83 e0 08             	and    eax,0x8
c001aa9e:	74 08                	je     c001aaa8 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001aaa0:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001aaa8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aaaf:	83 e0 10             	and    eax,0x10
c001aab2:	74 08                	je     c001aabc <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001aab4:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001aabc:	83 ec 0c             	sub    esp,0xc
c001aabf:	68 50 02 00 00       	push   0x250
c001aac4:	e8 22 15 ff ff       	call   c000bfeb <malloc>
c001aac9:	83 c4 10             	add    esp,0x10
c001aacc:	89 c2                	mov    edx,eax
c001aace:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aad5:	89 10                	mov    DWORD PTR [eax],edx
c001aad7:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001aade:	31 d2                	xor    edx,edx
c001aae0:	88 c2                	mov    dl,al
c001aae2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aae9:	8b 00                	mov    eax,DWORD PTR [eax]
c001aaeb:	83 ec 04             	sub    esp,0x4
c001aaee:	52                   	push   edx
c001aaef:	8d 54 24 10          	lea    edx,[esp+0x10]
c001aaf3:	52                   	push   edx
c001aaf4:	50                   	push   eax
c001aaf5:	e8 76 a2 fe ff       	call   c0004d70 <f_open>
c001aafa:	83 c4 10             	add    esp,0x10
c001aafd:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001ab04:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001ab0c:	74 07                	je     c001ab15 <FAT::open(char const*, void**, FileOpenMode)+0x11f>
c001ab0e:	b8 01 00 00 00       	mov    eax,0x1
c001ab13:	eb 05                	jmp    c001ab1a <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001ab15:	b8 00 00 00 00       	mov    eax,0x0
c001ab1a:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ab20:	c3                   	ret    
c001ab21:	90                   	nop

c001ab22 <FAT::openDir(char const*, void**)>:
c001ab22:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ab28:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ab30:	74 0a                	je     c001ab3c <FAT::openDir(char const*, void**)+0x1a>
c001ab32:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ab3a:	75 07                	jne    c001ab43 <FAT::openDir(char const*, void**)+0x21>
c001ab3c:	b8 04 00 00 00       	mov    eax,0x4
c001ab41:	eb 7d                	jmp    c001abc0 <FAT::openDir(char const*, void**)+0x9e>
c001ab43:	83 ec 08             	sub    esp,0x8
c001ab46:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ab4d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ab51:	50                   	push   eax
c001ab52:	e8 15 5c fe ff       	call   c000076c <strcpy>
c001ab57:	83 c4 10             	add    esp,0x10
c001ab5a:	83 ec 08             	sub    esp,0x8
c001ab5d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ab61:	50                   	push   eax
c001ab62:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ab69:	e8 50 fe ff ff       	call   c001a9be <FAT::fixFilepath(char*)>
c001ab6e:	83 c4 10             	add    esp,0x10
c001ab71:	83 ec 0c             	sub    esp,0xc
c001ab74:	6a 4c                	push   0x4c
c001ab76:	e8 70 14 ff ff       	call   c000bfeb <malloc>
c001ab7b:	83 c4 10             	add    esp,0x10
c001ab7e:	89 c2                	mov    edx,eax
c001ab80:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ab87:	89 10                	mov    DWORD PTR [eax],edx
c001ab89:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ab90:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab92:	83 ec 08             	sub    esp,0x8
c001ab95:	8d 54 24 14          	lea    edx,[esp+0x14]
c001ab99:	52                   	push   edx
c001ab9a:	50                   	push   eax
c001ab9b:	e8 b6 b1 fe ff       	call   c0005d56 <f_opendir>
c001aba0:	83 c4 10             	add    esp,0x10
c001aba3:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001abaa:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001abb2:	74 07                	je     c001abbb <FAT::openDir(char const*, void**)+0x99>
c001abb4:	b8 01 00 00 00       	mov    eax,0x1
c001abb9:	eb 05                	jmp    c001abc0 <FAT::openDir(char const*, void**)+0x9e>
c001abbb:	b8 00 00 00 00       	mov    eax,0x0
c001abc0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001abc6:	c3                   	ret    
c001abc7:	90                   	nop

c001abc8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001abc8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001abce:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001abd6:	75 0a                	jne    c001abe2 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001abd8:	b8 04 00 00 00       	mov    eax,0x4
c001abdd:	e9 cb 00 00 00       	jmp    c001acad <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001abe2:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001abea:	75 0a                	jne    c001abf6 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001abec:	b8 04 00 00 00       	mov    eax,0x4
c001abf1:	e9 b7 00 00 00       	jmp    c001acad <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001abf6:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001abfe:	75 0a                	jne    c001ac0a <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001ac00:	b8 04 00 00 00       	mov    eax,0x4
c001ac05:	e9 a3 00 00 00       	jmp    c001acad <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001ac0a:	83 ec 08             	sub    esp,0x8
c001ac0d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ac14:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ac1b:	50                   	push   eax
c001ac1c:	e8 4b 5b fe ff       	call   c000076c <strcpy>
c001ac21:	83 c4 10             	add    esp,0x10
c001ac24:	83 ec 08             	sub    esp,0x8
c001ac27:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001ac2e:	50                   	push   eax
c001ac2f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ac36:	e8 83 fd ff ff       	call   c001a9be <FAT::fixFilepath(char*)>
c001ac3b:	83 c4 10             	add    esp,0x10
c001ac3e:	83 ec 08             	sub    esp,0x8
c001ac41:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ac45:	50                   	push   eax
c001ac46:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ac4d:	50                   	push   eax
c001ac4e:	e8 c2 b2 fe ff       	call   c0005f15 <f_stat>
c001ac53:	83 c4 10             	add    esp,0x10
c001ac56:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ac5d:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ac64:	85 c0                	test   eax,eax
c001ac66:	74 07                	je     c001ac6f <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001ac68:	83 f8 04             	cmp    eax,0x4
c001ac6b:	74 34                	je     c001aca1 <FAT::stat(char const*, unsigned long long*, bool*)+0xd9>
c001ac6d:	eb 39                	jmp    c001aca8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001ac6f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ac73:	25 ff 00 00 00       	and    eax,0xff
c001ac78:	83 e0 10             	and    eax,0x10
c001ac7b:	0f 95 c2             	setne  dl
c001ac7e:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001ac85:	88 10                	mov    BYTE PTR [eax],dl
c001ac87:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ac8a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac8e:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001ac95:	89 01                	mov    DWORD PTR [ecx],eax
c001ac97:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ac9a:	b8 00 00 00 00       	mov    eax,0x0
c001ac9f:	eb 0c                	jmp    c001acad <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001aca1:	b8 02 00 00 00       	mov    eax,0x2
c001aca6:	eb 05                	jmp    c001acad <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001aca8:	b8 01 00 00 00       	mov    eax,0x1
c001acad:	81 c4 2c 02 00 00    	add    esp,0x22c
c001acb3:	c3                   	ret    

c001acb4 <FAT::unlink(char const*)>:
c001acb4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001acba:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001acc2:	75 07                	jne    c001accb <FAT::unlink(char const*)+0x17>
c001acc4:	b8 04 00 00 00       	mov    eax,0x4
c001acc9:	eb 5c                	jmp    c001ad27 <FAT::unlink(char const*)+0x73>
c001accb:	83 ec 08             	sub    esp,0x8
c001acce:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001acd5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001acd9:	50                   	push   eax
c001acda:	e8 8d 5a fe ff       	call   c000076c <strcpy>
c001acdf:	83 c4 10             	add    esp,0x10
c001ace2:	83 ec 08             	sub    esp,0x8
c001ace5:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ace9:	50                   	push   eax
c001acea:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001acf1:	e8 c8 fc ff ff       	call   c001a9be <FAT::fixFilepath(char*)>
c001acf6:	83 c4 10             	add    esp,0x10
c001acf9:	83 ec 0c             	sub    esp,0xc
c001acfc:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ad00:	50                   	push   eax
c001ad01:	e8 7e b5 fe ff       	call   c0006284 <f_unlink>
c001ad06:	83 c4 10             	add    esp,0x10
c001ad09:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ad10:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ad17:	85 c0                	test   eax,eax
c001ad19:	75 07                	jne    c001ad22 <FAT::unlink(char const*)+0x6e>
c001ad1b:	b8 00 00 00 00       	mov    eax,0x0
c001ad20:	eb 05                	jmp    c001ad27 <FAT::unlink(char const*)+0x73>
c001ad22:	b8 01 00 00 00       	mov    eax,0x1
c001ad27:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ad2d:	c3                   	ret    

c001ad2e <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001ad2e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad34:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001ad3b:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001ad42:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001ad46:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ad4a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001ad52:	75 0a                	jne    c001ad5e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001ad54:	b8 04 00 00 00       	mov    eax,0x4
c001ad59:	e9 43 01 00 00       	jmp    c001aea1 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001ad5e:	83 ec 08             	sub    esp,0x8
c001ad61:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ad68:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad6c:	50                   	push   eax
c001ad6d:	e8 fa 59 fe ff       	call   c000076c <strcpy>
c001ad72:	83 c4 10             	add    esp,0x10
c001ad75:	83 ec 08             	sub    esp,0x8
c001ad78:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ad7c:	50                   	push   eax
c001ad7d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ad84:	e8 35 fc ff ff       	call   c001a9be <FAT::fixFilepath(char*)>
c001ad89:	83 c4 10             	add    esp,0x10
c001ad8c:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001ad94:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001ad9c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001ada0:	25 ff 00 00 00       	and    eax,0xff
c001ada5:	83 e0 01             	and    eax,0x1
c001ada8:	74 08                	je     c001adb2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001adaa:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001adb2:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001adb6:	25 ff 00 00 00       	and    eax,0xff
c001adbb:	83 e0 02             	and    eax,0x2
c001adbe:	74 08                	je     c001adc8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9a>
c001adc0:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001adc8:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001adcc:	25 ff 00 00 00       	and    eax,0xff
c001add1:	83 e0 04             	and    eax,0x4
c001add4:	74 08                	je     c001adde <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb0>
c001add6:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001adde:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001ade2:	25 ff 00 00 00       	and    eax,0xff
c001ade7:	83 e0 08             	and    eax,0x8
c001adea:	74 08                	je     c001adf4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc6>
c001adec:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001adf4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001adf8:	25 ff 00 00 00       	and    eax,0xff
c001adfd:	83 e0 01             	and    eax,0x1
c001ae00:	74 08                	je     c001ae0a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xdc>
c001ae02:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001ae0a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ae0e:	25 ff 00 00 00       	and    eax,0xff
c001ae13:	83 e0 02             	and    eax,0x2
c001ae16:	74 08                	je     c001ae20 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf2>
c001ae18:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001ae20:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ae24:	25 ff 00 00 00       	and    eax,0xff
c001ae29:	83 e0 04             	and    eax,0x4
c001ae2c:	74 08                	je     c001ae36 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x108>
c001ae2e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001ae36:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ae3a:	25 ff 00 00 00       	and    eax,0xff
c001ae3f:	83 e0 08             	and    eax,0x8
c001ae42:	74 08                	je     c001ae4c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11e>
c001ae44:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001ae4c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ae53:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001ae5a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ae61:	31 d2                	xor    edx,edx
c001ae63:	88 c2                	mov    dl,al
c001ae65:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ae6c:	25 ff 00 00 00       	and    eax,0xff
c001ae71:	83 ec 04             	sub    esp,0x4
c001ae74:	52                   	push   edx
c001ae75:	50                   	push   eax
c001ae76:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae7a:	50                   	push   eax
c001ae7b:	e8 a4 ba fe ff       	call   c0006924 <f_chmod>
c001ae80:	83 c4 10             	add    esp,0x10
c001ae83:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ae8a:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ae91:	85 c0                	test   eax,eax
c001ae93:	75 07                	jne    c001ae9c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x16e>
c001ae95:	b8 00 00 00 00       	mov    eax,0x0
c001ae9a:	eb 05                	jmp    c001aea1 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001ae9c:	b8 01 00 00 00       	mov    eax,0x1
c001aea1:	81 c4 2c 01 00 00    	add    esp,0x12c
c001aea7:	c3                   	ret    

c001aea8 <FAT::rename(char const*, char const*)>:
c001aea8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001aeae:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001aeb6:	74 0a                	je     c001aec2 <FAT::rename(char const*, char const*)+0x1a>
c001aeb8:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001aec0:	75 0a                	jne    c001aecc <FAT::rename(char const*, char const*)+0x24>
c001aec2:	b8 04 00 00 00       	mov    eax,0x4
c001aec7:	e9 98 00 00 00       	jmp    c001af64 <FAT::rename(char const*, char const*)+0xbc>
c001aecc:	83 ec 08             	sub    esp,0x8
c001aecf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aed6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001aedd:	50                   	push   eax
c001aede:	e8 89 58 fe ff       	call   c000076c <strcpy>
c001aee3:	83 c4 10             	add    esp,0x10
c001aee6:	83 ec 08             	sub    esp,0x8
c001aee9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001aef0:	50                   	push   eax
c001aef1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aef8:	e8 c1 fa ff ff       	call   c001a9be <FAT::fixFilepath(char*)>
c001aefd:	83 c4 10             	add    esp,0x10
c001af00:	83 ec 08             	sub    esp,0x8
c001af03:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001af0a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001af0e:	50                   	push   eax
c001af0f:	e8 58 58 fe ff       	call   c000076c <strcpy>
c001af14:	83 c4 10             	add    esp,0x10
c001af17:	83 ec 08             	sub    esp,0x8
c001af1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001af1e:	50                   	push   eax
c001af1f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001af26:	e8 93 fa ff ff       	call   c001a9be <FAT::fixFilepath(char*)>
c001af2b:	83 c4 10             	add    esp,0x10
c001af2e:	83 ec 08             	sub    esp,0x8
c001af31:	8d 44 24 14          	lea    eax,[esp+0x14]
c001af35:	50                   	push   eax
c001af36:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001af3d:	50                   	push   eax
c001af3e:	e8 ee b6 fe ff       	call   c0006631 <f_rename>
c001af43:	83 c4 10             	add    esp,0x10
c001af46:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001af4d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001af54:	85 c0                	test   eax,eax
c001af56:	75 07                	jne    c001af5f <FAT::rename(char const*, char const*)+0xb7>
c001af58:	b8 00 00 00 00       	mov    eax,0x0
c001af5d:	eb 05                	jmp    c001af64 <FAT::rename(char const*, char const*)+0xbc>
c001af5f:	b8 01 00 00 00       	mov    eax,0x1
c001af64:	81 c4 1c 02 00 00    	add    esp,0x21c
c001af6a:	c3                   	ret    
c001af6b:	90                   	nop

c001af6c <FAT::mkdir(char const*)>:
c001af6c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001af72:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001af7a:	75 07                	jne    c001af83 <FAT::mkdir(char const*)+0x17>
c001af7c:	b8 04 00 00 00       	mov    eax,0x4
c001af81:	eb 5c                	jmp    c001afdf <FAT::mkdir(char const*)+0x73>
c001af83:	83 ec 08             	sub    esp,0x8
c001af86:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001af8d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001af91:	50                   	push   eax
c001af92:	e8 d5 57 fe ff       	call   c000076c <strcpy>
c001af97:	83 c4 10             	add    esp,0x10
c001af9a:	83 ec 08             	sub    esp,0x8
c001af9d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001afa1:	50                   	push   eax
c001afa2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001afa9:	e8 10 fa ff ff       	call   c001a9be <FAT::fixFilepath(char*)>
c001afae:	83 c4 10             	add    esp,0x10
c001afb1:	83 ec 0c             	sub    esp,0xc
c001afb4:	8d 44 24 18          	lea    eax,[esp+0x18]
c001afb8:	50                   	push   eax
c001afb9:	e8 47 b4 fe ff       	call   c0006405 <f_mkdir>
c001afbe:	83 c4 10             	add    esp,0x10
c001afc1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001afc8:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001afcf:	85 c0                	test   eax,eax
c001afd1:	75 07                	jne    c001afda <FAT::mkdir(char const*)+0x6e>
c001afd3:	b8 00 00 00 00       	mov    eax,0x0
c001afd8:	eb 05                	jmp    c001afdf <FAT::mkdir(char const*)+0x73>
c001afda:	b8 01 00 00 00       	mov    eax,0x1
c001afdf:	81 c4 1c 01 00 00    	add    esp,0x11c
c001afe5:	c3                   	ret    

c001afe6 <FAT::exists(char const*)>:
c001afe6:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001afec:	83 ec 08             	sub    esp,0x8
c001afef:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aff6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001affa:	50                   	push   eax
c001affb:	e8 6c 57 fe ff       	call   c000076c <strcpy>
c001b000:	83 c4 10             	add    esp,0x10
c001b003:	83 ec 08             	sub    esp,0x8
c001b006:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b00a:	50                   	push   eax
c001b00b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b012:	e8 a7 f9 ff ff       	call   c001a9be <FAT::fixFilepath(char*)>
c001b017:	83 c4 10             	add    esp,0x10
c001b01a:	83 ec 08             	sub    esp,0x8
c001b01d:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001b024:	50                   	push   eax
c001b025:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b029:	50                   	push   eax
c001b02a:	e8 e6 ae fe ff       	call   c0005f15 <f_stat>
c001b02f:	83 c4 10             	add    esp,0x10
c001b032:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b039:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b040:	85 c0                	test   eax,eax
c001b042:	75 04                	jne    c001b048 <FAT::exists(char const*)+0x62>
c001b044:	b0 01                	mov    al,0x1
c001b046:	eb 02                	jmp    c001b04a <FAT::exists(char const*)+0x64>
c001b048:	b0 00                	mov    al,0x0
c001b04a:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b050:	c3                   	ret    
c001b051:	90                   	nop

c001b052 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001b052:	b8 08 00 00 00       	mov    eax,0x8
c001b057:	c3                   	ret    

c001b058 <ISO9660::seek(void*, unsigned long long)>:
c001b058:	53                   	push   ebx
c001b059:	b8 04 00 00 00       	mov    eax,0x4
c001b05e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b062:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b066:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b06a:	85 d2                	test   edx,edx
c001b06c:	74 17                	je     c001b085 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b06e:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001b071:	89 c8                	mov    eax,ecx
c001b073:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001b076:	b8 01 00 00 00       	mov    eax,0x1
c001b07b:	73 08                	jae    c001b085 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b07d:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001b080:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b083:	31 c0                	xor    eax,eax
c001b085:	5b                   	pop    ebx
c001b086:	c3                   	ret    
c001b087:	90                   	nop

c001b088 <ISO9660::tell(void*, unsigned long long*)>:
c001b088:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b08c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b090:	85 d2                	test   edx,edx
c001b092:	74 12                	je     c001b0a6 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b094:	85 c0                	test   eax,eax
c001b096:	74 0e                	je     c001b0a6 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b098:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b09b:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001b09e:	89 10                	mov    DWORD PTR [eax],edx
c001b0a0:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b0a3:	31 c0                	xor    eax,eax
c001b0a5:	c3                   	ret    
c001b0a6:	b8 04 00 00 00       	mov    eax,0x4
c001b0ab:	c3                   	ret    

c001b0ac <ISO9660::getName()>:
c001b0ac:	b8 68 33 02 c0       	mov    eax,0xc0023368
c001b0b1:	c3                   	ret    

c001b0b2 <ISO9660::stat(void*, unsigned long long*)>:
c001b0b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b0b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b0ba:	85 d2                	test   edx,edx
c001b0bc:	74 12                	je     c001b0d0 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b0be:	85 c0                	test   eax,eax
c001b0c0:	74 0e                	je     c001b0d0 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b0c2:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001b0c5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001b0c8:	89 10                	mov    DWORD PTR [eax],edx
c001b0ca:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b0cd:	31 c0                	xor    eax,eax
c001b0cf:	c3                   	ret    
c001b0d0:	b8 04 00 00 00       	mov    eax,0x4
c001b0d5:	c3                   	ret    

c001b0d6 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001b0d6:	b8 01 00 00 00       	mov    eax,0x1
c001b0db:	c3                   	ret    

c001b0dc <ISO9660::unlink(char const*)>:
c001b0dc:	b8 01 00 00 00       	mov    eax,0x1
c001b0e1:	c3                   	ret    

c001b0e2 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b0e2:	b8 01 00 00 00       	mov    eax,0x1
c001b0e7:	c3                   	ret    

c001b0e8 <ISO9660::rename(char const*, char const*)>:
c001b0e8:	b8 01 00 00 00       	mov    eax,0x1
c001b0ed:	c3                   	ret    

c001b0ee <ISO9660::mkdir(char const*)>:
c001b0ee:	b8 01 00 00 00       	mov    eax,0x1
c001b0f3:	c3                   	ret    

c001b0f4 <ISO9660::close(void*)>:
c001b0f4:	83 ec 0c             	sub    esp,0xc
c001b0f7:	b8 04 00 00 00       	mov    eax,0x4
c001b0fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b100:	85 d2                	test   edx,edx
c001b102:	74 0e                	je     c001b112 <ISO9660::close(void*)+0x1e>
c001b104:	83 ec 0c             	sub    esp,0xc
c001b107:	52                   	push   edx
c001b108:	e8 ee 0e ff ff       	call   c000bffb <free>
c001b10d:	83 c4 10             	add    esp,0x10
c001b110:	31 c0                	xor    eax,eax
c001b112:	83 c4 0c             	add    esp,0xc
c001b115:	c3                   	ret    

c001b116 <ISO9660::closeDir(void*)>:
c001b116:	83 ec 0c             	sub    esp,0xc
c001b119:	b8 04 00 00 00       	mov    eax,0x4
c001b11e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b122:	85 d2                	test   edx,edx
c001b124:	74 0e                	je     c001b134 <ISO9660::closeDir(void*)+0x1e>
c001b126:	83 ec 0c             	sub    esp,0xc
c001b129:	52                   	push   edx
c001b12a:	e8 cc 0e ff ff       	call   c000bffb <free>
c001b12f:	83 c4 10             	add    esp,0x10
c001b132:	31 c0                	xor    eax,eax
c001b134:	83 c4 0c             	add    esp,0xc
c001b137:	c3                   	ret    

c001b138 <ISO9660::~ISO9660()>:
c001b138:	83 ec 0c             	sub    esp,0xc
c001b13b:	ba bc 33 02 c0       	mov    edx,0xc00233bc
c001b140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b144:	89 10                	mov    DWORD PTR [eax],edx
c001b146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b14a:	83 ec 0c             	sub    esp,0xc
c001b14d:	50                   	push   eax
c001b14e:	e8 fb 43 ff ff       	call   c000f54e <Filesystem::~Filesystem()>
c001b153:	83 c4 10             	add    esp,0x10
c001b156:	90                   	nop
c001b157:	83 c4 0c             	add    esp,0xc
c001b15a:	c3                   	ret    
c001b15b:	90                   	nop

c001b15c <ISO9660::~ISO9660()>:
c001b15c:	83 ec 0c             	sub    esp,0xc
c001b15f:	83 ec 0c             	sub    esp,0xc
c001b162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b166:	e8 cd ff ff ff       	call   c001b138 <ISO9660::~ISO9660()>
c001b16b:	83 c4 10             	add    esp,0x10
c001b16e:	83 ec 08             	sub    esp,0x8
c001b171:	6a 08                	push   0x8
c001b173:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b177:	e8 7b 3f ff ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c001b17c:	83 c4 10             	add    esp,0x10
c001b17f:	83 c4 0c             	add    esp,0xc
c001b182:	c3                   	ret    

c001b183 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001b183:	55                   	push   ebp
c001b184:	31 c9                	xor    ecx,ecx
c001b186:	57                   	push   edi
c001b187:	56                   	push   esi
c001b188:	53                   	push   ebx
c001b189:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b18d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001b191:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001b195:	89 eb                	mov    ebx,ebp
c001b197:	39 ce                	cmp    esi,ecx
c001b199:	7e 17                	jle    c001b1b2 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001b19b:	31 d2                	xor    edx,edx
c001b19d:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001b1a1:	7d 13                	jge    c001b1b6 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001b1a3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b1a7:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b1aa:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001b1ad:	75 0d                	jne    c001b1bc <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001b1af:	42                   	inc    edx
c001b1b0:	eb eb                	jmp    c001b19d <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001b1b2:	31 c0                	xor    eax,eax
c001b1b4:	eb 0a                	jmp    c001b1c0 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b1b6:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001b1ba:	eb 04                	jmp    c001b1c0 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b1bc:	41                   	inc    ecx
c001b1bd:	43                   	inc    ebx
c001b1be:	eb d7                	jmp    c001b197 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001b1c0:	5b                   	pop    ebx
c001b1c1:	5e                   	pop    esi
c001b1c2:	5f                   	pop    edi
c001b1c3:	5d                   	pop    ebp
c001b1c4:	c3                   	ret    

c001b1c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b1c5:	56                   	push   esi
c001b1c6:	53                   	push   ebx
c001b1c7:	52                   	push   edx
c001b1c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b1cc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b1d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b1d4:	39 0d 20 5d 02 c0    	cmp    DWORD PTR ds:0xc0025d20,ecx
c001b1da:	75 08                	jne    c001b1e4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001b1dc:	38 05 c8 41 02 c0    	cmp    BYTE PTR ds:0xc00241c8,al
c001b1e2:	74 2b                	je     c001b20f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001b1e4:	83 ec 0c             	sub    esp,0xc
c001b1e7:	31 db                	xor    ebx,ebx
c001b1e9:	a2 c8 41 02 c0       	mov    ds:0xc00241c8,al
c001b1ee:	89 0d 20 5d 02 c0    	mov    DWORD PTR ds:0xc0025d20,ecx
c001b1f4:	68 40 5d 02 c0       	push   0xc0025d40
c001b1f9:	6a 01                	push   0x1
c001b1fb:	53                   	push   ebx
c001b1fc:	0f be c0             	movsx  eax,al
c001b1ff:	51                   	push   ecx
c001b200:	ff 34 85 9c 4c 02 c0 	push   DWORD PTR [eax*4-0x3ffdb364]
c001b207:	e8 6c 76 ff ff       	call   c0012878 <LogicalDisk::read(unsigned long long, int, void*)>
c001b20c:	83 c4 20             	add    esp,0x20
c001b20f:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001b217:	c7 44 24 14 40 5d 02 c0 	mov    DWORD PTR [esp+0x14],0xc0025d40
c001b21f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b223:	58                   	pop    eax
c001b224:	5b                   	pop    ebx
c001b225:	5e                   	pop    esi
c001b226:	e9 6c 54 fe ff       	jmp    c0000697 <memcpy>
c001b22b:	90                   	nop

c001b22c <ISO9660::tryMount(LogicalDisk*, int)>:
c001b22c:	81 ec 10 08 00 00    	sub    esp,0x810
c001b232:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001b239:	83 c0 41             	add    eax,0x41
c001b23c:	0f be c0             	movsx  eax,al
c001b23f:	50                   	push   eax
c001b240:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b244:	50                   	push   eax
c001b245:	6a 10                	push   0x10
c001b247:	e8 79 ff ff ff       	call   c001b1c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b24c:	83 c4 10             	add    esp,0x10
c001b24f:	31 c0                	xor    eax,eax
c001b251:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b256:	75 1d                	jne    c001b275 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b258:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b25d:	75 16                	jne    c001b275 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b25f:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b264:	75 0f                	jne    c001b275 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b266:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b26b:	75 08                	jne    c001b275 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b26d:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b272:	0f 94 c0             	sete   al
c001b275:	81 c4 0c 08 00 00    	add    esp,0x80c
c001b27b:	c3                   	ret    

c001b27c <ISO9660::read(void*, unsigned long, void*, int*)>:
c001b27c:	55                   	push   ebp
c001b27d:	57                   	push   edi
c001b27e:	56                   	push   esi
c001b27f:	53                   	push   ebx
c001b280:	81 ec 34 08 00 00    	sub    esp,0x834
c001b286:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001b28d:	55                   	push   ebp
c001b28e:	68 83 33 02 c0       	push   0xc0023383
c001b293:	e8 85 3f ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001b298:	83 c4 10             	add    esp,0x10
c001b29b:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001b2a3:	0f 84 06 02 00 00    	je     c001b4af <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b2a9:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001b2b1:	0f 84 f8 01 00 00    	je     c001b4af <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b2b7:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b2be:	b8 01 00 00 00       	mov    eax,0x1
c001b2c3:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001b2c7:	0f 85 e7 01 00 00    	jne    c001b4b4 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b2cd:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001b2d0:	31 d2                	xor    edx,edx
c001b2d2:	89 e9                	mov    ecx,ebp
c001b2d4:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001b2d7:	01 f1                	add    ecx,esi
c001b2d9:	89 d3                	mov    ebx,edx
c001b2db:	11 fb                	adc    ebx,edi
c001b2dd:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b2e1:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b2e5:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001b2ec:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001b2ef:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001b2f2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b2f6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b2fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b2fe:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b302:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b306:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001b30a:	72 19                	jb     c001b325 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001b30c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b314:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b318:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b31b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b31f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b323:	eb 13                	jmp    c001b338 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001b325:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b329:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b32d:	29 f0                	sub    eax,esi
c001b32f:	19 fa                	sbb    edx,edi
c001b331:	89 04 24             	mov    DWORD PTR [esp],eax
c001b334:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b338:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001b33f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b342:	8b 00                	mov    eax,DWORD PTR [eax]
c001b344:	0f a4 c2 0b          	shld   edx,eax,0xb
c001b348:	c1 e0 0b             	shl    eax,0xb
c001b34b:	53                   	push   ebx
c001b34c:	01 c6                	add    esi,eax
c001b34e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b355:	11 d7                	adc    edi,edx
c001b357:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b35b:	50                   	push   eax
c001b35c:	89 fa                	mov    edx,edi
c001b35e:	8d 44 24 28          	lea    eax,[esp+0x28]
c001b362:	50                   	push   eax
c001b363:	89 f0                	mov    eax,esi
c001b365:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b369:	50                   	push   eax
c001b36a:	e8 56 fe ff ff       	call   c001b1c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b36f:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b376:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b37a:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b37e:	83 c4 10             	add    esp,0x10
c001b381:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001b384:	b8 00 08 00 00       	mov    eax,0x800
c001b389:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001b38f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001b393:	29 d0                	sub    eax,edx
c001b395:	39 c1                	cmp    ecx,eax
c001b397:	83 db 00             	sbb    ebx,0x0
c001b39a:	7d 19                	jge    c001b3b5 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001b39c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b3a1:	75 16                	jne    c001b3b9 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001b3a3:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b3aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b3b0:	e9 f6 00 00 00       	jmp    c001b4ab <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001b3b5:	89 c5                	mov    ebp,eax
c001b3b7:	eb 03                	jmp    c001b3bc <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001b3b9:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001b3bc:	51                   	push   ecx
c001b3bd:	55                   	push   ebp
c001b3be:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001b3c2:	50                   	push   eax
c001b3c3:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001b3ca:	e8 c8 52 fe ff       	call   c0000697 <memcpy>
c001b3cf:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001b3d6:	01 e8                	add    eax,ebp
c001b3d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b3dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b3e0:	89 e8                	mov    eax,ebp
c001b3e2:	99                   	cdq    
c001b3e3:	01 ee                	add    esi,ebp
c001b3e5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b3e9:	11 d7                	adc    edi,edx
c001b3eb:	29 e9                	sub    ecx,ebp
c001b3ed:	19 d3                	sbb    ebx,edx
c001b3ef:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b3f3:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b3f7:	83 c4 10             	add    esp,0x10
c001b3fa:	b8 ff 07 00 00       	mov    eax,0x7ff
c001b3ff:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001b402:	b8 00 00 00 00       	mov    eax,0x0
c001b407:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b40b:	7d 3f                	jge    c001b44c <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001b40d:	52                   	push   edx
c001b40e:	89 fa                	mov    edx,edi
c001b410:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b417:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b41b:	50                   	push   eax
c001b41c:	89 f0                	mov    eax,esi
c001b41e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b422:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b426:	50                   	push   eax
c001b427:	e8 99 fd ff ff       	call   c001b1c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b42c:	81 c6 00 08 00 00    	add    esi,0x800
c001b432:	83 d7 00             	adc    edi,0x0
c001b435:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001b43d:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001b445:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001b44a:	eb ab                	jmp    c001b3f7 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001b44c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b450:	0b 04 24             	or     eax,DWORD PTR [esp]
c001b453:	74 34                	je     c001b489 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001b455:	50                   	push   eax
c001b456:	89 fa                	mov    edx,edi
c001b458:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b45f:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b463:	50                   	push   eax
c001b464:	89 f0                	mov    eax,esi
c001b466:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b46a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001b46e:	55                   	push   ebp
c001b46f:	50                   	push   eax
c001b470:	e8 50 fd ff ff       	call   c001b1c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b475:	83 c4 0c             	add    esp,0xc
c001b478:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001b47c:	55                   	push   ebp
c001b47d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b481:	e8 11 52 fe ff       	call   c0000697 <memcpy>
c001b486:	83 c4 10             	add    esp,0x10
c001b489:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b490:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b494:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b498:	89 38                	mov    DWORD PTR [eax],edi
c001b49a:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b4a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4a5:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001b4a8:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001b4ab:	31 c0                	xor    eax,eax
c001b4ad:	eb 05                	jmp    c001b4b4 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b4af:	b8 04 00 00 00       	mov    eax,0x4
c001b4b4:	81 c4 2c 08 00 00    	add    esp,0x82c
c001b4ba:	5b                   	pop    ebx
c001b4bb:	5e                   	pop    esi
c001b4bc:	5f                   	pop    edi
c001b4bd:	5d                   	pop    ebp
c001b4be:	c3                   	ret    
c001b4bf:	90                   	nop

c001b4c0 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b4c0:	55                   	push   ebp
c001b4c1:	57                   	push   edi
c001b4c2:	56                   	push   esi
c001b4c3:	53                   	push   ebx
c001b4c4:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001b4ca:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001b4d1:	85 f6                	test   esi,esi
c001b4d3:	0f 84 62 02 00 00    	je     c001b73b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001b4d9:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001b4e1:	0f 84 54 02 00 00    	je     c001b73b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001b4e7:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001b4ea:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001b4ed:	75 0a                	jne    c001b4f9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001b4ef:	b8 07 00 00 00       	mov    eax,0x7
c001b4f4:	e9 47 02 00 00       	jmp    c001b740 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001b4f9:	50                   	push   eax
c001b4fa:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b4fe:	50                   	push   eax
c001b4ff:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b506:	53                   	push   ebx
c001b507:	8b 06                	mov    eax,DWORD PTR [esi]
c001b509:	c1 e0 0b             	shl    eax,0xb
c001b50c:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001b50f:	c1 e8 0b             	shr    eax,0xb
c001b512:	50                   	push   eax
c001b513:	e8 ad fc ff ff       	call   c001b1c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b518:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b51b:	83 c4 10             	add    esp,0x10
c001b51e:	89 c1                	mov    ecx,eax
c001b520:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001b523:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001b529:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001b52c:	84 db                	test   bl,bl
c001b52e:	0f 85 90 00 00 00    	jne    c001b5c4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001b534:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001b53a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b540:	29 c7                	sub    edi,eax
c001b542:	89 fb                	mov    ebx,edi
c001b544:	c1 fb 1f             	sar    ebx,0x1f
c001b547:	01 f8                	add    eax,edi
c001b549:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b54d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001b550:	11 da                	adc    edx,ebx
c001b552:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b555:	89 04 24             	mov    DWORD PTR [esp],eax
c001b558:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b55c:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001b55f:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001b562:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b565:	89 d8                	mov    eax,ebx
c001b567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b56b:	ba 00 00 00 00       	mov    edx,0x0
c001b570:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b574:	b8 00 00 00 00       	mov    eax,0x0
c001b579:	73 0b                	jae    c001b586 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001b57b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b57e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b582:	29 f8                	sub    eax,edi
c001b584:	19 da                	sbb    edx,ebx
c001b586:	89 d3                	mov    ebx,edx
c001b588:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b58b:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b58e:	09 c3                	or     ebx,eax
c001b590:	0f 84 59 ff ff ff    	je     c001b4ef <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001b596:	55                   	push   ebp
c001b597:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b59b:	50                   	push   eax
c001b59c:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b5a3:	53                   	push   ebx
c001b5a4:	8b 06                	mov    eax,DWORD PTR [esi]
c001b5a6:	c1 e0 0b             	shl    eax,0xb
c001b5a9:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001b5ad:	c1 e8 0b             	shr    eax,0xb
c001b5b0:	50                   	push   eax
c001b5b1:	e8 0f fc ff ff       	call   c001b1c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b5b6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b5b9:	83 c4 10             	add    esp,0x10
c001b5bc:	25 ff 07 00 00       	and    eax,0x7ff
c001b5c1:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001b5c4:	57                   	push   edi
c001b5c5:	6a 28                	push   0x28
c001b5c7:	6a 00                	push   0x0
c001b5c9:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b5cd:	50                   	push   eax
c001b5ce:	e8 fa 50 fe ff       	call   c00006cd <memset>
c001b5d3:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001b5d6:	31 d2                	xor    edx,edx
c001b5d8:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b5de:	89 f8                	mov    eax,edi
c001b5e0:	83 c0 21             	add    eax,0x21
c001b5e3:	83 d2 00             	adc    edx,0x0
c001b5e6:	89 c7                	mov    edi,eax
c001b5e8:	89 d5                	mov    ebp,edx
c001b5ea:	83 c4 10             	add    esp,0x10
c001b5ed:	31 c9                	xor    ecx,ecx
c001b5ef:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001b5f6:	83 f9 28             	cmp    ecx,0x28
c001b5f9:	0f 94 c2             	sete   dl
c001b5fc:	88 04 24             	mov    BYTE PTR [esp],al
c001b5ff:	88 d0                	mov    al,dl
c001b601:	ba ff 07 00 00       	mov    edx,0x7ff
c001b606:	39 fa                	cmp    edx,edi
c001b608:	ba 00 00 00 00       	mov    edx,0x0
c001b60d:	19 ea                	sbb    edx,ebp
c001b60f:	0f 92 c2             	setb   dl
c001b612:	09 c2                	or     edx,eax
c001b614:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001b618:	0f 94 c0             	sete   al
c001b61b:	08 d0                	or     al,dl
c001b61d:	75 16                	jne    c001b635 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b61f:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001b623:	74 10                	je     c001b635 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b625:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b628:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001b62c:	41                   	inc    ecx
c001b62d:	83 c7 01             	add    edi,0x1
c001b630:	83 d5 00             	adc    ebp,0x0
c001b633:	eb ba                	jmp    c001b5ef <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001b635:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001b63c:	83 ec 0c             	sub    esp,0xc
c001b63f:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b643:	57                   	push   edi
c001b644:	e8 a1 50 fe ff       	call   c00006ea <strlen>
c001b649:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b64d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b650:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001b657:	25 ff 07 00 00       	and    eax,0x7ff
c001b65c:	01 c8                	add    eax,ecx
c001b65e:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001b666:	5a                   	pop    edx
c001b667:	f6 80 19 f8 ff ff 02 	test   BYTE PTR [eax-0x7e7],0x2
c001b66e:	59                   	pop    ecx
c001b66f:	0f 95 c0             	setne  al
c001b672:	0f b6 c0             	movzx  eax,al
c001b675:	40                   	inc    eax
c001b676:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b67a:	57                   	push   edi
c001b67b:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001b67f:	50                   	push   eax
c001b680:	e8 e7 50 fe ff       	call   c000076c <strcpy>
c001b685:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001b689:	83 c4 10             	add    esp,0x10
c001b68c:	84 c0                	test   al,al
c001b68e:	75 21                	jne    c001b6b1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f1>
c001b690:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001b698:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b6a0:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b6a8:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001b6af:	eb 28                	jmp    c001b6d9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b6b1:	fe c8                	dec    al
c001b6b3:	75 24                	jne    c001b6d9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b6b5:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001b6bd:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b6c5:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b6cd:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001b6d4:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001b6d9:	50                   	push   eax
c001b6da:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001b6e1:	0f b6 fb             	movzx  edi,bl
c001b6e4:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b6e8:	31 db                	xor    ebx,ebx
c001b6ea:	50                   	push   eax
c001b6eb:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001b6f2:	e8 a0 4f fe ff       	call   c0000697 <memcpy>
c001b6f7:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001b6fe:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b704:	89 f9                	mov    ecx,edi
c001b706:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001b709:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b70c:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001b70f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b712:	83 c4 10             	add    esp,0x10
c001b715:	39 c7                	cmp    edi,eax
c001b717:	89 df                	mov    edi,ebx
c001b719:	19 d7                	sbb    edi,edx
c001b71b:	72 10                	jb     c001b72d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c001b71d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001b724:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001b72b:	eb 0a                	jmp    c001b737 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x277>
c001b72d:	29 c8                	sub    eax,ecx
c001b72f:	19 da                	sbb    edx,ebx
c001b731:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b734:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b737:	31 c0                	xor    eax,eax
c001b739:	eb 05                	jmp    c001b740 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001b73b:	b8 04 00 00 00       	mov    eax,0x4
c001b740:	81 c4 5c 09 00 00    	add    esp,0x95c
c001b746:	5b                   	pop    ebx
c001b747:	5e                   	pop    esi
c001b748:	5f                   	pop    edi
c001b749:	5d                   	pop    ebp
c001b74a:	c3                   	ret    

c001b74b <readRoot(unsigned int*, unsigned int*, char)>:
c001b74b:	81 ec 40 08 00 00    	sub    esp,0x840
c001b751:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001b759:	50                   	push   eax
c001b75a:	8d 44 24 38          	lea    eax,[esp+0x38]
c001b75e:	50                   	push   eax
c001b75f:	6a 10                	push   0x10
c001b761:	e8 5f fa ff ff       	call   c001b1c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b766:	83 c4 0c             	add    esp,0xc
c001b769:	6a 22                	push   0x22
c001b76b:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001b772:	50                   	push   eax
c001b773:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001b777:	50                   	push   eax
c001b778:	e8 1a 4f fe ff       	call   c0000697 <memcpy>
c001b77d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b784:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b788:	89 10                	mov    DWORD PTR [eax],edx
c001b78a:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b791:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b795:	89 10                	mov    DWORD PTR [eax],edx
c001b797:	b0 01                	mov    al,0x1
c001b799:	81 c4 4c 08 00 00    	add    esp,0x84c
c001b79f:	c3                   	ret    

c001b7a0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001b7a0:	55                   	push   ebp
c001b7a1:	57                   	push   edi
c001b7a2:	56                   	push   esi
c001b7a3:	53                   	push   ebx
c001b7a4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b7aa:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001b7b1:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001b7b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b7bc:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b7c0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b7c4:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001b7c8:	75 03                	jne    c001b7cd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b7ca:	83 c3 02             	add    ebx,0x2
c001b7cd:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001b7d0:	75 03                	jne    c001b7d5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001b7d2:	43                   	inc    ebx
c001b7d3:	eb f8                	jmp    c001b7cd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b7d5:	51                   	push   ecx
c001b7d6:	68 00 01 00 00       	push   0x100
c001b7db:	6a 00                	push   0x0
c001b7dd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b7e1:	50                   	push   eax
c001b7e2:	e8 e6 4e fe ff       	call   c00006cd <memset>
c001b7e7:	83 c4 10             	add    esp,0x10
c001b7ea:	31 d2                	xor    edx,edx
c001b7ec:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b7ef:	84 c0                	test   al,al
c001b7f1:	74 21                	je     c001b814 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001b7f3:	3c 2f                	cmp    al,0x2f
c001b7f5:	75 0b                	jne    c001b802 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001b7f7:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001b7fb:	bd 01 00 00 00       	mov    ebp,0x1
c001b800:	eb 14                	jmp    c001b816 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001b802:	8d 48 9f             	lea    ecx,[eax-0x61]
c001b805:	80 f9 19             	cmp    cl,0x19
c001b808:	77 03                	ja     c001b80d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b80a:	83 e8 20             	sub    eax,0x20
c001b80d:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001b811:	42                   	inc    edx
c001b812:	eb d8                	jmp    c001b7ec <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001b814:	31 ed                	xor    ebp,ebp
c001b816:	83 ec 0c             	sub    esp,0xc
c001b819:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001b820:	e8 c6 07 ff ff       	call   c000bfeb <malloc>
c001b825:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b82c:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001b832:	89 c6                	mov    esi,eax
c001b834:	c1 ef 0b             	shr    edi,0xb
c001b837:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001b83e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001b842:	83 c4 10             	add    esp,0x10
c001b845:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001b84a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b84e:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001b855:	74 28                	je     c001b87f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001b857:	52                   	push   edx
c001b858:	57                   	push   edi
c001b859:	50                   	push   eax
c001b85a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b85e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b865:	e8 5b f9 ff ff       	call   c001b1c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b86a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b86e:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001b875:	05 00 08 00 00       	add    eax,0x800
c001b87a:	83 c4 10             	add    esp,0x10
c001b87d:	eb cb                	jmp    c001b84a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001b87f:	83 ec 0c             	sub    esp,0xc
c001b882:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b886:	57                   	push   edi
c001b887:	e8 5e 4e fe ff       	call   c00006ea <strlen>
c001b88c:	50                   	push   eax
c001b88d:	57                   	push   edi
c001b88e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001b895:	56                   	push   esi
c001b896:	e8 e8 f8 ff ff       	call   c001b183 <__memmem(unsigned char*, int, unsigned char*, int)>
c001b89b:	83 c4 20             	add    esp,0x20
c001b89e:	85 c0                	test   eax,eax
c001b8a0:	75 13                	jne    c001b8b5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001b8a2:	83 ec 0c             	sub    esp,0xc
c001b8a5:	56                   	push   esi
c001b8a6:	e8 50 07 ff ff       	call   c000bffb <free>
c001b8ab:	83 c4 10             	add    esp,0x10
c001b8ae:	31 c0                	xor    eax,eax
c001b8b0:	e9 b3 00 00 00       	jmp    c001b968 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b8b5:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001b8b9:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001b8bd:	c1 e7 08             	shl    edi,0x8
c001b8c0:	c1 e2 10             	shl    edx,0x10
c001b8c3:	09 d7                	or     edi,edx
c001b8c5:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001b8c9:	09 d7                	or     edi,edx
c001b8cb:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001b8cf:	c1 e2 18             	shl    edx,0x18
c001b8d2:	09 d7                	or     edi,edx
c001b8d4:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001b8d8:	89 d1                	mov    ecx,edx
c001b8da:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001b8de:	c1 e1 08             	shl    ecx,0x8
c001b8e1:	c1 e2 10             	shl    edx,0x10
c001b8e4:	09 ca                	or     edx,ecx
c001b8e6:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001b8ea:	09 ca                	or     edx,ecx
c001b8ec:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001b8f0:	c1 e1 18             	shl    ecx,0x18
c001b8f3:	09 ca                	or     edx,ecx
c001b8f5:	89 e9                	mov    ecx,ebp
c001b8f7:	84 c9                	test   cl,cl
c001b8f9:	74 3c                	je     c001b937 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001b8fb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b8ff:	83 ec 0c             	sub    esp,0xc
c001b902:	56                   	push   esi
c001b903:	e8 f3 06 ff ff       	call   c000bffb <free>
c001b908:	83 c4 0c             	add    esp,0xc
c001b90b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b912:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001b917:	50                   	push   eax
c001b918:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b91f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b926:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b92a:	52                   	push   edx
c001b92b:	57                   	push   edi
c001b92c:	53                   	push   ebx
c001b92d:	e8 6e fe ff ff       	call   c001b7a0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b932:	83 c4 20             	add    esp,0x20
c001b935:	eb 31                	jmp    c001b968 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b937:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001b93e:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001b941:	d0 e8                	shr    al,1
c001b943:	83 ec 0c             	sub    esp,0xc
c001b946:	89 3b                	mov    DWORD PTR [ebx],edi
c001b948:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001b94f:	83 e0 01             	and    eax,0x1
c001b952:	89 13                	mov    DWORD PTR [ebx],edx
c001b954:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001b95b:	89 03                	mov    DWORD PTR [ebx],eax
c001b95d:	56                   	push   esi
c001b95e:	e8 98 06 ff ff       	call   c000bffb <free>
c001b963:	83 c4 10             	add    esp,0x10
c001b966:	b0 01                	mov    al,0x1
c001b968:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b96e:	5b                   	pop    ebx
c001b96f:	5e                   	pop    esi
c001b970:	5f                   	pop    edi
c001b971:	5d                   	pop    ebp
c001b972:	c3                   	ret    

c001b973 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001b973:	55                   	push   ebp
c001b974:	57                   	push   edi
c001b975:	56                   	push   esi
c001b976:	53                   	push   ebx
c001b977:	83 ec 20             	sub    esp,0x20
c001b97a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b97e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001b982:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001b987:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001b98b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b993:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b99b:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001b9a1:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001b9a7:	57                   	push   edi
c001b9a8:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b9ac:	50                   	push   eax
c001b9ad:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b9b1:	50                   	push   eax
c001b9b2:	e8 94 fd ff ff       	call   c001b74b <readRoot(unsigned int*, unsigned int*, char)>
c001b9b7:	5a                   	pop    edx
c001b9b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b9bc:	e8 29 4d fe ff       	call   c00006ea <strlen>
c001b9c1:	83 c4 10             	add    esp,0x10
c001b9c4:	83 f8 03             	cmp    eax,0x3
c001b9c7:	77 17                	ja     c001b9e0 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b9c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b9cd:	89 03                	mov    DWORD PTR [ebx],eax
c001b9cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9d3:	89 06                	mov    DWORD PTR [esi],eax
c001b9d5:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001b9dc:	b0 01                	mov    al,0x1
c001b9de:	eb 19                	jmp    c001b9f9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001b9e0:	50                   	push   eax
c001b9e1:	55                   	push   ebp
c001b9e2:	57                   	push   edi
c001b9e3:	56                   	push   esi
c001b9e4:	53                   	push   ebx
c001b9e5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b9e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b9ed:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b9f1:	e8 aa fd ff ff       	call   c001b7a0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b9f6:	83 c4 20             	add    esp,0x20
c001b9f9:	83 c4 1c             	add    esp,0x1c
c001b9fc:	5b                   	pop    ebx
c001b9fd:	5e                   	pop    esi
c001b9fe:	5f                   	pop    edi
c001b9ff:	5d                   	pop    ebp
c001ba00:	c3                   	ret    
c001ba01:	90                   	nop

c001ba02 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001ba02:	57                   	push   edi
c001ba03:	56                   	push   esi
c001ba04:	53                   	push   ebx
c001ba05:	83 ec 10             	sub    esp,0x10
c001ba08:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ba0c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ba10:	85 f6                	test   esi,esi
c001ba12:	74 7b                	je     c001ba8f <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001ba14:	85 ff                	test   edi,edi
c001ba16:	74 77                	je     c001ba8f <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001ba18:	83 ec 0c             	sub    esp,0xc
c001ba1b:	6a 1c                	push   0x1c
c001ba1d:	e8 c9 05 ff ff       	call   c000bfeb <malloc>
c001ba22:	89 07                	mov    DWORD PTR [edi],eax
c001ba24:	89 c3                	mov    ebx,eax
c001ba26:	58                   	pop    eax
c001ba27:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ba2b:	50                   	push   eax
c001ba2c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ba2f:	50                   	push   eax
c001ba30:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ba34:	50                   	push   eax
c001ba35:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ba39:	50                   	push   eax
c001ba3a:	56                   	push   esi
c001ba3b:	e8 33 ff ff ff       	call   c001b973 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ba40:	83 c4 20             	add    esp,0x20
c001ba43:	84 c0                	test   al,al
c001ba45:	74 07                	je     c001ba4e <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001ba47:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ba4c:	74 0b                	je     c001ba59 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001ba4e:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ba52:	b8 01 00 00 00       	mov    eax,0x1
c001ba57:	eb 3b                	jmp    c001ba94 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001ba59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba5d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001ba61:	89 03                	mov    DWORD PTR [ebx],eax
c001ba63:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001ba6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba6e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001ba75:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ba7c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ba7f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ba86:	8a 06                	mov    al,BYTE PTR [esi]
c001ba88:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001ba8b:	31 c0                	xor    eax,eax
c001ba8d:	eb 05                	jmp    c001ba94 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001ba8f:	b8 04 00 00 00       	mov    eax,0x4
c001ba94:	83 c4 10             	add    esp,0x10
c001ba97:	5b                   	pop    ebx
c001ba98:	5e                   	pop    esi
c001ba99:	5f                   	pop    edi
c001ba9a:	c3                   	ret    
c001ba9b:	90                   	nop

c001ba9c <ISO9660::exists(char const*)>:
c001ba9c:	83 ec 28             	sub    esp,0x28
c001ba9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001baa3:	8d 54 24 18          	lea    edx,[esp+0x18]
c001baa7:	52                   	push   edx
c001baa8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001baab:	52                   	push   edx
c001baac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001bab0:	52                   	push   edx
c001bab1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001bab5:	52                   	push   edx
c001bab6:	50                   	push   eax
c001bab7:	e8 b7 fe ff ff       	call   c001b973 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001babc:	83 c4 3c             	add    esp,0x3c
c001babf:	c3                   	ret    

c001bac0 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001bac0:	56                   	push   esi
c001bac1:	53                   	push   ebx
c001bac2:	83 ec 14             	sub    esp,0x14
c001bac5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001bac9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bacd:	85 db                	test   ebx,ebx
c001bacf:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001bad3:	0f 94 c2             	sete   dl
c001bad6:	85 f6                	test   esi,esi
c001bad8:	0f 94 c0             	sete   al
c001badb:	08 c2                	or     dl,al
c001badd:	75 68                	jne    c001bb47 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001badf:	85 c9                	test   ecx,ecx
c001bae1:	74 64                	je     c001bb47 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001bae3:	83 ec 0c             	sub    esp,0xc
c001bae6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bae9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001baef:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001baf6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bafa:	50                   	push   eax
c001bafb:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001bafe:	50                   	push   eax
c001baff:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bb03:	50                   	push   eax
c001bb04:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bb08:	50                   	push   eax
c001bb09:	51                   	push   ecx
c001bb0a:	e8 64 fe ff ff       	call   c001b973 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001bb0f:	83 c4 20             	add    esp,0x20
c001bb12:	ba 01 00 00 00       	mov    edx,0x1
c001bb17:	84 c0                	test   al,al
c001bb19:	74 31                	je     c001bb4c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001bb1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb1f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bb26:	89 03                	mov    DWORD PTR [ebx],eax
c001bb28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb2c:	85 c0                	test   eax,eax
c001bb2e:	ba 00 00 00 00       	mov    edx,0x0
c001bb33:	0f 95 06             	setne  BYTE PTR [esi]
c001bb36:	74 14                	je     c001bb4c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001bb38:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001bb3e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bb45:	eb 05                	jmp    c001bb4c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001bb47:	ba 04 00 00 00       	mov    edx,0x4
c001bb4c:	83 c4 14             	add    esp,0x14
c001bb4f:	89 d0                	mov    eax,edx
c001bb51:	5b                   	pop    ebx
c001bb52:	5e                   	pop    esi
c001bb53:	c3                   	ret    

c001bb54 <ISO9660::openDir(char const*, void**)>:
c001bb54:	57                   	push   edi
c001bb55:	56                   	push   esi
c001bb56:	53                   	push   ebx
c001bb57:	83 ec 10             	sub    esp,0x10
c001bb5a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001bb5e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001bb62:	85 f6                	test   esi,esi
c001bb64:	0f 84 95 00 00 00    	je     c001bbff <ISO9660::openDir(char const*, void**)+0xab>
c001bb6a:	85 ff                	test   edi,edi
c001bb6c:	0f 84 8d 00 00 00    	je     c001bbff <ISO9660::openDir(char const*, void**)+0xab>
c001bb72:	83 ec 0c             	sub    esp,0xc
c001bb75:	6a 1c                	push   0x1c
c001bb77:	e8 6f 04 ff ff       	call   c000bfeb <malloc>
c001bb7c:	89 07                	mov    DWORD PTR [edi],eax
c001bb7e:	89 c3                	mov    ebx,eax
c001bb80:	59                   	pop    ecx
c001bb81:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bb85:	50                   	push   eax
c001bb86:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001bb89:	50                   	push   eax
c001bb8a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bb8e:	50                   	push   eax
c001bb8f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bb93:	50                   	push   eax
c001bb94:	56                   	push   esi
c001bb95:	e8 d9 fd ff ff       	call   c001b973 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001bb9a:	83 c4 20             	add    esp,0x20
c001bb9d:	84 c0                	test   al,al
c001bb9f:	74 07                	je     c001bba8 <ISO9660::openDir(char const*, void**)+0x54>
c001bba1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bba6:	75 21                	jne    c001bbc9 <ISO9660::openDir(char const*, void**)+0x75>
c001bba8:	52                   	push   edx
c001bba9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bbad:	0f b6 c0             	movzx  eax,al
c001bbb0:	50                   	push   eax
c001bbb1:	68 96 33 02 c0       	push   0xc0023396
c001bbb6:	e8 62 36 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001bbbb:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001bbbf:	83 c4 10             	add    esp,0x10
c001bbc2:	b8 01 00 00 00       	mov    eax,0x1
c001bbc7:	eb 3b                	jmp    c001bc04 <ISO9660::openDir(char const*, void**)+0xb0>
c001bbc9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bbcd:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001bbd1:	89 03                	mov    DWORD PTR [ebx],eax
c001bbd3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001bbda:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bbde:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001bbe5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bbec:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001bbef:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001bbf6:	8a 06                	mov    al,BYTE PTR [esi]
c001bbf8:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001bbfb:	31 c0                	xor    eax,eax
c001bbfd:	eb 05                	jmp    c001bc04 <ISO9660::openDir(char const*, void**)+0xb0>
c001bbff:	b8 04 00 00 00       	mov    eax,0x4
c001bc04:	83 c4 10             	add    esp,0x10
c001bc07:	5b                   	pop    ebx
c001bc08:	5e                   	pop    esi
c001bc09:	5f                   	pop    edi
c001bc0a:	c3                   	ret    
c001bc0b:	90                   	nop

c001bc0c <ISO9660::ISO9660()>:
c001bc0c:	83 ec 0c             	sub    esp,0xc
c001bc0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc13:	83 ec 0c             	sub    esp,0xc
c001bc16:	50                   	push   eax
c001bc17:	e8 0e 39 ff ff       	call   c000f52a <Filesystem::Filesystem()>
c001bc1c:	83 c4 10             	add    esp,0x10
c001bc1f:	ba bc 33 02 c0       	mov    edx,0xc00233bc
c001bc24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc28:	89 10                	mov    DWORD PTR [eax],edx
c001bc2a:	90                   	nop
c001bc2b:	83 c4 0c             	add    esp,0xc
c001bc2e:	c3                   	ret    
c001bc2f:	90                   	nop

c001bc30 <SoundChannel::~SoundChannel()>:
c001bc30:	83 ec 0c             	sub    esp,0xc
c001bc33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc37:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001bc3a:	83 ec 0c             	sub    esp,0xc
c001bc3d:	50                   	push   eax
c001bc3e:	e8 b8 03 ff ff       	call   c000bffb <free>
c001bc43:	83 c4 10             	add    esp,0x10
c001bc46:	90                   	nop
c001bc47:	83 c4 0c             	add    esp,0xc
c001bc4a:	c3                   	ret    
c001bc4b:	90                   	nop

c001bc4c <SoundChannel::setSpeed(float)>:
c001bc4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc50:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001bc54:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001bc57:	c3                   	ret    

c001bc58 <SoundChannel::getSpeed()>:
c001bc58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc5c:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001bc5f:	c3                   	ret    

c001bc60 <SoundChannel::setVolume(int)>:
c001bc60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc64:	83 f8 64             	cmp    eax,0x64
c001bc67:	7e 05                	jle    c001bc6e <SoundChannel::setVolume(int)+0xe>
c001bc69:	b8 64 00 00 00       	mov    eax,0x64
c001bc6e:	85 c0                	test   eax,eax
c001bc70:	79 02                	jns    c001bc74 <SoundChannel::setVolume(int)+0x14>
c001bc72:	31 c0                	xor    eax,eax
c001bc74:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bc78:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001bc7b:	c3                   	ret    

c001bc7c <SoundChannel::getVolume()>:
c001bc7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc80:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bc83:	c3                   	ret    

c001bc84 <SoundChannel::pause()>:
c001bc84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc88:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001bc8c:	c3                   	ret    
c001bc8d:	90                   	nop

c001bc8e <SoundChannel::SoundChannel(int, int, int, int)>:
c001bc8e:	83 ec 1c             	sub    esp,0x1c
c001bc91:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bc95:	e8 ea ff ff ff       	call   c001bc84 <SoundChannel::pause()>
c001bc9a:	83 c4 04             	add    esp,0x4
c001bc9d:	6a 50                	push   0x50
c001bc9f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bca3:	e8 b8 ff ff ff       	call   c001bc60 <SoundChannel::setVolume(int)>
c001bca8:	83 c4 08             	add    esp,0x8
c001bcab:	d9 e8                	fld1   
c001bcad:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001bcb1:	d9 1c 24             	fstp   DWORD PTR [esp]
c001bcb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bcb8:	e8 8f ff ff ff       	call   c001bc4c <SoundChannel::setSpeed(float)>
c001bcbd:	83 c4 08             	add    esp,0x8
c001bcc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcc4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bcc8:	89 10                	mov    DWORD PTR [eax],edx
c001bcca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bcd2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bcd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcd9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bcdd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bce0:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001bce5:	75 26                	jne    c001bd0d <SoundChannel::SoundChannel(int, int, int, int)+0x7f>
c001bce7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bceb:	8b 10                	mov    edx,DWORD PTR [eax]
c001bced:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcf1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bcf4:	0f af c2             	imul   eax,edx
c001bcf7:	89 c2                	mov    edx,eax
c001bcf9:	c1 fa 1f             	sar    edx,0x1f
c001bcfc:	83 e2 03             	and    edx,0x3
c001bcff:	01 d0                	add    eax,edx
c001bd01:	c1 f8 02             	sar    eax,0x2
c001bd04:	05 a0 0f 00 00       	add    eax,0xfa0
c001bd09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bd0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd11:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bd15:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001bd18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd1c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001bd23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd27:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001bd2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd32:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bd35:	c1 e0 02             	shl    eax,0x2
c001bd38:	83 ec 0c             	sub    esp,0xc
c001bd3b:	50                   	push   eax
c001bd3c:	e8 aa 02 ff ff       	call   c000bfeb <malloc>
c001bd41:	83 c4 10             	add    esp,0x10
c001bd44:	89 c2                	mov    edx,eax
c001bd46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd4a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001bd4d:	83 ec 04             	sub    esp,0x4
c001bd50:	8d 44 24 10          	lea    eax,[esp+0x10]
c001bd54:	50                   	push   eax
c001bd55:	6a 01                	push   0x1
c001bd57:	6a 04                	push   0x4
c001bd59:	e8 97 cb fe ff       	call   c00088f5 <src_new>
c001bd5e:	83 c4 10             	add    esp,0x10
c001bd61:	89 c2                	mov    edx,eax
c001bd63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd67:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bd6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd6e:	85 c0                	test   eax,eax
c001bd70:	74 10                	je     c001bd82 <SoundChannel::SoundChannel(int, int, int, int)+0xf4>
c001bd72:	83 ec 0c             	sub    esp,0xc
c001bd75:	68 18 34 02 c0       	push   0xc0023418
c001bd7a:	e8 cd 9c ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c001bd7f:	83 c4 10             	add    esp,0x10
c001bd82:	90                   	nop
c001bd83:	83 c4 1c             	add    esp,0x1c
c001bd86:	c3                   	ret    
c001bd87:	90                   	nop

c001bd88 <SoundChannel::play()>:
c001bd88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd8c:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001bd90:	c3                   	ret    
c001bd91:	90                   	nop

c001bd92 <SoundChannel::paused()>:
c001bd92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd96:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001bd99:	c3                   	ret    

c001bd9a <SoundChannel::getSampleRate()>:
c001bd9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd9e:	8b 00                	mov    eax,DWORD PTR [eax]
c001bda0:	c3                   	ret    
c001bda1:	90                   	nop

c001bda2 <SoundChannel::getBits()>:
c001bda2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bda6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bda9:	c3                   	ret    

c001bdaa <SoundChannel::getBufferUsed()>:
c001bdaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdae:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001bdb1:	c3                   	ret    

c001bdb2 <SoundChannel::getBufferSize()>:
c001bdb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdb6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bdb9:	c3                   	ret    

c001bdba <SoundChannel::unbuffer(float*, int, int)>:
c001bdba:	53                   	push   ebx
c001bdbb:	83 ec 40             	sub    esp,0x40
c001bdbe:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001bdc2:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001bdca:	db 03                	fild   DWORD PTR [ebx]
c001bdcc:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001bdd0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bdd3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bdd7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001bdda:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bdde:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bde2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bde6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bdea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bdee:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bdf2:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001bdf5:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001bdf9:	50                   	push   eax
c001bdfa:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001bdfd:	e8 ad c7 fe ff       	call   c00085af <src_process>
c001be02:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001be06:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001be09:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001be0c:	83 c4 0c             	add    esp,0xc
c001be0f:	29 d0                	sub    eax,edx
c001be11:	c1 e0 02             	shl    eax,0x2
c001be14:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001be17:	50                   	push   eax
c001be18:	8d 04 91             	lea    eax,[ecx+edx*4]
c001be1b:	50                   	push   eax
c001be1c:	51                   	push   ecx
c001be1d:	e8 3d 48 fe ff       	call   c000065f <memmove>
c001be22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001be26:	83 c4 48             	add    esp,0x48
c001be29:	5b                   	pop    ebx
c001be2a:	c3                   	ret    
c001be2b:	90                   	nop

c001be2c <SoundChannel::buffer8(unsigned char*, int)>:
c001be2c:	53                   	push   ebx
c001be2d:	31 c0                	xor    eax,eax
c001be2f:	83 ec 08             	sub    esp,0x8
c001be32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001be36:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001be39:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001be3c:	74 35                	je     c001be73 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001be3e:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001be42:	7d 2f                	jge    c001be73 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001be44:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001be48:	d9 05 34 34 02 c0    	fld    DWORD PTR ds:0xc0023434
c001be4e:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001be52:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001be57:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001be5a:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001be5e:	40                   	inc    eax
c001be5f:	8d 59 01             	lea    ebx,[ecx+0x1]
c001be62:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001be65:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001be68:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001be6b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001be6e:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001be71:	eb c9                	jmp    c001be3c <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001be73:	83 c4 08             	add    esp,0x8
c001be76:	5b                   	pop    ebx
c001be77:	c3                   	ret    

c001be78 <SoundDevice::SoundDevice(char const*)>:
c001be78:	83 ec 1c             	sub    esp,0x1c
c001be7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be7f:	83 ec 08             	sub    esp,0x8
c001be82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001be86:	50                   	push   eax
c001be87:	e8 96 49 ff ff       	call   c0010822 <Device::Device(char const*)>
c001be8c:	83 c4 10             	add    esp,0x10
c001be8f:	ba 40 34 02 c0       	mov    edx,0xc0023440
c001be94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be98:	89 10                	mov    DWORD PTR [eax],edx
c001be9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be9e:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001bea8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001beac:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001beb6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bebe:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001bec3:	7f 19                	jg     c001bede <SoundDevice::SoundDevice(char const*)+0x66>
c001bec5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bec9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001becd:	83 c2 54             	add    edx,0x54
c001bed0:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001bed8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bedc:	eb e0                	jmp    c001bebe <SoundDevice::SoundDevice(char const*)+0x46>
c001bede:	90                   	nop
c001bedf:	83 c4 1c             	add    esp,0x1c
c001bee2:	c3                   	ret    
c001bee3:	90                   	nop

c001bee4 <SoundDevice::~SoundDevice()>:
c001bee4:	53                   	push   ebx
c001bee5:	83 ec 18             	sub    esp,0x18
c001bee8:	ba 40 34 02 c0       	mov    edx,0xc0023440
c001beed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bef1:	89 10                	mov    DWORD PTR [eax],edx
c001bef3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001befb:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001bf00:	7f 46                	jg     c001bf48 <SoundDevice::~SoundDevice()+0x64>
c001bf02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf06:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bf0a:	83 c2 54             	add    edx,0x54
c001bf0d:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001bf11:	85 c0                	test   eax,eax
c001bf13:	74 2d                	je     c001bf42 <SoundDevice::~SoundDevice()+0x5e>
c001bf15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf19:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bf1d:	83 c2 54             	add    edx,0x54
c001bf20:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001bf24:	85 db                	test   ebx,ebx
c001bf26:	74 1a                	je     c001bf42 <SoundDevice::~SoundDevice()+0x5e>
c001bf28:	83 ec 0c             	sub    esp,0xc
c001bf2b:	53                   	push   ebx
c001bf2c:	e8 ff fc ff ff       	call   c001bc30 <SoundChannel::~SoundChannel()>
c001bf31:	83 c4 10             	add    esp,0x10
c001bf34:	83 ec 08             	sub    esp,0x8
c001bf37:	6a 2c                	push   0x2c
c001bf39:	53                   	push   ebx
c001bf3a:	e8 b8 31 ff ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c001bf3f:	83 c4 10             	add    esp,0x10
c001bf42:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bf46:	eb b3                	jmp    c001befb <SoundDevice::~SoundDevice()+0x17>
c001bf48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf4c:	83 ec 0c             	sub    esp,0xc
c001bf4f:	50                   	push   eax
c001bf50:	e8 83 45 ff ff       	call   c00104d8 <Device::~Device()>
c001bf55:	83 c4 10             	add    esp,0x10
c001bf58:	90                   	nop
c001bf59:	83 c4 18             	add    esp,0x18
c001bf5c:	5b                   	pop    ebx
c001bf5d:	c3                   	ret    

c001bf5e <SoundDevice::~SoundDevice()>:
c001bf5e:	83 ec 0c             	sub    esp,0xc
c001bf61:	83 ec 0c             	sub    esp,0xc
c001bf64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf68:	e8 77 ff ff ff       	call   c001bee4 <SoundDevice::~SoundDevice()>
c001bf6d:	83 c4 10             	add    esp,0x10
c001bf70:	83 ec 08             	sub    esp,0x8
c001bf73:	68 e4 01 00 00       	push   0x1e4
c001bf78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf7c:	e8 76 31 ff ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c001bf81:	83 c4 10             	add    esp,0x10
c001bf84:	83 c4 0c             	add    esp,0xc
c001bf87:	c3                   	ret    

c001bf88 <SoundDevice::getFreeChannelNum()>:
c001bf88:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bf8c:	31 c0                	xor    eax,eax
c001bf8e:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001bf96:	74 09                	je     c001bfa1 <SoundDevice::getFreeChannelNum()+0x19>
c001bf98:	40                   	inc    eax
c001bf99:	83 f8 20             	cmp    eax,0x20
c001bf9c:	75 f0                	jne    c001bf8e <SoundDevice::getFreeChannelNum()+0x6>
c001bf9e:	83 c8 ff             	or     eax,0xffffffff
c001bfa1:	c3                   	ret    

c001bfa2 <SoundDevice::addChannel(SoundChannel*)>:
c001bfa2:	56                   	push   esi
c001bfa3:	53                   	push   ebx
c001bfa4:	51                   	push   ecx
c001bfa5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfa9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bfad:	53                   	push   ebx
c001bfae:	e8 d5 ff ff ff       	call   c001bf88 <SoundDevice::getFreeChannelNum()>
c001bfb3:	5a                   	pop    edx
c001bfb4:	83 f8 ff             	cmp    eax,0xffffffff
c001bfb7:	74 51                	je     c001c00a <SoundDevice::addChannel(SoundChannel*)+0x68>
c001bfb9:	85 f6                	test   esi,esi
c001bfbb:	74 4d                	je     c001c00a <SoundDevice::addChannel(SoundChannel*)+0x68>
c001bfbd:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001bfc4:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001bfcb:	75 30                	jne    c001bffd <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001bfcd:	83 ec 0c             	sub    esp,0xc
c001bfd0:	56                   	push   esi
c001bfd1:	e8 c4 fd ff ff       	call   c001bd9a <SoundChannel::getSampleRate()>
c001bfd6:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001bfdc:	89 34 24             	mov    DWORD PTR [esp],esi
c001bfdf:	e8 be fd ff ff       	call   c001bda2 <SoundChannel::getBits()>
c001bfe4:	83 c4 0c             	add    esp,0xc
c001bfe7:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001bfed:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bfef:	50                   	push   eax
c001bff0:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001bff6:	53                   	push   ebx
c001bff7:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001bffa:	83 c4 10             	add    esp,0x10
c001bffd:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001c003:	b8 01 00 00 00       	mov    eax,0x1
c001c008:	eb 03                	jmp    c001c00d <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001c00a:	83 c8 ff             	or     eax,0xffffffff
c001c00d:	5a                   	pop    edx
c001c00e:	5b                   	pop    ebx
c001c00f:	5e                   	pop    esi
c001c010:	c3                   	ret    
c001c011:	90                   	nop

c001c012 <SoundDevice::removeChannel(int)>:
c001c012:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c016:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c01a:	83 fa 1f             	cmp    edx,0x1f
c001c01d:	77 23                	ja     c001c042 <SoundDevice::removeChannel(int)+0x30>
c001c01f:	8d 14 90             	lea    edx,[eax+edx*4]
c001c022:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001c029:	74 17                	je     c001c042 <SoundDevice::removeChannel(int)+0x30>
c001c02b:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001c035:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001c03b:	75 05                	jne    c001c042 <SoundDevice::removeChannel(int)+0x30>
c001c03d:	8b 00                	mov    eax,DWORD PTR [eax]
c001c03f:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001c042:	c3                   	ret    
c001c043:	90                   	nop

c001c044 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001c044:	56                   	push   esi
c001c045:	53                   	push   ebx
c001c046:	31 db                	xor    ebx,ebx
c001c048:	83 ec 14             	sub    esp,0x14
c001c04b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001c04f:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001c053:	7d 55                	jge    c001c0aa <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001c055:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c059:	d9 e8                	fld1   
c001c05b:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001c05e:	d8 0d 70 34 02 c0    	fmul   DWORD PTR ds:0xc0023470
c001c064:	d8 0d 74 34 02 c0    	fmul   DWORD PTR ds:0xc0023474
c001c06a:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001c06e:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001c072:	d8 15 78 34 02 c0    	fcom   DWORD PTR ds:0xc0023478
c001c078:	df e0                	fnstsw ax
c001c07a:	9e                   	sahf   
c001c07b:	72 08                	jb     c001c085 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001c07d:	dd d8                	fstp   st(0)
c001c07f:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001c083:	eb 22                	jmp    c001c0a7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001c085:	d9 ee                	fldz   
c001c087:	d8 d9                	fcomp  st(1)
c001c089:	df e0                	fnstsw ax
c001c08b:	9e                   	sahf   
c001c08c:	72 08                	jb     c001c096 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001c08e:	dd d8                	fstp   st(0)
c001c090:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001c094:	eb 11                	jmp    c001c0a7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001c096:	83 ec 10             	sub    esp,0x10
c001c099:	d9 1c 24             	fstp   DWORD PTR [esp]
c001c09c:	e8 bb 36 00 00       	call   c001f75c <lrintf>
c001c0a1:	83 c4 10             	add    esp,0x10
c001c0a4:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001c0a7:	43                   	inc    ebx
c001c0a8:	eb a5                	jmp    c001c04f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001c0aa:	83 c4 14             	add    esp,0x14
c001c0ad:	5b                   	pop    ebx
c001c0ae:	5e                   	pop    esi
c001c0af:	c3                   	ret    

c001c0b0 <SoundDevice::getAudio(int, float*, float*)>:
c001c0b0:	55                   	push   ebp
c001c0b1:	57                   	push   edi
c001c0b2:	56                   	push   esi
c001c0b3:	53                   	push   ebx
c001c0b4:	31 db                	xor    ebx,ebx
c001c0b6:	83 ec 20             	sub    esp,0x20
c001c0b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c0bd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c0c1:	c1 e0 02             	shl    eax,0x2
c001c0c4:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c0c8:	50                   	push   eax
c001c0c9:	6a 00                	push   0x0
c001c0cb:	55                   	push   ebp
c001c0cc:	e8 fc 45 fe ff       	call   c00006cd <memset>
c001c0d1:	83 c4 10             	add    esp,0x10
c001c0d4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c0d8:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001c0df:	85 c0                	test   eax,eax
c001c0e1:	0f 84 8c 00 00 00    	je     c001c173 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c0e7:	83 ec 0c             	sub    esp,0xc
c001c0ea:	50                   	push   eax
c001c0eb:	e8 a2 fc ff ff       	call   c001bd92 <SoundChannel::paused()>
c001c0f0:	83 c4 10             	add    esp,0x10
c001c0f3:	84 c0                	test   al,al
c001c0f5:	75 7c                	jne    c001c173 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c0f7:	83 ec 0c             	sub    esp,0xc
c001c0fa:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c101:	e8 76 fb ff ff       	call   c001bc7c <SoundChannel::getVolume()>
c001c106:	83 c4 10             	add    esp,0x10
c001c109:	85 c0                	test   eax,eax
c001c10b:	74 66                	je     c001c173 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c10d:	83 ec 0c             	sub    esp,0xc
c001c110:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c117:	e8 60 fb ff ff       	call   c001bc7c <SoundChannel::getVolume()>
c001c11c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c120:	d9 05 7c 34 02 c0    	fld    DWORD PTR ds:0xc002347c
c001c126:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001c12a:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001c12e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c132:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001c138:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001c13c:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c143:	e8 72 fc ff ff       	call   c001bdba <SoundChannel::unbuffer(float*, int, int)>
c001c148:	83 c4 20             	add    esp,0x20
c001c14b:	31 d2                	xor    edx,edx
c001c14d:	39 c2                	cmp    edx,eax
c001c14f:	7d 1c                	jge    c001c16d <SoundDevice::getAudio(int, float*, float*)+0xbd>
c001c151:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001c155:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001c159:	d8 0c 91             	fmul   DWORD PTR [ecx+edx*4]
c001c15c:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001c162:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001c166:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001c16a:	42                   	inc    edx
c001c16b:	eb e0                	jmp    c001c14d <SoundDevice::getAudio(int, float*, float*)+0x9d>
c001c16d:	39 c7                	cmp    edi,eax
c001c16f:	7e 02                	jle    c001c173 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c171:	89 c7                	mov    edi,eax
c001c173:	43                   	inc    ebx
c001c174:	83 fb 20             	cmp    ebx,0x20
c001c177:	0f 85 5b ff ff ff    	jne    c001c0d8 <SoundDevice::getAudio(int, float*, float*)+0x28>
c001c17d:	83 c4 1c             	add    esp,0x1c
c001c180:	89 f8                	mov    eax,edi
c001c182:	5b                   	pop    ebx
c001c183:	5e                   	pop    esi
c001c184:	5f                   	pop    edi
c001c185:	5d                   	pop    ebp
c001c186:	c3                   	ret    
c001c187:	90                   	nop

c001c188 <PCI::open(int, int, void*)>:
c001c188:	83 ec 18             	sub    esp,0x18
c001c18b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c18f:	8b 10                	mov    edx,DWORD PTR [eax]
c001c191:	50                   	push   eax
c001c192:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001c195:	31 c0                	xor    eax,eax
c001c197:	83 c4 1c             	add    esp,0x1c
c001c19a:	c3                   	ret    
c001c19b:	90                   	nop

c001c19c <PCI::close(int, int, void*)>:
c001c19c:	31 c0                	xor    eax,eax
c001c19e:	c3                   	ret    
c001c19f:	90                   	nop

c001c1a0 <PCI::PCI()>:
c001c1a0:	83 ec 0c             	sub    esp,0xc
c001c1a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1a7:	83 ec 08             	sub    esp,0x8
c001c1aa:	68 80 34 02 c0       	push   0xc0023480
c001c1af:	50                   	push   eax
c001c1b0:	e8 f7 3c ff ff       	call   c000feac <Bus::Bus(char const*)>
c001c1b5:	83 c4 10             	add    esp,0x10
c001c1b8:	ba 2c 35 02 c0       	mov    edx,0xc002352c
c001c1bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1c1:	89 10                	mov    DWORD PTR [eax],edx
c001c1c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1c7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c1cd:	31 d2                	xor    edx,edx
c001c1cf:	88 c2                	mov    dl,al
c001c1d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1d5:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001c1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1e0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c1e6:	31 d2                	xor    edx,edx
c001c1e8:	88 c2                	mov    dl,al
c001c1ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1ee:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001c1f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1f7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c1fd:	8d 50 01             	lea    edx,[eax+0x1]
c001c200:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c204:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001c20a:	31 d2                	xor    edx,edx
c001c20c:	88 c2                	mov    dl,al
c001c20e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c212:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001c216:	83 c9 c0             	or     ecx,0xffffffc0
c001c219:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001c21d:	90                   	nop
c001c21e:	83 c4 0c             	add    esp,0xc
c001c221:	c3                   	ret    

c001c222 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c222:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c226:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c22b:	c1 e0 10             	shl    eax,0x10
c001c22e:	89 ca                	mov    edx,ecx
c001c230:	81 e2 fc 00 00 00    	and    edx,0xfc
c001c236:	09 d0                	or     eax,edx
c001c238:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001c23d:	c1 e2 08             	shl    edx,0x8
c001c240:	09 d0                	or     eax,edx
c001c242:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001c247:	c1 e2 0b             	shl    edx,0xb
c001c24a:	09 d0                	or     eax,edx
c001c24c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c251:	0d 00 00 00 80       	or     eax,0x80000000
c001c256:	ef                   	out    dx,eax
c001c257:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c25c:	ed                   	in     eax,dx
c001c25d:	83 e1 02             	and    ecx,0x2
c001c260:	0f b6 c9             	movzx  ecx,cl
c001c263:	c1 e1 03             	shl    ecx,0x3
c001c266:	d3 e8                	shr    eax,cl
c001c268:	c3                   	ret    
c001c269:	90                   	nop

c001c26a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001c26a:	6a 00                	push   0x0
c001c26c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c271:	50                   	push   eax
c001c272:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c277:	50                   	push   eax
c001c278:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c27d:	50                   	push   eax
c001c27e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c282:	e8 9b ff ff ff       	call   c001c222 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c287:	83 c4 14             	add    esp,0x14
c001c28a:	c3                   	ret    
c001c28b:	90                   	nop

c001c28c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001c28c:	6a 0e                	push   0xe
c001c28e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c293:	50                   	push   eax
c001c294:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c299:	50                   	push   eax
c001c29a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c29f:	50                   	push   eax
c001c2a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c2a4:	e8 79 ff ff ff       	call   c001c222 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2a9:	83 c4 14             	add    esp,0x14
c001c2ac:	0f b6 c0             	movzx  eax,al
c001c2af:	c3                   	ret    

c001c2b0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001c2b0:	55                   	push   ebp
c001c2b1:	57                   	push   edi
c001c2b2:	56                   	push   esi
c001c2b3:	53                   	push   ebx
c001c2b4:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001c2b9:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001c2be:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001c2c3:	6a 0a                	push   0xa
c001c2c5:	56                   	push   esi
c001c2c6:	55                   	push   ebp
c001c2c7:	57                   	push   edi
c001c2c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c2cc:	e8 51 ff ff ff       	call   c001c222 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2d1:	6a 0a                	push   0xa
c001c2d3:	89 c3                	mov    ebx,eax
c001c2d5:	56                   	push   esi
c001c2d6:	55                   	push   ebp
c001c2d7:	57                   	push   edi
c001c2d8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001c2dc:	e8 41 ff ff ff       	call   c001c222 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2e1:	83 c4 28             	add    esp,0x28
c001c2e4:	0f b6 db             	movzx  ebx,bl
c001c2e7:	25 00 ff 00 00       	and    eax,0xff00
c001c2ec:	09 d8                	or     eax,ebx
c001c2ee:	5b                   	pop    ebx
c001c2ef:	5e                   	pop    esi
c001c2f0:	5f                   	pop    edi
c001c2f1:	5d                   	pop    ebp
c001c2f2:	c3                   	ret    
c001c2f3:	90                   	nop

c001c2f4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001c2f4:	6a 08                	push   0x8
c001c2f6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c2fb:	50                   	push   eax
c001c2fc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c301:	50                   	push   eax
c001c302:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c307:	50                   	push   eax
c001c308:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c30c:	e8 11 ff ff ff       	call   c001c222 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c311:	83 c4 14             	add    esp,0x14
c001c314:	0f b6 c4             	movzx  eax,ah
c001c317:	c3                   	ret    

c001c318 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001c318:	6a 08                	push   0x8
c001c31a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c31f:	50                   	push   eax
c001c320:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c325:	50                   	push   eax
c001c326:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c32b:	50                   	push   eax
c001c32c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c330:	e8 ed fe ff ff       	call   c001c222 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c335:	83 c4 14             	add    esp,0x14
c001c338:	c3                   	ret    
c001c339:	90                   	nop

c001c33a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001c33a:	6a 3c                	push   0x3c
c001c33c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c341:	50                   	push   eax
c001c342:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c347:	50                   	push   eax
c001c348:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c34d:	50                   	push   eax
c001c34e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c352:	e8 cb fe ff ff       	call   c001c222 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c357:	83 c4 14             	add    esp,0x14
c001c35a:	c3                   	ret    
c001c35b:	90                   	nop

c001c35c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001c35c:	6a 18                	push   0x18
c001c35e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c363:	50                   	push   eax
c001c364:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c369:	50                   	push   eax
c001c36a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c36f:	50                   	push   eax
c001c370:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c374:	e8 a9 fe ff ff       	call   c001c222 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c379:	83 c4 14             	add    esp,0x14
c001c37c:	0f b6 c4             	movzx  eax,ah
c001c37f:	c3                   	ret    

c001c380 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c380:	55                   	push   ebp
c001c381:	57                   	push   edi
c001c382:	56                   	push   esi
c001c383:	53                   	push   ebx
c001c384:	50                   	push   eax
c001c385:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001c389:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001c38e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001c395:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c39a:	8d 43 12             	lea    eax,[ebx+0x12]
c001c39d:	83 c3 10             	add    ebx,0x10
c001c3a0:	0f b6 c0             	movzx  eax,al
c001c3a3:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001c3a8:	50                   	push   eax
c001c3a9:	51                   	push   ecx
c001c3aa:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c3ae:	57                   	push   edi
c001c3af:	55                   	push   ebp
c001c3b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c3b4:	e8 69 fe ff ff       	call   c001c222 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c3b9:	0f b6 db             	movzx  ebx,bl
c001c3bc:	53                   	push   ebx
c001c3bd:	89 c6                	mov    esi,eax
c001c3bf:	c1 e6 10             	shl    esi,0x10
c001c3c2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c3c6:	51                   	push   ecx
c001c3c7:	57                   	push   edi
c001c3c8:	55                   	push   ebp
c001c3c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c3cd:	e8 50 fe ff ff       	call   c001c222 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c3d2:	83 c4 2c             	add    esp,0x2c
c001c3d5:	0f b7 c0             	movzx  eax,ax
c001c3d8:	5b                   	pop    ebx
c001c3d9:	09 f0                	or     eax,esi
c001c3db:	5e                   	pop    esi
c001c3dc:	5f                   	pop    edi
c001c3dd:	5d                   	pop    ebp
c001c3de:	c3                   	ret    
c001c3df:	90                   	nop

c001c3e0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001c3e0:	53                   	push   ebx
c001c3e1:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c3e6:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c3eb:	c1 e1 10             	shl    ecx,0x10
c001c3ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c3f2:	25 fc 00 00 00       	and    eax,0xfc
c001c3f7:	09 c1                	or     ecx,eax
c001c3f9:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c3fe:	c1 e0 08             	shl    eax,0x8
c001c401:	09 c1                	or     ecx,eax
c001c403:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001c408:	c1 e0 0b             	shl    eax,0xb
c001c40b:	09 c1                	or     ecx,eax
c001c40d:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001c413:	89 c8                	mov    eax,ecx
c001c415:	ef                   	out    dx,eax
c001c416:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c41b:	ed                   	in     eax,dx
c001c41c:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001c421:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001c426:	74 0a                	je     c001c432 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001c428:	0f b7 d8             	movzx  ebx,ax
c001c42b:	89 d0                	mov    eax,edx
c001c42d:	c1 e0 10             	shl    eax,0x10
c001c430:	eb 05                	jmp    c001c437 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001c432:	66 31 c0             	xor    ax,ax
c001c435:	89 d3                	mov    ebx,edx
c001c437:	09 c3                	or     ebx,eax
c001c439:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c43e:	89 c8                	mov    eax,ecx
c001c440:	ef                   	out    dx,eax
c001c441:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c446:	89 d8                	mov    eax,ebx
c001c448:	ef                   	out    dx,eax
c001c449:	5b                   	pop    ebx
c001c44a:	c3                   	ret    
c001c44b:	90                   	nop

c001c44c <PCI::checkBus(unsigned char)>:
c001c44c:	56                   	push   esi
c001c44d:	31 f6                	xor    esi,esi
c001c44f:	53                   	push   ebx
c001c450:	51                   	push   ecx
c001c451:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c001c455:	52                   	push   edx
c001c456:	56                   	push   esi
c001c457:	46                   	inc    esi
c001c458:	0f b6 c3             	movzx  eax,bl
c001c45b:	50                   	push   eax
c001c45c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c460:	e8 4d 03 00 00       	call   c001c7b2 <PCI::checkDevice(unsigned char, unsigned char)>
c001c465:	83 c4 10             	add    esp,0x10
c001c468:	83 fe 20             	cmp    esi,0x20
c001c46b:	75 e8                	jne    c001c455 <PCI::checkBus(unsigned char)+0x9>
c001c46d:	58                   	pop    eax
c001c46e:	5b                   	pop    ebx
c001c46f:	5e                   	pop    esi
c001c470:	c3                   	ret    
c001c471:	90                   	nop

c001c472 <PCI::foundDevice(PCIDeviceInfo)>:
c001c472:	55                   	push   ebp
c001c473:	57                   	push   edi
c001c474:	56                   	push   esi
c001c475:	53                   	push   ebx
c001c476:	83 ec 1c             	sub    esp,0x1c
c001c479:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c47d:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001c483:	0f 84 51 01 00 00    	je     c001c5da <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c489:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c48d:	66 81 f9 06 04       	cmp    cx,0x406
c001c492:	75 2c                	jne    c001c4c0 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001c494:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001c499:	50                   	push   eax
c001c49a:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001c49f:	50                   	push   eax
c001c4a0:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001c4a5:	50                   	push   eax
c001c4a6:	56                   	push   esi
c001c4a7:	e8 b0 fe ff ff       	call   c001c35c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c4ac:	0f b6 c0             	movzx  eax,al
c001c4af:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c4b3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001c4b7:	83 c4 2c             	add    esp,0x2c
c001c4ba:	5b                   	pop    ebx
c001c4bb:	5e                   	pop    esi
c001c4bc:	5f                   	pop    edi
c001c4bd:	5d                   	pop    ebp
c001c4be:	eb 8c                	jmp    c001c44c <PCI::checkBus(unsigned char)>
c001c4c0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c4c4:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001c4ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c4ce:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001c4d2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c4d6:	88 d3                	mov    bl,dl
c001c4d8:	85 c0                	test   eax,eax
c001c4da:	74 33                	je     c001c50f <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001c4dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c4df:	85 d2                	test   edx,edx
c001c4e1:	74 28                	je     c001c50b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c4e3:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001c4e9:	31 ef                	xor    edi,ebp
c001c4eb:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001c4f1:	75 18                	jne    c001c50b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c4f3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c4f7:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001c4fd:	75 0c                	jne    c001c50b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c4ff:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001c505:	0f 84 cf 00 00 00    	je     c001c5da <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c50b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c50d:	eb c9                	jmp    c001c4d8 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001c50f:	66 81 f9 01 06       	cmp    cx,0x601
c001c514:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001c518:	75 18                	jne    c001c532 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001c51a:	83 ec 0c             	sub    esp,0xc
c001c51d:	68 58 01 00 00       	push   0x158
c001c522:	e8 c1 2b ff ff       	call   c000f0e8 <operator new(unsigned long)>
c001c527:	59                   	pop    ecx
c001c528:	89 c5                	mov    ebp,eax
c001c52a:	5f                   	pop    edi
c001c52b:	68 88 34 02 c0       	push   0xc0023488
c001c530:	eb 7d                	jmp    c001c5af <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001c532:	66 81 f9 01 01       	cmp    cx,0x101
c001c537:	75 60                	jne    c001c599 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001c539:	83 ec 0c             	sub    esp,0xc
c001c53c:	68 70 02 00 00       	push   0x270
c001c541:	e8 a2 2b ff ff       	call   c000f0e8 <operator new(unsigned long)>
c001c546:	89 04 24             	mov    DWORD PTR [esp],eax
c001c549:	89 c5                	mov    ebp,eax
c001c54b:	e8 26 03 00 00       	call   c001c876 <IDE::IDE()>
c001c550:	58                   	pop    eax
c001c551:	5a                   	pop    edx
c001c552:	55                   	push   ebp
c001c553:	56                   	push   esi
c001c554:	e8 d9 40 ff ff       	call   c0010632 <Device::addChild(Device*)>
c001c559:	83 ec 1c             	sub    esp,0x1c
c001c55c:	b9 09 00 00 00       	mov    ecx,0x9
c001c561:	fc                   	cld    
c001c562:	89 e7                	mov    edi,esp
c001c564:	89 de                	mov    esi,ebx
c001c566:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c568:	55                   	push   ebp
c001c569:	e8 a2 3f ff ff       	call   c0010510 <Device::preOpenPCI(PCIDeviceInfo)>
c001c56e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c571:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001c575:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001c57d:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001c585:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001c58d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c590:	83 c4 4c             	add    esp,0x4c
c001c593:	5b                   	pop    ebx
c001c594:	5e                   	pop    esi
c001c595:	5f                   	pop    edi
c001c596:	5d                   	pop    ebp
c001c597:	ff e0                	jmp    eax
c001c599:	83 ec 0c             	sub    esp,0xc
c001c59c:	68 58 01 00 00       	push   0x158
c001c5a1:	e8 42 2b ff ff       	call   c000f0e8 <operator new(unsigned long)>
c001c5a6:	59                   	pop    ecx
c001c5a7:	89 c5                	mov    ebp,eax
c001c5a9:	5f                   	pop    edi
c001c5aa:	68 a7 34 02 c0       	push   0xc00234a7
c001c5af:	55                   	push   ebp
c001c5b0:	e8 69 43 ff ff       	call   c001091e <DriverlessDevice::DriverlessDevice(char const*)>
c001c5b5:	58                   	pop    eax
c001c5b6:	5a                   	pop    edx
c001c5b7:	55                   	push   ebp
c001c5b8:	56                   	push   esi
c001c5b9:	e8 74 40 ff ff       	call   c0010632 <Device::addChild(Device*)>
c001c5be:	b9 09 00 00 00       	mov    ecx,0x9
c001c5c3:	fc                   	cld    
c001c5c4:	89 df                	mov    edi,ebx
c001c5c6:	89 de                	mov    esi,ebx
c001c5c8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c5ca:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001c5ce:	83 c4 2c             	add    esp,0x2c
c001c5d1:	5b                   	pop    ebx
c001c5d2:	5e                   	pop    esi
c001c5d3:	5f                   	pop    edi
c001c5d4:	5d                   	pop    ebp
c001c5d5:	e9 36 3f ff ff       	jmp    c0010510 <Device::preOpenPCI(PCIDeviceInfo)>
c001c5da:	83 c4 1c             	add    esp,0x1c
c001c5dd:	5b                   	pop    ebx
c001c5de:	5e                   	pop    esi
c001c5df:	5f                   	pop    edi
c001c5e0:	5d                   	pop    ebp
c001c5e1:	c3                   	ret    

c001c5e2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c5e2:	55                   	push   ebp
c001c5e3:	57                   	push   edi
c001c5e4:	56                   	push   esi
c001c5e5:	53                   	push   ebx
c001c5e6:	83 ec 5c             	sub    esp,0x5c
c001c5e9:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001c5ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c5f1:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001c5f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c5f9:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001c5fd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c601:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001c606:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001c60b:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001c610:	6a 0c                	push   0xc
c001c612:	55                   	push   ebp
c001c613:	53                   	push   ebx
c001c614:	57                   	push   edi
c001c615:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001c61c:	e8 01 fc ff ff       	call   c001c222 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c621:	83 c4 0c             	add    esp,0xc
c001c624:	6a 00                	push   0x0
c001c626:	68 c1 34 02 c0       	push   0xc00234c1
c001c62b:	e8 ed 2b ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001c630:	55                   	push   ebp
c001c631:	53                   	push   ebx
c001c632:	57                   	push   edi
c001c633:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c63a:	e8 71 fc ff ff       	call   c001c2b0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c63f:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001c644:	83 c4 20             	add    esp,0x20
c001c647:	55                   	push   ebp
c001c648:	53                   	push   ebx
c001c649:	57                   	push   edi
c001c64a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c64e:	e8 e7 fc ff ff       	call   c001c33a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c653:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001c65a:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001c65e:	55                   	push   ebp
c001c65f:	53                   	push   ebx
c001c660:	57                   	push   edi
c001c661:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c668:	e8 b5 fb ff ff       	call   c001c222 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c66d:	0f b6 c4             	movzx  eax,ah
c001c670:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c674:	83 c4 18             	add    esp,0x18
c001c677:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c67b:	68 d5 34 02 c0       	push   0xc00234d5
c001c680:	e8 98 2b ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001c685:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001c689:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001c68d:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001c692:	83 c4 10             	add    esp,0x10
c001c695:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001c69b:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001c6a2:	74 6c                	je     c001c710 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001c6a4:	31 f6                	xor    esi,esi
c001c6a6:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c001c6ac:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c6b2:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001c6b8:	7e 56                	jle    c001c710 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001c6ba:	8d 14 f2             	lea    edx,[edx+esi*8]
c001c6bd:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001c6c4:	39 cb                	cmp    ebx,ecx
c001c6c6:	75 45                	jne    c001c70d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001c6c8:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001c6cf:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001c6d3:	75 38                	jne    c001c70d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001c6d5:	83 ec 0c             	sub    esp,0xc
c001c6d8:	68 e4 34 02 c0       	push   0xc00234e4
c001c6dd:	e8 3b 2b ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001c6e2:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c001c6e8:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c6ee:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001c6f6:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001c6fa:	52                   	push   edx
c001c6fb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c6ff:	53                   	push   ebx
c001c700:	68 09 35 02 c0       	push   0xc0023509
c001c705:	e8 13 2b ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001c70a:	83 c4 20             	add    esp,0x20
c001c70d:	46                   	inc    esi
c001c70e:	eb 96                	jmp    c001c6a6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001c710:	31 d2                	xor    edx,edx
c001c712:	83 ec 0c             	sub    esp,0xc
c001c715:	55                   	push   ebp
c001c716:	53                   	push   ebx
c001c717:	57                   	push   edi
c001c718:	52                   	push   edx
c001c719:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c71d:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c724:	e8 57 fc ff ff       	call   c001c380 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c729:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c72d:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001c731:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c735:	42                   	inc    edx
c001c736:	83 c4 20             	add    esp,0x20
c001c739:	83 fa 06             	cmp    edx,0x6
c001c73c:	75 d4                	jne    c001c712 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001c73e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c742:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001c746:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001c74a:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001c74e:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001c752:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001c756:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c75b:	86 e0                	xchg   al,ah
c001c75d:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001c762:	55                   	push   ebp
c001c763:	53                   	push   ebx
c001c764:	57                   	push   edi
c001c765:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c769:	e8 86 fb ff ff       	call   c001c2f4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c76e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c772:	55                   	push   ebp
c001c773:	53                   	push   ebx
c001c774:	57                   	push   edi
c001c775:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c77c:	e8 e9 fa ff ff       	call   c001c26a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c781:	83 ec 0c             	sub    esp,0xc
c001c784:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001c789:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001c78d:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001c791:	b9 09 00 00 00       	mov    ecx,0x9
c001c796:	fc                   	cld    
c001c797:	89 e7                	mov    edi,esp
c001c799:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c79b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001c7a2:	e8 cb fc ff ff       	call   c001c472 <PCI::foundDevice(PCIDeviceInfo)>
c001c7a7:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c7ad:	5b                   	pop    ebx
c001c7ae:	5e                   	pop    esi
c001c7af:	5f                   	pop    edi
c001c7b0:	5d                   	pop    ebp
c001c7b1:	c3                   	ret    

c001c7b2 <PCI::checkDevice(unsigned char, unsigned char)>:
c001c7b2:	55                   	push   ebp
c001c7b3:	57                   	push   edi
c001c7b4:	56                   	push   esi
c001c7b5:	53                   	push   ebx
c001c7b6:	83 ec 0c             	sub    esp,0xc
c001c7b9:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c7be:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c7c2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c7c7:	6a 00                	push   0x0
c001c7c9:	56                   	push   esi
c001c7ca:	57                   	push   edi
c001c7cb:	55                   	push   ebp
c001c7cc:	e8 99 fa ff ff       	call   c001c26a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c7d1:	6a 00                	push   0x0
c001c7d3:	56                   	push   esi
c001c7d4:	57                   	push   edi
c001c7d5:	55                   	push   ebp
c001c7d6:	e8 07 fe ff ff       	call   c001c5e2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c7db:	83 c4 20             	add    esp,0x20
c001c7de:	6a 00                	push   0x0
c001c7e0:	56                   	push   esi
c001c7e1:	57                   	push   edi
c001c7e2:	55                   	push   ebp
c001c7e3:	e8 a4 fa ff ff       	call   c001c28c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c7e8:	83 c4 10             	add    esp,0x10
c001c7eb:	84 c0                	test   al,al
c001c7ed:	79 27                	jns    c001c816 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c7ef:	bb 01 00 00 00       	mov    ebx,0x1
c001c7f4:	53                   	push   ebx
c001c7f5:	56                   	push   esi
c001c7f6:	57                   	push   edi
c001c7f7:	55                   	push   ebp
c001c7f8:	e8 6d fa ff ff       	call   c001c26a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c7fd:	83 c4 10             	add    esp,0x10
c001c800:	66 40                	inc    ax
c001c802:	74 0c                	je     c001c810 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001c804:	53                   	push   ebx
c001c805:	56                   	push   esi
c001c806:	57                   	push   edi
c001c807:	55                   	push   ebp
c001c808:	e8 d5 fd ff ff       	call   c001c5e2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c80d:	83 c4 10             	add    esp,0x10
c001c810:	43                   	inc    ebx
c001c811:	83 fb 08             	cmp    ebx,0x8
c001c814:	75 de                	jne    c001c7f4 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c816:	83 c4 0c             	add    esp,0xc
c001c819:	5b                   	pop    ebx
c001c81a:	5e                   	pop    esi
c001c81b:	5f                   	pop    edi
c001c81c:	5d                   	pop    ebp
c001c81d:	c3                   	ret    

c001c81e <PCI::detect()>:
c001c81e:	56                   	push   esi
c001c81f:	53                   	push   ebx
c001c820:	53                   	push   ebx
c001c821:	31 db                	xor    ebx,ebx
c001c823:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c827:	6a 00                	push   0x0
c001c829:	6a 00                	push   0x0
c001c82b:	6a 00                	push   0x0
c001c82d:	56                   	push   esi
c001c82e:	e8 59 fa ff ff       	call   c001c28c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c833:	83 c4 10             	add    esp,0x10
c001c836:	a8 80                	test   al,0x80
c001c838:	75 21                	jne    c001c85b <PCI::detect()+0x3d>
c001c83a:	51                   	push   ecx
c001c83b:	51                   	push   ecx
c001c83c:	6a 00                	push   0x0
c001c83e:	56                   	push   esi
c001c83f:	e8 08 fc ff ff       	call   c001c44c <PCI::checkBus(unsigned char)>
c001c844:	83 c4 10             	add    esp,0x10
c001c847:	eb 24                	jmp    c001c86d <PCI::detect()+0x4f>
c001c849:	52                   	push   edx
c001c84a:	52                   	push   edx
c001c84b:	53                   	push   ebx
c001c84c:	43                   	inc    ebx
c001c84d:	56                   	push   esi
c001c84e:	e8 f9 fb ff ff       	call   c001c44c <PCI::checkBus(unsigned char)>
c001c853:	83 c4 10             	add    esp,0x10
c001c856:	83 fb 08             	cmp    ebx,0x8
c001c859:	74 12                	je     c001c86d <PCI::detect()+0x4f>
c001c85b:	53                   	push   ebx
c001c85c:	6a 00                	push   0x0
c001c85e:	6a 00                	push   0x0
c001c860:	56                   	push   esi
c001c861:	e8 04 fa ff ff       	call   c001c26a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c866:	83 c4 10             	add    esp,0x10
c001c869:	66 40                	inc    ax
c001c86b:	74 dc                	je     c001c849 <PCI::detect()+0x2b>
c001c86d:	58                   	pop    eax
c001c86e:	5b                   	pop    ebx
c001c86f:	5e                   	pop    esi
c001c870:	c3                   	ret    
c001c871:	90                   	nop

c001c872 <IDE::close(int, int, void*)>:
c001c872:	83 c8 ff             	or     eax,0xffffffff
c001c875:	c3                   	ret    

c001c876 <IDE::IDE()>:
c001c876:	83 ec 0c             	sub    esp,0xc
c001c879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c87d:	83 ec 08             	sub    esp,0x8
c001c880:	68 50 35 02 c0       	push   0xc0023550
c001c885:	50                   	push   eax
c001c886:	e8 29 41 ff ff       	call   c00109b4 <HardDiskController::HardDiskController(char const*)>
c001c88b:	83 c4 10             	add    esp,0x10
c001c88e:	ba 90 37 02 c0       	mov    edx,0xc0023790
c001c893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c897:	89 10                	mov    DWORD PTR [eax],edx
c001c899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c89d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c8a4:	90                   	nop
c001c8a5:	83 c4 0c             	add    esp,0xc
c001c8a8:	c3                   	ret    
c001c8a9:	90                   	nop

c001c8aa <IDE::prepareInterrupt(unsigned char)>:
c001c8aa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c8af:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c8b3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c8bb:	c3                   	ret    

c001c8bc <selectDrive(unsigned char, unsigned char)>:
c001c8bc:	c3                   	ret    
c001c8bd:	90                   	nop

c001c8be <IDE::getBase(unsigned char)>:
c001c8be:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c8c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8c7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c8cf:	c3                   	ret    

c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c8d0:	55                   	push   ebp
c001c8d1:	57                   	push   edi
c001c8d2:	56                   	push   esi
c001c8d3:	53                   	push   ebx
c001c8d4:	83 ec 1c             	sub    esp,0x1c
c001c8d7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c8db:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c8df:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c8e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c8e7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c8ea:	80 f9 03             	cmp    cl,0x3
c001c8ed:	77 51                	ja     c001c940 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001c8ef:	0f b6 f2             	movzx  esi,dl
c001c8f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8f6:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c8f9:	0f b6 db             	movzx  ebx,bl
c001c8fc:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001c900:	83 ca 80             	or     edx,0xffffff80
c001c903:	0f b6 d2             	movzx  edx,dl
c001c906:	52                   	push   edx
c001c907:	6a 0c                	push   0xc
c001c909:	56                   	push   esi
c001c90a:	57                   	push   edi
c001c90b:	e8 c0 ff ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c910:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001c915:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c919:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c91d:	ee                   	out    dx,al
c001c91e:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001c923:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001c927:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001c92b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c92f:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c937:	83 c4 2c             	add    esp,0x2c
c001c93a:	5b                   	pop    ebx
c001c93b:	5e                   	pop    esi
c001c93c:	5f                   	pop    edi
c001c93d:	5d                   	pop    ebp
c001c93e:	eb 90                	jmp    c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c940:	80 fb 07             	cmp    bl,0x7
c001c943:	77 12                	ja     c001c957 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001c945:	0f b6 d2             	movzx  edx,dl
c001c948:	0f b6 db             	movzx  ebx,bl
c001c94b:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001c953:	89 da                	mov    edx,ebx
c001c955:	eb 2f                	jmp    c001c986 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c957:	80 fb 0d             	cmp    bl,0xd
c001c95a:	77 13                	ja     c001c96f <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001c95c:	0f b6 d2             	movzx  edx,dl
c001c95f:	0f b6 db             	movzx  ebx,bl
c001c962:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001c969:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c96d:	eb 17                	jmp    c001c986 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c96f:	80 fb 15             	cmp    bl,0x15
c001c972:	77 13                	ja     c001c987 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c974:	0f b6 d2             	movzx  edx,dl
c001c977:	0f b6 db             	movzx  ebx,bl
c001c97a:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001c982:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c986:	ee                   	out    dx,al
c001c987:	83 c4 1c             	add    esp,0x1c
c001c98a:	5b                   	pop    ebx
c001c98b:	5e                   	pop    esi
c001c98c:	5f                   	pop    edi
c001c98d:	5d                   	pop    ebp
c001c98e:	c3                   	ret    
c001c98f:	90                   	nop

c001c990 <IDE::read(unsigned char, unsigned char)>:
c001c990:	55                   	push   ebp
c001c991:	57                   	push   edi
c001c992:	56                   	push   esi
c001c993:	53                   	push   ebx
c001c994:	83 ec 1c             	sub    esp,0x1c
c001c997:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c99b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c99f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c9a3:	8d 43 f8             	lea    eax,[ebx-0x8]
c001c9a6:	3c 03                	cmp    al,0x3
c001c9a8:	77 43                	ja     c001c9ed <IDE::read(unsigned char, unsigned char)+0x5d>
c001c9aa:	0f b6 f2             	movzx  esi,dl
c001c9ad:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c9b0:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001c9b4:	83 c8 80             	or     eax,0xffffff80
c001c9b7:	0f b6 c0             	movzx  eax,al
c001c9ba:	50                   	push   eax
c001c9bb:	6a 0c                	push   0xc
c001c9bd:	56                   	push   esi
c001c9be:	57                   	push   edi
c001c9bf:	e8 0c ff ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9c4:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001c9c9:	0f b6 c3             	movzx  eax,bl
c001c9cc:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001c9d0:	ec                   	in     al,dx
c001c9d1:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001c9d6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c9da:	52                   	push   edx
c001c9db:	6a 0c                	push   0xc
c001c9dd:	56                   	push   esi
c001c9de:	57                   	push   edi
c001c9df:	e8 ec fe ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9e4:	83 c4 20             	add    esp,0x20
c001c9e7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c9eb:	eb 49                	jmp    c001ca36 <IDE::read(unsigned char, unsigned char)+0xa6>
c001c9ed:	80 fb 07             	cmp    bl,0x7
c001c9f0:	77 12                	ja     c001ca04 <IDE::read(unsigned char, unsigned char)+0x74>
c001c9f2:	0f b6 d2             	movzx  edx,dl
c001c9f5:	0f b6 c3             	movzx  eax,bl
c001c9f8:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001ca00:	89 c2                	mov    edx,eax
c001ca02:	eb 31                	jmp    c001ca35 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ca04:	80 fb 0d             	cmp    bl,0xd
c001ca07:	77 13                	ja     c001ca1c <IDE::read(unsigned char, unsigned char)+0x8c>
c001ca09:	0f b6 d2             	movzx  edx,dl
c001ca0c:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001ca13:	0f b6 d3             	movzx  edx,bl
c001ca16:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ca1a:	eb 19                	jmp    c001ca35 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ca1c:	31 c0                	xor    eax,eax
c001ca1e:	80 fb 15             	cmp    bl,0x15
c001ca21:	77 13                	ja     c001ca36 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ca23:	0f b6 d2             	movzx  edx,dl
c001ca26:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001ca2e:	0f b6 d3             	movzx  edx,bl
c001ca31:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ca35:	ec                   	in     al,dx
c001ca36:	83 c4 1c             	add    esp,0x1c
c001ca39:	5b                   	pop    ebx
c001ca3a:	5e                   	pop    esi
c001ca3b:	5f                   	pop    edi
c001ca3c:	5d                   	pop    ebp
c001ca3d:	c3                   	ret    

c001ca3e <IDE::waitInterrupt(unsigned char)>:
c001ca3e:	57                   	push   edi
c001ca3f:	56                   	push   esi
c001ca40:	31 f6                	xor    esi,esi
c001ca42:	53                   	push   ebx
c001ca43:	83 ec 10             	sub    esp,0x10
c001ca46:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001ca4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ca4e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ca52:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001ca57:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001ca5e:	84 db                	test   bl,bl
c001ca60:	75 37                	jne    c001ca99 <IDE::waitInterrupt(unsigned char)+0x5b>
c001ca62:	52                   	push   edx
c001ca63:	6a 0c                	push   0xc
c001ca65:	50                   	push   eax
c001ca66:	57                   	push   edi
c001ca67:	e8 24 ff ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001ca6c:	83 c4 10             	add    esp,0x10
c001ca6f:	a8 01                	test   al,0x1
c001ca71:	75 2e                	jne    c001caa1 <IDE::waitInterrupt(unsigned char)+0x63>
c001ca73:	f7 c6 04 00 00 00    	test   esi,0x4
c001ca79:	75 16                	jne    c001ca91 <IDE::waitInterrupt(unsigned char)+0x53>
c001ca7b:	83 fe 32             	cmp    esi,0x32
c001ca7e:	7e 11                	jle    c001ca91 <IDE::waitInterrupt(unsigned char)+0x53>
c001ca80:	50                   	push   eax
c001ca81:	50                   	push   eax
c001ca82:	6a 00                	push   0x0
c001ca84:	68 80 96 98 00       	push   0x989680
c001ca89:	e8 25 c5 ff ff       	call   c0018fb3 <nanoSleep(unsigned long long)>
c001ca8e:	83 c4 10             	add    esp,0x10
c001ca91:	83 fe 3c             	cmp    esi,0x3c
c001ca94:	74 0b                	je     c001caa1 <IDE::waitInterrupt(unsigned char)+0x63>
c001ca96:	46                   	inc    esi
c001ca97:	eb b9                	jmp    c001ca52 <IDE::waitInterrupt(unsigned char)+0x14>
c001ca99:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001caa1:	83 c4 10             	add    esp,0x10
c001caa4:	88 d8                	mov    al,bl
c001caa6:	5b                   	pop    ebx
c001caa7:	5e                   	pop    esi
c001caa8:	5f                   	pop    edi
c001caa9:	c3                   	ret    

c001caaa <ideChannel0IRQHandler(regs*, void*)>:
c001caaa:	83 ec 10             	sub    esp,0x10
c001caad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cab1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001cab8:	6a 07                	push   0x7
c001caba:	6a 00                	push   0x0
c001cabc:	50                   	push   eax
c001cabd:	e8 ce fe ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001cac2:	83 c4 1c             	add    esp,0x1c
c001cac5:	c3                   	ret    

c001cac6 <ideChannel1IRQHandler(regs*, void*)>:
c001cac6:	83 ec 10             	sub    esp,0x10
c001cac9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cacd:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001cad4:	6a 07                	push   0x7
c001cad6:	6a 01                	push   0x1
c001cad8:	50                   	push   eax
c001cad9:	e8 b2 fe ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001cade:	83 c4 1c             	add    esp,0x1c
c001cae1:	c3                   	ret    

c001cae2 <IDE::enableIRQs(unsigned char, bool)>:
c001cae2:	57                   	push   edi
c001cae3:	56                   	push   esi
c001cae4:	be 04 00 00 00       	mov    esi,0x4
c001cae9:	53                   	push   ebx
c001caea:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001caef:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001caf4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001caf8:	0f 94 c0             	sete   al
c001cafb:	01 c0                	add    eax,eax
c001cafd:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001cb04:	0f b6 c0             	movzx  eax,al
c001cb07:	50                   	push   eax
c001cb08:	6a 0c                	push   0xc
c001cb0a:	57                   	push   edi
c001cb0b:	53                   	push   ebx
c001cb0c:	e8 bf fd ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb11:	83 c4 10             	add    esp,0x10
c001cb14:	50                   	push   eax
c001cb15:	6a 0c                	push   0xc
c001cb17:	57                   	push   edi
c001cb18:	53                   	push   ebx
c001cb19:	e8 72 fe ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001cb1e:	83 c4 10             	add    esp,0x10
c001cb21:	4e                   	dec    esi
c001cb22:	75 f0                	jne    c001cb14 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001cb24:	5b                   	pop    ebx
c001cb25:	5e                   	pop    esi
c001cb26:	5f                   	pop    edi
c001cb27:	c3                   	ret    

c001cb28 <IDE::open(int, int, void*)>:
c001cb28:	55                   	push   ebp
c001cb29:	57                   	push   edi
c001cb2a:	56                   	push   esi
c001cb2b:	53                   	push   ebx
c001cb2c:	83 ec 1c             	sub    esp,0x1c
c001cb2f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cb33:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001cb3c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001cb45:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001cb4c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001cb53:	0f 85 b2 02 00 00    	jne    c001ce0b <IDE::open(int, int, void*)+0x2e3>
c001cb59:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001cb5f:	88 04 24             	mov    BYTE PTR [esp],al
c001cb62:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001cb65:	83 e0 7f             	and    eax,0x7f
c001cb68:	83 f8 05             	cmp    eax,0x5
c001cb6b:	74 05                	je     c001cb72 <IDE::open(int, int, void*)+0x4a>
c001cb6d:	83 f8 0f             	cmp    eax,0xf
c001cb70:	75 32                	jne    c001cba4 <IDE::open(int, int, void*)+0x7c>
c001cb72:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001cb78:	83 e0 fc             	and    eax,0xfffffffc
c001cb7b:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001cb82:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001cb88:	83 e0 fc             	and    eax,0xfffffffc
c001cb8b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001cb92:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001cb98:	83 e0 fc             	and    eax,0xfffffffc
c001cb9b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cba2:	eb 14                	jmp    c001cbb8 <IDE::open(int, int, void*)+0x90>
c001cba4:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001cbae:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001cbb8:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001cbbf:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001cbc6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cbca:	89 c6                	mov    esi,eax
c001cbcc:	89 e8                	mov    eax,ebp
c001cbce:	bf f8 0c 00 00       	mov    edi,0xcf8
c001cbd3:	c1 e6 10             	shl    esi,0x10
c001cbd6:	89 fa                	mov    edx,edi
c001cbd8:	c1 e0 0b             	shl    eax,0xb
c001cbdb:	09 f0                	or     eax,esi
c001cbdd:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001cbe4:	c1 e6 08             	shl    esi,0x8
c001cbe7:	09 c6                	or     esi,eax
c001cbe9:	89 f0                	mov    eax,esi
c001cbeb:	0d 08 00 00 80       	or     eax,0x80000008
c001cbf0:	ef                   	out    dx,eax
c001cbf1:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001cbf6:	89 ca                	mov    edx,ecx
c001cbf8:	ed                   	in     eax,dx
c001cbf9:	c1 e8 10             	shr    eax,0x10
c001cbfc:	3d ff ff 00 00       	cmp    eax,0xffff
c001cc01:	0f 84 f3 00 00 00    	je     c001ccfa <IDE::open(int, int, void*)+0x1d2>
c001cc07:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001cc0d:	89 fa                	mov    edx,edi
c001cc0f:	89 f0                	mov    eax,esi
c001cc11:	ef                   	out    dx,eax
c001cc12:	b0 fe                	mov    al,0xfe
c001cc14:	89 ca                	mov    edx,ecx
c001cc16:	ee                   	out    dx,al
c001cc17:	89 f0                	mov    eax,esi
c001cc19:	89 fa                	mov    edx,edi
c001cc1b:	ef                   	out    dx,eax
c001cc1c:	89 ca                	mov    edx,ecx
c001cc1e:	ed                   	in     eax,dx
c001cc1f:	3c fe                	cmp    al,0xfe
c001cc21:	0f 85 a9 00 00 00    	jne    c001ccd0 <IDE::open(int, int, void*)+0x1a8>
c001cc27:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c001cc2d:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001cc34:	74 33                	je     c001cc69 <IDE::open(int, int, void*)+0x141>
c001cc36:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001cc3c:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001cc40:	40                   	inc    eax
c001cc41:	83 ec 0c             	sub    esp,0xc
c001cc44:	0f b6 c0             	movzx  eax,al
c001cc47:	50                   	push   eax
c001cc48:	55                   	push   ebp
c001cc49:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc4d:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001cc53:	51                   	push   ecx
c001cc54:	e8 1d 72 ff ff       	call   c0013e76 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001cc59:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001cc5e:	83 c4 1c             	add    esp,0x1c
c001cc61:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cc67:	eb 0a                	jmp    c001cc73 <IDE::open(int, int, void*)+0x14b>
c001cc69:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001cc73:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001cc7a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001cc81:	c1 e1 10             	shl    ecx,0x10
c001cc84:	bf f8 0c 00 00       	mov    edi,0xcf8
c001cc89:	c1 e0 08             	shl    eax,0x8
c001cc8c:	89 fa                	mov    edx,edi
c001cc8e:	09 c1                	or     ecx,eax
c001cc90:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001cc97:	c1 e0 0b             	shl    eax,0xb
c001cc9a:	09 c1                	or     ecx,eax
c001cc9c:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001cca2:	89 c8                	mov    eax,ecx
c001cca4:	ef                   	out    dx,eax
c001cca5:	be fc 0c 00 00       	mov    esi,0xcfc
c001ccaa:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001ccb0:	89 f2                	mov    edx,esi
c001ccb2:	ee                   	out    dx,al
c001ccb3:	89 c8                	mov    eax,ecx
c001ccb5:	89 fa                	mov    edx,edi
c001ccb7:	ef                   	out    dx,eax
c001ccb8:	89 f2                	mov    edx,esi
c001ccba:	ed                   	in     eax,dx
c001ccbb:	0f b6 c0             	movzx  eax,al
c001ccbe:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001ccc4:	74 44                	je     c001cd0a <IDE::open(int, int, void*)+0x1e2>
c001ccc6:	83 ec 0c             	sub    esp,0xc
c001ccc9:	68 68 35 02 c0       	push   0xc0023568
c001ccce:	eb 32                	jmp    c001cd02 <IDE::open(int, int, void*)+0x1da>
c001ccd0:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ccd9:	75 15                	jne    c001ccf0 <IDE::open(int, int, void*)+0x1c8>
c001ccdb:	80 3c 24 8a          	cmp    BYTE PTR [esp],0x8a
c001ccdf:	74 06                	je     c001cce7 <IDE::open(int, int, void*)+0x1bf>
c001cce1:	80 3c 24 80          	cmp    BYTE PTR [esp],0x80
c001cce5:	75 09                	jne    c001ccf0 <IDE::open(int, int, void*)+0x1c8>
c001cce7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ccee:	eb 1a                	jmp    c001cd0a <IDE::open(int, int, void*)+0x1e2>
c001ccf0:	83 ec 0c             	sub    esp,0xc
c001ccf3:	68 70 35 02 c0       	push   0xc0023570
c001ccf8:	eb 08                	jmp    c001cd02 <IDE::open(int, int, void*)+0x1da>
c001ccfa:	83 ec 0c             	sub    esp,0xc
c001ccfd:	68 a1 35 02 c0       	push   0xc00235a1
c001cd02:	e8 45 8d ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c001cd07:	83 c4 10             	add    esp,0x10
c001cd0a:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001cd11:	79 1a                	jns    c001cd2d <IDE::open(int, int, void*)+0x205>
c001cd13:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001cd19:	83 e0 fc             	and    eax,0xfffffffc
c001cd1c:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001cd23:	83 c0 08             	add    eax,0x8
c001cd26:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001cd2d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001cd33:	89 c2                	mov    edx,eax
c001cd35:	83 e2 0f             	and    edx,0xf
c001cd38:	66 83 fa 08          	cmp    dx,0x8
c001cd3c:	75 0a                	jne    c001cd48 <IDE::open(int, int, void*)+0x220>
c001cd3e:	83 e8 02             	sub    eax,0x2
c001cd41:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cd48:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001cd4e:	89 c2                	mov    edx,eax
c001cd50:	83 e2 0f             	and    edx,0xf
c001cd53:	66 83 fa 08          	cmp    dx,0x8
c001cd57:	75 0a                	jne    c001cd63 <IDE::open(int, int, void*)+0x23b>
c001cd59:	83 e8 02             	sub    eax,0x2
c001cd5c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001cd63:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001cd6a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001cd71:	89 d0                	mov    eax,edx
c001cd73:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cd76:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cd7a:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001cd7e:	8d 4a 01             	lea    ecx,[edx+0x1]
c001cd81:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cd86:	0f b6 c9             	movzx  ecx,cl
c001cd89:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001cd90:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cd93:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cd97:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001cd9b:	8d 50 02             	lea    edx,[eax+0x2]
c001cd9e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cda3:	0f b6 d2             	movzx  edx,dl
c001cda6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cdac:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cdaf:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cdb3:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001cdb7:	8d 48 03             	lea    ecx,[eax+0x3]
c001cdba:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cdbf:	0f b6 c9             	movzx  ecx,cl
c001cdc2:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001cdc8:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cdcb:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cdcf:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001cdd3:	8d 50 04             	lea    edx,[eax+0x4]
c001cdd6:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001cddc:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cde1:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001cde8:	66 85 f6             	test   si,si
c001cdeb:	74 3e                	je     c001ce2b <IDE::open(int, int, void*)+0x303>
c001cded:	0f b6 d2             	movzx  edx,dl
c001cdf0:	83 c0 05             	add    eax,0x5
c001cdf3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cdf6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cdfa:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001cdfe:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001ce04:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ce09:	eb 20                	jmp    c001ce2b <IDE::open(int, int, void*)+0x303>
c001ce0b:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ce15:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ce1f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ce26:	e9 02 ff ff ff       	jmp    c001cd2d <IDE::open(int, int, void*)+0x205>
c001ce2b:	52                   	push   edx
c001ce2c:	52                   	push   edx
c001ce2d:	6a 00                	push   0x0
c001ce2f:	53                   	push   ebx
c001ce30:	e8 75 fa ff ff       	call   c001c8aa <IDE::prepareInterrupt(unsigned char)>
c001ce35:	59                   	pop    ecx
c001ce36:	5e                   	pop    esi
c001ce37:	6a 01                	push   0x1
c001ce39:	53                   	push   ebx
c001ce3a:	e8 6b fa ff ff       	call   c001c8aa <IDE::prepareInterrupt(unsigned char)>
c001ce3f:	83 c4 0c             	add    esp,0xc
c001ce42:	6a 00                	push   0x0
c001ce44:	6a 00                	push   0x0
c001ce46:	53                   	push   ebx
c001ce47:	e8 96 fc ff ff       	call   c001cae2 <IDE::enableIRQs(unsigned char, bool)>
c001ce4c:	83 c4 0c             	add    esp,0xc
c001ce4f:	6a 00                	push   0x0
c001ce51:	6a 01                	push   0x1
c001ce53:	53                   	push   ebx
c001ce54:	e8 89 fc ff ff       	call   c001cae2 <IDE::enableIRQs(unsigned char, bool)>
c001ce59:	83 c4 10             	add    esp,0x10
c001ce5c:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001ce63:	74 40                	je     c001cea5 <IDE::open(int, int, void*)+0x37d>
c001ce65:	83 ec 0c             	sub    esp,0xc
c001ce68:	68 cb 35 02 c0       	push   0xc00235cb
c001ce6d:	e8 ab 23 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001ce72:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce75:	6a 01                	push   0x1
c001ce77:	68 aa ca 01 c0       	push   0xc001caaa
c001ce7c:	6a 0e                	push   0xe
c001ce7e:	53                   	push   ebx
c001ce7f:	e8 02 37 ff ff       	call   c0010586 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ce84:	83 c4 14             	add    esp,0x14
c001ce87:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ce8d:	53                   	push   ebx
c001ce8e:	6a 01                	push   0x1
c001ce90:	68 c6 ca 01 c0       	push   0xc001cac6
c001ce95:	6a 0f                	push   0xf
c001ce97:	53                   	push   ebx
c001ce98:	e8 e9 36 ff ff       	call   c0010586 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ce9d:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001cea3:	eb 4a                	jmp    c001ceef <IDE::open(int, int, void*)+0x3c7>
c001cea5:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001ceaf:	50                   	push   eax
c001ceb0:	6a 0f                	push   0xf
c001ceb2:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001ceb8:	68 e7 35 02 c0       	push   0xc00235e7
c001cebd:	e8 5b 23 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001cec2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cec5:	6a 00                	push   0x0
c001cec7:	68 aa ca 01 c0       	push   0xc001caaa
c001cecc:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001ced2:	53                   	push   ebx
c001ced3:	e8 ae 36 ff ff       	call   c0010586 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ced8:	83 c4 14             	add    esp,0x14
c001cedb:	53                   	push   ebx
c001cedc:	6a 00                	push   0x0
c001cede:	68 c6 ca 01 c0       	push   0xc001cac6
c001cee3:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001cee9:	53                   	push   ebx
c001ceea:	e8 97 36 ff ff       	call   c0010586 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ceef:	83 c4 20             	add    esp,0x20
c001cef2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cef4:	83 ec 0c             	sub    esp,0xc
c001cef7:	53                   	push   ebx
c001cef8:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001cefb:	83 c4 0c             	add    esp,0xc
c001cefe:	6a 07                	push   0x7
c001cf00:	6a 00                	push   0x0
c001cf02:	53                   	push   ebx
c001cf03:	e8 88 fa ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001cf08:	83 c4 0c             	add    esp,0xc
c001cf0b:	6a 07                	push   0x7
c001cf0d:	6a 01                	push   0x1
c001cf0f:	53                   	push   ebx
c001cf10:	e8 7b fa ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001cf15:	83 c4 0c             	add    esp,0xc
c001cf18:	6a 01                	push   0x1
c001cf1a:	6a 00                	push   0x0
c001cf1c:	53                   	push   ebx
c001cf1d:	e8 c0 fb ff ff       	call   c001cae2 <IDE::enableIRQs(unsigned char, bool)>
c001cf22:	83 c4 0c             	add    esp,0xc
c001cf25:	6a 01                	push   0x1
c001cf27:	6a 01                	push   0x1
c001cf29:	53                   	push   ebx
c001cf2a:	e8 b3 fb ff ff       	call   c001cae2 <IDE::enableIRQs(unsigned char, bool)>
c001cf2f:	83 c4 2c             	add    esp,0x2c
c001cf32:	31 c0                	xor    eax,eax
c001cf34:	5b                   	pop    ebx
c001cf35:	5e                   	pop    esi
c001cf36:	5f                   	pop    edi
c001cf37:	5d                   	pop    ebp
c001cf38:	c3                   	ret    
c001cf39:	90                   	nop

c001cf3a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001cf3a:	55                   	push   ebp
c001cf3b:	57                   	push   edi
c001cf3c:	56                   	push   esi
c001cf3d:	53                   	push   ebx
c001cf3e:	83 ec 1c             	sub    esp,0x1c
c001cf41:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cf45:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cf49:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cf4d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001cf51:	8d 50 f8             	lea    edx,[eax-0x8]
c001cf54:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001cf58:	80 fa 03             	cmp    dl,0x3
c001cf5b:	77 5d                	ja     c001cfba <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001cf5d:	0f b6 db             	movzx  ebx,bl
c001cf60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cf68:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001cf6b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001cf6f:	83 ca 80             	or     edx,0xffffff80
c001cf72:	0f b6 d2             	movzx  edx,dl
c001cf75:	52                   	push   edx
c001cf76:	6a 0c                	push   0xc
c001cf78:	53                   	push   ebx
c001cf79:	56                   	push   esi
c001cf7a:	e8 51 f9 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf83:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001cf88:	0f b6 c0             	movzx  eax,al
c001cf8b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf8f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001cf93:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cf95:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001cf9a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001cf9e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001cfa2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001cfa6:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001cfae:	83 c4 2c             	add    esp,0x2c
c001cfb1:	5b                   	pop    ebx
c001cfb2:	5e                   	pop    esi
c001cfb3:	5f                   	pop    edi
c001cfb4:	5d                   	pop    ebp
c001cfb5:	e9 16 f9 ff ff       	jmp    c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfba:	3c 07                	cmp    al,0x7
c001cfbc:	77 10                	ja     c001cfce <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001cfbe:	0f b6 db             	movzx  ebx,bl
c001cfc1:	0f b6 d0             	movzx  edx,al
c001cfc4:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001cfcc:	eb 2d                	jmp    c001cffb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cfce:	3c 0d                	cmp    al,0xd
c001cfd0:	77 13                	ja     c001cfe5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001cfd2:	0f b6 db             	movzx  ebx,bl
c001cfd5:	0f b6 c0             	movzx  eax,al
c001cfd8:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001cfdf:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001cfe3:	eb 16                	jmp    c001cffb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cfe5:	3c 15                	cmp    al,0x15
c001cfe7:	77 14                	ja     c001cffd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001cfe9:	0f b6 db             	movzx  ebx,bl
c001cfec:	0f b6 c0             	movzx  eax,al
c001cfef:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001cff7:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001cffb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cffd:	83 c4 1c             	add    esp,0x1c
c001d000:	5b                   	pop    ebx
c001d001:	5e                   	pop    esi
c001d002:	5f                   	pop    edi
c001d003:	5d                   	pop    ebp
c001d004:	c3                   	ret    
c001d005:	90                   	nop

c001d006 <IDE::detect()>:
c001d006:	55                   	push   ebp
c001d007:	57                   	push   edi
c001d008:	56                   	push   esi
c001d009:	53                   	push   ebx
c001d00a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001d010:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001d017:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001d01e:	0f 85 c0 02 00 00    	jne    c001d2e4 <IDE::detect()+0x2de>
c001d024:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001d02b:	31 f6                	xor    esi,esi
c001d02d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d035:	31 ed                	xor    ebp,ebp
c001d037:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d03b:	c1 e0 06             	shl    eax,0x6
c001d03e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001d046:	89 e8                	mov    eax,ebp
c001d048:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d04c:	c1 e0 04             	shl    eax,0x4
c001d04f:	83 c8 a0             	or     eax,0xffffffa0
c001d052:	0f b6 c0             	movzx  eax,al
c001d055:	50                   	push   eax
c001d056:	6a 06                	push   0x6
c001d058:	56                   	push   esi
c001d059:	53                   	push   ebx
c001d05a:	e8 71 f8 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d05f:	83 c4 0c             	add    esp,0xc
c001d062:	6a 0c                	push   0xc
c001d064:	56                   	push   esi
c001d065:	53                   	push   ebx
c001d066:	e8 25 f9 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d06b:	83 c4 0c             	add    esp,0xc
c001d06e:	6a 0c                	push   0xc
c001d070:	56                   	push   esi
c001d071:	53                   	push   ebx
c001d072:	e8 19 f9 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d077:	83 c4 0c             	add    esp,0xc
c001d07a:	6a 0c                	push   0xc
c001d07c:	56                   	push   esi
c001d07d:	53                   	push   ebx
c001d07e:	e8 0d f9 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d083:	83 c4 0c             	add    esp,0xc
c001d086:	6a 0c                	push   0xc
c001d088:	56                   	push   esi
c001d089:	53                   	push   ebx
c001d08a:	e8 01 f9 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d08f:	68 ec 00 00 00       	push   0xec
c001d094:	6a 07                	push   0x7
c001d096:	56                   	push   esi
c001d097:	53                   	push   ebx
c001d098:	e8 33 f8 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d09d:	83 c4 1c             	add    esp,0x1c
c001d0a0:	6a 0c                	push   0xc
c001d0a2:	56                   	push   esi
c001d0a3:	53                   	push   ebx
c001d0a4:	e8 e7 f8 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d0a9:	83 c4 0c             	add    esp,0xc
c001d0ac:	6a 0c                	push   0xc
c001d0ae:	56                   	push   esi
c001d0af:	53                   	push   ebx
c001d0b0:	e8 db f8 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d0b5:	83 c4 0c             	add    esp,0xc
c001d0b8:	6a 0c                	push   0xc
c001d0ba:	56                   	push   esi
c001d0bb:	53                   	push   ebx
c001d0bc:	e8 cf f8 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d0c1:	83 c4 0c             	add    esp,0xc
c001d0c4:	6a 0c                	push   0xc
c001d0c6:	56                   	push   esi
c001d0c7:	53                   	push   ebx
c001d0c8:	e8 c3 f8 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d0cd:	83 c4 0c             	add    esp,0xc
c001d0d0:	6a 0c                	push   0xc
c001d0d2:	56                   	push   esi
c001d0d3:	53                   	push   ebx
c001d0d4:	e8 b7 f8 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d0d9:	83 c4 10             	add    esp,0x10
c001d0dc:	84 c0                	test   al,al
c001d0de:	0f 84 8b 01 00 00    	je     c001d26f <IDE::detect()+0x269>
c001d0e4:	31 ff                	xor    edi,edi
c001d0e6:	50                   	push   eax
c001d0e7:	6a 0c                	push   0xc
c001d0e9:	56                   	push   esi
c001d0ea:	53                   	push   ebx
c001d0eb:	e8 a0 f8 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d0f0:	83 c4 10             	add    esp,0x10
c001d0f3:	a8 01                	test   al,0x1
c001d0f5:	0f 85 8e 01 00 00    	jne    c001d289 <IDE::detect()+0x283>
c001d0fb:	84 c0                	test   al,al
c001d0fd:	78 04                	js     c001d103 <IDE::detect()+0xfd>
c001d0ff:	a8 08                	test   al,0x8
c001d101:	75 27                	jne    c001d12a <IDE::detect()+0x124>
c001d103:	47                   	inc    edi
c001d104:	81 ff 17 01 00 00    	cmp    edi,0x117
c001d10a:	7e da                	jle    c001d0e6 <IDE::detect()+0xe0>
c001d10c:	50                   	push   eax
c001d10d:	50                   	push   eax
c001d10e:	6a 00                	push   0x0
c001d110:	68 40 4b 4c 00       	push   0x4c4b40
c001d115:	e8 99 be ff ff       	call   c0018fb3 <nanoSleep(unsigned long long)>
c001d11a:	83 c4 10             	add    esp,0x10
c001d11d:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001d123:	75 c1                	jne    c001d0e6 <IDE::detect()+0xe0>
c001d125:	e9 5f 01 00 00       	jmp    c001d289 <IDE::detect()+0x283>
c001d12a:	31 c9                	xor    ecx,ecx
c001d12c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001d130:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001d134:	83 ec 0c             	sub    esp,0xc
c001d137:	68 80 00 00 00       	push   0x80
c001d13c:	57                   	push   edi
c001d13d:	6a 00                	push   0x0
c001d13f:	56                   	push   esi
c001d140:	53                   	push   ebx
c001d141:	e8 f4 fd ff ff       	call   c001cf3a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001d146:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d14a:	c1 e0 06             	shl    eax,0x6
c001d14d:	01 d8                	add    eax,ebx
c001d14f:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001d154:	89 d1                	mov    ecx,edx
c001d156:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001d15d:	89 f2                	mov    edx,esi
c001d15f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001d166:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001d16c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001d170:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001d176:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d17a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001d181:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001d189:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001d190:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001d198:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001d19e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001d1a5:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001d1ab:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d1af:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001d1b3:	83 c4 20             	add    esp,0x20
c001d1b6:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001d1b9:	83 c7 02             	add    edi,0x2
c001d1bc:	88 90 80 01 00 00    	mov    BYTE PTR [eax+0x180],dl
c001d1c2:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001d1c5:	88 90 81 01 00 00    	mov    BYTE PTR [eax+0x181],dl
c001d1cb:	83 c0 02             	add    eax,0x2
c001d1ce:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c001d1d2:	75 e2                	jne    c001d1b6 <IDE::detect()+0x1b0>
c001d1d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1d8:	c1 e0 06             	shl    eax,0x6
c001d1db:	01 d8                	add    eax,ebx
c001d1dd:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001d1e3:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001d1ea:	66 c1 ea 09          	shr    dx,0x9
c001d1ee:	83 e2 01             	and    edx,0x1
c001d1f1:	84 c9                	test   cl,cl
c001d1f3:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001d1f9:	75 2f                	jne    c001d22a <IDE::detect()+0x224>
c001d1fb:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001d201:	85 c0                	test   eax,eax
c001d203:	74 66                	je     c001d26b <IDE::detect()+0x265>
c001d205:	50                   	push   eax
c001d206:	55                   	push   ebp
c001d207:	56                   	push   esi
c001d208:	68 03 36 02 c0       	push   0xc0023603
c001d20d:	e8 0b 20 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001d212:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d219:	e8 ca 1e ff ff       	call   c000f0e8 <operator new(unsigned long)>
c001d21e:	89 c7                	mov    edi,eax
c001d220:	89 04 24             	mov    DWORD PTR [esp],eax
c001d223:	e8 f4 02 00 00       	call   c001d51c <ATA::ATA()>
c001d228:	eb 28                	jmp    c001d252 <IDE::detect()+0x24c>
c001d22a:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001d230:	55                   	push   ebp
c001d231:	56                   	push   esi
c001d232:	68 32 36 02 c0       	push   0xc0023632
c001d237:	e8 e1 1f ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001d23c:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001d243:	e8 a0 1e ff ff       	call   c000f0e8 <operator new(unsigned long)>
c001d248:	89 c7                	mov    edi,eax
c001d24a:	89 04 24             	mov    DWORD PTR [esp],eax
c001d24d:	e8 1e 09 00 00       	call   c001db70 <ATAPI::ATAPI()>
c001d252:	5a                   	pop    edx
c001d253:	59                   	pop    ecx
c001d254:	57                   	push   edi
c001d255:	53                   	push   ebx
c001d256:	e8 d7 33 ff ff       	call   c0010632 <Device::addChild(Device*)>
c001d25b:	8b 07                	mov    eax,DWORD PTR [edi]
c001d25d:	53                   	push   ebx
c001d25e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d262:	6a 00                	push   0x0
c001d264:	57                   	push   edi
c001d265:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d268:	83 c4 20             	add    esp,0x20
c001d26b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001d26f:	4d                   	dec    ebp
c001d270:	74 0a                	je     c001d27c <IDE::detect()+0x276>
c001d272:	bd 01 00 00 00       	mov    ebp,0x1
c001d277:	e9 bb fd ff ff       	jmp    c001d037 <IDE::detect()+0x31>
c001d27c:	4e                   	dec    esi
c001d27d:	74 65                	je     c001d2e4 <IDE::detect()+0x2de>
c001d27f:	be 01 00 00 00       	mov    esi,0x1
c001d284:	e9 ac fd ff ff       	jmp    c001d035 <IDE::detect()+0x2f>
c001d289:	50                   	push   eax
c001d28a:	6a 04                	push   0x4
c001d28c:	56                   	push   esi
c001d28d:	53                   	push   ebx
c001d28e:	e8 fd f6 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d293:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d297:	83 c4 0c             	add    esp,0xc
c001d29a:	6a 05                	push   0x5
c001d29c:	56                   	push   esi
c001d29d:	53                   	push   ebx
c001d29e:	e8 ed f6 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d2a3:	83 c4 10             	add    esp,0x10
c001d2a6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001d2aa:	80 fa 14             	cmp    dl,0x14
c001d2ad:	74 2f                	je     c001d2de <IDE::detect()+0x2d8>
c001d2af:	80 fa 69             	cmp    dl,0x69
c001d2b2:	75 bb                	jne    c001d26f <IDE::detect()+0x269>
c001d2b4:	3c 96                	cmp    al,0x96
c001d2b6:	75 b7                	jne    c001d26f <IDE::detect()+0x269>
c001d2b8:	68 a1 00 00 00       	push   0xa1
c001d2bd:	6a 07                	push   0x7
c001d2bf:	56                   	push   esi
c001d2c0:	53                   	push   ebx
c001d2c1:	e8 0a f6 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2c6:	5f                   	pop    edi
c001d2c7:	58                   	pop    eax
c001d2c8:	6a 00                	push   0x0
c001d2ca:	68 40 42 0f 00       	push   0xf4240
c001d2cf:	e8 df bc ff ff       	call   c0018fb3 <nanoSleep(unsigned long long)>
c001d2d4:	83 c4 10             	add    esp,0x10
c001d2d7:	b1 01                	mov    cl,0x1
c001d2d9:	e9 4e fe ff ff       	jmp    c001d12c <IDE::detect()+0x126>
c001d2de:	3c eb                	cmp    al,0xeb
c001d2e0:	75 cd                	jne    c001d2af <IDE::detect()+0x2a9>
c001d2e2:	eb d4                	jmp    c001d2b8 <IDE::detect()+0x2b2>
c001d2e4:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d2ea:	5b                   	pop    ebx
c001d2eb:	5e                   	pop    esi
c001d2ec:	5f                   	pop    edi
c001d2ed:	5d                   	pop    ebp
c001d2ee:	c3                   	ret    
c001d2ef:	90                   	nop

c001d2f0 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d2f0:	55                   	push   ebp
c001d2f1:	57                   	push   edi
c001d2f2:	56                   	push   esi
c001d2f3:	53                   	push   ebx
c001d2f4:	83 ec 1c             	sub    esp,0x1c
c001d2f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d2fb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d2ff:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d303:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d307:	88 c3                	mov    bl,al
c001d309:	84 c0                	test   al,al
c001d30b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d30f:	0f 84 67 01 00 00    	je     c001d47c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001d315:	83 ec 0c             	sub    esp,0xc
c001d318:	68 63 36 02 c0       	push   0xc0023663
c001d31d:	e8 fb 1e ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001d322:	83 c4 10             	add    esp,0x10
c001d325:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d329:	3c 01                	cmp    al,0x1
c001d32b:	75 17                	jne    c001d344 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001d32d:	83 ec 0c             	sub    esp,0xc
c001d330:	b3 13                	mov    bl,0x13
c001d332:	68 6f 36 02 c0       	push   0xc002366f
c001d337:	e8 e1 1e ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001d33c:	83 c4 10             	add    esp,0x10
c001d33f:	e9 25 01 00 00       	jmp    c001d469 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d344:	3c 02                	cmp    al,0x2
c001d346:	0f 85 ef 00 00 00    	jne    c001d43b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001d34c:	01 f6                	add    esi,esi
c001d34e:	52                   	push   edx
c001d34f:	09 ee                	or     esi,ebp
c001d351:	6a 01                	push   0x1
c001d353:	89 f0                	mov    eax,esi
c001d355:	0f b6 f0             	movzx  esi,al
c001d358:	c1 e6 06             	shl    esi,0x6
c001d35b:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001d363:	50                   	push   eax
c001d364:	57                   	push   edi
c001d365:	e8 26 f6 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d36a:	83 c4 10             	add    esp,0x10
c001d36d:	89 c6                	mov    esi,eax
c001d36f:	a8 01                	test   al,0x1
c001d371:	74 12                	je     c001d385 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001d373:	83 ec 0c             	sub    esp,0xc
c001d376:	b3 07                	mov    bl,0x7
c001d378:	68 84 36 02 c0       	push   0xc0023684
c001d37d:	e8 9b 1e ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001d382:	83 c4 10             	add    esp,0x10
c001d385:	f7 c6 02 00 00 00    	test   esi,0x2
c001d38b:	74 12                	je     c001d39f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001d38d:	83 ec 0c             	sub    esp,0xc
c001d390:	b3 03                	mov    bl,0x3
c001d392:	68 a2 36 02 c0       	push   0xc00236a2
c001d397:	e8 81 1e ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001d39c:	83 c4 10             	add    esp,0x10
c001d39f:	f7 c6 04 00 00 00    	test   esi,0x4
c001d3a5:	74 12                	je     c001d3b9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001d3a7:	83 ec 0c             	sub    esp,0xc
c001d3aa:	b3 14                	mov    bl,0x14
c001d3ac:	68 c2 36 02 c0       	push   0xc00236c2
c001d3b1:	e8 67 1e ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001d3b6:	83 c4 10             	add    esp,0x10
c001d3b9:	f7 c6 08 00 00 00    	test   esi,0x8
c001d3bf:	74 12                	je     c001d3d3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001d3c1:	83 ec 0c             	sub    esp,0xc
c001d3c4:	b3 03                	mov    bl,0x3
c001d3c6:	68 a2 36 02 c0       	push   0xc00236a2
c001d3cb:	e8 4d 1e ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001d3d0:	83 c4 10             	add    esp,0x10
c001d3d3:	f7 c6 10 00 00 00    	test   esi,0x10
c001d3d9:	74 12                	je     c001d3ed <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001d3db:	83 ec 0c             	sub    esp,0xc
c001d3de:	b3 15                	mov    bl,0x15
c001d3e0:	68 da 36 02 c0       	push   0xc00236da
c001d3e5:	e8 33 1e ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001d3ea:	83 c4 10             	add    esp,0x10
c001d3ed:	f7 c6 20 00 00 00    	test   esi,0x20
c001d3f3:	74 12                	je     c001d407 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001d3f5:	83 ec 0c             	sub    esp,0xc
c001d3f8:	b3 03                	mov    bl,0x3
c001d3fa:	68 a2 36 02 c0       	push   0xc00236a2
c001d3ff:	e8 19 1e ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001d404:	83 c4 10             	add    esp,0x10
c001d407:	f7 c6 40 00 00 00    	test   esi,0x40
c001d40d:	74 12                	je     c001d421 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001d40f:	83 ec 0c             	sub    esp,0xc
c001d412:	b3 16                	mov    bl,0x16
c001d414:	68 f4 36 02 c0       	push   0xc00236f4
c001d419:	e8 ff 1d ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001d41e:	83 c4 10             	add    esp,0x10
c001d421:	89 f0                	mov    eax,esi
c001d423:	84 c0                	test   al,al
c001d425:	79 42                	jns    c001d469 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d427:	83 ec 0c             	sub    esp,0xc
c001d42a:	b3 0d                	mov    bl,0xd
c001d42c:	68 15 37 02 c0       	push   0xc0023715
c001d431:	e8 e7 1d ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001d436:	83 c4 10             	add    esp,0x10
c001d439:	eb 2e                	jmp    c001d469 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d43b:	3c 03                	cmp    al,0x3
c001d43d:	75 14                	jne    c001d453 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001d43f:	83 ec 0c             	sub    esp,0xc
c001d442:	b3 17                	mov    bl,0x17
c001d444:	68 29 37 02 c0       	push   0xc0023729
c001d449:	e8 cf 1d ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001d44e:	83 c4 10             	add    esp,0x10
c001d451:	eb 16                	jmp    c001d469 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d453:	3c 04                	cmp    al,0x4
c001d455:	75 12                	jne    c001d469 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d457:	83 ec 0c             	sub    esp,0xc
c001d45a:	b3 08                	mov    bl,0x8
c001d45c:	68 3f 37 02 c0       	push   0xc002373f
c001d461:	e8 b7 1d ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001d466:	83 c4 10             	add    esp,0x10
c001d469:	50                   	push   eax
c001d46a:	50                   	push   eax
c001d46b:	0f b6 c3             	movzx  eax,bl
c001d46e:	50                   	push   eax
c001d46f:	68 57 37 02 c0       	push   0xc0023757
c001d474:	e8 a4 1d ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001d479:	83 c4 10             	add    esp,0x10
c001d47c:	83 c4 1c             	add    esp,0x1c
c001d47f:	88 d8                	mov    al,bl
c001d481:	5b                   	pop    ebx
c001d482:	5e                   	pop    esi
c001d483:	5f                   	pop    edi
c001d484:	5d                   	pop    ebp
c001d485:	c3                   	ret    

c001d486 <IDE::polling(unsigned char, unsigned int)>:
c001d486:	55                   	push   ebp
c001d487:	bd 04 00 00 00       	mov    ebp,0x4
c001d48c:	57                   	push   edi
c001d48d:	56                   	push   esi
c001d48e:	53                   	push   ebx
c001d48f:	83 ec 0c             	sub    esp,0xc
c001d492:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d496:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001d49a:	52                   	push   edx
c001d49b:	6a 0c                	push   0xc
c001d49d:	0f b6 f3             	movzx  esi,bl
c001d4a0:	56                   	push   esi
c001d4a1:	57                   	push   edi
c001d4a2:	e8 e9 f4 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d4a7:	83 c4 10             	add    esp,0x10
c001d4aa:	4d                   	dec    ebp
c001d4ab:	75 ed                	jne    c001d49a <IDE::polling(unsigned char, unsigned int)+0x14>
c001d4ad:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d4b2:	50                   	push   eax
c001d4b3:	6a 0c                	push   0xc
c001d4b5:	56                   	push   esi
c001d4b6:	57                   	push   edi
c001d4b7:	e8 d4 f4 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d4bc:	83 c4 10             	add    esp,0x10
c001d4bf:	a8 01                	test   al,0x1
c001d4c1:	74 12                	je     c001d4d5 <IDE::polling(unsigned char, unsigned int)+0x4f>
c001d4c3:	83 ec 0c             	sub    esp,0xc
c001d4c6:	68 71 37 02 c0       	push   0xc0023771
c001d4cb:	e8 4d 1d ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001d4d0:	83 c4 10             	add    esp,0x10
c001d4d3:	eb 17                	jmp    c001d4ec <IDE::polling(unsigned char, unsigned int)+0x66>
c001d4d5:	a8 20                	test   al,0x20
c001d4d7:	75 0f                	jne    c001d4e8 <IDE::polling(unsigned char, unsigned int)+0x62>
c001d4d9:	4b                   	dec    ebx
c001d4da:	74 10                	je     c001d4ec <IDE::polling(unsigned char, unsigned int)+0x66>
c001d4dc:	84 c0                	test   al,al
c001d4de:	78 d2                	js     c001d4b2 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001d4e0:	a8 08                	test   al,0x8
c001d4e2:	74 ce                	je     c001d4b2 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001d4e4:	31 c0                	xor    eax,eax
c001d4e6:	eb 06                	jmp    c001d4ee <IDE::polling(unsigned char, unsigned int)+0x68>
c001d4e8:	b0 01                	mov    al,0x1
c001d4ea:	eb 02                	jmp    c001d4ee <IDE::polling(unsigned char, unsigned int)+0x68>
c001d4ec:	b0 02                	mov    al,0x2
c001d4ee:	83 c4 0c             	add    esp,0xc
c001d4f1:	5b                   	pop    ebx
c001d4f2:	5e                   	pop    esi
c001d4f3:	5f                   	pop    edi
c001d4f4:	5d                   	pop    ebp
c001d4f5:	c3                   	ret    

c001d4f6 <ATA::close(int, int, void*)>:
c001d4f6:	83 ec 0c             	sub    esp,0xc
c001d4f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4fd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d503:	85 c0                	test   eax,eax
c001d505:	74 0c                	je     c001d513 <ATA::close(int, int, void*)+0x1d>
c001d507:	83 ec 0c             	sub    esp,0xc
c001d50a:	8b 10                	mov    edx,DWORD PTR [eax]
c001d50c:	50                   	push   eax
c001d50d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d510:	83 c4 10             	add    esp,0x10
c001d513:	31 c0                	xor    eax,eax
c001d515:	83 c4 0c             	add    esp,0xc
c001d518:	c3                   	ret    
c001d519:	90                   	nop

c001d51a <ATA::powerSaving(PowerSavingLevel)>:
c001d51a:	c3                   	ret    
c001d51b:	90                   	nop

c001d51c <ATA::ATA()>:
c001d51c:	83 ec 0c             	sub    esp,0xc
c001d51f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d523:	83 ec 04             	sub    esp,0x4
c001d526:	68 00 02 00 00       	push   0x200
c001d52b:	68 b4 37 02 c0       	push   0xc00237b4
c001d530:	50                   	push   eax
c001d531:	e8 02 35 ff ff       	call   c0010a38 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d536:	83 c4 10             	add    esp,0x10
c001d539:	ba e0 37 02 c0       	mov    edx,0xc00237e0
c001d53e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d542:	89 10                	mov    DWORD PTR [eax],edx
c001d544:	90                   	nop
c001d545:	83 c4 0c             	add    esp,0xc
c001d548:	c3                   	ret    
c001d549:	90                   	nop

c001d54a <ATA::flush(bool)>:
c001d54a:	53                   	push   ebx
c001d54b:	83 ec 08             	sub    esp,0x8
c001d54e:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001d553:	19 c0                	sbb    eax,eax
c001d555:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d559:	83 e0 fd             	and    eax,0xfffffffd
c001d55c:	05 ea 00 00 00       	add    eax,0xea
c001d561:	50                   	push   eax
c001d562:	6a 07                	push   0x7
c001d564:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d56b:	50                   	push   eax
c001d56c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d572:	e8 59 f3 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d577:	83 c4 0c             	add    esp,0xc
c001d57a:	6a 00                	push   0x0
c001d57c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d583:	50                   	push   eax
c001d584:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d58a:	e8 f7 fe ff ff       	call   c001d486 <IDE::polling(unsigned char, unsigned int)>
c001d58f:	83 c4 18             	add    esp,0x18
c001d592:	5b                   	pop    ebx
c001d593:	c3                   	ret    

c001d594 <ATA::readyForCommand()>:
c001d594:	56                   	push   esi
c001d595:	53                   	push   ebx
c001d596:	31 db                	xor    ebx,ebx
c001d598:	50                   	push   eax
c001d599:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d59d:	50                   	push   eax
c001d59e:	6a 0c                	push   0xc
c001d5a0:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d5a7:	50                   	push   eax
c001d5a8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d5ae:	e8 dd f3 ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001d5b3:	83 c4 10             	add    esp,0x10
c001d5b6:	a8 88                	test   al,0x88
c001d5b8:	74 23                	je     c001d5dd <ATA::readyForCommand()+0x49>
c001d5ba:	43                   	inc    ebx
c001d5bb:	83 fb 63             	cmp    ebx,0x63
c001d5be:	7e dd                	jle    c001d59d <ATA::readyForCommand()+0x9>
c001d5c0:	51                   	push   ecx
c001d5c1:	51                   	push   ecx
c001d5c2:	6a 00                	push   0x0
c001d5c4:	68 40 42 0f 00       	push   0xf4240
c001d5c9:	e8 e5 b9 ff ff       	call   c0018fb3 <nanoSleep(unsigned long long)>
c001d5ce:	83 c4 10             	add    esp,0x10
c001d5d1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d5d7:	75 c4                	jne    c001d59d <ATA::readyForCommand()+0x9>
c001d5d9:	31 c0                	xor    eax,eax
c001d5db:	eb 02                	jmp    c001d5df <ATA::readyForCommand()+0x4b>
c001d5dd:	b0 01                	mov    al,0x1
c001d5df:	5a                   	pop    edx
c001d5e0:	5b                   	pop    ebx
c001d5e1:	5e                   	pop    esi
c001d5e2:	c3                   	ret    
c001d5e3:	90                   	nop

c001d5e4 <ATA::access(unsigned long long, int, void*, bool)>:
c001d5e4:	55                   	push   ebp
c001d5e5:	57                   	push   edi
c001d5e6:	56                   	push   esi
c001d5e7:	53                   	push   ebx
c001d5e8:	83 ec 2c             	sub    esp,0x2c
c001d5eb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d5ef:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d5f3:	89 04 24             	mov    DWORD PTR [esp],eax
c001d5f6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d5fa:	8a 04 24             	mov    al,BYTE PTR [esp]
c001d5fd:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d601:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001d605:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d60b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d60f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d615:	c1 e0 06             	shl    eax,0x6
c001d618:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001d61c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001d624:	74 5d                	je     c001d683 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001d626:	89 fa                	mov    edx,edi
c001d628:	89 f0                	mov    eax,esi
c001d62a:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001d62e:	c1 ea 1c             	shr    edx,0x1c
c001d631:	89 d1                	mov    ecx,edx
c001d633:	09 c1                	or     ecx,eax
c001d635:	74 25                	je     c001d65c <ATA::access(unsigned long long, int, void*, bool)+0x78>
c001d637:	31 ed                	xor    ebp,ebp
c001d639:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001d640:	89 fa                	mov    edx,edi
c001d642:	89 f0                	mov    eax,esi
c001d644:	0f ad d0             	shrd   eax,edx,cl
c001d647:	d3 ea                	shr    edx,cl
c001d649:	f6 c1 20             	test   cl,0x20
c001d64c:	74 02                	je     c001d650 <ATA::access(unsigned long long, int, void*, bool)+0x6c>
c001d64e:	89 d0                	mov    eax,edx
c001d650:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001d654:	45                   	inc    ebp
c001d655:	83 fd 06             	cmp    ebp,0x6
c001d658:	75 df                	jne    c001d639 <ATA::access(unsigned long long, int, void*, bool)+0x55>
c001d65a:	eb 73                	jmp    c001d6cf <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001d65c:	89 f0                	mov    eax,esi
c001d65e:	89 fa                	mov    edx,edi
c001d660:	0f ac d0 10          	shrd   eax,edx,0x10
c001d664:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001d669:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d66d:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d674:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d679:	c1 ee 18             	shr    esi,0x18
c001d67c:	bf 01 00 00 00       	mov    edi,0x1
c001d681:	eb 53                	jmp    c001d6d6 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d683:	6a 00                	push   0x0
c001d685:	6a 3f                	push   0x3f
c001d687:	57                   	push   edi
c001d688:	56                   	push   esi
c001d689:	e8 7e 1f 00 00       	call   c001f60c <__umoddi3>
c001d68e:	83 c4 10             	add    esp,0x10
c001d691:	40                   	inc    eax
c001d692:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d696:	6a 00                	push   0x0
c001d698:	68 f0 03 00 00       	push   0x3f0
c001d69d:	57                   	push   edi
c001d69e:	56                   	push   esi
c001d69f:	e8 68 1e 00 00       	call   c001f50c <__udivdi3>
c001d6a4:	83 c4 10             	add    esp,0x10
c001d6a7:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001d6ac:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d6b3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d6b8:	6a 00                	push   0x0
c001d6ba:	6a 3f                	push   0x3f
c001d6bc:	57                   	push   edi
c001d6bd:	31 ff                	xor    edi,edi
c001d6bf:	56                   	push   esi
c001d6c0:	e8 47 1e 00 00       	call   c001f50c <__udivdi3>
c001d6c5:	89 c6                	mov    esi,eax
c001d6c7:	83 c4 10             	add    esp,0x10
c001d6ca:	83 e6 0f             	and    esi,0xf
c001d6cd:	eb 07                	jmp    c001d6d6 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d6cf:	31 f6                	xor    esi,esi
c001d6d1:	bf 02 00 00 00       	mov    edi,0x2
c001d6d6:	50                   	push   eax
c001d6d7:	6a 00                	push   0x0
c001d6d9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d6e0:	50                   	push   eax
c001d6e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d6e5:	e8 f8 f3 ff ff       	call   c001cae2 <IDE::enableIRQs(unsigned char, bool)>
c001d6ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6ed:	e8 a2 fe ff ff       	call   c001d594 <ATA::readyForCommand()>
c001d6f2:	83 c4 10             	add    esp,0x10
c001d6f5:	84 c0                	test   al,al
c001d6f7:	75 0a                	jne    c001d703 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001d6f9:	be 01 00 00 00       	mov    esi,0x1
c001d6fe:	e9 79 02 00 00       	jmp    c001d97c <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d703:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d709:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d70f:	c1 e0 04             	shl    eax,0x4
c001d712:	09 c6                	or     esi,eax
c001d714:	89 f8                	mov    eax,edi
c001d716:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001d71d:	84 c0                	test   al,al
c001d71f:	75 05                	jne    c001d726 <ATA::access(unsigned long long, int, void*, bool)+0x142>
c001d721:	83 ce a0             	or     esi,0xffffffa0
c001d724:	eb 03                	jmp    c001d729 <ATA::access(unsigned long long, int, void*, bool)+0x145>
c001d726:	83 ce e0             	or     esi,0xffffffe0
c001d729:	89 f0                	mov    eax,esi
c001d72b:	0f b6 f0             	movzx  esi,al
c001d72e:	56                   	push   esi
c001d72f:	6a 06                	push   0x6
c001d731:	51                   	push   ecx
c001d732:	52                   	push   edx
c001d733:	e8 98 f1 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d738:	83 c4 10             	add    esp,0x10
c001d73b:	6a 00                	push   0x0
c001d73d:	6a 01                	push   0x1
c001d73f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d746:	50                   	push   eax
c001d747:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d74d:	e8 7e f1 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d752:	89 f8                	mov    eax,edi
c001d754:	83 c4 10             	add    esp,0x10
c001d757:	3c 02                	cmp    al,0x2
c001d759:	75 6e                	jne    c001d7c9 <ATA::access(unsigned long long, int, void*, bool)+0x1e5>
c001d75b:	6a 00                	push   0x0
c001d75d:	6a 08                	push   0x8
c001d75f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d766:	50                   	push   eax
c001d767:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d76d:	e8 5e f1 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d772:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001d777:	50                   	push   eax
c001d778:	6a 09                	push   0x9
c001d77a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d781:	50                   	push   eax
c001d782:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d788:	e8 43 f1 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d78d:	83 c4 20             	add    esp,0x20
c001d790:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001d795:	50                   	push   eax
c001d796:	6a 0a                	push   0xa
c001d798:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d79f:	50                   	push   eax
c001d7a0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7a6:	e8 25 f1 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7ab:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001d7b0:	50                   	push   eax
c001d7b1:	6a 0b                	push   0xb
c001d7b3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7ba:	50                   	push   eax
c001d7bb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7c1:	e8 0a f1 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7c6:	83 c4 20             	add    esp,0x20
c001d7c9:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d7ce:	50                   	push   eax
c001d7cf:	6a 02                	push   0x2
c001d7d1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7d8:	50                   	push   eax
c001d7d9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7df:	e8 ec f0 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7e4:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d7e9:	50                   	push   eax
c001d7ea:	6a 03                	push   0x3
c001d7ec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7f3:	50                   	push   eax
c001d7f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7fa:	e8 d1 f0 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7ff:	83 c4 20             	add    esp,0x20
c001d802:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d807:	50                   	push   eax
c001d808:	6a 04                	push   0x4
c001d80a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d811:	50                   	push   eax
c001d812:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d818:	e8 b3 f0 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d81d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d822:	50                   	push   eax
c001d823:	6a 05                	push   0x5
c001d825:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d82c:	50                   	push   eax
c001d82d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d833:	e8 98 f0 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d838:	83 c4 20             	add    esp,0x20
c001d83b:	89 f8                	mov    eax,edi
c001d83d:	3c 02                	cmp    al,0x2
c001d83f:	0f 94 44 24 04       	sete   BYTE PTR [esp+0x4]
c001d844:	75 06                	jne    c001d84c <ATA::access(unsigned long long, int, void*, bool)+0x268>
c001d846:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d84a:	75 40                	jne    c001d88c <ATA::access(unsigned long long, int, void*, bool)+0x2a8>
c001d84c:	89 f8                	mov    eax,edi
c001d84e:	3c 02                	cmp    al,0x2
c001d850:	0f 95 c1             	setne  cl
c001d853:	74 0b                	je     c001d860 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001d855:	b8 30 00 00 00       	mov    eax,0x30
c001d85a:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d85e:	75 31                	jne    c001d891 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d860:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001d863:	83 f2 01             	xor    edx,0x1
c001d866:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d86b:	74 09                	je     c001d876 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001d86d:	b8 24 00 00 00       	mov    eax,0x24
c001d872:	84 d2                	test   dl,dl
c001d874:	75 1b                	jne    c001d891 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d876:	84 c9                	test   cl,cl
c001d878:	0f 84 7b fe ff ff    	je     c001d6f9 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d87e:	b8 20 00 00 00       	mov    eax,0x20
c001d883:	84 d2                	test   dl,dl
c001d885:	75 0a                	jne    c001d891 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d887:	e9 6d fe ff ff       	jmp    c001d6f9 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d88c:	b8 34 00 00 00       	mov    eax,0x34
c001d891:	50                   	push   eax
c001d892:	6a 07                	push   0x7
c001d894:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d89b:	50                   	push   eax
c001d89c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8a2:	e8 29 f0 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d8a7:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d8ab:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d8af:	83 c4 10             	add    esp,0x10
c001d8b2:	85 f6                	test   esi,esi
c001d8b4:	0f 84 a9 00 00 00    	je     c001d963 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001d8ba:	50                   	push   eax
c001d8bb:	6a 01                	push   0x1
c001d8bd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8c4:	50                   	push   eax
c001d8c5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8cb:	e8 b6 fb ff ff       	call   c001d486 <IDE::polling(unsigned char, unsigned int)>
c001d8d0:	83 c4 10             	add    esp,0x10
c001d8d3:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d8d9:	84 c0                	test   al,al
c001d8db:	74 1d                	je     c001d8fa <ATA::access(unsigned long long, int, void*, bool)+0x316>
c001d8dd:	0f b6 f0             	movzx  esi,al
c001d8e0:	56                   	push   esi
c001d8e1:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d8e8:	0f b6 d2             	movzx  edx,dl
c001d8eb:	50                   	push   eax
c001d8ec:	52                   	push   edx
c001d8ed:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8f3:	e8 f8 f9 ff ff       	call   c001d2f0 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d8f8:	eb 7f                	jmp    c001d979 <ATA::access(unsigned long long, int, void*, bool)+0x395>
c001d8fa:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d8ff:	74 41                	je     c001d942 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c001d901:	31 c9                	xor    ecx,ecx
c001d903:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001d907:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d90b:	50                   	push   eax
c001d90c:	50                   	push   eax
c001d90d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d914:	50                   	push   eax
c001d915:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d91b:	e8 9e ef ff ff       	call   c001c8be <IDE::getBase(unsigned char)>
c001d920:	89 c2                	mov    edx,eax
c001d922:	89 e8                	mov    eax,ebp
c001d924:	66 ef                	out    dx,ax
c001d926:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d92a:	83 c4 10             	add    esp,0x10
c001d92d:	41                   	inc    ecx
c001d92e:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d934:	75 cd                	jne    c001d903 <ATA::access(unsigned long long, int, void*, bool)+0x31f>
c001d936:	4e                   	dec    esi
c001d937:	81 c7 00 02 00 00    	add    edi,0x200
c001d93d:	e9 70 ff ff ff       	jmp    c001d8b2 <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c001d942:	51                   	push   ecx
c001d943:	51                   	push   ecx
c001d944:	0f b6 d2             	movzx  edx,dl
c001d947:	52                   	push   edx
c001d948:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d94e:	e8 6b ef ff ff       	call   c001c8be <IDE::getBase(unsigned char)>
c001d953:	b9 00 01 00 00       	mov    ecx,0x100
c001d958:	89 c2                	mov    edx,eax
c001d95a:	fc                   	cld    
c001d95b:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d95e:	83 c4 10             	add    esp,0x10
c001d961:	eb d3                	jmp    c001d936 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001d963:	31 f6                	xor    esi,esi
c001d965:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d969:	74 11                	je     c001d97c <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d96b:	50                   	push   eax
c001d96c:	50                   	push   eax
c001d96d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d972:	50                   	push   eax
c001d973:	53                   	push   ebx
c001d974:	e8 d1 fb ff ff       	call   c001d54a <ATA::flush(bool)>
c001d979:	83 c4 10             	add    esp,0x10
c001d97c:	83 c4 2c             	add    esp,0x2c
c001d97f:	89 f0                	mov    eax,esi
c001d981:	5b                   	pop    ebx
c001d982:	5e                   	pop    esi
c001d983:	5f                   	pop    edi
c001d984:	5d                   	pop    ebp
c001d985:	c3                   	ret    

c001d986 <ATA::read(unsigned long long, int, void*)>:
c001d986:	57                   	push   edi
c001d987:	b8 04 00 00 00       	mov    eax,0x4
c001d98c:	56                   	push   esi
c001d98d:	53                   	push   ebx
c001d98e:	83 ec 10             	sub    esp,0x10
c001d991:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d995:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d999:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d99d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d9a1:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d9a4:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d9aa:	77 3b                	ja     c001d9e7 <ATA::read(unsigned long long, int, void*)+0x61>
c001d9ac:	b8 06 00 00 00       	mov    eax,0x6
c001d9b1:	85 d2                	test   edx,edx
c001d9b3:	74 32                	je     c001d9e7 <ATA::read(unsigned long long, int, void*)+0x61>
c001d9b5:	50                   	push   eax
c001d9b6:	50                   	push   eax
c001d9b7:	6a 00                	push   0x0
c001d9b9:	52                   	push   edx
c001d9ba:	53                   	push   ebx
c001d9bb:	57                   	push   edi
c001d9bc:	56                   	push   esi
c001d9bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d9c1:	e8 1e fc ff ff       	call   c001d5e4 <ATA::access(unsigned long long, int, void*, bool)>
c001d9c6:	83 c4 20             	add    esp,0x20
c001d9c9:	85 c0                	test   eax,eax
c001d9cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d9cf:	75 11                	jne    c001d9e2 <ATA::read(unsigned long long, int, void*)+0x5c>
c001d9d1:	01 1d 44 65 02 c0    	add    DWORD PTR ds:0xc0026544,ebx
c001d9d7:	e8 18 f6 fe ff       	call   c000cff4 <VgaText::updateDiskUsage()>
c001d9dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d9e0:	eb 05                	jmp    c001d9e7 <ATA::read(unsigned long long, int, void*)+0x61>
c001d9e2:	b8 01 00 00 00       	mov    eax,0x1
c001d9e7:	83 c4 10             	add    esp,0x10
c001d9ea:	5b                   	pop    ebx
c001d9eb:	5e                   	pop    esi
c001d9ec:	5f                   	pop    edi
c001d9ed:	c3                   	ret    

c001d9ee <ATA::write(unsigned long long, int, void*)>:
c001d9ee:	57                   	push   edi
c001d9ef:	b8 04 00 00 00       	mov    eax,0x4
c001d9f4:	56                   	push   esi
c001d9f5:	53                   	push   ebx
c001d9f6:	83 ec 10             	sub    esp,0x10
c001d9f9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d9fd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001da01:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001da05:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001da09:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001da0c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001da12:	77 3b                	ja     c001da4f <ATA::write(unsigned long long, int, void*)+0x61>
c001da14:	b8 06 00 00 00       	mov    eax,0x6
c001da19:	85 d2                	test   edx,edx
c001da1b:	74 32                	je     c001da4f <ATA::write(unsigned long long, int, void*)+0x61>
c001da1d:	50                   	push   eax
c001da1e:	50                   	push   eax
c001da1f:	6a 01                	push   0x1
c001da21:	52                   	push   edx
c001da22:	53                   	push   ebx
c001da23:	57                   	push   edi
c001da24:	56                   	push   esi
c001da25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001da29:	e8 b6 fb ff ff       	call   c001d5e4 <ATA::access(unsigned long long, int, void*, bool)>
c001da2e:	83 c4 20             	add    esp,0x20
c001da31:	85 c0                	test   eax,eax
c001da33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001da37:	75 11                	jne    c001da4a <ATA::write(unsigned long long, int, void*)+0x5c>
c001da39:	01 1d 40 65 02 c0    	add    DWORD PTR ds:0xc0026540,ebx
c001da3f:	e8 b0 f5 fe ff       	call   c000cff4 <VgaText::updateDiskUsage()>
c001da44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da48:	eb 05                	jmp    c001da4f <ATA::write(unsigned long long, int, void*)+0x61>
c001da4a:	b8 01 00 00 00       	mov    eax,0x1
c001da4f:	83 c4 10             	add    esp,0x10
c001da52:	5b                   	pop    ebx
c001da53:	5e                   	pop    esi
c001da54:	5f                   	pop    edi
c001da55:	c3                   	ret    

c001da56 <ATA::detectCHS()>:
c001da56:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001da5a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001da60:	c1 e0 06             	shl    eax,0x6
c001da63:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001da69:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001da73:	c7 44 24 04 c3 37 02 c0 	mov    DWORD PTR [esp+0x4],0xc00237c3
c001da7b:	e9 cc 7f ff ff       	jmp    c0015a4c <Krnl::panic(char const*)>

c001da80 <ATA::open(int, int, void*)>:
c001da80:	53                   	push   ebx
c001da81:	83 ec 08             	sub    esp,0x8
c001da84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001da8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001da90:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001da96:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001da9c:	c1 e0 06             	shl    eax,0x6
c001da9f:	01 d0                	add    eax,edx
c001daa1:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001daa8:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001daae:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001dab5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dabf:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001dac5:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001dacc:	75 0c                	jne    c001dada <ATA::open(int, int, void*)+0x5a>
c001dace:	83 ec 0c             	sub    esp,0xc
c001dad1:	53                   	push   ebx
c001dad2:	e8 7f ff ff ff       	call   c001da56 <ATA::detectCHS()>
c001dad7:	83 c4 10             	add    esp,0x10
c001dada:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001dae0:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001dae6:	c1 e0 06             	shl    eax,0x6
c001dae9:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001daf0:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dafa:	d1 e8                	shr    eax,1
c001dafc:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001db02:	6a 04                	push   0x4
c001db04:	6a 0c                	push   0xc
c001db06:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db0d:	50                   	push   eax
c001db0e:	52                   	push   edx
c001db0f:	e8 bc ed ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db14:	90                   	nop
c001db15:	90                   	nop
c001db16:	6a 00                	push   0x0
c001db18:	6a 0c                	push   0xc
c001db1a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db21:	50                   	push   eax
c001db22:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001db28:	e8 a3 ed ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db2d:	83 c4 14             	add    esp,0x14
c001db30:	53                   	push   ebx
c001db31:	e8 6a 2f ff ff       	call   c0010aa0 <PhysicalDisk::startCache()>
c001db36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db39:	e8 3e 4f ff ff       	call   c0012a7c <createPartitionsForDisk(PhysicalDisk*)>
c001db3e:	83 c4 18             	add    esp,0x18
c001db41:	31 c0                	xor    eax,eax
c001db43:	5b                   	pop    ebx
c001db44:	c3                   	ret    
c001db45:	90                   	nop

c001db46 <ATAPI::write(unsigned long long, int, void*)>:
c001db46:	b8 03 00 00 00       	mov    eax,0x3
c001db4b:	c3                   	ret    

c001db4c <ATAPI::close(int, int, void*)>:
c001db4c:	83 ec 0c             	sub    esp,0xc
c001db4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db53:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001db59:	85 c0                	test   eax,eax
c001db5b:	74 0c                	je     c001db69 <ATAPI::close(int, int, void*)+0x1d>
c001db5d:	83 ec 0c             	sub    esp,0xc
c001db60:	8b 10                	mov    edx,DWORD PTR [eax]
c001db62:	50                   	push   eax
c001db63:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001db66:	83 c4 10             	add    esp,0x10
c001db69:	31 c0                	xor    eax,eax
c001db6b:	83 c4 0c             	add    esp,0xc
c001db6e:	c3                   	ret    
c001db6f:	90                   	nop

c001db70 <ATAPI::ATAPI()>:
c001db70:	83 ec 0c             	sub    esp,0xc
c001db73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db77:	83 ec 04             	sub    esp,0x4
c001db7a:	68 00 08 00 00       	push   0x800
c001db7f:	68 0c 38 02 c0       	push   0xc002380c
c001db84:	50                   	push   eax
c001db85:	e8 ae 2e ff ff       	call   c0010a38 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001db8a:	83 c4 10             	add    esp,0x10
c001db8d:	ba 4c 38 02 c0       	mov    edx,0xc002384c
c001db92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db96:	89 10                	mov    DWORD PTR [eax],edx
c001db98:	90                   	nop
c001db99:	83 c4 0c             	add    esp,0xc
c001db9c:	c3                   	ret    
c001db9d:	90                   	nop

c001db9e <ATAPI::readyForCommand()>:
c001db9e:	56                   	push   esi
c001db9f:	53                   	push   ebx
c001dba0:	31 db                	xor    ebx,ebx
c001dba2:	50                   	push   eax
c001dba3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dba7:	50                   	push   eax
c001dba8:	6a 0c                	push   0xc
c001dbaa:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001dbb1:	50                   	push   eax
c001dbb2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001dbb8:	e8 d3 ed ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001dbbd:	83 c4 10             	add    esp,0x10
c001dbc0:	a8 88                	test   al,0x88
c001dbc2:	74 23                	je     c001dbe7 <ATAPI::readyForCommand()+0x49>
c001dbc4:	43                   	inc    ebx
c001dbc5:	83 fb 63             	cmp    ebx,0x63
c001dbc8:	7e dd                	jle    c001dba7 <ATAPI::readyForCommand()+0x9>
c001dbca:	51                   	push   ecx
c001dbcb:	51                   	push   ecx
c001dbcc:	6a 00                	push   0x0
c001dbce:	68 40 42 0f 00       	push   0xf4240
c001dbd3:	e8 db b3 ff ff       	call   c0018fb3 <nanoSleep(unsigned long long)>
c001dbd8:	83 c4 10             	add    esp,0x10
c001dbdb:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001dbe1:	75 c4                	jne    c001dba7 <ATAPI::readyForCommand()+0x9>
c001dbe3:	31 c0                	xor    eax,eax
c001dbe5:	eb 02                	jmp    c001dbe9 <ATAPI::readyForCommand()+0x4b>
c001dbe7:	b0 01                	mov    al,0x1
c001dbe9:	5a                   	pop    edx
c001dbea:	5b                   	pop    ebx
c001dbeb:	5e                   	pop    esi
c001dbec:	c3                   	ret    
c001dbed:	90                   	nop

c001dbee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001dbee:	55                   	push   ebp
c001dbef:	57                   	push   edi
c001dbf0:	56                   	push   esi
c001dbf1:	53                   	push   ebx
c001dbf2:	83 ec 20             	sub    esp,0x20
c001dbf5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001dbf9:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001dbfd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dc01:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001dc05:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001dc09:	6a 01                	push   0x1
c001dc0b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc12:	50                   	push   eax
c001dc13:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc19:	e8 c4 ee ff ff       	call   c001cae2 <IDE::enableIRQs(unsigned char, bool)>
c001dc1e:	5e                   	pop    esi
c001dc1f:	58                   	pop    eax
c001dc20:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc27:	50                   	push   eax
c001dc28:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc2e:	e8 77 ec ff ff       	call   c001c8aa <IDE::prepareInterrupt(unsigned char)>
c001dc33:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dc36:	e8 63 ff ff ff       	call   c001db9e <ATAPI::readyForCommand()>
c001dc3b:	83 c4 10             	add    esp,0x10
c001dc3e:	84 c0                	test   al,al
c001dc40:	75 0a                	jne    c001dc4c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001dc42:	bb 01 00 00 00       	mov    ebx,0x1
c001dc47:	e9 57 02 00 00       	jmp    c001dea3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dc4c:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001dc52:	c1 e0 04             	shl    eax,0x4
c001dc55:	0f b6 c0             	movzx  eax,al
c001dc58:	50                   	push   eax
c001dc59:	6a 06                	push   0x6
c001dc5b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc62:	50                   	push   eax
c001dc63:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc69:	e8 62 ec ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc6e:	6a 00                	push   0x0
c001dc70:	6a 01                	push   0x1
c001dc72:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc79:	50                   	push   eax
c001dc7a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc80:	e8 4b ec ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc85:	83 c4 20             	add    esp,0x20
c001dc88:	0f b6 c3             	movzx  eax,bl
c001dc8b:	50                   	push   eax
c001dc8c:	6a 04                	push   0x4
c001dc8e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc95:	50                   	push   eax
c001dc96:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc9c:	0f b6 df             	movzx  ebx,bh
c001dc9f:	e8 2c ec ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dca4:	53                   	push   ebx
c001dca5:	6a 05                	push   0x5
c001dca7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dcae:	50                   	push   eax
c001dcaf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dcb5:	e8 16 ec ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dcba:	83 c4 20             	add    esp,0x20
c001dcbd:	68 a0 00 00 00       	push   0xa0
c001dcc2:	6a 07                	push   0x7
c001dcc4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dccb:	50                   	push   eax
c001dccc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dcd2:	e8 f9 eb ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dcd7:	83 c4 0c             	add    esp,0xc
c001dcda:	6a 01                	push   0x1
c001dcdc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dce3:	50                   	push   eax
c001dce4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dcea:	e8 97 f7 ff ff       	call   c001d486 <IDE::polling(unsigned char, unsigned int)>
c001dcef:	83 c4 10             	add    esp,0x10
c001dcf2:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001dcf8:	84 c0                	test   al,al
c001dcfa:	74 23                	je     c001dd1f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001dcfc:	0f b6 d8             	movzx  ebx,al
c001dcff:	53                   	push   ebx
c001dd00:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001dd07:	0f b6 d2             	movzx  edx,dl
c001dd0a:	50                   	push   eax
c001dd0b:	52                   	push   edx
c001dd0c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd12:	e8 d9 f5 ff ff       	call   c001d2f0 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001dd17:	83 c4 10             	add    esp,0x10
c001dd1a:	e9 84 01 00 00       	jmp    c001dea3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dd1f:	53                   	push   ebx
c001dd20:	53                   	push   ebx
c001dd21:	0f b6 d2             	movzx  edx,dl
c001dd24:	52                   	push   edx
c001dd25:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd2b:	e8 8e eb ff ff       	call   c001c8be <IDE::getBase(unsigned char)>
c001dd30:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001dd34:	b9 06 00 00 00       	mov    ecx,0x6
c001dd39:	89 c2                	mov    edx,eax
c001dd3b:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001dd3e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001dd42:	83 c4 10             	add    esp,0x10
c001dd45:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001dd4b:	85 db                	test   ebx,ebx
c001dd4d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dd54:	0f 84 ec 00 00 00    	je     c001de46 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001dd5a:	51                   	push   ecx
c001dd5b:	51                   	push   ecx
c001dd5c:	52                   	push   edx
c001dd5d:	50                   	push   eax
c001dd5e:	e8 db ec ff ff       	call   c001ca3e <IDE::waitInterrupt(unsigned char)>
c001dd63:	83 c4 10             	add    esp,0x10
c001dd66:	84 c0                	test   al,al
c001dd68:	0f 84 d4 fe ff ff    	je     c001dc42 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001dd6e:	56                   	push   esi
c001dd6f:	56                   	push   esi
c001dd70:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd77:	50                   	push   eax
c001dd78:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd7e:	e8 27 eb ff ff       	call   c001c8aa <IDE::prepareInterrupt(unsigned char)>
c001dd83:	83 c4 0c             	add    esp,0xc
c001dd86:	6a 04                	push   0x4
c001dd88:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd8f:	50                   	push   eax
c001dd90:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd96:	e8 f5 eb ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001dd9b:	83 c4 0c             	add    esp,0xc
c001dd9e:	6a 05                	push   0x5
c001dda0:	89 c6                	mov    esi,eax
c001dda2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dda9:	50                   	push   eax
c001ddaa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ddb0:	e8 db eb ff ff       	call   c001c990 <IDE::read(unsigned char, unsigned char)>
c001ddb5:	89 f1                	mov    ecx,esi
c001ddb7:	0f b6 c0             	movzx  eax,al
c001ddba:	c1 e0 08             	shl    eax,0x8
c001ddbd:	0f b6 f1             	movzx  esi,cl
c001ddc0:	09 c6                	or     esi,eax
c001ddc2:	d1 fe                	sar    esi,1
c001ddc4:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001ddc8:	83 c4 10             	add    esp,0x10
c001ddcb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ddd0:	74 41                	je     c001de13 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001ddd2:	31 c9                	xor    ecx,ecx
c001ddd4:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ddda:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001ddde:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dde5:	75 0a                	jne    c001ddf1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001dde7:	01 c9                	add    ecx,ecx
c001dde9:	01 cd                	add    ebp,ecx
c001ddeb:	4b                   	dec    ebx
c001ddec:	e9 54 ff ff ff       	jmp    c001dd45 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001ddf1:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001ddf6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ddfa:	51                   	push   ecx
c001ddfb:	51                   	push   ecx
c001ddfc:	52                   	push   edx
c001ddfd:	50                   	push   eax
c001ddfe:	e8 bb ea ff ff       	call   c001c8be <IDE::getBase(unsigned char)>
c001de03:	89 c2                	mov    edx,eax
c001de05:	89 f0                	mov    eax,esi
c001de07:	66 ef                	out    dx,ax
c001de09:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001de0d:	83 c4 10             	add    esp,0x10
c001de10:	41                   	inc    ecx
c001de11:	eb c1                	jmp    c001ddd4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001de13:	31 f6                	xor    esi,esi
c001de15:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001de1b:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001de1f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001de26:	75 06                	jne    c001de2e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001de28:	01 f6                	add    esi,esi
c001de2a:	01 f5                	add    ebp,esi
c001de2c:	eb bd                	jmp    c001ddeb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001de2e:	51                   	push   ecx
c001de2f:	51                   	push   ecx
c001de30:	52                   	push   edx
c001de31:	50                   	push   eax
c001de32:	e8 87 ea ff ff       	call   c001c8be <IDE::getBase(unsigned char)>
c001de37:	89 c2                	mov    edx,eax
c001de39:	66 ed                	in     ax,dx
c001de3b:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001de40:	83 c4 10             	add    esp,0x10
c001de43:	46                   	inc    esi
c001de44:	eb cf                	jmp    c001de15 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001de46:	51                   	push   ecx
c001de47:	51                   	push   ecx
c001de48:	52                   	push   edx
c001de49:	50                   	push   eax
c001de4a:	e8 ef eb ff ff       	call   c001ca3e <IDE::waitInterrupt(unsigned char)>
c001de4f:	83 c4 10             	add    esp,0x10
c001de52:	84 c0                	test   al,al
c001de54:	0f 84 e8 fd ff ff    	je     c001dc42 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001de5a:	52                   	push   edx
c001de5b:	bb a0 86 01 00       	mov    ebx,0x186a0
c001de60:	52                   	push   edx
c001de61:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de68:	50                   	push   eax
c001de69:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de6f:	e8 36 ea ff ff       	call   c001c8aa <IDE::prepareInterrupt(unsigned char)>
c001de74:	83 c4 10             	add    esp,0x10
c001de77:	50                   	push   eax
c001de78:	50                   	push   eax
c001de79:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de80:	50                   	push   eax
c001de81:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de87:	e8 32 ea ff ff       	call   c001c8be <IDE::getBase(unsigned char)>
c001de8c:	8d 50 07             	lea    edx,[eax+0x7]
c001de8f:	ec                   	in     al,dx
c001de90:	83 c4 10             	add    esp,0x10
c001de93:	a8 88                	test   al,0x88
c001de95:	74 0a                	je     c001dea1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001de97:	4b                   	dec    ebx
c001de98:	75 dd                	jne    c001de77 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001de9a:	bb 02 00 00 00       	mov    ebx,0x2
c001de9f:	eb 02                	jmp    c001dea3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dea1:	31 db                	xor    ebx,ebx
c001dea3:	83 c4 1c             	add    esp,0x1c
c001dea6:	89 d8                	mov    eax,ebx
c001dea8:	5b                   	pop    ebx
c001dea9:	5e                   	pop    esi
c001deaa:	5f                   	pop    edi
c001deab:	5d                   	pop    ebp
c001deac:	c3                   	ret    
c001dead:	90                   	nop

c001deae <ATAPI::diskRemoved()>:
c001deae:	83 ec 18             	sub    esp,0x18
c001deb1:	68 17 38 02 c0       	push   0xc0023817
c001deb6:	e8 62 13 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001debb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001debf:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001dec6:	83 c4 1c             	add    esp,0x1c
c001dec9:	c3                   	ret    

c001deca <ATAPI::eject()>:
c001deca:	57                   	push   edi
c001decb:	b9 03 00 00 00       	mov    ecx,0x3
c001ded0:	53                   	push   ebx
c001ded1:	83 ec 14             	sub    esp,0x14
c001ded4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ded8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001dedc:	fc                   	cld    
c001dedd:	31 c0                	xor    eax,eax
c001dedf:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dee1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001dee6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001deeb:	50                   	push   eax
c001deec:	50                   	push   eax
c001deed:	6a 00                	push   0x0
c001deef:	6a 00                	push   0x0
c001def1:	6a 00                	push   0x0
c001def3:	6a 02                	push   0x2
c001def5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001def9:	50                   	push   eax
c001defa:	53                   	push   ebx
c001defb:	e8 ee fc ff ff       	call   c001dbee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001df00:	83 c4 14             	add    esp,0x14
c001df03:	53                   	push   ebx
c001df04:	e8 a5 ff ff ff       	call   c001deae <ATAPI::diskRemoved()>
c001df09:	83 c4 24             	add    esp,0x24
c001df0c:	5b                   	pop    ebx
c001df0d:	5f                   	pop    edi
c001df0e:	c3                   	ret    
c001df0f:	90                   	nop

c001df10 <ATAPI::diskInserted()>:
c001df10:	53                   	push   ebx
c001df11:	83 ec 14             	sub    esp,0x14
c001df14:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001df18:	68 2d 38 02 c0       	push   0xc002382d
c001df1d:	e8 fb 12 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001df22:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001df29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001df2c:	e8 6f 2b ff ff       	call   c0010aa0 <PhysicalDisk::startCache()>
c001df31:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001df35:	83 c4 18             	add    esp,0x18
c001df38:	5b                   	pop    ebx
c001df39:	e9 3e 4b ff ff       	jmp    c0012a7c <createPartitionsForDisk(PhysicalDisk*)>

c001df3e <ATAPI::detectMedia()>:
c001df3e:	56                   	push   esi
c001df3f:	53                   	push   ebx
c001df40:	83 ec 28             	sub    esp,0x28
c001df43:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001df47:	6a 0c                	push   0xc
c001df49:	6a 00                	push   0x0
c001df4b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001df4f:	56                   	push   esi
c001df50:	e8 78 27 fe ff       	call   c00006cd <memset>
c001df55:	58                   	pop    eax
c001df56:	5a                   	pop    edx
c001df57:	6a 00                	push   0x0
c001df59:	6a 00                	push   0x0
c001df5b:	6a 00                	push   0x0
c001df5d:	6a 00                	push   0x0
c001df5f:	56                   	push   esi
c001df60:	53                   	push   ebx
c001df61:	e8 88 fc ff ff       	call   c001dbee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001df66:	83 c4 1c             	add    esp,0x1c
c001df69:	6a 0c                	push   0xc
c001df6b:	6a 00                	push   0x0
c001df6d:	56                   	push   esi
c001df6e:	e8 5a 27 fe ff       	call   c00006cd <memset>
c001df73:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001df78:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001df7d:	59                   	pop    ecx
c001df7e:	58                   	pop    eax
c001df7f:	6a 01                	push   0x1
c001df81:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001df85:	50                   	push   eax
c001df86:	6a 00                	push   0x0
c001df88:	6a 12                	push   0x12
c001df8a:	56                   	push   esi
c001df8b:	53                   	push   ebx
c001df8c:	e8 5d fc ff ff       	call   c001dbee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001df91:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001df95:	83 c4 20             	add    esp,0x20
c001df98:	83 e0 7f             	and    eax,0x7f
c001df9b:	3c 70                	cmp    al,0x70
c001df9d:	74 15                	je     c001dfb4 <ATAPI::detectMedia()+0x76>
c001df9f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dfa6:	75 0c                	jne    c001dfb4 <ATAPI::detectMedia()+0x76>
c001dfa8:	83 ec 0c             	sub    esp,0xc
c001dfab:	53                   	push   ebx
c001dfac:	e8 5f ff ff ff       	call   c001df10 <ATAPI::diskInserted()>
c001dfb1:	83 c4 10             	add    esp,0x10
c001dfb4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001dfb8:	83 e0 0f             	and    eax,0xf
c001dfbb:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001dfc0:	75 18                	jne    c001dfda <ATAPI::detectMedia()+0x9c>
c001dfc2:	3c 02                	cmp    al,0x2
c001dfc4:	75 14                	jne    c001dfda <ATAPI::detectMedia()+0x9c>
c001dfc6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dfcd:	74 24                	je     c001dff3 <ATAPI::detectMedia()+0xb5>
c001dfcf:	83 ec 0c             	sub    esp,0xc
c001dfd2:	53                   	push   ebx
c001dfd3:	e8 d6 fe ff ff       	call   c001deae <ATAPI::diskRemoved()>
c001dfd8:	eb 16                	jmp    c001dff0 <ATAPI::detectMedia()+0xb2>
c001dfda:	84 c0                	test   al,al
c001dfdc:	75 15                	jne    c001dff3 <ATAPI::detectMedia()+0xb5>
c001dfde:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dfe5:	75 0c                	jne    c001dff3 <ATAPI::detectMedia()+0xb5>
c001dfe7:	83 ec 0c             	sub    esp,0xc
c001dfea:	53                   	push   ebx
c001dfeb:	e8 20 ff ff ff       	call   c001df10 <ATAPI::diskInserted()>
c001dff0:	83 c4 10             	add    esp,0x10
c001dff3:	83 c4 24             	add    esp,0x24
c001dff6:	5b                   	pop    ebx
c001dff7:	5e                   	pop    esi
c001dff8:	c3                   	ret    
c001dff9:	90                   	nop

c001dffa <ATAPI::open(int, int, void*)>:
c001dffa:	53                   	push   ebx
c001dffb:	83 ec 08             	sub    esp,0x8
c001dffe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e002:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e006:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e00a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e010:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001e016:	c1 e0 06             	shl    eax,0x6
c001e019:	01 d0                	add    eax,edx
c001e01b:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001e022:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001e028:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001e02f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e039:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e03f:	6a 04                	push   0x4
c001e041:	6a 0c                	push   0xc
c001e043:	51                   	push   ecx
c001e044:	52                   	push   edx
c001e045:	e8 86 e8 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e04a:	90                   	nop
c001e04b:	90                   	nop
c001e04c:	6a 00                	push   0x0
c001e04e:	6a 0c                	push   0xc
c001e050:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e057:	50                   	push   eax
c001e058:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e05e:	e8 6d e8 ff ff       	call   c001c8d0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e063:	83 c4 14             	add    esp,0x14
c001e066:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e06d:	53                   	push   ebx
c001e06e:	e8 cb fe ff ff       	call   c001df3e <ATAPI::detectMedia()>
c001e073:	83 c4 18             	add    esp,0x18
c001e076:	31 c0                	xor    eax,eax
c001e078:	5b                   	pop    ebx
c001e079:	c3                   	ret    

c001e07a <ATAPI::read(unsigned long long, int, void*)>:
c001e07a:	55                   	push   ebp
c001e07b:	57                   	push   edi
c001e07c:	56                   	push   esi
c001e07d:	53                   	push   ebx
c001e07e:	83 ec 1c             	sub    esp,0x1c
c001e081:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e085:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e089:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e08d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e094:	74 3c                	je     c001e0d2 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001e096:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e09a:	b9 03 00 00 00       	mov    ecx,0x3
c001e09f:	fc                   	cld    
c001e0a0:	31 c0                	xor    eax,eax
c001e0a2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e0a4:	0f ce                	bswap  esi
c001e0a6:	89 e8                	mov    eax,ebp
c001e0a8:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001e0ad:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e0b1:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001e0b5:	50                   	push   eax
c001e0b6:	50                   	push   eax
c001e0b7:	55                   	push   ebp
c001e0b8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e0bc:	c1 e5 0b             	shl    ebp,0xb
c001e0bf:	6a 00                	push   0x0
c001e0c1:	55                   	push   ebp
c001e0c2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e0c6:	50                   	push   eax
c001e0c7:	53                   	push   ebx
c001e0c8:	e8 21 fb ff ff       	call   c001dbee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e0cd:	83 c4 20             	add    esp,0x20
c001e0d0:	eb 1a                	jmp    c001e0ec <ATAPI::read(unsigned long long, int, void*)+0x72>
c001e0d2:	83 ec 0c             	sub    esp,0xc
c001e0d5:	53                   	push   ebx
c001e0d6:	e8 63 fe ff ff       	call   c001df3e <ATAPI::detectMedia()>
c001e0db:	83 c4 10             	add    esp,0x10
c001e0de:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e0e5:	75 af                	jne    c001e096 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001e0e7:	b8 02 00 00 00       	mov    eax,0x2
c001e0ec:	83 c4 1c             	add    esp,0x1c
c001e0ef:	5b                   	pop    ebx
c001e0f0:	5e                   	pop    esi
c001e0f1:	5f                   	pop    edi
c001e0f2:	5d                   	pop    ebp
c001e0f3:	c3                   	ret    

c001e0f4 <AVX::open(int, int, void*)>:
c001e0f4:	83 ec 0c             	sub    esp,0xc
c001e0f7:	e8 8c 10 00 00       	call   c001f188 <avxInit>
c001e0fc:	b8 00 00 00 00       	mov    eax,0x0
c001e101:	83 c4 0c             	add    esp,0xc
c001e104:	c3                   	ret    
c001e105:	90                   	nop

c001e106 <AVX::close(int, int, void*)>:
c001e106:	83 ec 0c             	sub    esp,0xc
c001e109:	e8 7b 10 00 00       	call   c001f189 <avxClose>
c001e10e:	b8 00 00 00 00       	mov    eax,0x0
c001e113:	83 c4 0c             	add    esp,0xc
c001e116:	c3                   	ret    
c001e117:	90                   	nop

c001e118 <AVX::available()>:
c001e118:	83 ec 0c             	sub    esp,0xc
c001e11b:	e8 60 10 00 00       	call   c001f180 <avxDetect>
c001e120:	85 c0                	test   eax,eax
c001e122:	0f 95 c0             	setne  al
c001e125:	83 c4 0c             	add    esp,0xc
c001e128:	c3                   	ret    
c001e129:	90                   	nop

c001e12a <AVX::save(void*)>:
c001e12a:	83 ec 0c             	sub    esp,0xc
c001e12d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e131:	83 ec 0c             	sub    esp,0xc
c001e134:	50                   	push   eax
c001e135:	e8 4c 10 00 00       	call   c001f186 <avxSave>
c001e13a:	83 c4 10             	add    esp,0x10
c001e13d:	90                   	nop
c001e13e:	83 c4 0c             	add    esp,0xc
c001e141:	c3                   	ret    

c001e142 <AVX::load(void*)>:
c001e142:	83 ec 0c             	sub    esp,0xc
c001e145:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e149:	83 ec 0c             	sub    esp,0xc
c001e14c:	50                   	push   eax
c001e14d:	e8 35 10 00 00       	call   c001f187 <avxLoad>
c001e152:	83 c4 10             	add    esp,0x10
c001e155:	90                   	nop
c001e156:	83 c4 0c             	add    esp,0xc
c001e159:	c3                   	ret    

c001e15a <AVX::AVX()>:
c001e15a:	83 ec 0c             	sub    esp,0xc
c001e15d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e161:	83 ec 08             	sub    esp,0x8
c001e164:	68 78 38 02 c0       	push   0xc0023878
c001e169:	50                   	push   eax
c001e16a:	e8 a7 29 ff ff       	call   c0010b16 <FPU::FPU(char const*)>
c001e16f:	83 c4 10             	add    esp,0x10
c001e172:	ba 88 38 02 c0       	mov    edx,0xc0023888
c001e177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e17b:	89 10                	mov    DWORD PTR [eax],edx
c001e17d:	90                   	nop
c001e17e:	83 c4 0c             	add    esp,0xc
c001e181:	c3                   	ret    

c001e182 <MMX::available()>:
c001e182:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001e187:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e18d:	83 e0 20             	and    eax,0x20
c001e190:	84 c0                	test   al,al
c001e192:	0f 95 c0             	setne  al
c001e195:	c3                   	ret    

c001e196 <MMX::open(int, int, void*)>:
c001e196:	83 ec 0c             	sub    esp,0xc
c001e199:	e8 5e 10 00 00       	call   c001f1fc <x87Init>
c001e19e:	b8 00 00 00 00       	mov    eax,0x0
c001e1a3:	83 c4 0c             	add    esp,0xc
c001e1a6:	c3                   	ret    
c001e1a7:	90                   	nop

c001e1a8 <MMX::close(int, int, void*)>:
c001e1a8:	83 ec 0c             	sub    esp,0xc
c001e1ab:	e8 66 10 00 00       	call   c001f216 <x87Close>
c001e1b0:	b8 00 00 00 00       	mov    eax,0x0
c001e1b5:	83 c4 0c             	add    esp,0xc
c001e1b8:	c3                   	ret    
c001e1b9:	90                   	nop

c001e1ba <MMX::save(void*)>:
c001e1ba:	83 ec 0c             	sub    esp,0xc
c001e1bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1c1:	83 ec 0c             	sub    esp,0xc
c001e1c4:	50                   	push   eax
c001e1c5:	e8 27 10 00 00       	call   c001f1f1 <x87Save>
c001e1ca:	83 c4 10             	add    esp,0x10
c001e1cd:	90                   	nop
c001e1ce:	83 c4 0c             	add    esp,0xc
c001e1d1:	c3                   	ret    

c001e1d2 <MMX::load(void*)>:
c001e1d2:	83 ec 0c             	sub    esp,0xc
c001e1d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1d9:	83 ec 0c             	sub    esp,0xc
c001e1dc:	50                   	push   eax
c001e1dd:	e8 15 10 00 00       	call   c001f1f7 <x87Load>
c001e1e2:	83 c4 10             	add    esp,0x10
c001e1e5:	90                   	nop
c001e1e6:	83 c4 0c             	add    esp,0xc
c001e1e9:	c3                   	ret    

c001e1ea <MMX::MMX()>:
c001e1ea:	83 ec 0c             	sub    esp,0xc
c001e1ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1f1:	83 ec 08             	sub    esp,0x8
c001e1f4:	68 b8 38 02 c0       	push   0xc00238b8
c001e1f9:	50                   	push   eax
c001e1fa:	e8 17 29 ff ff       	call   c0010b16 <FPU::FPU(char const*)>
c001e1ff:	83 c4 10             	add    esp,0x10
c001e202:	ba c8 38 02 c0       	mov    edx,0xc00238c8
c001e207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e20b:	89 10                	mov    DWORD PTR [eax],edx
c001e20d:	90                   	nop
c001e20e:	83 c4 0c             	add    esp,0xc
c001e211:	c3                   	ret    

c001e212 <SSE::open(int, int, void*)>:
c001e212:	83 ec 0c             	sub    esp,0xc
c001e215:	e8 9d 0f 00 00       	call   c001f1b7 <sseInit>
c001e21a:	b8 00 00 00 00       	mov    eax,0x0
c001e21f:	83 c4 0c             	add    esp,0xc
c001e222:	c3                   	ret    
c001e223:	90                   	nop

c001e224 <SSE::close(int, int, void*)>:
c001e224:	83 ec 0c             	sub    esp,0xc
c001e227:	e8 9b 0f 00 00       	call   c001f1c7 <sseClose>
c001e22c:	b8 00 00 00 00       	mov    eax,0x0
c001e231:	83 c4 0c             	add    esp,0xc
c001e234:	c3                   	ret    
c001e235:	90                   	nop

c001e236 <SSE::available()>:
c001e236:	83 ec 1c             	sub    esp,0x1c
c001e239:	e8 52 0f 00 00       	call   c001f190 <sseDetect>
c001e23e:	85 c0                	test   eax,eax
c001e240:	0f 95 c0             	setne  al
c001e243:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e247:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e24b:	83 c4 1c             	add    esp,0x1c
c001e24e:	c3                   	ret    
c001e24f:	90                   	nop

c001e250 <SSE::save(void*)>:
c001e250:	83 ec 0c             	sub    esp,0xc
c001e253:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e257:	83 ec 0c             	sub    esp,0xc
c001e25a:	50                   	push   eax
c001e25b:	e8 4b 0f 00 00       	call   c001f1ab <sseSave>
c001e260:	83 c4 10             	add    esp,0x10
c001e263:	90                   	nop
c001e264:	83 c4 0c             	add    esp,0xc
c001e267:	c3                   	ret    

c001e268 <SSE::load(void*)>:
c001e268:	83 ec 0c             	sub    esp,0xc
c001e26b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e26f:	83 ec 0c             	sub    esp,0xc
c001e272:	50                   	push   eax
c001e273:	e8 39 0f 00 00       	call   c001f1b1 <sseLoad>
c001e278:	83 c4 10             	add    esp,0x10
c001e27b:	90                   	nop
c001e27c:	83 c4 0c             	add    esp,0xc
c001e27f:	c3                   	ret    

c001e280 <SSE::SSE()>:
c001e280:	83 ec 0c             	sub    esp,0xc
c001e283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e287:	83 ec 08             	sub    esp,0x8
c001e28a:	68 f8 38 02 c0       	push   0xc00238f8
c001e28f:	50                   	push   eax
c001e290:	e8 81 28 ff ff       	call   c0010b16 <FPU::FPU(char const*)>
c001e295:	83 c4 10             	add    esp,0x10
c001e298:	ba 08 39 02 c0       	mov    edx,0xc0023908
c001e29d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2a1:	89 10                	mov    DWORD PTR [eax],edx
c001e2a3:	90                   	nop
c001e2a4:	83 c4 0c             	add    esp,0xc
c001e2a7:	c3                   	ret    

c001e2a8 <x87::open(int, int, void*)>:
c001e2a8:	83 ec 0c             	sub    esp,0xc
c001e2ab:	e8 4c 0f 00 00       	call   c001f1fc <x87Init>
c001e2b0:	b8 00 00 00 00       	mov    eax,0x0
c001e2b5:	83 c4 0c             	add    esp,0xc
c001e2b8:	c3                   	ret    
c001e2b9:	90                   	nop

c001e2ba <x87::close(int, int, void*)>:
c001e2ba:	83 ec 0c             	sub    esp,0xc
c001e2bd:	e8 54 0f 00 00       	call   c001f216 <x87Close>
c001e2c2:	b8 00 00 00 00       	mov    eax,0x0
c001e2c7:	83 c4 0c             	add    esp,0xc
c001e2ca:	c3                   	ret    
c001e2cb:	90                   	nop

c001e2cc <x87::available()>:
c001e2cc:	83 ec 0c             	sub    esp,0xc
c001e2cf:	e8 02 0f 00 00       	call   c001f1d6 <x87Detect>
c001e2d4:	85 c0                	test   eax,eax
c001e2d6:	0f 95 c0             	setne  al
c001e2d9:	83 c4 0c             	add    esp,0xc
c001e2dc:	c3                   	ret    
c001e2dd:	90                   	nop

c001e2de <x87::save(void*)>:
c001e2de:	83 ec 0c             	sub    esp,0xc
c001e2e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2e5:	83 ec 0c             	sub    esp,0xc
c001e2e8:	50                   	push   eax
c001e2e9:	e8 03 0f 00 00       	call   c001f1f1 <x87Save>
c001e2ee:	83 c4 10             	add    esp,0x10
c001e2f1:	90                   	nop
c001e2f2:	83 c4 0c             	add    esp,0xc
c001e2f5:	c3                   	ret    

c001e2f6 <x87::load(void*)>:
c001e2f6:	83 ec 0c             	sub    esp,0xc
c001e2f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2fd:	83 ec 0c             	sub    esp,0xc
c001e300:	50                   	push   eax
c001e301:	e8 f1 0e 00 00       	call   c001f1f7 <x87Load>
c001e306:	83 c4 10             	add    esp,0x10
c001e309:	90                   	nop
c001e30a:	83 c4 0c             	add    esp,0xc
c001e30d:	c3                   	ret    

c001e30e <x87::x87()>:
c001e30e:	83 ec 0c             	sub    esp,0xc
c001e311:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e315:	83 ec 08             	sub    esp,0x8
c001e318:	68 38 39 02 c0       	push   0xc0023938
c001e31d:	50                   	push   eax
c001e31e:	e8 f3 27 ff ff       	call   c0010b16 <FPU::FPU(char const*)>
c001e323:	83 c4 10             	add    esp,0x10
c001e326:	ba 48 39 02 c0       	mov    edx,0xc0023948
c001e32b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e32f:	89 10                	mov    DWORD PTR [eax],edx
c001e331:	90                   	nop
c001e332:	83 c4 0c             	add    esp,0xc
c001e335:	c3                   	ret    

c001e336 <APIC::disable()>:
c001e336:	90                   	nop
c001e337:	c3                   	ret    

c001e338 <APIC::close(int, int, void*)>:
c001e338:	55                   	push   ebp
c001e339:	89 e5                	mov    ebp,esp
c001e33b:	83 ec 08             	sub    esp,0x8
c001e33e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e341:	8b 00                	mov    eax,DWORD PTR [eax]
c001e343:	83 c0 3c             	add    eax,0x3c
c001e346:	8b 00                	mov    eax,DWORD PTR [eax]
c001e348:	83 ec 0c             	sub    esp,0xc
c001e34b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e34e:	ff d0                	call   eax
c001e350:	83 c4 10             	add    esp,0x10
c001e353:	b8 00 00 00 00       	mov    eax,0x0
c001e358:	c9                   	leave  
c001e359:	c3                   	ret    

c001e35a <IOAPIC::close(int, int, void*)>:
c001e35a:	b8 00 00 00 00       	mov    eax,0x0
c001e35f:	c3                   	ret    

c001e360 <APIC::io_wait()>:
c001e360:	eb 00                	jmp    c001e362 <APIC::io_wait()+0x2>
c001e362:	eb 00                	jmp    c001e364 <APIC::io_wait()+0x4>
c001e364:	90                   	nop
c001e365:	c3                   	ret    

c001e366 <APIC::getBase()>:
c001e366:	55                   	push   ebp
c001e367:	89 e5                	mov    ebp,esp
c001e369:	83 ec 18             	sub    esp,0x18
c001e36c:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001e371:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e377:	83 e0 08             	and    eax,0x8
c001e37a:	84 c0                	test   al,al
c001e37c:	75 07                	jne    c001e385 <APIC::getBase()+0x1f>
c001e37e:	b8 00 00 00 00       	mov    eax,0x0
c001e383:	eb 21                	jmp    c001e3a6 <APIC::getBase()+0x40>
c001e385:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001e38a:	83 ec 08             	sub    esp,0x8
c001e38d:	6a 1b                	push   0x1b
c001e38f:	50                   	push   eax
c001e390:	e8 f3 d1 fe ff       	call   c000b588 <Computer::rdmsr(unsigned int)>
c001e395:	83 c4 10             	add    esp,0x10
c001e398:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e39b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e39e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e3a1:	25 00 f0 ff ff       	and    eax,0xfffff000
c001e3a6:	c9                   	leave  
c001e3a7:	c3                   	ret    

c001e3a8 <APIC::eoi(unsigned char)>:
c001e3a8:	55                   	push   ebp
c001e3a9:	89 e5                	mov    ebp,esp
c001e3ab:	83 ec 28             	sub    esp,0x28
c001e3ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e3b1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e3b4:	83 ec 0c             	sub    esp,0xc
c001e3b7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e3ba:	e8 a7 ff ff ff       	call   c001e366 <APIC::getBase()>
c001e3bf:	83 c4 10             	add    esp,0x10
c001e3c2:	05 b0 00 00 00       	add    eax,0xb0
c001e3c7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e3ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001e3cd:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001e3d3:	90                   	nop
c001e3d4:	c9                   	leave  
c001e3d5:	c3                   	ret    

c001e3d6 <APIC::open(int, int, void*)>:
c001e3d6:	55                   	push   ebp
c001e3d7:	89 e5                	mov    ebp,esp
c001e3d9:	57                   	push   edi
c001e3da:	56                   	push   esi
c001e3db:	53                   	push   ebx
c001e3dc:	83 ec 1c             	sub    esp,0x1c
c001e3df:	83 ec 0c             	sub    esp,0xc
c001e3e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e3e5:	e8 7c ff ff ff       	call   c001e366 <APIC::getBase()>
c001e3ea:	83 c4 10             	add    esp,0x10
c001e3ed:	05 f0 00 00 00       	add    eax,0xf0
c001e3f2:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e3f5:	83 ec 0c             	sub    esp,0xc
c001e3f8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e3fb:	e8 66 ff ff ff       	call   c001e366 <APIC::getBase()>
c001e400:	83 c4 10             	add    esp,0x10
c001e403:	89 c2                	mov    edx,eax
c001e405:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e408:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e40e:	89 c7                	mov    edi,eax
c001e410:	81 e7 ff 00 00 00    	and    edi,0xff
c001e416:	89 d0                	mov    eax,edx
c001e418:	ba 00 00 00 00       	mov    edx,0x0
c001e41d:	89 c1                	mov    ecx,eax
c001e41f:	80 e5 ff             	and    ch,0xff
c001e422:	89 cb                	mov    ebx,ecx
c001e424:	89 d0                	mov    eax,edx
c001e426:	25 ff 00 00 00       	and    eax,0xff
c001e42b:	89 c6                	mov    esi,eax
c001e42d:	89 d8                	mov    eax,ebx
c001e42f:	89 f2                	mov    edx,esi
c001e431:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e434:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e437:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e43b:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e43f:	83 e0 00             	and    eax,0x0
c001e442:	09 d0                	or     eax,edx
c001e444:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e448:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e44b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e451:	8d 50 01             	lea    edx,[eax+0x1]
c001e454:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e457:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e45d:	31 d2                	xor    edx,edx
c001e45f:	88 c2                	mov    dl,al
c001e461:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e464:	83 c2 08             	add    edx,0x8
c001e467:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e46b:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e471:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e477:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e47b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e47e:	8b 00                	mov    eax,DWORD PTR [eax]
c001e480:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e483:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001e48a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e48d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001e490:	89 10                	mov    DWORD PTR [eax],edx
c001e492:	b8 00 00 00 00       	mov    eax,0x0
c001e497:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e49a:	5b                   	pop    ebx
c001e49b:	5e                   	pop    esi
c001e49c:	5f                   	pop    edi
c001e49d:	5d                   	pop    ebp
c001e49e:	c3                   	ret    
c001e49f:	90                   	nop

c001e4a0 <IOAPIC::IOAPIC()>:
c001e4a0:	83 ec 0c             	sub    esp,0xc
c001e4a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4a7:	83 ec 08             	sub    esp,0x8
c001e4aa:	68 78 39 02 c0       	push   0xc0023978
c001e4af:	50                   	push   eax
c001e4b0:	e8 6d 23 ff ff       	call   c0010822 <Device::Device(char const*)>
c001e4b5:	83 c4 10             	add    esp,0x10
c001e4b8:	ba a0 3a 02 c0       	mov    edx,0xc0023aa0
c001e4bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4c1:	89 10                	mov    DWORD PTR [eax],edx
c001e4c3:	90                   	nop
c001e4c4:	83 c4 0c             	add    esp,0xc
c001e4c7:	c3                   	ret    

c001e4c8 <APIC::APIC()>:
c001e4c8:	53                   	push   ebx
c001e4c9:	83 ec 18             	sub    esp,0x18
c001e4cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4d0:	83 ec 08             	sub    esp,0x8
c001e4d3:	68 80 39 02 c0       	push   0xc0023980
c001e4d8:	50                   	push   eax
c001e4d9:	e8 92 2a ff ff       	call   c0010f70 <InterruptController::InterruptController(char const*)>
c001e4de:	83 c4 10             	add    esp,0x10
c001e4e1:	ba 58 3a 02 c0       	mov    edx,0xc0023a58
c001e4e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4ea:	89 10                	mov    DWORD PTR [eax],edx
c001e4ec:	a0 a0 65 02 c0       	mov    al,ds:0xc00265a0
c001e4f1:	83 f0 01             	xor    eax,0x1
c001e4f4:	84 c0                	test   al,al
c001e4f6:	0f 84 a2 00 00 00    	je     c001e59e <APIC::APIC()+0xd6>
c001e4fc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e501:	a0 50 50 02 c0       	mov    al,ds:0xc0025050
c001e506:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001e50a:	0f 83 87 00 00 00    	jae    c001e597 <APIC::APIC()+0xcf>
c001e510:	83 ec 0c             	sub    esp,0xc
c001e513:	68 68 01 00 00       	push   0x168
c001e518:	e8 cb 0b ff ff       	call   c000f0e8 <operator new(unsigned long)>
c001e51d:	83 c4 10             	add    esp,0x10
c001e520:	89 c3                	mov    ebx,eax
c001e522:	83 ec 0c             	sub    esp,0xc
c001e525:	53                   	push   ebx
c001e526:	e8 75 ff ff ff       	call   c001e4a0 <IOAPIC::IOAPIC()>
c001e52b:	83 c4 10             	add    esp,0x10
c001e52e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001e532:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e536:	25 ff 00 00 00       	and    eax,0xff
c001e53b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e53f:	89 14 85 80 65 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9a80],edx
c001e546:	a1 60 65 02 c0       	mov    eax,ds:0xc0026560
c001e54b:	40                   	inc    eax
c001e54c:	a3 60 65 02 c0       	mov    ds:0xc0026560,eax
c001e551:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001e556:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e55c:	83 ec 08             	sub    esp,0x8
c001e55f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e563:	50                   	push   eax
c001e564:	e8 c9 20 ff ff       	call   c0010632 <Device::addChild(Device*)>
c001e569:	83 c4 10             	add    esp,0x10
c001e56c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e570:	8b 00                	mov    eax,DWORD PTR [eax]
c001e572:	83 c0 08             	add    eax,0x8
c001e575:	8b 10                	mov    edx,DWORD PTR [eax]
c001e577:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e57b:	25 ff 00 00 00       	and    eax,0xff
c001e580:	6a 00                	push   0x0
c001e582:	6a 00                	push   0x0
c001e584:	50                   	push   eax
c001e585:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e589:	ff d2                	call   edx
c001e58b:	83 c4 10             	add    esp,0x10
c001e58e:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001e592:	e9 6a ff ff ff       	jmp    c001e501 <APIC::APIC()+0x39>
c001e597:	c6 05 a0 65 02 c0 01 	mov    BYTE PTR ds:0xc00265a0,0x1
c001e59e:	90                   	nop
c001e59f:	83 c4 18             	add    esp,0x18
c001e5a2:	5b                   	pop    ebx
c001e5a3:	c3                   	ret    

c001e5a4 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e5a4:	55                   	push   ebp
c001e5a5:	89 e5                	mov    ebp,esp
c001e5a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5aa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e5b0:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e5b3:	72 1d                	jb     c001e5d2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e5b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5b8:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e5be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5c1:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e5c7:	01 d0                	add    eax,edx
c001e5c9:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e5cc:	73 04                	jae    c001e5d2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e5ce:	b0 01                	mov    al,0x1
c001e5d0:	eb 02                	jmp    c001e5d4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e5d2:	b0 00                	mov    al,0x0
c001e5d4:	5d                   	pop    ebp
c001e5d5:	c3                   	ret    

c001e5d6 <IOAPIC::read(int)>:
c001e5d6:	55                   	push   ebp
c001e5d7:	89 e5                	mov    ebp,esp
c001e5d9:	83 ec 10             	sub    esp,0x10
c001e5dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5df:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e5e5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e5e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e5eb:	31 d2                	xor    edx,edx
c001e5ed:	88 c2                	mov    dl,al
c001e5ef:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5f2:	89 10                	mov    DWORD PTR [eax],edx
c001e5f4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5f7:	83 c0 10             	add    eax,0x10
c001e5fa:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5fc:	c9                   	leave  
c001e5fd:	c3                   	ret    

c001e5fe <IOAPIC::open(int, int, void*)>:
c001e5fe:	55                   	push   ebp
c001e5ff:	89 e5                	mov    ebp,esp
c001e601:	57                   	push   edi
c001e602:	56                   	push   esi
c001e603:	53                   	push   ebx
c001e604:	83 ec 0c             	sub    esp,0xc
c001e607:	83 ec 0c             	sub    esp,0xc
c001e60a:	68 ab 39 02 c0       	push   0xc00239ab
c001e60f:	e8 09 0c ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001e614:	83 c4 10             	add    esp,0x10
c001e617:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e61a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e61d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e623:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e626:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e62c:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c001e633:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e636:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e63c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e63f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e645:	8b 14 85 00 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf00]
c001e64c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e64f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e655:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e658:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e65e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e661:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e667:	89 c7                	mov    edi,eax
c001e669:	81 e7 ff 00 00 00    	and    edi,0xff
c001e66f:	89 d0                	mov    eax,edx
c001e671:	ba 00 00 00 00       	mov    edx,0x0
c001e676:	89 c1                	mov    ecx,eax
c001e678:	80 e5 ff             	and    ch,0xff
c001e67b:	89 cb                	mov    ebx,ecx
c001e67d:	89 d0                	mov    eax,edx
c001e67f:	25 ff 00 00 00       	and    eax,0xff
c001e684:	89 c6                	mov    esi,eax
c001e686:	89 d8                	mov    eax,ebx
c001e688:	89 f2                	mov    edx,esi
c001e68a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e68d:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e690:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e694:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e698:	83 e0 00             	and    eax,0x0
c001e69b:	09 d0                	or     eax,edx
c001e69d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e6a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6a4:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e6aa:	8d 50 01             	lea    edx,[eax+0x1]
c001e6ad:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e6b0:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e6b6:	31 d2                	xor    edx,edx
c001e6b8:	88 c2                	mov    dl,al
c001e6ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6bd:	83 c2 08             	add    edx,0x8
c001e6c0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e6c4:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e6ca:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e6d0:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e6d4:	83 ec 08             	sub    esp,0x8
c001e6d7:	6a 01                	push   0x1
c001e6d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e6dc:	e8 f5 fe ff ff       	call   c001e5d6 <IOAPIC::read(int)>
c001e6e1:	83 c4 10             	add    esp,0x10
c001e6e4:	c1 f8 10             	sar    eax,0x10
c001e6e7:	25 ff 00 00 00       	and    eax,0xff
c001e6ec:	8d 50 01             	lea    edx,[eax+0x1]
c001e6ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6f2:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e6f8:	b8 00 00 00 00       	mov    eax,0x0
c001e6fd:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e700:	5b                   	pop    ebx
c001e701:	5e                   	pop    esi
c001e702:	5f                   	pop    edi
c001e703:	5d                   	pop    ebp
c001e704:	c3                   	ret    
c001e705:	90                   	nop

c001e706 <IOAPIC::write(int, int)>:
c001e706:	55                   	push   ebp
c001e707:	89 e5                	mov    ebp,esp
c001e709:	83 ec 10             	sub    esp,0x10
c001e70c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e70f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e715:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e718:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e71b:	31 d2                	xor    edx,edx
c001e71d:	88 c2                	mov    dl,al
c001e71f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e722:	89 10                	mov    DWORD PTR [eax],edx
c001e724:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e727:	8d 50 10             	lea    edx,[eax+0x10]
c001e72a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e72d:	89 02                	mov    DWORD PTR [edx],eax
c001e72f:	90                   	nop
c001e730:	c9                   	leave  
c001e731:	c3                   	ret    

c001e732 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001e732:	55                   	push   ebp
c001e733:	89 e5                	mov    ebp,esp
c001e735:	83 ec 20             	sub    esp,0x20
c001e738:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e73b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e73e:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001e741:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e744:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e747:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e74a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e74d:	88 d0                	mov    al,dl
c001e74f:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001e752:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e755:	25 ff 00 00 00       	and    eax,0xff
c001e75a:	83 c0 08             	add    eax,0x8
c001e75d:	01 c0                	add    eax,eax
c001e75f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e762:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e765:	25 ff 00 00 00       	and    eax,0xff
c001e76a:	83 c0 08             	add    eax,0x8
c001e76d:	01 c0                	add    eax,eax
c001e76f:	40                   	inc    eax
c001e770:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001e773:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e776:	50                   	push   eax
c001e777:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e77a:	e8 57 fe ff ff       	call   c001e5d6 <IOAPIC::read(int)>
c001e77f:	83 c4 08             	add    esp,0x8
c001e782:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e785:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001e78c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001e78f:	c1 e0 18             	shl    eax,0x18
c001e792:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e795:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e798:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e79b:	52                   	push   edx
c001e79c:	50                   	push   eax
c001e79d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7a0:	e8 61 ff ff ff       	call   c001e706 <IOAPIC::write(int, int)>
c001e7a5:	83 c4 0c             	add    esp,0xc
c001e7a8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e7ab:	50                   	push   eax
c001e7ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7af:	e8 22 fe ff ff       	call   c001e5d6 <IOAPIC::read(int)>
c001e7b4:	83 c4 08             	add    esp,0x8
c001e7b7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e7ba:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001e7c1:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001e7c8:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001e7cf:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001e7d6:	8a 45 e8             	mov    al,BYTE PTR [ebp-0x18]
c001e7d9:	25 ff 00 00 00       	and    eax,0xff
c001e7de:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001e7e1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001e7e4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e7e7:	52                   	push   edx
c001e7e8:	50                   	push   eax
c001e7e9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7ec:	e8 15 ff ff ff       	call   c001e706 <IOAPIC::write(int, int)>
c001e7f1:	83 c4 0c             	add    esp,0xc
c001e7f4:	90                   	nop
c001e7f5:	c9                   	leave  
c001e7f6:	c3                   	ret    
c001e7f7:	90                   	nop

c001e7f8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001e7f8:	55                   	push   ebp
c001e7f9:	89 e5                	mov    ebp,esp
c001e7fb:	56                   	push   esi
c001e7fc:	53                   	push   ebx
c001e7fd:	83 ec 20             	sub    esp,0x20
c001e800:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e803:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e806:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001e80a:	74 2a                	je     c001e836 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e80c:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001e810:	7f 14                	jg     c001e826 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2e>
c001e812:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e815:	05 00 3f 02 c0       	add    eax,0xc0023f00
c001e81a:	8a 00                	mov    al,BYTE PTR [eax]
c001e81c:	25 ff 00 00 00       	and    eax,0xff
c001e821:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001e824:	eb 10                	jmp    c001e836 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e826:	83 ec 0c             	sub    esp,0xc
c001e829:	68 bc 39 02 c0       	push   0xc00239bc
c001e82e:	e8 19 72 ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c001e833:	83 c4 10             	add    esp,0x10
c001e836:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e83a:	a1 60 65 02 c0       	mov    eax,ds:0xc0026560
c001e83f:	83 ec 08             	sub    esp,0x8
c001e842:	50                   	push   eax
c001e843:	68 f4 39 02 c0       	push   0xc00239f4
c001e848:	e8 d0 09 ff ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001e84d:	83 c4 10             	add    esp,0x10
c001e850:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e857:	a1 60 65 02 c0       	mov    eax,ds:0xc0026560
c001e85c:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e85f:	7d 64                	jge    c001e8c5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e861:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e864:	8b 04 85 80 65 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9a80]
c001e86b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e86e:	83 ec 08             	sub    esp,0x8
c001e871:	52                   	push   edx
c001e872:	50                   	push   eax
c001e873:	e8 2c fd ff ff       	call   c001e5a4 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001e878:	83 c4 10             	add    esp,0x10
c001e87b:	84 c0                	test   al,al
c001e87d:	74 41                	je     c001e8c0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xc8>
c001e87f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e882:	8b 1c 85 80 65 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd9a80]
c001e889:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e88c:	83 c0 20             	add    eax,0x20
c001e88f:	89 c6                	mov    esi,eax
c001e891:	81 e6 ff 00 00 00    	and    esi,0xff
c001e897:	e8 41 60 ff ff       	call   c00148dd <getCPUNumber()>
c001e89c:	89 c2                	mov    edx,eax
c001e89e:	c1 fa 1f             	sar    edx,0x1f
c001e8a1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001e8a4:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e8aa:	83 ec 0c             	sub    esp,0xc
c001e8ad:	56                   	push   esi
c001e8ae:	52                   	push   edx
c001e8af:	50                   	push   eax
c001e8b0:	51                   	push   ecx
c001e8b1:	53                   	push   ebx
c001e8b2:	e8 7b fe ff ff       	call   c001e732 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001e8b7:	83 c4 20             	add    esp,0x20
c001e8ba:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001e8be:	eb 05                	jmp    c001e8c5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e8c0:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001e8c3:	eb 92                	jmp    c001e857 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c001e8c5:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e8c8:	83 f0 01             	xor    eax,0x1
c001e8cb:	84 c0                	test   al,al
c001e8cd:	74 10                	je     c001e8df <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe7>
c001e8cf:	83 ec 0c             	sub    esp,0xc
c001e8d2:	68 0b 3a 02 c0       	push   0xc0023a0b
c001e8d7:	e8 70 71 ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c001e8dc:	83 c4 10             	add    esp,0x10
c001e8df:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001e8e3:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e8ea:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001e8ee:	7f 65                	jg     c001e955 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x15d>
c001e8f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e8f3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e8f6:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e8fd:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e900:	01 ca                	add    edx,ecx
c001e902:	83 c2 54             	add    edx,0x54
c001e905:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001e909:	85 c0                	test   eax,eax
c001e90b:	75 43                	jne    c001e950 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x158>
c001e90d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e910:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e913:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e91a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e91d:	01 ca                	add    edx,ecx
c001e91f:	8d 4a 54             	lea    ecx,[edx+0x54]
c001e922:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001e925:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e929:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e92c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e92f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e936:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e939:	01 ca                	add    edx,ecx
c001e93b:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001e941:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e944:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e948:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e94b:	83 e8 20             	sub    eax,0x20
c001e94e:	eb 1a                	jmp    c001e96a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x172>
c001e950:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001e953:	eb 95                	jmp    c001e8ea <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf2>
c001e955:	83 ec 0c             	sub    esp,0xc
c001e958:	68 18 3a 02 c0       	push   0xc0023a18
c001e95d:	e8 ea 70 ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c001e962:	83 c4 10             	add    esp,0x10
c001e965:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001e96a:	8d 65 f8             	lea    esp,[ebp-0x8]
c001e96d:	5b                   	pop    ebx
c001e96e:	5e                   	pop    esi
c001e96f:	5d                   	pop    ebp
c001e970:	c3                   	ret    
c001e971:	90                   	nop

c001e972 <PIC::disable()>:
c001e972:	55                   	push   ebp
c001e973:	89 e5                	mov    ebp,esp
c001e975:	83 ec 10             	sub    esp,0x10
c001e978:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001e97e:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001e982:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e985:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001e989:	ee                   	out    dx,al
c001e98a:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001e990:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001e994:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e997:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001e99b:	ee                   	out    dx,al
c001e99c:	90                   	nop
c001e99d:	c9                   	leave  
c001e99e:	c3                   	ret    
c001e99f:	90                   	nop

c001e9a0 <PIC::close(int, int, void*)>:
c001e9a0:	55                   	push   ebp
c001e9a1:	89 e5                	mov    ebp,esp
c001e9a3:	83 ec 08             	sub    esp,0x8
c001e9a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e9a9:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9ab:	83 c0 3c             	add    eax,0x3c
c001e9ae:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9b0:	83 ec 0c             	sub    esp,0xc
c001e9b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e9b6:	ff d0                	call   eax
c001e9b8:	83 c4 10             	add    esp,0x10
c001e9bb:	b8 00 00 00 00       	mov    eax,0x0
c001e9c0:	c9                   	leave  
c001e9c1:	c3                   	ret    

c001e9c2 <PIC::PIC()>:
c001e9c2:	83 ec 0c             	sub    esp,0xc
c001e9c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c9:	83 ec 08             	sub    esp,0x8
c001e9cc:	68 c4 3a 02 c0       	push   0xc0023ac4
c001e9d1:	50                   	push   eax
c001e9d2:	e8 99 25 ff ff       	call   c0010f70 <InterruptController::InterruptController(char const*)>
c001e9d7:	83 c4 10             	add    esp,0x10
c001e9da:	ba f0 3a 02 c0       	mov    edx,0xc0023af0
c001e9df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9e3:	89 10                	mov    DWORD PTR [eax],edx
c001e9e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9e9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9ef:	31 d2                	xor    edx,edx
c001e9f1:	88 c2                	mov    dl,al
c001e9f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f7:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001e9fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea02:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea08:	31 d2                	xor    edx,edx
c001ea0a:	88 c2                	mov    dl,al
c001ea0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea10:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001ea15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea19:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea1f:	8d 50 01             	lea    edx,[eax+0x1]
c001ea22:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ea26:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ea2c:	31 d2                	xor    edx,edx
c001ea2e:	88 c2                	mov    dl,al
c001ea30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea34:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ea38:	83 e1 3f             	and    ecx,0x3f
c001ea3b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ea3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea43:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea49:	31 d2                	xor    edx,edx
c001ea4b:	88 c2                	mov    dl,al
c001ea4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea51:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001ea58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea5c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea62:	31 d2                	xor    edx,edx
c001ea64:	88 c2                	mov    dl,al
c001ea66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea6a:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001ea6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea73:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea79:	8d 50 01             	lea    edx,[eax+0x1]
c001ea7c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ea80:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ea86:	31 d2                	xor    edx,edx
c001ea88:	88 c2                	mov    dl,al
c001ea8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea8e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ea92:	83 e1 3f             	and    ecx,0x3f
c001ea95:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ea99:	90                   	nop
c001ea9a:	83 c4 0c             	add    esp,0xc
c001ea9d:	c3                   	ret    

c001ea9e <PIC::ioWait()>:
c001ea9e:	eb 00                	jmp    c001eaa0 <PIC::ioWait()+0x2>
c001eaa0:	eb 00                	jmp    c001eaa2 <PIC::ioWait()+0x4>
c001eaa2:	90                   	nop
c001eaa3:	c3                   	ret    

c001eaa4 <PIC::getIRQReg(int)>:
c001eaa4:	55                   	push   ebp
c001eaa5:	89 e5                	mov    ebp,esp
c001eaa7:	83 ec 10             	sub    esp,0x10
c001eaaa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eaad:	25 ff 00 00 00       	and    eax,0xff
c001eab2:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001eab8:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001eabb:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001eabe:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001eac2:	ee                   	out    dx,al
c001eac3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eac6:	25 ff 00 00 00       	and    eax,0xff
c001eacb:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001ead1:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001ead4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001ead7:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001eadb:	ee                   	out    dx,al
c001eadc:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001eae2:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001eae6:	89 c2                	mov    edx,eax
c001eae8:	ec                   	in     al,dx
c001eae9:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001eaec:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001eaef:	25 ff 00 00 00       	and    eax,0xff
c001eaf4:	c1 e0 08             	shl    eax,0x8
c001eaf7:	89 c1                	mov    ecx,eax
c001eaf9:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001eaff:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001eb03:	89 c2                	mov    edx,eax
c001eb05:	ec                   	in     al,dx
c001eb06:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001eb09:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001eb0c:	25 ff 00 00 00       	and    eax,0xff
c001eb11:	09 c8                	or     eax,ecx
c001eb13:	c9                   	leave  
c001eb14:	c3                   	ret    
c001eb15:	90                   	nop

c001eb16 <PIC::eoi(unsigned char)>:
c001eb16:	55                   	push   ebp
c001eb17:	89 e5                	mov    ebp,esp
c001eb19:	83 ec 14             	sub    esp,0x14
c001eb1c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eb1f:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001eb22:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001eb26:	75 23                	jne    c001eb4b <PIC::eoi(unsigned char)+0x35>
c001eb28:	6a 0b                	push   0xb
c001eb2a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb2d:	e8 72 ff ff ff       	call   c001eaa4 <PIC::getIRQReg(int)>
c001eb32:	83 c4 08             	add    esp,0x8
c001eb35:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001eb39:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001eb3d:	25 ff ff 00 00       	and    eax,0xffff
c001eb42:	25 80 00 00 00       	and    eax,0x80
c001eb47:	85 c0                	test   eax,eax
c001eb49:	74 5f                	je     c001ebaa <PIC::eoi(unsigned char)+0x94>
c001eb4b:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001eb4f:	75 2d                	jne    c001eb7e <PIC::eoi(unsigned char)+0x68>
c001eb51:	6a 0b                	push   0xb
c001eb53:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb56:	e8 49 ff ff ff       	call   c001eaa4 <PIC::getIRQReg(int)>
c001eb5b:	83 c4 08             	add    esp,0x8
c001eb5e:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001eb62:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eb65:	66 85 c0             	test   ax,ax
c001eb68:	78 14                	js     c001eb7e <PIC::eoi(unsigned char)+0x68>
c001eb6a:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001eb70:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001eb74:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001eb77:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001eb7b:	ee                   	out    dx,al
c001eb7c:	eb 2d                	jmp    c001ebab <PIC::eoi(unsigned char)+0x95>
c001eb7e:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001eb82:	76 12                	jbe    c001eb96 <PIC::eoi(unsigned char)+0x80>
c001eb84:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001eb8a:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001eb8e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001eb91:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001eb95:	ee                   	out    dx,al
c001eb96:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001eb9c:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001eba0:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001eba3:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001eba7:	ee                   	out    dx,al
c001eba8:	eb 01                	jmp    c001ebab <PIC::eoi(unsigned char)+0x95>
c001ebaa:	90                   	nop
c001ebab:	c9                   	leave  
c001ebac:	c3                   	ret    
c001ebad:	90                   	nop

c001ebae <PIC::remap()>:
c001ebae:	55                   	push   ebp
c001ebaf:	89 e5                	mov    ebp,esp
c001ebb1:	83 ec 48             	sub    esp,0x48
c001ebb4:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001ebbb:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001ebc2:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001ebc8:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001ebcb:	89 c2                	mov    edx,eax
c001ebcd:	ec                   	in     al,dx
c001ebce:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001ebd1:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001ebd4:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001ebd7:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001ebdd:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001ebe0:	89 c2                	mov    edx,eax
c001ebe2:	ec                   	in     al,dx
c001ebe3:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001ebe6:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001ebe9:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001ebec:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001ebf2:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001ebf6:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001ebf9:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001ebfc:	ee                   	out    dx,al
c001ebfd:	83 ec 0c             	sub    esp,0xc
c001ec00:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec03:	e8 96 fe ff ff       	call   c001ea9e <PIC::ioWait()>
c001ec08:	83 c4 10             	add    esp,0x10
c001ec0b:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001ec11:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001ec15:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001ec18:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001ec1b:	ee                   	out    dx,al
c001ec1c:	83 ec 0c             	sub    esp,0xc
c001ec1f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec22:	e8 77 fe ff ff       	call   c001ea9e <PIC::ioWait()>
c001ec27:	83 c4 10             	add    esp,0x10
c001ec2a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001ec2d:	25 ff 00 00 00       	and    eax,0xff
c001ec32:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001ec38:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001ec3b:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001ec3e:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001ec41:	ee                   	out    dx,al
c001ec42:	83 ec 0c             	sub    esp,0xc
c001ec45:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec48:	e8 51 fe ff ff       	call   c001ea9e <PIC::ioWait()>
c001ec4d:	83 c4 10             	add    esp,0x10
c001ec50:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ec53:	25 ff 00 00 00       	and    eax,0xff
c001ec58:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001ec5e:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001ec61:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001ec64:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ec67:	ee                   	out    dx,al
c001ec68:	83 ec 0c             	sub    esp,0xc
c001ec6b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec6e:	e8 2b fe ff ff       	call   c001ea9e <PIC::ioWait()>
c001ec73:	83 c4 10             	add    esp,0x10
c001ec76:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001ec7c:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001ec80:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001ec83:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001ec86:	ee                   	out    dx,al
c001ec87:	83 ec 0c             	sub    esp,0xc
c001ec8a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec8d:	e8 0c fe ff ff       	call   c001ea9e <PIC::ioWait()>
c001ec92:	83 c4 10             	add    esp,0x10
c001ec95:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001ec9b:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001ec9f:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001eca2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001eca5:	ee                   	out    dx,al
c001eca6:	83 ec 0c             	sub    esp,0xc
c001eca9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecac:	e8 ed fd ff ff       	call   c001ea9e <PIC::ioWait()>
c001ecb1:	83 c4 10             	add    esp,0x10
c001ecb4:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001ecba:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001ecbe:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001ecc1:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001ecc4:	ee                   	out    dx,al
c001ecc5:	83 ec 0c             	sub    esp,0xc
c001ecc8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eccb:	e8 ce fd ff ff       	call   c001ea9e <PIC::ioWait()>
c001ecd0:	83 c4 10             	add    esp,0x10
c001ecd3:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001ecd9:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001ecdd:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001ece0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ece3:	ee                   	out    dx,al
c001ece4:	83 ec 0c             	sub    esp,0xc
c001ece7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecea:	e8 af fd ff ff       	call   c001ea9e <PIC::ioWait()>
c001ecef:	83 c4 10             	add    esp,0x10
c001ecf2:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
c001ecf5:	25 ff 00 00 00       	and    eax,0xff
c001ecfa:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001ed00:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001ed03:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001ed06:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ed09:	ee                   	out    dx,al
c001ed0a:	8a 45 ee             	mov    al,BYTE PTR [ebp-0x12]
c001ed0d:	25 ff 00 00 00       	and    eax,0xff
c001ed12:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001ed18:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001ed1b:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001ed1e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ed21:	ee                   	out    dx,al
c001ed22:	90                   	nop
c001ed23:	c9                   	leave  
c001ed24:	c3                   	ret    
c001ed25:	90                   	nop

c001ed26 <PIC::open(int, int, void*)>:
c001ed26:	55                   	push   ebp
c001ed27:	89 e5                	mov    ebp,esp
c001ed29:	83 ec 18             	sub    esp,0x18
c001ed2c:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001ed32:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001ed36:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001ed39:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001ed3d:	ee                   	out    dx,al
c001ed3e:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001ed44:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001ed48:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001ed4b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001ed4f:	ee                   	out    dx,al
c001ed50:	83 ec 0c             	sub    esp,0xc
c001ed53:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed56:	e8 53 fe ff ff       	call   c001ebae <PIC::remap()>
c001ed5b:	83 c4 10             	add    esp,0x10
c001ed5e:	b8 00 00 00 00       	mov    eax,0x0
c001ed63:	c9                   	leave  
c001ed64:	c3                   	ret    
c001ed65:	90                   	nop

c001ed66 <APICTimer::close(int, int, void*)>:
c001ed66:	b8 00 00 00 00       	mov    eax,0x0
c001ed6b:	c3                   	ret    

c001ed6c <apicTimerHandler(regs*, void*)>:
c001ed6c:	83 ec 0c             	sub    esp,0xc
c001ed6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ed73:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed75:	89 c2                	mov    edx,eax
c001ed77:	c1 fa 1f             	sar    edx,0x1f
c001ed7a:	52                   	push   edx
c001ed7b:	50                   	push   eax
c001ed7c:	6a 00                	push   0x0
c001ed7e:	68 00 ca 9a 3b       	push   0x3b9aca00
c001ed83:	e8 84 07 00 00       	call   c001f50c <__udivdi3>
c001ed88:	83 c4 10             	add    esp,0x10
c001ed8b:	83 ec 08             	sub    esp,0x8
c001ed8e:	52                   	push   edx
c001ed8f:	50                   	push   eax
c001ed90:	e8 08 40 ff ff       	call   c0012d9d <timerHandler(unsigned long long)>
c001ed95:	83 c4 10             	add    esp,0x10
c001ed98:	90                   	nop
c001ed99:	83 c4 0c             	add    esp,0xc
c001ed9c:	c3                   	ret    
c001ed9d:	90                   	nop

c001ed9e <APICTimer::write(int)>:
c001ed9e:	53                   	push   ebx
c001ed9f:	83 ec 28             	sub    esp,0x28
c001eda2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001eda6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001edaa:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001edb0:	e8 2b 5b ff ff       	call   c00148e0 <thisCPU()>
c001edb5:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001edbb:	83 ec 0c             	sub    esp,0xc
c001edbe:	50                   	push   eax
c001edbf:	e8 a2 f5 ff ff       	call   c001e366 <APIC::getBase()>
c001edc4:	83 c4 10             	add    esp,0x10
c001edc7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001edcb:	a1 10 4e 02 c0       	mov    eax,ds:0xc0024e10
c001edd0:	8b 15 14 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024e14
c001edd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001edda:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001edde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ede2:	05 e0 03 00 00       	add    eax,0x3e0
c001ede7:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001eded:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001edf1:	05 80 03 00 00       	add    eax,0x380
c001edf6:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001edfc:	fb                   	sti    
c001edfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee01:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee05:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001ee0a:	83 d2 00             	adc    edx,0x0
c001ee0d:	89 c1                	mov    ecx,eax
c001ee0f:	89 d3                	mov    ebx,edx
c001ee11:	a1 10 4e 02 c0       	mov    eax,ds:0xc0024e10
c001ee16:	8b 15 14 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024e14
c001ee1c:	39 c8                	cmp    eax,ecx
c001ee1e:	89 d0                	mov    eax,edx
c001ee20:	19 d8                	sbb    eax,ebx
c001ee22:	73 02                	jae    c001ee26 <APICTimer::write(int)+0x88>
c001ee24:	eb d7                	jmp    c001edfd <APICTimer::write(int)+0x5f>
c001ee26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee2a:	05 20 03 00 00       	add    eax,0x320
c001ee2f:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001ee35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee39:	05 90 03 00 00       	add    eax,0x390
c001ee3e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee40:	f7 d0                	not    eax
c001ee42:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee46:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ee4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee4e:	ba 00 00 00 00       	mov    edx,0x0
c001ee53:	f7 f3                	div    ebx
c001ee55:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ee59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ee5d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ee63:	0d 00 00 02 00       	or     eax,0x20000
c001ee68:	89 c2                	mov    edx,eax
c001ee6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee6e:	05 20 03 00 00       	add    eax,0x320
c001ee73:	89 10                	mov    DWORD PTR [eax],edx
c001ee75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee79:	05 e0 03 00 00       	add    eax,0x3e0
c001ee7e:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001ee84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee88:	05 80 03 00 00       	add    eax,0x380
c001ee8d:	89 c2                	mov    edx,eax
c001ee8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ee93:	89 02                	mov    DWORD PTR [edx],eax
c001ee95:	90                   	nop
c001ee96:	83 c4 28             	add    esp,0x28
c001ee99:	5b                   	pop    ebx
c001ee9a:	c3                   	ret    
c001ee9b:	90                   	nop

c001ee9c <APICTimer::open(int, int, void*)>:
c001ee9c:	57                   	push   edi
c001ee9d:	56                   	push   esi
c001ee9e:	53                   	push   ebx
c001ee9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eea3:	8b 00                	mov    eax,DWORD PTR [eax]
c001eea5:	83 c0 24             	add    eax,0x24
c001eea8:	8b 00                	mov    eax,DWORD PTR [eax]
c001eeaa:	83 ec 08             	sub    esp,0x8
c001eead:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eeb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eeb5:	ff d0                	call   eax
c001eeb7:	83 c4 10             	add    esp,0x10
c001eeba:	e8 21 5a ff ff       	call   c00148e0 <thisCPU()>
c001eebf:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001eec5:	83 ec 0c             	sub    esp,0xc
c001eec8:	50                   	push   eax
c001eec9:	e8 98 f4 ff ff       	call   c001e366 <APIC::getBase()>
c001eece:	83 c4 10             	add    esp,0x10
c001eed1:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001eed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eedb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001eee1:	89 c7                	mov    edi,eax
c001eee3:	81 e7 ff 00 00 00    	and    edi,0xff
c001eee9:	89 d0                	mov    eax,edx
c001eeeb:	ba 00 00 00 00       	mov    edx,0x0
c001eef0:	89 c1                	mov    ecx,eax
c001eef2:	80 e5 ff             	and    ch,0xff
c001eef5:	89 cb                	mov    ebx,ecx
c001eef7:	89 d0                	mov    eax,edx
c001eef9:	25 ff 00 00 00       	and    eax,0xff
c001eefe:	89 c6                	mov    esi,eax
c001ef00:	89 d8                	mov    eax,ebx
c001ef02:	89 f2                	mov    edx,esi
c001ef04:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef08:	8d 5f 08             	lea    ebx,[edi+0x8]
c001ef0b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ef0f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ef13:	83 e0 00             	and    eax,0x0
c001ef16:	09 d0                	or     eax,edx
c001ef18:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ef1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef20:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ef26:	8d 50 01             	lea    edx,[eax+0x1]
c001ef29:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef2d:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001ef33:	31 d2                	xor    edx,edx
c001ef35:	88 c2                	mov    dl,al
c001ef37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef3b:	83 c2 08             	add    edx,0x8
c001ef3e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ef42:	81 e1 ff 00 00 00    	and    ecx,0xff
c001ef48:	81 c9 00 00 01 00    	or     ecx,0x10000
c001ef4e:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ef52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef56:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ef5a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ef60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef64:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef68:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ef6e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef72:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ef78:	83 ec 0c             	sub    esp,0xc
c001ef7b:	51                   	push   ecx
c001ef7c:	6a 01                	push   0x1
c001ef7e:	68 6c ed 01 c0       	push   0xc001ed6c
c001ef83:	52                   	push   edx
c001ef84:	50                   	push   eax
c001ef85:	e8 fc 15 ff ff       	call   c0010586 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ef8a:	83 c4 20             	add    esp,0x20
c001ef8d:	89 c2                	mov    edx,eax
c001ef8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef93:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ef99:	b8 00 00 00 00       	mov    eax,0x0
c001ef9e:	5b                   	pop    ebx
c001ef9f:	5e                   	pop    esi
c001efa0:	5f                   	pop    edi
c001efa1:	c3                   	ret    

c001efa2 <APICTimer::APICTimer()>:
c001efa2:	83 ec 0c             	sub    esp,0xc
c001efa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efa9:	83 ec 08             	sub    esp,0x8
c001efac:	68 30 3b 02 c0       	push   0xc0023b30
c001efb1:	50                   	push   eax
c001efb2:	e8 57 3d ff ff       	call   c0012d0e <Timer::Timer(char const*)>
c001efb7:	83 c4 10             	add    esp,0x10
c001efba:	ba 44 3b 02 c0       	mov    edx,0xc0023b44
c001efbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc3:	89 10                	mov    DWORD PTR [eax],edx
c001efc5:	90                   	nop
c001efc6:	83 c4 0c             	add    esp,0xc
c001efc9:	c3                   	ret    

c001efca <PIT::write(int)>:
c001efca:	83 ec 10             	sub    esp,0x10
c001efcd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001efd1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001efd5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001efdb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001efdf:	a3 a4 65 02 c0       	mov    ds:0xc00265a4,eax
c001efe4:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001efe9:	89 c2                	mov    edx,eax
c001efeb:	c1 fa 1f             	sar    edx,0x1f
c001efee:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001eff2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eff6:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001effd:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001f002:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001f006:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001f00b:	ee                   	out    dx,al
c001f00c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f010:	25 ff 00 00 00       	and    eax,0xff
c001f015:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001f01c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001f020:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001f024:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001f029:	ee                   	out    dx,al
c001f02a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f02e:	c1 f8 08             	sar    eax,0x8
c001f031:	25 ff 00 00 00       	and    eax,0xff
c001f036:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001f03d:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f041:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f045:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001f04a:	ee                   	out    dx,al
c001f04b:	90                   	nop
c001f04c:	83 c4 10             	add    esp,0x10
c001f04f:	c3                   	ret    

c001f050 <pitHandler(regs*, void*)>:
c001f050:	83 ec 0c             	sub    esp,0xc
c001f053:	a1 a4 65 02 c0       	mov    eax,ds:0xc00265a4
c001f058:	89 c2                	mov    edx,eax
c001f05a:	c1 fa 1f             	sar    edx,0x1f
c001f05d:	52                   	push   edx
c001f05e:	50                   	push   eax
c001f05f:	6a 00                	push   0x0
c001f061:	68 00 ca 9a 3b       	push   0x3b9aca00
c001f066:	e8 a1 04 00 00       	call   c001f50c <__udivdi3>
c001f06b:	83 c4 10             	add    esp,0x10
c001f06e:	83 ec 08             	sub    esp,0x8
c001f071:	52                   	push   edx
c001f072:	50                   	push   eax
c001f073:	e8 25 3d ff ff       	call   c0012d9d <timerHandler(unsigned long long)>
c001f078:	83 c4 10             	add    esp,0x10
c001f07b:	90                   	nop
c001f07c:	83 c4 0c             	add    esp,0xc
c001f07f:	c3                   	ret    

c001f080 <PIT::open(int, int, void*)>:
c001f080:	83 ec 0c             	sub    esp,0xc
c001f083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f087:	8b 00                	mov    eax,DWORD PTR [eax]
c001f089:	83 c0 24             	add    eax,0x24
c001f08c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f08e:	83 ec 08             	sub    esp,0x8
c001f091:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f095:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f099:	ff d0                	call   eax
c001f09b:	83 c4 10             	add    esp,0x10
c001f09e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0a2:	83 ec 0c             	sub    esp,0xc
c001f0a5:	6a 00                	push   0x0
c001f0a7:	6a 01                	push   0x1
c001f0a9:	68 50 f0 01 c0       	push   0xc001f050
c001f0ae:	6a 00                	push   0x0
c001f0b0:	50                   	push   eax
c001f0b1:	e8 d0 14 ff ff       	call   c0010586 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f0b6:	83 c4 20             	add    esp,0x20
c001f0b9:	89 c2                	mov    edx,eax
c001f0bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0bf:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f0c5:	b8 00 00 00 00       	mov    eax,0x0
c001f0ca:	83 c4 0c             	add    esp,0xc
c001f0cd:	c3                   	ret    

c001f0ce <PIT::close(int, int, void*)>:
c001f0ce:	83 ec 0c             	sub    esp,0xc
c001f0d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0d5:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f0df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0e3:	6a 01                	push   0x1
c001f0e5:	68 50 f0 01 c0       	push   0xc001f050
c001f0ea:	6a 00                	push   0x0
c001f0ec:	50                   	push   eax
c001f0ed:	e8 f2 14 ff ff       	call   c00105e4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f0f2:	83 c4 10             	add    esp,0x10
c001f0f5:	b8 00 00 00 00       	mov    eax,0x0
c001f0fa:	83 c4 0c             	add    esp,0xc
c001f0fd:	c3                   	ret    

c001f0fe <PIT::PIT()>:
c001f0fe:	83 ec 0c             	sub    esp,0xc
c001f101:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f105:	83 ec 08             	sub    esp,0x8
c001f108:	68 6c 3b 02 c0       	push   0xc0023b6c
c001f10d:	50                   	push   eax
c001f10e:	e8 fb 3b ff ff       	call   c0012d0e <Timer::Timer(char const*)>
c001f113:	83 c4 10             	add    esp,0x10
c001f116:	ba 94 3b 02 c0       	mov    edx,0xc0023b94
c001f11b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f11f:	89 10                	mov    DWORD PTR [eax],edx
c001f121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f125:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f12b:	31 d2                	xor    edx,edx
c001f12d:	88 c2                	mov    dl,al
c001f12f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f133:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f13a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f13e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f144:	31 d2                	xor    edx,edx
c001f146:	88 c2                	mov    dl,al
c001f148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f14c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f155:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f15b:	8d 50 01             	lea    edx,[eax+0x1]
c001f15e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f162:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001f168:	31 d2                	xor    edx,edx
c001f16a:	88 c2                	mov    dl,al
c001f16c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f170:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f174:	83 e1 3f             	and    ecx,0x3f
c001f177:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f17b:	90                   	nop
c001f17c:	83 c4 0c             	add    esp,0xc
c001f17f:	c3                   	ret    

c001f180 <avxDetect>:
c001f180:	b8 00 00 00 00       	mov    eax,0x0
c001f185:	c3                   	ret    

c001f186 <avxSave>:
c001f186:	c3                   	ret    

c001f187 <avxLoad>:
c001f187:	c3                   	ret    

c001f188 <avxInit>:
c001f188:	c3                   	ret    

c001f189 <avxClose>:
c001f189:	c3                   	ret    
c001f18a:	66 90                	xchg   ax,ax
c001f18c:	66 90                	xchg   ax,ax
c001f18e:	66 90                	xchg   ax,ax

c001f190 <sseDetect>:
c001f190:	b8 01 00 00 00       	mov    eax,0x1
c001f195:	0f a2                	cpuid  
c001f197:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f19d:	74 06                	je     c001f1a5 <sseDetect.noSSE>
c001f19f:	b8 01 00 00 00       	mov    eax,0x1
c001f1a4:	c3                   	ret    

c001f1a5 <sseDetect.noSSE>:
c001f1a5:	b8 00 00 00 00       	mov    eax,0x0
c001f1aa:	c3                   	ret    

c001f1ab <sseSave>:
c001f1ab:	0f ae 44 24 08       	fxsave [esp+0x8]
c001f1b0:	c3                   	ret    

c001f1b1 <sseLoad>:
c001f1b1:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001f1b6:	c3                   	ret    

c001f1b7 <sseInit>:
c001f1b7:	e8 40 00 00 00       	call   c001f1fc <x87Init>
c001f1bc:	0f 20 e0             	mov    eax,cr4
c001f1bf:	66 0d 00 06          	or     ax,0x600
c001f1c3:	0f 22 e0             	mov    cr4,eax
c001f1c6:	c3                   	ret    

c001f1c7 <sseClose>:
c001f1c7:	c3                   	ret    
c001f1c8:	66 90                	xchg   ax,ax
c001f1ca:	66 90                	xchg   ax,ax
c001f1cc:	66 90                	xchg   ax,ax
c001f1ce:	66 90                	xchg   ax,ax

c001f1d0 <value_37F>:
c001f1d0:	7f 03                	jg     c001f1d5 <value_37A+0x1>

c001f1d2 <value_37E>:
c001f1d2:	7e 03                	jle    c001f1d7 <x87Detect+0x1>

c001f1d4 <value_37A>:
c001f1d4:	7a 03                	jp     c001f1d9 <x87Detect+0x3>

c001f1d6 <x87Detect>:
c001f1d6:	b8 01 00 00 00       	mov    eax,0x1
c001f1db:	0f a2                	cpuid  
c001f1dd:	f7 c2 01 00 00 00    	test   edx,0x1
c001f1e3:	74 06                	je     c001f1eb <x87Detect.nox87>
c001f1e5:	b8 01 00 00 00       	mov    eax,0x1
c001f1ea:	c3                   	ret    

c001f1eb <x87Detect.nox87>:
c001f1eb:	b8 00 00 00 00       	mov    eax,0x0
c001f1f0:	c3                   	ret    

c001f1f1 <x87Save>:
c001f1f1:	9b dd 74 24 08       	fsave  [esp+0x8]
c001f1f6:	c3                   	ret    

c001f1f7 <x87Load>:
c001f1f7:	dd 64 24 08          	frstor [esp+0x8]
c001f1fb:	c3                   	ret    

c001f1fc <x87Init>:
c001f1fc:	9b db e3             	finit  
c001f1ff:	0f 20 c0             	mov    eax,cr0
c001f202:	66 25 fb ff          	and    ax,0xfffb
c001f206:	66 0d 22 00          	or     ax,0x22
c001f20a:	0f 22 c0             	mov    cr0,eax
c001f20d:	0f 06                	clts   
c001f20f:	d9 2d d4 f1 01 c0    	fldcw  WORD PTR ds:0xc001f1d4
c001f215:	c3                   	ret    

c001f216 <x87Close>:
c001f216:	c3                   	ret    
c001f217:	90                   	nop

c001f218 <__do_global_ctors_aux>:
c001f218:	a1 f8 02 02 c0       	mov    eax,ds:0xc00202f8
c001f21d:	83 f8 ff             	cmp    eax,0xffffffff
c001f220:	74 1a                	je     c001f23c <__do_global_ctors_aux+0x24>
c001f222:	55                   	push   ebp
c001f223:	89 e5                	mov    ebp,esp
c001f225:	53                   	push   ebx
c001f226:	52                   	push   edx
c001f227:	bb f8 02 02 c0       	mov    ebx,0xc00202f8
c001f22c:	ff d0                	call   eax
c001f22e:	83 eb 04             	sub    ebx,0x4
c001f231:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f233:	83 f8 ff             	cmp    eax,0xffffffff
c001f236:	75 f4                	jne    c001f22c <__do_global_ctors_aux+0x14>
c001f238:	58                   	pop    eax
c001f239:	5b                   	pop    ebx
c001f23a:	5d                   	pop    ebp
c001f23b:	c3                   	ret    
c001f23c:	c3                   	ret    
c001f23d:	66 90                	xchg   ax,ax
c001f23f:	90                   	nop

c001f240 <__divdi3>:
c001f240:	55                   	push   ebp
c001f241:	57                   	push   edi
c001f242:	56                   	push   esi
c001f243:	53                   	push   ebx
c001f244:	83 ec 1c             	sub    esp,0x1c
c001f247:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f24b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f24f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f252:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f256:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f25a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f25e:	85 db                	test   ebx,ebx
c001f260:	0f 88 8e 00 00 00    	js     c001f2f4 <__divdi3+0xb4>
c001f266:	89 dd                	mov    ebp,ebx
c001f268:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f270:	89 d3                	mov    ebx,edx
c001f272:	85 d2                	test   edx,edx
c001f274:	79 0d                	jns    c001f283 <__divdi3+0x43>
c001f276:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f27a:	f7 d8                	neg    eax
c001f27c:	83 d2 00             	adc    edx,0x0
c001f27f:	f7 da                	neg    edx
c001f281:	89 d3                	mov    ebx,edx
c001f283:	89 c7                	mov    edi,eax
c001f285:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f288:	85 db                	test   ebx,ebx
c001f28a:	75 48                	jne    c001f2d4 <__divdi3+0x94>
c001f28c:	39 ef                	cmp    edi,ebp
c001f28e:	76 24                	jbe    c001f2b4 <__divdi3+0x74>
c001f290:	89 ea                	mov    edx,ebp
c001f292:	f7 f7                	div    edi
c001f294:	89 c1                	mov    ecx,eax
c001f296:	31 f6                	xor    esi,esi
c001f298:	89 c8                	mov    eax,ecx
c001f29a:	89 f2                	mov    edx,esi
c001f29c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f2a0:	85 c9                	test   ecx,ecx
c001f2a2:	74 07                	je     c001f2ab <__divdi3+0x6b>
c001f2a4:	f7 d8                	neg    eax
c001f2a6:	83 d2 00             	adc    edx,0x0
c001f2a9:	f7 da                	neg    edx
c001f2ab:	83 c4 1c             	add    esp,0x1c
c001f2ae:	5b                   	pop    ebx
c001f2af:	5e                   	pop    esi
c001f2b0:	5f                   	pop    edi
c001f2b1:	5d                   	pop    ebp
c001f2b2:	c3                   	ret    
c001f2b3:	90                   	nop
c001f2b4:	85 ff                	test   edi,edi
c001f2b6:	75 0b                	jne    c001f2c3 <__divdi3+0x83>
c001f2b8:	b8 01 00 00 00       	mov    eax,0x1
c001f2bd:	31 d2                	xor    edx,edx
c001f2bf:	f7 f3                	div    ebx
c001f2c1:	89 c7                	mov    edi,eax
c001f2c3:	31 d2                	xor    edx,edx
c001f2c5:	89 e8                	mov    eax,ebp
c001f2c7:	f7 f7                	div    edi
c001f2c9:	89 c6                	mov    esi,eax
c001f2cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f2ce:	f7 f7                	div    edi
c001f2d0:	89 c1                	mov    ecx,eax
c001f2d2:	eb c4                	jmp    c001f298 <__divdi3+0x58>
c001f2d4:	39 eb                	cmp    ebx,ebp
c001f2d6:	77 3c                	ja     c001f314 <__divdi3+0xd4>
c001f2d8:	0f bd f3             	bsr    esi,ebx
c001f2db:	83 f6 1f             	xor    esi,0x1f
c001f2de:	75 40                	jne    c001f320 <__divdi3+0xe0>
c001f2e0:	39 eb                	cmp    ebx,ebp
c001f2e2:	72 09                	jb     c001f2ed <__divdi3+0xad>
c001f2e4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f2e7:	0f 87 97 00 00 00    	ja     c001f384 <__divdi3+0x144>
c001f2ed:	b9 01 00 00 00       	mov    ecx,0x1
c001f2f2:	eb a4                	jmp    c001f298 <__divdi3+0x58>
c001f2f4:	f7 d9                	neg    ecx
c001f2f6:	83 d3 00             	adc    ebx,0x0
c001f2f9:	f7 db                	neg    ebx
c001f2fb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f2fe:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f302:	89 dd                	mov    ebp,ebx
c001f304:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f30c:	e9 5f ff ff ff       	jmp    c001f270 <__divdi3+0x30>
c001f311:	8d 76 00             	lea    esi,[esi+0x0]
c001f314:	31 f6                	xor    esi,esi
c001f316:	31 c9                	xor    ecx,ecx
c001f318:	e9 7b ff ff ff       	jmp    c001f298 <__divdi3+0x58>
c001f31d:	8d 76 00             	lea    esi,[esi+0x0]
c001f320:	b8 20 00 00 00       	mov    eax,0x20
c001f325:	29 f0                	sub    eax,esi
c001f327:	89 f1                	mov    ecx,esi
c001f329:	d3 e3                	shl    ebx,cl
c001f32b:	89 fa                	mov    edx,edi
c001f32d:	88 c1                	mov    cl,al
c001f32f:	d3 ea                	shr    edx,cl
c001f331:	09 da                	or     edx,ebx
c001f333:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f337:	89 f1                	mov    ecx,esi
c001f339:	d3 e7                	shl    edi,cl
c001f33b:	89 eb                	mov    ebx,ebp
c001f33d:	88 c1                	mov    cl,al
c001f33f:	d3 eb                	shr    ebx,cl
c001f341:	89 f1                	mov    ecx,esi
c001f343:	d3 e5                	shl    ebp,cl
c001f345:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f348:	88 c1                	mov    cl,al
c001f34a:	d3 ea                	shr    edx,cl
c001f34c:	09 d5                	or     ebp,edx
c001f34e:	89 e8                	mov    eax,ebp
c001f350:	89 da                	mov    edx,ebx
c001f352:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f356:	89 d3                	mov    ebx,edx
c001f358:	89 c5                	mov    ebp,eax
c001f35a:	f7 e7                	mul    edi
c001f35c:	39 d3                	cmp    ebx,edx
c001f35e:	72 18                	jb     c001f378 <__divdi3+0x138>
c001f360:	74 0a                	je     c001f36c <__divdi3+0x12c>
c001f362:	89 e9                	mov    ecx,ebp
c001f364:	31 f6                	xor    esi,esi
c001f366:	e9 2d ff ff ff       	jmp    c001f298 <__divdi3+0x58>
c001f36b:	90                   	nop
c001f36c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f36f:	89 f1                	mov    ecx,esi
c001f371:	d3 e7                	shl    edi,cl
c001f373:	39 c7                	cmp    edi,eax
c001f375:	73 eb                	jae    c001f362 <__divdi3+0x122>
c001f377:	90                   	nop
c001f378:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f37b:	31 f6                	xor    esi,esi
c001f37d:	e9 16 ff ff ff       	jmp    c001f298 <__divdi3+0x58>
c001f382:	66 90                	xchg   ax,ax
c001f384:	31 c9                	xor    ecx,ecx
c001f386:	e9 0d ff ff ff       	jmp    c001f298 <__divdi3+0x58>
c001f38b:	90                   	nop

c001f38c <__moddi3>:
c001f38c:	55                   	push   ebp
c001f38d:	57                   	push   edi
c001f38e:	56                   	push   esi
c001f38f:	53                   	push   ebx
c001f390:	83 ec 2c             	sub    esp,0x2c
c001f393:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f397:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f39b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f39f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f3a3:	85 db                	test   ebx,ebx
c001f3a5:	0f 88 85 00 00 00    	js     c001f430 <__moddi3+0xa4>
c001f3ab:	89 de                	mov    esi,ebx
c001f3ad:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f3b5:	89 d7                	mov    edi,edx
c001f3b7:	85 d2                	test   edx,edx
c001f3b9:	79 09                	jns    c001f3c4 <__moddi3+0x38>
c001f3bb:	f7 d8                	neg    eax
c001f3bd:	83 d2 00             	adc    edx,0x0
c001f3c0:	f7 da                	neg    edx
c001f3c2:	89 d7                	mov    edi,edx
c001f3c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f3c8:	89 cd                	mov    ebp,ecx
c001f3ca:	85 ff                	test   edi,edi
c001f3cc:	75 52                	jne    c001f420 <__moddi3+0x94>
c001f3ce:	89 c3                	mov    ebx,eax
c001f3d0:	39 f0                	cmp    eax,esi
c001f3d2:	76 24                	jbe    c001f3f8 <__moddi3+0x6c>
c001f3d4:	89 c8                	mov    eax,ecx
c001f3d6:	89 f2                	mov    edx,esi
c001f3d8:	f7 f3                	div    ebx
c001f3da:	89 d6                	mov    esi,edx
c001f3dc:	89 f0                	mov    eax,esi
c001f3de:	31 d2                	xor    edx,edx
c001f3e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f3e4:	85 c9                	test   ecx,ecx
c001f3e6:	74 07                	je     c001f3ef <__moddi3+0x63>
c001f3e8:	f7 d8                	neg    eax
c001f3ea:	83 d2 00             	adc    edx,0x0
c001f3ed:	f7 da                	neg    edx
c001f3ef:	83 c4 2c             	add    esp,0x2c
c001f3f2:	5b                   	pop    ebx
c001f3f3:	5e                   	pop    esi
c001f3f4:	5f                   	pop    edi
c001f3f5:	5d                   	pop    ebp
c001f3f6:	c3                   	ret    
c001f3f7:	90                   	nop
c001f3f8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f3fc:	85 db                	test   ebx,ebx
c001f3fe:	75 0d                	jne    c001f40d <__moddi3+0x81>
c001f400:	b8 01 00 00 00       	mov    eax,0x1
c001f405:	31 d2                	xor    edx,edx
c001f407:	f7 f7                	div    edi
c001f409:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f40d:	89 f0                	mov    eax,esi
c001f40f:	31 d2                	xor    edx,edx
c001f411:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f415:	f7 f7                	div    edi
c001f417:	89 e8                	mov    eax,ebp
c001f419:	f7 f7                	div    edi
c001f41b:	89 d6                	mov    esi,edx
c001f41d:	eb bd                	jmp    c001f3dc <__moddi3+0x50>
c001f41f:	90                   	nop
c001f420:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f424:	39 f7                	cmp    edi,esi
c001f426:	76 20                	jbe    c001f448 <__moddi3+0xbc>
c001f428:	89 c8                	mov    eax,ecx
c001f42a:	89 f2                	mov    edx,esi
c001f42c:	eb b2                	jmp    c001f3e0 <__moddi3+0x54>
c001f42e:	66 90                	xchg   ax,ax
c001f430:	f7 d9                	neg    ecx
c001f432:	83 d3 00             	adc    ebx,0x0
c001f435:	f7 db                	neg    ebx
c001f437:	89 de                	mov    esi,ebx
c001f439:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f441:	e9 6f ff ff ff       	jmp    c001f3b5 <__moddi3+0x29>
c001f446:	66 90                	xchg   ax,ax
c001f448:	0f bd c7             	bsr    eax,edi
c001f44b:	83 f0 1f             	xor    eax,0x1f
c001f44e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f452:	75 24                	jne    c001f478 <__moddi3+0xec>
c001f454:	39 f7                	cmp    edi,esi
c001f456:	72 06                	jb     c001f45e <__moddi3+0xd2>
c001f458:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f45c:	77 0c                	ja     c001f46a <__moddi3+0xde>
c001f45e:	89 e9                	mov    ecx,ebp
c001f460:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f464:	19 fe                	sbb    esi,edi
c001f466:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f46a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f46e:	89 f2                	mov    edx,esi
c001f470:	e9 6b ff ff ff       	jmp    c001f3e0 <__moddi3+0x54>
c001f475:	8d 76 00             	lea    esi,[esi+0x0]
c001f478:	b8 20 00 00 00       	mov    eax,0x20
c001f47d:	89 c2                	mov    edx,eax
c001f47f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f483:	29 da                	sub    edx,ebx
c001f485:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f489:	88 d9                	mov    cl,bl
c001f48b:	d3 e7                	shl    edi,cl
c001f48d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f491:	88 d1                	mov    cl,dl
c001f493:	d3 e8                	shr    eax,cl
c001f495:	09 c7                	or     edi,eax
c001f497:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f49b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f49f:	89 d8                	mov    eax,ebx
c001f4a1:	88 d9                	mov    cl,bl
c001f4a3:	d3 e7                	shl    edi,cl
c001f4a5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f4a9:	89 f3                	mov    ebx,esi
c001f4ab:	88 d1                	mov    cl,dl
c001f4ad:	d3 eb                	shr    ebx,cl
c001f4af:	89 c7                	mov    edi,eax
c001f4b1:	88 c1                	mov    cl,al
c001f4b3:	d3 e6                	shl    esi,cl
c001f4b5:	89 e8                	mov    eax,ebp
c001f4b7:	88 d1                	mov    cl,dl
c001f4b9:	d3 e8                	shr    eax,cl
c001f4bb:	09 f0                	or     eax,esi
c001f4bd:	89 f9                	mov    ecx,edi
c001f4bf:	d3 e5                	shl    ebp,cl
c001f4c1:	89 da                	mov    edx,ebx
c001f4c3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f4c7:	89 d3                	mov    ebx,edx
c001f4c9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f4cd:	89 c6                	mov    esi,eax
c001f4cf:	89 d1                	mov    ecx,edx
c001f4d1:	39 d3                	cmp    ebx,edx
c001f4d3:	72 27                	jb     c001f4fc <__moddi3+0x170>
c001f4d5:	74 21                	je     c001f4f8 <__moddi3+0x16c>
c001f4d7:	29 f5                	sub    ebp,esi
c001f4d9:	19 cb                	sbb    ebx,ecx
c001f4db:	89 de                	mov    esi,ebx
c001f4dd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f4e1:	d3 e6                	shl    esi,cl
c001f4e3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f4e7:	89 f9                	mov    ecx,edi
c001f4e9:	d3 ed                	shr    ebp,cl
c001f4eb:	09 ee                	or     esi,ebp
c001f4ed:	89 f0                	mov    eax,esi
c001f4ef:	d3 eb                	shr    ebx,cl
c001f4f1:	89 da                	mov    edx,ebx
c001f4f3:	e9 e8 fe ff ff       	jmp    c001f3e0 <__moddi3+0x54>
c001f4f8:	39 c5                	cmp    ebp,eax
c001f4fa:	73 db                	jae    c001f4d7 <__moddi3+0x14b>
c001f4fc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f500:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f504:	89 d1                	mov    ecx,edx
c001f506:	89 c6                	mov    esi,eax
c001f508:	eb cd                	jmp    c001f4d7 <__moddi3+0x14b>
c001f50a:	66 90                	xchg   ax,ax

c001f50c <__udivdi3>:
c001f50c:	55                   	push   ebp
c001f50d:	57                   	push   edi
c001f50e:	56                   	push   esi
c001f50f:	53                   	push   ebx
c001f510:	83 ec 1c             	sub    esp,0x1c
c001f513:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f517:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f51b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f51f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f523:	85 d2                	test   edx,edx
c001f525:	75 41                	jne    c001f568 <__udivdi3+0x5c>
c001f527:	39 f7                	cmp    edi,esi
c001f529:	76 15                	jbe    c001f540 <__udivdi3+0x34>
c001f52b:	89 e8                	mov    eax,ebp
c001f52d:	89 f2                	mov    edx,esi
c001f52f:	f7 f7                	div    edi
c001f531:	31 db                	xor    ebx,ebx
c001f533:	89 da                	mov    edx,ebx
c001f535:	83 c4 1c             	add    esp,0x1c
c001f538:	5b                   	pop    ebx
c001f539:	5e                   	pop    esi
c001f53a:	5f                   	pop    edi
c001f53b:	5d                   	pop    ebp
c001f53c:	c3                   	ret    
c001f53d:	8d 76 00             	lea    esi,[esi+0x0]
c001f540:	89 f9                	mov    ecx,edi
c001f542:	85 ff                	test   edi,edi
c001f544:	75 0b                	jne    c001f551 <__udivdi3+0x45>
c001f546:	b8 01 00 00 00       	mov    eax,0x1
c001f54b:	31 d2                	xor    edx,edx
c001f54d:	f7 f7                	div    edi
c001f54f:	89 c1                	mov    ecx,eax
c001f551:	31 d2                	xor    edx,edx
c001f553:	89 f0                	mov    eax,esi
c001f555:	f7 f1                	div    ecx
c001f557:	89 c3                	mov    ebx,eax
c001f559:	89 e8                	mov    eax,ebp
c001f55b:	f7 f1                	div    ecx
c001f55d:	89 da                	mov    edx,ebx
c001f55f:	83 c4 1c             	add    esp,0x1c
c001f562:	5b                   	pop    ebx
c001f563:	5e                   	pop    esi
c001f564:	5f                   	pop    edi
c001f565:	5d                   	pop    ebp
c001f566:	c3                   	ret    
c001f567:	90                   	nop
c001f568:	39 f2                	cmp    edx,esi
c001f56a:	77 1c                	ja     c001f588 <__udivdi3+0x7c>
c001f56c:	0f bd da             	bsr    ebx,edx
c001f56f:	83 f3 1f             	xor    ebx,0x1f
c001f572:	75 24                	jne    c001f598 <__udivdi3+0x8c>
c001f574:	39 f2                	cmp    edx,esi
c001f576:	72 08                	jb     c001f580 <__udivdi3+0x74>
c001f578:	39 ef                	cmp    edi,ebp
c001f57a:	0f 87 84 00 00 00    	ja     c001f604 <__udivdi3+0xf8>
c001f580:	b8 01 00 00 00       	mov    eax,0x1
c001f585:	eb ac                	jmp    c001f533 <__udivdi3+0x27>
c001f587:	90                   	nop
c001f588:	31 db                	xor    ebx,ebx
c001f58a:	31 c0                	xor    eax,eax
c001f58c:	89 da                	mov    edx,ebx
c001f58e:	83 c4 1c             	add    esp,0x1c
c001f591:	5b                   	pop    ebx
c001f592:	5e                   	pop    esi
c001f593:	5f                   	pop    edi
c001f594:	5d                   	pop    ebp
c001f595:	c3                   	ret    
c001f596:	66 90                	xchg   ax,ax
c001f598:	b8 20 00 00 00       	mov    eax,0x20
c001f59d:	29 d8                	sub    eax,ebx
c001f59f:	88 d9                	mov    cl,bl
c001f5a1:	d3 e2                	shl    edx,cl
c001f5a3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f5a7:	89 fa                	mov    edx,edi
c001f5a9:	88 c1                	mov    cl,al
c001f5ab:	d3 ea                	shr    edx,cl
c001f5ad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f5b1:	09 d1                	or     ecx,edx
c001f5b3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f5b7:	88 d9                	mov    cl,bl
c001f5b9:	d3 e7                	shl    edi,cl
c001f5bb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f5bf:	89 f7                	mov    edi,esi
c001f5c1:	88 c1                	mov    cl,al
c001f5c3:	d3 ef                	shr    edi,cl
c001f5c5:	88 d9                	mov    cl,bl
c001f5c7:	d3 e6                	shl    esi,cl
c001f5c9:	89 ea                	mov    edx,ebp
c001f5cb:	88 c1                	mov    cl,al
c001f5cd:	d3 ea                	shr    edx,cl
c001f5cf:	09 d6                	or     esi,edx
c001f5d1:	89 f0                	mov    eax,esi
c001f5d3:	89 fa                	mov    edx,edi
c001f5d5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f5d9:	89 d7                	mov    edi,edx
c001f5db:	89 c6                	mov    esi,eax
c001f5dd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f5e1:	39 d7                	cmp    edi,edx
c001f5e3:	72 13                	jb     c001f5f8 <__udivdi3+0xec>
c001f5e5:	74 09                	je     c001f5f0 <__udivdi3+0xe4>
c001f5e7:	89 f0                	mov    eax,esi
c001f5e9:	31 db                	xor    ebx,ebx
c001f5eb:	e9 43 ff ff ff       	jmp    c001f533 <__udivdi3+0x27>
c001f5f0:	88 d9                	mov    cl,bl
c001f5f2:	d3 e5                	shl    ebp,cl
c001f5f4:	39 c5                	cmp    ebp,eax
c001f5f6:	73 ef                	jae    c001f5e7 <__udivdi3+0xdb>
c001f5f8:	8d 46 ff             	lea    eax,[esi-0x1]
c001f5fb:	31 db                	xor    ebx,ebx
c001f5fd:	e9 31 ff ff ff       	jmp    c001f533 <__udivdi3+0x27>
c001f602:	66 90                	xchg   ax,ax
c001f604:	31 c0                	xor    eax,eax
c001f606:	e9 28 ff ff ff       	jmp    c001f533 <__udivdi3+0x27>
c001f60b:	90                   	nop

c001f60c <__umoddi3>:
c001f60c:	55                   	push   ebp
c001f60d:	57                   	push   edi
c001f60e:	56                   	push   esi
c001f60f:	53                   	push   ebx
c001f610:	83 ec 1c             	sub    esp,0x1c
c001f613:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f617:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f61b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f61f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f623:	89 da                	mov    edx,ebx
c001f625:	85 c0                	test   eax,eax
c001f627:	75 37                	jne    c001f660 <__umoddi3+0x54>
c001f629:	39 df                	cmp    edi,ebx
c001f62b:	76 13                	jbe    c001f640 <__umoddi3+0x34>
c001f62d:	89 f0                	mov    eax,esi
c001f62f:	f7 f7                	div    edi
c001f631:	89 d0                	mov    eax,edx
c001f633:	31 d2                	xor    edx,edx
c001f635:	83 c4 1c             	add    esp,0x1c
c001f638:	5b                   	pop    ebx
c001f639:	5e                   	pop    esi
c001f63a:	5f                   	pop    edi
c001f63b:	5d                   	pop    ebp
c001f63c:	c3                   	ret    
c001f63d:	8d 76 00             	lea    esi,[esi+0x0]
c001f640:	89 fd                	mov    ebp,edi
c001f642:	85 ff                	test   edi,edi
c001f644:	75 0b                	jne    c001f651 <__umoddi3+0x45>
c001f646:	b8 01 00 00 00       	mov    eax,0x1
c001f64b:	31 d2                	xor    edx,edx
c001f64d:	f7 f7                	div    edi
c001f64f:	89 c5                	mov    ebp,eax
c001f651:	89 d8                	mov    eax,ebx
c001f653:	31 d2                	xor    edx,edx
c001f655:	f7 f5                	div    ebp
c001f657:	89 f0                	mov    eax,esi
c001f659:	f7 f5                	div    ebp
c001f65b:	89 d0                	mov    eax,edx
c001f65d:	eb d4                	jmp    c001f633 <__umoddi3+0x27>
c001f65f:	90                   	nop
c001f660:	89 f1                	mov    ecx,esi
c001f662:	39 d8                	cmp    eax,ebx
c001f664:	76 0a                	jbe    c001f670 <__umoddi3+0x64>
c001f666:	89 f0                	mov    eax,esi
c001f668:	83 c4 1c             	add    esp,0x1c
c001f66b:	5b                   	pop    ebx
c001f66c:	5e                   	pop    esi
c001f66d:	5f                   	pop    edi
c001f66e:	5d                   	pop    ebp
c001f66f:	c3                   	ret    
c001f670:	0f bd e8             	bsr    ebp,eax
c001f673:	83 f5 1f             	xor    ebp,0x1f
c001f676:	75 1c                	jne    c001f694 <__umoddi3+0x88>
c001f678:	39 d8                	cmp    eax,ebx
c001f67a:	72 04                	jb     c001f680 <__umoddi3+0x74>
c001f67c:	39 f7                	cmp    edi,esi
c001f67e:	77 08                	ja     c001f688 <__umoddi3+0x7c>
c001f680:	89 da                	mov    edx,ebx
c001f682:	29 fe                	sub    esi,edi
c001f684:	19 c2                	sbb    edx,eax
c001f686:	89 f1                	mov    ecx,esi
c001f688:	89 c8                	mov    eax,ecx
c001f68a:	83 c4 1c             	add    esp,0x1c
c001f68d:	5b                   	pop    ebx
c001f68e:	5e                   	pop    esi
c001f68f:	5f                   	pop    edi
c001f690:	5d                   	pop    ebp
c001f691:	c3                   	ret    
c001f692:	66 90                	xchg   ax,ax
c001f694:	ba 20 00 00 00       	mov    edx,0x20
c001f699:	29 ea                	sub    edx,ebp
c001f69b:	89 e9                	mov    ecx,ebp
c001f69d:	d3 e0                	shl    eax,cl
c001f69f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f6a3:	89 f8                	mov    eax,edi
c001f6a5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f6a9:	88 d1                	mov    cl,dl
c001f6ab:	d3 e8                	shr    eax,cl
c001f6ad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f6b1:	09 c1                	or     ecx,eax
c001f6b3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f6b7:	89 e9                	mov    ecx,ebp
c001f6b9:	d3 e7                	shl    edi,cl
c001f6bb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f6bf:	89 d8                	mov    eax,ebx
c001f6c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f6c5:	88 d1                	mov    cl,dl
c001f6c7:	d3 e8                	shr    eax,cl
c001f6c9:	89 c7                	mov    edi,eax
c001f6cb:	89 e9                	mov    ecx,ebp
c001f6cd:	d3 e3                	shl    ebx,cl
c001f6cf:	89 f0                	mov    eax,esi
c001f6d1:	88 d1                	mov    cl,dl
c001f6d3:	d3 e8                	shr    eax,cl
c001f6d5:	09 d8                	or     eax,ebx
c001f6d7:	89 e9                	mov    ecx,ebp
c001f6d9:	d3 e6                	shl    esi,cl
c001f6db:	89 f3                	mov    ebx,esi
c001f6dd:	89 fa                	mov    edx,edi
c001f6df:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f6e3:	89 d1                	mov    ecx,edx
c001f6e5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f6e9:	89 c6                	mov    esi,eax
c001f6eb:	89 d7                	mov    edi,edx
c001f6ed:	39 d1                	cmp    ecx,edx
c001f6ef:	72 27                	jb     c001f718 <__umoddi3+0x10c>
c001f6f1:	74 21                	je     c001f714 <__umoddi3+0x108>
c001f6f3:	89 ca                	mov    edx,ecx
c001f6f5:	29 f3                	sub    ebx,esi
c001f6f7:	19 fa                	sbb    edx,edi
c001f6f9:	89 d0                	mov    eax,edx
c001f6fb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f6ff:	d3 e0                	shl    eax,cl
c001f701:	89 e9                	mov    ecx,ebp
c001f703:	d3 eb                	shr    ebx,cl
c001f705:	09 d8                	or     eax,ebx
c001f707:	d3 ea                	shr    edx,cl
c001f709:	83 c4 1c             	add    esp,0x1c
c001f70c:	5b                   	pop    ebx
c001f70d:	5e                   	pop    esi
c001f70e:	5f                   	pop    edi
c001f70f:	5d                   	pop    ebp
c001f710:	c3                   	ret    
c001f711:	8d 76 00             	lea    esi,[esi+0x0]
c001f714:	39 c3                	cmp    ebx,eax
c001f716:	73 db                	jae    c001f6f3 <__umoddi3+0xe7>
c001f718:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f71c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f720:	89 d7                	mov    edi,edx
c001f722:	89 c6                	mov    esi,eax
c001f724:	eb cd                	jmp    c001f6f3 <__umoddi3+0xe7>
c001f726:	66 90                	xchg   ax,ax
c001f728:	66 90                	xchg   ax,ax
c001f72a:	66 90                	xchg   ax,ax
c001f72c:	66 90                	xchg   ax,ax
c001f72e:	66 90                	xchg   ax,ax

c001f730 <fabs>:
c001f730:	83 ec 0c             	sub    esp,0xc
c001f733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f737:	89 04 24             	mov    DWORD PTR [esp],eax
c001f73a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f73e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001f743:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f747:	dd 04 24             	fld    QWORD PTR [esp]
c001f74a:	83 c4 0c             	add    esp,0xc
c001f74d:	c3                   	ret    
c001f74e:	66 90                	xchg   ax,ax

c001f750 <lrint>:
c001f750:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001f754:	83 ec 04             	sub    esp,0x4
c001f757:	db 1c 24             	fistp  DWORD PTR [esp]
c001f75a:	58                   	pop    eax
c001f75b:	c3                   	ret    

c001f75c <lrintf>:
c001f75c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001f760:	83 ec 04             	sub    esp,0x4
c001f763:	db 1c 24             	fistp  DWORD PTR [esp]
c001f766:	58                   	pop    eax
c001f767:	c3                   	ret    

Disassembly of section .init:

c001f768 <_init>:
c001f768:	55                   	push   ebp
c001f769:	89 e5                	mov    ebp,esp
c001f76b:	e8 a8 09 fe ff       	call   c0000118 <frame_dummy>
c001f770:	e8 a3 fa ff ff       	call   c001f218 <__do_global_ctors_aux>
c001f775:	5d                   	pop    ebp
c001f776:	c3                   	ret    

Disassembly of section .fini:

c001f777 <_fini>:
c001f777:	55                   	push   ebp
c001f778:	89 e5                	mov    ebp,esp
c001f77a:	e8 29 09 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001f77f:	5d                   	pop    ebp
c001f780:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f782 <Computer::~Computer()>:
c001f782:	83 ec 0c             	sub    esp,0xc
c001f785:	ba a4 12 02 c0       	mov    edx,0xc00212a4
c001f78a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f78e:	89 10                	mov    DWORD PTR [eax],edx
c001f790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f794:	83 ec 0c             	sub    esp,0xc
c001f797:	50                   	push   eax
c001f798:	e8 3b 0d ff ff       	call   c00104d8 <Device::~Device()>
c001f79d:	83 c4 10             	add    esp,0x10
c001f7a0:	90                   	nop
c001f7a1:	83 c4 0c             	add    esp,0xc
c001f7a4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f7a6 <Computer::~Computer()>:
c001f7a6:	83 ec 0c             	sub    esp,0xc
c001f7a9:	83 ec 0c             	sub    esp,0xc
c001f7ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7b0:	e8 cd ff ff ff       	call   c001f782 <Computer::~Computer()>
c001f7b5:	83 c4 10             	add    esp,0x10
c001f7b8:	83 ec 08             	sub    esp,0x8
c001f7bb:	68 ec 01 00 00       	push   0x1ec
c001f7c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7c4:	e8 2e f9 fe ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c001f7c9:	83 c4 10             	add    esp,0x10
c001f7cc:	83 c4 0c             	add    esp,0xc
c001f7cf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f7d0 <idleCommon()>:
c001f7d0:	83 ec 0c             	sub    esp,0xc
c001f7d3:	e8 7d 92 ff ff       	call   c0018a55 <lockScheduler()>
c001f7d8:	e8 c1 95 ff ff       	call   c0018d9e <schedule()>
c001f7dd:	83 c4 0c             	add    esp,0xc
c001f7e0:	e9 72 92 ff ff       	jmp    c0018a57 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001f7e5 <CPU::readCR3()>:
c001f7e5:	83 ec 10             	sub    esp,0x10
c001f7e8:	0f 20 d8             	mov    eax,cr3
c001f7eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f7ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7f3:	83 c4 10             	add    esp,0x10
c001f7f6:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001f7f7 <CPU::writeCR3(unsigned long)>:
c001f7f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7fb:	0f 22 d8             	mov    cr3,eax
c001f7fe:	90                   	nop
c001f7ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f800 <LinkedList<UnixFile>::~LinkedList()>:
c001f800:	90                   	nop
c001f801:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f802 <LinkedList<UnixFile>::LinkedList()>:
c001f802:	83 ec 0c             	sub    esp,0xc
c001f805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f809:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f80f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f813:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f81a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f81e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f829:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f82f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f833:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f83e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f845:	83 ec 0c             	sub    esp,0xc
c001f848:	68 9d 15 02 c0       	push   0xc002159d
c001f84d:	e8 cb f9 fe ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001f852:	83 c4 10             	add    esp,0x10
c001f855:	90                   	nop
c001f856:	83 c4 0c             	add    esp,0xc
c001f859:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f85a <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f85a:	83 ec 0c             	sub    esp,0xc
c001f85d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f862:	75 10                	jne    c001f874 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f864:	83 ec 0c             	sub    esp,0xc
c001f867:	68 b8 15 02 c0       	push   0xc00215b8
c001f86c:	e8 db 61 ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c001f871:	83 c4 10             	add    esp,0x10
c001f874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f878:	8b 00                	mov    eax,DWORD PTR [eax]
c001f87a:	85 c0                	test   eax,eax
c001f87c:	74 34                	je     c001f8b2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f87e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f882:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f885:	85 c0                	test   eax,eax
c001f887:	74 29                	je     c001f8b2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f88d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f890:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f894:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f89b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f89f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8a9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f8b0:	eb 65                	jmp    c001f917 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8b6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8b8:	85 c0                	test   eax,eax
c001f8ba:	75 4b                	jne    c001f907 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f8bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8c3:	85 c0                	test   eax,eax
c001f8c5:	75 40                	jne    c001f907 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8cf:	89 10                	mov    DWORD PTR [eax],edx
c001f8d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8d5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8d9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f8dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8e3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f8ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8f1:	85 c0                	test   eax,eax
c001f8f3:	74 22                	je     c001f917 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f8f5:	83 ec 0c             	sub    esp,0xc
c001f8f8:	68 da 15 02 c0       	push   0xc00215da
c001f8fd:	e8 4a 61 ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c001f902:	83 c4 10             	add    esp,0x10
c001f905:	eb 10                	jmp    c001f917 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f907:	83 ec 0c             	sub    esp,0xc
c001f90a:	68 e4 15 02 c0       	push   0xc00215e4
c001f90f:	e8 38 61 ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c001f914:	83 c4 10             	add    esp,0x10
c001f917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f91b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f91e:	8d 50 01             	lea    edx,[eax+0x1]
c001f921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f925:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f928:	90                   	nop
c001f929:	83 c4 0c             	add    esp,0xc
c001f92c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f92e <LinkedList<UnixFile>::getFirstElement()>:
c001f92e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f932:	8b 00                	mov    eax,DWORD PTR [eax]
c001f934:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f936 <LinkedList<UnixFile>::removeFirst()>:
c001f936:	83 ec 0c             	sub    esp,0xc
c001f939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f93d:	8b 00                	mov    eax,DWORD PTR [eax]
c001f93f:	85 c0                	test   eax,eax
c001f941:	75 12                	jne    c001f955 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f943:	83 ec 0c             	sub    esp,0xc
c001f946:	68 f0 15 02 c0       	push   0xc00215f0
c001f94b:	e8 fc 60 ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c001f950:	83 c4 10             	add    esp,0x10
c001f953:	eb 7e                	jmp    c001f9d3 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f959:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f95c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f95f:	85 c0                	test   eax,eax
c001f961:	74 10                	je     c001f973 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f963:	83 ec 0c             	sub    esp,0xc
c001f966:	68 3b 16 02 c0       	push   0xc002163b
c001f96b:	e8 dc 60 ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c001f970:	83 c4 10             	add    esp,0x10
c001f973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f977:	8b 00                	mov    eax,DWORD PTR [eax]
c001f979:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f97c:	85 c0                	test   eax,eax
c001f97e:	75 33                	jne    c001f9b3 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f984:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f98e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f999:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f99c:	83 f8 01             	cmp    eax,0x1
c001f99f:	74 21                	je     c001f9c2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f9a1:	83 ec 0c             	sub    esp,0xc
c001f9a4:	68 14 16 02 c0       	push   0xc0021614
c001f9a9:	e8 9e 60 ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c001f9ae:	83 c4 10             	add    esp,0x10
c001f9b1:	eb 0f                	jmp    c001f9c2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f9b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b7:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9b9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f9bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c0:	89 10                	mov    DWORD PTR [eax],edx
c001f9c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9c9:	8d 50 ff             	lea    edx,[eax-0x1]
c001f9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f9d3:	83 c4 0c             	add    esp,0xc
c001f9d6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f9d8 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f9d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9df:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f9e0 <DriverlessDevice::~DriverlessDevice()>:
c001f9e0:	ba a4 1c 02 c0       	mov    edx,0xc0021ca4
c001f9e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9e9:	89 10                	mov    DWORD PTR [eax],edx
c001f9eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9ef:	50                   	push   eax
c001f9f0:	e8 e3 0a ff ff       	call   c00104d8 <Device::~Device()>
c001f9f5:	83 c4 04             	add    esp,0x4
c001f9f8:	90                   	nop
c001f9f9:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f9fa <DriverlessDevice::~DriverlessDevice()>:
c001f9fa:	83 ec 0c             	sub    esp,0xc
c001f9fd:	83 ec 0c             	sub    esp,0xc
c001fa00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa04:	e8 d7 ff ff ff       	call   c001f9e0 <DriverlessDevice::~DriverlessDevice()>
c001fa09:	83 c4 10             	add    esp,0x10
c001fa0c:	83 ec 08             	sub    esp,0x8
c001fa0f:	68 58 01 00 00       	push   0x158
c001fa14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa18:	e8 da f6 fe ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c001fa1d:	83 c4 10             	add    esp,0x10
c001fa20:	83 c4 0c             	add    esp,0xc
c001fa23:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fa24 <LinkedList<Device>::addElement(Device*)>:
c001fa24:	83 ec 0c             	sub    esp,0xc
c001fa27:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fa2c:	75 10                	jne    c001fa3e <LinkedList<Device>::addElement(Device*)+0x1a>
c001fa2e:	83 ec 0c             	sub    esp,0xc
c001fa31:	68 b8 15 02 c0       	push   0xc00215b8
c001fa36:	e8 11 60 ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c001fa3b:	83 c4 10             	add    esp,0x10
c001fa3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa42:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa44:	85 c0                	test   eax,eax
c001fa46:	74 3a                	je     c001fa82 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fa48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa4f:	85 c0                	test   eax,eax
c001fa51:	74 2f                	je     c001fa82 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fa53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa57:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa5a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa5e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fa64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa6c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa76:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fa80:	eb 68                	jmp    c001faea <LinkedList<Device>::addElement(Device*)+0xc6>
c001fa82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa86:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa88:	85 c0                	test   eax,eax
c001fa8a:	75 4e                	jne    c001fada <LinkedList<Device>::addElement(Device*)+0xb6>
c001fa8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa93:	85 c0                	test   eax,eax
c001fa95:	75 43                	jne    c001fada <LinkedList<Device>::addElement(Device*)+0xb6>
c001fa97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa9b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa9f:	89 10                	mov    DWORD PTR [eax],edx
c001faa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001faa9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001faac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fab3:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fabd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fac4:	85 c0                	test   eax,eax
c001fac6:	74 22                	je     c001faea <LinkedList<Device>::addElement(Device*)+0xc6>
c001fac8:	83 ec 0c             	sub    esp,0xc
c001facb:	68 da 15 02 c0       	push   0xc00215da
c001fad0:	e8 77 5f ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c001fad5:	83 c4 10             	add    esp,0x10
c001fad8:	eb 10                	jmp    c001faea <LinkedList<Device>::addElement(Device*)+0xc6>
c001fada:	83 ec 0c             	sub    esp,0xc
c001fadd:	68 e4 15 02 c0       	push   0xc00215e4
c001fae2:	e8 65 5f ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c001fae7:	83 c4 10             	add    esp,0x10
c001faea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001faf1:	8d 50 01             	lea    edx,[eax+0x1]
c001faf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fafb:	90                   	nop
c001fafc:	83 c4 0c             	add    esp,0xc
c001faff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fb00 <LinkedList<Device>::LinkedList()>:
c001fb00:	83 ec 0c             	sub    esp,0xc
c001fb03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb07:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb11:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb1c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb27:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb31:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb3c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb43:	83 ec 0c             	sub    esp,0xc
c001fb46:	68 9d 15 02 c0       	push   0xc002159d
c001fb4b:	e8 cd f6 fe ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001fb50:	83 c4 10             	add    esp,0x10
c001fb53:	90                   	nop
c001fb54:	83 c4 0c             	add    esp,0xc
c001fb57:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001fb58 <CPU::readCR0()>:
c001fb58:	83 ec 10             	sub    esp,0x10
c001fb5b:	0f 20 c0             	mov    eax,cr0
c001fb5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb66:	83 c4 10             	add    esp,0x10
c001fb69:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001fb6a <CPU::writeCR0(unsigned long)>:
c001fb6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb6e:	0f 22 c0             	mov    cr0,eax
c001fb71:	90                   	nop
c001fb72:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001fb73 <CPU::readDR0()>:
c001fb73:	83 ec 10             	sub    esp,0x10
c001fb76:	0f 21 c0             	mov    eax,db0
c001fb79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb81:	83 c4 10             	add    esp,0x10
c001fb84:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001fb85 <CPU::readDR1()>:
c001fb85:	83 ec 10             	sub    esp,0x10
c001fb88:	0f 21 c8             	mov    eax,db1
c001fb8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb93:	83 c4 10             	add    esp,0x10
c001fb96:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001fb97 <CPU::readDR2()>:
c001fb97:	83 ec 10             	sub    esp,0x10
c001fb9a:	0f 21 d0             	mov    eax,db2
c001fb9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fba1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fba5:	83 c4 10             	add    esp,0x10
c001fba8:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001fba9 <CPU::readDR3()>:
c001fba9:	83 ec 10             	sub    esp,0x10
c001fbac:	0f 21 d8             	mov    eax,db3
c001fbaf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbb7:	83 c4 10             	add    esp,0x10
c001fbba:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001fbbb <CPU::readDR6()>:
c001fbbb:	83 ec 10             	sub    esp,0x10
c001fbbe:	0f 21 f0             	mov    eax,db6
c001fbc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbc9:	83 c4 10             	add    esp,0x10
c001fbcc:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001fbcd <CPU::readDR7()>:
c001fbcd:	83 ec 10             	sub    esp,0x10
c001fbd0:	0f 21 f8             	mov    eax,db7
c001fbd3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbd7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbdb:	83 c4 10             	add    esp,0x10
c001fbde:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fbe0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbe4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbe6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fbe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fbe8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbec:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbee:	85 c0                	test   eax,eax
c001fbf0:	75 0e                	jne    c001fc00 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fbf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbf6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbf9:	85 c0                	test   eax,eax
c001fbfb:	75 03                	jne    c001fc00 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fbfd:	b0 01                	mov    al,0x1
c001fbff:	c3                   	ret    
c001fc00:	b0 00                	mov    al,0x0
c001fc02:	90                   	nop
c001fc03:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fc04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fc04:	83 ec 0c             	sub    esp,0xc
c001fc07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc0b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc0d:	85 c0                	test   eax,eax
c001fc0f:	75 15                	jne    c001fc26 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001fc11:	83 ec 0c             	sub    esp,0xc
c001fc14:	68 f0 15 02 c0       	push   0xc00215f0
c001fc19:	e8 2e 5e ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c001fc1e:	83 c4 10             	add    esp,0x10
c001fc21:	e9 88 00 00 00       	jmp    c001fcae <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001fc26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc2d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fc30:	85 c0                	test   eax,eax
c001fc32:	0f 95 c0             	setne  al
c001fc35:	84 c0                	test   al,al
c001fc37:	74 10                	je     c001fc49 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001fc39:	83 ec 0c             	sub    esp,0xc
c001fc3c:	68 3b 16 02 c0       	push   0xc002163b
c001fc41:	e8 06 5e ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c001fc46:	83 c4 10             	add    esp,0x10
c001fc49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc4d:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc4f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fc52:	85 c0                	test   eax,eax
c001fc54:	0f 94 c0             	sete   al
c001fc57:	84 c0                	test   al,al
c001fc59:	74 33                	je     c001fc8e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001fc5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc5f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc69:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc77:	83 f8 01             	cmp    eax,0x1
c001fc7a:	74 21                	je     c001fc9d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001fc7c:	83 ec 0c             	sub    esp,0xc
c001fc7f:	68 14 16 02 c0       	push   0xc0021614
c001fc84:	e8 c3 5d ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c001fc89:	83 c4 10             	add    esp,0x10
c001fc8c:	eb 0f                	jmp    c001fc9d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001fc8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc92:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc94:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fc97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc9b:	89 10                	mov    DWORD PTR [eax],edx
c001fc9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fca4:	8d 50 ff             	lea    edx,[eax-0x1]
c001fca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcab:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fcae:	83 c4 0c             	add    esp,0xc
c001fcb1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fcb2:	83 ec 0c             	sub    esp,0xc
c001fcb5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fcba:	75 10                	jne    c001fccc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001fcbc:	83 ec 0c             	sub    esp,0xc
c001fcbf:	68 b8 15 02 c0       	push   0xc00215b8
c001fcc4:	e8 83 5d ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c001fcc9:	83 c4 10             	add    esp,0x10
c001fccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcd2:	85 c0                	test   eax,eax
c001fcd4:	74 34                	je     c001fd0a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001fcd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcdd:	85 c0                	test   eax,eax
c001fcdf:	74 29                	je     c001fd0a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001fce1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fce8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcec:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fcef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcf7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fcfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd01:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fd08:	eb 65                	jmp    c001fd6f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fd0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd0e:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd10:	85 c0                	test   eax,eax
c001fd12:	75 4b                	jne    c001fd5f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001fd14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd1b:	85 c0                	test   eax,eax
c001fd1d:	75 40                	jne    c001fd5f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001fd1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd27:	89 10                	mov    DWORD PTR [eax],edx
c001fd29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd2d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd31:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd3b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fd42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd46:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd49:	85 c0                	test   eax,eax
c001fd4b:	74 22                	je     c001fd6f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fd4d:	83 ec 0c             	sub    esp,0xc
c001fd50:	68 da 15 02 c0       	push   0xc00215da
c001fd55:	e8 f2 5c ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c001fd5a:	83 c4 10             	add    esp,0x10
c001fd5d:	eb 10                	jmp    c001fd6f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fd5f:	83 ec 0c             	sub    esp,0xc
c001fd62:	68 e4 15 02 c0       	push   0xc00215e4
c001fd67:	e8 e0 5c ff ff       	call   c0015a4c <Krnl::panic(char const*)>
c001fd6c:	83 c4 10             	add    esp,0x10
c001fd6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd73:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd76:	8d 50 01             	lea    edx,[eax+0x1]
c001fd79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd7d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fd80:	90                   	nop
c001fd81:	83 c4 0c             	add    esp,0xc
c001fd84:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fd86 <ACPI::~ACPI()>:
c001fd86:	83 ec 0c             	sub    esp,0xc
c001fd89:	ba 5c 24 02 c0       	mov    edx,0xc002245c
c001fd8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd92:	89 10                	mov    DWORD PTR [eax],edx
c001fd94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd98:	83 ec 0c             	sub    esp,0xc
c001fd9b:	50                   	push   eax
c001fd9c:	e8 37 07 ff ff       	call   c00104d8 <Device::~Device()>
c001fda1:	83 c4 10             	add    esp,0x10
c001fda4:	90                   	nop
c001fda5:	83 c4 0c             	add    esp,0xc
c001fda8:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fdaa <ACPI::~ACPI()>:
c001fdaa:	83 ec 0c             	sub    esp,0xc
c001fdad:	83 ec 0c             	sub    esp,0xc
c001fdb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdb4:	e8 cd ff ff ff       	call   c001fd86 <ACPI::~ACPI()>
c001fdb9:	83 c4 10             	add    esp,0x10
c001fdbc:	83 ec 08             	sub    esp,0x8
c001fdbf:	68 68 22 00 00       	push   0x2268
c001fdc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdc8:	e8 2a f3 fe ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c001fdcd:	83 c4 10             	add    esp,0x10
c001fdd0:	83 c4 0c             	add    esp,0xc
c001fdd3:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fdd4 <CPU::~CPU()>:
c001fdd4:	83 ec 0c             	sub    esp,0xc
c001fdd7:	ba 4c 28 02 c0       	mov    edx,0xc002284c
c001fddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde0:	89 10                	mov    DWORD PTR [eax],edx
c001fde2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde6:	83 ec 0c             	sub    esp,0xc
c001fde9:	50                   	push   eax
c001fdea:	e8 e9 06 ff ff       	call   c00104d8 <Device::~Device()>
c001fdef:	83 c4 10             	add    esp,0x10
c001fdf2:	90                   	nop
c001fdf3:	83 c4 0c             	add    esp,0xc
c001fdf6:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fdf8 <CPU::~CPU()>:
c001fdf8:	83 ec 0c             	sub    esp,0xc
c001fdfb:	83 ec 0c             	sub    esp,0xc
c001fdfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe02:	e8 cd ff ff ff       	call   c001fdd4 <CPU::~CPU()>
c001fe07:	83 c4 10             	add    esp,0x10
c001fe0a:	83 ec 08             	sub    esp,0x8
c001fe0d:	68 98 11 00 00       	push   0x1198
c001fe12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe16:	e8 dc f2 fe ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c001fe1b:	83 c4 10             	add    esp,0x10
c001fe1e:	83 c4 0c             	add    esp,0xc
c001fe21:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001fe22 <CPU::readCR4()>:
c001fe22:	83 ec 10             	sub    esp,0x10
c001fe25:	0f 20 e0             	mov    eax,cr4
c001fe28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe30:	83 c4 10             	add    esp,0x10
c001fe33:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001fe34 <CPU::writeDR7(unsigned long)>:
c001fe34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe38:	0f 23 f8             	mov    db7,eax
c001fe3b:	90                   	nop
c001fe3c:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001fe3d <CPU::writeCR4(unsigned long)>:
c001fe3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe41:	0f 22 e0             	mov    cr4,eax
c001fe44:	90                   	nop
c001fe45:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001fe46 <CPU::readCR2()>:
c001fe46:	83 ec 10             	sub    esp,0x10
c001fe49:	0f 20 d0             	mov    eax,cr2
c001fe4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe54:	83 c4 10             	add    esp,0x10
c001fe57:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fe58 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fe58:	90                   	nop
c001fe59:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fe5a <ThreadControlBlock::ThreadControlBlock()>:
c001fe5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe5e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fe65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe69:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fe70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe74:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fe7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe7f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001fe86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe8a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001fe8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe92:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001fe96:	90                   	nop
c001fe97:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fe98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fe98:	83 ec 0c             	sub    esp,0xc
c001fe9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe9f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001feb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001febb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001febf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fedb:	83 ec 0c             	sub    esp,0xc
c001fede:	68 9d 15 02 c0       	push   0xc002159d
c001fee3:	e8 35 f3 fe ff       	call   c000f21d <Dbg::kprintf(char const*, ...)>
c001fee8:	83 c4 10             	add    esp,0x10
c001feeb:	90                   	nop
c001feec:	83 c4 0c             	add    esp,0xc
c001feef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fef0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fef0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fef4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fef7:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fef8 <PCI::~PCI()>:
c001fef8:	83 ec 0c             	sub    esp,0xc
c001fefb:	ba 2c 35 02 c0       	mov    edx,0xc002352c
c001ff00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff04:	89 10                	mov    DWORD PTR [eax],edx
c001ff06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff0a:	83 ec 0c             	sub    esp,0xc
c001ff0d:	50                   	push   eax
c001ff0e:	e8 cf ff fe ff       	call   c000fee2 <Bus::~Bus()>
c001ff13:	83 c4 10             	add    esp,0x10
c001ff16:	90                   	nop
c001ff17:	83 c4 0c             	add    esp,0xc
c001ff1a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001ff1c <PCI::~PCI()>:
c001ff1c:	83 ec 0c             	sub    esp,0xc
c001ff1f:	83 ec 0c             	sub    esp,0xc
c001ff22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff26:	e8 cd ff ff ff       	call   c001fef8 <PCI::~PCI()>
c001ff2b:	83 c4 10             	add    esp,0x10
c001ff2e:	83 ec 08             	sub    esp,0x8
c001ff31:	68 58 01 00 00       	push   0x158
c001ff36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff3a:	e8 b8 f1 fe ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c001ff3f:	83 c4 10             	add    esp,0x10
c001ff42:	83 c4 0c             	add    esp,0xc
c001ff45:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001ff46 <IDE::~IDE()>:
c001ff46:	83 ec 0c             	sub    esp,0xc
c001ff49:	ba 90 37 02 c0       	mov    edx,0xc0023790
c001ff4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff52:	89 10                	mov    DWORD PTR [eax],edx
c001ff54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff58:	83 ec 0c             	sub    esp,0xc
c001ff5b:	50                   	push   eax
c001ff5c:	e8 89 0a ff ff       	call   c00109ea <HardDiskController::~HardDiskController()>
c001ff61:	83 c4 10             	add    esp,0x10
c001ff64:	90                   	nop
c001ff65:	83 c4 0c             	add    esp,0xc
c001ff68:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001ff6a <IDE::~IDE()>:
c001ff6a:	83 ec 0c             	sub    esp,0xc
c001ff6d:	83 ec 0c             	sub    esp,0xc
c001ff70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff74:	e8 cd ff ff ff       	call   c001ff46 <IDE::~IDE()>
c001ff79:	83 c4 10             	add    esp,0x10
c001ff7c:	83 ec 08             	sub    esp,0x8
c001ff7f:	68 70 02 00 00       	push   0x270
c001ff84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff88:	e8 6a f1 fe ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c001ff8d:	83 c4 10             	add    esp,0x10
c001ff90:	83 c4 0c             	add    esp,0xc
c001ff93:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001ff94 <ATA::~ATA()>:
c001ff94:	83 ec 0c             	sub    esp,0xc
c001ff97:	ba e0 37 02 c0       	mov    edx,0xc00237e0
c001ff9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa0:	89 10                	mov    DWORD PTR [eax],edx
c001ffa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa6:	83 ec 0c             	sub    esp,0xc
c001ffa9:	50                   	push   eax
c001ffaa:	e8 19 0b ff ff       	call   c0010ac8 <PhysicalDisk::~PhysicalDisk()>
c001ffaf:	83 c4 10             	add    esp,0x10
c001ffb2:	90                   	nop
c001ffb3:	83 c4 0c             	add    esp,0xc
c001ffb6:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ffb8 <ATA::~ATA()>:
c001ffb8:	83 ec 0c             	sub    esp,0xc
c001ffbb:	83 ec 0c             	sub    esp,0xc
c001ffbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffc2:	e8 cd ff ff ff       	call   c001ff94 <ATA::~ATA()>
c001ffc7:	83 c4 10             	add    esp,0x10
c001ffca:	83 ec 08             	sub    esp,0x8
c001ffcd:	68 7c 01 00 00       	push   0x17c
c001ffd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffd6:	e8 1c f1 fe ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c001ffdb:	83 c4 10             	add    esp,0x10
c001ffde:	83 c4 0c             	add    esp,0xc
c001ffe1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001ffe2 <ATAPI::~ATAPI()>:
c001ffe2:	83 ec 0c             	sub    esp,0xc
c001ffe5:	ba 4c 38 02 c0       	mov    edx,0xc002384c
c001ffea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffee:	89 10                	mov    DWORD PTR [eax],edx
c001fff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fff4:	83 ec 0c             	sub    esp,0xc
c001fff7:	50                   	push   eax
c001fff8:	e8 cb 0a ff ff       	call   c0010ac8 <PhysicalDisk::~PhysicalDisk()>
c001fffd:	83 c4 10             	add    esp,0x10
c0020000:	90                   	nop
c0020001:	83 c4 0c             	add    esp,0xc
c0020004:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020006 <ATAPI::~ATAPI()>:
c0020006:	83 ec 0c             	sub    esp,0xc
c0020009:	83 ec 0c             	sub    esp,0xc
c002000c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020010:	e8 cd ff ff ff       	call   c001ffe2 <ATAPI::~ATAPI()>
c0020015:	83 c4 10             	add    esp,0x10
c0020018:	83 ec 08             	sub    esp,0x8
c002001b:	68 80 01 00 00       	push   0x180
c0020020:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020024:	e8 ce f0 fe ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c0020029:	83 c4 10             	add    esp,0x10
c002002c:	83 c4 0c             	add    esp,0xc
c002002f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0020030 <AVX::~AVX()>:
c0020030:	83 ec 0c             	sub    esp,0xc
c0020033:	ba 88 38 02 c0       	mov    edx,0xc0023888
c0020038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002003c:	89 10                	mov    DWORD PTR [eax],edx
c002003e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020042:	83 ec 0c             	sub    esp,0xc
c0020045:	50                   	push   eax
c0020046:	e8 01 0b ff ff       	call   c0010b4c <FPU::~FPU()>
c002004b:	83 c4 10             	add    esp,0x10
c002004e:	90                   	nop
c002004f:	83 c4 0c             	add    esp,0xc
c0020052:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0020054 <AVX::~AVX()>:
c0020054:	83 ec 0c             	sub    esp,0xc
c0020057:	83 ec 0c             	sub    esp,0xc
c002005a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002005e:	e8 cd ff ff ff       	call   c0020030 <AVX::~AVX()>
c0020063:	83 c4 10             	add    esp,0x10
c0020066:	83 ec 08             	sub    esp,0x8
c0020069:	68 58 01 00 00       	push   0x158
c002006e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020072:	e8 80 f0 fe ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c0020077:	83 c4 10             	add    esp,0x10
c002007a:	83 c4 0c             	add    esp,0xc
c002007d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002007e <MMX::~MMX()>:
c002007e:	83 ec 0c             	sub    esp,0xc
c0020081:	ba c8 38 02 c0       	mov    edx,0xc00238c8
c0020086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002008a:	89 10                	mov    DWORD PTR [eax],edx
c002008c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020090:	83 ec 0c             	sub    esp,0xc
c0020093:	50                   	push   eax
c0020094:	e8 b3 0a ff ff       	call   c0010b4c <FPU::~FPU()>
c0020099:	83 c4 10             	add    esp,0x10
c002009c:	90                   	nop
c002009d:	83 c4 0c             	add    esp,0xc
c00200a0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c00200a2 <MMX::~MMX()>:
c00200a2:	83 ec 0c             	sub    esp,0xc
c00200a5:	83 ec 0c             	sub    esp,0xc
c00200a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200ac:	e8 cd ff ff ff       	call   c002007e <MMX::~MMX()>
c00200b1:	83 c4 10             	add    esp,0x10
c00200b4:	83 ec 08             	sub    esp,0x8
c00200b7:	68 58 01 00 00       	push   0x158
c00200bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200c0:	e8 32 f0 fe ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c00200c5:	83 c4 10             	add    esp,0x10
c00200c8:	83 c4 0c             	add    esp,0xc
c00200cb:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00200cc <SSE::~SSE()>:
c00200cc:	83 ec 0c             	sub    esp,0xc
c00200cf:	ba 08 39 02 c0       	mov    edx,0xc0023908
c00200d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200d8:	89 10                	mov    DWORD PTR [eax],edx
c00200da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200de:	83 ec 0c             	sub    esp,0xc
c00200e1:	50                   	push   eax
c00200e2:	e8 65 0a ff ff       	call   c0010b4c <FPU::~FPU()>
c00200e7:	83 c4 10             	add    esp,0x10
c00200ea:	90                   	nop
c00200eb:	83 c4 0c             	add    esp,0xc
c00200ee:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00200f0 <SSE::~SSE()>:
c00200f0:	83 ec 0c             	sub    esp,0xc
c00200f3:	83 ec 0c             	sub    esp,0xc
c00200f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200fa:	e8 cd ff ff ff       	call   c00200cc <SSE::~SSE()>
c00200ff:	83 c4 10             	add    esp,0x10
c0020102:	83 ec 08             	sub    esp,0x8
c0020105:	68 58 01 00 00       	push   0x158
c002010a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002010e:	e8 e4 ef fe ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c0020113:	83 c4 10             	add    esp,0x10
c0020116:	83 c4 0c             	add    esp,0xc
c0020119:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002011a <x87::~x87()>:
c002011a:	83 ec 0c             	sub    esp,0xc
c002011d:	ba 48 39 02 c0       	mov    edx,0xc0023948
c0020122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020126:	89 10                	mov    DWORD PTR [eax],edx
c0020128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002012c:	83 ec 0c             	sub    esp,0xc
c002012f:	50                   	push   eax
c0020130:	e8 17 0a ff ff       	call   c0010b4c <FPU::~FPU()>
c0020135:	83 c4 10             	add    esp,0x10
c0020138:	90                   	nop
c0020139:	83 c4 0c             	add    esp,0xc
c002013c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002013e <x87::~x87()>:
c002013e:	83 ec 0c             	sub    esp,0xc
c0020141:	83 ec 0c             	sub    esp,0xc
c0020144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020148:	e8 cd ff ff ff       	call   c002011a <x87::~x87()>
c002014d:	83 c4 10             	add    esp,0x10
c0020150:	83 ec 08             	sub    esp,0x8
c0020153:	68 58 01 00 00       	push   0x158
c0020158:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002015c:	e8 96 ef fe ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c0020161:	83 c4 10             	add    esp,0x10
c0020164:	83 c4 0c             	add    esp,0xc
c0020167:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020168 <IOAPIC::~IOAPIC()>:
c0020168:	83 ec 0c             	sub    esp,0xc
c002016b:	ba a0 3a 02 c0       	mov    edx,0xc0023aa0
c0020170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020174:	89 10                	mov    DWORD PTR [eax],edx
c0020176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002017a:	83 ec 0c             	sub    esp,0xc
c002017d:	50                   	push   eax
c002017e:	e8 55 03 ff ff       	call   c00104d8 <Device::~Device()>
c0020183:	83 c4 10             	add    esp,0x10
c0020186:	90                   	nop
c0020187:	83 c4 0c             	add    esp,0xc
c002018a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002018c <IOAPIC::~IOAPIC()>:
c002018c:	83 ec 0c             	sub    esp,0xc
c002018f:	83 ec 0c             	sub    esp,0xc
c0020192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020196:	e8 cd ff ff ff       	call   c0020168 <IOAPIC::~IOAPIC()>
c002019b:	83 c4 10             	add    esp,0x10
c002019e:	83 ec 08             	sub    esp,0x8
c00201a1:	68 68 01 00 00       	push   0x168
c00201a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201aa:	e8 48 ef fe ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c00201af:	83 c4 10             	add    esp,0x10
c00201b2:	83 c4 0c             	add    esp,0xc
c00201b5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00201b6 <APIC::~APIC()>:
c00201b6:	83 ec 0c             	sub    esp,0xc
c00201b9:	ba 58 3a 02 c0       	mov    edx,0xc0023a58
c00201be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201c2:	89 10                	mov    DWORD PTR [eax],edx
c00201c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201c8:	83 ec 0c             	sub    esp,0xc
c00201cb:	50                   	push   eax
c00201cc:	e8 45 0e ff ff       	call   c0011016 <InterruptController::~InterruptController()>
c00201d1:	83 c4 10             	add    esp,0x10
c00201d4:	90                   	nop
c00201d5:	83 c4 0c             	add    esp,0xc
c00201d8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00201da <APIC::~APIC()>:
c00201da:	83 ec 0c             	sub    esp,0xc
c00201dd:	83 ec 0c             	sub    esp,0xc
c00201e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201e4:	e8 cd ff ff ff       	call   c00201b6 <APIC::~APIC()>
c00201e9:	83 c4 10             	add    esp,0x10
c00201ec:	83 ec 08             	sub    esp,0x8
c00201ef:	68 58 21 00 00       	push   0x2158
c00201f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201f8:	e8 fa ee fe ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c00201fd:	83 c4 10             	add    esp,0x10
c0020200:	83 c4 0c             	add    esp,0xc
c0020203:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0020204 <PIC::~PIC()>:
c0020204:	83 ec 0c             	sub    esp,0xc
c0020207:	ba f0 3a 02 c0       	mov    edx,0xc0023af0
c002020c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020210:	89 10                	mov    DWORD PTR [eax],edx
c0020212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020216:	83 ec 0c             	sub    esp,0xc
c0020219:	50                   	push   eax
c002021a:	e8 f7 0d ff ff       	call   c0011016 <InterruptController::~InterruptController()>
c002021f:	83 c4 10             	add    esp,0x10
c0020222:	90                   	nop
c0020223:	83 c4 0c             	add    esp,0xc
c0020226:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0020228 <PIC::~PIC()>:
c0020228:	83 ec 0c             	sub    esp,0xc
c002022b:	83 ec 0c             	sub    esp,0xc
c002022e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020232:	e8 cd ff ff ff       	call   c0020204 <PIC::~PIC()>
c0020237:	83 c4 10             	add    esp,0x10
c002023a:	83 ec 08             	sub    esp,0x8
c002023d:	68 58 21 00 00       	push   0x2158
c0020242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020246:	e8 ac ee fe ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c002024b:	83 c4 10             	add    esp,0x10
c002024e:	83 c4 0c             	add    esp,0xc
c0020251:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020252 <APICTimer::~APICTimer()>:
c0020252:	83 ec 0c             	sub    esp,0xc
c0020255:	ba 44 3b 02 c0       	mov    edx,0xc0023b44
c002025a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002025e:	89 10                	mov    DWORD PTR [eax],edx
c0020260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020264:	83 ec 0c             	sub    esp,0xc
c0020267:	50                   	push   eax
c0020268:	e8 d7 2a ff ff       	call   c0012d44 <Timer::~Timer()>
c002026d:	83 c4 10             	add    esp,0x10
c0020270:	90                   	nop
c0020271:	83 c4 0c             	add    esp,0xc
c0020274:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0020276 <APICTimer::~APICTimer()>:
c0020276:	83 ec 0c             	sub    esp,0xc
c0020279:	83 ec 0c             	sub    esp,0xc
c002027c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020280:	e8 cd ff ff ff       	call   c0020252 <APICTimer::~APICTimer()>
c0020285:	83 c4 10             	add    esp,0x10
c0020288:	83 ec 08             	sub    esp,0x8
c002028b:	68 60 01 00 00       	push   0x160
c0020290:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020294:	e8 5e ee fe ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c0020299:	83 c4 10             	add    esp,0x10
c002029c:	83 c4 0c             	add    esp,0xc
c002029f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00202a0 <PIT::~PIT()>:
c00202a0:	83 ec 0c             	sub    esp,0xc
c00202a3:	ba 94 3b 02 c0       	mov    edx,0xc0023b94
c00202a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ac:	89 10                	mov    DWORD PTR [eax],edx
c00202ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202b2:	83 ec 0c             	sub    esp,0xc
c00202b5:	50                   	push   eax
c00202b6:	e8 89 2a ff ff       	call   c0012d44 <Timer::~Timer()>
c00202bb:	83 c4 10             	add    esp,0x10
c00202be:	90                   	nop
c00202bf:	83 c4 0c             	add    esp,0xc
c00202c2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00202c4 <PIT::~PIT()>:
c00202c4:	83 ec 0c             	sub    esp,0xc
c00202c7:	83 ec 0c             	sub    esp,0xc
c00202ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202ce:	e8 cd ff ff ff       	call   c00202a0 <PIT::~PIT()>
c00202d3:	83 c4 10             	add    esp,0x10
c00202d6:	83 ec 08             	sub    esp,0x8
c00202d9:	68 5c 01 00 00       	push   0x15c
c00202de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202e2:	e8 10 ee fe ff       	call   c000f0f7 <operator delete(void*, unsigned long)>
c00202e7:	83 c4 10             	add    esp,0x10
c00202ea:	83 c4 0c             	add    esp,0xc
c00202ed:	c3                   	ret    
