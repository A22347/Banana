
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 39 c2 00 00       	call   c000c259 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 63 ed 01 00       	call   c001ed88 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 12 f9 01 c0       	mov    ebx,0xc001f912
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 1c f9 01 c0    	cmp    ebx,0xc001f91c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 ac 37 02 c0       	mov    eax,0xc00237ac
c0000049:	3d ac 37 02 c0       	cmp    eax,0xc00237ac
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 ac 37 02 c0       	push   0xc00237ac
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 ac 37 02 c0       	mov    eax,0xc00237ac
c0000075:	2d ac 37 02 c0       	sub    eax,0xc00237ac
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 ac 37 02 c0       	push   0xc00237ac
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 4c 39 02 c0 00 	cmp    BYTE PTR ds:0xc002394c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 24 f9 01 c0       	mov    ebx,0xc001f924
c00000bb:	81 eb 20 f9 01 c0    	sub    ebx,0xc001f920
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 20 f9 01 c0       	mov    esi,0xc001f920
c00000ca:	a1 50 39 02 c0       	mov    eax,ds:0xc0023950
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 50 39 02 c0       	mov    ds:0xc0023950,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 50 39 02 c0       	mov    eax,ds:0xc0023950
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 ac 37 02 c0       	push   0xc00237ac
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 4c 39 02 c0 01 	mov    BYTE PTR ds:0xc002394c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 54 39 02 c0       	push   0xc0023954
c000012c:	68 ac 37 02 c0       	push   0xc00237ac
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <doTPAUSE>:
c0000150:	fb                   	sti    
c0000151:	31 c0                	xor    eax,eax
c0000153:	31 d2                	xor    edx,edx
c0000155:	66 0f ae f0          	tpause eax
c0000159:	c3                   	ret    

c000015a <hasLegacyFPU>:
c000015a:	0f 20 c2             	mov    edx,cr0
c000015d:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000163:	0f 22 c2             	mov    cr0,edx
c0000166:	db e3                	fninit 
c0000168:	dd 3d 7d 01 00 c0    	fnstsw WORD PTR ds:0xc000017d
c000016e:	31 c0                	xor    eax,eax
c0000170:	66 81 3d 7d 01 00 c0 00 00 	cmp    WORD PTR ds:0xc000017d,0x0
c0000179:	75 01                	jne    c000017c <hasLegacyFPU.nofpu>

c000017b <hasLegacyFPU.hasfpu>:
c000017b:	40                   	inc    eax

c000017c <hasLegacyFPU.nofpu>:
c000017c:	c3                   	ret    

c000017d <testword>:
c000017d:	aa                   	stos   BYTE PTR es:[edi],al
c000017e:	55                   	push   ebp

c000017f <is486>:
c000017f:	0f 09                	wbinvd 
c0000181:	31 c0                	xor    eax,eax
c0000183:	40                   	inc    eax
c0000184:	c3                   	ret    
c0000185:	90                   	nop
c0000186:	90                   	nop
c0000187:	90                   	nop
c0000188:	90                   	nop
c0000189:	90                   	nop
c000018a:	90                   	nop
c000018b:	90                   	nop
c000018c:	90                   	nop
c000018d:	90                   	nop
c000018e:	90                   	nop
c000018f:	90                   	nop
c0000190:	90                   	nop
c0000191:	90                   	nop
c0000192:	90                   	nop
c0000193:	90                   	nop
c0000194:	90                   	nop
c0000195:	90                   	nop
c0000196:	90                   	nop
c0000197:	90                   	nop
c0000198:	90                   	nop
c0000199:	90                   	nop
c000019a:	90                   	nop
c000019b:	90                   	nop
c000019c:	90                   	nop
c000019d:	90                   	nop
c000019e:	90                   	nop
c000019f:	90                   	nop
c00001a0:	90                   	nop
c00001a1:	90                   	nop
c00001a2:	90                   	nop
c00001a3:	90                   	nop
c00001a4:	90                   	nop
c00001a5:	90                   	nop
c00001a6:	90                   	nop
c00001a7:	90                   	nop
c00001a8:	90                   	nop
c00001a9:	90                   	nop
c00001aa:	90                   	nop
c00001ab:	90                   	nop
c00001ac:	90                   	nop
c00001ad:	90                   	nop
c00001ae:	90                   	nop
c00001af:	90                   	nop
c00001b0:	90                   	nop
c00001b1:	90                   	nop
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	c3                   	ret    

c00001b5 <goToVM86>:
c00001b5:	fa                   	cli    
c00001b6:	55                   	push   ebp
c00001b7:	89 e5                	mov    ebp,esp
c00001b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bc:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00001bf:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00001c2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00001c5:	25 ff ff 00 00       	and    eax,0xffff
c00001ca:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00001d0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00001d6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00001dc:	52                   	push   edx
c00001dd:	51                   	push   ecx
c00001de:	68 02 02 02 00       	push   0x20202
c00001e3:	53                   	push   ebx
c00001e4:	50                   	push   eax
c00001e5:	cf                   	iret   

c00001e6 <goToUsermode>:
c00001e6:	fa                   	cli    
c00001e7:	55                   	push   ebp
c00001e8:	89 e5                	mov    ebp,esp
c00001ea:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00001ed:	66 b8 23 00          	mov    ax,0x23
c00001f1:	66 8e d8             	mov    ds,ax
c00001f4:	66 8e c0             	mov    es,ax
c00001f7:	66 8e e0             	mov    fs,ax
c00001fa:	66 8e e8             	mov    gs,ax
c00001fd:	89 e0                	mov    eax,esp
c00001ff:	68 23 00 00 00       	push   0x23
c0000204:	50                   	push   eax
c0000205:	68 02 02 00 00       	push   0x202
c000020a:	68 1b 00 00 00       	push   0x1b
c000020f:	53                   	push   ebx
c0000210:	cf                   	iret   

c0000211 <switchToThreadASMFirstTime>:
c0000211:	9c                   	pushf  
c0000212:	fa                   	cli    
c0000213:	50                   	push   eax
c0000214:	53                   	push   ebx
c0000215:	51                   	push   ecx
c0000216:	52                   	push   edx
c0000217:	56                   	push   esi
c0000218:	57                   	push   edi
c0000219:	55                   	push   ebp
c000021a:	e9 11 00 00 00       	jmp    c0000230 <commonThreadSwitch>

c000021f <switchToThreadASM>:
c000021f:	9c                   	pushf  
c0000220:	50                   	push   eax
c0000221:	53                   	push   ebx
c0000222:	51                   	push   ecx
c0000223:	52                   	push   edx
c0000224:	56                   	push   esi
c0000225:	57                   	push   edi
c0000226:	55                   	push   ebp
c0000227:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c000022d:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000230 <commonThreadSwitch>:
c0000230:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000234:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000023a:	8b 06                	mov    eax,DWORD PTR [esi]
c000023c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000023f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000242:	0f 20 d9             	mov    ecx,cr3
c0000245:	39 c8                	cmp    eax,ecx
c0000247:	74 03                	je     c000024c <commonThreadSwitch.doneVAS>
c0000249:	0f 22 d8             	mov    cr3,eax

c000024c <commonThreadSwitch.doneVAS>:
c000024c:	85 d2                	test   edx,edx
c000024e:	74 4e                	je     c000029e <commonThreadSwitch.notFirstTime>
c0000250:	fa                   	cli    
c0000251:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000254:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000259:	60                   	pusha  
c000025a:	e8 95 ec 00 00       	call   c000eef4 <mapVASFirstTime>
c000025f:	61                   	popa   
c0000260:	89 c4                	mov    esp,eax
c0000262:	56                   	push   esi
c0000263:	52                   	push   edx
c0000264:	e8 43 7b 01 00       	call   c0017dac <changeTSS>
c0000269:	5a                   	pop    edx
c000026a:	5e                   	pop    esi
c000026b:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000272:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000278:	74 39                	je     c00002b3 <commonThreadSwitch.cameOffAFork>
c000027a:	5d                   	pop    ebp
c000027b:	5f                   	pop    edi
c000027c:	5e                   	pop    esi
c000027d:	59                   	pop    ecx
c000027e:	59                   	pop    ecx
c000027f:	5b                   	pop    ebx
c0000280:	58                   	pop    eax
c0000281:	81 c4 04 00 00 00    	add    esp,0x4
c0000287:	6a 02                	push   0x2
c0000289:	9d                   	popf   
c000028a:	52                   	push   edx
c000028b:	e8 2f 7f 01 00       	call   c00181bf <taskStartupFunction>
c0000290:	5a                   	pop    edx
c0000291:	50                   	push   eax
c0000292:	ff d2                	call   edx
c0000294:	e8 d5 84 01 00       	call   c001876e <taskReturned>
c0000299:	e9 fb ff ff ff       	jmp    c0000299 <commonThreadSwitch.doneVAS+0x4d>

c000029e <commonThreadSwitch.notFirstTime>:
c000029e:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a1:	56                   	push   esi
c00002a2:	52                   	push   edx
c00002a3:	e8 04 7b 01 00       	call   c0017dac <changeTSS>
c00002a8:	5a                   	pop    edx
c00002a9:	5e                   	pop    esi
c00002aa:	5d                   	pop    ebp
c00002ab:	5f                   	pop    edi
c00002ac:	5e                   	pop    esi
c00002ad:	5a                   	pop    edx
c00002ae:	59                   	pop    ecx
c00002af:	5b                   	pop    ebx
c00002b0:	58                   	pop    eax
c00002b1:	9d                   	popf   
c00002b2:	c3                   	ret    

c00002b3 <commonThreadSwitch.cameOffAFork>:
c00002b3:	31 c0                	xor    eax,eax
c00002b5:	31 d2                	xor    edx,edx
c00002b7:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c00002ba:	e9 a2 02 00 00       	jmp    c0000561 <offAForkJumpThingy>

c00002bf <detectCPUID>:
c00002bf:	9c                   	pushf  
c00002c0:	9c                   	pushf  
c00002c1:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002c8:	9d                   	popf   
c00002c9:	9c                   	pushf  
c00002ca:	58                   	pop    eax
c00002cb:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002ce:	9d                   	popf   
c00002cf:	25 00 00 20 00       	and    eax,0x200000
c00002d4:	c3                   	ret    

c00002d5 <asmQuickAcquireLock>:
c00002d5:	55                   	push   ebp
c00002d6:	89 e5                	mov    ebp,esp
c00002d8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00002db <asmQuickAcquireLock.retry>:
c00002db:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00002e0:	72 02                	jb     c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002e2:	fa                   	cli    
c00002e3:	c3                   	ret    

c00002e4 <asmQuickAcquireLock.spin_with_pause>:
c00002e4:	f3 90                	pause  
c00002e6:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00002ec:	75 f6                	jne    c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002ee:	e9 e8 ff ff ff       	jmp    c00002db <asmQuickAcquireLock.retry>

c00002f3 <asmQuickReleaseLock>:
c00002f3:	55                   	push   ebp
c00002f4:	89 e5                	mov    ebp,esp
c00002f6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00002fd:	5d                   	pop    ebp
c00002fe:	c3                   	ret    

c00002ff <asmAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 05                	jb     c0000311 <asmAcquireLock.spin_with_pause>
c000030c:	9c                   	pushf  
c000030d:	58                   	pop    eax
c000030e:	fa                   	cli    
c000030f:	5d                   	pop    ebp
c0000310:	c3                   	ret    

c0000311 <asmAcquireLock.spin_with_pause>:
c0000311:	f3 90                	pause  
c0000313:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000319:	75 f6                	jne    c0000311 <asmAcquireLock.spin_with_pause>
c000031b:	e9 e5 ff ff ff       	jmp    c0000305 <asmAcquireLock.retry>

c0000320 <asmReleaseLock>:
c0000320:	55                   	push   ebp
c0000321:	89 e5                	mov    ebp,esp
c0000323:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000326:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000329:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000032f:	52                   	push   edx
c0000330:	9d                   	popf   
c0000331:	5d                   	pop    ebp
c0000332:	c3                   	ret    

c0000333 <loadGDT>:
c0000333:	0f 01 15 90 3d 02 c0 	lgdtd  ds:0xc0023d90
c000033a:	66 b8 10 00          	mov    ax,0x10
c000033e:	66 8e d8             	mov    ds,ax
c0000341:	66 8e c0             	mov    es,ax
c0000344:	66 8e e0             	mov    fs,ax
c0000347:	66 8e e8             	mov    gs,ax
c000034a:	66 8e d0             	mov    ss,ax
c000034d:	e9 00 00 00 00       	jmp    c0000352 <flush2>

c0000352 <flush2>:
c0000352:	c3                   	ret    

c0000353 <isr0>:
c0000353:	fa                   	cli    
c0000354:	68 00 00 00 00       	push   0x0
c0000359:	68 00 00 00 00       	push   0x0
c000035e:	e9 a2 01 00 00       	jmp    c0000505 <int_common_stub>

c0000363 <isr1>:
c0000363:	fa                   	cli    
c0000364:	6a 00                	push   0x0
c0000366:	6a 01                	push   0x1
c0000368:	e9 98 01 00 00       	jmp    c0000505 <int_common_stub>

c000036d <isr2>:
c000036d:	fa                   	cli    
c000036e:	6a 00                	push   0x0
c0000370:	6a 02                	push   0x2
c0000372:	e9 8e 01 00 00       	jmp    c0000505 <int_common_stub>

c0000377 <isr3>:
c0000377:	fa                   	cli    
c0000378:	6a 00                	push   0x0
c000037a:	6a 03                	push   0x3
c000037c:	e9 84 01 00 00       	jmp    c0000505 <int_common_stub>

c0000381 <isr4>:
c0000381:	fa                   	cli    
c0000382:	6a 00                	push   0x0
c0000384:	6a 04                	push   0x4
c0000386:	e9 7a 01 00 00       	jmp    c0000505 <int_common_stub>

c000038b <isr5>:
c000038b:	fa                   	cli    
c000038c:	6a 00                	push   0x0
c000038e:	6a 05                	push   0x5
c0000390:	e9 70 01 00 00       	jmp    c0000505 <int_common_stub>

c0000395 <isr6>:
c0000395:	fa                   	cli    
c0000396:	6a 00                	push   0x0
c0000398:	6a 06                	push   0x6
c000039a:	e9 66 01 00 00       	jmp    c0000505 <int_common_stub>

c000039f <isr7>:
c000039f:	fa                   	cli    
c00003a0:	6a 00                	push   0x0
c00003a2:	6a 07                	push   0x7
c00003a4:	e9 5c 01 00 00       	jmp    c0000505 <int_common_stub>

c00003a9 <isr8>:
c00003a9:	fa                   	cli    
c00003aa:	6a 08                	push   0x8
c00003ac:	e9 54 01 00 00       	jmp    c0000505 <int_common_stub>

c00003b1 <isr9>:
c00003b1:	fa                   	cli    
c00003b2:	6a 00                	push   0x0
c00003b4:	6a 09                	push   0x9
c00003b6:	e9 4a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003bb <isr10>:
c00003bb:	fa                   	cli    
c00003bc:	6a 0a                	push   0xa
c00003be:	e9 42 01 00 00       	jmp    c0000505 <int_common_stub>

c00003c3 <isr11>:
c00003c3:	fa                   	cli    
c00003c4:	6a 0b                	push   0xb
c00003c6:	e9 3a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003cb <isr12>:
c00003cb:	fa                   	cli    
c00003cc:	6a 0c                	push   0xc
c00003ce:	e9 32 01 00 00       	jmp    c0000505 <int_common_stub>

c00003d3 <isr13>:
c00003d3:	fa                   	cli    
c00003d4:	6a 0d                	push   0xd
c00003d6:	e9 2a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003db <isr14>:
c00003db:	fa                   	cli    
c00003dc:	6a 0e                	push   0xe
c00003de:	e9 22 01 00 00       	jmp    c0000505 <int_common_stub>

c00003e3 <isr15>:
c00003e3:	fa                   	cli    
c00003e4:	6a 00                	push   0x0
c00003e6:	6a 0f                	push   0xf
c00003e8:	e9 18 01 00 00       	jmp    c0000505 <int_common_stub>

c00003ed <isr16>:
c00003ed:	fa                   	cli    
c00003ee:	6a 00                	push   0x0
c00003f0:	6a 10                	push   0x10
c00003f2:	e9 0e 01 00 00       	jmp    c0000505 <int_common_stub>

c00003f7 <isr17>:
c00003f7:	fa                   	cli    
c00003f8:	6a 00                	push   0x0
c00003fa:	6a 11                	push   0x11
c00003fc:	e9 04 01 00 00       	jmp    c0000505 <int_common_stub>

c0000401 <isr18>:
c0000401:	fa                   	cli    
c0000402:	6a 00                	push   0x0
c0000404:	6a 12                	push   0x12
c0000406:	e9 fa 00 00 00       	jmp    c0000505 <int_common_stub>

c000040b <isr96>:
c000040b:	fa                   	cli    
c000040c:	6a 00                	push   0x0
c000040e:	6a 60                	push   0x60
c0000410:	e9 20 01 00 00       	jmp    c0000535 <syscall_common_stub>

c0000415 <irq0>:
c0000415:	fa                   	cli    
c0000416:	6a 00                	push   0x0
c0000418:	6a 20                	push   0x20
c000041a:	e9 e6 00 00 00       	jmp    c0000505 <int_common_stub>

c000041f <irq1>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 21                	push   0x21
c0000424:	e9 dc 00 00 00       	jmp    c0000505 <int_common_stub>

c0000429 <irq2>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 22                	push   0x22
c000042e:	e9 d2 00 00 00       	jmp    c0000505 <int_common_stub>

c0000433 <irq3>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 23                	push   0x23
c0000438:	e9 c8 00 00 00       	jmp    c0000505 <int_common_stub>

c000043d <irq4>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 24                	push   0x24
c0000442:	e9 be 00 00 00       	jmp    c0000505 <int_common_stub>

c0000447 <irq5>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 25                	push   0x25
c000044c:	e9 b4 00 00 00       	jmp    c0000505 <int_common_stub>

c0000451 <irq6>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 26                	push   0x26
c0000456:	e9 aa 00 00 00       	jmp    c0000505 <int_common_stub>

c000045b <irq7>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 27                	push   0x27
c0000460:	e9 a0 00 00 00       	jmp    c0000505 <int_common_stub>

c0000465 <irq8>:
c0000465:	fa                   	cli    
c0000466:	6a 00                	push   0x0
c0000468:	6a 28                	push   0x28
c000046a:	e9 96 00 00 00       	jmp    c0000505 <int_common_stub>

c000046f <irq9>:
c000046f:	fa                   	cli    
c0000470:	6a 00                	push   0x0
c0000472:	6a 29                	push   0x29
c0000474:	e9 8c 00 00 00       	jmp    c0000505 <int_common_stub>

c0000479 <irq10>:
c0000479:	fa                   	cli    
c000047a:	6a 00                	push   0x0
c000047c:	6a 2a                	push   0x2a
c000047e:	e9 82 00 00 00       	jmp    c0000505 <int_common_stub>

c0000483 <irq11>:
c0000483:	fa                   	cli    
c0000484:	6a 00                	push   0x0
c0000486:	6a 2b                	push   0x2b
c0000488:	e9 78 00 00 00       	jmp    c0000505 <int_common_stub>

c000048d <irq12>:
c000048d:	fa                   	cli    
c000048e:	6a 00                	push   0x0
c0000490:	6a 2c                	push   0x2c
c0000492:	e9 6e 00 00 00       	jmp    c0000505 <int_common_stub>

c0000497 <irq13>:
c0000497:	fa                   	cli    
c0000498:	6a 00                	push   0x0
c000049a:	6a 2d                	push   0x2d
c000049c:	e9 64 00 00 00       	jmp    c0000505 <int_common_stub>

c00004a1 <irq14>:
c00004a1:	fa                   	cli    
c00004a2:	6a 00                	push   0x0
c00004a4:	6a 2e                	push   0x2e
c00004a6:	e9 5a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004ab <irq15>:
c00004ab:	fa                   	cli    
c00004ac:	6a 00                	push   0x0
c00004ae:	6a 2f                	push   0x2f
c00004b0:	e9 50 00 00 00       	jmp    c0000505 <int_common_stub>

c00004b5 <irq16>:
c00004b5:	fa                   	cli    
c00004b6:	6a 00                	push   0x0
c00004b8:	6a 30                	push   0x30
c00004ba:	e9 46 00 00 00       	jmp    c0000505 <int_common_stub>

c00004bf <irq17>:
c00004bf:	fa                   	cli    
c00004c0:	6a 00                	push   0x0
c00004c2:	6a 31                	push   0x31
c00004c4:	e9 3c 00 00 00       	jmp    c0000505 <int_common_stub>

c00004c9 <irq18>:
c00004c9:	fa                   	cli    
c00004ca:	6a 00                	push   0x0
c00004cc:	6a 32                	push   0x32
c00004ce:	e9 32 00 00 00       	jmp    c0000505 <int_common_stub>

c00004d3 <irq19>:
c00004d3:	fa                   	cli    
c00004d4:	6a 00                	push   0x0
c00004d6:	6a 33                	push   0x33
c00004d8:	e9 28 00 00 00       	jmp    c0000505 <int_common_stub>

c00004dd <irq20>:
c00004dd:	fa                   	cli    
c00004de:	6a 00                	push   0x0
c00004e0:	6a 34                	push   0x34
c00004e2:	e9 1e 00 00 00       	jmp    c0000505 <int_common_stub>

c00004e7 <irq21>:
c00004e7:	fa                   	cli    
c00004e8:	6a 00                	push   0x0
c00004ea:	6a 35                	push   0x35
c00004ec:	e9 14 00 00 00       	jmp    c0000505 <int_common_stub>

c00004f1 <irq22>:
c00004f1:	fa                   	cli    
c00004f2:	6a 00                	push   0x0
c00004f4:	6a 36                	push   0x36
c00004f6:	e9 0a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004fb <irq23>:
c00004fb:	fa                   	cli    
c00004fc:	6a 00                	push   0x0
c00004fe:	6a 37                	push   0x37
c0000500:	e9 00 00 00 00       	jmp    c0000505 <int_common_stub>

c0000505 <int_common_stub>:
c0000505:	60                   	pusha  
c0000506:	1e                   	push   ds
c0000507:	06                   	push   es
c0000508:	0f a0                	push   fs
c000050a:	0f a8                	push   gs
c000050c:	66 b8 10 00          	mov    ax,0x10
c0000510:	66 8e d8             	mov    ds,ax
c0000513:	66 8e c0             	mov    es,ax
c0000516:	66 8e e0             	mov    fs,ax
c0000519:	66 8e e8             	mov    gs,ax
c000051c:	89 e1                	mov    ecx,esp
c000051e:	51                   	push   ecx
c000051f:	b9 c1 0d 01 c0       	mov    ecx,0xc0010dc1
c0000524:	ff d1                	call   ecx
c0000526:	59                   	pop    ecx
c0000527:	0f a9                	pop    gs
c0000529:	0f a1                	pop    fs
c000052b:	07                   	pop    es
c000052c:	1f                   	pop    ds
c000052d:	61                   	popa   
c000052e:	81 c4 08 00 00 00    	add    esp,0x8
c0000534:	cf                   	iret   

c0000535 <syscall_common_stub>:
c0000535:	60                   	pusha  
c0000536:	1e                   	push   ds
c0000537:	06                   	push   es
c0000538:	0f a0                	push   fs
c000053a:	0f a8                	push   gs
c000053c:	66 b8 10 00          	mov    ax,0x10
c0000540:	66 8e d8             	mov    ds,ax
c0000543:	66 8e c0             	mov    es,ax
c0000546:	66 8e e0             	mov    fs,ax
c0000549:	66 8e e8             	mov    gs,ax
c000054c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000552:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000555:	89 e1                	mov    ecx,esp
c0000557:	51                   	push   ecx
c0000558:	fb                   	sti    
c0000559:	b9 c1 0d 01 c0       	mov    ecx,0xc0010dc1
c000055e:	ff d1                	call   ecx
c0000560:	59                   	pop    ecx

c0000561 <offAForkJumpThingy>:
c0000561:	0f a9                	pop    gs
c0000563:	0f a1                	pop    fs
c0000565:	07                   	pop    es
c0000566:	1f                   	pop    ds
c0000567:	61                   	popa   
c0000568:	81 c4 08 00 00 00    	add    esp,0x8
c000056e:	cf                   	iret   

c000056f <memcmp>:
c000056f:	56                   	push   esi
c0000570:	53                   	push   ebx
c0000571:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000575:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000579:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000057d:	01 d6                	add    esi,edx
c000057f:	39 f2                	cmp    edx,esi
c0000581:	74 0e                	je     c0000591 <memcmp+0x22>
c0000583:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000586:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000589:	38 c8                	cmp    al,cl
c000058b:	75 08                	jne    c0000595 <memcmp+0x26>
c000058d:	42                   	inc    edx
c000058e:	43                   	inc    ebx
c000058f:	eb ee                	jmp    c000057f <memcmp+0x10>
c0000591:	31 c0                	xor    eax,eax
c0000593:	eb 02                	jmp    c0000597 <memcmp+0x28>
c0000595:	29 c8                	sub    eax,ecx
c0000597:	5b                   	pop    ebx
c0000598:	5e                   	pop    esi
c0000599:	c3                   	ret    

c000059a <memmove>:
c000059a:	56                   	push   esi
c000059b:	53                   	push   ebx
c000059c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00005a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00005a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00005a8:	39 c8                	cmp    eax,ecx
c00005aa:	73 12                	jae    c00005be <memmove+0x24>
c00005ac:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00005af:	89 c3                	mov    ebx,eax
c00005b1:	39 f1                	cmp    ecx,esi
c00005b3:	74 1a                	je     c00005cf <memmove+0x35>
c00005b5:	8a 11                	mov    dl,BYTE PTR [ecx]
c00005b7:	43                   	inc    ebx
c00005b8:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00005bb:	41                   	inc    ecx
c00005bc:	eb f3                	jmp    c00005b1 <memmove+0x17>
c00005be:	76 0f                	jbe    c00005cf <memmove+0x35>
c00005c0:	85 d2                	test   edx,edx
c00005c2:	74 0b                	je     c00005cf <memmove+0x35>
c00005c4:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c00005c8:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c00005cc:	4a                   	dec    edx
c00005cd:	eb f1                	jmp    c00005c0 <memmove+0x26>
c00005cf:	5b                   	pop    ebx
c00005d0:	5e                   	pop    esi
c00005d1:	c3                   	ret    

c00005d2 <memcpy>:
c00005d2:	57                   	push   edi
c00005d3:	56                   	push   esi
c00005d4:	53                   	push   ebx
c00005d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005dd:	89 da                	mov    edx,ebx
c00005df:	89 d9                	mov    ecx,ebx
c00005e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005e5:	83 e2 fc             	and    edx,0xfffffffc
c00005e8:	c1 e9 02             	shr    ecx,0x2
c00005eb:	89 c7                	mov    edi,eax
c00005ed:	fc                   	cld    
c00005ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00005f0:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00005f3:	01 c2                	add    edx,eax
c00005f5:	01 de                	add    esi,ebx
c00005f7:	39 f1                	cmp    ecx,esi
c00005f9:	74 09                	je     c0000604 <memcpy+0x32>
c00005fb:	8a 19                	mov    bl,BYTE PTR [ecx]
c00005fd:	42                   	inc    edx
c00005fe:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000601:	41                   	inc    ecx
c0000602:	eb f3                	jmp    c00005f7 <memcpy+0x25>
c0000604:	5b                   	pop    ebx
c0000605:	5e                   	pop    esi
c0000606:	5f                   	pop    edi
c0000607:	c3                   	ret    

c0000608 <memset>:
c0000608:	53                   	push   ebx
c0000609:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000060d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000611:	89 c2                	mov    edx,eax
c0000613:	01 c1                	add    ecx,eax
c0000615:	39 ca                	cmp    edx,ecx
c0000617:	74 0a                	je     c0000623 <memset+0x1b>
c0000619:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c000061d:	42                   	inc    edx
c000061e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000621:	eb f2                	jmp    c0000615 <memset+0xd>
c0000623:	5b                   	pop    ebx
c0000624:	c3                   	ret    

c0000625 <strlen>:
c0000625:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000629:	31 c0                	xor    eax,eax
c000062b:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000062f:	74 03                	je     c0000634 <strlen+0xf>
c0000631:	40                   	inc    eax
c0000632:	eb f7                	jmp    c000062b <strlen+0x6>
c0000634:	c3                   	ret    

c0000635 <strpbrk>:
c0000635:	53                   	push   ebx
c0000636:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000063a:	8a 08                	mov    cl,BYTE PTR [eax]
c000063c:	84 c9                	test   cl,cl
c000063e:	74 14                	je     c0000654 <strpbrk+0x1f>
c0000640:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000644:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000646:	84 db                	test   bl,bl
c0000648:	74 07                	je     c0000651 <strpbrk+0x1c>
c000064a:	38 cb                	cmp    bl,cl
c000064c:	74 08                	je     c0000656 <strpbrk+0x21>
c000064e:	42                   	inc    edx
c000064f:	eb f3                	jmp    c0000644 <strpbrk+0xf>
c0000651:	40                   	inc    eax
c0000652:	eb e6                	jmp    c000063a <strpbrk+0x5>
c0000654:	31 c0                	xor    eax,eax
c0000656:	5b                   	pop    ebx
c0000657:	c3                   	ret    

c0000658 <strtok>:
c0000658:	56                   	push   esi
c0000659:	53                   	push   ebx
c000065a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000065e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000662:	85 db                	test   ebx,ebx
c0000664:	75 0e                	jne    c0000674 <strtok+0x1c>
c0000666:	8b 1d 6c 39 02 c0    	mov    ebx,DWORD PTR ds:0xc002396c
c000066c:	85 db                	test   ebx,ebx
c000066e:	75 04                	jne    c0000674 <strtok+0x1c>
c0000670:	31 db                	xor    ebx,ebx
c0000672:	eb 2e                	jmp    c00006a2 <strtok+0x4a>
c0000674:	56                   	push   esi
c0000675:	53                   	push   ebx
c0000676:	e8 ba ff ff ff       	call   c0000635 <strpbrk>
c000067b:	5a                   	pop    edx
c000067c:	a3 6c 39 02 c0       	mov    ds:0xc002396c,eax
c0000681:	59                   	pop    ecx
c0000682:	a1 6c 39 02 c0       	mov    eax,ds:0xc002396c
c0000687:	39 d8                	cmp    eax,ebx
c0000689:	75 07                	jne    c0000692 <strtok+0x3a>
c000068b:	43                   	inc    ebx
c000068c:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000690:	eb e2                	jmp    c0000674 <strtok+0x1c>
c0000692:	85 c0                	test   eax,eax
c0000694:	74 da                	je     c0000670 <strtok+0x18>
c0000696:	8d 50 01             	lea    edx,[eax+0x1]
c0000699:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000069c:	89 15 6c 39 02 c0    	mov    DWORD PTR ds:0xc002396c,edx
c00006a2:	89 d8                	mov    eax,ebx
c00006a4:	5b                   	pop    ebx
c00006a5:	5e                   	pop    esi
c00006a6:	c3                   	ret    

c00006a7 <strcpy>:
c00006a7:	53                   	push   ebx
c00006a8:	31 d2                	xor    edx,edx
c00006aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00006b2:	8d 1c 10             	lea    ebx,[eax+edx*1]
c00006b5:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00006b8:	84 c9                	test   cl,cl
c00006ba:	74 06                	je     c00006c2 <strcpy+0x1b>
c00006bc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00006bf:	42                   	inc    edx
c00006c0:	eb ec                	jmp    c00006ae <strcpy+0x7>
c00006c2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00006c5:	5b                   	pop    ebx
c00006c6:	c3                   	ret    

c00006c7 <strncpy>:
c00006c7:	56                   	push   esi
c00006c8:	53                   	push   ebx
c00006c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006d1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00006d5:	89 c3                	mov    ebx,eax
c00006d7:	85 c9                	test   ecx,ecx
c00006d9:	74 1a                	je     c00006f5 <strncpy+0x2e>
c00006db:	46                   	inc    esi
c00006dc:	43                   	inc    ebx
c00006dd:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00006e0:	49                   	dec    ecx
c00006e1:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00006e4:	84 d2                	test   dl,dl
c00006e6:	75 ef                	jne    c00006d7 <strncpy+0x10>
c00006e8:	31 d2                	xor    edx,edx
c00006ea:	39 d1                	cmp    ecx,edx
c00006ec:	74 07                	je     c00006f5 <strncpy+0x2e>
c00006ee:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00006f2:	42                   	inc    edx
c00006f3:	eb f5                	jmp    c00006ea <strncpy+0x23>
c00006f5:	5b                   	pop    ebx
c00006f6:	5e                   	pop    esi
c00006f7:	c3                   	ret    

c00006f8 <strcmp>:
c00006f8:	31 c9                	xor    ecx,ecx
c00006fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00006fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000702:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000706:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000070a:	38 d0                	cmp    al,dl
c000070c:	75 08                	jne    c0000716 <strcmp+0x1e>
c000070e:	41                   	inc    ecx
c000070f:	84 c0                	test   al,al
c0000711:	75 e7                	jne    c00006fa <strcmp+0x2>
c0000713:	31 c0                	xor    eax,eax
c0000715:	c3                   	ret    
c0000716:	29 d0                	sub    eax,edx
c0000718:	c3                   	ret    

c0000719 <strchr>:
c0000719:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000071d:	8a 10                	mov    dl,BYTE PTR [eax]
c000071f:	84 d2                	test   dl,dl
c0000721:	74 09                	je     c000072c <strchr+0x13>
c0000723:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c0000727:	74 05                	je     c000072e <strchr+0x15>
c0000729:	40                   	inc    eax
c000072a:	eb f1                	jmp    c000071d <strchr+0x4>
c000072c:	31 c0                	xor    eax,eax
c000072e:	c3                   	ret    

c000072f <strncmp>:
c000072f:	56                   	push   esi
c0000730:	53                   	push   ebx
c0000731:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000735:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000739:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000073d:	01 d6                	add    esi,edx
c000073f:	39 f2                	cmp    edx,esi
c0000741:	74 12                	je     c0000755 <strncmp+0x26>
c0000743:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000746:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000749:	38 c8                	cmp    al,cl
c000074b:	75 0c                	jne    c0000759 <strncmp+0x2a>
c000074d:	42                   	inc    edx
c000074e:	84 c0                	test   al,al
c0000750:	74 03                	je     c0000755 <strncmp+0x26>
c0000752:	43                   	inc    ebx
c0000753:	eb ea                	jmp    c000073f <strncmp+0x10>
c0000755:	31 c0                	xor    eax,eax
c0000757:	eb 02                	jmp    c000075b <strncmp+0x2c>
c0000759:	29 c8                	sub    eax,ecx
c000075b:	5b                   	pop    ebx
c000075c:	5e                   	pop    esi
c000075d:	c3                   	ret    

c000075e <strcat>:
c000075e:	53                   	push   ebx
c000075f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000763:	89 c1                	mov    ecx,eax
c0000765:	8d 51 01             	lea    edx,[ecx+0x1]
c0000768:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000076c:	74 04                	je     c0000772 <strcat+0x14>
c000076e:	89 d1                	mov    ecx,edx
c0000770:	eb f3                	jmp    c0000765 <strcat+0x7>
c0000772:	31 d2                	xor    edx,edx
c0000774:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000778:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000077b:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000077e:	42                   	inc    edx
c000077f:	84 db                	test   bl,bl
c0000781:	75 f1                	jne    c0000774 <strcat+0x16>
c0000783:	5b                   	pop    ebx
c0000784:	c3                   	ret    

c0000785 <strncat>:
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000793:	89 c2                	mov    edx,eax
c0000795:	85 db                	test   ebx,ebx
c0000797:	74 23                	je     c00007bc <strncat+0x37>
c0000799:	8d 72 01             	lea    esi,[edx+0x1]
c000079c:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c00007a0:	74 04                	je     c00007a6 <strncat+0x21>
c00007a2:	89 f2                	mov    edx,esi
c00007a4:	eb f3                	jmp    c0000799 <strncat+0x14>
c00007a6:	8d 34 19             	lea    esi,[ecx+ebx*1]
c00007a9:	41                   	inc    ecx
c00007aa:	42                   	inc    edx
c00007ab:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00007ae:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007b1:	84 db                	test   bl,bl
c00007b3:	74 07                	je     c00007bc <strncat+0x37>
c00007b5:	39 f1                	cmp    ecx,esi
c00007b7:	75 f0                	jne    c00007a9 <strncat+0x24>
c00007b9:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00007bc:	5b                   	pop    ebx
c00007bd:	5e                   	pop    esi
c00007be:	c3                   	ret    

c00007bf <strstr>:
c00007bf:	57                   	push   edi
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007c6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ca:	57                   	push   edi
c00007cb:	e8 55 fe ff ff       	call   c0000625 <strlen>
c00007d0:	59                   	pop    ecx
c00007d1:	89 c6                	mov    esi,eax
c00007d3:	85 c0                	test   eax,eax
c00007d5:	74 1f                	je     c00007f6 <strstr+0x37>
c00007d7:	53                   	push   ebx
c00007d8:	e8 48 fe ff ff       	call   c0000625 <strlen>
c00007dd:	5a                   	pop    edx
c00007de:	39 f0                	cmp    eax,esi
c00007e0:	72 12                	jb     c00007f4 <strstr+0x35>
c00007e2:	56                   	push   esi
c00007e3:	57                   	push   edi
c00007e4:	53                   	push   ebx
c00007e5:	e8 85 fd ff ff       	call   c000056f <memcmp>
c00007ea:	83 c4 0c             	add    esp,0xc
c00007ed:	85 c0                	test   eax,eax
c00007ef:	74 05                	je     c00007f6 <strstr+0x37>
c00007f1:	43                   	inc    ebx
c00007f2:	eb e3                	jmp    c00007d7 <strstr+0x18>
c00007f4:	31 db                	xor    ebx,ebx
c00007f6:	89 d8                	mov    eax,ebx
c00007f8:	5b                   	pop    ebx
c00007f9:	5e                   	pop    esi
c00007fa:	5f                   	pop    edi
c00007fb:	c3                   	ret    

c00007fc <toupper>:
c00007fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000800:	0f b6 d0             	movzx  edx,al
c0000803:	f6 82 40 f9 01 c0 02 	test   BYTE PTR [edx-0x3ffe06c0],0x2
c000080a:	74 03                	je     c000080f <toupper+0x13>
c000080c:	83 e8 20             	sub    eax,0x20
c000080f:	c3                   	ret    

c0000810 <tolower>:
c0000810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000814:	0f b6 d0             	movzx  edx,al
c0000817:	f6 82 40 f9 01 c0 01 	test   BYTE PTR [edx-0x3ffe06c0],0x1
c000081e:	74 03                	je     c0000823 <tolower+0x13>
c0000820:	83 c0 20             	add    eax,0x20
c0000823:	c3                   	ret    

c0000824 <simple_strtoul>:
c0000824:	55                   	push   ebp
c0000825:	57                   	push   edi
c0000826:	56                   	push   esi
c0000827:	53                   	push   ebx
c0000828:	83 ec 08             	sub    esp,0x8
c000082b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000082f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000833:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000836:	f6 82 40 f9 01 c0 08 	test   BYTE PTR [edx-0x3ffe06c0],0x8
c000083d:	74 03                	je     c0000842 <simple_strtoul+0x1e>
c000083f:	41                   	inc    ecx
c0000840:	eb f1                	jmp    c0000833 <simple_strtoul+0xf>
c0000842:	80 fa 09             	cmp    dl,0x9
c0000845:	74 f8                	je     c000083f <simple_strtoul+0x1b>
c0000847:	80 fa 2d             	cmp    dl,0x2d
c000084a:	75 0b                	jne    c0000857 <simple_strtoul+0x33>
c000084c:	41                   	inc    ecx
c000084d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000855:	eb 0e                	jmp    c0000865 <simple_strtoul+0x41>
c0000857:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000085f:	80 fa 2b             	cmp    dl,0x2b
c0000862:	75 01                	jne    c0000865 <simple_strtoul+0x41>
c0000864:	41                   	inc    ecx
c0000865:	85 f6                	test   esi,esi
c0000867:	75 22                	jne    c000088b <simple_strtoul+0x67>
c0000869:	be 0a 00 00 00       	mov    esi,0xa
c000086e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000871:	75 5a                	jne    c00008cd <simple_strtoul+0xa9>
c0000873:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000877:	50                   	push   eax
c0000878:	e8 93 ff ff ff       	call   c0000810 <tolower>
c000087d:	5a                   	pop    edx
c000087e:	83 f8 78             	cmp    eax,0x78
c0000881:	74 03                	je     c0000886 <simple_strtoul+0x62>
c0000883:	41                   	inc    ecx
c0000884:	eb 16                	jmp    c000089c <simple_strtoul+0x78>
c0000886:	83 c1 02             	add    ecx,0x2
c0000889:	eb 22                	jmp    c00008ad <simple_strtoul+0x89>
c000088b:	8d 46 fe             	lea    eax,[esi-0x2]
c000088e:	83 f8 22             	cmp    eax,0x22
c0000891:	0f 87 b7 00 00 00    	ja     c000094e <simple_strtoul+0x12a>
c0000897:	83 fe 08             	cmp    esi,0x8
c000089a:	75 0c                	jne    c00008a8 <simple_strtoul+0x84>
c000089c:	be 08 00 00 00       	mov    esi,0x8
c00008a1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008a4:	75 27                	jne    c00008cd <simple_strtoul+0xa9>
c00008a6:	eb 1f                	jmp    c00008c7 <simple_strtoul+0xa3>
c00008a8:	83 fe 10             	cmp    esi,0x10
c00008ab:	75 20                	jne    c00008cd <simple_strtoul+0xa9>
c00008ad:	be 10 00 00 00       	mov    esi,0x10
c00008b2:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008b5:	75 16                	jne    c00008cd <simple_strtoul+0xa9>
c00008b7:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008bb:	50                   	push   eax
c00008bc:	e8 4f ff ff ff       	call   c0000810 <tolower>
c00008c1:	5d                   	pop    ebp
c00008c2:	83 f8 78             	cmp    eax,0x78
c00008c5:	74 03                	je     c00008ca <simple_strtoul+0xa6>
c00008c7:	41                   	inc    ecx
c00008c8:	eb 03                	jmp    c00008cd <simple_strtoul+0xa9>
c00008ca:	83 c1 02             	add    ecx,0x2
c00008cd:	31 ed                	xor    ebp,ebp
c00008cf:	31 db                	xor    ebx,ebx
c00008d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00008d8:	8a 11                	mov    dl,BYTE PTR [ecx]
c00008da:	84 d2                	test   dl,dl
c00008dc:	74 27                	je     c0000905 <simple_strtoul+0xe1>
c00008de:	0f b6 fa             	movzx  edi,dl
c00008e1:	f6 87 40 f9 01 c0 04 	test   BYTE PTR [edi-0x3ffe06c0],0x4
c00008e8:	74 05                	je     c00008ef <simple_strtoul+0xcb>
c00008ea:	83 ef 30             	sub    edi,0x30
c00008ed:	eb 22                	jmp    c0000911 <simple_strtoul+0xed>
c00008ef:	0f be d2             	movsx  edx,dl
c00008f2:	52                   	push   edx
c00008f3:	e8 04 ff ff ff       	call   c00007fc <toupper>
c00008f8:	5f                   	pop    edi
c00008f9:	0f b6 d0             	movzx  edx,al
c00008fc:	f6 82 40 f9 01 c0 01 	test   BYTE PTR [edx-0x3ffe06c0],0x1
c0000903:	75 09                	jne    c000090e <simple_strtoul+0xea>
c0000905:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000090a:	75 2d                	jne    c0000939 <simple_strtoul+0x115>
c000090c:	eb 57                	jmp    c0000965 <simple_strtoul+0x141>
c000090e:	8d 78 c9             	lea    edi,[eax-0x37]
c0000911:	39 f7                	cmp    edi,esi
c0000913:	73 f0                	jae    c0000905 <simple_strtoul+0xe1>
c0000915:	31 d2                	xor    edx,edx
c0000917:	89 f8                	mov    eax,edi
c0000919:	f7 d0                	not    eax
c000091b:	f7 f6                	div    esi
c000091d:	39 d8                	cmp    eax,ebx
c000091f:	72 0e                	jb     c000092f <simple_strtoul+0x10b>
c0000921:	0f af de             	imul   ebx,esi
c0000924:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000092b:	01 fb                	add    ebx,edi
c000092d:	eb 07                	jmp    c0000936 <simple_strtoul+0x112>
c000092f:	bd 01 00 00 00       	mov    ebp,0x1
c0000934:	31 db                	xor    ebx,ebx
c0000936:	41                   	inc    ecx
c0000937:	eb 9f                	jmp    c00008d8 <simple_strtoul+0xb4>
c0000939:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000093c:	09 d8                	or     eax,ebx
c000093e:	75 1f                	jne    c000095f <simple_strtoul+0x13b>
c0000940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000944:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000948:	31 db                	xor    ebx,ebx
c000094a:	89 38                	mov    DWORD PTR [eax],edi
c000094c:	eb 17                	jmp    c0000965 <simple_strtoul+0x141>
c000094e:	31 db                	xor    ebx,ebx
c0000950:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000955:	74 14                	je     c000096b <simple_strtoul+0x147>
c0000957:	31 ed                	xor    ebp,ebp
c0000959:	85 c9                	test   ecx,ecx
c000095b:	75 e3                	jne    c0000940 <simple_strtoul+0x11c>
c000095d:	31 db                	xor    ebx,ebx
c000095f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000963:	89 08                	mov    DWORD PTR [eax],ecx
c0000965:	4d                   	dec    ebp
c0000966:	75 03                	jne    c000096b <simple_strtoul+0x147>
c0000968:	83 cb ff             	or     ebx,0xffffffff
c000096b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000970:	75 02                	jne    c0000974 <simple_strtoul+0x150>
c0000972:	f7 db                	neg    ebx
c0000974:	83 c4 08             	add    esp,0x8
c0000977:	89 d8                	mov    eax,ebx
c0000979:	5b                   	pop    ebx
c000097a:	5e                   	pop    esi
c000097b:	5f                   	pop    edi
c000097c:	5d                   	pop    ebp
c000097d:	c3                   	ret    

c000097e <largebin_index>:
c000097e:	89 c2                	mov    edx,eax
c0000980:	c1 ea 08             	shr    edx,0x8
c0000983:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000989:	77 10                	ja     c000099b <largebin_index+0x1d>
c000098b:	0f bd d2             	bsr    edx,edx
c000098e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000991:	d3 e8                	shr    eax,cl
c0000993:	83 e0 03             	and    eax,0x3
c0000996:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c000099a:	c3                   	ret    
c000099b:	b8 5f 00 00 00       	mov    eax,0x5f
c00009a0:	c3                   	ret    

c00009a1 <malloc_init_state>:
c00009a1:	53                   	push   ebx
c00009a2:	8d 50 34             	lea    edx,[eax+0x34]
c00009a5:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c00009ab:	89 d1                	mov    ecx,edx
c00009ad:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c00009b0:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c00009b3:	83 c2 08             	add    edx,0x8
c00009b6:	39 da                	cmp    edx,ebx
c00009b8:	75 f3                	jne    c00009ad <malloc_init_state+0xc>
c00009ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00009bc:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c00009c6:	83 e2 03             	and    edx,0x3
c00009c9:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c00009d3:	83 ca 48             	or     edx,0x48
c00009d6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c00009e0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c00009ea:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c00009f1:	89 10                	mov    DWORD PTR [eax],edx
c00009f3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c00009f6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a00:	5b                   	pop    ebx
c0000a01:	c3                   	ret    

c0000a02 <malloc_consolidate>:
c0000a02:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a04:	85 d2                	test   edx,edx
c0000a06:	0f 84 d8 00 00 00    	je     c0000ae4 <malloc_consolidate+0xe2>
c0000a0c:	55                   	push   ebp
c0000a0d:	83 e2 fd             	and    edx,0xfffffffd
c0000a10:	57                   	push   edi
c0000a11:	89 c5                	mov    ebp,eax
c0000a13:	56                   	push   esi
c0000a14:	8d 78 34             	lea    edi,[eax+0x34]
c0000a17:	53                   	push   ebx
c0000a18:	83 ec 10             	sub    esp,0x10
c0000a1b:	89 10                	mov    DWORD PTR [eax],edx
c0000a1d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a21:	c1 ea 03             	shr    edx,0x3
c0000a24:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a28:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000a2c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000a2f:	85 d2                	test   edx,edx
c0000a31:	0f 84 98 00 00 00    	je     c0000acf <malloc_consolidate+0xcd>
c0000a37:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000a3e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000a41:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000a44:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000a48:	89 f9                	mov    ecx,edi
c0000a4a:	83 e1 fe             	and    ecx,0xfffffffe
c0000a4d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000a50:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000a53:	83 e3 fc             	and    ebx,0xfffffffc
c0000a56:	83 e7 01             	and    edi,0x1
c0000a59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000a5c:	75 14                	jne    c0000a72 <malloc_consolidate+0x70>
c0000a5e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000a60:	29 fa                	sub    edx,edi
c0000a62:	01 f9                	add    ecx,edi
c0000a64:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000a67:	89 fb                	mov    ebx,edi
c0000a69:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000a6c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000a6f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000a72:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000a75:	74 40                	je     c0000ab7 <malloc_consolidate+0xb5>
c0000a77:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000a7a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000a7d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000a81:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000a84:	83 e7 01             	and    edi,0x1
c0000a87:	75 0e                	jne    c0000a97 <malloc_consolidate+0x95>
c0000a89:	01 d9                	add    ecx,ebx
c0000a8b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000a8e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000a91:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000a94:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000a97:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000a9a:	89 ce                	mov    esi,ecx
c0000a9c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000a9f:	83 ce 01             	or     esi,0x1
c0000aa2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000aa5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000aa8:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000aab:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000aaf:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ab2:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ab5:	eb 0c                	jmp    c0000ac3 <malloc_consolidate+0xc1>
c0000ab7:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000aba:	83 c9 01             	or     ecx,0x1
c0000abd:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ac0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ac3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ac7:	85 d2                	test   edx,edx
c0000ac9:	0f 85 6f ff ff ff    	jne    c0000a3e <malloc_consolidate+0x3c>
c0000acf:	83 c5 04             	add    ebp,0x4
c0000ad2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ad6:	0f 85 50 ff ff ff    	jne    c0000a2c <malloc_consolidate+0x2a>
c0000adc:	83 c4 10             	add    esp,0x10
c0000adf:	5b                   	pop    ebx
c0000ae0:	5e                   	pop    esi
c0000ae1:	5f                   	pop    edi
c0000ae2:	5d                   	pop    ebp
c0000ae3:	c3                   	ret    
c0000ae4:	e9 b8 fe ff ff       	jmp    c00009a1 <malloc_init_state>

c0000ae9 <dlfree>:
c0000ae9:	57                   	push   edi
c0000aea:	56                   	push   esi
c0000aeb:	53                   	push   ebx
c0000aec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000af0:	85 db                	test   ebx,ebx
c0000af2:	0f 84 e2 00 00 00    	je     c0000bda <dlfree+0xf1>
c0000af8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000afb:	8b 0d 80 39 02 c0    	mov    ecx,DWORD PTR ds:0xc0023980
c0000b01:	89 f0                	mov    eax,esi
c0000b03:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b06:	83 e0 fc             	and    eax,0xfffffffc
c0000b09:	39 c1                	cmp    ecx,eax
c0000b0b:	72 24                	jb     c0000b31 <dlfree+0x48>
c0000b0d:	83 c9 03             	or     ecx,0x3
c0000b10:	c1 e8 03             	shr    eax,0x3
c0000b13:	89 0d 80 39 02 c0    	mov    DWORD PTR ds:0xc0023980,ecx
c0000b19:	83 e8 02             	sub    eax,0x2
c0000b1c:	8b 0c 85 84 39 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdc67c]
c0000b23:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b25:	89 14 85 84 39 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc67c],edx
c0000b2c:	e9 a9 00 00 00       	jmp    c0000bda <dlfree+0xf1>
c0000b31:	83 e6 02             	and    esi,0x2
c0000b34:	0f 85 a0 00 00 00    	jne    c0000bda <dlfree+0xf1>
c0000b3a:	83 c9 01             	or     ecx,0x1
c0000b3d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000b40:	89 0d 80 39 02 c0    	mov    DWORD PTR ds:0xc0023980,ecx
c0000b46:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000b49:	83 e1 fc             	and    ecx,0xfffffffc
c0000b4c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000b50:	75 13                	jne    c0000b65 <dlfree+0x7c>
c0000b52:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000b55:	29 da                	sub    edx,ebx
c0000b57:	01 d8                	add    eax,ebx
c0000b59:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b5c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000b5f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b62:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b65:	39 35 ac 39 02 c0    	cmp    DWORD PTR ds:0xc00239ac,esi
c0000b6b:	74 40                	je     c0000bad <dlfree+0xc4>
c0000b6d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000b71:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000b74:	80 e3 01             	and    bl,0x1
c0000b77:	75 0e                	jne    c0000b87 <dlfree+0x9e>
c0000b79:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000b7c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000b7f:	01 c8                	add    eax,ecx
c0000b81:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b84:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b87:	8b 0d bc 39 02 c0    	mov    ecx,DWORD PTR ds:0xc00239bc
c0000b8d:	c7 42 0c b4 39 02 c0 	mov    DWORD PTR [edx+0xc],0xc00239b4
c0000b94:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000b97:	89 15 bc 39 02 c0    	mov    DWORD PTR ds:0xc00239bc,edx
c0000b9d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ba0:	89 c1                	mov    ecx,eax
c0000ba2:	83 c9 01             	or     ecx,0x1
c0000ba5:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ba8:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000bab:	eb 10                	jmp    c0000bbd <dlfree+0xd4>
c0000bad:	01 c8                	add    eax,ecx
c0000baf:	89 c1                	mov    ecx,eax
c0000bb1:	83 c9 01             	or     ecx,0x1
c0000bb4:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bb7:	89 15 ac 39 02 c0    	mov    DWORD PTR ds:0xc00239ac,edx
c0000bbd:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000bc2:	76 16                	jbe    c0000bda <dlfree+0xf1>
c0000bc4:	f6 05 80 39 02 c0 02 	test   BYTE PTR ds:0xc0023980,0x2
c0000bcb:	74 0d                	je     c0000bda <dlfree+0xf1>
c0000bcd:	5b                   	pop    ebx
c0000bce:	b8 80 39 02 c0       	mov    eax,0xc0023980
c0000bd3:	5e                   	pop    esi
c0000bd4:	5f                   	pop    edi
c0000bd5:	e9 28 fe ff ff       	jmp    c0000a02 <malloc_consolidate>
c0000bda:	5b                   	pop    ebx
c0000bdb:	5e                   	pop    esi
c0000bdc:	5f                   	pop    edi
c0000bdd:	c3                   	ret    

c0000bde <sYSMALLOc>:
c0000bde:	55                   	push   ebp
c0000bdf:	57                   	push   edi
c0000be0:	56                   	push   esi
c0000be1:	53                   	push   ebx
c0000be2:	89 d3                	mov    ebx,edx
c0000be4:	83 ec 2c             	sub    esp,0x2c
c0000be7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000beb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000bf1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000bf4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000bf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000bfb:	74 1f                	je     c0000c1c <sYSMALLOc+0x3e>
c0000bfd:	89 d8                	mov    eax,ebx
c0000bff:	e8 fe fd ff ff       	call   c0000a02 <malloc_consolidate>
c0000c04:	83 ec 0c             	sub    esp,0xc
c0000c07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c0b:	83 e8 07             	sub    eax,0x7
c0000c0e:	50                   	push   eax
c0000c0f:	e8 30 02 00 00       	call   c0000e44 <dlmalloc>
c0000c14:	83 c4 10             	add    esp,0x10
c0000c17:	e9 20 02 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c1c:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c1f:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c25:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c28:	83 e0 fc             	and    eax,0xfffffffc
c0000c2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000c2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000c33:	83 c0 10             	add    eax,0x10
c0000c36:	01 c1                	add    ecx,eax
c0000c38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000c3c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000c43:	74 04                	je     c0000c49 <sYSMALLOc+0x6b>
c0000c45:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000c49:	f7 da                	neg    edx
c0000c4b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000c4f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000c53:	21 d1                	and    ecx,edx
c0000c55:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000c59:	7f 07                	jg     c0000c62 <sYSMALLOc+0x84>
c0000c5b:	31 c0                	xor    eax,eax
c0000c5d:	e9 da 01 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c62:	83 ec 0c             	sub    esp,0xc
c0000c65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000c69:	e8 49 b1 00 00       	call   c000bdb7 <sbrk>
c0000c6e:	83 c4 10             	add    esp,0x10
c0000c71:	89 c6                	mov    esi,eax
c0000c73:	83 f8 ff             	cmp    eax,0xffffffff
c0000c76:	74 e3                	je     c0000c5b <sYSMALLOc+0x7d>
c0000c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c7c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000c80:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000c83:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000c89:	39 f1                	cmp    ecx,esi
c0000c8b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000c91:	75 13                	jne    c0000ca6 <sYSMALLOc+0xc8>
c0000c93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c97:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000c9b:	83 c8 01             	or     eax,0x1
c0000c9e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000ca1:	e9 3e 01 00 00       	jmp    c0000de4 <sYSMALLOc+0x206>
c0000ca6:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000cac:	88 d0                	mov    al,dl
c0000cae:	83 e0 01             	and    eax,0x1
c0000cb1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000cb6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000cba:	0f 95 c0             	setne  al
c0000cbd:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000cc1:	39 f1                	cmp    ecx,esi
c0000cc3:	76 12                	jbe    c0000cd7 <sYSMALLOc+0xf9>
c0000cc5:	84 c0                	test   al,al
c0000cc7:	74 0e                	je     c0000cd7 <sYSMALLOc+0xf9>
c0000cc9:	83 e2 fe             	and    edx,0xfffffffe
c0000ccc:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000cd2:	e9 83 00 00 00       	jmp    c0000d5a <sYSMALLOc+0x17c>
c0000cd7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000cdc:	74 7c                	je     c0000d5a <sYSMALLOc+0x17c>
c0000cde:	84 c0                	test   al,al
c0000ce0:	74 0c                	je     c0000cee <sYSMALLOc+0x110>
c0000ce2:	89 f0                	mov    eax,esi
c0000ce4:	29 c8                	sub    eax,ecx
c0000ce6:	01 e8                	add    eax,ebp
c0000ce8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000cee:	89 f2                	mov    edx,esi
c0000cf0:	83 e2 07             	and    edx,0x7
c0000cf3:	74 0c                	je     c0000d01 <sYSMALLOc+0x123>
c0000cf5:	b8 08 00 00 00       	mov    eax,0x8
c0000cfa:	29 d0                	sub    eax,edx
c0000cfc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000cff:	eb 04                	jmp    c0000d05 <sYSMALLOc+0x127>
c0000d01:	89 f5                	mov    ebp,esi
c0000d03:	31 c0                	xor    eax,eax
c0000d05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d09:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d11:	01 c1                	add    ecx,eax
c0000d13:	83 ec 0c             	sub    esp,0xc
c0000d16:	01 f1                	add    ecx,esi
c0000d18:	01 ca                	add    edx,ecx
c0000d1a:	29 c8                	sub    eax,ecx
c0000d1c:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d20:	01 c2                	add    edx,eax
c0000d22:	52                   	push   edx
c0000d23:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d27:	e8 8b b0 00 00       	call   c000bdb7 <sbrk>
c0000d2c:	83 c4 10             	add    esp,0x10
c0000d2f:	83 f8 ff             	cmp    eax,0xffffffff
c0000d32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d36:	75 0f                	jne    c0000d47 <sYSMALLOc+0x169>
c0000d38:	83 ec 0c             	sub    esp,0xc
c0000d3b:	6a 00                	push   0x0
c0000d3d:	e8 75 b0 00 00       	call   c000bdb7 <sbrk>
c0000d42:	83 c4 10             	add    esp,0x10
c0000d45:	eb 30                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d47:	39 c6                	cmp    esi,eax
c0000d49:	76 33                	jbe    c0000d7e <sYSMALLOc+0x1a0>
c0000d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d4f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000d56:	01 f0                	add    eax,esi
c0000d58:	eb 1d                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d5a:	83 ec 0c             	sub    esp,0xc
c0000d5d:	89 f5                	mov    ebp,esi
c0000d5f:	6a 00                	push   0x0
c0000d61:	e8 51 b0 00 00       	call   c000bdb7 <sbrk>
c0000d66:	89 c2                	mov    edx,eax
c0000d68:	29 f2                	sub    edx,esi
c0000d6a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000d6e:	83 c4 10             	add    esp,0x10
c0000d71:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d77:	31 d2                	xor    edx,edx
c0000d79:	83 f8 ff             	cmp    eax,0xffffffff
c0000d7c:	74 66                	je     c0000de4 <sYSMALLOc+0x206>
c0000d7e:	29 e8                	sub    eax,ebp
c0000d80:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000d83:	01 d0                	add    eax,edx
c0000d85:	83 c8 01             	or     eax,0x1
c0000d88:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000d8b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d91:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d96:	74 4c                	je     c0000de4 <sYSMALLOc+0x206>
c0000d98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d9c:	83 e8 0c             	sub    eax,0xc
c0000d9f:	83 e0 f8             	and    eax,0xfffffff8
c0000da2:	89 c2                	mov    edx,eax
c0000da4:	83 ca 01             	or     edx,0x1
c0000da7:	83 f8 0f             	cmp    eax,0xf
c0000daa:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000dad:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000db5:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000dbd:	76 25                	jbe    c0000de4 <sYSMALLOc+0x206>
c0000dbf:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000dc5:	83 ec 0c             	sub    esp,0xc
c0000dc8:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000dd2:	83 c7 08             	add    edi,0x8
c0000dd5:	57                   	push   edi
c0000dd6:	e8 0e fd ff ff       	call   c0000ae9 <dlfree>
c0000ddb:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000de1:	83 c4 10             	add    esp,0x10
c0000de4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000dea:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000df0:	73 06                	jae    c0000df8 <sYSMALLOc+0x21a>
c0000df2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000df8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000dfe:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e04:	73 06                	jae    c0000e0c <sYSMALLOc+0x22e>
c0000e06:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e0c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e0f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e12:	83 e2 fc             	and    edx,0xfffffffc
c0000e15:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e19:	0f 82 3c fe ff ff    	jb     c0000c5b <sYSMALLOc+0x7d>
c0000e1f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e23:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e26:	29 fa                	sub    edx,edi
c0000e28:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e2b:	83 ca 01             	or     edx,0x1
c0000e2e:	89 fb                	mov    ebx,edi
c0000e30:	83 c0 08             	add    eax,0x8
c0000e33:	83 cb 01             	or     ebx,0x1
c0000e36:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e39:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e3c:	83 c4 2c             	add    esp,0x2c
c0000e3f:	5b                   	pop    ebx
c0000e40:	5e                   	pop    esi
c0000e41:	5f                   	pop    edi
c0000e42:	5d                   	pop    ebp
c0000e43:	c3                   	ret    

c0000e44 <dlmalloc>:
c0000e44:	55                   	push   ebp
c0000e45:	57                   	push   edi
c0000e46:	56                   	push   esi
c0000e47:	53                   	push   ebx
c0000e48:	83 ec 1c             	sub    esp,0x1c
c0000e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000e4f:	83 f8 df             	cmp    eax,0xffffffdf
c0000e52:	0f 87 70 03 00 00    	ja     c00011c8 <dlmalloc+0x384>
c0000e58:	83 c0 0b             	add    eax,0xb
c0000e5b:	be 10 00 00 00       	mov    esi,0x10
c0000e60:	83 f8 0f             	cmp    eax,0xf
c0000e63:	76 05                	jbe    c0000e6a <dlmalloc+0x26>
c0000e65:	83 e0 f8             	and    eax,0xfffffff8
c0000e68:	89 c6                	mov    esi,eax
c0000e6a:	8b 3d 80 39 02 c0    	mov    edi,DWORD PTR ds:0xc0023980
c0000e70:	f7 c7 01 00 00 00    	test   edi,0x1
c0000e76:	75 17                	jne    c0000e8f <dlmalloc+0x4b>
c0000e78:	85 ff                	test   edi,edi
c0000e7a:	0f 85 05 03 00 00    	jne    c0001185 <dlmalloc+0x341>
c0000e80:	b8 80 39 02 c0       	mov    eax,0xc0023980
c0000e85:	e8 78 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000e8a:	e9 f6 02 00 00       	jmp    c0001185 <dlmalloc+0x341>
c0000e8f:	39 f7                	cmp    edi,esi
c0000e91:	72 1f                	jb     c0000eb2 <dlmalloc+0x6e>
c0000e93:	89 f2                	mov    edx,esi
c0000e95:	c1 ea 03             	shr    edx,0x3
c0000e98:	83 ea 02             	sub    edx,0x2
c0000e9b:	8b 04 95 84 39 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc67c]
c0000ea2:	85 c0                	test   eax,eax
c0000ea4:	74 0c                	je     c0000eb2 <dlmalloc+0x6e>
c0000ea6:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000ea9:	89 0c 95 84 39 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc67c],ecx
c0000eb0:	eb 30                	jmp    c0000ee2 <dlmalloc+0x9e>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000eba:	77 2e                	ja     c0000eea <dlmalloc+0xa6>
c0000ebc:	c1 e8 03             	shr    eax,0x3
c0000ebf:	8d 14 c5 b4 39 02 c0 	lea    edx,[eax*8-0x3ffdc64c]
c0000ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eca:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000ecd:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000ed0:	39 c3                	cmp    ebx,eax
c0000ed2:	74 2e                	je     c0000f02 <dlmalloc+0xbe>
c0000ed4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000ed7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000edc:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000edf:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000ee2:	83 c0 08             	add    eax,0x8
c0000ee5:	e9 e0 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000eea:	e8 8f fa ff ff       	call   c000097e <largebin_index>
c0000eef:	83 e7 02             	and    edi,0x2
c0000ef2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef6:	74 0a                	je     c0000f02 <dlmalloc+0xbe>
c0000ef8:	b8 80 39 02 c0       	mov    eax,0xc0023980
c0000efd:	e8 00 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000f02:	8d 46 10             	lea    eax,[esi+0x10]
c0000f05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f09:	8b 1d c0 39 02 c0    	mov    ebx,DWORD PTR ds:0xc00239c0
c0000f0f:	81 fb b4 39 02 c0    	cmp    ebx,0xc00239b4
c0000f15:	0f 84 13 01 00 00    	je     c000102e <dlmalloc+0x1ea>
c0000f1b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f1e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f21:	83 e7 fc             	and    edi,0xfffffffc
c0000f24:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2a:	77 4c                	ja     c0000f78 <dlmalloc+0x134>
c0000f2c:	3d b4 39 02 c0       	cmp    eax,0xc00239b4
c0000f31:	75 45                	jne    c0000f78 <dlmalloc+0x134>
c0000f33:	39 1d b0 39 02 c0    	cmp    DWORD PTR ds:0xc00239b0,ebx
c0000f39:	75 3d                	jne    c0000f78 <dlmalloc+0x134>
c0000f3b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000f3f:	73 37                	jae    c0000f78 <dlmalloc+0x134>
c0000f41:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000f44:	89 fa                	mov    edx,edi
c0000f46:	a3 bc 39 02 c0       	mov    ds:0xc00239bc,eax
c0000f4b:	a3 c0 39 02 c0       	mov    ds:0xc00239c0,eax
c0000f50:	a3 b0 39 02 c0       	mov    ds:0xc00239b0,eax
c0000f55:	29 f2                	sub    edx,esi
c0000f57:	c7 40 08 b4 39 02 c0 	mov    DWORD PTR [eax+0x8],0xc00239b4
c0000f5e:	c7 40 0c b4 39 02 c0 	mov    DWORD PTR [eax+0xc],0xc00239b4
c0000f65:	83 ce 01             	or     esi,0x1
c0000f68:	89 d1                	mov    ecx,edx
c0000f6a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000f6d:	83 c9 01             	or     ecx,0x1
c0000f70:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000f73:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000f76:	eb 15                	jmp    c0000f8d <dlmalloc+0x149>
c0000f78:	a3 c0 39 02 c0       	mov    ds:0xc00239c0,eax
c0000f7d:	39 fe                	cmp    esi,edi
c0000f7f:	c7 40 08 b4 39 02 c0 	mov    DWORD PTR [eax+0x8],0xc00239b4
c0000f86:	75 0d                	jne    c0000f95 <dlmalloc+0x151>
c0000f88:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0000f8d:	8d 43 08             	lea    eax,[ebx+0x8]
c0000f90:	e9 35 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000f95:	89 f8                	mov    eax,edi
c0000f97:	81 ff ff 00 00 00    	cmp    edi,0xff
c0000f9d:	77 19                	ja     c0000fb8 <dlmalloc+0x174>
c0000f9f:	c1 e8 03             	shr    eax,0x3
c0000fa2:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fa5:	83 c2 0d             	add    edx,0xd
c0000fa8:	8d 2c 95 78 39 02 c0 	lea    ebp,[edx*4-0x3ffdc688]
c0000faf:	8b 14 95 80 39 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc680]
c0000fb6:	eb 46                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000fb8:	e8 c1 f9 ff ff       	call   c000097e <largebin_index>
c0000fbd:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fc0:	83 c2 0d             	add    edx,0xd
c0000fc3:	8d 0c 95 80 39 02 c0 	lea    ecx,[edx*4-0x3ffdc680]
c0000fca:	8b 14 95 80 39 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc680]
c0000fd1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0000fd4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0000fd8:	89 d5                	mov    ebp,edx
c0000fda:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0000fde:	74 1e                	je     c0000ffe <dlmalloc+0x1ba>
c0000fe0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0000fe3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0000fe6:	77 12                	ja     c0000ffa <dlmalloc+0x1b6>
c0000fe8:	83 cf 01             	or     edi,0x1
c0000feb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0000fee:	76 05                	jbe    c0000ff5 <dlmalloc+0x1b1>
c0000ff0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0000ff3:	eb f6                	jmp    c0000feb <dlmalloc+0x1a7>
c0000ff5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0000ff8:	eb 04                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000ffa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000ffe:	89 c7                	mov    edi,eax
c0001000:	88 c1                	mov    cl,al
c0001002:	c1 ff 05             	sar    edi,0x5
c0001005:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001009:	bf 01 00 00 00       	mov    edi,0x1
c000100e:	d3 e7                	shl    edi,cl
c0001010:	89 f8                	mov    eax,edi
c0001012:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001016:	09 04 bd b4 3c 02 c0 	or     DWORD PTR [edi*4-0x3ffdc34c],eax
c000101d:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001020:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001023:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001026:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001029:	e9 db fe ff ff       	jmp    c0000f09 <dlmalloc+0xc5>
c000102e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001034:	76 78                	jbe    c00010ae <dlmalloc+0x26a>
c0001036:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000103a:	8d 04 c5 b4 39 02 c0 	lea    eax,[eax*8-0x3ffdc64c]
c0001041:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001047:	39 ca                	cmp    edx,ecx
c0001049:	74 63                	je     c00010ae <dlmalloc+0x26a>
c000104b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000104e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001051:	83 e3 fc             	and    ebx,0xfffffffc
c0001054:	39 de                	cmp    esi,ebx
c0001056:	77 52                	ja     c00010aa <dlmalloc+0x266>
c0001058:	89 df                	mov    edi,ebx
c000105a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000105d:	29 f7                	sub    edi,esi
c000105f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001062:	01 d3                	add    ebx,edx
c0001064:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001067:	83 ff 0f             	cmp    edi,0xf
c000106a:	8d 42 08             	lea    eax,[edx+0x8]
c000106d:	77 09                	ja     c0001078 <dlmalloc+0x234>
c000106f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001073:	e9 52 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001078:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000107b:	83 ce 01             	or     esi,0x1
c000107e:	89 0d bc 39 02 c0    	mov    DWORD PTR ds:0xc00239bc,ecx
c0001084:	89 0d c0 39 02 c0    	mov    DWORD PTR ds:0xc00239c0,ecx
c000108a:	c7 41 08 b4 39 02 c0 	mov    DWORD PTR [ecx+0x8],0xc00239b4
c0001091:	c7 41 0c b4 39 02 c0 	mov    DWORD PTR [ecx+0xc],0xc00239b4
c0001098:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000109b:	89 fa                	mov    edx,edi
c000109d:	83 ca 01             	or     edx,0x1
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	89 3b                	mov    DWORD PTR [ebx],edi
c00010a5:	e9 20 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c00010aa:	89 c2                	mov    edx,eax
c00010ac:	eb 99                	jmp    c0001047 <dlmalloc+0x203>
c00010ae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00010b2:	b8 01 00 00 00       	mov    eax,0x1
c00010b7:	41                   	inc    ecx
c00010b8:	89 cb                	mov    ebx,ecx
c00010ba:	8d 14 cd ac 39 02 c0 	lea    edx,[ecx*8-0x3ffdc654]
c00010c1:	c1 eb 05             	shr    ebx,0x5
c00010c4:	d3 e0                	shl    eax,cl
c00010c6:	8b 3c 9d b4 3c 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdc34c]
c00010cd:	39 f8                	cmp    eax,edi
c00010cf:	77 04                	ja     c00010d5 <dlmalloc+0x291>
c00010d1:	85 c0                	test   eax,eax
c00010d3:	75 26                	jne    c00010fb <dlmalloc+0x2b7>
c00010d5:	43                   	inc    ebx
c00010d6:	83 fb 02             	cmp    ebx,0x2
c00010d9:	0f 87 a6 00 00 00    	ja     c0001185 <dlmalloc+0x341>
c00010df:	8b 3c 9d b4 3c 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdc34c]
c00010e6:	85 ff                	test   edi,edi
c00010e8:	74 eb                	je     c00010d5 <dlmalloc+0x291>
c00010ea:	89 d8                	mov    eax,ebx
c00010ec:	c1 e0 06             	shl    eax,0x6
c00010ef:	8d 14 85 ac 39 02 c0 	lea    edx,[eax*4-0x3ffdc654]
c00010f6:	b8 01 00 00 00       	mov    eax,0x1
c00010fb:	85 f8                	test   eax,edi
c00010fd:	75 07                	jne    c0001106 <dlmalloc+0x2c2>
c00010ff:	83 c2 08             	add    edx,0x8
c0001102:	01 c0                	add    eax,eax
c0001104:	eb f5                	jmp    c00010fb <dlmalloc+0x2b7>
c0001106:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001109:	39 ca                	cmp    edx,ecx
c000110b:	75 14                	jne    c0001121 <dlmalloc+0x2dd>
c000110d:	89 c1                	mov    ecx,eax
c000110f:	83 c2 08             	add    edx,0x8
c0001112:	f7 d1                	not    ecx
c0001114:	01 c0                	add    eax,eax
c0001116:	21 cf                	and    edi,ecx
c0001118:	89 3c 9d b4 3c 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdc34c],edi
c000111f:	eb ac                	jmp    c00010cd <dlmalloc+0x289>
c0001121:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001124:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001127:	83 e0 fc             	and    eax,0xfffffffc
c000112a:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000112d:	89 c3                	mov    ebx,eax
c000112f:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001132:	29 f3                	sub    ebx,esi
c0001134:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001137:	83 fb 0f             	cmp    ebx,0xf
c000113a:	8d 41 08             	lea    eax,[ecx+0x8]
c000113d:	77 09                	ja     c0001148 <dlmalloc+0x304>
c000113f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001143:	e9 82 00 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001148:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000114b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001151:	89 3d bc 39 02 c0    	mov    DWORD PTR ds:0xc00239bc,edi
c0001157:	89 3d c0 39 02 c0    	mov    DWORD PTR ds:0xc00239c0,edi
c000115d:	c7 47 08 b4 39 02 c0 	mov    DWORD PTR [edi+0x8],0xc00239b4
c0001164:	c7 47 0c b4 39 02 c0 	mov    DWORD PTR [edi+0xc],0xc00239b4
c000116b:	77 06                	ja     c0001173 <dlmalloc+0x32f>
c000116d:	89 3d b0 39 02 c0    	mov    DWORD PTR ds:0xc00239b0,edi
c0001173:	83 ce 01             	or     esi,0x1
c0001176:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001179:	89 d9                	mov    ecx,ebx
c000117b:	83 c9 01             	or     ecx,0x1
c000117e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001181:	89 1a                	mov    DWORD PTR [edx],ebx
c0001183:	eb 45                	jmp    c00011ca <dlmalloc+0x386>
c0001185:	a1 ac 39 02 c0       	mov    eax,ds:0xc00239ac
c000118a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000118d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001190:	83 e2 fc             	and    edx,0xfffffffc
c0001193:	39 d1                	cmp    ecx,edx
c0001195:	77 1e                	ja     c00011b5 <dlmalloc+0x371>
c0001197:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000119a:	89 f3                	mov    ebx,esi
c000119c:	89 0d ac 39 02 c0    	mov    DWORD PTR ds:0xc00239ac,ecx
c00011a2:	83 cb 01             	or     ebx,0x1
c00011a5:	29 f2                	sub    edx,esi
c00011a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00011aa:	83 ca 01             	or     edx,0x1
c00011ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011b0:	e9 2d fd ff ff       	jmp    c0000ee2 <dlmalloc+0x9e>
c00011b5:	83 c4 1c             	add    esp,0x1c
c00011b8:	89 f0                	mov    eax,esi
c00011ba:	5b                   	pop    ebx
c00011bb:	ba 80 39 02 c0       	mov    edx,0xc0023980
c00011c0:	5e                   	pop    esi
c00011c1:	5f                   	pop    edi
c00011c2:	5d                   	pop    ebp
c00011c3:	e9 16 fa ff ff       	jmp    c0000bde <sYSMALLOc>
c00011c8:	31 c0                	xor    eax,eax
c00011ca:	83 c4 1c             	add    esp,0x1c
c00011cd:	5b                   	pop    ebx
c00011ce:	5e                   	pop    esi
c00011cf:	5f                   	pop    edi
c00011d0:	5d                   	pop    ebp
c00011d1:	c3                   	ret    

c00011d2 <iALLOc>:
c00011d2:	55                   	push   ebp
c00011d3:	89 c5                	mov    ebp,eax
c00011d5:	57                   	push   edi
c00011d6:	56                   	push   esi
c00011d7:	53                   	push   ebx
c00011d8:	83 ec 2c             	sub    esp,0x2c
c00011db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00011df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00011e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011e7:	83 3d 80 39 02 c0 00 	cmp    DWORD PTR ds:0xc0023980,0x0
c00011ee:	75 12                	jne    c0001202 <iALLOc+0x30>
c00011f0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00011f4:	b8 80 39 02 c0       	mov    eax,0xc0023980
c00011f9:	e8 04 f8 ff ff       	call   c0000a02 <malloc_consolidate>
c00011fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001202:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001207:	74 12                	je     c000121b <iALLOc+0x49>
c0001209:	85 ed                	test   ebp,ebp
c000120b:	0f 84 64 01 00 00    	je     c0001375 <iALLOc+0x1a3>
c0001211:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001219:	eb 33                	jmp    c000124e <iALLOc+0x7c>
c000121b:	85 ed                	test   ebp,ebp
c000121d:	75 14                	jne    c0001233 <iALLOc+0x61>
c000121f:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001227:	83 c4 2c             	add    esp,0x2c
c000122a:	5b                   	pop    ebx
c000122b:	5e                   	pop    esi
c000122c:	5f                   	pop    edi
c000122d:	5d                   	pop    ebp
c000122e:	e9 11 fc ff ff       	jmp    c0000e44 <dlmalloc>
c0001233:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000123a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001242:	83 f8 0f             	cmp    eax,0xf
c0001245:	76 07                	jbe    c000124e <iALLOc+0x7c>
c0001247:	83 e0 f8             	and    eax,0xfffffff8
c000124a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000124e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001253:	75 09                	jne    c000125e <iALLOc+0x8c>
c0001255:	89 d0                	mov    eax,edx
c0001257:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000125a:	31 f6                	xor    esi,esi
c000125c:	eb 3b                	jmp    c0001299 <iALLOc+0xc7>
c000125e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001260:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001268:	83 c0 0b             	add    eax,0xb
c000126b:	83 f8 0f             	cmp    eax,0xf
c000126e:	76 07                	jbe    c0001277 <iALLOc+0xa5>
c0001270:	83 e0 f8             	and    eax,0xfffffff8
c0001273:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001277:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000127b:	0f af f5             	imul   esi,ebp
c000127e:	eb 25                	jmp    c00012a5 <iALLOc+0xd3>
c0001280:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001282:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001285:	bb 10 00 00 00       	mov    ebx,0x10
c000128a:	83 f9 0f             	cmp    ecx,0xf
c000128d:	76 05                	jbe    c0001294 <iALLOc+0xc2>
c000128f:	83 e1 f8             	and    ecx,0xfffffff8
c0001292:	89 cb                	mov    ebx,ecx
c0001294:	01 de                	add    esi,ebx
c0001296:	83 c0 04             	add    eax,0x4
c0001299:	39 c7                	cmp    edi,eax
c000129b:	75 e3                	jne    c0001280 <iALLOc+0xae>
c000129d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00012a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00012a9:	8b 1d d4 3c 02 c0    	mov    ebx,DWORD PTR ds:0xc0023cd4
c00012af:	83 ec 0c             	sub    esp,0xc
c00012b2:	c7 05 d4 3c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023cd4,0x0
c00012bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00012c0:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00012c4:	50                   	push   eax
c00012c5:	e8 7a fb ff ff       	call   c0000e44 <dlmalloc>
c00012ca:	83 c4 10             	add    esp,0x10
c00012cd:	89 1d d4 3c 02 c0    	mov    DWORD PTR ds:0xc0023cd4,ebx
c00012d3:	85 c0                	test   eax,eax
c00012d5:	0f 84 92 00 00 00    	je     c000136d <iALLOc+0x19b>
c00012db:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00012de:	8d 78 f8             	lea    edi,[eax-0x8]
c00012e1:	83 e3 fc             	and    ebx,0xfffffffc
c00012e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00012e8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00012ed:	74 1e                	je     c000130d <iALLOc+0x13b>
c00012ef:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00012f3:	89 d9                	mov    ecx,ebx
c00012f5:	52                   	push   edx
c00012f6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00012fa:	83 e9 04             	sub    ecx,0x4
c00012fd:	51                   	push   ecx
c00012fe:	6a 00                	push   0x0
c0001300:	50                   	push   eax
c0001301:	e8 02 f3 ff ff       	call   c0000608 <memset>
c0001306:	83 c4 10             	add    esp,0x10
c0001309:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000130d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001312:	75 14                	jne    c0001328 <iALLOc+0x156>
c0001314:	8d 04 37             	lea    eax,[edi+esi*1]
c0001317:	29 f3                	sub    ebx,esi
c0001319:	8d 48 08             	lea    ecx,[eax+0x8]
c000131c:	83 cb 01             	or     ebx,0x1
c000131f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001323:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001326:	89 f3                	mov    ebx,esi
c0001328:	31 c0                	xor    eax,eax
c000132a:	4d                   	dec    ebp
c000132b:	8d 4f 08             	lea    ecx,[edi+0x8]
c000132e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001332:	39 c5                	cmp    ebp,eax
c0001334:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001337:	74 2c                	je     c0001365 <iALLOc+0x193>
c0001339:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000133d:	85 c9                	test   ecx,ecx
c000133f:	75 15                	jne    c0001356 <iALLOc+0x184>
c0001341:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001344:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001347:	b9 10 00 00 00       	mov    ecx,0x10
c000134c:	83 fe 0f             	cmp    esi,0xf
c000134f:	76 05                	jbe    c0001356 <iALLOc+0x184>
c0001351:	83 e6 f8             	and    esi,0xfffffff8
c0001354:	89 f1                	mov    ecx,esi
c0001356:	89 ce                	mov    esi,ecx
c0001358:	29 cb                	sub    ebx,ecx
c000135a:	83 ce 01             	or     esi,0x1
c000135d:	40                   	inc    eax
c000135e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001361:	01 cf                	add    edi,ecx
c0001363:	eb c6                	jmp    c000132b <iALLOc+0x159>
c0001365:	83 cb 01             	or     ebx,0x1
c0001368:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000136b:	eb 08                	jmp    c0001375 <iALLOc+0x1a3>
c000136d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001375:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001379:	83 c4 2c             	add    esp,0x2c
c000137c:	5b                   	pop    ebx
c000137d:	5e                   	pop    esi
c000137e:	5f                   	pop    edi
c000137f:	5d                   	pop    ebp
c0001380:	c3                   	ret    

c0001381 <dlrealloc>:
c0001381:	55                   	push   ebp
c0001382:	57                   	push   edi
c0001383:	56                   	push   esi
c0001384:	53                   	push   ebx
c0001385:	83 ec 1c             	sub    esp,0x1c
c0001388:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000138c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001390:	85 db                	test   ebx,ebx
c0001392:	75 10                	jne    c00013a4 <dlrealloc+0x23>
c0001394:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001398:	83 c4 1c             	add    esp,0x1c
c000139b:	5b                   	pop    ebx
c000139c:	5e                   	pop    esi
c000139d:	5f                   	pop    edi
c000139e:	5d                   	pop    ebp
c000139f:	e9 a0 fa ff ff       	jmp    c0000e44 <dlmalloc>
c00013a4:	83 f8 df             	cmp    eax,0xffffffdf
c00013a7:	76 07                	jbe    c00013b0 <dlrealloc+0x2f>
c00013a9:	31 db                	xor    ebx,ebx
c00013ab:	e9 7c 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c00013b0:	83 c0 0b             	add    eax,0xb
c00013b3:	bf 10 00 00 00       	mov    edi,0x10
c00013b8:	83 f8 0f             	cmp    eax,0xf
c00013bb:	76 05                	jbe    c00013c2 <dlrealloc+0x41>
c00013bd:	83 e0 f8             	and    eax,0xfffffff8
c00013c0:	89 c7                	mov    edi,eax
c00013c2:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00013c5:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00013c8:	89 c6                	mov    esi,eax
c00013ca:	83 e6 fc             	and    esi,0xfffffffc
c00013cd:	a8 02                	test   al,0x2
c00013cf:	75 d8                	jne    c00013a9 <dlrealloc+0x28>
c00013d1:	39 f7                	cmp    edi,esi
c00013d3:	0f 86 15 01 00 00    	jbe    c00014ee <dlrealloc+0x16d>
c00013d9:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00013dd:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00013e0:	39 15 ac 39 02 c0    	cmp    DWORD PTR ds:0xc00239ac,edx
c00013e6:	75 33                	jne    c000141b <dlrealloc+0x9a>
c00013e8:	83 e1 fc             	and    ecx,0xfffffffc
c00013eb:	01 f1                	add    ecx,esi
c00013ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013f1:	8d 4f 10             	lea    ecx,[edi+0x10]
c00013f4:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00013f8:	77 49                	ja     c0001443 <dlrealloc+0xc2>
c00013fa:	01 fd                	add    ebp,edi
c00013fc:	83 e0 01             	and    eax,0x1
c00013ff:	09 f8                	or     eax,edi
c0001401:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001404:	89 2d ac 39 02 c0    	mov    DWORD PTR ds:0xc00239ac,ebp
c000140a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000140e:	29 f8                	sub    eax,edi
c0001410:	83 c8 01             	or     eax,0x1
c0001413:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001416:	e9 11 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c000141b:	89 c8                	mov    eax,ecx
c000141d:	83 e0 fe             	and    eax,0xfffffffe
c0001420:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001425:	75 1c                	jne    c0001443 <dlrealloc+0xc2>
c0001427:	83 e1 fc             	and    ecx,0xfffffffc
c000142a:	01 f1                	add    ecx,esi
c000142c:	39 cf                	cmp    edi,ecx
c000142e:	77 13                	ja     c0001443 <dlrealloc+0xc2>
c0001430:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001433:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001436:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001439:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000143c:	89 ce                	mov    esi,ecx
c000143e:	e9 ab 00 00 00       	jmp    c00014ee <dlrealloc+0x16d>
c0001443:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001447:	8d 47 f9             	lea    eax,[edi-0x7]
c000144a:	83 ec 0c             	sub    esp,0xc
c000144d:	50                   	push   eax
c000144e:	e8 f1 f9 ff ff       	call   c0000e44 <dlmalloc>
c0001453:	83 c4 10             	add    esp,0x10
c0001456:	89 c1                	mov    ecx,eax
c0001458:	85 c0                	test   eax,eax
c000145a:	0f 84 49 ff ff ff    	je     c00013a9 <dlrealloc+0x28>
c0001460:	8d 40 f8             	lea    eax,[eax-0x8]
c0001463:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001467:	39 c2                	cmp    edx,eax
c0001469:	75 0a                	jne    c0001475 <dlrealloc+0xf4>
c000146b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000146e:	83 e0 fc             	and    eax,0xfffffffc
c0001471:	01 c6                	add    esi,eax
c0001473:	eb 79                	jmp    c00014ee <dlrealloc+0x16d>
c0001475:	83 ee 04             	sub    esi,0x4
c0001478:	83 fe 27             	cmp    esi,0x27
c000147b:	76 16                	jbe    c0001493 <dlrealloc+0x112>
c000147d:	50                   	push   eax
c000147e:	56                   	push   esi
c000147f:	53                   	push   ebx
c0001480:	51                   	push   ecx
c0001481:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001485:	e8 48 f1 ff ff       	call   c00005d2 <memcpy>
c000148a:	83 c4 10             	add    esp,0x10
c000148d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001491:	eb 43                	jmp    c00014d6 <dlrealloc+0x155>
c0001493:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001495:	83 fe 13             	cmp    esi,0x13
c0001498:	89 01                	mov    DWORD PTR [ecx],eax
c000149a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000149d:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c00014a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00014a3:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00014a6:	76 2e                	jbe    c00014d6 <dlrealloc+0x155>
c00014a8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00014ab:	83 fe 1b             	cmp    esi,0x1b
c00014ae:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00014b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00014b4:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c00014b7:	76 1d                	jbe    c00014d6 <dlrealloc+0x155>
c00014b9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00014bc:	83 fe 23             	cmp    esi,0x23
c00014bf:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00014c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00014c5:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00014c8:	76 0c                	jbe    c00014d6 <dlrealloc+0x155>
c00014ca:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00014cd:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00014d0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00014d3:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00014d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014da:	83 ec 0c             	sub    esp,0xc
c00014dd:	53                   	push   ebx
c00014de:	e8 06 f6 ff ff       	call   c0000ae9 <dlfree>
c00014e3:	83 c4 10             	add    esp,0x10
c00014e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00014ea:	89 cb                	mov    ebx,ecx
c00014ec:	eb 3e                	jmp    c000152c <dlrealloc+0x1ab>
c00014ee:	89 f2                	mov    edx,esi
c00014f0:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00014f3:	29 fa                	sub    edx,edi
c00014f5:	83 e1 01             	and    ecx,0x1
c00014f8:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00014fc:	83 fa 0f             	cmp    edx,0xf
c00014ff:	77 0b                	ja     c000150c <dlrealloc+0x18b>
c0001501:	09 ce                	or     esi,ecx
c0001503:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001506:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000150a:	eb 20                	jmp    c000152c <dlrealloc+0x1ab>
c000150c:	01 fd                	add    ebp,edi
c000150e:	83 ec 0c             	sub    esp,0xc
c0001511:	09 cf                	or     edi,ecx
c0001513:	83 ca 01             	or     edx,0x1
c0001516:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c0001519:	83 c5 08             	add    ebp,0x8
c000151c:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c000151f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001523:	55                   	push   ebp
c0001524:	e8 c0 f5 ff ff       	call   c0000ae9 <dlfree>
c0001529:	83 c4 10             	add    esp,0x10
c000152c:	83 c4 1c             	add    esp,0x1c
c000152f:	89 d8                	mov    eax,ebx
c0001531:	5b                   	pop    ebx
c0001532:	5e                   	pop    esi
c0001533:	5f                   	pop    edi
c0001534:	5d                   	pop    ebp
c0001535:	c3                   	ret    

c0001536 <dlmemalign>:
c0001536:	55                   	push   ebp
c0001537:	57                   	push   edi
c0001538:	56                   	push   esi
c0001539:	53                   	push   ebx
c000153a:	83 ec 0c             	sub    esp,0xc
c000153d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001541:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001545:	83 fa 08             	cmp    edx,0x8
c0001548:	77 10                	ja     c000155a <dlmemalign+0x24>
c000154a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000154e:	83 c4 0c             	add    esp,0xc
c0001551:	5b                   	pop    ebx
c0001552:	5e                   	pop    esi
c0001553:	5f                   	pop    edi
c0001554:	5d                   	pop    ebp
c0001555:	e9 ea f8 ff ff       	jmp    c0000e44 <dlmalloc>
c000155a:	bf 10 00 00 00       	mov    edi,0x10
c000155f:	83 fa 0f             	cmp    edx,0xf
c0001562:	76 13                	jbe    c0001577 <dlmemalign+0x41>
c0001564:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001567:	85 d1                	test   ecx,edx
c0001569:	75 04                	jne    c000156f <dlmemalign+0x39>
c000156b:	89 d7                	mov    edi,edx
c000156d:	eb 08                	jmp    c0001577 <dlmemalign+0x41>
c000156f:	39 d7                	cmp    edi,edx
c0001571:	73 04                	jae    c0001577 <dlmemalign+0x41>
c0001573:	01 ff                	add    edi,edi
c0001575:	eb f8                	jmp    c000156f <dlmemalign+0x39>
c0001577:	83 f8 df             	cmp    eax,0xffffffdf
c000157a:	76 07                	jbe    c0001583 <dlmemalign+0x4d>
c000157c:	31 c0                	xor    eax,eax
c000157e:	e9 ce 00 00 00       	jmp    c0001651 <dlmemalign+0x11b>
c0001583:	83 c0 0b             	add    eax,0xb
c0001586:	bd 10 00 00 00       	mov    ebp,0x10
c000158b:	83 f8 0f             	cmp    eax,0xf
c000158e:	76 05                	jbe    c0001595 <dlmemalign+0x5f>
c0001590:	83 e0 f8             	and    eax,0xfffffff8
c0001593:	89 c5                	mov    ebp,eax
c0001595:	83 ec 0c             	sub    esp,0xc
c0001598:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000159c:	50                   	push   eax
c000159d:	e8 a2 f8 ff ff       	call   c0000e44 <dlmalloc>
c00015a2:	83 c4 10             	add    esp,0x10
c00015a5:	89 c1                	mov    ecx,eax
c00015a7:	85 c0                	test   eax,eax
c00015a9:	74 d1                	je     c000157c <dlmemalign+0x46>
c00015ab:	31 d2                	xor    edx,edx
c00015ad:	8d 70 f8             	lea    esi,[eax-0x8]
c00015b0:	f7 f7                	div    edi
c00015b2:	85 d2                	test   edx,edx
c00015b4:	74 62                	je     c0001618 <dlmemalign+0xe2>
c00015b6:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00015ba:	89 f8                	mov    eax,edi
c00015bc:	f7 d8                	neg    eax
c00015be:	21 c3                	and    ebx,eax
c00015c0:	83 eb 08             	sub    ebx,0x8
c00015c3:	89 d8                	mov    eax,ebx
c00015c5:	29 f0                	sub    eax,esi
c00015c7:	83 f8 0f             	cmp    eax,0xf
c00015ca:	77 02                	ja     c00015ce <dlmemalign+0x98>
c00015cc:	01 fb                	add    ebx,edi
c00015ce:	89 d8                	mov    eax,ebx
c00015d0:	29 f0                	sub    eax,esi
c00015d2:	89 c6                	mov    esi,eax
c00015d4:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015d7:	89 c2                	mov    edx,eax
c00015d9:	83 e2 fc             	and    edx,0xfffffffc
c00015dc:	29 f2                	sub    edx,esi
c00015de:	a8 02                	test   al,0x2
c00015e0:	74 10                	je     c00015f2 <dlmemalign+0xbc>
c00015e2:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00015e5:	83 ca 02             	or     edx,0x2
c00015e8:	8d 43 08             	lea    eax,[ebx+0x8]
c00015eb:	89 33                	mov    DWORD PTR [ebx],esi
c00015ed:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00015f0:	eb 5f                	jmp    c0001651 <dlmemalign+0x11b>
c00015f2:	83 ec 0c             	sub    esp,0xc
c00015f5:	89 d0                	mov    eax,edx
c00015f7:	83 c8 01             	or     eax,0x1
c00015fa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00015fd:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001602:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001605:	83 e0 01             	and    eax,0x1
c0001608:	09 f0                	or     eax,esi
c000160a:	89 de                	mov    esi,ebx
c000160c:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000160f:	51                   	push   ecx
c0001610:	e8 d4 f4 ff ff       	call   c0000ae9 <dlfree>
c0001615:	83 c4 10             	add    esp,0x10
c0001618:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000161b:	a8 02                	test   al,0x2
c000161d:	75 2f                	jne    c000164e <dlmemalign+0x118>
c000161f:	83 e0 fc             	and    eax,0xfffffffc
c0001622:	8d 55 10             	lea    edx,[ebp+0x10]
c0001625:	39 c2                	cmp    edx,eax
c0001627:	73 25                	jae    c000164e <dlmemalign+0x118>
c0001629:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000162c:	83 ec 0c             	sub    esp,0xc
c000162f:	29 e8                	sub    eax,ebp
c0001631:	83 c2 08             	add    edx,0x8
c0001634:	83 c8 01             	or     eax,0x1
c0001637:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000163a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000163d:	83 e0 01             	and    eax,0x1
c0001640:	09 c5                	or     ebp,eax
c0001642:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001645:	52                   	push   edx
c0001646:	e8 9e f4 ff ff       	call   c0000ae9 <dlfree>
c000164b:	83 c4 10             	add    esp,0x10
c000164e:	8d 46 08             	lea    eax,[esi+0x8]
c0001651:	83 c4 0c             	add    esp,0xc
c0001654:	5b                   	pop    ebx
c0001655:	5e                   	pop    esi
c0001656:	5f                   	pop    edi
c0001657:	5d                   	pop    ebp
c0001658:	c3                   	ret    

c0001659 <dlcalloc>:
c0001659:	53                   	push   ebx
c000165a:	83 ec 14             	sub    esp,0x14
c000165d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001661:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001666:	50                   	push   eax
c0001667:	e8 d8 f7 ff ff       	call   c0000e44 <dlmalloc>
c000166c:	83 c4 10             	add    esp,0x10
c000166f:	89 c3                	mov    ebx,eax
c0001671:	85 c0                	test   eax,eax
c0001673:	74 77                	je     c00016ec <dlcalloc+0x93>
c0001675:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001678:	89 d0                	mov    eax,edx
c000167a:	83 e0 fc             	and    eax,0xfffffffc
c000167d:	80 e2 02             	and    dl,0x2
c0001680:	75 5a                	jne    c00016dc <dlcalloc+0x83>
c0001682:	83 e8 04             	sub    eax,0x4
c0001685:	83 f8 27             	cmp    eax,0x27
c0001688:	76 03                	jbe    c000168d <dlcalloc+0x34>
c000168a:	51                   	push   ecx
c000168b:	eb 53                	jmp    c00016e0 <dlcalloc+0x87>
c000168d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001693:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000169a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00016a1:	83 f8 13             	cmp    eax,0x13
c00016a4:	76 46                	jbe    c00016ec <dlcalloc+0x93>
c00016a6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00016ad:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00016b4:	83 f8 1b             	cmp    eax,0x1b
c00016b7:	76 33                	jbe    c00016ec <dlcalloc+0x93>
c00016b9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00016c0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00016c7:	83 f8 23             	cmp    eax,0x23
c00016ca:	76 20                	jbe    c00016ec <dlcalloc+0x93>
c00016cc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00016d3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00016da:	eb 10                	jmp    c00016ec <dlcalloc+0x93>
c00016dc:	83 e8 08             	sub    eax,0x8
c00016df:	52                   	push   edx
c00016e0:	50                   	push   eax
c00016e1:	6a 00                	push   0x0
c00016e3:	53                   	push   ebx
c00016e4:	e8 1f ef ff ff       	call   c0000608 <memset>
c00016e9:	83 c4 10             	add    esp,0x10
c00016ec:	89 d8                	mov    eax,ebx
c00016ee:	83 c4 08             	add    esp,0x8
c00016f1:	5b                   	pop    ebx
c00016f2:	c3                   	ret    

c00016f3 <dlcfree>:
c00016f3:	e9 f1 f3 ff ff       	jmp    c0000ae9 <dlfree>

c00016f8 <dlindependent_calloc>:
c00016f8:	83 ec 28             	sub    esp,0x28
c00016fb:	b9 03 00 00 00       	mov    ecx,0x3
c0001700:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001704:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001708:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000170c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001710:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001714:	e8 b9 fa ff ff       	call   c00011d2 <iALLOc>
c0001719:	83 c4 2c             	add    esp,0x2c
c000171c:	c3                   	ret    

c000171d <dlindependent_comalloc>:
c000171d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001721:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001725:	31 c9                	xor    ecx,ecx
c0001727:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000172b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000172f:	e9 9e fa ff ff       	jmp    c00011d2 <iALLOc>

c0001734 <dlvalloc>:
c0001734:	83 ec 0c             	sub    esp,0xc
c0001737:	83 3d 80 39 02 c0 00 	cmp    DWORD PTR ds:0xc0023980,0x0
c000173e:	75 0a                	jne    c000174a <dlvalloc+0x16>
c0001740:	b8 80 39 02 c0       	mov    eax,0xc0023980
c0001745:	e8 b8 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000174a:	50                   	push   eax
c000174b:	50                   	push   eax
c000174c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001750:	ff 35 dc 3c 02 c0    	push   DWORD PTR ds:0xc0023cdc
c0001756:	e8 db fd ff ff       	call   c0001536 <dlmemalign>
c000175b:	83 c4 1c             	add    esp,0x1c
c000175e:	c3                   	ret    

c000175f <dlpvalloc>:
c000175f:	83 ec 0c             	sub    esp,0xc
c0001762:	83 3d 80 39 02 c0 00 	cmp    DWORD PTR ds:0xc0023980,0x0
c0001769:	75 0a                	jne    c0001775 <dlpvalloc+0x16>
c000176b:	b8 80 39 02 c0       	mov    eax,0xc0023980
c0001770:	e8 8d f2 ff ff       	call   c0000a02 <malloc_consolidate>
c0001775:	a1 dc 3c 02 c0       	mov    eax,ds:0xc0023cdc
c000177a:	89 c1                	mov    ecx,eax
c000177c:	52                   	push   edx
c000177d:	f7 d9                	neg    ecx
c000177f:	52                   	push   edx
c0001780:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001784:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001788:	21 ca                	and    edx,ecx
c000178a:	52                   	push   edx
c000178b:	50                   	push   eax
c000178c:	e8 a5 fd ff ff       	call   c0001536 <dlmemalign>
c0001791:	83 c4 1c             	add    esp,0x1c
c0001794:	c3                   	ret    

c0001795 <dlmalloc_trim>:
c0001795:	b8 80 39 02 c0       	mov    eax,0xc0023980
c000179a:	e8 63 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000179f:	31 c0                	xor    eax,eax
c00017a1:	c3                   	ret    

c00017a2 <dlmalloc_usable_size>:
c00017a2:	53                   	push   ebx
c00017a3:	31 c0                	xor    eax,eax
c00017a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00017a9:	85 c9                	test   ecx,ecx
c00017ab:	74 24                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017ad:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00017b0:	f6 c2 02             	test   dl,0x2
c00017b3:	74 08                	je     c00017bd <dlmalloc_usable_size+0x1b>
c00017b5:	83 e2 fc             	and    edx,0xfffffffc
c00017b8:	8d 42 f8             	lea    eax,[edx-0x8]
c00017bb:	eb 14                	jmp    c00017d1 <dlmalloc_usable_size+0x2f>
c00017bd:	89 d3                	mov    ebx,edx
c00017bf:	31 c0                	xor    eax,eax
c00017c1:	83 e3 fe             	and    ebx,0xfffffffe
c00017c4:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00017c9:	74 06                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017cb:	83 e2 fc             	and    edx,0xfffffffc
c00017ce:	8d 42 fc             	lea    eax,[edx-0x4]
c00017d1:	5b                   	pop    ebx
c00017d2:	c3                   	ret    

c00017d3 <dlmallinfo>:
c00017d3:	55                   	push   ebp
c00017d4:	57                   	push   edi
c00017d5:	56                   	push   esi
c00017d6:	53                   	push   ebx
c00017d7:	83 ec 08             	sub    esp,0x8
c00017da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00017de:	83 3d ac 39 02 c0 00 	cmp    DWORD PTR ds:0xc00239ac,0x0
c00017e5:	75 0a                	jne    c00017f1 <dlmallinfo+0x1e>
c00017e7:	b8 80 39 02 c0       	mov    eax,0xc0023980
c00017ec:	e8 11 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c00017f1:	a1 ac 39 02 c0       	mov    eax,ds:0xc00239ac
c00017f6:	31 ed                	xor    ebp,ebp
c00017f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00017fb:	31 c9                	xor    ecx,ecx
c00017fd:	83 e0 fc             	and    eax,0xfffffffc
c0001800:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001804:	31 c0                	xor    eax,eax
c0001806:	8b 14 85 84 39 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc67c]
c000180d:	85 d2                	test   edx,edx
c000180f:	74 0e                	je     c000181f <dlmallinfo+0x4c>
c0001811:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001814:	45                   	inc    ebp
c0001815:	83 e6 fc             	and    esi,0xfffffffc
c0001818:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000181b:	01 f1                	add    ecx,esi
c000181d:	eb ee                	jmp    c000180d <dlmallinfo+0x3a>
c000181f:	40                   	inc    eax
c0001820:	83 f8 0a             	cmp    eax,0xa
c0001823:	75 e1                	jne    c0001806 <dlmallinfo+0x33>
c0001825:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001829:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001830:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001833:	b8 b4 39 02 c0       	mov    eax,0xc00239b4
c0001838:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c000183b:	39 f0                	cmp    eax,esi
c000183d:	74 10                	je     c000184f <dlmallinfo+0x7c>
c000183f:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001842:	ff 04 24             	inc    DWORD PTR [esp]
c0001845:	83 e7 fc             	and    edi,0xfffffffc
c0001848:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c000184b:	01 fa                	add    edx,edi
c000184d:	eb ec                	jmp    c000183b <dlmallinfo+0x68>
c000184f:	83 c0 08             	add    eax,0x8
c0001852:	3d ac 3c 02 c0       	cmp    eax,0xc0023cac
c0001857:	75 df                	jne    c0001838 <dlmallinfo+0x65>
c0001859:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000185c:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000185f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001862:	a1 e8 3c 02 c0       	mov    eax,ds:0xc0023ce8
c0001867:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000186a:	89 03                	mov    DWORD PTR [ebx],eax
c000186c:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000186f:	8b 35 d0 3c 02 c0    	mov    esi,DWORD PTR ds:0xc0023cd0
c0001875:	29 d0                	sub    eax,edx
c0001877:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000187a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000187d:	8b 35 e4 3c 02 c0    	mov    esi,DWORD PTR ds:0xc0023ce4
c0001883:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001887:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000188a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000188d:	8b 35 f4 3c 02 c0    	mov    esi,DWORD PTR ds:0xc0023cf4
c0001893:	89 d8                	mov    eax,ebx
c0001895:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001898:	83 c4 08             	add    esp,0x8
c000189b:	5b                   	pop    ebx
c000189c:	5e                   	pop    esi
c000189d:	5f                   	pop    edi
c000189e:	5d                   	pop    ebp
c000189f:	c2 04 00             	ret    0x4

c00018a2 <dlmalloc_stats>:
c00018a2:	83 ec 30             	sub    esp,0x30
c00018a5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00018a9:	50                   	push   eax
c00018aa:	e8 24 ff ff ff       	call   c00017d3 <dlmallinfo>
c00018af:	83 c4 30             	add    esp,0x30
c00018b2:	c3                   	ret    

c00018b3 <dlmallopt>:
c00018b3:	56                   	push   esi
c00018b4:	b8 80 39 02 c0       	mov    eax,0xc0023980
c00018b9:	53                   	push   ebx
c00018ba:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00018c2:	e8 3b f1 ff ff       	call   c0000a02 <malloc_consolidate>
c00018c7:	8d 46 04             	lea    eax,[esi+0x4]
c00018ca:	83 f8 05             	cmp    eax,0x5
c00018cd:	77 67                	ja     c0001936 <dlmallopt+0x83>
c00018cf:	ff 24 85 44 fa 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe05bc]
c00018d6:	83 fb 50             	cmp    ebx,0x50
c00018d9:	77 5b                	ja     c0001936 <dlmallopt+0x83>
c00018db:	ba 08 00 00 00       	mov    edx,0x8
c00018e0:	85 db                	test   ebx,ebx
c00018e2:	74 12                	je     c00018f6 <dlmallopt+0x43>
c00018e4:	83 c3 0b             	add    ebx,0xb
c00018e7:	ba 10 00 00 00       	mov    edx,0x10
c00018ec:	83 fb 0f             	cmp    ebx,0xf
c00018ef:	76 05                	jbe    c00018f6 <dlmallopt+0x43>
c00018f1:	89 da                	mov    edx,ebx
c00018f3:	83 e2 f8             	and    edx,0xfffffff8
c00018f6:	a1 80 39 02 c0       	mov    eax,ds:0xc0023980
c00018fb:	83 e0 03             	and    eax,0x3
c00018fe:	09 d0                	or     eax,edx
c0001900:	a3 80 39 02 c0       	mov    ds:0xc0023980,eax
c0001905:	eb 31                	jmp    c0001938 <dlmallopt+0x85>
c0001907:	89 1d c4 3c 02 c0    	mov    DWORD PTR ds:0xc0023cc4,ebx
c000190d:	eb 06                	jmp    c0001915 <dlmallopt+0x62>
c000190f:	89 1d c8 3c 02 c0    	mov    DWORD PTR ds:0xc0023cc8,ebx
c0001915:	be 01 00 00 00       	mov    esi,0x1
c000191a:	eb 1c                	jmp    c0001938 <dlmallopt+0x85>
c000191c:	89 1d cc 3c 02 c0    	mov    DWORD PTR ds:0xc0023ccc,ebx
c0001922:	eb f1                	jmp    c0001915 <dlmallopt+0x62>
c0001924:	31 f6                	xor    esi,esi
c0001926:	85 db                	test   ebx,ebx
c0001928:	75 0e                	jne    c0001938 <dlmallopt+0x85>
c000192a:	c7 05 d4 3c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023cd4,0x0
c0001934:	eb df                	jmp    c0001915 <dlmallopt+0x62>
c0001936:	31 f6                	xor    esi,esi
c0001938:	89 f0                	mov    eax,esi
c000193a:	5b                   	pop    ebx
c000193b:	5e                   	pop    esi
c000193c:	c3                   	ret    

c000193d <disk_status>:
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <disk_initialize>:
c0001940:	31 c0                	xor    eax,eax
c0001942:	c3                   	ret    

c0001943 <disk_read>:
c0001943:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001948:	0f b6 04 85 a0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad60]
c0001950:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001954:	e9 83 85 01 00       	jmp    c0019edc <fatWrapperReadDisk>

c0001959 <disk_write>:
c0001959:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000195e:	0f b6 04 85 a0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad60]
c0001966:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000196a:	e9 b4 85 01 00       	jmp    c0019f23 <fatWrapperWriteDisk>

c000196f <disk_ioctl>:
c000196f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001978:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000197d:	0f b6 04 85 a0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad60]
c0001985:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001989:	e9 dc 85 01 00       	jmp    c0019f6a <fatWrapperIoctl>

c000198e <ld_word>:
c000198e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001992:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001995:	c1 e2 08             	shl    edx,0x8
c0001998:	09 d0                	or     eax,edx
c000199a:	c3                   	ret    

c000199b <ld_dword>:
c000199b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c000199f:	89 d1                	mov    ecx,edx
c00019a1:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019a5:	c1 e1 08             	shl    ecx,0x8
c00019a8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019ab:	09 ca                	or     edx,ecx
c00019ad:	c1 e2 08             	shl    edx,0x8
c00019b0:	09 d0                	or     eax,edx
c00019b2:	c3                   	ret    

c00019b3 <ld_qword>:
c00019b3:	57                   	push   edi
c00019b4:	56                   	push   esi
c00019b5:	53                   	push   ebx
c00019b6:	31 db                	xor    ebx,ebx
c00019b8:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00019bb:	89 df                	mov    edi,ebx
c00019bd:	89 ce                	mov    esi,ecx
c00019bf:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00019c3:	0f a4 f7 08          	shld   edi,esi,0x8
c00019c7:	c1 e6 08             	shl    esi,0x8
c00019ca:	09 f2                	or     edx,esi
c00019cc:	89 d6                	mov    esi,edx
c00019ce:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00019d2:	0f a4 f7 08          	shld   edi,esi,0x8
c00019d6:	c1 e6 08             	shl    esi,0x8
c00019d9:	09 f2                	or     edx,esi
c00019db:	89 d6                	mov    esi,edx
c00019dd:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019e1:	0f a4 f7 08          	shld   edi,esi,0x8
c00019e5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019e8:	c1 e6 08             	shl    esi,0x8
c00019eb:	89 fb                	mov    ebx,edi
c00019ed:	09 f2                	or     edx,esi
c00019ef:	89 d1                	mov    ecx,edx
c00019f1:	0f a4 cb 08          	shld   ebx,ecx,0x8
c00019f5:	c1 e1 08             	shl    ecx,0x8
c00019f8:	89 da                	mov    edx,ebx
c00019fa:	09 c8                	or     eax,ecx
c00019fc:	5b                   	pop    ebx
c00019fd:	5e                   	pop    esi
c00019fe:	5f                   	pop    edi
c00019ff:	c3                   	ret    

c0001a00 <st_word>:
c0001a00:	66 89 10             	mov    WORD PTR [eax],dx
c0001a03:	c3                   	ret    

c0001a04 <st_dword>:
c0001a04:	89 10                	mov    DWORD PTR [eax],edx
c0001a06:	c3                   	ret    

c0001a07 <st_qword>:
c0001a07:	89 10                	mov    DWORD PTR [eax],edx
c0001a09:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a0c:	c3                   	ret    

c0001a0d <mem_cpy>:
c0001a0d:	85 c9                	test   ecx,ecx
c0001a0f:	74 10                	je     c0001a21 <mem_cpy+0x14>
c0001a11:	57                   	push   edi
c0001a12:	01 c1                	add    ecx,eax
c0001a14:	56                   	push   esi
c0001a15:	89 c7                	mov    edi,eax
c0001a17:	89 d6                	mov    esi,edx
c0001a19:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a1a:	39 f9                	cmp    ecx,edi
c0001a1c:	75 fb                	jne    c0001a19 <mem_cpy+0xc>
c0001a1e:	5e                   	pop    esi
c0001a1f:	5f                   	pop    edi
c0001a20:	c3                   	ret    
c0001a21:	c3                   	ret    

c0001a22 <mem_set>:
c0001a22:	01 c1                	add    ecx,eax
c0001a24:	40                   	inc    eax
c0001a25:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a28:	39 c8                	cmp    eax,ecx
c0001a2a:	75 f8                	jne    c0001a24 <mem_set+0x2>
c0001a2c:	c3                   	ret    

c0001a2d <mem_cmp>:
c0001a2d:	57                   	push   edi
c0001a2e:	56                   	push   esi
c0001a2f:	89 c6                	mov    esi,eax
c0001a31:	53                   	push   ebx
c0001a32:	46                   	inc    esi
c0001a33:	42                   	inc    edx
c0001a34:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001a38:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001a3c:	29 fb                	sub    ebx,edi
c0001a3e:	89 cf                	mov    edi,ecx
c0001a40:	29 f7                	sub    edi,esi
c0001a42:	01 c7                	add    edi,eax
c0001a44:	74 04                	je     c0001a4a <mem_cmp+0x1d>
c0001a46:	85 db                	test   ebx,ebx
c0001a48:	74 e8                	je     c0001a32 <mem_cmp+0x5>
c0001a4a:	89 d8                	mov    eax,ebx
c0001a4c:	5b                   	pop    ebx
c0001a4d:	5e                   	pop    esi
c0001a4e:	5f                   	pop    edi
c0001a4f:	c3                   	ret    

c0001a50 <chk_chr>:
c0001a50:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001a53:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001a56:	74 07                	je     c0001a5f <chk_chr+0xf>
c0001a58:	39 d1                	cmp    ecx,edx
c0001a5a:	74 03                	je     c0001a5f <chk_chr+0xf>
c0001a5c:	40                   	inc    eax
c0001a5d:	eb f1                	jmp    c0001a50 <chk_chr>
c0001a5f:	89 c8                	mov    eax,ecx
c0001a61:	c3                   	ret    

c0001a62 <dbc_1st>:
c0001a62:	31 c0                	xor    eax,eax
c0001a64:	c3                   	ret    

c0001a65 <dbc_2nd>:
c0001a65:	31 c0                	xor    eax,eax
c0001a67:	c3                   	ret    

c0001a68 <tchar2uni>:
c0001a68:	57                   	push   edi
c0001a69:	89 c7                	mov    edi,eax
c0001a6b:	56                   	push   esi
c0001a6c:	53                   	push   ebx
c0001a6d:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001a6f:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001a71:	8d 73 01             	lea    esi,[ebx+0x1]
c0001a74:	84 c9                	test   cl,cl
c0001a76:	78 0a                	js     c0001a82 <tchar2uni+0x1a>
c0001a78:	0f b6 d1             	movzx  edx,cl
c0001a7b:	89 f3                	mov    ebx,esi
c0001a7d:	e9 9f 00 00 00       	jmp    c0001b21 <tchar2uni+0xb9>
c0001a82:	88 ca                	mov    dl,cl
c0001a84:	83 e2 e0             	and    edx,0xffffffe0
c0001a87:	80 fa c0             	cmp    dl,0xc0
c0001a8a:	75 0c                	jne    c0001a98 <tchar2uni+0x30>
c0001a8c:	89 ca                	mov    edx,ecx
c0001a8e:	b9 01 00 00 00       	mov    ecx,0x1
c0001a93:	83 e2 1f             	and    edx,0x1f
c0001a96:	eb 2e                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001a98:	88 ca                	mov    dl,cl
c0001a9a:	83 e2 f0             	and    edx,0xfffffff0
c0001a9d:	80 fa e0             	cmp    dl,0xe0
c0001aa0:	75 0c                	jne    c0001aae <tchar2uni+0x46>
c0001aa2:	89 ca                	mov    edx,ecx
c0001aa4:	b9 02 00 00 00       	mov    ecx,0x2
c0001aa9:	83 e2 0f             	and    edx,0xf
c0001aac:	eb 18                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001aae:	88 ca                	mov    dl,cl
c0001ab0:	83 e2 f8             	and    edx,0xfffffff8
c0001ab3:	88 d0                	mov    al,dl
c0001ab5:	83 ca ff             	or     edx,0xffffffff
c0001ab8:	3c f0                	cmp    al,0xf0
c0001aba:	75 6c                	jne    c0001b28 <tchar2uni+0xc0>
c0001abc:	89 ca                	mov    edx,ecx
c0001abe:	b9 03 00 00 00       	mov    ecx,0x3
c0001ac3:	83 e2 07             	and    edx,0x7
c0001ac6:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001aca:	46                   	inc    esi
c0001acb:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ace:	88 c8                	mov    al,cl
c0001ad0:	83 e0 c0             	and    eax,0xffffffc0
c0001ad3:	3c 80                	cmp    al,0x80
c0001ad5:	75 4e                	jne    c0001b25 <tchar2uni+0xbd>
c0001ad7:	c1 e2 06             	shl    edx,0x6
c0001ada:	83 e1 3f             	and    ecx,0x3f
c0001add:	09 ca                	or     edx,ecx
c0001adf:	39 de                	cmp    esi,ebx
c0001ae1:	75 e7                	jne    c0001aca <tchar2uni+0x62>
c0001ae3:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ae6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001aec:	77 37                	ja     c0001b25 <tchar2uni+0xbd>
c0001aee:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001af4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001afa:	76 29                	jbe    c0001b25 <tchar2uni+0xbd>
c0001afc:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b02:	76 1d                	jbe    c0001b21 <tchar2uni+0xb9>
c0001b04:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b0a:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b10:	c1 e1 06             	shl    ecx,0x6
c0001b13:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b19:	09 ca                	or     edx,ecx
c0001b1b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b21:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b23:	eb 03                	jmp    c0001b28 <tchar2uni+0xc0>
c0001b25:	83 ca ff             	or     edx,0xffffffff
c0001b28:	5b                   	pop    ebx
c0001b29:	89 d0                	mov    eax,edx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	c3                   	ret    

c0001b2e <put_utf>:
c0001b2e:	53                   	push   ebx
c0001b2f:	83 f8 7f             	cmp    eax,0x7f
c0001b32:	89 c3                	mov    ebx,eax
c0001b34:	b0 00                	mov    al,0x0
c0001b36:	77 11                	ja     c0001b49 <put_utf+0x1b>
c0001b38:	85 c9                	test   ecx,ecx
c0001b3a:	0f 84 e5 00 00 00    	je     c0001c25 <put_utf+0xf7>
c0001b40:	88 1a                	mov    BYTE PTR [edx],bl
c0001b42:	b0 01                	mov    al,0x1
c0001b44:	e9 dc 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b49:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001b4f:	77 23                	ja     c0001b74 <put_utf+0x46>
c0001b51:	83 f9 01             	cmp    ecx,0x1
c0001b54:	0f 86 cb 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b5a:	89 d8                	mov    eax,ebx
c0001b5c:	83 e3 3f             	and    ebx,0x3f
c0001b5f:	c1 e8 06             	shr    eax,0x6
c0001b62:	83 cb 80             	or     ebx,0xffffff80
c0001b65:	83 c8 c0             	or     eax,0xffffffc0
c0001b68:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001b6b:	88 02                	mov    BYTE PTR [edx],al
c0001b6d:	b0 02                	mov    al,0x2
c0001b6f:	e9 b1 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b74:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001b7a:	77 40                	ja     c0001bbc <put_utf+0x8e>
c0001b7c:	83 f9 02             	cmp    ecx,0x2
c0001b7f:	0f 86 a0 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b85:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001b8b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b91:	0f 86 8e 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b97:	89 d8                	mov    eax,ebx
c0001b99:	c1 e8 0c             	shr    eax,0xc
c0001b9c:	83 c8 e0             	or     eax,0xffffffe0
c0001b9f:	88 02                	mov    BYTE PTR [edx],al
c0001ba1:	89 d8                	mov    eax,ebx
c0001ba3:	83 e3 3f             	and    ebx,0x3f
c0001ba6:	c1 e8 06             	shr    eax,0x6
c0001ba9:	83 cb 80             	or     ebx,0xffffff80
c0001bac:	83 e0 3f             	and    eax,0x3f
c0001baf:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001bb2:	83 c8 80             	or     eax,0xffffff80
c0001bb5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001bb8:	b0 03                	mov    al,0x3
c0001bba:	eb 69                	jmp    c0001c25 <put_utf+0xf7>
c0001bbc:	83 f9 03             	cmp    ecx,0x3
c0001bbf:	76 64                	jbe    c0001c25 <put_utf+0xf7>
c0001bc1:	89 d9                	mov    ecx,ebx
c0001bc3:	0f b7 c3             	movzx  eax,bx
c0001bc6:	66 31 c9             	xor    cx,cx
c0001bc9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001bcf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001bd5:	c1 e9 06             	shr    ecx,0x6
c0001bd8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001bde:	77 43                	ja     c0001c23 <put_utf+0xf5>
c0001be0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001be6:	77 3b                	ja     c0001c23 <put_utf+0xf5>
c0001be8:	09 cb                	or     ebx,ecx
c0001bea:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001bf0:	89 d8                	mov    eax,ebx
c0001bf2:	c1 e8 12             	shr    eax,0x12
c0001bf5:	83 c8 f0             	or     eax,0xfffffff0
c0001bf8:	88 02                	mov    BYTE PTR [edx],al
c0001bfa:	89 d8                	mov    eax,ebx
c0001bfc:	c1 e8 0c             	shr    eax,0xc
c0001bff:	83 e0 3f             	and    eax,0x3f
c0001c02:	83 c8 80             	or     eax,0xffffff80
c0001c05:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c08:	89 d8                	mov    eax,ebx
c0001c0a:	83 e3 3f             	and    ebx,0x3f
c0001c0d:	c1 e8 06             	shr    eax,0x6
c0001c10:	83 cb 80             	or     ebx,0xffffff80
c0001c13:	83 e0 3f             	and    eax,0x3f
c0001c16:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c19:	83 c8 80             	or     eax,0xffffff80
c0001c1c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c1f:	b0 04                	mov    al,0x4
c0001c21:	eb 02                	jmp    c0001c25 <put_utf+0xf7>
c0001c23:	31 c0                	xor    eax,eax
c0001c25:	5b                   	pop    ebx
c0001c26:	c3                   	ret    

c0001c27 <clst2sect>:
c0001c27:	89 c1                	mov    ecx,eax
c0001c29:	83 ea 02             	sub    edx,0x2
c0001c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001c2f:	83 e8 02             	sub    eax,0x2
c0001c32:	39 d0                	cmp    eax,edx
c0001c34:	76 0d                	jbe    c0001c43 <clst2sect+0x1c>
c0001c36:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001c3a:	f7 e2                	mul    edx
c0001c3c:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001c3f:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001c42:	c3                   	ret    
c0001c43:	31 c0                	xor    eax,eax
c0001c45:	31 d2                	xor    edx,edx
c0001c47:	c3                   	ret    

c0001c48 <clmt_clust>:
c0001c48:	57                   	push   edi
c0001c49:	89 cf                	mov    edi,ecx
c0001c4b:	56                   	push   esi
c0001c4c:	89 d6                	mov    esi,edx
c0001c4e:	53                   	push   ebx
c0001c4f:	0f ac fe 09          	shrd   esi,edi,0x9
c0001c53:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001c56:	89 f2                	mov    edx,esi
c0001c58:	8b 00                	mov    eax,DWORD PTR [eax]
c0001c5a:	c1 ef 09             	shr    edi,0x9
c0001c5d:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001c61:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001c64:	89 f9                	mov    ecx,edi
c0001c66:	31 ff                	xor    edi,edi
c0001c68:	57                   	push   edi
c0001c69:	56                   	push   esi
c0001c6a:	51                   	push   ecx
c0001c6b:	52                   	push   edx
c0001c6c:	e8 bb ce 01 00       	call   c001eb2c <__udivdi3>
c0001c71:	83 c4 10             	add    esp,0x10
c0001c74:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001c76:	85 d2                	test   edx,edx
c0001c78:	74 10                	je     c0001c8a <clmt_clust+0x42>
c0001c7a:	39 d0                	cmp    eax,edx
c0001c7c:	72 07                	jb     c0001c85 <clmt_clust+0x3d>
c0001c7e:	29 d0                	sub    eax,edx
c0001c80:	83 c3 08             	add    ebx,0x8
c0001c83:	eb ef                	jmp    c0001c74 <clmt_clust+0x2c>
c0001c85:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001c88:	89 c2                	mov    edx,eax
c0001c8a:	5b                   	pop    ebx
c0001c8b:	89 d0                	mov    eax,edx
c0001c8d:	5e                   	pop    esi
c0001c8e:	5f                   	pop    edi
c0001c8f:	c3                   	ret    

c0001c90 <pick_lfn>:
c0001c90:	55                   	push   ebp
c0001c91:	57                   	push   edi
c0001c92:	56                   	push   esi
c0001c93:	89 d6                	mov    esi,edx
c0001c95:	53                   	push   ebx
c0001c96:	89 c3                	mov    ebx,eax
c0001c98:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001c9b:	e8 ee fc ff ff       	call   c000198e <ld_word>
c0001ca0:	66 85 c0             	test   ax,ax
c0001ca3:	74 04                	je     c0001ca9 <pick_lfn+0x19>
c0001ca5:	31 c0                	xor    eax,eax
c0001ca7:	eb 5c                	jmp    c0001d05 <pick_lfn+0x75>
c0001ca9:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001cac:	bd 01 00 00 00       	mov    ebp,0x1
c0001cb1:	83 e1 bf             	and    ecx,0xffffffbf
c0001cb4:	31 ff                	xor    edi,edi
c0001cb6:	49                   	dec    ecx
c0001cb7:	6b c9 0d             	imul   ecx,ecx,0xd
c0001cba:	0f b6 87 60 fb 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe04a0]
c0001cc1:	01 f0                	add    eax,esi
c0001cc3:	e8 c6 fc ff ff       	call   c000198e <ld_word>
c0001cc8:	66 85 ed             	test   bp,bp
c0001ccb:	74 11                	je     c0001cde <pick_lfn+0x4e>
c0001ccd:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cd3:	77 d0                	ja     c0001ca5 <pick_lfn+0x15>
c0001cd5:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001cd9:	89 c5                	mov    ebp,eax
c0001cdb:	41                   	inc    ecx
c0001cdc:	eb 04                	jmp    c0001ce2 <pick_lfn+0x52>
c0001cde:	66 40                	inc    ax
c0001ce0:	75 c3                	jne    c0001ca5 <pick_lfn+0x15>
c0001ce2:	47                   	inc    edi
c0001ce3:	83 ff 0d             	cmp    edi,0xd
c0001ce6:	75 d2                	jne    c0001cba <pick_lfn+0x2a>
c0001ce8:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ceb:	74 13                	je     c0001d00 <pick_lfn+0x70>
c0001ced:	66 85 ed             	test   bp,bp
c0001cf0:	74 0e                	je     c0001d00 <pick_lfn+0x70>
c0001cf2:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cf8:	77 ab                	ja     c0001ca5 <pick_lfn+0x15>
c0001cfa:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d00:	b8 01 00 00 00       	mov    eax,0x1
c0001d05:	5b                   	pop    ebx
c0001d06:	5e                   	pop    esi
c0001d07:	5f                   	pop    edi
c0001d08:	5d                   	pop    ebp
c0001d09:	c3                   	ret    

c0001d0a <put_lfn>:
c0001d0a:	55                   	push   ebp
c0001d0b:	31 ed                	xor    ebp,ebp
c0001d0d:	57                   	push   edi
c0001d0e:	89 d7                	mov    edi,edx
c0001d10:	56                   	push   esi
c0001d11:	31 f6                	xor    esi,esi
c0001d13:	53                   	push   ebx
c0001d14:	83 ec 08             	sub    esp,0x8
c0001d17:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d1a:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d22:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d28:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001d2b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d2e:	31 d2                	xor    edx,edx
c0001d30:	e8 cb fc ff ff       	call   c0001a00 <st_word>
c0001d35:	0f b6 d9             	movzx  ebx,cl
c0001d38:	4b                   	dec    ebx
c0001d39:	6b db 0d             	imul   ebx,ebx,0xd
c0001d3c:	66 83 fe ff          	cmp    si,0xffff
c0001d40:	74 08                	je     c0001d4a <put_lfn+0x40>
c0001d42:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d45:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001d49:	43                   	inc    ebx
c0001d4a:	0f b6 85 60 fb 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe04a0]
c0001d51:	0f b7 d6             	movzx  edx,si
c0001d54:	01 f8                	add    eax,edi
c0001d56:	e8 a5 fc ff ff       	call   c0001a00 <st_word>
c0001d5b:	66 85 f6             	test   si,si
c0001d5e:	75 03                	jne    c0001d63 <put_lfn+0x59>
c0001d60:	83 ce ff             	or     esi,0xffffffff
c0001d63:	45                   	inc    ebp
c0001d64:	83 fd 0d             	cmp    ebp,0xd
c0001d67:	75 d3                	jne    c0001d3c <put_lfn+0x32>
c0001d69:	66 46                	inc    si
c0001d6b:	74 0a                	je     c0001d77 <put_lfn+0x6d>
c0001d6d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001d75:	75 09                	jne    c0001d80 <put_lfn+0x76>
c0001d77:	88 c8                	mov    al,cl
c0001d79:	83 c8 40             	or     eax,0x40
c0001d7c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001d80:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001d84:	88 07                	mov    BYTE PTR [edi],al
c0001d86:	83 c4 08             	add    esp,0x8
c0001d89:	5b                   	pop    ebx
c0001d8a:	5e                   	pop    esi
c0001d8b:	5f                   	pop    edi
c0001d8c:	5d                   	pop    ebp
c0001d8d:	c3                   	ret    

c0001d8e <gen_numname>:
c0001d8e:	57                   	push   edi
c0001d8f:	89 cf                	mov    edi,ecx
c0001d91:	56                   	push   esi
c0001d92:	b9 0b 00 00 00       	mov    ecx,0xb
c0001d97:	53                   	push   ebx
c0001d98:	89 c6                	mov    esi,eax
c0001d9a:	83 ec 10             	sub    esp,0x10
c0001d9d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001da1:	e8 67 fc ff ff       	call   c0001a0d <mem_cpy>
c0001da6:	83 fb 05             	cmp    ebx,0x5
c0001da9:	76 2d                	jbe    c0001dd8 <gen_numname+0x4a>
c0001dab:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001dae:	66 85 c0             	test   ax,ax
c0001db1:	74 25                	je     c0001dd8 <gen_numname+0x4a>
c0001db3:	83 c7 02             	add    edi,0x2
c0001db6:	ba 10 00 00 00       	mov    edx,0x10
c0001dbb:	01 db                	add    ebx,ebx
c0001dbd:	89 c1                	mov    ecx,eax
c0001dbf:	66 d1 e8             	shr    ax,1
c0001dc2:	83 e1 01             	and    ecx,0x1
c0001dc5:	01 cb                	add    ebx,ecx
c0001dc7:	0f ba e3 10          	bt     ebx,0x10
c0001dcb:	73 06                	jae    c0001dd3 <gen_numname+0x45>
c0001dcd:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001dd3:	4a                   	dec    edx
c0001dd4:	75 e5                	jne    c0001dbb <gen_numname+0x2d>
c0001dd6:	eb d3                	jmp    c0001dab <gen_numname+0x1d>
c0001dd8:	b8 07 00 00 00       	mov    eax,0x7
c0001ddd:	88 d9                	mov    cl,bl
c0001ddf:	83 e1 0f             	and    ecx,0xf
c0001de2:	8d 51 30             	lea    edx,[ecx+0x30]
c0001de5:	80 fa 39             	cmp    dl,0x39
c0001de8:	76 03                	jbe    c0001ded <gen_numname+0x5f>
c0001dea:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ded:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001df0:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001df4:	89 da                	mov    edx,ebx
c0001df6:	c1 ea 04             	shr    edx,0x4
c0001df9:	83 fb 0f             	cmp    ebx,0xf
c0001dfc:	76 06                	jbe    c0001e04 <gen_numname+0x76>
c0001dfe:	89 c8                	mov    eax,ecx
c0001e00:	89 d3                	mov    ebx,edx
c0001e02:	eb d9                	jmp    c0001ddd <gen_numname+0x4f>
c0001e04:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e09:	31 d2                	xor    edx,edx
c0001e0b:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e0e:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e11:	39 ca                	cmp    edx,ecx
c0001e13:	73 18                	jae    c0001e2d <gen_numname+0x9f>
c0001e15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e18:	3c 20                	cmp    al,0x20
c0001e1a:	74 11                	je     c0001e2d <gen_numname+0x9f>
c0001e1c:	e8 41 fc ff ff       	call   c0001a62 <dbc_1st>
c0001e21:	85 c0                	test   eax,eax
c0001e23:	74 05                	je     c0001e2a <gen_numname+0x9c>
c0001e25:	39 d3                	cmp    ebx,edx
c0001e27:	74 04                	je     c0001e2d <gen_numname+0x9f>
c0001e29:	42                   	inc    edx
c0001e2a:	42                   	inc    edx
c0001e2b:	eb e1                	jmp    c0001e0e <gen_numname+0x80>
c0001e2d:	b0 20                	mov    al,0x20
c0001e2f:	83 f9 07             	cmp    ecx,0x7
c0001e32:	77 05                	ja     c0001e39 <gen_numname+0xab>
c0001e34:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001e38:	41                   	inc    ecx
c0001e39:	42                   	inc    edx
c0001e3a:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001e3e:	83 fa 07             	cmp    edx,0x7
c0001e41:	76 ea                	jbe    c0001e2d <gen_numname+0x9f>
c0001e43:	83 c4 10             	add    esp,0x10
c0001e46:	5b                   	pop    ebx
c0001e47:	5e                   	pop    esi
c0001e48:	5f                   	pop    edi
c0001e49:	c3                   	ret    

c0001e4a <sum_sfn>:
c0001e4a:	31 c9                	xor    ecx,ecx
c0001e4c:	31 d2                	xor    edx,edx
c0001e4e:	d0 ca                	ror    dl,1
c0001e50:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001e53:	41                   	inc    ecx
c0001e54:	83 f9 0b             	cmp    ecx,0xb
c0001e57:	75 f5                	jne    c0001e4e <sum_sfn+0x4>
c0001e59:	88 d0                	mov    al,dl
c0001e5b:	c3                   	ret    

c0001e5c <xdir_sum>:
c0001e5c:	56                   	push   esi
c0001e5d:	31 c9                	xor    ecx,ecx
c0001e5f:	53                   	push   ebx
c0001e60:	31 d2                	xor    edx,edx
c0001e62:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001e66:	43                   	inc    ebx
c0001e67:	c1 e3 05             	shl    ebx,0x5
c0001e6a:	83 fa 02             	cmp    edx,0x2
c0001e6d:	74 0b                	je     c0001e7a <xdir_sum+0x1e>
c0001e6f:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001e73:	66 d1 c9             	ror    cx,1
c0001e76:	01 f1                	add    ecx,esi
c0001e78:	eb 05                	jmp    c0001e7f <xdir_sum+0x23>
c0001e7a:	ba 03 00 00 00       	mov    edx,0x3
c0001e7f:	42                   	inc    edx
c0001e80:	39 d3                	cmp    ebx,edx
c0001e82:	77 e6                	ja     c0001e6a <xdir_sum+0xe>
c0001e84:	89 c8                	mov    eax,ecx
c0001e86:	5b                   	pop    ebx
c0001e87:	5e                   	pop    esi
c0001e88:	c3                   	ret    

c0001e89 <xsum32>:
c0001e89:	d1 ca                	ror    edx,1
c0001e8b:	0f b6 c0             	movzx  eax,al
c0001e8e:	01 d0                	add    eax,edx
c0001e90:	c3                   	ret    

c0001e91 <get_xfileinfo>:
c0001e91:	55                   	push   ebp
c0001e92:	31 c9                	xor    ecx,ecx
c0001e94:	57                   	push   edi
c0001e95:	bd 40 00 00 00       	mov    ebp,0x40
c0001e9a:	56                   	push   esi
c0001e9b:	31 ff                	xor    edi,edi
c0001e9d:	53                   	push   ebx
c0001e9e:	89 c6                	mov    esi,eax
c0001ea0:	83 ec 0c             	sub    esp,0xc
c0001ea3:	89 d3                	mov    ebx,edx
c0001ea5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001eac:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001eb0:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001eb3:	76 6d                	jbe    c0001f22 <get_xfileinfo+0x91>
c0001eb5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001ebb:	76 0b                	jbe    c0001ec8 <get_xfileinfo+0x37>
c0001ebd:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001ec1:	bf 01 00 00 00       	mov    edi,0x1
c0001ec6:	eb 63                	jmp    c0001f2b <get_xfileinfo+0x9a>
c0001ec8:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001ece:	75 03                	jne    c0001ed3 <get_xfileinfo+0x42>
c0001ed0:	83 c5 02             	add    ebp,0x2
c0001ed3:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001ed6:	83 c5 02             	add    ebp,0x2
c0001ed9:	e8 b0 fa ff ff       	call   c000198e <ld_word>
c0001ede:	ff 04 24             	inc    DWORD PTR [esp]
c0001ee1:	66 85 c9             	test   cx,cx
c0001ee4:	75 0d                	jne    c0001ef3 <get_xfileinfo+0x62>
c0001ee6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001eec:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001ef1:	76 2b                	jbe    c0001f1e <get_xfileinfo+0x8d>
c0001ef3:	c1 e1 10             	shl    ecx,0x10
c0001ef6:	ba ff 00 00 00       	mov    edx,0xff
c0001efb:	0f b7 c0             	movzx  eax,ax
c0001efe:	29 fa                	sub    edx,edi
c0001f00:	09 c8                	or     eax,ecx
c0001f02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f06:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f0a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f0e:	e8 1b fc ff ff       	call   c0001b2e <put_utf>
c0001f13:	84 c0                	test   al,al
c0001f15:	74 a6                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f17:	0f b6 c0             	movzx  eax,al
c0001f1a:	01 c7                	add    edi,eax
c0001f1c:	31 c0                	xor    eax,eax
c0001f1e:	89 c1                	mov    ecx,eax
c0001f20:	eb 8a                	jmp    c0001eac <get_xfileinfo+0x1b>
c0001f22:	85 ff                	test   edi,edi
c0001f24:	74 97                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f26:	66 85 c9             	test   cx,cx
c0001f29:	75 92                	jne    c0001ebd <get_xfileinfo+0x2c>
c0001f2b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001f30:	31 c0                	xor    eax,eax
c0001f32:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001f36:	31 d2                	xor    edx,edx
c0001f38:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001f3b:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001f3e:	80 e1 10             	and    cl,0x10
c0001f41:	75 08                	jne    c0001f4b <get_xfileinfo+0xba>
c0001f43:	8d 46 38             	lea    eax,[esi+0x38]
c0001f46:	e8 68 fa ff ff       	call   c00019b3 <ld_qword>
c0001f4b:	89 03                	mov    DWORD PTR [ebx],eax
c0001f4d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001f50:	8d 46 0c             	lea    eax,[esi+0xc]
c0001f53:	e8 36 fa ff ff       	call   c000198e <ld_word>
c0001f58:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001f5c:	8d 46 0e             	lea    eax,[esi+0xe]
c0001f5f:	e8 2a fa ff ff       	call   c000198e <ld_word>
c0001f64:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001f68:	83 c4 0c             	add    esp,0xc
c0001f6b:	5b                   	pop    ebx
c0001f6c:	5e                   	pop    esi
c0001f6d:	5f                   	pop    edi
c0001f6e:	5d                   	pop    ebp
c0001f6f:	c3                   	ret    

c0001f70 <get_ldnumber>:
c0001f70:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f72:	85 d2                	test   edx,edx
c0001f74:	74 14                	je     c0001f8a <get_ldnumber+0x1a>
c0001f76:	56                   	push   esi
c0001f77:	53                   	push   ebx
c0001f78:	89 d3                	mov    ebx,edx
c0001f7a:	43                   	inc    ebx
c0001f7b:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001f7e:	80 f9 1f             	cmp    cl,0x1f
c0001f81:	76 0d                	jbe    c0001f90 <get_ldnumber+0x20>
c0001f83:	80 f9 3a             	cmp    cl,0x3a
c0001f86:	75 f2                	jne    c0001f7a <get_ldnumber+0xa>
c0001f88:	eb 0a                	jmp    c0001f94 <get_ldnumber+0x24>
c0001f8a:	83 c9 ff             	or     ecx,0xffffffff
c0001f8d:	89 c8                	mov    eax,ecx
c0001f8f:	c3                   	ret    
c0001f90:	31 c9                	xor    ecx,ecx
c0001f92:	eb 24                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001f94:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001f97:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001f9a:	80 f9 09             	cmp    cl,0x9
c0001f9d:	77 16                	ja     c0001fb5 <get_ldnumber+0x45>
c0001f9f:	83 c2 02             	add    edx,0x2
c0001fa2:	83 c9 ff             	or     ecx,0xffffffff
c0001fa5:	39 d3                	cmp    ebx,edx
c0001fa7:	75 0f                	jne    c0001fb8 <get_ldnumber+0x48>
c0001fa9:	89 f2                	mov    edx,esi
c0001fab:	89 18                	mov    DWORD PTR [eax],ebx
c0001fad:	0f be ca             	movsx  ecx,dl
c0001fb0:	83 e9 30             	sub    ecx,0x30
c0001fb3:	eb 03                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001fb5:	83 c9 ff             	or     ecx,0xffffffff
c0001fb8:	89 c8                	mov    eax,ecx
c0001fba:	5b                   	pop    ebx
c0001fbb:	5e                   	pop    esi
c0001fbc:	c3                   	ret    

c0001fbd <crc32>:
c0001fbd:	56                   	push   esi
c0001fbe:	89 d6                	mov    esi,edx
c0001fc0:	53                   	push   ebx
c0001fc1:	b2 01                	mov    dl,0x1
c0001fc3:	bb 08 00 00 00       	mov    ebx,0x8
c0001fc8:	89 f1                	mov    ecx,esi
c0001fca:	84 d1                	test   cl,dl
c0001fcc:	0f 95 c1             	setne  cl
c0001fcf:	0f b6 c9             	movzx  ecx,cl
c0001fd2:	31 c1                	xor    ecx,eax
c0001fd4:	89 c8                	mov    eax,ecx
c0001fd6:	d1 e8                	shr    eax,1
c0001fd8:	80 e1 01             	and    cl,0x1
c0001fdb:	74 05                	je     c0001fe2 <crc32+0x25>
c0001fdd:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0001fe2:	d1 e2                	shl    edx,1
c0001fe4:	4b                   	dec    ebx
c0001fe5:	75 e1                	jne    c0001fc8 <crc32+0xb>
c0001fe7:	5b                   	pop    ebx
c0001fe8:	5e                   	pop    esi
c0001fe9:	c3                   	ret    

c0001fea <test_gpt_header>:
c0001fea:	55                   	push   ebp
c0001feb:	b9 10 00 00 00       	mov    ecx,0x10
c0001ff0:	57                   	push   edi
c0001ff1:	ba 60 fa 01 c0       	mov    edx,0xc001fa60
c0001ff6:	56                   	push   esi
c0001ff7:	31 ff                	xor    edi,edi
c0001ff9:	53                   	push   ebx
c0001ffa:	89 c3                	mov    ebx,eax
c0001ffc:	e8 2c fa ff ff       	call   c0001a2d <mem_cmp>
c0002001:	85 c0                	test   eax,eax
c0002003:	75 55                	jne    c000205a <test_gpt_header+0x70>
c0002005:	89 c7                	mov    edi,eax
c0002007:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000200c:	83 ce ff             	or     esi,0xffffffff
c000200f:	31 d2                	xor    edx,edx
c0002011:	83 fd 03             	cmp    ebp,0x3
c0002014:	76 05                	jbe    c000201b <test_gpt_header+0x31>
c0002016:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000201b:	89 f0                	mov    eax,esi
c000201d:	45                   	inc    ebp
c000201e:	e8 9a ff ff ff       	call   c0001fbd <crc32>
c0002023:	83 fd 4c             	cmp    ebp,0x4c
c0002026:	89 c6                	mov    esi,eax
c0002028:	75 e5                	jne    c000200f <test_gpt_header+0x25>
c000202a:	8d 43 10             	lea    eax,[ebx+0x10]
c000202d:	f7 d6                	not    esi
c000202f:	e8 67 f9 ff ff       	call   c000199b <ld_dword>
c0002034:	39 c6                	cmp    esi,eax
c0002036:	75 22                	jne    c000205a <test_gpt_header+0x70>
c0002038:	8d 43 54             	lea    eax,[ebx+0x54]
c000203b:	e8 5b f9 ff ff       	call   c000199b <ld_dword>
c0002040:	83 c0 80             	add    eax,0xffffff80
c0002043:	75 15                	jne    c000205a <test_gpt_header+0x70>
c0002045:	8d 43 50             	lea    eax,[ebx+0x50]
c0002048:	e8 4e f9 ff ff       	call   c000199b <ld_dword>
c000204d:	3d 80 00 00 00       	cmp    eax,0x80
c0002052:	0f 96 c0             	setbe  al
c0002055:	0f b6 c0             	movzx  eax,al
c0002058:	89 c7                	mov    edi,eax
c000205a:	5b                   	pop    ebx
c000205b:	89 f8                	mov    eax,edi
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <make_rand>:
c0002061:	56                   	push   esi
c0002062:	85 c0                	test   eax,eax
c0002064:	53                   	push   ebx
c0002065:	75 05                	jne    c000206c <make_rand+0xb>
c0002067:	b8 01 00 00 00       	mov    eax,0x1
c000206c:	01 d1                	add    ecx,edx
c000206e:	bb 08 00 00 00       	mov    ebx,0x8
c0002073:	89 c6                	mov    esi,eax
c0002075:	d1 e8                	shr    eax,1
c0002077:	83 e6 01             	and    esi,0x1
c000207a:	85 f6                	test   esi,esi
c000207c:	74 05                	je     c0002083 <make_rand+0x22>
c000207e:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002083:	4b                   	dec    ebx
c0002084:	75 ed                	jne    c0002073 <make_rand+0x12>
c0002086:	42                   	inc    edx
c0002087:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000208a:	39 ca                	cmp    edx,ecx
c000208c:	75 e0                	jne    c000206e <make_rand+0xd>
c000208e:	5b                   	pop    ebx
c000208f:	5e                   	pop    esi
c0002090:	c3                   	ret    

c0002091 <validate>:
c0002091:	56                   	push   esi
c0002092:	53                   	push   ebx
c0002093:	89 d6                	mov    esi,edx
c0002095:	51                   	push   ecx
c0002096:	85 c0                	test   eax,eax
c0002098:	75 09                	jne    c00020a3 <validate+0x12>
c000209a:	b8 09 00 00 00       	mov    eax,0x9
c000209f:	31 c9                	xor    ecx,ecx
c00020a1:	eb 2f                	jmp    c00020d2 <validate+0x41>
c00020a3:	89 c3                	mov    ebx,eax
c00020a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00020a7:	85 c0                	test   eax,eax
c00020a9:	74 ef                	je     c000209a <validate+0x9>
c00020ab:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00020ae:	74 ea                	je     c000209a <validate+0x9>
c00020b0:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00020b4:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00020b8:	75 e0                	jne    c000209a <validate+0x9>
c00020ba:	83 ec 0c             	sub    esp,0xc
c00020bd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020c1:	50                   	push   eax
c00020c2:	e8 76 f8 ff ff       	call   c000193d <disk_status>
c00020c7:	83 c4 10             	add    esp,0x10
c00020ca:	a8 01                	test   al,0x1
c00020cc:	75 cc                	jne    c000209a <validate+0x9>
c00020ce:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00020d0:	31 c0                	xor    eax,eax
c00020d2:	89 0e                	mov    DWORD PTR [esi],ecx
c00020d4:	5a                   	pop    edx
c00020d5:	5b                   	pop    ebx
c00020d6:	5e                   	pop    esi
c00020d7:	c3                   	ret    

c00020d8 <sync_window>:
c00020d8:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00020dc:	0f 84 85 00 00 00    	je     c0002167 <sync_window+0x8f>
c00020e2:	55                   	push   ebp
c00020e3:	8d 68 54             	lea    ebp,[eax+0x54]
c00020e6:	57                   	push   edi
c00020e7:	56                   	push   esi
c00020e8:	53                   	push   ebx
c00020e9:	89 c3                	mov    ebx,eax
c00020eb:	83 ec 28             	sub    esp,0x28
c00020ee:	6a 01                	push   0x1
c00020f0:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00020f3:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00020f6:	55                   	push   ebp
c00020f7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020fb:	50                   	push   eax
c00020fc:	e8 58 f8 ff ff       	call   c0001959 <disk_write>
c0002101:	83 c4 20             	add    esp,0x20
c0002104:	ba 01 00 00 00       	mov    edx,0x1
c0002109:	85 c0                	test   eax,eax
c000210b:	75 50                	jne    c000215d <sync_window+0x85>
c000210d:	31 ff                	xor    edi,edi
c000210f:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002112:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002116:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000211a:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000211d:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002120:	89 c6                	mov    esi,eax
c0002122:	89 d7                	mov    edi,edx
c0002124:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002127:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000212b:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000212e:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002132:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002136:	73 23                	jae    c000215b <sync_window+0x83>
c0002138:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000213c:	75 1d                	jne    c000215b <sync_window+0x83>
c000213e:	83 ec 0c             	sub    esp,0xc
c0002141:	6a 01                	push   0x1
c0002143:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002147:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000214b:	52                   	push   edx
c000214c:	50                   	push   eax
c000214d:	55                   	push   ebp
c000214e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002152:	50                   	push   eax
c0002153:	e8 01 f8 ff ff       	call   c0001959 <disk_write>
c0002158:	83 c4 20             	add    esp,0x20
c000215b:	31 d2                	xor    edx,edx
c000215d:	83 c4 1c             	add    esp,0x1c
c0002160:	89 d0                	mov    eax,edx
c0002162:	5b                   	pop    ebx
c0002163:	5e                   	pop    esi
c0002164:	5f                   	pop    edi
c0002165:	5d                   	pop    ebp
c0002166:	c3                   	ret    
c0002167:	31 d2                	xor    edx,edx
c0002169:	89 d0                	mov    eax,edx
c000216b:	c3                   	ret    

c000216c <move_window>:
c000216c:	56                   	push   esi
c000216d:	53                   	push   ebx
c000216e:	89 c3                	mov    ebx,eax
c0002170:	83 ec 14             	sub    esp,0x14
c0002173:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002176:	75 07                	jne    c000217f <move_window+0x13>
c0002178:	31 f6                	xor    esi,esi
c000217a:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000217d:	74 59                	je     c00021d8 <move_window+0x6c>
c000217f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002183:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002187:	89 d8                	mov    eax,ebx
c0002189:	e8 4a ff ff ff       	call   c00020d8 <sync_window>
c000218e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002192:	89 c6                	mov    esi,eax
c0002194:	85 c0                	test   eax,eax
c0002196:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000219a:	75 3c                	jne    c00021d8 <move_window+0x6c>
c000219c:	83 ec 0c             	sub    esp,0xc
c000219f:	8d 43 54             	lea    eax,[ebx+0x54]
c00021a2:	6a 01                	push   0x1
c00021a4:	51                   	push   ecx
c00021a5:	52                   	push   edx
c00021a6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00021aa:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00021ae:	50                   	push   eax
c00021af:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021b3:	50                   	push   eax
c00021b4:	e8 8a f7 ff ff       	call   c0001943 <disk_read>
c00021b9:	83 c4 20             	add    esp,0x20
c00021bc:	85 c0                	test   eax,eax
c00021be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00021c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00021c6:	74 0a                	je     c00021d2 <move_window+0x66>
c00021c8:	83 ca ff             	or     edx,0xffffffff
c00021cb:	be 01 00 00 00       	mov    esi,0x1
c00021d0:	89 d1                	mov    ecx,edx
c00021d2:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00021d5:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00021d8:	89 f0                	mov    eax,esi
c00021da:	83 c4 14             	add    esp,0x14
c00021dd:	5b                   	pop    ebx
c00021de:	5e                   	pop    esi
c00021df:	c3                   	ret    

c00021e0 <check_fs>:
c00021e0:	53                   	push   ebx
c00021e1:	89 c3                	mov    ebx,eax
c00021e3:	83 ec 08             	sub    esp,0x8
c00021e6:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00021ea:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00021f1:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00021f8:	e8 6f ff ff ff       	call   c000216c <move_window>
c00021fd:	ba 04 00 00 00       	mov    edx,0x4
c0002202:	85 c0                	test   eax,eax
c0002204:	0f 85 89 00 00 00    	jne    c0002293 <check_fs+0xb3>
c000220a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002210:	e8 79 f7 ff ff       	call   c000198e <ld_word>
c0002215:	ba 03 00 00 00       	mov    edx,0x3
c000221a:	66 3d 55 aa          	cmp    ax,0xaa55
c000221e:	75 73                	jne    c0002293 <check_fs+0xb3>
c0002220:	ba 80 fb 01 c0       	mov    edx,0xc001fb80
c0002225:	8d 43 54             	lea    eax,[ebx+0x54]
c0002228:	b9 0b 00 00 00       	mov    ecx,0xb
c000222d:	e8 fb f7 ff ff       	call   c0001a2d <mem_cmp>
c0002232:	ba 01 00 00 00       	mov    edx,0x1
c0002237:	85 c0                	test   eax,eax
c0002239:	74 58                	je     c0002293 <check_fs+0xb3>
c000223b:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000223e:	8d 50 18             	lea    edx,[eax+0x18]
c0002241:	80 fa 01             	cmp    dl,0x1
c0002244:	76 09                	jbe    c000224f <check_fs+0x6f>
c0002246:	ba 02 00 00 00       	mov    edx,0x2
c000224b:	3c eb                	cmp    al,0xeb
c000224d:	75 44                	jne    c0002293 <check_fs+0xb3>
c000224f:	ba 98 28 02 c0       	mov    edx,0xc0022898
c0002254:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000225a:	b9 03 00 00 00       	mov    ecx,0x3
c000225f:	e8 c9 f7 ff ff       	call   c0001a2d <mem_cmp>
c0002264:	31 d2                	xor    edx,edx
c0002266:	85 c0                	test   eax,eax
c0002268:	74 29                	je     c0002293 <check_fs+0xb3>
c000226a:	ba 8c fb 01 c0       	mov    edx,0xc001fb8c
c000226f:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002275:	b9 05 00 00 00       	mov    ecx,0x5
c000227a:	e8 ae f7 ff ff       	call   c0001a2d <mem_cmp>
c000227f:	31 d2                	xor    edx,edx
c0002281:	85 c0                	test   eax,eax
c0002283:	74 0e                	je     c0002293 <check_fs+0xb3>
c0002285:	31 d2                	xor    edx,edx
c0002287:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000228e:	0f 95 c2             	setne  dl
c0002291:	01 d2                	add    edx,edx
c0002293:	89 d0                	mov    eax,edx
c0002295:	83 c4 08             	add    esp,0x8
c0002298:	5b                   	pop    ebx
c0002299:	c3                   	ret    

c000229a <find_volume>:
c000229a:	55                   	push   ebp
c000229b:	31 c9                	xor    ecx,ecx
c000229d:	57                   	push   edi
c000229e:	56                   	push   esi
c000229f:	89 d6                	mov    esi,edx
c00022a1:	53                   	push   ebx
c00022a2:	31 d2                	xor    edx,edx
c00022a4:	83 ec 3c             	sub    esp,0x3c
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	e8 32 ff ff ff       	call   c00021e0 <check_fs>
c00022ae:	83 f8 02             	cmp    eax,0x2
c00022b1:	74 0e                	je     c00022c1 <find_volume+0x27>
c00022b3:	0f 87 5d 01 00 00    	ja     c0002416 <find_volume+0x17c>
c00022b9:	85 f6                	test   esi,esi
c00022bb:	0f 84 55 01 00 00    	je     c0002416 <find_volume+0x17c>
c00022c1:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00022c8:	0f 85 dd 00 00 00    	jne    c00023ab <find_volume+0x111>
c00022ce:	31 c9                	xor    ecx,ecx
c00022d0:	ba 01 00 00 00       	mov    edx,0x1
c00022d5:	89 d8                	mov    eax,ebx
c00022d7:	e8 90 fe ff ff       	call   c000216c <move_window>
c00022dc:	85 c0                	test   eax,eax
c00022de:	74 0a                	je     c00022ea <find_volume+0x50>
c00022e0:	b8 04 00 00 00       	mov    eax,0x4
c00022e5:	e9 2c 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c00022ea:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00022ed:	89 e8                	mov    eax,ebp
c00022ef:	e8 f6 fc ff ff       	call   c0001fea <test_gpt_header>
c00022f4:	85 c0                	test   eax,eax
c00022f6:	75 0a                	jne    c0002302 <find_volume+0x68>
c00022f8:	b8 03 00 00 00       	mov    eax,0x3
c00022fd:	e9 14 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c0002302:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c0002308:	e8 8e f6 ff ff       	call   c000199b <ld_dword>
c000230d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002311:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002317:	e8 97 f6 ff ff       	call   c00019b3 <ld_qword>
c000231c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002324:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000232c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002334:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002338:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000233c:	74 ba                	je     c00022f8 <find_volume+0x5e>
c000233e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002342:	31 c9                	xor    ecx,ecx
c0002344:	c1 e7 07             	shl    edi,0x7
c0002347:	89 d8                	mov    eax,ebx
c0002349:	89 fa                	mov    edx,edi
c000234b:	c1 ea 09             	shr    edx,0x9
c000234e:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002352:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002356:	e8 11 fe ff ff       	call   c000216c <move_window>
c000235b:	85 c0                	test   eax,eax
c000235d:	75 81                	jne    c00022e0 <find_volume+0x46>
c000235f:	81 e7 80 01 00 00    	and    edi,0x180
c0002365:	b9 10 00 00 00       	mov    ecx,0x10
c000236a:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000236e:	ba 70 fb 01 c0       	mov    edx,0xc001fb70
c0002373:	e8 b5 f6 ff ff       	call   c0001a2d <mem_cmp>
c0002378:	85 c0                	test   eax,eax
c000237a:	75 29                	jne    c00023a5 <find_volume+0x10b>
c000237c:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002380:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002384:	e8 2a f6 ff ff       	call   c00019b3 <ld_qword>
c0002389:	89 d1                	mov    ecx,edx
c000238b:	89 c2                	mov    edx,eax
c000238d:	89 d8                	mov    eax,ebx
c000238f:	e8 4c fe ff ff       	call   c00021e0 <check_fs>
c0002394:	85 f6                	test   esi,esi
c0002396:	75 07                	jne    c000239f <find_volume+0x105>
c0002398:	83 f8 01             	cmp    eax,0x1
c000239b:	77 08                	ja     c00023a5 <find_volume+0x10b>
c000239d:	eb 77                	jmp    c0002416 <find_volume+0x17c>
c000239f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00023a3:	74 71                	je     c0002416 <find_volume+0x17c>
c00023a5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00023a9:	eb 89                	jmp    c0002334 <find_volume+0x9a>
c00023ab:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00023af:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00023b5:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00023bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023bf:	89 cd                	mov    ebp,ecx
c00023c1:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00023c5:	89 f8                	mov    eax,edi
c00023c7:	83 c7 10             	add    edi,0x10
c00023ca:	e8 cc f5 ff ff       	call   c000199b <ld_dword>
c00023cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00023d3:	89 01                	mov    DWORD PTR [ecx],eax
c00023d5:	83 c1 04             	add    ecx,0x4
c00023d8:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00023dc:	75 e3                	jne    c00023c1 <find_volume+0x127>
c00023de:	31 ff                	xor    edi,edi
c00023e0:	85 f6                	test   esi,esi
c00023e2:	74 03                	je     c00023e7 <find_volume+0x14d>
c00023e4:	8d 7e ff             	lea    edi,[esi-0x1]
c00023e7:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00023eb:	85 d2                	test   edx,edx
c00023ed:	74 14                	je     c0002403 <find_volume+0x169>
c00023ef:	31 c9                	xor    ecx,ecx
c00023f1:	89 d8                	mov    eax,ebx
c00023f3:	e8 e8 fd ff ff       	call   c00021e0 <check_fs>
c00023f8:	83 f8 01             	cmp    eax,0x1
c00023fb:	76 19                	jbe    c0002416 <find_volume+0x17c>
c00023fd:	85 f6                	test   esi,esi
c00023ff:	74 0f                	je     c0002410 <find_volume+0x176>
c0002401:	eb 13                	jmp    c0002416 <find_volume+0x17c>
c0002403:	85 f6                	test   esi,esi
c0002405:	0f 85 ed fe ff ff    	jne    c00022f8 <find_volume+0x5e>
c000240b:	b8 03 00 00 00       	mov    eax,0x3
c0002410:	47                   	inc    edi
c0002411:	83 ff 03             	cmp    edi,0x3
c0002414:	76 d1                	jbe    c00023e7 <find_volume+0x14d>
c0002416:	83 c4 3c             	add    esp,0x3c
c0002419:	5b                   	pop    ebx
c000241a:	5e                   	pop    esi
c000241b:	5f                   	pop    edi
c000241c:	5d                   	pop    ebp
c000241d:	c3                   	ret    

c000241e <mount_volume>:
c000241e:	55                   	push   ebp
c000241f:	57                   	push   edi
c0002420:	89 cf                	mov    edi,ecx
c0002422:	56                   	push   esi
c0002423:	53                   	push   ebx
c0002424:	bb 0b 00 00 00       	mov    ebx,0xb
c0002429:	83 ec 3c             	sub    esp,0x3c
c000242c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002432:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002436:	e8 35 fb ff ff       	call   c0001f70 <get_ldnumber>
c000243b:	85 c0                	test   eax,eax
c000243d:	0f 88 3a 05 00 00    	js     c000297d <mount_volume+0x55f>
c0002443:	8b 2c 85 20 3d 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdc2e0]
c000244a:	89 c6                	mov    esi,eax
c000244c:	bb 0c 00 00 00       	mov    ebx,0xc
c0002451:	85 ed                	test   ebp,ebp
c0002453:	0f 84 24 05 00 00    	je     c000297d <mount_volume+0x55f>
c0002459:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245d:	83 e7 fe             	and    edi,0xfffffffe
c0002460:	89 2a                	mov    DWORD PTR [edx],ebp
c0002462:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002466:	74 32                	je     c000249a <mount_volume+0x7c>
c0002468:	83 ec 0c             	sub    esp,0xc
c000246b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000246f:	50                   	push   eax
c0002470:	e8 c8 f4 ff ff       	call   c000193d <disk_status>
c0002475:	83 c4 10             	add    esp,0x10
c0002478:	a8 01                	test   al,0x1
c000247a:	75 1e                	jne    c000249a <mount_volume+0x7c>
c000247c:	31 db                	xor    ebx,ebx
c000247e:	89 f9                	mov    ecx,edi
c0002480:	84 c9                	test   cl,cl
c0002482:	0f 84 f5 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002488:	a8 04                	test   al,0x4
c000248a:	0f 84 ed 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002490:	bb 0a 00 00 00       	mov    ebx,0xa
c0002495:	e9 e3 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c000249a:	83 ec 0c             	sub    esp,0xc
c000249d:	89 f0                	mov    eax,esi
c000249f:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00024a3:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c00024a6:	0f b6 f0             	movzx  esi,al
c00024a9:	bb 03 00 00 00       	mov    ebx,0x3
c00024ae:	56                   	push   esi
c00024af:	e8 8c f4 ff ff       	call   c0001940 <disk_initialize>
c00024b4:	83 c4 10             	add    esp,0x10
c00024b7:	a8 01                	test   al,0x1
c00024b9:	0f 85 be 04 00 00    	jne    c000297d <mount_volume+0x55f>
c00024bf:	89 f9                	mov    ecx,edi
c00024c1:	84 c9                	test   cl,cl
c00024c3:	74 04                	je     c00024c9 <mount_volume+0xab>
c00024c5:	a8 04                	test   al,0x4
c00024c7:	75 c7                	jne    c0002490 <mount_volume+0x72>
c00024c9:	31 d2                	xor    edx,edx
c00024cb:	89 e8                	mov    eax,ebp
c00024cd:	e8 c8 fd ff ff       	call   c000229a <find_volume>
c00024d2:	83 f8 04             	cmp    eax,0x4
c00024d5:	75 0a                	jne    c00024e1 <mount_volume+0xc3>
c00024d7:	bb 01 00 00 00       	mov    ebx,0x1
c00024dc:	e9 9c 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024e1:	83 f8 01             	cmp    eax,0x1
c00024e4:	76 0a                	jbe    c00024f0 <mount_volume+0xd2>
c00024e6:	bb 0d 00 00 00       	mov    ebx,0xd
c00024eb:	e9 8d 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024f0:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00024f3:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00024f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00024fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00024fe:	75 17                	jne    c0002517 <mount_volume+0xf9>
c0002500:	b8 0b 00 00 00       	mov    eax,0xb
c0002505:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000250a:	75 da                	jne    c00024e6 <mount_volume+0xc8>
c000250c:	40                   	inc    eax
c000250d:	83 f8 40             	cmp    eax,0x40
c0002510:	75 f3                	jne    c0002505 <mount_volume+0xe7>
c0002512:	e9 5a 02 00 00       	jmp    c0002771 <mount_volume+0x353>
c0002517:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000251a:	e8 6f f4 ff ff       	call   c000198e <ld_word>
c000251f:	66 3d 00 02          	cmp    ax,0x200
c0002523:	75 c1                	jne    c00024e6 <mount_volume+0xc8>
c0002525:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002528:	e8 61 f4 ff ff       	call   c000198e <ld_word>
c000252d:	0f b7 c0             	movzx  eax,ax
c0002530:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002534:	85 c0                	test   eax,eax
c0002536:	75 0c                	jne    c0002544 <mount_volume+0x126>
c0002538:	8d 45 78             	lea    eax,[ebp+0x78]
c000253b:	e8 5b f4 ff ff       	call   c000199b <ld_dword>
c0002540:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002548:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000254b:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000254e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002552:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002555:	48                   	dec    eax
c0002556:	3c 01                	cmp    al,0x1
c0002558:	77 8c                	ja     c00024e6 <mount_volume+0xc8>
c000255a:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000255e:	89 c3                	mov    ebx,eax
c0002560:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002564:	66 85 c0             	test   ax,ax
c0002567:	0f 84 79 ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c000256d:	8d 40 ff             	lea    eax,[eax-0x1]
c0002570:	85 d8                	test   eax,ebx
c0002572:	0f 85 6e ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002578:	8d 45 65             	lea    eax,[ebp+0x65]
c000257b:	e8 0e f4 ff ff       	call   c000198e <ld_word>
c0002580:	89 c7                	mov    edi,eax
c0002582:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002586:	a8 0f                	test   al,0xf
c0002588:	0f 85 58 ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c000258e:	8d 45 67             	lea    eax,[ebp+0x67]
c0002591:	e8 f8 f3 ff ff       	call   c000198e <ld_word>
c0002596:	0f b7 f0             	movzx  esi,ax
c0002599:	85 f6                	test   esi,esi
c000259b:	75 0a                	jne    c00025a7 <mount_volume+0x189>
c000259d:	8d 45 74             	lea    eax,[ebp+0x74]
c00025a0:	e8 f6 f3 ff ff       	call   c000199b <ld_dword>
c00025a5:	89 c6                	mov    esi,eax
c00025a7:	8d 45 62             	lea    eax,[ebp+0x62]
c00025aa:	e8 df f3 ff ff       	call   c000198e <ld_word>
c00025af:	66 85 c0             	test   ax,ax
c00025b2:	0f 84 2e ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c00025b8:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00025bd:	0f b7 c8             	movzx  ecx,ax
c00025c0:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00025c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00025c9:	89 fa                	mov    edx,edi
c00025cb:	66 c1 ea 04          	shr    dx,0x4
c00025cf:	0f b7 d2             	movzx  edx,dx
c00025d2:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00025d6:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00025d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025dd:	39 c6                	cmp    esi,eax
c00025df:	0f 82 01 ff ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025e5:	29 c6                	sub    esi,eax
c00025e7:	31 d2                	xor    edx,edx
c00025e9:	89 f0                	mov    eax,esi
c00025eb:	f7 f3                	div    ebx
c00025ed:	39 de                	cmp    esi,ebx
c00025ef:	0f 82 f1 fe ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025f5:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00025fa:	0f 87 e6 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c0002600:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002605:	0f 86 63 03 00 00    	jbe    c000296e <mount_volume+0x550>
c000260b:	bb 03 00 00 00       	mov    ebx,0x3
c0002610:	8d 70 02             	lea    esi,[eax+0x2]
c0002613:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002617:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000261b:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000261e:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002621:	31 d2                	xor    edx,edx
c0002623:	89 c8                	mov    eax,ecx
c0002625:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002628:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000262c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002630:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002634:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002638:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000263b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000263e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002642:	31 d2                	xor    edx,edx
c0002644:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002648:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000264c:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000264f:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002652:	83 fb 03             	cmp    ebx,0x3
c0002655:	75 2b                	jne    c0002682 <mount_volume+0x264>
c0002657:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000265a:	e8 2f f3 ff ff       	call   c000198e <ld_word>
c000265f:	66 09 c7             	or     di,ax
c0002662:	0f 85 7e fe ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002668:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000266e:	c1 e6 02             	shl    esi,0x2
c0002671:	e8 25 f3 ff ff       	call   c000199b <ld_dword>
c0002676:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000267d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002680:	eb 30                	jmp    c00026b2 <mount_volume+0x294>
c0002682:	66 85 ff             	test   di,di
c0002685:	0f 84 5b fe ff ff    	je     c00024e6 <mount_volume+0xc8>
c000268b:	31 d2                	xor    edx,edx
c000268d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002691:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002695:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002699:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000269c:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000269f:	83 fb 02             	cmp    ebx,0x2
c00026a2:	75 04                	jne    c00026a8 <mount_volume+0x28a>
c00026a4:	01 f6                	add    esi,esi
c00026a6:	eb 0a                	jmp    c00026b2 <mount_volume+0x294>
c00026a8:	8d 04 76             	lea    eax,[esi+esi*2]
c00026ab:	83 e6 01             	and    esi,0x1
c00026ae:	d1 e8                	shr    eax,1
c00026b0:	01 c6                	add    esi,eax
c00026b2:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00026b8:	c1 ee 09             	shr    esi,0x9
c00026bb:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00026bf:	0f 87 21 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00026c5:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00026cc:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00026d3:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00026d7:	83 fb 03             	cmp    ebx,0x3
c00026da:	75 7a                	jne    c0002756 <mount_volume+0x338>
c00026dc:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00026e2:	e8 a7 f2 ff ff       	call   c000198e <ld_word>
c00026e7:	66 48                	dec    ax
c00026e9:	75 6b                	jne    c0002756 <mount_volume+0x338>
c00026eb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026f3:	83 c2 01             	add    edx,0x1
c00026f6:	89 e8                	mov    eax,ebp
c00026f8:	83 d1 00             	adc    ecx,0x0
c00026fb:	e8 6c fa ff ff       	call   c000216c <move_window>
c0002700:	85 c0                	test   eax,eax
c0002702:	75 52                	jne    c0002756 <mount_volume+0x338>
c0002704:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c0002708:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c000270e:	e8 7b f2 ff ff       	call   c000198e <ld_word>
c0002713:	66 3d 55 aa          	cmp    ax,0xaa55
c0002717:	75 3d                	jne    c0002756 <mount_volume+0x338>
c0002719:	8d 45 54             	lea    eax,[ebp+0x54]
c000271c:	e8 7a f2 ff ff       	call   c000199b <ld_dword>
c0002721:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002726:	75 2e                	jne    c0002756 <mount_volume+0x338>
c0002728:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000272e:	e8 68 f2 ff ff       	call   c000199b <ld_dword>
c0002733:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002738:	75 1c                	jne    c0002756 <mount_volume+0x338>
c000273a:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002740:	e8 56 f2 ff ff       	call   c000199b <ld_dword>
c0002745:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002748:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000274e:	e8 48 f2 ff ff       	call   c000199b <ld_dword>
c0002753:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002756:	66 a1 00 3d 02 c0    	mov    ax,ds:0xc0023d00
c000275c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000275f:	40                   	inc    eax
c0002760:	31 db                	xor    ebx,ebx
c0002762:	66 a3 00 3d 02 c0    	mov    ds:0xc0023d00,ax
c0002768:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000276c:	e9 0c 02 00 00       	jmp    c000297d <mount_volume+0x55f>
c0002771:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002777:	e8 12 f2 ff ff       	call   c000198e <ld_word>
c000277c:	66 3d 00 01          	cmp    ax,0x100
c0002780:	0f 85 60 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002786:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000278d:	0f 85 53 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002793:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002799:	e8 15 f2 ff ff       	call   c00019b3 <ld_qword>
c000279e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00027a6:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c00027ac:	e8 ea f1 ff ff       	call   c000199b <ld_dword>
c00027b1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027b4:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c00027ba:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027bd:	fe c8                	dec    al
c00027bf:	0f 85 21 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c00027c5:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00027cc:	bb 01 00 00 00       	mov    ebx,0x1
c00027d1:	d3 e3                	shl    ebx,cl
c00027d3:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00027d7:	66 85 db             	test   bx,bx
c00027da:	0f 84 06 fd ff ff    	je     c00024e6 <mount_volume+0xc8>
c00027e0:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00027e6:	e8 b0 f1 ff ff       	call   c000199b <ld_dword>
c00027eb:	89 c6                	mov    esi,eax
c00027ed:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00027f2:	0f 87 ee fc ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00027f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027fc:	8d 40 02             	lea    eax,[eax+0x2]
c00027ff:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002802:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002805:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002809:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000280c:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002812:	e8 84 f1 ff ff       	call   c000199b <ld_dword>
c0002817:	31 d2                	xor    edx,edx
c0002819:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000281d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002821:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002825:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002829:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000282c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000282f:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002835:	e8 61 f1 ff ff       	call   c000199b <ld_dword>
c000283a:	31 d2                	xor    edx,edx
c000283c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002840:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002844:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002848:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000284b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000284e:	0f b7 c3             	movzx  eax,bx
c0002851:	31 d2                	xor    edx,edx
c0002853:	0f af f0             	imul   esi,eax
c0002856:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000285a:	89 f0                	mov    eax,esi
c000285c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002860:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002864:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002868:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000286c:	39 c1                	cmp    ecx,eax
c000286e:	89 df                	mov    edi,ebx
c0002870:	19 d7                	sbb    edi,edx
c0002872:	0f 82 6e fc ff ff    	jb     c00024e6 <mount_volume+0xc8>
c0002878:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000287e:	31 db                	xor    ebx,ebx
c0002880:	e8 16 f1 ff ff       	call   c000199b <ld_dword>
c0002885:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000288c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000288f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002897:	85 db                	test   ebx,ebx
c0002899:	75 39                	jne    c00028d4 <mount_volume+0x4b6>
c000289b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000289f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00028a3:	0f 86 3d fc ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028a9:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c00028ac:	31 ff                	xor    edi,edi
c00028ae:	89 e8                	mov    eax,ebp
c00028b0:	e8 72 f3 ff ff       	call   c0001c27 <clst2sect>
c00028b5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00028b9:	01 c6                	add    esi,eax
c00028bb:	89 e8                	mov    eax,ebp
c00028bd:	11 d7                	adc    edi,edx
c00028bf:	89 f2                	mov    edx,esi
c00028c1:	89 f9                	mov    ecx,edi
c00028c3:	e8 a4 f8 ff ff       	call   c000216c <move_window>
c00028c8:	85 c0                	test   eax,eax
c00028ca:	0f 85 07 fc ff ff    	jne    c00024d7 <mount_volume+0xb9>
c00028d0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00028d4:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00028d9:	74 0b                	je     c00028e6 <mount_volume+0x4c8>
c00028db:	83 c3 20             	add    ebx,0x20
c00028de:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00028e4:	eb b1                	jmp    c0002897 <mount_volume+0x479>
c00028e6:	8d 75 54             	lea    esi,[ebp+0x54]
c00028e9:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00028ed:	e8 a9 f0 ff ff       	call   c000199b <ld_dword>
c00028f2:	89 c3                	mov    ebx,eax
c00028f4:	83 f8 01             	cmp    eax,0x1
c00028f7:	0f 86 e9 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028fd:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002900:	0f 86 e0 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c0002906:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002909:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000290d:	0f af c2             	imul   eax,edx
c0002910:	31 d2                	xor    edx,edx
c0002912:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002915:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002918:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000291b:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c000291e:	31 c9                	xor    ecx,ecx
c0002920:	89 da                	mov    edx,ebx
c0002922:	89 e8                	mov    eax,ebp
c0002924:	c1 ea 07             	shr    edx,0x7
c0002927:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c000292a:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c000292d:	e8 3a f8 ff ff       	call   c000216c <move_window>
c0002932:	85 c0                	test   eax,eax
c0002934:	0f 85 9d fb ff ff    	jne    c00024d7 <mount_volume+0xb9>
c000293a:	89 d8                	mov    eax,ebx
c000293c:	83 e0 7f             	and    eax,0x7f
c000293f:	8d 04 86             	lea    eax,[esi+eax*4]
c0002942:	e8 54 f0 ff ff       	call   c000199b <ld_dword>
c0002947:	83 f8 ff             	cmp    eax,0xffffffff
c000294a:	74 0a                	je     c0002956 <mount_volume+0x538>
c000294c:	43                   	inc    ebx
c000294d:	39 d8                	cmp    eax,ebx
c000294f:	74 cd                	je     c000291e <mount_volume+0x500>
c0002951:	e9 90 fb ff ff       	jmp    c00024e6 <mount_volume+0xc8>
c0002956:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000295d:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002964:	bb 04 00 00 00       	mov    ebx,0x4
c0002969:	e9 e8 fd ff ff       	jmp    c0002756 <mount_volume+0x338>
c000296e:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002973:	19 db                	sbb    ebx,ebx
c0002975:	83 c3 02             	add    ebx,0x2
c0002978:	e9 93 fc ff ff       	jmp    c0002610 <mount_volume+0x1f2>
c000297d:	83 c4 3c             	add    esp,0x3c
c0002980:	89 d8                	mov    eax,ebx
c0002982:	5b                   	pop    ebx
c0002983:	5e                   	pop    esi
c0002984:	5f                   	pop    edi
c0002985:	5d                   	pop    ebp
c0002986:	c3                   	ret    

c0002987 <find_bitmap>:
c0002987:	55                   	push   ebp
c0002988:	57                   	push   edi
c0002989:	89 c7                	mov    edi,eax
c000298b:	56                   	push   esi
c000298c:	8d 72 fe             	lea    esi,[edx-0x2]
c000298f:	53                   	push   ebx
c0002990:	83 ec 1c             	sub    esp,0x1c
c0002993:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002996:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000299a:	83 e8 02             	sub    eax,0x2
c000299d:	39 f0                	cmp    eax,esi
c000299f:	77 02                	ja     c00029a3 <find_bitmap+0x1c>
c00029a1:	31 f6                	xor    esi,esi
c00029a3:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00029a7:	89 f3                	mov    ebx,esi
c00029a9:	31 ed                	xor    ebp,ebp
c00029ab:	31 c9                	xor    ecx,ecx
c00029ad:	89 da                	mov    edx,ebx
c00029af:	89 f8                	mov    eax,edi
c00029b1:	c1 ea 0c             	shr    edx,0xc
c00029b4:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c00029b7:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c00029ba:	e8 ad f7 ff ff       	call   c000216c <move_window>
c00029bf:	85 c0                	test   eax,eax
c00029c1:	75 68                	jne    c0002a2b <find_bitmap+0xa4>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	89 d9                	mov    ecx,ebx
c00029c7:	c1 ea 03             	shr    edx,0x3
c00029ca:	83 e1 07             	and    ecx,0x7
c00029cd:	b8 01 00 00 00       	mov    eax,0x1
c00029d2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c00029d8:	d3 e0                	shl    eax,cl
c00029da:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c00029dd:	83 e9 02             	sub    ecx,0x2
c00029e0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00029e4:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c00029e8:	43                   	inc    ebx
c00029e9:	21 c1                	and    ecx,eax
c00029eb:	d1 e0                	shl    eax,1
c00029ed:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c00029f1:	77 09                	ja     c00029fc <find_bitmap+0x75>
c00029f3:	31 db                	xor    ebx,ebx
c00029f5:	ba 00 02 00 00       	mov    edx,0x200
c00029fa:	31 c0                	xor    eax,eax
c00029fc:	84 c9                	test   cl,cl
c00029fe:	75 10                	jne    c0002a10 <find_bitmap+0x89>
c0002a00:	45                   	inc    ebp
c0002a01:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a05:	75 0f                	jne    c0002a16 <find_bitmap+0x8f>
c0002a07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a0b:	83 c0 02             	add    eax,0x2
c0002a0e:	eb 22                	jmp    c0002a32 <find_bitmap+0xab>
c0002a10:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a14:	31 ed                	xor    ebp,ebp
c0002a16:	39 de                	cmp    esi,ebx
c0002a18:	74 16                	je     c0002a30 <find_bitmap+0xa9>
c0002a1a:	84 c0                	test   al,al
c0002a1c:	75 c6                	jne    c00029e4 <find_bitmap+0x5d>
c0002a1e:	42                   	inc    edx
c0002a1f:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a25:	77 84                	ja     c00029ab <find_bitmap+0x24>
c0002a27:	b0 01                	mov    al,0x1
c0002a29:	eb b9                	jmp    c00029e4 <find_bitmap+0x5d>
c0002a2b:	83 c8 ff             	or     eax,0xffffffff
c0002a2e:	eb 02                	jmp    c0002a32 <find_bitmap+0xab>
c0002a30:	31 c0                	xor    eax,eax
c0002a32:	83 c4 1c             	add    esp,0x1c
c0002a35:	5b                   	pop    ebx
c0002a36:	5e                   	pop    esi
c0002a37:	5f                   	pop    edi
c0002a38:	5d                   	pop    ebp
c0002a39:	c3                   	ret    

c0002a3a <change_bitmap>:
c0002a3a:	55                   	push   ebp
c0002a3b:	89 cd                	mov    ebp,ecx
c0002a3d:	57                   	push   edi
c0002a3e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002a41:	56                   	push   esi
c0002a42:	89 c7                	mov    edi,eax
c0002a44:	53                   	push   ebx
c0002a45:	89 c8                	mov    eax,ecx
c0002a47:	83 ec 1c             	sub    esp,0x1c
c0002a4a:	31 d2                	xor    edx,edx
c0002a4c:	89 ce                	mov    esi,ecx
c0002a4e:	c1 e8 0c             	shr    eax,0xc
c0002a51:	bb 01 00 00 00       	mov    ebx,0x1
c0002a56:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002a59:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002a5c:	c1 ee 03             	shr    esi,0x3
c0002a5f:	83 e1 07             	and    ecx,0x7
c0002a62:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002a68:	d3 e3                	shl    ebx,cl
c0002a6a:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002a6e:	89 c1                	mov    ecx,eax
c0002a70:	89 d3                	mov    ebx,edx
c0002a72:	83 c1 01             	add    ecx,0x1
c0002a75:	83 d3 00             	adc    ebx,0x0
c0002a78:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a7c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002a80:	89 d1                	mov    ecx,edx
c0002a82:	89 c2                	mov    edx,eax
c0002a84:	89 f8                	mov    eax,edi
c0002a86:	e8 e1 f6 ff ff       	call   c000216c <move_window>
c0002a8b:	89 c1                	mov    ecx,eax
c0002a8d:	85 c0                	test   eax,eax
c0002a8f:	75 48                	jne    c0002ad9 <change_bitmap+0x9f>
c0002a91:	31 d2                	xor    edx,edx
c0002a93:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002a97:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002a9b:	0f 95 c2             	setne  dl
c0002a9e:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002aa2:	74 3c                	je     c0002ae0 <change_bitmap+0xa6>
c0002aa4:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002aa8:	4d                   	dec    ebp
c0002aa9:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002ab1:	74 32                	je     c0002ae5 <change_bitmap+0xab>
c0002ab3:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002ab7:	75 d8                	jne    c0002a91 <change_bitmap+0x57>
c0002ab9:	8d 46 01             	lea    eax,[esi+0x1]
c0002abc:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002ac1:	89 c3                	mov    ebx,eax
c0002ac3:	31 f6                	xor    esi,esi
c0002ac5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ac9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acd:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ad3:	74 99                	je     c0002a6e <change_bitmap+0x34>
c0002ad5:	89 de                	mov    esi,ebx
c0002ad7:	eb b8                	jmp    c0002a91 <change_bitmap+0x57>
c0002ad9:	b9 01 00 00 00       	mov    ecx,0x1
c0002ade:	eb 05                	jmp    c0002ae5 <change_bitmap+0xab>
c0002ae0:	b9 02 00 00 00       	mov    ecx,0x2
c0002ae5:	83 c4 1c             	add    esp,0x1c
c0002ae8:	89 c8                	mov    eax,ecx
c0002aea:	5b                   	pop    ebx
c0002aeb:	5e                   	pop    esi
c0002aec:	5f                   	pop    edi
c0002aed:	5d                   	pop    ebp
c0002aee:	c3                   	ret    

c0002aef <put_fat>:
c0002aef:	83 fa 01             	cmp    edx,0x1
c0002af2:	0f 86 7b 01 00 00    	jbe    c0002c73 <put_fat+0x184>
c0002af8:	55                   	push   ebp
c0002af9:	57                   	push   edi
c0002afa:	89 cf                	mov    edi,ecx
c0002afc:	56                   	push   esi
c0002afd:	b9 02 00 00 00       	mov    ecx,0x2
c0002b02:	53                   	push   ebx
c0002b03:	89 c6                	mov    esi,eax
c0002b05:	83 ec 1c             	sub    esp,0x1c
c0002b08:	89 d3                	mov    ebx,edx
c0002b0a:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b0d:	0f 86 68 01 00 00    	jbe    c0002c7b <put_fat+0x18c>
c0002b13:	8a 00                	mov    al,BYTE PTR [eax]
c0002b15:	3c 02                	cmp    al,0x2
c0002b17:	0f 84 c7 00 00 00    	je     c0002be4 <put_fat+0xf5>
c0002b1d:	77 09                	ja     c0002b28 <put_fat+0x39>
c0002b1f:	fe c8                	dec    al
c0002b21:	74 17                	je     c0002b3a <put_fat+0x4b>
c0002b23:	e9 53 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b28:	b9 02 00 00 00       	mov    ecx,0x2
c0002b2d:	3c 04                	cmp    al,0x4
c0002b2f:	0f 86 e1 00 00 00    	jbe    c0002c16 <put_fat+0x127>
c0002b35:	e9 41 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b3a:	89 d5                	mov    ebp,edx
c0002b3c:	31 c9                	xor    ecx,ecx
c0002b3e:	d1 ed                	shr    ebp,1
c0002b40:	89 f0                	mov    eax,esi
c0002b42:	01 d5                	add    ebp,edx
c0002b44:	89 ea                	mov    edx,ebp
c0002b46:	c1 ea 09             	shr    edx,0x9
c0002b49:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b4c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b4f:	e8 18 f6 ff ff       	call   c000216c <move_window>
c0002b54:	89 c1                	mov    ecx,eax
c0002b56:	85 c0                	test   eax,eax
c0002b58:	0f 85 1d 01 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002b5e:	8d 46 54             	lea    eax,[esi+0x54]
c0002b61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b65:	8d 45 01             	lea    eax,[ebp+0x1]
c0002b68:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002b6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b72:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002b76:	89 f8                	mov    eax,edi
c0002b78:	83 e3 01             	and    ebx,0x1
c0002b7b:	74 0d                	je     c0002b8a <put_fat+0x9b>
c0002b7d:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002b80:	89 fa                	mov    edx,edi
c0002b82:	83 e0 0f             	and    eax,0xf
c0002b85:	c1 e2 04             	shl    edx,0x4
c0002b88:	09 d0                	or     eax,edx
c0002b8a:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002b8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b91:	31 c9                	xor    ecx,ecx
c0002b93:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002b97:	c1 ea 09             	shr    edx,0x9
c0002b9a:	89 f0                	mov    eax,esi
c0002b9c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b9f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ba2:	e8 c5 f5 ff ff       	call   c000216c <move_window>
c0002ba7:	89 c1                	mov    ecx,eax
c0002ba9:	85 c0                	test   eax,eax
c0002bab:	0f 85 ca 00 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002bb1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002bb5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bbb:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bbf:	85 db                	test   ebx,ebx
c0002bc1:	74 07                	je     c0002bca <put_fat+0xdb>
c0002bc3:	c1 ef 04             	shr    edi,0x4
c0002bc6:	89 fa                	mov    edx,edi
c0002bc8:	eb 0e                	jmp    c0002bd8 <put_fat+0xe9>
c0002bca:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002bcd:	c1 ef 08             	shr    edi,0x8
c0002bd0:	83 e2 f0             	and    edx,0xfffffff0
c0002bd3:	83 e7 0f             	and    edi,0xf
c0002bd6:	09 fa                	or     edx,edi
c0002bd8:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002bdb:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bdf:	e9 97 00 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002be4:	31 c9                	xor    ecx,ecx
c0002be6:	c1 ea 08             	shr    edx,0x8
c0002be9:	89 f0                	mov    eax,esi
c0002beb:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bee:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bf1:	e8 76 f5 ff ff       	call   c000216c <move_window>
c0002bf6:	89 c1                	mov    ecx,eax
c0002bf8:	85 c0                	test   eax,eax
c0002bfa:	75 7f                	jne    c0002c7b <put_fat+0x18c>
c0002bfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c00:	01 db                	add    ebx,ebx
c0002c02:	0f b7 d7             	movzx  edx,di
c0002c05:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c0b:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c0f:	e8 ec ed ff ff       	call   c0001a00 <st_word>
c0002c14:	eb 53                	jmp    c0002c69 <put_fat+0x17a>
c0002c16:	31 c9                	xor    ecx,ecx
c0002c18:	c1 ea 07             	shr    edx,0x7
c0002c1b:	89 f0                	mov    eax,esi
c0002c1d:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c20:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c23:	e8 44 f5 ff ff       	call   c000216c <move_window>
c0002c28:	89 c1                	mov    ecx,eax
c0002c2a:	85 c0                	test   eax,eax
c0002c2c:	75 4d                	jne    c0002c7b <put_fat+0x18c>
c0002c2e:	c1 e3 02             	shl    ebx,0x2
c0002c31:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002c37:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002c3a:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002c3e:	74 1c                	je     c0002c5c <put_fat+0x16d>
c0002c40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c44:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002c4a:	89 d8                	mov    eax,ebx
c0002c4c:	e8 4a ed ff ff       	call   c000199b <ld_dword>
c0002c51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c55:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c5a:	09 c7                	or     edi,eax
c0002c5c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c60:	89 fa                	mov    edx,edi
c0002c62:	89 d8                	mov    eax,ebx
c0002c64:	e8 9b ed ff ff       	call   c0001a04 <st_dword>
c0002c69:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c6d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c71:	eb 08                	jmp    c0002c7b <put_fat+0x18c>
c0002c73:	b9 02 00 00 00       	mov    ecx,0x2
c0002c78:	89 c8                	mov    eax,ecx
c0002c7a:	c3                   	ret    
c0002c7b:	83 c4 1c             	add    esp,0x1c
c0002c7e:	89 c8                	mov    eax,ecx
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <fill_last_frag>:
c0002c85:	57                   	push   edi
c0002c86:	89 cf                	mov    edi,ecx
c0002c88:	56                   	push   esi
c0002c89:	89 d6                	mov    esi,edx
c0002c8b:	53                   	push   ebx
c0002c8c:	89 c3                	mov    ebx,eax
c0002c8e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002c91:	85 c0                	test   eax,eax
c0002c93:	74 21                	je     c0002cb6 <fill_last_frag+0x31>
c0002c95:	89 f9                	mov    ecx,edi
c0002c97:	83 f8 01             	cmp    eax,0x1
c0002c9a:	76 05                	jbe    c0002ca1 <fill_last_frag+0x1c>
c0002c9c:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002c9f:	29 c1                	sub    ecx,eax
c0002ca1:	8d 56 01             	lea    edx,[esi+0x1]
c0002ca4:	29 c2                	sub    edx,eax
c0002ca6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ca8:	e8 42 fe ff ff       	call   c0002aef <put_fat>
c0002cad:	85 c0                	test   eax,eax
c0002caf:	75 05                	jne    c0002cb6 <fill_last_frag+0x31>
c0002cb1:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002cb4:	eb d8                	jmp    c0002c8e <fill_last_frag+0x9>
c0002cb6:	5b                   	pop    ebx
c0002cb7:	5e                   	pop    esi
c0002cb8:	5f                   	pop    edi
c0002cb9:	c3                   	ret    

c0002cba <fill_first_frag>:
c0002cba:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002cbe:	75 2d                	jne    c0002ced <fill_first_frag+0x33>
c0002cc0:	57                   	push   edi
c0002cc1:	56                   	push   esi
c0002cc2:	53                   	push   ebx
c0002cc3:	89 c3                	mov    ebx,eax
c0002cc5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002cc8:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002ccb:	01 d7                	add    edi,edx
c0002ccd:	39 fa                	cmp    edx,edi
c0002ccf:	74 14                	je     c0002ce5 <fill_first_frag+0x2b>
c0002cd1:	8d 72 01             	lea    esi,[edx+0x1]
c0002cd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002cd6:	89 f1                	mov    ecx,esi
c0002cd8:	e8 12 fe ff ff       	call   c0002aef <put_fat>
c0002cdd:	89 f2                	mov    edx,esi
c0002cdf:	85 c0                	test   eax,eax
c0002ce1:	74 ea                	je     c0002ccd <fill_first_frag+0x13>
c0002ce3:	eb 0b                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ce5:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ce9:	31 c0                	xor    eax,eax
c0002ceb:	eb 03                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ced:	31 c0                	xor    eax,eax
c0002cef:	c3                   	ret    
c0002cf0:	5b                   	pop    ebx
c0002cf1:	5e                   	pop    esi
c0002cf2:	5f                   	pop    edi
c0002cf3:	c3                   	ret    

c0002cf4 <get_fat>:
c0002cf4:	83 fa 01             	cmp    edx,0x1
c0002cf7:	0f 86 db 01 00 00    	jbe    c0002ed8 <get_fat+0x1e4>
c0002cfd:	55                   	push   ebp
c0002cfe:	b9 01 00 00 00       	mov    ecx,0x1
c0002d03:	57                   	push   edi
c0002d04:	56                   	push   esi
c0002d05:	53                   	push   ebx
c0002d06:	83 ec 1c             	sub    esp,0x1c
c0002d09:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d0b:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d0e:	0f 86 cc 01 00 00    	jbe    c0002ee0 <get_fat+0x1ec>
c0002d14:	89 c3                	mov    ebx,eax
c0002d16:	89 d6                	mov    esi,edx
c0002d18:	8a 07                	mov    al,BYTE PTR [edi]
c0002d1a:	3c 02                	cmp    al,0x2
c0002d1c:	0f 84 99 00 00 00    	je     c0002dbb <get_fat+0xc7>
c0002d22:	77 09                	ja     c0002d2d <get_fat+0x39>
c0002d24:	fe c8                	dec    al
c0002d26:	74 1a                	je     c0002d42 <get_fat+0x4e>
c0002d28:	e9 b3 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d2d:	3c 03                	cmp    al,0x3
c0002d2f:	0f 84 b5 00 00 00    	je     c0002dea <get_fat+0xf6>
c0002d35:	3c 04                	cmp    al,0x4
c0002d37:	0f 84 e3 00 00 00    	je     c0002e20 <get_fat+0x12c>
c0002d3d:	e9 9e 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d42:	89 d3                	mov    ebx,edx
c0002d44:	31 c9                	xor    ecx,ecx
c0002d46:	d1 eb                	shr    ebx,1
c0002d48:	89 f8                	mov    eax,edi
c0002d4a:	01 d3                	add    ebx,edx
c0002d4c:	89 da                	mov    edx,ebx
c0002d4e:	c1 ea 09             	shr    edx,0x9
c0002d51:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d54:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d57:	e8 10 f4 ff ff       	call   c000216c <move_window>
c0002d5c:	85 c0                	test   eax,eax
c0002d5e:	74 08                	je     c0002d68 <get_fat+0x74>
c0002d60:	83 c9 ff             	or     ecx,0xffffffff
c0002d63:	e9 78 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d68:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002d6b:	31 c9                	xor    ecx,ecx
c0002d6d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002d73:	89 ea                	mov    edx,ebp
c0002d75:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002d79:	c1 ea 09             	shr    edx,0x9
c0002d7c:	89 f8                	mov    eax,edi
c0002d7e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d81:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d84:	e8 e3 f3 ff ff       	call   c000216c <move_window>
c0002d89:	85 c0                	test   eax,eax
c0002d8b:	75 d3                	jne    c0002d60 <get_fat+0x6c>
c0002d8d:	0f b6 c3             	movzx  eax,bl
c0002d90:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d96:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002d9b:	c1 e3 08             	shl    ebx,0x8
c0002d9e:	09 c3                	or     ebx,eax
c0002da0:	89 d9                	mov    ecx,ebx
c0002da2:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002da8:	83 e6 01             	and    esi,0x1
c0002dab:	0f 84 2f 01 00 00    	je     c0002ee0 <get_fat+0x1ec>
c0002db1:	89 d9                	mov    ecx,ebx
c0002db3:	c1 e9 04             	shr    ecx,0x4
c0002db6:	e9 25 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dbb:	31 c9                	xor    ecx,ecx
c0002dbd:	c1 ea 08             	shr    edx,0x8
c0002dc0:	89 f8                	mov    eax,edi
c0002dc2:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dc5:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dc8:	e8 9f f3 ff ff       	call   c000216c <move_window>
c0002dcd:	85 c0                	test   eax,eax
c0002dcf:	75 8f                	jne    c0002d60 <get_fat+0x6c>
c0002dd1:	01 f6                	add    esi,esi
c0002dd3:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002dd9:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ddd:	e8 ac eb ff ff       	call   c000198e <ld_word>
c0002de2:	0f b7 c8             	movzx  ecx,ax
c0002de5:	e9 f6 00 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dea:	31 c9                	xor    ecx,ecx
c0002dec:	c1 ea 07             	shr    edx,0x7
c0002def:	89 f8                	mov    eax,edi
c0002df1:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002df4:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002df7:	e8 70 f3 ff ff       	call   c000216c <move_window>
c0002dfc:	85 c0                	test   eax,eax
c0002dfe:	0f 85 5c ff ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002e04:	c1 e6 02             	shl    esi,0x2
c0002e07:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e0d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e11:	e8 85 eb ff ff       	call   c000199b <ld_dword>
c0002e16:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e1b:	e9 b4 00 00 00       	jmp    c0002ed4 <get_fat+0x1e0>
c0002e20:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e23:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e26:	89 d1                	mov    ecx,edx
c0002e28:	09 c1                	or     ecx,eax
c0002e2a:	74 06                	je     c0002e32 <get_fat+0x13e>
c0002e2c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002e30:	75 0f                	jne    c0002e41 <get_fat+0x14d>
c0002e32:	b9 01 00 00 00       	mov    ecx,0x1
c0002e37:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002e3b:	0f 85 9f 00 00 00    	jne    c0002ee0 <get_fat+0x1ec>
c0002e41:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002e45:	89 f5                	mov    ebp,esi
c0002e47:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002e4c:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002e4f:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002e52:	80 f9 02             	cmp    cl,0x2
c0002e55:	75 35                	jne    c0002e8c <get_fat+0x198>
c0002e57:	83 c0 ff             	add    eax,0xffffffff
c0002e5a:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002e5f:	83 d2 ff             	adc    edx,0xffffffff
c0002e62:	31 db                	xor    ebx,ebx
c0002e64:	0f ac d0 09          	shrd   eax,edx,0x9
c0002e68:	53                   	push   ebx
c0002e69:	c1 ea 09             	shr    edx,0x9
c0002e6c:	51                   	push   ecx
c0002e6d:	52                   	push   edx
c0002e6e:	50                   	push   eax
c0002e6f:	e8 b8 bc 01 00       	call   c001eb2c <__udivdi3>
c0002e74:	83 c4 10             	add    esp,0x10
c0002e77:	b9 01 00 00 00       	mov    ecx,0x1
c0002e7c:	39 c5                	cmp    ebp,eax
c0002e7e:	77 60                	ja     c0002ee0 <get_fat+0x1ec>
c0002e80:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e85:	74 59                	je     c0002ee0 <get_fat+0x1ec>
c0002e87:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002e8a:	eb 54                	jmp    c0002ee0 <get_fat+0x1ec>
c0002e8c:	80 f9 03             	cmp    cl,0x3
c0002e8f:	75 05                	jne    c0002e96 <get_fat+0x1a2>
c0002e91:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002e94:	77 f1                	ja     c0002e87 <get_fat+0x193>
c0002e96:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e9b:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002e9f:	75 3f                	jne    c0002ee0 <get_fat+0x1ec>
c0002ea1:	31 c9                	xor    ecx,ecx
c0002ea3:	89 f2                	mov    edx,esi
c0002ea5:	89 f8                	mov    eax,edi
c0002ea7:	c1 ea 07             	shr    edx,0x7
c0002eaa:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ead:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eb0:	e8 b7 f2 ff ff       	call   c000216c <move_window>
c0002eb5:	85 c0                	test   eax,eax
c0002eb7:	0f 85 a3 fe ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002ebd:	c1 e6 02             	shl    esi,0x2
c0002ec0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ec6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002eca:	e8 cc ea ff ff       	call   c000199b <ld_dword>
c0002ecf:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002ed4:	89 c1                	mov    ecx,eax
c0002ed6:	eb 08                	jmp    c0002ee0 <get_fat+0x1ec>
c0002ed8:	b9 01 00 00 00       	mov    ecx,0x1
c0002edd:	89 c8                	mov    eax,ecx
c0002edf:	c3                   	ret    
c0002ee0:	83 c4 1c             	add    esp,0x1c
c0002ee3:	89 c8                	mov    eax,ecx
c0002ee5:	5b                   	pop    ebx
c0002ee6:	5e                   	pop    esi
c0002ee7:	5f                   	pop    edi
c0002ee8:	5d                   	pop    ebp
c0002ee9:	c3                   	ret    

c0002eea <dir_sdi>:
c0002eea:	55                   	push   ebp
c0002eeb:	57                   	push   edi
c0002eec:	56                   	push   esi
c0002eed:	53                   	push   ebx
c0002eee:	89 c3                	mov    ebx,eax
c0002ef0:	83 ec 1c             	sub    esp,0x1c
c0002ef3:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ef5:	31 c0                	xor    eax,eax
c0002ef7:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002efa:	0f 94 c0             	sete   al
c0002efd:	48                   	dec    eax
c0002efe:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f03:	05 00 00 00 10       	add    eax,0x10000000
c0002f08:	39 d0                	cmp    eax,edx
c0002f0a:	77 0a                	ja     c0002f16 <dir_sdi+0x2c>
c0002f0c:	b8 02 00 00 00       	mov    eax,0x2
c0002f11:	e9 c4 00 00 00       	jmp    c0002fda <dir_sdi+0xf0>
c0002f16:	89 d6                	mov    esi,edx
c0002f18:	f6 c2 1f             	test   dl,0x1f
c0002f1b:	75 ef                	jne    c0002f0c <dir_sdi+0x22>
c0002f1d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f20:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f23:	85 c9                	test   ecx,ecx
c0002f25:	75 2d                	jne    c0002f54 <dir_sdi+0x6a>
c0002f27:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f2a:	77 1b                	ja     c0002f47 <dir_sdi+0x5d>
c0002f2c:	89 f2                	mov    edx,esi
c0002f2e:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002f32:	c1 ea 05             	shr    edx,0x5
c0002f35:	39 c2                	cmp    edx,eax
c0002f37:	73 d3                	jae    c0002f0c <dir_sdi+0x22>
c0002f39:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f3c:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002f3f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f42:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f45:	eb 4b                	jmp    c0002f92 <dir_sdi+0xa8>
c0002f47:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f4a:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f4e:	85 c0                	test   eax,eax
c0002f50:	74 da                	je     c0002f2c <dir_sdi+0x42>
c0002f52:	89 c1                	mov    ecx,eax
c0002f54:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002f58:	c1 e5 09             	shl    ebp,0x9
c0002f5b:	89 ca                	mov    edx,ecx
c0002f5d:	39 ee                	cmp    esi,ebp
c0002f5f:	72 1c                	jb     c0002f7d <dir_sdi+0x93>
c0002f61:	89 d8                	mov    eax,ebx
c0002f63:	e8 8c fd ff ff       	call   c0002cf4 <get_fat>
c0002f68:	89 c1                	mov    ecx,eax
c0002f6a:	83 f8 ff             	cmp    eax,0xffffffff
c0002f6d:	74 66                	je     c0002fd5 <dir_sdi+0xeb>
c0002f6f:	83 f8 01             	cmp    eax,0x1
c0002f72:	76 98                	jbe    c0002f0c <dir_sdi+0x22>
c0002f74:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002f77:	76 93                	jbe    c0002f0c <dir_sdi+0x22>
c0002f79:	29 ee                	sub    esi,ebp
c0002f7b:	eb de                	jmp    c0002f5b <dir_sdi+0x71>
c0002f7d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f81:	89 f8                	mov    eax,edi
c0002f83:	e8 9f ec ff ff       	call   c0001c27 <clst2sect>
c0002f88:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f8c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f8f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f92:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0002f95:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002f98:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0002f9b:	89 d1                	mov    ecx,edx
c0002f9d:	09 c1                	or     ecx,eax
c0002f9f:	0f 84 67 ff ff ff    	je     c0002f0c <dir_sdi+0x22>
c0002fa5:	89 f1                	mov    ecx,esi
c0002fa7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002faf:	c1 e9 09             	shr    ecx,0x9
c0002fb2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002fb6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002fba:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002fbe:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fc1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002fc7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fca:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fce:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0002fd1:	31 c0                	xor    eax,eax
c0002fd3:	eb 05                	jmp    c0002fda <dir_sdi+0xf0>
c0002fd5:	b8 01 00 00 00       	mov    eax,0x1
c0002fda:	83 c4 1c             	add    esp,0x1c
c0002fdd:	5b                   	pop    ebx
c0002fde:	5e                   	pop    esi
c0002fdf:	5f                   	pop    edi
c0002fe0:	5d                   	pop    ebp
c0002fe1:	c3                   	ret    

c0002fe2 <create_chain>:
c0002fe2:	55                   	push   ebp
c0002fe3:	89 c5                	mov    ebp,eax
c0002fe5:	57                   	push   edi
c0002fe6:	56                   	push   esi
c0002fe7:	53                   	push   ebx
c0002fe8:	83 ec 1c             	sub    esp,0x1c
c0002feb:	85 d2                	test   edx,edx
c0002fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002ff1:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ff3:	75 0e                	jne    c0003003 <create_chain+0x21>
c0002ff5:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0002ff8:	85 ff                	test   edi,edi
c0002ffa:	74 39                	je     c0003035 <create_chain+0x53>
c0002ffc:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0002fff:	77 39                	ja     c000303a <create_chain+0x58>
c0003001:	eb 32                	jmp    c0003035 <create_chain+0x53>
c0003003:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003007:	e8 e8 fc ff ff       	call   c0002cf4 <get_fat>
c000300c:	89 c3                	mov    ebx,eax
c000300e:	83 f8 01             	cmp    eax,0x1
c0003011:	77 0a                	ja     c000301d <create_chain+0x3b>
c0003013:	bb 01 00 00 00       	mov    ebx,0x1
c0003018:	e9 ba 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c000301d:	83 f8 ff             	cmp    eax,0xffffffff
c0003020:	0f 84 62 01 00 00    	je     c0003188 <create_chain+0x1a6>
c0003026:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003029:	0f 87 a8 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c000302f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003033:	eb 05                	jmp    c000303a <create_chain+0x58>
c0003035:	bf 01 00 00 00       	mov    edi,0x1
c000303a:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000303e:	75 07                	jne    c0003047 <create_chain+0x65>
c0003040:	31 db                	xor    ebx,ebx
c0003042:	e9 90 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c0003047:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000304a:	75 74                	jne    c00030c0 <create_chain+0xde>
c000304c:	b9 01 00 00 00       	mov    ecx,0x1
c0003051:	89 fa                	mov    edx,edi
c0003053:	89 f0                	mov    eax,esi
c0003055:	e8 2d f9 ff ff       	call   c0002987 <find_bitmap>
c000305a:	89 c3                	mov    ebx,eax
c000305c:	8d 40 ff             	lea    eax,[eax-0x1]
c000305f:	83 f8 fd             	cmp    eax,0xfffffffd
c0003062:	0f 87 6f 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c0003068:	83 ec 0c             	sub    esp,0xc
c000306b:	b9 01 00 00 00       	mov    ecx,0x1
c0003070:	6a 01                	push   0x1
c0003072:	89 da                	mov    edx,ebx
c0003074:	89 f0                	mov    eax,esi
c0003076:	e8 bf f9 ff ff       	call   c0002a3a <change_bitmap>
c000307b:	83 c4 10             	add    esp,0x10
c000307e:	83 f8 02             	cmp    eax,0x2
c0003081:	74 90                	je     c0003013 <create_chain+0x31>
c0003083:	83 f8 01             	cmp    eax,0x1
c0003086:	0f 84 fc 00 00 00    	je     c0003188 <create_chain+0x1a6>
c000308c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003091:	75 09                	jne    c000309c <create_chain+0xba>
c0003093:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003097:	e9 0c 01 00 00       	jmp    c00031a8 <create_chain+0x1c6>
c000309c:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c00030a0:	0f 85 e7 00 00 00    	jne    c000318d <create_chain+0x1ab>
c00030a6:	8d 57 01             	lea    edx,[edi+0x1]
c00030a9:	39 da                	cmp    edx,ebx
c00030ab:	0f 84 f7 00 00 00    	je     c00031a8 <create_chain+0x1c6>
c00030b1:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00030b4:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00030b8:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00030bb:	e9 cd 00 00 00       	jmp    c000318d <create_chain+0x1ab>
c00030c0:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00030c4:	75 41                	jne    c0003107 <create_chain+0x125>
c00030c6:	8d 5f 01             	lea    ebx,[edi+0x1]
c00030c9:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00030cc:	77 05                	ja     c00030d3 <create_chain+0xf1>
c00030ce:	bb 02 00 00 00       	mov    ebx,0x2
c00030d3:	89 da                	mov    edx,ebx
c00030d5:	89 e8                	mov    eax,ebp
c00030d7:	e8 18 fc ff ff       	call   c0002cf4 <get_fat>
c00030dc:	83 f8 01             	cmp    eax,0x1
c00030df:	0f 84 2e ff ff ff    	je     c0003013 <create_chain+0x31>
c00030e5:	83 f8 ff             	cmp    eax,0xffffffff
c00030e8:	0f 84 9a 00 00 00    	je     c0003188 <create_chain+0x1a6>
c00030ee:	85 c0                	test   eax,eax
c00030f0:	74 11                	je     c0003103 <create_chain+0x121>
c00030f2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00030f5:	83 f8 01             	cmp    eax,0x1
c00030f8:	76 0d                	jbe    c0003107 <create_chain+0x125>
c00030fa:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030fd:	76 08                	jbe    c0003107 <create_chain+0x125>
c00030ff:	89 c7                	mov    edi,eax
c0003101:	eb 04                	jmp    c0003107 <create_chain+0x125>
c0003103:	85 db                	test   ebx,ebx
c0003105:	75 38                	jne    c000313f <create_chain+0x15d>
c0003107:	89 fb                	mov    ebx,edi
c0003109:	43                   	inc    ebx
c000310a:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000310d:	77 0e                	ja     c000311d <create_chain+0x13b>
c000310f:	83 ff 01             	cmp    edi,0x1
c0003112:	0f 86 28 ff ff ff    	jbe    c0003040 <create_chain+0x5e>
c0003118:	bb 02 00 00 00       	mov    ebx,0x2
c000311d:	89 da                	mov    edx,ebx
c000311f:	89 e8                	mov    eax,ebp
c0003121:	e8 ce fb ff ff       	call   c0002cf4 <get_fat>
c0003126:	85 c0                	test   eax,eax
c0003128:	74 15                	je     c000313f <create_chain+0x15d>
c000312a:	83 f8 01             	cmp    eax,0x1
c000312d:	0f 84 e0 fe ff ff    	je     c0003013 <create_chain+0x31>
c0003133:	40                   	inc    eax
c0003134:	74 52                	je     c0003188 <create_chain+0x1a6>
c0003136:	39 fb                	cmp    ebx,edi
c0003138:	75 cf                	jne    c0003109 <create_chain+0x127>
c000313a:	e9 01 ff ff ff       	jmp    c0003040 <create_chain+0x5e>
c000313f:	83 c9 ff             	or     ecx,0xffffffff
c0003142:	89 da                	mov    edx,ebx
c0003144:	89 f0                	mov    eax,esi
c0003146:	e8 a4 f9 ff ff       	call   c0002aef <put_fat>
c000314b:	85 c0                	test   eax,eax
c000314d:	75 32                	jne    c0003181 <create_chain+0x19f>
c000314f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003154:	74 11                	je     c0003167 <create_chain+0x185>
c0003156:	89 d9                	mov    ecx,ebx
c0003158:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000315c:	89 f0                	mov    eax,esi
c000315e:	e8 8c f9 ff ff       	call   c0002aef <put_fat>
c0003163:	85 c0                	test   eax,eax
c0003165:	75 1a                	jne    c0003181 <create_chain+0x19f>
c0003167:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000316a:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000316d:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003170:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003173:	39 d0                	cmp    eax,edx
c0003175:	77 04                	ja     c000317b <create_chain+0x199>
c0003177:	48                   	dec    eax
c0003178:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000317b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000317f:	eb 56                	jmp    c00031d7 <create_chain+0x1f5>
c0003181:	48                   	dec    eax
c0003182:	0f 85 8b fe ff ff    	jne    c0003013 <create_chain+0x31>
c0003188:	83 cb ff             	or     ebx,0xffffffff
c000318b:	eb 4a                	jmp    c00031d7 <create_chain+0x1f5>
c000318d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003191:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003194:	41                   	inc    ecx
c0003195:	39 d9                	cmp    ecx,ebx
c0003197:	75 19                	jne    c00031b2 <create_chain+0x1d0>
c0003199:	b9 02 00 00 00       	mov    ecx,0x2
c000319e:	85 d2                	test   edx,edx
c00031a0:	74 03                	je     c00031a5 <create_chain+0x1c3>
c00031a2:	8d 4a 01             	lea    ecx,[edx+0x1]
c00031a5:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c00031a8:	85 c0                	test   eax,eax
c00031aa:	0f 85 63 fe ff ff    	jne    c0003013 <create_chain+0x31>
c00031b0:	eb b5                	jmp    c0003167 <create_chain+0x185>
c00031b2:	85 d2                	test   edx,edx
c00031b4:	75 07                	jne    c00031bd <create_chain+0x1db>
c00031b6:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031bd:	89 d9                	mov    ecx,ebx
c00031bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031c3:	89 e8                	mov    eax,ebp
c00031c5:	e8 bb fa ff ff       	call   c0002c85 <fill_last_frag>
c00031ca:	85 c0                	test   eax,eax
c00031cc:	75 b3                	jne    c0003181 <create_chain+0x19f>
c00031ce:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031d5:	eb 90                	jmp    c0003167 <create_chain+0x185>
c00031d7:	83 c4 1c             	add    esp,0x1c
c00031da:	89 d8                	mov    eax,ebx
c00031dc:	5b                   	pop    ebx
c00031dd:	5e                   	pop    esi
c00031de:	5f                   	pop    edi
c00031df:	5d                   	pop    ebp
c00031e0:	c3                   	ret    

c00031e1 <remove_chain>:
c00031e1:	55                   	push   ebp
c00031e2:	57                   	push   edi
c00031e3:	56                   	push   esi
c00031e4:	53                   	push   ebx
c00031e5:	83 ec 1c             	sub    esp,0x1c
c00031e8:	83 fa 01             	cmp    edx,0x1
c00031eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00031ef:	8b 18                	mov    ebx,DWORD PTR [eax]
c00031f1:	77 0a                	ja     c00031fd <remove_chain+0x1c>
c00031f3:	b8 02 00 00 00       	mov    eax,0x2
c00031f8:	e9 24 01 00 00       	jmp    c0003321 <remove_chain+0x140>
c00031fd:	89 d6                	mov    esi,edx
c00031ff:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003202:	76 ef                	jbe    c00031f3 <remove_chain+0x12>
c0003204:	89 c7                	mov    edi,eax
c0003206:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000320b:	75 06                	jne    c0003213 <remove_chain+0x32>
c000320d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003211:	eb 54                	jmp    c0003267 <remove_chain+0x86>
c0003213:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003216:	75 06                	jne    c000321e <remove_chain+0x3d>
c0003218:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000321c:	74 ef                	je     c000320d <remove_chain+0x2c>
c000321e:	83 c9 ff             	or     ecx,0xffffffff
c0003221:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003225:	89 d8                	mov    eax,ebx
c0003227:	e8 c3 f8 ff ff       	call   c0002aef <put_fat>
c000322c:	85 c0                	test   eax,eax
c000322e:	74 dd                	je     c000320d <remove_chain+0x2c>
c0003230:	e9 ec 00 00 00       	jmp    c0003321 <remove_chain+0x140>
c0003235:	83 f8 01             	cmp    eax,0x1
c0003238:	74 b9                	je     c00031f3 <remove_chain+0x12>
c000323a:	83 f8 ff             	cmp    eax,0xffffffff
c000323d:	74 6d                	je     c00032ac <remove_chain+0xcb>
c000323f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003242:	75 6f                	jne    c00032b3 <remove_chain+0xd2>
c0003244:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003247:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000324a:	8d 51 fe             	lea    edx,[ecx-0x2]
c000324d:	39 d0                	cmp    eax,edx
c000324f:	73 08                	jae    c0003259 <remove_chain+0x78>
c0003251:	40                   	inc    eax
c0003252:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003256:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003259:	8d 4e 01             	lea    ecx,[esi+0x1]
c000325c:	39 e9                	cmp    ecx,ebp
c000325e:	75 64                	jne    c00032c4 <remove_chain+0xe3>
c0003260:	89 ee                	mov    esi,ebp
c0003262:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003265:	76 0f                	jbe    c0003276 <remove_chain+0x95>
c0003267:	89 f2                	mov    edx,esi
c0003269:	89 f8                	mov    eax,edi
c000326b:	e8 84 fa ff ff       	call   c0002cf4 <get_fat>
c0003270:	89 c5                	mov    ebp,eax
c0003272:	85 c0                	test   eax,eax
c0003274:	75 bf                	jne    c0003235 <remove_chain+0x54>
c0003276:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003279:	0f 85 a0 00 00 00    	jne    c000331f <remove_chain+0x13e>
c000327f:	eb 6c                	jmp    c00032ed <remove_chain+0x10c>
c0003281:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003284:	84 c0                	test   al,al
c0003286:	75 7d                	jne    c0003305 <remove_chain+0x124>
c0003288:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000328b:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000328f:	0f 84 86 00 00 00    	je     c000331b <remove_chain+0x13a>
c0003295:	89 da                	mov    edx,ebx
c0003297:	89 f8                	mov    eax,edi
c0003299:	e8 56 fa ff ff       	call   c0002cf4 <get_fat>
c000329e:	83 f8 01             	cmp    eax,0x1
c00032a1:	0f 86 4c ff ff ff    	jbe    c00031f3 <remove_chain+0x12>
c00032a7:	83 f8 ff             	cmp    eax,0xffffffff
c00032aa:	75 4e                	jne    c00032fa <remove_chain+0x119>
c00032ac:	b8 01 00 00 00       	mov    eax,0x1
c00032b1:	eb 6e                	jmp    c0003321 <remove_chain+0x140>
c00032b3:	31 c9                	xor    ecx,ecx
c00032b5:	89 f2                	mov    edx,esi
c00032b7:	89 d8                	mov    eax,ebx
c00032b9:	e8 31 f8 ff ff       	call   c0002aef <put_fat>
c00032be:	85 c0                	test   eax,eax
c00032c0:	74 82                	je     c0003244 <remove_chain+0x63>
c00032c2:	eb 5d                	jmp    c0003321 <remove_chain+0x140>
c00032c4:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c7:	75 1b                	jne    c00032e4 <remove_chain+0x103>
c00032c9:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00032cd:	89 d8                	mov    eax,ebx
c00032cf:	83 ec 0c             	sub    esp,0xc
c00032d2:	6a 00                	push   0x0
c00032d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00032d8:	e8 5d f7 ff ff       	call   c0002a3a <change_bitmap>
c00032dd:	83 c4 10             	add    esp,0x10
c00032e0:	85 c0                	test   eax,eax
c00032e2:	75 3d                	jne    c0003321 <remove_chain+0x140>
c00032e4:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00032e8:	e9 73 ff ff ff       	jmp    c0003260 <remove_chain+0x7f>
c00032ed:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032f2:	75 8d                	jne    c0003281 <remove_chain+0xa0>
c00032f4:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00032f8:	eb 25                	jmp    c000331f <remove_chain+0x13e>
c00032fa:	8d 53 01             	lea    edx,[ebx+0x1]
c00032fd:	89 c3                	mov    ebx,eax
c00032ff:	39 c2                	cmp    edx,eax
c0003301:	74 88                	je     c000328b <remove_chain+0xaa>
c0003303:	eb 1a                	jmp    c000331f <remove_chain+0x13e>
c0003305:	3c 03                	cmp    al,0x3
c0003307:	75 16                	jne    c000331f <remove_chain+0x13e>
c0003309:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000330c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003310:	77 0d                	ja     c000331f <remove_chain+0x13e>
c0003312:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003315:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003319:	72 04                	jb     c000331f <remove_chain+0x13e>
c000331b:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c000331f:	31 c0                	xor    eax,eax
c0003321:	83 c4 1c             	add    esp,0x1c
c0003324:	5b                   	pop    ebx
c0003325:	5e                   	pop    esi
c0003326:	5f                   	pop    edi
c0003327:	5d                   	pop    ebp
c0003328:	c3                   	ret    

c0003329 <dir_clear>:
c0003329:	55                   	push   ebp
c000332a:	57                   	push   edi
c000332b:	56                   	push   esi
c000332c:	89 c6                	mov    esi,eax
c000332e:	53                   	push   ebx
c000332f:	83 ec 1c             	sub    esp,0x1c
c0003332:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003336:	e8 9d ed ff ff       	call   c00020d8 <sync_window>
c000333b:	85 c0                	test   eax,eax
c000333d:	0f 85 de 00 00 00    	jne    c0003421 <dir_clear+0xf8>
c0003343:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003347:	89 f0                	mov    eax,esi
c0003349:	8d 6e 54             	lea    ebp,[esi+0x54]
c000334c:	e8 d6 e8 ff ff       	call   c0001c27 <clst2sect>
c0003351:	b9 00 02 00 00       	mov    ecx,0x200
c0003356:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000335a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000335e:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003361:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003364:	89 e8                	mov    eax,ebp
c0003366:	31 d2                	xor    edx,edx
c0003368:	e8 b5 e6 ff ff       	call   c0001a22 <mem_set>
c000336d:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003371:	c1 e3 09             	shl    ebx,0x9
c0003374:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000337a:	76 1f                	jbe    c000339b <dir_clear+0x72>
c000337c:	bb 00 80 00 00       	mov    ebx,0x8000
c0003381:	eb 18                	jmp    c000339b <dir_clear+0x72>
c0003383:	83 ec 0c             	sub    esp,0xc
c0003386:	53                   	push   ebx
c0003387:	e8 35 4e 00 00       	call   c00081c1 <ff_memalloc>
c000338c:	83 c4 10             	add    esp,0x10
c000338f:	89 c7                	mov    edi,eax
c0003391:	85 c0                	test   eax,eax
c0003393:	0f 85 8f 00 00 00    	jne    c0003428 <dir_clear+0xff>
c0003399:	d1 eb                	shr    ebx,1
c000339b:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00033a1:	77 e0                	ja     c0003383 <dir_clear+0x5a>
c00033a3:	31 db                	xor    ebx,ebx
c00033a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00033a9:	39 d8                	cmp    eax,ebx
c00033ab:	76 66                	jbe    c0003413 <dir_clear+0xea>
c00033ad:	83 ec 0c             	sub    esp,0xc
c00033b0:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033b4:	6a 01                	push   0x1
c00033b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033be:	55                   	push   ebp
c00033bf:	50                   	push   eax
c00033c0:	e8 94 e5 ff ff       	call   c0001959 <disk_write>
c00033c5:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00033ca:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00033cf:	83 c4 20             	add    esp,0x20
c00033d2:	85 c0                	test   eax,eax
c00033d4:	75 3d                	jne    c0003413 <dir_clear+0xea>
c00033d6:	43                   	inc    ebx
c00033d7:	eb cc                	jmp    c00033a5 <dir_clear+0x7c>
c00033d9:	83 ec 0c             	sub    esp,0xc
c00033dc:	31 d2                	xor    edx,edx
c00033de:	55                   	push   ebp
c00033df:	89 d8                	mov    eax,ebx
c00033e1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00033e5:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00033e9:	52                   	push   edx
c00033ea:	50                   	push   eax
c00033eb:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033ef:	57                   	push   edi
c00033f0:	50                   	push   eax
c00033f1:	e8 63 e5 ff ff       	call   c0001959 <disk_write>
c00033f6:	83 c4 20             	add    esp,0x20
c00033f9:	85 c0                	test   eax,eax
c00033fb:	75 0a                	jne    c0003407 <dir_clear+0xde>
c00033fd:	01 eb                	add    ebx,ebp
c00033ff:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003403:	39 d8                	cmp    eax,ebx
c0003405:	77 d2                	ja     c00033d9 <dir_clear+0xb0>
c0003407:	83 ec 0c             	sub    esp,0xc
c000340a:	57                   	push   edi
c000340b:	e8 c7 4d 00 00       	call   c00081d7 <ff_memfree>
c0003410:	83 c4 10             	add    esp,0x10
c0003413:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003417:	39 d8                	cmp    eax,ebx
c0003419:	0f 95 c0             	setne  al
c000341c:	0f b6 c0             	movzx  eax,al
c000341f:	eb 19                	jmp    c000343a <dir_clear+0x111>
c0003421:	b8 01 00 00 00       	mov    eax,0x1
c0003426:	eb 12                	jmp    c000343a <dir_clear+0x111>
c0003428:	89 d9                	mov    ecx,ebx
c000342a:	31 d2                	xor    edx,edx
c000342c:	c1 eb 09             	shr    ebx,0x9
c000342f:	e8 ee e5 ff ff       	call   c0001a22 <mem_set>
c0003434:	89 dd                	mov    ebp,ebx
c0003436:	31 db                	xor    ebx,ebx
c0003438:	eb c5                	jmp    c00033ff <dir_clear+0xd6>
c000343a:	83 c4 1c             	add    esp,0x1c
c000343d:	5b                   	pop    ebx
c000343e:	5e                   	pop    esi
c000343f:	5f                   	pop    edi
c0003440:	5d                   	pop    ebp
c0003441:	c3                   	ret    

c0003442 <dir_next>:
c0003442:	55                   	push   ebp
c0003443:	57                   	push   edi
c0003444:	56                   	push   esi
c0003445:	53                   	push   ebx
c0003446:	89 c3                	mov    ebx,eax
c0003448:	83 ec 1c             	sub    esp,0x1c
c000344b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000344d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003451:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003454:	8d 78 20             	lea    edi,[eax+0x20]
c0003457:	31 c0                	xor    eax,eax
c0003459:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000345d:	0f 94 c0             	sete   al
c0003460:	48                   	dec    eax
c0003461:	25 00 00 20 f0       	and    eax,0xf0200000
c0003466:	05 00 00 00 10       	add    eax,0x10000000
c000346b:	39 f8                	cmp    eax,edi
c000346d:	77 0e                	ja     c000347d <dir_next+0x3b>
c000346f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003476:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000347d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003480:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003483:	b8 04 00 00 00       	mov    eax,0x4
c0003488:	89 ce                	mov    esi,ecx
c000348a:	09 d6                	or     esi,edx
c000348c:	0f 84 da 00 00 00    	je     c000356c <dir_next+0x12a>
c0003492:	89 f8                	mov    eax,edi
c0003494:	25 ff 01 00 00       	and    eax,0x1ff
c0003499:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000349d:	0f 85 b9 00 00 00    	jne    c000355c <dir_next+0x11a>
c00034a3:	83 c2 01             	add    edx,0x1
c00034a6:	83 d1 00             	adc    ecx,0x0
c00034a9:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00034ac:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00034af:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00034b2:	85 d2                	test   edx,edx
c00034b4:	75 29                	jne    c00034df <dir_next+0x9d>
c00034b6:	89 fa                	mov    edx,edi
c00034b8:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034bc:	c1 ea 05             	shr    edx,0x5
c00034bf:	39 c2                	cmp    edx,eax
c00034c1:	0f 82 95 00 00 00    	jb     c000355c <dir_next+0x11a>
c00034c7:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034ce:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034d5:	b8 04 00 00 00       	mov    eax,0x4
c00034da:	e9 8d 00 00 00       	jmp    c000356c <dir_next+0x12a>
c00034df:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00034e3:	89 f9                	mov    ecx,edi
c00034e5:	48                   	dec    eax
c00034e6:	c1 e9 09             	shr    ecx,0x9
c00034e9:	85 c8                	test   eax,ecx
c00034eb:	75 6f                	jne    c000355c <dir_next+0x11a>
c00034ed:	89 d8                	mov    eax,ebx
c00034ef:	e8 00 f8 ff ff       	call   c0002cf4 <get_fat>
c00034f4:	89 c6                	mov    esi,eax
c00034f6:	83 f8 01             	cmp    eax,0x1
c00034f9:	77 07                	ja     c0003502 <dir_next+0xc0>
c00034fb:	b8 02 00 00 00       	mov    eax,0x2
c0003500:	eb 6a                	jmp    c000356c <dir_next+0x12a>
c0003502:	83 f8 ff             	cmp    eax,0xffffffff
c0003505:	75 07                	jne    c000350e <dir_next+0xcc>
c0003507:	b8 01 00 00 00       	mov    eax,0x1
c000350c:	eb 5e                	jmp    c000356c <dir_next+0x12a>
c000350e:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003511:	77 37                	ja     c000354a <dir_next+0x108>
c0003513:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003518:	74 ad                	je     c00034c7 <dir_next+0x85>
c000351a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000351d:	89 d8                	mov    eax,ebx
c000351f:	e8 be fa ff ff       	call   c0002fe2 <create_chain>
c0003524:	89 c6                	mov    esi,eax
c0003526:	b8 07 00 00 00       	mov    eax,0x7
c000352b:	85 f6                	test   esi,esi
c000352d:	74 3d                	je     c000356c <dir_next+0x12a>
c000352f:	83 fe 01             	cmp    esi,0x1
c0003532:	74 c7                	je     c00034fb <dir_next+0xb9>
c0003534:	83 fe ff             	cmp    esi,0xffffffff
c0003537:	74 ce                	je     c0003507 <dir_next+0xc5>
c0003539:	89 f2                	mov    edx,esi
c000353b:	89 e8                	mov    eax,ebp
c000353d:	e8 e7 fd ff ff       	call   c0003329 <dir_clear>
c0003542:	85 c0                	test   eax,eax
c0003544:	75 c1                	jne    c0003507 <dir_next+0xc5>
c0003546:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000354a:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000354d:	89 f2                	mov    edx,esi
c000354f:	89 e8                	mov    eax,ebp
c0003551:	e8 d1 e6 ff ff       	call   c0001c27 <clst2sect>
c0003556:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003559:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000355c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003560:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003563:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003567:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000356a:	31 c0                	xor    eax,eax
c000356c:	83 c4 1c             	add    esp,0x1c
c000356f:	5b                   	pop    ebx
c0003570:	5e                   	pop    esi
c0003571:	5f                   	pop    edi
c0003572:	5d                   	pop    ebp
c0003573:	c3                   	ret    

c0003574 <load_xdir>:
c0003574:	55                   	push   ebp
c0003575:	57                   	push   edi
c0003576:	56                   	push   esi
c0003577:	89 c6                	mov    esi,eax
c0003579:	53                   	push   ebx
c000357a:	83 ec 1c             	sub    esp,0x1c
c000357d:	8b 00                	mov    eax,DWORD PTR [eax]
c000357f:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003582:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003585:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003588:	e8 df eb ff ff       	call   c000216c <move_window>
c000358d:	89 c3                	mov    ebx,eax
c000358f:	85 c0                	test   eax,eax
c0003591:	0f 85 0c 01 00 00    	jne    c00036a3 <load_xdir+0x12f>
c0003597:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000359a:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000359d:	0f 85 fb 00 00 00    	jne    c000369e <load_xdir+0x12a>
c00035a3:	89 f8                	mov    eax,edi
c00035a5:	b9 20 00 00 00       	mov    ecx,0x20
c00035aa:	e8 5e e4 ff ff       	call   c0001a0d <mem_cpy>
c00035af:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00035b3:	40                   	inc    eax
c00035b4:	c1 e0 05             	shl    eax,0x5
c00035b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00035bb:	83 e8 60             	sub    eax,0x60
c00035be:	3d 00 02 00 00       	cmp    eax,0x200
c00035c3:	0f 87 d5 00 00 00    	ja     c000369e <load_xdir+0x12a>
c00035c9:	31 d2                	xor    edx,edx
c00035cb:	89 f0                	mov    eax,esi
c00035cd:	e8 70 fe ff ff       	call   c0003442 <dir_next>
c00035d2:	89 c3                	mov    ebx,eax
c00035d4:	83 f8 04             	cmp    eax,0x4
c00035d7:	0f 84 c1 00 00 00    	je     c000369e <load_xdir+0x12a>
c00035dd:	85 c0                	test   eax,eax
c00035df:	0f 85 be 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035e5:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035e8:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035eb:	8b 06                	mov    eax,DWORD PTR [esi]
c00035ed:	e8 7a eb ff ff       	call   c000216c <move_window>
c00035f2:	89 c3                	mov    ebx,eax
c00035f4:	85 c0                	test   eax,eax
c00035f6:	0f 85 a7 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035fc:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00035ff:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003602:	0f 85 96 00 00 00    	jne    c000369e <load_xdir+0x12a>
c0003608:	8d 47 20             	lea    eax,[edi+0x20]
c000360b:	b9 20 00 00 00       	mov    ecx,0x20
c0003610:	e8 f8 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003615:	31 d2                	xor    edx,edx
c0003617:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000361b:	b9 0f 00 00 00       	mov    ecx,0xf
c0003620:	83 c0 2c             	add    eax,0x2c
c0003623:	f7 f1                	div    ecx
c0003625:	c1 e0 05             	shl    eax,0x5
c0003628:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000362c:	77 70                	ja     c000369e <load_xdir+0x12a>
c000362e:	bd 40 00 00 00       	mov    ebp,0x40
c0003633:	31 d2                	xor    edx,edx
c0003635:	89 f0                	mov    eax,esi
c0003637:	e8 06 fe ff ff       	call   c0003442 <dir_next>
c000363c:	89 c3                	mov    ebx,eax
c000363e:	83 f8 04             	cmp    eax,0x4
c0003641:	74 5b                	je     c000369e <load_xdir+0x12a>
c0003643:	85 c0                	test   eax,eax
c0003645:	75 5c                	jne    c00036a3 <load_xdir+0x12f>
c0003647:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000364a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000364d:	8b 06                	mov    eax,DWORD PTR [esi]
c000364f:	e8 18 eb ff ff       	call   c000216c <move_window>
c0003654:	89 c3                	mov    ebx,eax
c0003656:	85 c0                	test   eax,eax
c0003658:	75 49                	jne    c00036a3 <load_xdir+0x12f>
c000365a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000365d:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003660:	75 3c                	jne    c000369e <load_xdir+0x12a>
c0003662:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003668:	77 0d                	ja     c0003677 <load_xdir+0x103>
c000366a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000366d:	b9 20 00 00 00       	mov    ecx,0x20
c0003672:	e8 96 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003677:	83 c5 20             	add    ebp,0x20
c000367a:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000367e:	77 b3                	ja     c0003633 <load_xdir+0xbf>
c0003680:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003686:	77 1b                	ja     c00036a3 <load_xdir+0x12f>
c0003688:	89 f8                	mov    eax,edi
c000368a:	e8 cd e7 ff ff       	call   c0001e5c <xdir_sum>
c000368f:	89 c1                	mov    ecx,eax
c0003691:	8d 47 02             	lea    eax,[edi+0x2]
c0003694:	e8 f5 e2 ff ff       	call   c000198e <ld_word>
c0003699:	66 39 c1             	cmp    cx,ax
c000369c:	74 05                	je     c00036a3 <load_xdir+0x12f>
c000369e:	bb 02 00 00 00       	mov    ebx,0x2
c00036a3:	83 c4 1c             	add    esp,0x1c
c00036a6:	89 d8                	mov    eax,ebx
c00036a8:	5b                   	pop    ebx
c00036a9:	5e                   	pop    esi
c00036aa:	5f                   	pop    edi
c00036ab:	5d                   	pop    ebp
c00036ac:	c3                   	ret    

c00036ad <load_obj_xdir>:
c00036ad:	53                   	push   ebx
c00036ae:	89 c3                	mov    ebx,eax
c00036b0:	83 ec 08             	sub    esp,0x8
c00036b3:	8b 02                	mov    eax,DWORD PTR [edx]
c00036b5:	89 03                	mov    DWORD PTR [ebx],eax
c00036b7:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00036ba:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00036bd:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c0:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00036c3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00036cd:	30 c0                	xor    al,al
c00036cf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00036d6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00036d9:	89 d8                	mov    eax,ebx
c00036db:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00036de:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00036e1:	e8 04 f8 ff ff       	call   c0002eea <dir_sdi>
c00036e6:	85 c0                	test   eax,eax
c00036e8:	75 0b                	jne    c00036f5 <load_obj_xdir+0x48>
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	83 c4 08             	add    esp,0x8
c00036ef:	5b                   	pop    ebx
c00036f0:	e9 7f fe ff ff       	jmp    c0003574 <load_xdir>
c00036f5:	83 c4 08             	add    esp,0x8
c00036f8:	5b                   	pop    ebx
c00036f9:	c3                   	ret    

c00036fa <dir_read>:
c00036fa:	55                   	push   ebp
c00036fb:	bd 04 00 00 00       	mov    ebp,0x4
c0003700:	57                   	push   edi
c0003701:	56                   	push   esi
c0003702:	be ff ff ff ff       	mov    esi,0xffffffff
c0003707:	53                   	push   ebx
c0003708:	89 c3                	mov    ebx,eax
c000370a:	83 ec 1c             	sub    esp,0x1c
c000370d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003711:	8b 38                	mov    edi,DWORD PTR [eax]
c0003713:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003718:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000371b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371e:	89 c8                	mov    eax,ecx
c0003720:	09 d0                	or     eax,edx
c0003722:	0f 84 25 01 00 00    	je     c000384d <dir_read+0x153>
c0003728:	89 f8                	mov    eax,edi
c000372a:	e8 3d ea ff ff       	call   c000216c <move_window>
c000372f:	89 c5                	mov    ebp,eax
c0003731:	85 c0                	test   eax,eax
c0003733:	0f 85 23 01 00 00    	jne    c000385c <dir_read+0x162>
c0003739:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000373c:	8a 0a                	mov    cl,BYTE PTR [edx]
c000373e:	84 c9                	test   cl,cl
c0003740:	0f 84 11 01 00 00    	je     c0003857 <dir_read+0x15d>
c0003746:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003749:	75 48                	jne    c0003793 <dir_read+0x99>
c000374b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003750:	74 10                	je     c0003762 <dir_read+0x68>
c0003752:	80 f9 83             	cmp    cl,0x83
c0003755:	0f 85 dd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000375b:	31 ed                	xor    ebp,ebp
c000375d:	e9 08 01 00 00       	jmp    c000386a <dir_read+0x170>
c0003762:	80 f9 85             	cmp    cl,0x85
c0003765:	0f 85 cd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000376b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000376e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003771:	89 d8                	mov    eax,ebx
c0003773:	e8 fc fd ff ff       	call   c0003574 <load_xdir>
c0003778:	89 c5                	mov    ebp,eax
c000377a:	85 c0                	test   eax,eax
c000377c:	0f 85 da 00 00 00    	jne    c000385c <dir_read+0x162>
c0003782:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003785:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003788:	83 e0 3f             	and    eax,0x3f
c000378b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000378e:	e9 d7 00 00 00       	jmp    c000386a <dir_read+0x170>
c0003793:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003796:	83 e0 3f             	and    eax,0x3f
c0003799:	80 f9 2e             	cmp    cl,0x2e
c000379c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00037a0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037a3:	0f 84 8a 00 00 00    	je     c0003833 <dir_read+0x139>
c00037a9:	80 f9 e5             	cmp    cl,0xe5
c00037ac:	0f 84 81 00 00 00    	je     c0003833 <dir_read+0x139>
c00037b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037b6:	83 e0 1f             	and    eax,0x1f
c00037b9:	83 f8 08             	cmp    eax,0x8
c00037bc:	0f 94 c0             	sete   al
c00037bf:	0f b6 c0             	movzx  eax,al
c00037c2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037c6:	75 6b                	jne    c0003833 <dir_read+0x139>
c00037c8:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00037cd:	75 44                	jne    c0003813 <dir_read+0x119>
c00037cf:	f6 c1 40             	test   cl,0x40
c00037d2:	74 12                	je     c00037e6 <dir_read+0xec>
c00037d4:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037d7:	83 e1 bf             	and    ecx,0xffffffbf
c00037da:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037de:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037e1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037e4:	eb 06                	jmp    c00037ec <dir_read+0xf2>
c00037e6:	89 f0                	mov    eax,esi
c00037e8:	38 c8                	cmp    al,cl
c00037ea:	75 47                	jne    c0003833 <dir_read+0x139>
c00037ec:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037f0:	be ff ff ff ff       	mov    esi,0xffffffff
c00037f5:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00037f8:	75 3e                	jne    c0003838 <dir_read+0x13e>
c00037fa:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00037fe:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003801:	e8 8a e4 ff ff       	call   c0001c90 <pick_lfn>
c0003806:	85 c0                	test   eax,eax
c0003808:	74 2e                	je     c0003838 <dir_read+0x13e>
c000380a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000380e:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003811:	eb 25                	jmp    c0003838 <dir_read+0x13e>
c0003813:	89 f0                	mov    eax,esi
c0003815:	84 c0                	test   al,al
c0003817:	75 11                	jne    c000382a <dir_read+0x130>
c0003819:	89 d0                	mov    eax,edx
c000381b:	e8 2a e6 ff ff       	call   c0001e4a <sum_sfn>
c0003820:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003824:	0f 84 31 ff ff ff    	je     c000375b <dir_read+0x61>
c000382a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003831:	eb 37                	jmp    c000386a <dir_read+0x170>
c0003833:	be ff ff ff ff       	mov    esi,0xffffffff
c0003838:	31 d2                	xor    edx,edx
c000383a:	89 d8                	mov    eax,ebx
c000383c:	e8 01 fc ff ff       	call   c0003442 <dir_next>
c0003841:	89 c5                	mov    ebp,eax
c0003843:	85 c0                	test   eax,eax
c0003845:	0f 84 cd fe ff ff    	je     c0003718 <dir_read+0x1e>
c000384b:	eb 0f                	jmp    c000385c <dir_read+0x162>
c000384d:	85 ed                	test   ebp,ebp
c000384f:	0f 84 06 ff ff ff    	je     c000375b <dir_read+0x61>
c0003855:	eb 05                	jmp    c000385c <dir_read+0x162>
c0003857:	bd 04 00 00 00       	mov    ebp,0x4
c000385c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003863:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000386a:	83 c4 1c             	add    esp,0x1c
c000386d:	89 e8                	mov    eax,ebp
c000386f:	5b                   	pop    ebx
c0003870:	5e                   	pop    esi
c0003871:	5f                   	pop    edi
c0003872:	5d                   	pop    ebp
c0003873:	c3                   	ret    

c0003874 <dir_alloc>:
c0003874:	55                   	push   ebp
c0003875:	89 d5                	mov    ebp,edx
c0003877:	57                   	push   edi
c0003878:	31 d2                	xor    edx,edx
c000387a:	56                   	push   esi
c000387b:	53                   	push   ebx
c000387c:	89 c3                	mov    ebx,eax
c000387e:	83 ec 0c             	sub    esp,0xc
c0003881:	8b 38                	mov    edi,DWORD PTR [eax]
c0003883:	e8 62 f6 ff ff       	call   c0002eea <dir_sdi>
c0003888:	85 c0                	test   eax,eax
c000388a:	75 4e                	jne    c00038da <dir_alloc+0x66>
c000388c:	31 f6                	xor    esi,esi
c000388e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003891:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003894:	89 f8                	mov    eax,edi
c0003896:	e8 d1 e8 ff ff       	call   c000216c <move_window>
c000389b:	85 c0                	test   eax,eax
c000389d:	75 3b                	jne    c00038da <dir_alloc+0x66>
c000389f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00038a2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00038a5:	8a 12                	mov    dl,BYTE PTR [edx]
c00038a7:	75 07                	jne    c00038b0 <dir_alloc+0x3c>
c00038a9:	f7 d2                	not    edx
c00038ab:	c0 ea 07             	shr    dl,0x7
c00038ae:	eb 0d                	jmp    c00038bd <dir_alloc+0x49>
c00038b0:	84 d2                	test   dl,dl
c00038b2:	0f 94 c1             	sete   cl
c00038b5:	80 fa e5             	cmp    dl,0xe5
c00038b8:	0f 94 c2             	sete   dl
c00038bb:	09 ca                	or     edx,ecx
c00038bd:	84 d2                	test   dl,dl
c00038bf:	74 07                	je     c00038c8 <dir_alloc+0x54>
c00038c1:	46                   	inc    esi
c00038c2:	39 ee                	cmp    esi,ebp
c00038c4:	75 04                	jne    c00038ca <dir_alloc+0x56>
c00038c6:	eb 1c                	jmp    c00038e4 <dir_alloc+0x70>
c00038c8:	31 f6                	xor    esi,esi
c00038ca:	ba 01 00 00 00       	mov    edx,0x1
c00038cf:	89 d8                	mov    eax,ebx
c00038d1:	e8 6c fb ff ff       	call   c0003442 <dir_next>
c00038d6:	85 c0                	test   eax,eax
c00038d8:	74 b4                	je     c000388e <dir_alloc+0x1a>
c00038da:	83 f8 04             	cmp    eax,0x4
c00038dd:	75 05                	jne    c00038e4 <dir_alloc+0x70>
c00038df:	b8 07 00 00 00       	mov    eax,0x7
c00038e4:	83 c4 0c             	add    esp,0xc
c00038e7:	5b                   	pop    ebx
c00038e8:	5e                   	pop    esi
c00038e9:	5f                   	pop    edi
c00038ea:	5d                   	pop    ebp
c00038eb:	c3                   	ret    

c00038ec <store_xdir>:
c00038ec:	55                   	push   ebp
c00038ed:	57                   	push   edi
c00038ee:	89 c7                	mov    edi,eax
c00038f0:	56                   	push   esi
c00038f1:	53                   	push   ebx
c00038f2:	83 ec 0c             	sub    esp,0xc
c00038f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00038f7:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00038fa:	89 e8                	mov    eax,ebp
c00038fc:	e8 5b e5 ff ff       	call   c0001e5c <xdir_sum>
c0003901:	0f b7 d0             	movzx  edx,ax
c0003904:	8d 45 02             	lea    eax,[ebp+0x2]
c0003907:	e8 f4 e0 ff ff       	call   c0001a00 <st_word>
c000390c:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003910:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003913:	89 f8                	mov    eax,edi
c0003915:	e8 d0 f5 ff ff       	call   c0002eea <dir_sdi>
c000391a:	89 c6                	mov    esi,eax
c000391c:	85 f6                	test   esi,esi
c000391e:	75 3d                	jne    c000395d <store_xdir+0x71>
c0003920:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003923:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003926:	8b 07                	mov    eax,DWORD PTR [edi]
c0003928:	e8 3f e8 ff ff       	call   c000216c <move_window>
c000392d:	89 c6                	mov    esi,eax
c000392f:	85 c0                	test   eax,eax
c0003931:	75 2a                	jne    c000395d <store_xdir+0x71>
c0003933:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003936:	b9 20 00 00 00       	mov    ecx,0x20
c000393b:	89 ea                	mov    edx,ebp
c000393d:	e8 cb e0 ff ff       	call   c0001a0d <mem_cpy>
c0003942:	8b 07                	mov    eax,DWORD PTR [edi]
c0003944:	85 db                	test   ebx,ebx
c0003946:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000394a:	74 11                	je     c000395d <store_xdir+0x71>
c000394c:	31 d2                	xor    edx,edx
c000394e:	89 f8                	mov    eax,edi
c0003950:	83 c5 20             	add    ebp,0x20
c0003953:	e8 ea fa ff ff       	call   c0003442 <dir_next>
c0003958:	4b                   	dec    ebx
c0003959:	89 c6                	mov    esi,eax
c000395b:	eb bf                	jmp    c000391c <store_xdir+0x30>
c000395d:	89 f0                	mov    eax,esi
c000395f:	83 fe 02             	cmp    esi,0x2
c0003962:	76 05                	jbe    c0003969 <store_xdir+0x7d>
c0003964:	b8 02 00 00 00       	mov    eax,0x2
c0003969:	83 c4 0c             	add    esp,0xc
c000396c:	5b                   	pop    ebx
c000396d:	5e                   	pop    esi
c000396e:	5f                   	pop    edi
c000396f:	5d                   	pop    ebp
c0003970:	c3                   	ret    

c0003971 <dir_remove>:
c0003971:	57                   	push   edi
c0003972:	56                   	push   esi
c0003973:	53                   	push   ebx
c0003974:	89 c3                	mov    ebx,eax
c0003976:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003979:	8b 30                	mov    esi,DWORD PTR [eax]
c000397b:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c000397e:	83 fa ff             	cmp    edx,0xffffffff
c0003981:	74 09                	je     c000398c <dir_remove+0x1b>
c0003983:	e8 62 f5 ff ff       	call   c0002eea <dir_sdi>
c0003988:	85 c0                	test   eax,eax
c000398a:	75 41                	jne    c00039cd <dir_remove+0x5c>
c000398c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000398f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003992:	89 f0                	mov    eax,esi
c0003994:	e8 d3 e7 ff ff       	call   c000216c <move_window>
c0003999:	85 c0                	test   eax,eax
c000399b:	75 26                	jne    c00039c3 <dir_remove+0x52>
c000399d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039a0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00039a3:	75 05                	jne    c00039aa <dir_remove+0x39>
c00039a5:	80 22 7f             	and    BYTE PTR [edx],0x7f
c00039a8:	eb 03                	jmp    c00039ad <dir_remove+0x3c>
c00039aa:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00039ad:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00039b1:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c00039b4:	73 17                	jae    c00039cd <dir_remove+0x5c>
c00039b6:	31 d2                	xor    edx,edx
c00039b8:	89 d8                	mov    eax,ebx
c00039ba:	e8 83 fa ff ff       	call   c0003442 <dir_next>
c00039bf:	85 c0                	test   eax,eax
c00039c1:	74 c9                	je     c000398c <dir_remove+0x1b>
c00039c3:	83 f8 04             	cmp    eax,0x4
c00039c6:	75 05                	jne    c00039cd <dir_remove+0x5c>
c00039c8:	b8 02 00 00 00       	mov    eax,0x2
c00039cd:	5b                   	pop    ebx
c00039ce:	5e                   	pop    esi
c00039cf:	5f                   	pop    edi
c00039d0:	c3                   	ret    

c00039d1 <create_name>:
c00039d1:	55                   	push   ebp
c00039d2:	89 d5                	mov    ebp,edx
c00039d4:	57                   	push   edi
c00039d5:	89 c7                	mov    edi,eax
c00039d7:	56                   	push   esi
c00039d8:	31 f6                	xor    esi,esi
c00039da:	53                   	push   ebx
c00039db:	83 ec 3c             	sub    esp,0x3c
c00039de:	8b 02                	mov    eax,DWORD PTR [edx]
c00039e0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00039e4:	8b 07                	mov    eax,DWORD PTR [edi]
c00039e6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00039ed:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00039f1:	e8 72 e0 ff ff       	call   c0001a68 <tchar2uni>
c00039f6:	89 c3                	mov    ebx,eax
c00039f8:	83 f8 ff             	cmp    eax,0xffffffff
c00039fb:	75 0a                	jne    c0003a07 <create_name+0x36>
c00039fd:	b8 06 00 00 00       	mov    eax,0x6
c0003a02:	e9 9e 02 00 00       	jmp    c0003ca5 <create_name+0x2d4>
c0003a07:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a0c:	76 0c                	jbe    c0003a1a <create_name+0x49>
c0003a0e:	c1 e8 10             	shr    eax,0x10
c0003a11:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a15:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a19:	46                   	inc    esi
c0003a1a:	66 83 fb 1f          	cmp    bx,0x1f
c0003a1e:	76 4f                	jbe    c0003a6f <create_name+0x9e>
c0003a20:	66 83 fb 5c          	cmp    bx,0x5c
c0003a24:	74 35                	je     c0003a5b <create_name+0x8a>
c0003a26:	66 83 fb 2f          	cmp    bx,0x2f
c0003a2a:	74 2f                	je     c0003a5b <create_name+0x8a>
c0003a2c:	66 83 fb 7f          	cmp    bx,0x7f
c0003a30:	77 11                	ja     c0003a43 <create_name+0x72>
c0003a32:	0f b7 d3             	movzx  edx,bx
c0003a35:	b8 92 fb 01 c0       	mov    eax,0xc001fb92
c0003a3a:	e8 11 e0 ff ff       	call   c0001a50 <chk_chr>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 ba                	jne    c00039fd <create_name+0x2c>
c0003a43:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003a49:	77 b2                	ja     c00039fd <create_name+0x2c>
c0003a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a4f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003a53:	46                   	inc    esi
c0003a54:	eb 97                	jmp    c00039ed <create_name+0x1c>
c0003a56:	40                   	inc    eax
c0003a57:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a5f:	8a 10                	mov    dl,BYTE PTR [eax]
c0003a61:	80 fa 2f             	cmp    dl,0x2f
c0003a64:	74 f0                	je     c0003a56 <create_name+0x85>
c0003a66:	80 fa 5c             	cmp    dl,0x5c
c0003a69:	74 eb                	je     c0003a56 <create_name+0x85>
c0003a6b:	31 db                	xor    ebx,ebx
c0003a6d:	eb 02                	jmp    c0003a71 <create_name+0xa0>
c0003a6f:	b3 04                	mov    bl,0x4
c0003a71:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a75:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003a78:	85 f6                	test   esi,esi
c0003a7a:	74 18                	je     c0003a94 <create_name+0xc3>
c0003a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a80:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003a85:	66 83 f8 20          	cmp    ax,0x20
c0003a89:	74 06                	je     c0003a91 <create_name+0xc0>
c0003a8b:	66 83 f8 2e          	cmp    ax,0x2e
c0003a8f:	75 03                	jne    c0003a94 <create_name+0xc3>
c0003a91:	4e                   	dec    esi
c0003a92:	eb e4                	jmp    c0003a78 <create_name+0xa7>
c0003a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a98:	31 ed                	xor    ebp,ebp
c0003a9a:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003aa0:	85 f6                	test   esi,esi
c0003aa2:	0f 84 55 ff ff ff    	je     c00039fd <create_name+0x2c>
c0003aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003aac:	8d 55 01             	lea    edx,[ebp+0x1]
c0003aaf:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003ab3:	66 83 f8 20          	cmp    ax,0x20
c0003ab7:	75 04                	jne    c0003abd <create_name+0xec>
c0003ab9:	89 d5                	mov    ebp,edx
c0003abb:	eb eb                	jmp    c0003aa8 <create_name+0xd7>
c0003abd:	85 ed                	test   ebp,ebp
c0003abf:	75 06                	jne    c0003ac7 <create_name+0xf6>
c0003ac1:	66 83 f8 2e          	cmp    ax,0x2e
c0003ac5:	75 08                	jne    c0003acf <create_name+0xfe>
c0003ac7:	83 cb 03             	or     ebx,0x3
c0003aca:	eb 03                	jmp    c0003acf <create_name+0xfe>
c0003acc:	4e                   	dec    esi
c0003acd:	74 0c                	je     c0003adb <create_name+0x10a>
c0003acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad3:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ad9:	75 f1                	jne    c0003acc <create_name+0xfb>
c0003adb:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ae0:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ae3:	ba 20 00 00 00       	mov    edx,0x20
c0003ae8:	e8 35 df ff ff       	call   c0001a22 <mem_set>
c0003aed:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003af5:	31 c9                	xor    ecx,ecx
c0003af7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003afc:	8d 45 01             	lea    eax,[ebp+0x1]
c0003aff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b07:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b0b:	66 85 ed             	test   bp,bp
c0003b0e:	0f 84 30 01 00 00    	je     c0003c44 <create_name+0x273>
c0003b14:	66 83 fd 20          	cmp    bp,0x20
c0003b18:	74 10                	je     c0003b2a <create_name+0x159>
c0003b1a:	66 83 fd 2e          	cmp    bp,0x2e
c0003b1e:	75 13                	jne    c0003b33 <create_name+0x162>
c0003b20:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b24:	0f 84 6b 01 00 00    	je     c0003c95 <create_name+0x2c4>
c0003b2a:	83 cb 03             	or     ebx,0x3
c0003b2d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003b31:	eb c9                	jmp    c0003afc <create_name+0x12b>
c0003b33:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003b37:	73 0b                	jae    c0003b44 <create_name+0x173>
c0003b39:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b3d:	75 47                	jne    c0003b86 <create_name+0x1b5>
c0003b3f:	e9 51 01 00 00       	jmp    c0003c95 <create_name+0x2c4>
c0003b44:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003b49:	75 10                	jne    c0003b5b <create_name+0x18a>
c0003b4b:	83 cb 03             	or     ebx,0x3
c0003b4e:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b56:	e9 e9 00 00 00       	jmp    c0003c44 <create_name+0x273>
c0003b5b:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b5f:	74 0d                	je     c0003b6e <create_name+0x19d>
c0003b61:	83 cb 03             	or     ebx,0x3
c0003b64:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b68:	0f 87 d6 00 00 00    	ja     c0003c44 <create_name+0x273>
c0003b6e:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003b73:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003b77:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b7f:	b9 08 00 00 00       	mov    ecx,0x8
c0003b84:	eb a7                	jmp    c0003b2d <create_name+0x15c>
c0003b86:	66 83 fd 7f          	cmp    bp,0x7f
c0003b8a:	76 68                	jbe    c0003bf4 <create_name+0x223>
c0003b8c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003b90:	88 da                	mov    dl,bl
c0003b92:	83 ca 02             	or     edx,0x2
c0003b95:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003b99:	50                   	push   eax
c0003b9a:	50                   	push   eax
c0003b9b:	68 b5 01 00 00       	push   0x1b5
c0003ba0:	55                   	push   ebp
c0003ba1:	e8 48 46 00 00       	call   c00081ee <ff_uni2oem>
c0003ba6:	83 c4 10             	add    esp,0x10
c0003ba9:	89 c5                	mov    ebp,eax
c0003bab:	a8 80                	test   al,0x80
c0003bad:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003bb1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003bb5:	74 0c                	je     c0003bc3 <create_name+0x1f2>
c0003bb7:	83 e5 7f             	and    ebp,0x7f
c0003bba:	0f b6 ad e0 fa 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe0520]
c0003bc1:	eb 2a                	jmp    c0003bed <create_name+0x21c>
c0003bc3:	66 3d ff 00          	cmp    ax,0xff
c0003bc7:	76 24                	jbe    c0003bed <create_name+0x21c>
c0003bc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003bcd:	48                   	dec    eax
c0003bce:	39 c8                	cmp    eax,ecx
c0003bd0:	77 0c                	ja     c0003bde <create_name+0x20d>
c0003bd2:	83 cb 03             	or     ebx,0x3
c0003bd5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003bd9:	e9 4f ff ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003bde:	89 e8                	mov    eax,ebp
c0003be0:	88 d3                	mov    bl,dl
c0003be2:	66 c1 e8 08          	shr    ax,0x8
c0003be6:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003bea:	41                   	inc    ecx
c0003beb:	eb 4b                	jmp    c0003c38 <create_name+0x267>
c0003bed:	88 d3                	mov    bl,dl
c0003bef:	66 85 ed             	test   bp,bp
c0003bf2:	74 19                	je     c0003c0d <create_name+0x23c>
c0003bf4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003bf8:	0f b7 d5             	movzx  edx,bp
c0003bfb:	b8 9b fb 01 c0       	mov    eax,0xc001fb9b
c0003c00:	e8 4b de ff ff       	call   c0001a50 <chk_chr>
c0003c05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c09:	85 c0                	test   eax,eax
c0003c0b:	74 0a                	je     c0003c17 <create_name+0x246>
c0003c0d:	83 cb 03             	or     ebx,0x3
c0003c10:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c15:	eb 21                	jmp    c0003c38 <create_name+0x267>
c0003c17:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c1a:	66 83 f8 19          	cmp    ax,0x19
c0003c1e:	77 07                	ja     c0003c27 <create_name+0x256>
c0003c20:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c25:	eb 11                	jmp    c0003c38 <create_name+0x267>
c0003c27:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c2a:	66 83 f8 19          	cmp    ax,0x19
c0003c2e:	77 08                	ja     c0003c38 <create_name+0x267>
c0003c30:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003c35:	83 ed 20             	sub    ebp,0x20
c0003c38:	89 e8                	mov    eax,ebp
c0003c3a:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c3e:	41                   	inc    ecx
c0003c3f:	e9 e9 fe ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003c44:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003c48:	75 04                	jne    c0003c4e <create_name+0x27d>
c0003c4a:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003c4e:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003c53:	75 05                	jne    c0003c5a <create_name+0x289>
c0003c55:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c5a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c5e:	83 e0 0c             	and    eax,0xc
c0003c61:	3c 0c                	cmp    al,0xc
c0003c63:	74 0b                	je     c0003c70 <create_name+0x29f>
c0003c65:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c69:	83 e0 03             	and    eax,0x3
c0003c6c:	3c 03                	cmp    al,0x3
c0003c6e:	75 05                	jne    c0003c75 <create_name+0x2a4>
c0003c70:	83 cb 02             	or     ebx,0x2
c0003c73:	eb 19                	jmp    c0003c8e <create_name+0x2bd>
c0003c75:	f6 c3 02             	test   bl,0x2
c0003c78:	75 14                	jne    c0003c8e <create_name+0x2bd>
c0003c7a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003c7f:	74 03                	je     c0003c84 <create_name+0x2b3>
c0003c81:	83 cb 10             	or     ebx,0x10
c0003c84:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003c89:	74 03                	je     c0003c8e <create_name+0x2bd>
c0003c8b:	83 cb 08             	or     ebx,0x8
c0003c8e:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003c91:	31 c0                	xor    eax,eax
c0003c93:	eb 10                	jmp    c0003ca5 <create_name+0x2d4>
c0003c95:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c9a:	0f 85 ce fe ff ff    	jne    c0003b6e <create_name+0x19d>
c0003ca0:	e9 a6 fe ff ff       	jmp    c0003b4b <create_name+0x17a>
c0003ca5:	83 c4 3c             	add    esp,0x3c
c0003ca8:	5b                   	pop    ebx
c0003ca9:	5e                   	pop    esi
c0003caa:	5f                   	pop    edi
c0003cab:	5d                   	pop    ebp
c0003cac:	c3                   	ret    

c0003cad <xname_sum>:
c0003cad:	56                   	push   esi
c0003cae:	53                   	push   ebx
c0003caf:	89 c6                	mov    esi,eax
c0003cb1:	51                   	push   ecx
c0003cb2:	31 db                	xor    ebx,ebx
c0003cb4:	83 c6 02             	add    esi,0x2
c0003cb7:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003cbb:	66 85 c0             	test   ax,ax
c0003cbe:	74 1f                	je     c0003cdf <xname_sum+0x32>
c0003cc0:	83 ec 0c             	sub    esp,0xc
c0003cc3:	66 d1 cb             	ror    bx,1
c0003cc6:	50                   	push   eax
c0003cc7:	e8 1e 46 00 00       	call   c00082ea <ff_wtoupper>
c0003ccc:	83 c4 10             	add    esp,0x10
c0003ccf:	0f b6 d0             	movzx  edx,al
c0003cd2:	66 c1 e8 08          	shr    ax,0x8
c0003cd6:	01 d3                	add    ebx,edx
c0003cd8:	66 d1 cb             	ror    bx,1
c0003cdb:	01 c3                	add    ebx,eax
c0003cdd:	eb d5                	jmp    c0003cb4 <xname_sum+0x7>
c0003cdf:	89 d8                	mov    eax,ebx
c0003ce1:	5a                   	pop    edx
c0003ce2:	5b                   	pop    ebx
c0003ce3:	5e                   	pop    esi
c0003ce4:	c3                   	ret    

c0003ce5 <create_xdir>:
c0003ce5:	55                   	push   ebp
c0003ce6:	b9 40 00 00 00       	mov    ecx,0x40
c0003ceb:	57                   	push   edi
c0003cec:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf1:	56                   	push   esi
c0003cf2:	31 ff                	xor    edi,edi
c0003cf4:	53                   	push   ebx
c0003cf5:	be 40 00 00 00       	mov    esi,0x40
c0003cfa:	89 c3                	mov    ebx,eax
c0003cfc:	83 ec 1c             	sub    esp,0x1c
c0003cff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d03:	31 d2                	xor    edx,edx
c0003d05:	e8 18 dd ff ff       	call   c0001a22 <mem_set>
c0003d0a:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d0d:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d11:	31 c9                	xor    ecx,ecx
c0003d13:	8d 46 01             	lea    eax,[esi+0x1]
c0003d16:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d1a:	83 c6 02             	add    esi,0x2
c0003d1d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d21:	66 85 ed             	test   bp,bp
c0003d24:	74 12                	je     c0003d38 <create_xdir+0x53>
c0003d26:	0f b6 c1             	movzx  eax,cl
c0003d29:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d2d:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003d31:	66 83 fd 01          	cmp    bp,0x1
c0003d35:	80 d9 ff             	sbb    cl,0xff
c0003d38:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003d3b:	0f b7 d5             	movzx  edx,bp
c0003d3e:	83 c6 02             	add    esi,0x2
c0003d41:	e8 ba dc ff ff       	call   c0001a00 <st_word>
c0003d46:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003d4c:	75 d3                	jne    c0003d21 <create_xdir+0x3c>
c0003d4e:	8d 47 01             	lea    eax,[edi+0x1]
c0003d51:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d55:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003d59:	0f b6 c1             	movzx  eax,cl
c0003d5c:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003d61:	74 07                	je     c0003d6a <create_xdir+0x85>
c0003d63:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003d68:	eb a9                	jmp    c0003d13 <create_xdir+0x2e>
c0003d6a:	8d 47 02             	lea    eax,[edi+0x2]
c0003d6d:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003d70:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003d73:	89 d0                	mov    eax,edx
c0003d75:	e8 33 ff ff ff       	call   c0003cad <xname_sum>
c0003d7a:	83 c4 1c             	add    esp,0x1c
c0003d7d:	0f b7 d0             	movzx  edx,ax
c0003d80:	8d 43 24             	lea    eax,[ebx+0x24]
c0003d83:	5b                   	pop    ebx
c0003d84:	5e                   	pop    esi
c0003d85:	5f                   	pop    edi
c0003d86:	5d                   	pop    ebp
c0003d87:	e9 74 dc ff ff       	jmp    c0001a00 <st_word>

c0003d8c <cmp_lfn>:
c0003d8c:	55                   	push   ebp
c0003d8d:	57                   	push   edi
c0003d8e:	89 d7                	mov    edi,edx
c0003d90:	56                   	push   esi
c0003d91:	53                   	push   ebx
c0003d92:	83 ec 1c             	sub    esp,0x1c
c0003d95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003d99:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003d9c:	e8 ed db ff ff       	call   c000198e <ld_word>
c0003da1:	66 85 c0             	test   ax,ax
c0003da4:	74 07                	je     c0003dad <cmp_lfn+0x21>
c0003da6:	31 c0                	xor    eax,eax
c0003da8:	e9 9a 00 00 00       	jmp    c0003e47 <cmp_lfn+0xbb>
c0003dad:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003daf:	bd 01 00 00 00       	mov    ebp,0x1
c0003db4:	83 e3 3f             	and    ebx,0x3f
c0003db7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003dbf:	4b                   	dec    ebx
c0003dc0:	6b db 0d             	imul   ebx,ebx,0xd
c0003dc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003dc7:	0f b6 80 60 fb 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe04a0]
c0003dce:	01 f8                	add    eax,edi
c0003dd0:	e8 b9 db ff ff       	call   c000198e <ld_word>
c0003dd5:	66 85 ed             	test   bp,bp
c0003dd8:	89 c6                	mov    esi,eax
c0003dda:	74 3c                	je     c0003e18 <cmp_lfn+0x8c>
c0003ddc:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003de2:	77 c2                	ja     c0003da6 <cmp_lfn+0x1a>
c0003de4:	83 ec 0c             	sub    esp,0xc
c0003de7:	0f b7 c0             	movzx  eax,ax
c0003dea:	50                   	push   eax
c0003deb:	e8 fa 44 00 00       	call   c00082ea <ff_wtoupper>
c0003df0:	89 c5                	mov    ebp,eax
c0003df2:	8d 43 01             	lea    eax,[ebx+0x1]
c0003df5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003df9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003dfd:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e01:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e04:	e8 e1 44 00 00       	call   c00082ea <ff_wtoupper>
c0003e09:	83 c4 10             	add    esp,0x10
c0003e0c:	39 c5                	cmp    ebp,eax
c0003e0e:	75 96                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e10:	89 f5                	mov    ebp,esi
c0003e12:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e16:	eb 04                	jmp    c0003e1c <cmp_lfn+0x90>
c0003e18:	66 46                	inc    si
c0003e1a:	75 8a                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e1c:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e20:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e25:	75 9c                	jne    c0003dc3 <cmp_lfn+0x37>
c0003e27:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e2a:	74 16                	je     c0003e42 <cmp_lfn+0xb6>
c0003e2c:	66 85 ed             	test   bp,bp
c0003e2f:	74 11                	je     c0003e42 <cmp_lfn+0xb6>
c0003e31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e35:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003e3a:	0f 94 c0             	sete   al
c0003e3d:	0f b6 c0             	movzx  eax,al
c0003e40:	eb 05                	jmp    c0003e47 <cmp_lfn+0xbb>
c0003e42:	b8 01 00 00 00       	mov    eax,0x1
c0003e47:	83 c4 1c             	add    esp,0x1c
c0003e4a:	5b                   	pop    ebx
c0003e4b:	5e                   	pop    esi
c0003e4c:	5f                   	pop    edi
c0003e4d:	5d                   	pop    ebp
c0003e4e:	c3                   	ret    

c0003e4f <dir_find>:
c0003e4f:	55                   	push   ebp
c0003e50:	31 d2                	xor    edx,edx
c0003e52:	57                   	push   edi
c0003e53:	56                   	push   esi
c0003e54:	53                   	push   ebx
c0003e55:	89 c3                	mov    ebx,eax
c0003e57:	83 ec 1c             	sub    esp,0x1c
c0003e5a:	8b 30                	mov    esi,DWORD PTR [eax]
c0003e5c:	e8 89 f0 ff ff       	call   c0002eea <dir_sdi>
c0003e61:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e64:	85 c0                	test   eax,eax
c0003e66:	0f 85 9e 01 00 00    	jne    c000400a <dir_find+0x1bb>
c0003e6c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003e6f:	0f 85 8d 00 00 00    	jne    c0003f02 <dir_find+0xb3>
c0003e75:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003e78:	e8 30 fe ff ff       	call   c0003cad <xname_sum>
c0003e7d:	89 c7                	mov    edi,eax
c0003e7f:	31 d2                	xor    edx,edx
c0003e81:	89 d8                	mov    eax,ebx
c0003e83:	e8 72 f8 ff ff       	call   c00036fa <dir_read>
c0003e88:	85 c0                	test   eax,eax
c0003e8a:	0f 85 5e 01 00 00    	jne    c0003fee <dir_find+0x19f>
c0003e90:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003e93:	8d 41 24             	lea    eax,[ecx+0x24]
c0003e96:	e8 f3 da ff ff       	call   c000198e <ld_word>
c0003e9b:	66 39 f8             	cmp    ax,di
c0003e9e:	75 df                	jne    c0003e7f <dir_find+0x30>
c0003ea0:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003ea3:	31 ed                	xor    ebp,ebp
c0003ea5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003ea9:	ba 40 00 00 00       	mov    edx,0x40
c0003eae:	89 e9                	mov    ecx,ebp
c0003eb0:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003eb4:	0f 84 42 01 00 00    	je     c0003ffc <dir_find+0x1ad>
c0003eba:	f6 c2 1f             	test   dl,0x1f
c0003ebd:	75 03                	jne    c0003ec2 <dir_find+0x73>
c0003ebf:	83 c2 02             	add    edx,0x2
c0003ec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003ec6:	89 d0                	mov    eax,edx
c0003ec8:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003ecb:	e8 be da ff ff       	call   c000198e <ld_word>
c0003ed0:	83 ec 0c             	sub    esp,0xc
c0003ed3:	0f b7 c0             	movzx  eax,ax
c0003ed6:	50                   	push   eax
c0003ed7:	e8 0e 44 00 00       	call   c00082ea <ff_wtoupper>
c0003edc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003ee0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003ee3:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003ee7:	89 04 24             	mov    DWORD PTR [esp],eax
c0003eea:	e8 fb 43 00 00       	call   c00082ea <ff_wtoupper>
c0003eef:	83 c4 10             	add    esp,0x10
c0003ef2:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003ef6:	75 87                	jne    c0003e7f <dir_find+0x30>
c0003ef8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003efc:	45                   	inc    ebp
c0003efd:	83 c2 02             	add    edx,0x2
c0003f00:	eb ac                	jmp    c0003eae <dir_find+0x5f>
c0003f02:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f09:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f0e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f13:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f16:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f19:	89 f0                	mov    eax,esi
c0003f1b:	e8 4c e2 ff ff       	call   c000216c <move_window>
c0003f20:	85 c0                	test   eax,eax
c0003f22:	0f 85 c6 00 00 00    	jne    c0003fee <dir_find+0x19f>
c0003f28:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003f2b:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003f2e:	84 c9                	test   cl,cl
c0003f30:	0f 84 bd 00 00 00    	je     c0003ff3 <dir_find+0x1a4>
c0003f36:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003f39:	88 d0                	mov    al,dl
c0003f3b:	83 e0 3f             	and    eax,0x3f
c0003f3e:	80 f9 e5             	cmp    cl,0xe5
c0003f41:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003f44:	0f 84 87 00 00 00    	je     c0003fd1 <dir_find+0x182>
c0003f4a:	80 e2 08             	and    dl,0x8
c0003f4d:	74 06                	je     c0003f55 <dir_find+0x106>
c0003f4f:	3c 0f                	cmp    al,0xf
c0003f51:	75 7e                	jne    c0003fd1 <dir_find+0x182>
c0003f53:	eb 04                	jmp    c0003f59 <dir_find+0x10a>
c0003f55:	3c 0f                	cmp    al,0xf
c0003f57:	75 4c                	jne    c0003fa5 <dir_find+0x156>
c0003f59:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003f5d:	75 7e                	jne    c0003fdd <dir_find+0x18e>
c0003f5f:	f6 c1 40             	test   cl,0x40
c0003f62:	74 12                	je     c0003f76 <dir_find+0x127>
c0003f64:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003f67:	83 e1 bf             	and    ecx,0xffffffbf
c0003f6a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003f6e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003f71:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003f74:	eb 06                	jmp    c0003f7c <dir_find+0x12d>
c0003f76:	89 f8                	mov    eax,edi
c0003f78:	38 c8                	cmp    al,cl
c0003f7a:	75 5c                	jne    c0003fd8 <dir_find+0x189>
c0003f7c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003f80:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f85:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003f88:	75 53                	jne    c0003fdd <dir_find+0x18e>
c0003f8a:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0003f8e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f91:	89 ea                	mov    edx,ebp
c0003f93:	e8 f4 fd ff ff       	call   c0003d8c <cmp_lfn>
c0003f98:	85 c0                	test   eax,eax
c0003f9a:	74 41                	je     c0003fdd <dir_find+0x18e>
c0003f9c:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0003fa0:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003fa3:	eb 38                	jmp    c0003fdd <dir_find+0x18e>
c0003fa5:	89 f8                	mov    eax,edi
c0003fa7:	84 c0                	test   al,al
c0003fa9:	75 0d                	jne    c0003fb8 <dir_find+0x169>
c0003fab:	89 e8                	mov    eax,ebp
c0003fad:	e8 98 de ff ff       	call   c0001e4a <sum_sfn>
c0003fb2:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0003fb6:	74 52                	je     c000400a <dir_find+0x1bb>
c0003fb8:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0003fbc:	75 13                	jne    c0003fd1 <dir_find+0x182>
c0003fbe:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0003fc1:	b9 0b 00 00 00       	mov    ecx,0xb
c0003fc6:	89 e8                	mov    eax,ebp
c0003fc8:	e8 60 da ff ff       	call   c0001a2d <mem_cmp>
c0003fcd:	85 c0                	test   eax,eax
c0003fcf:	74 39                	je     c000400a <dir_find+0x1bb>
c0003fd1:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fd8:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fdd:	31 d2                	xor    edx,edx
c0003fdf:	89 d8                	mov    eax,ebx
c0003fe1:	e8 5c f4 ff ff       	call   c0003442 <dir_next>
c0003fe6:	85 c0                	test   eax,eax
c0003fe8:	0f 84 25 ff ff ff    	je     c0003f13 <dir_find+0xc4>
c0003fee:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ff1:	eb 17                	jmp    c000400a <dir_find+0x1bb>
c0003ff3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0003ffa:	eb 0e                	jmp    c000400a <dir_find+0x1bb>
c0003ffc:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003fff:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004004:	0f 85 75 fe ff ff    	jne    c0003e7f <dir_find+0x30>
c000400a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000400d:	83 c4 1c             	add    esp,0x1c
c0004010:	5b                   	pop    ebx
c0004011:	5e                   	pop    esi
c0004012:	5f                   	pop    edi
c0004013:	5d                   	pop    ebp
c0004014:	c3                   	ret    

c0004015 <dir_register>:
c0004015:	55                   	push   ebp
c0004016:	57                   	push   edi
c0004017:	56                   	push   esi
c0004018:	be 06 00 00 00       	mov    esi,0x6
c000401d:	53                   	push   ebx
c000401e:	83 ec 6c             	sub    esp,0x6c
c0004021:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004025:	0f 85 62 02 00 00    	jne    c000428d <dir_register+0x278>
c000402b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000402d:	31 ff                	xor    edi,edi
c000402f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004032:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004037:	74 03                	je     c000403c <dir_register+0x27>
c0004039:	47                   	inc    edi
c000403a:	eb f6                	jmp    c0004032 <dir_register+0x1d>
c000403c:	89 c3                	mov    ebx,eax
c000403e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004042:	0f 85 e1 00 00 00    	jne    c0004129 <dir_register+0x114>
c0004048:	83 c7 0e             	add    edi,0xe
c000404b:	b9 0f 00 00 00       	mov    ecx,0xf
c0004050:	89 f8                	mov    eax,edi
c0004052:	31 d2                	xor    edx,edx
c0004054:	f7 f1                	div    ecx
c0004056:	8d 50 02             	lea    edx,[eax+0x2]
c0004059:	89 c7                	mov    edi,eax
c000405b:	89 d8                	mov    eax,ebx
c000405d:	e8 12 f8 ff ff       	call   c0003874 <dir_alloc>
c0004062:	89 c6                	mov    esi,eax
c0004064:	85 c0                	test   eax,eax
c0004066:	0f 85 21 02 00 00    	jne    c000428d <dir_register+0x278>
c000406c:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004072:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004075:	c1 e7 05             	shl    edi,0x5
c0004078:	29 f8                	sub    eax,edi
c000407a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000407d:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004080:	a8 04                	test   al,0x4
c0004082:	0f 84 91 00 00 00    	je     c0004119 <dir_register+0x104>
c0004088:	83 e0 fb             	and    eax,0xfffffffb
c000408b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000408e:	89 d8                	mov    eax,ebx
c0004090:	e8 25 ec ff ff       	call   c0002cba <fill_first_frag>
c0004095:	85 c0                	test   eax,eax
c0004097:	0f 85 ee 01 00 00    	jne    c000428b <dir_register+0x276>
c000409d:	83 c9 ff             	or     ecx,0xffffffff
c00040a0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00040a3:	89 d8                	mov    eax,ebx
c00040a5:	e8 db eb ff ff       	call   c0002c85 <fill_last_frag>
c00040aa:	85 c0                	test   eax,eax
c00040ac:	0f 85 d9 01 00 00    	jne    c000428b <dir_register+0x276>
c00040b2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00040b6:	74 61                	je     c0004119 <dir_register+0x104>
c00040b8:	89 da                	mov    edx,ebx
c00040ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00040be:	e8 ea f5 ff ff       	call   c00036ad <load_obj_xdir>
c00040c3:	85 c0                	test   eax,eax
c00040c5:	0f 85 c0 01 00 00    	jne    c000428b <dir_register+0x276>
c00040cb:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00040cf:	31 c9                	xor    ecx,ecx
c00040d1:	c1 e2 09             	shl    edx,0x9
c00040d4:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00040d7:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00040da:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00040dd:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00040e0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040e3:	83 c0 38             	add    eax,0x38
c00040e6:	e8 1c d9 ff ff       	call   c0001a07 <st_qword>
c00040eb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040ee:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040f1:	83 c0 28             	add    eax,0x28
c00040f4:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00040f7:	e8 0b d9 ff ff       	call   c0001a07 <st_qword>
c00040fc:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040ff:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004102:	83 c8 01             	or     eax,0x1
c0004105:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c0004108:	8d 44 24 14          	lea    eax,[esp+0x14]
c000410c:	e8 db f7 ff ff       	call   c00038ec <store_xdir>
c0004111:	85 c0                	test   eax,eax
c0004113:	0f 85 72 01 00 00    	jne    c000428b <dir_register+0x276>
c0004119:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000411c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000411f:	e8 c1 fb ff ff       	call   c0003ce5 <create_xdir>
c0004124:	e9 64 01 00 00       	jmp    c000428d <dir_register+0x278>
c0004129:	8d 40 3c             	lea    eax,[eax+0x3c]
c000412c:	b9 0c 00 00 00       	mov    ecx,0xc
c0004131:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004135:	89 c2                	mov    edx,eax
c0004137:	8d 44 24 14          	lea    eax,[esp+0x14]
c000413b:	e8 cd d8 ff ff       	call   c0001a0d <mem_cpy>
c0004140:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004145:	74 58                	je     c000419f <dir_register+0x18a>
c0004147:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000414b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004153:	83 ec 0c             	sub    esp,0xc
c0004156:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004159:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000415d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004161:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004165:	e8 24 dc ff ff       	call   c0001d8e <gen_numname>
c000416a:	89 d8                	mov    eax,ebx
c000416c:	e8 de fc ff ff       	call   c0003e4f <dir_find>
c0004171:	83 c4 10             	add    esp,0x10
c0004174:	89 c6                	mov    esi,eax
c0004176:	85 c0                	test   eax,eax
c0004178:	75 15                	jne    c000418f <dir_register+0x17a>
c000417a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000417e:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004183:	75 ce                	jne    c0004153 <dir_register+0x13e>
c0004185:	be 07 00 00 00       	mov    esi,0x7
c000418a:	e9 fe 00 00 00       	jmp    c000428d <dir_register+0x278>
c000418f:	83 f8 04             	cmp    eax,0x4
c0004192:	0f 85 f5 00 00 00    	jne    c000428d <dir_register+0x278>
c0004198:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000419c:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000419f:	b9 01 00 00 00       	mov    ecx,0x1
c00041a4:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00041a9:	74 0f                	je     c00041ba <dir_register+0x1a5>
c00041ab:	b9 0d 00 00 00       	mov    ecx,0xd
c00041b0:	8d 47 0c             	lea    eax,[edi+0xc]
c00041b3:	31 d2                	xor    edx,edx
c00041b5:	f7 f1                	div    ecx
c00041b7:	8d 48 01             	lea    ecx,[eax+0x1]
c00041ba:	89 ca                	mov    edx,ecx
c00041bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041c0:	89 d8                	mov    eax,ebx
c00041c2:	e8 ad f6 ff ff       	call   c0003874 <dir_alloc>
c00041c7:	89 c6                	mov    esi,eax
c00041c9:	85 c0                	test   eax,eax
c00041cb:	0f 85 bc 00 00 00    	jne    c000428d <dir_register+0x278>
c00041d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041d5:	49                   	dec    ecx
c00041d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041da:	74 6a                	je     c0004246 <dir_register+0x231>
c00041dc:	89 c8                	mov    eax,ecx
c00041de:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00041e1:	c1 e0 05             	shl    eax,0x5
c00041e4:	29 c2                	sub    edx,eax
c00041e6:	89 d8                	mov    eax,ebx
c00041e8:	e8 fd ec ff ff       	call   c0002eea <dir_sdi>
c00041ed:	89 c6                	mov    esi,eax
c00041ef:	85 c0                	test   eax,eax
c00041f1:	0f 85 96 00 00 00    	jne    c000428d <dir_register+0x278>
c00041f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00041fb:	e8 4a dc ff ff       	call   c0001e4a <sum_sfn>
c0004200:	0f b6 f8             	movzx  edi,al
c0004203:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004206:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004209:	89 e8                	mov    eax,ebp
c000420b:	e8 5c df ff ff       	call   c000216c <move_window>
c0004210:	89 c6                	mov    esi,eax
c0004212:	85 c0                	test   eax,eax
c0004214:	75 77                	jne    c000428d <dir_register+0x278>
c0004216:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000421b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000421e:	83 ec 0c             	sub    esp,0xc
c0004221:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004224:	57                   	push   edi
c0004225:	e8 e0 da ff ff       	call   c0001d0a <put_lfn>
c000422a:	31 d2                	xor    edx,edx
c000422c:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004230:	89 d8                	mov    eax,ebx
c0004232:	e8 0b f2 ff ff       	call   c0003442 <dir_next>
c0004237:	83 c4 10             	add    esp,0x10
c000423a:	89 c6                	mov    esi,eax
c000423c:	85 c0                	test   eax,eax
c000423e:	75 4d                	jne    c000428d <dir_register+0x278>
c0004240:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004244:	75 bd                	jne    c0004203 <dir_register+0x1ee>
c0004246:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004249:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000424c:	89 e8                	mov    eax,ebp
c000424e:	e8 19 df ff ff       	call   c000216c <move_window>
c0004253:	89 c6                	mov    esi,eax
c0004255:	85 c0                	test   eax,eax
c0004257:	75 34                	jne    c000428d <dir_register+0x278>
c0004259:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000425c:	b9 20 00 00 00       	mov    ecx,0x20
c0004261:	31 d2                	xor    edx,edx
c0004263:	e8 ba d7 ff ff       	call   c0001a22 <mem_set>
c0004268:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000426b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000426f:	b9 0b 00 00 00       	mov    ecx,0xb
c0004274:	e8 94 d7 ff ff       	call   c0001a0d <mem_cpy>
c0004279:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000427c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000427f:	83 e0 18             	and    eax,0x18
c0004282:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004285:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004289:	eb 02                	jmp    c000428d <dir_register+0x278>
c000428b:	89 c6                	mov    esi,eax
c000428d:	83 c4 6c             	add    esp,0x6c
c0004290:	89 f0                	mov    eax,esi
c0004292:	5b                   	pop    ebx
c0004293:	5e                   	pop    esi
c0004294:	5f                   	pop    edi
c0004295:	5d                   	pop    ebp
c0004296:	c3                   	ret    

c0004297 <sync_fs>:
c0004297:	56                   	push   esi
c0004298:	53                   	push   ebx
c0004299:	53                   	push   ebx
c000429a:	89 c3                	mov    ebx,eax
c000429c:	e8 37 de ff ff       	call   c00020d8 <sync_window>
c00042a1:	85 c0                	test   eax,eax
c00042a3:	0f 85 b1 00 00 00    	jne    c000435a <sync_fs+0xc3>
c00042a9:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00042ac:	0f 85 8e 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042b2:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00042b6:	0f 85 84 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042bc:	b9 00 02 00 00       	mov    ecx,0x200
c00042c1:	8d 73 54             	lea    esi,[ebx+0x54]
c00042c4:	31 d2                	xor    edx,edx
c00042c6:	89 f0                	mov    eax,esi
c00042c8:	e8 55 d7 ff ff       	call   c0001a22 <mem_set>
c00042cd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00042d3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00042d8:	e8 23 d7 ff ff       	call   c0001a00 <st_word>
c00042dd:	ba 52 52 61 41       	mov    edx,0x41615252
c00042e2:	89 f0                	mov    eax,esi
c00042e4:	e8 1b d7 ff ff       	call   c0001a04 <st_dword>
c00042e9:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00042ef:	ba 72 72 41 61       	mov    edx,0x61417272
c00042f4:	e8 0b d7 ff ff       	call   c0001a04 <st_dword>
c00042f9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042fc:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004302:	e8 fd d6 ff ff       	call   c0001a04 <st_dword>
c0004307:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000430a:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004310:	e8 ef d6 ff ff       	call   c0001a04 <st_dword>
c0004315:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0004318:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000431b:	83 c0 01             	add    eax,0x1
c000431e:	83 d2 00             	adc    edx,0x0
c0004321:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004324:	83 ec 0c             	sub    esp,0xc
c0004327:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000432a:	6a 01                	push   0x1
c000432c:	52                   	push   edx
c000432d:	50                   	push   eax
c000432e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004332:	56                   	push   esi
c0004333:	50                   	push   eax
c0004334:	e8 20 d6 ff ff       	call   c0001959 <disk_write>
c0004339:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000433d:	83 c4 20             	add    esp,0x20
c0004340:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004344:	51                   	push   ecx
c0004345:	6a 00                	push   0x0
c0004347:	6a 00                	push   0x0
c0004349:	50                   	push   eax
c000434a:	e8 20 d6 ff ff       	call   c000196f <disk_ioctl>
c000434f:	83 c4 10             	add    esp,0x10
c0004352:	85 c0                	test   eax,eax
c0004354:	0f 95 c0             	setne  al
c0004357:	0f b6 c0             	movzx  eax,al
c000435a:	5a                   	pop    edx
c000435b:	5b                   	pop    ebx
c000435c:	5e                   	pop    esi
c000435d:	c3                   	ret    

c000435e <create_partition>:
c000435e:	55                   	push   ebp
c000435f:	0f b6 c0             	movzx  eax,al
c0004362:	57                   	push   edi
c0004363:	56                   	push   esi
c0004364:	53                   	push   ebx
c0004365:	83 ec 60             	sub    esp,0x60
c0004368:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000436c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004370:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004374:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004378:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000437c:	50                   	push   eax
c000437d:	6a 01                	push   0x1
c000437f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004383:	e8 e7 d5 ff ff       	call   c000196f <disk_ioctl>
c0004388:	83 c4 10             	add    esp,0x10
c000438b:	85 c0                	test   eax,eax
c000438d:	74 0a                	je     c0004399 <create_partition+0x3b>
c000438f:	b8 01 00 00 00       	mov    eax,0x1
c0004394:	e9 67 05 00 00       	jmp    c0004900 <create_partition+0x5a2>
c0004399:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000439d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00043a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00043a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00043a9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00043ae:	0f 86 ed 03 00 00    	jbe    c00047a1 <create_partition+0x443>
c00043b4:	83 c0 df             	add    eax,0xffffffdf
c00043b7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00043bf:	83 d2 ff             	adc    edx,0xffffffff
c00043c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00043ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043d2:	83 c0 bd             	add    eax,0xffffffbd
c00043d5:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00043dc:	83 d2 ff             	adc    edx,0xffffffff
c00043df:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00043e3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00043e7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00043ef:	be 22 00 00 00       	mov    esi,0x22
c00043f4:	31 ff                	xor    edi,edi
c00043f6:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00043fe:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004406:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000440e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004412:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004418:	75 0e                	jne    c0004428 <create_partition+0xca>
c000441a:	b9 00 02 00 00       	mov    ecx,0x200
c000441f:	31 d2                	xor    edx,edx
c0004421:	89 d8                	mov    eax,ebx
c0004423:	e8 fa d5 ff ff       	call   c0001a22 <mem_set>
c0004428:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000442c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004430:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004434:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004437:	0f 84 23 01 00 00    	je     c0004560 <create_partition+0x202>
c000443d:	89 f0                	mov    eax,esi
c000443f:	89 fa                	mov    edx,edi
c0004441:	05 ff 07 00 00       	add    eax,0x7ff
c0004446:	83 d2 00             	adc    edx,0x0
c0004449:	89 c1                	mov    ecx,eax
c000444b:	89 d7                	mov    edi,edx
c000444d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004453:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004457:	89 ce                	mov    esi,ecx
c0004459:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000445d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004461:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004465:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004468:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000446c:	89 04 24             	mov    DWORD PTR [esp],eax
c000446f:	b8 64 00 00 00       	mov    eax,0x64
c0004474:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004477:	b8 00 00 00 00       	mov    eax,0x0
c000447c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004480:	72 41                	jb     c00044c3 <create_partition+0x165>
c0004482:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000448a:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000448e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004493:	01 c1                	add    ecx,eax
c0004495:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004499:	f7 24 24             	mul    DWORD PTR [esp]
c000449c:	6a 00                	push   0x0
c000449e:	01 ca                	add    edx,ecx
c00044a0:	6a 64                	push   0x64
c00044a2:	52                   	push   edx
c00044a3:	50                   	push   eax
c00044a4:	e8 83 a6 01 00       	call   c001eb2c <__udivdi3>
c00044a9:	83 c4 10             	add    esp,0x10
c00044ac:	05 ff 07 00 00       	add    eax,0x7ff
c00044b1:	83 d2 00             	adc    edx,0x0
c00044b4:	89 c1                	mov    ecx,eax
c00044b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ba:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044c0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00044c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00044c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00044ca:	01 f0                	add    eax,esi
c00044cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00044d0:	11 fa                	adc    edx,edi
c00044d2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00044d6:	19 d1                	sbb    ecx,edx
c00044d8:	73 2e                	jae    c0004508 <create_partition+0x1aa>
c00044da:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00044de:	89 f8                	mov    eax,edi
c00044e0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00044e7:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00044eb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044f3:	73 6b                	jae    c0004560 <create_partition+0x202>
c00044f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00044f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00044fd:	29 f0                	sub    eax,esi
c00044ff:	19 fa                	sbb    edx,edi
c0004501:	89 04 24             	mov    DWORD PTR [esp],eax
c0004504:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000450c:	0b 04 24             	or     eax,DWORD PTR [esp]
c000450f:	74 4f                	je     c0004560 <create_partition+0x202>
c0004511:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004514:	b9 10 00 00 00       	mov    ecx,0x10
c0004519:	ba 70 fb 01 c0       	mov    edx,0xc001fb70
c000451e:	e8 ea d4 ff ff       	call   c0001a0d <mem_cpy>
c0004523:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004527:	b9 10 00 00 00       	mov    ecx,0x10
c000452c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004530:	e8 2c db ff ff       	call   c0002061 <make_rand>
c0004535:	89 f2                	mov    edx,esi
c0004537:	89 f9                	mov    ecx,edi
c0004539:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000453d:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004541:	e8 c1 d4 ff ff       	call   c0001a07 <st_qword>
c0004546:	03 34 24             	add    esi,DWORD PTR [esp]
c0004549:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000454d:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004551:	89 f2                	mov    edx,esi
c0004553:	89 f9                	mov    ecx,edi
c0004555:	83 c2 ff             	add    edx,0xffffffff
c0004558:	83 d1 ff             	adc    ecx,0xffffffff
c000455b:	e8 a7 d4 ff ff       	call   c0001a07 <st_qword>
c0004560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004564:	83 e8 80             	sub    eax,0xffffff80
c0004567:	89 c5                	mov    ebp,eax
c0004569:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000456d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004573:	75 6b                	jne    c00045e0 <create_partition+0x282>
c0004575:	45                   	inc    ebp
c0004576:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000457a:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000457f:	e8 39 da ff ff       	call   c0001fbd <crc32>
c0004584:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000458a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000458e:	75 e5                	jne    c0004575 <create_partition+0x217>
c0004590:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004594:	31 d2                	xor    edx,edx
c0004596:	83 ec 0c             	sub    esp,0xc
c0004599:	c1 ed 09             	shr    ebp,0x9
c000459c:	6a 01                	push   0x1
c000459e:	8d 45 02             	lea    eax,[ebp+0x2]
c00045a1:	52                   	push   edx
c00045a2:	50                   	push   eax
c00045a3:	53                   	push   ebx
c00045a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045a8:	e8 ac d3 ff ff       	call   c0001959 <disk_write>
c00045ad:	83 c4 20             	add    esp,0x20
c00045b0:	85 c0                	test   eax,eax
c00045b2:	0f 85 d7 fd ff ff    	jne    c000438f <create_partition+0x31>
c00045b8:	83 ec 0c             	sub    esp,0xc
c00045bb:	31 d2                	xor    edx,edx
c00045bd:	6a 01                	push   0x1
c00045bf:	89 e8                	mov    eax,ebp
c00045c1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00045c5:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00045c9:	52                   	push   edx
c00045ca:	50                   	push   eax
c00045cb:	53                   	push   ebx
c00045cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045d0:	e8 84 d3 ff ff       	call   c0001959 <disk_write>
c00045d5:	83 c4 20             	add    esp,0x20
c00045d8:	85 c0                	test   eax,eax
c00045da:	0f 85 af fd ff ff    	jne    c000438f <create_partition+0x31>
c00045e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00045e8:	3d 00 40 00 00       	cmp    eax,0x4000
c00045ed:	74 0d                	je     c00045fc <create_partition+0x29e>
c00045ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00045f3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045f7:	e9 12 fe ff ff       	jmp    c000440e <create_partition+0xb0>
c00045fc:	31 d2                	xor    edx,edx
c00045fe:	b9 00 02 00 00       	mov    ecx,0x200
c0004603:	89 d8                	mov    eax,ebx
c0004605:	8d 6b 20             	lea    ebp,[ebx+0x20]
c0004608:	e8 15 d4 ff ff       	call   c0001a22 <mem_set>
c000460d:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004610:	b9 10 00 00 00       	mov    ecx,0x10
c0004615:	ba 60 fa 01 c0       	mov    edx,0xc001fa60
c000461a:	89 d8                	mov    eax,ebx
c000461c:	e8 ec d3 ff ff       	call   c0001a0d <mem_cpy>
c0004621:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004625:	8d 43 58             	lea    eax,[ebx+0x58]
c0004628:	f7 d2                	not    edx
c000462a:	e8 d5 d3 ff ff       	call   c0001a04 <st_dword>
c000462f:	8d 43 18             	lea    eax,[ebx+0x18]
c0004632:	31 c9                	xor    ecx,ecx
c0004634:	89 04 24             	mov    DWORD PTR [esp],eax
c0004637:	ba 01 00 00 00       	mov    edx,0x1
c000463c:	e8 c6 d3 ff ff       	call   c0001a07 <st_qword>
c0004641:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004645:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004649:	83 c2 ff             	add    edx,0xffffffff
c000464c:	89 e8                	mov    eax,ebp
c000464e:	83 d1 ff             	adc    ecx,0xffffffff
c0004651:	e8 b1 d3 ff ff       	call   c0001a07 <st_qword>
c0004656:	31 c9                	xor    ecx,ecx
c0004658:	8d 43 28             	lea    eax,[ebx+0x28]
c000465b:	ba 22 00 00 00       	mov    edx,0x22
c0004660:	e8 a2 d3 ff ff       	call   c0001a07 <st_qword>
c0004665:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004669:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000466d:	83 c2 de             	add    edx,0xffffffde
c0004670:	8d 43 30             	lea    eax,[ebx+0x30]
c0004673:	83 d1 ff             	adc    ecx,0xffffffff
c0004676:	31 f6                	xor    esi,esi
c0004678:	e8 8a d3 ff ff       	call   c0001a07 <st_qword>
c000467d:	8d 43 54             	lea    eax,[ebx+0x54]
c0004680:	ba 80 00 00 00       	mov    edx,0x80
c0004685:	e8 7a d3 ff ff       	call   c0001a04 <st_dword>
c000468a:	8d 43 50             	lea    eax,[ebx+0x50]
c000468d:	ba 80 00 00 00       	mov    edx,0x80
c0004692:	e8 6d d3 ff ff       	call   c0001a04 <st_dword>
c0004697:	ba 02 00 00 00       	mov    edx,0x2
c000469c:	89 f8                	mov    eax,edi
c000469e:	e8 61 d3 ff ff       	call   c0001a04 <st_dword>
c00046a3:	8d 53 38             	lea    edx,[ebx+0x38]
c00046a6:	b9 10 00 00 00       	mov    ecx,0x10
c00046ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046af:	e8 ad d9 ff ff       	call   c0002061 <make_rand>
c00046b4:	83 c8 ff             	or     eax,0xffffffff
c00046b7:	46                   	inc    esi
c00046b8:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00046bd:	e8 fb d8 ff ff       	call   c0001fbd <crc32>
c00046c2:	83 fe 5c             	cmp    esi,0x5c
c00046c5:	75 f0                	jne    c00046b7 <create_partition+0x359>
c00046c7:	f7 d0                	not    eax
c00046c9:	8d 73 10             	lea    esi,[ebx+0x10]
c00046cc:	89 c2                	mov    edx,eax
c00046ce:	89 f0                	mov    eax,esi
c00046d0:	e8 2f d3 ff ff       	call   c0001a04 <st_dword>
c00046d5:	83 ec 0c             	sub    esp,0xc
c00046d8:	6a 01                	push   0x1
c00046da:	6a 00                	push   0x0
c00046dc:	6a 01                	push   0x1
c00046de:	53                   	push   ebx
c00046df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00046e3:	e8 71 d2 ff ff       	call   c0001959 <disk_write>
c00046e8:	83 c4 20             	add    esp,0x20
c00046eb:	85 c0                	test   eax,eax
c00046ed:	0f 85 9c fc ff ff    	jne    c000438f <create_partition+0x31>
c00046f3:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046f7:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046fb:	83 c2 ff             	add    edx,0xffffffff
c00046fe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004701:	83 d1 ff             	adc    ecx,0xffffffff
c0004704:	e8 fe d2 ff ff       	call   c0001a07 <st_qword>
c0004709:	ba 01 00 00 00       	mov    edx,0x1
c000470e:	31 c9                	xor    ecx,ecx
c0004710:	89 e8                	mov    eax,ebp
c0004712:	e8 f0 d2 ff ff       	call   c0001a07 <st_qword>
c0004717:	89 f8                	mov    eax,edi
c0004719:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000471d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004721:	31 ff                	xor    edi,edi
c0004723:	e8 df d2 ff ff       	call   c0001a07 <st_qword>
c0004728:	89 f0                	mov    eax,esi
c000472a:	31 d2                	xor    edx,edx
c000472c:	e8 d3 d2 ff ff       	call   c0001a04 <st_dword>
c0004731:	83 c8 ff             	or     eax,0xffffffff
c0004734:	47                   	inc    edi
c0004735:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c000473a:	e8 7e d8 ff ff       	call   c0001fbd <crc32>
c000473f:	83 ff 5c             	cmp    edi,0x5c
c0004742:	75 f0                	jne    c0004734 <create_partition+0x3d6>
c0004744:	f7 d0                	not    eax
c0004746:	89 c2                	mov    edx,eax
c0004748:	89 f0                	mov    eax,esi
c000474a:	e8 b5 d2 ff ff       	call   c0001a04 <st_dword>
c000474f:	83 ec 0c             	sub    esp,0xc
c0004752:	6a 01                	push   0x1
c0004754:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004758:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000475c:	83 c0 ff             	add    eax,0xffffffff
c000475f:	83 d2 ff             	adc    edx,0xffffffff
c0004762:	52                   	push   edx
c0004763:	50                   	push   eax
c0004764:	53                   	push   ebx
c0004765:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004769:	e8 eb d1 ff ff       	call   c0001959 <disk_write>
c000476e:	83 c4 20             	add    esp,0x20
c0004771:	85 c0                	test   eax,eax
c0004773:	0f 85 16 fc ff ff    	jne    c000438f <create_partition+0x31>
c0004779:	31 d2                	xor    edx,edx
c000477b:	89 d8                	mov    eax,ebx
c000477d:	b9 00 02 00 00       	mov    ecx,0x200
c0004782:	e8 9b d2 ff ff       	call   c0001a22 <mem_set>
c0004787:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000478d:	b9 10 00 00 00       	mov    ecx,0x10
c0004792:	ba 70 fa 01 c0       	mov    edx,0xc001fa70
c0004797:	e8 71 d2 ff ff       	call   c0001a0d <mem_cpy>
c000479c:	e9 21 01 00 00       	jmp    c00048c2 <create_partition+0x564>
c00047a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00047a5:	b9 05 00 00 00       	mov    ecx,0x5
c00047aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00047ad:	bf 08 00 00 00       	mov    edi,0x8
c00047b2:	89 f8                	mov    eax,edi
c00047b4:	31 d2                	xor    edx,edx
c00047b6:	0f b6 f0             	movzx  esi,al
c00047b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047bc:	f7 f6                	div    esi
c00047be:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00047c3:	76 0a                	jbe    c00047cf <create_partition+0x471>
c00047c5:	d1 e7                	shl    edi,1
c00047c7:	49                   	dec    ecx
c00047c8:	75 e8                	jne    c00047b2 <create_partition+0x454>
c00047ca:	bf ff ff ff ff       	mov    edi,0xffffffff
c00047cf:	b9 00 02 00 00       	mov    ecx,0x200
c00047d4:	31 d2                	xor    edx,edx
c00047d6:	89 d8                	mov    eax,ebx
c00047d8:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00047de:	e8 3f d2 ff ff       	call   c0001a22 <mem_set>
c00047e3:	b9 64 00 00 00       	mov    ecx,0x64
c00047e8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047eb:	31 d2                	xor    edx,edx
c00047ed:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00047f5:	f7 f1                	div    ecx
c00047f7:	b9 3f 00 00 00       	mov    ecx,0x3f
c00047fc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004800:	89 f8                	mov    eax,edi
c0004802:	0f b6 c0             	movzx  eax,al
c0004805:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004809:	e9 80 00 00 00       	jmp    c000488e <create_partition+0x530>
c000480e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004811:	29 cf                	sub    edi,ecx
c0004813:	89 ca                	mov    edx,ecx
c0004815:	89 f0                	mov    eax,esi
c0004817:	bd 3f 00 00 00       	mov    ebp,0x3f
c000481c:	e8 e3 d1 ff ff       	call   c0001a04 <st_dword>
c0004821:	8d 46 04             	lea    eax,[esi+0x4]
c0004824:	89 fa                	mov    edx,edi
c0004826:	83 c6 10             	add    esi,0x10
c0004829:	e8 d6 d1 ff ff       	call   c0001a04 <st_dword>
c000482e:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004832:	31 d2                	xor    edx,edx
c0004834:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004837:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000483b:	89 c8                	mov    eax,ecx
c000483d:	01 f9                	add    ecx,edi
c000483f:	f7 f5                	div    ebp
c0004841:	89 d5                	mov    ebp,edx
c0004843:	31 d2                	xor    edx,edx
c0004845:	45                   	inc    ebp
c0004846:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000484a:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c000484d:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004850:	89 c2                	mov    edx,eax
c0004852:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004855:	c1 ea 02             	shr    edx,0x2
c0004858:	83 e2 c0             	and    edx,0xffffffc0
c000485b:	09 ea                	or     edx,ebp
c000485d:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004862:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004865:	31 d2                	xor    edx,edx
c0004867:	f7 f5                	div    ebp
c0004869:	89 d7                	mov    edi,edx
c000486b:	31 d2                	xor    edx,edx
c000486d:	47                   	inc    edi
c000486e:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004872:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004875:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004878:	89 c5                	mov    ebp,eax
c000487a:	c1 ed 02             	shr    ebp,0x2
c000487d:	83 e5 c0             	and    ebp,0xffffffc0
c0004880:	09 ef                	or     edi,ebp
c0004882:	89 fa                	mov    edx,edi
c0004884:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004887:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000488c:	74 34                	je     c00048c2 <create_partition+0x564>
c000488e:	85 c9                	test   ecx,ecx
c0004890:	74 30                	je     c00048c2 <create_partition+0x564>
c0004892:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004895:	76 2b                	jbe    c00048c2 <create_partition+0x564>
c0004897:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000489b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000489f:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c00048a2:	83 ff 64             	cmp    edi,0x64
c00048a5:	76 4b                	jbe    c00048f2 <create_partition+0x594>
c00048a7:	89 f8                	mov    eax,edi
c00048a9:	01 c8                	add    eax,ecx
c00048ab:	0f 82 5d ff ff ff    	jb     c000480e <create_partition+0x4b0>
c00048b1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048b4:	0f 87 54 ff ff ff    	ja     c000480e <create_partition+0x4b0>
c00048ba:	85 ff                	test   edi,edi
c00048bc:	0f 85 51 ff ff ff    	jne    c0004813 <create_partition+0x4b5>
c00048c2:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00048c8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00048cd:	e8 2e d1 ff ff       	call   c0001a00 <st_word>
c00048d2:	83 ec 0c             	sub    esp,0xc
c00048d5:	6a 01                	push   0x1
c00048d7:	6a 00                	push   0x0
c00048d9:	6a 00                	push   0x0
c00048db:	53                   	push   ebx
c00048dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048e0:	e8 74 d0 ff ff       	call   c0001959 <disk_write>
c00048e5:	83 c4 20             	add    esp,0x20
c00048e8:	85 c0                	test   eax,eax
c00048ea:	0f 95 c0             	setne  al
c00048ed:	0f b6 c0             	movzx  eax,al
c00048f0:	eb 0e                	jmp    c0004900 <create_partition+0x5a2>
c00048f2:	74 07                	je     c00048fb <create_partition+0x59d>
c00048f4:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00048f9:	eb ac                	jmp    c00048a7 <create_partition+0x549>
c00048fb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048fe:	eb a7                	jmp    c00048a7 <create_partition+0x549>
c0004900:	83 c4 5c             	add    esp,0x5c
c0004903:	5b                   	pop    ebx
c0004904:	5e                   	pop    esi
c0004905:	5f                   	pop    edi
c0004906:	5d                   	pop    ebp
c0004907:	c3                   	ret    

c0004908 <get_fileinfo>:
c0004908:	55                   	push   ebp
c0004909:	57                   	push   edi
c000490a:	56                   	push   esi
c000490b:	53                   	push   ebx
c000490c:	83 ec 1c             	sub    esp,0x1c
c000490f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004911:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004915:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004919:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000491c:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c000491f:	0f 84 dc 01 00 00    	je     c0004b01 <get_fileinfo+0x1f9>
c0004925:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004928:	75 0f                	jne    c0004939 <get_fileinfo+0x31>
c000492a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000492d:	83 c4 1c             	add    esp,0x1c
c0004930:	5b                   	pop    ebx
c0004931:	5e                   	pop    esi
c0004932:	5f                   	pop    edi
c0004933:	5d                   	pop    ebp
c0004934:	e9 58 d5 ff ff       	jmp    c0001e91 <get_xfileinfo>
c0004939:	89 d3                	mov    ebx,edx
c000493b:	89 c6                	mov    esi,eax
c000493d:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004941:	74 6a                	je     c00049ad <get_fileinfo+0xa5>
c0004943:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000494b:	31 ed                	xor    ebp,ebp
c000494d:	31 ff                	xor    edi,edi
c000494f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004953:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004957:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000495a:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c000495e:	66 85 d2             	test   dx,dx
c0004961:	74 3e                	je     c00049a1 <get_fileinfo+0x99>
c0004963:	66 85 ed             	test   bp,bp
c0004966:	75 0c                	jne    c0004974 <get_fileinfo+0x6c>
c0004968:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c000496e:	66 3d ff 07          	cmp    ax,0x7ff
c0004972:	76 22                	jbe    c0004996 <get_fileinfo+0x8e>
c0004974:	b9 ff 00 00 00       	mov    ecx,0xff
c0004979:	89 e8                	mov    eax,ebp
c000497b:	29 f9                	sub    ecx,edi
c000497d:	c1 e0 10             	shl    eax,0x10
c0004980:	09 d0                	or     eax,edx
c0004982:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004986:	e8 a3 d1 ff ff       	call   c0001b2e <put_utf>
c000498b:	84 c0                	test   al,al
c000498d:	74 10                	je     c000499f <get_fileinfo+0x97>
c000498f:	0f b6 c0             	movzx  eax,al
c0004992:	31 d2                	xor    edx,edx
c0004994:	01 c7                	add    edi,eax
c0004996:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c000499b:	89 d5                	mov    ebp,edx
c000499d:	eb b0                	jmp    c000494f <get_fileinfo+0x47>
c000499f:	31 ff                	xor    edi,edi
c00049a1:	66 85 ed             	test   bp,bp
c00049a4:	74 02                	je     c00049a8 <get_fileinfo+0xa0>
c00049a6:	31 ff                	xor    edi,edi
c00049a8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00049ad:	31 ff                	xor    edi,edi
c00049af:	31 c9                	xor    ecx,ecx
c00049b1:	83 f9 0a             	cmp    ecx,0xa
c00049b4:	0f 87 ad 00 00 00    	ja     c0004a67 <get_fileinfo+0x15f>
c00049ba:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049bd:	8d 69 01             	lea    ebp,[ecx+0x1]
c00049c0:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c00049c4:	66 83 fa 20          	cmp    dx,0x20
c00049c8:	0f 84 92 00 00 00    	je     c0004a60 <get_fileinfo+0x158>
c00049ce:	66 83 fa 05          	cmp    dx,0x5
c00049d2:	75 05                	jne    c00049d9 <get_fileinfo+0xd1>
c00049d4:	ba e5 00 00 00       	mov    edx,0xe5
c00049d9:	83 ff 0b             	cmp    edi,0xb
c00049dc:	77 0b                	ja     c00049e9 <get_fileinfo+0xe1>
c00049de:	83 fd 09             	cmp    ebp,0x9
c00049e1:	75 06                	jne    c00049e9 <get_fileinfo+0xe1>
c00049e3:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c00049e8:	47                   	inc    edi
c00049e9:	0f b7 c2             	movzx  eax,dx
c00049ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049f0:	e8 6d d0 ff ff       	call   c0001a62 <dbc_1st>
c00049f5:	85 c0                	test   eax,eax
c00049f7:	74 2f                	je     c0004a28 <get_fileinfo+0x120>
c00049f9:	83 fd 08             	cmp    ebp,0x8
c00049fc:	74 2a                	je     c0004a28 <get_fileinfo+0x120>
c00049fe:	83 fd 0b             	cmp    ebp,0xb
c0004a01:	74 25                	je     c0004a28 <get_fileinfo+0x120>
c0004a03:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a06:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a0a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a0e:	e8 52 d0 ff ff       	call   c0001a65 <dbc_2nd>
c0004a13:	85 c0                	test   eax,eax
c0004a15:	74 11                	je     c0004a28 <get_fileinfo+0x120>
c0004a17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a1b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a20:	c1 e2 08             	shl    edx,0x8
c0004a23:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a26:	09 c2                	or     edx,eax
c0004a28:	0f b7 d2             	movzx  edx,dx
c0004a2b:	50                   	push   eax
c0004a2c:	50                   	push   eax
c0004a2d:	68 b5 01 00 00       	push   0x1b5
c0004a32:	52                   	push   edx
c0004a33:	e8 46 38 00 00       	call   c000827e <ff_oem2uni>
c0004a38:	83 c4 10             	add    esp,0x10
c0004a3b:	66 85 c0             	test   ax,ax
c0004a3e:	75 04                	jne    c0004a44 <get_fileinfo+0x13c>
c0004a40:	31 ff                	xor    edi,edi
c0004a42:	eb 23                	jmp    c0004a67 <get_fileinfo+0x15f>
c0004a44:	b9 0c 00 00 00       	mov    ecx,0xc
c0004a49:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004a4d:	29 f9                	sub    ecx,edi
c0004a4f:	0f b7 c0             	movzx  eax,ax
c0004a52:	e8 d7 d0 ff ff       	call   c0001b2e <put_utf>
c0004a57:	84 c0                	test   al,al
c0004a59:	74 e5                	je     c0004a40 <get_fileinfo+0x138>
c0004a5b:	0f b6 c0             	movzx  eax,al
c0004a5e:	01 c7                	add    edi,eax
c0004a60:	89 e9                	mov    ecx,ebp
c0004a62:	e9 4a ff ff ff       	jmp    c00049b1 <get_fileinfo+0xa9>
c0004a67:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004a6c:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004a70:	75 54                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004a72:	85 ff                	test   edi,edi
c0004a74:	75 0b                	jne    c0004a81 <get_fileinfo+0x179>
c0004a76:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004a7a:	ba 01 00 00 00       	mov    edx,0x1
c0004a7f:	eb 33                	jmp    c0004ab4 <get_fileinfo+0x1ac>
c0004a81:	b1 08                	mov    cl,0x8
c0004a83:	31 d2                	xor    edx,edx
c0004a85:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004a8b:	84 c0                	test   al,al
c0004a8d:	74 25                	je     c0004ab4 <get_fileinfo+0x1ac>
c0004a8f:	66 83 f8 2e          	cmp    ax,0x2e
c0004a93:	74 16                	je     c0004aab <get_fileinfo+0x1a3>
c0004a95:	8d 78 bf             	lea    edi,[eax-0x41]
c0004a98:	66 83 ff 19          	cmp    di,0x19
c0004a9c:	77 0f                	ja     c0004aad <get_fileinfo+0x1a5>
c0004a9e:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004aa1:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004aa4:	74 07                	je     c0004aad <get_fileinfo+0x1a5>
c0004aa6:	83 c0 20             	add    eax,0x20
c0004aa9:	eb 02                	jmp    c0004aad <get_fileinfo+0x1a5>
c0004aab:	b1 10                	mov    cl,0x10
c0004aad:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004ab1:	42                   	inc    edx
c0004ab2:	eb d1                	jmp    c0004a85 <get_fileinfo+0x17d>
c0004ab4:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004ab9:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004abc:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004ac0:	75 04                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004ac2:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ac6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac9:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004acc:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004acf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ad2:	83 c0 1c             	add    eax,0x1c
c0004ad5:	e8 c1 ce ff ff       	call   c000199b <ld_dword>
c0004ada:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ae1:	89 03                	mov    DWORD PTR [ebx],eax
c0004ae3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ae6:	83 c0 16             	add    eax,0x16
c0004ae9:	e8 a0 ce ff ff       	call   c000198e <ld_word>
c0004aee:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004af2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004af5:	83 c0 18             	add    eax,0x18
c0004af8:	e8 91 ce ff ff       	call   c000198e <ld_word>
c0004afd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b01:	83 c4 1c             	add    esp,0x1c
c0004b04:	5b                   	pop    ebx
c0004b05:	5e                   	pop    esi
c0004b06:	5f                   	pop    edi
c0004b07:	5d                   	pop    ebp
c0004b08:	c3                   	ret    

c0004b09 <ld_clust.isra.0>:
c0004b09:	56                   	push   esi
c0004b0a:	89 c6                	mov    esi,eax
c0004b0c:	53                   	push   ebx
c0004b0d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b10:	89 d3                	mov    ebx,edx
c0004b12:	e8 77 ce ff ff       	call   c000198e <ld_word>
c0004b17:	0f b7 c8             	movzx  ecx,ax
c0004b1a:	89 f0                	mov    eax,esi
c0004b1c:	3c 03                	cmp    al,0x3
c0004b1e:	75 0d                	jne    c0004b2d <ld_clust.isra.0+0x24>
c0004b20:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b23:	e8 66 ce ff ff       	call   c000198e <ld_word>
c0004b28:	c1 e0 10             	shl    eax,0x10
c0004b2b:	09 c1                	or     ecx,eax
c0004b2d:	89 c8                	mov    eax,ecx
c0004b2f:	5b                   	pop    ebx
c0004b30:	5e                   	pop    esi
c0004b31:	c3                   	ret    

c0004b32 <st_clust.isra.1>:
c0004b32:	56                   	push   esi
c0004b33:	89 c6                	mov    esi,eax
c0004b35:	53                   	push   ebx
c0004b36:	89 d3                	mov    ebx,edx
c0004b38:	0f b7 d1             	movzx  edx,cx
c0004b3b:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004b3e:	e8 bd ce ff ff       	call   c0001a00 <st_word>
c0004b43:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004b46:	75 0f                	jne    c0004b57 <st_clust.isra.1+0x25>
c0004b48:	c1 e9 10             	shr    ecx,0x10
c0004b4b:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b4e:	89 ca                	mov    edx,ecx
c0004b50:	5b                   	pop    ebx
c0004b51:	5e                   	pop    esi
c0004b52:	e9 a9 ce ff ff       	jmp    c0001a00 <st_word>
c0004b57:	5b                   	pop    ebx
c0004b58:	5e                   	pop    esi
c0004b59:	c3                   	ret    

c0004b5a <init_alloc_info.isra.2>:
c0004b5a:	56                   	push   esi
c0004b5b:	53                   	push   ebx
c0004b5c:	89 c6                	mov    esi,eax
c0004b5e:	89 d3                	mov    ebx,edx
c0004b60:	51                   	push   ecx
c0004b61:	8b 00                	mov    eax,DWORD PTR [eax]
c0004b63:	83 c0 34             	add    eax,0x34
c0004b66:	e8 30 ce ff ff       	call   c000199b <ld_dword>
c0004b6b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004b6e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b70:	83 c0 38             	add    eax,0x38
c0004b73:	e8 3b ce ff ff       	call   c00019b3 <ld_qword>
c0004b78:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004b7b:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004b7e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b80:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004b83:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004b8a:	83 e0 02             	and    eax,0x2
c0004b8d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004b90:	5b                   	pop    ebx
c0004b91:	5b                   	pop    ebx
c0004b92:	5e                   	pop    esi
c0004b93:	c3                   	ret    

c0004b94 <follow_path>:
c0004b94:	56                   	push   esi
c0004b95:	53                   	push   ebx
c0004b96:	89 c3                	mov    ebx,eax
c0004b98:	83 ec 14             	sub    esp,0x14
c0004b9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004b9f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ba1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ba5:	8a 10                	mov    dl,BYTE PTR [eax]
c0004ba7:	80 fa 5c             	cmp    dl,0x5c
c0004baa:	75 07                	jne    c0004bb3 <follow_path+0x1f>
c0004bac:	40                   	inc    eax
c0004bad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bb1:	eb ee                	jmp    c0004ba1 <follow_path+0xd>
c0004bb3:	80 fa 2f             	cmp    dl,0x2f
c0004bb6:	74 f4                	je     c0004bac <follow_path+0x18>
c0004bb8:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004bbf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bc6:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004bc9:	77 52                	ja     c0004c1d <follow_path+0x89>
c0004bcb:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004bcf:	31 d2                	xor    edx,edx
c0004bd1:	89 d8                	mov    eax,ebx
c0004bd3:	e8 12 e3 ff ff       	call   c0002eea <dir_sdi>
c0004bd8:	eb 7c                	jmp    c0004c56 <follow_path+0xc2>
c0004bda:	89 d8                	mov    eax,ebx
c0004bdc:	e8 6e f2 ff ff       	call   c0003e4f <dir_find>
c0004be1:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004be4:	85 c0                	test   eax,eax
c0004be6:	75 46                	jne    c0004c2e <follow_path+0x9a>
c0004be8:	80 e2 04             	and    dl,0x4
c0004beb:	75 69                	jne    c0004c56 <follow_path+0xc2>
c0004bed:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004bf1:	74 5e                	je     c0004c51 <follow_path+0xbd>
c0004bf3:	8a 06                	mov    al,BYTE PTR [esi]
c0004bf5:	3c 04                	cmp    al,0x4
c0004bf7:	75 41                	jne    c0004c3a <follow_path+0xa6>
c0004bf9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004bfc:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c00:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c03:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c06:	30 c0                	xor    al,al
c0004c08:	09 d0                	or     eax,edx
c0004c0a:	89 da                	mov    edx,ebx
c0004c0c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c0f:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c12:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c15:	8d 46 10             	lea    eax,[esi+0x10]
c0004c18:	e8 3d ff ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004c1d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c21:	89 d8                	mov    eax,ebx
c0004c23:	e8 a9 ed ff ff       	call   c00039d1 <create_name>
c0004c28:	85 c0                	test   eax,eax
c0004c2a:	74 ae                	je     c0004bda <follow_path+0x46>
c0004c2c:	eb 28                	jmp    c0004c56 <follow_path+0xc2>
c0004c2e:	83 f8 04             	cmp    eax,0x4
c0004c31:	75 23                	jne    c0004c56 <follow_path+0xc2>
c0004c33:	80 e2 04             	and    dl,0x4
c0004c36:	74 19                	je     c0004c51 <follow_path+0xbd>
c0004c38:	eb 1c                	jmp    c0004c56 <follow_path+0xc2>
c0004c3a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004c3d:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004c43:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004c47:	e8 bd fe ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004c4c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c4f:	eb cc                	jmp    c0004c1d <follow_path+0x89>
c0004c51:	b8 05 00 00 00       	mov    eax,0x5
c0004c56:	83 c4 14             	add    esp,0x14
c0004c59:	5b                   	pop    ebx
c0004c5a:	5e                   	pop    esi
c0004c5b:	c3                   	ret    

c0004c5c <f_mount>:
c0004c5c:	53                   	push   ebx
c0004c5d:	83 ec 18             	sub    esp,0x18
c0004c60:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004c64:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004c68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004c70:	e8 fb d2 ff ff       	call   c0001f70 <get_ldnumber>
c0004c75:	89 c2                	mov    edx,eax
c0004c77:	b8 0b 00 00 00       	mov    eax,0xb
c0004c7c:	85 d2                	test   edx,edx
c0004c7e:	78 39                	js     c0004cb9 <f_mount+0x5d>
c0004c80:	8b 04 95 20 3d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc2e0]
c0004c87:	85 c0                	test   eax,eax
c0004c89:	74 03                	je     c0004c8e <f_mount+0x32>
c0004c8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c92:	85 c0                	test   eax,eax
c0004c94:	74 03                	je     c0004c99 <f_mount+0x3d>
c0004c96:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c9d:	89 04 95 20 3d 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc2e0],eax
c0004ca4:	31 c0                	xor    eax,eax
c0004ca6:	84 db                	test   bl,bl
c0004ca8:	74 0f                	je     c0004cb9 <f_mount+0x5d>
c0004caa:	31 c9                	xor    ecx,ecx
c0004cac:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004cb0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004cb4:	e8 65 d7 ff ff       	call   c000241e <mount_volume>
c0004cb9:	83 c4 18             	add    esp,0x18
c0004cbc:	5b                   	pop    ebx
c0004cbd:	c3                   	ret    

c0004cbe <f_open>:
c0004cbe:	55                   	push   ebp
c0004cbf:	bd 09 00 00 00       	mov    ebp,0x9
c0004cc4:	57                   	push   edi
c0004cc5:	56                   	push   esi
c0004cc6:	53                   	push   ebx
c0004cc7:	83 ec 7c             	sub    esp,0x7c
c0004cca:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004cd1:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004cd8:	85 db                	test   ebx,ebx
c0004cda:	0f 84 10 04 00 00    	je     c00050f0 <f_open+0x432>
c0004ce0:	89 fe                	mov    esi,edi
c0004ce2:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004ce6:	83 e6 3f             	and    esi,0x3f
c0004ce9:	89 f0                	mov    eax,esi
c0004ceb:	0f b6 c8             	movzx  ecx,al
c0004cee:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004cf5:	e8 24 d7 ff ff       	call   c000241e <mount_volume>
c0004cfa:	89 c5                	mov    ebp,eax
c0004cfc:	85 c0                	test   eax,eax
c0004cfe:	0f 85 e6 03 00 00    	jne    c00050ea <f_open+0x42c>
c0004d04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d08:	bd 11 00 00 00       	mov    ebp,0x11
c0004d0d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	68 60 04 00 00       	push   0x460
c0004d19:	e8 a3 34 00 00       	call   c00081c1 <ff_memalloc>
c0004d1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d2a:	0f 84 c0 03 00 00    	je     c00050f0 <f_open+0x432>
c0004d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004d38:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004d3e:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004d41:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004d44:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004d4b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d4f:	e8 40 fe ff ff       	call   c0004b94 <follow_path>
c0004d54:	89 c5                	mov    ebp,eax
c0004d56:	85 c0                	test   eax,eax
c0004d58:	75 0c                	jne    c0004d66 <f_open+0xa8>
c0004d5a:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004d5f:	79 05                	jns    c0004d66 <f_open+0xa8>
c0004d61:	bd 06 00 00 00       	mov    ebp,0x6
c0004d66:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004d6c:	0f 84 84 01 00 00    	je     c0004ef6 <f_open+0x238>
c0004d72:	85 ed                	test   ebp,ebp
c0004d74:	74 20                	je     c0004d96 <f_open+0xd8>
c0004d76:	83 fd 04             	cmp    ebp,0x4
c0004d79:	0f 85 58 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004d7f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d83:	83 ce 08             	or     esi,0x8
c0004d86:	e8 8a f2 ff ff       	call   c0004015 <dir_register>
c0004d8b:	89 c5                	mov    ebp,eax
c0004d8d:	85 c0                	test   eax,eax
c0004d8f:	74 2f                	je     c0004dc0 <f_open+0x102>
c0004d91:	e9 41 03 00 00       	jmp    c00050d7 <f_open+0x419>
c0004d96:	bd 07 00 00 00       	mov    ebp,0x7
c0004d9b:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004da0:	0f 85 31 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004da6:	bd 08 00 00 00       	mov    ebp,0x8
c0004dab:	f7 c7 04 00 00 00    	test   edi,0x4
c0004db1:	0f 85 20 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004db7:	83 e7 08             	and    edi,0x8
c0004dba:	0f 84 65 01 00 00    	je     c0004f25 <f_open+0x267>
c0004dc0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004dc4:	8a 02                	mov    al,BYTE PTR [edx]
c0004dc6:	3c 04                	cmp    al,0x4
c0004dc8:	0f 85 97 00 00 00    	jne    c0004e65 <f_open+0x1a7>
c0004dce:	8d 42 10             	lea    eax,[edx+0x10]
c0004dd1:	89 13                	mov    DWORD PTR [ebx],edx
c0004dd3:	89 da                	mov    edx,ebx
c0004dd5:	e8 80 fd ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004dda:	31 d2                	xor    edx,edx
c0004ddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004de0:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004de5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004de8:	83 c0 02             	add    eax,0x2
c0004deb:	e8 32 cc ff ff       	call   c0001a22 <mem_set>
c0004df0:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004df5:	31 d2                	xor    edx,edx
c0004df7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dfb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004dfe:	83 c0 26             	add    eax,0x26
c0004e01:	e8 1c cc ff ff       	call   c0001a22 <mem_set>
c0004e06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e0a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e0d:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e11:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e16:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e19:	83 c0 08             	add    eax,0x8
c0004e1c:	e8 e3 cb ff ff       	call   c0001a04 <st_dword>
c0004e21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e25:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e28:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004e2c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e30:	e8 b7 ea ff ff       	call   c00038ec <store_xdir>
c0004e35:	89 c5                	mov    ebp,eax
c0004e37:	85 c0                	test   eax,eax
c0004e39:	0f 85 98 02 00 00    	jne    c00050d7 <f_open+0x419>
c0004e3f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004e42:	85 d2                	test   edx,edx
c0004e44:	0f 84 db 00 00 00    	je     c0004f25 <f_open+0x267>
c0004e4a:	31 c9                	xor    ecx,ecx
c0004e4c:	89 d8                	mov    eax,ebx
c0004e4e:	e8 8e e3 ff ff       	call   c00031e1 <remove_chain>
c0004e53:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e57:	89 c5                	mov    ebp,eax
c0004e59:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e5c:	48                   	dec    eax
c0004e5d:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004e60:	e9 b8 00 00 00       	jmp    c0004f1d <f_open+0x25f>
c0004e65:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004e69:	89 ea                	mov    edx,ebp
c0004e6b:	e8 99 fc ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004e70:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e75:	89 c7                	mov    edi,eax
c0004e77:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004e7a:	e8 85 cb ff ff       	call   c0001a04 <st_dword>
c0004e7f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e83:	31 c9                	xor    ecx,ecx
c0004e85:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004e91:	e8 9c fc ff ff       	call   c0004b32 <st_clust.isra.1>
c0004e96:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e9a:	31 d2                	xor    edx,edx
c0004e9c:	83 c0 1c             	add    eax,0x1c
c0004e9f:	e8 60 cb ff ff       	call   c0001a04 <st_dword>
c0004ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea8:	85 ff                	test   edi,edi
c0004eaa:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004eae:	74 75                	je     c0004f25 <f_open+0x267>
c0004eb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb4:	31 c9                	xor    ecx,ecx
c0004eb6:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004eb9:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ec0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ec4:	89 fa                	mov    edx,edi
c0004ec6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eca:	e8 12 e3 ff ff       	call   c00031e1 <remove_chain>
c0004ecf:	89 c5                	mov    ebp,eax
c0004ed1:	85 c0                	test   eax,eax
c0004ed3:	0f 85 fe 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004ed9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004edd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee5:	4f                   	dec    edi
c0004ee6:	e8 81 d2 ff ff       	call   c000216c <move_window>
c0004eeb:	89 c5                	mov    ebp,eax
c0004eed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ef1:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004ef4:	eb 27                	jmp    c0004f1d <f_open+0x25f>
c0004ef6:	85 ed                	test   ebp,ebp
c0004ef8:	0f 85 d9 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004efe:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f02:	bd 04 00 00 00       	mov    ebp,0x4
c0004f07:	a8 10                	test   al,0x10
c0004f09:	0f 85 c8 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f0f:	83 e7 02             	and    edi,0x2
c0004f12:	74 11                	je     c0004f25 <f_open+0x267>
c0004f14:	bd 07 00 00 00       	mov    ebp,0x7
c0004f19:	a8 01                	test   al,0x1
c0004f1b:	eb 02                	jmp    c0004f1f <f_open+0x261>
c0004f1d:	85 ed                	test   ebp,ebp
c0004f1f:	0f 85 b2 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f25:	f7 c6 08 00 00 00    	test   esi,0x8
c0004f2b:	74 03                	je     c0004f30 <f_open+0x272>
c0004f2d:	83 ce 40             	or     esi,0x40
c0004f30:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f34:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004f37:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004f3a:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004f3d:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004f40:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004f44:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004f47:	8a 02                	mov    al,BYTE PTR [edx]
c0004f49:	3c 04                	cmp    al,0x4
c0004f4b:	75 2a                	jne    c0004f77 <f_open+0x2b9>
c0004f4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004f51:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004f56:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004f59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004f5d:	30 c0                	xor    al,al
c0004f5f:	09 c8                	or     eax,ecx
c0004f61:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f64:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004f68:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f6b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f6e:	89 da                	mov    edx,ebx
c0004f70:	e8 e5 fb ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004f75:	eb 1c                	jmp    c0004f93 <f_open+0x2d5>
c0004f77:	89 fa                	mov    edx,edi
c0004f79:	e8 8b fb ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004f7e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f81:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004f84:	e8 12 ca ff ff       	call   c000199b <ld_dword>
c0004f89:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0004f90:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004f93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f97:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0004f9e:	89 03                	mov    DWORD PTR [ebx],eax
c0004fa0:	31 d2                	xor    edx,edx
c0004fa2:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004fa6:	b9 00 02 00 00       	mov    ecx,0x200
c0004fab:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004faf:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0004fb3:	89 f0                	mov    eax,esi
c0004fb5:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0004fbc:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0004fbf:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0004fc6:	8d 43 50             	lea    eax,[ebx+0x50]
c0004fc9:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0004fd0:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0004fd7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004fdb:	e8 42 ca ff ff       	call   c0001a22 <mem_set>
c0004fe0:	83 e6 20             	and    esi,0x20
c0004fe3:	75 07                	jne    c0004fec <f_open+0x32e>
c0004fe5:	31 ed                	xor    ebp,ebp
c0004fe7:	e9 eb 00 00 00       	jmp    c00050d7 <f_open+0x419>
c0004fec:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004fef:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0004ff2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ff6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ffa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ffe:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005002:	74 e1                	je     c0004fe5 <f_open+0x327>
c0005004:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005008:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000500c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000500f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005012:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005016:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005019:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000501d:	31 ff                	xor    edi,edi
c000501f:	c1 e5 09             	shl    ebp,0x9
c0005022:	89 ee                	mov    esi,ebp
c0005024:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005028:	89 f8                	mov    eax,edi
c000502a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000502e:	73 22                	jae    c0005052 <f_open+0x394>
c0005030:	89 d8                	mov    eax,ebx
c0005032:	e8 bd dc ff ff       	call   c0002cf4 <get_fat>
c0005037:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000503b:	89 c2                	mov    edx,eax
c000503d:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005041:	83 f8 01             	cmp    eax,0x1
c0005044:	76 10                	jbe    c0005056 <f_open+0x398>
c0005046:	83 f8 ff             	cmp    eax,0xffffffff
c0005049:	75 d9                	jne    c0005024 <f_open+0x366>
c000504b:	bd 01 00 00 00       	mov    ebp,0x1
c0005050:	eb 09                	jmp    c000505b <f_open+0x39d>
c0005052:	31 ed                	xor    ebp,ebp
c0005054:	eb 05                	jmp    c000505b <f_open+0x39d>
c0005056:	bd 02 00 00 00       	mov    ebp,0x2
c000505b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000505e:	85 ed                	test   ebp,ebp
c0005060:	75 75                	jne    c00050d7 <f_open+0x419>
c0005062:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005066:	25 ff 01 00 00       	and    eax,0x1ff
c000506b:	0f 84 74 ff ff ff    	je     c0004fe5 <f_open+0x327>
c0005071:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005075:	bd 02 00 00 00       	mov    ebp,0x2
c000507a:	89 c8                	mov    eax,ecx
c000507c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005080:	e8 a2 cb ff ff       	call   c0001c27 <clst2sect>
c0005085:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005089:	89 d7                	mov    edi,edx
c000508b:	09 c7                	or     edi,eax
c000508d:	74 48                	je     c00050d7 <f_open+0x419>
c000508f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005093:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005097:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000509f:	0f ac fe 09          	shrd   esi,edi,0x9
c00050a3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00050a7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00050ab:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00050ae:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00050b2:	83 ec 0c             	sub    esp,0xc
c00050b5:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00050b8:	6a 01                	push   0x1
c00050ba:	52                   	push   edx
c00050bb:	50                   	push   eax
c00050bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00050c0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00050c4:	50                   	push   eax
c00050c5:	e8 79 c8 ff ff       	call   c0001943 <disk_read>
c00050ca:	83 c4 20             	add    esp,0x20
c00050cd:	85 c0                	test   eax,eax
c00050cf:	0f 95 c0             	setne  al
c00050d2:	0f b6 c0             	movzx  eax,al
c00050d5:	89 c5                	mov    ebp,eax
c00050d7:	83 ec 0c             	sub    esp,0xc
c00050da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00050de:	e8 f4 30 00 00       	call   c00081d7 <ff_memfree>
c00050e3:	83 c4 10             	add    esp,0x10
c00050e6:	85 ed                	test   ebp,ebp
c00050e8:	74 06                	je     c00050f0 <f_open+0x432>
c00050ea:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00050f0:	83 c4 7c             	add    esp,0x7c
c00050f3:	89 e8                	mov    eax,ebp
c00050f5:	5b                   	pop    ebx
c00050f6:	5e                   	pop    esi
c00050f7:	5f                   	pop    edi
c00050f8:	5d                   	pop    ebp
c00050f9:	c3                   	ret    

c00050fa <f_read>:
c00050fa:	55                   	push   ebp
c00050fb:	57                   	push   edi
c00050fc:	56                   	push   esi
c00050fd:	53                   	push   ebx
c00050fe:	83 ec 2c             	sub    esp,0x2c
c0005101:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005105:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005109:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000510f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005113:	89 d8                	mov    eax,ebx
c0005115:	e8 77 cf ff ff       	call   c0002091 <validate>
c000511a:	89 c5                	mov    ebp,eax
c000511c:	85 c0                	test   eax,eax
c000511e:	0f 85 4c 02 00 00    	jne    c0005370 <f_read+0x276>
c0005124:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005128:	85 ed                	test   ebp,ebp
c000512a:	0f 85 40 02 00 00    	jne    c0005370 <f_read+0x276>
c0005130:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005134:	0f 84 31 02 00 00    	je     c000536b <f_read+0x271>
c000513a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000513d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005140:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005143:	bf 00 00 00 00       	mov    edi,0x0
c0005148:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000514b:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000514f:	89 d1                	mov    ecx,edx
c0005151:	19 f9                	sbb    ecx,edi
c0005153:	0f 83 cf 00 00 00    	jae    c0005228 <f_read+0x12e>
c0005159:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000515d:	e9 c6 00 00 00       	jmp    c0005228 <f_read+0x12e>
c0005162:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005165:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005168:	89 d0                	mov    eax,edx
c000516a:	25 ff 01 00 00       	and    eax,0x1ff
c000516f:	0f 85 c9 01 00 00    	jne    c000533e <f_read+0x244>
c0005175:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005179:	89 d6                	mov    esi,edx
c000517b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000517f:	89 cf                	mov    edi,ecx
c0005181:	48                   	dec    eax
c0005182:	0f ac fe 09          	shrd   esi,edi,0x9
c0005186:	21 f0                	and    eax,esi
c0005188:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000518c:	0f 84 a6 00 00 00    	je     c0005238 <f_read+0x13e>
c0005192:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005196:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005199:	89 c8                	mov    eax,ecx
c000519b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000519e:	e8 84 ca ff ff       	call   c0001c27 <clst2sect>
c00051a3:	89 d7                	mov    edi,edx
c00051a5:	09 c7                	or     edi,eax
c00051a7:	0f 84 b4 00 00 00    	je     c0005261 <f_read+0x167>
c00051ad:	31 ff                	xor    edi,edi
c00051af:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00051b3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00051b6:	01 c6                	add    esi,eax
c00051b8:	11 d7                	adc    edi,edx
c00051ba:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00051c2:	0f 86 fd 00 00 00    	jbe    c00052c5 <f_read+0x1cb>
c00051c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00051cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d0:	c1 e8 09             	shr    eax,0x9
c00051d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00051d6:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00051da:	03 14 24             	add    edx,DWORD PTR [esp]
c00051dd:	39 c2                	cmp    edx,eax
c00051df:	76 07                	jbe    c00051e8 <f_read+0xee>
c00051e1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00051e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00051e8:	83 ec 0c             	sub    esp,0xc
c00051eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00051ef:	57                   	push   edi
c00051f0:	56                   	push   esi
c00051f1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00051f5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00051f9:	50                   	push   eax
c00051fa:	e8 44 c7 ff ff       	call   c0001943 <disk_read>
c00051ff:	83 c4 20             	add    esp,0x20
c0005202:	85 c0                	test   eax,eax
c0005204:	75 6e                	jne    c0005274 <f_read+0x17a>
c0005206:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000520a:	78 7e                	js     c000528a <f_read+0x190>
c000520c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000520f:	c1 e6 09             	shl    esi,0x9
c0005212:	31 ff                	xor    edi,edi
c0005214:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005218:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000521c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005220:	01 30                	add    DWORD PTR [eax],esi
c0005222:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005225:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005228:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000522d:	0f 85 2f ff ff ff    	jne    c0005162 <f_read+0x68>
c0005233:	e9 38 01 00 00       	jmp    c0005370 <f_read+0x276>
c0005238:	89 c8                	mov    eax,ecx
c000523a:	09 d0                	or     eax,edx
c000523c:	75 05                	jne    c0005243 <f_read+0x149>
c000523e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005241:	eb 19                	jmp    c000525c <f_read+0x162>
c0005243:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005247:	74 09                	je     c0005252 <f_read+0x158>
c0005249:	89 d8                	mov    eax,ebx
c000524b:	e8 f8 c9 ff ff       	call   c0001c48 <clmt_clust>
c0005250:	eb 0a                	jmp    c000525c <f_read+0x162>
c0005252:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005255:	89 d8                	mov    eax,ebx
c0005257:	e8 98 da ff ff       	call   c0002cf4 <get_fat>
c000525c:	83 f8 01             	cmp    eax,0x1
c000525f:	77 0e                	ja     c000526f <f_read+0x175>
c0005261:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005265:	bd 02 00 00 00       	mov    ebp,0x2
c000526a:	e9 01 01 00 00       	jmp    c0005370 <f_read+0x276>
c000526f:	83 f8 ff             	cmp    eax,0xffffffff
c0005272:	75 0e                	jne    c0005282 <f_read+0x188>
c0005274:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005278:	bd 01 00 00 00       	mov    ebp,0x1
c000527d:	e9 ee 00 00 00       	jmp    c0005370 <f_read+0x276>
c0005282:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005285:	e9 08 ff ff ff       	jmp    c0005192 <f_read+0x98>
c000528a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000528d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005290:	29 f0                	sub    eax,esi
c0005292:	19 fa                	sbb    edx,edi
c0005294:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005297:	89 d7                	mov    edi,edx
c0005299:	ba 00 00 00 00       	mov    edx,0x0
c000529e:	89 f9                	mov    ecx,edi
c00052a0:	19 d1                	sbb    ecx,edx
c00052a2:	0f 83 64 ff ff ff    	jae    c000520c <f_read+0x112>
c00052a8:	89 c7                	mov    edi,eax
c00052aa:	8d 53 50             	lea    edx,[ebx+0x50]
c00052ad:	c1 e7 09             	shl    edi,0x9
c00052b0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00052b4:	b9 00 02 00 00       	mov    ecx,0x200
c00052b9:	01 f8                	add    eax,edi
c00052bb:	e8 4d c7 ff ff       	call   c0001a0d <mem_cpy>
c00052c0:	e9 47 ff ff ff       	jmp    c000520c <f_read+0x112>
c00052c5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00052c8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00052cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00052ce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00052d2:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00052d6:	75 05                	jne    c00052dd <f_read+0x1e3>
c00052d8:	39 34 24             	cmp    DWORD PTR [esp],esi
c00052db:	74 5b                	je     c0005338 <f_read+0x23e>
c00052dd:	8d 43 50             	lea    eax,[ebx+0x50]
c00052e0:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00052e8:	79 2a                	jns    c0005314 <f_read+0x21a>
c00052ea:	83 ec 0c             	sub    esp,0xc
c00052ed:	6a 01                	push   0x1
c00052ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00052fb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052ff:	50                   	push   eax
c0005300:	e8 54 c6 ff ff       	call   c0001959 <disk_write>
c0005305:	83 c4 20             	add    esp,0x20
c0005308:	85 c0                	test   eax,eax
c000530a:	0f 85 64 ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005310:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005314:	83 ec 0c             	sub    esp,0xc
c0005317:	6a 01                	push   0x1
c0005319:	57                   	push   edi
c000531a:	56                   	push   esi
c000531b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000531f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005323:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005327:	50                   	push   eax
c0005328:	e8 16 c6 ff ff       	call   c0001943 <disk_read>
c000532d:	83 c4 20             	add    esp,0x20
c0005330:	85 c0                	test   eax,eax
c0005332:	0f 85 3c ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005338:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000533b:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000533e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005341:	ba 00 02 00 00       	mov    edx,0x200
c0005346:	25 ff 01 00 00       	and    eax,0x1ff
c000534b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000534f:	29 c2                	sub    edx,eax
c0005351:	39 d6                	cmp    esi,edx
c0005353:	76 02                	jbe    c0005357 <f_read+0x25d>
c0005355:	89 d6                	mov    esi,edx
c0005357:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000535b:	89 f1                	mov    ecx,esi
c000535d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005361:	e8 a7 c6 ff ff       	call   c0001a0d <mem_cpy>
c0005366:	e9 a7 fe ff ff       	jmp    c0005212 <f_read+0x118>
c000536b:	bd 07 00 00 00       	mov    ebp,0x7
c0005370:	83 c4 2c             	add    esp,0x2c
c0005373:	89 e8                	mov    eax,ebp
c0005375:	5b                   	pop    ebx
c0005376:	5e                   	pop    esi
c0005377:	5f                   	pop    edi
c0005378:	5d                   	pop    ebp
c0005379:	c3                   	ret    

c000537a <f_write>:
c000537a:	55                   	push   ebp
c000537b:	57                   	push   edi
c000537c:	56                   	push   esi
c000537d:	53                   	push   ebx
c000537e:	83 ec 2c             	sub    esp,0x2c
c0005381:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005385:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005389:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000538f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005393:	89 d8                	mov    eax,ebx
c0005395:	e8 f7 cc ff ff       	call   c0002091 <validate>
c000539a:	89 c5                	mov    ebp,eax
c000539c:	85 c0                	test   eax,eax
c000539e:	0f 85 86 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053a4:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053a8:	85 ed                	test   ebp,ebp
c00053aa:	0f 85 7a 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053b0:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00053b4:	0f 84 6b 02 00 00    	je     c0005625 <f_write+0x2ab>
c00053ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053be:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00053c1:	0f 84 43 01 00 00    	je     c000550a <f_write+0x190>
c00053c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053ca:	89 c1                	mov    ecx,eax
c00053cc:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00053d0:	0f 83 34 01 00 00    	jae    c000550a <f_write+0x190>
c00053d6:	f7 d0                	not    eax
c00053d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053dc:	e9 29 01 00 00       	jmp    c000550a <f_write+0x190>
c00053e1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053e4:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00053e7:	89 d0                	mov    eax,edx
c00053e9:	25 ff 01 00 00       	and    eax,0x1ff
c00053ee:	0f 85 00 02 00 00    	jne    c00055f4 <f_write+0x27a>
c00053f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053f8:	89 d6                	mov    esi,edx
c00053fa:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00053fe:	89 cf                	mov    edi,ecx
c0005400:	48                   	dec    eax
c0005401:	0f ac fe 09          	shrd   esi,edi,0x9
c0005405:	21 f0                	and    eax,esi
c0005407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000540b:	0f 84 06 01 00 00    	je     c0005517 <f_write+0x19d>
c0005411:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005415:	0f 88 6e 01 00 00    	js     c0005589 <f_write+0x20f>
c000541b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 c8                	mov    eax,ecx
c0005424:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005428:	e8 fa c7 ff ff       	call   c0001c27 <clst2sect>
c000542d:	89 d1                	mov    ecx,edx
c000542f:	09 c1                	or     ecx,eax
c0005431:	0f 84 1c 01 00 00    	je     c0005553 <f_write+0x1d9>
c0005437:	31 ff                	xor    edi,edi
c0005439:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000543d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005441:	01 c6                	add    esi,eax
c0005443:	11 d7                	adc    edi,edx
c0005445:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000544d:	0f 86 63 01 00 00    	jbe    c00055b6 <f_write+0x23c>
c0005453:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000545b:	c1 e8 09             	shr    eax,0x9
c000545e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005462:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005466:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000546a:	39 c2                	cmp    edx,eax
c000546c:	76 08                	jbe    c0005476 <f_write+0xfc>
c000546e:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005472:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005476:	83 ec 0c             	sub    esp,0xc
c0005479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000547d:	57                   	push   edi
c000547e:	56                   	push   esi
c000547f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005483:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005487:	50                   	push   eax
c0005488:	e8 cc c4 ff ff       	call   c0001959 <disk_write>
c000548d:	83 c4 20             	add    esp,0x20
c0005490:	85 c0                	test   eax,eax
c0005492:	0f 85 ce 00 00 00    	jne    c0005566 <f_write+0x1ec>
c0005498:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000549b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000549e:	29 f0                	sub    eax,esi
c00054a0:	19 fa                	sbb    edx,edi
c00054a2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00054a6:	89 d7                	mov    edi,edx
c00054a8:	ba 00 00 00 00       	mov    edx,0x0
c00054ad:	89 f9                	mov    ecx,edi
c00054af:	19 d1                	sbb    ecx,edx
c00054b1:	73 1c                	jae    c00054cf <f_write+0x155>
c00054b3:	89 c7                	mov    edi,eax
c00054b5:	b9 00 02 00 00       	mov    ecx,0x200
c00054ba:	c1 e7 09             	shl    edi,0x9
c00054bd:	8d 43 50             	lea    eax,[ebx+0x50]
c00054c0:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00054c4:	89 fa                	mov    edx,edi
c00054c6:	e8 42 c5 ff ff       	call   c0001a0d <mem_cpy>
c00054cb:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054cf:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00054d3:	c1 e6 09             	shl    esi,0x9
c00054d6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054da:	31 ff                	xor    edi,edi
c00054dc:	01 30                	add    DWORD PTR [eax],esi
c00054de:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054e2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054e6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00054e9:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00054ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00054ef:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00054f2:	89 c1                	mov    ecx,eax
c00054f4:	39 f2                	cmp    edx,esi
c00054f6:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00054f9:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00054fc:	19 f9                	sbb    ecx,edi
c00054fe:	73 04                	jae    c0005504 <f_write+0x18a>
c0005500:	89 f2                	mov    edx,esi
c0005502:	89 f8                	mov    eax,edi
c0005504:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0005507:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000550a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000550f:	0f 85 cc fe ff ff    	jne    c00053e1 <f_write+0x67>
c0005515:	eb 2e                	jmp    c0005545 <f_write+0x1cb>
c0005517:	89 c8                	mov    eax,ecx
c0005519:	09 d0                	or     eax,edx
c000551b:	75 0b                	jne    c0005528 <f_write+0x1ae>
c000551d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005520:	31 d2                	xor    edx,edx
c0005522:	85 c0                	test   eax,eax
c0005524:	75 28                	jne    c000554e <f_write+0x1d4>
c0005526:	eb 12                	jmp    c000553a <f_write+0x1c0>
c0005528:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000552c:	74 09                	je     c0005537 <f_write+0x1bd>
c000552e:	89 d8                	mov    eax,ebx
c0005530:	e8 13 c7 ff ff       	call   c0001c48 <clmt_clust>
c0005535:	eb 0a                	jmp    c0005541 <f_write+0x1c7>
c0005537:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000553a:	89 d8                	mov    eax,ebx
c000553c:	e8 a1 da ff ff       	call   c0002fe2 <create_chain>
c0005541:	85 c0                	test   eax,eax
c0005543:	75 09                	jne    c000554e <f_write+0x1d4>
c0005545:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005549:	e9 dc 00 00 00       	jmp    c000562a <f_write+0x2b0>
c000554e:	83 f8 01             	cmp    eax,0x1
c0005551:	75 0e                	jne    c0005561 <f_write+0x1e7>
c0005553:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005557:	bd 02 00 00 00       	mov    ebp,0x2
c000555c:	e9 c9 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005561:	83 f8 ff             	cmp    eax,0xffffffff
c0005564:	75 0e                	jne    c0005574 <f_write+0x1fa>
c0005566:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000556a:	bd 01 00 00 00       	mov    ebp,0x1
c000556f:	e9 b6 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005574:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005577:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000557b:	0f 85 90 fe ff ff    	jne    c0005411 <f_write+0x97>
c0005581:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005584:	e9 88 fe ff ff       	jmp    c0005411 <f_write+0x97>
c0005589:	83 ec 0c             	sub    esp,0xc
c000558c:	8d 43 50             	lea    eax,[ebx+0x50]
c000558f:	6a 01                	push   0x1
c0005591:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005594:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005597:	50                   	push   eax
c0005598:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000559c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055a0:	50                   	push   eax
c00055a1:	e8 b3 c3 ff ff       	call   c0001959 <disk_write>
c00055a6:	83 c4 20             	add    esp,0x20
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 b9                	jne    c0005566 <f_write+0x1ec>
c00055ad:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055b1:	e9 65 fe ff ff       	jmp    c000541b <f_write+0xa1>
c00055b6:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00055b9:	75 05                	jne    c00055c0 <f_write+0x246>
c00055bb:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00055be:	74 2e                	je     c00055ee <f_write+0x274>
c00055c0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00055c3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055c6:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00055c9:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00055cc:	73 20                	jae    c00055ee <f_write+0x274>
c00055ce:	83 ec 0c             	sub    esp,0xc
c00055d1:	8d 43 50             	lea    eax,[ebx+0x50]
c00055d4:	6a 01                	push   0x1
c00055d6:	57                   	push   edi
c00055d7:	56                   	push   esi
c00055d8:	50                   	push   eax
c00055d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055dd:	50                   	push   eax
c00055de:	e8 60 c3 ff ff       	call   c0001943 <disk_read>
c00055e3:	83 c4 20             	add    esp,0x20
c00055e6:	85 c0                	test   eax,eax
c00055e8:	0f 85 78 ff ff ff    	jne    c0005566 <f_write+0x1ec>
c00055ee:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055f1:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055f4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055f7:	ba 00 02 00 00       	mov    edx,0x200
c00055fc:	25 ff 01 00 00       	and    eax,0x1ff
c0005601:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005605:	29 c2                	sub    edx,eax
c0005607:	39 d6                	cmp    esi,edx
c0005609:	76 02                	jbe    c000560d <f_write+0x293>
c000560b:	89 d6                	mov    esi,edx
c000560d:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005611:	89 f1                	mov    ecx,esi
c0005613:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005617:	e8 f1 c3 ff ff       	call   c0001a0d <mem_cpy>
c000561c:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005620:	e9 b1 fe ff ff       	jmp    c00054d6 <f_write+0x15c>
c0005625:	bd 07 00 00 00       	mov    ebp,0x7
c000562a:	83 c4 2c             	add    esp,0x2c
c000562d:	89 e8                	mov    eax,ebp
c000562f:	5b                   	pop    ebx
c0005630:	5e                   	pop    esi
c0005631:	5f                   	pop    edi
c0005632:	5d                   	pop    ebp
c0005633:	c3                   	ret    

c0005634 <f_sync>:
c0005634:	56                   	push   esi
c0005635:	53                   	push   ebx
c0005636:	83 ec 64             	sub    esp,0x64
c0005639:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000563d:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005641:	89 d8                	mov    eax,ebx
c0005643:	e8 49 ca ff ff       	call   c0002091 <validate>
c0005648:	85 c0                	test   eax,eax
c000564a:	0f 85 ba 01 00 00    	jne    c000580a <f_sync+0x1d6>
c0005650:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005653:	f6 c2 40             	test   dl,0x40
c0005656:	0f 84 ae 01 00 00    	je     c000580a <f_sync+0x1d6>
c000565c:	84 d2                	test   dl,dl
c000565e:	79 33                	jns    c0005693 <f_sync+0x5f>
c0005660:	83 ec 0c             	sub    esp,0xc
c0005663:	8d 43 50             	lea    eax,[ebx+0x50]
c0005666:	6a 01                	push   0x1
c0005668:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000566b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000566e:	50                   	push   eax
c000566f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005673:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005677:	50                   	push   eax
c0005678:	e8 dc c2 ff ff       	call   c0001959 <disk_write>
c000567d:	83 c4 20             	add    esp,0x20
c0005680:	89 c2                	mov    edx,eax
c0005682:	b8 01 00 00 00       	mov    eax,0x1
c0005687:	85 d2                	test   edx,edx
c0005689:	0f 85 7b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c000568f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005697:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000569a:	0f 85 11 01 00 00    	jne    c00057b1 <f_sync+0x17d>
c00056a0:	89 d8                	mov    eax,ebx
c00056a2:	e8 13 d6 ff ff       	call   c0002cba <fill_first_frag>
c00056a7:	85 c0                	test   eax,eax
c00056a9:	0f 85 5b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056af:	83 c9 ff             	or     ecx,0xffffffff
c00056b2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056b5:	89 d8                	mov    eax,ebx
c00056b7:	e8 c9 d5 ff ff       	call   c0002c85 <fill_last_frag>
c00056bc:	85 c0                	test   eax,eax
c00056be:	0f 85 46 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056c4:	83 ec 0c             	sub    esp,0xc
c00056c7:	68 60 04 00 00       	push   0x460
c00056cc:	e8 f0 2a 00 00       	call   c00081c1 <ff_memalloc>
c00056d1:	83 c4 10             	add    esp,0x10
c00056d4:	89 c6                	mov    esi,eax
c00056d6:	b8 11 00 00 00       	mov    eax,0x11
c00056db:	85 f6                	test   esi,esi
c00056dd:	0f 84 27 01 00 00    	je     c000580a <f_sync+0x1d6>
c00056e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056e7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00056ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00056f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00056f3:	89 da                	mov    edx,ebx
c00056f5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00056f9:	e8 af df ff ff       	call   c00036ad <load_obj_xdir>
c00056fe:	85 c0                	test   eax,eax
c0005700:	0f 85 95 00 00 00    	jne    c000579b <f_sync+0x167>
c0005706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000570a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000570d:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005711:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005714:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005717:	83 ca 01             	or     edx,0x1
c000571a:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c000571d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005720:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005723:	83 c0 34             	add    eax,0x34
c0005726:	e8 d9 c2 ff ff       	call   c0001a04 <st_dword>
c000572b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000572f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005732:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005735:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005738:	83 c0 38             	add    eax,0x38
c000573b:	e8 c7 c2 ff ff       	call   c0001a07 <st_qword>
c0005740:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005747:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000574a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000574d:	83 c0 28             	add    eax,0x28
c0005750:	e8 b2 c2 ff ff       	call   c0001a07 <st_qword>
c0005755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005759:	ba 00 00 21 50       	mov    edx,0x50210000
c000575e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005761:	83 c0 0c             	add    eax,0xc
c0005764:	e8 9b c2 ff ff       	call   c0001a04 <st_dword>
c0005769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000576d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005770:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005774:	31 d2                	xor    edx,edx
c0005776:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005779:	83 c0 10             	add    eax,0x10
c000577c:	e8 83 c2 ff ff       	call   c0001a04 <st_dword>
c0005781:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005785:	e8 62 e1 ff ff       	call   c00038ec <store_xdir>
c000578a:	85 c0                	test   eax,eax
c000578c:	75 0d                	jne    c000579b <f_sync+0x167>
c000578e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005792:	e8 00 eb ff ff       	call   c0004297 <sync_fs>
c0005797:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000579b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000579f:	83 ec 0c             	sub    esp,0xc
c00057a2:	56                   	push   esi
c00057a3:	e8 2f 2a 00 00       	call   c00081d7 <ff_memfree>
c00057a8:	83 c4 10             	add    esp,0x10
c00057ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057af:	eb 59                	jmp    c000580a <f_sync+0x1d6>
c00057b1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00057b4:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00057b7:	e8 b0 c9 ff ff       	call   c000216c <move_window>
c00057bc:	85 c0                	test   eax,eax
c00057be:	75 4a                	jne    c000580a <f_sync+0x1d6>
c00057c0:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00057c3:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00057c7:	89 f2                	mov    edx,esi
c00057c9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00057cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00057ce:	e8 5f f3 ff ff       	call   c0004b32 <st_clust.isra.1>
c00057d3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057d6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00057d9:	e8 26 c2 ff ff       	call   c0001a04 <st_dword>
c00057de:	8d 46 16             	lea    eax,[esi+0x16]
c00057e1:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e6:	e8 19 c2 ff ff       	call   c0001a04 <st_dword>
c00057eb:	8d 46 12             	lea    eax,[esi+0x12]
c00057ee:	31 d2                	xor    edx,edx
c00057f0:	e8 0b c2 ff ff       	call   c0001a00 <st_word>
c00057f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00057fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005801:	e8 91 ea ff ff       	call   c0004297 <sync_fs>
c0005806:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000580a:	83 c4 64             	add    esp,0x64
c000580d:	5b                   	pop    ebx
c000580e:	5e                   	pop    esi
c000580f:	c3                   	ret    

c0005810 <f_close>:
c0005810:	53                   	push   ebx
c0005811:	83 ec 24             	sub    esp,0x24
c0005814:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005818:	53                   	push   ebx
c0005819:	e8 16 fe ff ff       	call   c0005634 <f_sync>
c000581e:	83 c4 10             	add    esp,0x10
c0005821:	85 c0                	test   eax,eax
c0005823:	75 15                	jne    c000583a <f_close+0x2a>
c0005825:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005829:	89 d8                	mov    eax,ebx
c000582b:	e8 61 c8 ff ff       	call   c0002091 <validate>
c0005830:	85 c0                	test   eax,eax
c0005832:	75 06                	jne    c000583a <f_close+0x2a>
c0005834:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000583a:	83 c4 18             	add    esp,0x18
c000583d:	5b                   	pop    ebx
c000583e:	c3                   	ret    

c000583f <f_lseek>:
c000583f:	55                   	push   ebp
c0005840:	57                   	push   edi
c0005841:	56                   	push   esi
c0005842:	53                   	push   ebx
c0005843:	83 ec 3c             	sub    esp,0x3c
c0005846:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000584a:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000584e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005852:	89 04 24             	mov    DWORD PTR [esp],eax
c0005855:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005859:	89 d8                	mov    eax,ebx
c000585b:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000585f:	e8 2d c8 ff ff       	call   c0002091 <validate>
c0005864:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005868:	85 c0                	test   eax,eax
c000586a:	0f 85 7a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005870:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005874:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005878:	85 c0                	test   eax,eax
c000587a:	0f 85 6a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005880:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005884:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005887:	74 0c                	je     c0005895 <f_lseek+0x56>
c0005889:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000588c:	85 c0                	test   eax,eax
c000588e:	75 1f                	jne    c00058af <f_lseek+0x70>
c0005890:	e9 b5 01 00 00       	jmp    c0005a4a <f_lseek+0x20b>
c0005895:	83 c9 ff             	or     ecx,0xffffffff
c0005898:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000589b:	89 d8                	mov    eax,ebx
c000589d:	e8 e3 d3 ff ff       	call   c0002c85 <fill_last_frag>
c00058a2:	85 c0                	test   eax,eax
c00058a4:	74 e3                	je     c0005889 <f_lseek+0x4a>
c00058a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058aa:	e9 3b 04 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c00058af:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00058b4:	0f 85 ac 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058ba:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c00058be:	0f 85 a2 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058c4:	8d 78 04             	lea    edi,[eax+0x4]
c00058c7:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00058ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00058cc:	be 02 00 00 00       	mov    esi,0x2
c00058d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058d5:	85 ed                	test   ebp,ebp
c00058d7:	74 73                	je     c000594c <f_lseek+0x10d>
c00058d9:	89 e9                	mov    ecx,ebp
c00058db:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00058e2:	ff 04 24             	inc    DWORD PTR [esp]
c00058e5:	89 ca                	mov    edx,ecx
c00058e7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00058eb:	89 d8                	mov    eax,ebx
c00058ed:	e8 02 d4 ff ff       	call   c0002cf4 <get_fat>
c00058f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00058f6:	83 f8 01             	cmp    eax,0x1
c00058f9:	77 11                	ja     c000590c <f_lseek+0xcd>
c00058fb:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00058ff:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005907:	e9 de 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c000590c:	83 f8 ff             	cmp    eax,0xffffffff
c000590f:	75 11                	jne    c0005922 <f_lseek+0xe3>
c0005911:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005915:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000591d:	e9 c8 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005922:	8d 51 01             	lea    edx,[ecx+0x1]
c0005925:	89 c1                	mov    ecx,eax
c0005927:	39 c2                	cmp    edx,eax
c0005929:	74 b7                	je     c00058e2 <f_lseek+0xa3>
c000592b:	83 c6 02             	add    esi,0x2
c000592e:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005932:	72 0b                	jb     c000593f <f_lseek+0x100>
c0005934:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005937:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c000593a:	89 0f                	mov    DWORD PTR [edi],ecx
c000593c:	83 c7 08             	add    edi,0x8
c000593f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005943:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005946:	76 04                	jbe    c000594c <f_lseek+0x10d>
c0005948:	89 c5                	mov    ebp,eax
c000594a:	eb 8d                	jmp    c00058d9 <f_lseek+0x9a>
c000594c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000594f:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005953:	89 30                	mov    DWORD PTR [eax],esi
c0005955:	0f 87 87 03 00 00    	ja     c0005ce2 <f_lseek+0x4a3>
c000595b:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005961:	e9 84 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005966:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005969:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000596c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005970:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005974:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005978:	39 04 24             	cmp    DWORD PTR [esp],eax
c000597b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000597f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005983:	73 0f                	jae    c0005994 <f_lseek+0x155>
c0005985:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005988:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000598c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005990:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005994:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005998:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000599c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000599f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00059a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00059a6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00059aa:	0f 84 3a 03 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00059b4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00059b8:	83 c6 ff             	add    esi,0xffffffff
c00059bb:	89 d8                	mov    eax,ebx
c00059bd:	83 d7 ff             	adc    edi,0xffffffff
c00059c0:	89 f2                	mov    edx,esi
c00059c2:	89 f9                	mov    ecx,edi
c00059c4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00059c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00059cb:	e8 78 c2 ff ff       	call   c0001c48 <clmt_clust>
c00059d0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00059d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00059d7:	89 c2                	mov    edx,eax
c00059d9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059dd:	89 c8                	mov    eax,ecx
c00059df:	e8 43 c2 ff ff       	call   c0001c27 <clst2sect>
c00059e4:	89 d7                	mov    edi,edx
c00059e6:	09 c7                	or     edi,eax
c00059e8:	0f 84 0d ff ff ff    	je     c00058fb <f_lseek+0xbc>
c00059ee:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00059f2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00059f8:	0f 84 ec 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059fe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a02:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a06:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a09:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a0d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a11:	4d                   	dec    ebp
c0005a12:	31 ff                	xor    edi,edi
c0005a14:	21 ee                	and    esi,ebp
c0005a16:	01 c6                	add    esi,eax
c0005a18:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a1b:	11 d7                	adc    edi,edx
c0005a1d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a20:	39 fa                	cmp    edx,edi
c0005a22:	75 08                	jne    c0005a2c <f_lseek+0x1ed>
c0005a24:	39 f0                	cmp    eax,esi
c0005a26:	0f 84 be 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c0005a2c:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005a2f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005a33:	0f 89 80 02 00 00    	jns    c0005cb9 <f_lseek+0x47a>
c0005a39:	83 ec 0c             	sub    esp,0xc
c0005a3c:	6a 01                	push   0x1
c0005a3e:	52                   	push   edx
c0005a3f:	50                   	push   eax
c0005a40:	55                   	push   ebp
c0005a41:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005a45:	e9 5a 02 00 00       	jmp    c0005ca4 <f_lseek+0x465>
c0005a4a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a4e:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005a51:	74 16                	je     c0005a69 <f_lseek+0x22a>
c0005a53:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005a58:	76 0f                	jbe    c0005a69 <f_lseek+0x22a>
c0005a5a:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005a61:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005a69:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005a6f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005a72:	89 c7                	mov    edi,eax
c0005a74:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005a78:	73 0d                	jae    c0005a87 <f_lseek+0x248>
c0005a7a:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005a7e:	75 07                	jne    c0005a87 <f_lseek+0x248>
c0005a80:	89 14 24             	mov    DWORD PTR [esp],edx
c0005a83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005a87:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005a8a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005a8d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a91:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005a98:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005a9f:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005aa2:	75 09                	jne    c0005aad <f_lseek+0x26e>
c0005aa4:	31 f6                	xor    esi,esi
c0005aa6:	31 ff                	xor    edi,edi
c0005aa8:	e9 af 01 00 00       	jmp    c0005c5c <f_lseek+0x41d>
c0005aad:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005ab1:	89 d7                	mov    edi,edx
c0005ab3:	c1 e1 09             	shl    ecx,0x9
c0005ab6:	09 c7                	or     edi,eax
c0005ab8:	89 cd                	mov    ebp,ecx
c0005aba:	74 6d                	je     c0005b29 <f_lseek+0x2ea>
c0005abc:	83 c0 ff             	add    eax,0xffffffff
c0005abf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ac3:	83 d2 ff             	adc    edx,0xffffffff
c0005ac6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ac9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005acd:	83 c0 ff             	add    eax,0xffffffff
c0005ad0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ad4:	83 d2 ff             	adc    edx,0xffffffff
c0005ad7:	31 ff                	xor    edi,edi
c0005ad9:	57                   	push   edi
c0005ada:	51                   	push   ecx
c0005adb:	52                   	push   edx
c0005adc:	50                   	push   eax
c0005add:	e8 4a 90 01 00       	call   c001eb2c <__udivdi3>
c0005ae2:	83 c4 10             	add    esp,0x10
c0005ae5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ae9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005aed:	57                   	push   edi
c0005aee:	55                   	push   ebp
c0005aef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af7:	e8 30 90 01 00       	call   c001eb2c <__udivdi3>
c0005afc:	83 c4 10             	add    esp,0x10
c0005aff:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b03:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b07:	19 d1                	sbb    ecx,edx
c0005b09:	72 1e                	jb     c0005b29 <f_lseek+0x2ea>
c0005b0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b0f:	89 e9                	mov    ecx,ebp
c0005b11:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b14:	f7 d9                	neg    ecx
c0005b16:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b19:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b1d:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b20:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b23:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b27:	eb 28                	jmp    c0005b51 <f_lseek+0x312>
c0005b29:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005b2c:	85 c0                	test   eax,eax
c0005b2e:	75 1e                	jne    c0005b4e <f_lseek+0x30f>
c0005b30:	31 d2                	xor    edx,edx
c0005b32:	89 d8                	mov    eax,ebx
c0005b34:	e8 a9 d4 ff ff       	call   c0002fe2 <create_chain>
c0005b39:	83 f8 01             	cmp    eax,0x1
c0005b3c:	0f 84 b9 fd ff ff    	je     c00058fb <f_lseek+0xbc>
c0005b42:	83 f8 ff             	cmp    eax,0xffffffff
c0005b45:	0f 84 c6 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005b4b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005b4e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b51:	85 c0                	test   eax,eax
c0005b53:	0f 84 4b ff ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005b59:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005b5d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005b65:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005b68:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b6c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005b6f:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005b72:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b76:	0f 83 9d 00 00 00    	jae    c0005c19 <f_lseek+0x3da>
c0005b7c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b80:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b84:	29 34 24             	sub    DWORD PTR [esp],esi
c0005b87:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005b8b:	01 f2                	add    edx,esi
c0005b8d:	11 f9                	adc    ecx,edi
c0005b8f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005b93:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005b97:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005b9a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005b9d:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005ba0:	f6 c1 02             	test   cl,0x2
c0005ba3:	74 35                	je     c0005bda <f_lseek+0x39b>
c0005ba5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005ba9:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005bac:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005baf:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005bb3:	73 16                	jae    c0005bcb <f_lseek+0x38c>
c0005bb5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005bb9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005bbd:	88 ca                	mov    dl,cl
c0005bbf:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005bc2:	83 ca 40             	or     edx,0x40
c0005bc5:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005bc8:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005bcb:	89 c2                	mov    edx,eax
c0005bcd:	89 d8                	mov    eax,ebx
c0005bcf:	e8 0e d4 ff ff       	call   c0002fe2 <create_chain>
c0005bd4:	85 c0                	test   eax,eax
c0005bd6:	75 0b                	jne    c0005be3 <f_lseek+0x3a4>
c0005bd8:	eb 30                	jmp    c0005c0a <f_lseek+0x3cb>
c0005bda:	89 c2                	mov    edx,eax
c0005bdc:	89 d8                	mov    eax,ebx
c0005bde:	e8 11 d1 ff ff       	call   c0002cf4 <get_fat>
c0005be3:	83 f8 ff             	cmp    eax,0xffffffff
c0005be6:	0f 84 25 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005bec:	83 f8 01             	cmp    eax,0x1
c0005bef:	0f 86 06 fd ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005bf5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bf9:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bfc:	0f 86 f9 fc ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005c02:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c05:	e9 5b ff ff ff       	jmp    c0005b65 <f_lseek+0x326>
c0005c0a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c19:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c1c:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c20:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c23:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c26:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c29:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c2f:	0f 84 6f fe ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005c35:	89 c2                	mov    edx,eax
c0005c37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c3b:	e8 e7 bf ff ff       	call   c0001c27 <clst2sect>
c0005c40:	89 d7                	mov    edi,edx
c0005c42:	09 c7                	or     edi,eax
c0005c44:	0f 84 b1 fc ff ff    	je     c00058fb <f_lseek+0xbc>
c0005c4a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c4e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005c51:	0f ac fe 09          	shrd   esi,edi,0x9
c0005c55:	c1 ef 09             	shr    edi,0x9
c0005c58:	01 c6                	add    esi,eax
c0005c5a:	11 d7                	adc    edi,edx
c0005c5c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c62:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c65:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005c68:	19 d1                	sbb    ecx,edx
c0005c6a:	73 0a                	jae    c0005c76 <f_lseek+0x437>
c0005c6c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005c6f:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005c72:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005c76:	a9 ff 01 00 00       	test   eax,0x1ff
c0005c7b:	74 6d                	je     c0005cea <f_lseek+0x4ab>
c0005c7d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005c80:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005c83:	39 fa                	cmp    edx,edi
c0005c85:	75 04                	jne    c0005c8b <f_lseek+0x44c>
c0005c87:	39 f0                	cmp    eax,esi
c0005c89:	74 5f                	je     c0005cea <f_lseek+0x4ab>
c0005c8b:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c8e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c92:	79 25                	jns    c0005cb9 <f_lseek+0x47a>
c0005c94:	83 ec 0c             	sub    esp,0xc
c0005c97:	6a 01                	push   0x1
c0005c99:	52                   	push   edx
c0005c9a:	50                   	push   eax
c0005c9b:	55                   	push   ebp
c0005c9c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005ca0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005ca4:	50                   	push   eax
c0005ca5:	e8 af bc ff ff       	call   c0001959 <disk_write>
c0005caa:	83 c4 20             	add    esp,0x20
c0005cad:	85 c0                	test   eax,eax
c0005caf:	0f 85 5c fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cb5:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005cb9:	83 ec 0c             	sub    esp,0xc
c0005cbc:	6a 01                	push   0x1
c0005cbe:	57                   	push   edi
c0005cbf:	56                   	push   esi
c0005cc0:	55                   	push   ebp
c0005cc1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005cc5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cc9:	50                   	push   eax
c0005cca:	e8 74 bc ff ff       	call   c0001943 <disk_read>
c0005ccf:	83 c4 20             	add    esp,0x20
c0005cd2:	85 c0                	test   eax,eax
c0005cd4:	0f 85 37 fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cda:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005cdd:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ce0:	eb 08                	jmp    c0005cea <f_lseek+0x4ab>
c0005ce2:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005cea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005cee:	83 c4 3c             	add    esp,0x3c
c0005cf1:	5b                   	pop    ebx
c0005cf2:	5e                   	pop    esi
c0005cf3:	5f                   	pop    edi
c0005cf4:	5d                   	pop    ebp
c0005cf5:	c3                   	ret    

c0005cf6 <f_opendir>:
c0005cf6:	56                   	push   esi
c0005cf7:	b8 09 00 00 00       	mov    eax,0x9
c0005cfc:	53                   	push   ebx
c0005cfd:	83 ec 24             	sub    esp,0x24
c0005d00:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d04:	85 db                	test   ebx,ebx
c0005d06:	0f 84 e6 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d0c:	31 c9                	xor    ecx,ecx
c0005d0e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d12:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d16:	e8 03 c7 ff ff       	call   c000241e <mount_volume>
c0005d1b:	85 c0                	test   eax,eax
c0005d1d:	0f 85 c9 00 00 00    	jne    c0005dec <f_opendir+0xf6>
c0005d23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d27:	83 ec 0c             	sub    esp,0xc
c0005d2a:	89 03                	mov    DWORD PTR [ebx],eax
c0005d2c:	68 60 04 00 00       	push   0x460
c0005d31:	e8 8b 24 00 00       	call   c00081c1 <ff_memalloc>
c0005d36:	83 c4 10             	add    esp,0x10
c0005d39:	89 c6                	mov    esi,eax
c0005d3b:	b8 11 00 00 00       	mov    eax,0x11
c0005d40:	85 f6                	test   esi,esi
c0005d42:	0f 84 aa 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d4c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005d52:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005d55:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005d58:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005d5c:	89 d8                	mov    eax,ebx
c0005d5e:	e8 31 ee ff ff       	call   c0004b94 <follow_path>
c0005d63:	85 c0                	test   eax,eax
c0005d65:	75 61                	jne    c0005dc8 <f_opendir+0xd2>
c0005d67:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005d6b:	78 46                	js     c0005db3 <f_opendir+0xbd>
c0005d6d:	b8 05 00 00 00       	mov    eax,0x5
c0005d72:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005d76:	74 50                	je     c0005dc8 <f_opendir+0xd2>
c0005d78:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005d7c:	8a 01                	mov    al,BYTE PTR [ecx]
c0005d7e:	3c 04                	cmp    al,0x4
c0005d80:	75 26                	jne    c0005da8 <f_opendir+0xb2>
c0005d82:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d85:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d88:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005d8b:	30 d2                	xor    dl,dl
c0005d8d:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005d91:	09 c2                	or     edx,eax
c0005d93:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005d96:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005d99:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005d9c:	89 da                	mov    edx,ebx
c0005d9e:	8d 41 10             	lea    eax,[ecx+0x10]
c0005da1:	e8 b4 ed ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0005da6:	eb 0b                	jmp    c0005db3 <f_opendir+0xbd>
c0005da8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005dab:	e8 59 ed ff ff       	call   c0004b09 <ld_clust.isra.0>
c0005db0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005db3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005db7:	31 d2                	xor    edx,edx
c0005db9:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005dbd:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005dc1:	89 d8                	mov    eax,ebx
c0005dc3:	e8 22 d1 ff ff       	call   c0002eea <dir_sdi>
c0005dc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dcc:	83 ec 0c             	sub    esp,0xc
c0005dcf:	56                   	push   esi
c0005dd0:	e8 02 24 00 00       	call   c00081d7 <ff_memfree>
c0005dd5:	83 c4 10             	add    esp,0x10
c0005dd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ddc:	83 f8 04             	cmp    eax,0x4
c0005ddf:	74 06                	je     c0005de7 <f_opendir+0xf1>
c0005de1:	85 c0                	test   eax,eax
c0005de3:	74 0d                	je     c0005df2 <f_opendir+0xfc>
c0005de5:	eb 05                	jmp    c0005dec <f_opendir+0xf6>
c0005de7:	b8 05 00 00 00       	mov    eax,0x5
c0005dec:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005df2:	83 c4 24             	add    esp,0x24
c0005df5:	5b                   	pop    ebx
c0005df6:	5e                   	pop    esi
c0005df7:	c3                   	ret    

c0005df8 <f_closedir>:
c0005df8:	53                   	push   ebx
c0005df9:	83 ec 18             	sub    esp,0x18
c0005dfc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e00:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e04:	89 d8                	mov    eax,ebx
c0005e06:	e8 86 c2 ff ff       	call   c0002091 <validate>
c0005e0b:	85 c0                	test   eax,eax
c0005e0d:	75 06                	jne    c0005e15 <f_closedir+0x1d>
c0005e0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e15:	83 c4 18             	add    esp,0x18
c0005e18:	5b                   	pop    ebx
c0005e19:	c3                   	ret    

c0005e1a <f_readdir>:
c0005e1a:	57                   	push   edi
c0005e1b:	56                   	push   esi
c0005e1c:	53                   	push   ebx
c0005e1d:	83 ec 20             	sub    esp,0x20
c0005e20:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e24:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e28:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e2c:	89 d8                	mov    eax,ebx
c0005e2e:	e8 5e c2 ff ff       	call   c0002091 <validate>
c0005e33:	85 c0                	test   eax,eax
c0005e35:	75 77                	jne    c0005eae <f_readdir+0x94>
c0005e37:	85 ff                	test   edi,edi
c0005e39:	75 0b                	jne    c0005e46 <f_readdir+0x2c>
c0005e3b:	31 d2                	xor    edx,edx
c0005e3d:	89 d8                	mov    eax,ebx
c0005e3f:	e8 a6 d0 ff ff       	call   c0002eea <dir_sdi>
c0005e44:	eb 68                	jmp    c0005eae <f_readdir+0x94>
c0005e46:	83 ec 0c             	sub    esp,0xc
c0005e49:	68 60 04 00 00       	push   0x460
c0005e4e:	e8 6e 23 00 00       	call   c00081c1 <ff_memalloc>
c0005e53:	83 c4 10             	add    esp,0x10
c0005e56:	89 c6                	mov    esi,eax
c0005e58:	b8 11 00 00 00       	mov    eax,0x11
c0005e5d:	85 f6                	test   esi,esi
c0005e5f:	74 4d                	je     c0005eae <f_readdir+0x94>
c0005e61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e65:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e6b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e6e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e71:	31 d2                	xor    edx,edx
c0005e73:	89 d8                	mov    eax,ebx
c0005e75:	e8 80 d8 ff ff       	call   c00036fa <dir_read>
c0005e7a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005e7f:	75 19                	jne    c0005e9a <f_readdir+0x80>
c0005e81:	89 fa                	mov    edx,edi
c0005e83:	89 d8                	mov    eax,ebx
c0005e85:	e8 7e ea ff ff       	call   c0004908 <get_fileinfo>
c0005e8a:	31 d2                	xor    edx,edx
c0005e8c:	89 d8                	mov    eax,ebx
c0005e8e:	e8 af d5 ff ff       	call   c0003442 <dir_next>
c0005e93:	83 f8 04             	cmp    eax,0x4
c0005e96:	75 02                	jne    c0005e9a <f_readdir+0x80>
c0005e98:	31 c0                	xor    eax,eax
c0005e9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e9e:	83 ec 0c             	sub    esp,0xc
c0005ea1:	56                   	push   esi
c0005ea2:	e8 30 23 00 00       	call   c00081d7 <ff_memfree>
c0005ea7:	83 c4 10             	add    esp,0x10
c0005eaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eae:	83 c4 20             	add    esp,0x20
c0005eb1:	5b                   	pop    ebx
c0005eb2:	5e                   	pop    esi
c0005eb3:	5f                   	pop    edi
c0005eb4:	c3                   	ret    

c0005eb5 <f_stat>:
c0005eb5:	57                   	push   edi
c0005eb6:	31 c9                	xor    ecx,ecx
c0005eb8:	56                   	push   esi
c0005eb9:	53                   	push   ebx
c0005eba:	83 ec 50             	sub    esp,0x50
c0005ebd:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005ec1:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005ec5:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005ec9:	e8 50 c5 ff ff       	call   c000241e <mount_volume>
c0005ece:	89 c3                	mov    ebx,eax
c0005ed0:	85 c0                	test   eax,eax
c0005ed2:	75 67                	jne    c0005f3b <f_stat+0x86>
c0005ed4:	83 ec 0c             	sub    esp,0xc
c0005ed7:	bb 11 00 00 00       	mov    ebx,0x11
c0005edc:	68 60 04 00 00       	push   0x460
c0005ee1:	e8 db 22 00 00       	call   c00081c1 <ff_memalloc>
c0005ee6:	83 c4 10             	add    esp,0x10
c0005ee9:	89 c6                	mov    esi,eax
c0005eeb:	85 c0                	test   eax,eax
c0005eed:	74 4c                	je     c0005f3b <f_stat+0x86>
c0005eef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ef3:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ef9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005efc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005eff:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f03:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f07:	e8 88 ec ff ff       	call   c0004b94 <follow_path>
c0005f0c:	89 c3                	mov    ebx,eax
c0005f0e:	85 c0                	test   eax,eax
c0005f10:	75 1d                	jne    c0005f2f <f_stat+0x7a>
c0005f12:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f17:	78 11                	js     c0005f2a <f_stat+0x75>
c0005f19:	85 ff                	test   edi,edi
c0005f1b:	74 12                	je     c0005f2f <f_stat+0x7a>
c0005f1d:	89 fa                	mov    edx,edi
c0005f1f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f23:	e8 e0 e9 ff ff       	call   c0004908 <get_fileinfo>
c0005f28:	eb 05                	jmp    c0005f2f <f_stat+0x7a>
c0005f2a:	bb 06 00 00 00       	mov    ebx,0x6
c0005f2f:	83 ec 0c             	sub    esp,0xc
c0005f32:	56                   	push   esi
c0005f33:	e8 9f 22 00 00       	call   c00081d7 <ff_memfree>
c0005f38:	83 c4 10             	add    esp,0x10
c0005f3b:	83 c4 50             	add    esp,0x50
c0005f3e:	89 d8                	mov    eax,ebx
c0005f40:	5b                   	pop    ebx
c0005f41:	5e                   	pop    esi
c0005f42:	5f                   	pop    edi
c0005f43:	c3                   	ret    

c0005f44 <f_getfree>:
c0005f44:	55                   	push   ebp
c0005f45:	31 c9                	xor    ecx,ecx
c0005f47:	57                   	push   edi
c0005f48:	56                   	push   esi
c0005f49:	53                   	push   ebx
c0005f4a:	83 ec 5c             	sub    esp,0x5c
c0005f4d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005f51:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005f55:	e8 c4 c4 ff ff       	call   c000241e <mount_volume>
c0005f5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f5e:	85 c0                	test   eax,eax
c0005f60:	0f 85 9d 01 00 00    	jne    c0006103 <f_getfree+0x1bf>
c0005f66:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005f6a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005f6e:	89 02                	mov    DWORD PTR [edx],eax
c0005f70:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005f73:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005f76:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005f79:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005f7d:	39 f2                	cmp    edx,esi
c0005f7f:	77 0b                	ja     c0005f8c <f_getfree+0x48>
c0005f81:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005f85:	89 10                	mov    DWORD PTR [eax],edx
c0005f87:	e9 77 01 00 00       	jmp    c0006103 <f_getfree+0x1bf>
c0005f8c:	8a 10                	mov    dl,BYTE PTR [eax]
c0005f8e:	80 fa 01             	cmp    dl,0x1
c0005f91:	75 3a                	jne    c0005fcd <f_getfree+0x89>
c0005f93:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005f97:	be 02 00 00 00       	mov    esi,0x2
c0005f9c:	31 db                	xor    ebx,ebx
c0005f9e:	89 f2                	mov    edx,esi
c0005fa0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005fa4:	e8 4b cd ff ff       	call   c0002cf4 <get_fat>
c0005fa9:	83 f8 ff             	cmp    eax,0xffffffff
c0005fac:	0f 84 28 01 00 00    	je     c00060da <f_getfree+0x196>
c0005fb2:	83 f8 01             	cmp    eax,0x1
c0005fb5:	0f 84 29 01 00 00    	je     c00060e4 <f_getfree+0x1a0>
c0005fbb:	83 d3 00             	adc    ebx,0x0
c0005fbe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fc2:	46                   	inc    esi
c0005fc3:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0005fc6:	77 d6                	ja     c0005f9e <f_getfree+0x5a>
c0005fc8:	e9 25 01 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c0005fcd:	80 fa 04             	cmp    dl,0x4
c0005fd0:	0f 85 88 00 00 00    	jne    c000605e <f_getfree+0x11a>
c0005fd6:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0005fd9:	31 ed                	xor    ebp,ebp
c0005fdb:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0005fde:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005fe2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005fe6:	31 db                	xor    ebx,ebx
c0005fe8:	85 ed                	test   ebp,ebp
c0005fea:	75 3f                	jne    c000602b <f_getfree+0xe7>
c0005fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ff0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ff4:	83 c0 01             	add    eax,0x1
c0005ff7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005ffb:	83 d2 00             	adc    edx,0x0
c0005ffe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006002:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006006:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000600a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000600e:	e8 59 c1 ff ff       	call   c000216c <move_window>
c0006013:	85 c0                	test   eax,eax
c0006015:	0f 85 d3 00 00 00    	jne    c00060ee <f_getfree+0x1aa>
c000601b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000601f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006023:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006027:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000602b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000602f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006032:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006036:	89 cf                	mov    edi,ecx
c0006038:	85 f6                	test   esi,esi
c000603a:	74 12                	je     c000604e <f_getfree+0x10a>
c000603c:	88 c1                	mov    cl,al
c000603e:	83 e1 01             	and    ecx,0x1
c0006041:	80 f9 01             	cmp    cl,0x1
c0006044:	83 d3 00             	adc    ebx,0x0
c0006047:	d0 e8                	shr    al,1
c0006049:	4e                   	dec    esi
c000604a:	39 fe                	cmp    esi,edi
c000604c:	75 ea                	jne    c0006038 <f_getfree+0xf4>
c000604e:	45                   	inc    ebp
c000604f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006055:	85 f6                	test   esi,esi
c0006057:	75 8f                	jne    c0005fe8 <f_getfree+0xa4>
c0006059:	e9 94 00 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c000605e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006061:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006064:	31 f6                	xor    esi,esi
c0006066:	31 db                	xor    ebx,ebx
c0006068:	85 f6                	test   esi,esi
c000606a:	75 1b                	jne    c0006087 <f_getfree+0x143>
c000606c:	89 d7                	mov    edi,edx
c000606e:	89 cd                	mov    ebp,ecx
c0006070:	83 c7 01             	add    edi,0x1
c0006073:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006077:	83 d5 00             	adc    ebp,0x0
c000607a:	e8 ed c0 ff ff       	call   c000216c <move_window>
c000607f:	85 c0                	test   eax,eax
c0006081:	75 6b                	jne    c00060ee <f_getfree+0x1aa>
c0006083:	89 fa                	mov    edx,edi
c0006085:	89 e9                	mov    ecx,ebp
c0006087:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000608f:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006093:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006096:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000609a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000609e:	75 11                	jne    c00060b1 <f_getfree+0x16d>
c00060a0:	e8 e9 b8 ff ff       	call   c000198e <ld_word>
c00060a5:	66 83 f8 01          	cmp    ax,0x1
c00060a9:	83 d3 00             	adc    ebx,0x0
c00060ac:	83 c6 02             	add    esi,0x2
c00060af:	eb 13                	jmp    c00060c4 <f_getfree+0x180>
c00060b1:	e8 e5 b8 ff ff       	call   c000199b <ld_dword>
c00060b6:	25 ff ff ff 0f       	and    eax,0xfffffff
c00060bb:	83 f8 01             	cmp    eax,0x1
c00060be:	83 d3 00             	adc    ebx,0x0
c00060c1:	83 c6 04             	add    esi,0x4
c00060c4:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00060ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00060ce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00060d2:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00060d6:	75 90                	jne    c0006068 <f_getfree+0x124>
c00060d8:	eb 18                	jmp    c00060f2 <f_getfree+0x1ae>
c00060da:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00060e2:	eb 0e                	jmp    c00060f2 <f_getfree+0x1ae>
c00060e4:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00060ec:	eb 04                	jmp    c00060f2 <f_getfree+0x1ae>
c00060ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060f2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00060f6:	89 18                	mov    DWORD PTR [eax],ebx
c00060f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fc:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00060ff:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006103:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006107:	83 c4 5c             	add    esp,0x5c
c000610a:	5b                   	pop    ebx
c000610b:	5e                   	pop    esi
c000610c:	5f                   	pop    edi
c000610d:	5d                   	pop    ebp
c000610e:	c3                   	ret    

c000610f <f_truncate>:
c000610f:	56                   	push   esi
c0006110:	53                   	push   ebx
c0006111:	83 ec 14             	sub    esp,0x14
c0006114:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006118:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 6e bf ff ff       	call   c0002091 <validate>
c0006123:	89 c6                	mov    esi,eax
c0006125:	85 c0                	test   eax,eax
c0006127:	0f 85 d2 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c000612d:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006131:	85 f6                	test   esi,esi
c0006133:	0f 85 c6 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c0006139:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000613d:	0f 84 b7 00 00 00    	je     c00061fa <f_truncate+0xeb>
c0006143:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006146:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006149:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000614c:	89 d1                	mov    ecx,edx
c000614e:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006151:	0f 83 a8 00 00 00    	jae    c00061ff <f_truncate+0xf0>
c0006157:	09 c2                	or     edx,eax
c0006159:	75 15                	jne    c0006170 <f_truncate+0x61>
c000615b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000615e:	31 c9                	xor    ecx,ecx
c0006160:	89 d8                	mov    eax,ebx
c0006162:	e8 7a d0 ff ff       	call   c00031e1 <remove_chain>
c0006167:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000616e:	eb 35                	jmp    c00061a5 <f_truncate+0x96>
c0006170:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006173:	89 d8                	mov    eax,ebx
c0006175:	e8 7a cb ff ff       	call   c0002cf4 <get_fat>
c000617a:	89 c2                	mov    edx,eax
c000617c:	b8 01 00 00 00       	mov    eax,0x1
c0006181:	83 fa ff             	cmp    edx,0xffffffff
c0006184:	74 1f                	je     c00061a5 <f_truncate+0x96>
c0006186:	b8 02 00 00 00       	mov    eax,0x2
c000618b:	83 fa 01             	cmp    edx,0x1
c000618e:	74 15                	je     c00061a5 <f_truncate+0x96>
c0006190:	31 c0                	xor    eax,eax
c0006192:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006196:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006199:	76 0a                	jbe    c00061a5 <f_truncate+0x96>
c000619b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000619e:	89 d8                	mov    eax,ebx
c00061a0:	e8 3c d0 ff ff       	call   c00031e1 <remove_chain>
c00061a5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00061a8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00061ab:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00061ae:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00061b1:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00061b4:	83 ca 40             	or     edx,0x40
c00061b7:	85 c0                	test   eax,eax
c00061b9:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00061bc:	75 35                	jne    c00061f3 <f_truncate+0xe4>
c00061be:	84 d2                	test   dl,dl
c00061c0:	79 3d                	jns    c00061ff <f_truncate+0xf0>
c00061c2:	83 ec 0c             	sub    esp,0xc
c00061c5:	8d 43 50             	lea    eax,[ebx+0x50]
c00061c8:	6a 01                	push   0x1
c00061ca:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00061cd:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00061d0:	50                   	push   eax
c00061d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00061d5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00061d9:	50                   	push   eax
c00061da:	e8 7a b7 ff ff       	call   c0001959 <disk_write>
c00061df:	83 c4 20             	add    esp,0x20
c00061e2:	85 c0                	test   eax,eax
c00061e4:	75 08                	jne    c00061ee <f_truncate+0xdf>
c00061e6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00061ea:	31 f6                	xor    esi,esi
c00061ec:	eb 11                	jmp    c00061ff <f_truncate+0xf0>
c00061ee:	b8 01 00 00 00       	mov    eax,0x1
c00061f3:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00061f6:	89 c6                	mov    esi,eax
c00061f8:	eb 05                	jmp    c00061ff <f_truncate+0xf0>
c00061fa:	be 07 00 00 00       	mov    esi,0x7
c00061ff:	89 f0                	mov    eax,esi
c0006201:	83 c4 14             	add    esp,0x14
c0006204:	5b                   	pop    ebx
c0006205:	5e                   	pop    esi
c0006206:	c3                   	ret    

c0006207 <f_unlink>:
c0006207:	56                   	push   esi
c0006208:	b9 02 00 00 00       	mov    ecx,0x2
c000620d:	53                   	push   ebx
c000620e:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006214:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006218:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c000621f:	e8 fa c1 ff ff       	call   c000241e <mount_volume>
c0006224:	85 c0                	test   eax,eax
c0006226:	0f 85 55 01 00 00    	jne    c0006381 <f_unlink+0x17a>
c000622c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006230:	83 ec 0c             	sub    esp,0xc
c0006233:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006237:	68 60 04 00 00       	push   0x460
c000623c:	e8 80 1f 00 00       	call   c00081c1 <ff_memalloc>
c0006241:	83 c4 10             	add    esp,0x10
c0006244:	89 c3                	mov    ebx,eax
c0006246:	b8 11 00 00 00       	mov    eax,0x11
c000624b:	85 db                	test   ebx,ebx
c000624d:	0f 84 2e 01 00 00    	je     c0006381 <f_unlink+0x17a>
c0006253:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006257:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000625d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006260:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006263:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000626a:	8d 44 24 48          	lea    eax,[esp+0x48]
c000626e:	e8 21 e9 ff ff       	call   c0004b94 <follow_path>
c0006273:	85 c0                	test   eax,eax
c0006275:	0f 85 f2 00 00 00    	jne    c000636d <f_unlink+0x166>
c000627b:	b8 06 00 00 00       	mov    eax,0x6
c0006280:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006288:	0f 88 df 00 00 00    	js     c000636d <f_unlink+0x166>
c000628e:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006293:	74 0a                	je     c000629f <f_unlink+0x98>
c0006295:	b8 07 00 00 00       	mov    eax,0x7
c000629a:	e9 ce 00 00 00       	jmp    c000636d <f_unlink+0x166>
c000629f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062a3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00062a7:	8a 02                	mov    al,BYTE PTR [edx]
c00062a9:	3c 04                	cmp    al,0x4
c00062ab:	75 12                	jne    c00062bf <f_unlink+0xb8>
c00062ad:	8d 42 10             	lea    eax,[edx+0x10]
c00062b0:	8d 54 24 20          	lea    edx,[esp+0x20]
c00062b4:	e8 a1 e8 ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c00062b9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00062bd:	eb 0e                	jmp    c00062cd <f_unlink+0xc6>
c00062bf:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00062c6:	e8 3e e8 ff ff       	call   c0004b09 <ld_clust.isra.0>
c00062cb:	89 c6                	mov    esi,eax
c00062cd:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00062d2:	75 12                	jne    c00062e6 <f_unlink+0xdf>
c00062d4:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062d8:	e8 94 d6 ff ff       	call   c0003971 <dir_remove>
c00062dd:	85 c0                	test   eax,eax
c00062df:	74 6c                	je     c000634d <f_unlink+0x146>
c00062e1:	e9 87 00 00 00       	jmp    c000636d <f_unlink+0x166>
c00062e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062ea:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00062f1:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00062f8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00062fb:	75 21                	jne    c000631e <f_unlink+0x117>
c00062fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006301:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006305:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000630c:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006313:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006317:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000631e:	31 d2                	xor    edx,edx
c0006320:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006327:	e8 be cb ff ff       	call   c0002eea <dir_sdi>
c000632c:	85 c0                	test   eax,eax
c000632e:	75 3d                	jne    c000636d <f_unlink+0x166>
c0006330:	31 d2                	xor    edx,edx
c0006332:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006339:	e8 bc d3 ff ff       	call   c00036fa <dir_read>
c000633e:	85 c0                	test   eax,eax
c0006340:	0f 84 4f ff ff ff    	je     c0006295 <f_unlink+0x8e>
c0006346:	83 f8 04             	cmp    eax,0x4
c0006349:	75 22                	jne    c000636d <f_unlink+0x166>
c000634b:	eb 87                	jmp    c00062d4 <f_unlink+0xcd>
c000634d:	85 f6                	test   esi,esi
c000634f:	75 0b                	jne    c000635c <f_unlink+0x155>
c0006351:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006355:	e8 3d df ff ff       	call   c0004297 <sync_fs>
c000635a:	eb 11                	jmp    c000636d <f_unlink+0x166>
c000635c:	31 c9                	xor    ecx,ecx
c000635e:	89 f2                	mov    edx,esi
c0006360:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006364:	e8 78 ce ff ff       	call   c00031e1 <remove_chain>
c0006369:	85 c0                	test   eax,eax
c000636b:	74 e4                	je     c0006351 <f_unlink+0x14a>
c000636d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006371:	83 ec 0c             	sub    esp,0xc
c0006374:	53                   	push   ebx
c0006375:	e8 5d 1e 00 00       	call   c00081d7 <ff_memfree>
c000637a:	83 c4 10             	add    esp,0x10
c000637d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006381:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006387:	5b                   	pop    ebx
c0006388:	5e                   	pop    esi
c0006389:	c3                   	ret    

c000638a <f_mkdir>:
c000638a:	57                   	push   edi
c000638b:	b9 02 00 00 00       	mov    ecx,0x2
c0006390:	56                   	push   esi
c0006391:	53                   	push   ebx
c0006392:	83 c4 80             	add    esp,0xffffff80
c0006395:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006399:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c00063a0:	e8 79 c0 ff ff       	call   c000241e <mount_volume>
c00063a5:	89 c3                	mov    ebx,eax
c00063a7:	85 c0                	test   eax,eax
c00063a9:	0f 85 fe 01 00 00    	jne    c00065ad <f_mkdir+0x223>
c00063af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063b3:	bb 11 00 00 00       	mov    ebx,0x11
c00063b8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00063bc:	83 ec 0c             	sub    esp,0xc
c00063bf:	68 60 04 00 00       	push   0x460
c00063c4:	e8 f8 1d 00 00       	call   c00081c1 <ff_memalloc>
c00063c9:	83 c4 10             	add    esp,0x10
c00063cc:	89 c7                	mov    edi,eax
c00063ce:	85 c0                	test   eax,eax
c00063d0:	0f 84 d7 01 00 00    	je     c00065ad <f_mkdir+0x223>
c00063d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063da:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00063e0:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00063e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00063e6:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00063ed:	8d 44 24 34          	lea    eax,[esp+0x34]
c00063f1:	e8 9e e7 ff ff       	call   c0004b94 <follow_path>
c00063f6:	89 c3                	mov    ebx,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	74 3e                	je     c000643a <f_mkdir+0xb0>
c00063fc:	83 f8 04             	cmp    eax,0x4
c00063ff:	75 3e                	jne    c000643f <f_mkdir+0xb5>
c0006401:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006405:	31 d2                	xor    edx,edx
c0006407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000640b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000640f:	e8 ce cb ff ff       	call   c0002fe2 <create_chain>
c0006414:	89 c6                	mov    esi,eax
c0006416:	85 c0                	test   eax,eax
c0006418:	74 0c                	je     c0006426 <f_mkdir+0x9c>
c000641a:	bb 02 00 00 00       	mov    ebx,0x2
c000641f:	83 f8 01             	cmp    eax,0x1
c0006422:	74 07                	je     c000642b <f_mkdir+0xa1>
c0006424:	eb 2a                	jmp    c0006450 <f_mkdir+0xc6>
c0006426:	bb 07 00 00 00       	mov    ebx,0x7
c000642b:	31 c9                	xor    ecx,ecx
c000642d:	89 f2                	mov    edx,esi
c000642f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006433:	e8 a9 cd ff ff       	call   c00031e1 <remove_chain>
c0006438:	eb 05                	jmp    c000643f <f_mkdir+0xb5>
c000643a:	bb 08 00 00 00       	mov    ebx,0x8
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	57                   	push   edi
c0006443:	e8 8f 1d 00 00       	call   c00081d7 <ff_memfree>
c0006448:	83 c4 10             	add    esp,0x10
c000644b:	e9 5d 01 00 00       	jmp    c00065ad <f_mkdir+0x223>
c0006450:	bb 01 00 00 00       	mov    ebx,0x1
c0006455:	83 f8 ff             	cmp    eax,0xffffffff
c0006458:	74 d1                	je     c000642b <f_mkdir+0xa1>
c000645a:	89 f2                	mov    edx,esi
c000645c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006460:	e8 c4 ce ff ff       	call   c0003329 <dir_clear>
c0006465:	89 c3                	mov    ebx,eax
c0006467:	85 c0                	test   eax,eax
c0006469:	75 c0                	jne    c000642b <f_mkdir+0xa1>
c000646b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000646f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006472:	74 69                	je     c00064dd <f_mkdir+0x153>
c0006474:	b9 0b 00 00 00       	mov    ecx,0xb
c0006479:	83 c0 54             	add    eax,0x54
c000647c:	ba 20 00 00 00       	mov    edx,0x20
c0006481:	e8 9c b5 ff ff       	call   c0001a22 <mem_set>
c0006486:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000648a:	ba 00 00 21 50       	mov    edx,0x50210000
c000648f:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006493:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006497:	83 c0 6a             	add    eax,0x6a
c000649a:	e8 65 b5 ff ff       	call   c0001a04 <st_dword>
c000649f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064a3:	89 f1                	mov    ecx,esi
c00064a5:	8d 50 54             	lea    edx,[eax+0x54]
c00064a8:	e8 85 e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064b1:	b9 20 00 00 00       	mov    ecx,0x20
c00064b6:	8d 50 54             	lea    edx,[eax+0x54]
c00064b9:	83 c0 74             	add    eax,0x74
c00064bc:	e8 4c b5 ff ff       	call   c0001a0d <mem_cpy>
c00064c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c5:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00064c9:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00064cd:	8d 50 74             	lea    edx,[eax+0x74]
c00064d0:	e8 5d e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00064dd:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064e1:	e8 2f db ff ff       	call   c0004015 <dir_register>
c00064e6:	89 c3                	mov    ebx,eax
c00064e8:	85 c0                	test   eax,eax
c00064ea:	0f 85 3b ff ff ff    	jne    c000642b <f_mkdir+0xa1>
c00064f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f7:	75 74                	jne    c000656d <f_mkdir+0x1e3>
c00064f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064fc:	ba 00 00 21 50       	mov    edx,0x50210000
c0006501:	83 c0 0c             	add    eax,0xc
c0006504:	e8 fb b4 ff ff       	call   c0001a04 <st_dword>
c0006509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650d:	89 f2                	mov    edx,esi
c000650f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006512:	83 c0 34             	add    eax,0x34
c0006515:	e8 ea b4 ff ff       	call   c0001a04 <st_dword>
c000651a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000651e:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006522:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006525:	c1 e2 09             	shl    edx,0x9
c0006528:	83 c0 38             	add    eax,0x38
c000652b:	e8 d4 b4 ff ff       	call   c0001a04 <st_dword>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006538:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000653b:	c1 e2 09             	shl    edx,0x9
c000653e:	83 c0 28             	add    eax,0x28
c0006541:	e8 be b4 ff ff       	call   c0001a04 <st_dword>
c0006546:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000654d:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006551:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006554:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006558:	8d 44 24 34          	lea    eax,[esp+0x34]
c000655c:	e8 8b d3 ff ff       	call   c00038ec <store_xdir>
c0006561:	89 c3                	mov    ebx,eax
c0006563:	85 c0                	test   eax,eax
c0006565:	0f 85 d4 fe ff ff    	jne    c000643f <f_mkdir+0xb5>
c000656b:	eb 30                	jmp    c000659d <f_mkdir+0x213>
c000656d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006571:	ba 00 00 21 50       	mov    edx,0x50210000
c0006576:	83 c0 16             	add    eax,0x16
c0006579:	e8 86 b4 ff ff       	call   c0001a04 <st_dword>
c000657e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006582:	89 f1                	mov    ecx,esi
c0006584:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006588:	e8 a5 e5 ff ff       	call   c0004b32 <st_clust.isra.1>
c000658d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006591:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006595:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006599:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	e8 f1 dc ff ff       	call   c0004297 <sync_fs>
c00065a6:	89 c3                	mov    ebx,eax
c00065a8:	e9 92 fe ff ff       	jmp    c000643f <f_mkdir+0xb5>
c00065ad:	83 ec 80             	sub    esp,0xffffff80
c00065b0:	89 d8                	mov    eax,ebx
c00065b2:	5b                   	pop    ebx
c00065b3:	5e                   	pop    esi
c00065b4:	5f                   	pop    edi
c00065b5:	c3                   	ret    

c00065b6 <f_rename>:
c00065b6:	55                   	push   ebp
c00065b7:	57                   	push   edi
c00065b8:	56                   	push   esi
c00065b9:	53                   	push   ebx
c00065ba:	81 ec fc 00 00 00    	sub    esp,0xfc
c00065c0:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00065c7:	e8 a4 b9 ff ff       	call   c0001f70 <get_ldnumber>
c00065cc:	b9 02 00 00 00       	mov    ecx,0x2
c00065d1:	8d 54 24 14          	lea    edx,[esp+0x14]
c00065d5:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00065dc:	e8 3d be ff ff       	call   c000241e <mount_volume>
c00065e1:	85 c0                	test   eax,eax
c00065e3:	0f 85 b5 02 00 00    	jne    c000689e <f_rename+0x2e8>
c00065e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065ed:	83 ec 0c             	sub    esp,0xc
c00065f0:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00065f4:	68 60 04 00 00       	push   0x460
c00065f9:	e8 c3 1b 00 00       	call   c00081c1 <ff_memalloc>
c00065fe:	83 c4 10             	add    esp,0x10
c0006601:	89 c3                	mov    ebx,eax
c0006603:	b8 11 00 00 00       	mov    eax,0x11
c0006608:	85 db                	test   ebx,ebx
c000660a:	0f 84 8e 02 00 00    	je     c000689e <f_rename+0x2e8>
c0006610:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006614:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000661a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000661d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006620:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006627:	8d 44 24 58          	lea    eax,[esp+0x58]
c000662b:	e8 64 e5 ff ff       	call   c0004b94 <follow_path>
c0006630:	85 c0                	test   eax,eax
c0006632:	0f 85 52 02 00 00    	jne    c000688a <f_rename+0x2d4>
c0006638:	b8 06 00 00 00       	mov    eax,0x6
c000663d:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006645:	0f 85 3f 02 00 00    	jne    c000688a <f_rename+0x2d4>
c000664b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000664f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006652:	0f 85 05 01 00 00    	jne    c000675d <f_rename+0x1a7>
c0006658:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000665b:	b9 40 00 00 00       	mov    ecx,0x40
c0006660:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006664:	e8 a4 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006669:	b9 4c 00 00 00       	mov    ecx,0x4c
c000666e:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006672:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006679:	e8 8f b3 ff ff       	call   c0001a0d <mem_cpy>
c000667e:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006685:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000668c:	e8 03 e5 ff ff       	call   c0004b94 <follow_path>
c0006691:	85 c0                	test   eax,eax
c0006693:	75 29                	jne    c00066be <f_rename+0x108>
c0006695:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006699:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00066a0:	74 0a                	je     c00066ac <f_rename+0xf6>
c00066a2:	b8 08 00 00 00       	mov    eax,0x8
c00066a7:	e9 de 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c00066ac:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00066b3:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00066ba:	75 e6                	jne    c00066a2 <f_rename+0xec>
c00066bc:	eb 09                	jmp    c00066c7 <f_rename+0x111>
c00066be:	83 f8 04             	cmp    eax,0x4
c00066c1:	0f 85 c3 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066c7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066ce:	e8 42 d9 ff ff       	call   c0004015 <dir_register>
c00066d3:	85 c0                	test   eax,eax
c00066d5:	0f 85 af 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066df:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00066e2:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00066e5:	89 c5                	mov    ebp,eax
c00066e7:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00066ea:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00066ee:	8d 46 24             	lea    eax,[esi+0x24]
c00066f1:	e8 98 b2 ff ff       	call   c000198e <ld_word>
c00066f6:	b9 40 00 00 00       	mov    ecx,0x40
c00066fb:	89 c7                	mov    edi,eax
c00066fd:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006701:	89 f0                	mov    eax,esi
c0006703:	e8 05 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006708:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000670c:	89 e9                	mov    ecx,ebp
c000670e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006711:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006714:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006718:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000671c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671f:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006722:	0f b7 d7             	movzx  edx,di
c0006725:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006728:	83 c0 24             	add    eax,0x24
c000672b:	e8 d0 b2 ff ff       	call   c0001a00 <st_word>
c0006730:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006734:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006737:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c000673a:	a8 10                	test   al,0x10
c000673c:	75 06                	jne    c0006744 <f_rename+0x18e>
c000673e:	83 c8 20             	or     eax,0x20
c0006741:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006744:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000674b:	e8 9c d1 ff ff       	call   c00038ec <store_xdir>
c0006750:	85 c0                	test   eax,eax
c0006752:	0f 84 1c 01 00 00    	je     c0006874 <f_rename+0x2be>
c0006758:	e9 2d 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c000675d:	b9 20 00 00 00       	mov    ecx,0x20
c0006762:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006769:	8d 44 24 18          	lea    eax,[esp+0x18]
c000676d:	e8 9b b2 ff ff       	call   c0001a0d <mem_cpy>
c0006772:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006777:	8d 54 24 58          	lea    edx,[esp+0x58]
c000677b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006782:	e8 86 b2 ff ff       	call   c0001a0d <mem_cpy>
c0006787:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000678e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006795:	e8 fa e3 ff ff       	call   c0004b94 <follow_path>
c000679a:	85 c0                	test   eax,eax
c000679c:	75 27                	jne    c00067c5 <f_rename+0x20f>
c000679e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00067a2:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00067a9:	0f 85 f3 fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067af:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00067b6:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00067bd:	0f 85 df fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067c3:	eb 09                	jmp    c00067ce <f_rename+0x218>
c00067c5:	83 f8 04             	cmp    eax,0x4
c00067c8:	0f 85 bc 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067ce:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067d5:	e8 3b d8 ff ff       	call   c0004015 <dir_register>
c00067da:	85 c0                	test   eax,eax
c00067dc:	0f 85 a8 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067e2:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00067e9:	b9 13 00 00 00       	mov    ecx,0x13
c00067ee:	8d 46 0d             	lea    eax,[esi+0xd]
c00067f1:	8d 54 24 25          	lea    edx,[esp+0x25]
c00067f5:	e8 13 b2 ff ff       	call   c0001a0d <mem_cpy>
c00067fa:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00067fe:	a8 10                	test   al,0x10
c0006800:	75 03                	jne    c0006805 <f_rename+0x24f>
c0006802:	83 c8 20             	or     eax,0x20
c0006805:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006808:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000680c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006810:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006814:	74 5e                	je     c0006874 <f_rename+0x2be>
c0006816:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c000681d:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006821:	74 51                	je     c0006874 <f_rename+0x2be>
c0006823:	89 f2                	mov    edx,esi
c0006825:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006829:	8a 07                	mov    al,BYTE PTR [edi]
c000682b:	e8 d9 e2 ff ff       	call   c0004b09 <ld_clust.isra.0>
c0006830:	89 c2                	mov    edx,eax
c0006832:	89 f8                	mov    eax,edi
c0006834:	e8 ee b3 ff ff       	call   c0001c27 <clst2sect>
c0006839:	89 c6                	mov    esi,eax
c000683b:	89 d1                	mov    ecx,edx
c000683d:	b8 02 00 00 00       	mov    eax,0x2
c0006842:	09 f2                	or     edx,esi
c0006844:	74 44                	je     c000688a <f_rename+0x2d4>
c0006846:	89 f2                	mov    edx,esi
c0006848:	89 f8                	mov    eax,edi
c000684a:	e8 1d b9 ff ff       	call   c000216c <move_window>
c000684f:	85 c0                	test   eax,eax
c0006851:	75 37                	jne    c000688a <f_rename+0x2d4>
c0006853:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006857:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c000685b:	75 17                	jne    c0006874 <f_rename+0x2be>
c000685d:	8d 50 74             	lea    edx,[eax+0x74]
c0006860:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006867:	e8 c6 e2 ff ff       	call   c0004b32 <st_clust.isra.1>
c000686c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006870:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006874:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006878:	e8 f4 d0 ff ff       	call   c0003971 <dir_remove>
c000687d:	85 c0                	test   eax,eax
c000687f:	75 09                	jne    c000688a <f_rename+0x2d4>
c0006881:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006885:	e8 0d da ff ff       	call   c0004297 <sync_fs>
c000688a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000688e:	83 ec 0c             	sub    esp,0xc
c0006891:	53                   	push   ebx
c0006892:	e8 40 19 00 00       	call   c00081d7 <ff_memfree>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000689e:	81 c4 fc 00 00 00    	add    esp,0xfc
c00068a4:	5b                   	pop    ebx
c00068a5:	5e                   	pop    esi
c00068a6:	5f                   	pop    edi
c00068a7:	5d                   	pop    ebp
c00068a8:	c3                   	ret    

c00068a9 <f_chmod>:
c00068a9:	57                   	push   edi
c00068aa:	b9 02 00 00 00       	mov    ecx,0x2
c00068af:	56                   	push   esi
c00068b0:	53                   	push   ebx
c00068b1:	83 ec 60             	sub    esp,0x60
c00068b4:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00068b8:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00068bc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00068c0:	8d 44 24 70          	lea    eax,[esp+0x70]
c00068c4:	e8 55 bb ff ff       	call   c000241e <mount_volume>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 af 00 00 00    	jne    c0006980 <f_chmod+0xd7>
c00068d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068d5:	83 ec 0c             	sub    esp,0xc
c00068d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00068dc:	68 60 04 00 00       	push   0x460
c00068e1:	e8 db 18 00 00       	call   c00081c1 <ff_memalloc>
c00068e6:	83 c4 10             	add    esp,0x10
c00068e9:	89 c6                	mov    esi,eax
c00068eb:	b8 11 00 00 00       	mov    eax,0x11
c00068f0:	85 f6                	test   esi,esi
c00068f2:	0f 84 88 00 00 00    	je     c0006980 <f_chmod+0xd7>
c00068f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068fc:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006902:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006905:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006908:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000690c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006910:	e8 7f e2 ff ff       	call   c0004b94 <follow_path>
c0006915:	85 c0                	test   eax,eax
c0006917:	75 53                	jne    c000696c <f_chmod+0xc3>
c0006919:	b8 06 00 00 00       	mov    eax,0x6
c000691e:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006923:	75 47                	jne    c000696c <f_chmod+0xc3>
c0006925:	89 f9                	mov    ecx,edi
c0006927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000692b:	83 e1 27             	and    ecx,0x27
c000692e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006931:	75 1d                	jne    c0006950 <f_chmod+0xa7>
c0006933:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006936:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006939:	21 cb                	and    ebx,ecx
c000693b:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c000693e:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006941:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006945:	e8 a2 cf ff ff       	call   c00038ec <store_xdir>
c000694a:	85 c0                	test   eax,eax
c000694c:	75 1e                	jne    c000696c <f_chmod+0xc3>
c000694e:	eb 13                	jmp    c0006963 <f_chmod+0xba>
c0006950:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006954:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006957:	21 cb                	and    ebx,ecx
c0006959:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c000695c:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c000695f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006967:	e8 2b d9 ff ff       	call   c0004297 <sync_fs>
c000696c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006970:	83 ec 0c             	sub    esp,0xc
c0006973:	56                   	push   esi
c0006974:	e8 5e 18 00 00       	call   c00081d7 <ff_memfree>
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006980:	83 c4 60             	add    esp,0x60
c0006983:	5b                   	pop    ebx
c0006984:	5e                   	pop    esi
c0006985:	5f                   	pop    edi
c0006986:	c3                   	ret    

c0006987 <f_utime>:
c0006987:	56                   	push   esi
c0006988:	b9 02 00 00 00       	mov    ecx,0x2
c000698d:	53                   	push   ebx
c000698e:	83 ec 64             	sub    esp,0x64
c0006991:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006995:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006999:	8d 44 24 70          	lea    eax,[esp+0x70]
c000699d:	e8 7c ba ff ff       	call   c000241e <mount_volume>
c00069a2:	85 c0                	test   eax,eax
c00069a4:	0f 85 b5 00 00 00    	jne    c0006a5f <f_utime+0xd8>
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	83 ec 0c             	sub    esp,0xc
c00069b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069b5:	68 60 04 00 00       	push   0x460
c00069ba:	e8 02 18 00 00       	call   c00081c1 <ff_memalloc>
c00069bf:	83 c4 10             	add    esp,0x10
c00069c2:	89 c3                	mov    ebx,eax
c00069c4:	b8 11 00 00 00       	mov    eax,0x11
c00069c9:	85 db                	test   ebx,ebx
c00069cb:	0f 84 8e 00 00 00    	je     c0006a5f <f_utime+0xd8>
c00069d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069d5:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00069db:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00069de:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069e1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069e9:	e8 a6 e1 ff ff       	call   c0004b94 <follow_path>
c00069ee:	85 c0                	test   eax,eax
c00069f0:	75 59                	jne    c0006a4b <f_utime+0xc4>
c00069f2:	b8 06 00 00 00       	mov    eax,0x6
c00069f7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069fc:	75 4d                	jne    c0006a4b <f_utime+0xc4>
c00069fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a02:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a06:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a0a:	c1 e2 10             	shl    edx,0x10
c0006a0d:	09 ca                	or     edx,ecx
c0006a0f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a12:	75 1a                	jne    c0006a2e <f_utime+0xa7>
c0006a14:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a17:	83 c0 0c             	add    eax,0xc
c0006a1a:	e8 e5 af ff ff       	call   c0001a04 <st_dword>
c0006a1f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a23:	e8 c4 ce ff ff       	call   c00038ec <store_xdir>
c0006a28:	85 c0                	test   eax,eax
c0006a2a:	75 1f                	jne    c0006a4b <f_utime+0xc4>
c0006a2c:	eb 14                	jmp    c0006a42 <f_utime+0xbb>
c0006a2e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006a32:	83 c0 16             	add    eax,0x16
c0006a35:	e8 ca af ff ff       	call   c0001a04 <st_dword>
c0006a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a3e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a46:	e8 4c d8 ff ff       	call   c0004297 <sync_fs>
c0006a4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a4f:	83 ec 0c             	sub    esp,0xc
c0006a52:	53                   	push   ebx
c0006a53:	e8 7f 17 00 00       	call   c00081d7 <ff_memfree>
c0006a58:	83 c4 10             	add    esp,0x10
c0006a5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a5f:	83 c4 64             	add    esp,0x64
c0006a62:	5b                   	pop    ebx
c0006a63:	5e                   	pop    esi
c0006a64:	c3                   	ret    

c0006a65 <f_getlabel>:
c0006a65:	55                   	push   ebp
c0006a66:	31 c9                	xor    ecx,ecx
c0006a68:	57                   	push   edi
c0006a69:	56                   	push   esi
c0006a6a:	53                   	push   ebx
c0006a6b:	83 ec 6c             	sub    esp,0x6c
c0006a6e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a72:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006a79:	e8 a0 b9 ff ff       	call   c000241e <mount_volume>
c0006a7e:	89 c6                	mov    esi,eax
c0006a80:	85 c0                	test   eax,eax
c0006a82:	0f 85 c1 01 00 00    	jne    c0006c49 <f_getlabel+0x1e4>
c0006a88:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006a90:	0f 84 5f 01 00 00    	je     c0006bf5 <f_getlabel+0x190>
c0006a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a9a:	31 d2                	xor    edx,edx
c0006a9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006aa0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006aa8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aac:	e8 39 c4 ff ff       	call   c0002eea <dir_sdi>
c0006ab1:	85 c0                	test   eax,eax
c0006ab3:	0f 85 2d 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006ab9:	ba 01 00 00 00       	mov    edx,0x1
c0006abe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ac2:	e8 33 cc ff ff       	call   c00036fa <dir_read>
c0006ac7:	85 c0                	test   eax,eax
c0006ac9:	0f 85 17 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ad3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ad6:	74 09                	je     c0006ae1 <f_getlabel+0x7c>
c0006ad8:	31 db                	xor    ebx,ebx
c0006ada:	31 c9                	xor    ecx,ecx
c0006adc:	e9 c8 00 00 00       	jmp    c0006ba9 <f_getlabel+0x144>
c0006ae1:	31 ed                	xor    ebp,ebp
c0006ae3:	31 db                	xor    ebx,ebx
c0006ae5:	31 ff                	xor    edi,edi
c0006ae7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aeb:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006aef:	39 fa                	cmp    edx,edi
c0006af1:	76 4b                	jbe    c0006b3e <f_getlabel+0xd9>
c0006af3:	47                   	inc    edi
c0006af4:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006af7:	01 d0                	add    eax,edx
c0006af9:	e8 90 ae ff ff       	call   c000198e <ld_word>
c0006afe:	66 85 ed             	test   bp,bp
c0006b01:	75 0d                	jne    c0006b10 <f_getlabel+0xab>
c0006b03:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b09:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b0e:	76 28                	jbe    c0006b38 <f_getlabel+0xd3>
c0006b10:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b17:	89 e9                	mov    ecx,ebp
c0006b19:	01 da                	add    edx,ebx
c0006b1b:	c1 e1 10             	shl    ecx,0x10
c0006b1e:	0f b7 c0             	movzx  eax,ax
c0006b21:	09 c8                	or     eax,ecx
c0006b23:	b9 04 00 00 00       	mov    ecx,0x4
c0006b28:	e8 01 b0 ff ff       	call   c0001b2e <put_utf>
c0006b2d:	84 c0                	test   al,al
c0006b2f:	74 0b                	je     c0006b3c <f_getlabel+0xd7>
c0006b31:	0f b6 c0             	movzx  eax,al
c0006b34:	01 c3                	add    ebx,eax
c0006b36:	31 c0                	xor    eax,eax
c0006b38:	89 c5                	mov    ebp,eax
c0006b3a:	eb ab                	jmp    c0006ae7 <f_getlabel+0x82>
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	66 85 ed             	test   bp,bp
c0006b41:	74 02                	je     c0006b45 <f_getlabel+0xe0>
c0006b43:	31 db                	xor    ebx,ebx
c0006b45:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006b4c:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006b50:	e9 a0 00 00 00       	jmp    c0006bf5 <f_getlabel+0x190>
c0006b55:	83 ff 0b             	cmp    edi,0xb
c0006b58:	74 11                	je     c0006b6b <f_getlabel+0x106>
c0006b5a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006b5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b63:	8d 79 02             	lea    edi,[ecx+0x2]
c0006b66:	c1 e0 08             	shl    eax,0x8
c0006b69:	09 c2                	or     edx,eax
c0006b6b:	0f b7 d2             	movzx  edx,dx
c0006b6e:	50                   	push   eax
c0006b6f:	50                   	push   eax
c0006b70:	68 b5 01 00 00       	push   0x1b5
c0006b75:	52                   	push   edx
c0006b76:	e8 03 17 00 00       	call   c000827e <ff_oem2uni>
c0006b7b:	83 c4 10             	add    esp,0x10
c0006b7e:	66 85 c0             	test   ax,ax
c0006b81:	74 46                	je     c0006bc9 <f_getlabel+0x164>
c0006b83:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b8a:	0f b7 c0             	movzx  eax,ax
c0006b8d:	01 da                	add    edx,ebx
c0006b8f:	b9 04 00 00 00       	mov    ecx,0x4
c0006b94:	e8 95 af ff ff       	call   c0001b2e <put_utf>
c0006b99:	84 c0                	test   al,al
c0006b9b:	74 2c                	je     c0006bc9 <f_getlabel+0x164>
c0006b9d:	0f b6 c0             	movzx  eax,al
c0006ba0:	01 c3                	add    ebx,eax
c0006ba2:	83 ff 0b             	cmp    edi,0xb
c0006ba5:	74 24                	je     c0006bcb <f_getlabel+0x166>
c0006ba7:	89 f9                	mov    ecx,edi
c0006ba9:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006bad:	8d 79 01             	lea    edi,[ecx+0x1]
c0006bb0:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006bb5:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006bba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bbe:	e8 9f ae ff ff       	call   c0001a62 <dbc_1st>
c0006bc3:	85 c0                	test   eax,eax
c0006bc5:	74 a4                	je     c0006b6b <f_getlabel+0x106>
c0006bc7:	eb 8c                	jmp    c0006b55 <f_getlabel+0xf0>
c0006bc9:	31 db                	xor    ebx,ebx
c0006bcb:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006bd2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006bd5:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006bdc:	74 17                	je     c0006bf5 <f_getlabel+0x190>
c0006bde:	4b                   	dec    ebx
c0006bdf:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006be2:	74 ee                	je     c0006bd2 <f_getlabel+0x16d>
c0006be4:	eb 0f                	jmp    c0006bf5 <f_getlabel+0x190>
c0006be6:	83 f8 04             	cmp    eax,0x4
c0006be9:	75 5c                	jne    c0006c47 <f_getlabel+0x1e2>
c0006beb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bf2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006bf5:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006bfd:	74 4a                	je     c0006c49 <f_getlabel+0x1e4>
c0006bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c03:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c06:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c09:	e8 5e b5 ff ff       	call   c000216c <move_window>
c0006c0e:	89 c6                	mov    esi,eax
c0006c10:	85 c0                	test   eax,eax
c0006c12:	75 35                	jne    c0006c49 <f_getlabel+0x1e4>
c0006c14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c18:	b8 43 00 00 00       	mov    eax,0x43
c0006c1d:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c1f:	80 f9 03             	cmp    cl,0x3
c0006c22:	74 0f                	je     c0006c33 <f_getlabel+0x1ce>
c0006c24:	31 c0                	xor    eax,eax
c0006c26:	80 f9 04             	cmp    cl,0x4
c0006c29:	0f 94 c0             	sete   al
c0006c2c:	48                   	dec    eax
c0006c2d:	83 e0 c3             	and    eax,0xffffffc3
c0006c30:	83 c0 64             	add    eax,0x64
c0006c33:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006c37:	e8 5f ad ff ff       	call   c000199b <ld_dword>
c0006c3c:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006c43:	89 07                	mov    DWORD PTR [edi],eax
c0006c45:	eb 02                	jmp    c0006c49 <f_getlabel+0x1e4>
c0006c47:	89 c6                	mov    esi,eax
c0006c49:	83 c4 6c             	add    esp,0x6c
c0006c4c:	89 f0                	mov    eax,esi
c0006c4e:	5b                   	pop    ebx
c0006c4f:	5e                   	pop    esi
c0006c50:	5f                   	pop    edi
c0006c51:	5d                   	pop    ebp
c0006c52:	c3                   	ret    

c0006c53 <f_setlabel>:
c0006c53:	56                   	push   esi
c0006c54:	b9 02 00 00 00       	mov    ecx,0x2
c0006c59:	53                   	push   ebx
c0006c5a:	83 ec 74             	sub    esp,0x74
c0006c5d:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006c61:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c68:	e8 b1 b7 ff ff       	call   c000241e <mount_volume>
c0006c6d:	89 c6                	mov    esi,eax
c0006c6f:	85 c0                	test   eax,eax
c0006c71:	0f 85 41 02 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006c77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c7b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c7e:	0f 85 8e 00 00 00    	jne    c0006d12 <f_setlabel+0xbf>
c0006c84:	b9 16 00 00 00       	mov    ecx,0x16
c0006c89:	31 d2                	xor    edx,edx
c0006c8b:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006c8f:	31 db                	xor    ebx,ebx
c0006c91:	e8 8c ad ff ff       	call   c0001a22 <mem_set>
c0006c96:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006c9d:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ca0:	0f 86 0a 01 00 00    	jbe    c0006db0 <f_setlabel+0x15d>
c0006ca6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cad:	e8 b6 ad ff ff       	call   c0001a68 <tchar2uni>
c0006cb2:	89 c6                	mov    esi,eax
c0006cb4:	3d ff ff 00 00       	cmp    eax,0xffff
c0006cb9:	76 2a                	jbe    c0006ce5 <f_setlabel+0x92>
c0006cbb:	83 f8 ff             	cmp    eax,0xffffffff
c0006cbe:	74 05                	je     c0006cc5 <f_setlabel+0x72>
c0006cc0:	83 fb 09             	cmp    ebx,0x9
c0006cc3:	76 0a                	jbe    c0006ccf <f_setlabel+0x7c>
c0006cc5:	be 06 00 00 00       	mov    esi,0x6
c0006cca:	e9 e9 01 00 00       	jmp    c0006eb8 <f_setlabel+0x265>
c0006ccf:	89 c2                	mov    edx,eax
c0006cd1:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006cd5:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006cd8:	c1 ea 10             	shr    edx,0x10
c0006cdb:	01 c8                	add    eax,ecx
c0006cdd:	43                   	inc    ebx
c0006cde:	e8 1d ad ff ff       	call   c0001a00 <st_word>
c0006ce3:	eb 04                	jmp    c0006ce9 <f_setlabel+0x96>
c0006ce5:	85 c0                	test   eax,eax
c0006ce7:	74 dc                	je     c0006cc5 <f_setlabel+0x72>
c0006ce9:	89 f2                	mov    edx,esi
c0006ceb:	b8 b7 fa 01 c0       	mov    eax,0xc001fab7
c0006cf0:	e8 5b ad ff ff       	call   c0001a50 <chk_chr>
c0006cf5:	85 c0                	test   eax,eax
c0006cf7:	75 cc                	jne    c0006cc5 <f_setlabel+0x72>
c0006cf9:	83 fb 0a             	cmp    ebx,0xa
c0006cfc:	77 c7                	ja     c0006cc5 <f_setlabel+0x72>
c0006cfe:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d01:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d05:	0f b7 d6             	movzx  edx,si
c0006d08:	01 c8                	add    eax,ecx
c0006d0a:	43                   	inc    ebx
c0006d0b:	e8 f0 ac ff ff       	call   c0001a00 <st_word>
c0006d10:	eb 84                	jmp    c0006c96 <f_setlabel+0x43>
c0006d12:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d17:	ba 20 00 00 00       	mov    edx,0x20
c0006d1c:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d20:	31 db                	xor    ebx,ebx
c0006d22:	e8 fb ac ff ff       	call   c0001a22 <mem_set>
c0006d27:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d2e:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d31:	76 60                	jbe    c0006d93 <f_setlabel+0x140>
c0006d33:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d3a:	e8 29 ad ff ff       	call   c0001a68 <tchar2uni>
c0006d3f:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d44:	0f 87 7b ff ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006d4a:	83 ec 0c             	sub    esp,0xc
c0006d4d:	50                   	push   eax
c0006d4e:	e8 97 15 00 00       	call   c00082ea <ff_wtoupper>
c0006d53:	5a                   	pop    edx
c0006d54:	59                   	pop    ecx
c0006d55:	68 b5 01 00 00       	push   0x1b5
c0006d5a:	50                   	push   eax
c0006d5b:	e8 8e 14 00 00       	call   c00081ee <ff_uni2oem>
c0006d60:	83 c4 10             	add    esp,0x10
c0006d63:	89 c6                	mov    esi,eax
c0006d65:	66 85 c0             	test   ax,ax
c0006d68:	0f 84 57 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d6e:	0f b7 d0             	movzx  edx,ax
c0006d71:	b8 b0 fa 01 c0       	mov    eax,0xc001fab0
c0006d76:	e8 d5 ac ff ff       	call   c0001a50 <chk_chr>
c0006d7b:	85 c0                	test   eax,eax
c0006d7d:	0f 85 42 ff ff ff    	jne    c0006cc5 <f_setlabel+0x72>
c0006d83:	66 81 fe ff 00       	cmp    si,0xff
c0006d88:	0f 87 14 01 00 00    	ja     c0006ea2 <f_setlabel+0x24f>
c0006d8e:	e9 fa 00 00 00       	jmp    c0006e8d <f_setlabel+0x23a>
c0006d93:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006d98:	0f 84 27 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d9e:	85 db                	test   ebx,ebx
c0006da0:	74 0e                	je     c0006db0 <f_setlabel+0x15d>
c0006da2:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006da5:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006daa:	75 04                	jne    c0006db0 <f_setlabel+0x15d>
c0006dac:	89 c3                	mov    ebx,eax
c0006dae:	eb ee                	jmp    c0006d9e <f_setlabel+0x14b>
c0006db0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006db4:	31 d2                	xor    edx,edx
c0006db6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006dba:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006dc2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dc6:	e8 1f c1 ff ff       	call   c0002eea <dir_sdi>
c0006dcb:	89 c6                	mov    esi,eax
c0006dcd:	85 c0                	test   eax,eax
c0006dcf:	0f 85 e3 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006dd5:	ba 01 00 00 00       	mov    edx,0x1
c0006dda:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dde:	e8 17 c9 ff ff       	call   c00036fa <dir_read>
c0006de3:	85 c0                	test   eax,eax
c0006de5:	75 21                	jne    c0006e08 <f_setlabel+0x1b5>
c0006de7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006deb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006def:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006df2:	74 5d                	je     c0006e51 <f_setlabel+0x1fe>
c0006df4:	85 db                	test   ebx,ebx
c0006df6:	74 0b                	je     c0006e03 <f_setlabel+0x1b0>
c0006df8:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dfd:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e01:	eb 70                	jmp    c0006e73 <f_setlabel+0x220>
c0006e03:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e06:	eb 70                	jmp    c0006e78 <f_setlabel+0x225>
c0006e08:	83 f8 04             	cmp    eax,0x4
c0006e0b:	75 7c                	jne    c0006e89 <f_setlabel+0x236>
c0006e0d:	85 db                	test   ebx,ebx
c0006e0f:	0f 84 a3 00 00 00    	je     c0006eb8 <f_setlabel+0x265>
c0006e15:	ba 01 00 00 00       	mov    edx,0x1
c0006e1a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e1e:	e8 51 ca ff ff       	call   c0003874 <dir_alloc>
c0006e23:	89 c6                	mov    esi,eax
c0006e25:	85 c0                	test   eax,eax
c0006e27:	0f 85 8b 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006e2d:	31 d2                	xor    edx,edx
c0006e2f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e33:	b9 20 00 00 00       	mov    ecx,0x20
c0006e38:	e8 e5 ab ff ff       	call   c0001a22 <mem_set>
c0006e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e41:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e44:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e48:	75 18                	jne    c0006e62 <f_setlabel+0x20f>
c0006e4a:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006e4d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e51:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006e54:	b9 16 00 00 00       	mov    ecx,0x16
c0006e59:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e5d:	83 c0 02             	add    eax,0x2
c0006e60:	eb 9b                	jmp    c0006dfd <f_setlabel+0x1aa>
c0006e62:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006e66:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e6b:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e6f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e73:	e8 95 ab ff ff       	call   c0001a0d <mem_cpy>
c0006e78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006e80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e84:	e8 0e d4 ff ff       	call   c0004297 <sync_fs>
c0006e89:	89 c6                	mov    esi,eax
c0006e8b:	eb 2b                	jmp    c0006eb8 <f_setlabel+0x265>
c0006e8d:	83 fb 0a             	cmp    ebx,0xa
c0006e90:	0f 87 2f fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006e96:	89 f0                	mov    eax,esi
c0006e98:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006e9c:	43                   	inc    ebx
c0006e9d:	e9 85 fe ff ff       	jmp    c0006d27 <f_setlabel+0xd4>
c0006ea2:	83 fb 09             	cmp    ebx,0x9
c0006ea5:	0f 87 1a fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006eab:	89 f0                	mov    eax,esi
c0006ead:	66 c1 e8 08          	shr    ax,0x8
c0006eb1:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006eb5:	43                   	inc    ebx
c0006eb6:	eb de                	jmp    c0006e96 <f_setlabel+0x243>
c0006eb8:	89 f0                	mov    eax,esi
c0006eba:	83 c4 74             	add    esp,0x74
c0006ebd:	5b                   	pop    ebx
c0006ebe:	5e                   	pop    esi
c0006ebf:	c3                   	ret    

c0006ec0 <f_forward>:
c0006ec0:	55                   	push   ebp
c0006ec1:	57                   	push   edi
c0006ec2:	56                   	push   esi
c0006ec3:	53                   	push   ebx
c0006ec4:	83 ec 2c             	sub    esp,0x2c
c0006ec7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ecb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006ecf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006ed5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006ed9:	89 d8                	mov    eax,ebx
c0006edb:	e8 b1 b1 ff ff       	call   c0002091 <validate>
c0006ee0:	89 c5                	mov    ebp,eax
c0006ee2:	85 c0                	test   eax,eax
c0006ee4:	0f 85 aa 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006eea:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006eee:	85 ed                	test   ebp,ebp
c0006ef0:	0f 85 9e 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006ef6:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006efa:	0f 84 8f 01 00 00    	je     c000708f <f_forward+0x1cf>
c0006f00:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f03:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f06:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f09:	bf 00 00 00 00       	mov    edi,0x0
c0006f0e:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f11:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f15:	89 d1                	mov    ecx,edx
c0006f17:	19 f9                	sbb    ecx,edi
c0006f19:	0f 83 cf 00 00 00    	jae    c0006fee <f_forward+0x12e>
c0006f1f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f23:	e9 c6 00 00 00       	jmp    c0006fee <f_forward+0x12e>
c0006f28:	50                   	push   eax
c0006f29:	50                   	push   eax
c0006f2a:	6a 00                	push   0x0
c0006f2c:	6a 00                	push   0x0
c0006f2e:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006f32:	83 c4 10             	add    esp,0x10
c0006f35:	85 c0                	test   eax,eax
c0006f37:	0f 84 57 01 00 00    	je     c0007094 <f_forward+0x1d4>
c0006f3d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006f40:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f44:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006f47:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006f4b:	89 d7                	mov    edi,edx
c0006f4d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006f50:	89 c6                	mov    esi,eax
c0006f52:	0f ac fe 09          	shrd   esi,edi,0x9
c0006f56:	21 ce                	and    esi,ecx
c0006f58:	89 c1                	mov    ecx,eax
c0006f5a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006f60:	0f 84 98 00 00 00    	je     c0006ffe <f_forward+0x13e>
c0006f66:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f6a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006f6d:	89 c8                	mov    eax,ecx
c0006f6f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006f73:	e8 af ac ff ff       	call   c0001c27 <clst2sect>
c0006f78:	89 d7                	mov    edi,edx
c0006f7a:	09 c7                	or     edi,eax
c0006f7c:	0f 84 9e 00 00 00    	je     c0007020 <f_forward+0x160>
c0006f82:	31 ff                	xor    edi,edi
c0006f84:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006f87:	01 c6                	add    esi,eax
c0006f89:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0006f8d:	11 d7                	adc    edi,edx
c0006f8f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0006f92:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0006f95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006f99:	39 fa                	cmp    edx,edi
c0006f9b:	0f 85 a2 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa1:	39 f0                	cmp    eax,esi
c0006fa3:	0f 85 9a 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fac:	ba 00 02 00 00       	mov    edx,0x200
c0006fb1:	25 ff 01 00 00       	and    eax,0x1ff
c0006fb6:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0006fba:	29 c2                	sub    edx,eax
c0006fbc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0006fbf:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0006fc2:	39 d1                	cmp    ecx,edx
c0006fc4:	76 02                	jbe    c0006fc8 <f_forward+0x108>
c0006fc6:	89 d1                	mov    ecx,edx
c0006fc8:	8d 73 50             	lea    esi,[ebx+0x50]
c0006fcb:	52                   	push   edx
c0006fcc:	01 c6                	add    esi,eax
c0006fce:	52                   	push   edx
c0006fcf:	51                   	push   ecx
c0006fd0:	56                   	push   esi
c0006fd1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fd5:	83 c4 10             	add    esp,0x10
c0006fd8:	85 c0                	test   eax,eax
c0006fda:	74 44                	je     c0007020 <f_forward+0x160>
c0006fdc:	31 ff                	xor    edi,edi
c0006fde:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0006fe1:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0006fe4:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0006fe8:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0006fec:	01 07                	add    DWORD PTR [edi],eax
c0006fee:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0006ff3:	0f 85 2f ff ff ff    	jne    c0006f28 <f_forward+0x68>
c0006ff9:	e9 96 00 00 00       	jmp    c0007094 <f_forward+0x1d4>
c0006ffe:	85 f6                	test   esi,esi
c0007000:	0f 85 60 ff ff ff    	jne    c0006f66 <f_forward+0xa6>
c0007006:	89 d7                	mov    edi,edx
c0007008:	09 c7                	or     edi,eax
c000700a:	75 05                	jne    c0007011 <f_forward+0x151>
c000700c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000700f:	eb 0a                	jmp    c000701b <f_forward+0x15b>
c0007011:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007014:	89 d8                	mov    eax,ebx
c0007016:	e8 d9 bc ff ff       	call   c0002cf4 <get_fat>
c000701b:	83 f8 01             	cmp    eax,0x1
c000701e:	77 0b                	ja     c000702b <f_forward+0x16b>
c0007020:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007024:	bd 02 00 00 00       	mov    ebp,0x2
c0007029:	eb 69                	jmp    c0007094 <f_forward+0x1d4>
c000702b:	83 f8 ff             	cmp    eax,0xffffffff
c000702e:	75 0b                	jne    c000703b <f_forward+0x17b>
c0007030:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007034:	bd 01 00 00 00       	mov    ebp,0x1
c0007039:	eb 59                	jmp    c0007094 <f_forward+0x1d4>
c000703b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000703e:	e9 23 ff ff ff       	jmp    c0006f66 <f_forward+0xa6>
c0007043:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007047:	79 20                	jns    c0007069 <f_forward+0x1a9>
c0007049:	83 ec 0c             	sub    esp,0xc
c000704c:	6a 01                	push   0x1
c000704e:	52                   	push   edx
c000704f:	50                   	push   eax
c0007050:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007054:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007058:	50                   	push   eax
c0007059:	e8 fb a8 ff ff       	call   c0001959 <disk_write>
c000705e:	83 c4 20             	add    esp,0x20
c0007061:	85 c0                	test   eax,eax
c0007063:	75 cb                	jne    c0007030 <f_forward+0x170>
c0007065:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007069:	83 ec 0c             	sub    esp,0xc
c000706c:	6a 01                	push   0x1
c000706e:	57                   	push   edi
c000706f:	56                   	push   esi
c0007070:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007074:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007078:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000707c:	50                   	push   eax
c000707d:	e8 c1 a8 ff ff       	call   c0001943 <disk_read>
c0007082:	83 c4 20             	add    esp,0x20
c0007085:	85 c0                	test   eax,eax
c0007087:	0f 84 1c ff ff ff    	je     c0006fa9 <f_forward+0xe9>
c000708d:	eb a1                	jmp    c0007030 <f_forward+0x170>
c000708f:	bd 07 00 00 00       	mov    ebp,0x7
c0007094:	83 c4 2c             	add    esp,0x2c
c0007097:	89 e8                	mov    eax,ebp
c0007099:	5b                   	pop    ebx
c000709a:	5e                   	pop    esi
c000709b:	5f                   	pop    edi
c000709c:	5d                   	pop    ebp
c000709d:	c3                   	ret    

c000709e <f_mkfs>:
c000709e:	55                   	push   ebp
c000709f:	57                   	push   edi
c00070a0:	56                   	push   esi
c00070a1:	53                   	push   ebx
c00070a2:	bb 0b 00 00 00       	mov    ebx,0xb
c00070a7:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00070ad:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00070b4:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00070bb:	e8 b0 ae ff ff       	call   c0001f70 <get_ldnumber>
c00070c0:	85 c0                	test   eax,eax
c00070c2:	0f 88 ec 10 00 00    	js     c00081b4 <f_mkfs+0x1116>
c00070c8:	8b 14 85 20 3d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc2e0]
c00070cf:	85 d2                	test   edx,edx
c00070d1:	74 03                	je     c00070d6 <f_mkfs+0x38>
c00070d3:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00070d6:	85 f6                	test   esi,esi
c00070d8:	75 05                	jne    c00070df <f_mkfs+0x41>
c00070da:	be a0 fa 01 c0       	mov    esi,0xc001faa0
c00070df:	83 ec 0c             	sub    esp,0xc
c00070e2:	0f b6 c0             	movzx  eax,al
c00070e5:	bb 03 00 00 00       	mov    ebx,0x3
c00070ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070f2:	e8 49 a8 ff ff       	call   c0001940 <disk_initialize>
c00070f7:	83 c4 10             	add    esp,0x10
c00070fa:	a8 01                	test   al,0x1
c00070fc:	0f 85 b2 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c0007102:	bb 0a 00 00 00       	mov    ebx,0xa
c0007107:	a8 04                	test   al,0x4
c0007109:	0f 85 a5 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c000710f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007112:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007116:	85 c0                	test   eax,eax
c0007118:	75 20                	jne    c000713a <f_mkfs+0x9c>
c000711a:	51                   	push   ecx
c000711b:	8d 44 24 78          	lea    eax,[esp+0x78]
c000711f:	50                   	push   eax
c0007120:	6a 03                	push   0x3
c0007122:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007126:	e8 44 a8 ff ff       	call   c000196f <disk_ioctl>
c000712b:	83 c4 10             	add    esp,0x10
c000712e:	85 c0                	test   eax,eax
c0007130:	74 08                	je     c000713a <f_mkfs+0x9c>
c0007132:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000713a:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000713e:	8d 42 ff             	lea    eax,[edx-0x1]
c0007141:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007146:	77 04                	ja     c000714c <f_mkfs+0xae>
c0007148:	85 c2                	test   edx,eax
c000714a:	74 08                	je     c0007154 <f_mkfs+0xb6>
c000714c:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007154:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007157:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000715b:	48                   	dec    eax
c000715c:	3c 01                	cmp    al,0x1
c000715e:	76 05                	jbe    c0007165 <f_mkfs+0xc7>
c0007160:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007165:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007168:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000716c:	48                   	dec    eax
c000716d:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007172:	77 07                	ja     c000717b <f_mkfs+0xdd>
c0007174:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007179:	74 08                	je     c0007183 <f_mkfs+0xe5>
c000717b:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007183:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007186:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000718c:	77 07                	ja     c0007195 <f_mkfs+0xf7>
c000718e:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007191:	85 d8                	test   eax,ebx
c0007193:	74 02                	je     c0007197 <f_mkfs+0xf9>
c0007195:	31 db                	xor    ebx,ebx
c0007197:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00071a2:	77 0a                	ja     c00071ae <f_mkfs+0x110>
c00071a4:	bb 11 00 00 00       	mov    ebx,0x11
c00071a9:	e9 06 10 00 00       	jmp    c00081b4 <f_mkfs+0x1116>
c00071ae:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00071b5:	8b 36                	mov    esi,DWORD PTR [esi]
c00071b7:	85 ed                	test   ebp,ebp
c00071b9:	75 1e                	jne    c00071d9 <f_mkfs+0x13b>
c00071bb:	83 ec 0c             	sub    esp,0xc
c00071be:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00071c5:	25 00 fe ff ff       	and    eax,0xfffffe00
c00071ca:	50                   	push   eax
c00071cb:	e8 f1 0f 00 00       	call   c00081c1 <ff_memalloc>
c00071d0:	83 c4 10             	add    esp,0x10
c00071d3:	89 c5                	mov    ebp,eax
c00071d5:	85 c0                	test   eax,eax
c00071d7:	74 cb                	je     c00071a4 <f_mkfs+0x106>
c00071d9:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00071e1:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00071e9:	52                   	push   edx
c00071ea:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00071ee:	50                   	push   eax
c00071ef:	6a 01                	push   0x1
c00071f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071f5:	e8 75 a7 ff ff       	call   c000196f <disk_ioctl>
c00071fa:	83 c4 10             	add    esp,0x10
c00071fd:	85 c0                	test   eax,eax
c00071ff:	0f 85 4a 0f 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007205:	89 f1                	mov    ecx,esi
c0007207:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000720f:	83 e1 0f             	and    ecx,0xf
c0007212:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000721a:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c000721e:	83 e6 08             	and    esi,0x8
c0007221:	75 56                	jne    c0007279 <f_mkfs+0x1db>
c0007223:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007227:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000722b:	83 ff 00             	cmp    edi,0x0
c000722e:	76 20                	jbe    c0007250 <f_mkfs+0x1b2>
c0007230:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007235:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000723d:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007243:	83 d7 ff             	adc    edi,0xffffffff
c0007246:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000724a:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000724e:	eb 21                	jmp    c0007271 <f_mkfs+0x1d3>
c0007250:	ba 3f 00 00 00       	mov    edx,0x3f
c0007255:	39 f2                	cmp    edx,esi
c0007257:	19 f8                	sbb    eax,edi
c0007259:	73 1e                	jae    c0007279 <f_mkfs+0x1db>
c000725b:	83 c6 c1             	add    esi,0xffffffc1
c000725e:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007266:	83 d7 ff             	adc    edi,0xffffffff
c0007269:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000726d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007271:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007279:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000727d:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007281:	89 04 24             	mov    DWORD PTR [esp],eax
c0007284:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007288:	31 c0                	xor    eax,eax
c000728a:	ba 7f 00 00 00       	mov    edx,0x7f
c000728f:	89 c7                	mov    edi,eax
c0007291:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007294:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007298:	0f 83 c5 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c000729e:	89 df                	mov    edi,ebx
c00072a0:	c1 ef 09             	shr    edi,0x9
c00072a3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00072a7:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00072ae:	c1 ef 09             	shr    edi,0x9
c00072b1:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00072b6:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00072ba:	74 29                	je     c00072e5 <f_mkfs+0x247>
c00072bc:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072c2:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00072c7:	0f 97 c2             	seta   dl
c00072ca:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00072cd:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00072d1:	0f 92 c0             	setb   al
c00072d4:	08 c2                	or     dl,al
c00072d6:	75 5b                	jne    c0007333 <f_mkfs+0x295>
c00072d8:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00072dc:	83 e0 07             	and    eax,0x7
c00072df:	3c 04                	cmp    al,0x4
c00072e1:	74 50                	je     c0007333 <f_mkfs+0x295>
c00072e3:	eb 1b                	jmp    c0007300 <f_mkfs+0x262>
c00072e5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00072ea:	0f 87 73 0a 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c00072f0:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072f6:	76 08                	jbe    c0007300 <f_mkfs+0x262>
c00072f8:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007300:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007304:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007308:	83 e0 01             	and    eax,0x1
c000730b:	80 e1 02             	and    cl,0x2
c000730e:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007312:	74 0d                	je     c0007321 <f_mkfs+0x283>
c0007314:	84 c0                	test   al,al
c0007316:	0f 84 53 09 00 00    	je     c0007c6f <f_mkfs+0xbd1>
c000731c:	e9 12 08 00 00       	jmp    c0007b33 <f_mkfs+0xa95>
c0007321:	bb 13 00 00 00       	mov    ebx,0x13
c0007326:	84 c0                	test   al,al
c0007328:	0f 85 05 08 00 00    	jne    c0007b33 <f_mkfs+0xa95>
c000732e:	e9 39 0e 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007333:	31 c0                	xor    eax,eax
c0007335:	ba ff 0f 00 00       	mov    edx,0xfff
c000733a:	89 c7                	mov    edi,eax
c000733c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000733f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007343:	0f 83 1a 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007349:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000734f:	77 39                	ja     c000738a <f_mkfs+0x2ec>
c0007351:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007356:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000735e:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007361:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007365:	73 08                	jae    c000736f <f_mkfs+0x2d1>
c0007367:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000736f:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007374:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007377:	b8 00 00 00 00       	mov    eax,0x0
c000737c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007380:	73 08                	jae    c000738a <f_mkfs+0x2ec>
c0007382:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000738a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000738e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007392:	83 c0 20             	add    eax,0x20
c0007395:	83 d2 00             	adc    edx,0x0
c0007398:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000739c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00073a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00073a4:	31 d2                	xor    edx,edx
c00073a6:	31 ff                	xor    edi,edi
c00073a8:	52                   	push   edx
c00073a9:	89 fb                	mov    ebx,edi
c00073ab:	50                   	push   eax
c00073ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b4:	e8 73 77 01 00       	call   c001eb2c <__udivdi3>
c00073b9:	83 c4 10             	add    esp,0x10
c00073bc:	c1 e0 02             	shl    eax,0x2
c00073bf:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00073c3:	05 07 02 00 00       	add    eax,0x207
c00073c8:	89 f1                	mov    ecx,esi
c00073ca:	c1 e8 09             	shr    eax,0x9
c00073cd:	83 c1 ff             	add    ecx,0xffffffff
c00073d0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00073d4:	83 d3 ff             	adc    ebx,0xffffffff
c00073d7:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00073db:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00073df:	31 d2                	xor    edx,edx
c00073e1:	01 c8                	add    eax,ecx
c00073e3:	11 da                	adc    edx,ebx
c00073e5:	89 c1                	mov    ecx,eax
c00073e7:	f7 de                	neg    esi
c00073e9:	89 d0                	mov    eax,edx
c00073eb:	83 d7 00             	adc    edi,0x0
c00073ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00073f2:	f7 df                	neg    edi
c00073f4:	21 f1                	and    ecx,esi
c00073f6:	21 f8                	and    eax,edi
c00073f8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00073fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007400:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007404:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007408:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000740c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000740f:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007413:	0f ac d0 01          	shrd   eax,edx,0x1
c0007417:	89 df                	mov    edi,ebx
c0007419:	d1 ea                	shr    edx,1
c000741b:	39 c1                	cmp    ecx,eax
c000741d:	19 d7                	sbb    edi,edx
c000741f:	0f 83 3e 09 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007429:	31 d2                	xor    edx,edx
c000742b:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000742f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007433:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007437:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000743a:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000743e:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007442:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007446:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000744a:	83 f8 0f             	cmp    eax,0xf
c000744d:	0f 86 10 09 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007453:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000745b:	0f 87 02 09 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007461:	31 d2                	xor    edx,edx
c0007463:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007467:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000746f:	83 c0 07             	add    eax,0x7
c0007472:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000747a:	c1 e8 03             	shr    eax,0x3
c000747d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007484:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000748c:	c1 e0 09             	shl    eax,0x9
c000748f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007493:	48                   	dec    eax
c0007494:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007498:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000749c:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00074a0:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00074a4:	31 d2                	xor    edx,edx
c00074a6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00074aa:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00074b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074b5:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00074ba:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00074be:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00074c2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00074c6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00074ca:	31 ff                	xor    edi,edi
c00074cc:	31 f6                	xor    esi,esi
c00074ce:	31 db                	xor    ebx,ebx
c00074d0:	85 ff                	test   edi,edi
c00074d2:	74 05                	je     c00074d9 <f_mkfs+0x43b>
c00074d4:	4f                   	dec    edi
c00074d5:	74 44                	je     c000751b <f_mkfs+0x47d>
c00074d7:	eb 4f                	jmp    c0007528 <f_mkfs+0x48a>
c00074d9:	83 ec 0c             	sub    esp,0xc
c00074dc:	0f b7 c3             	movzx  eax,bx
c00074df:	50                   	push   eax
c00074e0:	e8 05 0e 00 00       	call   c00082ea <ff_wtoupper>
c00074e5:	83 c4 10             	add    esp,0x10
c00074e8:	89 c1                	mov    ecx,eax
c00074ea:	8d 53 01             	lea    edx,[ebx+0x1]
c00074ed:	66 39 c3             	cmp    bx,ax
c00074f0:	75 3e                	jne    c0007530 <f_mkfs+0x492>
c00074f2:	be 01 00 00 00       	mov    esi,0x1
c00074f7:	89 df                	mov    edi,ebx
c00074f9:	66 01 f7             	add    di,si
c00074fc:	75 07                	jne    c0007505 <f_mkfs+0x467>
c00074fe:	83 fe 7f             	cmp    esi,0x7f
c0007501:	77 31                	ja     c0007534 <f_mkfs+0x496>
c0007503:	eb 16                	jmp    c000751b <f_mkfs+0x47d>
c0007505:	83 ec 0c             	sub    esp,0xc
c0007508:	0f b7 ff             	movzx  edi,di
c000750b:	57                   	push   edi
c000750c:	e8 d9 0d 00 00       	call   c00082ea <ff_wtoupper>
c0007511:	83 c4 10             	add    esp,0x10
c0007514:	39 c7                	cmp    edi,eax
c0007516:	75 e6                	jne    c00074fe <f_mkfs+0x460>
c0007518:	46                   	inc    esi
c0007519:	eb dc                	jmp    c00074f7 <f_mkfs+0x459>
c000751b:	31 c0                	xor    eax,eax
c000751d:	89 d9                	mov    ecx,ebx
c000751f:	4e                   	dec    esi
c0007520:	0f 95 c0             	setne  al
c0007523:	43                   	inc    ebx
c0007524:	89 c7                	mov    edi,eax
c0007526:	eb 14                	jmp    c000753c <f_mkfs+0x49e>
c0007528:	89 f1                	mov    ecx,esi
c000752a:	01 f3                	add    ebx,esi
c000752c:	31 ff                	xor    edi,edi
c000752e:	eb 0c                	jmp    c000753c <f_mkfs+0x49e>
c0007530:	89 d3                	mov    ebx,edx
c0007532:	eb 08                	jmp    c000753c <f_mkfs+0x49e>
c0007534:	bf 02 00 00 00       	mov    edi,0x2
c0007539:	83 c9 ff             	or     ecx,0xffffffff
c000753c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007540:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007543:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007547:	0f b6 c1             	movzx  eax,cl
c000754a:	e8 3a a9 ff ff       	call   c0001e89 <xsum32>
c000754f:	66 c1 e9 08          	shr    cx,0x8
c0007553:	89 c2                	mov    edx,eax
c0007555:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007558:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000755c:	0f b7 c1             	movzx  eax,cx
c000755f:	e8 25 a9 ff ff       	call   c0001e89 <xsum32>
c0007564:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007569:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000756d:	66 85 db             	test   bx,bx
c0007570:	74 1f                	je     c0007591 <f_mkfs+0x4f3>
c0007572:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007575:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000757c:	83 c0 02             	add    eax,0x2
c000757f:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007585:	39 c2                	cmp    edx,eax
c0007587:	74 08                	je     c0007591 <f_mkfs+0x4f3>
c0007589:	89 04 24             	mov    DWORD PTR [esp],eax
c000758c:	e9 3f ff ff ff       	jmp    c00074d0 <f_mkfs+0x432>
c0007591:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007594:	83 ec 0c             	sub    esp,0xc
c0007597:	05 01 02 00 00       	add    eax,0x201
c000759c:	c1 e8 09             	shr    eax,0x9
c000759f:	50                   	push   eax
c00075a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00075a4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075a8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075ac:	55                   	push   ebp
c00075ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075b1:	e8 a3 a3 ff ff       	call   c0001959 <disk_write>
c00075b6:	83 c4 20             	add    esp,0x20
c00075b9:	85 c0                	test   eax,eax
c00075bb:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00075be:	0f 85 8b 0b 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00075c4:	89 d0                	mov    eax,edx
c00075c6:	31 d2                	xor    edx,edx
c00075c8:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00075cc:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00075d0:	66 85 db             	test   bx,bx
c00075d3:	74 04                	je     c00075d9 <f_mkfs+0x53b>
c00075d5:	31 c0                	xor    eax,eax
c00075d7:	eb b0                	jmp    c0007589 <f_mkfs+0x4eb>
c00075d9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00075dd:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00075e1:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00075e5:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00075eb:	31 d2                	xor    edx,edx
c00075ed:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00075f8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00075fc:	c1 eb 09             	shr    ebx,0x9
c00075ff:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007606:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000760a:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000760e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007612:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007616:	8d 70 01             	lea    esi,[eax+0x1]
c0007619:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000761d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007621:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007628:	31 d2                	xor    edx,edx
c000762a:	25 00 fe ff ff       	and    eax,0xfffffe00
c000762f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007632:	89 c1                	mov    ecx,eax
c0007634:	89 e8                	mov    eax,ebp
c0007636:	e8 e7 a3 ff ff       	call   c0001a22 <mem_set>
c000763b:	31 c0                	xor    eax,eax
c000763d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007640:	76 10                	jbe    c0007652 <f_mkfs+0x5b4>
c0007642:	83 fe 07             	cmp    esi,0x7
c0007645:	76 0b                	jbe    c0007652 <f_mkfs+0x5b4>
c0007647:	40                   	inc    eax
c0007648:	83 ee 08             	sub    esi,0x8
c000764b:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007650:	eb eb                	jmp    c000763d <f_mkfs+0x59f>
c0007652:	b2 01                	mov    dl,0x1
c0007654:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007658:	85 f6                	test   esi,esi
c000765a:	74 0c                	je     c0007668 <f_mkfs+0x5ca>
c000765c:	39 04 24             	cmp    DWORD PTR [esp],eax
c000765f:	76 07                	jbe    c0007668 <f_mkfs+0x5ca>
c0007661:	08 11                	or     BYTE PTR [ecx],dl
c0007663:	4e                   	dec    esi
c0007664:	d1 e2                	shl    edx,1
c0007666:	eb f0                	jmp    c0007658 <f_mkfs+0x5ba>
c0007668:	89 df                	mov    edi,ebx
c000766a:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000766e:	76 04                	jbe    c0007674 <f_mkfs+0x5d6>
c0007670:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007674:	83 ec 0c             	sub    esp,0xc
c0007677:	57                   	push   edi
c0007678:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000767c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007680:	55                   	push   ebp
c0007681:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007685:	e8 cf a2 ff ff       	call   c0001959 <disk_write>
c000768a:	83 c4 20             	add    esp,0x20
c000768d:	85 c0                	test   eax,eax
c000768f:	0f 85 ba 0a 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007695:	31 d2                	xor    edx,edx
c0007697:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000769b:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000769f:	29 fb                	sub    ebx,edi
c00076a1:	0f 85 7a ff ff ff    	jne    c0007621 <f_mkfs+0x583>
c00076a7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00076ab:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00076b3:	31 f6                	xor    esi,esi
c00076b5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00076b9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00076bc:	31 d2                	xor    edx,edx
c00076be:	89 e8                	mov    eax,ebp
c00076c0:	e8 5d a3 ff ff       	call   c0001a22 <mem_set>
c00076c5:	31 c9                	xor    ecx,ecx
c00076c7:	85 db                	test   ebx,ebx
c00076c9:	75 40                	jne    c000770b <f_mkfs+0x66d>
c00076cb:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00076d0:	89 e8                	mov    eax,ebp
c00076d2:	bb 02 00 00 00       	mov    ebx,0x2
c00076d7:	e8 28 a3 ff ff       	call   c0001a04 <st_dword>
c00076dc:	8d 45 04             	lea    eax,[ebp+0x4]
c00076df:	83 ca ff             	or     edx,0xffffffff
c00076e2:	e8 1d a3 ff ff       	call   c0001a04 <st_dword>
c00076e7:	b9 08 00 00 00       	mov    ecx,0x8
c00076ec:	eb 1d                	jmp    c000770b <f_mkfs+0x66d>
c00076ee:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00076f1:	76 3b                	jbe    c000772e <f_mkfs+0x690>
c00076f3:	43                   	inc    ebx
c00076f4:	83 fe 01             	cmp    esi,0x1
c00076f7:	89 da                	mov    edx,ebx
c00076f9:	77 03                	ja     c00076fe <f_mkfs+0x660>
c00076fb:	83 ca ff             	or     edx,0xffffffff
c00076fe:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007702:	4e                   	dec    esi
c0007703:	e8 fc a2 ff ff       	call   c0001a04 <st_dword>
c0007708:	83 c1 04             	add    ecx,0x4
c000770b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000770f:	85 f6                	test   esi,esi
c0007711:	75 db                	jne    c00076ee <f_mkfs+0x650>
c0007713:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007718:	77 14                	ja     c000772e <f_mkfs+0x690>
c000771a:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000771e:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007725:	85 f6                	test   esi,esi
c0007727:	74 05                	je     c000772e <f_mkfs+0x690>
c0007729:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000772c:	77 dd                	ja     c000770b <f_mkfs+0x66d>
c000772e:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007732:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007736:	39 cf                	cmp    edi,ecx
c0007738:	76 02                	jbe    c000773c <f_mkfs+0x69e>
c000773a:	89 cf                	mov    edi,ecx
c000773c:	83 ec 0c             	sub    esp,0xc
c000773f:	57                   	push   edi
c0007740:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007744:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007748:	55                   	push   ebp
c0007749:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000774d:	e8 07 a2 ff ff       	call   c0001959 <disk_write>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	85 c0                	test   eax,eax
c0007757:	0f 85 f2 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c000775d:	31 d2                	xor    edx,edx
c000775f:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007763:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007767:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c000776b:	0f 85 48 ff ff ff    	jne    c00076b9 <f_mkfs+0x61b>
c0007771:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007774:	31 d2                	xor    edx,edx
c0007776:	89 e8                	mov    eax,ebp
c0007778:	31 ff                	xor    edi,edi
c000777a:	e8 a3 a2 ff ff       	call   c0001a22 <mem_set>
c000777f:	8d 45 34             	lea    eax,[ebp+0x34]
c0007782:	ba 02 00 00 00       	mov    edx,0x2
c0007787:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000778b:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000778f:	e8 70 a2 ff ff       	call   c0001a04 <st_dword>
c0007794:	8d 45 38             	lea    eax,[ebp+0x38]
c0007797:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000779b:	e8 64 a2 ff ff       	call   c0001a04 <st_dword>
c00077a0:	8d 45 44             	lea    eax,[ebp+0x44]
c00077a3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077a7:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c00077ab:	e8 54 a2 ff ff       	call   c0001a04 <st_dword>
c00077b0:	8d 45 54             	lea    eax,[ebp+0x54]
c00077b3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00077b7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077bb:	83 c2 02             	add    edx,0x2
c00077be:	e8 41 a2 ff ff       	call   c0001a04 <st_dword>
c00077c3:	8d 45 58             	lea    eax,[ebp+0x58]
c00077c6:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00077ca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00077ce:	e8 31 a2 ff ff       	call   c0001a04 <st_dword>
c00077d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077d7:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c00077dc:	89 c6                	mov    esi,eax
c00077de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077e2:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00077e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00077e9:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00077ed:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00077f0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077f4:	39 cb                	cmp    ebx,ecx
c00077f6:	76 02                	jbe    c00077fa <f_mkfs+0x75c>
c00077f8:	89 cb                	mov    ebx,ecx
c00077fa:	83 ec 0c             	sub    esp,0xc
c00077fd:	53                   	push   ebx
c00077fe:	57                   	push   edi
c00077ff:	56                   	push   esi
c0007800:	55                   	push   ebp
c0007801:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007805:	e8 4f a1 ff ff       	call   c0001959 <disk_write>
c000780a:	83 c4 20             	add    esp,0x20
c000780d:	85 c0                	test   eax,eax
c000780f:	0f 85 3a 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007815:	31 d2                	xor    edx,edx
c0007817:	b9 00 02 00 00       	mov    ecx,0x200
c000781c:	89 e8                	mov    eax,ebp
c000781e:	e8 ff a1 ff ff       	call   c0001a22 <mem_set>
c0007823:	31 d2                	xor    edx,edx
c0007825:	01 de                	add    esi,ebx
c0007827:	11 d7                	adc    edi,edx
c0007829:	29 1c 24             	sub    DWORD PTR [esp],ebx
c000782c:	75 bf                	jne    c00077ed <f_mkfs+0x74f>
c000782e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007832:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007836:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c000783e:	b9 00 02 00 00       	mov    ecx,0x200
c0007843:	31 d2                	xor    edx,edx
c0007845:	89 e8                	mov    eax,ebp
c0007847:	e8 d6 a1 ff ff       	call   c0001a22 <mem_set>
c000784c:	b9 0b 00 00 00       	mov    ecx,0xb
c0007851:	ba 80 fb 01 c0       	mov    edx,0xc001fb80
c0007856:	89 e8                	mov    eax,ebp
c0007858:	e8 b0 a1 ff ff       	call   c0001a0d <mem_cpy>
c000785d:	8d 45 40             	lea    eax,[ebp+0x40]
c0007860:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007864:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007868:	e8 9a a1 ff ff       	call   c0001a07 <st_qword>
c000786d:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007871:	8d 45 48             	lea    eax,[ebp+0x48]
c0007874:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007878:	e8 8a a1 ff ff       	call   c0001a07 <st_qword>
c000787d:	8d 45 50             	lea    eax,[ebp+0x50]
c0007880:	ba 20 00 00 00       	mov    edx,0x20
c0007885:	e8 7a a1 ff ff       	call   c0001a04 <st_dword>
c000788a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000788e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007892:	e8 6d a1 ff ff       	call   c0001a04 <st_dword>
c0007897:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000789b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000789f:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c00078a3:	e8 5c a1 ff ff       	call   c0001a04 <st_dword>
c00078a8:	8d 45 5c             	lea    eax,[ebp+0x5c]
c00078ab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00078af:	e8 50 a1 ff ff       	call   c0001a04 <st_dword>
c00078b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b8:	8d 50 02             	lea    edx,[eax+0x2]
c00078bb:	8d 45 60             	lea    eax,[ebp+0x60]
c00078be:	e8 41 a1 ff ff       	call   c0001a04 <st_dword>
c00078c3:	8d 45 64             	lea    eax,[ebp+0x64]
c00078c6:	ba 00 00 21 50       	mov    edx,0x50210000
c00078cb:	e8 34 a1 ff ff       	call   c0001a04 <st_dword>
c00078d0:	8d 45 68             	lea    eax,[ebp+0x68]
c00078d3:	ba 00 01 00 00       	mov    edx,0x100
c00078d8:	e8 23 a1 ff ff       	call   c0001a00 <st_word>
c00078dd:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c00078e1:	b8 0a 00 00 00       	mov    eax,0xa
c00078e6:	48                   	dec    eax
c00078e7:	74 05                	je     c00078ee <f_mkfs+0x850>
c00078e9:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00078ec:	eb f8                	jmp    c00078e6 <f_mkfs+0x848>
c00078ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078f2:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00078f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00078fa:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00078fe:	74 05                	je     c0007905 <f_mkfs+0x867>
c0007900:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007903:	eb f5                	jmp    c00078fa <f_mkfs+0x85c>
c0007905:	8d 45 78             	lea    eax,[ebp+0x78]
c0007908:	ba eb fe 00 00       	mov    edx,0xfeeb
c000790d:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007913:	31 db                	xor    ebx,ebx
c0007915:	e8 e6 a0 ff ff       	call   c0001a00 <st_word>
c000791a:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007920:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	e8 d3 a0 ff ff       	call   c0001a00 <st_word>
c000792d:	31 c9                	xor    ecx,ecx
c000792f:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007932:	83 f8 01             	cmp    eax,0x1
c0007935:	76 13                	jbe    c000794a <f_mkfs+0x8ac>
c0007937:	83 f9 70             	cmp    ecx,0x70
c000793a:	74 0e                	je     c000794a <f_mkfs+0x8ac>
c000793c:	89 da                	mov    edx,ebx
c000793e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007943:	e8 41 a5 ff ff       	call   c0001e89 <xsum32>
c0007948:	89 c3                	mov    ebx,eax
c000794a:	41                   	inc    ecx
c000794b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007951:	75 dc                	jne    c000792f <f_mkfs+0x891>
c0007953:	89 f0                	mov    eax,esi
c0007955:	89 fa                	mov    edx,edi
c0007957:	83 c0 01             	add    eax,0x1
c000795a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000795e:	83 d2 00             	adc    edx,0x0
c0007961:	83 ec 0c             	sub    esp,0xc
c0007964:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007968:	6a 01                	push   0x1
c000796a:	57                   	push   edi
c000796b:	56                   	push   esi
c000796c:	55                   	push   ebp
c000796d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007971:	e8 e3 9f ff ff       	call   c0001959 <disk_write>
c0007976:	83 c4 20             	add    esp,0x20
c0007979:	85 c0                	test   eax,eax
c000797b:	0f 85 ce 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007981:	31 d2                	xor    edx,edx
c0007983:	b9 00 02 00 00       	mov    ecx,0x200
c0007988:	89 e8                	mov    eax,ebp
c000798a:	e8 93 a0 ff ff       	call   c0001a22 <mem_set>
c000798f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	e8 64 a0 ff ff       	call   c0001a00 <st_word>
c000799c:	89 f0                	mov    eax,esi
c000799e:	89 fa                	mov    edx,edi
c00079a0:	83 c0 09             	add    eax,0x9
c00079a3:	83 d2 00             	adc    edx,0x0
c00079a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00079a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00079ad:	31 c9                	xor    ecx,ecx
c00079af:	41                   	inc    ecx
c00079b0:	89 da                	mov    edx,ebx
c00079b2:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c00079b7:	e8 cd a4 ff ff       	call   c0001e89 <xsum32>
c00079bc:	89 c3                	mov    ebx,eax
c00079be:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079c4:	75 e9                	jne    c00079af <f_mkfs+0x911>
c00079c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079ca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00079ce:	83 c0 01             	add    eax,0x1
c00079d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00079d5:	83 d2 00             	adc    edx,0x0
c00079d8:	83 ec 0c             	sub    esp,0xc
c00079db:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00079df:	6a 01                	push   0x1
c00079e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e9:	55                   	push   ebp
c00079ea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079ee:	e8 66 9f ff ff       	call   c0001959 <disk_write>
c00079f3:	83 c4 20             	add    esp,0x20
c00079f6:	85 c0                	test   eax,eax
c00079f8:	0f 85 51 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00079fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a02:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a06:	75 09                	jne    c0007a11 <f_mkfs+0x973>
c0007a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a0b:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a0f:	74 12                	je     c0007a23 <f_mkfs+0x985>
c0007a11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a15:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a21:	eb 8a                	jmp    c00079ad <f_mkfs+0x90f>
c0007a23:	31 d2                	xor    edx,edx
c0007a25:	b9 00 02 00 00       	mov    ecx,0x200
c0007a2a:	89 e8                	mov    eax,ebp
c0007a2c:	e8 f1 9f ff ff       	call   c0001a22 <mem_set>
c0007a31:	83 c6 0b             	add    esi,0xb
c0007a34:	83 d7 00             	adc    edi,0x0
c0007a37:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007a3b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007a3f:	31 c9                	xor    ecx,ecx
c0007a41:	41                   	inc    ecx
c0007a42:	89 da                	mov    edx,ebx
c0007a44:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a49:	e8 3b a4 ff ff       	call   c0001e89 <xsum32>
c0007a4e:	89 c3                	mov    ebx,eax
c0007a50:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a56:	75 e9                	jne    c0007a41 <f_mkfs+0x9a3>
c0007a58:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007a5b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007a5f:	83 c6 01             	add    esi,0x1
c0007a62:	83 d7 00             	adc    edi,0x0
c0007a65:	83 ec 0c             	sub    esp,0xc
c0007a68:	6a 01                	push   0x1
c0007a6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a72:	55                   	push   ebp
c0007a73:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a77:	e8 dd 9e ff ff       	call   c0001959 <disk_write>
c0007a7c:	83 c4 20             	add    esp,0x20
c0007a7f:	85 c0                	test   eax,eax
c0007a81:	0f 85 c8 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007a87:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007a8b:	75 06                	jne    c0007a93 <f_mkfs+0x9f5>
c0007a8d:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007a91:	74 09                	je     c0007a9c <f_mkfs+0x9fe>
c0007a93:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a96:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007a9a:	eb a3                	jmp    c0007a3f <f_mkfs+0x9a1>
c0007a9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007aa0:	89 da                	mov    edx,ebx
c0007aa2:	01 e8                	add    eax,ebp
c0007aa4:	e8 5b 9f ff ff       	call   c0001a04 <st_dword>
c0007aa9:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007aae:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007ab6:	75 e4                	jne    c0007a9c <f_mkfs+0x9fe>
c0007ab8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007abb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007abf:	83 c6 02             	add    esi,0x2
c0007ac2:	83 d7 00             	adc    edi,0x0
c0007ac5:	83 ec 0c             	sub    esp,0xc
c0007ac8:	6a 01                	push   0x1
c0007aca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ace:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ad2:	55                   	push   ebp
c0007ad3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad7:	e8 7d 9e ff ff       	call   c0001959 <disk_write>
c0007adc:	83 c4 20             	add    esp,0x20
c0007adf:	85 c0                	test   eax,eax
c0007ae1:	0f 85 68 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ae7:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007aec:	74 0d                	je     c0007afb <f_mkfs+0xa5d>
c0007aee:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007af6:	e9 43 fd ff ff       	jmp    c000783e <f_mkfs+0x7a0>
c0007afb:	b1 07                	mov    cl,0x7
c0007afd:	e9 e3 05 00 00       	jmp    c00080e5 <f_mkfs+0x1047>
c0007b02:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b07:	0f 85 4f 02 00 00    	jne    c0007d5c <f_mkfs+0xcbe>
c0007b0d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b12:	0f 86 22 02 00 00    	jbe    c0007d3a <f_mkfs+0xc9c>
c0007b18:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b1d:	0f 85 81 06 00 00    	jne    c00081a4 <f_mkfs+0x1106>
c0007b23:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b2a:	83 f8 40             	cmp    eax,0x40
c0007b2d:	0f 87 51 06 00 00    	ja     c0008184 <f_mkfs+0x10e6>
c0007b33:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007b37:	85 ff                	test   edi,edi
c0007b39:	75 1c                	jne    c0007b57 <f_mkfs+0xab9>
c0007b3b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b3e:	ba 80 fa 01 c0       	mov    edx,0xc001fa80
c0007b43:	c1 e9 0c             	shr    ecx,0xc
c0007b46:	bf 01 00 00 00       	mov    edi,0x1
c0007b4b:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007b4e:	66 85 c0             	test   ax,ax
c0007b51:	0f 85 95 01 00 00    	jne    c0007cec <f_mkfs+0xc4e>
c0007b57:	31 d2                	xor    edx,edx
c0007b59:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007b5c:	f7 f7                	div    edi
c0007b5e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007b63:	0f 86 95 01 00 00    	jbe    c0007cfe <f_mkfs+0xc60>
c0007b69:	83 c0 02             	add    eax,0x2
c0007b6c:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007b71:	01 c0                	add    eax,eax
c0007b73:	05 ff 01 00 00       	add    eax,0x1ff
c0007b78:	be 01 00 00 00       	mov    esi,0x1
c0007b7d:	c1 e8 09             	shr    eax,0x9
c0007b80:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007b84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b88:	c1 e0 05             	shl    eax,0x5
c0007b8b:	c1 e8 09             	shr    eax,0x9
c0007b8e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007b92:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007b97:	31 d2                	xor    edx,edx
c0007b99:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007b9d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007ba1:	89 f0                	mov    eax,esi
c0007ba3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007ba7:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007bab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007baf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007bb3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007bb7:	31 d2                	xor    edx,edx
c0007bb9:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007bbe:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007bc2:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007bc6:	31 db                	xor    ebx,ebx
c0007bc8:	01 c8                	add    eax,ecx
c0007bca:	11 da                	adc    edx,ebx
c0007bcc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007bd0:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007bd4:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007bd8:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007bdc:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007be0:	f7 da                	neg    edx
c0007be2:	21 d1                	and    ecx,edx
c0007be4:	29 d9                	sub    ecx,ebx
c0007be6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007beb:	0f 85 20 01 00 00    	jne    c0007d11 <f_mkfs+0xc73>
c0007bf1:	31 db                	xor    ebx,ebx
c0007bf3:	01 ce                	add    esi,ecx
c0007bf5:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007bf9:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007bfd:	31 d2                	xor    edx,edx
c0007bff:	89 f8                	mov    eax,edi
c0007c01:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c05:	c1 e0 04             	shl    eax,0x4
c0007c08:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c0c:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c10:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c14:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c18:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c1b:	19 d3                	sbb    ebx,edx
c0007c1d:	0f 82 40 01 00 00    	jb     c0007d63 <f_mkfs+0xcc5>
c0007c23:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c26:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c2a:	89 c8                	mov    eax,ecx
c0007c2c:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007c31:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007c35:	29 f0                	sub    eax,esi
c0007c37:	29 d0                	sub    eax,edx
c0007c39:	31 d2                	xor    edx,edx
c0007c3b:	f7 f7                	div    edi
c0007c3d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c42:	89 c3                	mov    ebx,eax
c0007c44:	0f 85 b8 fe ff ff    	jne    c0007b02 <f_mkfs+0xa64>
c0007c4a:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007c4f:	0f 87 1d 01 00 00    	ja     c0007d72 <f_mkfs+0xcd4>
c0007c55:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c5a:	0f 85 03 01 00 00    	jne    c0007d63 <f_mkfs+0xcc5>
c0007c60:	83 ff 01             	cmp    edi,0x1
c0007c63:	0f 86 fa 00 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007c69:	d1 ef                	shr    edi,1
c0007c6b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007c6f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c73:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c76:	85 db                	test   ebx,ebx
c0007c78:	75 2d                	jne    c0007ca7 <f_mkfs+0xc09>
c0007c7a:	89 cb                	mov    ebx,ecx
c0007c7c:	ba 90 fa 01 c0       	mov    edx,0xc001fa90
c0007c81:	c1 eb 11             	shr    ebx,0x11
c0007c84:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007c8c:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c8f:	66 85 c0             	test   ax,ax
c0007c92:	74 11                	je     c0007ca5 <f_mkfs+0xc07>
c0007c94:	83 c2 02             	add    edx,0x2
c0007c97:	39 d8                	cmp    eax,ebx
c0007c99:	77 0a                	ja     c0007ca5 <f_mkfs+0xc07>
c0007c9b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007c9f:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007ca3:	eb e7                	jmp    c0007c8c <f_mkfs+0xbee>
c0007ca5:	31 db                	xor    ebx,ebx
c0007ca7:	31 d2                	xor    edx,edx
c0007ca9:	89 c8                	mov    eax,ecx
c0007cab:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007caf:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007cb6:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007cbb:	c1 ea 09             	shr    edx,0x9
c0007cbe:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007cc3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007cc7:	0f 87 96 00 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007ccd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cd1:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007cd9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007cdd:	be 20 00 00 00       	mov    esi,0x20
c0007ce2:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007ce7:	e9 a6 fe ff ff       	jmp    c0007b92 <f_mkfs+0xaf4>
c0007cec:	83 c2 02             	add    edx,0x2
c0007cef:	39 c8                	cmp    eax,ecx
c0007cf1:	0f 87 60 fe ff ff    	ja     c0007b57 <f_mkfs+0xab9>
c0007cf7:	01 ff                	add    edi,edi
c0007cf9:	e9 4d fe ff ff       	jmp    c0007b4b <f_mkfs+0xaad>
c0007cfe:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d01:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d06:	40                   	inc    eax
c0007d07:	d1 e8                	shr    eax,1
c0007d09:	83 c0 03             	add    eax,0x3
c0007d0c:	e9 62 fe ff ff       	jmp    c0007b73 <f_mkfs+0xad5>
c0007d11:	31 d2                	xor    edx,edx
c0007d13:	89 c8                	mov    eax,ecx
c0007d15:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d19:	85 d2                	test   edx,edx
c0007d1b:	74 0c                	je     c0007d29 <f_mkfs+0xc8b>
c0007d1d:	49                   	dec    ecx
c0007d1e:	46                   	inc    esi
c0007d1f:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d24:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d29:	89 c8                	mov    eax,ecx
c0007d2b:	31 d2                	xor    edx,edx
c0007d2d:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d31:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007d35:	e9 c3 fe ff ff       	jmp    c0007bfd <f_mkfs+0xb5f>
c0007d3a:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d3f:	77 31                	ja     c0007d72 <f_mkfs+0xcd4>
c0007d41:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d46:	75 1b                	jne    c0007d63 <f_mkfs+0xcc5>
c0007d48:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007d4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007d4f:	3d 80 00 00 00       	cmp    eax,0x80
c0007d54:	0f 86 d9 fd ff ff    	jbe    c0007b33 <f_mkfs+0xa95>
c0007d5a:	eb 07                	jmp    c0007d63 <f_mkfs+0xcc5>
c0007d5c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d61:	76 0a                	jbe    c0007d6d <f_mkfs+0xccf>
c0007d63:	bb 0e 00 00 00       	mov    ebx,0xe
c0007d68:	e9 ff 03 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007d6d:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d72:	31 d2                	xor    edx,edx
c0007d74:	b9 00 02 00 00       	mov    ecx,0x200
c0007d79:	89 e8                	mov    eax,ebp
c0007d7b:	e8 a2 9c ff ff       	call   c0001a22 <mem_set>
c0007d80:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d85:	ba a2 fb 01 c0       	mov    edx,0xc001fba2
c0007d8a:	89 e8                	mov    eax,ebp
c0007d8c:	e8 7c 9c ff ff       	call   c0001a0d <mem_cpy>
c0007d91:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007d94:	ba 00 02 00 00       	mov    edx,0x200
c0007d99:	e8 62 9c ff ff       	call   c0001a00 <st_word>
c0007d9e:	89 f8                	mov    eax,edi
c0007da0:	0f b7 d6             	movzx  edx,si
c0007da3:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007da6:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007da9:	e8 52 9c ff ff       	call   c0001a00 <st_word>
c0007dae:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007db2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007db7:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007dba:	75 08                	jne    c0007dc4 <f_mkfs+0xd26>
c0007dbc:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007dc4:	8d 45 11             	lea    eax,[ebp+0x11]
c0007dc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007dcb:	e8 30 9c ff ff       	call   c0001a00 <st_word>
c0007dd0:	b8 ff ff 00 00       	mov    eax,0xffff
c0007dd5:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007dd9:	39 d0                	cmp    eax,edx
c0007ddb:	b8 00 00 00 00       	mov    eax,0x0
c0007de0:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007de4:	72 0a                	jb     c0007df0 <f_mkfs+0xd52>
c0007de6:	8d 45 13             	lea    eax,[ebp+0x13]
c0007de9:	e8 12 9c ff ff       	call   c0001a00 <st_word>
c0007dee:	eb 08                	jmp    c0007df8 <f_mkfs+0xd5a>
c0007df0:	8d 45 20             	lea    eax,[ebp+0x20]
c0007df3:	e8 0c 9c ff ff       	call   c0001a04 <st_dword>
c0007df8:	8d 45 18             	lea    eax,[ebp+0x18]
c0007dfb:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e00:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e04:	e8 f7 9b ff ff       	call   c0001a00 <st_word>
c0007e09:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e0c:	ba ff 00 00 00       	mov    edx,0xff
c0007e11:	e8 ea 9b ff ff       	call   c0001a00 <st_word>
c0007e16:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e19:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e1d:	e8 e2 9b ff ff       	call   c0001a04 <st_dword>
c0007e22:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e27:	75 57                	jne    c0007e80 <f_mkfs+0xde2>
c0007e29:	8d 45 43             	lea    eax,[ebp+0x43]
c0007e2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e31:	e8 ce 9b ff ff       	call   c0001a04 <st_dword>
c0007e36:	8d 45 24             	lea    eax,[ebp+0x24]
c0007e39:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007e3d:	e8 c2 9b ff ff       	call   c0001a04 <st_dword>
c0007e42:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007e45:	ba 02 00 00 00       	mov    edx,0x2
c0007e4a:	e8 b5 9b ff ff       	call   c0001a04 <st_dword>
c0007e4f:	8d 45 30             	lea    eax,[ebp+0x30]
c0007e52:	ba 01 00 00 00       	mov    edx,0x1
c0007e57:	e8 a4 9b ff ff       	call   c0001a00 <st_word>
c0007e5c:	8d 45 32             	lea    eax,[ebp+0x32]
c0007e5f:	ba 06 00 00 00       	mov    edx,0x6
c0007e64:	e8 97 9b ff ff       	call   c0001a00 <st_word>
c0007e69:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007e6d:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007e71:	8d 45 47             	lea    eax,[ebp+0x47]
c0007e74:	b9 13 00 00 00       	mov    ecx,0x13
c0007e79:	ba ae fb 01 c0       	mov    edx,0xc001fbae
c0007e7e:	eb 2f                	jmp    c0007eaf <f_mkfs+0xe11>
c0007e80:	8d 45 27             	lea    eax,[ebp+0x27]
c0007e83:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e88:	e8 77 9b ff ff       	call   c0001a04 <st_dword>
c0007e8d:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007e92:	8d 45 16             	lea    eax,[ebp+0x16]
c0007e95:	e8 66 9b ff ff       	call   c0001a00 <st_word>
c0007e9a:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007e9e:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007ea2:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007ea5:	b9 13 00 00 00       	mov    ecx,0x13
c0007eaa:	ba c2 fb 01 c0       	mov    edx,0xc001fbc2
c0007eaf:	e8 59 9b ff ff       	call   c0001a0d <mem_cpy>
c0007eb4:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007eba:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007ebf:	89 f0                	mov    eax,esi
c0007ec1:	e8 3a 9b ff ff       	call   c0001a00 <st_word>
c0007ec6:	83 ec 0c             	sub    esp,0xc
c0007ec9:	6a 01                	push   0x1
c0007ecb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ecf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ed3:	55                   	push   ebp
c0007ed4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ed8:	e8 7c 9a ff ff       	call   c0001959 <disk_write>
c0007edd:	83 c4 20             	add    esp,0x20
c0007ee0:	85 c0                	test   eax,eax
c0007ee2:	0f 85 67 02 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ee8:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eed:	0f 85 b7 00 00 00    	jne    c0007faa <f_mkfs+0xf0c>
c0007ef3:	83 ec 0c             	sub    esp,0xc
c0007ef6:	6a 01                	push   0x1
c0007ef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007efc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f00:	83 c0 06             	add    eax,0x6
c0007f03:	83 d2 00             	adc    edx,0x0
c0007f06:	52                   	push   edx
c0007f07:	50                   	push   eax
c0007f08:	55                   	push   ebp
c0007f09:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f0d:	e8 47 9a ff ff       	call   c0001959 <disk_write>
c0007f12:	83 c4 20             	add    esp,0x20
c0007f15:	b9 00 02 00 00       	mov    ecx,0x200
c0007f1a:	31 d2                	xor    edx,edx
c0007f1c:	89 e8                	mov    eax,ebp
c0007f1e:	e8 ff 9a ff ff       	call   c0001a22 <mem_set>
c0007f23:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f28:	89 e8                	mov    eax,ebp
c0007f2a:	e8 d5 9a ff ff       	call   c0001a04 <st_dword>
c0007f2f:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007f35:	ba 72 72 41 61       	mov    edx,0x61417272
c0007f3a:	e8 c5 9a ff ff       	call   c0001a04 <st_dword>
c0007f3f:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007f42:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007f48:	e8 b7 9a ff ff       	call   c0001a04 <st_dword>
c0007f4d:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007f53:	ba 02 00 00 00       	mov    edx,0x2
c0007f58:	e8 a7 9a ff ff       	call   c0001a04 <st_dword>
c0007f5d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f62:	89 f0                	mov    eax,esi
c0007f64:	e8 97 9a ff ff       	call   c0001a00 <st_word>
c0007f69:	83 ec 0c             	sub    esp,0xc
c0007f6c:	6a 01                	push   0x1
c0007f6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f72:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f76:	83 c0 07             	add    eax,0x7
c0007f79:	83 d2 00             	adc    edx,0x0
c0007f7c:	52                   	push   edx
c0007f7d:	50                   	push   eax
c0007f7e:	55                   	push   ebp
c0007f7f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f83:	e8 d1 99 ff ff       	call   c0001959 <disk_write>
c0007f88:	83 c4 14             	add    esp,0x14
c0007f8b:	6a 01                	push   0x1
c0007f8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f91:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f95:	83 c0 01             	add    eax,0x1
c0007f98:	83 d2 00             	adc    edx,0x0
c0007f9b:	52                   	push   edx
c0007f9c:	50                   	push   eax
c0007f9d:	55                   	push   ebp
c0007f9e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fa2:	e8 b2 99 ff ff       	call   c0001959 <disk_write>
c0007fa7:	83 c4 20             	add    esp,0x20
c0007faa:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0007fb1:	31 d2                	xor    edx,edx
c0007fb3:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0007fb9:	31 db                	xor    ebx,ebx
c0007fbb:	89 e8                	mov    eax,ebp
c0007fbd:	e8 60 9a ff ff       	call   c0001a22 <mem_set>
c0007fc2:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0007fc7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007fce:	0f 94 c3             	sete   bl
c0007fd1:	4b                   	dec    ebx
c0007fd2:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0007fd8:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0007fde:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fe3:	75 21                	jne    c0008006 <f_mkfs+0xf68>
c0007fe5:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007fea:	89 e8                	mov    eax,ebp
c0007fec:	e8 13 9a ff ff       	call   c0001a04 <st_dword>
c0007ff1:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ff4:	83 ca ff             	or     edx,0xffffffff
c0007ff7:	e8 08 9a ff ff       	call   c0001a04 <st_dword>
c0007ffc:	8d 45 08             	lea    eax,[ebp+0x8]
c0007fff:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008004:	eb 04                	jmp    c000800a <f_mkfs+0xf6c>
c0008006:	89 da                	mov    edx,ebx
c0008008:	89 e8                	mov    eax,ebp
c000800a:	e8 f5 99 ff ff       	call   c0001a04 <st_dword>
c000800f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008013:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008017:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000801b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000801f:	39 ce                	cmp    esi,ecx
c0008021:	76 02                	jbe    c0008025 <f_mkfs+0xf87>
c0008023:	89 ce                	mov    esi,ecx
c0008025:	83 ec 0c             	sub    esp,0xc
c0008028:	56                   	push   esi
c0008029:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000802d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008031:	55                   	push   ebp
c0008032:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008036:	e8 1e 99 ff ff       	call   c0001959 <disk_write>
c000803b:	83 c4 20             	add    esp,0x20
c000803e:	85 c0                	test   eax,eax
c0008040:	0f 85 09 01 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0008046:	31 d2                	xor    edx,edx
c0008048:	b9 00 02 00 00       	mov    ecx,0x200
c000804d:	89 e8                	mov    eax,ebp
c000804f:	e8 ce 99 ff ff       	call   c0001a22 <mem_set>
c0008054:	31 d2                	xor    edx,edx
c0008056:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000805a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000805e:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008062:	75 b3                	jne    c0008017 <f_mkfs+0xf79>
c0008064:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008067:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000806e:	40                   	inc    eax
c000806f:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008073:	0f 87 65 ff ff ff    	ja     c0007fde <f_mkfs+0xf40>
c0008079:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000807e:	74 04                	je     c0008084 <f_mkfs+0xfe6>
c0008080:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008084:	89 fb                	mov    ebx,edi
c0008086:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000808a:	76 04                	jbe    c0008090 <f_mkfs+0xff2>
c000808c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008090:	83 ec 0c             	sub    esp,0xc
c0008093:	53                   	push   ebx
c0008094:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008098:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000809c:	55                   	push   ebp
c000809d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080a1:	e8 b3 98 ff ff       	call   c0001959 <disk_write>
c00080a6:	83 c4 20             	add    esp,0x20
c00080a9:	85 c0                	test   eax,eax
c00080ab:	0f 85 9e 00 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00080b1:	31 d2                	xor    edx,edx
c00080b3:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00080b7:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080bb:	29 df                	sub    edi,ebx
c00080bd:	75 c5                	jne    c0008084 <f_mkfs+0xfe6>
c00080bf:	b1 0c                	mov    cl,0xc
c00080c1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c6:	74 1d                	je     c00080e5 <f_mkfs+0x1047>
c00080c8:	b8 ff ff 00 00       	mov    eax,0xffff
c00080cd:	b1 06                	mov    cl,0x6
c00080cf:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00080d3:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00080d7:	72 0c                	jb     c00080e5 <f_mkfs+0x1047>
c00080d9:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00080de:	0f 94 c1             	sete   cl
c00080e1:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00080e5:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00080ea:	75 4c                	jne    c0008138 <f_mkfs+0x109a>
c00080ec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00080f0:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00080f4:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00080fb:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008102:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c000810d:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008118:	0f b6 c9             	movzx  ecx,cl
c000811b:	83 ec 0c             	sub    esp,0xc
c000811e:	55                   	push   ebp
c000811f:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008126:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000812a:	e8 2f c2 ff ff       	call   c000435e <create_partition>
c000812f:	83 c4 10             	add    esp,0x10
c0008132:	89 c3                	mov    ebx,eax
c0008134:	85 c0                	test   eax,eax
c0008136:	75 34                	jne    c000816c <f_mkfs+0x10ce>
c0008138:	31 db                	xor    ebx,ebx
c000813a:	50                   	push   eax
c000813b:	6a 00                	push   0x0
c000813d:	6a 00                	push   0x0
c000813f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008143:	e8 27 98 ff ff       	call   c000196f <disk_ioctl>
c0008148:	83 c4 10             	add    esp,0x10
c000814b:	85 c0                	test   eax,eax
c000814d:	74 1d                	je     c000816c <f_mkfs+0x10ce>
c000814f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008157:	75 0c                	jne    c0008165 <f_mkfs+0x10c7>
c0008159:	83 ec 0c             	sub    esp,0xc
c000815c:	55                   	push   ebp
c000815d:	e8 75 00 00 00       	call   c00081d7 <ff_memfree>
c0008162:	83 c4 10             	add    esp,0x10
c0008165:	bb 01 00 00 00       	mov    ebx,0x1
c000816a:	eb 48                	jmp    c00081b4 <f_mkfs+0x1116>
c000816c:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008174:	75 3e                	jne    c00081b4 <f_mkfs+0x1116>
c0008176:	83 ec 0c             	sub    esp,0xc
c0008179:	55                   	push   ebp
c000817a:	e8 58 00 00 00       	call   c00081d7 <ff_memfree>
c000817f:	83 c4 10             	add    esp,0x10
c0008182:	eb 30                	jmp    c00081b4 <f_mkfs+0x1116>
c0008184:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008189:	0f 85 eb fa ff ff    	jne    c0007c7a <f_mkfs+0xbdc>
c000818f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008193:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008199:	0f 86 b8 f9 ff ff    	jbe    c0007b57 <f_mkfs+0xab9>
c000819f:	e9 bf fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081a4:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081a9:	0f 85 c0 fa ff ff    	jne    c0007c6f <f_mkfs+0xbd1>
c00081af:	e9 af fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081b4:	81 c4 9c 00 00 00    	add    esp,0x9c
c00081ba:	89 d8                	mov    eax,ebx
c00081bc:	5b                   	pop    ebx
c00081bd:	5e                   	pop    esi
c00081be:	5f                   	pop    edi
c00081bf:	5d                   	pop    ebp
c00081c0:	c3                   	ret    

c00081c1 <ff_memalloc>:
c00081c1:	83 ec 0c             	sub    esp,0xc
c00081c4:	83 ec 0c             	sub    esp,0xc
c00081c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081cb:	e8 9a 3d 00 00       	call   c000bf6a <malloc>
c00081d0:	83 c4 10             	add    esp,0x10
c00081d3:	83 c4 0c             	add    esp,0xc
c00081d6:	c3                   	ret    

c00081d7 <ff_memfree>:
c00081d7:	83 ec 0c             	sub    esp,0xc
c00081da:	83 ec 0c             	sub    esp,0xc
c00081dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081e1:	e8 94 3d 00 00       	call   c000bf7a <free>
c00081e6:	83 c4 10             	add    esp,0x10
c00081e9:	90                   	nop
c00081ea:	83 c4 0c             	add    esp,0xc
c00081ed:	c3                   	ret    

c00081ee <ff_uni2oem>:
c00081ee:	83 ec 14             	sub    esp,0x14
c00081f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081f5:	66 89 04 24          	mov    WORD PTR [esp],ax
c00081f9:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008200:	c7 44 24 0c e0 fe 01 c0 	mov    DWORD PTR [esp+0xc],0xc001fee0
c0008208:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000820d:	77 0b                	ja     c000821a <ff_uni2oem+0x2c>
c000820f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008213:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008218:	eb 5b                	jmp    c0008275 <ff_uni2oem+0x87>
c000821a:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008222:	77 51                	ja     c0008275 <ff_uni2oem+0x87>
c0008224:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000822a:	75 49                	jne    c0008275 <ff_uni2oem+0x87>
c000822c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008233:	eb 0b                	jmp    c0008240 <ff_uni2oem+0x52>
c0008235:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000823a:	40                   	inc    eax
c000823b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008240:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008246:	77 1b                	ja     c0008263 <ff_uni2oem+0x75>
c0008248:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000824d:	01 c0                	add    eax,eax
c000824f:	89 c2                	mov    edx,eax
c0008251:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008255:	01 d0                	add    eax,edx
c0008257:	66 8b 00             	mov    ax,WORD PTR [eax]
c000825a:	0f b7 c0             	movzx  eax,ax
c000825d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008261:	75 d2                	jne    c0008235 <ff_uni2oem+0x47>
c0008263:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008268:	83 e8 80             	sub    eax,0xffffff80
c000826b:	25 ff 00 00 00       	and    eax,0xff
c0008270:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008275:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000827a:	83 c4 14             	add    esp,0x14
c000827d:	c3                   	ret    

c000827e <ff_oem2uni>:
c000827e:	83 ec 18             	sub    esp,0x18
c0008281:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008285:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008289:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000828e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008292:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008299:	c7 44 24 10 e0 fe 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fee0
c00082a1:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00082a7:	77 0b                	ja     c00082b4 <ff_oem2uni+0x36>
c00082a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ad:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082b2:	eb 2d                	jmp    c00082e1 <ff_oem2uni+0x63>
c00082b4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ba:	75 25                	jne    c00082e1 <ff_oem2uni+0x63>
c00082bc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00082c3:	77 1c                	ja     c00082e1 <ff_oem2uni+0x63>
c00082c5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00082ca:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00082cf:	01 c0                	add    eax,eax
c00082d1:	89 c2                	mov    edx,eax
c00082d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00082d7:	01 d0                	add    eax,edx
c00082d9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082dc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082e1:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00082e6:	83 c4 18             	add    esp,0x18
c00082e9:	c3                   	ret    

c00082ea <ff_wtoupper>:
c00082ea:	83 ec 10             	sub    esp,0x10
c00082ed:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00082f5:	0f 87 3e 01 00 00    	ja     c0008439 <ff_wtoupper+0x14f>
c00082fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00082ff:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008304:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000830b:	77 07                	ja     c0008314 <ff_wtoupper+0x2a>
c000830d:	b8 e0 fc 01 c0       	mov    eax,0xc001fce0
c0008312:	eb 05                	jmp    c0008319 <ff_wtoupper+0x2f>
c0008314:	b8 20 fc 01 c0       	mov    eax,0xc001fc20
c0008319:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000831d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008321:	8d 50 02             	lea    edx,[eax+0x2]
c0008324:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008328:	66 8b 00             	mov    ax,WORD PTR [eax]
c000832b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008330:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008336:	0f 84 f4 00 00 00    	je     c0008430 <ff_wtoupper+0x146>
c000833c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008341:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008346:	0f 82 e4 00 00 00    	jb     c0008430 <ff_wtoupper+0x146>
c000834c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008350:	8d 50 02             	lea    edx,[eax+0x2]
c0008353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008357:	66 8b 00             	mov    ax,WORD PTR [eax]
c000835a:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000835f:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008364:	66 c1 e8 08          	shr    ax,0x8
c0008368:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000836d:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008374:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008379:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000837e:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008383:	01 ca                	add    edx,ecx
c0008385:	39 d0                	cmp    eax,edx
c0008387:	0f 8d 86 00 00 00    	jge    c0008413 <ff_wtoupper+0x129>
c000838d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008392:	83 f8 08             	cmp    eax,0x8
c0008395:	0f 87 94 00 00 00    	ja     c000842f <ff_wtoupper+0x145>
c000839b:	8b 04 85 e0 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0420]
c00083a2:	ff e0                	jmp    eax
c00083a4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00083a9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00083ae:	29 c2                	sub    edx,eax
c00083b0:	89 d0                	mov    eax,edx
c00083b2:	01 c0                	add    eax,eax
c00083b4:	89 c2                	mov    edx,eax
c00083b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083ba:	01 d0                	add    eax,edx
c00083bc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083bf:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083c4:	eb 4b                	jmp    c0008411 <ff_wtoupper+0x127>
c00083c6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083cb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00083cf:	83 e0 01             	and    eax,0x1
c00083d2:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00083d7:	eb 38                	jmp    c0008411 <ff_wtoupper+0x127>
c00083d9:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00083df:	eb 30                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e1:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00083e7:	eb 28                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e9:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00083ef:	eb 20                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f1:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00083f7:	eb 18                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f9:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00083ff:	eb 10                	jmp    c0008411 <ff_wtoupper+0x127>
c0008401:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008407:	eb 08                	jmp    c0008411 <ff_wtoupper+0x127>
c0008409:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008410:	90                   	nop
c0008411:	eb 1c                	jmp    c000842f <ff_wtoupper+0x145>
c0008413:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008419:	0f 85 fe fe ff ff    	jne    c000831d <ff_wtoupper+0x33>
c000841f:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008424:	01 c0                	add    eax,eax
c0008426:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000842a:	e9 ee fe ff ff       	jmp    c000831d <ff_wtoupper+0x33>
c000842f:	90                   	nop
c0008430:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008435:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008439:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000843d:	83 c4 10             	add    esp,0x10
c0008440:	c3                   	ret    

c0008441 <is_bad_src_ratio>:
c0008441:	83 ec 0c             	sub    esp,0xc
c0008444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008448:	89 04 24             	mov    DWORD PTR [esp],eax
c000844b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000844f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008453:	dd 04 24             	fld    QWORD PTR [esp]
c0008456:	dd 05 a0 04 02 c0    	fld    QWORD PTR ds:0xc00204a0
c000845c:	de d9                	fcompp 
c000845e:	df e0                	fnstsw ax
c0008460:	f6 c4 45             	test   ah,0x45
c0008463:	74 10                	je     c0008475 <is_bad_src_ratio+0x34>
c0008465:	dd 04 24             	fld    QWORD PTR [esp]
c0008468:	dc 1d a8 04 02 c0    	fcomp  QWORD PTR ds:0xc00204a8
c000846e:	df e0                	fnstsw ax
c0008470:	f6 c4 45             	test   ah,0x45
c0008473:	75 07                	jne    c000847c <is_bad_src_ratio+0x3b>
c0008475:	b8 01 00 00 00       	mov    eax,0x1
c000847a:	eb 05                	jmp    c0008481 <is_bad_src_ratio+0x40>
c000847c:	b8 00 00 00 00       	mov    eax,0x0
c0008481:	83 c4 0c             	add    esp,0xc
c0008484:	c3                   	ret    

c0008485 <psrc_set_converter>:
c0008485:	56                   	push   esi
c0008486:	89 d6                	mov    esi,edx
c0008488:	53                   	push   ebx
c0008489:	89 c3                	mov    ebx,eax
c000848b:	83 ec 0c             	sub    esp,0xc
c000848e:	52                   	push   edx
c000848f:	50                   	push   eax
c0008490:	e8 33 24 00 00       	call   c000a8c8 <sinc_set_converter>
c0008495:	83 c4 10             	add    esp,0x10
c0008498:	85 c0                	test   eax,eax
c000849a:	74 25                	je     c00084c1 <psrc_set_converter+0x3c>
c000849c:	50                   	push   eax
c000849d:	50                   	push   eax
c000849e:	56                   	push   esi
c000849f:	53                   	push   ebx
c00084a0:	e8 32 28 00 00       	call   c000acd7 <zoh_set_converter>
c00084a5:	83 c4 10             	add    esp,0x10
c00084a8:	85 c0                	test   eax,eax
c00084aa:	74 15                	je     c00084c1 <psrc_set_converter+0x3c>
c00084ac:	51                   	push   ecx
c00084ad:	51                   	push   ecx
c00084ae:	56                   	push   esi
c00084af:	53                   	push   ebx
c00084b0:	e8 10 0a 00 00       	call   c0008ec5 <linear_set_converter>
c00084b5:	83 c4 10             	add    esp,0x10
c00084b8:	ba 0a 00 00 00       	mov    edx,0xa
c00084bd:	85 c0                	test   eax,eax
c00084bf:	75 02                	jne    c00084c3 <psrc_set_converter+0x3e>
c00084c1:	31 d2                	xor    edx,edx
c00084c3:	89 d0                	mov    eax,edx
c00084c5:	5a                   	pop    edx
c00084c6:	5b                   	pop    ebx
c00084c7:	5e                   	pop    esi
c00084c8:	c3                   	ret    

c00084c9 <src_delete>:
c00084c9:	53                   	push   ebx
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084d1:	85 db                	test   ebx,ebx
c00084d3:	74 29                	je     c00084fe <src_delete+0x35>
c00084d5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00084d8:	85 c0                	test   eax,eax
c00084da:	74 0c                	je     c00084e8 <src_delete+0x1f>
c00084dc:	83 ec 0c             	sub    esp,0xc
c00084df:	50                   	push   eax
c00084e0:	e8 95 3a 00 00       	call   c000bf7a <free>
c00084e5:	83 c4 10             	add    esp,0x10
c00084e8:	50                   	push   eax
c00084e9:	6a 3c                	push   0x3c
c00084eb:	6a 00                	push   0x0
c00084ed:	53                   	push   ebx
c00084ee:	e8 15 81 ff ff       	call   c0000608 <memset>
c00084f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00084f6:	e8 7f 3a 00 00       	call   c000bf7a <free>
c00084fb:	83 c4 10             	add    esp,0x10
c00084fe:	31 c0                	xor    eax,eax
c0008500:	83 c4 08             	add    esp,0x8
c0008503:	5b                   	pop    ebx
c0008504:	c3                   	ret    

c0008505 <src_process>:
c0008505:	56                   	push   esi
c0008506:	53                   	push   ebx
c0008507:	53                   	push   ebx
c0008508:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000850c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008510:	85 f6                	test   esi,esi
c0008512:	0f 84 e2 00 00 00    	je     c00085fa <src_process+0xf5>
c0008518:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c000851c:	0f 84 df 00 00 00    	je     c0008601 <src_process+0xfc>
c0008522:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c0008526:	0f 84 d5 00 00 00    	je     c0008601 <src_process+0xfc>
c000852c:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008533:	0f 85 cf 00 00 00    	jne    c0008608 <src_process+0x103>
c0008539:	85 db                	test   ebx,ebx
c000853b:	0f 84 ce 00 00 00    	je     c000860f <src_process+0x10a>
c0008541:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008544:	0f 84 cc 00 00 00    	je     c0008616 <src_process+0x111>
c000854a:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c000854e:	0f 84 c2 00 00 00    	je     c0008616 <src_process+0x111>
c0008554:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008557:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000855a:	e8 e2 fe ff ff       	call   c0008441 <is_bad_src_ratio>
c000855f:	5a                   	pop    edx
c0008560:	85 c0                	test   eax,eax
c0008562:	59                   	pop    ecx
c0008563:	0f 85 b4 00 00 00    	jne    c000861d <src_process+0x118>
c0008569:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000856d:	79 07                	jns    c0008576 <src_process+0x71>
c000856f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008576:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000857a:	79 07                	jns    c0008583 <src_process+0x7e>
c000857c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008583:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008585:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008588:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000858b:	39 ca                	cmp    edx,ecx
c000858d:	73 0b                	jae    c000859a <src_process+0x95>
c000858f:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008593:	8d 04 82             	lea    eax,[edx+eax*4]
c0008596:	39 c1                	cmp    ecx,eax
c0008598:	eb 09                	jmp    c00085a3 <src_process+0x9e>
c000859a:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c000859e:	8d 04 81             	lea    eax,[ecx+eax*4]
c00085a1:	39 c2                	cmp    edx,eax
c00085a3:	72 7f                	jb     c0008624 <src_process+0x11f>
c00085a5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00085ac:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00085b3:	d9 05 c0 04 02 c0    	fld    DWORD PTR ds:0xc00204c0
c00085b9:	dc 1e                	fcomp  QWORD PTR [esi]
c00085bb:	df e0                	fnstsw ax
c00085bd:	9e                   	sahf   
c00085be:	76 05                	jbe    c00085c5 <src_process+0xc0>
c00085c0:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c00085c3:	dd 1e                	fstp   QWORD PTR [esi]
c00085c5:	83 ec 10             	sub    esp,0x10
c00085c8:	dd 06                	fld    QWORD PTR [esi]
c00085ca:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c00085cd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00085d0:	e8 7b 67 01 00       	call   c001ed50 <fabs>
c00085d5:	83 c4 10             	add    esp,0x10
c00085d8:	dd 05 b0 04 02 c0    	fld    QWORD PTR ds:0xc00204b0
c00085de:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00085e2:	de d9                	fcompp 
c00085e4:	df e0                	fnstsw ax
c00085e6:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00085ea:	9e                   	sahf   
c00085eb:	76 05                	jbe    c00085f2 <src_process+0xed>
c00085ed:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00085f0:	eb 03                	jmp    c00085f5 <src_process+0xf0>
c00085f2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00085f5:	59                   	pop    ecx
c00085f6:	5b                   	pop    ebx
c00085f7:	5e                   	pop    esi
c00085f8:	ff e0                	jmp    eax
c00085fa:	b8 02 00 00 00       	mov    eax,0x2
c00085ff:	eb 28                	jmp    c0008629 <src_process+0x124>
c0008601:	b8 07 00 00 00       	mov    eax,0x7
c0008606:	eb 21                	jmp    c0008629 <src_process+0x124>
c0008608:	b8 12 00 00 00       	mov    eax,0x12
c000860d:	eb 1a                	jmp    c0008629 <src_process+0x124>
c000860f:	b8 03 00 00 00       	mov    eax,0x3
c0008614:	eb 13                	jmp    c0008629 <src_process+0x124>
c0008616:	b8 04 00 00 00       	mov    eax,0x4
c000861b:	eb 0c                	jmp    c0008629 <src_process+0x124>
c000861d:	b8 06 00 00 00       	mov    eax,0x6
c0008622:	eb 05                	jmp    c0008629 <src_process+0x124>
c0008624:	b8 10 00 00 00       	mov    eax,0x10
c0008629:	5a                   	pop    edx
c000862a:	5b                   	pop    ebx
c000862b:	5e                   	pop    esi
c000862c:	c3                   	ret    

c000862d <src_callback_read>:
c000862d:	55                   	push   ebp
c000862e:	57                   	push   edi
c000862f:	56                   	push   esi
c0008630:	53                   	push   ebx
c0008631:	83 ec 4c             	sub    esp,0x4c
c0008634:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0008638:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c000863c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0008640:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008644:	85 ff                	test   edi,edi
c0008646:	0f 8e 36 01 00 00    	jle    c0008782 <src_callback_read+0x155>
c000864c:	85 db                	test   ebx,ebx
c000864e:	0f 84 2e 01 00 00    	je     c0008782 <src_callback_read+0x155>
c0008654:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000865b:	74 0c                	je     c0008669 <src_callback_read+0x3c>
c000865d:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008664:	e9 19 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c0008669:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000866d:	75 0c                	jne    c000867b <src_callback_read+0x4e>
c000866f:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008676:	e9 07 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c000867b:	51                   	push   ecx
c000867c:	6a 24                	push   0x24
c000867e:	6a 00                	push   0x0
c0008680:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008684:	50                   	push   eax
c0008685:	e8 7e 7f ff ff       	call   c0000608 <memset>
c000868a:	5e                   	pop    esi
c000868b:	5d                   	pop    ebp
c000868c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008694:	e8 a8 fd ff ff       	call   c0008441 <is_bad_src_ratio>
c0008699:	83 c4 10             	add    esp,0x10
c000869c:	85 c0                	test   eax,eax
c000869e:	74 0c                	je     c00086ac <src_callback_read+0x7f>
c00086a0:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00086a7:	e9 d6 00 00 00       	jmp    c0008782 <src_callback_read+0x155>
c00086ac:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00086b0:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00086b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086b8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00086bc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00086bf:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00086c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00086c7:	31 f6                	xor    esi,esi
c00086c9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00086cc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00086d0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00086d5:	75 30                	jne    c0008707 <src_callback_read+0xda>
c00086d7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00086db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086df:	52                   	push   edx
c00086e0:	52                   	push   edx
c00086e1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00086e5:	50                   	push   eax
c00086e6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086e9:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00086ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00086f0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00086f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00086f8:	83 c4 10             	add    esp,0x10
c00086fb:	85 c0                	test   eax,eax
c00086fd:	75 08                	jne    c0008707 <src_callback_read+0xda>
c00086ff:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008707:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c000870e:	50                   	push   eax
c000870f:	50                   	push   eax
c0008710:	8d 44 24 24          	lea    eax,[esp+0x24]
c0008714:	50                   	push   eax
c0008715:	53                   	push   ebx
c0008716:	e8 ea fd ff ff       	call   c0008505 <src_process>
c000871b:	83 c4 10             	add    esp,0x10
c000871e:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008725:	85 c0                	test   eax,eax
c0008727:	75 42                	jne    c000876b <src_callback_read+0x13e>
c0008729:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000872d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008730:	89 e9                	mov    ecx,ebp
c0008732:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c0008736:	0f af ca             	imul   ecx,edx
c0008739:	c1 e1 02             	shl    ecx,0x2
c000873c:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0008740:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0008744:	0f af d1             	imul   edx,ecx
c0008747:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c000874b:	c1 e2 02             	shl    edx,0x2
c000874e:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c0008752:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008755:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c000875a:	75 04                	jne    c0008760 <src_callback_read+0x133>
c000875c:	85 c9                	test   ecx,ecx
c000875e:	74 0b                	je     c000876b <src_callback_read+0x13e>
c0008760:	39 d7                	cmp    edi,edx
c0008762:	7e 09                	jle    c000876d <src_callback_read+0x140>
c0008764:	89 d6                	mov    esi,edx
c0008766:	e9 65 ff ff ff       	jmp    c00086d0 <src_callback_read+0xa3>
c000876b:	89 f2                	mov    edx,esi
c000876d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008771:	85 c0                	test   eax,eax
c0008773:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008776:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000877a:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000877d:	74 05                	je     c0008784 <src_callback_read+0x157>
c000877f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008782:	31 d2                	xor    edx,edx
c0008784:	83 c4 4c             	add    esp,0x4c
c0008787:	89 d0                	mov    eax,edx
c0008789:	5b                   	pop    ebx
c000878a:	5e                   	pop    esi
c000878b:	5f                   	pop    edi
c000878c:	5d                   	pop    ebp
c000878d:	c3                   	ret    

c000878e <src_set_ratio>:
c000878e:	53                   	push   ebx
c000878f:	b8 02 00 00 00       	mov    eax,0x2
c0008794:	83 ec 08             	sub    esp,0x8
c0008797:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000879b:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c000879f:	85 db                	test   ebx,ebx
c00087a1:	74 33                	je     c00087d6 <src_set_ratio+0x48>
c00087a3:	b8 07 00 00 00       	mov    eax,0x7
c00087a8:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00087ac:	74 2c                	je     c00087da <src_set_ratio+0x4c>
c00087ae:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00087b2:	74 2a                	je     c00087de <src_set_ratio+0x50>
c00087b4:	50                   	push   eax
c00087b5:	50                   	push   eax
c00087b6:	dd 14 24             	fst    QWORD PTR [esp]
c00087b9:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00087bd:	e8 7f fc ff ff       	call   c0008441 <is_bad_src_ratio>
c00087c2:	5a                   	pop    edx
c00087c3:	85 c0                	test   eax,eax
c00087c5:	59                   	pop    ecx
c00087c6:	75 07                	jne    c00087cf <src_set_ratio+0x41>
c00087c8:	dd 04 24             	fld    QWORD PTR [esp]
c00087cb:	dd 1b                	fstp   QWORD PTR [ebx]
c00087cd:	eb 11                	jmp    c00087e0 <src_set_ratio+0x52>
c00087cf:	b8 06 00 00 00       	mov    eax,0x6
c00087d4:	eb 0a                	jmp    c00087e0 <src_set_ratio+0x52>
c00087d6:	dd d8                	fstp   st(0)
c00087d8:	eb 06                	jmp    c00087e0 <src_set_ratio+0x52>
c00087da:	dd d8                	fstp   st(0)
c00087dc:	eb 02                	jmp    c00087e0 <src_set_ratio+0x52>
c00087de:	dd d8                	fstp   st(0)
c00087e0:	83 c4 08             	add    esp,0x8
c00087e3:	5b                   	pop    ebx
c00087e4:	c3                   	ret    

c00087e5 <src_get_channels>:
c00087e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00087e9:	b8 02 00 00 00       	mov    eax,0x2
c00087ee:	85 d2                	test   edx,edx
c00087f0:	74 14                	je     c0008806 <src_get_channels+0x21>
c00087f2:	b8 07 00 00 00       	mov    eax,0x7
c00087f7:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00087fb:	74 09                	je     c0008806 <src_get_channels+0x21>
c00087fd:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008801:	74 03                	je     c0008806 <src_get_channels+0x21>
c0008803:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008806:	c3                   	ret    

c0008807 <src_reset>:
c0008807:	53                   	push   ebx
c0008808:	b8 02 00 00 00       	mov    eax,0x2
c000880d:	83 ec 08             	sub    esp,0x8
c0008810:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008814:	85 db                	test   ebx,ebx
c0008816:	74 2e                	je     c0008846 <src_reset+0x3f>
c0008818:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000881b:	85 c0                	test   eax,eax
c000881d:	74 09                	je     c0008828 <src_reset+0x21>
c000881f:	83 ec 0c             	sub    esp,0xc
c0008822:	53                   	push   ebx
c0008823:	ff d0                	call   eax
c0008825:	83 c4 10             	add    esp,0x10
c0008828:	d9 ee                	fldz   
c000882a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008831:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0008834:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000883b:	dd 1b                	fstp   QWORD PTR [ebx]
c000883d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008844:	31 c0                	xor    eax,eax
c0008846:	83 c4 08             	add    esp,0x8
c0008849:	5b                   	pop    ebx
c000884a:	c3                   	ret    

c000884b <src_new>:
c000884b:	57                   	push   edi
c000884c:	56                   	push   esi
c000884d:	53                   	push   ebx
c000884e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008852:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008856:	85 f6                	test   esi,esi
c0008858:	74 73                	je     c00088cd <src_new+0x82>
c000885a:	85 ff                	test   edi,edi
c000885c:	7f 08                	jg     c0008866 <src_new+0x1b>
c000885e:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008864:	eb 1e                	jmp    c0008884 <src_new+0x39>
c0008866:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c000886c:	50                   	push   eax
c000886d:	50                   	push   eax
c000886e:	6a 3c                	push   0x3c
c0008870:	6a 01                	push   0x1
c0008872:	e8 23 37 00 00       	call   c000bf9a <calloc>
c0008877:	83 c4 10             	add    esp,0x10
c000887a:	89 c3                	mov    ebx,eax
c000887c:	85 c0                	test   eax,eax
c000887e:	75 10                	jne    c0008890 <src_new+0x45>
c0008880:	85 f6                	test   esi,esi
c0008882:	75 04                	jne    c0008888 <src_new+0x3d>
c0008884:	31 db                	xor    ebx,ebx
c0008886:	eb 4b                	jmp    c00088d3 <src_new+0x88>
c0008888:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c000888e:	eb 43                	jmp    c00088d3 <src_new+0x88>
c0008890:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008893:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000889a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000889e:	e8 e2 fb ff ff       	call   c0008485 <psrc_set_converter>
c00088a3:	85 c0                	test   eax,eax
c00088a5:	74 18                	je     c00088bf <src_new+0x74>
c00088a7:	85 f6                	test   esi,esi
c00088a9:	74 06                	je     c00088b1 <src_new+0x66>
c00088ab:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00088b1:	83 ec 0c             	sub    esp,0xc
c00088b4:	53                   	push   ebx
c00088b5:	31 db                	xor    ebx,ebx
c00088b7:	e8 be 36 00 00       	call   c000bf7a <free>
c00088bc:	83 c4 10             	add    esp,0x10
c00088bf:	83 ec 0c             	sub    esp,0xc
c00088c2:	53                   	push   ebx
c00088c3:	e8 3f ff ff ff       	call   c0008807 <src_reset>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	eb 06                	jmp    c00088d3 <src_new+0x88>
c00088cd:	85 ff                	test   edi,edi
c00088cf:	7f 9b                	jg     c000886c <src_new+0x21>
c00088d1:	eb b1                	jmp    c0008884 <src_new+0x39>
c00088d3:	89 d8                	mov    eax,ebx
c00088d5:	5b                   	pop    ebx
c00088d6:	5e                   	pop    esi
c00088d7:	5f                   	pop    edi
c00088d8:	c3                   	ret    

c00088d9 <src_callback_new>:
c00088d9:	56                   	push   esi
c00088da:	53                   	push   ebx
c00088db:	53                   	push   ebx
c00088dc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00088e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088e4:	85 f6                	test   esi,esi
c00088e6:	75 0e                	jne    c00088f6 <src_callback_new+0x1d>
c00088e8:	31 db                	xor    ebx,ebx
c00088ea:	85 c0                	test   eax,eax
c00088ec:	74 47                	je     c0008935 <src_callback_new+0x5c>
c00088ee:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00088f4:	eb 3f                	jmp    c0008935 <src_callback_new+0x5c>
c00088f6:	85 c0                	test   eax,eax
c00088f8:	74 06                	je     c0008900 <src_callback_new+0x27>
c00088fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008900:	51                   	push   ecx
c0008901:	50                   	push   eax
c0008902:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008906:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000890a:	e8 3c ff ff ff       	call   c000884b <src_new>
c000890f:	83 c4 10             	add    esp,0x10
c0008912:	89 c3                	mov    ebx,eax
c0008914:	85 c0                	test   eax,eax
c0008916:	74 1d                	je     c0008935 <src_callback_new+0x5c>
c0008918:	83 ec 0c             	sub    esp,0xc
c000891b:	50                   	push   eax
c000891c:	e8 e6 fe ff ff       	call   c0008807 <src_reset>
c0008921:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008925:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c000892c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000892f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008932:	83 c4 10             	add    esp,0x10
c0008935:	89 d8                	mov    eax,ebx
c0008937:	5a                   	pop    edx
c0008938:	5b                   	pop    ebx
c0008939:	5e                   	pop    esi
c000893a:	c3                   	ret    

c000893b <src_get_name>:
c000893b:	53                   	push   ebx
c000893c:	83 ec 14             	sub    esp,0x14
c000893f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008943:	53                   	push   ebx
c0008944:	e8 59 1f 00 00       	call   c000a8a2 <sinc_get_name>
c0008949:	83 c4 10             	add    esp,0x10
c000894c:	85 c0                	test   eax,eax
c000894e:	75 1d                	jne    c000896d <src_get_name+0x32>
c0008950:	83 ec 0c             	sub    esp,0xc
c0008953:	53                   	push   ebx
c0008954:	e8 60 23 00 00       	call   c000acb9 <zoh_get_name>
c0008959:	83 c4 10             	add    esp,0x10
c000895c:	85 c0                	test   eax,eax
c000895e:	75 0d                	jne    c000896d <src_get_name+0x32>
c0008960:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008964:	83 c4 08             	add    esp,0x8
c0008967:	5b                   	pop    ebx
c0008968:	e9 3a 05 00 00       	jmp    c0008ea7 <linear_get_name>
c000896d:	83 c4 08             	add    esp,0x8
c0008970:	5b                   	pop    ebx
c0008971:	c3                   	ret    

c0008972 <src_get_description>:
c0008972:	53                   	push   ebx
c0008973:	83 ec 14             	sub    esp,0x14
c0008976:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000897a:	53                   	push   ebx
c000897b:	e8 35 1f 00 00       	call   c000a8b5 <sinc_get_description>
c0008980:	83 c4 10             	add    esp,0x10
c0008983:	85 c0                	test   eax,eax
c0008985:	75 1d                	jne    c00089a4 <src_get_description+0x32>
c0008987:	83 ec 0c             	sub    esp,0xc
c000898a:	53                   	push   ebx
c000898b:	e8 38 23 00 00       	call   c000acc8 <zoh_get_description>
c0008990:	83 c4 10             	add    esp,0x10
c0008993:	85 c0                	test   eax,eax
c0008995:	75 0d                	jne    c00089a4 <src_get_description+0x32>
c0008997:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000899b:	83 c4 08             	add    esp,0x8
c000899e:	5b                   	pop    ebx
c000899f:	e9 12 05 00 00       	jmp    c0008eb6 <linear_get_description>
c00089a4:	83 c4 08             	add    esp,0x8
c00089a7:	5b                   	pop    ebx
c00089a8:	c3                   	ret    

c00089a9 <src_get_version>:
c00089a9:	b8 e0 ff 01 c0       	mov    eax,0xc001ffe0
c00089ae:	c3                   	ret    

c00089af <src_is_valid_ratio>:
c00089af:	50                   	push   eax
c00089b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b8:	e8 84 fa ff ff       	call   c0008441 <is_bad_src_ratio>
c00089bd:	85 c0                	test   eax,eax
c00089bf:	0f 94 c0             	sete   al
c00089c2:	83 c4 0c             	add    esp,0xc
c00089c5:	0f b6 c0             	movzx  eax,al
c00089c8:	c3                   	ret    

c00089c9 <src_error>:
c00089c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089cd:	31 c0                	xor    eax,eax
c00089cf:	85 d2                	test   edx,edx
c00089d1:	74 03                	je     c00089d6 <src_error+0xd>
c00089d3:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00089d6:	c3                   	ret    

c00089d7 <src_strerror>:
c00089d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089db:	31 c0                	xor    eax,eax
c00089dd:	83 fa 17             	cmp    edx,0x17
c00089e0:	77 07                	ja     c00089e9 <src_strerror+0x12>
c00089e2:	8b 04 95 40 04 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfbc0]
c00089e9:	c3                   	ret    

c00089ea <src_simple>:
c00089ea:	56                   	push   esi
c00089eb:	53                   	push   ebx
c00089ec:	83 ec 18             	sub    esp,0x18
c00089ef:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089f3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089f7:	50                   	push   eax
c00089f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00089fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a00:	e8 46 fe ff ff       	call   c000884b <src_new>
c0008a05:	83 c4 10             	add    esp,0x10
c0008a08:	85 c0                	test   eax,eax
c0008a0a:	75 06                	jne    c0008a12 <src_simple+0x28>
c0008a0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008a10:	eb 25                	jmp    c0008a37 <src_simple+0x4d>
c0008a12:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008a19:	89 c3                	mov    ebx,eax
c0008a1b:	50                   	push   eax
c0008a1c:	50                   	push   eax
c0008a1d:	56                   	push   esi
c0008a1e:	53                   	push   ebx
c0008a1f:	e8 e1 fa ff ff       	call   c0008505 <src_process>
c0008a24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008a27:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a2b:	e8 99 fa ff ff       	call   c00084c9 <src_delete>
c0008a30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a34:	83 c4 10             	add    esp,0x10
c0008a37:	83 c4 14             	add    esp,0x14
c0008a3a:	5b                   	pop    ebx
c0008a3b:	5e                   	pop    esi
c0008a3c:	c3                   	ret    

c0008a3d <src_short_to_float_array>:
c0008a3d:	83 ec 0c             	sub    esp,0xc
c0008a40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008a44:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008a4c:	85 c0                	test   eax,eax
c0008a4e:	74 0f                	je     c0008a5f <src_short_to_float_array+0x22>
c0008a50:	48                   	dec    eax
c0008a51:	d9 05 c4 04 02 c0    	fld    DWORD PTR ds:0xc00204c4
c0008a57:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008a5a:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008a5d:	eb ed                	jmp    c0008a4c <src_short_to_float_array+0xf>
c0008a5f:	83 c4 0c             	add    esp,0xc
c0008a62:	c3                   	ret    

c0008a63 <src_float_to_short_array>:
c0008a63:	56                   	push   esi
c0008a64:	53                   	push   ebx
c0008a65:	52                   	push   edx
c0008a66:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a6a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008a6e:	85 db                	test   ebx,ebx
c0008a70:	74 51                	je     c0008ac3 <src_float_to_short_array+0x60>
c0008a72:	4b                   	dec    ebx
c0008a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a77:	d9 05 c8 04 02 c0    	fld    DWORD PTR ds:0xc00204c8
c0008a7d:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008a80:	dc 15 b8 04 02 c0    	fcom   QWORD PTR ds:0xc00204b8
c0008a86:	df e0                	fnstsw ax
c0008a88:	9e                   	sahf   
c0008a89:	72 0a                	jb     c0008a95 <src_float_to_short_array+0x32>
c0008a8b:	dd d8                	fstp   st(0)
c0008a8d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008a93:	eb d9                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008a95:	d9 05 cc 04 02 c0    	fld    DWORD PTR ds:0xc00204cc
c0008a9b:	d8 d9                	fcomp  st(1)
c0008a9d:	df e0                	fnstsw ax
c0008a9f:	9e                   	sahf   
c0008aa0:	72 0a                	jb     c0008aac <src_float_to_short_array+0x49>
c0008aa2:	dd d8                	fstp   st(0)
c0008aa4:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008aaa:	eb c2                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008aac:	83 ec 10             	sub    esp,0x10
c0008aaf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008ab2:	e8 b9 62 01 00       	call   c001ed70 <lrint>
c0008ab7:	83 c4 10             	add    esp,0x10
c0008aba:	c1 f8 10             	sar    eax,0x10
c0008abd:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ac1:	eb ab                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008ac3:	58                   	pop    eax
c0008ac4:	5b                   	pop    ebx
c0008ac5:	5e                   	pop    esi
c0008ac6:	c3                   	ret    

c0008ac7 <src_int_to_float_array>:
c0008ac7:	83 ec 0c             	sub    esp,0xc
c0008aca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ace:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ad2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008ad6:	85 c0                	test   eax,eax
c0008ad8:	74 0f                	je     c0008ae9 <src_int_to_float_array+0x22>
c0008ada:	48                   	dec    eax
c0008adb:	d9 05 d0 04 02 c0    	fld    DWORD PTR ds:0xc00204d0
c0008ae1:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008ae4:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008ae7:	eb ed                	jmp    c0008ad6 <src_int_to_float_array+0xf>
c0008ae9:	83 c4 0c             	add    esp,0xc
c0008aec:	c3                   	ret    

c0008aed <src_float_to_int_array>:
c0008aed:	56                   	push   esi
c0008aee:	53                   	push   ebx
c0008aef:	52                   	push   edx
c0008af0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008af4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008af8:	85 db                	test   ebx,ebx
c0008afa:	74 4f                	je     c0008b4b <src_float_to_int_array+0x5e>
c0008afc:	4b                   	dec    ebx
c0008afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b01:	d9 05 c8 04 02 c0    	fld    DWORD PTR ds:0xc00204c8
c0008b07:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b0a:	dc 15 b8 04 02 c0    	fcom   QWORD PTR ds:0xc00204b8
c0008b10:	df e0                	fnstsw ax
c0008b12:	9e                   	sahf   
c0008b13:	72 0b                	jb     c0008b20 <src_float_to_int_array+0x33>
c0008b15:	dd d8                	fstp   st(0)
c0008b17:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008b1e:	eb d8                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b20:	d9 05 cc 04 02 c0    	fld    DWORD PTR ds:0xc00204cc
c0008b26:	d8 d9                	fcomp  st(1)
c0008b28:	df e0                	fnstsw ax
c0008b2a:	9e                   	sahf   
c0008b2b:	72 0b                	jb     c0008b38 <src_float_to_int_array+0x4b>
c0008b2d:	dd d8                	fstp   st(0)
c0008b2f:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008b36:	eb c0                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b38:	83 ec 10             	sub    esp,0x10
c0008b3b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b3e:	e8 2d 62 01 00       	call   c001ed70 <lrint>
c0008b43:	83 c4 10             	add    esp,0x10
c0008b46:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008b49:	eb ad                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b4b:	58                   	pop    eax
c0008b4c:	5b                   	pop    ebx
c0008b4d:	5e                   	pop    esi
c0008b4e:	c3                   	ret    

c0008b4f <is_bad_src_ratio>:
c0008b4f:	83 ec 0c             	sub    esp,0xc
c0008b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b56:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b5d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008b61:	dd 04 24             	fld    QWORD PTR [esp]
c0008b64:	dd 05 a0 04 02 c0    	fld    QWORD PTR ds:0xc00204a0
c0008b6a:	de d9                	fcompp 
c0008b6c:	df e0                	fnstsw ax
c0008b6e:	f6 c4 45             	test   ah,0x45
c0008b71:	74 10                	je     c0008b83 <is_bad_src_ratio+0x34>
c0008b73:	dd 04 24             	fld    QWORD PTR [esp]
c0008b76:	dc 1d a8 04 02 c0    	fcomp  QWORD PTR ds:0xc00204a8
c0008b7c:	df e0                	fnstsw ax
c0008b7e:	f6 c4 45             	test   ah,0x45
c0008b81:	75 07                	jne    c0008b8a <is_bad_src_ratio+0x3b>
c0008b83:	b8 01 00 00 00       	mov    eax,0x1
c0008b88:	eb 05                	jmp    c0008b8f <is_bad_src_ratio+0x40>
c0008b8a:	b8 00 00 00 00       	mov    eax,0x0
c0008b8f:	83 c4 0c             	add    esp,0xc
c0008b92:	c3                   	ret    

c0008b93 <fmod_one>:
c0008b93:	83 ec 2c             	sub    esp,0x2c
c0008b96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b9e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008ba2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ba6:	83 ec 08             	sub    esp,0x8
c0008ba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb1:	e8 ba 61 01 00       	call   c001ed70 <lrint>
c0008bb6:	83 c4 10             	add    esp,0x10
c0008bb9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008bbd:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008bc1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008bc5:	de e1                	fsubrp st(1),st
c0008bc7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008bcb:	d9 ee                	fldz   
c0008bcd:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008bd1:	df e0                	fnstsw ax
c0008bd3:	f6 c4 45             	test   ah,0x45
c0008bd6:	75 0a                	jne    c0008be2 <fmod_one+0x4f>
c0008bd8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008bdc:	d9 e8                	fld1   
c0008bde:	de c1                	faddp  st(1),st
c0008be0:	eb 04                	jmp    c0008be6 <fmod_one+0x53>
c0008be2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008be6:	83 c4 2c             	add    esp,0x2c
c0008be9:	c3                   	ret    

c0008bea <linear_vari_process>:
c0008bea:	55                   	push   ebp
c0008beb:	57                   	push   edi
c0008bec:	56                   	push   esi
c0008bed:	53                   	push   ebx
c0008bee:	83 ec 2c             	sub    esp,0x2c
c0008bf1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008bf5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008bf9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008c01:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008c05:	0f 8e 5e 02 00 00    	jle    c0008e69 <linear_vari_process+0x27f>
c0008c0b:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008c0e:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008c16:	85 db                	test   ebx,ebx
c0008c18:	0f 84 4b 02 00 00    	je     c0008e69 <linear_vari_process+0x27f>
c0008c1e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008c21:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008c25:	74 19                	je     c0008c40 <linear_vari_process+0x56>
c0008c27:	31 d2                	xor    edx,edx
c0008c29:	39 c2                	cmp    edx,eax
c0008c2b:	7d 0c                	jge    c0008c39 <linear_vari_process+0x4f>
c0008c2d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008c2f:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008c32:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008c36:	42                   	inc    edx
c0008c37:	eb f0                	jmp    c0008c29 <linear_vari_process+0x3f>
c0008c39:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008c40:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008c43:	0f af d0             	imul   edx,eax
c0008c46:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008c49:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008c4d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008c54:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008c57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008c5e:	dd 07                	fld    QWORD PTR [edi]
c0008c60:	dd 14 24             	fst    QWORD PTR [esp]
c0008c63:	50                   	push   eax
c0008c64:	50                   	push   eax
c0008c65:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008c68:	e8 e2 fe ff ff       	call   c0008b4f <is_bad_src_ratio>
c0008c6d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008c71:	5a                   	pop    edx
c0008c72:	59                   	pop    ecx
c0008c73:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008c78:	0f 85 e3 01 00 00    	jne    c0008e61 <linear_vari_process+0x277>
c0008c7e:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008c81:	d9 e8                	fld1   
c0008c83:	d8 d1                	fcom   st(1)
c0008c85:	df e0                	fnstsw ax
c0008c87:	9e                   	sahf   
c0008c88:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008c8c:	0f 86 99 00 00 00    	jbe    c0008d2b <linear_vari_process+0x141>
c0008c92:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008c95:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008c98:	0f 8d 8d 00 00 00    	jge    c0008d2b <linear_vari_process+0x141>
c0008c9e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008ca2:	d8 c1                	fadd   st,st(1)
c0008ca4:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008ca7:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008caa:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008cad:	df e0                	fnstsw ax
c0008caf:	9e                   	sahf   
c0008cb0:	73 79                	jae    c0008d2b <linear_vari_process+0x141>
c0008cb2:	85 d2                	test   edx,edx
c0008cb4:	7e 38                	jle    c0008cee <linear_vari_process+0x104>
c0008cb6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008cba:	83 ec 10             	sub    esp,0x10
c0008cbd:	dd 07                	fld    QWORD PTR [edi]
c0008cbf:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cc5:	e8 86 60 01 00       	call   c001ed50 <fabs>
c0008cca:	83 c4 10             	add    esp,0x10
c0008ccd:	dc 1d 18 05 02 c0    	fcomp  QWORD PTR ds:0xc0020518
c0008cd3:	df e0                	fnstsw ax
c0008cd5:	9e                   	sahf   
c0008cd6:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008cda:	76 12                	jbe    c0008cee <linear_vari_process+0x104>
c0008cdc:	dd 07                	fld    QWORD PTR [edi]
c0008cde:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008ce1:	d8 e1                	fsub   st,st(1)
c0008ce3:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008ce6:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008ce9:	de c1                	faddp  st(1),st
c0008ceb:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cee:	31 c0                	xor    eax,eax
c0008cf0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008cf3:	7e 1f                	jle    c0008d14 <linear_vari_process+0x12a>
c0008cf5:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008cf9:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008cfb:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008cfe:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008d02:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008d05:	d8 e1                	fsub   st,st(1)
c0008d07:	40                   	inc    eax
c0008d08:	d8 ca                	fmul   st,st(2)
c0008d0a:	de c1                	faddp  st(1),st
c0008d0c:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008d0f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008d12:	eb dc                	jmp    c0008cf0 <linear_vari_process+0x106>
c0008d14:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d18:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d1b:	de c1                	faddp  st(1),st
c0008d1d:	e9 5f ff ff ff       	jmp    c0008c81 <linear_vari_process+0x97>
c0008d22:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d26:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d29:	de c1                	faddp  st(1),st
c0008d2b:	83 ec 10             	sub    esp,0x10
c0008d2e:	dd 14 24             	fst    QWORD PTR [esp]
c0008d31:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d35:	e8 59 fe ff ff       	call   c0008b93 <fmod_one>
c0008d3a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008d3d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008d41:	d8 e1                	fsub   st,st(1)
c0008d43:	d9 c9                	fxch   st(1)
c0008d45:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d49:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d4c:	e8 1f 60 01 00       	call   c001ed70 <lrint>
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	0f af e8             	imul   ebp,eax
c0008d57:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d5b:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008d5e:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008d61:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008d64:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008d67:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008d6a:	0f 8d 97 00 00 00    	jge    c0008e07 <linear_vari_process+0x21d>
c0008d70:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008d74:	d9 c0                	fld    st(0)
c0008d76:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d79:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008d7d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008d81:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008d85:	de d9                	fcompp 
c0008d87:	df e0                	fnstsw ax
c0008d89:	9e                   	sahf   
c0008d8a:	76 7b                	jbe    c0008e07 <linear_vari_process+0x21d>
c0008d8c:	85 ed                	test   ebp,ebp
c0008d8e:	7e 38                	jle    c0008dc8 <linear_vari_process+0x1de>
c0008d90:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d94:	83 ec 10             	sub    esp,0x10
c0008d97:	dd 07                	fld    QWORD PTR [edi]
c0008d99:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d9c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d9f:	e8 ac 5f 01 00       	call   c001ed50 <fabs>
c0008da4:	83 c4 10             	add    esp,0x10
c0008da7:	dc 1d 18 05 02 c0    	fcomp  QWORD PTR ds:0xc0020518
c0008dad:	df e0                	fnstsw ax
c0008daf:	9e                   	sahf   
c0008db0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008db4:	76 12                	jbe    c0008dc8 <linear_vari_process+0x1de>
c0008db6:	dd 07                	fld    QWORD PTR [edi]
c0008db8:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008dbb:	d8 e1                	fsub   st,st(1)
c0008dbd:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008dc0:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008dc3:	de c1                	faddp  st(1),st
c0008dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008dc8:	31 c0                	xor    eax,eax
c0008dca:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008dcd:	39 c2                	cmp    edx,eax
c0008dcf:	0f 8e 4d ff ff ff    	jle    c0008d22 <linear_vari_process+0x138>
c0008dd5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dd7:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008dda:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008dde:	89 e9                	mov    ecx,ebp
c0008de0:	01 c5                	add    ebp,eax
c0008de2:	29 d1                	sub    ecx,edx
c0008de4:	89 ca                	mov    edx,ecx
c0008de6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008dea:	01 c2                	add    edx,eax
c0008dec:	40                   	inc    eax
c0008ded:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008df0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008df3:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008df6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008df9:	d8 e1                	fsub   st,st(1)
c0008dfb:	d8 ca                	fmul   st,st(2)
c0008dfd:	de c1                	faddp  st(1),st
c0008dff:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008e02:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008e05:	eb c3                	jmp    c0008dca <linear_vari_process+0x1e0>
c0008e07:	39 d1                	cmp    ecx,edx
c0008e09:	7d 13                	jge    c0008e1e <linear_vari_process+0x234>
c0008e0b:	89 d0                	mov    eax,edx
c0008e0d:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008e10:	29 c8                	sub    eax,ecx
c0008e12:	99                   	cdq    
c0008e13:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e1a:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008e1e:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008e21:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e24:	85 c0                	test   eax,eax
c0008e26:	7f 1b                	jg     c0008e43 <linear_vari_process+0x259>
c0008e28:	dd 04 24             	fld    QWORD PTR [esp]
c0008e2b:	dd 1f                	fstp   QWORD PTR [edi]
c0008e2d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e30:	99                   	cdq    
c0008e31:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e34:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008e37:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008e3a:	99                   	cdq    
c0008e3b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e3e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008e41:	eb 26                	jmp    c0008e69 <linear_vari_process+0x27f>
c0008e43:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008e46:	31 d2                	xor    edx,edx
c0008e48:	29 c8                	sub    eax,ecx
c0008e4a:	c1 e0 02             	shl    eax,0x2
c0008e4d:	39 d1                	cmp    ecx,edx
c0008e4f:	7e d7                	jle    c0008e28 <linear_vari_process+0x23e>
c0008e51:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008e53:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008e57:	83 c0 04             	add    eax,0x4
c0008e5a:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008e5e:	42                   	inc    edx
c0008e5f:	eb ec                	jmp    c0008e4d <linear_vari_process+0x263>
c0008e61:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008e69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008e6d:	83 c4 2c             	add    esp,0x2c
c0008e70:	5b                   	pop    ebx
c0008e71:	5e                   	pop    esi
c0008e72:	5f                   	pop    edi
c0008e73:	5d                   	pop    ebp
c0008e74:	c3                   	ret    

c0008e75 <linear_reset>:
c0008e75:	83 ec 0c             	sub    esp,0xc
c0008e78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008e7c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008e7f:	85 c0                	test   eax,eax
c0008e81:	74 20                	je     c0008ea3 <linear_reset+0x2e>
c0008e83:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008e86:	83 c0 1c             	add    eax,0x1c
c0008e89:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0008e8c:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0008e93:	c1 e2 02             	shl    edx,0x2
c0008e96:	51                   	push   ecx
c0008e97:	52                   	push   edx
c0008e98:	6a 00                	push   0x0
c0008e9a:	50                   	push   eax
c0008e9b:	e8 68 77 ff ff       	call   c0000608 <memset>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	83 c4 0c             	add    esp,0xc
c0008ea6:	c3                   	ret    

c0008ea7 <linear_get_name>:
c0008ea7:	31 c0                	xor    eax,eax
c0008ea9:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008eae:	75 05                	jne    c0008eb5 <linear_get_name+0xe>
c0008eb0:	b8 d4 04 02 c0       	mov    eax,0xc00204d4
c0008eb5:	c3                   	ret    

c0008eb6 <linear_get_description>:
c0008eb6:	31 c0                	xor    eax,eax
c0008eb8:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008ebd:	75 05                	jne    c0008ec4 <linear_get_description+0xe>
c0008ebf:	b8 e8 04 02 c0       	mov    eax,0xc00204e8
c0008ec4:	c3                   	ret    

c0008ec5 <linear_set_converter>:
c0008ec5:	53                   	push   ebx
c0008ec6:	b8 0a 00 00 00       	mov    eax,0xa
c0008ecb:	83 ec 08             	sub    esp,0x8
c0008ece:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ed2:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008ed7:	75 6e                	jne    c0008f47 <linear_set_converter+0x82>
c0008ed9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008edc:	85 c0                	test   eax,eax
c0008ede:	74 13                	je     c0008ef3 <linear_set_converter+0x2e>
c0008ee0:	83 ec 0c             	sub    esp,0xc
c0008ee3:	50                   	push   eax
c0008ee4:	e8 91 30 00 00       	call   c000bf7a <free>
c0008ee9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008ef0:	83 c4 10             	add    esp,0x10
c0008ef3:	50                   	push   eax
c0008ef4:	50                   	push   eax
c0008ef5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008ef8:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008eff:	50                   	push   eax
c0008f00:	6a 01                	push   0x1
c0008f02:	e8 93 30 00 00       	call   c000bf9a <calloc>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	89 c2                	mov    edx,eax
c0008f0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008f0f:	85 d2                	test   edx,edx
c0008f11:	b8 01 00 00 00       	mov    eax,0x1
c0008f16:	74 2f                	je     c0008f47 <linear_set_converter+0x82>
c0008f18:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f1b:	83 ec 0c             	sub    esp,0xc
c0008f1e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f21:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008f27:	c7 43 24 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008bea
c0008f2e:	c7 43 20 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008bea
c0008f35:	c7 43 28 75 8e 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008e75
c0008f3c:	53                   	push   ebx
c0008f3d:	e8 33 ff ff ff       	call   c0008e75 <linear_reset>
c0008f42:	83 c4 10             	add    esp,0x10
c0008f45:	31 c0                	xor    eax,eax
c0008f47:	83 c4 08             	add    esp,0x8
c0008f4a:	5b                   	pop    ebx
c0008f4b:	c3                   	ret    

c0008f4c <is_bad_src_ratio>:
c0008f4c:	83 ec 0c             	sub    esp,0xc
c0008f4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f53:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008f5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008f5e:	dd 04 24             	fld    QWORD PTR [esp]
c0008f61:	dd 05 a0 04 02 c0    	fld    QWORD PTR ds:0xc00204a0
c0008f67:	de d9                	fcompp 
c0008f69:	df e0                	fnstsw ax
c0008f6b:	f6 c4 45             	test   ah,0x45
c0008f6e:	74 10                	je     c0008f80 <is_bad_src_ratio+0x34>
c0008f70:	dd 04 24             	fld    QWORD PTR [esp]
c0008f73:	dc 1d a8 04 02 c0    	fcomp  QWORD PTR ds:0xc00204a8
c0008f79:	df e0                	fnstsw ax
c0008f7b:	f6 c4 45             	test   ah,0x45
c0008f7e:	75 07                	jne    c0008f87 <is_bad_src_ratio+0x3b>
c0008f80:	b8 01 00 00 00       	mov    eax,0x1
c0008f85:	eb 05                	jmp    c0008f8c <is_bad_src_ratio+0x40>
c0008f87:	b8 00 00 00 00       	mov    eax,0x0
c0008f8c:	83 c4 0c             	add    esp,0xc
c0008f8f:	c3                   	ret    

c0008f90 <int_to_fp>:
c0008f90:	c1 e0 0c             	shl    eax,0xc
c0008f93:	c3                   	ret    

c0008f94 <fp_to_int>:
c0008f94:	c1 f8 0c             	sar    eax,0xc
c0008f97:	c3                   	ret    

c0008f98 <fp_fraction_part>:
c0008f98:	25 ff 0f 00 00       	and    eax,0xfff
c0008f9d:	c3                   	ret    

c0008f9e <fp_to_double>:
c0008f9e:	83 ec 0c             	sub    esp,0xc
c0008fa1:	e8 f2 ff ff ff       	call   c0008f98 <fp_fraction_part>
c0008fa6:	d9 05 a8 06 02 c0    	fld    DWORD PTR ds:0xc00206a8
c0008fac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008fb0:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0008fb4:	83 c4 0c             	add    esp,0xc
c0008fb7:	c3                   	ret    

c0008fb8 <calc_output_single>:
c0008fb8:	55                   	push   ebp
c0008fb9:	57                   	push   edi
c0008fba:	89 c7                	mov    edi,eax
c0008fbc:	56                   	push   esi
c0008fbd:	53                   	push   ebx
c0008fbe:	89 d3                	mov    ebx,edx
c0008fc0:	83 ec 24             	sub    esp,0x24
c0008fc3:	89 de                	mov    esi,ebx
c0008fc5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008fc8:	e8 c3 ff ff ff       	call   c0008f90 <int_to_fp>
c0008fcd:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0008fd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008fd4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008fdb:	29 c8                	sub    eax,ecx
c0008fdd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008fe5:	99                   	cdq    
c0008fe6:	f7 fb                	idiv   ebx
c0008fe8:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0008feb:	0f af f0             	imul   esi,eax
c0008fee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0008ff2:	01 ce                	add    esi,ecx
c0008ff4:	29 c2                	sub    edx,eax
c0008ff6:	8d 14 97             	lea    edx,[edi+edx*4]
c0008ff9:	89 f0                	mov    eax,esi
c0008ffb:	e8 9e ff ff ff       	call   c0008f9e <fp_to_double>
c0009000:	89 f0                	mov    eax,esi
c0009002:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009006:	e8 89 ff ff ff       	call   c0008f94 <fp_to_int>
c000900b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000900f:	83 c2 04             	add    edx,0x4
c0009012:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009016:	d8 e1                	fsub   st,st(1)
c0009018:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000901c:	de c9                	fmulp  st(1),st
c000901e:	de c1                	faddp  st(1),st
c0009020:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009026:	29 de                	sub    esi,ebx
c0009028:	dc 04 24             	fadd   QWORD PTR [esp]
c000902b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000902e:	79 c9                	jns    c0008ff9 <calc_output_single+0x41>
c0009030:	89 d8                	mov    eax,ebx
c0009032:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0009036:	29 c8                	sub    eax,ecx
c0009038:	d9 ee                	fldz   
c000903a:	89 c1                	mov    ecx,eax
c000903c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009040:	29 c8                	sub    eax,ecx
c0009042:	99                   	cdq    
c0009043:	f7 fb                	idiv   ebx
c0009045:	89 da                	mov    edx,ebx
c0009047:	0f af d0             	imul   edx,eax
c000904a:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c000904e:	01 d1                	add    ecx,edx
c0009050:	8d 14 87             	lea    edx,[edi+eax*4]
c0009053:	89 c8                	mov    eax,ecx
c0009055:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009059:	e8 40 ff ff ff       	call   c0008f9e <fp_to_double>
c000905e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009062:	89 c8                	mov    eax,ecx
c0009064:	e8 2b ff ff ff       	call   c0008f94 <fp_to_int>
c0009069:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000906d:	29 d9                	sub    ecx,ebx
c000906f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009073:	83 ea 04             	sub    edx,0x4
c0009076:	d8 e1                	fsub   st,st(1)
c0009078:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000907c:	de c9                	fmulp  st(1),st
c000907e:	de c1                	faddp  st(1),st
c0009080:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009086:	85 c9                	test   ecx,ecx
c0009088:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000908c:	de c1                	faddp  st(1),st
c000908e:	7f c3                	jg     c0009053 <calc_output_single+0x9b>
c0009090:	dd 04 24             	fld    QWORD PTR [esp]
c0009093:	83 c4 24             	add    esp,0x24
c0009096:	de c1                	faddp  st(1),st
c0009098:	5b                   	pop    ebx
c0009099:	5e                   	pop    esi
c000909a:	5f                   	pop    edi
c000909b:	5d                   	pop    ebp
c000909c:	c3                   	ret    

c000909d <calc_output_stereo>:
c000909d:	55                   	push   ebp
c000909e:	57                   	push   edi
c000909f:	89 c7                	mov    edi,eax
c00090a1:	56                   	push   esi
c00090a2:	53                   	push   ebx
c00090a3:	89 d3                	mov    ebx,edx
c00090a5:	83 ec 44             	sub    esp,0x44
c00090a8:	89 de                	mov    esi,ebx
c00090aa:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00090ae:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00090b1:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00090b5:	e8 d6 fe ff ff       	call   c0008f90 <int_to_fp>
c00090ba:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00090bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090c1:	d9 ee                	fldz   
c00090c3:	29 c8                	sub    eax,ecx
c00090c5:	dd 14 24             	fst    QWORD PTR [esp]
c00090c8:	99                   	cdq    
c00090c9:	f7 fb                	idiv   ebx
c00090cb:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00090ce:	0f af f0             	imul   esi,eax
c00090d1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00090d5:	01 ce                	add    esi,ecx
c00090d7:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00090da:	0f af c2             	imul   eax,edx
c00090dd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00090e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00090e5:	29 c2                	sub    edx,eax
c00090e7:	8d 14 97             	lea    edx,[edi+edx*4]
c00090ea:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00090ee:	89 f0                	mov    eax,esi
c00090f0:	e8 a9 fe ff ff       	call   c0008f9e <fp_to_double>
c00090f5:	89 f0                	mov    eax,esi
c00090f7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00090fb:	e8 94 fe ff ff       	call   c0008f94 <fp_to_int>
c0009100:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009104:	83 c2 08             	add    edx,0x8
c0009107:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000910b:	d8 e1                	fsub   st,st(1)
c000910d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009111:	de c9                	fmulp  st(1),st
c0009113:	de c1                	faddp  st(1),st
c0009115:	d9 c0                	fld    st(0)
c0009117:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000911d:	dc 04 24             	fadd   QWORD PTR [esp]
c0009120:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009123:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009129:	29 de                	sub    esi,ebx
c000912b:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000912f:	de c1                	faddp  st(1),st
c0009131:	79 b7                	jns    c00090ea <calc_output_stereo+0x4d>
c0009133:	89 d8                	mov    eax,ebx
c0009135:	d9 ee                	fldz   
c0009137:	d9 ee                	fldz   
c0009139:	29 c8                	sub    eax,ecx
c000913b:	89 c1                	mov    ecx,eax
c000913d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009141:	29 c8                	sub    eax,ecx
c0009143:	99                   	cdq    
c0009144:	f7 fb                	idiv   ebx
c0009146:	89 da                	mov    edx,ebx
c0009148:	0f af d0             	imul   edx,eax
c000914b:	40                   	inc    eax
c000914c:	01 d1                	add    ecx,edx
c000914e:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
c0009153:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0009157:	8d 14 87             	lea    edx,[edi+eax*4]
c000915a:	eb 04                	jmp    c0009160 <calc_output_stereo+0xc3>
c000915c:	d9 ca                	fxch   st(2)
c000915e:	d9 c9                	fxch   st(1)
c0009160:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009164:	d9 c9                	fxch   st(1)
c0009166:	89 c8                	mov    eax,ecx
c0009168:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000916c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009170:	e8 29 fe ff ff       	call   c0008f9e <fp_to_double>
c0009175:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009179:	89 c8                	mov    eax,ecx
c000917b:	e8 14 fe ff ff       	call   c0008f94 <fp_to_int>
c0009180:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009184:	29 d9                	sub    ecx,ebx
c0009186:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000918a:	83 ea 08             	sub    edx,0x8
c000918d:	d8 e1                	fsub   st,st(1)
c000918f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009193:	de c9                	fmulp  st(1),st
c0009195:	de c1                	faddp  st(1),st
c0009197:	d9 c0                	fld    st(0)
c0009199:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c000919f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00091a3:	de c1                	faddp  st(1),st
c00091a5:	d9 c9                	fxch   st(1)
c00091a7:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c00091ad:	85 c9                	test   ecx,ecx
c00091af:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00091b3:	de c1                	faddp  st(1),st
c00091b5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00091b9:	7f a1                	jg     c000915c <calc_output_stereo+0xbf>
c00091bb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00091bf:	dd 04 24             	fld    QWORD PTR [esp]
c00091c2:	de c3                	faddp  st(3),st
c00091c4:	d9 ca                	fxch   st(2)
c00091c6:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091ca:	d9 18                	fstp   DWORD PTR [eax]
c00091cc:	de c1                	faddp  st(1),st
c00091ce:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091d2:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c00091d5:	83 c4 44             	add    esp,0x44
c00091d8:	5b                   	pop    ebx
c00091d9:	5e                   	pop    esi
c00091da:	5f                   	pop    edi
c00091db:	5d                   	pop    ebp
c00091dc:	c3                   	ret    

c00091dd <calc_output_quad>:
c00091dd:	55                   	push   ebp
c00091de:	57                   	push   edi
c00091df:	56                   	push   esi
c00091e0:	89 c6                	mov    esi,eax
c00091e2:	53                   	push   ebx
c00091e3:	89 d3                	mov    ebx,edx
c00091e5:	83 ec 5c             	sub    esp,0x5c
c00091e8:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c00091ec:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00091ef:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091f2:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00091f6:	e8 95 fd ff ff       	call   c0008f90 <int_to_fp>
c00091fb:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c00091fe:	d9 ee                	fldz   
c0009200:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009204:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009208:	29 c8                	sub    eax,ecx
c000920a:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c000920e:	99                   	cdq    
c000920f:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009213:	f7 fb                	idiv   ebx
c0009215:	89 da                	mov    edx,ebx
c0009217:	0f af d0             	imul   edx,eax
c000921a:	01 ca                	add    edx,ecx
c000921c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009220:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c0009223:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009227:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000922a:	0f af c2             	imul   eax,edx
c000922d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009231:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009235:	29 c2                	sub    edx,eax
c0009237:	8d 14 96             	lea    edx,[esi+edx*4]
c000923a:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000923e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009242:	e8 57 fd ff ff       	call   c0008f9e <fp_to_double>
c0009247:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000924b:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000924f:	e8 40 fd ff ff       	call   c0008f94 <fp_to_int>
c0009254:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009258:	83 c2 10             	add    edx,0x10
c000925b:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000925f:	d8 e1                	fsub   st,st(1)
c0009261:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009265:	de c9                	fmulp  st(1),st
c0009267:	de c1                	faddp  st(1),st
c0009269:	d9 c0                	fld    st(0)
c000926b:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009271:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009275:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009279:	d9 c0                	fld    st(0)
c000927b:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009281:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009285:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009289:	d9 c0                	fld    st(0)
c000928b:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009291:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009295:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009299:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000929f:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c00092a3:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00092a7:	de c1                	faddp  st(1),st
c00092a9:	79 8f                	jns    c000923a <calc_output_quad+0x5d>
c00092ab:	89 d8                	mov    eax,ebx
c00092ad:	d9 ee                	fldz   
c00092af:	29 c8                	sub    eax,ecx
c00092b1:	d9 ee                	fldz   
c00092b3:	89 c1                	mov    ecx,eax
c00092b5:	d9 ee                	fldz   
c00092b7:	d9 ee                	fldz   
c00092b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00092bd:	29 c8                	sub    eax,ecx
c00092bf:	99                   	cdq    
c00092c0:	f7 fb                	idiv   ebx
c00092c2:	89 da                	mov    edx,ebx
c00092c4:	0f af d0             	imul   edx,eax
c00092c7:	40                   	inc    eax
c00092c8:	01 d1                	add    ecx,edx
c00092ca:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00092cf:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00092d3:	8d 14 86             	lea    edx,[esi+eax*4]
c00092d6:	eb 0a                	jmp    c00092e2 <calc_output_quad+0x105>
c00092d8:	d9 cc                	fxch   st(4)
c00092da:	d9 ca                	fxch   st(2)
c00092dc:	d9 c9                	fxch   st(1)
c00092de:	d9 cb                	fxch   st(3)
c00092e0:	d9 c9                	fxch   st(1)
c00092e2:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092e6:	d9 c9                	fxch   st(1)
c00092e8:	89 c8                	mov    eax,ecx
c00092ea:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092ee:	d9 c9                	fxch   st(1)
c00092f0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00092f4:	d9 c9                	fxch   st(1)
c00092f6:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00092fa:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00092fe:	e8 9b fc ff ff       	call   c0008f9e <fp_to_double>
c0009303:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009307:	89 c8                	mov    eax,ecx
c0009309:	e8 86 fc ff ff       	call   c0008f94 <fp_to_int>
c000930e:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009312:	29 d9                	sub    ecx,ebx
c0009314:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009318:	83 ea 10             	sub    edx,0x10
c000931b:	d8 e1                	fsub   st,st(1)
c000931d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009321:	de c9                	fmulp  st(1),st
c0009323:	de c1                	faddp  st(1),st
c0009325:	d9 c0                	fld    st(0)
c0009327:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c000932d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009331:	de c1                	faddp  st(1),st
c0009333:	d9 c1                	fld    st(1)
c0009335:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c000933b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000933f:	de c1                	faddp  st(1),st
c0009341:	d9 c2                	fld    st(2)
c0009343:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009349:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000934d:	de c1                	faddp  st(1),st
c000934f:	d9 cb                	fxch   st(3)
c0009351:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009357:	85 c9                	test   ecx,ecx
c0009359:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000935d:	de c1                	faddp  st(1),st
c000935f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009363:	0f 8f 6f ff ff ff    	jg     c00092d8 <calc_output_quad+0xfb>
c0009369:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000936d:	de c4                	faddp  st(4),st
c000936f:	d9 cb                	fxch   st(3)
c0009371:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009374:	d9 1f                	fstp   DWORD PTR [edi]
c0009376:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000937a:	de c2                	faddp  st(2),st
c000937c:	d9 c9                	fxch   st(1)
c000937e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009381:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009384:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009388:	de c3                	faddp  st(3),st
c000938a:	d9 ca                	fxch   st(2)
c000938c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000938f:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009392:	de c1                	faddp  st(1),st
c0009394:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009397:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c000939a:	83 c4 5c             	add    esp,0x5c
c000939d:	5b                   	pop    ebx
c000939e:	5e                   	pop    esi
c000939f:	5f                   	pop    edi
c00093a0:	5d                   	pop    ebp
c00093a1:	c3                   	ret    

c00093a2 <calc_output_hex>:
c00093a2:	55                   	push   ebp
c00093a3:	57                   	push   edi
c00093a4:	89 c7                	mov    edi,eax
c00093a6:	56                   	push   esi
c00093a7:	53                   	push   ebx
c00093a8:	89 d3                	mov    ebx,edx
c00093aa:	83 ec 7c             	sub    esp,0x7c
c00093ad:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c00093b4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00093b7:	dd 1c 24             	fstp   QWORD PTR [esp]
c00093ba:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c00093c1:	e8 ca fb ff ff       	call   c0008f90 <int_to_fp>
c00093c6:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00093c9:	d9 ee                	fldz   
c00093cb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00093cf:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00093d3:	29 c8                	sub    eax,ecx
c00093d5:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00093d9:	99                   	cdq    
c00093da:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00093de:	f7 fb                	idiv   ebx
c00093e0:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00093e4:	89 da                	mov    edx,ebx
c00093e6:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00093ea:	0f af d0             	imul   edx,eax
c00093ed:	01 ca                	add    edx,ecx
c00093ef:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00093f3:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00093f6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00093fa:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00093fd:	0f af c2             	imul   eax,edx
c0009400:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009404:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009408:	29 c2                	sub    edx,eax
c000940a:	8d 14 97             	lea    edx,[edi+edx*4]
c000940d:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c0009411:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009415:	e8 84 fb ff ff       	call   c0008f9e <fp_to_double>
c000941a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000941e:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0009422:	e8 6d fb ff ff       	call   c0008f94 <fp_to_int>
c0009427:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000942b:	83 c2 18             	add    edx,0x18
c000942e:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009432:	d8 e1                	fsub   st,st(1)
c0009434:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009438:	de c9                	fmulp  st(1),st
c000943a:	de c1                	faddp  st(1),st
c000943c:	d9 c0                	fld    st(0)
c000943e:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c0009444:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009448:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000944c:	d9 c0                	fld    st(0)
c000944e:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009454:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009458:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000945c:	d9 c0                	fld    st(0)
c000945e:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009464:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009468:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000946c:	d9 c0                	fld    st(0)
c000946e:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009474:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009478:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000947c:	d9 c0                	fld    st(0)
c000947e:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009484:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009488:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000948c:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009492:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009496:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000949a:	de c1                	faddp  st(1),st
c000949c:	0f 89 6b ff ff ff    	jns    c000940d <calc_output_hex+0x6b>
c00094a2:	d9 ee                	fldz   
c00094a4:	d9 ee                	fldz   
c00094a6:	89 d8                	mov    eax,ebx
c00094a8:	29 c8                	sub    eax,ecx
c00094aa:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c00094ae:	89 c1                	mov    ecx,eax
c00094b0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00094b4:	29 c8                	sub    eax,ecx
c00094b6:	99                   	cdq    
c00094b7:	f7 fb                	idiv   ebx
c00094b9:	89 da                	mov    edx,ebx
c00094bb:	0f af d0             	imul   edx,eax
c00094be:	40                   	inc    eax
c00094bf:	01 d1                	add    ecx,edx
c00094c1:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c00094c6:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00094ca:	dd 54 24 38          	fst    QWORD PTR [esp+0x38]
c00094ce:	8d 14 87             	lea    edx,[edi+eax*4]
c00094d1:	d9 ee                	fldz   
c00094d3:	d9 ee                	fldz   
c00094d5:	d9 ca                	fxch   st(2)
c00094d7:	eb 08                	jmp    c00094e1 <calc_output_hex+0x13f>
c00094d9:	d9 cc                	fxch   st(4)
c00094db:	d9 cb                	fxch   st(3)
c00094dd:	d9 ca                	fxch   st(2)
c00094df:	d9 c9                	fxch   st(1)
c00094e1:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c00094e5:	89 c8                	mov    eax,ecx
c00094e7:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c00094eb:	d9 ca                	fxch   st(2)
c00094ed:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094f1:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00094f5:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00094f9:	e8 a0 fa ff ff       	call   c0008f9e <fp_to_double>
c00094fe:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c0009502:	89 c8                	mov    eax,ecx
c0009504:	e8 8b fa ff ff       	call   c0008f94 <fp_to_int>
c0009509:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000950d:	29 d9                	sub    ecx,ebx
c000950f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009513:	83 ea 18             	sub    edx,0x18
c0009516:	d8 e1                	fsub   st,st(1)
c0009518:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000951c:	de c9                	fmulp  st(1),st
c000951e:	de c1                	faddp  st(1),st
c0009520:	d9 c0                	fld    st(0)
c0009522:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009528:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000952c:	de c1                	faddp  st(1),st
c000952e:	d9 c1                	fld    st(1)
c0009530:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009536:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c000953a:	de c1                	faddp  st(1),st
c000953c:	d9 c2                	fld    st(2)
c000953e:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c0009544:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009548:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000954c:	d9 c2                	fld    st(2)
c000954e:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009554:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009558:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000955c:	d9 c2                	fld    st(2)
c000955e:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009564:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009568:	de c1                	faddp  st(1),st
c000956a:	d9 cb                	fxch   st(3)
c000956c:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009572:	85 c9                	test   ecx,ecx
c0009574:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009578:	de c1                	faddp  st(1),st
c000957a:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000957e:	0f 8f 55 ff ff ff    	jg     c00094d9 <calc_output_hex+0x137>
c0009584:	d9 cb                	fxch   st(3)
c0009586:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000958a:	dc 0c 24             	fmul   QWORD PTR [esp]
c000958d:	d9 1e                	fstp   DWORD PTR [esi]
c000958f:	d9 c9                	fxch   st(1)
c0009591:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009595:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009598:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c000959b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000959f:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c00095a3:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095a6:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c00095a9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00095ad:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00095b1:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095b4:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c00095b7:	d9 ca                	fxch   st(2)
c00095b9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00095bd:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c0:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c00095c3:	de c1                	faddp  st(1),st
c00095c5:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c8:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c00095cb:	83 c4 7c             	add    esp,0x7c
c00095ce:	5b                   	pop    ebx
c00095cf:	5e                   	pop    esi
c00095d0:	5f                   	pop    edi
c00095d1:	5d                   	pop    ebp
c00095d2:	c3                   	ret    

c00095d3 <sinc_reset>:
c00095d3:	56                   	push   esi
c00095d4:	53                   	push   ebx
c00095d5:	51                   	push   ecx
c00095d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095da:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c00095dd:	85 db                	test   ebx,ebx
c00095df:	74 51                	je     c0009632 <sinc_reset+0x5f>
c00095e1:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00095e8:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00095ef:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c00095f6:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c00095fc:	d9 ee                	fldz   
c00095fe:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c0009601:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c0009604:	52                   	push   edx
c0009605:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009608:	c1 e0 02             	shl    eax,0x2
c000960b:	50                   	push   eax
c000960c:	6a 00                	push   0x0
c000960e:	56                   	push   esi
c000960f:	e8 f4 6f ff ff       	call   c0000608 <memset>
c0009614:	83 c4 0c             	add    esp,0xc
c0009617:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000961a:	c1 e0 02             	shl    eax,0x2
c000961d:	50                   	push   eax
c000961e:	68 aa 00 00 00       	push   0xaa
c0009623:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009626:	8d 04 86             	lea    eax,[esi+eax*4]
c0009629:	50                   	push   eax
c000962a:	e8 d9 6f ff ff       	call   c0000608 <memset>
c000962f:	83 c4 10             	add    esp,0x10
c0009632:	58                   	pop    eax
c0009633:	5b                   	pop    ebx
c0009634:	5e                   	pop    esi
c0009635:	c3                   	ret    

c0009636 <calc_output_multi>:
c0009636:	55                   	push   ebp
c0009637:	57                   	push   edi
c0009638:	8d 78 44             	lea    edi,[eax+0x44]
c000963b:	56                   	push   esi
c000963c:	89 c6                	mov    esi,eax
c000963e:	53                   	push   ebx
c000963f:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c0009645:	83 ec 4c             	sub    esp,0x4c
c0009648:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000964c:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0009650:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009654:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009658:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000965c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009660:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009663:	e8 28 f9 ff ff       	call   c0008f90 <int_to_fp>
c0009668:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c000966b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000966f:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009673:	99                   	cdq    
c0009674:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009678:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000967c:	0f af d0             	imul   edx,eax
c000967f:	0f af c3             	imul   eax,ebx
c0009682:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009686:	29 c5                	sub    ebp,eax
c0009688:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000968c:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0009690:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009697:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000969b:	52                   	push   edx
c000969c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096a0:	6a 00                	push   0x0
c00096a2:	57                   	push   edi
c00096a3:	e8 60 6f ff ff       	call   c0000608 <memset>
c00096a8:	83 c4 10             	add    esp,0x10
c00096ab:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096af:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00096b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096b7:	e8 e2 f8 ff ff       	call   c0008f9e <fp_to_double>
c00096bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096c0:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00096c4:	e8 cb f8 ff ff       	call   c0008f94 <fp_to_int>
c00096c9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00096cc:	89 d9                	mov    ecx,ebx
c00096ce:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00096d1:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00096d5:	d8 e1                	fsub   st,st(1)
c00096d7:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096db:	de c9                	fmulp  st(1),st
c00096dd:	de c1                	faddp  st(1),st
c00096df:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00096e3:	89 c8                	mov    eax,ecx
c00096e5:	bd 08 00 00 00       	mov    ebp,0x8
c00096ea:	99                   	cdq    
c00096eb:	f7 fd                	idiv   ebp
c00096ed:	4a                   	dec    edx
c00096ee:	83 fa 06             	cmp    edx,0x6
c00096f1:	77 07                	ja     c00096fa <calc_output_multi+0xc4>
c00096f3:	ff 24 95 20 05 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfae0]
c00096fa:	49                   	dec    ecx
c00096fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00096ff:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009702:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009709:	d9 c1                	fld    st(1)
c000970b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000970f:	dc 00                	fadd   QWORD PTR [eax]
c0009711:	dd 18                	fstp   QWORD PTR [eax]
c0009713:	49                   	dec    ecx
c0009714:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009718:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000971b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009722:	d9 c1                	fld    st(1)
c0009724:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009728:	dc 00                	fadd   QWORD PTR [eax]
c000972a:	dd 18                	fstp   QWORD PTR [eax]
c000972c:	49                   	dec    ecx
c000972d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009731:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009734:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000973b:	d9 c1                	fld    st(1)
c000973d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009741:	dc 00                	fadd   QWORD PTR [eax]
c0009743:	dd 18                	fstp   QWORD PTR [eax]
c0009745:	49                   	dec    ecx
c0009746:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000974a:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000974d:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009754:	d9 c1                	fld    st(1)
c0009756:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000975a:	dc 00                	fadd   QWORD PTR [eax]
c000975c:	dd 18                	fstp   QWORD PTR [eax]
c000975e:	49                   	dec    ecx
c000975f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009763:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009766:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000976d:	d9 c1                	fld    st(1)
c000976f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009773:	dc 00                	fadd   QWORD PTR [eax]
c0009775:	dd 18                	fstp   QWORD PTR [eax]
c0009777:	49                   	dec    ecx
c0009778:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000977c:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000977f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009786:	d9 c1                	fld    st(1)
c0009788:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000978c:	dc 00                	fadd   QWORD PTR [eax]
c000978e:	dd 18                	fstp   QWORD PTR [eax]
c0009790:	49                   	dec    ecx
c0009791:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009795:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009798:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000979f:	d9 c1                	fld    st(1)
c00097a1:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097a5:	dc 00                	fadd   QWORD PTR [eax]
c00097a7:	dd 18                	fstp   QWORD PTR [eax]
c00097a9:	49                   	dec    ecx
c00097aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097ae:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097b1:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097b8:	d9 c1                	fld    st(1)
c00097ba:	85 c9                	test   ecx,ecx
c00097bc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097c0:	dc 00                	fadd   QWORD PTR [eax]
c00097c2:	dd 18                	fstp   QWORD PTR [eax]
c00097c4:	0f 8f 19 ff ff ff    	jg     c00096e3 <calc_output_multi+0xad>
c00097ca:	dd d9                	fstp   st(1)
c00097cc:	01 5c 24 0c          	add    DWORD PTR [esp+0xc],ebx
c00097d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d4:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c00097d8:	0f 89 d1 fe ff ff    	jns    c00096af <calc_output_multi+0x79>
c00097de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00097e2:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00097e6:	89 d1                	mov    ecx,edx
c00097e8:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00097ec:	29 c8                	sub    eax,ecx
c00097ee:	99                   	cdq    
c00097ef:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c00097f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097f7:	0f af d0             	imul   edx,eax
c00097fa:	40                   	inc    eax
c00097fb:	01 d1                	add    ecx,edx
c00097fd:	0f af c3             	imul   eax,ebx
c0009800:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009804:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009807:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000980b:	50                   	push   eax
c000980c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009810:	6a 00                	push   0x0
c0009812:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009816:	e8 ed 6d ff ff       	call   c0000608 <memset>
c000981b:	83 c4 10             	add    esp,0x10
c000981e:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009822:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009826:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000982a:	e8 6f f7 ff ff       	call   c0008f9e <fp_to_double>
c000982f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009833:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009837:	e8 58 f7 ff ff       	call   c0008f94 <fp_to_int>
c000983c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000983f:	89 d9                	mov    ecx,ebx
c0009841:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009844:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009848:	d8 e1                	fsub   st,st(1)
c000984a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000984e:	de c9                	fmulp  st(1),st
c0009850:	de c1                	faddp  st(1),st
c0009852:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009856:	89 c8                	mov    eax,ecx
c0009858:	bd 08 00 00 00       	mov    ebp,0x8
c000985d:	99                   	cdq    
c000985e:	f7 fd                	idiv   ebp
c0009860:	4a                   	dec    edx
c0009861:	83 fa 06             	cmp    edx,0x6
c0009864:	77 07                	ja     c000986d <calc_output_multi+0x237>
c0009866:	ff 24 95 3c 05 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfac4]
c000986d:	49                   	dec    ecx
c000986e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009872:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009876:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009879:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009880:	d9 c1                	fld    st(1)
c0009882:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009886:	dc 00                	fadd   QWORD PTR [eax]
c0009888:	dd 18                	fstp   QWORD PTR [eax]
c000988a:	49                   	dec    ecx
c000988b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000988f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009893:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009896:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000989d:	d9 c1                	fld    st(1)
c000989f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098a3:	dc 00                	fadd   QWORD PTR [eax]
c00098a5:	dd 18                	fstp   QWORD PTR [eax]
c00098a7:	49                   	dec    ecx
c00098a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098b0:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098b3:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098ba:	d9 c1                	fld    st(1)
c00098bc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098c0:	dc 00                	fadd   QWORD PTR [eax]
c00098c2:	dd 18                	fstp   QWORD PTR [eax]
c00098c4:	49                   	dec    ecx
c00098c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098cd:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098d0:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098d7:	d9 c1                	fld    st(1)
c00098d9:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098dd:	dc 00                	fadd   QWORD PTR [eax]
c00098df:	dd 18                	fstp   QWORD PTR [eax]
c00098e1:	49                   	dec    ecx
c00098e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098ea:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098ed:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098f4:	d9 c1                	fld    st(1)
c00098f6:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098fa:	dc 00                	fadd   QWORD PTR [eax]
c00098fc:	dd 18                	fstp   QWORD PTR [eax]
c00098fe:	49                   	dec    ecx
c00098ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009903:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009907:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000990a:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009911:	d9 c1                	fld    st(1)
c0009913:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009917:	dc 00                	fadd   QWORD PTR [eax]
c0009919:	dd 18                	fstp   QWORD PTR [eax]
c000991b:	49                   	dec    ecx
c000991c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009920:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009924:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009927:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000992e:	d9 c1                	fld    st(1)
c0009930:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009934:	dc 00                	fadd   QWORD PTR [eax]
c0009936:	dd 18                	fstp   QWORD PTR [eax]
c0009938:	49                   	dec    ecx
c0009939:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000993d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009941:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009944:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000994b:	d9 c1                	fld    st(1)
c000994d:	85 c9                	test   ecx,ecx
c000994f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009953:	dc 00                	fadd   QWORD PTR [eax]
c0009955:	dd 18                	fstp   QWORD PTR [eax]
c0009957:	0f 8f f9 fe ff ff    	jg     c0009856 <calc_output_multi+0x220>
c000995d:	dd d9                	fstp   st(1)
c000995f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009963:	29 5c 24 0c          	sub    DWORD PTR [esp+0xc],ebx
c0009967:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c000996b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0009970:	0f 8f ac fe ff ff    	jg     c0009822 <calc_output_multi+0x1ec>
c0009976:	b9 08 00 00 00       	mov    ecx,0x8
c000997b:	89 d8                	mov    eax,ebx
c000997d:	99                   	cdq    
c000997e:	f7 f9                	idiv   ecx
c0009980:	4a                   	dec    edx
c0009981:	83 fa 06             	cmp    edx,0x6
c0009984:	77 07                	ja     c000998d <calc_output_multi+0x357>
c0009986:	ff 24 95 58 05 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfaa8]
c000998d:	4b                   	dec    ebx
c000998e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009992:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009995:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009998:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000999c:	d8 c9                	fmul   st,st(1)
c000999e:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099a1:	4b                   	dec    ebx
c00099a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099a6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099a9:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099ac:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099b0:	d8 c9                	fmul   st,st(1)
c00099b2:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099b5:	4b                   	dec    ebx
c00099b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ba:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099bd:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099c0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099c4:	d8 c9                	fmul   st,st(1)
c00099c6:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099c9:	4b                   	dec    ebx
c00099ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ce:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099d1:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099d4:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099d8:	d8 c9                	fmul   st,st(1)
c00099da:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099dd:	4b                   	dec    ebx
c00099de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099e2:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099e5:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099e8:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099ec:	d8 c9                	fmul   st,st(1)
c00099ee:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099f1:	4b                   	dec    ebx
c00099f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099f6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099f9:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099fc:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a00:	d8 c9                	fmul   st,st(1)
c0009a02:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a05:	4b                   	dec    ebx
c0009a06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a0a:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a0d:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a10:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a14:	d8 c9                	fmul   st,st(1)
c0009a16:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a19:	4b                   	dec    ebx
c0009a1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a1e:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a21:	85 db                	test   ebx,ebx
c0009a23:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a26:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a2a:	d8 c9                	fmul   st,st(1)
c0009a2c:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a2f:	0f 8f 46 ff ff ff    	jg     c000997b <calc_output_multi+0x345>
c0009a35:	dd d8                	fstp   st(0)
c0009a37:	83 c4 4c             	add    esp,0x4c
c0009a3a:	5b                   	pop    ebx
c0009a3b:	5e                   	pop    esi
c0009a3c:	5f                   	pop    edi
c0009a3d:	5d                   	pop    ebp
c0009a3e:	c3                   	ret    

c0009a3f <double_to_fp>:
c0009a3f:	d9 05 ac 06 02 c0    	fld    DWORD PTR ds:0xc00206ac
c0009a45:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009a49:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009a4d:	e9 1e 53 01 00       	jmp    c001ed70 <lrint>

c0009a52 <fmod_one>:
c0009a52:	83 ec 2c             	sub    esp,0x2c
c0009a55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a65:	83 ec 08             	sub    esp,0x8
c0009a68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a70:	e8 fb 52 01 00       	call   c001ed70 <lrint>
c0009a75:	83 c4 10             	add    esp,0x10
c0009a78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a7c:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009a80:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009a84:	de e1                	fsubrp st(1),st
c0009a86:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009a8a:	d9 ee                	fldz   
c0009a8c:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009a90:	df e0                	fnstsw ax
c0009a92:	f6 c4 45             	test   ah,0x45
c0009a95:	75 0a                	jne    c0009aa1 <fmod_one+0x4f>
c0009a97:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009a9b:	d9 e8                	fld1   
c0009a9d:	de c1                	faddp  st(1),st
c0009a9f:	eb 04                	jmp    c0009aa5 <fmod_one+0x53>
c0009aa1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009aa5:	83 c4 2c             	add    esp,0x2c
c0009aa8:	c3                   	ret    

c0009aa9 <prepare_data>:
c0009aa9:	55                   	push   ebp
c0009aaa:	57                   	push   edi
c0009aab:	56                   	push   esi
c0009aac:	53                   	push   ebx
c0009aad:	83 ec 1c             	sub    esp,0x1c
c0009ab0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009ab4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009ab8:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009abc:	0f 89 57 01 00 00    	jns    c0009c19 <prepare_data+0x170>
c0009ac2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009ac5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009ac8:	85 d2                	test   edx,edx
c0009aca:	75 0d                	jne    c0009ad9 <prepare_data+0x30>
c0009acc:	8d 14 36             	lea    edx,[esi+esi*1]
c0009acf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009ad2:	29 d0                	sub    eax,edx
c0009ad4:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009ad7:	eb 44                	jmp    c0009b1d <prepare_data+0x74>
c0009ad9:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009adc:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009adf:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009ae2:	39 c1                	cmp    ecx,eax
c0009ae4:	7d 04                	jge    c0009aea <prepare_data+0x41>
c0009ae6:	29 d0                	sub    eax,edx
c0009ae8:	eb 2d                	jmp    c0009b17 <prepare_data+0x6e>
c0009aea:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009af0:	29 d7                	sub    edi,edx
c0009af2:	01 f7                	add    edi,esi
c0009af4:	51                   	push   ecx
c0009af5:	29 f2                	sub    edx,esi
c0009af7:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009afe:	8d 14 90             	lea    edx,[eax+edx*4]
c0009b01:	51                   	push   ecx
c0009b02:	52                   	push   edx
c0009b03:	50                   	push   eax
c0009b04:	e8 91 6a ff ff       	call   c000059a <memmove>
c0009b09:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b0c:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b0f:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009b12:	29 f0                	sub    eax,esi
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	29 f0                	sub    eax,esi
c0009b19:	79 02                	jns    c0009b1d <prepare_data+0x74>
c0009b1b:	31 c0                	xor    eax,eax
c0009b1d:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009b20:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009b23:	29 ef                	sub    edi,ebp
c0009b25:	39 c7                	cmp    edi,eax
c0009b27:	7e 02                	jle    c0009b2b <prepare_data+0x82>
c0009b29:	89 c7                	mov    edi,eax
c0009b2b:	89 f8                	mov    eax,edi
c0009b2d:	99                   	cdq    
c0009b2e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009b31:	b8 15 00 00 00       	mov    eax,0x15
c0009b36:	29 d7                	sub    edi,edx
c0009b38:	0f 88 dd 00 00 00    	js     c0009c1b <prepare_data+0x172>
c0009b3e:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009b41:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009b44:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009b47:	0f 8f ce 00 00 00    	jg     c0009c1b <prepare_data+0x172>
c0009b4d:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009b53:	50                   	push   eax
c0009b54:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009b5b:	50                   	push   eax
c0009b5c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b62:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009b65:	50                   	push   eax
c0009b66:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009b69:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009b6d:	50                   	push   eax
c0009b6e:	e8 5f 6a ff ff       	call   c00005d2 <memcpy>
c0009b73:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009b76:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009b79:	01 fd                	add    ebp,edi
c0009b7b:	01 f9                	add    ecx,edi
c0009b7d:	83 c4 10             	add    esp,0x10
c0009b80:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009b83:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009b86:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009b89:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b8d:	0f 85 86 00 00 00    	jne    c0009c19 <prepare_data+0x170>
c0009b93:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009b96:	89 e8                	mov    eax,ebp
c0009b98:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009b9b:	29 c8                	sub    eax,ecx
c0009b9d:	39 f8                	cmp    eax,edi
c0009b9f:	7d 78                	jge    c0009c19 <prepare_data+0x170>
c0009ba1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009ba5:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009ba9:	74 6e                	je     c0009c19 <prepare_data+0x170>
c0009bab:	8d 7e 04             	lea    edi,[esi+0x4]
c0009bae:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009bb2:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009bb5:	29 ef                	sub    edi,ebp
c0009bb7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009bbb:	7c 29                	jl     c0009be6 <prepare_data+0x13d>
c0009bbd:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bc0:	29 f1                	sub    ecx,esi
c0009bc2:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009bc9:	55                   	push   ebp
c0009bca:	50                   	push   eax
c0009bcb:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009bce:	50                   	push   eax
c0009bcf:	52                   	push   edx
c0009bd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009bd4:	e8 c1 69 ff ff       	call   c000059a <memmove>
c0009bd9:	83 c4 10             	add    esp,0x10
c0009bdc:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009bdf:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009be2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009be6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009be9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009bec:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009bef:	83 c6 05             	add    esi,0x5
c0009bf2:	78 07                	js     c0009bfb <prepare_data+0x152>
c0009bf4:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bf7:	39 cf                	cmp    edi,ecx
c0009bf9:	7e 04                	jle    c0009bff <prepare_data+0x156>
c0009bfb:	89 ce                	mov    esi,ecx
c0009bfd:	29 c6                	sub    esi,eax
c0009bff:	8d 04 82             	lea    eax,[edx+eax*4]
c0009c02:	51                   	push   ecx
c0009c03:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009c0a:	51                   	push   ecx
c0009c0b:	6a 00                	push   0x0
c0009c0d:	50                   	push   eax
c0009c0e:	e8 f5 69 ff ff       	call   c0000608 <memset>
c0009c13:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009c16:	83 c4 10             	add    esp,0x10
c0009c19:	31 c0                	xor    eax,eax
c0009c1b:	83 c4 1c             	add    esp,0x1c
c0009c1e:	5b                   	pop    ebx
c0009c1f:	5e                   	pop    esi
c0009c20:	5f                   	pop    edi
c0009c21:	5d                   	pop    ebp
c0009c22:	c3                   	ret    

c0009c23 <sinc_multichan_vari_process>:
c0009c23:	55                   	push   ebp
c0009c24:	b8 05 00 00 00       	mov    eax,0x5
c0009c29:	57                   	push   edi
c0009c2a:	56                   	push   esi
c0009c2b:	53                   	push   ebx
c0009c2c:	83 ec 3c             	sub    esp,0x3c
c0009c2f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009c33:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009c37:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009c3a:	85 db                	test   ebx,ebx
c0009c3c:	0f 84 5d 02 00 00    	je     c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c42:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009c45:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009c48:	0f af d0             	imul   edx,eax
c0009c4b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009c4e:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009c52:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009c59:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009c5c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009c63:	dd 06                	fld    QWORD PTR [esi]
c0009c65:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009c69:	55                   	push   ebp
c0009c6a:	55                   	push   ebp
c0009c6b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009c6e:	e8 d9 f2 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009c73:	89 c2                	mov    edx,eax
c0009c75:	58                   	pop    eax
c0009c76:	85 d2                	test   edx,edx
c0009c78:	59                   	pop    ecx
c0009c79:	b8 16 00 00 00       	mov    eax,0x16
c0009c7e:	0f 85 1b 02 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c84:	d9 05 b0 06 02 c0    	fld    DWORD PTR ds:0xc00206b0
c0009c8a:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009c8d:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009c90:	dd 06                	fld    QWORD PTR [esi]
c0009c92:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009c95:	d8 d1                	fcom   st(1)
c0009c97:	df e0                	fnstsw ax
c0009c99:	9e                   	sahf   
c0009c9a:	76 0f                	jbe    c0009cab <sinc_multichan_vari_process+0x88>
c0009c9c:	dd d8                	fstp   st(0)
c0009c9e:	d9 e8                	fld1   
c0009ca0:	d8 d9                	fcomp  st(1)
c0009ca2:	df e0                	fnstsw ax
c0009ca4:	9e                   	sahf   
c0009ca5:	77 0f                	ja     c0009cb6 <sinc_multichan_vari_process+0x93>
c0009ca7:	dd d8                	fstp   st(0)
c0009ca9:	eb 11                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cab:	dd d9                	fstp   st(1)
c0009cad:	d9 e8                	fld1   
c0009caf:	d8 d9                	fcomp  st(1)
c0009cb1:	df e0                	fnstsw ax
c0009cb3:	9e                   	sahf   
c0009cb4:	76 04                	jbe    c0009cba <sinc_multichan_vari_process+0x97>
c0009cb6:	de f9                	fdivp  st(1),st
c0009cb8:	eb 02                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cba:	dd d8                	fstp   st(0)
c0009cbc:	83 ec 10             	sub    esp,0x10
c0009cbf:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cc5:	e8 a6 50 01 00       	call   c001ed70 <lrint>
c0009cca:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009ccd:	40                   	inc    eax
c0009cce:	dd 14 24             	fst    QWORD PTR [esp]
c0009cd1:	0f af c5             	imul   eax,ebp
c0009cd4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009cd8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009cdc:	e8 71 fd ff ff       	call   c0009a52 <fmod_one>
c0009ce1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009ce4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009ce8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009ceb:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009cef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cf3:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009cf7:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cfa:	e8 71 50 01 00       	call   c001ed70 <lrint>
c0009cff:	0f af e8             	imul   ebp,eax
c0009d02:	d9 e8                	fld1   
c0009d04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009d08:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009d0c:	01 e8                	add    eax,ebp
c0009d0e:	dc 05 18 05 02 c0    	fadd   QWORD PTR ds:0xc0020518
c0009d14:	99                   	cdq    
c0009d15:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d19:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009d1c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009d1f:	83 c4 10             	add    esp,0x10
c0009d22:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009d25:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009d28:	7d 4b                	jge    c0009d75 <sinc_multichan_vari_process+0x152>
c0009d2a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d2d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d30:	01 c8                	add    eax,ecx
c0009d32:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d35:	99                   	cdq    
c0009d36:	f7 f9                	idiv   ecx
c0009d38:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d3c:	7d 09                	jge    c0009d47 <sinc_multichan_vari_process+0x124>
c0009d3e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009d41:	85 c0                	test   eax,eax
c0009d43:	79 57                	jns    c0009d9c <sinc_multichan_vari_process+0x179>
c0009d45:	eb 70                	jmp    c0009db7 <sinc_multichan_vari_process+0x194>
c0009d47:	51                   	push   ecx
c0009d48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d4c:	57                   	push   edi
c0009d4d:	53                   	push   ebx
c0009d4e:	e8 56 fd ff ff       	call   c0009aa9 <prepare_data>
c0009d53:	83 c4 10             	add    esp,0x10
c0009d56:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009d59:	85 c0                	test   eax,eax
c0009d5b:	0f 85 3e 01 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d61:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d64:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d67:	01 c8                	add    eax,ecx
c0009d69:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d6c:	99                   	cdq    
c0009d6d:	f7 f9                	idiv   ecx
c0009d6f:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d73:	7c c9                	jl     c0009d3e <sinc_multichan_vari_process+0x11b>
c0009d75:	dd 04 24             	fld    QWORD PTR [esp]
c0009d78:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009d7b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009d7f:	dd 1e                	fstp   QWORD PTR [esi]
c0009d81:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009d84:	99                   	cdq    
c0009d85:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d88:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009d8b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009d8e:	99                   	cdq    
c0009d8f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d92:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009d95:	31 c0                	xor    eax,eax
c0009d97:	e9 03 01 00 00       	jmp    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da0:	dd 04 24             	fld    QWORD PTR [esp]
c0009da3:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009da6:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009daa:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009dae:	d9 c9                	fxch   st(1)
c0009db0:	de d9                	fcompp 
c0009db2:	df e0                	fnstsw ax
c0009db4:	9e                   	sahf   
c0009db5:	73 be                	jae    c0009d75 <sinc_multichan_vari_process+0x152>
c0009db7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009dbb:	7e 31                	jle    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009dbd:	83 ec 10             	sub    esp,0x10
c0009dc0:	dd 06                	fld    QWORD PTR [esi]
c0009dc2:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009dc8:	e8 83 4f 01 00       	call   c001ed50 <fabs>
c0009dcd:	83 c4 10             	add    esp,0x10
c0009dd0:	dc 1d a0 06 02 c0    	fcomp  QWORD PTR ds:0xc00206a0
c0009dd6:	df e0                	fnstsw ax
c0009dd8:	9e                   	sahf   
c0009dd9:	76 13                	jbe    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009ddb:	dd 06                	fld    QWORD PTR [esi]
c0009ddd:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009de0:	d8 e1                	fsub   st,st(1)
c0009de2:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009de5:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009de8:	de c1                	faddp  st(1),st
c0009dea:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009dee:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009df1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009df5:	d9 e8                	fld1   
c0009df7:	d8 d9                	fcomp  st(1)
c0009df9:	df e0                	fnstsw ax
c0009dfb:	9e                   	sahf   
c0009dfc:	77 04                	ja     c0009e02 <sinc_multichan_vari_process+0x1df>
c0009dfe:	dd d8                	fstp   st(0)
c0009e00:	d9 e8                	fld1   
c0009e02:	de c9                	fmulp  st(1),st
c0009e04:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009e08:	50                   	push   eax
c0009e09:	50                   	push   eax
c0009e0a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e12:	e8 28 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e17:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009e1b:	89 c5                	mov    ebp,eax
c0009e1d:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009e21:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e24:	e8 16 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e29:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009e2c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009e2f:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009e32:	89 c1                	mov    ecx,eax
c0009e34:	52                   	push   edx
c0009e35:	89 d8                	mov    eax,ebx
c0009e37:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009e3b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009e3e:	52                   	push   edx
c0009e3f:	52                   	push   edx
c0009e40:	89 ea                	mov    edx,ebp
c0009e42:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e45:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009e48:	e8 e9 f7 ff ff       	call   c0009636 <calc_output_multi>
c0009e4d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009e50:	d9 e8                	fld1   
c0009e52:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009e55:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009e59:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e5d:	83 c4 10             	add    esp,0x10
c0009e60:	dd 14 24             	fst    QWORD PTR [esp]
c0009e63:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009e67:	e8 e6 fb ff ff       	call   c0009a52 <fmod_one>
c0009e6c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009e6f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009e73:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009e76:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009e7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e7e:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009e82:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e85:	e8 e6 4e 01 00       	call   c001ed70 <lrint>
c0009e8a:	0f af e8             	imul   ebp,eax
c0009e8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009e91:	01 e8                	add    eax,ebp
c0009e93:	99                   	cdq    
c0009e94:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009e97:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009e9a:	e9 80 fe ff ff       	jmp    c0009d1f <sinc_multichan_vari_process+0xfc>
c0009e9f:	83 c4 3c             	add    esp,0x3c
c0009ea2:	5b                   	pop    ebx
c0009ea3:	5e                   	pop    esi
c0009ea4:	5f                   	pop    edi
c0009ea5:	5d                   	pop    ebp
c0009ea6:	c3                   	ret    

c0009ea7 <sinc_hex_vari_process>:
c0009ea7:	55                   	push   ebp
c0009ea8:	b8 05 00 00 00       	mov    eax,0x5
c0009ead:	57                   	push   edi
c0009eae:	56                   	push   esi
c0009eaf:	53                   	push   ebx
c0009eb0:	83 ec 3c             	sub    esp,0x3c
c0009eb3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009eb7:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009ebb:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009ebe:	85 db                	test   ebx,ebx
c0009ec0:	0f 84 58 02 00 00    	je     c000a11e <sinc_hex_vari_process+0x277>
c0009ec6:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009ec9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009ecc:	0f af d0             	imul   edx,eax
c0009ecf:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009ed2:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009ed6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009edd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009ee0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009ee7:	dd 06                	fld    QWORD PTR [esi]
c0009ee9:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009eed:	55                   	push   ebp
c0009eee:	55                   	push   ebp
c0009eef:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ef2:	e8 55 f0 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009ef7:	89 c2                	mov    edx,eax
c0009ef9:	58                   	pop    eax
c0009efa:	85 d2                	test   edx,edx
c0009efc:	59                   	pop    ecx
c0009efd:	b8 16 00 00 00       	mov    eax,0x16
c0009f02:	0f 85 16 02 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009f08:	d9 05 b0 06 02 c0    	fld    DWORD PTR ds:0xc00206b0
c0009f0e:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009f11:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009f14:	dd 06                	fld    QWORD PTR [esi]
c0009f16:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009f19:	d8 d1                	fcom   st(1)
c0009f1b:	df e0                	fnstsw ax
c0009f1d:	9e                   	sahf   
c0009f1e:	76 0f                	jbe    c0009f2f <sinc_hex_vari_process+0x88>
c0009f20:	dd d8                	fstp   st(0)
c0009f22:	d9 e8                	fld1   
c0009f24:	d8 d9                	fcomp  st(1)
c0009f26:	df e0                	fnstsw ax
c0009f28:	9e                   	sahf   
c0009f29:	77 0f                	ja     c0009f3a <sinc_hex_vari_process+0x93>
c0009f2b:	dd d8                	fstp   st(0)
c0009f2d:	eb 11                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f2f:	dd d9                	fstp   st(1)
c0009f31:	d9 e8                	fld1   
c0009f33:	d8 d9                	fcomp  st(1)
c0009f35:	df e0                	fnstsw ax
c0009f37:	9e                   	sahf   
c0009f38:	76 04                	jbe    c0009f3e <sinc_hex_vari_process+0x97>
c0009f3a:	de f9                	fdivp  st(1),st
c0009f3c:	eb 02                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f3e:	dd d8                	fstp   st(0)
c0009f40:	83 ec 10             	sub    esp,0x10
c0009f43:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f46:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f49:	e8 22 4e 01 00       	call   c001ed70 <lrint>
c0009f4e:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009f51:	40                   	inc    eax
c0009f52:	dd 14 24             	fst    QWORD PTR [esp]
c0009f55:	0f af c5             	imul   eax,ebp
c0009f58:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f5c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009f60:	e8 ed fa ff ff       	call   c0009a52 <fmod_one>
c0009f65:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f68:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f6c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f6f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009f73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f77:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f7b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f7e:	e8 ed 4d 01 00       	call   c001ed70 <lrint>
c0009f83:	0f af e8             	imul   ebp,eax
c0009f86:	d9 e8                	fld1   
c0009f88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f8c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009f90:	01 e8                	add    eax,ebp
c0009f92:	dc 05 18 05 02 c0    	fadd   QWORD PTR ds:0xc0020518
c0009f98:	99                   	cdq    
c0009f99:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f9d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009fa0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009fa3:	83 c4 10             	add    esp,0x10
c0009fa6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009fa9:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009fac:	7d 4b                	jge    c0009ff9 <sinc_hex_vari_process+0x152>
c0009fae:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009fb4:	01 c8                	add    eax,ecx
c0009fb6:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009fb9:	99                   	cdq    
c0009fba:	f7 f9                	idiv   ecx
c0009fbc:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009fc0:	7d 09                	jge    c0009fcb <sinc_hex_vari_process+0x124>
c0009fc2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009fc5:	85 c0                	test   eax,eax
c0009fc7:	79 57                	jns    c000a020 <sinc_hex_vari_process+0x179>
c0009fc9:	eb 70                	jmp    c000a03b <sinc_hex_vari_process+0x194>
c0009fcb:	51                   	push   ecx
c0009fcc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009fd0:	57                   	push   edi
c0009fd1:	53                   	push   ebx
c0009fd2:	e8 d2 fa ff ff       	call   c0009aa9 <prepare_data>
c0009fd7:	83 c4 10             	add    esp,0x10
c0009fda:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009fdd:	85 c0                	test   eax,eax
c0009fdf:	0f 85 39 01 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009fe5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fe8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009feb:	01 c8                	add    eax,ecx
c0009fed:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009ff0:	99                   	cdq    
c0009ff1:	f7 f9                	idiv   ecx
c0009ff3:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009ff7:	7c c9                	jl     c0009fc2 <sinc_hex_vari_process+0x11b>
c0009ff9:	dd 04 24             	fld    QWORD PTR [esp]
c0009ffc:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009fff:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a003:	dd 1e                	fstp   QWORD PTR [esi]
c000a005:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a008:	99                   	cdq    
c000a009:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a00c:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a00f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a012:	99                   	cdq    
c000a013:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a016:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a019:	31 c0                	xor    eax,eax
c000a01b:	e9 fe 00 00 00       	jmp    c000a11e <sinc_hex_vari_process+0x277>
c000a020:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a024:	dd 04 24             	fld    QWORD PTR [esp]
c000a027:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a02a:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a02e:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a032:	d9 c9                	fxch   st(1)
c000a034:	de d9                	fcompp 
c000a036:	df e0                	fnstsw ax
c000a038:	9e                   	sahf   
c000a039:	73 be                	jae    c0009ff9 <sinc_hex_vari_process+0x152>
c000a03b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a03f:	7e 31                	jle    c000a072 <sinc_hex_vari_process+0x1cb>
c000a041:	83 ec 10             	sub    esp,0x10
c000a044:	dd 06                	fld    QWORD PTR [esi]
c000a046:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a049:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a04c:	e8 ff 4c 01 00       	call   c001ed50 <fabs>
c000a051:	83 c4 10             	add    esp,0x10
c000a054:	dc 1d a0 06 02 c0    	fcomp  QWORD PTR ds:0xc00206a0
c000a05a:	df e0                	fnstsw ax
c000a05c:	9e                   	sahf   
c000a05d:	76 13                	jbe    c000a072 <sinc_hex_vari_process+0x1cb>
c000a05f:	dd 06                	fld    QWORD PTR [esi]
c000a061:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a064:	d8 e1                	fsub   st,st(1)
c000a066:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a069:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a06c:	de c1                	faddp  st(1),st
c000a06e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a072:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a075:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a079:	d9 e8                	fld1   
c000a07b:	d8 d9                	fcomp  st(1)
c000a07d:	df e0                	fnstsw ax
c000a07f:	9e                   	sahf   
c000a080:	77 04                	ja     c000a086 <sinc_hex_vari_process+0x1df>
c000a082:	dd d8                	fstp   st(0)
c000a084:	d9 e8                	fld1   
c000a086:	de c9                	fmulp  st(1),st
c000a088:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a08c:	50                   	push   eax
c000a08d:	50                   	push   eax
c000a08e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a092:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a096:	e8 a4 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a09b:	89 c5                	mov    ebp,eax
c000a09d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a0a1:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a0a5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0a8:	e8 92 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a0ad:	83 c4 0c             	add    esp,0xc
c000a0b0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a0b3:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a0b6:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a0b9:	89 c1                	mov    ecx,eax
c000a0bb:	52                   	push   edx
c000a0bc:	89 d8                	mov    eax,ebx
c000a0be:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a0c2:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a0c5:	52                   	push   edx
c000a0c6:	52                   	push   edx
c000a0c7:	89 ea                	mov    edx,ebp
c000a0c9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0cc:	e8 d1 f2 ff ff       	call   c00093a2 <calc_output_hex>
c000a0d1:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a0d5:	d9 e8                	fld1   
c000a0d7:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a0db:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a0df:	dd 14 24             	fst    QWORD PTR [esp]
c000a0e2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a0e6:	e8 67 f9 ff ff       	call   c0009a52 <fmod_one>
c000a0eb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a0ee:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a0f2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a0f5:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a0f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a0fd:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a101:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a104:	e8 67 4c 01 00       	call   c001ed70 <lrint>
c000a109:	0f af e8             	imul   ebp,eax
c000a10c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a110:	01 e8                	add    eax,ebp
c000a112:	99                   	cdq    
c000a113:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a116:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a119:	e9 85 fe ff ff       	jmp    c0009fa3 <sinc_hex_vari_process+0xfc>
c000a11e:	83 c4 3c             	add    esp,0x3c
c000a121:	5b                   	pop    ebx
c000a122:	5e                   	pop    esi
c000a123:	5f                   	pop    edi
c000a124:	5d                   	pop    ebp
c000a125:	c3                   	ret    

c000a126 <sinc_quad_vari_process>:
c000a126:	55                   	push   ebp
c000a127:	b8 05 00 00 00       	mov    eax,0x5
c000a12c:	57                   	push   edi
c000a12d:	56                   	push   esi
c000a12e:	53                   	push   ebx
c000a12f:	83 ec 3c             	sub    esp,0x3c
c000a132:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a136:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a13a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a13d:	85 db                	test   ebx,ebx
c000a13f:	0f 84 58 02 00 00    	je     c000a39d <sinc_quad_vari_process+0x277>
c000a145:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a148:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a14b:	0f af d0             	imul   edx,eax
c000a14e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a151:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a155:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a15c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a15f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a166:	dd 06                	fld    QWORD PTR [esi]
c000a168:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a16c:	55                   	push   ebp
c000a16d:	55                   	push   ebp
c000a16e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a171:	e8 d6 ed ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a176:	89 c2                	mov    edx,eax
c000a178:	58                   	pop    eax
c000a179:	85 d2                	test   edx,edx
c000a17b:	59                   	pop    ecx
c000a17c:	b8 16 00 00 00       	mov    eax,0x16
c000a181:	0f 85 16 02 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a187:	d9 05 b0 06 02 c0    	fld    DWORD PTR ds:0xc00206b0
c000a18d:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a190:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a193:	dd 06                	fld    QWORD PTR [esi]
c000a195:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a198:	d8 d1                	fcom   st(1)
c000a19a:	df e0                	fnstsw ax
c000a19c:	9e                   	sahf   
c000a19d:	76 0f                	jbe    c000a1ae <sinc_quad_vari_process+0x88>
c000a19f:	dd d8                	fstp   st(0)
c000a1a1:	d9 e8                	fld1   
c000a1a3:	d8 d9                	fcomp  st(1)
c000a1a5:	df e0                	fnstsw ax
c000a1a7:	9e                   	sahf   
c000a1a8:	77 0f                	ja     c000a1b9 <sinc_quad_vari_process+0x93>
c000a1aa:	dd d8                	fstp   st(0)
c000a1ac:	eb 11                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1ae:	dd d9                	fstp   st(1)
c000a1b0:	d9 e8                	fld1   
c000a1b2:	d8 d9                	fcomp  st(1)
c000a1b4:	df e0                	fnstsw ax
c000a1b6:	9e                   	sahf   
c000a1b7:	76 04                	jbe    c000a1bd <sinc_quad_vari_process+0x97>
c000a1b9:	de f9                	fdivp  st(1),st
c000a1bb:	eb 02                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1bd:	dd d8                	fstp   st(0)
c000a1bf:	83 ec 10             	sub    esp,0x10
c000a1c2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1c5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1c8:	e8 a3 4b 01 00       	call   c001ed70 <lrint>
c000a1cd:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a1d0:	40                   	inc    eax
c000a1d1:	dd 14 24             	fst    QWORD PTR [esp]
c000a1d4:	0f af c5             	imul   eax,ebp
c000a1d7:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a1db:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a1df:	e8 6e f8 ff ff       	call   c0009a52 <fmod_one>
c000a1e4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a1e7:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a1eb:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1ee:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a1f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1f6:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a1fa:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1fd:	e8 6e 4b 01 00       	call   c001ed70 <lrint>
c000a202:	0f af e8             	imul   ebp,eax
c000a205:	d9 e8                	fld1   
c000a207:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a20b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a20f:	01 e8                	add    eax,ebp
c000a211:	dc 05 18 05 02 c0    	fadd   QWORD PTR ds:0xc0020518
c000a217:	99                   	cdq    
c000a218:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a21c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a21f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a222:	83 c4 10             	add    esp,0x10
c000a225:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a228:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a22b:	7d 4b                	jge    c000a278 <sinc_quad_vari_process+0x152>
c000a22d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a230:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a233:	01 c8                	add    eax,ecx
c000a235:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a238:	99                   	cdq    
c000a239:	f7 f9                	idiv   ecx
c000a23b:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a23f:	7d 09                	jge    c000a24a <sinc_quad_vari_process+0x124>
c000a241:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a244:	85 c0                	test   eax,eax
c000a246:	79 57                	jns    c000a29f <sinc_quad_vari_process+0x179>
c000a248:	eb 70                	jmp    c000a2ba <sinc_quad_vari_process+0x194>
c000a24a:	51                   	push   ecx
c000a24b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a24f:	57                   	push   edi
c000a250:	53                   	push   ebx
c000a251:	e8 53 f8 ff ff       	call   c0009aa9 <prepare_data>
c000a256:	83 c4 10             	add    esp,0x10
c000a259:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a25c:	85 c0                	test   eax,eax
c000a25e:	0f 85 39 01 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a264:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a267:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a26a:	01 c8                	add    eax,ecx
c000a26c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a26f:	99                   	cdq    
c000a270:	f7 f9                	idiv   ecx
c000a272:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a276:	7c c9                	jl     c000a241 <sinc_quad_vari_process+0x11b>
c000a278:	dd 04 24             	fld    QWORD PTR [esp]
c000a27b:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a27e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a282:	dd 1e                	fstp   QWORD PTR [esi]
c000a284:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a287:	99                   	cdq    
c000a288:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a28b:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a28e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a291:	99                   	cdq    
c000a292:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a295:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a298:	31 c0                	xor    eax,eax
c000a29a:	e9 fe 00 00 00       	jmp    c000a39d <sinc_quad_vari_process+0x277>
c000a29f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a2a3:	dd 04 24             	fld    QWORD PTR [esp]
c000a2a6:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a2a9:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a2ad:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a2b1:	d9 c9                	fxch   st(1)
c000a2b3:	de d9                	fcompp 
c000a2b5:	df e0                	fnstsw ax
c000a2b7:	9e                   	sahf   
c000a2b8:	73 be                	jae    c000a278 <sinc_quad_vari_process+0x152>
c000a2ba:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a2be:	7e 31                	jle    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2c0:	83 ec 10             	sub    esp,0x10
c000a2c3:	dd 06                	fld    QWORD PTR [esi]
c000a2c5:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a2c8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2cb:	e8 80 4a 01 00       	call   c001ed50 <fabs>
c000a2d0:	83 c4 10             	add    esp,0x10
c000a2d3:	dc 1d a0 06 02 c0    	fcomp  QWORD PTR ds:0xc00206a0
c000a2d9:	df e0                	fnstsw ax
c000a2db:	9e                   	sahf   
c000a2dc:	76 13                	jbe    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2de:	dd 06                	fld    QWORD PTR [esi]
c000a2e0:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a2e3:	d8 e1                	fsub   st,st(1)
c000a2e5:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a2e8:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a2eb:	de c1                	faddp  st(1),st
c000a2ed:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a2f1:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a2f4:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a2f8:	d9 e8                	fld1   
c000a2fa:	d8 d9                	fcomp  st(1)
c000a2fc:	df e0                	fnstsw ax
c000a2fe:	9e                   	sahf   
c000a2ff:	77 04                	ja     c000a305 <sinc_quad_vari_process+0x1df>
c000a301:	dd d8                	fstp   st(0)
c000a303:	d9 e8                	fld1   
c000a305:	de c9                	fmulp  st(1),st
c000a307:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a30b:	50                   	push   eax
c000a30c:	50                   	push   eax
c000a30d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a311:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a315:	e8 25 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a31a:	89 c5                	mov    ebp,eax
c000a31c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a320:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a324:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a327:	e8 13 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a32c:	83 c4 0c             	add    esp,0xc
c000a32f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a332:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a335:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a338:	89 c1                	mov    ecx,eax
c000a33a:	52                   	push   edx
c000a33b:	89 d8                	mov    eax,ebx
c000a33d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a341:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a344:	52                   	push   edx
c000a345:	52                   	push   edx
c000a346:	89 ea                	mov    edx,ebp
c000a348:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a34b:	e8 8d ee ff ff       	call   c00091dd <calc_output_quad>
c000a350:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a354:	d9 e8                	fld1   
c000a356:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a35a:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a35e:	dd 14 24             	fst    QWORD PTR [esp]
c000a361:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a365:	e8 e8 f6 ff ff       	call   c0009a52 <fmod_one>
c000a36a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a36d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a371:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a374:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a37c:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a380:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a383:	e8 e8 49 01 00       	call   c001ed70 <lrint>
c000a388:	0f af e8             	imul   ebp,eax
c000a38b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a38f:	01 e8                	add    eax,ebp
c000a391:	99                   	cdq    
c000a392:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a395:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a398:	e9 85 fe ff ff       	jmp    c000a222 <sinc_quad_vari_process+0xfc>
c000a39d:	83 c4 3c             	add    esp,0x3c
c000a3a0:	5b                   	pop    ebx
c000a3a1:	5e                   	pop    esi
c000a3a2:	5f                   	pop    edi
c000a3a3:	5d                   	pop    ebp
c000a3a4:	c3                   	ret    

c000a3a5 <sinc_stereo_vari_process>:
c000a3a5:	55                   	push   ebp
c000a3a6:	b8 05 00 00 00       	mov    eax,0x5
c000a3ab:	57                   	push   edi
c000a3ac:	56                   	push   esi
c000a3ad:	53                   	push   ebx
c000a3ae:	83 ec 3c             	sub    esp,0x3c
c000a3b1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a3b5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a3b9:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a3bc:	85 db                	test   ebx,ebx
c000a3be:	0f 84 58 02 00 00    	je     c000a61c <sinc_stereo_vari_process+0x277>
c000a3c4:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a3c7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a3ca:	0f af d0             	imul   edx,eax
c000a3cd:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a3d0:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a3d4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a3db:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a3de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a3e5:	dd 06                	fld    QWORD PTR [esi]
c000a3e7:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a3eb:	55                   	push   ebp
c000a3ec:	55                   	push   ebp
c000a3ed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3f0:	e8 57 eb ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a3f5:	89 c2                	mov    edx,eax
c000a3f7:	58                   	pop    eax
c000a3f8:	85 d2                	test   edx,edx
c000a3fa:	59                   	pop    ecx
c000a3fb:	b8 16 00 00 00       	mov    eax,0x16
c000a400:	0f 85 16 02 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a406:	d9 05 b0 06 02 c0    	fld    DWORD PTR ds:0xc00206b0
c000a40c:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a40f:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a412:	dd 06                	fld    QWORD PTR [esi]
c000a414:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a417:	d8 d1                	fcom   st(1)
c000a419:	df e0                	fnstsw ax
c000a41b:	9e                   	sahf   
c000a41c:	76 0f                	jbe    c000a42d <sinc_stereo_vari_process+0x88>
c000a41e:	dd d8                	fstp   st(0)
c000a420:	d9 e8                	fld1   
c000a422:	d8 d9                	fcomp  st(1)
c000a424:	df e0                	fnstsw ax
c000a426:	9e                   	sahf   
c000a427:	77 0f                	ja     c000a438 <sinc_stereo_vari_process+0x93>
c000a429:	dd d8                	fstp   st(0)
c000a42b:	eb 11                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a42d:	dd d9                	fstp   st(1)
c000a42f:	d9 e8                	fld1   
c000a431:	d8 d9                	fcomp  st(1)
c000a433:	df e0                	fnstsw ax
c000a435:	9e                   	sahf   
c000a436:	76 04                	jbe    c000a43c <sinc_stereo_vari_process+0x97>
c000a438:	de f9                	fdivp  st(1),st
c000a43a:	eb 02                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a43c:	dd d8                	fstp   st(0)
c000a43e:	83 ec 10             	sub    esp,0x10
c000a441:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a444:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a447:	e8 24 49 01 00       	call   c001ed70 <lrint>
c000a44c:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a44f:	40                   	inc    eax
c000a450:	dd 14 24             	fst    QWORD PTR [esp]
c000a453:	0f af c5             	imul   eax,ebp
c000a456:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a45a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a45e:	e8 ef f5 ff ff       	call   c0009a52 <fmod_one>
c000a463:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a466:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a46a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a46d:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a471:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a475:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a479:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a47c:	e8 ef 48 01 00       	call   c001ed70 <lrint>
c000a481:	0f af e8             	imul   ebp,eax
c000a484:	d9 e8                	fld1   
c000a486:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a48a:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a48e:	01 e8                	add    eax,ebp
c000a490:	dc 05 18 05 02 c0    	fadd   QWORD PTR ds:0xc0020518
c000a496:	99                   	cdq    
c000a497:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a49b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a49e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a4a1:	83 c4 10             	add    esp,0x10
c000a4a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a4a7:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a4aa:	7d 4b                	jge    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a4ac:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4af:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4b2:	01 c8                	add    eax,ecx
c000a4b4:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4b7:	99                   	cdq    
c000a4b8:	f7 f9                	idiv   ecx
c000a4ba:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4be:	7d 09                	jge    c000a4c9 <sinc_stereo_vari_process+0x124>
c000a4c0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a4c3:	85 c0                	test   eax,eax
c000a4c5:	79 57                	jns    c000a51e <sinc_stereo_vari_process+0x179>
c000a4c7:	eb 70                	jmp    c000a539 <sinc_stereo_vari_process+0x194>
c000a4c9:	51                   	push   ecx
c000a4ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a4ce:	57                   	push   edi
c000a4cf:	53                   	push   ebx
c000a4d0:	e8 d4 f5 ff ff       	call   c0009aa9 <prepare_data>
c000a4d5:	83 c4 10             	add    esp,0x10
c000a4d8:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a4db:	85 c0                	test   eax,eax
c000a4dd:	0f 85 39 01 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a4e3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4e6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4e9:	01 c8                	add    eax,ecx
c000a4eb:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4ee:	99                   	cdq    
c000a4ef:	f7 f9                	idiv   ecx
c000a4f1:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4f5:	7c c9                	jl     c000a4c0 <sinc_stereo_vari_process+0x11b>
c000a4f7:	dd 04 24             	fld    QWORD PTR [esp]
c000a4fa:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a4fd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a501:	dd 1e                	fstp   QWORD PTR [esi]
c000a503:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a506:	99                   	cdq    
c000a507:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a50a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a50d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a510:	99                   	cdq    
c000a511:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a514:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a517:	31 c0                	xor    eax,eax
c000a519:	e9 fe 00 00 00       	jmp    c000a61c <sinc_stereo_vari_process+0x277>
c000a51e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a522:	dd 04 24             	fld    QWORD PTR [esp]
c000a525:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a528:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a52c:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a530:	d9 c9                	fxch   st(1)
c000a532:	de d9                	fcompp 
c000a534:	df e0                	fnstsw ax
c000a536:	9e                   	sahf   
c000a537:	73 be                	jae    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a539:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a53d:	7e 31                	jle    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a53f:	83 ec 10             	sub    esp,0x10
c000a542:	dd 06                	fld    QWORD PTR [esi]
c000a544:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a547:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a54a:	e8 01 48 01 00       	call   c001ed50 <fabs>
c000a54f:	83 c4 10             	add    esp,0x10
c000a552:	dc 1d a0 06 02 c0    	fcomp  QWORD PTR ds:0xc00206a0
c000a558:	df e0                	fnstsw ax
c000a55a:	9e                   	sahf   
c000a55b:	76 13                	jbe    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a55d:	dd 06                	fld    QWORD PTR [esi]
c000a55f:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a562:	d8 e1                	fsub   st,st(1)
c000a564:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a567:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a56a:	de c1                	faddp  st(1),st
c000a56c:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a570:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a573:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a577:	d9 e8                	fld1   
c000a579:	d8 d9                	fcomp  st(1)
c000a57b:	df e0                	fnstsw ax
c000a57d:	9e                   	sahf   
c000a57e:	77 04                	ja     c000a584 <sinc_stereo_vari_process+0x1df>
c000a580:	dd d8                	fstp   st(0)
c000a582:	d9 e8                	fld1   
c000a584:	de c9                	fmulp  st(1),st
c000a586:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a58a:	50                   	push   eax
c000a58b:	50                   	push   eax
c000a58c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a594:	e8 a6 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a599:	89 c5                	mov    ebp,eax
c000a59b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a59f:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a5a3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5a6:	e8 94 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a5ab:	83 c4 0c             	add    esp,0xc
c000a5ae:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a5b1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a5b4:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a5b7:	89 c1                	mov    ecx,eax
c000a5b9:	52                   	push   edx
c000a5ba:	89 d8                	mov    eax,ebx
c000a5bc:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a5c0:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a5c3:	52                   	push   edx
c000a5c4:	52                   	push   edx
c000a5c5:	89 ea                	mov    edx,ebp
c000a5c7:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5ca:	e8 ce ea ff ff       	call   c000909d <calc_output_stereo>
c000a5cf:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a5d3:	d9 e8                	fld1   
c000a5d5:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a5d9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a5dd:	dd 14 24             	fst    QWORD PTR [esp]
c000a5e0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a5e4:	e8 69 f4 ff ff       	call   c0009a52 <fmod_one>
c000a5e9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a5ec:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a5f0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a5f3:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a5f7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5fb:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a5ff:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a602:	e8 69 47 01 00       	call   c001ed70 <lrint>
c000a607:	0f af e8             	imul   ebp,eax
c000a60a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a60e:	01 e8                	add    eax,ebp
c000a610:	99                   	cdq    
c000a611:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a614:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a617:	e9 85 fe ff ff       	jmp    c000a4a1 <sinc_stereo_vari_process+0xfc>
c000a61c:	83 c4 3c             	add    esp,0x3c
c000a61f:	5b                   	pop    ebx
c000a620:	5e                   	pop    esi
c000a621:	5f                   	pop    edi
c000a622:	5d                   	pop    ebp
c000a623:	c3                   	ret    

c000a624 <sinc_mono_vari_process>:
c000a624:	55                   	push   ebp
c000a625:	b8 05 00 00 00       	mov    eax,0x5
c000a62a:	57                   	push   edi
c000a62b:	56                   	push   esi
c000a62c:	53                   	push   ebx
c000a62d:	83 ec 3c             	sub    esp,0x3c
c000a630:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a634:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a638:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a63b:	85 db                	test   ebx,ebx
c000a63d:	0f 84 57 02 00 00    	je     c000a89a <sinc_mono_vari_process+0x276>
c000a643:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a646:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a649:	0f af d0             	imul   edx,eax
c000a64c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a64f:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a653:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a65a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a65d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a664:	dd 06                	fld    QWORD PTR [esi]
c000a666:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a66a:	51                   	push   ecx
c000a66b:	51                   	push   ecx
c000a66c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a66f:	e8 d8 e8 ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a674:	5d                   	pop    ebp
c000a675:	89 c2                	mov    edx,eax
c000a677:	58                   	pop    eax
c000a678:	85 d2                	test   edx,edx
c000a67a:	b8 16 00 00 00       	mov    eax,0x16
c000a67f:	0f 85 15 02 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a685:	d9 05 b0 06 02 c0    	fld    DWORD PTR ds:0xc00206b0
c000a68b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a68e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a691:	dd 06                	fld    QWORD PTR [esi]
c000a693:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a696:	d8 d1                	fcom   st(1)
c000a698:	df e0                	fnstsw ax
c000a69a:	9e                   	sahf   
c000a69b:	76 0f                	jbe    c000a6ac <sinc_mono_vari_process+0x88>
c000a69d:	dd d8                	fstp   st(0)
c000a69f:	d9 e8                	fld1   
c000a6a1:	d8 d9                	fcomp  st(1)
c000a6a3:	df e0                	fnstsw ax
c000a6a5:	9e                   	sahf   
c000a6a6:	77 0f                	ja     c000a6b7 <sinc_mono_vari_process+0x93>
c000a6a8:	dd d8                	fstp   st(0)
c000a6aa:	eb 11                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6ac:	dd d9                	fstp   st(1)
c000a6ae:	d9 e8                	fld1   
c000a6b0:	d8 d9                	fcomp  st(1)
c000a6b2:	df e0                	fnstsw ax
c000a6b4:	9e                   	sahf   
c000a6b5:	76 04                	jbe    c000a6bb <sinc_mono_vari_process+0x97>
c000a6b7:	de f9                	fdivp  st(1),st
c000a6b9:	eb 02                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6bb:	dd d8                	fstp   st(0)
c000a6bd:	83 ec 10             	sub    esp,0x10
c000a6c0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a6c3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6c6:	e8 a5 46 01 00       	call   c001ed70 <lrint>
c000a6cb:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a6ce:	40                   	inc    eax
c000a6cf:	dd 14 24             	fst    QWORD PTR [esp]
c000a6d2:	0f af e8             	imul   ebp,eax
c000a6d5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a6d9:	e8 74 f3 ff ff       	call   c0009a52 <fmod_one>
c000a6de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a6e1:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a6e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6e9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a6ed:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6f0:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a6f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a6f8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6fb:	e8 70 46 01 00       	call   c001ed70 <lrint>
c000a700:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a705:	d9 e8                	fld1   
c000a707:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a70b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a70f:	99                   	cdq    
c000a710:	dc 05 18 05 02 c0    	fadd   QWORD PTR ds:0xc0020518
c000a716:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a719:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a71d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a720:	83 c4 10             	add    esp,0x10
c000a723:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a726:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a729:	7d 44                	jge    c000a76f <sinc_mono_vari_process+0x14b>
c000a72b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a72e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a731:	01 c8                	add    eax,ecx
c000a733:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a736:	99                   	cdq    
c000a737:	f7 f9                	idiv   ecx
c000a739:	39 d5                	cmp    ebp,edx
c000a73b:	7d 09                	jge    c000a746 <sinc_mono_vari_process+0x122>
c000a73d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a740:	85 c0                	test   eax,eax
c000a742:	79 52                	jns    c000a796 <sinc_mono_vari_process+0x172>
c000a744:	eb 6b                	jmp    c000a7b1 <sinc_mono_vari_process+0x18d>
c000a746:	52                   	push   edx
c000a747:	55                   	push   ebp
c000a748:	57                   	push   edi
c000a749:	53                   	push   ebx
c000a74a:	e8 5a f3 ff ff       	call   c0009aa9 <prepare_data>
c000a74f:	83 c4 10             	add    esp,0x10
c000a752:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a755:	85 c0                	test   eax,eax
c000a757:	0f 85 3d 01 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a75d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a760:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a763:	01 c8                	add    eax,ecx
c000a765:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a768:	99                   	cdq    
c000a769:	f7 f9                	idiv   ecx
c000a76b:	39 d5                	cmp    ebp,edx
c000a76d:	7c ce                	jl     c000a73d <sinc_mono_vari_process+0x119>
c000a76f:	dd 04 24             	fld    QWORD PTR [esp]
c000a772:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a775:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a779:	dd 1e                	fstp   QWORD PTR [esi]
c000a77b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a77e:	99                   	cdq    
c000a77f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a782:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a785:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a788:	99                   	cdq    
c000a789:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a78c:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a78f:	31 c0                	xor    eax,eax
c000a791:	e9 04 01 00 00       	jmp    c000a89a <sinc_mono_vari_process+0x276>
c000a796:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a79a:	dd 04 24             	fld    QWORD PTR [esp]
c000a79d:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a7a0:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a7a4:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a7a8:	d9 c9                	fxch   st(1)
c000a7aa:	de d9                	fcompp 
c000a7ac:	df e0                	fnstsw ax
c000a7ae:	9e                   	sahf   
c000a7af:	77 be                	ja     c000a76f <sinc_mono_vari_process+0x14b>
c000a7b1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a7b5:	7e 31                	jle    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7b7:	83 ec 10             	sub    esp,0x10
c000a7ba:	dd 06                	fld    QWORD PTR [esi]
c000a7bc:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a7bf:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a7c2:	e8 89 45 01 00       	call   c001ed50 <fabs>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	dc 1d a0 06 02 c0    	fcomp  QWORD PTR ds:0xc00206a0
c000a7d0:	df e0                	fnstsw ax
c000a7d2:	9e                   	sahf   
c000a7d3:	76 13                	jbe    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7d5:	dd 06                	fld    QWORD PTR [esi]
c000a7d7:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a7da:	d8 e1                	fsub   st,st(1)
c000a7dc:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a7df:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a7e2:	de c1                	faddp  st(1),st
c000a7e4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a7e8:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a7eb:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a7ef:	d9 e8                	fld1   
c000a7f1:	d8 d9                	fcomp  st(1)
c000a7f3:	df e0                	fnstsw ax
c000a7f5:	9e                   	sahf   
c000a7f6:	77 04                	ja     c000a7fc <sinc_mono_vari_process+0x1d8>
c000a7f8:	dd d8                	fstp   st(0)
c000a7fa:	d9 e8                	fld1   
c000a7fc:	de c9                	fmulp  st(1),st
c000a7fe:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a802:	50                   	push   eax
c000a803:	50                   	push   eax
c000a804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a80c:	e8 2e f2 ff ff       	call   c0009a3f <double_to_fp>
c000a811:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a815:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a819:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a81d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a820:	e8 1a f2 ff ff       	call   c0009a3f <double_to_fp>
c000a825:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a829:	89 c1                	mov    ecx,eax
c000a82b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a82f:	89 d8                	mov    eax,ebx
c000a831:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a834:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a838:	e8 7b e7 ff ff       	call   c0008fb8 <calc_output_single>
c000a83d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a840:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a843:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a847:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a84a:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a84d:	d9 e8                	fld1   
c000a84f:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a853:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a857:	dd 14 24             	fst    QWORD PTR [esp]
c000a85a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a85e:	e8 ef f1 ff ff       	call   c0009a52 <fmod_one>
c000a863:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a866:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a86a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a86e:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a872:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a875:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a879:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a87d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a880:	e8 eb 44 01 00       	call   c001ed70 <lrint>
c000a885:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a88a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88e:	99                   	cdq    
c000a88f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a892:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a895:	e9 86 fe ff ff       	jmp    c000a720 <sinc_mono_vari_process+0xfc>
c000a89a:	83 c4 3c             	add    esp,0x3c
c000a89d:	5b                   	pop    ebx
c000a89e:	5e                   	pop    esi
c000a89f:	5f                   	pop    edi
c000a8a0:	5d                   	pop    ebp
c000a8a1:	c3                   	ret    

c000a8a2 <sinc_get_name>:
c000a8a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8a6:	31 c0                	xor    eax,eax
c000a8a8:	83 fa 02             	cmp    edx,0x2
c000a8ab:	77 07                	ja     c000a8b4 <sinc_get_name+0x12>
c000a8ad:	8b 04 95 80 05 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfa80]
c000a8b4:	c3                   	ret    

c000a8b5 <sinc_get_description>:
c000a8b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8b9:	31 c0                	xor    eax,eax
c000a8bb:	83 fa 02             	cmp    edx,0x2
c000a8be:	77 07                	ja     c000a8c7 <sinc_get_description+0x12>
c000a8c0:	8b 04 95 74 05 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfa8c]
c000a8c7:	c3                   	ret    

c000a8c8 <sinc_set_converter>:
c000a8c8:	53                   	push   ebx
c000a8c9:	81 ec 58 08 00 00    	sub    esp,0x858
c000a8cf:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a8d6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a8d9:	85 c0                	test   eax,eax
c000a8db:	74 13                	je     c000a8f0 <sinc_set_converter+0x28>
c000a8dd:	83 ec 0c             	sub    esp,0xc
c000a8e0:	50                   	push   eax
c000a8e1:	e8 94 16 00 00       	call   c000bf7a <free>
c000a8e6:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a8ed:	83 c4 10             	add    esp,0x10
c000a8f0:	50                   	push   eax
c000a8f1:	68 44 08 00 00       	push   0x844
c000a8f6:	6a 00                	push   0x0
c000a8f8:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a8fc:	50                   	push   eax
c000a8fd:	e8 06 5d ff ff       	call   c0000608 <memset>
c000a902:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a905:	83 c4 10             	add    esp,0x10
c000a908:	b8 0b 00 00 00       	mov    eax,0xb
c000a90d:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a913:	7f 6e                	jg     c000a983 <sinc_set_converter+0xbb>
c000a915:	83 fa 01             	cmp    edx,0x1
c000a918:	75 10                	jne    c000a92a <sinc_set_converter+0x62>
c000a91a:	c7 43 24 24 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a624
c000a921:	c7 43 20 24 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a624
c000a928:	eb 4d                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a92a:	83 fa 02             	cmp    edx,0x2
c000a92d:	75 10                	jne    c000a93f <sinc_set_converter+0x77>
c000a92f:	c7 43 24 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a3a5
c000a936:	c7 43 20 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a3a5
c000a93d:	eb 38                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a93f:	83 fa 04             	cmp    edx,0x4
c000a942:	75 10                	jne    c000a954 <sinc_set_converter+0x8c>
c000a944:	c7 43 24 26 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a126
c000a94b:	c7 43 20 26 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a126
c000a952:	eb 23                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a954:	83 fa 06             	cmp    edx,0x6
c000a957:	75 10                	jne    c000a969 <sinc_set_converter+0xa1>
c000a959:	c7 43 24 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009ea7
c000a960:	c7 43 20 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009ea7
c000a967:	eb 0e                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a969:	c7 43 24 23 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009c23
c000a970:	c7 43 20 23 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009c23
c000a977:	c7 43 28 d3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095d3
c000a97e:	b8 0a 00 00 00       	mov    eax,0xa
c000a983:	81 c4 58 08 00 00    	add    esp,0x858
c000a989:	5b                   	pop    ebx
c000a98a:	c3                   	ret    

c000a98b <is_bad_src_ratio>:
c000a98b:	83 ec 0c             	sub    esp,0xc
c000a98e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a992:	89 04 24             	mov    DWORD PTR [esp],eax
c000a995:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a999:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a99d:	dd 04 24             	fld    QWORD PTR [esp]
c000a9a0:	dd 05 a0 04 02 c0    	fld    QWORD PTR ds:0xc00204a0
c000a9a6:	de d9                	fcompp 
c000a9a8:	df e0                	fnstsw ax
c000a9aa:	f6 c4 45             	test   ah,0x45
c000a9ad:	74 10                	je     c000a9bf <is_bad_src_ratio+0x34>
c000a9af:	dd 04 24             	fld    QWORD PTR [esp]
c000a9b2:	dc 1d a8 04 02 c0    	fcomp  QWORD PTR ds:0xc00204a8
c000a9b8:	df e0                	fnstsw ax
c000a9ba:	f6 c4 45             	test   ah,0x45
c000a9bd:	75 07                	jne    c000a9c6 <is_bad_src_ratio+0x3b>
c000a9bf:	b8 01 00 00 00       	mov    eax,0x1
c000a9c4:	eb 05                	jmp    c000a9cb <is_bad_src_ratio+0x40>
c000a9c6:	b8 00 00 00 00       	mov    eax,0x0
c000a9cb:	83 c4 0c             	add    esp,0xc
c000a9ce:	c3                   	ret    

c000a9cf <fmod_one>:
c000a9cf:	83 ec 2c             	sub    esp,0x2c
c000a9d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a9d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a9de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9e2:	83 ec 08             	sub    esp,0x8
c000a9e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ed:	e8 7e 43 01 00       	call   c001ed70 <lrint>
c000a9f2:	83 c4 10             	add    esp,0x10
c000a9f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9f9:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000a9fd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa01:	de e1                	fsubrp st(1),st
c000aa03:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aa07:	d9 ee                	fldz   
c000aa09:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aa0d:	df e0                	fnstsw ax
c000aa0f:	f6 c4 45             	test   ah,0x45
c000aa12:	75 0a                	jne    c000aa1e <fmod_one+0x4f>
c000aa14:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa18:	d9 e8                	fld1   
c000aa1a:	de c1                	faddp  st(1),st
c000aa1c:	eb 04                	jmp    c000aa22 <fmod_one+0x53>
c000aa1e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa22:	83 c4 2c             	add    esp,0x2c
c000aa25:	c3                   	ret    

c000aa26 <zoh_vari_process>:
c000aa26:	55                   	push   ebp
c000aa27:	57                   	push   edi
c000aa28:	56                   	push   esi
c000aa29:	53                   	push   ebx
c000aa2a:	83 ec 2c             	sub    esp,0x2c
c000aa2d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aa31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aa35:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aa3d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aa41:	0f 8e 34 02 00 00    	jle    c000ac7b <zoh_vari_process+0x255>
c000aa47:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aa4a:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aa52:	85 db                	test   ebx,ebx
c000aa54:	0f 84 21 02 00 00    	je     c000ac7b <zoh_vari_process+0x255>
c000aa5a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aa5d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aa61:	74 19                	je     c000aa7c <zoh_vari_process+0x56>
c000aa63:	31 d2                	xor    edx,edx
c000aa65:	39 c2                	cmp    edx,eax
c000aa67:	7d 0c                	jge    c000aa75 <zoh_vari_process+0x4f>
c000aa69:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aa6b:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000aa6e:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000aa72:	42                   	inc    edx
c000aa73:	eb f0                	jmp    c000aa65 <zoh_vari_process+0x3f>
c000aa75:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000aa7c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000aa7f:	0f af d0             	imul   edx,eax
c000aa82:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000aa85:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000aa89:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000aa90:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000aa93:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000aa9a:	dd 07                	fld    QWORD PTR [edi]
c000aa9c:	dd 14 24             	fst    QWORD PTR [esp]
c000aa9f:	50                   	push   eax
c000aaa0:	50                   	push   eax
c000aaa1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaa4:	e8 e2 fe ff ff       	call   c000a98b <is_bad_src_ratio>
c000aaa9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aaad:	5a                   	pop    edx
c000aaae:	59                   	pop    ecx
c000aaaf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000aab4:	0f 85 b9 01 00 00    	jne    c000ac73 <zoh_vari_process+0x24d>
c000aaba:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000aabd:	d9 e8                	fld1   
c000aabf:	d8 d1                	fcom   st(1)
c000aac1:	df e0                	fnstsw ax
c000aac3:	9e                   	sahf   
c000aac4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aac8:	0f 86 85 00 00 00    	jbe    c000ab53 <zoh_vari_process+0x12d>
c000aace:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000aad1:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000aad4:	7d 7d                	jge    c000ab53 <zoh_vari_process+0x12d>
c000aad6:	d9 c0                	fld    st(0)
c000aad8:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aadb:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000aade:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000aae1:	df e0                	fnstsw ax
c000aae3:	9e                   	sahf   
c000aae4:	73 6d                	jae    c000ab53 <zoh_vari_process+0x12d>
c000aae6:	85 d2                	test   edx,edx
c000aae8:	7e 38                	jle    c000ab22 <zoh_vari_process+0xfc>
c000aaea:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aaee:	83 ec 10             	sub    esp,0x10
c000aaf1:	dd 07                	fld    QWORD PTR [edi]
c000aaf3:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000aaf6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaf9:	e8 52 42 01 00       	call   c001ed50 <fabs>
c000aafe:	83 c4 10             	add    esp,0x10
c000ab01:	dc 1d 18 05 02 c0    	fcomp  QWORD PTR ds:0xc0020518
c000ab07:	df e0                	fnstsw ax
c000ab09:	9e                   	sahf   
c000ab0a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab0e:	76 12                	jbe    c000ab22 <zoh_vari_process+0xfc>
c000ab10:	dd 07                	fld    QWORD PTR [edi]
c000ab12:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ab15:	d8 e1                	fsub   st,st(1)
c000ab17:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ab1a:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ab1d:	de c1                	faddp  st(1),st
c000ab1f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab22:	31 c0                	xor    eax,eax
c000ab24:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000ab27:	7e 13                	jle    c000ab3c <zoh_vari_process+0x116>
c000ab29:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000ab2d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ab30:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ab33:	40                   	inc    eax
c000ab34:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000ab37:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ab3a:	eb e8                	jmp    c000ab24 <zoh_vari_process+0xfe>
c000ab3c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab40:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab43:	de c1                	faddp  st(1),st
c000ab45:	e9 73 ff ff ff       	jmp    c000aabd <zoh_vari_process+0x97>
c000ab4a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab4e:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab51:	de c1                	faddp  st(1),st
c000ab53:	83 ec 10             	sub    esp,0x10
c000ab56:	dd 14 24             	fst    QWORD PTR [esp]
c000ab59:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab5d:	e8 6d fe ff ff       	call   c000a9cf <fmod_one>
c000ab62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ab65:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000ab69:	d8 e1                	fsub   st,st(1)
c000ab6b:	d9 c9                	fxch   st(1)
c000ab6d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab71:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab74:	e8 f7 41 01 00       	call   c001ed70 <lrint>
c000ab79:	83 c4 10             	add    esp,0x10
c000ab7c:	0f af e8             	imul   ebp,eax
c000ab7f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab82:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ab85:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ab8c:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ab8f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab92:	0f 8d 82 00 00 00    	jge    c000ac1a <zoh_vari_process+0x1f4>
c000ab98:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ab9c:	d9 c0                	fld    st(0)
c000ab9e:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aba1:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000aba5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000aba9:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000abad:	de d9                	fcompp 
c000abaf:	df e0                	fnstsw ax
c000abb1:	9e                   	sahf   
c000abb2:	72 66                	jb     c000ac1a <zoh_vari_process+0x1f4>
c000abb4:	85 d2                	test   edx,edx
c000abb6:	7e 38                	jle    c000abf0 <zoh_vari_process+0x1ca>
c000abb8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000abbc:	83 ec 10             	sub    esp,0x10
c000abbf:	dd 07                	fld    QWORD PTR [edi]
c000abc1:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000abc4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abc7:	e8 84 41 01 00       	call   c001ed50 <fabs>
c000abcc:	83 c4 10             	add    esp,0x10
c000abcf:	dc 1d 18 05 02 c0    	fcomp  QWORD PTR ds:0xc0020518
c000abd5:	df e0                	fnstsw ax
c000abd7:	9e                   	sahf   
c000abd8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000abdc:	76 12                	jbe    c000abf0 <zoh_vari_process+0x1ca>
c000abde:	dd 07                	fld    QWORD PTR [edi]
c000abe0:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000abe3:	d8 e1                	fsub   st,st(1)
c000abe5:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000abe8:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000abeb:	de c1                	faddp  st(1),st
c000abed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abf0:	31 d2                	xor    edx,edx
c000abf2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000abf5:	39 d0                	cmp    eax,edx
c000abf7:	0f 8e 4d ff ff ff    	jle    c000ab4a <zoh_vari_process+0x124>
c000abfd:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ac00:	29 c1                	sub    ecx,eax
c000ac02:	89 c8                	mov    eax,ecx
c000ac04:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac06:	01 d0                	add    eax,edx
c000ac08:	42                   	inc    edx
c000ac09:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000ac0c:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ac0f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ac12:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000ac15:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ac18:	eb d8                	jmp    c000abf2 <zoh_vari_process+0x1cc>
c000ac1a:	39 e9                	cmp    ecx,ebp
c000ac1c:	7d 13                	jge    c000ac31 <zoh_vari_process+0x20b>
c000ac1e:	89 e8                	mov    eax,ebp
c000ac20:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000ac23:	29 c8                	sub    eax,ecx
c000ac25:	99                   	cdq    
c000ac26:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac2d:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000ac31:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000ac34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac37:	85 c0                	test   eax,eax
c000ac39:	7f 1b                	jg     c000ac56 <zoh_vari_process+0x230>
c000ac3b:	dd 04 24             	fld    QWORD PTR [esp]
c000ac3e:	dd 1f                	fstp   QWORD PTR [edi]
c000ac40:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac43:	99                   	cdq    
c000ac44:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac47:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000ac4a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ac4d:	99                   	cdq    
c000ac4e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac51:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000ac54:	eb 25                	jmp    c000ac7b <zoh_vari_process+0x255>
c000ac56:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ac59:	31 d2                	xor    edx,edx
c000ac5b:	29 e8                	sub    eax,ebp
c000ac5d:	c1 e0 02             	shl    eax,0x2
c000ac60:	39 d5                	cmp    ebp,edx
c000ac62:	7e d7                	jle    c000ac3b <zoh_vari_process+0x215>
c000ac64:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac66:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000ac69:	83 c0 04             	add    eax,0x4
c000ac6c:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ac70:	42                   	inc    edx
c000ac71:	eb ed                	jmp    c000ac60 <zoh_vari_process+0x23a>
c000ac73:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ac7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ac7f:	83 c4 2c             	add    esp,0x2c
c000ac82:	5b                   	pop    ebx
c000ac83:	5e                   	pop    esi
c000ac84:	5f                   	pop    edi
c000ac85:	5d                   	pop    ebp
c000ac86:	c3                   	ret    

c000ac87 <zoh_reset>:
c000ac87:	83 ec 0c             	sub    esp,0xc
c000ac8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac8e:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ac91:	85 c0                	test   eax,eax
c000ac93:	74 20                	je     c000acb5 <zoh_reset+0x2e>
c000ac95:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ac98:	83 c0 1c             	add    eax,0x1c
c000ac9b:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000ac9e:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000aca5:	c1 e2 02             	shl    edx,0x2
c000aca8:	51                   	push   ecx
c000aca9:	52                   	push   edx
c000acaa:	6a 00                	push   0x0
c000acac:	50                   	push   eax
c000acad:	e8 56 59 ff ff       	call   c0000608 <memset>
c000acb2:	83 c4 10             	add    esp,0x10
c000acb5:	83 c4 0c             	add    esp,0xc
c000acb8:	c3                   	ret    

c000acb9 <zoh_get_name>:
c000acb9:	31 c0                	xor    eax,eax
c000acbb:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000acc0:	75 05                	jne    c000acc7 <zoh_get_name+0xe>
c000acc2:	b8 b4 06 02 c0       	mov    eax,0xc00206b4
c000acc7:	c3                   	ret    

c000acc8 <zoh_get_description>:
c000acc8:	31 c0                	xor    eax,eax
c000acca:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000accf:	75 05                	jne    c000acd6 <zoh_get_description+0xe>
c000acd1:	b8 c5 06 02 c0       	mov    eax,0xc00206c5
c000acd6:	c3                   	ret    

c000acd7 <zoh_set_converter>:
c000acd7:	53                   	push   ebx
c000acd8:	b8 0a 00 00 00       	mov    eax,0xa
c000acdd:	83 ec 08             	sub    esp,0x8
c000ace0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ace4:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000ace9:	75 6e                	jne    c000ad59 <zoh_set_converter+0x82>
c000aceb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000acee:	85 c0                	test   eax,eax
c000acf0:	74 13                	je     c000ad05 <zoh_set_converter+0x2e>
c000acf2:	83 ec 0c             	sub    esp,0xc
c000acf5:	50                   	push   eax
c000acf6:	e8 7f 12 00 00       	call   c000bf7a <free>
c000acfb:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ad02:	83 c4 10             	add    esp,0x10
c000ad05:	50                   	push   eax
c000ad06:	50                   	push   eax
c000ad07:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad0a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ad11:	50                   	push   eax
c000ad12:	6a 01                	push   0x1
c000ad14:	e8 81 12 00 00       	call   c000bf9a <calloc>
c000ad19:	83 c4 10             	add    esp,0x10
c000ad1c:	89 c2                	mov    edx,eax
c000ad1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000ad21:	85 d2                	test   edx,edx
c000ad23:	b8 01 00 00 00       	mov    eax,0x1
c000ad28:	74 2f                	je     c000ad59 <zoh_set_converter+0x82>
c000ad2a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad2d:	83 ec 0c             	sub    esp,0xc
c000ad30:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000ad33:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000ad39:	c7 43 24 26 aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aa26
c000ad40:	c7 43 20 26 aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aa26
c000ad47:	c7 43 28 87 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ac87
c000ad4e:	53                   	push   ebx
c000ad4f:	e8 33 ff ff ff       	call   c000ac87 <zoh_reset>
c000ad54:	83 c4 10             	add    esp,0x10
c000ad57:	31 c0                	xor    eax,eax
c000ad59:	83 c4 08             	add    esp,0x8
c000ad5c:	5b                   	pop    ebx
c000ad5d:	c3                   	ret    

c000ad5e <Computer::close(int, int, void*)>:
c000ad5e:	57                   	push   edi
c000ad5f:	56                   	push   esi
c000ad60:	53                   	push   ebx
c000ad61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ad69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ad6d:	83 ec 0c             	sub    esp,0xc
c000ad70:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000ad76:	e8 25 59 00 00       	call   c00106a0 <Device::closeAll()>
c000ad7b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ad81:	83 c4 10             	add    esp,0x10
c000ad84:	8b 10                	mov    edx,DWORD PTR [eax]
c000ad86:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ad8a:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ad92:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ad96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ad9a:	5b                   	pop    ebx
c000ad9b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ad9e:	5e                   	pop    esi
c000ad9f:	5f                   	pop    edi
c000ada0:	ff e0                	jmp    eax

c000ada2 <Computer::Computer()>:
c000ada2:	83 ec 0c             	sub    esp,0xc
c000ada5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ada9:	83 ec 08             	sub    esp,0x8
c000adac:	68 fc 06 02 c0       	push   0xc00206fc
c000adb1:	50                   	push   eax
c000adb2:	e8 63 59 00 00       	call   c001071a <Device::Device(char const*)>
c000adb7:	83 c4 10             	add    esp,0x10
c000adba:	ba c4 08 02 c0       	mov    edx,0xc00208c4
c000adbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc3:	89 10                	mov    DWORD PTR [eax],edx
c000adc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc9:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000add3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000add7:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ade1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ade5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000adeb:	83 ca 04             	or     edx,0x4
c000adee:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000adf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adf8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000adfe:	0f b6 d0             	movzx  edx,al
c000ae01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae05:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ae0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae16:	0f b6 d0             	movzx  edx,al
c000ae19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae1d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000ae22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae2c:	8d 50 01             	lea    edx,[eax+0x1]
c000ae2f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae33:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae39:	0f b6 d0             	movzx  edx,al
c000ae3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae40:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae44:	83 e1 3f             	and    ecx,0x3f
c000ae47:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000ae4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae55:	0f b6 d0             	movzx  edx,al
c000ae58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae5c:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000ae63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae6d:	0f b6 d0             	movzx  edx,al
c000ae70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae74:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000ae79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae83:	8d 50 01             	lea    edx,[eax+0x1]
c000ae86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae8a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae90:	0f b6 d0             	movzx  edx,al
c000ae93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae97:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae9b:	83 e1 3f             	and    ecx,0x3f
c000ae9e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeac:	0f b6 d0             	movzx  edx,al
c000aeaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb3:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000aeba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aebe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aec4:	0f b6 d0             	movzx  edx,al
c000aec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aecb:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000aed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeda:	8d 50 01             	lea    edx,[eax+0x1]
c000aedd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aee1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aee7:	0f b6 d0             	movzx  edx,al
c000aeea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeee:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aef2:	83 e1 3f             	and    ecx,0x3f
c000aef5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aef9:	90                   	nop
c000aefa:	83 c4 0c             	add    esp,0xc
c000aefd:	c3                   	ret    

c000aefe <Computer::setBootMessage(char const*)>:
c000aefe:	c3                   	ret    
c000aeff:	90                   	nop

c000af00 <Computer::start()>:
c000af00:	56                   	push   esi
c000af01:	53                   	push   ebx
c000af02:	50                   	push   eax
c000af03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af07:	e8 80 d2 00 00       	call   c001818c <lockScheduler()>
c000af0c:	e8 af d5 00 00       	call   c00184c0 <schedule()>
c000af11:	e8 78 d2 00 00       	call   c001818e <unlockScheduler()>
c000af16:	fb                   	sti    
c000af17:	83 ec 0c             	sub    esp,0xc
c000af1a:	68 3b 07 00 00       	push   0x73b
c000af1f:	e8 0c 41 00 00       	call   c000f030 <operator new(unsigned long)>
c000af24:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000af2b:	89 c6                	mov    esi,eax
c000af2d:	ff 35 d4 51 02 c0    	push   DWORD PTR ds:0xc00251d4
c000af33:	68 05 07 02 c0       	push   0xc0020705
c000af38:	6a 01                	push   0x1
c000af3a:	50                   	push   eax
c000af3b:	e8 ac d0 00 00       	call   c0017fec <Process::Process(bool, char const*, Process*, char**)>
c000af40:	83 c4 20             	add    esp,0x20
c000af43:	68 ff 00 00 00       	push   0xff
c000af48:	6a 00                	push   0x0
c000af4a:	68 f7 b8 00 c0       	push   0xc000b8f7
c000af4f:	56                   	push   esi
c000af50:	e8 61 d3 00 00       	call   c00182b6 <Process::createThread(void (*)(void*), void*, int)>
c000af55:	6a 7a                	push   0x7a
c000af57:	6a 00                	push   0x0
c000af59:	68 ef 8a 01 c0       	push   0xc0018aef
c000af5e:	ff 35 d4 51 02 c0    	push   DWORD PTR ds:0xc00251d4
c000af64:	e8 4d d3 00 00       	call   c00182b6 <Process::createThread(void (*)(void*), void*, int)>
c000af69:	83 c4 20             	add    esp,0x20
c000af6c:	a3 88 51 02 c0       	mov    ds:0xc0025188,eax
c000af71:	c6 05 8d 3d 02 c0 01 	mov    BYTE PTR ds:0xc0023d8d,0x1
c000af78:	e8 fd 44 00 00       	call   c000f47a <initVFS()>
c000af7d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000af83:	8b 10                	mov    edx,DWORD PTR [eax]
c000af85:	6a 00                	push   0x0
c000af87:	6a 00                	push   0x0
c000af89:	6a 00                	push   0x0
c000af8b:	50                   	push   eax
c000af8c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000af8f:	e8 56 ba 00 00       	call   c00169ea <setupSystemCalls()>
c000af94:	e8 df 4f 00 00       	call   c000ff78 <loadClockSettings()>
c000af99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000af9c:	e8 d3 56 00 00       	call   c0010674 <Device::loadDriversForAll()>
c000afa1:	5a                   	pop    edx
c000afa2:	8b 1d 88 3d 02 c0    	mov    ebx,DWORD PTR ds:0xc0023d88
c000afa8:	59                   	pop    ecx
c000afa9:	6a 01                	push   0x1
c000afab:	68 12 07 02 c0       	push   0xc0020712
c000afb0:	e8 07 cc 00 00       	call   c0017bbc <Thr::loadDLL(char const*, bool)>
c000afb5:	5e                   	pop    esi
c000afb6:	5a                   	pop    edx
c000afb7:	53                   	push   ebx
c000afb8:	50                   	push   eax
c000afb9:	e8 c4 cd 00 00       	call   c0017d82 <Thr::executeDLL(unsigned long, void*)>
c000afbe:	c7 04 24 dc 18 02 c0 	mov    DWORD PTR [esp],0xc00218dc
c000afc5:	e8 55 41 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000afca:	83 c4 10             	add    esp,0x10
c000afcd:	83 ec 0c             	sub    esp,0xc
c000afd0:	6a 02                	push   0x2
c000afd2:	e8 43 d6 00 00       	call   c001861a <blockTask(TaskState)>
c000afd7:	83 c4 10             	add    esp,0x10
c000afda:	eb f1                	jmp    c000afcd <Computer::start()+0xcd>

c000afdc <firstTask()>:
c000afdc:	83 ec 18             	sub    esp,0x18
c000afdf:	ff 35 88 3d 02 c0    	push   DWORD PTR ds:0xc0023d88
c000afe5:	e8 16 ff ff ff       	call   c000af00 <Computer::start()>

c000afea <Computer::detectFeatures()>:
c000afea:	55                   	push   ebp
c000afeb:	57                   	push   edi
c000afec:	56                   	push   esi
c000afed:	53                   	push   ebx
c000afee:	83 ec 1c             	sub    esp,0x1c
c000aff1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000aff5:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000afff:	e8 bb 52 ff ff       	call   c00002bf <detectCPUID>
c000b004:	85 c0                	test   eax,eax
c000b006:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b00c:	0f 95 c2             	setne  dl
c000b00f:	83 e0 fd             	and    eax,0xfffffffd
c000b012:	d1 e2                	shl    edx,1
c000b014:	09 d0                	or     eax,edx
c000b016:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b01c:	a8 02                	test   al,0x2
c000b01e:	75 46                	jne    c000b066 <Computer::detectFeatures()+0x7c>
c000b020:	f6 05 a1 3d 02 c0 04 	test   BYTE PTR ds:0xc0023da1,0x4
c000b027:	74 07                	je     c000b030 <Computer::detectFeatures()+0x46>
c000b029:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b030:	e8 c1 37 01 00       	call   c001e7f6 <x87Detect>
c000b035:	83 e0 01             	and    eax,0x1
c000b038:	c1 e0 04             	shl    eax,0x4
c000b03b:	88 c2                	mov    dl,al
c000b03d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b043:	83 e0 ef             	and    eax,0xffffffef
c000b046:	09 d0                	or     eax,edx
c000b048:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b04e:	a8 10                	test   al,0x10
c000b050:	0f 85 10 01 00 00    	jne    c000b166 <Computer::detectFeatures()+0x17c>
c000b056:	84 c0                	test   al,al
c000b058:	0f 88 2b 01 00 00    	js     c000b189 <Computer::detectFeatures()+0x19f>
c000b05e:	83 c4 1c             	add    esp,0x1c
c000b061:	5b                   	pop    ebx
c000b062:	5e                   	pop    esi
c000b063:	5f                   	pop    edi
c000b064:	5d                   	pop    ebp
c000b065:	c3                   	ret    
c000b066:	83 ec 0c             	sub    esp,0xc
c000b069:	6a 20                	push   0x20
c000b06b:	e8 87 8f 00 00       	call   c0013ff7 <cpuidCheckEDX(unsigned int)>
c000b070:	83 e0 01             	and    eax,0x1
c000b073:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b07a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b080:	83 e0 f7             	and    eax,0xfffffff7
c000b083:	09 d0                	or     eax,edx
c000b085:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b08b:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b092:	e8 60 8f 00 00       	call   c0013ff7 <cpuidCheckEDX(unsigned int)>
c000b097:	83 e0 01             	and    eax,0x1
c000b09a:	88 c2                	mov    dl,al
c000b09c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0a2:	83 e0 fe             	and    eax,0xfffffffe
c000b0a5:	09 d0                	or     eax,edx
c000b0a7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0ad:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b0b4:	e8 3e 8f 00 00       	call   c0013ff7 <cpuidCheckEDX(unsigned int)>
c000b0b9:	c1 e0 07             	shl    eax,0x7
c000b0bc:	88 c2                	mov    dl,al
c000b0be:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0c4:	83 e0 7f             	and    eax,0x7f
c000b0c7:	09 d0                	or     eax,edx
c000b0c9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0cf:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b0d6:	e8 1c 8f 00 00       	call   c0013ff7 <cpuidCheckEDX(unsigned int)>
c000b0db:	83 c4 10             	add    esp,0x10
c000b0de:	83 e0 01             	and    eax,0x1
c000b0e1:	c1 e0 05             	shl    eax,0x5
c000b0e4:	88 c2                	mov    dl,al
c000b0e6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0ec:	83 e0 df             	and    eax,0xffffffdf
c000b0ef:	09 d0                	or     eax,edx
c000b0f1:	f7 05 a0 3d 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0023da0,0x401
c000b0fb:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b101:	0f 84 a8 00 00 00    	je     c000b1af <Computer::detectFeatures()+0x1c5>
c000b107:	83 ec 0c             	sub    esp,0xc
c000b10a:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b111:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b115:	50                   	push   eax
c000b116:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b11a:	55                   	push   ebp
c000b11b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b11f:	57                   	push   edi
c000b120:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b124:	56                   	push   esi
c000b125:	68 00 00 00 80       	push   0x80000000
c000b12a:	e8 45 8e 00 00       	call   c0013f74 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b12f:	83 c4 20             	add    esp,0x20
c000b132:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b139:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b13d:	0f 86 dd fe ff ff    	jbe    c000b020 <Computer::detectFeatures()+0x36>
c000b143:	83 ec 0c             	sub    esp,0xc
c000b146:	50                   	push   eax
c000b147:	55                   	push   ebp
c000b148:	57                   	push   edi
c000b149:	56                   	push   esi
c000b14a:	68 01 00 00 80       	push   0x80000001
c000b14f:	e8 20 8e 00 00       	call   c0013f74 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b154:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b15e:	83 c4 20             	add    esp,0x20
c000b161:	e9 ba fe ff ff       	jmp    c000b020 <Computer::detectFeatures()+0x36>
c000b166:	e8 45 36 01 00       	call   c001e7b0 <sseDetect>
c000b16b:	88 c2                	mov    dl,al
c000b16d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b173:	c1 e2 07             	shl    edx,0x7
c000b176:	83 e0 7f             	and    eax,0x7f
c000b179:	09 d0                	or     eax,edx
c000b17b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b181:	84 c0                	test   al,al
c000b183:	0f 89 d5 fe ff ff    	jns    c000b05e <Computer::detectFeatures()+0x74>
c000b189:	e8 12 36 01 00       	call   c001e7a0 <avxDetect>
c000b18e:	83 e0 01             	and    eax,0x1
c000b191:	c1 e0 05             	shl    eax,0x5
c000b194:	88 c2                	mov    dl,al
c000b196:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b19c:	83 e0 df             	and    eax,0xffffffdf
c000b19f:	09 d0                	or     eax,edx
c000b1a1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b1a7:	83 c4 1c             	add    esp,0x1c
c000b1aa:	5b                   	pop    ebx
c000b1ab:	5e                   	pop    esi
c000b1ac:	5f                   	pop    edi
c000b1ad:	5d                   	pop    ebp
c000b1ae:	c3                   	ret    
c000b1af:	83 ec 0c             	sub    esp,0xc
c000b1b2:	68 00 02 00 00       	push   0x200
c000b1b7:	e8 3b 8e 00 00       	call   c0013ff7 <cpuidCheckEDX(unsigned int)>
c000b1bc:	83 c4 10             	add    esp,0x10
c000b1bf:	e9 43 ff ff ff       	jmp    c000b107 <Computer::detectFeatures()+0x11d>

c000b1c4 <Computer::displayFeatures()>:
c000b1c4:	53                   	push   ebx
c000b1c5:	83 ec 14             	sub    esp,0x14
c000b1c8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b1cc:	68 35 07 02 c0       	push   0xc0020735
c000b1d1:	e8 49 3f 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000b1d6:	83 c4 10             	add    esp,0x10
c000b1d9:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000b1e0:	0f 85 73 02 00 00    	jne    c000b459 <Computer::displayFeatures()+0x295>
c000b1e6:	b8 32 07 02 c0       	mov    eax,0xc0020732
c000b1eb:	83 ec 08             	sub    esp,0x8
c000b1ee:	50                   	push   eax
c000b1ef:	68 48 07 02 c0       	push   0xc0020748
c000b1f4:	e8 26 3f 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000b1f9:	83 c4 10             	add    esp,0x10
c000b1fc:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000b203:	0f 85 8c 02 00 00    	jne    c000b495 <Computer::displayFeatures()+0x2d1>
c000b209:	b8 32 07 02 c0       	mov    eax,0xc0020732
c000b20e:	83 ec 08             	sub    esp,0x8
c000b211:	50                   	push   eax
c000b212:	68 59 07 02 c0       	push   0xc0020759
c000b217:	e8 03 3f 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000b21c:	83 c4 10             	add    esp,0x10
c000b21f:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000b226:	0f 85 5f 02 00 00    	jne    c000b48b <Computer::displayFeatures()+0x2c7>
c000b22c:	b8 32 07 02 c0       	mov    eax,0xc0020732
c000b231:	83 ec 08             	sub    esp,0x8
c000b234:	50                   	push   eax
c000b235:	68 6a 07 02 c0       	push   0xc002076a
c000b23a:	e8 e0 3e 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000b23f:	83 c4 10             	add    esp,0x10
c000b242:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000b249:	0f 85 32 02 00 00    	jne    c000b481 <Computer::displayFeatures()+0x2bd>
c000b24f:	b8 32 07 02 c0       	mov    eax,0xc0020732
c000b254:	83 ec 08             	sub    esp,0x8
c000b257:	50                   	push   eax
c000b258:	68 7b 07 02 c0       	push   0xc002077b
c000b25d:	e8 bd 3e 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000b262:	83 c4 10             	add    esp,0x10
c000b265:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000b26c:	0f 85 05 02 00 00    	jne    c000b477 <Computer::displayFeatures()+0x2b3>
c000b272:	b8 32 07 02 c0       	mov    eax,0xc0020732
c000b277:	83 ec 08             	sub    esp,0x8
c000b27a:	50                   	push   eax
c000b27b:	68 8c 07 02 c0       	push   0xc002078c
c000b280:	e8 9a 3e 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000b285:	83 c4 10             	add    esp,0x10
c000b288:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000b28f:	0f 85 d8 01 00 00    	jne    c000b46d <Computer::displayFeatures()+0x2a9>
c000b295:	b8 32 07 02 c0       	mov    eax,0xc0020732
c000b29a:	83 ec 08             	sub    esp,0x8
c000b29d:	50                   	push   eax
c000b29e:	68 9d 07 02 c0       	push   0xc002079d
c000b2a3:	e8 77 3e 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000b2a8:	83 c4 10             	add    esp,0x10
c000b2ab:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000b2b2:	0f 85 ab 01 00 00    	jne    c000b463 <Computer::displayFeatures()+0x29f>
c000b2b8:	b8 32 07 02 c0       	mov    eax,0xc0020732
c000b2bd:	83 ec 08             	sub    esp,0x8
c000b2c0:	50                   	push   eax
c000b2c1:	68 ae 07 02 c0       	push   0xc00207ae
c000b2c6:	e8 54 3e 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000b2cb:	83 c4 10             	add    esp,0x10
c000b2ce:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000b2d5:	0f 88 1b 02 00 00    	js     c000b4f6 <Computer::displayFeatures()+0x332>
c000b2db:	b8 32 07 02 c0       	mov    eax,0xc0020732
c000b2e0:	83 ec 08             	sub    esp,0x8
c000b2e3:	50                   	push   eax
c000b2e4:	68 bf 07 02 c0       	push   0xc00207bf
c000b2e9:	e8 31 3e 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000b2ee:	83 c4 10             	add    esp,0x10
c000b2f1:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000b2f8:	0f 85 a1 01 00 00    	jne    c000b49f <Computer::displayFeatures()+0x2db>
c000b2fe:	b8 32 07 02 c0       	mov    eax,0xc0020732
c000b303:	83 ec 08             	sub    esp,0x8
c000b306:	50                   	push   eax
c000b307:	68 d0 07 02 c0       	push   0xc00207d0
c000b30c:	e8 0e 3e 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000b311:	83 c4 10             	add    esp,0x10
c000b314:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000b31b:	0f 85 cb 01 00 00    	jne    c000b4ec <Computer::displayFeatures()+0x328>
c000b321:	b8 32 07 02 c0       	mov    eax,0xc0020732
c000b326:	83 ec 08             	sub    esp,0x8
c000b329:	50                   	push   eax
c000b32a:	68 e1 07 02 c0       	push   0xc00207e1
c000b32f:	e8 eb 3d 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000b334:	83 c4 10             	add    esp,0x10
c000b337:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000b33e:	0f 85 9e 01 00 00    	jne    c000b4e2 <Computer::displayFeatures()+0x31e>
c000b344:	b8 32 07 02 c0       	mov    eax,0xc0020732
c000b349:	83 ec 08             	sub    esp,0x8
c000b34c:	50                   	push   eax
c000b34d:	68 f2 07 02 c0       	push   0xc00207f2
c000b352:	e8 c8 3d 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000b357:	83 c4 10             	add    esp,0x10
c000b35a:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000b361:	0f 85 71 01 00 00    	jne    c000b4d8 <Computer::displayFeatures()+0x314>
c000b367:	b8 32 07 02 c0       	mov    eax,0xc0020732
c000b36c:	83 ec 08             	sub    esp,0x8
c000b36f:	50                   	push   eax
c000b370:	68 03 08 02 c0       	push   0xc0020803
c000b375:	e8 a5 3d 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000b37a:	83 c4 10             	add    esp,0x10
c000b37d:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000b384:	0f 85 44 01 00 00    	jne    c000b4ce <Computer::displayFeatures()+0x30a>
c000b38a:	b8 32 07 02 c0       	mov    eax,0xc0020732
c000b38f:	83 ec 08             	sub    esp,0x8
c000b392:	50                   	push   eax
c000b393:	68 14 08 02 c0       	push   0xc0020814
c000b398:	e8 82 3d 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000b39d:	83 c4 10             	add    esp,0x10
c000b3a0:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000b3a7:	0f 85 17 01 00 00    	jne    c000b4c4 <Computer::displayFeatures()+0x300>
c000b3ad:	b8 32 07 02 c0       	mov    eax,0xc0020732
c000b3b2:	83 ec 08             	sub    esp,0x8
c000b3b5:	50                   	push   eax
c000b3b6:	68 25 08 02 c0       	push   0xc0020825
c000b3bb:	e8 5f 3d 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000b3c0:	83 c4 10             	add    esp,0x10
c000b3c3:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000b3ca:	0f 85 ea 00 00 00    	jne    c000b4ba <Computer::displayFeatures()+0x2f6>
c000b3d0:	b8 32 07 02 c0       	mov    eax,0xc0020732
c000b3d5:	83 ec 08             	sub    esp,0x8
c000b3d8:	50                   	push   eax
c000b3d9:	68 36 08 02 c0       	push   0xc0020836
c000b3de:	e8 3c 3d 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000b3e3:	83 c4 10             	add    esp,0x10
c000b3e6:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000b3ed:	0f 88 0d 01 00 00    	js     c000b500 <Computer::displayFeatures()+0x33c>
c000b3f3:	b8 32 07 02 c0       	mov    eax,0xc0020732
c000b3f8:	83 ec 08             	sub    esp,0x8
c000b3fb:	50                   	push   eax
c000b3fc:	68 47 08 02 c0       	push   0xc0020847
c000b401:	e8 19 3d 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000b410:	0f 85 9a 00 00 00    	jne    c000b4b0 <Computer::displayFeatures()+0x2ec>
c000b416:	b8 32 07 02 c0       	mov    eax,0xc0020732
c000b41b:	83 ec 08             	sub    esp,0x8
c000b41e:	50                   	push   eax
c000b41f:	68 58 08 02 c0       	push   0xc0020858
c000b424:	e8 f6 3c 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000b429:	83 c4 10             	add    esp,0x10
c000b42c:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000b433:	75 74                	jne    c000b4a9 <Computer::displayFeatures()+0x2e5>
c000b435:	b8 32 07 02 c0       	mov    eax,0xc0020732
c000b43a:	83 ec 08             	sub    esp,0x8
c000b43d:	50                   	push   eax
c000b43e:	68 69 08 02 c0       	push   0xc0020869
c000b443:	e8 d7 3c 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000b448:	c7 44 24 20 ba 1e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021eba
c000b450:	83 c4 18             	add    esp,0x18
c000b453:	5b                   	pop    ebx
c000b454:	e9 c6 3c 00 00       	jmp    c000f11f <Dbg::kprintf(char const*, ...)>
c000b459:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c000b45e:	e9 88 fd ff ff       	jmp    c000b1eb <Computer::displayFeatures()+0x27>
c000b463:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c000b468:	e9 50 fe ff ff       	jmp    c000b2bd <Computer::displayFeatures()+0xf9>
c000b46d:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c000b472:	e9 23 fe ff ff       	jmp    c000b29a <Computer::displayFeatures()+0xd6>
c000b477:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c000b47c:	e9 f6 fd ff ff       	jmp    c000b277 <Computer::displayFeatures()+0xb3>
c000b481:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c000b486:	e9 c9 fd ff ff       	jmp    c000b254 <Computer::displayFeatures()+0x90>
c000b48b:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c000b490:	e9 9c fd ff ff       	jmp    c000b231 <Computer::displayFeatures()+0x6d>
c000b495:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c000b49a:	e9 6f fd ff ff       	jmp    c000b20e <Computer::displayFeatures()+0x4a>
c000b49f:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c000b4a4:	e9 5a fe ff ff       	jmp    c000b303 <Computer::displayFeatures()+0x13f>
c000b4a9:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c000b4ae:	eb 8a                	jmp    c000b43a <Computer::displayFeatures()+0x276>
c000b4b0:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c000b4b5:	e9 61 ff ff ff       	jmp    c000b41b <Computer::displayFeatures()+0x257>
c000b4ba:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c000b4bf:	e9 11 ff ff ff       	jmp    c000b3d5 <Computer::displayFeatures()+0x211>
c000b4c4:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c000b4c9:	e9 e4 fe ff ff       	jmp    c000b3b2 <Computer::displayFeatures()+0x1ee>
c000b4ce:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c000b4d3:	e9 b7 fe ff ff       	jmp    c000b38f <Computer::displayFeatures()+0x1cb>
c000b4d8:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c000b4dd:	e9 8a fe ff ff       	jmp    c000b36c <Computer::displayFeatures()+0x1a8>
c000b4e2:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c000b4e7:	e9 5d fe ff ff       	jmp    c000b349 <Computer::displayFeatures()+0x185>
c000b4ec:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c000b4f1:	e9 30 fe ff ff       	jmp    c000b326 <Computer::displayFeatures()+0x162>
c000b4f6:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c000b4fb:	e9 e0 fd ff ff       	jmp    c000b2e0 <Computer::displayFeatures()+0x11c>
c000b500:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c000b505:	e9 ee fe ff ff       	jmp    c000b3f8 <Computer::displayFeatures()+0x234>

c000b50a <Computer::rdmsr(unsigned int)>:
c000b50a:	83 ec 0c             	sub    esp,0xc
c000b50d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b511:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b518:	74 0a                	je     c000b524 <Computer::rdmsr(unsigned int)+0x1a>
c000b51a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b51e:	0f 32                	rdmsr  
c000b520:	83 c4 0c             	add    esp,0xc
c000b523:	c3                   	ret    
c000b524:	83 ec 0c             	sub    esp,0xc
c000b527:	68 7a 08 02 c0       	push   0xc002087a
c000b52c:	e8 ed 9c 00 00       	call   c001521e <Krnl::panic(char const*)>
c000b531:	83 c4 10             	add    esp,0x10
c000b534:	eb e4                	jmp    c000b51a <Computer::rdmsr(unsigned int)+0x10>

c000b536 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b536:	57                   	push   edi
c000b537:	56                   	push   esi
c000b538:	52                   	push   edx
c000b539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b53d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b541:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b545:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b54c:	74 0e                	je     c000b55c <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b54e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b552:	89 f0                	mov    eax,esi
c000b554:	89 fa                	mov    edx,edi
c000b556:	0f 30                	wrmsr  
c000b558:	58                   	pop    eax
c000b559:	5e                   	pop    esi
c000b55a:	5f                   	pop    edi
c000b55b:	c3                   	ret    
c000b55c:	83 ec 0c             	sub    esp,0xc
c000b55f:	68 80 08 02 c0       	push   0xc0020880
c000b564:	e8 b5 9c 00 00       	call   c001521e <Krnl::panic(char const*)>
c000b569:	83 c4 10             	add    esp,0x10
c000b56c:	eb e0                	jmp    c000b54e <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b56e <Computer::nmiEnabled()>:
c000b56e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b572:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b578:	c3                   	ret    
c000b579:	90                   	nop

c000b57a <Computer::readCMOS(unsigned char)>:
c000b57a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b57e:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b585:	19 c0                	sbb    eax,eax
c000b587:	83 e0 80             	and    eax,0xffffff80
c000b58a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b58e:	e6 70                	out    0x70,al
c000b590:	e4 71                	in     al,0x71
c000b592:	c3                   	ret    
c000b593:	90                   	nop

c000b594 <Computer::enableNMI(bool)>:
c000b594:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b598:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b59c:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b5a2:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b5aa:	eb ce                	jmp    c000b57a <Computer::readCMOS(unsigned char)>

c000b5ac <Computer::open(int, int, void*)>:
c000b5ac:	56                   	push   esi
c000b5ad:	53                   	push   ebx
c000b5ae:	83 ec 10             	sub    esp,0x10
c000b5b1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b5b5:	f6 05 a0 3d 02 c0 04 	test   BYTE PTR ds:0xc0023da0,0x4
c000b5bc:	68 68 22 00 00       	push   0x2268
c000b5c1:	0f 94 05 c0 31 02 c0 	sete   BYTE PTR ds:0xc00231c0
c000b5c8:	e8 63 3a 00 00       	call   c000f030 <operator new(unsigned long)>
c000b5cd:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5d0:	89 c6                	mov    esi,eax
c000b5d2:	e8 3d 80 00 00       	call   c0013614 <ACPI::ACPI()>
c000b5d7:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b5dd:	58                   	pop    eax
c000b5de:	5a                   	pop    edx
c000b5df:	56                   	push   esi
c000b5e0:	53                   	push   ebx
c000b5e1:	e8 44 4f 00 00       	call   c001052a <Device::addChild(Device*)>
c000b5e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b5e9:	e8 fc f9 ff ff       	call   c000afea <Computer::detectFeatures()>
c000b5ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b5f1:	e8 ce fb ff ff       	call   c000b1c4 <Computer::displayFeatures()>
c000b5f6:	59                   	pop    ecx
c000b5f7:	5e                   	pop    esi
c000b5f8:	6a 01                	push   0x1
c000b5fa:	53                   	push   ebx
c000b5fb:	e8 94 ff ff ff       	call   c000b594 <Computer::enableNMI(bool)>
c000b600:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b607:	e8 24 3a 00 00       	call   c000f030 <operator new(unsigned long)>
c000b60c:	89 04 24             	mov    DWORD PTR [esp],eax
c000b60f:	89 c6                	mov    esi,eax
c000b611:	e8 ac 8a 00 00       	call   c00140c2 <CPU::CPU()>
c000b616:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b61c:	58                   	pop    eax
c000b61d:	5a                   	pop    edx
c000b61e:	56                   	push   esi
c000b61f:	53                   	push   ebx
c000b620:	e8 05 4f 00 00       	call   c001052a <Device::addChild(Device*)>
c000b625:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b62b:	8b 10                	mov    edx,DWORD PTR [eax]
c000b62d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b631:	6a 00                	push   0x0
c000b633:	6a 00                	push   0x0
c000b635:	50                   	push   eax
c000b636:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b639:	83 c4 20             	add    esp,0x20
c000b63c:	e8 51 54 00 00       	call   c0010a92 <setupFPU()>
c000b641:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b647:	85 c0                	test   eax,eax
c000b649:	74 1f                	je     c000b66a <Computer::open(int, int, void*)+0xbe>
c000b64b:	83 ec 08             	sub    esp,0x8
c000b64e:	50                   	push   eax
c000b64f:	53                   	push   ebx
c000b650:	e8 d5 4e 00 00       	call   c001052a <Device::addChild(Device*)>
c000b655:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b65b:	8b 10                	mov    edx,DWORD PTR [eax]
c000b65d:	6a 00                	push   0x0
c000b65f:	6a 00                	push   0x0
c000b661:	6a 00                	push   0x0
c000b663:	50                   	push   eax
c000b664:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b667:	83 c4 20             	add    esp,0x20
c000b66a:	83 ec 0c             	sub    esp,0xc
c000b66d:	68 dc af 00 c0       	push   0xc000afdc
c000b672:	e8 3f cd 00 00       	call   c00183b6 <setupMultitasking(void (*)())>
c000b677:	83 c4 14             	add    esp,0x14
c000b67a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b67f:	5b                   	pop    ebx
c000b680:	5e                   	pop    esi
c000b681:	c3                   	ret    

c000b682 <Computer::disableNMI()>:
c000b682:	6a 00                	push   0x0
c000b684:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b688:	e8 07 ff ff ff       	call   c000b594 <Computer::enableNMI(bool)>
c000b68d:	58                   	pop    eax
c000b68e:	5a                   	pop    edx
c000b68f:	c3                   	ret    

c000b690 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b694:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b69b:	19 c0                	sbb    eax,eax
c000b69d:	83 e0 80             	and    eax,0xffffff80
c000b6a0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b6a4:	e6 70                	out    0x70,al
c000b6a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b6aa:	e6 71                	out    0x71,al
c000b6ac:	c3                   	ret    
c000b6ad:	90                   	nop

c000b6ae <Computer::handleNMI()>:
c000b6ae:	56                   	push   esi
c000b6af:	53                   	push   ebx
c000b6b0:	83 ec 10             	sub    esp,0x10
c000b6b3:	e4 92                	in     al,0x92
c000b6b5:	89 c6                	mov    esi,eax
c000b6b7:	e4 61                	in     al,0x61
c000b6b9:	68 86 08 02 c0       	push   0xc0020886
c000b6be:	88 c3                	mov    bl,al
c000b6c0:	e8 5a 3a 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000b6c5:	83 c4 10             	add    esp,0x10
c000b6c8:	83 e6 10             	and    esi,0x10
c000b6cb:	75 0d                	jne    c000b6da <Computer::handleNMI()+0x2c>
c000b6cd:	f6 c3 40             	test   bl,0x40
c000b6d0:	75 1d                	jne    c000b6ef <Computer::handleNMI()+0x41>
c000b6d2:	84 db                	test   bl,bl
c000b6d4:	78 2d                	js     c000b703 <Computer::handleNMI()+0x55>
c000b6d6:	58                   	pop    eax
c000b6d7:	5b                   	pop    ebx
c000b6d8:	5e                   	pop    esi
c000b6d9:	c3                   	ret    
c000b6da:	83 ec 0c             	sub    esp,0xc
c000b6dd:	68 97 08 02 c0       	push   0xc0020897
c000b6e2:	e8 37 9b 00 00       	call   c001521e <Krnl::panic(char const*)>
c000b6e7:	83 c4 10             	add    esp,0x10
c000b6ea:	f6 c3 40             	test   bl,0x40
c000b6ed:	74 e3                	je     c000b6d2 <Computer::handleNMI()+0x24>
c000b6ef:	83 ec 0c             	sub    esp,0xc
c000b6f2:	68 a4 08 02 c0       	push   0xc00208a4
c000b6f7:	e8 22 9b 00 00       	call   c001521e <Krnl::panic(char const*)>
c000b6fc:	83 c4 10             	add    esp,0x10
c000b6ff:	84 db                	test   bl,bl
c000b701:	79 d3                	jns    c000b6d6 <Computer::handleNMI()+0x28>
c000b703:	c7 44 24 10 ae 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc00208ae
c000b70b:	5a                   	pop    edx
c000b70c:	5b                   	pop    ebx
c000b70d:	5e                   	pop    esi
c000b70e:	e9 0b 9b 00 00       	jmp    c001521e <Krnl::panic(char const*)>
c000b713:	90                   	nop

c000b714 <Computer::setDiskActivityLight(int, bool)>:
c000b714:	56                   	push   esi
c000b715:	53                   	push   ebx
c000b716:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b71a:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b71f:	77 1b                	ja     c000b73c <Computer::setDiskActivityLight(int, bool)+0x28>
c000b721:	e4 92                	in     al,0x92
c000b723:	bb 40 00 00 00       	mov    ebx,0x40
c000b728:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b72c:	89 da                	mov    edx,ebx
c000b72e:	d3 e2                	shl    edx,cl
c000b730:	89 f1                	mov    ecx,esi
c000b732:	f7 d2                	not    edx
c000b734:	d3 e3                	shl    ebx,cl
c000b736:	21 d0                	and    eax,edx
c000b738:	09 d8                	or     eax,ebx
c000b73a:	e6 92                	out    0x92,al
c000b73c:	5b                   	pop    ebx
c000b73d:	5e                   	pop    esi
c000b73e:	c3                   	ret    
c000b73f:	90                   	nop

c000b740 <GDTEntry::setBase(unsigned int)>:
c000b740:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b744:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b748:	89 c1                	mov    ecx,eax
c000b74a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b74e:	c1 e9 10             	shr    ecx,0x10
c000b751:	c1 e8 18             	shr    eax,0x18
c000b754:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b757:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b75a:	c3                   	ret    
c000b75b:	90                   	nop

c000b75c <GDTEntry::setLimit(unsigned int)>:
c000b75c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b760:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b764:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b767:	66 89 01             	mov    WORD PTR [ecx],ax
c000b76a:	83 e2 f0             	and    edx,0xfffffff0
c000b76d:	c1 e8 10             	shr    eax,0x10
c000b770:	83 e0 0f             	and    eax,0xf
c000b773:	09 d0                	or     eax,edx
c000b775:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b778:	c3                   	ret    
c000b779:	90                   	nop

c000b77a <GDT::GDT()>:
c000b77a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b77e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b784:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b788:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b78e:	90                   	nop
c000b78f:	c3                   	ret    

c000b790 <GDT::addEntry(GDTEntry)>:
c000b790:	53                   	push   ebx
c000b791:	83 ec 0c             	sub    esp,0xc
c000b794:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b798:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b79a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b7a1:	52                   	push   edx
c000b7a2:	50                   	push   eax
c000b7a3:	68 e8 08 02 c0       	push   0xc00208e8
c000b7a8:	e8 72 39 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000b7ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b7af:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b7b3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b7b7:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b7bb:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b7bf:	8d 50 01             	lea    edx,[eax+0x1]
c000b7c2:	c1 e0 03             	shl    eax,0x3
c000b7c5:	89 13                	mov    DWORD PTR [ebx],edx
c000b7c7:	83 c4 18             	add    esp,0x18
c000b7ca:	5b                   	pop    ebx
c000b7cb:	c3                   	ret    

c000b7cc <GDT::getNumberOfEntries()>:
c000b7cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7d0:	8b 00                	mov    eax,DWORD PTR [eax]
c000b7d2:	c3                   	ret    
c000b7d3:	90                   	nop

c000b7d4 <GDT::flush()>:
c000b7d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7d8:	8b 10                	mov    edx,DWORD PTR [eax]
c000b7da:	83 c0 04             	add    eax,0x4
c000b7dd:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b7e4:	a3 92 3d 02 c0       	mov    ds:0xc0023d92,eax
c000b7e9:	66 89 15 90 3d 02 c0 	mov    WORD PTR ds:0xc0023d90,dx
c000b7f0:	e9 3e 4b ff ff       	jmp    c0000333 <loadGDT>
c000b7f5:	90                   	nop

c000b7f6 <GDT::setup()>:
c000b7f6:	55                   	push   ebp
c000b7f7:	57                   	push   edi
c000b7f8:	56                   	push   esi
c000b7f9:	53                   	push   ebx
c000b7fa:	83 ec 3c             	sub    esp,0x3c
c000b7fd:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b801:	6a 00                	push   0x0
c000b803:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b807:	53                   	push   ebx
c000b808:	e8 33 ff ff ff       	call   c000b740 <GDTEntry::setBase(unsigned int)>
c000b80d:	6a 00                	push   0x0
c000b80f:	53                   	push   ebx
c000b810:	e8 47 ff ff ff       	call   c000b75c <GDTEntry::setLimit(unsigned int)>
c000b815:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b81d:	6a 00                	push   0x0
c000b81f:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b823:	53                   	push   ebx
c000b824:	e8 17 ff ff ff       	call   c000b740 <GDTEntry::setBase(unsigned int)>
c000b829:	68 ff ff ff 00       	push   0xffffff
c000b82e:	53                   	push   ebx
c000b82f:	e8 28 ff ff ff       	call   c000b75c <GDTEntry::setLimit(unsigned int)>
c000b834:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b838:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b83d:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b842:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b846:	83 c4 20             	add    esp,0x20
c000b849:	6a 00                	push   0x0
c000b84b:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b84f:	53                   	push   ebx
c000b850:	e8 eb fe ff ff       	call   c000b740 <GDTEntry::setBase(unsigned int)>
c000b855:	68 ff ff ff 00       	push   0xffffff
c000b85a:	53                   	push   ebx
c000b85b:	e8 fc fe ff ff       	call   c000b75c <GDTEntry::setLimit(unsigned int)>
c000b860:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b864:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b868:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b86c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b870:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b874:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b879:	0d 00 92 c0 00       	or     eax,0xc09200
c000b87e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b882:	89 d8                	mov    eax,ebx
c000b884:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b888:	80 cc 60             	or     ah,0x60
c000b88b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b88f:	83 c4 0c             	add    esp,0xc
c000b892:	89 f8                	mov    eax,edi
c000b894:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b898:	80 cc 60             	or     ah,0x60
c000b89b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b89f:	89 c7                	mov    edi,eax
c000b8a1:	55                   	push   ebp
c000b8a2:	e8 e9 fe ff ff       	call   c000b790 <GDT::addEntry(GDTEntry)>
c000b8a7:	83 c4 0c             	add    esp,0xc
c000b8aa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b8ae:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b8b2:	55                   	push   ebp
c000b8b3:	e8 d8 fe ff ff       	call   c000b790 <GDT::addEntry(GDTEntry)>
c000b8b8:	83 c4 0c             	add    esp,0xc
c000b8bb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b8bf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b8c3:	55                   	push   ebp
c000b8c4:	e8 c7 fe ff ff       	call   c000b790 <GDT::addEntry(GDTEntry)>
c000b8c9:	83 c4 0c             	add    esp,0xc
c000b8cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b8d0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b8d4:	53                   	push   ebx
c000b8d5:	51                   	push   ecx
c000b8d6:	55                   	push   ebp
c000b8d7:	e8 b4 fe ff ff       	call   c000b790 <GDT::addEntry(GDTEntry)>
c000b8dc:	83 c4 0c             	add    esp,0xc
c000b8df:	57                   	push   edi
c000b8e0:	56                   	push   esi
c000b8e1:	55                   	push   ebp
c000b8e2:	e8 a9 fe ff ff       	call   c000b790 <GDT::addEntry(GDTEntry)>
c000b8e7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b8ea:	e8 e5 fe ff ff       	call   c000b7d4 <GDT::flush()>
c000b8ef:	83 c4 4c             	add    esp,0x4c
c000b8f2:	5b                   	pop    ebx
c000b8f3:	5e                   	pop    esi
c000b8f4:	5f                   	pop    edi
c000b8f5:	5d                   	pop    ebp
c000b8f6:	c3                   	ret    

c000b8f7 <idleFunction(void*)>:
c000b8f7:	53                   	push   ebx
c000b8f8:	83 ec 08             	sub    esp,0x8
c000b8fb:	e8 8e c8 00 00       	call   c001818e <unlockScheduler()>
c000b900:	e8 a9 87 00 00       	call   c00140ae <thisCPU()>
c000b905:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b90c:	74 41                	je     c000b94f <idleFunction(void*)+0x58>
c000b90e:	a1 88 3d 02 c0       	mov    eax,ds:0xc0023d88
c000b913:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b91a:	74 33                	je     c000b94f <idleFunction(void*)+0x58>
c000b91c:	31 db                	xor    ebx,ebx
c000b91e:	52                   	push   edx
c000b91f:	52                   	push   edx
c000b920:	68 e1 00 00 00       	push   0xe1
c000b925:	50                   	push   eax
c000b926:	e8 df fb ff ff       	call   c000b50a <Computer::rdmsr(unsigned int)>
c000b92b:	53                   	push   ebx
c000b92c:	83 e0 02             	and    eax,0x2
c000b92f:	50                   	push   eax
c000b930:	68 e1 00 00 00       	push   0xe1
c000b935:	ff 35 88 3d 02 c0    	push   DWORD PTR ds:0xc0023d88
c000b93b:	e8 f6 fb ff ff       	call   c000b536 <Computer::wrmsr(unsigned int, unsigned long long)>
c000b940:	83 c4 20             	add    esp,0x20
c000b943:	e8 08 48 ff ff       	call   c0000150 <doTPAUSE>
c000b948:	e8 a3 34 01 00       	call   c001edf0 <idleCommon()>
c000b94d:	eb f4                	jmp    c000b943 <idleFunction(void*)+0x4c>
c000b94f:	fb                   	sti    
c000b950:	f4                   	hlt    
c000b951:	e8 9a 34 01 00       	call   c001edf0 <idleCommon()>
c000b956:	eb f7                	jmp    c000b94f <idleFunction(void*)+0x58>

c000b958 <IDTEntry::IDTEntry(bool)>:
c000b958:	83 ec 04             	sub    esp,0x4
c000b95b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b95f:	88 04 24             	mov    BYTE PTR [esp],al
c000b962:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b966:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000b96c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b970:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000b974:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b978:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b97b:	83 e2 f0             	and    edx,0xfffffff0
c000b97e:	83 ca 0e             	or     edx,0xe
c000b981:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b984:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b988:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b98b:	83 e2 ef             	and    edx,0xffffffef
c000b98e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b991:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000b995:	74 04                	je     c000b99b <IDTEntry::IDTEntry(bool)+0x43>
c000b997:	b2 03                	mov    dl,0x3
c000b999:	eb 02                	jmp    c000b99d <IDTEntry::IDTEntry(bool)+0x45>
c000b99b:	b2 00                	mov    dl,0x0
c000b99d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9a1:	83 e2 03             	and    edx,0x3
c000b9a4:	88 d1                	mov    cl,dl
c000b9a6:	c1 e1 05             	shl    ecx,0x5
c000b9a9:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b9ac:	83 e2 9f             	and    edx,0xffffff9f
c000b9af:	09 ca                	or     edx,ecx
c000b9b1:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b9b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9b8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b9bb:	83 ca 80             	or     edx,0xffffff80
c000b9be:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b9c1:	90                   	nop
c000b9c2:	83 c4 04             	add    esp,0x4
c000b9c5:	c3                   	ret    

c000b9c6 <IDTEntry::setOffset(unsigned int)>:
c000b9c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b9ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9ce:	66 89 02             	mov    WORD PTR [edx],ax
c000b9d1:	c1 e8 10             	shr    eax,0x10
c000b9d4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000b9d8:	c3                   	ret    
c000b9d9:	90                   	nop

c000b9da <IDT::IDT()>:
c000b9da:	90                   	nop
c000b9db:	c3                   	ret    

c000b9dc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000b9dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9e0:	83 c0 30             	add    eax,0x30
c000b9e3:	c3                   	ret    

c000b9e4 <IDT::addEntry(IDTEntry, int)>:
c000b9e4:	53                   	push   ebx
c000b9e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b9ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b9f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b9f5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000b9f8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000b9fc:	5b                   	pop    ebx
c000b9fd:	c3                   	ret    

c000b9fe <IDT::addEntry(int, void (*)(), bool)>:
c000b9fe:	53                   	push   ebx
c000b9ff:	83 ec 10             	sub    esp,0x10
c000ba02:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ba07:	50                   	push   eax
c000ba08:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ba0c:	53                   	push   ebx
c000ba0d:	e8 46 ff ff ff       	call   c000b958 <IDTEntry::IDTEntry(bool)>
c000ba12:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ba16:	53                   	push   ebx
c000ba17:	e8 aa ff ff ff       	call   c000b9c6 <IDTEntry::setOffset(unsigned int)>
c000ba1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ba20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ba24:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ba28:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba2c:	e8 b3 ff ff ff       	call   c000b9e4 <IDT::addEntry(IDTEntry, int)>
c000ba31:	83 c4 30             	add    esp,0x30
c000ba34:	5b                   	pop    ebx
c000ba35:	c3                   	ret    

c000ba36 <IDT::flush()>:
c000ba36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba3a:	66 c7 05 98 3d 02 c0 ff 07 	mov    WORD PTR ds:0xc0023d98,0x7ff
c000ba43:	a3 9a 3d 02 c0       	mov    ds:0xc0023d9a,eax
c000ba48:	0f 01 1d 98 3d 02 c0 	lidtd  ds:0xc0023d98
c000ba4f:	c3                   	ret    

c000ba50 <IDT::setup()>:
c000ba50:	57                   	push   edi
c000ba51:	56                   	push   esi
c000ba52:	53                   	push   ebx
c000ba53:	83 ec 10             	sub    esp,0x10
c000ba56:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ba5a:	6a 00                	push   0x0
c000ba5c:	68 53 03 00 c0       	push   0xc0000353
c000ba61:	6a 00                	push   0x0
c000ba63:	53                   	push   ebx
c000ba64:	e8 95 ff ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000ba69:	6a 00                	push   0x0
c000ba6b:	68 63 03 00 c0       	push   0xc0000363
c000ba70:	6a 01                	push   0x1
c000ba72:	53                   	push   ebx
c000ba73:	e8 86 ff ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000ba78:	83 c4 20             	add    esp,0x20
c000ba7b:	6a 00                	push   0x0
c000ba7d:	68 6d 03 00 c0       	push   0xc000036d
c000ba82:	6a 02                	push   0x2
c000ba84:	53                   	push   ebx
c000ba85:	e8 74 ff ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000ba8a:	6a 00                	push   0x0
c000ba8c:	68 77 03 00 c0       	push   0xc0000377
c000ba91:	6a 03                	push   0x3
c000ba93:	53                   	push   ebx
c000ba94:	e8 65 ff ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000ba99:	83 c4 20             	add    esp,0x20
c000ba9c:	6a 00                	push   0x0
c000ba9e:	68 81 03 00 c0       	push   0xc0000381
c000baa3:	6a 04                	push   0x4
c000baa5:	53                   	push   ebx
c000baa6:	e8 53 ff ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000baab:	6a 00                	push   0x0
c000baad:	68 8b 03 00 c0       	push   0xc000038b
c000bab2:	6a 05                	push   0x5
c000bab4:	53                   	push   ebx
c000bab5:	e8 44 ff ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000baba:	83 c4 20             	add    esp,0x20
c000babd:	6a 00                	push   0x0
c000babf:	68 95 03 00 c0       	push   0xc0000395
c000bac4:	6a 06                	push   0x6
c000bac6:	53                   	push   ebx
c000bac7:	e8 32 ff ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bacc:	6a 00                	push   0x0
c000bace:	68 9f 03 00 c0       	push   0xc000039f
c000bad3:	6a 07                	push   0x7
c000bad5:	53                   	push   ebx
c000bad6:	e8 23 ff ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000badb:	83 c4 20             	add    esp,0x20
c000bade:	6a 00                	push   0x0
c000bae0:	68 a9 03 00 c0       	push   0xc00003a9
c000bae5:	6a 08                	push   0x8
c000bae7:	53                   	push   ebx
c000bae8:	e8 11 ff ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000baed:	6a 00                	push   0x0
c000baef:	68 b1 03 00 c0       	push   0xc00003b1
c000baf4:	6a 09                	push   0x9
c000baf6:	53                   	push   ebx
c000baf7:	e8 02 ff ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bafc:	83 c4 20             	add    esp,0x20
c000baff:	6a 00                	push   0x0
c000bb01:	68 bb 03 00 c0       	push   0xc00003bb
c000bb06:	6a 0a                	push   0xa
c000bb08:	53                   	push   ebx
c000bb09:	e8 f0 fe ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bb0e:	6a 00                	push   0x0
c000bb10:	68 c3 03 00 c0       	push   0xc00003c3
c000bb15:	6a 0b                	push   0xb
c000bb17:	53                   	push   ebx
c000bb18:	e8 e1 fe ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bb1d:	83 c4 20             	add    esp,0x20
c000bb20:	6a 00                	push   0x0
c000bb22:	68 cb 03 00 c0       	push   0xc00003cb
c000bb27:	6a 0c                	push   0xc
c000bb29:	53                   	push   ebx
c000bb2a:	e8 cf fe ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bb2f:	6a 00                	push   0x0
c000bb31:	68 d3 03 00 c0       	push   0xc00003d3
c000bb36:	6a 0d                	push   0xd
c000bb38:	53                   	push   ebx
c000bb39:	e8 c0 fe ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bb3e:	83 c4 20             	add    esp,0x20
c000bb41:	6a 00                	push   0x0
c000bb43:	68 db 03 00 c0       	push   0xc00003db
c000bb48:	6a 0e                	push   0xe
c000bb4a:	53                   	push   ebx
c000bb4b:	e8 ae fe ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bb50:	6a 00                	push   0x0
c000bb52:	68 e3 03 00 c0       	push   0xc00003e3
c000bb57:	6a 0f                	push   0xf
c000bb59:	53                   	push   ebx
c000bb5a:	e8 9f fe ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bb5f:	83 c4 20             	add    esp,0x20
c000bb62:	6a 00                	push   0x0
c000bb64:	68 ed 03 00 c0       	push   0xc00003ed
c000bb69:	6a 10                	push   0x10
c000bb6b:	53                   	push   ebx
c000bb6c:	e8 8d fe ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bb71:	6a 00                	push   0x0
c000bb73:	68 f7 03 00 c0       	push   0xc00003f7
c000bb78:	6a 11                	push   0x11
c000bb7a:	53                   	push   ebx
c000bb7b:	e8 7e fe ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bb80:	83 c4 20             	add    esp,0x20
c000bb83:	6a 00                	push   0x0
c000bb85:	68 01 04 00 c0       	push   0xc0000401
c000bb8a:	6a 12                	push   0x12
c000bb8c:	53                   	push   ebx
c000bb8d:	e8 6c fe ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bb92:	6a 01                	push   0x1
c000bb94:	68 0b 04 00 c0       	push   0xc000040b
c000bb99:	6a 60                	push   0x60
c000bb9b:	53                   	push   ebx
c000bb9c:	e8 5d fe ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bba1:	83 c4 20             	add    esp,0x20
c000bba4:	6a 00                	push   0x0
c000bba6:	68 15 04 00 c0       	push   0xc0000415
c000bbab:	6a 20                	push   0x20
c000bbad:	53                   	push   ebx
c000bbae:	e8 4b fe ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bbb3:	6a 00                	push   0x0
c000bbb5:	68 1f 04 00 c0       	push   0xc000041f
c000bbba:	6a 21                	push   0x21
c000bbbc:	53                   	push   ebx
c000bbbd:	e8 3c fe ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bbc2:	83 c4 20             	add    esp,0x20
c000bbc5:	6a 00                	push   0x0
c000bbc7:	68 29 04 00 c0       	push   0xc0000429
c000bbcc:	6a 22                	push   0x22
c000bbce:	53                   	push   ebx
c000bbcf:	e8 2a fe ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bbd4:	6a 00                	push   0x0
c000bbd6:	68 33 04 00 c0       	push   0xc0000433
c000bbdb:	6a 23                	push   0x23
c000bbdd:	53                   	push   ebx
c000bbde:	e8 1b fe ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bbe3:	83 c4 20             	add    esp,0x20
c000bbe6:	6a 00                	push   0x0
c000bbe8:	68 3d 04 00 c0       	push   0xc000043d
c000bbed:	6a 24                	push   0x24
c000bbef:	53                   	push   ebx
c000bbf0:	e8 09 fe ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bbf5:	6a 00                	push   0x0
c000bbf7:	68 47 04 00 c0       	push   0xc0000447
c000bbfc:	6a 25                	push   0x25
c000bbfe:	53                   	push   ebx
c000bbff:	e8 fa fd ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bc04:	83 c4 20             	add    esp,0x20
c000bc07:	6a 00                	push   0x0
c000bc09:	68 51 04 00 c0       	push   0xc0000451
c000bc0e:	6a 26                	push   0x26
c000bc10:	53                   	push   ebx
c000bc11:	e8 e8 fd ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bc16:	6a 00                	push   0x0
c000bc18:	68 5b 04 00 c0       	push   0xc000045b
c000bc1d:	6a 27                	push   0x27
c000bc1f:	53                   	push   ebx
c000bc20:	e8 d9 fd ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bc25:	83 c4 20             	add    esp,0x20
c000bc28:	6a 00                	push   0x0
c000bc2a:	68 65 04 00 c0       	push   0xc0000465
c000bc2f:	6a 28                	push   0x28
c000bc31:	53                   	push   ebx
c000bc32:	e8 c7 fd ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bc37:	6a 00                	push   0x0
c000bc39:	68 6f 04 00 c0       	push   0xc000046f
c000bc3e:	6a 29                	push   0x29
c000bc40:	53                   	push   ebx
c000bc41:	e8 b8 fd ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bc46:	83 c4 20             	add    esp,0x20
c000bc49:	6a 00                	push   0x0
c000bc4b:	68 79 04 00 c0       	push   0xc0000479
c000bc50:	6a 2a                	push   0x2a
c000bc52:	53                   	push   ebx
c000bc53:	e8 a6 fd ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bc58:	6a 00                	push   0x0
c000bc5a:	68 83 04 00 c0       	push   0xc0000483
c000bc5f:	6a 2b                	push   0x2b
c000bc61:	53                   	push   ebx
c000bc62:	e8 97 fd ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bc67:	83 c4 20             	add    esp,0x20
c000bc6a:	6a 00                	push   0x0
c000bc6c:	68 8d 04 00 c0       	push   0xc000048d
c000bc71:	6a 2c                	push   0x2c
c000bc73:	53                   	push   ebx
c000bc74:	e8 85 fd ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bc79:	6a 00                	push   0x0
c000bc7b:	68 97 04 00 c0       	push   0xc0000497
c000bc80:	6a 2d                	push   0x2d
c000bc82:	53                   	push   ebx
c000bc83:	e8 76 fd ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bc88:	83 c4 20             	add    esp,0x20
c000bc8b:	6a 00                	push   0x0
c000bc8d:	68 a1 04 00 c0       	push   0xc00004a1
c000bc92:	6a 2e                	push   0x2e
c000bc94:	53                   	push   ebx
c000bc95:	e8 64 fd ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bc9a:	6a 00                	push   0x0
c000bc9c:	68 ab 04 00 c0       	push   0xc00004ab
c000bca1:	6a 2f                	push   0x2f
c000bca3:	53                   	push   ebx
c000bca4:	e8 55 fd ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bca9:	83 c4 20             	add    esp,0x20
c000bcac:	6a 00                	push   0x0
c000bcae:	68 b5 04 00 c0       	push   0xc00004b5
c000bcb3:	6a 30                	push   0x30
c000bcb5:	53                   	push   ebx
c000bcb6:	e8 43 fd ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bcbb:	6a 00                	push   0x0
c000bcbd:	68 bf 04 00 c0       	push   0xc00004bf
c000bcc2:	6a 31                	push   0x31
c000bcc4:	53                   	push   ebx
c000bcc5:	e8 34 fd ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bcca:	83 c4 20             	add    esp,0x20
c000bccd:	6a 00                	push   0x0
c000bccf:	68 c9 04 00 c0       	push   0xc00004c9
c000bcd4:	6a 32                	push   0x32
c000bcd6:	53                   	push   ebx
c000bcd7:	e8 22 fd ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bcdc:	6a 00                	push   0x0
c000bcde:	68 d3 04 00 c0       	push   0xc00004d3
c000bce3:	6a 33                	push   0x33
c000bce5:	53                   	push   ebx
c000bce6:	e8 13 fd ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bceb:	83 c4 20             	add    esp,0x20
c000bcee:	6a 00                	push   0x0
c000bcf0:	68 dd 04 00 c0       	push   0xc00004dd
c000bcf5:	6a 34                	push   0x34
c000bcf7:	53                   	push   ebx
c000bcf8:	e8 01 fd ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bcfd:	6a 00                	push   0x0
c000bcff:	68 e7 04 00 c0       	push   0xc00004e7
c000bd04:	6a 35                	push   0x35
c000bd06:	53                   	push   ebx
c000bd07:	e8 f2 fc ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bd0c:	83 c4 20             	add    esp,0x20
c000bd0f:	6a 00                	push   0x0
c000bd11:	68 f1 04 00 c0       	push   0xc00004f1
c000bd16:	6a 36                	push   0x36
c000bd18:	53                   	push   ebx
c000bd19:	e8 e0 fc ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bd1e:	6a 00                	push   0x0
c000bd20:	68 fb 04 00 c0       	push   0xc00004fb
c000bd25:	6a 37                	push   0x37
c000bd27:	53                   	push   ebx
c000bd28:	e8 d1 fc ff ff       	call   c000b9fe <IDT::addEntry(int, void (*)(), bool)>
c000bd2d:	83 c4 20             	add    esp,0x20
c000bd30:	e8 a8 25 00 00       	call   c000e2dd <Virt::getAKernelVAS()>
c000bd35:	52                   	push   edx
c000bd36:	6a 03                	push   0x3
c000bd38:	6a 02                	push   0x2
c000bd3a:	50                   	push   eax
c000bd3b:	e8 e0 2b 00 00       	call   c000e920 <VAS::allocatePages(int, int)>
c000bd40:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000bd47:	89 c6                	mov    esi,eax
c000bd49:	e8 e2 32 00 00       	call   c000f030 <operator new(unsigned long)>
c000bd4e:	81 c6 00 20 00 00    	add    esi,0x2000
c000bd54:	89 04 24             	mov    DWORD PTR [esp],eax
c000bd57:	89 c7                	mov    edi,eax
c000bd59:	e8 c0 1c 00 00       	call   c000da1e <TSS::TSS()>
c000bd5e:	83 c4 0c             	add    esp,0xc
c000bd61:	68 a9 03 00 c0       	push   0xc00003a9
c000bd66:	56                   	push   esi
c000bd67:	57                   	push   edi
c000bd68:	e8 f1 1c 00 00       	call   c000da5e <TSS::setup(unsigned long, unsigned long)>
c000bd6d:	59                   	pop    ecx
c000bd6e:	89 c6                	mov    esi,eax
c000bd70:	5f                   	pop    edi
c000bd71:	6a 00                	push   0x0
c000bd73:	8d 44 24 14          	lea    eax,[esp+0x14]
c000bd77:	50                   	push   eax
c000bd78:	e8 db fb ff ff       	call   c000b958 <IDTEntry::IDTEntry(bool)>
c000bd7d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd81:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000bd86:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000bd8d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000bd93:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd97:	80 ce 05             	or     dh,0x5
c000bd9a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000bd9d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bda1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bda5:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000bda8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bdab:	e8 86 fc ff ff       	call   c000ba36 <IDT::flush()>
c000bdb0:	83 c4 20             	add    esp,0x20
c000bdb3:	5b                   	pop    ebx
c000bdb4:	5e                   	pop    esi
c000bdb5:	5f                   	pop    edi
c000bdb6:	c3                   	ret    

c000bdb7 <sbrk>:
c000bdb7:	55                   	push   ebp
c000bdb8:	57                   	push   edi
c000bdb9:	56                   	push   esi
c000bdba:	53                   	push   ebx
c000bdbb:	83 ec 1c             	sub    esp,0x1c
c000bdbe:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000bdc2:	85 db                	test   ebx,ebx
c000bdc4:	74 37                	je     c000bdfd <sbrk+0x46>
c000bdc6:	78 3f                	js     c000be07 <sbrk+0x50>
c000bdc8:	e8 e1 82 00 00       	call   c00140ae <thisCPU()>
c000bdcd:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000bdd3:	83 e0 01             	and    eax,0x1
c000bdd6:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000bdda:	a1 ac 31 02 c0       	mov    eax,ds:0xc00231ac
c000bddf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bde3:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000bde9:	89 d8                	mov    eax,ebx
c000bdeb:	78 35                	js     c000be22 <sbrk+0x6b>
c000bded:	c1 f8 0c             	sar    eax,0xc
c000bdf0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bdf4:	89 c7                	mov    edi,eax
c000bdf6:	be 00 00 00 00       	mov    esi,0x0
c000bdfb:	eb 3c                	jmp    c000be39 <sbrk+0x82>
c000bdfd:	a1 ac 31 02 c0       	mov    eax,ds:0xc00231ac
c000be02:	e9 ad 00 00 00       	jmp    c000beb4 <sbrk+0xfd>
c000be07:	83 ec 08             	sub    esp,0x8
c000be0a:	53                   	push   ebx
c000be0b:	68 04 09 02 c0       	push   0xc0020904
c000be10:	e8 0a 33 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000be15:	83 c4 10             	add    esp,0x10
c000be18:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000be1d:	e9 92 00 00 00       	jmp    c000beb4 <sbrk+0xfd>
c000be22:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000be28:	eb c3                	jmp    c000bded <sbrk+0x36>
c000be2a:	81 05 ac 31 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00231ac,0x1000
c000be34:	46                   	inc    esi
c000be35:	39 f7                	cmp    edi,esi
c000be37:	74 34                	je     c000be6d <sbrk+0xb6>
c000be39:	e8 9f 24 00 00       	call   c000e2dd <Virt::getAKernelVAS()>
c000be3e:	89 c3                	mov    ebx,eax
c000be40:	8b 2d ac 31 02 c0    	mov    ebp,DWORD PTR ds:0xc00231ac
c000be46:	e8 c9 06 00 00       	call   c000c514 <Phys::allocatePage()>
c000be4b:	68 01 04 00 00       	push   0x401
c000be50:	55                   	push   ebp
c000be51:	50                   	push   eax
c000be52:	53                   	push   ebx
c000be53:	e8 c8 29 00 00       	call   c000e820 <VAS::mapPage(unsigned long, unsigned long, int)>
c000be58:	83 c4 10             	add    esp,0x10
c000be5b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000be60:	74 c8                	je     c000be2a <sbrk+0x73>
c000be62:	8b 1d ac 31 02 c0    	mov    ebx,DWORD PTR ds:0xc00231ac
c000be68:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000be6b:	eb bd                	jmp    c000be2a <sbrk+0x73>
c000be6d:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000be72:	74 48                	je     c000bebc <sbrk+0x105>
c000be74:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000be78:	89 d3                	mov    ebx,edx
c000be7a:	c1 eb 0a             	shr    ebx,0xa
c000be7d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000be83:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000be89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be8d:	c1 e0 0c             	shl    eax,0xc
c000be90:	01 d0                	add    eax,edx
c000be92:	c1 e8 0a             	shr    eax,0xa
c000be95:	25 00 f0 ff ff       	and    eax,0xfffff000
c000be9a:	2d 00 00 40 00       	sub    eax,0x400000
c000be9f:	39 c3                	cmp    ebx,eax
c000bea1:	77 0d                	ja     c000beb0 <sbrk+0xf9>
c000bea3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bea6:	81 c3 00 10 00 00    	add    ebx,0x1000
c000beac:	39 d8                	cmp    eax,ebx
c000beae:	73 f3                	jae    c000bea3 <sbrk+0xec>
c000beb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000beb4:	83 c4 1c             	add    esp,0x1c
c000beb7:	5b                   	pop    ebx
c000beb8:	5e                   	pop    esi
c000beb9:	5f                   	pop    edi
c000beba:	5d                   	pop    ebp
c000bebb:	c3                   	ret    
c000bebc:	e8 44 2f 01 00       	call   c001ee05 <CPU::readCR3()>
c000bec1:	83 ec 0c             	sub    esp,0xc
c000bec4:	50                   	push   eax
c000bec5:	e8 4d 2f 01 00       	call   c001ee17 <CPU::writeCR3(unsigned long)>
c000beca:	83 c4 10             	add    esp,0x10
c000becd:	eb e1                	jmp    c000beb0 <sbrk+0xf9>

c000becf <mmap>:
c000becf:	83 ec 18             	sub    esp,0x18
c000bed2:	68 34 09 02 c0       	push   0xc0020934
c000bed7:	e8 42 93 00 00       	call   c001521e <Krnl::panic(char const*)>
c000bedc:	b8 00 00 00 00       	mov    eax,0x0
c000bee1:	83 c4 1c             	add    esp,0x1c
c000bee4:	c3                   	ret    

c000bee5 <munmap>:
c000bee5:	83 ec 18             	sub    esp,0x18
c000bee8:	68 39 09 02 c0       	push   0xc0020939
c000beed:	e8 2c 93 00 00       	call   c001521e <Krnl::panic(char const*)>
c000bef2:	b8 00 00 00 00       	mov    eax,0x0
c000bef7:	83 c4 1c             	add    esp,0x1c
c000befa:	c3                   	ret    

c000befb <liballoc_lock()>:
c000befb:	83 ec 0c             	sub    esp,0xc
c000befe:	e8 89 c2 00 00       	call   c001818c <lockScheduler()>
c000bf03:	b8 00 00 00 00       	mov    eax,0x0
c000bf08:	83 c4 0c             	add    esp,0xc
c000bf0b:	c3                   	ret    

c000bf0c <liballoc_unlock()>:
c000bf0c:	83 ec 0c             	sub    esp,0xc
c000bf0f:	e8 7a c2 00 00       	call   c001818e <unlockScheduler()>
c000bf14:	b8 00 00 00 00       	mov    eax,0x0
c000bf19:	83 c4 0c             	add    esp,0xc
c000bf1c:	c3                   	ret    

c000bf1d <liballoc_alloc(int)>:
c000bf1d:	83 ec 0c             	sub    esp,0xc
c000bf20:	e8 b8 23 00 00       	call   c000e2dd <Virt::getAKernelVAS()>
c000bf25:	83 ec 04             	sub    esp,0x4
c000bf28:	6a 01                	push   0x1
c000bf2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bf2e:	50                   	push   eax
c000bf2f:	e8 ec 29 00 00       	call   c000e920 <VAS::allocatePages(int, int)>
c000bf34:	83 c4 1c             	add    esp,0x1c
c000bf37:	c3                   	ret    

c000bf38 <liballoc_free(void*, int)>:
c000bf38:	83 ec 0c             	sub    esp,0xc
c000bf3b:	e8 9d 23 00 00       	call   c000e2dd <Virt::getAKernelVAS()>
c000bf40:	83 ec 08             	sub    esp,0x8
c000bf43:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bf47:	50                   	push   eax
c000bf48:	e8 7d 26 00 00       	call   c000e5ca <VAS::freeAllocatedPages(unsigned long)>
c000bf4d:	b8 00 00 00 00       	mov    eax,0x0
c000bf52:	83 c4 1c             	add    esp,0x1c
c000bf55:	c3                   	ret    

c000bf56 <realloc>:
c000bf56:	83 ec 14             	sub    esp,0x14
c000bf59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf61:	e8 1b 54 ff ff       	call   c0001381 <dlrealloc>
c000bf66:	83 c4 1c             	add    esp,0x1c
c000bf69:	c3                   	ret    

c000bf6a <malloc>:
c000bf6a:	83 ec 18             	sub    esp,0x18
c000bf6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf71:	e8 ce 4e ff ff       	call   c0000e44 <dlmalloc>
c000bf76:	83 c4 1c             	add    esp,0x1c
c000bf79:	c3                   	ret    

c000bf7a <free>:
c000bf7a:	83 ec 18             	sub    esp,0x18
c000bf7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf81:	e8 63 4b ff ff       	call   c0000ae9 <dlfree>
c000bf86:	83 c4 1c             	add    esp,0x1c
c000bf89:	c3                   	ret    

c000bf8a <rfree>:
c000bf8a:	83 ec 18             	sub    esp,0x18
c000bf8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf91:	e8 e4 ff ff ff       	call   c000bf7a <free>
c000bf96:	83 c4 1c             	add    esp,0x1c
c000bf99:	c3                   	ret    

c000bf9a <calloc>:
c000bf9a:	56                   	push   esi
c000bf9b:	53                   	push   ebx
c000bf9c:	83 ec 10             	sub    esp,0x10
c000bf9f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bfa3:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000bfa8:	53                   	push   ebx
c000bfa9:	e8 bc ff ff ff       	call   c000bf6a <malloc>
c000bfae:	89 c6                	mov    esi,eax
c000bfb0:	83 c4 0c             	add    esp,0xc
c000bfb3:	53                   	push   ebx
c000bfb4:	6a 00                	push   0x0
c000bfb6:	50                   	push   eax
c000bfb7:	e8 4c 46 ff ff       	call   c0000608 <memset>
c000bfbc:	89 f0                	mov    eax,esi
c000bfbe:	83 c4 14             	add    esp,0x14
c000bfc1:	5b                   	pop    ebx
c000bfc2:	5e                   	pop    esi
c000bfc3:	c3                   	ret    

c000bfc4 <hwTextMode_loadInData(VgaText*)>:
c000bfc4:	57                   	push   edi
c000bfc5:	56                   	push   esi
c000bfc6:	53                   	push   ebx
c000bfc7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000bfcb:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000bfd1:	85 c0                	test   eax,eax
c000bfd3:	7e 30                	jle    c000c005 <hwTextMode_loadInData(VgaText*)+0x41>
c000bfd5:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000bfd8:	31 f6                	xor    esi,esi
c000bfda:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000bfdd:	31 c0                	xor    eax,eax
c000bfdf:	c1 e1 05             	shl    ecx,0x5
c000bfe2:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000bfe8:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000bfec:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000bff0:	40                   	inc    eax
c000bff1:	83 f8 50             	cmp    eax,0x50
c000bff4:	75 f2                	jne    c000bfe8 <hwTextMode_loadInData(VgaText*)+0x24>
c000bff6:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000bffc:	46                   	inc    esi
c000bffd:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000c003:	7f d5                	jg     c000bfda <hwTextMode_loadInData(VgaText*)+0x16>
c000c005:	5b                   	pop    ebx
c000c006:	5e                   	pop    esi
c000c007:	5f                   	pop    edi
c000c008:	c3                   	ret    

c000c009 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000c009:	56                   	push   esi
c000c00a:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000c00f:	53                   	push   ebx
c000c010:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c014:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c018:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000c01e:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000c024:	c1 e0 04             	shl    eax,0x4
c000c027:	83 e6 0f             	and    esi,0xf
c000c02a:	0f b6 c0             	movzx  eax,al
c000c02d:	41                   	inc    ecx
c000c02e:	09 f0                	or     eax,esi
c000c030:	83 c2 02             	add    edx,0x2
c000c033:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000c037:	c1 e0 08             	shl    eax,0x8
c000c03a:	09 f0                	or     eax,esi
c000c03c:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000c040:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000c046:	75 d0                	jne    c000c018 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000c048:	5b                   	pop    ebx
c000c049:	5e                   	pop    esi
c000c04a:	c3                   	ret    

c000c04b <hwTextMode_showCursor(VgaText*, bool)>:
c000c04b:	56                   	push   esi
c000c04c:	53                   	push   ebx
c000c04d:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000c052:	74 38                	je     c000c08c <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000c054:	bb d4 03 00 00       	mov    ebx,0x3d4
c000c059:	b0 0a                	mov    al,0xa
c000c05b:	89 da                	mov    edx,ebx
c000c05d:	ee                   	out    dx,al
c000c05e:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000c063:	89 ca                	mov    edx,ecx
c000c065:	ec                   	in     al,dx
c000c066:	b2 0f                	mov    dl,0xf
c000c068:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c06c:	83 e0 c0             	and    eax,0xffffffc0
c000c06f:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000c075:	09 d0                	or     eax,edx
c000c077:	89 ca                	mov    edx,ecx
c000c079:	ee                   	out    dx,al
c000c07a:	b0 0b                	mov    al,0xb
c000c07c:	89 da                	mov    edx,ebx
c000c07e:	ee                   	out    dx,al
c000c07f:	89 ca                	mov    edx,ecx
c000c081:	ec                   	in     al,dx
c000c082:	83 e0 e0             	and    eax,0xffffffe0
c000c085:	83 c8 0f             	or     eax,0xf
c000c088:	ee                   	out    dx,al
c000c089:	5b                   	pop    ebx
c000c08a:	5e                   	pop    esi
c000c08b:	c3                   	ret    
c000c08c:	b0 0a                	mov    al,0xa
c000c08e:	ba d4 03 00 00       	mov    edx,0x3d4
c000c093:	ee                   	out    dx,al
c000c094:	b0 20                	mov    al,0x20
c000c096:	ba d5 03 00 00       	mov    edx,0x3d5
c000c09b:	ee                   	out    dx,al
c000c09c:	5b                   	pop    ebx
c000c09d:	5e                   	pop    esi
c000c09e:	c3                   	ret    

c000c09f <hwTextMode_update(VgaText*)>:
c000c09f:	c3                   	ret    

c000c0a0 <hwTextMode_updateCursor(VgaText*)>:
c000c0a0:	56                   	push   esi
c000c0a1:	b9 19 00 00 00       	mov    ecx,0x19
c000c0a6:	53                   	push   ebx
c000c0a7:	be d4 03 00 00       	mov    esi,0x3d4
c000c0ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c0b0:	89 f2                	mov    edx,esi
c000c0b2:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000c0b8:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000c0be:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000c0c1:	c1 e1 04             	shl    ecx,0x4
c000c0c4:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000c0ca:	b0 0f                	mov    al,0xf
c000c0cc:	ee                   	out    dx,al
c000c0cd:	bb d5 03 00 00       	mov    ebx,0x3d5
c000c0d2:	88 c8                	mov    al,cl
c000c0d4:	89 da                	mov    edx,ebx
c000c0d6:	ee                   	out    dx,al
c000c0d7:	b0 0e                	mov    al,0xe
c000c0d9:	89 f2                	mov    edx,esi
c000c0db:	ee                   	out    dx,al
c000c0dc:	89 c8                	mov    eax,ecx
c000c0de:	89 da                	mov    edx,ebx
c000c0e0:	66 c1 e8 08          	shr    ax,0x8
c000c0e4:	ee                   	out    dx,al
c000c0e5:	5b                   	pop    ebx
c000c0e6:	5e                   	pop    esi
c000c0e7:	c3                   	ret    

c000c0e8 <hwTextMode_disableBlink(VgaText*, bool)>:
c000c0e8:	ba da 03 00 00       	mov    edx,0x3da
c000c0ed:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000c0f2:	75 18                	jne    c000c10c <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000c0f4:	ec                   	in     al,dx
c000c0f5:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c0fa:	b0 30                	mov    al,0x30
c000c0fc:	89 ca                	mov    edx,ecx
c000c0fe:	ee                   	out    dx,al
c000c0ff:	ba c1 03 00 00       	mov    edx,0x3c1
c000c104:	ec                   	in     al,dx
c000c105:	83 c8 08             	or     eax,0x8
c000c108:	89 ca                	mov    edx,ecx
c000c10a:	ee                   	out    dx,al
c000c10b:	c3                   	ret    
c000c10c:	ec                   	in     al,dx
c000c10d:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c112:	b0 30                	mov    al,0x30
c000c114:	89 ca                	mov    edx,ecx
c000c116:	ee                   	out    dx,al
c000c117:	ba c1 03 00 00       	mov    edx,0x3c1
c000c11c:	ec                   	in     al,dx
c000c11d:	83 e0 f7             	and    eax,0xfffffff7
c000c120:	89 ca                	mov    edx,ecx
c000c122:	ee                   	out    dx,al
c000c123:	c3                   	ret    

c000c124 <hwTextMode_scrollScreen(VgaText*)>:
c000c124:	55                   	push   ebp
c000c125:	bd 02 00 00 00       	mov    ebp,0x2
c000c12a:	57                   	push   edi
c000c12b:	56                   	push   esi
c000c12c:	53                   	push   ebx
c000c12d:	83 ec 1c             	sub    esp,0x1c
c000c130:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000c138:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c13c:	31 c0                	xor    eax,eax
c000c13e:	eb 0b                	jmp    c000c14b <hwTextMode_scrollScreen(VgaText*)+0x27>
c000c140:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c146:	74 57                	je     c000c19f <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000c148:	43                   	inc    ebx
c000c149:	89 f0                	mov    eax,esi
c000c14b:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000c151:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000c157:	88 13                	mov    BYTE PTR [ebx],dl
c000c159:	8d 70 01             	lea    esi,[eax+0x1]
c000c15c:	83 fd 18             	cmp    ebp,0x18
c000c15f:	75 df                	jne    c000c140 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000c161:	a8 01                	test   al,0x1
c000c163:	75 13                	jne    c000c178 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000c165:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000c168:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c16e:	75 d8                	jne    c000c148 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000c170:	83 c4 1c             	add    esp,0x1c
c000c173:	5b                   	pop    ebx
c000c174:	5e                   	pop    esi
c000c175:	5f                   	pop    edi
c000c176:	5d                   	pop    ebp
c000c177:	c3                   	ret    
c000c178:	83 ec 08             	sub    esp,0x8
c000c17b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c17f:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000c186:	50                   	push   eax
c000c187:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c18b:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000c192:	50                   	push   eax
c000c193:	e8 66 0b 00 00       	call   c000ccfe <VgaText::combineColours(unsigned char, unsigned char)>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	88 07                	mov    BYTE PTR [edi],al
c000c19d:	eb c9                	jmp    c000c168 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000c19f:	45                   	inc    ebp
c000c1a0:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000c1a8:	eb 8e                	jmp    c000c138 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000c1aa <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000c1aa:	56                   	push   esi
c000c1ab:	53                   	push   ebx
c000c1ac:	83 ec 0c             	sub    esp,0xc
c000c1af:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c1b3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000c1b7:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000c1bc:	50                   	push   eax
c000c1bd:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000c1c2:	50                   	push   eax
c000c1c3:	e8 36 0b 00 00       	call   c000ccfe <VgaText::combineColours(unsigned char, unsigned char)>
c000c1c8:	5a                   	pop    edx
c000c1c9:	0f b6 c0             	movzx  eax,al
c000c1cc:	59                   	pop    ecx
c000c1cd:	50                   	push   eax
c000c1ce:	89 f0                	mov    eax,esi
c000c1d0:	0f be f0             	movsx  esi,al
c000c1d3:	56                   	push   esi
c000c1d4:	e8 cb 0b 00 00       	call   c000cda4 <VgaText::combineCharAndColour(char, unsigned char)>
c000c1d9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c1dd:	ba 19 00 00 00       	mov    edx,0x19
c000c1e2:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000c1e8:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c1eb:	8d 14 92             	lea    edx,[edx+edx*4]
c000c1ee:	c1 e1 04             	shl    ecx,0x4
c000c1f1:	c1 e2 04             	shl    edx,0x4
c000c1f4:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000c1f8:	01 ca                	add    edx,ecx
c000c1fa:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000c202:	83 c4 14             	add    esp,0x14
c000c205:	5b                   	pop    ebx
c000c206:	5e                   	pop    esi
c000c207:	c3                   	ret    

c000c208 <setupTextMode()>:
c000c208:	c7 05 38 3e 02 c0 e8 c0 00 c0 	mov    DWORD PTR ds:0xc0023e38,0xc000c0e8
c000c212:	c7 05 24 3e 02 c0 c4 bf 00 c0 	mov    DWORD PTR ds:0xc0023e24,0xc000bfc4
c000c21c:	c7 05 20 3e 02 c0 09 c0 00 c0 	mov    DWORD PTR ds:0xc0023e20,0xc000c009
c000c226:	c7 05 2c 3e 02 c0 24 c1 00 c0 	mov    DWORD PTR ds:0xc0023e2c,0xc000c124
c000c230:	c7 05 34 3e 02 c0 4b c0 00 c0 	mov    DWORD PTR ds:0xc0023e34,0xc000c04b
c000c23a:	c7 05 28 3e 02 c0 9f c0 00 c0 	mov    DWORD PTR ds:0xc0023e28,0xc000c09f
c000c244:	c7 05 30 3e 02 c0 a0 c0 00 c0 	mov    DWORD PTR ds:0xc0023e30,0xc000c0a0
c000c24e:	c7 05 3c 3e 02 c0 aa c1 00 c0 	mov    DWORD PTR ds:0xc0023e3c,0xc000c1aa
c000c258:	c3                   	ret    

c000c259 <kernel_main>:
c000c259:	57                   	push   edi
c000c25a:	bf f9 03 00 00       	mov    edi,0x3f9
c000c25f:	56                   	push   esi
c000c260:	31 f6                	xor    esi,esi
c000c262:	53                   	push   ebx
c000c263:	83 ec 10             	sub    esp,0x10
c000c266:	e8 ed 08 00 00       	call   c000cb58 <installVgaTextImplementation()>
c000c26b:	e8 98 ff ff ff       	call   c000c208 <setupTextMode()>
c000c270:	89 f0                	mov    eax,esi
c000c272:	89 fa                	mov    edx,edi
c000c274:	ee                   	out    dx,al
c000c275:	bb fb 03 00 00       	mov    ebx,0x3fb
c000c27a:	b0 80                	mov    al,0x80
c000c27c:	89 da                	mov    edx,ebx
c000c27e:	ee                   	out    dx,al
c000c27f:	b1 03                	mov    cl,0x3
c000c281:	ba f8 03 00 00       	mov    edx,0x3f8
c000c286:	88 c8                	mov    al,cl
c000c288:	ee                   	out    dx,al
c000c289:	89 f0                	mov    eax,esi
c000c28b:	89 fa                	mov    edx,edi
c000c28d:	ee                   	out    dx,al
c000c28e:	88 c8                	mov    al,cl
c000c290:	89 da                	mov    edx,ebx
c000c292:	ee                   	out    dx,al
c000c293:	b0 c7                	mov    al,0xc7
c000c295:	ba fa 03 00 00       	mov    edx,0x3fa
c000c29a:	ee                   	out    dx,al
c000c29b:	b0 0b                	mov    al,0xb
c000c29d:	ba fc 03 00 00       	mov    edx,0x3fc
c000c2a2:	ee                   	out    dx,al
c000c2a3:	a1 24 05 00 00       	mov    eax,ds:0x524
c000c2a8:	83 ec 0c             	sub    esp,0xc
c000c2ab:	05 ff 0f 00 00       	add    eax,0xfff
c000c2b0:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c2b5:	50                   	push   eax
c000c2b6:	e8 59 03 00 00       	call   c000c614 <Phys::physicalMemorySetup(unsigned int)>
c000c2bb:	e8 9e 1f 00 00       	call   c000e25e <Virt::virtualMemorySetup()>
c000c2c0:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000c2c6:	83 c4 10             	add    esp,0x10
c000c2c9:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000c2cf:	75 0e                	jne    c000c2df <kernel_main+0x86>
c000c2d1:	89 d8                	mov    eax,ebx
c000c2d3:	25 48 03 00 00       	and    eax,0x348
c000c2d8:	3d 00 03 00 00       	cmp    eax,0x300
c000c2dd:	74 10                	je     c000c2ef <kernel_main+0x96>
c000c2df:	83 ec 0c             	sub    esp,0xc
c000c2e2:	68 bb 1e 02 c0       	push   0xc0021ebb
c000c2e7:	e8 32 8f 00 00       	call   c001521e <Krnl::panic(char const*)>
c000c2ec:	83 c4 10             	add    esp,0x10
c000c2ef:	83 ec 0c             	sub    esp,0xc
c000c2f2:	89 1d a0 3d 02 c0    	mov    DWORD PTR ds:0xc0023da0,ebx
c000c2f8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000c2fc:	53                   	push   ebx
c000c2fd:	e8 06 21 00 00       	call   c000e408 <VAS::VAS()>
c000c302:	89 1d e4 3e 02 c0    	mov    DWORD PTR ds:0xc0023ee4,ebx
c000c308:	e8 13 3d ff ff       	call   c0000020 <callGlobalConstructors>
c000c30d:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000c314:	e8 17 2d 00 00       	call   c000f030 <operator new(unsigned long)>
c000c319:	89 04 24             	mov    DWORD PTR [esp],eax
c000c31c:	89 c6                	mov    esi,eax
c000c31e:	e8 7f ea ff ff       	call   c000ada2 <Computer::Computer()>
c000c323:	6a 00                	push   0x0
c000c325:	89 35 88 3d 02 c0    	mov    DWORD PTR ds:0xc0023d88,esi
c000c32b:	6a 00                	push   0x0
c000c32d:	6a 00                	push   0x0
c000c32f:	56                   	push   esi
c000c330:	e8 77 f2 ff ff       	call   c000b5ac <Computer::open(int, int, void*)>
c000c335:	83 c4 14             	add    esp,0x14
c000c338:	53                   	push   ebx
c000c339:	e8 76 23 00 00       	call   c000e6b4 <VAS::~VAS()>
c000c33e:	c7 04 24 40 09 02 c0 	mov    DWORD PTR [esp],0xc0020940
c000c345:	e8 d4 8e 00 00       	call   c001521e <Krnl::panic(char const*)>
c000c34a:	83 c4 20             	add    esp,0x20
c000c34d:	5b                   	pop    ebx
c000c34e:	5e                   	pop    esi
c000c34f:	5f                   	pop    edi
c000c350:	c3                   	ret    

c000c351 <Phys::allocateDMA(unsigned long)>:
c000c351:	55                   	push   ebp
c000c352:	31 d2                	xor    edx,edx
c000c354:	57                   	push   edi
c000c355:	31 ed                	xor    ebp,ebp
c000c357:	56                   	push   esi
c000c358:	31 c9                	xor    ecx,ecx
c000c35a:	53                   	push   ebx
c000c35b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c35f:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000c365:	31 c0                	xor    eax,eax
c000c367:	c1 ee 0c             	shr    esi,0xc
c000c36a:	eb 17                	jmp    c000c383 <Phys::allocateDMA(unsigned long)+0x32>
c000c36c:	85 c9                	test   ecx,ecx
c000c36e:	75 04                	jne    c000c374 <Phys::allocateDMA(unsigned long)+0x23>
c000c370:	89 d5                	mov    ebp,edx
c000c372:	89 d0                	mov    eax,edx
c000c374:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c377:	39 de                	cmp    esi,ebx
c000c379:	74 20                	je     c000c39b <Phys::allocateDMA(unsigned long)+0x4a>
c000c37b:	42                   	inc    edx
c000c37c:	89 d9                	mov    ecx,ebx
c000c37e:	83 fa 2f             	cmp    edx,0x2f
c000c381:	7f 11                	jg     c000c394 <Phys::allocateDMA(unsigned long)+0x43>
c000c383:	80 ba e0 3d 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdc220],0x0
c000c38a:	74 e0                	je     c000c36c <Phys::allocateDMA(unsigned long)+0x1b>
c000c38c:	31 c9                	xor    ecx,ecx
c000c38e:	42                   	inc    edx
c000c38f:	83 fa 2f             	cmp    edx,0x2f
c000c392:	7e ef                	jle    c000c383 <Phys::allocateDMA(unsigned long)+0x32>
c000c394:	5b                   	pop    ebx
c000c395:	31 c0                	xor    eax,eax
c000c397:	5e                   	pop    esi
c000c398:	5f                   	pop    edi
c000c399:	5d                   	pop    ebp
c000c39a:	c3                   	ret    
c000c39b:	8d 14 30             	lea    edx,[eax+esi*1]
c000c39e:	89 d7                	mov    edi,edx
c000c3a0:	4f                   	dec    edi
c000c3a1:	79 03                	jns    c000c3a6 <Phys::allocateDMA(unsigned long)+0x55>
c000c3a3:	8d 7a 0e             	lea    edi,[edx+0xe]
c000c3a6:	c1 ff 04             	sar    edi,0x4
c000c3a9:	89 c2                	mov    edx,eax
c000c3ab:	c1 fa 04             	sar    edx,0x4
c000c3ae:	39 fa                	cmp    edx,edi
c000c3b0:	75 2f                	jne    c000c3e1 <Phys::allocateDMA(unsigned long)+0x90>
c000c3b2:	85 db                	test   ebx,ebx
c000c3b4:	74 1a                	je     c000c3d0 <Phys::allocateDMA(unsigned long)+0x7f>
c000c3b6:	be e0 3d 02 c0       	mov    esi,0xc0023de0
c000c3bb:	8d 90 e0 3d 02 c0    	lea    edx,[eax-0x3ffdc220]
c000c3c1:	f7 d6                	not    esi
c000c3c3:	29 c6                	sub    esi,eax
c000c3c5:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c3c8:	42                   	inc    edx
c000c3c9:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000c3cc:	39 d9                	cmp    ecx,ebx
c000c3ce:	7f f5                	jg     c000c3c5 <Phys::allocateDMA(unsigned long)+0x74>
c000c3d0:	85 ff                	test   edi,edi
c000c3d2:	74 13                	je     c000c3e7 <Phys::allocateDMA(unsigned long)+0x96>
c000c3d4:	5b                   	pop    ebx
c000c3d5:	05 50 20 0c 00       	add    eax,0xc2050
c000c3da:	5e                   	pop    esi
c000c3db:	c1 e0 0c             	shl    eax,0xc
c000c3de:	5f                   	pop    edi
c000c3df:	5d                   	pop    ebp
c000c3e0:	c3                   	ret    
c000c3e1:	89 ea                	mov    edx,ebp
c000c3e3:	31 c9                	xor    ecx,ecx
c000c3e5:	eb a7                	jmp    c000c38e <Phys::allocateDMA(unsigned long)+0x3d>
c000c3e7:	5b                   	pop    ebx
c000c3e8:	c1 e0 0c             	shl    eax,0xc
c000c3eb:	5e                   	pop    esi
c000c3ec:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000c3f1:	5f                   	pop    edi
c000c3f2:	5d                   	pop    ebp
c000c3f3:	c3                   	ret    

c000c3f4 <Phys::freeDMA(unsigned long, unsigned long)>:
c000c3f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c3f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c3fc:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c402:	c1 e9 0c             	shr    ecx,0xc
c000c405:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c40a:	76 25                	jbe    c000c431 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c40c:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c411:	c1 e8 0c             	shr    eax,0xc
c000c414:	8d 50 10             	lea    edx,[eax+0x10]
c000c417:	85 c9                	test   ecx,ecx
c000c419:	74 15                	je     c000c430 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c41b:	8d 82 e0 3d 02 c0    	lea    eax,[edx-0x3ffdc220]
c000c421:	8d 94 11 e0 3d 02 c0 	lea    edx,[ecx+edx*1-0x3ffdc220]
c000c428:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c42b:	40                   	inc    eax
c000c42c:	39 d0                	cmp    eax,edx
c000c42e:	75 f8                	jne    c000c428 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c430:	c3                   	ret    
c000c431:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c437:	c1 ea 0c             	shr    edx,0xc
c000c43a:	eb db                	jmp    c000c417 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c43c <Phys::setPageState(unsigned long, bool)>:
c000c43c:	56                   	push   esi
c000c43d:	ba 01 00 00 00       	mov    edx,0x1
c000c442:	53                   	push   ebx
c000c443:	8b 35 b0 31 02 c0    	mov    esi,DWORD PTR ds:0xc00231b0
c000c449:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c44d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c451:	89 c8                	mov    eax,ecx
c000c453:	83 e1 07             	and    ecx,0x7
c000c456:	c1 e8 03             	shr    eax,0x3
c000c459:	d3 e3                	shl    ebx,cl
c000c45b:	01 c6                	add    esi,eax
c000c45d:	d3 e2                	shl    edx,cl
c000c45f:	f7 d2                	not    edx
c000c461:	20 16                	and    BYTE PTR [esi],dl
c000c463:	03 05 b0 31 02 c0    	add    eax,DWORD PTR ds:0xc00231b0
c000c469:	08 18                	or     BYTE PTR [eax],bl
c000c46b:	5b                   	pop    ebx
c000c46c:	5e                   	pop    esi
c000c46d:	c3                   	ret    

c000c46e <Phys::getPageState(unsigned long)>:
c000c46e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c472:	8b 15 b0 31 02 c0    	mov    edx,DWORD PTR ds:0xc00231b0
c000c478:	89 c8                	mov    eax,ecx
c000c47a:	83 e1 07             	and    ecx,0x7
c000c47d:	c1 e8 03             	shr    eax,0x3
c000c480:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000c484:	d3 f8                	sar    eax,cl
c000c486:	83 e0 01             	and    eax,0x1
c000c489:	c3                   	ret    

c000c48a <Phys::freePage(unsigned long)>:
c000c48a:	53                   	push   ebx
c000c48b:	83 ec 08             	sub    esp,0x8
c000c48e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c492:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c498:	76 57                	jbe    c000c4f1 <Phys::freePage(unsigned long)+0x67>
c000c49a:	c1 eb 0c             	shr    ebx,0xc
c000c49d:	53                   	push   ebx
c000c49e:	e8 cb ff ff ff       	call   c000c46e <Phys::getPageState(unsigned long)>
c000c4a3:	5a                   	pop    edx
c000c4a4:	84 c0                	test   al,al
c000c4a6:	74 5b                	je     c000c503 <Phys::freePage(unsigned long)+0x79>
c000c4a8:	a1 cc 3d 02 c0       	mov    eax,ds:0xc0023dcc
c000c4ad:	48                   	dec    eax
c000c4ae:	a3 cc 3d 02 c0       	mov    ds:0xc0023dcc,eax
c000c4b3:	8d 04 80             	lea    eax,[eax+eax*4]
c000c4b6:	8d 04 80             	lea    eax,[eax+eax*4]
c000c4b9:	c1 e0 02             	shl    eax,0x2
c000c4bc:	99                   	cdq    
c000c4bd:	f7 3d d0 3d 02 c0    	idiv   DWORD PTR ds:0xc0023dd0
c000c4c3:	39 05 c8 3d 02 c0    	cmp    DWORD PTR ds:0xc0023dc8,eax
c000c4c9:	75 13                	jne    c000c4de <Phys::freePage(unsigned long)+0x54>
c000c4cb:	83 ec 08             	sub    esp,0x8
c000c4ce:	6a 00                	push   0x0
c000c4d0:	53                   	push   ebx
c000c4d1:	e8 66 ff ff ff       	call   c000c43c <Phys::setPageState(unsigned long, bool)>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	83 c4 08             	add    esp,0x8
c000c4dc:	5b                   	pop    ebx
c000c4dd:	c3                   	ret    
c000c4de:	83 ec 0c             	sub    esp,0xc
c000c4e1:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c000c4e6:	50                   	push   eax
c000c4e7:	e8 00 0a 00 00       	call   c000ceec <VgaText::updateRAMUsageDisplay(int)>
c000c4ec:	83 c4 10             	add    esp,0x10
c000c4ef:	eb da                	jmp    c000c4cb <Phys::freePage(unsigned long)+0x41>
c000c4f1:	68 00 10 00 00       	push   0x1000
c000c4f6:	53                   	push   ebx
c000c4f7:	e8 f8 fe ff ff       	call   c000c3f4 <Phys::freeDMA(unsigned long, unsigned long)>
c000c4fc:	59                   	pop    ecx
c000c4fd:	5b                   	pop    ebx
c000c4fe:	83 c4 08             	add    esp,0x8
c000c501:	5b                   	pop    ebx
c000c502:	c3                   	ret    
c000c503:	c7 44 24 10 5b 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc002095b
c000c50b:	83 c4 08             	add    esp,0x8
c000c50e:	5b                   	pop    ebx
c000c50f:	e9 0a 8d 00 00       	jmp    c001521e <Krnl::panic(char const*)>

c000c514 <Phys::allocatePage()>:
c000c514:	56                   	push   esi
c000c515:	53                   	push   ebx
c000c516:	51                   	push   ecx
c000c517:	8b 35 c0 3d 02 c0    	mov    esi,DWORD PTR ds:0xc0023dc0
c000c51d:	89 f3                	mov    ebx,esi
c000c51f:	eb 0a                	jmp    c000c52b <Phys::allocatePage()+0x17>
c000c521:	89 1d c0 3d 02 c0    	mov    DWORD PTR ds:0xc0023dc0,ebx
c000c527:	39 de                	cmp    esi,ebx
c000c529:	74 24                	je     c000c54f <Phys::allocatePage()+0x3b>
c000c52b:	53                   	push   ebx
c000c52c:	e8 3d ff ff ff       	call   c000c46e <Phys::getPageState(unsigned long)>
c000c531:	5a                   	pop    edx
c000c532:	84 c0                	test   al,al
c000c534:	74 5a                	je     c000c590 <Phys::allocatePage()+0x7c>
c000c536:	43                   	inc    ebx
c000c537:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c53d:	75 e2                	jne    c000c521 <Phys::allocatePage()+0xd>
c000c53f:	31 db                	xor    ebx,ebx
c000c541:	c7 05 c0 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023dc0,0x0
c000c54b:	39 de                	cmp    esi,ebx
c000c54d:	75 dc                	jne    c000c52b <Phys::allocatePage()+0x17>
c000c54f:	83 ec 0c             	sub    esp,0xc
c000c552:	68 71 09 02 c0       	push   0xc0020971
c000c557:	e8 c3 2b 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000c55c:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000c563:	e8 e9 fd ff ff       	call   c000c351 <Phys::allocateDMA(unsigned long)>
c000c568:	83 c4 10             	add    esp,0x10
c000c56b:	85 c0                	test   eax,eax
c000c56d:	75 56                	jne    c000c5c5 <Phys::allocatePage()+0xb1>
c000c56f:	83 ec 0c             	sub    esp,0xc
c000c572:	68 82 09 02 c0       	push   0xc0020982
c000c577:	e8 a2 8c 00 00       	call   c001521e <Krnl::panic(char const*)>
c000c57c:	83 c4 10             	add    esp,0x10
c000c57f:	8b 1d c0 3d 02 c0    	mov    ebx,DWORD PTR ds:0xc0023dc0
c000c585:	53                   	push   ebx
c000c586:	e8 e3 fe ff ff       	call   c000c46e <Phys::getPageState(unsigned long)>
c000c58b:	5a                   	pop    edx
c000c58c:	84 c0                	test   al,al
c000c58e:	75 a6                	jne    c000c536 <Phys::allocatePage()+0x22>
c000c590:	6a 01                	push   0x1
c000c592:	53                   	push   ebx
c000c593:	e8 a4 fe ff ff       	call   c000c43c <Phys::setPageState(unsigned long, bool)>
c000c598:	a1 cc 3d 02 c0       	mov    eax,ds:0xc0023dcc
c000c59d:	59                   	pop    ecx
c000c59e:	40                   	inc    eax
c000c59f:	5b                   	pop    ebx
c000c5a0:	a3 cc 3d 02 c0       	mov    ds:0xc0023dcc,eax
c000c5a5:	8d 04 80             	lea    eax,[eax+eax*4]
c000c5a8:	8d 04 80             	lea    eax,[eax+eax*4]
c000c5ab:	c1 e0 02             	shl    eax,0x2
c000c5ae:	99                   	cdq    
c000c5af:	f7 3d d0 3d 02 c0    	idiv   DWORD PTR ds:0xc0023dd0
c000c5b5:	39 05 c8 3d 02 c0    	cmp    DWORD PTR ds:0xc0023dc8,eax
c000c5bb:	75 0c                	jne    c000c5c9 <Phys::allocatePage()+0xb5>
c000c5bd:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c000c5c2:	c1 e0 0c             	shl    eax,0xc
c000c5c5:	5a                   	pop    edx
c000c5c6:	5b                   	pop    ebx
c000c5c7:	5e                   	pop    esi
c000c5c8:	c3                   	ret    
c000c5c9:	83 ec 0c             	sub    esp,0xc
c000c5cc:	a3 c8 3d 02 c0       	mov    ds:0xc0023dc8,eax
c000c5d1:	50                   	push   eax
c000c5d2:	e8 15 09 00 00       	call   c000ceec <VgaText::updateRAMUsageDisplay(int)>
c000c5d7:	83 c4 10             	add    esp,0x10
c000c5da:	eb e1                	jmp    c000c5bd <Phys::allocatePage()+0xa9>

c000c5dc <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c5dc:	56                   	push   esi
c000c5dd:	53                   	push   ebx
c000c5de:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c5e2:	39 1d c4 3d 02 c0    	cmp    DWORD PTR ds:0xc0023dc4,ebx
c000c5e8:	73 06                	jae    c000c5f0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c5ea:	89 1d c4 3d 02 c0    	mov    DWORD PTR ds:0xc0023dc4,ebx
c000c5f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c5f4:	c1 eb 0c             	shr    ebx,0xc
c000c5f7:	c1 e8 0c             	shr    eax,0xc
c000c5fa:	39 d8                	cmp    eax,ebx
c000c5fc:	73 13                	jae    c000c611 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c5fe:	6a 00                	push   0x0
c000c600:	8d 70 01             	lea    esi,[eax+0x1]
c000c603:	50                   	push   eax
c000c604:	e8 33 fe ff ff       	call   c000c43c <Phys::setPageState(unsigned long, bool)>
c000c609:	5a                   	pop    edx
c000c60a:	89 f0                	mov    eax,esi
c000c60c:	59                   	pop    ecx
c000c60d:	39 f3                	cmp    ebx,esi
c000c60f:	75 ed                	jne    c000c5fe <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c611:	5b                   	pop    ebx
c000c612:	5e                   	pop    esi
c000c613:	c3                   	ret    

c000c614 <Phys::physicalMemorySetup(unsigned int)>:
c000c614:	55                   	push   ebp
c000c615:	57                   	push   edi
c000c616:	56                   	push   esi
c000c617:	53                   	push   ebx
c000c618:	31 db                	xor    ebx,ebx
c000c61a:	83 ec 40             	sub    esp,0x40
c000c61d:	6a 30                	push   0x30
c000c61f:	6a 00                	push   0x0
c000c621:	68 e0 3d 02 c0       	push   0xc0023de0
c000c626:	e8 dd 3f ff ff       	call   c0000608 <memset>
c000c62b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c62f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c634:	05 00 10 00 00       	add    eax,0x1000
c000c639:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c63d:	83 c4 10             	add    esp,0x10
c000c640:	83 ec 08             	sub    esp,0x8
c000c643:	6a 01                	push   0x1
c000c645:	53                   	push   ebx
c000c646:	43                   	inc    ebx
c000c647:	e8 f0 fd ff ff       	call   c000c43c <Phys::setPageState(unsigned long, bool)>
c000c64c:	83 c4 10             	add    esp,0x10
c000c64f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c655:	75 e9                	jne    c000c640 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c657:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000c65e:	66 85 c0             	test   ax,ax
c000c661:	0f 84 8e 01 00 00    	je     c000c7f5 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000c667:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c66b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c673:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c677:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000c67c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c680:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c688:	eb 15                	jmp    c000c69f <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000c68a:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c68e:	83 c3 18             	add    ebx,0x18
c000c691:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c695:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000c699:	0f 84 66 01 00 00    	je     c000c805 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000c69f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c6a2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c6a5:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000c6a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c6ac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6b0:	8b 33                	mov    esi,DWORD PTR [ebx]
c000c6b2:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000c6b5:	01 f0                	add    eax,esi
c000c6b7:	55                   	push   ebp
c000c6b8:	11 fa                	adc    edx,edi
c000c6ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c6be:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c6c2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c6c6:	56                   	push   esi
c000c6c7:	68 bc 09 02 c0       	push   0xc00209bc
c000c6cc:	e8 4e 2a 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000c6d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c6d5:	83 c4 10             	add    esp,0x10
c000c6d8:	09 f8                	or     eax,edi
c000c6da:	0f 85 25 01 00 00    	jne    c000c805 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000c6e0:	4d                   	dec    ebp
c000c6e1:	75 a7                	jne    c000c68a <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c6e3:	ba 00 00 08 00       	mov    edx,0x80000
c000c6e8:	89 c1                	mov    ecx,eax
c000c6ea:	39 f2                	cmp    edx,esi
c000c6ec:	19 f9                	sbb    ecx,edi
c000c6ee:	0f 82 a7 00 00 00    	jb     c000c79b <Phys::physicalMemorySetup(unsigned int)+0x187>
c000c6f4:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000c6f8:	89 c1                	mov    ecx,eax
c000c6fa:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000c6fe:	0f 83 97 00 00 00    	jae    c000c79b <Phys::physicalMemorySetup(unsigned int)+0x187>
c000c704:	ba 00 00 0a 00       	mov    edx,0xa0000
c000c709:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c70d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c711:	39 fa                	cmp    edx,edi
c000c713:	19 e8                	sbb    eax,ebp
c000c715:	0f 82 14 01 00 00    	jb     c000c82f <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000c71b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c71f:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c723:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000c729:	ba ff 1f 00 00       	mov    edx,0x1fff
c000c72e:	83 d5 ff             	adc    ebp,0xffffffff
c000c731:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000c735:	31 c0                	xor    eax,eax
c000c737:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000c73b:	39 fa                	cmp    edx,edi
c000c73d:	89 c1                	mov    ecx,eax
c000c73f:	19 e9                	sbb    ecx,ebp
c000c741:	0f 83 43 ff ff ff    	jae    c000c68a <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c747:	be 00 00 08 00       	mov    esi,0x80000
c000c74c:	50                   	push   eax
c000c74d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c751:	57                   	push   edi
c000c752:	56                   	push   esi
c000c753:	68 e0 09 02 c0       	push   0xc00209e0
c000c758:	e8 c2 29 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000c75d:	5a                   	pop    edx
c000c75e:	59                   	pop    ecx
c000c75f:	57                   	push   edi
c000c760:	56                   	push   esi
c000c761:	e8 76 fe ff ff       	call   c000c5dc <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c766:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c76a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c76e:	83 c4 0c             	add    esp,0xc
c000c771:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c775:	03 05 d0 3d 02 c0    	add    eax,DWORD PTR ds:0xc0023dd0
c000c77b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c782:	a3 d0 3d 02 c0       	mov    ds:0xc0023dd0,eax
c000c787:	52                   	push   edx
c000c788:	50                   	push   eax
c000c789:	68 9e 09 02 c0       	push   0xc002099e
c000c78e:	e8 8c 29 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000c793:	83 c4 10             	add    esp,0x10
c000c796:	e9 ef fe ff ff       	jmp    c000c68a <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c79b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000c79f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c7a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c7a7:	39 ea                	cmp    edx,ebp
c000c7a9:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000c7ad:	0f 82 d7 fe ff ff    	jb     c000c68a <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c7b3:	ba ff 1f 00 00       	mov    edx,0x1fff
c000c7b8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000c7bc:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000c7c0:	0f 83 c4 fe ff ff    	jae    c000c68a <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c7c6:	39 ee                	cmp    esi,ebp
c000c7c8:	89 f8                	mov    eax,edi
c000c7ca:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000c7ce:	0f 83 78 ff ff ff    	jae    c000c74c <Phys::physicalMemorySetup(unsigned int)+0x138>
c000c7d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c7d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c7dc:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000c7e0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c7e4:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000c7e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7f0:	e9 57 ff ff ff       	jmp    c000c74c <Phys::physicalMemorySetup(unsigned int)+0x138>
c000c7f5:	83 ec 0c             	sub    esp,0xc
c000c7f8:	68 90 09 02 c0       	push   0xc0020990
c000c7fd:	e8 1c 8a 00 00       	call   c001521e <Krnl::panic(char const*)>
c000c802:	83 c4 10             	add    esp,0x10
c000c805:	bb 40 01 00 00       	mov    ebx,0x140
c000c80a:	83 ec 08             	sub    esp,0x8
c000c80d:	6a 00                	push   0x0
c000c80f:	53                   	push   ebx
c000c810:	43                   	inc    ebx
c000c811:	e8 26 fc ff ff       	call   c000c43c <Phys::setPageState(unsigned long, bool)>
c000c816:	ff 05 d0 3d 02 c0    	inc    DWORD PTR ds:0xc0023dd0
c000c81c:	83 c4 10             	add    esp,0x10
c000c81f:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c825:	75 e3                	jne    c000c80a <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000c827:	83 c4 3c             	add    esp,0x3c
c000c82a:	5b                   	pop    ebx
c000c82b:	5e                   	pop    esi
c000c82c:	5f                   	pop    edi
c000c82d:	5d                   	pop    ebp
c000c82e:	c3                   	ret    
c000c82f:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000c837:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c83f:	e9 d7 fe ff ff       	jmp    c000c71b <Phys::physicalMemorySetup(unsigned int)+0x107>

c000c844 <Pipe::isAtty()>:
c000c844:	31 c0                	xor    eax,eax
c000c846:	c3                   	ret    
c000c847:	90                   	nop

c000c848 <Pipe::~Pipe()>:
c000c848:	83 ec 0c             	sub    esp,0xc
c000c84b:	ba 4c 0a 02 c0       	mov    edx,0xc0020a4c
c000c850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c854:	89 10                	mov    DWORD PTR [eax],edx
c000c856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c85a:	83 ec 0c             	sub    esp,0xc
c000c85d:	50                   	push   eax
c000c85e:	e8 5b 16 00 00       	call   c000debe <UnixFile::~UnixFile()>
c000c863:	83 c4 10             	add    esp,0x10
c000c866:	90                   	nop
c000c867:	83 c4 0c             	add    esp,0xc
c000c86a:	c3                   	ret    
c000c86b:	90                   	nop

c000c86c <Pipe::~Pipe()>:
c000c86c:	83 ec 0c             	sub    esp,0xc
c000c86f:	83 ec 0c             	sub    esp,0xc
c000c872:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c876:	e8 cd ff ff ff       	call   c000c848 <Pipe::~Pipe()>
c000c87b:	83 c4 10             	add    esp,0x10
c000c87e:	83 ec 08             	sub    esp,0x8
c000c881:	6a 20                	push   0x20
c000c883:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c887:	e8 b3 27 00 00       	call   c000f03f <operator delete(void*, unsigned long)>
c000c88c:	83 c4 10             	add    esp,0x10
c000c88f:	83 c4 0c             	add    esp,0xc
c000c892:	c3                   	ret    
c000c893:	90                   	nop

c000c894 <Pipe::read(unsigned long long, void*, int*)>:
c000c894:	55                   	push   ebp
c000c895:	57                   	push   edi
c000c896:	56                   	push   esi
c000c897:	53                   	push   ebx
c000c898:	83 ec 1c             	sub    esp,0x1c
c000c89b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c89f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c8a3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c8a7:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c8aa:	89 c8                	mov    eax,ecx
c000c8ac:	99                   	cdq    
c000c8ad:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c8b1:	74 19                	je     c000c8cc <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c8b3:	39 f9                	cmp    ecx,edi
c000c8b5:	89 d1                	mov    ecx,edx
c000c8b7:	19 f1                	sbb    ecx,esi
c000c8b9:	73 11                	jae    c000c8cc <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c8bb:	e8 cc b8 00 00       	call   c001818c <lockScheduler()>
c000c8c0:	e8 fb bb 00 00       	call   c00184c0 <schedule()>
c000c8c5:	e8 c4 b8 00 00       	call   c001818e <unlockScheduler()>
c000c8ca:	eb db                	jmp    c000c8a7 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c8cc:	39 f8                	cmp    eax,edi
c000c8ce:	89 d1                	mov    ecx,edx
c000c8d0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c8d4:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c8d8:	19 f1                	sbb    ecx,esi
c000c8da:	73 08                	jae    c000c8e4 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c8dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8e4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c8e7:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c8ea:	29 c6                	sub    esi,eax
c000c8ec:	89 f1                	mov    ecx,esi
c000c8ee:	c1 f9 1f             	sar    ecx,0x1f
c000c8f1:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c8f5:	89 ca                	mov    edx,ecx
c000c8f7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c8fb:	19 d1                	sbb    ecx,edx
c000c8fd:	73 04                	jae    c000c903 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c8ff:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c903:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c907:	89 fd                	mov    ebp,edi
c000c909:	29 f5                	sub    ebp,esi
c000c90b:	85 f6                	test   esi,esi
c000c90d:	74 12                	je     c000c921 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c90f:	52                   	push   edx
c000c910:	56                   	push   esi
c000c911:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c914:	50                   	push   eax
c000c915:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c919:	e8 b4 3c ff ff       	call   c00005d2 <memcpy>
c000c91e:	83 c4 10             	add    esp,0x10
c000c921:	85 ed                	test   ebp,ebp
c000c923:	74 12                	je     c000c937 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c925:	50                   	push   eax
c000c926:	55                   	push   ebp
c000c927:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c92a:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c92e:	56                   	push   esi
c000c92f:	e8 9e 3c ff ff       	call   c00005d2 <memcpy>
c000c934:	83 c4 10             	add    esp,0x10
c000c937:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000c93a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c93d:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c940:	99                   	cdq    
c000c941:	89 f7                	mov    edi,esi
c000c943:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c947:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000c94b:	c1 ff 1f             	sar    edi,0x1f
c000c94e:	57                   	push   edi
c000c94f:	56                   	push   esi
c000c950:	52                   	push   edx
c000c951:	50                   	push   eax
c000c952:	e8 d5 22 01 00       	call   c001ec2c <__umoddi3>
c000c957:	83 c4 10             	add    esp,0x10
c000c95a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c95d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c962:	75 10                	jne    c000c974 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000c964:	83 ec 0c             	sub    esp,0xc
c000c967:	68 09 0a 02 c0       	push   0xc0020a09
c000c96c:	e8 ad 88 00 00       	call   c001521e <Krnl::panic(char const*)>
c000c971:	83 c4 10             	add    esp,0x10
c000c974:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c978:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c97c:	89 10                	mov    DWORD PTR [eax],edx
c000c97e:	83 c4 1c             	add    esp,0x1c
c000c981:	31 c0                	xor    eax,eax
c000c983:	5b                   	pop    ebx
c000c984:	5e                   	pop    esi
c000c985:	5f                   	pop    edi
c000c986:	5d                   	pop    ebp
c000c987:	c3                   	ret    

c000c988 <Pipe::write(unsigned long long, void*, int*)>:
c000c988:	55                   	push   ebp
c000c989:	57                   	push   edi
c000c98a:	56                   	push   esi
c000c98b:	53                   	push   ebx
c000c98c:	83 ec 1c             	sub    esp,0x1c
c000c98f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c993:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000c997:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000c99b:	89 04 24             	mov    DWORD PTR [esp],eax
c000c99e:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000c9a1:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000c9a4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c9a8:	89 de                	mov    esi,ebx
c000c9aa:	89 df                	mov    edi,ebx
c000c9ac:	c1 ff 1f             	sar    edi,0x1f
c000c9af:	01 c6                	add    esi,eax
c000c9b1:	89 c8                	mov    eax,ecx
c000c9b3:	11 d7                	adc    edi,edx
c000c9b5:	99                   	cdq    
c000c9b6:	39 f1                	cmp    ecx,esi
c000c9b8:	89 d0                	mov    eax,edx
c000c9ba:	19 f8                	sbb    eax,edi
c000c9bc:	b8 01 00 00 00       	mov    eax,0x1
c000c9c1:	0f 82 80 00 00 00    	jb     c000ca47 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000c9c7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000c9ca:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000c9cd:	01 d8                	add    eax,ebx
c000c9cf:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c9d3:	99                   	cdq    
c000c9d4:	f7 f9                	idiv   ecx
c000c9d6:	29 d1                	sub    ecx,edx
c000c9d8:	89 d7                	mov    edi,edx
c000c9da:	89 c8                	mov    eax,ecx
c000c9dc:	99                   	cdq    
c000c9dd:	39 ce                	cmp    esi,ecx
c000c9df:	19 d3                	sbb    ebx,edx
c000c9e1:	bb 00 00 00 00       	mov    ebx,0x0
c000c9e6:	72 04                	jb     c000c9ec <Pipe::write(unsigned long long, void*, int*)+0x64>
c000c9e8:	89 f3                	mov    ebx,esi
c000c9ea:	29 cb                	sub    ebx,ecx
c000c9ec:	89 f1                	mov    ecx,esi
c000c9ee:	29 d9                	sub    ecx,ebx
c000c9f0:	74 1a                	je     c000ca0c <Pipe::write(unsigned long long, void*, int*)+0x84>
c000c9f2:	52                   	push   edx
c000c9f3:	51                   	push   ecx
c000c9f4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c9f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c9fc:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000c9ff:	57                   	push   edi
c000ca00:	e8 cd 3b ff ff       	call   c00005d2 <memcpy>
c000ca05:	83 c4 10             	add    esp,0x10
c000ca08:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ca0c:	85 db                	test   ebx,ebx
c000ca0e:	74 12                	je     c000ca22 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000ca10:	50                   	push   eax
c000ca11:	53                   	push   ebx
c000ca12:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000ca16:	51                   	push   ecx
c000ca17:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000ca1a:	e8 b3 3b ff ff       	call   c00005d2 <memcpy>
c000ca1f:	83 c4 10             	add    esp,0x10
c000ca22:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000ca25:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ca2a:	75 10                	jne    c000ca3c <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000ca2c:	83 ec 0c             	sub    esp,0xc
c000ca2f:	68 25 0a 02 c0       	push   0xc0020a25
c000ca34:	e8 e5 87 00 00       	call   c001521e <Krnl::panic(char const*)>
c000ca39:	83 c4 10             	add    esp,0x10
c000ca3c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca40:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000ca43:	89 38                	mov    DWORD PTR [eax],edi
c000ca45:	31 c0                	xor    eax,eax
c000ca47:	83 c4 1c             	add    esp,0x1c
c000ca4a:	5b                   	pop    ebx
c000ca4b:	5e                   	pop    esi
c000ca4c:	5f                   	pop    edi
c000ca4d:	5d                   	pop    ebp
c000ca4e:	c3                   	ret    
c000ca4f:	90                   	nop

c000ca50 <Pipe::Pipe(int)>:
c000ca50:	83 ec 0c             	sub    esp,0xc
c000ca53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca57:	83 ec 08             	sub    esp,0x8
c000ca5a:	6a 00                	push   0x0
c000ca5c:	50                   	push   eax
c000ca5d:	e8 ba 12 00 00       	call   c000dd1c <UnixFile::UnixFile(int)>
c000ca62:	83 c4 10             	add    esp,0x10
c000ca65:	ba 4c 0a 02 c0       	mov    edx,0xc0020a4c
c000ca6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca6e:	89 10                	mov    DWORD PTR [eax],edx
c000ca70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ca78:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ca7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca7f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ca86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca8a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ca91:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca95:	83 ec 0c             	sub    esp,0xc
c000ca98:	50                   	push   eax
c000ca99:	e8 cc f4 ff ff       	call   c000bf6a <malloc>
c000ca9e:	83 c4 10             	add    esp,0x10
c000caa1:	89 c2                	mov    edx,eax
c000caa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caa7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000caaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caae:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000cab2:	90                   	nop
c000cab3:	83 c4 0c             	add    esp,0xc
c000cab6:	c3                   	ret    
c000cab7:	90                   	nop

c000cab8 <VgaText::isAtty()>:
c000cab8:	b0 01                	mov    al,0x1
c000caba:	c3                   	ret    
c000cabb:	90                   	nop

c000cabc <VgaText::~VgaText()>:
c000cabc:	83 ec 0c             	sub    esp,0xc
c000cabf:	ba 08 0b 02 c0       	mov    edx,0xc0020b08
c000cac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cac8:	89 10                	mov    DWORD PTR [eax],edx
c000caca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cace:	83 ec 0c             	sub    esp,0xc
c000cad1:	50                   	push   eax
c000cad2:	e8 e7 13 00 00       	call   c000debe <UnixFile::~UnixFile()>
c000cad7:	83 c4 10             	add    esp,0x10
c000cada:	90                   	nop
c000cadb:	83 c4 0c             	add    esp,0xc
c000cade:	c3                   	ret    
c000cadf:	90                   	nop

c000cae0 <VgaText::~VgaText()>:
c000cae0:	83 ec 0c             	sub    esp,0xc
c000cae3:	83 ec 0c             	sub    esp,0xc
c000cae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000caea:	e8 cd ff ff ff       	call   c000cabc <VgaText::~VgaText()>
c000caef:	83 c4 10             	add    esp,0x10
c000caf2:	83 ec 08             	sub    esp,0x8
c000caf5:	68 60 12 00 00       	push   0x1260
c000cafa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cafe:	e8 3c 25 00 00       	call   c000f03f <operator delete(void*, unsigned long)>
c000cb03:	83 c4 10             	add    esp,0x10
c000cb06:	83 c4 0c             	add    esp,0xc
c000cb09:	c3                   	ret    

c000cb0a <VgaText::read(unsigned long long, void*, int*)>:
c000cb0a:	83 ec 10             	sub    esp,0x10
c000cb0d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb11:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb19:	e8 42 51 00 00       	call   c0011c60 <readKeyboard(VgaText*, char*, unsigned long)>
c000cb1e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000cb22:	89 02                	mov    DWORD PTR [edx],eax
c000cb24:	31 c0                	xor    eax,eax
c000cb26:	83 c4 1c             	add    esp,0x1c
c000cb29:	c3                   	ret    

c000cb2a <setTerminalScrollLock(bool)>:
c000cb2a:	c3                   	ret    

c000cb2b <addToTerminalCycle(VgaText*)>:
c000cb2b:	8b 15 40 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e40
c000cb31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb35:	85 d2                	test   edx,edx
c000cb37:	75 0c                	jne    c000cb45 <addToTerminalCycle(VgaText*)+0x1a>
c000cb39:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000cb3f:	a3 40 3e 02 c0       	mov    ds:0xc0023e40,eax
c000cb44:	c3                   	ret    
c000cb45:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000cb4b:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000cb51:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000cb57:	c3                   	ret    

c000cb58 <installVgaTextImplementation()>:
c000cb58:	83 ec 10             	sub    esp,0x10
c000cb5b:	6a 20                	push   0x20
c000cb5d:	6a 00                	push   0x0
c000cb5f:	68 20 3e 02 c0       	push   0xc0023e20
c000cb64:	e8 9f 3a ff ff       	call   c0000608 <memset>
c000cb69:	83 c4 1c             	add    esp,0x1c
c000cb6c:	c3                   	ret    

c000cb6d <scrollTerminalScrollLock(int)>:
c000cb6d:	c3                   	ret    

c000cb6e <VgaText::load()>:
c000cb6e:	53                   	push   ebx
c000cb6f:	31 c0                	xor    eax,eax
c000cb71:	83 ec 58             	sub    esp,0x58
c000cb74:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000cb78:	89 e2                	mov    edx,esp
c000cb7a:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000cb7e:	40                   	inc    eax
c000cb7f:	83 f8 50             	cmp    eax,0x50
c000cb82:	75 f6                	jne    c000cb7a <VgaText::load()+0xc>
c000cb84:	31 c0                	xor    eax,eax
c000cb86:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000cb8d:	84 c9                	test   cl,cl
c000cb8f:	74 06                	je     c000cb97 <VgaText::load()+0x29>
c000cb91:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cb94:	40                   	inc    eax
c000cb95:	eb ef                	jmp    c000cb86 <VgaText::load()+0x18>
c000cb97:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000cb9d:	85 c0                	test   eax,eax
c000cb9f:	74 09                	je     c000cbaa <VgaText::load()+0x3c>
c000cba1:	51                   	push   ecx
c000cba2:	51                   	push   ecx
c000cba3:	52                   	push   edx
c000cba4:	53                   	push   ebx
c000cba5:	ff d0                	call   eax
c000cba7:	83 c4 10             	add    esp,0x10
c000cbaa:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000cbb0:	85 c0                	test   eax,eax
c000cbb2:	74 09                	je     c000cbbd <VgaText::load()+0x4f>
c000cbb4:	83 ec 0c             	sub    esp,0xc
c000cbb7:	53                   	push   ebx
c000cbb8:	ff d0                	call   eax
c000cbba:	83 c4 10             	add    esp,0x10
c000cbbd:	83 c4 58             	add    esp,0x58
c000cbc0:	5b                   	pop    ebx
c000cbc1:	c3                   	ret    

c000cbc2 <VgaText::updateCursor()>:
c000cbc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbc6:	39 05 44 3e 02 c0    	cmp    DWORD PTR ds:0xc0023e44,eax
c000cbcc:	75 0c                	jne    c000cbda <VgaText::updateCursor()+0x18>
c000cbce:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000cbd4:	85 c0                	test   eax,eax
c000cbd6:	74 02                	je     c000cbda <VgaText::updateCursor()+0x18>
c000cbd8:	ff e0                	jmp    eax
c000cbda:	c3                   	ret    
c000cbdb:	90                   	nop

c000cbdc <VgaText::showCursor(bool)>:
c000cbdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbe0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cbe4:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000cbea:	c3                   	ret    
c000cbeb:	90                   	nop

c000cbec <VgaText::disableBlink(bool)>:
c000cbec:	56                   	push   esi
c000cbed:	53                   	push   ebx
c000cbee:	51                   	push   ecx
c000cbef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cbf3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cbf7:	39 1d 44 3e 02 c0    	cmp    DWORD PTR ds:0xc0023e44,ebx
c000cbfd:	75 18                	jne    c000cc17 <VgaText::disableBlink(bool)+0x2b>
c000cbff:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000cc05:	85 c0                	test   eax,eax
c000cc07:	74 0e                	je     c000cc17 <VgaText::disableBlink(bool)+0x2b>
c000cc09:	89 f1                	mov    ecx,esi
c000cc0b:	52                   	push   edx
c000cc0c:	52                   	push   edx
c000cc0d:	0f b6 d1             	movzx  edx,cl
c000cc10:	52                   	push   edx
c000cc11:	53                   	push   ebx
c000cc12:	ff d0                	call   eax
c000cc14:	83 c4 10             	add    esp,0x10
c000cc17:	89 f0                	mov    eax,esi
c000cc19:	83 f0 01             	xor    eax,0x1
c000cc1c:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000cc22:	58                   	pop    eax
c000cc23:	5b                   	pop    ebx
c000cc24:	5e                   	pop    esi
c000cc25:	c3                   	ret    

c000cc26 <VgaText::doANSI_SGR(int)>:
c000cc26:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc2e:	85 d2                	test   edx,edx
c000cc30:	75 14                	jne    c000cc46 <VgaText::doANSI_SGR(int)+0x20>
c000cc32:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000cc38:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cc3e:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000cc44:	eb 65                	jmp    c000ccab <VgaText::doANSI_SGR(int)+0x85>
c000cc46:	83 fa 07             	cmp    edx,0x7
c000cc49:	75 14                	jne    c000cc5f <VgaText::doANSI_SGR(int)+0x39>
c000cc4b:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000cc51:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000cc57:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000cc5d:	eb 4c                	jmp    c000ccab <VgaText::doANSI_SGR(int)+0x85>
c000cc5f:	83 fa 1b             	cmp    edx,0x1b
c000cc62:	74 ce                	je     c000cc32 <VgaText::doANSI_SGR(int)+0xc>
c000cc64:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000cc67:	83 f9 07             	cmp    ecx,0x7
c000cc6a:	77 09                	ja     c000cc75 <VgaText::doANSI_SGR(int)+0x4f>
c000cc6c:	8b 14 8d e0 31 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdce20]
c000cc73:	eb 20                	jmp    c000cc95 <VgaText::doANSI_SGR(int)+0x6f>
c000cc75:	8d 4a d8             	lea    ecx,[edx-0x28]
c000cc78:	83 f9 07             	cmp    ecx,0x7
c000cc7b:	77 09                	ja     c000cc86 <VgaText::doANSI_SGR(int)+0x60>
c000cc7d:	8b 14 8d e0 31 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdce20]
c000cc84:	eb 25                	jmp    c000ccab <VgaText::doANSI_SGR(int)+0x85>
c000cc86:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000cc89:	83 f9 07             	cmp    ecx,0x7
c000cc8c:	77 0e                	ja     c000cc9c <VgaText::doANSI_SGR(int)+0x76>
c000cc8e:	8b 14 95 98 30 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf68]
c000cc95:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cc9b:	c3                   	ret    
c000cc9c:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000cc9f:	83 f9 07             	cmp    ecx,0x7
c000cca2:	77 0d                	ja     c000ccb1 <VgaText::doANSI_SGR(int)+0x8b>
c000cca4:	8b 14 95 70 30 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf90]
c000ccab:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000ccb1:	c3                   	ret    

c000ccb2 <VgaText::setDefaultBgColour(VgaColour)>:
c000ccb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccb6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ccba:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000ccc0:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000ccc6:	c3                   	ret    
c000ccc7:	90                   	nop

c000ccc8 <VgaText::setDefaultFgColour(VgaColour)>:
c000ccc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cccc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ccd0:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000ccd6:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000ccdc:	c3                   	ret    
c000ccdd:	90                   	nop

c000ccde <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000ccde:	53                   	push   ebx
c000ccdf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cce3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cce7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cceb:	51                   	push   ecx
c000ccec:	e8 c1 ff ff ff       	call   c000ccb2 <VgaText::setDefaultBgColour(VgaColour)>
c000ccf1:	58                   	pop    eax
c000ccf2:	5a                   	pop    edx
c000ccf3:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ccf7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ccfb:	5b                   	pop    ebx
c000ccfc:	eb ca                	jmp    c000ccc8 <VgaText::setDefaultFgColour(VgaColour)>

c000ccfe <VgaText::combineColours(unsigned char, unsigned char)>:
c000ccfe:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000cd02:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000cd07:	83 e0 0f             	and    eax,0xf
c000cd0a:	c1 e2 04             	shl    edx,0x4
c000cd0d:	09 d0                	or     eax,edx
c000cd0f:	c3                   	ret    

c000cd10 <VgaText::scrollScreen()>:
c000cd10:	57                   	push   edi
c000cd11:	56                   	push   esi
c000cd12:	be 01 00 00 00       	mov    esi,0x1
c000cd17:	53                   	push   ebx
c000cd18:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cd1c:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000cd22:	31 ff                	xor    edi,edi
c000cd24:	01 d9                	add    ecx,ebx
c000cd26:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000cd29:	83 fe 17             	cmp    esi,0x17
c000cd2c:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000cd32:	75 28                	jne    c000cd5c <VgaText::scrollScreen()+0x4c>
c000cd34:	f7 c7 01 00 00 00    	test   edi,0x1
c000cd3a:	74 1c                	je     c000cd58 <VgaText::scrollScreen()+0x48>
c000cd3c:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000cd43:	50                   	push   eax
c000cd44:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000cd4b:	50                   	push   eax
c000cd4c:	e8 ad ff ff ff       	call   c000ccfe <VgaText::combineColours(unsigned char, unsigned char)>
c000cd51:	5a                   	pop    edx
c000cd52:	5a                   	pop    edx
c000cd53:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000cd56:	eb 04                	jmp    c000cd5c <VgaText::scrollScreen()+0x4c>
c000cd58:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000cd5c:	47                   	inc    edi
c000cd5d:	41                   	inc    ecx
c000cd5e:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000cd64:	75 c0                	jne    c000cd26 <VgaText::scrollScreen()+0x16>
c000cd66:	46                   	inc    esi
c000cd67:	83 fe 18             	cmp    esi,0x18
c000cd6a:	75 b0                	jne    c000cd1c <VgaText::scrollScreen()+0xc>
c000cd6c:	39 1d 44 3e 02 c0    	cmp    DWORD PTR ds:0xc0023e44,ebx
c000cd72:	75 24                	jne    c000cd98 <VgaText::scrollScreen()+0x88>
c000cd74:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000cd7b:	74 08                	je     c000cd85 <VgaText::scrollScreen()+0x75>
c000cd7d:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000cd83:	eb 13                	jmp    c000cd98 <VgaText::scrollScreen()+0x88>
c000cd85:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000cd8b:	85 c0                	test   eax,eax
c000cd8d:	74 09                	je     c000cd98 <VgaText::scrollScreen()+0x88>
c000cd8f:	83 ec 0c             	sub    esp,0xc
c000cd92:	53                   	push   ebx
c000cd93:	ff d0                	call   eax
c000cd95:	83 c4 10             	add    esp,0x10
c000cd98:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cd9c:	5b                   	pop    ebx
c000cd9d:	5e                   	pop    esi
c000cd9e:	5f                   	pop    edi
c000cd9f:	e9 1e fe ff ff       	jmp    c000cbc2 <VgaText::updateCursor()>

c000cda4 <VgaText::combineCharAndColour(char, unsigned char)>:
c000cda4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000cda9:	c1 e0 08             	shl    eax,0x8
c000cdac:	89 c2                	mov    edx,eax
c000cdae:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000cdb3:	09 d0                	or     eax,edx
c000cdb5:	c3                   	ret    

c000cdb6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000cdb6:	53                   	push   ebx
c000cdb7:	83 ec 08             	sub    esp,0x8
c000cdba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cdbe:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000cdc3:	50                   	push   eax
c000cdc4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000cdc9:	50                   	push   eax
c000cdca:	e8 2f ff ff ff       	call   c000ccfe <VgaText::combineColours(unsigned char, unsigned char)>
c000cdcf:	5a                   	pop    edx
c000cdd0:	0f b6 c0             	movzx  eax,al
c000cdd3:	5b                   	pop    ebx
c000cdd4:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000cdd9:	50                   	push   eax
c000cdda:	53                   	push   ebx
c000cddb:	e8 c4 ff ff ff       	call   c000cda4 <VgaText::combineCharAndColour(char, unsigned char)>
c000cde0:	5a                   	pop    edx
c000cde1:	5a                   	pop    edx
c000cde2:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000cde8:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000cdec:	0f b7 d2             	movzx  edx,dx
c000cdef:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000cdf4:	39 0d 44 3e 02 c0    	cmp    DWORD PTR ds:0xc0023e44,ecx
c000cdfa:	75 14                	jne    c000ce10 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000cdfc:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000ce02:	85 c0                	test   eax,eax
c000ce04:	74 0a                	je     c000ce10 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ce06:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ce0a:	83 c4 08             	add    esp,0x8
c000ce0d:	5b                   	pop    ebx
c000ce0e:	ff e0                	jmp    eax
c000ce10:	83 c4 08             	add    esp,0x8
c000ce13:	5b                   	pop    ebx
c000ce14:	c3                   	ret    
c000ce15:	90                   	nop

c000ce16 <VgaText::getCursorX()>:
c000ce16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce1a:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000ce20:	c3                   	ret    
c000ce21:	90                   	nop

c000ce22 <VgaText::getCursorY()>:
c000ce22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce26:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000ce2c:	c3                   	ret    
c000ce2d:	90                   	nop

c000ce2e <VgaText::setCursor(int, int)>:
c000ce2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce36:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000ce3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ce40:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000ce46:	e9 77 fd ff ff       	jmp    c000cbc2 <VgaText::updateCursor()>
c000ce4b:	90                   	nop

c000ce4c <VgaText::setCursorX(int)>:
c000ce4c:	83 ec 10             	sub    esp,0x10
c000ce4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ce53:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000ce59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce5d:	50                   	push   eax
c000ce5e:	e8 cb ff ff ff       	call   c000ce2e <VgaText::setCursor(int, int)>
c000ce63:	83 c4 1c             	add    esp,0x1c
c000ce66:	c3                   	ret    
c000ce67:	90                   	nop

c000ce68 <VgaText::setCursorY(int)>:
c000ce68:	83 ec 10             	sub    esp,0x10
c000ce6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ce6f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ce73:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000ce79:	50                   	push   eax
c000ce7a:	e8 af ff ff ff       	call   c000ce2e <VgaText::setCursor(int, int)>
c000ce7f:	83 c4 1c             	add    esp,0x1c
c000ce82:	c3                   	ret    
c000ce83:	90                   	nop

c000ce84 <VgaText::incrementCursor(bool)>:
c000ce84:	56                   	push   esi
c000ce85:	53                   	push   ebx
c000ce86:	51                   	push   ecx
c000ce87:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ce8b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ce8f:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000ce95:	40                   	inc    eax
c000ce96:	83 f8 50             	cmp    eax,0x50
c000ce99:	74 08                	je     c000cea3 <VgaText::incrementCursor(bool)+0x1f>
c000ce9b:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cea1:	eb 33                	jmp    c000ced6 <VgaText::incrementCursor(bool)+0x52>
c000cea3:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cea9:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000ceb3:	8d 50 01             	lea    edx,[eax+0x1]
c000ceb6:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cebc:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000cec2:	75 12                	jne    c000ced6 <VgaText::incrementCursor(bool)+0x52>
c000cec4:	83 ec 0c             	sub    esp,0xc
c000cec7:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000cecd:	53                   	push   ebx
c000cece:	e8 3d fe ff ff       	call   c000cd10 <VgaText::scrollScreen()>
c000ced3:	83 c4 10             	add    esp,0x10
c000ced6:	89 f0                	mov    eax,esi
c000ced8:	84 c0                	test   al,al
c000ceda:	74 0c                	je     c000cee8 <VgaText::incrementCursor(bool)+0x64>
c000cedc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cee0:	5a                   	pop    edx
c000cee1:	5b                   	pop    ebx
c000cee2:	5e                   	pop    esi
c000cee3:	e9 da fc ff ff       	jmp    c000cbc2 <VgaText::updateCursor()>
c000cee8:	58                   	pop    eax
c000cee9:	5b                   	pop    ebx
c000ceea:	5e                   	pop    esi
c000ceeb:	c3                   	ret    

c000ceec <VgaText::updateRAMUsageDisplay(int)>:
c000ceec:	53                   	push   ebx
c000ceed:	bb 0a 00 00 00       	mov    ebx,0xa
c000cef2:	6a 0f                	push   0xf
c000cef4:	6a 00                	push   0x0
c000cef6:	e8 03 fe ff ff       	call   c000ccfe <VgaText::combineColours(unsigned char, unsigned char)>
c000cefb:	5a                   	pop    edx
c000cefc:	59                   	pop    ecx
c000cefd:	0f b6 c8             	movzx  ecx,al
c000cf00:	51                   	push   ecx
c000cf01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cf05:	99                   	cdq    
c000cf06:	f7 fb                	idiv   ebx
c000cf08:	89 d3                	mov    ebx,edx
c000cf0a:	83 c0 30             	add    eax,0x30
c000cf0d:	83 c3 30             	add    ebx,0x30
c000cf10:	0f be c0             	movsx  eax,al
c000cf13:	0f b6 db             	movzx  ebx,bl
c000cf16:	50                   	push   eax
c000cf17:	e8 88 fe ff ff       	call   c000cda4 <VgaText::combineCharAndColour(char, unsigned char)>
c000cf1c:	5a                   	pop    edx
c000cf1d:	5a                   	pop    edx
c000cf1e:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cf24:	51                   	push   ecx
c000cf25:	53                   	push   ebx
c000cf26:	e8 79 fe ff ff       	call   c000cda4 <VgaText::combineCharAndColour(char, unsigned char)>
c000cf2b:	5b                   	pop    ebx
c000cf2c:	5a                   	pop    edx
c000cf2d:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cf33:	51                   	push   ecx
c000cf34:	6a 25                	push   0x25
c000cf36:	e8 69 fe ff ff       	call   c000cda4 <VgaText::combineCharAndColour(char, unsigned char)>
c000cf3b:	59                   	pop    ecx
c000cf3c:	5b                   	pop    ebx
c000cf3d:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000cf43:	5b                   	pop    ebx
c000cf44:	c3                   	ret    
c000cf45:	90                   	nop

c000cf46 <VgaText::updateDiskUsage()>:
c000cf46:	55                   	push   ebp
c000cf47:	bd 10 27 00 00       	mov    ebp,0x2710
c000cf4c:	57                   	push   edi
c000cf4d:	56                   	push   esi
c000cf4e:	53                   	push   ebx
c000cf4f:	6a 0f                	push   0xf
c000cf51:	6a 00                	push   0x0
c000cf53:	e8 a6 fd ff ff       	call   c000ccfe <VgaText::combineColours(unsigned char, unsigned char)>
c000cf58:	5a                   	pop    edx
c000cf59:	0f b6 d8             	movzx  ebx,al
c000cf5c:	59                   	pop    ecx
c000cf5d:	a1 24 5b 02 c0       	mov    eax,ds:0xc0025b24
c000cf62:	53                   	push   ebx
c000cf63:	b9 0a 00 00 00       	mov    ecx,0xa
c000cf68:	99                   	cdq    
c000cf69:	f7 fd                	idiv   ebp
c000cf6b:	99                   	cdq    
c000cf6c:	f7 f9                	idiv   ecx
c000cf6e:	8d 42 30             	lea    eax,[edx+0x30]
c000cf71:	0f b6 c0             	movzx  eax,al
c000cf74:	50                   	push   eax
c000cf75:	e8 2a fe ff ff       	call   c000cda4 <VgaText::combineCharAndColour(char, unsigned char)>
c000cf7a:	5e                   	pop    esi
c000cf7b:	5f                   	pop    edi
c000cf7c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000cf82:	bf e8 03 00 00       	mov    edi,0x3e8
c000cf87:	53                   	push   ebx
c000cf88:	a1 24 5b 02 c0       	mov    eax,ds:0xc0025b24
c000cf8d:	99                   	cdq    
c000cf8e:	f7 ff                	idiv   edi
c000cf90:	99                   	cdq    
c000cf91:	f7 f9                	idiv   ecx
c000cf93:	8d 42 30             	lea    eax,[edx+0x30]
c000cf96:	0f b6 c0             	movzx  eax,al
c000cf99:	50                   	push   eax
c000cf9a:	e8 05 fe ff ff       	call   c000cda4 <VgaText::combineCharAndColour(char, unsigned char)>
c000cf9f:	5a                   	pop    edx
c000cfa0:	5e                   	pop    esi
c000cfa1:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000cfa7:	be 64 00 00 00       	mov    esi,0x64
c000cfac:	53                   	push   ebx
c000cfad:	a1 24 5b 02 c0       	mov    eax,ds:0xc0025b24
c000cfb2:	99                   	cdq    
c000cfb3:	f7 fe                	idiv   esi
c000cfb5:	99                   	cdq    
c000cfb6:	f7 f9                	idiv   ecx
c000cfb8:	8d 42 30             	lea    eax,[edx+0x30]
c000cfbb:	0f b6 c0             	movzx  eax,al
c000cfbe:	50                   	push   eax
c000cfbf:	e8 e0 fd ff ff       	call   c000cda4 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfc4:	5a                   	pop    edx
c000cfc5:	5a                   	pop    edx
c000cfc6:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000cfcc:	53                   	push   ebx
c000cfcd:	a1 24 5b 02 c0       	mov    eax,ds:0xc0025b24
c000cfd2:	99                   	cdq    
c000cfd3:	f7 f9                	idiv   ecx
c000cfd5:	99                   	cdq    
c000cfd6:	f7 f9                	idiv   ecx
c000cfd8:	8d 42 30             	lea    eax,[edx+0x30]
c000cfdb:	0f b6 c0             	movzx  eax,al
c000cfde:	50                   	push   eax
c000cfdf:	e8 c0 fd ff ff       	call   c000cda4 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfe4:	5a                   	pop    edx
c000cfe5:	5a                   	pop    edx
c000cfe6:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000cfec:	53                   	push   ebx
c000cfed:	a1 24 5b 02 c0       	mov    eax,ds:0xc0025b24
c000cff2:	99                   	cdq    
c000cff3:	f7 f9                	idiv   ecx
c000cff5:	8d 42 30             	lea    eax,[edx+0x30]
c000cff8:	0f b6 c0             	movzx  eax,al
c000cffb:	50                   	push   eax
c000cffc:	e8 a3 fd ff ff       	call   c000cda4 <VgaText::combineCharAndColour(char, unsigned char)>
c000d001:	5a                   	pop    edx
c000d002:	5a                   	pop    edx
c000d003:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000d009:	53                   	push   ebx
c000d00a:	a1 20 5b 02 c0       	mov    eax,ds:0xc0025b20
c000d00f:	99                   	cdq    
c000d010:	f7 fd                	idiv   ebp
c000d012:	99                   	cdq    
c000d013:	f7 f9                	idiv   ecx
c000d015:	8d 42 30             	lea    eax,[edx+0x30]
c000d018:	0f b6 c0             	movzx  eax,al
c000d01b:	50                   	push   eax
c000d01c:	e8 83 fd ff ff       	call   c000cda4 <VgaText::combineCharAndColour(char, unsigned char)>
c000d021:	5d                   	pop    ebp
c000d022:	5a                   	pop    edx
c000d023:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000d029:	53                   	push   ebx
c000d02a:	a1 20 5b 02 c0       	mov    eax,ds:0xc0025b20
c000d02f:	99                   	cdq    
c000d030:	f7 ff                	idiv   edi
c000d032:	99                   	cdq    
c000d033:	f7 f9                	idiv   ecx
c000d035:	8d 42 30             	lea    eax,[edx+0x30]
c000d038:	0f b6 c0             	movzx  eax,al
c000d03b:	50                   	push   eax
c000d03c:	e8 63 fd ff ff       	call   c000cda4 <VgaText::combineCharAndColour(char, unsigned char)>
c000d041:	5f                   	pop    edi
c000d042:	5d                   	pop    ebp
c000d043:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000d049:	53                   	push   ebx
c000d04a:	a1 20 5b 02 c0       	mov    eax,ds:0xc0025b20
c000d04f:	99                   	cdq    
c000d050:	f7 fe                	idiv   esi
c000d052:	99                   	cdq    
c000d053:	f7 f9                	idiv   ecx
c000d055:	8d 42 30             	lea    eax,[edx+0x30]
c000d058:	0f b6 c0             	movzx  eax,al
c000d05b:	50                   	push   eax
c000d05c:	e8 43 fd ff ff       	call   c000cda4 <VgaText::combineCharAndColour(char, unsigned char)>
c000d061:	5a                   	pop    edx
c000d062:	5e                   	pop    esi
c000d063:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000d069:	53                   	push   ebx
c000d06a:	a1 20 5b 02 c0       	mov    eax,ds:0xc0025b20
c000d06f:	99                   	cdq    
c000d070:	f7 f9                	idiv   ecx
c000d072:	99                   	cdq    
c000d073:	f7 f9                	idiv   ecx
c000d075:	8d 42 30             	lea    eax,[edx+0x30]
c000d078:	0f b6 c0             	movzx  eax,al
c000d07b:	50                   	push   eax
c000d07c:	e8 23 fd ff ff       	call   c000cda4 <VgaText::combineCharAndColour(char, unsigned char)>
c000d081:	5f                   	pop    edi
c000d082:	5d                   	pop    ebp
c000d083:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000d089:	53                   	push   ebx
c000d08a:	a1 20 5b 02 c0       	mov    eax,ds:0xc0025b20
c000d08f:	99                   	cdq    
c000d090:	f7 f9                	idiv   ecx
c000d092:	83 c2 30             	add    edx,0x30
c000d095:	0f b6 d2             	movzx  edx,dl
c000d098:	52                   	push   edx
c000d099:	e8 06 fd ff ff       	call   c000cda4 <VgaText::combineCharAndColour(char, unsigned char)>
c000d09e:	5a                   	pop    edx
c000d09f:	59                   	pop    ecx
c000d0a0:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000d0a6:	5b                   	pop    ebx
c000d0a7:	5e                   	pop    esi
c000d0a8:	5f                   	pop    edi
c000d0a9:	5d                   	pop    ebp
c000d0aa:	c3                   	ret    
c000d0ab:	90                   	nop

c000d0ac <VgaText::updateTitle()>:
c000d0ac:	53                   	push   ebx
c000d0ad:	31 c0                	xor    eax,eax
c000d0af:	83 ec 58             	sub    esp,0x58
c000d0b2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000d0b6:	89 e1                	mov    ecx,esp
c000d0b8:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000d0bc:	40                   	inc    eax
c000d0bd:	83 f8 50             	cmp    eax,0x50
c000d0c0:	75 f6                	jne    c000d0b8 <VgaText::updateTitle()+0xc>
c000d0c2:	31 c0                	xor    eax,eax
c000d0c4:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000d0cb:	84 db                	test   bl,bl
c000d0cd:	74 06                	je     c000d0d5 <VgaText::updateTitle()+0x29>
c000d0cf:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000d0d2:	40                   	inc    eax
c000d0d3:	eb ef                	jmp    c000d0c4 <VgaText::updateTitle()+0x18>
c000d0d5:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000d0db:	85 c0                	test   eax,eax
c000d0dd:	74 09                	je     c000d0e8 <VgaText::updateTitle()+0x3c>
c000d0df:	53                   	push   ebx
c000d0e0:	53                   	push   ebx
c000d0e1:	51                   	push   ecx
c000d0e2:	52                   	push   edx
c000d0e3:	ff d0                	call   eax
c000d0e5:	83 c4 10             	add    esp,0x10
c000d0e8:	e8 59 fe ff ff       	call   c000cf46 <VgaText::updateDiskUsage()>
c000d0ed:	83 c4 58             	add    esp,0x58
c000d0f0:	5b                   	pop    ebx
c000d0f1:	c3                   	ret    

c000d0f2 <VgaText::setTitleTextColour(VgaColour)>:
c000d0f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d0f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0fa:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000d100:	eb aa                	jmp    c000d0ac <VgaText::updateTitle()>

c000d102 <VgaText::setTitleColour(VgaColour)>:
c000d102:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d106:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d10a:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000d110:	eb 9a                	jmp    c000d0ac <VgaText::updateTitle()>

c000d112 <VgaText::setTitle(char*)>:
c000d112:	53                   	push   ebx
c000d113:	83 ec 10             	sub    esp,0x10
c000d116:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d11a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d11e:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000d124:	50                   	push   eax
c000d125:	e8 7d 35 ff ff       	call   c00006a7 <strcpy>
c000d12a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000d12e:	83 c4 18             	add    esp,0x18
c000d131:	5b                   	pop    ebx
c000d132:	e9 75 ff ff ff       	jmp    c000d0ac <VgaText::updateTitle()>
c000d137:	90                   	nop

c000d138 <VgaText::decrementCursor(bool)>:
c000d138:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d13c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d140:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000d146:	85 c0                	test   eax,eax
c000d148:	74 07                	je     c000d151 <VgaText::decrementCursor(bool)+0x19>
c000d14a:	48                   	dec    eax
c000d14b:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000d151:	84 c9                	test   cl,cl
c000d153:	74 09                	je     c000d15e <VgaText::decrementCursor(bool)+0x26>
c000d155:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d159:	e9 64 fa ff ff       	jmp    c000cbc2 <VgaText::updateCursor()>
c000d15e:	c3                   	ret    
c000d15f:	90                   	nop

c000d160 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000d160:	53                   	push   ebx
c000d161:	83 ec 08             	sub    esp,0x8
c000d164:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d168:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d16c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d170:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d174:	3c 07                	cmp    al,0x7
c000d176:	75 2a                	jne    c000d1a2 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000d178:	a1 ec 3e 02 c0       	mov    eax,ds:0xc0023eec
c000d17d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000d185:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000d18d:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000d195:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d199:	83 c4 08             	add    esp,0x8
c000d19c:	5b                   	pop    ebx
c000d19d:	e9 68 2d 00 00       	jmp    c000ff0a <Buzzer::beep(int, int, bool)>
c000d1a2:	3c 0d                	cmp    al,0xd
c000d1a4:	75 0c                	jne    c000d1b2 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000d1a6:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d1b0:	eb 3b                	jmp    c000d1ed <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000d1b2:	3c 0a                	cmp    al,0xa
c000d1b4:	75 40                	jne    c000d1f6 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000d1b6:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000d1bc:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d1c6:	8d 50 01             	lea    edx,[eax+0x1]
c000d1c9:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000d1cf:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000d1d5:	75 12                	jne    c000d1e9 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000d1d7:	83 ec 0c             	sub    esp,0xc
c000d1da:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000d1e0:	53                   	push   ebx
c000d1e1:	e8 2a fb ff ff       	call   c000cd10 <VgaText::scrollScreen()>
c000d1e6:	83 c4 10             	add    esp,0x10
c000d1e9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d1ed:	83 c4 08             	add    esp,0x8
c000d1f0:	5b                   	pop    ebx
c000d1f1:	e9 cc f9 ff ff       	jmp    c000cbc2 <VgaText::updateCursor()>
c000d1f6:	3c 08                	cmp    al,0x8
c000d1f8:	75 31                	jne    c000d22b <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000d1fa:	50                   	push   eax
c000d1fb:	50                   	push   eax
c000d1fc:	6a 01                	push   0x1
c000d1fe:	53                   	push   ebx
c000d1ff:	e8 34 ff ff ff       	call   c000d138 <VgaText::decrementCursor(bool)>
c000d204:	5a                   	pop    edx
c000d205:	59                   	pop    ecx
c000d206:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d20c:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d212:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d218:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d21e:	6a 20                	push   0x20
c000d220:	53                   	push   ebx
c000d221:	e8 90 fb ff ff       	call   c000cdb6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d226:	83 c4 28             	add    esp,0x28
c000d229:	5b                   	pop    ebx
c000d22a:	c3                   	ret    
c000d22b:	83 ec 08             	sub    esp,0x8
c000d22e:	0f be c0             	movsx  eax,al
c000d231:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d237:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d23d:	51                   	push   ecx
c000d23e:	52                   	push   edx
c000d23f:	50                   	push   eax
c000d240:	53                   	push   ebx
c000d241:	e8 70 fb ff ff       	call   c000cdb6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d246:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000d24a:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000d252:	83 c4 28             	add    esp,0x28
c000d255:	5b                   	pop    ebx
c000d256:	e9 29 fc ff ff       	jmp    c000ce84 <VgaText::incrementCursor(bool)>
c000d25b:	90                   	nop

c000d25c <VgaText::isShowingCursor()>:
c000d25c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d260:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000d266:	c3                   	ret    
c000d267:	90                   	nop

c000d268 <VgaText::isBlinkDisabled()>:
c000d268:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d26c:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000d272:	83 f0 01             	xor    eax,0x1
c000d275:	c3                   	ret    

c000d276 <VgaText::setCursorHeight(int)>:
c000d276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d27a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d27e:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000d284:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000d28b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d28f:	e9 48 f9 ff ff       	jmp    c000cbdc <VgaText::showCursor(bool)>

c000d294 <VgaText::getCursorHeight()>:
c000d294:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d298:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000d29e:	c3                   	ret    

c000d29f <setActiveTerminal(VgaText*)>:
c000d29f:	53                   	push   ebx
c000d2a0:	83 ec 08             	sub    esp,0x8
c000d2a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d2a7:	85 db                	test   ebx,ebx
c000d2a9:	75 11                	jne    c000d2bc <setActiveTerminal(VgaText*)+0x1d>
c000d2ab:	c7 44 24 10 60 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020a60
c000d2b3:	83 c4 08             	add    esp,0x8
c000d2b6:	5b                   	pop    ebx
c000d2b7:	e9 62 7f 00 00       	jmp    c001521e <Krnl::panic(char const*)>
c000d2bc:	50                   	push   eax
c000d2bd:	50                   	push   eax
c000d2be:	53                   	push   ebx
c000d2bf:	68 6e 0a 02 c0       	push   0xc0020a6e
c000d2c4:	e8 56 1e 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000d2c9:	a1 44 3e 02 c0       	mov    eax,ds:0xc0023e44
c000d2ce:	83 c4 10             	add    esp,0x10
c000d2d1:	85 c0                	test   eax,eax
c000d2d3:	74 0c                	je     c000d2e1 <setActiveTerminal(VgaText*)+0x42>
c000d2d5:	83 ec 0c             	sub    esp,0xc
c000d2d8:	50                   	push   eax
c000d2d9:	e8 e4 f8 ff ff       	call   c000cbc2 <VgaText::updateCursor()>
c000d2de:	83 c4 10             	add    esp,0x10
c000d2e1:	89 1d 44 3e 02 c0    	mov    DWORD PTR ds:0xc0023e44,ebx
c000d2e7:	51                   	push   ecx
c000d2e8:	51                   	push   ecx
c000d2e9:	53                   	push   ebx
c000d2ea:	68 86 0a 02 c0       	push   0xc0020a86
c000d2ef:	e8 2b 1e 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000d2f4:	83 c4 0c             	add    esp,0xc
c000d2f7:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2fd:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d303:	53                   	push   ebx
c000d304:	e8 25 fb ff ff       	call   c000ce2e <VgaText::setCursor(int, int)>
c000d309:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d30c:	e8 57 ff ff ff       	call   c000d268 <VgaText::isBlinkDisabled()>
c000d311:	5a                   	pop    edx
c000d312:	0f b6 c0             	movzx  eax,al
c000d315:	59                   	pop    ecx
c000d316:	50                   	push   eax
c000d317:	53                   	push   ebx
c000d318:	e8 cf f8 ff ff       	call   c000cbec <VgaText::disableBlink(bool)>
c000d31d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d320:	e8 6f ff ff ff       	call   c000d294 <VgaText::getCursorHeight()>
c000d325:	5a                   	pop    edx
c000d326:	59                   	pop    ecx
c000d327:	50                   	push   eax
c000d328:	53                   	push   ebx
c000d329:	e8 48 ff ff ff       	call   c000d276 <VgaText::setCursorHeight(int)>
c000d32e:	83 c4 10             	add    esp,0x10
c000d331:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000d338:	75 0a                	jne    c000d344 <setActiveTerminal(VgaText*)+0xa5>
c000d33a:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000d344:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d348:	83 c4 08             	add    esp,0x8
c000d34b:	5b                   	pop    ebx
c000d34c:	e9 1d f8 ff ff       	jmp    c000cb6e <VgaText::load()>

c000d351 <doTerminalCycle()>:
c000d351:	83 ec 18             	sub    esp,0x18
c000d354:	a1 40 3e 02 c0       	mov    eax,ds:0xc0023e40
c000d359:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000d35f:	50                   	push   eax
c000d360:	a3 40 3e 02 c0       	mov    ds:0xc0023e40,eax
c000d365:	e8 35 ff ff ff       	call   c000d29f <setActiveTerminal(VgaText*)>
c000d36a:	83 c4 1c             	add    esp,0x1c
c000d36d:	c3                   	ret    

c000d36e <VgaText::doUpdate()>:
c000d36e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d372:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000d378:	85 c0                	test   eax,eax
c000d37a:	74 02                	je     c000d37e <VgaText::doUpdate()+0x10>
c000d37c:	ff e0                	jmp    eax
c000d37e:	c3                   	ret    
c000d37f:	90                   	nop

c000d380 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000d380:	55                   	push   ebp
c000d381:	57                   	push   edi
c000d382:	56                   	push   esi
c000d383:	53                   	push   ebx
c000d384:	83 ec 1c             	sub    esp,0x1c
c000d387:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d38b:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d390:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000d397:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000d39a:	50                   	push   eax
c000d39b:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d3a0:	50                   	push   eax
c000d3a1:	e8 58 f9 ff ff       	call   c000ccfe <VgaText::combineColours(unsigned char, unsigned char)>
c000d3a6:	59                   	pop    ecx
c000d3a7:	0f b6 c0             	movzx  eax,al
c000d3aa:	5b                   	pop    ebx
c000d3ab:	31 c9                	xor    ecx,ecx
c000d3ad:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d3b5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d3b9:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d3bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d3c3:	0f b7 db             	movzx  ebx,bx
c000d3c6:	01 db                	add    ebx,ebx
c000d3c8:	01 fb                	add    ebx,edi
c000d3ca:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000d3cd:	84 c0                	test   al,al
c000d3cf:	0f 84 38 01 00 00    	je     c000d50d <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c000d3d5:	3c 0d                	cmp    al,0xd
c000d3d7:	75 0f                	jne    c000d3e8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c000d3d9:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d3e3:	e9 1f 01 00 00       	jmp    c000d507 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d3e8:	3c 0a                	cmp    al,0xa
c000d3ea:	75 5b                	jne    c000d447 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c000d3ec:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d3f2:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d3fc:	8d 48 01             	lea    ecx,[eax+0x1]
c000d3ff:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d405:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d40b:	75 12                	jne    c000d41f <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c000d40d:	83 ec 0c             	sub    esp,0xc
c000d410:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d416:	55                   	push   ebp
c000d417:	e8 f4 f8 ff ff       	call   c000cd10 <VgaText::scrollScreen()>
c000d41c:	83 c4 10             	add    esp,0x10
c000d41f:	83 ec 0c             	sub    esp,0xc
c000d422:	55                   	push   ebp
c000d423:	e8 9a f7 ff ff       	call   c000cbc2 <VgaText::updateCursor()>
c000d428:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d430:	83 c4 10             	add    esp,0x10
c000d433:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d439:	31 c9                	xor    ecx,ecx
c000d43b:	0f b7 db             	movzx  ebx,bx
c000d43e:	01 db                	add    ebx,ebx
c000d440:	01 fb                	add    ebx,edi
c000d442:	e9 c0 00 00 00       	jmp    c000d507 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d447:	3c 08                	cmp    al,0x8
c000d449:	75 4e                	jne    c000d499 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d44b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d44f:	53                   	push   ebx
c000d450:	53                   	push   ebx
c000d451:	6a 01                	push   0x1
c000d453:	55                   	push   ebp
c000d454:	e8 df fc ff ff       	call   c000d138 <VgaText::decrementCursor(bool)>
c000d459:	58                   	pop    eax
c000d45a:	5a                   	pop    edx
c000d45b:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d461:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d467:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d46d:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d473:	6a 20                	push   0x20
c000d475:	55                   	push   ebp
c000d476:	e8 3b f9 ff ff       	call   c000cdb6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d47b:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d483:	83 c4 20             	add    esp,0x20
c000d486:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d48c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d490:	0f b7 db             	movzx  ebx,bx
c000d493:	01 db                	add    ebx,ebx
c000d495:	01 fb                	add    ebx,edi
c000d497:	eb 6e                	jmp    c000d507 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d499:	51                   	push   ecx
c000d49a:	51                   	push   ecx
c000d49b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d49f:	50                   	push   eax
c000d4a0:	e8 ff f8 ff ff       	call   c000cda4 <VgaText::combineCharAndColour(char, unsigned char)>
c000d4a5:	83 c4 10             	add    esp,0x10
c000d4a8:	66 89 03             	mov    WORD PTR [ebx],ax
c000d4ab:	39 2d 44 3e 02 c0    	cmp    DWORD PTR ds:0xc0023e44,ebp
c000d4b1:	75 2a                	jne    c000d4dd <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d4b3:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d4b9:	85 c0                	test   eax,eax
c000d4bb:	74 20                	je     c000d4dd <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d4bd:	52                   	push   edx
c000d4be:	52                   	push   edx
c000d4bf:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d4c5:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d4cb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d4cf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d4d3:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d4d6:	51                   	push   ecx
c000d4d7:	55                   	push   ebp
c000d4d8:	ff d0                	call   eax
c000d4da:	83 c4 20             	add    esp,0x20
c000d4dd:	83 c3 02             	add    ebx,0x2
c000d4e0:	50                   	push   eax
c000d4e1:	50                   	push   eax
c000d4e2:	6a 00                	push   0x0
c000d4e4:	55                   	push   ebp
c000d4e5:	e8 9a f9 ff ff       	call   c000ce84 <VgaText::incrementCursor(bool)>
c000d4ea:	83 c4 10             	add    esp,0x10
c000d4ed:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d4f4:	75 0f                	jne    c000d505 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c000d4f6:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d4fe:	0f b7 db             	movzx  ebx,bx
c000d501:	01 db                	add    ebx,ebx
c000d503:	01 fb                	add    ebx,edi
c000d505:	b1 01                	mov    cl,0x1
c000d507:	46                   	inc    esi
c000d508:	e9 bd fe ff ff       	jmp    c000d3ca <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c000d50d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d511:	83 ec 0c             	sub    esp,0xc
c000d514:	55                   	push   ebp
c000d515:	e8 a8 f6 ff ff       	call   c000cbc2 <VgaText::updateCursor()>
c000d51a:	83 c4 10             	add    esp,0x10
c000d51d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d521:	84 c9                	test   cl,cl
c000d523:	74 0c                	je     c000d531 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c000d525:	83 ec 0c             	sub    esp,0xc
c000d528:	55                   	push   ebp
c000d529:	e8 40 fe ff ff       	call   c000d36e <VgaText::doUpdate()>
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d538:	83 c4 1c             	add    esp,0x1c
c000d53b:	5b                   	pop    ebx
c000d53c:	5e                   	pop    esi
c000d53d:	5f                   	pop    edi
c000d53e:	5d                   	pop    ebp
c000d53f:	c3                   	ret    

c000d540 <VgaText::clearScreen()>:
c000d540:	57                   	push   edi
c000d541:	56                   	push   esi
c000d542:	31 f6                	xor    esi,esi
c000d544:	53                   	push   ebx
c000d545:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d549:	52                   	push   edx
c000d54a:	6a 00                	push   0x0
c000d54c:	6a 00                	push   0x0
c000d54e:	53                   	push   ebx
c000d54f:	e8 da f8 ff ff       	call   c000ce2e <VgaText::setCursor(int, int)>
c000d554:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d55b:	83 c4 10             	add    esp,0x10
c000d55e:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d564:	7e 26                	jle    c000d58c <VgaText::clearScreen()+0x4c>
c000d566:	31 ff                	xor    edi,edi
c000d568:	50                   	push   eax
c000d569:	50                   	push   eax
c000d56a:	56                   	push   esi
c000d56b:	57                   	push   edi
c000d56c:	47                   	inc    edi
c000d56d:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d573:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d579:	6a 20                	push   0x20
c000d57b:	53                   	push   ebx
c000d57c:	e8 35 f8 ff ff       	call   c000cdb6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d581:	83 c4 20             	add    esp,0x20
c000d584:	83 ff 50             	cmp    edi,0x50
c000d587:	75 df                	jne    c000d568 <VgaText::clearScreen()+0x28>
c000d589:	46                   	inc    esi
c000d58a:	eb d2                	jmp    c000d55e <VgaText::clearScreen()+0x1e>
c000d58c:	83 ec 0c             	sub    esp,0xc
c000d58f:	53                   	push   ebx
c000d590:	e8 d9 fd ff ff       	call   c000d36e <VgaText::doUpdate()>
c000d595:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d59c:	83 c4 10             	add    esp,0x10
c000d59f:	5b                   	pop    ebx
c000d5a0:	5e                   	pop    esi
c000d5a1:	5f                   	pop    edi
c000d5a2:	c3                   	ret    
c000d5a3:	90                   	nop

c000d5a4 <VgaText::putchar(char)>:
c000d5a4:	56                   	push   esi
c000d5a5:	53                   	push   ebx
c000d5a6:	83 ec 14             	sub    esp,0x14
c000d5a9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d5ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d5b1:	3c 5b                	cmp    al,0x5b
c000d5b3:	75 21                	jne    c000d5d6 <VgaText::putchar(char)+0x32>
c000d5b5:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d5bc:	74 28                	je     c000d5e6 <VgaText::putchar(char)+0x42>
c000d5be:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d5c7:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d5d1:	e9 e2 00 00 00       	jmp    c000d6b8 <VgaText::putchar(char)+0x114>
c000d5d6:	3c 1b                	cmp    al,0x1b
c000d5d8:	75 0c                	jne    c000d5e6 <VgaText::putchar(char)+0x42>
c000d5da:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d5e1:	e9 d2 00 00 00       	jmp    c000d6b8 <VgaText::putchar(char)+0x114>
c000d5e6:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d5ec:	84 c9                	test   cl,cl
c000d5ee:	0f 84 ab 00 00 00    	je     c000d69f <VgaText::putchar(char)+0xfb>
c000d5f4:	8d 50 c0             	lea    edx,[eax-0x40]
c000d5f7:	80 fa 3e             	cmp    dl,0x3e
c000d5fa:	0f 87 82 00 00 00    	ja     c000d682 <VgaText::putchar(char)+0xde>
c000d600:	3c 6d                	cmp    al,0x6d
c000d602:	75 4d                	jne    c000d651 <VgaText::putchar(char)+0xad>
c000d604:	31 f6                	xor    esi,esi
c000d606:	31 d2                	xor    edx,edx
c000d608:	31 c0                	xor    eax,eax
c000d60a:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d610:	7e 30                	jle    c000d642 <VgaText::putchar(char)+0x9e>
c000d612:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d61a:	80 fa 3b             	cmp    dl,0x3b
c000d61d:	75 17                	jne    c000d636 <VgaText::putchar(char)+0x92>
c000d61f:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d623:	50                   	push   eax
c000d624:	53                   	push   ebx
c000d625:	e8 fc f5 ff ff       	call   c000cc26 <VgaText::doANSI_SGR(int)>
c000d62a:	59                   	pop    ecx
c000d62b:	31 d2                	xor    edx,edx
c000d62d:	58                   	pop    eax
c000d62e:	31 c0                	xor    eax,eax
c000d630:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d634:	eb 09                	jmp    c000d63f <VgaText::putchar(char)+0x9b>
c000d636:	6b c0 0a             	imul   eax,eax,0xa
c000d639:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d63d:	88 ca                	mov    dl,cl
c000d63f:	46                   	inc    esi
c000d640:	eb c8                	jmp    c000d60a <VgaText::putchar(char)+0x66>
c000d642:	84 d2                	test   dl,dl
c000d644:	74 31                	je     c000d677 <VgaText::putchar(char)+0xd3>
c000d646:	50                   	push   eax
c000d647:	53                   	push   ebx
c000d648:	e8 d9 f5 ff ff       	call   c000cc26 <VgaText::doANSI_SGR(int)>
c000d64d:	58                   	pop    eax
c000d64e:	5a                   	pop    edx
c000d64f:	eb 26                	jmp    c000d677 <VgaText::putchar(char)+0xd3>
c000d651:	3c 4a                	cmp    al,0x4a
c000d653:	75 22                	jne    c000d677 <VgaText::putchar(char)+0xd3>
c000d655:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d65c:	75 19                	jne    c000d677 <VgaText::putchar(char)+0xd3>
c000d65e:	83 ec 0c             	sub    esp,0xc
c000d661:	53                   	push   ebx
c000d662:	e8 d9 fe ff ff       	call   c000d540 <VgaText::clearScreen()>
c000d667:	83 c4 0c             	add    esp,0xc
c000d66a:	6a 00                	push   0x0
c000d66c:	6a 00                	push   0x0
c000d66e:	53                   	push   ebx
c000d66f:	e8 ba f7 ff ff       	call   c000ce2e <VgaText::setCursor(int, int)>
c000d674:	83 c4 10             	add    esp,0x10
c000d677:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d680:	eb 36                	jmp    c000d6b8 <VgaText::putchar(char)+0x114>
c000d682:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d688:	83 fa 0e             	cmp    edx,0xe
c000d68b:	7f 2b                	jg     c000d6b8 <VgaText::putchar(char)+0x114>
c000d68d:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d690:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d696:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d69d:	eb 19                	jmp    c000d6b8 <VgaText::putchar(char)+0x114>
c000d69f:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d6a5:	0f be c0             	movsx  eax,al
c000d6a8:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d6ae:	50                   	push   eax
c000d6af:	53                   	push   ebx
c000d6b0:	e8 ab fa ff ff       	call   c000d160 <VgaText::putchar(char, VgaColour, VgaColour)>
c000d6b5:	83 c4 10             	add    esp,0x10
c000d6b8:	83 c4 14             	add    esp,0x14
c000d6bb:	5b                   	pop    ebx
c000d6bc:	5e                   	pop    esi
c000d6bd:	c3                   	ret    

c000d6be <VgaText::puts(char const*)>:
c000d6be:	53                   	push   ebx
c000d6bf:	83 ec 08             	sub    esp,0x8
c000d6c2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d6c6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d6c9:	84 c0                	test   al,al
c000d6cb:	74 12                	je     c000d6df <VgaText::puts(char const*)+0x21>
c000d6cd:	43                   	inc    ebx
c000d6ce:	51                   	push   ecx
c000d6cf:	51                   	push   ecx
c000d6d0:	50                   	push   eax
c000d6d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6d5:	e8 ca fe ff ff       	call   c000d5a4 <VgaText::putchar(char)>
c000d6da:	83 c4 10             	add    esp,0x10
c000d6dd:	eb e7                	jmp    c000d6c6 <VgaText::puts(char const*)+0x8>
c000d6df:	83 c4 08             	add    esp,0x8
c000d6e2:	5b                   	pop    ebx
c000d6e3:	c3                   	ret    

c000d6e4 <VgaText::putx(unsigned int)>:
c000d6e4:	57                   	push   edi
c000d6e5:	b9 11 00 00 00       	mov    ecx,0x11
c000d6ea:	56                   	push   esi
c000d6eb:	be a2 0a 02 c0       	mov    esi,0xc0020aa2
c000d6f0:	53                   	push   ebx
c000d6f1:	83 ec 20             	sub    esp,0x20
c000d6f4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d6f8:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d6fc:	fc                   	cld    
c000d6fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d6ff:	be 08 00 00 00       	mov    esi,0x8
c000d704:	50                   	push   eax
c000d705:	50                   	push   eax
c000d706:	89 d8                	mov    eax,ebx
c000d708:	c1 e3 04             	shl    ebx,0x4
c000d70b:	c1 e8 1c             	shr    eax,0x1c
c000d70e:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d713:	50                   	push   eax
c000d714:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d718:	e8 87 fe ff ff       	call   c000d5a4 <VgaText::putchar(char)>
c000d71d:	83 c4 10             	add    esp,0x10
c000d720:	4e                   	dec    esi
c000d721:	75 e1                	jne    c000d704 <VgaText::putx(unsigned int)+0x20>
c000d723:	83 c4 20             	add    esp,0x20
c000d726:	5b                   	pop    ebx
c000d727:	5e                   	pop    esi
c000d728:	5f                   	pop    edi
c000d729:	c3                   	ret    

c000d72a <VgaText::VgaText(char const*)>:
c000d72a:	57                   	push   edi
c000d72b:	56                   	push   esi
c000d72c:	53                   	push   ebx
c000d72d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d731:	83 ec 08             	sub    esp,0x8
c000d734:	6a 00                	push   0x0
c000d736:	50                   	push   eax
c000d737:	e8 e0 05 00 00       	call   c000dd1c <UnixFile::UnixFile(int)>
c000d73c:	83 c4 10             	add    esp,0x10
c000d73f:	ba 08 0b 02 c0       	mov    edx,0xc0020b08
c000d744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d748:	89 10                	mov    DWORD PTR [eax],edx
c000d74a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d74e:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d75c:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d76a:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d771:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d775:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d77c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d780:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d78a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d78e:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d79c:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d7a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7a7:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d7ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7b2:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d7b8:	bb 20 3e 02 c0       	mov    ebx,0xc0023e20
c000d7bd:	b8 08 00 00 00       	mov    eax,0x8
c000d7c2:	fc                   	cld    
c000d7c3:	89 d7                	mov    edi,edx
c000d7c5:	89 de                	mov    esi,ebx
c000d7c7:	89 c1                	mov    ecx,eax
c000d7c9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d7cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7cf:	05 1e 10 00 00       	add    eax,0x101e
c000d7d4:	83 ec 08             	sub    esp,0x8
c000d7d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7db:	50                   	push   eax
c000d7dc:	e8 c6 2e ff ff       	call   c00006a7 <strcpy>
c000d7e1:	83 c4 10             	add    esp,0x10
c000d7e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7e8:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d7f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f6:	83 c0 0c             	add    eax,0xc
c000d7f9:	83 ec 04             	sub    esp,0x4
c000d7fc:	68 00 0f 00 00       	push   0xf00
c000d801:	6a 00                	push   0x0
c000d803:	50                   	push   eax
c000d804:	e8 ff 2d ff ff       	call   c0000608 <memset>
c000d809:	83 c4 10             	add    esp,0x10
c000d80c:	83 ec 04             	sub    esp,0x4
c000d80f:	6a 00                	push   0x0
c000d811:	6a 07                	push   0x7
c000d813:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d817:	e8 c2 f4 ff ff       	call   c000ccde <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d81c:	83 c4 10             	add    esp,0x10
c000d81f:	83 ec 08             	sub    esp,0x8
c000d822:	6a 02                	push   0x2
c000d824:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d828:	e8 49 fa ff ff       	call   c000d276 <VgaText::setCursorHeight(int)>
c000d82d:	83 c4 10             	add    esp,0x10
c000d830:	83 ec 04             	sub    esp,0x4
c000d833:	6a 00                	push   0x0
c000d835:	6a 00                	push   0x0
c000d837:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d83b:	e8 ee f5 ff ff       	call   c000ce2e <VgaText::setCursor(int, int)>
c000d840:	83 c4 10             	add    esp,0x10
c000d843:	83 ec 08             	sub    esp,0x8
c000d846:	6a 01                	push   0x1
c000d848:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d84c:	e8 8b f3 ff ff       	call   c000cbdc <VgaText::showCursor(bool)>
c000d851:	83 c4 10             	add    esp,0x10
c000d854:	83 ec 08             	sub    esp,0x8
c000d857:	6a 01                	push   0x1
c000d859:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d85d:	e8 8a f3 ff ff       	call   c000cbec <VgaText::disableBlink(bool)>
c000d862:	83 c4 10             	add    esp,0x10
c000d865:	83 ec 0c             	sub    esp,0xc
c000d868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d86c:	e8 cf fc ff ff       	call   c000d540 <VgaText::clearScreen()>
c000d871:	83 c4 10             	add    esp,0x10
c000d874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d878:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d883:	05 9e 10 00 00       	add    eax,0x109e
c000d888:	83 ec 04             	sub    esp,0x4
c000d88b:	68 96 00 00 00       	push   0x96
c000d890:	6a 00                	push   0x0
c000d892:	50                   	push   eax
c000d893:	e8 70 2d ff ff       	call   c0000608 <memset>
c000d898:	83 c4 10             	add    esp,0x10
c000d89b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d89f:	05 34 11 00 00       	add    eax,0x1134
c000d8a4:	83 ec 04             	sub    esp,0x4
c000d8a7:	68 2c 01 00 00       	push   0x12c
c000d8ac:	6a 00                	push   0x0
c000d8ae:	50                   	push   eax
c000d8af:	e8 54 2d ff ff       	call   c0000608 <memset>
c000d8b4:	83 c4 10             	add    esp,0x10
c000d8b7:	90                   	nop
c000d8b8:	5b                   	pop    ebx
c000d8b9:	5e                   	pop    esi
c000d8ba:	5f                   	pop    edi
c000d8bb:	c3                   	ret    

c000d8bc <VgaText::receiveKey(unsigned char)>:
c000d8bc:	55                   	push   ebp
c000d8bd:	57                   	push   edi
c000d8be:	56                   	push   esi
c000d8bf:	53                   	push   ebx
c000d8c0:	83 ec 1c             	sub    esp,0x1c
c000d8c3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d8c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d8cb:	84 db                	test   bl,bl
c000d8cd:	0f 84 c9 00 00 00    	je     c000d99c <VgaText::receiveKey(unsigned char)+0xe0>
c000d8d3:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d8d9:	80 fb 08             	cmp    bl,0x8
c000d8dc:	75 2c                	jne    c000d90a <VgaText::receiveKey(unsigned char)+0x4e>
c000d8de:	83 ec 0c             	sub    esp,0xc
c000d8e1:	57                   	push   edi
c000d8e2:	e8 3e 2d ff ff       	call   c0000625 <strlen>
c000d8e7:	83 c4 10             	add    esp,0x10
c000d8ea:	85 c0                	test   eax,eax
c000d8ec:	74 41                	je     c000d92f <VgaText::receiveKey(unsigned char)+0x73>
c000d8ee:	50                   	push   eax
c000d8ef:	50                   	push   eax
c000d8f0:	6a 08                	push   0x8
c000d8f2:	56                   	push   esi
c000d8f3:	e8 ac fc ff ff       	call   c000d5a4 <VgaText::putchar(char)>
c000d8f8:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8fb:	e8 25 2d ff ff       	call   c0000625 <strlen>
c000d900:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d908:	eb 22                	jmp    c000d92c <VgaText::receiveKey(unsigned char)+0x70>
c000d90a:	0f be c3             	movsx  eax,bl
c000d90d:	52                   	push   edx
c000d90e:	52                   	push   edx
c000d90f:	50                   	push   eax
c000d910:	56                   	push   esi
c000d911:	e8 8e fc ff ff       	call   c000d5a4 <VgaText::putchar(char)>
c000d916:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d91a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d91f:	59                   	pop    ecx
c000d920:	5d                   	pop    ebp
c000d921:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d925:	50                   	push   eax
c000d926:	57                   	push   edi
c000d927:	e8 32 2e ff ff       	call   c000075e <strcat>
c000d92c:	83 c4 10             	add    esp,0x10
c000d92f:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000d936:	75 05                	jne    c000d93d <VgaText::receiveKey(unsigned char)+0x81>
c000d938:	80 fb 0a             	cmp    bl,0xa
c000d93b:	75 53                	jne    c000d990 <VgaText::receiveKey(unsigned char)+0xd4>
c000d93d:	83 ec 0c             	sub    esp,0xc
c000d940:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000d946:	53                   	push   ebx
c000d947:	e8 d9 2c ff ff       	call   c0000625 <strlen>
c000d94c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d94f:	89 c5                	mov    ebp,eax
c000d951:	e8 cf 2c ff ff       	call   c0000625 <strlen>
c000d956:	83 c4 10             	add    esp,0x10
c000d959:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000d95d:	3d 2c 01 00 00       	cmp    eax,0x12c
c000d962:	76 10                	jbe    c000d974 <VgaText::receiveKey(unsigned char)+0xb8>
c000d964:	83 ec 0c             	sub    esp,0xc
c000d967:	68 b3 0a 02 c0       	push   0xc0020ab3
c000d96c:	e8 ad 78 00 00       	call   c001521e <Krnl::panic(char const*)>
c000d971:	83 c4 10             	add    esp,0x10
c000d974:	50                   	push   eax
c000d975:	50                   	push   eax
c000d976:	57                   	push   edi
c000d977:	53                   	push   ebx
c000d978:	e8 e1 2d ff ff       	call   c000075e <strcat>
c000d97d:	83 c4 0c             	add    esp,0xc
c000d980:	68 96 00 00 00       	push   0x96
c000d985:	6a 00                	push   0x0
c000d987:	57                   	push   edi
c000d988:	e8 7b 2c ff ff       	call   c0000608 <memset>
c000d98d:	83 c4 10             	add    esp,0x10
c000d990:	83 ec 0c             	sub    esp,0xc
c000d993:	56                   	push   esi
c000d994:	e8 d5 f9 ff ff       	call   c000d36e <VgaText::doUpdate()>
c000d999:	83 c4 10             	add    esp,0x10
c000d99c:	83 c4 1c             	add    esp,0x1c
c000d99f:	5b                   	pop    ebx
c000d9a0:	5e                   	pop    esi
c000d9a1:	5f                   	pop    edi
c000d9a2:	5d                   	pop    ebp
c000d9a3:	c3                   	ret    

c000d9a4 <VgaText::write(unsigned long long, void*, int*)>:
c000d9a4:	55                   	push   ebp
c000d9a5:	57                   	push   edi
c000d9a6:	56                   	push   esi
c000d9a7:	53                   	push   ebx
c000d9a8:	83 ec 0c             	sub    esp,0xc
c000d9ab:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d9af:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000d9b3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000d9b7:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000d9be:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000d9c1:	39 eb                	cmp    ebx,ebp
c000d9c3:	74 13                	je     c000d9d8 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000d9c5:	43                   	inc    ebx
c000d9c6:	50                   	push   eax
c000d9c7:	50                   	push   eax
c000d9c8:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000d9cc:	50                   	push   eax
c000d9cd:	56                   	push   esi
c000d9ce:	e8 d1 fb ff ff       	call   c000d5a4 <VgaText::putchar(char)>
c000d9d3:	83 c4 10             	add    esp,0x10
c000d9d6:	eb e9                	jmp    c000d9c1 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000d9d8:	83 ec 0c             	sub    esp,0xc
c000d9db:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000d9e2:	56                   	push   esi
c000d9e3:	e8 86 f9 ff ff       	call   c000d36e <VgaText::doUpdate()>
c000d9e8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d9ec:	89 38                	mov    DWORD PTR [eax],edi
c000d9ee:	83 c4 1c             	add    esp,0x1c
c000d9f1:	31 c0                	xor    eax,eax
c000d9f3:	5b                   	pop    ebx
c000d9f4:	5e                   	pop    esi
c000d9f5:	5f                   	pop    edi
c000d9f6:	5d                   	pop    ebp
c000d9f7:	c3                   	ret    

c000d9f8 <newTerminal(char*)>:
c000d9f8:	83 ec 28             	sub    esp,0x28
c000d9fb:	68 60 12 00 00       	push   0x1260
c000da00:	e8 2b 16 00 00       	call   c000f030 <operator new(unsigned long)>
c000da05:	5a                   	pop    edx
c000da06:	59                   	pop    ecx
c000da07:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000da0b:	50                   	push   eax
c000da0c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000da10:	e8 15 fd ff ff       	call   c000d72a <VgaText::VgaText(char const*)>
c000da15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000da19:	83 c4 2c             	add    esp,0x2c
c000da1c:	c3                   	ret    
c000da1d:	90                   	nop

c000da1e <TSS::TSS()>:
c000da1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da22:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000da29:	90                   	nop
c000da2a:	c3                   	ret    
c000da2b:	90                   	nop

c000da2c <TSS::setESP(unsigned long)>:
c000da2c:	55                   	push   ebp
c000da2d:	89 e5                	mov    ebp,esp
c000da2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da35:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000da38:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000da3b:	90                   	nop
c000da3c:	5d                   	pop    ebp
c000da3d:	c3                   	ret    

c000da3e <TSS::flush()>:
c000da3e:	55                   	push   ebp
c000da3f:	89 e5                	mov    ebp,esp
c000da41:	83 ec 10             	sub    esp,0x10
c000da44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da47:	8b 00                	mov    eax,DWORD PTR [eax]
c000da49:	83 c8 03             	or     eax,0x3
c000da4c:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000da50:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000da54:	66 89 d0             	mov    ax,dx
c000da57:	0f 00 d8             	ltr    ax
c000da5a:	90                   	nop
c000da5b:	c9                   	leave  
c000da5c:	c3                   	ret    
c000da5d:	90                   	nop

c000da5e <TSS::setup(unsigned long, unsigned long)>:
c000da5e:	55                   	push   ebp
c000da5f:	89 e5                	mov    ebp,esp
c000da61:	53                   	push   ebx
c000da62:	83 ec 14             	sub    esp,0x14
c000da65:	83 ec 0c             	sub    esp,0xc
c000da68:	6a 68                	push   0x68
c000da6a:	e8 fb e4 ff ff       	call   c000bf6a <malloc>
c000da6f:	83 c4 10             	add    esp,0x10
c000da72:	89 c2                	mov    edx,eax
c000da74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da77:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000da7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da7d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da80:	83 ec 04             	sub    esp,0x4
c000da83:	6a 68                	push   0x68
c000da85:	6a 00                	push   0x0
c000da87:	50                   	push   eax
c000da88:	e8 7b 2b ff ff       	call   c0000608 <memset>
c000da8d:	83 c4 10             	add    esp,0x10
c000da90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da93:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da96:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000da9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da9f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000daa2:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000daa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000daab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000daae:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000dab1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000dab4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dab7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000daba:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000dac0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dac3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dac6:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000dacc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dacf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dad2:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000dad8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dadb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dade:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000dae4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dae7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000daea:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000daed:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000daf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000daf3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000daf6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000daf9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000dafc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000daff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db02:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000db09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db0c:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000db0f:	e8 f1 12 01 00       	call   c001ee05 <CPU::readCR3()>
c000db14:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000db17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db1d:	83 ec 08             	sub    esp,0x8
c000db20:	50                   	push   eax
c000db21:	8d 45 f0             	lea    eax,[ebp-0x10]
c000db24:	50                   	push   eax
c000db25:	e8 16 dc ff ff       	call   c000b740 <GDTEntry::setBase(unsigned int)>
c000db2a:	83 c4 10             	add    esp,0x10
c000db2d:	83 ec 08             	sub    esp,0x8
c000db30:	6a 68                	push   0x68
c000db32:	8d 45 f0             	lea    eax,[ebp-0x10]
c000db35:	50                   	push   eax
c000db36:	e8 21 dc ff ff       	call   c000b75c <GDTEntry::setLimit(unsigned int)>
c000db3b:	83 c4 10             	add    esp,0x10
c000db3e:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000db42:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000db45:	83 e0 0f             	and    eax,0xf
c000db48:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000db4b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000db4e:	83 c8 40             	or     eax,0x40
c000db51:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000db54:	e8 55 65 00 00       	call   c00140ae <thisCPU()>
c000db59:	05 78 01 00 00       	add    eax,0x178
c000db5e:	83 ec 04             	sub    esp,0x4
c000db61:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000db64:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000db67:	50                   	push   eax
c000db68:	e8 23 dc ff ff       	call   c000b790 <GDT::addEntry(GDTEntry)>
c000db6d:	83 c4 10             	add    esp,0x10
c000db70:	89 c2                	mov    edx,eax
c000db72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db75:	89 10                	mov    DWORD PTR [eax],edx
c000db77:	e8 32 65 00 00       	call   c00140ae <thisCPU()>
c000db7c:	05 78 01 00 00       	add    eax,0x178
c000db81:	83 ec 0c             	sub    esp,0xc
c000db84:	50                   	push   eax
c000db85:	e8 4a dc ff ff       	call   c000b7d4 <GDT::flush()>
c000db8a:	83 c4 10             	add    esp,0x10
c000db8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db90:	8b 00                	mov    eax,DWORD PTR [eax]
c000db92:	83 ec 08             	sub    esp,0x8
c000db95:	50                   	push   eax
c000db96:	68 1c 0b 02 c0       	push   0xc0020b1c
c000db9b:	e8 7f 15 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000dba0:	83 c4 10             	add    esp,0x10
c000dba3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dba6:	8b 00                	mov    eax,DWORD PTR [eax]
c000dba8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000dbab:	c9                   	leave  
c000dbac:	c3                   	ret    
c000dbad:	90                   	nop

c000dbae <ReservedFilename::read(unsigned long long, void*, int*)>:
c000dbae:	55                   	push   ebp
c000dbaf:	57                   	push   edi
c000dbb0:	56                   	push   esi
c000dbb1:	53                   	push   ebx
c000dbb2:	83 ec 0c             	sub    esp,0xc
c000dbb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbb9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dbbd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbc0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dbc4:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000dbc8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dbcc:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dbd1:	75 08                	jne    c000dbdb <ReservedFilename::read(unsigned long long, void*, int*)+0x2d>
c000dbd3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dbd9:	eb 5e                	jmp    c000dc39 <ReservedFilename::read(unsigned long long, void*, int*)+0x8b>
c000dbdb:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dbe0:	75 3d                	jne    c000dc1f <ReservedFilename::read(unsigned long long, void*, int*)+0x71>
c000dbe2:	83 ec 0c             	sub    esp,0xc
c000dbe5:	68 3a 0b 02 c0       	push   0xc0020b3a
c000dbea:	e8 30 15 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000dbef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dbf4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dbf7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dbfd:	8b 10                	mov    edx,DWORD PTR [eax]
c000dbff:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000dc03:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dc07:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dc0b:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000dc0f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc13:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000dc16:	83 c4 1c             	add    esp,0x1c
c000dc19:	5b                   	pop    ebx
c000dc1a:	5e                   	pop    esi
c000dc1b:	5f                   	pop    edi
c000dc1c:	5d                   	pop    ebp
c000dc1d:	ff e0                	jmp    eax
c000dc1f:	89 c2                	mov    edx,eax
c000dc21:	83 e2 fd             	and    edx,0xfffffffd
c000dc24:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c000dc2a:	74 a7                	je     c000dbd3 <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000dc2c:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dc31:	83 e0 ef             	and    eax,0xffffffef
c000dc34:	83 f8 08             	cmp    eax,0x8
c000dc37:	76 9a                	jbe    c000dbd3 <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000dc39:	83 c4 0c             	add    esp,0xc
c000dc3c:	31 c0                	xor    eax,eax
c000dc3e:	5b                   	pop    ebx
c000dc3f:	5e                   	pop    esi
c000dc40:	5f                   	pop    edi
c000dc41:	5d                   	pop    ebp
c000dc42:	c3                   	ret    
c000dc43:	90                   	nop

c000dc44 <ReservedFilename::isAtty()>:
c000dc44:	83 ec 18             	sub    esp,0x18
c000dc47:	68 47 0b 02 c0       	push   0xc0020b47
c000dc4c:	e8 ce 14 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000dc51:	83 c4 10             	add    esp,0x10
c000dc54:	31 c0                	xor    eax,eax
c000dc56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dc5a:	81 7a 04 01 ff ff 0f 	cmp    DWORD PTR [edx+0x4],0xfffff01
c000dc61:	75 12                	jne    c000dc75 <ReservedFilename::isAtty()+0x31>
c000dc63:	83 ec 0c             	sub    esp,0xc
c000dc66:	68 5d 0b 02 c0       	push   0xc0020b5d
c000dc6b:	e8 af 14 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000dc70:	83 c4 10             	add    esp,0x10
c000dc73:	b0 01                	mov    al,0x1
c000dc75:	83 c4 0c             	add    esp,0xc
c000dc78:	c3                   	ret    
c000dc79:	90                   	nop

c000dc7a <ReservedFilename::write(unsigned long long, void*, int*)>:
c000dc7a:	55                   	push   ebp
c000dc7b:	57                   	push   edi
c000dc7c:	56                   	push   esi
c000dc7d:	53                   	push   ebx
c000dc7e:	83 ec 0c             	sub    esp,0xc
c000dc81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc85:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dc89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc8c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dc90:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000dc94:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dc98:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dc9d:	75 08                	jne    c000dca7 <ReservedFilename::write(unsigned long long, void*, int*)+0x2d>
c000dc9f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dca5:	eb 63                	jmp    c000dd0a <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000dca7:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dcac:	75 3d                	jne    c000dceb <ReservedFilename::write(unsigned long long, void*, int*)+0x71>
c000dcae:	83 ec 0c             	sub    esp,0xc
c000dcb1:	68 70 0b 02 c0       	push   0xc0020b70
c000dcb6:	e8 64 14 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000dcbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dcc0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dcc3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dcc9:	8b 10                	mov    edx,DWORD PTR [eax]
c000dccb:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000dccf:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dcd3:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dcd7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000dcdb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dcdf:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c000dce2:	83 c4 1c             	add    esp,0x1c
c000dce5:	5b                   	pop    ebx
c000dce6:	5e                   	pop    esi
c000dce7:	5f                   	pop    edi
c000dce8:	5d                   	pop    ebp
c000dce9:	ff e0                	jmp    eax
c000dceb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000dcf0:	75 04                	jne    c000dcf6 <ReservedFilename::write(unsigned long long, void*, int*)+0x7c>
c000dcf2:	89 33                	mov    DWORD PTR [ebx],esi
c000dcf4:	eb 14                	jmp    c000dd0a <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000dcf6:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000dcfb:	74 a2                	je     c000dc9f <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000dcfd:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dd02:	83 e0 ef             	and    eax,0xffffffef
c000dd05:	83 f8 08             	cmp    eax,0x8
c000dd08:	76 95                	jbe    c000dc9f <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000dd0a:	83 c4 0c             	add    esp,0xc
c000dd0d:	31 c0                	xor    eax,eax
c000dd0f:	5b                   	pop    ebx
c000dd10:	5e                   	pop    esi
c000dd11:	5f                   	pop    edi
c000dd12:	5d                   	pop    ebp
c000dd13:	c3                   	ret    

c000dd14 <UnixFile::getFileDescriptor()>:
c000dd14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd1b:	c3                   	ret    

c000dd1c <UnixFile::UnixFile(int)>:
c000dd1c:	53                   	push   ebx
c000dd1d:	83 ec 18             	sub    esp,0x18
c000dd20:	ba 8c 0c 02 c0       	mov    edx,0xc0020c8c
c000dd25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd29:	89 10                	mov    DWORD PTR [eax],edx
c000dd2b:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c000dd33:	0f 8f 4d 01 00 00    	jg     c000de86 <UnixFile::UnixFile(int)+0x16a>
c000dd39:	a1 20 32 02 c0       	mov    eax,ds:0xc0023220
c000dd3e:	8d 50 01             	lea    edx,[eax+0x1]
c000dd41:	89 15 20 32 02 c0    	mov    DWORD PTR ds:0xc0023220,edx
c000dd47:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dd4b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000dd4e:	83 ec 08             	sub    esp,0x8
c000dd51:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dd55:	68 d8 3e 02 c0       	push   0xc0023ed8
c000dd5a:	e8 1b 11 01 00       	call   c001ee7a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000dd5f:	83 c4 10             	add    esp,0x10
c000dd62:	a0 d4 3e 02 c0       	mov    al,ds:0xc0023ed4
c000dd67:	83 f0 01             	xor    eax,0x1
c000dd6a:	84 c0                	test   al,al
c000dd6c:	0f 84 15 01 00 00    	je     c000de87 <UnixFile::UnixFile(int)+0x16b>
c000dd72:	c6 05 d4 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023ed4,0x1
c000dd79:	83 ec 0c             	sub    esp,0xc
c000dd7c:	6a 0c                	push   0xc
c000dd7e:	e8 ad 12 00 00       	call   c000f030 <operator new(unsigned long)>
c000dd83:	83 c4 10             	add    esp,0x10
c000dd86:	89 c3                	mov    ebx,eax
c000dd88:	83 ec 08             	sub    esp,0x8
c000dd8b:	68 03 ff ff 0f       	push   0xfffff03
c000dd90:	53                   	push   ebx
c000dd91:	e8 f6 00 00 00       	call   c000de8c <ReservedFilename::ReservedFilename(int)>
c000dd96:	83 c4 10             	add    esp,0x10
c000dd99:	89 1d cc 3e 02 c0    	mov    DWORD PTR ds:0xc0023ecc,ebx
c000dd9f:	83 ec 0c             	sub    esp,0xc
c000dda2:	6a 0c                	push   0xc
c000dda4:	e8 87 12 00 00       	call   c000f030 <operator new(unsigned long)>
c000dda9:	83 c4 10             	add    esp,0x10
c000ddac:	89 c3                	mov    ebx,eax
c000ddae:	83 ec 08             	sub    esp,0x8
c000ddb1:	68 01 ff ff 0f       	push   0xfffff01
c000ddb6:	53                   	push   ebx
c000ddb7:	e8 d0 00 00 00       	call   c000de8c <ReservedFilename::ReservedFilename(int)>
c000ddbc:	83 c4 10             	add    esp,0x10
c000ddbf:	89 1d d0 3e 02 c0    	mov    DWORD PTR ds:0xc0023ed0,ebx
c000ddc5:	83 ec 0c             	sub    esp,0xc
c000ddc8:	6a 0c                	push   0xc
c000ddca:	e8 61 12 00 00       	call   c000f030 <operator new(unsigned long)>
c000ddcf:	83 c4 10             	add    esp,0x10
c000ddd2:	89 c3                	mov    ebx,eax
c000ddd4:	83 ec 08             	sub    esp,0x8
c000ddd7:	68 00 ff ff 0f       	push   0xfffff00
c000dddc:	53                   	push   ebx
c000dddd:	e8 aa 00 00 00       	call   c000de8c <ReservedFilename::ReservedFilename(int)>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	89 1d c4 3e 02 c0    	mov    DWORD PTR ds:0xc0023ec4,ebx
c000ddeb:	83 ec 0c             	sub    esp,0xc
c000ddee:	6a 0c                	push   0xc
c000ddf0:	e8 3b 12 00 00       	call   c000f030 <operator new(unsigned long)>
c000ddf5:	83 c4 10             	add    esp,0x10
c000ddf8:	89 c3                	mov    ebx,eax
c000ddfa:	83 ec 08             	sub    esp,0x8
c000ddfd:	68 02 ff ff 0f       	push   0xfffff02
c000de02:	53                   	push   ebx
c000de03:	e8 84 00 00 00       	call   c000de8c <ReservedFilename::ReservedFilename(int)>
c000de08:	83 c4 10             	add    esp,0x10
c000de0b:	89 1d c8 3e 02 c0    	mov    DWORD PTR ds:0xc0023ec8,ebx
c000de11:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000de19:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000de1e:	7f 67                	jg     c000de87 <UnixFile::UnixFile(int)+0x16b>
c000de20:	83 ec 0c             	sub    esp,0xc
c000de23:	6a 0c                	push   0xc
c000de25:	e8 06 12 00 00       	call   c000f030 <operator new(unsigned long)>
c000de2a:	83 c4 10             	add    esp,0x10
c000de2d:	89 c3                	mov    ebx,eax
c000de2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de33:	05 10 ff ff 0f       	add    eax,0xfffff10
c000de38:	83 ec 08             	sub    esp,0x8
c000de3b:	50                   	push   eax
c000de3c:	53                   	push   ebx
c000de3d:	e8 4a 00 00 00       	call   c000de8c <ReservedFilename::ReservedFilename(int)>
c000de42:	83 c4 10             	add    esp,0x10
c000de45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de49:	89 1c 85 a0 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc160],ebx
c000de50:	83 ec 0c             	sub    esp,0xc
c000de53:	6a 0c                	push   0xc
c000de55:	e8 d6 11 00 00       	call   c000f030 <operator new(unsigned long)>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 c3                	mov    ebx,eax
c000de5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de63:	05 20 ff ff 0f       	add    eax,0xfffff20
c000de68:	83 ec 08             	sub    esp,0x8
c000de6b:	50                   	push   eax
c000de6c:	53                   	push   ebx
c000de6d:	e8 1a 00 00 00       	call   c000de8c <ReservedFilename::ReservedFilename(int)>
c000de72:	83 c4 10             	add    esp,0x10
c000de75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de79:	89 1c 85 60 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc1a0],ebx
c000de80:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000de84:	eb 93                	jmp    c000de19 <UnixFile::UnixFile(int)+0xfd>
c000de86:	90                   	nop
c000de87:	83 c4 18             	add    esp,0x18
c000de8a:	5b                   	pop    ebx
c000de8b:	c3                   	ret    

c000de8c <ReservedFilename::ReservedFilename(int)>:
c000de8c:	83 ec 0c             	sub    esp,0xc
c000de8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de93:	83 ec 08             	sub    esp,0x8
c000de96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de9a:	50                   	push   eax
c000de9b:	e8 7c fe ff ff       	call   c000dd1c <UnixFile::UnixFile(int)>
c000dea0:	83 c4 10             	add    esp,0x10
c000dea3:	ba a8 0c 02 c0       	mov    edx,0xc0020ca8
c000dea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deac:	89 10                	mov    DWORD PTR [eax],edx
c000deae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deb2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000deb6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000deb9:	90                   	nop
c000deba:	83 c4 0c             	add    esp,0xc
c000debd:	c3                   	ret    

c000debe <UnixFile::~UnixFile()>:
c000debe:	83 ec 1c             	sub    esp,0x1c
c000dec1:	ba 8c 0c 02 c0       	mov    edx,0xc0020c8c
c000dec6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000deca:	89 10                	mov    DWORD PTR [eax],edx
c000decc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ded0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ded3:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000ded8:	7f 73                	jg     c000df4d <UnixFile::~UnixFile()+0x8f>
c000deda:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dee2:	83 ec 0c             	sub    esp,0xc
c000dee5:	68 d8 3e 02 c0       	push   0xc0023ed8
c000deea:	e8 5f 10 01 00       	call   c001ef4e <LinkedList<UnixFile>::getFirstElement()>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000def6:	83 ec 0c             	sub    esp,0xc
c000def9:	68 d8 3e 02 c0       	push   0xc0023ed8
c000defe:	e8 53 10 01 00       	call   c001ef56 <LinkedList<UnixFile>::removeFirst()>
c000df03:	83 c4 10             	add    esp,0x10
c000df06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000df0a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000df0e:	74 40                	je     c000df50 <UnixFile::~UnixFile()+0x92>
c000df10:	83 ec 08             	sub    esp,0x8
c000df13:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000df17:	68 d8 3e 02 c0       	push   0xc0023ed8
c000df1c:	e8 59 0f 01 00       	call   c001ee7a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000df21:	83 c4 10             	add    esp,0x10
c000df24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df28:	8d 50 01             	lea    edx,[eax+0x1]
c000df2b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df2f:	3d 88 13 00 00       	cmp    eax,0x1388
c000df34:	0f 94 c0             	sete   al
c000df37:	84 c0                	test   al,al
c000df39:	74 a7                	je     c000dee2 <UnixFile::~UnixFile()+0x24>
c000df3b:	83 ec 0c             	sub    esp,0xc
c000df3e:	68 64 0c 02 c0       	push   0xc0020c64
c000df43:	e8 d6 72 00 00       	call   c001521e <Krnl::panic(char const*)>
c000df48:	83 c4 10             	add    esp,0x10
c000df4b:	eb 95                	jmp    c000dee2 <UnixFile::~UnixFile()+0x24>
c000df4d:	90                   	nop
c000df4e:	eb 01                	jmp    c000df51 <UnixFile::~UnixFile()+0x93>
c000df50:	90                   	nop
c000df51:	90                   	nop
c000df52:	83 c4 1c             	add    esp,0x1c
c000df55:	c3                   	ret    

c000df56 <UnixFile::~UnixFile()>:
c000df56:	83 ec 0c             	sub    esp,0xc
c000df59:	83 ec 0c             	sub    esp,0xc
c000df5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df60:	e8 59 ff ff ff       	call   c000debe <UnixFile::~UnixFile()>
c000df65:	83 c4 10             	add    esp,0x10
c000df68:	83 ec 08             	sub    esp,0x8
c000df6b:	6a 0c                	push   0xc
c000df6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df71:	e8 c9 10 00 00       	call   c000f03f <operator delete(void*, unsigned long)>
c000df76:	83 c4 10             	add    esp,0x10
c000df79:	83 c4 0c             	add    esp,0xc
c000df7c:	c3                   	ret    
c000df7d:	90                   	nop

c000df7e <ReservedFilename::~ReservedFilename()>:
c000df7e:	83 ec 0c             	sub    esp,0xc
c000df81:	ba a8 0c 02 c0       	mov    edx,0xc0020ca8
c000df86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df8a:	89 10                	mov    DWORD PTR [eax],edx
c000df8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df90:	83 ec 0c             	sub    esp,0xc
c000df93:	50                   	push   eax
c000df94:	e8 25 ff ff ff       	call   c000debe <UnixFile::~UnixFile()>
c000df99:	83 c4 10             	add    esp,0x10
c000df9c:	90                   	nop
c000df9d:	83 c4 0c             	add    esp,0xc
c000dfa0:	c3                   	ret    
c000dfa1:	90                   	nop

c000dfa2 <ReservedFilename::~ReservedFilename()>:
c000dfa2:	83 ec 0c             	sub    esp,0xc
c000dfa5:	83 ec 0c             	sub    esp,0xc
c000dfa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfac:	e8 cd ff ff ff       	call   c000df7e <ReservedFilename::~ReservedFilename()>
c000dfb1:	83 c4 10             	add    esp,0x10
c000dfb4:	83 ec 08             	sub    esp,0x8
c000dfb7:	6a 0c                	push   0xc
c000dfb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfbd:	e8 7d 10 00 00       	call   c000f03f <operator delete(void*, unsigned long)>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	83 c4 0c             	add    esp,0xc
c000dfc8:	c3                   	ret    

c000dfc9 <getFromFileDescriptor(int)>:
c000dfc9:	53                   	push   ebx
c000dfca:	83 ec 08             	sub    esp,0x8
c000dfcd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dfd1:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000dfd7:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000dfdd:	7f 33                	jg     c000e012 <getFromFileDescriptor(int)+0x49>
c000dfdf:	83 ec 0c             	sub    esp,0xc
c000dfe2:	68 d8 3e 02 c0       	push   0xc0023ed8
c000dfe7:	e8 62 0f 01 00       	call   c001ef4e <LinkedList<UnixFile>::getFirstElement()>
c000dfec:	83 c4 10             	add    esp,0x10
c000dfef:	85 c0                	test   eax,eax
c000dff1:	75 07                	jne    c000dffa <getFromFileDescriptor(int)+0x31>
c000dff3:	31 c0                	xor    eax,eax
c000dff5:	e9 98 00 00 00       	jmp    c000e092 <getFromFileDescriptor(int)+0xc9>
c000dffa:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000dffd:	0f 84 8f 00 00 00    	je     c000e092 <getFromFileDescriptor(int)+0xc9>
c000e003:	52                   	push   edx
c000e004:	52                   	push   edx
c000e005:	50                   	push   eax
c000e006:	68 d8 3e 02 c0       	push   0xc0023ed8
c000e00b:	e8 e8 0f 01 00       	call   c001eff8 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000e010:	eb da                	jmp    c000dfec <getFromFileDescriptor(int)+0x23>
c000e012:	83 ec 0c             	sub    esp,0xc
c000e015:	68 7d 0b 02 c0       	push   0xc0020b7d
c000e01a:	e8 00 11 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000e01f:	83 c4 10             	add    esp,0x10
c000e022:	a1 cc 3e 02 c0       	mov    eax,ds:0xc0023ecc
c000e027:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000e02d:	74 63                	je     c000e092 <getFromFileDescriptor(int)+0xc9>
c000e02f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000e035:	75 17                	jne    c000e04e <getFromFileDescriptor(int)+0x85>
c000e037:	83 ec 0c             	sub    esp,0xc
c000e03a:	68 a4 0b 02 c0       	push   0xc0020ba4
c000e03f:	e8 db 10 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000e044:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c000e049:	83 c4 10             	add    esp,0x10
c000e04c:	eb 44                	jmp    c000e092 <getFromFileDescriptor(int)+0xc9>
c000e04e:	a1 c8 3e 02 c0       	mov    eax,ds:0xc0023ec8
c000e053:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000e059:	74 37                	je     c000e092 <getFromFileDescriptor(int)+0xc9>
c000e05b:	a1 c4 3e 02 c0       	mov    eax,ds:0xc0023ec4
c000e060:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000e066:	74 2a                	je     c000e092 <getFromFileDescriptor(int)+0xc9>
c000e068:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000e06e:	83 f8 08             	cmp    eax,0x8
c000e071:	77 09                	ja     c000e07c <getFromFileDescriptor(int)+0xb3>
c000e073:	8b 04 85 a0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc160]
c000e07a:	eb 16                	jmp    c000e092 <getFromFileDescriptor(int)+0xc9>
c000e07c:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000e082:	83 fb 08             	cmp    ebx,0x8
c000e085:	0f 87 68 ff ff ff    	ja     c000dff3 <getFromFileDescriptor(int)+0x2a>
c000e08b:	8b 04 9d 60 3e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdc1a0]
c000e092:	83 c4 08             	add    esp,0x8
c000e095:	5b                   	pop    ebx
c000e096:	c3                   	ret    

c000e097 <__static_initialization_and_destruction_0(int, int)>:
c000e097:	83 ec 0c             	sub    esp,0xc
c000e09a:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e09f:	75 34                	jne    c000e0d5 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e0a1:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000e0a9:	75 2a                	jne    c000e0d5 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e0ab:	83 ec 0c             	sub    esp,0xc
c000e0ae:	68 d8 3e 02 c0       	push   0xc0023ed8
c000e0b3:	e8 6a 0d 01 00       	call   c001ee22 <LinkedList<UnixFile>::LinkedList()>
c000e0b8:	83 c4 10             	add    esp,0x10
c000e0bb:	83 ec 04             	sub    esp,0x4
c000e0be:	68 a8 31 02 c0       	push   0xc00231a8
c000e0c3:	68 d8 3e 02 c0       	push   0xc0023ed8
c000e0c8:	68 20 ee 01 c0       	push   0xc001ee20
c000e0cd:	e8 e9 0e 00 00       	call   c000efbb <__cxa_atexit>
c000e0d2:	83 c4 10             	add    esp,0x10
c000e0d5:	90                   	nop
c000e0d6:	83 c4 0c             	add    esp,0xc
c000e0d9:	c3                   	ret    

c000e0da <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000e0da:	83 ec 0c             	sub    esp,0xc
c000e0dd:	83 ec 08             	sub    esp,0x8
c000e0e0:	68 ff ff 00 00       	push   0xffff
c000e0e5:	6a 01                	push   0x1
c000e0e7:	e8 ab ff ff ff       	call   c000e097 <__static_initialization_and_destruction_0(int, int)>
c000e0ec:	83 c4 10             	add    esp,0x10
c000e0ef:	83 c4 0c             	add    esp,0xc
c000e0f2:	c3                   	ret    
c000e0f3:	90                   	nop

c000e0f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000e0f4:	53                   	push   ebx
c000e0f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e0f9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e0fd:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000e103:	89 c8                	mov    eax,ecx
c000e105:	d1 e8                	shr    eax,1
c000e107:	03 05 28 32 02 c0    	add    eax,DWORD PTR ds:0xc0023228
c000e10d:	83 e1 01             	and    ecx,0x1
c000e110:	8a 10                	mov    dl,BYTE PTR [eax]
c000e112:	75 09                	jne    c000e11d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000e114:	83 e2 f0             	and    edx,0xfffffff0
c000e117:	09 da                	or     edx,ebx
c000e119:	88 10                	mov    BYTE PTR [eax],dl
c000e11b:	5b                   	pop    ebx
c000e11c:	c3                   	ret    
c000e11d:	c1 e3 04             	shl    ebx,0x4
c000e120:	83 e2 0f             	and    edx,0xf
c000e123:	09 da                	or     edx,ebx
c000e125:	88 10                	mov    BYTE PTR [eax],dl
c000e127:	5b                   	pop    ebx
c000e128:	c3                   	ret    

c000e129 <Virt::getPageState(unsigned long)>:
c000e129:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e12d:	8b 0d 28 32 02 c0    	mov    ecx,DWORD PTR ds:0xc0023228
c000e133:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000e139:	89 d0                	mov    eax,edx
c000e13b:	d1 e8                	shr    eax,1
c000e13d:	83 e2 01             	and    edx,0x1
c000e140:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000e143:	75 04                	jne    c000e149 <Virt::getPageState(unsigned long)+0x20>
c000e145:	83 e0 0f             	and    eax,0xf
c000e148:	c3                   	ret    
c000e149:	c0 e8 04             	shr    al,0x4
c000e14c:	c3                   	ret    

c000e14d <Virt::allocateKernelVirtualPages(int)>:
c000e14d:	55                   	push   ebp
c000e14e:	31 ed                	xor    ebp,ebp
c000e150:	57                   	push   edi
c000e151:	56                   	push   esi
c000e152:	53                   	push   ebx
c000e153:	31 db                	xor    ebx,ebx
c000e155:	83 ec 1c             	sub    esp,0x1c
c000e158:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e15c:	8b 3d 24 32 02 c0    	mov    edi,DWORD PTR ds:0xc0023224
c000e162:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e167:	57                   	push   edi
c000e168:	e8 bc ff ff ff       	call   c000e129 <Virt::getPageState(unsigned long)>
c000e16d:	5a                   	pop    edx
c000e16e:	84 c0                	test   al,al
c000e170:	75 3a                	jne    c000e1ac <Virt::allocateKernelVirtualPages(int)+0x5f>
c000e172:	85 db                	test   ebx,ebx
c000e174:	75 02                	jne    c000e178 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000e176:	89 fd                	mov    ebp,edi
c000e178:	43                   	inc    ebx
c000e179:	39 f3                	cmp    ebx,esi
c000e17b:	74 5a                	je     c000e1d7 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000e17d:	47                   	inc    edi
c000e17e:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e184:	76 31                	jbe    c000e1b7 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000e186:	c7 05 24 32 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023224,0xc8000
c000e190:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e195:	75 28                	jne    c000e1bf <Virt::allocateKernelVirtualPages(int)+0x72>
c000e197:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e19c:	bf 00 80 0c 00       	mov    edi,0xc8000
c000e1a1:	57                   	push   edi
c000e1a2:	e8 82 ff ff ff       	call   c000e129 <Virt::getPageState(unsigned long)>
c000e1a7:	5a                   	pop    edx
c000e1a8:	84 c0                	test   al,al
c000e1aa:	74 c6                	je     c000e172 <Virt::allocateKernelVirtualPages(int)+0x25>
c000e1ac:	31 db                	xor    ebx,ebx
c000e1ae:	47                   	inc    edi
c000e1af:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e1b5:	77 cf                	ja     c000e186 <Virt::allocateKernelVirtualPages(int)+0x39>
c000e1b7:	89 3d 24 32 02 c0    	mov    DWORD PTR ds:0xc0023224,edi
c000e1bd:	eb a8                	jmp    c000e167 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e1bf:	83 ec 0c             	sub    esp,0xc
c000e1c2:	68 bc 0c 02 c0       	push   0xc0020cbc
c000e1c7:	e8 52 70 00 00       	call   c001521e <Krnl::panic(char const*)>
c000e1cc:	8b 3d 24 32 02 c0    	mov    edi,DWORD PTR ds:0xc0023224
c000e1d2:	83 c4 10             	add    esp,0x10
c000e1d5:	eb 90                	jmp    c000e167 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e1d7:	89 2d 24 32 02 c0    	mov    DWORD PTR ds:0xc0023224,ebp
c000e1dd:	4b                   	dec    ebx
c000e1de:	74 5f                	je     c000e23f <Virt::allocateKernelVirtualPages(int)+0xf2>
c000e1e0:	85 f6                	test   esi,esi
c000e1e2:	74 3d                	je     c000e221 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e1e4:	89 e8                	mov    eax,ebp
c000e1e6:	31 db                	xor    ebx,ebx
c000e1e8:	8d 7e ff             	lea    edi,[esi-0x1]
c000e1eb:	eb 14                	jmp    c000e201 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000e1ed:	6a 01                	push   0x1
c000e1ef:	43                   	inc    ebx
c000e1f0:	50                   	push   eax
c000e1f1:	e8 fe fe ff ff       	call   c000e0f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e1f6:	58                   	pop    eax
c000e1f7:	39 f3                	cmp    ebx,esi
c000e1f9:	5a                   	pop    edx
c000e1fa:	74 25                	je     c000e221 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e1fc:	a1 24 32 02 c0       	mov    eax,ds:0xc0023224
c000e201:	8d 50 01             	lea    edx,[eax+0x1]
c000e204:	85 db                	test   ebx,ebx
c000e206:	89 15 24 32 02 c0    	mov    DWORD PTR ds:0xc0023224,edx
c000e20c:	74 20                	je     c000e22e <Virt::allocateKernelVirtualPages(int)+0xe1>
c000e20e:	39 df                	cmp    edi,ebx
c000e210:	75 db                	jne    c000e1ed <Virt::allocateKernelVirtualPages(int)+0xa0>
c000e212:	6a 03                	push   0x3
c000e214:	43                   	inc    ebx
c000e215:	50                   	push   eax
c000e216:	e8 d9 fe ff ff       	call   c000e0f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e21b:	59                   	pop    ecx
c000e21c:	39 f3                	cmp    ebx,esi
c000e21e:	58                   	pop    eax
c000e21f:	75 db                	jne    c000e1fc <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e221:	83 c4 1c             	add    esp,0x1c
c000e224:	89 e8                	mov    eax,ebp
c000e226:	5b                   	pop    ebx
c000e227:	c1 e0 0c             	shl    eax,0xc
c000e22a:	5e                   	pop    esi
c000e22b:	5f                   	pop    edi
c000e22c:	5d                   	pop    ebp
c000e22d:	c3                   	ret    
c000e22e:	6a 02                	push   0x2
c000e230:	bb 01 00 00 00       	mov    ebx,0x1
c000e235:	50                   	push   eax
c000e236:	e8 b9 fe ff ff       	call   c000e0f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e23b:	58                   	pop    eax
c000e23c:	5a                   	pop    edx
c000e23d:	eb bd                	jmp    c000e1fc <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e23f:	6a 04                	push   0x4
c000e241:	8d 45 01             	lea    eax,[ebp+0x1]
c000e244:	55                   	push   ebp
c000e245:	a3 24 32 02 c0       	mov    ds:0xc0023224,eax
c000e24a:	e8 a5 fe ff ff       	call   c000e0f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e24f:	59                   	pop    ecx
c000e250:	89 e8                	mov    eax,ebp
c000e252:	5b                   	pop    ebx
c000e253:	c1 e0 0c             	shl    eax,0xc
c000e256:	83 c4 1c             	add    esp,0x1c
c000e259:	5b                   	pop    ebx
c000e25a:	5e                   	pop    esi
c000e25b:	5f                   	pop    edi
c000e25c:	5d                   	pop    ebp
c000e25d:	c3                   	ret    

c000e25e <Virt::virtualMemorySetup()>:
c000e25e:	53                   	push   ebx
c000e25f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e264:	83 ec 08             	sub    esp,0x8
c000e267:	6a 0f                	push   0xf
c000e269:	53                   	push   ebx
c000e26a:	43                   	inc    ebx
c000e26b:	e8 84 fe ff ff       	call   c000e0f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e270:	59                   	pop    ecx
c000e271:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e277:	58                   	pop    eax
c000e278:	75 ed                	jne    c000e267 <Virt::virtualMemorySetup()+0x9>
c000e27a:	83 ec 08             	sub    esp,0x8
c000e27d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e282:	68 00 00 00 c8       	push   0xc8000000
c000e287:	68 43 0e 02 c0       	push   0xc0020e43
c000e28c:	e8 8e 0e 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000e291:	58                   	pop    eax
c000e292:	5a                   	pop    edx
c000e293:	68 00 f0 ff ef       	push   0xeffff000
c000e298:	68 57 0e 02 c0       	push   0xc0020e57
c000e29d:	e8 7d 0e 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000e2a2:	83 c4 10             	add    esp,0x10
c000e2a5:	83 ec 08             	sub    esp,0x8
c000e2a8:	6a 00                	push   0x0
c000e2aa:	53                   	push   ebx
c000e2ab:	43                   	inc    ebx
c000e2ac:	e8 43 fe ff ff       	call   c000e0f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2b1:	83 c4 10             	add    esp,0x10
c000e2b4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e2ba:	75 e9                	jne    c000e2a5 <Virt::virtualMemorySetup()+0x47>
c000e2bc:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000e2c1:	83 ec 08             	sub    esp,0x8
c000e2c4:	6a 0f                	push   0xf
c000e2c6:	53                   	push   ebx
c000e2c7:	43                   	inc    ebx
c000e2c8:	e8 27 fe ff ff       	call   c000e0f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2cd:	83 c4 10             	add    esp,0x10
c000e2d0:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000e2d6:	75 e9                	jne    c000e2c1 <Virt::virtualMemorySetup()+0x63>
c000e2d8:	83 c4 08             	add    esp,0x8
c000e2db:	5b                   	pop    ebx
c000e2dc:	c3                   	ret    

c000e2dd <Virt::getAKernelVAS()>:
c000e2dd:	a1 e4 3e 02 c0       	mov    eax,ds:0xc0023ee4
c000e2e2:	c3                   	ret    

c000e2e3 <Virt::setupPageSwapping(int)>:
c000e2e3:	57                   	push   edi
c000e2e4:	56                   	push   esi
c000e2e5:	53                   	push   ebx
c000e2e6:	83 ec 1c             	sub    esp,0x1c
c000e2e9:	68 14 01 00 00       	push   0x114
c000e2ee:	e8 3d 0d 00 00       	call   c000f030 <operator new(unsigned long)>
c000e2f3:	83 c4 0c             	add    esp,0xc
c000e2f6:	89 c6                	mov    esi,eax
c000e2f8:	ff 35 d4 51 02 c0    	push   DWORD PTR ds:0xc00251d4
c000e2fe:	68 6b 0e 02 c0       	push   0xc0020e6b
c000e303:	50                   	push   eax
c000e304:	e8 45 13 00 00       	call   c000f64e <File::File(char const*, Process*)>
c000e309:	89 34 24             	mov    DWORD PTR [esp],esi
c000e30c:	e8 19 15 00 00       	call   c000f82a <File::unlink()>
c000e311:	58                   	pop    eax
c000e312:	5a                   	pop    edx
c000e313:	6a 12                	push   0x12
c000e315:	56                   	push   esi
c000e316:	e8 97 13 00 00       	call   c000f6b2 <File::open(FileOpenMode)>
c000e31b:	83 c4 10             	add    esp,0x10
c000e31e:	85 c0                	test   eax,eax
c000e320:	0f 85 bf 00 00 00    	jne    c000e3e5 <Virt::setupPageSwapping(int)+0x102>
c000e326:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e32a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e332:	c1 e3 08             	shl    ebx,0x8
c000e335:	83 ec 0c             	sub    esp,0xc
c000e338:	68 00 00 01 00       	push   0x10000
c000e33d:	e8 28 dc ff ff       	call   c000bf6a <malloc>
c000e342:	83 c4 0c             	add    esp,0xc
c000e345:	89 c7                	mov    edi,eax
c000e347:	68 00 00 01 00       	push   0x10000
c000e34c:	6a 00                	push   0x0
c000e34e:	50                   	push   eax
c000e34f:	e8 b4 22 ff ff       	call   c0000608 <memset>
c000e354:	83 c4 10             	add    esp,0x10
c000e357:	85 db                	test   ebx,ebx
c000e359:	79 03                	jns    c000e35e <Virt::setupPageSwapping(int)+0x7b>
c000e35b:	83 c3 0f             	add    ebx,0xf
c000e35e:	c1 fb 04             	sar    ebx,0x4
c000e361:	4b                   	dec    ebx
c000e362:	83 fb ff             	cmp    ebx,0xffffffff
c000e365:	74 4b                	je     c000e3b2 <Virt::setupPageSwapping(int)+0xcf>
c000e367:	83 ec 0c             	sub    esp,0xc
c000e36a:	8b 06                	mov    eax,DWORD PTR [esi]
c000e36c:	8d 54 24 18          	lea    edx,[esp+0x18]
c000e370:	52                   	push   edx
c000e371:	57                   	push   edi
c000e372:	6a 00                	push   0x0
c000e374:	68 00 00 01 00       	push   0x10000
c000e379:	56                   	push   esi
c000e37a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e37d:	83 c4 20             	add    esp,0x20
c000e380:	85 c0                	test   eax,eax
c000e382:	75 4e                	jne    c000e3d2 <Virt::setupPageSwapping(int)+0xef>
c000e384:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e388:	3d 00 00 01 00       	cmp    eax,0x10000
c000e38d:	74 d2                	je     c000e361 <Virt::setupPageSwapping(int)+0x7e>
c000e38f:	83 ec 08             	sub    esp,0x8
c000e392:	4b                   	dec    ebx
c000e393:	50                   	push   eax
c000e394:	68 be 0e 02 c0       	push   0xc0020ebe
c000e399:	e8 81 0d 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000e39e:	c7 04 24 c7 0e 02 c0 	mov    DWORD PTR [esp],0xc0020ec7
c000e3a5:	e8 74 6e 00 00       	call   c001521e <Krnl::panic(char const*)>
c000e3aa:	83 c4 10             	add    esp,0x10
c000e3ad:	83 fb ff             	cmp    ebx,0xffffffff
c000e3b0:	75 b5                	jne    c000e367 <Virt::setupPageSwapping(int)+0x84>
c000e3b2:	83 ec 0c             	sub    esp,0xc
c000e3b5:	56                   	push   esi
c000e3b6:	e8 55 13 00 00       	call   c000f710 <File::close()>
c000e3bb:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e3be:	e8 c7 db ff ff       	call   c000bf8a <rfree>
c000e3c3:	89 34 24             	mov    DWORD PTR [esp],esi
c000e3c6:	8b 06                	mov    eax,DWORD PTR [esi]
c000e3c8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e3cb:	83 c4 20             	add    esp,0x20
c000e3ce:	5b                   	pop    ebx
c000e3cf:	5e                   	pop    esi
c000e3d0:	5f                   	pop    edi
c000e3d1:	c3                   	ret    
c000e3d2:	83 ec 08             	sub    esp,0x8
c000e3d5:	50                   	push   eax
c000e3d6:	68 a6 0e 02 c0       	push   0xc0020ea6
c000e3db:	e8 3f 0d 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000e3e0:	83 c4 10             	add    esp,0x10
c000e3e3:	eb 9f                	jmp    c000e384 <Virt::setupPageSwapping(int)+0xa1>
c000e3e5:	83 ec 08             	sub    esp,0x8
c000e3e8:	50                   	push   eax
c000e3e9:	68 82 0e 02 c0       	push   0xc0020e82
c000e3ee:	e8 2c 0d 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000e3f3:	c7 04 24 8b 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e8b
c000e3fa:	e8 1f 6e 00 00       	call   c001521e <Krnl::panic(char const*)>
c000e3ff:	83 c4 10             	add    esp,0x10
c000e402:	e9 1f ff ff ff       	jmp    c000e326 <Virt::setupPageSwapping(int)+0x43>
c000e407:	90                   	nop

c000e408 <VAS::VAS()>:
c000e408:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e40c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e413:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e417:	a3 e4 3e 02 c0       	mov    ds:0xc0023ee4,eax
c000e41c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e420:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000e424:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e428:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e42b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e42f:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e436:	90                   	nop
c000e437:	c3                   	ret    

c000e438 <VAS::VAS(VAS*)>:
c000e438:	83 ec 0c             	sub    esp,0xc
c000e43b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e43f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e446:	83 ec 0c             	sub    esp,0xc
c000e449:	68 dc 0c 02 c0       	push   0xc0020cdc
c000e44e:	e8 cb 6d 00 00       	call   c001521e <Krnl::panic(char const*)>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	90                   	nop
c000e457:	83 c4 0c             	add    esp,0xc
c000e45a:	c3                   	ret    
c000e45b:	90                   	nop

c000e45c <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e45c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e460:	89 c2                	mov    edx,eax
c000e462:	c1 e8 0a             	shr    eax,0xa
c000e465:	c1 ea 16             	shr    edx,0x16
c000e468:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e46d:	19 c9                	sbb    ecx,ecx
c000e46f:	c1 e2 0c             	shl    edx,0xc
c000e472:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e478:	25 fc 0f 00 00       	and    eax,0xffc
c000e47d:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e484:	01 d0                	add    eax,edx
c000e486:	c3                   	ret    
c000e487:	90                   	nop

c000e488 <VAS::getPageTableEntry(unsigned long)>:
c000e488:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e48c:	89 ca                	mov    edx,ecx
c000e48e:	c1 e9 0a             	shr    ecx,0xa
c000e491:	c1 ea 16             	shr    edx,0x16
c000e494:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e49a:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e4a0:	c1 e0 0c             	shl    eax,0xc
c000e4a3:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e4a6:	c3                   	ret    

c000e4a7 <Virt::freeKernelVirtualPages(unsigned long)>:
c000e4a7:	57                   	push   edi
c000e4a8:	56                   	push   esi
c000e4a9:	be 01 00 00 00       	mov    esi,0x1
c000e4ae:	53                   	push   ebx
c000e4af:	83 ec 10             	sub    esp,0x10
c000e4b2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e4b6:	c1 eb 0c             	shr    ebx,0xc
c000e4b9:	eb 3f                	jmp    c000e4fa <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000e4bb:	e8 1d fe ff ff       	call   c000e2dd <Virt::getAKernelVAS()>
c000e4c0:	83 ec 08             	sub    esp,0x8
c000e4c3:	57                   	push   edi
c000e4c4:	50                   	push   eax
c000e4c5:	e8 be ff ff ff       	call   c000e488 <VAS::getPageTableEntry(unsigned long)>
c000e4ca:	83 c4 10             	add    esp,0x10
c000e4cd:	8b 00                	mov    eax,DWORD PTR [eax]
c000e4cf:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e4d3:	f6 c4 04             	test   ah,0x4
c000e4d6:	75 5f                	jne    c000e537 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000e4d8:	80 fa 04             	cmp    dl,0x4
c000e4db:	74 78                	je     c000e555 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000e4dd:	80 fa 02             	cmp    dl,0x2
c000e4e0:	0f 84 88 00 00 00    	je     c000e56e <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000e4e6:	80 fa 03             	cmp    dl,0x3
c000e4e9:	0f 84 ad 00 00 00    	je     c000e59c <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000e4ef:	fe ca                	dec    dl
c000e4f1:	0f 84 92 00 00 00    	je     c000e589 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000e4f7:	43                   	inc    ebx
c000e4f8:	31 f6                	xor    esi,esi
c000e4fa:	53                   	push   ebx
c000e4fb:	e8 29 fc ff ff       	call   c000e129 <Virt::getPageState(unsigned long)>
c000e500:	5f                   	pop    edi
c000e501:	89 df                	mov    edi,ebx
c000e503:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e507:	c1 e7 0c             	shl    edi,0xc
c000e50a:	84 c0                	test   al,al
c000e50c:	75 ad                	jne    c000e4bb <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e50e:	83 ec 0c             	sub    esp,0xc
c000e511:	68 cd 0e 02 c0       	push   0xc0020ecd
c000e516:	e8 03 6d 00 00       	call   c001521e <Krnl::panic(char const*)>
c000e51b:	e8 bd fd ff ff       	call   c000e2dd <Virt::getAKernelVAS()>
c000e520:	5a                   	pop    edx
c000e521:	59                   	pop    ecx
c000e522:	57                   	push   edi
c000e523:	50                   	push   eax
c000e524:	e8 5f ff ff ff       	call   c000e488 <VAS::getPageTableEntry(unsigned long)>
c000e529:	83 c4 10             	add    esp,0x10
c000e52c:	8b 00                	mov    eax,DWORD PTR [eax]
c000e52e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e532:	f6 c4 04             	test   ah,0x4
c000e535:	74 c0                	je     c000e4f7 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e537:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e53b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e540:	83 ec 0c             	sub    esp,0xc
c000e543:	50                   	push   eax
c000e544:	e8 41 df ff ff       	call   c000c48a <Phys::freePage(unsigned long)>
c000e549:	83 c4 10             	add    esp,0x10
c000e54c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e550:	80 fa 04             	cmp    dl,0x4
c000e553:	75 88                	jne    c000e4dd <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000e555:	89 f0                	mov    eax,esi
c000e557:	84 c0                	test   al,al
c000e559:	75 47                	jne    c000e5a2 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000e55b:	c7 44 24 20 00 0d 02 c0 	mov    DWORD PTR [esp+0x20],0xc0020d00
c000e563:	83 c4 10             	add    esp,0x10
c000e566:	5b                   	pop    ebx
c000e567:	5e                   	pop    esi
c000e568:	5f                   	pop    edi
c000e569:	e9 b0 6c 00 00       	jmp    c001521e <Krnl::panic(char const*)>
c000e56e:	89 f0                	mov    eax,esi
c000e570:	84 c0                	test   al,al
c000e572:	75 15                	jne    c000e589 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000e574:	83 ec 0c             	sub    esp,0xc
c000e577:	68 e9 0e 02 c0       	push   0xc0020ee9
c000e57c:	e8 9d 6c 00 00       	call   c001521e <Krnl::panic(char const*)>
c000e581:	83 c4 10             	add    esp,0x10
c000e584:	e9 6e ff ff ff       	jmp    c000e4f7 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e589:	83 ec 08             	sub    esp,0x8
c000e58c:	6a 00                	push   0x0
c000e58e:	53                   	push   ebx
c000e58f:	e8 60 fb ff ff       	call   c000e0f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e594:	83 c4 10             	add    esp,0x10
c000e597:	e9 5b ff ff ff       	jmp    c000e4f7 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e59c:	89 f0                	mov    eax,esi
c000e59e:	84 c0                	test   al,al
c000e5a0:	75 15                	jne    c000e5b7 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000e5a2:	83 ec 08             	sub    esp,0x8
c000e5a5:	6a 00                	push   0x0
c000e5a7:	53                   	push   ebx
c000e5a8:	e8 47 fb ff ff       	call   c000e0f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e5ad:	83 c4 10             	add    esp,0x10
c000e5b0:	83 c4 10             	add    esp,0x10
c000e5b3:	5b                   	pop    ebx
c000e5b4:	5e                   	pop    esi
c000e5b5:	5f                   	pop    edi
c000e5b6:	c3                   	ret    
c000e5b7:	c7 44 24 20 05 0f 02 c0 	mov    DWORD PTR [esp+0x20],0xc0020f05
c000e5bf:	83 c4 10             	add    esp,0x10
c000e5c2:	5b                   	pop    ebx
c000e5c3:	5e                   	pop    esi
c000e5c4:	5f                   	pop    edi
c000e5c5:	e9 54 6c 00 00       	jmp    c001521e <Krnl::panic(char const*)>

c000e5ca <VAS::freeAllocatedPages(unsigned long)>:
c000e5ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e5ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e5d2:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e5d6:	74 09                	je     c000e5e1 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e5d8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e5dc:	e9 c6 fe ff ff       	jmp    c000e4a7 <Virt::freeKernelVirtualPages(unsigned long)>
c000e5e1:	c7 44 24 04 24 0d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020d24
c000e5e9:	e9 31 0b 00 00       	jmp    c000f11f <Dbg::kprintf(char const*, ...)>

c000e5ee <VAS::virtualToPhysical(unsigned long)>:
c000e5ee:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e5f2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e5f6:	e8 8d fe ff ff       	call   c000e488 <VAS::getPageTableEntry(unsigned long)>
c000e5fb:	5a                   	pop    edx
c000e5fc:	8b 00                	mov    eax,DWORD PTR [eax]
c000e5fe:	59                   	pop    ecx
c000e5ff:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e604:	c3                   	ret    
c000e605:	90                   	nop

c000e606 <VAS::reflagRange(unsigned long, int, int, int)>:
c000e606:	55                   	push   ebp
c000e607:	57                   	push   edi
c000e608:	56                   	push   esi
c000e609:	53                   	push   ebx
c000e60a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e60e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000e612:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e616:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000e61a:	85 db                	test   ebx,ebx
c000e61c:	7e 22                	jle    c000e640 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000e61e:	c1 e3 0c             	shl    ebx,0xc
c000e621:	01 f3                	add    ebx,esi
c000e623:	56                   	push   esi
c000e624:	81 c6 00 10 00 00    	add    esi,0x1000
c000e62a:	55                   	push   ebp
c000e62b:	e8 58 fe ff ff       	call   c000e488 <VAS::getPageTableEntry(unsigned long)>
c000e630:	5a                   	pop    edx
c000e631:	59                   	pop    ecx
c000e632:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e634:	21 f9                	and    ecx,edi
c000e636:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000e63a:	39 f3                	cmp    ebx,esi
c000e63c:	89 08                	mov    DWORD PTR [eax],ecx
c000e63e:	75 e3                	jne    c000e623 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000e640:	5b                   	pop    ebx
c000e641:	5e                   	pop    esi
c000e642:	5f                   	pop    edi
c000e643:	5d                   	pop    ebp
c000e644:	c3                   	ret    
c000e645:	90                   	nop

c000e646 <VAS::setToWriteCombining(unsigned long, int)>:
c000e646:	83 ec 0c             	sub    esp,0xc
c000e649:	e8 60 5a 00 00       	call   c00140ae <thisCPU()>
c000e64e:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000e655:	75 04                	jne    c000e65b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000e657:	83 c4 0c             	add    esp,0xc
c000e65a:	c3                   	ret    
c000e65b:	83 ec 0c             	sub    esp,0xc
c000e65e:	68 80 00 00 00       	push   0x80
c000e663:	6a ff                	push   0xffffffff
c000e665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e66d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e671:	e8 90 ff ff ff       	call   c000e606 <VAS::reflagRange(unsigned long, int, int, int)>
c000e676:	83 c4 20             	add    esp,0x20
c000e679:	83 c4 0c             	add    esp,0xc
c000e67c:	c3                   	ret    
c000e67d:	90                   	nop

c000e67e <VAS::mapOtherVASIn(bool, VAS*)>:
c000e67e:	83 ec 0c             	sub    esp,0xc
c000e681:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e686:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e68a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e68d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e691:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e694:	19 c0                	sbb    eax,eax
c000e696:	83 ca 03             	or     edx,0x3
c000e699:	83 e0 fc             	and    eax,0xfffffffc
c000e69c:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e6a3:	e8 5d 07 01 00       	call   c001ee05 <CPU::readCR3()>
c000e6a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6ac:	83 c4 0c             	add    esp,0xc
c000e6af:	e9 63 07 01 00       	jmp    c001ee17 <CPU::writeCR3(unsigned long)>

c000e6b4 <VAS::~VAS()>:
c000e6b4:	83 ec 2c             	sub    esp,0x2c
c000e6b7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e6bf:	e8 c8 9a 00 00       	call   c001818c <lockScheduler()>
c000e6c4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e6c9:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6cb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e6ce:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e6d4:	83 ec 04             	sub    esp,0x4
c000e6d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e6db:	6a 01                	push   0x1
c000e6dd:	50                   	push   eax
c000e6de:	e8 9b ff ff ff       	call   c000e67e <VAS::mapOtherVASIn(bool, VAS*)>
c000e6e3:	83 c4 10             	add    esp,0x10
c000e6e6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e6ee:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e6f6:	0f 8f d7 00 00 00    	jg     c000e7d3 <VAS::~VAS()+0x11f>
c000e6fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e700:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e703:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e707:	c1 e2 02             	shl    edx,0x2
c000e70a:	01 d0                	add    eax,edx
c000e70c:	8b 00                	mov    eax,DWORD PTR [eax]
c000e70e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e716:	83 e0 01             	and    eax,0x1
c000e719:	0f 84 ab 00 00 00    	je     c000e7ca <VAS::~VAS()+0x116>
c000e71f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e727:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e72f:	7f 75                	jg     c000e7a6 <VAS::~VAS()+0xf2>
c000e731:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e735:	c1 e0 0a             	shl    eax,0xa
c000e738:	89 c2                	mov    edx,eax
c000e73a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e73e:	01 d0                	add    eax,edx
c000e740:	c1 e0 0c             	shl    eax,0xc
c000e743:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e747:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e74c:	8b 00                	mov    eax,DWORD PTR [eax]
c000e74e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e751:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e757:	83 ec 04             	sub    esp,0x4
c000e75a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e75e:	6a 01                	push   0x1
c000e760:	50                   	push   eax
c000e761:	e8 f6 fc ff ff       	call   c000e45c <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e766:	83 c4 10             	add    esp,0x10
c000e769:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e76d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e771:	8b 00                	mov    eax,DWORD PTR [eax]
c000e773:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e777:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e77b:	25 01 04 00 00       	and    eax,0x401
c000e780:	3d 01 04 00 00       	cmp    eax,0x401
c000e785:	75 19                	jne    c000e7a0 <VAS::~VAS()+0xec>
c000e787:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e78b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e790:	83 ec 0c             	sub    esp,0xc
c000e793:	50                   	push   eax
c000e794:	e8 f1 dc ff ff       	call   c000c48a <Phys::freePage(unsigned long)>
c000e799:	83 c4 10             	add    esp,0x10
c000e79c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e7a0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e7a4:	eb 81                	jmp    c000e727 <VAS::~VAS()+0x73>
c000e7a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7aa:	25 00 04 00 00       	and    eax,0x400
c000e7af:	74 19                	je     c000e7ca <VAS::~VAS()+0x116>
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e7ba:	83 ec 0c             	sub    esp,0xc
c000e7bd:	50                   	push   eax
c000e7be:	e8 c7 dc ff ff       	call   c000c48a <Phys::freePage(unsigned long)>
c000e7c3:	83 c4 10             	add    esp,0x10
c000e7c6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e7ca:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e7ce:	e9 1b ff ff ff       	jmp    c000e6ee <VAS::~VAS()+0x3a>
c000e7d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e7da:	83 ec 0c             	sub    esp,0xc
c000e7dd:	50                   	push   eax
c000e7de:	e8 c4 fc ff ff       	call   c000e4a7 <Virt::freeKernelVirtualPages(unsigned long)>
c000e7e3:	83 c4 10             	add    esp,0x10
c000e7e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7ea:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e7ed:	83 ec 0c             	sub    esp,0xc
c000e7f0:	50                   	push   eax
c000e7f1:	e8 94 dc ff ff       	call   c000c48a <Phys::freePage(unsigned long)>
c000e7f6:	83 c4 10             	add    esp,0x10
c000e7f9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e7fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e801:	c1 e0 02             	shl    eax,0x2
c000e804:	83 ec 08             	sub    esp,0x8
c000e807:	50                   	push   eax
c000e808:	68 48 0d 02 c0       	push   0xc0020d48
c000e80d:	e8 0d 09 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000e812:	83 c4 10             	add    esp,0x10
c000e815:	e8 74 99 00 00       	call   c001818e <unlockScheduler()>
c000e81a:	90                   	nop
c000e81b:	83 c4 2c             	add    esp,0x2c
c000e81e:	c3                   	ret    
c000e81f:	90                   	nop

c000e820 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e820:	55                   	push   ebp
c000e821:	57                   	push   edi
c000e822:	56                   	push   esi
c000e823:	53                   	push   ebx
c000e824:	83 ec 1c             	sub    esp,0x1c
c000e827:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e82b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e82f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e835:	77 08                	ja     c000e83f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e837:	0f 20 d8             	mov    eax,cr3
c000e83a:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e83d:	75 47                	jne    c000e886 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000e83f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e843:	09 d8                	or     eax,ebx
c000e845:	a9 ff 0f 00 00       	test   eax,0xfff
c000e84a:	75 57                	jne    c000e8a3 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000e84c:	89 de                	mov    esi,ebx
c000e84e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e851:	c1 ee 16             	shr    esi,0x16
c000e854:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e85b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e85f:	74 54                	je     c000e8b5 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000e861:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e865:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e86b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e86f:	c1 e6 0c             	shl    esi,0xc
c000e872:	c1 eb 0a             	shr    ebx,0xa
c000e875:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e87b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e87e:	83 c4 1c             	add    esp,0x1c
c000e881:	5b                   	pop    ebx
c000e882:	5e                   	pop    esi
c000e883:	5f                   	pop    edi
c000e884:	5d                   	pop    ebp
c000e885:	c3                   	ret    
c000e886:	83 ec 0c             	sub    esp,0xc
c000e889:	68 68 0d 02 c0       	push   0xc0020d68
c000e88e:	e8 8c 08 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000e893:	83 c4 10             	add    esp,0x10
c000e896:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e89a:	09 d8                	or     eax,ebx
c000e89c:	a9 ff 0f 00 00       	test   eax,0xfff
c000e8a1:	74 a9                	je     c000e84c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e8a3:	83 ec 0c             	sub    esp,0xc
c000e8a6:	68 d0 0d 02 c0       	push   0xc0020dd0
c000e8ab:	e8 6e 69 00 00       	call   c001521e <Krnl::panic(char const*)>
c000e8b0:	83 c4 10             	add    esp,0x10
c000e8b3:	eb 97                	jmp    c000e84c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e8b5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e8b9:	e8 56 dc ff ff       	call   c000c514 <Phys::allocatePage()>
c000e8be:	89 c5                	mov    ebp,eax
c000e8c0:	e8 18 fa ff ff       	call   c000e2dd <Virt::getAKernelVAS()>
c000e8c5:	83 ec 0c             	sub    esp,0xc
c000e8c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e8cc:	6a 01                	push   0x1
c000e8ce:	e8 7a f8 ff ff       	call   c000e14d <Virt::allocateKernelVirtualPages(int)>
c000e8d3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e8da:	6a 01                	push   0x1
c000e8dc:	50                   	push   eax
c000e8dd:	55                   	push   ebp
c000e8de:	81 cd 07 04 00 00    	or     ebp,0x407
c000e8e4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e8e8:	51                   	push   ecx
c000e8e9:	e8 1e 02 00 00       	call   c000eb0c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e8ee:	83 c4 1c             	add    esp,0x1c
c000e8f1:	68 00 10 00 00       	push   0x1000
c000e8f6:	6a 00                	push   0x0
c000e8f8:	50                   	push   eax
c000e8f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e8fd:	e8 06 1d ff ff       	call   c0000608 <memset>
c000e902:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e906:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e909:	e8 99 fb ff ff       	call   c000e4a7 <Virt::freeKernelVirtualPages(unsigned long)>
c000e90e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e912:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e915:	83 c4 10             	add    esp,0x10
c000e918:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e91b:	e9 41 ff ff ff       	jmp    c000e861 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e920 <VAS::allocatePages(int, int)>:
c000e920:	55                   	push   ebp
c000e921:	57                   	push   edi
c000e922:	56                   	push   esi
c000e923:	53                   	push   ebx
c000e924:	83 ec 1c             	sub    esp,0x1c
c000e927:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e92b:	e8 7e 57 00 00       	call   c00140ae <thisCPU()>
c000e930:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e936:	83 e0 01             	and    eax,0x1
c000e939:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e93d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e941:	0f 85 d7 00 00 00    	jne    c000ea1e <VAS::allocatePages(int, int)+0xfe>
c000e947:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e94a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e94e:	85 c0                	test   eax,eax
c000e950:	0f 84 ac 00 00 00    	je     c000ea02 <VAS::allocatePages(int, int)+0xe2>
c000e956:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000e95a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e95e:	c1 e6 0c             	shl    esi,0xc
c000e961:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000e965:	85 c0                	test   eax,eax
c000e967:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000e96a:	7e 33                	jle    c000e99f <VAS::allocatePages(int, int)+0x7f>
c000e96c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e970:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e974:	81 cd 00 04 00 00    	or     ebp,0x400
c000e97a:	e8 95 db ff ff       	call   c000c514 <Phys::allocatePage()>
c000e97f:	55                   	push   ebp
c000e980:	53                   	push   ebx
c000e981:	50                   	push   eax
c000e982:	57                   	push   edi
c000e983:	e8 98 fe ff ff       	call   c000e820 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e988:	83 c4 10             	add    esp,0x10
c000e98b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e990:	74 03                	je     c000e995 <VAS::allocatePages(int, int)+0x75>
c000e992:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e995:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e99b:	39 de                	cmp    esi,ebx
c000e99d:	75 db                	jne    c000e97a <VAS::allocatePages(int, int)+0x5a>
c000e99f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e9a4:	74 3f                	je     c000e9e5 <VAS::allocatePages(int, int)+0xc5>
c000e9a6:	c1 ee 0a             	shr    esi,0xa
c000e9a9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e9ad:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000e9b3:	c1 eb 0a             	shr    ebx,0xa
c000e9b6:	81 ee 00 00 40 00    	sub    esi,0x400000
c000e9bc:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e9c2:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e9c8:	39 f3                	cmp    ebx,esi
c000e9ca:	77 0d                	ja     c000e9d9 <VAS::allocatePages(int, int)+0xb9>
c000e9cc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e9cf:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e9d5:	39 de                	cmp    esi,ebx
c000e9d7:	73 f3                	jae    c000e9cc <VAS::allocatePages(int, int)+0xac>
c000e9d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9dd:	83 c4 1c             	add    esp,0x1c
c000e9e0:	5b                   	pop    ebx
c000e9e1:	5e                   	pop    esi
c000e9e2:	5f                   	pop    edi
c000e9e3:	5d                   	pop    ebp
c000e9e4:	c3                   	ret    
c000e9e5:	e8 1b 04 01 00       	call   c001ee05 <CPU::readCR3()>
c000e9ea:	83 ec 0c             	sub    esp,0xc
c000e9ed:	50                   	push   eax
c000e9ee:	e8 24 04 01 00       	call   c001ee17 <CPU::writeCR3(unsigned long)>
c000e9f3:	83 c4 10             	add    esp,0x10
c000e9f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9fa:	83 c4 1c             	add    esp,0x1c
c000e9fd:	5b                   	pop    ebx
c000e9fe:	5e                   	pop    esi
c000e9ff:	5f                   	pop    edi
c000ea00:	5d                   	pop    ebp
c000ea01:	c3                   	ret    
c000ea02:	83 ec 0c             	sub    esp,0xc
c000ea05:	68 f4 0d 02 c0       	push   0xc0020df4
c000ea0a:	e8 0f 68 00 00       	call   c001521e <Krnl::panic(char const*)>
c000ea0f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000ea12:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea16:	83 c4 10             	add    esp,0x10
c000ea19:	e9 38 ff ff ff       	jmp    c000e956 <VAS::allocatePages(int, int)+0x36>
c000ea1e:	83 ec 0c             	sub    esp,0xc
c000ea21:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ea25:	e8 23 f7 ff ff       	call   c000e14d <Virt::allocateKernelVirtualPages(int)>
c000ea2a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea2e:	83 c4 10             	add    esp,0x10
c000ea31:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000ea36:	0f 87 94 00 00 00    	ja     c000ead0 <VAS::allocatePages(int, int)+0x1b0>
c000ea3c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea40:	85 d2                	test   edx,edx
c000ea42:	7e 3c                	jle    c000ea80 <VAS::allocatePages(int, int)+0x160>
c000ea44:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ea48:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea4c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ea50:	c1 e5 0c             	shl    ebp,0xc
c000ea53:	81 ce 00 04 00 00    	or     esi,0x400
c000ea59:	01 dd                	add    ebp,ebx
c000ea5b:	e8 b4 da ff ff       	call   c000c514 <Phys::allocatePage()>
c000ea60:	56                   	push   esi
c000ea61:	53                   	push   ebx
c000ea62:	50                   	push   eax
c000ea63:	57                   	push   edi
c000ea64:	e8 b7 fd ff ff       	call   c000e820 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ea69:	83 c4 10             	add    esp,0x10
c000ea6c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea71:	74 03                	je     c000ea76 <VAS::allocatePages(int, int)+0x156>
c000ea73:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea76:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea7c:	39 dd                	cmp    ebp,ebx
c000ea7e:	75 db                	jne    c000ea5b <VAS::allocatePages(int, int)+0x13b>
c000ea80:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea85:	0f 84 5a ff ff ff    	je     c000e9e5 <VAS::allocatePages(int, int)+0xc5>
c000ea8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea8f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea93:	89 d3                	mov    ebx,edx
c000ea95:	c1 e0 0c             	shl    eax,0xc
c000ea98:	c1 eb 0a             	shr    ebx,0xa
c000ea9b:	01 d0                	add    eax,edx
c000ea9d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000eaa3:	c1 e8 0a             	shr    eax,0xa
c000eaa6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000eaac:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eab1:	2d 00 00 40 00       	sub    eax,0x400000
c000eab6:	39 c3                	cmp    ebx,eax
c000eab8:	0f 87 1b ff ff ff    	ja     c000e9d9 <VAS::allocatePages(int, int)+0xb9>
c000eabe:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eac1:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eac7:	39 d8                	cmp    eax,ebx
c000eac9:	73 f3                	jae    c000eabe <VAS::allocatePages(int, int)+0x19e>
c000eacb:	e9 09 ff ff ff       	jmp    c000e9d9 <VAS::allocatePages(int, int)+0xb9>
c000ead0:	e8 d9 55 00 00       	call   c00140ae <thisCPU()>
c000ead5:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000eadc:	0f 84 5a ff ff ff    	je     c000ea3c <VAS::allocatePages(int, int)+0x11c>
c000eae2:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000eaea:	e9 4d ff ff ff       	jmp    c000ea3c <VAS::allocatePages(int, int)+0x11c>
c000eaef:	90                   	nop

c000eaf0 <VAS::setCPUSpecific(unsigned long)>:
c000eaf0:	83 ec 0c             	sub    esp,0xc
c000eaf3:	6a 05                	push   0x5
c000eaf5:	68 00 00 40 c2       	push   0xc2400000
c000eafa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb02:	e8 19 fd ff ff       	call   c000e820 <VAS::mapPage(unsigned long, unsigned long, int)>
c000eb07:	83 c4 1c             	add    esp,0x1c
c000eb0a:	c3                   	ret    
c000eb0b:	90                   	nop

c000eb0c <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000eb0c:	55                   	push   ebp
c000eb0d:	57                   	push   edi
c000eb0e:	56                   	push   esi
c000eb0f:	53                   	push   ebx
c000eb10:	83 ec 1c             	sub    esp,0x1c
c000eb13:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000eb17:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eb1b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000eb1f:	e8 8a 55 00 00       	call   c00140ae <thisCPU()>
c000eb24:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000eb2a:	83 e0 01             	and    eax,0x1
c000eb2d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eb31:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb35:	85 c0                	test   eax,eax
c000eb37:	7e 39                	jle    c000eb72 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000eb39:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb3d:	89 f3                	mov    ebx,esi
c000eb3f:	c1 e0 0c             	shl    eax,0xc
c000eb42:	01 f0                	add    eax,esi
c000eb44:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eb48:	55                   	push   ebp
c000eb49:	53                   	push   ebx
c000eb4a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb4e:	29 f0                	sub    eax,esi
c000eb50:	01 d8                	add    eax,ebx
c000eb52:	50                   	push   eax
c000eb53:	57                   	push   edi
c000eb54:	e8 c7 fc ff ff       	call   c000e820 <VAS::mapPage(unsigned long, unsigned long, int)>
c000eb59:	83 c4 10             	add    esp,0x10
c000eb5c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb61:	74 03                	je     c000eb66 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000eb63:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb66:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb6c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000eb70:	75 d6                	jne    c000eb48 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000eb72:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb77:	74 42                	je     c000ebbb <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000eb79:	89 f3                	mov    ebx,esi
c000eb7b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb7f:	c1 eb 0a             	shr    ebx,0xa
c000eb82:	c1 e0 0c             	shl    eax,0xc
c000eb85:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000eb8b:	01 f0                	add    eax,esi
c000eb8d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000eb93:	c1 e8 0a             	shr    eax,0xa
c000eb96:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eb9b:	2d 00 00 40 00       	sub    eax,0x400000
c000eba0:	39 c3                	cmp    ebx,eax
c000eba2:	77 0d                	ja     c000ebb1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000eba4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eba7:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ebad:	39 d8                	cmp    eax,ebx
c000ebaf:	73 f3                	jae    c000eba4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000ebb1:	83 c4 1c             	add    esp,0x1c
c000ebb4:	89 f0                	mov    eax,esi
c000ebb6:	5b                   	pop    ebx
c000ebb7:	5e                   	pop    esi
c000ebb8:	5f                   	pop    edi
c000ebb9:	5d                   	pop    ebp
c000ebba:	c3                   	ret    
c000ebbb:	e8 45 02 01 00       	call   c001ee05 <CPU::readCR3()>
c000ebc0:	83 ec 0c             	sub    esp,0xc
c000ebc3:	50                   	push   eax
c000ebc4:	e8 4e 02 01 00       	call   c001ee17 <CPU::writeCR3(unsigned long)>
c000ebc9:	89 f0                	mov    eax,esi
c000ebcb:	83 c4 10             	add    esp,0x10
c000ebce:	83 c4 1c             	add    esp,0x1c
c000ebd1:	5b                   	pop    ebx
c000ebd2:	5e                   	pop    esi
c000ebd3:	5f                   	pop    edi
c000ebd4:	5d                   	pop    ebp
c000ebd5:	c3                   	ret    

c000ebd6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000ebd6:	55                   	push   ebp
c000ebd7:	57                   	push   edi
c000ebd8:	56                   	push   esi
c000ebd9:	53                   	push   ebx
c000ebda:	83 ec 1c             	sub    esp,0x1c
c000ebdd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ebe1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ebe5:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000ebe9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ebed:	a9 ff 0f 00 00       	test   eax,0xfff
c000ebf2:	75 4a                	jne    c000ec3e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000ebf4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ebf8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ebfb:	c1 eb 16             	shr    ebx,0x16
c000ebfe:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000ec05:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000ec09:	74 4d                	je     c000ec58 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000ec0b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ec0f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000ec13:	c1 e8 0a             	shr    eax,0xa
c000ec16:	80 fa 01             	cmp    dl,0x1
c000ec19:	19 d2                	sbb    edx,edx
c000ec1b:	c1 e3 0c             	shl    ebx,0xc
c000ec1e:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000ec22:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000ec28:	25 fc 0f 00 00       	and    eax,0xffc
c000ec2d:	01 d8                	add    eax,ebx
c000ec2f:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000ec36:	83 c4 1c             	add    esp,0x1c
c000ec39:	5b                   	pop    ebx
c000ec3a:	5e                   	pop    esi
c000ec3b:	5f                   	pop    edi
c000ec3c:	5d                   	pop    ebp
c000ec3d:	c3                   	ret    
c000ec3e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ec42:	83 ec 0c             	sub    esp,0xc
c000ec45:	68 20 0e 02 c0       	push   0xc0020e20
c000ec4a:	e8 cf 65 00 00       	call   c001521e <Krnl::panic(char const*)>
c000ec4f:	83 c4 10             	add    esp,0x10
c000ec52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec56:	eb 9c                	jmp    c000ebf4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000ec58:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ec5c:	e8 b3 d8 ff ff       	call   c000c514 <Phys::allocatePage()>
c000ec61:	89 c5                	mov    ebp,eax
c000ec63:	e8 75 f6 ff ff       	call   c000e2dd <Virt::getAKernelVAS()>
c000ec68:	83 ec 0c             	sub    esp,0xc
c000ec6b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec6f:	6a 01                	push   0x1
c000ec71:	e8 d7 f4 ff ff       	call   c000e14d <Virt::allocateKernelVirtualPages(int)>
c000ec76:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000ec7d:	6a 01                	push   0x1
c000ec7f:	50                   	push   eax
c000ec80:	55                   	push   ebp
c000ec81:	81 cd 07 04 00 00    	or     ebp,0x407
c000ec87:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000ec8b:	51                   	push   ecx
c000ec8c:	e8 7b fe ff ff       	call   c000eb0c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ec91:	83 c4 1c             	add    esp,0x1c
c000ec94:	68 00 10 00 00       	push   0x1000
c000ec99:	6a 00                	push   0x0
c000ec9b:	50                   	push   eax
c000ec9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eca0:	e8 63 19 ff ff       	call   c0000608 <memset>
c000eca5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000eca9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ecac:	e8 f6 f7 ff ff       	call   c000e4a7 <Virt::freeKernelVirtualPages(unsigned long)>
c000ecb1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ecb4:	83 c4 10             	add    esp,0x10
c000ecb7:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000ecba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ecbe:	e9 48 ff ff ff       	jmp    c000ec0b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c000ecc3:	90                   	nop

c000ecc4 <VAS::VAS(bool)>:
c000ecc4:	53                   	push   ebx
c000ecc5:	83 ec 28             	sub    esp,0x28
c000ecc8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eccc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ecd0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecd4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ecdb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecdf:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000ece3:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000ece6:	e8 29 d8 ff ff       	call   c000c514 <Phys::allocatePage()>
c000eceb:	89 c2                	mov    edx,eax
c000eced:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecf1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ecf4:	e8 e4 f5 ff ff       	call   c000e2dd <Virt::getAKernelVAS()>
c000ecf9:	89 c3                	mov    ebx,eax
c000ecfb:	83 ec 0c             	sub    esp,0xc
c000ecfe:	6a 01                	push   0x1
c000ed00:	e8 48 f4 ff ff       	call   c000e14d <Virt::allocateKernelVirtualPages(int)>
c000ed05:	83 c4 10             	add    esp,0x10
c000ed08:	89 c2                	mov    edx,eax
c000ed0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed0e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ed11:	83 ec 0c             	sub    esp,0xc
c000ed14:	6a 03                	push   0x3
c000ed16:	6a 01                	push   0x1
c000ed18:	52                   	push   edx
c000ed19:	50                   	push   eax
c000ed1a:	53                   	push   ebx
c000ed1b:	e8 ec fd ff ff       	call   c000eb0c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ed20:	83 c4 20             	add    esp,0x20
c000ed23:	89 c2                	mov    edx,eax
c000ed25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed29:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ed2c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ed34:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000ed3c:	7f 1c                	jg     c000ed5a <VAS::VAS(bool)+0x96>
c000ed3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed42:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed45:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ed49:	c1 e2 02             	shl    edx,0x2
c000ed4c:	01 d0                	add    eax,edx
c000ed4e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ed54:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ed58:	eb da                	jmp    c000ed34 <VAS::VAS(bool)+0x70>
c000ed5a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000ed62:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000ed6a:	7f 71                	jg     c000eddd <VAS::VAS(bool)+0x119>
c000ed6c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed70:	2d 00 02 00 00       	sub    eax,0x200
c000ed75:	c1 e0 0c             	shl    eax,0xc
c000ed78:	83 c8 03             	or     eax,0x3
c000ed7b:	89 c3                	mov    ebx,eax
c000ed7d:	e8 2c 53 00 00       	call   c00140ae <thisCPU()>
c000ed82:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ed88:	83 e0 10             	and    eax,0x10
c000ed8b:	84 c0                	test   al,al
c000ed8d:	74 07                	je     c000ed96 <VAS::VAS(bool)+0xd2>
c000ed8f:	b8 00 01 00 00       	mov    eax,0x100
c000ed94:	eb 05                	jmp    c000ed9b <VAS::VAS(bool)+0xd7>
c000ed96:	b8 00 00 00 00       	mov    eax,0x0
c000ed9b:	09 d8                	or     eax,ebx
c000ed9d:	89 c1                	mov    ecx,eax
c000ed9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eda3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000eda6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edaa:	c1 e2 02             	shl    edx,0x2
c000edad:	01 d0                	add    eax,edx
c000edaf:	89 ca                	mov    edx,ecx
c000edb1:	89 10                	mov    DWORD PTR [eax],edx
c000edb3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edb7:	2d 40 03 00 00       	sub    eax,0x340
c000edbc:	83 f8 7f             	cmp    eax,0x7f
c000edbf:	77 16                	ja     c000edd7 <VAS::VAS(bool)+0x113>
c000edc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edc5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000edc8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edcc:	c1 e2 02             	shl    edx,0x2
c000edcf:	01 d0                	add    eax,edx
c000edd1:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000edd7:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000eddb:	eb 85                	jmp    c000ed62 <VAS::VAS(bool)+0x9e>
c000eddd:	e8 cc 52 00 00       	call   c00140ae <thisCPU()>
c000ede2:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ede8:	83 e0 10             	and    eax,0x10
c000edeb:	84 c0                	test   al,al
c000eded:	74 07                	je     c000edf6 <VAS::VAS(bool)+0x132>
c000edef:	b8 03 41 00 00       	mov    eax,0x4103
c000edf4:	eb 05                	jmp    c000edfb <VAS::VAS(bool)+0x137>
c000edf6:	b8 03 40 00 00       	mov    eax,0x4003
c000edfb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000edff:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000ee02:	81 c2 20 0c 00 00    	add    edx,0xc20
c000ee08:	89 02                	mov    DWORD PTR [edx],eax
c000ee0a:	e8 9f 52 00 00       	call   c00140ae <thisCPU()>
c000ee0f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ee15:	83 ec 08             	sub    esp,0x8
c000ee18:	50                   	push   eax
c000ee19:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ee1d:	e8 ce fc ff ff       	call   c000eaf0 <VAS::setCPUSpecific(unsigned long)>
c000ee22:	83 c4 10             	add    esp,0x10
c000ee25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee29:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ee2c:	e8 7d 52 00 00       	call   c00140ae <thisCPU()>
c000ee31:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ee37:	83 e0 10             	and    eax,0x10
c000ee3a:	84 c0                	test   al,al
c000ee3c:	74 07                	je     c000ee45 <VAS::VAS(bool)+0x181>
c000ee3e:	b8 00 01 00 00       	mov    eax,0x100
c000ee43:	eb 05                	jmp    c000ee4a <VAS::VAS(bool)+0x186>
c000ee45:	b8 00 00 00 00       	mov    eax,0x0
c000ee4a:	09 d8                	or     eax,ebx
c000ee4c:	89 c2                	mov    edx,eax
c000ee4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee52:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee55:	05 fc 0f 00 00       	add    eax,0xffc
c000ee5a:	83 ca 03             	or     edx,0x3
c000ee5d:	89 10                	mov    DWORD PTR [eax],edx
c000ee5f:	e8 4a 52 00 00       	call   c00140ae <thisCPU()>
c000ee64:	83 ec 0c             	sub    esp,0xc
c000ee67:	50                   	push   eax
c000ee68:	e8 9f 19 00 00       	call   c001080c <Device::getName()>
c000ee6d:	83 c4 10             	add    esp,0x10
c000ee70:	83 ec 08             	sub    esp,0x8
c000ee73:	68 1f 0f 02 c0       	push   0xc0020f1f
c000ee78:	50                   	push   eax
c000ee79:	e8 7a 18 ff ff       	call   c00006f8 <strcmp>
c000ee7e:	83 c4 10             	add    esp,0x10
c000ee81:	85 c0                	test   eax,eax
c000ee83:	0f 94 c0             	sete   al
c000ee86:	84 c0                	test   al,al
c000ee88:	74 64                	je     c000eeee <VAS::VAS(bool)+0x22a>
c000ee8a:	e8 e0 92 00 00       	call   c001816f <disableIRQs()>
c000ee8f:	e8 1a 52 00 00       	call   c00140ae <thisCPU()>
c000ee94:	05 7c 09 00 00       	add    eax,0x97c
c000ee99:	83 ec 0c             	sub    esp,0xc
c000ee9c:	50                   	push   eax
c000ee9d:	e8 3a cb ff ff       	call   c000b9dc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000eea2:	83 c4 10             	add    esp,0x10
c000eea5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eeaa:	89 c3                	mov    ebx,eax
c000eeac:	e8 fd 51 00 00       	call   c00140ae <thisCPU()>
c000eeb1:	05 7c 09 00 00       	add    eax,0x97c
c000eeb6:	83 ec 0c             	sub    esp,0xc
c000eeb9:	50                   	push   eax
c000eeba:	e8 1d cb ff ff       	call   c000b9dc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000eebf:	83 c4 10             	add    esp,0x10
c000eec2:	83 ec 08             	sub    esp,0x8
c000eec5:	50                   	push   eax
c000eec6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eeca:	e8 b9 f5 ff ff       	call   c000e488 <VAS::getPageTableEntry(unsigned long)>
c000eecf:	83 c4 10             	add    esp,0x10
c000eed2:	8b 00                	mov    eax,DWORD PTR [eax]
c000eed4:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eed9:	6a 11                	push   0x11
c000eedb:	53                   	push   ebx
c000eedc:	50                   	push   eax
c000eedd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eee1:	e8 3a f9 ff ff       	call   c000e820 <VAS::mapPage(unsigned long, unsigned long, int)>
c000eee6:	83 c4 10             	add    esp,0x10
c000eee9:	e8 8f 92 00 00       	call   c001817d <enableIRQs()>
c000eeee:	90                   	nop
c000eeef:	83 c4 28             	add    esp,0x28
c000eef2:	5b                   	pop    ebx
c000eef3:	c3                   	ret    

c000eef4 <mapVASFirstTime>:
c000eef4:	55                   	push   ebp
c000eef5:	57                   	push   edi
c000eef6:	56                   	push   esi
c000eef7:	53                   	push   ebx
c000eef8:	83 ec 0c             	sub    esp,0xc
c000eefb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ef00:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ef03:	4a                   	dec    edx
c000ef04:	0f 84 99 00 00 00    	je     c000efa3 <mapVASFirstTime+0xaf>
c000ef0a:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000ef0d:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000ef10:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000ef15:	c1 e5 15             	shl    ebp,0x15
c000ef18:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000ef1d:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000ef23:	29 eb                	sub    ebx,ebp
c000ef25:	29 ee                	sub    esi,ebp
c000ef27:	e8 e8 d5 ff ff       	call   c000c514 <Phys::allocatePage()>
c000ef2c:	83 ec 0c             	sub    esp,0xc
c000ef2f:	68 03 04 00 00       	push   0x403
c000ef34:	6a 01                	push   0x1
c000ef36:	53                   	push   ebx
c000ef37:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ef3d:	50                   	push   eax
c000ef3e:	57                   	push   edi
c000ef3f:	e8 c8 fb ff ff       	call   c000eb0c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef44:	83 c4 20             	add    esp,0x20
c000ef47:	39 f3                	cmp    ebx,esi
c000ef49:	75 dc                	jne    c000ef27 <mapVASFirstTime+0x33>
c000ef4b:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000ef50:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000ef55:	29 ee                	sub    esi,ebp
c000ef57:	29 e8                	sub    eax,ebp
c000ef59:	89 c5                	mov    ebp,eax
c000ef5b:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000ef5f:	19 db                	sbb    ebx,ebx
c000ef61:	e8 ae d5 ff ff       	call   c000c514 <Phys::allocatePage()>
c000ef66:	83 e3 04             	and    ebx,0x4
c000ef69:	83 ec 0c             	sub    esp,0xc
c000ef6c:	81 c3 03 04 00 00    	add    ebx,0x403
c000ef72:	53                   	push   ebx
c000ef73:	6a 01                	push   0x1
c000ef75:	56                   	push   esi
c000ef76:	81 ee 00 10 00 00    	sub    esi,0x1000
c000ef7c:	50                   	push   eax
c000ef7d:	57                   	push   edi
c000ef7e:	e8 89 fb ff ff       	call   c000eb0c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef83:	83 c4 20             	add    esp,0x20
c000ef86:	39 f5                	cmp    ebp,esi
c000ef88:	75 d1                	jne    c000ef5b <mapVASFirstTime+0x67>
c000ef8a:	e8 76 fe 00 00       	call   c001ee05 <CPU::readCR3()>
c000ef8f:	83 ec 0c             	sub    esp,0xc
c000ef92:	50                   	push   eax
c000ef93:	e8 7f fe 00 00       	call   c001ee17 <CPU::writeCR3(unsigned long)>
c000ef98:	83 c4 10             	add    esp,0x10
c000ef9b:	83 c4 0c             	add    esp,0xc
c000ef9e:	5b                   	pop    ebx
c000ef9f:	5e                   	pop    esi
c000efa0:	5f                   	pop    edi
c000efa1:	5d                   	pop    ebp
c000efa2:	c3                   	ret    
c000efa3:	83 ec 0c             	sub    esp,0xc
c000efa6:	68 2d 0f 02 c0       	push   0xc0020f2d
c000efab:	e8 6f 01 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000efb0:	83 c4 10             	add    esp,0x10
c000efb3:	83 c4 0c             	add    esp,0xc
c000efb6:	5b                   	pop    ebx
c000efb7:	5e                   	pop    esi
c000efb8:	5f                   	pop    edi
c000efb9:	5d                   	pop    ebp
c000efba:	c3                   	ret    

c000efbb <__cxa_atexit>:
c000efbb:	31 c0                	xor    eax,eax
c000efbd:	c3                   	ret    

c000efbe <__cxa_finalize>:
c000efbe:	c3                   	ret    

c000efbf <__stack_chk_fail>:
c000efbf:	55                   	push   ebp
c000efc0:	89 e5                	mov    ebp,esp
c000efc2:	83 ec 10             	sub    esp,0x10
c000efc5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000efc8:	68 46 0f 02 c0       	push   0xc0020f46
c000efcd:	e8 4d 01 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000efd2:	58                   	pop    eax
c000efd3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efd6:	5a                   	pop    edx
c000efd7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000efda:	68 46 0f 02 c0       	push   0xc0020f46
c000efdf:	e8 3b 01 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000efe4:	59                   	pop    ecx
c000efe5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efe8:	5a                   	pop    edx
c000efe9:	8b 00                	mov    eax,DWORD PTR [eax]
c000efeb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000efee:	68 46 0f 02 c0       	push   0xc0020f46
c000eff3:	e8 27 01 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000eff8:	59                   	pop    ecx
c000eff9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000effc:	5a                   	pop    edx
c000effd:	8b 00                	mov    eax,DWORD PTR [eax]
c000efff:	8b 00                	mov    eax,DWORD PTR [eax]
c000f001:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f004:	68 46 0f 02 c0       	push   0xc0020f46
c000f009:	e8 11 01 00 00       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c000f00e:	c7 04 24 4e 0f 02 c0 	mov    DWORD PTR [esp],0xc0020f4e
c000f015:	e8 04 62 00 00       	call   c001521e <Krnl::panic(char const*)>
c000f01a:	83 c4 10             	add    esp,0x10
c000f01d:	c9                   	leave  
c000f01e:	c3                   	ret    

c000f01f <__cxa_pure_virtual>:
c000f01f:	83 ec 18             	sub    esp,0x18
c000f022:	68 66 0f 02 c0       	push   0xc0020f66
c000f027:	e8 f2 61 00 00       	call   c001521e <Krnl::panic(char const*)>
c000f02c:	83 c4 1c             	add    esp,0x1c
c000f02f:	c3                   	ret    

c000f030 <operator new(unsigned long)>:
c000f030:	e9 35 cf ff ff       	jmp    c000bf6a <malloc>

c000f035 <operator new[](unsigned long)>:
c000f035:	e9 30 cf ff ff       	jmp    c000bf6a <malloc>

c000f03a <operator delete(void*)>:
c000f03a:	e9 4b cf ff ff       	jmp    c000bf8a <rfree>

c000f03f <operator delete(void*, unsigned long)>:
c000f03f:	e9 46 cf ff ff       	jmp    c000bf8a <rfree>

c000f044 <operator delete[](void*)>:
c000f044:	e9 41 cf ff ff       	jmp    c000bf8a <rfree>

c000f049 <operator delete[](void*, unsigned long)>:
c000f049:	e9 3c cf ff ff       	jmp    c000bf8a <rfree>

c000f04e <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000f04e:	57                   	push   edi
c000f04f:	b9 3f 00 00 00       	mov    ecx,0x3f
c000f054:	56                   	push   esi
c000f055:	be 7c 0f 02 c0       	mov    esi,0xc0020f7c
c000f05a:	53                   	push   ebx
c000f05b:	83 ec 40             	sub    esp,0x40
c000f05e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000f062:	8d 7c 24 01          	lea    edi,[esp+0x1]
c000f066:	fc                   	cld    
c000f067:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f069:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000f06d:	83 f9 3e             	cmp    ecx,0x3e
c000f070:	7e 05                	jle    c000f077 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c000f072:	b9 3e 00 00 00       	mov    ecx,0x3e
c000f077:	89 df                	mov    edi,ebx
c000f079:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000f07d:	eb 02                	jmp    c000f081 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c000f07f:	89 c7                	mov    edi,eax
c000f081:	31 d2                	xor    edx,edx
c000f083:	46                   	inc    esi
c000f084:	89 f8                	mov    eax,edi
c000f086:	f7 f1                	div    ecx
c000f088:	39 cf                	cmp    edi,ecx
c000f08a:	73 f3                	jae    c000f07f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c000f08c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000f08f:	eb 02                	jmp    c000f093 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c000f091:	89 c3                	mov    ebx,eax
c000f093:	31 d2                	xor    edx,edx
c000f095:	4e                   	dec    esi
c000f096:	89 d8                	mov    eax,ebx
c000f098:	f7 f1                	div    ecx
c000f09a:	39 cb                	cmp    ebx,ecx
c000f09c:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000f0a0:	88 16                	mov    BYTE PTR [esi],dl
c000f0a2:	73 ed                	jae    c000f091 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c000f0a4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f0a8:	83 c4 40             	add    esp,0x40
c000f0ab:	5b                   	pop    ebx
c000f0ac:	5e                   	pop    esi
c000f0ad:	5f                   	pop    edi
c000f0ae:	c3                   	ret    

c000f0af <Dbg::logc(char)>:
c000f0af:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0b3:	ba fd 03 00 00       	mov    edx,0x3fd
c000f0b8:	ec                   	in     al,dx
c000f0b9:	a8 20                	test   al,0x20
c000f0bb:	74 fb                	je     c000f0b8 <Dbg::logc(char)+0x9>
c000f0bd:	ba f8 03 00 00       	mov    edx,0x3f8
c000f0c2:	88 c8                	mov    al,cl
c000f0c4:	ee                   	out    dx,al
c000f0c5:	c3                   	ret    

c000f0c6 <Dbg::logs(char*)>:
c000f0c6:	53                   	push   ebx
c000f0c7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000f0cb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f0ce:	84 c0                	test   al,al
c000f0d0:	74 0f                	je     c000f0e1 <Dbg::logs(char*)+0x1b>
c000f0d2:	50                   	push   eax
c000f0d3:	43                   	inc    ebx
c000f0d4:	e8 d6 ff ff ff       	call   c000f0af <Dbg::logc(char)>
c000f0d9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f0dc:	5a                   	pop    edx
c000f0dd:	84 c0                	test   al,al
c000f0df:	75 f1                	jne    c000f0d2 <Dbg::logs(char*)+0xc>
c000f0e1:	5b                   	pop    ebx
c000f0e2:	c3                   	ret    

c000f0e3 <Dbg::logWriteInt(unsigned int)>:
c000f0e3:	83 ec 10             	sub    esp,0x10
c000f0e6:	6a 0a                	push   0xa
c000f0e8:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f0ec:	50                   	push   eax
c000f0ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f0f1:	e8 58 ff ff ff       	call   c000f04e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f0f6:	50                   	push   eax
c000f0f7:	e8 ca ff ff ff       	call   c000f0c6 <Dbg::logs(char*)>
c000f0fc:	83 c4 20             	add    esp,0x20
c000f0ff:	c3                   	ret    

c000f100 <Dbg::logWriteIntBase(unsigned int, int)>:
c000f100:	83 ec 10             	sub    esp,0x10
c000f103:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f107:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f10b:	50                   	push   eax
c000f10c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f110:	e8 39 ff ff ff       	call   c000f04e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f115:	50                   	push   eax
c000f116:	e8 ab ff ff ff       	call   c000f0c6 <Dbg::logs(char*)>
c000f11b:	83 c4 20             	add    esp,0x20
c000f11e:	c3                   	ret    

c000f11f <Dbg::kprintf(char const*, ...)>:
c000f11f:	55                   	push   ebp
c000f120:	57                   	push   edi
c000f121:	56                   	push   esi
c000f122:	53                   	push   ebx
c000f123:	83 ec 0c             	sub    esp,0xc
c000f126:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f12a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000f12e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f132:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000f135:	84 c0                	test   al,al
c000f137:	74 4a                	je     c000f183 <Dbg::kprintf(char const*, ...)+0x64>
c000f139:	31 db                	xor    ebx,ebx
c000f13b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000f13e:	3c 25                	cmp    al,0x25
c000f140:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000f143:	0f 85 e4 00 00 00    	jne    c000f22d <Dbg::kprintf(char const*, ...)+0x10e>
c000f149:	83 c3 02             	add    ebx,0x2
c000f14c:	8a 07                	mov    al,BYTE PTR [edi]
c000f14e:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000f151:	83 e8 25             	sub    eax,0x25
c000f154:	3c 53                	cmp    al,0x53
c000f156:	0f 87 ba 00 00 00    	ja     c000f216 <Dbg::kprintf(char const*, ...)+0xf7>
c000f15c:	0f b6 c0             	movzx  eax,al
c000f15f:	ff 24 85 bc 0f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf044]
c000f166:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f16a:	89 c8                	mov    eax,ecx
c000f16c:	83 c1 04             	add    ecx,0x4
c000f16f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f173:	ff 30                	push   DWORD PTR [eax]
c000f175:	e8 4c ff ff ff       	call   c000f0c6 <Dbg::logs(char*)>
c000f17a:	58                   	pop    eax
c000f17b:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000f17f:	84 c0                	test   al,al
c000f181:	75 b8                	jne    c000f13b <Dbg::kprintf(char const*, ...)+0x1c>
c000f183:	83 c4 0c             	add    esp,0xc
c000f186:	5b                   	pop    ebx
c000f187:	5e                   	pop    esi
c000f188:	5f                   	pop    edi
c000f189:	5d                   	pop    ebp
c000f18a:	c3                   	ret    
c000f18b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f18f:	89 d0                	mov    eax,edx
c000f191:	83 c2 04             	add    edx,0x4
c000f194:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f198:	ff 30                	push   DWORD PTR [eax]
c000f19a:	e8 44 ff ff ff       	call   c000f0e3 <Dbg::logWriteInt(unsigned int)>
c000f19f:	58                   	pop    eax
c000f1a0:	eb d9                	jmp    c000f17b <Dbg::kprintf(char const*, ...)+0x5c>
c000f1a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f1a6:	89 d0                	mov    eax,edx
c000f1a8:	83 c2 04             	add    edx,0x4
c000f1ab:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000f1ae:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f1b2:	50                   	push   eax
c000f1b3:	e8 f7 fe ff ff       	call   c000f0af <Dbg::logc(char)>
c000f1b8:	58                   	pop    eax
c000f1b9:	eb c0                	jmp    c000f17b <Dbg::kprintf(char const*, ...)+0x5c>
c000f1bb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1bf:	89 c8                	mov    eax,ecx
c000f1c1:	83 c1 04             	add    ecx,0x4
c000f1c4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f1c8:	ff 30                	push   DWORD PTR [eax]
c000f1ca:	e8 14 ff ff ff       	call   c000f0e3 <Dbg::logWriteInt(unsigned int)>
c000f1cf:	5f                   	pop    edi
c000f1d0:	eb a9                	jmp    c000f17b <Dbg::kprintf(char const*, ...)+0x5c>
c000f1d2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1d6:	89 c8                	mov    eax,ecx
c000f1d8:	83 c1 04             	add    ecx,0x4
c000f1db:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f1df:	6a 10                	push   0x10
c000f1e1:	ff 30                	push   DWORD PTR [eax]
c000f1e3:	e8 18 ff ff ff       	call   c000f100 <Dbg::logWriteIntBase(unsigned int, int)>
c000f1e8:	59                   	pop    ecx
c000f1e9:	5f                   	pop    edi
c000f1ea:	eb 8f                	jmp    c000f17b <Dbg::kprintf(char const*, ...)+0x5c>
c000f1ec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f1f0:	89 d0                	mov    eax,edx
c000f1f2:	83 c2 08             	add    edx,0x8
c000f1f5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f1f9:	6a 10                	push   0x10
c000f1fb:	ff 30                	push   DWORD PTR [eax]
c000f1fd:	e8 fe fe ff ff       	call   c000f100 <Dbg::logWriteIntBase(unsigned int, int)>
c000f202:	58                   	pop    eax
c000f203:	5a                   	pop    edx
c000f204:	e9 72 ff ff ff       	jmp    c000f17b <Dbg::kprintf(char const*, ...)+0x5c>
c000f209:	6a 25                	push   0x25
c000f20b:	e8 9f fe ff ff       	call   c000f0af <Dbg::logc(char)>
c000f210:	58                   	pop    eax
c000f211:	e9 65 ff ff ff       	jmp    c000f17b <Dbg::kprintf(char const*, ...)+0x5c>
c000f216:	6a 25                	push   0x25
c000f218:	e8 92 fe ff ff       	call   c000f0af <Dbg::logc(char)>
c000f21d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000f220:	50                   	push   eax
c000f221:	e8 89 fe ff ff       	call   c000f0af <Dbg::logc(char)>
c000f226:	5a                   	pop    edx
c000f227:	59                   	pop    ecx
c000f228:	e9 4e ff ff ff       	jmp    c000f17b <Dbg::kprintf(char const*, ...)+0x5c>
c000f22d:	50                   	push   eax
c000f22e:	89 eb                	mov    ebx,ebp
c000f230:	e8 7a fe ff ff       	call   c000f0af <Dbg::logc(char)>
c000f235:	89 fd                	mov    ebp,edi
c000f237:	58                   	pop    eax
c000f238:	e9 3e ff ff ff       	jmp    c000f17b <Dbg::kprintf(char const*, ...)+0x5c>
c000f23d:	90                   	nop

c000f23e <File::read(unsigned long long, void*, int*)>:
c000f23e:	53                   	push   ebx
c000f23f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f243:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f247:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f24e:	3c 19                	cmp    al,0x19
c000f250:	77 35                	ja     c000f287 <File::read(unsigned long long, void*, int*)+0x49>
c000f252:	8b 04 85 80 43 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbc80]
c000f259:	85 c0                	test   eax,eax
c000f25b:	74 2a                	je     c000f287 <File::read(unsigned long long, void*, int*)+0x49>
c000f25d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f263:	85 c0                	test   eax,eax
c000f265:	74 20                	je     c000f287 <File::read(unsigned long long, void*, int*)+0x49>
c000f267:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f26b:	74 21                	je     c000f28e <File::read(unsigned long long, void*, int*)+0x50>
c000f26d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f26f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f273:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f281:	5b                   	pop    ebx
c000f282:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000f285:	ff e0                	jmp    eax
c000f287:	b8 0b 00 00 00       	mov    eax,0xb
c000f28c:	eb 05                	jmp    c000f293 <File::read(unsigned long long, void*, int*)+0x55>
c000f28e:	b8 05 00 00 00       	mov    eax,0x5
c000f293:	5b                   	pop    ebx
c000f294:	c3                   	ret    
c000f295:	90                   	nop

c000f296 <File::write(unsigned long long, void*, int*)>:
c000f296:	53                   	push   ebx
c000f297:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f29b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f29f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f2a6:	3c 19                	cmp    al,0x19
c000f2a8:	77 35                	ja     c000f2df <File::write(unsigned long long, void*, int*)+0x49>
c000f2aa:	8b 04 85 80 43 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbc80]
c000f2b1:	85 c0                	test   eax,eax
c000f2b3:	74 2a                	je     c000f2df <File::write(unsigned long long, void*, int*)+0x49>
c000f2b5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f2bb:	85 c0                	test   eax,eax
c000f2bd:	74 20                	je     c000f2df <File::write(unsigned long long, void*, int*)+0x49>
c000f2bf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f2c3:	74 21                	je     c000f2e6 <File::write(unsigned long long, void*, int*)+0x50>
c000f2c5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f2c7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f2cb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f2d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f2d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f2d9:	5b                   	pop    ebx
c000f2da:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000f2dd:	ff e0                	jmp    eax
c000f2df:	b8 0b 00 00 00       	mov    eax,0xb
c000f2e4:	eb 05                	jmp    c000f2eb <File::write(unsigned long long, void*, int*)+0x55>
c000f2e6:	b8 05 00 00 00       	mov    eax,0x5
c000f2eb:	5b                   	pop    ebx
c000f2ec:	c3                   	ret    
c000f2ed:	90                   	nop

c000f2ee <Directory::read(unsigned long long, void*, int*)>:
c000f2ee:	53                   	push   ebx
c000f2ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f2f3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f2f7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f2fe:	3c 19                	cmp    al,0x19
c000f300:	77 35                	ja     c000f337 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f302:	8b 04 85 80 43 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbc80]
c000f309:	85 c0                	test   eax,eax
c000f30b:	74 2a                	je     c000f337 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f30d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f313:	85 c0                	test   eax,eax
c000f315:	74 20                	je     c000f337 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f317:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f31b:	74 21                	je     c000f33e <Directory::read(unsigned long long, void*, int*)+0x50>
c000f31d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f31f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f323:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f329:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f32d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f331:	5b                   	pop    ebx
c000f332:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000f335:	ff e0                	jmp    eax
c000f337:	b8 0b 00 00 00       	mov    eax,0xb
c000f33c:	eb 05                	jmp    c000f343 <Directory::read(unsigned long long, void*, int*)+0x55>
c000f33e:	b8 05 00 00 00       	mov    eax,0x5
c000f343:	5b                   	pop    ebx
c000f344:	c3                   	ret    
c000f345:	90                   	nop

c000f346 <Directory::write(unsigned long long, void*, int*)>:
c000f346:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f34a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f351:	b8 0b 00 00 00       	mov    eax,0xb
c000f356:	80 fa 19             	cmp    dl,0x19
c000f359:	77 18                	ja     c000f373 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f35b:	8b 14 95 80 43 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbc80]
c000f362:	85 d2                	test   edx,edx
c000f364:	74 0d                	je     c000f373 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f366:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f36d:	19 c0                	sbb    eax,eax
c000f36f:	83 e0 0a             	and    eax,0xa
c000f372:	40                   	inc    eax
c000f373:	c3                   	ret    

c000f374 <File::isAtty()>:
c000f374:	31 c0                	xor    eax,eax
c000f376:	c3                   	ret    
c000f377:	90                   	nop

c000f378 <Directory::isAtty()>:
c000f378:	31 c0                	xor    eax,eax
c000f37a:	c3                   	ret    
c000f37b:	90                   	nop

c000f37c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f37c:	b8 0a 00 00 00       	mov    eax,0xa
c000f381:	c3                   	ret    

c000f382 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f382:	b8 0a 00 00 00       	mov    eax,0xa
c000f387:	c3                   	ret    

c000f388 <File::~File()>:
c000f388:	83 ec 0c             	sub    esp,0xc
c000f38b:	ba 78 11 02 c0       	mov    edx,0xc0021178
c000f390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f394:	89 10                	mov    DWORD PTR [eax],edx
c000f396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f39a:	83 ec 0c             	sub    esp,0xc
c000f39d:	50                   	push   eax
c000f39e:	e8 1b eb ff ff       	call   c000debe <UnixFile::~UnixFile()>
c000f3a3:	83 c4 10             	add    esp,0x10
c000f3a6:	90                   	nop
c000f3a7:	83 c4 0c             	add    esp,0xc
c000f3aa:	c3                   	ret    
c000f3ab:	90                   	nop

c000f3ac <File::~File()>:
c000f3ac:	83 ec 0c             	sub    esp,0xc
c000f3af:	83 ec 0c             	sub    esp,0xc
c000f3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3b6:	e8 cd ff ff ff       	call   c000f388 <File::~File()>
c000f3bb:	83 c4 10             	add    esp,0x10
c000f3be:	83 ec 08             	sub    esp,0x8
c000f3c1:	68 14 01 00 00       	push   0x114
c000f3c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3ca:	e8 70 fc ff ff       	call   c000f03f <operator delete(void*, unsigned long)>
c000f3cf:	83 c4 10             	add    esp,0x10
c000f3d2:	83 c4 0c             	add    esp,0xc
c000f3d5:	c3                   	ret    

c000f3d6 <Directory::~Directory()>:
c000f3d6:	83 ec 0c             	sub    esp,0xc
c000f3d9:	ba 94 11 02 c0       	mov    edx,0xc0021194
c000f3de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3e2:	89 10                	mov    DWORD PTR [eax],edx
c000f3e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3e8:	83 ec 0c             	sub    esp,0xc
c000f3eb:	50                   	push   eax
c000f3ec:	e8 cd ea ff ff       	call   c000debe <UnixFile::~UnixFile()>
c000f3f1:	83 c4 10             	add    esp,0x10
c000f3f4:	90                   	nop
c000f3f5:	83 c4 0c             	add    esp,0xc
c000f3f8:	c3                   	ret    
c000f3f9:	90                   	nop

c000f3fa <Directory::~Directory()>:
c000f3fa:	83 ec 0c             	sub    esp,0xc
c000f3fd:	83 ec 0c             	sub    esp,0xc
c000f400:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f404:	e8 cd ff ff ff       	call   c000f3d6 <Directory::~Directory()>
c000f409:	83 c4 10             	add    esp,0x10
c000f40c:	83 ec 08             	sub    esp,0x8
c000f40f:	68 14 01 00 00       	push   0x114
c000f414:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f418:	e8 22 fc ff ff       	call   c000f03f <operator delete(void*, unsigned long)>
c000f41d:	83 c4 10             	add    esp,0x10
c000f420:	83 c4 0c             	add    esp,0xc
c000f423:	c3                   	ret    

c000f424 <Filesystem::Filesystem()>:
c000f424:	ba 14 11 02 c0       	mov    edx,0xc0021114
c000f429:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f42d:	89 10                	mov    DWORD PTR [eax],edx
c000f42f:	8b 15 e8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023ee8
c000f435:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f439:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f43c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f440:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c000f445:	90                   	nop
c000f446:	c3                   	ret    
c000f447:	90                   	nop

c000f448 <Filesystem::~Filesystem()>:
c000f448:	ba 14 11 02 c0       	mov    edx,0xc0021114
c000f44d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f451:	89 10                	mov    DWORD PTR [eax],edx
c000f453:	90                   	nop
c000f454:	c3                   	ret    
c000f455:	90                   	nop

c000f456 <Filesystem::~Filesystem()>:
c000f456:	83 ec 0c             	sub    esp,0xc
c000f459:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f45d:	e8 e6 ff ff ff       	call   c000f448 <Filesystem::~Filesystem()>
c000f462:	83 c4 04             	add    esp,0x4
c000f465:	83 ec 08             	sub    esp,0x8
c000f468:	6a 08                	push   0x8
c000f46a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f46e:	e8 cc fb ff ff       	call   c000f03f <operator delete(void*, unsigned long)>
c000f473:	83 c4 10             	add    esp,0x10
c000f476:	83 c4 0c             	add    esp,0xc
c000f479:	c3                   	ret    

c000f47a <initVFS()>:
c000f47a:	83 ec 18             	sub    esp,0x18
c000f47d:	6a 08                	push   0x8
c000f47f:	e8 ac fb ff ff       	call   c000f030 <operator new(unsigned long)>
c000f484:	89 04 24             	mov    DWORD PTR [esp],eax
c000f487:	e8 e2 ab 00 00       	call   c001a06e <FAT::FAT()>
c000f48c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f493:	e8 98 fb ff ff       	call   c000f030 <operator new(unsigned long)>
c000f498:	89 04 24             	mov    DWORD PTR [esp],eax
c000f49b:	e8 44 be 00 00       	call   c001b2e4 <ISO9660::ISO9660()>
c000f4a0:	83 c4 1c             	add    esp,0x1c
c000f4a3:	c3                   	ret    

c000f4a4 <standardiseFiles(char*, char const*, char const*)>:
c000f4a4:	55                   	push   ebp
c000f4a5:	57                   	push   edi
c000f4a6:	56                   	push   esi
c000f4a7:	53                   	push   ebx
c000f4a8:	81 ec 10 04 00 00    	sub    esp,0x410
c000f4ae:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f4b5:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f4bc:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f4c3:	68 00 04 00 00       	push   0x400
c000f4c8:	6a 00                	push   0x0
c000f4ca:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f4ce:	56                   	push   esi
c000f4cf:	e8 34 11 ff ff       	call   c0000608 <memset>
c000f4d4:	83 c4 10             	add    esp,0x10
c000f4d7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f4db:	75 0b                	jne    c000f4e8 <standardiseFiles(char*, char const*, char const*)+0x44>
c000f4dd:	50                   	push   eax
c000f4de:	50                   	push   eax
c000f4df:	57                   	push   edi
c000f4e0:	56                   	push   esi
c000f4e1:	e8 c1 11 ff ff       	call   c00006a7 <strcpy>
c000f4e6:	eb 41                	jmp    c000f529 <standardiseFiles(char*, char const*, char const*)+0x85>
c000f4e8:	8a 07                	mov    al,BYTE PTR [edi]
c000f4ea:	3c 5c                	cmp    al,0x5c
c000f4ec:	74 04                	je     c000f4f2 <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f4ee:	3c 2f                	cmp    al,0x2f
c000f4f0:	75 18                	jne    c000f50a <standardiseFiles(char*, char const*, char const*)+0x66>
c000f4f2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f4f5:	3c 60                	cmp    al,0x60
c000f4f7:	7e 03                	jle    c000f4fc <standardiseFiles(char*, char const*, char const*)+0x58>
c000f4f9:	83 e8 20             	sub    eax,0x20
c000f4fc:	88 04 24             	mov    BYTE PTR [esp],al
c000f4ff:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f506:	50                   	push   eax
c000f507:	50                   	push   eax
c000f508:	eb 18                	jmp    c000f522 <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f50a:	50                   	push   eax
c000f50b:	50                   	push   eax
c000f50c:	55                   	push   ebp
c000f50d:	56                   	push   esi
c000f50e:	e8 94 11 ff ff       	call   c00006a7 <strcpy>
c000f513:	5a                   	pop    edx
c000f514:	59                   	pop    ecx
c000f515:	68 40 24 02 c0       	push   0xc0022440
c000f51a:	56                   	push   esi
c000f51b:	e8 3e 12 ff ff       	call   c000075e <strcat>
c000f520:	5d                   	pop    ebp
c000f521:	58                   	pop    eax
c000f522:	57                   	push   edi
c000f523:	56                   	push   esi
c000f524:	e8 35 12 ff ff       	call   c000075e <strcat>
c000f529:	83 c4 10             	add    esp,0x10
c000f52c:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f52f:	3c 60                	cmp    al,0x60
c000f531:	7e 03                	jle    c000f536 <standardiseFiles(char*, char const*, char const*)+0x92>
c000f533:	83 e8 20             	sub    eax,0x20
c000f536:	88 04 24             	mov    BYTE PTR [esp],al
c000f539:	88 03                	mov    BYTE PTR [ebx],al
c000f53b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f542:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f548:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f54c:	bf 03 00 00 00       	mov    edi,0x3
c000f551:	b8 03 00 00 00       	mov    eax,0x3
c000f556:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f559:	84 d2                	test   dl,dl
c000f55b:	0f 84 91 00 00 00    	je     c000f5f2 <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f561:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f564:	80 fa 5c             	cmp    dl,0x5c
c000f567:	74 05                	je     c000f56e <standardiseFiles(char*, char const*, char const*)+0xca>
c000f569:	80 fa 2f             	cmp    dl,0x2f
c000f56c:	75 12                	jne    c000f580 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f56e:	89 c5                	mov    ebp,eax
c000f570:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f575:	74 09                	je     c000f580 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f577:	40                   	inc    eax
c000f578:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f57c:	89 cf                	mov    edi,ecx
c000f57e:	eb d6                	jmp    c000f556 <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f580:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f585:	75 5b                	jne    c000f5e2 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f587:	80 fa 2e             	cmp    dl,0x2e
c000f58a:	75 56                	jne    c000f5e2 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f58c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f590:	74 19                	je     c000f5ab <standardiseFiles(char*, char const*, char const*)+0x107>
c000f592:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f597:	74 53                	je     c000f5ec <standardiseFiles(char*, char const*, char const*)+0x148>
c000f599:	89 f9                	mov    ecx,edi
c000f59b:	41                   	inc    ecx
c000f59c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f59f:	80 fa 2f             	cmp    dl,0x2f
c000f5a2:	74 f7                	je     c000f59b <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f5a4:	80 fa 5c             	cmp    dl,0x5c
c000f5a7:	74 f2                	je     c000f59b <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f5a9:	eb d1                	jmp    c000f57c <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5ab:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f5b0:	74 3a                	je     c000f5ec <standardiseFiles(char*, char const*, char const*)+0x148>
c000f5b2:	83 f8 03             	cmp    eax,0x3
c000f5b5:	74 c5                	je     c000f57c <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5b7:	41                   	inc    ecx
c000f5b8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f5bb:	80 fa 2f             	cmp    dl,0x2f
c000f5be:	74 f7                	je     c000f5b7 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f5c0:	80 fa 5c             	cmp    dl,0x5c
c000f5c3:	74 f2                	je     c000f5b7 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f5c5:	48                   	dec    eax
c000f5c6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f5ca:	75 06                	jne    c000f5d2 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f5cc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f5d0:	eb f3                	jmp    c000f5c5 <standardiseFiles(char*, char const*, char const*)+0x121>
c000f5d2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f5d6:	74 07                	je     c000f5df <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f5d8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f5dc:	48                   	dec    eax
c000f5dd:	eb f3                	jmp    c000f5d2 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f5df:	40                   	inc    eax
c000f5e0:	eb 9a                	jmp    c000f57c <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5e2:	80 fa 2f             	cmp    dl,0x2f
c000f5e5:	74 95                	je     c000f57c <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5e7:	80 fa 5c             	cmp    dl,0x5c
c000f5ea:	74 90                	je     c000f57c <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5ec:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f5ef:	40                   	inc    eax
c000f5f0:	eb 8a                	jmp    c000f57c <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5f2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f5f6:	83 ec 0c             	sub    esp,0xc
c000f5f9:	53                   	push   ebx
c000f5fa:	e8 26 10 ff ff       	call   c0000625 <strlen>
c000f5ff:	83 c4 10             	add    esp,0x10
c000f602:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f607:	75 26                	jne    c000f62f <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f609:	83 ec 0c             	sub    esp,0xc
c000f60c:	53                   	push   ebx
c000f60d:	e8 13 10 ff ff       	call   c0000625 <strlen>
c000f612:	83 c4 10             	add    esp,0x10
c000f615:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f61a:	74 26                	je     c000f642 <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f61c:	83 ec 0c             	sub    esp,0xc
c000f61f:	53                   	push   ebx
c000f620:	e8 00 10 ff ff       	call   c0000625 <strlen>
c000f625:	83 c4 10             	add    esp,0x10
c000f628:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f62d:	eb c7                	jmp    c000f5f6 <standardiseFiles(char*, char const*, char const*)+0x152>
c000f62f:	83 ec 0c             	sub    esp,0xc
c000f632:	53                   	push   ebx
c000f633:	e8 ed 0f ff ff       	call   c0000625 <strlen>
c000f638:	83 c4 10             	add    esp,0x10
c000f63b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f640:	74 c7                	je     c000f609 <standardiseFiles(char*, char const*, char const*)+0x165>
c000f642:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f648:	5b                   	pop    ebx
c000f649:	5e                   	pop    esi
c000f64a:	5f                   	pop    edi
c000f64b:	5d                   	pop    ebp
c000f64c:	c3                   	ret    
c000f64d:	90                   	nop

c000f64e <File::File(char const*, Process*)>:
c000f64e:	83 ec 0c             	sub    esp,0xc
c000f651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f655:	83 ec 08             	sub    esp,0x8
c000f658:	6a 00                	push   0x0
c000f65a:	50                   	push   eax
c000f65b:	e8 bc e6 ff ff       	call   c000dd1c <UnixFile::UnixFile(int)>
c000f660:	83 c4 10             	add    esp,0x10
c000f663:	ba 78 11 02 c0       	mov    edx,0xc0021178
c000f668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f66c:	89 10                	mov    DWORD PTR [eax],edx
c000f66e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f672:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f67c:	83 c0 0d             	add    eax,0xd
c000f67f:	83 ec 04             	sub    esp,0x4
c000f682:	52                   	push   edx
c000f683:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f687:	50                   	push   eax
c000f688:	e8 17 fe ff ff       	call   c000f4a4 <standardiseFiles(char*, char const*, char const*)>
c000f68d:	83 c4 10             	add    esp,0x10
c000f690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f694:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f697:	8d 50 bf             	lea    edx,[eax-0x41]
c000f69a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f69e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f6a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6a8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f6ac:	90                   	nop
c000f6ad:	83 c4 0c             	add    esp,0xc
c000f6b0:	c3                   	ret    
c000f6b1:	90                   	nop

c000f6b2 <File::open(FileOpenMode)>:
c000f6b2:	53                   	push   ebx
c000f6b3:	b8 0b 00 00 00       	mov    eax,0xb
c000f6b8:	83 ec 08             	sub    esp,0x8
c000f6bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f6bf:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f6c6:	80 fa 19             	cmp    dl,0x19
c000f6c9:	77 40                	ja     c000f70b <File::open(FileOpenMode)+0x59>
c000f6cb:	8b 14 95 80 43 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbc80]
c000f6d2:	85 d2                	test   edx,edx
c000f6d4:	74 35                	je     c000f70b <File::open(FileOpenMode)+0x59>
c000f6d6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f6dc:	85 d2                	test   edx,edx
c000f6de:	74 2b                	je     c000f70b <File::open(FileOpenMode)+0x59>
c000f6e0:	b8 06 00 00 00       	mov    eax,0x6
c000f6e5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f6e9:	75 20                	jne    c000f70b <File::open(FileOpenMode)+0x59>
c000f6eb:	8b 02                	mov    eax,DWORD PTR [edx]
c000f6ed:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f6f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f6f7:	51                   	push   ecx
c000f6f8:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f6fb:	51                   	push   ecx
c000f6fc:	52                   	push   edx
c000f6fd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f700:	83 c4 10             	add    esp,0x10
c000f703:	85 c0                	test   eax,eax
c000f705:	75 04                	jne    c000f70b <File::open(FileOpenMode)+0x59>
c000f707:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f70b:	83 c4 08             	add    esp,0x8
c000f70e:	5b                   	pop    ebx
c000f70f:	c3                   	ret    

c000f710 <File::close()>:
c000f710:	53                   	push   ebx
c000f711:	b8 0b 00 00 00       	mov    eax,0xb
c000f716:	83 ec 08             	sub    esp,0x8
c000f719:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f71d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f724:	80 fa 19             	cmp    dl,0x19
c000f727:	77 41                	ja     c000f76a <File::close()+0x5a>
c000f729:	8b 1c 95 80 43 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdbc80]
c000f730:	85 db                	test   ebx,ebx
c000f732:	74 36                	je     c000f76a <File::close()+0x5a>
c000f734:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f73b:	74 2d                	je     c000f76a <File::close()+0x5a>
c000f73d:	b8 05 00 00 00       	mov    eax,0x5
c000f742:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f746:	74 22                	je     c000f76a <File::close()+0x5a>
c000f748:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f74c:	8b 04 95 80 43 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbc80]
c000f753:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f759:	53                   	push   ebx
c000f75a:	53                   	push   ebx
c000f75b:	8b 10                	mov    edx,DWORD PTR [eax]
c000f75d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f763:	50                   	push   eax
c000f764:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f767:	83 c4 10             	add    esp,0x10
c000f76a:	83 c4 08             	add    esp,0x8
c000f76d:	5b                   	pop    ebx
c000f76e:	c3                   	ret    
c000f76f:	90                   	nop

c000f770 <File::seek(unsigned long long)>:
c000f770:	56                   	push   esi
c000f771:	53                   	push   ebx
c000f772:	b8 0b 00 00 00       	mov    eax,0xb
c000f777:	51                   	push   ecx
c000f778:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f77c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f780:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f787:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f78b:	80 fa 19             	cmp    dl,0x19
c000f78e:	77 31                	ja     c000f7c1 <File::seek(unsigned long long)+0x51>
c000f790:	8b 14 95 80 43 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbc80]
c000f797:	85 d2                	test   edx,edx
c000f799:	74 26                	je     c000f7c1 <File::seek(unsigned long long)+0x51>
c000f79b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f7a1:	85 d2                	test   edx,edx
c000f7a3:	74 1c                	je     c000f7c1 <File::seek(unsigned long long)+0x51>
c000f7a5:	b8 05 00 00 00       	mov    eax,0x5
c000f7aa:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f7ae:	74 11                	je     c000f7c1 <File::seek(unsigned long long)+0x51>
c000f7b0:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7b2:	53                   	push   ebx
c000f7b3:	51                   	push   ecx
c000f7b4:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f7ba:	52                   	push   edx
c000f7bb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f7be:	83 c4 10             	add    esp,0x10
c000f7c1:	5a                   	pop    edx
c000f7c2:	5b                   	pop    ebx
c000f7c3:	5e                   	pop    esi
c000f7c4:	c3                   	ret    
c000f7c5:	90                   	nop

c000f7c6 <File::tell(unsigned long long*)>:
c000f7c6:	83 ec 0c             	sub    esp,0xc
c000f7c9:	b8 0b 00 00 00       	mov    eax,0xb
c000f7ce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f7d2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f7d9:	80 fa 19             	cmp    dl,0x19
c000f7dc:	77 34                	ja     c000f812 <File::tell(unsigned long long*)+0x4c>
c000f7de:	8b 14 95 80 43 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbc80]
c000f7e5:	85 d2                	test   edx,edx
c000f7e7:	74 29                	je     c000f812 <File::tell(unsigned long long*)+0x4c>
c000f7e9:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f7ef:	85 d2                	test   edx,edx
c000f7f1:	74 1f                	je     c000f812 <File::tell(unsigned long long*)+0x4c>
c000f7f3:	b8 05 00 00 00       	mov    eax,0x5
c000f7f8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f7fc:	74 14                	je     c000f812 <File::tell(unsigned long long*)+0x4c>
c000f7fe:	50                   	push   eax
c000f7ff:	8b 02                	mov    eax,DWORD PTR [edx]
c000f801:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f805:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f80b:	52                   	push   edx
c000f80c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f80f:	83 c4 10             	add    esp,0x10
c000f812:	83 c4 0c             	add    esp,0xc
c000f815:	c3                   	ret    

c000f816 <File::rewind()>:
c000f816:	83 ec 10             	sub    esp,0x10
c000f819:	6a 00                	push   0x0
c000f81b:	6a 00                	push   0x0
c000f81d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f821:	e8 4a ff ff ff       	call   c000f770 <File::seek(unsigned long long)>
c000f826:	83 c4 1c             	add    esp,0x1c
c000f829:	c3                   	ret    

c000f82a <File::unlink()>:
c000f82a:	83 ec 0c             	sub    esp,0xc
c000f82d:	b8 0b 00 00 00       	mov    eax,0xb
c000f832:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f836:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f83d:	80 f9 19             	cmp    cl,0x19
c000f840:	77 2f                	ja     c000f871 <File::unlink()+0x47>
c000f842:	8b 0c 8d 80 43 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbc80]
c000f849:	85 c9                	test   ecx,ecx
c000f84b:	74 24                	je     c000f871 <File::unlink()+0x47>
c000f84d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f853:	85 c9                	test   ecx,ecx
c000f855:	74 1a                	je     c000f871 <File::unlink()+0x47>
c000f857:	b8 06 00 00 00       	mov    eax,0x6
c000f85c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f860:	75 0f                	jne    c000f871 <File::unlink()+0x47>
c000f862:	83 c2 0d             	add    edx,0xd
c000f865:	50                   	push   eax
c000f866:	50                   	push   eax
c000f867:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f869:	52                   	push   edx
c000f86a:	51                   	push   ecx
c000f86b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f86e:	83 c4 10             	add    esp,0x10
c000f871:	83 c4 0c             	add    esp,0xc
c000f874:	c3                   	ret    
c000f875:	90                   	nop

c000f876 <File::rename(char const*)>:
c000f876:	83 ec 0c             	sub    esp,0xc
c000f879:	b8 0b 00 00 00       	mov    eax,0xb
c000f87e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f882:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f889:	80 f9 19             	cmp    cl,0x19
c000f88c:	77 32                	ja     c000f8c0 <File::rename(char const*)+0x4a>
c000f88e:	8b 0c 8d 80 43 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbc80]
c000f895:	85 c9                	test   ecx,ecx
c000f897:	74 27                	je     c000f8c0 <File::rename(char const*)+0x4a>
c000f899:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f89f:	85 c9                	test   ecx,ecx
c000f8a1:	74 1d                	je     c000f8c0 <File::rename(char const*)+0x4a>
c000f8a3:	b8 06 00 00 00       	mov    eax,0x6
c000f8a8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f8ac:	75 12                	jne    c000f8c0 <File::rename(char const*)+0x4a>
c000f8ae:	83 c2 0d             	add    edx,0xd
c000f8b1:	50                   	push   eax
c000f8b2:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f8b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8b8:	52                   	push   edx
c000f8b9:	51                   	push   ecx
c000f8ba:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f8bd:	83 c4 10             	add    esp,0x10
c000f8c0:	83 c4 0c             	add    esp,0xc
c000f8c3:	c3                   	ret    

c000f8c4 <File::chfatattr(unsigned char, unsigned char)>:
c000f8c4:	57                   	push   edi
c000f8c5:	b8 0b 00 00 00       	mov    eax,0xb
c000f8ca:	56                   	push   esi
c000f8cb:	53                   	push   ebx
c000f8cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f8d0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f8d4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f8db:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f8df:	80 f9 19             	cmp    cl,0x19
c000f8e2:	77 37                	ja     c000f91b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f8e4:	8b 0c 8d 80 43 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbc80]
c000f8eb:	85 c9                	test   ecx,ecx
c000f8ed:	74 2c                	je     c000f91b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f8ef:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f8f5:	85 c9                	test   ecx,ecx
c000f8f7:	74 22                	je     c000f91b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f8f9:	b8 06 00 00 00       	mov    eax,0x6
c000f8fe:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f902:	75 17                	jne    c000f91b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f904:	8b 39                	mov    edi,DWORD PTR [ecx]
c000f906:	89 f0                	mov    eax,esi
c000f908:	83 c2 0d             	add    edx,0xd
c000f90b:	0f b6 f0             	movzx  esi,al
c000f90e:	0f b6 db             	movzx  ebx,bl
c000f911:	56                   	push   esi
c000f912:	53                   	push   ebx
c000f913:	52                   	push   edx
c000f914:	51                   	push   ecx
c000f915:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000f918:	83 c4 10             	add    esp,0x10
c000f91b:	5b                   	pop    ebx
c000f91c:	5e                   	pop    esi
c000f91d:	5f                   	pop    edi
c000f91e:	c3                   	ret    
c000f91f:	90                   	nop

c000f920 <File::exists()>:
c000f920:	83 ec 0c             	sub    esp,0xc
c000f923:	31 c0                	xor    eax,eax
c000f925:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f929:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f930:	80 f9 19             	cmp    cl,0x19
c000f933:	77 24                	ja     c000f959 <File::exists()+0x39>
c000f935:	8b 0c 8d 80 43 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbc80]
c000f93c:	85 c9                	test   ecx,ecx
c000f93e:	74 19                	je     c000f959 <File::exists()+0x39>
c000f940:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f946:	85 c9                	test   ecx,ecx
c000f948:	74 0f                	je     c000f959 <File::exists()+0x39>
c000f94a:	83 c2 0d             	add    edx,0xd
c000f94d:	50                   	push   eax
c000f94e:	50                   	push   eax
c000f94f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f951:	52                   	push   edx
c000f952:	51                   	push   ecx
c000f953:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000f956:	83 c4 10             	add    esp,0x10
c000f959:	83 c4 0c             	add    esp,0xc
c000f95c:	c3                   	ret    
c000f95d:	90                   	nop

c000f95e <File::stat(unsigned long long*, bool*)>:
c000f95e:	56                   	push   esi
c000f95f:	53                   	push   ebx
c000f960:	50                   	push   eax
c000f961:	b8 0b 00 00 00       	mov    eax,0xb
c000f966:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f96a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f96e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f975:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f979:	80 f9 19             	cmp    cl,0x19
c000f97c:	77 3d                	ja     c000f9bb <File::stat(unsigned long long*, bool*)+0x5d>
c000f97e:	8b 0c 8d 80 43 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbc80]
c000f985:	85 c9                	test   ecx,ecx
c000f987:	74 32                	je     c000f9bb <File::stat(unsigned long long*, bool*)+0x5d>
c000f989:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f98f:	85 c9                	test   ecx,ecx
c000f991:	74 28                	je     c000f9bb <File::stat(unsigned long long*, bool*)+0x5d>
c000f993:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f995:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f999:	74 13                	je     c000f9ae <File::stat(unsigned long long*, bool*)+0x50>
c000f99b:	83 ec 04             	sub    esp,0x4
c000f99e:	56                   	push   esi
c000f99f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000f9a5:	51                   	push   ecx
c000f9a6:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000f9a9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000f9ac:	eb 0a                	jmp    c000f9b8 <File::stat(unsigned long long*, bool*)+0x5a>
c000f9ae:	53                   	push   ebx
c000f9af:	83 c2 0d             	add    edx,0xd
c000f9b2:	56                   	push   esi
c000f9b3:	52                   	push   edx
c000f9b4:	51                   	push   ecx
c000f9b5:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000f9b8:	83 c4 10             	add    esp,0x10
c000f9bb:	5a                   	pop    edx
c000f9bc:	5b                   	pop    ebx
c000f9bd:	5e                   	pop    esi
c000f9be:	c3                   	ret    

c000f9bf <getcwd(Process*, char*, int)>:
c000f9bf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f9c3:	31 c0                	xor    eax,eax
c000f9c5:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000f9c8:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000f9cc:	7d 15                	jge    c000f9e3 <getcwd(Process*, char*, int)+0x24>
c000f9ce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f9d2:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000f9d9:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000f9dc:	84 c9                	test   cl,cl
c000f9de:	74 06                	je     c000f9e6 <getcwd(Process*, char*, int)+0x27>
c000f9e0:	40                   	inc    eax
c000f9e1:	eb e2                	jmp    c000f9c5 <getcwd(Process*, char*, int)+0x6>
c000f9e3:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000f9e6:	31 c0                	xor    eax,eax
c000f9e8:	c3                   	ret    

c000f9e9 <setcwd(Process*, char*)>:
c000f9e9:	55                   	push   ebp
c000f9ea:	57                   	push   edi
c000f9eb:	56                   	push   esi
c000f9ec:	53                   	push   ebx
c000f9ed:	81 ec 20 02 00 00    	sub    esp,0x220
c000f9f3:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000f9fa:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000fa00:	57                   	push   edi
c000fa01:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000fa08:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000fa0c:	56                   	push   esi
c000fa0d:	e8 92 fa ff ff       	call   c000f4a4 <standardiseFiles(char*, char const*, char const*)>
c000fa12:	89 34 24             	mov    DWORD PTR [esp],esi
c000fa15:	e8 0b 0c ff ff       	call   c0000625 <strlen>
c000fa1a:	83 c4 10             	add    esp,0x10
c000fa1d:	83 f8 02             	cmp    eax,0x2
c000fa20:	77 17                	ja     c000fa39 <setcwd(Process*, char*)+0x50>
c000fa22:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000fa27:	83 e8 41             	sub    eax,0x41
c000fa2a:	83 f8 19             	cmp    eax,0x19
c000fa2d:	76 24                	jbe    c000fa53 <setcwd(Process*, char*)+0x6a>
c000fa2f:	b8 03 00 00 00       	mov    eax,0x3
c000fa34:	e9 cb 00 00 00       	jmp    c000fb04 <setcwd(Process*, char*)+0x11b>
c000fa39:	83 ec 0c             	sub    esp,0xc
c000fa3c:	56                   	push   esi
c000fa3d:	e8 e3 0b ff ff       	call   c0000625 <strlen>
c000fa42:	83 c4 10             	add    esp,0x10
c000fa45:	83 f8 03             	cmp    eax,0x3
c000fa48:	75 33                	jne    c000fa7d <setcwd(Process*, char*)+0x94>
c000fa4a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000fa4f:	75 2c                	jne    c000fa7d <setcwd(Process*, char*)+0x94>
c000fa51:	eb cf                	jmp    c000fa22 <setcwd(Process*, char*)+0x39>
c000fa53:	8b 14 85 80 43 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbc80]
c000fa5a:	b8 05 00 00 00       	mov    eax,0x5
c000fa5f:	85 d2                	test   edx,edx
c000fa61:	0f 84 9d 00 00 00    	je     c000fb04 <setcwd(Process*, char*)+0x11b>
c000fa67:	b8 06 00 00 00       	mov    eax,0x6
c000fa6c:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fa73:	0f 84 8b 00 00 00    	je     c000fb04 <setcwd(Process*, char*)+0x11b>
c000fa79:	51                   	push   ecx
c000fa7a:	51                   	push   ecx
c000fa7b:	eb 7b                	jmp    c000faf8 <setcwd(Process*, char*)+0x10f>
c000fa7d:	83 ec 0c             	sub    esp,0xc
c000fa80:	68 14 01 00 00       	push   0x114
c000fa85:	e8 a6 f5 ff ff       	call   c000f030 <operator new(unsigned long)>
c000fa8a:	83 c4 0c             	add    esp,0xc
c000fa8d:	89 c3                	mov    ebx,eax
c000fa8f:	55                   	push   ebp
c000fa90:	56                   	push   esi
c000fa91:	50                   	push   eax
c000fa92:	e8 b7 fb ff ff       	call   c000f64e <File::File(char const*, Process*)>
c000fa97:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000fa9c:	83 c4 0c             	add    esp,0xc
c000fa9f:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000faa3:	50                   	push   eax
c000faa4:	8d 44 24 10          	lea    eax,[esp+0x10]
c000faa8:	50                   	push   eax
c000faa9:	53                   	push   ebx
c000faaa:	e8 af fe ff ff       	call   c000f95e <File::stat(unsigned long long*, bool*)>
c000faaf:	83 c4 10             	add    esp,0x10
c000fab2:	8b 13                	mov    edx,DWORD PTR [ebx]
c000fab4:	83 f8 02             	cmp    eax,0x2
c000fab7:	75 09                	jne    c000fac2 <setcwd(Process*, char*)+0xd9>
c000fab9:	83 ec 0c             	sub    esp,0xc
c000fabc:	53                   	push   ebx
c000fabd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fac0:	eb 0d                	jmp    c000facf <setcwd(Process*, char*)+0xe6>
c000fac2:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000fac5:	85 c0                	test   eax,eax
c000fac7:	74 10                	je     c000fad9 <setcwd(Process*, char*)+0xf0>
c000fac9:	83 ec 0c             	sub    esp,0xc
c000facc:	53                   	push   ebx
c000facd:	ff d2                	call   edx
c000facf:	83 c4 10             	add    esp,0x10
c000fad2:	b8 01 00 00 00       	mov    eax,0x1
c000fad7:	eb 2b                	jmp    c000fb04 <setcwd(Process*, char*)+0x11b>
c000fad9:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000fade:	75 10                	jne    c000faf0 <setcwd(Process*, char*)+0x107>
c000fae0:	83 ec 0c             	sub    esp,0xc
c000fae3:	53                   	push   ebx
c000fae4:	ff d2                	call   edx
c000fae6:	83 c4 10             	add    esp,0x10
c000fae9:	b8 02 00 00 00       	mov    eax,0x2
c000faee:	eb 14                	jmp    c000fb04 <setcwd(Process*, char*)+0x11b>
c000faf0:	83 ec 0c             	sub    esp,0xc
c000faf3:	53                   	push   ebx
c000faf4:	ff d2                	call   edx
c000faf6:	58                   	pop    eax
c000faf7:	5a                   	pop    edx
c000faf8:	56                   	push   esi
c000faf9:	57                   	push   edi
c000fafa:	e8 a8 0b ff ff       	call   c00006a7 <strcpy>
c000faff:	83 c4 10             	add    esp,0x10
c000fb02:	31 c0                	xor    eax,eax
c000fb04:	81 c4 1c 02 00 00    	add    esp,0x21c
c000fb0a:	5b                   	pop    ebx
c000fb0b:	5e                   	pop    esi
c000fb0c:	5f                   	pop    edi
c000fb0d:	5d                   	pop    ebp
c000fb0e:	c3                   	ret    
c000fb0f:	90                   	nop

c000fb10 <Directory::Directory(char const*, Process*)>:
c000fb10:	83 ec 0c             	sub    esp,0xc
c000fb13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb17:	83 ec 08             	sub    esp,0x8
c000fb1a:	6a 00                	push   0x0
c000fb1c:	50                   	push   eax
c000fb1d:	e8 fa e1 ff ff       	call   c000dd1c <UnixFile::UnixFile(int)>
c000fb22:	83 c4 10             	add    esp,0x10
c000fb25:	ba 94 11 02 c0       	mov    edx,0xc0021194
c000fb2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb2e:	89 10                	mov    DWORD PTR [eax],edx
c000fb30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fb34:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000fb3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb3e:	83 c0 0d             	add    eax,0xd
c000fb41:	83 ec 04             	sub    esp,0x4
c000fb44:	52                   	push   edx
c000fb45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb49:	50                   	push   eax
c000fb4a:	e8 55 f9 ff ff       	call   c000f4a4 <standardiseFiles(char*, char const*, char const*)>
c000fb4f:	83 c4 10             	add    esp,0x10
c000fb52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb56:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000fb59:	8d 50 bf             	lea    edx,[eax-0x41]
c000fb5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb60:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000fb66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb6a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000fb6e:	90                   	nop
c000fb6f:	83 c4 0c             	add    esp,0xc
c000fb72:	c3                   	ret    
c000fb73:	90                   	nop

c000fb74 <Directory::open()>:
c000fb74:	53                   	push   ebx
c000fb75:	b8 0b 00 00 00       	mov    eax,0xb
c000fb7a:	83 ec 08             	sub    esp,0x8
c000fb7d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb81:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000fb88:	80 fa 19             	cmp    dl,0x19
c000fb8b:	77 3d                	ja     c000fbca <Directory::open()+0x56>
c000fb8d:	8b 14 95 80 43 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbc80]
c000fb94:	85 d2                	test   edx,edx
c000fb96:	74 32                	je     c000fbca <Directory::open()+0x56>
c000fb98:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000fb9e:	85 d2                	test   edx,edx
c000fba0:	74 28                	je     c000fbca <Directory::open()+0x56>
c000fba2:	b8 06 00 00 00       	mov    eax,0x6
c000fba7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000fbab:	75 1d                	jne    c000fbca <Directory::open()+0x56>
c000fbad:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000fbb3:	50                   	push   eax
c000fbb4:	8b 02                	mov    eax,DWORD PTR [edx]
c000fbb6:	51                   	push   ecx
c000fbb7:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000fbba:	51                   	push   ecx
c000fbbb:	52                   	push   edx
c000fbbc:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000fbbf:	83 c4 10             	add    esp,0x10
c000fbc2:	85 c0                	test   eax,eax
c000fbc4:	75 04                	jne    c000fbca <Directory::open()+0x56>
c000fbc6:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000fbca:	83 c4 08             	add    esp,0x8
c000fbcd:	5b                   	pop    ebx
c000fbce:	c3                   	ret    
c000fbcf:	90                   	nop

c000fbd0 <Directory::close()>:
c000fbd0:	53                   	push   ebx
c000fbd1:	b8 0b 00 00 00       	mov    eax,0xb
c000fbd6:	83 ec 08             	sub    esp,0x8
c000fbd9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fbdd:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fbe4:	80 fa 19             	cmp    dl,0x19
c000fbe7:	77 41                	ja     c000fc2a <Directory::close()+0x5a>
c000fbe9:	8b 1c 95 80 43 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdbc80]
c000fbf0:	85 db                	test   ebx,ebx
c000fbf2:	74 36                	je     c000fc2a <Directory::close()+0x5a>
c000fbf4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000fbfb:	74 2d                	je     c000fc2a <Directory::close()+0x5a>
c000fbfd:	b8 05 00 00 00       	mov    eax,0x5
c000fc02:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000fc06:	74 22                	je     c000fc2a <Directory::close()+0x5a>
c000fc08:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000fc0c:	8b 04 95 80 43 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbc80]
c000fc13:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000fc19:	53                   	push   ebx
c000fc1a:	53                   	push   ebx
c000fc1b:	8b 10                	mov    edx,DWORD PTR [eax]
c000fc1d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000fc23:	50                   	push   eax
c000fc24:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000fc27:	83 c4 10             	add    esp,0x10
c000fc2a:	83 c4 08             	add    esp,0x8
c000fc2d:	5b                   	pop    ebx
c000fc2e:	c3                   	ret    
c000fc2f:	90                   	nop

c000fc30 <Directory::unlink()>:
c000fc30:	83 ec 0c             	sub    esp,0xc
c000fc33:	b8 0b 00 00 00       	mov    eax,0xb
c000fc38:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fc3c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fc43:	80 f9 19             	cmp    cl,0x19
c000fc46:	77 2f                	ja     c000fc77 <Directory::unlink()+0x47>
c000fc48:	8b 0c 8d 80 43 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbc80]
c000fc4f:	85 c9                	test   ecx,ecx
c000fc51:	74 24                	je     c000fc77 <Directory::unlink()+0x47>
c000fc53:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fc59:	85 c9                	test   ecx,ecx
c000fc5b:	74 1a                	je     c000fc77 <Directory::unlink()+0x47>
c000fc5d:	b8 06 00 00 00       	mov    eax,0x6
c000fc62:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fc66:	75 0f                	jne    c000fc77 <Directory::unlink()+0x47>
c000fc68:	83 c2 0d             	add    edx,0xd
c000fc6b:	50                   	push   eax
c000fc6c:	50                   	push   eax
c000fc6d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fc6f:	52                   	push   edx
c000fc70:	51                   	push   ecx
c000fc71:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000fc74:	83 c4 10             	add    esp,0x10
c000fc77:	83 c4 0c             	add    esp,0xc
c000fc7a:	c3                   	ret    
c000fc7b:	90                   	nop

c000fc7c <Directory::rename(char const*)>:
c000fc7c:	83 ec 0c             	sub    esp,0xc
c000fc7f:	b8 0b 00 00 00       	mov    eax,0xb
c000fc84:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fc88:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fc8f:	80 f9 19             	cmp    cl,0x19
c000fc92:	77 32                	ja     c000fcc6 <Directory::rename(char const*)+0x4a>
c000fc94:	8b 0c 8d 80 43 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbc80]
c000fc9b:	85 c9                	test   ecx,ecx
c000fc9d:	74 27                	je     c000fcc6 <Directory::rename(char const*)+0x4a>
c000fc9f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fca5:	85 c9                	test   ecx,ecx
c000fca7:	74 1d                	je     c000fcc6 <Directory::rename(char const*)+0x4a>
c000fca9:	b8 06 00 00 00       	mov    eax,0x6
c000fcae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fcb2:	75 12                	jne    c000fcc6 <Directory::rename(char const*)+0x4a>
c000fcb4:	83 c2 0d             	add    edx,0xd
c000fcb7:	50                   	push   eax
c000fcb8:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fcba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fcbe:	52                   	push   edx
c000fcbf:	51                   	push   ecx
c000fcc0:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000fcc3:	83 c4 10             	add    esp,0x10
c000fcc6:	83 c4 0c             	add    esp,0xc
c000fcc9:	c3                   	ret    

c000fcca <Directory::exists()>:
c000fcca:	83 ec 0c             	sub    esp,0xc
c000fccd:	31 c0                	xor    eax,eax
c000fccf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fcd3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fcda:	80 f9 19             	cmp    cl,0x19
c000fcdd:	77 24                	ja     c000fd03 <Directory::exists()+0x39>
c000fcdf:	8b 0c 8d 80 43 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbc80]
c000fce6:	85 c9                	test   ecx,ecx
c000fce8:	74 19                	je     c000fd03 <Directory::exists()+0x39>
c000fcea:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fcf0:	85 c9                	test   ecx,ecx
c000fcf2:	74 0f                	je     c000fd03 <Directory::exists()+0x39>
c000fcf4:	83 c2 0d             	add    edx,0xd
c000fcf7:	50                   	push   eax
c000fcf8:	50                   	push   eax
c000fcf9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fcfb:	52                   	push   edx
c000fcfc:	51                   	push   ecx
c000fcfd:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fd00:	83 c4 10             	add    esp,0x10
c000fd03:	83 c4 0c             	add    esp,0xc
c000fd06:	c3                   	ret    
c000fd07:	90                   	nop

c000fd08 <Directory::read(dirent*)>:
c000fd08:	83 ec 1c             	sub    esp,0x1c
c000fd0b:	b8 0b 00 00 00       	mov    eax,0xb
c000fd10:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000fd14:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fd1b:	80 fa 19             	cmp    dl,0x19
c000fd1e:	77 30                	ja     c000fd50 <Directory::read(dirent*)+0x48>
c000fd20:	8b 14 95 80 43 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbc80]
c000fd27:	85 d2                	test   edx,edx
c000fd29:	74 25                	je     c000fd50 <Directory::read(dirent*)+0x48>
c000fd2b:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fd32:	74 1c                	je     c000fd50 <Directory::read(dirent*)+0x48>
c000fd34:	83 ec 0c             	sub    esp,0xc
c000fd37:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd39:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fd3d:	52                   	push   edx
c000fd3e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fd42:	6a 00                	push   0x0
c000fd44:	68 10 01 00 00       	push   0x110
c000fd49:	51                   	push   ecx
c000fd4a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fd4d:	83 c4 20             	add    esp,0x20
c000fd50:	83 c4 1c             	add    esp,0x1c
c000fd53:	c3                   	ret    

c000fd54 <Directory::create()>:
c000fd54:	83 ec 0c             	sub    esp,0xc
c000fd57:	b8 0b 00 00 00       	mov    eax,0xb
c000fd5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd60:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd67:	80 f9 19             	cmp    cl,0x19
c000fd6a:	77 2f                	ja     c000fd9b <Directory::create()+0x47>
c000fd6c:	8b 0c 8d 80 43 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbc80]
c000fd73:	85 c9                	test   ecx,ecx
c000fd75:	74 24                	je     c000fd9b <Directory::create()+0x47>
c000fd77:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fd7d:	85 c9                	test   ecx,ecx
c000fd7f:	74 1a                	je     c000fd9b <Directory::create()+0x47>
c000fd81:	b8 06 00 00 00       	mov    eax,0x6
c000fd86:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fd8a:	75 0f                	jne    c000fd9b <Directory::create()+0x47>
c000fd8c:	83 c2 0d             	add    edx,0xd
c000fd8f:	50                   	push   eax
c000fd90:	50                   	push   eax
c000fd91:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd93:	52                   	push   edx
c000fd94:	51                   	push   ecx
c000fd95:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000fd98:	83 c4 10             	add    esp,0x10
c000fd9b:	83 c4 0c             	add    esp,0xc
c000fd9e:	c3                   	ret    
c000fd9f:	90                   	nop

c000fda0 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000fda0:	b8 0a 00 00 00       	mov    eax,0xa
c000fda5:	c3                   	ret    

c000fda6 <Bus::Bus(char const*)>:
c000fda6:	83 ec 0c             	sub    esp,0xc
c000fda9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdad:	83 ec 08             	sub    esp,0x8
c000fdb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdb4:	50                   	push   eax
c000fdb5:	e8 60 09 00 00       	call   c001071a <Device::Device(char const*)>
c000fdba:	83 c4 10             	add    esp,0x10
c000fdbd:	ba b0 11 02 c0       	mov    edx,0xc00211b0
c000fdc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdc6:	89 10                	mov    DWORD PTR [eax],edx
c000fdc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdcc:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fdd6:	90                   	nop
c000fdd7:	83 c4 0c             	add    esp,0xc
c000fdda:	c3                   	ret    
c000fddb:	90                   	nop

c000fddc <Bus::~Bus()>:
c000fddc:	83 ec 0c             	sub    esp,0xc
c000fddf:	ba b0 11 02 c0       	mov    edx,0xc00211b0
c000fde4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fde8:	89 10                	mov    DWORD PTR [eax],edx
c000fdea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdee:	83 ec 0c             	sub    esp,0xc
c000fdf1:	50                   	push   eax
c000fdf2:	e8 d5 05 00 00       	call   c00103cc <Device::~Device()>
c000fdf7:	83 c4 10             	add    esp,0x10
c000fdfa:	90                   	nop
c000fdfb:	83 c4 0c             	add    esp,0xc
c000fdfe:	c3                   	ret    
c000fdff:	90                   	nop

c000fe00 <Bus::~Bus()>:
c000fe00:	83 ec 0c             	sub    esp,0xc
c000fe03:	83 ec 0c             	sub    esp,0xc
c000fe06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe0a:	e8 cd ff ff ff       	call   c000fddc <Bus::~Bus()>
c000fe0f:	83 c4 10             	add    esp,0x10
c000fe12:	83 ec 08             	sub    esp,0x8
c000fe15:	68 58 01 00 00       	push   0x158
c000fe1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe1e:	e8 1c f2 ff ff       	call   c000f03f <operator delete(void*, unsigned long)>
c000fe23:	83 c4 10             	add    esp,0x10
c000fe26:	83 c4 0c             	add    esp,0xc
c000fe29:	c3                   	ret    

c000fe2a <Buzzer::Buzzer(char const*)>:
c000fe2a:	83 ec 0c             	sub    esp,0xc
c000fe2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe31:	83 ec 08             	sub    esp,0x8
c000fe34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe38:	50                   	push   eax
c000fe39:	e8 dc 08 00 00       	call   c001071a <Device::Device(char const*)>
c000fe3e:	83 c4 10             	add    esp,0x10
c000fe41:	ba dc 11 02 c0       	mov    edx,0xc00211dc
c000fe46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe4a:	89 10                	mov    DWORD PTR [eax],edx
c000fe4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe50:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000fe5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe5e:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000fe68:	90                   	nop
c000fe69:	83 c4 0c             	add    esp,0xc
c000fe6c:	c3                   	ret    
c000fe6d:	90                   	nop

c000fe6e <Buzzer::~Buzzer()>:
c000fe6e:	83 ec 0c             	sub    esp,0xc
c000fe71:	ba dc 11 02 c0       	mov    edx,0xc00211dc
c000fe76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe7a:	89 10                	mov    DWORD PTR [eax],edx
c000fe7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe80:	83 ec 0c             	sub    esp,0xc
c000fe83:	50                   	push   eax
c000fe84:	e8 43 05 00 00       	call   c00103cc <Device::~Device()>
c000fe89:	83 c4 10             	add    esp,0x10
c000fe8c:	90                   	nop
c000fe8d:	83 c4 0c             	add    esp,0xc
c000fe90:	c3                   	ret    
c000fe91:	90                   	nop

c000fe92 <Buzzer::~Buzzer()>:
c000fe92:	83 ec 0c             	sub    esp,0xc
c000fe95:	83 ec 0c             	sub    esp,0xc
c000fe98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe9c:	e8 cd ff ff ff       	call   c000fe6e <Buzzer::~Buzzer()>
c000fea1:	83 c4 10             	add    esp,0x10
c000fea4:	83 ec 08             	sub    esp,0x8
c000fea7:	68 5c 01 00 00       	push   0x15c
c000feac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000feb0:	e8 8a f1 ff ff       	call   c000f03f <operator delete(void*, unsigned long)>
c000feb5:	83 c4 10             	add    esp,0x10
c000feb8:	83 c4 0c             	add    esp,0xc
c000febb:	c3                   	ret    

c000febc <Buzzer::stop()>:
c000febc:	83 ec 14             	sub    esp,0x14
c000febf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fec3:	8b 10                	mov    edx,DWORD PTR [eax]
c000fec5:	6a 00                	push   0x0
c000fec7:	50                   	push   eax
c000fec8:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fecb:	83 c4 1c             	add    esp,0x1c
c000fece:	c3                   	ret    

c000fecf <beepThread(void*)>:
c000fecf:	53                   	push   ebx
c000fed0:	83 ec 08             	sub    esp,0x8
c000fed3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fed7:	e8 b2 82 00 00       	call   c001818e <unlockScheduler()>
c000fedc:	b8 40 42 0f 00       	mov    eax,0xf4240
c000fee1:	52                   	push   edx
c000fee2:	52                   	push   edx
c000fee3:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000fee9:	52                   	push   edx
c000feea:	50                   	push   eax
c000feeb:	e8 e4 87 00 00       	call   c00186d4 <nanoSleep(unsigned long long)>
c000fef0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fef3:	e8 c4 ff ff ff       	call   c000febc <Buzzer::stop()>
c000fef8:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000ff00:	83 c4 18             	add    esp,0x18
c000ff03:	5b                   	pop    ebx
c000ff04:	e9 11 87 00 00       	jmp    c001861a <blockTask(TaskState)>
c000ff09:	90                   	nop

c000ff0a <Buzzer::beep(int, int, bool)>:
c000ff0a:	57                   	push   edi
c000ff0b:	56                   	push   esi
c000ff0c:	53                   	push   ebx
c000ff0d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ff11:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ff15:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ff19:	52                   	push   edx
c000ff1a:	52                   	push   edx
c000ff1b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ff1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff21:	56                   	push   esi
c000ff22:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ff25:	83 c4 10             	add    esp,0x10
c000ff28:	89 f8                	mov    eax,edi
c000ff2a:	84 c0                	test   al,al
c000ff2c:	74 1f                	je     c000ff4d <Buzzer::beep(int, int, bool)+0x43>
c000ff2e:	50                   	push   eax
c000ff2f:	50                   	push   eax
c000ff30:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c000ff36:	99                   	cdq    
c000ff37:	52                   	push   edx
c000ff38:	50                   	push   eax
c000ff39:	e8 96 87 00 00       	call   c00186d4 <nanoSleep(unsigned long long)>
c000ff3e:	83 c4 10             	add    esp,0x10
c000ff41:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000ff45:	5b                   	pop    ebx
c000ff46:	5e                   	pop    esi
c000ff47:	5f                   	pop    edi
c000ff48:	e9 6f ff ff ff       	jmp    c000febc <Buzzer::stop()>
c000ff4d:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c000ff53:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c000ff58:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000ff60:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000ff64:	c7 44 24 14 cf fe 00 c0 	mov    DWORD PTR [esp+0x14],0xc000fecf
c000ff6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ff70:	5b                   	pop    ebx
c000ff71:	5e                   	pop    esi
c000ff72:	5f                   	pop    edi
c000ff73:	e9 3e 83 00 00       	jmp    c00182b6 <Process::createThread(void (*)(void*), void*, int)>

c000ff78 <loadClockSettings()>:
c000ff78:	c7 05 f4 3e 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc0023ef4,0xa
c000ff82:	c6 05 f1 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023ef1,0x0
c000ff89:	c6 05 f0 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023ef0,0x1
c000ff90:	c3                   	ret    
c000ff91:	90                   	nop

c000ff92 <Clock::Clock(char const*)>:
c000ff92:	83 ec 0c             	sub    esp,0xc
c000ff95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff99:	83 ec 08             	sub    esp,0x8
c000ff9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffa0:	50                   	push   eax
c000ffa1:	e8 74 07 00 00       	call   c001071a <Device::Device(char const*)>
c000ffa6:	83 c4 10             	add    esp,0x10
c000ffa9:	ba 0c 12 02 c0       	mov    edx,0xc002120c
c000ffae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffb2:	89 10                	mov    DWORD PTR [eax],edx
c000ffb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffb8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000ffc2:	90                   	nop
c000ffc3:	83 c4 0c             	add    esp,0xc
c000ffc6:	c3                   	ret    
c000ffc7:	90                   	nop

c000ffc8 <Clock::~Clock()>:
c000ffc8:	83 ec 0c             	sub    esp,0xc
c000ffcb:	ba 0c 12 02 c0       	mov    edx,0xc002120c
c000ffd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffd4:	89 10                	mov    DWORD PTR [eax],edx
c000ffd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffda:	83 ec 0c             	sub    esp,0xc
c000ffdd:	50                   	push   eax
c000ffde:	e8 e9 03 00 00       	call   c00103cc <Device::~Device()>
c000ffe3:	83 c4 10             	add    esp,0x10
c000ffe6:	90                   	nop
c000ffe7:	83 c4 0c             	add    esp,0xc
c000ffea:	c3                   	ret    
c000ffeb:	90                   	nop

c000ffec <Clock::~Clock()>:
c000ffec:	83 ec 0c             	sub    esp,0xc
c000ffef:	83 ec 0c             	sub    esp,0xc
c000fff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fff6:	e8 cd ff ff ff       	call   c000ffc8 <Clock::~Clock()>
c000fffb:	83 c4 10             	add    esp,0x10
c000fffe:	83 ec 08             	sub    esp,0x8
c0010001:	68 58 01 00 00       	push   0x158
c0010006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001000a:	e8 30 f0 ff ff       	call   c000f03f <operator delete(void*, unsigned long)>
c001000f:	83 c4 10             	add    esp,0x10
c0010012:	83 c4 0c             	add    esp,0xc
c0010015:	c3                   	ret    

c0010016 <Clock::timeInSecondsLocal()>:
c0010016:	53                   	push   ebx
c0010017:	83 ec 14             	sub    esp,0x14
c001001a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001001e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010020:	50                   	push   eax
c0010021:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0010024:	0f b6 0d f0 3e 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023ef0
c001002b:	03 0d f4 3e 02 c0    	add    ecx,DWORD PTR ds:0xc0023ef4
c0010031:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010037:	89 cb                	mov    ebx,ecx
c0010039:	c1 fb 1f             	sar    ebx,0x1f
c001003c:	01 c8                	add    eax,ecx
c001003e:	11 da                	adc    edx,ebx
c0010040:	83 c4 10             	add    esp,0x10
c0010043:	31 c9                	xor    ecx,ecx
c0010045:	80 3d f1 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ef1,0x0
c001004c:	74 05                	je     c0010053 <Clock::timeInSecondsLocal()+0x3d>
c001004e:	b9 08 07 00 00       	mov    ecx,0x708
c0010053:	31 db                	xor    ebx,ebx
c0010055:	01 c8                	add    eax,ecx
c0010057:	11 da                	adc    edx,ebx
c0010059:	83 c4 08             	add    esp,0x8
c001005c:	5b                   	pop    ebx
c001005d:	c3                   	ret    

c001005e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001005e:	57                   	push   edi
c001005f:	56                   	push   esi
c0010060:	53                   	push   ebx
c0010061:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010065:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010069:	8b 01                	mov    eax,DWORD PTR [ecx]
c001006b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001006f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0010072:	0f b6 05 f0 3e 02 c0 	movzx  eax,BYTE PTR ds:0xc0023ef0
c0010079:	03 05 f4 3e 02 c0    	add    eax,DWORD PTR ds:0xc0023ef4
c001007f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0010085:	99                   	cdq    
c0010086:	29 c6                	sub    esi,eax
c0010088:	19 d7                	sbb    edi,edx
c001008a:	89 f0                	mov    eax,esi
c001008c:	89 fa                	mov    edx,edi
c001008e:	31 f6                	xor    esi,esi
c0010090:	80 3d f1 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ef1,0x0
c0010097:	74 05                	je     c001009e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0010099:	be 08 07 00 00       	mov    esi,0x708
c001009e:	31 ff                	xor    edi,edi
c00100a0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00100a4:	29 f0                	sub    eax,esi
c00100a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00100aa:	19 fa                	sbb    edx,edi
c00100ac:	89 d8                	mov    eax,ebx
c00100ae:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00100b2:	5b                   	pop    ebx
c00100b3:	5e                   	pop    esi
c00100b4:	5f                   	pop    edi
c00100b5:	ff e0                	jmp    eax

c00100b7 <datetimeToSeconds(datetime_t)>:
c00100b7:	55                   	push   ebp
c00100b8:	57                   	push   edi
c00100b9:	56                   	push   esi
c00100ba:	53                   	push   ebx
c00100bb:	83 ec 14             	sub    esp,0x14
c00100be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00100c2:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00100c6:	89 d3                	mov    ebx,edx
c00100c8:	0f b6 c6             	movzx  eax,dh
c00100cb:	c1 eb 10             	shr    ebx,0x10
c00100ce:	48                   	dec    eax
c00100cf:	66 81 eb 6c 07       	sub    bx,0x76c
c00100d4:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00100d8:	0f b6 f5             	movzx  esi,ch
c00100db:	89 cf                	mov    edi,ecx
c00100dd:	6b f6 3c             	imul   esi,esi,0x3c
c00100e0:	c1 ef 10             	shr    edi,0x10
c00100e3:	0f b6 c9             	movzx  ecx,cl
c00100e6:	89 f8                	mov    eax,edi
c00100e8:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00100ee:	0f b6 f8             	movzx  edi,al
c00100f1:	0f b6 d2             	movzx  edx,dl
c00100f4:	01 fe                	add    esi,edi
c00100f6:	01 f1                	add    ecx,esi
c00100f8:	0f b7 f3             	movzx  esi,bx
c00100fb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00100ff:	c1 f9 1f             	sar    ecx,0x1f
c0010102:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0010107:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001010b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0010110:	8b 0c 8d 40 12 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdedc0]
c0010117:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001011b:	76 29                	jbe    c0010146 <datetimeToSeconds(datetime_t)+0x8f>
c001011d:	f6 c3 03             	test   bl,0x3
c0010120:	75 24                	jne    c0010146 <datetimeToSeconds(datetime_t)+0x8f>
c0010122:	31 d2                	xor    edx,edx
c0010124:	bf 64 00 00 00       	mov    edi,0x64
c0010129:	89 d8                	mov    eax,ebx
c001012b:	66 f7 f7             	div    di
c001012e:	66 85 d2             	test   dx,dx
c0010131:	75 12                	jne    c0010145 <datetimeToSeconds(datetime_t)+0x8e>
c0010133:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0010139:	bf 90 01 00 00       	mov    edi,0x190
c001013e:	99                   	cdq    
c001013f:	f7 ff                	idiv   edi
c0010141:	85 d2                	test   edx,edx
c0010143:	75 01                	jne    c0010146 <datetimeToSeconds(datetime_t)+0x8f>
c0010145:	41                   	inc    ecx
c0010146:	66 83 fb 46          	cmp    bx,0x46
c001014a:	76 45                	jbe    c0010191 <datetimeToSeconds(datetime_t)+0xda>
c001014c:	bb 46 00 00 00       	mov    ebx,0x46
c0010151:	bf 64 00 00 00       	mov    edi,0x64
c0010156:	bd 90 01 00 00       	mov    ebp,0x190
c001015b:	b8 6d 01 00 00       	mov    eax,0x16d
c0010160:	f6 c3 03             	test   bl,0x3
c0010163:	75 23                	jne    c0010188 <datetimeToSeconds(datetime_t)+0xd1>
c0010165:	89 d8                	mov    eax,ebx
c0010167:	99                   	cdq    
c0010168:	f7 ff                	idiv   edi
c001016a:	b8 6e 01 00 00       	mov    eax,0x16e
c001016f:	85 d2                	test   edx,edx
c0010171:	75 15                	jne    c0010188 <datetimeToSeconds(datetime_t)+0xd1>
c0010173:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0010179:	99                   	cdq    
c001017a:	f7 fd                	idiv   ebp
c001017c:	83 fa 01             	cmp    edx,0x1
c001017f:	19 c0                	sbb    eax,eax
c0010181:	f7 d0                	not    eax
c0010183:	05 6e 01 00 00       	add    eax,0x16e
c0010188:	01 c1                	add    ecx,eax
c001018a:	43                   	inc    ebx
c001018b:	39 f3                	cmp    ebx,esi
c001018d:	7c cc                	jl     c001015b <datetimeToSeconds(datetime_t)+0xa4>
c001018f:	eb 35                	jmp    c00101c6 <datetimeToSeconds(datetime_t)+0x10f>
c0010191:	74 33                	je     c00101c6 <datetimeToSeconds(datetime_t)+0x10f>
c0010193:	b8 45 00 00 00       	mov    eax,0x45
c0010198:	89 c2                	mov    edx,eax
c001019a:	83 e2 03             	and    edx,0x3
c001019d:	39 f0                	cmp    eax,esi
c001019f:	7e 0f                	jle    c00101b0 <datetimeToSeconds(datetime_t)+0xf9>
c00101a1:	83 fa 01             	cmp    edx,0x1
c00101a4:	19 d2                	sbb    edx,edx
c00101a6:	48                   	dec    eax
c00101a7:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00101ae:	eb e8                	jmp    c0010198 <datetimeToSeconds(datetime_t)+0xe1>
c00101b0:	b8 6d 01 00 00       	mov    eax,0x16d
c00101b5:	85 d2                	test   edx,edx
c00101b7:	75 0b                	jne    c00101c4 <datetimeToSeconds(datetime_t)+0x10d>
c00101b9:	66 83 fb 01          	cmp    bx,0x1
c00101bd:	19 c0                	sbb    eax,eax
c00101bf:	05 6e 01 00 00       	add    eax,0x16e
c00101c4:	29 c1                	sub    ecx,eax
c00101c6:	b8 80 51 01 00       	mov    eax,0x15180
c00101cb:	f7 e9                	imul   ecx
c00101cd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00101d1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00101d5:	83 c4 14             	add    esp,0x14
c00101d8:	5b                   	pop    ebx
c00101d9:	5e                   	pop    esi
c00101da:	5f                   	pop    edi
c00101db:	5d                   	pop    ebp
c00101dc:	c3                   	ret    
c00101dd:	90                   	nop

c00101de <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00101de:	57                   	push   edi
c00101df:	56                   	push   esi
c00101e0:	53                   	push   ebx
c00101e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101e5:	8b 06                	mov    eax,DWORD PTR [esi]
c00101e7:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00101ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101f2:	e8 c0 fe ff ff       	call   c00100b7 <datetimeToSeconds(datetime_t)>
c00101f7:	59                   	pop    ecx
c00101f8:	0f b6 0d f0 3e 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023ef0
c00101ff:	5b                   	pop    ebx
c0010200:	03 0d f4 3e 02 c0    	add    ecx,DWORD PTR ds:0xc0023ef4
c0010206:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001020c:	89 cb                	mov    ebx,ecx
c001020e:	c1 fb 1f             	sar    ebx,0x1f
c0010211:	29 c8                	sub    eax,ecx
c0010213:	19 da                	sbb    edx,ebx
c0010215:	31 c9                	xor    ecx,ecx
c0010217:	80 3d f1 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ef1,0x0
c001021e:	74 05                	je     c0010225 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0010220:	b9 08 07 00 00       	mov    ecx,0x708
c0010225:	31 db                	xor    ebx,ebx
c0010227:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001022b:	29 c8                	sub    eax,ecx
c001022d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010231:	19 da                	sbb    edx,ebx
c0010233:	89 f8                	mov    eax,edi
c0010235:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010239:	5b                   	pop    ebx
c001023a:	5e                   	pop    esi
c001023b:	5f                   	pop    edi
c001023c:	ff e0                	jmp    eax

c001023e <secondsToDatetime(unsigned long long)>:
c001023e:	55                   	push   ebp
c001023f:	57                   	push   edi
c0010240:	56                   	push   esi
c0010241:	53                   	push   ebx
c0010242:	83 ec 1c             	sub    esp,0x1c
c0010245:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010249:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001024d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0010251:	6a 00                	push   0x0
c0010253:	68 80 51 01 00       	push   0x15180
c0010258:	55                   	push   ebp
c0010259:	57                   	push   edi
c001025a:	e8 cd e8 00 00       	call   c001eb2c <__udivdi3>
c001025f:	83 c4 10             	add    esp,0x10
c0010262:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0010268:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001026c:	6a 00                	push   0x0
c001026e:	68 80 51 01 00       	push   0x15180
c0010273:	55                   	push   ebp
c0010274:	57                   	push   edi
c0010275:	bf 10 0e 00 00       	mov    edi,0xe10
c001027a:	e8 ad e9 00 00       	call   c001ec2c <__umoddi3>
c001027f:	83 c4 10             	add    esp,0x10
c0010282:	99                   	cdq    
c0010283:	f7 ff                	idiv   edi
c0010285:	bf 3c 00 00 00       	mov    edi,0x3c
c001028a:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001028d:	89 d0                	mov    eax,edx
c001028f:	99                   	cdq    
c0010290:	f7 ff                	idiv   edi
c0010292:	85 db                	test   ebx,ebx
c0010294:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0010297:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001029a:	79 11                	jns    c00102ad <secondsToDatetime(unsigned long long)+0x6f>
c001029c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00102a0:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00102a6:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00102ab:	eb 07                	jmp    c00102b4 <secondsToDatetime(unsigned long long)+0x76>
c00102ad:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00102b2:	89 d8                	mov    eax,ebx
c00102b4:	bf b4 05 00 00       	mov    edi,0x5b4
c00102b9:	99                   	cdq    
c00102ba:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00102bf:	f7 f9                	idiv   ecx
c00102c1:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00102c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00102ca:	31 d2                	xor    edx,edx
c00102cc:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00102d4:	01 c3                	add    ebx,eax
c00102d6:	89 d8                	mov    eax,ebx
c00102d8:	f7 f1                	div    ecx
c00102da:	31 d2                	xor    edx,edx
c00102dc:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00102df:	89 d8                	mov    eax,ebx
c00102e1:	f7 f7                	div    edi
c00102e3:	31 d2                	xor    edx,edx
c00102e5:	29 c1                	sub    ecx,eax
c00102e7:	89 d8                	mov    eax,ebx
c00102e9:	f7 f5                	div    ebp
c00102eb:	bd 6d 01 00 00       	mov    ebp,0x16d
c00102f0:	29 c1                	sub    ecx,eax
c00102f2:	31 d2                	xor    edx,edx
c00102f4:	89 c8                	mov    eax,ecx
c00102f6:	f7 f5                	div    ebp
c00102f8:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00102fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010301:	31 d2                	xor    edx,edx
c0010303:	89 c8                	mov    eax,ecx
c0010305:	f7 f5                	div    ebp
c0010307:	31 d2                	xor    edx,edx
c0010309:	01 c3                	add    ebx,eax
c001030b:	89 c8                	mov    eax,ecx
c001030d:	f7 f7                	div    edi
c001030f:	bf 99 00 00 00       	mov    edi,0x99
c0010314:	29 c3                	sub    ebx,eax
c0010316:	31 d2                	xor    edx,edx
c0010318:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0010320:	29 c3                	sub    ebx,eax
c0010322:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0010325:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0010328:	bb 05 00 00 00       	mov    ebx,0x5
c001032d:	83 c1 02             	add    ecx,0x2
c0010330:	89 c8                	mov    eax,ecx
c0010332:	f7 f7                	div    edi
c0010334:	31 d2                	xor    edx,edx
c0010336:	89 c7                	mov    edi,eax
c0010338:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001033e:	83 c0 02             	add    eax,0x2
c0010341:	f7 f3                	div    ebx
c0010343:	89 eb                	mov    ebx,ebp
c0010345:	29 c3                	sub    ebx,eax
c0010347:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001034d:	88 1e                	mov    BYTE PTR [esi],bl
c001034f:	19 c0                	sbb    eax,eax
c0010351:	31 d2                	xor    edx,edx
c0010353:	83 e0 0c             	and    eax,0xc
c0010356:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001035a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0010362:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0010366:	83 f9 01             	cmp    ecx,0x1
c0010369:	0f 96 c2             	setbe  dl
c001036c:	41                   	inc    ecx
c001036d:	01 d0                	add    eax,edx
c001036f:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0010372:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0010376:	83 c4 1c             	add    esp,0x1c
c0010379:	89 f0                	mov    eax,esi
c001037b:	5b                   	pop    ebx
c001037c:	5e                   	pop    esi
c001037d:	5f                   	pop    edi
c001037e:	5d                   	pop    ebp
c001037f:	c2 04 00             	ret    0x4

c0010382 <Clock::timeInDatetimeLocal()>:
c0010382:	53                   	push   ebx
c0010383:	83 ec 14             	sub    esp,0x14
c0010386:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001038a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001038e:	e8 83 fc ff ff       	call   c0010016 <Clock::timeInSecondsLocal()>
c0010393:	83 c4 0c             	add    esp,0xc
c0010396:	52                   	push   edx
c0010397:	50                   	push   eax
c0010398:	53                   	push   ebx
c0010399:	e8 a0 fe ff ff       	call   c001023e <secondsToDatetime(unsigned long long)>
c001039e:	89 d8                	mov    eax,ebx
c00103a0:	83 c4 14             	add    esp,0x14
c00103a3:	5b                   	pop    ebx
c00103a4:	c2 04 00             	ret    0x4
c00103a7:	90                   	nop

c00103a8 <Device::hibernate()>:
c00103a8:	c3                   	ret    
c00103a9:	90                   	nop

c00103aa <Device::wake()>:
c00103aa:	c3                   	ret    
c00103ab:	90                   	nop

c00103ac <Device::detect()>:
c00103ac:	c3                   	ret    
c00103ad:	90                   	nop

c00103ae <Device::disableLegacy()>:
c00103ae:	c3                   	ret    
c00103af:	90                   	nop

c00103b0 <Device::powerSaving(PowerSavingLevel)>:
c00103b0:	c3                   	ret    
c00103b1:	90                   	nop

c00103b2 <DriverlessDevice::close(int, int, void*)>:
c00103b2:	31 c0                	xor    eax,eax
c00103b4:	c3                   	ret    
c00103b5:	90                   	nop

c00103b6 <DriverlessDevice::detect()>:
c00103b6:	c3                   	ret    
c00103b7:	90                   	nop

c00103b8 <DriverlessDevice::open(int, int, void*)>:
c00103b8:	83 ec 18             	sub    esp,0x18
c00103bb:	68 70 12 02 c0       	push   0xc0021270
c00103c0:	e8 59 4e 00 00       	call   c001521e <Krnl::panic(char const*)>
c00103c5:	83 c8 ff             	or     eax,0xffffffff
c00103c8:	83 c4 1c             	add    esp,0x1c
c00103cb:	c3                   	ret    

c00103cc <Device::~Device()>:
c00103cc:	ba 98 12 02 c0       	mov    edx,0xc0021298
c00103d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103d5:	89 10                	mov    DWORD PTR [eax],edx
c00103d7:	90                   	nop
c00103d8:	c3                   	ret    
c00103d9:	90                   	nop

c00103da <Device::~Device()>:
c00103da:	83 ec 0c             	sub    esp,0xc
c00103dd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00103e1:	e8 e6 ff ff ff       	call   c00103cc <Device::~Device()>
c00103e6:	83 c4 04             	add    esp,0x4
c00103e9:	83 ec 08             	sub    esp,0x8
c00103ec:	68 58 01 00 00       	push   0x158
c00103f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103f5:	e8 45 ec ff ff       	call   c000f03f <operator delete(void*, unsigned long)>
c00103fa:	83 c4 10             	add    esp,0x10
c00103fd:	83 c4 0c             	add    esp,0xc
c0010400:	c3                   	ret    
c0010401:	90                   	nop

c0010402 <Device::findAndLoadDriver()>:
c0010402:	c3                   	ret    
c0010403:	90                   	nop

c0010404 <Device::preOpenPCI(PCIDeviceInfo)>:
c0010404:	57                   	push   edi
c0010405:	b9 09 00 00 00       	mov    ecx,0x9
c001040a:	56                   	push   esi
c001040b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001040f:	8d 74 24 10          	lea    esi,[esp+0x10]
c0010413:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001041d:	81 c7 18 01 00 00    	add    edi,0x118
c0010423:	fc                   	cld    
c0010424:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010426:	5e                   	pop    esi
c0010427:	5f                   	pop    edi
c0010428:	c3                   	ret    
c0010429:	90                   	nop

c001042a <Device::preOpenACPI(void*, char*, char*)>:
c001042a:	56                   	push   esi
c001042b:	53                   	push   ebx
c001042c:	83 ec 08             	sub    esp,0x8
c001042f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010433:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010437:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0010441:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010445:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001044b:	6a 1e                	push   0x1e
c001044d:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0010453:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010457:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001045d:	50                   	push   eax
c001045e:	e8 6f 01 ff ff       	call   c00005d2 <memcpy>
c0010463:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010467:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001046b:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0010473:	83 c4 14             	add    esp,0x14
c0010476:	5b                   	pop    ebx
c0010477:	5e                   	pop    esi
c0010478:	e9 55 01 ff ff       	jmp    c00005d2 <memcpy>
c001047d:	90                   	nop

c001047e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001047e:	55                   	push   ebp
c001047f:	57                   	push   edi
c0010480:	56                   	push   esi
c0010481:	53                   	push   ebx
c0010482:	83 ec 0c             	sub    esp,0xc
c0010485:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010489:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001048d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010491:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010495:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c001049a:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00104a1:	75 0b                	jne    c00104ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00104a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00104a5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00104a9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00104ac:	eb 24                	jmp    c00104d2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00104ae:	e8 fb 3b 00 00       	call   c00140ae <thisCPU()>
c00104b3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00104b9:	8b 10                	mov    edx,DWORD PTR [eax]
c00104bb:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00104bf:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00104c3:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00104c7:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00104cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00104cf:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00104d2:	83 c4 0c             	add    esp,0xc
c00104d5:	5b                   	pop    ebx
c00104d6:	5e                   	pop    esi
c00104d7:	5f                   	pop    edi
c00104d8:	5d                   	pop    ebp
c00104d9:	ff e0                	jmp    eax
c00104db:	90                   	nop

c00104dc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00104dc:	57                   	push   edi
c00104dd:	56                   	push   esi
c00104de:	53                   	push   ebx
c00104df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00104e7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00104eb:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00104f0:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00104f7:	75 0b                	jne    c0010504 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c00104f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00104fb:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00104ff:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0010502:	eb 20                	jmp    c0010524 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c0010504:	e8 a5 3b 00 00       	call   c00140ae <thisCPU()>
c0010509:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001050f:	8b 10                	mov    edx,DWORD PTR [eax]
c0010511:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010515:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010519:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001051d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010521:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0010524:	5b                   	pop    ebx
c0010525:	5e                   	pop    esi
c0010526:	5f                   	pop    edi
c0010527:	ff e0                	jmp    eax
c0010529:	90                   	nop

c001052a <Device::addChild(Device*)>:
c001052a:	53                   	push   ebx
c001052b:	83 ec 08             	sub    esp,0x8
c001052e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010532:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010536:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001053c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0010542:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010544:	85 d2                	test   edx,edx
c0010546:	74 04                	je     c001054c <Device::addChild(Device*)+0x22>
c0010548:	89 d3                	mov    ebx,edx
c001054a:	eb f6                	jmp    c0010542 <Device::addChild(Device*)+0x18>
c001054c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001054f:	83 ec 0c             	sub    esp,0xc
c0010552:	6a 08                	push   0x8
c0010554:	e8 d7 ea ff ff       	call   c000f030 <operator new(unsigned long)>
c0010559:	89 03                	mov    DWORD PTR [ebx],eax
c001055b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010561:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010568:	83 c4 18             	add    esp,0x18
c001056b:	5b                   	pop    ebx
c001056c:	c3                   	ret    
c001056d:	90                   	nop

c001056e <Device::removeAllChildren()>:
c001056e:	56                   	push   esi
c001056f:	53                   	push   ebx
c0010570:	52                   	push   edx
c0010571:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010575:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001057b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001057e:	74 17                	je     c0010597 <Device::removeAllChildren()+0x29>
c0010580:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0010583:	85 c0                	test   eax,eax
c0010585:	74 0c                	je     c0010593 <Device::removeAllChildren()+0x25>
c0010587:	83 ec 0c             	sub    esp,0xc
c001058a:	8b 10                	mov    edx,DWORD PTR [eax]
c001058c:	50                   	push   eax
c001058d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0010590:	83 c4 10             	add    esp,0x10
c0010593:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010595:	eb e4                	jmp    c001057b <Device::removeAllChildren()+0xd>
c0010597:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001059d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00105a3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00105a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00105b0:	58                   	pop    eax
c00105b1:	5b                   	pop    ebx
c00105b2:	5e                   	pop    esi
c00105b3:	c3                   	ret    

c00105b4 <Device::hibernateAll()>:
c00105b4:	53                   	push   ebx
c00105b5:	83 ec 14             	sub    esp,0x14
c00105b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00105bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00105be:	53                   	push   ebx
c00105bf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00105c2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00105c8:	83 c4 10             	add    esp,0x10
c00105cb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00105ce:	74 0f                	je     c00105df <Device::hibernateAll()+0x2b>
c00105d0:	83 ec 0c             	sub    esp,0xc
c00105d3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00105d6:	e8 d9 ff ff ff       	call   c00105b4 <Device::hibernateAll()>
c00105db:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00105dd:	eb e9                	jmp    c00105c8 <Device::hibernateAll()+0x14>
c00105df:	83 c4 08             	add    esp,0x8
c00105e2:	5b                   	pop    ebx
c00105e3:	c3                   	ret    

c00105e4 <Device::wakeAll()>:
c00105e4:	53                   	push   ebx
c00105e5:	83 ec 14             	sub    esp,0x14
c00105e8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00105ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00105ee:	53                   	push   ebx
c00105ef:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00105f2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00105f8:	83 c4 10             	add    esp,0x10
c00105fb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00105fe:	74 0f                	je     c001060f <Device::wakeAll()+0x2b>
c0010600:	83 ec 0c             	sub    esp,0xc
c0010603:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010606:	e8 d9 ff ff ff       	call   c00105e4 <Device::wakeAll()>
c001060b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001060d:	eb e9                	jmp    c00105f8 <Device::wakeAll()+0x14>
c001060f:	83 c4 08             	add    esp,0x8
c0010612:	5b                   	pop    ebx
c0010613:	c3                   	ret    

c0010614 <Device::detectAll()>:
c0010614:	53                   	push   ebx
c0010615:	83 ec 14             	sub    esp,0x14
c0010618:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001061c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001061e:	53                   	push   ebx
c001061f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0010622:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010628:	83 c4 10             	add    esp,0x10
c001062b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001062e:	74 0f                	je     c001063f <Device::detectAll()+0x2b>
c0010630:	83 ec 0c             	sub    esp,0xc
c0010633:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010636:	e8 d9 ff ff ff       	call   c0010614 <Device::detectAll()>
c001063b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001063d:	eb e9                	jmp    c0010628 <Device::detectAll()+0x14>
c001063f:	83 c4 08             	add    esp,0x8
c0010642:	5b                   	pop    ebx
c0010643:	c3                   	ret    

c0010644 <Device::disableLegacyAll()>:
c0010644:	53                   	push   ebx
c0010645:	83 ec 14             	sub    esp,0x14
c0010648:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001064c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001064e:	53                   	push   ebx
c001064f:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0010652:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010658:	83 c4 10             	add    esp,0x10
c001065b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001065e:	74 0f                	je     c001066f <Device::disableLegacyAll()+0x2b>
c0010660:	83 ec 0c             	sub    esp,0xc
c0010663:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010666:	e8 d9 ff ff ff       	call   c0010644 <Device::disableLegacyAll()>
c001066b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001066d:	eb e9                	jmp    c0010658 <Device::disableLegacyAll()+0x14>
c001066f:	83 c4 08             	add    esp,0x8
c0010672:	5b                   	pop    ebx
c0010673:	c3                   	ret    

c0010674 <Device::loadDriversForAll()>:
c0010674:	53                   	push   ebx
c0010675:	83 ec 08             	sub    esp,0x8
c0010678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001067c:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010682:	8b 18                	mov    ebx,DWORD PTR [eax]
c0010684:	85 db                	test   ebx,ebx
c0010686:	74 12                	je     c001069a <Device::loadDriversForAll()+0x26>
c0010688:	83 ec 0c             	sub    esp,0xc
c001068b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001068e:	e8 e1 ff ff ff       	call   c0010674 <Device::loadDriversForAll()>
c0010693:	83 c4 10             	add    esp,0x10
c0010696:	89 d8                	mov    eax,ebx
c0010698:	eb e8                	jmp    c0010682 <Device::loadDriversForAll()+0xe>
c001069a:	83 c4 08             	add    esp,0x8
c001069d:	5b                   	pop    ebx
c001069e:	c3                   	ret    
c001069f:	90                   	nop

c00106a0 <Device::closeAll()>:
c00106a0:	53                   	push   ebx
c00106a1:	83 ec 08             	sub    esp,0x8
c00106a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106aa:	6a 00                	push   0x0
c00106ac:	6a 00                	push   0x0
c00106ae:	6a 00                	push   0x0
c00106b0:	53                   	push   ebx
c00106b1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00106b4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106ba:	83 c4 10             	add    esp,0x10
c00106bd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106c0:	74 0f                	je     c00106d1 <Device::closeAll()+0x31>
c00106c2:	83 ec 0c             	sub    esp,0xc
c00106c5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00106c8:	e8 d3 ff ff ff       	call   c00106a0 <Device::closeAll()>
c00106cd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00106cf:	eb e9                	jmp    c00106ba <Device::closeAll()+0x1a>
c00106d1:	83 c4 08             	add    esp,0x8
c00106d4:	5b                   	pop    ebx
c00106d5:	c3                   	ret    

c00106d6 <Device::powerSavingAll(PowerSavingLevel)>:
c00106d6:	56                   	push   esi
c00106d7:	53                   	push   ebx
c00106d8:	83 ec 0c             	sub    esp,0xc
c00106db:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00106df:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00106e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106e5:	56                   	push   esi
c00106e6:	53                   	push   ebx
c00106e7:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00106ea:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106f0:	83 c4 10             	add    esp,0x10
c00106f3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106f6:	74 0f                	je     c0010707 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00106f8:	52                   	push   edx
c00106f9:	52                   	push   edx
c00106fa:	56                   	push   esi
c00106fb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00106fe:	e8 d3 ff ff ff       	call   c00106d6 <Device::powerSavingAll(PowerSavingLevel)>
c0010703:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010705:	eb e9                	jmp    c00106f0 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0010707:	58                   	pop    eax
c0010708:	5b                   	pop    ebx
c0010709:	5e                   	pop    esi
c001070a:	c3                   	ret    
c001070b:	90                   	nop

c001070c <Device::setName(char const*)>:
c001070c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0010714:	e9 8e ff fe ff       	jmp    c00006a7 <strcpy>
c0010719:	90                   	nop

c001071a <Device::Device(char const*)>:
c001071a:	83 ec 0c             	sub    esp,0xc
c001071d:	ba 98 12 02 c0       	mov    edx,0xc0021298
c0010722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010726:	89 10                	mov    DWORD PTR [eax],edx
c0010728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001072c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0010736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001073a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010748:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0010752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010756:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0010760:	83 ec 08             	sub    esp,0x8
c0010763:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010767:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001076b:	e8 9c ff ff ff       	call   c001070c <Device::setName(char const*)>
c0010770:	83 c4 10             	add    esp,0x10
c0010773:	83 ec 0c             	sub    esp,0xc
c0010776:	6a 08                	push   0x8
c0010778:	e8 b3 e8 ff ff       	call   c000f030 <operator new(unsigned long)>
c001077d:	83 c4 10             	add    esp,0x10
c0010780:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010786:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001078d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010791:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0010797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001079b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00107a1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00107a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107ab:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00107b1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00107b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107bc:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00107c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107c7:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00107ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107d2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00107dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107e0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00107ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107ee:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00107f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107fc:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0010806:	90                   	nop
c0010807:	83 c4 0c             	add    esp,0xc
c001080a:	c3                   	ret    
c001080b:	90                   	nop

c001080c <Device::getName()>:
c001080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010810:	05 d0 00 00 00       	add    eax,0xd0
c0010815:	c3                   	ret    

c0010816 <DriverlessDevice::DriverlessDevice(char const*)>:
c0010816:	83 ec 0c             	sub    esp,0xc
c0010819:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001081d:	83 ec 08             	sub    esp,0x8
c0010820:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010824:	50                   	push   eax
c0010825:	e8 f0 fe ff ff       	call   c001071a <Device::Device(char const*)>
c001082a:	83 c4 10             	add    esp,0x10
c001082d:	ba c4 12 02 c0       	mov    edx,0xc00212c4
c0010832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010836:	89 10                	mov    DWORD PTR [eax],edx
c0010838:	90                   	nop
c0010839:	83 c4 0c             	add    esp,0xc
c001083c:	c3                   	ret    
c001083d:	90                   	nop

c001083e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001083e:	57                   	push   edi
c001083f:	56                   	push   esi
c0010840:	53                   	push   ebx
c0010841:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010845:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010849:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001084d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0010853:	75 0c                	jne    c0010861 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0010855:	52                   	push   edx
c0010856:	52                   	push   edx
c0010857:	53                   	push   ebx
c0010858:	56                   	push   esi
c0010859:	e8 e6 e7 00 00       	call   c001f044 <LinkedList<Device>::addElement(Device*)>
c001085e:	83 c4 10             	add    esp,0x10
c0010861:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010867:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001086a:	74 12                	je     c001087e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001086c:	50                   	push   eax
c001086d:	57                   	push   edi
c001086e:	56                   	push   esi
c001086f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010872:	e8 c7 ff ff ff       	call   c001083e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0010877:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010879:	83 c4 10             	add    esp,0x10
c001087c:	eb e9                	jmp    c0010867 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001087e:	5b                   	pop    ebx
c001087f:	5e                   	pop    esi
c0010880:	5f                   	pop    edi
c0010881:	c3                   	ret    

c0010882 <getDevicesOfType(DeviceType)>:
c0010882:	53                   	push   ebx
c0010883:	83 ec 14             	sub    esp,0x14
c0010886:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001088a:	53                   	push   ebx
c001088b:	e8 90 e8 00 00       	call   c001f120 <LinkedList<Device>::LinkedList()>
c0010890:	83 c4 0c             	add    esp,0xc
c0010893:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010897:	53                   	push   ebx
c0010898:	ff 35 88 3d 02 c0    	push   DWORD PTR ds:0xc0023d88
c001089e:	e8 9b ff ff ff       	call   c001083e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00108a3:	89 d8                	mov    eax,ebx
c00108a5:	83 c4 18             	add    esp,0x18
c00108a8:	5b                   	pop    ebx
c00108a9:	c2 04 00             	ret    0x4

c00108ac <HardDiskController::HardDiskController(char const*)>:
c00108ac:	83 ec 0c             	sub    esp,0xc
c00108af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b3:	83 ec 08             	sub    esp,0x8
c00108b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108ba:	50                   	push   eax
c00108bb:	e8 5a fe ff ff       	call   c001071a <Device::Device(char const*)>
c00108c0:	83 c4 10             	add    esp,0x10
c00108c3:	ba f0 12 02 c0       	mov    edx,0xc00212f0
c00108c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108cc:	89 10                	mov    DWORD PTR [eax],edx
c00108ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00108dc:	90                   	nop
c00108dd:	83 c4 0c             	add    esp,0xc
c00108e0:	c3                   	ret    
c00108e1:	90                   	nop

c00108e2 <HardDiskController::~HardDiskController()>:
c00108e2:	83 ec 0c             	sub    esp,0xc
c00108e5:	ba f0 12 02 c0       	mov    edx,0xc00212f0
c00108ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ee:	89 10                	mov    DWORD PTR [eax],edx
c00108f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f4:	83 ec 0c             	sub    esp,0xc
c00108f7:	50                   	push   eax
c00108f8:	e8 cf fa ff ff       	call   c00103cc <Device::~Device()>
c00108fd:	83 c4 10             	add    esp,0x10
c0010900:	90                   	nop
c0010901:	83 c4 0c             	add    esp,0xc
c0010904:	c3                   	ret    
c0010905:	90                   	nop

c0010906 <HardDiskController::~HardDiskController()>:
c0010906:	83 ec 0c             	sub    esp,0xc
c0010909:	83 ec 0c             	sub    esp,0xc
c001090c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010910:	e8 cd ff ff ff       	call   c00108e2 <HardDiskController::~HardDiskController()>
c0010915:	83 c4 10             	add    esp,0x10
c0010918:	83 ec 08             	sub    esp,0x8
c001091b:	68 58 01 00 00       	push   0x158
c0010920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010924:	e8 16 e7 ff ff       	call   c000f03f <operator delete(void*, unsigned long)>
c0010929:	83 c4 10             	add    esp,0x10
c001092c:	83 c4 0c             	add    esp,0xc
c001092f:	c3                   	ret    

c0010930 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0010930:	83 ec 0c             	sub    esp,0xc
c0010933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010937:	83 ec 08             	sub    esp,0x8
c001093a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001093e:	50                   	push   eax
c001093f:	e8 d6 fd ff ff       	call   c001071a <Device::Device(char const*)>
c0010944:	83 c4 10             	add    esp,0x10
c0010947:	ba 1c 13 02 c0       	mov    edx,0xc002131c
c001094c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010950:	89 10                	mov    DWORD PTR [eax],edx
c0010952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010956:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001095d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010961:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0010968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001096c:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0010976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001097a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001097e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0010984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010988:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010992:	90                   	nop
c0010993:	83 c4 0c             	add    esp,0xc
c0010996:	c3                   	ret    
c0010997:	90                   	nop

c0010998 <PhysicalDisk::startCache()>:
c0010998:	56                   	push   esi
c0010999:	53                   	push   ebx
c001099a:	83 ec 10             	sub    esp,0x10
c001099d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00109a1:	6a 30                	push   0x30
c00109a3:	e8 88 e6 ff ff       	call   c000f030 <operator new(unsigned long)>
c00109a8:	89 c6                	mov    esi,eax
c00109aa:	58                   	pop    eax
c00109ab:	5a                   	pop    edx
c00109ac:	53                   	push   ebx
c00109ad:	56                   	push   esi
c00109ae:	e8 6d 1e 00 00       	call   c0012820 <VCache::VCache(PhysicalDisk*)>
c00109b3:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00109b9:	83 c4 14             	add    esp,0x14
c00109bc:	5b                   	pop    ebx
c00109bd:	5e                   	pop    esi
c00109be:	c3                   	ret    
c00109bf:	90                   	nop

c00109c0 <PhysicalDisk::~PhysicalDisk()>:
c00109c0:	83 ec 0c             	sub    esp,0xc
c00109c3:	ba 1c 13 02 c0       	mov    edx,0xc002131c
c00109c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109cc:	89 10                	mov    DWORD PTR [eax],edx
c00109ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109d2:	83 ec 0c             	sub    esp,0xc
c00109d5:	50                   	push   eax
c00109d6:	e8 f1 f9 ff ff       	call   c00103cc <Device::~Device()>
c00109db:	83 c4 10             	add    esp,0x10
c00109de:	90                   	nop
c00109df:	83 c4 0c             	add    esp,0xc
c00109e2:	c3                   	ret    
c00109e3:	90                   	nop

c00109e4 <PhysicalDisk::~PhysicalDisk()>:
c00109e4:	83 ec 0c             	sub    esp,0xc
c00109e7:	83 ec 0c             	sub    esp,0xc
c00109ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109ee:	e8 cd ff ff ff       	call   c00109c0 <PhysicalDisk::~PhysicalDisk()>
c00109f3:	83 c4 10             	add    esp,0x10
c00109f6:	83 ec 08             	sub    esp,0x8
c00109f9:	68 6c 01 00 00       	push   0x16c
c00109fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a02:	e8 38 e6 ff ff       	call   c000f03f <operator delete(void*, unsigned long)>
c0010a07:	83 c4 10             	add    esp,0x10
c0010a0a:	83 c4 0c             	add    esp,0xc
c0010a0d:	c3                   	ret    

c0010a0e <FPU::FPU(char const*)>:
c0010a0e:	83 ec 0c             	sub    esp,0xc
c0010a11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a15:	83 ec 08             	sub    esp,0x8
c0010a18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a1c:	50                   	push   eax
c0010a1d:	e8 f8 fc ff ff       	call   c001071a <Device::Device(char const*)>
c0010a22:	83 c4 10             	add    esp,0x10
c0010a25:	ba 5c 13 02 c0       	mov    edx,0xc002135c
c0010a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a2e:	89 10                	mov    DWORD PTR [eax],edx
c0010a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a34:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0010a3e:	90                   	nop
c0010a3f:	83 c4 0c             	add    esp,0xc
c0010a42:	c3                   	ret    
c0010a43:	90                   	nop

c0010a44 <FPU::~FPU()>:
c0010a44:	83 ec 0c             	sub    esp,0xc
c0010a47:	ba 5c 13 02 c0       	mov    edx,0xc002135c
c0010a4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a50:	89 10                	mov    DWORD PTR [eax],edx
c0010a52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a56:	83 ec 0c             	sub    esp,0xc
c0010a59:	50                   	push   eax
c0010a5a:	e8 6d f9 ff ff       	call   c00103cc <Device::~Device()>
c0010a5f:	83 c4 10             	add    esp,0x10
c0010a62:	90                   	nop
c0010a63:	83 c4 0c             	add    esp,0xc
c0010a66:	c3                   	ret    
c0010a67:	90                   	nop

c0010a68 <FPU::~FPU()>:
c0010a68:	83 ec 0c             	sub    esp,0xc
c0010a6b:	83 ec 0c             	sub    esp,0xc
c0010a6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a72:	e8 cd ff ff ff       	call   c0010a44 <FPU::~FPU()>
c0010a77:	83 c4 10             	add    esp,0x10
c0010a7a:	83 ec 08             	sub    esp,0x8
c0010a7d:	68 58 01 00 00       	push   0x158
c0010a82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a86:	e8 b4 e5 ff ff       	call   c000f03f <operator delete(void*, unsigned long)>
c0010a8b:	83 c4 10             	add    esp,0x10
c0010a8e:	83 c4 0c             	add    esp,0xc
c0010a91:	c3                   	ret    

c0010a92 <setupFPU()>:
c0010a92:	53                   	push   ebx
c0010a93:	83 ec 08             	sub    esp,0x8
c0010a96:	a1 88 3d 02 c0       	mov    eax,ds:0xc0023d88
c0010a9b:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0010aa2:	74 19                	je     c0010abd <setupFPU()+0x2b>
c0010aa4:	83 ec 0c             	sub    esp,0xc
c0010aa7:	68 58 01 00 00       	push   0x158
c0010aac:	e8 7f e5 ff ff       	call   c000f030 <operator new(unsigned long)>
c0010ab1:	89 c3                	mov    ebx,eax
c0010ab3:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ab6:	e8 45 cd 00 00       	call   c001d800 <AVX::AVX()>
c0010abb:	eb 5b                	jmp    c0010b18 <setupFPU()+0x86>
c0010abd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010ac3:	84 c0                	test   al,al
c0010ac5:	79 19                	jns    c0010ae0 <setupFPU()+0x4e>
c0010ac7:	83 ec 0c             	sub    esp,0xc
c0010aca:	68 58 01 00 00       	push   0x158
c0010acf:	e8 5c e5 ff ff       	call   c000f030 <operator new(unsigned long)>
c0010ad4:	89 c3                	mov    ebx,eax
c0010ad6:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ad9:	e8 48 ce 00 00       	call   c001d926 <SSE::SSE()>
c0010ade:	eb 38                	jmp    c0010b18 <setupFPU()+0x86>
c0010ae0:	a8 20                	test   al,0x20
c0010ae2:	74 19                	je     c0010afd <setupFPU()+0x6b>
c0010ae4:	83 ec 0c             	sub    esp,0xc
c0010ae7:	68 58 01 00 00       	push   0x158
c0010aec:	e8 3f e5 ff ff       	call   c000f030 <operator new(unsigned long)>
c0010af1:	89 c3                	mov    ebx,eax
c0010af3:	89 04 24             	mov    DWORD PTR [esp],eax
c0010af6:	e8 95 cd 00 00       	call   c001d890 <MMX::MMX()>
c0010afb:	eb 1b                	jmp    c0010b18 <setupFPU()+0x86>
c0010afd:	a8 10                	test   al,0x10
c0010aff:	74 1c                	je     c0010b1d <setupFPU()+0x8b>
c0010b01:	83 ec 0c             	sub    esp,0xc
c0010b04:	68 58 01 00 00       	push   0x158
c0010b09:	e8 22 e5 ff ff       	call   c000f030 <operator new(unsigned long)>
c0010b0e:	89 c3                	mov    ebx,eax
c0010b10:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b13:	e8 9c ce 00 00       	call   c001d9b4 <x87::x87()>
c0010b18:	83 c4 10             	add    esp,0x10
c0010b1b:	eb 2c                	jmp    c0010b49 <setupFPU()+0xb7>
c0010b1d:	83 ec 0c             	sub    esp,0xc
c0010b20:	31 db                	xor    ebx,ebx
c0010b22:	68 48 13 02 c0       	push   0xc0021348
c0010b27:	e8 f3 e5 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0010b2c:	e8 7d 35 00 00       	call   c00140ae <thisCPU()>
c0010b31:	e8 78 35 00 00       	call   c00140ae <thisCPU()>
c0010b36:	e8 3d e6 00 00       	call   c001f178 <CPU::readCR0()>
c0010b3b:	83 c8 04             	or     eax,0x4
c0010b3e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b41:	e8 44 e6 00 00       	call   c001f18a <CPU::writeCR0(unsigned long)>
c0010b46:	83 c4 10             	add    esp,0x10
c0010b49:	89 d8                	mov    eax,ebx
c0010b4b:	83 c4 08             	add    esp,0x8
c0010b4e:	5b                   	pop    ebx
c0010b4f:	c3                   	ret    

c0010b50 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0010b50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b54:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010b58:	c1 e0 04             	shl    eax,0x4
c0010b5b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0010b5f:	8d 50 10             	lea    edx,[eax+0x10]
c0010b62:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0010b68:	74 08                	je     c0010b72 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0010b6a:	83 c0 04             	add    eax,0x4
c0010b6d:	39 d0                	cmp    eax,edx
c0010b6f:	75 f1                	jne    c0010b62 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0010b71:	c3                   	ret    
c0010b72:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010b7c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010b86:	eb e2                	jmp    c0010b6a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0010b88 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0010b88:	57                   	push   edi
c0010b89:	31 c0                	xor    eax,eax
c0010b8b:	56                   	push   esi
c0010b8c:	53                   	push   ebx
c0010b8d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010b91:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010b95:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010b99:	89 da                	mov    edx,ebx
c0010b9b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010b9f:	c1 e2 04             	shl    edx,0x4
c0010ba2:	01 ca                	add    edx,ecx
c0010ba4:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010bac:	74 16                	je     c0010bc4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010bae:	40                   	inc    eax
c0010baf:	83 f8 04             	cmp    eax,0x4
c0010bb2:	75 f0                	jne    c0010ba4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0010bb4:	c7 44 24 10 8c 13 02 c0 	mov    DWORD PTR [esp+0x10],0xc002138c
c0010bbc:	5b                   	pop    ebx
c0010bbd:	5e                   	pop    esi
c0010bbe:	5f                   	pop    edi
c0010bbf:	e9 5a 46 00 00       	jmp    c001521e <Krnl::panic(char const*)>
c0010bc4:	8d 04 98             	lea    eax,[eax+ebx*4]
c0010bc7:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010bca:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010bd0:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010bd6:	5b                   	pop    ebx
c0010bd7:	5e                   	pop    esi
c0010bd8:	5f                   	pop    edi
c0010bd9:	c3                   	ret    

c0010bda <doubleFault(regs*, void*)>:
c0010bda:	c7 44 24 04 bc 14 02 c0 	mov    DWORD PTR [esp+0x4],0xc00214bc
c0010be2:	e9 37 46 00 00       	jmp    c001521e <Krnl::panic(char const*)>
c0010be7:	90                   	nop

c0010be8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010be8:	56                   	push   esi
c0010be9:	53                   	push   ebx
c0010bea:	50                   	push   eax
c0010beb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010bef:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010bf3:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010bf8:	75 35                	jne    c0010c2f <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0010bfa:	8d 43 20             	lea    eax,[ebx+0x20]
c0010bfd:	31 d2                	xor    edx,edx
c0010bff:	89 c1                	mov    ecx,eax
c0010c01:	c1 e1 04             	shl    ecx,0x4
c0010c04:	01 f1                	add    ecx,esi
c0010c06:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0010c0e:	74 3e                	je     c0010c4e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0010c10:	42                   	inc    edx
c0010c11:	83 fa 04             	cmp    edx,0x4
c0010c14:	75 f0                	jne    c0010c06 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0010c16:	83 ec 0c             	sub    esp,0xc
c0010c19:	68 00 14 02 c0       	push   0xc0021400
c0010c1e:	e8 fb 45 00 00       	call   c001521e <Krnl::panic(char const*)>
c0010c23:	83 c4 10             	add    esp,0x10
c0010c26:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c2b:	5a                   	pop    edx
c0010c2c:	5b                   	pop    ebx
c0010c2d:	5e                   	pop    esi
c0010c2e:	c3                   	ret    
c0010c2f:	83 ec 0c             	sub    esp,0xc
c0010c32:	56                   	push   esi
c0010c33:	e8 d4 fb ff ff       	call   c001080c <Device::getName()>
c0010c38:	83 c4 10             	add    esp,0x10
c0010c3b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010c3e:	75 ba                	jne    c0010bfa <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010c40:	83 fb 0f             	cmp    ebx,0xf
c0010c43:	7f 29                	jg     c0010c6e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0010c45:	0f b6 9b e0 34 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdcb20]
c0010c4c:	eb ac                	jmp    c0010bfa <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010c4e:	8d 04 82             	lea    eax,[edx+eax*4]
c0010c51:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c55:	8d 04 86             	lea    eax,[esi+eax*4]
c0010c58:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010c5e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010c62:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0010c68:	89 d8                	mov    eax,ebx
c0010c6a:	5a                   	pop    edx
c0010c6b:	5b                   	pop    ebx
c0010c6c:	5e                   	pop    esi
c0010c6d:	c3                   	ret    
c0010c6e:	83 ec 0c             	sub    esp,0xc
c0010c71:	68 c8 13 02 c0       	push   0xc00213c8
c0010c76:	e8 a3 45 00 00       	call   c001521e <Krnl::panic(char const*)>
c0010c7b:	83 c4 10             	add    esp,0x10
c0010c7e:	e9 77 ff ff ff       	jmp    c0010bfa <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010c83:	90                   	nop

c0010c84 <InterruptController::clearAllHandlers(int, bool)>:
c0010c84:	56                   	push   esi
c0010c85:	53                   	push   ebx
c0010c86:	52                   	push   edx
c0010c87:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c8b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010c8f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0010c94:	75 61                	jne    c0010cf7 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0010c96:	8d 46 20             	lea    eax,[esi+0x20]
c0010c99:	c1 e6 04             	shl    esi,0x4
c0010c9c:	c1 e0 04             	shl    eax,0x4
c0010c9f:	01 de                	add    esi,ebx
c0010ca1:	01 d8                	add    eax,ebx
c0010ca3:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010cad:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0010cb7:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010cc1:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010ccb:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010cd5:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010cdf:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010ce9:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010cf3:	58                   	pop    eax
c0010cf4:	5b                   	pop    ebx
c0010cf5:	5e                   	pop    esi
c0010cf6:	c3                   	ret    
c0010cf7:	83 ec 0c             	sub    esp,0xc
c0010cfa:	53                   	push   ebx
c0010cfb:	e8 0c fb ff ff       	call   c001080c <Device::getName()>
c0010d00:	83 c4 10             	add    esp,0x10
c0010d03:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010d06:	75 8e                	jne    c0010c96 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d08:	83 fe 0f             	cmp    esi,0xf
c0010d0b:	7f 09                	jg     c0010d16 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0010d0d:	0f b6 b6 e0 34 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdcb20]
c0010d14:	eb 80                	jmp    c0010c96 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d16:	83 ec 0c             	sub    esp,0xc
c0010d19:	68 3c 14 02 c0       	push   0xc002143c
c0010d1e:	e8 fb 44 00 00       	call   c001521e <Krnl::panic(char const*)>
c0010d23:	83 c4 10             	add    esp,0x10
c0010d26:	e9 6b ff ff ff       	jmp    c0010c96 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d2b:	90                   	nop

c0010d2c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010d2c:	56                   	push   esi
c0010d2d:	53                   	push   ebx
c0010d2e:	52                   	push   edx
c0010d2f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010d33:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010d37:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010d3c:	75 3a                	jne    c0010d78 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0010d3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010d42:	8d 50 20             	lea    edx,[eax+0x20]
c0010d45:	c1 e2 04             	shl    edx,0x4
c0010d48:	8d 04 16             	lea    eax,[esi+edx*1]
c0010d4b:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0010d4f:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010d55:	74 0b                	je     c0010d62 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010d57:	83 c0 04             	add    eax,0x4
c0010d5a:	39 d0                	cmp    eax,edx
c0010d5c:	75 f1                	jne    c0010d4f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010d5e:	58                   	pop    eax
c0010d5f:	5b                   	pop    ebx
c0010d60:	5e                   	pop    esi
c0010d61:	c3                   	ret    
c0010d62:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010d6c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010d76:	eb df                	jmp    c0010d57 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010d78:	83 ec 0c             	sub    esp,0xc
c0010d7b:	56                   	push   esi
c0010d7c:	e8 8b fa ff ff       	call   c001080c <Device::getName()>
c0010d81:	83 c4 10             	add    esp,0x10
c0010d84:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010d87:	75 b5                	jne    c0010d3e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010d89:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010d8e:	7f 11                	jg     c0010da1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0010d90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010d94:	0f b6 80 e0 34 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdcb20]
c0010d9b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010d9f:	eb 9d                	jmp    c0010d3e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010da1:	83 ec 0c             	sub    esp,0xc
c0010da4:	68 3c 14 02 c0       	push   0xc002143c
c0010da9:	e8 70 44 00 00       	call   c001521e <Krnl::panic(char const*)>
c0010dae:	83 c4 10             	add    esp,0x10
c0010db1:	eb 8b                	jmp    c0010d3e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010db3 <nmiHandler(regs*, void*)>:
c0010db3:	a1 88 3d 02 c0       	mov    eax,ds:0xc0023d88
c0010db8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010dbc:	e9 ed a8 ff ff       	jmp    c000b6ae <Computer::handleNMI()>

c0010dc1 <int_handler>:
c0010dc1:	55                   	push   ebp
c0010dc2:	57                   	push   edi
c0010dc3:	56                   	push   esi
c0010dc4:	53                   	push   ebx
c0010dc5:	83 ec 0c             	sub    esp,0xc
c0010dc8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010dcc:	80 3d d4 47 02 c0 00 	cmp    BYTE PTR ds:0xc00247d4,0x0
c0010dd3:	74 0b                	je     c0010de0 <int_handler+0x1f>
c0010dd5:	fa                   	cli    
c0010dd6:	f4                   	hlt    
c0010dd7:	80 3d d4 47 02 c0 00 	cmp    BYTE PTR ds:0xc00247d4,0x0
c0010dde:	75 f5                	jne    c0010dd5 <int_handler+0x14>
c0010de0:	e8 c9 32 00 00       	call   c00140ae <thisCPU()>
c0010de5:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010de8:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010dee:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010df1:	83 f8 17             	cmp    eax,0x17
c0010df4:	77 13                	ja     c0010e09 <int_handler+0x48>
c0010df6:	83 ec 08             	sub    esp,0x8
c0010df9:	8b 17                	mov    edx,DWORD PTR [edi]
c0010dfb:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010dfe:	0f b6 c0             	movzx  eax,al
c0010e01:	50                   	push   eax
c0010e02:	57                   	push   edi
c0010e03:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010e06:	83 c4 10             	add    esp,0x10
c0010e09:	83 c3 15             	add    ebx,0x15
c0010e0c:	c1 e3 04             	shl    ebx,0x4
c0010e0f:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010e13:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010e1a:	31 db                	xor    ebx,ebx
c0010e1c:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010e20:	85 c0                	test   eax,eax
c0010e22:	74 13                	je     c0010e37 <int_handler+0x76>
c0010e24:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010e27:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010e2b:	74 1c                	je     c0010e49 <int_handler+0x88>
c0010e2d:	83 ec 08             	sub    esp,0x8
c0010e30:	52                   	push   edx
c0010e31:	56                   	push   esi
c0010e32:	ff d0                	call   eax
c0010e34:	83 c4 10             	add    esp,0x10
c0010e37:	43                   	inc    ebx
c0010e38:	83 fb 04             	cmp    ebx,0x4
c0010e3b:	75 df                	jne    c0010e1c <int_handler+0x5b>
c0010e3d:	83 c4 0c             	add    esp,0xc
c0010e40:	31 c0                	xor    eax,eax
c0010e42:	5b                   	pop    ebx
c0010e43:	31 d2                	xor    edx,edx
c0010e45:	5e                   	pop    esi
c0010e46:	5f                   	pop    edi
c0010e47:	5d                   	pop    ebp
c0010e48:	c3                   	ret    
c0010e49:	83 ec 08             	sub    esp,0x8
c0010e4c:	52                   	push   edx
c0010e4d:	56                   	push   esi
c0010e4e:	ff d0                	call   eax
c0010e50:	83 c4 10             	add    esp,0x10
c0010e53:	83 c4 0c             	add    esp,0xc
c0010e56:	5b                   	pop    ebx
c0010e57:	5e                   	pop    esi
c0010e58:	5f                   	pop    edi
c0010e59:	5d                   	pop    ebp
c0010e5a:	c3                   	ret    
c0010e5b:	90                   	nop

c0010e5c <InterruptController::InterruptController(char const*)>:
c0010e5c:	83 ec 1c             	sub    esp,0x1c
c0010e5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e63:	83 ec 08             	sub    esp,0x8
c0010e66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e6a:	50                   	push   eax
c0010e6b:	e8 aa f8 ff ff       	call   c001071a <Device::Device(char const*)>
c0010e70:	83 c4 10             	add    esp,0x10
c0010e73:	ba 58 16 02 c0       	mov    edx,0xc0021658
c0010e78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e7c:	89 10                	mov    DWORD PTR [eax],edx
c0010e7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e82:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010e8c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010e94:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010e9c:	7f 5e                	jg     c0010efc <InterruptController::InterruptController(char const*)+0xa0>
c0010e9e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010ea6:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010eab:	7f 49                	jg     c0010ef6 <InterruptController::InterruptController(char const*)+0x9a>
c0010ead:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eb1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010eb5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010ebc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ec0:	01 ca                	add    edx,ecx
c0010ec2:	83 c2 54             	add    edx,0x54
c0010ec5:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010ecd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ed1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010ed5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010edc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ee0:	01 ca                	add    edx,ecx
c0010ee2:	81 c2 54 04 00 00    	add    edx,0x454
c0010ee8:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010ef0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010ef4:	eb b0                	jmp    c0010ea6 <InterruptController::InterruptController(char const*)+0x4a>
c0010ef6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010efa:	eb 98                	jmp    c0010e94 <InterruptController::InterruptController(char const*)+0x38>
c0010efc:	90                   	nop
c0010efd:	83 c4 1c             	add    esp,0x1c
c0010f00:	c3                   	ret    
c0010f01:	90                   	nop

c0010f02 <InterruptController::~InterruptController()>:
c0010f02:	83 ec 0c             	sub    esp,0xc
c0010f05:	ba 58 16 02 c0       	mov    edx,0xc0021658
c0010f0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f0e:	89 10                	mov    DWORD PTR [eax],edx
c0010f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f14:	83 ec 0c             	sub    esp,0xc
c0010f17:	50                   	push   eax
c0010f18:	e8 af f4 ff ff       	call   c00103cc <Device::~Device()>
c0010f1d:	83 c4 10             	add    esp,0x10
c0010f20:	90                   	nop
c0010f21:	83 c4 0c             	add    esp,0xc
c0010f24:	c3                   	ret    
c0010f25:	90                   	nop

c0010f26 <InterruptController::~InterruptController()>:
c0010f26:	83 ec 0c             	sub    esp,0xc
c0010f29:	83 ec 0c             	sub    esp,0xc
c0010f2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f30:	e8 cd ff ff ff       	call   c0010f02 <InterruptController::~InterruptController()>
c0010f35:	83 c4 10             	add    esp,0x10
c0010f38:	83 ec 08             	sub    esp,0x8
c0010f3b:	68 58 21 00 00       	push   0x2158
c0010f40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f44:	e8 f6 e0 ff ff       	call   c000f03f <operator delete(void*, unsigned long)>
c0010f49:	83 c4 10             	add    esp,0x10
c0010f4c:	83 c4 0c             	add    esp,0xc
c0010f4f:	c3                   	ret    

c0010f50 <displayDebugInfo(regs*)>:
c0010f50:	55                   	push   ebp
c0010f51:	57                   	push   edi
c0010f52:	56                   	push   esi
c0010f53:	53                   	push   ebx
c0010f54:	83 ec 24             	sub    esp,0x24
c0010f57:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010f5b:	0f 20 c2             	mov    edx,cr0
c0010f5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010f62:	0f 20 d7             	mov    edi,cr2
c0010f65:	0f 20 de             	mov    esi,cr3
c0010f68:	0f 20 e5             	mov    ebp,cr4
c0010f6b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0010f6e:	68 c9 14 02 c0       	push   0xc00214c9
c0010f73:	e8 a7 e1 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0010f78:	58                   	pop    eax
c0010f79:	5a                   	pop    edx
c0010f7a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010f7d:	68 d4 14 02 c0       	push   0xc00214d4
c0010f82:	e8 98 e1 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0010f87:	59                   	pop    ecx
c0010f88:	58                   	pop    eax
c0010f89:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010f8c:	68 df 14 02 c0       	push   0xc00214df
c0010f91:	e8 89 e1 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0010f96:	58                   	pop    eax
c0010f97:	5a                   	pop    edx
c0010f98:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010f9b:	68 ea 14 02 c0       	push   0xc00214ea
c0010fa0:	e8 7a e1 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0010fa5:	59                   	pop    ecx
c0010fa6:	58                   	pop    eax
c0010fa7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010faa:	68 f5 14 02 c0       	push   0xc00214f5
c0010faf:	e8 6b e1 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0010fb4:	58                   	pop    eax
c0010fb5:	5a                   	pop    edx
c0010fb6:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0010fb9:	68 00 15 02 c0       	push   0xc0021500
c0010fbe:	e8 5c e1 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0010fc3:	59                   	pop    ecx
c0010fc4:	58                   	pop    eax
c0010fc5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010fc8:	68 1a 15 02 c0       	push   0xc002151a
c0010fcd:	e8 4d e1 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0010fd2:	58                   	pop    eax
c0010fd3:	5a                   	pop    edx
c0010fd4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010fd7:	68 0b 15 02 c0       	push   0xc002150b
c0010fdc:	e8 3e e1 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0010fe1:	59                   	pop    ecx
c0010fe2:	58                   	pop    eax
c0010fe3:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0010fe6:	68 16 15 02 c0       	push   0xc0021516
c0010feb:	e8 2f e1 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0010ff0:	58                   	pop    eax
c0010ff1:	5a                   	pop    edx
c0010ff2:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010ff5:	68 25 15 02 c0       	push   0xc0021525
c0010ffa:	e8 20 e1 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0010fff:	59                   	pop    ecx
c0011000:	58                   	pop    eax
c0011001:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011004:	68 30 15 02 c0       	push   0xc0021530
c0011009:	e8 11 e1 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001100e:	58                   	pop    eax
c001100f:	5a                   	pop    edx
c0011010:	57                   	push   edi
c0011011:	68 3b 15 02 c0       	push   0xc002153b
c0011016:	e8 04 e1 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001101b:	59                   	pop    ecx
c001101c:	58                   	pop    eax
c001101d:	56                   	push   esi
c001101e:	68 46 15 02 c0       	push   0xc0021546
c0011023:	e8 f7 e0 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0011028:	58                   	pop    eax
c0011029:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c001102e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011034:	e8 66 c2 ff ff       	call   c000d29f <setActiveTerminal(VgaText*)>
c0011039:	58                   	pop    eax
c001103a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001103d:	5a                   	pop    edx
c001103e:	c1 e0 05             	shl    eax,0x5
c0011041:	05 40 32 02 c0       	add    eax,0xc0023240
c0011046:	50                   	push   eax
c0011047:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c001104c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011052:	e8 67 c6 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c0011057:	59                   	pop    ecx
c0011058:	58                   	pop    eax
c0011059:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c001105e:	68 51 15 02 c0       	push   0xc0021551
c0011063:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011069:	e8 50 c6 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c001106e:	58                   	pop    eax
c001106f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011074:	5a                   	pop    edx
c0011075:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011078:	83 c0 0c             	add    eax,0xc
c001107b:	50                   	push   eax
c001107c:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c0011081:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011087:	e8 32 c6 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c001108c:	59                   	pop    ecx
c001108d:	58                   	pop    eax
c001108e:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c0011093:	68 5a 15 02 c0       	push   0xc002155a
c0011098:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001109e:	e8 1b c6 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c00110a3:	58                   	pop    eax
c00110a4:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c00110a9:	5a                   	pop    edx
c00110aa:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00110ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110b3:	e8 2c c6 ff ff       	call   c000d6e4 <VgaText::putx(unsigned int)>
c00110b8:	59                   	pop    ecx
c00110b9:	58                   	pop    eax
c00110ba:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c00110bf:	68 62 15 02 c0       	push   0xc0021562
c00110c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110ca:	e8 ef c5 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c00110cf:	58                   	pop    eax
c00110d0:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c00110d5:	5a                   	pop    edx
c00110d6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00110d9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110df:	e8 00 c6 ff ff       	call   c000d6e4 <VgaText::putx(unsigned int)>
c00110e4:	59                   	pop    ecx
c00110e5:	58                   	pop    eax
c00110e6:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c00110eb:	68 6a 15 02 c0       	push   0xc002156a
c00110f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110f6:	e8 c3 c5 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c00110fb:	58                   	pop    eax
c00110fc:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c0011101:	5a                   	pop    edx
c0011102:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0011105:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001110b:	e8 d4 c5 ff ff       	call   c000d6e4 <VgaText::putx(unsigned int)>
c0011110:	59                   	pop    ecx
c0011111:	58                   	pop    eax
c0011112:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c0011117:	68 72 15 02 c0       	push   0xc0021572
c001111c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011122:	e8 97 c5 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c0011127:	58                   	pop    eax
c0011128:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c001112d:	5a                   	pop    edx
c001112e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0011131:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011137:	e8 a8 c5 ff ff       	call   c000d6e4 <VgaText::putx(unsigned int)>
c001113c:	59                   	pop    ecx
c001113d:	58                   	pop    eax
c001113e:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c0011143:	68 7a 15 02 c0       	push   0xc002157a
c0011148:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001114e:	e8 6b c5 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c0011153:	58                   	pop    eax
c0011154:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c0011159:	5a                   	pop    edx
c001115a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001115d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011163:	e8 7c c5 ff ff       	call   c000d6e4 <VgaText::putx(unsigned int)>
c0011168:	59                   	pop    ecx
c0011169:	58                   	pop    eax
c001116a:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c001116f:	68 82 15 02 c0       	push   0xc0021582
c0011174:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001117a:	e8 3f c5 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c001117f:	58                   	pop    eax
c0011180:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c0011185:	5a                   	pop    edx
c0011186:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0011189:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001118f:	e8 50 c5 ff ff       	call   c000d6e4 <VgaText::putx(unsigned int)>
c0011194:	59                   	pop    ecx
c0011195:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c001119a:	5b                   	pop    ebx
c001119b:	68 8a 15 02 c0       	push   0xc002158a
c00111a0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111a6:	e8 13 c5 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c00111ab:	58                   	pop    eax
c00111ac:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c00111b1:	5a                   	pop    edx
c00111b2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00111b6:	52                   	push   edx
c00111b7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111bd:	e8 22 c5 ff ff       	call   c000d6e4 <VgaText::putx(unsigned int)>
c00111c2:	59                   	pop    ecx
c00111c3:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c00111c8:	5b                   	pop    ebx
c00111c9:	68 93 15 02 c0       	push   0xc0021593
c00111ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111d4:	e8 e5 c4 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c00111d9:	58                   	pop    eax
c00111da:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c00111df:	5a                   	pop    edx
c00111e0:	57                   	push   edi
c00111e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111e7:	e8 f8 c4 ff ff       	call   c000d6e4 <VgaText::putx(unsigned int)>
c00111ec:	59                   	pop    ecx
c00111ed:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c00111f2:	5b                   	pop    ebx
c00111f3:	68 9b 15 02 c0       	push   0xc002159b
c00111f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111fe:	e8 bb c4 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c0011203:	5f                   	pop    edi
c0011204:	58                   	pop    eax
c0011205:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c001120a:	56                   	push   esi
c001120b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011211:	e8 ce c4 ff ff       	call   c000d6e4 <VgaText::putx(unsigned int)>
c0011216:	58                   	pop    eax
c0011217:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c001121c:	5a                   	pop    edx
c001121d:	68 a3 15 02 c0       	push   0xc00215a3
c0011222:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011228:	e8 91 c4 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c001122d:	59                   	pop    ecx
c001122e:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c0011233:	5b                   	pop    ebx
c0011234:	55                   	push   ebp
c0011235:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001123b:	e8 a4 c4 ff ff       	call   c000d6e4 <VgaText::putx(unsigned int)>
c0011240:	5e                   	pop    esi
c0011241:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c0011246:	5f                   	pop    edi
c0011247:	68 ab 15 02 c0       	push   0xc00215ab
c001124c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011252:	e8 67 c4 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c0011257:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c001125c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011262:	e8 2c df 00 00       	call   c001f193 <CPU::readDR0()>
c0011267:	5d                   	pop    ebp
c0011268:	5a                   	pop    edx
c0011269:	50                   	push   eax
c001126a:	53                   	push   ebx
c001126b:	e8 74 c4 ff ff       	call   c000d6e4 <VgaText::putx(unsigned int)>
c0011270:	59                   	pop    ecx
c0011271:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c0011276:	5b                   	pop    ebx
c0011277:	68 b4 15 02 c0       	push   0xc00215b4
c001127c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011282:	e8 37 c4 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c0011287:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c001128c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011292:	e8 0e df 00 00       	call   c001f1a5 <CPU::readDR1()>
c0011297:	5e                   	pop    esi
c0011298:	5f                   	pop    edi
c0011299:	50                   	push   eax
c001129a:	53                   	push   ebx
c001129b:	e8 44 c4 ff ff       	call   c000d6e4 <VgaText::putx(unsigned int)>
c00112a0:	5d                   	pop    ebp
c00112a1:	58                   	pop    eax
c00112a2:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c00112a7:	68 bc 15 02 c0       	push   0xc00215bc
c00112ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112b2:	e8 07 c4 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c00112b7:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c00112bc:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00112c2:	e8 f0 de 00 00       	call   c001f1b7 <CPU::readDR2()>
c00112c7:	5a                   	pop    edx
c00112c8:	59                   	pop    ecx
c00112c9:	50                   	push   eax
c00112ca:	53                   	push   ebx
c00112cb:	e8 14 c4 ff ff       	call   c000d6e4 <VgaText::putx(unsigned int)>
c00112d0:	5b                   	pop    ebx
c00112d1:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c00112d6:	5e                   	pop    esi
c00112d7:	68 c4 15 02 c0       	push   0xc00215c4
c00112dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112e2:	e8 d7 c3 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c00112e7:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c00112ec:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00112f2:	e8 d2 de 00 00       	call   c001f1c9 <CPU::readDR3()>
c00112f7:	5f                   	pop    edi
c00112f8:	5d                   	pop    ebp
c00112f9:	50                   	push   eax
c00112fa:	53                   	push   ebx
c00112fb:	e8 e4 c3 ff ff       	call   c000d6e4 <VgaText::putx(unsigned int)>
c0011300:	58                   	pop    eax
c0011301:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c0011306:	5a                   	pop    edx
c0011307:	68 cc 15 02 c0       	push   0xc00215cc
c001130c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011312:	e8 a7 c3 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c0011317:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c001131c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011322:	e8 b4 de 00 00       	call   c001f1db <CPU::readDR6()>
c0011327:	59                   	pop    ecx
c0011328:	5e                   	pop    esi
c0011329:	50                   	push   eax
c001132a:	53                   	push   ebx
c001132b:	e8 b4 c3 ff ff       	call   c000d6e4 <VgaText::putx(unsigned int)>
c0011330:	5f                   	pop    edi
c0011331:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c0011336:	5d                   	pop    ebp
c0011337:	68 d4 15 02 c0       	push   0xc00215d4
c001133c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011342:	e8 77 c3 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c0011347:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c001134c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011352:	e8 96 de 00 00       	call   c001f1ed <CPU::readDR7()>
c0011357:	5a                   	pop    edx
c0011358:	59                   	pop    ecx
c0011359:	50                   	push   eax
c001135a:	53                   	push   ebx
c001135b:	e8 84 c3 ff ff       	call   c000d6e4 <VgaText::putx(unsigned int)>
c0011360:	fa                   	cli    
c0011361:	f4                   	hlt    
c0011362:	83 c4 10             	add    esp,0x10
c0011365:	eb fe                	jmp    c0011365 <displayDebugInfo(regs*)+0x415>

c0011367 <x87EmulHandler(regs*, void*)>:
c0011367:	53                   	push   ebx
c0011368:	83 ec 08             	sub    esp,0x8
c001136b:	a1 14 3f 02 c0       	mov    eax,ds:0xc0023f14
c0011370:	85 c0                	test   eax,eax
c0011372:	74 15                	je     c0011389 <x87EmulHandler(regs*, void*)+0x22>
c0011374:	83 ec 0c             	sub    esp,0xc
c0011377:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001137b:	ff d0                	call   eax
c001137d:	83 c4 10             	add    esp,0x10
c0011380:	84 c0                	test   al,al
c0011382:	74 2f                	je     c00113b3 <x87EmulHandler(regs*, void*)+0x4c>
c0011384:	83 c4 08             	add    esp,0x8
c0011387:	5b                   	pop    ebx
c0011388:	c3                   	ret    
c0011389:	83 ec 08             	sub    esp,0x8
c001138c:	8b 1d 88 3d 02 c0    	mov    ebx,DWORD PTR ds:0xc0023d88
c0011392:	6a 01                	push   0x1
c0011394:	68 dc 15 02 c0       	push   0xc00215dc
c0011399:	e8 1e 68 00 00       	call   c0017bbc <Thr::loadDLL(char const*, bool)>
c001139e:	5a                   	pop    edx
c001139f:	59                   	pop    ecx
c00113a0:	53                   	push   ebx
c00113a1:	50                   	push   eax
c00113a2:	e8 db 69 00 00       	call   c0017d82 <Thr::executeDLL(unsigned long, void*)>
c00113a7:	a1 14 3f 02 c0       	mov    eax,ds:0xc0023f14
c00113ac:	83 c4 10             	add    esp,0x10
c00113af:	85 c0                	test   eax,eax
c00113b1:	75 c1                	jne    c0011374 <x87EmulHandler(regs*, void*)+0xd>
c00113b3:	83 ec 0c             	sub    esp,0xc
c00113b6:	68 f9 15 02 c0       	push   0xc00215f9
c00113bb:	e8 5f dd ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c00113c0:	58                   	pop    eax
c00113c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113c5:	e8 86 fb ff ff       	call   c0010f50 <displayDebugInfo(regs*)>

c00113ca <gpFault(regs*, void*)>:
c00113ca:	53                   	push   ebx
c00113cb:	83 ec 14             	sub    esp,0x14
c00113ce:	c7 05 10 3f 02 c0 ff 8f 01 c0 	mov    DWORD PTR ds:0xc0023f10,0xc0018fff
c00113d8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00113dc:	53                   	push   ebx
c00113dd:	e8 1d 7c 00 00       	call   c0018fff <Vm::faultHandler(regs*)>
c00113e2:	83 c4 10             	add    esp,0x10
c00113e5:	84 c0                	test   al,al
c00113e7:	74 05                	je     c00113ee <gpFault(regs*, void*)+0x24>
c00113e9:	83 c4 08             	add    esp,0x8
c00113ec:	5b                   	pop    ebx
c00113ed:	c3                   	ret    
c00113ee:	83 ec 0c             	sub    esp,0xc
c00113f1:	68 f9 15 02 c0       	push   0xc00215f9
c00113f6:	e8 24 dd ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c00113fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00113fe:	e8 4d fb ff ff       	call   c0010f50 <displayDebugInfo(regs*)>

c0011403 <pgFault(regs*, void*)>:
c0011403:	83 ec 18             	sub    esp,0x18
c0011406:	68 14 16 02 c0       	push   0xc0021614
c001140b:	e8 0f dd ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0011410:	58                   	pop    eax
c0011411:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011415:	e8 36 fb ff ff       	call   c0010f50 <displayDebugInfo(regs*)>

c001141a <otherISRHandler(regs*, void*)>:
c001141a:	53                   	push   ebx
c001141b:	83 ec 0c             	sub    esp,0xc
c001141e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011422:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0011425:	50                   	push   eax
c0011426:	50                   	push   eax
c0011427:	68 21 16 02 c0       	push   0xc0021621
c001142c:	e8 ee dc ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0011431:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011434:	e8 17 fb ff ff       	call   c0010f50 <displayDebugInfo(regs*)>

c0011439 <opcodeFault(regs*, void*)>:
c0011439:	53                   	push   ebx
c001143a:	83 ec 08             	sub    esp,0x8
c001143d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011441:	e8 68 2c 00 00       	call   c00140ae <thisCPU()>
c0011446:	80 b8 94 11 00 00 00 	cmp    BYTE PTR [eax+0x1194],0x0
c001144d:	74 16                	je     c0011465 <opcodeFault(regs*, void*)+0x2c>
c001144f:	83 ec 0c             	sub    esp,0xc
c0011452:	68 78 14 02 c0       	push   0xc0021478
c0011457:	e8 c3 dc ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001145c:	83 43 38 19          	add    DWORD PTR [ebx+0x38],0x19
c0011460:	83 c4 18             	add    esp,0x18
c0011463:	5b                   	pop    ebx
c0011464:	c3                   	ret    
c0011465:	83 ec 0c             	sub    esp,0xc
c0011468:	68 3e 16 02 c0       	push   0xc002163e
c001146d:	e8 ad dc ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0011472:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0011475:	c1 e0 04             	shl    eax,0x4
c0011478:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001147b:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c001147f:	89 14 24             	mov    DWORD PTR [esp],edx
c0011482:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0011486:	52                   	push   edx
c0011487:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c001148b:	52                   	push   edx
c001148c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c001148f:	50                   	push   eax
c0011490:	68 9c 14 02 c0       	push   0xc002149c
c0011495:	e8 85 dc ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001149a:	83 c4 14             	add    esp,0x14
c001149d:	53                   	push   ebx
c001149e:	e8 ad fa ff ff       	call   c0010f50 <displayDebugInfo(regs*)>

c00114a3 <displayProgramFault(char const*)>:
c00114a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114a8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00114ab:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00114b1:	85 c0                	test   eax,eax
c00114b3:	74 15                	je     c00114ca <displayProgramFault(char const*)+0x27>
c00114b5:	83 ec 0c             	sub    esp,0xc
c00114b8:	6a 04                	push   0x4
c00114ba:	6a 0f                	push   0xf
c00114bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00114c0:	50                   	push   eax
c00114c1:	e8 ba be ff ff       	call   c000d380 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00114c6:	83 c4 1c             	add    esp,0x1c
c00114c9:	c3                   	ret    
c00114ca:	c3                   	ret    
c00114cb:	90                   	nop

c00114cc <InterruptController::convertLegacyIRQNumber(int)>:
c00114cc:	53                   	push   ebx
c00114cd:	83 ec 14             	sub    esp,0x14
c00114d0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00114d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114d8:	e8 2f f3 ff ff       	call   c001080c <Device::getName()>
c00114dd:	83 c4 10             	add    esp,0x10
c00114e0:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00114e3:	74 07                	je     c00114ec <InterruptController::convertLegacyIRQNumber(int)+0x20>
c00114e5:	89 d8                	mov    eax,ebx
c00114e7:	83 c4 08             	add    esp,0x8
c00114ea:	5b                   	pop    ebx
c00114eb:	c3                   	ret    
c00114ec:	83 fb 0f             	cmp    ebx,0xf
c00114ef:	7f 0e                	jg     c00114ff <InterruptController::convertLegacyIRQNumber(int)+0x33>
c00114f1:	0f b6 9b e0 34 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdcb20]
c00114f8:	83 c4 08             	add    esp,0x8
c00114fb:	89 d8                	mov    eax,ebx
c00114fd:	5b                   	pop    ebx
c00114fe:	c3                   	ret    
c00114ff:	83 ec 0c             	sub    esp,0xc
c0011502:	68 c8 13 02 c0       	push   0xc00213c8
c0011507:	e8 12 3d 00 00       	call   c001521e <Krnl::panic(char const*)>
c001150c:	89 d8                	mov    eax,ebx
c001150e:	83 c4 10             	add    esp,0x10
c0011511:	83 c4 08             	add    esp,0x8
c0011514:	5b                   	pop    ebx
c0011515:	c3                   	ret    

c0011516 <setupInterruptController()>:
c0011516:	56                   	push   esi
c0011517:	53                   	push   ebx
c0011518:	51                   	push   ecx
c0011519:	e8 8d 2b 00 00       	call   c00140ab <getCPUNumber()>
c001151e:	85 c0                	test   eax,eax
c0011520:	0f 85 10 02 00 00    	jne    c0011736 <setupInterruptController()+0x220>
c0011526:	83 ec 0c             	sub    esp,0xc
c0011529:	a1 88 3d 02 c0       	mov    eax,ds:0xc0023d88
c001152e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011534:	68 58 21 00 00       	push   0x2158
c0011539:	83 e0 01             	and    eax,0x1
c001153c:	89 c6                	mov    esi,eax
c001153e:	e8 ed da ff ff       	call   c000f030 <operator new(unsigned long)>
c0011543:	89 04 24             	mov    DWORD PTR [esp],eax
c0011546:	89 c3                	mov    ebx,eax
c0011548:	e8 d3 ca 00 00       	call   c001e020 <PIC::PIC()>
c001154d:	6a 00                	push   0x0
c001154f:	6a 00                	push   0x0
c0011551:	6a 00                	push   0x0
c0011553:	53                   	push   ebx
c0011554:	e8 0b ce 00 00       	call   c001e364 <PIC::open(int, int, void*)>
c0011559:	83 c4 20             	add    esp,0x20
c001155c:	89 f0                	mov    eax,esi
c001155e:	84 c0                	test   al,al
c0011560:	0f 85 92 01 00 00    	jne    c00116f8 <setupInterruptController()+0x1e2>
c0011566:	83 ec 08             	sub    esp,0x8
c0011569:	53                   	push   ebx
c001156a:	ff 35 88 3d 02 c0    	push   DWORD PTR ds:0xc0023d88
c0011570:	e8 b5 ef ff ff       	call   c001052a <Device::addChild(Device*)>
c0011575:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011577:	6a 00                	push   0x0
c0011579:	68 1a 14 01 c0       	push   0xc001141a
c001157e:	6a 00                	push   0x0
c0011580:	53                   	push   ebx
c0011581:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011584:	83 c4 20             	add    esp,0x20
c0011587:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011589:	6a 00                	push   0x0
c001158b:	68 1a 14 01 c0       	push   0xc001141a
c0011590:	6a 01                	push   0x1
c0011592:	53                   	push   ebx
c0011593:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011596:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011598:	6a 00                	push   0x0
c001159a:	68 b3 0d 01 c0       	push   0xc0010db3
c001159f:	6a 02                	push   0x2
c00115a1:	53                   	push   ebx
c00115a2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115a5:	83 c4 20             	add    esp,0x20
c00115a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115aa:	6a 00                	push   0x0
c00115ac:	68 1a 14 01 c0       	push   0xc001141a
c00115b1:	6a 03                	push   0x3
c00115b3:	53                   	push   ebx
c00115b4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115b9:	6a 00                	push   0x0
c00115bb:	68 1a 14 01 c0       	push   0xc001141a
c00115c0:	6a 04                	push   0x4
c00115c2:	53                   	push   ebx
c00115c3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115c6:	83 c4 20             	add    esp,0x20
c00115c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115cb:	6a 00                	push   0x0
c00115cd:	68 1a 14 01 c0       	push   0xc001141a
c00115d2:	6a 05                	push   0x5
c00115d4:	53                   	push   ebx
c00115d5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115da:	6a 00                	push   0x0
c00115dc:	68 39 14 01 c0       	push   0xc0011439
c00115e1:	6a 06                	push   0x6
c00115e3:	53                   	push   ebx
c00115e4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115e7:	83 c4 20             	add    esp,0x20
c00115ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115ec:	6a 00                	push   0x0
c00115ee:	68 67 13 01 c0       	push   0xc0011367
c00115f3:	6a 07                	push   0x7
c00115f5:	53                   	push   ebx
c00115f6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115fb:	6a 00                	push   0x0
c00115fd:	68 da 0b 01 c0       	push   0xc0010bda
c0011602:	6a 08                	push   0x8
c0011604:	53                   	push   ebx
c0011605:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011608:	83 c4 20             	add    esp,0x20
c001160b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001160d:	6a 00                	push   0x0
c001160f:	68 1a 14 01 c0       	push   0xc001141a
c0011614:	6a 09                	push   0x9
c0011616:	53                   	push   ebx
c0011617:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001161a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001161c:	6a 00                	push   0x0
c001161e:	68 1a 14 01 c0       	push   0xc001141a
c0011623:	6a 0a                	push   0xa
c0011625:	53                   	push   ebx
c0011626:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011629:	83 c4 20             	add    esp,0x20
c001162c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001162e:	6a 00                	push   0x0
c0011630:	68 1a 14 01 c0       	push   0xc001141a
c0011635:	6a 0b                	push   0xb
c0011637:	53                   	push   ebx
c0011638:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001163b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001163d:	6a 00                	push   0x0
c001163f:	68 1a 14 01 c0       	push   0xc001141a
c0011644:	6a 0c                	push   0xc
c0011646:	53                   	push   ebx
c0011647:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001164a:	83 c4 20             	add    esp,0x20
c001164d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001164f:	6a 00                	push   0x0
c0011651:	68 ca 13 01 c0       	push   0xc00113ca
c0011656:	6a 0d                	push   0xd
c0011658:	53                   	push   ebx
c0011659:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001165c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001165e:	6a 00                	push   0x0
c0011660:	68 03 14 01 c0       	push   0xc0011403
c0011665:	6a 0e                	push   0xe
c0011667:	53                   	push   ebx
c0011668:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001166b:	83 c4 20             	add    esp,0x20
c001166e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011670:	6a 00                	push   0x0
c0011672:	68 1a 14 01 c0       	push   0xc001141a
c0011677:	6a 0f                	push   0xf
c0011679:	53                   	push   ebx
c001167a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001167d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001167f:	6a 00                	push   0x0
c0011681:	68 1a 14 01 c0       	push   0xc001141a
c0011686:	6a 10                	push   0x10
c0011688:	53                   	push   ebx
c0011689:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001168c:	83 c4 20             	add    esp,0x20
c001168f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011691:	6a 00                	push   0x0
c0011693:	68 1a 14 01 c0       	push   0xc001141a
c0011698:	6a 11                	push   0x11
c001169a:	53                   	push   ebx
c001169b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001169e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116a0:	6a 00                	push   0x0
c00116a2:	68 1a 14 01 c0       	push   0xc001141a
c00116a7:	6a 12                	push   0x12
c00116a9:	53                   	push   ebx
c00116aa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00116ad:	83 c4 20             	add    esp,0x20
c00116b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116b2:	6a 00                	push   0x0
c00116b4:	68 1a 14 01 c0       	push   0xc001141a
c00116b9:	6a 13                	push   0x13
c00116bb:	53                   	push   ebx
c00116bc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00116bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116c1:	6a 00                	push   0x0
c00116c3:	68 1a 14 01 c0       	push   0xc001141a
c00116c8:	6a 14                	push   0x14
c00116ca:	53                   	push   ebx
c00116cb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00116ce:	83 c4 20             	add    esp,0x20
c00116d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116d3:	6a 00                	push   0x0
c00116d5:	68 1a 14 01 c0       	push   0xc001141a
c00116da:	6a 1e                	push   0x1e
c00116dc:	53                   	push   ebx
c00116dd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00116e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116e2:	6a 00                	push   0x0
c00116e4:	68 a3 6b 01 c0       	push   0xc0016ba3
c00116e9:	6a 60                	push   0x60
c00116eb:	53                   	push   ebx
c00116ec:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00116ef:	83 c4 20             	add    esp,0x20
c00116f2:	89 d8                	mov    eax,ebx
c00116f4:	5a                   	pop    edx
c00116f5:	5b                   	pop    ebx
c00116f6:	5e                   	pop    esi
c00116f7:	c3                   	ret    
c00116f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116fa:	6a 00                	push   0x0
c00116fc:	6a 00                	push   0x0
c00116fe:	6a 00                	push   0x0
c0011700:	53                   	push   ebx
c0011701:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011704:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011706:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011709:	ff 50 04             	call   DWORD PTR [eax+0x4]
c001170c:	c7 04 24 58 21 00 00 	mov    DWORD PTR [esp],0x2158
c0011713:	e8 18 d9 ff ff       	call   c000f030 <operator new(unsigned long)>
c0011718:	89 04 24             	mov    DWORD PTR [esp],eax
c001171b:	89 c3                	mov    ebx,eax
c001171d:	e8 3c c4 00 00       	call   c001db5e <APIC::APIC()>
c0011722:	6a 00                	push   0x0
c0011724:	6a 00                	push   0x0
c0011726:	6a 00                	push   0x0
c0011728:	53                   	push   ebx
c0011729:	e8 4e c3 00 00       	call   c001da7c <APIC::open(int, int, void*)>
c001172e:	83 c4 20             	add    esp,0x20
c0011731:	e9 30 fe ff ff       	jmp    c0011566 <setupInterruptController()+0x50>
c0011736:	83 ec 0c             	sub    esp,0xc
c0011739:	68 58 21 00 00       	push   0x2158
c001173e:	e8 ed d8 ff ff       	call   c000f030 <operator new(unsigned long)>
c0011743:	89 04 24             	mov    DWORD PTR [esp],eax
c0011746:	89 c3                	mov    ebx,eax
c0011748:	e8 11 c4 00 00       	call   c001db5e <APIC::APIC()>
c001174d:	6a 00                	push   0x0
c001174f:	6a 00                	push   0x0
c0011751:	6a 00                	push   0x0
c0011753:	53                   	push   ebx
c0011754:	e8 23 c3 00 00       	call   c001da7c <APIC::open(int, int, void*)>
c0011759:	83 c4 18             	add    esp,0x18
c001175c:	53                   	push   ebx
c001175d:	ff 35 88 3d 02 c0    	push   DWORD PTR ds:0xc0023d88
c0011763:	e8 c2 ed ff ff       	call   c001052a <Device::addChild(Device*)>
c0011768:	83 c4 10             	add    esp,0x10
c001176b:	89 d8                	mov    eax,ebx
c001176d:	5a                   	pop    edx
c001176e:	5b                   	pop    ebx
c001176f:	5e                   	pop    esi
c0011770:	c3                   	ret    
c0011771:	90                   	nop

c0011772 <startGUI(void*)>:
c0011772:	55                   	push   ebp
c0011773:	89 e5                	mov    ebp,esp
c0011775:	53                   	push   ebx
c0011776:	83 ec 04             	sub    esp,0x4
c0011779:	e8 10 6a 00 00       	call   c001818e <unlockScheduler()>
c001177e:	e8 f4 69 00 00       	call   c0018177 <getIRQNestingLevel()>
c0011783:	83 ec 08             	sub    esp,0x8
c0011786:	50                   	push   eax
c0011787:	68 98 16 02 c0       	push   0xc0021698
c001178c:	e8 8e d9 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0011791:	83 c4 10             	add    esp,0x10
c0011794:	8b 1d 88 3d 02 c0    	mov    ebx,DWORD PTR ds:0xc0023d88
c001179a:	83 ec 08             	sub    esp,0x8
c001179d:	6a 01                	push   0x1
c001179f:	68 b2 16 02 c0       	push   0xc00216b2
c00117a4:	e8 13 64 00 00       	call   c0017bbc <Thr::loadDLL(char const*, bool)>
c00117a9:	83 c4 10             	add    esp,0x10
c00117ac:	83 ec 08             	sub    esp,0x8
c00117af:	53                   	push   ebx
c00117b0:	50                   	push   eax
c00117b1:	e8 cc 65 00 00       	call   c0017d82 <Thr::executeDLL(unsigned long, void*)>
c00117b6:	83 c4 10             	add    esp,0x10
c00117b9:	8b 1d 88 3d 02 c0    	mov    ebx,DWORD PTR ds:0xc0023d88
c00117bf:	83 ec 08             	sub    esp,0x8
c00117c2:	6a 01                	push   0x1
c00117c4:	68 cc 16 02 c0       	push   0xc00216cc
c00117c9:	e8 ee 63 00 00       	call   c0017bbc <Thr::loadDLL(char const*, bool)>
c00117ce:	83 c4 10             	add    esp,0x10
c00117d1:	83 ec 08             	sub    esp,0x8
c00117d4:	53                   	push   ebx
c00117d5:	50                   	push   eax
c00117d6:	e8 a7 65 00 00       	call   c0017d82 <Thr::executeDLL(unsigned long, void*)>
c00117db:	83 c4 10             	add    esp,0x10
c00117de:	90                   	nop
c00117df:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00117e2:	c9                   	leave  
c00117e3:	c3                   	ret    

c00117e4 <sendKeyToTerminal(unsigned char)>:
c00117e4:	55                   	push   ebp
c00117e5:	89 e5                	mov    ebp,esp
c00117e7:	83 ec 28             	sub    esp,0x28
c00117ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117ed:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00117f0:	a1 44 3e 02 c0       	mov    eax,ds:0xc0023e44
c00117f5:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00117f9:	83 ec 08             	sub    esp,0x8
c00117fc:	52                   	push   edx
c00117fd:	50                   	push   eax
c00117fe:	e8 b9 c0 ff ff       	call   c000d8bc <VgaText::receiveKey(unsigned char)>
c0011803:	83 c4 10             	add    esp,0x10
c0011806:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c001180a:	75 41                	jne    c001184d <sendKeyToTerminal(unsigned char)+0x69>
c001180c:	e8 a2 69 00 00       	call   c00181b3 <lockStuff()>
c0011811:	a1 20 3f 02 c0       	mov    eax,ds:0xc0023f20
c0011816:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011819:	c7 05 20 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023f20,0x0
c0011823:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011827:	74 1f                	je     c0011848 <sendKeyToTerminal(unsigned char)+0x64>
c0011829:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001182c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001182f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011832:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011835:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011838:	83 ec 0c             	sub    esp,0xc
c001183b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001183e:	e8 59 6f 00 00       	call   c001879c <unblockTask(ThreadControlBlock*)>
c0011843:	83 c4 10             	add    esp,0x10
c0011846:	eb db                	jmp    c0011823 <sendKeyToTerminal(unsigned char)+0x3f>
c0011848:	e8 f8 6c 00 00       	call   c0018545 <unlockStuff()>
c001184d:	90                   	nop
c001184e:	c9                   	leave  
c001184f:	c3                   	ret    

c0011850 <sendKeyboardToken(KeyboardToken)>:
c0011850:	55                   	push   ebp
c0011851:	89 e5                	mov    ebp,esp
c0011853:	83 ec 18             	sub    esp,0x18
c0011856:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0011859:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001185c:	0f b7 c0             	movzx  eax,ax
c001185f:	83 f2 01             	xor    edx,0x1
c0011862:	88 90 40 3f 02 c0    	mov    BYTE PTR [eax-0x3ffdc0c0],dl
c0011868:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001186b:	66 3d 03 02          	cmp    ax,0x203
c001186f:	75 07                	jne    c0011878 <sendKeyboardToken(KeyboardToken)+0x28>
c0011871:	a0 40 40 02 c0       	mov    al,ds:0xc0024040
c0011876:	84 c0                	test   al,al
c0011878:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001187c:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001187f:	a0 48 43 02 c0       	mov    al,ds:0xc0024348
c0011884:	38 c2                	cmp    dl,al
c0011886:	74 1c                	je     c00118a4 <sendKeyboardToken(KeyboardToken)+0x54>
c0011888:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001188b:	a2 48 43 02 c0       	mov    ds:0xc0024348,al
c0011890:	a0 48 43 02 c0       	mov    al,ds:0xc0024348
c0011895:	0f b6 c0             	movzx  eax,al
c0011898:	83 ec 0c             	sub    esp,0xc
c001189b:	50                   	push   eax
c001189c:	e8 89 b2 ff ff       	call   c000cb2a <setTerminalScrollLock(bool)>
c00118a1:	83 c4 10             	add    esp,0x10
c00118a4:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00118a7:	84 c0                	test   al,al
c00118a9:	0f 84 ae 00 00 00    	je     c001195d <sendKeyboardToken(KeyboardToken)+0x10d>
c00118af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118b2:	66 3d 10 03          	cmp    ax,0x310
c00118b6:	75 06                	jne    c00118be <sendKeyboardToken(KeyboardToken)+0x6e>
c00118b8:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00118be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118c1:	66 3d 11 03          	cmp    ax,0x311
c00118c5:	75 06                	jne    c00118cd <sendKeyboardToken(KeyboardToken)+0x7d>
c00118c7:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00118cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118d0:	66 3d 12 03          	cmp    ax,0x312
c00118d4:	75 06                	jne    c00118dc <sendKeyboardToken(KeyboardToken)+0x8c>
c00118d6:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00118dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118df:	66 3d 13 03          	cmp    ax,0x313
c00118e3:	75 06                	jne    c00118eb <sendKeyboardToken(KeyboardToken)+0x9b>
c00118e5:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00118eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118ee:	66 3d 14 03          	cmp    ax,0x314
c00118f2:	75 06                	jne    c00118fa <sendKeyboardToken(KeyboardToken)+0xaa>
c00118f4:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00118fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118fd:	66 3d 15 03          	cmp    ax,0x315
c0011901:	75 06                	jne    c0011909 <sendKeyboardToken(KeyboardToken)+0xb9>
c0011903:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0011909:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001190c:	66 3d 16 03          	cmp    ax,0x316
c0011910:	75 06                	jne    c0011918 <sendKeyboardToken(KeyboardToken)+0xc8>
c0011912:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0011918:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001191b:	66 3d 17 03          	cmp    ax,0x317
c001191f:	75 06                	jne    c0011927 <sendKeyboardToken(KeyboardToken)+0xd7>
c0011921:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0011927:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001192a:	66 3d 18 03          	cmp    ax,0x318
c001192e:	75 06                	jne    c0011936 <sendKeyboardToken(KeyboardToken)+0xe6>
c0011930:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0011936:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011939:	66 3d 19 03          	cmp    ax,0x319
c001193d:	75 06                	jne    c0011945 <sendKeyboardToken(KeyboardToken)+0xf5>
c001193f:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0011945:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011948:	66 3d 1a 03          	cmp    ax,0x31a
c001194c:	0f 85 c9 00 00 00    	jne    c0011a1b <sendKeyboardToken(KeyboardToken)+0x1cb>
c0011952:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0011958:	e9 be 00 00 00       	jmp    c0011a1b <sendKeyboardToken(KeyboardToken)+0x1cb>
c001195d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011960:	66 3d 10 03          	cmp    ax,0x310
c0011964:	75 0a                	jne    c0011970 <sendKeyboardToken(KeyboardToken)+0x120>
c0011966:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001196c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011970:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011973:	66 3d 11 03          	cmp    ax,0x311
c0011977:	75 0a                	jne    c0011983 <sendKeyboardToken(KeyboardToken)+0x133>
c0011979:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001197f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011983:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011986:	66 3d 12 03          	cmp    ax,0x312
c001198a:	75 0a                	jne    c0011996 <sendKeyboardToken(KeyboardToken)+0x146>
c001198c:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0011992:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011996:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011999:	66 3d 13 03          	cmp    ax,0x313
c001199d:	75 0a                	jne    c00119a9 <sendKeyboardToken(KeyboardToken)+0x159>
c001199f:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00119a5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00119a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119ac:	66 3d 14 03          	cmp    ax,0x314
c00119b0:	75 0a                	jne    c00119bc <sendKeyboardToken(KeyboardToken)+0x16c>
c00119b2:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00119b8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00119bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119bf:	66 3d 15 03          	cmp    ax,0x315
c00119c3:	75 0a                	jne    c00119cf <sendKeyboardToken(KeyboardToken)+0x17f>
c00119c5:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00119cb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00119cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119d2:	66 3d 16 03          	cmp    ax,0x316
c00119d6:	75 0a                	jne    c00119e2 <sendKeyboardToken(KeyboardToken)+0x192>
c00119d8:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00119de:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00119e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119e5:	66 3d 17 03          	cmp    ax,0x317
c00119e9:	75 0a                	jne    c00119f5 <sendKeyboardToken(KeyboardToken)+0x1a5>
c00119eb:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00119f1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00119f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119f8:	66 3d 18 03          	cmp    ax,0x318
c00119fc:	75 0a                	jne    c0011a08 <sendKeyboardToken(KeyboardToken)+0x1b8>
c00119fe:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0011a04:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011a08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a0b:	66 3d 19 03          	cmp    ax,0x319
c0011a0f:	75 0a                	jne    c0011a1b <sendKeyboardToken(KeyboardToken)+0x1cb>
c0011a11:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0011a17:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011a1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a1e:	66 3d 00 02          	cmp    ax,0x200
c0011a22:	75 2a                	jne    c0011a4e <sendKeyboardToken(KeyboardToken)+0x1fe>
c0011a24:	a0 40 43 02 c0       	mov    al,ds:0xc0024340
c0011a29:	83 f0 01             	xor    eax,0x1
c0011a2c:	84 c0                	test   al,al
c0011a2e:	74 1e                	je     c0011a4e <sendKeyboardToken(KeyboardToken)+0x1fe>
c0011a30:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c0011a35:	6a 01                	push   0x1
c0011a37:	6a 00                	push   0x0
c0011a39:	68 72 17 01 c0       	push   0xc0011772
c0011a3e:	50                   	push   eax
c0011a3f:	e8 72 68 00 00       	call   c00182b6 <Process::createThread(void (*)(void*), void*, int)>
c0011a44:	83 c4 10             	add    esp,0x10
c0011a47:	c6 05 40 43 02 c0 01 	mov    BYTE PTR ds:0xc0024340,0x1
c0011a4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a51:	66 3d 1d 03          	cmp    ax,0x31d
c0011a55:	75 06                	jne    c0011a5d <sendKeyboardToken(KeyboardToken)+0x20d>
c0011a57:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0011a5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a60:	66 3d 1c 03          	cmp    ax,0x31c
c0011a64:	75 06                	jne    c0011a6c <sendKeyboardToken(KeyboardToken)+0x21c>
c0011a66:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0011a6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a6f:	66 3d 1b 03          	cmp    ax,0x31b
c0011a73:	75 06                	jne    c0011a7b <sendKeyboardToken(KeyboardToken)+0x22b>
c0011a75:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0011a7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a7e:	66 3d 1e 03          	cmp    ax,0x31e
c0011a82:	75 06                	jne    c0011a8a <sendKeyboardToken(KeyboardToken)+0x23a>
c0011a84:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0011a8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a8d:	66 3d 1f 03          	cmp    ax,0x31f
c0011a91:	75 06                	jne    c0011a99 <sendKeyboardToken(KeyboardToken)+0x249>
c0011a93:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0011a99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a9c:	66 3d 1a 03          	cmp    ax,0x31a
c0011aa0:	75 06                	jne    c0011aa8 <sendKeyboardToken(KeyboardToken)+0x258>
c0011aa2:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0011aa8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0011aac:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011aaf:	83 f0 01             	xor    eax,0x1
c0011ab2:	84 c0                	test   al,al
c0011ab4:	74 77                	je     c0011b2d <sendKeyboardToken(KeyboardToken)+0x2dd>
c0011ab6:	a0 41 40 02 c0       	mov    al,ds:0xc0024041
c0011abb:	84 c0                	test   al,al
c0011abd:	74 41                	je     c0011b00 <sendKeyboardToken(KeyboardToken)+0x2b0>
c0011abf:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0011ac3:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0011ac7:	74 2b                	je     c0011af4 <sendKeyboardToken(KeyboardToken)+0x2a4>
c0011ac9:	8b 15 44 43 02 c0    	mov    edx,DWORD PTR ds:0xc0024344
c0011acf:	89 d0                	mov    eax,edx
c0011ad1:	c1 e0 02             	shl    eax,0x2
c0011ad4:	01 d0                	add    eax,edx
c0011ad6:	01 c0                	add    eax,eax
c0011ad8:	a3 44 43 02 c0       	mov    ds:0xc0024344,eax
c0011add:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ae0:	0f b7 c0             	movzx  eax,ax
c0011ae3:	8d 50 d0             	lea    edx,[eax-0x30]
c0011ae6:	a1 44 43 02 c0       	mov    eax,ds:0xc0024344
c0011aeb:	01 d0                	add    eax,edx
c0011aed:	a3 44 43 02 c0       	mov    ds:0xc0024344,eax
c0011af2:	eb 6d                	jmp    c0011b61 <sendKeyboardToken(KeyboardToken)+0x311>
c0011af4:	c7 05 44 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024344,0x0
c0011afe:	eb 61                	jmp    c0011b61 <sendKeyboardToken(KeyboardToken)+0x311>
c0011b00:	a1 44 43 02 c0       	mov    eax,ds:0xc0024344
c0011b05:	85 c0                	test   eax,eax
c0011b07:	74 18                	je     c0011b21 <sendKeyboardToken(KeyboardToken)+0x2d1>
c0011b09:	a1 44 43 02 c0       	mov    eax,ds:0xc0024344
c0011b0e:	0f b6 c0             	movzx  eax,al
c0011b11:	83 ec 0c             	sub    esp,0xc
c0011b14:	50                   	push   eax
c0011b15:	e8 ca fc ff ff       	call   c00117e4 <sendKeyToTerminal(unsigned char)>
c0011b1a:	83 c4 10             	add    esp,0x10
c0011b1d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0011b21:	c7 05 44 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024344,0x0
c0011b2b:	eb 34                	jmp    c0011b61 <sendKeyboardToken(KeyboardToken)+0x311>
c0011b2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b30:	66 3d 01 01          	cmp    ax,0x101
c0011b34:	75 2b                	jne    c0011b61 <sendKeyboardToken(KeyboardToken)+0x311>
c0011b36:	a1 44 43 02 c0       	mov    eax,ds:0xc0024344
c0011b3b:	85 c0                	test   eax,eax
c0011b3d:	74 18                	je     c0011b57 <sendKeyboardToken(KeyboardToken)+0x307>
c0011b3f:	a1 44 43 02 c0       	mov    eax,ds:0xc0024344
c0011b44:	0f b6 c0             	movzx  eax,al
c0011b47:	83 ec 0c             	sub    esp,0xc
c0011b4a:	50                   	push   eax
c0011b4b:	e8 94 fc ff ff       	call   c00117e4 <sendKeyToTerminal(unsigned char)>
c0011b50:	83 c4 10             	add    esp,0x10
c0011b53:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0011b57:	c7 05 44 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024344,0x0
c0011b61:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0011b64:	83 f0 01             	xor    eax,0x1
c0011b67:	84 c0                	test   al,al
c0011b69:	74 4c                	je     c0011bb7 <sendKeyboardToken(KeyboardToken)+0x367>
c0011b6b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011b6e:	83 f0 01             	xor    eax,0x1
c0011b71:	84 c0                	test   al,al
c0011b73:	74 42                	je     c0011bb7 <sendKeyboardToken(KeyboardToken)+0x367>
c0011b75:	a0 40 40 02 c0       	mov    al,ds:0xc0024040
c0011b7a:	83 f0 01             	xor    eax,0x1
c0011b7d:	84 c0                	test   al,al
c0011b7f:	74 36                	je     c0011bb7 <sendKeyboardToken(KeyboardToken)+0x367>
c0011b81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b84:	66 83 f8 1f          	cmp    ax,0x1f
c0011b88:	76 09                	jbe    c0011b93 <sendKeyboardToken(KeyboardToken)+0x343>
c0011b8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b8d:	66 83 f8 7e          	cmp    ax,0x7e
c0011b91:	76 12                	jbe    c0011ba5 <sendKeyboardToken(KeyboardToken)+0x355>
c0011b93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b96:	66 83 f8 0a          	cmp    ax,0xa
c0011b9a:	74 09                	je     c0011ba5 <sendKeyboardToken(KeyboardToken)+0x355>
c0011b9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b9f:	66 83 f8 08          	cmp    ax,0x8
c0011ba3:	75 12                	jne    c0011bb7 <sendKeyboardToken(KeyboardToken)+0x367>
c0011ba5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ba8:	0f b6 c0             	movzx  eax,al
c0011bab:	83 ec 0c             	sub    esp,0xc
c0011bae:	50                   	push   eax
c0011baf:	e8 30 fc ff ff       	call   c00117e4 <sendKeyToTerminal(unsigned char)>
c0011bb4:	83 c4 10             	add    esp,0x10
c0011bb7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0011bba:	83 f0 01             	xor    eax,0x1
c0011bbd:	84 c0                	test   al,al
c0011bbf:	74 4f                	je     c0011c10 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011bc1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011bc4:	83 f0 01             	xor    eax,0x1
c0011bc7:	84 c0                	test   al,al
c0011bc9:	74 45                	je     c0011c10 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011bcb:	a0 40 40 02 c0       	mov    al,ds:0xc0024040
c0011bd0:	84 c0                	test   al,al
c0011bd2:	74 3c                	je     c0011c10 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011bd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011bd7:	66 83 f8 3f          	cmp    ax,0x3f
c0011bdb:	76 33                	jbe    c0011c10 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011bdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011be0:	66 83 f8 7f          	cmp    ax,0x7f
c0011be4:	77 2a                	ja     c0011c10 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011be6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011be9:	88 c2                	mov    dl,al
c0011beb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011bee:	66 83 f8 5f          	cmp    ax,0x5f
c0011bf2:	76 04                	jbe    c0011bf8 <sendKeyboardToken(KeyboardToken)+0x3a8>
c0011bf4:	b0 20                	mov    al,0x20
c0011bf6:	eb 02                	jmp    c0011bfa <sendKeyboardToken(KeyboardToken)+0x3aa>
c0011bf8:	b0 00                	mov    al,0x0
c0011bfa:	29 c2                	sub    edx,eax
c0011bfc:	88 d0                	mov    al,dl
c0011bfe:	83 e8 40             	sub    eax,0x40
c0011c01:	0f b6 c0             	movzx  eax,al
c0011c04:	83 ec 0c             	sub    esp,0xc
c0011c07:	50                   	push   eax
c0011c08:	e8 d7 fb ff ff       	call   c00117e4 <sendKeyToTerminal(unsigned char)>
c0011c0d:	83 c4 10             	add    esp,0x10
c0011c10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c13:	66 3d 00 03          	cmp    ax,0x300
c0011c17:	75 0f                	jne    c0011c28 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0011c19:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011c1c:	83 f0 01             	xor    eax,0x1
c0011c1f:	84 c0                	test   al,al
c0011c21:	74 05                	je     c0011c28 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0011c23:	e8 29 b7 ff ff       	call   c000d351 <doTerminalCycle()>
c0011c28:	90                   	nop
c0011c29:	c9                   	leave  
c0011c2a:	c3                   	ret    

c0011c2b <clearInternalKeybuffer(VgaText*)>:
c0011c2b:	55                   	push   ebp
c0011c2c:	89 e5                	mov    ebp,esp
c0011c2e:	83 ec 08             	sub    esp,0x8
c0011c31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c34:	05 34 11 00 00       	add    eax,0x1134
c0011c39:	83 ec 0c             	sub    esp,0xc
c0011c3c:	50                   	push   eax
c0011c3d:	e8 e3 e9 fe ff       	call   c0000625 <strlen>
c0011c42:	83 c4 10             	add    esp,0x10
c0011c45:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011c48:	81 c2 34 11 00 00    	add    edx,0x1134
c0011c4e:	83 ec 04             	sub    esp,0x4
c0011c51:	50                   	push   eax
c0011c52:	6a 00                	push   0x0
c0011c54:	52                   	push   edx
c0011c55:	e8 ae e9 fe ff       	call   c0000608 <memset>
c0011c5a:	83 c4 10             	add    esp,0x10
c0011c5d:	90                   	nop
c0011c5e:	c9                   	leave  
c0011c5f:	c3                   	ret    

c0011c60 <readKeyboard(VgaText*, char*, unsigned long)>:
c0011c60:	55                   	push   ebp
c0011c61:	89 e5                	mov    ebp,esp
c0011c63:	83 ec 18             	sub    esp,0x18
c0011c66:	fb                   	sti    
c0011c67:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0011c6e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0011c72:	74 77                	je     c0011ceb <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0011c74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c77:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0011c7d:	84 c0                	test   al,al
c0011c7f:	75 02                	jne    c0011c83 <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0011c81:	eb f1                	jmp    c0011c74 <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0011c83:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011c86:	8d 50 01             	lea    edx,[eax+0x1]
c0011c89:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0011c8c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011c8f:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0011c95:	88 10                	mov    BYTE PTR [eax],dl
c0011c97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c9a:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0011ca0:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0011ca3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ca6:	05 34 11 00 00       	add    eax,0x1134
c0011cab:	83 ec 0c             	sub    esp,0xc
c0011cae:	50                   	push   eax
c0011caf:	e8 71 e9 fe ff       	call   c0000625 <strlen>
c0011cb4:	83 c4 10             	add    esp,0x10
c0011cb7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011cba:	81 c2 34 11 00 00    	add    edx,0x1134
c0011cc0:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011cc3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011cc6:	81 c2 34 11 00 00    	add    edx,0x1134
c0011ccc:	83 ec 04             	sub    esp,0x4
c0011ccf:	50                   	push   eax
c0011cd0:	51                   	push   ecx
c0011cd1:	52                   	push   edx
c0011cd2:	e8 c3 e8 fe ff       	call   c000059a <memmove>
c0011cd7:	83 c4 10             	add    esp,0x10
c0011cda:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0011cdd:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011ce0:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0011ce4:	75 88                	jne    c0011c6e <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0011ce6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ce9:	eb 03                	jmp    c0011cee <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c0011ceb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cee:	c9                   	leave  
c0011cef:	c3                   	ret    

c0011cf0 <Keyboard::Keyboard(char const*)>:
c0011cf0:	83 ec 0c             	sub    esp,0xc
c0011cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011cf7:	83 ec 08             	sub    esp,0x8
c0011cfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cfe:	50                   	push   eax
c0011cff:	e8 16 ea ff ff       	call   c001071a <Device::Device(char const*)>
c0011d04:	83 c4 10             	add    esp,0x10
c0011d07:	ba f0 16 02 c0       	mov    edx,0xc00216f0
c0011d0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d10:	89 10                	mov    DWORD PTR [eax],edx
c0011d12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d16:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0011d20:	c6 05 24 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023f24,0x1
c0011d27:	90                   	nop
c0011d28:	83 c4 0c             	add    esp,0xc
c0011d2b:	c3                   	ret    

c0011d2c <Keyboard::~Keyboard()>:
c0011d2c:	83 ec 0c             	sub    esp,0xc
c0011d2f:	ba f0 16 02 c0       	mov    edx,0xc00216f0
c0011d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d38:	89 10                	mov    DWORD PTR [eax],edx
c0011d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d3e:	83 ec 0c             	sub    esp,0xc
c0011d41:	50                   	push   eax
c0011d42:	e8 85 e6 ff ff       	call   c00103cc <Device::~Device()>
c0011d47:	83 c4 10             	add    esp,0x10
c0011d4a:	90                   	nop
c0011d4b:	83 c4 0c             	add    esp,0xc
c0011d4e:	c3                   	ret    
c0011d4f:	90                   	nop

c0011d50 <Keyboard::~Keyboard()>:
c0011d50:	83 ec 0c             	sub    esp,0xc
c0011d53:	83 ec 0c             	sub    esp,0xc
c0011d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d5a:	e8 cd ff ff ff       	call   c0011d2c <Keyboard::~Keyboard()>
c0011d5f:	83 c4 10             	add    esp,0x10
c0011d62:	83 ec 08             	sub    esp,0x8
c0011d65:	68 5c 01 00 00       	push   0x15c
c0011d6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d6e:	e8 cc d2 ff ff       	call   c000f03f <operator delete(void*, unsigned long)>
c0011d73:	83 c4 10             	add    esp,0x10
c0011d76:	83 c4 0c             	add    esp,0xc
c0011d79:	c3                   	ret    

c0011d7a <LogicalDisk::close(int, int, void*)>:
c0011d7a:	83 c8 ff             	or     eax,0xffffffff
c0011d7d:	c3                   	ret    

c0011d7e <LogicalDisk::~LogicalDisk()>:
c0011d7e:	83 ec 0c             	sub    esp,0xc
c0011d81:	ba a0 17 02 c0       	mov    edx,0xc00217a0
c0011d86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d8a:	89 10                	mov    DWORD PTR [eax],edx
c0011d8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d90:	83 ec 0c             	sub    esp,0xc
c0011d93:	50                   	push   eax
c0011d94:	e8 33 e6 ff ff       	call   c00103cc <Device::~Device()>
c0011d99:	83 c4 10             	add    esp,0x10
c0011d9c:	90                   	nop
c0011d9d:	83 c4 0c             	add    esp,0xc
c0011da0:	c3                   	ret    
c0011da1:	90                   	nop

c0011da2 <LogicalDisk::~LogicalDisk()>:
c0011da2:	83 ec 0c             	sub    esp,0xc
c0011da5:	83 ec 0c             	sub    esp,0xc
c0011da8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011dac:	e8 cd ff ff ff       	call   c0011d7e <LogicalDisk::~LogicalDisk()>
c0011db1:	83 c4 10             	add    esp,0x10
c0011db4:	83 ec 08             	sub    esp,0x8
c0011db7:	68 74 01 00 00       	push   0x174
c0011dbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011dc0:	e8 7a d2 ff ff       	call   c000f03f <operator delete(void*, unsigned long)>
c0011dc5:	83 c4 10             	add    esp,0x10
c0011dc8:	83 c4 0c             	add    esp,0xc
c0011dcb:	c3                   	ret    

c0011dcc <LogicalDisk::open(int, int, void*)>:
c0011dcc:	83 ec 18             	sub    esp,0x18
c0011dcf:	68 1c 17 02 c0       	push   0xc002171c
c0011dd4:	e8 45 34 00 00       	call   c001521e <Krnl::panic(char const*)>
c0011dd9:	83 c8 ff             	or     eax,0xffffffff
c0011ddc:	83 c4 1c             	add    esp,0x1c
c0011ddf:	c3                   	ret    

c0011de0 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0011de0:	53                   	push   ebx
c0011de1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011de5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011de9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011ded:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0011df3:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0011df9:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0011dff:	77 10                	ja     c0011e11 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0011e01:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0011e07:	89 d3                	mov    ebx,edx
c0011e09:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0011e0f:	72 05                	jb     c0011e16 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0011e11:	83 c8 ff             	or     eax,0xffffffff
c0011e14:	89 c2                	mov    edx,eax
c0011e16:	5b                   	pop    ebx
c0011e17:	c3                   	ret    

c0011e18 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0011e18:	56                   	push   esi
c0011e19:	83 c8 ff             	or     eax,0xffffffff
c0011e1c:	53                   	push   ebx
c0011e1d:	89 c2                	mov    edx,eax
c0011e1f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011e23:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0011e27:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0011e2b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011e31:	77 27                	ja     c0011e5a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0011e33:	89 d8                	mov    eax,ebx
c0011e35:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0011e3b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0011e41:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e46:	89 c2                	mov    edx,eax
c0011e48:	73 10                	jae    c0011e5a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0011e4a:	89 c8                	mov    eax,ecx
c0011e4c:	89 da                	mov    edx,ebx
c0011e4e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0011e54:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0011e5a:	5b                   	pop    ebx
c0011e5b:	5e                   	pop    esi
c0011e5c:	c3                   	ret    
c0011e5d:	90                   	nop

c0011e5e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0011e5e:	83 ec 1c             	sub    esp,0x1c
c0011e61:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011e69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e71:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e75:	89 04 24             	mov    DWORD PTR [esp],eax
c0011e78:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011e7c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011e80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011e84:	83 ec 08             	sub    esp,0x8
c0011e87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011e8b:	50                   	push   eax
c0011e8c:	e8 89 e8 ff ff       	call   c001071a <Device::Device(char const*)>
c0011e91:	83 c4 10             	add    esp,0x10
c0011e94:	ba a0 17 02 c0       	mov    edx,0xc00217a0
c0011e99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011e9d:	89 10                	mov    DWORD PTR [eax],edx
c0011e9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ea3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0011eaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011eae:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0011eb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011eb9:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0011ec3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011ec7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011ecb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011ecf:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0011ed5:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0011edb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011edf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011ee2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011ee6:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0011eec:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0011ef2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ef6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011efa:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0011f00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f04:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0011f0e:	90                   	nop
c0011f0f:	83 c4 1c             	add    esp,0x1c
c0011f12:	c3                   	ret    
c0011f13:	90                   	nop

c0011f14 <LogicalDisk::assignDriveLetter()>:
c0011f14:	55                   	push   ebp
c0011f15:	57                   	push   edi
c0011f16:	56                   	push   esi
c0011f17:	53                   	push   ebx
c0011f18:	83 ec 14             	sub    esp,0x14
c0011f1b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f1f:	8b 3d 60 43 02 c0    	mov    edi,DWORD PTR ds:0xc0024360
c0011f25:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0011f2b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0011f2f:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0011f35:	8b 3d 64 43 02 c0    	mov    edi,DWORD PTR ds:0xc0024364
c0011f3b:	3c 01                	cmp    al,0x1
c0011f3d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0011f41:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0011f45:	19 c0                	sbb    eax,eax
c0011f47:	83 e0 02             	and    eax,0x2
c0011f4a:	83 c0 41             	add    eax,0x41
c0011f4d:	0f be e8             	movsx  ebp,al
c0011f50:	3c 43                	cmp    al,0x43
c0011f52:	75 10                	jne    c0011f64 <LogicalDisk::assignDriveLetter()+0x50>
c0011f54:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0011f5b:	75 5d                	jne    c0011fba <LogicalDisk::assignDriveLetter()+0xa6>
c0011f5d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0011f62:	75 56                	jne    c0011fba <LogicalDisk::assignDriveLetter()+0xa6>
c0011f64:	8d 75 bf             	lea    esi,[ebp-0x41]
c0011f67:	ba 01 00 00 00       	mov    edx,0x1
c0011f6c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0011f70:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0011f74:	d3 e2                	shl    edx,cl
c0011f76:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011f7a:	89 d7                	mov    edi,edx
c0011f7c:	89 d6                	mov    esi,edx
c0011f7e:	c1 ff 1f             	sar    edi,0x1f
c0011f81:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0011f85:	21 f9                	and    ecx,edi
c0011f87:	09 d1                	or     ecx,edx
c0011f89:	75 2f                	jne    c0011fba <LogicalDisk::assignDriveLetter()+0xa6>
c0011f8b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0011f8f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011f93:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0011f99:	09 f2                	or     edx,esi
c0011f9b:	89 15 60 43 02 c0    	mov    DWORD PTR ds:0xc0024360,edx
c0011fa1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011fa5:	09 fa                	or     edx,edi
c0011fa7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0011fab:	89 15 64 43 02 c0    	mov    DWORD PTR ds:0xc0024364,edx
c0011fb1:	89 1c bd 80 43 02 c0 	mov    DWORD PTR [edi*4-0x3ffdbc80],ebx
c0011fb8:	eb 08                	jmp    c0011fc2 <LogicalDisk::assignDriveLetter()+0xae>
c0011fba:	45                   	inc    ebp
c0011fbb:	40                   	inc    eax
c0011fbc:	3c 5b                	cmp    al,0x5b
c0011fbe:	75 90                	jne    c0011f50 <LogicalDisk::assignDriveLetter()+0x3c>
c0011fc0:	31 c0                	xor    eax,eax
c0011fc2:	83 c4 14             	add    esp,0x14
c0011fc5:	5b                   	pop    ebx
c0011fc6:	5e                   	pop    esi
c0011fc7:	5f                   	pop    edi
c0011fc8:	5d                   	pop    ebp
c0011fc9:	c3                   	ret    

c0011fca <LogicalDisk::mount()>:
c0011fca:	56                   	push   esi
c0011fcb:	53                   	push   ebx
c0011fcc:	51                   	push   ecx
c0011fcd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011fd1:	8b 1d e8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023ee8
c0011fd7:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0011fe1:	85 db                	test   ebx,ebx
c0011fe3:	74 50                	je     c0012035 <LogicalDisk::mount()+0x6b>
c0011fe5:	e8 8d 61 00 00       	call   c0018177 <getIRQNestingLevel()>
c0011fea:	52                   	push   edx
c0011feb:	52                   	push   edx
c0011fec:	50                   	push   eax
c0011fed:	68 40 17 02 c0       	push   0xc0021740
c0011ff2:	e8 28 d1 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0011ff7:	83 c4 0c             	add    esp,0xc
c0011ffa:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0012001:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012003:	83 e8 41             	sub    eax,0x41
c0012006:	50                   	push   eax
c0012007:	56                   	push   esi
c0012008:	53                   	push   ebx
c0012009:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001200c:	83 c4 10             	add    esp,0x10
c001200f:	84 c0                	test   al,al
c0012011:	74 08                	je     c001201b <LogicalDisk::mount()+0x51>
c0012013:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0012019:	eb 1c                	jmp    c0012037 <LogicalDisk::mount()+0x6d>
c001201b:	e8 57 61 00 00       	call   c0018177 <getIRQNestingLevel()>
c0012020:	51                   	push   ecx
c0012021:	51                   	push   ecx
c0012022:	50                   	push   eax
c0012023:	68 5b 17 02 c0       	push   0xc002175b
c0012028:	e8 f2 d0 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001202d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0012030:	83 c4 10             	add    esp,0x10
c0012033:	eb ac                	jmp    c0011fe1 <LogicalDisk::mount()+0x17>
c0012035:	31 c0                	xor    eax,eax
c0012037:	5a                   	pop    edx
c0012038:	5b                   	pop    ebx
c0012039:	5e                   	pop    esi
c001203a:	c3                   	ret    
c001203b:	90                   	nop

c001203c <LogicalDisk::unmount()>:
c001203c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012040:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001204a:	c3                   	ret    
c001204b:	90                   	nop

c001204c <LogicalDisk::unassignDriveLetter()>:
c001204c:	57                   	push   edi
c001204d:	56                   	push   esi
c001204e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012052:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0012059:	84 c9                	test   cl,cl
c001205b:	75 0f                	jne    c001206c <LogicalDisk::unassignDriveLetter()+0x20>
c001205d:	c7 44 24 0c 76 17 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021776
c0012065:	5e                   	pop    esi
c0012066:	5f                   	pop    edi
c0012067:	e9 b2 31 00 00       	jmp    c001521e <Krnl::panic(char const*)>
c001206c:	83 e9 41             	sub    ecx,0x41
c001206f:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0012076:	b8 01 00 00 00       	mov    eax,0x1
c001207b:	c7 04 8d 80 43 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdbc80],0x0
c0012086:	d3 e0                	shl    eax,cl
c0012088:	89 c7                	mov    edi,eax
c001208a:	f7 d0                	not    eax
c001208c:	c1 ff 1f             	sar    edi,0x1f
c001208f:	21 05 60 43 02 c0    	and    DWORD PTR ds:0xc0024360,eax
c0012095:	89 fe                	mov    esi,edi
c0012097:	f7 d6                	not    esi
c0012099:	21 35 64 43 02 c0    	and    DWORD PTR ds:0xc0024364,esi
c001209f:	5e                   	pop    esi
c00120a0:	5f                   	pop    edi
c00120a1:	c3                   	ret    

c00120a2 <LogicalDisk::read(unsigned long long, int, void*)>:
c00120a2:	57                   	push   edi
c00120a3:	56                   	push   esi
c00120a4:	53                   	push   ebx
c00120a5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00120a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00120ad:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00120b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00120b5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00120bb:	77 41                	ja     c00120fe <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00120bd:	99                   	cdq    
c00120be:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00120c4:	01 c8                	add    eax,ecx
c00120c6:	11 da                	adc    edx,ebx
c00120c8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00120ce:	19 d7                	sbb    edi,edx
c00120d0:	72 33                	jb     c0012105 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00120d2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00120d8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00120de:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00120e2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00120e6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00120ec:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00120f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00120f6:	5b                   	pop    ebx
c00120f7:	5e                   	pop    esi
c00120f8:	5f                   	pop    edi
c00120f9:	e9 9a 09 00 00       	jmp    c0012a98 <VCache::read(unsigned long long, int, void*)>
c00120fe:	b8 05 00 00 00       	mov    eax,0x5
c0012103:	eb 05                	jmp    c001210a <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0012105:	b8 07 00 00 00       	mov    eax,0x7
c001210a:	5b                   	pop    ebx
c001210b:	5e                   	pop    esi
c001210c:	5f                   	pop    edi
c001210d:	c3                   	ret    

c001210e <LogicalDisk::write(unsigned long long, int, void*)>:
c001210e:	57                   	push   edi
c001210f:	56                   	push   esi
c0012110:	53                   	push   ebx
c0012111:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012115:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012119:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001211d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012121:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0012127:	77 41                	ja     c001216a <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0012129:	99                   	cdq    
c001212a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0012130:	01 c8                	add    eax,ecx
c0012132:	11 da                	adc    edx,ebx
c0012134:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001213a:	19 d7                	sbb    edi,edx
c001213c:	72 33                	jb     c0012171 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001213e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0012144:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001214a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001214e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0012152:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0012158:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001215e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012162:	5b                   	pop    ebx
c0012163:	5e                   	pop    esi
c0012164:	5f                   	pop    edi
c0012165:	e9 4a 08 00 00       	jmp    c00129b4 <VCache::write(unsigned long long, int, void*)>
c001216a:	b8 05 00 00 00       	mov    eax,0x5
c001216f:	eb 05                	jmp    c0012176 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0012171:	b8 07 00 00 00       	mov    eax,0x7
c0012176:	5b                   	pop    ebx
c0012177:	5e                   	pop    esi
c0012178:	5f                   	pop    edi
c0012179:	c3                   	ret    

c001217a <Mouse::Mouse(char const*)>:
c001217a:	83 ec 0c             	sub    esp,0xc
c001217d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012181:	83 ec 08             	sub    esp,0x8
c0012184:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012188:	50                   	push   eax
c0012189:	e8 8c e5 ff ff       	call   c001071a <Device::Device(char const*)>
c001218e:	83 c4 10             	add    esp,0x10
c0012191:	ba cc 17 02 c0       	mov    edx,0xc00217cc
c0012196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001219a:	89 10                	mov    DWORD PTR [eax],edx
c001219c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121a0:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00121aa:	90                   	nop
c00121ab:	83 c4 0c             	add    esp,0xc
c00121ae:	c3                   	ret    
c00121af:	90                   	nop

c00121b0 <Mouse::~Mouse()>:
c00121b0:	83 ec 0c             	sub    esp,0xc
c00121b3:	ba cc 17 02 c0       	mov    edx,0xc00217cc
c00121b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121bc:	89 10                	mov    DWORD PTR [eax],edx
c00121be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121c2:	83 ec 0c             	sub    esp,0xc
c00121c5:	50                   	push   eax
c00121c6:	e8 01 e2 ff ff       	call   c00103cc <Device::~Device()>
c00121cb:	83 c4 10             	add    esp,0x10
c00121ce:	90                   	nop
c00121cf:	83 c4 0c             	add    esp,0xc
c00121d2:	c3                   	ret    
c00121d3:	90                   	nop

c00121d4 <Mouse::~Mouse()>:
c00121d4:	83 ec 0c             	sub    esp,0xc
c00121d7:	83 ec 0c             	sub    esp,0xc
c00121da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00121de:	e8 cd ff ff ff       	call   c00121b0 <Mouse::~Mouse()>
c00121e3:	83 c4 10             	add    esp,0x10
c00121e6:	83 ec 08             	sub    esp,0x8
c00121e9:	68 58 01 00 00       	push   0x158
c00121ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00121f2:	e8 48 ce ff ff       	call   c000f03f <operator delete(void*, unsigned long)>
c00121f7:	83 c4 10             	add    esp,0x10
c00121fa:	83 c4 0c             	add    esp,0xc
c00121fd:	c3                   	ret    

c00121fe <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00121fe:	55                   	push   ebp
c00121ff:	57                   	push   edi
c0012200:	56                   	push   esi
c0012201:	53                   	push   ebx
c0012202:	81 ec 28 01 00 00    	sub    esp,0x128
c0012208:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001220f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012216:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001221d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0012224:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012228:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001222c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0012233:	e8 d4 e5 ff ff       	call   c001080c <Device::getName()>
c0012238:	5a                   	pop    edx
c0012239:	59                   	pop    ecx
c001223a:	50                   	push   eax
c001223b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001223f:	55                   	push   ebp
c0012240:	e8 62 e4 fe ff       	call   c00006a7 <strcpy>
c0012245:	5b                   	pop    ebx
c0012246:	58                   	pop    eax
c0012247:	68 f0 17 02 c0       	push   0xc00217f0
c001224c:	55                   	push   ebp
c001224d:	e8 0c e5 fe ff       	call   c000075e <strcat>
c0012252:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0012259:	e8 d2 cd ff ff       	call   c000f030 <operator new(unsigned long)>
c001225e:	83 c4 0c             	add    esp,0xc
c0012261:	89 c3                	mov    ebx,eax
c0012263:	57                   	push   edi
c0012264:	56                   	push   esi
c0012265:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012269:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001226d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0012274:	55                   	push   ebp
c0012275:	50                   	push   eax
c0012276:	e8 e3 fb ff ff       	call   c0011e5e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001227b:	83 c4 14             	add    esp,0x14
c001227e:	53                   	push   ebx
c001227f:	e8 90 fc ff ff       	call   c0011f14 <LogicalDisk::assignDriveLetter()>
c0012284:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012287:	e8 3e fd ff ff       	call   c0011fca <LogicalDisk::mount()>
c001228c:	58                   	pop    eax
c001228d:	5a                   	pop    edx
c001228e:	53                   	push   ebx
c001228f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0012296:	e8 8f e2 ff ff       	call   c001052a <Device::addChild(Device*)>
c001229b:	81 c4 2c 01 00 00    	add    esp,0x12c
c00122a1:	5b                   	pop    ebx
c00122a2:	5e                   	pop    esi
c00122a3:	5f                   	pop    edi
c00122a4:	5d                   	pop    ebp
c00122a5:	c3                   	ret    

c00122a6 <createPartitionsForDisk(PhysicalDisk*)>:
c00122a6:	55                   	push   ebp
c00122a7:	57                   	push   edi
c00122a8:	56                   	push   esi
c00122a9:	53                   	push   ebx
c00122aa:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00122b0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00122b7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00122bd:	3d 00 02 00 00       	cmp    eax,0x200
c00122c2:	74 27                	je     c00122eb <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00122c4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00122ca:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00122d0:	83 ec 10             	sub    esp,0x10
c00122d3:	0f a4 f7 0a          	shld   edi,esi,0xa
c00122d7:	99                   	cdq    
c00122d8:	c1 e6 0a             	shl    esi,0xa
c00122db:	52                   	push   edx
c00122dc:	89 fd                	mov    ebp,edi
c00122de:	50                   	push   eax
c00122df:	55                   	push   ebp
c00122e0:	56                   	push   esi
c00122e1:	e8 46 c8 00 00       	call   c001eb2c <__udivdi3>
c00122e6:	e9 b1 00 00 00       	jmp    c001239c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00122eb:	83 ec 0c             	sub    esp,0xc
c00122ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00122f0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00122f4:	56                   	push   esi
c00122f5:	6a 01                	push   0x1
c00122f7:	6a 00                	push   0x0
c00122f9:	6a 00                	push   0x0
c00122fb:	53                   	push   ebx
c00122fc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00122ff:	83 c4 20             	add    esp,0x20
c0012302:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001230a:	75 0a                	jne    c0012316 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001230c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0012314:	74 2c                	je     c0012342 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0012316:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001231c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012322:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012328:	83 ec 10             	sub    esp,0x10
c001232b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001232f:	89 f7                	mov    edi,esi
c0012331:	c1 e0 0a             	shl    eax,0xa
c0012334:	c1 ff 1f             	sar    edi,0x1f
c0012337:	57                   	push   edi
c0012338:	56                   	push   esi
c0012339:	52                   	push   edx
c001233a:	50                   	push   eax
c001233b:	e8 ec c7 00 00       	call   c001eb2c <__udivdi3>
c0012340:	eb 5a                	jmp    c001239c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012342:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0012349:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0012350:	83 e1 7f             	and    ecx,0x7f
c0012353:	83 e0 7f             	and    eax,0x7f
c0012356:	01 c1                	add    ecx,eax
c0012358:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001235f:	83 e0 7f             	and    eax,0x7f
c0012362:	01 c1                	add    ecx,eax
c0012364:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001236b:	83 e0 7f             	and    eax,0x7f
c001236e:	00 c1                	add    cl,al
c0012370:	74 41                	je     c00123b3 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0012372:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012378:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001237e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012384:	83 ec 10             	sub    esp,0x10
c0012387:	0f a4 c2 0a          	shld   edx,eax,0xa
c001238b:	89 f7                	mov    edi,esi
c001238d:	c1 e0 0a             	shl    eax,0xa
c0012390:	c1 ff 1f             	sar    edi,0x1f
c0012393:	57                   	push   edi
c0012394:	56                   	push   esi
c0012395:	52                   	push   edx
c0012396:	50                   	push   eax
c0012397:	e8 90 c7 00 00       	call   c001eb2c <__udivdi3>
c001239c:	83 c4 14             	add    esp,0x14
c001239f:	52                   	push   edx
c00123a0:	50                   	push   eax
c00123a1:	6a 00                	push   0x0
c00123a3:	6a 00                	push   0x0
c00123a5:	53                   	push   ebx
c00123a6:	e8 53 fe ff ff       	call   c00121fe <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00123ab:	83 c4 20             	add    esp,0x20
c00123ae:	e9 79 01 00 00       	jmp    c001252c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00123b3:	89 f0                	mov    eax,esi
c00123b5:	31 f6                	xor    esi,esi
c00123b7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00123be:	75 02                	jne    c00123c2 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00123c0:	89 f1                	mov    ecx,esi
c00123c2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00123c9:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00123d0:	c1 e2 08             	shl    edx,0x8
c00123d3:	c1 e7 10             	shl    edi,0x10
c00123d6:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00123de:	09 fa                	or     edx,edi
c00123e0:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00123e8:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00123ef:	83 c0 10             	add    eax,0x10
c00123f2:	09 fa                	or     edx,edi
c00123f4:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00123fb:	c1 e7 18             	shl    edi,0x18
c00123fe:	09 fa                	or     edx,edi
c0012400:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0012407:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001240b:	c1 e7 10             	shl    edi,0x10
c001240e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0012415:	c1 e2 08             	shl    edx,0x8
c0012418:	09 fa                	or     edx,edi
c001241a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0012421:	09 fa                	or     edx,edi
c0012423:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001242a:	c1 e7 18             	shl    edi,0x18
c001242d:	09 fa                	or     edx,edi
c001242f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0012433:	46                   	inc    esi
c0012434:	83 fe 04             	cmp    esi,0x4
c0012437:	0f 85 7a ff ff ff    	jne    c00123b7 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c001243d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012441:	83 f0 01             	xor    eax,0x1
c0012444:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012448:	75 57                	jne    c00124a1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001244a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001244e:	83 f0 01             	xor    eax,0x1
c0012451:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012455:	75 4a                	jne    c00124a1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012457:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001245b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012463:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001246b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012471:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012477:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001247d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012481:	89 f7                	mov    edi,esi
c0012483:	c1 e0 0a             	shl    eax,0xa
c0012486:	c1 ff 1f             	sar    edi,0x1f
c0012489:	57                   	push   edi
c001248a:	56                   	push   esi
c001248b:	52                   	push   edx
c001248c:	50                   	push   eax
c001248d:	e8 9a c6 00 00       	call   c001eb2c <__udivdi3>
c0012492:	83 c4 10             	add    esp,0x10
c0012495:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012499:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001249d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00124a1:	84 c9                	test   cl,cl
c00124a3:	74 53                	je     c00124f8 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00124a5:	0f b6 c9             	movzx  ecx,cl
c00124a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00124b0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00124b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00124b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00124bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00124c0:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00124c4:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00124c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00124cc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00124d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00124d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00124d8:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00124dc:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00124e0:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00124e4:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00124e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00124ec:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00124f0:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00124f4:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00124f8:	31 ed                	xor    ebp,ebp
c00124fa:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00124fe:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0012502:	89 f8                	mov    eax,edi
c0012504:	09 f0                	or     eax,esi
c0012506:	74 1e                	je     c0012526 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012508:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001250c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0012510:	89 d1                	mov    ecx,edx
c0012512:	09 c1                	or     ecx,eax
c0012514:	74 10                	je     c0012526 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012516:	83 ec 0c             	sub    esp,0xc
c0012519:	57                   	push   edi
c001251a:	56                   	push   esi
c001251b:	52                   	push   edx
c001251c:	50                   	push   eax
c001251d:	53                   	push   ebx
c001251e:	e8 db fc ff ff       	call   c00121fe <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012523:	83 c4 20             	add    esp,0x20
c0012526:	45                   	inc    ebp
c0012527:	83 fd 04             	cmp    ebp,0x4
c001252a:	75 ce                	jne    c00124fa <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001252c:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012532:	5b                   	pop    ebx
c0012533:	5e                   	pop    esi
c0012534:	5f                   	pop    edi
c0012535:	5d                   	pop    ebp
c0012536:	c3                   	ret    
c0012537:	90                   	nop

c0012538 <Timer::Timer(char const*)>:
c0012538:	83 ec 0c             	sub    esp,0xc
c001253b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001253f:	83 ec 08             	sub    esp,0x8
c0012542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012546:	50                   	push   eax
c0012547:	e8 ce e1 ff ff       	call   c001071a <Device::Device(char const*)>
c001254c:	83 c4 10             	add    esp,0x10
c001254f:	ba 04 18 02 c0       	mov    edx,0xc0021804
c0012554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012558:	89 10                	mov    DWORD PTR [eax],edx
c001255a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001255e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0012568:	90                   	nop
c0012569:	83 c4 0c             	add    esp,0xc
c001256c:	c3                   	ret    
c001256d:	90                   	nop

c001256e <Timer::~Timer()>:
c001256e:	83 ec 0c             	sub    esp,0xc
c0012571:	ba 04 18 02 c0       	mov    edx,0xc0021804
c0012576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001257a:	89 10                	mov    DWORD PTR [eax],edx
c001257c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012580:	83 ec 0c             	sub    esp,0xc
c0012583:	50                   	push   eax
c0012584:	e8 43 de ff ff       	call   c00103cc <Device::~Device()>
c0012589:	83 c4 10             	add    esp,0x10
c001258c:	90                   	nop
c001258d:	83 c4 0c             	add    esp,0xc
c0012590:	c3                   	ret    
c0012591:	90                   	nop

c0012592 <Timer::~Timer()>:
c0012592:	83 ec 0c             	sub    esp,0xc
c0012595:	83 ec 0c             	sub    esp,0xc
c0012598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001259c:	e8 cd ff ff ff       	call   c001256e <Timer::~Timer()>
c00125a1:	83 c4 10             	add    esp,0x10
c00125a4:	83 ec 08             	sub    esp,0x8
c00125a7:	68 5c 01 00 00       	push   0x15c
c00125ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125b0:	e8 8a ca ff ff       	call   c000f03f <operator delete(void*, unsigned long)>
c00125b5:	83 c4 10             	add    esp,0x10
c00125b8:	83 c4 0c             	add    esp,0xc
c00125bb:	c3                   	ret    

c00125bc <Timer::read()>:
c00125bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125c0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00125c6:	c3                   	ret    

c00125c7 <timerHandler(unsigned long long)>:
c00125c7:	55                   	push   ebp
c00125c8:	57                   	push   edi
c00125c9:	56                   	push   esi
c00125ca:	53                   	push   ebx
c00125cb:	83 ec 0c             	sub    esp,0xc
c00125ce:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00125d2:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00125d6:	01 35 f0 43 02 c0    	add    DWORD PTR ds:0xc00243f0,esi
c00125dc:	11 3d f4 43 02 c0    	adc    DWORD PTR ds:0xc00243f4,edi
c00125e2:	80 3d 8d 3d 02 c0 00 	cmp    BYTE PTR ds:0xc0023d8d,0x0
c00125e9:	0f 84 07 01 00 00    	je     c00126f6 <timerHandler(unsigned long long)+0x12f>
c00125ef:	e8 bf 5b 00 00       	call   c00181b3 <lockStuff()>
c00125f4:	83 ec 0c             	sub    esp,0xc
c00125f7:	68 bc 51 02 c0       	push   0xc00251bc
c00125fc:	e8 ff cb 00 00       	call   c001f200 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012601:	c7 04 24 bc 51 02 c0 	mov    DWORD PTR [esp],0xc00251bc
c0012608:	89 c3                	mov    ebx,eax
c001260a:	e8 f9 cb 00 00       	call   c001f208 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001260f:	83 c4 10             	add    esp,0x10
c0012612:	84 c0                	test   al,al
c0012614:	74 60                	je     c0012676 <timerHandler(unsigned long long)+0xaf>
c0012616:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001261c:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c001261f:	85 c0                	test   eax,eax
c0012621:	0f 85 91 00 00 00    	jne    c00126b8 <timerHandler(unsigned long long)+0xf1>
c0012627:	e9 be 00 00 00       	jmp    c00126ea <timerHandler(unsigned long long)+0x123>
c001262c:	83 ec 0c             	sub    esp,0xc
c001262f:	55                   	push   ebp
c0012630:	e8 67 61 00 00       	call   c001879c <unblockTask(ThreadControlBlock*)>
c0012635:	83 c4 10             	add    esp,0x10
c0012638:	39 eb                	cmp    ebx,ebp
c001263a:	75 12                	jne    c001264e <timerHandler(unsigned long long)+0x87>
c001263c:	83 ec 0c             	sub    esp,0xc
c001263f:	68 bc 51 02 c0       	push   0xc00251bc
c0012644:	e8 b7 cb 00 00       	call   c001f200 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012649:	89 c3                	mov    ebx,eax
c001264b:	83 c4 10             	add    esp,0x10
c001264e:	83 ec 0c             	sub    esp,0xc
c0012651:	68 bc 51 02 c0       	push   0xc00251bc
c0012656:	e8 ad cb 00 00       	call   c001f208 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001265b:	83 c4 10             	add    esp,0x10
c001265e:	84 c0                	test   al,al
c0012660:	75 b4                	jne    c0012616 <timerHandler(unsigned long long)+0x4f>
c0012662:	83 ec 0c             	sub    esp,0xc
c0012665:	68 bc 51 02 c0       	push   0xc00251bc
c001266a:	e8 91 cb 00 00       	call   c001f200 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001266f:	83 c4 10             	add    esp,0x10
c0012672:	39 d8                	cmp    eax,ebx
c0012674:	74 a0                	je     c0012616 <timerHandler(unsigned long long)+0x4f>
c0012676:	83 ec 0c             	sub    esp,0xc
c0012679:	68 bc 51 02 c0       	push   0xc00251bc
c001267e:	e8 7d cb 00 00       	call   c001f200 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012683:	c7 04 24 bc 51 02 c0 	mov    DWORD PTR [esp],0xc00251bc
c001268a:	89 c5                	mov    ebp,eax
c001268c:	e8 93 cb 00 00       	call   c001f224 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012691:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0012694:	83 c4 10             	add    esp,0x10
c0012697:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001269a:	39 15 f0 43 02 c0    	cmp    DWORD PTR ds:0xc00243f0,edx
c00126a0:	a1 f4 43 02 c0       	mov    eax,ds:0xc00243f4
c00126a5:	19 c8                	sbb    eax,ecx
c00126a7:	73 83                	jae    c001262c <timerHandler(unsigned long long)+0x65>
c00126a9:	50                   	push   eax
c00126aa:	50                   	push   eax
c00126ab:	55                   	push   ebp
c00126ac:	68 bc 51 02 c0       	push   0xc00251bc
c00126b1:	e8 1c cc 00 00       	call   c001f2d2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00126b6:	eb 93                	jmp    c001264b <timerHandler(unsigned long long)+0x84>
c00126b8:	80 3d 8c 3d 02 c0 00 	cmp    BYTE PTR ds:0xc0023d8c,0x0
c00126bf:	74 29                	je     c00126ea <timerHandler(unsigned long long)+0x123>
c00126c1:	39 c6                	cmp    esi,eax
c00126c3:	bb 00 00 00 00       	mov    ebx,0x0
c00126c8:	19 df                	sbb    edi,ebx
c00126ca:	72 19                	jb     c00126e5 <timerHandler(unsigned long long)+0x11e>
c00126cc:	e8 bb 5a 00 00       	call   c001818c <lockScheduler()>
c00126d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126d6:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00126d9:	e8 e2 5d 00 00       	call   c00184c0 <schedule()>
c00126de:	e8 ab 5a 00 00       	call   c001818e <unlockScheduler()>
c00126e3:	eb 05                	jmp    c00126ea <timerHandler(unsigned long long)+0x123>
c00126e5:	29 f0                	sub    eax,esi
c00126e7:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c00126ea:	83 c4 0c             	add    esp,0xc
c00126ed:	5b                   	pop    ebx
c00126ee:	5e                   	pop    esi
c00126ef:	5f                   	pop    edi
c00126f0:	5d                   	pop    ebp
c00126f1:	e9 4f 5e 00 00       	jmp    c0018545 <unlockStuff()>
c00126f6:	83 c4 0c             	add    esp,0xc
c00126f9:	5b                   	pop    ebx
c00126fa:	5e                   	pop    esi
c00126fb:	5f                   	pop    edi
c00126fc:	5d                   	pop    ebp
c00126fd:	c3                   	ret    

c00126fe <setupTimer(int)>:
c00126fe:	57                   	push   edi
c00126ff:	56                   	push   esi
c0012700:	53                   	push   ebx
c0012701:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012705:	e8 a1 19 00 00       	call   c00140ab <getCPUNumber()>
c001270a:	85 c0                	test   eax,eax
c001270c:	74 32                	je     c0012740 <setupTimer(int)+0x42>
c001270e:	83 ec 0c             	sub    esp,0xc
c0012711:	68 60 01 00 00       	push   0x160
c0012716:	e8 15 c9 ff ff       	call   c000f030 <operator new(unsigned long)>
c001271b:	89 04 24             	mov    DWORD PTR [esp],eax
c001271e:	89 c3                	mov    ebx,eax
c0012720:	e8 a9 be 00 00       	call   c001e5ce <APICTimer::APICTimer()>
c0012725:	6a 00                	push   0x0
c0012727:	6a 00                	push   0x0
c0012729:	56                   	push   esi
c001272a:	53                   	push   ebx
c001272b:	e8 a6 bd 00 00       	call   c001e4d6 <APICTimer::open(int, int, void*)>
c0012730:	83 c4 20             	add    esp,0x20
c0012733:	e8 76 19 00 00       	call   c00140ae <thisCPU()>
c0012738:	56                   	push   esi
c0012739:	56                   	push   esi
c001273a:	53                   	push   ebx
c001273b:	e9 96 00 00 00       	jmp    c00127d6 <setupTimer(int)+0xd8>
c0012740:	e8 69 19 00 00       	call   c00140ae <thisCPU()>
c0012745:	83 ec 0c             	sub    esp,0xc
c0012748:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001274e:	e8 b9 e0 ff ff       	call   c001080c <Device::getName()>
c0012753:	83 c4 10             	add    esp,0x10
c0012756:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0012759:	0f 85 87 00 00 00    	jne    c00127e6 <setupTimer(int)+0xe8>
c001275f:	a1 88 3d 02 c0       	mov    eax,ds:0xc0023d88
c0012764:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001276b:	74 79                	je     c00127e6 <setupTimer(int)+0xe8>
c001276d:	83 ec 0c             	sub    esp,0xc
c0012770:	68 5c 01 00 00       	push   0x15c
c0012775:	e8 b6 c8 ff ff       	call   c000f030 <operator new(unsigned long)>
c001277a:	89 04 24             	mov    DWORD PTR [esp],eax
c001277d:	89 c3                	mov    ebx,eax
c001277f:	e8 9a bf 00 00       	call   c001e71e <PIT::PIT()>
c0012784:	59                   	pop    ecx
c0012785:	5f                   	pop    edi
c0012786:	53                   	push   ebx
c0012787:	ff 35 88 3d 02 c0    	push   DWORD PTR ds:0xc0023d88
c001278d:	e8 98 dd ff ff       	call   c001052a <Device::addChild(Device*)>
c0012792:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012794:	6a 00                	push   0x0
c0012796:	6a 00                	push   0x0
c0012798:	56                   	push   esi
c0012799:	53                   	push   ebx
c001279a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001279d:	83 c4 14             	add    esp,0x14
c00127a0:	68 60 01 00 00       	push   0x160
c00127a5:	e8 86 c8 ff ff       	call   c000f030 <operator new(unsigned long)>
c00127aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00127ad:	89 c7                	mov    edi,eax
c00127af:	e8 1a be 00 00       	call   c001e5ce <APICTimer::APICTimer()>
c00127b4:	6a 00                	push   0x0
c00127b6:	6a 00                	push   0x0
c00127b8:	56                   	push   esi
c00127b9:	57                   	push   edi
c00127ba:	e8 17 bd 00 00       	call   c001e4d6 <APICTimer::open(int, int, void*)>
c00127bf:	83 c4 20             	add    esp,0x20
c00127c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127c4:	6a 00                	push   0x0
c00127c6:	6a 00                	push   0x0
c00127c8:	6a 00                	push   0x0
c00127ca:	53                   	push   ebx
c00127cb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00127ce:	e8 db 18 00 00       	call   c00140ae <thisCPU()>
c00127d3:	5a                   	pop    edx
c00127d4:	59                   	pop    ecx
c00127d5:	57                   	push   edi
c00127d6:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00127dc:	e8 49 dd ff ff       	call   c001052a <Device::addChild(Device*)>
c00127e1:	83 c4 10             	add    esp,0x10
c00127e4:	eb 33                	jmp    c0012819 <setupTimer(int)+0x11b>
c00127e6:	83 ec 0c             	sub    esp,0xc
c00127e9:	68 5c 01 00 00       	push   0x15c
c00127ee:	e8 3d c8 ff ff       	call   c000f030 <operator new(unsigned long)>
c00127f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00127f6:	89 c3                	mov    ebx,eax
c00127f8:	e8 21 bf 00 00       	call   c001e71e <PIT::PIT()>
c00127fd:	58                   	pop    eax
c00127fe:	5a                   	pop    edx
c00127ff:	53                   	push   ebx
c0012800:	ff 35 88 3d 02 c0    	push   DWORD PTR ds:0xc0023d88
c0012806:	e8 1f dd ff ff       	call   c001052a <Device::addChild(Device*)>
c001280b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001280d:	6a 00                	push   0x0
c001280f:	6a 00                	push   0x0
c0012811:	56                   	push   esi
c0012812:	53                   	push   ebx
c0012813:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012816:	83 c4 20             	add    esp,0x20
c0012819:	89 d8                	mov    eax,ebx
c001281b:	5b                   	pop    ebx
c001281c:	5e                   	pop    esi
c001281d:	5f                   	pop    edi
c001281e:	c3                   	ret    
c001281f:	90                   	nop

c0012820 <VCache::VCache(PhysicalDisk*)>:
c0012820:	53                   	push   ebx
c0012821:	83 ec 08             	sub    esp,0x8
c0012824:	ba 34 18 02 c0       	mov    edx,0xc0021834
c0012829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001282d:	89 10                	mov    DWORD PTR [eax],edx
c001282f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012833:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001283a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001283e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0012845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012849:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0012850:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0012857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001285b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0012862:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0012869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001286d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0012874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012878:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001287c:	83 ec 0c             	sub    esp,0xc
c001287f:	6a 10                	push   0x10
c0012881:	e8 aa c7 ff ff       	call   c000f030 <operator new(unsigned long)>
c0012886:	83 c4 10             	add    esp,0x10
c0012889:	89 c3                	mov    ebx,eax
c001288b:	83 ec 0c             	sub    esp,0xc
c001288e:	53                   	push   ebx
c001288f:	e8 10 5a 00 00       	call   c00182a4 <Mutex::Mutex()>
c0012894:	83 c4 10             	add    esp,0x10
c0012897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001289b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001289e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00128a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00128a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128ad:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00128b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00128b8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00128be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128c2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00128c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00128c9:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00128cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128d5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00128d9:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00128dc:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00128df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128e3:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00128e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00128eb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00128f1:	c1 e0 06             	shl    eax,0x6
c00128f4:	83 ec 0c             	sub    esp,0xc
c00128f7:	50                   	push   eax
c00128f8:	e8 6d 96 ff ff       	call   c000bf6a <malloc>
c00128fd:	83 c4 10             	add    esp,0x10
c0012900:	89 c2                	mov    edx,eax
c0012902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012906:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0012909:	90                   	nop
c001290a:	83 c4 08             	add    esp,0x8
c001290d:	5b                   	pop    ebx
c001290e:	c3                   	ret    
c001290f:	90                   	nop

c0012910 <VCache::writeWriteBuffer()>:
c0012910:	53                   	push   ebx
c0012911:	83 ec 14             	sub    esp,0x14
c0012914:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012918:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001291b:	8b 10                	mov    edx,DWORD PTR [eax]
c001291d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012920:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012923:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012926:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0012929:	50                   	push   eax
c001292a:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001292d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0012934:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001293b:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001293f:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0012946:	83 c4 28             	add    esp,0x28
c0012949:	5b                   	pop    ebx
c001294a:	c3                   	ret    
c001294b:	90                   	nop

c001294c <VCache::~VCache()>:
c001294c:	83 ec 0c             	sub    esp,0xc
c001294f:	ba 34 18 02 c0       	mov    edx,0xc0021834
c0012954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012958:	89 10                	mov    DWORD PTR [eax],edx
c001295a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001295e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0012961:	84 c0                	test   al,al
c0012963:	74 0f                	je     c0012974 <VCache::~VCache()+0x28>
c0012965:	83 ec 0c             	sub    esp,0xc
c0012968:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001296c:	e8 9f ff ff ff       	call   c0012910 <VCache::writeWriteBuffer()>
c0012971:	83 c4 10             	add    esp,0x10
c0012974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012978:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001297b:	83 ec 0c             	sub    esp,0xc
c001297e:	50                   	push   eax
c001297f:	e8 f6 95 ff ff       	call   c000bf7a <free>
c0012984:	83 c4 10             	add    esp,0x10
c0012987:	90                   	nop
c0012988:	83 c4 0c             	add    esp,0xc
c001298b:	c3                   	ret    

c001298c <VCache::~VCache()>:
c001298c:	83 ec 0c             	sub    esp,0xc
c001298f:	83 ec 0c             	sub    esp,0xc
c0012992:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012996:	e8 b1 ff ff ff       	call   c001294c <VCache::~VCache()>
c001299b:	83 c4 10             	add    esp,0x10
c001299e:	83 ec 08             	sub    esp,0x8
c00129a1:	6a 30                	push   0x30
c00129a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129a7:	e8 93 c6 ff ff       	call   c000f03f <operator delete(void*, unsigned long)>
c00129ac:	83 c4 10             	add    esp,0x10
c00129af:	83 c4 0c             	add    esp,0xc
c00129b2:	c3                   	ret    
c00129b3:	90                   	nop

c00129b4 <VCache::write(unsigned long long, int, void*)>:
c00129b4:	55                   	push   ebp
c00129b5:	57                   	push   edi
c00129b6:	56                   	push   esi
c00129b7:	53                   	push   ebx
c00129b8:	83 ec 28             	sub    esp,0x28
c00129bb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00129bf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00129c3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00129c7:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00129cb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00129ce:	e8 33 5d 00 00       	call   c0018706 <Semaphore::acquire()>
c00129d3:	83 c4 10             	add    esp,0x10
c00129d6:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00129da:	74 66                	je     c0012a42 <VCache::write(unsigned long long, int, void*)+0x8e>
c00129dc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129df:	99                   	cdq    
c00129e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129e4:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00129e7:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00129ea:	89 c1                	mov    ecx,eax
c00129ec:	89 d0                	mov    eax,edx
c00129ee:	31 f1                	xor    ecx,esi
c00129f0:	31 f8                	xor    eax,edi
c00129f2:	89 ca                	mov    edx,ecx
c00129f4:	09 c2                	or     edx,eax
c00129f6:	75 3e                	jne    c0012a36 <VCache::write(unsigned long long, int, void*)+0x82>
c00129f8:	83 fd 01             	cmp    ebp,0x1
c00129fb:	75 39                	jne    c0012a36 <VCache::write(unsigned long long, int, void*)+0x82>
c00129fd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012a00:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012a06:	51                   	push   ecx
c0012a07:	50                   	push   eax
c0012a08:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012a0c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012a10:	0f af c8             	imul   ecx,eax
c0012a13:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0012a16:	51                   	push   ecx
c0012a17:	e8 b6 db fe ff       	call   c00005d2 <memcpy>
c0012a1c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a1f:	83 c4 10             	add    esp,0x10
c0012a22:	40                   	inc    eax
c0012a23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0012a26:	83 f8 40             	cmp    eax,0x40
c0012a29:	75 57                	jne    c0012a82 <VCache::write(unsigned long long, int, void*)+0xce>
c0012a2b:	83 ec 0c             	sub    esp,0xc
c0012a2e:	53                   	push   ebx
c0012a2f:	e8 dc fe ff ff       	call   c0012910 <VCache::writeWriteBuffer()>
c0012a34:	eb 34                	jmp    c0012a6a <VCache::write(unsigned long long, int, void*)+0xb6>
c0012a36:	83 ec 0c             	sub    esp,0xc
c0012a39:	53                   	push   ebx
c0012a3a:	e8 d1 fe ff ff       	call   c0012910 <VCache::writeWriteBuffer()>
c0012a3f:	83 c4 10             	add    esp,0x10
c0012a42:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012a45:	83 fd 3f             	cmp    ebp,0x3f
c0012a48:	7f 25                	jg     c0012a6f <VCache::write(unsigned long long, int, void*)+0xbb>
c0012a4a:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0012a4d:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0012a50:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0012a53:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0012a57:	52                   	push   edx
c0012a58:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0012a5e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012a62:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012a65:	e8 68 db fe ff       	call   c00005d2 <memcpy>
c0012a6a:	83 c4 10             	add    esp,0x10
c0012a6d:	eb 13                	jmp    c0012a82 <VCache::write(unsigned long long, int, void*)+0xce>
c0012a6f:	83 ec 0c             	sub    esp,0xc
c0012a72:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a74:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012a78:	55                   	push   ebp
c0012a79:	57                   	push   edi
c0012a7a:	56                   	push   esi
c0012a7b:	50                   	push   eax
c0012a7c:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0012a7f:	83 c4 20             	add    esp,0x20
c0012a82:	83 ec 0c             	sub    esp,0xc
c0012a85:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012a88:	e8 01 62 00 00       	call   c0018c8e <Semaphore::release()>
c0012a8d:	83 c4 2c             	add    esp,0x2c
c0012a90:	31 c0                	xor    eax,eax
c0012a92:	5b                   	pop    ebx
c0012a93:	5e                   	pop    esi
c0012a94:	5f                   	pop    edi
c0012a95:	5d                   	pop    ebp
c0012a96:	c3                   	ret    
c0012a97:	90                   	nop

c0012a98 <VCache::read(unsigned long long, int, void*)>:
c0012a98:	57                   	push   edi
c0012a99:	56                   	push   esi
c0012a9a:	53                   	push   ebx
c0012a9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012a9f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012aa3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012aa7:	83 ec 0c             	sub    esp,0xc
c0012aaa:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012aad:	e8 54 5c 00 00       	call   c0018706 <Semaphore::acquire()>
c0012ab2:	83 c4 10             	add    esp,0x10
c0012ab5:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0012ab9:	74 0c                	je     c0012ac7 <VCache::read(unsigned long long, int, void*)+0x2f>
c0012abb:	83 ec 0c             	sub    esp,0xc
c0012abe:	53                   	push   ebx
c0012abf:	e8 4c fe ff ff       	call   c0012910 <VCache::writeWriteBuffer()>
c0012ac4:	83 c4 10             	add    esp,0x10
c0012ac7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012aca:	83 ec 0c             	sub    esp,0xc
c0012acd:	8b 10                	mov    edx,DWORD PTR [eax]
c0012acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ad3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ad7:	57                   	push   edi
c0012ad8:	56                   	push   esi
c0012ad9:	50                   	push   eax
c0012ada:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012add:	83 c4 14             	add    esp,0x14
c0012ae0:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012ae3:	e8 a6 61 00 00       	call   c0018c8e <Semaphore::release()>
c0012ae8:	83 c4 10             	add    esp,0x10
c0012aeb:	31 c0                	xor    eax,eax
c0012aed:	5b                   	pop    ebx
c0012aee:	5e                   	pop    esi
c0012aef:	5f                   	pop    edi
c0012af0:	c3                   	ret    
c0012af1:	90                   	nop

c0012af2 <Video::putrect(int, int, int, int, unsigned int)>:
c0012af2:	55                   	push   ebp
c0012af3:	57                   	push   edi
c0012af4:	56                   	push   esi
c0012af5:	53                   	push   ebx
c0012af6:	83 ec 1c             	sub    esp,0x1c
c0012af9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012afd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012b01:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012b05:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0012b09:	01 e8                	add    eax,ebp
c0012b0b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012b0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012b13:	01 df                	add    edi,ebx
c0012b15:	39 fb                	cmp    ebx,edi
c0012b17:	7d 1b                	jge    c0012b34 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c0012b19:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0012b1d:	7d 12                	jge    c0012b31 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c0012b1f:	8b 16                	mov    edx,DWORD PTR [esi]
c0012b21:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012b25:	53                   	push   ebx
c0012b26:	55                   	push   ebp
c0012b27:	45                   	inc    ebp
c0012b28:	56                   	push   esi
c0012b29:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012b2c:	83 c4 10             	add    esp,0x10
c0012b2f:	eb e8                	jmp    c0012b19 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0012b31:	43                   	inc    ebx
c0012b32:	eb e1                	jmp    c0012b15 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0012b34:	83 c4 1c             	add    esp,0x1c
c0012b37:	5b                   	pop    ebx
c0012b38:	5e                   	pop    esi
c0012b39:	5f                   	pop    edi
c0012b3a:	5d                   	pop    ebp
c0012b3b:	c3                   	ret    

c0012b3c <Video::blit(unsigned int*, int, int, int, int)>:
c0012b3c:	55                   	push   ebp
c0012b3d:	57                   	push   edi
c0012b3e:	56                   	push   esi
c0012b3f:	53                   	push   ebx
c0012b40:	83 ec 1c             	sub    esp,0x1c
c0012b43:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012b47:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012b4b:	85 c0                	test   eax,eax
c0012b4d:	79 02                	jns    c0012b51 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0012b4f:	31 c0                	xor    eax,eax
c0012b51:	c1 e0 02             	shl    eax,0x2
c0012b54:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012b58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012b5c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012b60:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0012b64:	39 d8                	cmp    eax,ebx
c0012b66:	7e 49                	jle    c0012bb1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0012b68:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0012b6e:	7c 41                	jl     c0012bb1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0012b70:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012b74:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012b78:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012b7c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0012b80:	39 f9                	cmp    ecx,edi
c0012b82:	7e 22                	jle    c0012ba6 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0012b84:	83 c5 04             	add    ebp,0x4
c0012b87:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0012b8d:	7c 14                	jl     c0012ba3 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0012b8f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012b91:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0012b94:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012b98:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012b9c:	56                   	push   esi
c0012b9d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0012ba0:	83 c4 10             	add    esp,0x10
c0012ba3:	47                   	inc    edi
c0012ba4:	eb d2                	jmp    c0012b78 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0012ba6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012baa:	43                   	inc    ebx
c0012bab:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0012baf:	eb ab                	jmp    c0012b5c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0012bb1:	83 c4 1c             	add    esp,0x1c
c0012bb4:	5b                   	pop    ebx
c0012bb5:	5e                   	pop    esi
c0012bb6:	5f                   	pop    edi
c0012bb7:	5d                   	pop    ebp
c0012bb8:	c3                   	ret    
c0012bb9:	90                   	nop

c0012bba <Video::clearScreen(unsigned int)>:
c0012bba:	57                   	push   edi
c0012bbb:	56                   	push   esi
c0012bbc:	53                   	push   ebx
c0012bbd:	31 db                	xor    ebx,ebx
c0012bbf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012bc3:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0012bc9:	7e 1f                	jle    c0012bea <Video::clearScreen(unsigned int)+0x30>
c0012bcb:	31 ff                	xor    edi,edi
c0012bcd:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0012bd3:	7e 12                	jle    c0012be7 <Video::clearScreen(unsigned int)+0x2d>
c0012bd5:	8b 06                	mov    eax,DWORD PTR [esi]
c0012bd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012bdb:	53                   	push   ebx
c0012bdc:	57                   	push   edi
c0012bdd:	47                   	inc    edi
c0012bde:	56                   	push   esi
c0012bdf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012be2:	83 c4 10             	add    esp,0x10
c0012be5:	eb e6                	jmp    c0012bcd <Video::clearScreen(unsigned int)+0x13>
c0012be7:	43                   	inc    ebx
c0012be8:	eb d9                	jmp    c0012bc3 <Video::clearScreen(unsigned int)+0x9>
c0012bea:	5b                   	pop    ebx
c0012beb:	5e                   	pop    esi
c0012bec:	5f                   	pop    edi
c0012bed:	c3                   	ret    

c0012bee <Video::putpixel(int, int, unsigned int)>:
c0012bee:	c7 44 24 04 3c 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc002183c
c0012bf6:	e9 24 c5 ff ff       	jmp    c000f11f <Dbg::kprintf(char const*, ...)>
c0012bfb:	90                   	nop

c0012bfc <Video::Video(char const*)>:
c0012bfc:	83 ec 0c             	sub    esp,0xc
c0012bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c03:	83 ec 08             	sub    esp,0x8
c0012c06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c0a:	50                   	push   eax
c0012c0b:	e8 0a db ff ff       	call   c001071a <Device::Device(char const*)>
c0012c10:	83 c4 10             	add    esp,0x10
c0012c13:	ba 54 18 02 c0       	mov    edx,0xc0021854
c0012c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c1c:	89 10                	mov    DWORD PTR [eax],edx
c0012c1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c22:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0012c2c:	90                   	nop
c0012c2d:	83 c4 0c             	add    esp,0xc
c0012c30:	c3                   	ret    
c0012c31:	90                   	nop

c0012c32 <Video::~Video()>:
c0012c32:	83 ec 0c             	sub    esp,0xc
c0012c35:	ba 54 18 02 c0       	mov    edx,0xc0021854
c0012c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c3e:	89 10                	mov    DWORD PTR [eax],edx
c0012c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c44:	83 ec 0c             	sub    esp,0xc
c0012c47:	50                   	push   eax
c0012c48:	e8 7f d7 ff ff       	call   c00103cc <Device::~Device()>
c0012c4d:	83 c4 10             	add    esp,0x10
c0012c50:	90                   	nop
c0012c51:	83 c4 0c             	add    esp,0xc
c0012c54:	c3                   	ret    
c0012c55:	90                   	nop

c0012c56 <Video::~Video()>:
c0012c56:	83 ec 0c             	sub    esp,0xc
c0012c59:	83 ec 0c             	sub    esp,0xc
c0012c5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c60:	e8 cd ff ff ff       	call   c0012c32 <Video::~Video()>
c0012c65:	83 c4 10             	add    esp,0x10
c0012c68:	83 ec 08             	sub    esp,0x8
c0012c6b:	68 64 01 00 00       	push   0x164
c0012c70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c74:	e8 c6 c3 ff ff       	call   c000f03f <operator delete(void*, unsigned long)>
c0012c79:	83 c4 10             	add    esp,0x10
c0012c7c:	83 c4 0c             	add    esp,0xc
c0012c7f:	c3                   	ret    

c0012c80 <Video::isMonochrome()>:
c0012c80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c84:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0012c8a:	c3                   	ret    
c0012c8b:	90                   	nop

c0012c8c <Video::getWidth()>:
c0012c8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c90:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012c96:	c3                   	ret    
c0012c97:	90                   	nop

c0012c98 <Video::getHeight()>:
c0012c98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c9c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012ca2:	c3                   	ret    
c0012ca3:	90                   	nop

c0012ca4 <Video::drawCursor(int, int, unsigned char*, int)>:
c0012ca4:	55                   	push   ebp
c0012ca5:	57                   	push   edi
c0012ca6:	56                   	push   esi
c0012ca7:	53                   	push   ebx
c0012ca8:	83 ec 2c             	sub    esp,0x2c
c0012cab:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012caf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0012cb3:	83 f8 01             	cmp    eax,0x1
c0012cb6:	19 c9                	sbb    ecx,ecx
c0012cb8:	31 db                	xor    ebx,ebx
c0012cba:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0012cbe:	89 cd                	mov    ebp,ecx
c0012cc0:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0012cc8:	f7 d5                	not    ebp
c0012cca:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0012cd0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0012cd4:	01 d8                	add    eax,ebx
c0012cd6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012cda:	56                   	push   esi
c0012cdb:	e8 b8 ff ff ff       	call   c0012c98 <Video::getHeight()>
c0012ce0:	59                   	pop    ecx
c0012ce1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012ce5:	7e 70                	jle    c0012d57 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0012ce7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012ceb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012cef:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0012cf2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012cf6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012cfa:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0012d01:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012d05:	89 f8                	mov    eax,edi
c0012d07:	83 c0 20             	add    eax,0x20
c0012d0a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012d0e:	56                   	push   esi
c0012d0f:	e8 78 ff ff ff       	call   c0012c8c <Video::getWidth()>
c0012d14:	5a                   	pop    edx
c0012d15:	39 c7                	cmp    edi,eax
c0012d17:	7d 34                	jge    c0012d4d <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0012d19:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0012d1e:	74 05                	je     c0012d25 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0012d20:	8b 06                	mov    eax,DWORD PTR [esi]
c0012d22:	55                   	push   ebp
c0012d23:	eb 0d                	jmp    c0012d32 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0012d25:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0012d2a:	74 12                	je     c0012d3e <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0012d2c:	8b 06                	mov    eax,DWORD PTR [esi]
c0012d2e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d32:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012d36:	57                   	push   edi
c0012d37:	56                   	push   esi
c0012d38:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012d3b:	83 c4 10             	add    esp,0x10
c0012d3e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0012d42:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0012d46:	47                   	inc    edi
c0012d47:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0012d4b:	75 c1                	jne    c0012d0e <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0012d4d:	43                   	inc    ebx
c0012d4e:	83 fb 20             	cmp    ebx,0x20
c0012d51:	0f 85 79 ff ff ff    	jne    c0012cd0 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0012d57:	83 c4 2c             	add    esp,0x2c
c0012d5a:	5b                   	pop    ebx
c0012d5b:	5e                   	pop    esi
c0012d5c:	5f                   	pop    edi
c0012d5d:	5d                   	pop    ebp
c0012d5e:	c3                   	ret    
c0012d5f:	90                   	nop

c0012d60 <ACPI::close(int, int, void*)>:
c0012d60:	83 ec 1c             	sub    esp,0x1c
c0012d63:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0012d6b:	74 0a                	je     c0012d77 <ACPI::close(int, int, void*)+0x17>
c0012d6d:	b8 00 00 00 00       	mov    eax,0x0
c0012d72:	e9 9a 00 00 00       	jmp    c0012e11 <ACPI::close(int, int, void*)+0xb1>
c0012d77:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0012d7c:	75 37                	jne    c0012db5 <ACPI::close(int, int, void*)+0x55>
c0012d7e:	83 ec 0c             	sub    esp,0xc
c0012d81:	68 8c 18 02 c0       	push   0xc002188c
c0012d86:	e8 94 c3 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0012d8b:	83 c4 10             	add    esp,0x10
c0012d8e:	a1 08 44 02 c0       	mov    eax,ds:0xc0024408
c0012d93:	85 c0                	test   eax,eax
c0012d95:	74 07                	je     c0012d9e <ACPI::close(int, int, void*)+0x3e>
c0012d97:	a1 08 44 02 c0       	mov    eax,ds:0xc0024408
c0012d9c:	ff d0                	call   eax
c0012d9e:	83 ec 0c             	sub    esp,0xc
c0012da1:	68 60 19 02 c0       	push   0xc0021960
c0012da6:	e8 73 24 00 00       	call   c001521e <Krnl::panic(char const*)>
c0012dab:	83 c4 10             	add    esp,0x10
c0012dae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012db3:	eb 5c                	jmp    c0012e11 <ACPI::close(int, int, void*)+0xb1>
c0012db5:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0012dba:	75 50                	jne    c0012e0c <ACPI::close(int, int, void*)+0xac>
c0012dbc:	a1 04 44 02 c0       	mov    eax,ds:0xc0024404
c0012dc1:	85 c0                	test   eax,eax
c0012dc3:	74 07                	je     c0012dcc <ACPI::close(int, int, void*)+0x6c>
c0012dc5:	a1 04 44 02 c0       	mov    eax,ds:0xc0024404
c0012dca:	ff d0                	call   eax
c0012dcc:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0012dd1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0012dd6:	83 e0 02             	and    eax,0x2
c0012dd9:	74 1c                	je     c0012df7 <ACPI::close(int, int, void*)+0x97>
c0012ddb:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0012de2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012de6:	89 c2                	mov    edx,eax
c0012de8:	ec                   	in     al,dx
c0012de9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012ded:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0012df1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012df5:	eb da                	jmp    c0012dd1 <ACPI::close(int, int, void*)+0x71>
c0012df7:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0012dfe:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0012e03:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0012e07:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012e0b:	ee                   	out    dx,al
c0012e0c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012e11:	83 c4 1c             	add    esp,0x1c
c0012e14:	c3                   	ret    

c0012e15 <findRSDP()>:
c0012e15:	83 ec 1c             	sub    esp,0x1c
c0012e18:	a1 88 3d 02 c0       	mov    eax,ds:0xc0023d88
c0012e1d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012e23:	83 e0 04             	and    eax,0x4
c0012e26:	84 c0                	test   al,al
c0012e28:	75 07                	jne    c0012e31 <findRSDP()+0x1c>
c0012e2a:	b8 00 00 00 00       	mov    eax,0x0
c0012e2f:	eb 6a                	jmp    c0012e9b <findRSDP()+0x86>
c0012e31:	a1 d0 3d 02 c0       	mov    eax,ds:0xc0023dd0
c0012e36:	3d ff 07 00 00       	cmp    eax,0x7ff
c0012e3b:	7f 1b                	jg     c0012e58 <findRSDP()+0x43>
c0012e3d:	a1 88 3d 02 c0       	mov    eax,ds:0xc0023d88
c0012e42:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012e48:	83 e2 fb             	and    edx,0xfffffffb
c0012e4b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012e51:	b8 00 00 00 00       	mov    eax,0x0
c0012e56:	eb 43                	jmp    c0012e9b <findRSDP()+0x86>
c0012e58:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0012e60:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0012e68:	77 2c                	ja     c0012e96 <findRSDP()+0x81>
c0012e6a:	83 ec 04             	sub    esp,0x4
c0012e6d:	6a 08                	push   0x8
c0012e6f:	68 99 18 02 c0       	push   0xc0021899
c0012e74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e78:	e8 f2 d6 fe ff       	call   c000056f <memcmp>
c0012e7d:	83 c4 10             	add    esp,0x10
c0012e80:	85 c0                	test   eax,eax
c0012e82:	0f 94 c0             	sete   al
c0012e85:	84 c0                	test   al,al
c0012e87:	74 06                	je     c0012e8f <findRSDP()+0x7a>
c0012e89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012e8d:	eb 0c                	jmp    c0012e9b <findRSDP()+0x86>
c0012e8f:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0012e94:	eb ca                	jmp    c0012e60 <findRSDP()+0x4b>
c0012e96:	b8 00 00 00 00       	mov    eax,0x0
c0012e9b:	83 c4 1c             	add    esp,0x1c
c0012e9e:	c3                   	ret    

c0012e9f <loadACPITables(unsigned char*)>:
c0012e9f:	56                   	push   esi
c0012ea0:	53                   	push   ebx
c0012ea1:	83 ec 44             	sub    esp,0x44
c0012ea4:	a1 88 3d 02 c0       	mov    eax,ds:0xc0023d88
c0012ea9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012eaf:	83 e0 04             	and    eax,0x4
c0012eb2:	84 c0                	test   al,al
c0012eb4:	0f 84 05 02 00 00    	je     c00130bf <loadACPITables(unsigned char*)+0x220>
c0012eba:	a0 20 46 02 c0       	mov    al,ds:0xc0024620
c0012ebf:	84 c0                	test   al,al
c0012ec1:	74 75                	je     c0012f38 <loadACPITables(unsigned char*)+0x99>
c0012ec3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012ec7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012ecb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ecf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ed2:	83 e8 24             	sub    eax,0x24
c0012ed5:	c1 e8 03             	shr    eax,0x3
c0012ed8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012edc:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0012ee4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012ee8:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0012eec:	0f 8d b2 00 00 00    	jge    c0012fa4 <loadACPITables(unsigned char*)+0x105>
c0012ef2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012ef6:	83 c0 24             	add    eax,0x24
c0012ef9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012efd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012f01:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012f05:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012f09:	c1 e0 03             	shl    eax,0x3
c0012f0c:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0012f10:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012f14:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012f17:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f19:	89 c1                	mov    ecx,eax
c0012f1b:	a1 0c 44 02 c0       	mov    eax,ds:0xc002440c
c0012f20:	8d 50 01             	lea    edx,[eax+0x1]
c0012f23:	89 15 0c 44 02 c0    	mov    DWORD PTR ds:0xc002440c,edx
c0012f29:	89 ca                	mov    edx,ecx
c0012f2b:	89 14 c5 24 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbbdc],edx
c0012f32:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0012f36:	eb ac                	jmp    c0012ee4 <loadACPITables(unsigned char*)+0x45>
c0012f38:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012f3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012f40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012f44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f47:	83 e8 24             	sub    eax,0x24
c0012f4a:	c1 e8 02             	shr    eax,0x2
c0012f4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012f51:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0012f59:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012f5d:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0012f61:	7d 41                	jge    c0012fa4 <loadACPITables(unsigned char*)+0x105>
c0012f63:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012f67:	83 c0 24             	add    eax,0x24
c0012f6a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012f6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012f72:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012f76:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012f7a:	c1 e0 02             	shl    eax,0x2
c0012f7d:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0012f81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f85:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f87:	a1 0c 44 02 c0       	mov    eax,ds:0xc002440c
c0012f8c:	8d 50 01             	lea    edx,[eax+0x1]
c0012f8f:	89 15 0c 44 02 c0    	mov    DWORD PTR ds:0xc002440c,edx
c0012f95:	89 ca                	mov    edx,ecx
c0012f97:	89 14 c5 24 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbbdc],edx
c0012f9e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0012fa2:	eb b5                	jmp    c0012f59 <loadACPITables(unsigned char*)+0xba>
c0012fa4:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0012fac:	a1 0c 44 02 c0       	mov    eax,ds:0xc002440c
c0012fb1:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0012fb5:	0f 8d 05 01 00 00    	jge    c00130c0 <loadACPITables(unsigned char*)+0x221>
c0012fbb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012fbf:	8b 04 c5 24 44 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdbbdc]
c0012fc6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012fca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012fd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fd6:	25 ff 0f 00 00       	and    eax,0xfff
c0012fdb:	89 c6                	mov    esi,eax
c0012fdd:	e8 fb b2 ff ff       	call   c000e2dd <Virt::getAKernelVAS()>
c0012fe2:	89 c3                	mov    ebx,eax
c0012fe4:	83 ec 0c             	sub    esp,0xc
c0012fe7:	6a 01                	push   0x1
c0012fe9:	e8 5f b1 ff ff       	call   c000e14d <Virt::allocateKernelVirtualPages(int)>
c0012fee:	83 c4 10             	add    esp,0x10
c0012ff1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012ff5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012ffb:	83 ec 0c             	sub    esp,0xc
c0012ffe:	6a 01                	push   0x1
c0013000:	6a 01                	push   0x1
c0013002:	50                   	push   eax
c0013003:	52                   	push   edx
c0013004:	53                   	push   ebx
c0013005:	e8 02 bb ff ff       	call   c000eb0c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001300a:	83 c4 20             	add    esp,0x20
c001300d:	09 f0                	or     eax,esi
c001300f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013013:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013017:	c1 e0 03             	shl    eax,0x3
c001301a:	05 20 44 02 c0       	add    eax,0xc0024420
c001301f:	83 ec 04             	sub    esp,0x4
c0013022:	6a 04                	push   0x4
c0013024:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013028:	50                   	push   eax
c0013029:	e8 a4 d5 fe ff       	call   c00005d2 <memcpy>
c001302e:	83 c4 10             	add    esp,0x10
c0013031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013035:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013038:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001303c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013040:	05 00 10 00 00       	add    eax,0x1000
c0013045:	c1 e8 0c             	shr    eax,0xc
c0013048:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001304c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013050:	89 04 24             	mov    DWORD PTR [esp],eax
c0013053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013057:	25 ff 0f 00 00       	and    eax,0xfff
c001305c:	89 c6                	mov    esi,eax
c001305e:	e8 7a b2 ff ff       	call   c000e2dd <Virt::getAKernelVAS()>
c0013063:	89 c3                	mov    ebx,eax
c0013065:	83 ec 0c             	sub    esp,0xc
c0013068:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001306c:	e8 dc b0 ff ff       	call   c000e14d <Virt::allocateKernelVirtualPages(int)>
c0013071:	83 c4 10             	add    esp,0x10
c0013074:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013078:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001307e:	83 ec 0c             	sub    esp,0xc
c0013081:	6a 01                	push   0x1
c0013083:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013087:	50                   	push   eax
c0013088:	52                   	push   edx
c0013089:	53                   	push   ebx
c001308a:	e8 7d ba ff ff       	call   c000eb0c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001308f:	83 c4 20             	add    esp,0x20
c0013092:	09 f0                	or     eax,esi
c0013094:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013098:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001309b:	83 ec 0c             	sub    esp,0xc
c001309e:	50                   	push   eax
c001309f:	e8 03 b4 ff ff       	call   c000e4a7 <Virt::freeKernelVirtualPages(unsigned long)>
c00130a4:	83 c4 10             	add    esp,0x10
c00130a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00130ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130af:	89 14 c5 24 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbbdc],edx
c00130b6:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c00130ba:	e9 ed fe ff ff       	jmp    c0012fac <loadACPITables(unsigned char*)+0x10d>
c00130bf:	90                   	nop
c00130c0:	83 c4 44             	add    esp,0x44
c00130c3:	5b                   	pop    ebx
c00130c4:	5e                   	pop    esi
c00130c5:	c3                   	ret    

c00130c6 <findRSDT(unsigned char*)>:
c00130c6:	56                   	push   esi
c00130c7:	53                   	push   ebx
c00130c8:	83 ec 44             	sub    esp,0x44
c00130cb:	a1 88 3d 02 c0       	mov    eax,ds:0xc0023d88
c00130d0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00130d6:	83 e0 04             	and    eax,0x4
c00130d9:	84 c0                	test   al,al
c00130db:	75 0a                	jne    c00130e7 <findRSDT(unsigned char*)+0x21>
c00130dd:	b8 00 00 00 00       	mov    eax,0x0
c00130e2:	e9 f7 00 00 00       	jmp    c00131de <findRSDT(unsigned char*)+0x118>
c00130e7:	83 ec 04             	sub    esp,0x4
c00130ea:	6a 24                	push   0x24
c00130ec:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00130f0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00130f4:	50                   	push   eax
c00130f5:	e8 d8 d4 fe ff       	call   c00005d2 <memcpy>
c00130fa:	83 c4 10             	add    esp,0x10
c00130fd:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0013101:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0013105:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001310d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013111:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013115:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0013119:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001311d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013121:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013125:	25 ff 0f 00 00       	and    eax,0xfff
c001312a:	89 c6                	mov    esi,eax
c001312c:	e8 ac b1 ff ff       	call   c000e2dd <Virt::getAKernelVAS()>
c0013131:	89 c3                	mov    ebx,eax
c0013133:	83 ec 0c             	sub    esp,0xc
c0013136:	6a 02                	push   0x2
c0013138:	e8 10 b0 ff ff       	call   c000e14d <Virt::allocateKernelVirtualPages(int)>
c001313d:	83 c4 10             	add    esp,0x10
c0013140:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013144:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001314a:	83 ec 0c             	sub    esp,0xc
c001314d:	6a 01                	push   0x1
c001314f:	6a 02                	push   0x2
c0013151:	50                   	push   eax
c0013152:	52                   	push   edx
c0013153:	53                   	push   ebx
c0013154:	e8 b3 b9 ff ff       	call   c000eb0c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013159:	83 c4 20             	add    esp,0x20
c001315c:	09 f0                	or     eax,esi
c001315e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0013162:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013166:	25 ff 0f 00 00       	and    eax,0xfff
c001316b:	89 c6                	mov    esi,eax
c001316d:	e8 6b b1 ff ff       	call   c000e2dd <Virt::getAKernelVAS()>
c0013172:	89 c3                	mov    ebx,eax
c0013174:	83 ec 0c             	sub    esp,0xc
c0013177:	6a 02                	push   0x2
c0013179:	e8 cf af ff ff       	call   c000e14d <Virt::allocateKernelVirtualPages(int)>
c001317e:	83 c4 10             	add    esp,0x10
c0013181:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013185:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001318b:	83 ec 0c             	sub    esp,0xc
c001318e:	6a 01                	push   0x1
c0013190:	6a 02                	push   0x2
c0013192:	50                   	push   eax
c0013193:	52                   	push   edx
c0013194:	53                   	push   ebx
c0013195:	e8 72 b9 ff ff       	call   c000eb0c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001319a:	83 c4 20             	add    esp,0x20
c001319d:	09 f0                	or     eax,esi
c001319f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00131a3:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00131a8:	75 11                	jne    c00131bb <findRSDT(unsigned char*)+0xf5>
c00131aa:	c6 05 20 46 02 c0 00 	mov    BYTE PTR ds:0xc0024620,0x0
c00131b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00131b5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00131b9:	eb 1f                	jmp    c00131da <findRSDT(unsigned char*)+0x114>
c00131bb:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c00131c0:	75 11                	jne    c00131d3 <findRSDT(unsigned char*)+0x10d>
c00131c2:	c6 05 20 46 02 c0 01 	mov    BYTE PTR ds:0xc0024620,0x1
c00131c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00131cd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00131d1:	eb 07                	jmp    c00131da <findRSDT(unsigned char*)+0x114>
c00131d3:	b8 00 00 00 00       	mov    eax,0x0
c00131d8:	eb 04                	jmp    c00131de <findRSDT(unsigned char*)+0x118>
c00131da:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00131de:	83 c4 44             	add    esp,0x44
c00131e1:	5b                   	pop    ebx
c00131e2:	5e                   	pop    esi
c00131e3:	c3                   	ret    

c00131e4 <findDataTable(unsigned char*, char*)>:
c00131e4:	83 ec 1c             	sub    esp,0x1c
c00131e7:	a1 88 3d 02 c0       	mov    eax,ds:0xc0023d88
c00131ec:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00131f2:	83 e0 04             	and    eax,0x4
c00131f5:	84 c0                	test   al,al
c00131f7:	75 07                	jne    c0013200 <findDataTable(unsigned char*, char*)+0x1c>
c00131f9:	b8 00 00 00 00       	mov    eax,0x0
c00131fe:	eb 7c                	jmp    c001327c <findDataTable(unsigned char*, char*)+0x98>
c0013200:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013208:	a1 0c 44 02 c0       	mov    eax,ds:0xc002440c
c001320d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0013211:	7d 3a                	jge    c001324d <findDataTable(unsigned char*, char*)+0x69>
c0013213:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013217:	c1 e0 03             	shl    eax,0x3
c001321a:	05 20 44 02 c0       	add    eax,0xc0024420
c001321f:	83 ec 04             	sub    esp,0x4
c0013222:	6a 04                	push   0x4
c0013224:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013228:	50                   	push   eax
c0013229:	e8 41 d3 fe ff       	call   c000056f <memcmp>
c001322e:	83 c4 10             	add    esp,0x10
c0013231:	85 c0                	test   eax,eax
c0013233:	0f 94 c0             	sete   al
c0013236:	84 c0                	test   al,al
c0013238:	74 0d                	je     c0013247 <findDataTable(unsigned char*, char*)+0x63>
c001323a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001323e:	8b 04 c5 24 44 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdbbdc]
c0013245:	eb 35                	jmp    c001327c <findDataTable(unsigned char*, char*)+0x98>
c0013247:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001324b:	eb bb                	jmp    c0013208 <findDataTable(unsigned char*, char*)+0x24>
c001324d:	a0 20 46 02 c0       	mov    al,ds:0xc0024620
c0013252:	84 c0                	test   al,al
c0013254:	74 07                	je     c001325d <findDataTable(unsigned char*, char*)+0x79>
c0013256:	b8 58 00 00 00       	mov    eax,0x58
c001325b:	eb 05                	jmp    c0013262 <findDataTable(unsigned char*, char*)+0x7e>
c001325d:	b8 52 00 00 00       	mov    eax,0x52
c0013262:	83 ec 04             	sub    esp,0x4
c0013265:	50                   	push   eax
c0013266:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001326a:	68 84 19 02 c0       	push   0xc0021984
c001326f:	e8 ab be ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0013274:	83 c4 10             	add    esp,0x10
c0013277:	b8 00 00 00 00       	mov    eax,0x0
c001327c:	83 c4 1c             	add    esp,0x1c
c001327f:	c3                   	ret    

c0013280 <scanMADT()>:
c0013280:	83 ec 2c             	sub    esp,0x2c
c0013283:	a1 88 3d 02 c0       	mov    eax,ds:0xc0023d88
c0013288:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001328e:	83 e0 04             	and    eax,0x4
c0013291:	84 c0                	test   al,al
c0013293:	0f 84 73 03 00 00    	je     c001360c <scanMADT()+0x38c>
c0013299:	e8 77 fb ff ff       	call   c0012e15 <findRSDP()>
c001329e:	a3 2c 46 02 c0       	mov    ds:0xc002462c,eax
c00132a3:	a1 2c 46 02 c0       	mov    eax,ds:0xc002462c
c00132a8:	85 c0                	test   eax,eax
c00132aa:	75 19                	jne    c00132c5 <scanMADT()+0x45>
c00132ac:	a1 88 3d 02 c0       	mov    eax,ds:0xc0023d88
c00132b1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00132b7:	83 e2 fb             	and    edx,0xfffffffb
c00132ba:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00132c0:	e9 4b 03 00 00       	jmp    c0013610 <scanMADT()+0x390>
c00132c5:	a1 2c 46 02 c0       	mov    eax,ds:0xc002462c
c00132ca:	83 ec 0c             	sub    esp,0xc
c00132cd:	50                   	push   eax
c00132ce:	e8 f3 fd ff ff       	call   c00130c6 <findRSDT(unsigned char*)>
c00132d3:	83 c4 10             	add    esp,0x10
c00132d6:	a3 28 46 02 c0       	mov    ds:0xc0024628,eax
c00132db:	a1 28 46 02 c0       	mov    eax,ds:0xc0024628
c00132e0:	85 c0                	test   eax,eax
c00132e2:	75 19                	jne    c00132fd <scanMADT()+0x7d>
c00132e4:	a1 88 3d 02 c0       	mov    eax,ds:0xc0023d88
c00132e9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00132ef:	83 e2 fb             	and    edx,0xfffffffb
c00132f2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00132f8:	e9 13 03 00 00       	jmp    c0013610 <scanMADT()+0x390>
c00132fd:	a1 28 46 02 c0       	mov    eax,ds:0xc0024628
c0013302:	83 ec 0c             	sub    esp,0xc
c0013305:	50                   	push   eax
c0013306:	e8 94 fb ff ff       	call   c0012e9f <loadACPITables(unsigned char*)>
c001330b:	83 c4 10             	add    esp,0x10
c001330e:	a1 28 46 02 c0       	mov    eax,ds:0xc0024628
c0013313:	83 ec 08             	sub    esp,0x8
c0013316:	68 a2 18 02 c0       	push   0xc00218a2
c001331b:	50                   	push   eax
c001331c:	e8 c3 fe ff ff       	call   c00131e4 <findDataTable(unsigned char*, char*)>
c0013321:	83 c4 10             	add    esp,0x10
c0013324:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013328:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001332d:	75 19                	jne    c0013348 <scanMADT()+0xc8>
c001332f:	a1 88 3d 02 c0       	mov    eax,ds:0xc0023d88
c0013334:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001333a:	83 e2 fe             	and    edx,0xfffffffe
c001333d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013343:	e9 c8 02 00 00       	jmp    c0013610 <scanMADT()+0x390>
c0013348:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013350:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013354:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013357:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001335b:	0f 87 af 02 00 00    	ja     c0013610 <scanMADT()+0x390>
c0013361:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0013369:	0f 87 a1 02 00 00    	ja     c0013610 <scanMADT()+0x390>
c001336f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013373:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013377:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001337b:	8d 50 01             	lea    edx,[eax+0x1]
c001337e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013382:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013386:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001338a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001338e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013392:	8d 50 01             	lea    edx,[eax+0x1]
c0013395:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013399:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001339d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00133a1:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c00133a5:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c00133aa:	0f 86 5f 02 00 00    	jbe    c001360f <scanMADT()+0x38f>
c00133b0:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00133b5:	75 57                	jne    c001340e <scanMADT()+0x18e>
c00133b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133bb:	8d 50 01             	lea    edx,[eax+0x1]
c00133be:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00133c2:	8a 15 60 47 02 c0    	mov    dl,BYTE PTR ds:0xc0024760
c00133c8:	0f b6 d2             	movzx  edx,dl
c00133cb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00133cf:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00133d3:	88 82 a0 47 02 c0    	mov    BYTE PTR [edx-0x3ffdb860],al
c00133d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133dd:	8d 50 01             	lea    edx,[eax+0x1]
c00133e0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00133e4:	8a 15 60 47 02 c0    	mov    dl,BYTE PTR ds:0xc0024760
c00133ea:	8d 4a 01             	lea    ecx,[edx+0x1]
c00133ed:	88 0d 60 47 02 c0    	mov    BYTE PTR ds:0xc0024760,cl
c00133f3:	0f b6 d2             	movzx  edx,dl
c00133f6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00133fa:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00133fe:	88 82 80 47 02 c0    	mov    BYTE PTR [edx-0x3ffdb880],al
c0013404:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013409:	e9 ea 01 00 00       	jmp    c00135f8 <scanMADT()+0x378>
c001340e:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0013413:	0f 85 14 01 00 00    	jne    c001352d <scanMADT()+0x2ad>
c0013419:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001341d:	8d 50 01             	lea    edx,[eax+0x1]
c0013420:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013424:	8a 15 30 46 02 c0    	mov    dl,BYTE PTR ds:0xc0024630
c001342a:	0f b6 d2             	movzx  edx,dl
c001342d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013431:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013435:	88 82 40 46 02 c0    	mov    BYTE PTR [edx-0x3ffdb9c0],al
c001343b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001343f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013443:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013447:	01 d0                	add    eax,edx
c0013449:	83 c0 2c             	add    eax,0x2c
c001344c:	8a 00                	mov    al,BYTE PTR [eax]
c001344e:	0f b6 d0             	movzx  edx,al
c0013451:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013455:	8d 48 01             	lea    ecx,[eax+0x1]
c0013458:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001345c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013460:	0f b6 c0             	movzx  eax,al
c0013463:	c1 e0 08             	shl    eax,0x8
c0013466:	89 d1                	mov    ecx,edx
c0013468:	09 c1                	or     ecx,eax
c001346a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001346e:	8d 50 02             	lea    edx,[eax+0x2]
c0013471:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013475:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013479:	0f b6 c0             	movzx  eax,al
c001347c:	c1 e0 10             	shl    eax,0x10
c001347f:	09 c1                	or     ecx,eax
c0013481:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013485:	8d 50 03             	lea    edx,[eax+0x3]
c0013488:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001348c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013490:	0f b6 c0             	movzx  eax,al
c0013493:	c1 e0 18             	shl    eax,0x18
c0013496:	09 c1                	or     ecx,eax
c0013498:	89 ca                	mov    edx,ecx
c001349a:	a0 30 46 02 c0       	mov    al,ds:0xc0024630
c001349f:	0f b6 c0             	movzx  eax,al
c00134a2:	89 14 85 60 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb9a0],edx
c00134a9:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00134ae:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00134b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134b6:	01 d0                	add    eax,edx
c00134b8:	83 c0 2c             	add    eax,0x2c
c00134bb:	8a 00                	mov    al,BYTE PTR [eax]
c00134bd:	0f b6 d0             	movzx  edx,al
c00134c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134c4:	8d 48 01             	lea    ecx,[eax+0x1]
c00134c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134cb:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00134cf:	0f b6 c0             	movzx  eax,al
c00134d2:	c1 e0 08             	shl    eax,0x8
c00134d5:	89 d1                	mov    ecx,edx
c00134d7:	09 c1                	or     ecx,eax
c00134d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134dd:	8d 50 02             	lea    edx,[eax+0x2]
c00134e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134e4:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00134e8:	0f b6 c0             	movzx  eax,al
c00134eb:	c1 e0 10             	shl    eax,0x10
c00134ee:	09 c1                	or     ecx,eax
c00134f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134f4:	8d 50 03             	lea    edx,[eax+0x3]
c00134f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134fb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00134ff:	0f b6 c0             	movzx  eax,al
c0013502:	c1 e0 18             	shl    eax,0x18
c0013505:	09 c1                	or     ecx,eax
c0013507:	89 ca                	mov    edx,ecx
c0013509:	a0 30 46 02 c0       	mov    al,ds:0xc0024630
c001350e:	0f b6 c0             	movzx  eax,al
c0013511:	89 14 85 e0 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb920],edx
c0013518:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c001351d:	a0 30 46 02 c0       	mov    al,ds:0xc0024630
c0013522:	40                   	inc    eax
c0013523:	a2 30 46 02 c0       	mov    ds:0xc0024630,al
c0013528:	e9 cb 00 00 00       	jmp    c00135f8 <scanMADT()+0x378>
c001352d:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0013532:	0f 85 a6 00 00 00    	jne    c00135de <scanMADT()+0x35e>
c0013538:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001353c:	8d 50 01             	lea    edx,[eax+0x1]
c001353f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013543:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013547:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001354b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001354f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013553:	8d 50 01             	lea    edx,[eax+0x1]
c0013556:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001355a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001355e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013562:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013566:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001356a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001356e:	01 d0                	add    eax,edx
c0013570:	83 c0 2c             	add    eax,0x2c
c0013573:	8a 00                	mov    al,BYTE PTR [eax]
c0013575:	0f b6 d0             	movzx  edx,al
c0013578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001357c:	8d 48 01             	lea    ecx,[eax+0x1]
c001357f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013583:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013587:	0f b6 c0             	movzx  eax,al
c001358a:	c1 e0 08             	shl    eax,0x8
c001358d:	89 d1                	mov    ecx,edx
c001358f:	09 c1                	or     ecx,eax
c0013591:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013595:	8d 50 02             	lea    edx,[eax+0x2]
c0013598:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001359c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00135a0:	0f b6 c0             	movzx  eax,al
c00135a3:	c1 e0 10             	shl    eax,0x10
c00135a6:	09 c1                	or     ecx,eax
c00135a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135ac:	8d 50 03             	lea    edx,[eax+0x3]
c00135af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00135b3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00135b7:	0f b6 c0             	movzx  eax,al
c00135ba:	c1 e0 18             	shl    eax,0x18
c00135bd:	09 c8                	or     eax,ecx
c00135bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00135c3:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00135c8:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c00135cd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00135d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00135d6:	88 90 e0 34 02 c0    	mov    BYTE PTR [eax-0x3ffdcb20],dl
c00135dc:	eb 1a                	jmp    c00135f8 <scanMADT()+0x378>
c00135de:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c00135e3:	75 07                	jne    c00135ec <scanMADT()+0x36c>
c00135e5:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00135ea:	eb 0c                	jmp    c00135f8 <scanMADT()+0x378>
c00135ec:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c00135f1:	75 05                	jne    c00135f8 <scanMADT()+0x378>
c00135f3:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c00135f8:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c00135fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013601:	01 d0                	add    eax,edx
c0013603:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013607:	e9 44 fd ff ff       	jmp    c0013350 <scanMADT()+0xd0>
c001360c:	90                   	nop
c001360d:	eb 01                	jmp    c0013610 <scanMADT()+0x390>
c001360f:	90                   	nop
c0013610:	83 c4 2c             	add    esp,0x2c
c0013613:	c3                   	ret    

c0013614 <ACPI::ACPI()>:
c0013614:	83 ec 0c             	sub    esp,0xc
c0013617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001361b:	83 ec 08             	sub    esp,0x8
c001361e:	68 a7 18 02 c0       	push   0xc00218a7
c0013623:	50                   	push   eax
c0013624:	e8 f1 d0 ff ff       	call   c001071a <Device::Device(char const*)>
c0013629:	83 c4 10             	add    esp,0x10
c001362c:	ba 50 1a 02 c0       	mov    edx,0xc0021a50
c0013631:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013635:	89 10                	mov    DWORD PTR [eax],edx
c0013637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001363b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0013642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013646:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0013650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013654:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c001365e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013662:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0013669:	e8 12 fc ff ff       	call   c0013280 <scanMADT()>
c001366e:	90                   	nop
c001366f:	83 c4 0c             	add    esp,0xc
c0013672:	c3                   	ret    
c0013673:	90                   	nop

c0013674 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0013674:	83 ec 2c             	sub    esp,0x2c
c0013677:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001367b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001367f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013683:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013687:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001368c:	88 d0                	mov    al,dl
c001368e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013692:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0013697:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001369f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00136a3:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00136a9:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00136ad:	0f 8d 97 00 00 00    	jge    c001374a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00136b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00136b7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00136bb:	83 c2 2a             	add    edx,0x2a
c00136be:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00136c2:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00136c7:	75 78                	jne    c0013741 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00136c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00136cd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00136d1:	83 c2 2a             	add    edx,0x2a
c00136d4:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00136d8:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00136dc:	75 63                	jne    c0013741 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00136de:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00136e3:	74 3a                	je     c001371f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00136e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00136e9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00136ed:	83 c2 2a             	add    edx,0x2a
c00136f0:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00136f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00136fb:	39 c2                	cmp    edx,eax
c00136fd:	74 10                	je     c001370f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00136ff:	83 ec 0c             	sub    esp,0xc
c0013702:	68 b4 19 02 c0       	push   0xc00219b4
c0013707:	e8 12 1b 00 00       	call   c001521e <Krnl::panic(char const*)>
c001370c:	83 c4 10             	add    esp,0x10
c001370f:	83 ec 0c             	sub    esp,0xc
c0013712:	68 ac 18 02 c0       	push   0xc00218ac
c0013717:	e8 02 1b 00 00       	call   c001521e <Krnl::panic(char const*)>
c001371c:	83 c4 10             	add    esp,0x10
c001371f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013723:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013727:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001372b:	83 c2 2a             	add    edx,0x2a
c001372e:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0013732:	8b 02                	mov    eax,DWORD PTR [edx]
c0013734:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0013737:	89 01                	mov    DWORD PTR [ecx],eax
c0013739:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001373c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0013741:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0013745:	e9 55 ff ff ff       	jmp    c001369f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001374a:	90                   	nop
c001374b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001374f:	83 c4 2c             	add    esp,0x2c
c0013752:	c2 04 00             	ret    0x4
c0013755:	90                   	nop

c0013756 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0013756:	56                   	push   esi
c0013757:	53                   	push   ebx
c0013758:	83 ec 14             	sub    esp,0x14
c001375b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001375f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013763:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013767:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001376c:	88 c8                	mov    al,cl
c001376e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013772:	88 d0                	mov    al,dl
c0013774:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013778:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001377c:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0013782:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013786:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c001378c:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0013791:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0013796:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001379b:	83 ec 04             	sub    esp,0x4
c001379e:	56                   	push   esi
c001379f:	53                   	push   ebx
c00137a0:	51                   	push   ecx
c00137a1:	52                   	push   edx
c00137a2:	50                   	push   eax
c00137a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00137a7:	68 e4 19 02 c0       	push   0xc00219e4
c00137ac:	e8 6e b9 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c00137b1:	83 c4 20             	add    esp,0x20
c00137b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00137b8:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00137be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00137c2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00137c5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00137c9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00137cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00137d1:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00137d7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00137db:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00137de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137e2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00137e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00137eb:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00137f1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00137f5:	8d 48 01             	lea    ecx,[eax+0x1]
c00137f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00137fc:	83 c2 2a             	add    edx,0x2a
c00137ff:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0013803:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013807:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001380d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013811:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013814:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013818:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001381c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013820:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013826:	8d 50 01             	lea    edx,[eax+0x1]
c0013829:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001382d:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0013833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013837:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001383d:	3d 00 08 00 00       	cmp    eax,0x800
c0013842:	75 10                	jne    c0013854 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0013844:	83 ec 0c             	sub    esp,0xc
c0013847:	68 bb 18 02 c0       	push   0xc00218bb
c001384c:	e8 cd 19 00 00       	call   c001521e <Krnl::panic(char const*)>
c0013851:	83 c4 10             	add    esp,0x10
c0013854:	90                   	nop
c0013855:	83 c4 14             	add    esp,0x14
c0013858:	5b                   	pop    ebx
c0013859:	5e                   	pop    esi
c001385a:	c3                   	ret    
c001385b:	90                   	nop

c001385c <ACPI::setScreenBrightnessLevel(void*, int)>:
c001385c:	b8 00 00 00 00       	mov    eax,0x0
c0013861:	c3                   	ret    

c0013862 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0013862:	83 ec 1c             	sub    esp,0x1c
c0013865:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013869:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001386c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013870:	a1 88 3d 02 c0       	mov    eax,ds:0xc0023d88
c0013875:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001387a:	83 ec 08             	sub    esp,0x8
c001387d:	52                   	push   edx
c001387e:	50                   	push   eax
c001387f:	e8 f6 7c ff ff       	call   c000b57a <Computer::readCMOS(unsigned char)>
c0013884:	83 c4 10             	add    esp,0x10
c0013887:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001388b:	a1 88 3d 02 c0       	mov    eax,ds:0xc0023d88
c0013890:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0013895:	83 ec 04             	sub    esp,0x4
c0013898:	6a 01                	push   0x1
c001389a:	52                   	push   edx
c001389b:	50                   	push   eax
c001389c:	e8 ef 7d ff ff       	call   c000b690 <Computer::writeCMOS(unsigned char, unsigned char)>
c00138a1:	83 c4 10             	add    esp,0x10
c00138a4:	90                   	nop
c00138a5:	83 c4 1c             	add    esp,0x1c
c00138a8:	c3                   	ret    
c00138a9:	90                   	nop

c00138aa <ACPI::open(int, int, void*)>:
c00138aa:	53                   	push   ebx
c00138ab:	83 ec 18             	sub    esp,0x18
c00138ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00138b2:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00138b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00138bd:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00138c3:	84 c0                	test   al,al
c00138c5:	74 60                	je     c0013927 <ACPI::open(int, int, void*)+0x7d>
c00138c7:	83 ec 0c             	sub    esp,0xc
c00138ca:	68 58 01 00 00       	push   0x158
c00138cf:	e8 5c b7 ff ff       	call   c000f030 <operator new(unsigned long)>
c00138d4:	83 c4 10             	add    esp,0x10
c00138d7:	89 c3                	mov    ebx,eax
c00138d9:	83 ec 0c             	sub    esp,0xc
c00138dc:	53                   	push   ebx
c00138dd:	e8 9a 7f 00 00       	call   c001b87c <PCI::PCI()>
c00138e2:	83 c4 10             	add    esp,0x10
c00138e5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00138e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00138ed:	83 ec 08             	sub    esp,0x8
c00138f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00138f4:	50                   	push   eax
c00138f5:	e8 30 cc ff ff       	call   c001052a <Device::addChild(Device*)>
c00138fa:	83 c4 10             	add    esp,0x10
c00138fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013901:	8b 00                	mov    eax,DWORD PTR [eax]
c0013903:	83 c0 08             	add    eax,0x8
c0013906:	8b 00                	mov    eax,DWORD PTR [eax]
c0013908:	6a 00                	push   0x0
c001390a:	6a 00                	push   0x0
c001390c:	6a 00                	push   0x0
c001390e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013912:	ff d0                	call   eax
c0013914:	83 c4 10             	add    esp,0x10
c0013917:	83 ec 0c             	sub    esp,0xc
c001391a:	68 d8 18 02 c0       	push   0xc00218d8
c001391f:	e8 fb b7 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0013924:	83 c4 10             	add    esp,0x10
c0013927:	83 ec 0c             	sub    esp,0xc
c001392a:	68 e3 18 02 c0       	push   0xc00218e3
c001392f:	e8 a6 37 00 00       	call   c00170da <Thr::loadKernelSymbolTable(char const*)>
c0013934:	83 c4 10             	add    esp,0x10
c0013937:	8b 1d 88 3d 02 c0    	mov    ebx,DWORD PTR ds:0xc0023d88
c001393d:	83 ec 08             	sub    esp,0x8
c0013940:	6a 01                	push   0x1
c0013942:	68 01 19 02 c0       	push   0xc0021901
c0013947:	e8 70 42 00 00       	call   c0017bbc <Thr::loadDLL(char const*, bool)>
c001394c:	83 c4 10             	add    esp,0x10
c001394f:	83 ec 08             	sub    esp,0x8
c0013952:	53                   	push   ebx
c0013953:	50                   	push   eax
c0013954:	e8 29 44 00 00       	call   c0017d82 <Thr::executeDLL(unsigned long, void*)>
c0013959:	83 c4 10             	add    esp,0x10
c001395c:	8b 1d 88 3d 02 c0    	mov    ebx,DWORD PTR ds:0xc0023d88
c0013962:	83 ec 08             	sub    esp,0x8
c0013965:	6a 01                	push   0x1
c0013967:	68 1e 19 02 c0       	push   0xc002191e
c001396c:	e8 4b 42 00 00       	call   c0017bbc <Thr::loadDLL(char const*, bool)>
c0013971:	83 c4 10             	add    esp,0x10
c0013974:	83 ec 08             	sub    esp,0x8
c0013977:	53                   	push   ebx
c0013978:	50                   	push   eax
c0013979:	e8 04 44 00 00       	call   c0017d82 <Thr::executeDLL(unsigned long, void*)>
c001397e:	83 c4 10             	add    esp,0x10
c0013981:	a1 88 3d 02 c0       	mov    eax,ds:0xc0023d88
c0013986:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001398c:	83 e0 04             	and    eax,0x4
c001398f:	84 c0                	test   al,al
c0013991:	0f 84 cf 00 00 00    	je     c0013a66 <ACPI::open(int, int, void*)+0x1bc>
c0013997:	83 ec 0c             	sub    esp,0xc
c001399a:	68 14 01 00 00       	push   0x114
c001399f:	e8 8c b6 ff ff       	call   c000f030 <operator new(unsigned long)>
c00139a4:	83 c4 10             	add    esp,0x10
c00139a7:	89 c3                	mov    ebx,eax
c00139a9:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c00139ae:	83 ec 04             	sub    esp,0x4
c00139b1:	50                   	push   eax
c00139b2:	68 3b 19 02 c0       	push   0xc002193b
c00139b7:	53                   	push   ebx
c00139b8:	e8 91 bc ff ff       	call   c000f64e <File::File(char const*, Process*)>
c00139bd:	83 c4 10             	add    esp,0x10
c00139c0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00139c4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00139c9:	74 17                	je     c00139e2 <ACPI::open(int, int, void*)+0x138>
c00139cb:	83 ec 0c             	sub    esp,0xc
c00139ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00139d2:	e8 49 bf ff ff       	call   c000f920 <File::exists()>
c00139d7:	83 c4 10             	add    esp,0x10
c00139da:	84 c0                	test   al,al
c00139dc:	74 04                	je     c00139e2 <ACPI::open(int, int, void*)+0x138>
c00139de:	b0 01                	mov    al,0x1
c00139e0:	eb 02                	jmp    c00139e4 <ACPI::open(int, int, void*)+0x13a>
c00139e2:	b0 00                	mov    al,0x0
c00139e4:	84 c0                	test   al,al
c00139e6:	74 25                	je     c0013a0d <ACPI::open(int, int, void*)+0x163>
c00139e8:	8b 1d 88 3d 02 c0    	mov    ebx,DWORD PTR ds:0xc0023d88
c00139ee:	83 ec 08             	sub    esp,0x8
c00139f1:	6a 01                	push   0x1
c00139f3:	68 3b 19 02 c0       	push   0xc002193b
c00139f8:	e8 bf 41 00 00       	call   c0017bbc <Thr::loadDLL(char const*, bool)>
c00139fd:	83 c4 10             	add    esp,0x10
c0013a00:	83 ec 08             	sub    esp,0x8
c0013a03:	53                   	push   ebx
c0013a04:	50                   	push   eax
c0013a05:	e8 78 43 00 00       	call   c0017d82 <Thr::executeDLL(unsigned long, void*)>
c0013a0a:	83 c4 10             	add    esp,0x10
c0013a0d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013a12:	74 1e                	je     c0013a32 <ACPI::open(int, int, void*)+0x188>
c0013a14:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013a19:	74 17                	je     c0013a32 <ACPI::open(int, int, void*)+0x188>
c0013a1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a21:	83 c0 08             	add    eax,0x8
c0013a24:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a26:	83 ec 0c             	sub    esp,0xc
c0013a29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013a2d:	ff d0                	call   eax
c0013a2f:	83 c4 10             	add    esp,0x10
c0013a32:	a1 28 46 02 c0       	mov    eax,ds:0xc0024628
c0013a37:	83 ec 08             	sub    esp,0x8
c0013a3a:	68 58 19 02 c0       	push   0xc0021958
c0013a3f:	50                   	push   eax
c0013a40:	e8 9f f7 ff ff       	call   c00131e4 <findDataTable(unsigned char*, char*)>
c0013a45:	83 c4 10             	add    esp,0x10
c0013a48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013a4c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0013a51:	74 13                	je     c0013a66 <ACPI::open(int, int, void*)+0x1bc>
c0013a53:	83 ec 08             	sub    esp,0x8
c0013a56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013a5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a5e:	e8 ff fd ff ff       	call   c0013862 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0013a63:	83 c4 10             	add    esp,0x10
c0013a66:	b8 00 00 00 00       	mov    eax,0x0
c0013a6b:	83 c4 18             	add    esp,0x18
c0013a6e:	5b                   	pop    ebx
c0013a6f:	c3                   	ret    

c0013a70 <ACPI::sleep()>:
c0013a70:	83 ec 0c             	sub    esp,0xc
c0013a73:	a1 00 44 02 c0       	mov    eax,ds:0xc0024400
c0013a78:	85 c0                	test   eax,eax
c0013a7a:	74 07                	je     c0013a83 <ACPI::sleep()+0x13>
c0013a7c:	a1 00 44 02 c0       	mov    eax,ds:0xc0024400
c0013a81:	ff d0                	call   eax
c0013a83:	90                   	nop
c0013a84:	83 c4 0c             	add    esp,0xc
c0013a87:	c3                   	ret    

c0013a88 <CPU::close(int, int, void*)>:
c0013a88:	31 c0                	xor    eax,eax
c0013a8a:	c3                   	ret    

c0013a8b <lookupAMDCPUName(unsigned char, unsigned char)>:
c0013a8b:	55                   	push   ebp
c0013a8c:	57                   	push   edi
c0013a8d:	56                   	push   esi
c0013a8e:	53                   	push   ebx
c0013a8f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013a93:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013a97:	89 ce                	mov    esi,ecx
c0013a99:	89 d5                	mov    ebp,edx
c0013a9b:	80 f9 04             	cmp    cl,0x4
c0013a9e:	75 28                	jne    c0013ac8 <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c0013aa0:	8d 42 f9             	lea    eax,[edx-0x7]
c0013aa3:	3c 03                	cmp    al,0x3
c0013aa5:	0f 86 63 01 00 00    	jbe    c0013c0e <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0013aab:	80 fa 03             	cmp    dl,0x3
c0013aae:	0f 84 5a 01 00 00    	je     c0013c0e <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0013ab4:	8d 7a f2             	lea    edi,[edx-0xe]
c0013ab7:	b8 b0 36 02 c0       	mov    eax,0xc00236b0
c0013abc:	89 fb                	mov    ebx,edi
c0013abe:	80 fb 01             	cmp    bl,0x1
c0013ac1:	77 4e                	ja     c0013b11 <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c0013ac3:	e9 52 01 00 00       	jmp    c0013c1a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013ac8:	80 f9 05             	cmp    cl,0x5
c0013acb:	75 4d                	jne    c0013b1a <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c0013acd:	b8 c0 36 02 c0       	mov    eax,0xc00236c0
c0013ad2:	80 fa 03             	cmp    dl,0x3
c0013ad5:	0f 86 3f 01 00 00    	jbe    c0013c1a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013adb:	8d 7a fa             	lea    edi,[edx-0x6]
c0013ade:	b8 d0 36 02 c0       	mov    eax,0xc00236d0
c0013ae3:	89 fb                	mov    ebx,edi
c0013ae5:	80 fb 01             	cmp    bl,0x1
c0013ae8:	0f 86 2c 01 00 00    	jbe    c0013c1a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013aee:	b8 e0 36 02 c0       	mov    eax,0xc00236e0
c0013af3:	80 fa 08             	cmp    dl,0x8
c0013af6:	0f 84 1e 01 00 00    	je     c0013c1a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013afc:	89 d7                	mov    edi,edx
c0013afe:	b8 f0 36 02 c0       	mov    eax,0xc00236f0
c0013b03:	83 e7 fb             	and    edi,0xfffffffb
c0013b06:	89 fb                	mov    ebx,edi
c0013b08:	80 fb 09             	cmp    bl,0x9
c0013b0b:	0f 84 09 01 00 00    	je     c0013c1a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013b11:	31 c0                	xor    eax,eax
c0013b13:	89 eb                	mov    ebx,ebp
c0013b15:	0f b6 fb             	movzx  edi,bl
c0013b18:	eb 30                	jmp    c0013b4a <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c0013b1a:	31 c0                	xor    eax,eax
c0013b1c:	80 f9 06             	cmp    cl,0x6
c0013b1f:	75 f2                	jne    c0013b13 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0013b21:	80 fa 0a             	cmp    dl,0xa
c0013b24:	77 ed                	ja     c0013b13 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0013b26:	bf de 05 00 00       	mov    edi,0x5de
c0013b2b:	0f a3 d7             	bt     edi,edx
c0013b2e:	73 e3                	jae    c0013b13 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0013b30:	b8 00 37 02 c0       	mov    eax,0xc0023700
c0013b35:	e9 e0 00 00 00       	jmp    c0013c1a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013b3a:	39 c7                	cmp    edi,eax
c0013b3c:	0f 84 d3 00 00 00    	je     c0013c15 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0013b42:	40                   	inc    eax
c0013b43:	3d d0 00 00 00       	cmp    eax,0xd0
c0013b48:	74 09                	je     c0013b53 <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c0013b4a:	89 f3                	mov    ebx,esi
c0013b4c:	80 fb 0f             	cmp    bl,0xf
c0013b4f:	75 f1                	jne    c0013b42 <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c0013b51:	eb e7                	jmp    c0013b3a <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c0013b53:	80 f9 10             	cmp    cl,0x10
c0013b56:	75 14                	jne    c0013b6c <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c0013b58:	8d 42 fc             	lea    eax,[edx-0x4]
c0013b5b:	83 e0 fb             	and    eax,0xfffffffb
c0013b5e:	3c 02                	cmp    al,0x2
c0013b60:	76 34                	jbe    c0013b96 <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c0013b62:	b8 66 1d 02 c0       	mov    eax,0xc0021d66
c0013b67:	80 fa 02             	cmp    dl,0x2
c0013b6a:	eb 24                	jmp    c0013b90 <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c0013b6c:	80 f9 11             	cmp    cl,0x11
c0013b6f:	75 13                	jne    c0013b84 <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c0013b71:	b8 66 1d 02 c0       	mov    eax,0xc0021d66
c0013b76:	80 fa 03             	cmp    dl,0x3
c0013b79:	0f 85 9b 00 00 00    	jne    c0013c1a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013b7f:	e9 91 00 00 00       	jmp    c0013c15 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0013b84:	80 f9 12             	cmp    cl,0x12
c0013b87:	75 14                	jne    c0013b9d <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c0013b89:	b8 66 1d 02 c0       	mov    eax,0xc0021d66
c0013b8e:	fe ca                	dec    dl
c0013b90:	0f 85 84 00 00 00    	jne    c0013c1a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013b96:	b8 20 37 02 c0       	mov    eax,0xc0023720
c0013b9b:	eb 7d                	jmp    c0013c1a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013b9d:	80 f9 14             	cmp    cl,0x14
c0013ba0:	75 12                	jne    c0013bb4 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c0013ba2:	4a                   	dec    edx
c0013ba3:	b8 66 1d 02 c0       	mov    eax,0xc0021d66
c0013ba8:	80 fa 01             	cmp    dl,0x1
c0013bab:	77 6d                	ja     c0013c1a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013bad:	b8 30 37 02 c0       	mov    eax,0xc0023730
c0013bb2:	eb 66                	jmp    c0013c1a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013bb4:	80 f9 15             	cmp    cl,0x15
c0013bb7:	75 31                	jne    c0013bea <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c0013bb9:	b8 40 37 02 c0       	mov    eax,0xc0023740
c0013bbe:	80 fa 01             	cmp    dl,0x1
c0013bc1:	74 57                	je     c0013c1a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013bc3:	b8 66 1d 02 c0       	mov    eax,0xc0021d66
c0013bc8:	80 fa 13             	cmp    dl,0x13
c0013bcb:	76 0c                	jbe    c0013bd9 <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c0013bcd:	80 fa 30             	cmp    dl,0x30
c0013bd0:	75 48                	jne    c0013c1a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013bd2:	b8 60 37 02 c0       	mov    eax,0xc0023760
c0013bd7:	eb 41                	jmp    c0013c1a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013bd9:	b9 04 00 09 00       	mov    ecx,0x90004
c0013bde:	0f a3 d1             	bt     ecx,edx
c0013be1:	73 37                	jae    c0013c1a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013be3:	b8 50 37 02 c0       	mov    eax,0xc0023750
c0013be8:	eb 30                	jmp    c0013c1a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013bea:	b8 66 1d 02 c0       	mov    eax,0xc0021d66
c0013bef:	80 f9 16             	cmp    cl,0x16
c0013bf2:	75 26                	jne    c0013c1a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013bf4:	b8 70 37 02 c0       	mov    eax,0xc0023770
c0013bf9:	84 d2                	test   dl,dl
c0013bfb:	74 1d                	je     c0013c1a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013bfd:	b8 66 1d 02 c0       	mov    eax,0xc0021d66
c0013c02:	80 fa 30             	cmp    dl,0x30
c0013c05:	75 13                	jne    c0013c1a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013c07:	b8 80 37 02 c0       	mov    eax,0xc0023780
c0013c0c:	eb 0c                	jmp    c0013c1a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013c0e:	b8 a0 36 02 c0       	mov    eax,0xc00236a0
c0013c13:	eb 05                	jmp    c0013c1a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013c15:	b8 10 37 02 c0       	mov    eax,0xc0023710
c0013c1a:	5b                   	pop    ebx
c0013c1b:	5e                   	pop    esi
c0013c1c:	5f                   	pop    edi
c0013c1d:	5d                   	pop    ebp
c0013c1e:	c3                   	ret    

c0013c1f <lookupIntelCPUName(unsigned char, unsigned char)>:
c0013c1f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013c23:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013c27:	80 f9 04             	cmp    cl,0x4
c0013c2a:	75 6b                	jne    c0013c97 <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0013c2c:	b8 00 35 02 c0       	mov    eax,0xc0023500
c0013c31:	80 fa 01             	cmp    dl,0x1
c0013c34:	0f 86 92 02 00 00    	jbe    c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c3a:	b8 10 35 02 c0       	mov    eax,0xc0023510
c0013c3f:	80 fa 02             	cmp    dl,0x2
c0013c42:	0f 84 84 02 00 00    	je     c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c48:	b8 20 35 02 c0       	mov    eax,0xc0023520
c0013c4d:	80 fa 03             	cmp    dl,0x3
c0013c50:	0f 84 76 02 00 00    	je     c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c56:	b8 30 35 02 c0       	mov    eax,0xc0023530
c0013c5b:	80 fa 04             	cmp    dl,0x4
c0013c5e:	0f 84 68 02 00 00    	je     c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c64:	b8 40 35 02 c0       	mov    eax,0xc0023540
c0013c69:	80 fa 05             	cmp    dl,0x5
c0013c6c:	0f 84 5a 02 00 00    	je     c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c72:	b8 20 35 02 c0       	mov    eax,0xc0023520
c0013c77:	80 fa 07             	cmp    dl,0x7
c0013c7a:	0f 84 4c 02 00 00    	je     c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c80:	83 ea 08             	sub    edx,0x8
c0013c83:	b8 66 1d 02 c0       	mov    eax,0xc0021d66
c0013c88:	80 fa 01             	cmp    dl,0x1
c0013c8b:	0f 87 3b 02 00 00    	ja     c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c91:	b8 50 35 02 c0       	mov    eax,0xc0023550
c0013c96:	c3                   	ret    
c0013c97:	80 f9 05             	cmp    cl,0x5
c0013c9a:	75 45                	jne    c0013ce1 <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c0013c9c:	8d 4a ff             	lea    ecx,[edx-0x1]
c0013c9f:	b8 60 35 02 c0       	mov    eax,0xc0023560
c0013ca4:	80 f9 02             	cmp    cl,0x2
c0013ca7:	0f 86 1f 02 00 00    	jbe    c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cad:	80 fa 04             	cmp    dl,0x4
c0013cb0:	0f 84 f3 01 00 00    	je     c0013ea9 <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c0013cb6:	80 fa 07             	cmp    dl,0x7
c0013cb9:	0f 84 0d 02 00 00    	je     c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cbf:	b8 70 35 02 c0       	mov    eax,0xc0023570
c0013cc4:	80 fa 08             	cmp    dl,0x8
c0013cc7:	0f 84 ff 01 00 00    	je     c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013ccd:	b8 66 1d 02 c0       	mov    eax,0xc0021d66
c0013cd2:	80 fa 09             	cmp    dl,0x9
c0013cd5:	0f 85 f1 01 00 00    	jne    c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cdb:	b8 80 35 02 c0       	mov    eax,0xc0023580
c0013ce0:	c3                   	ret    
c0013ce1:	80 f9 06             	cmp    cl,0x6
c0013ce4:	0f 85 85 01 00 00    	jne    c0013e6f <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c0013cea:	b8 90 35 02 c0       	mov    eax,0xc0023590
c0013cef:	80 fa 01             	cmp    dl,0x1
c0013cf2:	0f 84 d4 01 00 00    	je     c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cf8:	8d 42 fb             	lea    eax,[edx-0x5]
c0013cfb:	3c 01                	cmp    al,0x1
c0013cfd:	0f 86 ac 01 00 00    	jbe    c0013eaf <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0013d03:	80 fa 03             	cmp    dl,0x3
c0013d06:	0f 84 a3 01 00 00    	je     c0013eaf <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0013d0c:	8d 4a f9             	lea    ecx,[edx-0x7]
c0013d0f:	b8 b0 35 02 c0       	mov    eax,0xc00235b0
c0013d14:	80 f9 01             	cmp    cl,0x1
c0013d17:	0f 86 af 01 00 00    	jbe    c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d1d:	80 fa 09             	cmp    dl,0x9
c0013d20:	0f 84 8f 01 00 00    	je     c0013eb5 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0013d26:	8d 4a f6             	lea    ecx,[edx-0xa]
c0013d29:	80 f9 01             	cmp    cl,0x1
c0013d2c:	0f 86 9a 01 00 00    	jbe    c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d32:	b8 c0 35 02 c0       	mov    eax,0xc00235c0
c0013d37:	80 fa 0d             	cmp    dl,0xd
c0013d3a:	0f 84 8c 01 00 00    	je     c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d40:	b8 d0 35 02 c0       	mov    eax,0xc00235d0
c0013d45:	80 fa 0e             	cmp    dl,0xe
c0013d48:	0f 84 7e 01 00 00    	je     c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d4e:	b8 e0 35 02 c0       	mov    eax,0xc00235e0
c0013d53:	80 fa 0f             	cmp    dl,0xf
c0013d56:	0f 84 70 01 00 00    	je     c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d5c:	b8 c0 35 02 c0       	mov    eax,0xc00235c0
c0013d61:	80 fa 15             	cmp    dl,0x15
c0013d64:	0f 84 62 01 00 00    	je     c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d6a:	8d 4a ea             	lea    ecx,[edx-0x16]
c0013d6d:	b8 e0 35 02 c0       	mov    eax,0xc00235e0
c0013d72:	80 f9 01             	cmp    cl,0x1
c0013d75:	0f 86 51 01 00 00    	jbe    c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d7b:	80 fa 1a             	cmp    dl,0x1a
c0013d7e:	0f 84 37 01 00 00    	je     c0013ebb <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c0013d84:	80 fa 1c             	cmp    dl,0x1c
c0013d87:	0f 84 34 01 00 00    	je     c0013ec1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c0013d8d:	80 fa 1d             	cmp    dl,0x1d
c0013d90:	0f 84 36 01 00 00    	je     c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d96:	b8 10 36 02 c0       	mov    eax,0xc0023610
c0013d9b:	80 fa 25             	cmp    dl,0x25
c0013d9e:	0f 84 28 01 00 00    	je     c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013da4:	8d 4a da             	lea    ecx,[edx-0x26]
c0013da7:	b8 00 36 02 c0       	mov    eax,0xc0023600
c0013dac:	80 f9 01             	cmp    cl,0x1
c0013daf:	0f 86 17 01 00 00    	jbe    c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013db5:	b8 20 36 02 c0       	mov    eax,0xc0023620
c0013dba:	80 fa 2a             	cmp    dl,0x2a
c0013dbd:	0f 84 09 01 00 00    	je     c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013dc3:	b8 10 36 02 c0       	mov    eax,0xc0023610
c0013dc8:	80 fa 2c             	cmp    dl,0x2c
c0013dcb:	0f 84 fb 00 00 00    	je     c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013dd1:	b8 20 36 02 c0       	mov    eax,0xc0023620
c0013dd6:	80 fa 2d             	cmp    dl,0x2d
c0013dd9:	0f 84 ed 00 00 00    	je     c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013ddf:	b8 f0 35 02 c0       	mov    eax,0xc00235f0
c0013de4:	80 fa 2e             	cmp    dl,0x2e
c0013de7:	0f 84 df 00 00 00    	je     c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013ded:	b8 10 36 02 c0       	mov    eax,0xc0023610
c0013df2:	80 fa 2f             	cmp    dl,0x2f
c0013df5:	0f 84 d1 00 00 00    	je     c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013dfb:	8d 4a cb             	lea    ecx,[edx-0x35]
c0013dfe:	b8 00 36 02 c0       	mov    eax,0xc0023600
c0013e03:	80 f9 01             	cmp    cl,0x1
c0013e06:	0f 86 c0 00 00 00    	jbe    c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013e0c:	b8 30 36 02 c0       	mov    eax,0xc0023630
c0013e11:	80 fa 37             	cmp    dl,0x37
c0013e14:	0f 84 b2 00 00 00    	je     c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013e1a:	b8 40 36 02 c0       	mov    eax,0xc0023640
c0013e1f:	80 fa 3a             	cmp    dl,0x3a
c0013e22:	0f 84 a4 00 00 00    	je     c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013e28:	b8 50 36 02 c0       	mov    eax,0xc0023650
c0013e2d:	80 fa 3c             	cmp    dl,0x3c
c0013e30:	0f 84 96 00 00 00    	je     c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013e36:	b8 60 36 02 c0       	mov    eax,0xc0023660
c0013e3b:	80 fa 3d             	cmp    dl,0x3d
c0013e3e:	0f 84 88 00 00 00    	je     c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013e44:	b8 40 36 02 c0       	mov    eax,0xc0023640
c0013e49:	80 fa 3e             	cmp    dl,0x3e
c0013e4c:	74 7e                	je     c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013e4e:	8d 42 bb             	lea    eax,[edx-0x45]
c0013e51:	3c 01                	cmp    al,0x1
c0013e53:	76 72                	jbe    c0013ec7 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0013e55:	80 fa 3f             	cmp    dl,0x3f
c0013e58:	74 6d                	je     c0013ec7 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0013e5a:	80 fa 4a             	cmp    dl,0x4a
c0013e5d:	74 0a                	je     c0013e69 <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c0013e5f:	b8 66 1d 02 c0       	mov    eax,0xc0021d66
c0013e64:	80 fa 4d             	cmp    dl,0x4d
c0013e67:	75 63                	jne    c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013e69:	b8 30 36 02 c0       	mov    eax,0xc0023630
c0013e6e:	c3                   	ret    
c0013e6f:	b8 66 1d 02 c0       	mov    eax,0xc0021d66
c0013e74:	80 f9 0b             	cmp    cl,0xb
c0013e77:	75 0a                	jne    c0013e83 <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c0013e79:	fe ca                	dec    dl
c0013e7b:	75 4f                	jne    c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013e7d:	b8 70 36 02 c0       	mov    eax,0xc0023670
c0013e82:	c3                   	ret    
c0013e83:	80 f9 0f             	cmp    cl,0xf
c0013e86:	75 44                	jne    c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013e88:	b8 80 36 02 c0       	mov    eax,0xc0023680
c0013e8d:	80 fa 02             	cmp    dl,0x2
c0013e90:	76 3a                	jbe    c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013e92:	8d 42 fd             	lea    eax,[edx-0x3]
c0013e95:	3c 01                	cmp    al,0x1
c0013e97:	76 0a                	jbe    c0013ea3 <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c0013e99:	b8 66 1d 02 c0       	mov    eax,0xc0021d66
c0013e9e:	80 fa 06             	cmp    dl,0x6
c0013ea1:	75 29                	jne    c0013ecc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013ea3:	b8 90 36 02 c0       	mov    eax,0xc0023690
c0013ea8:	c3                   	ret    
c0013ea9:	b8 70 35 02 c0       	mov    eax,0xc0023570
c0013eae:	c3                   	ret    
c0013eaf:	b8 a0 35 02 c0       	mov    eax,0xc00235a0
c0013eb4:	c3                   	ret    
c0013eb5:	b8 c0 35 02 c0       	mov    eax,0xc00235c0
c0013eba:	c3                   	ret    
c0013ebb:	b8 f0 35 02 c0       	mov    eax,0xc00235f0
c0013ec0:	c3                   	ret    
c0013ec1:	b8 00 36 02 c0       	mov    eax,0xc0023600
c0013ec6:	c3                   	ret    
c0013ec7:	b8 50 36 02 c0       	mov    eax,0xc0023650
c0013ecc:	c3                   	ret    

c0013ecd <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0013ecd:	60                   	pusha  
c0013ece:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013ed2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013ed6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013eda:	9c                   	pushf  
c0013edb:	fa                   	cli    
c0013edc:	0f 09                	wbinvd 
c0013ede:	0f 30                	wrmsr  
c0013ee0:	9d                   	popf   
c0013ee1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ee5:	89 02                	mov    DWORD PTR [edx],eax
c0013ee7:	61                   	popa   
c0013ee8:	c3                   	ret    

c0013ee9 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0013ee9:	60                   	pusha  
c0013eea:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013eee:	9c                   	pushf  
c0013eef:	fa                   	cli    
c0013ef0:	0f 09                	wbinvd 
c0013ef2:	31 c0                	xor    eax,eax
c0013ef4:	31 d2                	xor    edx,edx
c0013ef6:	0f 32                	rdmsr  
c0013ef8:	9d                   	popf   
c0013ef9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013efd:	89 02                	mov    DWORD PTR [edx],eax
c0013eff:	61                   	popa   
c0013f00:	c3                   	ret    

c0013f01 <AMD_K6_writeback(int, int, int)>:
c0013f01:	56                   	push   esi
c0013f02:	53                   	push   ebx
c0013f03:	83 ec 10             	sub    esp,0x10
c0013f06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f0a:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0013f0f:	75 5d                	jne    c0013f6e <AMD_K6_writeback(int, int, int)+0x6d>
c0013f11:	83 f8 08             	cmp    eax,0x8
c0013f14:	75 09                	jne    c0013f1f <AMD_K6_writeback(int, int, int)+0x1e>
c0013f16:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0013f1b:	7e 13                	jle    c0013f30 <AMD_K6_writeback(int, int, int)+0x2f>
c0013f1d:	eb 30                	jmp    c0013f4f <AMD_K6_writeback(int, int, int)+0x4e>
c0013f1f:	83 f8 06             	cmp    eax,0x6
c0013f22:	7c 4a                	jl     c0013f6e <AMD_K6_writeback(int, int, int)+0x6d>
c0013f24:	83 f8 07             	cmp    eax,0x7
c0013f27:	7e 07                	jle    c0013f30 <AMD_K6_writeback(int, int, int)+0x2f>
c0013f29:	83 f8 09             	cmp    eax,0x9
c0013f2c:	74 21                	je     c0013f4f <AMD_K6_writeback(int, int, int)+0x4e>
c0013f2e:	eb 3e                	jmp    c0013f6e <AMD_K6_writeback(int, int, int)+0x6d>
c0013f30:	89 e6                	mov    esi,esp
c0013f32:	8b 1d c4 3d 02 c0    	mov    ebx,DWORD PTR ds:0xc0023dc4
c0013f38:	56                   	push   esi
c0013f39:	c1 eb 15             	shr    ebx,0x15
c0013f3c:	68 82 00 00 c0       	push   0xc0000082
c0013f41:	83 e3 7e             	and    ebx,0x7e
c0013f44:	e8 a0 ff ff ff       	call   c0013ee9 <AMD_K6_read_msr(unsigned int, REGS*)>
c0013f49:	56                   	push   esi
c0013f4a:	6a 00                	push   0x0
c0013f4c:	53                   	push   ebx
c0013f4d:	eb 12                	jmp    c0013f61 <AMD_K6_writeback(int, int, int)+0x60>
c0013f4f:	89 e3                	mov    ebx,esp
c0013f51:	53                   	push   ebx
c0013f52:	68 82 00 00 c0       	push   0xc0000082
c0013f57:	e8 8d ff ff ff       	call   c0013ee9 <AMD_K6_read_msr(unsigned int, REGS*)>
c0013f5c:	53                   	push   ebx
c0013f5d:	6a 00                	push   0x0
c0013f5f:	6a 00                	push   0x0
c0013f61:	68 82 00 00 c0       	push   0xc0000082
c0013f66:	e8 62 ff ff ff       	call   c0013ecd <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0013f6b:	83 c4 18             	add    esp,0x18
c0013f6e:	83 c4 10             	add    esp,0x10
c0013f71:	5b                   	pop    ebx
c0013f72:	5e                   	pop    esi
c0013f73:	c3                   	ret    

c0013f74 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0013f74:	55                   	push   ebp
c0013f75:	57                   	push   edi
c0013f76:	56                   	push   esi
c0013f77:	53                   	push   ebx
c0013f78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f7c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013f80:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013f84:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013f88:	39 05 a0 37 02 c0    	cmp    DWORD PTR ds:0xc00237a0,eax
c0013f8e:	75 23                	jne    c0013fb3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0013f90:	a1 cc 47 02 c0       	mov    eax,ds:0xc00247cc
c0013f95:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013f99:	89 06                	mov    DWORD PTR [esi],eax
c0013f9b:	a1 c8 47 02 c0       	mov    eax,ds:0xc00247c8
c0013fa0:	89 07                	mov    DWORD PTR [edi],eax
c0013fa2:	a1 c4 47 02 c0       	mov    eax,ds:0xc00247c4
c0013fa7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013faa:	a1 c0 47 02 c0       	mov    eax,ds:0xc00247c0
c0013faf:	89 02                	mov    DWORD PTR [edx],eax
c0013fb1:	eb 3f                	jmp    c0013ff2 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0013fb3:	31 c9                	xor    ecx,ecx
c0013fb5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013fb9:	0f a2                	cpuid  
c0013fbb:	89 06                	mov    DWORD PTR [esi],eax
c0013fbd:	89 1f                	mov    DWORD PTR [edi],ebx
c0013fbf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013fc3:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0013fc6:	89 10                	mov    DWORD PTR [eax],edx
c0013fc8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013fcc:	a3 a0 37 02 c0       	mov    ds:0xc00237a0,eax
c0013fd1:	8b 06                	mov    eax,DWORD PTR [esi]
c0013fd3:	a3 cc 47 02 c0       	mov    ds:0xc00247cc,eax
c0013fd8:	8b 07                	mov    eax,DWORD PTR [edi]
c0013fda:	a3 c8 47 02 c0       	mov    ds:0xc00247c8,eax
c0013fdf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013fe2:	a3 c4 47 02 c0       	mov    ds:0xc00247c4,eax
c0013fe7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013feb:	8b 00                	mov    eax,DWORD PTR [eax]
c0013fed:	a3 c0 47 02 c0       	mov    ds:0xc00247c0,eax
c0013ff2:	5b                   	pop    ebx
c0013ff3:	5e                   	pop    esi
c0013ff4:	5f                   	pop    edi
c0013ff5:	5d                   	pop    ebp
c0013ff6:	c3                   	ret    

c0013ff7 <cpuidCheckEDX(unsigned int)>:
c0013ff7:	83 ec 10             	sub    esp,0x10
c0013ffa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013ffe:	50                   	push   eax
c0013fff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014003:	50                   	push   eax
c0014004:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014008:	50                   	push   eax
c0014009:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001400d:	50                   	push   eax
c001400e:	6a 01                	push   0x1
c0014010:	e8 5f ff ff ff       	call   c0013f74 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014015:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014019:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001401d:	0f 95 c0             	setne  al
c0014020:	83 c4 24             	add    esp,0x24
c0014023:	c3                   	ret    

c0014024 <cpuidCheckECX(unsigned int)>:
c0014024:	83 ec 10             	sub    esp,0x10
c0014027:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001402b:	50                   	push   eax
c001402c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014030:	50                   	push   eax
c0014031:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014035:	50                   	push   eax
c0014036:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001403a:	50                   	push   eax
c001403b:	6a 01                	push   0x1
c001403d:	e8 32 ff ff ff       	call   c0013f74 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014042:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014046:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001404a:	0f 95 c0             	setne  al
c001404d:	83 c4 24             	add    esp,0x24
c0014050:	c3                   	ret    

c0014051 <cpuidCheckExtendedEBX(unsigned int)>:
c0014051:	83 ec 10             	sub    esp,0x10
c0014054:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014058:	50                   	push   eax
c0014059:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001405d:	50                   	push   eax
c001405e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014062:	50                   	push   eax
c0014063:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014067:	50                   	push   eax
c0014068:	6a 07                	push   0x7
c001406a:	e8 05 ff ff ff       	call   c0013f74 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001406f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014073:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0014077:	0f 95 c0             	setne  al
c001407a:	83 c4 24             	add    esp,0x24
c001407d:	c3                   	ret    

c001407e <cpuidCheckExtendedECX(unsigned int)>:
c001407e:	83 ec 10             	sub    esp,0x10
c0014081:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014085:	50                   	push   eax
c0014086:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001408a:	50                   	push   eax
c001408b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001408f:	50                   	push   eax
c0014090:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014094:	50                   	push   eax
c0014095:	6a 07                	push   0x7
c0014097:	e8 d8 fe ff ff       	call   c0013f74 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001409c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00140a0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00140a4:	0f 95 c0             	setne  al
c00140a7:	83 c4 24             	add    esp,0x24
c00140aa:	c3                   	ret    

c00140ab <getCPUNumber()>:
c00140ab:	31 c0                	xor    eax,eax
c00140ad:	c3                   	ret    

c00140ae <thisCPU()>:
c00140ae:	e8 f8 ff ff ff       	call   c00140ab <getCPUNumber()>
c00140b3:	8b 15 88 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023d88
c00140b9:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c00140c0:	c3                   	ret    
c00140c1:	90                   	nop

c00140c2 <CPU::CPU()>:
c00140c2:	83 ec 0c             	sub    esp,0xc
c00140c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140c9:	83 ec 08             	sub    esp,0x8
c00140cc:	68 66 1d 02 c0       	push   0xc0021d66
c00140d1:	50                   	push   eax
c00140d2:	e8 43 c6 ff ff       	call   c001071a <Device::Device(char const*)>
c00140d7:	83 c4 10             	add    esp,0x10
c00140da:	ba 40 1e 02 c0       	mov    edx,0xc0021e40
c00140df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140e3:	89 10                	mov    DWORD PTR [eax],edx
c00140e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140e9:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00140f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140f7:	05 78 01 00 00       	add    eax,0x178
c00140fc:	83 ec 0c             	sub    esp,0xc
c00140ff:	50                   	push   eax
c0014100:	e8 75 76 ff ff       	call   c000b77a <GDT::GDT()>
c0014105:	83 c4 10             	add    esp,0x10
c0014108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001410c:	05 7c 09 00 00       	add    eax,0x97c
c0014111:	83 ec 0c             	sub    esp,0xc
c0014114:	50                   	push   eax
c0014115:	e8 c0 78 ff ff       	call   c000b9da <IDT::IDT()>
c001411a:	83 c4 10             	add    esp,0x10
c001411d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014121:	05 7c 11 00 00       	add    eax,0x117c
c0014126:	83 ec 0c             	sub    esp,0xc
c0014129:	50                   	push   eax
c001412a:	e8 ef 98 ff ff       	call   c000da1e <TSS::TSS()>
c001412f:	83 c4 10             	add    esp,0x10
c0014132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014136:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001413d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014141:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001414b:	90                   	nop
c001414c:	83 c4 0c             	add    esp,0xc
c001414f:	c3                   	ret    

c0014150 <CPU::displayFeatures()>:
c0014150:	53                   	push   ebx
c0014151:	83 ec 10             	sub    esp,0x10
c0014154:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014158:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001415e:	68 74 1a 02 c0       	push   0xc0021a74
c0014163:	e8 b7 af ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0014168:	59                   	pop    ecx
c0014169:	58                   	pop    eax
c001416a:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0014170:	50                   	push   eax
c0014171:	68 85 1a 02 c0       	push   0xc0021a85
c0014176:	e8 a4 af ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001417b:	58                   	pop    eax
c001417c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014182:	5a                   	pop    edx
c0014183:	c1 e8 0e             	shr    eax,0xe
c0014186:	0f b6 c0             	movzx  eax,al
c0014189:	50                   	push   eax
c001418a:	68 96 1a 02 c0       	push   0xc0021a96
c001418f:	e8 8b af ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0014194:	59                   	pop    ecx
c0014195:	58                   	pop    eax
c0014196:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001419c:	66 c1 e8 06          	shr    ax,0x6
c00141a0:	0f b6 c0             	movzx  eax,al
c00141a3:	50                   	push   eax
c00141a4:	68 a7 1a 02 c0       	push   0xc0021aa7
c00141a9:	e8 71 af ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c00141ae:	c7 04 24 ba 1e 02 c0 	mov    DWORD PTR [esp],0xc0021eba
c00141b5:	e8 65 af ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c00141ba:	83 c4 10             	add    esp,0x10
c00141bd:	b8 32 07 02 c0       	mov    eax,0xc0020732
c00141c2:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00141c9:	74 05                	je     c00141d0 <CPU::displayFeatures()+0x80>
c00141cb:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c00141d0:	52                   	push   edx
c00141d1:	52                   	push   edx
c00141d2:	50                   	push   eax
c00141d3:	68 b8 1a 02 c0       	push   0xc0021ab8
c00141d8:	e8 42 af ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c00141dd:	83 c4 10             	add    esp,0x10
c00141e0:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c00141e5:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00141ec:	78 05                	js     c00141f3 <CPU::displayFeatures()+0xa3>
c00141ee:	b8 32 07 02 c0       	mov    eax,0xc0020732
c00141f3:	51                   	push   ecx
c00141f4:	51                   	push   ecx
c00141f5:	50                   	push   eax
c00141f6:	68 cf 1a 02 c0       	push   0xc0021acf
c00141fb:	e8 1f af ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0014200:	83 c4 10             	add    esp,0x10
c0014203:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c0014208:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001420f:	75 05                	jne    c0014216 <CPU::displayFeatures()+0xc6>
c0014211:	b8 32 07 02 c0       	mov    eax,0xc0020732
c0014216:	52                   	push   edx
c0014217:	52                   	push   edx
c0014218:	50                   	push   eax
c0014219:	68 e6 1a 02 c0       	push   0xc0021ae6
c001421e:	e8 fc ae ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0014223:	83 c4 10             	add    esp,0x10
c0014226:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c001422b:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0014232:	75 05                	jne    c0014239 <CPU::displayFeatures()+0xe9>
c0014234:	b8 32 07 02 c0       	mov    eax,0xc0020732
c0014239:	51                   	push   ecx
c001423a:	51                   	push   ecx
c001423b:	50                   	push   eax
c001423c:	68 fd 1a 02 c0       	push   0xc0021afd
c0014241:	e8 d9 ae ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0014246:	83 c4 10             	add    esp,0x10
c0014249:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c001424e:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014255:	75 05                	jne    c001425c <CPU::displayFeatures()+0x10c>
c0014257:	b8 32 07 02 c0       	mov    eax,0xc0020732
c001425c:	52                   	push   edx
c001425d:	52                   	push   edx
c001425e:	50                   	push   eax
c001425f:	68 14 1b 02 c0       	push   0xc0021b14
c0014264:	e8 b6 ae ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0014269:	83 c4 10             	add    esp,0x10
c001426c:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c0014271:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014278:	75 05                	jne    c001427f <CPU::displayFeatures()+0x12f>
c001427a:	b8 32 07 02 c0       	mov    eax,0xc0020732
c001427f:	51                   	push   ecx
c0014280:	51                   	push   ecx
c0014281:	50                   	push   eax
c0014282:	68 2b 1b 02 c0       	push   0xc0021b2b
c0014287:	e8 93 ae ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001428c:	83 c4 10             	add    esp,0x10
c001428f:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c0014294:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001429b:	75 05                	jne    c00142a2 <CPU::displayFeatures()+0x152>
c001429d:	b8 32 07 02 c0       	mov    eax,0xc0020732
c00142a2:	52                   	push   edx
c00142a3:	52                   	push   edx
c00142a4:	50                   	push   eax
c00142a5:	68 42 1b 02 c0       	push   0xc0021b42
c00142aa:	e8 70 ae ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c00142af:	83 c4 10             	add    esp,0x10
c00142b2:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c00142b7:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00142be:	75 05                	jne    c00142c5 <CPU::displayFeatures()+0x175>
c00142c0:	b8 32 07 02 c0       	mov    eax,0xc0020732
c00142c5:	51                   	push   ecx
c00142c6:	51                   	push   ecx
c00142c7:	50                   	push   eax
c00142c8:	68 59 1b 02 c0       	push   0xc0021b59
c00142cd:	e8 4d ae ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c00142d2:	83 c4 10             	add    esp,0x10
c00142d5:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c00142da:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00142e1:	75 05                	jne    c00142e8 <CPU::displayFeatures()+0x198>
c00142e3:	b8 32 07 02 c0       	mov    eax,0xc0020732
c00142e8:	52                   	push   edx
c00142e9:	52                   	push   edx
c00142ea:	50                   	push   eax
c00142eb:	68 70 1b 02 c0       	push   0xc0021b70
c00142f0:	e8 2a ae ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c00142f5:	83 c4 10             	add    esp,0x10
c00142f8:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c00142fd:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0014304:	75 05                	jne    c001430b <CPU::displayFeatures()+0x1bb>
c0014306:	b8 32 07 02 c0       	mov    eax,0xc0020732
c001430b:	51                   	push   ecx
c001430c:	51                   	push   ecx
c001430d:	50                   	push   eax
c001430e:	68 87 1b 02 c0       	push   0xc0021b87
c0014313:	e8 07 ae ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0014318:	83 c4 10             	add    esp,0x10
c001431b:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c0014320:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014327:	75 05                	jne    c001432e <CPU::displayFeatures()+0x1de>
c0014329:	b8 32 07 02 c0       	mov    eax,0xc0020732
c001432e:	52                   	push   edx
c001432f:	52                   	push   edx
c0014330:	50                   	push   eax
c0014331:	68 9e 1b 02 c0       	push   0xc0021b9e
c0014336:	e8 e4 ad ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001433b:	83 c4 10             	add    esp,0x10
c001433e:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c0014343:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c001434a:	75 05                	jne    c0014351 <CPU::displayFeatures()+0x201>
c001434c:	b8 32 07 02 c0       	mov    eax,0xc0020732
c0014351:	51                   	push   ecx
c0014352:	51                   	push   ecx
c0014353:	50                   	push   eax
c0014354:	68 b5 1b 02 c0       	push   0xc0021bb5
c0014359:	e8 c1 ad ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001435e:	83 c4 10             	add    esp,0x10
c0014361:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c0014366:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c001436d:	75 05                	jne    c0014374 <CPU::displayFeatures()+0x224>
c001436f:	b8 32 07 02 c0       	mov    eax,0xc0020732
c0014374:	52                   	push   edx
c0014375:	52                   	push   edx
c0014376:	50                   	push   eax
c0014377:	68 cc 1b 02 c0       	push   0xc0021bcc
c001437c:	e8 9e ad ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0014381:	83 c4 10             	add    esp,0x10
c0014384:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c0014389:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0014390:	78 05                	js     c0014397 <CPU::displayFeatures()+0x247>
c0014392:	b8 32 07 02 c0       	mov    eax,0xc0020732
c0014397:	51                   	push   ecx
c0014398:	51                   	push   ecx
c0014399:	50                   	push   eax
c001439a:	68 e3 1b 02 c0       	push   0xc0021be3
c001439f:	e8 7b ad ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c00143a4:	83 c4 10             	add    esp,0x10
c00143a7:	b8 2e 07 02 c0       	mov    eax,0xc002072e
c00143ac:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00143b3:	75 05                	jne    c00143ba <CPU::displayFeatures()+0x26a>
c00143b5:	b8 32 07 02 c0       	mov    eax,0xc0020732
c00143ba:	52                   	push   edx
c00143bb:	52                   	push   edx
c00143bc:	50                   	push   eax
c00143bd:	68 fa 1b 02 c0       	push   0xc0021bfa
c00143c2:	e8 58 ad ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c00143c7:	83 c4 18             	add    esp,0x18
c00143ca:	5b                   	pop    ebx
c00143cb:	c3                   	ret    

c00143cc <CPU::detectFeatures()>:
c00143cc:	55                   	push   ebp
c00143cd:	57                   	push   edi
c00143ce:	56                   	push   esi
c00143cf:	53                   	push   ebx
c00143d0:	83 ec 50             	sub    esp,0x50
c00143d3:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00143d7:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00143e1:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00143e8:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c00143ee:	6a 0d                	push   0xd
c00143f0:	6a 00                	push   0x0
c00143f2:	57                   	push   edi
c00143f3:	e8 10 c2 fe ff       	call   c0000608 <memset>
c00143f8:	83 c4 10             	add    esp,0x10
c00143fb:	a1 88 3d 02 c0       	mov    eax,ds:0xc0023d88
c0014400:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0014407:	0f 84 20 09 00 00    	je     c0014d2d <CPU::detectFeatures()+0x961>
c001440d:	83 ec 0c             	sub    esp,0xc
c0014410:	6a 10                	push   0x10
c0014412:	e8 e0 fb ff ff       	call   c0013ff7 <cpuidCheckEDX(unsigned int)>
c0014417:	83 e0 01             	and    eax,0x1
c001441a:	8d 14 00             	lea    edx,[eax+eax*1]
c001441d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014423:	83 e0 fd             	and    eax,0xfffffffd
c0014426:	09 d0                	or     eax,edx
c0014428:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001442e:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0014435:	e8 bd fb ff ff       	call   c0013ff7 <cpuidCheckEDX(unsigned int)>
c001443a:	83 e0 01             	and    eax,0x1
c001443d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014444:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001444a:	83 e0 fb             	and    eax,0xfffffffb
c001444d:	09 d0                	or     eax,edx
c001444f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014455:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001445c:	e8 96 fb ff ff       	call   c0013ff7 <cpuidCheckEDX(unsigned int)>
c0014461:	83 e0 01             	and    eax,0x1
c0014464:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001446b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014471:	83 e0 f7             	and    eax,0xfffffff7
c0014474:	09 d0                	or     eax,edx
c0014476:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001447c:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0014483:	e8 6f fb ff ff       	call   c0013ff7 <cpuidCheckEDX(unsigned int)>
c0014488:	83 e0 01             	and    eax,0x1
c001448b:	c1 e0 04             	shl    eax,0x4
c001448e:	88 c2                	mov    dl,al
c0014490:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014496:	83 e0 ef             	and    eax,0xffffffef
c0014499:	09 d0                	or     eax,edx
c001449b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00144a1:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00144a8:	e8 4a fb ff ff       	call   c0013ff7 <cpuidCheckEDX(unsigned int)>
c00144ad:	83 e0 01             	and    eax,0x1
c00144b0:	c1 e0 05             	shl    eax,0x5
c00144b3:	88 c2                	mov    dl,al
c00144b5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00144bb:	83 e0 df             	and    eax,0xffffffdf
c00144be:	09 d0                	or     eax,edx
c00144c0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00144c6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00144cd:	e8 25 fb ff ff       	call   c0013ff7 <cpuidCheckEDX(unsigned int)>
c00144d2:	83 e0 01             	and    eax,0x1
c00144d5:	8d 14 00             	lea    edx,[eax+eax*1]
c00144d8:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00144de:	83 e0 fd             	and    eax,0xfffffffd
c00144e1:	09 d0                	or     eax,edx
c00144e3:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00144e9:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00144f0:	e8 02 fb ff ff       	call   c0013ff7 <cpuidCheckEDX(unsigned int)>
c00144f5:	83 e0 01             	and    eax,0x1
c00144f8:	c1 e0 06             	shl    eax,0x6
c00144fb:	88 c2                	mov    dl,al
c00144fd:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014503:	83 e0 bf             	and    eax,0xffffffbf
c0014506:	09 d0                	or     eax,edx
c0014508:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001450e:	58                   	pop    eax
c001450f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0014513:	56                   	push   esi
c0014514:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0014518:	55                   	push   ebp
c0014519:	8d 44 24 28          	lea    eax,[esp+0x28]
c001451d:	50                   	push   eax
c001451e:	8d 54 24 28          	lea    edx,[esp+0x28]
c0014522:	52                   	push   edx
c0014523:	6a 00                	push   0x0
c0014525:	e8 4a fa ff ff       	call   c0013f74 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001452a:	83 c4 1c             	add    esp,0x1c
c001452d:	6a 04                	push   0x4
c001452f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0014533:	50                   	push   eax
c0014534:	57                   	push   edi
c0014535:	e8 98 c0 fe ff       	call   c00005d2 <memcpy>
c001453a:	83 c4 0c             	add    esp,0xc
c001453d:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0014543:	6a 04                	push   0x4
c0014545:	56                   	push   esi
c0014546:	50                   	push   eax
c0014547:	e8 86 c0 fe ff       	call   c00005d2 <memcpy>
c001454c:	83 c4 0c             	add    esp,0xc
c001454f:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0014555:	6a 04                	push   0x4
c0014557:	55                   	push   ebp
c0014558:	50                   	push   eax
c0014559:	e8 74 c0 fe ff       	call   c00005d2 <memcpy>
c001455e:	58                   	pop    eax
c001455f:	5a                   	pop    edx
c0014560:	68 11 1c 02 c0       	push   0xc0021c11
c0014565:	57                   	push   edi
c0014566:	e8 8d c1 fe ff       	call   c00006f8 <strcmp>
c001456b:	83 c4 10             	add    esp,0x10
c001456e:	85 c0                	test   eax,eax
c0014570:	75 0f                	jne    c0014581 <CPU::detectFeatures()+0x1b5>
c0014572:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001457c:	e9 22 02 00 00       	jmp    c00147a3 <CPU::detectFeatures()+0x3d7>
c0014581:	50                   	push   eax
c0014582:	50                   	push   eax
c0014583:	68 1e 1c 02 c0       	push   0xc0021c1e
c0014588:	57                   	push   edi
c0014589:	e8 6a c1 fe ff       	call   c00006f8 <strcmp>
c001458e:	83 c4 10             	add    esp,0x10
c0014591:	85 c0                	test   eax,eax
c0014593:	74 dd                	je     c0014572 <CPU::detectFeatures()+0x1a6>
c0014595:	51                   	push   ecx
c0014596:	51                   	push   ecx
c0014597:	68 2b 1c 02 c0       	push   0xc0021c2b
c001459c:	57                   	push   edi
c001459d:	e8 56 c1 fe ff       	call   c00006f8 <strcmp>
c00145a2:	83 c4 10             	add    esp,0x10
c00145a5:	85 c0                	test   eax,eax
c00145a7:	74 2a                	je     c00145d3 <CPU::detectFeatures()+0x207>
c00145a9:	52                   	push   edx
c00145aa:	52                   	push   edx
c00145ab:	68 38 1c 02 c0       	push   0xc0021c38
c00145b0:	57                   	push   edi
c00145b1:	e8 42 c1 fe ff       	call   c00006f8 <strcmp>
c00145b6:	83 c4 10             	add    esp,0x10
c00145b9:	85 c0                	test   eax,eax
c00145bb:	74 16                	je     c00145d3 <CPU::detectFeatures()+0x207>
c00145bd:	50                   	push   eax
c00145be:	50                   	push   eax
c00145bf:	68 45 1c 02 c0       	push   0xc0021c45
c00145c4:	57                   	push   edi
c00145c5:	e8 2e c1 fe ff       	call   c00006f8 <strcmp>
c00145ca:	83 c4 10             	add    esp,0x10
c00145cd:	85 c0                	test   eax,eax
c00145cf:	74 48                	je     c0014619 <CPU::detectFeatures()+0x24d>
c00145d1:	eb 0f                	jmp    c00145e2 <CPU::detectFeatures()+0x216>
c00145d3:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00145dd:	e9 c1 01 00 00       	jmp    c00147a3 <CPU::detectFeatures()+0x3d7>
c00145e2:	50                   	push   eax
c00145e3:	50                   	push   eax
c00145e4:	68 52 1c 02 c0       	push   0xc0021c52
c00145e9:	57                   	push   edi
c00145ea:	e8 09 c1 fe ff       	call   c00006f8 <strcmp>
c00145ef:	83 c4 10             	add    esp,0x10
c00145f2:	85 c0                	test   eax,eax
c00145f4:	74 23                	je     c0014619 <CPU::detectFeatures()+0x24d>
c00145f6:	50                   	push   eax
c00145f7:	50                   	push   eax
c00145f8:	68 5f 1c 02 c0       	push   0xc0021c5f
c00145fd:	57                   	push   edi
c00145fe:	e8 f5 c0 fe ff       	call   c00006f8 <strcmp>
c0014603:	83 c4 10             	add    esp,0x10
c0014606:	85 c0                	test   eax,eax
c0014608:	75 1e                	jne    c0014628 <CPU::detectFeatures()+0x25c>
c001460a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014614:	e9 8a 01 00 00       	jmp    c00147a3 <CPU::detectFeatures()+0x3d7>
c0014619:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0014623:	e9 7b 01 00 00       	jmp    c00147a3 <CPU::detectFeatures()+0x3d7>
c0014628:	50                   	push   eax
c0014629:	50                   	push   eax
c001462a:	68 6c 1c 02 c0       	push   0xc0021c6c
c001462f:	57                   	push   edi
c0014630:	e8 c3 c0 fe ff       	call   c00006f8 <strcmp>
c0014635:	83 c4 10             	add    esp,0x10
c0014638:	85 c0                	test   eax,eax
c001463a:	75 0f                	jne    c001464b <CPU::detectFeatures()+0x27f>
c001463c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0014646:	e9 58 01 00 00       	jmp    c00147a3 <CPU::detectFeatures()+0x3d7>
c001464b:	50                   	push   eax
c001464c:	50                   	push   eax
c001464d:	68 2b 1c 02 c0       	push   0xc0021c2b
c0014652:	57                   	push   edi
c0014653:	e8 a0 c0 fe ff       	call   c00006f8 <strcmp>
c0014658:	83 c4 10             	add    esp,0x10
c001465b:	85 c0                	test   eax,eax
c001465d:	75 0f                	jne    c001466e <CPU::detectFeatures()+0x2a2>
c001465f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0014669:	e9 35 01 00 00       	jmp    c00147a3 <CPU::detectFeatures()+0x3d7>
c001466e:	50                   	push   eax
c001466f:	50                   	push   eax
c0014670:	68 79 1c 02 c0       	push   0xc0021c79
c0014675:	57                   	push   edi
c0014676:	e8 7d c0 fe ff       	call   c00006f8 <strcmp>
c001467b:	83 c4 10             	add    esp,0x10
c001467e:	85 c0                	test   eax,eax
c0014680:	75 0f                	jne    c0014691 <CPU::detectFeatures()+0x2c5>
c0014682:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001468c:	e9 12 01 00 00       	jmp    c00147a3 <CPU::detectFeatures()+0x3d7>
c0014691:	51                   	push   ecx
c0014692:	51                   	push   ecx
c0014693:	68 86 1c 02 c0       	push   0xc0021c86
c0014698:	57                   	push   edi
c0014699:	e8 5a c0 fe ff       	call   c00006f8 <strcmp>
c001469e:	83 c4 10             	add    esp,0x10
c00146a1:	85 c0                	test   eax,eax
c00146a3:	75 0f                	jne    c00146b4 <CPU::detectFeatures()+0x2e8>
c00146a5:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00146af:	e9 ef 00 00 00       	jmp    c00147a3 <CPU::detectFeatures()+0x3d7>
c00146b4:	52                   	push   edx
c00146b5:	52                   	push   edx
c00146b6:	68 93 1c 02 c0       	push   0xc0021c93
c00146bb:	57                   	push   edi
c00146bc:	e8 37 c0 fe ff       	call   c00006f8 <strcmp>
c00146c1:	83 c4 10             	add    esp,0x10
c00146c4:	85 c0                	test   eax,eax
c00146c6:	75 0f                	jne    c00146d7 <CPU::detectFeatures()+0x30b>
c00146c8:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00146d2:	e9 cc 00 00 00       	jmp    c00147a3 <CPU::detectFeatures()+0x3d7>
c00146d7:	50                   	push   eax
c00146d8:	50                   	push   eax
c00146d9:	68 a0 1c 02 c0       	push   0xc0021ca0
c00146de:	57                   	push   edi
c00146df:	e8 14 c0 fe ff       	call   c00006f8 <strcmp>
c00146e4:	83 c4 10             	add    esp,0x10
c00146e7:	85 c0                	test   eax,eax
c00146e9:	75 0f                	jne    c00146fa <CPU::detectFeatures()+0x32e>
c00146eb:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00146f5:	e9 a9 00 00 00       	jmp    c00147a3 <CPU::detectFeatures()+0x3d7>
c00146fa:	50                   	push   eax
c00146fb:	50                   	push   eax
c00146fc:	68 ad 1c 02 c0       	push   0xc0021cad
c0014701:	57                   	push   edi
c0014702:	e8 f1 bf fe ff       	call   c00006f8 <strcmp>
c0014707:	83 c4 10             	add    esp,0x10
c001470a:	85 c0                	test   eax,eax
c001470c:	75 0f                	jne    c001471d <CPU::detectFeatures()+0x351>
c001470e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0014718:	e9 86 00 00 00       	jmp    c00147a3 <CPU::detectFeatures()+0x3d7>
c001471d:	50                   	push   eax
c001471e:	50                   	push   eax
c001471f:	68 ba 1c 02 c0       	push   0xc0021cba
c0014724:	57                   	push   edi
c0014725:	e8 ce bf fe ff       	call   c00006f8 <strcmp>
c001472a:	83 c4 10             	add    esp,0x10
c001472d:	85 c0                	test   eax,eax
c001472f:	75 0c                	jne    c001473d <CPU::detectFeatures()+0x371>
c0014731:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001473b:	eb 66                	jmp    c00147a3 <CPU::detectFeatures()+0x3d7>
c001473d:	50                   	push   eax
c001473e:	50                   	push   eax
c001473f:	68 c7 1c 02 c0       	push   0xc0021cc7
c0014744:	57                   	push   edi
c0014745:	e8 ae bf fe ff       	call   c00006f8 <strcmp>
c001474a:	83 c4 10             	add    esp,0x10
c001474d:	85 c0                	test   eax,eax
c001474f:	75 0c                	jne    c001475d <CPU::detectFeatures()+0x391>
c0014751:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001475b:	eb 46                	jmp    c00147a3 <CPU::detectFeatures()+0x3d7>
c001475d:	50                   	push   eax
c001475e:	50                   	push   eax
c001475f:	68 d4 1c 02 c0       	push   0xc0021cd4
c0014764:	57                   	push   edi
c0014765:	e8 8e bf fe ff       	call   c00006f8 <strcmp>
c001476a:	83 c4 10             	add    esp,0x10
c001476d:	85 c0                	test   eax,eax
c001476f:	74 e0                	je     c0014751 <CPU::detectFeatures()+0x385>
c0014771:	50                   	push   eax
c0014772:	50                   	push   eax
c0014773:	68 e1 1c 02 c0       	push   0xc0021ce1
c0014778:	57                   	push   edi
c0014779:	e8 7a bf fe ff       	call   c00006f8 <strcmp>
c001477e:	83 c4 10             	add    esp,0x10
c0014781:	85 c0                	test   eax,eax
c0014783:	74 cc                	je     c0014751 <CPU::detectFeatures()+0x385>
c0014785:	51                   	push   ecx
c0014786:	51                   	push   ecx
c0014787:	68 ee 1c 02 c0       	push   0xc0021cee
c001478c:	57                   	push   edi
c001478d:	e8 66 bf fe ff       	call   c00006f8 <strcmp>
c0014792:	83 c4 10             	add    esp,0x10
c0014795:	85 c0                	test   eax,eax
c0014797:	74 b8                	je     c0014751 <CPU::detectFeatures()+0x385>
c0014799:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00147a3:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00147a8:	0f 86 be 00 00 00    	jbe    c001486c <CPU::detectFeatures()+0x4a0>
c00147ae:	83 ec 0c             	sub    esp,0xc
c00147b1:	68 80 00 00 00       	push   0x80
c00147b6:	e8 96 f8 ff ff       	call   c0014051 <cpuidCheckExtendedEBX(unsigned int)>
c00147bb:	83 e0 01             	and    eax,0x1
c00147be:	c1 e0 06             	shl    eax,0x6
c00147c1:	88 c2                	mov    dl,al
c00147c3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00147c9:	83 e0 bf             	and    eax,0xffffffbf
c00147cc:	09 d0                	or     eax,edx
c00147ce:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00147d4:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00147db:	e8 71 f8 ff ff       	call   c0014051 <cpuidCheckExtendedEBX(unsigned int)>
c00147e0:	83 e0 01             	and    eax,0x1
c00147e3:	c1 e0 04             	shl    eax,0x4
c00147e6:	88 c2                	mov    dl,al
c00147e8:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00147ee:	83 e0 ef             	and    eax,0xffffffef
c00147f1:	09 d0                	or     eax,edx
c00147f3:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00147f9:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0014800:	e8 4c f8 ff ff       	call   c0014051 <cpuidCheckExtendedEBX(unsigned int)>
c0014805:	c1 e0 07             	shl    eax,0x7
c0014808:	88 c2                	mov    dl,al
c001480a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014810:	83 e0 7f             	and    eax,0x7f
c0014813:	09 d0                	or     eax,edx
c0014815:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001481b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0014822:	e8 57 f8 ff ff       	call   c001407e <cpuidCheckExtendedECX(unsigned int)>
c0014827:	83 e0 01             	and    eax,0x1
c001482a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014831:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014837:	83 e0 f7             	and    eax,0xfffffff7
c001483a:	09 d0                	or     eax,edx
c001483c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014842:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0014849:	e8 30 f8 ff ff       	call   c001407e <cpuidCheckExtendedECX(unsigned int)>
c001484e:	83 c4 10             	add    esp,0x10
c0014851:	83 e0 01             	and    eax,0x1
c0014854:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001485b:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014861:	83 e0 fb             	and    eax,0xfffffffb
c0014864:	09 d0                	or     eax,edx
c0014866:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001486c:	83 ec 0c             	sub    esp,0xc
c001486f:	56                   	push   esi
c0014870:	55                   	push   ebp
c0014871:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0014875:	57                   	push   edi
c0014876:	8d 44 24 28          	lea    eax,[esp+0x28]
c001487a:	50                   	push   eax
c001487b:	6a 01                	push   0x1
c001487d:	e8 f2 f6 ff ff       	call   c0013f74 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014882:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014886:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001488c:	88 ca                	mov    dl,cl
c001488e:	83 e0 f0             	and    eax,0xfffffff0
c0014891:	83 e2 0f             	and    edx,0xf
c0014894:	09 d0                	or     eax,edx
c0014896:	88 ca                	mov    dl,cl
c0014898:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001489e:	c0 ea 04             	shr    dl,0x4
c00148a1:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00148a5:	0f b6 c2             	movzx  eax,dl
c00148a8:	83 c4 20             	add    esp,0x20
c00148ab:	c1 e0 06             	shl    eax,0x6
c00148ae:	89 c5                	mov    ebp,eax
c00148b0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00148b6:	66 25 3f c0          	and    ax,0xc03f
c00148ba:	09 e8                	or     eax,ebp
c00148bc:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00148c3:	89 c8                	mov    eax,ecx
c00148c5:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00148cb:	c1 e8 08             	shr    eax,0x8
c00148ce:	83 e2 3f             	and    edx,0x3f
c00148d1:	83 e0 0f             	and    eax,0xf
c00148d4:	89 c5                	mov    ebp,eax
c00148d6:	c1 e5 06             	shl    ebp,0x6
c00148d9:	09 d5                	or     ebp,edx
c00148db:	89 ea                	mov    edx,ebp
c00148dd:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00148e3:	88 c2                	mov    dl,al
c00148e5:	c0 ea 02             	shr    dl,0x2
c00148e8:	89 d5                	mov    ebp,edx
c00148ea:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00148f0:	83 e2 c0             	and    edx,0xffffffc0
c00148f3:	09 d5                	or     ebp,edx
c00148f5:	89 ea                	mov    edx,ebp
c00148f7:	89 cd                	mov    ebp,ecx
c00148f9:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00148ff:	c1 ed 0c             	shr    ebp,0xc
c0014902:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0014908:	83 e5 03             	and    ebp,0x3
c001490b:	83 e2 cf             	and    edx,0xffffffcf
c001490e:	c1 e5 04             	shl    ebp,0x4
c0014911:	09 d5                	or     ebp,edx
c0014913:	3c 06                	cmp    al,0x6
c0014915:	89 ea                	mov    edx,ebp
c0014917:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001491d:	74 04                	je     c0014923 <CPU::detectFeatures()+0x557>
c001491f:	3c 0f                	cmp    al,0xf
c0014921:	75 5c                	jne    c001497f <CPU::detectFeatures()+0x5b3>
c0014923:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0014927:	89 cd                	mov    ebp,ecx
c0014929:	c1 ed 10             	shr    ebp,0x10
c001492c:	c1 e5 04             	shl    ebp,0x4
c001492f:	09 ea                	or     edx,ebp
c0014931:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0014937:	0f b6 d2             	movzx  edx,dl
c001493a:	66 81 e5 3f c0       	and    bp,0xc03f
c001493f:	c1 e2 06             	shl    edx,0x6
c0014942:	09 ea                	or     edx,ebp
c0014944:	3c 0f                	cmp    al,0xf
c0014946:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001494d:	75 30                	jne    c001497f <CPU::detectFeatures()+0x5b3>
c001494f:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0014955:	c1 e9 14             	shr    ecx,0x14
c0014958:	83 e0 3f             	and    eax,0x3f
c001495b:	83 c1 0f             	add    ecx,0xf
c001495e:	88 ca                	mov    dl,cl
c0014960:	c0 e9 02             	shr    cl,0x2
c0014963:	c1 e2 06             	shl    edx,0x6
c0014966:	09 d0                	or     eax,edx
c0014968:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001496e:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0014974:	83 e0 c0             	and    eax,0xffffffc0
c0014977:	09 c1                	or     ecx,eax
c0014979:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001497f:	83 ec 0c             	sub    esp,0xc
c0014982:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0014989:	56                   	push   esi
c001498a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001498e:	50                   	push   eax
c001498f:	57                   	push   edi
c0014990:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0014994:	55                   	push   ebp
c0014995:	68 00 00 00 80       	push   0x80000000
c001499a:	e8 d5 f5 ff ff       	call   c0013f74 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001499f:	83 c4 20             	add    esp,0x20
c00149a2:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00149aa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00149ae:	76 1e                	jbe    c00149ce <CPU::detectFeatures()+0x602>
c00149b0:	83 ec 0c             	sub    esp,0xc
c00149b3:	56                   	push   esi
c00149b4:	50                   	push   eax
c00149b5:	57                   	push   edi
c00149b6:	55                   	push   ebp
c00149b7:	68 01 00 00 80       	push   0x80000001
c00149bc:	e8 b3 f5 ff ff       	call   c0013f74 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00149c1:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00149cb:	83 c4 20             	add    esp,0x20
c00149ce:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00149d4:	83 f8 01             	cmp    eax,0x1
c00149d7:	75 6f                	jne    c0014a48 <CPU::detectFeatures()+0x67c>
c00149d9:	51                   	push   ecx
c00149da:	51                   	push   ecx
c00149db:	68 fa 1c 02 c0       	push   0xc0021cfa
c00149e0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00149e4:	56                   	push   esi
c00149e5:	e8 bd bc fe ff       	call   c00006a7 <strcpy>
c00149ea:	5f                   	pop    edi
c00149eb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00149f1:	5d                   	pop    ebp
c00149f2:	66 c1 e8 06          	shr    ax,0x6
c00149f6:	0f b6 c0             	movzx  eax,al
c00149f9:	50                   	push   eax
c00149fa:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014a00:	c1 e8 0e             	shr    eax,0xe
c0014a03:	0f b6 c0             	movzx  eax,al
c0014a06:	50                   	push   eax
c0014a07:	e8 13 f2 ff ff       	call   c0013c1f <lookupIntelCPUName(unsigned char, unsigned char)>
c0014a0c:	5a                   	pop    edx
c0014a0d:	59                   	pop    ecx
c0014a0e:	50                   	push   eax
c0014a0f:	56                   	push   esi
c0014a10:	e8 49 bd fe ff       	call   c000075e <strcat>
c0014a15:	5f                   	pop    edi
c0014a16:	5d                   	pop    ebp
c0014a17:	56                   	push   esi
c0014a18:	53                   	push   ebx
c0014a19:	e8 ee bc ff ff       	call   c001070c <Device::setName(char const*)>
c0014a1e:	58                   	pop    eax
c0014a1f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0014a25:	5a                   	pop    edx
c0014a26:	68 01 1d 02 c0       	push   0xc0021d01
c0014a2b:	50                   	push   eax
c0014a2c:	e8 c7 bc fe ff       	call   c00006f8 <strcmp>
c0014a31:	83 c4 10             	add    esp,0x10
c0014a34:	85 c0                	test   eax,eax
c0014a36:	0f 85 73 03 00 00    	jne    c0014daf <CPU::detectFeatures()+0x9e3>
c0014a3c:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0014a43:	e9 67 03 00 00       	jmp    c0014daf <CPU::detectFeatures()+0x9e3>
c0014a48:	83 f8 02             	cmp    eax,0x2
c0014a4b:	0f 85 b5 00 00 00    	jne    c0014b06 <CPU::detectFeatures()+0x73a>
c0014a51:	57                   	push   edi
c0014a52:	57                   	push   edi
c0014a53:	68 13 1d 02 c0       	push   0xc0021d13
c0014a58:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014a5c:	56                   	push   esi
c0014a5d:	e8 45 bc fe ff       	call   c00006a7 <strcpy>
c0014a62:	5d                   	pop    ebp
c0014a63:	58                   	pop    eax
c0014a64:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014a6a:	66 c1 e8 06          	shr    ax,0x6
c0014a6e:	0f b6 c0             	movzx  eax,al
c0014a71:	50                   	push   eax
c0014a72:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014a78:	c1 e8 0e             	shr    eax,0xe
c0014a7b:	0f b6 c0             	movzx  eax,al
c0014a7e:	50                   	push   eax
c0014a7f:	e8 07 f0 ff ff       	call   c0013a8b <lookupAMDCPUName(unsigned char, unsigned char)>
c0014a84:	5a                   	pop    edx
c0014a85:	59                   	pop    ecx
c0014a86:	50                   	push   eax
c0014a87:	56                   	push   esi
c0014a88:	e8 d1 bc fe ff       	call   c000075e <strcat>
c0014a8d:	5f                   	pop    edi
c0014a8e:	5d                   	pop    ebp
c0014a8f:	56                   	push   esi
c0014a90:	53                   	push   ebx
c0014a91:	e8 76 bc ff ff       	call   c001070c <Device::setName(char const*)>
c0014a96:	58                   	pop    eax
c0014a97:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0014a9d:	5a                   	pop    edx
c0014a9e:	68 18 1d 02 c0       	push   0xc0021d18
c0014aa3:	50                   	push   eax
c0014aa4:	e8 4f bc fe ff       	call   c00006f8 <strcmp>
c0014aa9:	83 c4 10             	add    esp,0x10
c0014aac:	85 c0                	test   eax,eax
c0014aae:	75 20                	jne    c0014ad0 <CPU::detectFeatures()+0x704>
c0014ab0:	8b 15 88 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023d88
c0014ab6:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014abc:	a8 01                	test   al,0x1
c0014abe:	74 10                	je     c0014ad0 <CPU::detectFeatures()+0x704>
c0014ac0:	83 e0 fe             	and    eax,0xfffffffe
c0014ac3:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014ac9:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0014ad0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014ad6:	c1 e8 0e             	shr    eax,0xe
c0014ad9:	3c 05                	cmp    al,0x5
c0014adb:	0f 85 ce 02 00 00    	jne    c0014daf <CPU::detectFeatures()+0x9e3>
c0014ae1:	56                   	push   esi
c0014ae2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0014ae8:	83 e0 0f             	and    eax,0xf
c0014aeb:	50                   	push   eax
c0014aec:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014af2:	66 c1 e8 06          	shr    ax,0x6
c0014af6:	0f b6 c0             	movzx  eax,al
c0014af9:	50                   	push   eax
c0014afa:	6a 05                	push   0x5
c0014afc:	e8 00 f4 ff ff       	call   c0013f01 <AMD_K6_writeback(int, int, int)>
c0014b01:	e9 1f 02 00 00       	jmp    c0014d25 <CPU::detectFeatures()+0x959>
c0014b06:	8d 50 fd             	lea    edx,[eax-0x3]
c0014b09:	83 fa 01             	cmp    edx,0x1
c0014b0c:	76 09                	jbe    c0014b17 <CPU::detectFeatures()+0x74b>
c0014b0e:	83 f8 06             	cmp    eax,0x6
c0014b11:	0f 85 91 01 00 00    	jne    c0014ca8 <CPU::detectFeatures()+0x8dc>
c0014b17:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014b1d:	c1 ea 0e             	shr    edx,0xe
c0014b20:	80 fa 05             	cmp    dl,0x5
c0014b23:	75 7b                	jne    c0014ba0 <CPU::detectFeatures()+0x7d4>
c0014b25:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014b2b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0014b30:	66 81 fa 00 01       	cmp    dx,0x100
c0014b35:	75 0c                	jne    c0014b43 <CPU::detectFeatures()+0x777>
c0014b37:	51                   	push   ecx
c0014b38:	51                   	push   ecx
c0014b39:	68 1f 1d 02 c0       	push   0xc0021d1f
c0014b3e:	e9 dc 01 00 00       	jmp    c0014d1f <CPU::detectFeatures()+0x953>
c0014b43:	66 81 fa 00 02       	cmp    dx,0x200
c0014b48:	75 0c                	jne    c0014b56 <CPU::detectFeatures()+0x78a>
c0014b4a:	52                   	push   edx
c0014b4b:	52                   	push   edx
c0014b4c:	68 32 1d 02 c0       	push   0xc0021d32
c0014b51:	e9 c9 01 00 00       	jmp    c0014d1f <CPU::detectFeatures()+0x953>
c0014b56:	66 81 fa 40 02       	cmp    dx,0x240
c0014b5b:	75 0c                	jne    c0014b69 <CPU::detectFeatures()+0x79d>
c0014b5d:	50                   	push   eax
c0014b5e:	50                   	push   eax
c0014b5f:	68 44 1d 02 c0       	push   0xc0021d44
c0014b64:	e9 b6 01 00 00       	jmp    c0014d1f <CPU::detectFeatures()+0x953>
c0014b69:	83 f8 06             	cmp    eax,0x6
c0014b6c:	75 0c                	jne    c0014b7a <CPU::detectFeatures()+0x7ae>
c0014b6e:	50                   	push   eax
c0014b6f:	50                   	push   eax
c0014b70:	68 56 1d 02 c0       	push   0xc0021d56
c0014b75:	e9 a5 01 00 00       	jmp    c0014d1f <CPU::detectFeatures()+0x953>
c0014b7a:	83 f8 04             	cmp    eax,0x4
c0014b7d:	75 0c                	jne    c0014b8b <CPU::detectFeatures()+0x7bf>
c0014b7f:	50                   	push   eax
c0014b80:	50                   	push   eax
c0014b81:	68 62 1d 02 c0       	push   0xc0021d62
c0014b86:	e9 94 01 00 00       	jmp    c0014d1f <CPU::detectFeatures()+0x953>
c0014b8b:	83 f8 03             	cmp    eax,0x3
c0014b8e:	0f 85 1b 02 00 00    	jne    c0014daf <CPU::detectFeatures()+0x9e3>
c0014b94:	50                   	push   eax
c0014b95:	50                   	push   eax
c0014b96:	68 6a 1d 02 c0       	push   0xc0021d6a
c0014b9b:	e9 7f 01 00 00       	jmp    c0014d1f <CPU::detectFeatures()+0x953>
c0014ba0:	80 fa 06             	cmp    dl,0x6
c0014ba3:	0f 85 db 00 00 00    	jne    c0014c84 <CPU::detectFeatures()+0x8b8>
c0014ba9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014baf:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0014bb4:	66 81 fa 80 01       	cmp    dx,0x180
c0014bb9:	75 0c                	jne    c0014bc7 <CPU::detectFeatures()+0x7fb>
c0014bbb:	50                   	push   eax
c0014bbc:	50                   	push   eax
c0014bbd:	68 75 1d 02 c0       	push   0xc0021d75
c0014bc2:	e9 58 01 00 00       	jmp    c0014d1f <CPU::detectFeatures()+0x953>
c0014bc7:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0014bcd:	66 f7 c1 80 ff       	test   cx,0xff80
c0014bd2:	75 0c                	jne    c0014be0 <CPU::detectFeatures()+0x814>
c0014bd4:	50                   	push   eax
c0014bd5:	50                   	push   eax
c0014bd6:	68 85 1d 02 c0       	push   0xc0021d85
c0014bdb:	e9 3f 01 00 00       	jmp    c0014d1f <CPU::detectFeatures()+0x953>
c0014be0:	66 81 fa 40 02       	cmp    dx,0x240
c0014be5:	75 0c                	jne    c0014bf3 <CPU::detectFeatures()+0x827>
c0014be7:	55                   	push   ebp
c0014be8:	55                   	push   ebp
c0014be9:	68 8c 1d 02 c0       	push   0xc0021d8c
c0014bee:	e9 2c 01 00 00       	jmp    c0014d1f <CPU::detectFeatures()+0x953>
c0014bf3:	66 81 fa 80 02       	cmp    dx,0x280
c0014bf8:	75 0c                	jne    c0014c06 <CPU::detectFeatures()+0x83a>
c0014bfa:	57                   	push   edi
c0014bfb:	57                   	push   edi
c0014bfc:	68 95 1d 02 c0       	push   0xc0021d95
c0014c01:	e9 19 01 00 00       	jmp    c0014d1f <CPU::detectFeatures()+0x953>
c0014c06:	66 81 fa 40 03       	cmp    dx,0x340
c0014c0b:	74 ed                	je     c0014bfa <CPU::detectFeatures()+0x82e>
c0014c0d:	66 81 fa c0 03       	cmp    dx,0x3c0
c0014c12:	75 0c                	jne    c0014c20 <CPU::detectFeatures()+0x854>
c0014c14:	56                   	push   esi
c0014c15:	56                   	push   esi
c0014c16:	68 9c 1d 02 c0       	push   0xc0021d9c
c0014c1b:	e9 ff 00 00 00       	jmp    c0014d1f <CPU::detectFeatures()+0x953>
c0014c20:	83 f8 06             	cmp    eax,0x6
c0014c23:	0f 84 45 ff ff ff    	je     c0014b6e <CPU::detectFeatures()+0x7a2>
c0014c29:	83 f8 04             	cmp    eax,0x4
c0014c2c:	0f 84 4d ff ff ff    	je     c0014b7f <CPU::detectFeatures()+0x7b3>
c0014c32:	83 f8 03             	cmp    eax,0x3
c0014c35:	0f 85 74 01 00 00    	jne    c0014daf <CPU::detectFeatures()+0x9e3>
c0014c3b:	51                   	push   ecx
c0014c3c:	51                   	push   ecx
c0014c3d:	68 a5 1d 02 c0       	push   0xc0021da5
c0014c42:	53                   	push   ebx
c0014c43:	e8 c4 ba ff ff       	call   c001070c <Device::setName(char const*)>
c0014c48:	b1 c1                	mov    cl,0xc1
c0014c4a:	88 c8                	mov    al,cl
c0014c4c:	e6 22                	out    0x22,al
c0014c4e:	e4 23                	in     al,0x23
c0014c50:	88 c2                	mov    dl,al
c0014c52:	88 c8                	mov    al,cl
c0014c54:	e6 22                	out    0x22,al
c0014c56:	88 d0                	mov    al,dl
c0014c58:	83 c8 10             	or     eax,0x10
c0014c5b:	e6 23                	out    0x23,al
c0014c5d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0014c64:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0014c67:	89 d0                	mov    eax,edx
c0014c69:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0014c6f:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0014c73:	40                   	inc    eax
c0014c74:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0014c7a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0014c7f:	e9 a1 00 00 00       	jmp    c0014d25 <CPU::detectFeatures()+0x959>
c0014c84:	83 f8 06             	cmp    eax,0x6
c0014c87:	0f 84 e1 fe ff ff    	je     c0014b6e <CPU::detectFeatures()+0x7a2>
c0014c8d:	83 f8 04             	cmp    eax,0x4
c0014c90:	0f 84 e9 fe ff ff    	je     c0014b7f <CPU::detectFeatures()+0x7b3>
c0014c96:	83 f8 03             	cmp    eax,0x3
c0014c99:	0f 85 10 01 00 00    	jne    c0014daf <CPU::detectFeatures()+0x9e3>
c0014c9f:	52                   	push   edx
c0014ca0:	52                   	push   edx
c0014ca1:	68 b0 1d 02 c0       	push   0xc0021db0
c0014ca6:	eb 77                	jmp    c0014d1f <CPU::detectFeatures()+0x953>
c0014ca8:	83 f8 07             	cmp    eax,0x7
c0014cab:	75 09                	jne    c0014cb6 <CPU::detectFeatures()+0x8ea>
c0014cad:	50                   	push   eax
c0014cae:	50                   	push   eax
c0014caf:	68 ba 1d 02 c0       	push   0xc0021dba
c0014cb4:	eb 69                	jmp    c0014d1f <CPU::detectFeatures()+0x953>
c0014cb6:	83 f8 0a             	cmp    eax,0xa
c0014cb9:	75 09                	jne    c0014cc4 <CPU::detectFeatures()+0x8f8>
c0014cbb:	50                   	push   eax
c0014cbc:	50                   	push   eax
c0014cbd:	68 c5 1d 02 c0       	push   0xc0021dc5
c0014cc2:	eb 5b                	jmp    c0014d1f <CPU::detectFeatures()+0x953>
c0014cc4:	83 f8 0b             	cmp    eax,0xb
c0014cc7:	75 09                	jne    c0014cd2 <CPU::detectFeatures()+0x906>
c0014cc9:	50                   	push   eax
c0014cca:	50                   	push   eax
c0014ccb:	68 cd 1d 02 c0       	push   0xc0021dcd
c0014cd0:	eb 4d                	jmp    c0014d1f <CPU::detectFeatures()+0x953>
c0014cd2:	83 f8 08             	cmp    eax,0x8
c0014cd5:	75 09                	jne    c0014ce0 <CPU::detectFeatures()+0x914>
c0014cd7:	50                   	push   eax
c0014cd8:	50                   	push   eax
c0014cd9:	68 d6 1d 02 c0       	push   0xc0021dd6
c0014cde:	eb 3f                	jmp    c0014d1f <CPU::detectFeatures()+0x953>
c0014ce0:	83 f8 09             	cmp    eax,0x9
c0014ce3:	75 09                	jne    c0014cee <CPU::detectFeatures()+0x922>
c0014ce5:	50                   	push   eax
c0014ce6:	50                   	push   eax
c0014ce7:	68 de 1d 02 c0       	push   0xc0021dde
c0014cec:	eb 31                	jmp    c0014d1f <CPU::detectFeatures()+0x953>
c0014cee:	83 f8 05             	cmp    eax,0x5
c0014cf1:	75 09                	jne    c0014cfc <CPU::detectFeatures()+0x930>
c0014cf3:	50                   	push   eax
c0014cf4:	50                   	push   eax
c0014cf5:	68 e6 1d 02 c0       	push   0xc0021de6
c0014cfa:	eb 23                	jmp    c0014d1f <CPU::detectFeatures()+0x953>
c0014cfc:	83 f8 0c             	cmp    eax,0xc
c0014cff:	75 09                	jne    c0014d0a <CPU::detectFeatures()+0x93e>
c0014d01:	55                   	push   ebp
c0014d02:	55                   	push   ebp
c0014d03:	68 f4 1d 02 c0       	push   0xc0021df4
c0014d08:	eb 15                	jmp    c0014d1f <CPU::detectFeatures()+0x953>
c0014d0a:	83 f8 0d             	cmp    eax,0xd
c0014d0d:	75 09                	jne    c0014d18 <CPU::detectFeatures()+0x94c>
c0014d0f:	57                   	push   edi
c0014d10:	57                   	push   edi
c0014d11:	68 ff 1d 02 c0       	push   0xc0021dff
c0014d16:	eb 07                	jmp    c0014d1f <CPU::detectFeatures()+0x953>
c0014d18:	56                   	push   esi
c0014d19:	56                   	push   esi
c0014d1a:	68 13 1e 02 c0       	push   0xc0021e13
c0014d1f:	53                   	push   ebx
c0014d20:	e8 e7 b9 ff ff       	call   c001070c <Device::setName(char const*)>
c0014d25:	83 c4 10             	add    esp,0x10
c0014d28:	e9 82 00 00 00       	jmp    c0014daf <CPU::detectFeatures()+0x9e3>
c0014d2d:	51                   	push   ecx
c0014d2e:	51                   	push   ecx
c0014d2f:	68 5f 1c 02 c0       	push   0xc0021c5f
c0014d34:	57                   	push   edi
c0014d35:	e8 6d b9 fe ff       	call   c00006a7 <strcpy>
c0014d3a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014d44:	e8 36 b4 fe ff       	call   c000017f <is486>
c0014d49:	83 c4 10             	add    esp,0x10
c0014d4c:	85 c0                	test   eax,eax
c0014d4e:	74 2d                	je     c0014d7d <CPU::detectFeatures()+0x9b1>
c0014d50:	52                   	push   edx
c0014d51:	52                   	push   edx
c0014d52:	68 1f 1e 02 c0       	push   0xc0021e1f
c0014d57:	53                   	push   ebx
c0014d58:	e8 af b9 ff ff       	call   c001070c <Device::setName(char const*)>
c0014d5d:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0014d64:	e8 0f a4 00 00       	call   c001f178 <CPU::readCR0()>
c0014d69:	83 c4 10             	add    esp,0x10
c0014d6c:	83 e0 14             	and    eax,0x14
c0014d6f:	83 f8 04             	cmp    eax,0x4
c0014d72:	75 1f                	jne    c0014d93 <CPU::detectFeatures()+0x9c7>
c0014d74:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0014d7b:	eb 32                	jmp    c0014daf <CPU::detectFeatures()+0x9e3>
c0014d7d:	50                   	push   eax
c0014d7e:	50                   	push   eax
c0014d7f:	68 2a 1e 02 c0       	push   0xc0021e2a
c0014d84:	53                   	push   ebx
c0014d85:	e8 82 b9 ff ff       	call   c001070c <Device::setName(char const*)>
c0014d8a:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0014d91:	eb d1                	jmp    c0014d64 <CPU::detectFeatures()+0x998>
c0014d93:	e8 c2 b3 fe ff       	call   c000015a <hasLegacyFPU>
c0014d98:	83 e0 01             	and    eax,0x1
c0014d9b:	8d 14 00             	lea    edx,[eax+eax*1]
c0014d9e:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014da4:	83 e0 fd             	and    eax,0xfffffffd
c0014da7:	09 d0                	or     eax,edx
c0014da9:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014daf:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0014db6:	83 c4 4c             	add    esp,0x4c
c0014db9:	5b                   	pop    ebx
c0014dba:	5e                   	pop    esi
c0014dbb:	5f                   	pop    edi
c0014dbc:	5d                   	pop    ebp
c0014dbd:	c3                   	ret    

c0014dbe <CPU::setupSMEP()>:
c0014dbe:	83 ec 0c             	sub    esp,0xc
c0014dc1:	e8 7c a6 00 00       	call   c001f442 <CPU::readCR4()>
c0014dc6:	0d 00 00 10 00       	or     eax,0x100000
c0014dcb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014dcf:	83 c4 0c             	add    esp,0xc
c0014dd2:	e9 86 a6 00 00       	jmp    c001f45d <CPU::writeCR4(unsigned long)>
c0014dd7:	90                   	nop

c0014dd8 <CPU::setupUMIP()>:
c0014dd8:	83 ec 0c             	sub    esp,0xc
c0014ddb:	e8 62 a6 00 00       	call   c001f442 <CPU::readCR4()>
c0014de0:	80 cc 08             	or     ah,0x8
c0014de3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014de7:	83 c4 0c             	add    esp,0xc
c0014dea:	e9 6e a6 00 00       	jmp    c001f45d <CPU::writeCR4(unsigned long)>
c0014def:	90                   	nop

c0014df0 <CPU::setupTSC()>:
c0014df0:	83 ec 0c             	sub    esp,0xc
c0014df3:	e8 4a a6 00 00       	call   c001f442 <CPU::readCR4()>
c0014df8:	83 c8 04             	or     eax,0x4
c0014dfb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014dff:	83 c4 0c             	add    esp,0xc
c0014e02:	e9 56 a6 00 00       	jmp    c001f45d <CPU::writeCR4(unsigned long)>
c0014e07:	90                   	nop

c0014e08 <CPU::setupLargePages()>:
c0014e08:	83 ec 0c             	sub    esp,0xc
c0014e0b:	e8 32 a6 00 00       	call   c001f442 <CPU::readCR4()>
c0014e10:	83 c8 10             	or     eax,0x10
c0014e13:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014e17:	83 c4 0c             	add    esp,0xc
c0014e1a:	e9 3e a6 00 00       	jmp    c001f45d <CPU::writeCR4(unsigned long)>
c0014e1f:	90                   	nop

c0014e20 <CPU::setupPAT()>:
c0014e20:	a1 88 3d 02 c0       	mov    eax,ds:0xc0023d88
c0014e25:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014e2c:	74 2c                	je     c0014e5a <CPU::setupPAT()+0x3a>
c0014e2e:	53                   	push   ebx
c0014e2f:	83 ec 10             	sub    esp,0x10
c0014e32:	68 77 02 00 00       	push   0x277
c0014e37:	50                   	push   eax
c0014e38:	e8 cd 66 ff ff       	call   c000b50a <Computer::rdmsr(unsigned int)>
c0014e3d:	83 e2 f8             	and    edx,0xfffffff8
c0014e40:	83 ca 01             	or     edx,0x1
c0014e43:	52                   	push   edx
c0014e44:	50                   	push   eax
c0014e45:	68 77 02 00 00       	push   0x277
c0014e4a:	ff 35 88 3d 02 c0    	push   DWORD PTR ds:0xc0023d88
c0014e50:	e8 e1 66 ff ff       	call   c000b536 <Computer::wrmsr(unsigned int, unsigned long long)>
c0014e55:	83 c4 28             	add    esp,0x28
c0014e58:	5b                   	pop    ebx
c0014e59:	c3                   	ret    
c0014e5a:	c3                   	ret    
c0014e5b:	90                   	nop

c0014e5c <CPU::setupMTRR()>:
c0014e5c:	c3                   	ret    
c0014e5d:	90                   	nop

c0014e5e <CPU::setupGlobalPages()>:
c0014e5e:	83 ec 0c             	sub    esp,0xc
c0014e61:	e8 dc a5 00 00       	call   c001f442 <CPU::readCR4()>
c0014e66:	0c 80                	or     al,0x80
c0014e68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014e6c:	83 c4 0c             	add    esp,0xc
c0014e6f:	e9 e9 a5 00 00       	jmp    c001f45d <CPU::writeCR4(unsigned long)>

c0014e74 <CPU::allowUsermodeDataAccess()>:
c0014e74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e78:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0014e7f:	74 03                	je     c0014e84 <CPU::allowUsermodeDataAccess()+0x10>
c0014e81:	0f 01 cb             	stac   
c0014e84:	c3                   	ret    
c0014e85:	90                   	nop

c0014e86 <CPU::prohibitUsermodeDataAccess()>:
c0014e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e8a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0014e91:	74 03                	je     c0014e96 <CPU::prohibitUsermodeDataAccess()+0x10>
c0014e93:	0f 01 ca             	clac   
c0014e96:	c3                   	ret    
c0014e97:	90                   	nop

c0014e98 <CPU::setupSMAP()>:
c0014e98:	53                   	push   ebx
c0014e99:	83 ec 08             	sub    esp,0x8
c0014e9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014ea0:	e8 9d a5 00 00       	call   c001f442 <CPU::readCR4()>
c0014ea5:	83 ec 0c             	sub    esp,0xc
c0014ea8:	0d 00 00 20 00       	or     eax,0x200000
c0014ead:	50                   	push   eax
c0014eae:	e8 aa a5 00 00       	call   c001f45d <CPU::writeCR4(unsigned long)>
c0014eb3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014eb7:	83 c4 18             	add    esp,0x18
c0014eba:	5b                   	pop    ebx
c0014ebb:	eb c9                	jmp    c0014e86 <CPU::prohibitUsermodeDataAccess()>
c0014ebd:	90                   	nop

c0014ebe <CPU::setupFeatures()>:
c0014ebe:	53                   	push   ebx
c0014ebf:	83 ec 08             	sub    esp,0x8
c0014ec2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014ec6:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0014ecd:	74 0c                	je     c0014edb <CPU::setupFeatures()+0x1d>
c0014ecf:	83 ec 0c             	sub    esp,0xc
c0014ed2:	53                   	push   ebx
c0014ed3:	e8 e6 fe ff ff       	call   c0014dbe <CPU::setupSMEP()>
c0014ed8:	83 c4 10             	add    esp,0x10
c0014edb:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0014ee2:	74 0c                	je     c0014ef0 <CPU::setupFeatures()+0x32>
c0014ee4:	83 ec 0c             	sub    esp,0xc
c0014ee7:	53                   	push   ebx
c0014ee8:	e8 ab ff ff ff       	call   c0014e98 <CPU::setupSMAP()>
c0014eed:	83 c4 10             	add    esp,0x10
c0014ef0:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014ef7:	74 0c                	je     c0014f05 <CPU::setupFeatures()+0x47>
c0014ef9:	83 ec 0c             	sub    esp,0xc
c0014efc:	53                   	push   ebx
c0014efd:	e8 d6 fe ff ff       	call   c0014dd8 <CPU::setupUMIP()>
c0014f02:	83 c4 10             	add    esp,0x10
c0014f05:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0014f0c:	74 0c                	je     c0014f1a <CPU::setupFeatures()+0x5c>
c0014f0e:	83 ec 0c             	sub    esp,0xc
c0014f11:	53                   	push   ebx
c0014f12:	e8 d9 fe ff ff       	call   c0014df0 <CPU::setupTSC()>
c0014f17:	83 c4 10             	add    esp,0x10
c0014f1a:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014f21:	74 0c                	je     c0014f2f <CPU::setupFeatures()+0x71>
c0014f23:	83 ec 0c             	sub    esp,0xc
c0014f26:	53                   	push   ebx
c0014f27:	e8 dc fe ff ff       	call   c0014e08 <CPU::setupLargePages()>
c0014f2c:	83 c4 10             	add    esp,0x10
c0014f2f:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014f36:	74 0c                	je     c0014f44 <CPU::setupFeatures()+0x86>
c0014f38:	83 ec 0c             	sub    esp,0xc
c0014f3b:	53                   	push   ebx
c0014f3c:	e8 1d ff ff ff       	call   c0014e5e <CPU::setupGlobalPages()>
c0014f41:	83 c4 10             	add    esp,0x10
c0014f44:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014f4b:	74 0d                	je     c0014f5a <CPU::setupFeatures()+0x9c>
c0014f4d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0014f51:	83 c4 08             	add    esp,0x8
c0014f54:	5b                   	pop    ebx
c0014f55:	e9 c6 fe ff ff       	jmp    c0014e20 <CPU::setupPAT()>
c0014f5a:	83 c4 08             	add    esp,0x8
c0014f5d:	5b                   	pop    ebx
c0014f5e:	c3                   	ret    
c0014f5f:	90                   	nop

c0014f60 <CPU::open(int, int, void*)>:
c0014f60:	57                   	push   edi
c0014f61:	56                   	push   esi
c0014f62:	53                   	push   ebx
c0014f63:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014f67:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014f6b:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0014f71:	83 ec 0c             	sub    esp,0xc
c0014f74:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0014f7a:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0014f80:	50                   	push   eax
c0014f81:	e8 70 68 ff ff       	call   c000b7f6 <GDT::setup()>
c0014f86:	83 c4 0c             	add    esp,0xc
c0014f89:	6a 00                	push   0x0
c0014f8b:	68 ef be ad de       	push   0xdeadbeef
c0014f90:	57                   	push   edi
c0014f91:	e8 c8 8a ff ff       	call   c000da5e <TSS::setup(unsigned long, unsigned long)>
c0014f96:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014f99:	e8 a0 8a ff ff       	call   c000da3e <TSS::flush()>
c0014f9e:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0014fa4:	89 04 24             	mov    DWORD PTR [esp],eax
c0014fa7:	e8 a4 6a ff ff       	call   c000ba50 <IDT::setup()>
c0014fac:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0014fb3:	e8 9c a4 00 00       	call   c001f454 <CPU::writeDR7(unsigned long)>
c0014fb8:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0014fc2:	e8 4d 75 ff ff       	call   c000c514 <Phys::allocatePage()>
c0014fc7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0014fcd:	89 30                	mov    DWORD PTR [eax],esi
c0014fcf:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0014fd5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0014fd8:	58                   	pop    eax
c0014fd9:	5a                   	pop    edx
c0014fda:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0014fe0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014fe4:	e8 07 9b ff ff       	call   c000eaf0 <VAS::setCPUSpecific(unsigned long)>
c0014fe9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014fec:	e8 db f3 ff ff       	call   c00143cc <CPU::detectFeatures()>
c0014ff1:	e8 20 c5 ff ff       	call   c0011516 <setupInterruptController()>
c0014ff6:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0014ffc:	a1 a0 3d 02 c0       	mov    eax,ds:0xc0023da0
c0015001:	83 e0 10             	and    eax,0x10
c0015004:	83 f8 01             	cmp    eax,0x1
c0015007:	19 c0                	sbb    eax,eax
c0015009:	83 e0 46             	and    eax,0x46
c001500c:	83 c0 1e             	add    eax,0x1e
c001500f:	89 04 24             	mov    DWORD PTR [esp],eax
c0015012:	e8 e7 d6 ff ff       	call   c00126fe <setupTimer(int)>
c0015017:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c001501d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015020:	e8 99 fe ff ff       	call   c0014ebe <CPU::setupFeatures()>
c0015025:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015028:	e8 23 f1 ff ff       	call   c0014150 <CPU::displayFeatures()>
c001502d:	83 c4 10             	add    esp,0x10
c0015030:	31 c0                	xor    eax,eax
c0015032:	5b                   	pop    ebx
c0015033:	5e                   	pop    esi
c0015034:	5f                   	pop    edi
c0015035:	c3                   	ret    

c0015036 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0015036:	57                   	push   edi
c0015037:	56                   	push   esi
c0015038:	53                   	push   ebx
c0015039:	51                   	push   ecx
c001503a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001503e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015042:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0015045:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0015048:	88 c8                	mov    al,cl
c001504a:	c0 e8 06             	shr    al,0x6
c001504d:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015051:	89 c8                	mov    eax,ecx
c0015053:	66 c1 e8 03          	shr    ax,0x3
c0015057:	83 e0 07             	and    eax,0x7
c001505a:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001505f:	88 02                	mov    BYTE PTR [edx],al
c0015061:	0f 84 99 01 00 00    	je     c0015200 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ca>
c0015067:	83 e1 07             	and    ecx,0x7
c001506a:	80 f9 04             	cmp    cl,0x4
c001506d:	0f 84 98 00 00 00    	je     c001510b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xd5>
c0015073:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0015078:	0f 95 c0             	setne  al
c001507b:	80 f9 05             	cmp    cl,0x5
c001507e:	0f 95 c2             	setne  dl
c0015081:	08 c2                	or     dl,al
c0015083:	74 79                	je     c00150fe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xc8>
c0015085:	84 c9                	test   cl,cl
c0015087:	75 05                	jne    c001508e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x58>
c0015089:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001508c:	eb 3c                	jmp    c00150ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x94>
c001508e:	80 f9 01             	cmp    cl,0x1
c0015091:	75 05                	jne    c0015098 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x62>
c0015093:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0015096:	eb 32                	jmp    c00150ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x94>
c0015098:	80 f9 02             	cmp    cl,0x2
c001509b:	75 05                	jne    c00150a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x6c>
c001509d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00150a0:	eb 28                	jmp    c00150ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x94>
c00150a2:	31 c0                	xor    eax,eax
c00150a4:	80 f9 03             	cmp    cl,0x3
c00150a7:	75 05                	jne    c00150ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x78>
c00150a9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00150ac:	eb 1c                	jmp    c00150ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x94>
c00150ae:	80 f9 05             	cmp    cl,0x5
c00150b1:	75 05                	jne    c00150b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00150b3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00150b6:	eb 12                	jmp    c00150ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x94>
c00150b8:	80 f9 06             	cmp    cl,0x6
c00150bb:	75 05                	jne    c00150c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x8c>
c00150bd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00150c0:	eb 08                	jmp    c00150ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x94>
c00150c2:	80 f9 07             	cmp    cl,0x7
c00150c5:	75 03                	jne    c00150ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x94>
c00150c7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00150ca:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00150cf:	75 10                	jne    c00150e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xab>
c00150d1:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00150d5:	b9 03 00 00 00       	mov    ecx,0x3
c00150da:	01 d0                	add    eax,edx
c00150dc:	e9 2a 01 00 00       	jmp    c001520b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d5>
c00150e1:	b9 02 00 00 00       	mov    ecx,0x2
c00150e6:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00150eb:	0f 85 1a 01 00 00    	jne    c001520b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d5>
c00150f1:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00150f4:	b9 06 00 00 00       	mov    ecx,0x6
c00150f9:	e9 0d 01 00 00       	jmp    c001520b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d5>
c00150fe:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0015101:	b9 06 00 00 00       	mov    ecx,0x6
c0015106:	e9 02 01 00 00       	jmp    c001520d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d7>
c001510b:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001510e:	88 c8                	mov    al,cl
c0015110:	89 ca                	mov    edx,ecx
c0015112:	c0 e8 06             	shr    al,0x6
c0015115:	66 c1 ea 03          	shr    dx,0x3
c0015119:	88 44 24 02          	mov    BYTE PTR [esp+0x2],al
c001511d:	83 e2 07             	and    edx,0x7
c0015120:	80 e1 07             	and    cl,0x7
c0015123:	75 05                	jne    c001512a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xf4>
c0015125:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0015128:	eb 3f                	jmp    c0015169 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x133>
c001512a:	80 f9 01             	cmp    cl,0x1
c001512d:	75 05                	jne    c0015134 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfe>
c001512f:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0015132:	eb 35                	jmp    c0015169 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x133>
c0015134:	80 f9 02             	cmp    cl,0x2
c0015137:	75 05                	jne    c001513e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x108>
c0015139:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001513c:	eb 2b                	jmp    c0015169 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x133>
c001513e:	80 f9 03             	cmp    cl,0x3
c0015141:	75 05                	jne    c0015148 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x112>
c0015143:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0015146:	eb 21                	jmp    c0015169 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x133>
c0015148:	80 f9 04             	cmp    cl,0x4
c001514b:	75 05                	jne    c0015152 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x11c>
c001514d:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0015150:	eb 17                	jmp    c0015169 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x133>
c0015152:	80 f9 05             	cmp    cl,0x5
c0015155:	75 05                	jne    c001515c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x126>
c0015157:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001515a:	eb 0d                	jmp    c0015169 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x133>
c001515c:	80 f9 06             	cmp    cl,0x6
c001515f:	75 05                	jne    c0015166 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x130>
c0015161:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0015164:	eb 03                	jmp    c0015169 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x133>
c0015166:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0015169:	84 d2                	test   dl,dl
c001516b:	75 05                	jne    c0015172 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x13c>
c001516d:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0015170:	eb 3c                	jmp    c00151ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x178>
c0015172:	80 fa 01             	cmp    dl,0x1
c0015175:	75 05                	jne    c001517c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0015177:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001517a:	eb 32                	jmp    c00151ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x178>
c001517c:	80 fa 02             	cmp    dl,0x2
c001517f:	75 05                	jne    c0015186 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015181:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015184:	eb 28                	jmp    c00151ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x178>
c0015186:	80 fa 03             	cmp    dl,0x3
c0015189:	75 05                	jne    c0015190 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x15a>
c001518b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001518e:	eb 1e                	jmp    c00151ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x178>
c0015190:	31 c0                	xor    eax,eax
c0015192:	80 fa 04             	cmp    dl,0x4
c0015195:	74 17                	je     c00151ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x178>
c0015197:	80 fa 05             	cmp    dl,0x5
c001519a:	75 05                	jne    c00151a1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16b>
c001519c:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001519f:	eb 0d                	jmp    c00151ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x178>
c00151a1:	80 fa 06             	cmp    dl,0x6
c00151a4:	75 05                	jne    c00151ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x175>
c00151a6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00151a9:	eb 03                	jmp    c00151ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x178>
c00151ab:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00151ae:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00151b3:	0f 94 c2             	sete   dl
c00151b6:	80 f9 05             	cmp    cl,0x5
c00151b9:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00151bd:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00151c2:	d3 e0                	shl    eax,cl
c00151c4:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00151c8:	74 0a                	je     c00151d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x19e>
c00151ca:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00151cd:	b9 07 00 00 00       	mov    ecx,0x7
c00151d2:	eb 37                	jmp    c001520b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d5>
c00151d4:	01 f8                	add    eax,edi
c00151d6:	b9 03 00 00 00       	mov    ecx,0x3
c00151db:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00151e0:	74 2b                	je     c001520d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d7>
c00151e2:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00151e7:	75 0d                	jne    c00151f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1c0>
c00151e9:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00151ed:	01 c8                	add    eax,ecx
c00151ef:	b9 04 00 00 00       	mov    ecx,0x4
c00151f4:	eb 17                	jmp    c001520d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d7>
c00151f6:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00151f9:	b9 07 00 00 00       	mov    ecx,0x7
c00151fe:	eb 0d                	jmp    c001520d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d7>
c0015200:	b9 02 00 00 00       	mov    ecx,0x2
c0015205:	b2 01                	mov    dl,0x1
c0015207:	31 c0                	xor    eax,eax
c0015209:	eb 02                	jmp    c001520d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d7>
c001520b:	31 d2                	xor    edx,edx
c001520d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015211:	89 0b                	mov    DWORD PTR [ebx],ecx
c0015213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015217:	88 11                	mov    BYTE PTR [ecx],dl
c0015219:	5a                   	pop    edx
c001521a:	5b                   	pop    ebx
c001521b:	5e                   	pop    esi
c001521c:	5f                   	pop    edi
c001521d:	c3                   	ret    

c001521e <Krnl::panic(char const*)>:
c001521e:	55                   	push   ebp
c001521f:	89 e5                	mov    ebp,esp
c0015221:	53                   	push   ebx
c0015222:	50                   	push   eax
c0015223:	a1 d0 47 02 c0       	mov    eax,ds:0xc00247d0
c0015228:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001522b:	85 c0                	test   eax,eax
c001522d:	74 02                	je     c0015231 <Krnl::panic(char const*)+0x13>
c001522f:	ff d0                	call   eax
c0015231:	fa                   	cli    
c0015232:	c6 05 d4 47 02 c0 01 	mov    BYTE PTR ds:0xc00247d4,0x1
c0015239:	83 ec 08             	sub    esp,0x8
c001523c:	c6 05 c0 31 02 c0 00 	mov    BYTE PTR ds:0xc00231c0,0x0
c0015243:	53                   	push   ebx
c0015244:	68 64 1e 02 c0       	push   0xc0021e64
c0015249:	e8 d1 9e ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001524e:	58                   	pop    eax
c001524f:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c0015254:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001525a:	e8 40 80 ff ff       	call   c000d29f <setActiveTerminal(VgaText*)>
c001525f:	83 c4 0c             	add    esp,0xc
c0015262:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c0015267:	6a 01                	push   0x1
c0015269:	6a 0f                	push   0xf
c001526b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015271:	e8 68 7a ff ff       	call   c000ccde <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015276:	5a                   	pop    edx
c0015277:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c001527c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015282:	e8 b9 82 ff ff       	call   c000d540 <VgaText::clearScreen()>
c0015287:	59                   	pop    ecx
c0015288:	58                   	pop    eax
c0015289:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c001528e:	68 7d 1e 02 c0       	push   0xc0021e7d
c0015293:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015299:	e8 20 84 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c001529e:	58                   	pop    eax
c001529f:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c00152a4:	5a                   	pop    edx
c00152a5:	68 1c 1f 02 c0       	push   0xc0021f1c
c00152aa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00152b0:	e8 09 84 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c00152b5:	59                   	pop    ecx
c00152b6:	58                   	pop    eax
c00152b7:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c00152bc:	68 99 1e 02 c0       	push   0xc0021e99
c00152c1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00152c7:	e8 f2 83 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c00152cc:	58                   	pop    eax
c00152cd:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c00152d2:	5a                   	pop    edx
c00152d3:	53                   	push   ebx
c00152d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00152da:	e8 df 83 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c00152df:	59                   	pop    ecx
c00152e0:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c00152e5:	5b                   	pop    ebx
c00152e6:	68 b9 1e 02 c0       	push   0xc0021eb9
c00152eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00152f1:	e8 c8 83 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c00152f6:	58                   	pop    eax
c00152f7:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c00152fc:	5a                   	pop    edx
c00152fd:	68 58 1f 02 c0       	push   0xc0021f58
c0015302:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015308:	e8 b1 83 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c001530d:	59                   	pop    ecx
c001530e:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c0015313:	5b                   	pop    ebx
c0015314:	68 99 1e 02 c0       	push   0xc0021e99
c0015319:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001531f:	e8 9a 83 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c0015324:	58                   	pop    eax
c0015325:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001532a:	5a                   	pop    edx
c001532b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001532e:	83 c0 0c             	add    eax,0xc
c0015331:	50                   	push   eax
c0015332:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c0015337:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001533d:	e8 7c 83 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c0015342:	59                   	pop    ecx
c0015343:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c0015348:	5b                   	pop    ebx
c0015349:	68 b8 1e 02 c0       	push   0xc0021eb8
c001534e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015354:	e8 65 83 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c0015359:	58                   	pop    eax
c001535a:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c001535f:	5a                   	pop    edx
c0015360:	68 84 1f 02 c0       	push   0xc0021f84
c0015365:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001536b:	e8 4e 83 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c0015370:	59                   	pop    ecx
c0015371:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c0015376:	5b                   	pop    ebx
c0015377:	68 c4 1f 02 c0       	push   0xc0021fc4
c001537c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015382:	e8 37 83 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c0015387:	58                   	pop    eax
c0015388:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c001538d:	5a                   	pop    edx
c001538e:	68 a4 1e 02 c0       	push   0xc0021ea4
c0015393:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015399:	e8 20 83 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c001539e:	59                   	pop    ecx
c001539f:	5b                   	pop    ebx
c00153a0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00153a3:	68 bc 1e 02 c0       	push   0xc0021ebc
c00153a8:	e8 72 9d ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c00153ad:	58                   	pop    eax
c00153ae:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00153b1:	5a                   	pop    edx
c00153b2:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00153b5:	68 c5 1e 02 c0       	push   0xc0021ec5
c00153ba:	e8 60 9d ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c00153bf:	59                   	pop    ecx
c00153c0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00153c3:	5b                   	pop    ebx
c00153c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c6:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00153c9:	68 3d 15 02 c0       	push   0xc002153d
c00153ce:	e8 4c 9d ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c00153d3:	58                   	pop    eax
c00153d4:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c00153d9:	5a                   	pop    edx
c00153da:	68 08 20 02 c0       	push   0xc0022008
c00153df:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00153e5:	e8 d4 82 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c00153ea:	59                   	pop    ecx
c00153eb:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c00153f0:	5b                   	pop    ebx
c00153f1:	68 ce 1e 02 c0       	push   0xc0021ece
c00153f6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00153fc:	e8 bd 82 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c0015401:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c0015406:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001540c:	e8 67 9d 00 00       	call   c001f178 <CPU::readCR0()>
c0015411:	5a                   	pop    edx
c0015412:	59                   	pop    ecx
c0015413:	50                   	push   eax
c0015414:	53                   	push   ebx
c0015415:	e8 ca 82 ff ff       	call   c000d6e4 <VgaText::putx(unsigned int)>
c001541a:	5b                   	pop    ebx
c001541b:	58                   	pop    eax
c001541c:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c0015421:	68 d8 1e 02 c0       	push   0xc0021ed8
c0015426:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001542c:	e8 8d 82 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c0015431:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c0015436:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001543c:	e8 25 a0 00 00       	call   c001f466 <CPU::readCR2()>
c0015441:	5a                   	pop    edx
c0015442:	59                   	pop    ecx
c0015443:	50                   	push   eax
c0015444:	53                   	push   ebx
c0015445:	e8 9a 82 ff ff       	call   c000d6e4 <VgaText::putx(unsigned int)>
c001544a:	5b                   	pop    ebx
c001544b:	58                   	pop    eax
c001544c:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c0015451:	68 e2 1e 02 c0       	push   0xc0021ee2
c0015456:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001545c:	e8 5d 82 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c0015461:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c0015466:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001546c:	e8 94 99 00 00       	call   c001ee05 <CPU::readCR3()>
c0015471:	5a                   	pop    edx
c0015472:	59                   	pop    ecx
c0015473:	50                   	push   eax
c0015474:	53                   	push   ebx
c0015475:	e8 6a 82 ff ff       	call   c000d6e4 <VgaText::putx(unsigned int)>
c001547a:	5b                   	pop    ebx
c001547b:	58                   	pop    eax
c001547c:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c0015481:	68 f5 1e 02 c0       	push   0xc0021ef5
c0015486:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001548c:	e8 2d 82 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c0015491:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c0015496:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001549c:	e8 a1 9f 00 00       	call   c001f442 <CPU::readCR4()>
c00154a1:	5a                   	pop    edx
c00154a2:	59                   	pop    ecx
c00154a3:	50                   	push   eax
c00154a4:	53                   	push   ebx
c00154a5:	e8 3a 82 ff ff       	call   c000d6e4 <VgaText::putx(unsigned int)>
c00154aa:	5b                   	pop    ebx
c00154ab:	58                   	pop    eax
c00154ac:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c00154b1:	68 ff 1e 02 c0       	push   0xc0021eff
c00154b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00154bc:	e8 fd 81 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c00154c1:	5a                   	pop    edx
c00154c2:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c00154c7:	59                   	pop    ecx
c00154c8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00154ce:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00154d1:	50                   	push   eax
c00154d2:	e8 0d 82 ff ff       	call   c000d6e4 <VgaText::putx(unsigned int)>
c00154d7:	5b                   	pop    ebx
c00154d8:	58                   	pop    eax
c00154d9:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c00154de:	68 16 1f 02 c0       	push   0xc0021f16
c00154e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00154e9:	e8 d0 81 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c00154ee:	5a                   	pop    edx
c00154ef:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c00154f4:	59                   	pop    ecx
c00154f5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00154fb:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00154fe:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0015501:	50                   	push   eax
c0015502:	e8 dd 81 ff ff       	call   c000d6e4 <VgaText::putx(unsigned int)>
c0015507:	5b                   	pop    ebx
c0015508:	58                   	pop    eax
c0015509:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c001550e:	68 16 1f 02 c0       	push   0xc0021f16
c0015513:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015519:	e8 a0 81 ff ff       	call   c000d6be <VgaText::puts(char const*)>
c001551e:	59                   	pop    ecx
c001551f:	a1 d4 51 02 c0       	mov    eax,ds:0xc00251d4
c0015524:	5b                   	pop    ebx
c0015525:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001552b:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001552e:	8b 12                	mov    edx,DWORD PTR [edx]
c0015530:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0015533:	50                   	push   eax
c0015534:	e8 ab 81 ff ff       	call   c000d6e4 <VgaText::putx(unsigned int)>
c0015539:	83 c4 10             	add    esp,0x10
c001553c:	b2 fe                	mov    dl,0xfe
c001553e:	e4 60                	in     al,0x60
c0015540:	3c 1c                	cmp    al,0x1c
c0015542:	74 04                	je     c0015548 <Krnl::panic(char const*)+0x32a>
c0015544:	3c 5a                	cmp    al,0x5a
c0015546:	75 f6                	jne    c001553e <Krnl::panic(char const*)+0x320>
c0015548:	e4 64                	in     al,0x64
c001554a:	a8 02                	test   al,0x2
c001554c:	75 fa                	jne    c0015548 <Krnl::panic(char const*)+0x32a>
c001554e:	88 d0                	mov    al,dl
c0015550:	e6 64                	out    0x64,al
c0015552:	fa                   	cli    
c0015553:	f4                   	hlt    
c0015554:	eb e8                	jmp    c001553e <Krnl::panic(char const*)+0x320>

c0015556 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015556:	55                   	push   ebp
c0015557:	57                   	push   edi
c0015558:	56                   	push   esi
c0015559:	53                   	push   ebx
c001555a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015560:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015567:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015569:	8d 6e 01             	lea    ebp,[esi+0x1]
c001556c:	80 fb 40             	cmp    bl,0x40
c001556f:	75 1b                	jne    c001558c <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0015571:	8a 16                	mov    dl,BYTE PTR [esi]
c0015573:	84 d2                	test   dl,dl
c0015575:	0f 84 f1 00 00 00    	je     c001566c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001557b:	8d 46 01             	lea    eax,[esi+0x1]
c001557e:	80 fa 3a             	cmp    dl,0x3a
c0015581:	74 04                	je     c0015587 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0015583:	89 c6                	mov    esi,eax
c0015585:	eb ea                	jmp    c0015571 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0015587:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001558a:	89 c6                	mov    esi,eax
c001558c:	50                   	push   eax
c001558d:	6a 40                	push   0x40
c001558f:	6a 00                	push   0x0
c0015591:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015595:	50                   	push   eax
c0015596:	e8 6d b0 fe ff       	call   c0000608 <memset>
c001559b:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00155a2:	31 c0                	xor    eax,eax
c00155a4:	83 c4 10             	add    esp,0x10
c00155a7:	8a 0f                	mov    cl,BYTE PTR [edi]
c00155a9:	84 c9                	test   cl,cl
c00155ab:	0f 84 bb 00 00 00    	je     c001566c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00155b1:	3d c7 00 00 00       	cmp    eax,0xc7
c00155b6:	0f 8f b0 00 00 00    	jg     c001566c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00155bc:	80 f9 0a             	cmp    cl,0xa
c00155bf:	0f 85 98 00 00 00    	jne    c001565d <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00155c5:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00155ca:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00155ce:	a8 df                	test   al,0xdf
c00155d0:	0f 94 c1             	sete   cl
c00155d3:	3c 23                	cmp    al,0x23
c00155d5:	0f 94 c2             	sete   dl
c00155d8:	08 d1                	or     cl,dl
c00155da:	75 4a                	jne    c0015626 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00155dc:	8d 50 f7             	lea    edx,[eax-0x9]
c00155df:	80 fa 01             	cmp    dl,0x1
c00155e2:	76 42                	jbe    c0015626 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00155e4:	3c 5b                	cmp    al,0x5b
c00155e6:	75 42                	jne    c001562a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00155e8:	80 fb 40             	cmp    bl,0x40
c00155eb:	75 39                	jne    c0015626 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00155ed:	83 ec 0c             	sub    esp,0xc
c00155f0:	8d 54 24 65          	lea    edx,[esp+0x65]
c00155f4:	52                   	push   edx
c00155f5:	e8 2b b0 fe ff       	call   c0000625 <strlen>
c00155fa:	83 c4 10             	add    esp,0x10
c00155fd:	83 f8 3f             	cmp    eax,0x3f
c0015600:	77 6a                	ja     c001566c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015602:	50                   	push   eax
c0015603:	50                   	push   eax
c0015604:	8d 54 24 61          	lea    edx,[esp+0x61]
c0015608:	52                   	push   edx
c0015609:	8d 54 24 24          	lea    edx,[esp+0x24]
c001560d:	52                   	push   edx
c001560e:	e8 94 b0 fe ff       	call   c00006a7 <strcpy>
c0015613:	58                   	pop    eax
c0015614:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015618:	52                   	push   edx
c0015619:	e8 07 b0 fe ff       	call   c0000625 <strlen>
c001561e:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015623:	83 c4 10             	add    esp,0x10
c0015626:	31 d2                	xor    edx,edx
c0015628:	eb 3a                	jmp    c0015664 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001562a:	80 fb 40             	cmp    bl,0x40
c001562d:	74 06                	je     c0015635 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001562f:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015633:	eb 20                	jmp    c0015655 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0015635:	50                   	push   eax
c0015636:	50                   	push   eax
c0015637:	55                   	push   ebp
c0015638:	8d 44 24 24          	lea    eax,[esp+0x24]
c001563c:	50                   	push   eax
c001563d:	e8 b6 b0 fe ff       	call   c00006f8 <strcmp>
c0015642:	83 c4 10             	add    esp,0x10
c0015645:	85 c0                	test   eax,eax
c0015647:	75 dd                	jne    c0015626 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015649:	eb e4                	jmp    c001562f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001564b:	8d 50 01             	lea    edx,[eax+0x1]
c001564e:	80 f9 3d             	cmp    cl,0x3d
c0015651:	74 1d                	je     c0015670 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0015653:	89 d0                	mov    eax,edx
c0015655:	8a 08                	mov    cl,BYTE PTR [eax]
c0015657:	84 c9                	test   cl,cl
c0015659:	75 f0                	jne    c001564b <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001565b:	eb 0f                	jmp    c001566c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001565d:	8d 50 01             	lea    edx,[eax+0x1]
c0015660:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0015664:	47                   	inc    edi
c0015665:	89 d0                	mov    eax,edx
c0015667:	e9 3b ff ff ff       	jmp    c00155a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001566c:	31 c0                	xor    eax,eax
c001566e:	eb 33                	jmp    c00156a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0015670:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015674:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015677:	50                   	push   eax
c0015678:	50                   	push   eax
c0015679:	8d 44 24 60          	lea    eax,[esp+0x60]
c001567d:	50                   	push   eax
c001567e:	56                   	push   esi
c001567f:	e8 74 b0 fe ff       	call   c00006f8 <strcmp>
c0015684:	83 c4 10             	add    esp,0x10
c0015687:	85 c0                	test   eax,eax
c0015689:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001568d:	75 97                	jne    c0015626 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001568f:	51                   	push   ecx
c0015690:	51                   	push   ecx
c0015691:	52                   	push   edx
c0015692:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015699:	e8 09 b0 fe ff       	call   c00006a7 <strcpy>
c001569e:	83 c4 10             	add    esp,0x10
c00156a1:	b0 01                	mov    al,0x1
c00156a3:	81 c4 2c 01 00 00    	add    esp,0x12c
c00156a9:	5b                   	pop    ebx
c00156aa:	5e                   	pop    esi
c00156ab:	5f                   	pop    edi
c00156ac:	5d                   	pop    ebp
c00156ad:	c3                   	ret    

c00156ae <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00156ae:	57                   	push   edi
c00156af:	56                   	push   esi
c00156b0:	53                   	push   ebx
c00156b1:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00156b7:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c00156be:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c00156c5:	53                   	push   ebx
c00156c6:	e8 5a af fe ff       	call   c0000625 <strlen>
c00156cb:	89 34 24             	mov    DWORD PTR [esp],esi
c00156ce:	89 c7                	mov    edi,eax
c00156d0:	e8 50 af fe ff       	call   c0000625 <strlen>
c00156d5:	83 c4 10             	add    esp,0x10
c00156d8:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00156dc:	31 ff                	xor    edi,edi
c00156de:	3d ff 00 00 00       	cmp    eax,0xff
c00156e3:	0f 87 18 01 00 00    	ja     c0015801 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c00156e9:	51                   	push   ecx
c00156ea:	51                   	push   ecx
c00156eb:	56                   	push   esi
c00156ec:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00156f0:	56                   	push   esi
c00156f1:	e8 b1 af fe ff       	call   c00006a7 <strcpy>
c00156f6:	58                   	pop    eax
c00156f7:	5a                   	pop    edx
c00156f8:	68 40 24 02 c0       	push   0xc0022440
c00156fd:	56                   	push   esi
c00156fe:	e8 5b b0 fe ff       	call   c000075e <strcat>
c0015703:	59                   	pop    ecx
c0015704:	58                   	pop    eax
c0015705:	53                   	push   ebx
c0015706:	56                   	push   esi
c0015707:	e8 52 b0 fe ff       	call   c000075e <strcat>
c001570c:	58                   	pop    eax
c001570d:	5a                   	pop    edx
c001570e:	68 2e 20 02 c0       	push   0xc002202e
c0015713:	56                   	push   esi
c0015714:	e8 45 b0 fe ff       	call   c000075e <strcat>
c0015719:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015720:	e8 0b 99 ff ff       	call   c000f030 <operator new(unsigned long)>
c0015725:	83 c4 0c             	add    esp,0xc
c0015728:	89 c3                	mov    ebx,eax
c001572a:	ff 35 d4 51 02 c0    	push   DWORD PTR ds:0xc00251d4
c0015730:	56                   	push   esi
c0015731:	50                   	push   eax
c0015732:	e8 17 9f ff ff       	call   c000f64e <File::File(char const*, Process*)>
c0015737:	59                   	pop    ecx
c0015738:	5e                   	pop    esi
c0015739:	6a 01                	push   0x1
c001573b:	53                   	push   ebx
c001573c:	e8 71 9f ff ff       	call   c000f6b2 <File::open(FileOpenMode)>
c0015741:	83 c4 10             	add    esp,0x10
c0015744:	85 c0                	test   eax,eax
c0015746:	74 08                	je     c0015750 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0015748:	83 ec 0c             	sub    esp,0xc
c001574b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001574d:	53                   	push   ebx
c001574e:	eb 2e                	jmp    c001577e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0015750:	52                   	push   edx
c0015751:	8d 44 24 07          	lea    eax,[esp+0x7]
c0015755:	50                   	push   eax
c0015756:	8d 44 24 10          	lea    eax,[esp+0x10]
c001575a:	50                   	push   eax
c001575b:	53                   	push   ebx
c001575c:	e8 fd a1 ff ff       	call   c000f95e <File::stat(unsigned long long*, bool*)>
c0015761:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015765:	83 c4 10             	add    esp,0x10
c0015768:	89 c1                	mov    ecx,eax
c001576a:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001576e:	75 13                	jne    c0015783 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0015770:	83 ec 0c             	sub    esp,0xc
c0015773:	53                   	push   ebx
c0015774:	e8 97 9f ff ff       	call   c000f710 <File::close()>
c0015779:	8b 03                	mov    eax,DWORD PTR [ebx]
c001577b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001577e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015781:	eb 7b                	jmp    c00157fe <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0015783:	83 ec 0c             	sub    esp,0xc
c0015786:	50                   	push   eax
c0015787:	e8 de 67 ff ff       	call   c000bf6a <malloc>
c001578c:	89 c6                	mov    esi,eax
c001578e:	58                   	pop    eax
c001578f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015791:	8d 54 24 10          	lea    edx,[esp+0x10]
c0015795:	52                   	push   edx
c0015796:	56                   	push   esi
c0015797:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001579b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001579f:	53                   	push   ebx
c00157a0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00157a3:	83 c4 20             	add    esp,0x20
c00157a6:	85 c0                	test   eax,eax
c00157a8:	75 0a                	jne    c00157b4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00157aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157ae:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00157b2:	74 18                	je     c00157cc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c00157b4:	83 ec 0c             	sub    esp,0xc
c00157b7:	31 ff                	xor    edi,edi
c00157b9:	53                   	push   ebx
c00157ba:	e8 51 9f ff ff       	call   c000f710 <File::close()>
c00157bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00157c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00157c4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00157c7:	83 c4 10             	add    esp,0x10
c00157ca:	eb 35                	jmp    c0015801 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c00157cc:	83 ec 0c             	sub    esp,0xc
c00157cf:	53                   	push   ebx
c00157d0:	e8 3b 9f ff ff       	call   c000f710 <File::close()>
c00157d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00157d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00157da:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00157dd:	83 c4 0c             	add    esp,0xc
c00157e0:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c00157e7:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c00157ee:	56                   	push   esi
c00157ef:	e8 62 fd ff ff       	call   c0015556 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00157f4:	89 34 24             	mov    DWORD PTR [esp],esi
c00157f7:	89 c7                	mov    edi,eax
c00157f9:	e8 7c 67 ff ff       	call   c000bf7a <free>
c00157fe:	83 c4 10             	add    esp,0x10
c0015801:	81 c4 10 01 00 00    	add    esp,0x110
c0015807:	89 f8                	mov    eax,edi
c0015809:	5b                   	pop    ebx
c001580a:	5e                   	pop    esi
c001580b:	5f                   	pop    edi
c001580c:	c3                   	ret    

c001580d <Reg::getLine(char*, char*, char*)>:
c001580d:	57                   	push   edi
c001580e:	56                   	push   esi
c001580f:	53                   	push   ebx
c0015810:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015814:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015818:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001581c:	57                   	push   edi
c001581d:	56                   	push   esi
c001581e:	53                   	push   ebx
c001581f:	68 33 20 02 c0       	push   0xc0022033
c0015824:	e8 85 fe ff ff       	call   c00156ae <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015829:	83 c4 10             	add    esp,0x10
c001582c:	84 c0                	test   al,al
c001582e:	75 10                	jne    c0015840 <Reg::getLine(char*, char*, char*)+0x33>
c0015830:	57                   	push   edi
c0015831:	56                   	push   esi
c0015832:	53                   	push   ebx
c0015833:	68 58 20 02 c0       	push   0xc0022058
c0015838:	e8 71 fe ff ff       	call   c00156ae <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001583d:	83 c4 10             	add    esp,0x10
c0015840:	5b                   	pop    ebx
c0015841:	5e                   	pop    esi
c0015842:	5f                   	pop    edi
c0015843:	c3                   	ret    

c0015844 <Reg::readInt(char*, char*, int*)>:
c0015844:	55                   	push   ebp
c0015845:	57                   	push   edi
c0015846:	56                   	push   esi
c0015847:	53                   	push   ebx
c0015848:	81 ec f0 00 00 00    	sub    esp,0xf0
c001584e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0015852:	57                   	push   edi
c0015853:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001585a:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015861:	e8 a7 ff ff ff       	call   c001580d <Reg::getLine(char*, char*, char*)>
c0015866:	83 c4 10             	add    esp,0x10
c0015869:	84 c0                	test   al,al
c001586b:	0f 84 b3 00 00 00    	je     c0015924 <Reg::readInt(char*, char*, int*)+0xe0>
c0015871:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0015875:	80 fa 2b             	cmp    dl,0x2b
c0015878:	74 0c                	je     c0015886 <Reg::readInt(char*, char*, int*)+0x42>
c001587a:	80 fa 2d             	cmp    dl,0x2d
c001587d:	75 0e                	jne    c001588d <Reg::readInt(char*, char*, int*)+0x49>
c001587f:	ba 01 00 00 00       	mov    edx,0x1
c0015884:	eb 0b                	jmp    c0015891 <Reg::readInt(char*, char*, int*)+0x4d>
c0015886:	ba 01 00 00 00       	mov    edx,0x1
c001588b:	eb 02                	jmp    c001588f <Reg::readInt(char*, char*, int*)+0x4b>
c001588d:	31 d2                	xor    edx,edx
c001588f:	31 c0                	xor    eax,eax
c0015891:	be 0a 00 00 00       	mov    esi,0xa
c0015896:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001589b:	75 20                	jne    c00158bd <Reg::readInt(char*, char*, int*)+0x79>
c001589d:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00158a1:	80 f9 78             	cmp    cl,0x78
c00158a4:	75 0a                	jne    c00158b0 <Reg::readInt(char*, char*, int*)+0x6c>
c00158a6:	83 c2 02             	add    edx,0x2
c00158a9:	be 10 00 00 00       	mov    esi,0x10
c00158ae:	eb 0d                	jmp    c00158bd <Reg::readInt(char*, char*, int*)+0x79>
c00158b0:	80 f9 62             	cmp    cl,0x62
c00158b3:	75 08                	jne    c00158bd <Reg::readInt(char*, char*, int*)+0x79>
c00158b5:	83 c2 02             	add    edx,0x2
c00158b8:	be 02 00 00 00       	mov    esi,0x2
c00158bd:	01 d7                	add    edi,edx
c00158bf:	31 d2                	xor    edx,edx
c00158c1:	8a 1f                	mov    bl,BYTE PTR [edi]
c00158c3:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00158c7:	80 fb 0d             	cmp    bl,0xd
c00158ca:	0f 94 c3             	sete   bl
c00158cd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00158d2:	0f 94 c1             	sete   cl
c00158d5:	08 cb                	or     bl,cl
c00158d7:	75 3a                	jne    c0015913 <Reg::readInt(char*, char*, int*)+0xcf>
c00158d9:	0f af d6             	imul   edx,esi
c00158dc:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00158e1:	83 fe 10             	cmp    esi,0x10
c00158e4:	75 26                	jne    c001590c <Reg::readInt(char*, char*, int*)+0xc8>
c00158e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00158ea:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00158ed:	89 e9                	mov    ecx,ebp
c00158ef:	80 f9 05             	cmp    cl,0x5
c00158f2:	77 06                	ja     c00158fa <Reg::readInt(char*, char*, int*)+0xb6>
c00158f4:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00158f8:	eb 16                	jmp    c0015910 <Reg::readInt(char*, char*, int*)+0xcc>
c00158fa:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00158fe:	83 e9 61             	sub    ecx,0x61
c0015901:	80 f9 05             	cmp    cl,0x5
c0015904:	77 06                	ja     c001590c <Reg::readInt(char*, char*, int*)+0xc8>
c0015906:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001590a:	eb 04                	jmp    c0015910 <Reg::readInt(char*, char*, int*)+0xcc>
c001590c:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0015910:	47                   	inc    edi
c0015911:	eb ae                	jmp    c00158c1 <Reg::readInt(char*, char*, int*)+0x7d>
c0015913:	84 c0                	test   al,al
c0015915:	74 02                	je     c0015919 <Reg::readInt(char*, char*, int*)+0xd5>
c0015917:	f7 da                	neg    edx
c0015919:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0015920:	89 10                	mov    DWORD PTR [eax],edx
c0015922:	88 d8                	mov    al,bl
c0015924:	81 c4 ec 00 00 00    	add    esp,0xec
c001592a:	5b                   	pop    ebx
c001592b:	5e                   	pop    esi
c001592c:	5f                   	pop    edi
c001592d:	5d                   	pop    ebp
c001592e:	c3                   	ret    

c001592f <Reg::readString(char*, char*, char*, int)>:
c001592f:	57                   	push   edi
c0015930:	56                   	push   esi
c0015931:	53                   	push   ebx
c0015932:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015938:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001593f:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0015943:	57                   	push   edi
c0015944:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001594b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015952:	e8 b6 fe ff ff       	call   c001580d <Reg::getLine(char*, char*, char*)>
c0015957:	83 c4 10             	add    esp,0x10
c001595a:	89 c6                	mov    esi,eax
c001595c:	84 c0                	test   al,al
c001595e:	74 44                	je     c00159a4 <Reg::readString(char*, char*, char*, int)+0x75>
c0015960:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0015967:	31 c0                	xor    eax,eax
c0015969:	4a                   	dec    edx
c001596a:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001596d:	84 c9                	test   cl,cl
c001596f:	74 0f                	je     c0015980 <Reg::readString(char*, char*, char*, int)+0x51>
c0015971:	39 c2                	cmp    edx,eax
c0015973:	7e 0b                	jle    c0015980 <Reg::readString(char*, char*, char*, int)+0x51>
c0015975:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0015978:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001597d:	40                   	inc    eax
c001597e:	eb ea                	jmp    c001596a <Reg::readString(char*, char*, char*, int)+0x3b>
c0015980:	83 ec 0c             	sub    esp,0xc
c0015983:	53                   	push   ebx
c0015984:	e8 9c ac fe ff       	call   c0000625 <strlen>
c0015989:	83 c4 10             	add    esp,0x10
c001598c:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0015991:	75 11                	jne    c00159a4 <Reg::readString(char*, char*, char*, int)+0x75>
c0015993:	83 ec 0c             	sub    esp,0xc
c0015996:	53                   	push   ebx
c0015997:	e8 89 ac fe ff       	call   c0000625 <strlen>
c001599c:	83 c4 10             	add    esp,0x10
c001599f:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00159a4:	81 c4 d0 00 00 00    	add    esp,0xd0
c00159aa:	89 f0                	mov    eax,esi
c00159ac:	5b                   	pop    ebx
c00159ad:	5e                   	pop    esi
c00159ae:	5f                   	pop    edi
c00159af:	c3                   	ret    

c00159b0 <Reg::readBool(char*, char*, bool*)>:
c00159b0:	83 ec 20             	sub    esp,0x20
c00159b3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00159b7:	50                   	push   eax
c00159b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00159bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00159c0:	e8 7f fe ff ff       	call   c0015844 <Reg::readInt(char*, char*, int*)>
c00159c5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00159ca:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00159ce:	0f 95 02             	setne  BYTE PTR [edx]
c00159d1:	83 c4 2c             	add    esp,0x2c
c00159d4:	c3                   	ret    

c00159d5 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00159d5:	53                   	push   ebx
c00159d6:	83 ec 1c             	sub    esp,0x1c
c00159d9:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00159dd:	8d 44 24 13          	lea    eax,[esp+0x13]
c00159e1:	50                   	push   eax
c00159e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00159e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00159ea:	e8 c1 ff ff ff       	call   c00159b0 <Reg::readBool(char*, char*, bool*)>
c00159ef:	83 c4 10             	add    esp,0x10
c00159f2:	84 c0                	test   al,al
c00159f4:	74 04                	je     c00159fa <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00159f6:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00159fa:	88 d8                	mov    al,bl
c00159fc:	83 c4 18             	add    esp,0x18
c00159ff:	5b                   	pop    ebx
c0015a00:	c3                   	ret    

c0015a01 <Reg::readIntWithDefault(char*, char*, int)>:
c0015a01:	53                   	push   ebx
c0015a02:	83 ec 1c             	sub    esp,0x1c
c0015a05:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015a09:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015a0d:	50                   	push   eax
c0015a0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015a12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015a16:	e8 29 fe ff ff       	call   c0015844 <Reg::readInt(char*, char*, int*)>
c0015a1b:	83 c4 10             	add    esp,0x10
c0015a1e:	84 c0                	test   al,al
c0015a20:	74 04                	je     c0015a26 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0015a22:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0015a26:	89 d8                	mov    eax,ebx
c0015a28:	83 c4 18             	add    esp,0x18
c0015a2b:	5b                   	pop    ebx
c0015a2c:	c3                   	ret    

c0015a2d <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015a2d:	56                   	push   esi
c0015a2e:	53                   	push   ebx
c0015a2f:	51                   	push   ecx
c0015a30:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015a34:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015a38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a3c:	56                   	push   esi
c0015a3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a45:	e8 e5 fe ff ff       	call   c001592f <Reg::readString(char*, char*, char*, int)>
c0015a4a:	83 c4 10             	add    esp,0x10
c0015a4d:	84 c0                	test   al,al
c0015a4f:	74 02                	je     c0015a53 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c0015a51:	89 f3                	mov    ebx,esi
c0015a53:	89 d8                	mov    eax,ebx
c0015a55:	5a                   	pop    edx
c0015a56:	5b                   	pop    ebx
c0015a57:	5e                   	pop    esi
c0015a58:	c3                   	ret    

c0015a59 <Sys::exit(regs*)>:
c0015a59:	83 ec 18             	sub    esp,0x18
c0015a5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015a60:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015a63:	e8 3a 31 00 00       	call   c0018ba2 <terminateTask(int)>
c0015a68:	83 c8 ff             	or     eax,0xffffffff
c0015a6b:	83 c4 1c             	add    esp,0x1c
c0015a6e:	89 c2                	mov    edx,eax
c0015a70:	c3                   	ret    

c0015a71 <Sys::loadDLL(regs*)>:
c0015a71:	56                   	push   esi
c0015a72:	53                   	push   ebx
c0015a73:	31 d2                	xor    edx,edx
c0015a75:	51                   	push   ecx
c0015a76:	b8 01 00 00 00       	mov    eax,0x1
c0015a7b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015a7f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0015a83:	74 7d                	je     c0015b02 <Sys::loadDLL(regs*)+0x91>
c0015a85:	83 ec 0c             	sub    esp,0xc
c0015a88:	68 14 01 00 00       	push   0x114
c0015a8d:	e8 9e 95 ff ff       	call   c000f030 <operator new(unsigned long)>
c0015a92:	83 c4 0c             	add    esp,0xc
c0015a95:	89 c3                	mov    ebx,eax
c0015a97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a9c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015a9f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015aa2:	53                   	push   ebx
c0015aa3:	e8 a6 9b ff ff       	call   c000f64e <File::File(char const*, Process*)>
c0015aa8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015aab:	e8 70 9e ff ff       	call   c000f920 <File::exists()>
c0015ab0:	83 c4 10             	add    esp,0x10
c0015ab3:	84 c0                	test   al,al
c0015ab5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ab7:	75 11                	jne    c0015aca <Sys::loadDLL(regs*)+0x59>
c0015ab9:	83 ec 0c             	sub    esp,0xc
c0015abc:	53                   	push   ebx
c0015abd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ac0:	83 c4 10             	add    esp,0x10
c0015ac3:	b8 03 00 00 00       	mov    eax,0x3
c0015ac8:	eb 36                	jmp    c0015b00 <Sys::loadDLL(regs*)+0x8f>
c0015aca:	83 ec 0c             	sub    esp,0xc
c0015acd:	53                   	push   ebx
c0015ace:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ad1:	58                   	pop    eax
c0015ad2:	5a                   	pop    edx
c0015ad3:	6a 00                	push   0x0
c0015ad5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015ad8:	e8 df 20 00 00       	call   c0017bbc <Thr::loadDLL(char const*, bool)>
c0015add:	83 c4 10             	add    esp,0x10
c0015ae0:	89 c1                	mov    ecx,eax
c0015ae2:	31 d2                	xor    edx,edx
c0015ae4:	b8 04 00 00 00       	mov    eax,0x4
c0015ae9:	85 c9                	test   ecx,ecx
c0015aeb:	74 15                	je     c0015b02 <Sys::loadDLL(regs*)+0x91>
c0015aed:	53                   	push   ebx
c0015aee:	53                   	push   ebx
c0015aef:	ff 35 88 3d 02 c0    	push   DWORD PTR ds:0xc0023d88
c0015af5:	51                   	push   ecx
c0015af6:	e8 87 22 00 00       	call   c0017d82 <Thr::executeDLL(unsigned long, void*)>
c0015afb:	83 c4 10             	add    esp,0x10
c0015afe:	31 c0                	xor    eax,eax
c0015b00:	31 d2                	xor    edx,edx
c0015b02:	59                   	pop    ecx
c0015b03:	5b                   	pop    ebx
c0015b04:	5e                   	pop    esi
c0015b05:	c3                   	ret    

c0015b06 <Sys::read(regs*)>:
c0015b06:	57                   	push   edi
c0015b07:	56                   	push   esi
c0015b08:	53                   	push   ebx
c0015b09:	83 ec 10             	sub    esp,0x10
c0015b0c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015b10:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015b13:	83 f8 02             	cmp    eax,0x2
c0015b16:	77 10                	ja     c0015b28 <Sys::read(regs*)+0x22>
c0015b18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b1d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015b20:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b26:	eb 0e                	jmp    c0015b36 <Sys::read(regs*)+0x30>
c0015b28:	83 ec 0c             	sub    esp,0xc
c0015b2b:	50                   	push   eax
c0015b2c:	e8 98 84 ff ff       	call   c000dfc9 <getFromFileDescriptor(int)>
c0015b31:	83 c4 10             	add    esp,0x10
c0015b34:	89 c1                	mov    ecx,eax
c0015b36:	83 c8 ff             	or     eax,0xffffffff
c0015b39:	85 c9                	test   ecx,ecx
c0015b3b:	89 c2                	mov    edx,eax
c0015b3d:	74 28                	je     c0015b67 <Sys::read(regs*)+0x61>
c0015b3f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015b47:	31 ff                	xor    edi,edi
c0015b49:	83 ec 0c             	sub    esp,0xc
c0015b4c:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015b4e:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015b52:	52                   	push   edx
c0015b53:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015b56:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015b59:	57                   	push   edi
c0015b5a:	56                   	push   esi
c0015b5b:	51                   	push   ecx
c0015b5c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015b5f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015b63:	83 c4 20             	add    esp,0x20
c0015b66:	99                   	cdq    
c0015b67:	83 c4 10             	add    esp,0x10
c0015b6a:	5b                   	pop    ebx
c0015b6b:	5e                   	pop    esi
c0015b6c:	5f                   	pop    edi
c0015b6d:	c3                   	ret    

c0015b6e <Sys::sbrk(regs*)>:
c0015b6e:	56                   	push   esi
c0015b6f:	53                   	push   ebx
c0015b70:	50                   	push   eax
c0015b71:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b76:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b7a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015b7d:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0015b80:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c0015b86:	85 db                	test   ebx,ebx
c0015b88:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0015b8b:	74 02                	je     c0015b8f <Sys::sbrk(regs*)+0x21>
c0015b8d:	79 06                	jns    c0015b95 <Sys::sbrk(regs*)+0x27>
c0015b8f:	89 f0                	mov    eax,esi
c0015b91:	31 d2                	xor    edx,edx
c0015b93:	eb 2a                	jmp    c0015bbf <Sys::sbrk(regs*)+0x51>
c0015b95:	83 c8 ff             	or     eax,0xffffffff
c0015b98:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0015b9e:	89 c2                	mov    edx,eax
c0015ba0:	77 1d                	ja     c0015bbf <Sys::sbrk(regs*)+0x51>
c0015ba2:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0015ba8:	50                   	push   eax
c0015ba9:	c1 ea 0c             	shr    edx,0xc
c0015bac:	68 07 04 00 00       	push   0x407
c0015bb1:	52                   	push   edx
c0015bb2:	51                   	push   ecx
c0015bb3:	e8 68 8d ff ff       	call   c000e920 <VAS::allocatePages(int, int)>
c0015bb8:	89 f0                	mov    eax,esi
c0015bba:	31 d2                	xor    edx,edx
c0015bbc:	83 c4 10             	add    esp,0x10
c0015bbf:	59                   	pop    ecx
c0015bc0:	5b                   	pop    ebx
c0015bc1:	5e                   	pop    esi
c0015bc2:	c3                   	ret    

c0015bc3 <Sys::write(regs*)>:
c0015bc3:	57                   	push   edi
c0015bc4:	56                   	push   esi
c0015bc5:	53                   	push   ebx
c0015bc6:	83 ec 18             	sub    esp,0x18
c0015bc9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015bcd:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015bd0:	68 73 20 02 c0       	push   0xc0022073
c0015bd5:	e8 45 95 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0015bda:	83 c4 10             	add    esp,0x10
c0015bdd:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c0015be1:	77 10                	ja     c0015bf3 <Sys::write(regs*)+0x30>
c0015be3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015be8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015beb:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015bf1:	eb 1b                	jmp    c0015c0e <Sys::write(regs*)+0x4b>
c0015bf3:	83 ec 0c             	sub    esp,0xc
c0015bf6:	68 92 20 02 c0       	push   0xc0022092
c0015bfb:	e8 1f 95 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0015c00:	58                   	pop    eax
c0015c01:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015c04:	e8 c0 83 ff ff       	call   c000dfc9 <getFromFileDescriptor(int)>
c0015c09:	83 c4 10             	add    esp,0x10
c0015c0c:	89 c1                	mov    ecx,eax
c0015c0e:	83 c8 ff             	or     eax,0xffffffff
c0015c11:	85 c9                	test   ecx,ecx
c0015c13:	89 c2                	mov    edx,eax
c0015c15:	74 28                	je     c0015c3f <Sys::write(regs*)+0x7c>
c0015c17:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015c1f:	31 ff                	xor    edi,edi
c0015c21:	83 ec 0c             	sub    esp,0xc
c0015c24:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015c26:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015c2a:	52                   	push   edx
c0015c2b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015c2e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015c31:	57                   	push   edi
c0015c32:	56                   	push   esi
c0015c33:	51                   	push   ecx
c0015c34:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015c37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015c3b:	83 c4 20             	add    esp,0x20
c0015c3e:	99                   	cdq    
c0015c3f:	83 c4 10             	add    esp,0x10
c0015c42:	5b                   	pop    ebx
c0015c43:	5e                   	pop    esi
c0015c44:	5f                   	pop    edi
c0015c45:	c3                   	ret    

c0015c46 <Sys::yield(regs*)>:
c0015c46:	83 ec 0c             	sub    esp,0xc
c0015c49:	e8 3e 25 00 00       	call   c001818c <lockScheduler()>
c0015c4e:	e8 6d 28 00 00       	call   c00184c0 <schedule()>
c0015c53:	e8 36 25 00 00       	call   c001818e <unlockScheduler()>
c0015c58:	31 c0                	xor    eax,eax
c0015c5a:	31 d2                	xor    edx,edx
c0015c5c:	83 c4 0c             	add    esp,0xc
c0015c5f:	c3                   	ret    

c0015c60 <sysCallGetPID(regs*)>:
c0015c60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c65:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015c68:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c6a:	99                   	cdq    
c0015c6b:	c3                   	ret    

c0015c6c <sysCallSeekDir(regs*)>:
c0015c6c:	31 c0                	xor    eax,eax
c0015c6e:	31 d2                	xor    edx,edx
c0015c70:	c3                   	ret    

c0015c71 <sysCallTellDir(regs*)>:
c0015c71:	31 c0                	xor    eax,eax
c0015c73:	31 d2                	xor    edx,edx
c0015c75:	c3                   	ret    

c0015c76 <sysCallVerify(regs*)>:
c0015c76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c7a:	31 d2                	xor    edx,edx
c0015c7c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015c7f:	c3                   	ret    

c0015c80 <sysCallFork(regs*)>:
c0015c80:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c85:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c8a:	c3                   	ret    

c0015c8b <sysCallExecve(regs*)>:
c0015c8b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c90:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c95:	c3                   	ret    

c0015c96 <sysCallGetArgc(regs*)>:
c0015c96:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c9b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015c9e:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c0015ca4:	99                   	cdq    
c0015ca5:	c3                   	ret    

c0015ca6 <sysFormatDisk(regs*)>:
c0015ca6:	56                   	push   esi
c0015ca7:	53                   	push   ebx
c0015ca8:	53                   	push   ebx
c0015ca9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015cad:	8b 1d e8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023ee8
c0015cb3:	eb 25                	jmp    c0015cda <sysFormatDisk(regs*)+0x34>
c0015cb5:	83 ec 0c             	sub    esp,0xc
c0015cb8:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015cbb:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015cbd:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015cc0:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015cc3:	50                   	push   eax
c0015cc4:	ff 34 85 80 43 02 c0 	push   DWORD PTR [eax*4-0x3ffdbc80]
c0015ccb:	53                   	push   ebx
c0015ccc:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0015ccf:	83 c4 20             	add    esp,0x20
c0015cd2:	83 f8 08             	cmp    eax,0x8
c0015cd5:	75 12                	jne    c0015ce9 <sysFormatDisk(regs*)+0x43>
c0015cd7:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015cda:	85 db                	test   ebx,ebx
c0015cdc:	75 d7                	jne    c0015cb5 <sysFormatDisk(regs*)+0xf>
c0015cde:	59                   	pop    ecx
c0015cdf:	b8 03 00 00 00       	mov    eax,0x3
c0015ce4:	31 d2                	xor    edx,edx
c0015ce6:	5b                   	pop    ebx
c0015ce7:	5e                   	pop    esi
c0015ce8:	c3                   	ret    
c0015ce9:	85 c0                	test   eax,eax
c0015ceb:	74 1b                	je     c0015d08 <sysFormatDisk(regs*)+0x62>
c0015ced:	83 f8 09             	cmp    eax,0x9
c0015cf0:	74 0b                	je     c0015cfd <sysFormatDisk(regs*)+0x57>
c0015cf2:	59                   	pop    ecx
c0015cf3:	b8 02 00 00 00       	mov    eax,0x2
c0015cf8:	31 d2                	xor    edx,edx
c0015cfa:	5b                   	pop    ebx
c0015cfb:	5e                   	pop    esi
c0015cfc:	c3                   	ret    
c0015cfd:	59                   	pop    ecx
c0015cfe:	b8 01 00 00 00       	mov    eax,0x1
c0015d03:	31 d2                	xor    edx,edx
c0015d05:	5b                   	pop    ebx
c0015d06:	5e                   	pop    esi
c0015d07:	c3                   	ret    
c0015d08:	59                   	pop    ecx
c0015d09:	31 c0                	xor    eax,eax
c0015d0b:	31 d2                	xor    edx,edx
c0015d0d:	5b                   	pop    ebx
c0015d0e:	5e                   	pop    esi
c0015d0f:	c3                   	ret    

c0015d10 <sysSetDiskVolumeLabel(regs*)>:
c0015d10:	56                   	push   esi
c0015d11:	53                   	push   ebx
c0015d12:	53                   	push   ebx
c0015d13:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d17:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015d1a:	83 f8 19             	cmp    eax,0x19
c0015d1d:	77 29                	ja     c0015d48 <sysSetDiskVolumeLabel(regs*)+0x38>
c0015d1f:	8b 0c 85 80 43 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbc80]
c0015d26:	85 c9                	test   ecx,ecx
c0015d28:	74 1e                	je     c0015d48 <sysSetDiskVolumeLabel(regs*)+0x38>
c0015d2a:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0015d2d:	85 d2                	test   edx,edx
c0015d2f:	74 17                	je     c0015d48 <sysSetDiskVolumeLabel(regs*)+0x38>
c0015d31:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c0015d37:	8b 33                	mov    esi,DWORD PTR [ebx]
c0015d39:	52                   	push   edx
c0015d3a:	50                   	push   eax
c0015d3b:	51                   	push   ecx
c0015d3c:	53                   	push   ebx
c0015d3d:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015d40:	83 c4 10             	add    esp,0x10
c0015d43:	99                   	cdq    
c0015d44:	59                   	pop    ecx
c0015d45:	5b                   	pop    ebx
c0015d46:	5e                   	pop    esi
c0015d47:	c3                   	ret    
c0015d48:	59                   	pop    ecx
c0015d49:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015d4e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015d53:	5b                   	pop    ebx
c0015d54:	5e                   	pop    esi
c0015d55:	c3                   	ret    

c0015d56 <sysGetDiskVolumeLabel(regs*)>:
c0015d56:	57                   	push   edi
c0015d57:	56                   	push   esi
c0015d58:	53                   	push   ebx
c0015d59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d5d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015d60:	83 fa 19             	cmp    edx,0x19
c0015d63:	77 34                	ja     c0015d99 <sysGetDiskVolumeLabel(regs*)+0x43>
c0015d65:	8b 0c 95 80 43 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdbc80]
c0015d6c:	85 c9                	test   ecx,ecx
c0015d6e:	74 29                	je     c0015d99 <sysGetDiskVolumeLabel(regs*)+0x43>
c0015d70:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0015d73:	85 db                	test   ebx,ebx
c0015d75:	74 22                	je     c0015d99 <sysGetDiskVolumeLabel(regs*)+0x43>
c0015d77:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015d7a:	85 c0                	test   eax,eax
c0015d7c:	74 1b                	je     c0015d99 <sysGetDiskVolumeLabel(regs*)+0x43>
c0015d7e:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c0015d84:	83 ec 0c             	sub    esp,0xc
c0015d87:	8b 3e                	mov    edi,DWORD PTR [esi]
c0015d89:	50                   	push   eax
c0015d8a:	53                   	push   ebx
c0015d8b:	52                   	push   edx
c0015d8c:	51                   	push   ecx
c0015d8d:	56                   	push   esi
c0015d8e:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0015d91:	83 c4 20             	add    esp,0x20
c0015d94:	99                   	cdq    
c0015d95:	5b                   	pop    ebx
c0015d96:	5e                   	pop    esi
c0015d97:	5f                   	pop    edi
c0015d98:	c3                   	ret    
c0015d99:	5b                   	pop    ebx
c0015d9a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015d9f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015da4:	5e                   	pop    esi
c0015da5:	5f                   	pop    edi
c0015da6:	c3                   	ret    

c0015da7 <sysShutdown(regs*)>:
c0015da7:	83 ec 0c             	sub    esp,0xc
c0015daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dae:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015db1:	85 c0                	test   eax,eax
c0015db3:	74 18                	je     c0015dcd <sysShutdown(regs*)+0x26>
c0015db5:	83 f8 01             	cmp    eax,0x1
c0015db8:	74 38                	je     c0015df2 <sysShutdown(regs*)+0x4b>
c0015dba:	83 f8 02             	cmp    eax,0x2
c0015dbd:	74 24                	je     c0015de3 <sysShutdown(regs*)+0x3c>
c0015dbf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015dc4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015dc9:	83 c4 0c             	add    esp,0xc
c0015dcc:	c3                   	ret    
c0015dcd:	a1 88 3d 02 c0       	mov    eax,ds:0xc0023d88
c0015dd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0015dd4:	6a 00                	push   0x0
c0015dd6:	6a 00                	push   0x0
c0015dd8:	6a 00                	push   0x0
c0015dda:	50                   	push   eax
c0015ddb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015dde:	83 c4 10             	add    esp,0x10
c0015de1:	eb dc                	jmp    c0015dbf <sysShutdown(regs*)+0x18>
c0015de3:	a1 88 3d 02 c0       	mov    eax,ds:0xc0023d88
c0015de8:	8b 10                	mov    edx,DWORD PTR [eax]
c0015dea:	6a 00                	push   0x0
c0015dec:	6a 00                	push   0x0
c0015dee:	6a 01                	push   0x1
c0015df0:	eb e8                	jmp    c0015dda <sysShutdown(regs*)+0x33>
c0015df2:	a1 00 44 02 c0       	mov    eax,ds:0xc0024400
c0015df7:	85 c0                	test   eax,eax
c0015df9:	74 02                	je     c0015dfd <sysShutdown(regs*)+0x56>
c0015dfb:	ff d0                	call   eax
c0015dfd:	31 c0                	xor    eax,eax
c0015dff:	31 d2                	xor    edx,edx
c0015e01:	83 c4 0c             	add    esp,0xc
c0015e04:	c3                   	ret    

c0015e05 <sysCallGetCwd(regs*)>:
c0015e05:	83 ec 10             	sub    esp,0x10
c0015e08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015e0c:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015e0f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015e12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e17:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015e1a:	e8 a0 9b ff ff       	call   c000f9bf <getcwd(Process*, char*, int)>
c0015e1f:	83 c4 1c             	add    esp,0x1c
c0015e22:	99                   	cdq    
c0015e23:	c3                   	ret    

c0015e24 <sysCallSetCwd(regs*)>:
c0015e24:	83 ec 14             	sub    esp,0x14
c0015e27:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015e2b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015e2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e33:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015e36:	e8 ae 9b ff ff       	call   c000f9e9 <setcwd(Process*, char*)>
c0015e3b:	83 c4 1c             	add    esp,0x1c
c0015e3e:	99                   	cdq    
c0015e3f:	c3                   	ret    

c0015e40 <sysCallRealpath(regs*)>:
c0015e40:	83 ec 0c             	sub    esp,0xc
c0015e43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e47:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015e4a:	85 d2                	test   edx,edx
c0015e4c:	74 07                	je     c0015e55 <sysCallRealpath(regs*)+0x15>
c0015e4e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015e51:	85 c0                	test   eax,eax
c0015e53:	75 0b                	jne    c0015e60 <sysCallRealpath(regs*)+0x20>
c0015e55:	b8 01 00 00 00       	mov    eax,0x1
c0015e5a:	31 d2                	xor    edx,edx
c0015e5c:	83 c4 0c             	add    esp,0xc
c0015e5f:	c3                   	ret    
c0015e60:	51                   	push   ecx
c0015e61:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015e67:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0015e6a:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0015e70:	51                   	push   ecx
c0015e71:	52                   	push   edx
c0015e72:	50                   	push   eax
c0015e73:	e8 2c 96 ff ff       	call   c000f4a4 <standardiseFiles(char*, char const*, char const*)>
c0015e78:	83 c4 10             	add    esp,0x10
c0015e7b:	31 c0                	xor    eax,eax
c0015e7d:	31 d2                	xor    edx,edx
c0015e7f:	83 c4 0c             	add    esp,0xc
c0015e82:	c3                   	ret    

c0015e83 <sysCallReadDir(regs*)>:
c0015e83:	53                   	push   ebx
c0015e84:	83 ec 18             	sub    esp,0x18
c0015e87:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015e8b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015e8e:	83 f8 02             	cmp    eax,0x2
c0015e91:	76 53                	jbe    c0015ee6 <sysCallReadDir(regs*)+0x63>
c0015e93:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015e96:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c0015e9c:	77 4f                	ja     c0015eed <sysCallReadDir(regs*)+0x6a>
c0015e9e:	83 ec 0c             	sub    esp,0xc
c0015ea1:	50                   	push   eax
c0015ea2:	e8 22 81 ff ff       	call   c000dfc9 <getFromFileDescriptor(int)>
c0015ea7:	83 c4 10             	add    esp,0x10
c0015eaa:	85 c0                	test   eax,eax
c0015eac:	74 50                	je     c0015efe <sysCallReadDir(regs*)+0x7b>
c0015eae:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015eb6:	83 ec 0c             	sub    esp,0xc
c0015eb9:	8b 10                	mov    edx,DWORD PTR [eax]
c0015ebb:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0015ebf:	51                   	push   ecx
c0015ec0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015ec3:	6a 00                	push   0x0
c0015ec5:	68 10 01 00 00       	push   0x110
c0015eca:	50                   	push   eax
c0015ecb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015ece:	83 c4 20             	add    esp,0x20
c0015ed1:	85 c0                	test   eax,eax
c0015ed3:	74 38                	je     c0015f0d <sysCallReadDir(regs*)+0x8a>
c0015ed5:	83 f8 07             	cmp    eax,0x7
c0015ed8:	74 0c                	je     c0015ee6 <sysCallReadDir(regs*)+0x63>
c0015eda:	b8 02 00 00 00       	mov    eax,0x2
c0015edf:	31 d2                	xor    edx,edx
c0015ee1:	83 c4 18             	add    esp,0x18
c0015ee4:	5b                   	pop    ebx
c0015ee5:	c3                   	ret    
c0015ee6:	b8 01 00 00 00       	mov    eax,0x1
c0015eeb:	eb f2                	jmp    c0015edf <sysCallReadDir(regs*)+0x5c>
c0015eed:	83 ec 08             	sub    esp,0x8
c0015ef0:	52                   	push   edx
c0015ef1:	68 b4 20 02 c0       	push   0xc00220b4
c0015ef6:	e8 24 92 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0015efb:	83 c4 10             	add    esp,0x10
c0015efe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f03:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015f08:	83 c4 18             	add    esp,0x18
c0015f0b:	5b                   	pop    ebx
c0015f0c:	c3                   	ret    
c0015f0d:	31 c0                	xor    eax,eax
c0015f0f:	eb ce                	jmp    c0015edf <sysCallReadDir(regs*)+0x5c>

c0015f11 <sysCallIsATTY(regs*)>:
c0015f11:	83 ec 0c             	sub    esp,0xc
c0015f14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f18:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015f1b:	83 f8 02             	cmp    eax,0x2
c0015f1e:	76 07                	jbe    c0015f27 <sysCallIsATTY(regs*)+0x16>
c0015f20:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015f25:	75 26                	jne    c0015f4d <sysCallIsATTY(regs*)+0x3c>
c0015f27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f2c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015f2f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015f35:	85 c0                	test   eax,eax
c0015f37:	74 24                	je     c0015f5d <sysCallIsATTY(regs*)+0x4c>
c0015f39:	83 ec 0c             	sub    esp,0xc
c0015f3c:	8b 10                	mov    edx,DWORD PTR [eax]
c0015f3e:	50                   	push   eax
c0015f3f:	ff 12                	call   DWORD PTR [edx]
c0015f41:	31 d2                	xor    edx,edx
c0015f43:	0f b6 c0             	movzx  eax,al
c0015f46:	83 c4 10             	add    esp,0x10
c0015f49:	83 c4 0c             	add    esp,0xc
c0015f4c:	c3                   	ret    
c0015f4d:	83 ec 0c             	sub    esp,0xc
c0015f50:	50                   	push   eax
c0015f51:	e8 73 80 ff ff       	call   c000dfc9 <getFromFileDescriptor(int)>
c0015f56:	83 c4 10             	add    esp,0x10
c0015f59:	85 c0                	test   eax,eax
c0015f5b:	75 dc                	jne    c0015f39 <sysCallIsATTY(regs*)+0x28>
c0015f5d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f62:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015f67:	83 c4 0c             	add    esp,0xc
c0015f6a:	c3                   	ret    

c0015f6b <sysCallSeek(regs*)>:
c0015f6b:	53                   	push   ebx
c0015f6c:	83 ec 08             	sub    esp,0x8
c0015f6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015f73:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015f76:	83 f8 02             	cmp    eax,0x2
c0015f79:	76 4a                	jbe    c0015fc5 <sysCallSeek(regs*)+0x5a>
c0015f7b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015f80:	77 32                	ja     c0015fb4 <sysCallSeek(regs*)+0x49>
c0015f82:	83 ec 0c             	sub    esp,0xc
c0015f85:	50                   	push   eax
c0015f86:	e8 3e 80 ff ff       	call   c000dfc9 <getFromFileDescriptor(int)>
c0015f8b:	83 c4 0c             	add    esp,0xc
c0015f8e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015f91:	31 db                	xor    ebx,ebx
c0015f93:	53                   	push   ebx
c0015f94:	51                   	push   ecx
c0015f95:	50                   	push   eax
c0015f96:	e8 d5 97 ff ff       	call   c000f770 <File::seek(unsigned long long)>
c0015f9b:	83 c4 10             	add    esp,0x10
c0015f9e:	85 c0                	test   eax,eax
c0015fa0:	0f 95 c0             	setne  al
c0015fa3:	31 d2                	xor    edx,edx
c0015fa5:	0f b6 c0             	movzx  eax,al
c0015fa8:	f7 d8                	neg    eax
c0015faa:	83 d2 00             	adc    edx,0x0
c0015fad:	83 c4 08             	add    esp,0x8
c0015fb0:	f7 da                	neg    edx
c0015fb2:	5b                   	pop    ebx
c0015fb3:	c3                   	ret    
c0015fb4:	83 ec 08             	sub    esp,0x8
c0015fb7:	50                   	push   eax
c0015fb8:	68 70 21 02 c0       	push   0xc0022170
c0015fbd:	e8 5d 91 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0015fc2:	83 c4 10             	add    esp,0x10
c0015fc5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015fca:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015fcf:	83 c4 08             	add    esp,0x8
c0015fd2:	5b                   	pop    ebx
c0015fd3:	c3                   	ret    

c0015fd4 <sysCallTell(regs*)>:
c0015fd4:	53                   	push   ebx
c0015fd5:	83 ec 08             	sub    esp,0x8
c0015fd8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015fdc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015fdf:	83 f8 02             	cmp    eax,0x2
c0015fe2:	76 5e                	jbe    c0016042 <sysCallTell(regs*)+0x6e>
c0015fe4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015fe9:	77 2d                	ja     c0016018 <sysCallTell(regs*)+0x44>
c0015feb:	83 ec 0c             	sub    esp,0xc
c0015fee:	50                   	push   eax
c0015fef:	e8 d5 7f ff ff       	call   c000dfc9 <getFromFileDescriptor(int)>
c0015ff4:	5a                   	pop    edx
c0015ff5:	59                   	pop    ecx
c0015ff6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015ff9:	50                   	push   eax
c0015ffa:	e8 c7 97 ff ff       	call   c000f7c6 <File::tell(unsigned long long*)>
c0015fff:	83 c4 10             	add    esp,0x10
c0016002:	85 c0                	test   eax,eax
c0016004:	0f 95 c0             	setne  al
c0016007:	31 d2                	xor    edx,edx
c0016009:	0f b6 c0             	movzx  eax,al
c001600c:	f7 d8                	neg    eax
c001600e:	83 d2 00             	adc    edx,0x0
c0016011:	83 c4 08             	add    esp,0x8
c0016014:	f7 da                	neg    edx
c0016016:	5b                   	pop    ebx
c0016017:	c3                   	ret    
c0016018:	83 ec 08             	sub    esp,0x8
c001601b:	50                   	push   eax
c001601c:	68 8a 21 02 c0       	push   0xc002218a
c0016021:	e8 f9 90 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0016026:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016029:	83 c4 10             	add    esp,0x10
c001602c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016032:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016039:	31 d2                	xor    edx,edx
c001603b:	31 c0                	xor    eax,eax
c001603d:	83 c4 08             	add    esp,0x8
c0016040:	5b                   	pop    ebx
c0016041:	c3                   	ret    
c0016042:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016047:	ba ff ff ff ff       	mov    edx,0xffffffff
c001604c:	83 c4 08             	add    esp,0x8
c001604f:	5b                   	pop    ebx
c0016050:	c3                   	ret    

c0016051 <sysCallSizeFromFilename(regs*)>:
c0016051:	57                   	push   edi
c0016052:	56                   	push   esi
c0016053:	53                   	push   ebx
c0016054:	83 ec 10             	sub    esp,0x10
c0016057:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001605b:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001605e:	83 fb 02             	cmp    ebx,0x2
c0016061:	0f 86 8a 00 00 00    	jbe    c00160f1 <sysCallSizeFromFilename(regs*)+0xa0>
c0016067:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001606d:	77 56                	ja     c00160c5 <sysCallSizeFromFilename(regs*)+0x74>
c001606f:	83 ec 0c             	sub    esp,0xc
c0016072:	68 14 01 00 00       	push   0x114
c0016077:	e8 b4 8f ff ff       	call   c000f030 <operator new(unsigned long)>
c001607c:	83 c4 0c             	add    esp,0xc
c001607f:	89 c7                	mov    edi,eax
c0016081:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016086:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016089:	53                   	push   ebx
c001608a:	57                   	push   edi
c001608b:	e8 be 95 ff ff       	call   c000f64e <File::File(char const*, Process*)>
c0016090:	83 c4 0c             	add    esp,0xc
c0016093:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016097:	50                   	push   eax
c0016098:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001609b:	57                   	push   edi
c001609c:	e8 bd 98 ff ff       	call   c000f95e <File::stat(unsigned long long*, bool*)>
c00160a1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00160a4:	89 c3                	mov    ebx,eax
c00160a6:	8b 07                	mov    eax,DWORD PTR [edi]
c00160a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00160ab:	83 c4 10             	add    esp,0x10
c00160ae:	31 c0                	xor    eax,eax
c00160b0:	85 db                	test   ebx,ebx
c00160b2:	0f 95 c0             	setne  al
c00160b5:	31 d2                	xor    edx,edx
c00160b7:	f7 d8                	neg    eax
c00160b9:	83 d2 00             	adc    edx,0x0
c00160bc:	83 c4 10             	add    esp,0x10
c00160bf:	f7 da                	neg    edx
c00160c1:	5b                   	pop    ebx
c00160c2:	5e                   	pop    esi
c00160c3:	5f                   	pop    edi
c00160c4:	c3                   	ret    
c00160c5:	83 ec 08             	sub    esp,0x8
c00160c8:	53                   	push   ebx
c00160c9:	68 a4 21 02 c0       	push   0xc00221a4
c00160ce:	e8 4c 90 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c00160d3:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00160d6:	83 c4 10             	add    esp,0x10
c00160d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00160df:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00160e6:	31 d2                	xor    edx,edx
c00160e8:	83 c4 10             	add    esp,0x10
c00160eb:	31 c0                	xor    eax,eax
c00160ed:	5b                   	pop    ebx
c00160ee:	5e                   	pop    esi
c00160ef:	5f                   	pop    edi
c00160f0:	c3                   	ret    
c00160f1:	83 c4 10             	add    esp,0x10
c00160f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00160f9:	5b                   	pop    ebx
c00160fa:	ba ff ff ff ff       	mov    edx,0xffffffff
c00160ff:	5e                   	pop    esi
c0016100:	5f                   	pop    edi
c0016101:	c3                   	ret    

c0016102 <sysCallSize(regs*)>:
c0016102:	53                   	push   ebx
c0016103:	83 ec 18             	sub    esp,0x18
c0016106:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001610a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001610d:	83 f8 02             	cmp    eax,0x2
c0016110:	76 64                	jbe    c0016176 <sysCallSize(regs*)+0x74>
c0016112:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016117:	77 33                	ja     c001614c <sysCallSize(regs*)+0x4a>
c0016119:	83 ec 0c             	sub    esp,0xc
c001611c:	50                   	push   eax
c001611d:	e8 a7 7e ff ff       	call   c000dfc9 <getFromFileDescriptor(int)>
c0016122:	83 c4 0c             	add    esp,0xc
c0016125:	8d 54 24 13          	lea    edx,[esp+0x13]
c0016129:	52                   	push   edx
c001612a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001612d:	50                   	push   eax
c001612e:	e8 2b 98 ff ff       	call   c000f95e <File::stat(unsigned long long*, bool*)>
c0016133:	83 c4 10             	add    esp,0x10
c0016136:	85 c0                	test   eax,eax
c0016138:	0f 95 c0             	setne  al
c001613b:	31 d2                	xor    edx,edx
c001613d:	0f b6 c0             	movzx  eax,al
c0016140:	f7 d8                	neg    eax
c0016142:	83 d2 00             	adc    edx,0x0
c0016145:	83 c4 18             	add    esp,0x18
c0016148:	f7 da                	neg    edx
c001614a:	5b                   	pop    ebx
c001614b:	c3                   	ret    
c001614c:	83 ec 08             	sub    esp,0x8
c001614f:	50                   	push   eax
c0016150:	68 a4 21 02 c0       	push   0xc00221a4
c0016155:	e8 c5 8f ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001615a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001615d:	83 c4 10             	add    esp,0x10
c0016160:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016166:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001616d:	31 d2                	xor    edx,edx
c001616f:	31 c0                	xor    eax,eax
c0016171:	83 c4 18             	add    esp,0x18
c0016174:	5b                   	pop    ebx
c0016175:	c3                   	ret    
c0016176:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001617b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016180:	83 c4 18             	add    esp,0x18
c0016183:	5b                   	pop    ebx
c0016184:	c3                   	ret    

c0016185 <sysCallClose(regs*)>:
c0016185:	53                   	push   ebx
c0016186:	83 ec 08             	sub    esp,0x8
c0016189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001618d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016190:	83 f8 02             	cmp    eax,0x2
c0016193:	76 50                	jbe    c00161e5 <sysCallClose(regs*)+0x60>
c0016195:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001619a:	74 58                	je     c00161f4 <sysCallClose(regs*)+0x6f>
c001619c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00161a1:	74 60                	je     c0016203 <sysCallClose(regs*)+0x7e>
c00161a3:	77 2f                	ja     c00161d4 <sysCallClose(regs*)+0x4f>
c00161a5:	83 ec 0c             	sub    esp,0xc
c00161a8:	50                   	push   eax
c00161a9:	e8 1b 7e ff ff       	call   c000dfc9 <getFromFileDescriptor(int)>
c00161ae:	89 c3                	mov    ebx,eax
c00161b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00161b3:	e8 58 95 ff ff       	call   c000f710 <File::close()>
c00161b8:	83 c4 10             	add    esp,0x10
c00161bb:	85 db                	test   ebx,ebx
c00161bd:	74 0c                	je     c00161cb <sysCallClose(regs*)+0x46>
c00161bf:	83 ec 0c             	sub    esp,0xc
c00161c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00161c4:	53                   	push   ebx
c00161c5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00161c8:	83 c4 10             	add    esp,0x10
c00161cb:	31 c0                	xor    eax,eax
c00161cd:	31 d2                	xor    edx,edx
c00161cf:	83 c4 08             	add    esp,0x8
c00161d2:	5b                   	pop    ebx
c00161d3:	c3                   	ret    
c00161d4:	83 ec 08             	sub    esp,0x8
c00161d7:	50                   	push   eax
c00161d8:	68 d8 20 02 c0       	push   0xc00220d8
c00161dd:	e8 3d 8f ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c00161e2:	83 c4 10             	add    esp,0x10
c00161e5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00161ea:	ba ff ff ff ff       	mov    edx,0xffffffff
c00161ef:	83 c4 08             	add    esp,0x8
c00161f2:	5b                   	pop    ebx
c00161f3:	c3                   	ret    
c00161f4:	83 ec 0c             	sub    esp,0xc
c00161f7:	68 bf 21 02 c0       	push   0xc00221bf
c00161fc:	e8 1e 8f ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0016201:	eb c5                	jmp    c00161c8 <sysCallClose(regs*)+0x43>
c0016203:	83 ec 0c             	sub    esp,0xc
c0016206:	68 cd 21 02 c0       	push   0xc00221cd
c001620b:	eb ef                	jmp    c00161fc <sysCallClose(regs*)+0x77>

c001620d <sysCallOpenDir(regs*)>:
c001620d:	56                   	push   esi
c001620e:	53                   	push   ebx
c001620f:	53                   	push   ebx
c0016210:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016214:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0016217:	85 f6                	test   esi,esi
c0016219:	74 51                	je     c001626c <sysCallOpenDir(regs*)+0x5f>
c001621b:	83 ec 0c             	sub    esp,0xc
c001621e:	68 14 01 00 00       	push   0x114
c0016223:	e8 08 8e ff ff       	call   c000f030 <operator new(unsigned long)>
c0016228:	83 c4 0c             	add    esp,0xc
c001622b:	89 c6                	mov    esi,eax
c001622d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016232:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016235:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016238:	56                   	push   esi
c0016239:	e8 d2 98 ff ff       	call   c000fb10 <Directory::Directory(char const*, Process*)>
c001623e:	89 34 24             	mov    DWORD PTR [esp],esi
c0016241:	e8 2e 99 ff ff       	call   c000fb74 <Directory::open()>
c0016246:	83 c4 10             	add    esp,0x10
c0016249:	85 c0                	test   eax,eax
c001624b:	75 1f                	jne    c001626c <sysCallOpenDir(regs*)+0x5f>
c001624d:	83 ec 0c             	sub    esp,0xc
c0016250:	56                   	push   esi
c0016251:	e8 be 7a ff ff       	call   c000dd14 <UnixFile::getFileDescriptor()>
c0016256:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016259:	83 c4 10             	add    esp,0x10
c001625c:	89 02                	mov    DWORD PTR [edx],eax
c001625e:	c1 f8 1f             	sar    eax,0x1f
c0016261:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016264:	31 c0                	xor    eax,eax
c0016266:	59                   	pop    ecx
c0016267:	31 d2                	xor    edx,edx
c0016269:	5b                   	pop    ebx
c001626a:	5e                   	pop    esi
c001626b:	c3                   	ret    
c001626c:	59                   	pop    ecx
c001626d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016272:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016277:	5b                   	pop    ebx
c0016278:	5e                   	pop    esi
c0016279:	c3                   	ret    

c001627a <sysCallMakeDir(regs*)>:
c001627a:	56                   	push   esi
c001627b:	53                   	push   ebx
c001627c:	83 ec 10             	sub    esp,0x10
c001627f:	68 14 01 00 00       	push   0x114
c0016284:	e8 a7 8d ff ff       	call   c000f030 <operator new(unsigned long)>
c0016289:	83 c4 0c             	add    esp,0xc
c001628c:	89 c3                	mov    ebx,eax
c001628e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016293:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016296:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001629a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001629d:	53                   	push   ebx
c001629e:	e8 6d 98 ff ff       	call   c000fb10 <Directory::Directory(char const*, Process*)>
c00162a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00162a6:	e8 a9 9a ff ff       	call   c000fd54 <Directory::create()>
c00162ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00162ae:	89 c6                	mov    esi,eax
c00162b0:	e8 1b 99 ff ff       	call   c000fbd0 <Directory::close()>
c00162b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00162b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00162ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00162bd:	31 c0                	xor    eax,eax
c00162bf:	85 f6                	test   esi,esi
c00162c1:	0f 95 c0             	setne  al
c00162c4:	31 d2                	xor    edx,edx
c00162c6:	f7 d8                	neg    eax
c00162c8:	83 d2 00             	adc    edx,0x0
c00162cb:	83 c4 14             	add    esp,0x14
c00162ce:	f7 da                	neg    edx
c00162d0:	5b                   	pop    ebx
c00162d1:	5e                   	pop    esi
c00162d2:	c3                   	ret    

c00162d3 <sysCallCloseDir(regs*)>:
c00162d3:	53                   	push   ebx
c00162d4:	83 ec 08             	sub    esp,0x8
c00162d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162db:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00162de:	83 f8 02             	cmp    eax,0x2
c00162e1:	76 47                	jbe    c001632a <sysCallCloseDir(regs*)+0x57>
c00162e3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00162e8:	77 2f                	ja     c0016319 <sysCallCloseDir(regs*)+0x46>
c00162ea:	83 ec 0c             	sub    esp,0xc
c00162ed:	50                   	push   eax
c00162ee:	e8 d6 7c ff ff       	call   c000dfc9 <getFromFileDescriptor(int)>
c00162f3:	89 c3                	mov    ebx,eax
c00162f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00162f8:	e8 d3 98 ff ff       	call   c000fbd0 <Directory::close()>
c00162fd:	83 c4 10             	add    esp,0x10
c0016300:	85 db                	test   ebx,ebx
c0016302:	74 0c                	je     c0016310 <sysCallCloseDir(regs*)+0x3d>
c0016304:	83 ec 0c             	sub    esp,0xc
c0016307:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016309:	53                   	push   ebx
c001630a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001630d:	83 c4 10             	add    esp,0x10
c0016310:	31 c0                	xor    eax,eax
c0016312:	31 d2                	xor    edx,edx
c0016314:	83 c4 08             	add    esp,0x8
c0016317:	5b                   	pop    ebx
c0016318:	c3                   	ret    
c0016319:	83 ec 08             	sub    esp,0x8
c001631c:	50                   	push   eax
c001631d:	68 00 21 02 c0       	push   0xc0022100
c0016322:	e8 f8 8d ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0016327:	83 c4 10             	add    esp,0x10
c001632a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001632f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016334:	83 c4 08             	add    esp,0x8
c0016337:	5b                   	pop    ebx
c0016338:	c3                   	ret    

c0016339 <sysCallWait(regs*)>:
c0016339:	83 ec 10             	sub    esp,0x10
c001633c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016340:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0016343:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016346:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016349:	e8 ed 22 00 00       	call   c001863b <waitTask(int, int*, int)>
c001634e:	83 c4 1c             	add    esp,0x1c
c0016351:	99                   	cdq    
c0016352:	c3                   	ret    

c0016353 <sysCallRmdir(regs*)>:
c0016353:	56                   	push   esi
c0016354:	53                   	push   ebx
c0016355:	83 ec 10             	sub    esp,0x10
c0016358:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001635c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001635f:	68 14 01 00 00       	push   0x114
c0016364:	e8 c7 8c ff ff       	call   c000f030 <operator new(unsigned long)>
c0016369:	83 c4 0c             	add    esp,0xc
c001636c:	89 c3                	mov    ebx,eax
c001636e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016373:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016376:	56                   	push   esi
c0016377:	53                   	push   ebx
c0016378:	e8 d1 92 ff ff       	call   c000f64e <File::File(char const*, Process*)>
c001637d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016380:	e8 a5 94 ff ff       	call   c000f82a <File::unlink()>
c0016385:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016388:	89 c6                	mov    esi,eax
c001638a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001638c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001638f:	31 c0                	xor    eax,eax
c0016391:	85 f6                	test   esi,esi
c0016393:	0f 95 c0             	setne  al
c0016396:	31 d2                	xor    edx,edx
c0016398:	f7 d8                	neg    eax
c001639a:	83 d2 00             	adc    edx,0x0
c001639d:	83 c4 14             	add    esp,0x14
c00163a0:	f7 da                	neg    edx
c00163a2:	5b                   	pop    ebx
c00163a3:	5e                   	pop    esi
c00163a4:	c3                   	ret    

c00163a5 <sysCallUnlink(regs*)>:
c00163a5:	56                   	push   esi
c00163a6:	53                   	push   ebx
c00163a7:	83 ec 10             	sub    esp,0x10
c00163aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00163ae:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00163b1:	68 14 01 00 00       	push   0x114
c00163b6:	e8 75 8c ff ff       	call   c000f030 <operator new(unsigned long)>
c00163bb:	83 c4 0c             	add    esp,0xc
c00163be:	89 c3                	mov    ebx,eax
c00163c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163c5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00163c8:	56                   	push   esi
c00163c9:	53                   	push   ebx
c00163ca:	e8 7f 92 ff ff       	call   c000f64e <File::File(char const*, Process*)>
c00163cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00163d2:	e8 53 94 ff ff       	call   c000f82a <File::unlink()>
c00163d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00163da:	89 c6                	mov    esi,eax
c00163dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00163de:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00163e1:	31 c0                	xor    eax,eax
c00163e3:	85 f6                	test   esi,esi
c00163e5:	0f 95 c0             	setne  al
c00163e8:	31 d2                	xor    edx,edx
c00163ea:	f7 d8                	neg    eax
c00163ec:	83 d2 00             	adc    edx,0x0
c00163ef:	83 c4 14             	add    esp,0x14
c00163f2:	f7 da                	neg    edx
c00163f4:	5b                   	pop    ebx
c00163f5:	5e                   	pop    esi
c00163f6:	c3                   	ret    

c00163f7 <sysCallGetArgv(regs*)>:
c00163f7:	83 ec 0c             	sub    esp,0xc
c00163fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163fe:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016401:	85 c0                	test   eax,eax
c0016403:	78 2b                	js     c0016430 <sysCallGetArgv(regs*)+0x39>
c0016405:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001640b:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001640e:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0016414:	7d 1a                	jge    c0016430 <sysCallGetArgv(regs*)+0x39>
c0016416:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001641d:	85 c0                	test   eax,eax
c001641f:	74 17                	je     c0016438 <sysCallGetArgv(regs*)+0x41>
c0016421:	83 ec 08             	sub    esp,0x8
c0016424:	50                   	push   eax
c0016425:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0016428:	e8 7a a2 fe ff       	call   c00006a7 <strcpy>
c001642d:	83 c4 10             	add    esp,0x10
c0016430:	31 c0                	xor    eax,eax
c0016432:	31 d2                	xor    edx,edx
c0016434:	83 c4 0c             	add    esp,0xc
c0016437:	c3                   	ret    
c0016438:	b8 01 00 00 00       	mov    eax,0x1
c001643d:	31 d2                	xor    edx,edx
c001643f:	83 c4 0c             	add    esp,0xc
c0016442:	c3                   	ret    

c0016443 <sysCallTTYName(regs*)>:
c0016443:	56                   	push   esi
c0016444:	53                   	push   ebx
c0016445:	53                   	push   ebx
c0016446:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001644a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001644d:	85 c0                	test   eax,eax
c001644f:	74 5f                	je     c00164b0 <sysCallTTYName(regs*)+0x6d>
c0016451:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016454:	83 f8 02             	cmp    eax,0x2
c0016457:	77 3e                	ja     c0016497 <sysCallTTYName(regs*)+0x54>
c0016459:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001645e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016461:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016467:	85 db                	test   ebx,ebx
c0016469:	74 45                	je     c00164b0 <sysCallTTYName(regs*)+0x6d>
c001646b:	83 ec 0c             	sub    esp,0xc
c001646e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016470:	53                   	push   ebx
c0016471:	ff 10                	call   DWORD PTR [eax]
c0016473:	83 c4 10             	add    esp,0x10
c0016476:	84 c0                	test   al,al
c0016478:	74 41                	je     c00164bb <sysCallTTYName(regs*)+0x78>
c001647a:	83 ec 08             	sub    esp,0x8
c001647d:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0016483:	53                   	push   ebx
c0016484:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0016487:	e8 1b a2 fe ff       	call   c00006a7 <strcpy>
c001648c:	83 c4 10             	add    esp,0x10
c001648f:	31 c0                	xor    eax,eax
c0016491:	59                   	pop    ecx
c0016492:	31 d2                	xor    edx,edx
c0016494:	5b                   	pop    ebx
c0016495:	5e                   	pop    esi
c0016496:	c3                   	ret    
c0016497:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001649c:	74 bb                	je     c0016459 <sysCallTTYName(regs*)+0x16>
c001649e:	83 ec 0c             	sub    esp,0xc
c00164a1:	50                   	push   eax
c00164a2:	e8 22 7b ff ff       	call   c000dfc9 <getFromFileDescriptor(int)>
c00164a7:	83 c4 10             	add    esp,0x10
c00164aa:	89 c3                	mov    ebx,eax
c00164ac:	85 db                	test   ebx,ebx
c00164ae:	75 bb                	jne    c001646b <sysCallTTYName(regs*)+0x28>
c00164b0:	59                   	pop    ecx
c00164b1:	b8 01 00 00 00       	mov    eax,0x1
c00164b6:	31 d2                	xor    edx,edx
c00164b8:	5b                   	pop    ebx
c00164b9:	5e                   	pop    esi
c00164ba:	c3                   	ret    
c00164bb:	59                   	pop    ecx
c00164bc:	b8 02 00 00 00       	mov    eax,0x2
c00164c1:	31 d2                	xor    edx,edx
c00164c3:	5b                   	pop    ebx
c00164c4:	5e                   	pop    esi
c00164c5:	c3                   	ret    

c00164c6 <sysCallGetEnv(regs*)>:
c00164c6:	83 ec 0c             	sub    esp,0xc
c00164c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164cd:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00164d0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00164d3:	85 c9                	test   ecx,ecx
c00164d5:	75 22                	jne    c00164f9 <sysCallGetEnv(regs*)+0x33>
c00164d7:	85 d2                	test   edx,edx
c00164d9:	74 08                	je     c00164e3 <sysCallGetEnv(regs*)+0x1d>
c00164db:	31 c0                	xor    eax,eax
c00164dd:	31 d2                	xor    edx,edx
c00164df:	83 c4 0c             	add    esp,0xc
c00164e2:	c3                   	ret    
c00164e3:	83 ec 0c             	sub    esp,0xc
c00164e6:	68 24 21 02 c0       	push   0xc0022124
c00164eb:	e8 35 a1 fe ff       	call   c0000625 <strlen>
c00164f0:	83 c4 10             	add    esp,0x10
c00164f3:	31 d2                	xor    edx,edx
c00164f5:	83 c4 0c             	add    esp,0xc
c00164f8:	c3                   	ret    
c00164f9:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00164fc:	85 d2                	test   edx,edx
c00164fe:	74 05                	je     c0016505 <sysCallGetEnv(regs*)+0x3f>
c0016500:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0016503:	eb d6                	jmp    c00164db <sysCallGetEnv(regs*)+0x15>
c0016505:	83 ec 08             	sub    esp,0x8
c0016508:	68 24 21 02 c0       	push   0xc0022124
c001650d:	50                   	push   eax
c001650e:	e8 94 a1 fe ff       	call   c00006a7 <strcpy>
c0016513:	83 c4 10             	add    esp,0x10
c0016516:	eb c3                	jmp    c00164db <sysCallGetEnv(regs*)+0x15>

c0016518 <sysCallUSleep(regs*)>:
c0016518:	83 ec 14             	sub    esp,0x14
c001651b:	b8 e8 03 00 00       	mov    eax,0x3e8
c0016520:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016524:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001652b:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001652e:	01 ca                	add    edx,ecx
c0016530:	52                   	push   edx
c0016531:	50                   	push   eax
c0016532:	e8 9d 21 00 00       	call   c00186d4 <nanoSleep(unsigned long long)>
c0016537:	31 c0                	xor    eax,eax
c0016539:	31 d2                	xor    edx,edx
c001653b:	83 c4 1c             	add    esp,0x1c
c001653e:	c3                   	ret    

c001653f <sysCallSpawn(regs*)>:
c001653f:	56                   	push   esi
c0016540:	53                   	push   ebx
c0016541:	53                   	push   ebx
c0016542:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016546:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0016549:	85 f6                	test   esi,esi
c001654b:	75 08                	jne    c0016555 <sysCallSpawn(regs*)+0x16>
c001654d:	59                   	pop    ecx
c001654e:	31 c0                	xor    eax,eax
c0016550:	31 d2                	xor    edx,edx
c0016552:	5b                   	pop    ebx
c0016553:	5e                   	pop    esi
c0016554:	c3                   	ret    
c0016555:	83 ec 0c             	sub    esp,0xc
c0016558:	68 3b 07 00 00       	push   0x73b
c001655d:	e8 ce 8a ff ff       	call   c000f030 <operator new(unsigned long)>
c0016562:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016565:	89 c6                	mov    esi,eax
c0016567:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001656c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001656f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016572:	56                   	push   esi
c0016573:	e8 bc 18 00 00       	call   c0017e34 <Process::Process(char const*, Process*, char**)>
c0016578:	83 c4 20             	add    esp,0x20
c001657b:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0016582:	75 c9                	jne    c001654d <sysCallSpawn(regs*)+0xe>
c0016584:	83 ec 0c             	sub    esp,0xc
c0016587:	56                   	push   esi
c0016588:	e8 0d 1e 00 00       	call   c001839a <Process::createUserThread()>
c001658d:	8b 06                	mov    eax,DWORD PTR [esi]
c001658f:	83 c4 10             	add    esp,0x10
c0016592:	99                   	cdq    
c0016593:	59                   	pop    ecx
c0016594:	5b                   	pop    ebx
c0016595:	5e                   	pop    esi
c0016596:	c3                   	ret    

c0016597 <sysAppSettings(regs*)>:
c0016597:	53                   	push   ebx
c0016598:	83 ec 08             	sub    esp,0x8
c001659b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001659f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00165a2:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c00165a8:	25 e0 1f 00 00       	and    eax,0x1fe0
c00165ad:	66 3d c0 09          	cmp    ax,0x9c0
c00165b1:	75 2f                	jne    c00165e2 <sysAppSettings(regs*)+0x4b>
c00165b3:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c00165b9:	83 e0 1f             	and    eax,0x1f
c00165bc:	3c 01                	cmp    al,0x1
c00165be:	74 2e                	je     c00165ee <sysAppSettings(regs*)+0x57>
c00165c0:	3c 07                	cmp    al,0x7
c00165c2:	0f 84 bd 00 00 00    	je     c0016685 <sysAppSettings(regs*)+0xee>
c00165c8:	84 c0                	test   al,al
c00165ca:	0f 84 dc 00 00 00    	je     c00166ac <sysAppSettings(regs*)+0x115>
c00165d0:	3c 08                	cmp    al,0x8
c00165d2:	74 6d                	je     c0016641 <sysAppSettings(regs*)+0xaa>
c00165d4:	0f b6 c0             	movzx  eax,al
c00165d7:	83 c4 08             	add    esp,0x8
c00165da:	05 e8 03 00 00       	add    eax,0x3e8
c00165df:	5b                   	pop    ebx
c00165e0:	99                   	cdq    
c00165e1:	c3                   	ret    
c00165e2:	b8 01 00 00 00       	mov    eax,0x1
c00165e7:	31 d2                	xor    edx,edx
c00165e9:	83 c4 08             	add    esp,0x8
c00165ec:	5b                   	pop    ebx
c00165ed:	c3                   	ret    
c00165ee:	51                   	push   ecx
c00165ef:	68 00 01 00 00       	push   0x100
c00165f4:	6a 00                	push   0x0
c00165f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165fb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00165fe:	83 c0 0c             	add    eax,0xc
c0016601:	50                   	push   eax
c0016602:	e8 01 a0 fe ff       	call   c0000608 <memset>
c0016607:	83 c4 0c             	add    esp,0xc
c001660a:	68 ff 00 00 00       	push   0xff
c001660f:	53                   	push   ebx
c0016610:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016615:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016618:	83 c0 0c             	add    eax,0xc
c001661b:	50                   	push   eax
c001661c:	e8 b1 9f fe ff       	call   c00005d2 <memcpy>
c0016621:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016626:	5b                   	pop    ebx
c0016627:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001662a:	5a                   	pop    edx
c001662b:	8d 50 0c             	lea    edx,[eax+0xc]
c001662e:	52                   	push   edx
c001662f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0016635:	e8 d8 6a ff ff       	call   c000d112 <VgaText::setTitle(char*)>
c001663a:	83 c4 10             	add    esp,0x10
c001663d:	31 c0                	xor    eax,eax
c001663f:	eb a6                	jmp    c00165e7 <sysAppSettings(regs*)+0x50>
c0016641:	83 ec 08             	sub    esp,0x8
c0016644:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001664a:	83 e0 0f             	and    eax,0xf
c001664d:	50                   	push   eax
c001664e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016653:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016656:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001665c:	e8 a1 6a ff ff       	call   c000d102 <VgaText::setTitleColour(VgaColour)>
c0016661:	58                   	pop    eax
c0016662:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016668:	5a                   	pop    edx
c0016669:	c1 e8 04             	shr    eax,0x4
c001666c:	83 e0 0f             	and    eax,0xf
c001666f:	50                   	push   eax
c0016670:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016675:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016678:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001667e:	e8 6f 6a ff ff       	call   c000d0f2 <VgaText::setTitleTextColour(VgaColour)>
c0016683:	eb b5                	jmp    c001663a <sysAppSettings(regs*)+0xa3>
c0016685:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001668a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001668d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0016693:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0016699:	c0 e8 06             	shr    al,0x6
c001669c:	83 e0 01             	and    eax,0x1
c001669f:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c00166a5:	31 c0                	xor    eax,eax
c00166a7:	e9 3b ff ff ff       	jmp    c00165e7 <sysAppSettings(regs*)+0x50>
c00166ac:	b8 02 00 00 00       	mov    eax,0x2
c00166b1:	e9 31 ff ff ff       	jmp    c00165e7 <sysAppSettings(regs*)+0x50>

c00166b6 <sysSetFatAttrib(regs*)>:
c00166b6:	57                   	push   edi
c00166b7:	56                   	push   esi
c00166b8:	53                   	push   ebx
c00166b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166bd:	83 ec 0c             	sub    esp,0xc
c00166c0:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00166c3:	68 14 01 00 00       	push   0x114
c00166c8:	e8 63 89 ff ff       	call   c000f030 <operator new(unsigned long)>
c00166cd:	83 c4 0c             	add    esp,0xc
c00166d0:	89 c3                	mov    ebx,eax
c00166d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166d7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00166da:	57                   	push   edi
c00166db:	53                   	push   ebx
c00166dc:	e8 6d 8f ff ff       	call   c000f64e <File::File(char const*, Process*)>
c00166e1:	83 c4 0c             	add    esp,0xc
c00166e4:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00166e7:	0f b6 d4             	movzx  edx,ah
c00166ea:	0f b6 c0             	movzx  eax,al
c00166ed:	52                   	push   edx
c00166ee:	50                   	push   eax
c00166ef:	53                   	push   ebx
c00166f0:	e8 cf 91 ff ff       	call   c000f8c4 <File::chfatattr(unsigned char, unsigned char)>
c00166f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00166f8:	89 c6                	mov    esi,eax
c00166fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00166fc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00166ff:	83 c4 10             	add    esp,0x10
c0016702:	31 c0                	xor    eax,eax
c0016704:	5b                   	pop    ebx
c0016705:	85 f6                	test   esi,esi
c0016707:	5e                   	pop    esi
c0016708:	0f 95 c0             	setne  al
c001670b:	5f                   	pop    edi
c001670c:	31 d2                	xor    edx,edx
c001670e:	f7 d8                	neg    eax
c0016710:	83 d2 00             	adc    edx,0x0
c0016713:	f7 da                	neg    edx
c0016715:	c3                   	ret    

c0016716 <sysPanic(regs*)>:
c0016716:	83 ec 18             	sub    esp,0x18
c0016719:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001671d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016720:	e8 f9 ea ff ff       	call   c001521e <Krnl::panic(char const*)>
c0016725:	c7 04 24 db 21 02 c0 	mov    DWORD PTR [esp],0xc00221db
c001672c:	e8 ed ea ff ff       	call   c001521e <Krnl::panic(char const*)>
c0016731:	b8 01 00 00 00       	mov    eax,0x1
c0016736:	31 d2                	xor    edx,edx
c0016738:	83 c4 1c             	add    esp,0x1c
c001673b:	c3                   	ret    

c001673c <sysPipe(regs*)>:
c001673c:	57                   	push   edi
c001673d:	56                   	push   esi
c001673e:	53                   	push   ebx
c001673f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016743:	83 ec 0c             	sub    esp,0xc
c0016746:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016749:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001674c:	6a 20                	push   0x20
c001674e:	e8 dd 88 ff ff       	call   c000f030 <operator new(unsigned long)>
c0016753:	89 c3                	mov    ebx,eax
c0016755:	58                   	pop    eax
c0016756:	5a                   	pop    edx
c0016757:	68 00 50 00 00       	push   0x5000
c001675c:	53                   	push   ebx
c001675d:	e8 ee 62 ff ff       	call   c000ca50 <Pipe::Pipe(int)>
c0016762:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016765:	e8 aa 75 ff ff       	call   c000dd14 <UnixFile::getFileDescriptor()>
c001676a:	89 07                	mov    DWORD PTR [edi],eax
c001676c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001676f:	e8 a0 75 ff ff       	call   c000dd14 <UnixFile::getFileDescriptor()>
c0016774:	83 c4 10             	add    esp,0x10
c0016777:	89 06                	mov    DWORD PTR [esi],eax
c0016779:	31 d2                	xor    edx,edx
c001677b:	5b                   	pop    ebx
c001677c:	31 c0                	xor    eax,eax
c001677e:	5e                   	pop    esi
c001677f:	5f                   	pop    edi
c0016780:	c3                   	ret    

c0016781 <sysGetUnixTime(regs*)>:
c0016781:	a1 88 3d 02 c0       	mov    eax,ds:0xc0023d88
c0016786:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001678c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016790:	e9 81 98 ff ff       	jmp    c0010016 <Clock::timeInSecondsLocal()>

c0016795 <string_ends_with(char const*, char const*)>:
c0016795:	57                   	push   edi
c0016796:	56                   	push   esi
c0016797:	53                   	push   ebx
c0016798:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001679c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00167a0:	83 ec 0c             	sub    esp,0xc
c00167a3:	53                   	push   ebx
c00167a4:	e8 7c 9e fe ff       	call   c0000625 <strlen>
c00167a9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00167ac:	89 c6                	mov    esi,eax
c00167ae:	e8 72 9e fe ff       	call   c0000625 <strlen>
c00167b3:	83 c4 10             	add    esp,0x10
c00167b6:	39 c6                	cmp    esi,eax
c00167b8:	7d 06                	jge    c00167c0 <string_ends_with(char const*, char const*)+0x2b>
c00167ba:	5b                   	pop    ebx
c00167bb:	31 c0                	xor    eax,eax
c00167bd:	5e                   	pop    esi
c00167be:	5f                   	pop    edi
c00167bf:	c3                   	ret    
c00167c0:	83 ec 08             	sub    esp,0x8
c00167c3:	29 c6                	sub    esi,eax
c00167c5:	57                   	push   edi
c00167c6:	01 f3                	add    ebx,esi
c00167c8:	53                   	push   ebx
c00167c9:	e8 2a 9f fe ff       	call   c00006f8 <strcmp>
c00167ce:	83 c4 10             	add    esp,0x10
c00167d1:	85 c0                	test   eax,eax
c00167d3:	5b                   	pop    ebx
c00167d4:	0f 94 c0             	sete   al
c00167d7:	5e                   	pop    esi
c00167d8:	0f b6 c0             	movzx  eax,al
c00167db:	5f                   	pop    edi
c00167dc:	c3                   	ret    

c00167dd <sysCallOpen(regs*)>:
c00167dd:	56                   	push   esi
c00167de:	53                   	push   ebx
c00167df:	81 ec 04 01 00 00    	sub    esp,0x104
c00167e5:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00167ec:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00167ef:	85 c9                	test   ecx,ecx
c00167f1:	0f 84 b3 00 00 00    	je     c00168aa <sysCallOpen(regs*)+0xcd>
c00167f7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00167fa:	85 c0                	test   eax,eax
c00167fc:	0f 84 a8 00 00 00    	je     c00168aa <sysCallOpen(regs*)+0xcd>
c0016802:	52                   	push   edx
c0016803:	68 ea 21 02 c0       	push   0xc00221ea
c0016808:	50                   	push   eax
c0016809:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001680d:	56                   	push   esi
c001680e:	e8 91 8c ff ff       	call   c000f4a4 <standardiseFiles(char*, char const*, char const*)>
c0016813:	89 34 24             	mov    DWORD PTR [esp],esi
c0016816:	e8 0a 9e fe ff       	call   c0000625 <strlen>
c001681b:	83 c4 10             	add    esp,0x10
c001681e:	48                   	dec    eax
c001681f:	74 1d                	je     c001683e <sysCallOpen(regs*)+0x61>
c0016821:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016824:	eb 0f                	jmp    c0016835 <sysCallOpen(regs*)+0x58>
c0016826:	80 fa 3a             	cmp    dl,0x3a
c0016829:	74 0f                	je     c001683a <sysCallOpen(regs*)+0x5d>
c001682b:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001682f:	48                   	dec    eax
c0016830:	74 0c                	je     c001683e <sysCallOpen(regs*)+0x61>
c0016832:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0016835:	80 fa 2e             	cmp    dl,0x2e
c0016838:	75 ec                	jne    c0016826 <sysCallOpen(regs*)+0x49>
c001683a:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001683e:	83 ec 08             	sub    esp,0x8
c0016841:	68 ee 21 02 c0       	push   0xc00221ee
c0016846:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016849:	e8 47 ff ff ff       	call   c0016795 <string_ends_with(char const*, char const*)>
c001684e:	83 c4 10             	add    esp,0x10
c0016851:	85 c0                	test   eax,eax
c0016853:	75 17                	jne    c001686c <sysCallOpen(regs*)+0x8f>
c0016855:	83 ec 08             	sub    esp,0x8
c0016858:	68 0f 22 02 c0       	push   0xc002220f
c001685d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016860:	e8 30 ff ff ff       	call   c0016795 <string_ends_with(char const*, char const*)>
c0016865:	83 c4 10             	add    esp,0x10
c0016868:	85 c0                	test   eax,eax
c001686a:	74 51                	je     c00168bd <sysCallOpen(regs*)+0xe0>
c001686c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001686f:	83 ec 08             	sub    esp,0x8
c0016872:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0016878:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001687f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016882:	ff 30                	push   DWORD PTR [eax]
c0016884:	68 f3 21 02 c0       	push   0xc00221f3
c0016889:	e8 91 88 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001688e:	c7 04 24 02 22 02 c0 	mov    DWORD PTR [esp],0xc0022202
c0016895:	e8 85 88 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001689a:	83 c4 10             	add    esp,0x10
c001689d:	81 c4 04 01 00 00    	add    esp,0x104
c00168a3:	31 c0                	xor    eax,eax
c00168a5:	31 d2                	xor    edx,edx
c00168a7:	5b                   	pop    ebx
c00168a8:	5e                   	pop    esi
c00168a9:	c3                   	ret    
c00168aa:	81 c4 04 01 00 00    	add    esp,0x104
c00168b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00168b5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00168ba:	5b                   	pop    ebx
c00168bb:	5e                   	pop    esi
c00168bc:	c3                   	ret    
c00168bd:	83 ec 08             	sub    esp,0x8
c00168c0:	68 ef 21 02 c0       	push   0xc00221ef
c00168c5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00168c8:	e8 2b 9e fe ff       	call   c00006f8 <strcmp>
c00168cd:	83 c4 10             	add    esp,0x10
c00168d0:	85 c0                	test   eax,eax
c00168d2:	74 98                	je     c001686c <sysCallOpen(regs*)+0x8f>
c00168d4:	83 ec 08             	sub    esp,0x8
c00168d7:	68 ee 21 02 c0       	push   0xc00221ee
c00168dc:	56                   	push   esi
c00168dd:	e8 b3 fe ff ff       	call   c0016795 <string_ends_with(char const*, char const*)>
c00168e2:	83 c4 10             	add    esp,0x10
c00168e5:	85 c0                	test   eax,eax
c00168e7:	75 83                	jne    c001686c <sysCallOpen(regs*)+0x8f>
c00168e9:	83 ec 08             	sub    esp,0x8
c00168ec:	68 14 22 02 c0       	push   0xc0022214
c00168f1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00168f4:	e8 9c fe ff ff       	call   c0016795 <string_ends_with(char const*, char const*)>
c00168f9:	83 c4 10             	add    esp,0x10
c00168fc:	85 c0                	test   eax,eax
c00168fe:	0f 85 d1 00 00 00    	jne    c00169d5 <sysCallOpen(regs*)+0x1f8>
c0016904:	83 ec 08             	sub    esp,0x8
c0016907:	68 19 22 02 c0       	push   0xc0022219
c001690c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001690f:	e8 81 fe ff ff       	call   c0016795 <string_ends_with(char const*, char const*)>
c0016914:	83 c4 10             	add    esp,0x10
c0016917:	85 c0                	test   eax,eax
c0016919:	0f 85 b6 00 00 00    	jne    c00169d5 <sysCallOpen(regs*)+0x1f8>
c001691f:	83 ec 08             	sub    esp,0x8
c0016922:	68 15 22 02 c0       	push   0xc0022215
c0016927:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001692a:	e8 c9 9d fe ff       	call   c00006f8 <strcmp>
c001692f:	83 c4 10             	add    esp,0x10
c0016932:	85 c0                	test   eax,eax
c0016934:	0f 84 9b 00 00 00    	je     c00169d5 <sysCallOpen(regs*)+0x1f8>
c001693a:	83 ec 08             	sub    esp,0x8
c001693d:	68 14 22 02 c0       	push   0xc0022214
c0016942:	56                   	push   esi
c0016943:	e8 4d fe ff ff       	call   c0016795 <string_ends_with(char const*, char const*)>
c0016948:	83 c4 10             	add    esp,0x10
c001694b:	85 c0                	test   eax,eax
c001694d:	0f 85 82 00 00 00    	jne    c00169d5 <sysCallOpen(regs*)+0x1f8>
c0016953:	83 ec 0c             	sub    esp,0xc
c0016956:	68 14 01 00 00       	push   0x114
c001695b:	e8 d0 86 ff ff       	call   c000f030 <operator new(unsigned long)>
c0016960:	83 c4 0c             	add    esp,0xc
c0016963:	89 c6                	mov    esi,eax
c0016965:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001696a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001696d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016970:	56                   	push   esi
c0016971:	e8 d8 8c ff ff       	call   c000f64e <File::File(char const*, Process*)>
c0016976:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016979:	83 c4 10             	add    esp,0x10
c001697c:	0f b6 c2             	movzx  eax,dl
c001697f:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0016982:	89 d0                	mov    eax,edx
c0016984:	83 e0 01             	and    eax,0x1
c0016987:	f6 c2 02             	test   dl,0x2
c001698a:	74 03                	je     c001698f <sysCallOpen(regs*)+0x1b2>
c001698c:	83 c8 02             	or     eax,0x2
c001698f:	f6 c2 04             	test   dl,0x4
c0016992:	74 03                	je     c0016997 <sysCallOpen(regs*)+0x1ba>
c0016994:	83 c8 04             	or     eax,0x4
c0016997:	f6 c2 08             	test   dl,0x8
c001699a:	74 03                	je     c001699f <sysCallOpen(regs*)+0x1c2>
c001699c:	83 c8 0a             	or     eax,0xa
c001699f:	83 e2 10             	and    edx,0x10
c00169a2:	74 03                	je     c00169a7 <sysCallOpen(regs*)+0x1ca>
c00169a4:	83 c8 12             	or     eax,0x12
c00169a7:	83 ec 08             	sub    esp,0x8
c00169aa:	50                   	push   eax
c00169ab:	56                   	push   esi
c00169ac:	e8 01 8d ff ff       	call   c000f6b2 <File::open(FileOpenMode)>
c00169b1:	83 c4 10             	add    esp,0x10
c00169b4:	85 c0                	test   eax,eax
c00169b6:	0f 85 ee fe ff ff    	jne    c00168aa <sysCallOpen(regs*)+0xcd>
c00169bc:	83 ec 0c             	sub    esp,0xc
c00169bf:	56                   	push   esi
c00169c0:	e8 4f 73 ff ff       	call   c000dd14 <UnixFile::getFileDescriptor()>
c00169c5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00169c8:	89 02                	mov    DWORD PTR [edx],eax
c00169ca:	c1 f8 1f             	sar    eax,0x1f
c00169cd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00169d0:	e9 c5 fe ff ff       	jmp    c001689a <sysCallOpen(regs*)+0xbd>
c00169d5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00169d8:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00169de:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00169e5:	e9 b3 fe ff ff       	jmp    c001689d <sysCallOpen(regs*)+0xc0>

c00169ea <setupSystemCalls()>:
c00169ea:	c7 05 e0 47 02 c0 46 5c 01 c0 	mov    DWORD PTR ds:0xc00247e0,0xc0015c46
c00169f4:	c7 05 e4 47 02 c0 59 5a 01 c0 	mov    DWORD PTR ds:0xc00247e4,0xc0015a59
c00169fe:	c7 05 e8 47 02 c0 6e 5b 01 c0 	mov    DWORD PTR ds:0xc00247e8,0xc0015b6e
c0016a08:	c7 05 ec 47 02 c0 c3 5b 01 c0 	mov    DWORD PTR ds:0xc00247ec,0xc0015bc3
c0016a12:	c7 05 f0 47 02 c0 06 5b 01 c0 	mov    DWORD PTR ds:0xc00247f0,0xc0015b06
c0016a1c:	c7 05 f4 47 02 c0 60 5c 01 c0 	mov    DWORD PTR ds:0xc00247f4,0xc0015c60
c0016a26:	c7 05 f8 47 02 c0 05 5e 01 c0 	mov    DWORD PTR ds:0xc00247f8,0xc0015e05
c0016a30:	c7 05 fc 47 02 c0 24 5e 01 c0 	mov    DWORD PTR ds:0xc00247fc,0xc0015e24
c0016a3a:	c7 05 04 48 02 c0 85 61 01 c0 	mov    DWORD PTR ds:0xc0024804,0xc0016185
c0016a44:	c7 05 00 48 02 c0 dd 67 01 c0 	mov    DWORD PTR ds:0xc0024800,0xc00167dd
c0016a4e:	c7 05 08 48 02 c0 0d 62 01 c0 	mov    DWORD PTR ds:0xc0024808,0xc001620d
c0016a58:	c7 05 0c 48 02 c0 83 5e 01 c0 	mov    DWORD PTR ds:0xc002480c,0xc0015e83
c0016a62:	c7 05 10 48 02 c0 6c 5c 01 c0 	mov    DWORD PTR ds:0xc0024810,0xc0015c6c
c0016a6c:	c7 05 14 48 02 c0 71 5c 01 c0 	mov    DWORD PTR ds:0xc0024814,0xc0015c71
c0016a76:	c7 05 18 48 02 c0 7a 62 01 c0 	mov    DWORD PTR ds:0xc0024818,0xc001627a
c0016a80:	c7 05 1c 48 02 c0 d3 62 01 c0 	mov    DWORD PTR ds:0xc002481c,0xc00162d3
c0016a8a:	c7 05 20 48 02 c0 6b 5f 01 c0 	mov    DWORD PTR ds:0xc0024820,0xc0015f6b
c0016a94:	c7 05 24 48 02 c0 d4 5f 01 c0 	mov    DWORD PTR ds:0xc0024824,0xc0015fd4
c0016a9e:	c7 05 28 48 02 c0 02 61 01 c0 	mov    DWORD PTR ds:0xc0024828,0xc0016102
c0016aa8:	c7 05 2c 48 02 c0 76 5c 01 c0 	mov    DWORD PTR ds:0xc002482c,0xc0015c76
c0016ab2:	c7 05 30 48 02 c0 39 63 01 c0 	mov    DWORD PTR ds:0xc0024830,0xc0016339
c0016abc:	c7 05 34 48 02 c0 80 5c 01 c0 	mov    DWORD PTR ds:0xc0024834,0xc0015c80
c0016ac6:	c7 05 38 48 02 c0 8b 5c 01 c0 	mov    DWORD PTR ds:0xc0024838,0xc0015c8b
c0016ad0:	c7 05 3c 48 02 c0 53 63 01 c0 	mov    DWORD PTR ds:0xc002483c,0xc0016353
c0016ada:	c7 05 40 48 02 c0 a5 63 01 c0 	mov    DWORD PTR ds:0xc0024840,0xc00163a5
c0016ae4:	c7 05 44 48 02 c0 96 5c 01 c0 	mov    DWORD PTR ds:0xc0024844,0xc0015c96
c0016aee:	c7 05 48 48 02 c0 f7 63 01 c0 	mov    DWORD PTR ds:0xc0024848,0xc00163f7
c0016af8:	c7 05 4c 48 02 c0 40 5e 01 c0 	mov    DWORD PTR ds:0xc002484c,0xc0015e40
c0016b02:	c7 05 50 48 02 c0 43 64 01 c0 	mov    DWORD PTR ds:0xc0024850,0xc0016443
c0016b0c:	c7 05 54 48 02 c0 11 5f 01 c0 	mov    DWORD PTR ds:0xc0024854,0xc0015f11
c0016b16:	c7 05 58 48 02 c0 18 65 01 c0 	mov    DWORD PTR ds:0xc0024858,0xc0016518
c0016b20:	c7 05 5c 48 02 c0 51 60 01 c0 	mov    DWORD PTR ds:0xc002485c,0xc0016051
c0016b2a:	c7 05 60 48 02 c0 3f 65 01 c0 	mov    DWORD PTR ds:0xc0024860,0xc001653f
c0016b34:	c7 05 64 48 02 c0 c6 64 01 c0 	mov    DWORD PTR ds:0xc0024864,0xc00164c6
c0016b3e:	c7 05 68 48 02 c0 97 65 01 c0 	mov    DWORD PTR ds:0xc0024868,0xc0016597
c0016b48:	c7 05 6c 48 02 c0 a6 5c 01 c0 	mov    DWORD PTR ds:0xc002486c,0xc0015ca6
c0016b52:	c7 05 70 48 02 c0 10 5d 01 c0 	mov    DWORD PTR ds:0xc0024870,0xc0015d10
c0016b5c:	c7 05 74 48 02 c0 56 5d 01 c0 	mov    DWORD PTR ds:0xc0024874,0xc0015d56
c0016b66:	c7 05 78 48 02 c0 b6 66 01 c0 	mov    DWORD PTR ds:0xc0024878,0xc00166b6
c0016b70:	c7 05 7c 48 02 c0 16 67 01 c0 	mov    DWORD PTR ds:0xc002487c,0xc0016716
c0016b7a:	c7 05 80 48 02 c0 a7 5d 01 c0 	mov    DWORD PTR ds:0xc0024880,0xc0015da7
c0016b84:	c7 05 84 48 02 c0 3c 67 01 c0 	mov    DWORD PTR ds:0xc0024884,0xc001673c
c0016b8e:	c7 05 88 48 02 c0 81 67 01 c0 	mov    DWORD PTR ds:0xc0024888,0xc0016781
c0016b98:	c7 05 8c 48 02 c0 71 5a 01 c0 	mov    DWORD PTR ds:0xc002488c,0xc0015a71
c0016ba2:	c3                   	ret    

c0016ba3 <systemCall(regs*, void*)>:
c0016ba3:	53                   	push   ebx
c0016ba4:	83 ec 08             	sub    esp,0x8
c0016ba7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016bab:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016bae:	83 f8 7f             	cmp    eax,0x7f
c0016bb1:	77 16                	ja     c0016bc9 <systemCall(regs*, void*)+0x26>
c0016bb3:	8b 14 85 e0 47 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb820]
c0016bba:	85 d2                	test   edx,edx
c0016bbc:	74 0b                	je     c0016bc9 <systemCall(regs*, void*)+0x26>
c0016bbe:	83 ec 0c             	sub    esp,0xc
c0016bc1:	53                   	push   ebx
c0016bc2:	ff d2                	call   edx
c0016bc4:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016bc7:	eb 0d                	jmp    c0016bd6 <systemCall(regs*, void*)+0x33>
c0016bc9:	52                   	push   edx
c0016bca:	52                   	push   edx
c0016bcb:	50                   	push   eax
c0016bcc:	68 1e 22 02 c0       	push   0xc002221e
c0016bd1:	e8 49 85 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0016bd6:	83 c4 10             	add    esp,0x10
c0016bd9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016bde:	31 d2                	xor    edx,edx
c0016be0:	83 c4 08             	add    esp,0x8
c0016be3:	5b                   	pop    ebx
c0016be4:	c3                   	ret    

c0016be5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0016be5:	55                   	push   ebp
c0016be6:	89 e5                	mov    ebp,esp
c0016be8:	57                   	push   edi
c0016be9:	56                   	push   esi
c0016bea:	53                   	push   ebx
c0016beb:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0016bf1:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0016bf4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0016bf7:	85 c0                	test   eax,eax
c0016bf9:	0f 95 c1             	setne  cl
c0016bfc:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016c00:	0f 94 c2             	sete   dl
c0016c03:	84 d1                	test   cl,dl
c0016c05:	74 26                	je     c0016c2d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c0016c07:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c0016c0e:	74 1d                	je     c0016c2d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c0016c10:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0016c13:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c0016c19:	89 d6                	mov    esi,edx
c0016c1b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016c21:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c0016c27:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0016c2a:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c0016c2d:	83 ec 0c             	sub    esp,0xc
c0016c30:	05 ff 0f 00 00       	add    eax,0xfff
c0016c35:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0016c38:	6a 01                	push   0x1
c0016c3a:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c0016c40:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c0016c46:	e8 02 75 ff ff       	call   c000e14d <Virt::allocateKernelVirtualPages(int)>
c0016c4b:	83 c4 10             	add    esp,0x10
c0016c4e:	89 c6                	mov    esi,eax
c0016c50:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c0016c56:	0f 86 21 01 00 00    	jbe    c0016d7d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0016c5c:	c1 eb 0c             	shr    ebx,0xc
c0016c5f:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c0016c69:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c0016c6f:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0016c72:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016c75:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c0016c7b:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c0016c7e:	29 d8                	sub    eax,ebx
c0016c80:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c0016c86:	0f 83 f4 00 00 00    	jae    c0016d80 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c0016c8c:	83 ec 0c             	sub    esp,0xc
c0016c8f:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c0016c95:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0016c98:	3d 00 10 00 00       	cmp    eax,0x1000
c0016c9d:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016c9f:	52                   	push   edx
c0016ca0:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c0016ca6:	52                   	push   edx
c0016ca7:	76 05                	jbe    c0016cae <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c0016ca9:	b8 00 10 00 00       	mov    eax,0x1000
c0016cae:	31 d2                	xor    edx,edx
c0016cb0:	52                   	push   edx
c0016cb1:	50                   	push   eax
c0016cb2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0016cb5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016cb8:	83 c4 20             	add    esp,0x20
c0016cbb:	85 c0                	test   eax,eax
c0016cbd:	74 1f                	je     c0016cde <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c0016cbf:	51                   	push   ecx
c0016cc0:	51                   	push   ecx
c0016cc1:	50                   	push   eax
c0016cc2:	68 32 22 02 c0       	push   0xc0022232
c0016cc7:	e8 53 84 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0016ccc:	89 34 24             	mov    DWORD PTR [esp],esi
c0016ccf:	e8 d3 77 ff ff       	call   c000e4a7 <Virt::freeKernelVirtualPages(unsigned long)>
c0016cd4:	83 c4 10             	add    esp,0x10
c0016cd7:	31 c0                	xor    eax,eax
c0016cd9:	e9 7c 01 00 00       	jmp    c0016e5a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0016cde:	e8 a9 14 00 00       	call   c001818c <lockScheduler()>
c0016ce3:	e8 2c 58 ff ff       	call   c000c514 <Phys::allocatePage()>
c0016ce8:	6a 07                	push   0x7
c0016cea:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c0016cf0:	56                   	push   esi
c0016cf1:	50                   	push   eax
c0016cf2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016cf8:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016cfb:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c0016d01:	e8 1a 7b ff ff       	call   c000e820 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016d06:	83 c4 0c             	add    esp,0xc
c0016d09:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016d0f:	6a 00                	push   0x0
c0016d11:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016d17:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016d1a:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c0016d20:	e8 59 79 ff ff       	call   c000e67e <VAS::mapOtherVASIn(bool, VAS*)>
c0016d25:	58                   	pop    eax
c0016d26:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c0016d2c:	5a                   	pop    edx
c0016d2d:	68 07 04 00 00       	push   0x407
c0016d32:	53                   	push   ebx
c0016d33:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016d39:	50                   	push   eax
c0016d3a:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016d40:	6a 00                	push   0x0
c0016d42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d47:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016d4a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0016d50:	e8 81 7e ff ff       	call   c000ebd6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016d55:	83 c4 1c             	add    esp,0x1c
c0016d58:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c0016d5e:	68 00 10 00 00       	push   0x1000
c0016d63:	50                   	push   eax
c0016d64:	56                   	push   esi
c0016d65:	e8 68 98 fe ff       	call   c00005d2 <memcpy>
c0016d6a:	e8 1f 14 00 00       	call   c001818e <unlockScheduler()>
c0016d6f:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c0016d75:	83 c4 10             	add    esp,0x10
c0016d78:	e9 f5 fe ff ff       	jmp    c0016c72 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c0016d7d:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0016d80:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c0016d8a:	0f 86 bc 00 00 00    	jbe    c0016e4c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c0016d90:	e8 f7 13 00 00       	call   c001818c <lockScheduler()>
c0016d95:	51                   	push   ecx
c0016d96:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016d9c:	6a 00                	push   0x0
c0016d9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016da3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016da6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0016dac:	e8 cd 78 ff ff       	call   c000e67e <VAS::mapOtherVASIn(bool, VAS*)>
c0016db1:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c0016db7:	83 c4 10             	add    esp,0x10
c0016dba:	c1 e8 0c             	shr    eax,0xc
c0016dbd:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c0016dc7:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c0016dcd:	e8 42 57 ff ff       	call   c000c514 <Phys::allocatePage()>
c0016dd2:	6a 07                	push   0x7
c0016dd4:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c0016dda:	56                   	push   esi
c0016ddb:	50                   	push   eax
c0016ddc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016de2:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0016de5:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c0016deb:	e8 30 7a ff ff       	call   c000e820 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016df0:	58                   	pop    eax
c0016df1:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c0016df7:	5a                   	pop    edx
c0016df8:	68 07 04 00 00       	push   0x407
c0016dfd:	53                   	push   ebx
c0016dfe:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016e04:	50                   	push   eax
c0016e05:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016e0b:	6a 00                	push   0x0
c0016e0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e12:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016e15:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0016e1b:	e8 b6 7d ff ff       	call   c000ebd6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016e20:	83 c4 1c             	add    esp,0x1c
c0016e23:	68 00 10 00 00       	push   0x1000
c0016e28:	6a 00                	push   0x0
c0016e2a:	56                   	push   esi
c0016e2b:	e8 d8 97 fe ff       	call   c0000608 <memset>
c0016e30:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c0016e36:	83 c4 10             	add    esp,0x10
c0016e39:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c0016e3f:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c0016e45:	77 86                	ja     c0016dcd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c0016e47:	e8 42 13 00 00       	call   c001818e <unlockScheduler()>
c0016e4c:	83 ec 0c             	sub    esp,0xc
c0016e4f:	56                   	push   esi
c0016e50:	e8 52 76 ff ff       	call   c000e4a7 <Virt::freeKernelVirtualPages(unsigned long)>
c0016e55:	83 c4 10             	add    esp,0x10
c0016e58:	b0 01                	mov    al,0x1
c0016e5a:	8d 65 f4             	lea    esp,[ebp-0xc]
c0016e5d:	5b                   	pop    ebx
c0016e5e:	5e                   	pop    esi
c0016e5f:	5f                   	pop    edi
c0016e60:	5d                   	pop    ebp
c0016e61:	c3                   	ret    

c0016e62 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0016e62:	55                   	push   ebp
c0016e63:	57                   	push   edi
c0016e64:	56                   	push   esi
c0016e65:	53                   	push   ebx
c0016e66:	83 ec 48             	sub    esp,0x48
c0016e69:	68 14 01 00 00       	push   0x114
c0016e6e:	e8 bd 81 ff ff       	call   c000f030 <operator new(unsigned long)>
c0016e73:	83 c4 0c             	add    esp,0xc
c0016e76:	89 c6                	mov    esi,eax
c0016e78:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016e7c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0016e80:	50                   	push   eax
c0016e81:	e8 c8 87 ff ff       	call   c000f64e <File::File(char const*, Process*)>
c0016e86:	58                   	pop    eax
c0016e87:	5a                   	pop    edx
c0016e88:	6a 01                	push   0x1
c0016e8a:	56                   	push   esi
c0016e8b:	e8 22 88 ff ff       	call   c000f6b2 <File::open(FileOpenMode)>
c0016e90:	83 c4 10             	add    esp,0x10
c0016e93:	85 c0                	test   eax,eax
c0016e95:	0f 85 47 01 00 00    	jne    c0016fe2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016e9b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016ea3:	83 ec 0c             	sub    esp,0xc
c0016ea6:	6a 34                	push   0x34
c0016ea8:	e8 bd 50 ff ff       	call   c000bf6a <malloc>
c0016ead:	89 c3                	mov    ebx,eax
c0016eaf:	58                   	pop    eax
c0016eb0:	8b 06                	mov    eax,DWORD PTR [esi]
c0016eb2:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0016eb6:	57                   	push   edi
c0016eb7:	53                   	push   ebx
c0016eb8:	6a 00                	push   0x0
c0016eba:	6a 34                	push   0x34
c0016ebc:	56                   	push   esi
c0016ebd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016ec0:	83 c4 20             	add    esp,0x20
c0016ec3:	85 c0                	test   eax,eax
c0016ec5:	0f 85 17 01 00 00    	jne    c0016fe2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016ecb:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0016ed1:	0f 85 0b 01 00 00    	jne    c0016fe2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016ed7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016eda:	85 c0                	test   eax,eax
c0016edc:	0f 84 00 01 00 00    	je     c0016fe2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016ee2:	31 d2                	xor    edx,edx
c0016ee4:	55                   	push   ebp
c0016ee5:	52                   	push   edx
c0016ee6:	50                   	push   eax
c0016ee7:	56                   	push   esi
c0016ee8:	e8 83 88 ff ff       	call   c000f770 <File::seek(unsigned long long)>
c0016eed:	83 c4 10             	add    esp,0x10
c0016ef0:	85 c0                	test   eax,eax
c0016ef2:	0f 85 ea 00 00 00    	jne    c0016fe2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016ef8:	83 ec 0c             	sub    esp,0xc
c0016efb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016efe:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016f02:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016f06:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016f0a:	0f af c2             	imul   eax,edx
c0016f0d:	50                   	push   eax
c0016f0e:	e8 57 50 ff ff       	call   c000bf6a <malloc>
c0016f13:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016f16:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016f1a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016f1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016f20:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016f24:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016f28:	0f af c2             	imul   eax,edx
c0016f2b:	99                   	cdq    
c0016f2c:	52                   	push   edx
c0016f2d:	50                   	push   eax
c0016f2e:	56                   	push   esi
c0016f2f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016f32:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0016f35:	83 c4 20             	add    esp,0x20
c0016f38:	85 c0                	test   eax,eax
c0016f3a:	0f 84 a2 00 00 00    	je     c0016fe2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016f40:	31 d2                	xor    edx,edx
c0016f42:	51                   	push   ecx
c0016f43:	52                   	push   edx
c0016f44:	50                   	push   eax
c0016f45:	56                   	push   esi
c0016f46:	e8 25 88 ff ff       	call   c000f770 <File::seek(unsigned long long)>
c0016f4b:	83 c4 10             	add    esp,0x10
c0016f4e:	85 c0                	test   eax,eax
c0016f50:	0f 85 8c 00 00 00    	jne    c0016fe2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016f56:	83 ec 0c             	sub    esp,0xc
c0016f59:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016f5d:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016f61:	31 ed                	xor    ebp,ebp
c0016f63:	0f af c2             	imul   eax,edx
c0016f66:	50                   	push   eax
c0016f67:	e8 fe 4f ff ff       	call   c000bf6a <malloc>
c0016f6c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016f6f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016f73:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016f75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f79:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016f7d:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016f81:	0f af c2             	imul   eax,edx
c0016f84:	99                   	cdq    
c0016f85:	52                   	push   edx
c0016f86:	50                   	push   eax
c0016f87:	56                   	push   esi
c0016f88:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016f8b:	83 c4 20             	add    esp,0x20
c0016f8e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016f96:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0016f9a:	0f 86 80 00 00 00    	jbe    c0017020 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0016fa0:	0f b7 fd             	movzx  edi,bp
c0016fa3:	c1 e7 05             	shl    edi,0x5
c0016fa6:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0016faa:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0016fad:	75 6b                	jne    c001701a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016faf:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0016fb2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016fb6:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0016fb9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016fbd:	52                   	push   edx
c0016fbe:	31 d2                	xor    edx,edx
c0016fc0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0016fc3:	52                   	push   edx
c0016fc4:	50                   	push   eax
c0016fc5:	56                   	push   esi
c0016fc6:	e8 a5 87 ff ff       	call   c000f770 <File::seek(unsigned long long)>
c0016fcb:	83 c4 10             	add    esp,0x10
c0016fce:	85 c0                	test   eax,eax
c0016fd0:	74 17                	je     c0016fe9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0016fd2:	83 ec 0c             	sub    esp,0xc
c0016fd5:	68 5d 22 02 c0       	push   0xc002225d
c0016fda:	e8 40 81 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0016fdf:	83 c4 10             	add    esp,0x10
c0016fe2:	31 c0                	xor    eax,eax
c0016fe4:	e9 87 00 00 00       	jmp    c0017070 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0016fe9:	83 ec 0c             	sub    esp,0xc
c0016fec:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0016fef:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0016ff2:	50                   	push   eax
c0016ff3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016ff7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016ffb:	56                   	push   esi
c0016ffc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0017000:	e8 e0 fb ff ff       	call   c0016be5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0017005:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017009:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001700d:	83 c4 20             	add    esp,0x20
c0017010:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0017014:	73 04                	jae    c001701a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017016:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001701a:	45                   	inc    ebp
c001701b:	e9 76 ff ff ff       	jmp    c0016f96 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0017020:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0017024:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017028:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001702c:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c0017032:	83 ec 0c             	sub    esp,0xc
c0017035:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001703b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017040:	05 00 10 00 00       	add    eax,0x1000
c0017045:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001704c:	e8 29 4f ff ff       	call   c000bf7a <free>
c0017051:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017054:	e8 21 4f ff ff       	call   c000bf7a <free>
c0017059:	58                   	pop    eax
c001705a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001705e:	e8 17 4f ff ff       	call   c000bf7a <free>
c0017063:	89 34 24             	mov    DWORD PTR [esp],esi
c0017066:	e8 a5 86 ff ff       	call   c000f710 <File::close()>
c001706b:	83 c4 10             	add    esp,0x10
c001706e:	b0 01                	mov    al,0x1
c0017070:	83 c4 3c             	add    esp,0x3c
c0017073:	5b                   	pop    ebx
c0017074:	5e                   	pop    esi
c0017075:	5f                   	pop    edi
c0017076:	5d                   	pop    ebp
c0017077:	c3                   	ret    

c0017078 <Thr::runtimeReferenceHelper()>:
c0017078:	83 ec 18             	sub    esp,0x18
c001707b:	68 65 22 02 c0       	push   0xc0022265
c0017080:	e8 9a 80 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0017085:	fa                   	cli    
c0017086:	83 c4 10             	add    esp,0x10
c0017089:	eb fe                	jmp    c0017089 <Thr::runtimeReferenceHelper()+0x11>

c001708b <Thr::getAddressOfKernelSymbol(char const*)>:
c001708b:	57                   	push   edi
c001708c:	56                   	push   esi
c001708d:	53                   	push   ebx
c001708e:	31 db                	xor    ebx,ebx
c0017090:	39 1d 80 51 02 c0    	cmp    DWORD PTR ds:0xc0025180,ebx
c0017096:	7e 3c                	jle    c00170d4 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0017098:	8b 34 9d 00 51 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdaf00]
c001709f:	31 ff                	xor    edi,edi
c00170a1:	39 3c 9d 00 50 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdb000],edi
c00170a8:	7e 27                	jle    c00170d1 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00170aa:	50                   	push   eax
c00170ab:	50                   	push   eax
c00170ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00170b0:	8b 06                	mov    eax,DWORD PTR [esi]
c00170b2:	03 04 9d 80 50 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdaf80]
c00170b9:	50                   	push   eax
c00170ba:	e8 39 96 fe ff       	call   c00006f8 <strcmp>
c00170bf:	83 c4 10             	add    esp,0x10
c00170c2:	85 c0                	test   eax,eax
c00170c4:	75 05                	jne    c00170cb <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00170c6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00170c9:	eb 0b                	jmp    c00170d6 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00170cb:	83 c6 10             	add    esi,0x10
c00170ce:	47                   	inc    edi
c00170cf:	eb d0                	jmp    c00170a1 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00170d1:	43                   	inc    ebx
c00170d2:	eb bc                	jmp    c0017090 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00170d4:	31 c0                	xor    eax,eax
c00170d6:	5b                   	pop    ebx
c00170d7:	5e                   	pop    esi
c00170d8:	5f                   	pop    edi
c00170d9:	c3                   	ret    

c00170da <Thr::loadKernelSymbolTable(char const*)>:
c00170da:	55                   	push   ebp
c00170db:	57                   	push   edi
c00170dc:	56                   	push   esi
c00170dd:	53                   	push   ebx
c00170de:	83 ec 68             	sub    esp,0x68
c00170e1:	8b 35 d4 51 02 c0    	mov    esi,DWORD PTR ds:0xc00251d4
c00170e7:	68 14 01 00 00       	push   0x114
c00170ec:	e8 3f 7f ff ff       	call   c000f030 <operator new(unsigned long)>
c00170f1:	83 c4 0c             	add    esp,0xc
c00170f4:	89 c3                	mov    ebx,eax
c00170f6:	56                   	push   esi
c00170f7:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00170fb:	50                   	push   eax
c00170fc:	e8 4d 85 ff ff       	call   c000f64e <File::File(char const*, Process*)>
c0017101:	5e                   	pop    esi
c0017102:	5f                   	pop    edi
c0017103:	6a 01                	push   0x1
c0017105:	53                   	push   ebx
c0017106:	e8 a7 85 ff ff       	call   c000f6b2 <File::open(FileOpenMode)>
c001710b:	83 c4 10             	add    esp,0x10
c001710e:	31 d2                	xor    edx,edx
c0017110:	85 c0                	test   eax,eax
c0017112:	0f 85 79 02 00 00    	jne    c0017391 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c0017118:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017120:	83 ec 0c             	sub    esp,0xc
c0017123:	6a 34                	push   0x34
c0017125:	e8 40 4e ff ff       	call   c000bf6a <malloc>
c001712a:	59                   	pop    ecx
c001712b:	89 c7                	mov    edi,eax
c001712d:	8d 74 24 34          	lea    esi,[esp+0x34]
c0017131:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017133:	56                   	push   esi
c0017134:	57                   	push   edi
c0017135:	6a 00                	push   0x0
c0017137:	6a 34                	push   0x34
c0017139:	53                   	push   ebx
c001713a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001713d:	83 c4 20             	add    esp,0x20
c0017140:	85 c0                	test   eax,eax
c0017142:	74 17                	je     c001715b <Thr::loadKernelSymbolTable(char const*)+0x81>
c0017144:	83 ec 0c             	sub    esp,0xc
c0017147:	68 87 22 02 c0       	push   0xc0022287
c001714c:	e8 cd e0 ff ff       	call   c001521e <Krnl::panic(char const*)>
c0017151:	83 c4 10             	add    esp,0x10
c0017154:	31 d2                	xor    edx,edx
c0017156:	e9 36 02 00 00       	jmp    c0017391 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001715b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017161:	75 e1                	jne    c0017144 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017163:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017166:	85 c0                	test   eax,eax
c0017168:	74 da                	je     c0017144 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001716a:	52                   	push   edx
c001716b:	31 d2                	xor    edx,edx
c001716d:	52                   	push   edx
c001716e:	50                   	push   eax
c001716f:	53                   	push   ebx
c0017170:	e8 fb 85 ff ff       	call   c000f770 <File::seek(unsigned long long)>
c0017175:	83 c4 10             	add    esp,0x10
c0017178:	85 c0                	test   eax,eax
c001717a:	75 c8                	jne    c0017144 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001717c:	83 ec 0c             	sub    esp,0xc
c001717f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017183:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017187:	31 ed                	xor    ebp,ebp
c0017189:	0f af c2             	imul   eax,edx
c001718c:	50                   	push   eax
c001718d:	e8 d8 4d ff ff       	call   c000bf6a <malloc>
c0017192:	89 34 24             	mov    DWORD PTR [esp],esi
c0017195:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017199:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001719b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001719f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00171a3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00171a7:	0f af c2             	imul   eax,edx
c00171aa:	99                   	cdq    
c00171ab:	52                   	push   edx
c00171ac:	50                   	push   eax
c00171ad:	53                   	push   ebx
c00171ae:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00171b1:	83 c4 20             	add    esp,0x20
c00171b4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00171bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00171c4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00171cc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00171d4:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00171d8:	0f 86 aa 00 00 00    	jbe    c0017288 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c00171de:	0f b7 f5             	movzx  esi,bp
c00171e1:	6b f6 28             	imul   esi,esi,0x28
c00171e4:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c00171e8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00171eb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00171ef:	50                   	push   eax
c00171f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00171f4:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00171f8:	8b 16                	mov    edx,DWORD PTR [esi]
c00171fa:	6b c0 28             	imul   eax,eax,0x28
c00171fd:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0017201:	89 d0                	mov    eax,edx
c0017203:	31 d2                	xor    edx,edx
c0017205:	52                   	push   edx
c0017206:	50                   	push   eax
c0017207:	53                   	push   ebx
c0017208:	e8 63 85 ff ff       	call   c000f770 <File::seek(unsigned long long)>
c001720d:	83 c4 0c             	add    esp,0xc
c0017210:	6a 20                	push   0x20
c0017212:	6a 00                	push   0x0
c0017214:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017218:	52                   	push   edx
c0017219:	e8 ea 93 fe ff       	call   c0000608 <memset>
c001721e:	58                   	pop    eax
c001721f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017221:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0017225:	51                   	push   ecx
c0017226:	8d 54 24 40          	lea    edx,[esp+0x40]
c001722a:	52                   	push   edx
c001722b:	6a 00                	push   0x0
c001722d:	6a 1f                	push   0x1f
c001722f:	53                   	push   ebx
c0017230:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017233:	83 c4 18             	add    esp,0x18
c0017236:	68 9e 22 02 c0       	push   0xc002229e
c001723b:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001723f:	52                   	push   edx
c0017240:	e8 b3 94 fe ff       	call   c00006f8 <strcmp>
c0017245:	83 c4 10             	add    esp,0x10
c0017248:	85 c0                	test   eax,eax
c001724a:	75 0f                	jne    c001725b <Thr::loadKernelSymbolTable(char const*)+0x181>
c001724c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001724f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017253:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017257:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001725b:	50                   	push   eax
c001725c:	50                   	push   eax
c001725d:	68 a6 22 02 c0       	push   0xc00222a6
c0017262:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017266:	50                   	push   eax
c0017267:	e8 8c 94 fe ff       	call   c00006f8 <strcmp>
c001726c:	83 c4 10             	add    esp,0x10
c001726f:	85 c0                	test   eax,eax
c0017271:	75 0f                	jne    c0017282 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c0017273:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017276:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001727a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001727e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017282:	45                   	inc    ebp
c0017283:	e9 4c ff ff ff       	jmp    c00171d4 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c0017288:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001728d:	75 10                	jne    c001729f <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001728f:	83 ec 0c             	sub    esp,0xc
c0017292:	68 ae 22 02 c0       	push   0xc00222ae
c0017297:	e8 82 df ff ff       	call   c001521e <Krnl::panic(char const*)>
c001729c:	83 c4 10             	add    esp,0x10
c001729f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00172a4:	75 10                	jne    c00172b6 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c00172a6:	83 ec 0c             	sub    esp,0xc
c00172a9:	68 ae 22 02 c0       	push   0xc00222ae
c00172ae:	e8 6b df ff ff       	call   c001521e <Krnl::panic(char const*)>
c00172b3:	83 c4 10             	add    esp,0x10
c00172b6:	31 d2                	xor    edx,edx
c00172b8:	50                   	push   eax
c00172b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00172bd:	52                   	push   edx
c00172be:	50                   	push   eax
c00172bf:	53                   	push   ebx
c00172c0:	e8 ab 84 ff ff       	call   c000f770 <File::seek(unsigned long long)>
c00172c5:	5a                   	pop    edx
c00172c6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00172ca:	e8 9b 4c ff ff       	call   c000bf6a <malloc>
c00172cf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00172d7:	89 c1                	mov    ecx,eax
c00172d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00172dd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00172e1:	5e                   	pop    esi
c00172e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00172e4:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00172e8:	55                   	push   ebp
c00172e9:	51                   	push   ecx
c00172ea:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c00172ee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00172f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00172f6:	53                   	push   ebx
c00172f7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00172fa:	83 c4 14             	add    esp,0x14
c00172fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017301:	e8 64 4c ff ff       	call   c000bf6a <malloc>
c0017306:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017309:	89 c6                	mov    esi,eax
c001730b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001730d:	56                   	push   esi
c001730e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017312:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017316:	53                   	push   ebx
c0017317:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001731a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001731e:	8b 15 80 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025180
c0017324:	83 c4 1c             	add    esp,0x1c
c0017327:	c1 e8 04             	shr    eax,0x4
c001732a:	89 04 95 00 50 02 c0 	mov    DWORD PTR [edx*4-0x3ffdb000],eax
c0017331:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017335:	31 d2                	xor    edx,edx
c0017337:	52                   	push   edx
c0017338:	50                   	push   eax
c0017339:	53                   	push   ebx
c001733a:	e8 31 84 ff ff       	call   c000f770 <File::seek(unsigned long long)>
c001733f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017342:	31 d2                	xor    edx,edx
c0017344:	56                   	push   esi
c0017345:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017349:	52                   	push   edx
c001734a:	50                   	push   eax
c001734b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001734d:	53                   	push   ebx
c001734e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017351:	83 c4 14             	add    esp,0x14
c0017354:	53                   	push   ebx
c0017355:	e8 b6 83 ff ff       	call   c000f710 <File::close()>
c001735a:	5d                   	pop    ebp
c001735b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001735f:	e8 16 4c ff ff       	call   c000bf7a <free>
c0017364:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017367:	e8 0e 4c ff ff       	call   c000bf7a <free>
c001736c:	a1 80 51 02 c0       	mov    eax,ds:0xc0025180
c0017371:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017375:	8d 50 01             	lea    edx,[eax+0x1]
c0017378:	89 0c 85 00 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf00],ecx
c001737f:	89 15 80 51 02 c0    	mov    DWORD PTR ds:0xc0025180,edx
c0017385:	89 34 85 80 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf80],esi
c001738c:	83 c4 10             	add    esp,0x10
c001738f:	b2 01                	mov    dl,0x1
c0017391:	83 c4 5c             	add    esp,0x5c
c0017394:	88 d0                	mov    al,dl
c0017396:	5b                   	pop    ebx
c0017397:	5e                   	pop    esi
c0017398:	5f                   	pop    edi
c0017399:	5d                   	pop    ebp
c001739a:	c3                   	ret    

c001739b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001739b:	55                   	push   ebp
c001739c:	57                   	push   edi
c001739d:	56                   	push   esi
c001739e:	53                   	push   ebx
c001739f:	81 ec 68 03 00 00    	sub    esp,0x368
c00173a5:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00173ac:	8b 1d d4 51 02 c0    	mov    ebx,DWORD PTR ds:0xc00251d4
c00173b2:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00173b6:	68 14 01 00 00       	push   0x114
c00173bb:	e8 70 7c ff ff       	call   c000f030 <operator new(unsigned long)>
c00173c0:	83 c4 0c             	add    esp,0xc
c00173c3:	89 c7                	mov    edi,eax
c00173c5:	53                   	push   ebx
c00173c6:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00173cd:	50                   	push   eax
c00173ce:	e8 7b 82 ff ff       	call   c000f64e <File::File(char const*, Process*)>
c00173d3:	5e                   	pop    esi
c00173d4:	5d                   	pop    ebp
c00173d5:	6a 01                	push   0x1
c00173d7:	57                   	push   edi
c00173d8:	e8 d5 82 ff ff       	call   c000f6b2 <File::open(FileOpenMode)>
c00173dd:	83 c4 10             	add    esp,0x10
c00173e0:	85 c0                	test   eax,eax
c00173e2:	0f 85 10 07 00 00    	jne    c0017af8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c00173e8:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00173f0:	83 ec 0c             	sub    esp,0xc
c00173f3:	6a 34                	push   0x34
c00173f5:	e8 70 4b ff ff       	call   c000bf6a <malloc>
c00173fa:	5b                   	pop    ebx
c00173fb:	89 c5                	mov    ebp,eax
c00173fd:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017401:	8b 07                	mov    eax,DWORD PTR [edi]
c0017403:	53                   	push   ebx
c0017404:	55                   	push   ebp
c0017405:	6a 00                	push   0x0
c0017407:	6a 34                	push   0x34
c0017409:	57                   	push   edi
c001740a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001740d:	83 c4 20             	add    esp,0x20
c0017410:	85 c0                	test   eax,eax
c0017412:	0f 85 e0 06 00 00    	jne    c0017af8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017418:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c001741f:	0f 85 d3 06 00 00    	jne    c0017af8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017425:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0017428:	85 c0                	test   eax,eax
c001742a:	0f 84 c8 06 00 00    	je     c0017af8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017430:	31 d2                	xor    edx,edx
c0017432:	51                   	push   ecx
c0017433:	52                   	push   edx
c0017434:	50                   	push   eax
c0017435:	57                   	push   edi
c0017436:	e8 35 83 ff ff       	call   c000f770 <File::seek(unsigned long long)>
c001743b:	83 c4 10             	add    esp,0x10
c001743e:	85 c0                	test   eax,eax
c0017440:	0f 85 b2 06 00 00    	jne    c0017af8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017446:	83 ec 0c             	sub    esp,0xc
c0017449:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001744c:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017450:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017454:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017458:	0f af c2             	imul   eax,edx
c001745b:	50                   	push   eax
c001745c:	e8 09 4b ff ff       	call   c000bf6a <malloc>
c0017461:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017464:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017468:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001746a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001746e:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017472:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017476:	0f af c2             	imul   eax,edx
c0017479:	99                   	cdq    
c001747a:	52                   	push   edx
c001747b:	50                   	push   eax
c001747c:	57                   	push   edi
c001747d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017480:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0017483:	83 c4 20             	add    esp,0x20
c0017486:	85 c0                	test   eax,eax
c0017488:	0f 84 6a 06 00 00    	je     c0017af8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001748e:	52                   	push   edx
c001748f:	31 d2                	xor    edx,edx
c0017491:	52                   	push   edx
c0017492:	50                   	push   eax
c0017493:	57                   	push   edi
c0017494:	e8 d7 82 ff ff       	call   c000f770 <File::seek(unsigned long long)>
c0017499:	83 c4 10             	add    esp,0x10
c001749c:	85 c0                	test   eax,eax
c001749e:	0f 85 54 06 00 00    	jne    c0017af8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c00174a4:	83 ec 0c             	sub    esp,0xc
c00174a7:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c00174ab:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c00174af:	31 f6                	xor    esi,esi
c00174b1:	0f af c2             	imul   eax,edx
c00174b4:	50                   	push   eax
c00174b5:	e8 b0 4a ff ff       	call   c000bf6a <malloc>
c00174ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00174bd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00174c1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00174c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00174c7:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c00174cb:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c00174cf:	0f af c2             	imul   eax,edx
c00174d2:	99                   	cdq    
c00174d3:	52                   	push   edx
c00174d4:	50                   	push   eax
c00174d5:	57                   	push   edi
c00174d6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00174d9:	83 c4 20             	add    esp,0x20
c00174dc:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c00174e0:	0f 86 af 00 00 00    	jbe    c0017595 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c00174e6:	0f b7 de             	movzx  ebx,si
c00174e9:	c1 e3 05             	shl    ebx,0x5
c00174ec:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c00174f0:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00174f3:	0f 85 96 00 00 00    	jne    c001758f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c00174f9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00174fc:	31 d2                	xor    edx,edx
c00174fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017502:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017505:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017509:	50                   	push   eax
c001750a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001750d:	52                   	push   edx
c001750e:	50                   	push   eax
c001750f:	57                   	push   edi
c0017510:	e8 5b 82 ff ff       	call   c000f770 <File::seek(unsigned long long)>
c0017515:	83 c4 10             	add    esp,0x10
c0017518:	85 c0                	test   eax,eax
c001751a:	0f 85 d8 05 00 00    	jne    c0017af8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017520:	52                   	push   edx
c0017521:	52                   	push   edx
c0017522:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017526:	68 c8 22 02 c0       	push   0xc00222c8
c001752b:	e8 ef 7b ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0017530:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c0017537:	31 d2                	xor    edx,edx
c0017539:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c001753d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017541:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017545:	59                   	pop    ecx
c0017546:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017548:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001754f:	50                   	push   eax
c0017550:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017554:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017558:	52                   	push   edx
c0017559:	50                   	push   eax
c001755a:	57                   	push   edi
c001755b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001755e:	83 c4 18             	add    esp,0x18
c0017561:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017564:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017567:	50                   	push   eax
c0017568:	68 ec 22 02 c0       	push   0xc00222ec
c001756d:	e8 ad 7b ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0017572:	83 c4 0c             	add    esp,0xc
c0017575:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017578:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001757b:	50                   	push   eax
c001757c:	6a 00                	push   0x0
c001757e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017582:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0017586:	50                   	push   eax
c0017587:	e8 7c 90 fe ff       	call   c0000608 <memset>
c001758c:	83 c4 10             	add    esp,0x10
c001758f:	46                   	inc    esi
c0017590:	e9 47 ff ff ff       	jmp    c00174dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c0017595:	31 db                	xor    ebx,ebx
c0017597:	50                   	push   eax
c0017598:	68 00 01 00 00       	push   0x100
c001759d:	6a 00                	push   0x0
c001759f:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00175a3:	50                   	push   eax
c00175a4:	e8 5f 90 fe ff       	call   c0000608 <memset>
c00175a9:	83 c4 0c             	add    esp,0xc
c00175ac:	68 00 01 00 00       	push   0x100
c00175b1:	6a 00                	push   0x0
c00175b3:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00175ba:	50                   	push   eax
c00175bb:	e8 48 90 fe ff       	call   c0000608 <memset>
c00175c0:	83 c4 10             	add    esp,0x10
c00175c3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00175cb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00175d3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00175db:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00175e3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00175eb:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c00175ef:	0f 86 2f 01 00 00    	jbe    c0017724 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c00175f5:	0f b7 f3             	movzx  esi,bx
c00175f8:	6b f6 28             	imul   esi,esi,0x28
c00175fb:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00175ff:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017602:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017606:	50                   	push   eax
c0017607:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001760b:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c001760f:	8b 06                	mov    eax,DWORD PTR [esi]
c0017611:	6b d2 28             	imul   edx,edx,0x28
c0017614:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017618:	31 d2                	xor    edx,edx
c001761a:	52                   	push   edx
c001761b:	50                   	push   eax
c001761c:	57                   	push   edi
c001761d:	e8 4e 81 ff ff       	call   c000f770 <File::seek(unsigned long long)>
c0017622:	83 c4 0c             	add    esp,0xc
c0017625:	6a 20                	push   0x20
c0017627:	6a 00                	push   0x0
c0017629:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017630:	51                   	push   ecx
c0017631:	e8 d2 8f fe ff       	call   c0000608 <memset>
c0017636:	58                   	pop    eax
c0017637:	8b 07                	mov    eax,DWORD PTR [edi]
c0017639:	8d 54 24 58          	lea    edx,[esp+0x58]
c001763d:	52                   	push   edx
c001763e:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017645:	51                   	push   ecx
c0017646:	6a 00                	push   0x0
c0017648:	6a 1f                	push   0x1f
c001764a:	57                   	push   edi
c001764b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001764e:	83 c4 1c             	add    esp,0x1c
c0017651:	6a 09                	push   0x9
c0017653:	68 09 23 02 c0       	push   0xc0022309
c0017658:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001765f:	51                   	push   ecx
c0017660:	e8 0a 8f fe ff       	call   c000056f <memcmp>
c0017665:	83 c4 10             	add    esp,0x10
c0017668:	85 c0                	test   eax,eax
c001766a:	75 21                	jne    c001768d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c001766c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017670:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017674:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017678:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001767c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001767f:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017686:	89 c8                	mov    eax,ecx
c0017688:	40                   	inc    eax
c0017689:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001768d:	50                   	push   eax
c001768e:	6a 09                	push   0x9
c0017690:	68 13 23 02 c0       	push   0xc0022313
c0017695:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001769c:	50                   	push   eax
c001769d:	e8 cd 8e fe ff       	call   c000056f <memcmp>
c00176a2:	83 c4 10             	add    esp,0x10
c00176a5:	85 c0                	test   eax,eax
c00176a7:	75 21                	jne    c00176ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c00176a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00176ad:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00176b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00176b5:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00176b9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00176bc:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c00176c3:	89 c8                	mov    eax,ecx
c00176c5:	40                   	inc    eax
c00176c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00176ca:	50                   	push   eax
c00176cb:	50                   	push   eax
c00176cc:	68 9e 22 02 c0       	push   0xc002229e
c00176d1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00176d8:	50                   	push   eax
c00176d9:	e8 1a 90 fe ff       	call   c00006f8 <strcmp>
c00176de:	83 c4 10             	add    esp,0x10
c00176e1:	85 c0                	test   eax,eax
c00176e3:	75 0f                	jne    c00176f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c00176e5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00176e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00176ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00176f0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00176f4:	50                   	push   eax
c00176f5:	50                   	push   eax
c00176f6:	68 a6 22 02 c0       	push   0xc00222a6
c00176fb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017702:	50                   	push   eax
c0017703:	e8 f0 8f fe ff       	call   c00006f8 <strcmp>
c0017708:	83 c4 10             	add    esp,0x10
c001770b:	85 c0                	test   eax,eax
c001770d:	75 0f                	jne    c001771e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c001770f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017712:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017716:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001771a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001771e:	43                   	inc    ebx
c001771f:	e9 c7 fe ff ff       	jmp    c00175eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c0017724:	31 d2                	xor    edx,edx
c0017726:	50                   	push   eax
c0017727:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001772b:	52                   	push   edx
c001772c:	50                   	push   eax
c001772d:	57                   	push   edi
c001772e:	e8 3d 80 ff ff       	call   c000f770 <File::seek(unsigned long long)>
c0017733:	5a                   	pop    edx
c0017734:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017738:	e8 2d 48 ff ff       	call   c000bf6a <malloc>
c001773d:	31 d2                	xor    edx,edx
c001773f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017743:	59                   	pop    ecx
c0017744:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017746:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001774a:	53                   	push   ebx
c001774b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001774f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017753:	52                   	push   edx
c0017754:	50                   	push   eax
c0017755:	57                   	push   edi
c0017756:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017759:	83 c4 14             	add    esp,0x14
c001775c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017760:	e8 05 48 ff ff       	call   c000bf6a <malloc>
c0017765:	31 d2                	xor    edx,edx
c0017767:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001776b:	83 c4 0c             	add    esp,0xc
c001776e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017772:	52                   	push   edx
c0017773:	50                   	push   eax
c0017774:	57                   	push   edi
c0017775:	e8 f6 7f ff ff       	call   c000f770 <File::seek(unsigned long long)>
c001777a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001777d:	31 d2                	xor    edx,edx
c001777f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017783:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017785:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017789:	52                   	push   edx
c001778a:	50                   	push   eax
c001778b:	57                   	push   edi
c001778c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001778f:	83 c4 20             	add    esp,0x20
c0017792:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001779a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001779e:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c00177a2:	0f 84 54 03 00 00    	je     c0017afc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c00177a8:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c00177af:	31 d2                	xor    edx,edx
c00177b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177b5:	c1 e8 03             	shr    eax,0x3
c00177b8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00177bc:	50                   	push   eax
c00177bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00177c1:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00177c5:	52                   	push   edx
c00177c6:	50                   	push   eax
c00177c7:	57                   	push   edi
c00177c8:	e8 a3 7f ff ff       	call   c000f770 <File::seek(unsigned long long)>
c00177cd:	58                   	pop    eax
c00177ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177d2:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00177d9:	e8 8c 47 ff ff       	call   c000bf6a <malloc>
c00177de:	31 d2                	xor    edx,edx
c00177e0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00177e4:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00177e6:	58                   	pop    eax
c00177e7:	8d 44 24 58          	lea    eax,[esp+0x58]
c00177eb:	50                   	push   eax
c00177ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00177f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177f4:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00177fb:	52                   	push   edx
c00177fc:	50                   	push   eax
c00177fd:	57                   	push   edi
c00177fe:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017801:	83 c4 20             	add    esp,0x20
c0017804:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001780c:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0017810:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c0017814:	0f 8d c6 02 00 00    	jge    c0017ae0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c001781a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001781e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017822:	31 db                	xor    ebx,ebx
c0017824:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c0017827:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001782b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001782f:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c0017833:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017837:	c1 e8 08             	shr    eax,0x8
c001783a:	89 c6                	mov    esi,eax
c001783c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017840:	c1 e6 04             	shl    esi,0x4
c0017843:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c0017847:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001784a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001784e:	85 c0                	test   eax,eax
c0017850:	0f 85 17 01 00 00    	jne    c001796d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0017856:	83 ec 0c             	sub    esp,0xc
c0017859:	b3 01                	mov    bl,0x1
c001785b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001785f:	03 06                	add    eax,DWORD PTR [esi]
c0017861:	50                   	push   eax
c0017862:	e8 24 f8 ff ff       	call   c001708b <Thr::getAddressOfKernelSymbol(char const*)>
c0017867:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001786b:	83 c4 10             	add    esp,0x10
c001786e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017873:	0f 85 f4 00 00 00    	jne    c001796d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0017879:	50                   	push   eax
c001787a:	50                   	push   eax
c001787b:	68 1d 23 02 c0       	push   0xc002231d
c0017880:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017884:	03 06                	add    eax,DWORD PTR [esi]
c0017886:	50                   	push   eax
c0017887:	e8 6c 8e fe ff       	call   c00006f8 <strcmp>
c001788c:	83 c4 10             	add    esp,0x10
c001788f:	85 c0                	test   eax,eax
c0017891:	75 0a                	jne    c001789d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c0017893:	b8 2c eb 01 c0       	mov    eax,0xc001eb2c
c0017898:	e9 ca 00 00 00       	jmp    c0017967 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001789d:	50                   	push   eax
c001789e:	50                   	push   eax
c001789f:	68 27 23 02 c0       	push   0xc0022327
c00178a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00178a8:	03 06                	add    eax,DWORD PTR [esi]
c00178aa:	50                   	push   eax
c00178ab:	e8 48 8e fe ff       	call   c00006f8 <strcmp>
c00178b0:	83 c4 10             	add    esp,0x10
c00178b3:	85 c0                	test   eax,eax
c00178b5:	75 0a                	jne    c00178c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c00178b7:	b8 60 e8 01 c0       	mov    eax,0xc001e860
c00178bc:	e9 a6 00 00 00       	jmp    c0017967 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c00178c1:	53                   	push   ebx
c00178c2:	53                   	push   ebx
c00178c3:	68 30 23 02 c0       	push   0xc0022330
c00178c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00178cc:	03 06                	add    eax,DWORD PTR [esi]
c00178ce:	50                   	push   eax
c00178cf:	e8 24 8e fe ff       	call   c00006f8 <strcmp>
c00178d4:	83 c4 10             	add    esp,0x10
c00178d7:	85 c0                	test   eax,eax
c00178d9:	75 0a                	jne    c00178e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c00178db:	b8 2c ec 01 c0       	mov    eax,0xc001ec2c
c00178e0:	e9 82 00 00 00       	jmp    c0017967 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c00178e5:	51                   	push   ecx
c00178e6:	51                   	push   ecx
c00178e7:	68 3a 23 02 c0       	push   0xc002233a
c00178ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00178f0:	03 06                	add    eax,DWORD PTR [esi]
c00178f2:	50                   	push   eax
c00178f3:	e8 00 8e fe ff       	call   c00006f8 <strcmp>
c00178f8:	83 c4 10             	add    esp,0x10
c00178fb:	85 c0                	test   eax,eax
c00178fd:	74 63                	je     c0017962 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c00178ff:	50                   	push   eax
c0017900:	50                   	push   eax
c0017901:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017905:	03 06                	add    eax,DWORD PTR [esi]
c0017907:	50                   	push   eax
c0017908:	68 43 23 02 c0       	push   0xc0022343
c001790d:	e8 0d 78 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0017912:	58                   	pop    eax
c0017913:	5a                   	pop    edx
c0017914:	68 5d 23 02 c0       	push   0xc002235d
c0017919:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c0017920:	53                   	push   ebx
c0017921:	e8 81 8d fe ff       	call   c00006a7 <strcpy>
c0017926:	59                   	pop    ecx
c0017927:	58                   	pop    eax
c0017928:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001792c:	03 06                	add    eax,DWORD PTR [esi]
c001792e:	50                   	push   eax
c001792f:	53                   	push   ebx
c0017930:	e8 29 8e fe ff       	call   c000075e <strcat>
c0017935:	58                   	pop    eax
c0017936:	5a                   	pop    edx
c0017937:	68 f3 23 02 c0       	push   0xc00223f3
c001793c:	53                   	push   ebx
c001793d:	e8 1c 8e fe ff       	call   c000075e <strcat>
c0017942:	83 c4 10             	add    esp,0x10
c0017945:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001794a:	0f 84 4b 01 00 00    	je     c0017a9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0017950:	83 ec 0c             	sub    esp,0xc
c0017953:	53                   	push   ebx
c0017954:	e8 c5 d8 ff ff       	call   c001521e <Krnl::panic(char const*)>
c0017959:	83 c4 10             	add    esp,0x10
c001795c:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c0017960:	eb 0b                	jmp    c001796d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0017962:	b8 ac e9 01 c0       	mov    eax,0xc001e9ac
c0017967:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001796b:	b3 01                	mov    bl,0x1
c001796d:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0017972:	0f 85 80 00 00 00    	jne    c00179f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c0017978:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001797f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017983:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0017987:	01 ce                	add    esi,ecx
c0017989:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0017991:	8b 06                	mov    eax,DWORD PTR [esi]
c0017993:	0f 94 c2             	sete   dl
c0017996:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001799e:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c00179a3:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c00179a7:	84 db                	test   bl,bl
c00179a9:	74 31                	je     c00179dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c00179ab:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00179af:	01 c3                	add    ebx,eax
c00179b1:	84 d2                	test   dl,dl
c00179b3:	75 0a                	jne    c00179bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c00179b5:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00179b9:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00179bd:	76 32                	jbe    c00179f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c00179bf:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00179c4:	0f 84 d1 00 00 00    	je     c0017a9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00179ca:	83 ec 0c             	sub    esp,0xc
c00179cd:	68 74 23 02 c0       	push   0xc0022374
c00179d2:	e8 47 d8 ff ff       	call   c001521e <Krnl::panic(char const*)>
c00179d7:	83 c4 10             	add    esp,0x10
c00179da:	eb 15                	jmp    c00179f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c00179dc:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c00179df:	84 d2                	test   dl,dl
c00179e1:	75 0e                	jne    c00179f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c00179e3:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00179e7:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00179eb:	77 04                	ja     c00179f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c00179ed:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00179f1:	89 1e                	mov    DWORD PTR [esi],ebx
c00179f3:	e9 df 00 00 00       	jmp    c0017ad7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c00179f8:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00179fd:	75 6e                	jne    c0017a6d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c00179ff:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0017a06:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c0017a0a:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c0017a0e:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0017a16:	74 17                	je     c0017a2f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c0017a18:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0017a20:	74 0d                	je     c0017a2f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c0017a22:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017a26:	83 e8 04             	sub    eax,0x4
c0017a29:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0017a2d:	76 17                	jbe    c0017a46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c0017a2f:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017a34:	74 65                	je     c0017a9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0017a36:	83 ec 0c             	sub    esp,0xc
c0017a39:	68 90 23 02 c0       	push   0xc0022390
c0017a3e:	e8 db d7 ff ff       	call   c001521e <Krnl::panic(char const*)>
c0017a43:	83 c4 10             	add    esp,0x10
c0017a46:	8b 16                	mov    edx,DWORD PTR [esi]
c0017a48:	84 db                	test   bl,bl
c0017a4a:	74 13                	je     c0017a5f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c0017a4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a50:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c0017a57:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0017a5b:	01 d0                	add    eax,edx
c0017a5d:	eb 06                	jmp    c0017a65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c0017a5f:	89 d0                	mov    eax,edx
c0017a61:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0017a65:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017a69:	89 06                	mov    DWORD PTR [esi],eax
c0017a6b:	eb 6a                	jmp    c0017ad7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0017a6d:	50                   	push   eax
c0017a6e:	50                   	push   eax
c0017a6f:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017a74:	50                   	push   eax
c0017a75:	68 ac 23 02 c0       	push   0xc00223ac
c0017a7a:	e8 a0 76 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0017a7f:	83 c4 10             	add    esp,0x10
c0017a82:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017a87:	74 12                	je     c0017a9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0017a89:	83 ec 0c             	sub    esp,0xc
c0017a8c:	68 b7 23 02 c0       	push   0xc00223b7
c0017a91:	e8 88 d7 ff ff       	call   c001521e <Krnl::panic(char const*)>
c0017a96:	83 c4 10             	add    esp,0x10
c0017a99:	eb 3c                	jmp    c0017ad7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0017a9b:	83 ec 0c             	sub    esp,0xc
c0017a9e:	57                   	push   edi
c0017a9f:	e8 6c 7c ff ff       	call   c000f710 <File::close()>
c0017aa4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017aa7:	8b 07                	mov    eax,DWORD PTR [edi]
c0017aa9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017aac:	59                   	pop    ecx
c0017aad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017ab1:	e8 c4 44 ff ff       	call   c000bf7a <free>
c0017ab6:	5b                   	pop    ebx
c0017ab7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017abb:	e8 ba 44 ff ff       	call   c000bf7a <free>
c0017ac0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017ac3:	e8 b2 44 ff ff       	call   c000bf7a <free>
c0017ac8:	5e                   	pop    esi
c0017ac9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017acd:	e8 a8 44 ff ff       	call   c000bf7a <free>
c0017ad2:	83 c4 10             	add    esp,0x10
c0017ad5:	eb 21                	jmp    c0017af8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017ad7:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0017adb:	e9 2c fd ff ff       	jmp    c001780c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c0017ae0:	83 ec 0c             	sub    esp,0xc
c0017ae3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017ae7:	e8 8e 44 ff ff       	call   c000bf7a <free>
c0017aec:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c0017af0:	83 c4 10             	add    esp,0x10
c0017af3:	e9 a2 fc ff ff       	jmp    c001779a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c0017af8:	31 c0                	xor    eax,eax
c0017afa:	eb 32                	jmp    c0017b2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c0017afc:	83 ec 0c             	sub    esp,0xc
c0017aff:	57                   	push   edi
c0017b00:	e8 0b 7c ff ff       	call   c000f710 <File::close()>
c0017b05:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017b08:	8b 07                	mov    eax,DWORD PTR [edi]
c0017b0a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017b0d:	58                   	pop    eax
c0017b0e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b12:	e8 63 44 ff ff       	call   c000bf7a <free>
c0017b17:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017b1a:	e8 5b 44 ff ff       	call   c000bf7a <free>
c0017b1f:	5a                   	pop    edx
c0017b20:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017b24:	e8 51 44 ff ff       	call   c000bf7a <free>
c0017b29:	83 c4 10             	add    esp,0x10
c0017b2c:	b0 01                	mov    al,0x1
c0017b2e:	81 c4 5c 03 00 00    	add    esp,0x35c
c0017b34:	5b                   	pop    ebx
c0017b35:	5e                   	pop    esi
c0017b36:	5f                   	pop    edi
c0017b37:	5d                   	pop    ebp
c0017b38:	c3                   	ret    

c0017b39 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0017b39:	56                   	push   esi
c0017b3a:	31 d2                	xor    edx,edx
c0017b3c:	53                   	push   ebx
c0017b3d:	8b 1d e0 49 02 c0    	mov    ebx,DWORD PTR ds:0xc00249e0
c0017b43:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017b47:	39 d3                	cmp    ebx,edx
c0017b49:	7e 1b                	jle    c0017b66 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0017b4b:	8b 04 95 00 4c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb400]
c0017b52:	39 c8                	cmp    eax,ecx
c0017b54:	77 0d                	ja     c0017b63 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0017b56:	8b 34 95 00 4a 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdb600]
c0017b5d:	01 c6                	add    esi,eax
c0017b5f:	39 ce                	cmp    esi,ecx
c0017b61:	77 05                	ja     c0017b68 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0017b63:	42                   	inc    edx
c0017b64:	eb e1                	jmp    c0017b47 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0017b66:	31 c0                	xor    eax,eax
c0017b68:	5b                   	pop    ebx
c0017b69:	5e                   	pop    esi
c0017b6a:	c3                   	ret    

c0017b6b <Thr::getDriverNameFromAddress(unsigned long)>:
c0017b6b:	53                   	push   ebx
c0017b6c:	31 c0                	xor    eax,eax
c0017b6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017b72:	8b 1d e0 49 02 c0    	mov    ebx,DWORD PTR ds:0xc00249e0
c0017b78:	39 c3                	cmp    ebx,eax
c0017b7a:	7e 22                	jle    c0017b9e <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0017b7c:	8b 14 85 00 4c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb400]
c0017b83:	39 ca                	cmp    edx,ecx
c0017b85:	77 14                	ja     c0017b9b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017b87:	03 14 85 00 4a 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdb600]
c0017b8e:	39 ca                	cmp    edx,ecx
c0017b90:	76 09                	jbe    c0017b9b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017b92:	8b 04 85 00 4e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb200]
c0017b99:	eb 05                	jmp    c0017ba0 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0017b9b:	40                   	inc    eax
c0017b9c:	eb da                	jmp    c0017b78 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0017b9e:	31 c0                	xor    eax,eax
c0017ba0:	5b                   	pop    ebx
c0017ba1:	c3                   	ret    

c0017ba2 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0017ba2:	53                   	push   ebx
c0017ba3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017ba7:	53                   	push   ebx
c0017ba8:	e8 8c ff ff ff       	call   c0017b39 <Thr::getDriverBaseFromAddress(unsigned long)>
c0017bad:	5a                   	pop    edx
c0017bae:	31 d2                	xor    edx,edx
c0017bb0:	85 c0                	test   eax,eax
c0017bb2:	74 04                	je     c0017bb8 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0017bb4:	89 da                	mov    edx,ebx
c0017bb6:	29 c2                	sub    edx,eax
c0017bb8:	89 d0                	mov    eax,edx
c0017bba:	5b                   	pop    ebx
c0017bbb:	c3                   	ret    

c0017bbc <Thr::loadDLL(char const*, bool)>:
c0017bbc:	55                   	push   ebp
c0017bbd:	57                   	push   edi
c0017bbe:	56                   	push   esi
c0017bbf:	53                   	push   ebx
c0017bc0:	81 ec 34 01 00 00    	sub    esp,0x134
c0017bc6:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0017bcd:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0017bd4:	56                   	push   esi
c0017bd5:	68 cf 23 02 c0       	push   0xc00223cf
c0017bda:	e8 40 75 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0017bdf:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017be6:	e8 45 74 ff ff       	call   c000f030 <operator new(unsigned long)>
c0017beb:	83 c4 0c             	add    esp,0xc
c0017bee:	89 c3                	mov    ebx,eax
c0017bf0:	ff 35 d4 51 02 c0    	push   DWORD PTR ds:0xc00251d4
c0017bf6:	56                   	push   esi
c0017bf7:	50                   	push   eax
c0017bf8:	e8 51 7a ff ff       	call   c000f64e <File::File(char const*, Process*)>
c0017bfd:	83 c4 0c             	add    esp,0xc
c0017c00:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0017c04:	50                   	push   eax
c0017c05:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017c09:	50                   	push   eax
c0017c0a:	53                   	push   ebx
c0017c0b:	e8 4e 7d ff ff       	call   c000f95e <File::stat(unsigned long long*, bool*)>
c0017c10:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017c12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017c15:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017c18:	83 c4 10             	add    esp,0x10
c0017c1b:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0017c20:	75 0a                	jne    c0017c2c <Thr::loadDLL(char const*, bool)+0x70>
c0017c22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c26:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0017c2a:	75 3c                	jne    c0017c68 <Thr::loadDLL(char const*, bool)+0xac>
c0017c2c:	89 e8                	mov    eax,ebp
c0017c2e:	84 c0                	test   al,al
c0017c30:	0f 84 3d 01 00 00    	je     c0017d73 <Thr::loadDLL(char const*, bool)+0x1b7>
c0017c36:	50                   	push   eax
c0017c37:	50                   	push   eax
c0017c38:	68 e0 23 02 c0       	push   0xc00223e0
c0017c3d:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0017c41:	53                   	push   ebx
c0017c42:	e8 60 8a fe ff       	call   c00006a7 <strcpy>
c0017c47:	58                   	pop    eax
c0017c48:	5a                   	pop    edx
c0017c49:	56                   	push   esi
c0017c4a:	53                   	push   ebx
c0017c4b:	e8 0e 8b fe ff       	call   c000075e <strcat>
c0017c50:	59                   	pop    ecx
c0017c51:	5f                   	pop    edi
c0017c52:	68 f3 23 02 c0       	push   0xc00223f3
c0017c57:	53                   	push   ebx
c0017c58:	e8 01 8b fe ff       	call   c000075e <strcat>
c0017c5d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017c60:	e8 b9 d5 ff ff       	call   c001521e <Krnl::panic(char const*)>
c0017c65:	83 c4 10             	add    esp,0x10
c0017c68:	e8 70 66 ff ff       	call   c000e2dd <Virt::getAKernelVAS()>
c0017c6d:	51                   	push   ecx
c0017c6e:	6a 03                	push   0x3
c0017c70:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017c74:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017c78:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c0017c7e:	83 d3 00             	adc    ebx,0x0
c0017c81:	89 ca                	mov    edx,ecx
c0017c83:	89 d1                	mov    ecx,edx
c0017c85:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c0017c89:	51                   	push   ecx
c0017c8a:	50                   	push   eax
c0017c8b:	e8 90 6c ff ff       	call   c000e920 <VAS::allocatePages(int, int)>
c0017c90:	89 34 24             	mov    DWORD PTR [esp],esi
c0017c93:	89 c3                	mov    ebx,eax
c0017c95:	e8 8b 89 fe ff       	call   c0000625 <strlen>
c0017c9a:	8b 3d e0 49 02 c0    	mov    edi,DWORD PTR ds:0xc00249e0
c0017ca0:	40                   	inc    eax
c0017ca1:	89 04 24             	mov    DWORD PTR [esp],eax
c0017ca4:	e8 c1 42 ff ff       	call   c000bf6a <malloc>
c0017ca9:	89 04 bd 00 4e 02 c0 	mov    DWORD PTR [edi*4-0x3ffdb200],eax
c0017cb0:	5f                   	pop    edi
c0017cb1:	58                   	pop    eax
c0017cb2:	a1 e0 49 02 c0       	mov    eax,ds:0xc00249e0
c0017cb7:	56                   	push   esi
c0017cb8:	ff 34 85 00 4e 02 c0 	push   DWORD PTR [eax*4-0x3ffdb200]
c0017cbf:	e8 e3 89 fe ff       	call   c00006a7 <strcpy>
c0017cc4:	a1 e0 49 02 c0       	mov    eax,ds:0xc00249e0
c0017cc9:	8d 50 01             	lea    edx,[eax+0x1]
c0017ccc:	89 1c 85 00 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb400],ebx
c0017cd3:	89 15 e0 49 02 c0    	mov    DWORD PTR ds:0xc00249e0,edx
c0017cd9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cdd:	83 c4 0c             	add    esp,0xc
c0017ce0:	89 14 85 00 4a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb600],edx
c0017ce7:	6a 01                	push   0x1
c0017ce9:	53                   	push   ebx
c0017cea:	56                   	push   esi
c0017ceb:	e8 ab f6 ff ff       	call   c001739b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0017cf0:	83 c4 10             	add    esp,0x10
c0017cf3:	89 c7                	mov    edi,eax
c0017cf5:	fe c8                	dec    al
c0017cf7:	74 16                	je     c0017d0f <Thr::loadDLL(char const*, bool)+0x153>
c0017cf9:	89 e8                	mov    eax,ebp
c0017cfb:	84 c0                	test   al,al
c0017cfd:	74 10                	je     c0017d0f <Thr::loadDLL(char const*, bool)+0x153>
c0017cff:	83 ec 0c             	sub    esp,0xc
c0017d02:	68 f5 23 02 c0       	push   0xc00223f5
c0017d07:	e8 12 d5 ff ff       	call   c001521e <Krnl::panic(char const*)>
c0017d0c:	83 c4 10             	add    esp,0x10
c0017d0f:	31 f6                	xor    esi,esi
c0017d11:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017d15:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017d19:	05 ff 0f 00 00       	add    eax,0xfff
c0017d1e:	83 d2 00             	adc    edx,0x0
c0017d21:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017d25:	c1 ea 0c             	shr    edx,0xc
c0017d28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d2c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017d30:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0017d34:	ba 00 00 00 00       	mov    edx,0x0
c0017d39:	89 d0                	mov    eax,edx
c0017d3b:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0017d3f:	73 2c                	jae    c0017d6d <Thr::loadDLL(char const*, bool)+0x1b1>
c0017d41:	e8 97 65 ff ff       	call   c000e2dd <Virt::getAKernelVAS()>
c0017d46:	89 f5                	mov    ebp,esi
c0017d48:	c1 e5 0c             	shl    ebp,0xc
c0017d4b:	52                   	push   edx
c0017d4c:	01 dd                	add    ebp,ebx
c0017d4e:	52                   	push   edx
c0017d4f:	55                   	push   ebp
c0017d50:	50                   	push   eax
c0017d51:	e8 32 67 ff ff       	call   c000e488 <VAS::getPageTableEntry(unsigned long)>
c0017d56:	83 c4 10             	add    esp,0x10
c0017d59:	f6 00 60             	test   BYTE PTR [eax],0x60
c0017d5c:	75 0c                	jne    c0017d6a <Thr::loadDLL(char const*, bool)+0x1ae>
c0017d5e:	83 ec 0c             	sub    esp,0xc
c0017d61:	55                   	push   ebp
c0017d62:	e8 23 47 ff ff       	call   c000c48a <Phys::freePage(unsigned long)>
c0017d67:	83 c4 10             	add    esp,0x10
c0017d6a:	46                   	inc    esi
c0017d6b:	eb a4                	jmp    c0017d11 <Thr::loadDLL(char const*, bool)+0x155>
c0017d6d:	89 f8                	mov    eax,edi
c0017d6f:	84 c0                	test   al,al
c0017d71:	75 02                	jne    c0017d75 <Thr::loadDLL(char const*, bool)+0x1b9>
c0017d73:	31 db                	xor    ebx,ebx
c0017d75:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017d7b:	89 d8                	mov    eax,ebx
c0017d7d:	5b                   	pop    ebx
c0017d7e:	5e                   	pop    esi
c0017d7f:	5f                   	pop    edi
c0017d80:	5d                   	pop    ebp
c0017d81:	c3                   	ret    

c0017d82 <Thr::executeDLL(unsigned long, void*)>:
c0017d82:	56                   	push   esi
c0017d83:	53                   	push   ebx
c0017d84:	51                   	push   ecx
c0017d85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017d89:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017d8d:	85 db                	test   ebx,ebx
c0017d8f:	75 10                	jne    c0017da1 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0017d91:	83 ec 0c             	sub    esp,0xc
c0017d94:	68 14 24 02 c0       	push   0xc0022414
c0017d99:	e8 80 d4 ff ff       	call   c001521e <Krnl::panic(char const*)>
c0017d9e:	83 c4 10             	add    esp,0x10
c0017da1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0017da5:	89 d8                	mov    eax,ebx
c0017da7:	5a                   	pop    edx
c0017da8:	5b                   	pop    ebx
c0017da9:	5e                   	pop    esi
c0017daa:	ff e0                	jmp    eax

c0017dac <changeTSS>:
c0017dac:	83 ec 0c             	sub    esp,0xc
c0017daf:	e8 fa c2 ff ff       	call   c00140ae <thisCPU()>
c0017db4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017dba:	83 ec 08             	sub    esp,0x8
c0017dbd:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0017dc0:	05 7c 11 00 00       	add    eax,0x117c
c0017dc5:	c1 e1 15             	shl    ecx,0x15
c0017dc8:	ba 00 00 e8 01       	mov    edx,0x1e80000
c0017dcd:	29 ca                	sub    edx,ecx
c0017dcf:	52                   	push   edx
c0017dd0:	50                   	push   eax
c0017dd1:	e8 56 5c ff ff       	call   c000da2c <TSS::setESP(unsigned long)>
c0017dd6:	83 c4 1c             	add    esp,0x1c
c0017dd9:	c3                   	ret    

c0017dda <Process::addArgs(char**)>:
c0017dda:	57                   	push   edi
c0017ddb:	56                   	push   esi
c0017ddc:	53                   	push   ebx
c0017ddd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017de1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017de5:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c0017def:	85 ff                	test   edi,edi
c0017df1:	74 3d                	je     c0017e30 <Process::addArgs(char**)+0x56>
c0017df3:	8b 07                	mov    eax,DWORD PTR [edi]
c0017df5:	85 c0                	test   eax,eax
c0017df7:	74 37                	je     c0017e30 <Process::addArgs(char**)+0x56>
c0017df9:	31 db                	xor    ebx,ebx
c0017dfb:	83 ec 0c             	sub    esp,0xc
c0017dfe:	50                   	push   eax
c0017dff:	e8 21 88 fe ff       	call   c0000625 <strlen>
c0017e04:	40                   	inc    eax
c0017e05:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e08:	e8 5d 41 ff ff       	call   c000bf6a <malloc>
c0017e0d:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c0017e14:	5a                   	pop    edx
c0017e15:	59                   	pop    ecx
c0017e16:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0017e19:	43                   	inc    ebx
c0017e1a:	50                   	push   eax
c0017e1b:	e8 87 88 fe ff       	call   c00006a7 <strcpy>
c0017e20:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c0017e26:	83 c4 10             	add    esp,0x10
c0017e29:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017e2c:	85 c0                	test   eax,eax
c0017e2e:	75 cb                	jne    c0017dfb <Process::addArgs(char**)+0x21>
c0017e30:	5b                   	pop    ebx
c0017e31:	5e                   	pop    esi
c0017e32:	5f                   	pop    edi
c0017e33:	c3                   	ret    

c0017e34 <Process::Process(char const*, Process*, char**)>:
c0017e34:	56                   	push   esi
c0017e35:	53                   	push   ebx
c0017e36:	83 ec 14             	sub    esp,0x14
c0017e39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e3d:	05 0c 02 00 00       	add    eax,0x20c
c0017e42:	bb 07 00 00 00       	mov    ebx,0x7
c0017e47:	89 c6                	mov    esi,eax
c0017e49:	85 db                	test   ebx,ebx
c0017e4b:	78 12                	js     c0017e5f <Process::Process(char const*, Process*, char**)+0x2b>
c0017e4d:	83 ec 0c             	sub    esp,0xc
c0017e50:	56                   	push   esi
c0017e51:	e8 24 76 00 00       	call   c001f47a <ThreadControlBlock::ThreadControlBlock()>
c0017e56:	83 c4 10             	add    esp,0x10
c0017e59:	83 c6 63             	add    esi,0x63
c0017e5c:	4b                   	dec    ebx
c0017e5d:	eb ea                	jmp    c0017e49 <Process::Process(char const*, Process*, char**)+0x15>
c0017e5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e63:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c0017e6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e6e:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c0017e77:	a1 a4 37 02 c0       	mov    eax,ds:0xc00237a4
c0017e7c:	8d 50 01             	lea    edx,[eax+0x1]
c0017e7f:	89 15 a4 37 02 c0    	mov    DWORD PTR ds:0xc00237a4,edx
c0017e85:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017e89:	89 02                	mov    DWORD PTR [edx],eax
c0017e8b:	83 ec 0c             	sub    esp,0xc
c0017e8e:	6a 10                	push   0x10
c0017e90:	e8 9b 71 ff ff       	call   c000f030 <operator new(unsigned long)>
c0017e95:	83 c4 10             	add    esp,0x10
c0017e98:	89 c3                	mov    ebx,eax
c0017e9a:	83 ec 08             	sub    esp,0x8
c0017e9d:	6a 00                	push   0x0
c0017e9f:	53                   	push   ebx
c0017ea0:	e8 1f 6e ff ff       	call   c000ecc4 <VAS::VAS(bool)>
c0017ea5:	83 c4 10             	add    esp,0x10
c0017ea8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eac:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0017eb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eb6:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0017ec0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ec4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ec8:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0017ece:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ed2:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017ed8:	85 c0                	test   eax,eax
c0017eda:	74 42                	je     c0017f1e <Process::Process(char const*, Process*, char**)+0xea>
c0017edc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ee0:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017ee6:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0017eec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ef0:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0017ef6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017efa:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017f00:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017f06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f0a:	05 0c 01 00 00       	add    eax,0x10c
c0017f0f:	83 ec 08             	sub    esp,0x8
c0017f12:	52                   	push   edx
c0017f13:	50                   	push   eax
c0017f14:	e8 8e 87 fe ff       	call   c00006a7 <strcpy>
c0017f19:	83 c4 10             	add    esp,0x10
c0017f1c:	eb 5c                	jmp    c0017f7a <Process::Process(char const*, Process*, char**)+0x146>
c0017f1e:	83 ec 0c             	sub    esp,0xc
c0017f21:	68 60 12 00 00       	push   0x1260
c0017f26:	e8 05 71 ff ff       	call   c000f030 <operator new(unsigned long)>
c0017f2b:	83 c4 10             	add    esp,0x10
c0017f2e:	89 c3                	mov    ebx,eax
c0017f30:	83 ec 08             	sub    esp,0x8
c0017f33:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f37:	53                   	push   ebx
c0017f38:	e8 ed 57 ff ff       	call   c000d72a <VgaText::VgaText(char const*)>
c0017f3d:	83 c4 10             	add    esp,0x10
c0017f40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f44:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c0017f4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f4e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0017f54:	83 ec 0c             	sub    esp,0xc
c0017f57:	50                   	push   eax
c0017f58:	e8 ce 4b ff ff       	call   c000cb2b <addToTerminalCycle(VgaText*)>
c0017f5d:	83 c4 10             	add    esp,0x10
c0017f60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f64:	05 0c 01 00 00       	add    eax,0x10c
c0017f69:	83 ec 08             	sub    esp,0x8
c0017f6c:	68 3e 24 02 c0       	push   0xc002243e
c0017f71:	50                   	push   eax
c0017f72:	e8 30 87 fe ff       	call   c00006a7 <strcpy>
c0017f77:	83 c4 10             	add    esp,0x10
c0017f7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f7e:	83 c0 0c             	add    eax,0xc
c0017f81:	83 ec 08             	sub    esp,0x8
c0017f84:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f88:	50                   	push   eax
c0017f89:	e8 19 87 fe ff       	call   c00006a7 <strcpy>
c0017f8e:	83 c4 10             	add    esp,0x10
c0017f91:	83 ec 08             	sub    esp,0x8
c0017f94:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017f98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f9c:	e8 39 fe ff ff       	call   c0017dda <Process::addArgs(char**)>
c0017fa1:	83 c4 10             	add    esp,0x10
c0017fa4:	83 ec 08             	sub    esp,0x8
c0017fa7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017fab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017faf:	e8 ae ee ff ff       	call   c0016e62 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0017fb4:	83 c4 10             	add    esp,0x10
c0017fb7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017fbb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017fbf:	83 f0 01             	xor    eax,0x1
c0017fc2:	88 c2                	mov    dl,al
c0017fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fc8:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c0017fce:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017fd3:	83 ec 08             	sub    esp,0x8
c0017fd6:	50                   	push   eax
c0017fd7:	68 3c 25 02 c0       	push   0xc002253c
c0017fdc:	e8 3e 71 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0017fe1:	83 c4 10             	add    esp,0x10
c0017fe4:	90                   	nop
c0017fe5:	83 c4 14             	add    esp,0x14
c0017fe8:	5b                   	pop    ebx
c0017fe9:	5e                   	pop    esi
c0017fea:	c3                   	ret    
c0017feb:	90                   	nop

c0017fec <Process::Process(bool, char const*, Process*, char**)>:
c0017fec:	56                   	push   esi
c0017fed:	53                   	push   ebx
c0017fee:	83 ec 14             	sub    esp,0x14
c0017ff1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ff5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017ff9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ffd:	05 0c 02 00 00       	add    eax,0x20c
c0018002:	bb 07 00 00 00       	mov    ebx,0x7
c0018007:	89 c6                	mov    esi,eax
c0018009:	85 db                	test   ebx,ebx
c001800b:	78 12                	js     c001801f <Process::Process(bool, char const*, Process*, char**)+0x33>
c001800d:	83 ec 0c             	sub    esp,0xc
c0018010:	56                   	push   esi
c0018011:	e8 64 74 00 00       	call   c001f47a <ThreadControlBlock::ThreadControlBlock()>
c0018016:	83 c4 10             	add    esp,0x10
c0018019:	83 c6 63             	add    esi,0x63
c001801c:	4b                   	dec    ebx
c001801d:	eb ea                	jmp    c0018009 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001801f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018023:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001802a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001802e:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c0018037:	a1 a4 37 02 c0       	mov    eax,ds:0xc00237a4
c001803c:	8d 50 01             	lea    edx,[eax+0x1]
c001803f:	89 15 a4 37 02 c0    	mov    DWORD PTR ds:0xc00237a4,edx
c0018045:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018049:	89 02                	mov    DWORD PTR [edx],eax
c001804b:	83 ec 0c             	sub    esp,0xc
c001804e:	6a 10                	push   0x10
c0018050:	e8 db 6f ff ff       	call   c000f030 <operator new(unsigned long)>
c0018055:	83 c4 10             	add    esp,0x10
c0018058:	89 c3                	mov    ebx,eax
c001805a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001805f:	83 ec 08             	sub    esp,0x8
c0018062:	50                   	push   eax
c0018063:	53                   	push   ebx
c0018064:	e8 5b 6c ff ff       	call   c000ecc4 <VAS::VAS(bool)>
c0018069:	83 c4 10             	add    esp,0x10
c001806c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018070:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0018076:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001807a:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018084:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018088:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001808c:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0018092:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018096:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001809c:	85 c0                	test   eax,eax
c001809e:	74 42                	je     c00180e2 <Process::Process(bool, char const*, Process*, char**)+0xf6>
c00180a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180a4:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00180aa:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c00180b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180b4:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c00180ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180be:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00180c4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00180ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180ce:	05 0c 01 00 00       	add    eax,0x10c
c00180d3:	83 ec 08             	sub    esp,0x8
c00180d6:	52                   	push   edx
c00180d7:	50                   	push   eax
c00180d8:	e8 ca 85 fe ff       	call   c00006a7 <strcpy>
c00180dd:	83 c4 10             	add    esp,0x10
c00180e0:	eb 5c                	jmp    c001813e <Process::Process(bool, char const*, Process*, char**)+0x152>
c00180e2:	83 ec 0c             	sub    esp,0xc
c00180e5:	68 60 12 00 00       	push   0x1260
c00180ea:	e8 41 6f ff ff       	call   c000f030 <operator new(unsigned long)>
c00180ef:	83 c4 10             	add    esp,0x10
c00180f2:	89 c3                	mov    ebx,eax
c00180f4:	83 ec 08             	sub    esp,0x8
c00180f7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00180fb:	53                   	push   ebx
c00180fc:	e8 29 56 ff ff       	call   c000d72a <VgaText::VgaText(char const*)>
c0018101:	83 c4 10             	add    esp,0x10
c0018104:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018108:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001810e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018112:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018118:	83 ec 0c             	sub    esp,0xc
c001811b:	50                   	push   eax
c001811c:	e8 0a 4a ff ff       	call   c000cb2b <addToTerminalCycle(VgaText*)>
c0018121:	83 c4 10             	add    esp,0x10
c0018124:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018128:	05 0c 01 00 00       	add    eax,0x10c
c001812d:	83 ec 08             	sub    esp,0x8
c0018130:	68 3e 24 02 c0       	push   0xc002243e
c0018135:	50                   	push   eax
c0018136:	e8 6c 85 fe ff       	call   c00006a7 <strcpy>
c001813b:	83 c4 10             	add    esp,0x10
c001813e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018142:	83 c0 0c             	add    eax,0xc
c0018145:	83 ec 08             	sub    esp,0x8
c0018148:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001814c:	50                   	push   eax
c001814d:	e8 55 85 fe ff       	call   c00006a7 <strcpy>
c0018152:	83 c4 10             	add    esp,0x10
c0018155:	83 ec 08             	sub    esp,0x8
c0018158:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001815c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018160:	e8 75 fc ff ff       	call   c0017dda <Process::addArgs(char**)>
c0018165:	83 c4 10             	add    esp,0x10
c0018168:	90                   	nop
c0018169:	83 c4 14             	add    esp,0x14
c001816c:	5b                   	pop    ebx
c001816d:	5e                   	pop    esi
c001816e:	c3                   	ret    

c001816f <disableIRQs()>:
c001816f:	fa                   	cli    
c0018170:	ff 05 ac 51 02 c0    	inc    DWORD PTR ds:0xc00251ac
c0018176:	c3                   	ret    

c0018177 <getIRQNestingLevel()>:
c0018177:	a1 ac 51 02 c0       	mov    eax,ds:0xc00251ac
c001817c:	c3                   	ret    

c001817d <enableIRQs()>:
c001817d:	a1 ac 51 02 c0       	mov    eax,ds:0xc00251ac
c0018182:	48                   	dec    eax
c0018183:	a3 ac 51 02 c0       	mov    ds:0xc00251ac,eax
c0018188:	75 01                	jne    c001818b <enableIRQs()+0xe>
c001818a:	fb                   	sti    
c001818b:	c3                   	ret    

c001818c <lockScheduler()>:
c001818c:	eb e1                	jmp    c001816f <disableIRQs()>

c001818e <unlockScheduler()>:
c001818e:	eb ed                	jmp    c001817d <enableIRQs()>

c0018190 <userModeEntryPoint(void*)>:
c0018190:	83 ec 0c             	sub    esp,0xc
c0018193:	e8 f6 ff ff ff       	call   c001818e <unlockScheduler()>
c0018198:	fb                   	sti    
c0018199:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001819e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00181a1:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c00181a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00181ab:	83 c4 0c             	add    esp,0xc
c00181ae:	e9 33 80 fe ff       	jmp    c00001e6 <goToUsermode>

c00181b3 <lockStuff()>:
c00181b3:	e8 b7 ff ff ff       	call   c001816f <disableIRQs()>
c00181b8:	ff 05 a8 51 02 c0    	inc    DWORD PTR ds:0xc00251a8
c00181be:	c3                   	ret    

c00181bf <taskStartupFunction>:
c00181bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181c4:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00181c7:	c3                   	ret    

c00181c8 <updateTimeUsed()>:
c00181c8:	57                   	push   edi
c00181c9:	56                   	push   esi
c00181ca:	53                   	push   ebx
c00181cb:	e8 de be ff ff       	call   c00140ae <thisCPU()>
c00181d0:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c00181d7:	74 49                	je     c0018222 <updateTimeUsed()+0x5a>
c00181d9:	0f 31                	rdtsc  
c00181db:	89 c1                	mov    ecx,eax
c00181dd:	a3 e8 51 02 c0       	mov    ds:0xc00251e8,eax
c00181e2:	2b 0d d8 51 02 c0    	sub    ecx,DWORD PTR ds:0xc00251d8
c00181e8:	89 d3                	mov    ebx,edx
c00181ea:	89 0d e0 51 02 c0    	mov    DWORD PTR ds:0xc00251e0,ecx
c00181f0:	1b 1d dc 51 02 c0    	sbb    ebx,DWORD PTR ds:0xc00251dc
c00181f6:	a3 d8 51 02 c0       	mov    ds:0xc00251d8,eax
c00181fb:	89 1d e4 51 02 c0    	mov    DWORD PTR ds:0xc00251e4,ebx
c0018201:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018206:	89 15 ec 51 02 c0    	mov    DWORD PTR ds:0xc00251ec,edx
c001820c:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001820f:	89 15 dc 51 02 c0    	mov    DWORD PTR ds:0xc00251dc,edx
c0018215:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0018218:	01 f1                	add    ecx,esi
c001821a:	11 fb                	adc    ebx,edi
c001821c:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001821f:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0018222:	5b                   	pop    ebx
c0018223:	5e                   	pop    esi
c0018224:	5f                   	pop    edi
c0018225:	c3                   	ret    

c0018226 <switchToThread(ThreadControlBlock*)>:
c0018226:	53                   	push   ebx
c0018227:	83 ec 08             	sub    esp,0x8
c001822a:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c001822f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018233:	85 c0                	test   eax,eax
c0018235:	75 30                	jne    c0018267 <switchToThread(ThreadControlBlock*)+0x41>
c0018237:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001823a:	3c ff                	cmp    al,0xff
c001823c:	74 25                	je     c0018263 <switchToThread(ThreadControlBlock*)+0x3d>
c001823e:	0f b6 d0             	movzx  edx,al
c0018241:	b8 84 03 00 00       	mov    eax,0x384
c0018246:	29 d0                	sub    eax,edx
c0018248:	c1 e0 10             	shl    eax,0x10
c001824b:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001824e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018251:	e8 72 ff ff ff       	call   c00181c8 <updateTimeUsed()>
c0018256:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001825a:	83 c4 08             	add    esp,0x8
c001825d:	5b                   	pop    ebx
c001825e:	e9 bc 7f fe ff       	jmp    c000021f <switchToThreadASM>
c0018263:	31 c0                	xor    eax,eax
c0018265:	eb e7                	jmp    c001824e <switchToThread(ThreadControlBlock*)+0x28>
c0018267:	c7 05 a4 51 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00251a4,0x1
c0018271:	83 c4 08             	add    esp,0x8
c0018274:	5b                   	pop    ebx
c0018275:	c3                   	ret    

c0018276 <Semaphore::Semaphore(int)>:
c0018276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001827a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001827e:	89 10                	mov    DWORD PTR [eax],edx
c0018280:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018284:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001828b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001828f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018296:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001829a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00182a1:	90                   	nop
c00182a2:	c3                   	ret    
c00182a3:	90                   	nop

c00182a4 <Mutex::Mutex()>:
c00182a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182a8:	6a 01                	push   0x1
c00182aa:	50                   	push   eax
c00182ab:	e8 c6 ff ff ff       	call   c0018276 <Semaphore::Semaphore(int)>
c00182b0:	83 c4 08             	add    esp,0x8
c00182b3:	90                   	nop
c00182b4:	c3                   	ret    
c00182b5:	90                   	nop

c00182b6 <Process::createThread(void (*)(void*), void*, int)>:
c00182b6:	55                   	push   ebp
c00182b7:	31 c9                	xor    ecx,ecx
c00182b9:	57                   	push   edi
c00182ba:	56                   	push   esi
c00182bb:	53                   	push   ebx
c00182bc:	83 ec 1c             	sub    esp,0x1c
c00182bf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00182c3:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c00182ca:	89 f2                	mov    edx,esi
c00182cc:	0f b7 c2             	movzx  eax,dx
c00182cf:	83 e2 01             	and    edx,0x1
c00182d2:	74 14                	je     c00182e8 <Process::createThread(void (*)(void*), void*, int)+0x32>
c00182d4:	d1 f8                	sar    eax,1
c00182d6:	41                   	inc    ecx
c00182d7:	89 c2                	mov    edx,eax
c00182d9:	83 f9 10             	cmp    ecx,0x10
c00182dc:	75 ee                	jne    c00182cc <Process::createThread(void (*)(void*), void*, int)+0x16>
c00182de:	83 c4 1c             	add    esp,0x1c
c00182e1:	31 c0                	xor    eax,eax
c00182e3:	5b                   	pop    ebx
c00182e4:	5e                   	pop    esi
c00182e5:	5f                   	pop    edi
c00182e6:	5d                   	pop    ebp
c00182e7:	c3                   	ret    
c00182e8:	83 ec 08             	sub    esp,0x8
c00182eb:	b8 01 00 00 00       	mov    eax,0x1
c00182f0:	d3 e0                	shl    eax,cl
c00182f2:	09 c6                	or     esi,eax
c00182f4:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c00182fa:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c0018301:	8d 34 09             	lea    esi,[ecx+ecx*1]
c0018304:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018307:	01 ce                	add    esi,ecx
c0018309:	89 f0                	mov    eax,esi
c001830b:	c1 e0 05             	shl    eax,0x5
c001830e:	01 c6                	add    esi,eax
c0018310:	8d 04 33             	lea    eax,[ebx+esi*1]
c0018313:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018319:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001831f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018323:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0018329:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001832f:	89 ca                	mov    edx,ecx
c0018331:	f7 da                	neg    edx
c0018333:	c1 e2 15             	shl    edx,0x15
c0018336:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001833c:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018342:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018346:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018350:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0018356:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001835a:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018360:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001836a:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018374:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001837b:	50                   	push   eax
c001837c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018380:	68 c8 51 02 c0       	push   0xc00251c8
c0018385:	e8 48 6f 00 00       	call   c001f2d2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001838a:	83 c4 10             	add    esp,0x10
c001838d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018391:	83 c4 1c             	add    esp,0x1c
c0018394:	5b                   	pop    ebx
c0018395:	5e                   	pop    esi
c0018396:	5f                   	pop    edi
c0018397:	5d                   	pop    ebp
c0018398:	c3                   	ret    
c0018399:	90                   	nop

c001839a <Process::createUserThread()>:
c001839a:	83 ec 0c             	sub    esp,0xc
c001839d:	68 80 00 00 00       	push   0x80
c00183a2:	6a 00                	push   0x0
c00183a4:	68 90 81 01 c0       	push   0xc0018190
c00183a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00183ad:	e8 04 ff ff ff       	call   c00182b6 <Process::createThread(void (*)(void*), void*, int)>
c00183b2:	83 c4 1c             	add    esp,0x1c
c00183b5:	c3                   	ret    

c00183b6 <setupMultitasking(void (*)())>:
c00183b6:	56                   	push   esi
c00183b7:	53                   	push   ebx
c00183b8:	53                   	push   ebx
c00183b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00183bd:	eb 10                	jmp    c00183cf <setupMultitasking(void (*)())+0x19>
c00183bf:	83 ec 0c             	sub    esp,0xc
c00183c2:	68 c8 51 02 c0       	push   0xc00251c8
c00183c7:	e8 58 6e 00 00       	call   c001f224 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00183cc:	83 c4 10             	add    esp,0x10
c00183cf:	83 ec 0c             	sub    esp,0xc
c00183d2:	68 c8 51 02 c0       	push   0xc00251c8
c00183d7:	e8 2c 6e 00 00       	call   c001f208 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00183dc:	83 c4 10             	add    esp,0x10
c00183df:	84 c0                	test   al,al
c00183e1:	74 dc                	je     c00183bf <setupMultitasking(void (*)())+0x9>
c00183e3:	83 ec 0c             	sub    esp,0xc
c00183e6:	68 3b 07 00 00       	push   0x73b
c00183eb:	e8 40 6c ff ff       	call   c000f030 <operator new(unsigned long)>
c00183f0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00183f7:	89 c3                	mov    ebx,eax
c00183f9:	6a 00                	push   0x0
c00183fb:	68 42 24 02 c0       	push   0xc0022442
c0018400:	6a 01                	push   0x1
c0018402:	50                   	push   eax
c0018403:	e8 e4 fb ff ff       	call   c0017fec <Process::Process(bool, char const*, Process*, char**)>
c0018408:	83 c4 18             	add    esp,0x18
c001840b:	89 1d d4 51 02 c0    	mov    DWORD PTR ds:0xc00251d4,ebx
c0018411:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0018417:	68 64 25 02 c0       	push   0xc0022564
c001841c:	e8 fe 6c ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0018421:	58                   	pop    eax
c0018422:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0018428:	e8 72 4e ff ff       	call   c000d29f <setActiveTerminal(VgaText*)>
c001842d:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c0018435:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001843b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001843e:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0018448:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001844e:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0018454:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001845e:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0018468:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018472:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018478:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001847e:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018488:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001848e:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018498:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001849e:	5a                   	pop    edx
c001849f:	59                   	pop    ecx
c00184a0:	68 3e 24 02 c0       	push   0xc002243e
c00184a5:	50                   	push   eax
c00184a6:	e8 fc 81 fe ff       	call   c00006a7 <strcpy>
c00184ab:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c00184b2:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00184b6:	83 c4 14             	add    esp,0x14
c00184b9:	5b                   	pop    ebx
c00184ba:	5e                   	pop    esi
c00184bb:	e9 51 7d fe ff       	jmp    c0000211 <switchToThreadASMFirstTime>

c00184c0 <schedule()>:
c00184c0:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c00184c5:	85 c0                	test   eax,eax
c00184c7:	74 0b                	je     c00184d4 <schedule()+0x14>
c00184c9:	c7 05 a4 51 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00251a4,0x1
c00184d3:	c3                   	ret    
c00184d4:	53                   	push   ebx
c00184d5:	83 ec 14             	sub    esp,0x14
c00184d8:	68 c8 51 02 c0       	push   0xc00251c8
c00184dd:	e8 26 6d 00 00       	call   c001f208 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00184e2:	83 c4 10             	add    esp,0x10
c00184e5:	84 c0                	test   al,al
c00184e7:	75 38                	jne    c0018521 <schedule()+0x61>
c00184e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00184ee:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00184f1:	4a                   	dec    edx
c00184f2:	74 32                	je     c0018526 <schedule()+0x66>
c00184f4:	83 ec 0c             	sub    esp,0xc
c00184f7:	68 c8 51 02 c0       	push   0xc00251c8
c00184fc:	e8 ff 6c 00 00       	call   c001f200 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018501:	c7 04 24 c8 51 02 c0 	mov    DWORD PTR [esp],0xc00251c8
c0018508:	89 c3                	mov    ebx,eax
c001850a:	e8 15 6d 00 00       	call   c001f224 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001850f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018516:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018519:	e8 08 fd ff ff       	call   c0018226 <switchToThread(ThreadControlBlock*)>
c001851e:	83 c4 10             	add    esp,0x10
c0018521:	83 c4 08             	add    esp,0x8
c0018524:	5b                   	pop    ebx
c0018525:	c3                   	ret    
c0018526:	83 ec 08             	sub    esp,0x8
c0018529:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018530:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018536:	68 c8 51 02 c0       	push   0xc00251c8
c001853b:	e8 92 6d 00 00       	call   c001f2d2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018540:	83 c4 10             	add    esp,0x10
c0018543:	eb af                	jmp    c00184f4 <schedule()+0x34>

c0018545 <unlockStuff()>:
c0018545:	a1 a8 51 02 c0       	mov    eax,ds:0xc00251a8
c001854a:	48                   	dec    eax
c001854b:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c0018550:	75 09                	jne    c001855b <unlockStuff()+0x16>
c0018552:	a1 a4 51 02 c0       	mov    eax,ds:0xc00251a4
c0018557:	85 c0                	test   eax,eax
c0018559:	75 05                	jne    c0018560 <unlockStuff()+0x1b>
c001855b:	e9 1d fc ff ff       	jmp    c001817d <enableIRQs()>
c0018560:	83 ec 0c             	sub    esp,0xc
c0018563:	c7 05 a4 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251a4,0x0
c001856d:	e8 4e ff ff ff       	call   c00184c0 <schedule()>
c0018572:	83 c4 0c             	add    esp,0xc
c0018575:	e9 03 fc ff ff       	jmp    c001817d <enableIRQs()>

c001857a <Semaphore::tryAcquire()>:
c001857a:	83 ec 0c             	sub    esp,0xc
c001857d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018581:	e8 2d fc ff ff       	call   c00181b3 <lockStuff()>
c0018586:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018589:	3b 10                	cmp    edx,DWORD PTR [eax]
c001858b:	7c 0b                	jl     c0018598 <Semaphore::tryAcquire()+0x1e>
c001858d:	e8 b3 ff ff ff       	call   c0018545 <unlockStuff()>
c0018592:	31 c0                	xor    eax,eax
c0018594:	83 c4 0c             	add    esp,0xc
c0018597:	c3                   	ret    
c0018598:	42                   	inc    edx
c0018599:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001859c:	e8 a4 ff ff ff       	call   c0018545 <unlockStuff()>
c00185a1:	b0 01                	mov    al,0x1
c00185a3:	83 c4 0c             	add    esp,0xc
c00185a6:	c3                   	ret    
c00185a7:	90                   	nop

c00185a8 <Semaphore::assertLocked(char const*)>:
c00185a8:	83 ec 0c             	sub    esp,0xc
c00185ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00185b3:	e8 fb fb ff ff       	call   c00181b3 <lockStuff()>
c00185b8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00185ba:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c00185bd:	7c 05                	jl     c00185c4 <Semaphore::assertLocked(char const*)+0x1c>
c00185bf:	83 c4 0c             	add    esp,0xc
c00185c2:	eb 81                	jmp    c0018545 <unlockStuff()>
c00185c4:	83 ec 0c             	sub    esp,0xc
c00185c7:	52                   	push   edx
c00185c8:	e8 51 cc ff ff       	call   c001521e <Krnl::panic(char const*)>
c00185cd:	83 c4 10             	add    esp,0x10
c00185d0:	83 c4 0c             	add    esp,0xc
c00185d3:	e9 6d ff ff ff       	jmp    c0018545 <unlockStuff()>

c00185d8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00185d8:	83 ec 0c             	sub    esp,0xc
c00185db:	e8 97 fb ff ff       	call   c0018177 <getIRQNestingLevel()>
c00185e0:	83 ec 08             	sub    esp,0x8
c00185e3:	50                   	push   eax
c00185e4:	68 98 25 02 c0       	push   0xc0022598
c00185e9:	e8 31 6b ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c00185ee:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00185f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00185f7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00185fa:	e8 c1 fe ff ff       	call   c00184c0 <schedule()>
c00185ff:	e8 8a fb ff ff       	call   c001818e <unlockScheduler()>
c0018604:	e8 6e fb ff ff       	call   c0018177 <getIRQNestingLevel()>
c0018609:	5a                   	pop    edx
c001860a:	59                   	pop    ecx
c001860b:	50                   	push   eax
c001860c:	68 cc 25 02 c0       	push   0xc00225cc
c0018611:	e8 09 6b ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0018616:	83 c4 1c             	add    esp,0x1c
c0018619:	c3                   	ret    

c001861a <blockTask(TaskState)>:
c001861a:	83 ec 0c             	sub    esp,0xc
c001861d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018621:	e8 66 fb ff ff       	call   c001818c <lockScheduler()>
c0018626:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001862b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001862e:	e8 8d fe ff ff       	call   c00184c0 <schedule()>
c0018633:	83 c4 0c             	add    esp,0xc
c0018636:	e9 53 fb ff ff       	jmp    c001818e <unlockScheduler()>

c001863b <waitTask(int, int*, int)>:
c001863b:	83 ec 18             	sub    esp,0x18
c001863e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018643:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018647:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001864a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001864e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018653:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0018656:	6a 07                	push   0x7
c0018658:	e8 bd ff ff ff       	call   c001861a <blockTask(TaskState)>
c001865d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018662:	83 c4 10             	add    esp,0x10
c0018665:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0018668:	85 d2                	test   edx,edx
c001866a:	74 0a                	je     c0018676 <waitTask(int, int*, int)+0x3b>
c001866c:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001866f:	89 02                	mov    DWORD PTR [edx],eax
c0018671:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018676:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0018679:	83 c4 0c             	add    esp,0xc
c001867c:	c3                   	ret    

c001867d <nanoSleepUntil(unsigned long long)>:
c001867d:	83 ec 0c             	sub    esp,0xc
c0018680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018684:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018688:	3b 05 f0 43 02 c0    	cmp    eax,DWORD PTR ds:0xc00243f0
c001868e:	89 d1                	mov    ecx,edx
c0018690:	1b 0d f4 43 02 c0    	sbb    ecx,DWORD PTR ds:0xc00243f4
c0018696:	73 04                	jae    c001869c <nanoSleepUntil(unsigned long long)+0x1f>
c0018698:	83 c4 0c             	add    esp,0xc
c001869b:	c3                   	ret    
c001869c:	e8 12 fb ff ff       	call   c00181b3 <lockStuff()>
c00186a1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00186a7:	83 ec 08             	sub    esp,0x8
c00186aa:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c00186ad:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c00186b0:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00186b6:	68 bc 51 02 c0       	push   0xc00251bc
c00186bb:	e8 12 6c 00 00       	call   c001f2d2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00186c0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00186c7:	e8 4e ff ff ff       	call   c001861a <blockTask(TaskState)>
c00186cc:	83 c4 1c             	add    esp,0x1c
c00186cf:	e9 71 fe ff ff       	jmp    c0018545 <unlockStuff()>

c00186d4 <nanoSleep(unsigned long long)>:
c00186d4:	a1 f0 43 02 c0       	mov    eax,ds:0xc00243f0
c00186d9:	8b 15 f4 43 02 c0    	mov    edx,DWORD PTR ds:0xc00243f4
c00186df:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00186e3:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c00186e7:	eb 94                	jmp    c001867d <nanoSleepUntil(unsigned long long)>

c00186e9 <sleep(unsigned long long)>:
c00186e9:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c00186f1:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c00186f6:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c00186fa:	01 ca                	add    edx,ecx
c00186fc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018700:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018704:	eb ce                	jmp    c00186d4 <nanoSleep(unsigned long long)>

c0018706 <Semaphore::acquire()>:
c0018706:	83 ec 0c             	sub    esp,0xc
c0018709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001870d:	e8 a1 fa ff ff       	call   c00181b3 <lockStuff()>
c0018712:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018715:	3b 10                	cmp    edx,DWORD PTR [eax]
c0018717:	7d 0c                	jge    c0018725 <Semaphore::acquire()+0x1f>
c0018719:	42                   	inc    edx
c001871a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001871d:	83 c4 0c             	add    esp,0xc
c0018720:	e9 20 fe ff ff       	jmp    c0018545 <unlockStuff()>
c0018725:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001872b:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c0018732:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018735:	85 d2                	test   edx,edx
c0018737:	74 2a                	je     c0018763 <Semaphore::acquire()+0x5d>
c0018739:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001873c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018742:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c0018745:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001874b:	83 ec 0c             	sub    esp,0xc
c001874e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0018751:	6a 05                	push   0x5
c0018753:	e8 c2 fe ff ff       	call   c001861a <blockTask(TaskState)>
c0018758:	83 c4 10             	add    esp,0x10
c001875b:	83 c4 0c             	add    esp,0xc
c001875e:	e9 e2 fd ff ff       	jmp    c0018545 <unlockStuff()>
c0018763:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018769:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001876c:	eb d7                	jmp    c0018745 <Semaphore::acquire()+0x3f>

c001876e <taskReturned>:
c001876e:	83 ec 18             	sub    esp,0x18
c0018771:	68 00 26 02 c0       	push   0xc0022600
c0018776:	e8 a3 ca ff ff       	call   c001521e <Krnl::panic(char const*)>
c001877b:	83 c4 10             	add    esp,0x10
c001877e:	83 ec 0c             	sub    esp,0xc
c0018781:	6a 02                	push   0x2
c0018783:	e8 92 fe ff ff       	call   c001861a <blockTask(TaskState)>
c0018788:	e8 ff f9 ff ff       	call   c001818c <lockScheduler()>
c001878d:	e8 2e fd ff ff       	call   c00184c0 <schedule()>
c0018792:	e8 f7 f9 ff ff       	call   c001818e <unlockScheduler()>
c0018797:	83 c4 10             	add    esp,0x10
c001879a:	eb e2                	jmp    c001877e <taskReturned+0x10>

c001879c <unblockTask(ThreadControlBlock*)>:
c001879c:	53                   	push   ebx
c001879d:	83 ec 08             	sub    esp,0x8
c00187a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00187a4:	e8 e3 f9 ff ff       	call   c001818c <lockScheduler()>
c00187a9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00187ac:	85 c0                	test   eax,eax
c00187ae:	74 5c                	je     c001880c <unblockTask(ThreadControlBlock*)+0x70>
c00187b0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00187b3:	48                   	dec    eax
c00187b4:	74 31                	je     c00187e7 <unblockTask(ThreadControlBlock*)+0x4b>
c00187b6:	83 ec 0c             	sub    esp,0xc
c00187b9:	68 c8 51 02 c0       	push   0xc00251c8
c00187be:	e8 3d 6a 00 00       	call   c001f200 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00187c3:	83 c4 10             	add    esp,0x10
c00187c6:	85 c0                	test   eax,eax
c00187c8:	75 17                	jne    c00187e1 <unblockTask(ThreadControlBlock*)+0x45>
c00187ca:	eb 65                	jmp    c0018831 <unblockTask(ThreadControlBlock*)+0x95>
c00187cc:	83 ec 08             	sub    esp,0x8
c00187cf:	50                   	push   eax
c00187d0:	68 c8 51 02 c0       	push   0xc00251c8
c00187d5:	e8 36 6d 00 00       	call   c001f510 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00187da:	83 c4 10             	add    esp,0x10
c00187dd:	85 c0                	test   eax,eax
c00187df:	74 50                	je     c0018831 <unblockTask(ThreadControlBlock*)+0x95>
c00187e1:	39 c3                	cmp    ebx,eax
c00187e3:	75 e7                	jne    c00187cc <unblockTask(ThreadControlBlock*)+0x30>
c00187e5:	eb 1c                	jmp    c0018803 <unblockTask(ThreadControlBlock*)+0x67>
c00187e7:	83 ec 0c             	sub    esp,0xc
c00187ea:	68 f0 26 02 c0       	push   0xc00226f0
c00187ef:	e8 2b 69 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c00187f4:	c7 04 24 7c 26 02 c0 	mov    DWORD PTR [esp],0xc002267c
c00187fb:	e8 1f 69 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0018800:	83 c4 10             	add    esp,0x10
c0018803:	83 c4 08             	add    esp,0x8
c0018806:	5b                   	pop    ebx
c0018807:	e9 82 f9 ff ff       	jmp    c001818e <unlockScheduler()>
c001880c:	83 ec 0c             	sub    esp,0xc
c001880f:	68 34 26 02 c0       	push   0xc0022634
c0018814:	e8 06 69 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0018819:	c7 04 24 7c 26 02 c0 	mov    DWORD PTR [esp],0xc002267c
c0018820:	e8 fa 68 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0018825:	83 c4 10             	add    esp,0x10
c0018828:	83 c4 08             	add    esp,0x8
c001882b:	5b                   	pop    ebx
c001882c:	e9 5d f9 ff ff       	jmp    c001818e <unlockScheduler()>
c0018831:	83 ec 08             	sub    esp,0x8
c0018834:	53                   	push   ebx
c0018835:	68 c8 51 02 c0       	push   0xc00251c8
c001883a:	e8 93 6a 00 00       	call   c001f2d2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001883f:	83 c4 10             	add    esp,0x10
c0018842:	83 c4 08             	add    esp,0x8
c0018845:	5b                   	pop    ebx
c0018846:	e9 43 f9 ff ff       	jmp    c001818e <unlockScheduler()>

c001884b <cleanupTerminatedTask(ThreadControlBlock*)>:
c001884b:	55                   	push   ebp
c001884c:	57                   	push   edi
c001884d:	56                   	push   esi
c001884e:	53                   	push   ebx
c001884f:	83 ec 1c             	sub    esp,0x1c
c0018852:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018856:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018859:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c001885f:	85 c9                	test   ecx,ecx
c0018861:	7e 20                	jle    c0018883 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c0018863:	31 f6                	xor    esi,esi
c0018865:	83 ec 0c             	sub    esp,0xc
c0018868:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001886f:	46                   	inc    esi
c0018870:	e8 05 37 ff ff       	call   c000bf7a <free>
c0018875:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018878:	83 c4 10             	add    esp,0x10
c001887b:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c0018881:	7f e2                	jg     c0018865 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c0018883:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001888d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0018892:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0018895:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018898:	d3 c0                	rol    eax,cl
c001889a:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c00188a1:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00188a4:	89 f7                	mov    edi,esi
c00188a6:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c00188ae:	0f 85 4f 01 00 00    	jne    c0018a03 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c00188b4:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00188ba:	85 c0                	test   eax,eax
c00188bc:	0f 84 aa 00 00 00    	je     c001896c <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c00188c2:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c00188c5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00188c9:	31 c9                	xor    ecx,ecx
c00188cb:	eb 10                	jmp    c00188dd <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c00188cd:	41                   	inc    ecx
c00188ce:	83 f9 10             	cmp    ecx,0x10
c00188d1:	0f 84 95 00 00 00    	je     c001896c <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c00188d7:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00188dd:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c00188e4:	d3 fa                	sar    edx,cl
c00188e6:	83 e2 01             	and    edx,0x1
c00188e9:	74 e2                	je     c00188cd <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c00188eb:	8d 14 09             	lea    edx,[ecx+ecx*1]
c00188ee:	01 ca                	add    edx,ecx
c00188f0:	89 d5                	mov    ebp,edx
c00188f2:	c1 e5 05             	shl    ebp,0x5
c00188f5:	01 ea                	add    edx,ebp
c00188f7:	01 d0                	add    eax,edx
c00188f9:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00188ff:	83 fd 07             	cmp    ebp,0x7
c0018902:	75 c9                	jne    c00188cd <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018904:	05 40 02 00 00       	add    eax,0x240
c0018909:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001890c:	83 fd ff             	cmp    ebp,0xffffffff
c001890f:	0f 8c 08 01 00 00    	jl     c0018a1d <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c0018915:	0f 84 b9 01 00 00    	je     c0018ad4 <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c001891b:	85 ed                	test   ebp,ebp
c001891d:	0f 84 a0 01 00 00    	je     c0018ac3 <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c0018923:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0018925:	75 a6                	jne    c00188cd <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018927:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001892d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018931:	01 d0                	add    eax,edx
c0018933:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018937:	83 ec 0c             	sub    esp,0xc
c001893a:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0018940:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018943:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018949:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0018950:	50                   	push   eax
c0018951:	e8 46 fe ff ff       	call   c001879c <unblockTask(ThreadControlBlock*)>
c0018956:	83 c4 10             	add    esp,0x10
c0018959:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001895c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018960:	89 f7                	mov    edi,esi
c0018962:	41                   	inc    ecx
c0018963:	83 f9 10             	cmp    ecx,0x10
c0018966:	0f 85 6b ff ff ff    	jne    c00188d7 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c001896c:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c0018972:	85 c0                	test   eax,eax
c0018974:	74 5d                	je     c00189d3 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c0018976:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001897c:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c0018982:	74 4f                	je     c00189d3 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c0018984:	83 ec 0c             	sub    esp,0xc
c0018987:	68 c8 51 02 c0       	push   0xc00251c8
c001898c:	e8 6f 68 00 00       	call   c001f200 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018991:	c7 04 24 c8 51 02 c0 	mov    DWORD PTR [esp],0xc00251c8
c0018998:	89 c7                	mov    edi,eax
c001899a:	e8 69 68 00 00       	call   c001f208 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001899f:	83 c4 10             	add    esp,0x10
c00189a2:	84 c0                	test   al,al
c00189a4:	0f 84 e4 00 00 00    	je     c0018a8e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c00189aa:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00189ad:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c00189b3:	85 d2                	test   edx,edx
c00189b5:	74 0f                	je     c00189c6 <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c00189b7:	83 ec 0c             	sub    esp,0xc
c00189ba:	8b 02                	mov    eax,DWORD PTR [edx]
c00189bc:	52                   	push   edx
c00189bd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00189c0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00189c3:	83 c4 10             	add    esp,0x10
c00189c6:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c00189d0:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c00189d3:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c00189d9:	85 db                	test   ebx,ebx
c00189db:	74 16                	je     c00189f3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c00189dd:	83 ec 0c             	sub    esp,0xc
c00189e0:	53                   	push   ebx
c00189e1:	e8 ce 5c ff ff       	call   c000e6b4 <VAS::~VAS()>
c00189e6:	58                   	pop    eax
c00189e7:	5a                   	pop    edx
c00189e8:	6a 10                	push   0x10
c00189ea:	53                   	push   ebx
c00189eb:	e8 4f 66 ff ff       	call   c000f03f <operator delete(void*, unsigned long)>
c00189f0:	83 c4 10             	add    esp,0x10
c00189f3:	83 ec 0c             	sub    esp,0xc
c00189f6:	68 49 24 02 c0       	push   0xc0022449
c00189fb:	e8 1f 67 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0018a00:	83 c4 10             	add    esp,0x10
c0018a03:	83 ec 08             	sub    esp,0x8
c0018a06:	68 3b 07 00 00       	push   0x73b
c0018a0b:	68 57 24 02 c0       	push   0xc0022457
c0018a10:	e8 0a 67 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0018a15:	83 c4 2c             	add    esp,0x2c
c0018a18:	5b                   	pop    ebx
c0018a19:	5e                   	pop    esi
c0018a1a:	5f                   	pop    edi
c0018a1b:	5d                   	pop    ebp
c0018a1c:	c3                   	ret    
c0018a1d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018a21:	83 ec 0c             	sub    esp,0xc
c0018a24:	68 34 27 02 c0       	push   0xc0022734
c0018a29:	e8 f0 c7 ff ff       	call   c001521e <Krnl::panic(char const*)>
c0018a2e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0018a31:	83 c4 10             	add    esp,0x10
c0018a34:	89 f7                	mov    edi,esi
c0018a36:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018a3a:	e9 8e fe ff ff       	jmp    c00188cd <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018a3f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018a45:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c0018a4b:	75 1c                	jne    c0018a69 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c0018a4d:	83 ec 0c             	sub    esp,0xc
c0018a50:	68 9c 27 02 c0       	push   0xc002279c
c0018a55:	e8 c5 66 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0018a5a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018a61:	e8 b4 fb ff ff       	call   c001861a <blockTask(TaskState)>
c0018a66:	83 c4 10             	add    esp,0x10
c0018a69:	83 ec 08             	sub    esp,0x8
c0018a6c:	56                   	push   esi
c0018a6d:	68 c8 51 02 c0       	push   0xc00251c8
c0018a72:	e8 5b 68 00 00       	call   c001f2d2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018a77:	c7 04 24 c8 51 02 c0 	mov    DWORD PTR [esp],0xc00251c8
c0018a7e:	e8 7d 67 00 00       	call   c001f200 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018a83:	83 c4 10             	add    esp,0x10
c0018a86:	39 f8                	cmp    eax,edi
c0018a88:	0f 84 1c ff ff ff    	je     c00189aa <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c0018a8e:	83 ec 0c             	sub    esp,0xc
c0018a91:	68 c8 51 02 c0       	push   0xc00251c8
c0018a96:	e8 65 67 00 00       	call   c001f200 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018a9b:	c7 04 24 c8 51 02 c0 	mov    DWORD PTR [esp],0xc00251c8
c0018aa2:	89 c6                	mov    esi,eax
c0018aa4:	e8 7b 67 00 00       	call   c001f224 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018aa9:	83 c4 10             	add    esp,0x10
c0018aac:	39 f3                	cmp    ebx,esi
c0018aae:	74 b9                	je     c0018a69 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c0018ab0:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0018ab3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018ab6:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c0018abc:	75 ab                	jne    c0018a69 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c0018abe:	e9 7c ff ff ff       	jmp    c0018a3f <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0018ac3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018ac7:	83 ec 0c             	sub    esp,0xc
c0018aca:	68 68 27 02 c0       	push   0xc0022768
c0018acf:	e9 55 ff ff ff       	jmp    c0018a29 <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c0018ad4:	8b 36                	mov    esi,DWORD PTR [esi]
c0018ad6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018ada:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0018add:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018ae0:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c0018ae6:	01 d7                	add    edi,edx
c0018ae8:	89 f8                	mov    eax,edi
c0018aea:	e9 44 fe ff ff       	jmp    c0018933 <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c0018aef <cleanerTaskFunction(void*)>:
c0018aef:	53                   	push   ebx
c0018af0:	83 ec 08             	sub    esp,0x8
c0018af3:	e8 96 f6 ff ff       	call   c001818e <unlockScheduler()>
c0018af8:	e8 8f f6 ff ff       	call   c001818c <lockScheduler()>
c0018afd:	80 3d 8c 51 02 c0 00 	cmp    BYTE PTR ds:0xc002518c,0x0
c0018b04:	0f 85 8e 00 00 00    	jne    c0018b98 <cleanerTaskFunction(void*)+0xa9>
c0018b0a:	83 ec 0c             	sub    esp,0xc
c0018b0d:	6a 02                	push   0x2
c0018b0f:	e8 c4 fa ff ff       	call   c00185d8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018b14:	83 c4 10             	add    esp,0x10
c0018b17:	c6 05 8c 51 02 c0 00 	mov    BYTE PTR ds:0xc002518c,0x0
c0018b1e:	e8 90 f6 ff ff       	call   c00181b3 <lockStuff()>
c0018b23:	e8 64 f6 ff ff       	call   c001818c <lockScheduler()>
c0018b28:	83 ec 0c             	sub    esp,0xc
c0018b2b:	68 b0 51 02 c0       	push   0xc00251b0
c0018b30:	e8 d3 66 00 00       	call   c001f208 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018b35:	83 c4 10             	add    esp,0x10
c0018b38:	84 c0                	test   al,al
c0018b3a:	75 40                	jne    c0018b7c <cleanerTaskFunction(void*)+0x8d>
c0018b3c:	83 ec 0c             	sub    esp,0xc
c0018b3f:	68 b0 51 02 c0       	push   0xc00251b0
c0018b44:	e8 b7 66 00 00       	call   c001f200 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018b49:	c7 04 24 b0 51 02 c0 	mov    DWORD PTR [esp],0xc00251b0
c0018b50:	89 c3                	mov    ebx,eax
c0018b52:	e8 cd 66 00 00       	call   c001f224 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018b57:	c7 04 24 6d 24 02 c0 	mov    DWORD PTR [esp],0xc002246d
c0018b5e:	e8 bc 65 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0018b63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018b66:	e8 e0 fc ff ff       	call   c001884b <cleanupTerminatedTask(ThreadControlBlock*)>
c0018b6b:	c7 04 24 86 24 02 c0 	mov    DWORD PTR [esp],0xc0022486
c0018b72:	e8 a8 65 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0018b77:	83 c4 10             	add    esp,0x10
c0018b7a:	eb ac                	jmp    c0018b28 <cleanerTaskFunction(void*)+0x39>
c0018b7c:	e8 0d f6 ff ff       	call   c001818e <unlockScheduler()>
c0018b81:	e8 bf f9 ff ff       	call   c0018545 <unlockStuff()>
c0018b86:	e8 01 f6 ff ff       	call   c001818c <lockScheduler()>
c0018b8b:	80 3d 8c 51 02 c0 00 	cmp    BYTE PTR ds:0xc002518c,0x0
c0018b92:	0f 84 72 ff ff ff    	je     c0018b0a <cleanerTaskFunction(void*)+0x1b>
c0018b98:	e8 f1 f5 ff ff       	call   c001818e <unlockScheduler()>
c0018b9d:	e9 75 ff ff ff       	jmp    c0018b17 <cleanerTaskFunction(void*)+0x28>

c0018ba2 <terminateTask(int)>:
c0018ba2:	83 ec 14             	sub    esp,0x14
c0018ba5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018baa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018bad:	83 c0 0c             	add    eax,0xc
c0018bb0:	50                   	push   eax
c0018bb1:	68 c4 27 02 c0       	push   0xc00227c4
c0018bb6:	e8 64 65 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0018bbb:	e8 f3 f5 ff ff       	call   c00181b3 <lockStuff()>
c0018bc0:	e8 c7 f5 ff ff       	call   c001818c <lockScheduler()>
c0018bc5:	c7 04 24 99 24 02 c0 	mov    DWORD PTR [esp],0xc0022499
c0018bcc:	e8 4e 65 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0018bd1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018bd5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018bda:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0018bdd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018be2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0018be5:	5a                   	pop    edx
c0018be6:	59                   	pop    ecx
c0018be7:	50                   	push   eax
c0018be8:	68 b0 51 02 c0       	push   0xc00251b0
c0018bed:	e8 e0 66 00 00       	call   c001f2d2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018bf2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018bf7:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0018bfe:	c7 04 24 b3 24 02 c0 	mov    DWORD PTR [esp],0xc00224b3
c0018c05:	e8 15 65 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0018c0a:	83 c4 10             	add    esp,0x10
c0018c0d:	a1 88 51 02 c0       	mov    eax,ds:0xc0025188
c0018c12:	85 c0                	test   eax,eax
c0018c14:	74 5a                	je     c0018c70 <terminateTask(int)+0xce>
c0018c16:	83 ec 0c             	sub    esp,0xc
c0018c19:	68 cd 24 02 c0       	push   0xc00224cd
c0018c1e:	e8 fc 64 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0018c23:	58                   	pop    eax
c0018c24:	c6 05 8c 51 02 c0 01 	mov    BYTE PTR ds:0xc002518c,0x1
c0018c2b:	ff 35 88 51 02 c0    	push   DWORD PTR ds:0xc0025188
c0018c31:	e8 66 fb ff ff       	call   c001879c <unblockTask(ThreadControlBlock*)>
c0018c36:	c7 04 24 e7 24 02 c0 	mov    DWORD PTR [esp],0xc00224e7
c0018c3d:	e8 dd 64 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0018c42:	83 c4 10             	add    esp,0x10
c0018c45:	e8 44 f5 ff ff       	call   c001818e <unlockScheduler()>
c0018c4a:	e8 f6 f8 ff ff       	call   c0018545 <unlockStuff()>
c0018c4f:	83 ec 0c             	sub    esp,0xc
c0018c52:	68 1f 25 02 c0       	push   0xc002251f
c0018c57:	e8 c3 64 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0018c5c:	83 c4 10             	add    esp,0x10
c0018c5f:	e8 28 f5 ff ff       	call   c001818c <lockScheduler()>
c0018c64:	e8 57 f8 ff ff       	call   c00184c0 <schedule()>
c0018c69:	e8 20 f5 ff ff       	call   c001818e <unlockScheduler()>
c0018c6e:	eb ef                	jmp    c0018c5f <terminateTask(int)+0xbd>
c0018c70:	83 ec 0c             	sub    esp,0xc
c0018c73:	68 01 25 02 c0       	push   0xc0022501
c0018c78:	e8 a2 64 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0018c7d:	83 c4 10             	add    esp,0x10
c0018c80:	eb c3                	jmp    c0018c45 <terminateTask(int)+0xa3>

c0018c82 <Thr::terminateFromIRQ(int)>:
c0018c82:	83 ec 18             	sub    esp,0x18
c0018c85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018c89:	e8 14 ff ff ff       	call   c0018ba2 <terminateTask(int)>

c0018c8e <Semaphore::release()>:
c0018c8e:	83 ec 0c             	sub    esp,0xc
c0018c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c95:	e8 19 f5 ff ff       	call   c00181b3 <lockStuff()>
c0018c9a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018c9d:	85 d2                	test   edx,edx
c0018c9f:	74 1a                	je     c0018cbb <Semaphore::release()+0x2d>
c0018ca1:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0018ca4:	83 ec 0c             	sub    esp,0xc
c0018ca7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0018caa:	52                   	push   edx
c0018cab:	e8 ec fa ff ff       	call   c001879c <unblockTask(ThreadControlBlock*)>
c0018cb0:	83 c4 10             	add    esp,0x10
c0018cb3:	83 c4 0c             	add    esp,0xc
c0018cb6:	e9 8a f8 ff ff       	jmp    c0018545 <unlockStuff()>
c0018cbb:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c0018cbe:	83 c4 0c             	add    esp,0xc
c0018cc1:	e9 7f f8 ff ff       	jmp    c0018545 <unlockStuff()>

c0018cc6 <__static_initialization_and_destruction_0(int, int)>:
c0018cc6:	83 ec 0c             	sub    esp,0xc
c0018cc9:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018cce:	0f 85 88 00 00 00    	jne    c0018d5c <__static_initialization_and_destruction_0(int, int)+0x96>
c0018cd4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0018cdc:	75 7e                	jne    c0018d5c <__static_initialization_and_destruction_0(int, int)+0x96>
c0018cde:	83 ec 0c             	sub    esp,0xc
c0018ce1:	68 c8 51 02 c0       	push   0xc00251c8
c0018ce6:	e8 cd 67 00 00       	call   c001f4b8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018ceb:	83 c4 10             	add    esp,0x10
c0018cee:	83 ec 04             	sub    esp,0x4
c0018cf1:	68 a8 31 02 c0       	push   0xc00231a8
c0018cf6:	68 c8 51 02 c0       	push   0xc00251c8
c0018cfb:	68 78 f4 01 c0       	push   0xc001f478
c0018d00:	e8 b6 62 ff ff       	call   c000efbb <__cxa_atexit>
c0018d05:	83 c4 10             	add    esp,0x10
c0018d08:	83 ec 0c             	sub    esp,0xc
c0018d0b:	68 bc 51 02 c0       	push   0xc00251bc
c0018d10:	e8 a3 67 00 00       	call   c001f4b8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018d15:	83 c4 10             	add    esp,0x10
c0018d18:	83 ec 04             	sub    esp,0x4
c0018d1b:	68 a8 31 02 c0       	push   0xc00231a8
c0018d20:	68 bc 51 02 c0       	push   0xc00251bc
c0018d25:	68 78 f4 01 c0       	push   0xc001f478
c0018d2a:	e8 8c 62 ff ff       	call   c000efbb <__cxa_atexit>
c0018d2f:	83 c4 10             	add    esp,0x10
c0018d32:	83 ec 0c             	sub    esp,0xc
c0018d35:	68 b0 51 02 c0       	push   0xc00251b0
c0018d3a:	e8 79 67 00 00       	call   c001f4b8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018d3f:	83 c4 10             	add    esp,0x10
c0018d42:	83 ec 04             	sub    esp,0x4
c0018d45:	68 a8 31 02 c0       	push   0xc00231a8
c0018d4a:	68 b0 51 02 c0       	push   0xc00251b0
c0018d4f:	68 78 f4 01 c0       	push   0xc001f478
c0018d54:	e8 62 62 ff ff       	call   c000efbb <__cxa_atexit>
c0018d59:	83 c4 10             	add    esp,0x10
c0018d5c:	90                   	nop
c0018d5d:	83 c4 0c             	add    esp,0xc
c0018d60:	c3                   	ret    

c0018d61 <_GLOBAL__sub_I_kernelProcess>:
c0018d61:	83 ec 0c             	sub    esp,0xc
c0018d64:	83 ec 08             	sub    esp,0x8
c0018d67:	68 ff ff 00 00       	push   0xffff
c0018d6c:	6a 01                	push   0x1
c0018d6e:	e8 53 ff ff ff       	call   c0018cc6 <__static_initialization_and_destruction_0(int, int)>
c0018d73:	83 c4 10             	add    esp,0x10
c0018d76:	83 c4 0c             	add    esp,0xc
c0018d79:	c3                   	ret    

c0018d7a <Vm::vm8086EntryPoint(void*)>:
c0018d7a:	83 ec 0c             	sub    esp,0xc
c0018d7d:	e8 0c f4 ff ff       	call   c001818e <unlockScheduler()>
c0018d82:	fb                   	sti    
c0018d83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d88:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0018d8c:	52                   	push   edx
c0018d8d:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0018d91:	52                   	push   edx
c0018d92:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018d96:	52                   	push   edx
c0018d97:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0018d9b:	50                   	push   eax
c0018d9c:	e8 14 74 fe ff       	call   c00001b5 <goToVM86>
c0018da1:	83 c4 1c             	add    esp,0x1c
c0018da4:	c3                   	ret    

c0018da5 <Vm::inbv(unsigned short)>:
c0018da5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018da9:	ec                   	in     al,dx
c0018daa:	c3                   	ret    

c0018dab <Vm::outbv(unsigned short, unsigned char)>:
c0018dab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018daf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018db3:	ee                   	out    dx,al
c0018db4:	c3                   	ret    

c0018db5 <Vm::realToLinear(unsigned short, unsigned short)>:
c0018db5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018dba:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018dbf:	c1 e0 04             	shl    eax,0x4
c0018dc2:	01 d0                	add    eax,edx
c0018dc4:	c3                   	ret    

c0018dc5 <Vm::getSegment(unsigned int)>:
c0018dc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018dc9:	c1 e8 10             	shr    eax,0x10
c0018dcc:	c3                   	ret    

c0018dcd <Vm::getOffset(unsigned int)>:
c0018dcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018dd1:	c3                   	ret    

c0018dd2 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0018dd2:	55                   	push   ebp
c0018dd3:	57                   	push   edi
c0018dd4:	56                   	push   esi
c0018dd5:	53                   	push   ebx
c0018dd6:	83 ec 2c             	sub    esp,0x2c
c0018dd9:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0018ddd:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0018de1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018de5:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0018de9:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0018ded:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0018df1:	e8 96 f3 ff ff       	call   c001818c <lockScheduler()>
c0018df6:	68 80 00 00 00       	push   0x80
c0018dfb:	6a 00                	push   0x0
c0018dfd:	68 7a 8d 01 c0       	push   0xc0018d7a
c0018e02:	55                   	push   ebp
c0018e03:	e8 ae f4 ff ff       	call   c00182b6 <Process::createThread(void (*)(void*), void*, int)>
c0018e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e0c:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c0018e10:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c0018e14:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c0018e18:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c0018e1c:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0018e20:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018e27:	e8 04 62 ff ff       	call   c000f030 <operator new(unsigned long)>
c0018e2c:	83 c4 0c             	add    esp,0xc
c0018e2f:	89 c3                	mov    ebx,eax
c0018e31:	55                   	push   ebp
c0018e32:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018e36:	50                   	push   eax
c0018e37:	e8 12 68 ff ff       	call   c000f64e <File::File(char const*, Process*)>
c0018e3c:	83 c4 0c             	add    esp,0xc
c0018e3f:	8d 44 24 17          	lea    eax,[esp+0x17]
c0018e43:	50                   	push   eax
c0018e44:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018e48:	50                   	push   eax
c0018e49:	53                   	push   ebx
c0018e4a:	e8 0f 6b ff ff       	call   c000f95e <File::stat(unsigned long long*, bool*)>
c0018e4f:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c0018e53:	83 c4 10             	add    esp,0x10
c0018e56:	84 d2                	test   dl,dl
c0018e58:	74 1c                	je     c0018e76 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c0018e5a:	83 ec 0c             	sub    esp,0xc
c0018e5d:	68 e3 27 02 c0       	push   0xc00227e3
c0018e62:	e8 b7 c3 ff ff       	call   c001521e <Krnl::panic(char const*)>
c0018e67:	e8 22 f3 ff ff       	call   c001818e <unlockScheduler()>
c0018e6c:	83 c4 10             	add    esp,0x10
c0018e6f:	31 d2                	xor    edx,edx
c0018e71:	e9 81 00 00 00       	jmp    c0018ef7 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0018e76:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018e7a:	51                   	push   ecx
c0018e7b:	51                   	push   ecx
c0018e7c:	6a 01                	push   0x1
c0018e7e:	53                   	push   ebx
c0018e7f:	e8 2e 68 ff ff       	call   c000f6b2 <File::open(FileOpenMode)>
c0018e84:	83 c4 10             	add    esp,0x10
c0018e87:	85 c0                	test   eax,eax
c0018e89:	74 1b                	je     c0018ea6 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0018e8b:	83 ec 0c             	sub    esp,0xc
c0018e8e:	68 fc 27 02 c0       	push   0xc00227fc
c0018e93:	e8 86 c3 ff ff       	call   c001521e <Krnl::panic(char const*)>
c0018e98:	e8 f1 f2 ff ff       	call   c001818e <unlockScheduler()>
c0018e9d:	83 c4 10             	add    esp,0x10
c0018ea0:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018ea4:	eb 51                	jmp    c0018ef7 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0018ea6:	83 ec 0c             	sub    esp,0xc
c0018ea9:	0f b7 ff             	movzx  edi,di
c0018eac:	6a 07                	push   0x7
c0018eae:	0f b7 f6             	movzx  esi,si
c0018eb1:	68 00 01 00 00       	push   0x100
c0018eb6:	6a 00                	push   0x0
c0018eb8:	6a 00                	push   0x0
c0018eba:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c0018ec0:	e8 47 5c ff ff       	call   c000eb0c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018ec5:	83 c4 18             	add    esp,0x18
c0018ec8:	57                   	push   edi
c0018ec9:	56                   	push   esi
c0018eca:	e8 e6 fe ff ff       	call   c0018db5 <Vm::realToLinear(unsigned short, unsigned short)>
c0018ecf:	5a                   	pop    edx
c0018ed0:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018ed2:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0018ed6:	51                   	push   ecx
c0018ed7:	50                   	push   eax
c0018ed8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018edc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018ee0:	53                   	push   ebx
c0018ee1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018ee4:	83 c4 14             	add    esp,0x14
c0018ee7:	53                   	push   ebx
c0018ee8:	e8 23 68 ff ff       	call   c000f710 <File::close()>
c0018eed:	e8 9c f2 ff ff       	call   c001818e <unlockScheduler()>
c0018ef2:	83 c4 10             	add    esp,0x10
c0018ef5:	b2 01                	mov    dl,0x1
c0018ef7:	83 c4 2c             	add    esp,0x2c
c0018efa:	88 d0                	mov    al,dl
c0018efc:	5b                   	pop    ebx
c0018efd:	5e                   	pop    esi
c0018efe:	5f                   	pop    edi
c0018eff:	5d                   	pop    ebp
c0018f00:	c3                   	ret    

c0018f01 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0018f01:	57                   	push   edi
c0018f02:	56                   	push   esi
c0018f03:	53                   	push   ebx
c0018f04:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018f08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018f0c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018f10:	83 e8 06             	sub    eax,0x6
c0018f13:	0f b7 c0             	movzx  eax,ax
c0018f16:	50                   	push   eax
c0018f17:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0018f1c:	50                   	push   eax
c0018f1d:	e8 93 fe ff ff       	call   c0018db5 <Vm::realToLinear(unsigned short, unsigned short)>
c0018f22:	5a                   	pop    edx
c0018f23:	5e                   	pop    esi
c0018f24:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018f27:	8d 56 fa             	lea    edx,[esi-0x6]
c0018f2a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018f30:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0018f33:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0018f36:	83 c2 02             	add    edx,0x2
c0018f39:	66 89 10             	mov    WORD PTR [eax],dx
c0018f3c:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0018f3f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0018f43:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0018f46:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0018f4a:	89 d6                	mov    esi,edx
c0018f4c:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0018f52:	66 81 e6 ff fd       	and    si,0xfdff
c0018f57:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c0018f5b:	74 07                	je     c0018f64 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0018f5d:	89 d6                	mov    esi,edx
c0018f5f:	66 81 ce 00 02       	or     si,0x200
c0018f64:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0018f68:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f6d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018f71:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0018f79:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018f7c:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018f84:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018f87:	5b                   	pop    ebx
c0018f88:	5e                   	pop    esi
c0018f89:	5f                   	pop    edi
c0018f8a:	c3                   	ret    

c0018f8b <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0018f8b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018f90:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018f95:	c1 e0 04             	shl    eax,0x4
c0018f98:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018f9b:	c3                   	ret    

c0018f9c <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0018f9c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018fa1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018fa6:	c1 e0 04             	shl    eax,0x4
c0018fa9:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018fad:	c3                   	ret    

c0018fae <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0018fae:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018fb3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018fb8:	c1 e0 04             	shl    eax,0x4
c0018fbb:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0018fbe:	c3                   	ret    

c0018fbf <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018fbf:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018fc4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018fc9:	c1 e0 04             	shl    eax,0x4
c0018fcc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018fd0:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018fd3:	c3                   	ret    

c0018fd4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018fd4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018fd9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018fde:	c1 e0 04             	shl    eax,0x4
c0018fe1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018fe5:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018fe9:	c3                   	ret    

c0018fea <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018fea:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018fef:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018ff4:	c1 e0 04             	shl    eax,0x4
c0018ff7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018ffb:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0018ffe:	c3                   	ret    

c0018fff <Vm::faultHandler(regs*)>:
c0018fff:	55                   	push   ebp
c0019000:	57                   	push   edi
c0019001:	56                   	push   esi
c0019002:	53                   	push   ebx
c0019003:	83 ec 1c             	sub    esp,0x1c
c0019006:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001900a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001900d:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0019011:	0f b7 f0             	movzx  esi,ax
c0019014:	52                   	push   edx
c0019015:	0f b7 c0             	movzx  eax,ax
c0019018:	50                   	push   eax
c0019019:	e8 97 fd ff ff       	call   c0018db5 <Vm::realToLinear(unsigned short, unsigned short)>
c001901e:	5a                   	pop    edx
c001901f:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0019022:	59                   	pop    ecx
c0019023:	89 c7                	mov    edi,eax
c0019025:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019028:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001902c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019031:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019035:	0f b7 c5             	movzx  eax,bp
c0019038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001903c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0019040:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019044:	e8 6c fd ff ff       	call   c0018db5 <Vm::realToLinear(unsigned short, unsigned short)>
c0019049:	5a                   	pop    edx
c001904a:	59                   	pop    ecx
c001904b:	b1 06                	mov    cl,0x6
c001904d:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0019052:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0019057:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c001905a:	80 fa 9d             	cmp    dl,0x9d
c001905d:	0f 84 1d 02 00 00    	je     c0019280 <Vm::faultHandler(regs*)+0x281>
c0019063:	0f 87 8e 00 00 00    	ja     c00190f7 <Vm::faultHandler(regs*)+0xf8>
c0019069:	80 fa 66             	cmp    dl,0x66
c001906c:	0f 84 89 01 00 00    	je     c00191fb <Vm::faultHandler(regs*)+0x1fc>
c0019072:	77 44                	ja     c00190b8 <Vm::faultHandler(regs*)+0xb9>
c0019074:	80 fa 36             	cmp    dl,0x36
c0019077:	0f 84 74 01 00 00    	je     c00191f1 <Vm::faultHandler(regs*)+0x1f2>
c001907d:	77 1a                	ja     c0019099 <Vm::faultHandler(regs*)+0x9a>
c001907f:	80 fa 26             	cmp    dl,0x26
c0019082:	0f 84 4b 01 00 00    	je     c00191d3 <Vm::faultHandler(regs*)+0x1d4>
c0019088:	80 fa 2e             	cmp    dl,0x2e
c001908b:	0f 85 4a 05 00 00    	jne    c00195db <Vm::faultHandler(regs*)+0x5dc>
c0019091:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019094:	31 c9                	xor    ecx,ecx
c0019096:	47                   	inc    edi
c0019097:	eb be                	jmp    c0019057 <Vm::faultHandler(regs*)+0x58>
c0019099:	80 fa 64             	cmp    dl,0x64
c001909c:	0f 84 3b 01 00 00    	je     c00191dd <Vm::faultHandler(regs*)+0x1de>
c00190a2:	0f 87 3f 01 00 00    	ja     c00191e7 <Vm::faultHandler(regs*)+0x1e8>
c00190a8:	80 fa 3e             	cmp    dl,0x3e
c00190ab:	0f 85 2a 05 00 00    	jne    c00195db <Vm::faultHandler(regs*)+0x5dc>
c00190b1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00190b4:	b1 01                	mov    cl,0x1
c00190b6:	eb de                	jmp    c0019096 <Vm::faultHandler(regs*)+0x97>
c00190b8:	80 fa 6d             	cmp    dl,0x6d
c00190bb:	0f 84 bf 02 00 00    	je     c0019380 <Vm::faultHandler(regs*)+0x381>
c00190c1:	77 17                	ja     c00190da <Vm::faultHandler(regs*)+0xdb>
c00190c3:	80 fa 67             	cmp    dl,0x67
c00190c6:	0f 84 3c 01 00 00    	je     c0019208 <Vm::faultHandler(regs*)+0x209>
c00190cc:	80 fa 6c             	cmp    dl,0x6c
c00190cf:	0f 84 5d 02 00 00    	je     c0019332 <Vm::faultHandler(regs*)+0x333>
c00190d5:	e9 01 05 00 00       	jmp    c00195db <Vm::faultHandler(regs*)+0x5dc>
c00190da:	80 fa 6f             	cmp    dl,0x6f
c00190dd:	0f 84 8b 03 00 00    	je     c001946e <Vm::faultHandler(regs*)+0x46f>
c00190e3:	0f 82 0f 03 00 00    	jb     c00193f8 <Vm::faultHandler(regs*)+0x3f9>
c00190e9:	80 fa 9c             	cmp    dl,0x9c
c00190ec:	0f 84 23 01 00 00    	je     c0019215 <Vm::faultHandler(regs*)+0x216>
c00190f2:	e9 e4 04 00 00       	jmp    c00195db <Vm::faultHandler(regs*)+0x5dc>
c00190f7:	80 fa ec             	cmp    dl,0xec
c00190fa:	0f 84 7f 04 00 00    	je     c001957f <Vm::faultHandler(regs*)+0x580>
c0019100:	77 7b                	ja     c001917d <Vm::faultHandler(regs*)+0x17e>
c0019102:	80 fa e4             	cmp    dl,0xe4
c0019105:	0f 84 fe 03 00 00    	je     c0019509 <Vm::faultHandler(regs*)+0x50a>
c001910b:	77 53                	ja     c0019160 <Vm::faultHandler(regs*)+0x161>
c001910d:	80 fa cd             	cmp    dl,0xcd
c0019110:	0f 84 cd 01 00 00    	je     c00192e3 <Vm::faultHandler(regs*)+0x2e4>
c0019116:	80 fa cf             	cmp    dl,0xcf
c0019119:	0f 85 bc 04 00 00    	jne    c00195db <Vm::faultHandler(regs*)+0x5dc>
c001911f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019122:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0019125:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0019129:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001912c:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0019130:	81 ca 00 02 02 00    	or     edx,0x20200
c0019136:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019139:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001913d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019143:	66 c1 e8 09          	shr    ax,0x9
c0019147:	83 e0 01             	and    eax,0x1
c001914a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001914d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019150:	83 c0 06             	add    eax,0x6
c0019153:	25 ff ff 00 00       	and    eax,0xffff
c0019158:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001915b:	e9 77 04 00 00       	jmp    c00195d7 <Vm::faultHandler(regs*)+0x5d8>
c0019160:	80 fa e6             	cmp    dl,0xe6
c0019163:	0f 84 ea 03 00 00    	je     c0019553 <Vm::faultHandler(regs*)+0x554>
c0019169:	0f 82 b6 03 00 00    	jb     c0019525 <Vm::faultHandler(regs*)+0x526>
c001916f:	80 fa e7             	cmp    dl,0xe7
c0019172:	0f 84 f2 03 00 00    	je     c001956a <Vm::faultHandler(regs*)+0x56b>
c0019178:	e9 5e 04 00 00       	jmp    c00195db <Vm::faultHandler(regs*)+0x5dc>
c001917d:	80 fa ef             	cmp    dl,0xef
c0019180:	0f 84 3c 04 00 00    	je     c00195c2 <Vm::faultHandler(regs*)+0x5c3>
c0019186:	77 28                	ja     c00191b0 <Vm::faultHandler(regs*)+0x1b1>
c0019188:	80 fa ed             	cmp    dl,0xed
c001918b:	0f 84 0a 04 00 00    	je     c001959b <Vm::faultHandler(regs*)+0x59c>
c0019191:	80 fa ee             	cmp    dl,0xee
c0019194:	0f 85 41 04 00 00    	jne    c00195db <Vm::faultHandler(regs*)+0x5dc>
c001919a:	50                   	push   eax
c001919b:	50                   	push   eax
c001919c:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00191a0:	50                   	push   eax
c00191a1:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00191a5:	50                   	push   eax
c00191a6:	e8 00 fc ff ff       	call   c0018dab <Vm::outbv(unsigned short, unsigned char)>
c00191ab:	e9 0a 04 00 00       	jmp    c00195ba <Vm::faultHandler(regs*)+0x5bb>
c00191b0:	80 fa fa             	cmp    dl,0xfa
c00191b3:	0f 84 5d 01 00 00    	je     c0019316 <Vm::faultHandler(regs*)+0x317>
c00191b9:	80 fa fb             	cmp    dl,0xfb
c00191bc:	0f 84 62 01 00 00    	je     c0019324 <Vm::faultHandler(regs*)+0x325>
c00191c2:	80 fa f3             	cmp    dl,0xf3
c00191c5:	0f 85 10 04 00 00    	jne    c00195db <Vm::faultHandler(regs*)+0x5dc>
c00191cb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00191ce:	e9 c3 fe ff ff       	jmp    c0019096 <Vm::faultHandler(regs*)+0x97>
c00191d3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00191d6:	b1 02                	mov    cl,0x2
c00191d8:	e9 b9 fe ff ff       	jmp    c0019096 <Vm::faultHandler(regs*)+0x97>
c00191dd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00191e0:	b1 03                	mov    cl,0x3
c00191e2:	e9 af fe ff ff       	jmp    c0019096 <Vm::faultHandler(regs*)+0x97>
c00191e7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00191ea:	b1 04                	mov    cl,0x4
c00191ec:	e9 a5 fe ff ff       	jmp    c0019096 <Vm::faultHandler(regs*)+0x97>
c00191f1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00191f4:	b1 05                	mov    cl,0x5
c00191f6:	e9 9b fe ff ff       	jmp    c0019096 <Vm::faultHandler(regs*)+0x97>
c00191fb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00191fe:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019203:	e9 8e fe ff ff       	jmp    c0019096 <Vm::faultHandler(regs*)+0x97>
c0019208:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001920b:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0019210:	e9 81 fe ff ff       	jmp    c0019096 <Vm::faultHandler(regs*)+0x97>
c0019215:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019218:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001921c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019221:	74 30                	je     c0019253 <Vm::faultHandler(regs*)+0x254>
c0019223:	83 e9 04             	sub    ecx,0x4
c0019226:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001922c:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019232:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019235:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019238:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001923e:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019242:	0f 84 8c 03 00 00    	je     c00195d4 <Vm::faultHandler(regs*)+0x5d5>
c0019248:	80 ce 02             	or     dh,0x2
c001924b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001924e:	e9 81 03 00 00       	jmp    c00195d4 <Vm::faultHandler(regs*)+0x5d5>
c0019253:	83 e9 02             	sub    ecx,0x2
c0019256:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001925c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001925f:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019263:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019269:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001926d:	74 05                	je     c0019274 <Vm::faultHandler(regs*)+0x275>
c001926f:	80 ce 02             	or     dh,0x2
c0019272:	eb 03                	jmp    c0019277 <Vm::faultHandler(regs*)+0x278>
c0019274:	80 e6 fd             	and    dh,0xfd
c0019277:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001927b:	e9 54 03 00 00       	jmp    c00195d4 <Vm::faultHandler(regs*)+0x5d5>
c0019280:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019285:	74 2a                	je     c00192b1 <Vm::faultHandler(regs*)+0x2b2>
c0019287:	8b 10                	mov    edx,DWORD PTR [eax]
c0019289:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001928f:	81 ca 00 02 02 00    	or     edx,0x20200
c0019295:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019298:	8b 00                	mov    eax,DWORD PTR [eax]
c001929a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00192a0:	c1 e8 09             	shr    eax,0x9
c00192a3:	83 e0 01             	and    eax,0x1
c00192a6:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00192a9:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00192ac:	83 c0 04             	add    eax,0x4
c00192af:	eb 25                	jmp    c00192d6 <Vm::faultHandler(regs*)+0x2d7>
c00192b1:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00192b4:	81 ca 00 02 02 00    	or     edx,0x20200
c00192ba:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00192bd:	66 8b 00             	mov    ax,WORD PTR [eax]
c00192c0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00192c6:	66 c1 e8 09          	shr    ax,0x9
c00192ca:	83 e0 01             	and    eax,0x1
c00192cd:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00192d0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00192d3:	83 c0 02             	add    eax,0x2
c00192d6:	25 ff ff 00 00       	and    eax,0xffff
c00192db:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00192de:	e9 f1 02 00 00       	jmp    c00195d4 <Vm::faultHandler(regs*)+0x5d5>
c00192e3:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00192e7:	3c ff                	cmp    al,0xff
c00192e9:	75 10                	jne    c00192fb <Vm::faultHandler(regs*)+0x2fc>
c00192eb:	83 ec 0c             	sub    esp,0xc
c00192ee:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00192f1:	e8 8c f9 ff ff       	call   c0018c82 <Thr::terminateFromIRQ(int)>
c00192f6:	e9 c2 02 00 00       	jmp    c00195bd <Vm::faultHandler(regs*)+0x5be>
c00192fb:	83 ec 0c             	sub    esp,0xc
c00192fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019302:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019306:	57                   	push   edi
c0019307:	50                   	push   eax
c0019308:	53                   	push   ebx
c0019309:	e8 f3 fb ff ff       	call   c0018f01 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001930e:	83 c4 20             	add    esp,0x20
c0019311:	e9 c1 02 00 00       	jmp    c00195d7 <Vm::faultHandler(regs*)+0x5d8>
c0019316:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001931b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001931f:	e9 b0 02 00 00       	jmp    c00195d4 <Vm::faultHandler(regs*)+0x5d5>
c0019324:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019329:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001932d:	e9 a2 02 00 00       	jmp    c00195d4 <Vm::faultHandler(regs*)+0x5d5>
c0019332:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019337:	74 0d                	je     c0019346 <Vm::faultHandler(regs*)+0x347>
c0019339:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0019340:	0f 87 e9 02 00 00    	ja     c001962f <Vm::faultHandler(regs*)+0x630>
c0019346:	83 ec 0c             	sub    esp,0xc
c0019349:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001934c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019350:	50                   	push   eax
c0019351:	e8 4f fa ff ff       	call   c0018da5 <Vm::inbv(unsigned short)>
c0019356:	83 c4 0c             	add    esp,0xc
c0019359:	0f b6 c0             	movzx  eax,al
c001935c:	0f b7 c9             	movzx  ecx,cx
c001935f:	50                   	push   eax
c0019360:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0019364:	50                   	push   eax
c0019365:	51                   	push   ecx
c0019366:	e8 54 fc ff ff       	call   c0018fbf <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001936b:	83 c4 10             	add    esp,0x10
c001936e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019371:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019375:	74 03                	je     c001937a <Vm::faultHandler(regs*)+0x37b>
c0019377:	48                   	dec    eax
c0019378:	eb 01                	jmp    c001937b <Vm::faultHandler(regs*)+0x37c>
c001937a:	40                   	inc    eax
c001937b:	0f b7 c0             	movzx  eax,ax
c001937e:	eb 70                	jmp    c00193f0 <Vm::faultHandler(regs*)+0x3f1>
c0019380:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019383:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0019386:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001938b:	74 0c                	je     c0019399 <Vm::faultHandler(regs*)+0x39a>
c001938d:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019393:	0f 87 96 02 00 00    	ja     c001962f <Vm::faultHandler(regs*)+0x630>
c0019399:	0f b7 c9             	movzx  ecx,cx
c001939c:	0f b7 f6             	movzx  esi,si
c001939f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00193a2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00193a7:	74 20                	je     c00193c9 <Vm::faultHandler(regs*)+0x3ca>
c00193a9:	ed                   	in     eax,dx
c00193aa:	55                   	push   ebp
c00193ab:	50                   	push   eax
c00193ac:	51                   	push   ecx
c00193ad:	56                   	push   esi
c00193ae:	e8 37 fc ff ff       	call   c0018fea <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00193b3:	83 c4 10             	add    esp,0x10
c00193b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00193b9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00193bd:	74 05                	je     c00193c4 <Vm::faultHandler(regs*)+0x3c5>
c00193bf:	83 e8 04             	sub    eax,0x4
c00193c2:	eb 27                	jmp    c00193eb <Vm::faultHandler(regs*)+0x3ec>
c00193c4:	83 c0 04             	add    eax,0x4
c00193c7:	eb 22                	jmp    c00193eb <Vm::faultHandler(regs*)+0x3ec>
c00193c9:	66 ed                	in     ax,dx
c00193cb:	0f b7 c0             	movzx  eax,ax
c00193ce:	57                   	push   edi
c00193cf:	50                   	push   eax
c00193d0:	51                   	push   ecx
c00193d1:	56                   	push   esi
c00193d2:	e8 fd fb ff ff       	call   c0018fd4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00193d7:	83 c4 10             	add    esp,0x10
c00193da:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00193dd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00193e1:	74 05                	je     c00193e8 <Vm::faultHandler(regs*)+0x3e9>
c00193e3:	83 e8 02             	sub    eax,0x2
c00193e6:	eb 03                	jmp    c00193eb <Vm::faultHandler(regs*)+0x3ec>
c00193e8:	83 c0 02             	add    eax,0x2
c00193eb:	25 ff ff 00 00       	and    eax,0xffff
c00193f0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00193f3:	e9 dc 01 00 00       	jmp    c00195d4 <Vm::faultHandler(regs*)+0x5d5>
c00193f8:	49                   	dec    ecx
c00193f9:	80 f9 05             	cmp    cl,0x5
c00193fc:	77 24                	ja     c0019422 <Vm::faultHandler(regs*)+0x423>
c00193fe:	0f b6 c9             	movzx  ecx,cl
c0019401:	ff 24 8d 44 28 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdd7bc]
c0019408:	0f b7 f5             	movzx  esi,bp
c001940b:	eb 15                	jmp    c0019422 <Vm::faultHandler(regs*)+0x423>
c001940d:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0019411:	eb 0f                	jmp    c0019422 <Vm::faultHandler(regs*)+0x423>
c0019413:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0019417:	eb 09                	jmp    c0019422 <Vm::faultHandler(regs*)+0x423>
c0019419:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c001941d:	eb 03                	jmp    c0019422 <Vm::faultHandler(regs*)+0x423>
c001941f:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0019422:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019425:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001942a:	74 0b                	je     c0019437 <Vm::faultHandler(regs*)+0x438>
c001942c:	3d ff ff 00 00       	cmp    eax,0xffff
c0019431:	0f 87 f8 01 00 00    	ja     c001962f <Vm::faultHandler(regs*)+0x630>
c0019437:	0f b7 c0             	movzx  eax,ax
c001943a:	52                   	push   edx
c001943b:	52                   	push   edx
c001943c:	50                   	push   eax
c001943d:	56                   	push   esi
c001943e:	e8 48 fb ff ff       	call   c0018f8b <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019443:	59                   	pop    ecx
c0019444:	0f b6 c0             	movzx  eax,al
c0019447:	5e                   	pop    esi
c0019448:	50                   	push   eax
c0019449:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001944d:	50                   	push   eax
c001944e:	e8 58 f9 ff ff       	call   c0018dab <Vm::outbv(unsigned short, unsigned char)>
c0019453:	83 c4 10             	add    esp,0x10
c0019456:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019459:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001945d:	74 03                	je     c0019462 <Vm::faultHandler(regs*)+0x463>
c001945f:	48                   	dec    eax
c0019460:	eb 01                	jmp    c0019463 <Vm::faultHandler(regs*)+0x464>
c0019462:	40                   	inc    eax
c0019463:	0f b7 c0             	movzx  eax,ax
c0019466:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019469:	e9 66 01 00 00       	jmp    c00195d4 <Vm::faultHandler(regs*)+0x5d5>
c001946e:	49                   	dec    ecx
c001946f:	80 f9 05             	cmp    cl,0x5
c0019472:	77 1f                	ja     c0019493 <Vm::faultHandler(regs*)+0x494>
c0019474:	0f b6 c9             	movzx  ecx,cl
c0019477:	ff 24 8d 5c 28 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdd7a4]
c001947e:	89 ee                	mov    esi,ebp
c0019480:	eb 11                	jmp    c0019493 <Vm::faultHandler(regs*)+0x494>
c0019482:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0019485:	eb 0c                	jmp    c0019493 <Vm::faultHandler(regs*)+0x494>
c0019487:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001948a:	eb 07                	jmp    c0019493 <Vm::faultHandler(regs*)+0x494>
c001948c:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c001948f:	eb 02                	jmp    c0019493 <Vm::faultHandler(regs*)+0x494>
c0019491:	8b 33                	mov    esi,DWORD PTR [ebx]
c0019493:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0019496:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001949b:	74 0c                	je     c00194a9 <Vm::faultHandler(regs*)+0x4aa>
c001949d:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c00194a3:	0f 87 86 01 00 00    	ja     c001962f <Vm::faultHandler(regs*)+0x630>
c00194a9:	0f b7 d6             	movzx  edx,si
c00194ac:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c00194af:	0f b7 c1             	movzx  eax,cx
c00194b2:	81 e7 00 04 00 00    	and    edi,0x400
c00194b8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00194bb:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00194c0:	74 1d                	je     c00194df <Vm::faultHandler(regs*)+0x4e0>
c00194c2:	55                   	push   ebp
c00194c3:	55                   	push   ebp
c00194c4:	50                   	push   eax
c00194c5:	52                   	push   edx
c00194c6:	e8 e3 fa ff ff       	call   c0018fae <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00194cb:	83 c4 10             	add    esp,0x10
c00194ce:	89 f2                	mov    edx,esi
c00194d0:	ef                   	out    dx,eax
c00194d1:	85 ff                	test   edi,edi
c00194d3:	74 05                	je     c00194da <Vm::faultHandler(regs*)+0x4db>
c00194d5:	83 e9 04             	sub    ecx,0x4
c00194d8:	eb 21                	jmp    c00194fb <Vm::faultHandler(regs*)+0x4fc>
c00194da:	83 c1 04             	add    ecx,0x4
c00194dd:	eb 1c                	jmp    c00194fb <Vm::faultHandler(regs*)+0x4fc>
c00194df:	55                   	push   ebp
c00194e0:	55                   	push   ebp
c00194e1:	50                   	push   eax
c00194e2:	52                   	push   edx
c00194e3:	e8 b4 fa ff ff       	call   c0018f9c <Vm::readWordFromReal(unsigned short, unsigned short)>
c00194e8:	83 c4 10             	add    esp,0x10
c00194eb:	89 f2                	mov    edx,esi
c00194ed:	66 ef                	out    dx,ax
c00194ef:	85 ff                	test   edi,edi
c00194f1:	74 05                	je     c00194f8 <Vm::faultHandler(regs*)+0x4f9>
c00194f3:	83 e9 02             	sub    ecx,0x2
c00194f6:	eb 03                	jmp    c00194fb <Vm::faultHandler(regs*)+0x4fc>
c00194f8:	83 c1 02             	add    ecx,0x2
c00194fb:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019501:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0019504:	e9 cb 00 00 00       	jmp    c00195d4 <Vm::faultHandler(regs*)+0x5d5>
c0019509:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019510:	83 ec 0c             	sub    esp,0xc
c0019513:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019517:	50                   	push   eax
c0019518:	e8 88 f8 ff ff       	call   c0018da5 <Vm::inbv(unsigned short)>
c001951d:	0f b6 c0             	movzx  eax,al
c0019520:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019523:	eb 3f                	jmp    c0019564 <Vm::faultHandler(regs*)+0x565>
c0019525:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001952a:	74 07                	je     c0019533 <Vm::faultHandler(regs*)+0x534>
c001952c:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019530:	ed                   	in     eax,dx
c0019531:	eb 14                	jmp    c0019547 <Vm::faultHandler(regs*)+0x548>
c0019533:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0019536:	66 31 c9             	xor    cx,cx
c0019539:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c001953c:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019540:	66 ed                	in     ax,dx
c0019542:	0f b7 c0             	movzx  eax,ax
c0019545:	09 c8                	or     eax,ecx
c0019547:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001954a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001954e:	e9 84 00 00 00       	jmp    c00195d7 <Vm::faultHandler(regs*)+0x5d8>
c0019553:	52                   	push   edx
c0019554:	52                   	push   edx
c0019555:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019559:	50                   	push   eax
c001955a:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001955e:	50                   	push   eax
c001955f:	e8 47 f8 ff ff       	call   c0018dab <Vm::outbv(unsigned short, unsigned char)>
c0019564:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019568:	eb 53                	jmp    c00195bd <Vm::faultHandler(regs*)+0x5be>
c001956a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001956d:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019571:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019576:	74 03                	je     c001957b <Vm::faultHandler(regs*)+0x57c>
c0019578:	ef                   	out    dx,eax
c0019579:	eb cf                	jmp    c001954a <Vm::faultHandler(regs*)+0x54b>
c001957b:	66 ef                	out    dx,ax
c001957d:	eb cb                	jmp    c001954a <Vm::faultHandler(regs*)+0x54b>
c001957f:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019586:	83 ec 0c             	sub    esp,0xc
c0019589:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001958d:	50                   	push   eax
c001958e:	e8 12 f8 ff ff       	call   c0018da5 <Vm::inbv(unsigned short)>
c0019593:	0f b6 c0             	movzx  eax,al
c0019596:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019599:	eb 1f                	jmp    c00195ba <Vm::faultHandler(regs*)+0x5bb>
c001959b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001959e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00195a3:	74 03                	je     c00195a8 <Vm::faultHandler(regs*)+0x5a9>
c00195a5:	ed                   	in     eax,dx
c00195a6:	eb 0d                	jmp    c00195b5 <Vm::faultHandler(regs*)+0x5b6>
c00195a8:	66 ed                	in     ax,dx
c00195aa:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00195ad:	0f b7 c0             	movzx  eax,ax
c00195b0:	66 31 d2             	xor    dx,dx
c00195b3:	09 d0                	or     eax,edx
c00195b5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00195b8:	eb 1a                	jmp    c00195d4 <Vm::faultHandler(regs*)+0x5d5>
c00195ba:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00195bd:	83 c4 10             	add    esp,0x10
c00195c0:	eb 15                	jmp    c00195d7 <Vm::faultHandler(regs*)+0x5d8>
c00195c2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00195c5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00195c8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00195cd:	74 03                	je     c00195d2 <Vm::faultHandler(regs*)+0x5d3>
c00195cf:	ef                   	out    dx,eax
c00195d0:	eb 02                	jmp    c00195d4 <Vm::faultHandler(regs*)+0x5d5>
c00195d2:	66 ef                	out    dx,ax
c00195d4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00195d7:	b0 01                	mov    al,0x1
c00195d9:	eb 56                	jmp    c0019631 <Vm::faultHandler(regs*)+0x632>
c00195db:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c00195df:	50                   	push   eax
c00195e0:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c00195e4:	50                   	push   eax
c00195e5:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c00195e9:	50                   	push   eax
c00195ea:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c00195ee:	50                   	push   eax
c00195ef:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00195f3:	50                   	push   eax
c00195f4:	52                   	push   edx
c00195f5:	52                   	push   edx
c00195f6:	68 15 28 02 c0       	push   0xc0022815
c00195fb:	e8 1f 5b ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0019600:	83 c4 20             	add    esp,0x20
c0019603:	83 ec 0c             	sub    esp,0xc
c0019606:	6a 60                	push   0x60
c0019608:	e8 98 f7 ff ff       	call   c0018da5 <Vm::inbv(unsigned short)>
c001960d:	83 c4 10             	add    esp,0x10
c0019610:	3c 1c                	cmp    al,0x1c
c0019612:	74 04                	je     c0019618 <Vm::faultHandler(regs*)+0x619>
c0019614:	3c 5a                	cmp    al,0x5a
c0019616:	75 eb                	jne    c0019603 <Vm::faultHandler(regs*)+0x604>
c0019618:	3c 5a                	cmp    al,0x5a
c001961a:	74 04                	je     c0019620 <Vm::faultHandler(regs*)+0x621>
c001961c:	3c 1c                	cmp    al,0x1c
c001961e:	75 0f                	jne    c001962f <Vm::faultHandler(regs*)+0x630>
c0019620:	83 ec 0c             	sub    esp,0xc
c0019623:	6a 60                	push   0x60
c0019625:	e8 7b f7 ff ff       	call   c0018da5 <Vm::inbv(unsigned short)>
c001962a:	83 c4 10             	add    esp,0x10
c001962d:	eb e9                	jmp    c0019618 <Vm::faultHandler(regs*)+0x619>
c001962f:	31 c0                	xor    eax,eax
c0019631:	83 c4 1c             	add    esp,0x1c
c0019634:	5b                   	pop    ebx
c0019635:	5e                   	pop    esi
c0019636:	5f                   	pop    edi
c0019637:	5d                   	pop    ebp
c0019638:	c3                   	ret    
c0019639:	90                   	nop

c001963a <FAT::getName()>:
c001963a:	b8 74 28 02 c0       	mov    eax,0xc0022874
c001963f:	c3                   	ret    

c0019640 <FAT::tell(void*, unsigned long long*)>:
c0019640:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019645:	75 06                	jne    c001964d <FAT::tell(void*, unsigned long long*)+0xd>
c0019647:	b8 04 00 00 00       	mov    eax,0x4
c001964c:	c3                   	ret    
c001964d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019652:	75 06                	jne    c001965a <FAT::tell(void*, unsigned long long*)+0x1a>
c0019654:	b8 04 00 00 00       	mov    eax,0x4
c0019659:	c3                   	ret    
c001965a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001965e:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0019661:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019664:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019668:	89 01                	mov    DWORD PTR [ecx],eax
c001966a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001966d:	b8 00 00 00 00       	mov    eax,0x0
c0019672:	c3                   	ret    
c0019673:	90                   	nop

c0019674 <FAT::stat(void*, unsigned long long*)>:
c0019674:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019679:	75 06                	jne    c0019681 <FAT::stat(void*, unsigned long long*)+0xd>
c001967b:	b8 04 00 00 00       	mov    eax,0x4
c0019680:	c3                   	ret    
c0019681:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019686:	75 06                	jne    c001968e <FAT::stat(void*, unsigned long long*)+0x1a>
c0019688:	b8 04 00 00 00       	mov    eax,0x4
c001968d:	c3                   	ret    
c001968e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019692:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019695:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019698:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001969c:	89 01                	mov    DWORD PTR [ecx],eax
c001969e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00196a1:	b8 00 00 00 00       	mov    eax,0x0
c00196a6:	c3                   	ret    
c00196a7:	90                   	nop

c00196a8 <FAT::~FAT()>:
c00196a8:	83 ec 0c             	sub    esp,0xc
c00196ab:	ba f8 28 02 c0       	mov    edx,0xc00228f8
c00196b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196b4:	89 10                	mov    DWORD PTR [eax],edx
c00196b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196ba:	83 ec 0c             	sub    esp,0xc
c00196bd:	50                   	push   eax
c00196be:	e8 85 5d ff ff       	call   c000f448 <Filesystem::~Filesystem()>
c00196c3:	83 c4 10             	add    esp,0x10
c00196c6:	90                   	nop
c00196c7:	83 c4 0c             	add    esp,0xc
c00196ca:	c3                   	ret    
c00196cb:	90                   	nop

c00196cc <FAT::~FAT()>:
c00196cc:	83 ec 0c             	sub    esp,0xc
c00196cf:	83 ec 0c             	sub    esp,0xc
c00196d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00196d6:	e8 cd ff ff ff       	call   c00196a8 <FAT::~FAT()>
c00196db:	83 c4 10             	add    esp,0x10
c00196de:	83 ec 08             	sub    esp,0x8
c00196e1:	6a 08                	push   0x8
c00196e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00196e7:	e8 53 59 ff ff       	call   c000f03f <operator delete(void*, unsigned long)>
c00196ec:	83 c4 10             	add    esp,0x10
c00196ef:	83 c4 0c             	add    esp,0xc
c00196f2:	c3                   	ret    
c00196f3:	90                   	nop

c00196f4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00196f4:	83 ec 1c             	sub    esp,0x1c
c00196f7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00196fe:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019703:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019707:	8b 04 85 20 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdade0]
c001970e:	83 f8 ff             	cmp    eax,0xffffffff
c0019711:	75 34                	jne    c0019747 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0019713:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019717:	88 c2                	mov    dl,al
c0019719:	a1 00 52 02 c0       	mov    eax,ds:0xc0025200
c001971e:	01 d0                	add    eax,edx
c0019720:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019724:	8b 15 00 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025200
c001972a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001972e:	89 14 85 20 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdade0],edx
c0019735:	a1 00 52 02 c0       	mov    eax,ds:0xc0025200
c001973a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001973e:	89 14 85 a0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad60],edx
c0019745:	eb 17                	jmp    c001975e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0019747:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001974b:	88 c2                	mov    dl,al
c001974d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019751:	8b 04 85 20 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdade0]
c0019758:	01 d0                	add    eax,edx
c001975a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001975e:	83 ec 04             	sub    esp,0x4
c0019761:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019765:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019769:	8d 44 24 15          	lea    eax,[esp+0x15]
c001976d:	50                   	push   eax
c001976e:	e8 f2 d2 fe ff       	call   c0006a65 <f_getlabel>
c0019773:	83 c4 10             	add    esp,0x10
c0019776:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001977a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001977f:	75 07                	jne    c0019788 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0019781:	b8 00 00 00 00       	mov    eax,0x0
c0019786:	eb 05                	jmp    c001978d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0019788:	b8 01 00 00 00       	mov    eax,0x1
c001978d:	83 c4 1c             	add    esp,0x1c
c0019790:	c3                   	ret    
c0019791:	90                   	nop

c0019792 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019792:	57                   	push   edi
c0019793:	83 ec 58             	sub    esp,0x58
c0019796:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001979e:	8d 54 24 10          	lea    edx,[esp+0x10]
c00197a2:	b9 0f 00 00 00       	mov    ecx,0xf
c00197a7:	b8 00 00 00 00       	mov    eax,0x0
c00197ac:	fc                   	cld    
c00197ad:	89 d7                	mov    edi,edx
c00197af:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00197b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00197b5:	8b 04 85 20 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdade0]
c00197bc:	83 f8 ff             	cmp    eax,0xffffffff
c00197bf:	75 34                	jne    c00197f5 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00197c1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00197c5:	88 c2                	mov    dl,al
c00197c7:	a1 00 52 02 c0       	mov    eax,ds:0xc0025200
c00197cc:	01 d0                	add    eax,edx
c00197ce:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00197d2:	8b 15 00 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025200
c00197d8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00197dc:	89 14 85 20 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdade0],edx
c00197e3:	a1 00 52 02 c0       	mov    eax,ds:0xc0025200
c00197e8:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00197ec:	89 14 85 a0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad60],edx
c00197f3:	eb 17                	jmp    c001980c <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00197f5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00197f9:	88 c2                	mov    dl,al
c00197fb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00197ff:	8b 04 85 20 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdade0]
c0019806:	01 d0                	add    eax,edx
c0019808:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001980c:	83 ec 08             	sub    esp,0x8
c001980f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019813:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019817:	50                   	push   eax
c0019818:	e8 41 6f fe ff       	call   c000075e <strcat>
c001981d:	83 c4 10             	add    esp,0x10
c0019820:	83 ec 0c             	sub    esp,0xc
c0019823:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019827:	50                   	push   eax
c0019828:	e8 26 d4 fe ff       	call   c0006c53 <f_setlabel>
c001982d:	83 c4 10             	add    esp,0x10
c0019830:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019834:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019839:	75 07                	jne    c0019842 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001983b:	b8 00 00 00 00       	mov    eax,0x0
c0019840:	eb 05                	jmp    c0019847 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0019842:	b8 01 00 00 00       	mov    eax,0x1
c0019847:	83 c4 58             	add    esp,0x58
c001984a:	5f                   	pop    edi
c001984b:	c3                   	ret    

c001984c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001984c:	83 ec 2c             	sub    esp,0x2c
c001984f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019857:	83 ec 08             	sub    esp,0x8
c001985a:	68 98 28 02 c0       	push   0xc0022898
c001985f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019863:	e8 90 6e fe ff       	call   c00006f8 <strcmp>
c0019868:	83 c4 10             	add    esp,0x10
c001986b:	85 c0                	test   eax,eax
c001986d:	0f 94 c0             	sete   al
c0019870:	84 c0                	test   al,al
c0019872:	74 0d                	je     c0019881 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0019874:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001987c:	e9 a6 00 00 00       	jmp    c0019927 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019881:	83 ec 08             	sub    esp,0x8
c0019884:	68 8a 28 02 c0       	push   0xc002288a
c0019889:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001988d:	e8 66 6e fe ff       	call   c00006f8 <strcmp>
c0019892:	83 c4 10             	add    esp,0x10
c0019895:	85 c0                	test   eax,eax
c0019897:	0f 94 c0             	sete   al
c001989a:	84 c0                	test   al,al
c001989c:	74 0a                	je     c00198a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001989e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00198a6:	eb 7f                	jmp    c0019927 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00198a8:	83 ec 08             	sub    esp,0x8
c00198ab:	68 90 28 02 c0       	push   0xc0022890
c00198b0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00198b4:	e8 3f 6e fe ff       	call   c00006f8 <strcmp>
c00198b9:	83 c4 10             	add    esp,0x10
c00198bc:	85 c0                	test   eax,eax
c00198be:	0f 94 c0             	sete   al
c00198c1:	84 c0                	test   al,al
c00198c3:	74 0a                	je     c00198cf <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00198c5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00198cd:	eb 58                	jmp    c0019927 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00198cf:	83 ec 08             	sub    esp,0x8
c00198d2:	68 8c fb 01 c0       	push   0xc001fb8c
c00198d7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00198db:	e8 18 6e fe ff       	call   c00006f8 <strcmp>
c00198e0:	83 c4 10             	add    esp,0x10
c00198e3:	85 c0                	test   eax,eax
c00198e5:	0f 94 c0             	sete   al
c00198e8:	84 c0                	test   al,al
c00198ea:	74 0a                	je     c00198f6 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00198ec:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00198f4:	eb 31                	jmp    c0019927 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00198f6:	83 ec 08             	sub    esp,0x8
c00198f9:	68 96 28 02 c0       	push   0xc0022896
c00198fe:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019902:	e8 f1 6d fe ff       	call   c00006f8 <strcmp>
c0019907:	83 c4 10             	add    esp,0x10
c001990a:	85 c0                	test   eax,eax
c001990c:	0f 94 c0             	sete   al
c001990f:	84 c0                	test   al,al
c0019911:	74 0a                	je     c001991d <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0019913:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001991b:	eb 0a                	jmp    c0019927 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001991d:	b8 08 00 00 00       	mov    eax,0x8
c0019922:	e9 04 01 00 00       	jmp    c0019a2b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019927:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001992e:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019933:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019937:	8b 04 85 20 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdade0]
c001993e:	83 f8 ff             	cmp    eax,0xffffffff
c0019941:	75 34                	jne    c0019977 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0019943:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019947:	88 c2                	mov    dl,al
c0019949:	a1 00 52 02 c0       	mov    eax,ds:0xc0025200
c001994e:	01 d0                	add    eax,edx
c0019950:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019954:	8b 15 00 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025200
c001995a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001995e:	89 14 85 20 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdade0],edx
c0019965:	a1 00 52 02 c0       	mov    eax,ds:0xc0025200
c001996a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001996e:	89 14 85 a0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad60],edx
c0019975:	eb 17                	jmp    c001998e <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0019977:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001997b:	88 c2                	mov    dl,al
c001997d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019981:	8b 04 85 20 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdade0]
c0019988:	01 d0                	add    eax,edx
c001998a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001998e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019992:	88 04 24             	mov    BYTE PTR [esp],al
c0019995:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019999:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001999d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00199a5:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00199aa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00199b2:	83 ec 0c             	sub    esp,0xc
c00199b5:	68 00 20 00 00       	push   0x2000
c00199ba:	e8 ab 25 ff ff       	call   c000bf6a <malloc>
c00199bf:	83 c4 10             	add    esp,0x10
c00199c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00199c6:	68 00 20 00 00       	push   0x2000
c00199cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00199cf:	8d 44 24 08          	lea    eax,[esp+0x8]
c00199d3:	50                   	push   eax
c00199d4:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00199d8:	50                   	push   eax
c00199d9:	e8 c0 d6 fe ff       	call   c000709e <f_mkfs>
c00199de:	83 c4 10             	add    esp,0x10
c00199e1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00199e5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00199ea:	75 07                	jne    c00199f3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00199ec:	b8 00 00 00 00       	mov    eax,0x0
c00199f1:	eb 38                	jmp    c0019a2b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00199f3:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00199f8:	75 17                	jne    c0019a11 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00199fa:	83 ec 0c             	sub    esp,0xc
c00199fd:	68 c8 28 02 c0       	push   0xc00228c8
c0019a02:	e8 18 57 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0019a07:	83 c4 10             	add    esp,0x10
c0019a0a:	b8 09 00 00 00       	mov    eax,0x9
c0019a0f:	eb 1a                	jmp    c0019a2b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019a11:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019a15:	83 ec 08             	sub    esp,0x8
c0019a18:	50                   	push   eax
c0019a19:	68 9c 28 02 c0       	push   0xc002289c
c0019a1e:	e8 fc 56 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c0019a23:	83 c4 10             	add    esp,0x10
c0019a26:	b8 01 00 00 00       	mov    eax,0x1
c0019a2b:	83 c4 2c             	add    esp,0x2c
c0019a2e:	c3                   	ret    
c0019a2f:	90                   	nop

c0019a30 <FAT::tryMount(LogicalDisk*, int)>:
c0019a30:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0019a36:	a1 00 52 02 c0       	mov    eax,ds:0xc0025200
c0019a3b:	83 f8 14             	cmp    eax,0x14
c0019a3e:	75 17                	jne    c0019a57 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0019a40:	83 ec 0c             	sub    esp,0xc
c0019a43:	68 ae 28 02 c0       	push   0xc00228ae
c0019a48:	e8 d1 b7 ff ff       	call   c001521e <Krnl::panic(char const*)>
c0019a4d:	83 c4 10             	add    esp,0x10
c0019a50:	b0 00                	mov    al,0x0
c0019a52:	e9 d7 01 00 00       	jmp    c0019c2e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019a57:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0019a5e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019a64:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019a6a:	3d 00 02 00 00       	cmp    eax,0x200
c0019a6f:	74 07                	je     c0019a78 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0019a71:	b0 00                	mov    al,0x0
c0019a73:	e9 b6 01 00 00       	jmp    c0019c2e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019a78:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0019a80:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0019a87:	8b 04 85 20 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdade0]
c0019a8e:	83 f8 ff             	cmp    eax,0xffffffff
c0019a91:	74 07                	je     c0019a9a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0019a93:	b0 01                	mov    al,0x1
c0019a95:	e9 94 01 00 00       	jmp    c0019c2e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019a9a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0019aa4:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0019aac:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0019ab3:	88 c2                	mov    dl,al
c0019ab5:	a1 00 52 02 c0       	mov    eax,ds:0xc0025200
c0019aba:	01 d0                	add    eax,edx
c0019abc:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0019ac3:	8b 15 00 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025200
c0019ac9:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0019ad0:	89 14 85 20 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdade0],edx
c0019ad7:	a1 00 52 02 c0       	mov    eax,ds:0xc0025200
c0019adc:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0019ae3:	89 14 85 a0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad60],edx
c0019aea:	83 ec 0c             	sub    esp,0xc
c0019aed:	68 54 02 00 00       	push   0x254
c0019af2:	e8 73 24 ff ff       	call   c000bf6a <malloc>
c0019af7:	83 c4 10             	add    esp,0x10
c0019afa:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0019b01:	83 ec 04             	sub    esp,0x4
c0019b04:	6a 00                	push   0x0
c0019b06:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019b0d:	50                   	push   eax
c0019b0e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019b15:	e8 42 b1 fe ff       	call   c0004c5c <f_mount>
c0019b1a:	83 c4 10             	add    esp,0x10
c0019b1d:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019b24:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0019b2c:	74 19                	je     c0019b47 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0019b2e:	83 ec 0c             	sub    esp,0xc
c0019b31:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019b38:	e8 4d 24 ff ff       	call   c000bf8a <rfree>
c0019b3d:	83 c4 10             	add    esp,0x10
c0019b40:	b0 00                	mov    al,0x0
c0019b42:	e9 e7 00 00 00       	jmp    c0019c2e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019b47:	83 ec 04             	sub    esp,0x4
c0019b4a:	68 00 01 00 00       	push   0x100
c0019b4f:	6a 00                	push   0x0
c0019b51:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019b58:	50                   	push   eax
c0019b59:	e8 aa 6a fe ff       	call   c0000608 <memset>
c0019b5e:	83 c4 10             	add    esp,0x10
c0019b61:	83 ec 08             	sub    esp,0x8
c0019b64:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019b6b:	50                   	push   eax
c0019b6c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019b73:	50                   	push   eax
c0019b74:	e8 e5 6b fe ff       	call   c000075e <strcat>
c0019b79:	83 c4 10             	add    esp,0x10
c0019b7c:	83 ec 08             	sub    esp,0x8
c0019b7f:	68 bc 28 02 c0       	push   0xc00228bc
c0019b84:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019b8b:	50                   	push   eax
c0019b8c:	e8 cd 6b fe ff       	call   c000075e <strcat>
c0019b91:	83 c4 10             	add    esp,0x10
c0019b94:	83 ec 04             	sub    esp,0x4
c0019b97:	6a 01                	push   0x1
c0019b99:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0019ba0:	50                   	push   eax
c0019ba1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019ba5:	50                   	push   eax
c0019ba6:	e8 13 b1 fe ff       	call   c0004cbe <f_open>
c0019bab:	83 c4 10             	add    esp,0x10
c0019bae:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019bb5:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019bbc:	85 c0                	test   eax,eax
c0019bbe:	74 0a                	je     c0019bca <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0019bc0:	78 2d                	js     c0019bef <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0019bc2:	83 e8 04             	sub    eax,0x4
c0019bc5:	83 f8 01             	cmp    eax,0x1
c0019bc8:	77 25                	ja     c0019bef <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0019bca:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0019bd2:	83 ec 0c             	sub    esp,0xc
c0019bd5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019bd9:	50                   	push   eax
c0019bda:	e8 31 bc fe ff       	call   c0005810 <f_close>
c0019bdf:	83 c4 10             	add    esp,0x10
c0019be2:	90                   	nop
c0019be3:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0019beb:	74 3a                	je     c0019c27 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0019bed:	eb 2d                	jmp    c0019c1c <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0019bef:	83 ec 0c             	sub    esp,0xc
c0019bf2:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019bf9:	e8 8c 23 ff ff       	call   c000bf8a <rfree>
c0019bfe:	83 c4 10             	add    esp,0x10
c0019c01:	83 ec 04             	sub    esp,0x4
c0019c04:	6a 00                	push   0x0
c0019c06:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019c0d:	50                   	push   eax
c0019c0e:	6a 00                	push   0x0
c0019c10:	e8 47 b0 fe ff       	call   c0004c5c <f_mount>
c0019c15:	83 c4 10             	add    esp,0x10
c0019c18:	b0 00                	mov    al,0x0
c0019c1a:	eb 12                	jmp    c0019c2e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019c1c:	a1 00 52 02 c0       	mov    eax,ds:0xc0025200
c0019c21:	40                   	inc    eax
c0019c22:	a3 00 52 02 c0       	mov    ds:0xc0025200,eax
c0019c27:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0019c2e:	81 c4 6c 03 00 00    	add    esp,0x36c
c0019c34:	c3                   	ret    
c0019c35:	90                   	nop

c0019c36 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019c36:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0019c3c:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0019c44:	74 0a                	je     c0019c50 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0019c46:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0019c4e:	75 0a                	jne    c0019c5a <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0019c50:	b8 04 00 00 00       	mov    eax,0x4
c0019c55:	e9 db 00 00 00       	jmp    c0019d35 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0019c5a:	83 ec 08             	sub    esp,0x8
c0019c5d:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019c64:	50                   	push   eax
c0019c65:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0019c6c:	e8 a9 c1 fe ff       	call   c0005e1a <f_readdir>
c0019c71:	83 c4 10             	add    esp,0x10
c0019c74:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0019c7b:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0019c81:	83 ec 0c             	sub    esp,0xc
c0019c84:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0019c8b:	83 c0 1a             	add    eax,0x1a
c0019c8e:	50                   	push   eax
c0019c8f:	e8 91 69 fe ff       	call   c0000625 <strlen>
c0019c94:	83 c4 10             	add    esp,0x10
c0019c97:	ba 00 00 00 00       	mov    edx,0x0
c0019c9c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019ca0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0019ca4:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0019cab:	0f b6 c0             	movzx  eax,al
c0019cae:	83 e0 10             	and    eax,0x10
c0019cb1:	74 07                	je     c0019cba <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0019cb3:	b8 02 00 00 00       	mov    eax,0x2
c0019cb8:	eb 05                	jmp    c0019cbf <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0019cba:	b8 01 00 00 00       	mov    eax,0x1
c0019cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019cc3:	83 ec 08             	sub    esp,0x8
c0019cc6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019ccd:	83 c0 1a             	add    eax,0x1a
c0019cd0:	50                   	push   eax
c0019cd1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019cd5:	83 c0 10             	add    eax,0x10
c0019cd8:	50                   	push   eax
c0019cd9:	e8 c9 69 fe ff       	call   c00006a7 <strcpy>
c0019cde:	83 c4 10             	add    esp,0x10
c0019ce1:	83 ec 04             	sub    esp,0x4
c0019ce4:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0019ceb:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019cef:	50                   	push   eax
c0019cf0:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0019cf7:	e8 d6 68 fe ff       	call   c00005d2 <memcpy>
c0019cfc:	83 c4 10             	add    esp,0x10
c0019cff:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0019d06:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019d0c:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0019d13:	84 c0                	test   al,al
c0019d15:	75 07                	jne    c0019d1e <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0019d17:	b8 07 00 00 00       	mov    eax,0x7
c0019d1c:	eb 17                	jmp    c0019d35 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0019d1e:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0019d25:	85 c0                	test   eax,eax
c0019d27:	75 07                	jne    c0019d30 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0019d29:	b8 00 00 00 00       	mov    eax,0x0
c0019d2e:	eb 05                	jmp    c0019d35 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0019d30:	b8 01 00 00 00       	mov    eax,0x1
c0019d35:	81 c4 3c 02 00 00    	add    esp,0x23c
c0019d3b:	c3                   	ret    

c0019d3c <FAT::read(void*, unsigned long, void*, int*)>:
c0019d3c:	83 ec 1c             	sub    esp,0x1c
c0019d3f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019d44:	74 07                	je     c0019d4d <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0019d46:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019d4b:	75 07                	jne    c0019d54 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0019d4d:	b8 04 00 00 00       	mov    eax,0x4
c0019d52:	eb 3d                	jmp    c0019d91 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0019d54:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019d58:	50                   	push   eax
c0019d59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019d5d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019d61:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019d65:	e8 90 b3 fe ff       	call   c00050fa <f_read>
c0019d6a:	83 c4 10             	add    esp,0x10
c0019d6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019d71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d75:	89 c2                	mov    edx,eax
c0019d77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019d7b:	89 10                	mov    DWORD PTR [eax],edx
c0019d7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d81:	85 c0                	test   eax,eax
c0019d83:	75 07                	jne    c0019d8c <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0019d85:	b8 00 00 00 00       	mov    eax,0x0
c0019d8a:	eb 05                	jmp    c0019d91 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0019d8c:	b8 01 00 00 00       	mov    eax,0x1
c0019d91:	83 c4 1c             	add    esp,0x1c
c0019d94:	c3                   	ret    
c0019d95:	90                   	nop

c0019d96 <FAT::write(void*, unsigned long, void*, int*)>:
c0019d96:	83 ec 1c             	sub    esp,0x1c
c0019d99:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019d9e:	74 07                	je     c0019da7 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0019da0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019da5:	75 07                	jne    c0019dae <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0019da7:	b8 04 00 00 00       	mov    eax,0x4
c0019dac:	eb 3d                	jmp    c0019deb <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0019dae:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019db2:	50                   	push   eax
c0019db3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019db7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019dbb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019dbf:	e8 b6 b5 fe ff       	call   c000537a <f_write>
c0019dc4:	83 c4 10             	add    esp,0x10
c0019dc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019dcb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019dcf:	89 c2                	mov    edx,eax
c0019dd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019dd5:	89 10                	mov    DWORD PTR [eax],edx
c0019dd7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ddb:	85 c0                	test   eax,eax
c0019ddd:	75 07                	jne    c0019de6 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0019ddf:	b8 00 00 00 00       	mov    eax,0x0
c0019de4:	eb 05                	jmp    c0019deb <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0019de6:	b8 01 00 00 00       	mov    eax,0x1
c0019deb:	83 c4 1c             	add    esp,0x1c
c0019dee:	c3                   	ret    
c0019def:	90                   	nop

c0019df0 <FAT::close(void*)>:
c0019df0:	83 ec 1c             	sub    esp,0x1c
c0019df3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019df8:	75 07                	jne    c0019e01 <FAT::close(void*)+0x11>
c0019dfa:	b8 04 00 00 00       	mov    eax,0x4
c0019dff:	eb 36                	jmp    c0019e37 <FAT::close(void*)+0x47>
c0019e01:	83 ec 0c             	sub    esp,0xc
c0019e04:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019e08:	e8 03 ba fe ff       	call   c0005810 <f_close>
c0019e0d:	83 c4 10             	add    esp,0x10
c0019e10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019e14:	83 ec 0c             	sub    esp,0xc
c0019e17:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019e1b:	e8 5a 21 ff ff       	call   c000bf7a <free>
c0019e20:	83 c4 10             	add    esp,0x10
c0019e23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019e27:	85 c0                	test   eax,eax
c0019e29:	75 07                	jne    c0019e32 <FAT::close(void*)+0x42>
c0019e2b:	b8 00 00 00 00       	mov    eax,0x0
c0019e30:	eb 05                	jmp    c0019e37 <FAT::close(void*)+0x47>
c0019e32:	b8 01 00 00 00       	mov    eax,0x1
c0019e37:	83 c4 1c             	add    esp,0x1c
c0019e3a:	c3                   	ret    
c0019e3b:	90                   	nop

c0019e3c <FAT::closeDir(void*)>:
c0019e3c:	83 ec 1c             	sub    esp,0x1c
c0019e3f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019e44:	75 07                	jne    c0019e4d <FAT::closeDir(void*)+0x11>
c0019e46:	b8 04 00 00 00       	mov    eax,0x4
c0019e4b:	eb 36                	jmp    c0019e83 <FAT::closeDir(void*)+0x47>
c0019e4d:	83 ec 0c             	sub    esp,0xc
c0019e50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019e54:	e8 9f bf fe ff       	call   c0005df8 <f_closedir>
c0019e59:	83 c4 10             	add    esp,0x10
c0019e5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019e60:	83 ec 0c             	sub    esp,0xc
c0019e63:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019e67:	e8 0e 21 ff ff       	call   c000bf7a <free>
c0019e6c:	83 c4 10             	add    esp,0x10
c0019e6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019e73:	85 c0                	test   eax,eax
c0019e75:	75 07                	jne    c0019e7e <FAT::closeDir(void*)+0x42>
c0019e77:	b8 00 00 00 00       	mov    eax,0x0
c0019e7c:	eb 05                	jmp    c0019e83 <FAT::closeDir(void*)+0x47>
c0019e7e:	b8 01 00 00 00       	mov    eax,0x1
c0019e83:	83 c4 1c             	add    esp,0x1c
c0019e86:	c3                   	ret    
c0019e87:	90                   	nop

c0019e88 <FAT::seek(void*, unsigned long long)>:
c0019e88:	83 ec 2c             	sub    esp,0x2c
c0019e8b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019e8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019e93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019e97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019e9b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019ea0:	75 07                	jne    c0019ea9 <FAT::seek(void*, unsigned long long)+0x21>
c0019ea2:	b8 04 00 00 00       	mov    eax,0x4
c0019ea7:	eb 2f                	jmp    c0019ed8 <FAT::seek(void*, unsigned long long)+0x50>
c0019ea9:	83 ec 04             	sub    esp,0x4
c0019eac:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019eb0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019eb4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019eb8:	e8 82 b9 fe ff       	call   c000583f <f_lseek>
c0019ebd:	83 c4 10             	add    esp,0x10
c0019ec0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019ec4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ec8:	85 c0                	test   eax,eax
c0019eca:	75 07                	jne    c0019ed3 <FAT::seek(void*, unsigned long long)+0x4b>
c0019ecc:	b8 00 00 00 00       	mov    eax,0x0
c0019ed1:	eb 05                	jmp    c0019ed8 <FAT::seek(void*, unsigned long long)+0x50>
c0019ed3:	b8 01 00 00 00       	mov    eax,0x1
c0019ed8:	83 c4 2c             	add    esp,0x2c
c0019edb:	c3                   	ret    

c0019edc <fatWrapperReadDisk>:
c0019edc:	83 ec 1c             	sub    esp,0x1c
c0019edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ee3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019ee7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019eeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0019eee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019ef2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019ef6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019efb:	8b 04 85 80 43 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbc80]
c0019f02:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019f06:	83 ec 0c             	sub    esp,0xc
c0019f09:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019f0d:	52                   	push   edx
c0019f0e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f16:	50                   	push   eax
c0019f17:	e8 86 81 ff ff       	call   c00120a2 <LogicalDisk::read(unsigned long long, int, void*)>
c0019f1c:	83 c4 20             	add    esp,0x20
c0019f1f:	83 c4 1c             	add    esp,0x1c
c0019f22:	c3                   	ret    

c0019f23 <fatWrapperWriteDisk>:
c0019f23:	83 ec 1c             	sub    esp,0x1c
c0019f26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f2a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019f2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019f32:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f35:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019f39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019f3d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019f42:	8b 04 85 80 43 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbc80]
c0019f49:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019f4d:	83 ec 0c             	sub    esp,0xc
c0019f50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019f54:	52                   	push   edx
c0019f55:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f59:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f5d:	50                   	push   eax
c0019f5e:	e8 ab 81 ff ff       	call   c001210e <LogicalDisk::write(unsigned long long, int, void*)>
c0019f63:	83 c4 20             	add    esp,0x20
c0019f66:	83 c4 1c             	add    esp,0x1c
c0019f69:	c3                   	ret    

c0019f6a <fatWrapperIoctl>:
c0019f6a:	53                   	push   ebx
c0019f6b:	83 ec 28             	sub    esp,0x28
c0019f6e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019f72:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f76:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019f7a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019f7e:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0019f83:	75 31                	jne    c0019fb6 <fatWrapperIoctl+0x4c>
c0019f85:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019f89:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019f8d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019f92:	8b 04 85 80 43 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbc80]
c0019f99:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019f9f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019fa5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019fa9:	66 89 02             	mov    WORD PTR [edx],ax
c0019fac:	b8 00 00 00 00       	mov    eax,0x0
c0019fb1:	e9 b2 00 00 00       	jmp    c001a068 <fatWrapperIoctl+0xfe>
c0019fb6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0019fbb:	75 6a                	jne    c001a027 <fatWrapperIoctl+0xbd>
c0019fbd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019fc1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019fc5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019fca:	8b 04 85 80 43 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbc80]
c0019fd1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019fd7:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019fdd:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019fe3:	89 c8                	mov    eax,ecx
c0019fe5:	89 da                	mov    edx,ebx
c0019fe7:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019feb:	c1 e0 0a             	shl    eax,0xa
c0019fee:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019ff3:	8b 0c 8d 80 43 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbc80]
c0019ffa:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a000:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a006:	89 cb                	mov    ebx,ecx
c001a008:	c1 fb 1f             	sar    ebx,0x1f
c001a00b:	53                   	push   ebx
c001a00c:	51                   	push   ecx
c001a00d:	52                   	push   edx
c001a00e:	50                   	push   eax
c001a00f:	e8 18 4b 00 00       	call   c001eb2c <__udivdi3>
c001a014:	83 c4 10             	add    esp,0x10
c001a017:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a01b:	89 01                	mov    DWORD PTR [ecx],eax
c001a01d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a020:	b8 00 00 00 00       	mov    eax,0x0
c001a025:	eb 41                	jmp    c001a068 <fatWrapperIoctl+0xfe>
c001a027:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001a02c:	75 07                	jne    c001a035 <fatWrapperIoctl+0xcb>
c001a02e:	b8 00 00 00 00       	mov    eax,0x0
c001a033:	eb 33                	jmp    c001a068 <fatWrapperIoctl+0xfe>
c001a035:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001a03a:	75 19                	jne    c001a055 <fatWrapperIoctl+0xeb>
c001a03c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a040:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a044:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a048:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a04e:	b8 00 00 00 00       	mov    eax,0x0
c001a053:	eb 13                	jmp    c001a068 <fatWrapperIoctl+0xfe>
c001a055:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001a05a:	75 07                	jne    c001a063 <fatWrapperIoctl+0xf9>
c001a05c:	b8 00 00 00 00       	mov    eax,0x0
c001a061:	eb 05                	jmp    c001a068 <fatWrapperIoctl+0xfe>
c001a063:	b8 04 00 00 00       	mov    eax,0x4
c001a068:	83 c4 28             	add    esp,0x28
c001a06b:	5b                   	pop    ebx
c001a06c:	c3                   	ret    
c001a06d:	90                   	nop

c001a06e <FAT::FAT()>:
c001a06e:	83 ec 1c             	sub    esp,0x1c
c001a071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a075:	83 ec 0c             	sub    esp,0xc
c001a078:	50                   	push   eax
c001a079:	e8 a6 53 ff ff       	call   c000f424 <Filesystem::Filesystem()>
c001a07e:	83 c4 10             	add    esp,0x10
c001a081:	ba f8 28 02 c0       	mov    edx,0xc00228f8
c001a086:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a08a:	89 10                	mov    DWORD PTR [eax],edx
c001a08c:	c7 05 00 52 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025200,0x0
c001a096:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a09e:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a0a3:	7f 15                	jg     c001a0ba <FAT::FAT()+0x4c>
c001a0a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0a9:	c7 04 85 20 52 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdade0],0xffffffff
c001a0b4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a0b8:	eb e4                	jmp    c001a09e <FAT::FAT()+0x30>
c001a0ba:	90                   	nop
c001a0bb:	83 c4 1c             	add    esp,0x1c
c001a0be:	c3                   	ret    
c001a0bf:	90                   	nop

c001a0c0 <FAT::fixFilepath(char*)>:
c001a0c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a0c4:	8a 00                	mov    al,BYTE PTR [eax]
c001a0c6:	3c 40                	cmp    al,0x40
c001a0c8:	7e 2c                	jle    c001a0f6 <FAT::fixFilepath(char*)+0x36>
c001a0ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a0ce:	8a 00                	mov    al,BYTE PTR [eax]
c001a0d0:	83 e8 41             	sub    eax,0x41
c001a0d3:	88 c2                	mov    dl,al
c001a0d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a0d9:	88 10                	mov    BYTE PTR [eax],dl
c001a0db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a0df:	8a 00                	mov    al,BYTE PTR [eax]
c001a0e1:	0f be c0             	movsx  eax,al
c001a0e4:	8b 04 85 20 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdade0]
c001a0eb:	83 c0 30             	add    eax,0x30
c001a0ee:	88 c2                	mov    dl,al
c001a0f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a0f4:	88 10                	mov    BYTE PTR [eax],dl
c001a0f6:	90                   	nop
c001a0f7:	c3                   	ret    

c001a0f8 <FAT::open(char const*, void**, FileOpenMode)>:
c001a0f8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a0fe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a106:	74 0a                	je     c001a112 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001a108:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a110:	75 0a                	jne    c001a11c <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001a112:	b8 04 00 00 00       	mov    eax,0x4
c001a117:	e9 fd 00 00 00       	jmp    c001a219 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001a11c:	83 ec 08             	sub    esp,0x8
c001a11f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a126:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a12a:	50                   	push   eax
c001a12b:	e8 77 65 fe ff       	call   c00006a7 <strcpy>
c001a130:	83 c4 10             	add    esp,0x10
c001a133:	83 ec 08             	sub    esp,0x8
c001a136:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a13a:	50                   	push   eax
c001a13b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a142:	e8 79 ff ff ff       	call   c001a0c0 <FAT::fixFilepath(char*)>
c001a147:	83 c4 10             	add    esp,0x10
c001a14a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001a152:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a159:	83 e0 01             	and    eax,0x1
c001a15c:	74 08                	je     c001a166 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001a15e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001a166:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a16d:	83 e0 04             	and    eax,0x4
c001a170:	74 10                	je     c001a182 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001a172:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001a17a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001a182:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a189:	83 e0 02             	and    eax,0x2
c001a18c:	74 08                	je     c001a196 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001a18e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001a196:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a19d:	83 e0 08             	and    eax,0x8
c001a1a0:	74 08                	je     c001a1aa <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001a1a2:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001a1aa:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a1b1:	83 e0 10             	and    eax,0x10
c001a1b4:	74 08                	je     c001a1be <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001a1b6:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001a1be:	83 ec 0c             	sub    esp,0xc
c001a1c1:	68 50 02 00 00       	push   0x250
c001a1c6:	e8 9f 1d ff ff       	call   c000bf6a <malloc>
c001a1cb:	83 c4 10             	add    esp,0x10
c001a1ce:	89 c2                	mov    edx,eax
c001a1d0:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a1d7:	89 10                	mov    DWORD PTR [eax],edx
c001a1d9:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001a1e1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a1e8:	8b 00                	mov    eax,DWORD PTR [eax]
c001a1ea:	83 ec 04             	sub    esp,0x4
c001a1ed:	52                   	push   edx
c001a1ee:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a1f2:	52                   	push   edx
c001a1f3:	50                   	push   eax
c001a1f4:	e8 c5 aa fe ff       	call   c0004cbe <f_open>
c001a1f9:	83 c4 10             	add    esp,0x10
c001a1fc:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001a203:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001a20b:	74 07                	je     c001a214 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001a20d:	b8 01 00 00 00       	mov    eax,0x1
c001a212:	eb 05                	jmp    c001a219 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001a214:	b8 00 00 00 00       	mov    eax,0x0
c001a219:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a21f:	c3                   	ret    

c001a220 <FAT::openDir(char const*, void**)>:
c001a220:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a226:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a22e:	74 0a                	je     c001a23a <FAT::openDir(char const*, void**)+0x1a>
c001a230:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a238:	75 07                	jne    c001a241 <FAT::openDir(char const*, void**)+0x21>
c001a23a:	b8 04 00 00 00       	mov    eax,0x4
c001a23f:	eb 7d                	jmp    c001a2be <FAT::openDir(char const*, void**)+0x9e>
c001a241:	83 ec 08             	sub    esp,0x8
c001a244:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a24b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a24f:	50                   	push   eax
c001a250:	e8 52 64 fe ff       	call   c00006a7 <strcpy>
c001a255:	83 c4 10             	add    esp,0x10
c001a258:	83 ec 08             	sub    esp,0x8
c001a25b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a25f:	50                   	push   eax
c001a260:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a267:	e8 54 fe ff ff       	call   c001a0c0 <FAT::fixFilepath(char*)>
c001a26c:	83 c4 10             	add    esp,0x10
c001a26f:	83 ec 0c             	sub    esp,0xc
c001a272:	6a 4c                	push   0x4c
c001a274:	e8 f1 1c ff ff       	call   c000bf6a <malloc>
c001a279:	83 c4 10             	add    esp,0x10
c001a27c:	89 c2                	mov    edx,eax
c001a27e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a285:	89 10                	mov    DWORD PTR [eax],edx
c001a287:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a28e:	8b 00                	mov    eax,DWORD PTR [eax]
c001a290:	83 ec 08             	sub    esp,0x8
c001a293:	8d 54 24 14          	lea    edx,[esp+0x14]
c001a297:	52                   	push   edx
c001a298:	50                   	push   eax
c001a299:	e8 58 ba fe ff       	call   c0005cf6 <f_opendir>
c001a29e:	83 c4 10             	add    esp,0x10
c001a2a1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a2a8:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001a2b0:	74 07                	je     c001a2b9 <FAT::openDir(char const*, void**)+0x99>
c001a2b2:	b8 01 00 00 00       	mov    eax,0x1
c001a2b7:	eb 05                	jmp    c001a2be <FAT::openDir(char const*, void**)+0x9e>
c001a2b9:	b8 00 00 00 00       	mov    eax,0x0
c001a2be:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a2c4:	c3                   	ret    
c001a2c5:	90                   	nop

c001a2c6 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001a2c6:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a2cc:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001a2d4:	75 0a                	jne    c001a2e0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001a2d6:	b8 04 00 00 00       	mov    eax,0x4
c001a2db:	e9 c9 00 00 00       	jmp    c001a3a9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001a2e0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001a2e8:	75 0a                	jne    c001a2f4 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001a2ea:	b8 04 00 00 00       	mov    eax,0x4
c001a2ef:	e9 b5 00 00 00       	jmp    c001a3a9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001a2f4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001a2fc:	75 0a                	jne    c001a308 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001a2fe:	b8 04 00 00 00       	mov    eax,0x4
c001a303:	e9 a1 00 00 00       	jmp    c001a3a9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001a308:	83 ec 08             	sub    esp,0x8
c001a30b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a312:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a319:	50                   	push   eax
c001a31a:	e8 88 63 fe ff       	call   c00006a7 <strcpy>
c001a31f:	83 c4 10             	add    esp,0x10
c001a322:	83 ec 08             	sub    esp,0x8
c001a325:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a32c:	50                   	push   eax
c001a32d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a334:	e8 87 fd ff ff       	call   c001a0c0 <FAT::fixFilepath(char*)>
c001a339:	83 c4 10             	add    esp,0x10
c001a33c:	83 ec 08             	sub    esp,0x8
c001a33f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a343:	50                   	push   eax
c001a344:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a34b:	50                   	push   eax
c001a34c:	e8 64 bb fe ff       	call   c0005eb5 <f_stat>
c001a351:	83 c4 10             	add    esp,0x10
c001a354:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a35b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a362:	85 c0                	test   eax,eax
c001a364:	74 07                	je     c001a36d <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001a366:	83 f8 04             	cmp    eax,0x4
c001a369:	74 32                	je     c001a39d <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c001a36b:	eb 37                	jmp    c001a3a4 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c001a36d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a371:	0f b6 c0             	movzx  eax,al
c001a374:	83 e0 10             	and    eax,0x10
c001a377:	0f 95 c2             	setne  dl
c001a37a:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001a381:	88 10                	mov    BYTE PTR [eax],dl
c001a383:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a386:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a38a:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001a391:	89 01                	mov    DWORD PTR [ecx],eax
c001a393:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a396:	b8 00 00 00 00       	mov    eax,0x0
c001a39b:	eb 0c                	jmp    c001a3a9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001a39d:	b8 02 00 00 00       	mov    eax,0x2
c001a3a2:	eb 05                	jmp    c001a3a9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001a3a4:	b8 01 00 00 00       	mov    eax,0x1
c001a3a9:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a3af:	c3                   	ret    

c001a3b0 <FAT::unlink(char const*)>:
c001a3b0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a3b6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a3be:	75 07                	jne    c001a3c7 <FAT::unlink(char const*)+0x17>
c001a3c0:	b8 04 00 00 00       	mov    eax,0x4
c001a3c5:	eb 5c                	jmp    c001a423 <FAT::unlink(char const*)+0x73>
c001a3c7:	83 ec 08             	sub    esp,0x8
c001a3ca:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a3d1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a3d5:	50                   	push   eax
c001a3d6:	e8 cc 62 fe ff       	call   c00006a7 <strcpy>
c001a3db:	83 c4 10             	add    esp,0x10
c001a3de:	83 ec 08             	sub    esp,0x8
c001a3e1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a3e5:	50                   	push   eax
c001a3e6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a3ed:	e8 ce fc ff ff       	call   c001a0c0 <FAT::fixFilepath(char*)>
c001a3f2:	83 c4 10             	add    esp,0x10
c001a3f5:	83 ec 0c             	sub    esp,0xc
c001a3f8:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a3fc:	50                   	push   eax
c001a3fd:	e8 05 be fe ff       	call   c0006207 <f_unlink>
c001a402:	83 c4 10             	add    esp,0x10
c001a405:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a40c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a413:	85 c0                	test   eax,eax
c001a415:	75 07                	jne    c001a41e <FAT::unlink(char const*)+0x6e>
c001a417:	b8 00 00 00 00       	mov    eax,0x0
c001a41c:	eb 05                	jmp    c001a423 <FAT::unlink(char const*)+0x73>
c001a41e:	b8 01 00 00 00       	mov    eax,0x1
c001a423:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a429:	c3                   	ret    

c001a42a <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a42a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a430:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001a437:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001a43e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a442:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a446:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a44e:	75 0a                	jne    c001a45a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001a450:	b8 04 00 00 00       	mov    eax,0x4
c001a455:	e9 1c 01 00 00       	jmp    c001a576 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001a45a:	83 ec 08             	sub    esp,0x8
c001a45d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a464:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a468:	50                   	push   eax
c001a469:	e8 39 62 fe ff       	call   c00006a7 <strcpy>
c001a46e:	83 c4 10             	add    esp,0x10
c001a471:	83 ec 08             	sub    esp,0x8
c001a474:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a478:	50                   	push   eax
c001a479:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a480:	e8 3b fc ff ff       	call   c001a0c0 <FAT::fixFilepath(char*)>
c001a485:	83 c4 10             	add    esp,0x10
c001a488:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a490:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a498:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a49d:	83 e0 01             	and    eax,0x1
c001a4a0:	74 08                	je     c001a4aa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001a4a2:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001a4aa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a4af:	83 e0 02             	and    eax,0x2
c001a4b2:	74 08                	je     c001a4bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001a4b4:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001a4bc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a4c1:	83 e0 04             	and    eax,0x4
c001a4c4:	74 08                	je     c001a4ce <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001a4c6:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001a4ce:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a4d3:	83 e0 08             	and    eax,0x8
c001a4d6:	74 08                	je     c001a4e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001a4d8:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001a4e0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a4e5:	83 e0 01             	and    eax,0x1
c001a4e8:	74 08                	je     c001a4f2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001a4ea:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001a4f2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a4f7:	83 e0 02             	and    eax,0x2
c001a4fa:	74 08                	je     c001a504 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001a4fc:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001a504:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a509:	83 e0 04             	and    eax,0x4
c001a50c:	74 08                	je     c001a516 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001a50e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001a516:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a51b:	83 e0 08             	and    eax,0x8
c001a51e:	74 08                	je     c001a528 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001a520:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001a528:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a52f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001a536:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a53e:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a546:	83 ec 04             	sub    esp,0x4
c001a549:	52                   	push   edx
c001a54a:	50                   	push   eax
c001a54b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a54f:	50                   	push   eax
c001a550:	e8 54 c3 fe ff       	call   c00068a9 <f_chmod>
c001a555:	83 c4 10             	add    esp,0x10
c001a558:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a55f:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a566:	85 c0                	test   eax,eax
c001a568:	75 07                	jne    c001a571 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001a56a:	b8 00 00 00 00       	mov    eax,0x0
c001a56f:	eb 05                	jmp    c001a576 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001a571:	b8 01 00 00 00       	mov    eax,0x1
c001a576:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a57c:	c3                   	ret    
c001a57d:	90                   	nop

c001a57e <FAT::rename(char const*, char const*)>:
c001a57e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a584:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a58c:	74 0a                	je     c001a598 <FAT::rename(char const*, char const*)+0x1a>
c001a58e:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a596:	75 0a                	jne    c001a5a2 <FAT::rename(char const*, char const*)+0x24>
c001a598:	b8 04 00 00 00       	mov    eax,0x4
c001a59d:	e9 98 00 00 00       	jmp    c001a63a <FAT::rename(char const*, char const*)+0xbc>
c001a5a2:	83 ec 08             	sub    esp,0x8
c001a5a5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a5ac:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a5b3:	50                   	push   eax
c001a5b4:	e8 ee 60 fe ff       	call   c00006a7 <strcpy>
c001a5b9:	83 c4 10             	add    esp,0x10
c001a5bc:	83 ec 08             	sub    esp,0x8
c001a5bf:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a5c6:	50                   	push   eax
c001a5c7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a5ce:	e8 ed fa ff ff       	call   c001a0c0 <FAT::fixFilepath(char*)>
c001a5d3:	83 c4 10             	add    esp,0x10
c001a5d6:	83 ec 08             	sub    esp,0x8
c001a5d9:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a5e0:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a5e4:	50                   	push   eax
c001a5e5:	e8 bd 60 fe ff       	call   c00006a7 <strcpy>
c001a5ea:	83 c4 10             	add    esp,0x10
c001a5ed:	83 ec 08             	sub    esp,0x8
c001a5f0:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a5f4:	50                   	push   eax
c001a5f5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a5fc:	e8 bf fa ff ff       	call   c001a0c0 <FAT::fixFilepath(char*)>
c001a601:	83 c4 10             	add    esp,0x10
c001a604:	83 ec 08             	sub    esp,0x8
c001a607:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a60b:	50                   	push   eax
c001a60c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a613:	50                   	push   eax
c001a614:	e8 9d bf fe ff       	call   c00065b6 <f_rename>
c001a619:	83 c4 10             	add    esp,0x10
c001a61c:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a623:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a62a:	85 c0                	test   eax,eax
c001a62c:	75 07                	jne    c001a635 <FAT::rename(char const*, char const*)+0xb7>
c001a62e:	b8 00 00 00 00       	mov    eax,0x0
c001a633:	eb 05                	jmp    c001a63a <FAT::rename(char const*, char const*)+0xbc>
c001a635:	b8 01 00 00 00       	mov    eax,0x1
c001a63a:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a640:	c3                   	ret    
c001a641:	90                   	nop

c001a642 <FAT::mkdir(char const*)>:
c001a642:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a648:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a650:	75 07                	jne    c001a659 <FAT::mkdir(char const*)+0x17>
c001a652:	b8 04 00 00 00       	mov    eax,0x4
c001a657:	eb 5c                	jmp    c001a6b5 <FAT::mkdir(char const*)+0x73>
c001a659:	83 ec 08             	sub    esp,0x8
c001a65c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a663:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a667:	50                   	push   eax
c001a668:	e8 3a 60 fe ff       	call   c00006a7 <strcpy>
c001a66d:	83 c4 10             	add    esp,0x10
c001a670:	83 ec 08             	sub    esp,0x8
c001a673:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a677:	50                   	push   eax
c001a678:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a67f:	e8 3c fa ff ff       	call   c001a0c0 <FAT::fixFilepath(char*)>
c001a684:	83 c4 10             	add    esp,0x10
c001a687:	83 ec 0c             	sub    esp,0xc
c001a68a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a68e:	50                   	push   eax
c001a68f:	e8 f6 bc fe ff       	call   c000638a <f_mkdir>
c001a694:	83 c4 10             	add    esp,0x10
c001a697:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a69e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a6a5:	85 c0                	test   eax,eax
c001a6a7:	75 07                	jne    c001a6b0 <FAT::mkdir(char const*)+0x6e>
c001a6a9:	b8 00 00 00 00       	mov    eax,0x0
c001a6ae:	eb 05                	jmp    c001a6b5 <FAT::mkdir(char const*)+0x73>
c001a6b0:	b8 01 00 00 00       	mov    eax,0x1
c001a6b5:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a6bb:	c3                   	ret    

c001a6bc <FAT::exists(char const*)>:
c001a6bc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a6c2:	83 ec 08             	sub    esp,0x8
c001a6c5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a6cc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a6d0:	50                   	push   eax
c001a6d1:	e8 d1 5f fe ff       	call   c00006a7 <strcpy>
c001a6d6:	83 c4 10             	add    esp,0x10
c001a6d9:	83 ec 08             	sub    esp,0x8
c001a6dc:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a6e0:	50                   	push   eax
c001a6e1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a6e8:	e8 d3 f9 ff ff       	call   c001a0c0 <FAT::fixFilepath(char*)>
c001a6ed:	83 c4 10             	add    esp,0x10
c001a6f0:	83 ec 08             	sub    esp,0x8
c001a6f3:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001a6fa:	50                   	push   eax
c001a6fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a6ff:	50                   	push   eax
c001a700:	e8 b0 b7 fe ff       	call   c0005eb5 <f_stat>
c001a705:	83 c4 10             	add    esp,0x10
c001a708:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a70f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a716:	85 c0                	test   eax,eax
c001a718:	75 04                	jne    c001a71e <FAT::exists(char const*)+0x62>
c001a71a:	b0 01                	mov    al,0x1
c001a71c:	eb 02                	jmp    c001a720 <FAT::exists(char const*)+0x64>
c001a71e:	b0 00                	mov    al,0x0
c001a720:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a726:	c3                   	ret    
c001a727:	90                   	nop

c001a728 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a728:	b8 08 00 00 00       	mov    eax,0x8
c001a72d:	c3                   	ret    

c001a72e <ISO9660::seek(void*, unsigned long long)>:
c001a72e:	53                   	push   ebx
c001a72f:	b8 04 00 00 00       	mov    eax,0x4
c001a734:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a738:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a73c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a740:	85 d2                	test   edx,edx
c001a742:	74 17                	je     c001a75b <ISO9660::seek(void*, unsigned long long)+0x2d>
c001a744:	89 c8                	mov    eax,ecx
c001a746:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001a749:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001a74c:	b8 01 00 00 00       	mov    eax,0x1
c001a751:	73 08                	jae    c001a75b <ISO9660::seek(void*, unsigned long long)+0x2d>
c001a753:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001a756:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001a759:	31 c0                	xor    eax,eax
c001a75b:	5b                   	pop    ebx
c001a75c:	c3                   	ret    
c001a75d:	90                   	nop

c001a75e <ISO9660::tell(void*, unsigned long long*)>:
c001a75e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a762:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a766:	85 d2                	test   edx,edx
c001a768:	74 12                	je     c001a77c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001a76a:	85 c0                	test   eax,eax
c001a76c:	74 0e                	je     c001a77c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001a76e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a771:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001a774:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001a777:	89 10                	mov    DWORD PTR [eax],edx
c001a779:	31 c0                	xor    eax,eax
c001a77b:	c3                   	ret    
c001a77c:	b8 04 00 00 00       	mov    eax,0x4
c001a781:	c3                   	ret    

c001a782 <ISO9660::getName()>:
c001a782:	b8 54 29 02 c0       	mov    eax,0xc0022954
c001a787:	c3                   	ret    

c001a788 <ISO9660::stat(void*, unsigned long long*)>:
c001a788:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a78c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a790:	85 d2                	test   edx,edx
c001a792:	74 12                	je     c001a7a6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001a794:	85 c0                	test   eax,eax
c001a796:	74 0e                	je     c001a7a6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001a798:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001a79b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001a79e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001a7a1:	89 10                	mov    DWORD PTR [eax],edx
c001a7a3:	31 c0                	xor    eax,eax
c001a7a5:	c3                   	ret    
c001a7a6:	b8 04 00 00 00       	mov    eax,0x4
c001a7ab:	c3                   	ret    

c001a7ac <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a7ac:	b8 01 00 00 00       	mov    eax,0x1
c001a7b1:	c3                   	ret    

c001a7b2 <ISO9660::unlink(char const*)>:
c001a7b2:	b8 01 00 00 00       	mov    eax,0x1
c001a7b7:	c3                   	ret    

c001a7b8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a7b8:	b8 01 00 00 00       	mov    eax,0x1
c001a7bd:	c3                   	ret    

c001a7be <ISO9660::rename(char const*, char const*)>:
c001a7be:	b8 01 00 00 00       	mov    eax,0x1
c001a7c3:	c3                   	ret    

c001a7c4 <ISO9660::mkdir(char const*)>:
c001a7c4:	b8 01 00 00 00       	mov    eax,0x1
c001a7c9:	c3                   	ret    

c001a7ca <ISO9660::close(void*)>:
c001a7ca:	83 ec 0c             	sub    esp,0xc
c001a7cd:	b8 04 00 00 00       	mov    eax,0x4
c001a7d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a7d6:	85 d2                	test   edx,edx
c001a7d8:	74 0e                	je     c001a7e8 <ISO9660::close(void*)+0x1e>
c001a7da:	83 ec 0c             	sub    esp,0xc
c001a7dd:	52                   	push   edx
c001a7de:	e8 97 17 ff ff       	call   c000bf7a <free>
c001a7e3:	83 c4 10             	add    esp,0x10
c001a7e6:	31 c0                	xor    eax,eax
c001a7e8:	83 c4 0c             	add    esp,0xc
c001a7eb:	c3                   	ret    

c001a7ec <ISO9660::closeDir(void*)>:
c001a7ec:	83 ec 0c             	sub    esp,0xc
c001a7ef:	b8 04 00 00 00       	mov    eax,0x4
c001a7f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a7f8:	85 d2                	test   edx,edx
c001a7fa:	74 0e                	je     c001a80a <ISO9660::closeDir(void*)+0x1e>
c001a7fc:	83 ec 0c             	sub    esp,0xc
c001a7ff:	52                   	push   edx
c001a800:	e8 75 17 ff ff       	call   c000bf7a <free>
c001a805:	83 c4 10             	add    esp,0x10
c001a808:	31 c0                	xor    eax,eax
c001a80a:	83 c4 0c             	add    esp,0xc
c001a80d:	c3                   	ret    

c001a80e <ISO9660::~ISO9660()>:
c001a80e:	83 ec 0c             	sub    esp,0xc
c001a811:	ba a8 29 02 c0       	mov    edx,0xc00229a8
c001a816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a81a:	89 10                	mov    DWORD PTR [eax],edx
c001a81c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a820:	83 ec 0c             	sub    esp,0xc
c001a823:	50                   	push   eax
c001a824:	e8 1f 4c ff ff       	call   c000f448 <Filesystem::~Filesystem()>
c001a829:	83 c4 10             	add    esp,0x10
c001a82c:	90                   	nop
c001a82d:	83 c4 0c             	add    esp,0xc
c001a830:	c3                   	ret    
c001a831:	90                   	nop

c001a832 <ISO9660::~ISO9660()>:
c001a832:	83 ec 0c             	sub    esp,0xc
c001a835:	83 ec 0c             	sub    esp,0xc
c001a838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a83c:	e8 cd ff ff ff       	call   c001a80e <ISO9660::~ISO9660()>
c001a841:	83 c4 10             	add    esp,0x10
c001a844:	83 ec 08             	sub    esp,0x8
c001a847:	6a 08                	push   0x8
c001a849:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a84d:	e8 ed 47 ff ff       	call   c000f03f <operator delete(void*, unsigned long)>
c001a852:	83 c4 10             	add    esp,0x10
c001a855:	83 c4 0c             	add    esp,0xc
c001a858:	c3                   	ret    

c001a859 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001a859:	55                   	push   ebp
c001a85a:	31 c9                	xor    ecx,ecx
c001a85c:	57                   	push   edi
c001a85d:	56                   	push   esi
c001a85e:	53                   	push   ebx
c001a85f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001a863:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a867:	89 eb                	mov    ebx,ebp
c001a869:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001a86d:	39 ce                	cmp    esi,ecx
c001a86f:	7e 17                	jle    c001a888 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001a871:	31 d2                	xor    edx,edx
c001a873:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001a877:	7d 13                	jge    c001a88c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001a879:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a87d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001a880:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001a883:	75 0d                	jne    c001a892 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001a885:	42                   	inc    edx
c001a886:	eb eb                	jmp    c001a873 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001a888:	31 c0                	xor    eax,eax
c001a88a:	eb 0a                	jmp    c001a896 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001a88c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001a890:	eb 04                	jmp    c001a896 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001a892:	41                   	inc    ecx
c001a893:	43                   	inc    ebx
c001a894:	eb d7                	jmp    c001a86d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001a896:	5b                   	pop    ebx
c001a897:	5e                   	pop    esi
c001a898:	5f                   	pop    edi
c001a899:	5d                   	pop    ebp
c001a89a:	c3                   	ret    

c001a89b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a89b:	56                   	push   esi
c001a89c:	53                   	push   ebx
c001a89d:	52                   	push   edx
c001a89e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a8a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a8a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a8aa:	39 0d 00 53 02 c0    	cmp    DWORD PTR ds:0xc0025300,ecx
c001a8b0:	75 08                	jne    c001a8ba <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001a8b2:	38 05 a8 37 02 c0    	cmp    BYTE PTR ds:0xc00237a8,al
c001a8b8:	74 2b                	je     c001a8e5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001a8ba:	83 ec 0c             	sub    esp,0xc
c001a8bd:	a2 a8 37 02 c0       	mov    ds:0xc00237a8,al
c001a8c2:	68 20 53 02 c0       	push   0xc0025320
c001a8c7:	0f be c0             	movsx  eax,al
c001a8ca:	6a 01                	push   0x1
c001a8cc:	89 0d 00 53 02 c0    	mov    DWORD PTR ds:0xc0025300,ecx
c001a8d2:	31 db                	xor    ebx,ebx
c001a8d4:	53                   	push   ebx
c001a8d5:	51                   	push   ecx
c001a8d6:	ff 34 85 7c 42 02 c0 	push   DWORD PTR [eax*4-0x3ffdbd84]
c001a8dd:	e8 c0 77 ff ff       	call   c00120a2 <LogicalDisk::read(unsigned long long, int, void*)>
c001a8e2:	83 c4 20             	add    esp,0x20
c001a8e5:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001a8ed:	c7 44 24 14 20 53 02 c0 	mov    DWORD PTR [esp+0x14],0xc0025320
c001a8f5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001a8f9:	58                   	pop    eax
c001a8fa:	5b                   	pop    ebx
c001a8fb:	5e                   	pop    esi
c001a8fc:	e9 d1 5c fe ff       	jmp    c00005d2 <memcpy>
c001a901:	90                   	nop

c001a902 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a902:	81 ec 10 08 00 00    	sub    esp,0x810
c001a908:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001a90f:	83 c0 41             	add    eax,0x41
c001a912:	0f be c0             	movsx  eax,al
c001a915:	50                   	push   eax
c001a916:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a91a:	50                   	push   eax
c001a91b:	6a 10                	push   0x10
c001a91d:	e8 79 ff ff ff       	call   c001a89b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a922:	83 c4 10             	add    esp,0x10
c001a925:	31 c0                	xor    eax,eax
c001a927:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a92c:	75 1d                	jne    c001a94b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a92e:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a933:	75 16                	jne    c001a94b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a935:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a93a:	75 0f                	jne    c001a94b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a93c:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a941:	75 08                	jne    c001a94b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a943:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a948:	0f 94 c0             	sete   al
c001a94b:	81 c4 0c 08 00 00    	add    esp,0x80c
c001a951:	c3                   	ret    

c001a952 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a952:	55                   	push   ebp
c001a953:	57                   	push   edi
c001a954:	56                   	push   esi
c001a955:	53                   	push   ebx
c001a956:	81 ec 34 08 00 00    	sub    esp,0x834
c001a95c:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001a963:	55                   	push   ebp
c001a964:	68 6f 29 02 c0       	push   0xc002296f
c001a969:	e8 b1 47 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001a96e:	83 c4 10             	add    esp,0x10
c001a971:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001a979:	0f 84 06 02 00 00    	je     c001ab85 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a97f:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001a987:	0f 84 f8 01 00 00    	je     c001ab85 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a98d:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a994:	b8 01 00 00 00       	mov    eax,0x1
c001a999:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001a99d:	0f 85 e7 01 00 00    	jne    c001ab8a <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a9a3:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001a9a6:	31 d2                	xor    edx,edx
c001a9a8:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001a9ab:	89 e9                	mov    ecx,ebp
c001a9ad:	89 d3                	mov    ebx,edx
c001a9af:	01 f1                	add    ecx,esi
c001a9b1:	11 fb                	adc    ebx,edi
c001a9b3:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a9b7:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a9bb:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001a9c2:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001a9c5:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001a9c8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001a9cc:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001a9d0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a9d4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a9d8:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001a9dc:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001a9e0:	72 19                	jb     c001a9fb <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001a9e2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a9e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a9ee:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a9f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a9f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a9f9:	eb 13                	jmp    c001aa0e <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001a9fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aa03:	29 f0                	sub    eax,esi
c001aa05:	19 fa                	sbb    edx,edi
c001aa07:	89 04 24             	mov    DWORD PTR [esp],eax
c001aa0a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001aa0e:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001aa15:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001aa18:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa1a:	53                   	push   ebx
c001aa1b:	0f a4 c2 0b          	shld   edx,eax,0xb
c001aa1f:	c1 e0 0b             	shl    eax,0xb
c001aa22:	01 c6                	add    esi,eax
c001aa24:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001aa2b:	11 d7                	adc    edi,edx
c001aa2d:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001aa31:	89 fa                	mov    edx,edi
c001aa33:	50                   	push   eax
c001aa34:	8d 44 24 28          	lea    eax,[esp+0x28]
c001aa38:	50                   	push   eax
c001aa39:	89 f0                	mov    eax,esi
c001aa3b:	0f ac d0 0b          	shrd   eax,edx,0xb
c001aa3f:	50                   	push   eax
c001aa40:	e8 56 fe ff ff       	call   c001a89b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001aa45:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001aa4c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aa50:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001aa53:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001aa57:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001aa5d:	83 c4 10             	add    esp,0x10
c001aa60:	b8 00 08 00 00       	mov    eax,0x800
c001aa65:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001aa69:	29 d0                	sub    eax,edx
c001aa6b:	39 c1                	cmp    ecx,eax
c001aa6d:	83 db 00             	sbb    ebx,0x0
c001aa70:	7d 19                	jge    c001aa8b <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001aa72:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001aa77:	75 16                	jne    c001aa8f <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001aa79:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001aa80:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001aa86:	e9 f6 00 00 00       	jmp    c001ab81 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001aa8b:	89 c5                	mov    ebp,eax
c001aa8d:	eb 03                	jmp    c001aa92 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001aa8f:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001aa92:	51                   	push   ecx
c001aa93:	55                   	push   ebp
c001aa94:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001aa98:	50                   	push   eax
c001aa99:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001aaa0:	e8 2d 5b fe ff       	call   c00005d2 <memcpy>
c001aaa5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aaa9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001aaad:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001aab4:	01 e8                	add    eax,ebp
c001aab6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aaba:	89 e8                	mov    eax,ebp
c001aabc:	99                   	cdq    
c001aabd:	01 ee                	add    esi,ebp
c001aabf:	11 d7                	adc    edi,edx
c001aac1:	29 e9                	sub    ecx,ebp
c001aac3:	19 d3                	sbb    ebx,edx
c001aac5:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001aac9:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001aacd:	83 c4 10             	add    esp,0x10
c001aad0:	b8 ff 07 00 00       	mov    eax,0x7ff
c001aad5:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001aad8:	b8 00 00 00 00       	mov    eax,0x0
c001aadd:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001aae1:	7d 3f                	jge    c001ab22 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001aae3:	52                   	push   edx
c001aae4:	89 fa                	mov    edx,edi
c001aae6:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001aaed:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001aaf1:	50                   	push   eax
c001aaf2:	89 f0                	mov    eax,esi
c001aaf4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001aaf8:	0f ac d0 0b          	shrd   eax,edx,0xb
c001aafc:	50                   	push   eax
c001aafd:	e8 99 fd ff ff       	call   c001a89b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ab02:	81 c6 00 08 00 00    	add    esi,0x800
c001ab08:	83 d7 00             	adc    edi,0x0
c001ab0b:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001ab13:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001ab1b:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001ab20:	eb ab                	jmp    c001aacd <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001ab22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab26:	0b 04 24             	or     eax,DWORD PTR [esp]
c001ab29:	74 34                	je     c001ab5f <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001ab2b:	89 fa                	mov    edx,edi
c001ab2d:	50                   	push   eax
c001ab2e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001ab35:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001ab39:	50                   	push   eax
c001ab3a:	89 f0                	mov    eax,esi
c001ab3c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001ab40:	0f ac d0 0b          	shrd   eax,edx,0xb
c001ab44:	55                   	push   ebp
c001ab45:	50                   	push   eax
c001ab46:	e8 50 fd ff ff       	call   c001a89b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ab4b:	83 c4 0c             	add    esp,0xc
c001ab4e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001ab52:	55                   	push   ebp
c001ab53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab57:	e8 76 5a fe ff       	call   c00005d2 <memcpy>
c001ab5c:	83 c4 10             	add    esp,0x10
c001ab5f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001ab66:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ab6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ab6e:	89 38                	mov    DWORD PTR [eax],edi
c001ab70:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001ab77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ab7b:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001ab7e:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001ab81:	31 c0                	xor    eax,eax
c001ab83:	eb 05                	jmp    c001ab8a <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001ab85:	b8 04 00 00 00       	mov    eax,0x4
c001ab8a:	81 c4 2c 08 00 00    	add    esp,0x82c
c001ab90:	5b                   	pop    ebx
c001ab91:	5e                   	pop    esi
c001ab92:	5f                   	pop    edi
c001ab93:	5d                   	pop    ebp
c001ab94:	c3                   	ret    
c001ab95:	90                   	nop

c001ab96 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001ab96:	55                   	push   ebp
c001ab97:	57                   	push   edi
c001ab98:	56                   	push   esi
c001ab99:	53                   	push   ebx
c001ab9a:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001aba0:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001aba7:	85 f6                	test   esi,esi
c001aba9:	0f 84 64 02 00 00    	je     c001ae13 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001abaf:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001abb7:	0f 84 56 02 00 00    	je     c001ae13 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001abbd:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001abc0:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001abc3:	75 0a                	jne    c001abcf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001abc5:	b8 07 00 00 00       	mov    eax,0x7
c001abca:	e9 49 02 00 00       	jmp    c001ae18 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001abcf:	50                   	push   eax
c001abd0:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001abd4:	50                   	push   eax
c001abd5:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001abdc:	53                   	push   ebx
c001abdd:	8b 06                	mov    eax,DWORD PTR [esi]
c001abdf:	c1 e0 0b             	shl    eax,0xb
c001abe2:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001abe5:	c1 e8 0b             	shr    eax,0xb
c001abe8:	50                   	push   eax
c001abe9:	e8 ad fc ff ff       	call   c001a89b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001abee:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001abf1:	83 c4 10             	add    esp,0x10
c001abf4:	89 c1                	mov    ecx,eax
c001abf6:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001abf9:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001abff:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001ac02:	84 db                	test   bl,bl
c001ac04:	0f 85 90 00 00 00    	jne    c001ac9a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001ac0a:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001ac10:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ac16:	29 c7                	sub    edi,eax
c001ac18:	89 fb                	mov    ebx,edi
c001ac1a:	c1 fb 1f             	sar    ebx,0x1f
c001ac1d:	01 f8                	add    eax,edi
c001ac1f:	11 da                	adc    edx,ebx
c001ac21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac25:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ac29:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001ac2c:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001ac2f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001ac32:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ac35:	89 04 24             	mov    DWORD PTR [esp],eax
c001ac38:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ac3c:	89 d8                	mov    eax,ebx
c001ac3e:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001ac41:	ba 00 00 00 00       	mov    edx,0x0
c001ac46:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001ac4a:	b8 00 00 00 00       	mov    eax,0x0
c001ac4f:	73 0b                	jae    c001ac5c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001ac51:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ac54:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac58:	29 f8                	sub    eax,edi
c001ac5a:	19 da                	sbb    edx,ebx
c001ac5c:	89 d3                	mov    ebx,edx
c001ac5e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001ac61:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001ac64:	09 c3                	or     ebx,eax
c001ac66:	0f 84 59 ff ff ff    	je     c001abc5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001ac6c:	55                   	push   ebp
c001ac6d:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001ac71:	50                   	push   eax
c001ac72:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001ac79:	53                   	push   ebx
c001ac7a:	8b 06                	mov    eax,DWORD PTR [esi]
c001ac7c:	c1 e0 0b             	shl    eax,0xb
c001ac7f:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001ac83:	c1 e8 0b             	shr    eax,0xb
c001ac86:	50                   	push   eax
c001ac87:	e8 0f fc ff ff       	call   c001a89b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ac8c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ac8f:	83 c4 10             	add    esp,0x10
c001ac92:	25 ff 07 00 00       	and    eax,0x7ff
c001ac97:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001ac9a:	57                   	push   edi
c001ac9b:	6a 28                	push   0x28
c001ac9d:	6a 00                	push   0x0
c001ac9f:	8d 44 24 24          	lea    eax,[esp+0x24]
c001aca3:	50                   	push   eax
c001aca4:	e8 5f 59 fe ff       	call   c0000608 <memset>
c001aca9:	31 d2                	xor    edx,edx
c001acab:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001acae:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001acb4:	89 f8                	mov    eax,edi
c001acb6:	83 c0 21             	add    eax,0x21
c001acb9:	83 d2 00             	adc    edx,0x0
c001acbc:	89 c7                	mov    edi,eax
c001acbe:	89 d5                	mov    ebp,edx
c001acc0:	83 c4 10             	add    esp,0x10
c001acc3:	31 c9                	xor    ecx,ecx
c001acc5:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001accc:	83 f9 28             	cmp    ecx,0x28
c001accf:	88 04 24             	mov    BYTE PTR [esp],al
c001acd2:	0f 94 c2             	sete   dl
c001acd5:	88 d0                	mov    al,dl
c001acd7:	ba ff 07 00 00       	mov    edx,0x7ff
c001acdc:	39 fa                	cmp    edx,edi
c001acde:	ba 00 00 00 00       	mov    edx,0x0
c001ace3:	19 ea                	sbb    edx,ebp
c001ace5:	0f 92 c2             	setb   dl
c001ace8:	09 c2                	or     edx,eax
c001acea:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001acee:	0f 94 c0             	sete   al
c001acf1:	08 d0                	or     al,dl
c001acf3:	75 16                	jne    c001ad0b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001acf5:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001acf9:	74 10                	je     c001ad0b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001acfb:	8a 04 24             	mov    al,BYTE PTR [esp]
c001acfe:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001ad02:	41                   	inc    ecx
c001ad03:	83 c7 01             	add    edi,0x1
c001ad06:	83 d5 00             	adc    ebp,0x0
c001ad09:	eb ba                	jmp    c001acc5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001ad0b:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001ad12:	83 ec 0c             	sub    esp,0xc
c001ad15:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001ad19:	57                   	push   edi
c001ad1a:	e8 06 59 fe ff       	call   c0000625 <strlen>
c001ad1f:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001ad27:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001ad2b:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001ad32:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ad35:	5a                   	pop    edx
c001ad36:	25 ff 07 00 00       	and    eax,0x7ff
c001ad3b:	01 c8                	add    eax,ecx
c001ad3d:	59                   	pop    ecx
c001ad3e:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001ad44:	83 e0 02             	and    eax,0x2
c001ad47:	3c 01                	cmp    al,0x1
c001ad49:	19 c0                	sbb    eax,eax
c001ad4b:	83 c0 02             	add    eax,0x2
c001ad4e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001ad52:	57                   	push   edi
c001ad53:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001ad57:	50                   	push   eax
c001ad58:	e8 4a 59 fe ff       	call   c00006a7 <strcpy>
c001ad5d:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001ad61:	83 c4 10             	add    esp,0x10
c001ad64:	84 c0                	test   al,al
c001ad66:	75 21                	jne    c001ad89 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001ad68:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001ad70:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001ad78:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001ad80:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001ad87:	eb 28                	jmp    c001adb1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001ad89:	fe c8                	dec    al
c001ad8b:	75 24                	jne    c001adb1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001ad8d:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001ad95:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001ad9d:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001ada5:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001adac:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001adb1:	0f b6 fb             	movzx  edi,bl
c001adb4:	31 db                	xor    ebx,ebx
c001adb6:	50                   	push   eax
c001adb7:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001adbe:	8d 44 24 48          	lea    eax,[esp+0x48]
c001adc2:	50                   	push   eax
c001adc3:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001adca:	e8 03 58 fe ff       	call   c00005d2 <memcpy>
c001adcf:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001add6:	89 f9                	mov    ecx,edi
c001add8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001adde:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001ade1:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001ade4:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001ade7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001adea:	83 c4 10             	add    esp,0x10
c001aded:	39 c7                	cmp    edi,eax
c001adef:	89 df                	mov    edi,ebx
c001adf1:	19 d7                	sbb    edi,edx
c001adf3:	72 10                	jb     c001ae05 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001adf5:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001adfc:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001ae03:	eb 0a                	jmp    c001ae0f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001ae05:	29 c8                	sub    eax,ecx
c001ae07:	19 da                	sbb    edx,ebx
c001ae09:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001ae0c:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001ae0f:	31 c0                	xor    eax,eax
c001ae11:	eb 05                	jmp    c001ae18 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001ae13:	b8 04 00 00 00       	mov    eax,0x4
c001ae18:	81 c4 5c 09 00 00    	add    esp,0x95c
c001ae1e:	5b                   	pop    ebx
c001ae1f:	5e                   	pop    esi
c001ae20:	5f                   	pop    edi
c001ae21:	5d                   	pop    ebp
c001ae22:	c3                   	ret    

c001ae23 <readRoot(unsigned int*, unsigned int*, char)>:
c001ae23:	81 ec 40 08 00 00    	sub    esp,0x840
c001ae29:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001ae31:	50                   	push   eax
c001ae32:	8d 44 24 38          	lea    eax,[esp+0x38]
c001ae36:	50                   	push   eax
c001ae37:	6a 10                	push   0x10
c001ae39:	e8 5d fa ff ff       	call   c001a89b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ae3e:	83 c4 0c             	add    esp,0xc
c001ae41:	6a 22                	push   0x22
c001ae43:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001ae4a:	50                   	push   eax
c001ae4b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001ae4f:	50                   	push   eax
c001ae50:	e8 7d 57 fe ff       	call   c00005d2 <memcpy>
c001ae55:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001ae5c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ae60:	89 10                	mov    DWORD PTR [eax],edx
c001ae62:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001ae69:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ae6d:	89 10                	mov    DWORD PTR [eax],edx
c001ae6f:	b0 01                	mov    al,0x1
c001ae71:	81 c4 4c 08 00 00    	add    esp,0x84c
c001ae77:	c3                   	ret    

c001ae78 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001ae78:	55                   	push   ebp
c001ae79:	57                   	push   edi
c001ae7a:	56                   	push   esi
c001ae7b:	53                   	push   ebx
c001ae7c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ae82:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001ae89:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001ae90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ae94:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001ae98:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ae9c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001aea0:	75 03                	jne    c001aea5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001aea2:	83 c3 02             	add    ebx,0x2
c001aea5:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001aea8:	75 03                	jne    c001aead <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001aeaa:	43                   	inc    ebx
c001aeab:	eb f8                	jmp    c001aea5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001aead:	51                   	push   ecx
c001aeae:	68 00 01 00 00       	push   0x100
c001aeb3:	6a 00                	push   0x0
c001aeb5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aeb9:	50                   	push   eax
c001aeba:	e8 49 57 fe ff       	call   c0000608 <memset>
c001aebf:	83 c4 10             	add    esp,0x10
c001aec2:	31 d2                	xor    edx,edx
c001aec4:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001aec7:	84 c0                	test   al,al
c001aec9:	74 21                	je     c001aeec <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001aecb:	3c 2f                	cmp    al,0x2f
c001aecd:	75 0b                	jne    c001aeda <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001aecf:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001aed3:	bd 01 00 00 00       	mov    ebp,0x1
c001aed8:	eb 14                	jmp    c001aeee <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001aeda:	8d 48 9f             	lea    ecx,[eax-0x61]
c001aedd:	80 f9 19             	cmp    cl,0x19
c001aee0:	77 03                	ja     c001aee5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001aee2:	83 e8 20             	sub    eax,0x20
c001aee5:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001aee9:	42                   	inc    edx
c001aeea:	eb d8                	jmp    c001aec4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001aeec:	31 ed                	xor    ebp,ebp
c001aeee:	83 ec 0c             	sub    esp,0xc
c001aef1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001aef8:	e8 6d 10 ff ff       	call   c000bf6a <malloc>
c001aefd:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001af04:	89 c6                	mov    esi,eax
c001af06:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001af0c:	c1 ef 0b             	shr    edi,0xb
c001af0f:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001af16:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001af1a:	83 c4 10             	add    esp,0x10
c001af1d:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001af22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001af26:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001af2d:	74 28                	je     c001af57 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001af2f:	52                   	push   edx
c001af30:	57                   	push   edi
c001af31:	50                   	push   eax
c001af32:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001af36:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af3d:	e8 59 f9 ff ff       	call   c001a89b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001af42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af46:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001af4d:	05 00 08 00 00       	add    eax,0x800
c001af52:	83 c4 10             	add    esp,0x10
c001af55:	eb cb                	jmp    c001af22 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001af57:	83 ec 0c             	sub    esp,0xc
c001af5a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001af5e:	57                   	push   edi
c001af5f:	e8 c1 56 fe ff       	call   c0000625 <strlen>
c001af64:	50                   	push   eax
c001af65:	57                   	push   edi
c001af66:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001af6d:	56                   	push   esi
c001af6e:	e8 e6 f8 ff ff       	call   c001a859 <__memmem(unsigned char*, int, unsigned char*, int)>
c001af73:	83 c4 20             	add    esp,0x20
c001af76:	85 c0                	test   eax,eax
c001af78:	75 13                	jne    c001af8d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001af7a:	83 ec 0c             	sub    esp,0xc
c001af7d:	56                   	push   esi
c001af7e:	e8 f7 0f ff ff       	call   c000bf7a <free>
c001af83:	83 c4 10             	add    esp,0x10
c001af86:	31 c0                	xor    eax,eax
c001af88:	e9 b3 00 00 00       	jmp    c001b040 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001af8d:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001af91:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001af95:	c1 e7 08             	shl    edi,0x8
c001af98:	c1 e2 10             	shl    edx,0x10
c001af9b:	09 d7                	or     edi,edx
c001af9d:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001afa1:	09 d7                	or     edi,edx
c001afa3:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001afa7:	c1 e2 18             	shl    edx,0x18
c001afaa:	09 d7                	or     edi,edx
c001afac:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001afb0:	89 d1                	mov    ecx,edx
c001afb2:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001afb6:	c1 e1 08             	shl    ecx,0x8
c001afb9:	c1 e2 10             	shl    edx,0x10
c001afbc:	09 ca                	or     edx,ecx
c001afbe:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001afc2:	09 ca                	or     edx,ecx
c001afc4:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001afc8:	c1 e1 18             	shl    ecx,0x18
c001afcb:	09 ca                	or     edx,ecx
c001afcd:	89 e9                	mov    ecx,ebp
c001afcf:	84 c9                	test   cl,cl
c001afd1:	74 3c                	je     c001b00f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001afd3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001afd7:	83 ec 0c             	sub    esp,0xc
c001afda:	56                   	push   esi
c001afdb:	e8 9a 0f ff ff       	call   c000bf7a <free>
c001afe0:	83 c4 0c             	add    esp,0xc
c001afe3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001afea:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001afef:	50                   	push   eax
c001aff0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001aff7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001affe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b002:	52                   	push   edx
c001b003:	57                   	push   edi
c001b004:	53                   	push   ebx
c001b005:	e8 6e fe ff ff       	call   c001ae78 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b00a:	83 c4 20             	add    esp,0x20
c001b00d:	eb 31                	jmp    c001b040 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b00f:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001b012:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001b019:	d0 e8                	shr    al,1
c001b01b:	89 3b                	mov    DWORD PTR [ebx],edi
c001b01d:	83 e0 01             	and    eax,0x1
c001b020:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b027:	83 ec 0c             	sub    esp,0xc
c001b02a:	89 13                	mov    DWORD PTR [ebx],edx
c001b02c:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001b033:	89 03                	mov    DWORD PTR [ebx],eax
c001b035:	56                   	push   esi
c001b036:	e8 3f 0f ff ff       	call   c000bf7a <free>
c001b03b:	83 c4 10             	add    esp,0x10
c001b03e:	b0 01                	mov    al,0x1
c001b040:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b046:	5b                   	pop    ebx
c001b047:	5e                   	pop    esi
c001b048:	5f                   	pop    edi
c001b049:	5d                   	pop    ebp
c001b04a:	c3                   	ret    

c001b04b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001b04b:	55                   	push   ebp
c001b04c:	57                   	push   edi
c001b04d:	56                   	push   esi
c001b04e:	53                   	push   ebx
c001b04f:	83 ec 20             	sub    esp,0x20
c001b052:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b056:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001b05a:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001b05e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b066:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b06e:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001b073:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001b079:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001b07f:	57                   	push   edi
c001b080:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b084:	50                   	push   eax
c001b085:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b089:	50                   	push   eax
c001b08a:	e8 94 fd ff ff       	call   c001ae23 <readRoot(unsigned int*, unsigned int*, char)>
c001b08f:	5a                   	pop    edx
c001b090:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b094:	e8 8c 55 fe ff       	call   c0000625 <strlen>
c001b099:	83 c4 10             	add    esp,0x10
c001b09c:	83 f8 03             	cmp    eax,0x3
c001b09f:	77 17                	ja     c001b0b8 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b0a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b0a5:	89 03                	mov    DWORD PTR [ebx],eax
c001b0a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b0ab:	89 06                	mov    DWORD PTR [esi],eax
c001b0ad:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001b0b4:	b0 01                	mov    al,0x1
c001b0b6:	eb 19                	jmp    c001b0d1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001b0b8:	50                   	push   eax
c001b0b9:	55                   	push   ebp
c001b0ba:	57                   	push   edi
c001b0bb:	56                   	push   esi
c001b0bc:	53                   	push   ebx
c001b0bd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b0c1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b0c5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b0c9:	e8 aa fd ff ff       	call   c001ae78 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b0ce:	83 c4 20             	add    esp,0x20
c001b0d1:	83 c4 1c             	add    esp,0x1c
c001b0d4:	5b                   	pop    ebx
c001b0d5:	5e                   	pop    esi
c001b0d6:	5f                   	pop    edi
c001b0d7:	5d                   	pop    ebp
c001b0d8:	c3                   	ret    
c001b0d9:	90                   	nop

c001b0da <ISO9660::open(char const*, void**, FileOpenMode)>:
c001b0da:	57                   	push   edi
c001b0db:	56                   	push   esi
c001b0dc:	53                   	push   ebx
c001b0dd:	83 ec 10             	sub    esp,0x10
c001b0e0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b0e4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b0e8:	85 ff                	test   edi,edi
c001b0ea:	74 7b                	je     c001b167 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001b0ec:	85 f6                	test   esi,esi
c001b0ee:	74 77                	je     c001b167 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001b0f0:	83 ec 0c             	sub    esp,0xc
c001b0f3:	6a 1c                	push   0x1c
c001b0f5:	e8 70 0e ff ff       	call   c000bf6a <malloc>
c001b0fa:	89 07                	mov    DWORD PTR [edi],eax
c001b0fc:	89 c3                	mov    ebx,eax
c001b0fe:	58                   	pop    eax
c001b0ff:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b103:	50                   	push   eax
c001b104:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001b107:	50                   	push   eax
c001b108:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b10c:	50                   	push   eax
c001b10d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b111:	50                   	push   eax
c001b112:	56                   	push   esi
c001b113:	e8 33 ff ff ff       	call   c001b04b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b118:	83 c4 20             	add    esp,0x20
c001b11b:	84 c0                	test   al,al
c001b11d:	74 07                	je     c001b126 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001b11f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b124:	74 0b                	je     c001b131 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001b126:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001b12a:	b8 01 00 00 00       	mov    eax,0x1
c001b12f:	eb 3b                	jmp    c001b16c <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001b131:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b135:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001b139:	89 03                	mov    DWORD PTR [ebx],eax
c001b13b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001b142:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b146:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001b14d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b154:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b157:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b15e:	8a 06                	mov    al,BYTE PTR [esi]
c001b160:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001b163:	31 c0                	xor    eax,eax
c001b165:	eb 05                	jmp    c001b16c <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001b167:	b8 04 00 00 00       	mov    eax,0x4
c001b16c:	83 c4 10             	add    esp,0x10
c001b16f:	5b                   	pop    ebx
c001b170:	5e                   	pop    esi
c001b171:	5f                   	pop    edi
c001b172:	c3                   	ret    
c001b173:	90                   	nop

c001b174 <ISO9660::exists(char const*)>:
c001b174:	83 ec 28             	sub    esp,0x28
c001b177:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b17b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b17f:	52                   	push   edx
c001b180:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001b183:	52                   	push   edx
c001b184:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001b188:	52                   	push   edx
c001b189:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001b18d:	52                   	push   edx
c001b18e:	50                   	push   eax
c001b18f:	e8 b7 fe ff ff       	call   c001b04b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b194:	83 c4 3c             	add    esp,0x3c
c001b197:	c3                   	ret    

c001b198 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001b198:	56                   	push   esi
c001b199:	53                   	push   ebx
c001b19a:	83 ec 14             	sub    esp,0x14
c001b19d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b1a1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b1a5:	85 db                	test   ebx,ebx
c001b1a7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b1ab:	0f 94 c2             	sete   dl
c001b1ae:	85 f6                	test   esi,esi
c001b1b0:	0f 94 c0             	sete   al
c001b1b3:	08 c2                	or     dl,al
c001b1b5:	75 68                	jne    c001b21f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001b1b7:	85 c9                	test   ecx,ecx
c001b1b9:	74 64                	je     c001b21f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001b1bb:	83 ec 0c             	sub    esp,0xc
c001b1be:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b1c1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b1c5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001b1cb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b1d2:	50                   	push   eax
c001b1d3:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001b1d6:	50                   	push   eax
c001b1d7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b1db:	50                   	push   eax
c001b1dc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b1e0:	50                   	push   eax
c001b1e1:	51                   	push   ecx
c001b1e2:	e8 64 fe ff ff       	call   c001b04b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b1e7:	83 c4 20             	add    esp,0x20
c001b1ea:	ba 01 00 00 00       	mov    edx,0x1
c001b1ef:	84 c0                	test   al,al
c001b1f1:	74 31                	je     c001b224 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b1f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1f7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b1fe:	89 03                	mov    DWORD PTR [ebx],eax
c001b200:	ba 00 00 00 00       	mov    edx,0x0
c001b205:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b209:	85 c0                	test   eax,eax
c001b20b:	0f 95 06             	setne  BYTE PTR [esi]
c001b20e:	74 14                	je     c001b224 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b210:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001b216:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b21d:	eb 05                	jmp    c001b224 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b21f:	ba 04 00 00 00       	mov    edx,0x4
c001b224:	83 c4 14             	add    esp,0x14
c001b227:	89 d0                	mov    eax,edx
c001b229:	5b                   	pop    ebx
c001b22a:	5e                   	pop    esi
c001b22b:	c3                   	ret    

c001b22c <ISO9660::openDir(char const*, void**)>:
c001b22c:	57                   	push   edi
c001b22d:	56                   	push   esi
c001b22e:	53                   	push   ebx
c001b22f:	83 ec 10             	sub    esp,0x10
c001b232:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b236:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b23a:	85 ff                	test   edi,edi
c001b23c:	0f 84 95 00 00 00    	je     c001b2d7 <ISO9660::openDir(char const*, void**)+0xab>
c001b242:	85 f6                	test   esi,esi
c001b244:	0f 84 8d 00 00 00    	je     c001b2d7 <ISO9660::openDir(char const*, void**)+0xab>
c001b24a:	83 ec 0c             	sub    esp,0xc
c001b24d:	6a 1c                	push   0x1c
c001b24f:	e8 16 0d ff ff       	call   c000bf6a <malloc>
c001b254:	89 07                	mov    DWORD PTR [edi],eax
c001b256:	89 c3                	mov    ebx,eax
c001b258:	59                   	pop    ecx
c001b259:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b25d:	50                   	push   eax
c001b25e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001b261:	50                   	push   eax
c001b262:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b266:	50                   	push   eax
c001b267:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b26b:	50                   	push   eax
c001b26c:	56                   	push   esi
c001b26d:	e8 d9 fd ff ff       	call   c001b04b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b272:	83 c4 20             	add    esp,0x20
c001b275:	84 c0                	test   al,al
c001b277:	74 07                	je     c001b280 <ISO9660::openDir(char const*, void**)+0x54>
c001b279:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b27e:	75 21                	jne    c001b2a1 <ISO9660::openDir(char const*, void**)+0x75>
c001b280:	0f b6 c0             	movzx  eax,al
c001b283:	52                   	push   edx
c001b284:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b288:	50                   	push   eax
c001b289:	68 82 29 02 c0       	push   0xc0022982
c001b28e:	e8 8c 3e ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001b293:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001b297:	83 c4 10             	add    esp,0x10
c001b29a:	b8 01 00 00 00       	mov    eax,0x1
c001b29f:	eb 3b                	jmp    c001b2dc <ISO9660::openDir(char const*, void**)+0xb0>
c001b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b2a5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001b2a9:	89 03                	mov    DWORD PTR [ebx],eax
c001b2ab:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001b2b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b2b6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001b2bd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b2c4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b2c7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b2ce:	8a 06                	mov    al,BYTE PTR [esi]
c001b2d0:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001b2d3:	31 c0                	xor    eax,eax
c001b2d5:	eb 05                	jmp    c001b2dc <ISO9660::openDir(char const*, void**)+0xb0>
c001b2d7:	b8 04 00 00 00       	mov    eax,0x4
c001b2dc:	83 c4 10             	add    esp,0x10
c001b2df:	5b                   	pop    ebx
c001b2e0:	5e                   	pop    esi
c001b2e1:	5f                   	pop    edi
c001b2e2:	c3                   	ret    
c001b2e3:	90                   	nop

c001b2e4 <ISO9660::ISO9660()>:
c001b2e4:	83 ec 0c             	sub    esp,0xc
c001b2e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2eb:	83 ec 0c             	sub    esp,0xc
c001b2ee:	50                   	push   eax
c001b2ef:	e8 30 41 ff ff       	call   c000f424 <Filesystem::Filesystem()>
c001b2f4:	83 c4 10             	add    esp,0x10
c001b2f7:	ba a8 29 02 c0       	mov    edx,0xc00229a8
c001b2fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b300:	89 10                	mov    DWORD PTR [eax],edx
c001b302:	90                   	nop
c001b303:	83 c4 0c             	add    esp,0xc
c001b306:	c3                   	ret    
c001b307:	90                   	nop

c001b308 <SoundChannel::~SoundChannel()>:
c001b308:	83 ec 0c             	sub    esp,0xc
c001b30b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b30f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b312:	83 ec 0c             	sub    esp,0xc
c001b315:	50                   	push   eax
c001b316:	e8 5f 0c ff ff       	call   c000bf7a <free>
c001b31b:	83 c4 10             	add    esp,0x10
c001b31e:	90                   	nop
c001b31f:	83 c4 0c             	add    esp,0xc
c001b322:	c3                   	ret    
c001b323:	90                   	nop

c001b324 <SoundChannel::setSpeed(float)>:
c001b324:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b328:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001b32c:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001b32f:	c3                   	ret    

c001b330 <SoundChannel::getSpeed()>:
c001b330:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b334:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001b337:	c3                   	ret    

c001b338 <SoundChannel::setVolume(int)>:
c001b338:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b33c:	83 f8 64             	cmp    eax,0x64
c001b33f:	7e 05                	jle    c001b346 <SoundChannel::setVolume(int)+0xe>
c001b341:	b8 64 00 00 00       	mov    eax,0x64
c001b346:	85 c0                	test   eax,eax
c001b348:	79 02                	jns    c001b34c <SoundChannel::setVolume(int)+0x14>
c001b34a:	31 c0                	xor    eax,eax
c001b34c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b350:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001b353:	c3                   	ret    

c001b354 <SoundChannel::getVolume()>:
c001b354:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b358:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b35b:	c3                   	ret    

c001b35c <SoundChannel::pause()>:
c001b35c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b360:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001b364:	c3                   	ret    
c001b365:	90                   	nop

c001b366 <SoundChannel::SoundChannel(int, int, int, int)>:
c001b366:	83 ec 1c             	sub    esp,0x1c
c001b369:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b36d:	e8 ea ff ff ff       	call   c001b35c <SoundChannel::pause()>
c001b372:	83 c4 04             	add    esp,0x4
c001b375:	6a 50                	push   0x50
c001b377:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b37b:	e8 b8 ff ff ff       	call   c001b338 <SoundChannel::setVolume(int)>
c001b380:	83 c4 08             	add    esp,0x8
c001b383:	d9 e8                	fld1   
c001b385:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001b389:	d9 1c 24             	fstp   DWORD PTR [esp]
c001b38c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b390:	e8 8f ff ff ff       	call   c001b324 <SoundChannel::setSpeed(float)>
c001b395:	83 c4 08             	add    esp,0x8
c001b398:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b39c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b3a0:	89 10                	mov    DWORD PTR [eax],edx
c001b3a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3a6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b3aa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b3ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3b1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b3b5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001b3b8:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001b3bd:	75 23                	jne    c001b3e2 <SoundChannel::SoundChannel(int, int, int, int)+0x7c>
c001b3bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3c3:	8b 10                	mov    edx,DWORD PTR [eax]
c001b3c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3c9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b3cc:	0f af c2             	imul   eax,edx
c001b3cf:	85 c0                	test   eax,eax
c001b3d1:	79 03                	jns    c001b3d6 <SoundChannel::SoundChannel(int, int, int, int)+0x70>
c001b3d3:	83 c0 03             	add    eax,0x3
c001b3d6:	c1 f8 02             	sar    eax,0x2
c001b3d9:	05 a0 0f 00 00       	add    eax,0xfa0
c001b3de:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b3e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3e6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b3ea:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001b3ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3f1:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001b3f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3fc:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001b403:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b407:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b40a:	c1 e0 02             	shl    eax,0x2
c001b40d:	83 ec 0c             	sub    esp,0xc
c001b410:	50                   	push   eax
c001b411:	e8 54 0b ff ff       	call   c000bf6a <malloc>
c001b416:	83 c4 10             	add    esp,0x10
c001b419:	89 c2                	mov    edx,eax
c001b41b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b41f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001b422:	83 ec 04             	sub    esp,0x4
c001b425:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b429:	50                   	push   eax
c001b42a:	6a 01                	push   0x1
c001b42c:	6a 04                	push   0x4
c001b42e:	e8 18 d4 fe ff       	call   c000884b <src_new>
c001b433:	83 c4 10             	add    esp,0x10
c001b436:	89 c2                	mov    edx,eax
c001b438:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b43c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001b43f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b443:	85 c0                	test   eax,eax
c001b445:	74 10                	je     c001b457 <SoundChannel::SoundChannel(int, int, int, int)+0xf1>
c001b447:	83 ec 0c             	sub    esp,0xc
c001b44a:	68 04 2a 02 c0       	push   0xc0022a04
c001b44f:	e8 ca 9d ff ff       	call   c001521e <Krnl::panic(char const*)>
c001b454:	83 c4 10             	add    esp,0x10
c001b457:	90                   	nop
c001b458:	83 c4 1c             	add    esp,0x1c
c001b45b:	c3                   	ret    

c001b45c <SoundChannel::play()>:
c001b45c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b460:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001b464:	c3                   	ret    
c001b465:	90                   	nop

c001b466 <SoundChannel::paused()>:
c001b466:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b46a:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001b46d:	c3                   	ret    

c001b46e <SoundChannel::getSampleRate()>:
c001b46e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b472:	8b 00                	mov    eax,DWORD PTR [eax]
c001b474:	c3                   	ret    
c001b475:	90                   	nop

c001b476 <SoundChannel::getBits()>:
c001b476:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b47a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b47d:	c3                   	ret    

c001b47e <SoundChannel::getBufferUsed()>:
c001b47e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b482:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001b485:	c3                   	ret    

c001b486 <SoundChannel::getBufferSize()>:
c001b486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b48a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b48d:	c3                   	ret    

c001b48e <SoundChannel::unbuffer(float*, int, int)>:
c001b48e:	53                   	push   ebx
c001b48f:	83 ec 40             	sub    esp,0x40
c001b492:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001b496:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001b49e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b4a1:	db 03                	fild   DWORD PTR [ebx]
c001b4a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b4a7:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001b4ab:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001b4ae:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001b4b1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b4b5:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001b4b9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001b4bd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b4c1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b4c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b4c9:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b4cd:	50                   	push   eax
c001b4ce:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001b4d1:	e8 2f d0 fe ff       	call   c0008505 <src_process>
c001b4d6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b4da:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001b4dd:	83 c4 0c             	add    esp,0xc
c001b4e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b4e3:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001b4e6:	29 d0                	sub    eax,edx
c001b4e8:	c1 e0 02             	shl    eax,0x2
c001b4eb:	50                   	push   eax
c001b4ec:	8d 04 91             	lea    eax,[ecx+edx*4]
c001b4ef:	50                   	push   eax
c001b4f0:	51                   	push   ecx
c001b4f1:	e8 a4 50 fe ff       	call   c000059a <memmove>
c001b4f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b4fa:	83 c4 48             	add    esp,0x48
c001b4fd:	5b                   	pop    ebx
c001b4fe:	c3                   	ret    
c001b4ff:	90                   	nop

c001b500 <SoundChannel::buffer8(unsigned char*, int)>:
c001b500:	53                   	push   ebx
c001b501:	31 c0                	xor    eax,eax
c001b503:	83 ec 08             	sub    esp,0x8
c001b506:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b50a:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001b50d:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001b510:	74 35                	je     c001b547 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001b512:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001b516:	7d 2f                	jge    c001b547 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001b518:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b51c:	d9 05 20 2a 02 c0    	fld    DWORD PTR ds:0xc0022a20
c001b522:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001b526:	40                   	inc    eax
c001b527:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001b52c:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001b52f:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001b533:	8d 59 01             	lea    ebx,[ecx+0x1]
c001b536:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001b539:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001b53c:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001b53f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b542:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001b545:	eb c9                	jmp    c001b510 <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001b547:	83 c4 08             	add    esp,0x8
c001b54a:	5b                   	pop    ebx
c001b54b:	c3                   	ret    

c001b54c <SoundDevice::SoundDevice(char const*)>:
c001b54c:	83 ec 1c             	sub    esp,0x1c
c001b54f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b553:	83 ec 08             	sub    esp,0x8
c001b556:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b55a:	50                   	push   eax
c001b55b:	e8 ba 51 ff ff       	call   c001071a <Device::Device(char const*)>
c001b560:	83 c4 10             	add    esp,0x10
c001b563:	ba 2c 2a 02 c0       	mov    edx,0xc0022a2c
c001b568:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b56c:	89 10                	mov    DWORD PTR [eax],edx
c001b56e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b572:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001b57c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b580:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b58a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b592:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b597:	7f 19                	jg     c001b5b2 <SoundDevice::SoundDevice(char const*)+0x66>
c001b599:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b59d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b5a1:	83 c2 54             	add    edx,0x54
c001b5a4:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001b5ac:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b5b0:	eb e0                	jmp    c001b592 <SoundDevice::SoundDevice(char const*)+0x46>
c001b5b2:	90                   	nop
c001b5b3:	83 c4 1c             	add    esp,0x1c
c001b5b6:	c3                   	ret    
c001b5b7:	90                   	nop

c001b5b8 <SoundDevice::~SoundDevice()>:
c001b5b8:	53                   	push   ebx
c001b5b9:	83 ec 18             	sub    esp,0x18
c001b5bc:	ba 2c 2a 02 c0       	mov    edx,0xc0022a2c
c001b5c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5c5:	89 10                	mov    DWORD PTR [eax],edx
c001b5c7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b5cf:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b5d4:	7f 46                	jg     c001b61c <SoundDevice::~SoundDevice()+0x64>
c001b5d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b5de:	83 c2 54             	add    edx,0x54
c001b5e1:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001b5e5:	85 c0                	test   eax,eax
c001b5e7:	74 2d                	je     c001b616 <SoundDevice::~SoundDevice()+0x5e>
c001b5e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b5f1:	83 c2 54             	add    edx,0x54
c001b5f4:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001b5f8:	85 db                	test   ebx,ebx
c001b5fa:	74 1a                	je     c001b616 <SoundDevice::~SoundDevice()+0x5e>
c001b5fc:	83 ec 0c             	sub    esp,0xc
c001b5ff:	53                   	push   ebx
c001b600:	e8 03 fd ff ff       	call   c001b308 <SoundChannel::~SoundChannel()>
c001b605:	83 c4 10             	add    esp,0x10
c001b608:	83 ec 08             	sub    esp,0x8
c001b60b:	6a 2c                	push   0x2c
c001b60d:	53                   	push   ebx
c001b60e:	e8 2c 3a ff ff       	call   c000f03f <operator delete(void*, unsigned long)>
c001b613:	83 c4 10             	add    esp,0x10
c001b616:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b61a:	eb b3                	jmp    c001b5cf <SoundDevice::~SoundDevice()+0x17>
c001b61c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b620:	83 ec 0c             	sub    esp,0xc
c001b623:	50                   	push   eax
c001b624:	e8 a3 4d ff ff       	call   c00103cc <Device::~Device()>
c001b629:	83 c4 10             	add    esp,0x10
c001b62c:	90                   	nop
c001b62d:	83 c4 18             	add    esp,0x18
c001b630:	5b                   	pop    ebx
c001b631:	c3                   	ret    

c001b632 <SoundDevice::~SoundDevice()>:
c001b632:	83 ec 0c             	sub    esp,0xc
c001b635:	83 ec 0c             	sub    esp,0xc
c001b638:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b63c:	e8 77 ff ff ff       	call   c001b5b8 <SoundDevice::~SoundDevice()>
c001b641:	83 c4 10             	add    esp,0x10
c001b644:	83 ec 08             	sub    esp,0x8
c001b647:	68 e4 01 00 00       	push   0x1e4
c001b64c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b650:	e8 ea 39 ff ff       	call   c000f03f <operator delete(void*, unsigned long)>
c001b655:	83 c4 10             	add    esp,0x10
c001b658:	83 c4 0c             	add    esp,0xc
c001b65b:	c3                   	ret    

c001b65c <SoundDevice::getFreeChannelNum()>:
c001b65c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b660:	31 c0                	xor    eax,eax
c001b662:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001b66a:	74 09                	je     c001b675 <SoundDevice::getFreeChannelNum()+0x19>
c001b66c:	40                   	inc    eax
c001b66d:	83 f8 20             	cmp    eax,0x20
c001b670:	75 f0                	jne    c001b662 <SoundDevice::getFreeChannelNum()+0x6>
c001b672:	83 c8 ff             	or     eax,0xffffffff
c001b675:	c3                   	ret    

c001b676 <SoundDevice::addChannel(SoundChannel*)>:
c001b676:	56                   	push   esi
c001b677:	53                   	push   ebx
c001b678:	51                   	push   ecx
c001b679:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b67d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b681:	53                   	push   ebx
c001b682:	e8 d5 ff ff ff       	call   c001b65c <SoundDevice::getFreeChannelNum()>
c001b687:	5a                   	pop    edx
c001b688:	83 f8 ff             	cmp    eax,0xffffffff
c001b68b:	74 51                	je     c001b6de <SoundDevice::addChannel(SoundChannel*)+0x68>
c001b68d:	85 f6                	test   esi,esi
c001b68f:	74 4d                	je     c001b6de <SoundDevice::addChannel(SoundChannel*)+0x68>
c001b691:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001b698:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001b69f:	75 30                	jne    c001b6d1 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001b6a1:	83 ec 0c             	sub    esp,0xc
c001b6a4:	56                   	push   esi
c001b6a5:	e8 c4 fd ff ff       	call   c001b46e <SoundChannel::getSampleRate()>
c001b6aa:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001b6b0:	89 34 24             	mov    DWORD PTR [esp],esi
c001b6b3:	e8 be fd ff ff       	call   c001b476 <SoundChannel::getBits()>
c001b6b8:	83 c4 0c             	add    esp,0xc
c001b6bb:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001b6c1:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b6c3:	50                   	push   eax
c001b6c4:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001b6ca:	53                   	push   ebx
c001b6cb:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001b6ce:	83 c4 10             	add    esp,0x10
c001b6d1:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001b6d7:	b8 01 00 00 00       	mov    eax,0x1
c001b6dc:	eb 03                	jmp    c001b6e1 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001b6de:	83 c8 ff             	or     eax,0xffffffff
c001b6e1:	5a                   	pop    edx
c001b6e2:	5b                   	pop    ebx
c001b6e3:	5e                   	pop    esi
c001b6e4:	c3                   	ret    
c001b6e5:	90                   	nop

c001b6e6 <SoundDevice::removeChannel(int)>:
c001b6e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b6ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b6ee:	83 fa 1f             	cmp    edx,0x1f
c001b6f1:	77 23                	ja     c001b716 <SoundDevice::removeChannel(int)+0x30>
c001b6f3:	8d 14 90             	lea    edx,[eax+edx*4]
c001b6f6:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001b6fd:	74 17                	je     c001b716 <SoundDevice::removeChannel(int)+0x30>
c001b6ff:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001b709:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001b70f:	75 05                	jne    c001b716 <SoundDevice::removeChannel(int)+0x30>
c001b711:	8b 00                	mov    eax,DWORD PTR [eax]
c001b713:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001b716:	c3                   	ret    
c001b717:	90                   	nop

c001b718 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001b718:	56                   	push   esi
c001b719:	53                   	push   ebx
c001b71a:	31 db                	xor    ebx,ebx
c001b71c:	83 ec 14             	sub    esp,0x14
c001b71f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b723:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001b727:	7d 55                	jge    c001b77e <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001b729:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b72d:	d9 e8                	fld1   
c001b72f:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001b732:	d8 0d 5c 2a 02 c0    	fmul   DWORD PTR ds:0xc0022a5c
c001b738:	d8 0d 60 2a 02 c0    	fmul   DWORD PTR ds:0xc0022a60
c001b73e:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001b742:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001b746:	d8 15 64 2a 02 c0    	fcom   DWORD PTR ds:0xc0022a64
c001b74c:	df e0                	fnstsw ax
c001b74e:	9e                   	sahf   
c001b74f:	72 08                	jb     c001b759 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001b751:	dd d8                	fstp   st(0)
c001b753:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001b757:	eb 22                	jmp    c001b77b <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001b759:	d9 ee                	fldz   
c001b75b:	d8 d9                	fcomp  st(1)
c001b75d:	df e0                	fnstsw ax
c001b75f:	9e                   	sahf   
c001b760:	72 08                	jb     c001b76a <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001b762:	dd d8                	fstp   st(0)
c001b764:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001b768:	eb 11                	jmp    c001b77b <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001b76a:	83 ec 10             	sub    esp,0x10
c001b76d:	d9 1c 24             	fstp   DWORD PTR [esp]
c001b770:	e8 07 36 00 00       	call   c001ed7c <lrintf>
c001b775:	83 c4 10             	add    esp,0x10
c001b778:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001b77b:	43                   	inc    ebx
c001b77c:	eb a5                	jmp    c001b723 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001b77e:	83 c4 14             	add    esp,0x14
c001b781:	5b                   	pop    ebx
c001b782:	5e                   	pop    esi
c001b783:	c3                   	ret    

c001b784 <SoundDevice::getAudio(int, float*, float*)>:
c001b784:	55                   	push   ebp
c001b785:	57                   	push   edi
c001b786:	56                   	push   esi
c001b787:	53                   	push   ebx
c001b788:	31 db                	xor    ebx,ebx
c001b78a:	83 ec 20             	sub    esp,0x20
c001b78d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b791:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b795:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b799:	c1 e0 02             	shl    eax,0x2
c001b79c:	50                   	push   eax
c001b79d:	6a 00                	push   0x0
c001b79f:	55                   	push   ebp
c001b7a0:	e8 63 4e fe ff       	call   c0000608 <memset>
c001b7a5:	83 c4 10             	add    esp,0x10
c001b7a8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b7ac:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001b7b3:	85 c0                	test   eax,eax
c001b7b5:	0f 84 94 00 00 00    	je     c001b84f <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b7bb:	83 ec 0c             	sub    esp,0xc
c001b7be:	50                   	push   eax
c001b7bf:	e8 a2 fc ff ff       	call   c001b466 <SoundChannel::paused()>
c001b7c4:	83 c4 10             	add    esp,0x10
c001b7c7:	84 c0                	test   al,al
c001b7c9:	0f 85 80 00 00 00    	jne    c001b84f <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b7cf:	83 ec 0c             	sub    esp,0xc
c001b7d2:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b7d9:	e8 76 fb ff ff       	call   c001b354 <SoundChannel::getVolume()>
c001b7de:	83 c4 10             	add    esp,0x10
c001b7e1:	85 c0                	test   eax,eax
c001b7e3:	74 6a                	je     c001b84f <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b7e5:	83 ec 0c             	sub    esp,0xc
c001b7e8:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b7ef:	e8 60 fb ff ff       	call   c001b354 <SoundChannel::getVolume()>
c001b7f4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b7f8:	d9 05 68 2a 02 c0    	fld    DWORD PTR ds:0xc0022a68
c001b7fe:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001b802:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001b806:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001b80a:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001b810:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001b814:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b81b:	e8 6e fc ff ff       	call   c001b48e <SoundChannel::unbuffer(float*, int, int)>
c001b820:	83 c4 20             	add    esp,0x20
c001b823:	31 d2                	xor    edx,edx
c001b825:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001b829:	39 c2                	cmp    edx,eax
c001b82b:	7d 1a                	jge    c001b847 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001b82d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001b831:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c001b834:	d8 c9                	fmul   st,st(1)
c001b836:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001b83c:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001b840:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001b844:	42                   	inc    edx
c001b845:	eb e2                	jmp    c001b829 <SoundDevice::getAudio(int, float*, float*)+0xa5>
c001b847:	dd d8                	fstp   st(0)
c001b849:	39 c7                	cmp    edi,eax
c001b84b:	7e 02                	jle    c001b84f <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b84d:	89 c7                	mov    edi,eax
c001b84f:	43                   	inc    ebx
c001b850:	83 fb 20             	cmp    ebx,0x20
c001b853:	0f 85 53 ff ff ff    	jne    c001b7ac <SoundDevice::getAudio(int, float*, float*)+0x28>
c001b859:	83 c4 1c             	add    esp,0x1c
c001b85c:	89 f8                	mov    eax,edi
c001b85e:	5b                   	pop    ebx
c001b85f:	5e                   	pop    esi
c001b860:	5f                   	pop    edi
c001b861:	5d                   	pop    ebp
c001b862:	c3                   	ret    
c001b863:	90                   	nop

c001b864 <PCI::open(int, int, void*)>:
c001b864:	83 ec 18             	sub    esp,0x18
c001b867:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b86b:	8b 10                	mov    edx,DWORD PTR [eax]
c001b86d:	50                   	push   eax
c001b86e:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b871:	31 c0                	xor    eax,eax
c001b873:	83 c4 1c             	add    esp,0x1c
c001b876:	c3                   	ret    
c001b877:	90                   	nop

c001b878 <PCI::close(int, int, void*)>:
c001b878:	31 c0                	xor    eax,eax
c001b87a:	c3                   	ret    
c001b87b:	90                   	nop

c001b87c <PCI::PCI()>:
c001b87c:	83 ec 0c             	sub    esp,0xc
c001b87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b883:	83 ec 08             	sub    esp,0x8
c001b886:	68 6c 2a 02 c0       	push   0xc0022a6c
c001b88b:	50                   	push   eax
c001b88c:	e8 15 45 ff ff       	call   c000fda6 <Bus::Bus(char const*)>
c001b891:	83 c4 10             	add    esp,0x10
c001b894:	ba 18 2b 02 c0       	mov    edx,0xc0022b18
c001b899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b89d:	89 10                	mov    DWORD PTR [eax],edx
c001b89f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8a3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b8a9:	0f b6 d0             	movzx  edx,al
c001b8ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8b0:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b8b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8bb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b8c1:	0f b6 d0             	movzx  edx,al
c001b8c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8c8:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b8cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8d1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b8d7:	8d 50 01             	lea    edx,[eax+0x1]
c001b8da:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b8de:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001b8e4:	0f b6 d0             	movzx  edx,al
c001b8e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8eb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b8ef:	83 c9 c0             	or     ecx,0xffffffc0
c001b8f2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b8f6:	90                   	nop
c001b8f7:	83 c4 0c             	add    esp,0xc
c001b8fa:	c3                   	ret    
c001b8fb:	90                   	nop

c001b8fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b8fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b900:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b905:	89 ca                	mov    edx,ecx
c001b907:	c1 e0 10             	shl    eax,0x10
c001b90a:	81 e2 fc 00 00 00    	and    edx,0xfc
c001b910:	09 d0                	or     eax,edx
c001b912:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001b917:	c1 e2 08             	shl    edx,0x8
c001b91a:	09 d0                	or     eax,edx
c001b91c:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001b921:	c1 e2 0b             	shl    edx,0xb
c001b924:	09 d0                	or     eax,edx
c001b926:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b92b:	0d 00 00 00 80       	or     eax,0x80000000
c001b930:	ef                   	out    dx,eax
c001b931:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b936:	ed                   	in     eax,dx
c001b937:	83 e1 02             	and    ecx,0x2
c001b93a:	0f b6 c9             	movzx  ecx,cl
c001b93d:	c1 e1 03             	shl    ecx,0x3
c001b940:	d3 e8                	shr    eax,cl
c001b942:	c3                   	ret    
c001b943:	90                   	nop

c001b944 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b944:	6a 00                	push   0x0
c001b946:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b94b:	50                   	push   eax
c001b94c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b951:	50                   	push   eax
c001b952:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b957:	50                   	push   eax
c001b958:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b95c:	e8 9b ff ff ff       	call   c001b8fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b961:	83 c4 14             	add    esp,0x14
c001b964:	c3                   	ret    
c001b965:	90                   	nop

c001b966 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b966:	6a 0e                	push   0xe
c001b968:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b96d:	50                   	push   eax
c001b96e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b973:	50                   	push   eax
c001b974:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b979:	50                   	push   eax
c001b97a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b97e:	e8 79 ff ff ff       	call   c001b8fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b983:	83 c4 14             	add    esp,0x14
c001b986:	0f b6 c0             	movzx  eax,al
c001b989:	c3                   	ret    

c001b98a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b98a:	55                   	push   ebp
c001b98b:	57                   	push   edi
c001b98c:	56                   	push   esi
c001b98d:	53                   	push   ebx
c001b98e:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b993:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b998:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001b99d:	6a 0a                	push   0xa
c001b99f:	56                   	push   esi
c001b9a0:	55                   	push   ebp
c001b9a1:	57                   	push   edi
c001b9a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b9a6:	e8 51 ff ff ff       	call   c001b8fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b9ab:	6a 0a                	push   0xa
c001b9ad:	89 c3                	mov    ebx,eax
c001b9af:	56                   	push   esi
c001b9b0:	0f b6 db             	movzx  ebx,bl
c001b9b3:	55                   	push   ebp
c001b9b4:	57                   	push   edi
c001b9b5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001b9b9:	e8 3e ff ff ff       	call   c001b8fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b9be:	83 c4 28             	add    esp,0x28
c001b9c1:	25 00 ff 00 00       	and    eax,0xff00
c001b9c6:	09 d8                	or     eax,ebx
c001b9c8:	5b                   	pop    ebx
c001b9c9:	5e                   	pop    esi
c001b9ca:	5f                   	pop    edi
c001b9cb:	5d                   	pop    ebp
c001b9cc:	c3                   	ret    
c001b9cd:	90                   	nop

c001b9ce <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b9ce:	6a 08                	push   0x8
c001b9d0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b9d5:	50                   	push   eax
c001b9d6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b9db:	50                   	push   eax
c001b9dc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b9e1:	50                   	push   eax
c001b9e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b9e6:	e8 11 ff ff ff       	call   c001b8fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b9eb:	83 c4 14             	add    esp,0x14
c001b9ee:	0f b6 c4             	movzx  eax,ah
c001b9f1:	c3                   	ret    

c001b9f2 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b9f2:	6a 08                	push   0x8
c001b9f4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b9f9:	50                   	push   eax
c001b9fa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b9ff:	50                   	push   eax
c001ba00:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ba05:	50                   	push   eax
c001ba06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ba0a:	e8 ed fe ff ff       	call   c001b8fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ba0f:	83 c4 14             	add    esp,0x14
c001ba12:	c3                   	ret    
c001ba13:	90                   	nop

c001ba14 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001ba14:	6a 3c                	push   0x3c
c001ba16:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ba1b:	50                   	push   eax
c001ba1c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ba21:	50                   	push   eax
c001ba22:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ba27:	50                   	push   eax
c001ba28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ba2c:	e8 cb fe ff ff       	call   c001b8fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ba31:	83 c4 14             	add    esp,0x14
c001ba34:	c3                   	ret    
c001ba35:	90                   	nop

c001ba36 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001ba36:	6a 18                	push   0x18
c001ba38:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ba3d:	50                   	push   eax
c001ba3e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ba43:	50                   	push   eax
c001ba44:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ba49:	50                   	push   eax
c001ba4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ba4e:	e8 a9 fe ff ff       	call   c001b8fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ba53:	83 c4 14             	add    esp,0x14
c001ba56:	0f b6 c4             	movzx  eax,ah
c001ba59:	c3                   	ret    

c001ba5a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ba5a:	55                   	push   ebp
c001ba5b:	57                   	push   edi
c001ba5c:	56                   	push   esi
c001ba5d:	53                   	push   ebx
c001ba5e:	50                   	push   eax
c001ba5f:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001ba63:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001ba68:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001ba6d:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001ba72:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001ba79:	8d 43 12             	lea    eax,[ebx+0x12]
c001ba7c:	83 c3 10             	add    ebx,0x10
c001ba7f:	0f b6 c0             	movzx  eax,al
c001ba82:	0f b6 db             	movzx  ebx,bl
c001ba85:	50                   	push   eax
c001ba86:	51                   	push   ecx
c001ba87:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ba8b:	57                   	push   edi
c001ba8c:	55                   	push   ebp
c001ba8d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ba91:	e8 66 fe ff ff       	call   c001b8fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ba96:	53                   	push   ebx
c001ba97:	89 c6                	mov    esi,eax
c001ba99:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001ba9d:	c1 e6 10             	shl    esi,0x10
c001baa0:	51                   	push   ecx
c001baa1:	57                   	push   edi
c001baa2:	55                   	push   ebp
c001baa3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001baa7:	e8 50 fe ff ff       	call   c001b8fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001baac:	83 c4 2c             	add    esp,0x2c
c001baaf:	0f b7 c0             	movzx  eax,ax
c001bab2:	5b                   	pop    ebx
c001bab3:	09 f0                	or     eax,esi
c001bab5:	5e                   	pop    esi
c001bab6:	5f                   	pop    edi
c001bab7:	5d                   	pop    ebp
c001bab8:	c3                   	ret    
c001bab9:	90                   	nop

c001baba <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001baba:	53                   	push   ebx
c001babb:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bac0:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001bac5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bac9:	c1 e1 10             	shl    ecx,0x10
c001bacc:	25 fc 00 00 00       	and    eax,0xfc
c001bad1:	09 c1                	or     ecx,eax
c001bad3:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bad8:	c1 e0 08             	shl    eax,0x8
c001badb:	09 c1                	or     ecx,eax
c001badd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001bae2:	c1 e0 0b             	shl    eax,0xb
c001bae5:	09 c1                	or     ecx,eax
c001bae7:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001baed:	89 c8                	mov    eax,ecx
c001baef:	ef                   	out    dx,eax
c001baf0:	ba fc 0c 00 00       	mov    edx,0xcfc
c001baf5:	ed                   	in     eax,dx
c001baf6:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001bafb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001bb00:	74 0a                	je     c001bb0c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001bb02:	0f b7 d8             	movzx  ebx,ax
c001bb05:	89 d0                	mov    eax,edx
c001bb07:	c1 e0 10             	shl    eax,0x10
c001bb0a:	eb 05                	jmp    c001bb11 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001bb0c:	66 31 c0             	xor    ax,ax
c001bb0f:	89 d3                	mov    ebx,edx
c001bb11:	09 c3                	or     ebx,eax
c001bb13:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bb18:	89 c8                	mov    eax,ecx
c001bb1a:	ef                   	out    dx,eax
c001bb1b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bb20:	89 d8                	mov    eax,ebx
c001bb22:	ef                   	out    dx,eax
c001bb23:	5b                   	pop    ebx
c001bb24:	c3                   	ret    
c001bb25:	90                   	nop

c001bb26 <PCI::checkBus(unsigned char)>:
c001bb26:	56                   	push   esi
c001bb27:	53                   	push   ebx
c001bb28:	31 db                	xor    ebx,ebx
c001bb2a:	51                   	push   ecx
c001bb2b:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001bb30:	52                   	push   edx
c001bb31:	53                   	push   ebx
c001bb32:	43                   	inc    ebx
c001bb33:	56                   	push   esi
c001bb34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb38:	e8 4d 03 00 00       	call   c001be8a <PCI::checkDevice(unsigned char, unsigned char)>
c001bb3d:	83 c4 10             	add    esp,0x10
c001bb40:	83 fb 20             	cmp    ebx,0x20
c001bb43:	75 eb                	jne    c001bb30 <PCI::checkBus(unsigned char)+0xa>
c001bb45:	58                   	pop    eax
c001bb46:	5b                   	pop    ebx
c001bb47:	5e                   	pop    esi
c001bb48:	c3                   	ret    
c001bb49:	90                   	nop

c001bb4a <PCI::foundDevice(PCIDeviceInfo)>:
c001bb4a:	55                   	push   ebp
c001bb4b:	57                   	push   edi
c001bb4c:	56                   	push   esi
c001bb4d:	53                   	push   ebx
c001bb4e:	83 ec 1c             	sub    esp,0x1c
c001bb51:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bb55:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001bb5b:	0f 84 51 01 00 00    	je     c001bcb2 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001bb61:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001bb65:	66 81 f9 06 04       	cmp    cx,0x406
c001bb6a:	75 2c                	jne    c001bb98 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001bb6c:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001bb71:	50                   	push   eax
c001bb72:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001bb77:	50                   	push   eax
c001bb78:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001bb7d:	50                   	push   eax
c001bb7e:	56                   	push   esi
c001bb7f:	e8 b2 fe ff ff       	call   c001ba36 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001bb84:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bb88:	0f b6 c0             	movzx  eax,al
c001bb8b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001bb8f:	83 c4 2c             	add    esp,0x2c
c001bb92:	5b                   	pop    ebx
c001bb93:	5e                   	pop    esi
c001bb94:	5f                   	pop    edi
c001bb95:	5d                   	pop    ebp
c001bb96:	eb 8e                	jmp    c001bb26 <PCI::checkBus(unsigned char)>
c001bb98:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bb9c:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001bba2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bba6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001bbaa:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001bbae:	88 d3                	mov    bl,dl
c001bbb0:	85 c0                	test   eax,eax
c001bbb2:	74 33                	je     c001bbe7 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001bbb4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001bbb7:	85 d2                	test   edx,edx
c001bbb9:	74 28                	je     c001bbe3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001bbbb:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001bbc1:	31 ef                	xor    edi,ebp
c001bbc3:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001bbc9:	75 18                	jne    c001bbe3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001bbcb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bbcf:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001bbd5:	75 0c                	jne    c001bbe3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001bbd7:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001bbdd:	0f 84 cf 00 00 00    	je     c001bcb2 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001bbe3:	8b 00                	mov    eax,DWORD PTR [eax]
c001bbe5:	eb c9                	jmp    c001bbb0 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001bbe7:	66 81 f9 01 06       	cmp    cx,0x601
c001bbec:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001bbf0:	75 18                	jne    c001bc0a <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001bbf2:	83 ec 0c             	sub    esp,0xc
c001bbf5:	68 58 01 00 00       	push   0x158
c001bbfa:	e8 31 34 ff ff       	call   c000f030 <operator new(unsigned long)>
c001bbff:	59                   	pop    ecx
c001bc00:	89 c5                	mov    ebp,eax
c001bc02:	5f                   	pop    edi
c001bc03:	68 74 2a 02 c0       	push   0xc0022a74
c001bc08:	eb 7d                	jmp    c001bc87 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001bc0a:	66 81 f9 01 01       	cmp    cx,0x101
c001bc0f:	75 60                	jne    c001bc71 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001bc11:	83 ec 0c             	sub    esp,0xc
c001bc14:	68 70 02 00 00       	push   0x270
c001bc19:	e8 12 34 ff ff       	call   c000f030 <operator new(unsigned long)>
c001bc1e:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc21:	89 c5                	mov    ebp,eax
c001bc23:	e8 26 03 00 00       	call   c001bf4e <IDE::IDE()>
c001bc28:	58                   	pop    eax
c001bc29:	5a                   	pop    edx
c001bc2a:	55                   	push   ebp
c001bc2b:	56                   	push   esi
c001bc2c:	e8 f9 48 ff ff       	call   c001052a <Device::addChild(Device*)>
c001bc31:	83 ec 1c             	sub    esp,0x1c
c001bc34:	b9 09 00 00 00       	mov    ecx,0x9
c001bc39:	fc                   	cld    
c001bc3a:	89 e7                	mov    edi,esp
c001bc3c:	89 de                	mov    esi,ebx
c001bc3e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bc40:	55                   	push   ebp
c001bc41:	e8 be 47 ff ff       	call   c0010404 <Device::preOpenPCI(PCIDeviceInfo)>
c001bc46:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bc49:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001bc4d:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001bc55:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001bc5d:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001bc65:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bc68:	83 c4 4c             	add    esp,0x4c
c001bc6b:	5b                   	pop    ebx
c001bc6c:	5e                   	pop    esi
c001bc6d:	5f                   	pop    edi
c001bc6e:	5d                   	pop    ebp
c001bc6f:	ff e0                	jmp    eax
c001bc71:	83 ec 0c             	sub    esp,0xc
c001bc74:	68 58 01 00 00       	push   0x158
c001bc79:	e8 b2 33 ff ff       	call   c000f030 <operator new(unsigned long)>
c001bc7e:	59                   	pop    ecx
c001bc7f:	89 c5                	mov    ebp,eax
c001bc81:	5f                   	pop    edi
c001bc82:	68 93 2a 02 c0       	push   0xc0022a93
c001bc87:	55                   	push   ebp
c001bc88:	e8 89 4b ff ff       	call   c0010816 <DriverlessDevice::DriverlessDevice(char const*)>
c001bc8d:	58                   	pop    eax
c001bc8e:	5a                   	pop    edx
c001bc8f:	55                   	push   ebp
c001bc90:	56                   	push   esi
c001bc91:	e8 94 48 ff ff       	call   c001052a <Device::addChild(Device*)>
c001bc96:	b9 09 00 00 00       	mov    ecx,0x9
c001bc9b:	fc                   	cld    
c001bc9c:	89 df                	mov    edi,ebx
c001bc9e:	89 de                	mov    esi,ebx
c001bca0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bca2:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001bca6:	83 c4 2c             	add    esp,0x2c
c001bca9:	5b                   	pop    ebx
c001bcaa:	5e                   	pop    esi
c001bcab:	5f                   	pop    edi
c001bcac:	5d                   	pop    ebp
c001bcad:	e9 52 47 ff ff       	jmp    c0010404 <Device::preOpenPCI(PCIDeviceInfo)>
c001bcb2:	83 c4 1c             	add    esp,0x1c
c001bcb5:	5b                   	pop    ebx
c001bcb6:	5e                   	pop    esi
c001bcb7:	5f                   	pop    edi
c001bcb8:	5d                   	pop    ebp
c001bcb9:	c3                   	ret    

c001bcba <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001bcba:	55                   	push   ebp
c001bcbb:	57                   	push   edi
c001bcbc:	56                   	push   esi
c001bcbd:	53                   	push   ebx
c001bcbe:	83 ec 5c             	sub    esp,0x5c
c001bcc1:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001bcc5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bcc9:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001bccd:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001bcd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bcd6:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001bcda:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001bcdf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bce3:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001bce8:	6a 0c                	push   0xc
c001bcea:	55                   	push   ebp
c001bceb:	53                   	push   ebx
c001bcec:	57                   	push   edi
c001bced:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001bcf4:	e8 03 fc ff ff       	call   c001b8fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bcf9:	83 c4 0c             	add    esp,0xc
c001bcfc:	6a 00                	push   0x0
c001bcfe:	68 ad 2a 02 c0       	push   0xc0022aad
c001bd03:	e8 17 34 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001bd08:	55                   	push   ebp
c001bd09:	53                   	push   ebx
c001bd0a:	57                   	push   edi
c001bd0b:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001bd12:	e8 73 fc ff ff       	call   c001b98a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001bd17:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001bd1c:	83 c4 20             	add    esp,0x20
c001bd1f:	55                   	push   ebp
c001bd20:	53                   	push   ebx
c001bd21:	57                   	push   edi
c001bd22:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001bd26:	e8 e9 fc ff ff       	call   c001ba14 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001bd2b:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001bd32:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001bd36:	55                   	push   ebp
c001bd37:	53                   	push   ebx
c001bd38:	57                   	push   edi
c001bd39:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001bd40:	e8 b7 fb ff ff       	call   c001b8fc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bd45:	0f b6 c4             	movzx  eax,ah
c001bd48:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001bd4c:	83 c4 18             	add    esp,0x18
c001bd4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bd53:	68 c1 2a 02 c0       	push   0xc0022ac1
c001bd58:	e8 c2 33 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001bd5d:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001bd61:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001bd65:	a1 88 3d 02 c0       	mov    eax,ds:0xc0023d88
c001bd6a:	83 c4 10             	add    esp,0x10
c001bd6d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001bd73:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001bd7a:	74 6c                	je     c001bde8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001bd7c:	31 f6                	xor    esi,esi
c001bd7e:	8b 15 88 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023d88
c001bd84:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001bd8a:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001bd90:	7e 56                	jle    c001bde8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001bd92:	8d 14 f2             	lea    edx,[edx+esi*8]
c001bd95:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001bd9c:	39 cb                	cmp    ebx,ecx
c001bd9e:	75 45                	jne    c001bde5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001bda0:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001bda7:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001bdab:	75 38                	jne    c001bde5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001bdad:	83 ec 0c             	sub    esp,0xc
c001bdb0:	68 d0 2a 02 c0       	push   0xc0022ad0
c001bdb5:	e8 65 33 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001bdba:	8b 15 88 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023d88
c001bdc0:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001bdc6:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001bdce:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001bdd2:	52                   	push   edx
c001bdd3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bdd7:	53                   	push   ebx
c001bdd8:	68 f5 2a 02 c0       	push   0xc0022af5
c001bddd:	e8 3d 33 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001bde2:	83 c4 20             	add    esp,0x20
c001bde5:	46                   	inc    esi
c001bde6:	eb 96                	jmp    c001bd7e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001bde8:	31 d2                	xor    edx,edx
c001bdea:	83 ec 0c             	sub    esp,0xc
c001bded:	55                   	push   ebp
c001bdee:	53                   	push   ebx
c001bdef:	57                   	push   edi
c001bdf0:	52                   	push   edx
c001bdf1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001bdf5:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001bdfc:	e8 59 fc ff ff       	call   c001ba5a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001be01:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001be05:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001be09:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001be0d:	42                   	inc    edx
c001be0e:	83 c4 20             	add    esp,0x20
c001be11:	83 fa 06             	cmp    edx,0x6
c001be14:	75 d4                	jne    c001bdea <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001be16:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001be1a:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001be1e:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001be22:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001be26:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001be2a:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001be2e:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001be33:	86 e0                	xchg   al,ah
c001be35:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001be3a:	55                   	push   ebp
c001be3b:	53                   	push   ebx
c001be3c:	57                   	push   edi
c001be3d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001be41:	e8 88 fb ff ff       	call   c001b9ce <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001be46:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001be4a:	55                   	push   ebp
c001be4b:	53                   	push   ebx
c001be4c:	57                   	push   edi
c001be4d:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001be54:	e8 eb fa ff ff       	call   c001b944 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001be59:	83 ec 0c             	sub    esp,0xc
c001be5c:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001be61:	b9 09 00 00 00       	mov    ecx,0x9
c001be66:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001be6a:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001be6e:	fc                   	cld    
c001be6f:	89 e7                	mov    edi,esp
c001be71:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001be73:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001be7a:	e8 cb fc ff ff       	call   c001bb4a <PCI::foundDevice(PCIDeviceInfo)>
c001be7f:	81 c4 8c 00 00 00    	add    esp,0x8c
c001be85:	5b                   	pop    ebx
c001be86:	5e                   	pop    esi
c001be87:	5f                   	pop    edi
c001be88:	5d                   	pop    ebp
c001be89:	c3                   	ret    

c001be8a <PCI::checkDevice(unsigned char, unsigned char)>:
c001be8a:	55                   	push   ebp
c001be8b:	57                   	push   edi
c001be8c:	56                   	push   esi
c001be8d:	53                   	push   ebx
c001be8e:	83 ec 0c             	sub    esp,0xc
c001be91:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001be95:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001be9a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001be9f:	6a 00                	push   0x0
c001bea1:	56                   	push   esi
c001bea2:	57                   	push   edi
c001bea3:	55                   	push   ebp
c001bea4:	e8 9b fa ff ff       	call   c001b944 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bea9:	6a 00                	push   0x0
c001beab:	56                   	push   esi
c001beac:	57                   	push   edi
c001bead:	55                   	push   ebp
c001beae:	e8 07 fe ff ff       	call   c001bcba <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001beb3:	83 c4 20             	add    esp,0x20
c001beb6:	6a 00                	push   0x0
c001beb8:	56                   	push   esi
c001beb9:	57                   	push   edi
c001beba:	55                   	push   ebp
c001bebb:	e8 a6 fa ff ff       	call   c001b966 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bec0:	83 c4 10             	add    esp,0x10
c001bec3:	84 c0                	test   al,al
c001bec5:	79 27                	jns    c001beee <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bec7:	bb 01 00 00 00       	mov    ebx,0x1
c001becc:	53                   	push   ebx
c001becd:	56                   	push   esi
c001bece:	57                   	push   edi
c001becf:	55                   	push   ebp
c001bed0:	e8 6f fa ff ff       	call   c001b944 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bed5:	83 c4 10             	add    esp,0x10
c001bed8:	66 40                	inc    ax
c001beda:	74 0c                	je     c001bee8 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001bedc:	53                   	push   ebx
c001bedd:	56                   	push   esi
c001bede:	57                   	push   edi
c001bedf:	55                   	push   ebp
c001bee0:	e8 d5 fd ff ff       	call   c001bcba <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bee5:	83 c4 10             	add    esp,0x10
c001bee8:	43                   	inc    ebx
c001bee9:	83 fb 08             	cmp    ebx,0x8
c001beec:	75 de                	jne    c001becc <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001beee:	83 c4 0c             	add    esp,0xc
c001bef1:	5b                   	pop    ebx
c001bef2:	5e                   	pop    esi
c001bef3:	5f                   	pop    edi
c001bef4:	5d                   	pop    ebp
c001bef5:	c3                   	ret    

c001bef6 <PCI::detect()>:
c001bef6:	56                   	push   esi
c001bef7:	53                   	push   ebx
c001bef8:	53                   	push   ebx
c001bef9:	31 db                	xor    ebx,ebx
c001befb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001beff:	6a 00                	push   0x0
c001bf01:	6a 00                	push   0x0
c001bf03:	6a 00                	push   0x0
c001bf05:	56                   	push   esi
c001bf06:	e8 5b fa ff ff       	call   c001b966 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bf0b:	83 c4 10             	add    esp,0x10
c001bf0e:	a8 80                	test   al,0x80
c001bf10:	75 21                	jne    c001bf33 <PCI::detect()+0x3d>
c001bf12:	51                   	push   ecx
c001bf13:	51                   	push   ecx
c001bf14:	6a 00                	push   0x0
c001bf16:	56                   	push   esi
c001bf17:	e8 0a fc ff ff       	call   c001bb26 <PCI::checkBus(unsigned char)>
c001bf1c:	83 c4 10             	add    esp,0x10
c001bf1f:	eb 24                	jmp    c001bf45 <PCI::detect()+0x4f>
c001bf21:	52                   	push   edx
c001bf22:	52                   	push   edx
c001bf23:	53                   	push   ebx
c001bf24:	43                   	inc    ebx
c001bf25:	56                   	push   esi
c001bf26:	e8 fb fb ff ff       	call   c001bb26 <PCI::checkBus(unsigned char)>
c001bf2b:	83 c4 10             	add    esp,0x10
c001bf2e:	83 fb 08             	cmp    ebx,0x8
c001bf31:	74 12                	je     c001bf45 <PCI::detect()+0x4f>
c001bf33:	53                   	push   ebx
c001bf34:	6a 00                	push   0x0
c001bf36:	6a 00                	push   0x0
c001bf38:	56                   	push   esi
c001bf39:	e8 06 fa ff ff       	call   c001b944 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bf3e:	83 c4 10             	add    esp,0x10
c001bf41:	66 40                	inc    ax
c001bf43:	74 dc                	je     c001bf21 <PCI::detect()+0x2b>
c001bf45:	58                   	pop    eax
c001bf46:	5b                   	pop    ebx
c001bf47:	5e                   	pop    esi
c001bf48:	c3                   	ret    
c001bf49:	90                   	nop

c001bf4a <IDE::close(int, int, void*)>:
c001bf4a:	83 c8 ff             	or     eax,0xffffffff
c001bf4d:	c3                   	ret    

c001bf4e <IDE::IDE()>:
c001bf4e:	83 ec 0c             	sub    esp,0xc
c001bf51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf55:	83 ec 08             	sub    esp,0x8
c001bf58:	68 3c 2b 02 c0       	push   0xc0022b3c
c001bf5d:	50                   	push   eax
c001bf5e:	e8 49 49 ff ff       	call   c00108ac <HardDiskController::HardDiskController(char const*)>
c001bf63:	83 c4 10             	add    esp,0x10
c001bf66:	ba 7c 2d 02 c0       	mov    edx,0xc0022d7c
c001bf6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf6f:	89 10                	mov    DWORD PTR [eax],edx
c001bf71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf75:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bf7c:	90                   	nop
c001bf7d:	83 c4 0c             	add    esp,0xc
c001bf80:	c3                   	ret    
c001bf81:	90                   	nop

c001bf82 <IDE::prepareInterrupt(unsigned char)>:
c001bf82:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bf87:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bf8b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bf93:	c3                   	ret    

c001bf94 <selectDrive(unsigned char, unsigned char)>:
c001bf94:	c3                   	ret    
c001bf95:	90                   	nop

c001bf96 <IDE::getBase(unsigned char)>:
c001bf96:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001bf9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf9f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bfa7:	c3                   	ret    

c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bfa8:	55                   	push   ebp
c001bfa9:	57                   	push   edi
c001bfaa:	56                   	push   esi
c001bfab:	53                   	push   ebx
c001bfac:	83 ec 1c             	sub    esp,0x1c
c001bfaf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bfb3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bfb7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bfba:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bfbe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bfc2:	80 f9 03             	cmp    cl,0x3
c001bfc5:	77 51                	ja     c001c018 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001bfc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bfcb:	0f b6 f2             	movzx  esi,dl
c001bfce:	0f b6 db             	movzx  ebx,bl
c001bfd1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bfd4:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001bfd8:	83 ca 80             	or     edx,0xffffff80
c001bfdb:	0f b6 d2             	movzx  edx,dl
c001bfde:	52                   	push   edx
c001bfdf:	6a 0c                	push   0xc
c001bfe1:	56                   	push   esi
c001bfe2:	57                   	push   edi
c001bfe3:	e8 c0 ff ff ff       	call   c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfe8:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001bfed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bff1:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bff5:	ee                   	out    dx,al
c001bff6:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001bffb:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001bfff:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001c003:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c007:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c00f:	83 c4 2c             	add    esp,0x2c
c001c012:	5b                   	pop    ebx
c001c013:	5e                   	pop    esi
c001c014:	5f                   	pop    edi
c001c015:	5d                   	pop    ebp
c001c016:	eb 90                	jmp    c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c018:	80 fb 07             	cmp    bl,0x7
c001c01b:	77 12                	ja     c001c02f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001c01d:	0f b6 d2             	movzx  edx,dl
c001c020:	0f b6 db             	movzx  ebx,bl
c001c023:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001c02b:	89 da                	mov    edx,ebx
c001c02d:	eb 2f                	jmp    c001c05e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c02f:	80 fb 0d             	cmp    bl,0xd
c001c032:	77 13                	ja     c001c047 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001c034:	0f b6 d2             	movzx  edx,dl
c001c037:	0f b6 db             	movzx  ebx,bl
c001c03a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001c041:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c045:	eb 17                	jmp    c001c05e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c047:	80 fb 15             	cmp    bl,0x15
c001c04a:	77 13                	ja     c001c05f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c04c:	0f b6 d2             	movzx  edx,dl
c001c04f:	0f b6 db             	movzx  ebx,bl
c001c052:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001c05a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c05e:	ee                   	out    dx,al
c001c05f:	83 c4 1c             	add    esp,0x1c
c001c062:	5b                   	pop    ebx
c001c063:	5e                   	pop    esi
c001c064:	5f                   	pop    edi
c001c065:	5d                   	pop    ebp
c001c066:	c3                   	ret    
c001c067:	90                   	nop

c001c068 <IDE::read(unsigned char, unsigned char)>:
c001c068:	55                   	push   ebp
c001c069:	57                   	push   edi
c001c06a:	56                   	push   esi
c001c06b:	53                   	push   ebx
c001c06c:	83 ec 1c             	sub    esp,0x1c
c001c06f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c073:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c077:	8d 43 f8             	lea    eax,[ebx-0x8]
c001c07a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c07e:	3c 03                	cmp    al,0x3
c001c080:	77 43                	ja     c001c0c5 <IDE::read(unsigned char, unsigned char)+0x5d>
c001c082:	0f b6 f2             	movzx  esi,dl
c001c085:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c088:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001c08c:	83 c8 80             	or     eax,0xffffff80
c001c08f:	0f b6 c0             	movzx  eax,al
c001c092:	50                   	push   eax
c001c093:	6a 0c                	push   0xc
c001c095:	56                   	push   esi
c001c096:	57                   	push   edi
c001c097:	e8 0c ff ff ff       	call   c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c09c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001c0a1:	0f b6 c3             	movzx  eax,bl
c001c0a4:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001c0a8:	ec                   	in     al,dx
c001c0a9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c0ad:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001c0b2:	52                   	push   edx
c001c0b3:	6a 0c                	push   0xc
c001c0b5:	56                   	push   esi
c001c0b6:	57                   	push   edi
c001c0b7:	e8 ec fe ff ff       	call   c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c0bc:	83 c4 20             	add    esp,0x20
c001c0bf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c0c3:	eb 49                	jmp    c001c10e <IDE::read(unsigned char, unsigned char)+0xa6>
c001c0c5:	80 fb 07             	cmp    bl,0x7
c001c0c8:	77 12                	ja     c001c0dc <IDE::read(unsigned char, unsigned char)+0x74>
c001c0ca:	0f b6 d2             	movzx  edx,dl
c001c0cd:	0f b6 c3             	movzx  eax,bl
c001c0d0:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001c0d8:	89 c2                	mov    edx,eax
c001c0da:	eb 31                	jmp    c001c10d <IDE::read(unsigned char, unsigned char)+0xa5>
c001c0dc:	80 fb 0d             	cmp    bl,0xd
c001c0df:	77 13                	ja     c001c0f4 <IDE::read(unsigned char, unsigned char)+0x8c>
c001c0e1:	0f b6 d2             	movzx  edx,dl
c001c0e4:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001c0eb:	0f b6 d3             	movzx  edx,bl
c001c0ee:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c0f2:	eb 19                	jmp    c001c10d <IDE::read(unsigned char, unsigned char)+0xa5>
c001c0f4:	31 c0                	xor    eax,eax
c001c0f6:	80 fb 15             	cmp    bl,0x15
c001c0f9:	77 13                	ja     c001c10e <IDE::read(unsigned char, unsigned char)+0xa6>
c001c0fb:	0f b6 d2             	movzx  edx,dl
c001c0fe:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001c106:	0f b6 d3             	movzx  edx,bl
c001c109:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c10d:	ec                   	in     al,dx
c001c10e:	83 c4 1c             	add    esp,0x1c
c001c111:	5b                   	pop    ebx
c001c112:	5e                   	pop    esi
c001c113:	5f                   	pop    edi
c001c114:	5d                   	pop    ebp
c001c115:	c3                   	ret    

c001c116 <IDE::waitInterrupt(unsigned char)>:
c001c116:	55                   	push   ebp
c001c117:	57                   	push   edi
c001c118:	56                   	push   esi
c001c119:	53                   	push   ebx
c001c11a:	31 db                	xor    ebx,ebx
c001c11c:	83 ec 0c             	sub    esp,0xc
c001c11f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001c123:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001c128:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001c130:	89 e8                	mov    eax,ebp
c001c132:	84 c0                	test   al,al
c001c134:	75 34                	jne    c001c16a <IDE::waitInterrupt(unsigned char)+0x54>
c001c136:	52                   	push   edx
c001c137:	6a 0c                	push   0xc
c001c139:	56                   	push   esi
c001c13a:	57                   	push   edi
c001c13b:	e8 28 ff ff ff       	call   c001c068 <IDE::read(unsigned char, unsigned char)>
c001c140:	83 c4 10             	add    esp,0x10
c001c143:	a8 01                	test   al,0x1
c001c145:	75 2b                	jne    c001c172 <IDE::waitInterrupt(unsigned char)+0x5c>
c001c147:	f6 c3 04             	test   bl,0x4
c001c14a:	75 16                	jne    c001c162 <IDE::waitInterrupt(unsigned char)+0x4c>
c001c14c:	83 fb 32             	cmp    ebx,0x32
c001c14f:	7e 11                	jle    c001c162 <IDE::waitInterrupt(unsigned char)+0x4c>
c001c151:	50                   	push   eax
c001c152:	50                   	push   eax
c001c153:	6a 00                	push   0x0
c001c155:	68 80 96 98 00       	push   0x989680
c001c15a:	e8 75 c5 ff ff       	call   c00186d4 <nanoSleep(unsigned long long)>
c001c15f:	83 c4 10             	add    esp,0x10
c001c162:	83 fb 3c             	cmp    ebx,0x3c
c001c165:	74 0b                	je     c001c172 <IDE::waitInterrupt(unsigned char)+0x5c>
c001c167:	43                   	inc    ebx
c001c168:	eb be                	jmp    c001c128 <IDE::waitInterrupt(unsigned char)+0x12>
c001c16a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001c172:	83 c4 0c             	add    esp,0xc
c001c175:	89 e8                	mov    eax,ebp
c001c177:	5b                   	pop    ebx
c001c178:	5e                   	pop    esi
c001c179:	5f                   	pop    edi
c001c17a:	5d                   	pop    ebp
c001c17b:	c3                   	ret    

c001c17c <ideChannel0IRQHandler(regs*, void*)>:
c001c17c:	83 ec 10             	sub    esp,0x10
c001c17f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c183:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c18a:	6a 07                	push   0x7
c001c18c:	6a 00                	push   0x0
c001c18e:	50                   	push   eax
c001c18f:	e8 d4 fe ff ff       	call   c001c068 <IDE::read(unsigned char, unsigned char)>
c001c194:	83 c4 1c             	add    esp,0x1c
c001c197:	c3                   	ret    

c001c198 <ideChannel1IRQHandler(regs*, void*)>:
c001c198:	83 ec 10             	sub    esp,0x10
c001c19b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c19f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c1a6:	6a 07                	push   0x7
c001c1a8:	6a 01                	push   0x1
c001c1aa:	50                   	push   eax
c001c1ab:	e8 b8 fe ff ff       	call   c001c068 <IDE::read(unsigned char, unsigned char)>
c001c1b0:	83 c4 1c             	add    esp,0x1c
c001c1b3:	c3                   	ret    

c001c1b4 <IDE::enableIRQs(unsigned char, bool)>:
c001c1b4:	57                   	push   edi
c001c1b5:	56                   	push   esi
c001c1b6:	be 04 00 00 00       	mov    esi,0x4
c001c1bb:	53                   	push   ebx
c001c1bc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c1c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c1c5:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001c1ca:	0f 94 c0             	sete   al
c001c1cd:	d1 e0                	shl    eax,1
c001c1cf:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001c1d6:	0f b6 c0             	movzx  eax,al
c001c1d9:	50                   	push   eax
c001c1da:	6a 0c                	push   0xc
c001c1dc:	57                   	push   edi
c001c1dd:	53                   	push   ebx
c001c1de:	e8 c5 fd ff ff       	call   c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1e3:	83 c4 10             	add    esp,0x10
c001c1e6:	50                   	push   eax
c001c1e7:	6a 0c                	push   0xc
c001c1e9:	57                   	push   edi
c001c1ea:	53                   	push   ebx
c001c1eb:	e8 78 fe ff ff       	call   c001c068 <IDE::read(unsigned char, unsigned char)>
c001c1f0:	83 c4 10             	add    esp,0x10
c001c1f3:	4e                   	dec    esi
c001c1f4:	75 f0                	jne    c001c1e6 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001c1f6:	5b                   	pop    ebx
c001c1f7:	5e                   	pop    esi
c001c1f8:	5f                   	pop    edi
c001c1f9:	c3                   	ret    

c001c1fa <IDE::open(int, int, void*)>:
c001c1fa:	55                   	push   ebp
c001c1fb:	57                   	push   edi
c001c1fc:	56                   	push   esi
c001c1fd:	53                   	push   ebx
c001c1fe:	83 ec 1c             	sub    esp,0x1c
c001c201:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c205:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c20e:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c217:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c21e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c225:	0f 85 b0 02 00 00    	jne    c001c4db <IDE::open(int, int, void*)+0x2e1>
c001c22b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c231:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001c235:	83 e0 7f             	and    eax,0x7f
c001c238:	3c 05                	cmp    al,0x5
c001c23a:	74 04                	je     c001c240 <IDE::open(int, int, void*)+0x46>
c001c23c:	3c 0f                	cmp    al,0xf
c001c23e:	75 32                	jne    c001c272 <IDE::open(int, int, void*)+0x78>
c001c240:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c246:	83 e0 fc             	and    eax,0xfffffffc
c001c249:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c250:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c256:	83 e0 fc             	and    eax,0xfffffffc
c001c259:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c260:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c266:	83 e0 fc             	and    eax,0xfffffffc
c001c269:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c270:	eb 14                	jmp    c001c286 <IDE::open(int, int, void*)+0x8c>
c001c272:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c27c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c286:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001c28d:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c294:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c298:	89 c6                	mov    esi,eax
c001c29a:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c29f:	c1 e6 10             	shl    esi,0x10
c001c2a2:	89 e8                	mov    eax,ebp
c001c2a4:	89 fa                	mov    edx,edi
c001c2a6:	c1 e0 0b             	shl    eax,0xb
c001c2a9:	09 f0                	or     eax,esi
c001c2ab:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001c2b2:	c1 e6 08             	shl    esi,0x8
c001c2b5:	09 c6                	or     esi,eax
c001c2b7:	89 f0                	mov    eax,esi
c001c2b9:	0d 08 00 00 80       	or     eax,0x80000008
c001c2be:	ef                   	out    dx,eax
c001c2bf:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001c2c4:	89 ca                	mov    edx,ecx
c001c2c6:	ed                   	in     eax,dx
c001c2c7:	c1 e8 10             	shr    eax,0x10
c001c2ca:	3d ff ff 00 00       	cmp    eax,0xffff
c001c2cf:	0f 84 f5 00 00 00    	je     c001c3ca <IDE::open(int, int, void*)+0x1d0>
c001c2d5:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001c2db:	89 fa                	mov    edx,edi
c001c2dd:	89 f0                	mov    eax,esi
c001c2df:	ef                   	out    dx,eax
c001c2e0:	b0 fe                	mov    al,0xfe
c001c2e2:	89 ca                	mov    edx,ecx
c001c2e4:	ee                   	out    dx,al
c001c2e5:	89 f0                	mov    eax,esi
c001c2e7:	89 fa                	mov    edx,edi
c001c2e9:	ef                   	out    dx,eax
c001c2ea:	89 ca                	mov    edx,ecx
c001c2ec:	ed                   	in     eax,dx
c001c2ed:	3c fe                	cmp    al,0xfe
c001c2ef:	0f 85 a9 00 00 00    	jne    c001c39e <IDE::open(int, int, void*)+0x1a4>
c001c2f5:	8b 15 88 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023d88
c001c2fb:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001c302:	74 33                	je     c001c337 <IDE::open(int, int, void*)+0x13d>
c001c304:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c30a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c30e:	40                   	inc    eax
c001c30f:	83 ec 0c             	sub    esp,0xc
c001c312:	0f b6 c0             	movzx  eax,al
c001c315:	50                   	push   eax
c001c316:	55                   	push   ebp
c001c317:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c31b:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001c321:	51                   	push   ecx
c001c322:	e8 4d 73 ff ff       	call   c0013674 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c327:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c32c:	83 c4 1c             	add    esp,0x1c
c001c32f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c335:	eb 0a                	jmp    c001c341 <IDE::open(int, int, void*)+0x147>
c001c337:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c341:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c348:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c34f:	c1 e1 10             	shl    ecx,0x10
c001c352:	c1 e0 08             	shl    eax,0x8
c001c355:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c35a:	09 c1                	or     ecx,eax
c001c35c:	89 fa                	mov    edx,edi
c001c35e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c365:	c1 e0 0b             	shl    eax,0xb
c001c368:	09 c1                	or     ecx,eax
c001c36a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c370:	89 c8                	mov    eax,ecx
c001c372:	ef                   	out    dx,eax
c001c373:	be fc 0c 00 00       	mov    esi,0xcfc
c001c378:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001c37e:	89 f2                	mov    edx,esi
c001c380:	ee                   	out    dx,al
c001c381:	89 c8                	mov    eax,ecx
c001c383:	89 fa                	mov    edx,edi
c001c385:	ef                   	out    dx,eax
c001c386:	89 f2                	mov    edx,esi
c001c388:	ed                   	in     eax,dx
c001c389:	0f b6 c0             	movzx  eax,al
c001c38c:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001c392:	74 46                	je     c001c3da <IDE::open(int, int, void*)+0x1e0>
c001c394:	83 ec 0c             	sub    esp,0xc
c001c397:	68 54 2b 02 c0       	push   0xc0022b54
c001c39c:	eb 34                	jmp    c001c3d2 <IDE::open(int, int, void*)+0x1d8>
c001c39e:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c3a7:	75 17                	jne    c001c3c0 <IDE::open(int, int, void*)+0x1c6>
c001c3a9:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001c3ae:	74 07                	je     c001c3b7 <IDE::open(int, int, void*)+0x1bd>
c001c3b0:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001c3b5:	75 09                	jne    c001c3c0 <IDE::open(int, int, void*)+0x1c6>
c001c3b7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c3be:	eb 1a                	jmp    c001c3da <IDE::open(int, int, void*)+0x1e0>
c001c3c0:	83 ec 0c             	sub    esp,0xc
c001c3c3:	68 5c 2b 02 c0       	push   0xc0022b5c
c001c3c8:	eb 08                	jmp    c001c3d2 <IDE::open(int, int, void*)+0x1d8>
c001c3ca:	83 ec 0c             	sub    esp,0xc
c001c3cd:	68 8d 2b 02 c0       	push   0xc0022b8d
c001c3d2:	e8 47 8e ff ff       	call   c001521e <Krnl::panic(char const*)>
c001c3d7:	83 c4 10             	add    esp,0x10
c001c3da:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001c3e1:	79 1a                	jns    c001c3fd <IDE::open(int, int, void*)+0x203>
c001c3e3:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c3e9:	83 e0 fc             	and    eax,0xfffffffc
c001c3ec:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c3f3:	83 c0 08             	add    eax,0x8
c001c3f6:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c3fd:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c403:	89 c2                	mov    edx,eax
c001c405:	83 e2 0f             	and    edx,0xf
c001c408:	66 83 fa 08          	cmp    dx,0x8
c001c40c:	75 0a                	jne    c001c418 <IDE::open(int, int, void*)+0x21e>
c001c40e:	83 e8 02             	sub    eax,0x2
c001c411:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c418:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c41e:	89 c2                	mov    edx,eax
c001c420:	83 e2 0f             	and    edx,0xf
c001c423:	66 83 fa 08          	cmp    dx,0x8
c001c427:	75 0a                	jne    c001c433 <IDE::open(int, int, void*)+0x239>
c001c429:	83 e8 02             	sub    eax,0x2
c001c42c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c433:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c43a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c441:	89 d0                	mov    eax,edx
c001c443:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c446:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c44a:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c44e:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c451:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c456:	0f b6 c9             	movzx  ecx,cl
c001c459:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c460:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c463:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c467:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c46b:	8d 50 02             	lea    edx,[eax+0x2]
c001c46e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c473:	0f b6 d2             	movzx  edx,dl
c001c476:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c47c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c47f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c483:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c487:	8d 48 03             	lea    ecx,[eax+0x3]
c001c48a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c48f:	0f b6 c9             	movzx  ecx,cl
c001c492:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c498:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c49b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c49f:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c4a3:	8d 50 04             	lea    edx,[eax+0x4]
c001c4a6:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c4ac:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c4b1:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c4b8:	66 85 f6             	test   si,si
c001c4bb:	74 3e                	je     c001c4fb <IDE::open(int, int, void*)+0x301>
c001c4bd:	0f b6 d2             	movzx  edx,dl
c001c4c0:	83 c0 05             	add    eax,0x5
c001c4c3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c4c6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c4ca:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c4ce:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c4d4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c4d9:	eb 20                	jmp    c001c4fb <IDE::open(int, int, void*)+0x301>
c001c4db:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c4e5:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c4ef:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c4f6:	e9 02 ff ff ff       	jmp    c001c3fd <IDE::open(int, int, void*)+0x203>
c001c4fb:	52                   	push   edx
c001c4fc:	52                   	push   edx
c001c4fd:	6a 00                	push   0x0
c001c4ff:	53                   	push   ebx
c001c500:	e8 7d fa ff ff       	call   c001bf82 <IDE::prepareInterrupt(unsigned char)>
c001c505:	59                   	pop    ecx
c001c506:	5e                   	pop    esi
c001c507:	6a 01                	push   0x1
c001c509:	53                   	push   ebx
c001c50a:	e8 73 fa ff ff       	call   c001bf82 <IDE::prepareInterrupt(unsigned char)>
c001c50f:	83 c4 0c             	add    esp,0xc
c001c512:	6a 00                	push   0x0
c001c514:	6a 00                	push   0x0
c001c516:	53                   	push   ebx
c001c517:	e8 98 fc ff ff       	call   c001c1b4 <IDE::enableIRQs(unsigned char, bool)>
c001c51c:	83 c4 0c             	add    esp,0xc
c001c51f:	6a 00                	push   0x0
c001c521:	6a 01                	push   0x1
c001c523:	53                   	push   ebx
c001c524:	e8 8b fc ff ff       	call   c001c1b4 <IDE::enableIRQs(unsigned char, bool)>
c001c529:	83 c4 10             	add    esp,0x10
c001c52c:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c533:	74 40                	je     c001c575 <IDE::open(int, int, void*)+0x37b>
c001c535:	83 ec 0c             	sub    esp,0xc
c001c538:	68 b7 2b 02 c0       	push   0xc0022bb7
c001c53d:	e8 dd 2b ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001c542:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c545:	6a 01                	push   0x1
c001c547:	68 7c c1 01 c0       	push   0xc001c17c
c001c54c:	6a 0e                	push   0xe
c001c54e:	53                   	push   ebx
c001c54f:	e8 2a 3f ff ff       	call   c001047e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c554:	83 c4 14             	add    esp,0x14
c001c557:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c55d:	53                   	push   ebx
c001c55e:	6a 01                	push   0x1
c001c560:	68 98 c1 01 c0       	push   0xc001c198
c001c565:	6a 0f                	push   0xf
c001c567:	53                   	push   ebx
c001c568:	e8 11 3f ff ff       	call   c001047e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c56d:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c573:	eb 4a                	jmp    c001c5bf <IDE::open(int, int, void*)+0x3c5>
c001c575:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c57f:	50                   	push   eax
c001c580:	6a 0f                	push   0xf
c001c582:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c588:	68 d3 2b 02 c0       	push   0xc0022bd3
c001c58d:	e8 8d 2b ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001c592:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c595:	6a 00                	push   0x0
c001c597:	68 7c c1 01 c0       	push   0xc001c17c
c001c59c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c5a2:	53                   	push   ebx
c001c5a3:	e8 d6 3e ff ff       	call   c001047e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c5a8:	83 c4 14             	add    esp,0x14
c001c5ab:	53                   	push   ebx
c001c5ac:	6a 00                	push   0x0
c001c5ae:	68 98 c1 01 c0       	push   0xc001c198
c001c5b3:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c5b9:	53                   	push   ebx
c001c5ba:	e8 bf 3e ff ff       	call   c001047e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c5bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c5c1:	83 c4 20             	add    esp,0x20
c001c5c4:	83 ec 0c             	sub    esp,0xc
c001c5c7:	53                   	push   ebx
c001c5c8:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c5cb:	83 c4 0c             	add    esp,0xc
c001c5ce:	6a 07                	push   0x7
c001c5d0:	6a 00                	push   0x0
c001c5d2:	53                   	push   ebx
c001c5d3:	e8 90 fa ff ff       	call   c001c068 <IDE::read(unsigned char, unsigned char)>
c001c5d8:	83 c4 0c             	add    esp,0xc
c001c5db:	6a 07                	push   0x7
c001c5dd:	6a 01                	push   0x1
c001c5df:	53                   	push   ebx
c001c5e0:	e8 83 fa ff ff       	call   c001c068 <IDE::read(unsigned char, unsigned char)>
c001c5e5:	83 c4 0c             	add    esp,0xc
c001c5e8:	6a 01                	push   0x1
c001c5ea:	6a 00                	push   0x0
c001c5ec:	53                   	push   ebx
c001c5ed:	e8 c2 fb ff ff       	call   c001c1b4 <IDE::enableIRQs(unsigned char, bool)>
c001c5f2:	83 c4 0c             	add    esp,0xc
c001c5f5:	6a 01                	push   0x1
c001c5f7:	6a 01                	push   0x1
c001c5f9:	53                   	push   ebx
c001c5fa:	e8 b5 fb ff ff       	call   c001c1b4 <IDE::enableIRQs(unsigned char, bool)>
c001c5ff:	83 c4 2c             	add    esp,0x2c
c001c602:	31 c0                	xor    eax,eax
c001c604:	5b                   	pop    ebx
c001c605:	5e                   	pop    esi
c001c606:	5f                   	pop    edi
c001c607:	5d                   	pop    ebp
c001c608:	c3                   	ret    
c001c609:	90                   	nop

c001c60a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c60a:	55                   	push   ebp
c001c60b:	57                   	push   edi
c001c60c:	56                   	push   esi
c001c60d:	53                   	push   ebx
c001c60e:	83 ec 1c             	sub    esp,0x1c
c001c611:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c615:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c619:	8d 50 f8             	lea    edx,[eax-0x8]
c001c61c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c620:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c624:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c628:	80 fa 03             	cmp    dl,0x3
c001c62b:	77 5d                	ja     c001c68a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001c62d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c631:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c635:	0f b6 db             	movzx  ebx,bl
c001c638:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c63b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001c63f:	83 ca 80             	or     edx,0xffffff80
c001c642:	0f b6 d2             	movzx  edx,dl
c001c645:	52                   	push   edx
c001c646:	6a 0c                	push   0xc
c001c648:	53                   	push   ebx
c001c649:	56                   	push   esi
c001c64a:	e8 59 f9 ff ff       	call   c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c64f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001c654:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c658:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c65c:	0f b6 c0             	movzx  eax,al
c001c65f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001c663:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c665:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c66a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c66e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c672:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c676:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c67e:	83 c4 2c             	add    esp,0x2c
c001c681:	5b                   	pop    ebx
c001c682:	5e                   	pop    esi
c001c683:	5f                   	pop    edi
c001c684:	5d                   	pop    ebp
c001c685:	e9 1e f9 ff ff       	jmp    c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c68a:	3c 07                	cmp    al,0x7
c001c68c:	77 10                	ja     c001c69e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001c68e:	0f b6 db             	movzx  ebx,bl
c001c691:	0f b6 d0             	movzx  edx,al
c001c694:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001c69c:	eb 2d                	jmp    c001c6cb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c69e:	3c 0d                	cmp    al,0xd
c001c6a0:	77 13                	ja     c001c6b5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001c6a2:	0f b6 db             	movzx  ebx,bl
c001c6a5:	0f b6 c0             	movzx  eax,al
c001c6a8:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001c6af:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001c6b3:	eb 16                	jmp    c001c6cb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c6b5:	3c 15                	cmp    al,0x15
c001c6b7:	77 14                	ja     c001c6cd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001c6b9:	0f b6 db             	movzx  ebx,bl
c001c6bc:	0f b6 c0             	movzx  eax,al
c001c6bf:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001c6c7:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001c6cb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c6cd:	83 c4 1c             	add    esp,0x1c
c001c6d0:	5b                   	pop    ebx
c001c6d1:	5e                   	pop    esi
c001c6d2:	5f                   	pop    edi
c001c6d3:	5d                   	pop    ebp
c001c6d4:	c3                   	ret    
c001c6d5:	90                   	nop

c001c6d6 <IDE::detect()>:
c001c6d6:	55                   	push   ebp
c001c6d7:	57                   	push   edi
c001c6d8:	56                   	push   esi
c001c6d9:	53                   	push   ebx
c001c6da:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c6e0:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c6e7:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c6ee:	0f 85 be 02 00 00    	jne    c001c9b2 <IDE::detect()+0x2dc>
c001c6f4:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c6fb:	31 f6                	xor    esi,esi
c001c6fd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c705:	31 ed                	xor    ebp,ebp
c001c707:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c70b:	c1 e0 06             	shl    eax,0x6
c001c70e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c716:	89 e8                	mov    eax,ebp
c001c718:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c71c:	c1 e0 04             	shl    eax,0x4
c001c71f:	83 c8 a0             	or     eax,0xffffffa0
c001c722:	0f b6 c0             	movzx  eax,al
c001c725:	50                   	push   eax
c001c726:	6a 06                	push   0x6
c001c728:	56                   	push   esi
c001c729:	53                   	push   ebx
c001c72a:	e8 79 f8 ff ff       	call   c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c72f:	83 c4 0c             	add    esp,0xc
c001c732:	6a 0c                	push   0xc
c001c734:	56                   	push   esi
c001c735:	53                   	push   ebx
c001c736:	e8 2d f9 ff ff       	call   c001c068 <IDE::read(unsigned char, unsigned char)>
c001c73b:	83 c4 0c             	add    esp,0xc
c001c73e:	6a 0c                	push   0xc
c001c740:	56                   	push   esi
c001c741:	53                   	push   ebx
c001c742:	e8 21 f9 ff ff       	call   c001c068 <IDE::read(unsigned char, unsigned char)>
c001c747:	83 c4 0c             	add    esp,0xc
c001c74a:	6a 0c                	push   0xc
c001c74c:	56                   	push   esi
c001c74d:	53                   	push   ebx
c001c74e:	e8 15 f9 ff ff       	call   c001c068 <IDE::read(unsigned char, unsigned char)>
c001c753:	83 c4 0c             	add    esp,0xc
c001c756:	6a 0c                	push   0xc
c001c758:	56                   	push   esi
c001c759:	53                   	push   ebx
c001c75a:	e8 09 f9 ff ff       	call   c001c068 <IDE::read(unsigned char, unsigned char)>
c001c75f:	68 ec 00 00 00       	push   0xec
c001c764:	6a 07                	push   0x7
c001c766:	56                   	push   esi
c001c767:	53                   	push   ebx
c001c768:	e8 3b f8 ff ff       	call   c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c76d:	83 c4 1c             	add    esp,0x1c
c001c770:	6a 0c                	push   0xc
c001c772:	56                   	push   esi
c001c773:	53                   	push   ebx
c001c774:	e8 ef f8 ff ff       	call   c001c068 <IDE::read(unsigned char, unsigned char)>
c001c779:	83 c4 0c             	add    esp,0xc
c001c77c:	6a 0c                	push   0xc
c001c77e:	56                   	push   esi
c001c77f:	53                   	push   ebx
c001c780:	e8 e3 f8 ff ff       	call   c001c068 <IDE::read(unsigned char, unsigned char)>
c001c785:	83 c4 0c             	add    esp,0xc
c001c788:	6a 0c                	push   0xc
c001c78a:	56                   	push   esi
c001c78b:	53                   	push   ebx
c001c78c:	e8 d7 f8 ff ff       	call   c001c068 <IDE::read(unsigned char, unsigned char)>
c001c791:	83 c4 0c             	add    esp,0xc
c001c794:	6a 0c                	push   0xc
c001c796:	56                   	push   esi
c001c797:	53                   	push   ebx
c001c798:	e8 cb f8 ff ff       	call   c001c068 <IDE::read(unsigned char, unsigned char)>
c001c79d:	83 c4 0c             	add    esp,0xc
c001c7a0:	6a 0c                	push   0xc
c001c7a2:	56                   	push   esi
c001c7a3:	53                   	push   ebx
c001c7a4:	e8 bf f8 ff ff       	call   c001c068 <IDE::read(unsigned char, unsigned char)>
c001c7a9:	83 c4 10             	add    esp,0x10
c001c7ac:	84 c0                	test   al,al
c001c7ae:	0f 84 8b 01 00 00    	je     c001c93f <IDE::detect()+0x269>
c001c7b4:	31 ff                	xor    edi,edi
c001c7b6:	50                   	push   eax
c001c7b7:	6a 0c                	push   0xc
c001c7b9:	56                   	push   esi
c001c7ba:	53                   	push   ebx
c001c7bb:	e8 a8 f8 ff ff       	call   c001c068 <IDE::read(unsigned char, unsigned char)>
c001c7c0:	83 c4 10             	add    esp,0x10
c001c7c3:	a8 01                	test   al,0x1
c001c7c5:	0f 85 8e 01 00 00    	jne    c001c959 <IDE::detect()+0x283>
c001c7cb:	84 c0                	test   al,al
c001c7cd:	78 04                	js     c001c7d3 <IDE::detect()+0xfd>
c001c7cf:	a8 08                	test   al,0x8
c001c7d1:	75 27                	jne    c001c7fa <IDE::detect()+0x124>
c001c7d3:	47                   	inc    edi
c001c7d4:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c7da:	7e da                	jle    c001c7b6 <IDE::detect()+0xe0>
c001c7dc:	50                   	push   eax
c001c7dd:	50                   	push   eax
c001c7de:	6a 00                	push   0x0
c001c7e0:	68 40 4b 4c 00       	push   0x4c4b40
c001c7e5:	e8 ea be ff ff       	call   c00186d4 <nanoSleep(unsigned long long)>
c001c7ea:	83 c4 10             	add    esp,0x10
c001c7ed:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c7f3:	75 c1                	jne    c001c7b6 <IDE::detect()+0xe0>
c001c7f5:	e9 5f 01 00 00       	jmp    c001c959 <IDE::detect()+0x283>
c001c7fa:	31 c9                	xor    ecx,ecx
c001c7fc:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c800:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c804:	83 ec 0c             	sub    esp,0xc
c001c807:	68 80 00 00 00       	push   0x80
c001c80c:	57                   	push   edi
c001c80d:	6a 00                	push   0x0
c001c80f:	56                   	push   esi
c001c810:	53                   	push   ebx
c001c811:	e8 f4 fd ff ff       	call   c001c60a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c816:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c81b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c81f:	89 d1                	mov    ecx,edx
c001c821:	c1 e0 06             	shl    eax,0x6
c001c824:	01 d8                	add    eax,ebx
c001c826:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c82d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c834:	89 f2                	mov    edx,esi
c001c836:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c83c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c840:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c846:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c84a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c851:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c859:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c860:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c868:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c86e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c875:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c87b:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c87f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c883:	83 c4 20             	add    esp,0x20
c001c886:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c889:	83 c0 02             	add    eax,0x2
c001c88c:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c892:	83 c7 02             	add    edi,0x2
c001c895:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c898:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c89e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c8a2:	75 e2                	jne    c001c886 <IDE::detect()+0x1b0>
c001c8a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8a8:	c1 e0 06             	shl    eax,0x6
c001c8ab:	01 d8                	add    eax,ebx
c001c8ad:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001c8b3:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c8ba:	66 c1 ea 09          	shr    dx,0x9
c001c8be:	83 e2 01             	and    edx,0x1
c001c8c1:	84 c9                	test   cl,cl
c001c8c3:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c8c9:	75 2f                	jne    c001c8fa <IDE::detect()+0x224>
c001c8cb:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001c8d1:	85 c0                	test   eax,eax
c001c8d3:	74 66                	je     c001c93b <IDE::detect()+0x265>
c001c8d5:	50                   	push   eax
c001c8d6:	55                   	push   ebp
c001c8d7:	56                   	push   esi
c001c8d8:	68 ef 2b 02 c0       	push   0xc0022bef
c001c8dd:	e8 3d 28 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001c8e2:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c8e9:	e8 42 27 ff ff       	call   c000f030 <operator new(unsigned long)>
c001c8ee:	89 c7                	mov    edi,eax
c001c8f0:	89 04 24             	mov    DWORD PTR [esp],eax
c001c8f3:	e8 e8 02 00 00       	call   c001cbe0 <ATA::ATA()>
c001c8f8:	eb 28                	jmp    c001c922 <IDE::detect()+0x24c>
c001c8fa:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001c900:	55                   	push   ebp
c001c901:	56                   	push   esi
c001c902:	68 1e 2c 02 c0       	push   0xc0022c1e
c001c907:	e8 13 28 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001c90c:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001c913:	e8 18 27 ff ff       	call   c000f030 <operator new(unsigned long)>
c001c918:	89 c7                	mov    edi,eax
c001c91a:	89 04 24             	mov    DWORD PTR [esp],eax
c001c91d:	e8 ee 08 00 00       	call   c001d210 <ATAPI::ATAPI()>
c001c922:	5a                   	pop    edx
c001c923:	59                   	pop    ecx
c001c924:	57                   	push   edi
c001c925:	53                   	push   ebx
c001c926:	e8 ff 3b ff ff       	call   c001052a <Device::addChild(Device*)>
c001c92b:	8b 07                	mov    eax,DWORD PTR [edi]
c001c92d:	53                   	push   ebx
c001c92e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c932:	6a 00                	push   0x0
c001c934:	57                   	push   edi
c001c935:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c938:	83 c4 20             	add    esp,0x20
c001c93b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001c93f:	4d                   	dec    ebp
c001c940:	74 0a                	je     c001c94c <IDE::detect()+0x276>
c001c942:	bd 01 00 00 00       	mov    ebp,0x1
c001c947:	e9 bb fd ff ff       	jmp    c001c707 <IDE::detect()+0x31>
c001c94c:	4e                   	dec    esi
c001c94d:	74 63                	je     c001c9b2 <IDE::detect()+0x2dc>
c001c94f:	be 01 00 00 00       	mov    esi,0x1
c001c954:	e9 ac fd ff ff       	jmp    c001c705 <IDE::detect()+0x2f>
c001c959:	50                   	push   eax
c001c95a:	6a 04                	push   0x4
c001c95c:	56                   	push   esi
c001c95d:	53                   	push   ebx
c001c95e:	e8 05 f7 ff ff       	call   c001c068 <IDE::read(unsigned char, unsigned char)>
c001c963:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c967:	83 c4 0c             	add    esp,0xc
c001c96a:	6a 05                	push   0x5
c001c96c:	56                   	push   esi
c001c96d:	53                   	push   ebx
c001c96e:	e8 f5 f6 ff ff       	call   c001c068 <IDE::read(unsigned char, unsigned char)>
c001c973:	83 c4 10             	add    esp,0x10
c001c976:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001c97a:	80 fa 14             	cmp    dl,0x14
c001c97d:	75 04                	jne    c001c983 <IDE::detect()+0x2ad>
c001c97f:	3c eb                	cmp    al,0xeb
c001c981:	eb 07                	jmp    c001c98a <IDE::detect()+0x2b4>
c001c983:	3c 96                	cmp    al,0x96
c001c985:	75 b8                	jne    c001c93f <IDE::detect()+0x269>
c001c987:	80 fa 69             	cmp    dl,0x69
c001c98a:	75 b3                	jne    c001c93f <IDE::detect()+0x269>
c001c98c:	68 a1 00 00 00       	push   0xa1
c001c991:	6a 07                	push   0x7
c001c993:	56                   	push   esi
c001c994:	53                   	push   ebx
c001c995:	e8 0e f6 ff ff       	call   c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c99a:	5f                   	pop    edi
c001c99b:	58                   	pop    eax
c001c99c:	6a 00                	push   0x0
c001c99e:	68 40 42 0f 00       	push   0xf4240
c001c9a3:	e8 2c bd ff ff       	call   c00186d4 <nanoSleep(unsigned long long)>
c001c9a8:	83 c4 10             	add    esp,0x10
c001c9ab:	b1 01                	mov    cl,0x1
c001c9ad:	e9 4a fe ff ff       	jmp    c001c7fc <IDE::detect()+0x126>
c001c9b2:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c9b8:	5b                   	pop    ebx
c001c9b9:	5e                   	pop    esi
c001c9ba:	5f                   	pop    edi
c001c9bb:	5d                   	pop    ebp
c001c9bc:	c3                   	ret    
c001c9bd:	90                   	nop

c001c9be <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c9be:	55                   	push   ebp
c001c9bf:	57                   	push   edi
c001c9c0:	56                   	push   esi
c001c9c1:	53                   	push   ebx
c001c9c2:	83 ec 1c             	sub    esp,0x1c
c001c9c5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c9c9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c9cd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c9d1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001c9d5:	88 c3                	mov    bl,al
c001c9d7:	84 c0                	test   al,al
c001c9d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c9dd:	0f 84 67 01 00 00    	je     c001cb4a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001c9e3:	83 ec 0c             	sub    esp,0xc
c001c9e6:	68 4f 2c 02 c0       	push   0xc0022c4f
c001c9eb:	e8 2f 27 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001c9f0:	83 c4 10             	add    esp,0x10
c001c9f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9f7:	3c 01                	cmp    al,0x1
c001c9f9:	75 17                	jne    c001ca12 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001c9fb:	83 ec 0c             	sub    esp,0xc
c001c9fe:	b3 13                	mov    bl,0x13
c001ca00:	68 5b 2c 02 c0       	push   0xc0022c5b
c001ca05:	e8 15 27 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001ca0a:	83 c4 10             	add    esp,0x10
c001ca0d:	e9 25 01 00 00       	jmp    c001cb37 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001ca12:	3c 02                	cmp    al,0x2
c001ca14:	0f 85 ef 00 00 00    	jne    c001cb09 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001ca1a:	d1 e6                	shl    esi,1
c001ca1c:	09 ee                	or     esi,ebp
c001ca1e:	52                   	push   edx
c001ca1f:	89 f0                	mov    eax,esi
c001ca21:	6a 01                	push   0x1
c001ca23:	0f b6 f0             	movzx  esi,al
c001ca26:	c1 e6 06             	shl    esi,0x6
c001ca29:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001ca31:	50                   	push   eax
c001ca32:	57                   	push   edi
c001ca33:	e8 30 f6 ff ff       	call   c001c068 <IDE::read(unsigned char, unsigned char)>
c001ca38:	83 c4 10             	add    esp,0x10
c001ca3b:	89 c6                	mov    esi,eax
c001ca3d:	a8 01                	test   al,0x1
c001ca3f:	74 12                	je     c001ca53 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001ca41:	83 ec 0c             	sub    esp,0xc
c001ca44:	b3 07                	mov    bl,0x7
c001ca46:	68 70 2c 02 c0       	push   0xc0022c70
c001ca4b:	e8 cf 26 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001ca50:	83 c4 10             	add    esp,0x10
c001ca53:	f7 c6 02 00 00 00    	test   esi,0x2
c001ca59:	74 12                	je     c001ca6d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001ca5b:	83 ec 0c             	sub    esp,0xc
c001ca5e:	b3 03                	mov    bl,0x3
c001ca60:	68 8e 2c 02 c0       	push   0xc0022c8e
c001ca65:	e8 b5 26 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001ca6a:	83 c4 10             	add    esp,0x10
c001ca6d:	f7 c6 04 00 00 00    	test   esi,0x4
c001ca73:	74 12                	je     c001ca87 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001ca75:	83 ec 0c             	sub    esp,0xc
c001ca78:	b3 14                	mov    bl,0x14
c001ca7a:	68 ae 2c 02 c0       	push   0xc0022cae
c001ca7f:	e8 9b 26 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001ca84:	83 c4 10             	add    esp,0x10
c001ca87:	f7 c6 08 00 00 00    	test   esi,0x8
c001ca8d:	74 12                	je     c001caa1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001ca8f:	83 ec 0c             	sub    esp,0xc
c001ca92:	b3 03                	mov    bl,0x3
c001ca94:	68 8e 2c 02 c0       	push   0xc0022c8e
c001ca99:	e8 81 26 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001ca9e:	83 c4 10             	add    esp,0x10
c001caa1:	f7 c6 10 00 00 00    	test   esi,0x10
c001caa7:	74 12                	je     c001cabb <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001caa9:	83 ec 0c             	sub    esp,0xc
c001caac:	b3 15                	mov    bl,0x15
c001caae:	68 c6 2c 02 c0       	push   0xc0022cc6
c001cab3:	e8 67 26 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001cab8:	83 c4 10             	add    esp,0x10
c001cabb:	f7 c6 20 00 00 00    	test   esi,0x20
c001cac1:	74 12                	je     c001cad5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001cac3:	83 ec 0c             	sub    esp,0xc
c001cac6:	b3 03                	mov    bl,0x3
c001cac8:	68 8e 2c 02 c0       	push   0xc0022c8e
c001cacd:	e8 4d 26 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001cad2:	83 c4 10             	add    esp,0x10
c001cad5:	f7 c6 40 00 00 00    	test   esi,0x40
c001cadb:	74 12                	je     c001caef <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001cadd:	83 ec 0c             	sub    esp,0xc
c001cae0:	b3 16                	mov    bl,0x16
c001cae2:	68 e0 2c 02 c0       	push   0xc0022ce0
c001cae7:	e8 33 26 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001caec:	83 c4 10             	add    esp,0x10
c001caef:	89 f0                	mov    eax,esi
c001caf1:	84 c0                	test   al,al
c001caf3:	79 42                	jns    c001cb37 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001caf5:	83 ec 0c             	sub    esp,0xc
c001caf8:	b3 0d                	mov    bl,0xd
c001cafa:	68 01 2d 02 c0       	push   0xc0022d01
c001caff:	e8 1b 26 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001cb04:	83 c4 10             	add    esp,0x10
c001cb07:	eb 2e                	jmp    c001cb37 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001cb09:	3c 03                	cmp    al,0x3
c001cb0b:	75 14                	jne    c001cb21 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001cb0d:	83 ec 0c             	sub    esp,0xc
c001cb10:	b3 17                	mov    bl,0x17
c001cb12:	68 15 2d 02 c0       	push   0xc0022d15
c001cb17:	e8 03 26 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001cb1c:	83 c4 10             	add    esp,0x10
c001cb1f:	eb 16                	jmp    c001cb37 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001cb21:	3c 04                	cmp    al,0x4
c001cb23:	75 12                	jne    c001cb37 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001cb25:	83 ec 0c             	sub    esp,0xc
c001cb28:	b3 08                	mov    bl,0x8
c001cb2a:	68 2b 2d 02 c0       	push   0xc0022d2b
c001cb2f:	e8 eb 25 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001cb34:	83 c4 10             	add    esp,0x10
c001cb37:	50                   	push   eax
c001cb38:	50                   	push   eax
c001cb39:	0f b6 c3             	movzx  eax,bl
c001cb3c:	50                   	push   eax
c001cb3d:	68 43 2d 02 c0       	push   0xc0022d43
c001cb42:	e8 d8 25 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001cb47:	83 c4 10             	add    esp,0x10
c001cb4a:	83 c4 1c             	add    esp,0x1c
c001cb4d:	88 d8                	mov    al,bl
c001cb4f:	5b                   	pop    ebx
c001cb50:	5e                   	pop    esi
c001cb51:	5f                   	pop    edi
c001cb52:	5d                   	pop    ebp
c001cb53:	c3                   	ret    

c001cb54 <IDE::polling(unsigned char, unsigned int)>:
c001cb54:	57                   	push   edi
c001cb55:	56                   	push   esi
c001cb56:	53                   	push   ebx
c001cb57:	bb 04 00 00 00       	mov    ebx,0x4
c001cb5c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001cb60:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001cb65:	52                   	push   edx
c001cb66:	6a 0c                	push   0xc
c001cb68:	56                   	push   esi
c001cb69:	57                   	push   edi
c001cb6a:	e8 f9 f4 ff ff       	call   c001c068 <IDE::read(unsigned char, unsigned char)>
c001cb6f:	83 c4 10             	add    esp,0x10
c001cb72:	4b                   	dec    ebx
c001cb73:	75 f0                	jne    c001cb65 <IDE::polling(unsigned char, unsigned int)+0x11>
c001cb75:	bb a0 86 01 00       	mov    ebx,0x186a0
c001cb7a:	50                   	push   eax
c001cb7b:	6a 0c                	push   0xc
c001cb7d:	56                   	push   esi
c001cb7e:	57                   	push   edi
c001cb7f:	e8 e4 f4 ff ff       	call   c001c068 <IDE::read(unsigned char, unsigned char)>
c001cb84:	83 c4 10             	add    esp,0x10
c001cb87:	a8 01                	test   al,0x1
c001cb89:	74 12                	je     c001cb9d <IDE::polling(unsigned char, unsigned int)+0x49>
c001cb8b:	83 ec 0c             	sub    esp,0xc
c001cb8e:	68 5d 2d 02 c0       	push   0xc0022d5d
c001cb93:	e8 87 25 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001cb98:	83 c4 10             	add    esp,0x10
c001cb9b:	eb 17                	jmp    c001cbb4 <IDE::polling(unsigned char, unsigned int)+0x60>
c001cb9d:	a8 20                	test   al,0x20
c001cb9f:	75 0f                	jne    c001cbb0 <IDE::polling(unsigned char, unsigned int)+0x5c>
c001cba1:	4b                   	dec    ebx
c001cba2:	74 10                	je     c001cbb4 <IDE::polling(unsigned char, unsigned int)+0x60>
c001cba4:	84 c0                	test   al,al
c001cba6:	78 d2                	js     c001cb7a <IDE::polling(unsigned char, unsigned int)+0x26>
c001cba8:	a8 08                	test   al,0x8
c001cbaa:	74 ce                	je     c001cb7a <IDE::polling(unsigned char, unsigned int)+0x26>
c001cbac:	31 c0                	xor    eax,eax
c001cbae:	eb 06                	jmp    c001cbb6 <IDE::polling(unsigned char, unsigned int)+0x62>
c001cbb0:	b0 01                	mov    al,0x1
c001cbb2:	eb 02                	jmp    c001cbb6 <IDE::polling(unsigned char, unsigned int)+0x62>
c001cbb4:	b0 02                	mov    al,0x2
c001cbb6:	5b                   	pop    ebx
c001cbb7:	5e                   	pop    esi
c001cbb8:	5f                   	pop    edi
c001cbb9:	c3                   	ret    

c001cbba <ATA::close(int, int, void*)>:
c001cbba:	83 ec 0c             	sub    esp,0xc
c001cbbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbc1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cbc7:	85 c0                	test   eax,eax
c001cbc9:	74 0c                	je     c001cbd7 <ATA::close(int, int, void*)+0x1d>
c001cbcb:	83 ec 0c             	sub    esp,0xc
c001cbce:	8b 10                	mov    edx,DWORD PTR [eax]
c001cbd0:	50                   	push   eax
c001cbd1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cbd4:	83 c4 10             	add    esp,0x10
c001cbd7:	31 c0                	xor    eax,eax
c001cbd9:	83 c4 0c             	add    esp,0xc
c001cbdc:	c3                   	ret    
c001cbdd:	90                   	nop

c001cbde <ATA::powerSaving(PowerSavingLevel)>:
c001cbde:	c3                   	ret    
c001cbdf:	90                   	nop

c001cbe0 <ATA::ATA()>:
c001cbe0:	83 ec 0c             	sub    esp,0xc
c001cbe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbe7:	83 ec 04             	sub    esp,0x4
c001cbea:	68 00 02 00 00       	push   0x200
c001cbef:	68 a0 2d 02 c0       	push   0xc0022da0
c001cbf4:	50                   	push   eax
c001cbf5:	e8 36 3d ff ff       	call   c0010930 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cbfa:	83 c4 10             	add    esp,0x10
c001cbfd:	ba cc 2d 02 c0       	mov    edx,0xc0022dcc
c001cc02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc06:	89 10                	mov    DWORD PTR [eax],edx
c001cc08:	90                   	nop
c001cc09:	83 c4 0c             	add    esp,0xc
c001cc0c:	c3                   	ret    
c001cc0d:	90                   	nop

c001cc0e <ATA::flush(bool)>:
c001cc0e:	53                   	push   ebx
c001cc0f:	83 ec 08             	sub    esp,0x8
c001cc12:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001cc17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cc1b:	19 c0                	sbb    eax,eax
c001cc1d:	83 e0 fd             	and    eax,0xfffffffd
c001cc20:	05 ea 00 00 00       	add    eax,0xea
c001cc25:	50                   	push   eax
c001cc26:	6a 07                	push   0x7
c001cc28:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc2f:	50                   	push   eax
c001cc30:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc36:	e8 6d f3 ff ff       	call   c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc3b:	83 c4 0c             	add    esp,0xc
c001cc3e:	6a 00                	push   0x0
c001cc40:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc47:	50                   	push   eax
c001cc48:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc4e:	e8 01 ff ff ff       	call   c001cb54 <IDE::polling(unsigned char, unsigned int)>
c001cc53:	83 c4 18             	add    esp,0x18
c001cc56:	5b                   	pop    ebx
c001cc57:	c3                   	ret    

c001cc58 <ATA::readyForCommand()>:
c001cc58:	56                   	push   esi
c001cc59:	53                   	push   ebx
c001cc5a:	31 db                	xor    ebx,ebx
c001cc5c:	50                   	push   eax
c001cc5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cc61:	50                   	push   eax
c001cc62:	6a 0c                	push   0xc
c001cc64:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cc6b:	50                   	push   eax
c001cc6c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cc72:	e8 f1 f3 ff ff       	call   c001c068 <IDE::read(unsigned char, unsigned char)>
c001cc77:	83 c4 10             	add    esp,0x10
c001cc7a:	a8 88                	test   al,0x88
c001cc7c:	74 23                	je     c001cca1 <ATA::readyForCommand()+0x49>
c001cc7e:	43                   	inc    ebx
c001cc7f:	83 fb 63             	cmp    ebx,0x63
c001cc82:	7e dd                	jle    c001cc61 <ATA::readyForCommand()+0x9>
c001cc84:	51                   	push   ecx
c001cc85:	51                   	push   ecx
c001cc86:	6a 00                	push   0x0
c001cc88:	68 40 42 0f 00       	push   0xf4240
c001cc8d:	e8 42 ba ff ff       	call   c00186d4 <nanoSleep(unsigned long long)>
c001cc92:	83 c4 10             	add    esp,0x10
c001cc95:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cc9b:	75 c4                	jne    c001cc61 <ATA::readyForCommand()+0x9>
c001cc9d:	31 c0                	xor    eax,eax
c001cc9f:	eb 02                	jmp    c001cca3 <ATA::readyForCommand()+0x4b>
c001cca1:	b0 01                	mov    al,0x1
c001cca3:	5a                   	pop    edx
c001cca4:	5b                   	pop    ebx
c001cca5:	5e                   	pop    esi
c001cca6:	c3                   	ret    
c001cca7:	90                   	nop

c001cca8 <ATA::access(unsigned long long, int, void*, bool)>:
c001cca8:	55                   	push   ebp
c001cca9:	57                   	push   edi
c001ccaa:	56                   	push   esi
c001ccab:	53                   	push   ebx
c001ccac:	83 ec 2c             	sub    esp,0x2c
c001ccaf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ccb3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ccb7:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ccbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ccbf:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001ccc3:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ccc7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cccb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001ccd1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ccd5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ccdb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ccdf:	c1 e0 06             	shl    eax,0x6
c001cce2:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001ccea:	74 5d                	je     c001cd49 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001ccec:	89 fa                	mov    edx,edi
c001ccee:	89 f0                	mov    eax,esi
c001ccf0:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001ccf4:	c1 ea 1c             	shr    edx,0x1c
c001ccf7:	89 d1                	mov    ecx,edx
c001ccf9:	09 c1                	or     ecx,eax
c001ccfb:	74 25                	je     c001cd22 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001ccfd:	31 ed                	xor    ebp,ebp
c001ccff:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001cd06:	89 fa                	mov    edx,edi
c001cd08:	89 f0                	mov    eax,esi
c001cd0a:	0f ad d0             	shrd   eax,edx,cl
c001cd0d:	d3 ea                	shr    edx,cl
c001cd0f:	f6 c1 20             	test   cl,0x20
c001cd12:	74 02                	je     c001cd16 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001cd14:	89 d0                	mov    eax,edx
c001cd16:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001cd1a:	45                   	inc    ebp
c001cd1b:	83 fd 06             	cmp    ebp,0x6
c001cd1e:	75 df                	jne    c001ccff <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001cd20:	eb 76                	jmp    c001cd98 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001cd22:	89 f0                	mov    eax,esi
c001cd24:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001cd29:	89 fa                	mov    edx,edi
c001cd2b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cd32:	0f ac d0 10          	shrd   eax,edx,0x10
c001cd36:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cd3b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001cd3f:	c1 ee 18             	shr    esi,0x18
c001cd42:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001cd47:	eb 56                	jmp    c001cd9f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001cd49:	6a 00                	push   0x0
c001cd4b:	6a 3f                	push   0x3f
c001cd4d:	57                   	push   edi
c001cd4e:	56                   	push   esi
c001cd4f:	e8 d8 1e 00 00       	call   c001ec2c <__umoddi3>
c001cd54:	83 c4 10             	add    esp,0x10
c001cd57:	40                   	inc    eax
c001cd58:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001cd5c:	6a 00                	push   0x0
c001cd5e:	68 f0 03 00 00       	push   0x3f0
c001cd63:	57                   	push   edi
c001cd64:	56                   	push   esi
c001cd65:	e8 c2 1d 00 00       	call   c001eb2c <__udivdi3>
c001cd6a:	83 c4 10             	add    esp,0x10
c001cd6d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001cd72:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cd79:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cd7e:	6a 00                	push   0x0
c001cd80:	6a 3f                	push   0x3f
c001cd82:	57                   	push   edi
c001cd83:	56                   	push   esi
c001cd84:	e8 a3 1d 00 00       	call   c001eb2c <__udivdi3>
c001cd89:	83 c4 10             	add    esp,0x10
c001cd8c:	89 c6                	mov    esi,eax
c001cd8e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001cd93:	83 e6 0f             	and    esi,0xf
c001cd96:	eb 07                	jmp    c001cd9f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001cd98:	31 f6                	xor    esi,esi
c001cd9a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001cd9f:	bf 01 00 00 00       	mov    edi,0x1
c001cda4:	50                   	push   eax
c001cda5:	6a 00                	push   0x0
c001cda7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cdae:	50                   	push   eax
c001cdaf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cdb3:	e8 fc f3 ff ff       	call   c001c1b4 <IDE::enableIRQs(unsigned char, bool)>
c001cdb8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cdbb:	e8 98 fe ff ff       	call   c001cc58 <ATA::readyForCommand()>
c001cdc0:	83 c4 10             	add    esp,0x10
c001cdc3:	84 c0                	test   al,al
c001cdc5:	0f 84 50 02 00 00    	je     c001d01b <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001cdcb:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cdd1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cdd7:	c1 e0 04             	shl    eax,0x4
c001cdda:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001cde1:	09 c6                	or     esi,eax
c001cde3:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001cde8:	75 05                	jne    c001cdef <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001cdea:	83 ce a0             	or     esi,0xffffffa0
c001cded:	eb 03                	jmp    c001cdf2 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001cdef:	83 ce e0             	or     esi,0xffffffe0
c001cdf2:	89 f0                	mov    eax,esi
c001cdf4:	0f b6 f0             	movzx  esi,al
c001cdf7:	56                   	push   esi
c001cdf8:	6a 06                	push   0x6
c001cdfa:	51                   	push   ecx
c001cdfb:	52                   	push   edx
c001cdfc:	e8 a7 f1 ff ff       	call   c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce01:	83 c4 10             	add    esp,0x10
c001ce04:	6a 00                	push   0x0
c001ce06:	6a 01                	push   0x1
c001ce08:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce0f:	50                   	push   eax
c001ce10:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce16:	e8 8d f1 ff ff       	call   c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce1b:	83 c4 10             	add    esp,0x10
c001ce1e:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001ce23:	75 6e                	jne    c001ce93 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001ce25:	6a 00                	push   0x0
c001ce27:	6a 08                	push   0x8
c001ce29:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce30:	50                   	push   eax
c001ce31:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce37:	e8 6c f1 ff ff       	call   c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce3c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ce41:	50                   	push   eax
c001ce42:	6a 09                	push   0x9
c001ce44:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce4b:	50                   	push   eax
c001ce4c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce52:	e8 51 f1 ff ff       	call   c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce57:	83 c4 20             	add    esp,0x20
c001ce5a:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ce5f:	50                   	push   eax
c001ce60:	6a 0a                	push   0xa
c001ce62:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce69:	50                   	push   eax
c001ce6a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce70:	e8 33 f1 ff ff       	call   c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce75:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ce7a:	50                   	push   eax
c001ce7b:	6a 0b                	push   0xb
c001ce7d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce84:	50                   	push   eax
c001ce85:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce8b:	e8 18 f1 ff ff       	call   c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce90:	83 c4 20             	add    esp,0x20
c001ce93:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ce98:	50                   	push   eax
c001ce99:	6a 02                	push   0x2
c001ce9b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cea2:	50                   	push   eax
c001cea3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cea9:	e8 fa f0 ff ff       	call   c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ceae:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001ceb3:	50                   	push   eax
c001ceb4:	6a 03                	push   0x3
c001ceb6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cebd:	50                   	push   eax
c001cebe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cec4:	e8 df f0 ff ff       	call   c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cec9:	83 c4 20             	add    esp,0x20
c001cecc:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001ced1:	50                   	push   eax
c001ced2:	6a 04                	push   0x4
c001ced4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cedb:	50                   	push   eax
c001cedc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cee2:	e8 c1 f0 ff ff       	call   c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cee7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ceec:	50                   	push   eax
c001ceed:	6a 05                	push   0x5
c001ceef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cef6:	50                   	push   eax
c001cef7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cefd:	e8 a6 f0 ff ff       	call   c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf02:	83 c4 20             	add    esp,0x20
c001cf05:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001cf0a:	0f 94 c0             	sete   al
c001cf0d:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cf12:	74 09                	je     c001cf1d <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001cf14:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001cf1b:	eb 07                	jmp    c001cf24 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001cf1d:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001cf24:	0f b6 c0             	movzx  eax,al
c001cf27:	50                   	push   eax
c001cf28:	6a 07                	push   0x7
c001cf2a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf31:	50                   	push   eax
c001cf32:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf38:	e8 6b f0 ff ff       	call   c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf3d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cf41:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cf45:	83 c4 10             	add    esp,0x10
c001cf48:	85 f6                	test   esi,esi
c001cf4a:	0f 84 ac 00 00 00    	je     c001cffc <ATA::access(unsigned long long, int, void*, bool)+0x354>
c001cf50:	50                   	push   eax
c001cf51:	6a 01                	push   0x1
c001cf53:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf5a:	50                   	push   eax
c001cf5b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf61:	e8 ee fb ff ff       	call   c001cb54 <IDE::polling(unsigned char, unsigned int)>
c001cf66:	83 c4 10             	add    esp,0x10
c001cf69:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cf6f:	84 c0                	test   al,al
c001cf71:	74 20                	je     c001cf93 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c001cf73:	0f b6 f8             	movzx  edi,al
c001cf76:	0f b6 d2             	movzx  edx,dl
c001cf79:	57                   	push   edi
c001cf7a:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cf81:	50                   	push   eax
c001cf82:	52                   	push   edx
c001cf83:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf89:	e8 30 fa ff ff       	call   c001c9be <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cf8e:	e9 85 00 00 00       	jmp    c001d018 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c001cf93:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001cf98:	74 41                	je     c001cfdb <ATA::access(unsigned long long, int, void*, bool)+0x333>
c001cf9a:	31 c9                	xor    ecx,ecx
c001cf9c:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001cfa0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cfa4:	50                   	push   eax
c001cfa5:	50                   	push   eax
c001cfa6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfad:	50                   	push   eax
c001cfae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfb4:	e8 dd ef ff ff       	call   c001bf96 <IDE::getBase(unsigned char)>
c001cfb9:	89 c2                	mov    edx,eax
c001cfbb:	89 e8                	mov    eax,ebp
c001cfbd:	66 ef                	out    dx,ax
c001cfbf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cfc3:	83 c4 10             	add    esp,0x10
c001cfc6:	41                   	inc    ecx
c001cfc7:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001cfcd:	75 cd                	jne    c001cf9c <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c001cfcf:	4e                   	dec    esi
c001cfd0:	81 c7 00 02 00 00    	add    edi,0x200
c001cfd6:	e9 6d ff ff ff       	jmp    c001cf48 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c001cfdb:	0f b6 d2             	movzx  edx,dl
c001cfde:	51                   	push   ecx
c001cfdf:	51                   	push   ecx
c001cfe0:	52                   	push   edx
c001cfe1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfe7:	e8 aa ef ff ff       	call   c001bf96 <IDE::getBase(unsigned char)>
c001cfec:	b9 00 01 00 00       	mov    ecx,0x100
c001cff1:	89 c2                	mov    edx,eax
c001cff3:	fc                   	cld    
c001cff4:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cff7:	83 c4 10             	add    esp,0x10
c001cffa:	eb d3                	jmp    c001cfcf <ATA::access(unsigned long long, int, void*, bool)+0x327>
c001cffc:	31 ff                	xor    edi,edi
c001cffe:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d003:	74 16                	je     c001d01b <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001d005:	50                   	push   eax
c001d006:	50                   	push   eax
c001d007:	31 c0                	xor    eax,eax
c001d009:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001d00e:	0f 94 c0             	sete   al
c001d011:	50                   	push   eax
c001d012:	53                   	push   ebx
c001d013:	e8 f6 fb ff ff       	call   c001cc0e <ATA::flush(bool)>
c001d018:	83 c4 10             	add    esp,0x10
c001d01b:	83 c4 2c             	add    esp,0x2c
c001d01e:	89 f8                	mov    eax,edi
c001d020:	5b                   	pop    ebx
c001d021:	5e                   	pop    esi
c001d022:	5f                   	pop    edi
c001d023:	5d                   	pop    ebp
c001d024:	c3                   	ret    
c001d025:	90                   	nop

c001d026 <ATA::read(unsigned long long, int, void*)>:
c001d026:	57                   	push   edi
c001d027:	b8 04 00 00 00       	mov    eax,0x4
c001d02c:	56                   	push   esi
c001d02d:	53                   	push   ebx
c001d02e:	83 ec 10             	sub    esp,0x10
c001d031:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d035:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d039:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d03c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d040:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d044:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d04a:	77 3b                	ja     c001d087 <ATA::read(unsigned long long, int, void*)+0x61>
c001d04c:	b8 06 00 00 00       	mov    eax,0x6
c001d051:	85 d2                	test   edx,edx
c001d053:	74 32                	je     c001d087 <ATA::read(unsigned long long, int, void*)+0x61>
c001d055:	50                   	push   eax
c001d056:	50                   	push   eax
c001d057:	6a 00                	push   0x0
c001d059:	52                   	push   edx
c001d05a:	53                   	push   ebx
c001d05b:	57                   	push   edi
c001d05c:	56                   	push   esi
c001d05d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d061:	e8 42 fc ff ff       	call   c001cca8 <ATA::access(unsigned long long, int, void*, bool)>
c001d066:	83 c4 20             	add    esp,0x20
c001d069:	85 c0                	test   eax,eax
c001d06b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d06f:	75 11                	jne    c001d082 <ATA::read(unsigned long long, int, void*)+0x5c>
c001d071:	01 1d 24 5b 02 c0    	add    DWORD PTR ds:0xc0025b24,ebx
c001d077:	e8 ca fe fe ff       	call   c000cf46 <VgaText::updateDiskUsage()>
c001d07c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d080:	eb 05                	jmp    c001d087 <ATA::read(unsigned long long, int, void*)+0x61>
c001d082:	b8 01 00 00 00       	mov    eax,0x1
c001d087:	83 c4 10             	add    esp,0x10
c001d08a:	5b                   	pop    ebx
c001d08b:	5e                   	pop    esi
c001d08c:	5f                   	pop    edi
c001d08d:	c3                   	ret    

c001d08e <ATA::write(unsigned long long, int, void*)>:
c001d08e:	57                   	push   edi
c001d08f:	b8 04 00 00 00       	mov    eax,0x4
c001d094:	56                   	push   esi
c001d095:	53                   	push   ebx
c001d096:	83 ec 10             	sub    esp,0x10
c001d099:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d09d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d0a1:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d0a4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d0a8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d0ac:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d0b2:	77 3b                	ja     c001d0ef <ATA::write(unsigned long long, int, void*)+0x61>
c001d0b4:	b8 06 00 00 00       	mov    eax,0x6
c001d0b9:	85 d2                	test   edx,edx
c001d0bb:	74 32                	je     c001d0ef <ATA::write(unsigned long long, int, void*)+0x61>
c001d0bd:	50                   	push   eax
c001d0be:	50                   	push   eax
c001d0bf:	6a 01                	push   0x1
c001d0c1:	52                   	push   edx
c001d0c2:	53                   	push   ebx
c001d0c3:	57                   	push   edi
c001d0c4:	56                   	push   esi
c001d0c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d0c9:	e8 da fb ff ff       	call   c001cca8 <ATA::access(unsigned long long, int, void*, bool)>
c001d0ce:	83 c4 20             	add    esp,0x20
c001d0d1:	85 c0                	test   eax,eax
c001d0d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d0d7:	75 11                	jne    c001d0ea <ATA::write(unsigned long long, int, void*)+0x5c>
c001d0d9:	01 1d 20 5b 02 c0    	add    DWORD PTR ds:0xc0025b20,ebx
c001d0df:	e8 62 fe fe ff       	call   c000cf46 <VgaText::updateDiskUsage()>
c001d0e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0e8:	eb 05                	jmp    c001d0ef <ATA::write(unsigned long long, int, void*)+0x61>
c001d0ea:	b8 01 00 00 00       	mov    eax,0x1
c001d0ef:	83 c4 10             	add    esp,0x10
c001d0f2:	5b                   	pop    ebx
c001d0f3:	5e                   	pop    esi
c001d0f4:	5f                   	pop    edi
c001d0f5:	c3                   	ret    

c001d0f6 <ATA::detectCHS()>:
c001d0f6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d0fa:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d100:	c1 e0 06             	shl    eax,0x6
c001d103:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d109:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d113:	c7 44 24 04 af 2d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022daf
c001d11b:	e9 fe 80 ff ff       	jmp    c001521e <Krnl::panic(char const*)>

c001d120 <ATA::open(int, int, void*)>:
c001d120:	53                   	push   ebx
c001d121:	83 ec 08             	sub    esp,0x8
c001d124:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d128:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d12c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d130:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d136:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d13c:	c1 e0 06             	shl    eax,0x6
c001d13f:	01 d0                	add    eax,edx
c001d141:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d148:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d14e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d155:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d15f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d165:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d16c:	75 0c                	jne    c001d17a <ATA::open(int, int, void*)+0x5a>
c001d16e:	83 ec 0c             	sub    esp,0xc
c001d171:	53                   	push   ebx
c001d172:	e8 7f ff ff ff       	call   c001d0f6 <ATA::detectCHS()>
c001d177:	83 c4 10             	add    esp,0x10
c001d17a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d180:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d186:	c1 e0 06             	shl    eax,0x6
c001d189:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d190:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d19a:	d1 e8                	shr    eax,1
c001d19c:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d1a2:	6a 04                	push   0x4
c001d1a4:	6a 0c                	push   0xc
c001d1a6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d1ad:	50                   	push   eax
c001d1ae:	52                   	push   edx
c001d1af:	e8 f4 ed ff ff       	call   c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1b4:	90                   	nop
c001d1b5:	90                   	nop
c001d1b6:	6a 00                	push   0x0
c001d1b8:	6a 0c                	push   0xc
c001d1ba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d1c1:	50                   	push   eax
c001d1c2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d1c8:	e8 db ed ff ff       	call   c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1cd:	83 c4 14             	add    esp,0x14
c001d1d0:	53                   	push   ebx
c001d1d1:	e8 c2 37 ff ff       	call   c0010998 <PhysicalDisk::startCache()>
c001d1d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d1d9:	e8 c8 50 ff ff       	call   c00122a6 <createPartitionsForDisk(PhysicalDisk*)>
c001d1de:	31 c0                	xor    eax,eax
c001d1e0:	83 c4 18             	add    esp,0x18
c001d1e3:	5b                   	pop    ebx
c001d1e4:	c3                   	ret    
c001d1e5:	90                   	nop

c001d1e6 <ATAPI::write(unsigned long long, int, void*)>:
c001d1e6:	b8 03 00 00 00       	mov    eax,0x3
c001d1eb:	c3                   	ret    

c001d1ec <ATAPI::close(int, int, void*)>:
c001d1ec:	83 ec 0c             	sub    esp,0xc
c001d1ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1f3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d1f9:	85 c0                	test   eax,eax
c001d1fb:	74 0c                	je     c001d209 <ATAPI::close(int, int, void*)+0x1d>
c001d1fd:	83 ec 0c             	sub    esp,0xc
c001d200:	8b 10                	mov    edx,DWORD PTR [eax]
c001d202:	50                   	push   eax
c001d203:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d206:	83 c4 10             	add    esp,0x10
c001d209:	31 c0                	xor    eax,eax
c001d20b:	83 c4 0c             	add    esp,0xc
c001d20e:	c3                   	ret    
c001d20f:	90                   	nop

c001d210 <ATAPI::ATAPI()>:
c001d210:	83 ec 0c             	sub    esp,0xc
c001d213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d217:	83 ec 04             	sub    esp,0x4
c001d21a:	68 00 08 00 00       	push   0x800
c001d21f:	68 f8 2d 02 c0       	push   0xc0022df8
c001d224:	50                   	push   eax
c001d225:	e8 06 37 ff ff       	call   c0010930 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d22a:	83 c4 10             	add    esp,0x10
c001d22d:	ba 38 2e 02 c0       	mov    edx,0xc0022e38
c001d232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d236:	89 10                	mov    DWORD PTR [eax],edx
c001d238:	90                   	nop
c001d239:	83 c4 0c             	add    esp,0xc
c001d23c:	c3                   	ret    
c001d23d:	90                   	nop

c001d23e <ATAPI::readyForCommand()>:
c001d23e:	56                   	push   esi
c001d23f:	53                   	push   ebx
c001d240:	31 db                	xor    ebx,ebx
c001d242:	50                   	push   eax
c001d243:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d247:	50                   	push   eax
c001d248:	6a 0c                	push   0xc
c001d24a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d251:	50                   	push   eax
c001d252:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d258:	e8 0b ee ff ff       	call   c001c068 <IDE::read(unsigned char, unsigned char)>
c001d25d:	83 c4 10             	add    esp,0x10
c001d260:	a8 88                	test   al,0x88
c001d262:	74 23                	je     c001d287 <ATAPI::readyForCommand()+0x49>
c001d264:	43                   	inc    ebx
c001d265:	83 fb 63             	cmp    ebx,0x63
c001d268:	7e dd                	jle    c001d247 <ATAPI::readyForCommand()+0x9>
c001d26a:	51                   	push   ecx
c001d26b:	51                   	push   ecx
c001d26c:	6a 00                	push   0x0
c001d26e:	68 40 42 0f 00       	push   0xf4240
c001d273:	e8 5c b4 ff ff       	call   c00186d4 <nanoSleep(unsigned long long)>
c001d278:	83 c4 10             	add    esp,0x10
c001d27b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d281:	75 c4                	jne    c001d247 <ATAPI::readyForCommand()+0x9>
c001d283:	31 c0                	xor    eax,eax
c001d285:	eb 02                	jmp    c001d289 <ATAPI::readyForCommand()+0x4b>
c001d287:	b0 01                	mov    al,0x1
c001d289:	5a                   	pop    edx
c001d28a:	5b                   	pop    ebx
c001d28b:	5e                   	pop    esi
c001d28c:	c3                   	ret    
c001d28d:	90                   	nop

c001d28e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d28e:	55                   	push   ebp
c001d28f:	57                   	push   edi
c001d290:	56                   	push   esi
c001d291:	53                   	push   ebx
c001d292:	83 ec 20             	sub    esp,0x20
c001d295:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d299:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d29d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d2a1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d2a5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d2a9:	6a 01                	push   0x1
c001d2ab:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2b2:	50                   	push   eax
c001d2b3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2b9:	e8 f6 ee ff ff       	call   c001c1b4 <IDE::enableIRQs(unsigned char, bool)>
c001d2be:	5e                   	pop    esi
c001d2bf:	58                   	pop    eax
c001d2c0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2c7:	50                   	push   eax
c001d2c8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2ce:	e8 af ec ff ff       	call   c001bf82 <IDE::prepareInterrupt(unsigned char)>
c001d2d3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d2d6:	e8 63 ff ff ff       	call   c001d23e <ATAPI::readyForCommand()>
c001d2db:	83 c4 10             	add    esp,0x10
c001d2de:	84 c0                	test   al,al
c001d2e0:	75 0a                	jne    c001d2ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d2e2:	bb 01 00 00 00       	mov    ebx,0x1
c001d2e7:	e9 57 02 00 00       	jmp    c001d543 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d2ec:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001d2f2:	c1 e0 04             	shl    eax,0x4
c001d2f5:	0f b6 c0             	movzx  eax,al
c001d2f8:	50                   	push   eax
c001d2f9:	6a 06                	push   0x6
c001d2fb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d302:	50                   	push   eax
c001d303:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d309:	e8 9a ec ff ff       	call   c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d30e:	6a 00                	push   0x0
c001d310:	6a 01                	push   0x1
c001d312:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d319:	50                   	push   eax
c001d31a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d320:	e8 83 ec ff ff       	call   c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d325:	83 c4 20             	add    esp,0x20
c001d328:	0f b6 c3             	movzx  eax,bl
c001d32b:	0f b6 df             	movzx  ebx,bh
c001d32e:	50                   	push   eax
c001d32f:	6a 04                	push   0x4
c001d331:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d338:	50                   	push   eax
c001d339:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d33f:	e8 64 ec ff ff       	call   c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d344:	53                   	push   ebx
c001d345:	6a 05                	push   0x5
c001d347:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d34e:	50                   	push   eax
c001d34f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d355:	e8 4e ec ff ff       	call   c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d35a:	83 c4 20             	add    esp,0x20
c001d35d:	68 a0 00 00 00       	push   0xa0
c001d362:	6a 07                	push   0x7
c001d364:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d36b:	50                   	push   eax
c001d36c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d372:	e8 31 ec ff ff       	call   c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d377:	83 c4 0c             	add    esp,0xc
c001d37a:	6a 01                	push   0x1
c001d37c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d383:	50                   	push   eax
c001d384:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d38a:	e8 c5 f7 ff ff       	call   c001cb54 <IDE::polling(unsigned char, unsigned int)>
c001d38f:	83 c4 10             	add    esp,0x10
c001d392:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001d398:	84 c0                	test   al,al
c001d39a:	74 23                	je     c001d3bf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d39c:	0f b6 d8             	movzx  ebx,al
c001d39f:	0f b6 d2             	movzx  edx,dl
c001d3a2:	53                   	push   ebx
c001d3a3:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001d3aa:	50                   	push   eax
c001d3ab:	52                   	push   edx
c001d3ac:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d3b2:	e8 07 f6 ff ff       	call   c001c9be <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d3b7:	83 c4 10             	add    esp,0x10
c001d3ba:	e9 84 01 00 00       	jmp    c001d543 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d3bf:	0f b6 d2             	movzx  edx,dl
c001d3c2:	53                   	push   ebx
c001d3c3:	53                   	push   ebx
c001d3c4:	52                   	push   edx
c001d3c5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d3cb:	e8 c6 eb ff ff       	call   c001bf96 <IDE::getBase(unsigned char)>
c001d3d0:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d3d4:	b9 06 00 00 00       	mov    ecx,0x6
c001d3d9:	89 c2                	mov    edx,eax
c001d3db:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d3de:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d3e2:	83 c4 10             	add    esp,0x10
c001d3e5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d3eb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d3f2:	85 db                	test   ebx,ebx
c001d3f4:	0f 84 ec 00 00 00    	je     c001d4e6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d3fa:	51                   	push   ecx
c001d3fb:	51                   	push   ecx
c001d3fc:	52                   	push   edx
c001d3fd:	50                   	push   eax
c001d3fe:	e8 13 ed ff ff       	call   c001c116 <IDE::waitInterrupt(unsigned char)>
c001d403:	83 c4 10             	add    esp,0x10
c001d406:	84 c0                	test   al,al
c001d408:	0f 84 d4 fe ff ff    	je     c001d2e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d40e:	56                   	push   esi
c001d40f:	56                   	push   esi
c001d410:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d417:	50                   	push   eax
c001d418:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d41e:	e8 5f eb ff ff       	call   c001bf82 <IDE::prepareInterrupt(unsigned char)>
c001d423:	83 c4 0c             	add    esp,0xc
c001d426:	6a 04                	push   0x4
c001d428:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d42f:	50                   	push   eax
c001d430:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d436:	e8 2d ec ff ff       	call   c001c068 <IDE::read(unsigned char, unsigned char)>
c001d43b:	83 c4 0c             	add    esp,0xc
c001d43e:	89 c6                	mov    esi,eax
c001d440:	6a 05                	push   0x5
c001d442:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d449:	50                   	push   eax
c001d44a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d450:	e8 13 ec ff ff       	call   c001c068 <IDE::read(unsigned char, unsigned char)>
c001d455:	89 f1                	mov    ecx,esi
c001d457:	0f b6 c0             	movzx  eax,al
c001d45a:	0f b6 f1             	movzx  esi,cl
c001d45d:	c1 e0 08             	shl    eax,0x8
c001d460:	09 c6                	or     esi,eax
c001d462:	d1 fe                	sar    esi,1
c001d464:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d468:	83 c4 10             	add    esp,0x10
c001d46b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d470:	74 41                	je     c001d4b3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001d472:	31 c9                	xor    ecx,ecx
c001d474:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d47a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d481:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d485:	75 0a                	jne    c001d491 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001d487:	01 c9                	add    ecx,ecx
c001d489:	01 cd                	add    ebp,ecx
c001d48b:	4b                   	dec    ebx
c001d48c:	e9 54 ff ff ff       	jmp    c001d3e5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001d491:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d496:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d49a:	51                   	push   ecx
c001d49b:	51                   	push   ecx
c001d49c:	52                   	push   edx
c001d49d:	50                   	push   eax
c001d49e:	e8 f3 ea ff ff       	call   c001bf96 <IDE::getBase(unsigned char)>
c001d4a3:	89 c2                	mov    edx,eax
c001d4a5:	89 f0                	mov    eax,esi
c001d4a7:	66 ef                	out    dx,ax
c001d4a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d4ad:	83 c4 10             	add    esp,0x10
c001d4b0:	41                   	inc    ecx
c001d4b1:	eb c1                	jmp    c001d474 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001d4b3:	31 f6                	xor    esi,esi
c001d4b5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d4bb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d4c2:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d4c6:	75 06                	jne    c001d4ce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001d4c8:	01 f6                	add    esi,esi
c001d4ca:	01 f5                	add    ebp,esi
c001d4cc:	eb bd                	jmp    c001d48b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001d4ce:	51                   	push   ecx
c001d4cf:	51                   	push   ecx
c001d4d0:	52                   	push   edx
c001d4d1:	50                   	push   eax
c001d4d2:	e8 bf ea ff ff       	call   c001bf96 <IDE::getBase(unsigned char)>
c001d4d7:	89 c2                	mov    edx,eax
c001d4d9:	66 ed                	in     ax,dx
c001d4db:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d4e0:	83 c4 10             	add    esp,0x10
c001d4e3:	46                   	inc    esi
c001d4e4:	eb cf                	jmp    c001d4b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001d4e6:	51                   	push   ecx
c001d4e7:	51                   	push   ecx
c001d4e8:	52                   	push   edx
c001d4e9:	50                   	push   eax
c001d4ea:	e8 27 ec ff ff       	call   c001c116 <IDE::waitInterrupt(unsigned char)>
c001d4ef:	83 c4 10             	add    esp,0x10
c001d4f2:	84 c0                	test   al,al
c001d4f4:	0f 84 e8 fd ff ff    	je     c001d2e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d4fa:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d4ff:	52                   	push   edx
c001d500:	52                   	push   edx
c001d501:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d508:	50                   	push   eax
c001d509:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d50f:	e8 6e ea ff ff       	call   c001bf82 <IDE::prepareInterrupt(unsigned char)>
c001d514:	83 c4 10             	add    esp,0x10
c001d517:	50                   	push   eax
c001d518:	50                   	push   eax
c001d519:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d520:	50                   	push   eax
c001d521:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d527:	e8 6a ea ff ff       	call   c001bf96 <IDE::getBase(unsigned char)>
c001d52c:	8d 50 07             	lea    edx,[eax+0x7]
c001d52f:	ec                   	in     al,dx
c001d530:	83 c4 10             	add    esp,0x10
c001d533:	a8 88                	test   al,0x88
c001d535:	74 0a                	je     c001d541 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d537:	4b                   	dec    ebx
c001d538:	75 dd                	jne    c001d517 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d53a:	bb 02 00 00 00       	mov    ebx,0x2
c001d53f:	eb 02                	jmp    c001d543 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d541:	31 db                	xor    ebx,ebx
c001d543:	83 c4 1c             	add    esp,0x1c
c001d546:	89 d8                	mov    eax,ebx
c001d548:	5b                   	pop    ebx
c001d549:	5e                   	pop    esi
c001d54a:	5f                   	pop    edi
c001d54b:	5d                   	pop    ebp
c001d54c:	c3                   	ret    
c001d54d:	90                   	nop

c001d54e <ATAPI::diskRemoved()>:
c001d54e:	83 ec 18             	sub    esp,0x18
c001d551:	68 03 2e 02 c0       	push   0xc0022e03
c001d556:	e8 c4 1b ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001d55b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d55f:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001d566:	83 c4 1c             	add    esp,0x1c
c001d569:	c3                   	ret    

c001d56a <ATAPI::eject()>:
c001d56a:	57                   	push   edi
c001d56b:	b9 03 00 00 00       	mov    ecx,0x3
c001d570:	53                   	push   ebx
c001d571:	83 ec 14             	sub    esp,0x14
c001d574:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d578:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d57c:	fc                   	cld    
c001d57d:	31 c0                	xor    eax,eax
c001d57f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d581:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d586:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d58b:	50                   	push   eax
c001d58c:	50                   	push   eax
c001d58d:	6a 00                	push   0x0
c001d58f:	6a 00                	push   0x0
c001d591:	6a 00                	push   0x0
c001d593:	6a 02                	push   0x2
c001d595:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d599:	50                   	push   eax
c001d59a:	53                   	push   ebx
c001d59b:	e8 ee fc ff ff       	call   c001d28e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d5a0:	83 c4 14             	add    esp,0x14
c001d5a3:	53                   	push   ebx
c001d5a4:	e8 a5 ff ff ff       	call   c001d54e <ATAPI::diskRemoved()>
c001d5a9:	83 c4 24             	add    esp,0x24
c001d5ac:	5b                   	pop    ebx
c001d5ad:	5f                   	pop    edi
c001d5ae:	c3                   	ret    
c001d5af:	90                   	nop

c001d5b0 <ATAPI::diskInserted()>:
c001d5b0:	53                   	push   ebx
c001d5b1:	83 ec 14             	sub    esp,0x14
c001d5b4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d5b8:	68 19 2e 02 c0       	push   0xc0022e19
c001d5bd:	e8 5d 1b ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001d5c2:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001d5c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d5cc:	e8 c7 33 ff ff       	call   c0010998 <PhysicalDisk::startCache()>
c001d5d1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001d5d5:	83 c4 18             	add    esp,0x18
c001d5d8:	5b                   	pop    ebx
c001d5d9:	e9 c8 4c ff ff       	jmp    c00122a6 <createPartitionsForDisk(PhysicalDisk*)>

c001d5de <ATAPI::detectMedia()>:
c001d5de:	56                   	push   esi
c001d5df:	53                   	push   ebx
c001d5e0:	83 ec 28             	sub    esp,0x28
c001d5e3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d5e7:	6a 0c                	push   0xc
c001d5e9:	6a 00                	push   0x0
c001d5eb:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d5ef:	56                   	push   esi
c001d5f0:	e8 13 30 fe ff       	call   c0000608 <memset>
c001d5f5:	58                   	pop    eax
c001d5f6:	5a                   	pop    edx
c001d5f7:	6a 00                	push   0x0
c001d5f9:	6a 00                	push   0x0
c001d5fb:	6a 00                	push   0x0
c001d5fd:	6a 00                	push   0x0
c001d5ff:	56                   	push   esi
c001d600:	53                   	push   ebx
c001d601:	e8 88 fc ff ff       	call   c001d28e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d606:	83 c4 1c             	add    esp,0x1c
c001d609:	6a 0c                	push   0xc
c001d60b:	6a 00                	push   0x0
c001d60d:	56                   	push   esi
c001d60e:	e8 f5 2f fe ff       	call   c0000608 <memset>
c001d613:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d618:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d61d:	59                   	pop    ecx
c001d61e:	58                   	pop    eax
c001d61f:	6a 01                	push   0x1
c001d621:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d625:	50                   	push   eax
c001d626:	6a 00                	push   0x0
c001d628:	6a 12                	push   0x12
c001d62a:	56                   	push   esi
c001d62b:	53                   	push   ebx
c001d62c:	e8 5d fc ff ff       	call   c001d28e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d631:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d635:	83 c4 20             	add    esp,0x20
c001d638:	83 e0 7f             	and    eax,0x7f
c001d63b:	3c 70                	cmp    al,0x70
c001d63d:	74 15                	je     c001d654 <ATAPI::detectMedia()+0x76>
c001d63f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d646:	75 0c                	jne    c001d654 <ATAPI::detectMedia()+0x76>
c001d648:	83 ec 0c             	sub    esp,0xc
c001d64b:	53                   	push   ebx
c001d64c:	e8 5f ff ff ff       	call   c001d5b0 <ATAPI::diskInserted()>
c001d651:	83 c4 10             	add    esp,0x10
c001d654:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d658:	83 e0 0f             	and    eax,0xf
c001d65b:	3c 02                	cmp    al,0x2
c001d65d:	75 1b                	jne    c001d67a <ATAPI::detectMedia()+0x9c>
c001d65f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d664:	75 2d                	jne    c001d693 <ATAPI::detectMedia()+0xb5>
c001d666:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d66d:	74 24                	je     c001d693 <ATAPI::detectMedia()+0xb5>
c001d66f:	83 ec 0c             	sub    esp,0xc
c001d672:	53                   	push   ebx
c001d673:	e8 d6 fe ff ff       	call   c001d54e <ATAPI::diskRemoved()>
c001d678:	eb 16                	jmp    c001d690 <ATAPI::detectMedia()+0xb2>
c001d67a:	84 c0                	test   al,al
c001d67c:	75 15                	jne    c001d693 <ATAPI::detectMedia()+0xb5>
c001d67e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d685:	75 0c                	jne    c001d693 <ATAPI::detectMedia()+0xb5>
c001d687:	83 ec 0c             	sub    esp,0xc
c001d68a:	53                   	push   ebx
c001d68b:	e8 20 ff ff ff       	call   c001d5b0 <ATAPI::diskInserted()>
c001d690:	83 c4 10             	add    esp,0x10
c001d693:	83 c4 24             	add    esp,0x24
c001d696:	5b                   	pop    ebx
c001d697:	5e                   	pop    esi
c001d698:	c3                   	ret    
c001d699:	90                   	nop

c001d69a <ATAPI::open(int, int, void*)>:
c001d69a:	53                   	push   ebx
c001d69b:	83 ec 08             	sub    esp,0x8
c001d69e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d6a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d6a6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d6aa:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d6b0:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d6b6:	c1 e0 06             	shl    eax,0x6
c001d6b9:	01 d0                	add    eax,edx
c001d6bb:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d6c2:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d6c8:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d6cf:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d6d9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d6df:	6a 04                	push   0x4
c001d6e1:	6a 0c                	push   0xc
c001d6e3:	51                   	push   ecx
c001d6e4:	52                   	push   edx
c001d6e5:	e8 be e8 ff ff       	call   c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6ea:	90                   	nop
c001d6eb:	90                   	nop
c001d6ec:	6a 00                	push   0x0
c001d6ee:	6a 0c                	push   0xc
c001d6f0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d6f7:	50                   	push   eax
c001d6f8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d6fe:	e8 a5 e8 ff ff       	call   c001bfa8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d703:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d70a:	83 c4 14             	add    esp,0x14
c001d70d:	53                   	push   ebx
c001d70e:	e8 cb fe ff ff       	call   c001d5de <ATAPI::detectMedia()>
c001d713:	31 c0                	xor    eax,eax
c001d715:	83 c4 18             	add    esp,0x18
c001d718:	5b                   	pop    ebx
c001d719:	c3                   	ret    

c001d71a <ATAPI::read(unsigned long long, int, void*)>:
c001d71a:	55                   	push   ebp
c001d71b:	57                   	push   edi
c001d71c:	56                   	push   esi
c001d71d:	53                   	push   ebx
c001d71e:	83 ec 1c             	sub    esp,0x1c
c001d721:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d725:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d729:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d72d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d734:	74 41                	je     c001d777 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001d736:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d73a:	b9 03 00 00 00       	mov    ecx,0x3
c001d73f:	fc                   	cld    
c001d740:	31 c0                	xor    eax,eax
c001d742:	86 fb                	xchg   bl,bh
c001d744:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d746:	c1 c3 10             	rol    ebx,0x10
c001d749:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d74e:	89 e8                	mov    eax,ebp
c001d750:	86 fb                	xchg   bl,bh
c001d752:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d756:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001d75a:	50                   	push   eax
c001d75b:	50                   	push   eax
c001d75c:	55                   	push   ebp
c001d75d:	c1 e5 0b             	shl    ebp,0xb
c001d760:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d764:	6a 00                	push   0x0
c001d766:	55                   	push   ebp
c001d767:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d76b:	50                   	push   eax
c001d76c:	56                   	push   esi
c001d76d:	e8 1c fb ff ff       	call   c001d28e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d772:	83 c4 20             	add    esp,0x20
c001d775:	eb 1a                	jmp    c001d791 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001d777:	83 ec 0c             	sub    esp,0xc
c001d77a:	56                   	push   esi
c001d77b:	e8 5e fe ff ff       	call   c001d5de <ATAPI::detectMedia()>
c001d780:	83 c4 10             	add    esp,0x10
c001d783:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d78a:	75 aa                	jne    c001d736 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d78c:	b8 02 00 00 00       	mov    eax,0x2
c001d791:	83 c4 1c             	add    esp,0x1c
c001d794:	5b                   	pop    ebx
c001d795:	5e                   	pop    esi
c001d796:	5f                   	pop    edi
c001d797:	5d                   	pop    ebp
c001d798:	c3                   	ret    
c001d799:	90                   	nop

c001d79a <AVX::open(int, int, void*)>:
c001d79a:	83 ec 0c             	sub    esp,0xc
c001d79d:	e8 06 10 00 00       	call   c001e7a8 <avxInit>
c001d7a2:	b8 00 00 00 00       	mov    eax,0x0
c001d7a7:	83 c4 0c             	add    esp,0xc
c001d7aa:	c3                   	ret    
c001d7ab:	90                   	nop

c001d7ac <AVX::close(int, int, void*)>:
c001d7ac:	83 ec 0c             	sub    esp,0xc
c001d7af:	e8 f5 0f 00 00       	call   c001e7a9 <avxClose>
c001d7b4:	b8 00 00 00 00       	mov    eax,0x0
c001d7b9:	83 c4 0c             	add    esp,0xc
c001d7bc:	c3                   	ret    
c001d7bd:	90                   	nop

c001d7be <AVX::available()>:
c001d7be:	83 ec 0c             	sub    esp,0xc
c001d7c1:	e8 da 0f 00 00       	call   c001e7a0 <avxDetect>
c001d7c6:	85 c0                	test   eax,eax
c001d7c8:	0f 95 c0             	setne  al
c001d7cb:	83 c4 0c             	add    esp,0xc
c001d7ce:	c3                   	ret    
c001d7cf:	90                   	nop

c001d7d0 <AVX::save(void*)>:
c001d7d0:	83 ec 0c             	sub    esp,0xc
c001d7d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d7d7:	83 ec 0c             	sub    esp,0xc
c001d7da:	50                   	push   eax
c001d7db:	e8 c6 0f 00 00       	call   c001e7a6 <avxSave>
c001d7e0:	83 c4 10             	add    esp,0x10
c001d7e3:	90                   	nop
c001d7e4:	83 c4 0c             	add    esp,0xc
c001d7e7:	c3                   	ret    

c001d7e8 <AVX::load(void*)>:
c001d7e8:	83 ec 0c             	sub    esp,0xc
c001d7eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d7ef:	83 ec 0c             	sub    esp,0xc
c001d7f2:	50                   	push   eax
c001d7f3:	e8 af 0f 00 00       	call   c001e7a7 <avxLoad>
c001d7f8:	83 c4 10             	add    esp,0x10
c001d7fb:	90                   	nop
c001d7fc:	83 c4 0c             	add    esp,0xc
c001d7ff:	c3                   	ret    

c001d800 <AVX::AVX()>:
c001d800:	83 ec 0c             	sub    esp,0xc
c001d803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d807:	83 ec 08             	sub    esp,0x8
c001d80a:	68 64 2e 02 c0       	push   0xc0022e64
c001d80f:	50                   	push   eax
c001d810:	e8 f9 31 ff ff       	call   c0010a0e <FPU::FPU(char const*)>
c001d815:	83 c4 10             	add    esp,0x10
c001d818:	ba 74 2e 02 c0       	mov    edx,0xc0022e74
c001d81d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d821:	89 10                	mov    DWORD PTR [eax],edx
c001d823:	90                   	nop
c001d824:	83 c4 0c             	add    esp,0xc
c001d827:	c3                   	ret    

c001d828 <MMX::available()>:
c001d828:	a1 88 3d 02 c0       	mov    eax,ds:0xc0023d88
c001d82d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d833:	83 e0 20             	and    eax,0x20
c001d836:	84 c0                	test   al,al
c001d838:	0f 95 c0             	setne  al
c001d83b:	c3                   	ret    

c001d83c <MMX::open(int, int, void*)>:
c001d83c:	83 ec 0c             	sub    esp,0xc
c001d83f:	e8 d8 0f 00 00       	call   c001e81c <x87Init>
c001d844:	b8 00 00 00 00       	mov    eax,0x0
c001d849:	83 c4 0c             	add    esp,0xc
c001d84c:	c3                   	ret    
c001d84d:	90                   	nop

c001d84e <MMX::close(int, int, void*)>:
c001d84e:	83 ec 0c             	sub    esp,0xc
c001d851:	e8 e0 0f 00 00       	call   c001e836 <x87Close>
c001d856:	b8 00 00 00 00       	mov    eax,0x0
c001d85b:	83 c4 0c             	add    esp,0xc
c001d85e:	c3                   	ret    
c001d85f:	90                   	nop

c001d860 <MMX::save(void*)>:
c001d860:	83 ec 0c             	sub    esp,0xc
c001d863:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d867:	83 ec 0c             	sub    esp,0xc
c001d86a:	50                   	push   eax
c001d86b:	e8 a1 0f 00 00       	call   c001e811 <x87Save>
c001d870:	83 c4 10             	add    esp,0x10
c001d873:	90                   	nop
c001d874:	83 c4 0c             	add    esp,0xc
c001d877:	c3                   	ret    

c001d878 <MMX::load(void*)>:
c001d878:	83 ec 0c             	sub    esp,0xc
c001d87b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d87f:	83 ec 0c             	sub    esp,0xc
c001d882:	50                   	push   eax
c001d883:	e8 8f 0f 00 00       	call   c001e817 <x87Load>
c001d888:	83 c4 10             	add    esp,0x10
c001d88b:	90                   	nop
c001d88c:	83 c4 0c             	add    esp,0xc
c001d88f:	c3                   	ret    

c001d890 <MMX::MMX()>:
c001d890:	83 ec 0c             	sub    esp,0xc
c001d893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d897:	83 ec 08             	sub    esp,0x8
c001d89a:	68 a4 2e 02 c0       	push   0xc0022ea4
c001d89f:	50                   	push   eax
c001d8a0:	e8 69 31 ff ff       	call   c0010a0e <FPU::FPU(char const*)>
c001d8a5:	83 c4 10             	add    esp,0x10
c001d8a8:	ba b4 2e 02 c0       	mov    edx,0xc0022eb4
c001d8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8b1:	89 10                	mov    DWORD PTR [eax],edx
c001d8b3:	90                   	nop
c001d8b4:	83 c4 0c             	add    esp,0xc
c001d8b7:	c3                   	ret    

c001d8b8 <SSE::open(int, int, void*)>:
c001d8b8:	83 ec 0c             	sub    esp,0xc
c001d8bb:	e8 17 0f 00 00       	call   c001e7d7 <sseInit>
c001d8c0:	b8 00 00 00 00       	mov    eax,0x0
c001d8c5:	83 c4 0c             	add    esp,0xc
c001d8c8:	c3                   	ret    
c001d8c9:	90                   	nop

c001d8ca <SSE::close(int, int, void*)>:
c001d8ca:	83 ec 0c             	sub    esp,0xc
c001d8cd:	e8 15 0f 00 00       	call   c001e7e7 <sseClose>
c001d8d2:	b8 00 00 00 00       	mov    eax,0x0
c001d8d7:	83 c4 0c             	add    esp,0xc
c001d8da:	c3                   	ret    
c001d8db:	90                   	nop

c001d8dc <SSE::available()>:
c001d8dc:	83 ec 1c             	sub    esp,0x1c
c001d8df:	e8 cc 0e 00 00       	call   c001e7b0 <sseDetect>
c001d8e4:	85 c0                	test   eax,eax
c001d8e6:	0f 95 c0             	setne  al
c001d8e9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d8ed:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d8f1:	83 c4 1c             	add    esp,0x1c
c001d8f4:	c3                   	ret    
c001d8f5:	90                   	nop

c001d8f6 <SSE::save(void*)>:
c001d8f6:	83 ec 0c             	sub    esp,0xc
c001d8f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d8fd:	83 ec 0c             	sub    esp,0xc
c001d900:	50                   	push   eax
c001d901:	e8 c5 0e 00 00       	call   c001e7cb <sseSave>
c001d906:	83 c4 10             	add    esp,0x10
c001d909:	90                   	nop
c001d90a:	83 c4 0c             	add    esp,0xc
c001d90d:	c3                   	ret    

c001d90e <SSE::load(void*)>:
c001d90e:	83 ec 0c             	sub    esp,0xc
c001d911:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d915:	83 ec 0c             	sub    esp,0xc
c001d918:	50                   	push   eax
c001d919:	e8 b3 0e 00 00       	call   c001e7d1 <sseLoad>
c001d91e:	83 c4 10             	add    esp,0x10
c001d921:	90                   	nop
c001d922:	83 c4 0c             	add    esp,0xc
c001d925:	c3                   	ret    

c001d926 <SSE::SSE()>:
c001d926:	83 ec 0c             	sub    esp,0xc
c001d929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d92d:	83 ec 08             	sub    esp,0x8
c001d930:	68 e4 2e 02 c0       	push   0xc0022ee4
c001d935:	50                   	push   eax
c001d936:	e8 d3 30 ff ff       	call   c0010a0e <FPU::FPU(char const*)>
c001d93b:	83 c4 10             	add    esp,0x10
c001d93e:	ba f4 2e 02 c0       	mov    edx,0xc0022ef4
c001d943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d947:	89 10                	mov    DWORD PTR [eax],edx
c001d949:	90                   	nop
c001d94a:	83 c4 0c             	add    esp,0xc
c001d94d:	c3                   	ret    

c001d94e <x87::open(int, int, void*)>:
c001d94e:	83 ec 0c             	sub    esp,0xc
c001d951:	e8 c6 0e 00 00       	call   c001e81c <x87Init>
c001d956:	b8 00 00 00 00       	mov    eax,0x0
c001d95b:	83 c4 0c             	add    esp,0xc
c001d95e:	c3                   	ret    
c001d95f:	90                   	nop

c001d960 <x87::close(int, int, void*)>:
c001d960:	83 ec 0c             	sub    esp,0xc
c001d963:	e8 ce 0e 00 00       	call   c001e836 <x87Close>
c001d968:	b8 00 00 00 00       	mov    eax,0x0
c001d96d:	83 c4 0c             	add    esp,0xc
c001d970:	c3                   	ret    
c001d971:	90                   	nop

c001d972 <x87::available()>:
c001d972:	83 ec 0c             	sub    esp,0xc
c001d975:	e8 7c 0e 00 00       	call   c001e7f6 <x87Detect>
c001d97a:	85 c0                	test   eax,eax
c001d97c:	0f 95 c0             	setne  al
c001d97f:	83 c4 0c             	add    esp,0xc
c001d982:	c3                   	ret    
c001d983:	90                   	nop

c001d984 <x87::save(void*)>:
c001d984:	83 ec 0c             	sub    esp,0xc
c001d987:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d98b:	83 ec 0c             	sub    esp,0xc
c001d98e:	50                   	push   eax
c001d98f:	e8 7d 0e 00 00       	call   c001e811 <x87Save>
c001d994:	83 c4 10             	add    esp,0x10
c001d997:	90                   	nop
c001d998:	83 c4 0c             	add    esp,0xc
c001d99b:	c3                   	ret    

c001d99c <x87::load(void*)>:
c001d99c:	83 ec 0c             	sub    esp,0xc
c001d99f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d9a3:	83 ec 0c             	sub    esp,0xc
c001d9a6:	50                   	push   eax
c001d9a7:	e8 6b 0e 00 00       	call   c001e817 <x87Load>
c001d9ac:	83 c4 10             	add    esp,0x10
c001d9af:	90                   	nop
c001d9b0:	83 c4 0c             	add    esp,0xc
c001d9b3:	c3                   	ret    

c001d9b4 <x87::x87()>:
c001d9b4:	83 ec 0c             	sub    esp,0xc
c001d9b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9bb:	83 ec 08             	sub    esp,0x8
c001d9be:	68 24 2f 02 c0       	push   0xc0022f24
c001d9c3:	50                   	push   eax
c001d9c4:	e8 45 30 ff ff       	call   c0010a0e <FPU::FPU(char const*)>
c001d9c9:	83 c4 10             	add    esp,0x10
c001d9cc:	ba 34 2f 02 c0       	mov    edx,0xc0022f34
c001d9d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9d5:	89 10                	mov    DWORD PTR [eax],edx
c001d9d7:	90                   	nop
c001d9d8:	83 c4 0c             	add    esp,0xc
c001d9db:	c3                   	ret    

c001d9dc <APIC::disable()>:
c001d9dc:	90                   	nop
c001d9dd:	c3                   	ret    

c001d9de <APIC::close(int, int, void*)>:
c001d9de:	55                   	push   ebp
c001d9df:	89 e5                	mov    ebp,esp
c001d9e1:	83 ec 08             	sub    esp,0x8
c001d9e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9e7:	8b 00                	mov    eax,DWORD PTR [eax]
c001d9e9:	83 c0 3c             	add    eax,0x3c
c001d9ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001d9ee:	83 ec 0c             	sub    esp,0xc
c001d9f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d9f4:	ff d0                	call   eax
c001d9f6:	83 c4 10             	add    esp,0x10
c001d9f9:	b8 00 00 00 00       	mov    eax,0x0
c001d9fe:	c9                   	leave  
c001d9ff:	c3                   	ret    

c001da00 <IOAPIC::close(int, int, void*)>:
c001da00:	b8 00 00 00 00       	mov    eax,0x0
c001da05:	c3                   	ret    

c001da06 <APIC::io_wait()>:
c001da06:	eb 00                	jmp    c001da08 <APIC::io_wait()+0x2>
c001da08:	eb 00                	jmp    c001da0a <APIC::io_wait()+0x4>
c001da0a:	90                   	nop
c001da0b:	c3                   	ret    

c001da0c <APIC::getBase()>:
c001da0c:	55                   	push   ebp
c001da0d:	89 e5                	mov    ebp,esp
c001da0f:	83 ec 18             	sub    esp,0x18
c001da12:	a1 88 3d 02 c0       	mov    eax,ds:0xc0023d88
c001da17:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001da1d:	83 e0 08             	and    eax,0x8
c001da20:	84 c0                	test   al,al
c001da22:	75 07                	jne    c001da2b <APIC::getBase()+0x1f>
c001da24:	b8 00 00 00 00       	mov    eax,0x0
c001da29:	eb 21                	jmp    c001da4c <APIC::getBase()+0x40>
c001da2b:	a1 88 3d 02 c0       	mov    eax,ds:0xc0023d88
c001da30:	83 ec 08             	sub    esp,0x8
c001da33:	6a 1b                	push   0x1b
c001da35:	50                   	push   eax
c001da36:	e8 cf da fe ff       	call   c000b50a <Computer::rdmsr(unsigned int)>
c001da3b:	83 c4 10             	add    esp,0x10
c001da3e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001da41:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001da44:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001da47:	25 00 f0 ff ff       	and    eax,0xfffff000
c001da4c:	c9                   	leave  
c001da4d:	c3                   	ret    

c001da4e <APIC::eoi(unsigned char)>:
c001da4e:	55                   	push   ebp
c001da4f:	89 e5                	mov    ebp,esp
c001da51:	83 ec 28             	sub    esp,0x28
c001da54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001da57:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001da5a:	83 ec 0c             	sub    esp,0xc
c001da5d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da60:	e8 a7 ff ff ff       	call   c001da0c <APIC::getBase()>
c001da65:	83 c4 10             	add    esp,0x10
c001da68:	05 b0 00 00 00       	add    eax,0xb0
c001da6d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001da70:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001da73:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001da79:	90                   	nop
c001da7a:	c9                   	leave  
c001da7b:	c3                   	ret    

c001da7c <APIC::open(int, int, void*)>:
c001da7c:	55                   	push   ebp
c001da7d:	89 e5                	mov    ebp,esp
c001da7f:	57                   	push   edi
c001da80:	56                   	push   esi
c001da81:	53                   	push   ebx
c001da82:	83 ec 1c             	sub    esp,0x1c
c001da85:	83 ec 0c             	sub    esp,0xc
c001da88:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da8b:	e8 7c ff ff ff       	call   c001da0c <APIC::getBase()>
c001da90:	83 c4 10             	add    esp,0x10
c001da93:	05 f0 00 00 00       	add    eax,0xf0
c001da98:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001da9b:	83 ec 0c             	sub    esp,0xc
c001da9e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001daa1:	e8 66 ff ff ff       	call   c001da0c <APIC::getBase()>
c001daa6:	83 c4 10             	add    esp,0x10
c001daa9:	89 c2                	mov    edx,eax
c001daab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001daae:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001dab4:	0f b6 f8             	movzx  edi,al
c001dab7:	89 d0                	mov    eax,edx
c001dab9:	ba 00 00 00 00       	mov    edx,0x0
c001dabe:	89 c1                	mov    ecx,eax
c001dac0:	80 e5 ff             	and    ch,0xff
c001dac3:	89 cb                	mov    ebx,ecx
c001dac5:	0f b6 f2             	movzx  esi,dl
c001dac8:	89 d8                	mov    eax,ebx
c001daca:	89 f2                	mov    edx,esi
c001dacc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001dacf:	8d 5f 08             	lea    ebx,[edi+0x8]
c001dad2:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001dad6:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001dada:	83 e0 00             	and    eax,0x0
c001dadd:	09 d0                	or     eax,edx
c001dadf:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001dae3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dae6:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001daec:	8d 50 01             	lea    edx,[eax+0x1]
c001daef:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001daf2:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001daf8:	0f b6 d0             	movzx  edx,al
c001dafb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dafe:	83 c2 08             	add    edx,0x8
c001db01:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001db05:	0f b6 c9             	movzx  ecx,cl
c001db08:	81 c9 00 00 01 00    	or     ecx,0x10000
c001db0e:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001db12:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001db15:	8b 00                	mov    eax,DWORD PTR [eax]
c001db17:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001db1a:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001db21:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001db24:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001db27:	89 10                	mov    DWORD PTR [eax],edx
c001db29:	b8 00 00 00 00       	mov    eax,0x0
c001db2e:	8d 65 f4             	lea    esp,[ebp-0xc]
c001db31:	5b                   	pop    ebx
c001db32:	5e                   	pop    esi
c001db33:	5f                   	pop    edi
c001db34:	5d                   	pop    ebp
c001db35:	c3                   	ret    

c001db36 <IOAPIC::IOAPIC()>:
c001db36:	83 ec 0c             	sub    esp,0xc
c001db39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db3d:	83 ec 08             	sub    esp,0x8
c001db40:	68 64 2f 02 c0       	push   0xc0022f64
c001db45:	50                   	push   eax
c001db46:	e8 cf 2b ff ff       	call   c001071a <Device::Device(char const*)>
c001db4b:	83 c4 10             	add    esp,0x10
c001db4e:	ba 8c 30 02 c0       	mov    edx,0xc002308c
c001db53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db57:	89 10                	mov    DWORD PTR [eax],edx
c001db59:	90                   	nop
c001db5a:	83 c4 0c             	add    esp,0xc
c001db5d:	c3                   	ret    

c001db5e <APIC::APIC()>:
c001db5e:	53                   	push   ebx
c001db5f:	83 ec 18             	sub    esp,0x18
c001db62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db66:	83 ec 08             	sub    esp,0x8
c001db69:	68 6c 2f 02 c0       	push   0xc0022f6c
c001db6e:	50                   	push   eax
c001db6f:	e8 e8 32 ff ff       	call   c0010e5c <InterruptController::InterruptController(char const*)>
c001db74:	83 c4 10             	add    esp,0x10
c001db77:	ba 44 30 02 c0       	mov    edx,0xc0023044
c001db7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db80:	89 10                	mov    DWORD PTR [eax],edx
c001db82:	a0 80 5b 02 c0       	mov    al,ds:0xc0025b80
c001db87:	83 f0 01             	xor    eax,0x1
c001db8a:	84 c0                	test   al,al
c001db8c:	0f 84 96 00 00 00    	je     c001dc28 <APIC::APIC()+0xca>
c001db92:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001db97:	a0 30 46 02 c0       	mov    al,ds:0xc0024630
c001db9c:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001dba0:	73 7f                	jae    c001dc21 <APIC::APIC()+0xc3>
c001dba2:	83 ec 0c             	sub    esp,0xc
c001dba5:	68 68 01 00 00       	push   0x168
c001dbaa:	e8 81 14 ff ff       	call   c000f030 <operator new(unsigned long)>
c001dbaf:	83 c4 10             	add    esp,0x10
c001dbb2:	89 c3                	mov    ebx,eax
c001dbb4:	83 ec 0c             	sub    esp,0xc
c001dbb7:	53                   	push   ebx
c001dbb8:	e8 79 ff ff ff       	call   c001db36 <IOAPIC::IOAPIC()>
c001dbbd:	83 c4 10             	add    esp,0x10
c001dbc0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001dbc4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dbc9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dbcd:	89 14 85 60 5b 02 c0 	mov    DWORD PTR [eax*4-0x3ffda4a0],edx
c001dbd4:	a1 40 5b 02 c0       	mov    eax,ds:0xc0025b40
c001dbd9:	40                   	inc    eax
c001dbda:	a3 40 5b 02 c0       	mov    ds:0xc0025b40,eax
c001dbdf:	a1 88 3d 02 c0       	mov    eax,ds:0xc0023d88
c001dbe4:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001dbea:	83 ec 08             	sub    esp,0x8
c001dbed:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dbf1:	50                   	push   eax
c001dbf2:	e8 33 29 ff ff       	call   c001052a <Device::addChild(Device*)>
c001dbf7:	83 c4 10             	add    esp,0x10
c001dbfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dbfe:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc00:	83 c0 08             	add    eax,0x8
c001dc03:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc05:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001dc0a:	6a 00                	push   0x0
c001dc0c:	6a 00                	push   0x0
c001dc0e:	52                   	push   edx
c001dc0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dc13:	ff d0                	call   eax
c001dc15:	83 c4 10             	add    esp,0x10
c001dc18:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001dc1c:	e9 76 ff ff ff       	jmp    c001db97 <APIC::APIC()+0x39>
c001dc21:	c6 05 80 5b 02 c0 01 	mov    BYTE PTR ds:0xc0025b80,0x1
c001dc28:	90                   	nop
c001dc29:	83 c4 18             	add    esp,0x18
c001dc2c:	5b                   	pop    ebx
c001dc2d:	c3                   	ret    

c001dc2e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001dc2e:	55                   	push   ebp
c001dc2f:	89 e5                	mov    ebp,esp
c001dc31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dc34:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dc3a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001dc3d:	72 1d                	jb     c001dc5c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001dc3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dc42:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001dc48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dc4b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001dc51:	01 d0                	add    eax,edx
c001dc53:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001dc56:	73 04                	jae    c001dc5c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001dc58:	b0 01                	mov    al,0x1
c001dc5a:	eb 02                	jmp    c001dc5e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001dc5c:	b0 00                	mov    al,0x0
c001dc5e:	5d                   	pop    ebp
c001dc5f:	c3                   	ret    

c001dc60 <IOAPIC::read(int)>:
c001dc60:	55                   	push   ebp
c001dc61:	89 e5                	mov    ebp,esp
c001dc63:	83 ec 10             	sub    esp,0x10
c001dc66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dc69:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001dc6f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001dc72:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dc75:	0f b6 d0             	movzx  edx,al
c001dc78:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dc7b:	89 10                	mov    DWORD PTR [eax],edx
c001dc7d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dc80:	83 c0 10             	add    eax,0x10
c001dc83:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc85:	c9                   	leave  
c001dc86:	c3                   	ret    
c001dc87:	90                   	nop

c001dc88 <IOAPIC::open(int, int, void*)>:
c001dc88:	55                   	push   ebp
c001dc89:	89 e5                	mov    ebp,esp
c001dc8b:	57                   	push   edi
c001dc8c:	56                   	push   esi
c001dc8d:	53                   	push   ebx
c001dc8e:	83 ec 0c             	sub    esp,0xc
c001dc91:	83 ec 0c             	sub    esp,0xc
c001dc94:	68 97 2f 02 c0       	push   0xc0022f97
c001dc99:	e8 81 14 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001dc9e:	83 c4 10             	add    esp,0x10
c001dca1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dca4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001dca7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dcad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dcb0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dcb6:	8b 14 85 60 46 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb9a0]
c001dcbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dcc0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001dcc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dcc9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dccf:	8b 14 85 e0 46 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb920]
c001dcd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dcd9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001dcdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dce2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001dce8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dceb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001dcf1:	0f b6 f8             	movzx  edi,al
c001dcf4:	89 d0                	mov    eax,edx
c001dcf6:	ba 00 00 00 00       	mov    edx,0x0
c001dcfb:	89 c1                	mov    ecx,eax
c001dcfd:	80 e5 ff             	and    ch,0xff
c001dd00:	89 cb                	mov    ebx,ecx
c001dd02:	0f b6 f2             	movzx  esi,dl
c001dd05:	89 d8                	mov    eax,ebx
c001dd07:	89 f2                	mov    edx,esi
c001dd09:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001dd0c:	8d 5f 08             	lea    ebx,[edi+0x8]
c001dd0f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001dd13:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001dd17:	83 e0 00             	and    eax,0x0
c001dd1a:	09 d0                	or     eax,edx
c001dd1c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001dd20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dd23:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001dd29:	8d 50 01             	lea    edx,[eax+0x1]
c001dd2c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001dd2f:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001dd35:	0f b6 d0             	movzx  edx,al
c001dd38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dd3b:	83 c2 08             	add    edx,0x8
c001dd3e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001dd42:	0f b6 c9             	movzx  ecx,cl
c001dd45:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001dd4b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001dd4f:	83 ec 08             	sub    esp,0x8
c001dd52:	6a 01                	push   0x1
c001dd54:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dd57:	e8 04 ff ff ff       	call   c001dc60 <IOAPIC::read(int)>
c001dd5c:	83 c4 10             	add    esp,0x10
c001dd5f:	c1 f8 10             	sar    eax,0x10
c001dd62:	0f b6 c0             	movzx  eax,al
c001dd65:	8d 50 01             	lea    edx,[eax+0x1]
c001dd68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dd6b:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001dd71:	b8 00 00 00 00       	mov    eax,0x0
c001dd76:	8d 65 f4             	lea    esp,[ebp-0xc]
c001dd79:	5b                   	pop    ebx
c001dd7a:	5e                   	pop    esi
c001dd7b:	5f                   	pop    edi
c001dd7c:	5d                   	pop    ebp
c001dd7d:	c3                   	ret    

c001dd7e <IOAPIC::write(int, int)>:
c001dd7e:	55                   	push   ebp
c001dd7f:	89 e5                	mov    ebp,esp
c001dd81:	83 ec 10             	sub    esp,0x10
c001dd84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dd87:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001dd8d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001dd90:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dd93:	0f b6 d0             	movzx  edx,al
c001dd96:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dd99:	89 10                	mov    DWORD PTR [eax],edx
c001dd9b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dd9e:	8d 50 10             	lea    edx,[eax+0x10]
c001dda1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001dda4:	89 02                	mov    DWORD PTR [edx],eax
c001dda6:	90                   	nop
c001dda7:	c9                   	leave  
c001dda8:	c3                   	ret    
c001dda9:	90                   	nop

c001ddaa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001ddaa:	55                   	push   ebp
c001ddab:	89 e5                	mov    ebp,esp
c001ddad:	83 ec 20             	sub    esp,0x20
c001ddb0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ddb3:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001ddb6:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001ddb9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ddbc:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001ddbf:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ddc2:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001ddc5:	88 d0                	mov    al,dl
c001ddc7:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001ddca:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001ddce:	83 c0 08             	add    eax,0x8
c001ddd1:	01 c0                	add    eax,eax
c001ddd3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ddd6:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001ddda:	83 c0 08             	add    eax,0x8
c001dddd:	01 c0                	add    eax,eax
c001dddf:	40                   	inc    eax
c001dde0:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001dde3:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001dde6:	50                   	push   eax
c001dde7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ddea:	e8 71 fe ff ff       	call   c001dc60 <IOAPIC::read(int)>
c001ddef:	83 c4 08             	add    esp,0x8
c001ddf2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001ddf5:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001ddfc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001ddff:	c1 e0 18             	shl    eax,0x18
c001de02:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001de05:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001de08:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001de0b:	52                   	push   edx
c001de0c:	50                   	push   eax
c001de0d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de10:	e8 69 ff ff ff       	call   c001dd7e <IOAPIC::write(int, int)>
c001de15:	83 c4 0c             	add    esp,0xc
c001de18:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001de1b:	50                   	push   eax
c001de1c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de1f:	e8 3c fe ff ff       	call   c001dc60 <IOAPIC::read(int)>
c001de24:	83 c4 08             	add    esp,0x8
c001de27:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001de2a:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001de31:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001de38:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001de3f:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001de46:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c001de4a:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001de4d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001de50:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001de53:	52                   	push   edx
c001de54:	50                   	push   eax
c001de55:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de58:	e8 21 ff ff ff       	call   c001dd7e <IOAPIC::write(int, int)>
c001de5d:	83 c4 0c             	add    esp,0xc
c001de60:	90                   	nop
c001de61:	c9                   	leave  
c001de62:	c3                   	ret    
c001de63:	90                   	nop

c001de64 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001de64:	55                   	push   ebp
c001de65:	89 e5                	mov    ebp,esp
c001de67:	56                   	push   esi
c001de68:	53                   	push   ebx
c001de69:	83 ec 20             	sub    esp,0x20
c001de6c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001de6f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001de72:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001de76:	74 28                	je     c001dea0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001de78:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001de7c:	7f 12                	jg     c001de90 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c001de7e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001de81:	05 e0 34 02 c0       	add    eax,0xc00234e0
c001de86:	8a 00                	mov    al,BYTE PTR [eax]
c001de88:	0f b6 c0             	movzx  eax,al
c001de8b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001de8e:	eb 10                	jmp    c001dea0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001de90:	83 ec 0c             	sub    esp,0xc
c001de93:	68 a8 2f 02 c0       	push   0xc0022fa8
c001de98:	e8 81 73 ff ff       	call   c001521e <Krnl::panic(char const*)>
c001de9d:	83 c4 10             	add    esp,0x10
c001dea0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001dea4:	a1 40 5b 02 c0       	mov    eax,ds:0xc0025b40
c001dea9:	83 ec 08             	sub    esp,0x8
c001deac:	50                   	push   eax
c001dead:	68 e0 2f 02 c0       	push   0xc0022fe0
c001deb2:	e8 68 12 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001deb7:	83 c4 10             	add    esp,0x10
c001deba:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001dec1:	a1 40 5b 02 c0       	mov    eax,ds:0xc0025b40
c001dec6:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001dec9:	7d 58                	jge    c001df23 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001decb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dece:	8b 04 85 60 5b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda4a0]
c001ded5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ded8:	83 ec 08             	sub    esp,0x8
c001dedb:	52                   	push   edx
c001dedc:	50                   	push   eax
c001dedd:	e8 4c fd ff ff       	call   c001dc2e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001dee2:	83 c4 10             	add    esp,0x10
c001dee5:	84 c0                	test   al,al
c001dee7:	74 35                	je     c001df1e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c001dee9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001deec:	8b 1c 85 60 5b 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffda4a0]
c001def3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001def6:	83 c0 20             	add    eax,0x20
c001def9:	0f b6 f0             	movzx  esi,al
c001defc:	e8 aa 61 ff ff       	call   c00140ab <getCPUNumber()>
c001df01:	99                   	cdq    
c001df02:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001df05:	0f b6 c9             	movzx  ecx,cl
c001df08:	83 ec 0c             	sub    esp,0xc
c001df0b:	56                   	push   esi
c001df0c:	52                   	push   edx
c001df0d:	50                   	push   eax
c001df0e:	51                   	push   ecx
c001df0f:	53                   	push   ebx
c001df10:	e8 95 fe ff ff       	call   c001ddaa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001df15:	83 c4 20             	add    esp,0x20
c001df18:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001df1c:	eb 05                	jmp    c001df23 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001df1e:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001df21:	eb 9e                	jmp    c001dec1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c001df23:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001df26:	83 f0 01             	xor    eax,0x1
c001df29:	84 c0                	test   al,al
c001df2b:	74 10                	je     c001df3d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c001df2d:	83 ec 0c             	sub    esp,0xc
c001df30:	68 f7 2f 02 c0       	push   0xc0022ff7
c001df35:	e8 e4 72 ff ff       	call   c001521e <Krnl::panic(char const*)>
c001df3a:	83 c4 10             	add    esp,0x10
c001df3d:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001df41:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001df48:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001df4c:	7f 65                	jg     c001dfb3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c001df4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df51:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001df54:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001df5b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001df5e:	01 ca                	add    edx,ecx
c001df60:	83 c2 54             	add    edx,0x54
c001df63:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001df67:	85 c0                	test   eax,eax
c001df69:	75 43                	jne    c001dfae <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c001df6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df6e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001df71:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001df78:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001df7b:	01 ca                	add    edx,ecx
c001df7d:	8d 4a 54             	lea    ecx,[edx+0x54]
c001df80:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001df83:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001df87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df8a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001df8d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001df94:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001df97:	01 ca                	add    edx,ecx
c001df99:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001df9f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001dfa2:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001dfa6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dfa9:	83 e8 20             	sub    eax,0x20
c001dfac:	eb 1a                	jmp    c001dfc8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c001dfae:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001dfb1:	eb 95                	jmp    c001df48 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c001dfb3:	83 ec 0c             	sub    esp,0xc
c001dfb6:	68 04 30 02 c0       	push   0xc0023004
c001dfbb:	e8 5e 72 ff ff       	call   c001521e <Krnl::panic(char const*)>
c001dfc0:	83 c4 10             	add    esp,0x10
c001dfc3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001dfc8:	8d 65 f8             	lea    esp,[ebp-0x8]
c001dfcb:	5b                   	pop    ebx
c001dfcc:	5e                   	pop    esi
c001dfcd:	5d                   	pop    ebp
c001dfce:	c3                   	ret    
c001dfcf:	90                   	nop

c001dfd0 <PIC::disable()>:
c001dfd0:	55                   	push   ebp
c001dfd1:	89 e5                	mov    ebp,esp
c001dfd3:	83 ec 10             	sub    esp,0x10
c001dfd6:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001dfdc:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001dfe0:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001dfe3:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001dfe7:	ee                   	out    dx,al
c001dfe8:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001dfee:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001dff2:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001dff5:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001dff9:	ee                   	out    dx,al
c001dffa:	90                   	nop
c001dffb:	c9                   	leave  
c001dffc:	c3                   	ret    
c001dffd:	90                   	nop

c001dffe <PIC::close(int, int, void*)>:
c001dffe:	55                   	push   ebp
c001dfff:	89 e5                	mov    ebp,esp
c001e001:	83 ec 08             	sub    esp,0x8
c001e004:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e007:	8b 00                	mov    eax,DWORD PTR [eax]
c001e009:	83 c0 3c             	add    eax,0x3c
c001e00c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e00e:	83 ec 0c             	sub    esp,0xc
c001e011:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e014:	ff d0                	call   eax
c001e016:	83 c4 10             	add    esp,0x10
c001e019:	b8 00 00 00 00       	mov    eax,0x0
c001e01e:	c9                   	leave  
c001e01f:	c3                   	ret    

c001e020 <PIC::PIC()>:
c001e020:	83 ec 0c             	sub    esp,0xc
c001e023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e027:	83 ec 08             	sub    esp,0x8
c001e02a:	68 b0 30 02 c0       	push   0xc00230b0
c001e02f:	50                   	push   eax
c001e030:	e8 27 2e ff ff       	call   c0010e5c <InterruptController::InterruptController(char const*)>
c001e035:	83 c4 10             	add    esp,0x10
c001e038:	ba dc 30 02 c0       	mov    edx,0xc00230dc
c001e03d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e041:	89 10                	mov    DWORD PTR [eax],edx
c001e043:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e047:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e04d:	0f b6 d0             	movzx  edx,al
c001e050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e054:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001e05b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e05f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e065:	0f b6 d0             	movzx  edx,al
c001e068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e06c:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001e071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e075:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e07b:	8d 50 01             	lea    edx,[eax+0x1]
c001e07e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e082:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e088:	0f b6 d0             	movzx  edx,al
c001e08b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e08f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e093:	83 e1 3f             	and    ecx,0x3f
c001e096:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e09a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e09e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e0a4:	0f b6 d0             	movzx  edx,al
c001e0a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0ab:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001e0b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0b6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e0bc:	0f b6 d0             	movzx  edx,al
c001e0bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0c3:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001e0c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0cc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e0d2:	8d 50 01             	lea    edx,[eax+0x1]
c001e0d5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e0d9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e0df:	0f b6 d0             	movzx  edx,al
c001e0e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0e6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e0ea:	83 e1 3f             	and    ecx,0x3f
c001e0ed:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e0f1:	90                   	nop
c001e0f2:	83 c4 0c             	add    esp,0xc
c001e0f5:	c3                   	ret    

c001e0f6 <PIC::ioWait()>:
c001e0f6:	eb 00                	jmp    c001e0f8 <PIC::ioWait()+0x2>
c001e0f8:	eb 00                	jmp    c001e0fa <PIC::ioWait()+0x4>
c001e0fa:	90                   	nop
c001e0fb:	c3                   	ret    

c001e0fc <PIC::getIRQReg(int)>:
c001e0fc:	55                   	push   ebp
c001e0fd:	89 e5                	mov    ebp,esp
c001e0ff:	83 ec 10             	sub    esp,0x10
c001e102:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e105:	0f b6 c0             	movzx  eax,al
c001e108:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001e10e:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001e111:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001e114:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001e118:	ee                   	out    dx,al
c001e119:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e11c:	0f b6 c0             	movzx  eax,al
c001e11f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001e125:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001e128:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001e12b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001e12f:	ee                   	out    dx,al
c001e130:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001e136:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001e13a:	89 c2                	mov    edx,eax
c001e13c:	ec                   	in     al,dx
c001e13d:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001e140:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e143:	0f b6 c0             	movzx  eax,al
c001e146:	c1 e0 08             	shl    eax,0x8
c001e149:	89 c1                	mov    ecx,eax
c001e14b:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001e151:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001e155:	89 c2                	mov    edx,eax
c001e157:	ec                   	in     al,dx
c001e158:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001e15b:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e15e:	0f b6 c0             	movzx  eax,al
c001e161:	09 c8                	or     eax,ecx
c001e163:	c9                   	leave  
c001e164:	c3                   	ret    
c001e165:	90                   	nop

c001e166 <PIC::eoi(unsigned char)>:
c001e166:	55                   	push   ebp
c001e167:	89 e5                	mov    ebp,esp
c001e169:	83 ec 14             	sub    esp,0x14
c001e16c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e16f:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001e172:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001e176:	75 1e                	jne    c001e196 <PIC::eoi(unsigned char)+0x30>
c001e178:	6a 0b                	push   0xb
c001e17a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e17d:	e8 7a ff ff ff       	call   c001e0fc <PIC::getIRQReg(int)>
c001e182:	83 c4 08             	add    esp,0x8
c001e185:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001e189:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c001e18d:	25 80 00 00 00       	and    eax,0x80
c001e192:	85 c0                	test   eax,eax
c001e194:	74 5f                	je     c001e1f5 <PIC::eoi(unsigned char)+0x8f>
c001e196:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001e19a:	75 2d                	jne    c001e1c9 <PIC::eoi(unsigned char)+0x63>
c001e19c:	6a 0b                	push   0xb
c001e19e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e1a1:	e8 56 ff ff ff       	call   c001e0fc <PIC::getIRQReg(int)>
c001e1a6:	83 c4 08             	add    esp,0x8
c001e1a9:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001e1ad:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e1b0:	66 85 c0             	test   ax,ax
c001e1b3:	78 14                	js     c001e1c9 <PIC::eoi(unsigned char)+0x63>
c001e1b5:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001e1bb:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001e1bf:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e1c2:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001e1c6:	ee                   	out    dx,al
c001e1c7:	eb 2d                	jmp    c001e1f6 <PIC::eoi(unsigned char)+0x90>
c001e1c9:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001e1cd:	76 12                	jbe    c001e1e1 <PIC::eoi(unsigned char)+0x7b>
c001e1cf:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001e1d5:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001e1d9:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001e1dc:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001e1e0:	ee                   	out    dx,al
c001e1e1:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001e1e7:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001e1eb:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001e1ee:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001e1f2:	ee                   	out    dx,al
c001e1f3:	eb 01                	jmp    c001e1f6 <PIC::eoi(unsigned char)+0x90>
c001e1f5:	90                   	nop
c001e1f6:	c9                   	leave  
c001e1f7:	c3                   	ret    

c001e1f8 <PIC::remap()>:
c001e1f8:	55                   	push   ebp
c001e1f9:	89 e5                	mov    ebp,esp
c001e1fb:	83 ec 48             	sub    esp,0x48
c001e1fe:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001e205:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001e20c:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001e212:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001e215:	89 c2                	mov    edx,eax
c001e217:	ec                   	in     al,dx
c001e218:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001e21b:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001e21e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001e221:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001e227:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001e22a:	89 c2                	mov    edx,eax
c001e22c:	ec                   	in     al,dx
c001e22d:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001e230:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001e233:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001e236:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001e23c:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001e240:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001e243:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001e246:	ee                   	out    dx,al
c001e247:	83 ec 0c             	sub    esp,0xc
c001e24a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e24d:	e8 a4 fe ff ff       	call   c001e0f6 <PIC::ioWait()>
c001e252:	83 c4 10             	add    esp,0x10
c001e255:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001e25b:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001e25f:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001e262:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001e265:	ee                   	out    dx,al
c001e266:	83 ec 0c             	sub    esp,0xc
c001e269:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e26c:	e8 85 fe ff ff       	call   c001e0f6 <PIC::ioWait()>
c001e271:	83 c4 10             	add    esp,0x10
c001e274:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001e277:	0f b6 c0             	movzx  eax,al
c001e27a:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001e280:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001e283:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001e286:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001e289:	ee                   	out    dx,al
c001e28a:	83 ec 0c             	sub    esp,0xc
c001e28d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e290:	e8 61 fe ff ff       	call   c001e0f6 <PIC::ioWait()>
c001e295:	83 c4 10             	add    esp,0x10
c001e298:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e29b:	0f b6 c0             	movzx  eax,al
c001e29e:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001e2a4:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001e2a7:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001e2aa:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e2ad:	ee                   	out    dx,al
c001e2ae:	83 ec 0c             	sub    esp,0xc
c001e2b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e2b4:	e8 3d fe ff ff       	call   c001e0f6 <PIC::ioWait()>
c001e2b9:	83 c4 10             	add    esp,0x10
c001e2bc:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001e2c2:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001e2c6:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001e2c9:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001e2cc:	ee                   	out    dx,al
c001e2cd:	83 ec 0c             	sub    esp,0xc
c001e2d0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e2d3:	e8 1e fe ff ff       	call   c001e0f6 <PIC::ioWait()>
c001e2d8:	83 c4 10             	add    esp,0x10
c001e2db:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001e2e1:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001e2e5:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001e2e8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001e2eb:	ee                   	out    dx,al
c001e2ec:	83 ec 0c             	sub    esp,0xc
c001e2ef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e2f2:	e8 ff fd ff ff       	call   c001e0f6 <PIC::ioWait()>
c001e2f7:	83 c4 10             	add    esp,0x10
c001e2fa:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001e300:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001e304:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001e307:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001e30a:	ee                   	out    dx,al
c001e30b:	83 ec 0c             	sub    esp,0xc
c001e30e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e311:	e8 e0 fd ff ff       	call   c001e0f6 <PIC::ioWait()>
c001e316:	83 c4 10             	add    esp,0x10
c001e319:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001e31f:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001e323:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001e326:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e329:	ee                   	out    dx,al
c001e32a:	83 ec 0c             	sub    esp,0xc
c001e32d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e330:	e8 c1 fd ff ff       	call   c001e0f6 <PIC::ioWait()>
c001e335:	83 c4 10             	add    esp,0x10
c001e338:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c001e33c:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001e342:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001e345:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001e348:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e34b:	ee                   	out    dx,al
c001e34c:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c001e350:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001e356:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001e359:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001e35c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e35f:	ee                   	out    dx,al
c001e360:	90                   	nop
c001e361:	c9                   	leave  
c001e362:	c3                   	ret    
c001e363:	90                   	nop

c001e364 <PIC::open(int, int, void*)>:
c001e364:	55                   	push   ebp
c001e365:	89 e5                	mov    ebp,esp
c001e367:	83 ec 18             	sub    esp,0x18
c001e36a:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001e370:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001e374:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001e377:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001e37b:	ee                   	out    dx,al
c001e37c:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001e382:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001e386:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001e389:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001e38d:	ee                   	out    dx,al
c001e38e:	83 ec 0c             	sub    esp,0xc
c001e391:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e394:	e8 5f fe ff ff       	call   c001e1f8 <PIC::remap()>
c001e399:	83 c4 10             	add    esp,0x10
c001e39c:	b8 00 00 00 00       	mov    eax,0x0
c001e3a1:	c9                   	leave  
c001e3a2:	c3                   	ret    
c001e3a3:	90                   	nop

c001e3a4 <APICTimer::close(int, int, void*)>:
c001e3a4:	b8 00 00 00 00       	mov    eax,0x0
c001e3a9:	c3                   	ret    

c001e3aa <apicTimerHandler(regs*, void*)>:
c001e3aa:	83 ec 0c             	sub    esp,0xc
c001e3ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e3b1:	8b 00                	mov    eax,DWORD PTR [eax]
c001e3b3:	99                   	cdq    
c001e3b4:	52                   	push   edx
c001e3b5:	50                   	push   eax
c001e3b6:	6a 00                	push   0x0
c001e3b8:	68 00 ca 9a 3b       	push   0x3b9aca00
c001e3bd:	e8 6a 07 00 00       	call   c001eb2c <__udivdi3>
c001e3c2:	83 c4 10             	add    esp,0x10
c001e3c5:	83 ec 08             	sub    esp,0x8
c001e3c8:	52                   	push   edx
c001e3c9:	50                   	push   eax
c001e3ca:	e8 f8 41 ff ff       	call   c00125c7 <timerHandler(unsigned long long)>
c001e3cf:	83 c4 10             	add    esp,0x10
c001e3d2:	90                   	nop
c001e3d3:	83 c4 0c             	add    esp,0xc
c001e3d6:	c3                   	ret    
c001e3d7:	90                   	nop

c001e3d8 <APICTimer::write(int)>:
c001e3d8:	53                   	push   ebx
c001e3d9:	83 ec 28             	sub    esp,0x28
c001e3dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e3e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e3e4:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e3ea:	e8 bf 5c ff ff       	call   c00140ae <thisCPU()>
c001e3ef:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001e3f5:	83 ec 0c             	sub    esp,0xc
c001e3f8:	50                   	push   eax
c001e3f9:	e8 0e f6 ff ff       	call   c001da0c <APIC::getBase()>
c001e3fe:	83 c4 10             	add    esp,0x10
c001e401:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e405:	a1 f0 43 02 c0       	mov    eax,ds:0xc00243f0
c001e40a:	8b 15 f4 43 02 c0    	mov    edx,DWORD PTR ds:0xc00243f4
c001e410:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e414:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001e418:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e41c:	05 e0 03 00 00       	add    eax,0x3e0
c001e421:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001e427:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e42b:	05 80 03 00 00       	add    eax,0x380
c001e430:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001e436:	fb                   	sti    
c001e437:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e43b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e43f:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001e444:	83 d2 00             	adc    edx,0x0
c001e447:	89 c1                	mov    ecx,eax
c001e449:	89 d3                	mov    ebx,edx
c001e44b:	a1 f0 43 02 c0       	mov    eax,ds:0xc00243f0
c001e450:	8b 15 f4 43 02 c0    	mov    edx,DWORD PTR ds:0xc00243f4
c001e456:	39 c8                	cmp    eax,ecx
c001e458:	89 d0                	mov    eax,edx
c001e45a:	19 d8                	sbb    eax,ebx
c001e45c:	73 02                	jae    c001e460 <APICTimer::write(int)+0x88>
c001e45e:	eb d7                	jmp    c001e437 <APICTimer::write(int)+0x5f>
c001e460:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e464:	05 20 03 00 00       	add    eax,0x320
c001e469:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001e46f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e473:	05 90 03 00 00       	add    eax,0x390
c001e478:	8b 00                	mov    eax,DWORD PTR [eax]
c001e47a:	f7 d0                	not    eax
c001e47c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e480:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e484:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e488:	ba 00 00 00 00       	mov    edx,0x0
c001e48d:	f7 f3                	div    ebx
c001e48f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e493:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e497:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e49d:	0d 00 00 02 00       	or     eax,0x20000
c001e4a2:	89 c2                	mov    edx,eax
c001e4a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e4a8:	05 20 03 00 00       	add    eax,0x320
c001e4ad:	89 10                	mov    DWORD PTR [eax],edx
c001e4af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e4b3:	05 e0 03 00 00       	add    eax,0x3e0
c001e4b8:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001e4be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e4c2:	05 80 03 00 00       	add    eax,0x380
c001e4c7:	89 c2                	mov    edx,eax
c001e4c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e4cd:	89 02                	mov    DWORD PTR [edx],eax
c001e4cf:	90                   	nop
c001e4d0:	83 c4 28             	add    esp,0x28
c001e4d3:	5b                   	pop    ebx
c001e4d4:	c3                   	ret    
c001e4d5:	90                   	nop

c001e4d6 <APICTimer::open(int, int, void*)>:
c001e4d6:	57                   	push   edi
c001e4d7:	56                   	push   esi
c001e4d8:	53                   	push   ebx
c001e4d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4dd:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4df:	83 c0 24             	add    eax,0x24
c001e4e2:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4e4:	83 ec 08             	sub    esp,0x8
c001e4e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e4eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e4ef:	ff d0                	call   eax
c001e4f1:	83 c4 10             	add    esp,0x10
c001e4f4:	e8 b5 5b ff ff       	call   c00140ae <thisCPU()>
c001e4f9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001e4ff:	83 ec 0c             	sub    esp,0xc
c001e502:	50                   	push   eax
c001e503:	e8 04 f5 ff ff       	call   c001da0c <APIC::getBase()>
c001e508:	83 c4 10             	add    esp,0x10
c001e50b:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001e511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e515:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e51b:	0f b6 f8             	movzx  edi,al
c001e51e:	89 d0                	mov    eax,edx
c001e520:	ba 00 00 00 00       	mov    edx,0x0
c001e525:	89 c1                	mov    ecx,eax
c001e527:	80 e5 ff             	and    ch,0xff
c001e52a:	89 cb                	mov    ebx,ecx
c001e52c:	0f b6 f2             	movzx  esi,dl
c001e52f:	89 d8                	mov    eax,ebx
c001e531:	89 f2                	mov    edx,esi
c001e533:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e537:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e53a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e53e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e542:	83 e0 00             	and    eax,0x0
c001e545:	09 d0                	or     eax,edx
c001e547:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e54b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e54f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e555:	8d 50 01             	lea    edx,[eax+0x1]
c001e558:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e55c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e562:	0f b6 d0             	movzx  edx,al
c001e565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e569:	83 c2 08             	add    edx,0x8
c001e56c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e570:	0f b6 c9             	movzx  ecx,cl
c001e573:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e579:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e57d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e581:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e585:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e58b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e58f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e593:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e599:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e59d:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e5a3:	83 ec 0c             	sub    esp,0xc
c001e5a6:	51                   	push   ecx
c001e5a7:	6a 01                	push   0x1
c001e5a9:	68 aa e3 01 c0       	push   0xc001e3aa
c001e5ae:	52                   	push   edx
c001e5af:	50                   	push   eax
c001e5b0:	e8 c9 1e ff ff       	call   c001047e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e5b5:	83 c4 20             	add    esp,0x20
c001e5b8:	89 c2                	mov    edx,eax
c001e5ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5be:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e5c4:	b8 00 00 00 00       	mov    eax,0x0
c001e5c9:	5b                   	pop    ebx
c001e5ca:	5e                   	pop    esi
c001e5cb:	5f                   	pop    edi
c001e5cc:	c3                   	ret    
c001e5cd:	90                   	nop

c001e5ce <APICTimer::APICTimer()>:
c001e5ce:	83 ec 0c             	sub    esp,0xc
c001e5d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5d5:	83 ec 08             	sub    esp,0x8
c001e5d8:	68 1c 31 02 c0       	push   0xc002311c
c001e5dd:	50                   	push   eax
c001e5de:	e8 55 3f ff ff       	call   c0012538 <Timer::Timer(char const*)>
c001e5e3:	83 c4 10             	add    esp,0x10
c001e5e6:	ba 30 31 02 c0       	mov    edx,0xc0023130
c001e5eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5ef:	89 10                	mov    DWORD PTR [eax],edx
c001e5f1:	90                   	nop
c001e5f2:	83 c4 0c             	add    esp,0xc
c001e5f5:	c3                   	ret    

c001e5f6 <PIT::write(int)>:
c001e5f6:	83 ec 10             	sub    esp,0x10
c001e5f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e5fd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e601:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e607:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e60b:	a3 84 5b 02 c0       	mov    ds:0xc0025b84,eax
c001e610:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e615:	99                   	cdq    
c001e616:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e61a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e61e:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e625:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e62a:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e62e:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e633:	ee                   	out    dx,al
c001e634:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e638:	0f b6 c0             	movzx  eax,al
c001e63b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e642:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e646:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e64a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e64f:	ee                   	out    dx,al
c001e650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e654:	c1 f8 08             	sar    eax,0x8
c001e657:	0f b6 c0             	movzx  eax,al
c001e65a:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e661:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e665:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e669:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e66e:	ee                   	out    dx,al
c001e66f:	90                   	nop
c001e670:	83 c4 10             	add    esp,0x10
c001e673:	c3                   	ret    

c001e674 <pitHandler(regs*, void*)>:
c001e674:	83 ec 0c             	sub    esp,0xc
c001e677:	a1 84 5b 02 c0       	mov    eax,ds:0xc0025b84
c001e67c:	99                   	cdq    
c001e67d:	52                   	push   edx
c001e67e:	50                   	push   eax
c001e67f:	6a 00                	push   0x0
c001e681:	68 00 ca 9a 3b       	push   0x3b9aca00
c001e686:	e8 a1 04 00 00       	call   c001eb2c <__udivdi3>
c001e68b:	83 c4 10             	add    esp,0x10
c001e68e:	83 ec 08             	sub    esp,0x8
c001e691:	52                   	push   edx
c001e692:	50                   	push   eax
c001e693:	e8 2f 3f ff ff       	call   c00125c7 <timerHandler(unsigned long long)>
c001e698:	83 c4 10             	add    esp,0x10
c001e69b:	90                   	nop
c001e69c:	83 c4 0c             	add    esp,0xc
c001e69f:	c3                   	ret    

c001e6a0 <PIT::open(int, int, void*)>:
c001e6a0:	83 ec 0c             	sub    esp,0xc
c001e6a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6a7:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6a9:	83 c0 24             	add    eax,0x24
c001e6ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6ae:	83 ec 08             	sub    esp,0x8
c001e6b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e6b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e6b9:	ff d0                	call   eax
c001e6bb:	83 c4 10             	add    esp,0x10
c001e6be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6c2:	83 ec 0c             	sub    esp,0xc
c001e6c5:	6a 00                	push   0x0
c001e6c7:	6a 01                	push   0x1
c001e6c9:	68 74 e6 01 c0       	push   0xc001e674
c001e6ce:	6a 00                	push   0x0
c001e6d0:	50                   	push   eax
c001e6d1:	e8 a8 1d ff ff       	call   c001047e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e6d6:	83 c4 20             	add    esp,0x20
c001e6d9:	89 c2                	mov    edx,eax
c001e6db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6df:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e6e5:	b8 00 00 00 00       	mov    eax,0x0
c001e6ea:	83 c4 0c             	add    esp,0xc
c001e6ed:	c3                   	ret    

c001e6ee <PIT::close(int, int, void*)>:
c001e6ee:	83 ec 0c             	sub    esp,0xc
c001e6f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6f5:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e6ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e703:	6a 01                	push   0x1
c001e705:	68 74 e6 01 c0       	push   0xc001e674
c001e70a:	6a 00                	push   0x0
c001e70c:	50                   	push   eax
c001e70d:	e8 ca 1d ff ff       	call   c00104dc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e712:	83 c4 10             	add    esp,0x10
c001e715:	b8 00 00 00 00       	mov    eax,0x0
c001e71a:	83 c4 0c             	add    esp,0xc
c001e71d:	c3                   	ret    

c001e71e <PIT::PIT()>:
c001e71e:	83 ec 0c             	sub    esp,0xc
c001e721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e725:	83 ec 08             	sub    esp,0x8
c001e728:	68 58 31 02 c0       	push   0xc0023158
c001e72d:	50                   	push   eax
c001e72e:	e8 05 3e ff ff       	call   c0012538 <Timer::Timer(char const*)>
c001e733:	83 c4 10             	add    esp,0x10
c001e736:	ba 80 31 02 c0       	mov    edx,0xc0023180
c001e73b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e73f:	89 10                	mov    DWORD PTR [eax],edx
c001e741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e745:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e74b:	0f b6 d0             	movzx  edx,al
c001e74e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e752:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001e759:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e75d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e763:	0f b6 d0             	movzx  edx,al
c001e766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e76a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001e76f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e773:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e779:	8d 50 01             	lea    edx,[eax+0x1]
c001e77c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e780:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e786:	0f b6 d0             	movzx  edx,al
c001e789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e78d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e791:	83 e1 3f             	and    ecx,0x3f
c001e794:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e798:	90                   	nop
c001e799:	83 c4 0c             	add    esp,0xc
c001e79c:	c3                   	ret    
c001e79d:	66 90                	xchg   ax,ax
c001e79f:	90                   	nop

c001e7a0 <avxDetect>:
c001e7a0:	b8 00 00 00 00       	mov    eax,0x0
c001e7a5:	c3                   	ret    

c001e7a6 <avxSave>:
c001e7a6:	c3                   	ret    

c001e7a7 <avxLoad>:
c001e7a7:	c3                   	ret    

c001e7a8 <avxInit>:
c001e7a8:	c3                   	ret    

c001e7a9 <avxClose>:
c001e7a9:	c3                   	ret    
c001e7aa:	66 90                	xchg   ax,ax
c001e7ac:	66 90                	xchg   ax,ax
c001e7ae:	66 90                	xchg   ax,ax

c001e7b0 <sseDetect>:
c001e7b0:	b8 01 00 00 00       	mov    eax,0x1
c001e7b5:	0f a2                	cpuid  
c001e7b7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e7bd:	74 06                	je     c001e7c5 <sseDetect.noSSE>
c001e7bf:	b8 01 00 00 00       	mov    eax,0x1
c001e7c4:	c3                   	ret    

c001e7c5 <sseDetect.noSSE>:
c001e7c5:	b8 00 00 00 00       	mov    eax,0x0
c001e7ca:	c3                   	ret    

c001e7cb <sseSave>:
c001e7cb:	0f ae 44 24 08       	fxsave [esp+0x8]
c001e7d0:	c3                   	ret    

c001e7d1 <sseLoad>:
c001e7d1:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001e7d6:	c3                   	ret    

c001e7d7 <sseInit>:
c001e7d7:	e8 40 00 00 00       	call   c001e81c <x87Init>
c001e7dc:	0f 20 e0             	mov    eax,cr4
c001e7df:	66 0d 00 06          	or     ax,0x600
c001e7e3:	0f 22 e0             	mov    cr4,eax
c001e7e6:	c3                   	ret    

c001e7e7 <sseClose>:
c001e7e7:	c3                   	ret    
c001e7e8:	66 90                	xchg   ax,ax
c001e7ea:	66 90                	xchg   ax,ax
c001e7ec:	66 90                	xchg   ax,ax
c001e7ee:	66 90                	xchg   ax,ax

c001e7f0 <value_37F>:
c001e7f0:	7f 03                	jg     c001e7f5 <value_37A+0x1>

c001e7f2 <value_37E>:
c001e7f2:	7e 03                	jle    c001e7f7 <x87Detect+0x1>

c001e7f4 <value_37A>:
c001e7f4:	7a 03                	jp     c001e7f9 <x87Detect+0x3>

c001e7f6 <x87Detect>:
c001e7f6:	b8 01 00 00 00       	mov    eax,0x1
c001e7fb:	0f a2                	cpuid  
c001e7fd:	f7 c2 01 00 00 00    	test   edx,0x1
c001e803:	74 06                	je     c001e80b <x87Detect.nox87>
c001e805:	b8 01 00 00 00       	mov    eax,0x1
c001e80a:	c3                   	ret    

c001e80b <x87Detect.nox87>:
c001e80b:	b8 00 00 00 00       	mov    eax,0x0
c001e810:	c3                   	ret    

c001e811 <x87Save>:
c001e811:	9b dd 74 24 08       	fsave  [esp+0x8]
c001e816:	c3                   	ret    

c001e817 <x87Load>:
c001e817:	dd 64 24 08          	frstor [esp+0x8]
c001e81b:	c3                   	ret    

c001e81c <x87Init>:
c001e81c:	9b db e3             	finit  
c001e81f:	0f 20 c0             	mov    eax,cr0
c001e822:	66 25 fb ff          	and    ax,0xfffb
c001e826:	66 0d 22 00          	or     ax,0x22
c001e82a:	0f 22 c0             	mov    cr0,eax
c001e82d:	0f 06                	clts   
c001e82f:	d9 2d f4 e7 01 c0    	fldcw  WORD PTR ds:0xc001e7f4
c001e835:	c3                   	ret    

c001e836 <x87Close>:
c001e836:	c3                   	ret    
c001e837:	90                   	nop

c001e838 <__do_global_ctors_aux>:
c001e838:	a1 18 f9 01 c0       	mov    eax,ds:0xc001f918
c001e83d:	83 f8 ff             	cmp    eax,0xffffffff
c001e840:	74 1a                	je     c001e85c <__do_global_ctors_aux+0x24>
c001e842:	55                   	push   ebp
c001e843:	89 e5                	mov    ebp,esp
c001e845:	53                   	push   ebx
c001e846:	52                   	push   edx
c001e847:	bb 18 f9 01 c0       	mov    ebx,0xc001f918
c001e84c:	ff d0                	call   eax
c001e84e:	83 eb 04             	sub    ebx,0x4
c001e851:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e853:	83 f8 ff             	cmp    eax,0xffffffff
c001e856:	75 f4                	jne    c001e84c <__do_global_ctors_aux+0x14>
c001e858:	58                   	pop    eax
c001e859:	5b                   	pop    ebx
c001e85a:	5d                   	pop    ebp
c001e85b:	c3                   	ret    
c001e85c:	c3                   	ret    
c001e85d:	66 90                	xchg   ax,ax
c001e85f:	90                   	nop

c001e860 <__divdi3>:
c001e860:	55                   	push   ebp
c001e861:	57                   	push   edi
c001e862:	56                   	push   esi
c001e863:	53                   	push   ebx
c001e864:	83 ec 1c             	sub    esp,0x1c
c001e867:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e86b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e86f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e872:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e876:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e87a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e87e:	85 db                	test   ebx,ebx
c001e880:	0f 88 8e 00 00 00    	js     c001e914 <__divdi3+0xb4>
c001e886:	89 dd                	mov    ebp,ebx
c001e888:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e890:	89 d3                	mov    ebx,edx
c001e892:	85 d2                	test   edx,edx
c001e894:	79 0d                	jns    c001e8a3 <__divdi3+0x43>
c001e896:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e89a:	f7 d8                	neg    eax
c001e89c:	83 d2 00             	adc    edx,0x0
c001e89f:	f7 da                	neg    edx
c001e8a1:	89 d3                	mov    ebx,edx
c001e8a3:	89 c7                	mov    edi,eax
c001e8a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e8a8:	85 db                	test   ebx,ebx
c001e8aa:	75 48                	jne    c001e8f4 <__divdi3+0x94>
c001e8ac:	39 ef                	cmp    edi,ebp
c001e8ae:	76 24                	jbe    c001e8d4 <__divdi3+0x74>
c001e8b0:	89 ea                	mov    edx,ebp
c001e8b2:	f7 f7                	div    edi
c001e8b4:	89 c1                	mov    ecx,eax
c001e8b6:	31 f6                	xor    esi,esi
c001e8b8:	89 c8                	mov    eax,ecx
c001e8ba:	89 f2                	mov    edx,esi
c001e8bc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e8c0:	85 c9                	test   ecx,ecx
c001e8c2:	74 07                	je     c001e8cb <__divdi3+0x6b>
c001e8c4:	f7 d8                	neg    eax
c001e8c6:	83 d2 00             	adc    edx,0x0
c001e8c9:	f7 da                	neg    edx
c001e8cb:	83 c4 1c             	add    esp,0x1c
c001e8ce:	5b                   	pop    ebx
c001e8cf:	5e                   	pop    esi
c001e8d0:	5f                   	pop    edi
c001e8d1:	5d                   	pop    ebp
c001e8d2:	c3                   	ret    
c001e8d3:	90                   	nop
c001e8d4:	85 ff                	test   edi,edi
c001e8d6:	75 0b                	jne    c001e8e3 <__divdi3+0x83>
c001e8d8:	b8 01 00 00 00       	mov    eax,0x1
c001e8dd:	31 d2                	xor    edx,edx
c001e8df:	f7 f3                	div    ebx
c001e8e1:	89 c7                	mov    edi,eax
c001e8e3:	31 d2                	xor    edx,edx
c001e8e5:	89 e8                	mov    eax,ebp
c001e8e7:	f7 f7                	div    edi
c001e8e9:	89 c6                	mov    esi,eax
c001e8eb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e8ee:	f7 f7                	div    edi
c001e8f0:	89 c1                	mov    ecx,eax
c001e8f2:	eb c4                	jmp    c001e8b8 <__divdi3+0x58>
c001e8f4:	39 eb                	cmp    ebx,ebp
c001e8f6:	77 3c                	ja     c001e934 <__divdi3+0xd4>
c001e8f8:	0f bd f3             	bsr    esi,ebx
c001e8fb:	83 f6 1f             	xor    esi,0x1f
c001e8fe:	75 40                	jne    c001e940 <__divdi3+0xe0>
c001e900:	39 eb                	cmp    ebx,ebp
c001e902:	72 09                	jb     c001e90d <__divdi3+0xad>
c001e904:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e907:	0f 87 97 00 00 00    	ja     c001e9a4 <__divdi3+0x144>
c001e90d:	b9 01 00 00 00       	mov    ecx,0x1
c001e912:	eb a4                	jmp    c001e8b8 <__divdi3+0x58>
c001e914:	f7 d9                	neg    ecx
c001e916:	83 d3 00             	adc    ebx,0x0
c001e919:	f7 db                	neg    ebx
c001e91b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e91e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e922:	89 dd                	mov    ebp,ebx
c001e924:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e92c:	e9 5f ff ff ff       	jmp    c001e890 <__divdi3+0x30>
c001e931:	8d 76 00             	lea    esi,[esi+0x0]
c001e934:	31 f6                	xor    esi,esi
c001e936:	31 c9                	xor    ecx,ecx
c001e938:	e9 7b ff ff ff       	jmp    c001e8b8 <__divdi3+0x58>
c001e93d:	8d 76 00             	lea    esi,[esi+0x0]
c001e940:	b8 20 00 00 00       	mov    eax,0x20
c001e945:	29 f0                	sub    eax,esi
c001e947:	89 f1                	mov    ecx,esi
c001e949:	d3 e3                	shl    ebx,cl
c001e94b:	89 fa                	mov    edx,edi
c001e94d:	88 c1                	mov    cl,al
c001e94f:	d3 ea                	shr    edx,cl
c001e951:	09 da                	or     edx,ebx
c001e953:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e957:	89 f1                	mov    ecx,esi
c001e959:	d3 e7                	shl    edi,cl
c001e95b:	89 eb                	mov    ebx,ebp
c001e95d:	88 c1                	mov    cl,al
c001e95f:	d3 eb                	shr    ebx,cl
c001e961:	89 f1                	mov    ecx,esi
c001e963:	d3 e5                	shl    ebp,cl
c001e965:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e968:	88 c1                	mov    cl,al
c001e96a:	d3 ea                	shr    edx,cl
c001e96c:	09 d5                	or     ebp,edx
c001e96e:	89 e8                	mov    eax,ebp
c001e970:	89 da                	mov    edx,ebx
c001e972:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e976:	89 d3                	mov    ebx,edx
c001e978:	89 c5                	mov    ebp,eax
c001e97a:	f7 e7                	mul    edi
c001e97c:	39 d3                	cmp    ebx,edx
c001e97e:	72 18                	jb     c001e998 <__divdi3+0x138>
c001e980:	74 0a                	je     c001e98c <__divdi3+0x12c>
c001e982:	89 e9                	mov    ecx,ebp
c001e984:	31 f6                	xor    esi,esi
c001e986:	e9 2d ff ff ff       	jmp    c001e8b8 <__divdi3+0x58>
c001e98b:	90                   	nop
c001e98c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e98f:	89 f1                	mov    ecx,esi
c001e991:	d3 e7                	shl    edi,cl
c001e993:	39 c7                	cmp    edi,eax
c001e995:	73 eb                	jae    c001e982 <__divdi3+0x122>
c001e997:	90                   	nop
c001e998:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e99b:	31 f6                	xor    esi,esi
c001e99d:	e9 16 ff ff ff       	jmp    c001e8b8 <__divdi3+0x58>
c001e9a2:	66 90                	xchg   ax,ax
c001e9a4:	31 c9                	xor    ecx,ecx
c001e9a6:	e9 0d ff ff ff       	jmp    c001e8b8 <__divdi3+0x58>
c001e9ab:	90                   	nop

c001e9ac <__moddi3>:
c001e9ac:	55                   	push   ebp
c001e9ad:	57                   	push   edi
c001e9ae:	56                   	push   esi
c001e9af:	53                   	push   ebx
c001e9b0:	83 ec 2c             	sub    esp,0x2c
c001e9b3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e9b7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e9bb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e9bf:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e9c3:	85 db                	test   ebx,ebx
c001e9c5:	0f 88 85 00 00 00    	js     c001ea50 <__moddi3+0xa4>
c001e9cb:	89 de                	mov    esi,ebx
c001e9cd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e9d5:	89 d7                	mov    edi,edx
c001e9d7:	85 d2                	test   edx,edx
c001e9d9:	79 09                	jns    c001e9e4 <__moddi3+0x38>
c001e9db:	f7 d8                	neg    eax
c001e9dd:	83 d2 00             	adc    edx,0x0
c001e9e0:	f7 da                	neg    edx
c001e9e2:	89 d7                	mov    edi,edx
c001e9e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e9e8:	89 cd                	mov    ebp,ecx
c001e9ea:	85 ff                	test   edi,edi
c001e9ec:	75 52                	jne    c001ea40 <__moddi3+0x94>
c001e9ee:	89 c3                	mov    ebx,eax
c001e9f0:	39 f0                	cmp    eax,esi
c001e9f2:	76 24                	jbe    c001ea18 <__moddi3+0x6c>
c001e9f4:	89 c8                	mov    eax,ecx
c001e9f6:	89 f2                	mov    edx,esi
c001e9f8:	f7 f3                	div    ebx
c001e9fa:	89 d6                	mov    esi,edx
c001e9fc:	89 f0                	mov    eax,esi
c001e9fe:	31 d2                	xor    edx,edx
c001ea00:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ea04:	85 c9                	test   ecx,ecx
c001ea06:	74 07                	je     c001ea0f <__moddi3+0x63>
c001ea08:	f7 d8                	neg    eax
c001ea0a:	83 d2 00             	adc    edx,0x0
c001ea0d:	f7 da                	neg    edx
c001ea0f:	83 c4 2c             	add    esp,0x2c
c001ea12:	5b                   	pop    ebx
c001ea13:	5e                   	pop    esi
c001ea14:	5f                   	pop    edi
c001ea15:	5d                   	pop    ebp
c001ea16:	c3                   	ret    
c001ea17:	90                   	nop
c001ea18:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ea1c:	85 db                	test   ebx,ebx
c001ea1e:	75 0d                	jne    c001ea2d <__moddi3+0x81>
c001ea20:	b8 01 00 00 00       	mov    eax,0x1
c001ea25:	31 d2                	xor    edx,edx
c001ea27:	f7 f7                	div    edi
c001ea29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea2d:	89 f0                	mov    eax,esi
c001ea2f:	31 d2                	xor    edx,edx
c001ea31:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ea35:	f7 f7                	div    edi
c001ea37:	89 e8                	mov    eax,ebp
c001ea39:	f7 f7                	div    edi
c001ea3b:	89 d6                	mov    esi,edx
c001ea3d:	eb bd                	jmp    c001e9fc <__moddi3+0x50>
c001ea3f:	90                   	nop
c001ea40:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001ea44:	39 f7                	cmp    edi,esi
c001ea46:	76 20                	jbe    c001ea68 <__moddi3+0xbc>
c001ea48:	89 c8                	mov    eax,ecx
c001ea4a:	89 f2                	mov    edx,esi
c001ea4c:	eb b2                	jmp    c001ea00 <__moddi3+0x54>
c001ea4e:	66 90                	xchg   ax,ax
c001ea50:	f7 d9                	neg    ecx
c001ea52:	83 d3 00             	adc    ebx,0x0
c001ea55:	f7 db                	neg    ebx
c001ea57:	89 de                	mov    esi,ebx
c001ea59:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001ea61:	e9 6f ff ff ff       	jmp    c001e9d5 <__moddi3+0x29>
c001ea66:	66 90                	xchg   ax,ax
c001ea68:	0f bd c7             	bsr    eax,edi
c001ea6b:	83 f0 1f             	xor    eax,0x1f
c001ea6e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ea72:	75 24                	jne    c001ea98 <__moddi3+0xec>
c001ea74:	39 f7                	cmp    edi,esi
c001ea76:	72 06                	jb     c001ea7e <__moddi3+0xd2>
c001ea78:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001ea7c:	77 0c                	ja     c001ea8a <__moddi3+0xde>
c001ea7e:	89 e9                	mov    ecx,ebp
c001ea80:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001ea84:	19 fe                	sbb    esi,edi
c001ea86:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001ea8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ea8e:	89 f2                	mov    edx,esi
c001ea90:	e9 6b ff ff ff       	jmp    c001ea00 <__moddi3+0x54>
c001ea95:	8d 76 00             	lea    esi,[esi+0x0]
c001ea98:	b8 20 00 00 00       	mov    eax,0x20
c001ea9d:	89 c2                	mov    edx,eax
c001ea9f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001eaa3:	29 da                	sub    edx,ebx
c001eaa5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001eaa9:	88 d9                	mov    cl,bl
c001eaab:	d3 e7                	shl    edi,cl
c001eaad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eab1:	88 d1                	mov    cl,dl
c001eab3:	d3 e8                	shr    eax,cl
c001eab5:	09 c7                	or     edi,eax
c001eab7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001eabb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001eabf:	89 d8                	mov    eax,ebx
c001eac1:	88 d9                	mov    cl,bl
c001eac3:	d3 e7                	shl    edi,cl
c001eac5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001eac9:	89 f3                	mov    ebx,esi
c001eacb:	88 d1                	mov    cl,dl
c001eacd:	d3 eb                	shr    ebx,cl
c001eacf:	89 c7                	mov    edi,eax
c001ead1:	88 c1                	mov    cl,al
c001ead3:	d3 e6                	shl    esi,cl
c001ead5:	89 e8                	mov    eax,ebp
c001ead7:	88 d1                	mov    cl,dl
c001ead9:	d3 e8                	shr    eax,cl
c001eadb:	09 f0                	or     eax,esi
c001eadd:	89 f9                	mov    ecx,edi
c001eadf:	d3 e5                	shl    ebp,cl
c001eae1:	89 da                	mov    edx,ebx
c001eae3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001eae7:	89 d3                	mov    ebx,edx
c001eae9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001eaed:	89 c6                	mov    esi,eax
c001eaef:	89 d1                	mov    ecx,edx
c001eaf1:	39 d3                	cmp    ebx,edx
c001eaf3:	72 27                	jb     c001eb1c <__moddi3+0x170>
c001eaf5:	74 21                	je     c001eb18 <__moddi3+0x16c>
c001eaf7:	29 f5                	sub    ebp,esi
c001eaf9:	19 cb                	sbb    ebx,ecx
c001eafb:	89 de                	mov    esi,ebx
c001eafd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001eb01:	d3 e6                	shl    esi,cl
c001eb03:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001eb07:	89 f9                	mov    ecx,edi
c001eb09:	d3 ed                	shr    ebp,cl
c001eb0b:	09 ee                	or     esi,ebp
c001eb0d:	89 f0                	mov    eax,esi
c001eb0f:	d3 eb                	shr    ebx,cl
c001eb11:	89 da                	mov    edx,ebx
c001eb13:	e9 e8 fe ff ff       	jmp    c001ea00 <__moddi3+0x54>
c001eb18:	39 c5                	cmp    ebp,eax
c001eb1a:	73 db                	jae    c001eaf7 <__moddi3+0x14b>
c001eb1c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001eb20:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001eb24:	89 d1                	mov    ecx,edx
c001eb26:	89 c6                	mov    esi,eax
c001eb28:	eb cd                	jmp    c001eaf7 <__moddi3+0x14b>
c001eb2a:	66 90                	xchg   ax,ax

c001eb2c <__udivdi3>:
c001eb2c:	55                   	push   ebp
c001eb2d:	57                   	push   edi
c001eb2e:	56                   	push   esi
c001eb2f:	53                   	push   ebx
c001eb30:	83 ec 1c             	sub    esp,0x1c
c001eb33:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001eb37:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001eb3b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001eb3f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001eb43:	85 d2                	test   edx,edx
c001eb45:	75 41                	jne    c001eb88 <__udivdi3+0x5c>
c001eb47:	39 f7                	cmp    edi,esi
c001eb49:	76 15                	jbe    c001eb60 <__udivdi3+0x34>
c001eb4b:	89 e8                	mov    eax,ebp
c001eb4d:	89 f2                	mov    edx,esi
c001eb4f:	f7 f7                	div    edi
c001eb51:	31 db                	xor    ebx,ebx
c001eb53:	89 da                	mov    edx,ebx
c001eb55:	83 c4 1c             	add    esp,0x1c
c001eb58:	5b                   	pop    ebx
c001eb59:	5e                   	pop    esi
c001eb5a:	5f                   	pop    edi
c001eb5b:	5d                   	pop    ebp
c001eb5c:	c3                   	ret    
c001eb5d:	8d 76 00             	lea    esi,[esi+0x0]
c001eb60:	89 f9                	mov    ecx,edi
c001eb62:	85 ff                	test   edi,edi
c001eb64:	75 0b                	jne    c001eb71 <__udivdi3+0x45>
c001eb66:	b8 01 00 00 00       	mov    eax,0x1
c001eb6b:	31 d2                	xor    edx,edx
c001eb6d:	f7 f7                	div    edi
c001eb6f:	89 c1                	mov    ecx,eax
c001eb71:	31 d2                	xor    edx,edx
c001eb73:	89 f0                	mov    eax,esi
c001eb75:	f7 f1                	div    ecx
c001eb77:	89 c3                	mov    ebx,eax
c001eb79:	89 e8                	mov    eax,ebp
c001eb7b:	f7 f1                	div    ecx
c001eb7d:	89 da                	mov    edx,ebx
c001eb7f:	83 c4 1c             	add    esp,0x1c
c001eb82:	5b                   	pop    ebx
c001eb83:	5e                   	pop    esi
c001eb84:	5f                   	pop    edi
c001eb85:	5d                   	pop    ebp
c001eb86:	c3                   	ret    
c001eb87:	90                   	nop
c001eb88:	39 f2                	cmp    edx,esi
c001eb8a:	77 1c                	ja     c001eba8 <__udivdi3+0x7c>
c001eb8c:	0f bd da             	bsr    ebx,edx
c001eb8f:	83 f3 1f             	xor    ebx,0x1f
c001eb92:	75 24                	jne    c001ebb8 <__udivdi3+0x8c>
c001eb94:	39 f2                	cmp    edx,esi
c001eb96:	72 08                	jb     c001eba0 <__udivdi3+0x74>
c001eb98:	39 ef                	cmp    edi,ebp
c001eb9a:	0f 87 84 00 00 00    	ja     c001ec24 <__udivdi3+0xf8>
c001eba0:	b8 01 00 00 00       	mov    eax,0x1
c001eba5:	eb ac                	jmp    c001eb53 <__udivdi3+0x27>
c001eba7:	90                   	nop
c001eba8:	31 db                	xor    ebx,ebx
c001ebaa:	31 c0                	xor    eax,eax
c001ebac:	89 da                	mov    edx,ebx
c001ebae:	83 c4 1c             	add    esp,0x1c
c001ebb1:	5b                   	pop    ebx
c001ebb2:	5e                   	pop    esi
c001ebb3:	5f                   	pop    edi
c001ebb4:	5d                   	pop    ebp
c001ebb5:	c3                   	ret    
c001ebb6:	66 90                	xchg   ax,ax
c001ebb8:	b8 20 00 00 00       	mov    eax,0x20
c001ebbd:	29 d8                	sub    eax,ebx
c001ebbf:	88 d9                	mov    cl,bl
c001ebc1:	d3 e2                	shl    edx,cl
c001ebc3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ebc7:	89 fa                	mov    edx,edi
c001ebc9:	88 c1                	mov    cl,al
c001ebcb:	d3 ea                	shr    edx,cl
c001ebcd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ebd1:	09 d1                	or     ecx,edx
c001ebd3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ebd7:	88 d9                	mov    cl,bl
c001ebd9:	d3 e7                	shl    edi,cl
c001ebdb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ebdf:	89 f7                	mov    edi,esi
c001ebe1:	88 c1                	mov    cl,al
c001ebe3:	d3 ef                	shr    edi,cl
c001ebe5:	88 d9                	mov    cl,bl
c001ebe7:	d3 e6                	shl    esi,cl
c001ebe9:	89 ea                	mov    edx,ebp
c001ebeb:	88 c1                	mov    cl,al
c001ebed:	d3 ea                	shr    edx,cl
c001ebef:	09 d6                	or     esi,edx
c001ebf1:	89 f0                	mov    eax,esi
c001ebf3:	89 fa                	mov    edx,edi
c001ebf5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001ebf9:	89 d7                	mov    edi,edx
c001ebfb:	89 c6                	mov    esi,eax
c001ebfd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001ec01:	39 d7                	cmp    edi,edx
c001ec03:	72 13                	jb     c001ec18 <__udivdi3+0xec>
c001ec05:	74 09                	je     c001ec10 <__udivdi3+0xe4>
c001ec07:	89 f0                	mov    eax,esi
c001ec09:	31 db                	xor    ebx,ebx
c001ec0b:	e9 43 ff ff ff       	jmp    c001eb53 <__udivdi3+0x27>
c001ec10:	88 d9                	mov    cl,bl
c001ec12:	d3 e5                	shl    ebp,cl
c001ec14:	39 c5                	cmp    ebp,eax
c001ec16:	73 ef                	jae    c001ec07 <__udivdi3+0xdb>
c001ec18:	8d 46 ff             	lea    eax,[esi-0x1]
c001ec1b:	31 db                	xor    ebx,ebx
c001ec1d:	e9 31 ff ff ff       	jmp    c001eb53 <__udivdi3+0x27>
c001ec22:	66 90                	xchg   ax,ax
c001ec24:	31 c0                	xor    eax,eax
c001ec26:	e9 28 ff ff ff       	jmp    c001eb53 <__udivdi3+0x27>
c001ec2b:	90                   	nop

c001ec2c <__umoddi3>:
c001ec2c:	55                   	push   ebp
c001ec2d:	57                   	push   edi
c001ec2e:	56                   	push   esi
c001ec2f:	53                   	push   ebx
c001ec30:	83 ec 1c             	sub    esp,0x1c
c001ec33:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ec37:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ec3b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001ec3f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ec43:	89 da                	mov    edx,ebx
c001ec45:	85 c0                	test   eax,eax
c001ec47:	75 37                	jne    c001ec80 <__umoddi3+0x54>
c001ec49:	39 df                	cmp    edi,ebx
c001ec4b:	76 13                	jbe    c001ec60 <__umoddi3+0x34>
c001ec4d:	89 f0                	mov    eax,esi
c001ec4f:	f7 f7                	div    edi
c001ec51:	89 d0                	mov    eax,edx
c001ec53:	31 d2                	xor    edx,edx
c001ec55:	83 c4 1c             	add    esp,0x1c
c001ec58:	5b                   	pop    ebx
c001ec59:	5e                   	pop    esi
c001ec5a:	5f                   	pop    edi
c001ec5b:	5d                   	pop    ebp
c001ec5c:	c3                   	ret    
c001ec5d:	8d 76 00             	lea    esi,[esi+0x0]
c001ec60:	89 fd                	mov    ebp,edi
c001ec62:	85 ff                	test   edi,edi
c001ec64:	75 0b                	jne    c001ec71 <__umoddi3+0x45>
c001ec66:	b8 01 00 00 00       	mov    eax,0x1
c001ec6b:	31 d2                	xor    edx,edx
c001ec6d:	f7 f7                	div    edi
c001ec6f:	89 c5                	mov    ebp,eax
c001ec71:	89 d8                	mov    eax,ebx
c001ec73:	31 d2                	xor    edx,edx
c001ec75:	f7 f5                	div    ebp
c001ec77:	89 f0                	mov    eax,esi
c001ec79:	f7 f5                	div    ebp
c001ec7b:	89 d0                	mov    eax,edx
c001ec7d:	eb d4                	jmp    c001ec53 <__umoddi3+0x27>
c001ec7f:	90                   	nop
c001ec80:	89 f1                	mov    ecx,esi
c001ec82:	39 d8                	cmp    eax,ebx
c001ec84:	76 0a                	jbe    c001ec90 <__umoddi3+0x64>
c001ec86:	89 f0                	mov    eax,esi
c001ec88:	83 c4 1c             	add    esp,0x1c
c001ec8b:	5b                   	pop    ebx
c001ec8c:	5e                   	pop    esi
c001ec8d:	5f                   	pop    edi
c001ec8e:	5d                   	pop    ebp
c001ec8f:	c3                   	ret    
c001ec90:	0f bd e8             	bsr    ebp,eax
c001ec93:	83 f5 1f             	xor    ebp,0x1f
c001ec96:	75 1c                	jne    c001ecb4 <__umoddi3+0x88>
c001ec98:	39 d8                	cmp    eax,ebx
c001ec9a:	72 04                	jb     c001eca0 <__umoddi3+0x74>
c001ec9c:	39 f7                	cmp    edi,esi
c001ec9e:	77 08                	ja     c001eca8 <__umoddi3+0x7c>
c001eca0:	89 da                	mov    edx,ebx
c001eca2:	29 fe                	sub    esi,edi
c001eca4:	19 c2                	sbb    edx,eax
c001eca6:	89 f1                	mov    ecx,esi
c001eca8:	89 c8                	mov    eax,ecx
c001ecaa:	83 c4 1c             	add    esp,0x1c
c001ecad:	5b                   	pop    ebx
c001ecae:	5e                   	pop    esi
c001ecaf:	5f                   	pop    edi
c001ecb0:	5d                   	pop    ebp
c001ecb1:	c3                   	ret    
c001ecb2:	66 90                	xchg   ax,ax
c001ecb4:	ba 20 00 00 00       	mov    edx,0x20
c001ecb9:	29 ea                	sub    edx,ebp
c001ecbb:	89 e9                	mov    ecx,ebp
c001ecbd:	d3 e0                	shl    eax,cl
c001ecbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ecc3:	89 f8                	mov    eax,edi
c001ecc5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ecc9:	88 d1                	mov    cl,dl
c001eccb:	d3 e8                	shr    eax,cl
c001eccd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ecd1:	09 c1                	or     ecx,eax
c001ecd3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ecd7:	89 e9                	mov    ecx,ebp
c001ecd9:	d3 e7                	shl    edi,cl
c001ecdb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ecdf:	89 d8                	mov    eax,ebx
c001ece1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ece5:	88 d1                	mov    cl,dl
c001ece7:	d3 e8                	shr    eax,cl
c001ece9:	89 c7                	mov    edi,eax
c001eceb:	89 e9                	mov    ecx,ebp
c001eced:	d3 e3                	shl    ebx,cl
c001ecef:	89 f0                	mov    eax,esi
c001ecf1:	88 d1                	mov    cl,dl
c001ecf3:	d3 e8                	shr    eax,cl
c001ecf5:	09 d8                	or     eax,ebx
c001ecf7:	89 e9                	mov    ecx,ebp
c001ecf9:	d3 e6                	shl    esi,cl
c001ecfb:	89 f3                	mov    ebx,esi
c001ecfd:	89 fa                	mov    edx,edi
c001ecff:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001ed03:	89 d1                	mov    ecx,edx
c001ed05:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001ed09:	89 c6                	mov    esi,eax
c001ed0b:	89 d7                	mov    edi,edx
c001ed0d:	39 d1                	cmp    ecx,edx
c001ed0f:	72 27                	jb     c001ed38 <__umoddi3+0x10c>
c001ed11:	74 21                	je     c001ed34 <__umoddi3+0x108>
c001ed13:	89 ca                	mov    edx,ecx
c001ed15:	29 f3                	sub    ebx,esi
c001ed17:	19 fa                	sbb    edx,edi
c001ed19:	89 d0                	mov    eax,edx
c001ed1b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001ed1f:	d3 e0                	shl    eax,cl
c001ed21:	89 e9                	mov    ecx,ebp
c001ed23:	d3 eb                	shr    ebx,cl
c001ed25:	09 d8                	or     eax,ebx
c001ed27:	d3 ea                	shr    edx,cl
c001ed29:	83 c4 1c             	add    esp,0x1c
c001ed2c:	5b                   	pop    ebx
c001ed2d:	5e                   	pop    esi
c001ed2e:	5f                   	pop    edi
c001ed2f:	5d                   	pop    ebp
c001ed30:	c3                   	ret    
c001ed31:	8d 76 00             	lea    esi,[esi+0x0]
c001ed34:	39 c3                	cmp    ebx,eax
c001ed36:	73 db                	jae    c001ed13 <__umoddi3+0xe7>
c001ed38:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001ed3c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001ed40:	89 d7                	mov    edi,edx
c001ed42:	89 c6                	mov    esi,eax
c001ed44:	eb cd                	jmp    c001ed13 <__umoddi3+0xe7>
c001ed46:	66 90                	xchg   ax,ax
c001ed48:	66 90                	xchg   ax,ax
c001ed4a:	66 90                	xchg   ax,ax
c001ed4c:	66 90                	xchg   ax,ax
c001ed4e:	66 90                	xchg   ax,ax

c001ed50 <fabs>:
c001ed50:	83 ec 0c             	sub    esp,0xc
c001ed53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed57:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ed5e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001ed63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ed67:	dd 04 24             	fld    QWORD PTR [esp]
c001ed6a:	83 c4 0c             	add    esp,0xc
c001ed6d:	c3                   	ret    
c001ed6e:	66 90                	xchg   ax,ax

c001ed70 <lrint>:
c001ed70:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001ed74:	83 ec 04             	sub    esp,0x4
c001ed77:	db 1c 24             	fistp  DWORD PTR [esp]
c001ed7a:	58                   	pop    eax
c001ed7b:	c3                   	ret    

c001ed7c <lrintf>:
c001ed7c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001ed80:	83 ec 04             	sub    esp,0x4
c001ed83:	db 1c 24             	fistp  DWORD PTR [esp]
c001ed86:	58                   	pop    eax
c001ed87:	c3                   	ret    

Disassembly of section .init:

c001ed88 <_init>:
c001ed88:	55                   	push   ebp
c001ed89:	89 e5                	mov    ebp,esp
c001ed8b:	e8 88 13 fe ff       	call   c0000118 <frame_dummy>
c001ed90:	e8 a3 fa ff ff       	call   c001e838 <__do_global_ctors_aux>
c001ed95:	5d                   	pop    ebp
c001ed96:	c3                   	ret    

Disassembly of section .fini:

c001ed97 <_fini>:
c001ed97:	55                   	push   ebp
c001ed98:	89 e5                	mov    ebp,esp
c001ed9a:	e8 09 13 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001ed9f:	5d                   	pop    ebp
c001eda0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001eda2 <Computer::~Computer()>:
c001eda2:	83 ec 0c             	sub    esp,0xc
c001eda5:	ba c4 08 02 c0       	mov    edx,0xc00208c4
c001edaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edae:	89 10                	mov    DWORD PTR [eax],edx
c001edb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb4:	83 ec 0c             	sub    esp,0xc
c001edb7:	50                   	push   eax
c001edb8:	e8 0f 16 ff ff       	call   c00103cc <Device::~Device()>
c001edbd:	83 c4 10             	add    esp,0x10
c001edc0:	90                   	nop
c001edc1:	83 c4 0c             	add    esp,0xc
c001edc4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001edc6 <Computer::~Computer()>:
c001edc6:	83 ec 0c             	sub    esp,0xc
c001edc9:	83 ec 0c             	sub    esp,0xc
c001edcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edd0:	e8 cd ff ff ff       	call   c001eda2 <Computer::~Computer()>
c001edd5:	83 c4 10             	add    esp,0x10
c001edd8:	83 ec 08             	sub    esp,0x8
c001eddb:	68 ec 01 00 00       	push   0x1ec
c001ede0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ede4:	e8 56 02 ff ff       	call   c000f03f <operator delete(void*, unsigned long)>
c001ede9:	83 c4 10             	add    esp,0x10
c001edec:	83 c4 0c             	add    esp,0xc
c001edef:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001edf0 <idleCommon()>:
c001edf0:	83 ec 0c             	sub    esp,0xc
c001edf3:	e8 94 93 ff ff       	call   c001818c <lockScheduler()>
c001edf8:	e8 c3 96 ff ff       	call   c00184c0 <schedule()>
c001edfd:	83 c4 0c             	add    esp,0xc
c001ee00:	e9 89 93 ff ff       	jmp    c001818e <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001ee05 <CPU::readCR3()>:
c001ee05:	83 ec 10             	sub    esp,0x10
c001ee08:	0f 20 d8             	mov    eax,cr3
c001ee0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee13:	83 c4 10             	add    esp,0x10
c001ee16:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001ee17 <CPU::writeCR3(unsigned long)>:
c001ee17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee1b:	0f 22 d8             	mov    cr3,eax
c001ee1e:	90                   	nop
c001ee1f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001ee20 <LinkedList<UnixFile>::~LinkedList()>:
c001ee20:	90                   	nop
c001ee21:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001ee22 <LinkedList<UnixFile>::LinkedList()>:
c001ee22:	83 ec 0c             	sub    esp,0xc
c001ee25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee29:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ee2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee33:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ee3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee3e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ee45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee49:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ee4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee53:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ee5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee5e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ee65:	83 ec 0c             	sub    esp,0xc
c001ee68:	68 bd 0b 02 c0       	push   0xc0020bbd
c001ee6d:	e8 ad 02 ff ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001ee72:	83 c4 10             	add    esp,0x10
c001ee75:	90                   	nop
c001ee76:	83 c4 0c             	add    esp,0xc
c001ee79:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001ee7a <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001ee7a:	83 ec 0c             	sub    esp,0xc
c001ee7d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ee82:	75 10                	jne    c001ee94 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001ee84:	83 ec 0c             	sub    esp,0xc
c001ee87:	68 d8 0b 02 c0       	push   0xc0020bd8
c001ee8c:	e8 8d 63 ff ff       	call   c001521e <Krnl::panic(char const*)>
c001ee91:	83 c4 10             	add    esp,0x10
c001ee94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee98:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee9a:	85 c0                	test   eax,eax
c001ee9c:	74 34                	je     c001eed2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001ee9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eea2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eea5:	85 c0                	test   eax,eax
c001eea7:	74 29                	je     c001eed2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001eea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eead:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eeb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eeb4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eeb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eebb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eebf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eec6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eec9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eed0:	eb 65                	jmp    c001ef37 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001eed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed6:	8b 00                	mov    eax,DWORD PTR [eax]
c001eed8:	85 c0                	test   eax,eax
c001eeda:	75 4b                	jne    c001ef27 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001eedc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eee0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eee3:	85 c0                	test   eax,eax
c001eee5:	75 40                	jne    c001ef27 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001eee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeeb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eeef:	89 10                	mov    DWORD PTR [eax],edx
c001eef1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eef5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eef9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eefc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef03:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ef0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef0e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef11:	85 c0                	test   eax,eax
c001ef13:	74 22                	je     c001ef37 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001ef15:	83 ec 0c             	sub    esp,0xc
c001ef18:	68 fa 0b 02 c0       	push   0xc0020bfa
c001ef1d:	e8 fc 62 ff ff       	call   c001521e <Krnl::panic(char const*)>
c001ef22:	83 c4 10             	add    esp,0x10
c001ef25:	eb 10                	jmp    c001ef37 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001ef27:	83 ec 0c             	sub    esp,0xc
c001ef2a:	68 04 0c 02 c0       	push   0xc0020c04
c001ef2f:	e8 ea 62 ff ff       	call   c001521e <Krnl::panic(char const*)>
c001ef34:	83 c4 10             	add    esp,0x10
c001ef37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef3b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef3e:	8d 50 01             	lea    edx,[eax+0x1]
c001ef41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef45:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ef48:	90                   	nop
c001ef49:	83 c4 0c             	add    esp,0xc
c001ef4c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001ef4e <LinkedList<UnixFile>::getFirstElement()>:
c001ef4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef52:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef54:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001ef56 <LinkedList<UnixFile>::removeFirst()>:
c001ef56:	83 ec 0c             	sub    esp,0xc
c001ef59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef5d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef5f:	85 c0                	test   eax,eax
c001ef61:	75 12                	jne    c001ef75 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001ef63:	83 ec 0c             	sub    esp,0xc
c001ef66:	68 10 0c 02 c0       	push   0xc0020c10
c001ef6b:	e8 ae 62 ff ff       	call   c001521e <Krnl::panic(char const*)>
c001ef70:	83 c4 10             	add    esp,0x10
c001ef73:	eb 7e                	jmp    c001eff3 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001ef75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef79:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef7c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef7f:	85 c0                	test   eax,eax
c001ef81:	74 10                	je     c001ef93 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001ef83:	83 ec 0c             	sub    esp,0xc
c001ef86:	68 5b 0c 02 c0       	push   0xc0020c5b
c001ef8b:	e8 8e 62 ff ff       	call   c001521e <Krnl::panic(char const*)>
c001ef90:	83 c4 10             	add    esp,0x10
c001ef93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef97:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef99:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef9c:	85 c0                	test   eax,eax
c001ef9e:	75 33                	jne    c001efd3 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001efa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efa4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001efaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efae:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001efb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001efbc:	83 f8 01             	cmp    eax,0x1
c001efbf:	74 21                	je     c001efe2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001efc1:	83 ec 0c             	sub    esp,0xc
c001efc4:	68 34 0c 02 c0       	push   0xc0020c34
c001efc9:	e8 50 62 ff ff       	call   c001521e <Krnl::panic(char const*)>
c001efce:	83 c4 10             	add    esp,0x10
c001efd1:	eb 0f                	jmp    c001efe2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001efd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd7:	8b 00                	mov    eax,DWORD PTR [eax]
c001efd9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001efdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efe0:	89 10                	mov    DWORD PTR [eax],edx
c001efe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efe6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001efe9:	8d 50 ff             	lea    edx,[eax-0x1]
c001efec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eff0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eff3:	83 c4 0c             	add    esp,0xc
c001eff6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001eff8 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001eff8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001effc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001efff:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f000 <DriverlessDevice::~DriverlessDevice()>:
c001f000:	ba c4 12 02 c0       	mov    edx,0xc00212c4
c001f005:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f009:	89 10                	mov    DWORD PTR [eax],edx
c001f00b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f00f:	50                   	push   eax
c001f010:	e8 b7 13 ff ff       	call   c00103cc <Device::~Device()>
c001f015:	83 c4 04             	add    esp,0x4
c001f018:	90                   	nop
c001f019:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f01a <DriverlessDevice::~DriverlessDevice()>:
c001f01a:	83 ec 0c             	sub    esp,0xc
c001f01d:	83 ec 0c             	sub    esp,0xc
c001f020:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f024:	e8 d7 ff ff ff       	call   c001f000 <DriverlessDevice::~DriverlessDevice()>
c001f029:	83 c4 10             	add    esp,0x10
c001f02c:	83 ec 08             	sub    esp,0x8
c001f02f:	68 58 01 00 00       	push   0x158
c001f034:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f038:	e8 02 00 ff ff       	call   c000f03f <operator delete(void*, unsigned long)>
c001f03d:	83 c4 10             	add    esp,0x10
c001f040:	83 c4 0c             	add    esp,0xc
c001f043:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f044 <LinkedList<Device>::addElement(Device*)>:
c001f044:	83 ec 0c             	sub    esp,0xc
c001f047:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f04c:	75 10                	jne    c001f05e <LinkedList<Device>::addElement(Device*)+0x1a>
c001f04e:	83 ec 0c             	sub    esp,0xc
c001f051:	68 d8 0b 02 c0       	push   0xc0020bd8
c001f056:	e8 c3 61 ff ff       	call   c001521e <Krnl::panic(char const*)>
c001f05b:	83 c4 10             	add    esp,0x10
c001f05e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f062:	8b 00                	mov    eax,DWORD PTR [eax]
c001f064:	85 c0                	test   eax,eax
c001f066:	74 3a                	je     c001f0a2 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f06c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f06f:	85 c0                	test   eax,eax
c001f071:	74 2f                	je     c001f0a2 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f077:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f07a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f07e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f088:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f08c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f08f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f093:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f096:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f0a0:	eb 68                	jmp    c001f10a <LinkedList<Device>::addElement(Device*)+0xc6>
c001f0a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0a6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f0a8:	85 c0                	test   eax,eax
c001f0aa:	75 4e                	jne    c001f0fa <LinkedList<Device>::addElement(Device*)+0xb6>
c001f0ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f0b3:	85 c0                	test   eax,eax
c001f0b5:	75 43                	jne    c001f0fa <LinkedList<Device>::addElement(Device*)+0xb6>
c001f0b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f0bf:	89 10                	mov    DWORD PTR [eax],edx
c001f0c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f0c9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f0cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f0d3:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f0dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0e1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f0e4:	85 c0                	test   eax,eax
c001f0e6:	74 22                	je     c001f10a <LinkedList<Device>::addElement(Device*)+0xc6>
c001f0e8:	83 ec 0c             	sub    esp,0xc
c001f0eb:	68 fa 0b 02 c0       	push   0xc0020bfa
c001f0f0:	e8 29 61 ff ff       	call   c001521e <Krnl::panic(char const*)>
c001f0f5:	83 c4 10             	add    esp,0x10
c001f0f8:	eb 10                	jmp    c001f10a <LinkedList<Device>::addElement(Device*)+0xc6>
c001f0fa:	83 ec 0c             	sub    esp,0xc
c001f0fd:	68 04 0c 02 c0       	push   0xc0020c04
c001f102:	e8 17 61 ff ff       	call   c001521e <Krnl::panic(char const*)>
c001f107:	83 c4 10             	add    esp,0x10
c001f10a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f10e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f111:	8d 50 01             	lea    edx,[eax+0x1]
c001f114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f118:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f11b:	90                   	nop
c001f11c:	83 c4 0c             	add    esp,0xc
c001f11f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f120 <LinkedList<Device>::LinkedList()>:
c001f120:	83 ec 0c             	sub    esp,0xc
c001f123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f127:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f12d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f131:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f13c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f147:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f14d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f151:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f15c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f163:	83 ec 0c             	sub    esp,0xc
c001f166:	68 bd 0b 02 c0       	push   0xc0020bbd
c001f16b:	e8 af ff fe ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001f170:	83 c4 10             	add    esp,0x10
c001f173:	90                   	nop
c001f174:	83 c4 0c             	add    esp,0xc
c001f177:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001f178 <CPU::readCR0()>:
c001f178:	83 ec 10             	sub    esp,0x10
c001f17b:	0f 20 c0             	mov    eax,cr0
c001f17e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f182:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f186:	83 c4 10             	add    esp,0x10
c001f189:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001f18a <CPU::writeCR0(unsigned long)>:
c001f18a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f18e:	0f 22 c0             	mov    cr0,eax
c001f191:	90                   	nop
c001f192:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001f193 <CPU::readDR0()>:
c001f193:	83 ec 10             	sub    esp,0x10
c001f196:	0f 21 c0             	mov    eax,db0
c001f199:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f19d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f1a1:	83 c4 10             	add    esp,0x10
c001f1a4:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001f1a5 <CPU::readDR1()>:
c001f1a5:	83 ec 10             	sub    esp,0x10
c001f1a8:	0f 21 c8             	mov    eax,db1
c001f1ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f1af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f1b3:	83 c4 10             	add    esp,0x10
c001f1b6:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001f1b7 <CPU::readDR2()>:
c001f1b7:	83 ec 10             	sub    esp,0x10
c001f1ba:	0f 21 d0             	mov    eax,db2
c001f1bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f1c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f1c5:	83 c4 10             	add    esp,0x10
c001f1c8:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001f1c9 <CPU::readDR3()>:
c001f1c9:	83 ec 10             	sub    esp,0x10
c001f1cc:	0f 21 d8             	mov    eax,db3
c001f1cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f1d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f1d7:	83 c4 10             	add    esp,0x10
c001f1da:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001f1db <CPU::readDR6()>:
c001f1db:	83 ec 10             	sub    esp,0x10
c001f1de:	0f 21 f0             	mov    eax,db6
c001f1e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f1e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f1e9:	83 c4 10             	add    esp,0x10
c001f1ec:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001f1ed <CPU::readDR7()>:
c001f1ed:	83 ec 10             	sub    esp,0x10
c001f1f0:	0f 21 f8             	mov    eax,db7
c001f1f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f1f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f1fb:	83 c4 10             	add    esp,0x10
c001f1fe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f200 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f200:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f204:	8b 00                	mov    eax,DWORD PTR [eax]
c001f206:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f208 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f208:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f20c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f20e:	85 c0                	test   eax,eax
c001f210:	75 0e                	jne    c001f220 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f212:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f216:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f219:	85 c0                	test   eax,eax
c001f21b:	75 03                	jne    c001f220 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f21d:	b0 01                	mov    al,0x1
c001f21f:	c3                   	ret    
c001f220:	b0 00                	mov    al,0x0
c001f222:	90                   	nop
c001f223:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f224 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f224:	83 ec 0c             	sub    esp,0xc
c001f227:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f22b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f22d:	85 c0                	test   eax,eax
c001f22f:	75 15                	jne    c001f246 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001f231:	83 ec 0c             	sub    esp,0xc
c001f234:	68 10 0c 02 c0       	push   0xc0020c10
c001f239:	e8 e0 5f ff ff       	call   c001521e <Krnl::panic(char const*)>
c001f23e:	83 c4 10             	add    esp,0x10
c001f241:	e9 88 00 00 00       	jmp    c001f2ce <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001f246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f24a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f24d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f250:	85 c0                	test   eax,eax
c001f252:	0f 95 c0             	setne  al
c001f255:	84 c0                	test   al,al
c001f257:	74 10                	je     c001f269 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001f259:	83 ec 0c             	sub    esp,0xc
c001f25c:	68 5b 0c 02 c0       	push   0xc0020c5b
c001f261:	e8 b8 5f ff ff       	call   c001521e <Krnl::panic(char const*)>
c001f266:	83 c4 10             	add    esp,0x10
c001f269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f26d:	8b 00                	mov    eax,DWORD PTR [eax]
c001f26f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f272:	85 c0                	test   eax,eax
c001f274:	0f 94 c0             	sete   al
c001f277:	84 c0                	test   al,al
c001f279:	74 33                	je     c001f2ae <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001f27b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f27f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f289:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f294:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f297:	83 f8 01             	cmp    eax,0x1
c001f29a:	74 21                	je     c001f2bd <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001f29c:	83 ec 0c             	sub    esp,0xc
c001f29f:	68 34 0c 02 c0       	push   0xc0020c34
c001f2a4:	e8 75 5f ff ff       	call   c001521e <Krnl::panic(char const*)>
c001f2a9:	83 c4 10             	add    esp,0x10
c001f2ac:	eb 0f                	jmp    c001f2bd <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001f2ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2b2:	8b 00                	mov    eax,DWORD PTR [eax]
c001f2b4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f2b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2bb:	89 10                	mov    DWORD PTR [eax],edx
c001f2bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2c1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f2c4:	8d 50 ff             	lea    edx,[eax-0x1]
c001f2c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2cb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f2ce:	83 c4 0c             	add    esp,0xc
c001f2d1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f2d2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f2d2:	83 ec 0c             	sub    esp,0xc
c001f2d5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f2da:	75 10                	jne    c001f2ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001f2dc:	83 ec 0c             	sub    esp,0xc
c001f2df:	68 d8 0b 02 c0       	push   0xc0020bd8
c001f2e4:	e8 35 5f ff ff       	call   c001521e <Krnl::panic(char const*)>
c001f2e9:	83 c4 10             	add    esp,0x10
c001f2ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f2f2:	85 c0                	test   eax,eax
c001f2f4:	74 34                	je     c001f32a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001f2f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f2fd:	85 c0                	test   eax,eax
c001f2ff:	74 29                	je     c001f32a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001f301:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f305:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f308:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f30c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f30f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f313:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f317:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f31a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f31e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f321:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f328:	eb 65                	jmp    c001f38f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001f32a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f32e:	8b 00                	mov    eax,DWORD PTR [eax]
c001f330:	85 c0                	test   eax,eax
c001f332:	75 4b                	jne    c001f37f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001f334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f338:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f33b:	85 c0                	test   eax,eax
c001f33d:	75 40                	jne    c001f37f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001f33f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f343:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f347:	89 10                	mov    DWORD PTR [eax],edx
c001f349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f34d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f351:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f358:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f35b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f366:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f369:	85 c0                	test   eax,eax
c001f36b:	74 22                	je     c001f38f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001f36d:	83 ec 0c             	sub    esp,0xc
c001f370:	68 fa 0b 02 c0       	push   0xc0020bfa
c001f375:	e8 a4 5e ff ff       	call   c001521e <Krnl::panic(char const*)>
c001f37a:	83 c4 10             	add    esp,0x10
c001f37d:	eb 10                	jmp    c001f38f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001f37f:	83 ec 0c             	sub    esp,0xc
c001f382:	68 04 0c 02 c0       	push   0xc0020c04
c001f387:	e8 92 5e ff ff       	call   c001521e <Krnl::panic(char const*)>
c001f38c:	83 c4 10             	add    esp,0x10
c001f38f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f393:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f396:	8d 50 01             	lea    edx,[eax+0x1]
c001f399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f39d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f3a0:	90                   	nop
c001f3a1:	83 c4 0c             	add    esp,0xc
c001f3a4:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f3a6 <ACPI::~ACPI()>:
c001f3a6:	83 ec 0c             	sub    esp,0xc
c001f3a9:	ba 50 1a 02 c0       	mov    edx,0xc0021a50
c001f3ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3b2:	89 10                	mov    DWORD PTR [eax],edx
c001f3b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3b8:	83 ec 0c             	sub    esp,0xc
c001f3bb:	50                   	push   eax
c001f3bc:	e8 0b 10 ff ff       	call   c00103cc <Device::~Device()>
c001f3c1:	83 c4 10             	add    esp,0x10
c001f3c4:	90                   	nop
c001f3c5:	83 c4 0c             	add    esp,0xc
c001f3c8:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f3ca <ACPI::~ACPI()>:
c001f3ca:	83 ec 0c             	sub    esp,0xc
c001f3cd:	83 ec 0c             	sub    esp,0xc
c001f3d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3d4:	e8 cd ff ff ff       	call   c001f3a6 <ACPI::~ACPI()>
c001f3d9:	83 c4 10             	add    esp,0x10
c001f3dc:	83 ec 08             	sub    esp,0x8
c001f3df:	68 68 22 00 00       	push   0x2268
c001f3e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3e8:	e8 52 fc fe ff       	call   c000f03f <operator delete(void*, unsigned long)>
c001f3ed:	83 c4 10             	add    esp,0x10
c001f3f0:	83 c4 0c             	add    esp,0xc
c001f3f3:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001f3f4 <CPU::~CPU()>:
c001f3f4:	83 ec 0c             	sub    esp,0xc
c001f3f7:	ba 40 1e 02 c0       	mov    edx,0xc0021e40
c001f3fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f400:	89 10                	mov    DWORD PTR [eax],edx
c001f402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f406:	83 ec 0c             	sub    esp,0xc
c001f409:	50                   	push   eax
c001f40a:	e8 bd 0f ff ff       	call   c00103cc <Device::~Device()>
c001f40f:	83 c4 10             	add    esp,0x10
c001f412:	90                   	nop
c001f413:	83 c4 0c             	add    esp,0xc
c001f416:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001f418 <CPU::~CPU()>:
c001f418:	83 ec 0c             	sub    esp,0xc
c001f41b:	83 ec 0c             	sub    esp,0xc
c001f41e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f422:	e8 cd ff ff ff       	call   c001f3f4 <CPU::~CPU()>
c001f427:	83 c4 10             	add    esp,0x10
c001f42a:	83 ec 08             	sub    esp,0x8
c001f42d:	68 98 11 00 00       	push   0x1198
c001f432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f436:	e8 04 fc fe ff       	call   c000f03f <operator delete(void*, unsigned long)>
c001f43b:	83 c4 10             	add    esp,0x10
c001f43e:	83 c4 0c             	add    esp,0xc
c001f441:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001f442 <CPU::readCR4()>:
c001f442:	83 ec 10             	sub    esp,0x10
c001f445:	0f 20 e0             	mov    eax,cr4
c001f448:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f44c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f450:	83 c4 10             	add    esp,0x10
c001f453:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001f454 <CPU::writeDR7(unsigned long)>:
c001f454:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f458:	0f 23 f8             	mov    db7,eax
c001f45b:	90                   	nop
c001f45c:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001f45d <CPU::writeCR4(unsigned long)>:
c001f45d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f461:	0f 22 e0             	mov    cr4,eax
c001f464:	90                   	nop
c001f465:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001f466 <CPU::readCR2()>:
c001f466:	83 ec 10             	sub    esp,0x10
c001f469:	0f 20 d0             	mov    eax,cr2
c001f46c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f470:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f474:	83 c4 10             	add    esp,0x10
c001f477:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001f478 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001f478:	90                   	nop
c001f479:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001f47a <ThreadControlBlock::ThreadControlBlock()>:
c001f47a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f47e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f485:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f489:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001f490:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f494:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001f49b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f49f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001f4a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4aa:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f4ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4b2:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001f4b6:	90                   	nop
c001f4b7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001f4b8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001f4b8:	83 ec 0c             	sub    esp,0xc
c001f4bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f4c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f4d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4d4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f4db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f4e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f4f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4f4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f4fb:	83 ec 0c             	sub    esp,0xc
c001f4fe:	68 bd 0b 02 c0       	push   0xc0020bbd
c001f503:	e8 17 fc fe ff       	call   c000f11f <Dbg::kprintf(char const*, ...)>
c001f508:	83 c4 10             	add    esp,0x10
c001f50b:	90                   	nop
c001f50c:	83 c4 0c             	add    esp,0xc
c001f50f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001f510 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001f510:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f514:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f517:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001f518 <PCI::~PCI()>:
c001f518:	83 ec 0c             	sub    esp,0xc
c001f51b:	ba 18 2b 02 c0       	mov    edx,0xc0022b18
c001f520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f524:	89 10                	mov    DWORD PTR [eax],edx
c001f526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f52a:	83 ec 0c             	sub    esp,0xc
c001f52d:	50                   	push   eax
c001f52e:	e8 a9 08 ff ff       	call   c000fddc <Bus::~Bus()>
c001f533:	83 c4 10             	add    esp,0x10
c001f536:	90                   	nop
c001f537:	83 c4 0c             	add    esp,0xc
c001f53a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001f53c <PCI::~PCI()>:
c001f53c:	83 ec 0c             	sub    esp,0xc
c001f53f:	83 ec 0c             	sub    esp,0xc
c001f542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f546:	e8 cd ff ff ff       	call   c001f518 <PCI::~PCI()>
c001f54b:	83 c4 10             	add    esp,0x10
c001f54e:	83 ec 08             	sub    esp,0x8
c001f551:	68 58 01 00 00       	push   0x158
c001f556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f55a:	e8 e0 fa fe ff       	call   c000f03f <operator delete(void*, unsigned long)>
c001f55f:	83 c4 10             	add    esp,0x10
c001f562:	83 c4 0c             	add    esp,0xc
c001f565:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f566 <IDE::~IDE()>:
c001f566:	83 ec 0c             	sub    esp,0xc
c001f569:	ba 7c 2d 02 c0       	mov    edx,0xc0022d7c
c001f56e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f572:	89 10                	mov    DWORD PTR [eax],edx
c001f574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f578:	83 ec 0c             	sub    esp,0xc
c001f57b:	50                   	push   eax
c001f57c:	e8 61 13 ff ff       	call   c00108e2 <HardDiskController::~HardDiskController()>
c001f581:	83 c4 10             	add    esp,0x10
c001f584:	90                   	nop
c001f585:	83 c4 0c             	add    esp,0xc
c001f588:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f58a <IDE::~IDE()>:
c001f58a:	83 ec 0c             	sub    esp,0xc
c001f58d:	83 ec 0c             	sub    esp,0xc
c001f590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f594:	e8 cd ff ff ff       	call   c001f566 <IDE::~IDE()>
c001f599:	83 c4 10             	add    esp,0x10
c001f59c:	83 ec 08             	sub    esp,0x8
c001f59f:	68 70 02 00 00       	push   0x270
c001f5a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5a8:	e8 92 fa fe ff       	call   c000f03f <operator delete(void*, unsigned long)>
c001f5ad:	83 c4 10             	add    esp,0x10
c001f5b0:	83 c4 0c             	add    esp,0xc
c001f5b3:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f5b4 <ATA::~ATA()>:
c001f5b4:	83 ec 0c             	sub    esp,0xc
c001f5b7:	ba cc 2d 02 c0       	mov    edx,0xc0022dcc
c001f5bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5c0:	89 10                	mov    DWORD PTR [eax],edx
c001f5c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5c6:	83 ec 0c             	sub    esp,0xc
c001f5c9:	50                   	push   eax
c001f5ca:	e8 f1 13 ff ff       	call   c00109c0 <PhysicalDisk::~PhysicalDisk()>
c001f5cf:	83 c4 10             	add    esp,0x10
c001f5d2:	90                   	nop
c001f5d3:	83 c4 0c             	add    esp,0xc
c001f5d6:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f5d8 <ATA::~ATA()>:
c001f5d8:	83 ec 0c             	sub    esp,0xc
c001f5db:	83 ec 0c             	sub    esp,0xc
c001f5de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5e2:	e8 cd ff ff ff       	call   c001f5b4 <ATA::~ATA()>
c001f5e7:	83 c4 10             	add    esp,0x10
c001f5ea:	83 ec 08             	sub    esp,0x8
c001f5ed:	68 7c 01 00 00       	push   0x17c
c001f5f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5f6:	e8 44 fa fe ff       	call   c000f03f <operator delete(void*, unsigned long)>
c001f5fb:	83 c4 10             	add    esp,0x10
c001f5fe:	83 c4 0c             	add    esp,0xc
c001f601:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f602 <ATAPI::~ATAPI()>:
c001f602:	83 ec 0c             	sub    esp,0xc
c001f605:	ba 38 2e 02 c0       	mov    edx,0xc0022e38
c001f60a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f60e:	89 10                	mov    DWORD PTR [eax],edx
c001f610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f614:	83 ec 0c             	sub    esp,0xc
c001f617:	50                   	push   eax
c001f618:	e8 a3 13 ff ff       	call   c00109c0 <PhysicalDisk::~PhysicalDisk()>
c001f61d:	83 c4 10             	add    esp,0x10
c001f620:	90                   	nop
c001f621:	83 c4 0c             	add    esp,0xc
c001f624:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f626 <ATAPI::~ATAPI()>:
c001f626:	83 ec 0c             	sub    esp,0xc
c001f629:	83 ec 0c             	sub    esp,0xc
c001f62c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f630:	e8 cd ff ff ff       	call   c001f602 <ATAPI::~ATAPI()>
c001f635:	83 c4 10             	add    esp,0x10
c001f638:	83 ec 08             	sub    esp,0x8
c001f63b:	68 80 01 00 00       	push   0x180
c001f640:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f644:	e8 f6 f9 fe ff       	call   c000f03f <operator delete(void*, unsigned long)>
c001f649:	83 c4 10             	add    esp,0x10
c001f64c:	83 c4 0c             	add    esp,0xc
c001f64f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001f650 <AVX::~AVX()>:
c001f650:	83 ec 0c             	sub    esp,0xc
c001f653:	ba 74 2e 02 c0       	mov    edx,0xc0022e74
c001f658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f65c:	89 10                	mov    DWORD PTR [eax],edx
c001f65e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f662:	83 ec 0c             	sub    esp,0xc
c001f665:	50                   	push   eax
c001f666:	e8 d9 13 ff ff       	call   c0010a44 <FPU::~FPU()>
c001f66b:	83 c4 10             	add    esp,0x10
c001f66e:	90                   	nop
c001f66f:	83 c4 0c             	add    esp,0xc
c001f672:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001f674 <AVX::~AVX()>:
c001f674:	83 ec 0c             	sub    esp,0xc
c001f677:	83 ec 0c             	sub    esp,0xc
c001f67a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f67e:	e8 cd ff ff ff       	call   c001f650 <AVX::~AVX()>
c001f683:	83 c4 10             	add    esp,0x10
c001f686:	83 ec 08             	sub    esp,0x8
c001f689:	68 58 01 00 00       	push   0x158
c001f68e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f692:	e8 a8 f9 fe ff       	call   c000f03f <operator delete(void*, unsigned long)>
c001f697:	83 c4 10             	add    esp,0x10
c001f69a:	83 c4 0c             	add    esp,0xc
c001f69d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001f69e <MMX::~MMX()>:
c001f69e:	83 ec 0c             	sub    esp,0xc
c001f6a1:	ba b4 2e 02 c0       	mov    edx,0xc0022eb4
c001f6a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6aa:	89 10                	mov    DWORD PTR [eax],edx
c001f6ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6b0:	83 ec 0c             	sub    esp,0xc
c001f6b3:	50                   	push   eax
c001f6b4:	e8 8b 13 ff ff       	call   c0010a44 <FPU::~FPU()>
c001f6b9:	83 c4 10             	add    esp,0x10
c001f6bc:	90                   	nop
c001f6bd:	83 c4 0c             	add    esp,0xc
c001f6c0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001f6c2 <MMX::~MMX()>:
c001f6c2:	83 ec 0c             	sub    esp,0xc
c001f6c5:	83 ec 0c             	sub    esp,0xc
c001f6c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6cc:	e8 cd ff ff ff       	call   c001f69e <MMX::~MMX()>
c001f6d1:	83 c4 10             	add    esp,0x10
c001f6d4:	83 ec 08             	sub    esp,0x8
c001f6d7:	68 58 01 00 00       	push   0x158
c001f6dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6e0:	e8 5a f9 fe ff       	call   c000f03f <operator delete(void*, unsigned long)>
c001f6e5:	83 c4 10             	add    esp,0x10
c001f6e8:	83 c4 0c             	add    esp,0xc
c001f6eb:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001f6ec <SSE::~SSE()>:
c001f6ec:	83 ec 0c             	sub    esp,0xc
c001f6ef:	ba f4 2e 02 c0       	mov    edx,0xc0022ef4
c001f6f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6f8:	89 10                	mov    DWORD PTR [eax],edx
c001f6fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6fe:	83 ec 0c             	sub    esp,0xc
c001f701:	50                   	push   eax
c001f702:	e8 3d 13 ff ff       	call   c0010a44 <FPU::~FPU()>
c001f707:	83 c4 10             	add    esp,0x10
c001f70a:	90                   	nop
c001f70b:	83 c4 0c             	add    esp,0xc
c001f70e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001f710 <SSE::~SSE()>:
c001f710:	83 ec 0c             	sub    esp,0xc
c001f713:	83 ec 0c             	sub    esp,0xc
c001f716:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f71a:	e8 cd ff ff ff       	call   c001f6ec <SSE::~SSE()>
c001f71f:	83 c4 10             	add    esp,0x10
c001f722:	83 ec 08             	sub    esp,0x8
c001f725:	68 58 01 00 00       	push   0x158
c001f72a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f72e:	e8 0c f9 fe ff       	call   c000f03f <operator delete(void*, unsigned long)>
c001f733:	83 c4 10             	add    esp,0x10
c001f736:	83 c4 0c             	add    esp,0xc
c001f739:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001f73a <x87::~x87()>:
c001f73a:	83 ec 0c             	sub    esp,0xc
c001f73d:	ba 34 2f 02 c0       	mov    edx,0xc0022f34
c001f742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f746:	89 10                	mov    DWORD PTR [eax],edx
c001f748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f74c:	83 ec 0c             	sub    esp,0xc
c001f74f:	50                   	push   eax
c001f750:	e8 ef 12 ff ff       	call   c0010a44 <FPU::~FPU()>
c001f755:	83 c4 10             	add    esp,0x10
c001f758:	90                   	nop
c001f759:	83 c4 0c             	add    esp,0xc
c001f75c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001f75e <x87::~x87()>:
c001f75e:	83 ec 0c             	sub    esp,0xc
c001f761:	83 ec 0c             	sub    esp,0xc
c001f764:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f768:	e8 cd ff ff ff       	call   c001f73a <x87::~x87()>
c001f76d:	83 c4 10             	add    esp,0x10
c001f770:	83 ec 08             	sub    esp,0x8
c001f773:	68 58 01 00 00       	push   0x158
c001f778:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f77c:	e8 be f8 fe ff       	call   c000f03f <operator delete(void*, unsigned long)>
c001f781:	83 c4 10             	add    esp,0x10
c001f784:	83 c4 0c             	add    esp,0xc
c001f787:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f788 <IOAPIC::~IOAPIC()>:
c001f788:	83 ec 0c             	sub    esp,0xc
c001f78b:	ba 8c 30 02 c0       	mov    edx,0xc002308c
c001f790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f794:	89 10                	mov    DWORD PTR [eax],edx
c001f796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f79a:	83 ec 0c             	sub    esp,0xc
c001f79d:	50                   	push   eax
c001f79e:	e8 29 0c ff ff       	call   c00103cc <Device::~Device()>
c001f7a3:	83 c4 10             	add    esp,0x10
c001f7a6:	90                   	nop
c001f7a7:	83 c4 0c             	add    esp,0xc
c001f7aa:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f7ac <IOAPIC::~IOAPIC()>:
c001f7ac:	83 ec 0c             	sub    esp,0xc
c001f7af:	83 ec 0c             	sub    esp,0xc
c001f7b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7b6:	e8 cd ff ff ff       	call   c001f788 <IOAPIC::~IOAPIC()>
c001f7bb:	83 c4 10             	add    esp,0x10
c001f7be:	83 ec 08             	sub    esp,0x8
c001f7c1:	68 68 01 00 00       	push   0x168
c001f7c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7ca:	e8 70 f8 fe ff       	call   c000f03f <operator delete(void*, unsigned long)>
c001f7cf:	83 c4 10             	add    esp,0x10
c001f7d2:	83 c4 0c             	add    esp,0xc
c001f7d5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001f7d6 <APIC::~APIC()>:
c001f7d6:	83 ec 0c             	sub    esp,0xc
c001f7d9:	ba 44 30 02 c0       	mov    edx,0xc0023044
c001f7de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7e2:	89 10                	mov    DWORD PTR [eax],edx
c001f7e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7e8:	83 ec 0c             	sub    esp,0xc
c001f7eb:	50                   	push   eax
c001f7ec:	e8 11 17 ff ff       	call   c0010f02 <InterruptController::~InterruptController()>
c001f7f1:	83 c4 10             	add    esp,0x10
c001f7f4:	90                   	nop
c001f7f5:	83 c4 0c             	add    esp,0xc
c001f7f8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001f7fa <APIC::~APIC()>:
c001f7fa:	83 ec 0c             	sub    esp,0xc
c001f7fd:	83 ec 0c             	sub    esp,0xc
c001f800:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f804:	e8 cd ff ff ff       	call   c001f7d6 <APIC::~APIC()>
c001f809:	83 c4 10             	add    esp,0x10
c001f80c:	83 ec 08             	sub    esp,0x8
c001f80f:	68 58 21 00 00       	push   0x2158
c001f814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f818:	e8 22 f8 fe ff       	call   c000f03f <operator delete(void*, unsigned long)>
c001f81d:	83 c4 10             	add    esp,0x10
c001f820:	83 c4 0c             	add    esp,0xc
c001f823:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001f824 <PIC::~PIC()>:
c001f824:	83 ec 0c             	sub    esp,0xc
c001f827:	ba dc 30 02 c0       	mov    edx,0xc00230dc
c001f82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f830:	89 10                	mov    DWORD PTR [eax],edx
c001f832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f836:	83 ec 0c             	sub    esp,0xc
c001f839:	50                   	push   eax
c001f83a:	e8 c3 16 ff ff       	call   c0010f02 <InterruptController::~InterruptController()>
c001f83f:	83 c4 10             	add    esp,0x10
c001f842:	90                   	nop
c001f843:	83 c4 0c             	add    esp,0xc
c001f846:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001f848 <PIC::~PIC()>:
c001f848:	83 ec 0c             	sub    esp,0xc
c001f84b:	83 ec 0c             	sub    esp,0xc
c001f84e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f852:	e8 cd ff ff ff       	call   c001f824 <PIC::~PIC()>
c001f857:	83 c4 10             	add    esp,0x10
c001f85a:	83 ec 08             	sub    esp,0x8
c001f85d:	68 58 21 00 00       	push   0x2158
c001f862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f866:	e8 d4 f7 fe ff       	call   c000f03f <operator delete(void*, unsigned long)>
c001f86b:	83 c4 10             	add    esp,0x10
c001f86e:	83 c4 0c             	add    esp,0xc
c001f871:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f872 <APICTimer::~APICTimer()>:
c001f872:	83 ec 0c             	sub    esp,0xc
c001f875:	ba 30 31 02 c0       	mov    edx,0xc0023130
c001f87a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f87e:	89 10                	mov    DWORD PTR [eax],edx
c001f880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f884:	83 ec 0c             	sub    esp,0xc
c001f887:	50                   	push   eax
c001f888:	e8 e1 2c ff ff       	call   c001256e <Timer::~Timer()>
c001f88d:	83 c4 10             	add    esp,0x10
c001f890:	90                   	nop
c001f891:	83 c4 0c             	add    esp,0xc
c001f894:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f896 <APICTimer::~APICTimer()>:
c001f896:	83 ec 0c             	sub    esp,0xc
c001f899:	83 ec 0c             	sub    esp,0xc
c001f89c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8a0:	e8 cd ff ff ff       	call   c001f872 <APICTimer::~APICTimer()>
c001f8a5:	83 c4 10             	add    esp,0x10
c001f8a8:	83 ec 08             	sub    esp,0x8
c001f8ab:	68 60 01 00 00       	push   0x160
c001f8b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8b4:	e8 86 f7 fe ff       	call   c000f03f <operator delete(void*, unsigned long)>
c001f8b9:	83 c4 10             	add    esp,0x10
c001f8bc:	83 c4 0c             	add    esp,0xc
c001f8bf:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f8c0 <PIT::~PIT()>:
c001f8c0:	83 ec 0c             	sub    esp,0xc
c001f8c3:	ba 80 31 02 c0       	mov    edx,0xc0023180
c001f8c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8cc:	89 10                	mov    DWORD PTR [eax],edx
c001f8ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8d2:	83 ec 0c             	sub    esp,0xc
c001f8d5:	50                   	push   eax
c001f8d6:	e8 93 2c ff ff       	call   c001256e <Timer::~Timer()>
c001f8db:	83 c4 10             	add    esp,0x10
c001f8de:	90                   	nop
c001f8df:	83 c4 0c             	add    esp,0xc
c001f8e2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f8e4 <PIT::~PIT()>:
c001f8e4:	83 ec 0c             	sub    esp,0xc
c001f8e7:	83 ec 0c             	sub    esp,0xc
c001f8ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8ee:	e8 cd ff ff ff       	call   c001f8c0 <PIT::~PIT()>
c001f8f3:	83 c4 10             	add    esp,0x10
c001f8f6:	83 ec 08             	sub    esp,0x8
c001f8f9:	68 5c 01 00 00       	push   0x15c
c001f8fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f902:	e8 38 f7 fe ff       	call   c000f03f <operator delete(void*, unsigned long)>
c001f907:	83 c4 10             	add    esp,0x10
c001f90a:	83 c4 0c             	add    esp,0xc
c001f90d:	c3                   	ret    
