
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 ce c2 00 00       	call   c000c2ee <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 43 f7 01 00       	call   c001f768 <_init>
c0000025:	c3                   	ret    
c0000026:	bb f2 02 02 c0       	mov    ebx,0xc00202f2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb fc 02 02 c0    	cmp    ebx,0xc00202fc
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 cc 41 02 c0       	mov    eax,0xc00241cc
c0000049:	3d cc 41 02 c0       	cmp    eax,0xc00241cc
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 cc 41 02 c0       	push   0xc00241cc
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 cc 41 02 c0       	mov    eax,0xc00241cc
c0000075:	2d cc 41 02 c0       	sub    eax,0xc00241cc
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 cc 41 02 c0       	push   0xc00241cc
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 6c 43 02 c0 00 	cmp    BYTE PTR ds:0xc002436c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 04 03 02 c0       	mov    ebx,0xc0020304
c00000bb:	81 eb 00 03 02 c0    	sub    ebx,0xc0020300
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 00 03 02 c0       	mov    esi,0xc0020300
c00000ca:	a1 70 43 02 c0       	mov    eax,ds:0xc0024370
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 70 43 02 c0       	mov    ds:0xc0024370,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 70 43 02 c0       	mov    eax,ds:0xc0024370
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 cc 41 02 c0       	push   0xc00241cc
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 6c 43 02 c0 01 	mov    BYTE PTR ds:0xc002436c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 74 43 02 c0       	push   0xc0024374
c000012c:	68 cc 41 02 c0       	push   0xc00241cc
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <voodooXADD>:
c0000150:	55                   	push   ebp
c0000151:	89 e5                	mov    ebp,esp
c0000153:	60                   	pusha  
c0000154:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000157:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000015a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c000015d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0000160:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000163:	89 35 03 02 00 c0    	mov    DWORD PTR ds:0xc0000203,esi
c0000169:	89 25 ff 01 00 c0    	mov    DWORD PTR ds:0xc00001ff,esp
c000016f:	60                   	pusha  
c0000170:	b0 90                	mov    al,0x90
c0000172:	b9 20 00 00 00       	mov    ecx,0x20
c0000177:	bf da 01 00 c0       	mov    edi,0xc00001da
c000017c:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000017e:	61                   	popa   
c000017f:	60                   	pusha  
c0000180:	89 d6                	mov    esi,edx
c0000182:	bf da 01 00 c0       	mov    edi,0xc00001da
c0000187:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000189:	61                   	popa   
c000018a:	60                   	pusha  
c000018b:	89 d6                	mov    esi,edx
c000018d:	bf ea 01 00 c0       	mov    edi,0xc00001ea
c0000192:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000194:	61                   	popa   
c0000195:	c6 83 da 01 00 c0 90 	mov    BYTE PTR [ebx-0x3ffffe26],0x90
c000019c:	80 ab db 01 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffe25],0x3a
c00001a3:	c6 83 ea 01 00 c0 90 	mov    BYTE PTR [ebx-0x3ffffe16],0x90
c00001aa:	80 ab eb 01 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffe15],0xbe
c00001b1:	89 c4                	mov    esp,eax
c00001b3:	81 c4 10 00 00 00    	add    esp,0x10
c00001b9:	5f                   	pop    edi
c00001ba:	5e                   	pop    esi
c00001bb:	5d                   	pop    ebp
c00001bc:	5b                   	pop    ebx
c00001bd:	5b                   	pop    ebx
c00001be:	5a                   	pop    edx
c00001bf:	59                   	pop    ecx
c00001c0:	58                   	pop    eax
c00001c1:	8b 25 03 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000203
c00001c7:	e9 fb ff ff ff       	jmp    c00001c7 <voodooXADD+0x77>
c00001cc:	e9 09 00 00 00       	jmp    c00001da <voodooXADD.helper>

c00001d1 <voodooXADD.finish>:
c00001d1:	8b 25 ff 01 00 c0    	mov    esp,DWORD PTR ds:0xc00001ff
c00001d7:	61                   	popa   
c00001d8:	c9                   	leave  
c00001d9:	c3                   	ret    

c00001da <voodooXADD.helper>:
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	e9 d2 ff ff ff       	jmp    c00001d1 <voodooXADD.finish>

c00001ff <voodooXADD.oldStack>:
c00001ff:	00 00                	add    BYTE PTR [eax],al
	...

c0000203 <voodooXADD.newStack>:
c0000203:	00 00                	add    BYTE PTR [eax],al
	...

c0000207 <doTPAUSE>:
c0000207:	fb                   	sti    
c0000208:	31 c0                	xor    eax,eax
c000020a:	31 d2                	xor    edx,edx
c000020c:	66 0f ae f0          	tpause eax
c0000210:	c3                   	ret    

c0000211 <hasLegacyFPU>:
c0000211:	0f 20 c2             	mov    edx,cr0
c0000214:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c000021a:	0f 22 c2             	mov    cr0,edx
c000021d:	db e3                	fninit 
c000021f:	dd 3d 34 02 00 c0    	fnstsw WORD PTR ds:0xc0000234
c0000225:	31 c0                	xor    eax,eax
c0000227:	66 81 3d 34 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000234,0x0
c0000230:	75 01                	jne    c0000233 <hasLegacyFPU.nofpu>

c0000232 <hasLegacyFPU.hasfpu>:
c0000232:	40                   	inc    eax

c0000233 <hasLegacyFPU.nofpu>:
c0000233:	c3                   	ret    

c0000234 <testword>:
c0000234:	aa                   	stos   BYTE PTR es:[edi],al
c0000235:	55                   	push   ebp

c0000236 <is486>:
c0000236:	0f 09                	wbinvd 
c0000238:	31 c0                	xor    eax,eax
c000023a:	40                   	inc    eax
c000023b:	c3                   	ret    
c000023c:	90                   	nop
c000023d:	90                   	nop
c000023e:	90                   	nop
c000023f:	90                   	nop
c0000240:	90                   	nop
c0000241:	90                   	nop
c0000242:	90                   	nop
c0000243:	90                   	nop
c0000244:	90                   	nop
c0000245:	90                   	nop
c0000246:	90                   	nop
c0000247:	90                   	nop
c0000248:	90                   	nop
c0000249:	90                   	nop
c000024a:	90                   	nop
c000024b:	90                   	nop
c000024c:	90                   	nop
c000024d:	90                   	nop
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	31 c0                	xor    eax,eax
c000026b:	c3                   	ret    

c000026c <goToVM86>:
c000026c:	fa                   	cli    
c000026d:	55                   	push   ebp
c000026e:	89 e5                	mov    ebp,esp
c0000270:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000273:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000276:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000279:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000027c:	25 ff ff 00 00       	and    eax,0xffff
c0000281:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000287:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000028d:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000293:	52                   	push   edx
c0000294:	51                   	push   ecx
c0000295:	68 02 02 02 00       	push   0x20202
c000029a:	53                   	push   ebx
c000029b:	50                   	push   eax
c000029c:	cf                   	iret   

c000029d <goToUsermode>:
c000029d:	2e 0f c3 04 4b       	movnti DWORD PTR cs:[ebx+ecx*2],eax
c00002a2:	fa                   	cli    
c00002a3:	55                   	push   ebp
c00002a4:	89 e5                	mov    ebp,esp
c00002a6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002a9:	66 b8 23 00          	mov    ax,0x23
c00002ad:	66 8e d8             	mov    ds,ax
c00002b0:	66 8e c0             	mov    es,ax
c00002b3:	66 8e e0             	mov    fs,ax
c00002b6:	66 8e e8             	mov    gs,ax
c00002b9:	89 e0                	mov    eax,esp
c00002bb:	68 23 00 00 00       	push   0x23
c00002c0:	50                   	push   eax
c00002c1:	68 02 02 00 00       	push   0x202
c00002c6:	68 1b 00 00 00       	push   0x1b
c00002cb:	53                   	push   ebx
c00002cc:	cf                   	iret   

c00002cd <switchToThreadASMFirstTime>:
c00002cd:	9c                   	pushf  
c00002ce:	fa                   	cli    
c00002cf:	50                   	push   eax
c00002d0:	53                   	push   ebx
c00002d1:	51                   	push   ecx
c00002d2:	52                   	push   edx
c00002d3:	56                   	push   esi
c00002d4:	57                   	push   edi
c00002d5:	55                   	push   ebp
c00002d6:	e9 11 00 00 00       	jmp    c00002ec <commonThreadSwitch>

c00002db <switchToThreadASM>:
c00002db:	9c                   	pushf  
c00002dc:	50                   	push   eax
c00002dd:	53                   	push   ebx
c00002de:	51                   	push   ecx
c00002df:	52                   	push   edx
c00002e0:	56                   	push   esi
c00002e1:	57                   	push   edi
c00002e2:	55                   	push   ebp
c00002e3:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002e9:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002ec <commonThreadSwitch>:
c00002ec:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002f0:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002f6:	8b 06                	mov    eax,DWORD PTR [esi]
c00002f8:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002fb:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002fe:	0f 20 d9             	mov    ecx,cr3
c0000301:	39 c8                	cmp    eax,ecx
c0000303:	74 03                	je     c0000308 <commonThreadSwitch.doneVAS>
c0000305:	0f 22 d8             	mov    cr3,eax

c0000308 <commonThreadSwitch.doneVAS>:
c0000308:	85 d2                	test   edx,edx
c000030a:	74 4e                	je     c000035a <commonThreadSwitch.notFirstTime>
c000030c:	fa                   	cli    
c000030d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000310:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000315:	60                   	pusha  
c0000316:	e8 89 ec 00 00       	call   c000efa4 <mapVASFirstTime>
c000031b:	61                   	popa   
c000031c:	89 c4                	mov    esp,eax
c000031e:	56                   	push   esi
c000031f:	52                   	push   edx
c0000320:	e8 33 83 01 00       	call   c0018658 <changeTSS>
c0000325:	5a                   	pop    edx
c0000326:	5e                   	pop    esi
c0000327:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000032e:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000334:	74 39                	je     c000036f <commonThreadSwitch.cameOffAFork>
c0000336:	5d                   	pop    ebp
c0000337:	5f                   	pop    edi
c0000338:	5e                   	pop    esi
c0000339:	59                   	pop    ecx
c000033a:	59                   	pop    ecx
c000033b:	5b                   	pop    ebx
c000033c:	58                   	pop    eax
c000033d:	81 c4 04 00 00 00    	add    esp,0x4
c0000343:	6a 02                	push   0x2
c0000345:	9d                   	popf   
c0000346:	52                   	push   edx
c0000347:	e8 39 87 01 00       	call   c0018a85 <taskStartupFunction>
c000034c:	5a                   	pop    edx
c000034d:	50                   	push   eax
c000034e:	ff d2                	call   edx
c0000350:	e8 ee 8c 01 00       	call   c0019043 <taskReturned>
c0000355:	e9 fb ff ff ff       	jmp    c0000355 <commonThreadSwitch.doneVAS+0x4d>

c000035a <commonThreadSwitch.notFirstTime>:
c000035a:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000035d:	56                   	push   esi
c000035e:	52                   	push   edx
c000035f:	e8 f4 82 01 00       	call   c0018658 <changeTSS>
c0000364:	5a                   	pop    edx
c0000365:	5e                   	pop    esi
c0000366:	5d                   	pop    ebp
c0000367:	5f                   	pop    edi
c0000368:	5e                   	pop    esi
c0000369:	5a                   	pop    edx
c000036a:	59                   	pop    ecx
c000036b:	5b                   	pop    ebx
c000036c:	58                   	pop    eax
c000036d:	9d                   	popf   
c000036e:	c3                   	ret    

c000036f <commonThreadSwitch.cameOffAFork>:
c000036f:	31 c0                	xor    eax,eax
c0000371:	31 d2                	xor    edx,edx
c0000373:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c0000376:	e9 a2 02 00 00       	jmp    c000061d <offAForkJumpThingy>

c000037b <detectCPUID>:
c000037b:	9c                   	pushf  
c000037c:	9c                   	pushf  
c000037d:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000384:	9d                   	popf   
c0000385:	9c                   	pushf  
c0000386:	58                   	pop    eax
c0000387:	33 04 24             	xor    eax,DWORD PTR [esp]
c000038a:	9d                   	popf   
c000038b:	25 00 00 20 00       	and    eax,0x200000
c0000390:	c3                   	ret    

c0000391 <asmQuickAcquireLock>:
c0000391:	55                   	push   ebp
c0000392:	89 e5                	mov    ebp,esp
c0000394:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000397 <asmQuickAcquireLock.retry>:
c0000397:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000039c:	72 02                	jb     c00003a0 <asmQuickAcquireLock.spin_with_pause>
c000039e:	fa                   	cli    
c000039f:	c3                   	ret    

c00003a0 <asmQuickAcquireLock.spin_with_pause>:
c00003a0:	f3 90                	pause  
c00003a2:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003a8:	75 f6                	jne    c00003a0 <asmQuickAcquireLock.spin_with_pause>
c00003aa:	e9 e8 ff ff ff       	jmp    c0000397 <asmQuickAcquireLock.retry>

c00003af <asmQuickReleaseLock>:
c00003af:	55                   	push   ebp
c00003b0:	89 e5                	mov    ebp,esp
c00003b2:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003b9:	5d                   	pop    ebp
c00003ba:	c3                   	ret    

c00003bb <asmAcquireLock>:
c00003bb:	55                   	push   ebp
c00003bc:	89 e5                	mov    ebp,esp
c00003be:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003c1 <asmAcquireLock.retry>:
c00003c1:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003c6:	72 05                	jb     c00003cd <asmAcquireLock.spin_with_pause>
c00003c8:	9c                   	pushf  
c00003c9:	58                   	pop    eax
c00003ca:	fa                   	cli    
c00003cb:	5d                   	pop    ebp
c00003cc:	c3                   	ret    

c00003cd <asmAcquireLock.spin_with_pause>:
c00003cd:	f3 90                	pause  
c00003cf:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003d5:	75 f6                	jne    c00003cd <asmAcquireLock.spin_with_pause>
c00003d7:	e9 e5 ff ff ff       	jmp    c00003c1 <asmAcquireLock.retry>

c00003dc <asmReleaseLock>:
c00003dc:	55                   	push   ebp
c00003dd:	89 e5                	mov    ebp,esp
c00003df:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003e2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003e5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003eb:	52                   	push   edx
c00003ec:	9d                   	popf   
c00003ed:	5d                   	pop    ebp
c00003ee:	c3                   	ret    

c00003ef <loadGDT>:
c00003ef:	0f 01 15 b0 47 02 c0 	lgdtd  ds:0xc00247b0
c00003f6:	66 b8 10 00          	mov    ax,0x10
c00003fa:	66 8e d8             	mov    ds,ax
c00003fd:	66 8e c0             	mov    es,ax
c0000400:	66 8e e0             	mov    fs,ax
c0000403:	66 8e e8             	mov    gs,ax
c0000406:	66 8e d0             	mov    ss,ax
c0000409:	e9 00 00 00 00       	jmp    c000040e <flush2>

c000040e <flush2>:
c000040e:	c3                   	ret    

c000040f <isr0>:
c000040f:	fa                   	cli    
c0000410:	68 00 00 00 00       	push   0x0
c0000415:	68 00 00 00 00       	push   0x0
c000041a:	e9 a2 01 00 00       	jmp    c00005c1 <int_common_stub>

c000041f <isr1>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 01                	push   0x1
c0000424:	e9 98 01 00 00       	jmp    c00005c1 <int_common_stub>

c0000429 <isr2>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 02                	push   0x2
c000042e:	e9 8e 01 00 00       	jmp    c00005c1 <int_common_stub>

c0000433 <isr3>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 03                	push   0x3
c0000438:	e9 84 01 00 00       	jmp    c00005c1 <int_common_stub>

c000043d <isr4>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 04                	push   0x4
c0000442:	e9 7a 01 00 00       	jmp    c00005c1 <int_common_stub>

c0000447 <isr5>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 05                	push   0x5
c000044c:	e9 70 01 00 00       	jmp    c00005c1 <int_common_stub>

c0000451 <isr6>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 06                	push   0x6
c0000456:	e9 66 01 00 00       	jmp    c00005c1 <int_common_stub>

c000045b <isr7>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 07                	push   0x7
c0000460:	e9 5c 01 00 00       	jmp    c00005c1 <int_common_stub>

c0000465 <isr8>:
c0000465:	fa                   	cli    
c0000466:	6a 08                	push   0x8
c0000468:	e9 54 01 00 00       	jmp    c00005c1 <int_common_stub>

c000046d <isr9>:
c000046d:	fa                   	cli    
c000046e:	6a 00                	push   0x0
c0000470:	6a 09                	push   0x9
c0000472:	e9 4a 01 00 00       	jmp    c00005c1 <int_common_stub>

c0000477 <isr10>:
c0000477:	fa                   	cli    
c0000478:	6a 0a                	push   0xa
c000047a:	e9 42 01 00 00       	jmp    c00005c1 <int_common_stub>

c000047f <isr11>:
c000047f:	fa                   	cli    
c0000480:	6a 0b                	push   0xb
c0000482:	e9 3a 01 00 00       	jmp    c00005c1 <int_common_stub>

c0000487 <isr12>:
c0000487:	fa                   	cli    
c0000488:	6a 0c                	push   0xc
c000048a:	e9 32 01 00 00       	jmp    c00005c1 <int_common_stub>

c000048f <isr13>:
c000048f:	fa                   	cli    
c0000490:	6a 0d                	push   0xd
c0000492:	e9 2a 01 00 00       	jmp    c00005c1 <int_common_stub>

c0000497 <isr14>:
c0000497:	fa                   	cli    
c0000498:	6a 0e                	push   0xe
c000049a:	e9 22 01 00 00       	jmp    c00005c1 <int_common_stub>

c000049f <isr15>:
c000049f:	fa                   	cli    
c00004a0:	6a 00                	push   0x0
c00004a2:	6a 0f                	push   0xf
c00004a4:	e9 18 01 00 00       	jmp    c00005c1 <int_common_stub>

c00004a9 <isr16>:
c00004a9:	fa                   	cli    
c00004aa:	6a 00                	push   0x0
c00004ac:	6a 10                	push   0x10
c00004ae:	e9 0e 01 00 00       	jmp    c00005c1 <int_common_stub>

c00004b3 <isr17>:
c00004b3:	fa                   	cli    
c00004b4:	6a 00                	push   0x0
c00004b6:	6a 11                	push   0x11
c00004b8:	e9 04 01 00 00       	jmp    c00005c1 <int_common_stub>

c00004bd <isr18>:
c00004bd:	fa                   	cli    
c00004be:	6a 00                	push   0x0
c00004c0:	6a 12                	push   0x12
c00004c2:	e9 fa 00 00 00       	jmp    c00005c1 <int_common_stub>

c00004c7 <isr96>:
c00004c7:	fa                   	cli    
c00004c8:	6a 00                	push   0x0
c00004ca:	6a 60                	push   0x60
c00004cc:	e9 20 01 00 00       	jmp    c00005f1 <syscall_common_stub>

c00004d1 <irq0>:
c00004d1:	fa                   	cli    
c00004d2:	6a 00                	push   0x0
c00004d4:	6a 20                	push   0x20
c00004d6:	e9 e6 00 00 00       	jmp    c00005c1 <int_common_stub>

c00004db <irq1>:
c00004db:	fa                   	cli    
c00004dc:	6a 00                	push   0x0
c00004de:	6a 21                	push   0x21
c00004e0:	e9 dc 00 00 00       	jmp    c00005c1 <int_common_stub>

c00004e5 <irq2>:
c00004e5:	fa                   	cli    
c00004e6:	6a 00                	push   0x0
c00004e8:	6a 22                	push   0x22
c00004ea:	e9 d2 00 00 00       	jmp    c00005c1 <int_common_stub>

c00004ef <irq3>:
c00004ef:	fa                   	cli    
c00004f0:	6a 00                	push   0x0
c00004f2:	6a 23                	push   0x23
c00004f4:	e9 c8 00 00 00       	jmp    c00005c1 <int_common_stub>

c00004f9 <irq4>:
c00004f9:	fa                   	cli    
c00004fa:	6a 00                	push   0x0
c00004fc:	6a 24                	push   0x24
c00004fe:	e9 be 00 00 00       	jmp    c00005c1 <int_common_stub>

c0000503 <irq5>:
c0000503:	fa                   	cli    
c0000504:	6a 00                	push   0x0
c0000506:	6a 25                	push   0x25
c0000508:	e9 b4 00 00 00       	jmp    c00005c1 <int_common_stub>

c000050d <irq6>:
c000050d:	fa                   	cli    
c000050e:	6a 00                	push   0x0
c0000510:	6a 26                	push   0x26
c0000512:	e9 aa 00 00 00       	jmp    c00005c1 <int_common_stub>

c0000517 <irq7>:
c0000517:	fa                   	cli    
c0000518:	6a 00                	push   0x0
c000051a:	6a 27                	push   0x27
c000051c:	e9 a0 00 00 00       	jmp    c00005c1 <int_common_stub>

c0000521 <irq8>:
c0000521:	fa                   	cli    
c0000522:	6a 00                	push   0x0
c0000524:	6a 28                	push   0x28
c0000526:	e9 96 00 00 00       	jmp    c00005c1 <int_common_stub>

c000052b <irq9>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 29                	push   0x29
c0000530:	e9 8c 00 00 00       	jmp    c00005c1 <int_common_stub>

c0000535 <irq10>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 2a                	push   0x2a
c000053a:	e9 82 00 00 00       	jmp    c00005c1 <int_common_stub>

c000053f <irq11>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 2b                	push   0x2b
c0000544:	e9 78 00 00 00       	jmp    c00005c1 <int_common_stub>

c0000549 <irq12>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 2c                	push   0x2c
c000054e:	e9 6e 00 00 00       	jmp    c00005c1 <int_common_stub>

c0000553 <irq13>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 2d                	push   0x2d
c0000558:	e9 64 00 00 00       	jmp    c00005c1 <int_common_stub>

c000055d <irq14>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 2e                	push   0x2e
c0000562:	e9 5a 00 00 00       	jmp    c00005c1 <int_common_stub>

c0000567 <irq15>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 2f                	push   0x2f
c000056c:	e9 50 00 00 00       	jmp    c00005c1 <int_common_stub>

c0000571 <irq16>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 30                	push   0x30
c0000576:	e9 46 00 00 00       	jmp    c00005c1 <int_common_stub>

c000057b <irq17>:
c000057b:	fa                   	cli    
c000057c:	6a 00                	push   0x0
c000057e:	6a 31                	push   0x31
c0000580:	e9 3c 00 00 00       	jmp    c00005c1 <int_common_stub>

c0000585 <irq18>:
c0000585:	fa                   	cli    
c0000586:	6a 00                	push   0x0
c0000588:	6a 32                	push   0x32
c000058a:	e9 32 00 00 00       	jmp    c00005c1 <int_common_stub>

c000058f <irq19>:
c000058f:	fa                   	cli    
c0000590:	6a 00                	push   0x0
c0000592:	6a 33                	push   0x33
c0000594:	e9 28 00 00 00       	jmp    c00005c1 <int_common_stub>

c0000599 <irq20>:
c0000599:	fa                   	cli    
c000059a:	6a 00                	push   0x0
c000059c:	6a 34                	push   0x34
c000059e:	e9 1e 00 00 00       	jmp    c00005c1 <int_common_stub>

c00005a3 <irq21>:
c00005a3:	fa                   	cli    
c00005a4:	6a 00                	push   0x0
c00005a6:	6a 35                	push   0x35
c00005a8:	e9 14 00 00 00       	jmp    c00005c1 <int_common_stub>

c00005ad <irq22>:
c00005ad:	fa                   	cli    
c00005ae:	6a 00                	push   0x0
c00005b0:	6a 36                	push   0x36
c00005b2:	e9 0a 00 00 00       	jmp    c00005c1 <int_common_stub>

c00005b7 <irq23>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 37                	push   0x37
c00005bc:	e9 00 00 00 00       	jmp    c00005c1 <int_common_stub>

c00005c1 <int_common_stub>:
c00005c1:	60                   	pusha  
c00005c2:	1e                   	push   ds
c00005c3:	06                   	push   es
c00005c4:	0f a0                	push   fs
c00005c6:	0f a8                	push   gs
c00005c8:	66 b8 10 00          	mov    ax,0x10
c00005cc:	66 8e d8             	mov    ds,ax
c00005cf:	66 8e c0             	mov    es,ax
c00005d2:	66 8e e0             	mov    fs,ax
c00005d5:	66 8e e8             	mov    gs,ax
c00005d8:	89 e1                	mov    ecx,esp
c00005da:	51                   	push   ecx
c00005db:	b9 cd 0e 01 c0       	mov    ecx,0xc0010ecd
c00005e0:	ff d1                	call   ecx
c00005e2:	59                   	pop    ecx
c00005e3:	0f a9                	pop    gs
c00005e5:	0f a1                	pop    fs
c00005e7:	07                   	pop    es
c00005e8:	1f                   	pop    ds
c00005e9:	61                   	popa   
c00005ea:	81 c4 08 00 00 00    	add    esp,0x8
c00005f0:	cf                   	iret   

c00005f1 <syscall_common_stub>:
c00005f1:	60                   	pusha  
c00005f2:	1e                   	push   ds
c00005f3:	06                   	push   es
c00005f4:	0f a0                	push   fs
c00005f6:	0f a8                	push   gs
c00005f8:	66 b8 10 00          	mov    ax,0x10
c00005fc:	66 8e d8             	mov    ds,ax
c00005ff:	66 8e c0             	mov    es,ax
c0000602:	66 8e e0             	mov    fs,ax
c0000605:	66 8e e8             	mov    gs,ax
c0000608:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000060e:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000611:	89 e1                	mov    ecx,esp
c0000613:	51                   	push   ecx
c0000614:	fb                   	sti    
c0000615:	b9 cd 0e 01 c0       	mov    ecx,0xc0010ecd
c000061a:	ff d1                	call   ecx
c000061c:	59                   	pop    ecx

c000061d <offAForkJumpThingy>:
c000061d:	0f a9                	pop    gs
c000061f:	0f a1                	pop    fs
c0000621:	07                   	pop    es
c0000622:	1f                   	pop    ds
c0000623:	61                   	popa   
c0000624:	81 c4 08 00 00 00    	add    esp,0x8
c000062a:	cf                   	iret   

c000062b <memcmp>:
c000062b:	56                   	push   esi
c000062c:	53                   	push   ebx
c000062d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000631:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000635:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000639:	01 d6                	add    esi,edx
c000063b:	39 f2                	cmp    edx,esi
c000063d:	74 0e                	je     c000064d <memcmp+0x22>
c000063f:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000642:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000645:	38 c8                	cmp    al,cl
c0000647:	75 08                	jne    c0000651 <memcmp+0x26>
c0000649:	42                   	inc    edx
c000064a:	43                   	inc    ebx
c000064b:	eb ee                	jmp    c000063b <memcmp+0x10>
c000064d:	31 c0                	xor    eax,eax
c000064f:	eb 02                	jmp    c0000653 <memcmp+0x28>
c0000651:	29 c8                	sub    eax,ecx
c0000653:	5b                   	pop    ebx
c0000654:	5e                   	pop    esi
c0000655:	c3                   	ret    

c0000656 <memmove>:
c0000656:	56                   	push   esi
c0000657:	53                   	push   ebx
c0000658:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000065c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000660:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000664:	39 c8                	cmp    eax,ecx
c0000666:	73 12                	jae    c000067a <memmove+0x24>
c0000668:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000066b:	89 c3                	mov    ebx,eax
c000066d:	39 f1                	cmp    ecx,esi
c000066f:	74 1a                	je     c000068b <memmove+0x35>
c0000671:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000673:	43                   	inc    ebx
c0000674:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000677:	41                   	inc    ecx
c0000678:	eb f3                	jmp    c000066d <memmove+0x17>
c000067a:	76 0f                	jbe    c000068b <memmove+0x35>
c000067c:	85 d2                	test   edx,edx
c000067e:	74 0b                	je     c000068b <memmove+0x35>
c0000680:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c0000684:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c0000688:	4a                   	dec    edx
c0000689:	eb f1                	jmp    c000067c <memmove+0x26>
c000068b:	5b                   	pop    ebx
c000068c:	5e                   	pop    esi
c000068d:	c3                   	ret    

c000068e <memcpy>:
c000068e:	57                   	push   edi
c000068f:	56                   	push   esi
c0000690:	53                   	push   ebx
c0000691:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000699:	89 da                	mov    edx,ebx
c000069b:	89 d9                	mov    ecx,ebx
c000069d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00006a1:	83 e2 fc             	and    edx,0xfffffffc
c00006a4:	c1 e9 02             	shr    ecx,0x2
c00006a7:	89 c7                	mov    edi,eax
c00006a9:	fc                   	cld    
c00006aa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00006ac:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00006af:	01 c2                	add    edx,eax
c00006b1:	01 de                	add    esi,ebx
c00006b3:	39 f1                	cmp    ecx,esi
c00006b5:	74 09                	je     c00006c0 <memcpy+0x32>
c00006b7:	8a 19                	mov    bl,BYTE PTR [ecx]
c00006b9:	42                   	inc    edx
c00006ba:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006bd:	41                   	inc    ecx
c00006be:	eb f3                	jmp    c00006b3 <memcpy+0x25>
c00006c0:	5b                   	pop    ebx
c00006c1:	5e                   	pop    esi
c00006c2:	5f                   	pop    edi
c00006c3:	c3                   	ret    

c00006c4 <memset>:
c00006c4:	53                   	push   ebx
c00006c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006cd:	01 c1                	add    ecx,eax
c00006cf:	89 c2                	mov    edx,eax
c00006d1:	39 ca                	cmp    edx,ecx
c00006d3:	74 0a                	je     c00006df <memset+0x1b>
c00006d5:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006d9:	42                   	inc    edx
c00006da:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006dd:	eb f2                	jmp    c00006d1 <memset+0xd>
c00006df:	5b                   	pop    ebx
c00006e0:	c3                   	ret    

c00006e1 <strlen>:
c00006e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006e5:	31 c0                	xor    eax,eax
c00006e7:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006eb:	74 03                	je     c00006f0 <strlen+0xf>
c00006ed:	40                   	inc    eax
c00006ee:	eb f7                	jmp    c00006e7 <strlen+0x6>
c00006f0:	c3                   	ret    

c00006f1 <strpbrk>:
c00006f1:	53                   	push   ebx
c00006f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006f6:	8a 08                	mov    cl,BYTE PTR [eax]
c00006f8:	84 c9                	test   cl,cl
c00006fa:	74 14                	je     c0000710 <strpbrk+0x1f>
c00006fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000700:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000702:	84 db                	test   bl,bl
c0000704:	74 07                	je     c000070d <strpbrk+0x1c>
c0000706:	38 cb                	cmp    bl,cl
c0000708:	74 08                	je     c0000712 <strpbrk+0x21>
c000070a:	42                   	inc    edx
c000070b:	eb f3                	jmp    c0000700 <strpbrk+0xf>
c000070d:	40                   	inc    eax
c000070e:	eb e6                	jmp    c00006f6 <strpbrk+0x5>
c0000710:	31 c0                	xor    eax,eax
c0000712:	5b                   	pop    ebx
c0000713:	c3                   	ret    

c0000714 <strtok>:
c0000714:	56                   	push   esi
c0000715:	53                   	push   ebx
c0000716:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000071a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000071e:	85 db                	test   ebx,ebx
c0000720:	75 0e                	jne    c0000730 <strtok+0x1c>
c0000722:	8b 1d 8c 43 02 c0    	mov    ebx,DWORD PTR ds:0xc002438c
c0000728:	85 db                	test   ebx,ebx
c000072a:	75 04                	jne    c0000730 <strtok+0x1c>
c000072c:	31 db                	xor    ebx,ebx
c000072e:	eb 2e                	jmp    c000075e <strtok+0x4a>
c0000730:	56                   	push   esi
c0000731:	53                   	push   ebx
c0000732:	e8 ba ff ff ff       	call   c00006f1 <strpbrk>
c0000737:	a3 8c 43 02 c0       	mov    ds:0xc002438c,eax
c000073c:	5a                   	pop    edx
c000073d:	a1 8c 43 02 c0       	mov    eax,ds:0xc002438c
c0000742:	59                   	pop    ecx
c0000743:	39 d8                	cmp    eax,ebx
c0000745:	75 07                	jne    c000074e <strtok+0x3a>
c0000747:	43                   	inc    ebx
c0000748:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c000074c:	eb e2                	jmp    c0000730 <strtok+0x1c>
c000074e:	85 c0                	test   eax,eax
c0000750:	74 da                	je     c000072c <strtok+0x18>
c0000752:	8d 50 01             	lea    edx,[eax+0x1]
c0000755:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000758:	89 15 8c 43 02 c0    	mov    DWORD PTR ds:0xc002438c,edx
c000075e:	89 d8                	mov    eax,ebx
c0000760:	5b                   	pop    ebx
c0000761:	5e                   	pop    esi
c0000762:	c3                   	ret    

c0000763 <strcpy>:
c0000763:	53                   	push   ebx
c0000764:	31 d2                	xor    edx,edx
c0000766:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000076a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000076e:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000771:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0000774:	84 c9                	test   cl,cl
c0000776:	74 06                	je     c000077e <strcpy+0x1b>
c0000778:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c000077b:	42                   	inc    edx
c000077c:	eb ec                	jmp    c000076a <strcpy+0x7>
c000077e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000781:	5b                   	pop    ebx
c0000782:	c3                   	ret    

c0000783 <strncpy>:
c0000783:	56                   	push   esi
c0000784:	53                   	push   ebx
c0000785:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000789:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000791:	89 c3                	mov    ebx,eax
c0000793:	85 c9                	test   ecx,ecx
c0000795:	74 1a                	je     c00007b1 <strncpy+0x2e>
c0000797:	46                   	inc    esi
c0000798:	43                   	inc    ebx
c0000799:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c000079c:	49                   	dec    ecx
c000079d:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00007a0:	84 d2                	test   dl,dl
c00007a2:	75 ef                	jne    c0000793 <strncpy+0x10>
c00007a4:	31 d2                	xor    edx,edx
c00007a6:	39 d1                	cmp    ecx,edx
c00007a8:	74 07                	je     c00007b1 <strncpy+0x2e>
c00007aa:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007ae:	42                   	inc    edx
c00007af:	eb f5                	jmp    c00007a6 <strncpy+0x23>
c00007b1:	5b                   	pop    ebx
c00007b2:	5e                   	pop    esi
c00007b3:	c3                   	ret    

c00007b4 <strcmp>:
c00007b4:	31 c9                	xor    ecx,ecx
c00007b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007be:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007c2:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007c6:	38 d0                	cmp    al,dl
c00007c8:	75 08                	jne    c00007d2 <strcmp+0x1e>
c00007ca:	41                   	inc    ecx
c00007cb:	84 c0                	test   al,al
c00007cd:	75 e7                	jne    c00007b6 <strcmp+0x2>
c00007cf:	31 c0                	xor    eax,eax
c00007d1:	c3                   	ret    
c00007d2:	29 d0                	sub    eax,edx
c00007d4:	c3                   	ret    

c00007d5 <strchr>:
c00007d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007d9:	8a 10                	mov    dl,BYTE PTR [eax]
c00007db:	84 d2                	test   dl,dl
c00007dd:	74 09                	je     c00007e8 <strchr+0x13>
c00007df:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007e3:	74 05                	je     c00007ea <strchr+0x15>
c00007e5:	40                   	inc    eax
c00007e6:	eb f1                	jmp    c00007d9 <strchr+0x4>
c00007e8:	31 c0                	xor    eax,eax
c00007ea:	c3                   	ret    

c00007eb <strncmp>:
c00007eb:	56                   	push   esi
c00007ec:	53                   	push   ebx
c00007ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007f9:	01 d6                	add    esi,edx
c00007fb:	39 f2                	cmp    edx,esi
c00007fd:	74 12                	je     c0000811 <strncmp+0x26>
c00007ff:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000802:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000805:	38 c8                	cmp    al,cl
c0000807:	75 0c                	jne    c0000815 <strncmp+0x2a>
c0000809:	42                   	inc    edx
c000080a:	84 c0                	test   al,al
c000080c:	74 03                	je     c0000811 <strncmp+0x26>
c000080e:	43                   	inc    ebx
c000080f:	eb ea                	jmp    c00007fb <strncmp+0x10>
c0000811:	31 c0                	xor    eax,eax
c0000813:	eb 02                	jmp    c0000817 <strncmp+0x2c>
c0000815:	29 c8                	sub    eax,ecx
c0000817:	5b                   	pop    ebx
c0000818:	5e                   	pop    esi
c0000819:	c3                   	ret    

c000081a <strcat>:
c000081a:	53                   	push   ebx
c000081b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000081f:	89 c1                	mov    ecx,eax
c0000821:	8d 51 01             	lea    edx,[ecx+0x1]
c0000824:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000828:	74 04                	je     c000082e <strcat+0x14>
c000082a:	89 d1                	mov    ecx,edx
c000082c:	eb f3                	jmp    c0000821 <strcat+0x7>
c000082e:	31 d2                	xor    edx,edx
c0000830:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000834:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c0000837:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000083a:	42                   	inc    edx
c000083b:	84 db                	test   bl,bl
c000083d:	75 f1                	jne    c0000830 <strcat+0x16>
c000083f:	5b                   	pop    ebx
c0000840:	c3                   	ret    

c0000841 <strncat>:
c0000841:	56                   	push   esi
c0000842:	53                   	push   ebx
c0000843:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000847:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000084b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000084f:	89 c2                	mov    edx,eax
c0000851:	85 db                	test   ebx,ebx
c0000853:	74 23                	je     c0000878 <strncat+0x37>
c0000855:	8d 72 01             	lea    esi,[edx+0x1]
c0000858:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c000085c:	74 04                	je     c0000862 <strncat+0x21>
c000085e:	89 f2                	mov    edx,esi
c0000860:	eb f3                	jmp    c0000855 <strncat+0x14>
c0000862:	8d 34 19             	lea    esi,[ecx+ebx*1]
c0000865:	41                   	inc    ecx
c0000866:	42                   	inc    edx
c0000867:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c000086a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000086d:	84 db                	test   bl,bl
c000086f:	74 07                	je     c0000878 <strncat+0x37>
c0000871:	39 f1                	cmp    ecx,esi
c0000873:	75 f0                	jne    c0000865 <strncat+0x24>
c0000875:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000878:	5b                   	pop    ebx
c0000879:	5e                   	pop    esi
c000087a:	c3                   	ret    

c000087b <strstr>:
c000087b:	57                   	push   edi
c000087c:	56                   	push   esi
c000087d:	53                   	push   ebx
c000087e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000882:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000886:	57                   	push   edi
c0000887:	e8 55 fe ff ff       	call   c00006e1 <strlen>
c000088c:	59                   	pop    ecx
c000088d:	89 c6                	mov    esi,eax
c000088f:	85 c0                	test   eax,eax
c0000891:	74 1f                	je     c00008b2 <strstr+0x37>
c0000893:	53                   	push   ebx
c0000894:	e8 48 fe ff ff       	call   c00006e1 <strlen>
c0000899:	5a                   	pop    edx
c000089a:	39 f0                	cmp    eax,esi
c000089c:	72 12                	jb     c00008b0 <strstr+0x35>
c000089e:	56                   	push   esi
c000089f:	57                   	push   edi
c00008a0:	53                   	push   ebx
c00008a1:	e8 85 fd ff ff       	call   c000062b <memcmp>
c00008a6:	83 c4 0c             	add    esp,0xc
c00008a9:	85 c0                	test   eax,eax
c00008ab:	74 05                	je     c00008b2 <strstr+0x37>
c00008ad:	43                   	inc    ebx
c00008ae:	eb e3                	jmp    c0000893 <strstr+0x18>
c00008b0:	31 db                	xor    ebx,ebx
c00008b2:	89 d8                	mov    eax,ebx
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	5f                   	pop    edi
c00008b7:	c3                   	ret    

c00008b8 <toupper>:
c00008b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008bc:	0f b6 d0             	movzx  edx,al
c00008bf:	f6 82 20 03 02 c0 02 	test   BYTE PTR [edx-0x3ffdfce0],0x2
c00008c6:	74 03                	je     c00008cb <toupper+0x13>
c00008c8:	83 e8 20             	sub    eax,0x20
c00008cb:	c3                   	ret    

c00008cc <tolower>:
c00008cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d0:	0f b6 d0             	movzx  edx,al
c00008d3:	f6 82 20 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfce0],0x1
c00008da:	74 03                	je     c00008df <tolower+0x13>
c00008dc:	83 c0 20             	add    eax,0x20
c00008df:	c3                   	ret    

c00008e0 <simple_strtoul>:
c00008e0:	55                   	push   ebp
c00008e1:	57                   	push   edi
c00008e2:	56                   	push   esi
c00008e3:	53                   	push   ebx
c00008e4:	83 ec 08             	sub    esp,0x8
c00008e7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008eb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ef:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008f2:	f6 82 20 03 02 c0 08 	test   BYTE PTR [edx-0x3ffdfce0],0x8
c00008f9:	74 03                	je     c00008fe <simple_strtoul+0x1e>
c00008fb:	41                   	inc    ecx
c00008fc:	eb f1                	jmp    c00008ef <simple_strtoul+0xf>
c00008fe:	80 fa 09             	cmp    dl,0x9
c0000901:	74 f8                	je     c00008fb <simple_strtoul+0x1b>
c0000903:	80 fa 2d             	cmp    dl,0x2d
c0000906:	75 0b                	jne    c0000913 <simple_strtoul+0x33>
c0000908:	41                   	inc    ecx
c0000909:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000911:	eb 0e                	jmp    c0000921 <simple_strtoul+0x41>
c0000913:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000091b:	80 fa 2b             	cmp    dl,0x2b
c000091e:	75 01                	jne    c0000921 <simple_strtoul+0x41>
c0000920:	41                   	inc    ecx
c0000921:	85 f6                	test   esi,esi
c0000923:	75 22                	jne    c0000947 <simple_strtoul+0x67>
c0000925:	be 0a 00 00 00       	mov    esi,0xa
c000092a:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000092d:	75 5a                	jne    c0000989 <simple_strtoul+0xa9>
c000092f:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000933:	50                   	push   eax
c0000934:	e8 93 ff ff ff       	call   c00008cc <tolower>
c0000939:	5a                   	pop    edx
c000093a:	83 f8 78             	cmp    eax,0x78
c000093d:	74 03                	je     c0000942 <simple_strtoul+0x62>
c000093f:	41                   	inc    ecx
c0000940:	eb 16                	jmp    c0000958 <simple_strtoul+0x78>
c0000942:	83 c1 02             	add    ecx,0x2
c0000945:	eb 22                	jmp    c0000969 <simple_strtoul+0x89>
c0000947:	8d 46 fe             	lea    eax,[esi-0x2]
c000094a:	83 f8 22             	cmp    eax,0x22
c000094d:	0f 87 ab 00 00 00    	ja     c00009fe <simple_strtoul+0x11e>
c0000953:	83 fe 08             	cmp    esi,0x8
c0000956:	75 0c                	jne    c0000964 <simple_strtoul+0x84>
c0000958:	be 08 00 00 00       	mov    esi,0x8
c000095d:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000960:	75 27                	jne    c0000989 <simple_strtoul+0xa9>
c0000962:	eb 1f                	jmp    c0000983 <simple_strtoul+0xa3>
c0000964:	83 fe 10             	cmp    esi,0x10
c0000967:	75 20                	jne    c0000989 <simple_strtoul+0xa9>
c0000969:	be 10 00 00 00       	mov    esi,0x10
c000096e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000971:	75 16                	jne    c0000989 <simple_strtoul+0xa9>
c0000973:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000977:	50                   	push   eax
c0000978:	e8 4f ff ff ff       	call   c00008cc <tolower>
c000097d:	5d                   	pop    ebp
c000097e:	83 f8 78             	cmp    eax,0x78
c0000981:	74 03                	je     c0000986 <simple_strtoul+0xa6>
c0000983:	41                   	inc    ecx
c0000984:	eb 03                	jmp    c0000989 <simple_strtoul+0xa9>
c0000986:	83 c1 02             	add    ecx,0x2
c0000989:	31 ed                	xor    ebp,ebp
c000098b:	31 db                	xor    ebx,ebx
c000098d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000994:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000996:	84 d2                	test   dl,dl
c0000998:	74 27                	je     c00009c1 <simple_strtoul+0xe1>
c000099a:	0f b6 fa             	movzx  edi,dl
c000099d:	f6 87 20 03 02 c0 04 	test   BYTE PTR [edi-0x3ffdfce0],0x4
c00009a4:	74 05                	je     c00009ab <simple_strtoul+0xcb>
c00009a6:	83 ef 30             	sub    edi,0x30
c00009a9:	eb 22                	jmp    c00009cd <simple_strtoul+0xed>
c00009ab:	0f be d2             	movsx  edx,dl
c00009ae:	52                   	push   edx
c00009af:	e8 04 ff ff ff       	call   c00008b8 <toupper>
c00009b4:	0f b6 d0             	movzx  edx,al
c00009b7:	5f                   	pop    edi
c00009b8:	f6 82 20 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfce0],0x1
c00009bf:	75 09                	jne    c00009ca <simple_strtoul+0xea>
c00009c1:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009c6:	75 2d                	jne    c00009f5 <simple_strtoul+0x115>
c00009c8:	eb 59                	jmp    c0000a23 <simple_strtoul+0x143>
c00009ca:	8d 78 c9             	lea    edi,[eax-0x37]
c00009cd:	39 f7                	cmp    edi,esi
c00009cf:	73 f0                	jae    c00009c1 <simple_strtoul+0xe1>
c00009d1:	89 f8                	mov    eax,edi
c00009d3:	31 d2                	xor    edx,edx
c00009d5:	f7 d0                	not    eax
c00009d7:	f7 f6                	div    esi
c00009d9:	39 d8                	cmp    eax,ebx
c00009db:	72 0e                	jb     c00009eb <simple_strtoul+0x10b>
c00009dd:	0f af de             	imul   ebx,esi
c00009e0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e7:	01 fb                	add    ebx,edi
c00009e9:	eb 07                	jmp    c00009f2 <simple_strtoul+0x112>
c00009eb:	bd 01 00 00 00       	mov    ebp,0x1
c00009f0:	31 db                	xor    ebx,ebx
c00009f2:	41                   	inc    ecx
c00009f3:	eb 9f                	jmp    c0000994 <simple_strtoul+0xb4>
c00009f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009f8:	09 d8                	or     eax,ebx
c00009fa:	75 21                	jne    c0000a1d <simple_strtoul+0x13d>
c00009fc:	eb 11                	jmp    c0000a0f <simple_strtoul+0x12f>
c00009fe:	31 db                	xor    ebx,ebx
c0000a00:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000a05:	74 22                	je     c0000a29 <simple_strtoul+0x149>
c0000a07:	31 ed                	xor    ebp,ebp
c0000a09:	31 db                	xor    ebx,ebx
c0000a0b:	85 c9                	test   ecx,ecx
c0000a0d:	74 0e                	je     c0000a1d <simple_strtoul+0x13d>
c0000a0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a13:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a17:	31 db                	xor    ebx,ebx
c0000a19:	89 38                	mov    DWORD PTR [eax],edi
c0000a1b:	eb 06                	jmp    c0000a23 <simple_strtoul+0x143>
c0000a1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a21:	89 08                	mov    DWORD PTR [eax],ecx
c0000a23:	4d                   	dec    ebp
c0000a24:	75 03                	jne    c0000a29 <simple_strtoul+0x149>
c0000a26:	83 cb ff             	or     ebx,0xffffffff
c0000a29:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a2e:	75 02                	jne    c0000a32 <simple_strtoul+0x152>
c0000a30:	f7 db                	neg    ebx
c0000a32:	83 c4 08             	add    esp,0x8
c0000a35:	89 d8                	mov    eax,ebx
c0000a37:	5b                   	pop    ebx
c0000a38:	5e                   	pop    esi
c0000a39:	5f                   	pop    edi
c0000a3a:	5d                   	pop    ebp
c0000a3b:	c3                   	ret    

c0000a3c <largebin_index>:
c0000a3c:	89 c2                	mov    edx,eax
c0000a3e:	c1 ea 08             	shr    edx,0x8
c0000a41:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a47:	77 10                	ja     c0000a59 <largebin_index+0x1d>
c0000a49:	0f bd d2             	bsr    edx,edx
c0000a4c:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a4f:	d3 e8                	shr    eax,cl
c0000a51:	83 e0 03             	and    eax,0x3
c0000a54:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a58:	c3                   	ret    
c0000a59:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a5e:	c3                   	ret    

c0000a5f <malloc_init_state>:
c0000a5f:	8d 50 34             	lea    edx,[eax+0x34]
c0000a62:	53                   	push   ebx
c0000a63:	89 d1                	mov    ecx,edx
c0000a65:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a6b:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a6e:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a71:	83 c2 08             	add    edx,0x8
c0000a74:	39 da                	cmp    edx,ebx
c0000a76:	75 f3                	jne    c0000a6b <malloc_init_state+0xc>
c0000a78:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a7a:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a84:	83 e2 03             	and    edx,0x3
c0000a87:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a91:	83 ca 48             	or     edx,0x48
c0000a94:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a9e:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000aa8:	89 10                	mov    DWORD PTR [eax],edx
c0000aaa:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ab1:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ab4:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000abe:	5b                   	pop    ebx
c0000abf:	c3                   	ret    

c0000ac0 <malloc_consolidate>:
c0000ac0:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ac2:	85 d2                	test   edx,edx
c0000ac4:	0f 84 d8 00 00 00    	je     c0000ba2 <malloc_consolidate+0xe2>
c0000aca:	55                   	push   ebp
c0000acb:	83 e2 fd             	and    edx,0xfffffffd
c0000ace:	57                   	push   edi
c0000acf:	8d 78 34             	lea    edi,[eax+0x34]
c0000ad2:	56                   	push   esi
c0000ad3:	89 c5                	mov    ebp,eax
c0000ad5:	53                   	push   ebx
c0000ad6:	83 ec 10             	sub    esp,0x10
c0000ad9:	89 10                	mov    DWORD PTR [eax],edx
c0000adb:	c1 ea 03             	shr    edx,0x3
c0000ade:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ae2:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000ae6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000aea:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000aed:	85 d2                	test   edx,edx
c0000aef:	0f 84 98 00 00 00    	je     c0000b8d <malloc_consolidate+0xcd>
c0000af5:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000afc:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000aff:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000b02:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000b06:	89 f9                	mov    ecx,edi
c0000b08:	83 e1 fe             	and    ecx,0xfffffffe
c0000b0b:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b0e:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b11:	83 e3 fc             	and    ebx,0xfffffffc
c0000b14:	83 e7 01             	and    edi,0x1
c0000b17:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b1a:	75 14                	jne    c0000b30 <malloc_consolidate+0x70>
c0000b1c:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b1e:	29 fa                	sub    edx,edi
c0000b20:	01 f9                	add    ecx,edi
c0000b22:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b25:	89 fb                	mov    ebx,edi
c0000b27:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b2a:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b2d:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b30:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b33:	74 40                	je     c0000b75 <malloc_consolidate+0xb5>
c0000b35:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b38:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b3b:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b3f:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b42:	83 e7 01             	and    edi,0x1
c0000b45:	75 0e                	jne    c0000b55 <malloc_consolidate+0x95>
c0000b47:	01 d9                	add    ecx,ebx
c0000b49:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b4c:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b4f:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b52:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b55:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b58:	89 ce                	mov    esi,ecx
c0000b5a:	83 ce 01             	or     esi,0x1
c0000b5d:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b60:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b63:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b66:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b6a:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b6d:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b70:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b73:	eb 0c                	jmp    c0000b81 <malloc_consolidate+0xc1>
c0000b75:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b78:	83 c9 01             	or     ecx,0x1
c0000b7b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b7e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b81:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b85:	85 d2                	test   edx,edx
c0000b87:	0f 85 6f ff ff ff    	jne    c0000afc <malloc_consolidate+0x3c>
c0000b8d:	83 c5 04             	add    ebp,0x4
c0000b90:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b94:	0f 85 50 ff ff ff    	jne    c0000aea <malloc_consolidate+0x2a>
c0000b9a:	83 c4 10             	add    esp,0x10
c0000b9d:	5b                   	pop    ebx
c0000b9e:	5e                   	pop    esi
c0000b9f:	5f                   	pop    edi
c0000ba0:	5d                   	pop    ebp
c0000ba1:	c3                   	ret    
c0000ba2:	e9 b8 fe ff ff       	jmp    c0000a5f <malloc_init_state>

c0000ba7 <dlfree>:
c0000ba7:	57                   	push   edi
c0000ba8:	56                   	push   esi
c0000ba9:	53                   	push   ebx
c0000baa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000bae:	85 db                	test   ebx,ebx
c0000bb0:	0f 84 e2 00 00 00    	je     c0000c98 <dlfree+0xf1>
c0000bb6:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000bb9:	8b 0d a0 43 02 c0    	mov    ecx,DWORD PTR ds:0xc00243a0
c0000bbf:	89 f0                	mov    eax,esi
c0000bc1:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bc4:	83 e0 fc             	and    eax,0xfffffffc
c0000bc7:	39 c1                	cmp    ecx,eax
c0000bc9:	72 24                	jb     c0000bef <dlfree+0x48>
c0000bcb:	c1 e8 03             	shr    eax,0x3
c0000bce:	83 c9 03             	or     ecx,0x3
c0000bd1:	83 e8 02             	sub    eax,0x2
c0000bd4:	89 0d a0 43 02 c0    	mov    DWORD PTR ds:0xc00243a0,ecx
c0000bda:	8b 0c 85 a4 43 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbc5c]
c0000be1:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000be3:	89 14 85 a4 43 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbc5c],edx
c0000bea:	e9 a9 00 00 00       	jmp    c0000c98 <dlfree+0xf1>
c0000bef:	83 e6 02             	and    esi,0x2
c0000bf2:	0f 85 a0 00 00 00    	jne    c0000c98 <dlfree+0xf1>
c0000bf8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bfb:	83 c9 01             	or     ecx,0x1
c0000bfe:	89 0d a0 43 02 c0    	mov    DWORD PTR ds:0xc00243a0,ecx
c0000c04:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000c07:	83 e1 fc             	and    ecx,0xfffffffc
c0000c0a:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c0e:	75 13                	jne    c0000c23 <dlfree+0x7c>
c0000c10:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c13:	29 da                	sub    edx,ebx
c0000c15:	01 d8                	add    eax,ebx
c0000c17:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c1a:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c1d:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c20:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c23:	39 35 cc 43 02 c0    	cmp    DWORD PTR ds:0xc00243cc,esi
c0000c29:	74 40                	je     c0000c6b <dlfree+0xc4>
c0000c2b:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c2f:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c32:	80 e3 01             	and    bl,0x1
c0000c35:	75 0e                	jne    c0000c45 <dlfree+0x9e>
c0000c37:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c3a:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c3d:	01 c8                	add    eax,ecx
c0000c3f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c42:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c45:	8b 0d dc 43 02 c0    	mov    ecx,DWORD PTR ds:0xc00243dc
c0000c4b:	c7 42 0c d4 43 02 c0 	mov    DWORD PTR [edx+0xc],0xc00243d4
c0000c52:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c55:	89 15 dc 43 02 c0    	mov    DWORD PTR ds:0xc00243dc,edx
c0000c5b:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c5e:	89 c1                	mov    ecx,eax
c0000c60:	83 c9 01             	or     ecx,0x1
c0000c63:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c66:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c69:	eb 10                	jmp    c0000c7b <dlfree+0xd4>
c0000c6b:	01 c8                	add    eax,ecx
c0000c6d:	89 c1                	mov    ecx,eax
c0000c6f:	83 c9 01             	or     ecx,0x1
c0000c72:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c75:	89 15 cc 43 02 c0    	mov    DWORD PTR ds:0xc00243cc,edx
c0000c7b:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c80:	76 16                	jbe    c0000c98 <dlfree+0xf1>
c0000c82:	f6 05 a0 43 02 c0 02 	test   BYTE PTR ds:0xc00243a0,0x2
c0000c89:	74 0d                	je     c0000c98 <dlfree+0xf1>
c0000c8b:	5b                   	pop    ebx
c0000c8c:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0000c91:	5e                   	pop    esi
c0000c92:	5f                   	pop    edi
c0000c93:	e9 28 fe ff ff       	jmp    c0000ac0 <malloc_consolidate>
c0000c98:	5b                   	pop    ebx
c0000c99:	5e                   	pop    esi
c0000c9a:	5f                   	pop    edi
c0000c9b:	c3                   	ret    

c0000c9c <sYSMALLOc>:
c0000c9c:	55                   	push   ebp
c0000c9d:	57                   	push   edi
c0000c9e:	56                   	push   esi
c0000c9f:	53                   	push   ebx
c0000ca0:	89 d3                	mov    ebx,edx
c0000ca2:	83 ec 2c             	sub    esp,0x2c
c0000ca5:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000cab:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000cae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000cb2:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000cb5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cb9:	74 1f                	je     c0000cda <sYSMALLOc+0x3e>
c0000cbb:	89 d0                	mov    eax,edx
c0000cbd:	e8 fe fd ff ff       	call   c0000ac0 <malloc_consolidate>
c0000cc2:	83 ec 0c             	sub    esp,0xc
c0000cc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000cc9:	83 e8 07             	sub    eax,0x7
c0000ccc:	50                   	push   eax
c0000ccd:	e8 33 02 00 00       	call   c0000f05 <dlmalloc>
c0000cd2:	83 c4 10             	add    esp,0x10
c0000cd5:	e9 23 02 00 00       	jmp    c0000efd <sYSMALLOc+0x261>
c0000cda:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ce1:	83 c0 10             	add    eax,0x10
c0000ce4:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000cea:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ced:	01 c2                	add    edx,eax
c0000cef:	83 e5 fc             	and    ebp,0xfffffffc
c0000cf2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000cf6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cfd:	74 02                	je     c0000d01 <sYSMALLOc+0x65>
c0000cff:	29 ea                	sub    edx,ebp
c0000d01:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000d05:	f7 d9                	neg    ecx
c0000d07:	21 ca                	and    edx,ecx
c0000d09:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000d0d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000d11:	7f 07                	jg     c0000d1a <sYSMALLOc+0x7e>
c0000d13:	31 c0                	xor    eax,eax
c0000d15:	e9 e3 01 00 00       	jmp    c0000efd <sYSMALLOc+0x261>
c0000d1a:	83 ec 0c             	sub    esp,0xc
c0000d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d21:	e8 0b b1 00 00       	call   c000be31 <sbrk>
c0000d26:	83 c4 10             	add    esp,0x10
c0000d29:	89 c6                	mov    esi,eax
c0000d2b:	83 f8 ff             	cmp    eax,0xffffffff
c0000d2e:	74 e3                	je     c0000d13 <sYSMALLOc+0x77>
c0000d30:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d34:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000d37:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000d3d:	39 c2                	cmp    edx,eax
c0000d3f:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000d45:	75 11                	jne    c0000d58 <sYSMALLOc+0xbc>
c0000d47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d4b:	01 e8                	add    eax,ebp
c0000d4d:	83 c8 01             	or     eax,0x1
c0000d50:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d53:	e9 93 00 00 00       	jmp    c0000deb <sYSMALLOc+0x14f>
c0000d58:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000d5e:	a8 01                	test   al,0x1
c0000d60:	0f 84 73 01 00 00    	je     c0000ed9 <sYSMALLOc+0x23d>
c0000d66:	85 ed                	test   ebp,ebp
c0000d68:	74 12                	je     c0000d7c <sYSMALLOc+0xe0>
c0000d6a:	39 f2                	cmp    edx,esi
c0000d6c:	76 0e                	jbe    c0000d7c <sYSMALLOc+0xe0>
c0000d6e:	83 e0 fe             	and    eax,0xfffffffe
c0000d71:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000d77:	e9 5d 01 00 00       	jmp    c0000ed9 <sYSMALLOc+0x23d>
c0000d7c:	85 ed                	test   ebp,ebp
c0000d7e:	74 0c                	je     c0000d8c <sYSMALLOc+0xf0>
c0000d80:	89 f0                	mov    eax,esi
c0000d82:	29 d0                	sub    eax,edx
c0000d84:	01 c1                	add    ecx,eax
c0000d86:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000d8c:	89 f2                	mov    edx,esi
c0000d8e:	83 e2 07             	and    edx,0x7
c0000d91:	0f 84 b1 00 00 00    	je     c0000e48 <sYSMALLOc+0x1ac>
c0000d97:	b8 08 00 00 00       	mov    eax,0x8
c0000d9c:	29 d0                	sub    eax,edx
c0000d9e:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000da1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000da5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000da9:	01 e8                	add    eax,ebp
c0000dab:	83 ec 0c             	sub    esp,0xc
c0000dae:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000db1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000db5:	01 f2                	add    edx,esi
c0000db7:	01 d1                	add    ecx,edx
c0000db9:	29 d0                	sub    eax,edx
c0000dbb:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000dbf:	01 c1                	add    ecx,eax
c0000dc1:	51                   	push   ecx
c0000dc2:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000dc6:	e8 66 b0 00 00       	call   c000be31 <sbrk>
c0000dcb:	83 c4 10             	add    esp,0x10
c0000dce:	83 f8 ff             	cmp    eax,0xffffffff
c0000dd1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000dd5:	75 7c                	jne    c0000e53 <sYSMALLOc+0x1b7>
c0000dd7:	83 ec 0c             	sub    esp,0xc
c0000dda:	6a 00                	push   0x0
c0000ddc:	e8 50 b0 00 00       	call   c000be31 <sbrk>
c0000de1:	83 c4 10             	add    esp,0x10
c0000de4:	31 c9                	xor    ecx,ecx
c0000de6:	83 f8 ff             	cmp    eax,0xffffffff
c0000de9:	75 7e                	jne    c0000e69 <sYSMALLOc+0x1cd>
c0000deb:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000df1:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000df7:	73 06                	jae    c0000dff <sYSMALLOc+0x163>
c0000df9:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000dff:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e05:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e0b:	73 06                	jae    c0000e13 <sYSMALLOc+0x177>
c0000e0d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e13:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e16:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e19:	83 e2 fc             	and    edx,0xfffffffc
c0000e1c:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000e20:	0f 87 ed fe ff ff    	ja     c0000d13 <sYSMALLOc+0x77>
c0000e26:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000e2a:	29 fa                	sub    edx,edi
c0000e2c:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e2f:	83 ca 01             	or     edx,0x1
c0000e32:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e35:	89 fb                	mov    ebx,edi
c0000e37:	83 cb 01             	or     ebx,0x1
c0000e3a:	83 c0 08             	add    eax,0x8
c0000e3d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e40:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e43:	e9 b5 00 00 00       	jmp    c0000efd <sYSMALLOc+0x261>
c0000e48:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000e4c:	31 c0                	xor    eax,eax
c0000e4e:	e9 52 ff ff ff       	jmp    c0000da5 <sYSMALLOc+0x109>
c0000e53:	39 c6                	cmp    esi,eax
c0000e55:	76 12                	jbe    c0000e69 <sYSMALLOc+0x1cd>
c0000e57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e5b:	01 f0                	add    eax,esi
c0000e5d:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e64:	e9 7b ff ff ff       	jmp    c0000de4 <sYSMALLOc+0x148>
c0000e69:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000e6d:	29 f0                	sub    eax,esi
c0000e6f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0000e72:	01 c8                	add    eax,ecx
c0000e74:	83 c8 01             	or     eax,0x1
c0000e77:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0000e7a:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0000e80:	85 ed                	test   ebp,ebp
c0000e82:	0f 84 63 ff ff ff    	je     c0000deb <sYSMALLOc+0x14f>
c0000e88:	8d 45 f4             	lea    eax,[ebp-0xc]
c0000e8b:	83 e0 f8             	and    eax,0xfffffff8
c0000e8e:	89 c2                	mov    edx,eax
c0000e90:	83 ca 01             	or     edx,0x1
c0000e93:	83 f8 0f             	cmp    eax,0xf
c0000e96:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e99:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000ea1:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000ea9:	0f 86 3c ff ff ff    	jbe    c0000deb <sYSMALLOc+0x14f>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	83 c7 08             	add    edi,0x8
c0000eb5:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000ebb:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000ec5:	57                   	push   edi
c0000ec6:	e8 dc fc ff ff       	call   c0000ba7 <dlfree>
c0000ecb:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000ed1:	83 c4 10             	add    esp,0x10
c0000ed4:	e9 12 ff ff ff       	jmp    c0000deb <sYSMALLOc+0x14f>
c0000ed9:	83 ec 0c             	sub    esp,0xc
c0000edc:	6a 00                	push   0x0
c0000ede:	e8 4e af 00 00       	call   c000be31 <sbrk>
c0000ee3:	89 c2                	mov    edx,eax
c0000ee5:	29 f2                	sub    edx,esi
c0000ee7:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000eeb:	83 c4 10             	add    esp,0x10
c0000eee:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ef4:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000ef8:	e9 e7 fe ff ff       	jmp    c0000de4 <sYSMALLOc+0x148>
c0000efd:	83 c4 2c             	add    esp,0x2c
c0000f00:	5b                   	pop    ebx
c0000f01:	5e                   	pop    esi
c0000f02:	5f                   	pop    edi
c0000f03:	5d                   	pop    ebp
c0000f04:	c3                   	ret    

c0000f05 <dlmalloc>:
c0000f05:	55                   	push   ebp
c0000f06:	57                   	push   edi
c0000f07:	56                   	push   esi
c0000f08:	53                   	push   ebx
c0000f09:	83 ec 1c             	sub    esp,0x1c
c0000f0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f10:	83 f8 df             	cmp    eax,0xffffffdf
c0000f13:	0f 87 70 03 00 00    	ja     c0001289 <dlmalloc+0x384>
c0000f19:	83 c0 0b             	add    eax,0xb
c0000f1c:	be 10 00 00 00       	mov    esi,0x10
c0000f21:	83 f8 0f             	cmp    eax,0xf
c0000f24:	76 05                	jbe    c0000f2b <dlmalloc+0x26>
c0000f26:	83 e0 f8             	and    eax,0xfffffff8
c0000f29:	89 c6                	mov    esi,eax
c0000f2b:	8b 3d a0 43 02 c0    	mov    edi,DWORD PTR ds:0xc00243a0
c0000f31:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f37:	75 17                	jne    c0000f50 <dlmalloc+0x4b>
c0000f39:	85 ff                	test   edi,edi
c0000f3b:	0f 85 05 03 00 00    	jne    c0001246 <dlmalloc+0x341>
c0000f41:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0000f46:	e8 75 fb ff ff       	call   c0000ac0 <malloc_consolidate>
c0000f4b:	e9 f6 02 00 00       	jmp    c0001246 <dlmalloc+0x341>
c0000f50:	39 f7                	cmp    edi,esi
c0000f52:	72 1f                	jb     c0000f73 <dlmalloc+0x6e>
c0000f54:	89 f2                	mov    edx,esi
c0000f56:	c1 ea 03             	shr    edx,0x3
c0000f59:	83 ea 02             	sub    edx,0x2
c0000f5c:	8b 04 95 a4 43 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbc5c]
c0000f63:	85 c0                	test   eax,eax
c0000f65:	74 0c                	je     c0000f73 <dlmalloc+0x6e>
c0000f67:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f6a:	89 0c 95 a4 43 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbc5c],ecx
c0000f71:	eb 30                	jmp    c0000fa3 <dlmalloc+0x9e>
c0000f73:	89 f0                	mov    eax,esi
c0000f75:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f7b:	77 2e                	ja     c0000fab <dlmalloc+0xa6>
c0000f7d:	c1 e8 03             	shr    eax,0x3
c0000f80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f84:	8d 14 c5 d4 43 02 c0 	lea    edx,[eax*8-0x3ffdbc2c]
c0000f8b:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f8e:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f91:	39 c3                	cmp    ebx,eax
c0000f93:	74 2e                	je     c0000fc3 <dlmalloc+0xbe>
c0000f95:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f98:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f9d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000fa0:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000fa3:	83 c0 08             	add    eax,0x8
c0000fa6:	e9 e0 02 00 00       	jmp    c000128b <dlmalloc+0x386>
c0000fab:	e8 8c fa ff ff       	call   c0000a3c <largebin_index>
c0000fb0:	83 e7 02             	and    edi,0x2
c0000fb3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fb7:	74 0a                	je     c0000fc3 <dlmalloc+0xbe>
c0000fb9:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0000fbe:	e8 fd fa ff ff       	call   c0000ac0 <malloc_consolidate>
c0000fc3:	8d 46 10             	lea    eax,[esi+0x10]
c0000fc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fca:	8b 1d e0 43 02 c0    	mov    ebx,DWORD PTR ds:0xc00243e0
c0000fd0:	81 fb d4 43 02 c0    	cmp    ebx,0xc00243d4
c0000fd6:	0f 84 13 01 00 00    	je     c00010ef <dlmalloc+0x1ea>
c0000fdc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fdf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fe2:	83 e7 fc             	and    edi,0xfffffffc
c0000fe5:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000feb:	77 4c                	ja     c0001039 <dlmalloc+0x134>
c0000fed:	3d d4 43 02 c0       	cmp    eax,0xc00243d4
c0000ff2:	75 45                	jne    c0001039 <dlmalloc+0x134>
c0000ff4:	39 1d d0 43 02 c0    	cmp    DWORD PTR ds:0xc00243d0,ebx
c0000ffa:	75 3d                	jne    c0001039 <dlmalloc+0x134>
c0000ffc:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001000:	73 37                	jae    c0001039 <dlmalloc+0x134>
c0001002:	89 fa                	mov    edx,edi
c0001004:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001007:	29 f2                	sub    edx,esi
c0001009:	83 ce 01             	or     esi,0x1
c000100c:	89 d1                	mov    ecx,edx
c000100e:	a3 dc 43 02 c0       	mov    ds:0xc00243dc,eax
c0001013:	83 c9 01             	or     ecx,0x1
c0001016:	a3 e0 43 02 c0       	mov    ds:0xc00243e0,eax
c000101b:	a3 d0 43 02 c0       	mov    ds:0xc00243d0,eax
c0001020:	c7 40 08 d4 43 02 c0 	mov    DWORD PTR [eax+0x8],0xc00243d4
c0001027:	c7 40 0c d4 43 02 c0 	mov    DWORD PTR [eax+0xc],0xc00243d4
c000102e:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001031:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001034:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001037:	eb 15                	jmp    c000104e <dlmalloc+0x149>
c0001039:	a3 e0 43 02 c0       	mov    ds:0xc00243e0,eax
c000103e:	39 fe                	cmp    esi,edi
c0001040:	c7 40 08 d4 43 02 c0 	mov    DWORD PTR [eax+0x8],0xc00243d4
c0001047:	75 0d                	jne    c0001056 <dlmalloc+0x151>
c0001049:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000104e:	8d 43 08             	lea    eax,[ebx+0x8]
c0001051:	e9 35 02 00 00       	jmp    c000128b <dlmalloc+0x386>
c0001056:	89 f8                	mov    eax,edi
c0001058:	81 ff ff 00 00 00    	cmp    edi,0xff
c000105e:	77 19                	ja     c0001079 <dlmalloc+0x174>
c0001060:	c1 e8 03             	shr    eax,0x3
c0001063:	8d 14 00             	lea    edx,[eax+eax*1]
c0001066:	83 c2 0d             	add    edx,0xd
c0001069:	8d 2c 95 98 43 02 c0 	lea    ebp,[edx*4-0x3ffdbc68]
c0001070:	8b 14 95 a0 43 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbc60]
c0001077:	eb 46                	jmp    c00010bf <dlmalloc+0x1ba>
c0001079:	e8 be f9 ff ff       	call   c0000a3c <largebin_index>
c000107e:	8d 14 00             	lea    edx,[eax+eax*1]
c0001081:	83 c2 0d             	add    edx,0xd
c0001084:	8d 0c 95 a0 43 02 c0 	lea    ecx,[edx*4-0x3ffdbc60]
c000108b:	8b 14 95 a0 43 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbc60]
c0001092:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001095:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001099:	89 d5                	mov    ebp,edx
c000109b:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000109f:	74 1e                	je     c00010bf <dlmalloc+0x1ba>
c00010a1:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00010a4:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00010a7:	77 12                	ja     c00010bb <dlmalloc+0x1b6>
c00010a9:	83 cf 01             	or     edi,0x1
c00010ac:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010af:	76 05                	jbe    c00010b6 <dlmalloc+0x1b1>
c00010b1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010b4:	eb f6                	jmp    c00010ac <dlmalloc+0x1a7>
c00010b6:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010b9:	eb 04                	jmp    c00010bf <dlmalloc+0x1ba>
c00010bb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010bf:	89 c7                	mov    edi,eax
c00010c1:	88 c1                	mov    cl,al
c00010c3:	c1 ff 05             	sar    edi,0x5
c00010c6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010ca:	bf 01 00 00 00       	mov    edi,0x1
c00010cf:	d3 e7                	shl    edi,cl
c00010d1:	89 f8                	mov    eax,edi
c00010d3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010d7:	09 04 bd d4 46 02 c0 	or     DWORD PTR [edi*4-0x3ffdb92c],eax
c00010de:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010e1:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010e4:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010e7:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010ea:	e9 db fe ff ff       	jmp    c0000fca <dlmalloc+0xc5>
c00010ef:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010f5:	76 78                	jbe    c000116f <dlmalloc+0x26a>
c00010f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010fb:	8d 04 c5 d4 43 02 c0 	lea    eax,[eax*8-0x3ffdbc2c]
c0001102:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001105:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001108:	39 ca                	cmp    edx,ecx
c000110a:	74 63                	je     c000116f <dlmalloc+0x26a>
c000110c:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000110f:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001112:	83 e3 fc             	and    ebx,0xfffffffc
c0001115:	39 de                	cmp    esi,ebx
c0001117:	77 52                	ja     c000116b <dlmalloc+0x266>
c0001119:	89 df                	mov    edi,ebx
c000111b:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000111e:	29 f7                	sub    edi,esi
c0001120:	01 d3                	add    ebx,edx
c0001122:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001125:	83 ff 0f             	cmp    edi,0xf
c0001128:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000112b:	8d 42 08             	lea    eax,[edx+0x8]
c000112e:	77 09                	ja     c0001139 <dlmalloc+0x234>
c0001130:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001134:	e9 52 01 00 00       	jmp    c000128b <dlmalloc+0x386>
c0001139:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000113c:	83 ce 01             	or     esi,0x1
c000113f:	89 0d dc 43 02 c0    	mov    DWORD PTR ds:0xc00243dc,ecx
c0001145:	89 0d e0 43 02 c0    	mov    DWORD PTR ds:0xc00243e0,ecx
c000114b:	c7 41 08 d4 43 02 c0 	mov    DWORD PTR [ecx+0x8],0xc00243d4
c0001152:	c7 41 0c d4 43 02 c0 	mov    DWORD PTR [ecx+0xc],0xc00243d4
c0001159:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000115c:	89 fa                	mov    edx,edi
c000115e:	83 ca 01             	or     edx,0x1
c0001161:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001164:	89 3b                	mov    DWORD PTR [ebx],edi
c0001166:	e9 20 01 00 00       	jmp    c000128b <dlmalloc+0x386>
c000116b:	89 c2                	mov    edx,eax
c000116d:	eb 99                	jmp    c0001108 <dlmalloc+0x203>
c000116f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001173:	b8 01 00 00 00       	mov    eax,0x1
c0001178:	41                   	inc    ecx
c0001179:	89 cb                	mov    ebx,ecx
c000117b:	c1 eb 05             	shr    ebx,0x5
c000117e:	8d 14 cd cc 43 02 c0 	lea    edx,[ecx*8-0x3ffdbc34]
c0001185:	d3 e0                	shl    eax,cl
c0001187:	8b 3c 9d d4 46 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdb92c]
c000118e:	39 f8                	cmp    eax,edi
c0001190:	77 04                	ja     c0001196 <dlmalloc+0x291>
c0001192:	85 c0                	test   eax,eax
c0001194:	75 26                	jne    c00011bc <dlmalloc+0x2b7>
c0001196:	43                   	inc    ebx
c0001197:	83 fb 02             	cmp    ebx,0x2
c000119a:	0f 87 a6 00 00 00    	ja     c0001246 <dlmalloc+0x341>
c00011a0:	8b 3c 9d d4 46 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdb92c]
c00011a7:	85 ff                	test   edi,edi
c00011a9:	74 eb                	je     c0001196 <dlmalloc+0x291>
c00011ab:	89 d8                	mov    eax,ebx
c00011ad:	c1 e0 06             	shl    eax,0x6
c00011b0:	8d 14 85 cc 43 02 c0 	lea    edx,[eax*4-0x3ffdbc34]
c00011b7:	b8 01 00 00 00       	mov    eax,0x1
c00011bc:	85 f8                	test   eax,edi
c00011be:	75 07                	jne    c00011c7 <dlmalloc+0x2c2>
c00011c0:	83 c2 08             	add    edx,0x8
c00011c3:	01 c0                	add    eax,eax
c00011c5:	eb f5                	jmp    c00011bc <dlmalloc+0x2b7>
c00011c7:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011ca:	39 ca                	cmp    edx,ecx
c00011cc:	75 14                	jne    c00011e2 <dlmalloc+0x2dd>
c00011ce:	89 c1                	mov    ecx,eax
c00011d0:	83 c2 08             	add    edx,0x8
c00011d3:	f7 d1                	not    ecx
c00011d5:	21 cf                	and    edi,ecx
c00011d7:	01 c0                	add    eax,eax
c00011d9:	89 3c 9d d4 46 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdb92c],edi
c00011e0:	eb ac                	jmp    c000118e <dlmalloc+0x289>
c00011e2:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011e5:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011e8:	83 e0 fc             	and    eax,0xfffffffc
c00011eb:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011ee:	89 c3                	mov    ebx,eax
c00011f0:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011f3:	29 f3                	sub    ebx,esi
c00011f5:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011f8:	83 fb 0f             	cmp    ebx,0xf
c00011fb:	8d 41 08             	lea    eax,[ecx+0x8]
c00011fe:	77 09                	ja     c0001209 <dlmalloc+0x304>
c0001200:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001204:	e9 82 00 00 00       	jmp    c000128b <dlmalloc+0x386>
c0001209:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000120c:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001212:	89 3d dc 43 02 c0    	mov    DWORD PTR ds:0xc00243dc,edi
c0001218:	89 3d e0 43 02 c0    	mov    DWORD PTR ds:0xc00243e0,edi
c000121e:	c7 47 08 d4 43 02 c0 	mov    DWORD PTR [edi+0x8],0xc00243d4
c0001225:	c7 47 0c d4 43 02 c0 	mov    DWORD PTR [edi+0xc],0xc00243d4
c000122c:	77 06                	ja     c0001234 <dlmalloc+0x32f>
c000122e:	89 3d d0 43 02 c0    	mov    DWORD PTR ds:0xc00243d0,edi
c0001234:	83 ce 01             	or     esi,0x1
c0001237:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000123a:	89 d9                	mov    ecx,ebx
c000123c:	83 c9 01             	or     ecx,0x1
c000123f:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001242:	89 1a                	mov    DWORD PTR [edx],ebx
c0001244:	eb 45                	jmp    c000128b <dlmalloc+0x386>
c0001246:	a1 cc 43 02 c0       	mov    eax,ds:0xc00243cc
c000124b:	8d 4e 10             	lea    ecx,[esi+0x10]
c000124e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001251:	83 e2 fc             	and    edx,0xfffffffc
c0001254:	39 d1                	cmp    ecx,edx
c0001256:	77 1e                	ja     c0001276 <dlmalloc+0x371>
c0001258:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000125b:	89 f3                	mov    ebx,esi
c000125d:	29 f2                	sub    edx,esi
c000125f:	83 cb 01             	or     ebx,0x1
c0001262:	83 ca 01             	or     edx,0x1
c0001265:	89 0d cc 43 02 c0    	mov    DWORD PTR ds:0xc00243cc,ecx
c000126b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000126e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001271:	e9 2d fd ff ff       	jmp    c0000fa3 <dlmalloc+0x9e>
c0001276:	83 c4 1c             	add    esp,0x1c
c0001279:	89 f0                	mov    eax,esi
c000127b:	ba a0 43 02 c0       	mov    edx,0xc00243a0
c0001280:	5b                   	pop    ebx
c0001281:	5e                   	pop    esi
c0001282:	5f                   	pop    edi
c0001283:	5d                   	pop    ebp
c0001284:	e9 13 fa ff ff       	jmp    c0000c9c <sYSMALLOc>
c0001289:	31 c0                	xor    eax,eax
c000128b:	83 c4 1c             	add    esp,0x1c
c000128e:	5b                   	pop    ebx
c000128f:	5e                   	pop    esi
c0001290:	5f                   	pop    edi
c0001291:	5d                   	pop    ebp
c0001292:	c3                   	ret    

c0001293 <iALLOc>:
c0001293:	55                   	push   ebp
c0001294:	89 c5                	mov    ebp,eax
c0001296:	57                   	push   edi
c0001297:	56                   	push   esi
c0001298:	53                   	push   ebx
c0001299:	83 ec 2c             	sub    esp,0x2c
c000129c:	83 3d a0 43 02 c0 00 	cmp    DWORD PTR ds:0xc00243a0,0x0
c00012a3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00012a7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00012ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012af:	75 12                	jne    c00012c3 <iALLOc+0x30>
c00012b1:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c00012b6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012ba:	e8 01 f8 ff ff       	call   c0000ac0 <malloc_consolidate>
c00012bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012c3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012c8:	74 12                	je     c00012dc <iALLOc+0x49>
c00012ca:	85 ed                	test   ebp,ebp
c00012cc:	0f 84 64 01 00 00    	je     c0001436 <iALLOc+0x1a3>
c00012d2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012da:	eb 33                	jmp    c000130f <iALLOc+0x7c>
c00012dc:	85 ed                	test   ebp,ebp
c00012de:	75 14                	jne    c00012f4 <iALLOc+0x61>
c00012e0:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012e8:	83 c4 2c             	add    esp,0x2c
c00012eb:	5b                   	pop    ebx
c00012ec:	5e                   	pop    esi
c00012ed:	5f                   	pop    edi
c00012ee:	5d                   	pop    ebp
c00012ef:	e9 11 fc ff ff       	jmp    c0000f05 <dlmalloc>
c00012f4:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012fb:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001303:	83 f8 0f             	cmp    eax,0xf
c0001306:	76 07                	jbe    c000130f <iALLOc+0x7c>
c0001308:	83 e0 f8             	and    eax,0xfffffff8
c000130b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000130f:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001314:	75 09                	jne    c000131f <iALLOc+0x8c>
c0001316:	89 d0                	mov    eax,edx
c0001318:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000131b:	31 f6                	xor    esi,esi
c000131d:	eb 3b                	jmp    c000135a <iALLOc+0xc7>
c000131f:	8b 02                	mov    eax,DWORD PTR [edx]
c0001321:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001329:	83 c0 0b             	add    eax,0xb
c000132c:	83 f8 0f             	cmp    eax,0xf
c000132f:	76 07                	jbe    c0001338 <iALLOc+0xa5>
c0001331:	83 e0 f8             	and    eax,0xfffffff8
c0001334:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001338:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000133c:	0f af f5             	imul   esi,ebp
c000133f:	eb 25                	jmp    c0001366 <iALLOc+0xd3>
c0001341:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001343:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001346:	bb 10 00 00 00       	mov    ebx,0x10
c000134b:	83 f9 0f             	cmp    ecx,0xf
c000134e:	76 05                	jbe    c0001355 <iALLOc+0xc2>
c0001350:	83 e1 f8             	and    ecx,0xfffffff8
c0001353:	89 cb                	mov    ebx,ecx
c0001355:	01 de                	add    esi,ebx
c0001357:	83 c0 04             	add    eax,0x4
c000135a:	39 c7                	cmp    edi,eax
c000135c:	75 e3                	jne    c0001341 <iALLOc+0xae>
c000135e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001366:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000136a:	83 ec 0c             	sub    esp,0xc
c000136d:	8b 1d f4 46 02 c0    	mov    ebx,DWORD PTR ds:0xc00246f4
c0001373:	c7 05 f4 46 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00246f4,0x0
c000137d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001381:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001385:	50                   	push   eax
c0001386:	e8 7a fb ff ff       	call   c0000f05 <dlmalloc>
c000138b:	83 c4 10             	add    esp,0x10
c000138e:	89 1d f4 46 02 c0    	mov    DWORD PTR ds:0xc00246f4,ebx
c0001394:	85 c0                	test   eax,eax
c0001396:	0f 84 92 00 00 00    	je     c000142e <iALLOc+0x19b>
c000139c:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000139f:	8d 78 f8             	lea    edi,[eax-0x8]
c00013a2:	83 e3 fc             	and    ebx,0xfffffffc
c00013a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00013a9:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013ae:	74 1e                	je     c00013ce <iALLOc+0x13b>
c00013b0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013b4:	89 d9                	mov    ecx,ebx
c00013b6:	52                   	push   edx
c00013b7:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013bb:	83 e9 04             	sub    ecx,0x4
c00013be:	51                   	push   ecx
c00013bf:	6a 00                	push   0x0
c00013c1:	50                   	push   eax
c00013c2:	e8 fd f2 ff ff       	call   c00006c4 <memset>
c00013c7:	83 c4 10             	add    esp,0x10
c00013ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013ce:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013d3:	75 14                	jne    c00013e9 <iALLOc+0x156>
c00013d5:	8d 04 37             	lea    eax,[edi+esi*1]
c00013d8:	29 f3                	sub    ebx,esi
c00013da:	83 cb 01             	or     ebx,0x1
c00013dd:	8d 48 08             	lea    ecx,[eax+0x8]
c00013e0:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013e7:	89 f3                	mov    ebx,esi
c00013e9:	31 c0                	xor    eax,eax
c00013eb:	4d                   	dec    ebp
c00013ec:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013f0:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013f3:	39 c5                	cmp    ebp,eax
c00013f5:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013f8:	74 2c                	je     c0001426 <iALLOc+0x193>
c00013fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013fe:	85 c9                	test   ecx,ecx
c0001400:	75 15                	jne    c0001417 <iALLOc+0x184>
c0001402:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001405:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001408:	b9 10 00 00 00       	mov    ecx,0x10
c000140d:	83 fe 0f             	cmp    esi,0xf
c0001410:	76 05                	jbe    c0001417 <iALLOc+0x184>
c0001412:	83 e6 f8             	and    esi,0xfffffff8
c0001415:	89 f1                	mov    ecx,esi
c0001417:	89 ce                	mov    esi,ecx
c0001419:	29 cb                	sub    ebx,ecx
c000141b:	83 ce 01             	or     esi,0x1
c000141e:	40                   	inc    eax
c000141f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001422:	01 cf                	add    edi,ecx
c0001424:	eb c6                	jmp    c00013ec <iALLOc+0x159>
c0001426:	83 cb 01             	or     ebx,0x1
c0001429:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000142c:	eb 08                	jmp    c0001436 <iALLOc+0x1a3>
c000142e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001436:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000143a:	83 c4 2c             	add    esp,0x2c
c000143d:	5b                   	pop    ebx
c000143e:	5e                   	pop    esi
c000143f:	5f                   	pop    edi
c0001440:	5d                   	pop    ebp
c0001441:	c3                   	ret    

c0001442 <dlrealloc>:
c0001442:	55                   	push   ebp
c0001443:	57                   	push   edi
c0001444:	56                   	push   esi
c0001445:	53                   	push   ebx
c0001446:	83 ec 1c             	sub    esp,0x1c
c0001449:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000144d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001451:	85 db                	test   ebx,ebx
c0001453:	75 10                	jne    c0001465 <dlrealloc+0x23>
c0001455:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001459:	83 c4 1c             	add    esp,0x1c
c000145c:	5b                   	pop    ebx
c000145d:	5e                   	pop    esi
c000145e:	5f                   	pop    edi
c000145f:	5d                   	pop    ebp
c0001460:	e9 a0 fa ff ff       	jmp    c0000f05 <dlmalloc>
c0001465:	83 f8 df             	cmp    eax,0xffffffdf
c0001468:	76 07                	jbe    c0001471 <dlrealloc+0x2f>
c000146a:	31 db                	xor    ebx,ebx
c000146c:	e9 7c 01 00 00       	jmp    c00015ed <dlrealloc+0x1ab>
c0001471:	83 c0 0b             	add    eax,0xb
c0001474:	bf 10 00 00 00       	mov    edi,0x10
c0001479:	83 f8 0f             	cmp    eax,0xf
c000147c:	76 05                	jbe    c0001483 <dlrealloc+0x41>
c000147e:	83 e0 f8             	and    eax,0xfffffff8
c0001481:	89 c7                	mov    edi,eax
c0001483:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001486:	8d 6b f8             	lea    ebp,[ebx-0x8]
c0001489:	89 c6                	mov    esi,eax
c000148b:	83 e6 fc             	and    esi,0xfffffffc
c000148e:	a8 02                	test   al,0x2
c0001490:	75 d8                	jne    c000146a <dlrealloc+0x28>
c0001492:	39 f7                	cmp    edi,esi
c0001494:	0f 86 15 01 00 00    	jbe    c00015af <dlrealloc+0x16d>
c000149a:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c000149e:	39 15 cc 43 02 c0    	cmp    DWORD PTR ds:0xc00243cc,edx
c00014a4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00014a7:	75 33                	jne    c00014dc <dlrealloc+0x9a>
c00014a9:	83 e1 fc             	and    ecx,0xfffffffc
c00014ac:	01 f1                	add    ecx,esi
c00014ae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014b2:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014b5:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014b9:	77 49                	ja     c0001504 <dlrealloc+0xc2>
c00014bb:	83 e0 01             	and    eax,0x1
c00014be:	01 fd                	add    ebp,edi
c00014c0:	09 f8                	or     eax,edi
c00014c2:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014c9:	29 f8                	sub    eax,edi
c00014cb:	89 2d cc 43 02 c0    	mov    DWORD PTR ds:0xc00243cc,ebp
c00014d1:	83 c8 01             	or     eax,0x1
c00014d4:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014d7:	e9 11 01 00 00       	jmp    c00015ed <dlrealloc+0x1ab>
c00014dc:	89 c8                	mov    eax,ecx
c00014de:	83 e0 fe             	and    eax,0xfffffffe
c00014e1:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014e6:	75 1c                	jne    c0001504 <dlrealloc+0xc2>
c00014e8:	83 e1 fc             	and    ecx,0xfffffffc
c00014eb:	01 f1                	add    ecx,esi
c00014ed:	39 cf                	cmp    edi,ecx
c00014ef:	77 13                	ja     c0001504 <dlrealloc+0xc2>
c00014f1:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014f4:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014f7:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014fa:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014fd:	89 ce                	mov    esi,ecx
c00014ff:	e9 ab 00 00 00       	jmp    c00015af <dlrealloc+0x16d>
c0001504:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001508:	83 ec 0c             	sub    esp,0xc
c000150b:	8d 47 f9             	lea    eax,[edi-0x7]
c000150e:	50                   	push   eax
c000150f:	e8 f1 f9 ff ff       	call   c0000f05 <dlmalloc>
c0001514:	83 c4 10             	add    esp,0x10
c0001517:	89 c1                	mov    ecx,eax
c0001519:	85 c0                	test   eax,eax
c000151b:	0f 84 49 ff ff ff    	je     c000146a <dlrealloc+0x28>
c0001521:	8d 40 f8             	lea    eax,[eax-0x8]
c0001524:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001528:	39 c2                	cmp    edx,eax
c000152a:	75 0a                	jne    c0001536 <dlrealloc+0xf4>
c000152c:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000152f:	83 e0 fc             	and    eax,0xfffffffc
c0001532:	01 c6                	add    esi,eax
c0001534:	eb 79                	jmp    c00015af <dlrealloc+0x16d>
c0001536:	83 ee 04             	sub    esi,0x4
c0001539:	83 fe 27             	cmp    esi,0x27
c000153c:	76 16                	jbe    c0001554 <dlrealloc+0x112>
c000153e:	50                   	push   eax
c000153f:	56                   	push   esi
c0001540:	53                   	push   ebx
c0001541:	51                   	push   ecx
c0001542:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001546:	e8 43 f1 ff ff       	call   c000068e <memcpy>
c000154b:	83 c4 10             	add    esp,0x10
c000154e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001552:	eb 43                	jmp    c0001597 <dlrealloc+0x155>
c0001554:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001556:	83 fe 13             	cmp    esi,0x13
c0001559:	89 01                	mov    DWORD PTR [ecx],eax
c000155b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000155e:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001561:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001564:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001567:	76 2e                	jbe    c0001597 <dlrealloc+0x155>
c0001569:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000156c:	83 fe 1b             	cmp    esi,0x1b
c000156f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001572:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001575:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001578:	76 1d                	jbe    c0001597 <dlrealloc+0x155>
c000157a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000157d:	83 fe 23             	cmp    esi,0x23
c0001580:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001583:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001586:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c0001589:	76 0c                	jbe    c0001597 <dlrealloc+0x155>
c000158b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000158e:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001591:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001594:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001597:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000159b:	83 ec 0c             	sub    esp,0xc
c000159e:	53                   	push   ebx
c000159f:	e8 03 f6 ff ff       	call   c0000ba7 <dlfree>
c00015a4:	83 c4 10             	add    esp,0x10
c00015a7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015ab:	89 cb                	mov    ebx,ecx
c00015ad:	eb 3e                	jmp    c00015ed <dlrealloc+0x1ab>
c00015af:	89 f2                	mov    edx,esi
c00015b1:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015b4:	29 fa                	sub    edx,edi
c00015b6:	83 e1 01             	and    ecx,0x1
c00015b9:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015bd:	83 fa 0f             	cmp    edx,0xf
c00015c0:	77 0b                	ja     c00015cd <dlrealloc+0x18b>
c00015c2:	09 ce                	or     esi,ecx
c00015c4:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015c7:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015cb:	eb 20                	jmp    c00015ed <dlrealloc+0x1ab>
c00015cd:	01 fd                	add    ebp,edi
c00015cf:	83 ca 01             	or     edx,0x1
c00015d2:	09 cf                	or     edi,ecx
c00015d4:	83 ec 0c             	sub    esp,0xc
c00015d7:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015da:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c00015dd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015e1:	83 c5 08             	add    ebp,0x8
c00015e4:	55                   	push   ebp
c00015e5:	e8 bd f5 ff ff       	call   c0000ba7 <dlfree>
c00015ea:	83 c4 10             	add    esp,0x10
c00015ed:	83 c4 1c             	add    esp,0x1c
c00015f0:	89 d8                	mov    eax,ebx
c00015f2:	5b                   	pop    ebx
c00015f3:	5e                   	pop    esi
c00015f4:	5f                   	pop    edi
c00015f5:	5d                   	pop    ebp
c00015f6:	c3                   	ret    

c00015f7 <dlmemalign>:
c00015f7:	55                   	push   ebp
c00015f8:	57                   	push   edi
c00015f9:	56                   	push   esi
c00015fa:	53                   	push   ebx
c00015fb:	83 ec 0c             	sub    esp,0xc
c00015fe:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001602:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001606:	83 fa 08             	cmp    edx,0x8
c0001609:	77 10                	ja     c000161b <dlmemalign+0x24>
c000160b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000160f:	83 c4 0c             	add    esp,0xc
c0001612:	5b                   	pop    ebx
c0001613:	5e                   	pop    esi
c0001614:	5f                   	pop    edi
c0001615:	5d                   	pop    ebp
c0001616:	e9 ea f8 ff ff       	jmp    c0000f05 <dlmalloc>
c000161b:	bf 10 00 00 00       	mov    edi,0x10
c0001620:	83 fa 0f             	cmp    edx,0xf
c0001623:	76 13                	jbe    c0001638 <dlmemalign+0x41>
c0001625:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001628:	85 d1                	test   ecx,edx
c000162a:	75 04                	jne    c0001630 <dlmemalign+0x39>
c000162c:	89 d7                	mov    edi,edx
c000162e:	eb 08                	jmp    c0001638 <dlmemalign+0x41>
c0001630:	39 d7                	cmp    edi,edx
c0001632:	73 04                	jae    c0001638 <dlmemalign+0x41>
c0001634:	01 ff                	add    edi,edi
c0001636:	eb f8                	jmp    c0001630 <dlmemalign+0x39>
c0001638:	83 f8 df             	cmp    eax,0xffffffdf
c000163b:	76 07                	jbe    c0001644 <dlmemalign+0x4d>
c000163d:	31 c0                	xor    eax,eax
c000163f:	e9 ce 00 00 00       	jmp    c0001712 <dlmemalign+0x11b>
c0001644:	83 c0 0b             	add    eax,0xb
c0001647:	bd 10 00 00 00       	mov    ebp,0x10
c000164c:	83 f8 0f             	cmp    eax,0xf
c000164f:	76 05                	jbe    c0001656 <dlmemalign+0x5f>
c0001651:	83 e0 f8             	and    eax,0xfffffff8
c0001654:	89 c5                	mov    ebp,eax
c0001656:	83 ec 0c             	sub    esp,0xc
c0001659:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000165d:	50                   	push   eax
c000165e:	e8 a2 f8 ff ff       	call   c0000f05 <dlmalloc>
c0001663:	83 c4 10             	add    esp,0x10
c0001666:	89 c1                	mov    ecx,eax
c0001668:	85 c0                	test   eax,eax
c000166a:	74 d1                	je     c000163d <dlmemalign+0x46>
c000166c:	31 d2                	xor    edx,edx
c000166e:	8d 70 f8             	lea    esi,[eax-0x8]
c0001671:	f7 f7                	div    edi
c0001673:	85 d2                	test   edx,edx
c0001675:	74 62                	je     c00016d9 <dlmemalign+0xe2>
c0001677:	89 f8                	mov    eax,edi
c0001679:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000167d:	f7 d8                	neg    eax
c000167f:	21 c3                	and    ebx,eax
c0001681:	83 eb 08             	sub    ebx,0x8
c0001684:	89 d8                	mov    eax,ebx
c0001686:	29 f0                	sub    eax,esi
c0001688:	83 f8 0f             	cmp    eax,0xf
c000168b:	77 02                	ja     c000168f <dlmemalign+0x98>
c000168d:	01 fb                	add    ebx,edi
c000168f:	89 d8                	mov    eax,ebx
c0001691:	29 f0                	sub    eax,esi
c0001693:	89 c6                	mov    esi,eax
c0001695:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001698:	89 c2                	mov    edx,eax
c000169a:	83 e2 fc             	and    edx,0xfffffffc
c000169d:	29 f2                	sub    edx,esi
c000169f:	a8 02                	test   al,0x2
c00016a1:	74 10                	je     c00016b3 <dlmemalign+0xbc>
c00016a3:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00016a6:	83 ca 02             	or     edx,0x2
c00016a9:	8d 43 08             	lea    eax,[ebx+0x8]
c00016ac:	89 33                	mov    DWORD PTR [ebx],esi
c00016ae:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016b1:	eb 5f                	jmp    c0001712 <dlmemalign+0x11b>
c00016b3:	89 d0                	mov    eax,edx
c00016b5:	83 ec 0c             	sub    esp,0xc
c00016b8:	83 c8 01             	or     eax,0x1
c00016bb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016be:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016c3:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016c6:	83 e0 01             	and    eax,0x1
c00016c9:	09 f0                	or     eax,esi
c00016cb:	89 de                	mov    esi,ebx
c00016cd:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016d0:	51                   	push   ecx
c00016d1:	e8 d1 f4 ff ff       	call   c0000ba7 <dlfree>
c00016d6:	83 c4 10             	add    esp,0x10
c00016d9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016dc:	a8 02                	test   al,0x2
c00016de:	75 2f                	jne    c000170f <dlmemalign+0x118>
c00016e0:	83 e0 fc             	and    eax,0xfffffffc
c00016e3:	8d 55 10             	lea    edx,[ebp+0x10]
c00016e6:	39 c2                	cmp    edx,eax
c00016e8:	73 25                	jae    c000170f <dlmemalign+0x118>
c00016ea:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016ed:	29 e8                	sub    eax,ebp
c00016ef:	83 c8 01             	or     eax,0x1
c00016f2:	83 ec 0c             	sub    esp,0xc
c00016f5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00016f8:	83 c2 08             	add    edx,0x8
c00016fb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016fe:	83 e0 01             	and    eax,0x1
c0001701:	09 c5                	or     ebp,eax
c0001703:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001706:	52                   	push   edx
c0001707:	e8 9b f4 ff ff       	call   c0000ba7 <dlfree>
c000170c:	83 c4 10             	add    esp,0x10
c000170f:	8d 46 08             	lea    eax,[esi+0x8]
c0001712:	83 c4 0c             	add    esp,0xc
c0001715:	5b                   	pop    ebx
c0001716:	5e                   	pop    esi
c0001717:	5f                   	pop    edi
c0001718:	5d                   	pop    ebp
c0001719:	c3                   	ret    

c000171a <dlcalloc>:
c000171a:	53                   	push   ebx
c000171b:	83 ec 14             	sub    esp,0x14
c000171e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001722:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001727:	50                   	push   eax
c0001728:	e8 d8 f7 ff ff       	call   c0000f05 <dlmalloc>
c000172d:	83 c4 10             	add    esp,0x10
c0001730:	89 c3                	mov    ebx,eax
c0001732:	85 c0                	test   eax,eax
c0001734:	74 77                	je     c00017ad <dlcalloc+0x93>
c0001736:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001739:	89 d0                	mov    eax,edx
c000173b:	83 e0 fc             	and    eax,0xfffffffc
c000173e:	80 e2 02             	and    dl,0x2
c0001741:	75 5a                	jne    c000179d <dlcalloc+0x83>
c0001743:	83 e8 04             	sub    eax,0x4
c0001746:	83 f8 27             	cmp    eax,0x27
c0001749:	76 03                	jbe    c000174e <dlcalloc+0x34>
c000174b:	51                   	push   ecx
c000174c:	eb 53                	jmp    c00017a1 <dlcalloc+0x87>
c000174e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001754:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000175b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001762:	83 f8 13             	cmp    eax,0x13
c0001765:	76 46                	jbe    c00017ad <dlcalloc+0x93>
c0001767:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000176e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001775:	83 f8 1b             	cmp    eax,0x1b
c0001778:	76 33                	jbe    c00017ad <dlcalloc+0x93>
c000177a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001781:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001788:	83 f8 23             	cmp    eax,0x23
c000178b:	76 20                	jbe    c00017ad <dlcalloc+0x93>
c000178d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001794:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000179b:	eb 10                	jmp    c00017ad <dlcalloc+0x93>
c000179d:	83 e8 08             	sub    eax,0x8
c00017a0:	52                   	push   edx
c00017a1:	50                   	push   eax
c00017a2:	6a 00                	push   0x0
c00017a4:	53                   	push   ebx
c00017a5:	e8 1a ef ff ff       	call   c00006c4 <memset>
c00017aa:	83 c4 10             	add    esp,0x10
c00017ad:	83 c4 08             	add    esp,0x8
c00017b0:	89 d8                	mov    eax,ebx
c00017b2:	5b                   	pop    ebx
c00017b3:	c3                   	ret    

c00017b4 <dlcfree>:
c00017b4:	e9 ee f3 ff ff       	jmp    c0000ba7 <dlfree>

c00017b9 <dlindependent_calloc>:
c00017b9:	83 ec 28             	sub    esp,0x28
c00017bc:	b9 03 00 00 00       	mov    ecx,0x3
c00017c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017d1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017d5:	e8 b9 fa ff ff       	call   c0001293 <iALLOc>
c00017da:	83 c4 2c             	add    esp,0x2c
c00017dd:	c3                   	ret    

c00017de <dlindependent_comalloc>:
c00017de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017e6:	31 c9                	xor    ecx,ecx
c00017e8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017f0:	e9 9e fa ff ff       	jmp    c0001293 <iALLOc>

c00017f5 <dlvalloc>:
c00017f5:	83 ec 0c             	sub    esp,0xc
c00017f8:	83 3d a0 43 02 c0 00 	cmp    DWORD PTR ds:0xc00243a0,0x0
c00017ff:	75 0a                	jne    c000180b <dlvalloc+0x16>
c0001801:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0001806:	e8 b5 f2 ff ff       	call   c0000ac0 <malloc_consolidate>
c000180b:	50                   	push   eax
c000180c:	50                   	push   eax
c000180d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001811:	ff 35 fc 46 02 c0    	push   DWORD PTR ds:0xc00246fc
c0001817:	e8 db fd ff ff       	call   c00015f7 <dlmemalign>
c000181c:	83 c4 1c             	add    esp,0x1c
c000181f:	c3                   	ret    

c0001820 <dlpvalloc>:
c0001820:	83 ec 0c             	sub    esp,0xc
c0001823:	83 3d a0 43 02 c0 00 	cmp    DWORD PTR ds:0xc00243a0,0x0
c000182a:	75 0a                	jne    c0001836 <dlpvalloc+0x16>
c000182c:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0001831:	e8 8a f2 ff ff       	call   c0000ac0 <malloc_consolidate>
c0001836:	52                   	push   edx
c0001837:	a1 fc 46 02 c0       	mov    eax,ds:0xc00246fc
c000183c:	52                   	push   edx
c000183d:	89 c1                	mov    ecx,eax
c000183f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001843:	f7 d9                	neg    ecx
c0001845:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001849:	21 ca                	and    edx,ecx
c000184b:	52                   	push   edx
c000184c:	50                   	push   eax
c000184d:	e8 a5 fd ff ff       	call   c00015f7 <dlmemalign>
c0001852:	83 c4 1c             	add    esp,0x1c
c0001855:	c3                   	ret    

c0001856 <dlmalloc_trim>:
c0001856:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c000185b:	e8 60 f2 ff ff       	call   c0000ac0 <malloc_consolidate>
c0001860:	31 c0                	xor    eax,eax
c0001862:	c3                   	ret    

c0001863 <dlmalloc_usable_size>:
c0001863:	53                   	push   ebx
c0001864:	31 c0                	xor    eax,eax
c0001866:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000186a:	85 c9                	test   ecx,ecx
c000186c:	74 24                	je     c0001892 <dlmalloc_usable_size+0x2f>
c000186e:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001871:	f6 c2 02             	test   dl,0x2
c0001874:	74 08                	je     c000187e <dlmalloc_usable_size+0x1b>
c0001876:	83 e2 fc             	and    edx,0xfffffffc
c0001879:	8d 42 f8             	lea    eax,[edx-0x8]
c000187c:	eb 14                	jmp    c0001892 <dlmalloc_usable_size+0x2f>
c000187e:	89 d3                	mov    ebx,edx
c0001880:	31 c0                	xor    eax,eax
c0001882:	83 e3 fe             	and    ebx,0xfffffffe
c0001885:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000188a:	74 06                	je     c0001892 <dlmalloc_usable_size+0x2f>
c000188c:	83 e2 fc             	and    edx,0xfffffffc
c000188f:	8d 42 fc             	lea    eax,[edx-0x4]
c0001892:	5b                   	pop    ebx
c0001893:	c3                   	ret    

c0001894 <dlmallinfo>:
c0001894:	55                   	push   ebp
c0001895:	57                   	push   edi
c0001896:	56                   	push   esi
c0001897:	53                   	push   ebx
c0001898:	83 ec 08             	sub    esp,0x8
c000189b:	83 3d cc 43 02 c0 00 	cmp    DWORD PTR ds:0xc00243cc,0x0
c00018a2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00018a6:	75 0a                	jne    c00018b2 <dlmallinfo+0x1e>
c00018a8:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c00018ad:	e8 0e f2 ff ff       	call   c0000ac0 <malloc_consolidate>
c00018b2:	a1 cc 43 02 c0       	mov    eax,ds:0xc00243cc
c00018b7:	31 ed                	xor    ebp,ebp
c00018b9:	31 c9                	xor    ecx,ecx
c00018bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018be:	83 e0 fc             	and    eax,0xfffffffc
c00018c1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018c5:	31 c0                	xor    eax,eax
c00018c7:	8b 14 85 a4 43 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbc5c]
c00018ce:	85 d2                	test   edx,edx
c00018d0:	74 0e                	je     c00018e0 <dlmallinfo+0x4c>
c00018d2:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018d5:	45                   	inc    ebp
c00018d6:	83 e6 fc             	and    esi,0xfffffffc
c00018d9:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018dc:	01 f1                	add    ecx,esi
c00018de:	eb ee                	jmp    c00018ce <dlmallinfo+0x3a>
c00018e0:	40                   	inc    eax
c00018e1:	83 f8 0a             	cmp    eax,0xa
c00018e4:	75 e1                	jne    c00018c7 <dlmallinfo+0x33>
c00018e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018ea:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018f1:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018f4:	b8 d4 43 02 c0       	mov    eax,0xc00243d4
c00018f9:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018fc:	39 f0                	cmp    eax,esi
c00018fe:	74 10                	je     c0001910 <dlmallinfo+0x7c>
c0001900:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001903:	ff 04 24             	inc    DWORD PTR [esp]
c0001906:	83 e7 fc             	and    edi,0xfffffffc
c0001909:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c000190c:	01 fa                	add    edx,edi
c000190e:	eb ec                	jmp    c00018fc <dlmallinfo+0x68>
c0001910:	83 c0 08             	add    eax,0x8
c0001913:	3d cc 46 02 c0       	cmp    eax,0xc00246cc
c0001918:	75 df                	jne    c00018f9 <dlmallinfo+0x65>
c000191a:	a1 08 47 02 c0       	mov    eax,ds:0xc0024708
c000191f:	8b 35 f0 46 02 c0    	mov    esi,DWORD PTR ds:0xc00246f0
c0001925:	89 03                	mov    DWORD PTR [ebx],eax
c0001927:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000192a:	29 d0                	sub    eax,edx
c000192c:	8b 35 04 47 02 c0    	mov    esi,DWORD PTR ds:0xc0024704
c0001932:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001935:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001938:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000193b:	8b 35 14 47 02 c0    	mov    esi,DWORD PTR ds:0xc0024714
c0001941:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001945:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001948:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000194b:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000194e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001951:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001954:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001957:	83 c4 08             	add    esp,0x8
c000195a:	89 d8                	mov    eax,ebx
c000195c:	5b                   	pop    ebx
c000195d:	5e                   	pop    esi
c000195e:	5f                   	pop    edi
c000195f:	5d                   	pop    ebp
c0001960:	c2 04 00             	ret    0x4

c0001963 <dlmalloc_stats>:
c0001963:	83 ec 30             	sub    esp,0x30
c0001966:	8d 44 24 08          	lea    eax,[esp+0x8]
c000196a:	50                   	push   eax
c000196b:	e8 24 ff ff ff       	call   c0001894 <dlmallinfo>
c0001970:	83 c4 30             	add    esp,0x30
c0001973:	c3                   	ret    

c0001974 <dlmallopt>:
c0001974:	56                   	push   esi
c0001975:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c000197a:	53                   	push   ebx
c000197b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000197f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001983:	e8 38 f1 ff ff       	call   c0000ac0 <malloc_consolidate>
c0001988:	8d 46 04             	lea    eax,[esi+0x4]
c000198b:	83 f8 05             	cmp    eax,0x5
c000198e:	77 67                	ja     c00019f7 <dlmallopt+0x83>
c0001990:	ff 24 85 24 04 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfbdc]
c0001997:	83 fb 50             	cmp    ebx,0x50
c000199a:	77 5b                	ja     c00019f7 <dlmallopt+0x83>
c000199c:	ba 08 00 00 00       	mov    edx,0x8
c00019a1:	85 db                	test   ebx,ebx
c00019a3:	74 12                	je     c00019b7 <dlmallopt+0x43>
c00019a5:	83 c3 0b             	add    ebx,0xb
c00019a8:	ba 10 00 00 00       	mov    edx,0x10
c00019ad:	83 fb 0f             	cmp    ebx,0xf
c00019b0:	76 05                	jbe    c00019b7 <dlmallopt+0x43>
c00019b2:	89 da                	mov    edx,ebx
c00019b4:	83 e2 f8             	and    edx,0xfffffff8
c00019b7:	a1 a0 43 02 c0       	mov    eax,ds:0xc00243a0
c00019bc:	83 e0 03             	and    eax,0x3
c00019bf:	09 d0                	or     eax,edx
c00019c1:	a3 a0 43 02 c0       	mov    ds:0xc00243a0,eax
c00019c6:	eb 31                	jmp    c00019f9 <dlmallopt+0x85>
c00019c8:	89 1d e4 46 02 c0    	mov    DWORD PTR ds:0xc00246e4,ebx
c00019ce:	eb 06                	jmp    c00019d6 <dlmallopt+0x62>
c00019d0:	89 1d e8 46 02 c0    	mov    DWORD PTR ds:0xc00246e8,ebx
c00019d6:	be 01 00 00 00       	mov    esi,0x1
c00019db:	eb 1c                	jmp    c00019f9 <dlmallopt+0x85>
c00019dd:	89 1d ec 46 02 c0    	mov    DWORD PTR ds:0xc00246ec,ebx
c00019e3:	eb f1                	jmp    c00019d6 <dlmallopt+0x62>
c00019e5:	31 f6                	xor    esi,esi
c00019e7:	85 db                	test   ebx,ebx
c00019e9:	75 0e                	jne    c00019f9 <dlmallopt+0x85>
c00019eb:	c7 05 f4 46 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00246f4,0x0
c00019f5:	eb df                	jmp    c00019d6 <dlmallopt+0x62>
c00019f7:	31 f6                	xor    esi,esi
c00019f9:	5b                   	pop    ebx
c00019fa:	89 f0                	mov    eax,esi
c00019fc:	5e                   	pop    esi
c00019fd:	c3                   	ret    

c00019fe <disk_status>:
c00019fe:	31 c0                	xor    eax,eax
c0001a00:	c3                   	ret    

c0001a01 <disk_initialize>:
c0001a01:	31 c0                	xor    eax,eax
c0001a03:	c3                   	ret    

c0001a04 <disk_read>:
c0001a04:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a09:	0f b6 04 85 c0 5c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda340]
c0001a11:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a15:	e9 a4 8d 01 00       	jmp    c001a7be <fatWrapperReadDisk>

c0001a1a <disk_write>:
c0001a1a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a1f:	0f b6 04 85 c0 5c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda340]
c0001a27:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a2b:	e9 d9 8d 01 00       	jmp    c001a809 <fatWrapperWriteDisk>

c0001a30 <disk_ioctl>:
c0001a30:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a39:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a3e:	0f b6 04 85 c0 5c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda340]
c0001a46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a4a:	e9 05 8e 01 00       	jmp    c001a854 <fatWrapperIoctl>

c0001a4f <ld_word>:
c0001a4f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a53:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a56:	c1 e2 08             	shl    edx,0x8
c0001a59:	09 d0                	or     eax,edx
c0001a5b:	c3                   	ret    

c0001a5c <ld_dword>:
c0001a5c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a60:	89 d1                	mov    ecx,edx
c0001a62:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a66:	c1 e1 08             	shl    ecx,0x8
c0001a69:	09 ca                	or     edx,ecx
c0001a6b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a6e:	c1 e2 08             	shl    edx,0x8
c0001a71:	09 d0                	or     eax,edx
c0001a73:	c3                   	ret    

c0001a74 <ld_qword>:
c0001a74:	57                   	push   edi
c0001a75:	56                   	push   esi
c0001a76:	53                   	push   ebx
c0001a77:	31 db                	xor    ebx,ebx
c0001a79:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a7c:	89 df                	mov    edi,ebx
c0001a7e:	89 ce                	mov    esi,ecx
c0001a80:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a84:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a88:	c1 e6 08             	shl    esi,0x8
c0001a8b:	09 f2                	or     edx,esi
c0001a8d:	89 d6                	mov    esi,edx
c0001a8f:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a93:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a97:	c1 e6 08             	shl    esi,0x8
c0001a9a:	09 f2                	or     edx,esi
c0001a9c:	89 d6                	mov    esi,edx
c0001a9e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001aa2:	0f a4 f7 08          	shld   edi,esi,0x8
c0001aa6:	c1 e6 08             	shl    esi,0x8
c0001aa9:	89 fb                	mov    ebx,edi
c0001aab:	09 f2                	or     edx,esi
c0001aad:	89 d1                	mov    ecx,edx
c0001aaf:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001ab3:	89 da                	mov    edx,ebx
c0001ab5:	5b                   	pop    ebx
c0001ab6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ab9:	c1 e1 08             	shl    ecx,0x8
c0001abc:	5e                   	pop    esi
c0001abd:	09 c8                	or     eax,ecx
c0001abf:	5f                   	pop    edi
c0001ac0:	c3                   	ret    

c0001ac1 <st_word>:
c0001ac1:	66 89 10             	mov    WORD PTR [eax],dx
c0001ac4:	c3                   	ret    

c0001ac5 <st_dword>:
c0001ac5:	89 10                	mov    DWORD PTR [eax],edx
c0001ac7:	c3                   	ret    

c0001ac8 <st_qword>:
c0001ac8:	89 10                	mov    DWORD PTR [eax],edx
c0001aca:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001acd:	c3                   	ret    

c0001ace <mem_cpy>:
c0001ace:	85 c9                	test   ecx,ecx
c0001ad0:	74 10                	je     c0001ae2 <mem_cpy+0x14>
c0001ad2:	57                   	push   edi
c0001ad3:	01 c1                	add    ecx,eax
c0001ad5:	56                   	push   esi
c0001ad6:	89 c7                	mov    edi,eax
c0001ad8:	89 d6                	mov    esi,edx
c0001ada:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001adb:	39 f9                	cmp    ecx,edi
c0001add:	75 fb                	jne    c0001ada <mem_cpy+0xc>
c0001adf:	5e                   	pop    esi
c0001ae0:	5f                   	pop    edi
c0001ae1:	c3                   	ret    
c0001ae2:	c3                   	ret    

c0001ae3 <mem_set>:
c0001ae3:	01 c1                	add    ecx,eax
c0001ae5:	40                   	inc    eax
c0001ae6:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001ae9:	39 c8                	cmp    eax,ecx
c0001aeb:	75 f8                	jne    c0001ae5 <mem_set+0x2>
c0001aed:	c3                   	ret    

c0001aee <mem_cmp>:
c0001aee:	57                   	push   edi
c0001aef:	56                   	push   esi
c0001af0:	89 c6                	mov    esi,eax
c0001af2:	53                   	push   ebx
c0001af3:	46                   	inc    esi
c0001af4:	42                   	inc    edx
c0001af5:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001af9:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001afd:	29 fb                	sub    ebx,edi
c0001aff:	89 cf                	mov    edi,ecx
c0001b01:	29 f7                	sub    edi,esi
c0001b03:	01 c7                	add    edi,eax
c0001b05:	74 04                	je     c0001b0b <mem_cmp+0x1d>
c0001b07:	85 db                	test   ebx,ebx
c0001b09:	74 e8                	je     c0001af3 <mem_cmp+0x5>
c0001b0b:	89 d8                	mov    eax,ebx
c0001b0d:	5b                   	pop    ebx
c0001b0e:	5e                   	pop    esi
c0001b0f:	5f                   	pop    edi
c0001b10:	c3                   	ret    

c0001b11 <chk_chr>:
c0001b11:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b14:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b17:	74 07                	je     c0001b20 <chk_chr+0xf>
c0001b19:	39 d1                	cmp    ecx,edx
c0001b1b:	74 03                	je     c0001b20 <chk_chr+0xf>
c0001b1d:	40                   	inc    eax
c0001b1e:	eb f1                	jmp    c0001b11 <chk_chr>
c0001b20:	89 c8                	mov    eax,ecx
c0001b22:	c3                   	ret    

c0001b23 <dbc_1st>:
c0001b23:	31 c0                	xor    eax,eax
c0001b25:	c3                   	ret    

c0001b26 <dbc_2nd>:
c0001b26:	31 c0                	xor    eax,eax
c0001b28:	c3                   	ret    

c0001b29 <tchar2uni>:
c0001b29:	57                   	push   edi
c0001b2a:	89 c7                	mov    edi,eax
c0001b2c:	56                   	push   esi
c0001b2d:	53                   	push   ebx
c0001b2e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b30:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b32:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b35:	84 c9                	test   cl,cl
c0001b37:	78 0a                	js     c0001b43 <tchar2uni+0x1a>
c0001b39:	0f b6 d1             	movzx  edx,cl
c0001b3c:	89 f3                	mov    ebx,esi
c0001b3e:	e9 9f 00 00 00       	jmp    c0001be2 <tchar2uni+0xb9>
c0001b43:	88 ca                	mov    dl,cl
c0001b45:	83 e2 e0             	and    edx,0xffffffe0
c0001b48:	80 fa c0             	cmp    dl,0xc0
c0001b4b:	75 0c                	jne    c0001b59 <tchar2uni+0x30>
c0001b4d:	89 ca                	mov    edx,ecx
c0001b4f:	b9 01 00 00 00       	mov    ecx,0x1
c0001b54:	83 e2 1f             	and    edx,0x1f
c0001b57:	eb 2e                	jmp    c0001b87 <tchar2uni+0x5e>
c0001b59:	88 ca                	mov    dl,cl
c0001b5b:	83 e2 f0             	and    edx,0xfffffff0
c0001b5e:	80 fa e0             	cmp    dl,0xe0
c0001b61:	75 0c                	jne    c0001b6f <tchar2uni+0x46>
c0001b63:	89 ca                	mov    edx,ecx
c0001b65:	b9 02 00 00 00       	mov    ecx,0x2
c0001b6a:	83 e2 0f             	and    edx,0xf
c0001b6d:	eb 18                	jmp    c0001b87 <tchar2uni+0x5e>
c0001b6f:	88 ca                	mov    dl,cl
c0001b71:	83 e2 f8             	and    edx,0xfffffff8
c0001b74:	88 d0                	mov    al,dl
c0001b76:	83 ca ff             	or     edx,0xffffffff
c0001b79:	3c f0                	cmp    al,0xf0
c0001b7b:	75 6c                	jne    c0001be9 <tchar2uni+0xc0>
c0001b7d:	89 ca                	mov    edx,ecx
c0001b7f:	b9 03 00 00 00       	mov    ecx,0x3
c0001b84:	83 e2 07             	and    edx,0x7
c0001b87:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b8b:	46                   	inc    esi
c0001b8c:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b8f:	88 c8                	mov    al,cl
c0001b91:	83 e0 c0             	and    eax,0xffffffc0
c0001b94:	3c 80                	cmp    al,0x80
c0001b96:	75 4e                	jne    c0001be6 <tchar2uni+0xbd>
c0001b98:	c1 e2 06             	shl    edx,0x6
c0001b9b:	83 e1 3f             	and    ecx,0x3f
c0001b9e:	09 ca                	or     edx,ecx
c0001ba0:	39 de                	cmp    esi,ebx
c0001ba2:	75 e7                	jne    c0001b8b <tchar2uni+0x62>
c0001ba4:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001baa:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001bb0:	76 34                	jbe    c0001be6 <tchar2uni+0xbd>
c0001bb2:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001bb5:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001bbb:	77 29                	ja     c0001be6 <tchar2uni+0xbd>
c0001bbd:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bc3:	76 1d                	jbe    c0001be2 <tchar2uni+0xb9>
c0001bc5:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bcb:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bd1:	c1 e1 06             	shl    ecx,0x6
c0001bd4:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bda:	09 ca                	or     edx,ecx
c0001bdc:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001be2:	89 1f                	mov    DWORD PTR [edi],ebx
c0001be4:	eb 03                	jmp    c0001be9 <tchar2uni+0xc0>
c0001be6:	83 ca ff             	or     edx,0xffffffff
c0001be9:	5b                   	pop    ebx
c0001bea:	89 d0                	mov    eax,edx
c0001bec:	5e                   	pop    esi
c0001bed:	5f                   	pop    edi
c0001bee:	c3                   	ret    

c0001bef <put_utf>:
c0001bef:	53                   	push   ebx
c0001bf0:	83 f8 7f             	cmp    eax,0x7f
c0001bf3:	89 c3                	mov    ebx,eax
c0001bf5:	b0 00                	mov    al,0x0
c0001bf7:	77 11                	ja     c0001c0a <put_utf+0x1b>
c0001bf9:	85 c9                	test   ecx,ecx
c0001bfb:	0f 84 e5 00 00 00    	je     c0001ce6 <put_utf+0xf7>
c0001c01:	88 1a                	mov    BYTE PTR [edx],bl
c0001c03:	b0 01                	mov    al,0x1
c0001c05:	e9 dc 00 00 00       	jmp    c0001ce6 <put_utf+0xf7>
c0001c0a:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c10:	77 23                	ja     c0001c35 <put_utf+0x46>
c0001c12:	83 f9 01             	cmp    ecx,0x1
c0001c15:	0f 86 cb 00 00 00    	jbe    c0001ce6 <put_utf+0xf7>
c0001c1b:	89 d8                	mov    eax,ebx
c0001c1d:	83 e3 3f             	and    ebx,0x3f
c0001c20:	c1 e8 06             	shr    eax,0x6
c0001c23:	83 cb 80             	or     ebx,0xffffff80
c0001c26:	83 c8 c0             	or     eax,0xffffffc0
c0001c29:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c2c:	88 02                	mov    BYTE PTR [edx],al
c0001c2e:	b0 02                	mov    al,0x2
c0001c30:	e9 b1 00 00 00       	jmp    c0001ce6 <put_utf+0xf7>
c0001c35:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c3b:	77 40                	ja     c0001c7d <put_utf+0x8e>
c0001c3d:	83 f9 02             	cmp    ecx,0x2
c0001c40:	0f 86 a0 00 00 00    	jbe    c0001ce6 <put_utf+0xf7>
c0001c46:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c4c:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c52:	0f 86 8e 00 00 00    	jbe    c0001ce6 <put_utf+0xf7>
c0001c58:	89 d8                	mov    eax,ebx
c0001c5a:	c1 e8 0c             	shr    eax,0xc
c0001c5d:	83 c8 e0             	or     eax,0xffffffe0
c0001c60:	88 02                	mov    BYTE PTR [edx],al
c0001c62:	89 d8                	mov    eax,ebx
c0001c64:	c1 e8 06             	shr    eax,0x6
c0001c67:	83 e3 3f             	and    ebx,0x3f
c0001c6a:	83 e0 3f             	and    eax,0x3f
c0001c6d:	83 cb 80             	or     ebx,0xffffff80
c0001c70:	83 c8 80             	or     eax,0xffffff80
c0001c73:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c76:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c79:	b0 03                	mov    al,0x3
c0001c7b:	eb 69                	jmp    c0001ce6 <put_utf+0xf7>
c0001c7d:	83 f9 03             	cmp    ecx,0x3
c0001c80:	76 64                	jbe    c0001ce6 <put_utf+0xf7>
c0001c82:	89 d9                	mov    ecx,ebx
c0001c84:	66 31 c9             	xor    cx,cx
c0001c87:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c8d:	0f b7 c3             	movzx  eax,bx
c0001c90:	c1 e9 06             	shr    ecx,0x6
c0001c93:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c99:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c9f:	77 43                	ja     c0001ce4 <put_utf+0xf5>
c0001ca1:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001ca7:	77 3b                	ja     c0001ce4 <put_utf+0xf5>
c0001ca9:	09 cb                	or     ebx,ecx
c0001cab:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001cb1:	89 d8                	mov    eax,ebx
c0001cb3:	c1 e8 12             	shr    eax,0x12
c0001cb6:	83 c8 f0             	or     eax,0xfffffff0
c0001cb9:	88 02                	mov    BYTE PTR [edx],al
c0001cbb:	89 d8                	mov    eax,ebx
c0001cbd:	c1 e8 0c             	shr    eax,0xc
c0001cc0:	83 e0 3f             	and    eax,0x3f
c0001cc3:	83 c8 80             	or     eax,0xffffff80
c0001cc6:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cc9:	89 d8                	mov    eax,ebx
c0001ccb:	c1 e8 06             	shr    eax,0x6
c0001cce:	83 e3 3f             	and    ebx,0x3f
c0001cd1:	83 e0 3f             	and    eax,0x3f
c0001cd4:	83 cb 80             	or     ebx,0xffffff80
c0001cd7:	83 c8 80             	or     eax,0xffffff80
c0001cda:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001cdd:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ce0:	b0 04                	mov    al,0x4
c0001ce2:	eb 02                	jmp    c0001ce6 <put_utf+0xf7>
c0001ce4:	31 c0                	xor    eax,eax
c0001ce6:	5b                   	pop    ebx
c0001ce7:	c3                   	ret    

c0001ce8 <clst2sect>:
c0001ce8:	89 c1                	mov    ecx,eax
c0001cea:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ced:	83 ea 02             	sub    edx,0x2
c0001cf0:	83 e8 02             	sub    eax,0x2
c0001cf3:	39 d0                	cmp    eax,edx
c0001cf5:	76 0d                	jbe    c0001d04 <clst2sect+0x1c>
c0001cf7:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cfb:	f7 e2                	mul    edx
c0001cfd:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001d00:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001d03:	c3                   	ret    
c0001d04:	31 c0                	xor    eax,eax
c0001d06:	31 d2                	xor    edx,edx
c0001d08:	c3                   	ret    

c0001d09 <clmt_clust>:
c0001d09:	57                   	push   edi
c0001d0a:	89 cf                	mov    edi,ecx
c0001d0c:	56                   	push   esi
c0001d0d:	89 d6                	mov    esi,edx
c0001d0f:	53                   	push   ebx
c0001d10:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d13:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d15:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d19:	c1 ef 09             	shr    edi,0x9
c0001d1c:	89 f2                	mov    edx,esi
c0001d1e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d21:	89 f9                	mov    ecx,edi
c0001d23:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d27:	31 ff                	xor    edi,edi
c0001d29:	57                   	push   edi
c0001d2a:	56                   	push   esi
c0001d2b:	51                   	push   ecx
c0001d2c:	52                   	push   edx
c0001d2d:	e8 da d7 01 00       	call   c001f50c <__udivdi3>
c0001d32:	83 c4 10             	add    esp,0x10
c0001d35:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d37:	85 d2                	test   edx,edx
c0001d39:	74 10                	je     c0001d4b <clmt_clust+0x42>
c0001d3b:	39 d0                	cmp    eax,edx
c0001d3d:	72 07                	jb     c0001d46 <clmt_clust+0x3d>
c0001d3f:	29 d0                	sub    eax,edx
c0001d41:	83 c3 08             	add    ebx,0x8
c0001d44:	eb ef                	jmp    c0001d35 <clmt_clust+0x2c>
c0001d46:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d49:	89 c2                	mov    edx,eax
c0001d4b:	5b                   	pop    ebx
c0001d4c:	89 d0                	mov    eax,edx
c0001d4e:	5e                   	pop    esi
c0001d4f:	5f                   	pop    edi
c0001d50:	c3                   	ret    

c0001d51 <pick_lfn>:
c0001d51:	55                   	push   ebp
c0001d52:	57                   	push   edi
c0001d53:	56                   	push   esi
c0001d54:	89 d6                	mov    esi,edx
c0001d56:	53                   	push   ebx
c0001d57:	89 c3                	mov    ebx,eax
c0001d59:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d5c:	e8 ee fc ff ff       	call   c0001a4f <ld_word>
c0001d61:	66 85 c0             	test   ax,ax
c0001d64:	74 04                	je     c0001d6a <pick_lfn+0x19>
c0001d66:	31 c0                	xor    eax,eax
c0001d68:	eb 5c                	jmp    c0001dc6 <pick_lfn+0x75>
c0001d6a:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d6d:	83 e1 bf             	and    ecx,0xffffffbf
c0001d70:	bd 01 00 00 00       	mov    ebp,0x1
c0001d75:	49                   	dec    ecx
c0001d76:	31 ff                	xor    edi,edi
c0001d78:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d7b:	0f b6 87 40 05 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdfac0]
c0001d82:	01 f0                	add    eax,esi
c0001d84:	e8 c6 fc ff ff       	call   c0001a4f <ld_word>
c0001d89:	66 85 ed             	test   bp,bp
c0001d8c:	74 11                	je     c0001d9f <pick_lfn+0x4e>
c0001d8e:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d94:	77 d0                	ja     c0001d66 <pick_lfn+0x15>
c0001d96:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d9a:	89 c5                	mov    ebp,eax
c0001d9c:	41                   	inc    ecx
c0001d9d:	eb 04                	jmp    c0001da3 <pick_lfn+0x52>
c0001d9f:	66 40                	inc    ax
c0001da1:	75 c3                	jne    c0001d66 <pick_lfn+0x15>
c0001da3:	47                   	inc    edi
c0001da4:	83 ff 0d             	cmp    edi,0xd
c0001da7:	75 d2                	jne    c0001d7b <pick_lfn+0x2a>
c0001da9:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001dac:	74 13                	je     c0001dc1 <pick_lfn+0x70>
c0001dae:	66 85 ed             	test   bp,bp
c0001db1:	74 0e                	je     c0001dc1 <pick_lfn+0x70>
c0001db3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001db9:	77 ab                	ja     c0001d66 <pick_lfn+0x15>
c0001dbb:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001dc1:	b8 01 00 00 00       	mov    eax,0x1
c0001dc6:	5b                   	pop    ebx
c0001dc7:	5e                   	pop    esi
c0001dc8:	5f                   	pop    edi
c0001dc9:	5d                   	pop    ebp
c0001dca:	c3                   	ret    

c0001dcb <put_lfn>:
c0001dcb:	55                   	push   ebp
c0001dcc:	31 ed                	xor    ebp,ebp
c0001dce:	57                   	push   edi
c0001dcf:	89 d7                	mov    edi,edx
c0001dd1:	56                   	push   esi
c0001dd2:	31 f6                	xor    esi,esi
c0001dd4:	53                   	push   ebx
c0001dd5:	83 ec 08             	sub    esp,0x8
c0001dd8:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ddb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ddf:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001de2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001de8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001deb:	31 d2                	xor    edx,edx
c0001ded:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001df1:	e8 cb fc ff ff       	call   c0001ac1 <st_word>
c0001df6:	0f b6 d9             	movzx  ebx,cl
c0001df9:	4b                   	dec    ebx
c0001dfa:	6b db 0d             	imul   ebx,ebx,0xd
c0001dfd:	66 83 fe ff          	cmp    si,0xffff
c0001e01:	74 08                	je     c0001e0b <put_lfn+0x40>
c0001e03:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e06:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e0a:	43                   	inc    ebx
c0001e0b:	0f b6 85 40 05 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdfac0]
c0001e12:	0f b7 d6             	movzx  edx,si
c0001e15:	01 f8                	add    eax,edi
c0001e17:	e8 a5 fc ff ff       	call   c0001ac1 <st_word>
c0001e1c:	66 85 f6             	test   si,si
c0001e1f:	75 03                	jne    c0001e24 <put_lfn+0x59>
c0001e21:	83 ce ff             	or     esi,0xffffffff
c0001e24:	45                   	inc    ebp
c0001e25:	83 fd 0d             	cmp    ebp,0xd
c0001e28:	75 d3                	jne    c0001dfd <put_lfn+0x32>
c0001e2a:	66 46                	inc    si
c0001e2c:	74 0a                	je     c0001e38 <put_lfn+0x6d>
c0001e2e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e31:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e36:	75 09                	jne    c0001e41 <put_lfn+0x76>
c0001e38:	88 c8                	mov    al,cl
c0001e3a:	83 c8 40             	or     eax,0x40
c0001e3d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e41:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e45:	88 07                	mov    BYTE PTR [edi],al
c0001e47:	83 c4 08             	add    esp,0x8
c0001e4a:	5b                   	pop    ebx
c0001e4b:	5e                   	pop    esi
c0001e4c:	5f                   	pop    edi
c0001e4d:	5d                   	pop    ebp
c0001e4e:	c3                   	ret    

c0001e4f <gen_numname>:
c0001e4f:	57                   	push   edi
c0001e50:	89 cf                	mov    edi,ecx
c0001e52:	56                   	push   esi
c0001e53:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e58:	53                   	push   ebx
c0001e59:	89 c6                	mov    esi,eax
c0001e5b:	83 ec 10             	sub    esp,0x10
c0001e5e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e62:	e8 67 fc ff ff       	call   c0001ace <mem_cpy>
c0001e67:	83 fb 05             	cmp    ebx,0x5
c0001e6a:	76 2d                	jbe    c0001e99 <gen_numname+0x4a>
c0001e6c:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e6f:	66 85 c0             	test   ax,ax
c0001e72:	74 25                	je     c0001e99 <gen_numname+0x4a>
c0001e74:	83 c7 02             	add    edi,0x2
c0001e77:	ba 10 00 00 00       	mov    edx,0x10
c0001e7c:	89 c1                	mov    ecx,eax
c0001e7e:	01 db                	add    ebx,ebx
c0001e80:	66 d1 e8             	shr    ax,1
c0001e83:	83 e1 01             	and    ecx,0x1
c0001e86:	01 cb                	add    ebx,ecx
c0001e88:	0f ba e3 10          	bt     ebx,0x10
c0001e8c:	73 06                	jae    c0001e94 <gen_numname+0x45>
c0001e8e:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e94:	4a                   	dec    edx
c0001e95:	75 e5                	jne    c0001e7c <gen_numname+0x2d>
c0001e97:	eb d3                	jmp    c0001e6c <gen_numname+0x1d>
c0001e99:	b8 07 00 00 00       	mov    eax,0x7
c0001e9e:	88 d9                	mov    cl,bl
c0001ea0:	83 e1 0f             	and    ecx,0xf
c0001ea3:	8d 51 30             	lea    edx,[ecx+0x30]
c0001ea6:	80 fa 39             	cmp    dl,0x39
c0001ea9:	76 03                	jbe    c0001eae <gen_numname+0x5f>
c0001eab:	8d 51 37             	lea    edx,[ecx+0x37]
c0001eae:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001eb1:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001eb5:	89 da                	mov    edx,ebx
c0001eb7:	c1 ea 04             	shr    edx,0x4
c0001eba:	83 fb 0f             	cmp    ebx,0xf
c0001ebd:	76 06                	jbe    c0001ec5 <gen_numname+0x76>
c0001ebf:	89 c8                	mov    eax,ecx
c0001ec1:	89 d3                	mov    ebx,edx
c0001ec3:	eb d9                	jmp    c0001e9e <gen_numname+0x4f>
c0001ec5:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001eca:	31 d2                	xor    edx,edx
c0001ecc:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001ecf:	8d 04 16             	lea    eax,[esi+edx*1]
c0001ed2:	39 ca                	cmp    edx,ecx
c0001ed4:	73 18                	jae    c0001eee <gen_numname+0x9f>
c0001ed6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ed9:	3c 20                	cmp    al,0x20
c0001edb:	74 11                	je     c0001eee <gen_numname+0x9f>
c0001edd:	e8 41 fc ff ff       	call   c0001b23 <dbc_1st>
c0001ee2:	85 c0                	test   eax,eax
c0001ee4:	74 05                	je     c0001eeb <gen_numname+0x9c>
c0001ee6:	39 d3                	cmp    ebx,edx
c0001ee8:	74 04                	je     c0001eee <gen_numname+0x9f>
c0001eea:	42                   	inc    edx
c0001eeb:	42                   	inc    edx
c0001eec:	eb e1                	jmp    c0001ecf <gen_numname+0x80>
c0001eee:	b0 20                	mov    al,0x20
c0001ef0:	83 f9 07             	cmp    ecx,0x7
c0001ef3:	77 05                	ja     c0001efa <gen_numname+0xab>
c0001ef5:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ef9:	41                   	inc    ecx
c0001efa:	42                   	inc    edx
c0001efb:	83 fa 07             	cmp    edx,0x7
c0001efe:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001f02:	76 ea                	jbe    c0001eee <gen_numname+0x9f>
c0001f04:	83 c4 10             	add    esp,0x10
c0001f07:	5b                   	pop    ebx
c0001f08:	5e                   	pop    esi
c0001f09:	5f                   	pop    edi
c0001f0a:	c3                   	ret    

c0001f0b <sum_sfn>:
c0001f0b:	31 c9                	xor    ecx,ecx
c0001f0d:	31 d2                	xor    edx,edx
c0001f0f:	d0 ca                	ror    dl,1
c0001f11:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f14:	41                   	inc    ecx
c0001f15:	83 f9 0b             	cmp    ecx,0xb
c0001f18:	75 f5                	jne    c0001f0f <sum_sfn+0x4>
c0001f1a:	88 d0                	mov    al,dl
c0001f1c:	c3                   	ret    

c0001f1d <xdir_sum>:
c0001f1d:	56                   	push   esi
c0001f1e:	31 c9                	xor    ecx,ecx
c0001f20:	53                   	push   ebx
c0001f21:	31 d2                	xor    edx,edx
c0001f23:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f27:	43                   	inc    ebx
c0001f28:	c1 e3 05             	shl    ebx,0x5
c0001f2b:	83 fa 02             	cmp    edx,0x2
c0001f2e:	74 0b                	je     c0001f3b <xdir_sum+0x1e>
c0001f30:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f34:	66 d1 c9             	ror    cx,1
c0001f37:	01 f1                	add    ecx,esi
c0001f39:	eb 05                	jmp    c0001f40 <xdir_sum+0x23>
c0001f3b:	ba 03 00 00 00       	mov    edx,0x3
c0001f40:	42                   	inc    edx
c0001f41:	39 d3                	cmp    ebx,edx
c0001f43:	77 e6                	ja     c0001f2b <xdir_sum+0xe>
c0001f45:	5b                   	pop    ebx
c0001f46:	89 c8                	mov    eax,ecx
c0001f48:	5e                   	pop    esi
c0001f49:	c3                   	ret    

c0001f4a <xsum32>:
c0001f4a:	d1 ca                	ror    edx,1
c0001f4c:	0f b6 c0             	movzx  eax,al
c0001f4f:	01 d0                	add    eax,edx
c0001f51:	c3                   	ret    

c0001f52 <get_xfileinfo>:
c0001f52:	55                   	push   ebp
c0001f53:	31 c9                	xor    ecx,ecx
c0001f55:	57                   	push   edi
c0001f56:	bd 40 00 00 00       	mov    ebp,0x40
c0001f5b:	56                   	push   esi
c0001f5c:	31 ff                	xor    edi,edi
c0001f5e:	53                   	push   ebx
c0001f5f:	89 c6                	mov    esi,eax
c0001f61:	83 ec 0c             	sub    esp,0xc
c0001f64:	89 d3                	mov    ebx,edx
c0001f66:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f6d:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f71:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f74:	76 6d                	jbe    c0001fe3 <get_xfileinfo+0x91>
c0001f76:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f7c:	76 0b                	jbe    c0001f89 <get_xfileinfo+0x37>
c0001f7e:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f82:	bf 01 00 00 00       	mov    edi,0x1
c0001f87:	eb 63                	jmp    c0001fec <get_xfileinfo+0x9a>
c0001f89:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f8f:	75 03                	jne    c0001f94 <get_xfileinfo+0x42>
c0001f91:	83 c5 02             	add    ebp,0x2
c0001f94:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f97:	83 c5 02             	add    ebp,0x2
c0001f9a:	e8 b0 fa ff ff       	call   c0001a4f <ld_word>
c0001f9f:	ff 04 24             	inc    DWORD PTR [esp]
c0001fa2:	66 85 c9             	test   cx,cx
c0001fa5:	75 0d                	jne    c0001fb4 <get_xfileinfo+0x62>
c0001fa7:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fad:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fb2:	76 2b                	jbe    c0001fdf <get_xfileinfo+0x8d>
c0001fb4:	c1 e1 10             	shl    ecx,0x10
c0001fb7:	ba ff 00 00 00       	mov    edx,0xff
c0001fbc:	29 fa                	sub    edx,edi
c0001fbe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fc2:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fc6:	0f b7 c0             	movzx  eax,ax
c0001fc9:	09 c8                	or     eax,ecx
c0001fcb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fcf:	e8 1b fc ff ff       	call   c0001bef <put_utf>
c0001fd4:	84 c0                	test   al,al
c0001fd6:	74 a6                	je     c0001f7e <get_xfileinfo+0x2c>
c0001fd8:	0f b6 c0             	movzx  eax,al
c0001fdb:	01 c7                	add    edi,eax
c0001fdd:	31 c0                	xor    eax,eax
c0001fdf:	89 c1                	mov    ecx,eax
c0001fe1:	eb 8a                	jmp    c0001f6d <get_xfileinfo+0x1b>
c0001fe3:	85 ff                	test   edi,edi
c0001fe5:	74 97                	je     c0001f7e <get_xfileinfo+0x2c>
c0001fe7:	66 85 c9             	test   cx,cx
c0001fea:	75 92                	jne    c0001f7e <get_xfileinfo+0x2c>
c0001fec:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001ff1:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001ff5:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001ff8:	31 c0                	xor    eax,eax
c0001ffa:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001ffd:	31 d2                	xor    edx,edx
c0001fff:	80 e1 10             	and    cl,0x10
c0002002:	75 08                	jne    c000200c <get_xfileinfo+0xba>
c0002004:	8d 46 38             	lea    eax,[esi+0x38]
c0002007:	e8 68 fa ff ff       	call   c0001a74 <ld_qword>
c000200c:	89 03                	mov    DWORD PTR [ebx],eax
c000200e:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002011:	8d 46 0c             	lea    eax,[esi+0xc]
c0002014:	e8 36 fa ff ff       	call   c0001a4f <ld_word>
c0002019:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000201d:	8d 46 0e             	lea    eax,[esi+0xe]
c0002020:	e8 2a fa ff ff       	call   c0001a4f <ld_word>
c0002025:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002029:	83 c4 0c             	add    esp,0xc
c000202c:	5b                   	pop    ebx
c000202d:	5e                   	pop    esi
c000202e:	5f                   	pop    edi
c000202f:	5d                   	pop    ebp
c0002030:	c3                   	ret    

c0002031 <get_ldnumber>:
c0002031:	57                   	push   edi
c0002032:	56                   	push   esi
c0002033:	53                   	push   ebx
c0002034:	83 cb ff             	or     ebx,0xffffffff
c0002037:	8b 10                	mov    edx,DWORD PTR [eax]
c0002039:	85 d2                	test   edx,edx
c000203b:	74 34                	je     c0002071 <get_ldnumber+0x40>
c000203d:	89 c7                	mov    edi,eax
c000203f:	89 d1                	mov    ecx,edx
c0002041:	41                   	inc    ecx
c0002042:	8a 41 ff             	mov    al,BYTE PTR [ecx-0x1]
c0002045:	3c 1f                	cmp    al,0x1f
c0002047:	76 04                	jbe    c000204d <get_ldnumber+0x1c>
c0002049:	3c 3a                	cmp    al,0x3a
c000204b:	75 f4                	jne    c0002041 <get_ldnumber+0x10>
c000204d:	31 db                	xor    ebx,ebx
c000204f:	3c 3a                	cmp    al,0x3a
c0002051:	75 1e                	jne    c0002071 <get_ldnumber+0x40>
c0002053:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002056:	83 cb ff             	or     ebx,0xffffffff
c0002059:	8d 46 d0             	lea    eax,[esi-0x30]
c000205c:	3c 09                	cmp    al,0x9
c000205e:	77 11                	ja     c0002071 <get_ldnumber+0x40>
c0002060:	83 c2 02             	add    edx,0x2
c0002063:	39 d1                	cmp    ecx,edx
c0002065:	75 0a                	jne    c0002071 <get_ldnumber+0x40>
c0002067:	89 f0                	mov    eax,esi
c0002069:	89 0f                	mov    DWORD PTR [edi],ecx
c000206b:	0f be d8             	movsx  ebx,al
c000206e:	83 eb 30             	sub    ebx,0x30
c0002071:	89 d8                	mov    eax,ebx
c0002073:	5b                   	pop    ebx
c0002074:	5e                   	pop    esi
c0002075:	5f                   	pop    edi
c0002076:	c3                   	ret    

c0002077 <crc32>:
c0002077:	56                   	push   esi
c0002078:	89 d6                	mov    esi,edx
c000207a:	53                   	push   ebx
c000207b:	b2 01                	mov    dl,0x1
c000207d:	bb 08 00 00 00       	mov    ebx,0x8
c0002082:	89 f1                	mov    ecx,esi
c0002084:	84 d1                	test   cl,dl
c0002086:	0f 95 c1             	setne  cl
c0002089:	0f b6 c9             	movzx  ecx,cl
c000208c:	31 c1                	xor    ecx,eax
c000208e:	89 c8                	mov    eax,ecx
c0002090:	d1 e8                	shr    eax,1
c0002092:	80 e1 01             	and    cl,0x1
c0002095:	74 05                	je     c000209c <crc32+0x25>
c0002097:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000209c:	01 d2                	add    edx,edx
c000209e:	4b                   	dec    ebx
c000209f:	75 e1                	jne    c0002082 <crc32+0xb>
c00020a1:	5b                   	pop    ebx
c00020a2:	5e                   	pop    esi
c00020a3:	c3                   	ret    

c00020a4 <test_gpt_header>:
c00020a4:	55                   	push   ebp
c00020a5:	b9 10 00 00 00       	mov    ecx,0x10
c00020aa:	57                   	push   edi
c00020ab:	ba 40 04 02 c0       	mov    edx,0xc0020440
c00020b0:	56                   	push   esi
c00020b1:	31 ff                	xor    edi,edi
c00020b3:	53                   	push   ebx
c00020b4:	89 c3                	mov    ebx,eax
c00020b6:	e8 33 fa ff ff       	call   c0001aee <mem_cmp>
c00020bb:	85 c0                	test   eax,eax
c00020bd:	75 55                	jne    c0002114 <test_gpt_header+0x70>
c00020bf:	89 c7                	mov    edi,eax
c00020c1:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020c6:	83 ce ff             	or     esi,0xffffffff
c00020c9:	31 d2                	xor    edx,edx
c00020cb:	83 fd 03             	cmp    ebp,0x3
c00020ce:	76 05                	jbe    c00020d5 <test_gpt_header+0x31>
c00020d0:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020d5:	89 f0                	mov    eax,esi
c00020d7:	45                   	inc    ebp
c00020d8:	e8 9a ff ff ff       	call   c0002077 <crc32>
c00020dd:	83 fd 4c             	cmp    ebp,0x4c
c00020e0:	89 c6                	mov    esi,eax
c00020e2:	75 e5                	jne    c00020c9 <test_gpt_header+0x25>
c00020e4:	8d 43 10             	lea    eax,[ebx+0x10]
c00020e7:	e8 70 f9 ff ff       	call   c0001a5c <ld_dword>
c00020ec:	f7 d6                	not    esi
c00020ee:	39 c6                	cmp    esi,eax
c00020f0:	75 22                	jne    c0002114 <test_gpt_header+0x70>
c00020f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00020f5:	e8 62 f9 ff ff       	call   c0001a5c <ld_dword>
c00020fa:	83 c0 80             	add    eax,0xffffff80
c00020fd:	75 15                	jne    c0002114 <test_gpt_header+0x70>
c00020ff:	8d 43 50             	lea    eax,[ebx+0x50]
c0002102:	e8 55 f9 ff ff       	call   c0001a5c <ld_dword>
c0002107:	3d 80 00 00 00       	cmp    eax,0x80
c000210c:	0f 96 c0             	setbe  al
c000210f:	0f b6 c0             	movzx  eax,al
c0002112:	89 c7                	mov    edi,eax
c0002114:	5b                   	pop    ebx
c0002115:	89 f8                	mov    eax,edi
c0002117:	5e                   	pop    esi
c0002118:	5f                   	pop    edi
c0002119:	5d                   	pop    ebp
c000211a:	c3                   	ret    

c000211b <make_rand>:
c000211b:	56                   	push   esi
c000211c:	85 c0                	test   eax,eax
c000211e:	53                   	push   ebx
c000211f:	75 05                	jne    c0002126 <make_rand+0xb>
c0002121:	b8 01 00 00 00       	mov    eax,0x1
c0002126:	01 d1                	add    ecx,edx
c0002128:	bb 08 00 00 00       	mov    ebx,0x8
c000212d:	89 c6                	mov    esi,eax
c000212f:	d1 e8                	shr    eax,1
c0002131:	83 e6 01             	and    esi,0x1
c0002134:	85 f6                	test   esi,esi
c0002136:	74 05                	je     c000213d <make_rand+0x22>
c0002138:	35 00 00 00 a3       	xor    eax,0xa3000000
c000213d:	4b                   	dec    ebx
c000213e:	75 ed                	jne    c000212d <make_rand+0x12>
c0002140:	42                   	inc    edx
c0002141:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002144:	39 ca                	cmp    edx,ecx
c0002146:	75 e0                	jne    c0002128 <make_rand+0xd>
c0002148:	5b                   	pop    ebx
c0002149:	5e                   	pop    esi
c000214a:	c3                   	ret    

c000214b <validate>:
c000214b:	56                   	push   esi
c000214c:	89 d6                	mov    esi,edx
c000214e:	53                   	push   ebx
c000214f:	85 c0                	test   eax,eax
c0002151:	51                   	push   ecx
c0002152:	75 09                	jne    c000215d <validate+0x12>
c0002154:	b8 09 00 00 00       	mov    eax,0x9
c0002159:	31 c9                	xor    ecx,ecx
c000215b:	eb 2f                	jmp    c000218c <validate+0x41>
c000215d:	89 c3                	mov    ebx,eax
c000215f:	8b 00                	mov    eax,DWORD PTR [eax]
c0002161:	85 c0                	test   eax,eax
c0002163:	74 ef                	je     c0002154 <validate+0x9>
c0002165:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002168:	74 ea                	je     c0002154 <validate+0x9>
c000216a:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000216e:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002172:	75 e0                	jne    c0002154 <validate+0x9>
c0002174:	83 ec 0c             	sub    esp,0xc
c0002177:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000217b:	50                   	push   eax
c000217c:	e8 7d f8 ff ff       	call   c00019fe <disk_status>
c0002181:	83 c4 10             	add    esp,0x10
c0002184:	a8 01                	test   al,0x1
c0002186:	75 cc                	jne    c0002154 <validate+0x9>
c0002188:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000218a:	31 c0                	xor    eax,eax
c000218c:	89 0e                	mov    DWORD PTR [esi],ecx
c000218e:	5a                   	pop    edx
c000218f:	5b                   	pop    ebx
c0002190:	5e                   	pop    esi
c0002191:	c3                   	ret    

c0002192 <sync_window>:
c0002192:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002196:	0f 84 85 00 00 00    	je     c0002221 <sync_window+0x8f>
c000219c:	55                   	push   ebp
c000219d:	8d 68 54             	lea    ebp,[eax+0x54]
c00021a0:	57                   	push   edi
c00021a1:	56                   	push   esi
c00021a2:	53                   	push   ebx
c00021a3:	89 c3                	mov    ebx,eax
c00021a5:	83 ec 28             	sub    esp,0x28
c00021a8:	6a 01                	push   0x1
c00021aa:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021ad:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021b0:	55                   	push   ebp
c00021b1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021b5:	50                   	push   eax
c00021b6:	e8 5f f8 ff ff       	call   c0001a1a <disk_write>
c00021bb:	83 c4 20             	add    esp,0x20
c00021be:	ba 01 00 00 00       	mov    edx,0x1
c00021c3:	85 c0                	test   eax,eax
c00021c5:	75 50                	jne    c0002217 <sync_window+0x85>
c00021c7:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021ca:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021cd:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021d1:	89 c6                	mov    esi,eax
c00021d3:	31 ff                	xor    edi,edi
c00021d5:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021d8:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021db:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021df:	89 d7                	mov    edi,edx
c00021e1:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021e5:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021e8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021ec:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021f0:	73 23                	jae    c0002215 <sync_window+0x83>
c00021f2:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021f6:	75 1d                	jne    c0002215 <sync_window+0x83>
c00021f8:	83 ec 0c             	sub    esp,0xc
c00021fb:	6a 01                	push   0x1
c00021fd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002201:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002205:	52                   	push   edx
c0002206:	50                   	push   eax
c0002207:	55                   	push   ebp
c0002208:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000220c:	50                   	push   eax
c000220d:	e8 08 f8 ff ff       	call   c0001a1a <disk_write>
c0002212:	83 c4 20             	add    esp,0x20
c0002215:	31 d2                	xor    edx,edx
c0002217:	83 c4 1c             	add    esp,0x1c
c000221a:	89 d0                	mov    eax,edx
c000221c:	5b                   	pop    ebx
c000221d:	5e                   	pop    esi
c000221e:	5f                   	pop    edi
c000221f:	5d                   	pop    ebp
c0002220:	c3                   	ret    
c0002221:	31 d2                	xor    edx,edx
c0002223:	89 d0                	mov    eax,edx
c0002225:	c3                   	ret    

c0002226 <move_window>:
c0002226:	56                   	push   esi
c0002227:	53                   	push   ebx
c0002228:	89 c3                	mov    ebx,eax
c000222a:	83 ec 14             	sub    esp,0x14
c000222d:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002230:	75 07                	jne    c0002239 <move_window+0x13>
c0002232:	31 f6                	xor    esi,esi
c0002234:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002237:	74 59                	je     c0002292 <move_window+0x6c>
c0002239:	89 d8                	mov    eax,ebx
c000223b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000223f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002243:	e8 4a ff ff ff       	call   c0002192 <sync_window>
c0002248:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000224c:	89 c6                	mov    esi,eax
c000224e:	85 c0                	test   eax,eax
c0002250:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002254:	75 3c                	jne    c0002292 <move_window+0x6c>
c0002256:	83 ec 0c             	sub    esp,0xc
c0002259:	8d 43 54             	lea    eax,[ebx+0x54]
c000225c:	6a 01                	push   0x1
c000225e:	51                   	push   ecx
c000225f:	52                   	push   edx
c0002260:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002264:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002268:	50                   	push   eax
c0002269:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000226d:	50                   	push   eax
c000226e:	e8 91 f7 ff ff       	call   c0001a04 <disk_read>
c0002273:	83 c4 20             	add    esp,0x20
c0002276:	85 c0                	test   eax,eax
c0002278:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000227c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002280:	74 0a                	je     c000228c <move_window+0x66>
c0002282:	83 ca ff             	or     edx,0xffffffff
c0002285:	be 01 00 00 00       	mov    esi,0x1
c000228a:	89 d1                	mov    ecx,edx
c000228c:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000228f:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002292:	83 c4 14             	add    esp,0x14
c0002295:	89 f0                	mov    eax,esi
c0002297:	5b                   	pop    ebx
c0002298:	5e                   	pop    esi
c0002299:	c3                   	ret    

c000229a <check_fs>:
c000229a:	53                   	push   ebx
c000229b:	89 c3                	mov    ebx,eax
c000229d:	83 ec 08             	sub    esp,0x8
c00022a0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022a4:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022ab:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022b2:	e8 6f ff ff ff       	call   c0002226 <move_window>
c00022b7:	ba 04 00 00 00       	mov    edx,0x4
c00022bc:	85 c0                	test   eax,eax
c00022be:	0f 85 89 00 00 00    	jne    c000234d <check_fs+0xb3>
c00022c4:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022ca:	e8 80 f7 ff ff       	call   c0001a4f <ld_word>
c00022cf:	ba 03 00 00 00       	mov    edx,0x3
c00022d4:	66 3d 55 aa          	cmp    ax,0xaa55
c00022d8:	75 73                	jne    c000234d <check_fs+0xb3>
c00022da:	ba 60 05 02 c0       	mov    edx,0xc0020560
c00022df:	8d 43 54             	lea    eax,[ebx+0x54]
c00022e2:	b9 0b 00 00 00       	mov    ecx,0xb
c00022e7:	e8 02 f8 ff ff       	call   c0001aee <mem_cmp>
c00022ec:	ba 01 00 00 00       	mov    edx,0x1
c00022f1:	85 c0                	test   eax,eax
c00022f3:	74 58                	je     c000234d <check_fs+0xb3>
c00022f5:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022f8:	8d 50 18             	lea    edx,[eax+0x18]
c00022fb:	80 fa 01             	cmp    dl,0x1
c00022fe:	76 09                	jbe    c0002309 <check_fs+0x6f>
c0002300:	ba 02 00 00 00       	mov    edx,0x2
c0002305:	3c eb                	cmp    al,0xeb
c0002307:	75 44                	jne    c000234d <check_fs+0xb3>
c0002309:	ba ac 32 02 c0       	mov    edx,0xc00232ac
c000230e:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002314:	b9 03 00 00 00       	mov    ecx,0x3
c0002319:	e8 d0 f7 ff ff       	call   c0001aee <mem_cmp>
c000231e:	31 d2                	xor    edx,edx
c0002320:	85 c0                	test   eax,eax
c0002322:	74 29                	je     c000234d <check_fs+0xb3>
c0002324:	ba 6c 05 02 c0       	mov    edx,0xc002056c
c0002329:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000232f:	b9 05 00 00 00       	mov    ecx,0x5
c0002334:	e8 b5 f7 ff ff       	call   c0001aee <mem_cmp>
c0002339:	31 d2                	xor    edx,edx
c000233b:	85 c0                	test   eax,eax
c000233d:	74 0e                	je     c000234d <check_fs+0xb3>
c000233f:	31 d2                	xor    edx,edx
c0002341:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002348:	0f 95 c2             	setne  dl
c000234b:	01 d2                	add    edx,edx
c000234d:	83 c4 08             	add    esp,0x8
c0002350:	89 d0                	mov    eax,edx
c0002352:	5b                   	pop    ebx
c0002353:	c3                   	ret    

c0002354 <find_volume>:
c0002354:	55                   	push   ebp
c0002355:	31 c9                	xor    ecx,ecx
c0002357:	57                   	push   edi
c0002358:	56                   	push   esi
c0002359:	89 d6                	mov    esi,edx
c000235b:	53                   	push   ebx
c000235c:	31 d2                	xor    edx,edx
c000235e:	83 ec 3c             	sub    esp,0x3c
c0002361:	89 c3                	mov    ebx,eax
c0002363:	e8 32 ff ff ff       	call   c000229a <check_fs>
c0002368:	83 f8 02             	cmp    eax,0x2
c000236b:	74 0e                	je     c000237b <find_volume+0x27>
c000236d:	0f 87 56 01 00 00    	ja     c00024c9 <find_volume+0x175>
c0002373:	85 f6                	test   esi,esi
c0002375:	0f 84 4e 01 00 00    	je     c00024c9 <find_volume+0x175>
c000237b:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002382:	0f 85 df 00 00 00    	jne    c0002467 <find_volume+0x113>
c0002388:	31 c9                	xor    ecx,ecx
c000238a:	ba 01 00 00 00       	mov    edx,0x1
c000238f:	89 d8                	mov    eax,ebx
c0002391:	e8 90 fe ff ff       	call   c0002226 <move_window>
c0002396:	85 c0                	test   eax,eax
c0002398:	74 0a                	je     c00023a4 <find_volume+0x50>
c000239a:	b8 04 00 00 00       	mov    eax,0x4
c000239f:	e9 25 01 00 00       	jmp    c00024c9 <find_volume+0x175>
c00023a4:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00023a7:	89 e8                	mov    eax,ebp
c00023a9:	e8 f6 fc ff ff       	call   c00020a4 <test_gpt_header>
c00023ae:	85 c0                	test   eax,eax
c00023b0:	75 0a                	jne    c00023bc <find_volume+0x68>
c00023b2:	b8 03 00 00 00       	mov    eax,0x3
c00023b7:	e9 0d 01 00 00       	jmp    c00024c9 <find_volume+0x175>
c00023bc:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023c2:	e8 95 f6 ff ff       	call   c0001a5c <ld_dword>
c00023c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023cb:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023d1:	e8 9e f6 ff ff       	call   c0001a74 <ld_qword>
c00023d6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023e2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023e6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023f2:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023f6:	74 ba                	je     c00023b2 <find_volume+0x5e>
c00023f8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023fc:	31 c9                	xor    ecx,ecx
c00023fe:	c1 e7 07             	shl    edi,0x7
c0002401:	89 d8                	mov    eax,ebx
c0002403:	89 fa                	mov    edx,edi
c0002405:	c1 ea 09             	shr    edx,0x9
c0002408:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000240c:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002410:	e8 11 fe ff ff       	call   c0002226 <move_window>
c0002415:	85 c0                	test   eax,eax
c0002417:	75 81                	jne    c000239a <find_volume+0x46>
c0002419:	81 e7 80 01 00 00    	and    edi,0x180
c000241f:	b9 10 00 00 00       	mov    ecx,0x10
c0002424:	ba 50 05 02 c0       	mov    edx,0xc0020550
c0002429:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000242d:	e8 bc f6 ff ff       	call   c0001aee <mem_cmp>
c0002432:	85 c0                	test   eax,eax
c0002434:	75 2b                	jne    c0002461 <find_volume+0x10d>
c0002436:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000243a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000243e:	e8 31 f6 ff ff       	call   c0001a74 <ld_qword>
c0002443:	89 d1                	mov    ecx,edx
c0002445:	89 c2                	mov    edx,eax
c0002447:	89 d8                	mov    eax,ebx
c0002449:	e8 4c fe ff ff       	call   c000229a <check_fs>
c000244e:	85 f6                	test   esi,esi
c0002450:	75 05                	jne    c0002457 <find_volume+0x103>
c0002452:	83 f8 01             	cmp    eax,0x1
c0002455:	76 72                	jbe    c00024c9 <find_volume+0x175>
c0002457:	85 f6                	test   esi,esi
c0002459:	74 06                	je     c0002461 <find_volume+0x10d>
c000245b:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000245f:	74 68                	je     c00024c9 <find_volume+0x175>
c0002461:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002465:	eb 87                	jmp    c00023ee <find_volume+0x9a>
c0002467:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000246b:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002471:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002477:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000247b:	89 cd                	mov    ebp,ecx
c000247d:	89 f8                	mov    eax,edi
c000247f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002483:	e8 d4 f5 ff ff       	call   c0001a5c <ld_dword>
c0002488:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000248c:	83 c7 10             	add    edi,0x10
c000248f:	83 c1 04             	add    ecx,0x4
c0002492:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0002495:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002499:	75 e2                	jne    c000247d <find_volume+0x129>
c000249b:	31 ff                	xor    edi,edi
c000249d:	85 f6                	test   esi,esi
c000249f:	74 03                	je     c00024a4 <find_volume+0x150>
c00024a1:	8d 7e ff             	lea    edi,[esi-0x1]
c00024a4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00024a8:	b8 03 00 00 00       	mov    eax,0x3
c00024ad:	85 d2                	test   edx,edx
c00024af:	74 09                	je     c00024ba <find_volume+0x166>
c00024b1:	31 c9                	xor    ecx,ecx
c00024b3:	89 d8                	mov    eax,ebx
c00024b5:	e8 e0 fd ff ff       	call   c000229a <check_fs>
c00024ba:	85 f6                	test   esi,esi
c00024bc:	75 0b                	jne    c00024c9 <find_volume+0x175>
c00024be:	83 f8 01             	cmp    eax,0x1
c00024c1:	76 06                	jbe    c00024c9 <find_volume+0x175>
c00024c3:	47                   	inc    edi
c00024c4:	83 ff 03             	cmp    edi,0x3
c00024c7:	76 db                	jbe    c00024a4 <find_volume+0x150>
c00024c9:	83 c4 3c             	add    esp,0x3c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	57                   	push   edi
c00024d3:	89 cf                	mov    edi,ecx
c00024d5:	56                   	push   esi
c00024d6:	53                   	push   ebx
c00024d7:	bb 0b 00 00 00       	mov    ebx,0xb
c00024dc:	83 ec 3c             	sub    esp,0x3c
c00024df:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024e9:	e8 43 fb ff ff       	call   c0002031 <get_ldnumber>
c00024ee:	85 c0                	test   eax,eax
c00024f0:	0f 88 3b 05 00 00    	js     c0002a31 <mount_volume+0x560>
c00024f6:	8b 2c 85 40 47 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdb8c0]
c00024fd:	89 c6                	mov    esi,eax
c00024ff:	bb 0c 00 00 00       	mov    ebx,0xc
c0002504:	85 ed                	test   ebp,ebp
c0002506:	0f 84 25 05 00 00    	je     c0002a31 <mount_volume+0x560>
c000250c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002510:	83 e7 fe             	and    edi,0xfffffffe
c0002513:	89 2a                	mov    DWORD PTR [edx],ebp
c0002515:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002519:	74 32                	je     c000254d <mount_volume+0x7c>
c000251b:	83 ec 0c             	sub    esp,0xc
c000251e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002522:	50                   	push   eax
c0002523:	e8 d6 f4 ff ff       	call   c00019fe <disk_status>
c0002528:	83 c4 10             	add    esp,0x10
c000252b:	a8 01                	test   al,0x1
c000252d:	75 1e                	jne    c000254d <mount_volume+0x7c>
c000252f:	89 f9                	mov    ecx,edi
c0002531:	31 db                	xor    ebx,ebx
c0002533:	84 c9                	test   cl,cl
c0002535:	0f 84 f6 04 00 00    	je     c0002a31 <mount_volume+0x560>
c000253b:	a8 04                	test   al,0x4
c000253d:	0f 84 ee 04 00 00    	je     c0002a31 <mount_volume+0x560>
c0002543:	bb 0a 00 00 00       	mov    ebx,0xa
c0002548:	e9 e4 04 00 00       	jmp    c0002a31 <mount_volume+0x560>
c000254d:	83 ec 0c             	sub    esp,0xc
c0002550:	89 f0                	mov    eax,esi
c0002552:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002556:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002559:	0f b6 f0             	movzx  esi,al
c000255c:	56                   	push   esi
c000255d:	e8 9f f4 ff ff       	call   c0001a01 <disk_initialize>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	83 c4 10             	add    esp,0x10
c000256a:	a8 01                	test   al,0x1
c000256c:	0f 85 bf 04 00 00    	jne    c0002a31 <mount_volume+0x560>
c0002572:	89 f9                	mov    ecx,edi
c0002574:	84 c9                	test   cl,cl
c0002576:	74 04                	je     c000257c <mount_volume+0xab>
c0002578:	a8 04                	test   al,0x4
c000257a:	75 c7                	jne    c0002543 <mount_volume+0x72>
c000257c:	31 d2                	xor    edx,edx
c000257e:	89 e8                	mov    eax,ebp
c0002580:	e8 cf fd ff ff       	call   c0002354 <find_volume>
c0002585:	83 f8 04             	cmp    eax,0x4
c0002588:	75 0a                	jne    c0002594 <mount_volume+0xc3>
c000258a:	bb 01 00 00 00       	mov    ebx,0x1
c000258f:	e9 9d 04 00 00       	jmp    c0002a31 <mount_volume+0x560>
c0002594:	83 f8 01             	cmp    eax,0x1
c0002597:	76 0a                	jbe    c00025a3 <mount_volume+0xd2>
c0002599:	bb 0d 00 00 00       	mov    ebx,0xd
c000259e:	e9 8e 04 00 00       	jmp    c0002a31 <mount_volume+0x560>
c00025a3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00025a6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00025a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025b1:	75 17                	jne    c00025ca <mount_volume+0xf9>
c00025b3:	b8 0b 00 00 00       	mov    eax,0xb
c00025b8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025bd:	75 da                	jne    c0002599 <mount_volume+0xc8>
c00025bf:	40                   	inc    eax
c00025c0:	83 f8 40             	cmp    eax,0x40
c00025c3:	75 f3                	jne    c00025b8 <mount_volume+0xe7>
c00025c5:	e9 5a 02 00 00       	jmp    c0002824 <mount_volume+0x353>
c00025ca:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025cd:	e8 7d f4 ff ff       	call   c0001a4f <ld_word>
c00025d2:	66 3d 00 02          	cmp    ax,0x200
c00025d6:	75 c1                	jne    c0002599 <mount_volume+0xc8>
c00025d8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025db:	e8 6f f4 ff ff       	call   c0001a4f <ld_word>
c00025e0:	0f b7 c0             	movzx  eax,ax
c00025e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025e7:	85 c0                	test   eax,eax
c00025e9:	75 0c                	jne    c00025f7 <mount_volume+0x126>
c00025eb:	8d 45 78             	lea    eax,[ebp+0x78]
c00025ee:	e8 69 f4 ff ff       	call   c0001a5c <ld_dword>
c00025f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025fb:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025fe:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002601:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002605:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002608:	48                   	dec    eax
c0002609:	3c 01                	cmp    al,0x1
c000260b:	77 8c                	ja     c0002599 <mount_volume+0xc8>
c000260d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002611:	89 c3                	mov    ebx,eax
c0002613:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002617:	66 85 c0             	test   ax,ax
c000261a:	0f 84 79 ff ff ff    	je     c0002599 <mount_volume+0xc8>
c0002620:	8d 40 ff             	lea    eax,[eax-0x1]
c0002623:	85 d8                	test   eax,ebx
c0002625:	0f 85 6e ff ff ff    	jne    c0002599 <mount_volume+0xc8>
c000262b:	8d 45 65             	lea    eax,[ebp+0x65]
c000262e:	e8 1c f4 ff ff       	call   c0001a4f <ld_word>
c0002633:	89 c7                	mov    edi,eax
c0002635:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002639:	a8 0f                	test   al,0xf
c000263b:	0f 85 58 ff ff ff    	jne    c0002599 <mount_volume+0xc8>
c0002641:	8d 45 67             	lea    eax,[ebp+0x67]
c0002644:	e8 06 f4 ff ff       	call   c0001a4f <ld_word>
c0002649:	0f b7 f0             	movzx  esi,ax
c000264c:	85 f6                	test   esi,esi
c000264e:	75 0a                	jne    c000265a <mount_volume+0x189>
c0002650:	8d 45 74             	lea    eax,[ebp+0x74]
c0002653:	e8 04 f4 ff ff       	call   c0001a5c <ld_dword>
c0002658:	89 c6                	mov    esi,eax
c000265a:	8d 45 62             	lea    eax,[ebp+0x62]
c000265d:	e8 ed f3 ff ff       	call   c0001a4f <ld_word>
c0002662:	66 85 c0             	test   ax,ax
c0002665:	0f 84 2e ff ff ff    	je     c0002599 <mount_volume+0xc8>
c000266b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002670:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002675:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002679:	89 fa                	mov    edx,edi
c000267b:	66 c1 ea 04          	shr    dx,0x4
c000267f:	0f b7 d2             	movzx  edx,dx
c0002682:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002686:	0f b7 c8             	movzx  ecx,ax
c0002689:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000268c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002690:	39 c6                	cmp    esi,eax
c0002692:	0f 82 01 ff ff ff    	jb     c0002599 <mount_volume+0xc8>
c0002698:	29 c6                	sub    esi,eax
c000269a:	31 d2                	xor    edx,edx
c000269c:	89 f0                	mov    eax,esi
c000269e:	f7 f3                	div    ebx
c00026a0:	39 de                	cmp    esi,ebx
c00026a2:	0f 82 f1 fe ff ff    	jb     c0002599 <mount_volume+0xc8>
c00026a8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026ad:	0f 87 e6 fe ff ff    	ja     c0002599 <mount_volume+0xc8>
c00026b3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026b8:	0f 86 63 03 00 00    	jbe    c0002a21 <mount_volume+0x550>
c00026be:	bb 03 00 00 00       	mov    ebx,0x3
c00026c3:	8d 70 02             	lea    esi,[eax+0x2]
c00026c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026ce:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026d1:	89 c8                	mov    eax,ecx
c00026d3:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026d6:	31 d2                	xor    edx,edx
c00026d8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026dc:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026e0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026e4:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026eb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026ef:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026f2:	31 d2                	xor    edx,edx
c00026f4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026f8:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026fc:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026ff:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002702:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002705:	83 fb 03             	cmp    ebx,0x3
c0002708:	75 2b                	jne    c0002735 <mount_volume+0x264>
c000270a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000270d:	e8 3d f3 ff ff       	call   c0001a4f <ld_word>
c0002712:	66 09 c7             	or     di,ax
c0002715:	0f 85 7e fe ff ff    	jne    c0002599 <mount_volume+0xc8>
c000271b:	c1 e6 02             	shl    esi,0x2
c000271e:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002724:	e8 33 f3 ff ff       	call   c0001a5c <ld_dword>
c0002729:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002730:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002733:	eb 30                	jmp    c0002765 <mount_volume+0x294>
c0002735:	66 85 ff             	test   di,di
c0002738:	0f 84 5b fe ff ff    	je     c0002599 <mount_volume+0xc8>
c000273e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002742:	31 d2                	xor    edx,edx
c0002744:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002748:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000274c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000274f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002752:	83 fb 02             	cmp    ebx,0x2
c0002755:	75 04                	jne    c000275b <mount_volume+0x28a>
c0002757:	01 f6                	add    esi,esi
c0002759:	eb 0a                	jmp    c0002765 <mount_volume+0x294>
c000275b:	8d 04 76             	lea    eax,[esi+esi*2]
c000275e:	83 e6 01             	and    esi,0x1
c0002761:	d1 e8                	shr    eax,1
c0002763:	01 c6                	add    esi,eax
c0002765:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000276b:	c1 ee 09             	shr    esi,0x9
c000276e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002772:	0f 87 21 fe ff ff    	ja     c0002599 <mount_volume+0xc8>
c0002778:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000277f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002786:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000278a:	83 fb 03             	cmp    ebx,0x3
c000278d:	75 7a                	jne    c0002809 <mount_volume+0x338>
c000278f:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002795:	e8 b5 f2 ff ff       	call   c0001a4f <ld_word>
c000279a:	66 48                	dec    ax
c000279c:	75 6b                	jne    c0002809 <mount_volume+0x338>
c000279e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00027a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027a6:	83 c2 01             	add    edx,0x1
c00027a9:	89 e8                	mov    eax,ebp
c00027ab:	83 d1 00             	adc    ecx,0x0
c00027ae:	e8 73 fa ff ff       	call   c0002226 <move_window>
c00027b3:	85 c0                	test   eax,eax
c00027b5:	75 52                	jne    c0002809 <mount_volume+0x338>
c00027b7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027bb:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027c1:	e8 89 f2 ff ff       	call   c0001a4f <ld_word>
c00027c6:	66 3d 55 aa          	cmp    ax,0xaa55
c00027ca:	75 3d                	jne    c0002809 <mount_volume+0x338>
c00027cc:	8d 45 54             	lea    eax,[ebp+0x54]
c00027cf:	e8 88 f2 ff ff       	call   c0001a5c <ld_dword>
c00027d4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027d9:	75 2e                	jne    c0002809 <mount_volume+0x338>
c00027db:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027e1:	e8 76 f2 ff ff       	call   c0001a5c <ld_dword>
c00027e6:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027eb:	75 1c                	jne    c0002809 <mount_volume+0x338>
c00027ed:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027f3:	e8 64 f2 ff ff       	call   c0001a5c <ld_dword>
c00027f8:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027fb:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002801:	e8 56 f2 ff ff       	call   c0001a5c <ld_dword>
c0002806:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002809:	66 a1 20 47 02 c0    	mov    ax,ds:0xc0024720
c000280f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002812:	40                   	inc    eax
c0002813:	31 db                	xor    ebx,ebx
c0002815:	66 a3 20 47 02 c0    	mov    ds:0xc0024720,ax
c000281b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000281f:	e9 0d 02 00 00       	jmp    c0002a31 <mount_volume+0x560>
c0002824:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c000282a:	e8 20 f2 ff ff       	call   c0001a4f <ld_word>
c000282f:	66 3d 00 01          	cmp    ax,0x100
c0002833:	0f 85 60 fd ff ff    	jne    c0002599 <mount_volume+0xc8>
c0002839:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002840:	0f 85 53 fd ff ff    	jne    c0002599 <mount_volume+0xc8>
c0002846:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000284c:	e8 23 f2 ff ff       	call   c0001a74 <ld_qword>
c0002851:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002855:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000285b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000285f:	e8 f8 f1 ff ff       	call   c0001a5c <ld_dword>
c0002864:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002867:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000286d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002870:	fe c8                	dec    al
c0002872:	0f 85 21 fd ff ff    	jne    c0002599 <mount_volume+0xc8>
c0002878:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c000287f:	bb 01 00 00 00       	mov    ebx,0x1
c0002884:	d3 e3                	shl    ebx,cl
c0002886:	66 85 db             	test   bx,bx
c0002889:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000288d:	0f 84 06 fd ff ff    	je     c0002599 <mount_volume+0xc8>
c0002893:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002899:	e8 be f1 ff ff       	call   c0001a5c <ld_dword>
c000289e:	89 c6                	mov    esi,eax
c00028a0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00028a5:	0f 87 ee fc ff ff    	ja     c0002599 <mount_volume+0xc8>
c00028ab:	8d 40 02             	lea    eax,[eax+0x2]
c00028ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b2:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b9:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028bc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028bf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028c5:	e8 92 f1 ff ff       	call   c0001a5c <ld_dword>
c00028ca:	31 d2                	xor    edx,edx
c00028cc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028d0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028d8:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028db:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028de:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028e4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028e8:	e8 6f f1 ff ff       	call   c0001a5c <ld_dword>
c00028ed:	31 d2                	xor    edx,edx
c00028ef:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028f3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028f7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028fb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028fe:	0f b7 c3             	movzx  eax,bx
c0002901:	0f af f0             	imul   esi,eax
c0002904:	89 f0                	mov    eax,esi
c0002906:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002909:	31 d2                	xor    edx,edx
c000290b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c000290f:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002913:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002917:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000291b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000291f:	39 c1                	cmp    ecx,eax
c0002921:	89 df                	mov    edi,ebx
c0002923:	19 d7                	sbb    edi,edx
c0002925:	0f 82 6e fc ff ff    	jb     c0002599 <mount_volume+0xc8>
c000292b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002931:	31 db                	xor    ebx,ebx
c0002933:	e8 24 f1 ff ff       	call   c0001a5c <ld_dword>
c0002938:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000293f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002942:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000294a:	85 db                	test   ebx,ebx
c000294c:	75 39                	jne    c0002987 <mount_volume+0x4b6>
c000294e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002952:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002956:	0f 86 3d fc ff ff    	jbe    c0002599 <mount_volume+0xc8>
c000295c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000295f:	89 e8                	mov    eax,ebp
c0002961:	e8 82 f3 ff ff       	call   c0001ce8 <clst2sect>
c0002966:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000296a:	31 ff                	xor    edi,edi
c000296c:	01 c6                	add    esi,eax
c000296e:	11 d7                	adc    edi,edx
c0002970:	89 e8                	mov    eax,ebp
c0002972:	89 f2                	mov    edx,esi
c0002974:	89 f9                	mov    ecx,edi
c0002976:	e8 ab f8 ff ff       	call   c0002226 <move_window>
c000297b:	85 c0                	test   eax,eax
c000297d:	0f 85 07 fc ff ff    	jne    c000258a <mount_volume+0xb9>
c0002983:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002987:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000298c:	74 0b                	je     c0002999 <mount_volume+0x4c8>
c000298e:	83 c3 20             	add    ebx,0x20
c0002991:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002997:	eb b1                	jmp    c000294a <mount_volume+0x479>
c0002999:	8d 75 54             	lea    esi,[ebp+0x54]
c000299c:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00029a0:	e8 b7 f0 ff ff       	call   c0001a5c <ld_dword>
c00029a5:	89 c3                	mov    ebx,eax
c00029a7:	83 f8 01             	cmp    eax,0x1
c00029aa:	0f 86 e9 fb ff ff    	jbe    c0002599 <mount_volume+0xc8>
c00029b0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029b3:	0f 86 e0 fb ff ff    	jbe    c0002599 <mount_volume+0xc8>
c00029b9:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029bd:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029c0:	0f af c2             	imul   eax,edx
c00029c3:	31 d2                	xor    edx,edx
c00029c5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029c8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029cb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029ce:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029d1:	89 da                	mov    edx,ebx
c00029d3:	31 c9                	xor    ecx,ecx
c00029d5:	c1 ea 07             	shr    edx,0x7
c00029d8:	89 e8                	mov    eax,ebp
c00029da:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029dd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029e0:	e8 41 f8 ff ff       	call   c0002226 <move_window>
c00029e5:	85 c0                	test   eax,eax
c00029e7:	0f 85 9d fb ff ff    	jne    c000258a <mount_volume+0xb9>
c00029ed:	89 d8                	mov    eax,ebx
c00029ef:	83 e0 7f             	and    eax,0x7f
c00029f2:	8d 04 86             	lea    eax,[esi+eax*4]
c00029f5:	e8 62 f0 ff ff       	call   c0001a5c <ld_dword>
c00029fa:	83 f8 ff             	cmp    eax,0xffffffff
c00029fd:	74 0a                	je     c0002a09 <mount_volume+0x538>
c00029ff:	43                   	inc    ebx
c0002a00:	39 d8                	cmp    eax,ebx
c0002a02:	74 cd                	je     c00029d1 <mount_volume+0x500>
c0002a04:	e9 90 fb ff ff       	jmp    c0002599 <mount_volume+0xc8>
c0002a09:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a10:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a17:	bb 04 00 00 00       	mov    ebx,0x4
c0002a1c:	e9 e8 fd ff ff       	jmp    c0002809 <mount_volume+0x338>
c0002a21:	31 db                	xor    ebx,ebx
c0002a23:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002a28:	0f 97 c3             	seta   bl
c0002a2b:	43                   	inc    ebx
c0002a2c:	e9 92 fc ff ff       	jmp    c00026c3 <mount_volume+0x1f2>
c0002a31:	83 c4 3c             	add    esp,0x3c
c0002a34:	89 d8                	mov    eax,ebx
c0002a36:	5b                   	pop    ebx
c0002a37:	5e                   	pop    esi
c0002a38:	5f                   	pop    edi
c0002a39:	5d                   	pop    ebp
c0002a3a:	c3                   	ret    

c0002a3b <find_bitmap>:
c0002a3b:	55                   	push   ebp
c0002a3c:	57                   	push   edi
c0002a3d:	89 c7                	mov    edi,eax
c0002a3f:	56                   	push   esi
c0002a40:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a43:	53                   	push   ebx
c0002a44:	83 ec 1c             	sub    esp,0x1c
c0002a47:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a4a:	83 e8 02             	sub    eax,0x2
c0002a4d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a51:	39 f0                	cmp    eax,esi
c0002a53:	77 02                	ja     c0002a57 <find_bitmap+0x1c>
c0002a55:	31 f6                	xor    esi,esi
c0002a57:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a5b:	89 f3                	mov    ebx,esi
c0002a5d:	31 ed                	xor    ebp,ebp
c0002a5f:	89 da                	mov    edx,ebx
c0002a61:	31 c9                	xor    ecx,ecx
c0002a63:	c1 ea 0c             	shr    edx,0xc
c0002a66:	89 f8                	mov    eax,edi
c0002a68:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a6b:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a6e:	e8 b3 f7 ff ff       	call   c0002226 <move_window>
c0002a73:	85 c0                	test   eax,eax
c0002a75:	75 68                	jne    c0002adf <find_bitmap+0xa4>
c0002a77:	89 d9                	mov    ecx,ebx
c0002a79:	b8 01 00 00 00       	mov    eax,0x1
c0002a7e:	83 e1 07             	and    ecx,0x7
c0002a81:	89 da                	mov    edx,ebx
c0002a83:	d3 e0                	shl    eax,cl
c0002a85:	c1 ea 03             	shr    edx,0x3
c0002a88:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a8b:	83 e9 02             	sub    ecx,0x2
c0002a8e:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a94:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a98:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a9c:	43                   	inc    ebx
c0002a9d:	21 c1                	and    ecx,eax
c0002a9f:	01 c0                	add    eax,eax
c0002aa1:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002aa5:	77 09                	ja     c0002ab0 <find_bitmap+0x75>
c0002aa7:	31 db                	xor    ebx,ebx
c0002aa9:	ba 00 02 00 00       	mov    edx,0x200
c0002aae:	31 c0                	xor    eax,eax
c0002ab0:	84 c9                	test   cl,cl
c0002ab2:	75 10                	jne    c0002ac4 <find_bitmap+0x89>
c0002ab4:	45                   	inc    ebp
c0002ab5:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ab9:	75 0f                	jne    c0002aca <find_bitmap+0x8f>
c0002abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002abf:	83 c0 02             	add    eax,0x2
c0002ac2:	eb 22                	jmp    c0002ae6 <find_bitmap+0xab>
c0002ac4:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ac8:	31 ed                	xor    ebp,ebp
c0002aca:	39 de                	cmp    esi,ebx
c0002acc:	74 16                	je     c0002ae4 <find_bitmap+0xa9>
c0002ace:	84 c0                	test   al,al
c0002ad0:	75 c6                	jne    c0002a98 <find_bitmap+0x5d>
c0002ad2:	42                   	inc    edx
c0002ad3:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002ad9:	77 84                	ja     c0002a5f <find_bitmap+0x24>
c0002adb:	b0 01                	mov    al,0x1
c0002add:	eb b9                	jmp    c0002a98 <find_bitmap+0x5d>
c0002adf:	83 c8 ff             	or     eax,0xffffffff
c0002ae2:	eb 02                	jmp    c0002ae6 <find_bitmap+0xab>
c0002ae4:	31 c0                	xor    eax,eax
c0002ae6:	83 c4 1c             	add    esp,0x1c
c0002ae9:	5b                   	pop    ebx
c0002aea:	5e                   	pop    esi
c0002aeb:	5f                   	pop    edi
c0002aec:	5d                   	pop    ebp
c0002aed:	c3                   	ret    

c0002aee <change_bitmap>:
c0002aee:	55                   	push   ebp
c0002aef:	89 cd                	mov    ebp,ecx
c0002af1:	57                   	push   edi
c0002af2:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002af5:	56                   	push   esi
c0002af6:	89 c7                	mov    edi,eax
c0002af8:	53                   	push   ebx
c0002af9:	89 c8                	mov    eax,ecx
c0002afb:	83 ec 1c             	sub    esp,0x1c
c0002afe:	31 d2                	xor    edx,edx
c0002b00:	c1 e8 0c             	shr    eax,0xc
c0002b03:	89 ce                	mov    esi,ecx
c0002b05:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002b08:	bb 01 00 00 00       	mov    ebx,0x1
c0002b0d:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b10:	83 e1 07             	and    ecx,0x7
c0002b13:	c1 ee 03             	shr    esi,0x3
c0002b16:	d3 e3                	shl    ebx,cl
c0002b18:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b1e:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b22:	89 c1                	mov    ecx,eax
c0002b24:	89 d3                	mov    ebx,edx
c0002b26:	83 c1 01             	add    ecx,0x1
c0002b29:	83 d3 00             	adc    ebx,0x0
c0002b2c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b30:	89 d1                	mov    ecx,edx
c0002b32:	89 c2                	mov    edx,eax
c0002b34:	89 f8                	mov    eax,edi
c0002b36:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b3a:	e8 e7 f6 ff ff       	call   c0002226 <move_window>
c0002b3f:	89 c1                	mov    ecx,eax
c0002b41:	85 c0                	test   eax,eax
c0002b43:	75 48                	jne    c0002b8d <change_bitmap+0x9f>
c0002b45:	31 d2                	xor    edx,edx
c0002b47:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b4b:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b4f:	0f 95 c2             	setne  dl
c0002b52:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b56:	74 3c                	je     c0002b94 <change_bitmap+0xa6>
c0002b58:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b5c:	4d                   	dec    ebp
c0002b5d:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b61:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b65:	74 32                	je     c0002b99 <change_bitmap+0xab>
c0002b67:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b6b:	75 d8                	jne    c0002b45 <change_bitmap+0x57>
c0002b6d:	8d 46 01             	lea    eax,[esi+0x1]
c0002b70:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b75:	89 c3                	mov    ebx,eax
c0002b77:	31 f6                	xor    esi,esi
c0002b79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b7d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b81:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b87:	74 99                	je     c0002b22 <change_bitmap+0x34>
c0002b89:	89 de                	mov    esi,ebx
c0002b8b:	eb b8                	jmp    c0002b45 <change_bitmap+0x57>
c0002b8d:	b9 01 00 00 00       	mov    ecx,0x1
c0002b92:	eb 05                	jmp    c0002b99 <change_bitmap+0xab>
c0002b94:	b9 02 00 00 00       	mov    ecx,0x2
c0002b99:	83 c4 1c             	add    esp,0x1c
c0002b9c:	89 c8                	mov    eax,ecx
c0002b9e:	5b                   	pop    ebx
c0002b9f:	5e                   	pop    esi
c0002ba0:	5f                   	pop    edi
c0002ba1:	5d                   	pop    ebp
c0002ba2:	c3                   	ret    

c0002ba3 <put_fat>:
c0002ba3:	83 fa 01             	cmp    edx,0x1
c0002ba6:	0f 86 7b 01 00 00    	jbe    c0002d27 <put_fat+0x184>
c0002bac:	55                   	push   ebp
c0002bad:	57                   	push   edi
c0002bae:	89 cf                	mov    edi,ecx
c0002bb0:	56                   	push   esi
c0002bb1:	b9 02 00 00 00       	mov    ecx,0x2
c0002bb6:	53                   	push   ebx
c0002bb7:	89 c6                	mov    esi,eax
c0002bb9:	83 ec 1c             	sub    esp,0x1c
c0002bbc:	89 d3                	mov    ebx,edx
c0002bbe:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bc1:	0f 86 68 01 00 00    	jbe    c0002d2f <put_fat+0x18c>
c0002bc7:	8a 00                	mov    al,BYTE PTR [eax]
c0002bc9:	3c 02                	cmp    al,0x2
c0002bcb:	0f 84 c7 00 00 00    	je     c0002c98 <put_fat+0xf5>
c0002bd1:	77 09                	ja     c0002bdc <put_fat+0x39>
c0002bd3:	fe c8                	dec    al
c0002bd5:	74 17                	je     c0002bee <put_fat+0x4b>
c0002bd7:	e9 53 01 00 00       	jmp    c0002d2f <put_fat+0x18c>
c0002bdc:	b9 02 00 00 00       	mov    ecx,0x2
c0002be1:	3c 04                	cmp    al,0x4
c0002be3:	0f 86 e1 00 00 00    	jbe    c0002cca <put_fat+0x127>
c0002be9:	e9 41 01 00 00       	jmp    c0002d2f <put_fat+0x18c>
c0002bee:	89 d5                	mov    ebp,edx
c0002bf0:	31 c9                	xor    ecx,ecx
c0002bf2:	d1 ed                	shr    ebp,1
c0002bf4:	89 f0                	mov    eax,esi
c0002bf6:	01 d5                	add    ebp,edx
c0002bf8:	89 ea                	mov    edx,ebp
c0002bfa:	c1 ea 09             	shr    edx,0x9
c0002bfd:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c00:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c03:	e8 1e f6 ff ff       	call   c0002226 <move_window>
c0002c08:	89 c1                	mov    ecx,eax
c0002c0a:	85 c0                	test   eax,eax
c0002c0c:	0f 85 1d 01 00 00    	jne    c0002d2f <put_fat+0x18c>
c0002c12:	8d 46 54             	lea    eax,[esi+0x54]
c0002c15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c19:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c1c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c26:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c2a:	83 e3 01             	and    ebx,0x1
c0002c2d:	89 f8                	mov    eax,edi
c0002c2f:	74 0d                	je     c0002c3e <put_fat+0x9b>
c0002c31:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c34:	89 fa                	mov    edx,edi
c0002c36:	c1 e2 04             	shl    edx,0x4
c0002c39:	83 e0 0f             	and    eax,0xf
c0002c3c:	09 d0                	or     eax,edx
c0002c3e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c42:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c45:	c1 ea 09             	shr    edx,0x9
c0002c48:	31 c9                	xor    ecx,ecx
c0002c4a:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c4d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c51:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c54:	89 f0                	mov    eax,esi
c0002c56:	e8 cb f5 ff ff       	call   c0002226 <move_window>
c0002c5b:	89 c1                	mov    ecx,eax
c0002c5d:	85 c0                	test   eax,eax
c0002c5f:	0f 85 ca 00 00 00    	jne    c0002d2f <put_fat+0x18c>
c0002c65:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c69:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c6f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c73:	85 db                	test   ebx,ebx
c0002c75:	74 07                	je     c0002c7e <put_fat+0xdb>
c0002c77:	c1 ef 04             	shr    edi,0x4
c0002c7a:	89 fa                	mov    edx,edi
c0002c7c:	eb 0e                	jmp    c0002c8c <put_fat+0xe9>
c0002c7e:	c1 ef 08             	shr    edi,0x8
c0002c81:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c84:	83 e2 f0             	and    edx,0xfffffff0
c0002c87:	83 e7 0f             	and    edi,0xf
c0002c8a:	09 fa                	or     edx,edi
c0002c8c:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c8f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c93:	e9 97 00 00 00       	jmp    c0002d2f <put_fat+0x18c>
c0002c98:	c1 ea 08             	shr    edx,0x8
c0002c9b:	31 c9                	xor    ecx,ecx
c0002c9d:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ca0:	89 f0                	mov    eax,esi
c0002ca2:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ca5:	e8 7c f5 ff ff       	call   c0002226 <move_window>
c0002caa:	89 c1                	mov    ecx,eax
c0002cac:	85 c0                	test   eax,eax
c0002cae:	75 7f                	jne    c0002d2f <put_fat+0x18c>
c0002cb0:	01 db                	add    ebx,ebx
c0002cb2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb6:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cbc:	0f b7 d7             	movzx  edx,di
c0002cbf:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002cc3:	e8 f9 ed ff ff       	call   c0001ac1 <st_word>
c0002cc8:	eb 53                	jmp    c0002d1d <put_fat+0x17a>
c0002cca:	c1 ea 07             	shr    edx,0x7
c0002ccd:	31 c9                	xor    ecx,ecx
c0002ccf:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cd2:	89 f0                	mov    eax,esi
c0002cd4:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cd7:	e8 4a f5 ff ff       	call   c0002226 <move_window>
c0002cdc:	89 c1                	mov    ecx,eax
c0002cde:	85 c0                	test   eax,eax
c0002ce0:	75 4d                	jne    c0002d2f <put_fat+0x18c>
c0002ce2:	c1 e3 02             	shl    ebx,0x2
c0002ce5:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ceb:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cee:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cf2:	74 1c                	je     c0002d10 <put_fat+0x16d>
c0002cf4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cf8:	89 d8                	mov    eax,ebx
c0002cfa:	e8 5d ed ff ff       	call   c0001a5c <ld_dword>
c0002cff:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002d05:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d0a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d0e:	09 c7                	or     edi,eax
c0002d10:	89 fa                	mov    edx,edi
c0002d12:	89 d8                	mov    eax,ebx
c0002d14:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d18:	e8 a8 ed ff ff       	call   c0001ac5 <st_dword>
c0002d1d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d21:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d25:	eb 08                	jmp    c0002d2f <put_fat+0x18c>
c0002d27:	b9 02 00 00 00       	mov    ecx,0x2
c0002d2c:	89 c8                	mov    eax,ecx
c0002d2e:	c3                   	ret    
c0002d2f:	83 c4 1c             	add    esp,0x1c
c0002d32:	89 c8                	mov    eax,ecx
c0002d34:	5b                   	pop    ebx
c0002d35:	5e                   	pop    esi
c0002d36:	5f                   	pop    edi
c0002d37:	5d                   	pop    ebp
c0002d38:	c3                   	ret    

c0002d39 <fill_last_frag>:
c0002d39:	57                   	push   edi
c0002d3a:	89 cf                	mov    edi,ecx
c0002d3c:	56                   	push   esi
c0002d3d:	89 d6                	mov    esi,edx
c0002d3f:	53                   	push   ebx
c0002d40:	89 c3                	mov    ebx,eax
c0002d42:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d45:	85 c0                	test   eax,eax
c0002d47:	74 21                	je     c0002d6a <fill_last_frag+0x31>
c0002d49:	89 f9                	mov    ecx,edi
c0002d4b:	83 f8 01             	cmp    eax,0x1
c0002d4e:	76 05                	jbe    c0002d55 <fill_last_frag+0x1c>
c0002d50:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d53:	29 c1                	sub    ecx,eax
c0002d55:	8d 56 01             	lea    edx,[esi+0x1]
c0002d58:	29 c2                	sub    edx,eax
c0002d5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d5c:	e8 42 fe ff ff       	call   c0002ba3 <put_fat>
c0002d61:	85 c0                	test   eax,eax
c0002d63:	75 05                	jne    c0002d6a <fill_last_frag+0x31>
c0002d65:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d68:	eb d8                	jmp    c0002d42 <fill_last_frag+0x9>
c0002d6a:	5b                   	pop    ebx
c0002d6b:	5e                   	pop    esi
c0002d6c:	5f                   	pop    edi
c0002d6d:	c3                   	ret    

c0002d6e <fill_first_frag>:
c0002d6e:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d72:	75 2d                	jne    c0002da1 <fill_first_frag+0x33>
c0002d74:	57                   	push   edi
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	89 c3                	mov    ebx,eax
c0002d79:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d7c:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d7f:	01 d7                	add    edi,edx
c0002d81:	39 fa                	cmp    edx,edi
c0002d83:	74 14                	je     c0002d99 <fill_first_frag+0x2b>
c0002d85:	8d 72 01             	lea    esi,[edx+0x1]
c0002d88:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d8a:	89 f1                	mov    ecx,esi
c0002d8c:	e8 12 fe ff ff       	call   c0002ba3 <put_fat>
c0002d91:	89 f2                	mov    edx,esi
c0002d93:	85 c0                	test   eax,eax
c0002d95:	74 ea                	je     c0002d81 <fill_first_frag+0x13>
c0002d97:	eb 0b                	jmp    c0002da4 <fill_first_frag+0x36>
c0002d99:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d9d:	31 c0                	xor    eax,eax
c0002d9f:	eb 03                	jmp    c0002da4 <fill_first_frag+0x36>
c0002da1:	31 c0                	xor    eax,eax
c0002da3:	c3                   	ret    
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	c3                   	ret    

c0002da8 <get_fat>:
c0002da8:	83 fa 01             	cmp    edx,0x1
c0002dab:	0f 86 db 01 00 00    	jbe    c0002f8c <get_fat+0x1e4>
c0002db1:	55                   	push   ebp
c0002db2:	b9 01 00 00 00       	mov    ecx,0x1
c0002db7:	57                   	push   edi
c0002db8:	56                   	push   esi
c0002db9:	53                   	push   ebx
c0002dba:	83 ec 1c             	sub    esp,0x1c
c0002dbd:	8b 38                	mov    edi,DWORD PTR [eax]
c0002dbf:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002dc2:	0f 86 cc 01 00 00    	jbe    c0002f94 <get_fat+0x1ec>
c0002dc8:	89 c3                	mov    ebx,eax
c0002dca:	8a 07                	mov    al,BYTE PTR [edi]
c0002dcc:	89 d6                	mov    esi,edx
c0002dce:	3c 02                	cmp    al,0x2
c0002dd0:	0f 84 99 00 00 00    	je     c0002e6f <get_fat+0xc7>
c0002dd6:	77 09                	ja     c0002de1 <get_fat+0x39>
c0002dd8:	fe c8                	dec    al
c0002dda:	74 1a                	je     c0002df6 <get_fat+0x4e>
c0002ddc:	e9 b3 01 00 00       	jmp    c0002f94 <get_fat+0x1ec>
c0002de1:	3c 03                	cmp    al,0x3
c0002de3:	0f 84 b5 00 00 00    	je     c0002e9e <get_fat+0xf6>
c0002de9:	3c 04                	cmp    al,0x4
c0002deb:	0f 84 e3 00 00 00    	je     c0002ed4 <get_fat+0x12c>
c0002df1:	e9 9e 01 00 00       	jmp    c0002f94 <get_fat+0x1ec>
c0002df6:	89 d3                	mov    ebx,edx
c0002df8:	31 c9                	xor    ecx,ecx
c0002dfa:	d1 eb                	shr    ebx,1
c0002dfc:	89 f8                	mov    eax,edi
c0002dfe:	01 d3                	add    ebx,edx
c0002e00:	89 da                	mov    edx,ebx
c0002e02:	c1 ea 09             	shr    edx,0x9
c0002e05:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e08:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e0b:	e8 16 f4 ff ff       	call   c0002226 <move_window>
c0002e10:	85 c0                	test   eax,eax
c0002e12:	74 08                	je     c0002e1c <get_fat+0x74>
c0002e14:	83 c9 ff             	or     ecx,0xffffffff
c0002e17:	e9 78 01 00 00       	jmp    c0002f94 <get_fat+0x1ec>
c0002e1c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e1f:	31 c9                	xor    ecx,ecx
c0002e21:	89 ea                	mov    edx,ebp
c0002e23:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e29:	c1 ea 09             	shr    edx,0x9
c0002e2c:	89 f8                	mov    eax,edi
c0002e2e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e31:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e35:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e38:	e8 e9 f3 ff ff       	call   c0002226 <move_window>
c0002e3d:	85 c0                	test   eax,eax
c0002e3f:	75 d3                	jne    c0002e14 <get_fat+0x6c>
c0002e41:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e47:	0f b6 c3             	movzx  eax,bl
c0002e4a:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e4f:	c1 e3 08             	shl    ebx,0x8
c0002e52:	09 c3                	or     ebx,eax
c0002e54:	89 d9                	mov    ecx,ebx
c0002e56:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e5c:	83 e6 01             	and    esi,0x1
c0002e5f:	0f 84 2f 01 00 00    	je     c0002f94 <get_fat+0x1ec>
c0002e65:	89 d9                	mov    ecx,ebx
c0002e67:	c1 e9 04             	shr    ecx,0x4
c0002e6a:	e9 25 01 00 00       	jmp    c0002f94 <get_fat+0x1ec>
c0002e6f:	c1 ea 08             	shr    edx,0x8
c0002e72:	31 c9                	xor    ecx,ecx
c0002e74:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e77:	89 f8                	mov    eax,edi
c0002e79:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e7c:	e8 a5 f3 ff ff       	call   c0002226 <move_window>
c0002e81:	85 c0                	test   eax,eax
c0002e83:	75 8f                	jne    c0002e14 <get_fat+0x6c>
c0002e85:	01 f6                	add    esi,esi
c0002e87:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e8d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e91:	e8 b9 eb ff ff       	call   c0001a4f <ld_word>
c0002e96:	0f b7 c8             	movzx  ecx,ax
c0002e99:	e9 f6 00 00 00       	jmp    c0002f94 <get_fat+0x1ec>
c0002e9e:	c1 ea 07             	shr    edx,0x7
c0002ea1:	31 c9                	xor    ecx,ecx
c0002ea3:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ea6:	89 f8                	mov    eax,edi
c0002ea8:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eab:	e8 76 f3 ff ff       	call   c0002226 <move_window>
c0002eb0:	85 c0                	test   eax,eax
c0002eb2:	0f 85 5c ff ff ff    	jne    c0002e14 <get_fat+0x6c>
c0002eb8:	c1 e6 02             	shl    esi,0x2
c0002ebb:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ec1:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ec5:	e8 92 eb ff ff       	call   c0001a5c <ld_dword>
c0002eca:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ecf:	e9 b4 00 00 00       	jmp    c0002f88 <get_fat+0x1e0>
c0002ed4:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ed7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002eda:	89 d1                	mov    ecx,edx
c0002edc:	09 c1                	or     ecx,eax
c0002ede:	74 06                	je     c0002ee6 <get_fat+0x13e>
c0002ee0:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ee4:	75 0f                	jne    c0002ef5 <get_fat+0x14d>
c0002ee6:	b9 01 00 00 00       	mov    ecx,0x1
c0002eeb:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002eef:	0f 85 9f 00 00 00    	jne    c0002f94 <get_fat+0x1ec>
c0002ef5:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002ef9:	89 f5                	mov    ebp,esi
c0002efb:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002f00:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002f03:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002f06:	80 f9 02             	cmp    cl,0x2
c0002f09:	75 35                	jne    c0002f40 <get_fat+0x198>
c0002f0b:	83 c0 ff             	add    eax,0xffffffff
c0002f0e:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f13:	83 d2 ff             	adc    edx,0xffffffff
c0002f16:	31 db                	xor    ebx,ebx
c0002f18:	53                   	push   ebx
c0002f19:	51                   	push   ecx
c0002f1a:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f1e:	c1 ea 09             	shr    edx,0x9
c0002f21:	52                   	push   edx
c0002f22:	50                   	push   eax
c0002f23:	e8 e4 c5 01 00       	call   c001f50c <__udivdi3>
c0002f28:	83 c4 10             	add    esp,0x10
c0002f2b:	b9 01 00 00 00       	mov    ecx,0x1
c0002f30:	39 c5                	cmp    ebp,eax
c0002f32:	77 60                	ja     c0002f94 <get_fat+0x1ec>
c0002f34:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f39:	74 59                	je     c0002f94 <get_fat+0x1ec>
c0002f3b:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f3e:	eb 54                	jmp    c0002f94 <get_fat+0x1ec>
c0002f40:	80 f9 03             	cmp    cl,0x3
c0002f43:	75 05                	jne    c0002f4a <get_fat+0x1a2>
c0002f45:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f48:	77 f1                	ja     c0002f3b <get_fat+0x193>
c0002f4a:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f4f:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f53:	75 3f                	jne    c0002f94 <get_fat+0x1ec>
c0002f55:	89 f2                	mov    edx,esi
c0002f57:	31 c9                	xor    ecx,ecx
c0002f59:	c1 ea 07             	shr    edx,0x7
c0002f5c:	89 f8                	mov    eax,edi
c0002f5e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f61:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f64:	e8 bd f2 ff ff       	call   c0002226 <move_window>
c0002f69:	85 c0                	test   eax,eax
c0002f6b:	0f 85 a3 fe ff ff    	jne    c0002e14 <get_fat+0x6c>
c0002f71:	c1 e6 02             	shl    esi,0x2
c0002f74:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f7a:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f7e:	e8 d9 ea ff ff       	call   c0001a5c <ld_dword>
c0002f83:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f88:	89 c1                	mov    ecx,eax
c0002f8a:	eb 08                	jmp    c0002f94 <get_fat+0x1ec>
c0002f8c:	b9 01 00 00 00       	mov    ecx,0x1
c0002f91:	89 c8                	mov    eax,ecx
c0002f93:	c3                   	ret    
c0002f94:	83 c4 1c             	add    esp,0x1c
c0002f97:	89 c8                	mov    eax,ecx
c0002f99:	5b                   	pop    ebx
c0002f9a:	5e                   	pop    esi
c0002f9b:	5f                   	pop    edi
c0002f9c:	5d                   	pop    ebp
c0002f9d:	c3                   	ret    

c0002f9e <dir_sdi>:
c0002f9e:	55                   	push   ebp
c0002f9f:	57                   	push   edi
c0002fa0:	56                   	push   esi
c0002fa1:	53                   	push   ebx
c0002fa2:	89 c3                	mov    ebx,eax
c0002fa4:	83 ec 1c             	sub    esp,0x1c
c0002fa7:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa9:	31 c0                	xor    eax,eax
c0002fab:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fae:	0f 94 c0             	sete   al
c0002fb1:	48                   	dec    eax
c0002fb2:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fb7:	05 00 00 00 10       	add    eax,0x10000000
c0002fbc:	39 d0                	cmp    eax,edx
c0002fbe:	77 0a                	ja     c0002fca <dir_sdi+0x2c>
c0002fc0:	b8 02 00 00 00       	mov    eax,0x2
c0002fc5:	e9 c4 00 00 00       	jmp    c000308e <dir_sdi+0xf0>
c0002fca:	89 d6                	mov    esi,edx
c0002fcc:	f6 c2 1f             	test   dl,0x1f
c0002fcf:	75 ef                	jne    c0002fc0 <dir_sdi+0x22>
c0002fd1:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fd4:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fd7:	85 c9                	test   ecx,ecx
c0002fd9:	75 2d                	jne    c0003008 <dir_sdi+0x6a>
c0002fdb:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fde:	77 1b                	ja     c0002ffb <dir_sdi+0x5d>
c0002fe0:	89 f2                	mov    edx,esi
c0002fe2:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fe6:	c1 ea 05             	shr    edx,0x5
c0002fe9:	39 c2                	cmp    edx,eax
c0002feb:	73 d3                	jae    c0002fc0 <dir_sdi+0x22>
c0002fed:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002ff0:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002ff3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002ff6:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002ff9:	eb 4b                	jmp    c0003046 <dir_sdi+0xa8>
c0002ffb:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002ffe:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003002:	85 c0                	test   eax,eax
c0003004:	74 da                	je     c0002fe0 <dir_sdi+0x42>
c0003006:	89 c1                	mov    ecx,eax
c0003008:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000300c:	c1 e5 09             	shl    ebp,0x9
c000300f:	89 ca                	mov    edx,ecx
c0003011:	39 ee                	cmp    esi,ebp
c0003013:	72 1c                	jb     c0003031 <dir_sdi+0x93>
c0003015:	89 d8                	mov    eax,ebx
c0003017:	e8 8c fd ff ff       	call   c0002da8 <get_fat>
c000301c:	89 c1                	mov    ecx,eax
c000301e:	83 f8 ff             	cmp    eax,0xffffffff
c0003021:	74 66                	je     c0003089 <dir_sdi+0xeb>
c0003023:	83 f8 01             	cmp    eax,0x1
c0003026:	76 98                	jbe    c0002fc0 <dir_sdi+0x22>
c0003028:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000302b:	76 93                	jbe    c0002fc0 <dir_sdi+0x22>
c000302d:	29 ee                	sub    esi,ebp
c000302f:	eb de                	jmp    c000300f <dir_sdi+0x71>
c0003031:	89 f8                	mov    eax,edi
c0003033:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003037:	e8 ac ec ff ff       	call   c0001ce8 <clst2sect>
c000303c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003040:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003043:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003046:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003049:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000304c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000304f:	89 d1                	mov    ecx,edx
c0003051:	09 c1                	or     ecx,eax
c0003053:	0f 84 67 ff ff ff    	je     c0002fc0 <dir_sdi+0x22>
c0003059:	89 f1                	mov    ecx,esi
c000305b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003063:	c1 e9 09             	shr    ecx,0x9
c0003066:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000306a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000306e:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003072:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003078:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000307b:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000307f:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003082:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003085:	31 c0                	xor    eax,eax
c0003087:	eb 05                	jmp    c000308e <dir_sdi+0xf0>
c0003089:	b8 01 00 00 00       	mov    eax,0x1
c000308e:	83 c4 1c             	add    esp,0x1c
c0003091:	5b                   	pop    ebx
c0003092:	5e                   	pop    esi
c0003093:	5f                   	pop    edi
c0003094:	5d                   	pop    ebp
c0003095:	c3                   	ret    

c0003096 <create_chain>:
c0003096:	55                   	push   ebp
c0003097:	89 c5                	mov    ebp,eax
c0003099:	57                   	push   edi
c000309a:	56                   	push   esi
c000309b:	53                   	push   ebx
c000309c:	83 ec 1c             	sub    esp,0x1c
c000309f:	85 d2                	test   edx,edx
c00030a1:	8b 30                	mov    esi,DWORD PTR [eax]
c00030a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00030a7:	75 0e                	jne    c00030b7 <create_chain+0x21>
c00030a9:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030ac:	85 ff                	test   edi,edi
c00030ae:	74 39                	je     c00030e9 <create_chain+0x53>
c00030b0:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030b3:	77 39                	ja     c00030ee <create_chain+0x58>
c00030b5:	eb 32                	jmp    c00030e9 <create_chain+0x53>
c00030b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030bb:	e8 e8 fc ff ff       	call   c0002da8 <get_fat>
c00030c0:	89 c3                	mov    ebx,eax
c00030c2:	83 f8 01             	cmp    eax,0x1
c00030c5:	77 0a                	ja     c00030d1 <create_chain+0x3b>
c00030c7:	bb 01 00 00 00       	mov    ebx,0x1
c00030cc:	e9 bc 01 00 00       	jmp    c000328d <create_chain+0x1f7>
c00030d1:	83 f8 ff             	cmp    eax,0xffffffff
c00030d4:	0f 84 60 01 00 00    	je     c000323a <create_chain+0x1a4>
c00030da:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030dd:	0f 87 aa 01 00 00    	ja     c000328d <create_chain+0x1f7>
c00030e3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030e7:	eb 05                	jmp    c00030ee <create_chain+0x58>
c00030e9:	bf 01 00 00 00       	mov    edi,0x1
c00030ee:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030f2:	75 07                	jne    c00030fb <create_chain+0x65>
c00030f4:	31 db                	xor    ebx,ebx
c00030f6:	e9 92 01 00 00       	jmp    c000328d <create_chain+0x1f7>
c00030fb:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030fe:	75 74                	jne    c0003174 <create_chain+0xde>
c0003100:	b9 01 00 00 00       	mov    ecx,0x1
c0003105:	89 fa                	mov    edx,edi
c0003107:	89 f0                	mov    eax,esi
c0003109:	e8 2d f9 ff ff       	call   c0002a3b <find_bitmap>
c000310e:	89 c3                	mov    ebx,eax
c0003110:	8d 40 ff             	lea    eax,[eax-0x1]
c0003113:	83 f8 fd             	cmp    eax,0xfffffffd
c0003116:	0f 87 71 01 00 00    	ja     c000328d <create_chain+0x1f7>
c000311c:	83 ec 0c             	sub    esp,0xc
c000311f:	b9 01 00 00 00       	mov    ecx,0x1
c0003124:	89 da                	mov    edx,ebx
c0003126:	89 f0                	mov    eax,esi
c0003128:	6a 01                	push   0x1
c000312a:	e8 bf f9 ff ff       	call   c0002aee <change_bitmap>
c000312f:	83 c4 10             	add    esp,0x10
c0003132:	83 f8 02             	cmp    eax,0x2
c0003135:	74 90                	je     c00030c7 <create_chain+0x31>
c0003137:	83 f8 01             	cmp    eax,0x1
c000313a:	0f 84 fa 00 00 00    	je     c000323a <create_chain+0x1a4>
c0003140:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003145:	75 09                	jne    c0003150 <create_chain+0xba>
c0003147:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000314b:	e9 0e 01 00 00       	jmp    c000325e <create_chain+0x1c8>
c0003150:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003154:	0f 85 e9 00 00 00    	jne    c0003243 <create_chain+0x1ad>
c000315a:	8d 57 01             	lea    edx,[edi+0x1]
c000315d:	39 da                	cmp    edx,ebx
c000315f:	0f 84 f9 00 00 00    	je     c000325e <create_chain+0x1c8>
c0003165:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003168:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000316c:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000316f:	e9 cf 00 00 00       	jmp    c0003243 <create_chain+0x1ad>
c0003174:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003178:	75 41                	jne    c00031bb <create_chain+0x125>
c000317a:	8d 5f 01             	lea    ebx,[edi+0x1]
c000317d:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003180:	77 05                	ja     c0003187 <create_chain+0xf1>
c0003182:	bb 02 00 00 00       	mov    ebx,0x2
c0003187:	89 da                	mov    edx,ebx
c0003189:	89 e8                	mov    eax,ebp
c000318b:	e8 18 fc ff ff       	call   c0002da8 <get_fat>
c0003190:	83 f8 01             	cmp    eax,0x1
c0003193:	0f 84 a6 00 00 00    	je     c000323f <create_chain+0x1a9>
c0003199:	83 f8 ff             	cmp    eax,0xffffffff
c000319c:	0f 84 9d 00 00 00    	je     c000323f <create_chain+0x1a9>
c00031a2:	85 c0                	test   eax,eax
c00031a4:	74 11                	je     c00031b7 <create_chain+0x121>
c00031a6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00031a9:	83 f8 01             	cmp    eax,0x1
c00031ac:	76 0d                	jbe    c00031bb <create_chain+0x125>
c00031ae:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031b1:	76 08                	jbe    c00031bb <create_chain+0x125>
c00031b3:	89 c7                	mov    edi,eax
c00031b5:	eb 04                	jmp    c00031bb <create_chain+0x125>
c00031b7:	85 db                	test   ebx,ebx
c00031b9:	75 36                	jne    c00031f1 <create_chain+0x15b>
c00031bb:	89 fb                	mov    ebx,edi
c00031bd:	43                   	inc    ebx
c00031be:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031c1:	77 0e                	ja     c00031d1 <create_chain+0x13b>
c00031c3:	83 ff 01             	cmp    edi,0x1
c00031c6:	0f 86 28 ff ff ff    	jbe    c00030f4 <create_chain+0x5e>
c00031cc:	bb 02 00 00 00       	mov    ebx,0x2
c00031d1:	89 da                	mov    edx,ebx
c00031d3:	89 e8                	mov    eax,ebp
c00031d5:	e8 ce fb ff ff       	call   c0002da8 <get_fat>
c00031da:	85 c0                	test   eax,eax
c00031dc:	74 13                	je     c00031f1 <create_chain+0x15b>
c00031de:	83 f8 01             	cmp    eax,0x1
c00031e1:	74 5c                	je     c000323f <create_chain+0x1a9>
c00031e3:	83 f8 ff             	cmp    eax,0xffffffff
c00031e6:	74 57                	je     c000323f <create_chain+0x1a9>
c00031e8:	39 fb                	cmp    ebx,edi
c00031ea:	75 d1                	jne    c00031bd <create_chain+0x127>
c00031ec:	e9 03 ff ff ff       	jmp    c00030f4 <create_chain+0x5e>
c00031f1:	83 c9 ff             	or     ecx,0xffffffff
c00031f4:	89 da                	mov    edx,ebx
c00031f6:	89 f0                	mov    eax,esi
c00031f8:	e8 a6 f9 ff ff       	call   c0002ba3 <put_fat>
c00031fd:	85 c0                	test   eax,eax
c00031ff:	75 14                	jne    c0003215 <create_chain+0x17f>
c0003201:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003206:	74 0d                	je     c0003215 <create_chain+0x17f>
c0003208:	89 d9                	mov    ecx,ebx
c000320a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000320e:	89 f0                	mov    eax,esi
c0003210:	e8 8e f9 ff ff       	call   c0002ba3 <put_fat>
c0003215:	85 c0                	test   eax,eax
c0003217:	75 1a                	jne    c0003233 <create_chain+0x19d>
c0003219:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000321c:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000321f:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003222:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003225:	39 d0                	cmp    eax,edx
c0003227:	77 04                	ja     c000322d <create_chain+0x197>
c0003229:	48                   	dec    eax
c000322a:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000322d:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003231:	eb 5a                	jmp    c000328d <create_chain+0x1f7>
c0003233:	48                   	dec    eax
c0003234:	0f 85 8d fe ff ff    	jne    c00030c7 <create_chain+0x31>
c000323a:	83 cb ff             	or     ebx,0xffffffff
c000323d:	eb 4e                	jmp    c000328d <create_chain+0x1f7>
c000323f:	89 c3                	mov    ebx,eax
c0003241:	eb 4a                	jmp    c000328d <create_chain+0x1f7>
c0003243:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003247:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000324a:	41                   	inc    ecx
c000324b:	39 d9                	cmp    ecx,ebx
c000324d:	75 19                	jne    c0003268 <create_chain+0x1d2>
c000324f:	b9 02 00 00 00       	mov    ecx,0x2
c0003254:	85 d2                	test   edx,edx
c0003256:	74 03                	je     c000325b <create_chain+0x1c5>
c0003258:	8d 4a 01             	lea    ecx,[edx+0x1]
c000325b:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000325e:	85 c0                	test   eax,eax
c0003260:	0f 85 61 fe ff ff    	jne    c00030c7 <create_chain+0x31>
c0003266:	eb b1                	jmp    c0003219 <create_chain+0x183>
c0003268:	85 d2                	test   edx,edx
c000326a:	75 07                	jne    c0003273 <create_chain+0x1dd>
c000326c:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003273:	89 d9                	mov    ecx,ebx
c0003275:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003279:	89 e8                	mov    eax,ebp
c000327b:	e8 b9 fa ff ff       	call   c0002d39 <fill_last_frag>
c0003280:	85 c0                	test   eax,eax
c0003282:	75 af                	jne    c0003233 <create_chain+0x19d>
c0003284:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000328b:	eb 8c                	jmp    c0003219 <create_chain+0x183>
c000328d:	83 c4 1c             	add    esp,0x1c
c0003290:	89 d8                	mov    eax,ebx
c0003292:	5b                   	pop    ebx
c0003293:	5e                   	pop    esi
c0003294:	5f                   	pop    edi
c0003295:	5d                   	pop    ebp
c0003296:	c3                   	ret    

c0003297 <remove_chain>:
c0003297:	55                   	push   ebp
c0003298:	57                   	push   edi
c0003299:	56                   	push   esi
c000329a:	53                   	push   ebx
c000329b:	83 ec 1c             	sub    esp,0x1c
c000329e:	83 fa 01             	cmp    edx,0x1
c00032a1:	8b 18                	mov    ebx,DWORD PTR [eax]
c00032a3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032a7:	77 0a                	ja     c00032b3 <remove_chain+0x1c>
c00032a9:	b8 02 00 00 00       	mov    eax,0x2
c00032ae:	e9 24 01 00 00       	jmp    c00033d7 <remove_chain+0x140>
c00032b3:	89 d6                	mov    esi,edx
c00032b5:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032b8:	76 ef                	jbe    c00032a9 <remove_chain+0x12>
c00032ba:	89 c7                	mov    edi,eax
c00032bc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032c1:	75 06                	jne    c00032c9 <remove_chain+0x32>
c00032c3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032c7:	eb 54                	jmp    c000331d <remove_chain+0x86>
c00032c9:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032cc:	75 06                	jne    c00032d4 <remove_chain+0x3d>
c00032ce:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032d2:	74 ef                	je     c00032c3 <remove_chain+0x2c>
c00032d4:	83 c9 ff             	or     ecx,0xffffffff
c00032d7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032db:	89 d8                	mov    eax,ebx
c00032dd:	e8 c1 f8 ff ff       	call   c0002ba3 <put_fat>
c00032e2:	85 c0                	test   eax,eax
c00032e4:	74 dd                	je     c00032c3 <remove_chain+0x2c>
c00032e6:	e9 ec 00 00 00       	jmp    c00033d7 <remove_chain+0x140>
c00032eb:	83 f8 01             	cmp    eax,0x1
c00032ee:	74 b9                	je     c00032a9 <remove_chain+0x12>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	74 6d                	je     c0003362 <remove_chain+0xcb>
c00032f5:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032f8:	75 6f                	jne    c0003369 <remove_chain+0xd2>
c00032fa:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032fd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003300:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003303:	39 d0                	cmp    eax,edx
c0003305:	73 08                	jae    c000330f <remove_chain+0x78>
c0003307:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000330b:	40                   	inc    eax
c000330c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000330f:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003312:	39 e9                	cmp    ecx,ebp
c0003314:	75 64                	jne    c000337a <remove_chain+0xe3>
c0003316:	89 ee                	mov    esi,ebp
c0003318:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c000331b:	76 0f                	jbe    c000332c <remove_chain+0x95>
c000331d:	89 f2                	mov    edx,esi
c000331f:	89 f8                	mov    eax,edi
c0003321:	e8 82 fa ff ff       	call   c0002da8 <get_fat>
c0003326:	89 c5                	mov    ebp,eax
c0003328:	85 c0                	test   eax,eax
c000332a:	75 bf                	jne    c00032eb <remove_chain+0x54>
c000332c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000332f:	0f 85 a0 00 00 00    	jne    c00033d5 <remove_chain+0x13e>
c0003335:	eb 6c                	jmp    c00033a3 <remove_chain+0x10c>
c0003337:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000333a:	84 c0                	test   al,al
c000333c:	75 7d                	jne    c00033bb <remove_chain+0x124>
c000333e:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003341:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003345:	0f 84 86 00 00 00    	je     c00033d1 <remove_chain+0x13a>
c000334b:	89 da                	mov    edx,ebx
c000334d:	89 f8                	mov    eax,edi
c000334f:	e8 54 fa ff ff       	call   c0002da8 <get_fat>
c0003354:	83 f8 01             	cmp    eax,0x1
c0003357:	0f 86 4c ff ff ff    	jbe    c00032a9 <remove_chain+0x12>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	75 4e                	jne    c00033b0 <remove_chain+0x119>
c0003362:	b8 01 00 00 00       	mov    eax,0x1
c0003367:	eb 6e                	jmp    c00033d7 <remove_chain+0x140>
c0003369:	31 c9                	xor    ecx,ecx
c000336b:	89 f2                	mov    edx,esi
c000336d:	89 d8                	mov    eax,ebx
c000336f:	e8 2f f8 ff ff       	call   c0002ba3 <put_fat>
c0003374:	85 c0                	test   eax,eax
c0003376:	74 82                	je     c00032fa <remove_chain+0x63>
c0003378:	eb 5d                	jmp    c00033d7 <remove_chain+0x140>
c000337a:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000337d:	75 1b                	jne    c000339a <remove_chain+0x103>
c000337f:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003383:	83 ec 0c             	sub    esp,0xc
c0003386:	6a 00                	push   0x0
c0003388:	89 d8                	mov    eax,ebx
c000338a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000338e:	e8 5b f7 ff ff       	call   c0002aee <change_bitmap>
c0003393:	83 c4 10             	add    esp,0x10
c0003396:	85 c0                	test   eax,eax
c0003398:	75 3d                	jne    c00033d7 <remove_chain+0x140>
c000339a:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000339e:	e9 73 ff ff ff       	jmp    c0003316 <remove_chain+0x7f>
c00033a3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033a8:	75 8d                	jne    c0003337 <remove_chain+0xa0>
c00033aa:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033ae:	eb 25                	jmp    c00033d5 <remove_chain+0x13e>
c00033b0:	8d 53 01             	lea    edx,[ebx+0x1]
c00033b3:	89 c3                	mov    ebx,eax
c00033b5:	39 c2                	cmp    edx,eax
c00033b7:	74 88                	je     c0003341 <remove_chain+0xaa>
c00033b9:	eb 1a                	jmp    c00033d5 <remove_chain+0x13e>
c00033bb:	3c 03                	cmp    al,0x3
c00033bd:	75 16                	jne    c00033d5 <remove_chain+0x13e>
c00033bf:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033c2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033c6:	77 0d                	ja     c00033d5 <remove_chain+0x13e>
c00033c8:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033cb:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033cf:	72 04                	jb     c00033d5 <remove_chain+0x13e>
c00033d1:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033d5:	31 c0                	xor    eax,eax
c00033d7:	83 c4 1c             	add    esp,0x1c
c00033da:	5b                   	pop    ebx
c00033db:	5e                   	pop    esi
c00033dc:	5f                   	pop    edi
c00033dd:	5d                   	pop    ebp
c00033de:	c3                   	ret    

c00033df <dir_clear>:
c00033df:	55                   	push   ebp
c00033e0:	57                   	push   edi
c00033e1:	56                   	push   esi
c00033e2:	89 c6                	mov    esi,eax
c00033e4:	53                   	push   ebx
c00033e5:	83 ec 1c             	sub    esp,0x1c
c00033e8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033ec:	e8 a1 ed ff ff       	call   c0002192 <sync_window>
c00033f1:	85 c0                	test   eax,eax
c00033f3:	0f 85 de 00 00 00    	jne    c00034d7 <dir_clear+0xf8>
c00033f9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033fd:	89 f0                	mov    eax,esi
c00033ff:	e8 e4 e8 ff ff       	call   c0001ce8 <clst2sect>
c0003404:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000340b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000340f:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003412:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003415:	b9 00 02 00 00       	mov    ecx,0x200
c000341a:	31 d2                	xor    edx,edx
c000341c:	89 e8                	mov    eax,ebp
c000341e:	e8 c0 e6 ff ff       	call   c0001ae3 <mem_set>
c0003423:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003427:	c1 e3 09             	shl    ebx,0x9
c000342a:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003430:	76 1f                	jbe    c0003451 <dir_clear+0x72>
c0003432:	bb 00 80 00 00       	mov    ebx,0x8000
c0003437:	eb 18                	jmp    c0003451 <dir_clear+0x72>
c0003439:	83 ec 0c             	sub    esp,0xc
c000343c:	53                   	push   ebx
c000343d:	e8 f3 4d 00 00       	call   c0008235 <ff_memalloc>
c0003442:	83 c4 10             	add    esp,0x10
c0003445:	89 c7                	mov    edi,eax
c0003447:	85 c0                	test   eax,eax
c0003449:	0f 85 8f 00 00 00    	jne    c00034de <dir_clear+0xff>
c000344f:	d1 eb                	shr    ebx,1
c0003451:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003457:	77 e0                	ja     c0003439 <dir_clear+0x5a>
c0003459:	31 db                	xor    ebx,ebx
c000345b:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000345f:	39 d8                	cmp    eax,ebx
c0003461:	76 66                	jbe    c00034c9 <dir_clear+0xea>
c0003463:	83 ec 0c             	sub    esp,0xc
c0003466:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000346a:	6a 01                	push   0x1
c000346c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003474:	55                   	push   ebp
c0003475:	50                   	push   eax
c0003476:	e8 9f e5 ff ff       	call   c0001a1a <disk_write>
c000347b:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003480:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003485:	83 c4 20             	add    esp,0x20
c0003488:	85 c0                	test   eax,eax
c000348a:	75 3d                	jne    c00034c9 <dir_clear+0xea>
c000348c:	43                   	inc    ebx
c000348d:	eb cc                	jmp    c000345b <dir_clear+0x7c>
c000348f:	83 ec 0c             	sub    esp,0xc
c0003492:	89 d8                	mov    eax,ebx
c0003494:	31 d2                	xor    edx,edx
c0003496:	55                   	push   ebp
c0003497:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000349b:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000349f:	52                   	push   edx
c00034a0:	50                   	push   eax
c00034a1:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00034a5:	57                   	push   edi
c00034a6:	50                   	push   eax
c00034a7:	e8 6e e5 ff ff       	call   c0001a1a <disk_write>
c00034ac:	83 c4 20             	add    esp,0x20
c00034af:	85 c0                	test   eax,eax
c00034b1:	75 0a                	jne    c00034bd <dir_clear+0xde>
c00034b3:	01 eb                	add    ebx,ebp
c00034b5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034b9:	39 d8                	cmp    eax,ebx
c00034bb:	77 d2                	ja     c000348f <dir_clear+0xb0>
c00034bd:	83 ec 0c             	sub    esp,0xc
c00034c0:	57                   	push   edi
c00034c1:	e8 85 4d 00 00       	call   c000824b <ff_memfree>
c00034c6:	83 c4 10             	add    esp,0x10
c00034c9:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034cd:	39 d8                	cmp    eax,ebx
c00034cf:	0f 95 c0             	setne  al
c00034d2:	0f b6 c0             	movzx  eax,al
c00034d5:	eb 19                	jmp    c00034f0 <dir_clear+0x111>
c00034d7:	b8 01 00 00 00       	mov    eax,0x1
c00034dc:	eb 12                	jmp    c00034f0 <dir_clear+0x111>
c00034de:	89 d9                	mov    ecx,ebx
c00034e0:	31 d2                	xor    edx,edx
c00034e2:	c1 eb 09             	shr    ebx,0x9
c00034e5:	e8 f9 e5 ff ff       	call   c0001ae3 <mem_set>
c00034ea:	89 dd                	mov    ebp,ebx
c00034ec:	31 db                	xor    ebx,ebx
c00034ee:	eb c5                	jmp    c00034b5 <dir_clear+0xd6>
c00034f0:	83 c4 1c             	add    esp,0x1c
c00034f3:	5b                   	pop    ebx
c00034f4:	5e                   	pop    esi
c00034f5:	5f                   	pop    edi
c00034f6:	5d                   	pop    ebp
c00034f7:	c3                   	ret    

c00034f8 <dir_next>:
c00034f8:	55                   	push   ebp
c00034f9:	57                   	push   edi
c00034fa:	56                   	push   esi
c00034fb:	53                   	push   ebx
c00034fc:	89 c3                	mov    ebx,eax
c00034fe:	83 ec 1c             	sub    esp,0x1c
c0003501:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003503:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003506:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000350a:	8d 78 20             	lea    edi,[eax+0x20]
c000350d:	31 c0                	xor    eax,eax
c000350f:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003513:	0f 94 c0             	sete   al
c0003516:	48                   	dec    eax
c0003517:	25 00 00 20 f0       	and    eax,0xf0200000
c000351c:	05 00 00 00 10       	add    eax,0x10000000
c0003521:	39 f8                	cmp    eax,edi
c0003523:	77 0e                	ja     c0003533 <dir_next+0x3b>
c0003525:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000352c:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003533:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003536:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003539:	89 ce                	mov    esi,ecx
c000353b:	b8 04 00 00 00       	mov    eax,0x4
c0003540:	09 d6                	or     esi,edx
c0003542:	0f 84 da 00 00 00    	je     c0003622 <dir_next+0x12a>
c0003548:	89 f8                	mov    eax,edi
c000354a:	25 ff 01 00 00       	and    eax,0x1ff
c000354f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003553:	0f 85 b9 00 00 00    	jne    c0003612 <dir_next+0x11a>
c0003559:	83 c2 01             	add    edx,0x1
c000355c:	83 d1 00             	adc    ecx,0x0
c000355f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003562:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003565:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003568:	85 d2                	test   edx,edx
c000356a:	75 29                	jne    c0003595 <dir_next+0x9d>
c000356c:	89 fa                	mov    edx,edi
c000356e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003572:	c1 ea 05             	shr    edx,0x5
c0003575:	39 c2                	cmp    edx,eax
c0003577:	0f 82 95 00 00 00    	jb     c0003612 <dir_next+0x11a>
c000357d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003584:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000358b:	b8 04 00 00 00       	mov    eax,0x4
c0003590:	e9 8d 00 00 00       	jmp    c0003622 <dir_next+0x12a>
c0003595:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003599:	89 f9                	mov    ecx,edi
c000359b:	48                   	dec    eax
c000359c:	c1 e9 09             	shr    ecx,0x9
c000359f:	85 c8                	test   eax,ecx
c00035a1:	75 6f                	jne    c0003612 <dir_next+0x11a>
c00035a3:	89 d8                	mov    eax,ebx
c00035a5:	e8 fe f7 ff ff       	call   c0002da8 <get_fat>
c00035aa:	89 c6                	mov    esi,eax
c00035ac:	83 f8 01             	cmp    eax,0x1
c00035af:	77 07                	ja     c00035b8 <dir_next+0xc0>
c00035b1:	b8 02 00 00 00       	mov    eax,0x2
c00035b6:	eb 6a                	jmp    c0003622 <dir_next+0x12a>
c00035b8:	83 f8 ff             	cmp    eax,0xffffffff
c00035bb:	75 07                	jne    c00035c4 <dir_next+0xcc>
c00035bd:	b8 01 00 00 00       	mov    eax,0x1
c00035c2:	eb 5e                	jmp    c0003622 <dir_next+0x12a>
c00035c4:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035c7:	77 37                	ja     c0003600 <dir_next+0x108>
c00035c9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035ce:	74 ad                	je     c000357d <dir_next+0x85>
c00035d0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035d3:	89 d8                	mov    eax,ebx
c00035d5:	e8 bc fa ff ff       	call   c0003096 <create_chain>
c00035da:	89 c6                	mov    esi,eax
c00035dc:	b8 07 00 00 00       	mov    eax,0x7
c00035e1:	85 f6                	test   esi,esi
c00035e3:	74 3d                	je     c0003622 <dir_next+0x12a>
c00035e5:	83 fe 01             	cmp    esi,0x1
c00035e8:	74 c7                	je     c00035b1 <dir_next+0xb9>
c00035ea:	83 fe ff             	cmp    esi,0xffffffff
c00035ed:	74 ce                	je     c00035bd <dir_next+0xc5>
c00035ef:	89 f2                	mov    edx,esi
c00035f1:	89 e8                	mov    eax,ebp
c00035f3:	e8 e7 fd ff ff       	call   c00033df <dir_clear>
c00035f8:	85 c0                	test   eax,eax
c00035fa:	75 c1                	jne    c00035bd <dir_next+0xc5>
c00035fc:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003600:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003603:	89 f2                	mov    edx,esi
c0003605:	89 e8                	mov    eax,ebp
c0003607:	e8 dc e6 ff ff       	call   c0001ce8 <clst2sect>
c000360c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000360f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003612:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003616:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003619:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000361d:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003620:	31 c0                	xor    eax,eax
c0003622:	83 c4 1c             	add    esp,0x1c
c0003625:	5b                   	pop    ebx
c0003626:	5e                   	pop    esi
c0003627:	5f                   	pop    edi
c0003628:	5d                   	pop    ebp
c0003629:	c3                   	ret    

c000362a <load_xdir>:
c000362a:	55                   	push   ebp
c000362b:	57                   	push   edi
c000362c:	56                   	push   esi
c000362d:	89 c6                	mov    esi,eax
c000362f:	53                   	push   ebx
c0003630:	83 ec 1c             	sub    esp,0x1c
c0003633:	8b 00                	mov    eax,DWORD PTR [eax]
c0003635:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003638:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000363b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000363e:	e8 e3 eb ff ff       	call   c0002226 <move_window>
c0003643:	89 c3                	mov    ebx,eax
c0003645:	85 c0                	test   eax,eax
c0003647:	0f 85 0c 01 00 00    	jne    c0003759 <load_xdir+0x12f>
c000364d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003650:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003653:	0f 85 fb 00 00 00    	jne    c0003754 <load_xdir+0x12a>
c0003659:	89 f8                	mov    eax,edi
c000365b:	b9 20 00 00 00       	mov    ecx,0x20
c0003660:	e8 69 e4 ff ff       	call   c0001ace <mem_cpy>
c0003665:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003669:	40                   	inc    eax
c000366a:	c1 e0 05             	shl    eax,0x5
c000366d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003671:	83 e8 60             	sub    eax,0x60
c0003674:	3d 00 02 00 00       	cmp    eax,0x200
c0003679:	0f 87 d5 00 00 00    	ja     c0003754 <load_xdir+0x12a>
c000367f:	31 d2                	xor    edx,edx
c0003681:	89 f0                	mov    eax,esi
c0003683:	e8 70 fe ff ff       	call   c00034f8 <dir_next>
c0003688:	89 c3                	mov    ebx,eax
c000368a:	83 f8 04             	cmp    eax,0x4
c000368d:	0f 84 c1 00 00 00    	je     c0003754 <load_xdir+0x12a>
c0003693:	85 c0                	test   eax,eax
c0003695:	0f 85 be 00 00 00    	jne    c0003759 <load_xdir+0x12f>
c000369b:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000369e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036a1:	8b 06                	mov    eax,DWORD PTR [esi]
c00036a3:	e8 7e eb ff ff       	call   c0002226 <move_window>
c00036a8:	89 c3                	mov    ebx,eax
c00036aa:	85 c0                	test   eax,eax
c00036ac:	0f 85 a7 00 00 00    	jne    c0003759 <load_xdir+0x12f>
c00036b2:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036b5:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036b8:	0f 85 96 00 00 00    	jne    c0003754 <load_xdir+0x12a>
c00036be:	8d 47 20             	lea    eax,[edi+0x20]
c00036c1:	b9 20 00 00 00       	mov    ecx,0x20
c00036c6:	e8 03 e4 ff ff       	call   c0001ace <mem_cpy>
c00036cb:	31 d2                	xor    edx,edx
c00036cd:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036d1:	b9 0f 00 00 00       	mov    ecx,0xf
c00036d6:	83 c0 2c             	add    eax,0x2c
c00036d9:	f7 f1                	div    ecx
c00036db:	c1 e0 05             	shl    eax,0x5
c00036de:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036e2:	77 70                	ja     c0003754 <load_xdir+0x12a>
c00036e4:	bd 40 00 00 00       	mov    ebp,0x40
c00036e9:	31 d2                	xor    edx,edx
c00036eb:	89 f0                	mov    eax,esi
c00036ed:	e8 06 fe ff ff       	call   c00034f8 <dir_next>
c00036f2:	89 c3                	mov    ebx,eax
c00036f4:	83 f8 04             	cmp    eax,0x4
c00036f7:	74 5b                	je     c0003754 <load_xdir+0x12a>
c00036f9:	85 c0                	test   eax,eax
c00036fb:	75 5c                	jne    c0003759 <load_xdir+0x12f>
c00036fd:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003700:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003703:	8b 06                	mov    eax,DWORD PTR [esi]
c0003705:	e8 1c eb ff ff       	call   c0002226 <move_window>
c000370a:	89 c3                	mov    ebx,eax
c000370c:	85 c0                	test   eax,eax
c000370e:	75 49                	jne    c0003759 <load_xdir+0x12f>
c0003710:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003713:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003716:	75 3c                	jne    c0003754 <load_xdir+0x12a>
c0003718:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000371e:	77 0d                	ja     c000372d <load_xdir+0x103>
c0003720:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003723:	b9 20 00 00 00       	mov    ecx,0x20
c0003728:	e8 a1 e3 ff ff       	call   c0001ace <mem_cpy>
c000372d:	83 c5 20             	add    ebp,0x20
c0003730:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003734:	77 b3                	ja     c00036e9 <load_xdir+0xbf>
c0003736:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000373c:	77 1b                	ja     c0003759 <load_xdir+0x12f>
c000373e:	89 f8                	mov    eax,edi
c0003740:	e8 d8 e7 ff ff       	call   c0001f1d <xdir_sum>
c0003745:	89 c1                	mov    ecx,eax
c0003747:	8d 47 02             	lea    eax,[edi+0x2]
c000374a:	e8 00 e3 ff ff       	call   c0001a4f <ld_word>
c000374f:	66 39 c1             	cmp    cx,ax
c0003752:	74 05                	je     c0003759 <load_xdir+0x12f>
c0003754:	bb 02 00 00 00       	mov    ebx,0x2
c0003759:	83 c4 1c             	add    esp,0x1c
c000375c:	89 d8                	mov    eax,ebx
c000375e:	5b                   	pop    ebx
c000375f:	5e                   	pop    esi
c0003760:	5f                   	pop    edi
c0003761:	5d                   	pop    ebp
c0003762:	c3                   	ret    

c0003763 <load_obj_xdir>:
c0003763:	53                   	push   ebx
c0003764:	89 c3                	mov    ebx,eax
c0003766:	83 ec 08             	sub    esp,0x8
c0003769:	8b 02                	mov    eax,DWORD PTR [edx]
c000376b:	89 03                	mov    DWORD PTR [ebx],eax
c000376d:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003770:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003773:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003776:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003779:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000377c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003783:	30 c0                	xor    al,al
c0003785:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000378c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000378f:	89 d8                	mov    eax,ebx
c0003791:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003794:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003797:	e8 02 f8 ff ff       	call   c0002f9e <dir_sdi>
c000379c:	85 c0                	test   eax,eax
c000379e:	75 0b                	jne    c00037ab <load_obj_xdir+0x48>
c00037a0:	83 c4 08             	add    esp,0x8
c00037a3:	89 d8                	mov    eax,ebx
c00037a5:	5b                   	pop    ebx
c00037a6:	e9 7f fe ff ff       	jmp    c000362a <load_xdir>
c00037ab:	83 c4 08             	add    esp,0x8
c00037ae:	5b                   	pop    ebx
c00037af:	c3                   	ret    

c00037b0 <dir_read>:
c00037b0:	55                   	push   ebp
c00037b1:	bd 04 00 00 00       	mov    ebp,0x4
c00037b6:	57                   	push   edi
c00037b7:	56                   	push   esi
c00037b8:	be ff ff ff ff       	mov    esi,0xffffffff
c00037bd:	53                   	push   ebx
c00037be:	89 c3                	mov    ebx,eax
c00037c0:	83 ec 1c             	sub    esp,0x1c
c00037c3:	8b 38                	mov    edi,DWORD PTR [eax]
c00037c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037c9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037ce:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037d1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037d4:	89 c8                	mov    eax,ecx
c00037d6:	09 d0                	or     eax,edx
c00037d8:	0f 84 25 01 00 00    	je     c0003903 <dir_read+0x153>
c00037de:	89 f8                	mov    eax,edi
c00037e0:	e8 41 ea ff ff       	call   c0002226 <move_window>
c00037e5:	89 c5                	mov    ebp,eax
c00037e7:	85 c0                	test   eax,eax
c00037e9:	0f 85 23 01 00 00    	jne    c0003912 <dir_read+0x162>
c00037ef:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037f2:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037f4:	84 c9                	test   cl,cl
c00037f6:	0f 84 11 01 00 00    	je     c000390d <dir_read+0x15d>
c00037fc:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037ff:	75 48                	jne    c0003849 <dir_read+0x99>
c0003801:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003806:	74 10                	je     c0003818 <dir_read+0x68>
c0003808:	80 f9 83             	cmp    cl,0x83
c000380b:	0f 85 dd 00 00 00    	jne    c00038ee <dir_read+0x13e>
c0003811:	31 ed                	xor    ebp,ebp
c0003813:	e9 08 01 00 00       	jmp    c0003920 <dir_read+0x170>
c0003818:	80 f9 85             	cmp    cl,0x85
c000381b:	0f 85 cd 00 00 00    	jne    c00038ee <dir_read+0x13e>
c0003821:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003824:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003827:	89 d8                	mov    eax,ebx
c0003829:	e8 fc fd ff ff       	call   c000362a <load_xdir>
c000382e:	89 c5                	mov    ebp,eax
c0003830:	85 c0                	test   eax,eax
c0003832:	0f 85 da 00 00 00    	jne    c0003912 <dir_read+0x162>
c0003838:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c000383b:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000383e:	83 e0 3f             	and    eax,0x3f
c0003841:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003844:	e9 d7 00 00 00       	jmp    c0003920 <dir_read+0x170>
c0003849:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000384c:	83 e0 3f             	and    eax,0x3f
c000384f:	80 f9 e5             	cmp    cl,0xe5
c0003852:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003856:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003859:	0f 84 8a 00 00 00    	je     c00038e9 <dir_read+0x139>
c000385f:	80 f9 2e             	cmp    cl,0x2e
c0003862:	0f 84 81 00 00 00    	je     c00038e9 <dir_read+0x139>
c0003868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000386c:	83 e0 1f             	and    eax,0x1f
c000386f:	83 f8 08             	cmp    eax,0x8
c0003872:	0f 94 c0             	sete   al
c0003875:	0f b6 c0             	movzx  eax,al
c0003878:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000387c:	75 6b                	jne    c00038e9 <dir_read+0x139>
c000387e:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003883:	75 44                	jne    c00038c9 <dir_read+0x119>
c0003885:	f6 c1 40             	test   cl,0x40
c0003888:	74 12                	je     c000389c <dir_read+0xec>
c000388a:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000388d:	83 e1 bf             	and    ecx,0xffffffbf
c0003890:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003894:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003897:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000389a:	eb 06                	jmp    c00038a2 <dir_read+0xf2>
c000389c:	89 f0                	mov    eax,esi
c000389e:	38 c8                	cmp    al,cl
c00038a0:	75 47                	jne    c00038e9 <dir_read+0x139>
c00038a2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038a6:	be ff ff ff ff       	mov    esi,0xffffffff
c00038ab:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038ae:	75 3e                	jne    c00038ee <dir_read+0x13e>
c00038b0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038b3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038b7:	e8 95 e4 ff ff       	call   c0001d51 <pick_lfn>
c00038bc:	85 c0                	test   eax,eax
c00038be:	74 2e                	je     c00038ee <dir_read+0x13e>
c00038c0:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038c4:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038c7:	eb 25                	jmp    c00038ee <dir_read+0x13e>
c00038c9:	89 f0                	mov    eax,esi
c00038cb:	84 c0                	test   al,al
c00038cd:	75 11                	jne    c00038e0 <dir_read+0x130>
c00038cf:	89 d0                	mov    eax,edx
c00038d1:	e8 35 e6 ff ff       	call   c0001f0b <sum_sfn>
c00038d6:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038da:	0f 84 31 ff ff ff    	je     c0003811 <dir_read+0x61>
c00038e0:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038e7:	eb 37                	jmp    c0003920 <dir_read+0x170>
c00038e9:	be ff ff ff ff       	mov    esi,0xffffffff
c00038ee:	31 d2                	xor    edx,edx
c00038f0:	89 d8                	mov    eax,ebx
c00038f2:	e8 01 fc ff ff       	call   c00034f8 <dir_next>
c00038f7:	89 c5                	mov    ebp,eax
c00038f9:	85 c0                	test   eax,eax
c00038fb:	0f 84 cd fe ff ff    	je     c00037ce <dir_read+0x1e>
c0003901:	eb 0f                	jmp    c0003912 <dir_read+0x162>
c0003903:	85 ed                	test   ebp,ebp
c0003905:	0f 84 06 ff ff ff    	je     c0003811 <dir_read+0x61>
c000390b:	eb 05                	jmp    c0003912 <dir_read+0x162>
c000390d:	bd 04 00 00 00       	mov    ebp,0x4
c0003912:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003919:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003920:	83 c4 1c             	add    esp,0x1c
c0003923:	89 e8                	mov    eax,ebp
c0003925:	5b                   	pop    ebx
c0003926:	5e                   	pop    esi
c0003927:	5f                   	pop    edi
c0003928:	5d                   	pop    ebp
c0003929:	c3                   	ret    

c000392a <dir_alloc>:
c000392a:	55                   	push   ebp
c000392b:	89 d5                	mov    ebp,edx
c000392d:	57                   	push   edi
c000392e:	31 d2                	xor    edx,edx
c0003930:	56                   	push   esi
c0003931:	53                   	push   ebx
c0003932:	89 c3                	mov    ebx,eax
c0003934:	83 ec 0c             	sub    esp,0xc
c0003937:	8b 38                	mov    edi,DWORD PTR [eax]
c0003939:	e8 60 f6 ff ff       	call   c0002f9e <dir_sdi>
c000393e:	85 c0                	test   eax,eax
c0003940:	75 4e                	jne    c0003990 <dir_alloc+0x66>
c0003942:	31 f6                	xor    esi,esi
c0003944:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003947:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000394a:	89 f8                	mov    eax,edi
c000394c:	e8 d5 e8 ff ff       	call   c0002226 <move_window>
c0003951:	85 c0                	test   eax,eax
c0003953:	75 3b                	jne    c0003990 <dir_alloc+0x66>
c0003955:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003958:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000395b:	8a 12                	mov    dl,BYTE PTR [edx]
c000395d:	75 07                	jne    c0003966 <dir_alloc+0x3c>
c000395f:	f7 d2                	not    edx
c0003961:	c0 ea 07             	shr    dl,0x7
c0003964:	eb 0d                	jmp    c0003973 <dir_alloc+0x49>
c0003966:	80 fa e5             	cmp    dl,0xe5
c0003969:	0f 94 c1             	sete   cl
c000396c:	84 d2                	test   dl,dl
c000396e:	0f 94 c2             	sete   dl
c0003971:	09 ca                	or     edx,ecx
c0003973:	84 d2                	test   dl,dl
c0003975:	74 07                	je     c000397e <dir_alloc+0x54>
c0003977:	46                   	inc    esi
c0003978:	39 ee                	cmp    esi,ebp
c000397a:	75 04                	jne    c0003980 <dir_alloc+0x56>
c000397c:	eb 1c                	jmp    c000399a <dir_alloc+0x70>
c000397e:	31 f6                	xor    esi,esi
c0003980:	ba 01 00 00 00       	mov    edx,0x1
c0003985:	89 d8                	mov    eax,ebx
c0003987:	e8 6c fb ff ff       	call   c00034f8 <dir_next>
c000398c:	85 c0                	test   eax,eax
c000398e:	74 b4                	je     c0003944 <dir_alloc+0x1a>
c0003990:	83 f8 04             	cmp    eax,0x4
c0003993:	75 05                	jne    c000399a <dir_alloc+0x70>
c0003995:	b8 07 00 00 00       	mov    eax,0x7
c000399a:	83 c4 0c             	add    esp,0xc
c000399d:	5b                   	pop    ebx
c000399e:	5e                   	pop    esi
c000399f:	5f                   	pop    edi
c00039a0:	5d                   	pop    ebp
c00039a1:	c3                   	ret    

c00039a2 <store_xdir>:
c00039a2:	55                   	push   ebp
c00039a3:	57                   	push   edi
c00039a4:	89 c7                	mov    edi,eax
c00039a6:	56                   	push   esi
c00039a7:	53                   	push   ebx
c00039a8:	83 ec 0c             	sub    esp,0xc
c00039ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00039ad:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039b0:	89 e8                	mov    eax,ebp
c00039b2:	e8 66 e5 ff ff       	call   c0001f1d <xdir_sum>
c00039b7:	0f b7 d0             	movzx  edx,ax
c00039ba:	8d 45 02             	lea    eax,[ebp+0x2]
c00039bd:	e8 ff e0 ff ff       	call   c0001ac1 <st_word>
c00039c2:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039c5:	89 f8                	mov    eax,edi
c00039c7:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039cb:	e8 ce f5 ff ff       	call   c0002f9e <dir_sdi>
c00039d0:	89 c6                	mov    esi,eax
c00039d2:	85 f6                	test   esi,esi
c00039d4:	75 3d                	jne    c0003a13 <store_xdir+0x71>
c00039d6:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039d9:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039dc:	8b 07                	mov    eax,DWORD PTR [edi]
c00039de:	e8 43 e8 ff ff       	call   c0002226 <move_window>
c00039e3:	89 c6                	mov    esi,eax
c00039e5:	85 c0                	test   eax,eax
c00039e7:	75 2a                	jne    c0003a13 <store_xdir+0x71>
c00039e9:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039ec:	b9 20 00 00 00       	mov    ecx,0x20
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	e8 d6 e0 ff ff       	call   c0001ace <mem_cpy>
c00039f8:	8b 07                	mov    eax,DWORD PTR [edi]
c00039fa:	85 db                	test   ebx,ebx
c00039fc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003a00:	74 11                	je     c0003a13 <store_xdir+0x71>
c0003a02:	31 d2                	xor    edx,edx
c0003a04:	89 f8                	mov    eax,edi
c0003a06:	e8 ed fa ff ff       	call   c00034f8 <dir_next>
c0003a0b:	83 c5 20             	add    ebp,0x20
c0003a0e:	89 c6                	mov    esi,eax
c0003a10:	4b                   	dec    ebx
c0003a11:	eb bf                	jmp    c00039d2 <store_xdir+0x30>
c0003a13:	89 f0                	mov    eax,esi
c0003a15:	83 fe 02             	cmp    esi,0x2
c0003a18:	76 05                	jbe    c0003a1f <store_xdir+0x7d>
c0003a1a:	b8 02 00 00 00       	mov    eax,0x2
c0003a1f:	83 c4 0c             	add    esp,0xc
c0003a22:	5b                   	pop    ebx
c0003a23:	5e                   	pop    esi
c0003a24:	5f                   	pop    edi
c0003a25:	5d                   	pop    ebp
c0003a26:	c3                   	ret    

c0003a27 <dir_remove>:
c0003a27:	57                   	push   edi
c0003a28:	56                   	push   esi
c0003a29:	53                   	push   ebx
c0003a2a:	89 c3                	mov    ebx,eax
c0003a2c:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a2f:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a31:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a34:	83 fa ff             	cmp    edx,0xffffffff
c0003a37:	74 09                	je     c0003a42 <dir_remove+0x1b>
c0003a39:	e8 60 f5 ff ff       	call   c0002f9e <dir_sdi>
c0003a3e:	85 c0                	test   eax,eax
c0003a40:	75 41                	jne    c0003a83 <dir_remove+0x5c>
c0003a42:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a45:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a48:	89 f0                	mov    eax,esi
c0003a4a:	e8 d7 e7 ff ff       	call   c0002226 <move_window>
c0003a4f:	85 c0                	test   eax,eax
c0003a51:	75 26                	jne    c0003a79 <dir_remove+0x52>
c0003a53:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a56:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a59:	75 05                	jne    c0003a60 <dir_remove+0x39>
c0003a5b:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a5e:	eb 03                	jmp    c0003a63 <dir_remove+0x3c>
c0003a60:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a63:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a67:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a6a:	73 17                	jae    c0003a83 <dir_remove+0x5c>
c0003a6c:	31 d2                	xor    edx,edx
c0003a6e:	89 d8                	mov    eax,ebx
c0003a70:	e8 83 fa ff ff       	call   c00034f8 <dir_next>
c0003a75:	85 c0                	test   eax,eax
c0003a77:	74 c9                	je     c0003a42 <dir_remove+0x1b>
c0003a79:	83 f8 04             	cmp    eax,0x4
c0003a7c:	75 05                	jne    c0003a83 <dir_remove+0x5c>
c0003a7e:	b8 02 00 00 00       	mov    eax,0x2
c0003a83:	5b                   	pop    ebx
c0003a84:	5e                   	pop    esi
c0003a85:	5f                   	pop    edi
c0003a86:	c3                   	ret    

c0003a87 <create_name>:
c0003a87:	55                   	push   ebp
c0003a88:	89 d5                	mov    ebp,edx
c0003a8a:	57                   	push   edi
c0003a8b:	89 c7                	mov    edi,eax
c0003a8d:	56                   	push   esi
c0003a8e:	31 f6                	xor    esi,esi
c0003a90:	53                   	push   ebx
c0003a91:	83 ec 3c             	sub    esp,0x3c
c0003a94:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a96:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a9a:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a9c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003aa3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003aa7:	e8 7d e0 ff ff       	call   c0001b29 <tchar2uni>
c0003aac:	89 c3                	mov    ebx,eax
c0003aae:	83 f8 ff             	cmp    eax,0xffffffff
c0003ab1:	75 0a                	jne    c0003abd <create_name+0x36>
c0003ab3:	b8 06 00 00 00       	mov    eax,0x6
c0003ab8:	e9 83 02 00 00       	jmp    c0003d40 <create_name+0x2b9>
c0003abd:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ac2:	76 0c                	jbe    c0003ad0 <create_name+0x49>
c0003ac4:	c1 e8 10             	shr    eax,0x10
c0003ac7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003acb:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003acf:	46                   	inc    esi
c0003ad0:	66 83 fb 1f          	cmp    bx,0x1f
c0003ad4:	89 d8                	mov    eax,ebx
c0003ad6:	76 36                	jbe    c0003b0e <create_name+0x87>
c0003ad8:	66 83 fb 2f          	cmp    bx,0x2f
c0003adc:	74 30                	je     c0003b0e <create_name+0x87>
c0003ade:	66 83 fb 5c          	cmp    bx,0x5c
c0003ae2:	74 39                	je     c0003b1d <create_name+0x96>
c0003ae4:	66 83 fb 7f          	cmp    bx,0x7f
c0003ae8:	77 11                	ja     c0003afb <create_name+0x74>
c0003aea:	0f b7 d3             	movzx  edx,bx
c0003aed:	b8 72 05 02 c0       	mov    eax,0xc0020572
c0003af2:	e8 1a e0 ff ff       	call   c0001b11 <chk_chr>
c0003af7:	85 c0                	test   eax,eax
c0003af9:	75 b8                	jne    c0003ab3 <create_name+0x2c>
c0003afb:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003b01:	77 b0                	ja     c0003ab3 <create_name+0x2c>
c0003b03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b07:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b0b:	46                   	inc    esi
c0003b0c:	eb 95                	jmp    c0003aa3 <create_name+0x1c>
c0003b0e:	66 83 f8 1f          	cmp    ax,0x1f
c0003b12:	b3 04                	mov    bl,0x4
c0003b14:	76 19                	jbe    c0003b2f <create_name+0xa8>
c0003b16:	eb 05                	jmp    c0003b1d <create_name+0x96>
c0003b18:	40                   	inc    eax
c0003b19:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b1d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b21:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b23:	80 fa 2f             	cmp    dl,0x2f
c0003b26:	74 f0                	je     c0003b18 <create_name+0x91>
c0003b28:	80 fa 5c             	cmp    dl,0x5c
c0003b2b:	74 eb                	je     c0003b18 <create_name+0x91>
c0003b2d:	31 db                	xor    ebx,ebx
c0003b2f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b33:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b36:	85 f6                	test   esi,esi
c0003b38:	74 18                	je     c0003b52 <create_name+0xcb>
c0003b3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b3e:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b43:	66 83 f8 20          	cmp    ax,0x20
c0003b47:	74 06                	je     c0003b4f <create_name+0xc8>
c0003b49:	66 83 f8 2e          	cmp    ax,0x2e
c0003b4d:	75 03                	jne    c0003b52 <create_name+0xcb>
c0003b4f:	4e                   	dec    esi
c0003b50:	eb e4                	jmp    c0003b36 <create_name+0xaf>
c0003b52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b56:	31 ed                	xor    ebp,ebp
c0003b58:	85 f6                	test   esi,esi
c0003b5a:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b60:	0f 84 4d ff ff ff    	je     c0003ab3 <create_name+0x2c>
c0003b66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b6a:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b6d:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b71:	66 83 f8 20          	cmp    ax,0x20
c0003b75:	75 04                	jne    c0003b7b <create_name+0xf4>
c0003b77:	89 d5                	mov    ebp,edx
c0003b79:	eb eb                	jmp    c0003b66 <create_name+0xdf>
c0003b7b:	85 ed                	test   ebp,ebp
c0003b7d:	75 06                	jne    c0003b85 <create_name+0xfe>
c0003b7f:	66 83 f8 2e          	cmp    ax,0x2e
c0003b83:	75 08                	jne    c0003b8d <create_name+0x106>
c0003b85:	83 cb 03             	or     ebx,0x3
c0003b88:	eb 03                	jmp    c0003b8d <create_name+0x106>
c0003b8a:	4e                   	dec    esi
c0003b8b:	74 0c                	je     c0003b99 <create_name+0x112>
c0003b8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b91:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b97:	75 f1                	jne    c0003b8a <create_name+0x103>
c0003b99:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b9e:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ba1:	ba 20 00 00 00       	mov    edx,0x20
c0003ba6:	e8 38 df ff ff       	call   c0001ae3 <mem_set>
c0003bab:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0003bb3:	31 c9                	xor    ecx,ecx
c0003bb5:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0003bba:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bbd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bc5:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bc9:	66 85 ed             	test   bp,bp
c0003bcc:	0f 84 1f 01 00 00    	je     c0003cf1 <create_name+0x26a>
c0003bd2:	66 83 fd 20          	cmp    bp,0x20
c0003bd6:	74 0c                	je     c0003be4 <create_name+0x15d>
c0003bd8:	66 83 fd 2e          	cmp    bp,0x2e
c0003bdc:	75 0f                	jne    c0003bed <create_name+0x166>
c0003bde:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003be2:	74 09                	je     c0003bed <create_name+0x166>
c0003be4:	83 cb 03             	or     ebx,0x3
c0003be7:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
c0003beb:	eb cd                	jmp    c0003bba <create_name+0x133>
c0003bed:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0003bf1:	73 06                	jae    c0003bf9 <create_name+0x172>
c0003bf3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003bf7:	75 3a                	jne    c0003c33 <create_name+0x1ac>
c0003bf9:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0003bfe:	75 08                	jne    c0003c08 <create_name+0x181>
c0003c00:	83 cb 03             	or     ebx,0x3
c0003c03:	e9 e9 00 00 00       	jmp    c0003cf1 <create_name+0x26a>
c0003c08:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003c0c:	74 0d                	je     c0003c1b <create_name+0x194>
c0003c0e:	83 cb 03             	or     ebx,0x3
c0003c11:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003c15:	0f 87 d6 00 00 00    	ja     c0003cf1 <create_name+0x26a>
c0003c1b:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003c20:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0003c24:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0003c2c:	b9 08 00 00 00       	mov    ecx,0x8
c0003c31:	eb b4                	jmp    c0003be7 <create_name+0x160>
c0003c33:	66 83 fd 7f          	cmp    bp,0x7f
c0003c37:	76 68                	jbe    c0003ca1 <create_name+0x21a>
c0003c39:	88 da                	mov    dl,bl
c0003c3b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c3f:	83 ca 02             	or     edx,0x2
c0003c42:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c46:	50                   	push   eax
c0003c47:	50                   	push   eax
c0003c48:	68 b5 01 00 00       	push   0x1b5
c0003c4d:	55                   	push   ebp
c0003c4e:	e8 0f 46 00 00       	call   c0008262 <ff_uni2oem>
c0003c53:	83 c4 10             	add    esp,0x10
c0003c56:	89 c5                	mov    ebp,eax
c0003c58:	a8 80                	test   al,0x80
c0003c5a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c5e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c62:	74 0c                	je     c0003c70 <create_name+0x1e9>
c0003c64:	83 e5 7f             	and    ebp,0x7f
c0003c67:	0f b6 ad c0 04 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdfb40]
c0003c6e:	eb 2a                	jmp    c0003c9a <create_name+0x213>
c0003c70:	66 3d ff 00          	cmp    ax,0xff
c0003c74:	76 24                	jbe    c0003c9a <create_name+0x213>
c0003c76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0003c7a:	48                   	dec    eax
c0003c7b:	39 c8                	cmp    eax,ecx
c0003c7d:	77 0c                	ja     c0003c8b <create_name+0x204>
c0003c7f:	83 cb 03             	or     ebx,0x3
c0003c82:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0003c86:	e9 5c ff ff ff       	jmp    c0003be7 <create_name+0x160>
c0003c8b:	89 e8                	mov    eax,ebp
c0003c8d:	88 d3                	mov    bl,dl
c0003c8f:	66 c1 e8 08          	shr    ax,0x8
c0003c93:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c97:	41                   	inc    ecx
c0003c98:	eb 4b                	jmp    c0003ce5 <create_name+0x25e>
c0003c9a:	66 85 ed             	test   bp,bp
c0003c9d:	88 d3                	mov    bl,dl
c0003c9f:	74 19                	je     c0003cba <create_name+0x233>
c0003ca1:	0f b7 d5             	movzx  edx,bp
c0003ca4:	b8 7b 05 02 c0       	mov    eax,0xc002057b
c0003ca9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003cad:	e8 5f de ff ff       	call   c0001b11 <chk_chr>
c0003cb2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003cb6:	85 c0                	test   eax,eax
c0003cb8:	74 0a                	je     c0003cc4 <create_name+0x23d>
c0003cba:	83 cb 03             	or     ebx,0x3
c0003cbd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cc2:	eb 21                	jmp    c0003ce5 <create_name+0x25e>
c0003cc4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cc7:	66 83 f8 19          	cmp    ax,0x19
c0003ccb:	77 07                	ja     c0003cd4 <create_name+0x24d>
c0003ccd:	80 4c 24 0b 02       	or     BYTE PTR [esp+0xb],0x2
c0003cd2:	eb 11                	jmp    c0003ce5 <create_name+0x25e>
c0003cd4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003cd7:	66 83 f8 19          	cmp    ax,0x19
c0003cdb:	77 08                	ja     c0003ce5 <create_name+0x25e>
c0003cdd:	80 4c 24 0b 01       	or     BYTE PTR [esp+0xb],0x1
c0003ce2:	83 ed 20             	sub    ebp,0x20
c0003ce5:	89 e8                	mov    eax,ebp
c0003ce7:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ceb:	41                   	inc    ecx
c0003cec:	e9 f6 fe ff ff       	jmp    c0003be7 <create_name+0x160>
c0003cf1:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003cf5:	75 04                	jne    c0003cfb <create_name+0x274>
c0003cf7:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cfb:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0003d00:	75 05                	jne    c0003d07 <create_name+0x280>
c0003d02:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003d07:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003d0b:	83 e0 0c             	and    eax,0xc
c0003d0e:	3c 0c                	cmp    al,0xc
c0003d10:	74 0b                	je     c0003d1d <create_name+0x296>
c0003d12:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003d16:	83 e0 03             	and    eax,0x3
c0003d19:	3c 03                	cmp    al,0x3
c0003d1b:	75 05                	jne    c0003d22 <create_name+0x29b>
c0003d1d:	83 cb 02             	or     ebx,0x2
c0003d20:	eb 19                	jmp    c0003d3b <create_name+0x2b4>
c0003d22:	f6 c3 02             	test   bl,0x2
c0003d25:	75 14                	jne    c0003d3b <create_name+0x2b4>
c0003d27:	f6 44 24 0b 01       	test   BYTE PTR [esp+0xb],0x1
c0003d2c:	74 03                	je     c0003d31 <create_name+0x2aa>
c0003d2e:	83 cb 10             	or     ebx,0x10
c0003d31:	f6 44 24 0b 04       	test   BYTE PTR [esp+0xb],0x4
c0003d36:	74 03                	je     c0003d3b <create_name+0x2b4>
c0003d38:	83 cb 08             	or     ebx,0x8
c0003d3b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d3e:	31 c0                	xor    eax,eax
c0003d40:	83 c4 3c             	add    esp,0x3c
c0003d43:	5b                   	pop    ebx
c0003d44:	5e                   	pop    esi
c0003d45:	5f                   	pop    edi
c0003d46:	5d                   	pop    ebp
c0003d47:	c3                   	ret    

c0003d48 <xname_sum>:
c0003d48:	56                   	push   esi
c0003d49:	89 c6                	mov    esi,eax
c0003d4b:	53                   	push   ebx
c0003d4c:	31 db                	xor    ebx,ebx
c0003d4e:	51                   	push   ecx
c0003d4f:	83 c6 02             	add    esi,0x2
c0003d52:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d56:	66 85 c0             	test   ax,ax
c0003d59:	74 1f                	je     c0003d7a <xname_sum+0x32>
c0003d5b:	66 d1 cb             	ror    bx,1
c0003d5e:	83 ec 0c             	sub    esp,0xc
c0003d61:	50                   	push   eax
c0003d62:	e8 00 46 00 00       	call   c0008367 <ff_wtoupper>
c0003d67:	0f b6 d0             	movzx  edx,al
c0003d6a:	01 d3                	add    ebx,edx
c0003d6c:	83 c4 10             	add    esp,0x10
c0003d6f:	66 c1 e8 08          	shr    ax,0x8
c0003d73:	66 d1 cb             	ror    bx,1
c0003d76:	01 c3                	add    ebx,eax
c0003d78:	eb d5                	jmp    c0003d4f <xname_sum+0x7>
c0003d7a:	5a                   	pop    edx
c0003d7b:	89 d8                	mov    eax,ebx
c0003d7d:	5b                   	pop    ebx
c0003d7e:	5e                   	pop    esi
c0003d7f:	c3                   	ret    

c0003d80 <create_xdir>:
c0003d80:	55                   	push   ebp
c0003d81:	b9 40 00 00 00       	mov    ecx,0x40
c0003d86:	57                   	push   edi
c0003d87:	bd 01 00 00 00       	mov    ebp,0x1
c0003d8c:	56                   	push   esi
c0003d8d:	31 ff                	xor    edi,edi
c0003d8f:	53                   	push   ebx
c0003d90:	89 c3                	mov    ebx,eax
c0003d92:	83 ec 1c             	sub    esp,0x1c
c0003d95:	be 40 00 00 00       	mov    esi,0x40
c0003d9a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d9e:	31 d2                	xor    edx,edx
c0003da0:	e8 3e dd ff ff       	call   c0001ae3 <mem_set>
c0003da5:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003da8:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003dac:	31 c9                	xor    ecx,ecx
c0003dae:	8d 46 01             	lea    eax,[esi+0x1]
c0003db1:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003db5:	83 c6 02             	add    esi,0x2
c0003db8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003dbc:	66 85 ed             	test   bp,bp
c0003dbf:	74 12                	je     c0003dd3 <create_xdir+0x53>
c0003dc1:	0f b6 c1             	movzx  eax,cl
c0003dc4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dc8:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003dcc:	66 83 fd 01          	cmp    bp,0x1
c0003dd0:	80 d9 ff             	sbb    cl,0xff
c0003dd3:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003dd6:	83 c6 02             	add    esi,0x2
c0003dd9:	0f b7 d5             	movzx  edx,bp
c0003ddc:	e8 e0 dc ff ff       	call   c0001ac1 <st_word>
c0003de1:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003de7:	75 d3                	jne    c0003dbc <create_xdir+0x3c>
c0003de9:	8d 47 01             	lea    eax,[edi+0x1]
c0003dec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003df0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003df4:	0f b6 c1             	movzx  eax,cl
c0003df7:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003dfc:	74 07                	je     c0003e05 <create_xdir+0x85>
c0003dfe:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003e03:	eb a9                	jmp    c0003dae <create_xdir+0x2e>
c0003e05:	8d 47 02             	lea    eax,[edi+0x2]
c0003e08:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e0b:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e0e:	89 d0                	mov    eax,edx
c0003e10:	e8 33 ff ff ff       	call   c0003d48 <xname_sum>
c0003e15:	83 c4 1c             	add    esp,0x1c
c0003e18:	0f b7 d0             	movzx  edx,ax
c0003e1b:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e1e:	5b                   	pop    ebx
c0003e1f:	5e                   	pop    esi
c0003e20:	5f                   	pop    edi
c0003e21:	5d                   	pop    ebp
c0003e22:	e9 9a dc ff ff       	jmp    c0001ac1 <st_word>

c0003e27 <cmp_lfn>:
c0003e27:	55                   	push   ebp
c0003e28:	57                   	push   edi
c0003e29:	89 d7                	mov    edi,edx
c0003e2b:	56                   	push   esi
c0003e2c:	53                   	push   ebx
c0003e2d:	83 ec 1c             	sub    esp,0x1c
c0003e30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e34:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e37:	e8 13 dc ff ff       	call   c0001a4f <ld_word>
c0003e3c:	66 85 c0             	test   ax,ax
c0003e3f:	74 07                	je     c0003e48 <cmp_lfn+0x21>
c0003e41:	31 c0                	xor    eax,eax
c0003e43:	e9 9a 00 00 00       	jmp    c0003ee2 <cmp_lfn+0xbb>
c0003e48:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e4a:	bd 01 00 00 00       	mov    ebp,0x1
c0003e4f:	83 e3 3f             	and    ebx,0x3f
c0003e52:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e5a:	4b                   	dec    ebx
c0003e5b:	6b db 0d             	imul   ebx,ebx,0xd
c0003e5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e62:	0f b6 80 40 05 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfac0]
c0003e69:	01 f8                	add    eax,edi
c0003e6b:	e8 df db ff ff       	call   c0001a4f <ld_word>
c0003e70:	66 85 ed             	test   bp,bp
c0003e73:	89 c6                	mov    esi,eax
c0003e75:	74 3c                	je     c0003eb3 <cmp_lfn+0x8c>
c0003e77:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e7d:	77 c2                	ja     c0003e41 <cmp_lfn+0x1a>
c0003e7f:	83 ec 0c             	sub    esp,0xc
c0003e82:	0f b7 c0             	movzx  eax,ax
c0003e85:	50                   	push   eax
c0003e86:	e8 dc 44 00 00       	call   c0008367 <ff_wtoupper>
c0003e8b:	89 c5                	mov    ebp,eax
c0003e8d:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e90:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e98:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e9c:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e9f:	e8 c3 44 00 00       	call   c0008367 <ff_wtoupper>
c0003ea4:	83 c4 10             	add    esp,0x10
c0003ea7:	39 c5                	cmp    ebp,eax
c0003ea9:	75 96                	jne    c0003e41 <cmp_lfn+0x1a>
c0003eab:	89 f5                	mov    ebp,esi
c0003ead:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003eb1:	eb 04                	jmp    c0003eb7 <cmp_lfn+0x90>
c0003eb3:	66 46                	inc    si
c0003eb5:	75 8a                	jne    c0003e41 <cmp_lfn+0x1a>
c0003eb7:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003ebb:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ec0:	75 9c                	jne    c0003e5e <cmp_lfn+0x37>
c0003ec2:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ec5:	74 16                	je     c0003edd <cmp_lfn+0xb6>
c0003ec7:	66 85 ed             	test   bp,bp
c0003eca:	74 11                	je     c0003edd <cmp_lfn+0xb6>
c0003ecc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ed0:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ed5:	0f 94 c0             	sete   al
c0003ed8:	0f b6 c0             	movzx  eax,al
c0003edb:	eb 05                	jmp    c0003ee2 <cmp_lfn+0xbb>
c0003edd:	b8 01 00 00 00       	mov    eax,0x1
c0003ee2:	83 c4 1c             	add    esp,0x1c
c0003ee5:	5b                   	pop    ebx
c0003ee6:	5e                   	pop    esi
c0003ee7:	5f                   	pop    edi
c0003ee8:	5d                   	pop    ebp
c0003ee9:	c3                   	ret    

c0003eea <dir_find>:
c0003eea:	55                   	push   ebp
c0003eeb:	31 d2                	xor    edx,edx
c0003eed:	57                   	push   edi
c0003eee:	56                   	push   esi
c0003eef:	53                   	push   ebx
c0003ef0:	89 c3                	mov    ebx,eax
c0003ef2:	83 ec 1c             	sub    esp,0x1c
c0003ef5:	8b 30                	mov    esi,DWORD PTR [eax]
c0003ef7:	e8 a2 f0 ff ff       	call   c0002f9e <dir_sdi>
c0003efc:	89 04 24             	mov    DWORD PTR [esp],eax
c0003eff:	85 c0                	test   eax,eax
c0003f01:	0f 85 9f 01 00 00    	jne    c00040a6 <dir_find+0x1bc>
c0003f07:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f0a:	0f 85 8e 00 00 00    	jne    c0003f9e <dir_find+0xb4>
c0003f10:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f13:	e8 30 fe ff ff       	call   c0003d48 <xname_sum>
c0003f18:	89 c5                	mov    ebp,eax
c0003f1a:	31 d2                	xor    edx,edx
c0003f1c:	89 d8                	mov    eax,ebx
c0003f1e:	e8 8d f8 ff ff       	call   c00037b0 <dir_read>
c0003f23:	85 c0                	test   eax,eax
c0003f25:	0f 85 5f 01 00 00    	jne    c000408a <dir_find+0x1a0>
c0003f2b:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f2e:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f31:	e8 19 db ff ff       	call   c0001a4f <ld_word>
c0003f36:	66 39 e8             	cmp    ax,bp
c0003f39:	75 df                	jne    c0003f1a <dir_find+0x30>
c0003f3b:	0f b6 49 23          	movzx  ecx,BYTE PTR [ecx+0x23]
c0003f3f:	31 ff                	xor    edi,edi
c0003f41:	ba 40 00 00 00       	mov    edx,0x40
c0003f46:	39 f9                	cmp    ecx,edi
c0003f48:	0f 84 4a 01 00 00    	je     c0004098 <dir_find+0x1ae>
c0003f4e:	f6 c2 1f             	test   dl,0x1f
c0003f51:	75 03                	jne    c0003f56 <dir_find+0x6c>
c0003f53:	83 c2 02             	add    edx,0x2
c0003f56:	89 d0                	mov    eax,edx
c0003f58:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003f5c:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f63:	e8 e7 da ff ff       	call   c0001a4f <ld_word>
c0003f68:	83 ec 0c             	sub    esp,0xc
c0003f6b:	0f b7 c0             	movzx  eax,ax
c0003f6e:	50                   	push   eax
c0003f6f:	e8 f3 43 00 00       	call   c0008367 <ff_wtoupper>
c0003f74:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f78:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f7b:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0003f7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f82:	e8 e0 43 00 00       	call   c0008367 <ff_wtoupper>
c0003f87:	83 c4 10             	add    esp,0x10
c0003f8a:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f8e:	75 8a                	jne    c0003f1a <dir_find+0x30>
c0003f90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f94:	47                   	inc    edi
c0003f95:	83 c2 02             	add    edx,0x2
c0003f98:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003f9c:	eb a8                	jmp    c0003f46 <dir_find+0x5c>
c0003f9e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fa5:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003faa:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003faf:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003fb2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fb5:	89 f0                	mov    eax,esi
c0003fb7:	e8 6a e2 ff ff       	call   c0002226 <move_window>
c0003fbc:	85 c0                	test   eax,eax
c0003fbe:	0f 85 c6 00 00 00    	jne    c000408a <dir_find+0x1a0>
c0003fc4:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fc7:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fca:	84 c9                	test   cl,cl
c0003fcc:	0f 84 bd 00 00 00    	je     c000408f <dir_find+0x1a5>
c0003fd2:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fd5:	88 d0                	mov    al,dl
c0003fd7:	83 e0 3f             	and    eax,0x3f
c0003fda:	80 f9 e5             	cmp    cl,0xe5
c0003fdd:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fe0:	0f 84 87 00 00 00    	je     c000406d <dir_find+0x183>
c0003fe6:	80 e2 08             	and    dl,0x8
c0003fe9:	74 06                	je     c0003ff1 <dir_find+0x107>
c0003feb:	3c 0f                	cmp    al,0xf
c0003fed:	75 7e                	jne    c000406d <dir_find+0x183>
c0003fef:	eb 04                	jmp    c0003ff5 <dir_find+0x10b>
c0003ff1:	3c 0f                	cmp    al,0xf
c0003ff3:	75 4c                	jne    c0004041 <dir_find+0x157>
c0003ff5:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003ff9:	75 7e                	jne    c0004079 <dir_find+0x18f>
c0003ffb:	f6 c1 40             	test   cl,0x40
c0003ffe:	74 12                	je     c0004012 <dir_find+0x128>
c0004000:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004003:	83 e1 bf             	and    ecx,0xffffffbf
c0004006:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000400a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000400d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004010:	eb 06                	jmp    c0004018 <dir_find+0x12e>
c0004012:	89 f8                	mov    eax,edi
c0004014:	38 c8                	cmp    al,cl
c0004016:	75 5c                	jne    c0004074 <dir_find+0x18a>
c0004018:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000401c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004021:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004024:	75 53                	jne    c0004079 <dir_find+0x18f>
c0004026:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004029:	89 ea                	mov    edx,ebp
c000402b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000402f:	e8 f3 fd ff ff       	call   c0003e27 <cmp_lfn>
c0004034:	85 c0                	test   eax,eax
c0004036:	74 41                	je     c0004079 <dir_find+0x18f>
c0004038:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000403c:	8d 79 ff             	lea    edi,[ecx-0x1]
c000403f:	eb 38                	jmp    c0004079 <dir_find+0x18f>
c0004041:	89 f8                	mov    eax,edi
c0004043:	84 c0                	test   al,al
c0004045:	75 0d                	jne    c0004054 <dir_find+0x16a>
c0004047:	89 e8                	mov    eax,ebp
c0004049:	e8 bd de ff ff       	call   c0001f0b <sum_sfn>
c000404e:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004052:	74 52                	je     c00040a6 <dir_find+0x1bc>
c0004054:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004058:	75 13                	jne    c000406d <dir_find+0x183>
c000405a:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000405d:	b9 0b 00 00 00       	mov    ecx,0xb
c0004062:	89 e8                	mov    eax,ebp
c0004064:	e8 85 da ff ff       	call   c0001aee <mem_cmp>
c0004069:	85 c0                	test   eax,eax
c000406b:	74 39                	je     c00040a6 <dir_find+0x1bc>
c000406d:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004074:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004079:	31 d2                	xor    edx,edx
c000407b:	89 d8                	mov    eax,ebx
c000407d:	e8 76 f4 ff ff       	call   c00034f8 <dir_next>
c0004082:	85 c0                	test   eax,eax
c0004084:	0f 84 25 ff ff ff    	je     c0003faf <dir_find+0xc5>
c000408a:	89 04 24             	mov    DWORD PTR [esp],eax
c000408d:	eb 17                	jmp    c00040a6 <dir_find+0x1bc>
c000408f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004096:	eb 0e                	jmp    c00040a6 <dir_find+0x1bc>
c0004098:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000409b:	66 83 3c 48 00       	cmp    WORD PTR [eax+ecx*2],0x0
c00040a0:	0f 85 74 fe ff ff    	jne    c0003f1a <dir_find+0x30>
c00040a6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00040a9:	83 c4 1c             	add    esp,0x1c
c00040ac:	5b                   	pop    ebx
c00040ad:	5e                   	pop    esi
c00040ae:	5f                   	pop    edi
c00040af:	5d                   	pop    ebp
c00040b0:	c3                   	ret    

c00040b1 <dir_register>:
c00040b1:	55                   	push   ebp
c00040b2:	57                   	push   edi
c00040b3:	56                   	push   esi
c00040b4:	be 06 00 00 00       	mov    esi,0x6
c00040b9:	53                   	push   ebx
c00040ba:	83 ec 6c             	sub    esp,0x6c
c00040bd:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040c1:	0f 85 63 02 00 00    	jne    c000432a <dir_register+0x279>
c00040c7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040c9:	31 ff                	xor    edi,edi
c00040cb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040ce:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040d3:	74 03                	je     c00040d8 <dir_register+0x27>
c00040d5:	47                   	inc    edi
c00040d6:	eb f6                	jmp    c00040ce <dir_register+0x1d>
c00040d8:	89 c3                	mov    ebx,eax
c00040da:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040de:	0f 85 e1 00 00 00    	jne    c00041c5 <dir_register+0x114>
c00040e4:	83 c7 0e             	add    edi,0xe
c00040e7:	b9 0f 00 00 00       	mov    ecx,0xf
c00040ec:	89 f8                	mov    eax,edi
c00040ee:	31 d2                	xor    edx,edx
c00040f0:	f7 f1                	div    ecx
c00040f2:	89 c7                	mov    edi,eax
c00040f4:	8d 50 02             	lea    edx,[eax+0x2]
c00040f7:	89 d8                	mov    eax,ebx
c00040f9:	e8 2c f8 ff ff       	call   c000392a <dir_alloc>
c00040fe:	89 c6                	mov    esi,eax
c0004100:	85 c0                	test   eax,eax
c0004102:	0f 85 22 02 00 00    	jne    c000432a <dir_register+0x279>
c0004108:	81 c7 01 00 00 08    	add    edi,0x8000001
c000410e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004111:	c1 e7 05             	shl    edi,0x5
c0004114:	29 f8                	sub    eax,edi
c0004116:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004119:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000411c:	a8 04                	test   al,0x4
c000411e:	0f 84 91 00 00 00    	je     c00041b5 <dir_register+0x104>
c0004124:	83 e0 fb             	and    eax,0xfffffffb
c0004127:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000412a:	89 d8                	mov    eax,ebx
c000412c:	e8 3d ec ff ff       	call   c0002d6e <fill_first_frag>
c0004131:	85 c0                	test   eax,eax
c0004133:	0f 85 ef 01 00 00    	jne    c0004328 <dir_register+0x277>
c0004139:	83 c9 ff             	or     ecx,0xffffffff
c000413c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000413f:	89 d8                	mov    eax,ebx
c0004141:	e8 f3 eb ff ff       	call   c0002d39 <fill_last_frag>
c0004146:	85 c0                	test   eax,eax
c0004148:	0f 85 da 01 00 00    	jne    c0004328 <dir_register+0x277>
c000414e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004152:	74 61                	je     c00041b5 <dir_register+0x104>
c0004154:	89 da                	mov    edx,ebx
c0004156:	8d 44 24 14          	lea    eax,[esp+0x14]
c000415a:	e8 04 f6 ff ff       	call   c0003763 <load_obj_xdir>
c000415f:	85 c0                	test   eax,eax
c0004161:	0f 85 c1 01 00 00    	jne    c0004328 <dir_register+0x277>
c0004167:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000416b:	c1 e2 09             	shl    edx,0x9
c000416e:	31 c9                	xor    ecx,ecx
c0004170:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004173:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004176:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004179:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000417c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000417f:	83 c0 38             	add    eax,0x38
c0004182:	e8 41 d9 ff ff       	call   c0001ac8 <st_qword>
c0004187:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000418a:	83 c0 28             	add    eax,0x28
c000418d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004190:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004193:	e8 30 d9 ff ff       	call   c0001ac8 <st_qword>
c0004198:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000419b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000419e:	83 c8 01             	or     eax,0x1
c00041a1:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00041a4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041a8:	e8 f5 f7 ff ff       	call   c00039a2 <store_xdir>
c00041ad:	85 c0                	test   eax,eax
c00041af:	0f 85 73 01 00 00    	jne    c0004328 <dir_register+0x277>
c00041b5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041bb:	e8 c0 fb ff ff       	call   c0003d80 <create_xdir>
c00041c0:	e9 65 01 00 00       	jmp    c000432a <dir_register+0x279>
c00041c5:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041c8:	b9 0c 00 00 00       	mov    ecx,0xc
c00041cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041d1:	89 c2                	mov    edx,eax
c00041d3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041d7:	e8 f2 d8 ff ff       	call   c0001ace <mem_cpy>
c00041dc:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041e1:	74 58                	je     c000423b <dir_register+0x18a>
c00041e3:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041e7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041ef:	83 ec 0c             	sub    esp,0xc
c00041f2:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041fd:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004201:	e8 49 dc ff ff       	call   c0001e4f <gen_numname>
c0004206:	89 d8                	mov    eax,ebx
c0004208:	e8 dd fc ff ff       	call   c0003eea <dir_find>
c000420d:	83 c4 10             	add    esp,0x10
c0004210:	89 c6                	mov    esi,eax
c0004212:	85 c0                	test   eax,eax
c0004214:	75 15                	jne    c000422b <dir_register+0x17a>
c0004216:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000421a:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000421f:	75 ce                	jne    c00041ef <dir_register+0x13e>
c0004221:	be 07 00 00 00       	mov    esi,0x7
c0004226:	e9 ff 00 00 00       	jmp    c000432a <dir_register+0x279>
c000422b:	83 f8 04             	cmp    eax,0x4
c000422e:	0f 85 f6 00 00 00    	jne    c000432a <dir_register+0x279>
c0004234:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004238:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000423b:	b9 01 00 00 00       	mov    ecx,0x1
c0004240:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004245:	74 0f                	je     c0004256 <dir_register+0x1a5>
c0004247:	b9 0d 00 00 00       	mov    ecx,0xd
c000424c:	8d 47 0c             	lea    eax,[edi+0xc]
c000424f:	31 d2                	xor    edx,edx
c0004251:	f7 f1                	div    ecx
c0004253:	8d 48 01             	lea    ecx,[eax+0x1]
c0004256:	89 ca                	mov    edx,ecx
c0004258:	89 d8                	mov    eax,ebx
c000425a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000425e:	e8 c7 f6 ff ff       	call   c000392a <dir_alloc>
c0004263:	89 c6                	mov    esi,eax
c0004265:	85 c0                	test   eax,eax
c0004267:	0f 85 bd 00 00 00    	jne    c000432a <dir_register+0x279>
c000426d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004271:	89 cf                	mov    edi,ecx
c0004273:	4f                   	dec    edi
c0004274:	74 6d                	je     c00042e3 <dir_register+0x232>
c0004276:	89 f8                	mov    eax,edi
c0004278:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000427b:	c1 e0 05             	shl    eax,0x5
c000427e:	29 c2                	sub    edx,eax
c0004280:	89 d8                	mov    eax,ebx
c0004282:	e8 17 ed ff ff       	call   c0002f9e <dir_sdi>
c0004287:	89 c6                	mov    esi,eax
c0004289:	85 c0                	test   eax,eax
c000428b:	0f 85 99 00 00 00    	jne    c000432a <dir_register+0x279>
c0004291:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004295:	e8 71 dc ff ff       	call   c0001f0b <sum_sfn>
c000429a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000429e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042a1:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042a4:	89 e8                	mov    eax,ebp
c00042a6:	e8 7b df ff ff       	call   c0002226 <move_window>
c00042ab:	89 c6                	mov    esi,eax
c00042ad:	85 c0                	test   eax,eax
c00042af:	75 79                	jne    c000432a <dir_register+0x279>
c00042b1:	83 ec 0c             	sub    esp,0xc
c00042b4:	89 f8                	mov    eax,edi
c00042b6:	0f b6 c8             	movzx  ecx,al
c00042b9:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00042be:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042c1:	52                   	push   edx
c00042c2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042c5:	e8 01 db ff ff       	call   c0001dcb <put_lfn>
c00042ca:	31 d2                	xor    edx,edx
c00042cc:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042d0:	89 d8                	mov    eax,ebx
c00042d2:	e8 21 f2 ff ff       	call   c00034f8 <dir_next>
c00042d7:	83 c4 10             	add    esp,0x10
c00042da:	89 c6                	mov    esi,eax
c00042dc:	85 c0                	test   eax,eax
c00042de:	75 4a                	jne    c000432a <dir_register+0x279>
c00042e0:	4f                   	dec    edi
c00042e1:	75 bb                	jne    c000429e <dir_register+0x1ed>
c00042e3:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042e6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042e9:	89 e8                	mov    eax,ebp
c00042eb:	e8 36 df ff ff       	call   c0002226 <move_window>
c00042f0:	89 c6                	mov    esi,eax
c00042f2:	85 c0                	test   eax,eax
c00042f4:	75 34                	jne    c000432a <dir_register+0x279>
c00042f6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042f9:	b9 20 00 00 00       	mov    ecx,0x20
c00042fe:	31 d2                	xor    edx,edx
c0004300:	e8 de d7 ff ff       	call   c0001ae3 <mem_set>
c0004305:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004308:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000430c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004311:	e8 b8 d7 ff ff       	call   c0001ace <mem_cpy>
c0004316:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004319:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000431c:	83 e0 18             	and    eax,0x18
c000431f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004322:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004326:	eb 02                	jmp    c000432a <dir_register+0x279>
c0004328:	89 c6                	mov    esi,eax
c000432a:	83 c4 6c             	add    esp,0x6c
c000432d:	89 f0                	mov    eax,esi
c000432f:	5b                   	pop    ebx
c0004330:	5e                   	pop    esi
c0004331:	5f                   	pop    edi
c0004332:	5d                   	pop    ebp
c0004333:	c3                   	ret    

c0004334 <sync_fs>:
c0004334:	56                   	push   esi
c0004335:	53                   	push   ebx
c0004336:	53                   	push   ebx
c0004337:	89 c3                	mov    ebx,eax
c0004339:	e8 54 de ff ff       	call   c0002192 <sync_window>
c000433e:	85 c0                	test   eax,eax
c0004340:	0f 85 b1 00 00 00    	jne    c00043f7 <sync_fs+0xc3>
c0004346:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004349:	0f 85 8e 00 00 00    	jne    c00043dd <sync_fs+0xa9>
c000434f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004353:	0f 85 84 00 00 00    	jne    c00043dd <sync_fs+0xa9>
c0004359:	8d 73 54             	lea    esi,[ebx+0x54]
c000435c:	b9 00 02 00 00       	mov    ecx,0x200
c0004361:	31 d2                	xor    edx,edx
c0004363:	89 f0                	mov    eax,esi
c0004365:	e8 79 d7 ff ff       	call   c0001ae3 <mem_set>
c000436a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004370:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004375:	e8 47 d7 ff ff       	call   c0001ac1 <st_word>
c000437a:	ba 52 52 61 41       	mov    edx,0x41615252
c000437f:	89 f0                	mov    eax,esi
c0004381:	e8 3f d7 ff ff       	call   c0001ac5 <st_dword>
c0004386:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c000438c:	ba 72 72 41 61       	mov    edx,0x61417272
c0004391:	e8 2f d7 ff ff       	call   c0001ac5 <st_dword>
c0004396:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004399:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000439f:	e8 21 d7 ff ff       	call   c0001ac5 <st_dword>
c00043a4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043a7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043ad:	e8 13 d7 ff ff       	call   c0001ac5 <st_dword>
c00043b2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043b5:	83 c0 01             	add    eax,0x1
c00043b8:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043bb:	83 d2 00             	adc    edx,0x0
c00043be:	83 ec 0c             	sub    esp,0xc
c00043c1:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043c4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043c7:	6a 01                	push   0x1
c00043c9:	52                   	push   edx
c00043ca:	50                   	push   eax
c00043cb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043cf:	56                   	push   esi
c00043d0:	50                   	push   eax
c00043d1:	e8 44 d6 ff ff       	call   c0001a1a <disk_write>
c00043d6:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043da:	83 c4 20             	add    esp,0x20
c00043dd:	51                   	push   ecx
c00043de:	6a 00                	push   0x0
c00043e0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043e4:	6a 00                	push   0x0
c00043e6:	50                   	push   eax
c00043e7:	e8 44 d6 ff ff       	call   c0001a30 <disk_ioctl>
c00043ec:	83 c4 10             	add    esp,0x10
c00043ef:	85 c0                	test   eax,eax
c00043f1:	0f 95 c0             	setne  al
c00043f4:	0f b6 c0             	movzx  eax,al
c00043f7:	5a                   	pop    edx
c00043f8:	5b                   	pop    ebx
c00043f9:	5e                   	pop    esi
c00043fa:	c3                   	ret    

c00043fb <create_partition>:
c00043fb:	55                   	push   ebp
c00043fc:	57                   	push   edi
c00043fd:	56                   	push   esi
c00043fe:	53                   	push   ebx
c00043ff:	83 ec 60             	sub    esp,0x60
c0004402:	0f b6 c0             	movzx  eax,al
c0004405:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004409:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000440d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004411:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0004415:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004419:	50                   	push   eax
c000441a:	6a 01                	push   0x1
c000441c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004420:	e8 0b d6 ff ff       	call   c0001a30 <disk_ioctl>
c0004425:	83 c4 10             	add    esp,0x10
c0004428:	85 c0                	test   eax,eax
c000442a:	74 0a                	je     c0004436 <create_partition+0x3b>
c000442c:	b8 01 00 00 00       	mov    eax,0x1
c0004431:	e9 73 05 00 00       	jmp    c00049a9 <create_partition+0x5ae>
c0004436:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000443a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000443e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004442:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004446:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000444b:	0f 86 ed 03 00 00    	jbe    c000483e <create_partition+0x443>
c0004451:	83 c0 df             	add    eax,0xffffffdf
c0004454:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000445c:	83 d2 ff             	adc    edx,0xffffffff
c000445f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004463:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004467:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000446b:	83 c0 bd             	add    eax,0xffffffbd
c000446e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004472:	83 d2 ff             	adc    edx,0xffffffff
c0004475:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004479:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000447d:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004484:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000448c:	be 22 00 00 00       	mov    esi,0x22
c0004491:	31 ff                	xor    edi,edi
c0004493:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c000449b:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00044a3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044ab:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044af:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044b5:	75 0e                	jne    c00044c5 <create_partition+0xca>
c00044b7:	b9 00 02 00 00       	mov    ecx,0x200
c00044bc:	31 d2                	xor    edx,edx
c00044be:	89 d8                	mov    eax,ebx
c00044c0:	e8 1e d6 ff ff       	call   c0001ae3 <mem_set>
c00044c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044d1:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044d4:	0f 84 23 01 00 00    	je     c00045fd <create_partition+0x202>
c00044da:	89 f0                	mov    eax,esi
c00044dc:	89 fa                	mov    edx,edi
c00044de:	05 ff 07 00 00       	add    eax,0x7ff
c00044e3:	83 d2 00             	adc    edx,0x0
c00044e6:	89 c1                	mov    ecx,eax
c00044e8:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044ee:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044f2:	89 ce                	mov    esi,ecx
c00044f4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044f8:	89 d7                	mov    edi,edx
c00044fa:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044fe:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004502:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004505:	89 04 24             	mov    DWORD PTR [esp],eax
c0004508:	b8 64 00 00 00       	mov    eax,0x64
c000450d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004510:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004514:	b8 00 00 00 00       	mov    eax,0x0
c0004519:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000451d:	72 41                	jb     c0004560 <create_partition+0x165>
c000451f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004523:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004527:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000452c:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004530:	01 c1                	add    ecx,eax
c0004532:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004536:	f7 24 24             	mul    DWORD PTR [esp]
c0004539:	6a 00                	push   0x0
c000453b:	01 ca                	add    edx,ecx
c000453d:	6a 64                	push   0x64
c000453f:	52                   	push   edx
c0004540:	50                   	push   eax
c0004541:	e8 c6 af 01 00       	call   c001f50c <__udivdi3>
c0004546:	83 c4 10             	add    esp,0x10
c0004549:	05 ff 07 00 00       	add    eax,0x7ff
c000454e:	83 d2 00             	adc    edx,0x0
c0004551:	89 c1                	mov    ecx,eax
c0004553:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004559:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000455d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004560:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004563:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004567:	01 f0                	add    eax,esi
c0004569:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000456d:	11 fa                	adc    edx,edi
c000456f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004573:	19 d1                	sbb    ecx,edx
c0004575:	73 2e                	jae    c00045a5 <create_partition+0x1aa>
c0004577:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000457b:	89 f8                	mov    eax,edi
c000457d:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004581:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004588:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004590:	73 6b                	jae    c00045fd <create_partition+0x202>
c0004592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004596:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000459a:	29 f0                	sub    eax,esi
c000459c:	19 fa                	sbb    edx,edi
c000459e:	89 04 24             	mov    DWORD PTR [esp],eax
c00045a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00045a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045a9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045ac:	74 4f                	je     c00045fd <create_partition+0x202>
c00045ae:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045b1:	b9 10 00 00 00       	mov    ecx,0x10
c00045b6:	ba 50 05 02 c0       	mov    edx,0xc0020550
c00045bb:	e8 0e d5 ff ff       	call   c0001ace <mem_cpy>
c00045c0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045c4:	b9 10 00 00 00       	mov    ecx,0x10
c00045c9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045cd:	e8 49 db ff ff       	call   c000211b <make_rand>
c00045d2:	89 f2                	mov    edx,esi
c00045d4:	89 f9                	mov    ecx,edi
c00045d6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045da:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045de:	e8 e5 d4 ff ff       	call   c0001ac8 <st_qword>
c00045e3:	03 34 24             	add    esi,DWORD PTR [esp]
c00045e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045ea:	89 f2                	mov    edx,esi
c00045ec:	89 f9                	mov    ecx,edi
c00045ee:	83 c2 ff             	add    edx,0xffffffff
c00045f1:	83 d1 ff             	adc    ecx,0xffffffff
c00045f4:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045f8:	e8 cb d4 ff ff       	call   c0001ac8 <st_qword>
c00045fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004601:	83 e8 80             	sub    eax,0xffffff80
c0004604:	89 c5                	mov    ebp,eax
c0004606:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000460a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004610:	75 6b                	jne    c000467d <create_partition+0x282>
c0004612:	45                   	inc    ebp
c0004613:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004617:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000461c:	e8 56 da ff ff       	call   c0002077 <crc32>
c0004621:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000462b:	75 e5                	jne    c0004612 <create_partition+0x217>
c000462d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004631:	83 ec 0c             	sub    esp,0xc
c0004634:	c1 ed 09             	shr    ebp,0x9
c0004637:	31 d2                	xor    edx,edx
c0004639:	6a 01                	push   0x1
c000463b:	52                   	push   edx
c000463c:	8d 45 02             	lea    eax,[ebp+0x2]
c000463f:	50                   	push   eax
c0004640:	53                   	push   ebx
c0004641:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004645:	e8 d0 d3 ff ff       	call   c0001a1a <disk_write>
c000464a:	83 c4 20             	add    esp,0x20
c000464d:	85 c0                	test   eax,eax
c000464f:	0f 85 d7 fd ff ff    	jne    c000442c <create_partition+0x31>
c0004655:	83 ec 0c             	sub    esp,0xc
c0004658:	89 e8                	mov    eax,ebp
c000465a:	31 d2                	xor    edx,edx
c000465c:	6a 01                	push   0x1
c000465e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004662:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004666:	52                   	push   edx
c0004667:	50                   	push   eax
c0004668:	53                   	push   ebx
c0004669:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000466d:	e8 a8 d3 ff ff       	call   c0001a1a <disk_write>
c0004672:	83 c4 20             	add    esp,0x20
c0004675:	85 c0                	test   eax,eax
c0004677:	0f 85 af fd ff ff    	jne    c000442c <create_partition+0x31>
c000467d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004681:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004685:	3d 00 40 00 00       	cmp    eax,0x4000
c000468a:	74 0d                	je     c0004699 <create_partition+0x29e>
c000468c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004690:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004694:	e9 12 fe ff ff       	jmp    c00044ab <create_partition+0xb0>
c0004699:	31 d2                	xor    edx,edx
c000469b:	b9 00 02 00 00       	mov    ecx,0x200
c00046a0:	89 d8                	mov    eax,ebx
c00046a2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00046a5:	e8 39 d4 ff ff       	call   c0001ae3 <mem_set>
c00046aa:	b9 10 00 00 00       	mov    ecx,0x10
c00046af:	ba 40 04 02 c0       	mov    edx,0xc0020440
c00046b4:	89 d8                	mov    eax,ebx
c00046b6:	e8 13 d4 ff ff       	call   c0001ace <mem_cpy>
c00046bb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046bf:	f7 d2                	not    edx
c00046c1:	8d 43 58             	lea    eax,[ebx+0x58]
c00046c4:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046c7:	e8 f9 d3 ff ff       	call   c0001ac5 <st_dword>
c00046cc:	8d 43 18             	lea    eax,[ebx+0x18]
c00046cf:	31 c9                	xor    ecx,ecx
c00046d1:	ba 01 00 00 00       	mov    edx,0x1
c00046d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d9:	e8 ea d3 ff ff       	call   c0001ac8 <st_qword>
c00046de:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046e2:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046e6:	83 c2 ff             	add    edx,0xffffffff
c00046e9:	89 e8                	mov    eax,ebp
c00046eb:	83 d1 ff             	adc    ecx,0xffffffff
c00046ee:	e8 d5 d3 ff ff       	call   c0001ac8 <st_qword>
c00046f3:	31 c9                	xor    ecx,ecx
c00046f5:	8d 43 28             	lea    eax,[ebx+0x28]
c00046f8:	ba 22 00 00 00       	mov    edx,0x22
c00046fd:	e8 c6 d3 ff ff       	call   c0001ac8 <st_qword>
c0004702:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004706:	83 c2 de             	add    edx,0xffffffde
c0004709:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000470d:	83 d1 ff             	adc    ecx,0xffffffff
c0004710:	8d 43 30             	lea    eax,[ebx+0x30]
c0004713:	e8 b0 d3 ff ff       	call   c0001ac8 <st_qword>
c0004718:	8d 43 54             	lea    eax,[ebx+0x54]
c000471b:	ba 80 00 00 00       	mov    edx,0x80
c0004720:	31 f6                	xor    esi,esi
c0004722:	e8 9e d3 ff ff       	call   c0001ac5 <st_dword>
c0004727:	8d 43 50             	lea    eax,[ebx+0x50]
c000472a:	ba 80 00 00 00       	mov    edx,0x80
c000472f:	e8 91 d3 ff ff       	call   c0001ac5 <st_dword>
c0004734:	ba 02 00 00 00       	mov    edx,0x2
c0004739:	89 f8                	mov    eax,edi
c000473b:	e8 85 d3 ff ff       	call   c0001ac5 <st_dword>
c0004740:	8d 53 38             	lea    edx,[ebx+0x38]
c0004743:	b9 10 00 00 00       	mov    ecx,0x10
c0004748:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000474c:	e8 ca d9 ff ff       	call   c000211b <make_rand>
c0004751:	83 c8 ff             	or     eax,0xffffffff
c0004754:	46                   	inc    esi
c0004755:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000475a:	e8 18 d9 ff ff       	call   c0002077 <crc32>
c000475f:	83 fe 5c             	cmp    esi,0x5c
c0004762:	75 f0                	jne    c0004754 <create_partition+0x359>
c0004764:	f7 d0                	not    eax
c0004766:	8d 73 10             	lea    esi,[ebx+0x10]
c0004769:	89 c2                	mov    edx,eax
c000476b:	89 f0                	mov    eax,esi
c000476d:	e8 53 d3 ff ff       	call   c0001ac5 <st_dword>
c0004772:	83 ec 0c             	sub    esp,0xc
c0004775:	6a 01                	push   0x1
c0004777:	6a 00                	push   0x0
c0004779:	6a 01                	push   0x1
c000477b:	53                   	push   ebx
c000477c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004780:	e8 95 d2 ff ff       	call   c0001a1a <disk_write>
c0004785:	83 c4 20             	add    esp,0x20
c0004788:	85 c0                	test   eax,eax
c000478a:	0f 85 9c fc ff ff    	jne    c000442c <create_partition+0x31>
c0004790:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004794:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004798:	83 c2 ff             	add    edx,0xffffffff
c000479b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000479e:	83 d1 ff             	adc    ecx,0xffffffff
c00047a1:	e8 22 d3 ff ff       	call   c0001ac8 <st_qword>
c00047a6:	ba 01 00 00 00       	mov    edx,0x1
c00047ab:	31 c9                	xor    ecx,ecx
c00047ad:	89 e8                	mov    eax,ebp
c00047af:	e8 14 d3 ff ff       	call   c0001ac8 <st_qword>
c00047b4:	89 f8                	mov    eax,edi
c00047b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047ba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047be:	e8 05 d3 ff ff       	call   c0001ac8 <st_qword>
c00047c3:	89 f0                	mov    eax,esi
c00047c5:	31 d2                	xor    edx,edx
c00047c7:	31 ff                	xor    edi,edi
c00047c9:	e8 f7 d2 ff ff       	call   c0001ac5 <st_dword>
c00047ce:	83 c8 ff             	or     eax,0xffffffff
c00047d1:	47                   	inc    edi
c00047d2:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047d7:	e8 9b d8 ff ff       	call   c0002077 <crc32>
c00047dc:	83 ff 5c             	cmp    edi,0x5c
c00047df:	75 f0                	jne    c00047d1 <create_partition+0x3d6>
c00047e1:	f7 d0                	not    eax
c00047e3:	89 c2                	mov    edx,eax
c00047e5:	89 f0                	mov    eax,esi
c00047e7:	e8 d9 d2 ff ff       	call   c0001ac5 <st_dword>
c00047ec:	83 ec 0c             	sub    esp,0xc
c00047ef:	6a 01                	push   0x1
c00047f1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047f5:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047f9:	83 c0 ff             	add    eax,0xffffffff
c00047fc:	83 d2 ff             	adc    edx,0xffffffff
c00047ff:	52                   	push   edx
c0004800:	50                   	push   eax
c0004801:	53                   	push   ebx
c0004802:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004806:	e8 0f d2 ff ff       	call   c0001a1a <disk_write>
c000480b:	83 c4 20             	add    esp,0x20
c000480e:	85 c0                	test   eax,eax
c0004810:	0f 85 16 fc ff ff    	jne    c000442c <create_partition+0x31>
c0004816:	31 d2                	xor    edx,edx
c0004818:	89 d8                	mov    eax,ebx
c000481a:	b9 00 02 00 00       	mov    ecx,0x200
c000481f:	e8 bf d2 ff ff       	call   c0001ae3 <mem_set>
c0004824:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000482a:	b9 10 00 00 00       	mov    ecx,0x10
c000482f:	ba 50 04 02 c0       	mov    edx,0xc0020450
c0004834:	e8 95 d2 ff ff       	call   c0001ace <mem_cpy>
c0004839:	e9 3d 01 00 00       	jmp    c000497b <create_partition+0x580>
c000483e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004842:	b9 05 00 00 00       	mov    ecx,0x5
c0004847:	89 04 24             	mov    DWORD PTR [esp],eax
c000484a:	c6 44 24 10 08       	mov    BYTE PTR [esp+0x10],0x8
c000484f:	0f b6 74 24 10       	movzx  esi,BYTE PTR [esp+0x10]
c0004854:	31 d2                	xor    edx,edx
c0004856:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004859:	f7 f6                	div    esi
c000485b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004860:	76 0c                	jbe    c000486e <create_partition+0x473>
c0004862:	d0 64 24 10          	shl    BYTE PTR [esp+0x10],1
c0004866:	49                   	dec    ecx
c0004867:	75 e6                	jne    c000484f <create_partition+0x454>
c0004869:	c6 44 24 10 ff       	mov    BYTE PTR [esp+0x10],0xff
c000486e:	b9 00 02 00 00       	mov    ecx,0x200
c0004873:	31 d2                	xor    edx,edx
c0004875:	89 d8                	mov    eax,ebx
c0004877:	bd 3f 00 00 00       	mov    ebp,0x3f
c000487c:	e8 62 d2 ff ff       	call   c0001ae3 <mem_set>
c0004881:	b9 64 00 00 00       	mov    ecx,0x64
c0004886:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004889:	31 d2                	xor    edx,edx
c000488b:	f7 f1                	div    ecx
c000488d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004891:	8d 8b c6 01 00 00    	lea    ecx,[ebx+0x1c6]
c0004897:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000489f:	83 7c 24 18 03       	cmp    DWORD PTR [esp+0x18],0x3
c00048a4:	0f 96 c2             	setbe  dl
c00048a7:	85 ed                	test   ebp,ebp
c00048a9:	0f 95 c0             	setne  al
c00048ac:	84 c2                	test   dl,al
c00048ae:	0f 84 c7 00 00 00    	je     c000497b <create_partition+0x580>
c00048b4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00048b7:	0f 83 be 00 00 00    	jae    c000497b <create_partition+0x580>
c00048bd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00048c1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00048c5:	8b 34 f8             	mov    esi,DWORD PTR [eax+edi*8]
c00048c8:	83 fe 64             	cmp    esi,0x64
c00048cb:	77 0c                	ja     c00048d9 <create_partition+0x4de>
c00048cd:	74 07                	je     c00048d6 <create_partition+0x4db>
c00048cf:	0f af 74 24 28       	imul   esi,DWORD PTR [esp+0x28]
c00048d4:	eb 03                	jmp    c00048d9 <create_partition+0x4de>
c00048d6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00048d9:	89 e8                	mov    eax,ebp
c00048db:	01 f0                	add    eax,esi
c00048dd:	72 05                	jb     c00048e4 <create_partition+0x4e9>
c00048df:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048e2:	76 07                	jbe    c00048eb <create_partition+0x4f0>
c00048e4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00048e7:	29 ee                	sub    esi,ebp
c00048e9:	eb 08                	jmp    c00048f3 <create_partition+0x4f8>
c00048eb:	85 f6                	test   esi,esi
c00048ed:	0f 84 88 00 00 00    	je     c000497b <create_partition+0x580>
c00048f3:	89 c8                	mov    eax,ecx
c00048f5:	89 ea                	mov    edx,ebp
c00048f7:	e8 c9 d1 ff ff       	call   c0001ac5 <st_dword>
c00048fc:	89 f2                	mov    edx,esi
c00048fe:	bf 3f 00 00 00       	mov    edi,0x3f
c0004903:	8d 41 04             	lea    eax,[ecx+0x4]
c0004906:	e8 ba d1 ff ff       	call   c0001ac5 <st_dword>
c000490b:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000490f:	31 d2                	xor    edx,edx
c0004911:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0004915:	88 41 fc             	mov    BYTE PTR [ecx-0x4],al
c0004918:	83 c1 10             	add    ecx,0x10
c000491b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0004920:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004924:	89 e8                	mov    eax,ebp
c0004926:	f7 f7                	div    edi
c0004928:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000492c:	31 d2                	xor    edx,edx
c000492e:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0004932:	88 51 e9             	mov    BYTE PTR [ecx-0x17],dl
c0004935:	89 c2                	mov    edx,eax
c0004937:	c1 ea 02             	shr    edx,0x2
c000493a:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000493e:	47                   	inc    edi
c000493f:	01 f5                	add    ebp,esi
c0004941:	83 e2 c0             	and    edx,0xffffffc0
c0004944:	88 41 eb             	mov    BYTE PTR [ecx-0x15],al
c0004947:	09 fa                	or     edx,edi
c0004949:	8d 45 ff             	lea    eax,[ebp-0x1]
c000494c:	88 51 ea             	mov    BYTE PTR [ecx-0x16],dl
c000494f:	bf 3f 00 00 00       	mov    edi,0x3f
c0004954:	31 d2                	xor    edx,edx
c0004956:	f7 f7                	div    edi
c0004958:	89 d6                	mov    esi,edx
c000495a:	31 d2                	xor    edx,edx
c000495c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0004960:	89 c7                	mov    edi,eax
c0004962:	46                   	inc    esi
c0004963:	c1 ef 02             	shr    edi,0x2
c0004966:	88 51 ed             	mov    BYTE PTR [ecx-0x13],dl
c0004969:	83 e7 c0             	and    edi,0xffffffc0
c000496c:	88 41 ef             	mov    BYTE PTR [ecx-0x11],al
c000496f:	09 fe                	or     esi,edi
c0004971:	89 f2                	mov    edx,esi
c0004973:	88 51 ee             	mov    BYTE PTR [ecx-0x12],dl
c0004976:	e9 24 ff ff ff       	jmp    c000489f <create_partition+0x4a4>
c000497b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004981:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004986:	e8 36 d1 ff ff       	call   c0001ac1 <st_word>
c000498b:	83 ec 0c             	sub    esp,0xc
c000498e:	6a 01                	push   0x1
c0004990:	6a 00                	push   0x0
c0004992:	6a 00                	push   0x0
c0004994:	53                   	push   ebx
c0004995:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004999:	e8 7c d0 ff ff       	call   c0001a1a <disk_write>
c000499e:	83 c4 20             	add    esp,0x20
c00049a1:	85 c0                	test   eax,eax
c00049a3:	0f 95 c0             	setne  al
c00049a6:	0f b6 c0             	movzx  eax,al
c00049a9:	83 c4 5c             	add    esp,0x5c
c00049ac:	5b                   	pop    ebx
c00049ad:	5e                   	pop    esi
c00049ae:	5f                   	pop    edi
c00049af:	5d                   	pop    ebp
c00049b0:	c3                   	ret    

c00049b1 <get_fileinfo>:
c00049b1:	55                   	push   ebp
c00049b2:	57                   	push   edi
c00049b3:	56                   	push   esi
c00049b4:	53                   	push   ebx
c00049b5:	83 ec 1c             	sub    esp,0x1c
c00049b8:	8b 30                	mov    esi,DWORD PTR [eax]
c00049ba:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049be:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049c1:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049c5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049c8:	0f 84 dc 01 00 00    	je     c0004baa <get_fileinfo+0x1f9>
c00049ce:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049d1:	75 0f                	jne    c00049e2 <get_fileinfo+0x31>
c00049d3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049d6:	83 c4 1c             	add    esp,0x1c
c00049d9:	5b                   	pop    ebx
c00049da:	5e                   	pop    esi
c00049db:	5f                   	pop    edi
c00049dc:	5d                   	pop    ebp
c00049dd:	e9 70 d5 ff ff       	jmp    c0001f52 <get_xfileinfo>
c00049e2:	89 d3                	mov    ebx,edx
c00049e4:	89 c6                	mov    esi,eax
c00049e6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049ea:	74 6a                	je     c0004a56 <get_fileinfo+0xa5>
c00049ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049f4:	31 ed                	xor    ebp,ebp
c00049f6:	31 ff                	xor    edi,edi
c00049f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004a00:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004a03:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004a07:	66 85 d2             	test   dx,dx
c0004a0a:	74 3e                	je     c0004a4a <get_fileinfo+0x99>
c0004a0c:	66 85 ed             	test   bp,bp
c0004a0f:	75 0c                	jne    c0004a1d <get_fileinfo+0x6c>
c0004a11:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a17:	66 3d ff 07          	cmp    ax,0x7ff
c0004a1b:	76 22                	jbe    c0004a3f <get_fileinfo+0x8e>
c0004a1d:	89 e8                	mov    eax,ebp
c0004a1f:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a24:	c1 e0 10             	shl    eax,0x10
c0004a27:	29 f9                	sub    ecx,edi
c0004a29:	09 d0                	or     eax,edx
c0004a2b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a2f:	e8 bb d1 ff ff       	call   c0001bef <put_utf>
c0004a34:	84 c0                	test   al,al
c0004a36:	74 10                	je     c0004a48 <get_fileinfo+0x97>
c0004a38:	0f b6 c0             	movzx  eax,al
c0004a3b:	01 c7                	add    edi,eax
c0004a3d:	31 d2                	xor    edx,edx
c0004a3f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a44:	89 d5                	mov    ebp,edx
c0004a46:	eb b0                	jmp    c00049f8 <get_fileinfo+0x47>
c0004a48:	31 ff                	xor    edi,edi
c0004a4a:	66 85 ed             	test   bp,bp
c0004a4d:	74 02                	je     c0004a51 <get_fileinfo+0xa0>
c0004a4f:	31 ff                	xor    edi,edi
c0004a51:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a56:	31 ff                	xor    edi,edi
c0004a58:	31 c9                	xor    ecx,ecx
c0004a5a:	83 f9 0a             	cmp    ecx,0xa
c0004a5d:	0f 87 ad 00 00 00    	ja     c0004b10 <get_fileinfo+0x15f>
c0004a63:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a66:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a69:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a6d:	66 83 fa 20          	cmp    dx,0x20
c0004a71:	0f 84 92 00 00 00    	je     c0004b09 <get_fileinfo+0x158>
c0004a77:	66 83 fa 05          	cmp    dx,0x5
c0004a7b:	75 05                	jne    c0004a82 <get_fileinfo+0xd1>
c0004a7d:	ba e5 00 00 00       	mov    edx,0xe5
c0004a82:	83 fd 09             	cmp    ebp,0x9
c0004a85:	75 0b                	jne    c0004a92 <get_fileinfo+0xe1>
c0004a87:	83 ff 0b             	cmp    edi,0xb
c0004a8a:	77 06                	ja     c0004a92 <get_fileinfo+0xe1>
c0004a8c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a91:	47                   	inc    edi
c0004a92:	0f b7 c2             	movzx  eax,dx
c0004a95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a99:	e8 85 d0 ff ff       	call   c0001b23 <dbc_1st>
c0004a9e:	85 c0                	test   eax,eax
c0004aa0:	74 2f                	je     c0004ad1 <get_fileinfo+0x120>
c0004aa2:	83 fd 08             	cmp    ebp,0x8
c0004aa5:	74 2a                	je     c0004ad1 <get_fileinfo+0x120>
c0004aa7:	83 fd 0b             	cmp    ebp,0xb
c0004aaa:	74 25                	je     c0004ad1 <get_fileinfo+0x120>
c0004aac:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004aaf:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ab3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ab7:	e8 6a d0 ff ff       	call   c0001b26 <dbc_2nd>
c0004abc:	85 c0                	test   eax,eax
c0004abe:	74 11                	je     c0004ad1 <get_fileinfo+0x120>
c0004ac0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ac4:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004ac7:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004acc:	c1 e2 08             	shl    edx,0x8
c0004acf:	09 c2                	or     edx,eax
c0004ad1:	50                   	push   eax
c0004ad2:	50                   	push   eax
c0004ad3:	68 b5 01 00 00       	push   0x1b5
c0004ad8:	0f b7 d2             	movzx  edx,dx
c0004adb:	52                   	push   edx
c0004adc:	e8 17 38 00 00       	call   c00082f8 <ff_oem2uni>
c0004ae1:	83 c4 10             	add    esp,0x10
c0004ae4:	66 85 c0             	test   ax,ax
c0004ae7:	75 04                	jne    c0004aed <get_fileinfo+0x13c>
c0004ae9:	31 ff                	xor    edi,edi
c0004aeb:	eb 23                	jmp    c0004b10 <get_fileinfo+0x15f>
c0004aed:	b9 0c 00 00 00       	mov    ecx,0xc
c0004af2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004af6:	29 f9                	sub    ecx,edi
c0004af8:	0f b7 c0             	movzx  eax,ax
c0004afb:	e8 ef d0 ff ff       	call   c0001bef <put_utf>
c0004b00:	84 c0                	test   al,al
c0004b02:	74 e5                	je     c0004ae9 <get_fileinfo+0x138>
c0004b04:	0f b6 c0             	movzx  eax,al
c0004b07:	01 c7                	add    edi,eax
c0004b09:	89 e9                	mov    ecx,ebp
c0004b0b:	e9 4a ff ff ff       	jmp    c0004a5a <get_fileinfo+0xa9>
c0004b10:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b15:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b19:	75 54                	jne    c0004b6f <get_fileinfo+0x1be>
c0004b1b:	85 ff                	test   edi,edi
c0004b1d:	75 0b                	jne    c0004b2a <get_fileinfo+0x179>
c0004b1f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b23:	ba 01 00 00 00       	mov    edx,0x1
c0004b28:	eb 33                	jmp    c0004b5d <get_fileinfo+0x1ac>
c0004b2a:	b1 08                	mov    cl,0x8
c0004b2c:	31 d2                	xor    edx,edx
c0004b2e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b34:	84 c0                	test   al,al
c0004b36:	74 25                	je     c0004b5d <get_fileinfo+0x1ac>
c0004b38:	66 83 f8 2e          	cmp    ax,0x2e
c0004b3c:	74 16                	je     c0004b54 <get_fileinfo+0x1a3>
c0004b3e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b41:	66 83 ff 19          	cmp    di,0x19
c0004b45:	77 0f                	ja     c0004b56 <get_fileinfo+0x1a5>
c0004b47:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b4a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b4d:	74 07                	je     c0004b56 <get_fileinfo+0x1a5>
c0004b4f:	83 c0 20             	add    eax,0x20
c0004b52:	eb 02                	jmp    c0004b56 <get_fileinfo+0x1a5>
c0004b54:	b1 10                	mov    cl,0x10
c0004b56:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b5a:	42                   	inc    edx
c0004b5b:	eb d1                	jmp    c0004b2e <get_fileinfo+0x17d>
c0004b5d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b62:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b65:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b69:	75 04                	jne    c0004b6f <get_fileinfo+0x1be>
c0004b6b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b6f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b72:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b75:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b78:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b7b:	83 c0 1c             	add    eax,0x1c
c0004b7e:	e8 d9 ce ff ff       	call   c0001a5c <ld_dword>
c0004b83:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b8a:	89 03                	mov    DWORD PTR [ebx],eax
c0004b8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8f:	83 c0 16             	add    eax,0x16
c0004b92:	e8 b8 ce ff ff       	call   c0001a4f <ld_word>
c0004b97:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b9b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b9e:	83 c0 18             	add    eax,0x18
c0004ba1:	e8 a9 ce ff ff       	call   c0001a4f <ld_word>
c0004ba6:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004baa:	83 c4 1c             	add    esp,0x1c
c0004bad:	5b                   	pop    ebx
c0004bae:	5e                   	pop    esi
c0004baf:	5f                   	pop    edi
c0004bb0:	5d                   	pop    ebp
c0004bb1:	c3                   	ret    

c0004bb2 <ld_clust.isra.0>:
c0004bb2:	56                   	push   esi
c0004bb3:	89 c6                	mov    esi,eax
c0004bb5:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bb8:	53                   	push   ebx
c0004bb9:	89 d3                	mov    ebx,edx
c0004bbb:	e8 8f ce ff ff       	call   c0001a4f <ld_word>
c0004bc0:	0f b7 c8             	movzx  ecx,ax
c0004bc3:	89 f0                	mov    eax,esi
c0004bc5:	3c 03                	cmp    al,0x3
c0004bc7:	75 0d                	jne    c0004bd6 <ld_clust.isra.0+0x24>
c0004bc9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bcc:	e8 7e ce ff ff       	call   c0001a4f <ld_word>
c0004bd1:	c1 e0 10             	shl    eax,0x10
c0004bd4:	09 c1                	or     ecx,eax
c0004bd6:	5b                   	pop    ebx
c0004bd7:	89 c8                	mov    eax,ecx
c0004bd9:	5e                   	pop    esi
c0004bda:	c3                   	ret    

c0004bdb <st_clust.isra.1>:
c0004bdb:	56                   	push   esi
c0004bdc:	89 c6                	mov    esi,eax
c0004bde:	53                   	push   ebx
c0004bdf:	89 d3                	mov    ebx,edx
c0004be1:	0f b7 d1             	movzx  edx,cx
c0004be4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004be7:	e8 d5 ce ff ff       	call   c0001ac1 <st_word>
c0004bec:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bef:	75 0f                	jne    c0004c00 <st_clust.isra.1+0x25>
c0004bf1:	c1 e9 10             	shr    ecx,0x10
c0004bf4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bf7:	89 ca                	mov    edx,ecx
c0004bf9:	5b                   	pop    ebx
c0004bfa:	5e                   	pop    esi
c0004bfb:	e9 c1 ce ff ff       	jmp    c0001ac1 <st_word>
c0004c00:	5b                   	pop    ebx
c0004c01:	5e                   	pop    esi
c0004c02:	c3                   	ret    

c0004c03 <init_alloc_info.isra.2>:
c0004c03:	56                   	push   esi
c0004c04:	89 c6                	mov    esi,eax
c0004c06:	53                   	push   ebx
c0004c07:	89 d3                	mov    ebx,edx
c0004c09:	51                   	push   ecx
c0004c0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c0c:	83 c0 34             	add    eax,0x34
c0004c0f:	e8 48 ce ff ff       	call   c0001a5c <ld_dword>
c0004c14:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c19:	83 c0 38             	add    eax,0x38
c0004c1c:	e8 53 ce ff ff       	call   c0001a74 <ld_qword>
c0004c21:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c24:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c27:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c29:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c2c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c33:	83 e0 02             	and    eax,0x2
c0004c36:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c39:	5b                   	pop    ebx
c0004c3a:	5b                   	pop    ebx
c0004c3b:	5e                   	pop    esi
c0004c3c:	c3                   	ret    

c0004c3d <follow_path>:
c0004c3d:	56                   	push   esi
c0004c3e:	53                   	push   ebx
c0004c3f:	89 c3                	mov    ebx,eax
c0004c41:	83 ec 14             	sub    esp,0x14
c0004c44:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c46:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c4e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c50:	80 fa 2f             	cmp    dl,0x2f
c0004c53:	75 07                	jne    c0004c5c <follow_path+0x1f>
c0004c55:	40                   	inc    eax
c0004c56:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c5a:	eb ee                	jmp    c0004c4a <follow_path+0xd>
c0004c5c:	80 fa 5c             	cmp    dl,0x5c
c0004c5f:	74 f4                	je     c0004c55 <follow_path+0x18>
c0004c61:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c68:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c6f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c72:	77 52                	ja     c0004cc6 <follow_path+0x89>
c0004c74:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c78:	31 d2                	xor    edx,edx
c0004c7a:	89 d8                	mov    eax,ebx
c0004c7c:	e8 1d e3 ff ff       	call   c0002f9e <dir_sdi>
c0004c81:	eb 7c                	jmp    c0004cff <follow_path+0xc2>
c0004c83:	89 d8                	mov    eax,ebx
c0004c85:	e8 60 f2 ff ff       	call   c0003eea <dir_find>
c0004c8a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c8d:	85 c0                	test   eax,eax
c0004c8f:	75 46                	jne    c0004cd7 <follow_path+0x9a>
c0004c91:	80 e2 04             	and    dl,0x4
c0004c94:	75 69                	jne    c0004cff <follow_path+0xc2>
c0004c96:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c9a:	74 5e                	je     c0004cfa <follow_path+0xbd>
c0004c9c:	8a 06                	mov    al,BYTE PTR [esi]
c0004c9e:	3c 04                	cmp    al,0x4
c0004ca0:	75 41                	jne    c0004ce3 <follow_path+0xa6>
c0004ca2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ca5:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ca9:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004cac:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004caf:	30 c0                	xor    al,al
c0004cb1:	09 d0                	or     eax,edx
c0004cb3:	89 da                	mov    edx,ebx
c0004cb5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004cb8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004cbb:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cbe:	8d 46 10             	lea    eax,[esi+0x10]
c0004cc1:	e8 3d ff ff ff       	call   c0004c03 <init_alloc_info.isra.2>
c0004cc6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cca:	89 d8                	mov    eax,ebx
c0004ccc:	e8 b6 ed ff ff       	call   c0003a87 <create_name>
c0004cd1:	85 c0                	test   eax,eax
c0004cd3:	74 ae                	je     c0004c83 <follow_path+0x46>
c0004cd5:	eb 28                	jmp    c0004cff <follow_path+0xc2>
c0004cd7:	83 f8 04             	cmp    eax,0x4
c0004cda:	75 23                	jne    c0004cff <follow_path+0xc2>
c0004cdc:	80 e2 04             	and    dl,0x4
c0004cdf:	74 19                	je     c0004cfa <follow_path+0xbd>
c0004ce1:	eb 1c                	jmp    c0004cff <follow_path+0xc2>
c0004ce3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ce6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cec:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cf0:	e8 bd fe ff ff       	call   c0004bb2 <ld_clust.isra.0>
c0004cf5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cf8:	eb cc                	jmp    c0004cc6 <follow_path+0x89>
c0004cfa:	b8 05 00 00 00       	mov    eax,0x5
c0004cff:	83 c4 14             	add    esp,0x14
c0004d02:	5b                   	pop    ebx
c0004d03:	5e                   	pop    esi
c0004d04:	c3                   	ret    

c0004d05 <f_mount>:
c0004d05:	53                   	push   ebx
c0004d06:	83 ec 18             	sub    esp,0x18
c0004d09:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d0d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d15:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d19:	e8 13 d3 ff ff       	call   c0002031 <get_ldnumber>
c0004d1e:	89 c2                	mov    edx,eax
c0004d20:	b8 0b 00 00 00       	mov    eax,0xb
c0004d25:	85 d2                	test   edx,edx
c0004d27:	78 39                	js     c0004d62 <f_mount+0x5d>
c0004d29:	8b 04 95 40 47 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb8c0]
c0004d30:	85 c0                	test   eax,eax
c0004d32:	74 03                	je     c0004d37 <f_mount+0x32>
c0004d34:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d3b:	85 c0                	test   eax,eax
c0004d3d:	74 03                	je     c0004d42 <f_mount+0x3d>
c0004d3f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d46:	89 04 95 40 47 02 c0 	mov    DWORD PTR [edx*4-0x3ffdb8c0],eax
c0004d4d:	31 c0                	xor    eax,eax
c0004d4f:	84 db                	test   bl,bl
c0004d51:	74 0f                	je     c0004d62 <f_mount+0x5d>
c0004d53:	31 c9                	xor    ecx,ecx
c0004d55:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d59:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d5d:	e8 6f d7 ff ff       	call   c00024d1 <mount_volume>
c0004d62:	83 c4 18             	add    esp,0x18
c0004d65:	5b                   	pop    ebx
c0004d66:	c3                   	ret    

c0004d67 <f_open>:
c0004d67:	55                   	push   ebp
c0004d68:	bd 09 00 00 00       	mov    ebp,0x9
c0004d6d:	57                   	push   edi
c0004d6e:	56                   	push   esi
c0004d6f:	53                   	push   ebx
c0004d70:	83 ec 7c             	sub    esp,0x7c
c0004d73:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d7a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d81:	85 db                	test   ebx,ebx
c0004d83:	0f 84 10 04 00 00    	je     c0005199 <f_open+0x432>
c0004d89:	89 fe                	mov    esi,edi
c0004d8b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d8f:	83 e6 3f             	and    esi,0x3f
c0004d92:	89 f0                	mov    eax,esi
c0004d94:	0f b6 c8             	movzx  ecx,al
c0004d97:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d9e:	e8 2e d7 ff ff       	call   c00024d1 <mount_volume>
c0004da3:	89 c5                	mov    ebp,eax
c0004da5:	85 c0                	test   eax,eax
c0004da7:	0f 85 e6 03 00 00    	jne    c0005193 <f_open+0x42c>
c0004dad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004db1:	83 ec 0c             	sub    esp,0xc
c0004db4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004db8:	bd 11 00 00 00       	mov    ebp,0x11
c0004dbd:	68 60 04 00 00       	push   0x460
c0004dc2:	e8 6e 34 00 00       	call   c0008235 <ff_memalloc>
c0004dc7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dcb:	83 c4 10             	add    esp,0x10
c0004dce:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004dd3:	0f 84 c0 03 00 00    	je     c0005199 <f_open+0x432>
c0004dd9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004ddd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004de1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004de7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004dea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004ded:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004df4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004df8:	e8 40 fe ff ff       	call   c0004c3d <follow_path>
c0004dfd:	89 c5                	mov    ebp,eax
c0004dff:	85 c0                	test   eax,eax
c0004e01:	75 0c                	jne    c0004e0f <f_open+0xa8>
c0004e03:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004e08:	79 05                	jns    c0004e0f <f_open+0xa8>
c0004e0a:	bd 06 00 00 00       	mov    ebp,0x6
c0004e0f:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e15:	0f 84 84 01 00 00    	je     c0004f9f <f_open+0x238>
c0004e1b:	85 ed                	test   ebp,ebp
c0004e1d:	74 20                	je     c0004e3f <f_open+0xd8>
c0004e1f:	83 fd 04             	cmp    ebp,0x4
c0004e22:	0f 85 58 03 00 00    	jne    c0005180 <f_open+0x419>
c0004e28:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e2c:	83 ce 08             	or     esi,0x8
c0004e2f:	e8 7d f2 ff ff       	call   c00040b1 <dir_register>
c0004e34:	89 c5                	mov    ebp,eax
c0004e36:	85 c0                	test   eax,eax
c0004e38:	74 2f                	je     c0004e69 <f_open+0x102>
c0004e3a:	e9 41 03 00 00       	jmp    c0005180 <f_open+0x419>
c0004e3f:	bd 07 00 00 00       	mov    ebp,0x7
c0004e44:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e49:	0f 85 31 03 00 00    	jne    c0005180 <f_open+0x419>
c0004e4f:	bd 08 00 00 00       	mov    ebp,0x8
c0004e54:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e5a:	0f 85 20 03 00 00    	jne    c0005180 <f_open+0x419>
c0004e60:	83 e7 08             	and    edi,0x8
c0004e63:	0f 84 65 01 00 00    	je     c0004fce <f_open+0x267>
c0004e69:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e6d:	8a 02                	mov    al,BYTE PTR [edx]
c0004e6f:	3c 04                	cmp    al,0x4
c0004e71:	0f 85 97 00 00 00    	jne    c0004f0e <f_open+0x1a7>
c0004e77:	8d 42 10             	lea    eax,[edx+0x10]
c0004e7a:	89 13                	mov    DWORD PTR [ebx],edx
c0004e7c:	89 da                	mov    edx,ebx
c0004e7e:	e8 80 fd ff ff       	call   c0004c03 <init_alloc_info.isra.2>
c0004e83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e87:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e8a:	31 d2                	xor    edx,edx
c0004e8c:	83 c0 02             	add    eax,0x2
c0004e8f:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e94:	e8 4a cc ff ff       	call   c0001ae3 <mem_set>
c0004e99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e9d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ea0:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004ea5:	83 c0 26             	add    eax,0x26
c0004ea8:	31 d2                	xor    edx,edx
c0004eaa:	e8 34 cc ff ff       	call   c0001ae3 <mem_set>
c0004eaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004eb6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004eba:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ebf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ec2:	83 c0 08             	add    eax,0x8
c0004ec5:	e8 fb cb ff ff       	call   c0001ac5 <st_dword>
c0004eca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ece:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ed1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ed5:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ed9:	e8 c4 ea ff ff       	call   c00039a2 <store_xdir>
c0004ede:	89 c5                	mov    ebp,eax
c0004ee0:	85 c0                	test   eax,eax
c0004ee2:	0f 85 98 02 00 00    	jne    c0005180 <f_open+0x419>
c0004ee8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004eeb:	85 d2                	test   edx,edx
c0004eed:	0f 84 db 00 00 00    	je     c0004fce <f_open+0x267>
c0004ef3:	31 c9                	xor    ecx,ecx
c0004ef5:	89 d8                	mov    eax,ebx
c0004ef7:	e8 9b e3 ff ff       	call   c0003297 <remove_chain>
c0004efc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f00:	89 c5                	mov    ebp,eax
c0004f02:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f05:	48                   	dec    eax
c0004f06:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004f09:	e9 b8 00 00 00       	jmp    c0004fc6 <f_open+0x25f>
c0004f0e:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f12:	89 ea                	mov    edx,ebp
c0004f14:	e8 99 fc ff ff       	call   c0004bb2 <ld_clust.isra.0>
c0004f19:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f1e:	89 c7                	mov    edi,eax
c0004f20:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f23:	e8 9d cb ff ff       	call   c0001ac5 <st_dword>
c0004f28:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f2c:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f30:	31 c9                	xor    ecx,ecx
c0004f32:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f3a:	e8 9c fc ff ff       	call   c0004bdb <st_clust.isra.1>
c0004f3f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f43:	83 c0 1c             	add    eax,0x1c
c0004f46:	31 d2                	xor    edx,edx
c0004f48:	e8 78 cb ff ff       	call   c0001ac5 <st_dword>
c0004f4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f51:	85 ff                	test   edi,edi
c0004f53:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f57:	74 75                	je     c0004fce <f_open+0x267>
c0004f59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f5d:	31 c9                	xor    ecx,ecx
c0004f5f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f62:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f69:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f6d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f71:	89 fa                	mov    edx,edi
c0004f73:	e8 1f e3 ff ff       	call   c0003297 <remove_chain>
c0004f78:	89 c5                	mov    ebp,eax
c0004f7a:	85 c0                	test   eax,eax
c0004f7c:	0f 85 fe 01 00 00    	jne    c0005180 <f_open+0x419>
c0004f82:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f86:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f8e:	4f                   	dec    edi
c0004f8f:	e8 92 d2 ff ff       	call   c0002226 <move_window>
c0004f94:	89 c5                	mov    ebp,eax
c0004f96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f9a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f9d:	eb 27                	jmp    c0004fc6 <f_open+0x25f>
c0004f9f:	85 ed                	test   ebp,ebp
c0004fa1:	0f 85 d9 01 00 00    	jne    c0005180 <f_open+0x419>
c0004fa7:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fab:	bd 04 00 00 00       	mov    ebp,0x4
c0004fb0:	a8 10                	test   al,0x10
c0004fb2:	0f 85 c8 01 00 00    	jne    c0005180 <f_open+0x419>
c0004fb8:	83 e7 02             	and    edi,0x2
c0004fbb:	74 11                	je     c0004fce <f_open+0x267>
c0004fbd:	bd 07 00 00 00       	mov    ebp,0x7
c0004fc2:	a8 01                	test   al,0x1
c0004fc4:	eb 02                	jmp    c0004fc8 <f_open+0x261>
c0004fc6:	85 ed                	test   ebp,ebp
c0004fc8:	0f 85 b2 01 00 00    	jne    c0005180 <f_open+0x419>
c0004fce:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fd4:	74 03                	je     c0004fd9 <f_open+0x272>
c0004fd6:	83 ce 40             	or     esi,0x40
c0004fd9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fdd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fe0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fe3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fe6:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fea:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fed:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004ff0:	8a 02                	mov    al,BYTE PTR [edx]
c0004ff2:	3c 04                	cmp    al,0x4
c0004ff4:	75 2a                	jne    c0005020 <f_open+0x2b9>
c0004ff6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004ffa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ffd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005001:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005006:	30 c0                	xor    al,al
c0005008:	09 c8                	or     eax,ecx
c000500a:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000500d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005011:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005014:	8d 42 10             	lea    eax,[edx+0x10]
c0005017:	89 da                	mov    edx,ebx
c0005019:	e8 e5 fb ff ff       	call   c0004c03 <init_alloc_info.isra.2>
c000501e:	eb 1c                	jmp    c000503c <f_open+0x2d5>
c0005020:	89 fa                	mov    edx,edi
c0005022:	e8 8b fb ff ff       	call   c0004bb2 <ld_clust.isra.0>
c0005027:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000502a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000502d:	e8 2a ca ff ff       	call   c0001a5c <ld_dword>
c0005032:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005039:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000503c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005040:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005047:	89 03                	mov    DWORD PTR [ebx],eax
c0005049:	31 d2                	xor    edx,edx
c000504b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000504f:	b9 00 02 00 00       	mov    ecx,0x200
c0005054:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005058:	89 f0                	mov    eax,esi
c000505a:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000505d:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005061:	8d 43 50             	lea    eax,[ebx+0x50]
c0005064:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000506b:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005072:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005079:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005080:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005084:	e8 5a ca ff ff       	call   c0001ae3 <mem_set>
c0005089:	83 e6 20             	and    esi,0x20
c000508c:	75 07                	jne    c0005095 <f_open+0x32e>
c000508e:	31 ed                	xor    ebp,ebp
c0005090:	e9 eb 00 00 00       	jmp    c0005180 <f_open+0x419>
c0005095:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005098:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000509b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000509f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050a7:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050ab:	74 e1                	je     c000508e <f_open+0x327>
c00050ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050b1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050b5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050bc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050bf:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050c2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050c6:	c1 e5 09             	shl    ebp,0x9
c00050c9:	31 ff                	xor    edi,edi
c00050cb:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050cf:	89 f8                	mov    eax,edi
c00050d1:	89 ee                	mov    esi,ebp
c00050d3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050d7:	73 22                	jae    c00050fb <f_open+0x394>
c00050d9:	89 d8                	mov    eax,ebx
c00050db:	e8 c8 dc ff ff       	call   c0002da8 <get_fat>
c00050e0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050e4:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050e8:	89 c2                	mov    edx,eax
c00050ea:	83 f8 01             	cmp    eax,0x1
c00050ed:	76 10                	jbe    c00050ff <f_open+0x398>
c00050ef:	83 f8 ff             	cmp    eax,0xffffffff
c00050f2:	75 d5                	jne    c00050c9 <f_open+0x362>
c00050f4:	bd 01 00 00 00       	mov    ebp,0x1
c00050f9:	eb 09                	jmp    c0005104 <f_open+0x39d>
c00050fb:	31 ed                	xor    ebp,ebp
c00050fd:	eb 05                	jmp    c0005104 <f_open+0x39d>
c00050ff:	bd 02 00 00 00       	mov    ebp,0x2
c0005104:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005107:	85 ed                	test   ebp,ebp
c0005109:	75 75                	jne    c0005180 <f_open+0x419>
c000510b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000510f:	25 ff 01 00 00       	and    eax,0x1ff
c0005114:	0f 84 74 ff ff ff    	je     c000508e <f_open+0x327>
c000511a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000511e:	bd 02 00 00 00       	mov    ebp,0x2
c0005123:	89 c8                	mov    eax,ecx
c0005125:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005129:	e8 ba cb ff ff       	call   c0001ce8 <clst2sect>
c000512e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005132:	89 d7                	mov    edi,edx
c0005134:	09 c7                	or     edi,eax
c0005136:	74 48                	je     c0005180 <f_open+0x419>
c0005138:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000513c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005140:	0f ac fe 09          	shrd   esi,edi,0x9
c0005144:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005148:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005150:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005154:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005158:	83 ec 0c             	sub    esp,0xc
c000515b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000515e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005161:	6a 01                	push   0x1
c0005163:	52                   	push   edx
c0005164:	50                   	push   eax
c0005165:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005169:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000516d:	50                   	push   eax
c000516e:	e8 91 c8 ff ff       	call   c0001a04 <disk_read>
c0005173:	83 c4 20             	add    esp,0x20
c0005176:	85 c0                	test   eax,eax
c0005178:	0f 95 c0             	setne  al
c000517b:	0f b6 c0             	movzx  eax,al
c000517e:	89 c5                	mov    ebp,eax
c0005180:	83 ec 0c             	sub    esp,0xc
c0005183:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005187:	e8 bf 30 00 00       	call   c000824b <ff_memfree>
c000518c:	83 c4 10             	add    esp,0x10
c000518f:	85 ed                	test   ebp,ebp
c0005191:	74 06                	je     c0005199 <f_open+0x432>
c0005193:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005199:	83 c4 7c             	add    esp,0x7c
c000519c:	89 e8                	mov    eax,ebp
c000519e:	5b                   	pop    ebx
c000519f:	5e                   	pop    esi
c00051a0:	5f                   	pop    edi
c00051a1:	5d                   	pop    ebp
c00051a2:	c3                   	ret    

c00051a3 <f_read>:
c00051a3:	55                   	push   ebp
c00051a4:	57                   	push   edi
c00051a5:	56                   	push   esi
c00051a6:	53                   	push   ebx
c00051a7:	83 ec 2c             	sub    esp,0x2c
c00051aa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051ae:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051b2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051b6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051bc:	89 d8                	mov    eax,ebx
c00051be:	e8 88 cf ff ff       	call   c000214b <validate>
c00051c3:	89 c5                	mov    ebp,eax
c00051c5:	85 c0                	test   eax,eax
c00051c7:	0f 85 4c 02 00 00    	jne    c0005419 <f_read+0x276>
c00051cd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051d1:	85 ed                	test   ebp,ebp
c00051d3:	0f 85 40 02 00 00    	jne    c0005419 <f_read+0x276>
c00051d9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051dd:	0f 84 31 02 00 00    	je     c0005414 <f_read+0x271>
c00051e3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051e6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051e9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051ec:	bf 00 00 00 00       	mov    edi,0x0
c00051f1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051f4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051f8:	89 d1                	mov    ecx,edx
c00051fa:	19 f9                	sbb    ecx,edi
c00051fc:	0f 83 cf 00 00 00    	jae    c00052d1 <f_read+0x12e>
c0005202:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005206:	e9 c6 00 00 00       	jmp    c00052d1 <f_read+0x12e>
c000520b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000520e:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005211:	89 d0                	mov    eax,edx
c0005213:	25 ff 01 00 00       	and    eax,0x1ff
c0005218:	0f 85 c9 01 00 00    	jne    c00053e7 <f_read+0x244>
c000521e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005222:	89 d6                	mov    esi,edx
c0005224:	89 cf                	mov    edi,ecx
c0005226:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000522a:	0f ac fe 09          	shrd   esi,edi,0x9
c000522e:	48                   	dec    eax
c000522f:	21 f0                	and    eax,esi
c0005231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005235:	0f 84 a6 00 00 00    	je     c00052e1 <f_read+0x13e>
c000523b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000523f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005242:	89 c8                	mov    eax,ecx
c0005244:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005247:	e8 9c ca ff ff       	call   c0001ce8 <clst2sect>
c000524c:	89 d7                	mov    edi,edx
c000524e:	09 c7                	or     edi,eax
c0005250:	0f 84 b4 00 00 00    	je     c000530a <f_read+0x167>
c0005256:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000525a:	31 ff                	xor    edi,edi
c000525c:	01 c6                	add    esi,eax
c000525e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005261:	11 d7                	adc    edi,edx
c0005263:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000526b:	0f 86 fd 00 00 00    	jbe    c000536e <f_read+0x1cb>
c0005271:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005275:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005279:	c1 e8 09             	shr    eax,0x9
c000527c:	89 04 24             	mov    DWORD PTR [esp],eax
c000527f:	03 14 24             	add    edx,DWORD PTR [esp]
c0005282:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005286:	39 c2                	cmp    edx,eax
c0005288:	76 07                	jbe    c0005291 <f_read+0xee>
c000528a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000528e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005291:	83 ec 0c             	sub    esp,0xc
c0005294:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005298:	57                   	push   edi
c0005299:	56                   	push   esi
c000529a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000529e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052a2:	50                   	push   eax
c00052a3:	e8 5c c7 ff ff       	call   c0001a04 <disk_read>
c00052a8:	83 c4 20             	add    esp,0x20
c00052ab:	85 c0                	test   eax,eax
c00052ad:	75 6e                	jne    c000531d <f_read+0x17a>
c00052af:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052b3:	78 7e                	js     c0005333 <f_read+0x190>
c00052b5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052b8:	c1 e6 09             	shl    esi,0x9
c00052bb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052bf:	31 ff                	xor    edi,edi
c00052c1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052c5:	01 30                	add    DWORD PTR [eax],esi
c00052c7:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052cb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052ce:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052d1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052d6:	0f 85 2f ff ff ff    	jne    c000520b <f_read+0x68>
c00052dc:	e9 38 01 00 00       	jmp    c0005419 <f_read+0x276>
c00052e1:	89 c8                	mov    eax,ecx
c00052e3:	09 d0                	or     eax,edx
c00052e5:	75 05                	jne    c00052ec <f_read+0x149>
c00052e7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052ea:	eb 19                	jmp    c0005305 <f_read+0x162>
c00052ec:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052f0:	74 09                	je     c00052fb <f_read+0x158>
c00052f2:	89 d8                	mov    eax,ebx
c00052f4:	e8 10 ca ff ff       	call   c0001d09 <clmt_clust>
c00052f9:	eb 0a                	jmp    c0005305 <f_read+0x162>
c00052fb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052fe:	89 d8                	mov    eax,ebx
c0005300:	e8 a3 da ff ff       	call   c0002da8 <get_fat>
c0005305:	83 f8 01             	cmp    eax,0x1
c0005308:	77 0e                	ja     c0005318 <f_read+0x175>
c000530a:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	e9 01 01 00 00       	jmp    c0005419 <f_read+0x276>
c0005318:	83 f8 ff             	cmp    eax,0xffffffff
c000531b:	75 0e                	jne    c000532b <f_read+0x188>
c000531d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005321:	bd 01 00 00 00       	mov    ebp,0x1
c0005326:	e9 ee 00 00 00       	jmp    c0005419 <f_read+0x276>
c000532b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000532e:	e9 08 ff ff ff       	jmp    c000523b <f_read+0x98>
c0005333:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005336:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005339:	29 f0                	sub    eax,esi
c000533b:	19 fa                	sbb    edx,edi
c000533d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005340:	89 d7                	mov    edi,edx
c0005342:	ba 00 00 00 00       	mov    edx,0x0
c0005347:	89 f9                	mov    ecx,edi
c0005349:	19 d1                	sbb    ecx,edx
c000534b:	0f 83 64 ff ff ff    	jae    c00052b5 <f_read+0x112>
c0005351:	89 c7                	mov    edi,eax
c0005353:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005357:	c1 e7 09             	shl    edi,0x9
c000535a:	8d 53 50             	lea    edx,[ebx+0x50]
c000535d:	01 f8                	add    eax,edi
c000535f:	b9 00 02 00 00       	mov    ecx,0x200
c0005364:	e8 65 c7 ff ff       	call   c0001ace <mem_cpy>
c0005369:	e9 47 ff ff ff       	jmp    c00052b5 <f_read+0x112>
c000536e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005371:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005374:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005378:	89 04 24             	mov    DWORD PTR [esp],eax
c000537b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000537f:	75 05                	jne    c0005386 <f_read+0x1e3>
c0005381:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005384:	74 5b                	je     c00053e1 <f_read+0x23e>
c0005386:	8d 43 50             	lea    eax,[ebx+0x50]
c0005389:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000538d:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005391:	79 2a                	jns    c00053bd <f_read+0x21a>
c0005393:	83 ec 0c             	sub    esp,0xc
c0005396:	6a 01                	push   0x1
c0005398:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000539c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053a4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053a8:	50                   	push   eax
c00053a9:	e8 6c c6 ff ff       	call   c0001a1a <disk_write>
c00053ae:	83 c4 20             	add    esp,0x20
c00053b1:	85 c0                	test   eax,eax
c00053b3:	0f 85 64 ff ff ff    	jne    c000531d <f_read+0x17a>
c00053b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053bd:	83 ec 0c             	sub    esp,0xc
c00053c0:	6a 01                	push   0x1
c00053c2:	57                   	push   edi
c00053c3:	56                   	push   esi
c00053c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053c8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053d0:	50                   	push   eax
c00053d1:	e8 2e c6 ff ff       	call   c0001a04 <disk_read>
c00053d6:	83 c4 20             	add    esp,0x20
c00053d9:	85 c0                	test   eax,eax
c00053db:	0f 85 3c ff ff ff    	jne    c000531d <f_read+0x17a>
c00053e1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053e4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053e7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053ea:	ba 00 02 00 00       	mov    edx,0x200
c00053ef:	25 ff 01 00 00       	and    eax,0x1ff
c00053f4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053f8:	29 c2                	sub    edx,eax
c00053fa:	39 d6                	cmp    esi,edx
c00053fc:	76 02                	jbe    c0005400 <f_read+0x25d>
c00053fe:	89 d6                	mov    esi,edx
c0005400:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005404:	89 f1                	mov    ecx,esi
c0005406:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540a:	e8 bf c6 ff ff       	call   c0001ace <mem_cpy>
c000540f:	e9 a7 fe ff ff       	jmp    c00052bb <f_read+0x118>
c0005414:	bd 07 00 00 00       	mov    ebp,0x7
c0005419:	83 c4 2c             	add    esp,0x2c
c000541c:	89 e8                	mov    eax,ebp
c000541e:	5b                   	pop    ebx
c000541f:	5e                   	pop    esi
c0005420:	5f                   	pop    edi
c0005421:	5d                   	pop    ebp
c0005422:	c3                   	ret    

c0005423 <f_write>:
c0005423:	55                   	push   ebp
c0005424:	57                   	push   edi
c0005425:	56                   	push   esi
c0005426:	53                   	push   ebx
c0005427:	83 ec 2c             	sub    esp,0x2c
c000542a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000542e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005432:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005436:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000543c:	89 d8                	mov    eax,ebx
c000543e:	e8 08 cd ff ff       	call   c000214b <validate>
c0005443:	89 c5                	mov    ebp,eax
c0005445:	85 c0                	test   eax,eax
c0005447:	0f 85 86 02 00 00    	jne    c00056d3 <f_write+0x2b0>
c000544d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005451:	85 ed                	test   ebp,ebp
c0005453:	0f 85 7a 02 00 00    	jne    c00056d3 <f_write+0x2b0>
c0005459:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000545d:	0f 84 6b 02 00 00    	je     c00056ce <f_write+0x2ab>
c0005463:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005467:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000546a:	0f 84 43 01 00 00    	je     c00055b3 <f_write+0x190>
c0005470:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005473:	89 c1                	mov    ecx,eax
c0005475:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005479:	0f 83 34 01 00 00    	jae    c00055b3 <f_write+0x190>
c000547f:	f7 d0                	not    eax
c0005481:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005485:	e9 29 01 00 00       	jmp    c00055b3 <f_write+0x190>
c000548a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000548d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005490:	89 d0                	mov    eax,edx
c0005492:	25 ff 01 00 00       	and    eax,0x1ff
c0005497:	0f 85 00 02 00 00    	jne    c000569d <f_write+0x27a>
c000549d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054a1:	89 d6                	mov    esi,edx
c00054a3:	89 cf                	mov    edi,ecx
c00054a5:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00054a9:	0f ac fe 09          	shrd   esi,edi,0x9
c00054ad:	48                   	dec    eax
c00054ae:	21 f0                	and    eax,esi
c00054b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054b4:	0f 84 06 01 00 00    	je     c00055c0 <f_write+0x19d>
c00054ba:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054be:	0f 88 6e 01 00 00    	js     c0005632 <f_write+0x20f>
c00054c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054c8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054cb:	89 c8                	mov    eax,ecx
c00054cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054d1:	e8 12 c8 ff ff       	call   c0001ce8 <clst2sect>
c00054d6:	89 d1                	mov    ecx,edx
c00054d8:	09 c1                	or     ecx,eax
c00054da:	0f 84 1c 01 00 00    	je     c00055fc <f_write+0x1d9>
c00054e0:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054e4:	31 ff                	xor    edi,edi
c00054e6:	01 c6                	add    esi,eax
c00054e8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054ec:	11 d7                	adc    edi,edx
c00054ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054f6:	0f 86 63 01 00 00    	jbe    c000565f <f_write+0x23c>
c00054fc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005500:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005504:	c1 e8 09             	shr    eax,0x9
c0005507:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000550b:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000550f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005513:	39 c2                	cmp    edx,eax
c0005515:	76 08                	jbe    c000551f <f_write+0xfc>
c0005517:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000551b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000551f:	83 ec 0c             	sub    esp,0xc
c0005522:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005526:	57                   	push   edi
c0005527:	56                   	push   esi
c0005528:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000552c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005530:	50                   	push   eax
c0005531:	e8 e4 c4 ff ff       	call   c0001a1a <disk_write>
c0005536:	83 c4 20             	add    esp,0x20
c0005539:	85 c0                	test   eax,eax
c000553b:	0f 85 ce 00 00 00    	jne    c000560f <f_write+0x1ec>
c0005541:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005544:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005547:	29 f0                	sub    eax,esi
c0005549:	19 fa                	sbb    edx,edi
c000554b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000554f:	89 d7                	mov    edi,edx
c0005551:	ba 00 00 00 00       	mov    edx,0x0
c0005556:	89 f9                	mov    ecx,edi
c0005558:	19 d1                	sbb    ecx,edx
c000555a:	73 1c                	jae    c0005578 <f_write+0x155>
c000555c:	89 c7                	mov    edi,eax
c000555e:	b9 00 02 00 00       	mov    ecx,0x200
c0005563:	c1 e7 09             	shl    edi,0x9
c0005566:	8d 43 50             	lea    eax,[ebx+0x50]
c0005569:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000556d:	89 fa                	mov    edx,edi
c000556f:	e8 5a c5 ff ff       	call   c0001ace <mem_cpy>
c0005574:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005578:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000557c:	c1 e6 09             	shl    esi,0x9
c000557f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005583:	31 ff                	xor    edi,edi
c0005585:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005589:	01 30                	add    DWORD PTR [eax],esi
c000558b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000558f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005592:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005595:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005598:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000559b:	89 c1                	mov    ecx,eax
c000559d:	39 f2                	cmp    edx,esi
c000559f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00055a2:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00055a5:	19 f9                	sbb    ecx,edi
c00055a7:	73 04                	jae    c00055ad <f_write+0x18a>
c00055a9:	89 f2                	mov    edx,esi
c00055ab:	89 f8                	mov    eax,edi
c00055ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055b0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055b3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055b8:	0f 85 cc fe ff ff    	jne    c000548a <f_write+0x67>
c00055be:	eb 2e                	jmp    c00055ee <f_write+0x1cb>
c00055c0:	89 c8                	mov    eax,ecx
c00055c2:	09 d0                	or     eax,edx
c00055c4:	75 0b                	jne    c00055d1 <f_write+0x1ae>
c00055c6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055c9:	31 d2                	xor    edx,edx
c00055cb:	85 c0                	test   eax,eax
c00055cd:	75 28                	jne    c00055f7 <f_write+0x1d4>
c00055cf:	eb 12                	jmp    c00055e3 <f_write+0x1c0>
c00055d1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055d5:	74 09                	je     c00055e0 <f_write+0x1bd>
c00055d7:	89 d8                	mov    eax,ebx
c00055d9:	e8 2b c7 ff ff       	call   c0001d09 <clmt_clust>
c00055de:	eb 0a                	jmp    c00055ea <f_write+0x1c7>
c00055e0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055e3:	89 d8                	mov    eax,ebx
c00055e5:	e8 ac da ff ff       	call   c0003096 <create_chain>
c00055ea:	85 c0                	test   eax,eax
c00055ec:	75 09                	jne    c00055f7 <f_write+0x1d4>
c00055ee:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055f2:	e9 dc 00 00 00       	jmp    c00056d3 <f_write+0x2b0>
c00055f7:	83 f8 01             	cmp    eax,0x1
c00055fa:	75 0e                	jne    c000560a <f_write+0x1e7>
c00055fc:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005600:	bd 02 00 00 00       	mov    ebp,0x2
c0005605:	e9 c9 00 00 00       	jmp    c00056d3 <f_write+0x2b0>
c000560a:	83 f8 ff             	cmp    eax,0xffffffff
c000560d:	75 0e                	jne    c000561d <f_write+0x1fa>
c000560f:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005613:	bd 01 00 00 00       	mov    ebp,0x1
c0005618:	e9 b6 00 00 00       	jmp    c00056d3 <f_write+0x2b0>
c000561d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005620:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005624:	0f 85 90 fe ff ff    	jne    c00054ba <f_write+0x97>
c000562a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000562d:	e9 88 fe ff ff       	jmp    c00054ba <f_write+0x97>
c0005632:	83 ec 0c             	sub    esp,0xc
c0005635:	8d 43 50             	lea    eax,[ebx+0x50]
c0005638:	6a 01                	push   0x1
c000563a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000563d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005640:	50                   	push   eax
c0005641:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005645:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005649:	50                   	push   eax
c000564a:	e8 cb c3 ff ff       	call   c0001a1a <disk_write>
c000564f:	83 c4 20             	add    esp,0x20
c0005652:	85 c0                	test   eax,eax
c0005654:	75 b9                	jne    c000560f <f_write+0x1ec>
c0005656:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000565a:	e9 65 fe ff ff       	jmp    c00054c4 <f_write+0xa1>
c000565f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005662:	75 05                	jne    c0005669 <f_write+0x246>
c0005664:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005667:	74 2e                	je     c0005697 <f_write+0x274>
c0005669:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000566c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000566f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005672:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005675:	73 20                	jae    c0005697 <f_write+0x274>
c0005677:	83 ec 0c             	sub    esp,0xc
c000567a:	8d 43 50             	lea    eax,[ebx+0x50]
c000567d:	6a 01                	push   0x1
c000567f:	57                   	push   edi
c0005680:	56                   	push   esi
c0005681:	50                   	push   eax
c0005682:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005686:	50                   	push   eax
c0005687:	e8 78 c3 ff ff       	call   c0001a04 <disk_read>
c000568c:	83 c4 20             	add    esp,0x20
c000568f:	85 c0                	test   eax,eax
c0005691:	0f 85 78 ff ff ff    	jne    c000560f <f_write+0x1ec>
c0005697:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000569a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000569d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056a0:	ba 00 02 00 00       	mov    edx,0x200
c00056a5:	25 ff 01 00 00       	and    eax,0x1ff
c00056aa:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056ae:	29 c2                	sub    edx,eax
c00056b0:	39 d6                	cmp    esi,edx
c00056b2:	76 02                	jbe    c00056b6 <f_write+0x293>
c00056b4:	89 d6                	mov    esi,edx
c00056b6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056ba:	89 f1                	mov    ecx,esi
c00056bc:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056c0:	e8 09 c4 ff ff       	call   c0001ace <mem_cpy>
c00056c5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056c9:	e9 b1 fe ff ff       	jmp    c000557f <f_write+0x15c>
c00056ce:	bd 07 00 00 00       	mov    ebp,0x7
c00056d3:	83 c4 2c             	add    esp,0x2c
c00056d6:	89 e8                	mov    eax,ebp
c00056d8:	5b                   	pop    ebx
c00056d9:	5e                   	pop    esi
c00056da:	5f                   	pop    edi
c00056db:	5d                   	pop    ebp
c00056dc:	c3                   	ret    

c00056dd <f_sync>:
c00056dd:	56                   	push   esi
c00056de:	53                   	push   ebx
c00056df:	83 ec 64             	sub    esp,0x64
c00056e2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056e6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056ea:	89 d8                	mov    eax,ebx
c00056ec:	e8 5a ca ff ff       	call   c000214b <validate>
c00056f1:	85 c0                	test   eax,eax
c00056f3:	0f 85 ba 01 00 00    	jne    c00058b3 <f_sync+0x1d6>
c00056f9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056fc:	f6 c2 40             	test   dl,0x40
c00056ff:	0f 84 ae 01 00 00    	je     c00058b3 <f_sync+0x1d6>
c0005705:	84 d2                	test   dl,dl
c0005707:	79 33                	jns    c000573c <f_sync+0x5f>
c0005709:	83 ec 0c             	sub    esp,0xc
c000570c:	8d 43 50             	lea    eax,[ebx+0x50]
c000570f:	6a 01                	push   0x1
c0005711:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005714:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005717:	50                   	push   eax
c0005718:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000571c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 f4 c2 ff ff       	call   c0001a1a <disk_write>
c0005726:	89 c2                	mov    edx,eax
c0005728:	83 c4 20             	add    esp,0x20
c000572b:	b8 01 00 00 00       	mov    eax,0x1
c0005730:	85 d2                	test   edx,edx
c0005732:	0f 85 7b 01 00 00    	jne    c00058b3 <f_sync+0x1d6>
c0005738:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000573c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005740:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005743:	0f 85 11 01 00 00    	jne    c000585a <f_sync+0x17d>
c0005749:	89 d8                	mov    eax,ebx
c000574b:	e8 1e d6 ff ff       	call   c0002d6e <fill_first_frag>
c0005750:	85 c0                	test   eax,eax
c0005752:	0f 85 5b 01 00 00    	jne    c00058b3 <f_sync+0x1d6>
c0005758:	83 c9 ff             	or     ecx,0xffffffff
c000575b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000575e:	89 d8                	mov    eax,ebx
c0005760:	e8 d4 d5 ff ff       	call   c0002d39 <fill_last_frag>
c0005765:	85 c0                	test   eax,eax
c0005767:	0f 85 46 01 00 00    	jne    c00058b3 <f_sync+0x1d6>
c000576d:	83 ec 0c             	sub    esp,0xc
c0005770:	68 60 04 00 00       	push   0x460
c0005775:	e8 bb 2a 00 00       	call   c0008235 <ff_memalloc>
c000577a:	89 c6                	mov    esi,eax
c000577c:	83 c4 10             	add    esp,0x10
c000577f:	b8 11 00 00 00       	mov    eax,0x11
c0005784:	85 f6                	test   esi,esi
c0005786:	0f 84 27 01 00 00    	je     c00058b3 <f_sync+0x1d6>
c000578c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005790:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005796:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005799:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000579c:	89 da                	mov    edx,ebx
c000579e:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057a2:	e8 bc df ff ff       	call   c0003763 <load_obj_xdir>
c00057a7:	85 c0                	test   eax,eax
c00057a9:	0f 85 95 00 00 00    	jne    c0005844 <f_sync+0x167>
c00057af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057b3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057b6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057ba:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057bd:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057c0:	83 ca 01             	or     edx,0x1
c00057c3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057c9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057cc:	83 c0 34             	add    eax,0x34
c00057cf:	e8 f1 c2 ff ff       	call   c0001ac5 <st_dword>
c00057d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057d8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057db:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057de:	83 c0 38             	add    eax,0x38
c00057e1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057e4:	e8 df c2 ff ff       	call   c0001ac8 <st_qword>
c00057e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057f0:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057f3:	83 c0 28             	add    eax,0x28
c00057f6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057f9:	e8 ca c2 ff ff       	call   c0001ac8 <st_qword>
c00057fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005802:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005805:	ba 00 00 21 50       	mov    edx,0x50210000
c000580a:	83 c0 0c             	add    eax,0xc
c000580d:	e8 b3 c2 ff ff       	call   c0001ac5 <st_dword>
c0005812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005816:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005819:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c000581d:	31 d2                	xor    edx,edx
c000581f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005822:	83 c0 10             	add    eax,0x10
c0005825:	e8 9b c2 ff ff       	call   c0001ac5 <st_dword>
c000582a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000582e:	e8 6f e1 ff ff       	call   c00039a2 <store_xdir>
c0005833:	85 c0                	test   eax,eax
c0005835:	75 0d                	jne    c0005844 <f_sync+0x167>
c0005837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000583b:	e8 f4 ea ff ff       	call   c0004334 <sync_fs>
c0005840:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005844:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005848:	83 ec 0c             	sub    esp,0xc
c000584b:	56                   	push   esi
c000584c:	e8 fa 29 00 00       	call   c000824b <ff_memfree>
c0005851:	83 c4 10             	add    esp,0x10
c0005854:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005858:	eb 59                	jmp    c00058b3 <f_sync+0x1d6>
c000585a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c000585d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005860:	e8 c1 c9 ff ff       	call   c0002226 <move_window>
c0005865:	85 c0                	test   eax,eax
c0005867:	75 4a                	jne    c00058b3 <f_sync+0x1d6>
c0005869:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c000586c:	89 f2                	mov    edx,esi
c000586e:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005872:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005875:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005877:	e8 5f f3 ff ff       	call   c0004bdb <st_clust.isra.1>
c000587c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000587f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005882:	e8 3e c2 ff ff       	call   c0001ac5 <st_dword>
c0005887:	8d 46 16             	lea    eax,[esi+0x16]
c000588a:	ba 00 00 21 50       	mov    edx,0x50210000
c000588f:	e8 31 c2 ff ff       	call   c0001ac5 <st_dword>
c0005894:	8d 46 12             	lea    eax,[esi+0x12]
c0005897:	31 d2                	xor    edx,edx
c0005899:	e8 23 c2 ff ff       	call   c0001ac1 <st_word>
c000589e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058a2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00058a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058aa:	e8 85 ea ff ff       	call   c0004334 <sync_fs>
c00058af:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058b3:	83 c4 64             	add    esp,0x64
c00058b6:	5b                   	pop    ebx
c00058b7:	5e                   	pop    esi
c00058b8:	c3                   	ret    

c00058b9 <f_close>:
c00058b9:	53                   	push   ebx
c00058ba:	83 ec 24             	sub    esp,0x24
c00058bd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058c1:	53                   	push   ebx
c00058c2:	e8 16 fe ff ff       	call   c00056dd <f_sync>
c00058c7:	83 c4 10             	add    esp,0x10
c00058ca:	85 c0                	test   eax,eax
c00058cc:	75 15                	jne    c00058e3 <f_close+0x2a>
c00058ce:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058d2:	89 d8                	mov    eax,ebx
c00058d4:	e8 72 c8 ff ff       	call   c000214b <validate>
c00058d9:	85 c0                	test   eax,eax
c00058db:	75 06                	jne    c00058e3 <f_close+0x2a>
c00058dd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058e3:	83 c4 18             	add    esp,0x18
c00058e6:	5b                   	pop    ebx
c00058e7:	c3                   	ret    

c00058e8 <f_lseek>:
c00058e8:	55                   	push   ebp
c00058e9:	57                   	push   edi
c00058ea:	56                   	push   esi
c00058eb:	53                   	push   ebx
c00058ec:	83 ec 3c             	sub    esp,0x3c
c00058ef:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058f3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058f7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00058fe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005902:	89 d8                	mov    eax,ebx
c0005904:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005908:	e8 3e c8 ff ff       	call   c000214b <validate>
c000590d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005911:	85 c0                	test   eax,eax
c0005913:	0f 85 28 04 00 00    	jne    c0005d41 <f_lseek+0x459>
c0005919:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c000591d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005921:	85 c0                	test   eax,eax
c0005923:	0f 85 18 04 00 00    	jne    c0005d41 <f_lseek+0x459>
c0005929:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000592d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005930:	74 0c                	je     c000593e <f_lseek+0x56>
c0005932:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005935:	85 c0                	test   eax,eax
c0005937:	75 1f                	jne    c0005958 <f_lseek+0x70>
c0005939:	e9 8b 01 00 00       	jmp    c0005ac9 <f_lseek+0x1e1>
c000593e:	83 c9 ff             	or     ecx,0xffffffff
c0005941:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005944:	89 d8                	mov    eax,ebx
c0005946:	e8 ee d3 ff ff       	call   c0002d39 <fill_last_frag>
c000594b:	85 c0                	test   eax,eax
c000594d:	74 e3                	je     c0005932 <f_lseek+0x4a>
c000594f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005953:	e9 e9 03 00 00       	jmp    c0005d41 <f_lseek+0x459>
c0005958:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c000595d:	0f 85 ac 00 00 00    	jne    c0005a0f <f_lseek+0x127>
c0005963:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005967:	0f 85 a2 00 00 00    	jne    c0005a0f <f_lseek+0x127>
c000596d:	8d 78 04             	lea    edi,[eax+0x4]
c0005970:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005973:	8b 00                	mov    eax,DWORD PTR [eax]
c0005975:	be 02 00 00 00       	mov    esi,0x2
c000597a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000597e:	85 ed                	test   ebp,ebp
c0005980:	74 73                	je     c00059f5 <f_lseek+0x10d>
c0005982:	89 e9                	mov    ecx,ebp
c0005984:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000598b:	89 ca                	mov    edx,ecx
c000598d:	89 d8                	mov    eax,ebx
c000598f:	ff 04 24             	inc    DWORD PTR [esp]
c0005992:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005996:	e8 0d d4 ff ff       	call   c0002da8 <get_fat>
c000599b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000599f:	83 f8 01             	cmp    eax,0x1
c00059a2:	77 11                	ja     c00059b5 <f_lseek+0xcd>
c00059a4:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00059a8:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00059b0:	e9 8c 03 00 00       	jmp    c0005d41 <f_lseek+0x459>
c00059b5:	83 f8 ff             	cmp    eax,0xffffffff
c00059b8:	75 11                	jne    c00059cb <f_lseek+0xe3>
c00059ba:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059be:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00059c6:	e9 76 03 00 00       	jmp    c0005d41 <f_lseek+0x459>
c00059cb:	8d 51 01             	lea    edx,[ecx+0x1]
c00059ce:	89 c1                	mov    ecx,eax
c00059d0:	39 c2                	cmp    edx,eax
c00059d2:	74 b7                	je     c000598b <f_lseek+0xa3>
c00059d4:	83 c6 02             	add    esi,0x2
c00059d7:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c00059db:	72 0b                	jb     c00059e8 <f_lseek+0x100>
c00059dd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059e0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059e3:	89 0f                	mov    DWORD PTR [edi],ecx
c00059e5:	83 c7 08             	add    edi,0x8
c00059e8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059ec:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059ef:	76 04                	jbe    c00059f5 <f_lseek+0x10d>
c00059f1:	89 c5                	mov    ebp,eax
c00059f3:	eb 8d                	jmp    c0005982 <f_lseek+0x9a>
c00059f5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059f8:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
c00059fc:	89 30                	mov    DWORD PTR [eax],esi
c00059fe:	0f 87 35 03 00 00    	ja     c0005d39 <f_lseek+0x451>
c0005a04:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a0a:	e9 32 03 00 00       	jmp    c0005d41 <f_lseek+0x459>
c0005a0f:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0005a12:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005a15:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005a18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a1c:	19 f8                	sbb    eax,edi
c0005a1e:	73 07                	jae    c0005a27 <f_lseek+0x13f>
c0005a20:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a23:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a27:	89 f8                	mov    eax,edi
c0005a29:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005a2c:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005a2f:	09 f0                	or     eax,esi
c0005a31:	0f 84 0a 03 00 00    	je     c0005d41 <f_lseek+0x459>
c0005a37:	89 f0                	mov    eax,esi
c0005a39:	89 fa                	mov    edx,edi
c0005a3b:	83 c0 ff             	add    eax,0xffffffff
c0005a3e:	83 d2 ff             	adc    edx,0xffffffff
c0005a41:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a44:	89 d1                	mov    ecx,edx
c0005a46:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a4a:	89 c2                	mov    edx,eax
c0005a4c:	89 d8                	mov    eax,ebx
c0005a4e:	e8 b6 c2 ff ff       	call   c0001d09 <clmt_clust>
c0005a53:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a57:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a5a:	89 c2                	mov    edx,eax
c0005a5c:	89 c8                	mov    eax,ecx
c0005a5e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0005a62:	e8 81 c2 ff ff       	call   c0001ce8 <clst2sect>
c0005a67:	89 d1                	mov    ecx,edx
c0005a69:	09 c1                	or     ecx,eax
c0005a6b:	0f 84 33 ff ff ff    	je     c00059a4 <f_lseek+0xbc>
c0005a71:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0005a77:	0f 84 c4 02 00 00    	je     c0005d41 <f_lseek+0x459>
c0005a7d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0005a81:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a85:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a88:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a8c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a90:	4d                   	dec    ebp
c0005a91:	31 ff                	xor    edi,edi
c0005a93:	21 ee                	and    esi,ebp
c0005a95:	01 c6                	add    esi,eax
c0005a97:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a9a:	11 d7                	adc    edi,edx
c0005a9c:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a9f:	39 fa                	cmp    edx,edi
c0005aa1:	75 08                	jne    c0005aab <f_lseek+0x1c3>
c0005aa3:	39 f0                	cmp    eax,esi
c0005aa5:	0f 84 96 02 00 00    	je     c0005d41 <f_lseek+0x459>
c0005aab:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005aae:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ab2:	0f 89 58 02 00 00    	jns    c0005d10 <f_lseek+0x428>
c0005ab8:	83 ec 0c             	sub    esp,0xc
c0005abb:	6a 01                	push   0x1
c0005abd:	52                   	push   edx
c0005abe:	50                   	push   eax
c0005abf:	55                   	push   ebp
c0005ac0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005ac4:	e9 32 02 00 00       	jmp    c0005cfb <f_lseek+0x413>
c0005ac9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005acd:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ad0:	74 16                	je     c0005ae8 <f_lseek+0x200>
c0005ad2:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005ad7:	76 0f                	jbe    c0005ae8 <f_lseek+0x200>
c0005ad9:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ae0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ae8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aeb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005aee:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005af1:	89 c7                	mov    edi,eax
c0005af3:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005af7:	73 0d                	jae    c0005b06 <f_lseek+0x21e>
c0005af9:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005afd:	75 07                	jne    c0005b06 <f_lseek+0x21e>
c0005aff:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b06:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b0a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b0d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b10:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b17:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b1e:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b21:	75 09                	jne    c0005b2c <f_lseek+0x244>
c0005b23:	31 f6                	xor    esi,esi
c0005b25:	31 ff                	xor    edi,edi
c0005b27:	e9 87 01 00 00       	jmp    c0005cb3 <f_lseek+0x3cb>
c0005b2c:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b30:	c1 e1 09             	shl    ecx,0x9
c0005b33:	89 d7                	mov    edi,edx
c0005b35:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0005b39:	09 c7                	or     edi,eax
c0005b3b:	74 6b                	je     c0005ba8 <f_lseek+0x2c0>
c0005b3d:	83 c0 ff             	add    eax,0xffffffff
c0005b40:	89 cf                	mov    edi,ecx
c0005b42:	83 d2 ff             	adc    edx,0xffffffff
c0005b45:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b4c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005b50:	83 c0 ff             	add    eax,0xffffffff
c0005b53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b57:	83 d2 ff             	adc    edx,0xffffffff
c0005b5a:	31 ed                	xor    ebp,ebp
c0005b5c:	55                   	push   ebp
c0005b5d:	51                   	push   ecx
c0005b5e:	52                   	push   edx
c0005b5f:	50                   	push   eax
c0005b60:	e8 a7 99 01 00       	call   c001f50c <__udivdi3>
c0005b65:	83 c4 10             	add    esp,0x10
c0005b68:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005b6c:	89 d6                	mov    esi,edx
c0005b6e:	55                   	push   ebp
c0005b6f:	57                   	push   edi
c0005b70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005b74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005b78:	e8 8f 99 01 00       	call   c001f50c <__udivdi3>
c0005b7d:	83 c4 10             	add    esp,0x10
c0005b80:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005b84:	19 d6                	sbb    esi,edx
c0005b86:	72 20                	jb     c0005ba8 <f_lseek+0x2c0>
c0005b88:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0005b8c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005b90:	f7 d9                	neg    ecx
c0005b92:	23 4c 24 10          	and    ecx,DWORD PTR [esp+0x10]
c0005b96:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b99:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b9c:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b9f:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005ba3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ba6:	eb 28                	jmp    c0005bd0 <f_lseek+0x2e8>
c0005ba8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005bab:	85 c0                	test   eax,eax
c0005bad:	75 1e                	jne    c0005bcd <f_lseek+0x2e5>
c0005baf:	31 d2                	xor    edx,edx
c0005bb1:	89 d8                	mov    eax,ebx
c0005bb3:	e8 de d4 ff ff       	call   c0003096 <create_chain>
c0005bb8:	83 f8 01             	cmp    eax,0x1
c0005bbb:	0f 84 e3 fd ff ff    	je     c00059a4 <f_lseek+0xbc>
c0005bc1:	83 f8 ff             	cmp    eax,0xffffffff
c0005bc4:	0f 84 f0 fd ff ff    	je     c00059ba <f_lseek+0xd2>
c0005bca:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bcd:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bd0:	85 c0                	test   eax,eax
c0005bd2:	0f 84 4b ff ff ff    	je     c0005b23 <f_lseek+0x23b>
c0005bd8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0005bdc:	31 ff                	xor    edi,edi
c0005bde:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005be1:	89 fd                	mov    ebp,edi
c0005be3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005be7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005bea:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005bed:	1b 6c 24 04          	sbb    ebp,DWORD PTR [esp+0x4]
c0005bf1:	73 7d                	jae    c0005c70 <f_lseek+0x388>
c0005bf3:	29 34 24             	sub    DWORD PTR [esp],esi
c0005bf6:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005bfa:	01 d6                	add    esi,edx
c0005bfc:	11 cf                	adc    edi,ecx
c0005bfe:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005c01:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005c04:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005c07:	f6 c2 02             	test   dl,0x2
c0005c0a:	74 25                	je     c0005c31 <f_lseek+0x349>
c0005c0c:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0005c0f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c12:	19 f9                	sbb    ecx,edi
c0005c14:	73 0c                	jae    c0005c22 <f_lseek+0x33a>
c0005c16:	83 ca 40             	or     edx,0x40
c0005c19:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c1c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c1f:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c22:	89 c2                	mov    edx,eax
c0005c24:	89 d8                	mov    eax,ebx
c0005c26:	e8 6b d4 ff ff       	call   c0003096 <create_chain>
c0005c2b:	85 c0                	test   eax,eax
c0005c2d:	75 0b                	jne    c0005c3a <f_lseek+0x352>
c0005c2f:	eb 30                	jmp    c0005c61 <f_lseek+0x379>
c0005c31:	89 c2                	mov    edx,eax
c0005c33:	89 d8                	mov    eax,ebx
c0005c35:	e8 6e d1 ff ff       	call   c0002da8 <get_fat>
c0005c3a:	83 f8 ff             	cmp    eax,0xffffffff
c0005c3d:	0f 84 77 fd ff ff    	je     c00059ba <f_lseek+0xd2>
c0005c43:	83 f8 01             	cmp    eax,0x1
c0005c46:	0f 86 58 fd ff ff    	jbe    c00059a4 <f_lseek+0xbc>
c0005c4c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c50:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c53:	0f 86 4b fd ff ff    	jbe    c00059a4 <f_lseek+0xbc>
c0005c59:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c5c:	e9 77 ff ff ff       	jmp    c0005bd8 <f_lseek+0x2f0>
c0005c61:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c68:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c70:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c73:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c77:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c7a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c7d:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c80:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c86:	0f 84 97 fe ff ff    	je     c0005b23 <f_lseek+0x23b>
c0005c8c:	89 c2                	mov    edx,eax
c0005c8e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c92:	e8 51 c0 ff ff       	call   c0001ce8 <clst2sect>
c0005c97:	89 d7                	mov    edi,edx
c0005c99:	09 c7                	or     edi,eax
c0005c9b:	0f 84 03 fd ff ff    	je     c00059a4 <f_lseek+0xbc>
c0005ca1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ca5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca8:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cac:	c1 ef 09             	shr    edi,0x9
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	11 d7                	adc    edi,edx
c0005cb3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005cb6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005cb9:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005cbc:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005cbf:	19 d1                	sbb    ecx,edx
c0005cc1:	73 0a                	jae    c0005ccd <f_lseek+0x3e5>
c0005cc3:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005cc7:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005cca:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005ccd:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cd2:	74 6d                	je     c0005d41 <f_lseek+0x459>
c0005cd4:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cd7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cda:	39 fa                	cmp    edx,edi
c0005cdc:	75 04                	jne    c0005ce2 <f_lseek+0x3fa>
c0005cde:	39 f0                	cmp    eax,esi
c0005ce0:	74 5f                	je     c0005d41 <f_lseek+0x459>
c0005ce2:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ce5:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ce9:	79 25                	jns    c0005d10 <f_lseek+0x428>
c0005ceb:	83 ec 0c             	sub    esp,0xc
c0005cee:	6a 01                	push   0x1
c0005cf0:	52                   	push   edx
c0005cf1:	50                   	push   eax
c0005cf2:	55                   	push   ebp
c0005cf3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005cf7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cfb:	50                   	push   eax
c0005cfc:	e8 19 bd ff ff       	call   c0001a1a <disk_write>
c0005d01:	83 c4 20             	add    esp,0x20
c0005d04:	85 c0                	test   eax,eax
c0005d06:	0f 85 ae fc ff ff    	jne    c00059ba <f_lseek+0xd2>
c0005d0c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d10:	83 ec 0c             	sub    esp,0xc
c0005d13:	6a 01                	push   0x1
c0005d15:	57                   	push   edi
c0005d16:	56                   	push   esi
c0005d17:	55                   	push   ebp
c0005d18:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d1c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d20:	50                   	push   eax
c0005d21:	e8 de bc ff ff       	call   c0001a04 <disk_read>
c0005d26:	83 c4 20             	add    esp,0x20
c0005d29:	85 c0                	test   eax,eax
c0005d2b:	0f 85 89 fc ff ff    	jne    c00059ba <f_lseek+0xd2>
c0005d31:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d34:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d37:	eb 08                	jmp    c0005d41 <f_lseek+0x459>
c0005d39:	c7 44 24 0c 11 00 00 00 	mov    DWORD PTR [esp+0xc],0x11
c0005d41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005d45:	83 c4 3c             	add    esp,0x3c
c0005d48:	5b                   	pop    ebx
c0005d49:	5e                   	pop    esi
c0005d4a:	5f                   	pop    edi
c0005d4b:	5d                   	pop    ebp
c0005d4c:	c3                   	ret    

c0005d4d <f_opendir>:
c0005d4d:	56                   	push   esi
c0005d4e:	b8 09 00 00 00       	mov    eax,0x9
c0005d53:	53                   	push   ebx
c0005d54:	83 ec 24             	sub    esp,0x24
c0005d57:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d5b:	85 db                	test   ebx,ebx
c0005d5d:	0f 84 e6 00 00 00    	je     c0005e49 <f_opendir+0xfc>
c0005d63:	31 c9                	xor    ecx,ecx
c0005d65:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d69:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d6d:	e8 5f c7 ff ff       	call   c00024d1 <mount_volume>
c0005d72:	85 c0                	test   eax,eax
c0005d74:	0f 85 c9 00 00 00    	jne    c0005e43 <f_opendir+0xf6>
c0005d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d7e:	83 ec 0c             	sub    esp,0xc
c0005d81:	89 03                	mov    DWORD PTR [ebx],eax
c0005d83:	68 60 04 00 00       	push   0x460
c0005d88:	e8 a8 24 00 00       	call   c0008235 <ff_memalloc>
c0005d8d:	89 c6                	mov    esi,eax
c0005d8f:	83 c4 10             	add    esp,0x10
c0005d92:	b8 11 00 00 00       	mov    eax,0x11
c0005d97:	85 f6                	test   esi,esi
c0005d99:	0f 84 aa 00 00 00    	je     c0005e49 <f_opendir+0xfc>
c0005d9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005da3:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005da9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005dac:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005daf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005db3:	89 d8                	mov    eax,ebx
c0005db5:	e8 83 ee ff ff       	call   c0004c3d <follow_path>
c0005dba:	85 c0                	test   eax,eax
c0005dbc:	75 61                	jne    c0005e1f <f_opendir+0xd2>
c0005dbe:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005dc2:	78 46                	js     c0005e0a <f_opendir+0xbd>
c0005dc4:	b8 05 00 00 00       	mov    eax,0x5
c0005dc9:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005dcd:	74 50                	je     c0005e1f <f_opendir+0xd2>
c0005dcf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dd3:	8a 01                	mov    al,BYTE PTR [ecx]
c0005dd5:	3c 04                	cmp    al,0x4
c0005dd7:	75 26                	jne    c0005dff <f_opendir+0xb2>
c0005dd9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005ddc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005ddf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005de2:	30 d2                	xor    dl,dl
c0005de4:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005de8:	09 c2                	or     edx,eax
c0005dea:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005ded:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005df0:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005df3:	89 da                	mov    edx,ebx
c0005df5:	8d 41 10             	lea    eax,[ecx+0x10]
c0005df8:	e8 06 ee ff ff       	call   c0004c03 <init_alloc_info.isra.2>
c0005dfd:	eb 0b                	jmp    c0005e0a <f_opendir+0xbd>
c0005dff:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e02:	e8 ab ed ff ff       	call   c0004bb2 <ld_clust.isra.0>
c0005e07:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e0e:	31 d2                	xor    edx,edx
c0005e10:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e14:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e18:	89 d8                	mov    eax,ebx
c0005e1a:	e8 7f d1 ff ff       	call   c0002f9e <dir_sdi>
c0005e1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e23:	83 ec 0c             	sub    esp,0xc
c0005e26:	56                   	push   esi
c0005e27:	e8 1f 24 00 00       	call   c000824b <ff_memfree>
c0005e2c:	83 c4 10             	add    esp,0x10
c0005e2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e33:	83 f8 04             	cmp    eax,0x4
c0005e36:	74 06                	je     c0005e3e <f_opendir+0xf1>
c0005e38:	85 c0                	test   eax,eax
c0005e3a:	74 0d                	je     c0005e49 <f_opendir+0xfc>
c0005e3c:	eb 05                	jmp    c0005e43 <f_opendir+0xf6>
c0005e3e:	b8 05 00 00 00       	mov    eax,0x5
c0005e43:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e49:	83 c4 24             	add    esp,0x24
c0005e4c:	5b                   	pop    ebx
c0005e4d:	5e                   	pop    esi
c0005e4e:	c3                   	ret    

c0005e4f <f_closedir>:
c0005e4f:	53                   	push   ebx
c0005e50:	83 ec 18             	sub    esp,0x18
c0005e53:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e57:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e5b:	89 d8                	mov    eax,ebx
c0005e5d:	e8 e9 c2 ff ff       	call   c000214b <validate>
c0005e62:	85 c0                	test   eax,eax
c0005e64:	75 06                	jne    c0005e6c <f_closedir+0x1d>
c0005e66:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e6c:	83 c4 18             	add    esp,0x18
c0005e6f:	5b                   	pop    ebx
c0005e70:	c3                   	ret    

c0005e71 <f_readdir>:
c0005e71:	57                   	push   edi
c0005e72:	56                   	push   esi
c0005e73:	53                   	push   ebx
c0005e74:	83 ec 20             	sub    esp,0x20
c0005e77:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e7b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e7f:	89 d8                	mov    eax,ebx
c0005e81:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e85:	e8 c1 c2 ff ff       	call   c000214b <validate>
c0005e8a:	85 c0                	test   eax,eax
c0005e8c:	75 77                	jne    c0005f05 <f_readdir+0x94>
c0005e8e:	85 ff                	test   edi,edi
c0005e90:	75 0b                	jne    c0005e9d <f_readdir+0x2c>
c0005e92:	31 d2                	xor    edx,edx
c0005e94:	89 d8                	mov    eax,ebx
c0005e96:	e8 03 d1 ff ff       	call   c0002f9e <dir_sdi>
c0005e9b:	eb 68                	jmp    c0005f05 <f_readdir+0x94>
c0005e9d:	83 ec 0c             	sub    esp,0xc
c0005ea0:	68 60 04 00 00       	push   0x460
c0005ea5:	e8 8b 23 00 00       	call   c0008235 <ff_memalloc>
c0005eaa:	89 c6                	mov    esi,eax
c0005eac:	83 c4 10             	add    esp,0x10
c0005eaf:	b8 11 00 00 00       	mov    eax,0x11
c0005eb4:	85 f6                	test   esi,esi
c0005eb6:	74 4d                	je     c0005f05 <f_readdir+0x94>
c0005eb8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ebc:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ec2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ec5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ec8:	31 d2                	xor    edx,edx
c0005eca:	89 d8                	mov    eax,ebx
c0005ecc:	e8 df d8 ff ff       	call   c00037b0 <dir_read>
c0005ed1:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005ed6:	75 19                	jne    c0005ef1 <f_readdir+0x80>
c0005ed8:	89 fa                	mov    edx,edi
c0005eda:	89 d8                	mov    eax,ebx
c0005edc:	e8 d0 ea ff ff       	call   c00049b1 <get_fileinfo>
c0005ee1:	31 d2                	xor    edx,edx
c0005ee3:	89 d8                	mov    eax,ebx
c0005ee5:	e8 0e d6 ff ff       	call   c00034f8 <dir_next>
c0005eea:	83 f8 04             	cmp    eax,0x4
c0005eed:	75 02                	jne    c0005ef1 <f_readdir+0x80>
c0005eef:	31 c0                	xor    eax,eax
c0005ef1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005ef5:	83 ec 0c             	sub    esp,0xc
c0005ef8:	56                   	push   esi
c0005ef9:	e8 4d 23 00 00       	call   c000824b <ff_memfree>
c0005efe:	83 c4 10             	add    esp,0x10
c0005f01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f05:	83 c4 20             	add    esp,0x20
c0005f08:	5b                   	pop    ebx
c0005f09:	5e                   	pop    esi
c0005f0a:	5f                   	pop    edi
c0005f0b:	c3                   	ret    

c0005f0c <f_stat>:
c0005f0c:	57                   	push   edi
c0005f0d:	31 c9                	xor    ecx,ecx
c0005f0f:	56                   	push   esi
c0005f10:	53                   	push   ebx
c0005f11:	83 ec 50             	sub    esp,0x50
c0005f14:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f18:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f1c:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f20:	e8 ac c5 ff ff       	call   c00024d1 <mount_volume>
c0005f25:	89 c3                	mov    ebx,eax
c0005f27:	85 c0                	test   eax,eax
c0005f29:	75 67                	jne    c0005f92 <f_stat+0x86>
c0005f2b:	83 ec 0c             	sub    esp,0xc
c0005f2e:	bb 11 00 00 00       	mov    ebx,0x11
c0005f33:	68 60 04 00 00       	push   0x460
c0005f38:	e8 f8 22 00 00       	call   c0008235 <ff_memalloc>
c0005f3d:	83 c4 10             	add    esp,0x10
c0005f40:	89 c6                	mov    esi,eax
c0005f42:	85 c0                	test   eax,eax
c0005f44:	74 4c                	je     c0005f92 <f_stat+0x86>
c0005f46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f4a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f50:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f53:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f56:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f5a:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f5e:	e8 da ec ff ff       	call   c0004c3d <follow_path>
c0005f63:	89 c3                	mov    ebx,eax
c0005f65:	85 c0                	test   eax,eax
c0005f67:	75 1d                	jne    c0005f86 <f_stat+0x7a>
c0005f69:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f6e:	78 11                	js     c0005f81 <f_stat+0x75>
c0005f70:	85 ff                	test   edi,edi
c0005f72:	74 12                	je     c0005f86 <f_stat+0x7a>
c0005f74:	89 fa                	mov    edx,edi
c0005f76:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f7a:	e8 32 ea ff ff       	call   c00049b1 <get_fileinfo>
c0005f7f:	eb 05                	jmp    c0005f86 <f_stat+0x7a>
c0005f81:	bb 06 00 00 00       	mov    ebx,0x6
c0005f86:	83 ec 0c             	sub    esp,0xc
c0005f89:	56                   	push   esi
c0005f8a:	e8 bc 22 00 00       	call   c000824b <ff_memfree>
c0005f8f:	83 c4 10             	add    esp,0x10
c0005f92:	83 c4 50             	add    esp,0x50
c0005f95:	89 d8                	mov    eax,ebx
c0005f97:	5b                   	pop    ebx
c0005f98:	5e                   	pop    esi
c0005f99:	5f                   	pop    edi
c0005f9a:	c3                   	ret    

c0005f9b <f_getfree>:
c0005f9b:	55                   	push   ebp
c0005f9c:	31 c9                	xor    ecx,ecx
c0005f9e:	57                   	push   edi
c0005f9f:	56                   	push   esi
c0005fa0:	53                   	push   ebx
c0005fa1:	83 ec 5c             	sub    esp,0x5c
c0005fa4:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005fa8:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fac:	e8 20 c5 ff ff       	call   c00024d1 <mount_volume>
c0005fb1:	89 c5                	mov    ebp,eax
c0005fb3:	85 c0                	test   eax,eax
c0005fb5:	0f 85 be 01 00 00    	jne    c0006179 <f_getfree+0x1de>
c0005fbb:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005fbf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fc3:	89 02                	mov    DWORD PTR [edx],eax
c0005fc5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0005fc8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005fcb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0005fcf:	8d 73 fe             	lea    esi,[ebx-0x2]
c0005fd2:	39 f2                	cmp    edx,esi
c0005fd4:	77 0b                	ja     c0005fe1 <f_getfree+0x46>
c0005fd6:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005fda:	89 10                	mov    DWORD PTR [eax],edx
c0005fdc:	e9 98 01 00 00       	jmp    c0006179 <f_getfree+0x1de>
c0005fe1:	8a 10                	mov    dl,BYTE PTR [eax]
c0005fe3:	80 fa 01             	cmp    dl,0x1
c0005fe6:	75 3a                	jne    c0006022 <f_getfree+0x87>
c0005fe8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005fec:	be 02 00 00 00       	mov    esi,0x2
c0005ff1:	31 db                	xor    ebx,ebx
c0005ff3:	89 f2                	mov    edx,esi
c0005ff5:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005ff9:	e8 aa cd ff ff       	call   c0002da8 <get_fat>
c0005ffe:	83 f8 ff             	cmp    eax,0xffffffff
c0006001:	0f 84 51 01 00 00    	je     c0006158 <f_getfree+0x1bd>
c0006007:	83 f8 01             	cmp    eax,0x1
c000600a:	0f 84 4f 01 00 00    	je     c000615f <f_getfree+0x1c4>
c0006010:	83 d3 00             	adc    ebx,0x0
c0006013:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006017:	46                   	inc    esi
c0006018:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000601b:	77 d6                	ja     c0005ff3 <f_getfree+0x58>
c000601d:	e9 46 01 00 00       	jmp    c0006168 <f_getfree+0x1cd>
c0006022:	80 fa 04             	cmp    dl,0x4
c0006025:	0f 85 94 00 00 00    	jne    c00060bf <f_getfree+0x124>
c000602b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000602e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006031:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006035:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006039:	31 ff                	xor    edi,edi
c000603b:	31 db                	xor    ebx,ebx
c000603d:	85 ff                	test   edi,edi
c000603f:	75 3f                	jne    c0006080 <f_getfree+0xe5>
c0006041:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006045:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006049:	83 c0 01             	add    eax,0x1
c000604c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006050:	83 d2 00             	adc    edx,0x0
c0006053:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006057:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000605b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000605f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006063:	e8 be c1 ff ff       	call   c0002226 <move_window>
c0006068:	85 c0                	test   eax,eax
c000606a:	0f 85 f6 00 00 00    	jne    c0006166 <f_getfree+0x1cb>
c0006070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006074:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006078:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000607c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006080:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006084:	8a 44 38 54          	mov    al,BYTE PTR [eax+edi*1+0x54]
c0006088:	88 c2                	mov    dl,al
c000608a:	b8 08 00 00 00       	mov    eax,0x8
c000608f:	29 f0                	sub    eax,esi
c0006091:	89 c1                	mov    ecx,eax
c0006093:	01 f1                	add    ecx,esi
c0006095:	74 18                	je     c00060af <f_getfree+0x114>
c0006097:	85 f6                	test   esi,esi
c0006099:	74 14                	je     c00060af <f_getfree+0x114>
c000609b:	88 d1                	mov    cl,dl
c000609d:	83 e1 01             	and    ecx,0x1
c00060a0:	80 f9 01             	cmp    cl,0x1
c00060a3:	88 d1                	mov    cl,dl
c00060a5:	83 d3 00             	adc    ebx,0x0
c00060a8:	4e                   	dec    esi
c00060a9:	d0 e9                	shr    cl,1
c00060ab:	88 ca                	mov    dl,cl
c00060ad:	eb e2                	jmp    c0006091 <f_getfree+0xf6>
c00060af:	47                   	inc    edi
c00060b0:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00060b6:	85 f6                	test   esi,esi
c00060b8:	75 83                	jne    c000603d <f_getfree+0xa2>
c00060ba:	e9 a9 00 00 00       	jmp    c0006168 <f_getfree+0x1cd>
c00060bf:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060c2:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060c5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00060cd:	31 db                	xor    ebx,ebx
c00060cf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00060d4:	75 1b                	jne    c00060f1 <f_getfree+0x156>
c00060d6:	89 d6                	mov    esi,edx
c00060d8:	89 cf                	mov    edi,ecx
c00060da:	83 c6 01             	add    esi,0x1
c00060dd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060e1:	83 d7 00             	adc    edi,0x0
c00060e4:	e8 3d c1 ff ff       	call   c0002226 <move_window>
c00060e9:	85 c0                	test   eax,eax
c00060eb:	75 79                	jne    c0006166 <f_getfree+0x1cb>
c00060ed:	89 f2                	mov    edx,esi
c00060ef:	89 f9                	mov    ecx,edi
c00060f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00060f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060f9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00060fd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006101:	8d 44 38 54          	lea    eax,[eax+edi*1+0x54]
c0006105:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006109:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000610c:	75 15                	jne    c0006123 <f_getfree+0x188>
c000610e:	e8 3c b9 ff ff       	call   c0001a4f <ld_word>
c0006113:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0006117:	66 83 f8 01          	cmp    ax,0x1
c000611b:	83 d3 00             	adc    ebx,0x0
c000611e:	83 c6 02             	add    esi,0x2
c0006121:	eb 17                	jmp    c000613a <f_getfree+0x19f>
c0006123:	e8 34 b9 ff ff       	call   c0001a5c <ld_dword>
c0006128:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000612c:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006131:	83 f8 01             	cmp    eax,0x1
c0006134:	83 d3 00             	adc    ebx,0x0
c0006137:	83 c6 04             	add    esi,0x4
c000613a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006140:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006144:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006148:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000614c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006150:	0f 85 79 ff ff ff    	jne    c00060cf <f_getfree+0x134>
c0006156:	eb 10                	jmp    c0006168 <f_getfree+0x1cd>
c0006158:	bd 01 00 00 00       	mov    ebp,0x1
c000615d:	eb 09                	jmp    c0006168 <f_getfree+0x1cd>
c000615f:	bd 02 00 00 00       	mov    ebp,0x2
c0006164:	eb 02                	jmp    c0006168 <f_getfree+0x1cd>
c0006166:	89 c5                	mov    ebp,eax
c0006168:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000616c:	89 18                	mov    DWORD PTR [eax],ebx
c000616e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006172:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006176:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006179:	83 c4 5c             	add    esp,0x5c
c000617c:	89 e8                	mov    eax,ebp
c000617e:	5b                   	pop    ebx
c000617f:	5e                   	pop    esi
c0006180:	5f                   	pop    edi
c0006181:	5d                   	pop    ebp
c0006182:	c3                   	ret    

c0006183 <f_truncate>:
c0006183:	56                   	push   esi
c0006184:	53                   	push   ebx
c0006185:	83 ec 14             	sub    esp,0x14
c0006188:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000618c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006190:	89 d8                	mov    eax,ebx
c0006192:	e8 b4 bf ff ff       	call   c000214b <validate>
c0006197:	89 c6                	mov    esi,eax
c0006199:	85 c0                	test   eax,eax
c000619b:	0f 85 d2 00 00 00    	jne    c0006273 <f_truncate+0xf0>
c00061a1:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061a5:	85 f6                	test   esi,esi
c00061a7:	0f 85 c6 00 00 00    	jne    c0006273 <f_truncate+0xf0>
c00061ad:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061b1:	0f 84 b7 00 00 00    	je     c000626e <f_truncate+0xeb>
c00061b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061ba:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061bd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061c0:	89 d1                	mov    ecx,edx
c00061c2:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061c5:	0f 83 a8 00 00 00    	jae    c0006273 <f_truncate+0xf0>
c00061cb:	09 c2                	or     edx,eax
c00061cd:	75 15                	jne    c00061e4 <f_truncate+0x61>
c00061cf:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061d2:	31 c9                	xor    ecx,ecx
c00061d4:	89 d8                	mov    eax,ebx
c00061d6:	e8 bc d0 ff ff       	call   c0003297 <remove_chain>
c00061db:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061e2:	eb 35                	jmp    c0006219 <f_truncate+0x96>
c00061e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061e7:	89 d8                	mov    eax,ebx
c00061e9:	e8 ba cb ff ff       	call   c0002da8 <get_fat>
c00061ee:	89 c2                	mov    edx,eax
c00061f0:	b8 01 00 00 00       	mov    eax,0x1
c00061f5:	83 fa ff             	cmp    edx,0xffffffff
c00061f8:	74 1f                	je     c0006219 <f_truncate+0x96>
c00061fa:	b8 02 00 00 00       	mov    eax,0x2
c00061ff:	83 fa 01             	cmp    edx,0x1
c0006202:	74 15                	je     c0006219 <f_truncate+0x96>
c0006204:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006208:	31 c0                	xor    eax,eax
c000620a:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000620d:	76 0a                	jbe    c0006219 <f_truncate+0x96>
c000620f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006212:	89 d8                	mov    eax,ebx
c0006214:	e8 7e d0 ff ff       	call   c0003297 <remove_chain>
c0006219:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000621c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000621f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006222:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006225:	83 ca 40             	or     edx,0x40
c0006228:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000622b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000622e:	85 c0                	test   eax,eax
c0006230:	75 35                	jne    c0006267 <f_truncate+0xe4>
c0006232:	84 d2                	test   dl,dl
c0006234:	79 3d                	jns    c0006273 <f_truncate+0xf0>
c0006236:	83 ec 0c             	sub    esp,0xc
c0006239:	8d 43 50             	lea    eax,[ebx+0x50]
c000623c:	6a 01                	push   0x1
c000623e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006241:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006244:	50                   	push   eax
c0006245:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006249:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000624d:	50                   	push   eax
c000624e:	e8 c7 b7 ff ff       	call   c0001a1a <disk_write>
c0006253:	83 c4 20             	add    esp,0x20
c0006256:	85 c0                	test   eax,eax
c0006258:	75 08                	jne    c0006262 <f_truncate+0xdf>
c000625a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000625e:	31 f6                	xor    esi,esi
c0006260:	eb 11                	jmp    c0006273 <f_truncate+0xf0>
c0006262:	b8 01 00 00 00       	mov    eax,0x1
c0006267:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000626a:	89 c6                	mov    esi,eax
c000626c:	eb 05                	jmp    c0006273 <f_truncate+0xf0>
c000626e:	be 07 00 00 00       	mov    esi,0x7
c0006273:	83 c4 14             	add    esp,0x14
c0006276:	89 f0                	mov    eax,esi
c0006278:	5b                   	pop    ebx
c0006279:	5e                   	pop    esi
c000627a:	c3                   	ret    

c000627b <f_unlink>:
c000627b:	56                   	push   esi
c000627c:	b9 02 00 00 00       	mov    ecx,0x2
c0006281:	53                   	push   ebx
c0006282:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006288:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000628c:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c0006293:	e8 39 c2 ff ff       	call   c00024d1 <mount_volume>
c0006298:	85 c0                	test   eax,eax
c000629a:	0f 85 53 01 00 00    	jne    c00063f3 <f_unlink+0x178>
c00062a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062a4:	83 ec 0c             	sub    esp,0xc
c00062a7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062ab:	68 60 04 00 00       	push   0x460
c00062b0:	e8 80 1f 00 00       	call   c0008235 <ff_memalloc>
c00062b5:	89 c3                	mov    ebx,eax
c00062b7:	83 c4 10             	add    esp,0x10
c00062ba:	b8 11 00 00 00       	mov    eax,0x11
c00062bf:	85 db                	test   ebx,ebx
c00062c1:	0f 84 2c 01 00 00    	je     c00063f3 <f_unlink+0x178>
c00062c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062cb:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062d1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062d4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062d7:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062de:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062e2:	e8 56 e9 ff ff       	call   c0004c3d <follow_path>
c00062e7:	85 c0                	test   eax,eax
c00062e9:	0f 85 f0 00 00 00    	jne    c00063df <f_unlink+0x164>
c00062ef:	b8 06 00 00 00       	mov    eax,0x6
c00062f4:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c00062fc:	0f 88 dd 00 00 00    	js     c00063df <f_unlink+0x164>
c0006302:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006307:	74 0a                	je     c0006313 <f_unlink+0x98>
c0006309:	b8 07 00 00 00       	mov    eax,0x7
c000630e:	e9 cc 00 00 00       	jmp    c00063df <f_unlink+0x164>
c0006313:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006317:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000631b:	8a 02                	mov    al,BYTE PTR [edx]
c000631d:	3c 04                	cmp    al,0x4
c000631f:	75 12                	jne    c0006333 <f_unlink+0xb8>
c0006321:	8d 42 10             	lea    eax,[edx+0x10]
c0006324:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006328:	e8 d6 e8 ff ff       	call   c0004c03 <init_alloc_info.isra.2>
c000632d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006331:	eb 0e                	jmp    c0006341 <f_unlink+0xc6>
c0006333:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000633a:	e8 73 e8 ff ff       	call   c0004bb2 <ld_clust.isra.0>
c000633f:	89 c6                	mov    esi,eax
c0006341:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006346:	75 20                	jne    c0006368 <f_unlink+0xed>
c0006348:	8d 44 24 48          	lea    eax,[esp+0x48]
c000634c:	e8 d6 d6 ff ff       	call   c0003a27 <dir_remove>
c0006351:	85 c0                	test   eax,eax
c0006353:	75 7d                	jne    c00063d2 <f_unlink+0x157>
c0006355:	85 f6                	test   esi,esi
c0006357:	74 79                	je     c00063d2 <f_unlink+0x157>
c0006359:	31 c9                	xor    ecx,ecx
c000635b:	89 f2                	mov    edx,esi
c000635d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006361:	e8 31 cf ff ff       	call   c0003297 <remove_chain>
c0006366:	eb 6a                	jmp    c00063d2 <f_unlink+0x157>
c0006368:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000636c:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006373:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c000637a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000637d:	75 21                	jne    c00063a0 <f_unlink+0x125>
c000637f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006383:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006387:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000638e:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006392:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006399:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063a0:	31 d2                	xor    edx,edx
c00063a2:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063a9:	e8 f0 cb ff ff       	call   c0002f9e <dir_sdi>
c00063ae:	85 c0                	test   eax,eax
c00063b0:	75 2d                	jne    c00063df <f_unlink+0x164>
c00063b2:	31 d2                	xor    edx,edx
c00063b4:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063bb:	e8 f0 d3 ff ff       	call   c00037b0 <dir_read>
c00063c0:	85 c0                	test   eax,eax
c00063c2:	0f 84 41 ff ff ff    	je     c0006309 <f_unlink+0x8e>
c00063c8:	83 f8 04             	cmp    eax,0x4
c00063cb:	75 12                	jne    c00063df <f_unlink+0x164>
c00063cd:	e9 76 ff ff ff       	jmp    c0006348 <f_unlink+0xcd>
c00063d2:	85 c0                	test   eax,eax
c00063d4:	75 09                	jne    c00063df <f_unlink+0x164>
c00063d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063da:	e8 55 df ff ff       	call   c0004334 <sync_fs>
c00063df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063e3:	83 ec 0c             	sub    esp,0xc
c00063e6:	53                   	push   ebx
c00063e7:	e8 5f 1e 00 00       	call   c000824b <ff_memfree>
c00063ec:	83 c4 10             	add    esp,0x10
c00063ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063f3:	81 c4 e4 00 00 00    	add    esp,0xe4
c00063f9:	5b                   	pop    ebx
c00063fa:	5e                   	pop    esi
c00063fb:	c3                   	ret    

c00063fc <f_mkdir>:
c00063fc:	57                   	push   edi
c00063fd:	b9 02 00 00 00       	mov    ecx,0x2
c0006402:	56                   	push   esi
c0006403:	53                   	push   ebx
c0006404:	83 c4 80             	add    esp,0xffffff80
c0006407:	8d 54 24 08          	lea    edx,[esp+0x8]
c000640b:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006412:	e8 ba c0 ff ff       	call   c00024d1 <mount_volume>
c0006417:	89 c3                	mov    ebx,eax
c0006419:	85 c0                	test   eax,eax
c000641b:	0f 85 fe 01 00 00    	jne    c000661f <f_mkdir+0x223>
c0006421:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006425:	83 ec 0c             	sub    esp,0xc
c0006428:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000642c:	bb 11 00 00 00       	mov    ebx,0x11
c0006431:	68 60 04 00 00       	push   0x460
c0006436:	e8 fa 1d 00 00       	call   c0008235 <ff_memalloc>
c000643b:	83 c4 10             	add    esp,0x10
c000643e:	89 c7                	mov    edi,eax
c0006440:	85 c0                	test   eax,eax
c0006442:	0f 84 d7 01 00 00    	je     c000661f <f_mkdir+0x223>
c0006448:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000644c:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006452:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006455:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006458:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000645f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006463:	e8 d5 e7 ff ff       	call   c0004c3d <follow_path>
c0006468:	89 c3                	mov    ebx,eax
c000646a:	85 c0                	test   eax,eax
c000646c:	74 3e                	je     c00064ac <f_mkdir+0xb0>
c000646e:	83 f8 04             	cmp    eax,0x4
c0006471:	75 3e                	jne    c00064b1 <f_mkdir+0xb5>
c0006473:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006477:	31 d2                	xor    edx,edx
c0006479:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000647d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006481:	e8 10 cc ff ff       	call   c0003096 <create_chain>
c0006486:	89 c6                	mov    esi,eax
c0006488:	85 c0                	test   eax,eax
c000648a:	74 0c                	je     c0006498 <f_mkdir+0x9c>
c000648c:	bb 02 00 00 00       	mov    ebx,0x2
c0006491:	83 f8 01             	cmp    eax,0x1
c0006494:	74 07                	je     c000649d <f_mkdir+0xa1>
c0006496:	eb 2a                	jmp    c00064c2 <f_mkdir+0xc6>
c0006498:	bb 07 00 00 00       	mov    ebx,0x7
c000649d:	31 c9                	xor    ecx,ecx
c000649f:	89 f2                	mov    edx,esi
c00064a1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064a5:	e8 ed cd ff ff       	call   c0003297 <remove_chain>
c00064aa:	eb 05                	jmp    c00064b1 <f_mkdir+0xb5>
c00064ac:	bb 08 00 00 00       	mov    ebx,0x8
c00064b1:	83 ec 0c             	sub    esp,0xc
c00064b4:	57                   	push   edi
c00064b5:	e8 91 1d 00 00       	call   c000824b <ff_memfree>
c00064ba:	83 c4 10             	add    esp,0x10
c00064bd:	e9 5d 01 00 00       	jmp    c000661f <f_mkdir+0x223>
c00064c2:	bb 01 00 00 00       	mov    ebx,0x1
c00064c7:	83 f8 ff             	cmp    eax,0xffffffff
c00064ca:	74 d1                	je     c000649d <f_mkdir+0xa1>
c00064cc:	89 f2                	mov    edx,esi
c00064ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d2:	e8 08 cf ff ff       	call   c00033df <dir_clear>
c00064d7:	89 c3                	mov    ebx,eax
c00064d9:	85 c0                	test   eax,eax
c00064db:	75 c0                	jne    c000649d <f_mkdir+0xa1>
c00064dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064e4:	74 69                	je     c000654f <f_mkdir+0x153>
c00064e6:	b9 0b 00 00 00       	mov    ecx,0xb
c00064eb:	83 c0 54             	add    eax,0x54
c00064ee:	ba 20 00 00 00       	mov    edx,0x20
c00064f3:	e8 eb b5 ff ff       	call   c0001ae3 <mem_set>
c00064f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064fc:	83 c0 6a             	add    eax,0x6a
c00064ff:	c6 40 ea 2e          	mov    BYTE PTR [eax-0x16],0x2e
c0006503:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0006507:	ba 00 00 21 50       	mov    edx,0x50210000
c000650c:	e8 b4 b5 ff ff       	call   c0001ac5 <st_dword>
c0006511:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006515:	89 f1                	mov    ecx,esi
c0006517:	8d 50 54             	lea    edx,[eax+0x54]
c000651a:	e8 bc e6 ff ff       	call   c0004bdb <st_clust.isra.1>
c000651f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006523:	b9 20 00 00 00       	mov    ecx,0x20
c0006528:	8d 50 54             	lea    edx,[eax+0x54]
c000652b:	83 c0 74             	add    eax,0x74
c000652e:	e8 9b b5 ff ff       	call   c0001ace <mem_cpy>
c0006533:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006537:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000653b:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000653f:	8d 50 74             	lea    edx,[eax+0x74]
c0006542:	e8 94 e6 ff ff       	call   c0004bdb <st_clust.isra.1>
c0006547:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000654f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006553:	e8 59 db ff ff       	call   c00040b1 <dir_register>
c0006558:	89 c3                	mov    ebx,eax
c000655a:	85 c0                	test   eax,eax
c000655c:	0f 85 3b ff ff ff    	jne    c000649d <f_mkdir+0xa1>
c0006562:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006566:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006569:	75 74                	jne    c00065df <f_mkdir+0x1e3>
c000656b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000656e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006573:	83 c0 0c             	add    eax,0xc
c0006576:	e8 4a b5 ff ff       	call   c0001ac5 <st_dword>
c000657b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000657f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006582:	89 f2                	mov    edx,esi
c0006584:	83 c0 34             	add    eax,0x34
c0006587:	e8 39 b5 ff ff       	call   c0001ac5 <st_dword>
c000658c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006590:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006594:	c1 e2 09             	shl    edx,0x9
c0006597:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000659a:	83 c0 38             	add    eax,0x38
c000659d:	e8 23 b5 ff ff       	call   c0001ac5 <st_dword>
c00065a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a6:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065aa:	c1 e2 09             	shl    edx,0x9
c00065ad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065b0:	83 c0 28             	add    eax,0x28
c00065b3:	e8 0d b5 ff ff       	call   c0001ac5 <st_dword>
c00065b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065bc:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065bf:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065c3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065c6:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065ca:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065ce:	e8 cf d3 ff ff       	call   c00039a2 <store_xdir>
c00065d3:	89 c3                	mov    ebx,eax
c00065d5:	85 c0                	test   eax,eax
c00065d7:	0f 85 d4 fe ff ff    	jne    c00064b1 <f_mkdir+0xb5>
c00065dd:	eb 30                	jmp    c000660f <f_mkdir+0x213>
c00065df:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065e3:	ba 00 00 21 50       	mov    edx,0x50210000
c00065e8:	83 c0 16             	add    eax,0x16
c00065eb:	e8 d5 b4 ff ff       	call   c0001ac5 <st_dword>
c00065f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065f4:	89 f1                	mov    ecx,esi
c00065f6:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c00065fa:	e8 dc e5 ff ff       	call   c0004bdb <st_clust.isra.1>
c00065ff:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006603:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006607:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000660b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000660f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006613:	e8 1c dd ff ff       	call   c0004334 <sync_fs>
c0006618:	89 c3                	mov    ebx,eax
c000661a:	e9 92 fe ff ff       	jmp    c00064b1 <f_mkdir+0xb5>
c000661f:	83 ec 80             	sub    esp,0xffffff80
c0006622:	89 d8                	mov    eax,ebx
c0006624:	5b                   	pop    ebx
c0006625:	5e                   	pop    esi
c0006626:	5f                   	pop    edi
c0006627:	c3                   	ret    

c0006628 <f_rename>:
c0006628:	55                   	push   ebp
c0006629:	57                   	push   edi
c000662a:	56                   	push   esi
c000662b:	53                   	push   ebx
c000662c:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006632:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006639:	e8 f3 b9 ff ff       	call   c0002031 <get_ldnumber>
c000663e:	b9 02 00 00 00       	mov    ecx,0x2
c0006643:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006647:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c000664e:	e8 7e be ff ff       	call   c00024d1 <mount_volume>
c0006653:	85 c0                	test   eax,eax
c0006655:	0f 85 b5 02 00 00    	jne    c0006910 <f_rename+0x2e8>
c000665b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000665f:	83 ec 0c             	sub    esp,0xc
c0006662:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006666:	68 60 04 00 00       	push   0x460
c000666b:	e8 c5 1b 00 00       	call   c0008235 <ff_memalloc>
c0006670:	89 c3                	mov    ebx,eax
c0006672:	83 c4 10             	add    esp,0x10
c0006675:	b8 11 00 00 00       	mov    eax,0x11
c000667a:	85 db                	test   ebx,ebx
c000667c:	0f 84 8e 02 00 00    	je     c0006910 <f_rename+0x2e8>
c0006682:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006686:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000668c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000668f:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006692:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006699:	8d 44 24 58          	lea    eax,[esp+0x58]
c000669d:	e8 9b e5 ff ff       	call   c0004c3d <follow_path>
c00066a2:	85 c0                	test   eax,eax
c00066a4:	0f 85 52 02 00 00    	jne    c00068fc <f_rename+0x2d4>
c00066aa:	b8 06 00 00 00       	mov    eax,0x6
c00066af:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066b7:	0f 85 3f 02 00 00    	jne    c00068fc <f_rename+0x2d4>
c00066bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c4:	0f 85 05 01 00 00    	jne    c00067cf <f_rename+0x1a7>
c00066ca:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066cd:	b9 40 00 00 00       	mov    ecx,0x40
c00066d2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066d6:	e8 f3 b3 ff ff       	call   c0001ace <mem_cpy>
c00066db:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066e0:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066e4:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066eb:	e8 de b3 ff ff       	call   c0001ace <mem_cpy>
c00066f0:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00066f7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066fe:	e8 3a e5 ff ff       	call   c0004c3d <follow_path>
c0006703:	85 c0                	test   eax,eax
c0006705:	75 29                	jne    c0006730 <f_rename+0x108>
c0006707:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000670b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006712:	74 0a                	je     c000671e <f_rename+0xf6>
c0006714:	b8 08 00 00 00       	mov    eax,0x8
c0006719:	e9 de 01 00 00       	jmp    c00068fc <f_rename+0x2d4>
c000671e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006725:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000672c:	75 e6                	jne    c0006714 <f_rename+0xec>
c000672e:	eb 09                	jmp    c0006739 <f_rename+0x111>
c0006730:	83 f8 04             	cmp    eax,0x4
c0006733:	0f 85 c3 01 00 00    	jne    c00068fc <f_rename+0x2d4>
c0006739:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006740:	e8 6c d9 ff ff       	call   c00040b1 <dir_register>
c0006745:	85 c0                	test   eax,eax
c0006747:	0f 85 af 01 00 00    	jne    c00068fc <f_rename+0x2d4>
c000674d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006751:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006754:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006757:	89 c5                	mov    ebp,eax
c0006759:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000675c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006760:	8d 46 24             	lea    eax,[esi+0x24]
c0006763:	e8 e7 b2 ff ff       	call   c0001a4f <ld_word>
c0006768:	b9 40 00 00 00       	mov    ecx,0x40
c000676d:	89 c7                	mov    edi,eax
c000676f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006773:	89 f0                	mov    eax,esi
c0006775:	e8 54 b3 ff ff       	call   c0001ace <mem_cpy>
c000677a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000677e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006781:	89 e9                	mov    ecx,ebp
c0006783:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006786:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c000678a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000678e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006791:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006794:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006797:	83 c0 24             	add    eax,0x24
c000679a:	0f b7 d7             	movzx  edx,di
c000679d:	e8 1f b3 ff ff       	call   c0001ac1 <st_word>
c00067a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067a6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067a9:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067ac:	a8 10                	test   al,0x10
c00067ae:	75 06                	jne    c00067b6 <f_rename+0x18e>
c00067b0:	83 c8 20             	or     eax,0x20
c00067b3:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067b6:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067bd:	e8 e0 d1 ff ff       	call   c00039a2 <store_xdir>
c00067c2:	85 c0                	test   eax,eax
c00067c4:	0f 84 1c 01 00 00    	je     c00068e6 <f_rename+0x2be>
c00067ca:	e9 2d 01 00 00       	jmp    c00068fc <f_rename+0x2d4>
c00067cf:	b9 20 00 00 00       	mov    ecx,0x20
c00067d4:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067db:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067df:	e8 ea b2 ff ff       	call   c0001ace <mem_cpy>
c00067e4:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067e9:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067ed:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067f4:	e8 d5 b2 ff ff       	call   c0001ace <mem_cpy>
c00067f9:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006800:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006807:	e8 31 e4 ff ff       	call   c0004c3d <follow_path>
c000680c:	85 c0                	test   eax,eax
c000680e:	75 27                	jne    c0006837 <f_rename+0x20f>
c0006810:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006814:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000681b:	0f 85 f3 fe ff ff    	jne    c0006714 <f_rename+0xec>
c0006821:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006828:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000682f:	0f 85 df fe ff ff    	jne    c0006714 <f_rename+0xec>
c0006835:	eb 09                	jmp    c0006840 <f_rename+0x218>
c0006837:	83 f8 04             	cmp    eax,0x4
c000683a:	0f 85 bc 00 00 00    	jne    c00068fc <f_rename+0x2d4>
c0006840:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006847:	e8 65 d8 ff ff       	call   c00040b1 <dir_register>
c000684c:	85 c0                	test   eax,eax
c000684e:	0f 85 a8 00 00 00    	jne    c00068fc <f_rename+0x2d4>
c0006854:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000685b:	b9 13 00 00 00       	mov    ecx,0x13
c0006860:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006864:	8d 46 0d             	lea    eax,[esi+0xd]
c0006867:	e8 62 b2 ff ff       	call   c0001ace <mem_cpy>
c000686c:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006870:	a8 10                	test   al,0x10
c0006872:	75 03                	jne    c0006877 <f_rename+0x24f>
c0006874:	83 c8 20             	or     eax,0x20
c0006877:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c000687a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000687e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006882:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006886:	74 5e                	je     c00068e6 <f_rename+0x2be>
c0006888:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c000688f:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006893:	74 51                	je     c00068e6 <f_rename+0x2be>
c0006895:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006899:	89 f2                	mov    edx,esi
c000689b:	8a 07                	mov    al,BYTE PTR [edi]
c000689d:	e8 10 e3 ff ff       	call   c0004bb2 <ld_clust.isra.0>
c00068a2:	89 c2                	mov    edx,eax
c00068a4:	89 f8                	mov    eax,edi
c00068a6:	e8 3d b4 ff ff       	call   c0001ce8 <clst2sect>
c00068ab:	89 c6                	mov    esi,eax
c00068ad:	89 d1                	mov    ecx,edx
c00068af:	b8 02 00 00 00       	mov    eax,0x2
c00068b4:	09 f2                	or     edx,esi
c00068b6:	74 44                	je     c00068fc <f_rename+0x2d4>
c00068b8:	89 f2                	mov    edx,esi
c00068ba:	89 f8                	mov    eax,edi
c00068bc:	e8 65 b9 ff ff       	call   c0002226 <move_window>
c00068c1:	85 c0                	test   eax,eax
c00068c3:	75 37                	jne    c00068fc <f_rename+0x2d4>
c00068c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c9:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068cd:	75 17                	jne    c00068e6 <f_rename+0x2be>
c00068cf:	8d 50 74             	lea    edx,[eax+0x74]
c00068d2:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068d9:	e8 fd e2 ff ff       	call   c0004bdb <st_clust.isra.1>
c00068de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068e6:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068ea:	e8 38 d1 ff ff       	call   c0003a27 <dir_remove>
c00068ef:	85 c0                	test   eax,eax
c00068f1:	75 09                	jne    c00068fc <f_rename+0x2d4>
c00068f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f7:	e8 38 da ff ff       	call   c0004334 <sync_fs>
c00068fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006900:	83 ec 0c             	sub    esp,0xc
c0006903:	53                   	push   ebx
c0006904:	e8 42 19 00 00       	call   c000824b <ff_memfree>
c0006909:	83 c4 10             	add    esp,0x10
c000690c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006910:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006916:	5b                   	pop    ebx
c0006917:	5e                   	pop    esi
c0006918:	5f                   	pop    edi
c0006919:	5d                   	pop    ebp
c000691a:	c3                   	ret    

c000691b <f_chmod>:
c000691b:	57                   	push   edi
c000691c:	b9 02 00 00 00       	mov    ecx,0x2
c0006921:	56                   	push   esi
c0006922:	53                   	push   ebx
c0006923:	83 ec 60             	sub    esp,0x60
c0006926:	8d 54 24 10          	lea    edx,[esp+0x10]
c000692a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000692e:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006932:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006936:	e8 96 bb ff ff       	call   c00024d1 <mount_volume>
c000693b:	85 c0                	test   eax,eax
c000693d:	0f 85 af 00 00 00    	jne    c00069f2 <f_chmod+0xd7>
c0006943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006947:	83 ec 0c             	sub    esp,0xc
c000694a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000694e:	68 60 04 00 00       	push   0x460
c0006953:	e8 dd 18 00 00       	call   c0008235 <ff_memalloc>
c0006958:	89 c6                	mov    esi,eax
c000695a:	83 c4 10             	add    esp,0x10
c000695d:	b8 11 00 00 00       	mov    eax,0x11
c0006962:	85 f6                	test   esi,esi
c0006964:	0f 84 88 00 00 00    	je     c00069f2 <f_chmod+0xd7>
c000696a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000696e:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006974:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006977:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000697a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000697e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006982:	e8 b6 e2 ff ff       	call   c0004c3d <follow_path>
c0006987:	85 c0                	test   eax,eax
c0006989:	75 53                	jne    c00069de <f_chmod+0xc3>
c000698b:	b8 06 00 00 00       	mov    eax,0x6
c0006990:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006995:	75 47                	jne    c00069de <f_chmod+0xc3>
c0006997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000699b:	89 f9                	mov    ecx,edi
c000699d:	83 e1 27             	and    ecx,0x27
c00069a0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069a3:	75 1d                	jne    c00069c2 <f_chmod+0xa7>
c00069a5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069a8:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069ab:	21 cb                	and    ebx,ecx
c00069ad:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069b0:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069b3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069b7:	e8 e6 cf ff ff       	call   c00039a2 <store_xdir>
c00069bc:	85 c0                	test   eax,eax
c00069be:	75 1e                	jne    c00069de <f_chmod+0xc3>
c00069c0:	eb 13                	jmp    c00069d5 <f_chmod+0xba>
c00069c2:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069c6:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069c9:	21 cb                	and    ebx,ecx
c00069cb:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069ce:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069d1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069d9:	e8 56 d9 ff ff       	call   c0004334 <sync_fs>
c00069de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069e2:	83 ec 0c             	sub    esp,0xc
c00069e5:	56                   	push   esi
c00069e6:	e8 60 18 00 00       	call   c000824b <ff_memfree>
c00069eb:	83 c4 10             	add    esp,0x10
c00069ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00069f2:	83 c4 60             	add    esp,0x60
c00069f5:	5b                   	pop    ebx
c00069f6:	5e                   	pop    esi
c00069f7:	5f                   	pop    edi
c00069f8:	c3                   	ret    

c00069f9 <f_utime>:
c00069f9:	56                   	push   esi
c00069fa:	b9 02 00 00 00       	mov    ecx,0x2
c00069ff:	53                   	push   ebx
c0006a00:	83 ec 64             	sub    esp,0x64
c0006a03:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a07:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a0b:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a0f:	e8 bd ba ff ff       	call   c00024d1 <mount_volume>
c0006a14:	85 c0                	test   eax,eax
c0006a16:	0f 85 b5 00 00 00    	jne    c0006ad1 <f_utime+0xd8>
c0006a1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a20:	83 ec 0c             	sub    esp,0xc
c0006a23:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a27:	68 60 04 00 00       	push   0x460
c0006a2c:	e8 04 18 00 00       	call   c0008235 <ff_memalloc>
c0006a31:	89 c3                	mov    ebx,eax
c0006a33:	83 c4 10             	add    esp,0x10
c0006a36:	b8 11 00 00 00       	mov    eax,0x11
c0006a3b:	85 db                	test   ebx,ebx
c0006a3d:	0f 84 8e 00 00 00    	je     c0006ad1 <f_utime+0xd8>
c0006a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a47:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a4d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a50:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a53:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a5b:	e8 dd e1 ff ff       	call   c0004c3d <follow_path>
c0006a60:	85 c0                	test   eax,eax
c0006a62:	75 59                	jne    c0006abd <f_utime+0xc4>
c0006a64:	b8 06 00 00 00       	mov    eax,0x6
c0006a69:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a6e:	75 4d                	jne    c0006abd <f_utime+0xc4>
c0006a70:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a78:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a7c:	c1 e2 10             	shl    edx,0x10
c0006a7f:	09 ca                	or     edx,ecx
c0006a81:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a84:	75 1a                	jne    c0006aa0 <f_utime+0xa7>
c0006a86:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a89:	83 c0 0c             	add    eax,0xc
c0006a8c:	e8 34 b0 ff ff       	call   c0001ac5 <st_dword>
c0006a91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a95:	e8 08 cf ff ff       	call   c00039a2 <store_xdir>
c0006a9a:	85 c0                	test   eax,eax
c0006a9c:	75 1f                	jne    c0006abd <f_utime+0xc4>
c0006a9e:	eb 14                	jmp    c0006ab4 <f_utime+0xbb>
c0006aa0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aa4:	83 c0 16             	add    eax,0x16
c0006aa7:	e8 19 b0 ff ff       	call   c0001ac5 <st_dword>
c0006aac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab8:	e8 77 d8 ff ff       	call   c0004334 <sync_fs>
c0006abd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ac1:	83 ec 0c             	sub    esp,0xc
c0006ac4:	53                   	push   ebx
c0006ac5:	e8 81 17 00 00       	call   c000824b <ff_memfree>
c0006aca:	83 c4 10             	add    esp,0x10
c0006acd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ad1:	83 c4 64             	add    esp,0x64
c0006ad4:	5b                   	pop    ebx
c0006ad5:	5e                   	pop    esi
c0006ad6:	c3                   	ret    

c0006ad7 <f_getlabel>:
c0006ad7:	55                   	push   ebp
c0006ad8:	31 c9                	xor    ecx,ecx
c0006ada:	57                   	push   edi
c0006adb:	56                   	push   esi
c0006adc:	53                   	push   ebx
c0006add:	83 ec 6c             	sub    esp,0x6c
c0006ae0:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006ae4:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006aeb:	e8 e1 b9 ff ff       	call   c00024d1 <mount_volume>
c0006af0:	89 c3                	mov    ebx,eax
c0006af2:	85 c0                	test   eax,eax
c0006af4:	0f 85 73 01 00 00    	jne    c0006c6d <f_getlabel+0x196>
c0006afa:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b02:	0f 84 65 01 00 00    	je     c0006c6d <f_getlabel+0x196>
c0006b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b0c:	31 d2                	xor    edx,edx
c0006b0e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b12:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b16:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b1e:	e8 7b c4 ff ff       	call   c0002f9e <dir_sdi>
c0006b23:	89 c3                	mov    ebx,eax
c0006b25:	85 c0                	test   eax,eax
c0006b27:	0f 85 2f 01 00 00    	jne    c0006c5c <f_getlabel+0x185>
c0006b2d:	ba 01 00 00 00       	mov    edx,0x1
c0006b32:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b36:	e8 75 cc ff ff       	call   c00037b0 <dir_read>
c0006b3b:	89 c3                	mov    ebx,eax
c0006b3d:	85 c0                	test   eax,eax
c0006b3f:	0f 85 17 01 00 00    	jne    c0006c5c <f_getlabel+0x185>
c0006b45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b49:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b4c:	74 09                	je     c0006b57 <f_getlabel+0x80>
c0006b4e:	31 f6                	xor    esi,esi
c0006b50:	31 c9                	xor    ecx,ecx
c0006b52:	e9 c8 00 00 00       	jmp    c0006c1f <f_getlabel+0x148>
c0006b57:	31 ed                	xor    ebp,ebp
c0006b59:	31 f6                	xor    esi,esi
c0006b5b:	31 ff                	xor    edi,edi
c0006b5d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b65:	39 fa                	cmp    edx,edi
c0006b67:	76 4b                	jbe    c0006bb4 <f_getlabel+0xdd>
c0006b69:	47                   	inc    edi
c0006b6a:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b6d:	01 d0                	add    eax,edx
c0006b6f:	e8 db ae ff ff       	call   c0001a4f <ld_word>
c0006b74:	66 85 ed             	test   bp,bp
c0006b77:	75 0d                	jne    c0006b86 <f_getlabel+0xaf>
c0006b79:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b7f:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b84:	76 28                	jbe    c0006bae <f_getlabel+0xd7>
c0006b86:	89 e9                	mov    ecx,ebp
c0006b88:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b8f:	c1 e1 10             	shl    ecx,0x10
c0006b92:	01 f2                	add    edx,esi
c0006b94:	0f b7 c0             	movzx  eax,ax
c0006b97:	09 c8                	or     eax,ecx
c0006b99:	b9 04 00 00 00       	mov    ecx,0x4
c0006b9e:	e8 4c b0 ff ff       	call   c0001bef <put_utf>
c0006ba3:	84 c0                	test   al,al
c0006ba5:	74 0b                	je     c0006bb2 <f_getlabel+0xdb>
c0006ba7:	0f b6 c0             	movzx  eax,al
c0006baa:	01 c6                	add    esi,eax
c0006bac:	31 c0                	xor    eax,eax
c0006bae:	89 c5                	mov    ebp,eax
c0006bb0:	eb ab                	jmp    c0006b5d <f_getlabel+0x86>
c0006bb2:	31 f6                	xor    esi,esi
c0006bb4:	66 85 ed             	test   bp,bp
c0006bb7:	74 02                	je     c0006bbb <f_getlabel+0xe4>
c0006bb9:	31 f6                	xor    esi,esi
c0006bbb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bc2:	c6 04 30 00          	mov    BYTE PTR [eax+esi*1],0x0
c0006bc6:	e9 a2 00 00 00       	jmp    c0006c6d <f_getlabel+0x196>
c0006bcb:	83 ff 0b             	cmp    edi,0xb
c0006bce:	74 11                	je     c0006be1 <f_getlabel+0x10a>
c0006bd0:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006bd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006bd9:	8d 79 02             	lea    edi,[ecx+0x2]
c0006bdc:	c1 e0 08             	shl    eax,0x8
c0006bdf:	09 c2                	or     edx,eax
c0006be1:	50                   	push   eax
c0006be2:	50                   	push   eax
c0006be3:	68 b5 01 00 00       	push   0x1b5
c0006be8:	0f b7 d2             	movzx  edx,dx
c0006beb:	52                   	push   edx
c0006bec:	e8 07 17 00 00       	call   c00082f8 <ff_oem2uni>
c0006bf1:	83 c4 10             	add    esp,0x10
c0006bf4:	66 85 c0             	test   ax,ax
c0006bf7:	74 46                	je     c0006c3f <f_getlabel+0x168>
c0006bf9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c00:	b9 04 00 00 00       	mov    ecx,0x4
c0006c05:	01 f2                	add    edx,esi
c0006c07:	0f b7 c0             	movzx  eax,ax
c0006c0a:	e8 e0 af ff ff       	call   c0001bef <put_utf>
c0006c0f:	84 c0                	test   al,al
c0006c11:	74 2c                	je     c0006c3f <f_getlabel+0x168>
c0006c13:	0f b6 c0             	movzx  eax,al
c0006c16:	01 c6                	add    esi,eax
c0006c18:	83 ff 0b             	cmp    edi,0xb
c0006c1b:	74 24                	je     c0006c41 <f_getlabel+0x16a>
c0006c1d:	89 f9                	mov    ecx,edi
c0006c1f:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c23:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c26:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c2b:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c34:	e8 ea ae ff ff       	call   c0001b23 <dbc_1st>
c0006c39:	85 c0                	test   eax,eax
c0006c3b:	74 a4                	je     c0006be1 <f_getlabel+0x10a>
c0006c3d:	eb 8c                	jmp    c0006bcb <f_getlabel+0xf4>
c0006c3f:	31 f6                	xor    esi,esi
c0006c41:	03 b4 24 84 00 00 00 	add    esi,DWORD PTR [esp+0x84]
c0006c48:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0006c4b:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
c0006c52:	74 19                	je     c0006c6d <f_getlabel+0x196>
c0006c54:	4e                   	dec    esi
c0006c55:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c0006c58:	74 ee                	je     c0006c48 <f_getlabel+0x171>
c0006c5a:	eb 11                	jmp    c0006c6d <f_getlabel+0x196>
c0006c5c:	83 fb 04             	cmp    ebx,0x4
c0006c5f:	75 0c                	jne    c0006c6d <f_getlabel+0x196>
c0006c61:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c68:	31 db                	xor    ebx,ebx
c0006c6a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c6d:	85 db                	test   ebx,ebx
c0006c6f:	75 50                	jne    c0006cc1 <f_getlabel+0x1ea>
c0006c71:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c79:	74 46                	je     c0006cc1 <f_getlabel+0x1ea>
c0006c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c7f:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c82:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c85:	e8 9c b5 ff ff       	call   c0002226 <move_window>
c0006c8a:	89 c3                	mov    ebx,eax
c0006c8c:	85 c0                	test   eax,eax
c0006c8e:	75 31                	jne    c0006cc1 <f_getlabel+0x1ea>
c0006c90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c94:	b8 43 00 00 00       	mov    eax,0x43
c0006c99:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c9b:	80 f9 03             	cmp    cl,0x3
c0006c9e:	74 0f                	je     c0006caf <f_getlabel+0x1d8>
c0006ca0:	31 c0                	xor    eax,eax
c0006ca2:	80 f9 04             	cmp    cl,0x4
c0006ca5:	0f 94 c0             	sete   al
c0006ca8:	48                   	dec    eax
c0006ca9:	83 e0 c3             	and    eax,0xffffffc3
c0006cac:	83 c0 64             	add    eax,0x64
c0006caf:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cb3:	e8 a4 ad ff ff       	call   c0001a5c <ld_dword>
c0006cb8:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cbf:	89 07                	mov    DWORD PTR [edi],eax
c0006cc1:	83 c4 6c             	add    esp,0x6c
c0006cc4:	89 d8                	mov    eax,ebx
c0006cc6:	5b                   	pop    ebx
c0006cc7:	5e                   	pop    esi
c0006cc8:	5f                   	pop    edi
c0006cc9:	5d                   	pop    ebp
c0006cca:	c3                   	ret    

c0006ccb <f_setlabel>:
c0006ccb:	56                   	push   esi
c0006ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0006cd1:	53                   	push   ebx
c0006cd2:	83 ec 74             	sub    esp,0x74
c0006cd5:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006cd9:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006ce0:	e8 ec b7 ff ff       	call   c00024d1 <mount_volume>
c0006ce5:	89 c6                	mov    esi,eax
c0006ce7:	85 c0                	test   eax,eax
c0006ce9:	0f 85 41 02 00 00    	jne    c0006f30 <f_setlabel+0x265>
c0006cef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006cf3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cf6:	0f 85 8e 00 00 00    	jne    c0006d8a <f_setlabel+0xbf>
c0006cfc:	b9 16 00 00 00       	mov    ecx,0x16
c0006d01:	31 d2                	xor    edx,edx
c0006d03:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d07:	31 db                	xor    ebx,ebx
c0006d09:	e8 d5 ad ff ff       	call   c0001ae3 <mem_set>
c0006d0e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d15:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d18:	0f 86 0a 01 00 00    	jbe    c0006e28 <f_setlabel+0x15d>
c0006d1e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d25:	e8 ff ad ff ff       	call   c0001b29 <tchar2uni>
c0006d2a:	89 c6                	mov    esi,eax
c0006d2c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d31:	76 2a                	jbe    c0006d5d <f_setlabel+0x92>
c0006d33:	83 f8 ff             	cmp    eax,0xffffffff
c0006d36:	74 05                	je     c0006d3d <f_setlabel+0x72>
c0006d38:	83 fb 09             	cmp    ebx,0x9
c0006d3b:	76 0a                	jbe    c0006d47 <f_setlabel+0x7c>
c0006d3d:	be 06 00 00 00       	mov    esi,0x6
c0006d42:	e9 e9 01 00 00       	jmp    c0006f30 <f_setlabel+0x265>
c0006d47:	89 c2                	mov    edx,eax
c0006d49:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d4d:	c1 ea 10             	shr    edx,0x10
c0006d50:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d53:	01 c8                	add    eax,ecx
c0006d55:	43                   	inc    ebx
c0006d56:	e8 66 ad ff ff       	call   c0001ac1 <st_word>
c0006d5b:	eb 04                	jmp    c0006d61 <f_setlabel+0x96>
c0006d5d:	85 c0                	test   eax,eax
c0006d5f:	74 dc                	je     c0006d3d <f_setlabel+0x72>
c0006d61:	89 f2                	mov    edx,esi
c0006d63:	b8 97 04 02 c0       	mov    eax,0xc0020497
c0006d68:	e8 a4 ad ff ff       	call   c0001b11 <chk_chr>
c0006d6d:	85 c0                	test   eax,eax
c0006d6f:	75 cc                	jne    c0006d3d <f_setlabel+0x72>
c0006d71:	83 fb 0a             	cmp    ebx,0xa
c0006d74:	77 c7                	ja     c0006d3d <f_setlabel+0x72>
c0006d76:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d79:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d7d:	0f b7 d6             	movzx  edx,si
c0006d80:	01 c8                	add    eax,ecx
c0006d82:	43                   	inc    ebx
c0006d83:	e8 39 ad ff ff       	call   c0001ac1 <st_word>
c0006d88:	eb 84                	jmp    c0006d0e <f_setlabel+0x43>
c0006d8a:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d8f:	ba 20 00 00 00       	mov    edx,0x20
c0006d94:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d98:	31 db                	xor    ebx,ebx
c0006d9a:	e8 44 ad ff ff       	call   c0001ae3 <mem_set>
c0006d9f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006da6:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006da9:	76 60                	jbe    c0006e0b <f_setlabel+0x140>
c0006dab:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006db2:	e8 72 ad ff ff       	call   c0001b29 <tchar2uni>
c0006db7:	3d ff ff 00 00       	cmp    eax,0xffff
c0006dbc:	0f 87 7b ff ff ff    	ja     c0006d3d <f_setlabel+0x72>
c0006dc2:	83 ec 0c             	sub    esp,0xc
c0006dc5:	50                   	push   eax
c0006dc6:	e8 9c 15 00 00       	call   c0008367 <ff_wtoupper>
c0006dcb:	5a                   	pop    edx
c0006dcc:	59                   	pop    ecx
c0006dcd:	68 b5 01 00 00       	push   0x1b5
c0006dd2:	50                   	push   eax
c0006dd3:	e8 8a 14 00 00       	call   c0008262 <ff_uni2oem>
c0006dd8:	83 c4 10             	add    esp,0x10
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	66 85 c0             	test   ax,ax
c0006de0:	0f 84 57 ff ff ff    	je     c0006d3d <f_setlabel+0x72>
c0006de6:	0f b7 d0             	movzx  edx,ax
c0006de9:	b8 90 04 02 c0       	mov    eax,0xc0020490
c0006dee:	e8 1e ad ff ff       	call   c0001b11 <chk_chr>
c0006df3:	85 c0                	test   eax,eax
c0006df5:	0f 85 42 ff ff ff    	jne    c0006d3d <f_setlabel+0x72>
c0006dfb:	66 81 fe ff 00       	cmp    si,0xff
c0006e00:	0f 87 14 01 00 00    	ja     c0006f1a <f_setlabel+0x24f>
c0006e06:	e9 fa 00 00 00       	jmp    c0006f05 <f_setlabel+0x23a>
c0006e0b:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e10:	0f 84 27 ff ff ff    	je     c0006d3d <f_setlabel+0x72>
c0006e16:	85 db                	test   ebx,ebx
c0006e18:	74 0e                	je     c0006e28 <f_setlabel+0x15d>
c0006e1a:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e1d:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e22:	75 04                	jne    c0006e28 <f_setlabel+0x15d>
c0006e24:	89 c3                	mov    ebx,eax
c0006e26:	eb ee                	jmp    c0006e16 <f_setlabel+0x14b>
c0006e28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e2c:	31 d2                	xor    edx,edx
c0006e2e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e32:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e36:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e3e:	e8 5b c1 ff ff       	call   c0002f9e <dir_sdi>
c0006e43:	89 c6                	mov    esi,eax
c0006e45:	85 c0                	test   eax,eax
c0006e47:	0f 85 e3 00 00 00    	jne    c0006f30 <f_setlabel+0x265>
c0006e4d:	ba 01 00 00 00       	mov    edx,0x1
c0006e52:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e56:	e8 55 c9 ff ff       	call   c00037b0 <dir_read>
c0006e5b:	85 c0                	test   eax,eax
c0006e5d:	75 21                	jne    c0006e80 <f_setlabel+0x1b5>
c0006e5f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e63:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e67:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e6a:	74 5d                	je     c0006ec9 <f_setlabel+0x1fe>
c0006e6c:	85 db                	test   ebx,ebx
c0006e6e:	74 0b                	je     c0006e7b <f_setlabel+0x1b0>
c0006e70:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e75:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e79:	eb 70                	jmp    c0006eeb <f_setlabel+0x220>
c0006e7b:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e7e:	eb 70                	jmp    c0006ef0 <f_setlabel+0x225>
c0006e80:	83 f8 04             	cmp    eax,0x4
c0006e83:	75 7c                	jne    c0006f01 <f_setlabel+0x236>
c0006e85:	85 db                	test   ebx,ebx
c0006e87:	0f 84 a3 00 00 00    	je     c0006f30 <f_setlabel+0x265>
c0006e8d:	ba 01 00 00 00       	mov    edx,0x1
c0006e92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e96:	e8 8f ca ff ff       	call   c000392a <dir_alloc>
c0006e9b:	89 c6                	mov    esi,eax
c0006e9d:	85 c0                	test   eax,eax
c0006e9f:	0f 85 8b 00 00 00    	jne    c0006f30 <f_setlabel+0x265>
c0006ea5:	31 d2                	xor    edx,edx
c0006ea7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eab:	b9 20 00 00 00       	mov    ecx,0x20
c0006eb0:	e8 2e ac ff ff       	call   c0001ae3 <mem_set>
c0006eb5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eb9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ebc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ec0:	75 18                	jne    c0006eda <f_setlabel+0x20f>
c0006ec2:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ec5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ec9:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ecc:	b9 16 00 00 00       	mov    ecx,0x16
c0006ed1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed5:	83 c0 02             	add    eax,0x2
c0006ed8:	eb 9b                	jmp    c0006e75 <f_setlabel+0x1aa>
c0006eda:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006ede:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee3:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ee7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eeb:	e8 de ab ff ff       	call   c0001ace <mem_cpy>
c0006ef0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ef8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006efc:	e8 33 d4 ff ff       	call   c0004334 <sync_fs>
c0006f01:	89 c6                	mov    esi,eax
c0006f03:	eb 2b                	jmp    c0006f30 <f_setlabel+0x265>
c0006f05:	83 fb 0a             	cmp    ebx,0xa
c0006f08:	0f 87 2f fe ff ff    	ja     c0006d3d <f_setlabel+0x72>
c0006f0e:	89 f0                	mov    eax,esi
c0006f10:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f14:	43                   	inc    ebx
c0006f15:	e9 85 fe ff ff       	jmp    c0006d9f <f_setlabel+0xd4>
c0006f1a:	83 fb 09             	cmp    ebx,0x9
c0006f1d:	0f 87 1a fe ff ff    	ja     c0006d3d <f_setlabel+0x72>
c0006f23:	89 f0                	mov    eax,esi
c0006f25:	66 c1 e8 08          	shr    ax,0x8
c0006f29:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f2d:	43                   	inc    ebx
c0006f2e:	eb de                	jmp    c0006f0e <f_setlabel+0x243>
c0006f30:	83 c4 74             	add    esp,0x74
c0006f33:	89 f0                	mov    eax,esi
c0006f35:	5b                   	pop    ebx
c0006f36:	5e                   	pop    esi
c0006f37:	c3                   	ret    

c0006f38 <f_forward>:
c0006f38:	55                   	push   ebp
c0006f39:	57                   	push   edi
c0006f3a:	56                   	push   esi
c0006f3b:	53                   	push   ebx
c0006f3c:	83 ec 2c             	sub    esp,0x2c
c0006f3f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f43:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f47:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f4b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f51:	89 d8                	mov    eax,ebx
c0006f53:	e8 f3 b1 ff ff       	call   c000214b <validate>
c0006f58:	89 c5                	mov    ebp,eax
c0006f5a:	85 c0                	test   eax,eax
c0006f5c:	0f 85 aa 01 00 00    	jne    c000710c <f_forward+0x1d4>
c0006f62:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f66:	85 ed                	test   ebp,ebp
c0006f68:	0f 85 9e 01 00 00    	jne    c000710c <f_forward+0x1d4>
c0006f6e:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f72:	0f 84 8f 01 00 00    	je     c0007107 <f_forward+0x1cf>
c0006f78:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f7b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f7e:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f81:	bf 00 00 00 00       	mov    edi,0x0
c0006f86:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f89:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f8d:	89 d1                	mov    ecx,edx
c0006f8f:	19 f9                	sbb    ecx,edi
c0006f91:	0f 83 cf 00 00 00    	jae    c0007066 <f_forward+0x12e>
c0006f97:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f9b:	e9 c6 00 00 00       	jmp    c0007066 <f_forward+0x12e>
c0006fa0:	50                   	push   eax
c0006fa1:	50                   	push   eax
c0006fa2:	6a 00                	push   0x0
c0006fa4:	6a 00                	push   0x0
c0006fa6:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006faa:	83 c4 10             	add    esp,0x10
c0006fad:	85 c0                	test   eax,eax
c0006faf:	0f 84 57 01 00 00    	je     c000710c <f_forward+0x1d4>
c0006fb5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fb9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fbc:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fbf:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fc3:	89 d7                	mov    edi,edx
c0006fc5:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fc8:	89 c6                	mov    esi,eax
c0006fca:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fce:	21 ce                	and    esi,ecx
c0006fd0:	89 c1                	mov    ecx,eax
c0006fd2:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fd8:	0f 84 98 00 00 00    	je     c0007076 <f_forward+0x13e>
c0006fde:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fe2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006fe5:	89 c8                	mov    eax,ecx
c0006fe7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006feb:	e8 f8 ac ff ff       	call   c0001ce8 <clst2sect>
c0006ff0:	89 d7                	mov    edi,edx
c0006ff2:	09 c7                	or     edi,eax
c0006ff4:	0f 84 9e 00 00 00    	je     c0007098 <f_forward+0x160>
c0006ffa:	31 ff                	xor    edi,edi
c0006ffc:	01 c6                	add    esi,eax
c0006ffe:	11 d7                	adc    edi,edx
c0007000:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007003:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007006:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000700a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000700d:	39 fa                	cmp    edx,edi
c000700f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007013:	0f 85 a2 00 00 00    	jne    c00070bb <f_forward+0x183>
c0007019:	39 f0                	cmp    eax,esi
c000701b:	0f 85 9a 00 00 00    	jne    c00070bb <f_forward+0x183>
c0007021:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007024:	ba 00 02 00 00       	mov    edx,0x200
c0007029:	25 ff 01 00 00       	and    eax,0x1ff
c000702e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007032:	29 c2                	sub    edx,eax
c0007034:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007037:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000703a:	39 d1                	cmp    ecx,edx
c000703c:	76 02                	jbe    c0007040 <f_forward+0x108>
c000703e:	89 d1                	mov    ecx,edx
c0007040:	52                   	push   edx
c0007041:	8d 73 50             	lea    esi,[ebx+0x50]
c0007044:	52                   	push   edx
c0007045:	01 c6                	add    esi,eax
c0007047:	51                   	push   ecx
c0007048:	56                   	push   esi
c0007049:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000704d:	83 c4 10             	add    esp,0x10
c0007050:	85 c0                	test   eax,eax
c0007052:	74 44                	je     c0007098 <f_forward+0x160>
c0007054:	31 ff                	xor    edi,edi
c0007056:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007059:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000705c:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007060:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007064:	01 07                	add    DWORD PTR [edi],eax
c0007066:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000706b:	0f 85 2f ff ff ff    	jne    c0006fa0 <f_forward+0x68>
c0007071:	e9 96 00 00 00       	jmp    c000710c <f_forward+0x1d4>
c0007076:	85 f6                	test   esi,esi
c0007078:	0f 85 60 ff ff ff    	jne    c0006fde <f_forward+0xa6>
c000707e:	89 d7                	mov    edi,edx
c0007080:	09 c7                	or     edi,eax
c0007082:	75 05                	jne    c0007089 <f_forward+0x151>
c0007084:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007087:	eb 0a                	jmp    c0007093 <f_forward+0x15b>
c0007089:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000708c:	89 d8                	mov    eax,ebx
c000708e:	e8 15 bd ff ff       	call   c0002da8 <get_fat>
c0007093:	83 f8 01             	cmp    eax,0x1
c0007096:	77 0b                	ja     c00070a3 <f_forward+0x16b>
c0007098:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000709c:	bd 02 00 00 00       	mov    ebp,0x2
c00070a1:	eb 69                	jmp    c000710c <f_forward+0x1d4>
c00070a3:	83 f8 ff             	cmp    eax,0xffffffff
c00070a6:	75 0b                	jne    c00070b3 <f_forward+0x17b>
c00070a8:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070ac:	bd 01 00 00 00       	mov    ebp,0x1
c00070b1:	eb 59                	jmp    c000710c <f_forward+0x1d4>
c00070b3:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070b6:	e9 23 ff ff ff       	jmp    c0006fde <f_forward+0xa6>
c00070bb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070bf:	79 20                	jns    c00070e1 <f_forward+0x1a9>
c00070c1:	83 ec 0c             	sub    esp,0xc
c00070c4:	6a 01                	push   0x1
c00070c6:	52                   	push   edx
c00070c7:	50                   	push   eax
c00070c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070cc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070d0:	50                   	push   eax
c00070d1:	e8 44 a9 ff ff       	call   c0001a1a <disk_write>
c00070d6:	83 c4 20             	add    esp,0x20
c00070d9:	85 c0                	test   eax,eax
c00070db:	75 cb                	jne    c00070a8 <f_forward+0x170>
c00070dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070e1:	83 ec 0c             	sub    esp,0xc
c00070e4:	6a 01                	push   0x1
c00070e6:	57                   	push   edi
c00070e7:	56                   	push   esi
c00070e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070f4:	50                   	push   eax
c00070f5:	e8 0a a9 ff ff       	call   c0001a04 <disk_read>
c00070fa:	83 c4 20             	add    esp,0x20
c00070fd:	85 c0                	test   eax,eax
c00070ff:	0f 84 1c ff ff ff    	je     c0007021 <f_forward+0xe9>
c0007105:	eb a1                	jmp    c00070a8 <f_forward+0x170>
c0007107:	bd 07 00 00 00       	mov    ebp,0x7
c000710c:	83 c4 2c             	add    esp,0x2c
c000710f:	89 e8                	mov    eax,ebp
c0007111:	5b                   	pop    ebx
c0007112:	5e                   	pop    esi
c0007113:	5f                   	pop    edi
c0007114:	5d                   	pop    ebp
c0007115:	c3                   	ret    

c0007116 <f_mkfs>:
c0007116:	55                   	push   ebp
c0007117:	57                   	push   edi
c0007118:	56                   	push   esi
c0007119:	53                   	push   ebx
c000711a:	bb 0b 00 00 00       	mov    ebx,0xb
c000711f:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007125:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000712c:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007133:	e8 f9 ae ff ff       	call   c0002031 <get_ldnumber>
c0007138:	85 c0                	test   eax,eax
c000713a:	0f 88 e8 10 00 00    	js     c0008228 <f_mkfs+0x1112>
c0007140:	8b 14 85 40 47 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb8c0]
c0007147:	85 d2                	test   edx,edx
c0007149:	74 03                	je     c000714e <f_mkfs+0x38>
c000714b:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000714e:	85 f6                	test   esi,esi
c0007150:	75 05                	jne    c0007157 <f_mkfs+0x41>
c0007152:	be 80 04 02 c0       	mov    esi,0xc0020480
c0007157:	0f b6 c0             	movzx  eax,al
c000715a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000715e:	83 ec 0c             	sub    esp,0xc
c0007161:	bb 03 00 00 00       	mov    ebx,0x3
c0007166:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000716a:	e8 92 a8 ff ff       	call   c0001a01 <disk_initialize>
c000716f:	83 c4 10             	add    esp,0x10
c0007172:	a8 01                	test   al,0x1
c0007174:	0f 85 ae 10 00 00    	jne    c0008228 <f_mkfs+0x1112>
c000717a:	bb 0a 00 00 00       	mov    ebx,0xa
c000717f:	a8 04                	test   al,0x4
c0007181:	0f 85 a1 10 00 00    	jne    c0008228 <f_mkfs+0x1112>
c0007187:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000718a:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000718e:	85 c0                	test   eax,eax
c0007190:	75 20                	jne    c00071b2 <f_mkfs+0x9c>
c0007192:	51                   	push   ecx
c0007193:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007197:	50                   	push   eax
c0007198:	6a 03                	push   0x3
c000719a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719e:	e8 8d a8 ff ff       	call   c0001a30 <disk_ioctl>
c00071a3:	83 c4 10             	add    esp,0x10
c00071a6:	85 c0                	test   eax,eax
c00071a8:	74 08                	je     c00071b2 <f_mkfs+0x9c>
c00071aa:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071b2:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071b6:	8d 42 ff             	lea    eax,[edx-0x1]
c00071b9:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071be:	77 04                	ja     c00071c4 <f_mkfs+0xae>
c00071c0:	85 c2                	test   edx,eax
c00071c2:	74 08                	je     c00071cc <f_mkfs+0xb6>
c00071c4:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071cc:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071cf:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c00071d3:	48                   	dec    eax
c00071d4:	3c 01                	cmp    al,0x1
c00071d6:	76 05                	jbe    c00071dd <f_mkfs+0xc7>
c00071d8:	c6 44 24 40 01       	mov    BYTE PTR [esp+0x40],0x1
c00071dd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071e0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071e4:	48                   	dec    eax
c00071e5:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071ea:	77 07                	ja     c00071f3 <f_mkfs+0xdd>
c00071ec:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071f1:	74 08                	je     c00071fb <f_mkfs+0xe5>
c00071f3:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c00071fb:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00071fe:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007204:	77 07                	ja     c000720d <f_mkfs+0xf7>
c0007206:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007209:	85 d8                	test   eax,ebx
c000720b:	74 02                	je     c000720f <f_mkfs+0xf9>
c000720d:	31 db                	xor    ebx,ebx
c000720f:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000721a:	77 0a                	ja     c0007226 <f_mkfs+0x110>
c000721c:	bb 11 00 00 00       	mov    ebx,0x11
c0007221:	e9 02 10 00 00       	jmp    c0008228 <f_mkfs+0x1112>
c0007226:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000722d:	8b 36                	mov    esi,DWORD PTR [esi]
c000722f:	85 ed                	test   ebp,ebp
c0007231:	75 1e                	jne    c0007251 <f_mkfs+0x13b>
c0007233:	83 ec 0c             	sub    esp,0xc
c0007236:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000723d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007242:	50                   	push   eax
c0007243:	e8 ed 0f 00 00       	call   c0008235 <ff_memalloc>
c0007248:	83 c4 10             	add    esp,0x10
c000724b:	89 c5                	mov    ebp,eax
c000724d:	85 c0                	test   eax,eax
c000724f:	74 cb                	je     c000721c <f_mkfs+0x106>
c0007251:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007259:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007261:	52                   	push   edx
c0007262:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007266:	50                   	push   eax
c0007267:	6a 01                	push   0x1
c0007269:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000726d:	e8 be a7 ff ff       	call   c0001a30 <disk_ioctl>
c0007272:	83 c4 10             	add    esp,0x10
c0007275:	85 c0                	test   eax,eax
c0007277:	0f 85 46 0f 00 00    	jne    c00081c3 <f_mkfs+0x10ad>
c000727d:	89 f1                	mov    ecx,esi
c000727f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007287:	83 e1 0f             	and    ecx,0xf
c000728a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007292:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007296:	83 e6 08             	and    esi,0x8
c0007299:	75 56                	jne    c00072f1 <f_mkfs+0x1db>
c000729b:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000729f:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072a3:	83 ff 00             	cmp    edi,0x0
c00072a6:	76 20                	jbe    c00072c8 <f_mkfs+0x1b2>
c00072a8:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072ad:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072b3:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072bb:	83 d7 ff             	adc    edi,0xffffffff
c00072be:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072c2:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072c6:	eb 21                	jmp    c00072e9 <f_mkfs+0x1d3>
c00072c8:	ba 3f 00 00 00       	mov    edx,0x3f
c00072cd:	39 f2                	cmp    edx,esi
c00072cf:	19 f8                	sbb    eax,edi
c00072d1:	73 1e                	jae    c00072f1 <f_mkfs+0x1db>
c00072d3:	83 c6 c1             	add    esi,0xffffffc1
c00072d6:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072de:	83 d7 ff             	adc    edi,0xffffffff
c00072e1:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072e5:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072e9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072f1:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00072f5:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00072f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00072fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007300:	ba 7f 00 00 00       	mov    edx,0x7f
c0007305:	31 c0                	xor    eax,eax
c0007307:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000730a:	89 c7                	mov    edi,eax
c000730c:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007310:	0f 83 c1 0a 00 00    	jae    c0007dd7 <f_mkfs+0xcc1>
c0007316:	89 df                	mov    edi,ebx
c0007318:	c1 ef 09             	shr    edi,0x9
c000731b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000731f:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007326:	c1 ef 09             	shr    edi,0x9
c0007329:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000732e:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007332:	74 29                	je     c000735d <f_mkfs+0x247>
c0007334:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007339:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000733f:	0f 97 c2             	seta   dl
c0007342:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007345:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007349:	0f 92 c0             	setb   al
c000734c:	08 c2                	or     dl,al
c000734e:	75 5b                	jne    c00073ab <f_mkfs+0x295>
c0007350:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007354:	83 e0 07             	and    eax,0x7
c0007357:	3c 04                	cmp    al,0x4
c0007359:	74 50                	je     c00073ab <f_mkfs+0x295>
c000735b:	eb 1b                	jmp    c0007378 <f_mkfs+0x262>
c000735d:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007362:	0f 87 6f 0a 00 00    	ja     c0007dd7 <f_mkfs+0xcc1>
c0007368:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000736e:	76 08                	jbe    c0007378 <f_mkfs+0x262>
c0007370:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007378:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000737c:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007380:	83 e0 01             	and    eax,0x1
c0007383:	80 e1 02             	and    cl,0x2
c0007386:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c000738a:	74 0d                	je     c0007399 <f_mkfs+0x283>
c000738c:	84 c0                	test   al,al
c000738e:	0f 84 4f 09 00 00    	je     c0007ce3 <f_mkfs+0xbcd>
c0007394:	e9 0e 08 00 00       	jmp    c0007ba7 <f_mkfs+0xa91>
c0007399:	bb 13 00 00 00       	mov    ebx,0x13
c000739e:	84 c0                	test   al,al
c00073a0:	0f 85 01 08 00 00    	jne    c0007ba7 <f_mkfs+0xa91>
c00073a6:	e9 35 0e 00 00       	jmp    c00081e0 <f_mkfs+0x10ca>
c00073ab:	ba ff 0f 00 00       	mov    edx,0xfff
c00073b0:	31 c0                	xor    eax,eax
c00073b2:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073b5:	89 c7                	mov    edi,eax
c00073b7:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073bb:	0f 83 16 0a 00 00    	jae    c0007dd7 <f_mkfs+0xcc1>
c00073c1:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073c7:	77 39                	ja     c0007402 <f_mkfs+0x2ec>
c00073c9:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073ce:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073d6:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073d9:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073dd:	73 08                	jae    c00073e7 <f_mkfs+0x2d1>
c00073df:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073e7:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073ec:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073ef:	b8 00 00 00 00       	mov    eax,0x0
c00073f4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073f8:	73 08                	jae    c0007402 <f_mkfs+0x2ec>
c00073fa:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007406:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000740a:	83 c0 20             	add    eax,0x20
c000740d:	83 d2 00             	adc    edx,0x0
c0007410:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007414:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007418:	31 d2                	xor    edx,edx
c000741a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000741e:	52                   	push   edx
c000741f:	50                   	push   eax
c0007420:	31 ff                	xor    edi,edi
c0007422:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007426:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000742a:	e8 dd 80 01 00       	call   c001f50c <__udivdi3>
c000742f:	83 c4 10             	add    esp,0x10
c0007432:	c1 e0 02             	shl    eax,0x2
c0007435:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007439:	05 07 02 00 00       	add    eax,0x207
c000743e:	89 f1                	mov    ecx,esi
c0007440:	c1 e8 09             	shr    eax,0x9
c0007443:	89 fb                	mov    ebx,edi
c0007445:	83 c1 ff             	add    ecx,0xffffffff
c0007448:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000744c:	83 d3 ff             	adc    ebx,0xffffffff
c000744f:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0007453:	13 5c 24 44          	adc    ebx,DWORD PTR [esp+0x44]
c0007457:	31 d2                	xor    edx,edx
c0007459:	01 c8                	add    eax,ecx
c000745b:	11 da                	adc    edx,ebx
c000745d:	89 c1                	mov    ecx,eax
c000745f:	f7 de                	neg    esi
c0007461:	83 d7 00             	adc    edi,0x0
c0007464:	21 f1                	and    ecx,esi
c0007466:	f7 df                	neg    edi
c0007468:	89 d0                	mov    eax,edx
c000746a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000746e:	21 f8                	and    eax,edi
c0007470:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007474:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007478:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000747c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007480:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007484:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007488:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000748b:	0f ac d0 01          	shrd   eax,edx,0x1
c000748f:	d1 ea                	shr    edx,1
c0007491:	89 df                	mov    edi,ebx
c0007493:	39 c1                	cmp    ecx,eax
c0007495:	19 d7                	sbb    edi,edx
c0007497:	0f 83 3a 09 00 00    	jae    c0007dd7 <f_mkfs+0xcc1>
c000749d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074a1:	31 d2                	xor    edx,edx
c00074a3:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074ab:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074af:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074b2:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074b6:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074ba:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074be:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074c2:	83 f8 0f             	cmp    eax,0xf
c00074c5:	0f 86 0c 09 00 00    	jbe    c0007dd7 <f_mkfs+0xcc1>
c00074cb:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074d3:	0f 87 fe 08 00 00    	ja     c0007dd7 <f_mkfs+0xcc1>
c00074d9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074dd:	31 d2                	xor    edx,edx
c00074df:	83 c0 07             	add    eax,0x7
c00074e2:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074ea:	c1 e8 03             	shr    eax,0x3
c00074ed:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074f5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00074f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074fd:	c1 e0 09             	shl    eax,0x9
c0007500:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007507:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000750b:	48                   	dec    eax
c000750c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007510:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
c0007514:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007518:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000751c:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007523:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007527:	31 d2                	xor    edx,edx
c0007529:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000752e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007532:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007536:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000753a:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000753e:	31 ff                	xor    edi,edi
c0007540:	31 f6                	xor    esi,esi
c0007542:	31 db                	xor    ebx,ebx
c0007544:	85 ff                	test   edi,edi
c0007546:	74 05                	je     c000754d <f_mkfs+0x437>
c0007548:	4f                   	dec    edi
c0007549:	74 44                	je     c000758f <f_mkfs+0x479>
c000754b:	eb 4f                	jmp    c000759c <f_mkfs+0x486>
c000754d:	83 ec 0c             	sub    esp,0xc
c0007550:	0f b7 c3             	movzx  eax,bx
c0007553:	50                   	push   eax
c0007554:	e8 0e 0e 00 00       	call   c0008367 <ff_wtoupper>
c0007559:	83 c4 10             	add    esp,0x10
c000755c:	89 c1                	mov    ecx,eax
c000755e:	66 39 c3             	cmp    bx,ax
c0007561:	8d 53 01             	lea    edx,[ebx+0x1]
c0007564:	75 3e                	jne    c00075a4 <f_mkfs+0x48e>
c0007566:	be 01 00 00 00       	mov    esi,0x1
c000756b:	89 df                	mov    edi,ebx
c000756d:	66 01 f7             	add    di,si
c0007570:	75 07                	jne    c0007579 <f_mkfs+0x463>
c0007572:	83 fe 7f             	cmp    esi,0x7f
c0007575:	77 31                	ja     c00075a8 <f_mkfs+0x492>
c0007577:	eb 16                	jmp    c000758f <f_mkfs+0x479>
c0007579:	83 ec 0c             	sub    esp,0xc
c000757c:	0f b7 ff             	movzx  edi,di
c000757f:	57                   	push   edi
c0007580:	e8 e2 0d 00 00       	call   c0008367 <ff_wtoupper>
c0007585:	83 c4 10             	add    esp,0x10
c0007588:	39 c7                	cmp    edi,eax
c000758a:	75 e6                	jne    c0007572 <f_mkfs+0x45c>
c000758c:	46                   	inc    esi
c000758d:	eb dc                	jmp    c000756b <f_mkfs+0x455>
c000758f:	31 c0                	xor    eax,eax
c0007591:	4e                   	dec    esi
c0007592:	0f 95 c0             	setne  al
c0007595:	89 d9                	mov    ecx,ebx
c0007597:	89 c7                	mov    edi,eax
c0007599:	43                   	inc    ebx
c000759a:	eb 14                	jmp    c00075b0 <f_mkfs+0x49a>
c000759c:	89 f1                	mov    ecx,esi
c000759e:	01 f3                	add    ebx,esi
c00075a0:	31 ff                	xor    edi,edi
c00075a2:	eb 0c                	jmp    c00075b0 <f_mkfs+0x49a>
c00075a4:	89 d3                	mov    ebx,edx
c00075a6:	eb 08                	jmp    c00075b0 <f_mkfs+0x49a>
c00075a8:	bf 02 00 00 00       	mov    edi,0x2
c00075ad:	83 c9 ff             	or     ecx,0xffffffff
c00075b0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075b3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075b7:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075bb:	0f b6 c1             	movzx  eax,cl
c00075be:	e8 87 a9 ff ff       	call   c0001f4a <xsum32>
c00075c3:	66 c1 e9 08          	shr    cx,0x8
c00075c7:	89 c2                	mov    edx,eax
c00075c9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075cc:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075d0:	0f b7 c1             	movzx  eax,cx
c00075d3:	e8 72 a9 ff ff       	call   c0001f4a <xsum32>
c00075d8:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075dd:	66 85 db             	test   bx,bx
c00075e0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075e4:	74 1f                	je     c0007605 <f_mkfs+0x4ef>
c00075e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075e9:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075f0:	83 c0 02             	add    eax,0x2
c00075f3:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c00075f9:	39 c2                	cmp    edx,eax
c00075fb:	74 08                	je     c0007605 <f_mkfs+0x4ef>
c00075fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0007600:	e9 3f ff ff ff       	jmp    c0007544 <f_mkfs+0x42e>
c0007605:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007608:	83 ec 0c             	sub    esp,0xc
c000760b:	05 01 02 00 00       	add    eax,0x201
c0007610:	c1 e8 09             	shr    eax,0x9
c0007613:	50                   	push   eax
c0007614:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007618:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000761c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007620:	55                   	push   ebp
c0007621:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007625:	e8 f0 a3 ff ff       	call   c0001a1a <disk_write>
c000762a:	83 c4 20             	add    esp,0x20
c000762d:	85 c0                	test   eax,eax
c000762f:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007632:	0f 85 8b 0b 00 00    	jne    c00081c3 <f_mkfs+0x10ad>
c0007638:	89 d0                	mov    eax,edx
c000763a:	31 d2                	xor    edx,edx
c000763c:	01 44 24 48          	add    DWORD PTR [esp+0x48],eax
c0007640:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007644:	66 85 db             	test   bx,bx
c0007647:	74 04                	je     c000764d <f_mkfs+0x537>
c0007649:	31 c0                	xor    eax,eax
c000764b:	eb b0                	jmp    c00075fd <f_mkfs+0x4e7>
c000764d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007651:	31 d2                	xor    edx,edx
c0007653:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007657:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000765b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000765f:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007666:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000766a:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007670:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007674:	8d 70 01             	lea    esi,[eax+0x1]
c0007677:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000767f:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000768a:	c1 eb 09             	shr    ebx,0x9
c000768d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007691:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007695:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c000769c:	31 d2                	xor    edx,edx
c000769e:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00076a6:	89 c1                	mov    ecx,eax
c00076a8:	89 e8                	mov    eax,ebp
c00076aa:	e8 34 a4 ff ff       	call   c0001ae3 <mem_set>
c00076af:	31 c0                	xor    eax,eax
c00076b1:	83 fe 07             	cmp    esi,0x7
c00076b4:	76 10                	jbe    c00076c6 <f_mkfs+0x5b0>
c00076b6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076b9:	76 0b                	jbe    c00076c6 <f_mkfs+0x5b0>
c00076bb:	40                   	inc    eax
c00076bc:	83 ee 08             	sub    esi,0x8
c00076bf:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076c4:	eb eb                	jmp    c00076b1 <f_mkfs+0x59b>
c00076c6:	b2 01                	mov    dl,0x1
c00076c8:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076cc:	85 f6                	test   esi,esi
c00076ce:	74 0c                	je     c00076dc <f_mkfs+0x5c6>
c00076d0:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076d3:	76 07                	jbe    c00076dc <f_mkfs+0x5c6>
c00076d5:	08 11                	or     BYTE PTR [ecx],dl
c00076d7:	4e                   	dec    esi
c00076d8:	01 d2                	add    edx,edx
c00076da:	eb f0                	jmp    c00076cc <f_mkfs+0x5b6>
c00076dc:	89 df                	mov    edi,ebx
c00076de:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076e2:	76 04                	jbe    c00076e8 <f_mkfs+0x5d2>
c00076e4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076e8:	83 ec 0c             	sub    esp,0xc
c00076eb:	57                   	push   edi
c00076ec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076f0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076f4:	55                   	push   ebp
c00076f5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00076f9:	e8 1c a3 ff ff       	call   c0001a1a <disk_write>
c00076fe:	83 c4 20             	add    esp,0x20
c0007701:	85 c0                	test   eax,eax
c0007703:	0f 85 ba 0a 00 00    	jne    c00081c3 <f_mkfs+0x10ad>
c0007709:	31 d2                	xor    edx,edx
c000770b:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000770f:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007713:	29 fb                	sub    ebx,edi
c0007715:	0f 85 7a ff ff ff    	jne    c0007695 <f_mkfs+0x57f>
c000771b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000771f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007727:	31 f6                	xor    esi,esi
c0007729:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000772d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007730:	31 d2                	xor    edx,edx
c0007732:	89 e8                	mov    eax,ebp
c0007734:	e8 aa a3 ff ff       	call   c0001ae3 <mem_set>
c0007739:	31 c9                	xor    ecx,ecx
c000773b:	85 db                	test   ebx,ebx
c000773d:	75 40                	jne    c000777f <f_mkfs+0x669>
c000773f:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007744:	89 e8                	mov    eax,ebp
c0007746:	e8 7a a3 ff ff       	call   c0001ac5 <st_dword>
c000774b:	8d 45 04             	lea    eax,[ebp+0x4]
c000774e:	83 ca ff             	or     edx,0xffffffff
c0007751:	bb 02 00 00 00       	mov    ebx,0x2
c0007756:	e8 6a a3 ff ff       	call   c0001ac5 <st_dword>
c000775b:	b9 08 00 00 00       	mov    ecx,0x8
c0007760:	eb 1d                	jmp    c000777f <f_mkfs+0x669>
c0007762:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007765:	76 3b                	jbe    c00077a2 <f_mkfs+0x68c>
c0007767:	43                   	inc    ebx
c0007768:	83 fe 01             	cmp    esi,0x1
c000776b:	89 da                	mov    edx,ebx
c000776d:	77 03                	ja     c0007772 <f_mkfs+0x65c>
c000776f:	83 ca ff             	or     edx,0xffffffff
c0007772:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007776:	4e                   	dec    esi
c0007777:	e8 49 a3 ff ff       	call   c0001ac5 <st_dword>
c000777c:	83 c1 04             	add    ecx,0x4
c000777f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007783:	85 f6                	test   esi,esi
c0007785:	75 db                	jne    c0007762 <f_mkfs+0x64c>
c0007787:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000778c:	77 14                	ja     c00077a2 <f_mkfs+0x68c>
c000778e:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007795:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007799:	85 f6                	test   esi,esi
c000779b:	74 05                	je     c00077a2 <f_mkfs+0x68c>
c000779d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077a0:	77 dd                	ja     c000777f <f_mkfs+0x669>
c00077a2:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00077a6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077aa:	39 cf                	cmp    edi,ecx
c00077ac:	76 02                	jbe    c00077b0 <f_mkfs+0x69a>
c00077ae:	89 cf                	mov    edi,ecx
c00077b0:	83 ec 0c             	sub    esp,0xc
c00077b3:	57                   	push   edi
c00077b4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077b8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077bc:	55                   	push   ebp
c00077bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077c1:	e8 54 a2 ff ff       	call   c0001a1a <disk_write>
c00077c6:	83 c4 20             	add    esp,0x20
c00077c9:	85 c0                	test   eax,eax
c00077cb:	0f 85 f2 09 00 00    	jne    c00081c3 <f_mkfs+0x10ad>
c00077d1:	31 d2                	xor    edx,edx
c00077d3:	01 7c 24 40          	add    DWORD PTR [esp+0x40],edi
c00077d7:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00077db:	29 7c 24 50          	sub    DWORD PTR [esp+0x50],edi
c00077df:	0f 85 48 ff ff ff    	jne    c000772d <f_mkfs+0x617>
c00077e5:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077e8:	31 d2                	xor    edx,edx
c00077ea:	89 e8                	mov    eax,ebp
c00077ec:	31 ff                	xor    edi,edi
c00077ee:	e8 f0 a2 ff ff       	call   c0001ae3 <mem_set>
c00077f3:	8d 45 34             	lea    eax,[ebp+0x34]
c00077f6:	ba 02 00 00 00       	mov    edx,0x2
c00077fb:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c00077ff:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007803:	e8 bd a2 ff ff       	call   c0001ac5 <st_dword>
c0007808:	8d 45 38             	lea    eax,[ebp+0x38]
c000780b:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000780f:	e8 b1 a2 ff ff       	call   c0001ac5 <st_dword>
c0007814:	8d 45 44             	lea    eax,[ebp+0x44]
c0007817:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000781b:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c000781f:	e8 a1 a2 ff ff       	call   c0001ac5 <st_dword>
c0007824:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007828:	8d 45 54             	lea    eax,[ebp+0x54]
c000782b:	83 c2 02             	add    edx,0x2
c000782e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007832:	e8 8e a2 ff ff       	call   c0001ac5 <st_dword>
c0007837:	8d 45 58             	lea    eax,[ebp+0x58]
c000783a:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000783e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007842:	e8 7e a2 ff ff       	call   c0001ac5 <st_dword>
c0007847:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000784b:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c0007850:	89 c6                	mov    esi,eax
c0007852:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007856:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000785a:	89 04 24             	mov    DWORD PTR [esp],eax
c000785d:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007861:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007864:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007868:	39 cb                	cmp    ebx,ecx
c000786a:	76 02                	jbe    c000786e <f_mkfs+0x758>
c000786c:	89 cb                	mov    ebx,ecx
c000786e:	83 ec 0c             	sub    esp,0xc
c0007871:	53                   	push   ebx
c0007872:	57                   	push   edi
c0007873:	56                   	push   esi
c0007874:	55                   	push   ebp
c0007875:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007879:	e8 9c a1 ff ff       	call   c0001a1a <disk_write>
c000787e:	83 c4 20             	add    esp,0x20
c0007881:	85 c0                	test   eax,eax
c0007883:	0f 85 3a 09 00 00    	jne    c00081c3 <f_mkfs+0x10ad>
c0007889:	31 d2                	xor    edx,edx
c000788b:	b9 00 02 00 00       	mov    ecx,0x200
c0007890:	89 e8                	mov    eax,ebp
c0007892:	e8 4c a2 ff ff       	call   c0001ae3 <mem_set>
c0007897:	31 d2                	xor    edx,edx
c0007899:	01 de                	add    esi,ebx
c000789b:	11 d7                	adc    edi,edx
c000789d:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078a0:	75 bf                	jne    c0007861 <f_mkfs+0x74b>
c00078a2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078a6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078aa:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078b2:	b9 00 02 00 00       	mov    ecx,0x200
c00078b7:	31 d2                	xor    edx,edx
c00078b9:	89 e8                	mov    eax,ebp
c00078bb:	e8 23 a2 ff ff       	call   c0001ae3 <mem_set>
c00078c0:	b9 0b 00 00 00       	mov    ecx,0xb
c00078c5:	ba 60 05 02 c0       	mov    edx,0xc0020560
c00078ca:	89 e8                	mov    eax,ebp
c00078cc:	e8 fd a1 ff ff       	call   c0001ace <mem_cpy>
c00078d1:	8d 45 40             	lea    eax,[ebp+0x40]
c00078d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078dc:	e8 e7 a1 ff ff       	call   c0001ac8 <st_qword>
c00078e1:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078e5:	8d 45 48             	lea    eax,[ebp+0x48]
c00078e8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078ec:	e8 d7 a1 ff ff       	call   c0001ac8 <st_qword>
c00078f1:	8d 45 50             	lea    eax,[ebp+0x50]
c00078f4:	ba 20 00 00 00       	mov    edx,0x20
c00078f9:	e8 c7 a1 ff ff       	call   c0001ac5 <st_dword>
c00078fe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007902:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007906:	e8 ba a1 ff ff       	call   c0001ac5 <st_dword>
c000790b:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000790f:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007913:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007917:	e8 a9 a1 ff ff       	call   c0001ac5 <st_dword>
c000791c:	8d 45 5c             	lea    eax,[ebp+0x5c]
c000791f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007923:	e8 9d a1 ff ff       	call   c0001ac5 <st_dword>
c0007928:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000792c:	8d 50 02             	lea    edx,[eax+0x2]
c000792f:	8d 45 60             	lea    eax,[ebp+0x60]
c0007932:	e8 8e a1 ff ff       	call   c0001ac5 <st_dword>
c0007937:	8d 45 64             	lea    eax,[ebp+0x64]
c000793a:	ba 00 00 21 50       	mov    edx,0x50210000
c000793f:	e8 81 a1 ff ff       	call   c0001ac5 <st_dword>
c0007944:	8d 45 68             	lea    eax,[ebp+0x68]
c0007947:	ba 00 01 00 00       	mov    edx,0x100
c000794c:	e8 70 a1 ff ff       	call   c0001ac1 <st_word>
c0007951:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007955:	b8 0a 00 00 00       	mov    eax,0xa
c000795a:	48                   	dec    eax
c000795b:	74 05                	je     c0007962 <f_mkfs+0x84c>
c000795d:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007960:	eb f8                	jmp    c000795a <f_mkfs+0x844>
c0007962:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007966:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c000796a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000796e:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007972:	74 05                	je     c0007979 <f_mkfs+0x863>
c0007974:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007977:	eb f5                	jmp    c000796e <f_mkfs+0x858>
c0007979:	8d 45 78             	lea    eax,[ebp+0x78]
c000797c:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007981:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007987:	31 db                	xor    ebx,ebx
c0007989:	e8 33 a1 ff ff       	call   c0001ac1 <st_word>
c000798e:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007994:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007999:	89 04 24             	mov    DWORD PTR [esp],eax
c000799c:	e8 20 a1 ff ff       	call   c0001ac1 <st_word>
c00079a1:	31 c9                	xor    ecx,ecx
c00079a3:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079a6:	83 f8 01             	cmp    eax,0x1
c00079a9:	76 13                	jbe    c00079be <f_mkfs+0x8a8>
c00079ab:	83 f9 70             	cmp    ecx,0x70
c00079ae:	74 0e                	je     c00079be <f_mkfs+0x8a8>
c00079b0:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079b5:	89 da                	mov    edx,ebx
c00079b7:	e8 8e a5 ff ff       	call   c0001f4a <xsum32>
c00079bc:	89 c3                	mov    ebx,eax
c00079be:	41                   	inc    ecx
c00079bf:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079c5:	75 dc                	jne    c00079a3 <f_mkfs+0x88d>
c00079c7:	89 f0                	mov    eax,esi
c00079c9:	89 fa                	mov    edx,edi
c00079cb:	83 c0 01             	add    eax,0x1
c00079ce:	83 d2 00             	adc    edx,0x0
c00079d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00079d9:	83 ec 0c             	sub    esp,0xc
c00079dc:	6a 01                	push   0x1
c00079de:	57                   	push   edi
c00079df:	56                   	push   esi
c00079e0:	55                   	push   ebp
c00079e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e5:	e8 30 a0 ff ff       	call   c0001a1a <disk_write>
c00079ea:	83 c4 20             	add    esp,0x20
c00079ed:	85 c0                	test   eax,eax
c00079ef:	0f 85 ce 07 00 00    	jne    c00081c3 <f_mkfs+0x10ad>
c00079f5:	31 d2                	xor    edx,edx
c00079f7:	b9 00 02 00 00       	mov    ecx,0x200
c00079fc:	89 e8                	mov    eax,ebp
c00079fe:	e8 e0 a0 ff ff       	call   c0001ae3 <mem_set>
c0007a03:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a0b:	e8 b1 a0 ff ff       	call   c0001ac1 <st_word>
c0007a10:	89 f0                	mov    eax,esi
c0007a12:	83 c0 09             	add    eax,0x9
c0007a15:	89 fa                	mov    edx,edi
c0007a17:	83 d2 00             	adc    edx,0x0
c0007a1a:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a1d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a21:	31 c9                	xor    ecx,ecx
c0007a23:	41                   	inc    ecx
c0007a24:	89 da                	mov    edx,ebx
c0007a26:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a2b:	e8 1a a5 ff ff       	call   c0001f4a <xsum32>
c0007a30:	89 c3                	mov    ebx,eax
c0007a32:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a38:	75 e9                	jne    c0007a23 <f_mkfs+0x90d>
c0007a3a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a3e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a42:	83 c0 01             	add    eax,0x1
c0007a45:	83 d2 00             	adc    edx,0x0
c0007a48:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a4c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007a50:	83 ec 0c             	sub    esp,0xc
c0007a53:	6a 01                	push   0x1
c0007a55:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a59:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a5d:	55                   	push   ebp
c0007a5e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a62:	e8 b3 9f ff ff       	call   c0001a1a <disk_write>
c0007a67:	83 c4 20             	add    esp,0x20
c0007a6a:	85 c0                	test   eax,eax
c0007a6c:	0f 85 51 07 00 00    	jne    c00081c3 <f_mkfs+0x10ad>
c0007a72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a76:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a7a:	75 09                	jne    c0007a85 <f_mkfs+0x96f>
c0007a7c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a7f:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a83:	74 12                	je     c0007a97 <f_mkfs+0x981>
c0007a85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a89:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a95:	eb 8a                	jmp    c0007a21 <f_mkfs+0x90b>
c0007a97:	31 d2                	xor    edx,edx
c0007a99:	b9 00 02 00 00       	mov    ecx,0x200
c0007a9e:	89 e8                	mov    eax,ebp
c0007aa0:	e8 3e a0 ff ff       	call   c0001ae3 <mem_set>
c0007aa5:	83 c6 0b             	add    esi,0xb
c0007aa8:	83 d7 00             	adc    edi,0x0
c0007aab:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007aaf:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007ab3:	31 c9                	xor    ecx,ecx
c0007ab5:	41                   	inc    ecx
c0007ab6:	89 da                	mov    edx,ebx
c0007ab8:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007abd:	e8 88 a4 ff ff       	call   c0001f4a <xsum32>
c0007ac2:	89 c3                	mov    ebx,eax
c0007ac4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007aca:	75 e9                	jne    c0007ab5 <f_mkfs+0x99f>
c0007acc:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007acf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ad3:	83 c6 01             	add    esi,0x1
c0007ad6:	83 d7 00             	adc    edi,0x0
c0007ad9:	83 ec 0c             	sub    esp,0xc
c0007adc:	6a 01                	push   0x1
c0007ade:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ae2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ae6:	55                   	push   ebp
c0007ae7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007aeb:	e8 2a 9f ff ff       	call   c0001a1a <disk_write>
c0007af0:	83 c4 20             	add    esp,0x20
c0007af3:	85 c0                	test   eax,eax
c0007af5:	0f 85 c8 06 00 00    	jne    c00081c3 <f_mkfs+0x10ad>
c0007afb:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007aff:	75 06                	jne    c0007b07 <f_mkfs+0x9f1>
c0007b01:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b05:	74 09                	je     c0007b10 <f_mkfs+0x9fa>
c0007b07:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b0a:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b0e:	eb a3                	jmp    c0007ab3 <f_mkfs+0x99d>
c0007b10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b14:	89 da                	mov    edx,ebx
c0007b16:	01 e8                	add    eax,ebp
c0007b18:	e8 a8 9f ff ff       	call   c0001ac5 <st_dword>
c0007b1d:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b22:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b2a:	75 e4                	jne    c0007b10 <f_mkfs+0x9fa>
c0007b2c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b2f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b33:	83 c6 02             	add    esi,0x2
c0007b36:	83 d7 00             	adc    edi,0x0
c0007b39:	83 ec 0c             	sub    esp,0xc
c0007b3c:	6a 01                	push   0x1
c0007b3e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b46:	55                   	push   ebp
c0007b47:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b4b:	e8 ca 9e ff ff       	call   c0001a1a <disk_write>
c0007b50:	83 c4 20             	add    esp,0x20
c0007b53:	85 c0                	test   eax,eax
c0007b55:	0f 85 68 06 00 00    	jne    c00081c3 <f_mkfs+0x10ad>
c0007b5b:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b60:	74 0d                	je     c0007b6f <f_mkfs+0xa59>
c0007b62:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b6a:	e9 43 fd ff ff       	jmp    c00078b2 <f_mkfs+0x79c>
c0007b6f:	b1 07                	mov    cl,0x7
c0007b71:	e9 e3 05 00 00       	jmp    c0008159 <f_mkfs+0x1043>
c0007b76:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b7b:	0f 85 4f 02 00 00    	jne    c0007dd0 <f_mkfs+0xcba>
c0007b81:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b86:	0f 86 22 02 00 00    	jbe    c0007dae <f_mkfs+0xc98>
c0007b8c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b91:	0f 85 81 06 00 00    	jne    c0008218 <f_mkfs+0x1102>
c0007b97:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b9e:	83 f8 40             	cmp    eax,0x40
c0007ba1:	0f 87 51 06 00 00    	ja     c00081f8 <f_mkfs+0x10e2>
c0007ba7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bab:	85 ff                	test   edi,edi
c0007bad:	75 1c                	jne    c0007bcb <f_mkfs+0xab5>
c0007baf:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bb2:	ba 60 04 02 c0       	mov    edx,0xc0020460
c0007bb7:	c1 e9 0c             	shr    ecx,0xc
c0007bba:	bf 01 00 00 00       	mov    edi,0x1
c0007bbf:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bc2:	66 85 c0             	test   ax,ax
c0007bc5:	0f 85 95 01 00 00    	jne    c0007d60 <f_mkfs+0xc4a>
c0007bcb:	31 d2                	xor    edx,edx
c0007bcd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bd0:	f7 f7                	div    edi
c0007bd2:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007bd7:	0f 86 95 01 00 00    	jbe    c0007d72 <f_mkfs+0xc5c>
c0007bdd:	83 c0 02             	add    eax,0x2
c0007be0:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007be5:	01 c0                	add    eax,eax
c0007be7:	05 ff 01 00 00       	add    eax,0x1ff
c0007bec:	be 01 00 00 00       	mov    esi,0x1
c0007bf1:	c1 e8 09             	shr    eax,0x9
c0007bf4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007bf8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bfc:	c1 e0 05             	shl    eax,0x5
c0007bff:	c1 e8 09             	shr    eax,0x9
c0007c02:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007c06:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0007c0b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c0f:	89 f0                	mov    eax,esi
c0007c11:	31 d2                	xor    edx,edx
c0007c13:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c17:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c1b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c1f:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c23:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007c27:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007c2c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c30:	31 d2                	xor    edx,edx
c0007c32:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c36:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c3a:	31 db                	xor    ebx,ebx
c0007c3c:	01 c8                	add    eax,ecx
c0007c3e:	11 da                	adc    edx,ebx
c0007c40:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c44:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c48:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c4c:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c50:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c54:	f7 da                	neg    edx
c0007c56:	21 d1                	and    ecx,edx
c0007c58:	29 d9                	sub    ecx,ebx
c0007c5a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c5f:	0f 85 20 01 00 00    	jne    c0007d85 <f_mkfs+0xc6f>
c0007c65:	31 db                	xor    ebx,ebx
c0007c67:	01 ce                	add    esi,ecx
c0007c69:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c6d:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c71:	89 f8                	mov    eax,edi
c0007c73:	31 d2                	xor    edx,edx
c0007c75:	c1 e0 04             	shl    eax,0x4
c0007c78:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c7c:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c80:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c84:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c88:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c8c:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c8f:	19 d3                	sbb    ebx,edx
c0007c91:	0f 82 40 01 00 00    	jb     c0007dd7 <f_mkfs+0xcc1>
c0007c97:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c9b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c9e:	0f af 54 24 50       	imul   edx,DWORD PTR [esp+0x50]
c0007ca3:	89 c8                	mov    eax,ecx
c0007ca5:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
c0007ca9:	29 f0                	sub    eax,esi
c0007cab:	29 d0                	sub    eax,edx
c0007cad:	31 d2                	xor    edx,edx
c0007caf:	f7 f7                	div    edi
c0007cb1:	89 c3                	mov    ebx,eax
c0007cb3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cb8:	0f 85 b8 fe ff ff    	jne    c0007b76 <f_mkfs+0xa60>
c0007cbe:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cc3:	0f 87 1d 01 00 00    	ja     c0007de6 <f_mkfs+0xcd0>
c0007cc9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cce:	0f 85 03 01 00 00    	jne    c0007dd7 <f_mkfs+0xcc1>
c0007cd4:	83 ff 01             	cmp    edi,0x1
c0007cd7:	0f 86 fa 00 00 00    	jbe    c0007dd7 <f_mkfs+0xcc1>
c0007cdd:	d1 ef                	shr    edi,1
c0007cdf:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007ce3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007ce7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007cea:	85 db                	test   ebx,ebx
c0007cec:	75 2d                	jne    c0007d1b <f_mkfs+0xc05>
c0007cee:	89 cb                	mov    ebx,ecx
c0007cf0:	ba 70 04 02 c0       	mov    edx,0xc0020470
c0007cf5:	c1 eb 11             	shr    ebx,0x11
c0007cf8:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d00:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d03:	66 85 c0             	test   ax,ax
c0007d06:	74 11                	je     c0007d19 <f_mkfs+0xc03>
c0007d08:	83 c2 02             	add    edx,0x2
c0007d0b:	39 d8                	cmp    eax,ebx
c0007d0d:	77 0a                	ja     c0007d19 <f_mkfs+0xc03>
c0007d0f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d13:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d17:	eb e7                	jmp    c0007d00 <f_mkfs+0xbea>
c0007d19:	31 db                	xor    ebx,ebx
c0007d1b:	31 d2                	xor    edx,edx
c0007d1d:	89 c8                	mov    eax,ecx
c0007d1f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d23:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d2a:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d2f:	c1 ea 09             	shr    edx,0x9
c0007d32:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d3b:	0f 87 96 00 00 00    	ja     c0007dd7 <f_mkfs+0xcc1>
c0007d41:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d45:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0007d4d:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d51:	be 20 00 00 00       	mov    esi,0x20
c0007d56:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d5b:	e9 a6 fe ff ff       	jmp    c0007c06 <f_mkfs+0xaf0>
c0007d60:	83 c2 02             	add    edx,0x2
c0007d63:	39 c8                	cmp    eax,ecx
c0007d65:	0f 87 60 fe ff ff    	ja     c0007bcb <f_mkfs+0xab5>
c0007d6b:	01 ff                	add    edi,edi
c0007d6d:	e9 4d fe ff ff       	jmp    c0007bbf <f_mkfs+0xaa9>
c0007d72:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d75:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d7a:	40                   	inc    eax
c0007d7b:	d1 e8                	shr    eax,1
c0007d7d:	83 c0 03             	add    eax,0x3
c0007d80:	e9 62 fe ff ff       	jmp    c0007be7 <f_mkfs+0xad1>
c0007d85:	31 d2                	xor    edx,edx
c0007d87:	89 c8                	mov    eax,ecx
c0007d89:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007d8d:	85 d2                	test   edx,edx
c0007d8f:	74 0c                	je     c0007d9d <f_mkfs+0xc87>
c0007d91:	49                   	dec    ecx
c0007d92:	46                   	inc    esi
c0007d93:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d98:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d9d:	89 c8                	mov    eax,ecx
c0007d9f:	31 d2                	xor    edx,edx
c0007da1:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007da5:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007da9:	e9 c3 fe ff ff       	jmp    c0007c71 <f_mkfs+0xb5b>
c0007dae:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007db3:	77 31                	ja     c0007de6 <f_mkfs+0xcd0>
c0007db5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dba:	75 1b                	jne    c0007dd7 <f_mkfs+0xcc1>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	3d 80 00 00 00       	cmp    eax,0x80
c0007dc8:	0f 86 d9 fd ff ff    	jbe    c0007ba7 <f_mkfs+0xa91>
c0007dce:	eb 07                	jmp    c0007dd7 <f_mkfs+0xcc1>
c0007dd0:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dd5:	76 0a                	jbe    c0007de1 <f_mkfs+0xccb>
c0007dd7:	bb 0e 00 00 00       	mov    ebx,0xe
c0007ddc:	e9 ff 03 00 00       	jmp    c00081e0 <f_mkfs+0x10ca>
c0007de1:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007de6:	31 d2                	xor    edx,edx
c0007de8:	b9 00 02 00 00       	mov    ecx,0x200
c0007ded:	89 e8                	mov    eax,ebp
c0007def:	e8 ef 9c ff ff       	call   c0001ae3 <mem_set>
c0007df4:	b9 0b 00 00 00       	mov    ecx,0xb
c0007df9:	ba 82 05 02 c0       	mov    edx,0xc0020582
c0007dfe:	89 e8                	mov    eax,ebp
c0007e00:	e8 c9 9c ff ff       	call   c0001ace <mem_cpy>
c0007e05:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e08:	ba 00 02 00 00       	mov    edx,0x200
c0007e0d:	e8 af 9c ff ff       	call   c0001ac1 <st_word>
c0007e12:	89 f8                	mov    eax,edi
c0007e14:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e17:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e1a:	0f b7 d6             	movzx  edx,si
c0007e1d:	e8 9f 9c ff ff       	call   c0001ac1 <st_word>
c0007e22:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0007e26:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e29:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e2e:	75 08                	jne    c0007e38 <f_mkfs+0xd22>
c0007e30:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e38:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e3b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e3f:	e8 7d 9c ff ff       	call   c0001ac1 <st_word>
c0007e44:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e49:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e4d:	39 d0                	cmp    eax,edx
c0007e4f:	b8 00 00 00 00       	mov    eax,0x0
c0007e54:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e58:	72 0a                	jb     c0007e64 <f_mkfs+0xd4e>
c0007e5a:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e5d:	e8 5f 9c ff ff       	call   c0001ac1 <st_word>
c0007e62:	eb 08                	jmp    c0007e6c <f_mkfs+0xd56>
c0007e64:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e67:	e8 59 9c ff ff       	call   c0001ac5 <st_dword>
c0007e6c:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e6f:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e74:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e78:	e8 44 9c ff ff       	call   c0001ac1 <st_word>
c0007e7d:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e80:	ba ff 00 00 00       	mov    edx,0xff
c0007e85:	e8 37 9c ff ff       	call   c0001ac1 <st_word>
c0007e8a:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e8d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e91:	e8 2f 9c ff ff       	call   c0001ac5 <st_dword>
c0007e96:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e9b:	75 57                	jne    c0007ef4 <f_mkfs+0xdde>
c0007e9d:	8d 45 43             	lea    eax,[ebp+0x43]
c0007ea0:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ea5:	e8 1b 9c ff ff       	call   c0001ac5 <st_dword>
c0007eaa:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ead:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007eb1:	e8 0f 9c ff ff       	call   c0001ac5 <st_dword>
c0007eb6:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007eb9:	ba 02 00 00 00       	mov    edx,0x2
c0007ebe:	e8 02 9c ff ff       	call   c0001ac5 <st_dword>
c0007ec3:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ec6:	ba 01 00 00 00       	mov    edx,0x1
c0007ecb:	e8 f1 9b ff ff       	call   c0001ac1 <st_word>
c0007ed0:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ed3:	ba 06 00 00 00       	mov    edx,0x6
c0007ed8:	e8 e4 9b ff ff       	call   c0001ac1 <st_word>
c0007edd:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ee1:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007ee5:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ee8:	b9 13 00 00 00       	mov    ecx,0x13
c0007eed:	ba 8e 05 02 c0       	mov    edx,0xc002058e
c0007ef2:	eb 2f                	jmp    c0007f23 <f_mkfs+0xe0d>
c0007ef4:	8d 45 27             	lea    eax,[ebp+0x27]
c0007ef7:	ba 00 00 21 50       	mov    edx,0x50210000
c0007efc:	e8 c4 9b ff ff       	call   c0001ac5 <st_dword>
c0007f01:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f04:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f09:	e8 b3 9b ff ff       	call   c0001ac1 <st_word>
c0007f0e:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f12:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f16:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f19:	b9 13 00 00 00       	mov    ecx,0x13
c0007f1e:	ba a2 05 02 c0       	mov    edx,0xc00205a2
c0007f23:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f29:	e8 a0 9b ff ff       	call   c0001ace <mem_cpy>
c0007f2e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f33:	89 f0                	mov    eax,esi
c0007f35:	e8 87 9b ff ff       	call   c0001ac1 <st_word>
c0007f3a:	83 ec 0c             	sub    esp,0xc
c0007f3d:	6a 01                	push   0x1
c0007f3f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f43:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f47:	55                   	push   ebp
c0007f48:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f4c:	e8 c9 9a ff ff       	call   c0001a1a <disk_write>
c0007f51:	83 c4 20             	add    esp,0x20
c0007f54:	85 c0                	test   eax,eax
c0007f56:	0f 85 67 02 00 00    	jne    c00081c3 <f_mkfs+0x10ad>
c0007f5c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f61:	0f 85 b7 00 00 00    	jne    c000801e <f_mkfs+0xf08>
c0007f67:	83 ec 0c             	sub    esp,0xc
c0007f6a:	6a 01                	push   0x1
c0007f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f70:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f74:	83 c0 06             	add    eax,0x6
c0007f77:	83 d2 00             	adc    edx,0x0
c0007f7a:	52                   	push   edx
c0007f7b:	50                   	push   eax
c0007f7c:	55                   	push   ebp
c0007f7d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f81:	e8 94 9a ff ff       	call   c0001a1a <disk_write>
c0007f86:	83 c4 20             	add    esp,0x20
c0007f89:	b9 00 02 00 00       	mov    ecx,0x200
c0007f8e:	31 d2                	xor    edx,edx
c0007f90:	89 e8                	mov    eax,ebp
c0007f92:	e8 4c 9b ff ff       	call   c0001ae3 <mem_set>
c0007f97:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f9c:	89 e8                	mov    eax,ebp
c0007f9e:	e8 22 9b ff ff       	call   c0001ac5 <st_dword>
c0007fa3:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007fa9:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fae:	e8 12 9b ff ff       	call   c0001ac5 <st_dword>
c0007fb3:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fb6:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fbc:	e8 04 9b ff ff       	call   c0001ac5 <st_dword>
c0007fc1:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fc7:	ba 02 00 00 00       	mov    edx,0x2
c0007fcc:	e8 f4 9a ff ff       	call   c0001ac5 <st_dword>
c0007fd1:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fd6:	89 f0                	mov    eax,esi
c0007fd8:	e8 e4 9a ff ff       	call   c0001ac1 <st_word>
c0007fdd:	83 ec 0c             	sub    esp,0xc
c0007fe0:	6a 01                	push   0x1
c0007fe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fe6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fea:	83 c0 07             	add    eax,0x7
c0007fed:	83 d2 00             	adc    edx,0x0
c0007ff0:	52                   	push   edx
c0007ff1:	50                   	push   eax
c0007ff2:	55                   	push   ebp
c0007ff3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ff7:	e8 1e 9a ff ff       	call   c0001a1a <disk_write>
c0007ffc:	83 c4 14             	add    esp,0x14
c0007fff:	6a 01                	push   0x1
c0008001:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008005:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008009:	83 c0 01             	add    eax,0x1
c000800c:	83 d2 00             	adc    edx,0x0
c000800f:	52                   	push   edx
c0008010:	50                   	push   eax
c0008011:	55                   	push   ebp
c0008012:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008016:	e8 ff 99 ff ff       	call   c0001a1a <disk_write>
c000801b:	83 c4 20             	add    esp,0x20
c000801e:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008025:	31 d2                	xor    edx,edx
c0008027:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000802d:	31 db                	xor    ebx,ebx
c000802f:	89 e8                	mov    eax,ebp
c0008031:	e8 ad 9a ff ff       	call   c0001ae3 <mem_set>
c0008036:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000803d:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008042:	0f 94 c3             	sete   bl
c0008045:	4b                   	dec    ebx
c0008046:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000804c:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008052:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008057:	75 21                	jne    c000807a <f_mkfs+0xf64>
c0008059:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000805e:	89 e8                	mov    eax,ebp
c0008060:	e8 60 9a ff ff       	call   c0001ac5 <st_dword>
c0008065:	8d 45 04             	lea    eax,[ebp+0x4]
c0008068:	83 ca ff             	or     edx,0xffffffff
c000806b:	e8 55 9a ff ff       	call   c0001ac5 <st_dword>
c0008070:	8d 45 08             	lea    eax,[ebp+0x8]
c0008073:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008078:	eb 04                	jmp    c000807e <f_mkfs+0xf68>
c000807a:	89 da                	mov    edx,ebx
c000807c:	89 e8                	mov    eax,ebp
c000807e:	e8 42 9a ff ff       	call   c0001ac5 <st_dword>
c0008083:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008087:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000808b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000808f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008093:	39 ce                	cmp    esi,ecx
c0008095:	76 02                	jbe    c0008099 <f_mkfs+0xf83>
c0008097:	89 ce                	mov    esi,ecx
c0008099:	83 ec 0c             	sub    esp,0xc
c000809c:	56                   	push   esi
c000809d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080a1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080a5:	55                   	push   ebp
c00080a6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080aa:	e8 6b 99 ff ff       	call   c0001a1a <disk_write>
c00080af:	83 c4 20             	add    esp,0x20
c00080b2:	85 c0                	test   eax,eax
c00080b4:	0f 85 09 01 00 00    	jne    c00081c3 <f_mkfs+0x10ad>
c00080ba:	31 d2                	xor    edx,edx
c00080bc:	b9 00 02 00 00       	mov    ecx,0x200
c00080c1:	89 e8                	mov    eax,ebp
c00080c3:	e8 1b 9a ff ff       	call   c0001ae3 <mem_set>
c00080c8:	31 d2                	xor    edx,edx
c00080ca:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080ce:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080d2:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080d6:	75 b3                	jne    c000808b <f_mkfs+0xf75>
c00080d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080db:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080e2:	40                   	inc    eax
c00080e3:	39 44 24 50          	cmp    DWORD PTR [esp+0x50],eax
c00080e7:	0f 87 65 ff ff ff    	ja     c0008052 <f_mkfs+0xf3c>
c00080ed:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080f2:	74 04                	je     c00080f8 <f_mkfs+0xfe2>
c00080f4:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00080f8:	89 fb                	mov    ebx,edi
c00080fa:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c00080fe:	76 04                	jbe    c0008104 <f_mkfs+0xfee>
c0008100:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008104:	83 ec 0c             	sub    esp,0xc
c0008107:	53                   	push   ebx
c0008108:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000810c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008110:	55                   	push   ebp
c0008111:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008115:	e8 00 99 ff ff       	call   c0001a1a <disk_write>
c000811a:	83 c4 20             	add    esp,0x20
c000811d:	85 c0                	test   eax,eax
c000811f:	0f 85 9e 00 00 00    	jne    c00081c3 <f_mkfs+0x10ad>
c0008125:	31 d2                	xor    edx,edx
c0008127:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000812b:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000812f:	29 df                	sub    edi,ebx
c0008131:	75 c5                	jne    c00080f8 <f_mkfs+0xfe2>
c0008133:	b1 0c                	mov    cl,0xc
c0008135:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000813a:	74 1d                	je     c0008159 <f_mkfs+0x1043>
c000813c:	b8 ff ff 00 00       	mov    eax,0xffff
c0008141:	b1 06                	mov    cl,0x6
c0008143:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008147:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000814b:	72 0c                	jb     c0008159 <f_mkfs+0x1043>
c000814d:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008152:	0f 94 c1             	sete   cl
c0008155:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008159:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000815e:	75 4c                	jne    c00081ac <f_mkfs+0x1096>
c0008160:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008164:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008168:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000816f:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008176:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008181:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	0f b6 c9             	movzx  ecx,cl
c0008192:	55                   	push   ebp
c0008193:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008197:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c000819e:	e8 58 c2 ff ff       	call   c00043fb <create_partition>
c00081a3:	83 c4 10             	add    esp,0x10
c00081a6:	89 c3                	mov    ebx,eax
c00081a8:	85 c0                	test   eax,eax
c00081aa:	75 34                	jne    c00081e0 <f_mkfs+0x10ca>
c00081ac:	50                   	push   eax
c00081ad:	31 db                	xor    ebx,ebx
c00081af:	6a 00                	push   0x0
c00081b1:	6a 00                	push   0x0
c00081b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081b7:	e8 74 98 ff ff       	call   c0001a30 <disk_ioctl>
c00081bc:	83 c4 10             	add    esp,0x10
c00081bf:	85 c0                	test   eax,eax
c00081c1:	74 1d                	je     c00081e0 <f_mkfs+0x10ca>
c00081c3:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081cb:	75 0c                	jne    c00081d9 <f_mkfs+0x10c3>
c00081cd:	83 ec 0c             	sub    esp,0xc
c00081d0:	55                   	push   ebp
c00081d1:	e8 75 00 00 00       	call   c000824b <ff_memfree>
c00081d6:	83 c4 10             	add    esp,0x10
c00081d9:	bb 01 00 00 00       	mov    ebx,0x1
c00081de:	eb 48                	jmp    c0008228 <f_mkfs+0x1112>
c00081e0:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081e8:	75 3e                	jne    c0008228 <f_mkfs+0x1112>
c00081ea:	83 ec 0c             	sub    esp,0xc
c00081ed:	55                   	push   ebp
c00081ee:	e8 58 00 00 00       	call   c000824b <ff_memfree>
c00081f3:	83 c4 10             	add    esp,0x10
c00081f6:	eb 30                	jmp    c0008228 <f_mkfs+0x1112>
c00081f8:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081fd:	0f 85 eb fa ff ff    	jne    c0007cee <f_mkfs+0xbd8>
c0008203:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008207:	81 ff 80 00 00 00    	cmp    edi,0x80
c000820d:	0f 86 b8 f9 ff ff    	jbe    c0007bcb <f_mkfs+0xab5>
c0008213:	e9 bf fb ff ff       	jmp    c0007dd7 <f_mkfs+0xcc1>
c0008218:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000821d:	0f 85 c0 fa ff ff    	jne    c0007ce3 <f_mkfs+0xbcd>
c0008223:	e9 af fb ff ff       	jmp    c0007dd7 <f_mkfs+0xcc1>
c0008228:	81 c4 9c 00 00 00    	add    esp,0x9c
c000822e:	89 d8                	mov    eax,ebx
c0008230:	5b                   	pop    ebx
c0008231:	5e                   	pop    esi
c0008232:	5f                   	pop    edi
c0008233:	5d                   	pop    ebp
c0008234:	c3                   	ret    

c0008235 <ff_memalloc>:
c0008235:	83 ec 0c             	sub    esp,0xc
c0008238:	83 ec 0c             	sub    esp,0xc
c000823b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000823f:	e8 9f 3d 00 00       	call   c000bfe3 <malloc>
c0008244:	83 c4 10             	add    esp,0x10
c0008247:	83 c4 0c             	add    esp,0xc
c000824a:	c3                   	ret    

c000824b <ff_memfree>:
c000824b:	83 ec 0c             	sub    esp,0xc
c000824e:	83 ec 0c             	sub    esp,0xc
c0008251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008255:	e8 99 3d 00 00       	call   c000bff3 <free>
c000825a:	83 c4 10             	add    esp,0x10
c000825d:	90                   	nop
c000825e:	83 c4 0c             	add    esp,0xc
c0008261:	c3                   	ret    

c0008262 <ff_uni2oem>:
c0008262:	83 ec 14             	sub    esp,0x14
c0008265:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008269:	66 89 04 24          	mov    WORD PTR [esp],ax
c000826d:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008274:	c7 44 24 0c c0 08 02 c0 	mov    DWORD PTR [esp+0xc],0xc00208c0
c000827c:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008281:	77 0b                	ja     c000828e <ff_uni2oem+0x2c>
c0008283:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008287:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000828c:	eb 61                	jmp    c00082ef <ff_uni2oem+0x8d>
c000828e:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008296:	77 57                	ja     c00082ef <ff_uni2oem+0x8d>
c0008298:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000829e:	75 4f                	jne    c00082ef <ff_uni2oem+0x8d>
c00082a0:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082a7:	eb 0b                	jmp    c00082b4 <ff_uni2oem+0x52>
c00082a9:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082ae:	40                   	inc    eax
c00082af:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082b4:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082ba:	77 21                	ja     c00082dd <ff_uni2oem+0x7b>
c00082bc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082c1:	25 ff ff 00 00       	and    eax,0xffff
c00082c6:	8d 14 00             	lea    edx,[eax+eax*1]
c00082c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082cd:	01 d0                	add    eax,edx
c00082cf:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082d2:	25 ff ff 00 00       	and    eax,0xffff
c00082d7:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082db:	75 cc                	jne    c00082a9 <ff_uni2oem+0x47>
c00082dd:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082e2:	83 e8 80             	sub    eax,0xffffff80
c00082e5:	25 ff 00 00 00       	and    eax,0xff
c00082ea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082ef:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082f4:	83 c4 14             	add    esp,0x14
c00082f7:	c3                   	ret    

c00082f8 <ff_oem2uni>:
c00082f8:	83 ec 18             	sub    esp,0x18
c00082fb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00082ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008303:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008308:	66 89 04 24          	mov    WORD PTR [esp],ax
c000830c:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008313:	c7 44 24 10 c0 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc00208c0
c000831b:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008321:	77 0b                	ja     c000832e <ff_oem2uni+0x36>
c0008323:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008327:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000832c:	eb 30                	jmp    c000835e <ff_oem2uni+0x66>
c000832e:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008334:	75 28                	jne    c000835e <ff_oem2uni+0x66>
c0008336:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000833d:	77 1f                	ja     c000835e <ff_oem2uni+0x66>
c000833f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008343:	25 ff ff 00 00       	and    eax,0xffff
c0008348:	05 80 ff ff 7f       	add    eax,0x7fffff80
c000834d:	8d 14 00             	lea    edx,[eax+eax*1]
c0008350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008354:	01 d0                	add    eax,edx
c0008356:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008359:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000835e:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008363:	83 c4 18             	add    esp,0x18
c0008366:	c3                   	ret    

c0008367 <ff_wtoupper>:
c0008367:	83 ec 10             	sub    esp,0x10
c000836a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008372:	0f 87 62 01 00 00    	ja     c00084da <ff_wtoupper+0x173>
c0008378:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000837c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008381:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008388:	77 07                	ja     c0008391 <ff_wtoupper+0x2a>
c000838a:	b8 c0 06 02 c0       	mov    eax,0xc00206c0
c000838f:	eb 05                	jmp    c0008396 <ff_wtoupper+0x2f>
c0008391:	b8 00 06 02 c0       	mov    eax,0xc0020600
c0008396:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000839a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000839e:	8d 50 02             	lea    edx,[eax+0x2]
c00083a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083a5:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083a8:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083ad:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083b3:	0f 84 13 01 00 00    	je     c00084cc <ff_wtoupper+0x165>
c00083b9:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083be:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083c3:	0f 82 03 01 00 00    	jb     c00084cc <ff_wtoupper+0x165>
c00083c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083cd:	8d 50 02             	lea    edx,[eax+0x2]
c00083d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083d4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083d7:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083dc:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083e1:	66 c1 e8 08          	shr    ax,0x8
c00083e5:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083ea:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083f1:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083f6:	31 d2                	xor    edx,edx
c00083f8:	66 89 c2             	mov    dx,ax
c00083fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083ff:	31 c9                	xor    ecx,ecx
c0008401:	66 89 c1             	mov    cx,ax
c0008404:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008409:	25 ff ff 00 00       	and    eax,0xffff
c000840e:	01 c8                	add    eax,ecx
c0008410:	39 c2                	cmp    edx,eax
c0008412:	0f 8d 92 00 00 00    	jge    c00084aa <ff_wtoupper+0x143>
c0008418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000841c:	25 ff ff 00 00       	and    eax,0xffff
c0008421:	83 f8 08             	cmp    eax,0x8
c0008424:	0f 87 a1 00 00 00    	ja     c00084cb <ff_wtoupper+0x164>
c000842a:	8b 04 85 c0 05 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfa40]
c0008431:	ff e0                	jmp    eax
c0008433:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008438:	31 d2                	xor    edx,edx
c000843a:	66 89 c2             	mov    dx,ax
c000843d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008441:	25 ff ff 00 00       	and    eax,0xffff
c0008446:	29 c2                	sub    edx,eax
c0008448:	89 d0                	mov    eax,edx
c000844a:	8d 14 00             	lea    edx,[eax+eax*1]
c000844d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008451:	01 d0                	add    eax,edx
c0008453:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008456:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000845b:	eb 4b                	jmp    c00084a8 <ff_wtoupper+0x141>
c000845d:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008462:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008466:	83 e0 01             	and    eax,0x1
c0008469:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000846e:	eb 38                	jmp    c00084a8 <ff_wtoupper+0x141>
c0008470:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008476:	eb 30                	jmp    c00084a8 <ff_wtoupper+0x141>
c0008478:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000847e:	eb 28                	jmp    c00084a8 <ff_wtoupper+0x141>
c0008480:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008486:	eb 20                	jmp    c00084a8 <ff_wtoupper+0x141>
c0008488:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000848e:	eb 18                	jmp    c00084a8 <ff_wtoupper+0x141>
c0008490:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008496:	eb 10                	jmp    c00084a8 <ff_wtoupper+0x141>
c0008498:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000849e:	eb 08                	jmp    c00084a8 <ff_wtoupper+0x141>
c00084a0:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00084a7:	90                   	nop
c00084a8:	eb 21                	jmp    c00084cb <ff_wtoupper+0x164>
c00084aa:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084b0:	0f 85 e4 fe ff ff    	jne    c000839a <ff_wtoupper+0x33>
c00084b6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00084bb:	25 ff ff 00 00       	and    eax,0xffff
c00084c0:	01 c0                	add    eax,eax
c00084c2:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084c6:	e9 cf fe ff ff       	jmp    c000839a <ff_wtoupper+0x33>
c00084cb:	90                   	nop
c00084cc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00084d1:	25 ff ff 00 00       	and    eax,0xffff
c00084d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084de:	83 c4 10             	add    esp,0x10
c00084e1:	c3                   	ret    

c00084e2 <is_bad_src_ratio>:
c00084e2:	83 ec 0c             	sub    esp,0xc
c00084e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00084ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00084f4:	dd 04 24             	fld    QWORD PTR [esp]
c00084f7:	dd 05 80 0e 02 c0    	fld    QWORD PTR ds:0xc0020e80
c00084fd:	de d9                	fcompp 
c00084ff:	df e0                	fnstsw ax
c0008501:	f6 c4 45             	test   ah,0x45
c0008504:	74 10                	je     c0008516 <is_bad_src_ratio+0x34>
c0008506:	dd 04 24             	fld    QWORD PTR [esp]
c0008509:	dc 1d 88 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e88
c000850f:	df e0                	fnstsw ax
c0008511:	f6 c4 45             	test   ah,0x45
c0008514:	75 07                	jne    c000851d <is_bad_src_ratio+0x3b>
c0008516:	b8 01 00 00 00       	mov    eax,0x1
c000851b:	eb 05                	jmp    c0008522 <is_bad_src_ratio+0x40>
c000851d:	b8 00 00 00 00       	mov    eax,0x0
c0008522:	83 c4 0c             	add    esp,0xc
c0008525:	c3                   	ret    

c0008526 <psrc_set_converter>:
c0008526:	56                   	push   esi
c0008527:	89 d6                	mov    esi,edx
c0008529:	53                   	push   ebx
c000852a:	89 c3                	mov    ebx,eax
c000852c:	83 ec 0c             	sub    esp,0xc
c000852f:	52                   	push   edx
c0008530:	50                   	push   eax
c0008531:	e8 21 24 00 00       	call   c000a957 <sinc_set_converter>
c0008536:	83 c4 10             	add    esp,0x10
c0008539:	85 c0                	test   eax,eax
c000853b:	74 25                	je     c0008562 <psrc_set_converter+0x3c>
c000853d:	50                   	push   eax
c000853e:	50                   	push   eax
c000853f:	56                   	push   esi
c0008540:	53                   	push   ebx
c0008541:	e8 1c 28 00 00       	call   c000ad62 <zoh_set_converter>
c0008546:	83 c4 10             	add    esp,0x10
c0008549:	85 c0                	test   eax,eax
c000854b:	74 15                	je     c0008562 <psrc_set_converter+0x3c>
c000854d:	51                   	push   ecx
c000854e:	51                   	push   ecx
c000854f:	56                   	push   esi
c0008550:	53                   	push   ebx
c0008551:	e8 0c 0a 00 00       	call   c0008f62 <linear_set_converter>
c0008556:	83 c4 10             	add    esp,0x10
c0008559:	ba 0a 00 00 00       	mov    edx,0xa
c000855e:	85 c0                	test   eax,eax
c0008560:	75 02                	jne    c0008564 <psrc_set_converter+0x3e>
c0008562:	31 d2                	xor    edx,edx
c0008564:	89 d0                	mov    eax,edx
c0008566:	5a                   	pop    edx
c0008567:	5b                   	pop    ebx
c0008568:	5e                   	pop    esi
c0008569:	c3                   	ret    

c000856a <src_delete>:
c000856a:	53                   	push   ebx
c000856b:	83 ec 08             	sub    esp,0x8
c000856e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008572:	85 db                	test   ebx,ebx
c0008574:	74 29                	je     c000859f <src_delete+0x35>
c0008576:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008579:	85 c0                	test   eax,eax
c000857b:	74 0c                	je     c0008589 <src_delete+0x1f>
c000857d:	83 ec 0c             	sub    esp,0xc
c0008580:	50                   	push   eax
c0008581:	e8 6d 3a 00 00       	call   c000bff3 <free>
c0008586:	83 c4 10             	add    esp,0x10
c0008589:	50                   	push   eax
c000858a:	6a 3c                	push   0x3c
c000858c:	6a 00                	push   0x0
c000858e:	53                   	push   ebx
c000858f:	e8 30 81 ff ff       	call   c00006c4 <memset>
c0008594:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008597:	e8 57 3a 00 00       	call   c000bff3 <free>
c000859c:	83 c4 10             	add    esp,0x10
c000859f:	83 c4 08             	add    esp,0x8
c00085a2:	31 c0                	xor    eax,eax
c00085a4:	5b                   	pop    ebx
c00085a5:	c3                   	ret    

c00085a6 <src_process>:
c00085a6:	56                   	push   esi
c00085a7:	53                   	push   ebx
c00085a8:	53                   	push   ebx
c00085a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00085ad:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00085b1:	85 f6                	test   esi,esi
c00085b3:	0f 84 e2 00 00 00    	je     c000869b <src_process+0xf5>
c00085b9:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00085bd:	0f 84 df 00 00 00    	je     c00086a2 <src_process+0xfc>
c00085c3:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c00085c7:	0f 84 d5 00 00 00    	je     c00086a2 <src_process+0xfc>
c00085cd:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c00085d4:	0f 85 cf 00 00 00    	jne    c00086a9 <src_process+0x103>
c00085da:	85 db                	test   ebx,ebx
c00085dc:	0f 84 ce 00 00 00    	je     c00086b0 <src_process+0x10a>
c00085e2:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00085e5:	0f 84 cc 00 00 00    	je     c00086b7 <src_process+0x111>
c00085eb:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c00085ef:	0f 84 c2 00 00 00    	je     c00086b7 <src_process+0x111>
c00085f5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00085f8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00085fb:	e8 e2 fe ff ff       	call   c00084e2 <is_bad_src_ratio>
c0008600:	5a                   	pop    edx
c0008601:	85 c0                	test   eax,eax
c0008603:	59                   	pop    ecx
c0008604:	0f 85 b4 00 00 00    	jne    c00086be <src_process+0x118>
c000860a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000860e:	79 07                	jns    c0008617 <src_process+0x71>
c0008610:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008617:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000861b:	79 07                	jns    c0008624 <src_process+0x7e>
c000861d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008624:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008626:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008629:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000862c:	39 ca                	cmp    edx,ecx
c000862e:	73 0b                	jae    c000863b <src_process+0x95>
c0008630:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008634:	8d 04 82             	lea    eax,[edx+eax*4]
c0008637:	39 c1                	cmp    ecx,eax
c0008639:	eb 09                	jmp    c0008644 <src_process+0x9e>
c000863b:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c000863f:	8d 04 81             	lea    eax,[ecx+eax*4]
c0008642:	39 c2                	cmp    edx,eax
c0008644:	72 7f                	jb     c00086c5 <src_process+0x11f>
c0008646:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000864d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008654:	d9 05 a0 0e 02 c0    	fld    DWORD PTR ds:0xc0020ea0
c000865a:	dc 1e                	fcomp  QWORD PTR [esi]
c000865c:	df e0                	fnstsw ax
c000865e:	9e                   	sahf   
c000865f:	76 05                	jbe    c0008666 <src_process+0xc0>
c0008661:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c0008664:	dd 1e                	fstp   QWORD PTR [esi]
c0008666:	dd 06                	fld    QWORD PTR [esi]
c0008668:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c000866b:	83 ec 10             	sub    esp,0x10
c000866e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008671:	e8 ba 70 01 00       	call   c001f730 <fabs>
c0008676:	83 c4 10             	add    esp,0x10
c0008679:	dd 05 90 0e 02 c0    	fld    QWORD PTR ds:0xc0020e90
c000867f:	de d9                	fcompp 
c0008681:	df e0                	fnstsw ax
c0008683:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0008687:	9e                   	sahf   
c0008688:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000868c:	76 05                	jbe    c0008693 <src_process+0xed>
c000868e:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0008691:	eb 03                	jmp    c0008696 <src_process+0xf0>
c0008693:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0008696:	59                   	pop    ecx
c0008697:	5b                   	pop    ebx
c0008698:	5e                   	pop    esi
c0008699:	ff e0                	jmp    eax
c000869b:	b8 02 00 00 00       	mov    eax,0x2
c00086a0:	eb 28                	jmp    c00086ca <src_process+0x124>
c00086a2:	b8 07 00 00 00       	mov    eax,0x7
c00086a7:	eb 21                	jmp    c00086ca <src_process+0x124>
c00086a9:	b8 12 00 00 00       	mov    eax,0x12
c00086ae:	eb 1a                	jmp    c00086ca <src_process+0x124>
c00086b0:	b8 03 00 00 00       	mov    eax,0x3
c00086b5:	eb 13                	jmp    c00086ca <src_process+0x124>
c00086b7:	b8 04 00 00 00       	mov    eax,0x4
c00086bc:	eb 0c                	jmp    c00086ca <src_process+0x124>
c00086be:	b8 06 00 00 00       	mov    eax,0x6
c00086c3:	eb 05                	jmp    c00086ca <src_process+0x124>
c00086c5:	b8 10 00 00 00       	mov    eax,0x10
c00086ca:	5a                   	pop    edx
c00086cb:	5b                   	pop    ebx
c00086cc:	5e                   	pop    esi
c00086cd:	c3                   	ret    

c00086ce <src_callback_read>:
c00086ce:	55                   	push   ebp
c00086cf:	57                   	push   edi
c00086d0:	56                   	push   esi
c00086d1:	53                   	push   ebx
c00086d2:	83 ec 4c             	sub    esp,0x4c
c00086d5:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c00086d9:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c00086dd:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00086e1:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00086e5:	85 ff                	test   edi,edi
c00086e7:	0f 8e 36 01 00 00    	jle    c0008823 <src_callback_read+0x155>
c00086ed:	85 db                	test   ebx,ebx
c00086ef:	0f 84 2e 01 00 00    	je     c0008823 <src_callback_read+0x155>
c00086f5:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c00086fc:	74 0c                	je     c000870a <src_callback_read+0x3c>
c00086fe:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008705:	e9 19 01 00 00       	jmp    c0008823 <src_callback_read+0x155>
c000870a:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000870e:	75 0c                	jne    c000871c <src_callback_read+0x4e>
c0008710:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008717:	e9 07 01 00 00       	jmp    c0008823 <src_callback_read+0x155>
c000871c:	51                   	push   ecx
c000871d:	6a 24                	push   0x24
c000871f:	6a 00                	push   0x0
c0008721:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008725:	50                   	push   eax
c0008726:	e8 99 7f ff ff       	call   c00006c4 <memset>
c000872b:	5e                   	pop    esi
c000872c:	5d                   	pop    ebp
c000872d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008731:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008735:	e8 a8 fd ff ff       	call   c00084e2 <is_bad_src_ratio>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	85 c0                	test   eax,eax
c000873f:	74 0c                	je     c000874d <src_callback_read+0x7f>
c0008741:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008748:	e9 d6 00 00 00       	jmp    c0008823 <src_callback_read+0x155>
c000874d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0008751:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0008755:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008759:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000875d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008760:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008764:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0008767:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000876b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000876f:	31 f6                	xor    esi,esi
c0008771:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008776:	75 30                	jne    c00087a8 <src_callback_read+0xda>
c0008778:	8d 44 24 14          	lea    eax,[esp+0x14]
c000877c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008780:	52                   	push   edx
c0008781:	52                   	push   edx
c0008782:	8d 44 24 20          	lea    eax,[esp+0x20]
c0008786:	50                   	push   eax
c0008787:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000878a:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c000878d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008791:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008795:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0008799:	83 c4 10             	add    esp,0x10
c000879c:	85 c0                	test   eax,eax
c000879e:	75 08                	jne    c00087a8 <src_callback_read+0xda>
c00087a0:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00087a8:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087af:	50                   	push   eax
c00087b0:	50                   	push   eax
c00087b1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00087b5:	50                   	push   eax
c00087b6:	53                   	push   ebx
c00087b7:	e8 ea fd ff ff       	call   c00085a6 <src_process>
c00087bc:	83 c4 10             	add    esp,0x10
c00087bf:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00087c6:	85 c0                	test   eax,eax
c00087c8:	75 42                	jne    c000880c <src_callback_read+0x13e>
c00087ca:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00087ce:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00087d1:	89 e9                	mov    ecx,ebp
c00087d3:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c00087d7:	0f af ca             	imul   ecx,edx
c00087da:	c1 e1 02             	shl    ecx,0x2
c00087dd:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c00087e1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00087e5:	0f af d1             	imul   edx,ecx
c00087e8:	c1 e2 02             	shl    edx,0x2
c00087eb:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c00087ef:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c00087f3:	8d 14 31             	lea    edx,[ecx+esi*1]
c00087f6:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c00087fb:	75 04                	jne    c0008801 <src_callback_read+0x133>
c00087fd:	85 c9                	test   ecx,ecx
c00087ff:	74 0b                	je     c000880c <src_callback_read+0x13e>
c0008801:	39 d7                	cmp    edi,edx
c0008803:	7e 09                	jle    c000880e <src_callback_read+0x140>
c0008805:	89 d6                	mov    esi,edx
c0008807:	e9 65 ff ff ff       	jmp    c0008771 <src_callback_read+0xa3>
c000880c:	89 f2                	mov    edx,esi
c000880e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008812:	85 c0                	test   eax,eax
c0008814:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008817:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000881b:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000881e:	74 05                	je     c0008825 <src_callback_read+0x157>
c0008820:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008823:	31 d2                	xor    edx,edx
c0008825:	83 c4 4c             	add    esp,0x4c
c0008828:	89 d0                	mov    eax,edx
c000882a:	5b                   	pop    ebx
c000882b:	5e                   	pop    esi
c000882c:	5f                   	pop    edi
c000882d:	5d                   	pop    ebp
c000882e:	c3                   	ret    

c000882f <src_set_ratio>:
c000882f:	53                   	push   ebx
c0008830:	b8 02 00 00 00       	mov    eax,0x2
c0008835:	83 ec 08             	sub    esp,0x8
c0008838:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000883c:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c0008840:	85 db                	test   ebx,ebx
c0008842:	74 33                	je     c0008877 <src_set_ratio+0x48>
c0008844:	b8 07 00 00 00       	mov    eax,0x7
c0008849:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c000884d:	74 2c                	je     c000887b <src_set_ratio+0x4c>
c000884f:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008853:	74 2a                	je     c000887f <src_set_ratio+0x50>
c0008855:	50                   	push   eax
c0008856:	50                   	push   eax
c0008857:	dd 14 24             	fst    QWORD PTR [esp]
c000885a:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000885e:	e8 7f fc ff ff       	call   c00084e2 <is_bad_src_ratio>
c0008863:	5a                   	pop    edx
c0008864:	59                   	pop    ecx
c0008865:	85 c0                	test   eax,eax
c0008867:	75 07                	jne    c0008870 <src_set_ratio+0x41>
c0008869:	dd 04 24             	fld    QWORD PTR [esp]
c000886c:	dd 1b                	fstp   QWORD PTR [ebx]
c000886e:	eb 11                	jmp    c0008881 <src_set_ratio+0x52>
c0008870:	b8 06 00 00 00       	mov    eax,0x6
c0008875:	eb 0a                	jmp    c0008881 <src_set_ratio+0x52>
c0008877:	dd d8                	fstp   st(0)
c0008879:	eb 06                	jmp    c0008881 <src_set_ratio+0x52>
c000887b:	dd d8                	fstp   st(0)
c000887d:	eb 02                	jmp    c0008881 <src_set_ratio+0x52>
c000887f:	dd d8                	fstp   st(0)
c0008881:	83 c4 08             	add    esp,0x8
c0008884:	5b                   	pop    ebx
c0008885:	c3                   	ret    

c0008886 <src_get_channels>:
c0008886:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000888a:	b8 02 00 00 00       	mov    eax,0x2
c000888f:	85 d2                	test   edx,edx
c0008891:	74 14                	je     c00088a7 <src_get_channels+0x21>
c0008893:	b8 07 00 00 00       	mov    eax,0x7
c0008898:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c000889c:	74 09                	je     c00088a7 <src_get_channels+0x21>
c000889e:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088a2:	74 03                	je     c00088a7 <src_get_channels+0x21>
c00088a4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00088a7:	c3                   	ret    

c00088a8 <src_reset>:
c00088a8:	53                   	push   ebx
c00088a9:	b8 02 00 00 00       	mov    eax,0x2
c00088ae:	83 ec 08             	sub    esp,0x8
c00088b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088b5:	85 db                	test   ebx,ebx
c00088b7:	74 2e                	je     c00088e7 <src_reset+0x3f>
c00088b9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00088bc:	85 c0                	test   eax,eax
c00088be:	74 09                	je     c00088c9 <src_reset+0x21>
c00088c0:	83 ec 0c             	sub    esp,0xc
c00088c3:	53                   	push   ebx
c00088c4:	ff d0                	call   eax
c00088c6:	83 c4 10             	add    esp,0x10
c00088c9:	d9 ee                	fldz   
c00088cb:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00088d2:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00088d9:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c00088dc:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00088e3:	31 c0                	xor    eax,eax
c00088e5:	dd 1b                	fstp   QWORD PTR [ebx]
c00088e7:	83 c4 08             	add    esp,0x8
c00088ea:	5b                   	pop    ebx
c00088eb:	c3                   	ret    

c00088ec <src_new>:
c00088ec:	57                   	push   edi
c00088ed:	56                   	push   esi
c00088ee:	53                   	push   ebx
c00088ef:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00088f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00088f7:	85 f6                	test   esi,esi
c00088f9:	74 73                	je     c000896e <src_new+0x82>
c00088fb:	85 ff                	test   edi,edi
c00088fd:	7f 08                	jg     c0008907 <src_new+0x1b>
c00088ff:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008905:	eb 1e                	jmp    c0008925 <src_new+0x39>
c0008907:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c000890d:	50                   	push   eax
c000890e:	50                   	push   eax
c000890f:	6a 3c                	push   0x3c
c0008911:	6a 01                	push   0x1
c0008913:	e8 fb 36 00 00       	call   c000c013 <calloc>
c0008918:	83 c4 10             	add    esp,0x10
c000891b:	89 c3                	mov    ebx,eax
c000891d:	85 c0                	test   eax,eax
c000891f:	75 10                	jne    c0008931 <src_new+0x45>
c0008921:	85 f6                	test   esi,esi
c0008923:	75 04                	jne    c0008929 <src_new+0x3d>
c0008925:	31 db                	xor    ebx,ebx
c0008927:	eb 4b                	jmp    c0008974 <src_new+0x88>
c0008929:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c000892f:	eb 43                	jmp    c0008974 <src_new+0x88>
c0008931:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008934:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000893b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000893f:	e8 e2 fb ff ff       	call   c0008526 <psrc_set_converter>
c0008944:	85 c0                	test   eax,eax
c0008946:	74 18                	je     c0008960 <src_new+0x74>
c0008948:	85 f6                	test   esi,esi
c000894a:	74 06                	je     c0008952 <src_new+0x66>
c000894c:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008952:	83 ec 0c             	sub    esp,0xc
c0008955:	53                   	push   ebx
c0008956:	31 db                	xor    ebx,ebx
c0008958:	e8 96 36 00 00       	call   c000bff3 <free>
c000895d:	83 c4 10             	add    esp,0x10
c0008960:	83 ec 0c             	sub    esp,0xc
c0008963:	53                   	push   ebx
c0008964:	e8 3f ff ff ff       	call   c00088a8 <src_reset>
c0008969:	83 c4 10             	add    esp,0x10
c000896c:	eb 06                	jmp    c0008974 <src_new+0x88>
c000896e:	85 ff                	test   edi,edi
c0008970:	7f 9b                	jg     c000890d <src_new+0x21>
c0008972:	eb b1                	jmp    c0008925 <src_new+0x39>
c0008974:	89 d8                	mov    eax,ebx
c0008976:	5b                   	pop    ebx
c0008977:	5e                   	pop    esi
c0008978:	5f                   	pop    edi
c0008979:	c3                   	ret    

c000897a <src_callback_new>:
c000897a:	56                   	push   esi
c000897b:	53                   	push   ebx
c000897c:	53                   	push   ebx
c000897d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008981:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008985:	85 f6                	test   esi,esi
c0008987:	75 0e                	jne    c0008997 <src_callback_new+0x1d>
c0008989:	31 db                	xor    ebx,ebx
c000898b:	85 c0                	test   eax,eax
c000898d:	74 47                	je     c00089d6 <src_callback_new+0x5c>
c000898f:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008995:	eb 3f                	jmp    c00089d6 <src_callback_new+0x5c>
c0008997:	85 c0                	test   eax,eax
c0008999:	74 06                	je     c00089a1 <src_callback_new+0x27>
c000899b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00089a1:	51                   	push   ecx
c00089a2:	50                   	push   eax
c00089a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089ab:	e8 3c ff ff ff       	call   c00088ec <src_new>
c00089b0:	83 c4 10             	add    esp,0x10
c00089b3:	89 c3                	mov    ebx,eax
c00089b5:	85 c0                	test   eax,eax
c00089b7:	74 1d                	je     c00089d6 <src_callback_new+0x5c>
c00089b9:	83 ec 0c             	sub    esp,0xc
c00089bc:	50                   	push   eax
c00089bd:	e8 e6 fe ff ff       	call   c00088a8 <src_reset>
c00089c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089c6:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00089cd:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00089d0:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00089d3:	83 c4 10             	add    esp,0x10
c00089d6:	5a                   	pop    edx
c00089d7:	89 d8                	mov    eax,ebx
c00089d9:	5b                   	pop    ebx
c00089da:	5e                   	pop    esi
c00089db:	c3                   	ret    

c00089dc <src_get_name>:
c00089dc:	53                   	push   ebx
c00089dd:	83 ec 14             	sub    esp,0x14
c00089e0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00089e4:	53                   	push   ebx
c00089e5:	e8 47 1f 00 00       	call   c000a931 <sinc_get_name>
c00089ea:	83 c4 10             	add    esp,0x10
c00089ed:	85 c0                	test   eax,eax
c00089ef:	75 1d                	jne    c0008a0e <src_get_name+0x32>
c00089f1:	83 ec 0c             	sub    esp,0xc
c00089f4:	53                   	push   ebx
c00089f5:	e8 4a 23 00 00       	call   c000ad44 <zoh_get_name>
c00089fa:	83 c4 10             	add    esp,0x10
c00089fd:	85 c0                	test   eax,eax
c00089ff:	75 0d                	jne    c0008a0e <src_get_name+0x32>
c0008a01:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a05:	83 c4 08             	add    esp,0x8
c0008a08:	5b                   	pop    ebx
c0008a09:	e9 36 05 00 00       	jmp    c0008f44 <linear_get_name>
c0008a0e:	83 c4 08             	add    esp,0x8
c0008a11:	5b                   	pop    ebx
c0008a12:	c3                   	ret    

c0008a13 <src_get_description>:
c0008a13:	53                   	push   ebx
c0008a14:	83 ec 14             	sub    esp,0x14
c0008a17:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a1b:	53                   	push   ebx
c0008a1c:	e8 23 1f 00 00       	call   c000a944 <sinc_get_description>
c0008a21:	83 c4 10             	add    esp,0x10
c0008a24:	85 c0                	test   eax,eax
c0008a26:	75 1d                	jne    c0008a45 <src_get_description+0x32>
c0008a28:	83 ec 0c             	sub    esp,0xc
c0008a2b:	53                   	push   ebx
c0008a2c:	e8 22 23 00 00       	call   c000ad53 <zoh_get_description>
c0008a31:	83 c4 10             	add    esp,0x10
c0008a34:	85 c0                	test   eax,eax
c0008a36:	75 0d                	jne    c0008a45 <src_get_description+0x32>
c0008a38:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a3c:	83 c4 08             	add    esp,0x8
c0008a3f:	5b                   	pop    ebx
c0008a40:	e9 0e 05 00 00       	jmp    c0008f53 <linear_get_description>
c0008a45:	83 c4 08             	add    esp,0x8
c0008a48:	5b                   	pop    ebx
c0008a49:	c3                   	ret    

c0008a4a <src_get_version>:
c0008a4a:	b8 c0 09 02 c0       	mov    eax,0xc00209c0
c0008a4f:	c3                   	ret    

c0008a50 <src_is_valid_ratio>:
c0008a50:	50                   	push   eax
c0008a51:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a55:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a59:	e8 84 fa ff ff       	call   c00084e2 <is_bad_src_ratio>
c0008a5e:	85 c0                	test   eax,eax
c0008a60:	0f 94 c0             	sete   al
c0008a63:	0f b6 c0             	movzx  eax,al
c0008a66:	83 c4 0c             	add    esp,0xc
c0008a69:	c3                   	ret    

c0008a6a <src_error>:
c0008a6a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a6e:	31 c0                	xor    eax,eax
c0008a70:	85 d2                	test   edx,edx
c0008a72:	74 03                	je     c0008a77 <src_error+0xd>
c0008a74:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008a77:	c3                   	ret    

c0008a78 <src_strerror>:
c0008a78:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a7c:	31 c0                	xor    eax,eax
c0008a7e:	83 fa 17             	cmp    edx,0x17
c0008a81:	77 07                	ja     c0008a8a <src_strerror+0x12>
c0008a83:	8b 04 95 20 0e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf1e0]
c0008a8a:	c3                   	ret    

c0008a8b <src_simple>:
c0008a8b:	56                   	push   esi
c0008a8c:	53                   	push   ebx
c0008a8d:	83 ec 18             	sub    esp,0x18
c0008a90:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a94:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a98:	50                   	push   eax
c0008a99:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a9d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008aa1:	e8 46 fe ff ff       	call   c00088ec <src_new>
c0008aa6:	83 c4 10             	add    esp,0x10
c0008aa9:	85 c0                	test   eax,eax
c0008aab:	75 06                	jne    c0008ab3 <src_simple+0x28>
c0008aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008ab1:	eb 25                	jmp    c0008ad8 <src_simple+0x4d>
c0008ab3:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008aba:	89 c3                	mov    ebx,eax
c0008abc:	50                   	push   eax
c0008abd:	50                   	push   eax
c0008abe:	56                   	push   esi
c0008abf:	53                   	push   ebx
c0008ac0:	e8 e1 fa ff ff       	call   c00085a6 <src_process>
c0008ac5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008ac8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008acc:	e8 99 fa ff ff       	call   c000856a <src_delete>
c0008ad1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ad5:	83 c4 10             	add    esp,0x10
c0008ad8:	83 c4 14             	add    esp,0x14
c0008adb:	5b                   	pop    ebx
c0008adc:	5e                   	pop    esi
c0008add:	c3                   	ret    

c0008ade <src_short_to_float_array>:
c0008ade:	83 ec 0c             	sub    esp,0xc
c0008ae1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ae5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ae9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008aed:	85 c0                	test   eax,eax
c0008aef:	74 0f                	je     c0008b00 <src_short_to_float_array+0x22>
c0008af1:	48                   	dec    eax
c0008af2:	d9 05 a4 0e 02 c0    	fld    DWORD PTR ds:0xc0020ea4
c0008af8:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008afb:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008afe:	eb ed                	jmp    c0008aed <src_short_to_float_array+0xf>
c0008b00:	83 c4 0c             	add    esp,0xc
c0008b03:	c3                   	ret    

c0008b04 <src_float_to_short_array>:
c0008b04:	56                   	push   esi
c0008b05:	53                   	push   ebx
c0008b06:	52                   	push   edx
c0008b07:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b0b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b0f:	85 db                	test   ebx,ebx
c0008b11:	74 51                	je     c0008b64 <src_float_to_short_array+0x60>
c0008b13:	4b                   	dec    ebx
c0008b14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b18:	d9 05 a8 0e 02 c0    	fld    DWORD PTR ds:0xc0020ea8
c0008b1e:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b21:	dc 15 98 0e 02 c0    	fcom   QWORD PTR ds:0xc0020e98
c0008b27:	df e0                	fnstsw ax
c0008b29:	9e                   	sahf   
c0008b2a:	72 0a                	jb     c0008b36 <src_float_to_short_array+0x32>
c0008b2c:	dd d8                	fstp   st(0)
c0008b2e:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008b34:	eb d9                	jmp    c0008b0f <src_float_to_short_array+0xb>
c0008b36:	d9 05 ac 0e 02 c0    	fld    DWORD PTR ds:0xc0020eac
c0008b3c:	d8 d9                	fcomp  st(1)
c0008b3e:	df e0                	fnstsw ax
c0008b40:	9e                   	sahf   
c0008b41:	72 0a                	jb     c0008b4d <src_float_to_short_array+0x49>
c0008b43:	dd d8                	fstp   st(0)
c0008b45:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008b4b:	eb c2                	jmp    c0008b0f <src_float_to_short_array+0xb>
c0008b4d:	83 ec 10             	sub    esp,0x10
c0008b50:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b53:	e8 f8 6b 01 00       	call   c001f750 <lrint>
c0008b58:	83 c4 10             	add    esp,0x10
c0008b5b:	c1 f8 10             	sar    eax,0x10
c0008b5e:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008b62:	eb ab                	jmp    c0008b0f <src_float_to_short_array+0xb>
c0008b64:	58                   	pop    eax
c0008b65:	5b                   	pop    ebx
c0008b66:	5e                   	pop    esi
c0008b67:	c3                   	ret    

c0008b68 <src_int_to_float_array>:
c0008b68:	83 ec 0c             	sub    esp,0xc
c0008b6b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008b6f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008b73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008b77:	85 c0                	test   eax,eax
c0008b79:	74 0f                	je     c0008b8a <src_int_to_float_array+0x22>
c0008b7b:	48                   	dec    eax
c0008b7c:	d9 05 b0 0e 02 c0    	fld    DWORD PTR ds:0xc0020eb0
c0008b82:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008b85:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008b88:	eb ed                	jmp    c0008b77 <src_int_to_float_array+0xf>
c0008b8a:	83 c4 0c             	add    esp,0xc
c0008b8d:	c3                   	ret    

c0008b8e <src_float_to_int_array>:
c0008b8e:	56                   	push   esi
c0008b8f:	53                   	push   ebx
c0008b90:	52                   	push   edx
c0008b91:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b95:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b99:	85 db                	test   ebx,ebx
c0008b9b:	74 4f                	je     c0008bec <src_float_to_int_array+0x5e>
c0008b9d:	4b                   	dec    ebx
c0008b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ba2:	d9 05 a8 0e 02 c0    	fld    DWORD PTR ds:0xc0020ea8
c0008ba8:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008bab:	dc 15 98 0e 02 c0    	fcom   QWORD PTR ds:0xc0020e98
c0008bb1:	df e0                	fnstsw ax
c0008bb3:	9e                   	sahf   
c0008bb4:	72 0b                	jb     c0008bc1 <src_float_to_int_array+0x33>
c0008bb6:	dd d8                	fstp   st(0)
c0008bb8:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008bbf:	eb d8                	jmp    c0008b99 <src_float_to_int_array+0xb>
c0008bc1:	d9 05 ac 0e 02 c0    	fld    DWORD PTR ds:0xc0020eac
c0008bc7:	d8 d9                	fcomp  st(1)
c0008bc9:	df e0                	fnstsw ax
c0008bcb:	9e                   	sahf   
c0008bcc:	72 0b                	jb     c0008bd9 <src_float_to_int_array+0x4b>
c0008bce:	dd d8                	fstp   st(0)
c0008bd0:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008bd7:	eb c0                	jmp    c0008b99 <src_float_to_int_array+0xb>
c0008bd9:	83 ec 10             	sub    esp,0x10
c0008bdc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008bdf:	e8 6c 6b 01 00       	call   c001f750 <lrint>
c0008be4:	83 c4 10             	add    esp,0x10
c0008be7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008bea:	eb ad                	jmp    c0008b99 <src_float_to_int_array+0xb>
c0008bec:	58                   	pop    eax
c0008bed:	5b                   	pop    ebx
c0008bee:	5e                   	pop    esi
c0008bef:	c3                   	ret    

c0008bf0 <is_bad_src_ratio>:
c0008bf0:	83 ec 0c             	sub    esp,0xc
c0008bf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf7:	89 04 24             	mov    DWORD PTR [esp],eax
c0008bfa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008bfe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c02:	dd 04 24             	fld    QWORD PTR [esp]
c0008c05:	dd 05 80 0e 02 c0    	fld    QWORD PTR ds:0xc0020e80
c0008c0b:	de d9                	fcompp 
c0008c0d:	df e0                	fnstsw ax
c0008c0f:	f6 c4 45             	test   ah,0x45
c0008c12:	74 10                	je     c0008c24 <is_bad_src_ratio+0x34>
c0008c14:	dd 04 24             	fld    QWORD PTR [esp]
c0008c17:	dc 1d 88 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e88
c0008c1d:	df e0                	fnstsw ax
c0008c1f:	f6 c4 45             	test   ah,0x45
c0008c22:	75 07                	jne    c0008c2b <is_bad_src_ratio+0x3b>
c0008c24:	b8 01 00 00 00       	mov    eax,0x1
c0008c29:	eb 05                	jmp    c0008c30 <is_bad_src_ratio+0x40>
c0008c2b:	b8 00 00 00 00       	mov    eax,0x0
c0008c30:	83 c4 0c             	add    esp,0xc
c0008c33:	c3                   	ret    

c0008c34 <fmod_one>:
c0008c34:	83 ec 2c             	sub    esp,0x2c
c0008c37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008c43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008c47:	83 ec 08             	sub    esp,0x8
c0008c4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c52:	e8 f9 6a 01 00       	call   c001f750 <lrint>
c0008c57:	83 c4 10             	add    esp,0x10
c0008c5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c5e:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008c62:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008c66:	de e1                	fsubrp st(1),st
c0008c68:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008c6c:	d9 ee                	fldz   
c0008c6e:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008c72:	df e0                	fnstsw ax
c0008c74:	f6 c4 45             	test   ah,0x45
c0008c77:	75 0a                	jne    c0008c83 <fmod_one+0x4f>
c0008c79:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c7d:	d9 e8                	fld1   
c0008c7f:	de c1                	faddp  st(1),st
c0008c81:	eb 04                	jmp    c0008c87 <fmod_one+0x53>
c0008c83:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c87:	83 c4 2c             	add    esp,0x2c
c0008c8a:	c3                   	ret    

c0008c8b <linear_vari_process>:
c0008c8b:	55                   	push   ebp
c0008c8c:	57                   	push   edi
c0008c8d:	56                   	push   esi
c0008c8e:	53                   	push   ebx
c0008c8f:	83 ec 2c             	sub    esp,0x2c
c0008c92:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008c96:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008c9a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008ca2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008ca6:	0f 8e 5a 02 00 00    	jle    c0008f06 <linear_vari_process+0x27b>
c0008cac:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008caf:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008cb7:	85 db                	test   ebx,ebx
c0008cb9:	0f 84 47 02 00 00    	je     c0008f06 <linear_vari_process+0x27b>
c0008cbf:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008cc2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008cc6:	74 19                	je     c0008ce1 <linear_vari_process+0x56>
c0008cc8:	31 d2                	xor    edx,edx
c0008cca:	39 c2                	cmp    edx,eax
c0008ccc:	7d 0c                	jge    c0008cda <linear_vari_process+0x4f>
c0008cce:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008cd0:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008cd3:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008cd7:	42                   	inc    edx
c0008cd8:	eb f0                	jmp    c0008cca <linear_vari_process+0x3f>
c0008cda:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008ce1:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008ce4:	0f af d0             	imul   edx,eax
c0008ce7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008cea:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008cee:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008cf5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008cf8:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008cff:	dd 07                	fld    QWORD PTR [edi]
c0008d01:	dd 14 24             	fst    QWORD PTR [esp]
c0008d04:	50                   	push   eax
c0008d05:	50                   	push   eax
c0008d06:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d09:	e8 e2 fe ff ff       	call   c0008bf0 <is_bad_src_ratio>
c0008d0e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008d12:	5a                   	pop    edx
c0008d13:	59                   	pop    ecx
c0008d14:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008d19:	0f 85 df 01 00 00    	jne    c0008efe <linear_vari_process+0x273>
c0008d1f:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008d22:	d9 e8                	fld1   
c0008d24:	d8 d1                	fcom   st(1)
c0008d26:	df e0                	fnstsw ax
c0008d28:	9e                   	sahf   
c0008d29:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008d2d:	0f 86 97 00 00 00    	jbe    c0008dca <linear_vari_process+0x13f>
c0008d33:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008d36:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008d39:	0f 8d 8b 00 00 00    	jge    c0008dca <linear_vari_process+0x13f>
c0008d3f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d43:	d8 c1                	fadd   st,st(1)
c0008d45:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d48:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008d4b:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008d4e:	df e0                	fnstsw ax
c0008d50:	9e                   	sahf   
c0008d51:	73 77                	jae    c0008dca <linear_vari_process+0x13f>
c0008d53:	85 d2                	test   edx,edx
c0008d55:	7e 36                	jle    c0008d8d <linear_vari_process+0x102>
c0008d57:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d5b:	dd 07                	fld    QWORD PTR [edi]
c0008d5d:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d60:	83 ec 10             	sub    esp,0x10
c0008d63:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d66:	e8 c5 69 01 00       	call   c001f730 <fabs>
c0008d6b:	83 c4 10             	add    esp,0x10
c0008d6e:	dc 1d f8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ef8
c0008d74:	df e0                	fnstsw ax
c0008d76:	9e                   	sahf   
c0008d77:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d7b:	76 10                	jbe    c0008d8d <linear_vari_process+0x102>
c0008d7d:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008d80:	dc 27                	fsub   QWORD PTR [edi]
c0008d82:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008d85:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008d88:	dc 07                	fadd   QWORD PTR [edi]
c0008d8a:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d8d:	31 c0                	xor    eax,eax
c0008d8f:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008d92:	7e 1f                	jle    c0008db3 <linear_vari_process+0x128>
c0008d94:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008d96:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008d99:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008d9d:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008da1:	d8 e1                	fsub   st,st(1)
c0008da3:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008da6:	40                   	inc    eax
c0008da7:	d8 ca                	fmul   st,st(2)
c0008da9:	de c1                	faddp  st(1),st
c0008dab:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008dae:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008db1:	eb dc                	jmp    c0008d8f <linear_vari_process+0x104>
c0008db3:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008db7:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008dba:	de c1                	faddp  st(1),st
c0008dbc:	e9 61 ff ff ff       	jmp    c0008d22 <linear_vari_process+0x97>
c0008dc1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008dc5:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008dc8:	de c1                	faddp  st(1),st
c0008dca:	83 ec 10             	sub    esp,0x10
c0008dcd:	dd 14 24             	fst    QWORD PTR [esp]
c0008dd0:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008dd4:	e8 5b fe ff ff       	call   c0008c34 <fmod_one>
c0008dd9:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008ddc:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008de0:	d8 e1                	fsub   st,st(1)
c0008de2:	d9 c9                	fxch   st(1)
c0008de4:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008de8:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008deb:	e8 60 69 01 00       	call   c001f750 <lrint>
c0008df0:	83 c4 10             	add    esp,0x10
c0008df3:	0f af e8             	imul   ebp,eax
c0008df6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008df9:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008dfc:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008e00:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008e03:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008e06:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008e09:	0f 8d 95 00 00 00    	jge    c0008ea4 <linear_vari_process+0x219>
c0008e0f:	d9 c0                	fld    st(0)
c0008e11:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008e14:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008e18:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008e1c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e20:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008e24:	de d9                	fcompp 
c0008e26:	df e0                	fnstsw ax
c0008e28:	9e                   	sahf   
c0008e29:	76 79                	jbe    c0008ea4 <linear_vari_process+0x219>
c0008e2b:	85 ed                	test   ebp,ebp
c0008e2d:	7e 36                	jle    c0008e65 <linear_vari_process+0x1da>
c0008e2f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008e33:	dd 07                	fld    QWORD PTR [edi]
c0008e35:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008e38:	83 ec 10             	sub    esp,0x10
c0008e3b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e3e:	e8 ed 68 01 00       	call   c001f730 <fabs>
c0008e43:	83 c4 10             	add    esp,0x10
c0008e46:	dc 1d f8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ef8
c0008e4c:	df e0                	fnstsw ax
c0008e4e:	9e                   	sahf   
c0008e4f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008e53:	76 10                	jbe    c0008e65 <linear_vari_process+0x1da>
c0008e55:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008e58:	dc 27                	fsub   QWORD PTR [edi]
c0008e5a:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008e5d:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008e60:	dc 07                	fadd   QWORD PTR [edi]
c0008e62:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e65:	31 c0                	xor    eax,eax
c0008e67:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008e6a:	39 c2                	cmp    edx,eax
c0008e6c:	0f 8e 4f ff ff ff    	jle    c0008dc1 <linear_vari_process+0x136>
c0008e72:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008e74:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008e77:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e7b:	89 e9                	mov    ecx,ebp
c0008e7d:	29 d1                	sub    ecx,edx
c0008e7f:	01 c5                	add    ebp,eax
c0008e81:	89 ca                	mov    edx,ecx
c0008e83:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008e87:	01 c2                	add    edx,eax
c0008e89:	40                   	inc    eax
c0008e8a:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008e8d:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008e90:	d8 e1                	fsub   st,st(1)
c0008e92:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008e95:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008e98:	d8 ca                	fmul   st,st(2)
c0008e9a:	de c1                	faddp  st(1),st
c0008e9c:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008e9f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008ea2:	eb c3                	jmp    c0008e67 <linear_vari_process+0x1dc>
c0008ea4:	39 d1                	cmp    ecx,edx
c0008ea6:	7d 13                	jge    c0008ebb <linear_vari_process+0x230>
c0008ea8:	89 d0                	mov    eax,edx
c0008eaa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008ead:	29 c8                	sub    eax,ecx
c0008eaf:	99                   	cdq    
c0008eb0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008eb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008eb7:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008ebb:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008ebe:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008ec1:	85 c0                	test   eax,eax
c0008ec3:	7f 1b                	jg     c0008ee0 <linear_vari_process+0x255>
c0008ec5:	dd 04 24             	fld    QWORD PTR [esp]
c0008ec8:	dd 1f                	fstp   QWORD PTR [edi]
c0008eca:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008ecd:	99                   	cdq    
c0008ece:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ed1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008ed4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008ed7:	99                   	cdq    
c0008ed8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008edb:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008ede:	eb 26                	jmp    c0008f06 <linear_vari_process+0x27b>
c0008ee0:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008ee3:	31 d2                	xor    edx,edx
c0008ee5:	29 c8                	sub    eax,ecx
c0008ee7:	c1 e0 02             	shl    eax,0x2
c0008eea:	39 d1                	cmp    ecx,edx
c0008eec:	7e d7                	jle    c0008ec5 <linear_vari_process+0x23a>
c0008eee:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008ef0:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008ef4:	83 c0 04             	add    eax,0x4
c0008ef7:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008efb:	42                   	inc    edx
c0008efc:	eb ec                	jmp    c0008eea <linear_vari_process+0x25f>
c0008efe:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008f06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008f0a:	83 c4 2c             	add    esp,0x2c
c0008f0d:	5b                   	pop    ebx
c0008f0e:	5e                   	pop    esi
c0008f0f:	5f                   	pop    edi
c0008f10:	5d                   	pop    ebp
c0008f11:	c3                   	ret    

c0008f12 <linear_reset>:
c0008f12:	83 ec 0c             	sub    esp,0xc
c0008f15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008f19:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008f1c:	85 c0                	test   eax,eax
c0008f1e:	74 20                	je     c0008f40 <linear_reset+0x2e>
c0008f20:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008f23:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c0008f2a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f2d:	51                   	push   ecx
c0008f2e:	c1 e2 02             	shl    edx,0x2
c0008f31:	83 c0 1c             	add    eax,0x1c
c0008f34:	52                   	push   edx
c0008f35:	6a 00                	push   0x0
c0008f37:	50                   	push   eax
c0008f38:	e8 87 77 ff ff       	call   c00006c4 <memset>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	83 c4 0c             	add    esp,0xc
c0008f43:	c3                   	ret    

c0008f44 <linear_get_name>:
c0008f44:	31 c0                	xor    eax,eax
c0008f46:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f4b:	75 05                	jne    c0008f52 <linear_get_name+0xe>
c0008f4d:	b8 b4 0e 02 c0       	mov    eax,0xc0020eb4
c0008f52:	c3                   	ret    

c0008f53 <linear_get_description>:
c0008f53:	31 c0                	xor    eax,eax
c0008f55:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f5a:	75 05                	jne    c0008f61 <linear_get_description+0xe>
c0008f5c:	b8 c8 0e 02 c0       	mov    eax,0xc0020ec8
c0008f61:	c3                   	ret    

c0008f62 <linear_set_converter>:
c0008f62:	53                   	push   ebx
c0008f63:	b8 0a 00 00 00       	mov    eax,0xa
c0008f68:	83 ec 08             	sub    esp,0x8
c0008f6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008f6f:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008f74:	75 6e                	jne    c0008fe4 <linear_set_converter+0x82>
c0008f76:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008f79:	85 c0                	test   eax,eax
c0008f7b:	74 13                	je     c0008f90 <linear_set_converter+0x2e>
c0008f7d:	83 ec 0c             	sub    esp,0xc
c0008f80:	50                   	push   eax
c0008f81:	e8 6d 30 00 00       	call   c000bff3 <free>
c0008f86:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008f8d:	83 c4 10             	add    esp,0x10
c0008f90:	50                   	push   eax
c0008f91:	50                   	push   eax
c0008f92:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f95:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008f9c:	50                   	push   eax
c0008f9d:	6a 01                	push   0x1
c0008f9f:	e8 6f 30 00 00       	call   c000c013 <calloc>
c0008fa4:	89 c2                	mov    edx,eax
c0008fa6:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008fa9:	83 c4 10             	add    esp,0x10
c0008fac:	b8 01 00 00 00       	mov    eax,0x1
c0008fb1:	85 d2                	test   edx,edx
c0008fb3:	74 2f                	je     c0008fe4 <linear_set_converter+0x82>
c0008fb5:	83 ec 0c             	sub    esp,0xc
c0008fb8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008fbb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008fbe:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008fc4:	c7 43 24 8b 8c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008c8b
c0008fcb:	c7 43 20 8b 8c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008c8b
c0008fd2:	c7 43 28 12 8f 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008f12
c0008fd9:	53                   	push   ebx
c0008fda:	e8 33 ff ff ff       	call   c0008f12 <linear_reset>
c0008fdf:	83 c4 10             	add    esp,0x10
c0008fe2:	31 c0                	xor    eax,eax
c0008fe4:	83 c4 08             	add    esp,0x8
c0008fe7:	5b                   	pop    ebx
c0008fe8:	c3                   	ret    

c0008fe9 <is_bad_src_ratio>:
c0008fe9:	83 ec 0c             	sub    esp,0xc
c0008fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ff0:	89 04 24             	mov    DWORD PTR [esp],eax
c0008ff3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008ff7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ffb:	dd 04 24             	fld    QWORD PTR [esp]
c0008ffe:	dd 05 80 0e 02 c0    	fld    QWORD PTR ds:0xc0020e80
c0009004:	de d9                	fcompp 
c0009006:	df e0                	fnstsw ax
c0009008:	f6 c4 45             	test   ah,0x45
c000900b:	74 10                	je     c000901d <is_bad_src_ratio+0x34>
c000900d:	dd 04 24             	fld    QWORD PTR [esp]
c0009010:	dc 1d 88 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e88
c0009016:	df e0                	fnstsw ax
c0009018:	f6 c4 45             	test   ah,0x45
c000901b:	75 07                	jne    c0009024 <is_bad_src_ratio+0x3b>
c000901d:	b8 01 00 00 00       	mov    eax,0x1
c0009022:	eb 05                	jmp    c0009029 <is_bad_src_ratio+0x40>
c0009024:	b8 00 00 00 00       	mov    eax,0x0
c0009029:	83 c4 0c             	add    esp,0xc
c000902c:	c3                   	ret    

c000902d <int_to_fp>:
c000902d:	c1 e0 0c             	shl    eax,0xc
c0009030:	c3                   	ret    

c0009031 <fp_to_int>:
c0009031:	c1 f8 0c             	sar    eax,0xc
c0009034:	c3                   	ret    

c0009035 <fp_fraction_part>:
c0009035:	25 ff 0f 00 00       	and    eax,0xfff
c000903a:	c3                   	ret    

c000903b <fp_to_double>:
c000903b:	83 ec 0c             	sub    esp,0xc
c000903e:	e8 f2 ff ff ff       	call   c0009035 <fp_fraction_part>
c0009043:	d9 05 88 10 02 c0    	fld    DWORD PTR ds:0xc0021088
c0009049:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000904d:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0009051:	83 c4 0c             	add    esp,0xc
c0009054:	c3                   	ret    

c0009055 <calc_output_single>:
c0009055:	55                   	push   ebp
c0009056:	57                   	push   edi
c0009057:	89 c7                	mov    edi,eax
c0009059:	56                   	push   esi
c000905a:	53                   	push   ebx
c000905b:	89 d3                	mov    ebx,edx
c000905d:	83 ec 24             	sub    esp,0x24
c0009060:	89 de                	mov    esi,ebx
c0009062:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009065:	e8 c3 ff ff ff       	call   c000902d <int_to_fp>
c000906a:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c000906d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009071:	29 c8                	sub    eax,ecx
c0009073:	99                   	cdq    
c0009074:	f7 fb                	idiv   ebx
c0009076:	0f af f0             	imul   esi,eax
c0009079:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c000907c:	01 ce                	add    esi,ecx
c000907e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009082:	29 c2                	sub    edx,eax
c0009084:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000908b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0009093:	8d 14 97             	lea    edx,[edi+edx*4]
c0009096:	89 f0                	mov    eax,esi
c0009098:	e8 9e ff ff ff       	call   c000903b <fp_to_double>
c000909d:	89 f0                	mov    eax,esi
c000909f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00090a3:	e8 89 ff ff ff       	call   c0009031 <fp_to_int>
c00090a8:	83 c2 04             	add    edx,0x4
c00090ab:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00090af:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00090b3:	d8 e1                	fsub   st,st(1)
c00090b5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00090b9:	de c9                	fmulp  st(1),st
c00090bb:	de c1                	faddp  st(1),st
c00090bd:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00090c3:	29 de                	sub    esi,ebx
c00090c5:	dc 04 24             	fadd   QWORD PTR [esp]
c00090c8:	dd 1c 24             	fstp   QWORD PTR [esp]
c00090cb:	79 c9                	jns    c0009096 <calc_output_single+0x41>
c00090cd:	89 d8                	mov    eax,ebx
c00090cf:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00090d3:	29 c8                	sub    eax,ecx
c00090d5:	89 c1                	mov    ecx,eax
c00090d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090db:	29 c8                	sub    eax,ecx
c00090dd:	99                   	cdq    
c00090de:	f7 fb                	idiv   ebx
c00090e0:	89 da                	mov    edx,ebx
c00090e2:	0f af d0             	imul   edx,eax
c00090e5:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c00090e9:	01 d1                	add    ecx,edx
c00090eb:	d9 ee                	fldz   
c00090ed:	8d 14 87             	lea    edx,[edi+eax*4]
c00090f0:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00090f4:	89 c8                	mov    eax,ecx
c00090f6:	e8 40 ff ff ff       	call   c000903b <fp_to_double>
c00090fb:	89 c8                	mov    eax,ecx
c00090fd:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009101:	e8 2b ff ff ff       	call   c0009031 <fp_to_int>
c0009106:	29 d9                	sub    ecx,ebx
c0009108:	83 ea 04             	sub    edx,0x4
c000910b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000910f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009113:	d8 e1                	fsub   st,st(1)
c0009115:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009119:	de c9                	fmulp  st(1),st
c000911b:	de c1                	faddp  st(1),st
c000911d:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009123:	85 c9                	test   ecx,ecx
c0009125:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009129:	de c1                	faddp  st(1),st
c000912b:	7f c3                	jg     c00090f0 <calc_output_single+0x9b>
c000912d:	dd 04 24             	fld    QWORD PTR [esp]
c0009130:	de c1                	faddp  st(1),st
c0009132:	83 c4 24             	add    esp,0x24
c0009135:	5b                   	pop    ebx
c0009136:	5e                   	pop    esi
c0009137:	5f                   	pop    edi
c0009138:	5d                   	pop    ebp
c0009139:	c3                   	ret    

c000913a <calc_output_stereo>:
c000913a:	55                   	push   ebp
c000913b:	57                   	push   edi
c000913c:	89 c7                	mov    edi,eax
c000913e:	56                   	push   esi
c000913f:	53                   	push   ebx
c0009140:	89 d3                	mov    ebx,edx
c0009142:	83 ec 44             	sub    esp,0x44
c0009145:	89 de                	mov    esi,ebx
c0009147:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000914a:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000914e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009152:	e8 d6 fe ff ff       	call   c000902d <int_to_fp>
c0009157:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c000915a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000915e:	29 c8                	sub    eax,ecx
c0009160:	99                   	cdq    
c0009161:	f7 fb                	idiv   ebx
c0009163:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009166:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000916e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009172:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009175:	0f af f0             	imul   esi,eax
c0009178:	0f af c2             	imul   eax,edx
c000917b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000917f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009183:	d9 ee                	fldz   
c0009185:	29 c2                	sub    edx,eax
c0009187:	01 ce                	add    esi,ecx
c0009189:	dd 1c 24             	fstp   QWORD PTR [esp]
c000918c:	8d 14 97             	lea    edx,[edi+edx*4]
c000918f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009197:	89 f0                	mov    eax,esi
c0009199:	e8 9d fe ff ff       	call   c000903b <fp_to_double>
c000919e:	89 f0                	mov    eax,esi
c00091a0:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00091a4:	e8 88 fe ff ff       	call   c0009031 <fp_to_int>
c00091a9:	83 c2 08             	add    edx,0x8
c00091ac:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00091b0:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00091b4:	d8 e1                	fsub   st,st(1)
c00091b6:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00091ba:	de c9                	fmulp  st(1),st
c00091bc:	de c1                	faddp  st(1),st
c00091be:	d9 c0                	fld    st(0)
c00091c0:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c00091c6:	dc 04 24             	fadd   QWORD PTR [esp]
c00091c9:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091cc:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00091d2:	29 de                	sub    esi,ebx
c00091d4:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00091d8:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00091dc:	79 b9                	jns    c0009197 <calc_output_stereo+0x5d>
c00091de:	89 d8                	mov    eax,ebx
c00091e0:	29 c8                	sub    eax,ecx
c00091e2:	89 c1                	mov    ecx,eax
c00091e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091e8:	29 c8                	sub    eax,ecx
c00091ea:	99                   	cdq    
c00091eb:	f7 fb                	idiv   ebx
c00091ed:	89 da                	mov    edx,ebx
c00091ef:	0f af d0             	imul   edx,eax
c00091f2:	40                   	inc    eax
c00091f3:	01 d1                	add    ecx,edx
c00091f5:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
c00091fa:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00091fe:	d9 ee                	fldz   
c0009200:	d9 ee                	fldz   
c0009202:	8d 14 87             	lea    edx,[edi+eax*4]
c0009205:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009209:	89 c8                	mov    eax,ecx
c000920b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000920f:	e8 27 fe ff ff       	call   c000903b <fp_to_double>
c0009214:	89 c8                	mov    eax,ecx
c0009216:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000921a:	e8 12 fe ff ff       	call   c0009031 <fp_to_int>
c000921f:	29 d9                	sub    ecx,ebx
c0009221:	83 ea 08             	sub    edx,0x8
c0009224:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009228:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000922c:	d8 e1                	fsub   st,st(1)
c000922e:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009232:	de c9                	fmulp  st(1),st
c0009234:	de c1                	faddp  st(1),st
c0009236:	d9 c0                	fld    st(0)
c0009238:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c000923e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009242:	de c1                	faddp  st(1),st
c0009244:	d9 c9                	fxch   st(1)
c0009246:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c000924c:	85 c9                	test   ecx,ecx
c000924e:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009252:	de c1                	faddp  st(1),st
c0009254:	7f af                	jg     c0009205 <calc_output_stereo+0xcb>
c0009256:	dd 04 24             	fld    QWORD PTR [esp]
c0009259:	de c2                	faddp  st(2),st
c000925b:	d9 c9                	fxch   st(1)
c000925d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009261:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009265:	d9 18                	fstp   DWORD PTR [eax]
c0009267:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000926b:	de c1                	faddp  st(1),st
c000926d:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009271:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c0009274:	83 c4 44             	add    esp,0x44
c0009277:	5b                   	pop    ebx
c0009278:	5e                   	pop    esi
c0009279:	5f                   	pop    edi
c000927a:	5d                   	pop    ebp
c000927b:	c3                   	ret    

c000927c <calc_output_quad>:
c000927c:	55                   	push   ebp
c000927d:	57                   	push   edi
c000927e:	56                   	push   esi
c000927f:	89 c6                	mov    esi,eax
c0009281:	53                   	push   ebx
c0009282:	89 d3                	mov    ebx,edx
c0009284:	83 ec 5c             	sub    esp,0x5c
c0009287:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000928a:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c000928e:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0009292:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009295:	e8 93 fd ff ff       	call   c000902d <int_to_fp>
c000929a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c000929d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00092a1:	29 c8                	sub    eax,ecx
c00092a3:	99                   	cdq    
c00092a4:	f7 fb                	idiv   ebx
c00092a6:	89 da                	mov    edx,ebx
c00092a8:	0f af d0             	imul   edx,eax
c00092ab:	01 ca                	add    edx,ecx
c00092ad:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00092b1:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c00092b4:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00092b8:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00092bb:	0f af c2             	imul   eax,edx
c00092be:	d9 ee                	fldz   
c00092c0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00092c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00092c8:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00092cc:	29 c2                	sub    edx,eax
c00092ce:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00092d2:	8d 14 96             	lea    edx,[esi+edx*4]
c00092d5:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00092d9:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092e1:	e8 55 fd ff ff       	call   c000903b <fp_to_double>
c00092e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092ea:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092ee:	e8 3e fd ff ff       	call   c0009031 <fp_to_int>
c00092f3:	83 c2 10             	add    edx,0x10
c00092f6:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00092fa:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00092fe:	d8 e1                	fsub   st,st(1)
c0009300:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009304:	de c9                	fmulp  st(1),st
c0009306:	de c1                	faddp  st(1),st
c0009308:	d9 c0                	fld    st(0)
c000930a:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009310:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009314:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009318:	d9 c0                	fld    st(0)
c000931a:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009320:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009324:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009328:	d9 c0                	fld    st(0)
c000932a:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009330:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009334:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009338:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000933e:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c0009342:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0009346:	de c1                	faddp  st(1),st
c0009348:	79 8f                	jns    c00092d9 <calc_output_quad+0x5d>
c000934a:	89 d8                	mov    eax,ebx
c000934c:	29 c8                	sub    eax,ecx
c000934e:	89 c1                	mov    ecx,eax
c0009350:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009354:	29 c8                	sub    eax,ecx
c0009356:	99                   	cdq    
c0009357:	f7 fb                	idiv   ebx
c0009359:	89 da                	mov    edx,ebx
c000935b:	0f af d0             	imul   edx,eax
c000935e:	40                   	inc    eax
c000935f:	01 d1                	add    ecx,edx
c0009361:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009366:	d9 ee                	fldz   
c0009368:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c000936c:	d9 ee                	fldz   
c000936e:	d9 ee                	fldz   
c0009370:	d9 ee                	fldz   
c0009372:	8d 14 86             	lea    edx,[esi+eax*4]
c0009375:	eb 0a                	jmp    c0009381 <calc_output_quad+0x105>
c0009377:	d9 cc                	fxch   st(4)
c0009379:	d9 ca                	fxch   st(2)
c000937b:	d9 c9                	fxch   st(1)
c000937d:	d9 cb                	fxch   st(3)
c000937f:	d9 c9                	fxch   st(1)
c0009381:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0009385:	d9 c9                	fxch   st(1)
c0009387:	89 c8                	mov    eax,ecx
c0009389:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000938d:	d9 c9                	fxch   st(1)
c000938f:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009393:	d9 c9                	fxch   st(1)
c0009395:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009399:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000939d:	e8 99 fc ff ff       	call   c000903b <fp_to_double>
c00093a2:	89 c8                	mov    eax,ecx
c00093a4:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00093a8:	e8 84 fc ff ff       	call   c0009031 <fp_to_int>
c00093ad:	29 d9                	sub    ecx,ebx
c00093af:	83 ea 10             	sub    edx,0x10
c00093b2:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00093b6:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00093ba:	d8 e1                	fsub   st,st(1)
c00093bc:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00093c0:	de c9                	fmulp  st(1),st
c00093c2:	de c1                	faddp  st(1),st
c00093c4:	d9 c0                	fld    st(0)
c00093c6:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c00093cc:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00093d0:	de c1                	faddp  st(1),st
c00093d2:	d9 c1                	fld    st(1)
c00093d4:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c00093da:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00093de:	de c1                	faddp  st(1),st
c00093e0:	d9 c2                	fld    st(2)
c00093e2:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00093e8:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00093ec:	de c1                	faddp  st(1),st
c00093ee:	d9 cb                	fxch   st(3)
c00093f0:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c00093f6:	85 c9                	test   ecx,ecx
c00093f8:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00093fc:	de c1                	faddp  st(1),st
c00093fe:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009402:	0f 8f 6f ff ff ff    	jg     c0009377 <calc_output_quad+0xfb>
c0009408:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000940c:	de c4                	faddp  st(4),st
c000940e:	d9 cb                	fxch   st(3)
c0009410:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009413:	d9 1f                	fstp   DWORD PTR [edi]
c0009415:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009419:	de c2                	faddp  st(2),st
c000941b:	d9 c9                	fxch   st(1)
c000941d:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009420:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009423:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009427:	de c3                	faddp  st(3),st
c0009429:	d9 ca                	fxch   st(2)
c000942b:	dc 0c 24             	fmul   QWORD PTR [esp]
c000942e:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009431:	de c1                	faddp  st(1),st
c0009433:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009436:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c0009439:	83 c4 5c             	add    esp,0x5c
c000943c:	5b                   	pop    ebx
c000943d:	5e                   	pop    esi
c000943e:	5f                   	pop    edi
c000943f:	5d                   	pop    ebp
c0009440:	c3                   	ret    

c0009441 <calc_output_hex>:
c0009441:	55                   	push   ebp
c0009442:	57                   	push   edi
c0009443:	89 c7                	mov    edi,eax
c0009445:	56                   	push   esi
c0009446:	53                   	push   ebx
c0009447:	89 d3                	mov    ebx,edx
c0009449:	83 ec 7c             	sub    esp,0x7c
c000944c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000944f:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c0009456:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000945d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009460:	e8 c8 fb ff ff       	call   c000902d <int_to_fp>
c0009465:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0009468:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000946c:	29 c8                	sub    eax,ecx
c000946e:	99                   	cdq    
c000946f:	f7 fb                	idiv   ebx
c0009471:	89 da                	mov    edx,ebx
c0009473:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c000947b:	0f af d0             	imul   edx,eax
c000947e:	01 ca                	add    edx,ecx
c0009480:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0009488:	d9 ee                	fldz   
c000948a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000948e:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009491:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009495:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009498:	0f af c2             	imul   eax,edx
c000949b:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c000949f:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00094a3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00094a7:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00094ab:	29 c2                	sub    edx,eax
c00094ad:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00094b1:	8d 14 97             	lea    edx,[edi+edx*4]
c00094b4:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00094b8:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00094bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094c0:	e8 76 fb ff ff       	call   c000903b <fp_to_double>
c00094c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094c9:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094cd:	e8 5f fb ff ff       	call   c0009031 <fp_to_int>
c00094d2:	83 c2 18             	add    edx,0x18
c00094d5:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00094d9:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00094dd:	d8 e1                	fsub   st,st(1)
c00094df:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00094e3:	de c9                	fmulp  st(1),st
c00094e5:	de c1                	faddp  st(1),st
c00094e7:	d9 c0                	fld    st(0)
c00094e9:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c00094ef:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00094f3:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00094f7:	d9 c0                	fld    st(0)
c00094f9:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c00094ff:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009503:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009507:	d9 c0                	fld    st(0)
c0009509:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c000950f:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009513:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009517:	d9 c0                	fld    st(0)
c0009519:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c000951f:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009523:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009527:	d9 c0                	fld    st(0)
c0009529:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000952f:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009533:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009537:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000953d:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009541:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009545:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009549:	0f 89 6d ff ff ff    	jns    c00094bc <calc_output_hex+0x7b>
c000954f:	89 d8                	mov    eax,ebx
c0009551:	29 c8                	sub    eax,ecx
c0009553:	89 c1                	mov    ecx,eax
c0009555:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009559:	29 c8                	sub    eax,ecx
c000955b:	99                   	cdq    
c000955c:	f7 fb                	idiv   ebx
c000955e:	89 da                	mov    edx,ebx
c0009560:	0f af d0             	imul   edx,eax
c0009563:	40                   	inc    eax
c0009564:	01 d1                	add    ecx,edx
c0009566:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000956b:	d9 ee                	fldz   
c000956d:	d9 ee                	fldz   
c000956f:	d9 ee                	fldz   
c0009571:	d9 ca                	fxch   st(2)
c0009573:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
c0009577:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c000957b:	d9 ee                	fldz   
c000957d:	8d 14 87             	lea    edx,[edi+eax*4]
c0009580:	d9 ee                	fldz   
c0009582:	d9 ca                	fxch   st(2)
c0009584:	eb 0a                	jmp    c0009590 <calc_output_hex+0x14f>
c0009586:	d9 c9                	fxch   st(1)
c0009588:	d9 cc                	fxch   st(4)
c000958a:	d9 cb                	fxch   st(3)
c000958c:	d9 ca                	fxch   st(2)
c000958e:	d9 c9                	fxch   st(1)
c0009590:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c0009594:	89 c8                	mov    eax,ecx
c0009596:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c000959a:	d9 ca                	fxch   st(2)
c000959c:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00095a0:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00095a4:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00095a8:	e8 8e fa ff ff       	call   c000903b <fp_to_double>
c00095ad:	89 c8                	mov    eax,ecx
c00095af:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00095b3:	e8 79 fa ff ff       	call   c0009031 <fp_to_int>
c00095b8:	29 d9                	sub    ecx,ebx
c00095ba:	83 ea 18             	sub    edx,0x18
c00095bd:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00095c1:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00095c5:	d8 e1                	fsub   st,st(1)
c00095c7:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00095cb:	de c9                	fmulp  st(1),st
c00095cd:	de c1                	faddp  st(1),st
c00095cf:	d9 c0                	fld    st(0)
c00095d1:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00095d7:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00095db:	de c1                	faddp  st(1),st
c00095dd:	d9 c1                	fld    st(1)
c00095df:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c00095e5:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c00095e9:	de c1                	faddp  st(1),st
c00095eb:	d9 c2                	fld    st(2)
c00095ed:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c00095f3:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00095f7:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00095fb:	d9 c2                	fld    st(2)
c00095fd:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009603:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0009607:	de c1                	faddp  st(1),st
c0009609:	d9 c3                	fld    st(3)
c000960b:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009611:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009615:	de c1                	faddp  st(1),st
c0009617:	d9 cc                	fxch   st(4)
c0009619:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c000961f:	85 c9                	test   ecx,ecx
c0009621:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009625:	de c1                	faddp  st(1),st
c0009627:	0f 8f 59 ff ff ff    	jg     c0009586 <calc_output_hex+0x145>
c000962d:	d9 cb                	fxch   st(3)
c000962f:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009633:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009636:	d9 1e                	fstp   DWORD PTR [esi]
c0009638:	d9 c9                	fxch   st(1)
c000963a:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c000963e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009641:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c0009644:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009648:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c000964c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000964f:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c0009652:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009656:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009659:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c000965c:	d9 c9                	fxch   st(1)
c000965e:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009662:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009665:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c0009668:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c000966c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000966f:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c0009672:	83 c4 7c             	add    esp,0x7c
c0009675:	5b                   	pop    ebx
c0009676:	5e                   	pop    esi
c0009677:	5f                   	pop    edi
c0009678:	5d                   	pop    ebp
c0009679:	c3                   	ret    

c000967a <sinc_reset>:
c000967a:	56                   	push   esi
c000967b:	53                   	push   ebx
c000967c:	51                   	push   ecx
c000967d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009681:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009684:	85 db                	test   ebx,ebx
c0009686:	74 51                	je     c00096d9 <sinc_reset+0x5f>
c0009688:	d9 ee                	fldz   
c000968a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0009691:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0009698:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c000969b:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c00096a2:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c00096a8:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c00096ab:	52                   	push   edx
c00096ac:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096af:	c1 e0 02             	shl    eax,0x2
c00096b2:	50                   	push   eax
c00096b3:	6a 00                	push   0x0
c00096b5:	56                   	push   esi
c00096b6:	e8 09 70 ff ff       	call   c00006c4 <memset>
c00096bb:	83 c4 0c             	add    esp,0xc
c00096be:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00096c1:	c1 e0 02             	shl    eax,0x2
c00096c4:	50                   	push   eax
c00096c5:	68 aa 00 00 00       	push   0xaa
c00096ca:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096cd:	8d 04 86             	lea    eax,[esi+eax*4]
c00096d0:	50                   	push   eax
c00096d1:	e8 ee 6f ff ff       	call   c00006c4 <memset>
c00096d6:	83 c4 10             	add    esp,0x10
c00096d9:	58                   	pop    eax
c00096da:	5b                   	pop    ebx
c00096db:	5e                   	pop    esi
c00096dc:	c3                   	ret    

c00096dd <calc_output_multi>:
c00096dd:	55                   	push   ebp
c00096de:	57                   	push   edi
c00096df:	8d 78 44             	lea    edi,[eax+0x44]
c00096e2:	56                   	push   esi
c00096e3:	89 c6                	mov    esi,eax
c00096e5:	53                   	push   ebx
c00096e6:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c00096ec:	83 ec 4c             	sub    esp,0x4c
c00096ef:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c00096f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00096f7:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00096fa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00096fe:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009702:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009706:	e8 22 f9 ff ff       	call   c000902d <int_to_fp>
c000970b:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000970f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009713:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0009717:	99                   	cdq    
c0009718:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c000971c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009720:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c0009723:	0f af d0             	imul   edx,eax
c0009726:	0f af c3             	imul   eax,ebx
c0009729:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000972d:	29 c5                	sub    ebp,eax
c000972f:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009736:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000973a:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000973e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009742:	52                   	push   edx
c0009743:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009747:	6a 00                	push   0x0
c0009749:	57                   	push   edi
c000974a:	e8 75 6f ff ff       	call   c00006c4 <memset>
c000974f:	83 c4 10             	add    esp,0x10
c0009752:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009756:	e8 e0 f8 ff ff       	call   c000903b <fp_to_double>
c000975b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000975f:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009763:	e8 c9 f8 ff ff       	call   c0009031 <fp_to_int>
c0009768:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000976b:	89 d9                	mov    ecx,ebx
c000976d:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009770:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009774:	d8 e1                	fsub   st,st(1)
c0009776:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000977a:	de c9                	fmulp  st(1),st
c000977c:	de c1                	faddp  st(1),st
c000977e:	89 c8                	mov    eax,ecx
c0009780:	bd 08 00 00 00       	mov    ebp,0x8
c0009785:	99                   	cdq    
c0009786:	f7 fd                	idiv   ebp
c0009788:	4a                   	dec    edx
c0009789:	83 fa 06             	cmp    edx,0x6
c000978c:	77 07                	ja     c0009795 <calc_output_multi+0xb8>
c000978e:	ff 24 95 00 0f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf100]
c0009795:	49                   	dec    ecx
c0009796:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000979a:	d9 c0                	fld    st(0)
c000979c:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097a3:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097a6:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097aa:	dc 00                	fadd   QWORD PTR [eax]
c00097ac:	dd 18                	fstp   QWORD PTR [eax]
c00097ae:	49                   	dec    ecx
c00097af:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097b3:	d9 c0                	fld    st(0)
c00097b5:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097bc:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097bf:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097c3:	dc 00                	fadd   QWORD PTR [eax]
c00097c5:	dd 18                	fstp   QWORD PTR [eax]
c00097c7:	49                   	dec    ecx
c00097c8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097cc:	d9 c0                	fld    st(0)
c00097ce:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097d5:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097d8:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097dc:	dc 00                	fadd   QWORD PTR [eax]
c00097de:	dd 18                	fstp   QWORD PTR [eax]
c00097e0:	49                   	dec    ecx
c00097e1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097e5:	d9 c0                	fld    st(0)
c00097e7:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097ee:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097f1:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097f5:	dc 00                	fadd   QWORD PTR [eax]
c00097f7:	dd 18                	fstp   QWORD PTR [eax]
c00097f9:	49                   	dec    ecx
c00097fa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097fe:	d9 c0                	fld    st(0)
c0009800:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009807:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000980a:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000980e:	dc 00                	fadd   QWORD PTR [eax]
c0009810:	dd 18                	fstp   QWORD PTR [eax]
c0009812:	49                   	dec    ecx
c0009813:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009817:	d9 c0                	fld    st(0)
c0009819:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009820:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009823:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009827:	dc 00                	fadd   QWORD PTR [eax]
c0009829:	dd 18                	fstp   QWORD PTR [eax]
c000982b:	49                   	dec    ecx
c000982c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009830:	d9 c0                	fld    st(0)
c0009832:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009839:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000983c:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009840:	dc 00                	fadd   QWORD PTR [eax]
c0009842:	dd 18                	fstp   QWORD PTR [eax]
c0009844:	49                   	dec    ecx
c0009845:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009849:	d9 c0                	fld    st(0)
c000984b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009852:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009855:	85 c9                	test   ecx,ecx
c0009857:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000985b:	dc 00                	fadd   QWORD PTR [eax]
c000985d:	dd 18                	fstp   QWORD PTR [eax]
c000985f:	0f 8f 19 ff ff ff    	jg     c000977e <calc_output_multi+0xa1>
c0009865:	dd d8                	fstp   st(0)
c0009867:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000986b:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c000986f:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c0009873:	0f 89 d9 fe ff ff    	jns    c0009752 <calc_output_multi+0x75>
c0009879:	89 d1                	mov    ecx,edx
c000987b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000987f:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c0009883:	29 c8                	sub    eax,ecx
c0009885:	99                   	cdq    
c0009886:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c000988a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000988e:	0f af d0             	imul   edx,eax
c0009891:	40                   	inc    eax
c0009892:	01 d1                	add    ecx,edx
c0009894:	0f af c3             	imul   eax,ebx
c0009897:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000989a:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000989e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098a2:	50                   	push   eax
c00098a3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00098a7:	6a 00                	push   0x0
c00098a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00098ad:	e8 12 6e ff ff       	call   c00006c4 <memset>
c00098b2:	83 c4 10             	add    esp,0x10
c00098b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00098b9:	e8 7d f7 ff ff       	call   c000903b <fp_to_double>
c00098be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00098c2:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00098c6:	e8 66 f7 ff ff       	call   c0009031 <fp_to_int>
c00098cb:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00098ce:	89 d9                	mov    ecx,ebx
c00098d0:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00098d3:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00098d7:	d8 e1                	fsub   st,st(1)
c00098d9:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00098dd:	de c9                	fmulp  st(1),st
c00098df:	de c1                	faddp  st(1),st
c00098e1:	89 c8                	mov    eax,ecx
c00098e3:	bd 08 00 00 00       	mov    ebp,0x8
c00098e8:	99                   	cdq    
c00098e9:	f7 fd                	idiv   ebp
c00098eb:	4a                   	dec    edx
c00098ec:	83 fa 06             	cmp    edx,0x6
c00098ef:	77 07                	ja     c00098f8 <calc_output_multi+0x21b>
c00098f1:	ff 24 95 1c 0f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf0e4]
c00098f8:	49                   	dec    ecx
c00098f9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00098fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009901:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009908:	d9 c0                	fld    st(0)
c000990a:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000990e:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009911:	dc 00                	fadd   QWORD PTR [eax]
c0009913:	dd 18                	fstp   QWORD PTR [eax]
c0009915:	49                   	dec    ecx
c0009916:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000991a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000991e:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009925:	d9 c0                	fld    st(0)
c0009927:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000992b:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000992e:	dc 00                	fadd   QWORD PTR [eax]
c0009930:	dd 18                	fstp   QWORD PTR [eax]
c0009932:	49                   	dec    ecx
c0009933:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009937:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000993b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009942:	d9 c0                	fld    st(0)
c0009944:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009948:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000994b:	dc 00                	fadd   QWORD PTR [eax]
c000994d:	dd 18                	fstp   QWORD PTR [eax]
c000994f:	49                   	dec    ecx
c0009950:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009954:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009958:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000995f:	d9 c0                	fld    st(0)
c0009961:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009965:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009968:	dc 00                	fadd   QWORD PTR [eax]
c000996a:	dd 18                	fstp   QWORD PTR [eax]
c000996c:	49                   	dec    ecx
c000996d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009971:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009975:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000997c:	d9 c0                	fld    st(0)
c000997e:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009982:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009985:	dc 00                	fadd   QWORD PTR [eax]
c0009987:	dd 18                	fstp   QWORD PTR [eax]
c0009989:	49                   	dec    ecx
c000998a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000998e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009992:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009999:	d9 c0                	fld    st(0)
c000999b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000999f:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099a2:	dc 00                	fadd   QWORD PTR [eax]
c00099a4:	dd 18                	fstp   QWORD PTR [eax]
c00099a6:	49                   	dec    ecx
c00099a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00099ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099af:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099b6:	d9 c0                	fld    st(0)
c00099b8:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099bc:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099bf:	dc 00                	fadd   QWORD PTR [eax]
c00099c1:	dd 18                	fstp   QWORD PTR [eax]
c00099c3:	49                   	dec    ecx
c00099c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00099c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099cc:	85 c9                	test   ecx,ecx
c00099ce:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099d5:	d9 c0                	fld    st(0)
c00099d7:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099db:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099de:	dc 00                	fadd   QWORD PTR [eax]
c00099e0:	dd 18                	fstp   QWORD PTR [eax]
c00099e2:	0f 8f f9 fe ff ff    	jg     c00098e1 <calc_output_multi+0x204>
c00099e8:	dd d8                	fstp   st(0)
c00099ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00099ee:	29 5c 24 18          	sub    DWORD PTR [esp+0x18],ebx
c00099f2:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c00099f6:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00099fb:	0f 8f b4 fe ff ff    	jg     c00098b5 <calc_output_multi+0x1d8>
c0009a01:	b9 08 00 00 00       	mov    ecx,0x8
c0009a06:	89 d8                	mov    eax,ebx
c0009a08:	99                   	cdq    
c0009a09:	f7 f9                	idiv   ecx
c0009a0b:	4a                   	dec    edx
c0009a0c:	83 fa 06             	cmp    edx,0x6
c0009a0f:	77 07                	ja     c0009a18 <calc_output_multi+0x33b>
c0009a11:	ff 24 95 38 0f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf0c8]
c0009a18:	4b                   	dec    ebx
c0009a19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a1d:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a20:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a23:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a27:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a2b:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a2e:	4b                   	dec    ebx
c0009a2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a33:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a36:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a39:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a3d:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a41:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a44:	4b                   	dec    ebx
c0009a45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a49:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a4c:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a4f:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a53:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a57:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a5a:	4b                   	dec    ebx
c0009a5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a5f:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a62:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a65:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a69:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a6d:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a70:	4b                   	dec    ebx
c0009a71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a75:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a78:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a7b:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a7f:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a83:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a86:	4b                   	dec    ebx
c0009a87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a8b:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a8e:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a91:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a95:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a99:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a9c:	4b                   	dec    ebx
c0009a9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009aa1:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009aa4:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009aa7:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009aab:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009aaf:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009ab2:	4b                   	dec    ebx
c0009ab3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ab7:	85 db                	test   ebx,ebx
c0009ab9:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009abc:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009abf:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ac3:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009ac7:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009aca:	0f 8f 36 ff ff ff    	jg     c0009a06 <calc_output_multi+0x329>
c0009ad0:	83 c4 4c             	add    esp,0x4c
c0009ad3:	5b                   	pop    ebx
c0009ad4:	5e                   	pop    esi
c0009ad5:	5f                   	pop    edi
c0009ad6:	5d                   	pop    ebp
c0009ad7:	c3                   	ret    

c0009ad8 <double_to_fp>:
c0009ad8:	d9 05 8c 10 02 c0    	fld    DWORD PTR ds:0xc002108c
c0009ade:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009ae2:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009ae6:	e9 65 5c 01 00       	jmp    c001f750 <lrint>

c0009aeb <fmod_one>:
c0009aeb:	83 ec 2c             	sub    esp,0x2c
c0009aee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009af2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009af6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009afa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009afe:	83 ec 08             	sub    esp,0x8
c0009b01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b09:	e8 42 5c 01 00       	call   c001f750 <lrint>
c0009b0e:	83 c4 10             	add    esp,0x10
c0009b11:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009b15:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009b19:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009b1d:	de e1                	fsubrp st(1),st
c0009b1f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009b23:	d9 ee                	fldz   
c0009b25:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009b29:	df e0                	fnstsw ax
c0009b2b:	f6 c4 45             	test   ah,0x45
c0009b2e:	75 0a                	jne    c0009b3a <fmod_one+0x4f>
c0009b30:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b34:	d9 e8                	fld1   
c0009b36:	de c1                	faddp  st(1),st
c0009b38:	eb 04                	jmp    c0009b3e <fmod_one+0x53>
c0009b3a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b3e:	83 c4 2c             	add    esp,0x2c
c0009b41:	c3                   	ret    

c0009b42 <prepare_data>:
c0009b42:	55                   	push   ebp
c0009b43:	57                   	push   edi
c0009b44:	56                   	push   esi
c0009b45:	53                   	push   ebx
c0009b46:	83 ec 1c             	sub    esp,0x1c
c0009b49:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009b4d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b51:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009b55:	0f 89 57 01 00 00    	jns    c0009cb2 <prepare_data+0x170>
c0009b5b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009b5e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b61:	85 d2                	test   edx,edx
c0009b63:	75 0d                	jne    c0009b72 <prepare_data+0x30>
c0009b65:	8d 14 36             	lea    edx,[esi+esi*1]
c0009b68:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009b6b:	29 d0                	sub    eax,edx
c0009b6d:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b70:	eb 44                	jmp    c0009bb6 <prepare_data+0x74>
c0009b72:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009b75:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009b78:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009b7b:	39 c1                	cmp    ecx,eax
c0009b7d:	7d 04                	jge    c0009b83 <prepare_data+0x41>
c0009b7f:	29 d0                	sub    eax,edx
c0009b81:	eb 2d                	jmp    c0009bb0 <prepare_data+0x6e>
c0009b83:	29 d7                	sub    edi,edx
c0009b85:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009b8b:	01 f7                	add    edi,esi
c0009b8d:	29 f2                	sub    edx,esi
c0009b8f:	51                   	push   ecx
c0009b90:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009b97:	8d 14 90             	lea    edx,[eax+edx*4]
c0009b9a:	51                   	push   ecx
c0009b9b:	52                   	push   edx
c0009b9c:	50                   	push   eax
c0009b9d:	e8 b4 6a ff ff       	call   c0000656 <memmove>
c0009ba2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009ba5:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009ba8:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009bab:	29 f0                	sub    eax,esi
c0009bad:	83 c4 10             	add    esp,0x10
c0009bb0:	29 f0                	sub    eax,esi
c0009bb2:	79 02                	jns    c0009bb6 <prepare_data+0x74>
c0009bb4:	31 c0                	xor    eax,eax
c0009bb6:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009bb9:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009bbc:	29 ef                	sub    edi,ebp
c0009bbe:	39 c7                	cmp    edi,eax
c0009bc0:	7e 02                	jle    c0009bc4 <prepare_data+0x82>
c0009bc2:	89 c7                	mov    edi,eax
c0009bc4:	89 f8                	mov    eax,edi
c0009bc6:	99                   	cdq    
c0009bc7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009bca:	29 d7                	sub    edi,edx
c0009bcc:	b8 15 00 00 00       	mov    eax,0x15
c0009bd1:	0f 88 dd 00 00 00    	js     c0009cb4 <prepare_data+0x172>
c0009bd7:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009bda:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009bdd:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009be0:	0f 8f ce 00 00 00    	jg     c0009cb4 <prepare_data+0x172>
c0009be6:	50                   	push   eax
c0009be7:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009bee:	50                   	push   eax
c0009bef:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009bf5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009bf9:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bfb:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009bfe:	50                   	push   eax
c0009bff:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009c02:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009c06:	50                   	push   eax
c0009c07:	e8 82 6a ff ff       	call   c000068e <memcpy>
c0009c0c:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009c0f:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009c12:	83 c4 10             	add    esp,0x10
c0009c15:	01 fd                	add    ebp,edi
c0009c17:	01 f9                	add    ecx,edi
c0009c19:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009c1c:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009c1f:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009c22:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c26:	0f 85 86 00 00 00    	jne    c0009cb2 <prepare_data+0x170>
c0009c2c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009c2f:	89 e8                	mov    eax,ebp
c0009c31:	29 c8                	sub    eax,ecx
c0009c33:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009c36:	39 f8                	cmp    eax,edi
c0009c38:	7d 78                	jge    c0009cb2 <prepare_data+0x170>
c0009c3a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009c3e:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009c42:	74 6e                	je     c0009cb2 <prepare_data+0x170>
c0009c44:	8d 7e 04             	lea    edi,[esi+0x4]
c0009c47:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009c4b:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009c4e:	29 ef                	sub    edi,ebp
c0009c50:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009c54:	7c 29                	jl     c0009c7f <prepare_data+0x13d>
c0009c56:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c59:	29 f1                	sub    ecx,esi
c0009c5b:	55                   	push   ebp
c0009c5c:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009c63:	50                   	push   eax
c0009c64:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009c67:	50                   	push   eax
c0009c68:	52                   	push   edx
c0009c69:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c6d:	e8 e4 69 ff ff       	call   c0000656 <memmove>
c0009c72:	83 c4 10             	add    esp,0x10
c0009c75:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009c78:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009c7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c7f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009c82:	83 c6 05             	add    esi,0x5
c0009c85:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009c88:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009c8b:	78 07                	js     c0009c94 <prepare_data+0x152>
c0009c8d:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c90:	39 cf                	cmp    edi,ecx
c0009c92:	7e 04                	jle    c0009c98 <prepare_data+0x156>
c0009c94:	89 ce                	mov    esi,ecx
c0009c96:	29 c6                	sub    esi,eax
c0009c98:	51                   	push   ecx
c0009c99:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009ca0:	51                   	push   ecx
c0009ca1:	8d 04 82             	lea    eax,[edx+eax*4]
c0009ca4:	6a 00                	push   0x0
c0009ca6:	50                   	push   eax
c0009ca7:	e8 18 6a ff ff       	call   c00006c4 <memset>
c0009cac:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009caf:	83 c4 10             	add    esp,0x10
c0009cb2:	31 c0                	xor    eax,eax
c0009cb4:	83 c4 1c             	add    esp,0x1c
c0009cb7:	5b                   	pop    ebx
c0009cb8:	5e                   	pop    esi
c0009cb9:	5f                   	pop    edi
c0009cba:	5d                   	pop    ebp
c0009cbb:	c3                   	ret    

c0009cbc <sinc_multichan_vari_process>:
c0009cbc:	55                   	push   ebp
c0009cbd:	b8 05 00 00 00       	mov    eax,0x5
c0009cc2:	57                   	push   edi
c0009cc3:	56                   	push   esi
c0009cc4:	53                   	push   ebx
c0009cc5:	83 ec 3c             	sub    esp,0x3c
c0009cc8:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009ccc:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009cd0:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009cd3:	85 db                	test   ebx,ebx
c0009cd5:	0f 84 5b 02 00 00    	je     c0009f36 <sinc_multichan_vari_process+0x27a>
c0009cdb:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009cde:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009ce1:	0f af d0             	imul   edx,eax
c0009ce4:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009ce7:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009ceb:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009cf2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009cf5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009cfc:	dd 06                	fld    QWORD PTR [esi]
c0009cfe:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009d02:	55                   	push   ebp
c0009d03:	55                   	push   ebp
c0009d04:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d07:	e8 dd f2 ff ff       	call   c0008fe9 <is_bad_src_ratio>
c0009d0c:	89 c2                	mov    edx,eax
c0009d0e:	58                   	pop    eax
c0009d0f:	59                   	pop    ecx
c0009d10:	b8 16 00 00 00       	mov    eax,0x16
c0009d15:	85 d2                	test   edx,edx
c0009d17:	0f 85 19 02 00 00    	jne    c0009f36 <sinc_multichan_vari_process+0x27a>
c0009d1d:	d9 05 90 10 02 c0    	fld    DWORD PTR ds:0xc0021090
c0009d23:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009d26:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009d29:	dd 06                	fld    QWORD PTR [esi]
c0009d2b:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009d2e:	d8 d1                	fcom   st(1)
c0009d30:	df e0                	fnstsw ax
c0009d32:	9e                   	sahf   
c0009d33:	76 0f                	jbe    c0009d44 <sinc_multichan_vari_process+0x88>
c0009d35:	dd d8                	fstp   st(0)
c0009d37:	d9 e8                	fld1   
c0009d39:	d8 d9                	fcomp  st(1)
c0009d3b:	df e0                	fnstsw ax
c0009d3d:	9e                   	sahf   
c0009d3e:	77 0f                	ja     c0009d4f <sinc_multichan_vari_process+0x93>
c0009d40:	dd d8                	fstp   st(0)
c0009d42:	eb 11                	jmp    c0009d55 <sinc_multichan_vari_process+0x99>
c0009d44:	dd d9                	fstp   st(1)
c0009d46:	d9 e8                	fld1   
c0009d48:	d8 d9                	fcomp  st(1)
c0009d4a:	df e0                	fnstsw ax
c0009d4c:	9e                   	sahf   
c0009d4d:	76 04                	jbe    c0009d53 <sinc_multichan_vari_process+0x97>
c0009d4f:	de f9                	fdivp  st(1),st
c0009d51:	eb 02                	jmp    c0009d55 <sinc_multichan_vari_process+0x99>
c0009d53:	dd d8                	fstp   st(0)
c0009d55:	83 ec 10             	sub    esp,0x10
c0009d58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d5b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d5e:	e8 ed 59 01 00       	call   c001f750 <lrint>
c0009d63:	40                   	inc    eax
c0009d64:	0f af c5             	imul   eax,ebp
c0009d67:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009d6a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009d6e:	dd 14 24             	fst    QWORD PTR [esp]
c0009d71:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d75:	e8 71 fd ff ff       	call   c0009aeb <fmod_one>
c0009d7a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009d7d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d80:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009d84:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009d88:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009d8c:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009d90:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d93:	e8 b8 59 01 00       	call   c001f750 <lrint>
c0009d98:	d9 e8                	fld1   
c0009d9a:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009d9e:	0f af e8             	imul   ebp,eax
c0009da1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009da5:	01 e8                	add    eax,ebp
c0009da7:	99                   	cdq    
c0009da8:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009dab:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009dae:	dc 05 f8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ef8
c0009db4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009db8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009dbb:	83 c4 10             	add    esp,0x10
c0009dbe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009dc1:	7d 4b                	jge    c0009e0e <sinc_multichan_vari_process+0x152>
c0009dc3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009dc6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009dc9:	01 c8                	add    eax,ecx
c0009dcb:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009dce:	99                   	cdq    
c0009dcf:	f7 f9                	idiv   ecx
c0009dd1:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009dd5:	7d 09                	jge    c0009de0 <sinc_multichan_vari_process+0x124>
c0009dd7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009dda:	85 c0                	test   eax,eax
c0009ddc:	79 57                	jns    c0009e35 <sinc_multichan_vari_process+0x179>
c0009dde:	eb 70                	jmp    c0009e50 <sinc_multichan_vari_process+0x194>
c0009de0:	51                   	push   ecx
c0009de1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009de5:	57                   	push   edi
c0009de6:	53                   	push   ebx
c0009de7:	e8 56 fd ff ff       	call   c0009b42 <prepare_data>
c0009dec:	83 c4 10             	add    esp,0x10
c0009def:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009df2:	85 c0                	test   eax,eax
c0009df4:	0f 85 3c 01 00 00    	jne    c0009f36 <sinc_multichan_vari_process+0x27a>
c0009dfa:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009dfd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009e00:	01 c8                	add    eax,ecx
c0009e02:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009e05:	99                   	cdq    
c0009e06:	f7 f9                	idiv   ecx
c0009e08:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009e0c:	7c c9                	jl     c0009dd7 <sinc_multichan_vari_process+0x11b>
c0009e0e:	dd 04 24             	fld    QWORD PTR [esp]
c0009e11:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009e14:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e18:	dd 1e                	fstp   QWORD PTR [esi]
c0009e1a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009e1d:	99                   	cdq    
c0009e1e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e21:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009e24:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009e27:	99                   	cdq    
c0009e28:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e2b:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009e2e:	31 c0                	xor    eax,eax
c0009e30:	e9 01 01 00 00       	jmp    c0009f36 <sinc_multichan_vari_process+0x27a>
c0009e35:	dd 04 24             	fld    QWORD PTR [esp]
c0009e38:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009e3b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e3f:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e43:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009e47:	d9 c9                	fxch   st(1)
c0009e49:	de d9                	fcompp 
c0009e4b:	df e0                	fnstsw ax
c0009e4d:	9e                   	sahf   
c0009e4e:	73 be                	jae    c0009e0e <sinc_multichan_vari_process+0x152>
c0009e50:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009e54:	7e 2f                	jle    c0009e85 <sinc_multichan_vari_process+0x1c9>
c0009e56:	dd 06                	fld    QWORD PTR [esi]
c0009e58:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009e5b:	83 ec 10             	sub    esp,0x10
c0009e5e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e61:	e8 ca 58 01 00       	call   c001f730 <fabs>
c0009e66:	83 c4 10             	add    esp,0x10
c0009e69:	dc 1d 80 10 02 c0    	fcomp  QWORD PTR ds:0xc0021080
c0009e6f:	df e0                	fnstsw ax
c0009e71:	9e                   	sahf   
c0009e72:	76 11                	jbe    c0009e85 <sinc_multichan_vari_process+0x1c9>
c0009e74:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009e77:	dc 26                	fsub   QWORD PTR [esi]
c0009e79:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009e7c:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009e7f:	dc 06                	fadd   QWORD PTR [esi]
c0009e81:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009e85:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009e88:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e8c:	d9 e8                	fld1   
c0009e8e:	d8 d9                	fcomp  st(1)
c0009e90:	df e0                	fnstsw ax
c0009e92:	9e                   	sahf   
c0009e93:	77 04                	ja     c0009e99 <sinc_multichan_vari_process+0x1dd>
c0009e95:	dd d8                	fstp   st(0)
c0009e97:	d9 e8                	fld1   
c0009e99:	de c9                	fmulp  st(1),st
c0009e9b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009e9f:	50                   	push   eax
c0009ea0:	50                   	push   eax
c0009ea1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ea5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ea9:	e8 2a fc ff ff       	call   c0009ad8 <double_to_fp>
c0009eae:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009eb2:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009eb6:	89 c5                	mov    ebp,eax
c0009eb8:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ebb:	e8 18 fc ff ff       	call   c0009ad8 <double_to_fp>
c0009ec0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009ec3:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009ec6:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009ec9:	89 c1                	mov    ecx,eax
c0009ecb:	52                   	push   edx
c0009ecc:	89 d8                	mov    eax,ebx
c0009ece:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009ed2:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009ed5:	52                   	push   edx
c0009ed6:	52                   	push   edx
c0009ed7:	89 ea                	mov    edx,ebp
c0009ed9:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009edc:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009edf:	e8 f9 f7 ff ff       	call   c00096dd <calc_output_multi>
c0009ee4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009ee7:	d9 e8                	fld1   
c0009ee9:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009eed:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009ef0:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009ef4:	83 c4 10             	add    esp,0x10
c0009ef7:	dd 14 24             	fst    QWORD PTR [esp]
c0009efa:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009efe:	e8 e8 fb ff ff       	call   c0009aeb <fmod_one>
c0009f03:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f06:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f09:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f0d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f11:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009f15:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f19:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f1c:	e8 2f 58 01 00       	call   c001f750 <lrint>
c0009f21:	0f af e8             	imul   ebp,eax
c0009f24:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f28:	01 e8                	add    eax,ebp
c0009f2a:	99                   	cdq    
c0009f2b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009f2e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009f31:	e9 82 fe ff ff       	jmp    c0009db8 <sinc_multichan_vari_process+0xfc>
c0009f36:	83 c4 3c             	add    esp,0x3c
c0009f39:	5b                   	pop    ebx
c0009f3a:	5e                   	pop    esi
c0009f3b:	5f                   	pop    edi
c0009f3c:	5d                   	pop    ebp
c0009f3d:	c3                   	ret    

c0009f3e <sinc_hex_vari_process>:
c0009f3e:	55                   	push   ebp
c0009f3f:	b8 05 00 00 00       	mov    eax,0x5
c0009f44:	57                   	push   edi
c0009f45:	56                   	push   esi
c0009f46:	53                   	push   ebx
c0009f47:	83 ec 3c             	sub    esp,0x3c
c0009f4a:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009f4e:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009f52:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009f55:	85 db                	test   ebx,ebx
c0009f57:	0f 84 56 02 00 00    	je     c000a1b3 <sinc_hex_vari_process+0x275>
c0009f5d:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009f60:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009f63:	0f af d0             	imul   edx,eax
c0009f66:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009f69:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009f6d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009f74:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009f77:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009f7e:	dd 06                	fld    QWORD PTR [esi]
c0009f80:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009f84:	55                   	push   ebp
c0009f85:	55                   	push   ebp
c0009f86:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f89:	e8 5b f0 ff ff       	call   c0008fe9 <is_bad_src_ratio>
c0009f8e:	89 c2                	mov    edx,eax
c0009f90:	58                   	pop    eax
c0009f91:	59                   	pop    ecx
c0009f92:	b8 16 00 00 00       	mov    eax,0x16
c0009f97:	85 d2                	test   edx,edx
c0009f99:	0f 85 14 02 00 00    	jne    c000a1b3 <sinc_hex_vari_process+0x275>
c0009f9f:	d9 05 90 10 02 c0    	fld    DWORD PTR ds:0xc0021090
c0009fa5:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009fa8:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009fab:	dd 06                	fld    QWORD PTR [esi]
c0009fad:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009fb0:	d8 d1                	fcom   st(1)
c0009fb2:	df e0                	fnstsw ax
c0009fb4:	9e                   	sahf   
c0009fb5:	76 0f                	jbe    c0009fc6 <sinc_hex_vari_process+0x88>
c0009fb7:	dd d8                	fstp   st(0)
c0009fb9:	d9 e8                	fld1   
c0009fbb:	d8 d9                	fcomp  st(1)
c0009fbd:	df e0                	fnstsw ax
c0009fbf:	9e                   	sahf   
c0009fc0:	77 0f                	ja     c0009fd1 <sinc_hex_vari_process+0x93>
c0009fc2:	dd d8                	fstp   st(0)
c0009fc4:	eb 11                	jmp    c0009fd7 <sinc_hex_vari_process+0x99>
c0009fc6:	dd d9                	fstp   st(1)
c0009fc8:	d9 e8                	fld1   
c0009fca:	d8 d9                	fcomp  st(1)
c0009fcc:	df e0                	fnstsw ax
c0009fce:	9e                   	sahf   
c0009fcf:	76 04                	jbe    c0009fd5 <sinc_hex_vari_process+0x97>
c0009fd1:	de f9                	fdivp  st(1),st
c0009fd3:	eb 02                	jmp    c0009fd7 <sinc_hex_vari_process+0x99>
c0009fd5:	dd d8                	fstp   st(0)
c0009fd7:	83 ec 10             	sub    esp,0x10
c0009fda:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009fdd:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009fe0:	e8 6b 57 01 00       	call   c001f750 <lrint>
c0009fe5:	40                   	inc    eax
c0009fe6:	0f af c5             	imul   eax,ebp
c0009fe9:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009fec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ff0:	dd 14 24             	fst    QWORD PTR [esp]
c0009ff3:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009ff7:	e8 ef fa ff ff       	call   c0009aeb <fmod_one>
c0009ffc:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009fff:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a002:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a006:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a00a:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a00e:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a012:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a015:	e8 36 57 01 00       	call   c001f750 <lrint>
c000a01a:	d9 e8                	fld1   
c000a01c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a020:	0f af e8             	imul   ebp,eax
c000a023:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a027:	01 e8                	add    eax,ebp
c000a029:	99                   	cdq    
c000a02a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a02d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a030:	dc 05 f8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ef8
c000a036:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a03a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a03d:	83 c4 10             	add    esp,0x10
c000a040:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a043:	7d 4b                	jge    c000a090 <sinc_hex_vari_process+0x152>
c000a045:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a048:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a04b:	01 c8                	add    eax,ecx
c000a04d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a050:	99                   	cdq    
c000a051:	f7 f9                	idiv   ecx
c000a053:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a057:	7d 09                	jge    c000a062 <sinc_hex_vari_process+0x124>
c000a059:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a05c:	85 c0                	test   eax,eax
c000a05e:	79 57                	jns    c000a0b7 <sinc_hex_vari_process+0x179>
c000a060:	eb 70                	jmp    c000a0d2 <sinc_hex_vari_process+0x194>
c000a062:	51                   	push   ecx
c000a063:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a067:	57                   	push   edi
c000a068:	53                   	push   ebx
c000a069:	e8 d4 fa ff ff       	call   c0009b42 <prepare_data>
c000a06e:	83 c4 10             	add    esp,0x10
c000a071:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a074:	85 c0                	test   eax,eax
c000a076:	0f 85 37 01 00 00    	jne    c000a1b3 <sinc_hex_vari_process+0x275>
c000a07c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a07f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a082:	01 c8                	add    eax,ecx
c000a084:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a087:	99                   	cdq    
c000a088:	f7 f9                	idiv   ecx
c000a08a:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a08e:	7c c9                	jl     c000a059 <sinc_hex_vari_process+0x11b>
c000a090:	dd 04 24             	fld    QWORD PTR [esp]
c000a093:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a096:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a09a:	dd 1e                	fstp   QWORD PTR [esi]
c000a09c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a09f:	99                   	cdq    
c000a0a0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0a3:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a0a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a0a9:	99                   	cdq    
c000a0aa:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0ad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a0b0:	31 c0                	xor    eax,eax
c000a0b2:	e9 fc 00 00 00       	jmp    c000a1b3 <sinc_hex_vari_process+0x275>
c000a0b7:	dd 04 24             	fld    QWORD PTR [esp]
c000a0ba:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a0bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0c1:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a0c5:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a0c9:	d9 c9                	fxch   st(1)
c000a0cb:	de d9                	fcompp 
c000a0cd:	df e0                	fnstsw ax
c000a0cf:	9e                   	sahf   
c000a0d0:	73 be                	jae    c000a090 <sinc_hex_vari_process+0x152>
c000a0d2:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a0d6:	7e 2f                	jle    c000a107 <sinc_hex_vari_process+0x1c9>
c000a0d8:	dd 06                	fld    QWORD PTR [esi]
c000a0da:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a0dd:	83 ec 10             	sub    esp,0x10
c000a0e0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0e3:	e8 48 56 01 00       	call   c001f730 <fabs>
c000a0e8:	83 c4 10             	add    esp,0x10
c000a0eb:	dc 1d 80 10 02 c0    	fcomp  QWORD PTR ds:0xc0021080
c000a0f1:	df e0                	fnstsw ax
c000a0f3:	9e                   	sahf   
c000a0f4:	76 11                	jbe    c000a107 <sinc_hex_vari_process+0x1c9>
c000a0f6:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a0f9:	dc 26                	fsub   QWORD PTR [esi]
c000a0fb:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a0fe:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a101:	dc 06                	fadd   QWORD PTR [esi]
c000a103:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a107:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a10a:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a10e:	d9 e8                	fld1   
c000a110:	d8 d9                	fcomp  st(1)
c000a112:	df e0                	fnstsw ax
c000a114:	9e                   	sahf   
c000a115:	77 04                	ja     c000a11b <sinc_hex_vari_process+0x1dd>
c000a117:	dd d8                	fstp   st(0)
c000a119:	d9 e8                	fld1   
c000a11b:	de c9                	fmulp  st(1),st
c000a11d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a121:	50                   	push   eax
c000a122:	50                   	push   eax
c000a123:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a127:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a12b:	e8 a8 f9 ff ff       	call   c0009ad8 <double_to_fp>
c000a130:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a134:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a138:	89 c5                	mov    ebp,eax
c000a13a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a13d:	e8 96 f9 ff ff       	call   c0009ad8 <double_to_fp>
c000a142:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a145:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a148:	83 c4 0c             	add    esp,0xc
c000a14b:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a14e:	89 c1                	mov    ecx,eax
c000a150:	52                   	push   edx
c000a151:	89 d8                	mov    eax,ebx
c000a153:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a157:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a15a:	52                   	push   edx
c000a15b:	52                   	push   edx
c000a15c:	89 ea                	mov    edx,ebp
c000a15e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a161:	e8 db f2 ff ff       	call   c0009441 <calc_output_hex>
c000a166:	d9 e8                	fld1   
c000a168:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a16c:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a170:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a174:	dd 14 24             	fst    QWORD PTR [esp]
c000a177:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a17b:	e8 6b f9 ff ff       	call   c0009aeb <fmod_one>
c000a180:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a183:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a186:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a18a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a18e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a192:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a196:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a199:	e8 b2 55 01 00       	call   c001f750 <lrint>
c000a19e:	0f af e8             	imul   ebp,eax
c000a1a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a1a5:	01 e8                	add    eax,ebp
c000a1a7:	99                   	cdq    
c000a1a8:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a1ab:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a1ae:	e9 87 fe ff ff       	jmp    c000a03a <sinc_hex_vari_process+0xfc>
c000a1b3:	83 c4 3c             	add    esp,0x3c
c000a1b6:	5b                   	pop    ebx
c000a1b7:	5e                   	pop    esi
c000a1b8:	5f                   	pop    edi
c000a1b9:	5d                   	pop    ebp
c000a1ba:	c3                   	ret    

c000a1bb <sinc_quad_vari_process>:
c000a1bb:	55                   	push   ebp
c000a1bc:	b8 05 00 00 00       	mov    eax,0x5
c000a1c1:	57                   	push   edi
c000a1c2:	56                   	push   esi
c000a1c3:	53                   	push   ebx
c000a1c4:	83 ec 3c             	sub    esp,0x3c
c000a1c7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a1cb:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a1cf:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a1d2:	85 db                	test   ebx,ebx
c000a1d4:	0f 84 56 02 00 00    	je     c000a430 <sinc_quad_vari_process+0x275>
c000a1da:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a1dd:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a1e0:	0f af d0             	imul   edx,eax
c000a1e3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a1e6:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a1ea:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a1f1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a1f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a1fb:	dd 06                	fld    QWORD PTR [esi]
c000a1fd:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a201:	55                   	push   ebp
c000a202:	55                   	push   ebp
c000a203:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a206:	e8 de ed ff ff       	call   c0008fe9 <is_bad_src_ratio>
c000a20b:	89 c2                	mov    edx,eax
c000a20d:	58                   	pop    eax
c000a20e:	59                   	pop    ecx
c000a20f:	b8 16 00 00 00       	mov    eax,0x16
c000a214:	85 d2                	test   edx,edx
c000a216:	0f 85 14 02 00 00    	jne    c000a430 <sinc_quad_vari_process+0x275>
c000a21c:	d9 05 90 10 02 c0    	fld    DWORD PTR ds:0xc0021090
c000a222:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a225:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a228:	dd 06                	fld    QWORD PTR [esi]
c000a22a:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a22d:	d8 d1                	fcom   st(1)
c000a22f:	df e0                	fnstsw ax
c000a231:	9e                   	sahf   
c000a232:	76 0f                	jbe    c000a243 <sinc_quad_vari_process+0x88>
c000a234:	dd d8                	fstp   st(0)
c000a236:	d9 e8                	fld1   
c000a238:	d8 d9                	fcomp  st(1)
c000a23a:	df e0                	fnstsw ax
c000a23c:	9e                   	sahf   
c000a23d:	77 0f                	ja     c000a24e <sinc_quad_vari_process+0x93>
c000a23f:	dd d8                	fstp   st(0)
c000a241:	eb 11                	jmp    c000a254 <sinc_quad_vari_process+0x99>
c000a243:	dd d9                	fstp   st(1)
c000a245:	d9 e8                	fld1   
c000a247:	d8 d9                	fcomp  st(1)
c000a249:	df e0                	fnstsw ax
c000a24b:	9e                   	sahf   
c000a24c:	76 04                	jbe    c000a252 <sinc_quad_vari_process+0x97>
c000a24e:	de f9                	fdivp  st(1),st
c000a250:	eb 02                	jmp    c000a254 <sinc_quad_vari_process+0x99>
c000a252:	dd d8                	fstp   st(0)
c000a254:	83 ec 10             	sub    esp,0x10
c000a257:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a25a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a25d:	e8 ee 54 01 00       	call   c001f750 <lrint>
c000a262:	40                   	inc    eax
c000a263:	0f af c5             	imul   eax,ebp
c000a266:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a269:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a26d:	dd 14 24             	fst    QWORD PTR [esp]
c000a270:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a274:	e8 72 f8 ff ff       	call   c0009aeb <fmod_one>
c000a279:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a27c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a27f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a283:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a287:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a28b:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a28f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a292:	e8 b9 54 01 00       	call   c001f750 <lrint>
c000a297:	d9 e8                	fld1   
c000a299:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a29d:	0f af e8             	imul   ebp,eax
c000a2a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a2a4:	01 e8                	add    eax,ebp
c000a2a6:	99                   	cdq    
c000a2a7:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a2aa:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a2ad:	dc 05 f8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ef8
c000a2b3:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a2b7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a2ba:	83 c4 10             	add    esp,0x10
c000a2bd:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a2c0:	7d 4b                	jge    c000a30d <sinc_quad_vari_process+0x152>
c000a2c2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2c5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2c8:	01 c8                	add    eax,ecx
c000a2ca:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a2cd:	99                   	cdq    
c000a2ce:	f7 f9                	idiv   ecx
c000a2d0:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a2d4:	7d 09                	jge    c000a2df <sinc_quad_vari_process+0x124>
c000a2d6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a2d9:	85 c0                	test   eax,eax
c000a2db:	79 57                	jns    c000a334 <sinc_quad_vari_process+0x179>
c000a2dd:	eb 70                	jmp    c000a34f <sinc_quad_vari_process+0x194>
c000a2df:	51                   	push   ecx
c000a2e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a2e4:	57                   	push   edi
c000a2e5:	53                   	push   ebx
c000a2e6:	e8 57 f8 ff ff       	call   c0009b42 <prepare_data>
c000a2eb:	83 c4 10             	add    esp,0x10
c000a2ee:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a2f1:	85 c0                	test   eax,eax
c000a2f3:	0f 85 37 01 00 00    	jne    c000a430 <sinc_quad_vari_process+0x275>
c000a2f9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2fc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2ff:	01 c8                	add    eax,ecx
c000a301:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a304:	99                   	cdq    
c000a305:	f7 f9                	idiv   ecx
c000a307:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a30b:	7c c9                	jl     c000a2d6 <sinc_quad_vari_process+0x11b>
c000a30d:	dd 04 24             	fld    QWORD PTR [esp]
c000a310:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a313:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a317:	dd 1e                	fstp   QWORD PTR [esi]
c000a319:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a31c:	99                   	cdq    
c000a31d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a320:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a323:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a326:	99                   	cdq    
c000a327:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a32a:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a32d:	31 c0                	xor    eax,eax
c000a32f:	e9 fc 00 00 00       	jmp    c000a430 <sinc_quad_vari_process+0x275>
c000a334:	dd 04 24             	fld    QWORD PTR [esp]
c000a337:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a33a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a33e:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a342:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a346:	d9 c9                	fxch   st(1)
c000a348:	de d9                	fcompp 
c000a34a:	df e0                	fnstsw ax
c000a34c:	9e                   	sahf   
c000a34d:	73 be                	jae    c000a30d <sinc_quad_vari_process+0x152>
c000a34f:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a353:	7e 2f                	jle    c000a384 <sinc_quad_vari_process+0x1c9>
c000a355:	dd 06                	fld    QWORD PTR [esi]
c000a357:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a35a:	83 ec 10             	sub    esp,0x10
c000a35d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a360:	e8 cb 53 01 00       	call   c001f730 <fabs>
c000a365:	83 c4 10             	add    esp,0x10
c000a368:	dc 1d 80 10 02 c0    	fcomp  QWORD PTR ds:0xc0021080
c000a36e:	df e0                	fnstsw ax
c000a370:	9e                   	sahf   
c000a371:	76 11                	jbe    c000a384 <sinc_quad_vari_process+0x1c9>
c000a373:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a376:	dc 26                	fsub   QWORD PTR [esi]
c000a378:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a37b:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a37e:	dc 06                	fadd   QWORD PTR [esi]
c000a380:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a384:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a387:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a38b:	d9 e8                	fld1   
c000a38d:	d8 d9                	fcomp  st(1)
c000a38f:	df e0                	fnstsw ax
c000a391:	9e                   	sahf   
c000a392:	77 04                	ja     c000a398 <sinc_quad_vari_process+0x1dd>
c000a394:	dd d8                	fstp   st(0)
c000a396:	d9 e8                	fld1   
c000a398:	de c9                	fmulp  st(1),st
c000a39a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a39e:	50                   	push   eax
c000a39f:	50                   	push   eax
c000a3a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3a8:	e8 2b f7 ff ff       	call   c0009ad8 <double_to_fp>
c000a3ad:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a3b1:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a3b5:	89 c5                	mov    ebp,eax
c000a3b7:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3ba:	e8 19 f7 ff ff       	call   c0009ad8 <double_to_fp>
c000a3bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a3c2:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a3c5:	83 c4 0c             	add    esp,0xc
c000a3c8:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a3cb:	89 c1                	mov    ecx,eax
c000a3cd:	52                   	push   edx
c000a3ce:	89 d8                	mov    eax,ebx
c000a3d0:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a3d4:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a3d7:	52                   	push   edx
c000a3d8:	52                   	push   edx
c000a3d9:	89 ea                	mov    edx,ebp
c000a3db:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3de:	e8 99 ee ff ff       	call   c000927c <calc_output_quad>
c000a3e3:	d9 e8                	fld1   
c000a3e5:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a3e9:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a3ed:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a3f1:	dd 14 24             	fst    QWORD PTR [esp]
c000a3f4:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a3f8:	e8 ee f6 ff ff       	call   c0009aeb <fmod_one>
c000a3fd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a400:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a407:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a40b:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a40f:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a413:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a416:	e8 35 53 01 00       	call   c001f750 <lrint>
c000a41b:	0f af e8             	imul   ebp,eax
c000a41e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a422:	01 e8                	add    eax,ebp
c000a424:	99                   	cdq    
c000a425:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a428:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a42b:	e9 87 fe ff ff       	jmp    c000a2b7 <sinc_quad_vari_process+0xfc>
c000a430:	83 c4 3c             	add    esp,0x3c
c000a433:	5b                   	pop    ebx
c000a434:	5e                   	pop    esi
c000a435:	5f                   	pop    edi
c000a436:	5d                   	pop    ebp
c000a437:	c3                   	ret    

c000a438 <sinc_stereo_vari_process>:
c000a438:	55                   	push   ebp
c000a439:	b8 05 00 00 00       	mov    eax,0x5
c000a43e:	57                   	push   edi
c000a43f:	56                   	push   esi
c000a440:	53                   	push   ebx
c000a441:	83 ec 3c             	sub    esp,0x3c
c000a444:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a448:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a44c:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a44f:	85 db                	test   ebx,ebx
c000a451:	0f 84 56 02 00 00    	je     c000a6ad <sinc_stereo_vari_process+0x275>
c000a457:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a45a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a45d:	0f af d0             	imul   edx,eax
c000a460:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a463:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a467:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a46e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a471:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a478:	dd 06                	fld    QWORD PTR [esi]
c000a47a:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a47e:	55                   	push   ebp
c000a47f:	55                   	push   ebp
c000a480:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a483:	e8 61 eb ff ff       	call   c0008fe9 <is_bad_src_ratio>
c000a488:	89 c2                	mov    edx,eax
c000a48a:	58                   	pop    eax
c000a48b:	59                   	pop    ecx
c000a48c:	b8 16 00 00 00       	mov    eax,0x16
c000a491:	85 d2                	test   edx,edx
c000a493:	0f 85 14 02 00 00    	jne    c000a6ad <sinc_stereo_vari_process+0x275>
c000a499:	d9 05 90 10 02 c0    	fld    DWORD PTR ds:0xc0021090
c000a49f:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a4a2:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a4a5:	dd 06                	fld    QWORD PTR [esi]
c000a4a7:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a4aa:	d8 d1                	fcom   st(1)
c000a4ac:	df e0                	fnstsw ax
c000a4ae:	9e                   	sahf   
c000a4af:	76 0f                	jbe    c000a4c0 <sinc_stereo_vari_process+0x88>
c000a4b1:	dd d8                	fstp   st(0)
c000a4b3:	d9 e8                	fld1   
c000a4b5:	d8 d9                	fcomp  st(1)
c000a4b7:	df e0                	fnstsw ax
c000a4b9:	9e                   	sahf   
c000a4ba:	77 0f                	ja     c000a4cb <sinc_stereo_vari_process+0x93>
c000a4bc:	dd d8                	fstp   st(0)
c000a4be:	eb 11                	jmp    c000a4d1 <sinc_stereo_vari_process+0x99>
c000a4c0:	dd d9                	fstp   st(1)
c000a4c2:	d9 e8                	fld1   
c000a4c4:	d8 d9                	fcomp  st(1)
c000a4c6:	df e0                	fnstsw ax
c000a4c8:	9e                   	sahf   
c000a4c9:	76 04                	jbe    c000a4cf <sinc_stereo_vari_process+0x97>
c000a4cb:	de f9                	fdivp  st(1),st
c000a4cd:	eb 02                	jmp    c000a4d1 <sinc_stereo_vari_process+0x99>
c000a4cf:	dd d8                	fstp   st(0)
c000a4d1:	83 ec 10             	sub    esp,0x10
c000a4d4:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4d7:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a4da:	e8 71 52 01 00       	call   c001f750 <lrint>
c000a4df:	40                   	inc    eax
c000a4e0:	0f af c5             	imul   eax,ebp
c000a4e3:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a4e6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4ea:	dd 14 24             	fst    QWORD PTR [esp]
c000a4ed:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a4f1:	e8 f5 f5 ff ff       	call   c0009aeb <fmod_one>
c000a4f6:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a4f9:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a500:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a504:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a508:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a50c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a50f:	e8 3c 52 01 00       	call   c001f750 <lrint>
c000a514:	d9 e8                	fld1   
c000a516:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a51a:	0f af e8             	imul   ebp,eax
c000a51d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a521:	01 e8                	add    eax,ebp
c000a523:	99                   	cdq    
c000a524:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a527:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a52a:	dc 05 f8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ef8
c000a530:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a534:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a537:	83 c4 10             	add    esp,0x10
c000a53a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a53d:	7d 4b                	jge    c000a58a <sinc_stereo_vari_process+0x152>
c000a53f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a542:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a545:	01 c8                	add    eax,ecx
c000a547:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a54a:	99                   	cdq    
c000a54b:	f7 f9                	idiv   ecx
c000a54d:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a551:	7d 09                	jge    c000a55c <sinc_stereo_vari_process+0x124>
c000a553:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a556:	85 c0                	test   eax,eax
c000a558:	79 57                	jns    c000a5b1 <sinc_stereo_vari_process+0x179>
c000a55a:	eb 70                	jmp    c000a5cc <sinc_stereo_vari_process+0x194>
c000a55c:	51                   	push   ecx
c000a55d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a561:	57                   	push   edi
c000a562:	53                   	push   ebx
c000a563:	e8 da f5 ff ff       	call   c0009b42 <prepare_data>
c000a568:	83 c4 10             	add    esp,0x10
c000a56b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a56e:	85 c0                	test   eax,eax
c000a570:	0f 85 37 01 00 00    	jne    c000a6ad <sinc_stereo_vari_process+0x275>
c000a576:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a579:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a57c:	01 c8                	add    eax,ecx
c000a57e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a581:	99                   	cdq    
c000a582:	f7 f9                	idiv   ecx
c000a584:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a588:	7c c9                	jl     c000a553 <sinc_stereo_vari_process+0x11b>
c000a58a:	dd 04 24             	fld    QWORD PTR [esp]
c000a58d:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a590:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a594:	dd 1e                	fstp   QWORD PTR [esi]
c000a596:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a599:	99                   	cdq    
c000a59a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a59d:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a5a0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a5a3:	99                   	cdq    
c000a5a4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a5a7:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a5aa:	31 c0                	xor    eax,eax
c000a5ac:	e9 fc 00 00 00       	jmp    c000a6ad <sinc_stereo_vari_process+0x275>
c000a5b1:	dd 04 24             	fld    QWORD PTR [esp]
c000a5b4:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a5b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5bb:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a5bf:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a5c3:	d9 c9                	fxch   st(1)
c000a5c5:	de d9                	fcompp 
c000a5c7:	df e0                	fnstsw ax
c000a5c9:	9e                   	sahf   
c000a5ca:	73 be                	jae    c000a58a <sinc_stereo_vari_process+0x152>
c000a5cc:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a5d0:	7e 2f                	jle    c000a601 <sinc_stereo_vari_process+0x1c9>
c000a5d2:	dd 06                	fld    QWORD PTR [esi]
c000a5d4:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a5d7:	83 ec 10             	sub    esp,0x10
c000a5da:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5dd:	e8 4e 51 01 00       	call   c001f730 <fabs>
c000a5e2:	83 c4 10             	add    esp,0x10
c000a5e5:	dc 1d 80 10 02 c0    	fcomp  QWORD PTR ds:0xc0021080
c000a5eb:	df e0                	fnstsw ax
c000a5ed:	9e                   	sahf   
c000a5ee:	76 11                	jbe    c000a601 <sinc_stereo_vari_process+0x1c9>
c000a5f0:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a5f3:	dc 26                	fsub   QWORD PTR [esi]
c000a5f5:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a5f8:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a5fb:	dc 06                	fadd   QWORD PTR [esi]
c000a5fd:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a601:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a604:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a608:	d9 e8                	fld1   
c000a60a:	d8 d9                	fcomp  st(1)
c000a60c:	df e0                	fnstsw ax
c000a60e:	9e                   	sahf   
c000a60f:	77 04                	ja     c000a615 <sinc_stereo_vari_process+0x1dd>
c000a611:	dd d8                	fstp   st(0)
c000a613:	d9 e8                	fld1   
c000a615:	de c9                	fmulp  st(1),st
c000a617:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a61b:	50                   	push   eax
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a621:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a625:	e8 ae f4 ff ff       	call   c0009ad8 <double_to_fp>
c000a62a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a62e:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a632:	89 c5                	mov    ebp,eax
c000a634:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a637:	e8 9c f4 ff ff       	call   c0009ad8 <double_to_fp>
c000a63c:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a63f:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a642:	83 c4 0c             	add    esp,0xc
c000a645:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a648:	89 c1                	mov    ecx,eax
c000a64a:	52                   	push   edx
c000a64b:	89 d8                	mov    eax,ebx
c000a64d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a651:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a654:	52                   	push   edx
c000a655:	52                   	push   edx
c000a656:	89 ea                	mov    edx,ebp
c000a658:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a65b:	e8 da ea ff ff       	call   c000913a <calc_output_stereo>
c000a660:	d9 e8                	fld1   
c000a662:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a666:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a66a:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a66e:	dd 14 24             	fst    QWORD PTR [esp]
c000a671:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a675:	e8 71 f4 ff ff       	call   c0009aeb <fmod_one>
c000a67a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a67d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a680:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a684:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a688:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a68c:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a690:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a693:	e8 b8 50 01 00       	call   c001f750 <lrint>
c000a698:	0f af e8             	imul   ebp,eax
c000a69b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a69f:	01 e8                	add    eax,ebp
c000a6a1:	99                   	cdq    
c000a6a2:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a6a5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a6a8:	e9 87 fe ff ff       	jmp    c000a534 <sinc_stereo_vari_process+0xfc>
c000a6ad:	83 c4 3c             	add    esp,0x3c
c000a6b0:	5b                   	pop    ebx
c000a6b1:	5e                   	pop    esi
c000a6b2:	5f                   	pop    edi
c000a6b3:	5d                   	pop    ebp
c000a6b4:	c3                   	ret    

c000a6b5 <sinc_mono_vari_process>:
c000a6b5:	55                   	push   ebp
c000a6b6:	b8 05 00 00 00       	mov    eax,0x5
c000a6bb:	57                   	push   edi
c000a6bc:	56                   	push   esi
c000a6bd:	53                   	push   ebx
c000a6be:	83 ec 3c             	sub    esp,0x3c
c000a6c1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a6c5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a6c9:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a6cc:	85 db                	test   ebx,ebx
c000a6ce:	0f 84 55 02 00 00    	je     c000a929 <sinc_mono_vari_process+0x274>
c000a6d4:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a6d7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6da:	0f af d0             	imul   edx,eax
c000a6dd:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a6e0:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a6e4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a6eb:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a6ee:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a6f5:	dd 06                	fld    QWORD PTR [esi]
c000a6f7:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a6fb:	51                   	push   ecx
c000a6fc:	51                   	push   ecx
c000a6fd:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a700:	e8 e4 e8 ff ff       	call   c0008fe9 <is_bad_src_ratio>
c000a705:	5d                   	pop    ebp
c000a706:	89 c2                	mov    edx,eax
c000a708:	58                   	pop    eax
c000a709:	85 d2                	test   edx,edx
c000a70b:	b8 16 00 00 00       	mov    eax,0x16
c000a710:	0f 85 13 02 00 00    	jne    c000a929 <sinc_mono_vari_process+0x274>
c000a716:	d9 05 90 10 02 c0    	fld    DWORD PTR ds:0xc0021090
c000a71c:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a71f:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a722:	dd 06                	fld    QWORD PTR [esi]
c000a724:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a727:	d8 d1                	fcom   st(1)
c000a729:	df e0                	fnstsw ax
c000a72b:	9e                   	sahf   
c000a72c:	76 0f                	jbe    c000a73d <sinc_mono_vari_process+0x88>
c000a72e:	dd d8                	fstp   st(0)
c000a730:	d9 e8                	fld1   
c000a732:	d8 d9                	fcomp  st(1)
c000a734:	df e0                	fnstsw ax
c000a736:	9e                   	sahf   
c000a737:	77 0f                	ja     c000a748 <sinc_mono_vari_process+0x93>
c000a739:	dd d8                	fstp   st(0)
c000a73b:	eb 11                	jmp    c000a74e <sinc_mono_vari_process+0x99>
c000a73d:	dd d9                	fstp   st(1)
c000a73f:	d9 e8                	fld1   
c000a741:	d8 d9                	fcomp  st(1)
c000a743:	df e0                	fnstsw ax
c000a745:	9e                   	sahf   
c000a746:	76 04                	jbe    c000a74c <sinc_mono_vari_process+0x97>
c000a748:	de f9                	fdivp  st(1),st
c000a74a:	eb 02                	jmp    c000a74e <sinc_mono_vari_process+0x99>
c000a74c:	dd d8                	fstp   st(0)
c000a74e:	83 ec 10             	sub    esp,0x10
c000a751:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a754:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a757:	e8 f4 4f 01 00       	call   c001f750 <lrint>
c000a75c:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a75f:	40                   	inc    eax
c000a760:	dd 14 24             	fst    QWORD PTR [esp]
c000a763:	0f af e8             	imul   ebp,eax
c000a766:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a76a:	e8 7c f3 ff ff       	call   c0009aeb <fmod_one>
c000a76f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a772:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a776:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a779:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a77d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a781:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a785:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a789:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a78c:	e8 bf 4f 01 00       	call   c001f750 <lrint>
c000a791:	d9 e8                	fld1   
c000a793:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a797:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a79c:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a7a0:	99                   	cdq    
c000a7a1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a7a4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a7a7:	dc 05 f8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ef8
c000a7ad:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a7b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a7b4:	83 c4 10             	add    esp,0x10
c000a7b7:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a7ba:	7d 44                	jge    c000a800 <sinc_mono_vari_process+0x14b>
c000a7bc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7bf:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7c2:	01 c8                	add    eax,ecx
c000a7c4:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7c7:	99                   	cdq    
c000a7c8:	f7 f9                	idiv   ecx
c000a7ca:	39 d5                	cmp    ebp,edx
c000a7cc:	7d 09                	jge    c000a7d7 <sinc_mono_vari_process+0x122>
c000a7ce:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a7d1:	85 c0                	test   eax,eax
c000a7d3:	79 52                	jns    c000a827 <sinc_mono_vari_process+0x172>
c000a7d5:	eb 6b                	jmp    c000a842 <sinc_mono_vari_process+0x18d>
c000a7d7:	52                   	push   edx
c000a7d8:	55                   	push   ebp
c000a7d9:	57                   	push   edi
c000a7da:	53                   	push   ebx
c000a7db:	e8 62 f3 ff ff       	call   c0009b42 <prepare_data>
c000a7e0:	83 c4 10             	add    esp,0x10
c000a7e3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a7e6:	85 c0                	test   eax,eax
c000a7e8:	0f 85 3b 01 00 00    	jne    c000a929 <sinc_mono_vari_process+0x274>
c000a7ee:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7f1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7f4:	01 c8                	add    eax,ecx
c000a7f6:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7f9:	99                   	cdq    
c000a7fa:	f7 f9                	idiv   ecx
c000a7fc:	39 d5                	cmp    ebp,edx
c000a7fe:	7c ce                	jl     c000a7ce <sinc_mono_vari_process+0x119>
c000a800:	dd 04 24             	fld    QWORD PTR [esp]
c000a803:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a806:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a80a:	dd 1e                	fstp   QWORD PTR [esi]
c000a80c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a80f:	99                   	cdq    
c000a810:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a813:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a816:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a819:	99                   	cdq    
c000a81a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a81d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a820:	31 c0                	xor    eax,eax
c000a822:	e9 02 01 00 00       	jmp    c000a929 <sinc_mono_vari_process+0x274>
c000a827:	dd 04 24             	fld    QWORD PTR [esp]
c000a82a:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a82d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a831:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a835:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a839:	d9 c9                	fxch   st(1)
c000a83b:	de d9                	fcompp 
c000a83d:	df e0                	fnstsw ax
c000a83f:	9e                   	sahf   
c000a840:	77 be                	ja     c000a800 <sinc_mono_vari_process+0x14b>
c000a842:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a846:	7e 2f                	jle    c000a877 <sinc_mono_vari_process+0x1c2>
c000a848:	dd 06                	fld    QWORD PTR [esi]
c000a84a:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a84d:	83 ec 10             	sub    esp,0x10
c000a850:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a853:	e8 d8 4e 01 00       	call   c001f730 <fabs>
c000a858:	83 c4 10             	add    esp,0x10
c000a85b:	dc 1d 80 10 02 c0    	fcomp  QWORD PTR ds:0xc0021080
c000a861:	df e0                	fnstsw ax
c000a863:	9e                   	sahf   
c000a864:	76 11                	jbe    c000a877 <sinc_mono_vari_process+0x1c2>
c000a866:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a869:	dc 26                	fsub   QWORD PTR [esi]
c000a86b:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a86e:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a871:	dc 06                	fadd   QWORD PTR [esi]
c000a873:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a877:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a87a:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a87e:	d9 e8                	fld1   
c000a880:	d8 d9                	fcomp  st(1)
c000a882:	df e0                	fnstsw ax
c000a884:	9e                   	sahf   
c000a885:	77 04                	ja     c000a88b <sinc_mono_vari_process+0x1d6>
c000a887:	dd d8                	fstp   st(0)
c000a889:	d9 e8                	fld1   
c000a88b:	de c9                	fmulp  st(1),st
c000a88d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a891:	50                   	push   eax
c000a892:	50                   	push   eax
c000a893:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a897:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a89b:	e8 38 f2 ff ff       	call   c0009ad8 <double_to_fp>
c000a8a0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a8a4:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a8a8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a8ac:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8af:	e8 24 f2 ff ff       	call   c0009ad8 <double_to_fp>
c000a8b4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a8b8:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a8bc:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a8bf:	89 c1                	mov    ecx,eax
c000a8c1:	89 d8                	mov    eax,ebx
c000a8c3:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a8c7:	e8 89 e7 ff ff       	call   c0009055 <calc_output_single>
c000a8cc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a8cf:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a8d3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a8d6:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a8d9:	d9 e8                	fld1   
c000a8db:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a8df:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a8e2:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a8e6:	dd 14 24             	fst    QWORD PTR [esp]
c000a8e9:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a8ed:	e8 f9 f1 ff ff       	call   c0009aeb <fmod_one>
c000a8f2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a8f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8f9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a8fc:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a900:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a904:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a908:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a90c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a90f:	e8 3c 4e 01 00       	call   c001f750 <lrint>
c000a914:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a919:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a91d:	99                   	cdq    
c000a91e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a921:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a924:	e9 88 fe ff ff       	jmp    c000a7b1 <sinc_mono_vari_process+0xfc>
c000a929:	83 c4 3c             	add    esp,0x3c
c000a92c:	5b                   	pop    ebx
c000a92d:	5e                   	pop    esi
c000a92e:	5f                   	pop    edi
c000a92f:	5d                   	pop    ebp
c000a930:	c3                   	ret    

c000a931 <sinc_get_name>:
c000a931:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a935:	31 c0                	xor    eax,eax
c000a937:	83 fa 02             	cmp    edx,0x2
c000a93a:	77 07                	ja     c000a943 <sinc_get_name+0x12>
c000a93c:	8b 04 95 60 0f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf0a0]
c000a943:	c3                   	ret    

c000a944 <sinc_get_description>:
c000a944:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a948:	31 c0                	xor    eax,eax
c000a94a:	83 fa 02             	cmp    edx,0x2
c000a94d:	77 07                	ja     c000a956 <sinc_get_description+0x12>
c000a94f:	8b 04 95 54 0f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf0ac]
c000a956:	c3                   	ret    

c000a957 <sinc_set_converter>:
c000a957:	53                   	push   ebx
c000a958:	81 ec 58 08 00 00    	sub    esp,0x858
c000a95e:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a965:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a968:	85 c0                	test   eax,eax
c000a96a:	74 13                	je     c000a97f <sinc_set_converter+0x28>
c000a96c:	83 ec 0c             	sub    esp,0xc
c000a96f:	50                   	push   eax
c000a970:	e8 7e 16 00 00       	call   c000bff3 <free>
c000a975:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a97c:	83 c4 10             	add    esp,0x10
c000a97f:	50                   	push   eax
c000a980:	68 44 08 00 00       	push   0x844
c000a985:	6a 00                	push   0x0
c000a987:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a98b:	50                   	push   eax
c000a98c:	e8 33 5d ff ff       	call   c00006c4 <memset>
c000a991:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a994:	83 c4 10             	add    esp,0x10
c000a997:	b8 0b 00 00 00       	mov    eax,0xb
c000a99c:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a9a2:	7f 6e                	jg     c000aa12 <sinc_set_converter+0xbb>
c000a9a4:	83 fa 01             	cmp    edx,0x1
c000a9a7:	75 10                	jne    c000a9b9 <sinc_set_converter+0x62>
c000a9a9:	c7 43 24 b5 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a6b5
c000a9b0:	c7 43 20 b5 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a6b5
c000a9b7:	eb 4d                	jmp    c000aa06 <sinc_set_converter+0xaf>
c000a9b9:	83 fa 02             	cmp    edx,0x2
c000a9bc:	75 10                	jne    c000a9ce <sinc_set_converter+0x77>
c000a9be:	c7 43 24 38 a4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a438
c000a9c5:	c7 43 20 38 a4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a438
c000a9cc:	eb 38                	jmp    c000aa06 <sinc_set_converter+0xaf>
c000a9ce:	83 fa 04             	cmp    edx,0x4
c000a9d1:	75 10                	jne    c000a9e3 <sinc_set_converter+0x8c>
c000a9d3:	c7 43 24 bb a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a1bb
c000a9da:	c7 43 20 bb a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a1bb
c000a9e1:	eb 23                	jmp    c000aa06 <sinc_set_converter+0xaf>
c000a9e3:	83 fa 06             	cmp    edx,0x6
c000a9e6:	75 10                	jne    c000a9f8 <sinc_set_converter+0xa1>
c000a9e8:	c7 43 24 3e 9f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009f3e
c000a9ef:	c7 43 20 3e 9f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009f3e
c000a9f6:	eb 0e                	jmp    c000aa06 <sinc_set_converter+0xaf>
c000a9f8:	c7 43 24 bc 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009cbc
c000a9ff:	c7 43 20 bc 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009cbc
c000aa06:	c7 43 28 7a 96 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000967a
c000aa0d:	b8 0a 00 00 00       	mov    eax,0xa
c000aa12:	81 c4 58 08 00 00    	add    esp,0x858
c000aa18:	5b                   	pop    ebx
c000aa19:	c3                   	ret    

c000aa1a <is_bad_src_ratio>:
c000aa1a:	83 ec 0c             	sub    esp,0xc
c000aa1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa21:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa28:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa2c:	dd 04 24             	fld    QWORD PTR [esp]
c000aa2f:	dd 05 80 0e 02 c0    	fld    QWORD PTR ds:0xc0020e80
c000aa35:	de d9                	fcompp 
c000aa37:	df e0                	fnstsw ax
c000aa39:	f6 c4 45             	test   ah,0x45
c000aa3c:	74 10                	je     c000aa4e <is_bad_src_ratio+0x34>
c000aa3e:	dd 04 24             	fld    QWORD PTR [esp]
c000aa41:	dc 1d 88 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e88
c000aa47:	df e0                	fnstsw ax
c000aa49:	f6 c4 45             	test   ah,0x45
c000aa4c:	75 07                	jne    c000aa55 <is_bad_src_ratio+0x3b>
c000aa4e:	b8 01 00 00 00       	mov    eax,0x1
c000aa53:	eb 05                	jmp    c000aa5a <is_bad_src_ratio+0x40>
c000aa55:	b8 00 00 00 00       	mov    eax,0x0
c000aa5a:	83 c4 0c             	add    esp,0xc
c000aa5d:	c3                   	ret    

c000aa5e <fmod_one>:
c000aa5e:	83 ec 2c             	sub    esp,0x2c
c000aa61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aa6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa71:	83 ec 08             	sub    esp,0x8
c000aa74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa7c:	e8 cf 4c 01 00       	call   c001f750 <lrint>
c000aa81:	83 c4 10             	add    esp,0x10
c000aa84:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa88:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000aa8c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa90:	de e1                	fsubrp st(1),st
c000aa92:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aa96:	d9 ee                	fldz   
c000aa98:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aa9c:	df e0                	fnstsw ax
c000aa9e:	f6 c4 45             	test   ah,0x45
c000aaa1:	75 0a                	jne    c000aaad <fmod_one+0x4f>
c000aaa3:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aaa7:	d9 e8                	fld1   
c000aaa9:	de c1                	faddp  st(1),st
c000aaab:	eb 04                	jmp    c000aab1 <fmod_one+0x53>
c000aaad:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aab1:	83 c4 2c             	add    esp,0x2c
c000aab4:	c3                   	ret    

c000aab5 <zoh_vari_process>:
c000aab5:	55                   	push   ebp
c000aab6:	57                   	push   edi
c000aab7:	56                   	push   esi
c000aab8:	53                   	push   ebx
c000aab9:	83 ec 2c             	sub    esp,0x2c
c000aabc:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aac0:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aac4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aacc:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aad0:	0f 8e 30 02 00 00    	jle    c000ad06 <zoh_vari_process+0x251>
c000aad6:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aad9:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aae1:	85 db                	test   ebx,ebx
c000aae3:	0f 84 1d 02 00 00    	je     c000ad06 <zoh_vari_process+0x251>
c000aae9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aaec:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aaf0:	74 19                	je     c000ab0b <zoh_vari_process+0x56>
c000aaf2:	31 d2                	xor    edx,edx
c000aaf4:	39 c2                	cmp    edx,eax
c000aaf6:	7d 0c                	jge    c000ab04 <zoh_vari_process+0x4f>
c000aaf8:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aafa:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000aafd:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ab01:	42                   	inc    edx
c000ab02:	eb f0                	jmp    c000aaf4 <zoh_vari_process+0x3f>
c000ab04:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ab0b:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ab0e:	0f af d0             	imul   edx,eax
c000ab11:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ab14:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ab18:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ab1f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ab22:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ab29:	dd 07                	fld    QWORD PTR [edi]
c000ab2b:	dd 14 24             	fst    QWORD PTR [esp]
c000ab2e:	50                   	push   eax
c000ab2f:	50                   	push   eax
c000ab30:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab33:	e8 e2 fe ff ff       	call   c000aa1a <is_bad_src_ratio>
c000ab38:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ab3c:	5a                   	pop    edx
c000ab3d:	59                   	pop    ecx
c000ab3e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000ab43:	0f 85 b5 01 00 00    	jne    c000acfe <zoh_vari_process+0x249>
c000ab49:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000ab4c:	d9 e8                	fld1   
c000ab4e:	d8 d1                	fcom   st(1)
c000ab50:	df e0                	fnstsw ax
c000ab52:	9e                   	sahf   
c000ab53:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000ab57:	0f 86 83 00 00 00    	jbe    c000abe0 <zoh_vari_process+0x12b>
c000ab5d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab60:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab63:	7d 7b                	jge    c000abe0 <zoh_vari_process+0x12b>
c000ab65:	d9 c0                	fld    st(0)
c000ab67:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ab6a:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000ab6d:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000ab70:	df e0                	fnstsw ax
c000ab72:	9e                   	sahf   
c000ab73:	73 6b                	jae    c000abe0 <zoh_vari_process+0x12b>
c000ab75:	85 d2                	test   edx,edx
c000ab77:	7e 36                	jle    c000abaf <zoh_vari_process+0xfa>
c000ab79:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ab7d:	dd 07                	fld    QWORD PTR [edi]
c000ab7f:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ab82:	83 ec 10             	sub    esp,0x10
c000ab85:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab88:	e8 a3 4b 01 00       	call   c001f730 <fabs>
c000ab8d:	83 c4 10             	add    esp,0x10
c000ab90:	dc 1d f8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ef8
c000ab96:	df e0                	fnstsw ax
c000ab98:	9e                   	sahf   
c000ab99:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab9d:	76 10                	jbe    c000abaf <zoh_vari_process+0xfa>
c000ab9f:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000aba2:	dc 27                	fsub   QWORD PTR [edi]
c000aba4:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000aba7:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000abaa:	dc 07                	fadd   QWORD PTR [edi]
c000abac:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abaf:	31 c0                	xor    eax,eax
c000abb1:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000abb4:	7e 13                	jle    c000abc9 <zoh_vari_process+0x114>
c000abb6:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000abba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000abbd:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000abc0:	40                   	inc    eax
c000abc1:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000abc4:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000abc7:	eb e8                	jmp    c000abb1 <zoh_vari_process+0xfc>
c000abc9:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000abcd:	dc 34 24             	fdiv   QWORD PTR [esp]
c000abd0:	de c1                	faddp  st(1),st
c000abd2:	e9 75 ff ff ff       	jmp    c000ab4c <zoh_vari_process+0x97>
c000abd7:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000abdb:	dc 34 24             	fdiv   QWORD PTR [esp]
c000abde:	de c1                	faddp  st(1),st
c000abe0:	83 ec 10             	sub    esp,0x10
c000abe3:	dd 14 24             	fst    QWORD PTR [esp]
c000abe6:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000abea:	e8 6f fe ff ff       	call   c000aa5e <fmod_one>
c000abef:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000abf2:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000abf6:	d8 e1                	fsub   st,st(1)
c000abf8:	d9 c9                	fxch   st(1)
c000abfa:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000abfe:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac01:	e8 4a 4b 01 00       	call   c001f750 <lrint>
c000ac06:	83 c4 10             	add    esp,0x10
c000ac09:	0f af e8             	imul   ebp,eax
c000ac0c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ac0f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ac12:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac16:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ac19:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ac1c:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ac1f:	0f 8d 80 00 00 00    	jge    c000aca5 <zoh_vari_process+0x1f0>
c000ac25:	d9 c0                	fld    st(0)
c000ac27:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ac2a:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ac2e:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000ac32:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ac36:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000ac3a:	de d9                	fcompp 
c000ac3c:	df e0                	fnstsw ax
c000ac3e:	9e                   	sahf   
c000ac3f:	72 64                	jb     c000aca5 <zoh_vari_process+0x1f0>
c000ac41:	85 d2                	test   edx,edx
c000ac43:	7e 36                	jle    c000ac7b <zoh_vari_process+0x1c6>
c000ac45:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ac49:	dd 07                	fld    QWORD PTR [edi]
c000ac4b:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ac4e:	83 ec 10             	sub    esp,0x10
c000ac51:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac54:	e8 d7 4a 01 00       	call   c001f730 <fabs>
c000ac59:	83 c4 10             	add    esp,0x10
c000ac5c:	dc 1d f8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ef8
c000ac62:	df e0                	fnstsw ax
c000ac64:	9e                   	sahf   
c000ac65:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac69:	76 10                	jbe    c000ac7b <zoh_vari_process+0x1c6>
c000ac6b:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ac6e:	dc 27                	fsub   QWORD PTR [edi]
c000ac70:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ac73:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ac76:	dc 07                	fadd   QWORD PTR [edi]
c000ac78:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac7b:	31 d2                	xor    edx,edx
c000ac7d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ac80:	39 d0                	cmp    eax,edx
c000ac82:	0f 8e 4f ff ff ff    	jle    c000abd7 <zoh_vari_process+0x122>
c000ac88:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ac8b:	29 c1                	sub    ecx,eax
c000ac8d:	89 c8                	mov    eax,ecx
c000ac8f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac91:	01 d0                	add    eax,edx
c000ac93:	42                   	inc    edx
c000ac94:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000ac97:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ac9a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ac9d:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000aca0:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000aca3:	eb d8                	jmp    c000ac7d <zoh_vari_process+0x1c8>
c000aca5:	39 e9                	cmp    ecx,ebp
c000aca7:	7d 13                	jge    c000acbc <zoh_vari_process+0x207>
c000aca9:	89 e8                	mov    eax,ebp
c000acab:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000acae:	29 c8                	sub    eax,ecx
c000acb0:	99                   	cdq    
c000acb1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acb4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acb8:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000acbc:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000acbf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000acc2:	85 c0                	test   eax,eax
c000acc4:	7f 1b                	jg     c000ace1 <zoh_vari_process+0x22c>
c000acc6:	dd 04 24             	fld    QWORD PTR [esp]
c000acc9:	dd 1f                	fstp   QWORD PTR [edi]
c000accb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000acce:	99                   	cdq    
c000accf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acd2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000acd5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000acd8:	99                   	cdq    
c000acd9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acdc:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000acdf:	eb 25                	jmp    c000ad06 <zoh_vari_process+0x251>
c000ace1:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ace4:	31 d2                	xor    edx,edx
c000ace6:	29 e8                	sub    eax,ebp
c000ace8:	c1 e0 02             	shl    eax,0x2
c000aceb:	39 d5                	cmp    ebp,edx
c000aced:	7e d7                	jle    c000acc6 <zoh_vari_process+0x211>
c000acef:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000acf1:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000acf4:	83 c0 04             	add    eax,0x4
c000acf7:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000acfb:	42                   	inc    edx
c000acfc:	eb ed                	jmp    c000aceb <zoh_vari_process+0x236>
c000acfe:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ad06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ad0a:	83 c4 2c             	add    esp,0x2c
c000ad0d:	5b                   	pop    ebx
c000ad0e:	5e                   	pop    esi
c000ad0f:	5f                   	pop    edi
c000ad10:	5d                   	pop    ebp
c000ad11:	c3                   	ret    

c000ad12 <zoh_reset>:
c000ad12:	83 ec 0c             	sub    esp,0xc
c000ad15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad19:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ad1c:	85 c0                	test   eax,eax
c000ad1e:	74 20                	je     c000ad40 <zoh_reset+0x2e>
c000ad20:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ad23:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c000ad2a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ad2d:	51                   	push   ecx
c000ad2e:	c1 e2 02             	shl    edx,0x2
c000ad31:	83 c0 1c             	add    eax,0x1c
c000ad34:	52                   	push   edx
c000ad35:	6a 00                	push   0x0
c000ad37:	50                   	push   eax
c000ad38:	e8 87 59 ff ff       	call   c00006c4 <memset>
c000ad3d:	83 c4 10             	add    esp,0x10
c000ad40:	83 c4 0c             	add    esp,0xc
c000ad43:	c3                   	ret    

c000ad44 <zoh_get_name>:
c000ad44:	31 c0                	xor    eax,eax
c000ad46:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad4b:	75 05                	jne    c000ad52 <zoh_get_name+0xe>
c000ad4d:	b8 94 10 02 c0       	mov    eax,0xc0021094
c000ad52:	c3                   	ret    

c000ad53 <zoh_get_description>:
c000ad53:	31 c0                	xor    eax,eax
c000ad55:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad5a:	75 05                	jne    c000ad61 <zoh_get_description+0xe>
c000ad5c:	b8 a5 10 02 c0       	mov    eax,0xc00210a5
c000ad61:	c3                   	ret    

c000ad62 <zoh_set_converter>:
c000ad62:	53                   	push   ebx
c000ad63:	b8 0a 00 00 00       	mov    eax,0xa
c000ad68:	83 ec 08             	sub    esp,0x8
c000ad6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad6f:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000ad74:	75 6e                	jne    c000ade4 <zoh_set_converter+0x82>
c000ad76:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000ad79:	85 c0                	test   eax,eax
c000ad7b:	74 13                	je     c000ad90 <zoh_set_converter+0x2e>
c000ad7d:	83 ec 0c             	sub    esp,0xc
c000ad80:	50                   	push   eax
c000ad81:	e8 6d 12 00 00       	call   c000bff3 <free>
c000ad86:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ad8d:	83 c4 10             	add    esp,0x10
c000ad90:	50                   	push   eax
c000ad91:	50                   	push   eax
c000ad92:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad95:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ad9c:	50                   	push   eax
c000ad9d:	6a 01                	push   0x1
c000ad9f:	e8 6f 12 00 00       	call   c000c013 <calloc>
c000ada4:	89 c2                	mov    edx,eax
c000ada6:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000ada9:	83 c4 10             	add    esp,0x10
c000adac:	b8 01 00 00 00       	mov    eax,0x1
c000adb1:	85 d2                	test   edx,edx
c000adb3:	74 2f                	je     c000ade4 <zoh_set_converter+0x82>
c000adb5:	83 ec 0c             	sub    esp,0xc
c000adb8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000adbb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000adbe:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000adc4:	c7 43 24 b5 aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aab5
c000adcb:	c7 43 20 b5 aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aab5
c000add2:	c7 43 28 12 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad12
c000add9:	53                   	push   ebx
c000adda:	e8 33 ff ff ff       	call   c000ad12 <zoh_reset>
c000addf:	83 c4 10             	add    esp,0x10
c000ade2:	31 c0                	xor    eax,eax
c000ade4:	83 c4 08             	add    esp,0x8
c000ade7:	5b                   	pop    ebx
c000ade8:	c3                   	ret    
c000ade9:	90                   	nop

c000adea <Computer::close(int, int, void*)>:
c000adea:	57                   	push   edi
c000adeb:	56                   	push   esi
c000adec:	53                   	push   ebx
c000aded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000adf1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000adf5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000adf9:	83 ec 0c             	sub    esp,0xc
c000adfc:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ae02:	50                   	push   eax
c000ae03:	e8 98 59 00 00       	call   c00107a0 <Device::closeAll()>
c000ae08:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae13:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ae17:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ae1f:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ae23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae27:	5b                   	pop    ebx
c000ae28:	5e                   	pop    esi
c000ae29:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ae2c:	5f                   	pop    edi
c000ae2d:	ff e0                	jmp    eax
c000ae2f:	90                   	nop

c000ae30 <Computer::Computer()>:
c000ae30:	83 ec 0c             	sub    esp,0xc
c000ae33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae37:	83 ec 08             	sub    esp,0x8
c000ae3a:	68 dc 10 02 c0       	push   0xc00210dc
c000ae3f:	50                   	push   eax
c000ae40:	e8 d5 59 00 00       	call   c001081a <Device::Device(char const*)>
c000ae45:	83 c4 10             	add    esp,0x10
c000ae48:	ba a4 12 02 c0       	mov    edx,0xc00212a4
c000ae4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae51:	89 10                	mov    DWORD PTR [eax],edx
c000ae53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae57:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ae61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae65:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ae6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae73:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000ae79:	83 ca 04             	or     edx,0x4
c000ae7c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000ae82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae86:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae8c:	31 d2                	xor    edx,edx
c000ae8e:	88 c2                	mov    dl,al
c000ae90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae94:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ae9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae9f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aea5:	31 d2                	xor    edx,edx
c000aea7:	88 c2                	mov    dl,al
c000aea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aead:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000aeb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aebc:	8d 50 01             	lea    edx,[eax+0x1]
c000aebf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aec3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aec9:	31 d2                	xor    edx,edx
c000aecb:	88 c2                	mov    dl,al
c000aecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aed5:	83 e1 3f             	and    ecx,0x3f
c000aed8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aedc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aee6:	31 d2                	xor    edx,edx
c000aee8:	88 c2                	mov    dl,al
c000aeea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeee:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000aef5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aef9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeff:	31 d2                	xor    edx,edx
c000af01:	88 c2                	mov    dl,al
c000af03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af07:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000af0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af16:	8d 50 01             	lea    edx,[eax+0x1]
c000af19:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af1d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af23:	31 d2                	xor    edx,edx
c000af25:	88 c2                	mov    dl,al
c000af27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af2b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af2f:	83 e1 3f             	and    ecx,0x3f
c000af32:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af3a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af40:	31 d2                	xor    edx,edx
c000af42:	88 c2                	mov    dl,al
c000af44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af48:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000af4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af53:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af59:	31 d2                	xor    edx,edx
c000af5b:	88 c2                	mov    dl,al
c000af5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af61:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000af66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af70:	8d 50 01             	lea    edx,[eax+0x1]
c000af73:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af77:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af7d:	31 d2                	xor    edx,edx
c000af7f:	88 c2                	mov    dl,al
c000af81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af85:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af89:	83 e1 3f             	and    ecx,0x3f
c000af8c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af90:	90                   	nop
c000af91:	83 c4 0c             	add    esp,0xc
c000af94:	c3                   	ret    
c000af95:	90                   	nop

c000af96 <Computer::setBootMessage(char const*)>:
c000af96:	c3                   	ret    
c000af97:	90                   	nop

c000af98 <Computer::start()>:
c000af98:	56                   	push   esi
c000af99:	53                   	push   ebx
c000af9a:	83 ec 14             	sub    esp,0x14
c000af9d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000afa1:	e8 a7 da 00 00       	call   c0018a4d <lockScheduler()>
c000afa6:	e8 eb dd 00 00       	call   c0018d96 <schedule()>
c000afab:	e8 9f da 00 00       	call   c0018a4f <unlockScheduler()>
c000afb0:	fb                   	sti    
c000afb1:	83 ec 0c             	sub    esp,0xc
c000afb4:	68 3b 07 00 00       	push   0x73b
c000afb9:	e8 22 41 00 00       	call   c000f0e0 <operator new(unsigned long)>
c000afbe:	89 c6                	mov    esi,eax
c000afc0:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c000afc5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000afcc:	50                   	push   eax
c000afcd:	68 e5 10 02 c0       	push   0xc00210e5
c000afd2:	6a 01                	push   0x1
c000afd4:	56                   	push   esi
c000afd5:	e8 ca d8 00 00       	call   c00188a4 <Process::Process(bool, char const*, Process*, char**)>
c000afda:	83 c4 20             	add    esp,0x20
c000afdd:	68 ff 00 00 00       	push   0xff
c000afe2:	6a 00                	push   0x0
c000afe4:	68 71 b9 00 c0       	push   0xc000b971
c000afe9:	56                   	push   esi
c000afea:	e8 93 db 00 00       	call   c0018b82 <Process::createThread(void (*)(void*), void*, int)>
c000afef:	6a 7a                	push   0x7a
c000aff1:	8b 15 f4 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025bf4
c000aff7:	6a 00                	push   0x0
c000aff9:	68 c7 93 01 c0       	push   0xc00193c7
c000affe:	52                   	push   edx
c000afff:	e8 7e db 00 00       	call   c0018b82 <Process::createThread(void (*)(void*), void*, int)>
c000b004:	83 c4 20             	add    esp,0x20
c000b007:	a3 a8 5b 02 c0       	mov    ds:0xc0025ba8,eax
c000b00c:	c6 05 ad 47 02 c0 01 	mov    BYTE PTR ds:0xc00247ad,0x1
c000b013:	e8 60 45 00 00       	call   c000f578 <initVFS()>
c000b018:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b01e:	8b 10                	mov    edx,DWORD PTR [eax]
c000b020:	6a 00                	push   0x0
c000b022:	6a 00                	push   0x0
c000b024:	6a 00                	push   0x0
c000b026:	50                   	push   eax
c000b027:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b02a:	e8 6c c2 00 00       	call   c001729b <setupSystemCalls()>
c000b02f:	e8 42 50 00 00       	call   c0010076 <loadClockSettings()>
c000b034:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b037:	e8 38 57 00 00       	call   c0010774 <Device::loadDriversForAll()>
c000b03c:	bb 02 00 00 00       	mov    ebx,0x2
c000b041:	b8 01 00 00 00       	mov    eax,0x1
c000b046:	31 d2                	xor    edx,edx
c000b048:	31 c9                	xor    ecx,ecx
c000b04a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b052:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b05a:	f0 0f c7 4c 24 18    	lock cmpxchg8b QWORD PTR [esp+0x18]
c000b060:	59                   	pop    ecx
c000b061:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c000b067:	5e                   	pop    esi
c000b068:	6a 01                	push   0x1
c000b06a:	68 f2 10 02 c0       	push   0xc00210f2
c000b06f:	e8 f3 d3 00 00       	call   c0018467 <Thr::loadDLL(char const*, bool)>
c000b074:	5a                   	pop    edx
c000b075:	59                   	pop    ecx
c000b076:	53                   	push   ebx
c000b077:	50                   	push   eax
c000b078:	e8 b0 d5 00 00       	call   c001862d <Thr::executeDLL(unsigned long, void*)>
c000b07d:	c7 04 24 e8 22 02 c0 	mov    DWORD PTR [esp],0xc00222e8
c000b084:	e8 8c 41 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000b089:	83 c4 10             	add    esp,0x10
c000b08c:	83 ec 0c             	sub    esp,0xc
c000b08f:	6a 02                	push   0x2
c000b091:	e8 59 de 00 00       	call   c0018eef <blockTask(TaskState)>
c000b096:	83 c4 10             	add    esp,0x10
c000b099:	eb f1                	jmp    c000b08c <Computer::start()+0xf4>

c000b09b <firstTask()>:
c000b09b:	83 ec 18             	sub    esp,0x18
c000b09e:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c000b0a3:	50                   	push   eax
c000b0a4:	e8 ef fe ff ff       	call   c000af98 <Computer::start()>
c000b0a9:	90                   	nop

c000b0aa <Computer::detectFeatures()>:
c000b0aa:	55                   	push   ebp
c000b0ab:	57                   	push   edi
c000b0ac:	56                   	push   esi
c000b0ad:	53                   	push   ebx
c000b0ae:	83 ec 1c             	sub    esp,0x1c
c000b0b1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b0b5:	8b b3 e8 01 00 00    	mov    esi,DWORD PTR [ebx+0x1e8]
c000b0bb:	81 e6 04 00 fc ff    	and    esi,0xfffc0004
c000b0c1:	89 b3 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],esi
c000b0c7:	e8 af 52 ff ff       	call   c000037b <detectCPUID>
c000b0cc:	85 c0                	test   eax,eax
c000b0ce:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0d4:	0f 95 c2             	setne  dl
c000b0d7:	01 d2                	add    edx,edx
c000b0d9:	83 e0 fd             	and    eax,0xfffffffd
c000b0dc:	09 d0                	or     eax,edx
c000b0de:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b0e4:	a8 02                	test   al,0x2
c000b0e6:	75 4e                	jne    c000b136 <Computer::detectFeatures()+0x8c>
c000b0e8:	f6 05 c1 47 02 c0 04 	test   BYTE PTR ds:0xc00247c1,0x4
c000b0ef:	74 0f                	je     c000b100 <Computer::detectFeatures()+0x56>
c000b0f1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0f7:	83 e0 fb             	and    eax,0xfffffffb
c000b0fa:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b100:	e8 d1 40 01 00       	call   c001f1d6 <x87Detect>
c000b105:	83 e0 01             	and    eax,0x1
c000b108:	c1 e0 04             	shl    eax,0x4
c000b10b:	88 c2                	mov    dl,al
c000b10d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b113:	83 e0 ef             	and    eax,0xffffffef
c000b116:	09 d0                	or     eax,edx
c000b118:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b11e:	a8 10                	test   al,0x10
c000b120:	0f 85 20 01 00 00    	jne    c000b246 <Computer::detectFeatures()+0x19c>
c000b126:	84 c0                	test   al,al
c000b128:	0f 88 3b 01 00 00    	js     c000b269 <Computer::detectFeatures()+0x1bf>
c000b12e:	83 c4 1c             	add    esp,0x1c
c000b131:	5b                   	pop    ebx
c000b132:	5e                   	pop    esi
c000b133:	5f                   	pop    edi
c000b134:	5d                   	pop    ebp
c000b135:	c3                   	ret    
c000b136:	83 ec 0c             	sub    esp,0xc
c000b139:	6a 20                	push   0x20
c000b13b:	e8 e1 96 00 00       	call   c0014821 <cpuidCheckEDX(unsigned int)>
c000b140:	83 e0 01             	and    eax,0x1
c000b143:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b14a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b150:	83 e0 f7             	and    eax,0xfffffff7
c000b153:	09 d0                	or     eax,edx
c000b155:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b15b:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b162:	e8 ba 96 00 00       	call   c0014821 <cpuidCheckEDX(unsigned int)>
c000b167:	83 e0 01             	and    eax,0x1
c000b16a:	88 c2                	mov    dl,al
c000b16c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b172:	83 e0 fe             	and    eax,0xfffffffe
c000b175:	09 d0                	or     eax,edx
c000b177:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b17d:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b184:	e8 98 96 00 00       	call   c0014821 <cpuidCheckEDX(unsigned int)>
c000b189:	c1 e0 07             	shl    eax,0x7
c000b18c:	88 c2                	mov    dl,al
c000b18e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b194:	83 e0 7f             	and    eax,0x7f
c000b197:	09 d0                	or     eax,edx
c000b199:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b19f:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b1a6:	e8 76 96 00 00       	call   c0014821 <cpuidCheckEDX(unsigned int)>
c000b1ab:	83 c4 10             	add    esp,0x10
c000b1ae:	83 e0 01             	and    eax,0x1
c000b1b1:	c1 e0 05             	shl    eax,0x5
c000b1b4:	88 c2                	mov    dl,al
c000b1b6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b1bc:	83 e0 df             	and    eax,0xffffffdf
c000b1bf:	09 d0                	or     eax,edx
c000b1c1:	f7 05 c0 47 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00247c0,0x401
c000b1cb:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b1d1:	0f 84 b8 00 00 00    	je     c000b28f <Computer::detectFeatures()+0x1e5>
c000b1d7:	83 ec 0c             	sub    esp,0xc
c000b1da:	8a 8b e8 01 00 00    	mov    cl,BYTE PTR [ebx+0x1e8]
c000b1e0:	83 e1 fe             	and    ecx,0xfffffffe
c000b1e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b1e7:	88 8b e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],cl
c000b1ed:	50                   	push   eax
c000b1ee:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b1f2:	55                   	push   ebp
c000b1f3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b1f7:	57                   	push   edi
c000b1f8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b1fc:	56                   	push   esi
c000b1fd:	68 00 00 00 80       	push   0x80000000
c000b202:	e8 97 95 00 00       	call   c001479e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b207:	83 c4 20             	add    esp,0x20
c000b20a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b211:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b215:	0f 86 cd fe ff ff    	jbe    c000b0e8 <Computer::detectFeatures()+0x3e>
c000b21b:	83 ec 0c             	sub    esp,0xc
c000b21e:	50                   	push   eax
c000b21f:	55                   	push   ebp
c000b220:	57                   	push   edi
c000b221:	56                   	push   esi
c000b222:	68 01 00 00 80       	push   0x80000001
c000b227:	e8 72 95 00 00       	call   c001479e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b22c:	8b 93 e8 01 00 00    	mov    edx,DWORD PTR [ebx+0x1e8]
c000b232:	83 c4 20             	add    esp,0x20
c000b235:	81 e2 bf ff fc ff    	and    edx,0xfffcffbf
c000b23b:	89 93 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],edx
c000b241:	e9 a2 fe ff ff       	jmp    c000b0e8 <Computer::detectFeatures()+0x3e>
c000b246:	e8 45 3f 01 00       	call   c001f190 <sseDetect>
c000b24b:	88 c2                	mov    dl,al
c000b24d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b253:	c1 e2 07             	shl    edx,0x7
c000b256:	83 e0 7f             	and    eax,0x7f
c000b259:	09 d0                	or     eax,edx
c000b25b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b261:	84 c0                	test   al,al
c000b263:	0f 89 c5 fe ff ff    	jns    c000b12e <Computer::detectFeatures()+0x84>
c000b269:	e8 12 3f 01 00       	call   c001f180 <avxDetect>
c000b26e:	83 e0 01             	and    eax,0x1
c000b271:	c1 e0 05             	shl    eax,0x5
c000b274:	88 c2                	mov    dl,al
c000b276:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b27c:	83 e0 df             	and    eax,0xffffffdf
c000b27f:	09 d0                	or     eax,edx
c000b281:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b287:	83 c4 1c             	add    esp,0x1c
c000b28a:	5b                   	pop    ebx
c000b28b:	5e                   	pop    esi
c000b28c:	5f                   	pop    edi
c000b28d:	5d                   	pop    ebp
c000b28e:	c3                   	ret    
c000b28f:	83 ec 0c             	sub    esp,0xc
c000b292:	68 00 02 00 00       	push   0x200
c000b297:	e8 85 95 00 00       	call   c0014821 <cpuidCheckEDX(unsigned int)>
c000b29c:	83 c4 10             	add    esp,0x10
c000b29f:	e9 33 ff ff ff       	jmp    c000b1d7 <Computer::detectFeatures()+0x12d>

c000b2a4 <Computer::displayFeatures()>:
c000b2a4:	53                   	push   ebx
c000b2a5:	83 ec 14             	sub    esp,0x14
c000b2a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b2ac:	68 15 11 02 c0       	push   0xc0021115
c000b2b1:	e8 5f 3f 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000b2b6:	83 c4 10             	add    esp,0x10
c000b2b9:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b2be:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000b2c5:	74 05                	je     c000b2cc <Computer::displayFeatures()+0x28>
c000b2c7:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b2cc:	51                   	push   ecx
c000b2cd:	51                   	push   ecx
c000b2ce:	50                   	push   eax
c000b2cf:	68 28 11 02 c0       	push   0xc0021128
c000b2d4:	e8 3c 3f 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000b2d9:	83 c4 10             	add    esp,0x10
c000b2dc:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b2e1:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000b2e8:	75 05                	jne    c000b2ef <Computer::displayFeatures()+0x4b>
c000b2ea:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b2ef:	52                   	push   edx
c000b2f0:	52                   	push   edx
c000b2f1:	50                   	push   eax
c000b2f2:	68 39 11 02 c0       	push   0xc0021139
c000b2f7:	e8 19 3f 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000b2fc:	83 c4 10             	add    esp,0x10
c000b2ff:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b304:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000b30b:	75 05                	jne    c000b312 <Computer::displayFeatures()+0x6e>
c000b30d:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b312:	51                   	push   ecx
c000b313:	51                   	push   ecx
c000b314:	50                   	push   eax
c000b315:	68 4a 11 02 c0       	push   0xc002114a
c000b31a:	e8 f6 3e 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000b31f:	83 c4 10             	add    esp,0x10
c000b322:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b327:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000b32e:	75 05                	jne    c000b335 <Computer::displayFeatures()+0x91>
c000b330:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b335:	52                   	push   edx
c000b336:	52                   	push   edx
c000b337:	50                   	push   eax
c000b338:	68 5b 11 02 c0       	push   0xc002115b
c000b33d:	e8 d3 3e 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000b342:	83 c4 10             	add    esp,0x10
c000b345:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b34a:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000b351:	75 05                	jne    c000b358 <Computer::displayFeatures()+0xb4>
c000b353:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b358:	51                   	push   ecx
c000b359:	51                   	push   ecx
c000b35a:	50                   	push   eax
c000b35b:	68 6c 11 02 c0       	push   0xc002116c
c000b360:	e8 b0 3e 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000b365:	83 c4 10             	add    esp,0x10
c000b368:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b36d:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000b374:	75 05                	jne    c000b37b <Computer::displayFeatures()+0xd7>
c000b376:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b37b:	52                   	push   edx
c000b37c:	52                   	push   edx
c000b37d:	50                   	push   eax
c000b37e:	68 7d 11 02 c0       	push   0xc002117d
c000b383:	e8 8d 3e 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000b388:	83 c4 10             	add    esp,0x10
c000b38b:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b390:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000b397:	75 05                	jne    c000b39e <Computer::displayFeatures()+0xfa>
c000b399:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b39e:	51                   	push   ecx
c000b39f:	51                   	push   ecx
c000b3a0:	50                   	push   eax
c000b3a1:	68 8e 11 02 c0       	push   0xc002118e
c000b3a6:	e8 6a 3e 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000b3ab:	83 c4 10             	add    esp,0x10
c000b3ae:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b3b3:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000b3ba:	78 05                	js     c000b3c1 <Computer::displayFeatures()+0x11d>
c000b3bc:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b3c1:	52                   	push   edx
c000b3c2:	52                   	push   edx
c000b3c3:	50                   	push   eax
c000b3c4:	68 9f 11 02 c0       	push   0xc002119f
c000b3c9:	e8 47 3e 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000b3ce:	83 c4 10             	add    esp,0x10
c000b3d1:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b3d6:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000b3dd:	0f 84 93 01 00 00    	je     c000b576 <Computer::displayFeatures()+0x2d2>
c000b3e3:	51                   	push   ecx
c000b3e4:	51                   	push   ecx
c000b3e5:	50                   	push   eax
c000b3e6:	68 b0 11 02 c0       	push   0xc00211b0
c000b3eb:	e8 25 3e 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000b3f0:	83 c4 10             	add    esp,0x10
c000b3f3:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b3f8:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000b3ff:	0f 84 67 01 00 00    	je     c000b56c <Computer::displayFeatures()+0x2c8>
c000b405:	52                   	push   edx
c000b406:	52                   	push   edx
c000b407:	50                   	push   eax
c000b408:	68 c1 11 02 c0       	push   0xc00211c1
c000b40d:	e8 03 3e 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000b412:	83 c4 10             	add    esp,0x10
c000b415:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b41a:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000b421:	0f 84 3b 01 00 00    	je     c000b562 <Computer::displayFeatures()+0x2be>
c000b427:	51                   	push   ecx
c000b428:	51                   	push   ecx
c000b429:	50                   	push   eax
c000b42a:	68 d2 11 02 c0       	push   0xc00211d2
c000b42f:	e8 e1 3d 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000b434:	83 c4 10             	add    esp,0x10
c000b437:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b43c:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000b443:	0f 84 0f 01 00 00    	je     c000b558 <Computer::displayFeatures()+0x2b4>
c000b449:	52                   	push   edx
c000b44a:	52                   	push   edx
c000b44b:	50                   	push   eax
c000b44c:	68 e3 11 02 c0       	push   0xc00211e3
c000b451:	e8 bf 3d 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000b456:	83 c4 10             	add    esp,0x10
c000b459:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b45e:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000b465:	0f 84 e3 00 00 00    	je     c000b54e <Computer::displayFeatures()+0x2aa>
c000b46b:	51                   	push   ecx
c000b46c:	51                   	push   ecx
c000b46d:	50                   	push   eax
c000b46e:	68 f4 11 02 c0       	push   0xc00211f4
c000b473:	e8 9d 3d 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b480:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000b487:	0f 84 b7 00 00 00    	je     c000b544 <Computer::displayFeatures()+0x2a0>
c000b48d:	52                   	push   edx
c000b48e:	52                   	push   edx
c000b48f:	50                   	push   eax
c000b490:	68 05 12 02 c0       	push   0xc0021205
c000b495:	e8 7b 3d 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000b49a:	83 c4 10             	add    esp,0x10
c000b49d:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b4a2:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000b4a9:	0f 84 8b 00 00 00    	je     c000b53a <Computer::displayFeatures()+0x296>
c000b4af:	51                   	push   ecx
c000b4b0:	51                   	push   ecx
c000b4b1:	50                   	push   eax
c000b4b2:	68 16 12 02 c0       	push   0xc0021216
c000b4b7:	e8 59 3d 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000b4bc:	83 c4 10             	add    esp,0x10
c000b4bf:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b4c4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000b4cb:	78 05                	js     c000b4d2 <Computer::displayFeatures()+0x22e>
c000b4cd:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b4d2:	52                   	push   edx
c000b4d3:	52                   	push   edx
c000b4d4:	50                   	push   eax
c000b4d5:	68 27 12 02 c0       	push   0xc0021227
c000b4da:	e8 36 3d 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000b4df:	83 c4 10             	add    esp,0x10
c000b4e2:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b4e7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000b4ee:	74 43                	je     c000b533 <Computer::displayFeatures()+0x28f>
c000b4f0:	51                   	push   ecx
c000b4f1:	51                   	push   ecx
c000b4f2:	50                   	push   eax
c000b4f3:	68 38 12 02 c0       	push   0xc0021238
c000b4f8:	e8 18 3d 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000b4fd:	83 c4 10             	add    esp,0x10
c000b500:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b505:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000b50c:	74 1e                	je     c000b52c <Computer::displayFeatures()+0x288>
c000b50e:	52                   	push   edx
c000b50f:	52                   	push   edx
c000b510:	50                   	push   eax
c000b511:	68 49 12 02 c0       	push   0xc0021249
c000b516:	e8 fa 3c 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000b51b:	c7 44 24 20 c6 28 02 c0 	mov    DWORD PTR [esp+0x20],0xc00228c6
c000b523:	83 c4 18             	add    esp,0x18
c000b526:	5b                   	pop    ebx
c000b527:	e9 e9 3c 00 00       	jmp    c000f215 <Dbg::kprintf(char const*, ...)>
c000b52c:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b531:	eb db                	jmp    c000b50e <Computer::displayFeatures()+0x26a>
c000b533:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b538:	eb b6                	jmp    c000b4f0 <Computer::displayFeatures()+0x24c>
c000b53a:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b53f:	e9 6b ff ff ff       	jmp    c000b4af <Computer::displayFeatures()+0x20b>
c000b544:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b549:	e9 3f ff ff ff       	jmp    c000b48d <Computer::displayFeatures()+0x1e9>
c000b54e:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b553:	e9 13 ff ff ff       	jmp    c000b46b <Computer::displayFeatures()+0x1c7>
c000b558:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b55d:	e9 e7 fe ff ff       	jmp    c000b449 <Computer::displayFeatures()+0x1a5>
c000b562:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b567:	e9 bb fe ff ff       	jmp    c000b427 <Computer::displayFeatures()+0x183>
c000b56c:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b571:	e9 8f fe ff ff       	jmp    c000b405 <Computer::displayFeatures()+0x161>
c000b576:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b57b:	e9 63 fe ff ff       	jmp    c000b3e3 <Computer::displayFeatures()+0x13f>

c000b580 <Computer::rdmsr(unsigned int)>:
c000b580:	83 ec 0c             	sub    esp,0xc
c000b583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b587:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b58e:	74 0a                	je     c000b59a <Computer::rdmsr(unsigned int)+0x1a>
c000b590:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b594:	0f 32                	rdmsr  
c000b596:	83 c4 0c             	add    esp,0xc
c000b599:	c3                   	ret    
c000b59a:	83 ec 0c             	sub    esp,0xc
c000b59d:	68 5a 12 02 c0       	push   0xc002125a
c000b5a2:	e8 9d a4 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c000b5a7:	83 c4 10             	add    esp,0x10
c000b5aa:	eb e4                	jmp    c000b590 <Computer::rdmsr(unsigned int)+0x10>

c000b5ac <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b5ac:	57                   	push   edi
c000b5ad:	56                   	push   esi
c000b5ae:	52                   	push   edx
c000b5af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5b3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b5b7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b5bb:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5c2:	74 0e                	je     c000b5d2 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b5c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5c8:	89 f0                	mov    eax,esi
c000b5ca:	89 fa                	mov    edx,edi
c000b5cc:	0f 30                	wrmsr  
c000b5ce:	58                   	pop    eax
c000b5cf:	5e                   	pop    esi
c000b5d0:	5f                   	pop    edi
c000b5d1:	c3                   	ret    
c000b5d2:	83 ec 0c             	sub    esp,0xc
c000b5d5:	68 60 12 02 c0       	push   0xc0021260
c000b5da:	e8 65 a4 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c000b5df:	83 c4 10             	add    esp,0x10
c000b5e2:	eb e0                	jmp    c000b5c4 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b5e4 <Computer::nmiEnabled()>:
c000b5e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5e8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b5ee:	c3                   	ret    
c000b5ef:	90                   	nop

c000b5f0 <Computer::readCMOS(unsigned char)>:
c000b5f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b5f8:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b5ff:	19 c0                	sbb    eax,eax
c000b601:	83 e0 80             	and    eax,0xffffff80
c000b604:	09 d0                	or     eax,edx
c000b606:	e6 70                	out    0x70,al
c000b608:	e4 71                	in     al,0x71
c000b60a:	c3                   	ret    
c000b60b:	90                   	nop

c000b60c <Computer::enableNMI(bool)>:
c000b60c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b610:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b614:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b61a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b622:	eb cc                	jmp    c000b5f0 <Computer::readCMOS(unsigned char)>

c000b624 <Computer::open(int, int, void*)>:
c000b624:	56                   	push   esi
c000b625:	53                   	push   ebx
c000b626:	83 ec 10             	sub    esp,0x10
c000b629:	f6 05 c0 47 02 c0 04 	test   BYTE PTR ds:0xc00247c0,0x4
c000b630:	0f 94 05 e0 3b 02 c0 	sete   BYTE PTR ds:0xc0023be0
c000b637:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b63b:	68 68 22 00 00       	push   0x2268
c000b640:	e8 9b 3a 00 00       	call   c000f0e0 <operator new(unsigned long)>
c000b645:	89 c6                	mov    esi,eax
c000b647:	89 04 24             	mov    DWORD PTR [esp],eax
c000b64a:	e8 bf 87 00 00       	call   c0013e0e <ACPI::ACPI()>
c000b64f:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b655:	59                   	pop    ecx
c000b656:	58                   	pop    eax
c000b657:	56                   	push   esi
c000b658:	53                   	push   ebx
c000b659:	e8 cc 4f 00 00       	call   c001062a <Device::addChild(Device*)>
c000b65e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b661:	e8 44 fa ff ff       	call   c000b0aa <Computer::detectFeatures()>
c000b666:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b669:	e8 36 fc ff ff       	call   c000b2a4 <Computer::displayFeatures()>
c000b66e:	58                   	pop    eax
c000b66f:	5a                   	pop    edx
c000b670:	6a 01                	push   0x1
c000b672:	53                   	push   ebx
c000b673:	e8 94 ff ff ff       	call   c000b60c <Computer::enableNMI(bool)>
c000b678:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b67f:	e8 5c 3a 00 00       	call   c000f0e0 <operator new(unsigned long)>
c000b684:	89 c6                	mov    esi,eax
c000b686:	89 04 24             	mov    DWORD PTR [esp],eax
c000b689:	e8 5e 92 00 00       	call   c00148ec <CPU::CPU()>
c000b68e:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b694:	59                   	pop    ecx
c000b695:	58                   	pop    eax
c000b696:	56                   	push   esi
c000b697:	53                   	push   ebx
c000b698:	e8 8d 4f 00 00       	call   c001062a <Device::addChild(Device*)>
c000b69d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b6a3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b6a7:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6a9:	51                   	push   ecx
c000b6aa:	6a 00                	push   0x0
c000b6ac:	6a 00                	push   0x0
c000b6ae:	50                   	push   eax
c000b6af:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b6b2:	83 c4 20             	add    esp,0x20
c000b6b5:	e8 d8 54 00 00       	call   c0010b92 <setupFPU()>
c000b6ba:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b6c0:	85 c0                	test   eax,eax
c000b6c2:	74 1e                	je     c000b6e2 <Computer::open(int, int, void*)+0xbe>
c000b6c4:	52                   	push   edx
c000b6c5:	52                   	push   edx
c000b6c6:	50                   	push   eax
c000b6c7:	53                   	push   ebx
c000b6c8:	e8 5d 4f 00 00       	call   c001062a <Device::addChild(Device*)>
c000b6cd:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b6d3:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6d5:	6a 00                	push   0x0
c000b6d7:	6a 00                	push   0x0
c000b6d9:	6a 00                	push   0x0
c000b6db:	50                   	push   eax
c000b6dc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b6df:	83 c4 20             	add    esp,0x20
c000b6e2:	83 ec 0c             	sub    esp,0xc
c000b6e5:	68 9b b0 00 c0       	push   0xc000b09b
c000b6ea:	e8 92 d5 00 00       	call   c0018c81 <setupMultitasking(void (*)())>
c000b6ef:	83 c4 14             	add    esp,0x14
c000b6f2:	83 c8 ff             	or     eax,0xffffffff
c000b6f5:	5b                   	pop    ebx
c000b6f6:	5e                   	pop    esi
c000b6f7:	c3                   	ret    

c000b6f8 <Computer::disableNMI()>:
c000b6f8:	6a 00                	push   0x0
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	50                   	push   eax
c000b6ff:	e8 08 ff ff ff       	call   c000b60c <Computer::enableNMI(bool)>
c000b704:	5a                   	pop    edx
c000b705:	59                   	pop    ecx
c000b706:	c3                   	ret    
c000b707:	90                   	nop

c000b708 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b70c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b710:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b717:	19 c0                	sbb    eax,eax
c000b719:	83 e0 80             	and    eax,0xffffff80
c000b71c:	09 d0                	or     eax,edx
c000b71e:	e6 70                	out    0x70,al
c000b720:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b724:	e6 71                	out    0x71,al
c000b726:	c3                   	ret    
c000b727:	90                   	nop

c000b728 <Computer::handleNMI()>:
c000b728:	56                   	push   esi
c000b729:	53                   	push   ebx
c000b72a:	83 ec 10             	sub    esp,0x10
c000b72d:	e4 92                	in     al,0x92
c000b72f:	89 c6                	mov    esi,eax
c000b731:	e4 61                	in     al,0x61
c000b733:	68 66 12 02 c0       	push   0xc0021266
c000b738:	88 c3                	mov    bl,al
c000b73a:	e8 d6 3a 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000b73f:	83 c4 10             	add    esp,0x10
c000b742:	83 e6 10             	and    esi,0x10
c000b745:	75 0d                	jne    c000b754 <Computer::handleNMI()+0x2c>
c000b747:	f6 c3 40             	test   bl,0x40
c000b74a:	75 1d                	jne    c000b769 <Computer::handleNMI()+0x41>
c000b74c:	84 db                	test   bl,bl
c000b74e:	78 2d                	js     c000b77d <Computer::handleNMI()+0x55>
c000b750:	58                   	pop    eax
c000b751:	5b                   	pop    ebx
c000b752:	5e                   	pop    esi
c000b753:	c3                   	ret    
c000b754:	83 ec 0c             	sub    esp,0xc
c000b757:	68 77 12 02 c0       	push   0xc0021277
c000b75c:	e8 e3 a2 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c000b761:	83 c4 10             	add    esp,0x10
c000b764:	f6 c3 40             	test   bl,0x40
c000b767:	74 e3                	je     c000b74c <Computer::handleNMI()+0x24>
c000b769:	83 ec 0c             	sub    esp,0xc
c000b76c:	68 84 12 02 c0       	push   0xc0021284
c000b771:	e8 ce a2 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c000b776:	83 c4 10             	add    esp,0x10
c000b779:	84 db                	test   bl,bl
c000b77b:	79 d3                	jns    c000b750 <Computer::handleNMI()+0x28>
c000b77d:	c7 44 24 10 8e 12 02 c0 	mov    DWORD PTR [esp+0x10],0xc002128e
c000b785:	5a                   	pop    edx
c000b786:	5b                   	pop    ebx
c000b787:	5e                   	pop    esi
c000b788:	e9 b7 a2 00 00       	jmp    c0015a44 <Krnl::panic(char const*)>
c000b78d:	90                   	nop

c000b78e <Computer::setDiskActivityLight(int, bool)>:
c000b78e:	56                   	push   esi
c000b78f:	53                   	push   ebx
c000b790:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b794:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b799:	77 1c                	ja     c000b7b7 <Computer::setDiskActivityLight(int, bool)+0x29>
c000b79b:	e4 92                	in     al,0x92
c000b79d:	bb 40 00 00 00       	mov    ebx,0x40
c000b7a2:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b7a6:	89 da                	mov    edx,ebx
c000b7a8:	d3 e2                	shl    edx,cl
c000b7aa:	83 f2 ff             	xor    edx,0xffffffff
c000b7ad:	89 f1                	mov    ecx,esi
c000b7af:	21 d0                	and    eax,edx
c000b7b1:	d3 e3                	shl    ebx,cl
c000b7b3:	09 d8                	or     eax,ebx
c000b7b5:	e6 92                	out    0x92,al
c000b7b7:	5b                   	pop    ebx
c000b7b8:	5e                   	pop    esi
c000b7b9:	c3                   	ret    

c000b7ba <GDTEntry::setBase(unsigned int)>:
c000b7ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7be:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b7c2:	89 c1                	mov    ecx,eax
c000b7c4:	c1 e9 10             	shr    ecx,0x10
c000b7c7:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b7cb:	c1 e8 18             	shr    eax,0x18
c000b7ce:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b7d1:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b7d4:	c3                   	ret    
c000b7d5:	90                   	nop

c000b7d6 <GDTEntry::setLimit(unsigned int)>:
c000b7d6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b7da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7de:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b7e1:	66 89 01             	mov    WORD PTR [ecx],ax
c000b7e4:	c1 e8 10             	shr    eax,0x10
c000b7e7:	83 e2 f0             	and    edx,0xfffffff0
c000b7ea:	83 e0 0f             	and    eax,0xf
c000b7ed:	09 d0                	or     eax,edx
c000b7ef:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b7f2:	c3                   	ret    
c000b7f3:	90                   	nop

c000b7f4 <GDT::GDT()>:
c000b7f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7f8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b7fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b802:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b808:	90                   	nop
c000b809:	c3                   	ret    

c000b80a <GDT::addEntry(GDTEntry)>:
c000b80a:	53                   	push   ebx
c000b80b:	83 ec 0c             	sub    esp,0xc
c000b80e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b812:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b814:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b81b:	52                   	push   edx
c000b81c:	50                   	push   eax
c000b81d:	68 c8 12 02 c0       	push   0xc00212c8
c000b822:	e8 ee 39 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000b827:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b829:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b82d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b831:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b835:	8d 50 01             	lea    edx,[eax+0x1]
c000b838:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b83c:	89 13                	mov    DWORD PTR [ebx],edx
c000b83e:	c1 e0 03             	shl    eax,0x3
c000b841:	83 c4 18             	add    esp,0x18
c000b844:	5b                   	pop    ebx
c000b845:	c3                   	ret    

c000b846 <GDT::getNumberOfEntries()>:
c000b846:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b84a:	8b 00                	mov    eax,DWORD PTR [eax]
c000b84c:	c3                   	ret    
c000b84d:	90                   	nop

c000b84e <GDT::flush()>:
c000b84e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b852:	83 c0 04             	add    eax,0x4
c000b855:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000b858:	a3 b2 47 02 c0       	mov    ds:0xc00247b2,eax
c000b85d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b864:	66 89 15 b0 47 02 c0 	mov    WORD PTR ds:0xc00247b0,dx
c000b86b:	e9 7f 4b ff ff       	jmp    c00003ef <loadGDT>

c000b870 <GDT::setup()>:
c000b870:	55                   	push   ebp
c000b871:	57                   	push   edi
c000b872:	56                   	push   esi
c000b873:	53                   	push   ebx
c000b874:	83 ec 3c             	sub    esp,0x3c
c000b877:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b87b:	6a 00                	push   0x0
c000b87d:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b881:	53                   	push   ebx
c000b882:	e8 33 ff ff ff       	call   c000b7ba <GDTEntry::setBase(unsigned int)>
c000b887:	6a 00                	push   0x0
c000b889:	53                   	push   ebx
c000b88a:	e8 47 ff ff ff       	call   c000b7d6 <GDTEntry::setLimit(unsigned int)>
c000b88f:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b897:	6a 00                	push   0x0
c000b899:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b89d:	53                   	push   ebx
c000b89e:	e8 17 ff ff ff       	call   c000b7ba <GDTEntry::setBase(unsigned int)>
c000b8a3:	68 ff ff ff 00       	push   0xffffff
c000b8a8:	53                   	push   ebx
c000b8a9:	e8 28 ff ff ff       	call   c000b7d6 <GDTEntry::setLimit(unsigned int)>
c000b8ae:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b8b2:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b8b7:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b8bc:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b8c0:	83 c4 20             	add    esp,0x20
c000b8c3:	6a 00                	push   0x0
c000b8c5:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b8c9:	53                   	push   ebx
c000b8ca:	e8 eb fe ff ff       	call   c000b7ba <GDTEntry::setBase(unsigned int)>
c000b8cf:	68 ff ff ff 00       	push   0xffffff
c000b8d4:	53                   	push   ebx
c000b8d5:	e8 fc fe ff ff       	call   c000b7d6 <GDTEntry::setLimit(unsigned int)>
c000b8da:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b8de:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b8e2:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b8e7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b8eb:	0d 00 92 c0 00       	or     eax,0xc09200
c000b8f0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b8f4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b8f8:	89 d8                	mov    eax,ebx
c000b8fa:	80 cc 60             	or     ah,0x60
c000b8fd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b901:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b905:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b909:	83 c4 0c             	add    esp,0xc
c000b90c:	89 f8                	mov    eax,edi
c000b90e:	80 cc 60             	or     ah,0x60
c000b911:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b915:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b919:	89 c7                	mov    edi,eax
c000b91b:	55                   	push   ebp
c000b91c:	e8 e9 fe ff ff       	call   c000b80a <GDT::addEntry(GDTEntry)>
c000b921:	83 c4 0c             	add    esp,0xc
c000b924:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b928:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b92c:	55                   	push   ebp
c000b92d:	e8 d8 fe ff ff       	call   c000b80a <GDT::addEntry(GDTEntry)>
c000b932:	83 c4 0c             	add    esp,0xc
c000b935:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b939:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b93d:	55                   	push   ebp
c000b93e:	e8 c7 fe ff ff       	call   c000b80a <GDT::addEntry(GDTEntry)>
c000b943:	83 c4 0c             	add    esp,0xc
c000b946:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b94a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b94e:	53                   	push   ebx
c000b94f:	51                   	push   ecx
c000b950:	55                   	push   ebp
c000b951:	e8 b4 fe ff ff       	call   c000b80a <GDT::addEntry(GDTEntry)>
c000b956:	83 c4 0c             	add    esp,0xc
c000b959:	57                   	push   edi
c000b95a:	56                   	push   esi
c000b95b:	55                   	push   ebp
c000b95c:	e8 a9 fe ff ff       	call   c000b80a <GDT::addEntry(GDTEntry)>
c000b961:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b964:	e8 e5 fe ff ff       	call   c000b84e <GDT::flush()>
c000b969:	83 c4 4c             	add    esp,0x4c
c000b96c:	5b                   	pop    ebx
c000b96d:	5e                   	pop    esi
c000b96e:	5f                   	pop    edi
c000b96f:	5d                   	pop    ebp
c000b970:	c3                   	ret    

c000b971 <idleFunction(void*)>:
c000b971:	53                   	push   ebx
c000b972:	83 ec 08             	sub    esp,0x8
c000b975:	e8 d5 d0 00 00       	call   c0018a4f <unlockScheduler()>
c000b97a:	e8 59 8f 00 00       	call   c00148d8 <thisCPU()>
c000b97f:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b986:	74 41                	je     c000b9c9 <idleFunction(void*)+0x58>
c000b988:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c000b98d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b994:	74 33                	je     c000b9c9 <idleFunction(void*)+0x58>
c000b996:	52                   	push   edx
c000b997:	31 db                	xor    ebx,ebx
c000b999:	52                   	push   edx
c000b99a:	68 e1 00 00 00       	push   0xe1
c000b99f:	50                   	push   eax
c000b9a0:	e8 db fb ff ff       	call   c000b580 <Computer::rdmsr(unsigned int)>
c000b9a5:	53                   	push   ebx
c000b9a6:	83 e0 02             	and    eax,0x2
c000b9a9:	50                   	push   eax
c000b9aa:	68 e1 00 00 00       	push   0xe1
c000b9af:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c000b9b5:	e8 f2 fb ff ff       	call   c000b5ac <Computer::wrmsr(unsigned int, unsigned long long)>
c000b9ba:	83 c4 20             	add    esp,0x20
c000b9bd:	e8 45 48 ff ff       	call   c0000207 <doTPAUSE>
c000b9c2:	e8 09 3e 01 00       	call   c001f7d0 <idleCommon()>
c000b9c7:	eb f4                	jmp    c000b9bd <idleFunction(void*)+0x4c>
c000b9c9:	fb                   	sti    
c000b9ca:	f4                   	hlt    
c000b9cb:	e8 00 3e 01 00       	call   c001f7d0 <idleCommon()>
c000b9d0:	eb f7                	jmp    c000b9c9 <idleFunction(void*)+0x58>

c000b9d2 <IDTEntry::IDTEntry(bool)>:
c000b9d2:	83 ec 04             	sub    esp,0x4
c000b9d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9d9:	88 04 24             	mov    BYTE PTR [esp],al
c000b9dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9e0:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000b9e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9ea:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000b9ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9f2:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b9f5:	83 e2 f0             	and    edx,0xfffffff0
c000b9f8:	83 ca 0e             	or     edx,0xe
c000b9fb:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b9fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba02:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba05:	83 e2 ef             	and    edx,0xffffffef
c000ba08:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba0b:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ba0f:	74 04                	je     c000ba15 <IDTEntry::IDTEntry(bool)+0x43>
c000ba11:	b2 03                	mov    dl,0x3
c000ba13:	eb 02                	jmp    c000ba17 <IDTEntry::IDTEntry(bool)+0x45>
c000ba15:	b2 00                	mov    dl,0x0
c000ba17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba1b:	83 e2 03             	and    edx,0x3
c000ba1e:	88 d1                	mov    cl,dl
c000ba20:	c1 e1 05             	shl    ecx,0x5
c000ba23:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba26:	83 e2 9f             	and    edx,0xffffff9f
c000ba29:	09 ca                	or     edx,ecx
c000ba2b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba32:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba35:	83 ca 80             	or     edx,0xffffff80
c000ba38:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba3b:	90                   	nop
c000ba3c:	83 c4 04             	add    esp,0x4
c000ba3f:	c3                   	ret    

c000ba40 <IDTEntry::setOffset(unsigned int)>:
c000ba40:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ba44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba48:	66 89 02             	mov    WORD PTR [edx],ax
c000ba4b:	c1 e8 10             	shr    eax,0x10
c000ba4e:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ba52:	c3                   	ret    
c000ba53:	90                   	nop

c000ba54 <IDT::IDT()>:
c000ba54:	90                   	nop
c000ba55:	c3                   	ret    

c000ba56 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ba56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba5a:	83 c0 30             	add    eax,0x30
c000ba5d:	c3                   	ret    

c000ba5e <IDT::addEntry(IDTEntry, int)>:
c000ba5e:	53                   	push   ebx
c000ba5f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba67:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ba6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ba6f:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ba72:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ba76:	5b                   	pop    ebx
c000ba77:	c3                   	ret    

c000ba78 <IDT::addEntry(int, void (*)(), bool)>:
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 10             	sub    esp,0x10
c000ba7c:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ba81:	50                   	push   eax
c000ba82:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ba86:	53                   	push   ebx
c000ba87:	e8 46 ff ff ff       	call   c000b9d2 <IDTEntry::IDTEntry(bool)>
c000ba8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ba90:	53                   	push   ebx
c000ba91:	e8 aa ff ff ff       	call   c000ba40 <IDTEntry::setOffset(unsigned int)>
c000ba96:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ba9a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ba9e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000baa2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baa6:	e8 b3 ff ff ff       	call   c000ba5e <IDT::addEntry(IDTEntry, int)>
c000baab:	83 c4 30             	add    esp,0x30
c000baae:	5b                   	pop    ebx
c000baaf:	c3                   	ret    

c000bab0 <IDT::flush()>:
c000bab0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bab4:	66 c7 05 b8 47 02 c0 ff 07 	mov    WORD PTR ds:0xc00247b8,0x7ff
c000babd:	a3 ba 47 02 c0       	mov    ds:0xc00247ba,eax
c000bac2:	0f 01 1d b8 47 02 c0 	lidtd  ds:0xc00247b8
c000bac9:	c3                   	ret    

c000baca <IDT::setup()>:
c000baca:	57                   	push   edi
c000bacb:	56                   	push   esi
c000bacc:	53                   	push   ebx
c000bacd:	83 ec 10             	sub    esp,0x10
c000bad0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bad4:	6a 00                	push   0x0
c000bad6:	68 0f 04 00 c0       	push   0xc000040f
c000badb:	6a 00                	push   0x0
c000badd:	53                   	push   ebx
c000bade:	e8 95 ff ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bae3:	6a 00                	push   0x0
c000bae5:	68 1f 04 00 c0       	push   0xc000041f
c000baea:	6a 01                	push   0x1
c000baec:	53                   	push   ebx
c000baed:	e8 86 ff ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000baf2:	83 c4 20             	add    esp,0x20
c000baf5:	6a 00                	push   0x0
c000baf7:	68 29 04 00 c0       	push   0xc0000429
c000bafc:	6a 02                	push   0x2
c000bafe:	53                   	push   ebx
c000baff:	e8 74 ff ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bb04:	6a 00                	push   0x0
c000bb06:	68 33 04 00 c0       	push   0xc0000433
c000bb0b:	6a 03                	push   0x3
c000bb0d:	53                   	push   ebx
c000bb0e:	e8 65 ff ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bb13:	83 c4 20             	add    esp,0x20
c000bb16:	6a 00                	push   0x0
c000bb18:	68 3d 04 00 c0       	push   0xc000043d
c000bb1d:	6a 04                	push   0x4
c000bb1f:	53                   	push   ebx
c000bb20:	e8 53 ff ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bb25:	6a 00                	push   0x0
c000bb27:	68 47 04 00 c0       	push   0xc0000447
c000bb2c:	6a 05                	push   0x5
c000bb2e:	53                   	push   ebx
c000bb2f:	e8 44 ff ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bb34:	83 c4 20             	add    esp,0x20
c000bb37:	6a 00                	push   0x0
c000bb39:	68 51 04 00 c0       	push   0xc0000451
c000bb3e:	6a 06                	push   0x6
c000bb40:	53                   	push   ebx
c000bb41:	e8 32 ff ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bb46:	6a 00                	push   0x0
c000bb48:	68 5b 04 00 c0       	push   0xc000045b
c000bb4d:	6a 07                	push   0x7
c000bb4f:	53                   	push   ebx
c000bb50:	e8 23 ff ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bb55:	83 c4 20             	add    esp,0x20
c000bb58:	6a 00                	push   0x0
c000bb5a:	68 65 04 00 c0       	push   0xc0000465
c000bb5f:	6a 08                	push   0x8
c000bb61:	53                   	push   ebx
c000bb62:	e8 11 ff ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bb67:	6a 00                	push   0x0
c000bb69:	68 6d 04 00 c0       	push   0xc000046d
c000bb6e:	6a 09                	push   0x9
c000bb70:	53                   	push   ebx
c000bb71:	e8 02 ff ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bb76:	83 c4 20             	add    esp,0x20
c000bb79:	6a 00                	push   0x0
c000bb7b:	68 77 04 00 c0       	push   0xc0000477
c000bb80:	6a 0a                	push   0xa
c000bb82:	53                   	push   ebx
c000bb83:	e8 f0 fe ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bb88:	6a 00                	push   0x0
c000bb8a:	68 7f 04 00 c0       	push   0xc000047f
c000bb8f:	6a 0b                	push   0xb
c000bb91:	53                   	push   ebx
c000bb92:	e8 e1 fe ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bb97:	83 c4 20             	add    esp,0x20
c000bb9a:	6a 00                	push   0x0
c000bb9c:	68 87 04 00 c0       	push   0xc0000487
c000bba1:	6a 0c                	push   0xc
c000bba3:	53                   	push   ebx
c000bba4:	e8 cf fe ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bba9:	6a 00                	push   0x0
c000bbab:	68 8f 04 00 c0       	push   0xc000048f
c000bbb0:	6a 0d                	push   0xd
c000bbb2:	53                   	push   ebx
c000bbb3:	e8 c0 fe ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bbb8:	83 c4 20             	add    esp,0x20
c000bbbb:	6a 00                	push   0x0
c000bbbd:	68 97 04 00 c0       	push   0xc0000497
c000bbc2:	6a 0e                	push   0xe
c000bbc4:	53                   	push   ebx
c000bbc5:	e8 ae fe ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bbca:	6a 00                	push   0x0
c000bbcc:	68 9f 04 00 c0       	push   0xc000049f
c000bbd1:	6a 0f                	push   0xf
c000bbd3:	53                   	push   ebx
c000bbd4:	e8 9f fe ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bbd9:	83 c4 20             	add    esp,0x20
c000bbdc:	6a 00                	push   0x0
c000bbde:	68 a9 04 00 c0       	push   0xc00004a9
c000bbe3:	6a 10                	push   0x10
c000bbe5:	53                   	push   ebx
c000bbe6:	e8 8d fe ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bbeb:	6a 00                	push   0x0
c000bbed:	68 b3 04 00 c0       	push   0xc00004b3
c000bbf2:	6a 11                	push   0x11
c000bbf4:	53                   	push   ebx
c000bbf5:	e8 7e fe ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bbfa:	83 c4 20             	add    esp,0x20
c000bbfd:	6a 00                	push   0x0
c000bbff:	68 bd 04 00 c0       	push   0xc00004bd
c000bc04:	6a 12                	push   0x12
c000bc06:	53                   	push   ebx
c000bc07:	e8 6c fe ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bc0c:	6a 01                	push   0x1
c000bc0e:	68 c7 04 00 c0       	push   0xc00004c7
c000bc13:	6a 60                	push   0x60
c000bc15:	53                   	push   ebx
c000bc16:	e8 5d fe ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bc1b:	83 c4 20             	add    esp,0x20
c000bc1e:	6a 00                	push   0x0
c000bc20:	68 d1 04 00 c0       	push   0xc00004d1
c000bc25:	6a 20                	push   0x20
c000bc27:	53                   	push   ebx
c000bc28:	e8 4b fe ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bc2d:	6a 00                	push   0x0
c000bc2f:	68 db 04 00 c0       	push   0xc00004db
c000bc34:	6a 21                	push   0x21
c000bc36:	53                   	push   ebx
c000bc37:	e8 3c fe ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bc3c:	83 c4 20             	add    esp,0x20
c000bc3f:	6a 00                	push   0x0
c000bc41:	68 e5 04 00 c0       	push   0xc00004e5
c000bc46:	6a 22                	push   0x22
c000bc48:	53                   	push   ebx
c000bc49:	e8 2a fe ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bc4e:	6a 00                	push   0x0
c000bc50:	68 ef 04 00 c0       	push   0xc00004ef
c000bc55:	6a 23                	push   0x23
c000bc57:	53                   	push   ebx
c000bc58:	e8 1b fe ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bc5d:	83 c4 20             	add    esp,0x20
c000bc60:	6a 00                	push   0x0
c000bc62:	68 f9 04 00 c0       	push   0xc00004f9
c000bc67:	6a 24                	push   0x24
c000bc69:	53                   	push   ebx
c000bc6a:	e8 09 fe ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bc6f:	6a 00                	push   0x0
c000bc71:	68 03 05 00 c0       	push   0xc0000503
c000bc76:	6a 25                	push   0x25
c000bc78:	53                   	push   ebx
c000bc79:	e8 fa fd ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bc7e:	83 c4 20             	add    esp,0x20
c000bc81:	6a 00                	push   0x0
c000bc83:	68 0d 05 00 c0       	push   0xc000050d
c000bc88:	6a 26                	push   0x26
c000bc8a:	53                   	push   ebx
c000bc8b:	e8 e8 fd ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bc90:	6a 00                	push   0x0
c000bc92:	68 17 05 00 c0       	push   0xc0000517
c000bc97:	6a 27                	push   0x27
c000bc99:	53                   	push   ebx
c000bc9a:	e8 d9 fd ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bc9f:	83 c4 20             	add    esp,0x20
c000bca2:	6a 00                	push   0x0
c000bca4:	68 21 05 00 c0       	push   0xc0000521
c000bca9:	6a 28                	push   0x28
c000bcab:	53                   	push   ebx
c000bcac:	e8 c7 fd ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bcb1:	6a 00                	push   0x0
c000bcb3:	68 2b 05 00 c0       	push   0xc000052b
c000bcb8:	6a 29                	push   0x29
c000bcba:	53                   	push   ebx
c000bcbb:	e8 b8 fd ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bcc0:	83 c4 20             	add    esp,0x20
c000bcc3:	6a 00                	push   0x0
c000bcc5:	68 35 05 00 c0       	push   0xc0000535
c000bcca:	6a 2a                	push   0x2a
c000bccc:	53                   	push   ebx
c000bccd:	e8 a6 fd ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bcd2:	6a 00                	push   0x0
c000bcd4:	68 3f 05 00 c0       	push   0xc000053f
c000bcd9:	6a 2b                	push   0x2b
c000bcdb:	53                   	push   ebx
c000bcdc:	e8 97 fd ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bce1:	83 c4 20             	add    esp,0x20
c000bce4:	6a 00                	push   0x0
c000bce6:	68 49 05 00 c0       	push   0xc0000549
c000bceb:	6a 2c                	push   0x2c
c000bced:	53                   	push   ebx
c000bcee:	e8 85 fd ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bcf3:	6a 00                	push   0x0
c000bcf5:	68 53 05 00 c0       	push   0xc0000553
c000bcfa:	6a 2d                	push   0x2d
c000bcfc:	53                   	push   ebx
c000bcfd:	e8 76 fd ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bd02:	83 c4 20             	add    esp,0x20
c000bd05:	6a 00                	push   0x0
c000bd07:	68 5d 05 00 c0       	push   0xc000055d
c000bd0c:	6a 2e                	push   0x2e
c000bd0e:	53                   	push   ebx
c000bd0f:	e8 64 fd ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bd14:	6a 00                	push   0x0
c000bd16:	68 67 05 00 c0       	push   0xc0000567
c000bd1b:	6a 2f                	push   0x2f
c000bd1d:	53                   	push   ebx
c000bd1e:	e8 55 fd ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bd23:	83 c4 20             	add    esp,0x20
c000bd26:	6a 00                	push   0x0
c000bd28:	68 71 05 00 c0       	push   0xc0000571
c000bd2d:	6a 30                	push   0x30
c000bd2f:	53                   	push   ebx
c000bd30:	e8 43 fd ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bd35:	6a 00                	push   0x0
c000bd37:	68 7b 05 00 c0       	push   0xc000057b
c000bd3c:	6a 31                	push   0x31
c000bd3e:	53                   	push   ebx
c000bd3f:	e8 34 fd ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bd44:	83 c4 20             	add    esp,0x20
c000bd47:	6a 00                	push   0x0
c000bd49:	68 85 05 00 c0       	push   0xc0000585
c000bd4e:	6a 32                	push   0x32
c000bd50:	53                   	push   ebx
c000bd51:	e8 22 fd ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bd56:	6a 00                	push   0x0
c000bd58:	68 8f 05 00 c0       	push   0xc000058f
c000bd5d:	6a 33                	push   0x33
c000bd5f:	53                   	push   ebx
c000bd60:	e8 13 fd ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bd65:	83 c4 20             	add    esp,0x20
c000bd68:	6a 00                	push   0x0
c000bd6a:	68 99 05 00 c0       	push   0xc0000599
c000bd6f:	6a 34                	push   0x34
c000bd71:	53                   	push   ebx
c000bd72:	e8 01 fd ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bd77:	6a 00                	push   0x0
c000bd79:	68 a3 05 00 c0       	push   0xc00005a3
c000bd7e:	6a 35                	push   0x35
c000bd80:	53                   	push   ebx
c000bd81:	e8 f2 fc ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bd86:	83 c4 20             	add    esp,0x20
c000bd89:	6a 00                	push   0x0
c000bd8b:	68 ad 05 00 c0       	push   0xc00005ad
c000bd90:	6a 36                	push   0x36
c000bd92:	53                   	push   ebx
c000bd93:	e8 e0 fc ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bd98:	6a 00                	push   0x0
c000bd9a:	68 b7 05 00 c0       	push   0xc00005b7
c000bd9f:	6a 37                	push   0x37
c000bda1:	53                   	push   ebx
c000bda2:	e8 d1 fc ff ff       	call   c000ba78 <IDT::addEntry(int, void (*)(), bool)>
c000bda7:	83 c4 20             	add    esp,0x20
c000bdaa:	e8 d8 25 00 00       	call   c000e387 <Virt::getAKernelVAS()>
c000bdaf:	52                   	push   edx
c000bdb0:	6a 03                	push   0x3
c000bdb2:	6a 02                	push   0x2
c000bdb4:	50                   	push   eax
c000bdb5:	e8 0e 2c 00 00       	call   c000e9c8 <VAS::allocatePages(int, int)>
c000bdba:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000bdc1:	89 c6                	mov    esi,eax
c000bdc3:	e8 18 33 00 00       	call   c000f0e0 <operator new(unsigned long)>
c000bdc8:	81 c6 00 20 00 00    	add    esi,0x2000
c000bdce:	89 04 24             	mov    DWORD PTR [esp],eax
c000bdd1:	89 c7                	mov    edi,eax
c000bdd3:	e8 ee 1c 00 00       	call   c000dac6 <TSS::TSS()>
c000bdd8:	83 c4 0c             	add    esp,0xc
c000bddb:	68 65 04 00 c0       	push   0xc0000465
c000bde0:	56                   	push   esi
c000bde1:	57                   	push   edi
c000bde2:	e8 1f 1d 00 00       	call   c000db06 <TSS::setup(unsigned long, unsigned long)>
c000bde7:	59                   	pop    ecx
c000bde8:	89 c6                	mov    esi,eax
c000bdea:	5f                   	pop    edi
c000bdeb:	6a 00                	push   0x0
c000bded:	8d 44 24 14          	lea    eax,[esp+0x14]
c000bdf1:	50                   	push   eax
c000bdf2:	e8 db fb ff ff       	call   c000b9d2 <IDTEntry::IDTEntry(bool)>
c000bdf7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bdfb:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000be00:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000be06:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000be0d:	80 ce 05             	or     dh,0x5
c000be10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be14:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be18:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000be1b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be1f:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000be22:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000be25:	e8 86 fc ff ff       	call   c000bab0 <IDT::flush()>
c000be2a:	83 c4 20             	add    esp,0x20
c000be2d:	5b                   	pop    ebx
c000be2e:	5e                   	pop    esi
c000be2f:	5f                   	pop    edi
c000be30:	c3                   	ret    

c000be31 <sbrk>:
c000be31:	55                   	push   ebp
c000be32:	57                   	push   edi
c000be33:	56                   	push   esi
c000be34:	53                   	push   ebx
c000be35:	83 ec 1c             	sub    esp,0x1c
c000be38:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000be3c:	85 db                	test   ebx,ebx
c000be3e:	a1 c0 3b 02 c0       	mov    eax,ds:0xc0023bc0
c000be43:	0f 84 e4 00 00 00    	je     c000bf2d <sbrk+0xfc>
c000be49:	78 3d                	js     c000be88 <sbrk+0x57>
c000be4b:	e8 88 8a 00 00       	call   c00148d8 <thisCPU()>
c000be50:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000be56:	83 e0 01             	and    eax,0x1
c000be59:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000be5d:	a1 c0 3b 02 c0       	mov    eax,ds:0xc0023bc0
c000be62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be66:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000be6c:	89 d8                	mov    eax,ebx
c000be6e:	c1 f8 1f             	sar    eax,0x1f
c000be71:	25 ff 0f 00 00       	and    eax,0xfff
c000be76:	01 c3                	add    ebx,eax
c000be78:	c1 fb 0c             	sar    ebx,0xc
c000be7b:	89 df                	mov    edi,ebx
c000be7d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000be81:	be 00 00 00 00       	mov    esi,0x0
c000be86:	eb 2a                	jmp    c000beb2 <sbrk+0x81>
c000be88:	83 ec 08             	sub    esp,0x8
c000be8b:	53                   	push   ebx
c000be8c:	68 e4 12 02 c0       	push   0xc00212e4
c000be91:	e8 7f 33 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000be96:	83 c4 10             	add    esp,0x10
c000be99:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000be9e:	e9 8a 00 00 00       	jmp    c000bf2d <sbrk+0xfc>
c000bea3:	81 05 c0 3b 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023bc0,0x1000
c000bead:	46                   	inc    esi
c000beae:	39 f7                	cmp    edi,esi
c000beb0:	74 34                	je     c000bee6 <sbrk+0xb5>
c000beb2:	e8 d0 24 00 00       	call   c000e387 <Virt::getAKernelVAS()>
c000beb7:	89 c3                	mov    ebx,eax
c000beb9:	8b 2d c0 3b 02 c0    	mov    ebp,DWORD PTR ds:0xc0023bc0
c000bebf:	e8 f5 06 00 00       	call   c000c5b9 <Phys::allocatePage()>
c000bec4:	68 01 04 00 00       	push   0x401
c000bec9:	55                   	push   ebp
c000beca:	50                   	push   eax
c000becb:	53                   	push   ebx
c000becc:	e8 f5 29 00 00       	call   c000e8c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bed1:	83 c4 10             	add    esp,0x10
c000bed4:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bed9:	74 c8                	je     c000bea3 <sbrk+0x72>
c000bedb:	8b 1d c0 3b 02 c0    	mov    ebx,DWORD PTR ds:0xc0023bc0
c000bee1:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bee4:	eb bd                	jmp    c000bea3 <sbrk+0x72>
c000bee6:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000beeb:	74 48                	je     c000bf35 <sbrk+0x104>
c000beed:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bef1:	89 d3                	mov    ebx,edx
c000bef3:	c1 eb 0a             	shr    ebx,0xa
c000bef6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000befc:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bf02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf06:	c1 e0 0c             	shl    eax,0xc
c000bf09:	01 d0                	add    eax,edx
c000bf0b:	c1 e8 0a             	shr    eax,0xa
c000bf0e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf13:	2d 00 00 40 00       	sub    eax,0x400000
c000bf18:	39 c3                	cmp    ebx,eax
c000bf1a:	77 0d                	ja     c000bf29 <sbrk+0xf8>
c000bf1c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf1f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf25:	39 d8                	cmp    eax,ebx
c000bf27:	73 f3                	jae    c000bf1c <sbrk+0xeb>
c000bf29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf2d:	83 c4 1c             	add    esp,0x1c
c000bf30:	5b                   	pop    ebx
c000bf31:	5e                   	pop    esi
c000bf32:	5f                   	pop    edi
c000bf33:	5d                   	pop    ebp
c000bf34:	c3                   	ret    
c000bf35:	e8 ab 38 01 00       	call   c001f7e5 <CPU::readCR3()>
c000bf3a:	83 ec 0c             	sub    esp,0xc
c000bf3d:	50                   	push   eax
c000bf3e:	e8 b4 38 01 00       	call   c001f7f7 <CPU::writeCR3(unsigned long)>
c000bf43:	83 c4 10             	add    esp,0x10
c000bf46:	eb e1                	jmp    c000bf29 <sbrk+0xf8>

c000bf48 <mmap>:
c000bf48:	83 ec 18             	sub    esp,0x18
c000bf4b:	68 14 13 02 c0       	push   0xc0021314
c000bf50:	e8 ef 9a 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c000bf55:	b8 00 00 00 00       	mov    eax,0x0
c000bf5a:	83 c4 1c             	add    esp,0x1c
c000bf5d:	c3                   	ret    

c000bf5e <munmap>:
c000bf5e:	83 ec 18             	sub    esp,0x18
c000bf61:	68 19 13 02 c0       	push   0xc0021319
c000bf66:	e8 d9 9a 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c000bf6b:	b8 00 00 00 00       	mov    eax,0x0
c000bf70:	83 c4 1c             	add    esp,0x1c
c000bf73:	c3                   	ret    

c000bf74 <liballoc_lock()>:
c000bf74:	83 ec 0c             	sub    esp,0xc
c000bf77:	e8 d1 ca 00 00       	call   c0018a4d <lockScheduler()>
c000bf7c:	b8 00 00 00 00       	mov    eax,0x0
c000bf81:	83 c4 0c             	add    esp,0xc
c000bf84:	c3                   	ret    

c000bf85 <liballoc_unlock()>:
c000bf85:	83 ec 0c             	sub    esp,0xc
c000bf88:	e8 c2 ca 00 00       	call   c0018a4f <unlockScheduler()>
c000bf8d:	b8 00 00 00 00       	mov    eax,0x0
c000bf92:	83 c4 0c             	add    esp,0xc
c000bf95:	c3                   	ret    

c000bf96 <liballoc_alloc(int)>:
c000bf96:	83 ec 0c             	sub    esp,0xc
c000bf99:	e8 e9 23 00 00       	call   c000e387 <Virt::getAKernelVAS()>
c000bf9e:	83 ec 04             	sub    esp,0x4
c000bfa1:	6a 01                	push   0x1
c000bfa3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfa7:	50                   	push   eax
c000bfa8:	e8 1b 2a 00 00       	call   c000e9c8 <VAS::allocatePages(int, int)>
c000bfad:	83 c4 1c             	add    esp,0x1c
c000bfb0:	c3                   	ret    

c000bfb1 <liballoc_free(void*, int)>:
c000bfb1:	83 ec 0c             	sub    esp,0xc
c000bfb4:	e8 ce 23 00 00       	call   c000e387 <Virt::getAKernelVAS()>
c000bfb9:	83 ec 08             	sub    esp,0x8
c000bfbc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfc0:	50                   	push   eax
c000bfc1:	e8 a2 26 00 00       	call   c000e668 <VAS::freeAllocatedPages(unsigned long)>
c000bfc6:	b8 00 00 00 00       	mov    eax,0x0
c000bfcb:	83 c4 1c             	add    esp,0x1c
c000bfce:	c3                   	ret    

c000bfcf <realloc>:
c000bfcf:	83 ec 14             	sub    esp,0x14
c000bfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfda:	e8 63 54 ff ff       	call   c0001442 <dlrealloc>
c000bfdf:	83 c4 1c             	add    esp,0x1c
c000bfe2:	c3                   	ret    

c000bfe3 <malloc>:
c000bfe3:	83 ec 18             	sub    esp,0x18
c000bfe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfea:	e8 16 4f ff ff       	call   c0000f05 <dlmalloc>
c000bfef:	83 c4 1c             	add    esp,0x1c
c000bff2:	c3                   	ret    

c000bff3 <free>:
c000bff3:	83 ec 18             	sub    esp,0x18
c000bff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bffa:	e8 a8 4b ff ff       	call   c0000ba7 <dlfree>
c000bfff:	83 c4 1c             	add    esp,0x1c
c000c002:	c3                   	ret    

c000c003 <rfree>:
c000c003:	83 ec 18             	sub    esp,0x18
c000c006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c00a:	e8 e4 ff ff ff       	call   c000bff3 <free>
c000c00f:	83 c4 1c             	add    esp,0x1c
c000c012:	c3                   	ret    

c000c013 <calloc>:
c000c013:	56                   	push   esi
c000c014:	53                   	push   ebx
c000c015:	83 ec 10             	sub    esp,0x10
c000c018:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c01c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000c021:	53                   	push   ebx
c000c022:	e8 bc ff ff ff       	call   c000bfe3 <malloc>
c000c027:	89 c6                	mov    esi,eax
c000c029:	83 c4 0c             	add    esp,0xc
c000c02c:	53                   	push   ebx
c000c02d:	6a 00                	push   0x0
c000c02f:	50                   	push   eax
c000c030:	e8 8f 46 ff ff       	call   c00006c4 <memset>
c000c035:	89 f0                	mov    eax,esi
c000c037:	83 c4 14             	add    esp,0x14
c000c03a:	5b                   	pop    ebx
c000c03b:	5e                   	pop    esi
c000c03c:	c3                   	ret    

c000c03d <hwTextMode_loadInData(VgaText*)>:
c000c03d:	57                   	push   edi
c000c03e:	56                   	push   esi
c000c03f:	53                   	push   ebx
c000c040:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000c044:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000c04a:	85 c0                	test   eax,eax
c000c04c:	7e 30                	jle    c000c07e <hwTextMode_loadInData(VgaText*)+0x41>
c000c04e:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000c051:	31 f6                	xor    esi,esi
c000c053:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000c056:	31 c0                	xor    eax,eax
c000c058:	c1 e1 05             	shl    ecx,0x5
c000c05b:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000c061:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000c065:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000c069:	40                   	inc    eax
c000c06a:	83 f8 50             	cmp    eax,0x50
c000c06d:	75 f2                	jne    c000c061 <hwTextMode_loadInData(VgaText*)+0x24>
c000c06f:	46                   	inc    esi
c000c070:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000c076:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000c07c:	7f d5                	jg     c000c053 <hwTextMode_loadInData(VgaText*)+0x16>
c000c07e:	5b                   	pop    ebx
c000c07f:	5e                   	pop    esi
c000c080:	5f                   	pop    edi
c000c081:	c3                   	ret    

c000c082 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000c082:	56                   	push   esi
c000c083:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000c088:	53                   	push   ebx
c000c089:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c08d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c091:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000c097:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000c09d:	c1 e0 04             	shl    eax,0x4
c000c0a0:	83 e6 0f             	and    esi,0xf
c000c0a3:	25 ff 00 00 00       	and    eax,0xff
c000c0a8:	83 c2 02             	add    edx,0x2
c000c0ab:	09 f0                	or     eax,esi
c000c0ad:	41                   	inc    ecx
c000c0ae:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000c0b2:	c1 e0 08             	shl    eax,0x8
c000c0b5:	81 e6 ff 00 00 00    	and    esi,0xff
c000c0bb:	09 f0                	or     eax,esi
c000c0bd:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000c0c1:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000c0c7:	75 c8                	jne    c000c091 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000c0c9:	5b                   	pop    ebx
c000c0ca:	5e                   	pop    esi
c000c0cb:	c3                   	ret    

c000c0cc <hwTextMode_showCursor(VgaText*, bool)>:
c000c0cc:	56                   	push   esi
c000c0cd:	53                   	push   ebx
c000c0ce:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000c0d3:	74 38                	je     c000c10d <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000c0d5:	bb d4 03 00 00       	mov    ebx,0x3d4
c000c0da:	b0 0a                	mov    al,0xa
c000c0dc:	89 da                	mov    edx,ebx
c000c0de:	ee                   	out    dx,al
c000c0df:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000c0e4:	89 ca                	mov    edx,ecx
c000c0e6:	ec                   	in     al,dx
c000c0e7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c0eb:	b2 0f                	mov    dl,0xf
c000c0ed:	83 e0 c0             	and    eax,0xffffffc0
c000c0f0:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000c0f6:	09 d0                	or     eax,edx
c000c0f8:	89 ca                	mov    edx,ecx
c000c0fa:	ee                   	out    dx,al
c000c0fb:	b0 0b                	mov    al,0xb
c000c0fd:	89 da                	mov    edx,ebx
c000c0ff:	ee                   	out    dx,al
c000c100:	89 ca                	mov    edx,ecx
c000c102:	ec                   	in     al,dx
c000c103:	83 e0 e0             	and    eax,0xffffffe0
c000c106:	83 c8 0f             	or     eax,0xf
c000c109:	ee                   	out    dx,al
c000c10a:	5b                   	pop    ebx
c000c10b:	5e                   	pop    esi
c000c10c:	c3                   	ret    
c000c10d:	b0 0a                	mov    al,0xa
c000c10f:	ba d4 03 00 00       	mov    edx,0x3d4
c000c114:	ee                   	out    dx,al
c000c115:	b0 20                	mov    al,0x20
c000c117:	ba d5 03 00 00       	mov    edx,0x3d5
c000c11c:	ee                   	out    dx,al
c000c11d:	5b                   	pop    ebx
c000c11e:	5e                   	pop    esi
c000c11f:	c3                   	ret    

c000c120 <hwTextMode_update(VgaText*)>:
c000c120:	c3                   	ret    

c000c121 <hwTextMode_updateCursor(VgaText*)>:
c000c121:	56                   	push   esi
c000c122:	b9 19 00 00 00       	mov    ecx,0x19
c000c127:	53                   	push   ebx
c000c128:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c12c:	8b 90 ac 0f 00 00    	mov    edx,DWORD PTR [eax+0xfac]
c000c132:	8b 98 b4 0f 00 00    	mov    ebx,DWORD PTR [eax+0xfb4]
c000c138:	29 d1                	sub    ecx,edx
c000c13a:	8b b0 b0 0f 00 00    	mov    esi,DWORD PTR [eax+0xfb0]
c000c140:	01 d9                	add    ecx,ebx
c000c142:	b0 0f                	mov    al,0xf
c000c144:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000c147:	c1 e1 04             	shl    ecx,0x4
c000c14a:	01 f1                	add    ecx,esi
c000c14c:	be d4 03 00 00       	mov    esi,0x3d4
c000c151:	89 f2                	mov    edx,esi
c000c153:	ee                   	out    dx,al
c000c154:	bb d5 03 00 00       	mov    ebx,0x3d5
c000c159:	88 c8                	mov    al,cl
c000c15b:	89 da                	mov    edx,ebx
c000c15d:	ee                   	out    dx,al
c000c15e:	b0 0e                	mov    al,0xe
c000c160:	89 f2                	mov    edx,esi
c000c162:	ee                   	out    dx,al
c000c163:	89 c8                	mov    eax,ecx
c000c165:	89 da                	mov    edx,ebx
c000c167:	66 c1 e8 08          	shr    ax,0x8
c000c16b:	ee                   	out    dx,al
c000c16c:	5b                   	pop    ebx
c000c16d:	5e                   	pop    esi
c000c16e:	c3                   	ret    

c000c16f <hwTextMode_disableBlink(VgaText*, bool)>:
c000c16f:	ba da 03 00 00       	mov    edx,0x3da
c000c174:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000c179:	75 18                	jne    c000c193 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000c17b:	ec                   	in     al,dx
c000c17c:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c181:	b0 30                	mov    al,0x30
c000c183:	89 ca                	mov    edx,ecx
c000c185:	ee                   	out    dx,al
c000c186:	ba c1 03 00 00       	mov    edx,0x3c1
c000c18b:	ec                   	in     al,dx
c000c18c:	83 c8 08             	or     eax,0x8
c000c18f:	89 ca                	mov    edx,ecx
c000c191:	ee                   	out    dx,al
c000c192:	c3                   	ret    
c000c193:	ec                   	in     al,dx
c000c194:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c199:	b0 30                	mov    al,0x30
c000c19b:	89 ca                	mov    edx,ecx
c000c19d:	ee                   	out    dx,al
c000c19e:	ba c1 03 00 00       	mov    edx,0x3c1
c000c1a3:	ec                   	in     al,dx
c000c1a4:	83 e0 f7             	and    eax,0xfffffff7
c000c1a7:	89 ca                	mov    edx,ecx
c000c1a9:	ee                   	out    dx,al
c000c1aa:	c3                   	ret    

c000c1ab <hwTextMode_scrollScreen(VgaText*)>:
c000c1ab:	55                   	push   ebp
c000c1ac:	bd 02 00 00 00       	mov    ebp,0x2
c000c1b1:	57                   	push   edi
c000c1b2:	56                   	push   esi
c000c1b3:	53                   	push   ebx
c000c1b4:	83 ec 1c             	sub    esp,0x1c
c000c1b7:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000c1bf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c1c3:	31 c0                	xor    eax,eax
c000c1c5:	eb 0b                	jmp    c000c1d2 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000c1c7:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c1cd:	74 58                	je     c000c227 <hwTextMode_scrollScreen(VgaText*)+0x7c>
c000c1cf:	43                   	inc    ebx
c000c1d0:	89 f0                	mov    eax,esi
c000c1d2:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000c1d8:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000c1de:	88 13                	mov    BYTE PTR [ebx],dl
c000c1e0:	8d 70 01             	lea    esi,[eax+0x1]
c000c1e3:	83 fd 18             	cmp    ebp,0x18
c000c1e6:	75 df                	jne    c000c1c7 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000c1e8:	a8 01                	test   al,0x1
c000c1ea:	75 13                	jne    c000c1ff <hwTextMode_scrollScreen(VgaText*)+0x54>
c000c1ec:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000c1ef:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c1f5:	75 d8                	jne    c000c1cf <hwTextMode_scrollScreen(VgaText*)+0x24>
c000c1f7:	83 c4 1c             	add    esp,0x1c
c000c1fa:	5b                   	pop    ebx
c000c1fb:	5e                   	pop    esi
c000c1fc:	5f                   	pop    edi
c000c1fd:	5d                   	pop    ebp
c000c1fe:	c3                   	ret    
c000c1ff:	52                   	push   edx
c000c200:	31 c0                	xor    eax,eax
c000c202:	52                   	push   edx
c000c203:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c207:	8a 81 cc 0f 00 00    	mov    al,BYTE PTR [ecx+0xfcc]
c000c20d:	50                   	push   eax
c000c20e:	31 c0                	xor    eax,eax
c000c210:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000c214:	8a 81 d0 0f 00 00    	mov    al,BYTE PTR [ecx+0xfd0]
c000c21a:	50                   	push   eax
c000c21b:	e8 84 0b 00 00       	call   c000cda4 <VgaText::combineColours(unsigned char, unsigned char)>
c000c220:	83 c4 10             	add    esp,0x10
c000c223:	88 07                	mov    BYTE PTR [edi],al
c000c225:	eb c8                	jmp    c000c1ef <hwTextMode_scrollScreen(VgaText*)+0x44>
c000c227:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c22b:	45                   	inc    ebp
c000c22c:	05 a0 00 00 00       	add    eax,0xa0
c000c231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c235:	eb 88                	jmp    c000c1bf <hwTextMode_scrollScreen(VgaText*)+0x14>

c000c237 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000c237:	56                   	push   esi
c000c238:	31 c0                	xor    eax,eax
c000c23a:	53                   	push   ebx
c000c23b:	83 ec 0c             	sub    esp,0xc
c000c23e:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c242:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c246:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000c24a:	50                   	push   eax
c000c24b:	31 c0                	xor    eax,eax
c000c24d:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c251:	50                   	push   eax
c000c252:	e8 4d 0b 00 00       	call   c000cda4 <VgaText::combineColours(unsigned char, unsigned char)>
c000c257:	5a                   	pop    edx
c000c258:	25 ff 00 00 00       	and    eax,0xff
c000c25d:	59                   	pop    ecx
c000c25e:	50                   	push   eax
c000c25f:	89 f0                	mov    eax,esi
c000c261:	0f be f0             	movsx  esi,al
c000c264:	56                   	push   esi
c000c265:	e8 e0 0b 00 00       	call   c000ce4a <VgaText::combineCharAndColour(char, unsigned char)>
c000c26a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c26e:	ba 19 00 00 00       	mov    edx,0x19
c000c273:	8b b1 ac 0f 00 00    	mov    esi,DWORD PTR [ecx+0xfac]
c000c279:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c27c:	29 f2                	sub    edx,esi
c000c27e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c282:	c1 e1 04             	shl    ecx,0x4
c000c285:	8d 14 92             	lea    edx,[edx+edx*4]
c000c288:	01 d9                	add    ecx,ebx
c000c28a:	c1 e2 04             	shl    edx,0x4
c000c28d:	01 ca                	add    edx,ecx
c000c28f:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000c297:	83 c4 14             	add    esp,0x14
c000c29a:	5b                   	pop    ebx
c000c29b:	5e                   	pop    esi
c000c29c:	c3                   	ret    

c000c29d <setupTextMode()>:
c000c29d:	c7 05 58 48 02 c0 6f c1 00 c0 	mov    DWORD PTR ds:0xc0024858,0xc000c16f
c000c2a7:	c7 05 44 48 02 c0 3d c0 00 c0 	mov    DWORD PTR ds:0xc0024844,0xc000c03d
c000c2b1:	c7 05 40 48 02 c0 82 c0 00 c0 	mov    DWORD PTR ds:0xc0024840,0xc000c082
c000c2bb:	c7 05 4c 48 02 c0 ab c1 00 c0 	mov    DWORD PTR ds:0xc002484c,0xc000c1ab
c000c2c5:	c7 05 54 48 02 c0 cc c0 00 c0 	mov    DWORD PTR ds:0xc0024854,0xc000c0cc
c000c2cf:	c7 05 48 48 02 c0 20 c1 00 c0 	mov    DWORD PTR ds:0xc0024848,0xc000c120
c000c2d9:	c7 05 50 48 02 c0 21 c1 00 c0 	mov    DWORD PTR ds:0xc0024850,0xc000c121
c000c2e3:	c7 05 5c 48 02 c0 37 c2 00 c0 	mov    DWORD PTR ds:0xc002485c,0xc000c237
c000c2ed:	c3                   	ret    

c000c2ee <kernel_main>:
c000c2ee:	57                   	push   edi
c000c2ef:	bf f9 03 00 00       	mov    edi,0x3f9
c000c2f4:	56                   	push   esi
c000c2f5:	31 f6                	xor    esi,esi
c000c2f7:	53                   	push   ebx
c000c2f8:	83 ec 10             	sub    esp,0x10
c000c2fb:	e8 fe 08 00 00       	call   c000cbfe <installVgaTextImplementation()>
c000c300:	e8 98 ff ff ff       	call   c000c29d <setupTextMode()>
c000c305:	89 f0                	mov    eax,esi
c000c307:	89 fa                	mov    edx,edi
c000c309:	ee                   	out    dx,al
c000c30a:	bb fb 03 00 00       	mov    ebx,0x3fb
c000c30f:	b0 80                	mov    al,0x80
c000c311:	89 da                	mov    edx,ebx
c000c313:	ee                   	out    dx,al
c000c314:	b1 03                	mov    cl,0x3
c000c316:	ba f8 03 00 00       	mov    edx,0x3f8
c000c31b:	88 c8                	mov    al,cl
c000c31d:	ee                   	out    dx,al
c000c31e:	89 f0                	mov    eax,esi
c000c320:	89 fa                	mov    edx,edi
c000c322:	ee                   	out    dx,al
c000c323:	88 c8                	mov    al,cl
c000c325:	89 da                	mov    edx,ebx
c000c327:	ee                   	out    dx,al
c000c328:	b0 c7                	mov    al,0xc7
c000c32a:	ba fa 03 00 00       	mov    edx,0x3fa
c000c32f:	ee                   	out    dx,al
c000c330:	b0 0b                	mov    al,0xb
c000c332:	ba fc 03 00 00       	mov    edx,0x3fc
c000c337:	ee                   	out    dx,al
c000c338:	a1 24 05 00 00       	mov    eax,ds:0x524
c000c33d:	83 ec 0c             	sub    esp,0xc
c000c340:	05 ff 0f 00 00       	add    eax,0xfff
c000c345:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c34a:	50                   	push   eax
c000c34b:	e8 6d 03 00 00       	call   c000c6bd <Phys::physicalMemorySetup(unsigned int)>
c000c350:	e8 b6 1f 00 00       	call   c000e30b <Virt::virtualMemorySetup()>
c000c355:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000c35b:	83 c4 10             	add    esp,0x10
c000c35e:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000c364:	75 0e                	jne    c000c374 <kernel_main+0x86>
c000c366:	89 d8                	mov    eax,ebx
c000c368:	25 48 03 00 00       	and    eax,0x348
c000c36d:	3d 00 03 00 00       	cmp    eax,0x300
c000c372:	74 10                	je     c000c384 <kernel_main+0x96>
c000c374:	83 ec 0c             	sub    esp,0xc
c000c377:	68 c7 28 02 c0       	push   0xc00228c7
c000c37c:	e8 c3 96 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c000c381:	83 c4 10             	add    esp,0x10
c000c384:	83 ec 0c             	sub    esp,0xc
c000c387:	89 1d c0 47 02 c0    	mov    DWORD PTR ds:0xc00247c0,ebx
c000c38d:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000c391:	53                   	push   ebx
c000c392:	e8 11 21 00 00       	call   c000e4a8 <VAS::VAS()>
c000c397:	89 1d 04 49 02 c0    	mov    DWORD PTR ds:0xc0024904,ebx
c000c39d:	e8 7e 3c ff ff       	call   c0000020 <callGlobalConstructors>
c000c3a2:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000c3a9:	e8 32 2d 00 00       	call   c000f0e0 <operator new(unsigned long)>
c000c3ae:	89 04 24             	mov    DWORD PTR [esp],eax
c000c3b1:	89 c6                	mov    esi,eax
c000c3b3:	e8 78 ea ff ff       	call   c000ae30 <Computer::Computer()>
c000c3b8:	6a 00                	push   0x0
c000c3ba:	6a 00                	push   0x0
c000c3bc:	89 35 a8 47 02 c0    	mov    DWORD PTR ds:0xc00247a8,esi
c000c3c2:	6a 00                	push   0x0
c000c3c4:	56                   	push   esi
c000c3c5:	e8 5a f2 ff ff       	call   c000b624 <Computer::open(int, int, void*)>
c000c3ca:	83 c4 14             	add    esp,0x14
c000c3cd:	53                   	push   ebx
c000c3ce:	e8 87 23 00 00       	call   c000e75a <VAS::~VAS()>
c000c3d3:	c7 04 24 20 13 02 c0 	mov    DWORD PTR [esp],0xc0021320
c000c3da:	e8 65 96 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c000c3df:	83 c4 20             	add    esp,0x20
c000c3e2:	5b                   	pop    ebx
c000c3e3:	5e                   	pop    esi
c000c3e4:	5f                   	pop    edi
c000c3e5:	c3                   	ret    

c000c3e6 <Phys::allocateDMA(unsigned long)>:
c000c3e6:	57                   	push   edi
c000c3e7:	31 d2                	xor    edx,edx
c000c3e9:	56                   	push   esi
c000c3ea:	31 ff                	xor    edi,edi
c000c3ec:	53                   	push   ebx
c000c3ed:	31 c9                	xor    ecx,ecx
c000c3ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3f3:	31 f6                	xor    esi,esi
c000c3f5:	05 ff 0f 00 00       	add    eax,0xfff
c000c3fa:	c1 e8 0c             	shr    eax,0xc
c000c3fd:	eb 17                	jmp    c000c416 <Phys::allocateDMA(unsigned long)+0x30>
c000c3ff:	85 c9                	test   ecx,ecx
c000c401:	75 04                	jne    c000c407 <Phys::allocateDMA(unsigned long)+0x21>
c000c403:	89 d7                	mov    edi,edx
c000c405:	89 d6                	mov    esi,edx
c000c407:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c40a:	39 d8                	cmp    eax,ebx
c000c40c:	74 1f                	je     c000c42d <Phys::allocateDMA(unsigned long)+0x47>
c000c40e:	42                   	inc    edx
c000c40f:	89 d9                	mov    ecx,ebx
c000c411:	83 fa 2f             	cmp    edx,0x2f
c000c414:	7f 11                	jg     c000c427 <Phys::allocateDMA(unsigned long)+0x41>
c000c416:	80 ba 00 48 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdb800],0x0
c000c41d:	74 e0                	je     c000c3ff <Phys::allocateDMA(unsigned long)+0x19>
c000c41f:	31 c9                	xor    ecx,ecx
c000c421:	42                   	inc    edx
c000c422:	83 fa 2f             	cmp    edx,0x2f
c000c425:	7e ef                	jle    c000c416 <Phys::allocateDMA(unsigned long)+0x30>
c000c427:	5b                   	pop    ebx
c000c428:	31 c0                	xor    eax,eax
c000c42a:	5e                   	pop    esi
c000c42b:	5f                   	pop    edi
c000c42c:	c3                   	ret    
c000c42d:	8d 54 06 ff          	lea    edx,[esi+eax*1-0x1]
c000c431:	89 d3                	mov    ebx,edx
c000c433:	c1 fb 1f             	sar    ebx,0x1f
c000c436:	83 e3 0f             	and    ebx,0xf
c000c439:	01 d3                	add    ebx,edx
c000c43b:	89 f2                	mov    edx,esi
c000c43d:	c1 fb 04             	sar    ebx,0x4
c000c440:	c1 fa 04             	sar    edx,0x4
c000c443:	39 da                	cmp    edx,ebx
c000c445:	75 30                	jne    c000c477 <Phys::allocateDMA(unsigned long)+0x91>
c000c447:	85 c0                	test   eax,eax
c000c449:	74 1b                	je     c000c466 <Phys::allocateDMA(unsigned long)+0x80>
c000c44b:	bf 00 48 02 c0       	mov    edi,0xc0024800
c000c450:	8d 96 00 48 02 c0    	lea    edx,[esi-0x3ffdb800]
c000c456:	83 f7 ff             	xor    edi,0xffffffff
c000c459:	29 f7                	sub    edi,esi
c000c45b:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c45e:	42                   	inc    edx
c000c45f:	8d 04 17             	lea    eax,[edi+edx*1]
c000c462:	39 c1                	cmp    ecx,eax
c000c464:	7f f5                	jg     c000c45b <Phys::allocateDMA(unsigned long)+0x75>
c000c466:	85 db                	test   ebx,ebx
c000c468:	74 13                	je     c000c47d <Phys::allocateDMA(unsigned long)+0x97>
c000c46a:	5b                   	pop    ebx
c000c46b:	8d 86 50 20 0c 00    	lea    eax,[esi+0xc2050]
c000c471:	c1 e0 0c             	shl    eax,0xc
c000c474:	5e                   	pop    esi
c000c475:	5f                   	pop    edi
c000c476:	c3                   	ret    
c000c477:	89 fa                	mov    edx,edi
c000c479:	31 c9                	xor    ecx,ecx
c000c47b:	eb a4                	jmp    c000c421 <Phys::allocateDMA(unsigned long)+0x3b>
c000c47d:	c1 e6 0c             	shl    esi,0xc
c000c480:	5b                   	pop    ebx
c000c481:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000c487:	5e                   	pop    esi
c000c488:	5f                   	pop    edi
c000c489:	c3                   	ret    

c000c48a <Phys::freeDMA(unsigned long, unsigned long)>:
c000c48a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c48e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c492:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c498:	c1 e9 0c             	shr    ecx,0xc
c000c49b:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c4a0:	76 25                	jbe    c000c4c7 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c4a2:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c4a7:	c1 e8 0c             	shr    eax,0xc
c000c4aa:	8d 50 10             	lea    edx,[eax+0x10]
c000c4ad:	85 c9                	test   ecx,ecx
c000c4af:	74 15                	je     c000c4c6 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c4b1:	8d 82 00 48 02 c0    	lea    eax,[edx-0x3ffdb800]
c000c4b7:	8d 94 11 00 48 02 c0 	lea    edx,[ecx+edx*1-0x3ffdb800]
c000c4be:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c4c1:	40                   	inc    eax
c000c4c2:	39 d0                	cmp    eax,edx
c000c4c4:	75 f8                	jne    c000c4be <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c4c6:	c3                   	ret    
c000c4c7:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c4cd:	c1 ea 0c             	shr    edx,0xc
c000c4d0:	eb db                	jmp    c000c4ad <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c4d2 <Phys::setPageState(unsigned long, bool)>:
c000c4d2:	56                   	push   esi
c000c4d3:	ba 01 00 00 00       	mov    edx,0x1
c000c4d8:	53                   	push   ebx
c000c4d9:	8b 35 c4 3b 02 c0    	mov    esi,DWORD PTR ds:0xc0023bc4
c000c4df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c4e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c4e7:	89 c8                	mov    eax,ecx
c000c4e9:	83 e1 07             	and    ecx,0x7
c000c4ec:	c1 e8 03             	shr    eax,0x3
c000c4ef:	01 c6                	add    esi,eax
c000c4f1:	d3 e2                	shl    edx,cl
c000c4f3:	83 f2 ff             	xor    edx,0xffffffff
c000c4f6:	20 16                	and    BYTE PTR [esi],dl
c000c4f8:	8b 15 c4 3b 02 c0    	mov    edx,DWORD PTR ds:0xc0023bc4
c000c4fe:	01 d0                	add    eax,edx
c000c500:	d3 e3                	shl    ebx,cl
c000c502:	8a 08                	mov    cl,BYTE PTR [eax]
c000c504:	09 d9                	or     ecx,ebx
c000c506:	88 08                	mov    BYTE PTR [eax],cl
c000c508:	5b                   	pop    ebx
c000c509:	5e                   	pop    esi
c000c50a:	c3                   	ret    

c000c50b <Phys::getPageState(unsigned long)>:
c000c50b:	53                   	push   ebx
c000c50c:	8b 15 c4 3b 02 c0    	mov    edx,DWORD PTR ds:0xc0023bc4
c000c512:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c516:	31 db                	xor    ebx,ebx
c000c518:	89 c8                	mov    eax,ecx
c000c51a:	83 e1 07             	and    ecx,0x7
c000c51d:	c1 e8 03             	shr    eax,0x3
c000c520:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c000c523:	89 d8                	mov    eax,ebx
c000c525:	5b                   	pop    ebx
c000c526:	d3 f8                	sar    eax,cl
c000c528:	83 e0 01             	and    eax,0x1
c000c52b:	c3                   	ret    

c000c52c <Phys::freePage(unsigned long)>:
c000c52c:	53                   	push   ebx
c000c52d:	83 ec 08             	sub    esp,0x8
c000c530:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c534:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c53a:	76 5a                	jbe    c000c596 <Phys::freePage(unsigned long)+0x6a>
c000c53c:	c1 eb 0c             	shr    ebx,0xc
c000c53f:	53                   	push   ebx
c000c540:	e8 c6 ff ff ff       	call   c000c50b <Phys::getPageState(unsigned long)>
c000c545:	5a                   	pop    edx
c000c546:	84 c0                	test   al,al
c000c548:	74 5e                	je     c000c5a8 <Phys::freePage(unsigned long)+0x7c>
c000c54a:	a1 ec 47 02 c0       	mov    eax,ds:0xc00247ec
c000c54f:	48                   	dec    eax
c000c550:	a3 ec 47 02 c0       	mov    ds:0xc00247ec,eax
c000c555:	8d 04 80             	lea    eax,[eax+eax*4]
c000c558:	8d 04 80             	lea    eax,[eax+eax*4]
c000c55b:	c1 e0 02             	shl    eax,0x2
c000c55e:	89 c2                	mov    edx,eax
c000c560:	c1 fa 1f             	sar    edx,0x1f
c000c563:	f7 3d f0 47 02 c0    	idiv   DWORD PTR ds:0xc00247f0
c000c569:	39 05 e8 47 02 c0    	cmp    DWORD PTR ds:0xc00247e8,eax
c000c56f:	75 12                	jne    c000c583 <Phys::freePage(unsigned long)+0x57>
c000c571:	51                   	push   ecx
c000c572:	51                   	push   ecx
c000c573:	6a 00                	push   0x0
c000c575:	53                   	push   ebx
c000c576:	e8 57 ff ff ff       	call   c000c4d2 <Phys::setPageState(unsigned long, bool)>
c000c57b:	83 c4 10             	add    esp,0x10
c000c57e:	83 c4 08             	add    esp,0x8
c000c581:	5b                   	pop    ebx
c000c582:	c3                   	ret    
c000c583:	83 ec 0c             	sub    esp,0xc
c000c586:	a3 e8 47 02 c0       	mov    ds:0xc00247e8,eax
c000c58b:	50                   	push   eax
c000c58c:	e8 01 0a 00 00       	call   c000cf92 <VgaText::updateRAMUsageDisplay(int)>
c000c591:	83 c4 10             	add    esp,0x10
c000c594:	eb db                	jmp    c000c571 <Phys::freePage(unsigned long)+0x45>
c000c596:	68 00 10 00 00       	push   0x1000
c000c59b:	53                   	push   ebx
c000c59c:	e8 e9 fe ff ff       	call   c000c48a <Phys::freeDMA(unsigned long, unsigned long)>
c000c5a1:	59                   	pop    ecx
c000c5a2:	5b                   	pop    ebx
c000c5a3:	83 c4 08             	add    esp,0x8
c000c5a6:	5b                   	pop    ebx
c000c5a7:	c3                   	ret    
c000c5a8:	c7 44 24 10 3b 13 02 c0 	mov    DWORD PTR [esp+0x10],0xc002133b
c000c5b0:	83 c4 08             	add    esp,0x8
c000c5b3:	5b                   	pop    ebx
c000c5b4:	e9 8b 94 00 00       	jmp    c0015a44 <Krnl::panic(char const*)>

c000c5b9 <Phys::allocatePage()>:
c000c5b9:	56                   	push   esi
c000c5ba:	53                   	push   ebx
c000c5bb:	51                   	push   ecx
c000c5bc:	8b 35 e0 47 02 c0    	mov    esi,DWORD PTR ds:0xc00247e0
c000c5c2:	89 f3                	mov    ebx,esi
c000c5c4:	eb 0a                	jmp    c000c5d0 <Phys::allocatePage()+0x17>
c000c5c6:	89 1d e0 47 02 c0    	mov    DWORD PTR ds:0xc00247e0,ebx
c000c5cc:	39 de                	cmp    esi,ebx
c000c5ce:	74 24                	je     c000c5f4 <Phys::allocatePage()+0x3b>
c000c5d0:	53                   	push   ebx
c000c5d1:	e8 35 ff ff ff       	call   c000c50b <Phys::getPageState(unsigned long)>
c000c5d6:	5a                   	pop    edx
c000c5d7:	84 c0                	test   al,al
c000c5d9:	74 5a                	je     c000c635 <Phys::allocatePage()+0x7c>
c000c5db:	43                   	inc    ebx
c000c5dc:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c5e2:	75 e2                	jne    c000c5c6 <Phys::allocatePage()+0xd>
c000c5e4:	31 db                	xor    ebx,ebx
c000c5e6:	c7 05 e0 47 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00247e0,0x0
c000c5f0:	39 de                	cmp    esi,ebx
c000c5f2:	75 dc                	jne    c000c5d0 <Phys::allocatePage()+0x17>
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	68 51 13 02 c0       	push   0xc0021351
c000c5fc:	e8 14 2c 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000c601:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000c608:	e8 d9 fd ff ff       	call   c000c3e6 <Phys::allocateDMA(unsigned long)>
c000c60d:	83 c4 10             	add    esp,0x10
c000c610:	85 c0                	test   eax,eax
c000c612:	75 5a                	jne    c000c66e <Phys::allocatePage()+0xb5>
c000c614:	83 ec 0c             	sub    esp,0xc
c000c617:	68 62 13 02 c0       	push   0xc0021362
c000c61c:	e8 23 94 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c000c621:	83 c4 10             	add    esp,0x10
c000c624:	8b 1d e0 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247e0
c000c62a:	53                   	push   ebx
c000c62b:	e8 db fe ff ff       	call   c000c50b <Phys::getPageState(unsigned long)>
c000c630:	5a                   	pop    edx
c000c631:	84 c0                	test   al,al
c000c633:	75 a6                	jne    c000c5db <Phys::allocatePage()+0x22>
c000c635:	6a 01                	push   0x1
c000c637:	53                   	push   ebx
c000c638:	e8 95 fe ff ff       	call   c000c4d2 <Phys::setPageState(unsigned long, bool)>
c000c63d:	a1 ec 47 02 c0       	mov    eax,ds:0xc00247ec
c000c642:	59                   	pop    ecx
c000c643:	40                   	inc    eax
c000c644:	5b                   	pop    ebx
c000c645:	a3 ec 47 02 c0       	mov    ds:0xc00247ec,eax
c000c64a:	8d 04 80             	lea    eax,[eax+eax*4]
c000c64d:	8d 04 80             	lea    eax,[eax+eax*4]
c000c650:	c1 e0 02             	shl    eax,0x2
c000c653:	89 c2                	mov    edx,eax
c000c655:	c1 fa 1f             	sar    edx,0x1f
c000c658:	f7 3d f0 47 02 c0    	idiv   DWORD PTR ds:0xc00247f0
c000c65e:	39 05 e8 47 02 c0    	cmp    DWORD PTR ds:0xc00247e8,eax
c000c664:	75 0c                	jne    c000c672 <Phys::allocatePage()+0xb9>
c000c666:	a1 e0 47 02 c0       	mov    eax,ds:0xc00247e0
c000c66b:	c1 e0 0c             	shl    eax,0xc
c000c66e:	5a                   	pop    edx
c000c66f:	5b                   	pop    ebx
c000c670:	5e                   	pop    esi
c000c671:	c3                   	ret    
c000c672:	83 ec 0c             	sub    esp,0xc
c000c675:	a3 e8 47 02 c0       	mov    ds:0xc00247e8,eax
c000c67a:	50                   	push   eax
c000c67b:	e8 12 09 00 00       	call   c000cf92 <VgaText::updateRAMUsageDisplay(int)>
c000c680:	83 c4 10             	add    esp,0x10
c000c683:	eb e1                	jmp    c000c666 <Phys::allocatePage()+0xad>

c000c685 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c685:	56                   	push   esi
c000c686:	53                   	push   ebx
c000c687:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c68b:	39 1d e4 47 02 c0    	cmp    DWORD PTR ds:0xc00247e4,ebx
c000c691:	73 06                	jae    c000c699 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c693:	89 1d e4 47 02 c0    	mov    DWORD PTR ds:0xc00247e4,ebx
c000c699:	c1 eb 0c             	shr    ebx,0xc
c000c69c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c6a0:	c1 e8 0c             	shr    eax,0xc
c000c6a3:	39 d8                	cmp    eax,ebx
c000c6a5:	73 13                	jae    c000c6ba <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c6a7:	6a 00                	push   0x0
c000c6a9:	8d 70 01             	lea    esi,[eax+0x1]
c000c6ac:	50                   	push   eax
c000c6ad:	e8 20 fe ff ff       	call   c000c4d2 <Phys::setPageState(unsigned long, bool)>
c000c6b2:	5a                   	pop    edx
c000c6b3:	89 f0                	mov    eax,esi
c000c6b5:	59                   	pop    ecx
c000c6b6:	39 f3                	cmp    ebx,esi
c000c6b8:	75 ed                	jne    c000c6a7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c6ba:	5b                   	pop    ebx
c000c6bb:	5e                   	pop    esi
c000c6bc:	c3                   	ret    

c000c6bd <Phys::physicalMemorySetup(unsigned int)>:
c000c6bd:	55                   	push   ebp
c000c6be:	57                   	push   edi
c000c6bf:	56                   	push   esi
c000c6c0:	53                   	push   ebx
c000c6c1:	31 db                	xor    ebx,ebx
c000c6c3:	83 ec 40             	sub    esp,0x40
c000c6c6:	6a 30                	push   0x30
c000c6c8:	6a 00                	push   0x0
c000c6ca:	68 00 48 02 c0       	push   0xc0024800
c000c6cf:	e8 f0 3f ff ff       	call   c00006c4 <memset>
c000c6d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c6d8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c6dd:	05 00 10 00 00       	add    eax,0x1000
c000c6e2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c6e6:	83 c4 10             	add    esp,0x10
c000c6e9:	56                   	push   esi
c000c6ea:	56                   	push   esi
c000c6eb:	6a 01                	push   0x1
c000c6ed:	53                   	push   ebx
c000c6ee:	43                   	inc    ebx
c000c6ef:	e8 de fd ff ff       	call   c000c4d2 <Phys::setPageState(unsigned long, bool)>
c000c6f4:	83 c4 10             	add    esp,0x10
c000c6f7:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c6fd:	75 ea                	jne    c000c6e9 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c6ff:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c000c705:	66 85 c0             	test   ax,ax
c000c708:	0f 84 3b 01 00 00    	je     c000c849 <Phys::physicalMemorySetup(unsigned int)+0x18c>
c000c70e:	89 c7                	mov    edi,eax
c000c710:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c718:	81 e7 ff ff 00 00    	and    edi,0xffff
c000c71e:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000c723:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000c727:	eb 6d                	jmp    c000c796 <Phys::physicalMemorySetup(unsigned int)+0xd9>
c000c729:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000c72d:	89 c1                	mov    ecx,eax
c000c72f:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000c733:	0f 83 bc 00 00 00    	jae    c000c7f5 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000c739:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c73d:	ba 00 00 0a 00       	mov    edx,0xa0000
c000c742:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c746:	39 f2                	cmp    edx,esi
c000c748:	19 f8                	sbb    eax,edi
c000c74a:	73 07                	jae    c000c753 <Phys::physicalMemorySetup(unsigned int)+0x96>
c000c74c:	be 00 00 0a 00       	mov    esi,0xa0000
c000c751:	31 ff                	xor    edi,edi
c000c753:	89 f2                	mov    edx,esi
c000c755:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000c75a:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000c760:	89 f9                	mov    ecx,edi
c000c762:	83 d1 ff             	adc    ecx,0xffffffff
c000c765:	39 d0                	cmp    eax,edx
c000c767:	b8 00 00 00 00       	mov    eax,0x0
c000c76c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c770:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c774:	19 c8                	sbb    eax,ecx
c000c776:	0f 82 0d 01 00 00    	jb     c000c889 <Phys::physicalMemorySetup(unsigned int)+0x1cc>
c000c77c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c780:	83 c3 18             	add    ebx,0x18
c000c783:	41                   	inc    ecx
c000c784:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c788:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c78c:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000c790:	0f 84 c3 00 00 00    	je     c000c859 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c796:	8b 33                	mov    esi,DWORD PTR [ebx]
c000c798:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c79b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000c79e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7a2:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000c7a5:	01 f0                	add    eax,esi
c000c7a7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7aa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7ae:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c7b2:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000c7b6:	11 fa                	adc    edx,edi
c000c7b8:	55                   	push   ebp
c000c7b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7bd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c7c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c7c5:	51                   	push   ecx
c000c7c6:	56                   	push   esi
c000c7c7:	68 9c 13 02 c0       	push   0xc002139c
c000c7cc:	e8 44 2a 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000c7d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c7d5:	83 c4 10             	add    esp,0x10
c000c7d8:	09 f8                	or     eax,edi
c000c7da:	75 7d                	jne    c000c859 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c7dc:	83 fd 01             	cmp    ebp,0x1
c000c7df:	75 11                	jne    c000c7f2 <Phys::physicalMemorySetup(unsigned int)+0x135>
c000c7e1:	ba 00 00 08 00       	mov    edx,0x80000
c000c7e6:	89 c1                	mov    ecx,eax
c000c7e8:	39 f2                	cmp    edx,esi
c000c7ea:	19 f9                	sbb    ecx,edi
c000c7ec:	0f 83 37 ff ff ff    	jae    c000c729 <Phys::physicalMemorySetup(unsigned int)+0x6c>
c000c7f2:	4d                   	dec    ebp
c000c7f3:	75 87                	jne    c000c77c <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c7f5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c7f9:	31 d2                	xor    edx,edx
c000c7fb:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000c7ff:	89 c8                	mov    eax,ecx
c000c801:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c805:	19 d1                	sbb    ecx,edx
c000c807:	0f 82 6f ff ff ff    	jb     c000c77c <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c80d:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000c812:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c000c816:	b9 00 00 00 00       	mov    ecx,0x0
c000c81b:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c81f:	0f 83 57 ff ff ff    	jae    c000c77c <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c825:	39 c6                	cmp    esi,eax
c000c827:	19 d7                	sbb    edi,edx
c000c829:	73 6a                	jae    c000c895 <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c82b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c82f:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c833:	29 c7                	sub    edi,eax
c000c835:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c839:	19 d5                	sbb    ebp,edx
c000c83b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000c83f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000c843:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c847:	eb 4c                	jmp    c000c895 <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c849:	83 ec 0c             	sub    esp,0xc
c000c84c:	68 70 13 02 c0       	push   0xc0021370
c000c851:	e8 ee 91 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c000c856:	83 c4 10             	add    esp,0x10
c000c859:	bb 40 01 00 00       	mov    ebx,0x140
c000c85e:	50                   	push   eax
c000c85f:	50                   	push   eax
c000c860:	6a 00                	push   0x0
c000c862:	53                   	push   ebx
c000c863:	e8 6a fc ff ff       	call   c000c4d2 <Phys::setPageState(unsigned long, bool)>
c000c868:	8b 15 f0 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247f0
c000c86e:	43                   	inc    ebx
c000c86f:	42                   	inc    edx
c000c870:	83 c4 10             	add    esp,0x10
c000c873:	89 15 f0 47 02 c0    	mov    DWORD PTR ds:0xc00247f0,edx
c000c879:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c87f:	75 dd                	jne    c000c85e <Phys::physicalMemorySetup(unsigned int)+0x1a1>
c000c881:	83 c4 3c             	add    esp,0x3c
c000c884:	5b                   	pop    ebx
c000c885:	5e                   	pop    esi
c000c886:	5f                   	pop    edi
c000c887:	5d                   	pop    ebp
c000c888:	c3                   	ret    
c000c889:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c000c88d:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c000c895:	56                   	push   esi
c000c896:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000c89a:	56                   	push   esi
c000c89b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000c89f:	57                   	push   edi
c000c8a0:	68 c0 13 02 c0       	push   0xc00213c0
c000c8a5:	e8 6b 29 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000c8aa:	5d                   	pop    ebp
c000c8ab:	58                   	pop    eax
c000c8ac:	56                   	push   esi
c000c8ad:	57                   	push   edi
c000c8ae:	e8 d2 fd ff ff       	call   c000c685 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c8b3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c8b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c8bb:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c8bf:	8b 15 f0 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247f0
c000c8c5:	83 c4 0c             	add    esp,0xc
c000c8c8:	01 d0                	add    eax,edx
c000c8ca:	a3 f0 47 02 c0       	mov    ds:0xc00247f0,eax
c000c8cf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c8d6:	52                   	push   edx
c000c8d7:	50                   	push   eax
c000c8d8:	68 7e 13 02 c0       	push   0xc002137e
c000c8dd:	e8 33 29 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000c8e2:	83 c4 10             	add    esp,0x10
c000c8e5:	e9 92 fe ff ff       	jmp    c000c77c <Phys::physicalMemorySetup(unsigned int)+0xbf>

c000c8ea <Pipe::isAtty()>:
c000c8ea:	31 c0                	xor    eax,eax
c000c8ec:	c3                   	ret    
c000c8ed:	90                   	nop

c000c8ee <Pipe::~Pipe()>:
c000c8ee:	83 ec 0c             	sub    esp,0xc
c000c8f1:	ba 2c 14 02 c0       	mov    edx,0xc002142c
c000c8f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8fa:	89 10                	mov    DWORD PTR [eax],edx
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	83 ec 0c             	sub    esp,0xc
c000c903:	50                   	push   eax
c000c904:	e8 5d 16 00 00       	call   c000df66 <UnixFile::~UnixFile()>
c000c909:	83 c4 10             	add    esp,0x10
c000c90c:	90                   	nop
c000c90d:	83 c4 0c             	add    esp,0xc
c000c910:	c3                   	ret    
c000c911:	90                   	nop

c000c912 <Pipe::~Pipe()>:
c000c912:	83 ec 0c             	sub    esp,0xc
c000c915:	83 ec 0c             	sub    esp,0xc
c000c918:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c91c:	e8 cd ff ff ff       	call   c000c8ee <Pipe::~Pipe()>
c000c921:	83 c4 10             	add    esp,0x10
c000c924:	83 ec 08             	sub    esp,0x8
c000c927:	6a 20                	push   0x20
c000c929:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92d:	e8 bd 27 00 00       	call   c000f0ef <operator delete(void*, unsigned long)>
c000c932:	83 c4 10             	add    esp,0x10
c000c935:	83 c4 0c             	add    esp,0xc
c000c938:	c3                   	ret    
c000c939:	90                   	nop

c000c93a <Pipe::read(unsigned long long, void*, int*)>:
c000c93a:	55                   	push   ebp
c000c93b:	57                   	push   edi
c000c93c:	56                   	push   esi
c000c93d:	53                   	push   ebx
c000c93e:	83 ec 1c             	sub    esp,0x1c
c000c941:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c945:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c949:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c94d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c950:	89 c8                	mov    eax,ecx
c000c952:	99                   	cdq    
c000c953:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c957:	74 19                	je     c000c972 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c959:	39 f9                	cmp    ecx,edi
c000c95b:	89 d1                	mov    ecx,edx
c000c95d:	19 f1                	sbb    ecx,esi
c000c95f:	73 11                	jae    c000c972 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c961:	e8 e7 c0 00 00       	call   c0018a4d <lockScheduler()>
c000c966:	e8 2b c4 00 00       	call   c0018d96 <schedule()>
c000c96b:	e8 df c0 00 00       	call   c0018a4f <unlockScheduler()>
c000c970:	eb db                	jmp    c000c94d <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c972:	39 f8                	cmp    eax,edi
c000c974:	89 d1                	mov    ecx,edx
c000c976:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c97a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c97e:	19 f1                	sbb    ecx,esi
c000c980:	73 08                	jae    c000c98a <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c982:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c986:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c98a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c98d:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c990:	29 c6                	sub    esi,eax
c000c992:	89 f1                	mov    ecx,esi
c000c994:	c1 f9 1f             	sar    ecx,0x1f
c000c997:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c99b:	89 ca                	mov    edx,ecx
c000c99d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c9a1:	19 d1                	sbb    ecx,edx
c000c9a3:	73 04                	jae    c000c9a9 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c9a5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c9a9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c9ad:	89 fd                	mov    ebp,edi
c000c9af:	29 f5                	sub    ebp,esi
c000c9b1:	85 f6                	test   esi,esi
c000c9b3:	74 12                	je     c000c9c7 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c9b5:	52                   	push   edx
c000c9b6:	56                   	push   esi
c000c9b7:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c9ba:	50                   	push   eax
c000c9bb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c9bf:	e8 ca 3c ff ff       	call   c000068e <memcpy>
c000c9c4:	83 c4 10             	add    esp,0x10
c000c9c7:	85 ed                	test   ebp,ebp
c000c9c9:	74 12                	je     c000c9dd <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c9cb:	50                   	push   eax
c000c9cc:	55                   	push   ebp
c000c9cd:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c9d0:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c9d4:	56                   	push   esi
c000c9d5:	e8 b4 3c ff ff       	call   c000068e <memcpy>
c000c9da:	83 c4 10             	add    esp,0x10
c000c9dd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c9e0:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000c9e3:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c9e6:	99                   	cdq    
c000c9e7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c9eb:	89 f7                	mov    edi,esi
c000c9ed:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000c9f1:	c1 ff 1f             	sar    edi,0x1f
c000c9f4:	57                   	push   edi
c000c9f5:	56                   	push   esi
c000c9f6:	52                   	push   edx
c000c9f7:	50                   	push   eax
c000c9f8:	e8 0f 2c 01 00       	call   c001f60c <__umoddi3>
c000c9fd:	83 c4 10             	add    esp,0x10
c000ca00:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ca03:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ca08:	75 10                	jne    c000ca1a <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000ca0a:	83 ec 0c             	sub    esp,0xc
c000ca0d:	68 e9 13 02 c0       	push   0xc00213e9
c000ca12:	e8 2d 90 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c000ca17:	83 c4 10             	add    esp,0x10
c000ca1a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca22:	89 10                	mov    DWORD PTR [eax],edx
c000ca24:	83 c4 1c             	add    esp,0x1c
c000ca27:	31 c0                	xor    eax,eax
c000ca29:	5b                   	pop    ebx
c000ca2a:	5e                   	pop    esi
c000ca2b:	5f                   	pop    edi
c000ca2c:	5d                   	pop    ebp
c000ca2d:	c3                   	ret    

c000ca2e <Pipe::write(unsigned long long, void*, int*)>:
c000ca2e:	55                   	push   ebp
c000ca2f:	57                   	push   edi
c000ca30:	56                   	push   esi
c000ca31:	53                   	push   ebx
c000ca32:	83 ec 1c             	sub    esp,0x1c
c000ca35:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ca39:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ca3d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ca41:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca44:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000ca47:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000ca4a:	89 de                	mov    esi,ebx
c000ca4c:	89 df                	mov    edi,ebx
c000ca4e:	c1 ff 1f             	sar    edi,0x1f
c000ca51:	01 c6                	add    esi,eax
c000ca53:	89 c8                	mov    eax,ecx
c000ca55:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ca59:	11 d7                	adc    edi,edx
c000ca5b:	99                   	cdq    
c000ca5c:	89 d0                	mov    eax,edx
c000ca5e:	39 f1                	cmp    ecx,esi
c000ca60:	19 f8                	sbb    eax,edi
c000ca62:	b8 01 00 00 00       	mov    eax,0x1
c000ca67:	0f 82 80 00 00 00    	jb     c000caed <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ca6d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ca70:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ca73:	01 d8                	add    eax,ebx
c000ca75:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000ca79:	99                   	cdq    
c000ca7a:	f7 f9                	idiv   ecx
c000ca7c:	29 d1                	sub    ecx,edx
c000ca7e:	89 d7                	mov    edi,edx
c000ca80:	89 c8                	mov    eax,ecx
c000ca82:	99                   	cdq    
c000ca83:	39 ce                	cmp    esi,ecx
c000ca85:	19 d3                	sbb    ebx,edx
c000ca87:	bb 00 00 00 00       	mov    ebx,0x0
c000ca8c:	72 04                	jb     c000ca92 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000ca8e:	89 f3                	mov    ebx,esi
c000ca90:	29 cb                	sub    ebx,ecx
c000ca92:	89 f1                	mov    ecx,esi
c000ca94:	29 d9                	sub    ecx,ebx
c000ca96:	74 1a                	je     c000cab2 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000ca98:	52                   	push   edx
c000ca99:	51                   	push   ecx
c000ca9a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ca9e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000caa2:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000caa5:	57                   	push   edi
c000caa6:	e8 e3 3b ff ff       	call   c000068e <memcpy>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cab2:	85 db                	test   ebx,ebx
c000cab4:	74 12                	je     c000cac8 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000cab6:	50                   	push   eax
c000cab7:	53                   	push   ebx
c000cab8:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000cabc:	51                   	push   ecx
c000cabd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000cac0:	e8 c9 3b ff ff       	call   c000068e <memcpy>
c000cac5:	83 c4 10             	add    esp,0x10
c000cac8:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000cacb:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000cad0:	75 10                	jne    c000cae2 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000cad2:	83 ec 0c             	sub    esp,0xc
c000cad5:	68 05 14 02 c0       	push   0xc0021405
c000cada:	e8 65 8f 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c000cadf:	83 c4 10             	add    esp,0x10
c000cae2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cae6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000cae9:	89 38                	mov    DWORD PTR [eax],edi
c000caeb:	31 c0                	xor    eax,eax
c000caed:	83 c4 1c             	add    esp,0x1c
c000caf0:	5b                   	pop    ebx
c000caf1:	5e                   	pop    esi
c000caf2:	5f                   	pop    edi
c000caf3:	5d                   	pop    ebp
c000caf4:	c3                   	ret    
c000caf5:	90                   	nop

c000caf6 <Pipe::Pipe(int)>:
c000caf6:	83 ec 0c             	sub    esp,0xc
c000caf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cafd:	83 ec 08             	sub    esp,0x8
c000cb00:	6a 00                	push   0x0
c000cb02:	50                   	push   eax
c000cb03:	e8 bc 12 00 00       	call   c000ddc4 <UnixFile::UnixFile(int)>
c000cb08:	83 c4 10             	add    esp,0x10
c000cb0b:	ba 2c 14 02 c0       	mov    edx,0xc002142c
c000cb10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb14:	89 10                	mov    DWORD PTR [eax],edx
c000cb16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000cb21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb25:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000cb2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb30:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000cb37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cb3b:	83 ec 0c             	sub    esp,0xc
c000cb3e:	50                   	push   eax
c000cb3f:	e8 9f f4 ff ff       	call   c000bfe3 <malloc>
c000cb44:	83 c4 10             	add    esp,0x10
c000cb47:	89 c2                	mov    edx,eax
c000cb49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb4d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000cb50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb54:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000cb58:	90                   	nop
c000cb59:	83 c4 0c             	add    esp,0xc
c000cb5c:	c3                   	ret    
c000cb5d:	90                   	nop

c000cb5e <VgaText::isAtty()>:
c000cb5e:	b0 01                	mov    al,0x1
c000cb60:	c3                   	ret    
c000cb61:	90                   	nop

c000cb62 <VgaText::~VgaText()>:
c000cb62:	83 ec 0c             	sub    esp,0xc
c000cb65:	ba e8 14 02 c0       	mov    edx,0xc00214e8
c000cb6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb6e:	89 10                	mov    DWORD PTR [eax],edx
c000cb70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb74:	83 ec 0c             	sub    esp,0xc
c000cb77:	50                   	push   eax
c000cb78:	e8 e9 13 00 00       	call   c000df66 <UnixFile::~UnixFile()>
c000cb7d:	83 c4 10             	add    esp,0x10
c000cb80:	90                   	nop
c000cb81:	83 c4 0c             	add    esp,0xc
c000cb84:	c3                   	ret    
c000cb85:	90                   	nop

c000cb86 <VgaText::~VgaText()>:
c000cb86:	83 ec 0c             	sub    esp,0xc
c000cb89:	83 ec 0c             	sub    esp,0xc
c000cb8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb90:	e8 cd ff ff ff       	call   c000cb62 <VgaText::~VgaText()>
c000cb95:	83 c4 10             	add    esp,0x10
c000cb98:	83 ec 08             	sub    esp,0x8
c000cb9b:	68 60 12 00 00       	push   0x1260
c000cba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cba4:	e8 46 25 00 00       	call   c000f0ef <operator delete(void*, unsigned long)>
c000cba9:	83 c4 10             	add    esp,0x10
c000cbac:	83 c4 0c             	add    esp,0xc
c000cbaf:	c3                   	ret    

c000cbb0 <VgaText::read(unsigned long long, void*, int*)>:
c000cbb0:	83 ec 10             	sub    esp,0x10
c000cbb3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbb7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbbf:	e8 69 58 00 00       	call   c001242d <readKeyboard(VgaText*, char*, unsigned long)>
c000cbc4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000cbc8:	89 02                	mov    DWORD PTR [edx],eax
c000cbca:	31 c0                	xor    eax,eax
c000cbcc:	83 c4 1c             	add    esp,0x1c
c000cbcf:	c3                   	ret    

c000cbd0 <setTerminalScrollLock(bool)>:
c000cbd0:	c3                   	ret    

c000cbd1 <addToTerminalCycle(VgaText*)>:
c000cbd1:	8b 15 60 48 02 c0    	mov    edx,DWORD PTR ds:0xc0024860
c000cbd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbdb:	85 d2                	test   edx,edx
c000cbdd:	75 0c                	jne    c000cbeb <addToTerminalCycle(VgaText*)+0x1a>
c000cbdf:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000cbe5:	a3 60 48 02 c0       	mov    ds:0xc0024860,eax
c000cbea:	c3                   	ret    
c000cbeb:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000cbf1:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000cbf7:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000cbfd:	c3                   	ret    

c000cbfe <installVgaTextImplementation()>:
c000cbfe:	83 ec 10             	sub    esp,0x10
c000cc01:	6a 20                	push   0x20
c000cc03:	6a 00                	push   0x0
c000cc05:	68 40 48 02 c0       	push   0xc0024840
c000cc0a:	e8 b5 3a ff ff       	call   c00006c4 <memset>
c000cc0f:	83 c4 1c             	add    esp,0x1c
c000cc12:	c3                   	ret    

c000cc13 <scrollTerminalScrollLock(int)>:
c000cc13:	c3                   	ret    

c000cc14 <VgaText::load()>:
c000cc14:	53                   	push   ebx
c000cc15:	31 c0                	xor    eax,eax
c000cc17:	83 ec 58             	sub    esp,0x58
c000cc1a:	89 e2                	mov    edx,esp
c000cc1c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000cc20:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000cc24:	40                   	inc    eax
c000cc25:	83 f8 50             	cmp    eax,0x50
c000cc28:	75 f6                	jne    c000cc20 <VgaText::load()+0xc>
c000cc2a:	31 c0                	xor    eax,eax
c000cc2c:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000cc33:	84 c9                	test   cl,cl
c000cc35:	74 06                	je     c000cc3d <VgaText::load()+0x29>
c000cc37:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cc3a:	40                   	inc    eax
c000cc3b:	eb ef                	jmp    c000cc2c <VgaText::load()+0x18>
c000cc3d:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000cc43:	85 c0                	test   eax,eax
c000cc45:	74 09                	je     c000cc50 <VgaText::load()+0x3c>
c000cc47:	51                   	push   ecx
c000cc48:	51                   	push   ecx
c000cc49:	52                   	push   edx
c000cc4a:	53                   	push   ebx
c000cc4b:	ff d0                	call   eax
c000cc4d:	83 c4 10             	add    esp,0x10
c000cc50:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000cc56:	85 c0                	test   eax,eax
c000cc58:	74 09                	je     c000cc63 <VgaText::load()+0x4f>
c000cc5a:	83 ec 0c             	sub    esp,0xc
c000cc5d:	53                   	push   ebx
c000cc5e:	ff d0                	call   eax
c000cc60:	83 c4 10             	add    esp,0x10
c000cc63:	83 c4 58             	add    esp,0x58
c000cc66:	5b                   	pop    ebx
c000cc67:	c3                   	ret    

c000cc68 <VgaText::updateCursor()>:
c000cc68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc6c:	39 05 64 48 02 c0    	cmp    DWORD PTR ds:0xc0024864,eax
c000cc72:	75 0c                	jne    c000cc80 <VgaText::updateCursor()+0x18>
c000cc74:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000cc7a:	85 c0                	test   eax,eax
c000cc7c:	74 02                	je     c000cc80 <VgaText::updateCursor()+0x18>
c000cc7e:	ff e0                	jmp    eax
c000cc80:	c3                   	ret    
c000cc81:	90                   	nop

c000cc82 <VgaText::showCursor(bool)>:
c000cc82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc8a:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000cc90:	c3                   	ret    
c000cc91:	90                   	nop

c000cc92 <VgaText::disableBlink(bool)>:
c000cc92:	56                   	push   esi
c000cc93:	53                   	push   ebx
c000cc94:	51                   	push   ecx
c000cc95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cc9d:	39 1d 64 48 02 c0    	cmp    DWORD PTR ds:0xc0024864,ebx
c000cca3:	75 18                	jne    c000ccbd <VgaText::disableBlink(bool)+0x2b>
c000cca5:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000ccab:	85 c0                	test   eax,eax
c000ccad:	74 0e                	je     c000ccbd <VgaText::disableBlink(bool)+0x2b>
c000ccaf:	89 f1                	mov    ecx,esi
c000ccb1:	52                   	push   edx
c000ccb2:	52                   	push   edx
c000ccb3:	0f b6 d1             	movzx  edx,cl
c000ccb6:	52                   	push   edx
c000ccb7:	53                   	push   ebx
c000ccb8:	ff d0                	call   eax
c000ccba:	83 c4 10             	add    esp,0x10
c000ccbd:	89 f0                	mov    eax,esi
c000ccbf:	83 f0 01             	xor    eax,0x1
c000ccc2:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000ccc8:	58                   	pop    eax
c000ccc9:	5b                   	pop    ebx
c000ccca:	5e                   	pop    esi
c000cccb:	c3                   	ret    

c000cccc <VgaText::doANSI_SGR(int)>:
c000cccc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ccd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccd4:	85 d2                	test   edx,edx
c000ccd6:	75 14                	jne    c000ccec <VgaText::doANSI_SGR(int)+0x20>
c000ccd8:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000ccde:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cce4:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000ccea:	eb 65                	jmp    c000cd51 <VgaText::doANSI_SGR(int)+0x85>
c000ccec:	83 fa 07             	cmp    edx,0x7
c000ccef:	75 14                	jne    c000cd05 <VgaText::doANSI_SGR(int)+0x39>
c000ccf1:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000ccf7:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000ccfd:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000cd03:	eb 4c                	jmp    c000cd51 <VgaText::doANSI_SGR(int)+0x85>
c000cd05:	83 fa 1b             	cmp    edx,0x1b
c000cd08:	74 ce                	je     c000ccd8 <VgaText::doANSI_SGR(int)+0xc>
c000cd0a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000cd0d:	83 f9 07             	cmp    ecx,0x7
c000cd10:	77 09                	ja     c000cd1b <VgaText::doANSI_SGR(int)+0x4f>
c000cd12:	8b 14 8d 00 3c 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc400]
c000cd19:	eb 20                	jmp    c000cd3b <VgaText::doANSI_SGR(int)+0x6f>
c000cd1b:	8d 4a d8             	lea    ecx,[edx-0x28]
c000cd1e:	83 f9 07             	cmp    ecx,0x7
c000cd21:	77 09                	ja     c000cd2c <VgaText::doANSI_SGR(int)+0x60>
c000cd23:	8b 14 8d 00 3c 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc400]
c000cd2a:	eb 25                	jmp    c000cd51 <VgaText::doANSI_SGR(int)+0x85>
c000cd2c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000cd2f:	83 f9 07             	cmp    ecx,0x7
c000cd32:	77 0e                	ja     c000cd42 <VgaText::doANSI_SGR(int)+0x76>
c000cd34:	8b 14 95 b8 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc548]
c000cd3b:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd41:	c3                   	ret    
c000cd42:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000cd45:	83 f9 07             	cmp    ecx,0x7
c000cd48:	77 0d                	ja     c000cd57 <VgaText::doANSI_SGR(int)+0x8b>
c000cd4a:	8b 14 95 90 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc570]
c000cd51:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd57:	c3                   	ret    

c000cd58 <VgaText::setDefaultBgColour(VgaColour)>:
c000cd58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd60:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000cd66:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd6c:	c3                   	ret    
c000cd6d:	90                   	nop

c000cd6e <VgaText::setDefaultFgColour(VgaColour)>:
c000cd6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd76:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000cd7c:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd82:	c3                   	ret    
c000cd83:	90                   	nop

c000cd84 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000cd84:	53                   	push   ebx
c000cd85:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cd89:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cd8d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cd91:	51                   	push   ecx
c000cd92:	e8 c1 ff ff ff       	call   c000cd58 <VgaText::setDefaultBgColour(VgaColour)>
c000cd97:	58                   	pop    eax
c000cd98:	5a                   	pop    edx
c000cd99:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cd9d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000cda1:	5b                   	pop    ebx
c000cda2:	eb ca                	jmp    c000cd6e <VgaText::setDefaultFgColour(VgaColour)>

c000cda4 <VgaText::combineColours(unsigned char, unsigned char)>:
c000cda4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000cda9:	c1 e2 04             	shl    edx,0x4
c000cdac:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000cdb0:	83 e0 0f             	and    eax,0xf
c000cdb3:	09 d0                	or     eax,edx
c000cdb5:	c3                   	ret    

c000cdb6 <VgaText::scrollScreen()>:
c000cdb6:	57                   	push   edi
c000cdb7:	56                   	push   esi
c000cdb8:	be 01 00 00 00       	mov    esi,0x1
c000cdbd:	53                   	push   ebx
c000cdbe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cdc2:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000cdc8:	31 ff                	xor    edi,edi
c000cdca:	01 d9                	add    ecx,ebx
c000cdcc:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000cdcf:	83 fe 17             	cmp    esi,0x17
c000cdd2:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000cdd8:	75 28                	jne    c000ce02 <VgaText::scrollScreen()+0x4c>
c000cdda:	f7 c7 01 00 00 00    	test   edi,0x1
c000cde0:	74 1c                	je     c000cdfe <VgaText::scrollScreen()+0x48>
c000cde2:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000cde9:	50                   	push   eax
c000cdea:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000cdf1:	50                   	push   eax
c000cdf2:	e8 ad ff ff ff       	call   c000cda4 <VgaText::combineColours(unsigned char, unsigned char)>
c000cdf7:	5a                   	pop    edx
c000cdf8:	5a                   	pop    edx
c000cdf9:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000cdfc:	eb 04                	jmp    c000ce02 <VgaText::scrollScreen()+0x4c>
c000cdfe:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000ce02:	47                   	inc    edi
c000ce03:	41                   	inc    ecx
c000ce04:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ce0a:	75 c0                	jne    c000cdcc <VgaText::scrollScreen()+0x16>
c000ce0c:	46                   	inc    esi
c000ce0d:	83 fe 18             	cmp    esi,0x18
c000ce10:	75 b0                	jne    c000cdc2 <VgaText::scrollScreen()+0xc>
c000ce12:	39 1d 64 48 02 c0    	cmp    DWORD PTR ds:0xc0024864,ebx
c000ce18:	75 24                	jne    c000ce3e <VgaText::scrollScreen()+0x88>
c000ce1a:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ce21:	74 08                	je     c000ce2b <VgaText::scrollScreen()+0x75>
c000ce23:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ce29:	eb 13                	jmp    c000ce3e <VgaText::scrollScreen()+0x88>
c000ce2b:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ce31:	85 c0                	test   eax,eax
c000ce33:	74 09                	je     c000ce3e <VgaText::scrollScreen()+0x88>
c000ce35:	83 ec 0c             	sub    esp,0xc
c000ce38:	53                   	push   ebx
c000ce39:	ff d0                	call   eax
c000ce3b:	83 c4 10             	add    esp,0x10
c000ce3e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce42:	5b                   	pop    ebx
c000ce43:	5e                   	pop    esi
c000ce44:	5f                   	pop    edi
c000ce45:	e9 1e fe ff ff       	jmp    c000cc68 <VgaText::updateCursor()>

c000ce4a <VgaText::combineCharAndColour(char, unsigned char)>:
c000ce4a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ce4f:	c1 e0 08             	shl    eax,0x8
c000ce52:	89 c2                	mov    edx,eax
c000ce54:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ce59:	09 d0                	or     eax,edx
c000ce5b:	c3                   	ret    

c000ce5c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ce5c:	53                   	push   ebx
c000ce5d:	83 ec 08             	sub    esp,0x8
c000ce60:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce65:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ce69:	50                   	push   eax
c000ce6a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce6f:	50                   	push   eax
c000ce70:	e8 2f ff ff ff       	call   c000cda4 <VgaText::combineColours(unsigned char, unsigned char)>
c000ce75:	5a                   	pop    edx
c000ce76:	5b                   	pop    ebx
c000ce77:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ce7c:	0f b6 c0             	movzx  eax,al
c000ce7f:	50                   	push   eax
c000ce80:	53                   	push   ebx
c000ce81:	e8 c4 ff ff ff       	call   c000ce4a <VgaText::combineCharAndColour(char, unsigned char)>
c000ce86:	5a                   	pop    edx
c000ce87:	5a                   	pop    edx
c000ce88:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ce8e:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ce92:	0f b7 d2             	movzx  edx,dx
c000ce95:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000ce9a:	39 0d 64 48 02 c0    	cmp    DWORD PTR ds:0xc0024864,ecx
c000cea0:	75 14                	jne    c000ceb6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000cea2:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000cea8:	85 c0                	test   eax,eax
c000ceaa:	74 0a                	je     c000ceb6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ceac:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ceb0:	83 c4 08             	add    esp,0x8
c000ceb3:	5b                   	pop    ebx
c000ceb4:	ff e0                	jmp    eax
c000ceb6:	83 c4 08             	add    esp,0x8
c000ceb9:	5b                   	pop    ebx
c000ceba:	c3                   	ret    
c000cebb:	90                   	nop

c000cebc <VgaText::getCursorX()>:
c000cebc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cec0:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000cec6:	c3                   	ret    
c000cec7:	90                   	nop

c000cec8 <VgaText::getCursorY()>:
c000cec8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cecc:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000ced2:	c3                   	ret    
c000ced3:	90                   	nop

c000ced4 <VgaText::setCursor(int, int)>:
c000ced4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ced8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cedc:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000cee2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cee6:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000ceec:	e9 77 fd ff ff       	jmp    c000cc68 <VgaText::updateCursor()>
c000cef1:	90                   	nop

c000cef2 <VgaText::setCursorX(int)>:
c000cef2:	83 ec 10             	sub    esp,0x10
c000cef5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cef9:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	50                   	push   eax
c000cf04:	e8 cb ff ff ff       	call   c000ced4 <VgaText::setCursor(int, int)>
c000cf09:	83 c4 1c             	add    esp,0x1c
c000cf0c:	c3                   	ret    
c000cf0d:	90                   	nop

c000cf0e <VgaText::setCursorY(int)>:
c000cf0e:	83 ec 10             	sub    esp,0x10
c000cf11:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cf15:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf19:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000cf1f:	50                   	push   eax
c000cf20:	e8 af ff ff ff       	call   c000ced4 <VgaText::setCursor(int, int)>
c000cf25:	83 c4 1c             	add    esp,0x1c
c000cf28:	c3                   	ret    
c000cf29:	90                   	nop

c000cf2a <VgaText::incrementCursor(bool)>:
c000cf2a:	56                   	push   esi
c000cf2b:	53                   	push   ebx
c000cf2c:	51                   	push   ecx
c000cf2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf31:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf35:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000cf3b:	40                   	inc    eax
c000cf3c:	83 f8 50             	cmp    eax,0x50
c000cf3f:	74 08                	je     c000cf49 <VgaText::incrementCursor(bool)+0x1f>
c000cf41:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cf47:	eb 33                	jmp    c000cf7c <VgaText::incrementCursor(bool)+0x52>
c000cf49:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cf4f:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cf59:	8d 50 01             	lea    edx,[eax+0x1]
c000cf5c:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cf62:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000cf68:	75 12                	jne    c000cf7c <VgaText::incrementCursor(bool)+0x52>
c000cf6a:	83 ec 0c             	sub    esp,0xc
c000cf6d:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000cf73:	53                   	push   ebx
c000cf74:	e8 3d fe ff ff       	call   c000cdb6 <VgaText::scrollScreen()>
c000cf79:	83 c4 10             	add    esp,0x10
c000cf7c:	89 f0                	mov    eax,esi
c000cf7e:	84 c0                	test   al,al
c000cf80:	74 0c                	je     c000cf8e <VgaText::incrementCursor(bool)+0x64>
c000cf82:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cf86:	5a                   	pop    edx
c000cf87:	5b                   	pop    ebx
c000cf88:	5e                   	pop    esi
c000cf89:	e9 da fc ff ff       	jmp    c000cc68 <VgaText::updateCursor()>
c000cf8e:	58                   	pop    eax
c000cf8f:	5b                   	pop    ebx
c000cf90:	5e                   	pop    esi
c000cf91:	c3                   	ret    

c000cf92 <VgaText::updateRAMUsageDisplay(int)>:
c000cf92:	53                   	push   ebx
c000cf93:	bb 0a 00 00 00       	mov    ebx,0xa
c000cf98:	6a 0f                	push   0xf
c000cf9a:	6a 00                	push   0x0
c000cf9c:	e8 03 fe ff ff       	call   c000cda4 <VgaText::combineColours(unsigned char, unsigned char)>
c000cfa1:	5a                   	pop    edx
c000cfa2:	59                   	pop    ecx
c000cfa3:	0f b6 c8             	movzx  ecx,al
c000cfa6:	51                   	push   ecx
c000cfa7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cfab:	99                   	cdq    
c000cfac:	f7 fb                	idiv   ebx
c000cfae:	83 c0 30             	add    eax,0x30
c000cfb1:	89 d3                	mov    ebx,edx
c000cfb3:	0f be c0             	movsx  eax,al
c000cfb6:	50                   	push   eax
c000cfb7:	e8 8e fe ff ff       	call   c000ce4a <VgaText::combineCharAndColour(char, unsigned char)>
c000cfbc:	5a                   	pop    edx
c000cfbd:	83 c3 30             	add    ebx,0x30
c000cfc0:	5a                   	pop    edx
c000cfc1:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cfc7:	0f b6 db             	movzx  ebx,bl
c000cfca:	51                   	push   ecx
c000cfcb:	53                   	push   ebx
c000cfcc:	e8 79 fe ff ff       	call   c000ce4a <VgaText::combineCharAndColour(char, unsigned char)>
c000cfd1:	5b                   	pop    ebx
c000cfd2:	5a                   	pop    edx
c000cfd3:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cfd9:	51                   	push   ecx
c000cfda:	6a 25                	push   0x25
c000cfdc:	e8 69 fe ff ff       	call   c000ce4a <VgaText::combineCharAndColour(char, unsigned char)>
c000cfe1:	59                   	pop    ecx
c000cfe2:	5b                   	pop    ebx
c000cfe3:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000cfe9:	5b                   	pop    ebx
c000cfea:	c3                   	ret    
c000cfeb:	90                   	nop

c000cfec <VgaText::updateDiskUsage()>:
c000cfec:	55                   	push   ebp
c000cfed:	bd 10 27 00 00       	mov    ebp,0x2710
c000cff2:	57                   	push   edi
c000cff3:	56                   	push   esi
c000cff4:	53                   	push   ebx
c000cff5:	6a 0f                	push   0xf
c000cff7:	6a 00                	push   0x0
c000cff9:	e8 a6 fd ff ff       	call   c000cda4 <VgaText::combineColours(unsigned char, unsigned char)>
c000cffe:	0f b6 d8             	movzx  ebx,al
c000d001:	a1 44 65 02 c0       	mov    eax,ds:0xc0026544
c000d006:	5a                   	pop    edx
c000d007:	99                   	cdq    
c000d008:	f7 fd                	idiv   ebp
c000d00a:	59                   	pop    ecx
c000d00b:	b9 0a 00 00 00       	mov    ecx,0xa
c000d010:	99                   	cdq    
c000d011:	f7 f9                	idiv   ecx
c000d013:	53                   	push   ebx
c000d014:	8d 42 30             	lea    eax,[edx+0x30]
c000d017:	0f b6 c0             	movzx  eax,al
c000d01a:	50                   	push   eax
c000d01b:	e8 2a fe ff ff       	call   c000ce4a <VgaText::combineCharAndColour(char, unsigned char)>
c000d020:	5e                   	pop    esi
c000d021:	5f                   	pop    edi
c000d022:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000d028:	a1 44 65 02 c0       	mov    eax,ds:0xc0026544
c000d02d:	bf e8 03 00 00       	mov    edi,0x3e8
c000d032:	99                   	cdq    
c000d033:	f7 ff                	idiv   edi
c000d035:	99                   	cdq    
c000d036:	f7 f9                	idiv   ecx
c000d038:	53                   	push   ebx
c000d039:	8d 42 30             	lea    eax,[edx+0x30]
c000d03c:	0f b6 c0             	movzx  eax,al
c000d03f:	50                   	push   eax
c000d040:	e8 05 fe ff ff       	call   c000ce4a <VgaText::combineCharAndColour(char, unsigned char)>
c000d045:	5a                   	pop    edx
c000d046:	5e                   	pop    esi
c000d047:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000d04d:	a1 44 65 02 c0       	mov    eax,ds:0xc0026544
c000d052:	be 64 00 00 00       	mov    esi,0x64
c000d057:	99                   	cdq    
c000d058:	f7 fe                	idiv   esi
c000d05a:	99                   	cdq    
c000d05b:	f7 f9                	idiv   ecx
c000d05d:	53                   	push   ebx
c000d05e:	8d 42 30             	lea    eax,[edx+0x30]
c000d061:	0f b6 c0             	movzx  eax,al
c000d064:	50                   	push   eax
c000d065:	e8 e0 fd ff ff       	call   c000ce4a <VgaText::combineCharAndColour(char, unsigned char)>
c000d06a:	5a                   	pop    edx
c000d06b:	5a                   	pop    edx
c000d06c:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000d072:	a1 44 65 02 c0       	mov    eax,ds:0xc0026544
c000d077:	53                   	push   ebx
c000d078:	99                   	cdq    
c000d079:	f7 f9                	idiv   ecx
c000d07b:	99                   	cdq    
c000d07c:	f7 f9                	idiv   ecx
c000d07e:	8d 42 30             	lea    eax,[edx+0x30]
c000d081:	0f b6 c0             	movzx  eax,al
c000d084:	50                   	push   eax
c000d085:	e8 c0 fd ff ff       	call   c000ce4a <VgaText::combineCharAndColour(char, unsigned char)>
c000d08a:	5a                   	pop    edx
c000d08b:	5a                   	pop    edx
c000d08c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000d092:	a1 44 65 02 c0       	mov    eax,ds:0xc0026544
c000d097:	53                   	push   ebx
c000d098:	99                   	cdq    
c000d099:	f7 f9                	idiv   ecx
c000d09b:	8d 42 30             	lea    eax,[edx+0x30]
c000d09e:	0f b6 c0             	movzx  eax,al
c000d0a1:	50                   	push   eax
c000d0a2:	e8 a3 fd ff ff       	call   c000ce4a <VgaText::combineCharAndColour(char, unsigned char)>
c000d0a7:	5a                   	pop    edx
c000d0a8:	5a                   	pop    edx
c000d0a9:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000d0af:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c000d0b4:	53                   	push   ebx
c000d0b5:	99                   	cdq    
c000d0b6:	f7 fd                	idiv   ebp
c000d0b8:	99                   	cdq    
c000d0b9:	f7 f9                	idiv   ecx
c000d0bb:	8d 42 30             	lea    eax,[edx+0x30]
c000d0be:	0f b6 c0             	movzx  eax,al
c000d0c1:	50                   	push   eax
c000d0c2:	e8 83 fd ff ff       	call   c000ce4a <VgaText::combineCharAndColour(char, unsigned char)>
c000d0c7:	5d                   	pop    ebp
c000d0c8:	5a                   	pop    edx
c000d0c9:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000d0cf:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c000d0d4:	53                   	push   ebx
c000d0d5:	99                   	cdq    
c000d0d6:	f7 ff                	idiv   edi
c000d0d8:	99                   	cdq    
c000d0d9:	f7 f9                	idiv   ecx
c000d0db:	8d 42 30             	lea    eax,[edx+0x30]
c000d0de:	0f b6 c0             	movzx  eax,al
c000d0e1:	50                   	push   eax
c000d0e2:	e8 63 fd ff ff       	call   c000ce4a <VgaText::combineCharAndColour(char, unsigned char)>
c000d0e7:	5f                   	pop    edi
c000d0e8:	5d                   	pop    ebp
c000d0e9:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000d0ef:	53                   	push   ebx
c000d0f0:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c000d0f5:	99                   	cdq    
c000d0f6:	f7 fe                	idiv   esi
c000d0f8:	99                   	cdq    
c000d0f9:	f7 f9                	idiv   ecx
c000d0fb:	8d 42 30             	lea    eax,[edx+0x30]
c000d0fe:	0f b6 c0             	movzx  eax,al
c000d101:	50                   	push   eax
c000d102:	e8 43 fd ff ff       	call   c000ce4a <VgaText::combineCharAndColour(char, unsigned char)>
c000d107:	5a                   	pop    edx
c000d108:	5e                   	pop    esi
c000d109:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000d10f:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c000d114:	53                   	push   ebx
c000d115:	99                   	cdq    
c000d116:	f7 f9                	idiv   ecx
c000d118:	99                   	cdq    
c000d119:	f7 f9                	idiv   ecx
c000d11b:	8d 42 30             	lea    eax,[edx+0x30]
c000d11e:	0f b6 c0             	movzx  eax,al
c000d121:	50                   	push   eax
c000d122:	e8 23 fd ff ff       	call   c000ce4a <VgaText::combineCharAndColour(char, unsigned char)>
c000d127:	5f                   	pop    edi
c000d128:	5d                   	pop    ebp
c000d129:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000d12f:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c000d134:	53                   	push   ebx
c000d135:	99                   	cdq    
c000d136:	f7 f9                	idiv   ecx
c000d138:	83 c2 30             	add    edx,0x30
c000d13b:	0f b6 d2             	movzx  edx,dl
c000d13e:	52                   	push   edx
c000d13f:	e8 06 fd ff ff       	call   c000ce4a <VgaText::combineCharAndColour(char, unsigned char)>
c000d144:	5a                   	pop    edx
c000d145:	59                   	pop    ecx
c000d146:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000d14c:	5b                   	pop    ebx
c000d14d:	5e                   	pop    esi
c000d14e:	5f                   	pop    edi
c000d14f:	5d                   	pop    ebp
c000d150:	c3                   	ret    
c000d151:	90                   	nop

c000d152 <VgaText::updateTitle()>:
c000d152:	53                   	push   ebx
c000d153:	31 c0                	xor    eax,eax
c000d155:	83 ec 58             	sub    esp,0x58
c000d158:	89 e1                	mov    ecx,esp
c000d15a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000d15e:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000d162:	40                   	inc    eax
c000d163:	83 f8 50             	cmp    eax,0x50
c000d166:	75 f6                	jne    c000d15e <VgaText::updateTitle()+0xc>
c000d168:	31 c0                	xor    eax,eax
c000d16a:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000d171:	84 db                	test   bl,bl
c000d173:	74 06                	je     c000d17b <VgaText::updateTitle()+0x29>
c000d175:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000d178:	40                   	inc    eax
c000d179:	eb ef                	jmp    c000d16a <VgaText::updateTitle()+0x18>
c000d17b:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000d181:	85 c0                	test   eax,eax
c000d183:	74 09                	je     c000d18e <VgaText::updateTitle()+0x3c>
c000d185:	53                   	push   ebx
c000d186:	53                   	push   ebx
c000d187:	51                   	push   ecx
c000d188:	52                   	push   edx
c000d189:	ff d0                	call   eax
c000d18b:	83 c4 10             	add    esp,0x10
c000d18e:	e8 59 fe ff ff       	call   c000cfec <VgaText::updateDiskUsage()>
c000d193:	83 c4 58             	add    esp,0x58
c000d196:	5b                   	pop    ebx
c000d197:	c3                   	ret    

c000d198 <VgaText::setTitleTextColour(VgaColour)>:
c000d198:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d19c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1a0:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000d1a6:	eb aa                	jmp    c000d152 <VgaText::updateTitle()>

c000d1a8 <VgaText::setTitleColour(VgaColour)>:
c000d1a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1b0:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000d1b6:	eb 9a                	jmp    c000d152 <VgaText::updateTitle()>

c000d1b8 <VgaText::setTitle(char*)>:
c000d1b8:	53                   	push   ebx
c000d1b9:	83 ec 10             	sub    esp,0x10
c000d1bc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1c4:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000d1ca:	50                   	push   eax
c000d1cb:	e8 93 35 ff ff       	call   c0000763 <strcpy>
c000d1d0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000d1d4:	83 c4 18             	add    esp,0x18
c000d1d7:	5b                   	pop    ebx
c000d1d8:	e9 75 ff ff ff       	jmp    c000d152 <VgaText::updateTitle()>
c000d1dd:	90                   	nop

c000d1de <VgaText::decrementCursor(bool)>:
c000d1de:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d1e2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d1e6:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000d1ec:	85 c0                	test   eax,eax
c000d1ee:	74 07                	je     c000d1f7 <VgaText::decrementCursor(bool)+0x19>
c000d1f0:	48                   	dec    eax
c000d1f1:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000d1f7:	84 c9                	test   cl,cl
c000d1f9:	74 09                	je     c000d204 <VgaText::decrementCursor(bool)+0x26>
c000d1fb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d1ff:	e9 64 fa ff ff       	jmp    c000cc68 <VgaText::updateCursor()>
c000d204:	c3                   	ret    
c000d205:	90                   	nop

c000d206 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000d206:	53                   	push   ebx
c000d207:	83 ec 08             	sub    esp,0x8
c000d20a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d20e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d212:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d216:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d21a:	3c 07                	cmp    al,0x7
c000d21c:	75 2a                	jne    c000d248 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000d21e:	a1 0c 49 02 c0       	mov    eax,ds:0xc002490c
c000d223:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000d22b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000d233:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000d23b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d23f:	83 c4 08             	add    esp,0x8
c000d242:	5b                   	pop    ebx
c000d243:	e9 c0 2d 00 00       	jmp    c0010008 <Buzzer::beep(int, int, bool)>
c000d248:	3c 0d                	cmp    al,0xd
c000d24a:	75 0c                	jne    c000d258 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000d24c:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d256:	eb 3b                	jmp    c000d293 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000d258:	3c 0a                	cmp    al,0xa
c000d25a:	75 40                	jne    c000d29c <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000d25c:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000d262:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d26c:	8d 50 01             	lea    edx,[eax+0x1]
c000d26f:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000d275:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000d27b:	75 12                	jne    c000d28f <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000d27d:	83 ec 0c             	sub    esp,0xc
c000d280:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000d286:	53                   	push   ebx
c000d287:	e8 2a fb ff ff       	call   c000cdb6 <VgaText::scrollScreen()>
c000d28c:	83 c4 10             	add    esp,0x10
c000d28f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d293:	83 c4 08             	add    esp,0x8
c000d296:	5b                   	pop    ebx
c000d297:	e9 cc f9 ff ff       	jmp    c000cc68 <VgaText::updateCursor()>
c000d29c:	3c 08                	cmp    al,0x8
c000d29e:	75 31                	jne    c000d2d1 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000d2a0:	50                   	push   eax
c000d2a1:	50                   	push   eax
c000d2a2:	6a 01                	push   0x1
c000d2a4:	53                   	push   ebx
c000d2a5:	e8 34 ff ff ff       	call   c000d1de <VgaText::decrementCursor(bool)>
c000d2aa:	5a                   	pop    edx
c000d2ab:	59                   	pop    ecx
c000d2ac:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2b2:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2b8:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d2be:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d2c4:	6a 20                	push   0x20
c000d2c6:	53                   	push   ebx
c000d2c7:	e8 90 fb ff ff       	call   c000ce5c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d2cc:	83 c4 28             	add    esp,0x28
c000d2cf:	5b                   	pop    ebx
c000d2d0:	c3                   	ret    
c000d2d1:	83 ec 08             	sub    esp,0x8
c000d2d4:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2da:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2e0:	0f be c0             	movsx  eax,al
c000d2e3:	51                   	push   ecx
c000d2e4:	52                   	push   edx
c000d2e5:	50                   	push   eax
c000d2e6:	53                   	push   ebx
c000d2e7:	e8 70 fb ff ff       	call   c000ce5c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d2ec:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000d2f0:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000d2f8:	83 c4 28             	add    esp,0x28
c000d2fb:	5b                   	pop    ebx
c000d2fc:	e9 29 fc ff ff       	jmp    c000cf2a <VgaText::incrementCursor(bool)>
c000d301:	90                   	nop

c000d302 <VgaText::isShowingCursor()>:
c000d302:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d306:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000d30c:	c3                   	ret    
c000d30d:	90                   	nop

c000d30e <VgaText::isBlinkDisabled()>:
c000d30e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d312:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000d318:	83 f0 01             	xor    eax,0x1
c000d31b:	c3                   	ret    

c000d31c <VgaText::setCursorHeight(int)>:
c000d31c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d320:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d324:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000d32a:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000d331:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d335:	e9 48 f9 ff ff       	jmp    c000cc82 <VgaText::showCursor(bool)>

c000d33a <VgaText::getCursorHeight()>:
c000d33a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d33e:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000d344:	c3                   	ret    

c000d345 <setActiveTerminal(VgaText*)>:
c000d345:	53                   	push   ebx
c000d346:	83 ec 08             	sub    esp,0x8
c000d349:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d34d:	85 db                	test   ebx,ebx
c000d34f:	75 11                	jne    c000d362 <setActiveTerminal(VgaText*)+0x1d>
c000d351:	c7 44 24 10 40 14 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021440
c000d359:	83 c4 08             	add    esp,0x8
c000d35c:	5b                   	pop    ebx
c000d35d:	e9 e2 86 00 00       	jmp    c0015a44 <Krnl::panic(char const*)>
c000d362:	50                   	push   eax
c000d363:	50                   	push   eax
c000d364:	53                   	push   ebx
c000d365:	68 4e 14 02 c0       	push   0xc002144e
c000d36a:	e8 a6 1e 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000d36f:	a1 64 48 02 c0       	mov    eax,ds:0xc0024864
c000d374:	83 c4 10             	add    esp,0x10
c000d377:	85 c0                	test   eax,eax
c000d379:	74 0c                	je     c000d387 <setActiveTerminal(VgaText*)+0x42>
c000d37b:	83 ec 0c             	sub    esp,0xc
c000d37e:	50                   	push   eax
c000d37f:	e8 e4 f8 ff ff       	call   c000cc68 <VgaText::updateCursor()>
c000d384:	83 c4 10             	add    esp,0x10
c000d387:	51                   	push   ecx
c000d388:	89 1d 64 48 02 c0    	mov    DWORD PTR ds:0xc0024864,ebx
c000d38e:	51                   	push   ecx
c000d38f:	53                   	push   ebx
c000d390:	68 66 14 02 c0       	push   0xc0021466
c000d395:	e8 7b 1e 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000d39a:	83 c4 0c             	add    esp,0xc
c000d39d:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d3a3:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d3a9:	53                   	push   ebx
c000d3aa:	e8 25 fb ff ff       	call   c000ced4 <VgaText::setCursor(int, int)>
c000d3af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3b2:	e8 57 ff ff ff       	call   c000d30e <VgaText::isBlinkDisabled()>
c000d3b7:	5a                   	pop    edx
c000d3b8:	59                   	pop    ecx
c000d3b9:	0f b6 c0             	movzx  eax,al
c000d3bc:	50                   	push   eax
c000d3bd:	53                   	push   ebx
c000d3be:	e8 cf f8 ff ff       	call   c000cc92 <VgaText::disableBlink(bool)>
c000d3c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3c6:	e8 6f ff ff ff       	call   c000d33a <VgaText::getCursorHeight()>
c000d3cb:	5a                   	pop    edx
c000d3cc:	59                   	pop    ecx
c000d3cd:	50                   	push   eax
c000d3ce:	53                   	push   ebx
c000d3cf:	e8 48 ff ff ff       	call   c000d31c <VgaText::setCursorHeight(int)>
c000d3d4:	83 c4 10             	add    esp,0x10
c000d3d7:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000d3de:	75 0a                	jne    c000d3ea <setActiveTerminal(VgaText*)+0xa5>
c000d3e0:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000d3ea:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d3ee:	83 c4 08             	add    esp,0x8
c000d3f1:	5b                   	pop    ebx
c000d3f2:	e9 1d f8 ff ff       	jmp    c000cc14 <VgaText::load()>

c000d3f7 <doTerminalCycle()>:
c000d3f7:	83 ec 18             	sub    esp,0x18
c000d3fa:	a1 60 48 02 c0       	mov    eax,ds:0xc0024860
c000d3ff:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000d405:	50                   	push   eax
c000d406:	a3 60 48 02 c0       	mov    ds:0xc0024860,eax
c000d40b:	e8 35 ff ff ff       	call   c000d345 <setActiveTerminal(VgaText*)>
c000d410:	83 c4 1c             	add    esp,0x1c
c000d413:	c3                   	ret    

c000d414 <VgaText::doUpdate()>:
c000d414:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d418:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000d41e:	85 c0                	test   eax,eax
c000d420:	74 02                	je     c000d424 <VgaText::doUpdate()+0x10>
c000d422:	ff e0                	jmp    eax
c000d424:	c3                   	ret    
c000d425:	90                   	nop

c000d426 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000d426:	55                   	push   ebp
c000d427:	57                   	push   edi
c000d428:	56                   	push   esi
c000d429:	53                   	push   ebx
c000d42a:	83 ec 1c             	sub    esp,0x1c
c000d42d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d431:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d436:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000d43d:	50                   	push   eax
c000d43e:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d443:	50                   	push   eax
c000d444:	e8 5b f9 ff ff       	call   c000cda4 <VgaText::combineColours(unsigned char, unsigned char)>
c000d449:	59                   	pop    ecx
c000d44a:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000d44d:	5b                   	pop    ebx
c000d44e:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d456:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d45c:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d460:	0f b7 db             	movzx  ebx,bx
c000d463:	01 db                	add    ebx,ebx
c000d465:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d469:	01 fb                	add    ebx,edi
c000d46b:	31 c0                	xor    eax,eax
c000d46d:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d470:	84 c9                	test   cl,cl
c000d472:	0f 84 3d 01 00 00    	je     c000d5b5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18f>
c000d478:	80 f9 0d             	cmp    cl,0xd
c000d47b:	75 0f                	jne    c000d48c <VgaText::puts(char const*, VgaColour, VgaColour)+0x66>
c000d47d:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d487:	e9 23 01 00 00       	jmp    c000d5af <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d48c:	80 f9 0a             	cmp    cl,0xa
c000d48f:	75 5b                	jne    c000d4ec <VgaText::puts(char const*, VgaColour, VgaColour)+0xc6>
c000d491:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d497:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d4a1:	8d 48 01             	lea    ecx,[eax+0x1]
c000d4a4:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d4aa:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d4b0:	75 12                	jne    c000d4c4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9e>
c000d4b2:	83 ec 0c             	sub    esp,0xc
c000d4b5:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d4bb:	55                   	push   ebp
c000d4bc:	e8 f5 f8 ff ff       	call   c000cdb6 <VgaText::scrollScreen()>
c000d4c1:	83 c4 10             	add    esp,0x10
c000d4c4:	83 ec 0c             	sub    esp,0xc
c000d4c7:	55                   	push   ebp
c000d4c8:	e8 9b f7 ff ff       	call   c000cc68 <VgaText::updateCursor()>
c000d4cd:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d4d5:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d4db:	83 c4 10             	add    esp,0x10
c000d4de:	0f b7 db             	movzx  ebx,bx
c000d4e1:	01 db                	add    ebx,ebx
c000d4e3:	31 c0                	xor    eax,eax
c000d4e5:	01 fb                	add    ebx,edi
c000d4e7:	e9 c3 00 00 00       	jmp    c000d5af <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d4ec:	80 f9 08             	cmp    cl,0x8
c000d4ef:	75 4e                	jne    c000d53f <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d4f1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000d4f5:	50                   	push   eax
c000d4f6:	50                   	push   eax
c000d4f7:	6a 01                	push   0x1
c000d4f9:	55                   	push   ebp
c000d4fa:	e8 df fc ff ff       	call   c000d1de <VgaText::decrementCursor(bool)>
c000d4ff:	58                   	pop    eax
c000d500:	5a                   	pop    edx
c000d501:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d507:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d50d:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d513:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d519:	6a 20                	push   0x20
c000d51b:	55                   	push   ebp
c000d51c:	e8 3b f9 ff ff       	call   c000ce5c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d521:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d529:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d52f:	83 c4 20             	add    esp,0x20
c000d532:	0f b7 db             	movzx  ebx,bx
c000d535:	01 db                	add    ebx,ebx
c000d537:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d53b:	01 fb                	add    ebx,edi
c000d53d:	eb 70                	jmp    c000d5af <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d53f:	50                   	push   eax
c000d540:	50                   	push   eax
c000d541:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d546:	50                   	push   eax
c000d547:	51                   	push   ecx
c000d548:	e8 fd f8 ff ff       	call   c000ce4a <VgaText::combineCharAndColour(char, unsigned char)>
c000d54d:	66 89 03             	mov    WORD PTR [ebx],ax
c000d550:	83 c4 10             	add    esp,0x10
c000d553:	39 2d 64 48 02 c0    	cmp    DWORD PTR ds:0xc0024864,ebp
c000d559:	75 2a                	jne    c000d585 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d55b:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d561:	85 c0                	test   eax,eax
c000d563:	74 20                	je     c000d585 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d565:	52                   	push   edx
c000d566:	52                   	push   edx
c000d567:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d56d:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d573:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d577:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d57b:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d57e:	51                   	push   ecx
c000d57f:	55                   	push   ebp
c000d580:	ff d0                	call   eax
c000d582:	83 c4 20             	add    esp,0x20
c000d585:	50                   	push   eax
c000d586:	83 c3 02             	add    ebx,0x2
c000d589:	50                   	push   eax
c000d58a:	6a 00                	push   0x0
c000d58c:	55                   	push   ebp
c000d58d:	e8 98 f9 ff ff       	call   c000cf2a <VgaText::incrementCursor(bool)>
c000d592:	83 c4 10             	add    esp,0x10
c000d595:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d59c:	75 0f                	jne    c000d5ad <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d59e:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d5a6:	0f b7 db             	movzx  ebx,bx
c000d5a9:	01 db                	add    ebx,ebx
c000d5ab:	01 fb                	add    ebx,edi
c000d5ad:	b0 01                	mov    al,0x1
c000d5af:	46                   	inc    esi
c000d5b0:	e9 b8 fe ff ff       	jmp    c000d46d <VgaText::puts(char const*, VgaColour, VgaColour)+0x47>
c000d5b5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d5b9:	83 ec 0c             	sub    esp,0xc
c000d5bc:	55                   	push   ebp
c000d5bd:	e8 a6 f6 ff ff       	call   c000cc68 <VgaText::updateCursor()>
c000d5c2:	83 c4 10             	add    esp,0x10
c000d5c5:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000d5c9:	84 c0                	test   al,al
c000d5cb:	74 0c                	je     c000d5d9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b3>
c000d5cd:	83 ec 0c             	sub    esp,0xc
c000d5d0:	55                   	push   ebp
c000d5d1:	e8 3e fe ff ff       	call   c000d414 <VgaText::doUpdate()>
c000d5d6:	83 c4 10             	add    esp,0x10
c000d5d9:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d5e0:	83 c4 1c             	add    esp,0x1c
c000d5e3:	5b                   	pop    ebx
c000d5e4:	5e                   	pop    esi
c000d5e5:	5f                   	pop    edi
c000d5e6:	5d                   	pop    ebp
c000d5e7:	c3                   	ret    

c000d5e8 <VgaText::clearScreen()>:
c000d5e8:	57                   	push   edi
c000d5e9:	56                   	push   esi
c000d5ea:	31 f6                	xor    esi,esi
c000d5ec:	53                   	push   ebx
c000d5ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d5f1:	52                   	push   edx
c000d5f2:	6a 00                	push   0x0
c000d5f4:	6a 00                	push   0x0
c000d5f6:	53                   	push   ebx
c000d5f7:	e8 d8 f8 ff ff       	call   c000ced4 <VgaText::setCursor(int, int)>
c000d5fc:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d603:	83 c4 10             	add    esp,0x10
c000d606:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d60c:	7e 26                	jle    c000d634 <VgaText::clearScreen()+0x4c>
c000d60e:	31 ff                	xor    edi,edi
c000d610:	50                   	push   eax
c000d611:	50                   	push   eax
c000d612:	56                   	push   esi
c000d613:	57                   	push   edi
c000d614:	47                   	inc    edi
c000d615:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d61b:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d621:	6a 20                	push   0x20
c000d623:	53                   	push   ebx
c000d624:	e8 33 f8 ff ff       	call   c000ce5c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d629:	83 c4 20             	add    esp,0x20
c000d62c:	83 ff 50             	cmp    edi,0x50
c000d62f:	75 df                	jne    c000d610 <VgaText::clearScreen()+0x28>
c000d631:	46                   	inc    esi
c000d632:	eb d2                	jmp    c000d606 <VgaText::clearScreen()+0x1e>
c000d634:	83 ec 0c             	sub    esp,0xc
c000d637:	53                   	push   ebx
c000d638:	e8 d7 fd ff ff       	call   c000d414 <VgaText::doUpdate()>
c000d63d:	83 c4 10             	add    esp,0x10
c000d640:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d647:	5b                   	pop    ebx
c000d648:	5e                   	pop    esi
c000d649:	5f                   	pop    edi
c000d64a:	c3                   	ret    
c000d64b:	90                   	nop

c000d64c <VgaText::putchar(char)>:
c000d64c:	56                   	push   esi
c000d64d:	53                   	push   ebx
c000d64e:	83 ec 14             	sub    esp,0x14
c000d651:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d655:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d659:	3c 5b                	cmp    al,0x5b
c000d65b:	75 21                	jne    c000d67e <VgaText::putchar(char)+0x32>
c000d65d:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d664:	74 28                	je     c000d68e <VgaText::putchar(char)+0x42>
c000d666:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d66f:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d679:	e9 e2 00 00 00       	jmp    c000d760 <VgaText::putchar(char)+0x114>
c000d67e:	3c 1b                	cmp    al,0x1b
c000d680:	75 0c                	jne    c000d68e <VgaText::putchar(char)+0x42>
c000d682:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d689:	e9 d2 00 00 00       	jmp    c000d760 <VgaText::putchar(char)+0x114>
c000d68e:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d694:	84 c9                	test   cl,cl
c000d696:	0f 84 ab 00 00 00    	je     c000d747 <VgaText::putchar(char)+0xfb>
c000d69c:	8d 50 c0             	lea    edx,[eax-0x40]
c000d69f:	80 fa 3e             	cmp    dl,0x3e
c000d6a2:	0f 87 82 00 00 00    	ja     c000d72a <VgaText::putchar(char)+0xde>
c000d6a8:	3c 6d                	cmp    al,0x6d
c000d6aa:	75 4d                	jne    c000d6f9 <VgaText::putchar(char)+0xad>
c000d6ac:	31 f6                	xor    esi,esi
c000d6ae:	31 d2                	xor    edx,edx
c000d6b0:	31 c0                	xor    eax,eax
c000d6b2:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d6b8:	7e 30                	jle    c000d6ea <VgaText::putchar(char)+0x9e>
c000d6ba:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d6c2:	80 fa 3b             	cmp    dl,0x3b
c000d6c5:	75 17                	jne    c000d6de <VgaText::putchar(char)+0x92>
c000d6c7:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d6cb:	50                   	push   eax
c000d6cc:	53                   	push   ebx
c000d6cd:	e8 fa f5 ff ff       	call   c000cccc <VgaText::doANSI_SGR(int)>
c000d6d2:	59                   	pop    ecx
c000d6d3:	31 d2                	xor    edx,edx
c000d6d5:	58                   	pop    eax
c000d6d6:	31 c0                	xor    eax,eax
c000d6d8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d6dc:	eb 09                	jmp    c000d6e7 <VgaText::putchar(char)+0x9b>
c000d6de:	6b c0 0a             	imul   eax,eax,0xa
c000d6e1:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d6e5:	88 ca                	mov    dl,cl
c000d6e7:	46                   	inc    esi
c000d6e8:	eb c8                	jmp    c000d6b2 <VgaText::putchar(char)+0x66>
c000d6ea:	84 d2                	test   dl,dl
c000d6ec:	74 31                	je     c000d71f <VgaText::putchar(char)+0xd3>
c000d6ee:	50                   	push   eax
c000d6ef:	53                   	push   ebx
c000d6f0:	e8 d7 f5 ff ff       	call   c000cccc <VgaText::doANSI_SGR(int)>
c000d6f5:	58                   	pop    eax
c000d6f6:	5a                   	pop    edx
c000d6f7:	eb 26                	jmp    c000d71f <VgaText::putchar(char)+0xd3>
c000d6f9:	3c 4a                	cmp    al,0x4a
c000d6fb:	75 22                	jne    c000d71f <VgaText::putchar(char)+0xd3>
c000d6fd:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d704:	75 19                	jne    c000d71f <VgaText::putchar(char)+0xd3>
c000d706:	83 ec 0c             	sub    esp,0xc
c000d709:	53                   	push   ebx
c000d70a:	e8 d9 fe ff ff       	call   c000d5e8 <VgaText::clearScreen()>
c000d70f:	83 c4 0c             	add    esp,0xc
c000d712:	6a 00                	push   0x0
c000d714:	6a 00                	push   0x0
c000d716:	53                   	push   ebx
c000d717:	e8 b8 f7 ff ff       	call   c000ced4 <VgaText::setCursor(int, int)>
c000d71c:	83 c4 10             	add    esp,0x10
c000d71f:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d728:	eb 36                	jmp    c000d760 <VgaText::putchar(char)+0x114>
c000d72a:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d730:	83 fa 0e             	cmp    edx,0xe
c000d733:	7f 2b                	jg     c000d760 <VgaText::putchar(char)+0x114>
c000d735:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d738:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d73e:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d745:	eb 19                	jmp    c000d760 <VgaText::putchar(char)+0x114>
c000d747:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d74d:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d753:	0f be c0             	movsx  eax,al
c000d756:	50                   	push   eax
c000d757:	53                   	push   ebx
c000d758:	e8 a9 fa ff ff       	call   c000d206 <VgaText::putchar(char, VgaColour, VgaColour)>
c000d75d:	83 c4 10             	add    esp,0x10
c000d760:	83 c4 14             	add    esp,0x14
c000d763:	5b                   	pop    ebx
c000d764:	5e                   	pop    esi
c000d765:	c3                   	ret    

c000d766 <VgaText::puts(char const*)>:
c000d766:	53                   	push   ebx
c000d767:	83 ec 08             	sub    esp,0x8
c000d76a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d76e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d771:	84 c0                	test   al,al
c000d773:	74 12                	je     c000d787 <VgaText::puts(char const*)+0x21>
c000d775:	51                   	push   ecx
c000d776:	43                   	inc    ebx
c000d777:	51                   	push   ecx
c000d778:	50                   	push   eax
c000d779:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d77d:	e8 ca fe ff ff       	call   c000d64c <VgaText::putchar(char)>
c000d782:	83 c4 10             	add    esp,0x10
c000d785:	eb e7                	jmp    c000d76e <VgaText::puts(char const*)+0x8>
c000d787:	83 c4 08             	add    esp,0x8
c000d78a:	5b                   	pop    ebx
c000d78b:	c3                   	ret    

c000d78c <VgaText::putx(unsigned int)>:
c000d78c:	57                   	push   edi
c000d78d:	b9 11 00 00 00       	mov    ecx,0x11
c000d792:	56                   	push   esi
c000d793:	be 82 14 02 c0       	mov    esi,0xc0021482
c000d798:	53                   	push   ebx
c000d799:	83 ec 20             	sub    esp,0x20
c000d79c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d7a0:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d7a4:	fc                   	cld    
c000d7a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7a7:	be 08 00 00 00       	mov    esi,0x8
c000d7ac:	50                   	push   eax
c000d7ad:	50                   	push   eax
c000d7ae:	89 d8                	mov    eax,ebx
c000d7b0:	c1 e8 1c             	shr    eax,0x1c
c000d7b3:	c1 e3 04             	shl    ebx,0x4
c000d7b6:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d7bb:	50                   	push   eax
c000d7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d7c0:	e8 87 fe ff ff       	call   c000d64c <VgaText::putchar(char)>
c000d7c5:	83 c4 10             	add    esp,0x10
c000d7c8:	4e                   	dec    esi
c000d7c9:	75 e1                	jne    c000d7ac <VgaText::putx(unsigned int)+0x20>
c000d7cb:	83 c4 20             	add    esp,0x20
c000d7ce:	5b                   	pop    ebx
c000d7cf:	5e                   	pop    esi
c000d7d0:	5f                   	pop    edi
c000d7d1:	c3                   	ret    

c000d7d2 <VgaText::VgaText(char const*)>:
c000d7d2:	57                   	push   edi
c000d7d3:	56                   	push   esi
c000d7d4:	53                   	push   ebx
c000d7d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7d9:	83 ec 08             	sub    esp,0x8
c000d7dc:	6a 00                	push   0x0
c000d7de:	50                   	push   eax
c000d7df:	e8 e0 05 00 00       	call   c000ddc4 <UnixFile::UnixFile(int)>
c000d7e4:	83 c4 10             	add    esp,0x10
c000d7e7:	ba e8 14 02 c0       	mov    edx,0xc00214e8
c000d7ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f0:	89 10                	mov    DWORD PTR [eax],edx
c000d7f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f6:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d804:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d80e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d812:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d819:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d81d:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d828:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d836:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d844:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d84b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d84f:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d85a:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d860:	bb 40 48 02 c0       	mov    ebx,0xc0024840
c000d865:	b8 08 00 00 00       	mov    eax,0x8
c000d86a:	fc                   	cld    
c000d86b:	89 d7                	mov    edi,edx
c000d86d:	89 de                	mov    esi,ebx
c000d86f:	89 c1                	mov    ecx,eax
c000d871:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d877:	05 1e 10 00 00       	add    eax,0x101e
c000d87c:	83 ec 08             	sub    esp,0x8
c000d87f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d883:	50                   	push   eax
c000d884:	e8 da 2e ff ff       	call   c0000763 <strcpy>
c000d889:	83 c4 10             	add    esp,0x10
c000d88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d890:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d89a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d89e:	83 c0 0c             	add    eax,0xc
c000d8a1:	83 ec 04             	sub    esp,0x4
c000d8a4:	68 00 0f 00 00       	push   0xf00
c000d8a9:	6a 00                	push   0x0
c000d8ab:	50                   	push   eax
c000d8ac:	e8 13 2e ff ff       	call   c00006c4 <memset>
c000d8b1:	83 c4 10             	add    esp,0x10
c000d8b4:	83 ec 04             	sub    esp,0x4
c000d8b7:	6a 00                	push   0x0
c000d8b9:	6a 07                	push   0x7
c000d8bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8bf:	e8 c0 f4 ff ff       	call   c000cd84 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d8c4:	83 c4 10             	add    esp,0x10
c000d8c7:	83 ec 08             	sub    esp,0x8
c000d8ca:	6a 02                	push   0x2
c000d8cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8d0:	e8 47 fa ff ff       	call   c000d31c <VgaText::setCursorHeight(int)>
c000d8d5:	83 c4 10             	add    esp,0x10
c000d8d8:	83 ec 04             	sub    esp,0x4
c000d8db:	6a 00                	push   0x0
c000d8dd:	6a 00                	push   0x0
c000d8df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8e3:	e8 ec f5 ff ff       	call   c000ced4 <VgaText::setCursor(int, int)>
c000d8e8:	83 c4 10             	add    esp,0x10
c000d8eb:	83 ec 08             	sub    esp,0x8
c000d8ee:	6a 01                	push   0x1
c000d8f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8f4:	e8 89 f3 ff ff       	call   c000cc82 <VgaText::showCursor(bool)>
c000d8f9:	83 c4 10             	add    esp,0x10
c000d8fc:	83 ec 08             	sub    esp,0x8
c000d8ff:	6a 01                	push   0x1
c000d901:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d905:	e8 88 f3 ff ff       	call   c000cc92 <VgaText::disableBlink(bool)>
c000d90a:	83 c4 10             	add    esp,0x10
c000d90d:	83 ec 0c             	sub    esp,0xc
c000d910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d914:	e8 cf fc ff ff       	call   c000d5e8 <VgaText::clearScreen()>
c000d919:	83 c4 10             	add    esp,0x10
c000d91c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d920:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d92b:	05 9e 10 00 00       	add    eax,0x109e
c000d930:	83 ec 04             	sub    esp,0x4
c000d933:	68 96 00 00 00       	push   0x96
c000d938:	6a 00                	push   0x0
c000d93a:	50                   	push   eax
c000d93b:	e8 84 2d ff ff       	call   c00006c4 <memset>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d947:	05 34 11 00 00       	add    eax,0x1134
c000d94c:	83 ec 04             	sub    esp,0x4
c000d94f:	68 2c 01 00 00       	push   0x12c
c000d954:	6a 00                	push   0x0
c000d956:	50                   	push   eax
c000d957:	e8 68 2d ff ff       	call   c00006c4 <memset>
c000d95c:	83 c4 10             	add    esp,0x10
c000d95f:	90                   	nop
c000d960:	5b                   	pop    ebx
c000d961:	5e                   	pop    esi
c000d962:	5f                   	pop    edi
c000d963:	c3                   	ret    

c000d964 <VgaText::receiveKey(unsigned char)>:
c000d964:	55                   	push   ebp
c000d965:	57                   	push   edi
c000d966:	56                   	push   esi
c000d967:	53                   	push   ebx
c000d968:	83 ec 1c             	sub    esp,0x1c
c000d96b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d96f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d973:	84 db                	test   bl,bl
c000d975:	0f 84 c9 00 00 00    	je     c000da44 <VgaText::receiveKey(unsigned char)+0xe0>
c000d97b:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d981:	80 fb 08             	cmp    bl,0x8
c000d984:	75 2c                	jne    c000d9b2 <VgaText::receiveKey(unsigned char)+0x4e>
c000d986:	83 ec 0c             	sub    esp,0xc
c000d989:	57                   	push   edi
c000d98a:	e8 52 2d ff ff       	call   c00006e1 <strlen>
c000d98f:	83 c4 10             	add    esp,0x10
c000d992:	85 c0                	test   eax,eax
c000d994:	74 41                	je     c000d9d7 <VgaText::receiveKey(unsigned char)+0x73>
c000d996:	50                   	push   eax
c000d997:	50                   	push   eax
c000d998:	6a 08                	push   0x8
c000d99a:	56                   	push   esi
c000d99b:	e8 ac fc ff ff       	call   c000d64c <VgaText::putchar(char)>
c000d9a0:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d9a3:	e8 39 2d ff ff       	call   c00006e1 <strlen>
c000d9a8:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d9b0:	eb 22                	jmp    c000d9d4 <VgaText::receiveKey(unsigned char)+0x70>
c000d9b2:	52                   	push   edx
c000d9b3:	52                   	push   edx
c000d9b4:	0f be c3             	movsx  eax,bl
c000d9b7:	50                   	push   eax
c000d9b8:	56                   	push   esi
c000d9b9:	e8 8e fc ff ff       	call   c000d64c <VgaText::putchar(char)>
c000d9be:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d9c2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d9c7:	59                   	pop    ecx
c000d9c8:	5d                   	pop    ebp
c000d9c9:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d9cd:	50                   	push   eax
c000d9ce:	57                   	push   edi
c000d9cf:	e8 46 2e ff ff       	call   c000081a <strcat>
c000d9d4:	83 c4 10             	add    esp,0x10
c000d9d7:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000d9de:	75 05                	jne    c000d9e5 <VgaText::receiveKey(unsigned char)+0x81>
c000d9e0:	80 fb 0a             	cmp    bl,0xa
c000d9e3:	75 53                	jne    c000da38 <VgaText::receiveKey(unsigned char)+0xd4>
c000d9e5:	83 ec 0c             	sub    esp,0xc
c000d9e8:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000d9ee:	53                   	push   ebx
c000d9ef:	e8 ed 2c ff ff       	call   c00006e1 <strlen>
c000d9f4:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d9f7:	89 c5                	mov    ebp,eax
c000d9f9:	e8 e3 2c ff ff       	call   c00006e1 <strlen>
c000d9fe:	83 c4 10             	add    esp,0x10
c000da01:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000da05:	3d 2c 01 00 00       	cmp    eax,0x12c
c000da0a:	76 10                	jbe    c000da1c <VgaText::receiveKey(unsigned char)+0xb8>
c000da0c:	83 ec 0c             	sub    esp,0xc
c000da0f:	68 93 14 02 c0       	push   0xc0021493
c000da14:	e8 2b 80 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c000da19:	83 c4 10             	add    esp,0x10
c000da1c:	50                   	push   eax
c000da1d:	50                   	push   eax
c000da1e:	57                   	push   edi
c000da1f:	53                   	push   ebx
c000da20:	e8 f5 2d ff ff       	call   c000081a <strcat>
c000da25:	83 c4 0c             	add    esp,0xc
c000da28:	68 96 00 00 00       	push   0x96
c000da2d:	6a 00                	push   0x0
c000da2f:	57                   	push   edi
c000da30:	e8 8f 2c ff ff       	call   c00006c4 <memset>
c000da35:	83 c4 10             	add    esp,0x10
c000da38:	83 ec 0c             	sub    esp,0xc
c000da3b:	56                   	push   esi
c000da3c:	e8 d3 f9 ff ff       	call   c000d414 <VgaText::doUpdate()>
c000da41:	83 c4 10             	add    esp,0x10
c000da44:	83 c4 1c             	add    esp,0x1c
c000da47:	5b                   	pop    ebx
c000da48:	5e                   	pop    esi
c000da49:	5f                   	pop    edi
c000da4a:	5d                   	pop    ebp
c000da4b:	c3                   	ret    

c000da4c <VgaText::write(unsigned long long, void*, int*)>:
c000da4c:	55                   	push   ebp
c000da4d:	57                   	push   edi
c000da4e:	56                   	push   esi
c000da4f:	53                   	push   ebx
c000da50:	83 ec 0c             	sub    esp,0xc
c000da53:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000da57:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000da5b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000da5f:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000da66:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000da69:	39 eb                	cmp    ebx,ebp
c000da6b:	74 13                	je     c000da80 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000da6d:	50                   	push   eax
c000da6e:	43                   	inc    ebx
c000da6f:	50                   	push   eax
c000da70:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000da74:	50                   	push   eax
c000da75:	56                   	push   esi
c000da76:	e8 d1 fb ff ff       	call   c000d64c <VgaText::putchar(char)>
c000da7b:	83 c4 10             	add    esp,0x10
c000da7e:	eb e9                	jmp    c000da69 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000da80:	83 ec 0c             	sub    esp,0xc
c000da83:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000da8a:	56                   	push   esi
c000da8b:	e8 84 f9 ff ff       	call   c000d414 <VgaText::doUpdate()>
c000da90:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000da94:	89 38                	mov    DWORD PTR [eax],edi
c000da96:	83 c4 1c             	add    esp,0x1c
c000da99:	31 c0                	xor    eax,eax
c000da9b:	5b                   	pop    ebx
c000da9c:	5e                   	pop    esi
c000da9d:	5f                   	pop    edi
c000da9e:	5d                   	pop    ebp
c000da9f:	c3                   	ret    

c000daa0 <newTerminal(char*)>:
c000daa0:	83 ec 28             	sub    esp,0x28
c000daa3:	68 60 12 00 00       	push   0x1260
c000daa8:	e8 33 16 00 00       	call   c000f0e0 <operator new(unsigned long)>
c000daad:	5a                   	pop    edx
c000daae:	59                   	pop    ecx
c000daaf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dab3:	50                   	push   eax
c000dab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dab8:	e8 15 fd ff ff       	call   c000d7d2 <VgaText::VgaText(char const*)>
c000dabd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dac1:	83 c4 2c             	add    esp,0x2c
c000dac4:	c3                   	ret    
c000dac5:	90                   	nop

c000dac6 <TSS::TSS()>:
c000dac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000daca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dad1:	90                   	nop
c000dad2:	c3                   	ret    
c000dad3:	90                   	nop

c000dad4 <TSS::setESP(unsigned long)>:
c000dad4:	55                   	push   ebp
c000dad5:	89 e5                	mov    ebp,esp
c000dad7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dada:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dadd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000dae0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000dae3:	90                   	nop
c000dae4:	5d                   	pop    ebp
c000dae5:	c3                   	ret    

c000dae6 <TSS::flush()>:
c000dae6:	55                   	push   ebp
c000dae7:	89 e5                	mov    ebp,esp
c000dae9:	83 ec 10             	sub    esp,0x10
c000daec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000daef:	8b 00                	mov    eax,DWORD PTR [eax]
c000daf1:	83 c8 03             	or     eax,0x3
c000daf4:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000daf8:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000dafc:	66 89 d0             	mov    ax,dx
c000daff:	0f 00 d8             	ltr    ax
c000db02:	90                   	nop
c000db03:	c9                   	leave  
c000db04:	c3                   	ret    
c000db05:	90                   	nop

c000db06 <TSS::setup(unsigned long, unsigned long)>:
c000db06:	55                   	push   ebp
c000db07:	89 e5                	mov    ebp,esp
c000db09:	53                   	push   ebx
c000db0a:	83 ec 14             	sub    esp,0x14
c000db0d:	83 ec 0c             	sub    esp,0xc
c000db10:	6a 68                	push   0x68
c000db12:	e8 cc e4 ff ff       	call   c000bfe3 <malloc>
c000db17:	83 c4 10             	add    esp,0x10
c000db1a:	89 c2                	mov    edx,eax
c000db1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db1f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db25:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db28:	83 ec 04             	sub    esp,0x4
c000db2b:	6a 68                	push   0x68
c000db2d:	6a 00                	push   0x0
c000db2f:	50                   	push   eax
c000db30:	e8 8f 2b ff ff       	call   c00006c4 <memset>
c000db35:	83 c4 10             	add    esp,0x10
c000db38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db3b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db3e:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000db44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db47:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db4a:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000db50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db53:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db56:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000db59:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db62:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000db68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db6e:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000db74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db7a:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000db80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db83:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db86:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000db8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db8f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db92:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000db95:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000db98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db9b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db9e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000dba1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000dba4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dba7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbaa:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000dbb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbb4:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000dbb7:	e8 29 1c 01 00       	call   c001f7e5 <CPU::readCR3()>
c000dbbc:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000dbbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbc2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbc5:	83 ec 08             	sub    esp,0x8
c000dbc8:	50                   	push   eax
c000dbc9:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbcc:	50                   	push   eax
c000dbcd:	e8 e8 db ff ff       	call   c000b7ba <GDTEntry::setBase(unsigned int)>
c000dbd2:	83 c4 10             	add    esp,0x10
c000dbd5:	83 ec 08             	sub    esp,0x8
c000dbd8:	6a 68                	push   0x68
c000dbda:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbdd:	50                   	push   eax
c000dbde:	e8 f3 db ff ff       	call   c000b7d6 <GDTEntry::setLimit(unsigned int)>
c000dbe3:	83 c4 10             	add    esp,0x10
c000dbe6:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000dbea:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dbed:	83 e0 0f             	and    eax,0xf
c000dbf0:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dbf3:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dbf6:	83 c8 40             	or     eax,0x40
c000dbf9:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dbfc:	e8 d7 6c 00 00       	call   c00148d8 <thisCPU()>
c000dc01:	05 78 01 00 00       	add    eax,0x178
c000dc06:	83 ec 04             	sub    esp,0x4
c000dc09:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000dc0c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000dc0f:	50                   	push   eax
c000dc10:	e8 f5 db ff ff       	call   c000b80a <GDT::addEntry(GDTEntry)>
c000dc15:	83 c4 10             	add    esp,0x10
c000dc18:	89 c2                	mov    edx,eax
c000dc1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc1d:	89 10                	mov    DWORD PTR [eax],edx
c000dc1f:	e8 b4 6c 00 00       	call   c00148d8 <thisCPU()>
c000dc24:	05 78 01 00 00       	add    eax,0x178
c000dc29:	83 ec 0c             	sub    esp,0xc
c000dc2c:	50                   	push   eax
c000dc2d:	e8 1c dc ff ff       	call   c000b84e <GDT::flush()>
c000dc32:	83 c4 10             	add    esp,0x10
c000dc35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc38:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc3a:	83 ec 08             	sub    esp,0x8
c000dc3d:	50                   	push   eax
c000dc3e:	68 fc 14 02 c0       	push   0xc00214fc
c000dc43:	e8 cd 15 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000dc48:	83 c4 10             	add    esp,0x10
c000dc4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc4e:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc50:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000dc53:	c9                   	leave  
c000dc54:	c3                   	ret    
c000dc55:	90                   	nop

c000dc56 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000dc56:	55                   	push   ebp
c000dc57:	57                   	push   edi
c000dc58:	56                   	push   esi
c000dc59:	53                   	push   ebx
c000dc5a:	83 ec 0c             	sub    esp,0xc
c000dc5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc61:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dc65:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dc69:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000dc6d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc70:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dc74:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dc79:	75 08                	jne    c000dc83 <ReservedFilename::read(unsigned long long, void*, int*)+0x2d>
c000dc7b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dc81:	eb 5e                	jmp    c000dce1 <ReservedFilename::read(unsigned long long, void*, int*)+0x8b>
c000dc83:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dc88:	75 3d                	jne    c000dcc7 <ReservedFilename::read(unsigned long long, void*, int*)+0x71>
c000dc8a:	83 ec 0c             	sub    esp,0xc
c000dc8d:	68 1a 15 02 c0       	push   0xc002151a
c000dc92:	e8 7e 15 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000dc97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dc9c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dc9f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dca5:	8b 10                	mov    edx,DWORD PTR [eax]
c000dca7:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000dcab:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dcaf:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dcb3:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000dcb7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dcbb:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000dcbe:	83 c4 1c             	add    esp,0x1c
c000dcc1:	5b                   	pop    ebx
c000dcc2:	5e                   	pop    esi
c000dcc3:	5f                   	pop    edi
c000dcc4:	5d                   	pop    ebp
c000dcc5:	ff e0                	jmp    eax
c000dcc7:	89 c2                	mov    edx,eax
c000dcc9:	83 e2 fd             	and    edx,0xfffffffd
c000dccc:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c000dcd2:	74 a7                	je     c000dc7b <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000dcd4:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dcd9:	83 e0 ef             	and    eax,0xffffffef
c000dcdc:	83 f8 08             	cmp    eax,0x8
c000dcdf:	76 9a                	jbe    c000dc7b <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000dce1:	83 c4 0c             	add    esp,0xc
c000dce4:	31 c0                	xor    eax,eax
c000dce6:	5b                   	pop    ebx
c000dce7:	5e                   	pop    esi
c000dce8:	5f                   	pop    edi
c000dce9:	5d                   	pop    ebp
c000dcea:	c3                   	ret    
c000dceb:	90                   	nop

c000dcec <ReservedFilename::isAtty()>:
c000dcec:	83 ec 18             	sub    esp,0x18
c000dcef:	68 27 15 02 c0       	push   0xc0021527
c000dcf4:	e8 1c 15 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000dcf9:	83 c4 10             	add    esp,0x10
c000dcfc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dd00:	31 c0                	xor    eax,eax
c000dd02:	81 7a 04 01 ff ff 0f 	cmp    DWORD PTR [edx+0x4],0xfffff01
c000dd09:	75 12                	jne    c000dd1d <ReservedFilename::isAtty()+0x31>
c000dd0b:	83 ec 0c             	sub    esp,0xc
c000dd0e:	68 3d 15 02 c0       	push   0xc002153d
c000dd13:	e8 fd 14 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000dd18:	83 c4 10             	add    esp,0x10
c000dd1b:	b0 01                	mov    al,0x1
c000dd1d:	83 c4 0c             	add    esp,0xc
c000dd20:	c3                   	ret    
c000dd21:	90                   	nop

c000dd22 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000dd22:	55                   	push   ebp
c000dd23:	57                   	push   edi
c000dd24:	56                   	push   esi
c000dd25:	53                   	push   ebx
c000dd26:	83 ec 0c             	sub    esp,0xc
c000dd29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd2d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dd31:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dd35:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000dd39:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd3c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dd40:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dd45:	75 08                	jne    c000dd4f <ReservedFilename::write(unsigned long long, void*, int*)+0x2d>
c000dd47:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dd4d:	eb 63                	jmp    c000ddb2 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000dd4f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dd54:	75 3d                	jne    c000dd93 <ReservedFilename::write(unsigned long long, void*, int*)+0x71>
c000dd56:	83 ec 0c             	sub    esp,0xc
c000dd59:	68 50 15 02 c0       	push   0xc0021550
c000dd5e:	e8 b2 14 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000dd63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dd68:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dd6b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dd71:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd73:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000dd77:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dd7b:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dd7f:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000dd83:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dd87:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c000dd8a:	83 c4 1c             	add    esp,0x1c
c000dd8d:	5b                   	pop    ebx
c000dd8e:	5e                   	pop    esi
c000dd8f:	5f                   	pop    edi
c000dd90:	5d                   	pop    ebp
c000dd91:	ff e0                	jmp    eax
c000dd93:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000dd98:	75 04                	jne    c000dd9e <ReservedFilename::write(unsigned long long, void*, int*)+0x7c>
c000dd9a:	89 33                	mov    DWORD PTR [ebx],esi
c000dd9c:	eb 14                	jmp    c000ddb2 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000dd9e:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000dda3:	74 a2                	je     c000dd47 <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000dda5:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000ddaa:	83 e0 ef             	and    eax,0xffffffef
c000ddad:	83 f8 08             	cmp    eax,0x8
c000ddb0:	76 95                	jbe    c000dd47 <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000ddb2:	83 c4 0c             	add    esp,0xc
c000ddb5:	31 c0                	xor    eax,eax
c000ddb7:	5b                   	pop    ebx
c000ddb8:	5e                   	pop    esi
c000ddb9:	5f                   	pop    edi
c000ddba:	5d                   	pop    ebp
c000ddbb:	c3                   	ret    

c000ddbc <UnixFile::getFileDescriptor()>:
c000ddbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ddc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ddc3:	c3                   	ret    

c000ddc4 <UnixFile::UnixFile(int)>:
c000ddc4:	53                   	push   ebx
c000ddc5:	83 ec 18             	sub    esp,0x18
c000ddc8:	ba 6c 16 02 c0       	mov    edx,0xc002166c
c000ddcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddd1:	89 10                	mov    DWORD PTR [eax],edx
c000ddd3:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c000dddb:	0f 8f 4d 01 00 00    	jg     c000df2e <UnixFile::UnixFile(int)+0x16a>
c000dde1:	a1 40 3c 02 c0       	mov    eax,ds:0xc0023c40
c000dde6:	8d 50 01             	lea    edx,[eax+0x1]
c000dde9:	89 15 40 3c 02 c0    	mov    DWORD PTR ds:0xc0023c40,edx
c000ddef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ddf3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000ddf6:	83 ec 08             	sub    esp,0x8
c000ddf9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ddfd:	68 f8 48 02 c0       	push   0xc00248f8
c000de02:	e8 53 1a 01 00       	call   c001f85a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000de07:	83 c4 10             	add    esp,0x10
c000de0a:	a0 f4 48 02 c0       	mov    al,ds:0xc00248f4
c000de0f:	83 f0 01             	xor    eax,0x1
c000de12:	84 c0                	test   al,al
c000de14:	0f 84 15 01 00 00    	je     c000df2f <UnixFile::UnixFile(int)+0x16b>
c000de1a:	c6 05 f4 48 02 c0 01 	mov    BYTE PTR ds:0xc00248f4,0x1
c000de21:	83 ec 0c             	sub    esp,0xc
c000de24:	6a 0c                	push   0xc
c000de26:	e8 b5 12 00 00       	call   c000f0e0 <operator new(unsigned long)>
c000de2b:	83 c4 10             	add    esp,0x10
c000de2e:	89 c3                	mov    ebx,eax
c000de30:	83 ec 08             	sub    esp,0x8
c000de33:	68 03 ff ff 0f       	push   0xfffff03
c000de38:	53                   	push   ebx
c000de39:	e8 f6 00 00 00       	call   c000df34 <ReservedFilename::ReservedFilename(int)>
c000de3e:	83 c4 10             	add    esp,0x10
c000de41:	89 1d ec 48 02 c0    	mov    DWORD PTR ds:0xc00248ec,ebx
c000de47:	83 ec 0c             	sub    esp,0xc
c000de4a:	6a 0c                	push   0xc
c000de4c:	e8 8f 12 00 00       	call   c000f0e0 <operator new(unsigned long)>
c000de51:	83 c4 10             	add    esp,0x10
c000de54:	89 c3                	mov    ebx,eax
c000de56:	83 ec 08             	sub    esp,0x8
c000de59:	68 01 ff ff 0f       	push   0xfffff01
c000de5e:	53                   	push   ebx
c000de5f:	e8 d0 00 00 00       	call   c000df34 <ReservedFilename::ReservedFilename(int)>
c000de64:	83 c4 10             	add    esp,0x10
c000de67:	89 1d f0 48 02 c0    	mov    DWORD PTR ds:0xc00248f0,ebx
c000de6d:	83 ec 0c             	sub    esp,0xc
c000de70:	6a 0c                	push   0xc
c000de72:	e8 69 12 00 00       	call   c000f0e0 <operator new(unsigned long)>
c000de77:	83 c4 10             	add    esp,0x10
c000de7a:	89 c3                	mov    ebx,eax
c000de7c:	83 ec 08             	sub    esp,0x8
c000de7f:	68 00 ff ff 0f       	push   0xfffff00
c000de84:	53                   	push   ebx
c000de85:	e8 aa 00 00 00       	call   c000df34 <ReservedFilename::ReservedFilename(int)>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 1d e4 48 02 c0    	mov    DWORD PTR ds:0xc00248e4,ebx
c000de93:	83 ec 0c             	sub    esp,0xc
c000de96:	6a 0c                	push   0xc
c000de98:	e8 43 12 00 00       	call   c000f0e0 <operator new(unsigned long)>
c000de9d:	83 c4 10             	add    esp,0x10
c000dea0:	89 c3                	mov    ebx,eax
c000dea2:	83 ec 08             	sub    esp,0x8
c000dea5:	68 02 ff ff 0f       	push   0xfffff02
c000deaa:	53                   	push   ebx
c000deab:	e8 84 00 00 00       	call   c000df34 <ReservedFilename::ReservedFilename(int)>
c000deb0:	83 c4 10             	add    esp,0x10
c000deb3:	89 1d e8 48 02 c0    	mov    DWORD PTR ds:0xc00248e8,ebx
c000deb9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dec1:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000dec6:	7f 67                	jg     c000df2f <UnixFile::UnixFile(int)+0x16b>
c000dec8:	83 ec 0c             	sub    esp,0xc
c000decb:	6a 0c                	push   0xc
c000decd:	e8 0e 12 00 00       	call   c000f0e0 <operator new(unsigned long)>
c000ded2:	83 c4 10             	add    esp,0x10
c000ded5:	89 c3                	mov    ebx,eax
c000ded7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dedb:	05 10 ff ff 0f       	add    eax,0xfffff10
c000dee0:	83 ec 08             	sub    esp,0x8
c000dee3:	50                   	push   eax
c000dee4:	53                   	push   ebx
c000dee5:	e8 4a 00 00 00       	call   c000df34 <ReservedFilename::ReservedFilename(int)>
c000deea:	83 c4 10             	add    esp,0x10
c000deed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000def1:	89 1c 85 c0 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb740],ebx
c000def8:	83 ec 0c             	sub    esp,0xc
c000defb:	6a 0c                	push   0xc
c000defd:	e8 de 11 00 00       	call   c000f0e0 <operator new(unsigned long)>
c000df02:	83 c4 10             	add    esp,0x10
c000df05:	89 c3                	mov    ebx,eax
c000df07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df0b:	05 20 ff ff 0f       	add    eax,0xfffff20
c000df10:	83 ec 08             	sub    esp,0x8
c000df13:	50                   	push   eax
c000df14:	53                   	push   ebx
c000df15:	e8 1a 00 00 00       	call   c000df34 <ReservedFilename::ReservedFilename(int)>
c000df1a:	83 c4 10             	add    esp,0x10
c000df1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df21:	89 1c 85 80 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb780],ebx
c000df28:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000df2c:	eb 93                	jmp    c000dec1 <UnixFile::UnixFile(int)+0xfd>
c000df2e:	90                   	nop
c000df2f:	83 c4 18             	add    esp,0x18
c000df32:	5b                   	pop    ebx
c000df33:	c3                   	ret    

c000df34 <ReservedFilename::ReservedFilename(int)>:
c000df34:	83 ec 0c             	sub    esp,0xc
c000df37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df3b:	83 ec 08             	sub    esp,0x8
c000df3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df42:	50                   	push   eax
c000df43:	e8 7c fe ff ff       	call   c000ddc4 <UnixFile::UnixFile(int)>
c000df48:	83 c4 10             	add    esp,0x10
c000df4b:	ba 88 16 02 c0       	mov    edx,0xc0021688
c000df50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df54:	89 10                	mov    DWORD PTR [eax],edx
c000df56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df5a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000df5e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000df61:	90                   	nop
c000df62:	83 c4 0c             	add    esp,0xc
c000df65:	c3                   	ret    

c000df66 <UnixFile::~UnixFile()>:
c000df66:	83 ec 1c             	sub    esp,0x1c
c000df69:	ba 6c 16 02 c0       	mov    edx,0xc002166c
c000df6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df72:	89 10                	mov    DWORD PTR [eax],edx
c000df74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df7b:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000df80:	7f 73                	jg     c000dff5 <UnixFile::~UnixFile()+0x8f>
c000df82:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000df8a:	83 ec 0c             	sub    esp,0xc
c000df8d:	68 f8 48 02 c0       	push   0xc00248f8
c000df92:	e8 97 19 01 00       	call   c001f92e <LinkedList<UnixFile>::getFirstElement()>
c000df97:	83 c4 10             	add    esp,0x10
c000df9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df9e:	83 ec 0c             	sub    esp,0xc
c000dfa1:	68 f8 48 02 c0       	push   0xc00248f8
c000dfa6:	e8 8b 19 01 00       	call   c001f936 <LinkedList<UnixFile>::removeFirst()>
c000dfab:	83 c4 10             	add    esp,0x10
c000dfae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dfb2:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000dfb6:	74 40                	je     c000dff8 <UnixFile::~UnixFile()+0x92>
c000dfb8:	83 ec 08             	sub    esp,0x8
c000dfbb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dfbf:	68 f8 48 02 c0       	push   0xc00248f8
c000dfc4:	e8 91 18 01 00       	call   c001f85a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000dfc9:	83 c4 10             	add    esp,0x10
c000dfcc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dfd0:	8d 50 01             	lea    edx,[eax+0x1]
c000dfd3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfd7:	3d 88 13 00 00       	cmp    eax,0x1388
c000dfdc:	0f 94 c0             	sete   al
c000dfdf:	84 c0                	test   al,al
c000dfe1:	74 a7                	je     c000df8a <UnixFile::~UnixFile()+0x24>
c000dfe3:	83 ec 0c             	sub    esp,0xc
c000dfe6:	68 44 16 02 c0       	push   0xc0021644
c000dfeb:	e8 54 7a 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c000dff0:	83 c4 10             	add    esp,0x10
c000dff3:	eb 95                	jmp    c000df8a <UnixFile::~UnixFile()+0x24>
c000dff5:	90                   	nop
c000dff6:	eb 01                	jmp    c000dff9 <UnixFile::~UnixFile()+0x93>
c000dff8:	90                   	nop
c000dff9:	90                   	nop
c000dffa:	83 c4 1c             	add    esp,0x1c
c000dffd:	c3                   	ret    

c000dffe <UnixFile::~UnixFile()>:
c000dffe:	83 ec 0c             	sub    esp,0xc
c000e001:	83 ec 0c             	sub    esp,0xc
c000e004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e008:	e8 59 ff ff ff       	call   c000df66 <UnixFile::~UnixFile()>
c000e00d:	83 c4 10             	add    esp,0x10
c000e010:	83 ec 08             	sub    esp,0x8
c000e013:	6a 0c                	push   0xc
c000e015:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e019:	e8 d1 10 00 00       	call   c000f0ef <operator delete(void*, unsigned long)>
c000e01e:	83 c4 10             	add    esp,0x10
c000e021:	83 c4 0c             	add    esp,0xc
c000e024:	c3                   	ret    
c000e025:	90                   	nop

c000e026 <ReservedFilename::~ReservedFilename()>:
c000e026:	83 ec 0c             	sub    esp,0xc
c000e029:	ba 88 16 02 c0       	mov    edx,0xc0021688
c000e02e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e032:	89 10                	mov    DWORD PTR [eax],edx
c000e034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e038:	83 ec 0c             	sub    esp,0xc
c000e03b:	50                   	push   eax
c000e03c:	e8 25 ff ff ff       	call   c000df66 <UnixFile::~UnixFile()>
c000e041:	83 c4 10             	add    esp,0x10
c000e044:	90                   	nop
c000e045:	83 c4 0c             	add    esp,0xc
c000e048:	c3                   	ret    
c000e049:	90                   	nop

c000e04a <ReservedFilename::~ReservedFilename()>:
c000e04a:	83 ec 0c             	sub    esp,0xc
c000e04d:	83 ec 0c             	sub    esp,0xc
c000e050:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e054:	e8 cd ff ff ff       	call   c000e026 <ReservedFilename::~ReservedFilename()>
c000e059:	83 c4 10             	add    esp,0x10
c000e05c:	83 ec 08             	sub    esp,0x8
c000e05f:	6a 0c                	push   0xc
c000e061:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e065:	e8 85 10 00 00       	call   c000f0ef <operator delete(void*, unsigned long)>
c000e06a:	83 c4 10             	add    esp,0x10
c000e06d:	83 c4 0c             	add    esp,0xc
c000e070:	c3                   	ret    

c000e071 <getFromFileDescriptor(int)>:
c000e071:	53                   	push   ebx
c000e072:	83 ec 08             	sub    esp,0x8
c000e075:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e079:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000e07f:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000e085:	7f 33                	jg     c000e0ba <getFromFileDescriptor(int)+0x49>
c000e087:	83 ec 0c             	sub    esp,0xc
c000e08a:	68 f8 48 02 c0       	push   0xc00248f8
c000e08f:	e8 9a 18 01 00       	call   c001f92e <LinkedList<UnixFile>::getFirstElement()>
c000e094:	83 c4 10             	add    esp,0x10
c000e097:	85 c0                	test   eax,eax
c000e099:	75 07                	jne    c000e0a2 <getFromFileDescriptor(int)+0x31>
c000e09b:	31 c0                	xor    eax,eax
c000e09d:	e9 98 00 00 00       	jmp    c000e13a <getFromFileDescriptor(int)+0xc9>
c000e0a2:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000e0a5:	0f 84 8f 00 00 00    	je     c000e13a <getFromFileDescriptor(int)+0xc9>
c000e0ab:	52                   	push   edx
c000e0ac:	52                   	push   edx
c000e0ad:	50                   	push   eax
c000e0ae:	68 f8 48 02 c0       	push   0xc00248f8
c000e0b3:	e8 20 19 01 00       	call   c001f9d8 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000e0b8:	eb da                	jmp    c000e094 <getFromFileDescriptor(int)+0x23>
c000e0ba:	83 ec 0c             	sub    esp,0xc
c000e0bd:	68 5d 15 02 c0       	push   0xc002155d
c000e0c2:	e8 4e 11 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000e0c7:	83 c4 10             	add    esp,0x10
c000e0ca:	a1 ec 48 02 c0       	mov    eax,ds:0xc00248ec
c000e0cf:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000e0d5:	74 63                	je     c000e13a <getFromFileDescriptor(int)+0xc9>
c000e0d7:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000e0dd:	75 17                	jne    c000e0f6 <getFromFileDescriptor(int)+0x85>
c000e0df:	83 ec 0c             	sub    esp,0xc
c000e0e2:	68 84 15 02 c0       	push   0xc0021584
c000e0e7:	e8 29 11 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000e0ec:	a1 f0 48 02 c0       	mov    eax,ds:0xc00248f0
c000e0f1:	83 c4 10             	add    esp,0x10
c000e0f4:	eb 44                	jmp    c000e13a <getFromFileDescriptor(int)+0xc9>
c000e0f6:	a1 e8 48 02 c0       	mov    eax,ds:0xc00248e8
c000e0fb:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000e101:	74 37                	je     c000e13a <getFromFileDescriptor(int)+0xc9>
c000e103:	a1 e4 48 02 c0       	mov    eax,ds:0xc00248e4
c000e108:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000e10e:	74 2a                	je     c000e13a <getFromFileDescriptor(int)+0xc9>
c000e110:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000e116:	83 f8 08             	cmp    eax,0x8
c000e119:	77 09                	ja     c000e124 <getFromFileDescriptor(int)+0xb3>
c000e11b:	8b 04 85 c0 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb740]
c000e122:	eb 16                	jmp    c000e13a <getFromFileDescriptor(int)+0xc9>
c000e124:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000e12a:	83 fb 08             	cmp    ebx,0x8
c000e12d:	0f 87 68 ff ff ff    	ja     c000e09b <getFromFileDescriptor(int)+0x2a>
c000e133:	8b 04 9d 80 48 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb780]
c000e13a:	83 c4 08             	add    esp,0x8
c000e13d:	5b                   	pop    ebx
c000e13e:	c3                   	ret    

c000e13f <__static_initialization_and_destruction_0(int, int)>:
c000e13f:	83 ec 0c             	sub    esp,0xc
c000e142:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e147:	75 34                	jne    c000e17d <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e149:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000e151:	75 2a                	jne    c000e17d <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e153:	83 ec 0c             	sub    esp,0xc
c000e156:	68 f8 48 02 c0       	push   0xc00248f8
c000e15b:	e8 a2 16 01 00       	call   c001f802 <LinkedList<UnixFile>::LinkedList()>
c000e160:	83 c4 10             	add    esp,0x10
c000e163:	83 ec 04             	sub    esp,0x4
c000e166:	68 bc 3b 02 c0       	push   0xc0023bbc
c000e16b:	68 f8 48 02 c0       	push   0xc00248f8
c000e170:	68 00 f8 01 c0       	push   0xc001f800
c000e175:	e8 f1 0e 00 00       	call   c000f06b <__cxa_atexit>
c000e17a:	83 c4 10             	add    esp,0x10
c000e17d:	90                   	nop
c000e17e:	83 c4 0c             	add    esp,0xc
c000e181:	c3                   	ret    

c000e182 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000e182:	83 ec 0c             	sub    esp,0xc
c000e185:	83 ec 08             	sub    esp,0x8
c000e188:	68 ff ff 00 00       	push   0xffff
c000e18d:	6a 01                	push   0x1
c000e18f:	e8 ab ff ff ff       	call   c000e13f <__static_initialization_and_destruction_0(int, int)>
c000e194:	83 c4 10             	add    esp,0x10
c000e197:	83 c4 0c             	add    esp,0xc
c000e19a:	c3                   	ret    
c000e19b:	90                   	nop

c000e19c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000e19c:	53                   	push   ebx
c000e19d:	8b 15 48 3c 02 c0    	mov    edx,DWORD PTR ds:0xc0023c48
c000e1a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e1a7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e1ab:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000e1b1:	89 c8                	mov    eax,ecx
c000e1b3:	d1 e8                	shr    eax,1
c000e1b5:	01 d0                	add    eax,edx
c000e1b7:	83 e1 01             	and    ecx,0x1
c000e1ba:	8a 10                	mov    dl,BYTE PTR [eax]
c000e1bc:	75 09                	jne    c000e1c7 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c000e1be:	83 e2 f0             	and    edx,0xfffffff0
c000e1c1:	09 da                	or     edx,ebx
c000e1c3:	88 10                	mov    BYTE PTR [eax],dl
c000e1c5:	5b                   	pop    ebx
c000e1c6:	c3                   	ret    
c000e1c7:	c1 e3 04             	shl    ebx,0x4
c000e1ca:	83 e2 0f             	and    edx,0xf
c000e1cd:	09 da                	or     edx,ebx
c000e1cf:	88 10                	mov    BYTE PTR [eax],dl
c000e1d1:	5b                   	pop    ebx
c000e1d2:	c3                   	ret    

c000e1d3 <Virt::getPageState(unsigned long)>:
c000e1d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1d7:	8b 0d 48 3c 02 c0    	mov    ecx,DWORD PTR ds:0xc0023c48
c000e1dd:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000e1e3:	89 d0                	mov    eax,edx
c000e1e5:	d1 e8                	shr    eax,1
c000e1e7:	8a 0c 01             	mov    cl,BYTE PTR [ecx+eax*1]
c000e1ea:	88 c8                	mov    al,cl
c000e1ec:	c0 e8 04             	shr    al,0x4
c000e1ef:	83 e2 01             	and    edx,0x1
c000e1f2:	75 05                	jne    c000e1f9 <Virt::getPageState(unsigned long)+0x26>
c000e1f4:	88 c8                	mov    al,cl
c000e1f6:	83 e0 0f             	and    eax,0xf
c000e1f9:	c3                   	ret    

c000e1fa <Virt::allocateKernelVirtualPages(int)>:
c000e1fa:	55                   	push   ebp
c000e1fb:	31 ed                	xor    ebp,ebp
c000e1fd:	57                   	push   edi
c000e1fe:	56                   	push   esi
c000e1ff:	53                   	push   ebx
c000e200:	31 db                	xor    ebx,ebx
c000e202:	83 ec 1c             	sub    esp,0x1c
c000e205:	8b 3d 44 3c 02 c0    	mov    edi,DWORD PTR ds:0xc0023c44
c000e20b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e20f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e214:	57                   	push   edi
c000e215:	e8 b9 ff ff ff       	call   c000e1d3 <Virt::getPageState(unsigned long)>
c000e21a:	5a                   	pop    edx
c000e21b:	84 c0                	test   al,al
c000e21d:	75 3a                	jne    c000e259 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000e21f:	85 db                	test   ebx,ebx
c000e221:	75 02                	jne    c000e225 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000e223:	89 fd                	mov    ebp,edi
c000e225:	43                   	inc    ebx
c000e226:	39 f3                	cmp    ebx,esi
c000e228:	74 5a                	je     c000e284 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000e22a:	47                   	inc    edi
c000e22b:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e231:	76 31                	jbe    c000e264 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000e233:	c7 05 44 3c 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023c44,0xc8000
c000e23d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e242:	75 28                	jne    c000e26c <Virt::allocateKernelVirtualPages(int)+0x72>
c000e244:	bf 00 80 0c 00       	mov    edi,0xc8000
c000e249:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e24e:	57                   	push   edi
c000e24f:	e8 7f ff ff ff       	call   c000e1d3 <Virt::getPageState(unsigned long)>
c000e254:	5a                   	pop    edx
c000e255:	84 c0                	test   al,al
c000e257:	74 c6                	je     c000e21f <Virt::allocateKernelVirtualPages(int)+0x25>
c000e259:	47                   	inc    edi
c000e25a:	31 db                	xor    ebx,ebx
c000e25c:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e262:	77 cf                	ja     c000e233 <Virt::allocateKernelVirtualPages(int)+0x39>
c000e264:	89 3d 44 3c 02 c0    	mov    DWORD PTR ds:0xc0023c44,edi
c000e26a:	eb a8                	jmp    c000e214 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e26c:	83 ec 0c             	sub    esp,0xc
c000e26f:	68 9c 16 02 c0       	push   0xc002169c
c000e274:	e8 cb 77 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c000e279:	8b 3d 44 3c 02 c0    	mov    edi,DWORD PTR ds:0xc0023c44
c000e27f:	83 c4 10             	add    esp,0x10
c000e282:	eb 90                	jmp    c000e214 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e284:	89 2d 44 3c 02 c0    	mov    DWORD PTR ds:0xc0023c44,ebp
c000e28a:	4b                   	dec    ebx
c000e28b:	74 5f                	je     c000e2ec <Virt::allocateKernelVirtualPages(int)+0xf2>
c000e28d:	85 f6                	test   esi,esi
c000e28f:	74 3d                	je     c000e2ce <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e291:	89 e8                	mov    eax,ebp
c000e293:	31 db                	xor    ebx,ebx
c000e295:	8d 7e ff             	lea    edi,[esi-0x1]
c000e298:	eb 14                	jmp    c000e2ae <Virt::allocateKernelVirtualPages(int)+0xb4>
c000e29a:	6a 01                	push   0x1
c000e29c:	43                   	inc    ebx
c000e29d:	50                   	push   eax
c000e29e:	e8 f9 fe ff ff       	call   c000e19c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2a3:	58                   	pop    eax
c000e2a4:	39 f3                	cmp    ebx,esi
c000e2a6:	5a                   	pop    edx
c000e2a7:	74 25                	je     c000e2ce <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e2a9:	a1 44 3c 02 c0       	mov    eax,ds:0xc0023c44
c000e2ae:	8d 50 01             	lea    edx,[eax+0x1]
c000e2b1:	85 db                	test   ebx,ebx
c000e2b3:	89 15 44 3c 02 c0    	mov    DWORD PTR ds:0xc0023c44,edx
c000e2b9:	74 20                	je     c000e2db <Virt::allocateKernelVirtualPages(int)+0xe1>
c000e2bb:	39 df                	cmp    edi,ebx
c000e2bd:	75 db                	jne    c000e29a <Virt::allocateKernelVirtualPages(int)+0xa0>
c000e2bf:	6a 03                	push   0x3
c000e2c1:	43                   	inc    ebx
c000e2c2:	50                   	push   eax
c000e2c3:	e8 d4 fe ff ff       	call   c000e19c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2c8:	59                   	pop    ecx
c000e2c9:	39 f3                	cmp    ebx,esi
c000e2cb:	58                   	pop    eax
c000e2cc:	75 db                	jne    c000e2a9 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e2ce:	83 c4 1c             	add    esp,0x1c
c000e2d1:	89 e8                	mov    eax,ebp
c000e2d3:	c1 e0 0c             	shl    eax,0xc
c000e2d6:	5b                   	pop    ebx
c000e2d7:	5e                   	pop    esi
c000e2d8:	5f                   	pop    edi
c000e2d9:	5d                   	pop    ebp
c000e2da:	c3                   	ret    
c000e2db:	6a 02                	push   0x2
c000e2dd:	bb 01 00 00 00       	mov    ebx,0x1
c000e2e2:	50                   	push   eax
c000e2e3:	e8 b4 fe ff ff       	call   c000e19c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2e8:	58                   	pop    eax
c000e2e9:	5a                   	pop    edx
c000e2ea:	eb bd                	jmp    c000e2a9 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e2ec:	6a 04                	push   0x4
c000e2ee:	8d 45 01             	lea    eax,[ebp+0x1]
c000e2f1:	55                   	push   ebp
c000e2f2:	a3 44 3c 02 c0       	mov    ds:0xc0023c44,eax
c000e2f7:	e8 a0 fe ff ff       	call   c000e19c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2fc:	59                   	pop    ecx
c000e2fd:	5b                   	pop    ebx
c000e2fe:	89 e8                	mov    eax,ebp
c000e300:	c1 e0 0c             	shl    eax,0xc
c000e303:	83 c4 1c             	add    esp,0x1c
c000e306:	5b                   	pop    ebx
c000e307:	5e                   	pop    esi
c000e308:	5f                   	pop    edi
c000e309:	5d                   	pop    ebp
c000e30a:	c3                   	ret    

c000e30b <Virt::virtualMemorySetup()>:
c000e30b:	53                   	push   ebx
c000e30c:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e311:	83 ec 08             	sub    esp,0x8
c000e314:	6a 0f                	push   0xf
c000e316:	53                   	push   ebx
c000e317:	43                   	inc    ebx
c000e318:	e8 7f fe ff ff       	call   c000e19c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e31d:	59                   	pop    ecx
c000e31e:	58                   	pop    eax
c000e31f:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e325:	75 ed                	jne    c000e314 <Virt::virtualMemorySetup()+0x9>
c000e327:	50                   	push   eax
c000e328:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e32d:	50                   	push   eax
c000e32e:	68 00 00 00 c8       	push   0xc8000000
c000e333:	68 23 18 02 c0       	push   0xc0021823
c000e338:	e8 d8 0e 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000e33d:	58                   	pop    eax
c000e33e:	5a                   	pop    edx
c000e33f:	68 00 f0 ff ef       	push   0xeffff000
c000e344:	68 37 18 02 c0       	push   0xc0021837
c000e349:	e8 c7 0e 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000e34e:	83 c4 10             	add    esp,0x10
c000e351:	50                   	push   eax
c000e352:	50                   	push   eax
c000e353:	6a 00                	push   0x0
c000e355:	53                   	push   ebx
c000e356:	43                   	inc    ebx
c000e357:	e8 40 fe ff ff       	call   c000e19c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e35c:	83 c4 10             	add    esp,0x10
c000e35f:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e365:	75 ea                	jne    c000e351 <Virt::virtualMemorySetup()+0x46>
c000e367:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000e36c:	51                   	push   ecx
c000e36d:	51                   	push   ecx
c000e36e:	6a 0f                	push   0xf
c000e370:	53                   	push   ebx
c000e371:	43                   	inc    ebx
c000e372:	e8 25 fe ff ff       	call   c000e19c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e377:	83 c4 10             	add    esp,0x10
c000e37a:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000e380:	75 ea                	jne    c000e36c <Virt::virtualMemorySetup()+0x61>
c000e382:	83 c4 08             	add    esp,0x8
c000e385:	5b                   	pop    ebx
c000e386:	c3                   	ret    

c000e387 <Virt::getAKernelVAS()>:
c000e387:	a1 04 49 02 c0       	mov    eax,ds:0xc0024904
c000e38c:	c3                   	ret    

c000e38d <Virt::setupPageSwapping(int)>:
c000e38d:	57                   	push   edi
c000e38e:	56                   	push   esi
c000e38f:	53                   	push   ebx
c000e390:	83 ec 1c             	sub    esp,0x1c
c000e393:	68 14 01 00 00       	push   0x114
c000e398:	e8 43 0d 00 00       	call   c000f0e0 <operator new(unsigned long)>
c000e39d:	83 c4 0c             	add    esp,0xc
c000e3a0:	8b 3d f4 5b 02 c0    	mov    edi,DWORD PTR ds:0xc0025bf4
c000e3a6:	89 c6                	mov    esi,eax
c000e3a8:	57                   	push   edi
c000e3a9:	68 4b 18 02 c0       	push   0xc002184b
c000e3ae:	50                   	push   eax
c000e3af:	e8 98 13 00 00       	call   c000f74c <File::File(char const*, Process*)>
c000e3b4:	89 34 24             	mov    DWORD PTR [esp],esi
c000e3b7:	e8 6c 15 00 00       	call   c000f928 <File::unlink()>
c000e3bc:	58                   	pop    eax
c000e3bd:	5a                   	pop    edx
c000e3be:	6a 12                	push   0x12
c000e3c0:	56                   	push   esi
c000e3c1:	e8 ea 13 00 00       	call   c000f7b0 <File::open(FileOpenMode)>
c000e3c6:	83 c4 10             	add    esp,0x10
c000e3c9:	85 c0                	test   eax,eax
c000e3cb:	0f 85 b6 00 00 00    	jne    c000e487 <Virt::setupPageSwapping(int)+0xfa>
c000e3d1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e3d5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e3dd:	c1 e3 08             	shl    ebx,0x8
c000e3e0:	83 ec 0c             	sub    esp,0xc
c000e3e3:	c1 fb 04             	sar    ebx,0x4
c000e3e6:	68 00 00 01 00       	push   0x10000
c000e3eb:	e8 f3 db ff ff       	call   c000bfe3 <malloc>
c000e3f0:	83 c4 0c             	add    esp,0xc
c000e3f3:	89 c7                	mov    edi,eax
c000e3f5:	68 00 00 01 00       	push   0x10000
c000e3fa:	6a 00                	push   0x0
c000e3fc:	50                   	push   eax
c000e3fd:	e8 c2 22 ff ff       	call   c00006c4 <memset>
c000e402:	83 c4 10             	add    esp,0x10
c000e405:	4b                   	dec    ebx
c000e406:	83 fb ff             	cmp    ebx,0xffffffff
c000e409:	74 4a                	je     c000e455 <Virt::setupPageSwapping(int)+0xc8>
c000e40b:	83 ec 0c             	sub    esp,0xc
c000e40e:	8b 06                	mov    eax,DWORD PTR [esi]
c000e410:	8d 54 24 18          	lea    edx,[esp+0x18]
c000e414:	52                   	push   edx
c000e415:	57                   	push   edi
c000e416:	6a 00                	push   0x0
c000e418:	68 00 00 01 00       	push   0x10000
c000e41d:	56                   	push   esi
c000e41e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e421:	83 c4 20             	add    esp,0x20
c000e424:	85 c0                	test   eax,eax
c000e426:	75 4d                	jne    c000e475 <Virt::setupPageSwapping(int)+0xe8>
c000e428:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e42c:	3d 00 00 01 00       	cmp    eax,0x10000
c000e431:	74 d2                	je     c000e405 <Virt::setupPageSwapping(int)+0x78>
c000e433:	52                   	push   edx
c000e434:	4b                   	dec    ebx
c000e435:	52                   	push   edx
c000e436:	50                   	push   eax
c000e437:	68 9e 18 02 c0       	push   0xc002189e
c000e43c:	e8 d4 0d 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000e441:	c7 04 24 a7 18 02 c0 	mov    DWORD PTR [esp],0xc00218a7
c000e448:	e8 f7 75 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c000e44d:	83 c4 10             	add    esp,0x10
c000e450:	83 fb ff             	cmp    ebx,0xffffffff
c000e453:	75 b6                	jne    c000e40b <Virt::setupPageSwapping(int)+0x7e>
c000e455:	83 ec 0c             	sub    esp,0xc
c000e458:	56                   	push   esi
c000e459:	e8 b0 13 00 00       	call   c000f80e <File::close()>
c000e45e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e461:	e8 9d db ff ff       	call   c000c003 <rfree>
c000e466:	8b 06                	mov    eax,DWORD PTR [esi]
c000e468:	89 34 24             	mov    DWORD PTR [esp],esi
c000e46b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e46e:	83 c4 20             	add    esp,0x20
c000e471:	5b                   	pop    ebx
c000e472:	5e                   	pop    esi
c000e473:	5f                   	pop    edi
c000e474:	c3                   	ret    
c000e475:	51                   	push   ecx
c000e476:	51                   	push   ecx
c000e477:	50                   	push   eax
c000e478:	68 86 18 02 c0       	push   0xc0021886
c000e47d:	e8 93 0d 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000e482:	83 c4 10             	add    esp,0x10
c000e485:	eb a1                	jmp    c000e428 <Virt::setupPageSwapping(int)+0x9b>
c000e487:	53                   	push   ebx
c000e488:	53                   	push   ebx
c000e489:	50                   	push   eax
c000e48a:	68 62 18 02 c0       	push   0xc0021862
c000e48f:	e8 81 0d 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000e494:	c7 04 24 6b 18 02 c0 	mov    DWORD PTR [esp],0xc002186b
c000e49b:	e8 a4 75 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c000e4a0:	83 c4 10             	add    esp,0x10
c000e4a3:	e9 29 ff ff ff       	jmp    c000e3d1 <Virt::setupPageSwapping(int)+0x44>

c000e4a8 <VAS::VAS()>:
c000e4a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4b7:	a3 04 49 02 c0       	mov    ds:0xc0024904,eax
c000e4bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4c0:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000e4c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4c8:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e4cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4cf:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e4d6:	90                   	nop
c000e4d7:	c3                   	ret    

c000e4d8 <VAS::VAS(VAS*)>:
c000e4d8:	83 ec 0c             	sub    esp,0xc
c000e4db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4df:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4e6:	83 ec 0c             	sub    esp,0xc
c000e4e9:	68 bc 16 02 c0       	push   0xc00216bc
c000e4ee:	e8 51 75 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c000e4f3:	83 c4 10             	add    esp,0x10
c000e4f6:	90                   	nop
c000e4f7:	83 c4 0c             	add    esp,0xc
c000e4fa:	c3                   	ret    
c000e4fb:	90                   	nop

c000e4fc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e4fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e500:	89 c2                	mov    edx,eax
c000e502:	c1 ea 16             	shr    edx,0x16
c000e505:	c1 e8 0a             	shr    eax,0xa
c000e508:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e50d:	19 c9                	sbb    ecx,ecx
c000e50f:	25 fc 0f 00 00       	and    eax,0xffc
c000e514:	c1 e2 0c             	shl    edx,0xc
c000e517:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e51d:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e524:	01 d0                	add    eax,edx
c000e526:	c3                   	ret    
c000e527:	90                   	nop

c000e528 <VAS::getPageTableEntry(unsigned long)>:
c000e528:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e52c:	89 ca                	mov    edx,ecx
c000e52e:	c1 ea 16             	shr    edx,0x16
c000e531:	c1 e9 0a             	shr    ecx,0xa
c000e534:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e53a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e540:	c1 e0 0c             	shl    eax,0xc
c000e543:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e546:	c3                   	ret    

c000e547 <Virt::freeKernelVirtualPages(unsigned long)>:
c000e547:	57                   	push   edi
c000e548:	56                   	push   esi
c000e549:	be 01 00 00 00       	mov    esi,0x1
c000e54e:	53                   	push   ebx
c000e54f:	83 ec 10             	sub    esp,0x10
c000e552:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e556:	c1 eb 0c             	shr    ebx,0xc
c000e559:	eb 3e                	jmp    c000e599 <Virt::freeKernelVirtualPages(unsigned long)+0x52>
c000e55b:	e8 27 fe ff ff       	call   c000e387 <Virt::getAKernelVAS()>
c000e560:	51                   	push   ecx
c000e561:	51                   	push   ecx
c000e562:	57                   	push   edi
c000e563:	50                   	push   eax
c000e564:	e8 bf ff ff ff       	call   c000e528 <VAS::getPageTableEntry(unsigned long)>
c000e569:	83 c4 10             	add    esp,0x10
c000e56c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e570:	8b 00                	mov    eax,DWORD PTR [eax]
c000e572:	f6 c4 04             	test   ah,0x4
c000e575:	75 5f                	jne    c000e5d6 <Virt::freeKernelVirtualPages(unsigned long)+0x8f>
c000e577:	80 fa 04             	cmp    dl,0x4
c000e57a:	74 78                	je     c000e5f4 <Virt::freeKernelVirtualPages(unsigned long)+0xad>
c000e57c:	80 fa 02             	cmp    dl,0x2
c000e57f:	0f 84 88 00 00 00    	je     c000e60d <Virt::freeKernelVirtualPages(unsigned long)+0xc6>
c000e585:	80 fa 03             	cmp    dl,0x3
c000e588:	0f 84 ac 00 00 00    	je     c000e63a <Virt::freeKernelVirtualPages(unsigned long)+0xf3>
c000e58e:	fe ca                	dec    dl
c000e590:	0f 84 92 00 00 00    	je     c000e628 <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e596:	43                   	inc    ebx
c000e597:	31 f6                	xor    esi,esi
c000e599:	53                   	push   ebx
c000e59a:	e8 34 fc ff ff       	call   c000e1d3 <Virt::getPageState(unsigned long)>
c000e59f:	5f                   	pop    edi
c000e5a0:	89 df                	mov    edi,ebx
c000e5a2:	c1 e7 0c             	shl    edi,0xc
c000e5a5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	75 ae                	jne    c000e55b <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e5ad:	83 ec 0c             	sub    esp,0xc
c000e5b0:	68 ad 18 02 c0       	push   0xc00218ad
c000e5b5:	e8 8a 74 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c000e5ba:	e8 c8 fd ff ff       	call   c000e387 <Virt::getAKernelVAS()>
c000e5bf:	5a                   	pop    edx
c000e5c0:	59                   	pop    ecx
c000e5c1:	57                   	push   edi
c000e5c2:	50                   	push   eax
c000e5c3:	e8 60 ff ff ff       	call   c000e528 <VAS::getPageTableEntry(unsigned long)>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e5cf:	8b 00                	mov    eax,DWORD PTR [eax]
c000e5d1:	f6 c4 04             	test   ah,0x4
c000e5d4:	74 c0                	je     c000e596 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e5d6:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e5da:	83 ec 0c             	sub    esp,0xc
c000e5dd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e5e2:	50                   	push   eax
c000e5e3:	e8 44 df ff ff       	call   c000c52c <Phys::freePage(unsigned long)>
c000e5e8:	83 c4 10             	add    esp,0x10
c000e5eb:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e5ef:	80 fa 04             	cmp    dl,0x4
c000e5f2:	75 88                	jne    c000e57c <Virt::freeKernelVirtualPages(unsigned long)+0x35>
c000e5f4:	89 f0                	mov    eax,esi
c000e5f6:	84 c0                	test   al,al
c000e5f8:	75 46                	jne    c000e640 <Virt::freeKernelVirtualPages(unsigned long)+0xf9>
c000e5fa:	c7 44 24 20 e0 16 02 c0 	mov    DWORD PTR [esp+0x20],0xc00216e0
c000e602:	83 c4 10             	add    esp,0x10
c000e605:	5b                   	pop    ebx
c000e606:	5e                   	pop    esi
c000e607:	5f                   	pop    edi
c000e608:	e9 37 74 00 00       	jmp    c0015a44 <Krnl::panic(char const*)>
c000e60d:	89 f0                	mov    eax,esi
c000e60f:	84 c0                	test   al,al
c000e611:	75 15                	jne    c000e628 <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e613:	83 ec 0c             	sub    esp,0xc
c000e616:	68 c9 18 02 c0       	push   0xc00218c9
c000e61b:	e8 24 74 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c000e620:	83 c4 10             	add    esp,0x10
c000e623:	e9 6e ff ff ff       	jmp    c000e596 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e628:	50                   	push   eax
c000e629:	50                   	push   eax
c000e62a:	6a 00                	push   0x0
c000e62c:	53                   	push   ebx
c000e62d:	e8 6a fb ff ff       	call   c000e19c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e632:	83 c4 10             	add    esp,0x10
c000e635:	e9 5c ff ff ff       	jmp    c000e596 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e63a:	89 f0                	mov    eax,esi
c000e63c:	84 c0                	test   al,al
c000e63e:	75 14                	jne    c000e654 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000e640:	52                   	push   edx
c000e641:	52                   	push   edx
c000e642:	6a 00                	push   0x0
c000e644:	53                   	push   ebx
c000e645:	e8 52 fb ff ff       	call   c000e19c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e64a:	83 c4 10             	add    esp,0x10
c000e64d:	83 c4 10             	add    esp,0x10
c000e650:	5b                   	pop    ebx
c000e651:	5e                   	pop    esi
c000e652:	5f                   	pop    edi
c000e653:	c3                   	ret    
c000e654:	c7 44 24 20 e5 18 02 c0 	mov    DWORD PTR [esp+0x20],0xc00218e5
c000e65c:	83 c4 10             	add    esp,0x10
c000e65f:	5b                   	pop    ebx
c000e660:	5e                   	pop    esi
c000e661:	5f                   	pop    edi
c000e662:	e9 dd 73 00 00       	jmp    c0015a44 <Krnl::panic(char const*)>
c000e667:	90                   	nop

c000e668 <VAS::freeAllocatedPages(unsigned long)>:
c000e668:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e66c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e670:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e674:	74 09                	je     c000e67f <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e676:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e67a:	e9 c8 fe ff ff       	jmp    c000e547 <Virt::freeKernelVirtualPages(unsigned long)>
c000e67f:	c7 44 24 04 04 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021704
c000e687:	e9 89 0b 00 00       	jmp    c000f215 <Dbg::kprintf(char const*, ...)>

c000e68c <VAS::virtualToPhysical(unsigned long)>:
c000e68c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e690:	50                   	push   eax
c000e691:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e695:	52                   	push   edx
c000e696:	e8 8d fe ff ff       	call   c000e528 <VAS::getPageTableEntry(unsigned long)>
c000e69b:	59                   	pop    ecx
c000e69c:	8b 00                	mov    eax,DWORD PTR [eax]
c000e69e:	5a                   	pop    edx
c000e69f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e6a4:	c3                   	ret    
c000e6a5:	90                   	nop

c000e6a6 <VAS::reflagRange(unsigned long, int, int, int)>:
c000e6a6:	55                   	push   ebp
c000e6a7:	57                   	push   edi
c000e6a8:	56                   	push   esi
c000e6a9:	53                   	push   ebx
c000e6aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e6ae:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e6b2:	89 c3                	mov    ebx,eax
c000e6b4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000e6b8:	c1 e3 0c             	shl    ebx,0xc
c000e6bb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000e6bf:	01 f3                	add    ebx,esi
c000e6c1:	85 c0                	test   eax,eax
c000e6c3:	7e 1f                	jle    c000e6e4 <VAS::reflagRange(unsigned long, int, int, int)+0x3e>
c000e6c5:	56                   	push   esi
c000e6c6:	81 c6 00 10 00 00    	add    esi,0x1000
c000e6cc:	55                   	push   ebp
c000e6cd:	e8 56 fe ff ff       	call   c000e528 <VAS::getPageTableEntry(unsigned long)>
c000e6d2:	5a                   	pop    edx
c000e6d3:	59                   	pop    ecx
c000e6d4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e6d6:	21 f9                	and    ecx,edi
c000e6d8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e6dc:	09 d1                	or     ecx,edx
c000e6de:	39 f3                	cmp    ebx,esi
c000e6e0:	89 08                	mov    DWORD PTR [eax],ecx
c000e6e2:	75 e1                	jne    c000e6c5 <VAS::reflagRange(unsigned long, int, int, int)+0x1f>
c000e6e4:	5b                   	pop    ebx
c000e6e5:	5e                   	pop    esi
c000e6e6:	5f                   	pop    edi
c000e6e7:	5d                   	pop    ebp
c000e6e8:	c3                   	ret    
c000e6e9:	90                   	nop

c000e6ea <VAS::setToWriteCombining(unsigned long, int)>:
c000e6ea:	83 ec 0c             	sub    esp,0xc
c000e6ed:	e8 e6 61 00 00       	call   c00148d8 <thisCPU()>
c000e6f2:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000e6f9:	75 04                	jne    c000e6ff <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000e6fb:	83 c4 0c             	add    esp,0xc
c000e6fe:	c3                   	ret    
c000e6ff:	83 ec 0c             	sub    esp,0xc
c000e702:	68 80 00 00 00       	push   0x80
c000e707:	6a ff                	push   0xffffffff
c000e709:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e70d:	50                   	push   eax
c000e70e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e712:	52                   	push   edx
c000e713:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e717:	51                   	push   ecx
c000e718:	e8 89 ff ff ff       	call   c000e6a6 <VAS::reflagRange(unsigned long, int, int, int)>
c000e71d:	83 c4 20             	add    esp,0x20
c000e720:	83 c4 0c             	add    esp,0xc
c000e723:	c3                   	ret    

c000e724 <VAS::mapOtherVASIn(bool, VAS*)>:
c000e724:	83 ec 0c             	sub    esp,0xc
c000e727:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e72b:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e730:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e737:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e73a:	19 c0                	sbb    eax,eax
c000e73c:	83 ca 03             	or     edx,0x3
c000e73f:	83 e0 fc             	and    eax,0xfffffffc
c000e742:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e749:	e8 97 10 01 00       	call   c001f7e5 <CPU::readCR3()>
c000e74e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e752:	83 c4 0c             	add    esp,0xc
c000e755:	e9 9d 10 01 00       	jmp    c001f7f7 <CPU::writeCR3(unsigned long)>

c000e75a <VAS::~VAS()>:
c000e75a:	83 ec 2c             	sub    esp,0x2c
c000e75d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e765:	e8 e3 a2 00 00       	call   c0018a4d <lockScheduler()>
c000e76a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e76f:	8b 00                	mov    eax,DWORD PTR [eax]
c000e771:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e774:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e77a:	83 ec 04             	sub    esp,0x4
c000e77d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e781:	6a 01                	push   0x1
c000e783:	50                   	push   eax
c000e784:	e8 9b ff ff ff       	call   c000e724 <VAS::mapOtherVASIn(bool, VAS*)>
c000e789:	83 c4 10             	add    esp,0x10
c000e78c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e794:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e79c:	0f 8f d7 00 00 00    	jg     c000e879 <VAS::~VAS()+0x11f>
c000e7a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7a6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e7a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e7ad:	c1 e2 02             	shl    edx,0x2
c000e7b0:	01 d0                	add    eax,edx
c000e7b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000e7b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e7b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7bc:	83 e0 01             	and    eax,0x1
c000e7bf:	0f 84 ab 00 00 00    	je     c000e870 <VAS::~VAS()+0x116>
c000e7c5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e7cd:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e7d5:	7f 75                	jg     c000e84c <VAS::~VAS()+0xf2>
c000e7d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e7db:	c1 e0 0a             	shl    eax,0xa
c000e7de:	89 c2                	mov    edx,eax
c000e7e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e7e4:	01 d0                	add    eax,edx
c000e7e6:	c1 e0 0c             	shl    eax,0xc
c000e7e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e7ed:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e7f2:	8b 00                	mov    eax,DWORD PTR [eax]
c000e7f4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e7f7:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e7fd:	83 ec 04             	sub    esp,0x4
c000e800:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e804:	6a 01                	push   0x1
c000e806:	50                   	push   eax
c000e807:	e8 f0 fc ff ff       	call   c000e4fc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e80c:	83 c4 10             	add    esp,0x10
c000e80f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e813:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e817:	8b 00                	mov    eax,DWORD PTR [eax]
c000e819:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e81d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e821:	25 01 04 00 00       	and    eax,0x401
c000e826:	3d 01 04 00 00       	cmp    eax,0x401
c000e82b:	75 19                	jne    c000e846 <VAS::~VAS()+0xec>
c000e82d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e831:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e836:	83 ec 0c             	sub    esp,0xc
c000e839:	50                   	push   eax
c000e83a:	e8 ed dc ff ff       	call   c000c52c <Phys::freePage(unsigned long)>
c000e83f:	83 c4 10             	add    esp,0x10
c000e842:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e846:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e84a:	eb 81                	jmp    c000e7cd <VAS::~VAS()+0x73>
c000e84c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e850:	25 00 04 00 00       	and    eax,0x400
c000e855:	74 19                	je     c000e870 <VAS::~VAS()+0x116>
c000e857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e860:	83 ec 0c             	sub    esp,0xc
c000e863:	50                   	push   eax
c000e864:	e8 c3 dc ff ff       	call   c000c52c <Phys::freePage(unsigned long)>
c000e869:	83 c4 10             	add    esp,0x10
c000e86c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e870:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e874:	e9 1b ff ff ff       	jmp    c000e794 <VAS::~VAS()+0x3a>
c000e879:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e87d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e880:	83 ec 0c             	sub    esp,0xc
c000e883:	50                   	push   eax
c000e884:	e8 be fc ff ff       	call   c000e547 <Virt::freeKernelVirtualPages(unsigned long)>
c000e889:	83 c4 10             	add    esp,0x10
c000e88c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e890:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e893:	83 ec 0c             	sub    esp,0xc
c000e896:	50                   	push   eax
c000e897:	e8 90 dc ff ff       	call   c000c52c <Phys::freePage(unsigned long)>
c000e89c:	83 c4 10             	add    esp,0x10
c000e89f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e8a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e8a7:	c1 e0 02             	shl    eax,0x2
c000e8aa:	83 ec 08             	sub    esp,0x8
c000e8ad:	50                   	push   eax
c000e8ae:	68 28 17 02 c0       	push   0xc0021728
c000e8b3:	e8 5d 09 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000e8b8:	83 c4 10             	add    esp,0x10
c000e8bb:	e8 8f a1 00 00       	call   c0018a4f <unlockScheduler()>
c000e8c0:	90                   	nop
c000e8c1:	83 c4 2c             	add    esp,0x2c
c000e8c4:	c3                   	ret    
c000e8c5:	90                   	nop

c000e8c6 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e8c6:	55                   	push   ebp
c000e8c7:	57                   	push   edi
c000e8c8:	56                   	push   esi
c000e8c9:	53                   	push   ebx
c000e8ca:	83 ec 1c             	sub    esp,0x1c
c000e8cd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e8d1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e8d5:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e8db:	77 08                	ja     c000e8e5 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e8dd:	0f 20 d8             	mov    eax,cr3
c000e8e0:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e8e3:	75 49                	jne    c000e92e <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c000e8e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e8e9:	09 d8                	or     eax,ebx
c000e8eb:	a9 ff 0f 00 00       	test   eax,0xfff
c000e8f0:	75 59                	jne    c000e94b <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c000e8f2:	89 de                	mov    esi,ebx
c000e8f4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e8f7:	c1 ee 16             	shr    esi,0x16
c000e8fa:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e901:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e905:	74 56                	je     c000e95d <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c000e907:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e90d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e911:	c1 eb 0a             	shr    ebx,0xa
c000e914:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e918:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e91e:	09 d0                	or     eax,edx
c000e920:	c1 e6 0c             	shl    esi,0xc
c000e923:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e926:	83 c4 1c             	add    esp,0x1c
c000e929:	5b                   	pop    ebx
c000e92a:	5e                   	pop    esi
c000e92b:	5f                   	pop    edi
c000e92c:	5d                   	pop    ebp
c000e92d:	c3                   	ret    
c000e92e:	83 ec 0c             	sub    esp,0xc
c000e931:	68 48 17 02 c0       	push   0xc0021748
c000e936:	e8 da 08 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000e93b:	83 c4 10             	add    esp,0x10
c000e93e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e942:	09 d8                	or     eax,ebx
c000e944:	a9 ff 0f 00 00       	test   eax,0xfff
c000e949:	74 a7                	je     c000e8f2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e94b:	83 ec 0c             	sub    esp,0xc
c000e94e:	68 b0 17 02 c0       	push   0xc00217b0
c000e953:	e8 ec 70 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c000e958:	83 c4 10             	add    esp,0x10
c000e95b:	eb 95                	jmp    c000e8f2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e95d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e961:	e8 53 dc ff ff       	call   c000c5b9 <Phys::allocatePage()>
c000e966:	89 c5                	mov    ebp,eax
c000e968:	e8 1a fa ff ff       	call   c000e387 <Virt::getAKernelVAS()>
c000e96d:	83 ec 0c             	sub    esp,0xc
c000e970:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e974:	6a 01                	push   0x1
c000e976:	e8 7f f8 ff ff       	call   c000e1fa <Virt::allocateKernelVirtualPages(int)>
c000e97b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e982:	6a 01                	push   0x1
c000e984:	50                   	push   eax
c000e985:	55                   	push   ebp
c000e986:	81 cd 07 04 00 00    	or     ebp,0x407
c000e98c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e990:	51                   	push   ecx
c000e991:	e8 22 02 00 00       	call   c000ebb8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e996:	83 c4 1c             	add    esp,0x1c
c000e999:	68 00 10 00 00       	push   0x1000
c000e99e:	6a 00                	push   0x0
c000e9a0:	50                   	push   eax
c000e9a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e9a5:	e8 1a 1d ff ff       	call   c00006c4 <memset>
c000e9aa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e9ae:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e9b1:	e8 91 fb ff ff       	call   c000e547 <Virt::freeKernelVirtualPages(unsigned long)>
c000e9b6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e9ba:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9bd:	83 c4 10             	add    esp,0x10
c000e9c0:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e9c3:	e9 3f ff ff ff       	jmp    c000e907 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e9c8 <VAS::allocatePages(int, int)>:
c000e9c8:	55                   	push   ebp
c000e9c9:	57                   	push   edi
c000e9ca:	56                   	push   esi
c000e9cb:	53                   	push   ebx
c000e9cc:	83 ec 1c             	sub    esp,0x1c
c000e9cf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e9d3:	e8 00 5f 00 00       	call   c00148d8 <thisCPU()>
c000e9d8:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e9de:	83 e0 01             	and    eax,0x1
c000e9e1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e9e5:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e9e9:	0f 85 d5 00 00 00    	jne    c000eac4 <VAS::allocatePages(int, int)+0xfc>
c000e9ef:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e9f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9f6:	85 c0                	test   eax,eax
c000e9f8:	0f 84 aa 00 00 00    	je     c000eaa8 <VAS::allocatePages(int, int)+0xe0>
c000e9fe:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000ea02:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ea06:	c1 e6 0c             	shl    esi,0xc
c000ea09:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000ea0d:	01 de                	add    esi,ebx
c000ea0f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea13:	81 cd 00 04 00 00    	or     ebp,0x400
c000ea19:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000ea1c:	85 c0                	test   eax,eax
c000ea1e:	7e 25                	jle    c000ea45 <VAS::allocatePages(int, int)+0x7d>
c000ea20:	e8 94 db ff ff       	call   c000c5b9 <Phys::allocatePage()>
c000ea25:	55                   	push   ebp
c000ea26:	53                   	push   ebx
c000ea27:	50                   	push   eax
c000ea28:	57                   	push   edi
c000ea29:	e8 98 fe ff ff       	call   c000e8c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ea2e:	83 c4 10             	add    esp,0x10
c000ea31:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea36:	74 03                	je     c000ea3b <VAS::allocatePages(int, int)+0x73>
c000ea38:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea3b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea41:	39 de                	cmp    esi,ebx
c000ea43:	75 db                	jne    c000ea20 <VAS::allocatePages(int, int)+0x58>
c000ea45:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea4a:	74 3f                	je     c000ea8b <VAS::allocatePages(int, int)+0xc3>
c000ea4c:	c1 ee 0a             	shr    esi,0xa
c000ea4f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ea53:	c1 eb 0a             	shr    ebx,0xa
c000ea56:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000ea5c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000ea62:	81 ee 00 00 40 00    	sub    esi,0x400000
c000ea68:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000ea6e:	39 f3                	cmp    ebx,esi
c000ea70:	77 0d                	ja     c000ea7f <VAS::allocatePages(int, int)+0xb7>
c000ea72:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea75:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea7b:	39 de                	cmp    esi,ebx
c000ea7d:	73 f3                	jae    c000ea72 <VAS::allocatePages(int, int)+0xaa>
c000ea7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea83:	83 c4 1c             	add    esp,0x1c
c000ea86:	5b                   	pop    ebx
c000ea87:	5e                   	pop    esi
c000ea88:	5f                   	pop    edi
c000ea89:	5d                   	pop    ebp
c000ea8a:	c3                   	ret    
c000ea8b:	e8 55 0d 01 00       	call   c001f7e5 <CPU::readCR3()>
c000ea90:	83 ec 0c             	sub    esp,0xc
c000ea93:	50                   	push   eax
c000ea94:	e8 5e 0d 01 00       	call   c001f7f7 <CPU::writeCR3(unsigned long)>
c000ea99:	83 c4 10             	add    esp,0x10
c000ea9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eaa0:	83 c4 1c             	add    esp,0x1c
c000eaa3:	5b                   	pop    ebx
c000eaa4:	5e                   	pop    esi
c000eaa5:	5f                   	pop    edi
c000eaa6:	5d                   	pop    ebp
c000eaa7:	c3                   	ret    
c000eaa8:	83 ec 0c             	sub    esp,0xc
c000eaab:	68 d4 17 02 c0       	push   0xc00217d4
c000eab0:	e8 8f 6f 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c000eab5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000eab8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eabc:	83 c4 10             	add    esp,0x10
c000eabf:	e9 3a ff ff ff       	jmp    c000e9fe <VAS::allocatePages(int, int)+0x36>
c000eac4:	83 ec 0c             	sub    esp,0xc
c000eac7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000eacb:	53                   	push   ebx
c000eacc:	e8 29 f7 ff ff       	call   c000e1fa <Virt::allocateKernelVirtualPages(int)>
c000ead1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ead5:	83 c4 10             	add    esp,0x10
c000ead8:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000eadd:	0f 87 94 00 00 00    	ja     c000eb77 <VAS::allocatePages(int, int)+0x1af>
c000eae3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eae7:	85 d2                	test   edx,edx
c000eae9:	7e 3c                	jle    c000eb27 <VAS::allocatePages(int, int)+0x15f>
c000eaeb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eaef:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eaf3:	c1 e5 0c             	shl    ebp,0xc
c000eaf6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000eafa:	81 ce 00 04 00 00    	or     esi,0x400
c000eb00:	01 dd                	add    ebp,ebx
c000eb02:	e8 b2 da ff ff       	call   c000c5b9 <Phys::allocatePage()>
c000eb07:	56                   	push   esi
c000eb08:	53                   	push   ebx
c000eb09:	50                   	push   eax
c000eb0a:	57                   	push   edi
c000eb0b:	e8 b6 fd ff ff       	call   c000e8c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000eb10:	83 c4 10             	add    esp,0x10
c000eb13:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb18:	74 03                	je     c000eb1d <VAS::allocatePages(int, int)+0x155>
c000eb1a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb1d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb23:	39 dd                	cmp    ebp,ebx
c000eb25:	75 db                	jne    c000eb02 <VAS::allocatePages(int, int)+0x13a>
c000eb27:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb2c:	0f 84 59 ff ff ff    	je     c000ea8b <VAS::allocatePages(int, int)+0xc3>
c000eb32:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eb36:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb3a:	c1 e0 0c             	shl    eax,0xc
c000eb3d:	89 d3                	mov    ebx,edx
c000eb3f:	c1 eb 0a             	shr    ebx,0xa
c000eb42:	01 d0                	add    eax,edx
c000eb44:	c1 e8 0a             	shr    eax,0xa
c000eb47:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000eb4d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eb52:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000eb58:	2d 00 00 40 00       	sub    eax,0x400000
c000eb5d:	39 c3                	cmp    ebx,eax
c000eb5f:	0f 87 1a ff ff ff    	ja     c000ea7f <VAS::allocatePages(int, int)+0xb7>
c000eb65:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb68:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb6e:	39 d8                	cmp    eax,ebx
c000eb70:	73 f3                	jae    c000eb65 <VAS::allocatePages(int, int)+0x19d>
c000eb72:	e9 08 ff ff ff       	jmp    c000ea7f <VAS::allocatePages(int, int)+0xb7>
c000eb77:	e8 5c 5d 00 00       	call   c00148d8 <thisCPU()>
c000eb7c:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000eb83:	0f 84 5a ff ff ff    	je     c000eae3 <VAS::allocatePages(int, int)+0x11b>
c000eb89:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eb8d:	80 cd 01             	or     ch,0x1
c000eb90:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c000eb94:	e9 4a ff ff ff       	jmp    c000eae3 <VAS::allocatePages(int, int)+0x11b>
c000eb99:	90                   	nop

c000eb9a <VAS::setCPUSpecific(unsigned long)>:
c000eb9a:	83 ec 0c             	sub    esp,0xc
c000eb9d:	6a 05                	push   0x5
c000eb9f:	68 00 00 40 c2       	push   0xc2400000
c000eba4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eba8:	50                   	push   eax
c000eba9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ebad:	52                   	push   edx
c000ebae:	e8 13 fd ff ff       	call   c000e8c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ebb3:	83 c4 1c             	add    esp,0x1c
c000ebb6:	c3                   	ret    
c000ebb7:	90                   	nop

c000ebb8 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000ebb8:	55                   	push   ebp
c000ebb9:	57                   	push   edi
c000ebba:	56                   	push   esi
c000ebbb:	53                   	push   ebx
c000ebbc:	83 ec 1c             	sub    esp,0x1c
c000ebbf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000ebc3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ebc7:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000ebcb:	e8 08 5d 00 00       	call   c00148d8 <thisCPU()>
c000ebd0:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000ebd6:	83 e0 01             	and    eax,0x1
c000ebd9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ebdd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebe1:	85 c0                	test   eax,eax
c000ebe3:	7e 39                	jle    c000ec1e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000ebe5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebe9:	89 f3                	mov    ebx,esi
c000ebeb:	c1 e0 0c             	shl    eax,0xc
c000ebee:	01 f0                	add    eax,esi
c000ebf0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ebf4:	55                   	push   ebp
c000ebf5:	53                   	push   ebx
c000ebf6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebfa:	29 f0                	sub    eax,esi
c000ebfc:	01 d8                	add    eax,ebx
c000ebfe:	50                   	push   eax
c000ebff:	57                   	push   edi
c000ec00:	e8 c1 fc ff ff       	call   c000e8c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ec05:	83 c4 10             	add    esp,0x10
c000ec08:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ec0d:	74 03                	je     c000ec12 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000ec0f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ec12:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ec18:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000ec1c:	75 d6                	jne    c000ebf4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000ec1e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ec23:	74 42                	je     c000ec67 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000ec25:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ec29:	89 f3                	mov    ebx,esi
c000ec2b:	c1 e0 0c             	shl    eax,0xc
c000ec2e:	c1 eb 0a             	shr    ebx,0xa
c000ec31:	01 f0                	add    eax,esi
c000ec33:	c1 e8 0a             	shr    eax,0xa
c000ec36:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000ec3c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ec41:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000ec47:	2d 00 00 40 00       	sub    eax,0x400000
c000ec4c:	39 c3                	cmp    ebx,eax
c000ec4e:	77 0d                	ja     c000ec5d <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000ec50:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ec53:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ec59:	39 d8                	cmp    eax,ebx
c000ec5b:	73 f3                	jae    c000ec50 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000ec5d:	83 c4 1c             	add    esp,0x1c
c000ec60:	89 f0                	mov    eax,esi
c000ec62:	5b                   	pop    ebx
c000ec63:	5e                   	pop    esi
c000ec64:	5f                   	pop    edi
c000ec65:	5d                   	pop    ebp
c000ec66:	c3                   	ret    
c000ec67:	e8 79 0b 01 00       	call   c001f7e5 <CPU::readCR3()>
c000ec6c:	83 ec 0c             	sub    esp,0xc
c000ec6f:	50                   	push   eax
c000ec70:	e8 82 0b 01 00       	call   c001f7f7 <CPU::writeCR3(unsigned long)>
c000ec75:	83 c4 10             	add    esp,0x10
c000ec78:	89 f0                	mov    eax,esi
c000ec7a:	83 c4 1c             	add    esp,0x1c
c000ec7d:	5b                   	pop    ebx
c000ec7e:	5e                   	pop    esi
c000ec7f:	5f                   	pop    edi
c000ec80:	5d                   	pop    ebp
c000ec81:	c3                   	ret    

c000ec82 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000ec82:	55                   	push   ebp
c000ec83:	57                   	push   edi
c000ec84:	56                   	push   esi
c000ec85:	53                   	push   ebx
c000ec86:	83 ec 1c             	sub    esp,0x1c
c000ec89:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ec8d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ec91:	09 f0                	or     eax,esi
c000ec93:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ec97:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ec9b:	a9 ff 0f 00 00       	test   eax,0xfff
c000eca0:	75 4c                	jne    c000ecee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6c>
c000eca2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000eca6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000eca9:	c1 eb 16             	shr    ebx,0x16
c000ecac:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000ecb3:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000ecb7:	74 4f                	je     c000ed08 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x86>
c000ecb9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ecbd:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000ecc1:	c1 e8 0a             	shr    eax,0xa
c000ecc4:	80 fa 01             	cmp    dl,0x1
c000ecc7:	19 d2                	sbb    edx,edx
c000ecc9:	25 fc 0f 00 00       	and    eax,0xffc
c000ecce:	c1 e3 0c             	shl    ebx,0xc
c000ecd1:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000ecd7:	01 d8                	add    eax,ebx
c000ecd9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ecdd:	09 d9                	or     ecx,ebx
c000ecdf:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000ece6:	83 c4 1c             	add    esp,0x1c
c000ece9:	5b                   	pop    ebx
c000ecea:	5e                   	pop    esi
c000eceb:	5f                   	pop    edi
c000ecec:	5d                   	pop    ebp
c000eced:	c3                   	ret    
c000ecee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ecf2:	83 ec 0c             	sub    esp,0xc
c000ecf5:	68 00 18 02 c0       	push   0xc0021800
c000ecfa:	e8 45 6d 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c000ecff:	83 c4 10             	add    esp,0x10
c000ed02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ed06:	eb 9a                	jmp    c000eca2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c000ed08:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ed0c:	e8 a8 d8 ff ff       	call   c000c5b9 <Phys::allocatePage()>
c000ed11:	89 c5                	mov    ebp,eax
c000ed13:	e8 6f f6 ff ff       	call   c000e387 <Virt::getAKernelVAS()>
c000ed18:	83 ec 0c             	sub    esp,0xc
c000ed1b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ed1f:	6a 01                	push   0x1
c000ed21:	e8 d4 f4 ff ff       	call   c000e1fa <Virt::allocateKernelVirtualPages(int)>
c000ed26:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000ed2d:	6a 01                	push   0x1
c000ed2f:	50                   	push   eax
c000ed30:	55                   	push   ebp
c000ed31:	81 cd 07 04 00 00    	or     ebp,0x407
c000ed37:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000ed3b:	51                   	push   ecx
c000ed3c:	e8 77 fe ff ff       	call   c000ebb8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ed41:	83 c4 1c             	add    esp,0x1c
c000ed44:	68 00 10 00 00       	push   0x1000
c000ed49:	6a 00                	push   0x0
c000ed4b:	50                   	push   eax
c000ed4c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ed50:	e8 6f 19 ff ff       	call   c00006c4 <memset>
c000ed55:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ed59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ed5c:	e8 e6 f7 ff ff       	call   c000e547 <Virt::freeKernelVirtualPages(unsigned long)>
c000ed61:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ed64:	83 c4 10             	add    esp,0x10
c000ed67:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ed6b:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000ed6e:	e9 46 ff ff ff       	jmp    c000ecb9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000ed73:	90                   	nop

c000ed74 <VAS::VAS(bool)>:
c000ed74:	53                   	push   ebx
c000ed75:	83 ec 28             	sub    esp,0x28
c000ed78:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed7c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ed80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed84:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ed8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed8f:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000ed93:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000ed96:	e8 1e d8 ff ff       	call   c000c5b9 <Phys::allocatePage()>
c000ed9b:	89 c2                	mov    edx,eax
c000ed9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eda1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000eda4:	e8 de f5 ff ff       	call   c000e387 <Virt::getAKernelVAS()>
c000eda9:	89 c3                	mov    ebx,eax
c000edab:	83 ec 0c             	sub    esp,0xc
c000edae:	6a 01                	push   0x1
c000edb0:	e8 45 f4 ff ff       	call   c000e1fa <Virt::allocateKernelVirtualPages(int)>
c000edb5:	83 c4 10             	add    esp,0x10
c000edb8:	89 c2                	mov    edx,eax
c000edba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edbe:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000edc1:	83 ec 0c             	sub    esp,0xc
c000edc4:	6a 03                	push   0x3
c000edc6:	6a 01                	push   0x1
c000edc8:	52                   	push   edx
c000edc9:	50                   	push   eax
c000edca:	53                   	push   ebx
c000edcb:	e8 e8 fd ff ff       	call   c000ebb8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000edd0:	83 c4 20             	add    esp,0x20
c000edd3:	89 c2                	mov    edx,eax
c000edd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edd9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000eddc:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ede4:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000edec:	7f 1c                	jg     c000ee0a <VAS::VAS(bool)+0x96>
c000edee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edf2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000edf5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000edf9:	c1 e2 02             	shl    edx,0x2
c000edfc:	01 d0                	add    eax,edx
c000edfe:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ee04:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ee08:	eb da                	jmp    c000ede4 <VAS::VAS(bool)+0x70>
c000ee0a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000ee12:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000ee1a:	7f 71                	jg     c000ee8d <VAS::VAS(bool)+0x119>
c000ee1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee20:	2d 00 02 00 00       	sub    eax,0x200
c000ee25:	c1 e0 0c             	shl    eax,0xc
c000ee28:	83 c8 03             	or     eax,0x3
c000ee2b:	89 c3                	mov    ebx,eax
c000ee2d:	e8 a6 5a 00 00       	call   c00148d8 <thisCPU()>
c000ee32:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ee38:	83 e0 10             	and    eax,0x10
c000ee3b:	84 c0                	test   al,al
c000ee3d:	74 07                	je     c000ee46 <VAS::VAS(bool)+0xd2>
c000ee3f:	b8 00 01 00 00       	mov    eax,0x100
c000ee44:	eb 05                	jmp    c000ee4b <VAS::VAS(bool)+0xd7>
c000ee46:	b8 00 00 00 00       	mov    eax,0x0
c000ee4b:	09 d8                	or     eax,ebx
c000ee4d:	89 c1                	mov    ecx,eax
c000ee4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee53:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee56:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee5a:	c1 e2 02             	shl    edx,0x2
c000ee5d:	01 d0                	add    eax,edx
c000ee5f:	89 ca                	mov    edx,ecx
c000ee61:	89 10                	mov    DWORD PTR [eax],edx
c000ee63:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee67:	2d 40 03 00 00       	sub    eax,0x340
c000ee6c:	83 f8 7f             	cmp    eax,0x7f
c000ee6f:	77 16                	ja     c000ee87 <VAS::VAS(bool)+0x113>
c000ee71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee75:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee78:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee7c:	c1 e2 02             	shl    edx,0x2
c000ee7f:	01 d0                	add    eax,edx
c000ee81:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ee87:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ee8b:	eb 85                	jmp    c000ee12 <VAS::VAS(bool)+0x9e>
c000ee8d:	e8 46 5a 00 00       	call   c00148d8 <thisCPU()>
c000ee92:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ee98:	83 e0 10             	and    eax,0x10
c000ee9b:	84 c0                	test   al,al
c000ee9d:	74 07                	je     c000eea6 <VAS::VAS(bool)+0x132>
c000ee9f:	b8 03 41 00 00       	mov    eax,0x4103
c000eea4:	eb 05                	jmp    c000eeab <VAS::VAS(bool)+0x137>
c000eea6:	b8 03 40 00 00       	mov    eax,0x4003
c000eeab:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000eeaf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000eeb2:	81 c2 20 0c 00 00    	add    edx,0xc20
c000eeb8:	89 02                	mov    DWORD PTR [edx],eax
c000eeba:	e8 19 5a 00 00       	call   c00148d8 <thisCPU()>
c000eebf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000eec5:	83 ec 08             	sub    esp,0x8
c000eec8:	50                   	push   eax
c000eec9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eecd:	e8 c8 fc ff ff       	call   c000eb9a <VAS::setCPUSpecific(unsigned long)>
c000eed2:	83 c4 10             	add    esp,0x10
c000eed5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eed9:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000eedc:	e8 f7 59 00 00       	call   c00148d8 <thisCPU()>
c000eee1:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000eee7:	83 e0 10             	and    eax,0x10
c000eeea:	84 c0                	test   al,al
c000eeec:	74 07                	je     c000eef5 <VAS::VAS(bool)+0x181>
c000eeee:	b8 00 01 00 00       	mov    eax,0x100
c000eef3:	eb 05                	jmp    c000eefa <VAS::VAS(bool)+0x186>
c000eef5:	b8 00 00 00 00       	mov    eax,0x0
c000eefa:	09 d8                	or     eax,ebx
c000eefc:	89 c2                	mov    edx,eax
c000eefe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef02:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ef05:	05 fc 0f 00 00       	add    eax,0xffc
c000ef0a:	83 ca 03             	or     edx,0x3
c000ef0d:	89 10                	mov    DWORD PTR [eax],edx
c000ef0f:	e8 c4 59 00 00       	call   c00148d8 <thisCPU()>
c000ef14:	83 ec 0c             	sub    esp,0xc
c000ef17:	50                   	push   eax
c000ef18:	e8 ef 19 00 00       	call   c001090c <Device::getName()>
c000ef1d:	83 c4 10             	add    esp,0x10
c000ef20:	83 ec 08             	sub    esp,0x8
c000ef23:	68 ff 18 02 c0       	push   0xc00218ff
c000ef28:	50                   	push   eax
c000ef29:	e8 86 18 ff ff       	call   c00007b4 <strcmp>
c000ef2e:	83 c4 10             	add    esp,0x10
c000ef31:	85 c0                	test   eax,eax
c000ef33:	0f 94 c0             	sete   al
c000ef36:	84 c0                	test   al,al
c000ef38:	74 64                	je     c000ef9e <VAS::VAS(bool)+0x22a>
c000ef3a:	e8 ec 9a 00 00       	call   c0018a2b <disableIRQs()>
c000ef3f:	e8 94 59 00 00       	call   c00148d8 <thisCPU()>
c000ef44:	05 7c 09 00 00       	add    eax,0x97c
c000ef49:	83 ec 0c             	sub    esp,0xc
c000ef4c:	50                   	push   eax
c000ef4d:	e8 04 cb ff ff       	call   c000ba56 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ef52:	83 c4 10             	add    esp,0x10
c000ef55:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ef5a:	89 c3                	mov    ebx,eax
c000ef5c:	e8 77 59 00 00       	call   c00148d8 <thisCPU()>
c000ef61:	05 7c 09 00 00       	add    eax,0x97c
c000ef66:	83 ec 0c             	sub    esp,0xc
c000ef69:	50                   	push   eax
c000ef6a:	e8 e7 ca ff ff       	call   c000ba56 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ef6f:	83 c4 10             	add    esp,0x10
c000ef72:	83 ec 08             	sub    esp,0x8
c000ef75:	50                   	push   eax
c000ef76:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ef7a:	e8 a9 f5 ff ff       	call   c000e528 <VAS::getPageTableEntry(unsigned long)>
c000ef7f:	83 c4 10             	add    esp,0x10
c000ef82:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef84:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ef89:	6a 11                	push   0x11
c000ef8b:	53                   	push   ebx
c000ef8c:	50                   	push   eax
c000ef8d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ef91:	e8 30 f9 ff ff       	call   c000e8c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ef96:	83 c4 10             	add    esp,0x10
c000ef99:	e8 a0 9a 00 00       	call   c0018a3e <enableIRQs()>
c000ef9e:	90                   	nop
c000ef9f:	83 c4 28             	add    esp,0x28
c000efa2:	5b                   	pop    ebx
c000efa3:	c3                   	ret    

c000efa4 <mapVASFirstTime>:
c000efa4:	55                   	push   ebp
c000efa5:	57                   	push   edi
c000efa6:	56                   	push   esi
c000efa7:	53                   	push   ebx
c000efa8:	83 ec 0c             	sub    esp,0xc
c000efab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000efb0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000efb3:	4a                   	dec    edx
c000efb4:	0f 84 99 00 00 00    	je     c000f053 <mapVASFirstTime+0xaf>
c000efba:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000efbd:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000efc0:	c1 e5 15             	shl    ebp,0x15
c000efc3:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000efc8:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000efcd:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000efd3:	29 eb                	sub    ebx,ebp
c000efd5:	29 ee                	sub    esi,ebp
c000efd7:	e8 dd d5 ff ff       	call   c000c5b9 <Phys::allocatePage()>
c000efdc:	83 ec 0c             	sub    esp,0xc
c000efdf:	68 03 04 00 00       	push   0x403
c000efe4:	6a 01                	push   0x1
c000efe6:	53                   	push   ebx
c000efe7:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000efed:	50                   	push   eax
c000efee:	57                   	push   edi
c000efef:	e8 c4 fb ff ff       	call   c000ebb8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000eff4:	83 c4 20             	add    esp,0x20
c000eff7:	39 f3                	cmp    ebx,esi
c000eff9:	75 dc                	jne    c000efd7 <mapVASFirstTime+0x33>
c000effb:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000f000:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000f005:	29 e8                	sub    eax,ebp
c000f007:	29 ee                	sub    esi,ebp
c000f009:	89 c5                	mov    ebp,eax
c000f00b:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000f00f:	19 db                	sbb    ebx,ebx
c000f011:	e8 a3 d5 ff ff       	call   c000c5b9 <Phys::allocatePage()>
c000f016:	83 e3 04             	and    ebx,0x4
c000f019:	83 ec 0c             	sub    esp,0xc
c000f01c:	81 c3 03 04 00 00    	add    ebx,0x403
c000f022:	53                   	push   ebx
c000f023:	6a 01                	push   0x1
c000f025:	56                   	push   esi
c000f026:	81 ee 00 10 00 00    	sub    esi,0x1000
c000f02c:	50                   	push   eax
c000f02d:	57                   	push   edi
c000f02e:	e8 85 fb ff ff       	call   c000ebb8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f033:	83 c4 20             	add    esp,0x20
c000f036:	39 f5                	cmp    ebp,esi
c000f038:	75 d1                	jne    c000f00b <mapVASFirstTime+0x67>
c000f03a:	e8 a6 07 01 00       	call   c001f7e5 <CPU::readCR3()>
c000f03f:	83 ec 0c             	sub    esp,0xc
c000f042:	50                   	push   eax
c000f043:	e8 af 07 01 00       	call   c001f7f7 <CPU::writeCR3(unsigned long)>
c000f048:	83 c4 10             	add    esp,0x10
c000f04b:	83 c4 0c             	add    esp,0xc
c000f04e:	5b                   	pop    ebx
c000f04f:	5e                   	pop    esi
c000f050:	5f                   	pop    edi
c000f051:	5d                   	pop    ebp
c000f052:	c3                   	ret    
c000f053:	83 ec 0c             	sub    esp,0xc
c000f056:	68 0d 19 02 c0       	push   0xc002190d
c000f05b:	e8 b5 01 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000f060:	83 c4 10             	add    esp,0x10
c000f063:	83 c4 0c             	add    esp,0xc
c000f066:	5b                   	pop    ebx
c000f067:	5e                   	pop    esi
c000f068:	5f                   	pop    edi
c000f069:	5d                   	pop    ebp
c000f06a:	c3                   	ret    

c000f06b <__cxa_atexit>:
c000f06b:	31 c0                	xor    eax,eax
c000f06d:	c3                   	ret    

c000f06e <__cxa_finalize>:
c000f06e:	c3                   	ret    

c000f06f <__stack_chk_fail>:
c000f06f:	55                   	push   ebp
c000f070:	89 e5                	mov    ebp,esp
c000f072:	83 ec 10             	sub    esp,0x10
c000f075:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000f078:	68 26 19 02 c0       	push   0xc0021926
c000f07d:	e8 93 01 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000f082:	58                   	pop    eax
c000f083:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f086:	5a                   	pop    edx
c000f087:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f08a:	68 26 19 02 c0       	push   0xc0021926
c000f08f:	e8 81 01 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000f094:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f097:	59                   	pop    ecx
c000f098:	5a                   	pop    edx
c000f099:	8b 00                	mov    eax,DWORD PTR [eax]
c000f09b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f09e:	68 26 19 02 c0       	push   0xc0021926
c000f0a3:	e8 6d 01 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000f0a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f0ab:	59                   	pop    ecx
c000f0ac:	5a                   	pop    edx
c000f0ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0af:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f0b4:	68 26 19 02 c0       	push   0xc0021926
c000f0b9:	e8 57 01 00 00       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c000f0be:	c7 04 24 2e 19 02 c0 	mov    DWORD PTR [esp],0xc002192e
c000f0c5:	e8 7a 69 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c000f0ca:	83 c4 10             	add    esp,0x10
c000f0cd:	c9                   	leave  
c000f0ce:	c3                   	ret    

c000f0cf <__cxa_pure_virtual>:
c000f0cf:	83 ec 18             	sub    esp,0x18
c000f0d2:	68 46 19 02 c0       	push   0xc0021946
c000f0d7:	e8 68 69 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c000f0dc:	83 c4 1c             	add    esp,0x1c
c000f0df:	c3                   	ret    

c000f0e0 <operator new(unsigned long)>:
c000f0e0:	e9 fe ce ff ff       	jmp    c000bfe3 <malloc>

c000f0e5 <operator new[](unsigned long)>:
c000f0e5:	e9 f9 ce ff ff       	jmp    c000bfe3 <malloc>

c000f0ea <operator delete(void*)>:
c000f0ea:	e9 14 cf ff ff       	jmp    c000c003 <rfree>

c000f0ef <operator delete(void*, unsigned long)>:
c000f0ef:	e9 0f cf ff ff       	jmp    c000c003 <rfree>

c000f0f4 <operator delete[](void*)>:
c000f0f4:	e9 0a cf ff ff       	jmp    c000c003 <rfree>

c000f0f9 <operator delete[](void*, unsigned long)>:
c000f0f9:	e9 05 cf ff ff       	jmp    c000c003 <rfree>

c000f0fe <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000f0fe:	57                   	push   edi
c000f0ff:	56                   	push   esi
c000f100:	be 5d 19 02 c0       	mov    esi,0xc002195d
c000f105:	53                   	push   ebx
c000f106:	83 ec 40             	sub    esp,0x40
c000f109:	a0 5c 19 02 c0       	mov    al,ds:0xc002195c
c000f10e:	8d 7c 24 02          	lea    edi,[esp+0x2]
c000f112:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c000f116:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000f11a:	b8 3e 00 00 00       	mov    eax,0x3e
c000f11f:	f7 c7 02 00 00 00    	test   edi,0x2
c000f125:	75 69                	jne    c000f190 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x92>
c000f127:	89 c1                	mov    ecx,eax
c000f129:	c1 e9 02             	shr    ecx,0x2
c000f12c:	fc                   	cld    
c000f12d:	31 d2                	xor    edx,edx
c000f12f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f131:	a8 02                	test   al,0x2
c000f133:	74 0b                	je     c000f140 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x42>
c000f135:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f138:	66 89 17             	mov    WORD PTR [edi],dx
c000f13b:	ba 02 00 00 00       	mov    edx,0x2
c000f140:	a8 01                	test   al,0x1
c000f142:	74 06                	je     c000f14a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000f144:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000f147:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000f14a:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000f14e:	83 f9 3e             	cmp    ecx,0x3e
c000f151:	7e 05                	jle    c000f158 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5a>
c000f153:	b9 3e 00 00 00       	mov    ecx,0x3e
c000f158:	89 df                	mov    edi,ebx
c000f15a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000f15e:	eb 02                	jmp    c000f162 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x64>
c000f160:	89 c7                	mov    edi,eax
c000f162:	31 d2                	xor    edx,edx
c000f164:	89 f8                	mov    eax,edi
c000f166:	46                   	inc    esi
c000f167:	f7 f1                	div    ecx
c000f169:	39 cf                	cmp    edi,ecx
c000f16b:	73 f3                	jae    c000f160 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x62>
c000f16d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000f170:	eb 02                	jmp    c000f174 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x76>
c000f172:	89 c3                	mov    ebx,eax
c000f174:	31 d2                	xor    edx,edx
c000f176:	89 d8                	mov    eax,ebx
c000f178:	f7 f1                	div    ecx
c000f17a:	4e                   	dec    esi
c000f17b:	39 cb                	cmp    ebx,ecx
c000f17d:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000f181:	88 16                	mov    BYTE PTR [esi],dl
c000f183:	73 ed                	jae    c000f172 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x74>
c000f185:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f189:	83 c4 40             	add    esp,0x40
c000f18c:	5b                   	pop    ebx
c000f18d:	5e                   	pop    esi
c000f18e:	5f                   	pop    edi
c000f18f:	c3                   	ret    
c000f190:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f193:	83 c7 02             	add    edi,0x2
c000f196:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000f19a:	83 c6 02             	add    esi,0x2
c000f19d:	83 e8 02             	sub    eax,0x2
c000f1a0:	eb 85                	jmp    c000f127 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>

c000f1a2 <Dbg::logc(char)>:
c000f1a2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1a6:	ba fd 03 00 00       	mov    edx,0x3fd
c000f1ab:	ec                   	in     al,dx
c000f1ac:	a8 20                	test   al,0x20
c000f1ae:	74 fb                	je     c000f1ab <Dbg::logc(char)+0x9>
c000f1b0:	ba f8 03 00 00       	mov    edx,0x3f8
c000f1b5:	88 c8                	mov    al,cl
c000f1b7:	ee                   	out    dx,al
c000f1b8:	c3                   	ret    

c000f1b9 <Dbg::logs(char*)>:
c000f1b9:	53                   	push   ebx
c000f1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000f1be:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f1c1:	84 c0                	test   al,al
c000f1c3:	74 0f                	je     c000f1d4 <Dbg::logs(char*)+0x1b>
c000f1c5:	43                   	inc    ebx
c000f1c6:	50                   	push   eax
c000f1c7:	e8 d6 ff ff ff       	call   c000f1a2 <Dbg::logc(char)>
c000f1cc:	5a                   	pop    edx
c000f1cd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f1d0:	84 c0                	test   al,al
c000f1d2:	75 f1                	jne    c000f1c5 <Dbg::logs(char*)+0xc>
c000f1d4:	5b                   	pop    ebx
c000f1d5:	c3                   	ret    

c000f1d6 <Dbg::logWriteInt(unsigned int)>:
c000f1d6:	83 ec 10             	sub    esp,0x10
c000f1d9:	6a 0a                	push   0xa
c000f1db:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f1df:	50                   	push   eax
c000f1e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f1e4:	50                   	push   eax
c000f1e5:	e8 14 ff ff ff       	call   c000f0fe <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f1ea:	50                   	push   eax
c000f1eb:	e8 c9 ff ff ff       	call   c000f1b9 <Dbg::logs(char*)>
c000f1f0:	83 c4 20             	add    esp,0x20
c000f1f3:	c3                   	ret    

c000f1f4 <Dbg::logWriteIntBase(unsigned int, int)>:
c000f1f4:	83 ec 10             	sub    esp,0x10
c000f1f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f1fb:	50                   	push   eax
c000f1fc:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f200:	50                   	push   eax
c000f201:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f205:	52                   	push   edx
c000f206:	e8 f3 fe ff ff       	call   c000f0fe <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f20b:	50                   	push   eax
c000f20c:	e8 a8 ff ff ff       	call   c000f1b9 <Dbg::logs(char*)>
c000f211:	83 c4 20             	add    esp,0x20
c000f214:	c3                   	ret    

c000f215 <Dbg::kprintf(char const*, ...)>:
c000f215:	55                   	push   ebp
c000f216:	57                   	push   edi
c000f217:	56                   	push   esi
c000f218:	53                   	push   ebx
c000f219:	83 ec 0c             	sub    esp,0xc
c000f21c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f220:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f224:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f228:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f22b:	84 c0                	test   al,al
c000f22d:	74 4d                	je     c000f27c <Dbg::kprintf(char const*, ...)+0x67>
c000f22f:	31 ff                	xor    edi,edi
c000f231:	8d 77 01             	lea    esi,[edi+0x1]
c000f234:	3c 25                	cmp    al,0x25
c000f236:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000f239:	0f 85 ec 00 00 00    	jne    c000f32b <Dbg::kprintf(char const*, ...)+0x116>
c000f23f:	83 c7 02             	add    edi,0x2
c000f242:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f245:	83 e8 25             	sub    eax,0x25
c000f248:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000f24b:	3c 53                	cmp    al,0x53
c000f24d:	0f 87 c0 00 00 00    	ja     c000f313 <Dbg::kprintf(char const*, ...)+0xfe>
c000f253:	25 ff 00 00 00       	and    eax,0xff
c000f258:	ff 24 85 9c 19 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde664]
c000f25f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f263:	89 c8                	mov    eax,ecx
c000f265:	83 c1 04             	add    ecx,0x4
c000f268:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f26c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f26e:	50                   	push   eax
c000f26f:	e8 45 ff ff ff       	call   c000f1b9 <Dbg::logs(char*)>
c000f274:	58                   	pop    eax
c000f275:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000f278:	84 c0                	test   al,al
c000f27a:	75 b5                	jne    c000f231 <Dbg::kprintf(char const*, ...)+0x1c>
c000f27c:	83 c4 0c             	add    esp,0xc
c000f27f:	5b                   	pop    ebx
c000f280:	5e                   	pop    esi
c000f281:	5f                   	pop    edi
c000f282:	5d                   	pop    ebp
c000f283:	c3                   	ret    
c000f284:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f288:	89 d0                	mov    eax,edx
c000f28a:	83 c2 04             	add    edx,0x4
c000f28d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f291:	8b 00                	mov    eax,DWORD PTR [eax]
c000f293:	50                   	push   eax
c000f294:	e8 3d ff ff ff       	call   c000f1d6 <Dbg::logWriteInt(unsigned int)>
c000f299:	58                   	pop    eax
c000f29a:	eb d9                	jmp    c000f275 <Dbg::kprintf(char const*, ...)+0x60>
c000f29c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2a0:	89 d0                	mov    eax,edx
c000f2a2:	83 c2 04             	add    edx,0x4
c000f2a5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f2a9:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000f2ac:	50                   	push   eax
c000f2ad:	e8 f0 fe ff ff       	call   c000f1a2 <Dbg::logc(char)>
c000f2b2:	58                   	pop    eax
c000f2b3:	eb c0                	jmp    c000f275 <Dbg::kprintf(char const*, ...)+0x60>
c000f2b5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f2b9:	89 c8                	mov    eax,ecx
c000f2bb:	83 c1 04             	add    ecx,0x4
c000f2be:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f2c2:	8b 28                	mov    ebp,DWORD PTR [eax]
c000f2c4:	55                   	push   ebp
c000f2c5:	e8 0c ff ff ff       	call   c000f1d6 <Dbg::logWriteInt(unsigned int)>
c000f2ca:	58                   	pop    eax
c000f2cb:	eb a8                	jmp    c000f275 <Dbg::kprintf(char const*, ...)+0x60>
c000f2cd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f2d1:	89 c8                	mov    eax,ecx
c000f2d3:	83 c1 04             	add    ecx,0x4
c000f2d6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f2da:	6a 10                	push   0x10
c000f2dc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f2de:	51                   	push   ecx
c000f2df:	e8 10 ff ff ff       	call   c000f1f4 <Dbg::logWriteIntBase(unsigned int, int)>
c000f2e4:	5d                   	pop    ebp
c000f2e5:	58                   	pop    eax
c000f2e6:	eb 8d                	jmp    c000f275 <Dbg::kprintf(char const*, ...)+0x60>
c000f2e8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2ec:	89 d0                	mov    eax,edx
c000f2ee:	83 c2 08             	add    edx,0x8
c000f2f1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f2f5:	6a 10                	push   0x10
c000f2f7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2f9:	50                   	push   eax
c000f2fa:	e8 f5 fe ff ff       	call   c000f1f4 <Dbg::logWriteIntBase(unsigned int, int)>
c000f2ff:	58                   	pop    eax
c000f300:	5a                   	pop    edx
c000f301:	e9 6f ff ff ff       	jmp    c000f275 <Dbg::kprintf(char const*, ...)+0x60>
c000f306:	6a 25                	push   0x25
c000f308:	e8 95 fe ff ff       	call   c000f1a2 <Dbg::logc(char)>
c000f30d:	5a                   	pop    edx
c000f30e:	e9 62 ff ff ff       	jmp    c000f275 <Dbg::kprintf(char const*, ...)+0x60>
c000f313:	6a 25                	push   0x25
c000f315:	e8 88 fe ff ff       	call   c000f1a2 <Dbg::logc(char)>
c000f31a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000f31e:	50                   	push   eax
c000f31f:	e8 7e fe ff ff       	call   c000f1a2 <Dbg::logc(char)>
c000f324:	5a                   	pop    edx
c000f325:	59                   	pop    ecx
c000f326:	e9 4a ff ff ff       	jmp    c000f275 <Dbg::kprintf(char const*, ...)+0x60>
c000f32b:	50                   	push   eax
c000f32c:	89 f7                	mov    edi,esi
c000f32e:	e8 6f fe ff ff       	call   c000f1a2 <Dbg::logc(char)>
c000f333:	89 ee                	mov    esi,ebp
c000f335:	58                   	pop    eax
c000f336:	e9 3a ff ff ff       	jmp    c000f275 <Dbg::kprintf(char const*, ...)+0x60>
c000f33b:	90                   	nop

c000f33c <File::read(unsigned long long, void*, int*)>:
c000f33c:	53                   	push   ebx
c000f33d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f341:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f345:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f34c:	3c 19                	cmp    al,0x19
c000f34e:	77 35                	ja     c000f385 <File::read(unsigned long long, void*, int*)+0x49>
c000f350:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c000f357:	85 c0                	test   eax,eax
c000f359:	74 2a                	je     c000f385 <File::read(unsigned long long, void*, int*)+0x49>
c000f35b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f361:	85 c0                	test   eax,eax
c000f363:	74 20                	je     c000f385 <File::read(unsigned long long, void*, int*)+0x49>
c000f365:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f369:	74 21                	je     c000f38c <File::read(unsigned long long, void*, int*)+0x50>
c000f36b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f36d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f371:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f377:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f37b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f37f:	5b                   	pop    ebx
c000f380:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000f383:	ff e0                	jmp    eax
c000f385:	b8 0b 00 00 00       	mov    eax,0xb
c000f38a:	eb 05                	jmp    c000f391 <File::read(unsigned long long, void*, int*)+0x55>
c000f38c:	b8 05 00 00 00       	mov    eax,0x5
c000f391:	5b                   	pop    ebx
c000f392:	c3                   	ret    
c000f393:	90                   	nop

c000f394 <File::write(unsigned long long, void*, int*)>:
c000f394:	53                   	push   ebx
c000f395:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f399:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f39d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f3a4:	3c 19                	cmp    al,0x19
c000f3a6:	77 35                	ja     c000f3dd <File::write(unsigned long long, void*, int*)+0x49>
c000f3a8:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c000f3af:	85 c0                	test   eax,eax
c000f3b1:	74 2a                	je     c000f3dd <File::write(unsigned long long, void*, int*)+0x49>
c000f3b3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f3b9:	85 c0                	test   eax,eax
c000f3bb:	74 20                	je     c000f3dd <File::write(unsigned long long, void*, int*)+0x49>
c000f3bd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f3c1:	74 21                	je     c000f3e4 <File::write(unsigned long long, void*, int*)+0x50>
c000f3c3:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f3c5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f3c9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f3cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f3d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f3d7:	5b                   	pop    ebx
c000f3d8:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000f3db:	ff e0                	jmp    eax
c000f3dd:	b8 0b 00 00 00       	mov    eax,0xb
c000f3e2:	eb 05                	jmp    c000f3e9 <File::write(unsigned long long, void*, int*)+0x55>
c000f3e4:	b8 05 00 00 00       	mov    eax,0x5
c000f3e9:	5b                   	pop    ebx
c000f3ea:	c3                   	ret    
c000f3eb:	90                   	nop

c000f3ec <Directory::read(unsigned long long, void*, int*)>:
c000f3ec:	53                   	push   ebx
c000f3ed:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f3f1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f3f5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f3fc:	3c 19                	cmp    al,0x19
c000f3fe:	77 35                	ja     c000f435 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f400:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c000f407:	85 c0                	test   eax,eax
c000f409:	74 2a                	je     c000f435 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f40b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f411:	85 c0                	test   eax,eax
c000f413:	74 20                	je     c000f435 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f415:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f419:	74 21                	je     c000f43c <Directory::read(unsigned long long, void*, int*)+0x50>
c000f41b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f41d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f421:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f427:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f42b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f42f:	5b                   	pop    ebx
c000f430:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000f433:	ff e0                	jmp    eax
c000f435:	b8 0b 00 00 00       	mov    eax,0xb
c000f43a:	eb 05                	jmp    c000f441 <Directory::read(unsigned long long, void*, int*)+0x55>
c000f43c:	b8 05 00 00 00       	mov    eax,0x5
c000f441:	5b                   	pop    ebx
c000f442:	c3                   	ret    
c000f443:	90                   	nop

c000f444 <Directory::write(unsigned long long, void*, int*)>:
c000f444:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f448:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f44f:	b8 0b 00 00 00       	mov    eax,0xb
c000f454:	80 fa 19             	cmp    dl,0x19
c000f457:	77 18                	ja     c000f471 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f459:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000f460:	85 d2                	test   edx,edx
c000f462:	74 0d                	je     c000f471 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f464:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f46b:	19 c0                	sbb    eax,eax
c000f46d:	83 e0 0a             	and    eax,0xa
c000f470:	40                   	inc    eax
c000f471:	c3                   	ret    

c000f472 <File::isAtty()>:
c000f472:	31 c0                	xor    eax,eax
c000f474:	c3                   	ret    
c000f475:	90                   	nop

c000f476 <Directory::isAtty()>:
c000f476:	31 c0                	xor    eax,eax
c000f478:	c3                   	ret    
c000f479:	90                   	nop

c000f47a <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f47a:	b8 0a 00 00 00       	mov    eax,0xa
c000f47f:	c3                   	ret    

c000f480 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f480:	b8 0a 00 00 00       	mov    eax,0xa
c000f485:	c3                   	ret    

c000f486 <File::~File()>:
c000f486:	83 ec 0c             	sub    esp,0xc
c000f489:	ba 58 1b 02 c0       	mov    edx,0xc0021b58
c000f48e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f492:	89 10                	mov    DWORD PTR [eax],edx
c000f494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f498:	83 ec 0c             	sub    esp,0xc
c000f49b:	50                   	push   eax
c000f49c:	e8 c5 ea ff ff       	call   c000df66 <UnixFile::~UnixFile()>
c000f4a1:	83 c4 10             	add    esp,0x10
c000f4a4:	90                   	nop
c000f4a5:	83 c4 0c             	add    esp,0xc
c000f4a8:	c3                   	ret    
c000f4a9:	90                   	nop

c000f4aa <File::~File()>:
c000f4aa:	83 ec 0c             	sub    esp,0xc
c000f4ad:	83 ec 0c             	sub    esp,0xc
c000f4b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4b4:	e8 cd ff ff ff       	call   c000f486 <File::~File()>
c000f4b9:	83 c4 10             	add    esp,0x10
c000f4bc:	83 ec 08             	sub    esp,0x8
c000f4bf:	68 14 01 00 00       	push   0x114
c000f4c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4c8:	e8 22 fc ff ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c000f4cd:	83 c4 10             	add    esp,0x10
c000f4d0:	83 c4 0c             	add    esp,0xc
c000f4d3:	c3                   	ret    

c000f4d4 <Directory::~Directory()>:
c000f4d4:	83 ec 0c             	sub    esp,0xc
c000f4d7:	ba 74 1b 02 c0       	mov    edx,0xc0021b74
c000f4dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4e0:	89 10                	mov    DWORD PTR [eax],edx
c000f4e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4e6:	83 ec 0c             	sub    esp,0xc
c000f4e9:	50                   	push   eax
c000f4ea:	e8 77 ea ff ff       	call   c000df66 <UnixFile::~UnixFile()>
c000f4ef:	83 c4 10             	add    esp,0x10
c000f4f2:	90                   	nop
c000f4f3:	83 c4 0c             	add    esp,0xc
c000f4f6:	c3                   	ret    
c000f4f7:	90                   	nop

c000f4f8 <Directory::~Directory()>:
c000f4f8:	83 ec 0c             	sub    esp,0xc
c000f4fb:	83 ec 0c             	sub    esp,0xc
c000f4fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f502:	e8 cd ff ff ff       	call   c000f4d4 <Directory::~Directory()>
c000f507:	83 c4 10             	add    esp,0x10
c000f50a:	83 ec 08             	sub    esp,0x8
c000f50d:	68 14 01 00 00       	push   0x114
c000f512:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f516:	e8 d4 fb ff ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c000f51b:	83 c4 10             	add    esp,0x10
c000f51e:	83 c4 0c             	add    esp,0xc
c000f521:	c3                   	ret    

c000f522 <Filesystem::Filesystem()>:
c000f522:	ba f4 1a 02 c0       	mov    edx,0xc0021af4
c000f527:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f52b:	89 10                	mov    DWORD PTR [eax],edx
c000f52d:	8b 15 08 49 02 c0    	mov    edx,DWORD PTR ds:0xc0024908
c000f533:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f537:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f53a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f53e:	a3 08 49 02 c0       	mov    ds:0xc0024908,eax
c000f543:	90                   	nop
c000f544:	c3                   	ret    
c000f545:	90                   	nop

c000f546 <Filesystem::~Filesystem()>:
c000f546:	ba f4 1a 02 c0       	mov    edx,0xc0021af4
c000f54b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f54f:	89 10                	mov    DWORD PTR [eax],edx
c000f551:	90                   	nop
c000f552:	c3                   	ret    
c000f553:	90                   	nop

c000f554 <Filesystem::~Filesystem()>:
c000f554:	83 ec 0c             	sub    esp,0xc
c000f557:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f55b:	e8 e6 ff ff ff       	call   c000f546 <Filesystem::~Filesystem()>
c000f560:	83 c4 04             	add    esp,0x4
c000f563:	83 ec 08             	sub    esp,0x8
c000f566:	6a 08                	push   0x8
c000f568:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f56c:	e8 7e fb ff ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c000f571:	83 c4 10             	add    esp,0x10
c000f574:	83 c4 0c             	add    esp,0xc
c000f577:	c3                   	ret    

c000f578 <initVFS()>:
c000f578:	83 ec 18             	sub    esp,0x18
c000f57b:	6a 08                	push   0x8
c000f57d:	e8 5e fb ff ff       	call   c000f0e0 <operator new(unsigned long)>
c000f582:	89 04 24             	mov    DWORD PTR [esp],eax
c000f585:	e8 da b3 00 00       	call   c001a964 <FAT::FAT()>
c000f58a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f591:	e8 4a fb ff ff       	call   c000f0e0 <operator new(unsigned long)>
c000f596:	89 04 24             	mov    DWORD PTR [esp],eax
c000f599:	e8 66 c6 00 00       	call   c001bc04 <ISO9660::ISO9660()>
c000f59e:	83 c4 1c             	add    esp,0x1c
c000f5a1:	c3                   	ret    

c000f5a2 <standardiseFiles(char*, char const*, char const*)>:
c000f5a2:	55                   	push   ebp
c000f5a3:	57                   	push   edi
c000f5a4:	56                   	push   esi
c000f5a5:	53                   	push   ebx
c000f5a6:	81 ec 10 04 00 00    	sub    esp,0x410
c000f5ac:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f5b3:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f5ba:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f5c1:	68 00 04 00 00       	push   0x400
c000f5c6:	6a 00                	push   0x0
c000f5c8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f5cc:	56                   	push   esi
c000f5cd:	e8 f2 10 ff ff       	call   c00006c4 <memset>
c000f5d2:	83 c4 10             	add    esp,0x10
c000f5d5:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f5d9:	75 0b                	jne    c000f5e6 <standardiseFiles(char*, char const*, char const*)+0x44>
c000f5db:	50                   	push   eax
c000f5dc:	50                   	push   eax
c000f5dd:	57                   	push   edi
c000f5de:	56                   	push   esi
c000f5df:	e8 7f 11 ff ff       	call   c0000763 <strcpy>
c000f5e4:	eb 41                	jmp    c000f627 <standardiseFiles(char*, char const*, char const*)+0x85>
c000f5e6:	8a 07                	mov    al,BYTE PTR [edi]
c000f5e8:	3c 5c                	cmp    al,0x5c
c000f5ea:	74 04                	je     c000f5f0 <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f5ec:	3c 2f                	cmp    al,0x2f
c000f5ee:	75 18                	jne    c000f608 <standardiseFiles(char*, char const*, char const*)+0x66>
c000f5f0:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f5f3:	3c 60                	cmp    al,0x60
c000f5f5:	7e 03                	jle    c000f5fa <standardiseFiles(char*, char const*, char const*)+0x58>
c000f5f7:	83 e8 20             	sub    eax,0x20
c000f5fa:	88 04 24             	mov    BYTE PTR [esp],al
c000f5fd:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f604:	50                   	push   eax
c000f605:	50                   	push   eax
c000f606:	eb 18                	jmp    c000f620 <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f608:	50                   	push   eax
c000f609:	50                   	push   eax
c000f60a:	55                   	push   ebp
c000f60b:	56                   	push   esi
c000f60c:	e8 52 11 ff ff       	call   c0000763 <strcpy>
c000f611:	5a                   	pop    edx
c000f612:	59                   	pop    ecx
c000f613:	68 54 2e 02 c0       	push   0xc0022e54
c000f618:	56                   	push   esi
c000f619:	e8 fc 11 ff ff       	call   c000081a <strcat>
c000f61e:	5d                   	pop    ebp
c000f61f:	58                   	pop    eax
c000f620:	57                   	push   edi
c000f621:	56                   	push   esi
c000f622:	e8 f3 11 ff ff       	call   c000081a <strcat>
c000f627:	83 c4 10             	add    esp,0x10
c000f62a:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f62d:	3c 60                	cmp    al,0x60
c000f62f:	7e 03                	jle    c000f634 <standardiseFiles(char*, char const*, char const*)+0x92>
c000f631:	83 e8 20             	sub    eax,0x20
c000f634:	88 04 24             	mov    BYTE PTR [esp],al
c000f637:	88 03                	mov    BYTE PTR [ebx],al
c000f639:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f640:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f646:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f64a:	bf 03 00 00 00       	mov    edi,0x3
c000f64f:	b8 03 00 00 00       	mov    eax,0x3
c000f654:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f657:	84 d2                	test   dl,dl
c000f659:	0f 84 91 00 00 00    	je     c000f6f0 <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f65f:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f662:	80 fa 2f             	cmp    dl,0x2f
c000f665:	74 05                	je     c000f66c <standardiseFiles(char*, char const*, char const*)+0xca>
c000f667:	80 fa 5c             	cmp    dl,0x5c
c000f66a:	75 12                	jne    c000f67e <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f66c:	89 c5                	mov    ebp,eax
c000f66e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f673:	74 09                	je     c000f67e <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f675:	40                   	inc    eax
c000f676:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f67a:	89 cf                	mov    edi,ecx
c000f67c:	eb d6                	jmp    c000f654 <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f67e:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f683:	75 5b                	jne    c000f6e0 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f685:	80 fa 2e             	cmp    dl,0x2e
c000f688:	75 56                	jne    c000f6e0 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f68a:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f68e:	74 19                	je     c000f6a9 <standardiseFiles(char*, char const*, char const*)+0x107>
c000f690:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f695:	74 53                	je     c000f6ea <standardiseFiles(char*, char const*, char const*)+0x148>
c000f697:	89 f9                	mov    ecx,edi
c000f699:	41                   	inc    ecx
c000f69a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f69d:	80 fa 5c             	cmp    dl,0x5c
c000f6a0:	74 f7                	je     c000f699 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f6a2:	80 fa 2f             	cmp    dl,0x2f
c000f6a5:	74 f2                	je     c000f699 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f6a7:	eb d1                	jmp    c000f67a <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6a9:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f6ae:	74 3a                	je     c000f6ea <standardiseFiles(char*, char const*, char const*)+0x148>
c000f6b0:	83 f8 03             	cmp    eax,0x3
c000f6b3:	74 c5                	je     c000f67a <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6b5:	41                   	inc    ecx
c000f6b6:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f6b9:	80 fa 2f             	cmp    dl,0x2f
c000f6bc:	74 f7                	je     c000f6b5 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f6be:	80 fa 5c             	cmp    dl,0x5c
c000f6c1:	74 f2                	je     c000f6b5 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f6c3:	48                   	dec    eax
c000f6c4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f6c8:	75 06                	jne    c000f6d0 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f6ca:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f6ce:	eb f3                	jmp    c000f6c3 <standardiseFiles(char*, char const*, char const*)+0x121>
c000f6d0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f6d4:	74 07                	je     c000f6dd <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f6d6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f6da:	48                   	dec    eax
c000f6db:	eb f3                	jmp    c000f6d0 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f6dd:	40                   	inc    eax
c000f6de:	eb 9a                	jmp    c000f67a <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6e0:	80 fa 2f             	cmp    dl,0x2f
c000f6e3:	74 95                	je     c000f67a <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6e5:	80 fa 5c             	cmp    dl,0x5c
c000f6e8:	74 90                	je     c000f67a <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6ea:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f6ed:	40                   	inc    eax
c000f6ee:	eb 8a                	jmp    c000f67a <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6f0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f6f4:	83 ec 0c             	sub    esp,0xc
c000f6f7:	53                   	push   ebx
c000f6f8:	e8 e4 0f ff ff       	call   c00006e1 <strlen>
c000f6fd:	83 c4 10             	add    esp,0x10
c000f700:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f705:	75 26                	jne    c000f72d <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f707:	83 ec 0c             	sub    esp,0xc
c000f70a:	53                   	push   ebx
c000f70b:	e8 d1 0f ff ff       	call   c00006e1 <strlen>
c000f710:	83 c4 10             	add    esp,0x10
c000f713:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f718:	74 26                	je     c000f740 <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f71a:	83 ec 0c             	sub    esp,0xc
c000f71d:	53                   	push   ebx
c000f71e:	e8 be 0f ff ff       	call   c00006e1 <strlen>
c000f723:	83 c4 10             	add    esp,0x10
c000f726:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f72b:	eb c7                	jmp    c000f6f4 <standardiseFiles(char*, char const*, char const*)+0x152>
c000f72d:	83 ec 0c             	sub    esp,0xc
c000f730:	53                   	push   ebx
c000f731:	e8 ab 0f ff ff       	call   c00006e1 <strlen>
c000f736:	83 c4 10             	add    esp,0x10
c000f739:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f73e:	74 c7                	je     c000f707 <standardiseFiles(char*, char const*, char const*)+0x165>
c000f740:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f746:	5b                   	pop    ebx
c000f747:	5e                   	pop    esi
c000f748:	5f                   	pop    edi
c000f749:	5d                   	pop    ebp
c000f74a:	c3                   	ret    
c000f74b:	90                   	nop

c000f74c <File::File(char const*, Process*)>:
c000f74c:	83 ec 0c             	sub    esp,0xc
c000f74f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f753:	83 ec 08             	sub    esp,0x8
c000f756:	6a 00                	push   0x0
c000f758:	50                   	push   eax
c000f759:	e8 66 e6 ff ff       	call   c000ddc4 <UnixFile::UnixFile(int)>
c000f75e:	83 c4 10             	add    esp,0x10
c000f761:	ba 58 1b 02 c0       	mov    edx,0xc0021b58
c000f766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f76a:	89 10                	mov    DWORD PTR [eax],edx
c000f76c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f770:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f77a:	83 c0 0d             	add    eax,0xd
c000f77d:	83 ec 04             	sub    esp,0x4
c000f780:	52                   	push   edx
c000f781:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f785:	50                   	push   eax
c000f786:	e8 17 fe ff ff       	call   c000f5a2 <standardiseFiles(char*, char const*, char const*)>
c000f78b:	83 c4 10             	add    esp,0x10
c000f78e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f792:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f795:	8d 50 bf             	lea    edx,[eax-0x41]
c000f798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f79c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f7a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7a6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f7aa:	90                   	nop
c000f7ab:	83 c4 0c             	add    esp,0xc
c000f7ae:	c3                   	ret    
c000f7af:	90                   	nop

c000f7b0 <File::open(FileOpenMode)>:
c000f7b0:	53                   	push   ebx
c000f7b1:	b8 0b 00 00 00       	mov    eax,0xb
c000f7b6:	83 ec 08             	sub    esp,0x8
c000f7b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f7bd:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f7c4:	80 fa 19             	cmp    dl,0x19
c000f7c7:	77 40                	ja     c000f809 <File::open(FileOpenMode)+0x59>
c000f7c9:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000f7d0:	85 d2                	test   edx,edx
c000f7d2:	74 35                	je     c000f809 <File::open(FileOpenMode)+0x59>
c000f7d4:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f7da:	85 d2                	test   edx,edx
c000f7dc:	74 2b                	je     c000f809 <File::open(FileOpenMode)+0x59>
c000f7de:	b8 06 00 00 00       	mov    eax,0x6
c000f7e3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f7e7:	75 20                	jne    c000f809 <File::open(FileOpenMode)+0x59>
c000f7e9:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7eb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f7f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f7f5:	51                   	push   ecx
c000f7f6:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f7f9:	51                   	push   ecx
c000f7fa:	52                   	push   edx
c000f7fb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f7fe:	83 c4 10             	add    esp,0x10
c000f801:	85 c0                	test   eax,eax
c000f803:	75 04                	jne    c000f809 <File::open(FileOpenMode)+0x59>
c000f805:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f809:	83 c4 08             	add    esp,0x8
c000f80c:	5b                   	pop    ebx
c000f80d:	c3                   	ret    

c000f80e <File::close()>:
c000f80e:	53                   	push   ebx
c000f80f:	b8 0b 00 00 00       	mov    eax,0xb
c000f814:	83 ec 08             	sub    esp,0x8
c000f817:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f81b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f822:	80 fa 19             	cmp    dl,0x19
c000f825:	77 41                	ja     c000f868 <File::close()+0x5a>
c000f827:	8b 1c 95 a0 4d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb260]
c000f82e:	85 db                	test   ebx,ebx
c000f830:	74 36                	je     c000f868 <File::close()+0x5a>
c000f832:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f839:	74 2d                	je     c000f868 <File::close()+0x5a>
c000f83b:	b8 05 00 00 00       	mov    eax,0x5
c000f840:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f844:	74 22                	je     c000f868 <File::close()+0x5a>
c000f846:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f84a:	8b 04 95 a0 4d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb260]
c000f851:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f857:	53                   	push   ebx
c000f858:	53                   	push   ebx
c000f859:	8b 10                	mov    edx,DWORD PTR [eax]
c000f85b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f861:	50                   	push   eax
c000f862:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f865:	83 c4 10             	add    esp,0x10
c000f868:	83 c4 08             	add    esp,0x8
c000f86b:	5b                   	pop    ebx
c000f86c:	c3                   	ret    
c000f86d:	90                   	nop

c000f86e <File::seek(unsigned long long)>:
c000f86e:	56                   	push   esi
c000f86f:	b8 0b 00 00 00       	mov    eax,0xb
c000f874:	53                   	push   ebx
c000f875:	51                   	push   ecx
c000f876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f87a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f87e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f882:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f889:	80 fa 19             	cmp    dl,0x19
c000f88c:	77 31                	ja     c000f8bf <File::seek(unsigned long long)+0x51>
c000f88e:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000f895:	85 d2                	test   edx,edx
c000f897:	74 26                	je     c000f8bf <File::seek(unsigned long long)+0x51>
c000f899:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f89f:	85 d2                	test   edx,edx
c000f8a1:	74 1c                	je     c000f8bf <File::seek(unsigned long long)+0x51>
c000f8a3:	b8 05 00 00 00       	mov    eax,0x5
c000f8a8:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f8ac:	74 11                	je     c000f8bf <File::seek(unsigned long long)+0x51>
c000f8ae:	8b 02                	mov    eax,DWORD PTR [edx]
c000f8b0:	53                   	push   ebx
c000f8b1:	51                   	push   ecx
c000f8b2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f8b8:	52                   	push   edx
c000f8b9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f8bc:	83 c4 10             	add    esp,0x10
c000f8bf:	5a                   	pop    edx
c000f8c0:	5b                   	pop    ebx
c000f8c1:	5e                   	pop    esi
c000f8c2:	c3                   	ret    
c000f8c3:	90                   	nop

c000f8c4 <File::tell(unsigned long long*)>:
c000f8c4:	83 ec 0c             	sub    esp,0xc
c000f8c7:	b8 0b 00 00 00       	mov    eax,0xb
c000f8cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f8d0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f8d7:	80 fa 19             	cmp    dl,0x19
c000f8da:	77 34                	ja     c000f910 <File::tell(unsigned long long*)+0x4c>
c000f8dc:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000f8e3:	85 d2                	test   edx,edx
c000f8e5:	74 29                	je     c000f910 <File::tell(unsigned long long*)+0x4c>
c000f8e7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f8ed:	85 d2                	test   edx,edx
c000f8ef:	74 1f                	je     c000f910 <File::tell(unsigned long long*)+0x4c>
c000f8f1:	b8 05 00 00 00       	mov    eax,0x5
c000f8f6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f8fa:	74 14                	je     c000f910 <File::tell(unsigned long long*)+0x4c>
c000f8fc:	50                   	push   eax
c000f8fd:	8b 02                	mov    eax,DWORD PTR [edx]
c000f8ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f903:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f909:	52                   	push   edx
c000f90a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f90d:	83 c4 10             	add    esp,0x10
c000f910:	83 c4 0c             	add    esp,0xc
c000f913:	c3                   	ret    

c000f914 <File::rewind()>:
c000f914:	83 ec 10             	sub    esp,0x10
c000f917:	6a 00                	push   0x0
c000f919:	6a 00                	push   0x0
c000f91b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f91f:	e8 4a ff ff ff       	call   c000f86e <File::seek(unsigned long long)>
c000f924:	83 c4 1c             	add    esp,0x1c
c000f927:	c3                   	ret    

c000f928 <File::unlink()>:
c000f928:	83 ec 0c             	sub    esp,0xc
c000f92b:	b8 0b 00 00 00       	mov    eax,0xb
c000f930:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f934:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f93b:	80 f9 19             	cmp    cl,0x19
c000f93e:	77 2f                	ja     c000f96f <File::unlink()+0x47>
c000f940:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000f947:	85 c9                	test   ecx,ecx
c000f949:	74 24                	je     c000f96f <File::unlink()+0x47>
c000f94b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f951:	85 c9                	test   ecx,ecx
c000f953:	74 1a                	je     c000f96f <File::unlink()+0x47>
c000f955:	b8 06 00 00 00       	mov    eax,0x6
c000f95a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f95e:	75 0f                	jne    c000f96f <File::unlink()+0x47>
c000f960:	50                   	push   eax
c000f961:	83 c2 0d             	add    edx,0xd
c000f964:	50                   	push   eax
c000f965:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f967:	52                   	push   edx
c000f968:	51                   	push   ecx
c000f969:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f96c:	83 c4 10             	add    esp,0x10
c000f96f:	83 c4 0c             	add    esp,0xc
c000f972:	c3                   	ret    
c000f973:	90                   	nop

c000f974 <File::rename(char const*)>:
c000f974:	83 ec 0c             	sub    esp,0xc
c000f977:	b8 0b 00 00 00       	mov    eax,0xb
c000f97c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f980:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f987:	80 f9 19             	cmp    cl,0x19
c000f98a:	77 32                	ja     c000f9be <File::rename(char const*)+0x4a>
c000f98c:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000f993:	85 c9                	test   ecx,ecx
c000f995:	74 27                	je     c000f9be <File::rename(char const*)+0x4a>
c000f997:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f99d:	85 c9                	test   ecx,ecx
c000f99f:	74 1d                	je     c000f9be <File::rename(char const*)+0x4a>
c000f9a1:	b8 06 00 00 00       	mov    eax,0x6
c000f9a6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f9aa:	75 12                	jne    c000f9be <File::rename(char const*)+0x4a>
c000f9ac:	50                   	push   eax
c000f9ad:	83 c2 0d             	add    edx,0xd
c000f9b0:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f9b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f9b6:	52                   	push   edx
c000f9b7:	51                   	push   ecx
c000f9b8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f9bb:	83 c4 10             	add    esp,0x10
c000f9be:	83 c4 0c             	add    esp,0xc
c000f9c1:	c3                   	ret    

c000f9c2 <File::chfatattr(unsigned char, unsigned char)>:
c000f9c2:	57                   	push   edi
c000f9c3:	b8 0b 00 00 00       	mov    eax,0xb
c000f9c8:	56                   	push   esi
c000f9c9:	53                   	push   ebx
c000f9ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f9ce:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f9d2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f9d6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f9dd:	80 f9 19             	cmp    cl,0x19
c000f9e0:	77 37                	ja     c000fa19 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f9e2:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000f9e9:	85 c9                	test   ecx,ecx
c000f9eb:	74 2c                	je     c000fa19 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f9ed:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f9f3:	85 c9                	test   ecx,ecx
c000f9f5:	74 22                	je     c000fa19 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f9f7:	b8 06 00 00 00       	mov    eax,0x6
c000f9fc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fa00:	75 17                	jne    c000fa19 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000fa02:	89 f0                	mov    eax,esi
c000fa04:	8b 39                	mov    edi,DWORD PTR [ecx]
c000fa06:	0f b6 f0             	movzx  esi,al
c000fa09:	56                   	push   esi
c000fa0a:	83 c2 0d             	add    edx,0xd
c000fa0d:	0f b6 db             	movzx  ebx,bl
c000fa10:	53                   	push   ebx
c000fa11:	52                   	push   edx
c000fa12:	51                   	push   ecx
c000fa13:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000fa16:	83 c4 10             	add    esp,0x10
c000fa19:	5b                   	pop    ebx
c000fa1a:	5e                   	pop    esi
c000fa1b:	5f                   	pop    edi
c000fa1c:	c3                   	ret    
c000fa1d:	90                   	nop

c000fa1e <File::exists()>:
c000fa1e:	83 ec 0c             	sub    esp,0xc
c000fa21:	31 c0                	xor    eax,eax
c000fa23:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fa27:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fa2e:	80 f9 19             	cmp    cl,0x19
c000fa31:	77 24                	ja     c000fa57 <File::exists()+0x39>
c000fa33:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fa3a:	85 c9                	test   ecx,ecx
c000fa3c:	74 19                	je     c000fa57 <File::exists()+0x39>
c000fa3e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fa44:	85 c9                	test   ecx,ecx
c000fa46:	74 0f                	je     c000fa57 <File::exists()+0x39>
c000fa48:	50                   	push   eax
c000fa49:	83 c2 0d             	add    edx,0xd
c000fa4c:	50                   	push   eax
c000fa4d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fa4f:	52                   	push   edx
c000fa50:	51                   	push   ecx
c000fa51:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fa54:	83 c4 10             	add    esp,0x10
c000fa57:	83 c4 0c             	add    esp,0xc
c000fa5a:	c3                   	ret    
c000fa5b:	90                   	nop

c000fa5c <File::stat(unsigned long long*, bool*)>:
c000fa5c:	56                   	push   esi
c000fa5d:	53                   	push   ebx
c000fa5e:	50                   	push   eax
c000fa5f:	b8 0b 00 00 00       	mov    eax,0xb
c000fa64:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fa68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fa6c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fa70:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fa77:	80 f9 19             	cmp    cl,0x19
c000fa7a:	77 3d                	ja     c000fab9 <File::stat(unsigned long long*, bool*)+0x5d>
c000fa7c:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fa83:	85 c9                	test   ecx,ecx
c000fa85:	74 32                	je     c000fab9 <File::stat(unsigned long long*, bool*)+0x5d>
c000fa87:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fa8d:	85 c9                	test   ecx,ecx
c000fa8f:	74 28                	je     c000fab9 <File::stat(unsigned long long*, bool*)+0x5d>
c000fa91:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fa93:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fa97:	74 13                	je     c000faac <File::stat(unsigned long long*, bool*)+0x50>
c000fa99:	83 ec 04             	sub    esp,0x4
c000fa9c:	56                   	push   esi
c000fa9d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000faa3:	51                   	push   ecx
c000faa4:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000faa7:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000faaa:	eb 0a                	jmp    c000fab6 <File::stat(unsigned long long*, bool*)+0x5a>
c000faac:	53                   	push   ebx
c000faad:	83 c2 0d             	add    edx,0xd
c000fab0:	56                   	push   esi
c000fab1:	52                   	push   edx
c000fab2:	51                   	push   ecx
c000fab3:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000fab6:	83 c4 10             	add    esp,0x10
c000fab9:	5a                   	pop    edx
c000faba:	5b                   	pop    ebx
c000fabb:	5e                   	pop    esi
c000fabc:	c3                   	ret    

c000fabd <getcwd(Process*, char*, int)>:
c000fabd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fac1:	31 c0                	xor    eax,eax
c000fac3:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000fac6:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000faca:	7d 15                	jge    c000fae1 <getcwd(Process*, char*, int)+0x24>
c000facc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fad0:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000fad7:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fada:	84 c9                	test   cl,cl
c000fadc:	74 06                	je     c000fae4 <getcwd(Process*, char*, int)+0x27>
c000fade:	40                   	inc    eax
c000fadf:	eb e2                	jmp    c000fac3 <getcwd(Process*, char*, int)+0x6>
c000fae1:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000fae4:	31 c0                	xor    eax,eax
c000fae6:	c3                   	ret    

c000fae7 <setcwd(Process*, char*)>:
c000fae7:	55                   	push   ebp
c000fae8:	57                   	push   edi
c000fae9:	56                   	push   esi
c000faea:	53                   	push   ebx
c000faeb:	81 ec 20 02 00 00    	sub    esp,0x220
c000faf1:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000faf8:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000fafe:	57                   	push   edi
c000faff:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000fb06:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000fb0a:	56                   	push   esi
c000fb0b:	e8 92 fa ff ff       	call   c000f5a2 <standardiseFiles(char*, char const*, char const*)>
c000fb10:	89 34 24             	mov    DWORD PTR [esp],esi
c000fb13:	e8 c9 0b ff ff       	call   c00006e1 <strlen>
c000fb18:	83 c4 10             	add    esp,0x10
c000fb1b:	83 f8 02             	cmp    eax,0x2
c000fb1e:	77 17                	ja     c000fb37 <setcwd(Process*, char*)+0x50>
c000fb20:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000fb25:	83 e8 41             	sub    eax,0x41
c000fb28:	83 f8 19             	cmp    eax,0x19
c000fb2b:	76 24                	jbe    c000fb51 <setcwd(Process*, char*)+0x6a>
c000fb2d:	b8 03 00 00 00       	mov    eax,0x3
c000fb32:	e9 cb 00 00 00       	jmp    c000fc02 <setcwd(Process*, char*)+0x11b>
c000fb37:	83 ec 0c             	sub    esp,0xc
c000fb3a:	56                   	push   esi
c000fb3b:	e8 a1 0b ff ff       	call   c00006e1 <strlen>
c000fb40:	83 c4 10             	add    esp,0x10
c000fb43:	83 f8 03             	cmp    eax,0x3
c000fb46:	75 33                	jne    c000fb7b <setcwd(Process*, char*)+0x94>
c000fb48:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000fb4d:	75 2c                	jne    c000fb7b <setcwd(Process*, char*)+0x94>
c000fb4f:	eb cf                	jmp    c000fb20 <setcwd(Process*, char*)+0x39>
c000fb51:	8b 14 85 a0 4d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb260]
c000fb58:	b8 05 00 00 00       	mov    eax,0x5
c000fb5d:	85 d2                	test   edx,edx
c000fb5f:	0f 84 9d 00 00 00    	je     c000fc02 <setcwd(Process*, char*)+0x11b>
c000fb65:	b8 06 00 00 00       	mov    eax,0x6
c000fb6a:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fb71:	0f 84 8b 00 00 00    	je     c000fc02 <setcwd(Process*, char*)+0x11b>
c000fb77:	51                   	push   ecx
c000fb78:	51                   	push   ecx
c000fb79:	eb 7b                	jmp    c000fbf6 <setcwd(Process*, char*)+0x10f>
c000fb7b:	83 ec 0c             	sub    esp,0xc
c000fb7e:	68 14 01 00 00       	push   0x114
c000fb83:	e8 58 f5 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c000fb88:	83 c4 0c             	add    esp,0xc
c000fb8b:	89 c3                	mov    ebx,eax
c000fb8d:	55                   	push   ebp
c000fb8e:	56                   	push   esi
c000fb8f:	50                   	push   eax
c000fb90:	e8 b7 fb ff ff       	call   c000f74c <File::File(char const*, Process*)>
c000fb95:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000fb9a:	83 c4 0c             	add    esp,0xc
c000fb9d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000fba1:	50                   	push   eax
c000fba2:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fba6:	50                   	push   eax
c000fba7:	53                   	push   ebx
c000fba8:	e8 af fe ff ff       	call   c000fa5c <File::stat(unsigned long long*, bool*)>
c000fbad:	83 c4 10             	add    esp,0x10
c000fbb0:	8b 13                	mov    edx,DWORD PTR [ebx]
c000fbb2:	83 f8 02             	cmp    eax,0x2
c000fbb5:	75 09                	jne    c000fbc0 <setcwd(Process*, char*)+0xd9>
c000fbb7:	83 ec 0c             	sub    esp,0xc
c000fbba:	53                   	push   ebx
c000fbbb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fbbe:	eb 0d                	jmp    c000fbcd <setcwd(Process*, char*)+0xe6>
c000fbc0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000fbc3:	85 c0                	test   eax,eax
c000fbc5:	74 10                	je     c000fbd7 <setcwd(Process*, char*)+0xf0>
c000fbc7:	83 ec 0c             	sub    esp,0xc
c000fbca:	53                   	push   ebx
c000fbcb:	ff d2                	call   edx
c000fbcd:	83 c4 10             	add    esp,0x10
c000fbd0:	b8 01 00 00 00       	mov    eax,0x1
c000fbd5:	eb 2b                	jmp    c000fc02 <setcwd(Process*, char*)+0x11b>
c000fbd7:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000fbdc:	75 10                	jne    c000fbee <setcwd(Process*, char*)+0x107>
c000fbde:	83 ec 0c             	sub    esp,0xc
c000fbe1:	53                   	push   ebx
c000fbe2:	ff d2                	call   edx
c000fbe4:	83 c4 10             	add    esp,0x10
c000fbe7:	b8 02 00 00 00       	mov    eax,0x2
c000fbec:	eb 14                	jmp    c000fc02 <setcwd(Process*, char*)+0x11b>
c000fbee:	83 ec 0c             	sub    esp,0xc
c000fbf1:	53                   	push   ebx
c000fbf2:	ff d2                	call   edx
c000fbf4:	58                   	pop    eax
c000fbf5:	5a                   	pop    edx
c000fbf6:	56                   	push   esi
c000fbf7:	57                   	push   edi
c000fbf8:	e8 66 0b ff ff       	call   c0000763 <strcpy>
c000fbfd:	83 c4 10             	add    esp,0x10
c000fc00:	31 c0                	xor    eax,eax
c000fc02:	81 c4 1c 02 00 00    	add    esp,0x21c
c000fc08:	5b                   	pop    ebx
c000fc09:	5e                   	pop    esi
c000fc0a:	5f                   	pop    edi
c000fc0b:	5d                   	pop    ebp
c000fc0c:	c3                   	ret    
c000fc0d:	90                   	nop

c000fc0e <Directory::Directory(char const*, Process*)>:
c000fc0e:	83 ec 0c             	sub    esp,0xc
c000fc11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc15:	83 ec 08             	sub    esp,0x8
c000fc18:	6a 00                	push   0x0
c000fc1a:	50                   	push   eax
c000fc1b:	e8 a4 e1 ff ff       	call   c000ddc4 <UnixFile::UnixFile(int)>
c000fc20:	83 c4 10             	add    esp,0x10
c000fc23:	ba 74 1b 02 c0       	mov    edx,0xc0021b74
c000fc28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc2c:	89 10                	mov    DWORD PTR [eax],edx
c000fc2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fc32:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000fc38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc3c:	83 c0 0d             	add    eax,0xd
c000fc3f:	83 ec 04             	sub    esp,0x4
c000fc42:	52                   	push   edx
c000fc43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc47:	50                   	push   eax
c000fc48:	e8 55 f9 ff ff       	call   c000f5a2 <standardiseFiles(char*, char const*, char const*)>
c000fc4d:	83 c4 10             	add    esp,0x10
c000fc50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc54:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000fc57:	8d 50 bf             	lea    edx,[eax-0x41]
c000fc5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc5e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000fc64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc68:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000fc6c:	90                   	nop
c000fc6d:	83 c4 0c             	add    esp,0xc
c000fc70:	c3                   	ret    
c000fc71:	90                   	nop

c000fc72 <Directory::open()>:
c000fc72:	53                   	push   ebx
c000fc73:	b8 0b 00 00 00       	mov    eax,0xb
c000fc78:	83 ec 08             	sub    esp,0x8
c000fc7b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc7f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000fc86:	80 fa 19             	cmp    dl,0x19
c000fc89:	77 3d                	ja     c000fcc8 <Directory::open()+0x56>
c000fc8b:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000fc92:	85 d2                	test   edx,edx
c000fc94:	74 32                	je     c000fcc8 <Directory::open()+0x56>
c000fc96:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000fc9c:	85 d2                	test   edx,edx
c000fc9e:	74 28                	je     c000fcc8 <Directory::open()+0x56>
c000fca0:	b8 06 00 00 00       	mov    eax,0x6
c000fca5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000fca9:	75 1d                	jne    c000fcc8 <Directory::open()+0x56>
c000fcab:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000fcb1:	50                   	push   eax
c000fcb2:	8b 02                	mov    eax,DWORD PTR [edx]
c000fcb4:	51                   	push   ecx
c000fcb5:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000fcb8:	51                   	push   ecx
c000fcb9:	52                   	push   edx
c000fcba:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000fcbd:	83 c4 10             	add    esp,0x10
c000fcc0:	85 c0                	test   eax,eax
c000fcc2:	75 04                	jne    c000fcc8 <Directory::open()+0x56>
c000fcc4:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000fcc8:	83 c4 08             	add    esp,0x8
c000fccb:	5b                   	pop    ebx
c000fccc:	c3                   	ret    
c000fccd:	90                   	nop

c000fcce <Directory::close()>:
c000fcce:	53                   	push   ebx
c000fccf:	b8 0b 00 00 00       	mov    eax,0xb
c000fcd4:	83 ec 08             	sub    esp,0x8
c000fcd7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fcdb:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fce2:	80 fa 19             	cmp    dl,0x19
c000fce5:	77 41                	ja     c000fd28 <Directory::close()+0x5a>
c000fce7:	8b 1c 95 a0 4d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb260]
c000fcee:	85 db                	test   ebx,ebx
c000fcf0:	74 36                	je     c000fd28 <Directory::close()+0x5a>
c000fcf2:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000fcf9:	74 2d                	je     c000fd28 <Directory::close()+0x5a>
c000fcfb:	b8 05 00 00 00       	mov    eax,0x5
c000fd00:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000fd04:	74 22                	je     c000fd28 <Directory::close()+0x5a>
c000fd06:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000fd0a:	8b 04 95 a0 4d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb260]
c000fd11:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000fd17:	53                   	push   ebx
c000fd18:	53                   	push   ebx
c000fd19:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd1b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000fd21:	50                   	push   eax
c000fd22:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000fd25:	83 c4 10             	add    esp,0x10
c000fd28:	83 c4 08             	add    esp,0x8
c000fd2b:	5b                   	pop    ebx
c000fd2c:	c3                   	ret    
c000fd2d:	90                   	nop

c000fd2e <Directory::unlink()>:
c000fd2e:	83 ec 0c             	sub    esp,0xc
c000fd31:	b8 0b 00 00 00       	mov    eax,0xb
c000fd36:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd3a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd41:	80 f9 19             	cmp    cl,0x19
c000fd44:	77 2f                	ja     c000fd75 <Directory::unlink()+0x47>
c000fd46:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fd4d:	85 c9                	test   ecx,ecx
c000fd4f:	74 24                	je     c000fd75 <Directory::unlink()+0x47>
c000fd51:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fd57:	85 c9                	test   ecx,ecx
c000fd59:	74 1a                	je     c000fd75 <Directory::unlink()+0x47>
c000fd5b:	b8 06 00 00 00       	mov    eax,0x6
c000fd60:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fd64:	75 0f                	jne    c000fd75 <Directory::unlink()+0x47>
c000fd66:	50                   	push   eax
c000fd67:	83 c2 0d             	add    edx,0xd
c000fd6a:	50                   	push   eax
c000fd6b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd6d:	52                   	push   edx
c000fd6e:	51                   	push   ecx
c000fd6f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000fd72:	83 c4 10             	add    esp,0x10
c000fd75:	83 c4 0c             	add    esp,0xc
c000fd78:	c3                   	ret    
c000fd79:	90                   	nop

c000fd7a <Directory::rename(char const*)>:
c000fd7a:	83 ec 0c             	sub    esp,0xc
c000fd7d:	b8 0b 00 00 00       	mov    eax,0xb
c000fd82:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd86:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd8d:	80 f9 19             	cmp    cl,0x19
c000fd90:	77 32                	ja     c000fdc4 <Directory::rename(char const*)+0x4a>
c000fd92:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fd99:	85 c9                	test   ecx,ecx
c000fd9b:	74 27                	je     c000fdc4 <Directory::rename(char const*)+0x4a>
c000fd9d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fda3:	85 c9                	test   ecx,ecx
c000fda5:	74 1d                	je     c000fdc4 <Directory::rename(char const*)+0x4a>
c000fda7:	b8 06 00 00 00       	mov    eax,0x6
c000fdac:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fdb0:	75 12                	jne    c000fdc4 <Directory::rename(char const*)+0x4a>
c000fdb2:	50                   	push   eax
c000fdb3:	83 c2 0d             	add    edx,0xd
c000fdb6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fdb8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fdbc:	52                   	push   edx
c000fdbd:	51                   	push   ecx
c000fdbe:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000fdc1:	83 c4 10             	add    esp,0x10
c000fdc4:	83 c4 0c             	add    esp,0xc
c000fdc7:	c3                   	ret    

c000fdc8 <Directory::exists()>:
c000fdc8:	83 ec 0c             	sub    esp,0xc
c000fdcb:	31 c0                	xor    eax,eax
c000fdcd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fdd1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fdd8:	80 f9 19             	cmp    cl,0x19
c000fddb:	77 24                	ja     c000fe01 <Directory::exists()+0x39>
c000fddd:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fde4:	85 c9                	test   ecx,ecx
c000fde6:	74 19                	je     c000fe01 <Directory::exists()+0x39>
c000fde8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fdee:	85 c9                	test   ecx,ecx
c000fdf0:	74 0f                	je     c000fe01 <Directory::exists()+0x39>
c000fdf2:	50                   	push   eax
c000fdf3:	83 c2 0d             	add    edx,0xd
c000fdf6:	50                   	push   eax
c000fdf7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fdf9:	52                   	push   edx
c000fdfa:	51                   	push   ecx
c000fdfb:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fdfe:	83 c4 10             	add    esp,0x10
c000fe01:	83 c4 0c             	add    esp,0xc
c000fe04:	c3                   	ret    
c000fe05:	90                   	nop

c000fe06 <Directory::read(dirent*)>:
c000fe06:	83 ec 1c             	sub    esp,0x1c
c000fe09:	b8 0b 00 00 00       	mov    eax,0xb
c000fe0e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000fe12:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fe19:	80 fa 19             	cmp    dl,0x19
c000fe1c:	77 30                	ja     c000fe4e <Directory::read(dirent*)+0x48>
c000fe1e:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000fe25:	85 d2                	test   edx,edx
c000fe27:	74 25                	je     c000fe4e <Directory::read(dirent*)+0x48>
c000fe29:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fe30:	74 1c                	je     c000fe4e <Directory::read(dirent*)+0x48>
c000fe32:	83 ec 0c             	sub    esp,0xc
c000fe35:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fe37:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fe3b:	52                   	push   edx
c000fe3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fe40:	6a 00                	push   0x0
c000fe42:	68 10 01 00 00       	push   0x110
c000fe47:	51                   	push   ecx
c000fe48:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fe4b:	83 c4 20             	add    esp,0x20
c000fe4e:	83 c4 1c             	add    esp,0x1c
c000fe51:	c3                   	ret    

c000fe52 <Directory::create()>:
c000fe52:	83 ec 0c             	sub    esp,0xc
c000fe55:	b8 0b 00 00 00       	mov    eax,0xb
c000fe5a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fe5e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fe65:	80 f9 19             	cmp    cl,0x19
c000fe68:	77 2f                	ja     c000fe99 <Directory::create()+0x47>
c000fe6a:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fe71:	85 c9                	test   ecx,ecx
c000fe73:	74 24                	je     c000fe99 <Directory::create()+0x47>
c000fe75:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fe7b:	85 c9                	test   ecx,ecx
c000fe7d:	74 1a                	je     c000fe99 <Directory::create()+0x47>
c000fe7f:	b8 06 00 00 00       	mov    eax,0x6
c000fe84:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fe88:	75 0f                	jne    c000fe99 <Directory::create()+0x47>
c000fe8a:	50                   	push   eax
c000fe8b:	83 c2 0d             	add    edx,0xd
c000fe8e:	50                   	push   eax
c000fe8f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fe91:	52                   	push   edx
c000fe92:	51                   	push   ecx
c000fe93:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000fe96:	83 c4 10             	add    esp,0x10
c000fe99:	83 c4 0c             	add    esp,0xc
c000fe9c:	c3                   	ret    
c000fe9d:	90                   	nop

c000fe9e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000fe9e:	b8 0a 00 00 00       	mov    eax,0xa
c000fea3:	c3                   	ret    

c000fea4 <Bus::Bus(char const*)>:
c000fea4:	83 ec 0c             	sub    esp,0xc
c000fea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feab:	83 ec 08             	sub    esp,0x8
c000feae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000feb2:	50                   	push   eax
c000feb3:	e8 62 09 00 00       	call   c001081a <Device::Device(char const*)>
c000feb8:	83 c4 10             	add    esp,0x10
c000febb:	ba 90 1b 02 c0       	mov    edx,0xc0021b90
c000fec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fec4:	89 10                	mov    DWORD PTR [eax],edx
c000fec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feca:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fed4:	90                   	nop
c000fed5:	83 c4 0c             	add    esp,0xc
c000fed8:	c3                   	ret    
c000fed9:	90                   	nop

c000feda <Bus::~Bus()>:
c000feda:	83 ec 0c             	sub    esp,0xc
c000fedd:	ba 90 1b 02 c0       	mov    edx,0xc0021b90
c000fee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fee6:	89 10                	mov    DWORD PTR [eax],edx
c000fee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feec:	83 ec 0c             	sub    esp,0xc
c000feef:	50                   	push   eax
c000fef0:	e8 db 05 00 00       	call   c00104d0 <Device::~Device()>
c000fef5:	83 c4 10             	add    esp,0x10
c000fef8:	90                   	nop
c000fef9:	83 c4 0c             	add    esp,0xc
c000fefc:	c3                   	ret    
c000fefd:	90                   	nop

c000fefe <Bus::~Bus()>:
c000fefe:	83 ec 0c             	sub    esp,0xc
c000ff01:	83 ec 0c             	sub    esp,0xc
c000ff04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff08:	e8 cd ff ff ff       	call   c000feda <Bus::~Bus()>
c000ff0d:	83 c4 10             	add    esp,0x10
c000ff10:	83 ec 08             	sub    esp,0x8
c000ff13:	68 58 01 00 00       	push   0x158
c000ff18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff1c:	e8 ce f1 ff ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c000ff21:	83 c4 10             	add    esp,0x10
c000ff24:	83 c4 0c             	add    esp,0xc
c000ff27:	c3                   	ret    

c000ff28 <Buzzer::Buzzer(char const*)>:
c000ff28:	83 ec 0c             	sub    esp,0xc
c000ff2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff2f:	83 ec 08             	sub    esp,0x8
c000ff32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff36:	50                   	push   eax
c000ff37:	e8 de 08 00 00       	call   c001081a <Device::Device(char const*)>
c000ff3c:	83 c4 10             	add    esp,0x10
c000ff3f:	ba bc 1b 02 c0       	mov    edx,0xc0021bbc
c000ff44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff48:	89 10                	mov    DWORD PTR [eax],edx
c000ff4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff4e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ff58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff5c:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000ff66:	90                   	nop
c000ff67:	83 c4 0c             	add    esp,0xc
c000ff6a:	c3                   	ret    
c000ff6b:	90                   	nop

c000ff6c <Buzzer::~Buzzer()>:
c000ff6c:	83 ec 0c             	sub    esp,0xc
c000ff6f:	ba bc 1b 02 c0       	mov    edx,0xc0021bbc
c000ff74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff78:	89 10                	mov    DWORD PTR [eax],edx
c000ff7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff7e:	83 ec 0c             	sub    esp,0xc
c000ff81:	50                   	push   eax
c000ff82:	e8 49 05 00 00       	call   c00104d0 <Device::~Device()>
c000ff87:	83 c4 10             	add    esp,0x10
c000ff8a:	90                   	nop
c000ff8b:	83 c4 0c             	add    esp,0xc
c000ff8e:	c3                   	ret    
c000ff8f:	90                   	nop

c000ff90 <Buzzer::~Buzzer()>:
c000ff90:	83 ec 0c             	sub    esp,0xc
c000ff93:	83 ec 0c             	sub    esp,0xc
c000ff96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff9a:	e8 cd ff ff ff       	call   c000ff6c <Buzzer::~Buzzer()>
c000ff9f:	83 c4 10             	add    esp,0x10
c000ffa2:	83 ec 08             	sub    esp,0x8
c000ffa5:	68 5c 01 00 00       	push   0x15c
c000ffaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffae:	e8 3c f1 ff ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c000ffb3:	83 c4 10             	add    esp,0x10
c000ffb6:	83 c4 0c             	add    esp,0xc
c000ffb9:	c3                   	ret    

c000ffba <Buzzer::stop()>:
c000ffba:	83 ec 14             	sub    esp,0x14
c000ffbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ffc1:	8b 10                	mov    edx,DWORD PTR [eax]
c000ffc3:	6a 00                	push   0x0
c000ffc5:	50                   	push   eax
c000ffc6:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ffc9:	83 c4 1c             	add    esp,0x1c
c000ffcc:	c3                   	ret    

c000ffcd <beepThread(void*)>:
c000ffcd:	53                   	push   ebx
c000ffce:	83 ec 08             	sub    esp,0x8
c000ffd1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffd5:	e8 75 8a 00 00       	call   c0018a4f <unlockScheduler()>
c000ffda:	52                   	push   edx
c000ffdb:	b8 40 42 0f 00       	mov    eax,0xf4240
c000ffe0:	52                   	push   edx
c000ffe1:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000ffe7:	52                   	push   edx
c000ffe8:	50                   	push   eax
c000ffe9:	e8 bd 8f 00 00       	call   c0018fab <nanoSleep(unsigned long long)>
c000ffee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fff1:	e8 c4 ff ff ff       	call   c000ffba <Buzzer::stop()>
c000fff6:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000fffe:	83 c4 18             	add    esp,0x18
c0010001:	5b                   	pop    ebx
c0010002:	e9 e8 8e 00 00       	jmp    c0018eef <blockTask(TaskState)>
c0010007:	90                   	nop

c0010008 <Buzzer::beep(int, int, bool)>:
c0010008:	57                   	push   edi
c0010009:	56                   	push   esi
c001000a:	53                   	push   ebx
c001000b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001000f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010013:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010017:	52                   	push   edx
c0010018:	52                   	push   edx
c0010019:	8b 06                	mov    eax,DWORD PTR [esi]
c001001b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001001f:	56                   	push   esi
c0010020:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010023:	89 f8                	mov    eax,edi
c0010025:	83 c4 10             	add    esp,0x10
c0010028:	84 c0                	test   al,al
c001002a:	74 1f                	je     c001004b <Buzzer::beep(int, int, bool)+0x43>
c001002c:	50                   	push   eax
c001002d:	50                   	push   eax
c001002e:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0010034:	99                   	cdq    
c0010035:	52                   	push   edx
c0010036:	50                   	push   eax
c0010037:	e8 6f 8f 00 00       	call   c0018fab <nanoSleep(unsigned long long)>
c001003c:	83 c4 10             	add    esp,0x10
c001003f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0010043:	5b                   	pop    ebx
c0010044:	5e                   	pop    esi
c0010045:	5f                   	pop    edi
c0010046:	e9 6f ff ff ff       	jmp    c000ffba <Buzzer::stop()>
c001004b:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0010051:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0010056:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c001005e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0010062:	c7 44 24 14 cd ff 00 c0 	mov    DWORD PTR [esp+0x14],0xc000ffcd
c001006a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001006e:	5b                   	pop    ebx
c001006f:	5e                   	pop    esi
c0010070:	5f                   	pop    edi
c0010071:	e9 0c 8b 00 00       	jmp    c0018b82 <Process::createThread(void (*)(void*), void*, int)>

c0010076 <loadClockSettings()>:
c0010076:	c7 05 14 49 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc0024914,0xa
c0010080:	c6 05 11 49 02 c0 00 	mov    BYTE PTR ds:0xc0024911,0x0
c0010087:	c6 05 10 49 02 c0 01 	mov    BYTE PTR ds:0xc0024910,0x1
c001008e:	c3                   	ret    
c001008f:	90                   	nop

c0010090 <Clock::Clock(char const*)>:
c0010090:	83 ec 0c             	sub    esp,0xc
c0010093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010097:	83 ec 08             	sub    esp,0x8
c001009a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001009e:	50                   	push   eax
c001009f:	e8 76 07 00 00       	call   c001081a <Device::Device(char const*)>
c00100a4:	83 c4 10             	add    esp,0x10
c00100a7:	ba ec 1b 02 c0       	mov    edx,0xc0021bec
c00100ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100b0:	89 10                	mov    DWORD PTR [eax],edx
c00100b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100b6:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00100c0:	90                   	nop
c00100c1:	83 c4 0c             	add    esp,0xc
c00100c4:	c3                   	ret    
c00100c5:	90                   	nop

c00100c6 <Clock::~Clock()>:
c00100c6:	83 ec 0c             	sub    esp,0xc
c00100c9:	ba ec 1b 02 c0       	mov    edx,0xc0021bec
c00100ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100d2:	89 10                	mov    DWORD PTR [eax],edx
c00100d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100d8:	83 ec 0c             	sub    esp,0xc
c00100db:	50                   	push   eax
c00100dc:	e8 ef 03 00 00       	call   c00104d0 <Device::~Device()>
c00100e1:	83 c4 10             	add    esp,0x10
c00100e4:	90                   	nop
c00100e5:	83 c4 0c             	add    esp,0xc
c00100e8:	c3                   	ret    
c00100e9:	90                   	nop

c00100ea <Clock::~Clock()>:
c00100ea:	83 ec 0c             	sub    esp,0xc
c00100ed:	83 ec 0c             	sub    esp,0xc
c00100f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100f4:	e8 cd ff ff ff       	call   c00100c6 <Clock::~Clock()>
c00100f9:	83 c4 10             	add    esp,0x10
c00100fc:	83 ec 08             	sub    esp,0x8
c00100ff:	68 58 01 00 00       	push   0x158
c0010104:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010108:	e8 e2 ef ff ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c001010d:	83 c4 10             	add    esp,0x10
c0010110:	83 c4 0c             	add    esp,0xc
c0010113:	c3                   	ret    

c0010114 <Clock::timeInSecondsLocal()>:
c0010114:	53                   	push   ebx
c0010115:	83 ec 14             	sub    esp,0x14
c0010118:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001011c:	8b 10                	mov    edx,DWORD PTR [eax]
c001011e:	50                   	push   eax
c001011f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0010122:	0f b6 0d 10 49 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024910
c0010129:	03 0d 14 49 02 c0    	add    ecx,DWORD PTR ds:0xc0024914
c001012f:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010135:	89 cb                	mov    ebx,ecx
c0010137:	c1 fb 1f             	sar    ebx,0x1f
c001013a:	01 c8                	add    eax,ecx
c001013c:	11 da                	adc    edx,ebx
c001013e:	83 c4 10             	add    esp,0x10
c0010141:	31 c9                	xor    ecx,ecx
c0010143:	80 3d 11 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024911,0x0
c001014a:	74 05                	je     c0010151 <Clock::timeInSecondsLocal()+0x3d>
c001014c:	b9 08 07 00 00       	mov    ecx,0x708
c0010151:	31 db                	xor    ebx,ebx
c0010153:	01 c8                	add    eax,ecx
c0010155:	11 da                	adc    edx,ebx
c0010157:	83 c4 08             	add    esp,0x8
c001015a:	5b                   	pop    ebx
c001015b:	c3                   	ret    

c001015c <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001015c:	57                   	push   edi
c001015d:	56                   	push   esi
c001015e:	53                   	push   ebx
c001015f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010163:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010167:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001016b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001016d:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0010170:	0f b6 05 10 49 02 c0 	movzx  eax,BYTE PTR ds:0xc0024910
c0010177:	03 05 14 49 02 c0    	add    eax,DWORD PTR ds:0xc0024914
c001017d:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0010183:	99                   	cdq    
c0010184:	29 c6                	sub    esi,eax
c0010186:	19 d7                	sbb    edi,edx
c0010188:	89 f0                	mov    eax,esi
c001018a:	89 fa                	mov    edx,edi
c001018c:	31 f6                	xor    esi,esi
c001018e:	80 3d 11 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024911,0x0
c0010195:	74 05                	je     c001019c <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0010197:	be 08 07 00 00       	mov    esi,0x708
c001019c:	31 ff                	xor    edi,edi
c001019e:	29 f0                	sub    eax,esi
c00101a0:	19 fa                	sbb    edx,edi
c00101a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00101a6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00101aa:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00101ae:	89 d8                	mov    eax,ebx
c00101b0:	5b                   	pop    ebx
c00101b1:	5e                   	pop    esi
c00101b2:	5f                   	pop    edi
c00101b3:	ff e0                	jmp    eax

c00101b5 <datetimeToSeconds(datetime_t)>:
c00101b5:	55                   	push   ebp
c00101b6:	57                   	push   edi
c00101b7:	56                   	push   esi
c00101b8:	53                   	push   ebx
c00101b9:	83 ec 14             	sub    esp,0x14
c00101bc:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00101c0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00101c4:	0f b6 f5             	movzx  esi,ch
c00101c7:	6b f6 3c             	imul   esi,esi,0x3c
c00101ca:	89 cf                	mov    edi,ecx
c00101cc:	89 d3                	mov    ebx,edx
c00101ce:	0f b6 c9             	movzx  ecx,cl
c00101d1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00101d7:	0f b6 c6             	movzx  eax,dh
c00101da:	c1 ef 10             	shr    edi,0x10
c00101dd:	48                   	dec    eax
c00101de:	c1 eb 10             	shr    ebx,0x10
c00101e1:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00101e5:	89 f8                	mov    eax,edi
c00101e7:	0f b6 f8             	movzx  edi,al
c00101ea:	01 fe                	add    esi,edi
c00101ec:	01 f1                	add    ecx,esi
c00101ee:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00101f2:	c1 f9 1f             	sar    ecx,0x1f
c00101f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00101f9:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00101fe:	0f b6 d2             	movzx  edx,dl
c0010201:	66 81 eb 6c 07       	sub    bx,0x76c
c0010206:	8b 0c 8d 20 1c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde3e0]
c001020d:	0f b7 f3             	movzx  esi,bx
c0010210:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0010214:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0010219:	76 29                	jbe    c0010244 <datetimeToSeconds(datetime_t)+0x8f>
c001021b:	f6 c3 03             	test   bl,0x3
c001021e:	75 24                	jne    c0010244 <datetimeToSeconds(datetime_t)+0x8f>
c0010220:	31 d2                	xor    edx,edx
c0010222:	bf 64 00 00 00       	mov    edi,0x64
c0010227:	89 d8                	mov    eax,ebx
c0010229:	66 f7 f7             	div    di
c001022c:	66 85 d2             	test   dx,dx
c001022f:	75 12                	jne    c0010243 <datetimeToSeconds(datetime_t)+0x8e>
c0010231:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0010237:	bf 90 01 00 00       	mov    edi,0x190
c001023c:	99                   	cdq    
c001023d:	f7 ff                	idiv   edi
c001023f:	85 d2                	test   edx,edx
c0010241:	75 01                	jne    c0010244 <datetimeToSeconds(datetime_t)+0x8f>
c0010243:	41                   	inc    ecx
c0010244:	66 83 fb 46          	cmp    bx,0x46
c0010248:	76 45                	jbe    c001028f <datetimeToSeconds(datetime_t)+0xda>
c001024a:	bb 46 00 00 00       	mov    ebx,0x46
c001024f:	bf 64 00 00 00       	mov    edi,0x64
c0010254:	bd 90 01 00 00       	mov    ebp,0x190
c0010259:	b8 6d 01 00 00       	mov    eax,0x16d
c001025e:	f6 c3 03             	test   bl,0x3
c0010261:	75 23                	jne    c0010286 <datetimeToSeconds(datetime_t)+0xd1>
c0010263:	89 d8                	mov    eax,ebx
c0010265:	99                   	cdq    
c0010266:	f7 ff                	idiv   edi
c0010268:	85 d2                	test   edx,edx
c001026a:	b8 6e 01 00 00       	mov    eax,0x16e
c001026f:	75 15                	jne    c0010286 <datetimeToSeconds(datetime_t)+0xd1>
c0010271:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0010277:	99                   	cdq    
c0010278:	f7 fd                	idiv   ebp
c001027a:	31 c0                	xor    eax,eax
c001027c:	85 d2                	test   edx,edx
c001027e:	0f 94 c0             	sete   al
c0010281:	05 6d 01 00 00       	add    eax,0x16d
c0010286:	43                   	inc    ebx
c0010287:	01 c1                	add    ecx,eax
c0010289:	39 f3                	cmp    ebx,esi
c001028b:	7c cc                	jl     c0010259 <datetimeToSeconds(datetime_t)+0xa4>
c001028d:	eb 3b                	jmp    c00102ca <datetimeToSeconds(datetime_t)+0x115>
c001028f:	74 39                	je     c00102ca <datetimeToSeconds(datetime_t)+0x115>
c0010291:	b8 45 00 00 00       	mov    eax,0x45
c0010296:	89 c2                	mov    edx,eax
c0010298:	83 e2 03             	and    edx,0x3
c001029b:	39 f0                	cmp    eax,esi
c001029d:	7e 13                	jle    c00102b2 <datetimeToSeconds(datetime_t)+0xfd>
c001029f:	85 d2                	test   edx,edx
c00102a1:	0f 94 c2             	sete   dl
c00102a4:	0f b6 d2             	movzx  edx,dl
c00102a7:	81 c2 6d 01 00 00    	add    edx,0x16d
c00102ad:	48                   	dec    eax
c00102ae:	29 d1                	sub    ecx,edx
c00102b0:	eb e4                	jmp    c0010296 <datetimeToSeconds(datetime_t)+0xe1>
c00102b2:	b8 6d 01 00 00       	mov    eax,0x16d
c00102b7:	85 d2                	test   edx,edx
c00102b9:	75 0d                	jne    c00102c8 <datetimeToSeconds(datetime_t)+0x113>
c00102bb:	31 c0                	xor    eax,eax
c00102bd:	66 85 db             	test   bx,bx
c00102c0:	0f 95 c0             	setne  al
c00102c3:	05 6d 01 00 00       	add    eax,0x16d
c00102c8:	29 c1                	sub    ecx,eax
c00102ca:	b8 80 51 01 00       	mov    eax,0x15180
c00102cf:	f7 e9                	imul   ecx
c00102d1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00102d5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00102d9:	83 c4 14             	add    esp,0x14
c00102dc:	5b                   	pop    ebx
c00102dd:	5e                   	pop    esi
c00102de:	5f                   	pop    edi
c00102df:	5d                   	pop    ebp
c00102e0:	c3                   	ret    
c00102e1:	90                   	nop

c00102e2 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00102e2:	57                   	push   edi
c00102e3:	56                   	push   esi
c00102e4:	53                   	push   ebx
c00102e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00102e9:	8b 06                	mov    eax,DWORD PTR [esi]
c00102eb:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00102ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102f6:	e8 ba fe ff ff       	call   c00101b5 <datetimeToSeconds(datetime_t)>
c00102fb:	59                   	pop    ecx
c00102fc:	0f b6 0d 10 49 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024910
c0010303:	03 0d 14 49 02 c0    	add    ecx,DWORD PTR ds:0xc0024914
c0010309:	5b                   	pop    ebx
c001030a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010310:	89 cb                	mov    ebx,ecx
c0010312:	c1 fb 1f             	sar    ebx,0x1f
c0010315:	29 c8                	sub    eax,ecx
c0010317:	19 da                	sbb    edx,ebx
c0010319:	31 c9                	xor    ecx,ecx
c001031b:	80 3d 11 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024911,0x0
c0010322:	74 05                	je     c0010329 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0010324:	b9 08 07 00 00       	mov    ecx,0x708
c0010329:	31 db                	xor    ebx,ebx
c001032b:	29 c8                	sub    eax,ecx
c001032d:	19 da                	sbb    edx,ebx
c001032f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010333:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010337:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001033b:	5b                   	pop    ebx
c001033c:	89 f8                	mov    eax,edi
c001033e:	5e                   	pop    esi
c001033f:	5f                   	pop    edi
c0010340:	ff e0                	jmp    eax

c0010342 <secondsToDatetime(unsigned long long)>:
c0010342:	55                   	push   ebp
c0010343:	57                   	push   edi
c0010344:	56                   	push   esi
c0010345:	53                   	push   ebx
c0010346:	83 ec 1c             	sub    esp,0x1c
c0010349:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001034d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010351:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0010355:	6a 00                	push   0x0
c0010357:	68 80 51 01 00       	push   0x15180
c001035c:	55                   	push   ebp
c001035d:	57                   	push   edi
c001035e:	e8 a9 f1 00 00       	call   c001f50c <__udivdi3>
c0010363:	83 c4 10             	add    esp,0x10
c0010366:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001036a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0010370:	6a 00                	push   0x0
c0010372:	68 80 51 01 00       	push   0x15180
c0010377:	55                   	push   ebp
c0010378:	57                   	push   edi
c0010379:	e8 8e f2 00 00       	call   c001f60c <__umoddi3>
c001037e:	bf 10 0e 00 00       	mov    edi,0xe10
c0010383:	83 c4 10             	add    esp,0x10
c0010386:	99                   	cdq    
c0010387:	f7 ff                	idiv   edi
c0010389:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001038c:	89 d0                	mov    eax,edx
c001038e:	99                   	cdq    
c001038f:	bf 3c 00 00 00       	mov    edi,0x3c
c0010394:	f7 ff                	idiv   edi
c0010396:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0010399:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001039c:	85 db                	test   ebx,ebx
c001039e:	79 11                	jns    c00103b1 <secondsToDatetime(unsigned long long)+0x6f>
c00103a0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00103a4:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00103aa:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00103af:	eb 07                	jmp    c00103b8 <secondsToDatetime(unsigned long long)+0x76>
c00103b1:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00103b6:	89 d8                	mov    eax,ebx
c00103b8:	99                   	cdq    
c00103b9:	f7 f9                	idiv   ecx
c00103bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00103bf:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00103c4:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00103cc:	01 c3                	add    ebx,eax
c00103ce:	31 d2                	xor    edx,edx
c00103d0:	89 d8                	mov    eax,ebx
c00103d2:	bf b4 05 00 00       	mov    edi,0x5b4
c00103d7:	f7 f1                	div    ecx
c00103d9:	31 d2                	xor    edx,edx
c00103db:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00103e0:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00103e3:	89 d8                	mov    eax,ebx
c00103e5:	f7 f7                	div    edi
c00103e7:	29 c1                	sub    ecx,eax
c00103e9:	31 d2                	xor    edx,edx
c00103eb:	89 d8                	mov    eax,ebx
c00103ed:	f7 f5                	div    ebp
c00103ef:	29 c1                	sub    ecx,eax
c00103f1:	bd 6d 01 00 00       	mov    ebp,0x16d
c00103f6:	89 c8                	mov    eax,ecx
c00103f8:	31 d2                	xor    edx,edx
c00103fa:	f7 f5                	div    ebp
c00103fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010400:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0010405:	89 c8                	mov    eax,ecx
c0010407:	31 d2                	xor    edx,edx
c0010409:	f7 f5                	div    ebp
c001040b:	01 c3                	add    ebx,eax
c001040d:	31 d2                	xor    edx,edx
c001040f:	89 c8                	mov    eax,ecx
c0010411:	f7 f7                	div    edi
c0010413:	29 c3                	sub    ebx,eax
c0010415:	bf 99 00 00 00       	mov    edi,0x99
c001041a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0010422:	29 c3                	sub    ebx,eax
c0010424:	31 d2                	xor    edx,edx
c0010426:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0010429:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001042c:	83 c1 02             	add    ecx,0x2
c001042f:	bb 05 00 00 00       	mov    ebx,0x5
c0010434:	89 c8                	mov    eax,ecx
c0010436:	f7 f7                	div    edi
c0010438:	89 c7                	mov    edi,eax
c001043a:	31 d2                	xor    edx,edx
c001043c:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0010442:	83 c0 02             	add    eax,0x2
c0010445:	f7 f3                	div    ebx
c0010447:	89 eb                	mov    ebx,ebp
c0010449:	29 c3                	sub    ebx,eax
c001044b:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0010451:	19 c0                	sbb    eax,eax
c0010453:	31 d2                	xor    edx,edx
c0010455:	83 e0 0c             	and    eax,0xc
c0010458:	88 1e                	mov    BYTE PTR [esi],bl
c001045a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001045e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0010466:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001046a:	83 f9 01             	cmp    ecx,0x1
c001046d:	0f 96 c2             	setbe  dl
c0010470:	01 d0                	add    eax,edx
c0010472:	41                   	inc    ecx
c0010473:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0010477:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001047a:	83 c4 1c             	add    esp,0x1c
c001047d:	89 f0                	mov    eax,esi
c001047f:	5b                   	pop    ebx
c0010480:	5e                   	pop    esi
c0010481:	5f                   	pop    edi
c0010482:	5d                   	pop    ebp
c0010483:	c2 04 00             	ret    0x4

c0010486 <Clock::timeInDatetimeLocal()>:
c0010486:	53                   	push   ebx
c0010487:	83 ec 14             	sub    esp,0x14
c001048a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001048e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010492:	e8 7d fc ff ff       	call   c0010114 <Clock::timeInSecondsLocal()>
c0010497:	83 c4 0c             	add    esp,0xc
c001049a:	52                   	push   edx
c001049b:	50                   	push   eax
c001049c:	53                   	push   ebx
c001049d:	e8 a0 fe ff ff       	call   c0010342 <secondsToDatetime(unsigned long long)>
c00104a2:	83 c4 14             	add    esp,0x14
c00104a5:	89 d8                	mov    eax,ebx
c00104a7:	5b                   	pop    ebx
c00104a8:	c2 04 00             	ret    0x4
c00104ab:	90                   	nop

c00104ac <Device::hibernate()>:
c00104ac:	c3                   	ret    
c00104ad:	90                   	nop

c00104ae <Device::wake()>:
c00104ae:	c3                   	ret    
c00104af:	90                   	nop

c00104b0 <Device::detect()>:
c00104b0:	c3                   	ret    
c00104b1:	90                   	nop

c00104b2 <Device::disableLegacy()>:
c00104b2:	c3                   	ret    
c00104b3:	90                   	nop

c00104b4 <Device::powerSaving(PowerSavingLevel)>:
c00104b4:	c3                   	ret    
c00104b5:	90                   	nop

c00104b6 <DriverlessDevice::close(int, int, void*)>:
c00104b6:	31 c0                	xor    eax,eax
c00104b8:	c3                   	ret    
c00104b9:	90                   	nop

c00104ba <DriverlessDevice::detect()>:
c00104ba:	c3                   	ret    
c00104bb:	90                   	nop

c00104bc <DriverlessDevice::open(int, int, void*)>:
c00104bc:	83 ec 18             	sub    esp,0x18
c00104bf:	68 50 1c 02 c0       	push   0xc0021c50
c00104c4:	e8 7b 55 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c00104c9:	83 c8 ff             	or     eax,0xffffffff
c00104cc:	83 c4 1c             	add    esp,0x1c
c00104cf:	c3                   	ret    

c00104d0 <Device::~Device()>:
c00104d0:	ba 78 1c 02 c0       	mov    edx,0xc0021c78
c00104d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104d9:	89 10                	mov    DWORD PTR [eax],edx
c00104db:	90                   	nop
c00104dc:	c3                   	ret    
c00104dd:	90                   	nop

c00104de <Device::~Device()>:
c00104de:	83 ec 0c             	sub    esp,0xc
c00104e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00104e5:	e8 e6 ff ff ff       	call   c00104d0 <Device::~Device()>
c00104ea:	83 c4 04             	add    esp,0x4
c00104ed:	83 ec 08             	sub    esp,0x8
c00104f0:	68 58 01 00 00       	push   0x158
c00104f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104f9:	e8 f1 eb ff ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c00104fe:	83 c4 10             	add    esp,0x10
c0010501:	83 c4 0c             	add    esp,0xc
c0010504:	c3                   	ret    
c0010505:	90                   	nop

c0010506 <Device::findAndLoadDriver()>:
c0010506:	c3                   	ret    
c0010507:	90                   	nop

c0010508 <Device::preOpenPCI(PCIDeviceInfo)>:
c0010508:	57                   	push   edi
c0010509:	b9 09 00 00 00       	mov    ecx,0x9
c001050e:	56                   	push   esi
c001050f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010513:	81 c7 18 01 00 00    	add    edi,0x118
c0010519:	8d 74 24 10          	lea    esi,[esp+0x10]
c001051d:	c7 47 fc 02 00 00 00 	mov    DWORD PTR [edi-0x4],0x2
c0010524:	fc                   	cld    
c0010525:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010527:	5e                   	pop    esi
c0010528:	5f                   	pop    edi
c0010529:	c3                   	ret    

c001052a <Device::preOpenACPI(void*, char*, char*)>:
c001052a:	56                   	push   esi
c001052b:	53                   	push   ebx
c001052c:	83 ec 08             	sub    esp,0x8
c001052f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010533:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010537:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001053b:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0010541:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001054b:	6a 1e                	push   0x1e
c001054d:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0010553:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010557:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001055d:	50                   	push   eax
c001055e:	e8 2b 01 ff ff       	call   c000068e <memcpy>
c0010563:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010567:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001056b:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0010573:	83 c4 14             	add    esp,0x14
c0010576:	5b                   	pop    ebx
c0010577:	5e                   	pop    esi
c0010578:	e9 11 01 ff ff       	jmp    c000068e <memcpy>
c001057d:	90                   	nop

c001057e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001057e:	55                   	push   ebp
c001057f:	57                   	push   edi
c0010580:	56                   	push   esi
c0010581:	53                   	push   ebx
c0010582:	83 ec 0c             	sub    esp,0xc
c0010585:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010589:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001058d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010591:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010595:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c001059a:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00105a1:	75 0b                	jne    c00105ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00105a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00105a5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00105a9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00105ac:	eb 24                	jmp    c00105d2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00105ae:	e8 25 43 00 00       	call   c00148d8 <thisCPU()>
c00105b3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00105b9:	8b 10                	mov    edx,DWORD PTR [eax]
c00105bb:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00105bf:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00105c3:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00105c7:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00105cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00105cf:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00105d2:	83 c4 0c             	add    esp,0xc
c00105d5:	5b                   	pop    ebx
c00105d6:	5e                   	pop    esi
c00105d7:	5f                   	pop    edi
c00105d8:	5d                   	pop    ebp
c00105d9:	ff e0                	jmp    eax
c00105db:	90                   	nop

c00105dc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00105dc:	57                   	push   edi
c00105dd:	56                   	push   esi
c00105de:	53                   	push   ebx
c00105df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105e3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00105e7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00105eb:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00105f0:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00105f7:	75 0b                	jne    c0010604 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c00105f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00105fb:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00105ff:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0010602:	eb 20                	jmp    c0010624 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c0010604:	e8 cf 42 00 00       	call   c00148d8 <thisCPU()>
c0010609:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001060f:	8b 10                	mov    edx,DWORD PTR [eax]
c0010611:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010615:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010619:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001061d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010621:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0010624:	5b                   	pop    ebx
c0010625:	5e                   	pop    esi
c0010626:	5f                   	pop    edi
c0010627:	ff e0                	jmp    eax
c0010629:	90                   	nop

c001062a <Device::addChild(Device*)>:
c001062a:	53                   	push   ebx
c001062b:	83 ec 08             	sub    esp,0x8
c001062e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010632:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010636:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001063c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0010642:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010644:	85 d2                	test   edx,edx
c0010646:	74 04                	je     c001064c <Device::addChild(Device*)+0x22>
c0010648:	89 d3                	mov    ebx,edx
c001064a:	eb f6                	jmp    c0010642 <Device::addChild(Device*)+0x18>
c001064c:	83 ec 0c             	sub    esp,0xc
c001064f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010652:	6a 08                	push   0x8
c0010654:	e8 87 ea ff ff       	call   c000f0e0 <operator new(unsigned long)>
c0010659:	89 03                	mov    DWORD PTR [ebx],eax
c001065b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010661:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010668:	83 c4 18             	add    esp,0x18
c001066b:	5b                   	pop    ebx
c001066c:	c3                   	ret    
c001066d:	90                   	nop

c001066e <Device::removeAllChildren()>:
c001066e:	56                   	push   esi
c001066f:	53                   	push   ebx
c0010670:	52                   	push   edx
c0010671:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010675:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001067b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001067e:	74 17                	je     c0010697 <Device::removeAllChildren()+0x29>
c0010680:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0010683:	85 c0                	test   eax,eax
c0010685:	74 0c                	je     c0010693 <Device::removeAllChildren()+0x25>
c0010687:	83 ec 0c             	sub    esp,0xc
c001068a:	8b 10                	mov    edx,DWORD PTR [eax]
c001068c:	50                   	push   eax
c001068d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0010690:	83 c4 10             	add    esp,0x10
c0010693:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010695:	eb e4                	jmp    c001067b <Device::removeAllChildren()+0xd>
c0010697:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001069d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00106a3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00106a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00106b0:	58                   	pop    eax
c00106b1:	5b                   	pop    ebx
c00106b2:	5e                   	pop    esi
c00106b3:	c3                   	ret    

c00106b4 <Device::hibernateAll()>:
c00106b4:	53                   	push   ebx
c00106b5:	83 ec 14             	sub    esp,0x14
c00106b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00106bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106be:	53                   	push   ebx
c00106bf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00106c2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106c8:	83 c4 10             	add    esp,0x10
c00106cb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106ce:	74 0f                	je     c00106df <Device::hibernateAll()+0x2b>
c00106d0:	83 ec 0c             	sub    esp,0xc
c00106d3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00106d6:	e8 d9 ff ff ff       	call   c00106b4 <Device::hibernateAll()>
c00106db:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00106dd:	eb e9                	jmp    c00106c8 <Device::hibernateAll()+0x14>
c00106df:	83 c4 08             	add    esp,0x8
c00106e2:	5b                   	pop    ebx
c00106e3:	c3                   	ret    

c00106e4 <Device::wakeAll()>:
c00106e4:	53                   	push   ebx
c00106e5:	83 ec 14             	sub    esp,0x14
c00106e8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00106ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106ee:	53                   	push   ebx
c00106ef:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00106f2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106f8:	83 c4 10             	add    esp,0x10
c00106fb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106fe:	74 0f                	je     c001070f <Device::wakeAll()+0x2b>
c0010700:	83 ec 0c             	sub    esp,0xc
c0010703:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010706:	e8 d9 ff ff ff       	call   c00106e4 <Device::wakeAll()>
c001070b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001070d:	eb e9                	jmp    c00106f8 <Device::wakeAll()+0x14>
c001070f:	83 c4 08             	add    esp,0x8
c0010712:	5b                   	pop    ebx
c0010713:	c3                   	ret    

c0010714 <Device::detectAll()>:
c0010714:	53                   	push   ebx
c0010715:	83 ec 14             	sub    esp,0x14
c0010718:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001071c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001071e:	53                   	push   ebx
c001071f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0010722:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010728:	83 c4 10             	add    esp,0x10
c001072b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001072e:	74 0f                	je     c001073f <Device::detectAll()+0x2b>
c0010730:	83 ec 0c             	sub    esp,0xc
c0010733:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010736:	e8 d9 ff ff ff       	call   c0010714 <Device::detectAll()>
c001073b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001073d:	eb e9                	jmp    c0010728 <Device::detectAll()+0x14>
c001073f:	83 c4 08             	add    esp,0x8
c0010742:	5b                   	pop    ebx
c0010743:	c3                   	ret    

c0010744 <Device::disableLegacyAll()>:
c0010744:	53                   	push   ebx
c0010745:	83 ec 14             	sub    esp,0x14
c0010748:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001074c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001074e:	53                   	push   ebx
c001074f:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0010752:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010758:	83 c4 10             	add    esp,0x10
c001075b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001075e:	74 0f                	je     c001076f <Device::disableLegacyAll()+0x2b>
c0010760:	83 ec 0c             	sub    esp,0xc
c0010763:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010766:	e8 d9 ff ff ff       	call   c0010744 <Device::disableLegacyAll()>
c001076b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001076d:	eb e9                	jmp    c0010758 <Device::disableLegacyAll()+0x14>
c001076f:	83 c4 08             	add    esp,0x8
c0010772:	5b                   	pop    ebx
c0010773:	c3                   	ret    

c0010774 <Device::loadDriversForAll()>:
c0010774:	53                   	push   ebx
c0010775:	83 ec 08             	sub    esp,0x8
c0010778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001077c:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010782:	8b 18                	mov    ebx,DWORD PTR [eax]
c0010784:	85 db                	test   ebx,ebx
c0010786:	74 12                	je     c001079a <Device::loadDriversForAll()+0x26>
c0010788:	83 ec 0c             	sub    esp,0xc
c001078b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001078e:	e8 e1 ff ff ff       	call   c0010774 <Device::loadDriversForAll()>
c0010793:	83 c4 10             	add    esp,0x10
c0010796:	89 d8                	mov    eax,ebx
c0010798:	eb e8                	jmp    c0010782 <Device::loadDriversForAll()+0xe>
c001079a:	83 c4 08             	add    esp,0x8
c001079d:	5b                   	pop    ebx
c001079e:	c3                   	ret    
c001079f:	90                   	nop

c00107a0 <Device::closeAll()>:
c00107a0:	53                   	push   ebx
c00107a1:	83 ec 08             	sub    esp,0x8
c00107a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107aa:	6a 00                	push   0x0
c00107ac:	6a 00                	push   0x0
c00107ae:	6a 00                	push   0x0
c00107b0:	53                   	push   ebx
c00107b1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00107b4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00107ba:	83 c4 10             	add    esp,0x10
c00107bd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00107c0:	74 0f                	je     c00107d1 <Device::closeAll()+0x31>
c00107c2:	83 ec 0c             	sub    esp,0xc
c00107c5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00107c8:	e8 d3 ff ff ff       	call   c00107a0 <Device::closeAll()>
c00107cd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00107cf:	eb e9                	jmp    c00107ba <Device::closeAll()+0x1a>
c00107d1:	83 c4 08             	add    esp,0x8
c00107d4:	5b                   	pop    ebx
c00107d5:	c3                   	ret    

c00107d6 <Device::powerSavingAll(PowerSavingLevel)>:
c00107d6:	56                   	push   esi
c00107d7:	53                   	push   ebx
c00107d8:	83 ec 0c             	sub    esp,0xc
c00107db:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00107df:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00107e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107e5:	56                   	push   esi
c00107e6:	53                   	push   ebx
c00107e7:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00107ea:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00107f0:	83 c4 10             	add    esp,0x10
c00107f3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00107f6:	74 0f                	je     c0010807 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00107f8:	52                   	push   edx
c00107f9:	52                   	push   edx
c00107fa:	56                   	push   esi
c00107fb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00107fe:	e8 d3 ff ff ff       	call   c00107d6 <Device::powerSavingAll(PowerSavingLevel)>
c0010803:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010805:	eb e9                	jmp    c00107f0 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0010807:	58                   	pop    eax
c0010808:	5b                   	pop    ebx
c0010809:	5e                   	pop    esi
c001080a:	c3                   	ret    
c001080b:	90                   	nop

c001080c <Device::setName(char const*)>:
c001080c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0010814:	e9 4a ff fe ff       	jmp    c0000763 <strcpy>
c0010819:	90                   	nop

c001081a <Device::Device(char const*)>:
c001081a:	83 ec 0c             	sub    esp,0xc
c001081d:	ba 78 1c 02 c0       	mov    edx,0xc0021c78
c0010822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010826:	89 10                	mov    DWORD PTR [eax],edx
c0010828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001082c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0010836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001083a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010848:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0010852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010856:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0010860:	83 ec 08             	sub    esp,0x8
c0010863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010867:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001086b:	e8 9c ff ff ff       	call   c001080c <Device::setName(char const*)>
c0010870:	83 c4 10             	add    esp,0x10
c0010873:	83 ec 0c             	sub    esp,0xc
c0010876:	6a 08                	push   0x8
c0010878:	e8 63 e8 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c001087d:	83 c4 10             	add    esp,0x10
c0010880:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010886:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001088d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010891:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0010897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001089b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00108a1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00108a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ab:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00108b1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00108b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108bc:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00108c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c7:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00108ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00108dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00108ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ee:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00108f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fc:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0010906:	90                   	nop
c0010907:	83 c4 0c             	add    esp,0xc
c001090a:	c3                   	ret    
c001090b:	90                   	nop

c001090c <Device::getName()>:
c001090c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010910:	05 d0 00 00 00       	add    eax,0xd0
c0010915:	c3                   	ret    

c0010916 <DriverlessDevice::DriverlessDevice(char const*)>:
c0010916:	83 ec 0c             	sub    esp,0xc
c0010919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001091d:	83 ec 08             	sub    esp,0x8
c0010920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010924:	50                   	push   eax
c0010925:	e8 f0 fe ff ff       	call   c001081a <Device::Device(char const*)>
c001092a:	83 c4 10             	add    esp,0x10
c001092d:	ba a4 1c 02 c0       	mov    edx,0xc0021ca4
c0010932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010936:	89 10                	mov    DWORD PTR [eax],edx
c0010938:	90                   	nop
c0010939:	83 c4 0c             	add    esp,0xc
c001093c:	c3                   	ret    
c001093d:	90                   	nop

c001093e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001093e:	57                   	push   edi
c001093f:	56                   	push   esi
c0010940:	53                   	push   ebx
c0010941:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010945:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010949:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001094d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0010953:	75 0c                	jne    c0010961 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0010955:	52                   	push   edx
c0010956:	52                   	push   edx
c0010957:	53                   	push   ebx
c0010958:	56                   	push   esi
c0010959:	e8 c6 f0 00 00       	call   c001fa24 <LinkedList<Device>::addElement(Device*)>
c001095e:	83 c4 10             	add    esp,0x10
c0010961:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010967:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001096a:	74 12                	je     c001097e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001096c:	50                   	push   eax
c001096d:	57                   	push   edi
c001096e:	56                   	push   esi
c001096f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010972:	e8 c7 ff ff ff       	call   c001093e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0010977:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010979:	83 c4 10             	add    esp,0x10
c001097c:	eb e9                	jmp    c0010967 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001097e:	5b                   	pop    ebx
c001097f:	5e                   	pop    esi
c0010980:	5f                   	pop    edi
c0010981:	c3                   	ret    

c0010982 <getDevicesOfType(DeviceType)>:
c0010982:	53                   	push   ebx
c0010983:	83 ec 14             	sub    esp,0x14
c0010986:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001098a:	53                   	push   ebx
c001098b:	e8 70 f1 00 00       	call   c001fb00 <LinkedList<Device>::LinkedList()>
c0010990:	83 c4 0c             	add    esp,0xc
c0010993:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010997:	53                   	push   ebx
c0010998:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c001099e:	e8 9b ff ff ff       	call   c001093e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00109a3:	83 c4 18             	add    esp,0x18
c00109a6:	89 d8                	mov    eax,ebx
c00109a8:	5b                   	pop    ebx
c00109a9:	c2 04 00             	ret    0x4

c00109ac <HardDiskController::HardDiskController(char const*)>:
c00109ac:	83 ec 0c             	sub    esp,0xc
c00109af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b3:	83 ec 08             	sub    esp,0x8
c00109b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109ba:	50                   	push   eax
c00109bb:	e8 5a fe ff ff       	call   c001081a <Device::Device(char const*)>
c00109c0:	83 c4 10             	add    esp,0x10
c00109c3:	ba d0 1c 02 c0       	mov    edx,0xc0021cd0
c00109c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109cc:	89 10                	mov    DWORD PTR [eax],edx
c00109ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109d2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00109dc:	90                   	nop
c00109dd:	83 c4 0c             	add    esp,0xc
c00109e0:	c3                   	ret    
c00109e1:	90                   	nop

c00109e2 <HardDiskController::~HardDiskController()>:
c00109e2:	83 ec 0c             	sub    esp,0xc
c00109e5:	ba d0 1c 02 c0       	mov    edx,0xc0021cd0
c00109ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ee:	89 10                	mov    DWORD PTR [eax],edx
c00109f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109f4:	83 ec 0c             	sub    esp,0xc
c00109f7:	50                   	push   eax
c00109f8:	e8 d3 fa ff ff       	call   c00104d0 <Device::~Device()>
c00109fd:	83 c4 10             	add    esp,0x10
c0010a00:	90                   	nop
c0010a01:	83 c4 0c             	add    esp,0xc
c0010a04:	c3                   	ret    
c0010a05:	90                   	nop

c0010a06 <HardDiskController::~HardDiskController()>:
c0010a06:	83 ec 0c             	sub    esp,0xc
c0010a09:	83 ec 0c             	sub    esp,0xc
c0010a0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a10:	e8 cd ff ff ff       	call   c00109e2 <HardDiskController::~HardDiskController()>
c0010a15:	83 c4 10             	add    esp,0x10
c0010a18:	83 ec 08             	sub    esp,0x8
c0010a1b:	68 58 01 00 00       	push   0x158
c0010a20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a24:	e8 c6 e6 ff ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c0010a29:	83 c4 10             	add    esp,0x10
c0010a2c:	83 c4 0c             	add    esp,0xc
c0010a2f:	c3                   	ret    

c0010a30 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0010a30:	83 ec 0c             	sub    esp,0xc
c0010a33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a37:	83 ec 08             	sub    esp,0x8
c0010a3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a3e:	50                   	push   eax
c0010a3f:	e8 d6 fd ff ff       	call   c001081a <Device::Device(char const*)>
c0010a44:	83 c4 10             	add    esp,0x10
c0010a47:	ba fc 1c 02 c0       	mov    edx,0xc0021cfc
c0010a4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a50:	89 10                	mov    DWORD PTR [eax],edx
c0010a52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a56:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010a5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a61:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0010a68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a6c:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0010a76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a7a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010a7e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0010a84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a88:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010a92:	90                   	nop
c0010a93:	83 c4 0c             	add    esp,0xc
c0010a96:	c3                   	ret    
c0010a97:	90                   	nop

c0010a98 <PhysicalDisk::startCache()>:
c0010a98:	56                   	push   esi
c0010a99:	53                   	push   ebx
c0010a9a:	83 ec 10             	sub    esp,0x10
c0010a9d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010aa1:	6a 30                	push   0x30
c0010aa3:	e8 38 e6 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c0010aa8:	89 c6                	mov    esi,eax
c0010aaa:	58                   	pop    eax
c0010aab:	5a                   	pop    edx
c0010aac:	53                   	push   ebx
c0010aad:	56                   	push   esi
c0010aae:	e8 3b 25 00 00       	call   c0012fee <VCache::VCache(PhysicalDisk*)>
c0010ab3:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0010ab9:	83 c4 14             	add    esp,0x14
c0010abc:	5b                   	pop    ebx
c0010abd:	5e                   	pop    esi
c0010abe:	c3                   	ret    
c0010abf:	90                   	nop

c0010ac0 <PhysicalDisk::~PhysicalDisk()>:
c0010ac0:	83 ec 0c             	sub    esp,0xc
c0010ac3:	ba fc 1c 02 c0       	mov    edx,0xc0021cfc
c0010ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010acc:	89 10                	mov    DWORD PTR [eax],edx
c0010ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ad2:	83 ec 0c             	sub    esp,0xc
c0010ad5:	50                   	push   eax
c0010ad6:	e8 f5 f9 ff ff       	call   c00104d0 <Device::~Device()>
c0010adb:	83 c4 10             	add    esp,0x10
c0010ade:	90                   	nop
c0010adf:	83 c4 0c             	add    esp,0xc
c0010ae2:	c3                   	ret    
c0010ae3:	90                   	nop

c0010ae4 <PhysicalDisk::~PhysicalDisk()>:
c0010ae4:	83 ec 0c             	sub    esp,0xc
c0010ae7:	83 ec 0c             	sub    esp,0xc
c0010aea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010aee:	e8 cd ff ff ff       	call   c0010ac0 <PhysicalDisk::~PhysicalDisk()>
c0010af3:	83 c4 10             	add    esp,0x10
c0010af6:	83 ec 08             	sub    esp,0x8
c0010af9:	68 6c 01 00 00       	push   0x16c
c0010afe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b02:	e8 e8 e5 ff ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c0010b07:	83 c4 10             	add    esp,0x10
c0010b0a:	83 c4 0c             	add    esp,0xc
c0010b0d:	c3                   	ret    

c0010b0e <FPU::FPU(char const*)>:
c0010b0e:	83 ec 0c             	sub    esp,0xc
c0010b11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b15:	83 ec 08             	sub    esp,0x8
c0010b18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b1c:	50                   	push   eax
c0010b1d:	e8 f8 fc ff ff       	call   c001081a <Device::Device(char const*)>
c0010b22:	83 c4 10             	add    esp,0x10
c0010b25:	ba 3c 1d 02 c0       	mov    edx,0xc0021d3c
c0010b2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b2e:	89 10                	mov    DWORD PTR [eax],edx
c0010b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b34:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0010b3e:	90                   	nop
c0010b3f:	83 c4 0c             	add    esp,0xc
c0010b42:	c3                   	ret    
c0010b43:	90                   	nop

c0010b44 <FPU::~FPU()>:
c0010b44:	83 ec 0c             	sub    esp,0xc
c0010b47:	ba 3c 1d 02 c0       	mov    edx,0xc0021d3c
c0010b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b50:	89 10                	mov    DWORD PTR [eax],edx
c0010b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b56:	83 ec 0c             	sub    esp,0xc
c0010b59:	50                   	push   eax
c0010b5a:	e8 71 f9 ff ff       	call   c00104d0 <Device::~Device()>
c0010b5f:	83 c4 10             	add    esp,0x10
c0010b62:	90                   	nop
c0010b63:	83 c4 0c             	add    esp,0xc
c0010b66:	c3                   	ret    
c0010b67:	90                   	nop

c0010b68 <FPU::~FPU()>:
c0010b68:	83 ec 0c             	sub    esp,0xc
c0010b6b:	83 ec 0c             	sub    esp,0xc
c0010b6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b72:	e8 cd ff ff ff       	call   c0010b44 <FPU::~FPU()>
c0010b77:	83 c4 10             	add    esp,0x10
c0010b7a:	83 ec 08             	sub    esp,0x8
c0010b7d:	68 58 01 00 00       	push   0x158
c0010b82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b86:	e8 64 e5 ff ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c0010b8b:	83 c4 10             	add    esp,0x10
c0010b8e:	83 c4 0c             	add    esp,0xc
c0010b91:	c3                   	ret    

c0010b92 <setupFPU()>:
c0010b92:	53                   	push   ebx
c0010b93:	83 ec 08             	sub    esp,0x8
c0010b96:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0010b9b:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0010ba2:	74 19                	je     c0010bbd <setupFPU()+0x2b>
c0010ba4:	83 ec 0c             	sub    esp,0xc
c0010ba7:	68 58 01 00 00       	push   0x158
c0010bac:	e8 2f e5 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c0010bb1:	89 c3                	mov    ebx,eax
c0010bb3:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bb6:	e8 97 d5 00 00       	call   c001e152 <AVX::AVX()>
c0010bbb:	eb 5b                	jmp    c0010c18 <setupFPU()+0x86>
c0010bbd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010bc3:	84 c0                	test   al,al
c0010bc5:	79 19                	jns    c0010be0 <setupFPU()+0x4e>
c0010bc7:	83 ec 0c             	sub    esp,0xc
c0010bca:	68 58 01 00 00       	push   0x158
c0010bcf:	e8 0c e5 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c0010bd4:	89 c3                	mov    ebx,eax
c0010bd6:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bd9:	e8 9a d6 00 00       	call   c001e278 <SSE::SSE()>
c0010bde:	eb 38                	jmp    c0010c18 <setupFPU()+0x86>
c0010be0:	a8 20                	test   al,0x20
c0010be2:	74 19                	je     c0010bfd <setupFPU()+0x6b>
c0010be4:	83 ec 0c             	sub    esp,0xc
c0010be7:	68 58 01 00 00       	push   0x158
c0010bec:	e8 ef e4 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c0010bf1:	89 c3                	mov    ebx,eax
c0010bf3:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bf6:	e8 e7 d5 00 00       	call   c001e1e2 <MMX::MMX()>
c0010bfb:	eb 1b                	jmp    c0010c18 <setupFPU()+0x86>
c0010bfd:	a8 10                	test   al,0x10
c0010bff:	74 1c                	je     c0010c1d <setupFPU()+0x8b>
c0010c01:	83 ec 0c             	sub    esp,0xc
c0010c04:	68 58 01 00 00       	push   0x158
c0010c09:	e8 d2 e4 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c0010c0e:	89 c3                	mov    ebx,eax
c0010c10:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c13:	e8 ee d6 00 00       	call   c001e306 <x87::x87()>
c0010c18:	83 c4 10             	add    esp,0x10
c0010c1b:	eb 2c                	jmp    c0010c49 <setupFPU()+0xb7>
c0010c1d:	83 ec 0c             	sub    esp,0xc
c0010c20:	31 db                	xor    ebx,ebx
c0010c22:	68 28 1d 02 c0       	push   0xc0021d28
c0010c27:	e8 e9 e5 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0010c2c:	e8 a7 3c 00 00       	call   c00148d8 <thisCPU()>
c0010c31:	e8 a2 3c 00 00       	call   c00148d8 <thisCPU()>
c0010c36:	e8 1d ef 00 00       	call   c001fb58 <CPU::readCR0()>
c0010c3b:	83 c8 04             	or     eax,0x4
c0010c3e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c41:	e8 24 ef 00 00       	call   c001fb6a <CPU::writeCR0(unsigned long)>
c0010c46:	83 c4 10             	add    esp,0x10
c0010c49:	83 c4 08             	add    esp,0x8
c0010c4c:	89 d8                	mov    eax,ebx
c0010c4e:	5b                   	pop    ebx
c0010c4f:	c3                   	ret    

c0010c50 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0010c50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c54:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010c58:	c1 e0 04             	shl    eax,0x4
c0010c5b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0010c5f:	8d 50 10             	lea    edx,[eax+0x10]
c0010c62:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0010c68:	74 08                	je     c0010c72 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0010c6a:	83 c0 04             	add    eax,0x4
c0010c6d:	39 d0                	cmp    eax,edx
c0010c6f:	75 f1                	jne    c0010c62 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0010c71:	c3                   	ret    
c0010c72:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010c7c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010c86:	eb e2                	jmp    c0010c6a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0010c88 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0010c88:	57                   	push   edi
c0010c89:	31 c0                	xor    eax,eax
c0010c8b:	56                   	push   esi
c0010c8c:	53                   	push   ebx
c0010c8d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010c91:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c95:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010c99:	89 da                	mov    edx,ebx
c0010c9b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010c9f:	c1 e2 04             	shl    edx,0x4
c0010ca2:	01 ca                	add    edx,ecx
c0010ca4:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010cac:	74 16                	je     c0010cc4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010cae:	40                   	inc    eax
c0010caf:	83 f8 04             	cmp    eax,0x4
c0010cb2:	75 f0                	jne    c0010ca4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0010cb4:	c7 44 24 10 6c 1d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021d6c
c0010cbc:	5b                   	pop    ebx
c0010cbd:	5e                   	pop    esi
c0010cbe:	5f                   	pop    edi
c0010cbf:	e9 80 4d 00 00       	jmp    c0015a44 <Krnl::panic(char const*)>
c0010cc4:	8d 04 98             	lea    eax,[eax+ebx*4]
c0010cc7:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010cca:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010cd0:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010cd6:	5b                   	pop    ebx
c0010cd7:	5e                   	pop    esi
c0010cd8:	5f                   	pop    edi
c0010cd9:	c3                   	ret    

c0010cda <doubleFault(regs*, void*)>:
c0010cda:	55                   	push   ebp
c0010cdb:	89 e5                	mov    ebp,esp
c0010cdd:	83 ec 08             	sub    esp,0x8
c0010ce0:	83 ec 0c             	sub    esp,0xc
c0010ce3:	68 a7 1d 02 c0       	push   0xc0021da7
c0010ce8:	e8 57 4d 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c0010ced:	83 c4 10             	add    esp,0x10
c0010cf0:	90                   	nop
c0010cf1:	c9                   	leave  
c0010cf2:	c3                   	ret    
c0010cf3:	90                   	nop

c0010cf4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010cf4:	56                   	push   esi
c0010cf5:	53                   	push   ebx
c0010cf6:	50                   	push   eax
c0010cf7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010cfb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010cff:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010d04:	75 35                	jne    c0010d3b <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0010d06:	8d 43 20             	lea    eax,[ebx+0x20]
c0010d09:	31 d2                	xor    edx,edx
c0010d0b:	89 c1                	mov    ecx,eax
c0010d0d:	c1 e1 04             	shl    ecx,0x4
c0010d10:	01 f1                	add    ecx,esi
c0010d12:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0010d1a:	74 3e                	je     c0010d5a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0010d1c:	42                   	inc    edx
c0010d1d:	83 fa 04             	cmp    edx,0x4
c0010d20:	75 f0                	jne    c0010d12 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0010d22:	83 ec 0c             	sub    esp,0xc
c0010d25:	68 ec 1d 02 c0       	push   0xc0021dec
c0010d2a:	e8 15 4d 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c0010d2f:	83 c4 10             	add    esp,0x10
c0010d32:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d37:	5a                   	pop    edx
c0010d38:	5b                   	pop    ebx
c0010d39:	5e                   	pop    esi
c0010d3a:	c3                   	ret    
c0010d3b:	83 ec 0c             	sub    esp,0xc
c0010d3e:	56                   	push   esi
c0010d3f:	e8 c8 fb ff ff       	call   c001090c <Device::getName()>
c0010d44:	83 c4 10             	add    esp,0x10
c0010d47:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010d4a:	75 ba                	jne    c0010d06 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010d4c:	83 fb 0f             	cmp    ebx,0xf
c0010d4f:	7f 29                	jg     c0010d7a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0010d51:	0f b6 9b 00 3f 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc100]
c0010d58:	eb ac                	jmp    c0010d06 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010d5a:	8d 04 82             	lea    eax,[edx+eax*4]
c0010d5d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010d61:	8d 04 86             	lea    eax,[esi+eax*4]
c0010d64:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010d6a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010d6e:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0010d74:	89 d8                	mov    eax,ebx
c0010d76:	5a                   	pop    edx
c0010d77:	5b                   	pop    ebx
c0010d78:	5e                   	pop    esi
c0010d79:	c3                   	ret    
c0010d7a:	83 ec 0c             	sub    esp,0xc
c0010d7d:	68 b4 1d 02 c0       	push   0xc0021db4
c0010d82:	e8 bd 4c 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c0010d87:	83 c4 10             	add    esp,0x10
c0010d8a:	e9 77 ff ff ff       	jmp    c0010d06 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010d8f:	90                   	nop

c0010d90 <InterruptController::clearAllHandlers(int, bool)>:
c0010d90:	56                   	push   esi
c0010d91:	53                   	push   ebx
c0010d92:	52                   	push   edx
c0010d93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d97:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010d9b:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0010da0:	75 61                	jne    c0010e03 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0010da2:	8d 46 20             	lea    eax,[esi+0x20]
c0010da5:	c1 e6 04             	shl    esi,0x4
c0010da8:	c1 e0 04             	shl    eax,0x4
c0010dab:	01 de                	add    esi,ebx
c0010dad:	01 d8                	add    eax,ebx
c0010daf:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010db9:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0010dc3:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010dcd:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010dd7:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010de1:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010deb:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010df5:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010dff:	58                   	pop    eax
c0010e00:	5b                   	pop    ebx
c0010e01:	5e                   	pop    esi
c0010e02:	c3                   	ret    
c0010e03:	83 ec 0c             	sub    esp,0xc
c0010e06:	53                   	push   ebx
c0010e07:	e8 00 fb ff ff       	call   c001090c <Device::getName()>
c0010e0c:	83 c4 10             	add    esp,0x10
c0010e0f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010e12:	75 8e                	jne    c0010da2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010e14:	83 fe 0f             	cmp    esi,0xf
c0010e17:	7f 09                	jg     c0010e22 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0010e19:	0f b6 b6 00 3f 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc100]
c0010e20:	eb 80                	jmp    c0010da2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010e22:	83 ec 0c             	sub    esp,0xc
c0010e25:	68 28 1e 02 c0       	push   0xc0021e28
c0010e2a:	e8 15 4c 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c0010e2f:	83 c4 10             	add    esp,0x10
c0010e32:	e9 6b ff ff ff       	jmp    c0010da2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010e37:	90                   	nop

c0010e38 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010e38:	56                   	push   esi
c0010e39:	53                   	push   ebx
c0010e3a:	52                   	push   edx
c0010e3b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010e3f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010e43:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010e48:	75 3a                	jne    c0010e84 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0010e4a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e4e:	8d 50 20             	lea    edx,[eax+0x20]
c0010e51:	c1 e2 04             	shl    edx,0x4
c0010e54:	8d 04 16             	lea    eax,[esi+edx*1]
c0010e57:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0010e5b:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010e61:	74 0b                	je     c0010e6e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010e63:	83 c0 04             	add    eax,0x4
c0010e66:	39 d0                	cmp    eax,edx
c0010e68:	75 f1                	jne    c0010e5b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010e6a:	58                   	pop    eax
c0010e6b:	5b                   	pop    ebx
c0010e6c:	5e                   	pop    esi
c0010e6d:	c3                   	ret    
c0010e6e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010e78:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010e82:	eb df                	jmp    c0010e63 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010e84:	83 ec 0c             	sub    esp,0xc
c0010e87:	56                   	push   esi
c0010e88:	e8 7f fa ff ff       	call   c001090c <Device::getName()>
c0010e8d:	83 c4 10             	add    esp,0x10
c0010e90:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010e93:	75 b5                	jne    c0010e4a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010e95:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010e9a:	7f 11                	jg     c0010ead <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0010e9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010ea0:	0f b6 80 00 3f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc100]
c0010ea7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010eab:	eb 9d                	jmp    c0010e4a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010ead:	83 ec 0c             	sub    esp,0xc
c0010eb0:	68 28 1e 02 c0       	push   0xc0021e28
c0010eb5:	e8 8a 4b 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c0010eba:	83 c4 10             	add    esp,0x10
c0010ebd:	eb 8b                	jmp    c0010e4a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010ebf <nmiHandler(regs*, void*)>:
c0010ebf:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0010ec4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010ec8:	e9 5b a8 ff ff       	jmp    c000b728 <Computer::handleNMI()>

c0010ecd <int_handler>:
c0010ecd:	55                   	push   ebp
c0010ece:	57                   	push   edi
c0010ecf:	56                   	push   esi
c0010ed0:	53                   	push   ebx
c0010ed1:	83 ec 0c             	sub    esp,0xc
c0010ed4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010ed8:	80 3d f4 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251f4,0x0
c0010edf:	74 0b                	je     c0010eec <int_handler+0x1f>
c0010ee1:	fa                   	cli    
c0010ee2:	f4                   	hlt    
c0010ee3:	80 3d f4 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251f4,0x0
c0010eea:	75 f5                	jne    c0010ee1 <int_handler+0x14>
c0010eec:	e8 e7 39 00 00       	call   c00148d8 <thisCPU()>
c0010ef1:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010ef4:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010efa:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010efd:	83 f8 17             	cmp    eax,0x17
c0010f00:	77 13                	ja     c0010f15 <int_handler+0x48>
c0010f02:	83 ec 08             	sub    esp,0x8
c0010f05:	8b 17                	mov    edx,DWORD PTR [edi]
c0010f07:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010f0a:	0f b6 c0             	movzx  eax,al
c0010f0d:	50                   	push   eax
c0010f0e:	57                   	push   edi
c0010f0f:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010f12:	83 c4 10             	add    esp,0x10
c0010f15:	83 c3 15             	add    ebx,0x15
c0010f18:	c1 e3 04             	shl    ebx,0x4
c0010f1b:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010f1f:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010f26:	31 db                	xor    ebx,ebx
c0010f28:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010f2c:	85 c0                	test   eax,eax
c0010f2e:	74 13                	je     c0010f43 <int_handler+0x76>
c0010f30:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010f33:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010f37:	74 1c                	je     c0010f55 <int_handler+0x88>
c0010f39:	83 ec 08             	sub    esp,0x8
c0010f3c:	52                   	push   edx
c0010f3d:	56                   	push   esi
c0010f3e:	ff d0                	call   eax
c0010f40:	83 c4 10             	add    esp,0x10
c0010f43:	43                   	inc    ebx
c0010f44:	83 fb 04             	cmp    ebx,0x4
c0010f47:	75 df                	jne    c0010f28 <int_handler+0x5b>
c0010f49:	83 c4 0c             	add    esp,0xc
c0010f4c:	31 c0                	xor    eax,eax
c0010f4e:	5b                   	pop    ebx
c0010f4f:	31 d2                	xor    edx,edx
c0010f51:	5e                   	pop    esi
c0010f52:	5f                   	pop    edi
c0010f53:	5d                   	pop    ebp
c0010f54:	c3                   	ret    
c0010f55:	83 ec 08             	sub    esp,0x8
c0010f58:	52                   	push   edx
c0010f59:	56                   	push   esi
c0010f5a:	ff d0                	call   eax
c0010f5c:	83 c4 10             	add    esp,0x10
c0010f5f:	83 c4 0c             	add    esp,0xc
c0010f62:	5b                   	pop    ebx
c0010f63:	5e                   	pop    esi
c0010f64:	5f                   	pop    edi
c0010f65:	5d                   	pop    ebp
c0010f66:	c3                   	ret    
c0010f67:	90                   	nop

c0010f68 <InterruptController::InterruptController(char const*)>:
c0010f68:	83 ec 1c             	sub    esp,0x1c
c0010f6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f6f:	83 ec 08             	sub    esp,0x8
c0010f72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010f76:	50                   	push   eax
c0010f77:	e8 9e f8 ff ff       	call   c001081a <Device::Device(char const*)>
c0010f7c:	83 c4 10             	add    esp,0x10
c0010f7f:	ba 64 20 02 c0       	mov    edx,0xc0022064
c0010f84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f88:	89 10                	mov    DWORD PTR [eax],edx
c0010f8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f8e:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010f98:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010fa0:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010fa8:	7f 5e                	jg     c0011008 <InterruptController::InterruptController(char const*)+0xa0>
c0010faa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010fb2:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010fb7:	7f 49                	jg     c0011002 <InterruptController::InterruptController(char const*)+0x9a>
c0010fb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fbd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010fc1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010fc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010fcc:	01 ca                	add    edx,ecx
c0010fce:	83 c2 54             	add    edx,0x54
c0010fd1:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010fd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fdd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010fe1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010fe8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010fec:	01 ca                	add    edx,ecx
c0010fee:	81 c2 54 04 00 00    	add    edx,0x454
c0010ff4:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010ffc:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011000:	eb b0                	jmp    c0010fb2 <InterruptController::InterruptController(char const*)+0x4a>
c0011002:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011006:	eb 98                	jmp    c0010fa0 <InterruptController::InterruptController(char const*)+0x38>
c0011008:	90                   	nop
c0011009:	83 c4 1c             	add    esp,0x1c
c001100c:	c3                   	ret    
c001100d:	90                   	nop

c001100e <InterruptController::~InterruptController()>:
c001100e:	83 ec 0c             	sub    esp,0xc
c0011011:	ba 64 20 02 c0       	mov    edx,0xc0022064
c0011016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001101a:	89 10                	mov    DWORD PTR [eax],edx
c001101c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011020:	83 ec 0c             	sub    esp,0xc
c0011023:	50                   	push   eax
c0011024:	e8 a7 f4 ff ff       	call   c00104d0 <Device::~Device()>
c0011029:	83 c4 10             	add    esp,0x10
c001102c:	90                   	nop
c001102d:	83 c4 0c             	add    esp,0xc
c0011030:	c3                   	ret    
c0011031:	90                   	nop

c0011032 <InterruptController::~InterruptController()>:
c0011032:	83 ec 0c             	sub    esp,0xc
c0011035:	83 ec 0c             	sub    esp,0xc
c0011038:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001103c:	e8 cd ff ff ff       	call   c001100e <InterruptController::~InterruptController()>
c0011041:	83 c4 10             	add    esp,0x10
c0011044:	83 ec 08             	sub    esp,0x8
c0011047:	68 58 21 00 00       	push   0x2158
c001104c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011050:	e8 9a e0 ff ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c0011055:	83 c4 10             	add    esp,0x10
c0011058:	83 c4 0c             	add    esp,0xc
c001105b:	c3                   	ret    

c001105c <displayDebugInfo(regs*)>:
c001105c:	55                   	push   ebp
c001105d:	57                   	push   edi
c001105e:	56                   	push   esi
c001105f:	53                   	push   ebx
c0011060:	83 ec 24             	sub    esp,0x24
c0011063:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011067:	0f 20 c2             	mov    edx,cr0
c001106a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001106e:	0f 20 d7             	mov    edi,cr2
c0011071:	0f 20 de             	mov    esi,cr3
c0011074:	0f 20 e5             	mov    ebp,cr4
c0011077:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001107a:	68 62 1e 02 c0       	push   0xc0021e62
c001107f:	e8 91 e1 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0011084:	58                   	pop    eax
c0011085:	5a                   	pop    edx
c0011086:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011089:	68 6d 1e 02 c0       	push   0xc0021e6d
c001108e:	e8 82 e1 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0011093:	59                   	pop    ecx
c0011094:	58                   	pop    eax
c0011095:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011098:	68 78 1e 02 c0       	push   0xc0021e78
c001109d:	e8 73 e1 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c00110a2:	58                   	pop    eax
c00110a3:	5a                   	pop    edx
c00110a4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00110a7:	68 83 1e 02 c0       	push   0xc0021e83
c00110ac:	e8 64 e1 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c00110b1:	59                   	pop    ecx
c00110b2:	58                   	pop    eax
c00110b3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00110b6:	68 8e 1e 02 c0       	push   0xc0021e8e
c00110bb:	e8 55 e1 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c00110c0:	58                   	pop    eax
c00110c1:	5a                   	pop    edx
c00110c2:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00110c5:	68 99 1e 02 c0       	push   0xc0021e99
c00110ca:	e8 46 e1 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c00110cf:	59                   	pop    ecx
c00110d0:	58                   	pop    eax
c00110d1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00110d4:	68 a4 1e 02 c0       	push   0xc0021ea4
c00110d9:	e8 37 e1 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c00110de:	58                   	pop    eax
c00110df:	5a                   	pop    edx
c00110e0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00110e3:	68 af 1e 02 c0       	push   0xc0021eaf
c00110e8:	e8 28 e1 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c00110ed:	59                   	pop    ecx
c00110ee:	58                   	pop    eax
c00110ef:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00110f2:	68 ba 1e 02 c0       	push   0xc0021eba
c00110f7:	e8 19 e1 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c00110fc:	58                   	pop    eax
c00110fd:	5a                   	pop    edx
c00110fe:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0011101:	68 c9 1e 02 c0       	push   0xc0021ec9
c0011106:	e8 0a e1 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001110b:	59                   	pop    ecx
c001110c:	58                   	pop    eax
c001110d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011110:	68 d4 1e 02 c0       	push   0xc0021ed4
c0011115:	e8 fb e0 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001111a:	58                   	pop    eax
c001111b:	5a                   	pop    edx
c001111c:	57                   	push   edi
c001111d:	68 df 1e 02 c0       	push   0xc0021edf
c0011122:	e8 ee e0 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0011127:	59                   	pop    ecx
c0011128:	58                   	pop    eax
c0011129:	56                   	push   esi
c001112a:	68 ea 1e 02 c0       	push   0xc0021eea
c001112f:	e8 e1 e0 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0011134:	58                   	pop    eax
c0011135:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001113a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011140:	e8 00 c2 ff ff       	call   c000d345 <setActiveTerminal(VgaText*)>
c0011145:	58                   	pop    eax
c0011146:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0011149:	5a                   	pop    edx
c001114a:	c1 e0 05             	shl    eax,0x5
c001114d:	05 60 3c 02 c0       	add    eax,0xc0023c60
c0011152:	50                   	push   eax
c0011153:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011158:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001115e:	e8 03 c6 ff ff       	call   c000d766 <VgaText::puts(char const*)>
c0011163:	59                   	pop    ecx
c0011164:	58                   	pop    eax
c0011165:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001116a:	68 f5 1e 02 c0       	push   0xc0021ef5
c001116f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011175:	e8 ec c5 ff ff       	call   c000d766 <VgaText::puts(char const*)>
c001117a:	58                   	pop    eax
c001117b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011180:	5a                   	pop    edx
c0011181:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011184:	83 c0 0c             	add    eax,0xc
c0011187:	50                   	push   eax
c0011188:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001118d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011193:	e8 ce c5 ff ff       	call   c000d766 <VgaText::puts(char const*)>
c0011198:	59                   	pop    ecx
c0011199:	58                   	pop    eax
c001119a:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001119f:	68 fe 1e 02 c0       	push   0xc0021efe
c00111a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111aa:	e8 b7 c5 ff ff       	call   c000d766 <VgaText::puts(char const*)>
c00111af:	58                   	pop    eax
c00111b0:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00111b5:	5a                   	pop    edx
c00111b6:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00111b9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111bf:	e8 c8 c5 ff ff       	call   c000d78c <VgaText::putx(unsigned int)>
c00111c4:	59                   	pop    ecx
c00111c5:	58                   	pop    eax
c00111c6:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00111cb:	68 06 1f 02 c0       	push   0xc0021f06
c00111d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111d6:	e8 8b c5 ff ff       	call   c000d766 <VgaText::puts(char const*)>
c00111db:	58                   	pop    eax
c00111dc:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00111e1:	5a                   	pop    edx
c00111e2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00111e5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111eb:	e8 9c c5 ff ff       	call   c000d78c <VgaText::putx(unsigned int)>
c00111f0:	59                   	pop    ecx
c00111f1:	58                   	pop    eax
c00111f2:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00111f7:	68 0e 1f 02 c0       	push   0xc0021f0e
c00111fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011202:	e8 5f c5 ff ff       	call   c000d766 <VgaText::puts(char const*)>
c0011207:	58                   	pop    eax
c0011208:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001120d:	5a                   	pop    edx
c001120e:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0011211:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011217:	e8 70 c5 ff ff       	call   c000d78c <VgaText::putx(unsigned int)>
c001121c:	59                   	pop    ecx
c001121d:	58                   	pop    eax
c001121e:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011223:	68 16 1f 02 c0       	push   0xc0021f16
c0011228:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001122e:	e8 33 c5 ff ff       	call   c000d766 <VgaText::puts(char const*)>
c0011233:	58                   	pop    eax
c0011234:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011239:	5a                   	pop    edx
c001123a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001123d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011243:	e8 44 c5 ff ff       	call   c000d78c <VgaText::putx(unsigned int)>
c0011248:	59                   	pop    ecx
c0011249:	58                   	pop    eax
c001124a:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001124f:	68 1e 1f 02 c0       	push   0xc0021f1e
c0011254:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001125a:	e8 07 c5 ff ff       	call   c000d766 <VgaText::puts(char const*)>
c001125f:	58                   	pop    eax
c0011260:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011265:	5a                   	pop    edx
c0011266:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011269:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001126f:	e8 18 c5 ff ff       	call   c000d78c <VgaText::putx(unsigned int)>
c0011274:	59                   	pop    ecx
c0011275:	58                   	pop    eax
c0011276:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001127b:	68 26 1f 02 c0       	push   0xc0021f26
c0011280:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011286:	e8 db c4 ff ff       	call   c000d766 <VgaText::puts(char const*)>
c001128b:	58                   	pop    eax
c001128c:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011291:	5a                   	pop    edx
c0011292:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0011295:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001129b:	e8 ec c4 ff ff       	call   c000d78c <VgaText::putx(unsigned int)>
c00112a0:	59                   	pop    ecx
c00112a1:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00112a6:	5b                   	pop    ebx
c00112a7:	68 2e 1f 02 c0       	push   0xc0021f2e
c00112ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112b2:	e8 af c4 ff ff       	call   c000d766 <VgaText::puts(char const*)>
c00112b7:	58                   	pop    eax
c00112b8:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00112bd:	5a                   	pop    edx
c00112be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00112c2:	52                   	push   edx
c00112c3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112c9:	e8 be c4 ff ff       	call   c000d78c <VgaText::putx(unsigned int)>
c00112ce:	59                   	pop    ecx
c00112cf:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00112d4:	5b                   	pop    ebx
c00112d5:	68 37 1f 02 c0       	push   0xc0021f37
c00112da:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112e0:	e8 81 c4 ff ff       	call   c000d766 <VgaText::puts(char const*)>
c00112e5:	58                   	pop    eax
c00112e6:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00112eb:	5a                   	pop    edx
c00112ec:	57                   	push   edi
c00112ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112f3:	e8 94 c4 ff ff       	call   c000d78c <VgaText::putx(unsigned int)>
c00112f8:	59                   	pop    ecx
c00112f9:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00112fe:	5b                   	pop    ebx
c00112ff:	68 3f 1f 02 c0       	push   0xc0021f3f
c0011304:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001130a:	e8 57 c4 ff ff       	call   c000d766 <VgaText::puts(char const*)>
c001130f:	5f                   	pop    edi
c0011310:	58                   	pop    eax
c0011311:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011316:	56                   	push   esi
c0011317:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001131d:	e8 6a c4 ff ff       	call   c000d78c <VgaText::putx(unsigned int)>
c0011322:	58                   	pop    eax
c0011323:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011328:	5a                   	pop    edx
c0011329:	68 47 1f 02 c0       	push   0xc0021f47
c001132e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011334:	e8 2d c4 ff ff       	call   c000d766 <VgaText::puts(char const*)>
c0011339:	59                   	pop    ecx
c001133a:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001133f:	5b                   	pop    ebx
c0011340:	55                   	push   ebp
c0011341:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011347:	e8 40 c4 ff ff       	call   c000d78c <VgaText::putx(unsigned int)>
c001134c:	5e                   	pop    esi
c001134d:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011352:	5f                   	pop    edi
c0011353:	68 4f 1f 02 c0       	push   0xc0021f4f
c0011358:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001135e:	e8 03 c4 ff ff       	call   c000d766 <VgaText::puts(char const*)>
c0011363:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011368:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001136e:	e8 00 e8 00 00       	call   c001fb73 <CPU::readDR0()>
c0011373:	5d                   	pop    ebp
c0011374:	5a                   	pop    edx
c0011375:	50                   	push   eax
c0011376:	53                   	push   ebx
c0011377:	e8 10 c4 ff ff       	call   c000d78c <VgaText::putx(unsigned int)>
c001137c:	59                   	pop    ecx
c001137d:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011382:	5b                   	pop    ebx
c0011383:	68 58 1f 02 c0       	push   0xc0021f58
c0011388:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001138e:	e8 d3 c3 ff ff       	call   c000d766 <VgaText::puts(char const*)>
c0011393:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011398:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001139e:	e8 e2 e7 00 00       	call   c001fb85 <CPU::readDR1()>
c00113a3:	5e                   	pop    esi
c00113a4:	5f                   	pop    edi
c00113a5:	50                   	push   eax
c00113a6:	53                   	push   ebx
c00113a7:	e8 e0 c3 ff ff       	call   c000d78c <VgaText::putx(unsigned int)>
c00113ac:	5d                   	pop    ebp
c00113ad:	58                   	pop    eax
c00113ae:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00113b3:	68 60 1f 02 c0       	push   0xc0021f60
c00113b8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00113be:	e8 a3 c3 ff ff       	call   c000d766 <VgaText::puts(char const*)>
c00113c3:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00113c8:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00113ce:	e8 c4 e7 00 00       	call   c001fb97 <CPU::readDR2()>
c00113d3:	5a                   	pop    edx
c00113d4:	59                   	pop    ecx
c00113d5:	50                   	push   eax
c00113d6:	53                   	push   ebx
c00113d7:	e8 b0 c3 ff ff       	call   c000d78c <VgaText::putx(unsigned int)>
c00113dc:	5b                   	pop    ebx
c00113dd:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00113e2:	5e                   	pop    esi
c00113e3:	68 68 1f 02 c0       	push   0xc0021f68
c00113e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00113ee:	e8 73 c3 ff ff       	call   c000d766 <VgaText::puts(char const*)>
c00113f3:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00113f8:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00113fe:	e8 a6 e7 00 00       	call   c001fba9 <CPU::readDR3()>
c0011403:	5f                   	pop    edi
c0011404:	5d                   	pop    ebp
c0011405:	50                   	push   eax
c0011406:	53                   	push   ebx
c0011407:	e8 80 c3 ff ff       	call   c000d78c <VgaText::putx(unsigned int)>
c001140c:	58                   	pop    eax
c001140d:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011412:	5a                   	pop    edx
c0011413:	68 70 1f 02 c0       	push   0xc0021f70
c0011418:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001141e:	e8 43 c3 ff ff       	call   c000d766 <VgaText::puts(char const*)>
c0011423:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011428:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001142e:	e8 88 e7 00 00       	call   c001fbbb <CPU::readDR6()>
c0011433:	59                   	pop    ecx
c0011434:	5e                   	pop    esi
c0011435:	50                   	push   eax
c0011436:	53                   	push   ebx
c0011437:	e8 50 c3 ff ff       	call   c000d78c <VgaText::putx(unsigned int)>
c001143c:	5f                   	pop    edi
c001143d:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011442:	5d                   	pop    ebp
c0011443:	68 78 1f 02 c0       	push   0xc0021f78
c0011448:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001144e:	e8 13 c3 ff ff       	call   c000d766 <VgaText::puts(char const*)>
c0011453:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011458:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001145e:	e8 6a e7 00 00       	call   c001fbcd <CPU::readDR7()>
c0011463:	5a                   	pop    edx
c0011464:	59                   	pop    ecx
c0011465:	50                   	push   eax
c0011466:	53                   	push   ebx
c0011467:	e8 20 c3 ff ff       	call   c000d78c <VgaText::putx(unsigned int)>
c001146c:	fa                   	cli    
c001146d:	f4                   	hlt    
c001146e:	83 c4 10             	add    esp,0x10
c0011471:	eb fe                	jmp    c0011471 <displayDebugInfo(regs*)+0x415>

c0011473 <x87EmulHandler(regs*, void*)>:
c0011473:	53                   	push   ebx
c0011474:	83 ec 08             	sub    esp,0x8
c0011477:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c001147c:	85 c0                	test   eax,eax
c001147e:	74 15                	je     c0011495 <x87EmulHandler(regs*, void*)+0x22>
c0011480:	83 ec 0c             	sub    esp,0xc
c0011483:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011487:	ff d0                	call   eax
c0011489:	83 c4 10             	add    esp,0x10
c001148c:	84 c0                	test   al,al
c001148e:	74 2f                	je     c00114bf <x87EmulHandler(regs*, void*)+0x4c>
c0011490:	83 c4 08             	add    esp,0x8
c0011493:	5b                   	pop    ebx
c0011494:	c3                   	ret    
c0011495:	83 ec 08             	sub    esp,0x8
c0011498:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c001149e:	6a 01                	push   0x1
c00114a0:	68 80 1f 02 c0       	push   0xc0021f80
c00114a5:	e8 bd 6f 00 00       	call   c0018467 <Thr::loadDLL(char const*, bool)>
c00114aa:	5a                   	pop    edx
c00114ab:	59                   	pop    ecx
c00114ac:	53                   	push   ebx
c00114ad:	50                   	push   eax
c00114ae:	e8 7a 71 00 00       	call   c001862d <Thr::executeDLL(unsigned long, void*)>
c00114b3:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c00114b8:	83 c4 10             	add    esp,0x10
c00114bb:	85 c0                	test   eax,eax
c00114bd:	75 c1                	jne    c0011480 <x87EmulHandler(regs*, void*)+0xd>
c00114bf:	83 ec 0c             	sub    esp,0xc
c00114c2:	68 9d 1f 02 c0       	push   0xc0021f9d
c00114c7:	e8 49 dd ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c00114cc:	58                   	pop    eax
c00114cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114d1:	e8 86 fb ff ff       	call   c001105c <displayDebugInfo(regs*)>

c00114d6 <gpFault(regs*, void*)>:
c00114d6:	53                   	push   ebx
c00114d7:	83 ec 14             	sub    esp,0x14
c00114da:	c7 05 30 49 02 c0 df 98 01 c0 	mov    DWORD PTR ds:0xc0024930,0xc00198df
c00114e4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00114e8:	53                   	push   ebx
c00114e9:	e8 f1 83 00 00       	call   c00198df <Vm::faultHandler(regs*)>
c00114ee:	83 c4 10             	add    esp,0x10
c00114f1:	84 c0                	test   al,al
c00114f3:	74 05                	je     c00114fa <gpFault(regs*, void*)+0x24>
c00114f5:	83 c4 08             	add    esp,0x8
c00114f8:	5b                   	pop    ebx
c00114f9:	c3                   	ret    
c00114fa:	83 ec 0c             	sub    esp,0xc
c00114fd:	68 9d 1f 02 c0       	push   0xc0021f9d
c0011502:	e8 0e dd ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0011507:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001150a:	e8 4d fb ff ff       	call   c001105c <displayDebugInfo(regs*)>

c001150f <pgFault(regs*, void*)>:
c001150f:	83 ec 18             	sub    esp,0x18
c0011512:	68 b8 1f 02 c0       	push   0xc0021fb8
c0011517:	e8 f9 dc ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001151c:	58                   	pop    eax
c001151d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011521:	e8 36 fb ff ff       	call   c001105c <displayDebugInfo(regs*)>

c0011526 <otherISRHandler(regs*, void*)>:
c0011526:	53                   	push   ebx
c0011527:	83 ec 0c             	sub    esp,0xc
c001152a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001152e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0011531:	50                   	push   eax
c0011532:	50                   	push   eax
c0011533:	68 c5 1f 02 c0       	push   0xc0021fc5
c0011538:	e8 d8 dc ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001153d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011540:	e8 17 fb ff ff       	call   c001105c <displayDebugInfo(regs*)>

c0011545 <opcodeFault(regs*, void*)>:
c0011545:	55                   	push   ebp
c0011546:	89 e5                	mov    ebp,esp
c0011548:	56                   	push   esi
c0011549:	53                   	push   ebx
c001154a:	83 ec 40             	sub    esp,0x40
c001154d:	e8 86 33 00 00       	call   c00148d8 <thisCPU()>
c0011552:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0011558:	84 c0                	test   al,al
c001155a:	74 24                	je     c0011580 <opcodeFault(regs*, void*)+0x3b>
c001155c:	83 ec 0c             	sub    esp,0xc
c001155f:	68 e4 1f 02 c0       	push   0xc0021fe4
c0011564:	e8 ac dc ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0011569:	83 c4 10             	add    esp,0x10
c001156c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011572:	8d 50 19             	lea    edx,[eax+0x19]
c0011575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011578:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001157b:	e9 77 05 00 00       	jmp    c0011af7 <opcodeFault(regs*, void*)+0x5b2>
c0011580:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011583:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011586:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011589:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c001158d:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0011591:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011594:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011597:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001159a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001159d:	8a 00                	mov    al,BYTE PTR [eax]
c001159f:	3c f0                	cmp    al,0xf0
c00115a1:	75 17                	jne    c00115ba <opcodeFault(regs*, void*)+0x75>
c00115a3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115ac:	8d 50 01             	lea    edx,[eax+0x1]
c00115af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115b5:	e9 da 00 00 00       	jmp    c0011694 <opcodeFault(regs*, void*)+0x14f>
c00115ba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115bd:	8a 00                	mov    al,BYTE PTR [eax]
c00115bf:	3c f2                	cmp    al,0xf2
c00115c1:	74 09                	je     c00115cc <opcodeFault(regs*, void*)+0x87>
c00115c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115c6:	8a 00                	mov    al,BYTE PTR [eax]
c00115c8:	3c f3                	cmp    al,0xf3
c00115ca:	75 1b                	jne    c00115e7 <opcodeFault(regs*, void*)+0xa2>
c00115cc:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00115d0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115d6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115d9:	8d 50 01             	lea    edx,[eax+0x1]
c00115dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115df:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115e2:	e9 ad 00 00 00       	jmp    c0011694 <opcodeFault(regs*, void*)+0x14f>
c00115e7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115ea:	8a 00                	mov    al,BYTE PTR [eax]
c00115ec:	3c 66                	cmp    al,0x66
c00115ee:	75 1f                	jne    c001160f <opcodeFault(regs*, void*)+0xca>
c00115f0:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00115f4:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00115f8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115fe:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011601:	8d 50 01             	lea    edx,[eax+0x1]
c0011604:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011607:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001160a:	e9 85 00 00 00       	jmp    c0011694 <opcodeFault(regs*, void*)+0x14f>
c001160f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011612:	8a 00                	mov    al,BYTE PTR [eax]
c0011614:	3c 67                	cmp    al,0x67
c0011616:	75 18                	jne    c0011630 <opcodeFault(regs*, void*)+0xeb>
c0011618:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001161c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001161f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011622:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011625:	8d 50 01             	lea    edx,[eax+0x1]
c0011628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001162b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001162e:	eb 64                	jmp    c0011694 <opcodeFault(regs*, void*)+0x14f>
c0011630:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011633:	8a 00                	mov    al,BYTE PTR [eax]
c0011635:	3c 2e                	cmp    al,0x2e
c0011637:	74 09                	je     c0011642 <opcodeFault(regs*, void*)+0xfd>
c0011639:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001163c:	8a 00                	mov    al,BYTE PTR [eax]
c001163e:	3c 3e                	cmp    al,0x3e
c0011640:	75 18                	jne    c001165a <opcodeFault(regs*, void*)+0x115>
c0011642:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011646:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011649:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001164c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001164f:	8d 50 01             	lea    edx,[eax+0x1]
c0011652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011655:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011658:	eb 3a                	jmp    c0011694 <opcodeFault(regs*, void*)+0x14f>
c001165a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001165d:	8a 00                	mov    al,BYTE PTR [eax]
c001165f:	3c 36                	cmp    al,0x36
c0011661:	74 1b                	je     c001167e <opcodeFault(regs*, void*)+0x139>
c0011663:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011666:	8a 00                	mov    al,BYTE PTR [eax]
c0011668:	3c 26                	cmp    al,0x26
c001166a:	74 12                	je     c001167e <opcodeFault(regs*, void*)+0x139>
c001166c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001166f:	8a 00                	mov    al,BYTE PTR [eax]
c0011671:	3c 64                	cmp    al,0x64
c0011673:	74 09                	je     c001167e <opcodeFault(regs*, void*)+0x139>
c0011675:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011678:	8a 00                	mov    al,BYTE PTR [eax]
c001167a:	3c 65                	cmp    al,0x65
c001167c:	75 16                	jne    c0011694 <opcodeFault(regs*, void*)+0x14f>
c001167e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011682:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011685:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011688:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001168b:	8d 50 01             	lea    edx,[eax+0x1]
c001168e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011691:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011694:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011697:	8a 00                	mov    al,BYTE PTR [eax]
c0011699:	3c 0f                	cmp    al,0xf
c001169b:	0f 85 ad 00 00 00    	jne    c001174e <opcodeFault(regs*, void*)+0x209>
c00116a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116a4:	40                   	inc    eax
c00116a5:	8a 00                	mov    al,BYTE PTR [eax]
c00116a7:	3c c2                	cmp    al,0xc2
c00116a9:	74 0e                	je     c00116b9 <opcodeFault(regs*, void*)+0x174>
c00116ab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116ae:	40                   	inc    eax
c00116af:	8a 00                	mov    al,BYTE PTR [eax]
c00116b1:	3c c3                	cmp    al,0xc3
c00116b3:	0f 85 95 00 00 00    	jne    c001174e <opcodeFault(regs*, void*)+0x209>
c00116b9:	83 ec 0c             	sub    esp,0xc
c00116bc:	68 07 20 02 c0       	push   0xc0022007
c00116c1:	e8 4f db ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c00116c6:	83 c4 10             	add    esp,0x10
c00116c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116cc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00116cf:	8d 50 01             	lea    edx,[eax+0x1]
c00116d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116d5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00116d8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00116db:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116de:	8a 00                	mov    al,BYTE PTR [eax]
c00116e0:	8d 50 fe             	lea    edx,[eax-0x2]
c00116e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116e6:	88 10                	mov    BYTE PTR [eax],dl
c00116e8:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00116eb:	50                   	push   eax
c00116ec:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00116ef:	50                   	push   eax
c00116f0:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00116f3:	50                   	push   eax
c00116f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00116f7:	e8 48 41 00 00       	call   c0015844 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00116fc:	83 c4 10             	add    esp,0x10
c00116ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011702:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011705:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0011708:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c001170b:	01 d0                	add    eax,edx
c001170d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0011710:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011713:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011716:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0011719:	48                   	dec    eax
c001171a:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001171d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011720:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0011723:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011726:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011729:	83 ec 04             	sub    esp,0x4
c001172c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001172f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0011732:	50                   	push   eax
c0011733:	e8 18 ea fe ff       	call   c0000150 <voodooXADD>
c0011738:	83 c4 10             	add    esp,0x10
c001173b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001173e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0011741:	01 c2                	add    edx,eax
c0011743:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011746:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011749:	e9 a9 03 00 00       	jmp    c0011af7 <opcodeFault(regs*, void*)+0x5b2>
c001174e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011751:	8a 00                	mov    al,BYTE PTR [eax]
c0011753:	3c 0f                	cmp    al,0xf
c0011755:	0f 85 8b 01 00 00    	jne    c00118e6 <opcodeFault(regs*, void*)+0x3a1>
c001175b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001175e:	40                   	inc    eax
c001175f:	8a 00                	mov    al,BYTE PTR [eax]
c0011761:	3c c7                	cmp    al,0xc7
c0011763:	0f 86 7d 01 00 00    	jbe    c00118e6 <opcodeFault(regs*, void*)+0x3a1>
c0011769:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001176c:	40                   	inc    eax
c001176d:	8a 00                	mov    al,BYTE PTR [eax]
c001176f:	3c cf                	cmp    al,0xcf
c0011771:	0f 87 6f 01 00 00    	ja     c00118e6 <opcodeFault(regs*, void*)+0x3a1>
c0011777:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001177a:	40                   	inc    eax
c001177b:	8a 00                	mov    al,BYTE PTR [eax]
c001177d:	83 c0 38             	add    eax,0x38
c0011780:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0011783:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0011787:	75 0b                	jne    c0011794 <opcodeFault(regs*, void*)+0x24f>
c0011789:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001178c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001178f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011792:	eb 75                	jmp    c0011809 <opcodeFault(regs*, void*)+0x2c4>
c0011794:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0011798:	75 0b                	jne    c00117a5 <opcodeFault(regs*, void*)+0x260>
c001179a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001179d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00117a0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117a3:	eb 64                	jmp    c0011809 <opcodeFault(regs*, void*)+0x2c4>
c00117a5:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00117a9:	75 0b                	jne    c00117b6 <opcodeFault(regs*, void*)+0x271>
c00117ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117ae:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00117b1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117b4:	eb 53                	jmp    c0011809 <opcodeFault(regs*, void*)+0x2c4>
c00117b6:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00117ba:	75 0b                	jne    c00117c7 <opcodeFault(regs*, void*)+0x282>
c00117bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117bf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00117c2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117c5:	eb 42                	jmp    c0011809 <opcodeFault(regs*, void*)+0x2c4>
c00117c7:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00117cb:	75 0b                	jne    c00117d8 <opcodeFault(regs*, void*)+0x293>
c00117cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117d0:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00117d3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117d6:	eb 31                	jmp    c0011809 <opcodeFault(regs*, void*)+0x2c4>
c00117d8:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00117dc:	75 0b                	jne    c00117e9 <opcodeFault(regs*, void*)+0x2a4>
c00117de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117e1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00117e4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117e7:	eb 20                	jmp    c0011809 <opcodeFault(regs*, void*)+0x2c4>
c00117e9:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00117ed:	75 0b                	jne    c00117fa <opcodeFault(regs*, void*)+0x2b5>
c00117ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117f2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00117f5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117f8:	eb 0f                	jmp    c0011809 <opcodeFault(regs*, void*)+0x2c4>
c00117fa:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00117fe:	75 09                	jne    c0011809 <opcodeFault(regs*, void*)+0x2c4>
c0011800:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011803:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011806:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011809:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001180d:	74 10                	je     c001181f <opcodeFault(regs*, void*)+0x2da>
c001180f:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0011816:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001181d:	eb 2d                	jmp    c001184c <opcodeFault(regs*, void*)+0x307>
c001181f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011822:	c1 e0 18             	shl    eax,0x18
c0011825:	89 c2                	mov    edx,eax
c0011827:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001182a:	c1 e0 08             	shl    eax,0x8
c001182d:	25 00 00 ff 00       	and    eax,0xff0000
c0011832:	09 c2                	or     edx,eax
c0011834:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011837:	c1 e8 08             	shr    eax,0x8
c001183a:	25 00 ff 00 00       	and    eax,0xff00
c001183f:	09 c2                	or     edx,eax
c0011841:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011844:	c1 e8 18             	shr    eax,0x18
c0011847:	09 d0                	or     eax,edx
c0011849:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001184c:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0011850:	75 0b                	jne    c001185d <opcodeFault(regs*, void*)+0x318>
c0011852:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011855:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011858:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001185b:	eb 75                	jmp    c00118d2 <opcodeFault(regs*, void*)+0x38d>
c001185d:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0011861:	75 0b                	jne    c001186e <opcodeFault(regs*, void*)+0x329>
c0011863:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011866:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011869:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001186c:	eb 64                	jmp    c00118d2 <opcodeFault(regs*, void*)+0x38d>
c001186e:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0011872:	75 0b                	jne    c001187f <opcodeFault(regs*, void*)+0x33a>
c0011874:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011877:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001187a:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001187d:	eb 53                	jmp    c00118d2 <opcodeFault(regs*, void*)+0x38d>
c001187f:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0011883:	75 0b                	jne    c0011890 <opcodeFault(regs*, void*)+0x34b>
c0011885:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011888:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001188b:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001188e:	eb 42                	jmp    c00118d2 <opcodeFault(regs*, void*)+0x38d>
c0011890:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0011894:	75 0b                	jne    c00118a1 <opcodeFault(regs*, void*)+0x35c>
c0011896:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011899:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001189c:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001189f:	eb 31                	jmp    c00118d2 <opcodeFault(regs*, void*)+0x38d>
c00118a1:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00118a5:	75 0b                	jne    c00118b2 <opcodeFault(regs*, void*)+0x36d>
c00118a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118aa:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00118ad:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00118b0:	eb 20                	jmp    c00118d2 <opcodeFault(regs*, void*)+0x38d>
c00118b2:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00118b6:	75 0b                	jne    c00118c3 <opcodeFault(regs*, void*)+0x37e>
c00118b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118bb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00118be:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00118c1:	eb 0f                	jmp    c00118d2 <opcodeFault(regs*, void*)+0x38d>
c00118c3:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00118c7:	75 09                	jne    c00118d2 <opcodeFault(regs*, void*)+0x38d>
c00118c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118cc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00118cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00118d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118d5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00118d8:	8d 50 02             	lea    edx,[eax+0x2]
c00118db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118de:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00118e1:	e9 11 02 00 00       	jmp    c0011af7 <opcodeFault(regs*, void*)+0x5b2>
c00118e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00118e9:	8a 00                	mov    al,BYTE PTR [eax]
c00118eb:	3c 0f                	cmp    al,0xf
c00118ed:	0f 85 76 01 00 00    	jne    c0011a69 <opcodeFault(regs*, void*)+0x524>
c00118f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00118f6:	40                   	inc    eax
c00118f7:	8a 00                	mov    al,BYTE PTR [eax]
c00118f9:	3c c7                	cmp    al,0xc7
c00118fb:	0f 85 68 01 00 00    	jne    c0011a69 <opcodeFault(regs*, void*)+0x524>
c0011901:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011904:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011907:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001190a:	8d 50 01             	lea    edx,[eax+0x1]
c001190d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011910:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011913:	8d 45 ba             	lea    eax,[ebp-0x46]
c0011916:	50                   	push   eax
c0011917:	8d 45 bb             	lea    eax,[ebp-0x45]
c001191a:	50                   	push   eax
c001191b:	8d 45 bc             	lea    eax,[ebp-0x44]
c001191e:	50                   	push   eax
c001191f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011922:	e8 1d 3f 00 00       	call   c0015844 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0011927:	83 c4 10             	add    esp,0x10
c001192a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001192d:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0011930:	83 f0 01             	xor    eax,0x1
c0011933:	84 c0                	test   al,al
c0011935:	0f 84 2e 01 00 00    	je     c0011a69 <opcodeFault(regs*, void*)+0x524>
c001193b:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001193e:	3c 01                	cmp    al,0x1
c0011940:	0f 85 23 01 00 00    	jne    c0011a69 <opcodeFault(regs*, void*)+0x524>
c0011946:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0011949:	83 f0 01             	xor    eax,0x1
c001194c:	84 c0                	test   al,al
c001194e:	0f 84 15 01 00 00    	je     c0011a69 <opcodeFault(regs*, void*)+0x524>
c0011954:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011957:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001195a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001195d:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0011964:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0011967:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001196a:	89 c2                	mov    edx,eax
c001196c:	b8 00 00 00 00       	mov    eax,0x0
c0011971:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0011974:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0011977:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001197a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001197d:	ba 00 00 00 00       	mov    edx,0x0
c0011982:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0011985:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0011988:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001198b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001198e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0011991:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0011998:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001199b:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001199e:	89 c2                	mov    edx,eax
c00119a0:	b8 00 00 00 00       	mov    eax,0x0
c00119a5:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00119a8:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00119ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119ae:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00119b1:	ba 00 00 00 00       	mov    edx,0x0
c00119b6:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00119b9:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00119bc:	e8 8c 70 00 00       	call   c0018a4d <lockScheduler()>
c00119c1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00119c4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00119c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00119c9:	89 c1                	mov    ecx,eax
c00119cb:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00119ce:	89 cb                	mov    ebx,ecx
c00119d0:	89 d0                	mov    eax,edx
c00119d2:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00119d5:	89 c6                	mov    esi,eax
c00119d7:	89 f0                	mov    eax,esi
c00119d9:	09 d8                	or     eax,ebx
c00119db:	85 c0                	test   eax,eax
c00119dd:	75 21                	jne    c0011a00 <opcodeFault(regs*, void*)+0x4bb>
c00119df:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00119e2:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00119e5:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00119e8:	89 01                	mov    DWORD PTR [ecx],eax
c00119ea:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00119ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119f0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119f3:	83 c8 40             	or     eax,0x40
c00119f6:	89 c2                	mov    edx,eax
c00119f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119fb:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00119fe:	eb 3e                	jmp    c0011a3e <opcodeFault(regs*, void*)+0x4f9>
c0011a00:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0011a03:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011a06:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a08:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0011a0b:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0011a0e:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0011a11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a14:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011a17:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0011a1a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0011a1d:	89 d0                	mov    eax,edx
c0011a1f:	31 d2                	xor    edx,edx
c0011a21:	89 c3                	mov    ebx,eax
c0011a23:	89 d6                	mov    esi,edx
c0011a25:	89 da                	mov    edx,ebx
c0011a27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a2a:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0011a2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a30:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a33:	83 e0 bf             	and    eax,0xffffffbf
c0011a36:	89 c2                	mov    edx,eax
c0011a38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a3b:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0011a3e:	e8 0c 70 00 00       	call   c0018a4f <unlockScheduler()>
c0011a43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a46:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011a49:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0011a4c:	01 c2                	add    edx,eax
c0011a4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a51:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011a54:	83 ec 0c             	sub    esp,0xc
c0011a57:	68 16 20 02 c0       	push   0xc0022016
c0011a5c:	e8 b4 d7 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0011a61:	83 c4 10             	add    esp,0x10
c0011a64:	e9 8e 00 00 00       	jmp    c0011af7 <opcodeFault(regs*, void*)+0x5b2>
c0011a69:	83 ec 0c             	sub    esp,0xc
c0011a6c:	68 29 20 02 c0       	push   0xc0022029
c0011a71:	e8 9f d7 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0011a76:	83 c4 10             	add    esp,0x10
c0011a79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a7c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011a7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a82:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a85:	c1 e0 04             	shl    eax,0x4
c0011a88:	01 d0                	add    eax,edx
c0011a8a:	83 c0 03             	add    eax,0x3
c0011a8d:	8a 00                	mov    al,BYTE PTR [eax]
c0011a8f:	0f b6 d8             	movzx  ebx,al
c0011a92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a95:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011a98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a9b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a9e:	c1 e0 04             	shl    eax,0x4
c0011aa1:	01 d0                	add    eax,edx
c0011aa3:	83 c0 02             	add    eax,0x2
c0011aa6:	8a 00                	mov    al,BYTE PTR [eax]
c0011aa8:	0f b6 c8             	movzx  ecx,al
c0011aab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aae:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011ab1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ab4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ab7:	c1 e0 04             	shl    eax,0x4
c0011aba:	01 d0                	add    eax,edx
c0011abc:	40                   	inc    eax
c0011abd:	8a 00                	mov    al,BYTE PTR [eax]
c0011abf:	0f b6 d0             	movzx  edx,al
c0011ac2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ac5:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0011ac8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011acb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ace:	c1 e0 04             	shl    eax,0x4
c0011ad1:	01 f0                	add    eax,esi
c0011ad3:	8a 00                	mov    al,BYTE PTR [eax]
c0011ad5:	0f b6 c0             	movzx  eax,al
c0011ad8:	83 ec 0c             	sub    esp,0xc
c0011adb:	53                   	push   ebx
c0011adc:	51                   	push   ecx
c0011add:	52                   	push   edx
c0011ade:	50                   	push   eax
c0011adf:	68 3c 20 02 c0       	push   0xc002203c
c0011ae4:	e8 2c d7 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0011ae9:	83 c4 20             	add    esp,0x20
c0011aec:	83 ec 0c             	sub    esp,0xc
c0011aef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011af2:	e8 65 f5 ff ff       	call   c001105c <displayDebugInfo(regs*)>
c0011af7:	8d 65 f8             	lea    esp,[ebp-0x8]
c0011afa:	5b                   	pop    ebx
c0011afb:	5e                   	pop    esi
c0011afc:	5d                   	pop    ebp
c0011afd:	c3                   	ret    

c0011afe <displayProgramFault(char const*)>:
c0011afe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b03:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011b06:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011b0c:	85 c0                	test   eax,eax
c0011b0e:	74 15                	je     c0011b25 <displayProgramFault(char const*)+0x27>
c0011b10:	83 ec 0c             	sub    esp,0xc
c0011b13:	6a 04                	push   0x4
c0011b15:	6a 0f                	push   0xf
c0011b17:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011b1b:	50                   	push   eax
c0011b1c:	e8 05 b9 ff ff       	call   c000d426 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0011b21:	83 c4 1c             	add    esp,0x1c
c0011b24:	c3                   	ret    
c0011b25:	c3                   	ret    

c0011b26 <setupInterruptController()>:
c0011b26:	55                   	push   ebp
c0011b27:	89 e5                	mov    ebp,esp
c0011b29:	53                   	push   ebx
c0011b2a:	83 ec 14             	sub    esp,0x14
c0011b2d:	e8 a3 2d 00 00       	call   c00148d5 <getCPUNumber()>
c0011b32:	85 c0                	test   eax,eax
c0011b34:	0f 95 c0             	setne  al
c0011b37:	84 c0                	test   al,al
c0011b39:	74 56                	je     c0011b91 <setupInterruptController()+0x6b>
c0011b3b:	83 ec 0c             	sub    esp,0xc
c0011b3e:	68 58 21 00 00       	push   0x2158
c0011b43:	e8 98 d5 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c0011b48:	83 c4 10             	add    esp,0x10
c0011b4b:	89 c3                	mov    ebx,eax
c0011b4d:	83 ec 0c             	sub    esp,0xc
c0011b50:	53                   	push   ebx
c0011b51:	e8 6a c9 00 00       	call   c001e4c0 <APIC::APIC()>
c0011b56:	83 c4 10             	add    esp,0x10
c0011b59:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0011b5c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0011b5f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011b62:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b64:	83 c0 08             	add    eax,0x8
c0011b67:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b69:	6a 00                	push   0x0
c0011b6b:	6a 00                	push   0x0
c0011b6d:	6a 00                	push   0x0
c0011b6f:	52                   	push   edx
c0011b70:	ff d0                	call   eax
c0011b72:	83 c4 10             	add    esp,0x10
c0011b75:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0011b7a:	83 ec 08             	sub    esp,0x8
c0011b7d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011b80:	50                   	push   eax
c0011b81:	e8 a4 ea ff ff       	call   c001062a <Device::addChild(Device*)>
c0011b86:	83 c4 10             	add    esp,0x10
c0011b89:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011b8c:	e9 48 03 00 00       	jmp    c0011ed9 <setupInterruptController()+0x3b3>
c0011b91:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0011b96:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011b9c:	83 e0 01             	and    eax,0x1
c0011b9f:	84 c0                	test   al,al
c0011ba1:	0f 95 c0             	setne  al
c0011ba4:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0011ba7:	83 ec 0c             	sub    esp,0xc
c0011baa:	68 58 21 00 00       	push   0x2158
c0011baf:	e8 2c d5 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c0011bb4:	83 c4 10             	add    esp,0x10
c0011bb7:	89 c3                	mov    ebx,eax
c0011bb9:	83 ec 0c             	sub    esp,0xc
c0011bbc:	53                   	push   ebx
c0011bbd:	e8 f8 cd 00 00       	call   c001e9ba <PIC::PIC()>
c0011bc2:	83 c4 10             	add    esp,0x10
c0011bc5:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011bc8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011bcb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bce:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bd0:	83 c0 08             	add    eax,0x8
c0011bd3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bd5:	6a 00                	push   0x0
c0011bd7:	6a 00                	push   0x0
c0011bd9:	6a 00                	push   0x0
c0011bdb:	52                   	push   edx
c0011bdc:	ff d0                	call   eax
c0011bde:	83 c4 10             	add    esp,0x10
c0011be1:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0011be5:	74 6e                	je     c0011c55 <setupInterruptController()+0x12f>
c0011be7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011bea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bed:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bef:	83 c0 0c             	add    eax,0xc
c0011bf2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bf4:	6a 00                	push   0x0
c0011bf6:	6a 00                	push   0x0
c0011bf8:	6a 00                	push   0x0
c0011bfa:	52                   	push   edx
c0011bfb:	ff d0                	call   eax
c0011bfd:	83 c4 10             	add    esp,0x10
c0011c00:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011c04:	74 15                	je     c0011c1b <setupInterruptController()+0xf5>
c0011c06:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c09:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c0b:	83 c0 04             	add    eax,0x4
c0011c0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c10:	83 ec 0c             	sub    esp,0xc
c0011c13:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c16:	ff d0                	call   eax
c0011c18:	83 c4 10             	add    esp,0x10
c0011c1b:	83 ec 0c             	sub    esp,0xc
c0011c1e:	68 58 21 00 00       	push   0x2158
c0011c23:	e8 b8 d4 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c0011c28:	83 c4 10             	add    esp,0x10
c0011c2b:	89 c3                	mov    ebx,eax
c0011c2d:	83 ec 0c             	sub    esp,0xc
c0011c30:	53                   	push   ebx
c0011c31:	e8 8a c8 00 00       	call   c001e4c0 <APIC::APIC()>
c0011c36:	83 c4 10             	add    esp,0x10
c0011c39:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011c3c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011c3f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c42:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c44:	83 c0 08             	add    eax,0x8
c0011c47:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c49:	6a 00                	push   0x0
c0011c4b:	6a 00                	push   0x0
c0011c4d:	6a 00                	push   0x0
c0011c4f:	52                   	push   edx
c0011c50:	ff d0                	call   eax
c0011c52:	83 c4 10             	add    esp,0x10
c0011c55:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0011c5a:	83 ec 08             	sub    esp,0x8
c0011c5d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c60:	50                   	push   eax
c0011c61:	e8 c4 e9 ff ff       	call   c001062a <Device::addChild(Device*)>
c0011c66:	83 c4 10             	add    esp,0x10
c0011c69:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c6e:	83 c0 24             	add    eax,0x24
c0011c71:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c73:	6a 00                	push   0x0
c0011c75:	68 26 15 01 c0       	push   0xc0011526
c0011c7a:	6a 00                	push   0x0
c0011c7c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c7f:	ff d0                	call   eax
c0011c81:	83 c4 10             	add    esp,0x10
c0011c84:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c87:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c89:	83 c0 24             	add    eax,0x24
c0011c8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c8e:	6a 00                	push   0x0
c0011c90:	68 26 15 01 c0       	push   0xc0011526
c0011c95:	6a 01                	push   0x1
c0011c97:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c9a:	ff d0                	call   eax
c0011c9c:	83 c4 10             	add    esp,0x10
c0011c9f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ca2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ca4:	83 c0 24             	add    eax,0x24
c0011ca7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ca9:	6a 00                	push   0x0
c0011cab:	68 bf 0e 01 c0       	push   0xc0010ebf
c0011cb0:	6a 02                	push   0x2
c0011cb2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cb5:	ff d0                	call   eax
c0011cb7:	83 c4 10             	add    esp,0x10
c0011cba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cbf:	83 c0 24             	add    eax,0x24
c0011cc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cc4:	6a 00                	push   0x0
c0011cc6:	68 26 15 01 c0       	push   0xc0011526
c0011ccb:	6a 03                	push   0x3
c0011ccd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cd0:	ff d0                	call   eax
c0011cd2:	83 c4 10             	add    esp,0x10
c0011cd5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cda:	83 c0 24             	add    eax,0x24
c0011cdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cdf:	6a 00                	push   0x0
c0011ce1:	68 26 15 01 c0       	push   0xc0011526
c0011ce6:	6a 04                	push   0x4
c0011ce8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ceb:	ff d0                	call   eax
c0011ced:	83 c4 10             	add    esp,0x10
c0011cf0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cf3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cf5:	83 c0 24             	add    eax,0x24
c0011cf8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cfa:	6a 00                	push   0x0
c0011cfc:	68 26 15 01 c0       	push   0xc0011526
c0011d01:	6a 05                	push   0x5
c0011d03:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d06:	ff d0                	call   eax
c0011d08:	83 c4 10             	add    esp,0x10
c0011d0b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d10:	83 c0 24             	add    eax,0x24
c0011d13:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d15:	6a 00                	push   0x0
c0011d17:	68 45 15 01 c0       	push   0xc0011545
c0011d1c:	6a 06                	push   0x6
c0011d1e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d21:	ff d0                	call   eax
c0011d23:	83 c4 10             	add    esp,0x10
c0011d26:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d29:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d2b:	83 c0 24             	add    eax,0x24
c0011d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d30:	6a 00                	push   0x0
c0011d32:	68 73 14 01 c0       	push   0xc0011473
c0011d37:	6a 07                	push   0x7
c0011d39:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d3c:	ff d0                	call   eax
c0011d3e:	83 c4 10             	add    esp,0x10
c0011d41:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d44:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d46:	83 c0 24             	add    eax,0x24
c0011d49:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d4b:	6a 00                	push   0x0
c0011d4d:	68 da 0c 01 c0       	push   0xc0010cda
c0011d52:	6a 08                	push   0x8
c0011d54:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d57:	ff d0                	call   eax
c0011d59:	83 c4 10             	add    esp,0x10
c0011d5c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d61:	83 c0 24             	add    eax,0x24
c0011d64:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d66:	6a 00                	push   0x0
c0011d68:	68 26 15 01 c0       	push   0xc0011526
c0011d6d:	6a 09                	push   0x9
c0011d6f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d72:	ff d0                	call   eax
c0011d74:	83 c4 10             	add    esp,0x10
c0011d77:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d7c:	83 c0 24             	add    eax,0x24
c0011d7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d81:	6a 00                	push   0x0
c0011d83:	68 26 15 01 c0       	push   0xc0011526
c0011d88:	6a 0a                	push   0xa
c0011d8a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d8d:	ff d0                	call   eax
c0011d8f:	83 c4 10             	add    esp,0x10
c0011d92:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d95:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d97:	83 c0 24             	add    eax,0x24
c0011d9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d9c:	6a 00                	push   0x0
c0011d9e:	68 26 15 01 c0       	push   0xc0011526
c0011da3:	6a 0b                	push   0xb
c0011da5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011da8:	ff d0                	call   eax
c0011daa:	83 c4 10             	add    esp,0x10
c0011dad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011db0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011db2:	83 c0 24             	add    eax,0x24
c0011db5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011db7:	6a 00                	push   0x0
c0011db9:	68 26 15 01 c0       	push   0xc0011526
c0011dbe:	6a 0c                	push   0xc
c0011dc0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011dc3:	ff d0                	call   eax
c0011dc5:	83 c4 10             	add    esp,0x10
c0011dc8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011dcb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dcd:	83 c0 24             	add    eax,0x24
c0011dd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dd2:	6a 00                	push   0x0
c0011dd4:	68 d6 14 01 c0       	push   0xc00114d6
c0011dd9:	6a 0d                	push   0xd
c0011ddb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011dde:	ff d0                	call   eax
c0011de0:	83 c4 10             	add    esp,0x10
c0011de3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011de6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011de8:	83 c0 24             	add    eax,0x24
c0011deb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ded:	6a 00                	push   0x0
c0011def:	68 0f 15 01 c0       	push   0xc001150f
c0011df4:	6a 0e                	push   0xe
c0011df6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011df9:	ff d0                	call   eax
c0011dfb:	83 c4 10             	add    esp,0x10
c0011dfe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e01:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e03:	83 c0 24             	add    eax,0x24
c0011e06:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e08:	6a 00                	push   0x0
c0011e0a:	68 26 15 01 c0       	push   0xc0011526
c0011e0f:	6a 0f                	push   0xf
c0011e11:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e14:	ff d0                	call   eax
c0011e16:	83 c4 10             	add    esp,0x10
c0011e19:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e1e:	83 c0 24             	add    eax,0x24
c0011e21:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e23:	6a 00                	push   0x0
c0011e25:	68 26 15 01 c0       	push   0xc0011526
c0011e2a:	6a 10                	push   0x10
c0011e2c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e2f:	ff d0                	call   eax
c0011e31:	83 c4 10             	add    esp,0x10
c0011e34:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e37:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e39:	83 c0 24             	add    eax,0x24
c0011e3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e3e:	6a 00                	push   0x0
c0011e40:	68 26 15 01 c0       	push   0xc0011526
c0011e45:	6a 11                	push   0x11
c0011e47:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e4a:	ff d0                	call   eax
c0011e4c:	83 c4 10             	add    esp,0x10
c0011e4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e52:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e54:	83 c0 24             	add    eax,0x24
c0011e57:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e59:	6a 00                	push   0x0
c0011e5b:	68 26 15 01 c0       	push   0xc0011526
c0011e60:	6a 12                	push   0x12
c0011e62:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e65:	ff d0                	call   eax
c0011e67:	83 c4 10             	add    esp,0x10
c0011e6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e6f:	83 c0 24             	add    eax,0x24
c0011e72:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e74:	6a 00                	push   0x0
c0011e76:	68 26 15 01 c0       	push   0xc0011526
c0011e7b:	6a 13                	push   0x13
c0011e7d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e80:	ff d0                	call   eax
c0011e82:	83 c4 10             	add    esp,0x10
c0011e85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e88:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e8a:	83 c0 24             	add    eax,0x24
c0011e8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e8f:	6a 00                	push   0x0
c0011e91:	68 26 15 01 c0       	push   0xc0011526
c0011e96:	6a 14                	push   0x14
c0011e98:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e9b:	ff d0                	call   eax
c0011e9d:	83 c4 10             	add    esp,0x10
c0011ea0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ea3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ea5:	83 c0 24             	add    eax,0x24
c0011ea8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011eaa:	6a 00                	push   0x0
c0011eac:	68 26 15 01 c0       	push   0xc0011526
c0011eb1:	6a 1e                	push   0x1e
c0011eb3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011eb6:	ff d0                	call   eax
c0011eb8:	83 c4 10             	add    esp,0x10
c0011ebb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ebe:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ec0:	83 c0 24             	add    eax,0x24
c0011ec3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ec5:	6a 00                	push   0x0
c0011ec7:	68 54 74 01 c0       	push   0xc0017454
c0011ecc:	6a 60                	push   0x60
c0011ece:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ed1:	ff d0                	call   eax
c0011ed3:	83 c4 10             	add    esp,0x10
c0011ed6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ed9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011edc:	c9                   	leave  
c0011edd:	c3                   	ret    

c0011ede <InterruptController::convertLegacyIRQNumber(int)>:
c0011ede:	55                   	push   ebp
c0011edf:	89 e5                	mov    ebp,esp
c0011ee1:	83 ec 08             	sub    esp,0x8
c0011ee4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ee7:	83 ec 0c             	sub    esp,0xc
c0011eea:	50                   	push   eax
c0011eeb:	e8 1c ea ff ff       	call   c001090c <Device::getName()>
c0011ef0:	83 c4 10             	add    esp,0x10
c0011ef3:	8a 00                	mov    al,BYTE PTR [eax]
c0011ef5:	3c 41                	cmp    al,0x41
c0011ef7:	0f 94 c0             	sete   al
c0011efa:	84 c0                	test   al,al
c0011efc:	74 28                	je     c0011f26 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011efe:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0011f02:	7f 12                	jg     c0011f16 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0011f04:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011f07:	05 00 3f 02 c0       	add    eax,0xc0023f00
c0011f0c:	8a 00                	mov    al,BYTE PTR [eax]
c0011f0e:	0f b6 c0             	movzx  eax,al
c0011f11:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0011f14:	eb 10                	jmp    c0011f26 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011f16:	83 ec 0c             	sub    esp,0xc
c0011f19:	68 b4 1d 02 c0       	push   0xc0021db4
c0011f1e:	e8 21 3b 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c0011f23:	83 c4 10             	add    esp,0x10
c0011f26:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011f29:	c9                   	leave  
c0011f2a:	c3                   	ret    
c0011f2b:	90                   	nop

c0011f2c <startGUI(void*)>:
c0011f2c:	55                   	push   ebp
c0011f2d:	89 e5                	mov    ebp,esp
c0011f2f:	53                   	push   ebx
c0011f30:	83 ec 04             	sub    esp,0x4
c0011f33:	e8 17 6b 00 00       	call   c0018a4f <unlockScheduler()>
c0011f38:	e8 fb 6a 00 00       	call   c0018a38 <getIRQNestingLevel()>
c0011f3d:	83 ec 08             	sub    esp,0x8
c0011f40:	50                   	push   eax
c0011f41:	68 a4 20 02 c0       	push   0xc00220a4
c0011f46:	e8 ca d2 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0011f4b:	83 c4 10             	add    esp,0x10
c0011f4e:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c0011f54:	83 ec 08             	sub    esp,0x8
c0011f57:	6a 01                	push   0x1
c0011f59:	68 be 20 02 c0       	push   0xc00220be
c0011f5e:	e8 04 65 00 00       	call   c0018467 <Thr::loadDLL(char const*, bool)>
c0011f63:	83 c4 10             	add    esp,0x10
c0011f66:	83 ec 08             	sub    esp,0x8
c0011f69:	53                   	push   ebx
c0011f6a:	50                   	push   eax
c0011f6b:	e8 bd 66 00 00       	call   c001862d <Thr::executeDLL(unsigned long, void*)>
c0011f70:	83 c4 10             	add    esp,0x10
c0011f73:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c0011f79:	83 ec 08             	sub    esp,0x8
c0011f7c:	6a 01                	push   0x1
c0011f7e:	68 d8 20 02 c0       	push   0xc00220d8
c0011f83:	e8 df 64 00 00       	call   c0018467 <Thr::loadDLL(char const*, bool)>
c0011f88:	83 c4 10             	add    esp,0x10
c0011f8b:	83 ec 08             	sub    esp,0x8
c0011f8e:	53                   	push   ebx
c0011f8f:	50                   	push   eax
c0011f90:	e8 98 66 00 00       	call   c001862d <Thr::executeDLL(unsigned long, void*)>
c0011f95:	83 c4 10             	add    esp,0x10
c0011f98:	90                   	nop
c0011f99:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011f9c:	c9                   	leave  
c0011f9d:	c3                   	ret    

c0011f9e <sendKeyToTerminal(unsigned char)>:
c0011f9e:	55                   	push   ebp
c0011f9f:	89 e5                	mov    ebp,esp
c0011fa1:	83 ec 28             	sub    esp,0x28
c0011fa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fa7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0011faa:	8b 15 64 48 02 c0    	mov    edx,DWORD PTR ds:0xc0024864
c0011fb0:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c0011fb3:	25 ff 00 00 00       	and    eax,0xff
c0011fb8:	83 ec 08             	sub    esp,0x8
c0011fbb:	50                   	push   eax
c0011fbc:	52                   	push   edx
c0011fbd:	e8 a2 b9 ff ff       	call   c000d964 <VgaText::receiveKey(unsigned char)>
c0011fc2:	83 c4 10             	add    esp,0x10
c0011fc5:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0011fc9:	75 41                	jne    c001200c <sendKeyToTerminal(unsigned char)+0x6e>
c0011fcb:	e8 a4 6a 00 00       	call   c0018a74 <lockStuff()>
c0011fd0:	a1 40 49 02 c0       	mov    eax,ds:0xc0024940
c0011fd5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011fd8:	c7 05 40 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024940,0x0
c0011fe2:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011fe6:	74 1f                	je     c0012007 <sendKeyToTerminal(unsigned char)+0x69>
c0011fe8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011feb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0011fee:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011ff1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ff4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011ff7:	83 ec 0c             	sub    esp,0xc
c0011ffa:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011ffd:	e8 6f 70 00 00       	call   c0019071 <unblockTask(ThreadControlBlock*)>
c0012002:	83 c4 10             	add    esp,0x10
c0012005:	eb db                	jmp    c0011fe2 <sendKeyToTerminal(unsigned char)+0x44>
c0012007:	e8 0f 6e 00 00       	call   c0018e1b <unlockStuff()>
c001200c:	90                   	nop
c001200d:	c9                   	leave  
c001200e:	c3                   	ret    

c001200f <sendKeyboardToken(KeyboardToken)>:
c001200f:	55                   	push   ebp
c0012010:	89 e5                	mov    ebp,esp
c0012012:	83 ec 18             	sub    esp,0x18
c0012015:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0012018:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001201b:	25 ff ff 00 00       	and    eax,0xffff
c0012020:	83 f2 01             	xor    edx,0x1
c0012023:	88 90 60 49 02 c0    	mov    BYTE PTR [eax-0x3ffdb6a0],dl
c0012029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001202c:	66 3d 03 02          	cmp    ax,0x203
c0012030:	75 07                	jne    c0012039 <sendKeyboardToken(KeyboardToken)+0x2a>
c0012032:	a0 60 4a 02 c0       	mov    al,ds:0xc0024a60
c0012037:	84 c0                	test   al,al
c0012039:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001203d:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0012040:	a0 68 4d 02 c0       	mov    al,ds:0xc0024d68
c0012045:	38 c2                	cmp    dl,al
c0012047:	74 1e                	je     c0012067 <sendKeyboardToken(KeyboardToken)+0x58>
c0012049:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001204c:	a2 68 4d 02 c0       	mov    ds:0xc0024d68,al
c0012051:	a0 68 4d 02 c0       	mov    al,ds:0xc0024d68
c0012056:	25 ff 00 00 00       	and    eax,0xff
c001205b:	83 ec 0c             	sub    esp,0xc
c001205e:	50                   	push   eax
c001205f:	e8 6c ab ff ff       	call   c000cbd0 <setTerminalScrollLock(bool)>
c0012064:	83 c4 10             	add    esp,0x10
c0012067:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001206a:	84 c0                	test   al,al
c001206c:	0f 84 ae 00 00 00    	je     c0012120 <sendKeyboardToken(KeyboardToken)+0x111>
c0012072:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012075:	66 3d 10 03          	cmp    ax,0x310
c0012079:	75 06                	jne    c0012081 <sendKeyboardToken(KeyboardToken)+0x72>
c001207b:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0012081:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012084:	66 3d 11 03          	cmp    ax,0x311
c0012088:	75 06                	jne    c0012090 <sendKeyboardToken(KeyboardToken)+0x81>
c001208a:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0012090:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012093:	66 3d 12 03          	cmp    ax,0x312
c0012097:	75 06                	jne    c001209f <sendKeyboardToken(KeyboardToken)+0x90>
c0012099:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001209f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120a2:	66 3d 13 03          	cmp    ax,0x313
c00120a6:	75 06                	jne    c00120ae <sendKeyboardToken(KeyboardToken)+0x9f>
c00120a8:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00120ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120b1:	66 3d 14 03          	cmp    ax,0x314
c00120b5:	75 06                	jne    c00120bd <sendKeyboardToken(KeyboardToken)+0xae>
c00120b7:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00120bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120c0:	66 3d 15 03          	cmp    ax,0x315
c00120c4:	75 06                	jne    c00120cc <sendKeyboardToken(KeyboardToken)+0xbd>
c00120c6:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00120cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120cf:	66 3d 16 03          	cmp    ax,0x316
c00120d3:	75 06                	jne    c00120db <sendKeyboardToken(KeyboardToken)+0xcc>
c00120d5:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00120db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120de:	66 3d 17 03          	cmp    ax,0x317
c00120e2:	75 06                	jne    c00120ea <sendKeyboardToken(KeyboardToken)+0xdb>
c00120e4:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00120ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120ed:	66 3d 18 03          	cmp    ax,0x318
c00120f1:	75 06                	jne    c00120f9 <sendKeyboardToken(KeyboardToken)+0xea>
c00120f3:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00120f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120fc:	66 3d 19 03          	cmp    ax,0x319
c0012100:	75 06                	jne    c0012108 <sendKeyboardToken(KeyboardToken)+0xf9>
c0012102:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0012108:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001210b:	66 3d 1a 03          	cmp    ax,0x31a
c001210f:	0f 85 c9 00 00 00    	jne    c00121de <sendKeyboardToken(KeyboardToken)+0x1cf>
c0012115:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001211b:	e9 be 00 00 00       	jmp    c00121de <sendKeyboardToken(KeyboardToken)+0x1cf>
c0012120:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012123:	66 3d 10 03          	cmp    ax,0x310
c0012127:	75 0a                	jne    c0012133 <sendKeyboardToken(KeyboardToken)+0x124>
c0012129:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001212f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012133:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012136:	66 3d 11 03          	cmp    ax,0x311
c001213a:	75 0a                	jne    c0012146 <sendKeyboardToken(KeyboardToken)+0x137>
c001213c:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0012142:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012146:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012149:	66 3d 12 03          	cmp    ax,0x312
c001214d:	75 0a                	jne    c0012159 <sendKeyboardToken(KeyboardToken)+0x14a>
c001214f:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0012155:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012159:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001215c:	66 3d 13 03          	cmp    ax,0x313
c0012160:	75 0a                	jne    c001216c <sendKeyboardToken(KeyboardToken)+0x15d>
c0012162:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0012168:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001216c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001216f:	66 3d 14 03          	cmp    ax,0x314
c0012173:	75 0a                	jne    c001217f <sendKeyboardToken(KeyboardToken)+0x170>
c0012175:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001217b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001217f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012182:	66 3d 15 03          	cmp    ax,0x315
c0012186:	75 0a                	jne    c0012192 <sendKeyboardToken(KeyboardToken)+0x183>
c0012188:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001218e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012192:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012195:	66 3d 16 03          	cmp    ax,0x316
c0012199:	75 0a                	jne    c00121a5 <sendKeyboardToken(KeyboardToken)+0x196>
c001219b:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00121a1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121a8:	66 3d 17 03          	cmp    ax,0x317
c00121ac:	75 0a                	jne    c00121b8 <sendKeyboardToken(KeyboardToken)+0x1a9>
c00121ae:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00121b4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121bb:	66 3d 18 03          	cmp    ax,0x318
c00121bf:	75 0a                	jne    c00121cb <sendKeyboardToken(KeyboardToken)+0x1bc>
c00121c1:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00121c7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121ce:	66 3d 19 03          	cmp    ax,0x319
c00121d2:	75 0a                	jne    c00121de <sendKeyboardToken(KeyboardToken)+0x1cf>
c00121d4:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00121da:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121e1:	66 3d 00 02          	cmp    ax,0x200
c00121e5:	75 2a                	jne    c0012211 <sendKeyboardToken(KeyboardToken)+0x202>
c00121e7:	a0 60 4d 02 c0       	mov    al,ds:0xc0024d60
c00121ec:	83 f0 01             	xor    eax,0x1
c00121ef:	84 c0                	test   al,al
c00121f1:	74 1e                	je     c0012211 <sendKeyboardToken(KeyboardToken)+0x202>
c00121f3:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00121f8:	6a 01                	push   0x1
c00121fa:	6a 00                	push   0x0
c00121fc:	68 2c 1f 01 c0       	push   0xc0011f2c
c0012201:	50                   	push   eax
c0012202:	e8 7b 69 00 00       	call   c0018b82 <Process::createThread(void (*)(void*), void*, int)>
c0012207:	83 c4 10             	add    esp,0x10
c001220a:	c6 05 60 4d 02 c0 01 	mov    BYTE PTR ds:0xc0024d60,0x1
c0012211:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012214:	66 3d 1d 03          	cmp    ax,0x31d
c0012218:	75 06                	jne    c0012220 <sendKeyboardToken(KeyboardToken)+0x211>
c001221a:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0012220:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012223:	66 3d 1c 03          	cmp    ax,0x31c
c0012227:	75 06                	jne    c001222f <sendKeyboardToken(KeyboardToken)+0x220>
c0012229:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001222f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012232:	66 3d 1b 03          	cmp    ax,0x31b
c0012236:	75 06                	jne    c001223e <sendKeyboardToken(KeyboardToken)+0x22f>
c0012238:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001223e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012241:	66 3d 1e 03          	cmp    ax,0x31e
c0012245:	75 06                	jne    c001224d <sendKeyboardToken(KeyboardToken)+0x23e>
c0012247:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001224d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012250:	66 3d 1f 03          	cmp    ax,0x31f
c0012254:	75 06                	jne    c001225c <sendKeyboardToken(KeyboardToken)+0x24d>
c0012256:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001225c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001225f:	66 3d 1a 03          	cmp    ax,0x31a
c0012263:	75 06                	jne    c001226b <sendKeyboardToken(KeyboardToken)+0x25c>
c0012265:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001226b:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001226f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0012272:	83 f0 01             	xor    eax,0x1
c0012275:	84 c0                	test   al,al
c0012277:	74 7b                	je     c00122f4 <sendKeyboardToken(KeyboardToken)+0x2e5>
c0012279:	a0 61 4a 02 c0       	mov    al,ds:0xc0024a61
c001227e:	84 c0                	test   al,al
c0012280:	74 43                	je     c00122c5 <sendKeyboardToken(KeyboardToken)+0x2b6>
c0012282:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0012286:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001228a:	74 2d                	je     c00122b9 <sendKeyboardToken(KeyboardToken)+0x2aa>
c001228c:	8b 15 64 4d 02 c0    	mov    edx,DWORD PTR ds:0xc0024d64
c0012292:	89 d0                	mov    eax,edx
c0012294:	c1 e0 02             	shl    eax,0x2
c0012297:	01 d0                	add    eax,edx
c0012299:	01 c0                	add    eax,eax
c001229b:	a3 64 4d 02 c0       	mov    ds:0xc0024d64,eax
c00122a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122a3:	25 ff ff 00 00       	and    eax,0xffff
c00122a8:	8d 50 d0             	lea    edx,[eax-0x30]
c00122ab:	a1 64 4d 02 c0       	mov    eax,ds:0xc0024d64
c00122b0:	01 d0                	add    eax,edx
c00122b2:	a3 64 4d 02 c0       	mov    ds:0xc0024d64,eax
c00122b7:	eb 71                	jmp    c001232a <sendKeyboardToken(KeyboardToken)+0x31b>
c00122b9:	c7 05 64 4d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024d64,0x0
c00122c3:	eb 65                	jmp    c001232a <sendKeyboardToken(KeyboardToken)+0x31b>
c00122c5:	a1 64 4d 02 c0       	mov    eax,ds:0xc0024d64
c00122ca:	85 c0                	test   eax,eax
c00122cc:	74 1a                	je     c00122e8 <sendKeyboardToken(KeyboardToken)+0x2d9>
c00122ce:	a1 64 4d 02 c0       	mov    eax,ds:0xc0024d64
c00122d3:	25 ff 00 00 00       	and    eax,0xff
c00122d8:	83 ec 0c             	sub    esp,0xc
c00122db:	50                   	push   eax
c00122dc:	e8 bd fc ff ff       	call   c0011f9e <sendKeyToTerminal(unsigned char)>
c00122e1:	83 c4 10             	add    esp,0x10
c00122e4:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00122e8:	c7 05 64 4d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024d64,0x0
c00122f2:	eb 36                	jmp    c001232a <sendKeyboardToken(KeyboardToken)+0x31b>
c00122f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122f7:	66 3d 01 01          	cmp    ax,0x101
c00122fb:	75 2d                	jne    c001232a <sendKeyboardToken(KeyboardToken)+0x31b>
c00122fd:	a1 64 4d 02 c0       	mov    eax,ds:0xc0024d64
c0012302:	85 c0                	test   eax,eax
c0012304:	74 1a                	je     c0012320 <sendKeyboardToken(KeyboardToken)+0x311>
c0012306:	a1 64 4d 02 c0       	mov    eax,ds:0xc0024d64
c001230b:	25 ff 00 00 00       	and    eax,0xff
c0012310:	83 ec 0c             	sub    esp,0xc
c0012313:	50                   	push   eax
c0012314:	e8 85 fc ff ff       	call   c0011f9e <sendKeyToTerminal(unsigned char)>
c0012319:	83 c4 10             	add    esp,0x10
c001231c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0012320:	c7 05 64 4d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024d64,0x0
c001232a:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001232d:	83 f0 01             	xor    eax,0x1
c0012330:	84 c0                	test   al,al
c0012332:	74 4e                	je     c0012382 <sendKeyboardToken(KeyboardToken)+0x373>
c0012334:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0012337:	83 f0 01             	xor    eax,0x1
c001233a:	84 c0                	test   al,al
c001233c:	74 44                	je     c0012382 <sendKeyboardToken(KeyboardToken)+0x373>
c001233e:	a0 60 4a 02 c0       	mov    al,ds:0xc0024a60
c0012343:	83 f0 01             	xor    eax,0x1
c0012346:	84 c0                	test   al,al
c0012348:	74 38                	je     c0012382 <sendKeyboardToken(KeyboardToken)+0x373>
c001234a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001234d:	66 83 f8 1f          	cmp    ax,0x1f
c0012351:	76 09                	jbe    c001235c <sendKeyboardToken(KeyboardToken)+0x34d>
c0012353:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012356:	66 83 f8 7e          	cmp    ax,0x7e
c001235a:	76 12                	jbe    c001236e <sendKeyboardToken(KeyboardToken)+0x35f>
c001235c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001235f:	66 83 f8 0a          	cmp    ax,0xa
c0012363:	74 09                	je     c001236e <sendKeyboardToken(KeyboardToken)+0x35f>
c0012365:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012368:	66 83 f8 08          	cmp    ax,0x8
c001236c:	75 14                	jne    c0012382 <sendKeyboardToken(KeyboardToken)+0x373>
c001236e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012371:	25 ff 00 00 00       	and    eax,0xff
c0012376:	83 ec 0c             	sub    esp,0xc
c0012379:	50                   	push   eax
c001237a:	e8 1f fc ff ff       	call   c0011f9e <sendKeyToTerminal(unsigned char)>
c001237f:	83 c4 10             	add    esp,0x10
c0012382:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0012385:	83 f0 01             	xor    eax,0x1
c0012388:	84 c0                	test   al,al
c001238a:	74 51                	je     c00123dd <sendKeyboardToken(KeyboardToken)+0x3ce>
c001238c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001238f:	83 f0 01             	xor    eax,0x1
c0012392:	84 c0                	test   al,al
c0012394:	74 47                	je     c00123dd <sendKeyboardToken(KeyboardToken)+0x3ce>
c0012396:	a0 60 4a 02 c0       	mov    al,ds:0xc0024a60
c001239b:	84 c0                	test   al,al
c001239d:	74 3e                	je     c00123dd <sendKeyboardToken(KeyboardToken)+0x3ce>
c001239f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123a2:	66 83 f8 3f          	cmp    ax,0x3f
c00123a6:	76 35                	jbe    c00123dd <sendKeyboardToken(KeyboardToken)+0x3ce>
c00123a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123ab:	66 83 f8 7f          	cmp    ax,0x7f
c00123af:	77 2c                	ja     c00123dd <sendKeyboardToken(KeyboardToken)+0x3ce>
c00123b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123b4:	88 c2                	mov    dl,al
c00123b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123b9:	66 83 f8 5f          	cmp    ax,0x5f
c00123bd:	76 04                	jbe    c00123c3 <sendKeyboardToken(KeyboardToken)+0x3b4>
c00123bf:	b0 20                	mov    al,0x20
c00123c1:	eb 02                	jmp    c00123c5 <sendKeyboardToken(KeyboardToken)+0x3b6>
c00123c3:	b0 00                	mov    al,0x0
c00123c5:	29 c2                	sub    edx,eax
c00123c7:	88 d0                	mov    al,dl
c00123c9:	83 e8 40             	sub    eax,0x40
c00123cc:	25 ff 00 00 00       	and    eax,0xff
c00123d1:	83 ec 0c             	sub    esp,0xc
c00123d4:	50                   	push   eax
c00123d5:	e8 c4 fb ff ff       	call   c0011f9e <sendKeyToTerminal(unsigned char)>
c00123da:	83 c4 10             	add    esp,0x10
c00123dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123e0:	66 3d 00 03          	cmp    ax,0x300
c00123e4:	75 0f                	jne    c00123f5 <sendKeyboardToken(KeyboardToken)+0x3e6>
c00123e6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00123e9:	83 f0 01             	xor    eax,0x1
c00123ec:	84 c0                	test   al,al
c00123ee:	74 05                	je     c00123f5 <sendKeyboardToken(KeyboardToken)+0x3e6>
c00123f0:	e8 02 b0 ff ff       	call   c000d3f7 <doTerminalCycle()>
c00123f5:	90                   	nop
c00123f6:	c9                   	leave  
c00123f7:	c3                   	ret    

c00123f8 <clearInternalKeybuffer(VgaText*)>:
c00123f8:	55                   	push   ebp
c00123f9:	89 e5                	mov    ebp,esp
c00123fb:	83 ec 08             	sub    esp,0x8
c00123fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012401:	05 34 11 00 00       	add    eax,0x1134
c0012406:	83 ec 0c             	sub    esp,0xc
c0012409:	50                   	push   eax
c001240a:	e8 d2 e2 fe ff       	call   c00006e1 <strlen>
c001240f:	83 c4 10             	add    esp,0x10
c0012412:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012415:	81 c2 34 11 00 00    	add    edx,0x1134
c001241b:	83 ec 04             	sub    esp,0x4
c001241e:	50                   	push   eax
c001241f:	6a 00                	push   0x0
c0012421:	52                   	push   edx
c0012422:	e8 9d e2 fe ff       	call   c00006c4 <memset>
c0012427:	83 c4 10             	add    esp,0x10
c001242a:	90                   	nop
c001242b:	c9                   	leave  
c001242c:	c3                   	ret    

c001242d <readKeyboard(VgaText*, char*, unsigned long)>:
c001242d:	55                   	push   ebp
c001242e:	89 e5                	mov    ebp,esp
c0012430:	83 ec 18             	sub    esp,0x18
c0012433:	fb                   	sti    
c0012434:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001243b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001243f:	74 77                	je     c00124b8 <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0012441:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012444:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001244a:	84 c0                	test   al,al
c001244c:	75 02                	jne    c0012450 <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c001244e:	eb f1                	jmp    c0012441 <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0012450:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0012453:	8d 50 01             	lea    edx,[eax+0x1]
c0012456:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0012459:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001245c:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0012462:	88 10                	mov    BYTE PTR [eax],dl
c0012464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012467:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001246d:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0012470:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012473:	05 34 11 00 00       	add    eax,0x1134
c0012478:	83 ec 0c             	sub    esp,0xc
c001247b:	50                   	push   eax
c001247c:	e8 60 e2 fe ff       	call   c00006e1 <strlen>
c0012481:	83 c4 10             	add    esp,0x10
c0012484:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012487:	81 c2 34 11 00 00    	add    edx,0x1134
c001248d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0012490:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012493:	81 c2 34 11 00 00    	add    edx,0x1134
c0012499:	83 ec 04             	sub    esp,0x4
c001249c:	50                   	push   eax
c001249d:	51                   	push   ecx
c001249e:	52                   	push   edx
c001249f:	e8 b2 e1 fe ff       	call   c0000656 <memmove>
c00124a4:	83 c4 10             	add    esp,0x10
c00124a7:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00124aa:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00124ad:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00124b1:	75 88                	jne    c001243b <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00124b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00124b6:	eb 03                	jmp    c00124bb <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c00124b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00124bb:	c9                   	leave  
c00124bc:	c3                   	ret    
c00124bd:	90                   	nop

c00124be <Keyboard::Keyboard(char const*)>:
c00124be:	83 ec 0c             	sub    esp,0xc
c00124c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124c5:	83 ec 08             	sub    esp,0x8
c00124c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124cc:	50                   	push   eax
c00124cd:	e8 48 e3 ff ff       	call   c001081a <Device::Device(char const*)>
c00124d2:	83 c4 10             	add    esp,0x10
c00124d5:	ba fc 20 02 c0       	mov    edx,0xc00220fc
c00124da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124de:	89 10                	mov    DWORD PTR [eax],edx
c00124e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124e4:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00124ee:	c6 05 44 49 02 c0 01 	mov    BYTE PTR ds:0xc0024944,0x1
c00124f5:	90                   	nop
c00124f6:	83 c4 0c             	add    esp,0xc
c00124f9:	c3                   	ret    

c00124fa <Keyboard::~Keyboard()>:
c00124fa:	83 ec 0c             	sub    esp,0xc
c00124fd:	ba fc 20 02 c0       	mov    edx,0xc00220fc
c0012502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012506:	89 10                	mov    DWORD PTR [eax],edx
c0012508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001250c:	83 ec 0c             	sub    esp,0xc
c001250f:	50                   	push   eax
c0012510:	e8 bb df ff ff       	call   c00104d0 <Device::~Device()>
c0012515:	83 c4 10             	add    esp,0x10
c0012518:	90                   	nop
c0012519:	83 c4 0c             	add    esp,0xc
c001251c:	c3                   	ret    
c001251d:	90                   	nop

c001251e <Keyboard::~Keyboard()>:
c001251e:	83 ec 0c             	sub    esp,0xc
c0012521:	83 ec 0c             	sub    esp,0xc
c0012524:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012528:	e8 cd ff ff ff       	call   c00124fa <Keyboard::~Keyboard()>
c001252d:	83 c4 10             	add    esp,0x10
c0012530:	83 ec 08             	sub    esp,0x8
c0012533:	68 5c 01 00 00       	push   0x15c
c0012538:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001253c:	e8 ae cb ff ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c0012541:	83 c4 10             	add    esp,0x10
c0012544:	83 c4 0c             	add    esp,0xc
c0012547:	c3                   	ret    

c0012548 <LogicalDisk::close(int, int, void*)>:
c0012548:	83 c8 ff             	or     eax,0xffffffff
c001254b:	c3                   	ret    

c001254c <LogicalDisk::~LogicalDisk()>:
c001254c:	83 ec 0c             	sub    esp,0xc
c001254f:	ba ac 21 02 c0       	mov    edx,0xc00221ac
c0012554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012558:	89 10                	mov    DWORD PTR [eax],edx
c001255a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001255e:	83 ec 0c             	sub    esp,0xc
c0012561:	50                   	push   eax
c0012562:	e8 69 df ff ff       	call   c00104d0 <Device::~Device()>
c0012567:	83 c4 10             	add    esp,0x10
c001256a:	90                   	nop
c001256b:	83 c4 0c             	add    esp,0xc
c001256e:	c3                   	ret    
c001256f:	90                   	nop

c0012570 <LogicalDisk::~LogicalDisk()>:
c0012570:	83 ec 0c             	sub    esp,0xc
c0012573:	83 ec 0c             	sub    esp,0xc
c0012576:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001257a:	e8 cd ff ff ff       	call   c001254c <LogicalDisk::~LogicalDisk()>
c001257f:	83 c4 10             	add    esp,0x10
c0012582:	83 ec 08             	sub    esp,0x8
c0012585:	68 74 01 00 00       	push   0x174
c001258a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001258e:	e8 5c cb ff ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c0012593:	83 c4 10             	add    esp,0x10
c0012596:	83 c4 0c             	add    esp,0xc
c0012599:	c3                   	ret    

c001259a <LogicalDisk::open(int, int, void*)>:
c001259a:	83 ec 18             	sub    esp,0x18
c001259d:	68 28 21 02 c0       	push   0xc0022128
c00125a2:	e8 9d 34 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c00125a7:	83 c8 ff             	or     eax,0xffffffff
c00125aa:	83 c4 1c             	add    esp,0x1c
c00125ad:	c3                   	ret    

c00125ae <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00125ae:	53                   	push   ebx
c00125af:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00125b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00125bb:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00125c1:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00125c7:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00125cd:	77 10                	ja     c00125df <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00125cf:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00125d5:	89 d3                	mov    ebx,edx
c00125d7:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00125dd:	72 05                	jb     c00125e4 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00125df:	83 c8 ff             	or     eax,0xffffffff
c00125e2:	89 c2                	mov    edx,eax
c00125e4:	5b                   	pop    ebx
c00125e5:	c3                   	ret    

c00125e6 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00125e6:	56                   	push   esi
c00125e7:	83 c8 ff             	or     eax,0xffffffff
c00125ea:	53                   	push   ebx
c00125eb:	89 c2                	mov    edx,eax
c00125ed:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00125f1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00125f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00125f9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00125ff:	77 27                	ja     c0012628 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0012601:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0012607:	89 d8                	mov    eax,ebx
c0012609:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001260f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012614:	89 c2                	mov    edx,eax
c0012616:	73 10                	jae    c0012628 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0012618:	89 c8                	mov    eax,ecx
c001261a:	89 da                	mov    edx,ebx
c001261c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0012622:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0012628:	5b                   	pop    ebx
c0012629:	5e                   	pop    esi
c001262a:	c3                   	ret    
c001262b:	90                   	nop

c001262c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001262c:	83 ec 1c             	sub    esp,0x1c
c001262f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012633:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012637:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001263b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001263f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012643:	89 04 24             	mov    DWORD PTR [esp],eax
c0012646:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001264a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001264e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012652:	83 ec 08             	sub    esp,0x8
c0012655:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012659:	50                   	push   eax
c001265a:	e8 bb e1 ff ff       	call   c001081a <Device::Device(char const*)>
c001265f:	83 c4 10             	add    esp,0x10
c0012662:	ba ac 21 02 c0       	mov    edx,0xc00221ac
c0012667:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001266b:	89 10                	mov    DWORD PTR [eax],edx
c001266d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012671:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0012678:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001267c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0012683:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012687:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0012691:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012695:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012699:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001269d:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00126a3:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00126a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00126ad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00126b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00126b4:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00126ba:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00126c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00126c8:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00126ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126d2:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00126dc:	90                   	nop
c00126dd:	83 c4 1c             	add    esp,0x1c
c00126e0:	c3                   	ret    
c00126e1:	90                   	nop

c00126e2 <LogicalDisk::assignDriveLetter()>:
c00126e2:	55                   	push   ebp
c00126e3:	57                   	push   edi
c00126e4:	56                   	push   esi
c00126e5:	53                   	push   ebx
c00126e6:	83 ec 14             	sub    esp,0x14
c00126e9:	8b 3d 80 4d 02 c0    	mov    edi,DWORD PTR ds:0xc0024d80
c00126ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00126f3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00126f7:	8b 3d 84 4d 02 c0    	mov    edi,DWORD PTR ds:0xc0024d84
c00126fd:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0012703:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0012707:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001270d:	3c 01                	cmp    al,0x1
c001270f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0012713:	19 c0                	sbb    eax,eax
c0012715:	83 e0 02             	and    eax,0x2
c0012718:	83 c0 41             	add    eax,0x41
c001271b:	0f be e8             	movsx  ebp,al
c001271e:	3c 43                	cmp    al,0x43
c0012720:	75 10                	jne    c0012732 <LogicalDisk::assignDriveLetter()+0x50>
c0012722:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0012729:	75 5d                	jne    c0012788 <LogicalDisk::assignDriveLetter()+0xa6>
c001272b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0012730:	75 56                	jne    c0012788 <LogicalDisk::assignDriveLetter()+0xa6>
c0012732:	8d 75 bf             	lea    esi,[ebp-0x41]
c0012735:	ba 01 00 00 00       	mov    edx,0x1
c001273a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001273e:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0012742:	d3 e2                	shl    edx,cl
c0012744:	89 d7                	mov    edi,edx
c0012746:	89 d6                	mov    esi,edx
c0012748:	c1 ff 1f             	sar    edi,0x1f
c001274b:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001274f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012753:	21 f9                	and    ecx,edi
c0012755:	09 d1                	or     ecx,edx
c0012757:	75 2f                	jne    c0012788 <LogicalDisk::assignDriveLetter()+0xa6>
c0012759:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001275d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0012761:	09 f2                	or     edx,esi
c0012763:	89 15 80 4d 02 c0    	mov    DWORD PTR ds:0xc0024d80,edx
c0012769:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001276d:	09 fa                	or     edx,edi
c001276f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0012773:	89 15 84 4d 02 c0    	mov    DWORD PTR ds:0xc0024d84,edx
c0012779:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001277f:	89 1c bd a0 4d 02 c0 	mov    DWORD PTR [edi*4-0x3ffdb260],ebx
c0012786:	eb 08                	jmp    c0012790 <LogicalDisk::assignDriveLetter()+0xae>
c0012788:	40                   	inc    eax
c0012789:	45                   	inc    ebp
c001278a:	3c 5b                	cmp    al,0x5b
c001278c:	75 90                	jne    c001271e <LogicalDisk::assignDriveLetter()+0x3c>
c001278e:	31 c0                	xor    eax,eax
c0012790:	83 c4 14             	add    esp,0x14
c0012793:	5b                   	pop    ebx
c0012794:	5e                   	pop    esi
c0012795:	5f                   	pop    edi
c0012796:	5d                   	pop    ebp
c0012797:	c3                   	ret    

c0012798 <LogicalDisk::mount()>:
c0012798:	56                   	push   esi
c0012799:	53                   	push   ebx
c001279a:	51                   	push   ecx
c001279b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001279f:	8b 1d 08 49 02 c0    	mov    ebx,DWORD PTR ds:0xc0024908
c00127a5:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00127af:	85 db                	test   ebx,ebx
c00127b1:	74 50                	je     c0012803 <LogicalDisk::mount()+0x6b>
c00127b3:	e8 80 62 00 00       	call   c0018a38 <getIRQNestingLevel()>
c00127b8:	52                   	push   edx
c00127b9:	52                   	push   edx
c00127ba:	50                   	push   eax
c00127bb:	68 4c 21 02 c0       	push   0xc002214c
c00127c0:	e8 50 ca ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c00127c5:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00127cc:	83 c4 0c             	add    esp,0xc
c00127cf:	83 e8 41             	sub    eax,0x41
c00127d2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00127d4:	50                   	push   eax
c00127d5:	56                   	push   esi
c00127d6:	53                   	push   ebx
c00127d7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00127da:	83 c4 10             	add    esp,0x10
c00127dd:	84 c0                	test   al,al
c00127df:	74 08                	je     c00127e9 <LogicalDisk::mount()+0x51>
c00127e1:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00127e7:	eb 1c                	jmp    c0012805 <LogicalDisk::mount()+0x6d>
c00127e9:	e8 4a 62 00 00       	call   c0018a38 <getIRQNestingLevel()>
c00127ee:	51                   	push   ecx
c00127ef:	51                   	push   ecx
c00127f0:	50                   	push   eax
c00127f1:	68 67 21 02 c0       	push   0xc0022167
c00127f6:	e8 1a ca ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c00127fb:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00127fe:	83 c4 10             	add    esp,0x10
c0012801:	eb ac                	jmp    c00127af <LogicalDisk::mount()+0x17>
c0012803:	31 c0                	xor    eax,eax
c0012805:	5a                   	pop    edx
c0012806:	5b                   	pop    ebx
c0012807:	5e                   	pop    esi
c0012808:	c3                   	ret    
c0012809:	90                   	nop

c001280a <LogicalDisk::unmount()>:
c001280a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001280e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0012818:	c3                   	ret    
c0012819:	90                   	nop

c001281a <LogicalDisk::unassignDriveLetter()>:
c001281a:	57                   	push   edi
c001281b:	56                   	push   esi
c001281c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012820:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0012827:	84 c9                	test   cl,cl
c0012829:	75 0f                	jne    c001283a <LogicalDisk::unassignDriveLetter()+0x20>
c001282b:	c7 44 24 0c 82 21 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022182
c0012833:	5e                   	pop    esi
c0012834:	5f                   	pop    edi
c0012835:	e9 0a 32 00 00       	jmp    c0015a44 <Krnl::panic(char const*)>
c001283a:	83 e9 41             	sub    ecx,0x41
c001283d:	b8 01 00 00 00       	mov    eax,0x1
c0012842:	d3 e0                	shl    eax,cl
c0012844:	89 c7                	mov    edi,eax
c0012846:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001284d:	c1 ff 1f             	sar    edi,0x1f
c0012850:	c7 04 8d a0 4d 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdb260],0x0
c001285b:	89 fe                	mov    esi,edi
c001285d:	f7 d6                	not    esi
c001285f:	f7 d0                	not    eax
c0012861:	21 35 84 4d 02 c0    	and    DWORD PTR ds:0xc0024d84,esi
c0012867:	5e                   	pop    esi
c0012868:	21 05 80 4d 02 c0    	and    DWORD PTR ds:0xc0024d80,eax
c001286e:	5f                   	pop    edi
c001286f:	c3                   	ret    

c0012870 <LogicalDisk::read(unsigned long long, int, void*)>:
c0012870:	57                   	push   edi
c0012871:	56                   	push   esi
c0012872:	53                   	push   ebx
c0012873:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012877:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001287b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001287f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012883:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0012889:	77 41                	ja     c00128cc <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001288b:	99                   	cdq    
c001288c:	01 c8                	add    eax,ecx
c001288e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0012894:	11 da                	adc    edx,ebx
c0012896:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001289c:	19 d7                	sbb    edi,edx
c001289e:	72 33                	jb     c00128d3 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00128a0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00128a6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00128ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00128b0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00128b4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00128ba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00128c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00128c4:	5b                   	pop    ebx
c00128c5:	5e                   	pop    esi
c00128c6:	5f                   	pop    edi
c00128c7:	e9 9a 09 00 00       	jmp    c0013266 <VCache::read(unsigned long long, int, void*)>
c00128cc:	b8 05 00 00 00       	mov    eax,0x5
c00128d1:	eb 05                	jmp    c00128d8 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00128d3:	b8 07 00 00 00       	mov    eax,0x7
c00128d8:	5b                   	pop    ebx
c00128d9:	5e                   	pop    esi
c00128da:	5f                   	pop    edi
c00128db:	c3                   	ret    

c00128dc <LogicalDisk::write(unsigned long long, int, void*)>:
c00128dc:	57                   	push   edi
c00128dd:	56                   	push   esi
c00128de:	53                   	push   ebx
c00128df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00128e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00128e7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00128eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00128ef:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00128f5:	77 41                	ja     c0012938 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00128f7:	99                   	cdq    
c00128f8:	01 c8                	add    eax,ecx
c00128fa:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0012900:	11 da                	adc    edx,ebx
c0012902:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0012908:	19 d7                	sbb    edi,edx
c001290a:	72 33                	jb     c001293f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001290c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0012912:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0012918:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001291c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0012920:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0012926:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001292c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012930:	5b                   	pop    ebx
c0012931:	5e                   	pop    esi
c0012932:	5f                   	pop    edi
c0012933:	e9 4a 08 00 00       	jmp    c0013182 <VCache::write(unsigned long long, int, void*)>
c0012938:	b8 05 00 00 00       	mov    eax,0x5
c001293d:	eb 05                	jmp    c0012944 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001293f:	b8 07 00 00 00       	mov    eax,0x7
c0012944:	5b                   	pop    ebx
c0012945:	5e                   	pop    esi
c0012946:	5f                   	pop    edi
c0012947:	c3                   	ret    

c0012948 <Mouse::Mouse(char const*)>:
c0012948:	83 ec 0c             	sub    esp,0xc
c001294b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001294f:	83 ec 08             	sub    esp,0x8
c0012952:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012956:	50                   	push   eax
c0012957:	e8 be de ff ff       	call   c001081a <Device::Device(char const*)>
c001295c:	83 c4 10             	add    esp,0x10
c001295f:	ba d8 21 02 c0       	mov    edx,0xc00221d8
c0012964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012968:	89 10                	mov    DWORD PTR [eax],edx
c001296a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001296e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0012978:	90                   	nop
c0012979:	83 c4 0c             	add    esp,0xc
c001297c:	c3                   	ret    
c001297d:	90                   	nop

c001297e <Mouse::~Mouse()>:
c001297e:	83 ec 0c             	sub    esp,0xc
c0012981:	ba d8 21 02 c0       	mov    edx,0xc00221d8
c0012986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001298a:	89 10                	mov    DWORD PTR [eax],edx
c001298c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012990:	83 ec 0c             	sub    esp,0xc
c0012993:	50                   	push   eax
c0012994:	e8 37 db ff ff       	call   c00104d0 <Device::~Device()>
c0012999:	83 c4 10             	add    esp,0x10
c001299c:	90                   	nop
c001299d:	83 c4 0c             	add    esp,0xc
c00129a0:	c3                   	ret    
c00129a1:	90                   	nop

c00129a2 <Mouse::~Mouse()>:
c00129a2:	83 ec 0c             	sub    esp,0xc
c00129a5:	83 ec 0c             	sub    esp,0xc
c00129a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129ac:	e8 cd ff ff ff       	call   c001297e <Mouse::~Mouse()>
c00129b1:	83 c4 10             	add    esp,0x10
c00129b4:	83 ec 08             	sub    esp,0x8
c00129b7:	68 58 01 00 00       	push   0x158
c00129bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129c0:	e8 2a c7 ff ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c00129c5:	83 c4 10             	add    esp,0x10
c00129c8:	83 c4 0c             	add    esp,0xc
c00129cb:	c3                   	ret    

c00129cc <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00129cc:	55                   	push   ebp
c00129cd:	57                   	push   edi
c00129ce:	56                   	push   esi
c00129cf:	53                   	push   ebx
c00129d0:	81 ec 28 01 00 00    	sub    esp,0x128
c00129d6:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00129dd:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00129e4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00129eb:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00129f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00129f6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00129fa:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0012a01:	e8 06 df ff ff       	call   c001090c <Device::getName()>
c0012a06:	5a                   	pop    edx
c0012a07:	59                   	pop    ecx
c0012a08:	50                   	push   eax
c0012a09:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012a0d:	55                   	push   ebp
c0012a0e:	e8 50 dd fe ff       	call   c0000763 <strcpy>
c0012a13:	5b                   	pop    ebx
c0012a14:	58                   	pop    eax
c0012a15:	68 fc 21 02 c0       	push   0xc00221fc
c0012a1a:	55                   	push   ebp
c0012a1b:	e8 fa dd fe ff       	call   c000081a <strcat>
c0012a20:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0012a27:	e8 b4 c6 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c0012a2c:	83 c4 0c             	add    esp,0xc
c0012a2f:	89 c3                	mov    ebx,eax
c0012a31:	57                   	push   edi
c0012a32:	56                   	push   esi
c0012a33:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a37:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a3b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0012a42:	55                   	push   ebp
c0012a43:	50                   	push   eax
c0012a44:	e8 e3 fb ff ff       	call   c001262c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0012a49:	83 c4 14             	add    esp,0x14
c0012a4c:	53                   	push   ebx
c0012a4d:	e8 90 fc ff ff       	call   c00126e2 <LogicalDisk::assignDriveLetter()>
c0012a52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a55:	e8 3e fd ff ff       	call   c0012798 <LogicalDisk::mount()>
c0012a5a:	58                   	pop    eax
c0012a5b:	5a                   	pop    edx
c0012a5c:	53                   	push   ebx
c0012a5d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0012a64:	e8 c1 db ff ff       	call   c001062a <Device::addChild(Device*)>
c0012a69:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012a6f:	5b                   	pop    ebx
c0012a70:	5e                   	pop    esi
c0012a71:	5f                   	pop    edi
c0012a72:	5d                   	pop    ebp
c0012a73:	c3                   	ret    

c0012a74 <createPartitionsForDisk(PhysicalDisk*)>:
c0012a74:	55                   	push   ebp
c0012a75:	57                   	push   edi
c0012a76:	56                   	push   esi
c0012a77:	53                   	push   ebx
c0012a78:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0012a7e:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0012a85:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0012a8b:	3d 00 02 00 00       	cmp    eax,0x200
c0012a90:	74 27                	je     c0012ab9 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0012a92:	83 ec 10             	sub    esp,0x10
c0012a95:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0012a9b:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0012aa1:	99                   	cdq    
c0012aa2:	52                   	push   edx
c0012aa3:	0f a4 f7 0a          	shld   edi,esi,0xa
c0012aa7:	50                   	push   eax
c0012aa8:	89 fd                	mov    ebp,edi
c0012aaa:	c1 e6 0a             	shl    esi,0xa
c0012aad:	55                   	push   ebp
c0012aae:	56                   	push   esi
c0012aaf:	e8 58 ca 00 00       	call   c001f50c <__udivdi3>
c0012ab4:	e9 b1 00 00 00       	jmp    c0012b6a <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012ab9:	83 ec 0c             	sub    esp,0xc
c0012abc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012abe:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0012ac2:	56                   	push   esi
c0012ac3:	6a 01                	push   0x1
c0012ac5:	6a 00                	push   0x0
c0012ac7:	6a 00                	push   0x0
c0012ac9:	53                   	push   ebx
c0012aca:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012acd:	83 c4 20             	add    esp,0x20
c0012ad0:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0012ad8:	75 0a                	jne    c0012ae4 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0012ada:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0012ae2:	74 2c                	je     c0012b10 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0012ae4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012aea:	83 ec 10             	sub    esp,0x10
c0012aed:	89 f7                	mov    edi,esi
c0012aef:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012af5:	c1 ff 1f             	sar    edi,0x1f
c0012af8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012afe:	57                   	push   edi
c0012aff:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012b03:	c1 e0 0a             	shl    eax,0xa
c0012b06:	56                   	push   esi
c0012b07:	52                   	push   edx
c0012b08:	50                   	push   eax
c0012b09:	e8 fe c9 00 00       	call   c001f50c <__udivdi3>
c0012b0e:	eb 5a                	jmp    c0012b6a <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012b10:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0012b17:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0012b1e:	83 e0 7f             	and    eax,0x7f
c0012b21:	83 e1 7f             	and    ecx,0x7f
c0012b24:	01 c1                	add    ecx,eax
c0012b26:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0012b2d:	83 e0 7f             	and    eax,0x7f
c0012b30:	01 c1                	add    ecx,eax
c0012b32:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0012b39:	83 e0 7f             	and    eax,0x7f
c0012b3c:	00 c1                	add    cl,al
c0012b3e:	74 41                	je     c0012b81 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0012b40:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012b46:	83 ec 10             	sub    esp,0x10
c0012b49:	89 f7                	mov    edi,esi
c0012b4b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012b51:	c1 ff 1f             	sar    edi,0x1f
c0012b54:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012b5a:	57                   	push   edi
c0012b5b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012b5f:	c1 e0 0a             	shl    eax,0xa
c0012b62:	56                   	push   esi
c0012b63:	52                   	push   edx
c0012b64:	50                   	push   eax
c0012b65:	e8 a2 c9 00 00       	call   c001f50c <__udivdi3>
c0012b6a:	83 c4 14             	add    esp,0x14
c0012b6d:	52                   	push   edx
c0012b6e:	50                   	push   eax
c0012b6f:	6a 00                	push   0x0
c0012b71:	6a 00                	push   0x0
c0012b73:	53                   	push   ebx
c0012b74:	e8 53 fe ff ff       	call   c00129cc <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012b79:	83 c4 20             	add    esp,0x20
c0012b7c:	e9 79 01 00 00       	jmp    c0012cfa <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0012b81:	89 f0                	mov    eax,esi
c0012b83:	31 f6                	xor    esi,esi
c0012b85:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0012b8c:	75 02                	jne    c0012b90 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0012b8e:	89 f1                	mov    ecx,esi
c0012b90:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0012b97:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0012b9e:	c1 e2 08             	shl    edx,0x8
c0012ba1:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0012ba9:	c1 e7 10             	shl    edi,0x10
c0012bac:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0012bb4:	09 fa                	or     edx,edi
c0012bb6:	83 c0 10             	add    eax,0x10
c0012bb9:	0f b6 b8 b6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b6]
c0012bc0:	09 fa                	or     edx,edi
c0012bc2:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0012bc9:	c1 e7 18             	shl    edi,0x18
c0012bcc:	09 fa                	or     edx,edi
c0012bce:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0012bd2:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0012bd9:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0012be0:	c1 e7 10             	shl    edi,0x10
c0012be3:	c1 e2 08             	shl    edx,0x8
c0012be6:	09 fa                	or     edx,edi
c0012be8:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0012bef:	09 fa                	or     edx,edi
c0012bf1:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0012bf8:	c1 e7 18             	shl    edi,0x18
c0012bfb:	09 fa                	or     edx,edi
c0012bfd:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0012c01:	46                   	inc    esi
c0012c02:	83 fe 04             	cmp    esi,0x4
c0012c05:	0f 85 7a ff ff ff    	jne    c0012b85 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0012c0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c0f:	83 f0 01             	xor    eax,0x1
c0012c12:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012c16:	75 57                	jne    c0012c6f <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012c18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c1c:	83 f0 01             	xor    eax,0x1
c0012c1f:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012c23:	75 4a                	jne    c0012c6f <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012c25:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012c2b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0012c2f:	89 f7                	mov    edi,esi
c0012c31:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012c39:	c1 ff 1f             	sar    edi,0x1f
c0012c3c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012c44:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012c4a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012c50:	57                   	push   edi
c0012c51:	56                   	push   esi
c0012c52:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012c56:	c1 e0 0a             	shl    eax,0xa
c0012c59:	52                   	push   edx
c0012c5a:	50                   	push   eax
c0012c5b:	e8 ac c8 00 00       	call   c001f50c <__udivdi3>
c0012c60:	83 c4 10             	add    esp,0x10
c0012c63:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012c67:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012c6b:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0012c6f:	84 c9                	test   cl,cl
c0012c71:	74 53                	je     c0012cc6 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0012c73:	0f b6 c9             	movzx  ecx,cl
c0012c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c7a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012c7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012c82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012c86:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0012c8a:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0012c8e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0012c92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012c96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012c9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012c9e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012ca2:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0012ca6:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0012caa:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0012cae:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0012cb2:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0012cb6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012cba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012cbe:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0012cc2:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0012cc6:	31 ed                	xor    ebp,ebp
c0012cc8:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0012ccc:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0012cd0:	89 f8                	mov    eax,edi
c0012cd2:	09 f0                	or     eax,esi
c0012cd4:	74 1e                	je     c0012cf4 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012cd6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0012cda:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0012cde:	89 d1                	mov    ecx,edx
c0012ce0:	09 c1                	or     ecx,eax
c0012ce2:	74 10                	je     c0012cf4 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012ce4:	83 ec 0c             	sub    esp,0xc
c0012ce7:	57                   	push   edi
c0012ce8:	56                   	push   esi
c0012ce9:	52                   	push   edx
c0012cea:	50                   	push   eax
c0012ceb:	53                   	push   ebx
c0012cec:	e8 db fc ff ff       	call   c00129cc <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012cf1:	83 c4 20             	add    esp,0x20
c0012cf4:	45                   	inc    ebp
c0012cf5:	83 fd 04             	cmp    ebp,0x4
c0012cf8:	75 ce                	jne    c0012cc8 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0012cfa:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012d00:	5b                   	pop    ebx
c0012d01:	5e                   	pop    esi
c0012d02:	5f                   	pop    edi
c0012d03:	5d                   	pop    ebp
c0012d04:	c3                   	ret    
c0012d05:	90                   	nop

c0012d06 <Timer::Timer(char const*)>:
c0012d06:	83 ec 0c             	sub    esp,0xc
c0012d09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d0d:	83 ec 08             	sub    esp,0x8
c0012d10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d14:	50                   	push   eax
c0012d15:	e8 00 db ff ff       	call   c001081a <Device::Device(char const*)>
c0012d1a:	83 c4 10             	add    esp,0x10
c0012d1d:	ba 10 22 02 c0       	mov    edx,0xc0022210
c0012d22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d26:	89 10                	mov    DWORD PTR [eax],edx
c0012d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d2c:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0012d36:	90                   	nop
c0012d37:	83 c4 0c             	add    esp,0xc
c0012d3a:	c3                   	ret    
c0012d3b:	90                   	nop

c0012d3c <Timer::~Timer()>:
c0012d3c:	83 ec 0c             	sub    esp,0xc
c0012d3f:	ba 10 22 02 c0       	mov    edx,0xc0022210
c0012d44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d48:	89 10                	mov    DWORD PTR [eax],edx
c0012d4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d4e:	83 ec 0c             	sub    esp,0xc
c0012d51:	50                   	push   eax
c0012d52:	e8 79 d7 ff ff       	call   c00104d0 <Device::~Device()>
c0012d57:	83 c4 10             	add    esp,0x10
c0012d5a:	90                   	nop
c0012d5b:	83 c4 0c             	add    esp,0xc
c0012d5e:	c3                   	ret    
c0012d5f:	90                   	nop

c0012d60 <Timer::~Timer()>:
c0012d60:	83 ec 0c             	sub    esp,0xc
c0012d63:	83 ec 0c             	sub    esp,0xc
c0012d66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d6a:	e8 cd ff ff ff       	call   c0012d3c <Timer::~Timer()>
c0012d6f:	83 c4 10             	add    esp,0x10
c0012d72:	83 ec 08             	sub    esp,0x8
c0012d75:	68 5c 01 00 00       	push   0x15c
c0012d7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d7e:	e8 6c c3 ff ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c0012d83:	83 c4 10             	add    esp,0x10
c0012d86:	83 c4 0c             	add    esp,0xc
c0012d89:	c3                   	ret    

c0012d8a <Timer::read()>:
c0012d8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d8e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012d94:	c3                   	ret    

c0012d95 <timerHandler(unsigned long long)>:
c0012d95:	55                   	push   ebp
c0012d96:	57                   	push   edi
c0012d97:	56                   	push   esi
c0012d98:	53                   	push   ebx
c0012d99:	83 ec 0c             	sub    esp,0xc
c0012d9c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012da0:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012da4:	01 35 10 4e 02 c0    	add    DWORD PTR ds:0xc0024e10,esi
c0012daa:	11 3d 14 4e 02 c0    	adc    DWORD PTR ds:0xc0024e14,edi
c0012db0:	80 3d ad 47 02 c0 00 	cmp    BYTE PTR ds:0xc00247ad,0x0
c0012db7:	0f 84 07 01 00 00    	je     c0012ec4 <timerHandler(unsigned long long)+0x12f>
c0012dbd:	e8 b2 5c 00 00       	call   c0018a74 <lockStuff()>
c0012dc2:	83 ec 0c             	sub    esp,0xc
c0012dc5:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012dca:	e8 11 ce 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012dcf:	c7 04 24 dc 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bdc
c0012dd6:	89 c3                	mov    ebx,eax
c0012dd8:	e8 0b ce 00 00       	call   c001fbe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012ddd:	83 c4 10             	add    esp,0x10
c0012de0:	84 c0                	test   al,al
c0012de2:	74 60                	je     c0012e44 <timerHandler(unsigned long long)+0xaf>
c0012de4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012dea:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0012ded:	85 c0                	test   eax,eax
c0012def:	0f 85 91 00 00 00    	jne    c0012e86 <timerHandler(unsigned long long)+0xf1>
c0012df5:	e9 be 00 00 00       	jmp    c0012eb8 <timerHandler(unsigned long long)+0x123>
c0012dfa:	83 ec 0c             	sub    esp,0xc
c0012dfd:	55                   	push   ebp
c0012dfe:	e8 6e 62 00 00       	call   c0019071 <unblockTask(ThreadControlBlock*)>
c0012e03:	83 c4 10             	add    esp,0x10
c0012e06:	39 eb                	cmp    ebx,ebp
c0012e08:	75 12                	jne    c0012e1c <timerHandler(unsigned long long)+0x87>
c0012e0a:	83 ec 0c             	sub    esp,0xc
c0012e0d:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012e12:	e8 c9 cd 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e17:	89 c3                	mov    ebx,eax
c0012e19:	83 c4 10             	add    esp,0x10
c0012e1c:	83 ec 0c             	sub    esp,0xc
c0012e1f:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012e24:	e8 bf cd 00 00       	call   c001fbe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012e29:	83 c4 10             	add    esp,0x10
c0012e2c:	84 c0                	test   al,al
c0012e2e:	75 b4                	jne    c0012de4 <timerHandler(unsigned long long)+0x4f>
c0012e30:	83 ec 0c             	sub    esp,0xc
c0012e33:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012e38:	e8 a3 cd 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e3d:	83 c4 10             	add    esp,0x10
c0012e40:	39 d8                	cmp    eax,ebx
c0012e42:	74 a0                	je     c0012de4 <timerHandler(unsigned long long)+0x4f>
c0012e44:	83 ec 0c             	sub    esp,0xc
c0012e47:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012e4c:	e8 8f cd 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e51:	89 c5                	mov    ebp,eax
c0012e53:	c7 04 24 dc 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bdc
c0012e5a:	e8 a5 cd 00 00       	call   c001fc04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012e5f:	83 c4 10             	add    esp,0x10
c0012e62:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0012e65:	a1 14 4e 02 c0       	mov    eax,ds:0xc0024e14
c0012e6a:	39 15 10 4e 02 c0    	cmp    DWORD PTR ds:0xc0024e10,edx
c0012e70:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0012e73:	19 c8                	sbb    eax,ecx
c0012e75:	73 83                	jae    c0012dfa <timerHandler(unsigned long long)+0x65>
c0012e77:	50                   	push   eax
c0012e78:	50                   	push   eax
c0012e79:	55                   	push   ebp
c0012e7a:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012e7f:	e8 2e ce 00 00       	call   c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012e84:	eb 93                	jmp    c0012e19 <timerHandler(unsigned long long)+0x84>
c0012e86:	80 3d ac 47 02 c0 00 	cmp    BYTE PTR ds:0xc00247ac,0x0
c0012e8d:	74 29                	je     c0012eb8 <timerHandler(unsigned long long)+0x123>
c0012e8f:	39 c6                	cmp    esi,eax
c0012e91:	bb 00 00 00 00       	mov    ebx,0x0
c0012e96:	19 df                	sbb    edi,ebx
c0012e98:	72 19                	jb     c0012eb3 <timerHandler(unsigned long long)+0x11e>
c0012e9a:	e8 ae 5b 00 00       	call   c0018a4d <lockScheduler()>
c0012e9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ea4:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0012ea7:	e8 ea 5e 00 00       	call   c0018d96 <schedule()>
c0012eac:	e8 9e 5b 00 00       	call   c0018a4f <unlockScheduler()>
c0012eb1:	eb 05                	jmp    c0012eb8 <timerHandler(unsigned long long)+0x123>
c0012eb3:	29 f0                	sub    eax,esi
c0012eb5:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0012eb8:	83 c4 0c             	add    esp,0xc
c0012ebb:	5b                   	pop    ebx
c0012ebc:	5e                   	pop    esi
c0012ebd:	5f                   	pop    edi
c0012ebe:	5d                   	pop    ebp
c0012ebf:	e9 57 5f 00 00       	jmp    c0018e1b <unlockStuff()>
c0012ec4:	83 c4 0c             	add    esp,0xc
c0012ec7:	5b                   	pop    ebx
c0012ec8:	5e                   	pop    esi
c0012ec9:	5f                   	pop    edi
c0012eca:	5d                   	pop    ebp
c0012ecb:	c3                   	ret    

c0012ecc <setupTimer(int)>:
c0012ecc:	57                   	push   edi
c0012ecd:	56                   	push   esi
c0012ece:	53                   	push   ebx
c0012ecf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012ed3:	e8 fd 19 00 00       	call   c00148d5 <getCPUNumber()>
c0012ed8:	85 c0                	test   eax,eax
c0012eda:	74 32                	je     c0012f0e <setupTimer(int)+0x42>
c0012edc:	83 ec 0c             	sub    esp,0xc
c0012edf:	68 60 01 00 00       	push   0x160
c0012ee4:	e8 f7 c1 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c0012ee9:	89 04 24             	mov    DWORD PTR [esp],eax
c0012eec:	89 c3                	mov    ebx,eax
c0012eee:	e8 a7 c0 00 00       	call   c001ef9a <APICTimer::APICTimer()>
c0012ef3:	6a 00                	push   0x0
c0012ef5:	6a 00                	push   0x0
c0012ef7:	56                   	push   esi
c0012ef8:	53                   	push   ebx
c0012ef9:	e8 96 bf 00 00       	call   c001ee94 <APICTimer::open(int, int, void*)>
c0012efe:	83 c4 20             	add    esp,0x20
c0012f01:	e8 d2 19 00 00       	call   c00148d8 <thisCPU()>
c0012f06:	56                   	push   esi
c0012f07:	56                   	push   esi
c0012f08:	53                   	push   ebx
c0012f09:	e9 96 00 00 00       	jmp    c0012fa4 <setupTimer(int)+0xd8>
c0012f0e:	e8 c5 19 00 00       	call   c00148d8 <thisCPU()>
c0012f13:	83 ec 0c             	sub    esp,0xc
c0012f16:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012f1c:	e8 eb d9 ff ff       	call   c001090c <Device::getName()>
c0012f21:	83 c4 10             	add    esp,0x10
c0012f24:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0012f27:	0f 85 87 00 00 00    	jne    c0012fb4 <setupTimer(int)+0xe8>
c0012f2d:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0012f32:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0012f39:	74 79                	je     c0012fb4 <setupTimer(int)+0xe8>
c0012f3b:	83 ec 0c             	sub    esp,0xc
c0012f3e:	68 5c 01 00 00       	push   0x15c
c0012f43:	e8 98 c1 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c0012f48:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f4b:	89 c3                	mov    ebx,eax
c0012f4d:	e8 a4 c1 00 00       	call   c001f0f6 <PIT::PIT()>
c0012f52:	59                   	pop    ecx
c0012f53:	5f                   	pop    edi
c0012f54:	53                   	push   ebx
c0012f55:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c0012f5b:	e8 ca d6 ff ff       	call   c001062a <Device::addChild(Device*)>
c0012f60:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f62:	6a 00                	push   0x0
c0012f64:	6a 00                	push   0x0
c0012f66:	56                   	push   esi
c0012f67:	53                   	push   ebx
c0012f68:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f6b:	83 c4 14             	add    esp,0x14
c0012f6e:	68 60 01 00 00       	push   0x160
c0012f73:	e8 68 c1 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c0012f78:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f7b:	89 c7                	mov    edi,eax
c0012f7d:	e8 18 c0 00 00       	call   c001ef9a <APICTimer::APICTimer()>
c0012f82:	6a 00                	push   0x0
c0012f84:	6a 00                	push   0x0
c0012f86:	56                   	push   esi
c0012f87:	57                   	push   edi
c0012f88:	e8 07 bf 00 00       	call   c001ee94 <APICTimer::open(int, int, void*)>
c0012f8d:	83 c4 20             	add    esp,0x20
c0012f90:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f92:	6a 00                	push   0x0
c0012f94:	6a 00                	push   0x0
c0012f96:	6a 00                	push   0x0
c0012f98:	53                   	push   ebx
c0012f99:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012f9c:	e8 37 19 00 00       	call   c00148d8 <thisCPU()>
c0012fa1:	5a                   	pop    edx
c0012fa2:	59                   	pop    ecx
c0012fa3:	57                   	push   edi
c0012fa4:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012faa:	e8 7b d6 ff ff       	call   c001062a <Device::addChild(Device*)>
c0012faf:	83 c4 10             	add    esp,0x10
c0012fb2:	eb 33                	jmp    c0012fe7 <setupTimer(int)+0x11b>
c0012fb4:	83 ec 0c             	sub    esp,0xc
c0012fb7:	68 5c 01 00 00       	push   0x15c
c0012fbc:	e8 1f c1 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c0012fc1:	89 04 24             	mov    DWORD PTR [esp],eax
c0012fc4:	89 c3                	mov    ebx,eax
c0012fc6:	e8 2b c1 00 00       	call   c001f0f6 <PIT::PIT()>
c0012fcb:	58                   	pop    eax
c0012fcc:	5a                   	pop    edx
c0012fcd:	53                   	push   ebx
c0012fce:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c0012fd4:	e8 51 d6 ff ff       	call   c001062a <Device::addChild(Device*)>
c0012fd9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fdb:	6a 00                	push   0x0
c0012fdd:	6a 00                	push   0x0
c0012fdf:	56                   	push   esi
c0012fe0:	53                   	push   ebx
c0012fe1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012fe4:	83 c4 20             	add    esp,0x20
c0012fe7:	89 d8                	mov    eax,ebx
c0012fe9:	5b                   	pop    ebx
c0012fea:	5e                   	pop    esi
c0012feb:	5f                   	pop    edi
c0012fec:	c3                   	ret    
c0012fed:	90                   	nop

c0012fee <VCache::VCache(PhysicalDisk*)>:
c0012fee:	53                   	push   ebx
c0012fef:	83 ec 08             	sub    esp,0x8
c0012ff2:	ba 40 22 02 c0       	mov    edx,0xc0022240
c0012ff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ffb:	89 10                	mov    DWORD PTR [eax],edx
c0012ffd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013001:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0013008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001300c:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0013013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013017:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001301e:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0013025:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013029:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0013030:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001303b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0013042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013046:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001304a:	83 ec 0c             	sub    esp,0xc
c001304d:	6a 10                	push   0x10
c001304f:	e8 8c c0 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c0013054:	83 c4 10             	add    esp,0x10
c0013057:	89 c3                	mov    ebx,eax
c0013059:	83 ec 0c             	sub    esp,0xc
c001305c:	53                   	push   ebx
c001305d:	e8 0e 5b 00 00       	call   c0018b70 <Mutex::Mutex()>
c0013062:	83 c4 10             	add    esp,0x10
c0013065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013069:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001306c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013070:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013074:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0013077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001307b:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0013082:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013086:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001308c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013090:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013093:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013097:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001309d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00130a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00130a7:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00130aa:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00130ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130b1:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00130b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00130b9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00130bf:	c1 e0 06             	shl    eax,0x6
c00130c2:	83 ec 0c             	sub    esp,0xc
c00130c5:	50                   	push   eax
c00130c6:	e8 18 8f ff ff       	call   c000bfe3 <malloc>
c00130cb:	83 c4 10             	add    esp,0x10
c00130ce:	89 c2                	mov    edx,eax
c00130d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130d4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00130d7:	90                   	nop
c00130d8:	83 c4 08             	add    esp,0x8
c00130db:	5b                   	pop    ebx
c00130dc:	c3                   	ret    
c00130dd:	90                   	nop

c00130de <VCache::writeWriteBuffer()>:
c00130de:	53                   	push   ebx
c00130df:	83 ec 14             	sub    esp,0x14
c00130e2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00130e6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00130e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00130eb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00130ee:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00130f1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00130f4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00130f7:	50                   	push   eax
c00130f8:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00130fb:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0013102:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0013109:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001310d:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0013114:	83 c4 28             	add    esp,0x28
c0013117:	5b                   	pop    ebx
c0013118:	c3                   	ret    
c0013119:	90                   	nop

c001311a <VCache::~VCache()>:
c001311a:	83 ec 0c             	sub    esp,0xc
c001311d:	ba 40 22 02 c0       	mov    edx,0xc0022240
c0013122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013126:	89 10                	mov    DWORD PTR [eax],edx
c0013128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001312c:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001312f:	84 c0                	test   al,al
c0013131:	74 0f                	je     c0013142 <VCache::~VCache()+0x28>
c0013133:	83 ec 0c             	sub    esp,0xc
c0013136:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001313a:	e8 9f ff ff ff       	call   c00130de <VCache::writeWriteBuffer()>
c001313f:	83 c4 10             	add    esp,0x10
c0013142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013146:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013149:	83 ec 0c             	sub    esp,0xc
c001314c:	50                   	push   eax
c001314d:	e8 a1 8e ff ff       	call   c000bff3 <free>
c0013152:	83 c4 10             	add    esp,0x10
c0013155:	90                   	nop
c0013156:	83 c4 0c             	add    esp,0xc
c0013159:	c3                   	ret    

c001315a <VCache::~VCache()>:
c001315a:	83 ec 0c             	sub    esp,0xc
c001315d:	83 ec 0c             	sub    esp,0xc
c0013160:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013164:	e8 b1 ff ff ff       	call   c001311a <VCache::~VCache()>
c0013169:	83 c4 10             	add    esp,0x10
c001316c:	83 ec 08             	sub    esp,0x8
c001316f:	6a 30                	push   0x30
c0013171:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013175:	e8 75 bf ff ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c001317a:	83 c4 10             	add    esp,0x10
c001317d:	83 c4 0c             	add    esp,0xc
c0013180:	c3                   	ret    
c0013181:	90                   	nop

c0013182 <VCache::write(unsigned long long, int, void*)>:
c0013182:	55                   	push   ebp
c0013183:	57                   	push   edi
c0013184:	56                   	push   esi
c0013185:	53                   	push   ebx
c0013186:	83 ec 28             	sub    esp,0x28
c0013189:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001318d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0013191:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0013195:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0013199:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001319c:	e8 3d 5e 00 00       	call   c0018fde <Semaphore::acquire()>
c00131a1:	83 c4 10             	add    esp,0x10
c00131a4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00131a8:	74 66                	je     c0013210 <VCache::write(unsigned long long, int, void*)+0x8e>
c00131aa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00131ad:	99                   	cdq    
c00131ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00131b2:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00131b5:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00131b8:	89 c1                	mov    ecx,eax
c00131ba:	31 f1                	xor    ecx,esi
c00131bc:	89 d0                	mov    eax,edx
c00131be:	31 f8                	xor    eax,edi
c00131c0:	89 ca                	mov    edx,ecx
c00131c2:	09 c2                	or     edx,eax
c00131c4:	75 3e                	jne    c0013204 <VCache::write(unsigned long long, int, void*)+0x82>
c00131c6:	83 fd 01             	cmp    ebp,0x1
c00131c9:	75 39                	jne    c0013204 <VCache::write(unsigned long long, int, void*)+0x82>
c00131cb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00131ce:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00131d4:	51                   	push   ecx
c00131d5:	50                   	push   eax
c00131d6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00131da:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00131de:	0f af c8             	imul   ecx,eax
c00131e1:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00131e4:	51                   	push   ecx
c00131e5:	e8 a4 d4 fe ff       	call   c000068e <memcpy>
c00131ea:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00131ed:	83 c4 10             	add    esp,0x10
c00131f0:	40                   	inc    eax
c00131f1:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00131f4:	83 f8 40             	cmp    eax,0x40
c00131f7:	75 57                	jne    c0013250 <VCache::write(unsigned long long, int, void*)+0xce>
c00131f9:	83 ec 0c             	sub    esp,0xc
c00131fc:	53                   	push   ebx
c00131fd:	e8 dc fe ff ff       	call   c00130de <VCache::writeWriteBuffer()>
c0013202:	eb 34                	jmp    c0013238 <VCache::write(unsigned long long, int, void*)+0xb6>
c0013204:	83 ec 0c             	sub    esp,0xc
c0013207:	53                   	push   ebx
c0013208:	e8 d1 fe ff ff       	call   c00130de <VCache::writeWriteBuffer()>
c001320d:	83 c4 10             	add    esp,0x10
c0013210:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013213:	83 fd 3f             	cmp    ebp,0x3f
c0013216:	7f 25                	jg     c001323d <VCache::write(unsigned long long, int, void*)+0xbb>
c0013218:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001321b:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001321e:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0013221:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0013225:	52                   	push   edx
c0013226:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001322c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0013230:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013233:	e8 56 d4 fe ff       	call   c000068e <memcpy>
c0013238:	83 c4 10             	add    esp,0x10
c001323b:	eb 13                	jmp    c0013250 <VCache::write(unsigned long long, int, void*)+0xce>
c001323d:	83 ec 0c             	sub    esp,0xc
c0013240:	8b 10                	mov    edx,DWORD PTR [eax]
c0013242:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013246:	55                   	push   ebp
c0013247:	57                   	push   edi
c0013248:	56                   	push   esi
c0013249:	50                   	push   eax
c001324a:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001324d:	83 c4 20             	add    esp,0x20
c0013250:	83 ec 0c             	sub    esp,0xc
c0013253:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013256:	e8 0f 63 00 00       	call   c001956a <Semaphore::release()>
c001325b:	83 c4 2c             	add    esp,0x2c
c001325e:	5b                   	pop    ebx
c001325f:	31 c0                	xor    eax,eax
c0013261:	5e                   	pop    esi
c0013262:	5f                   	pop    edi
c0013263:	5d                   	pop    ebp
c0013264:	c3                   	ret    
c0013265:	90                   	nop

c0013266 <VCache::read(unsigned long long, int, void*)>:
c0013266:	57                   	push   edi
c0013267:	56                   	push   esi
c0013268:	53                   	push   ebx
c0013269:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001326d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013271:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013275:	83 ec 0c             	sub    esp,0xc
c0013278:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001327b:	e8 5e 5d 00 00       	call   c0018fde <Semaphore::acquire()>
c0013280:	83 c4 10             	add    esp,0x10
c0013283:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0013287:	74 0c                	je     c0013295 <VCache::read(unsigned long long, int, void*)+0x2f>
c0013289:	83 ec 0c             	sub    esp,0xc
c001328c:	53                   	push   ebx
c001328d:	e8 4c fe ff ff       	call   c00130de <VCache::writeWriteBuffer()>
c0013292:	83 c4 10             	add    esp,0x10
c0013295:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013298:	83 ec 0c             	sub    esp,0xc
c001329b:	8b 10                	mov    edx,DWORD PTR [eax]
c001329d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132a5:	57                   	push   edi
c00132a6:	56                   	push   esi
c00132a7:	50                   	push   eax
c00132a8:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00132ab:	83 c4 14             	add    esp,0x14
c00132ae:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00132b1:	e8 b4 62 00 00       	call   c001956a <Semaphore::release()>
c00132b6:	83 c4 10             	add    esp,0x10
c00132b9:	5b                   	pop    ebx
c00132ba:	31 c0                	xor    eax,eax
c00132bc:	5e                   	pop    esi
c00132bd:	5f                   	pop    edi
c00132be:	c3                   	ret    
c00132bf:	90                   	nop

c00132c0 <Video::putrect(int, int, int, int, unsigned int)>:
c00132c0:	55                   	push   ebp
c00132c1:	57                   	push   edi
c00132c2:	56                   	push   esi
c00132c3:	53                   	push   ebx
c00132c4:	83 ec 1c             	sub    esp,0x1c
c00132c7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00132cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00132cf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00132d3:	01 e8                	add    eax,ebp
c00132d5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00132d9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00132dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00132e1:	01 df                	add    edi,ebx
c00132e3:	39 fb                	cmp    ebx,edi
c00132e5:	7d 1b                	jge    c0013302 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c00132e7:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00132eb:	7d 12                	jge    c00132ff <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c00132ed:	8b 16                	mov    edx,DWORD PTR [esi]
c00132ef:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00132f3:	53                   	push   ebx
c00132f4:	55                   	push   ebp
c00132f5:	45                   	inc    ebp
c00132f6:	56                   	push   esi
c00132f7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00132fa:	83 c4 10             	add    esp,0x10
c00132fd:	eb e8                	jmp    c00132e7 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c00132ff:	43                   	inc    ebx
c0013300:	eb e1                	jmp    c00132e3 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0013302:	83 c4 1c             	add    esp,0x1c
c0013305:	5b                   	pop    ebx
c0013306:	5e                   	pop    esi
c0013307:	5f                   	pop    edi
c0013308:	5d                   	pop    ebp
c0013309:	c3                   	ret    

c001330a <Video::blit(unsigned int*, int, int, int, int)>:
c001330a:	55                   	push   ebp
c001330b:	57                   	push   edi
c001330c:	56                   	push   esi
c001330d:	53                   	push   ebx
c001330e:	83 ec 1c             	sub    esp,0x1c
c0013311:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013315:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013319:	85 c0                	test   eax,eax
c001331b:	79 02                	jns    c001331f <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001331d:	31 c0                	xor    eax,eax
c001331f:	c1 e0 02             	shl    eax,0x2
c0013322:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013326:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001332a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001332e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0013332:	39 d8                	cmp    eax,ebx
c0013334:	7e 49                	jle    c001337f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0013336:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001333c:	7c 41                	jl     c001337f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001333e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013342:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0013346:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001334a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001334e:	39 f9                	cmp    ecx,edi
c0013350:	7e 22                	jle    c0013374 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0013352:	83 c5 04             	add    ebp,0x4
c0013355:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001335b:	7c 14                	jl     c0013371 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001335d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001335f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0013362:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013366:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001336a:	56                   	push   esi
c001336b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001336e:	83 c4 10             	add    esp,0x10
c0013371:	47                   	inc    edi
c0013372:	eb d2                	jmp    c0013346 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0013374:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013378:	43                   	inc    ebx
c0013379:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001337d:	eb ab                	jmp    c001332a <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001337f:	83 c4 1c             	add    esp,0x1c
c0013382:	5b                   	pop    ebx
c0013383:	5e                   	pop    esi
c0013384:	5f                   	pop    edi
c0013385:	5d                   	pop    ebp
c0013386:	c3                   	ret    
c0013387:	90                   	nop

c0013388 <Video::clearScreen(unsigned int)>:
c0013388:	57                   	push   edi
c0013389:	56                   	push   esi
c001338a:	53                   	push   ebx
c001338b:	31 db                	xor    ebx,ebx
c001338d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013391:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0013397:	7e 1f                	jle    c00133b8 <Video::clearScreen(unsigned int)+0x30>
c0013399:	31 ff                	xor    edi,edi
c001339b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00133a1:	7e 12                	jle    c00133b5 <Video::clearScreen(unsigned int)+0x2d>
c00133a3:	8b 06                	mov    eax,DWORD PTR [esi]
c00133a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00133a9:	53                   	push   ebx
c00133aa:	57                   	push   edi
c00133ab:	47                   	inc    edi
c00133ac:	56                   	push   esi
c00133ad:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00133b0:	83 c4 10             	add    esp,0x10
c00133b3:	eb e6                	jmp    c001339b <Video::clearScreen(unsigned int)+0x13>
c00133b5:	43                   	inc    ebx
c00133b6:	eb d9                	jmp    c0013391 <Video::clearScreen(unsigned int)+0x9>
c00133b8:	5b                   	pop    ebx
c00133b9:	5e                   	pop    esi
c00133ba:	5f                   	pop    edi
c00133bb:	c3                   	ret    

c00133bc <Video::putpixel(int, int, unsigned int)>:
c00133bc:	c7 44 24 04 48 22 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022248
c00133c4:	e9 4c be ff ff       	jmp    c000f215 <Dbg::kprintf(char const*, ...)>
c00133c9:	90                   	nop

c00133ca <Video::Video(char const*)>:
c00133ca:	83 ec 0c             	sub    esp,0xc
c00133cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133d1:	83 ec 08             	sub    esp,0x8
c00133d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133d8:	50                   	push   eax
c00133d9:	e8 3c d4 ff ff       	call   c001081a <Device::Device(char const*)>
c00133de:	83 c4 10             	add    esp,0x10
c00133e1:	ba 60 22 02 c0       	mov    edx,0xc0022260
c00133e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ea:	89 10                	mov    DWORD PTR [eax],edx
c00133ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f0:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00133fa:	90                   	nop
c00133fb:	83 c4 0c             	add    esp,0xc
c00133fe:	c3                   	ret    
c00133ff:	90                   	nop

c0013400 <Video::~Video()>:
c0013400:	83 ec 0c             	sub    esp,0xc
c0013403:	ba 60 22 02 c0       	mov    edx,0xc0022260
c0013408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001340c:	89 10                	mov    DWORD PTR [eax],edx
c001340e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013412:	83 ec 0c             	sub    esp,0xc
c0013415:	50                   	push   eax
c0013416:	e8 b5 d0 ff ff       	call   c00104d0 <Device::~Device()>
c001341b:	83 c4 10             	add    esp,0x10
c001341e:	90                   	nop
c001341f:	83 c4 0c             	add    esp,0xc
c0013422:	c3                   	ret    
c0013423:	90                   	nop

c0013424 <Video::~Video()>:
c0013424:	83 ec 0c             	sub    esp,0xc
c0013427:	83 ec 0c             	sub    esp,0xc
c001342a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001342e:	e8 cd ff ff ff       	call   c0013400 <Video::~Video()>
c0013433:	83 c4 10             	add    esp,0x10
c0013436:	83 ec 08             	sub    esp,0x8
c0013439:	68 64 01 00 00       	push   0x164
c001343e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013442:	e8 a8 bc ff ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c0013447:	83 c4 10             	add    esp,0x10
c001344a:	83 c4 0c             	add    esp,0xc
c001344d:	c3                   	ret    

c001344e <Video::isMonochrome()>:
c001344e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013452:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0013458:	c3                   	ret    
c0013459:	90                   	nop

c001345a <Video::getWidth()>:
c001345a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001345e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0013464:	c3                   	ret    
c0013465:	90                   	nop

c0013466 <Video::getHeight()>:
c0013466:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001346a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013470:	c3                   	ret    
c0013471:	90                   	nop

c0013472 <Video::drawCursor(int, int, unsigned char*, int)>:
c0013472:	55                   	push   ebp
c0013473:	57                   	push   edi
c0013474:	56                   	push   esi
c0013475:	53                   	push   ebx
c0013476:	83 ec 2c             	sub    esp,0x2c
c0013479:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001347d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0013481:	83 f8 01             	cmp    eax,0x1
c0013484:	19 c9                	sbb    ecx,ecx
c0013486:	31 db                	xor    ebx,ebx
c0013488:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001348c:	89 cd                	mov    ebp,ecx
c001348e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0013496:	f7 d5                	not    ebp
c0013498:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001349e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00134a2:	01 d8                	add    eax,ebx
c00134a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00134a8:	56                   	push   esi
c00134a9:	e8 b8 ff ff ff       	call   c0013466 <Video::getHeight()>
c00134ae:	59                   	pop    ecx
c00134af:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00134b3:	7e 70                	jle    c0013525 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00134b5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00134b9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00134bd:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00134c0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00134c4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00134c8:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00134cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00134d3:	89 f8                	mov    eax,edi
c00134d5:	83 c0 20             	add    eax,0x20
c00134d8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134dc:	56                   	push   esi
c00134dd:	e8 78 ff ff ff       	call   c001345a <Video::getWidth()>
c00134e2:	5a                   	pop    edx
c00134e3:	39 c7                	cmp    edi,eax
c00134e5:	7d 34                	jge    c001351b <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00134e7:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00134ec:	74 05                	je     c00134f3 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00134ee:	8b 06                	mov    eax,DWORD PTR [esi]
c00134f0:	55                   	push   ebp
c00134f1:	eb 0d                	jmp    c0013500 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00134f3:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00134f8:	74 12                	je     c001350c <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00134fa:	8b 06                	mov    eax,DWORD PTR [esi]
c00134fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013500:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013504:	57                   	push   edi
c0013505:	56                   	push   esi
c0013506:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013509:	83 c4 10             	add    esp,0x10
c001350c:	47                   	inc    edi
c001350d:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0013511:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0013515:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013519:	75 c1                	jne    c00134dc <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001351b:	43                   	inc    ebx
c001351c:	83 fb 20             	cmp    ebx,0x20
c001351f:	0f 85 79 ff ff ff    	jne    c001349e <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0013525:	83 c4 2c             	add    esp,0x2c
c0013528:	5b                   	pop    ebx
c0013529:	5e                   	pop    esi
c001352a:	5f                   	pop    edi
c001352b:	5d                   	pop    ebp
c001352c:	c3                   	ret    
c001352d:	90                   	nop

c001352e <ACPI::close(int, int, void*)>:
c001352e:	83 ec 1c             	sub    esp,0x1c
c0013531:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0013539:	74 0a                	je     c0013545 <ACPI::close(int, int, void*)+0x17>
c001353b:	b8 00 00 00 00       	mov    eax,0x0
c0013540:	e9 9e 00 00 00       	jmp    c00135e3 <ACPI::close(int, int, void*)+0xb5>
c0013545:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001354a:	75 37                	jne    c0013583 <ACPI::close(int, int, void*)+0x55>
c001354c:	83 ec 0c             	sub    esp,0xc
c001354f:	68 98 22 02 c0       	push   0xc0022298
c0013554:	e8 bc bc ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0013559:	83 c4 10             	add    esp,0x10
c001355c:	a1 28 4e 02 c0       	mov    eax,ds:0xc0024e28
c0013561:	85 c0                	test   eax,eax
c0013563:	74 07                	je     c001356c <ACPI::close(int, int, void*)+0x3e>
c0013565:	a1 28 4e 02 c0       	mov    eax,ds:0xc0024e28
c001356a:	ff d0                	call   eax
c001356c:	83 ec 0c             	sub    esp,0xc
c001356f:	68 6c 23 02 c0       	push   0xc002236c
c0013574:	e8 cb 24 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c0013579:	83 c4 10             	add    esp,0x10
c001357c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013581:	eb 60                	jmp    c00135e3 <ACPI::close(int, int, void*)+0xb5>
c0013583:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0013588:	75 54                	jne    c00135de <ACPI::close(int, int, void*)+0xb0>
c001358a:	a1 24 4e 02 c0       	mov    eax,ds:0xc0024e24
c001358f:	85 c0                	test   eax,eax
c0013591:	74 07                	je     c001359a <ACPI::close(int, int, void*)+0x6c>
c0013593:	a1 24 4e 02 c0       	mov    eax,ds:0xc0024e24
c0013598:	ff d0                	call   eax
c001359a:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001359f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00135a3:	25 ff 00 00 00       	and    eax,0xff
c00135a8:	83 e0 02             	and    eax,0x2
c00135ab:	74 1c                	je     c00135c9 <ACPI::close(int, int, void*)+0x9b>
c00135ad:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00135b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135b8:	89 c2                	mov    edx,eax
c00135ba:	ec                   	in     al,dx
c00135bb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00135bf:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00135c3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00135c7:	eb d6                	jmp    c001359f <ACPI::close(int, int, void*)+0x71>
c00135c9:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00135d0:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00135d5:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00135d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00135dd:	ee                   	out    dx,al
c00135de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00135e3:	83 c4 1c             	add    esp,0x1c
c00135e6:	c3                   	ret    

c00135e7 <findRSDP()>:
c00135e7:	83 ec 1c             	sub    esp,0x1c
c00135ea:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c00135ef:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00135f5:	83 e0 04             	and    eax,0x4
c00135f8:	84 c0                	test   al,al
c00135fa:	75 07                	jne    c0013603 <findRSDP()+0x1c>
c00135fc:	b8 00 00 00 00       	mov    eax,0x0
c0013601:	eb 6a                	jmp    c001366d <findRSDP()+0x86>
c0013603:	a1 f0 47 02 c0       	mov    eax,ds:0xc00247f0
c0013608:	3d ff 07 00 00       	cmp    eax,0x7ff
c001360d:	7f 1b                	jg     c001362a <findRSDP()+0x43>
c001360f:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013614:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001361a:	83 e2 fb             	and    edx,0xfffffffb
c001361d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013623:	b8 00 00 00 00       	mov    eax,0x0
c0013628:	eb 43                	jmp    c001366d <findRSDP()+0x86>
c001362a:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0013632:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001363a:	77 2c                	ja     c0013668 <findRSDP()+0x81>
c001363c:	83 ec 04             	sub    esp,0x4
c001363f:	6a 08                	push   0x8
c0013641:	68 a5 22 02 c0       	push   0xc00222a5
c0013646:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001364a:	e8 dc cf fe ff       	call   c000062b <memcmp>
c001364f:	83 c4 10             	add    esp,0x10
c0013652:	85 c0                	test   eax,eax
c0013654:	0f 94 c0             	sete   al
c0013657:	84 c0                	test   al,al
c0013659:	74 06                	je     c0013661 <findRSDP()+0x7a>
c001365b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001365f:	eb 0c                	jmp    c001366d <findRSDP()+0x86>
c0013661:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0013666:	eb ca                	jmp    c0013632 <findRSDP()+0x4b>
c0013668:	b8 00 00 00 00       	mov    eax,0x0
c001366d:	83 c4 1c             	add    esp,0x1c
c0013670:	c3                   	ret    

c0013671 <loadACPITables(unsigned char*)>:
c0013671:	56                   	push   esi
c0013672:	53                   	push   ebx
c0013673:	83 ec 44             	sub    esp,0x44
c0013676:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001367b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013681:	83 e0 04             	and    eax,0x4
c0013684:	84 c0                	test   al,al
c0013686:	0f 84 05 02 00 00    	je     c0013891 <loadACPITables(unsigned char*)+0x220>
c001368c:	a0 40 50 02 c0       	mov    al,ds:0xc0025040
c0013691:	84 c0                	test   al,al
c0013693:	74 75                	je     c001370a <loadACPITables(unsigned char*)+0x99>
c0013695:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013699:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001369d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136a1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00136a4:	83 e8 24             	sub    eax,0x24
c00136a7:	c1 e8 03             	shr    eax,0x3
c00136aa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00136ae:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00136b6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00136ba:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00136be:	0f 8d b2 00 00 00    	jge    c0013776 <loadACPITables(unsigned char*)+0x105>
c00136c4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00136c8:	83 c0 24             	add    eax,0x24
c00136cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00136cf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00136d3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00136d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00136db:	c1 e0 03             	shl    eax,0x3
c00136de:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00136e2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00136e6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00136e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00136eb:	89 c1                	mov    ecx,eax
c00136ed:	a1 2c 4e 02 c0       	mov    eax,ds:0xc0024e2c
c00136f2:	8d 50 01             	lea    edx,[eax+0x1]
c00136f5:	89 15 2c 4e 02 c0    	mov    DWORD PTR ds:0xc0024e2c,edx
c00136fb:	89 ca                	mov    edx,ecx
c00136fd:	89 14 c5 44 4e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb1bc],edx
c0013704:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0013708:	eb ac                	jmp    c00136b6 <loadACPITables(unsigned char*)+0x45>
c001370a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001370e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013712:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013716:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013719:	83 e8 24             	sub    eax,0x24
c001371c:	c1 e8 02             	shr    eax,0x2
c001371f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013723:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c001372b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001372f:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0013733:	7d 41                	jge    c0013776 <loadACPITables(unsigned char*)+0x105>
c0013735:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013739:	83 c0 24             	add    eax,0x24
c001373c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013740:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013744:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013748:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001374c:	c1 e0 02             	shl    eax,0x2
c001374f:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013753:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013757:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013759:	a1 2c 4e 02 c0       	mov    eax,ds:0xc0024e2c
c001375e:	8d 50 01             	lea    edx,[eax+0x1]
c0013761:	89 15 2c 4e 02 c0    	mov    DWORD PTR ds:0xc0024e2c,edx
c0013767:	89 ca                	mov    edx,ecx
c0013769:	89 14 c5 44 4e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb1bc],edx
c0013770:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0013774:	eb b5                	jmp    c001372b <loadACPITables(unsigned char*)+0xba>
c0013776:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c001377e:	a1 2c 4e 02 c0       	mov    eax,ds:0xc0024e2c
c0013783:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0013787:	0f 8d 05 01 00 00    	jge    c0013892 <loadACPITables(unsigned char*)+0x221>
c001378d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013791:	8b 04 c5 44 4e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb1bc]
c0013798:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001379c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00137a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137a8:	25 ff 0f 00 00       	and    eax,0xfff
c00137ad:	89 c6                	mov    esi,eax
c00137af:	e8 d3 ab ff ff       	call   c000e387 <Virt::getAKernelVAS()>
c00137b4:	89 c3                	mov    ebx,eax
c00137b6:	83 ec 0c             	sub    esp,0xc
c00137b9:	6a 01                	push   0x1
c00137bb:	e8 3a aa ff ff       	call   c000e1fa <Virt::allocateKernelVirtualPages(int)>
c00137c0:	83 c4 10             	add    esp,0x10
c00137c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00137c7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00137cd:	83 ec 0c             	sub    esp,0xc
c00137d0:	6a 01                	push   0x1
c00137d2:	6a 01                	push   0x1
c00137d4:	50                   	push   eax
c00137d5:	52                   	push   edx
c00137d6:	53                   	push   ebx
c00137d7:	e8 dc b3 ff ff       	call   c000ebb8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00137dc:	83 c4 20             	add    esp,0x20
c00137df:	09 f0                	or     eax,esi
c00137e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00137e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00137e9:	c1 e0 03             	shl    eax,0x3
c00137ec:	05 40 4e 02 c0       	add    eax,0xc0024e40
c00137f1:	83 ec 04             	sub    esp,0x4
c00137f4:	6a 04                	push   0x4
c00137f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137fa:	50                   	push   eax
c00137fb:	e8 8e ce fe ff       	call   c000068e <memcpy>
c0013800:	83 c4 10             	add    esp,0x10
c0013803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013807:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001380a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001380e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013812:	05 00 10 00 00       	add    eax,0x1000
c0013817:	c1 e8 0c             	shr    eax,0xc
c001381a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001381e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013822:	89 04 24             	mov    DWORD PTR [esp],eax
c0013825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013829:	25 ff 0f 00 00       	and    eax,0xfff
c001382e:	89 c6                	mov    esi,eax
c0013830:	e8 52 ab ff ff       	call   c000e387 <Virt::getAKernelVAS()>
c0013835:	89 c3                	mov    ebx,eax
c0013837:	83 ec 0c             	sub    esp,0xc
c001383a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001383e:	e8 b7 a9 ff ff       	call   c000e1fa <Virt::allocateKernelVirtualPages(int)>
c0013843:	83 c4 10             	add    esp,0x10
c0013846:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001384a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013850:	83 ec 0c             	sub    esp,0xc
c0013853:	6a 01                	push   0x1
c0013855:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013859:	50                   	push   eax
c001385a:	52                   	push   edx
c001385b:	53                   	push   ebx
c001385c:	e8 57 b3 ff ff       	call   c000ebb8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013861:	83 c4 20             	add    esp,0x20
c0013864:	09 f0                	or     eax,esi
c0013866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001386a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001386d:	83 ec 0c             	sub    esp,0xc
c0013870:	50                   	push   eax
c0013871:	e8 d1 ac ff ff       	call   c000e547 <Virt::freeKernelVirtualPages(unsigned long)>
c0013876:	83 c4 10             	add    esp,0x10
c0013879:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001387d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013881:	89 14 c5 44 4e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb1bc],edx
c0013888:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c001388c:	e9 ed fe ff ff       	jmp    c001377e <loadACPITables(unsigned char*)+0x10d>
c0013891:	90                   	nop
c0013892:	83 c4 44             	add    esp,0x44
c0013895:	5b                   	pop    ebx
c0013896:	5e                   	pop    esi
c0013897:	c3                   	ret    

c0013898 <findRSDT(unsigned char*)>:
c0013898:	56                   	push   esi
c0013899:	53                   	push   ebx
c001389a:	83 ec 44             	sub    esp,0x44
c001389d:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c00138a2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00138a8:	83 e0 04             	and    eax,0x4
c00138ab:	84 c0                	test   al,al
c00138ad:	75 0a                	jne    c00138b9 <findRSDT(unsigned char*)+0x21>
c00138af:	b8 00 00 00 00       	mov    eax,0x0
c00138b4:	e9 f7 00 00 00       	jmp    c00139b0 <findRSDT(unsigned char*)+0x118>
c00138b9:	83 ec 04             	sub    esp,0x4
c00138bc:	6a 24                	push   0x24
c00138be:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00138c2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00138c6:	50                   	push   eax
c00138c7:	e8 c2 cd fe ff       	call   c000068e <memcpy>
c00138cc:	83 c4 10             	add    esp,0x10
c00138cf:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00138d3:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00138d7:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00138df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00138e3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00138e7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00138eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00138ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00138f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00138f7:	25 ff 0f 00 00       	and    eax,0xfff
c00138fc:	89 c6                	mov    esi,eax
c00138fe:	e8 84 aa ff ff       	call   c000e387 <Virt::getAKernelVAS()>
c0013903:	89 c3                	mov    ebx,eax
c0013905:	83 ec 0c             	sub    esp,0xc
c0013908:	6a 02                	push   0x2
c001390a:	e8 eb a8 ff ff       	call   c000e1fa <Virt::allocateKernelVirtualPages(int)>
c001390f:	83 c4 10             	add    esp,0x10
c0013912:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013916:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001391c:	83 ec 0c             	sub    esp,0xc
c001391f:	6a 01                	push   0x1
c0013921:	6a 02                	push   0x2
c0013923:	50                   	push   eax
c0013924:	52                   	push   edx
c0013925:	53                   	push   ebx
c0013926:	e8 8d b2 ff ff       	call   c000ebb8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001392b:	83 c4 20             	add    esp,0x20
c001392e:	09 f0                	or     eax,esi
c0013930:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0013934:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013938:	25 ff 0f 00 00       	and    eax,0xfff
c001393d:	89 c6                	mov    esi,eax
c001393f:	e8 43 aa ff ff       	call   c000e387 <Virt::getAKernelVAS()>
c0013944:	89 c3                	mov    ebx,eax
c0013946:	83 ec 0c             	sub    esp,0xc
c0013949:	6a 02                	push   0x2
c001394b:	e8 aa a8 ff ff       	call   c000e1fa <Virt::allocateKernelVirtualPages(int)>
c0013950:	83 c4 10             	add    esp,0x10
c0013953:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013957:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001395d:	83 ec 0c             	sub    esp,0xc
c0013960:	6a 01                	push   0x1
c0013962:	6a 02                	push   0x2
c0013964:	50                   	push   eax
c0013965:	52                   	push   edx
c0013966:	53                   	push   ebx
c0013967:	e8 4c b2 ff ff       	call   c000ebb8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001396c:	83 c4 20             	add    esp,0x20
c001396f:	09 f0                	or     eax,esi
c0013971:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013975:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c001397a:	75 11                	jne    c001398d <findRSDT(unsigned char*)+0xf5>
c001397c:	c6 05 40 50 02 c0 00 	mov    BYTE PTR ds:0xc0025040,0x0
c0013983:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013987:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001398b:	eb 1f                	jmp    c00139ac <findRSDT(unsigned char*)+0x114>
c001398d:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0013992:	75 11                	jne    c00139a5 <findRSDT(unsigned char*)+0x10d>
c0013994:	c6 05 40 50 02 c0 01 	mov    BYTE PTR ds:0xc0025040,0x1
c001399b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001399f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00139a3:	eb 07                	jmp    c00139ac <findRSDT(unsigned char*)+0x114>
c00139a5:	b8 00 00 00 00       	mov    eax,0x0
c00139aa:	eb 04                	jmp    c00139b0 <findRSDT(unsigned char*)+0x118>
c00139ac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00139b0:	83 c4 44             	add    esp,0x44
c00139b3:	5b                   	pop    ebx
c00139b4:	5e                   	pop    esi
c00139b5:	c3                   	ret    

c00139b6 <findDataTable(unsigned char*, char*)>:
c00139b6:	83 ec 1c             	sub    esp,0x1c
c00139b9:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c00139be:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00139c4:	83 e0 04             	and    eax,0x4
c00139c7:	84 c0                	test   al,al
c00139c9:	75 07                	jne    c00139d2 <findDataTable(unsigned char*, char*)+0x1c>
c00139cb:	b8 00 00 00 00       	mov    eax,0x0
c00139d0:	eb 7c                	jmp    c0013a4e <findDataTable(unsigned char*, char*)+0x98>
c00139d2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00139da:	a1 2c 4e 02 c0       	mov    eax,ds:0xc0024e2c
c00139df:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00139e3:	7d 3a                	jge    c0013a1f <findDataTable(unsigned char*, char*)+0x69>
c00139e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139e9:	c1 e0 03             	shl    eax,0x3
c00139ec:	05 40 4e 02 c0       	add    eax,0xc0024e40
c00139f1:	83 ec 04             	sub    esp,0x4
c00139f4:	6a 04                	push   0x4
c00139f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139fa:	50                   	push   eax
c00139fb:	e8 2b cc fe ff       	call   c000062b <memcmp>
c0013a00:	83 c4 10             	add    esp,0x10
c0013a03:	85 c0                	test   eax,eax
c0013a05:	0f 94 c0             	sete   al
c0013a08:	84 c0                	test   al,al
c0013a0a:	74 0d                	je     c0013a19 <findDataTable(unsigned char*, char*)+0x63>
c0013a0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a10:	8b 04 c5 44 4e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb1bc]
c0013a17:	eb 35                	jmp    c0013a4e <findDataTable(unsigned char*, char*)+0x98>
c0013a19:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0013a1d:	eb bb                	jmp    c00139da <findDataTable(unsigned char*, char*)+0x24>
c0013a1f:	a0 40 50 02 c0       	mov    al,ds:0xc0025040
c0013a24:	84 c0                	test   al,al
c0013a26:	74 07                	je     c0013a2f <findDataTable(unsigned char*, char*)+0x79>
c0013a28:	b8 58 00 00 00       	mov    eax,0x58
c0013a2d:	eb 05                	jmp    c0013a34 <findDataTable(unsigned char*, char*)+0x7e>
c0013a2f:	b8 52 00 00 00       	mov    eax,0x52
c0013a34:	83 ec 04             	sub    esp,0x4
c0013a37:	50                   	push   eax
c0013a38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a3c:	68 90 23 02 c0       	push   0xc0022390
c0013a41:	e8 cf b7 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0013a46:	83 c4 10             	add    esp,0x10
c0013a49:	b8 00 00 00 00       	mov    eax,0x0
c0013a4e:	83 c4 1c             	add    esp,0x1c
c0013a51:	c3                   	ret    

c0013a52 <scanMADT()>:
c0013a52:	83 ec 2c             	sub    esp,0x2c
c0013a55:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013a5a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013a60:	83 e0 04             	and    eax,0x4
c0013a63:	84 c0                	test   al,al
c0013a65:	0f 84 9a 03 00 00    	je     c0013e05 <scanMADT()+0x3b3>
c0013a6b:	e8 77 fb ff ff       	call   c00135e7 <findRSDP()>
c0013a70:	a3 4c 50 02 c0       	mov    ds:0xc002504c,eax
c0013a75:	a1 4c 50 02 c0       	mov    eax,ds:0xc002504c
c0013a7a:	85 c0                	test   eax,eax
c0013a7c:	75 19                	jne    c0013a97 <scanMADT()+0x45>
c0013a7e:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013a83:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013a89:	83 e2 fb             	and    edx,0xfffffffb
c0013a8c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013a92:	e9 72 03 00 00       	jmp    c0013e09 <scanMADT()+0x3b7>
c0013a97:	a1 4c 50 02 c0       	mov    eax,ds:0xc002504c
c0013a9c:	83 ec 0c             	sub    esp,0xc
c0013a9f:	50                   	push   eax
c0013aa0:	e8 f3 fd ff ff       	call   c0013898 <findRSDT(unsigned char*)>
c0013aa5:	83 c4 10             	add    esp,0x10
c0013aa8:	a3 48 50 02 c0       	mov    ds:0xc0025048,eax
c0013aad:	a1 48 50 02 c0       	mov    eax,ds:0xc0025048
c0013ab2:	85 c0                	test   eax,eax
c0013ab4:	75 19                	jne    c0013acf <scanMADT()+0x7d>
c0013ab6:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013abb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013ac1:	83 e2 fb             	and    edx,0xfffffffb
c0013ac4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013aca:	e9 3a 03 00 00       	jmp    c0013e09 <scanMADT()+0x3b7>
c0013acf:	a1 48 50 02 c0       	mov    eax,ds:0xc0025048
c0013ad4:	83 ec 0c             	sub    esp,0xc
c0013ad7:	50                   	push   eax
c0013ad8:	e8 94 fb ff ff       	call   c0013671 <loadACPITables(unsigned char*)>
c0013add:	83 c4 10             	add    esp,0x10
c0013ae0:	a1 48 50 02 c0       	mov    eax,ds:0xc0025048
c0013ae5:	83 ec 08             	sub    esp,0x8
c0013ae8:	68 ae 22 02 c0       	push   0xc00222ae
c0013aed:	50                   	push   eax
c0013aee:	e8 c3 fe ff ff       	call   c00139b6 <findDataTable(unsigned char*, char*)>
c0013af3:	83 c4 10             	add    esp,0x10
c0013af6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013afa:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013aff:	75 19                	jne    c0013b1a <scanMADT()+0xc8>
c0013b01:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013b06:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013b0c:	83 e2 fe             	and    edx,0xfffffffe
c0013b0f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013b15:	e9 ef 02 00 00       	jmp    c0013e09 <scanMADT()+0x3b7>
c0013b1a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013b22:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013b29:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0013b2d:	0f 87 d6 02 00 00    	ja     c0013e09 <scanMADT()+0x3b7>
c0013b33:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0013b3b:	0f 87 c8 02 00 00    	ja     c0013e09 <scanMADT()+0x3b7>
c0013b41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b45:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b4d:	8d 50 01             	lea    edx,[eax+0x1]
c0013b50:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b54:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b58:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013b5c:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0013b60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b64:	8d 50 01             	lea    edx,[eax+0x1]
c0013b67:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b6b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b6f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013b73:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0013b77:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0013b7c:	0f 86 86 02 00 00    	jbe    c0013e08 <scanMADT()+0x3b6>
c0013b82:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0013b87:	75 5b                	jne    c0013be4 <scanMADT()+0x192>
c0013b89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b8d:	8d 50 01             	lea    edx,[eax+0x1]
c0013b90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b94:	8a 15 80 51 02 c0    	mov    dl,BYTE PTR ds:0xc0025180
c0013b9a:	81 e2 ff 00 00 00    	and    edx,0xff
c0013ba0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013ba4:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013ba8:	88 82 c0 51 02 c0    	mov    BYTE PTR [edx-0x3ffdae40],al
c0013bae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013bb2:	8d 42 01             	lea    eax,[edx+0x1]
c0013bb5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013bb9:	a0 80 51 02 c0       	mov    al,ds:0xc0025180
c0013bbe:	8d 48 01             	lea    ecx,[eax+0x1]
c0013bc1:	88 0d 80 51 02 c0    	mov    BYTE PTR ds:0xc0025180,cl
c0013bc7:	25 ff 00 00 00       	and    eax,0xff
c0013bcc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013bd0:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c0013bd4:	88 90 a0 51 02 c0    	mov    BYTE PTR [eax-0x3ffdae60],dl
c0013bda:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013bdf:	e9 0a 02 00 00       	jmp    c0013dee <scanMADT()+0x39c>
c0013be4:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0013be9:	0f 85 29 01 00 00    	jne    c0013d18 <scanMADT()+0x2c6>
c0013bef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bf3:	8d 50 01             	lea    edx,[eax+0x1]
c0013bf6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013bfa:	8a 15 50 50 02 c0    	mov    dl,BYTE PTR ds:0xc0025050
c0013c00:	81 e2 ff 00 00 00    	and    edx,0xff
c0013c06:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013c0a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013c0e:	88 82 60 50 02 c0    	mov    BYTE PTR [edx-0x3ffdafa0],al
c0013c14:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0013c18:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c20:	01 d0                	add    eax,edx
c0013c22:	83 c0 2c             	add    eax,0x2c
c0013c25:	8a 00                	mov    al,BYTE PTR [eax]
c0013c27:	31 d2                	xor    edx,edx
c0013c29:	88 c2                	mov    dl,al
c0013c2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c2f:	8d 48 01             	lea    ecx,[eax+0x1]
c0013c32:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c36:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013c3a:	25 ff 00 00 00       	and    eax,0xff
c0013c3f:	c1 e0 08             	shl    eax,0x8
c0013c42:	89 d1                	mov    ecx,edx
c0013c44:	09 c1                	or     ecx,eax
c0013c46:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c4a:	8d 50 02             	lea    edx,[eax+0x2]
c0013c4d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c51:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c55:	25 ff 00 00 00       	and    eax,0xff
c0013c5a:	c1 e0 10             	shl    eax,0x10
c0013c5d:	09 c1                	or     ecx,eax
c0013c5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c63:	8d 50 03             	lea    edx,[eax+0x3]
c0013c66:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c6a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c6e:	25 ff 00 00 00       	and    eax,0xff
c0013c73:	c1 e0 18             	shl    eax,0x18
c0013c76:	09 c1                	or     ecx,eax
c0013c78:	89 ca                	mov    edx,ecx
c0013c7a:	a0 50 50 02 c0       	mov    al,ds:0xc0025050
c0013c7f:	25 ff 00 00 00       	and    eax,0xff
c0013c84:	89 14 85 80 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf80],edx
c0013c8b:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013c90:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c98:	01 d0                	add    eax,edx
c0013c9a:	83 c0 2c             	add    eax,0x2c
c0013c9d:	8a 00                	mov    al,BYTE PTR [eax]
c0013c9f:	31 d2                	xor    edx,edx
c0013ca1:	88 c2                	mov    dl,al
c0013ca3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ca7:	8d 48 01             	lea    ecx,[eax+0x1]
c0013caa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cae:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013cb2:	25 ff 00 00 00       	and    eax,0xff
c0013cb7:	c1 e0 08             	shl    eax,0x8
c0013cba:	89 d1                	mov    ecx,edx
c0013cbc:	09 c1                	or     ecx,eax
c0013cbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cc2:	8d 50 02             	lea    edx,[eax+0x2]
c0013cc5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cc9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013ccd:	25 ff 00 00 00       	and    eax,0xff
c0013cd2:	c1 e0 10             	shl    eax,0x10
c0013cd5:	09 c1                	or     ecx,eax
c0013cd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cdb:	8d 50 03             	lea    edx,[eax+0x3]
c0013cde:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ce2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013ce6:	25 ff 00 00 00       	and    eax,0xff
c0013ceb:	c1 e0 18             	shl    eax,0x18
c0013cee:	09 c1                	or     ecx,eax
c0013cf0:	89 ca                	mov    edx,ecx
c0013cf2:	a0 50 50 02 c0       	mov    al,ds:0xc0025050
c0013cf7:	25 ff 00 00 00       	and    eax,0xff
c0013cfc:	89 14 85 00 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf00],edx
c0013d03:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013d08:	a0 50 50 02 c0       	mov    al,ds:0xc0025050
c0013d0d:	40                   	inc    eax
c0013d0e:	a2 50 50 02 c0       	mov    ds:0xc0025050,al
c0013d13:	e9 d6 00 00 00       	jmp    c0013dee <scanMADT()+0x39c>
c0013d18:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0013d1d:	0f 85 b1 00 00 00    	jne    c0013dd4 <scanMADT()+0x382>
c0013d23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d27:	8d 50 01             	lea    edx,[eax+0x1]
c0013d2a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013d2e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d32:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013d36:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0013d3a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d3e:	8d 50 01             	lea    edx,[eax+0x1]
c0013d41:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013d45:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d49:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013d4d:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013d51:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d59:	01 d0                	add    eax,edx
c0013d5b:	83 c0 2c             	add    eax,0x2c
c0013d5e:	8a 00                	mov    al,BYTE PTR [eax]
c0013d60:	31 d2                	xor    edx,edx
c0013d62:	88 c2                	mov    dl,al
c0013d64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d68:	8d 48 01             	lea    ecx,[eax+0x1]
c0013d6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d6f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013d73:	25 ff 00 00 00       	and    eax,0xff
c0013d78:	c1 e0 08             	shl    eax,0x8
c0013d7b:	89 d1                	mov    ecx,edx
c0013d7d:	09 c1                	or     ecx,eax
c0013d7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d83:	8d 50 02             	lea    edx,[eax+0x2]
c0013d86:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d8a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013d8e:	25 ff 00 00 00       	and    eax,0xff
c0013d93:	c1 e0 10             	shl    eax,0x10
c0013d96:	09 c1                	or     ecx,eax
c0013d98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d9c:	8d 50 03             	lea    edx,[eax+0x3]
c0013d9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013da3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013da7:	25 ff 00 00 00       	and    eax,0xff
c0013dac:	c1 e0 18             	shl    eax,0x18
c0013daf:	09 c8                	or     eax,ecx
c0013db1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013db5:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013dba:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0013dbf:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0013dc3:	25 ff 00 00 00       	and    eax,0xff
c0013dc8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013dcc:	88 90 00 3f 02 c0    	mov    BYTE PTR [eax-0x3ffdc100],dl
c0013dd2:	eb 1a                	jmp    c0013dee <scanMADT()+0x39c>
c0013dd4:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0013dd9:	75 07                	jne    c0013de2 <scanMADT()+0x390>
c0013ddb:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013de0:	eb 0c                	jmp    c0013dee <scanMADT()+0x39c>
c0013de2:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0013de7:	75 05                	jne    c0013dee <scanMADT()+0x39c>
c0013de9:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0013dee:	8a 44 24 12          	mov    al,BYTE PTR [esp+0x12]
c0013df2:	31 d2                	xor    edx,edx
c0013df4:	88 c2                	mov    dl,al
c0013df6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013dfa:	01 d0                	add    eax,edx
c0013dfc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e00:	e9 1d fd ff ff       	jmp    c0013b22 <scanMADT()+0xd0>
c0013e05:	90                   	nop
c0013e06:	eb 01                	jmp    c0013e09 <scanMADT()+0x3b7>
c0013e08:	90                   	nop
c0013e09:	83 c4 2c             	add    esp,0x2c
c0013e0c:	c3                   	ret    
c0013e0d:	90                   	nop

c0013e0e <ACPI::ACPI()>:
c0013e0e:	83 ec 0c             	sub    esp,0xc
c0013e11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e15:	83 ec 08             	sub    esp,0x8
c0013e18:	68 b3 22 02 c0       	push   0xc00222b3
c0013e1d:	50                   	push   eax
c0013e1e:	e8 f7 c9 ff ff       	call   c001081a <Device::Device(char const*)>
c0013e23:	83 c4 10             	add    esp,0x10
c0013e26:	ba 5c 24 02 c0       	mov    edx,0xc002245c
c0013e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e2f:	89 10                	mov    DWORD PTR [eax],edx
c0013e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e35:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0013e3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e40:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0013e4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e4e:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0013e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e5c:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0013e63:	e8 ea fb ff ff       	call   c0013a52 <scanMADT()>
c0013e68:	90                   	nop
c0013e69:	83 c4 0c             	add    esp,0xc
c0013e6c:	c3                   	ret    
c0013e6d:	90                   	nop

c0013e6e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0013e6e:	83 ec 2c             	sub    esp,0x2c
c0013e71:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013e75:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013e79:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013e7d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013e81:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013e86:	88 d0                	mov    al,dl
c0013e88:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013e8c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0013e91:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013e99:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e9d:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013ea3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013ea7:	0f 8d 97 00 00 00    	jge    c0013f44 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0013ead:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013eb1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013eb5:	83 c2 2a             	add    edx,0x2a
c0013eb8:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0013ebc:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0013ec1:	75 78                	jne    c0013f3b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013ec3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013ec7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ecb:	83 c2 2a             	add    edx,0x2a
c0013ece:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0013ed2:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0013ed6:	75 63                	jne    c0013f3b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013ed8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013edd:	74 3a                	je     c0013f19 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0013edf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013ee3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ee7:	83 c2 2a             	add    edx,0x2a
c0013eea:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0013eee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ef2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013ef5:	39 c2                	cmp    edx,eax
c0013ef7:	74 10                	je     c0013f09 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0013ef9:	83 ec 0c             	sub    esp,0xc
c0013efc:	68 c0 23 02 c0       	push   0xc00223c0
c0013f01:	e8 3e 1b 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c0013f06:	83 c4 10             	add    esp,0x10
c0013f09:	83 ec 0c             	sub    esp,0xc
c0013f0c:	68 b8 22 02 c0       	push   0xc00222b8
c0013f11:	e8 2e 1b 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c0013f16:	83 c4 10             	add    esp,0x10
c0013f19:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013f1d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013f21:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013f25:	83 c2 2a             	add    edx,0x2a
c0013f28:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0013f2c:	8b 02                	mov    eax,DWORD PTR [edx]
c0013f2e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0013f31:	89 01                	mov    DWORD PTR [ecx],eax
c0013f33:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0013f36:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0013f3b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0013f3f:	e9 55 ff ff ff       	jmp    c0013e99 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0013f44:	90                   	nop
c0013f45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f49:	83 c4 2c             	add    esp,0x2c
c0013f4c:	c2 04 00             	ret    0x4
c0013f4f:	90                   	nop

c0013f50 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0013f50:	56                   	push   esi
c0013f51:	53                   	push   ebx
c0013f52:	83 ec 14             	sub    esp,0x14
c0013f55:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013f59:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013f5d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013f61:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013f66:	88 c8                	mov    al,cl
c0013f68:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013f6c:	88 d0                	mov    al,dl
c0013f6e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013f72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f76:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0013f7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f80:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0013f86:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0013f8a:	31 c9                	xor    ecx,ecx
c0013f8c:	88 c1                	mov    cl,al
c0013f8e:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013f92:	31 d2                	xor    edx,edx
c0013f94:	88 c2                	mov    dl,al
c0013f96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013f9a:	25 ff ff 00 00       	and    eax,0xffff
c0013f9f:	83 ec 04             	sub    esp,0x4
c0013fa2:	56                   	push   esi
c0013fa3:	53                   	push   ebx
c0013fa4:	51                   	push   ecx
c0013fa5:	52                   	push   edx
c0013fa6:	50                   	push   eax
c0013fa7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013fab:	68 f0 23 02 c0       	push   0xc00223f0
c0013fb0:	e8 60 b2 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0013fb5:	83 c4 20             	add    esp,0x20
c0013fb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fbc:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013fc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fc6:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013fc9:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013fcd:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0013fd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fd5:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013fdb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013fdf:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0013fe2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013fe6:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0013feb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fef:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013ff5:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013ff9:	8d 48 01             	lea    ecx,[eax+0x1]
c0013ffc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014000:	83 c2 2a             	add    edx,0x2a
c0014003:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0014007:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001400b:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0014011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014015:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0014018:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001401c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0014020:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014024:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001402a:	8d 50 01             	lea    edx,[eax+0x1]
c001402d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014031:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0014037:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001403b:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0014041:	3d 00 08 00 00       	cmp    eax,0x800
c0014046:	75 10                	jne    c0014058 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0x108>
c0014048:	83 ec 0c             	sub    esp,0xc
c001404b:	68 c7 22 02 c0       	push   0xc00222c7
c0014050:	e8 ef 19 00 00       	call   c0015a44 <Krnl::panic(char const*)>
c0014055:	83 c4 10             	add    esp,0x10
c0014058:	90                   	nop
c0014059:	83 c4 14             	add    esp,0x14
c001405c:	5b                   	pop    ebx
c001405d:	5e                   	pop    esi
c001405e:	c3                   	ret    
c001405f:	90                   	nop

c0014060 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0014060:	b8 00 00 00 00       	mov    eax,0x0
c0014065:	c3                   	ret    

c0014066 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0014066:	83 ec 1c             	sub    esp,0x1c
c0014069:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001406d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0014070:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014074:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c001407a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001407e:	25 ff 00 00 00       	and    eax,0xff
c0014083:	83 ec 08             	sub    esp,0x8
c0014086:	50                   	push   eax
c0014087:	52                   	push   edx
c0014088:	e8 63 75 ff ff       	call   c000b5f0 <Computer::readCMOS(unsigned char)>
c001408d:	83 c4 10             	add    esp,0x10
c0014090:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0014094:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c001409a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001409e:	25 ff 00 00 00       	and    eax,0xff
c00140a3:	83 ec 04             	sub    esp,0x4
c00140a6:	6a 01                	push   0x1
c00140a8:	50                   	push   eax
c00140a9:	52                   	push   edx
c00140aa:	e8 59 76 ff ff       	call   c000b708 <Computer::writeCMOS(unsigned char, unsigned char)>
c00140af:	83 c4 10             	add    esp,0x10
c00140b2:	90                   	nop
c00140b3:	83 c4 1c             	add    esp,0x1c
c00140b6:	c3                   	ret    
c00140b7:	90                   	nop

c00140b8 <ACPI::open(int, int, void*)>:
c00140b8:	53                   	push   ebx
c00140b9:	83 ec 18             	sub    esp,0x18
c00140bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140c0:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00140c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140cb:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00140d1:	84 c0                	test   al,al
c00140d3:	74 60                	je     c0014135 <ACPI::open(int, int, void*)+0x7d>
c00140d5:	83 ec 0c             	sub    esp,0xc
c00140d8:	68 58 01 00 00       	push   0x158
c00140dd:	e8 fe af ff ff       	call   c000f0e0 <operator new(unsigned long)>
c00140e2:	83 c4 10             	add    esp,0x10
c00140e5:	89 c3                	mov    ebx,eax
c00140e7:	83 ec 0c             	sub    esp,0xc
c00140ea:	53                   	push   ebx
c00140eb:	e8 a8 80 00 00       	call   c001c198 <PCI::PCI()>
c00140f0:	83 c4 10             	add    esp,0x10
c00140f3:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00140f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140fb:	83 ec 08             	sub    esp,0x8
c00140fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014102:	50                   	push   eax
c0014103:	e8 22 c5 ff ff       	call   c001062a <Device::addChild(Device*)>
c0014108:	83 c4 10             	add    esp,0x10
c001410b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001410f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014111:	83 c0 08             	add    eax,0x8
c0014114:	8b 00                	mov    eax,DWORD PTR [eax]
c0014116:	6a 00                	push   0x0
c0014118:	6a 00                	push   0x0
c001411a:	6a 00                	push   0x0
c001411c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014120:	ff d0                	call   eax
c0014122:	83 c4 10             	add    esp,0x10
c0014125:	83 ec 0c             	sub    esp,0xc
c0014128:	68 e4 22 02 c0       	push   0xc00222e4
c001412d:	e8 e3 b0 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0014132:	83 c4 10             	add    esp,0x10
c0014135:	83 ec 0c             	sub    esp,0xc
c0014138:	68 ef 22 02 c0       	push   0xc00222ef
c001413d:	e8 43 38 00 00       	call   c0017985 <Thr::loadKernelSymbolTable(char const*)>
c0014142:	83 c4 10             	add    esp,0x10
c0014145:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c001414b:	83 ec 08             	sub    esp,0x8
c001414e:	6a 01                	push   0x1
c0014150:	68 0d 23 02 c0       	push   0xc002230d
c0014155:	e8 0d 43 00 00       	call   c0018467 <Thr::loadDLL(char const*, bool)>
c001415a:	83 c4 10             	add    esp,0x10
c001415d:	83 ec 08             	sub    esp,0x8
c0014160:	53                   	push   ebx
c0014161:	50                   	push   eax
c0014162:	e8 c6 44 00 00       	call   c001862d <Thr::executeDLL(unsigned long, void*)>
c0014167:	83 c4 10             	add    esp,0x10
c001416a:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c0014170:	83 ec 08             	sub    esp,0x8
c0014173:	6a 01                	push   0x1
c0014175:	68 2a 23 02 c0       	push   0xc002232a
c001417a:	e8 e8 42 00 00       	call   c0018467 <Thr::loadDLL(char const*, bool)>
c001417f:	83 c4 10             	add    esp,0x10
c0014182:	83 ec 08             	sub    esp,0x8
c0014185:	53                   	push   ebx
c0014186:	50                   	push   eax
c0014187:	e8 a1 44 00 00       	call   c001862d <Thr::executeDLL(unsigned long, void*)>
c001418c:	83 c4 10             	add    esp,0x10
c001418f:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0014194:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001419a:	83 e0 04             	and    eax,0x4
c001419d:	84 c0                	test   al,al
c001419f:	0f 84 cf 00 00 00    	je     c0014274 <ACPI::open(int, int, void*)+0x1bc>
c00141a5:	83 ec 0c             	sub    esp,0xc
c00141a8:	68 14 01 00 00       	push   0x114
c00141ad:	e8 2e af ff ff       	call   c000f0e0 <operator new(unsigned long)>
c00141b2:	83 c4 10             	add    esp,0x10
c00141b5:	89 c3                	mov    ebx,eax
c00141b7:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00141bc:	83 ec 04             	sub    esp,0x4
c00141bf:	50                   	push   eax
c00141c0:	68 47 23 02 c0       	push   0xc0022347
c00141c5:	53                   	push   ebx
c00141c6:	e8 81 b5 ff ff       	call   c000f74c <File::File(char const*, Process*)>
c00141cb:	83 c4 10             	add    esp,0x10
c00141ce:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00141d2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00141d7:	74 17                	je     c00141f0 <ACPI::open(int, int, void*)+0x138>
c00141d9:	83 ec 0c             	sub    esp,0xc
c00141dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00141e0:	e8 39 b8 ff ff       	call   c000fa1e <File::exists()>
c00141e5:	83 c4 10             	add    esp,0x10
c00141e8:	84 c0                	test   al,al
c00141ea:	74 04                	je     c00141f0 <ACPI::open(int, int, void*)+0x138>
c00141ec:	b0 01                	mov    al,0x1
c00141ee:	eb 02                	jmp    c00141f2 <ACPI::open(int, int, void*)+0x13a>
c00141f0:	b0 00                	mov    al,0x0
c00141f2:	84 c0                	test   al,al
c00141f4:	74 25                	je     c001421b <ACPI::open(int, int, void*)+0x163>
c00141f6:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c00141fc:	83 ec 08             	sub    esp,0x8
c00141ff:	6a 01                	push   0x1
c0014201:	68 47 23 02 c0       	push   0xc0022347
c0014206:	e8 5c 42 00 00       	call   c0018467 <Thr::loadDLL(char const*, bool)>
c001420b:	83 c4 10             	add    esp,0x10
c001420e:	83 ec 08             	sub    esp,0x8
c0014211:	53                   	push   ebx
c0014212:	50                   	push   eax
c0014213:	e8 15 44 00 00       	call   c001862d <Thr::executeDLL(unsigned long, void*)>
c0014218:	83 c4 10             	add    esp,0x10
c001421b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014220:	74 1e                	je     c0014240 <ACPI::open(int, int, void*)+0x188>
c0014222:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014227:	74 17                	je     c0014240 <ACPI::open(int, int, void*)+0x188>
c0014229:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001422d:	8b 00                	mov    eax,DWORD PTR [eax]
c001422f:	83 c0 08             	add    eax,0x8
c0014232:	8b 00                	mov    eax,DWORD PTR [eax]
c0014234:	83 ec 0c             	sub    esp,0xc
c0014237:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001423b:	ff d0                	call   eax
c001423d:	83 c4 10             	add    esp,0x10
c0014240:	a1 48 50 02 c0       	mov    eax,ds:0xc0025048
c0014245:	83 ec 08             	sub    esp,0x8
c0014248:	68 64 23 02 c0       	push   0xc0022364
c001424d:	50                   	push   eax
c001424e:	e8 63 f7 ff ff       	call   c00139b6 <findDataTable(unsigned char*, char*)>
c0014253:	83 c4 10             	add    esp,0x10
c0014256:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001425a:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001425f:	74 13                	je     c0014274 <ACPI::open(int, int, void*)+0x1bc>
c0014261:	83 ec 08             	sub    esp,0x8
c0014264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014268:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001426c:	e8 f5 fd ff ff       	call   c0014066 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0014271:	83 c4 10             	add    esp,0x10
c0014274:	b8 00 00 00 00       	mov    eax,0x0
c0014279:	83 c4 18             	add    esp,0x18
c001427c:	5b                   	pop    ebx
c001427d:	c3                   	ret    

c001427e <ACPI::sleep()>:
c001427e:	83 ec 0c             	sub    esp,0xc
c0014281:	a1 20 4e 02 c0       	mov    eax,ds:0xc0024e20
c0014286:	85 c0                	test   eax,eax
c0014288:	74 07                	je     c0014291 <ACPI::sleep()+0x13>
c001428a:	a1 20 4e 02 c0       	mov    eax,ds:0xc0024e20
c001428f:	ff d0                	call   eax
c0014291:	90                   	nop
c0014292:	83 c4 0c             	add    esp,0xc
c0014295:	c3                   	ret    

c0014296 <CPU::close(int, int, void*)>:
c0014296:	31 c0                	xor    eax,eax
c0014298:	c3                   	ret    

c0014299 <lookupAMDCPUName(unsigned char, unsigned char)>:
c0014299:	55                   	push   ebp
c001429a:	57                   	push   edi
c001429b:	56                   	push   esi
c001429c:	53                   	push   ebx
c001429d:	51                   	push   ecx
c001429e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00142a2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00142a6:	89 d6                	mov    esi,edx
c00142a8:	89 cd                	mov    ebp,ecx
c00142aa:	80 fa 04             	cmp    dl,0x4
c00142ad:	75 28                	jne    c00142d7 <lookupAMDCPUName(unsigned char, unsigned char)+0x3e>
c00142af:	8d 41 f9             	lea    eax,[ecx-0x7]
c00142b2:	3c 03                	cmp    al,0x3
c00142b4:	0f 86 64 01 00 00    	jbe    c001441e <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c00142ba:	80 f9 03             	cmp    cl,0x3
c00142bd:	0f 84 5b 01 00 00    	je     c001441e <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c00142c3:	8d 79 f2             	lea    edi,[ecx-0xe]
c00142c6:	b8 d0 40 02 c0       	mov    eax,0xc00240d0
c00142cb:	89 fb                	mov    ebx,edi
c00142cd:	80 fb 01             	cmp    bl,0x1
c00142d0:	77 4e                	ja     c0014320 <lookupAMDCPUName(unsigned char, unsigned char)+0x87>
c00142d2:	e9 61 01 00 00       	jmp    c0014438 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142d7:	80 fa 05             	cmp    dl,0x5
c00142da:	75 4d                	jne    c0014329 <lookupAMDCPUName(unsigned char, unsigned char)+0x90>
c00142dc:	b8 e0 40 02 c0       	mov    eax,0xc00240e0
c00142e1:	80 f9 03             	cmp    cl,0x3
c00142e4:	0f 86 4e 01 00 00    	jbe    c0014438 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142ea:	8d 79 fa             	lea    edi,[ecx-0x6]
c00142ed:	b8 f0 40 02 c0       	mov    eax,0xc00240f0
c00142f2:	89 fb                	mov    ebx,edi
c00142f4:	80 fb 01             	cmp    bl,0x1
c00142f7:	0f 86 3b 01 00 00    	jbe    c0014438 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142fd:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0014302:	80 f9 08             	cmp    cl,0x8
c0014305:	0f 84 2d 01 00 00    	je     c0014438 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001430b:	89 cf                	mov    edi,ecx
c001430d:	b8 10 41 02 c0       	mov    eax,0xc0024110
c0014312:	83 e7 fb             	and    edi,0xfffffffb
c0014315:	89 fb                	mov    ebx,edi
c0014317:	80 fb 09             	cmp    bl,0x9
c001431a:	0f 84 18 01 00 00    	je     c0014438 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014320:	31 c0                	xor    eax,eax
c0014322:	89 eb                	mov    ebx,ebp
c0014324:	0f b6 fb             	movzx  edi,bl
c0014327:	eb 30                	jmp    c0014359 <lookupAMDCPUName(unsigned char, unsigned char)+0xc0>
c0014329:	31 c0                	xor    eax,eax
c001432b:	80 fa 06             	cmp    dl,0x6
c001432e:	75 f2                	jne    c0014322 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0014330:	80 f9 0a             	cmp    cl,0xa
c0014333:	77 ed                	ja     c0014322 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0014335:	bf de 05 00 00       	mov    edi,0x5de
c001433a:	0f a3 cf             	bt     edi,ecx
c001433d:	73 e3                	jae    c0014322 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c001433f:	b8 20 41 02 c0       	mov    eax,0xc0024120
c0014344:	e9 ef 00 00 00       	jmp    c0014438 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014349:	39 c7                	cmp    edi,eax
c001434b:	0f 84 d4 00 00 00    	je     c0014425 <lookupAMDCPUName(unsigned char, unsigned char)+0x18c>
c0014351:	40                   	inc    eax
c0014352:	3d d0 00 00 00       	cmp    eax,0xd0
c0014357:	74 09                	je     c0014362 <lookupAMDCPUName(unsigned char, unsigned char)+0xc9>
c0014359:	89 f3                	mov    ebx,esi
c001435b:	80 fb 0f             	cmp    bl,0xf
c001435e:	75 f1                	jne    c0014351 <lookupAMDCPUName(unsigned char, unsigned char)+0xb8>
c0014360:	eb e7                	jmp    c0014349 <lookupAMDCPUName(unsigned char, unsigned char)+0xb0>
c0014362:	80 fa 10             	cmp    dl,0x10
c0014365:	75 19                	jne    c0014380 <lookupAMDCPUName(unsigned char, unsigned char)+0xe7>
c0014367:	8d 41 fc             	lea    eax,[ecx-0x4]
c001436a:	83 e0 fb             	and    eax,0xfffffffb
c001436d:	3c 02                	cmp    al,0x2
c001436f:	0f 86 b7 00 00 00    	jbe    c001442c <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c0014375:	80 f9 02             	cmp    cl,0x2
c0014378:	0f 84 ae 00 00 00    	je     c001442c <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c001437e:	eb 13                	jmp    c0014393 <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c0014380:	80 fa 11             	cmp    dl,0x11
c0014383:	75 0e                	jne    c0014393 <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c0014385:	b8 30 41 02 c0       	mov    eax,0xc0024130
c001438a:	80 f9 03             	cmp    cl,0x3
c001438d:	0f 84 a5 00 00 00    	je     c0014438 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014393:	80 fa 12             	cmp    dl,0x12
c0014396:	75 0e                	jne    c00143a6 <lookupAMDCPUName(unsigned char, unsigned char)+0x10d>
c0014398:	b8 40 41 02 c0       	mov    eax,0xc0024140
c001439d:	80 f9 01             	cmp    cl,0x1
c00143a0:	0f 84 92 00 00 00    	je     c0014438 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143a6:	80 fa 14             	cmp    dl,0x14
c00143a9:	be 01 00 00 00       	mov    esi,0x1
c00143ae:	0f 94 c3             	sete   bl
c00143b1:	80 f9 13             	cmp    cl,0x13
c00143b4:	77 0c                	ja     c00143c2 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c00143b6:	be 04 00 09 00       	mov    esi,0x90004
c00143bb:	d3 ee                	shr    esi,cl
c00143bd:	f7 d6                	not    esi
c00143bf:	83 e6 01             	and    esi,0x1
c00143c2:	8d 41 ff             	lea    eax,[ecx-0x1]
c00143c5:	3c 01                	cmp    al,0x1
c00143c7:	b8 50 41 02 c0       	mov    eax,0xc0024150
c00143cc:	0f 96 44 24 03       	setbe  BYTE PTR [esp+0x3]
c00143d1:	84 5c 24 03          	test   BYTE PTR [esp+0x3],bl
c00143d5:	75 61                	jne    c0014438 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143d7:	80 fa 15             	cmp    dl,0x15
c00143da:	75 1f                	jne    c00143fb <lookupAMDCPUName(unsigned char, unsigned char)+0x162>
c00143dc:	b8 60 41 02 c0       	mov    eax,0xc0024160
c00143e1:	80 f9 01             	cmp    cl,0x1
c00143e4:	74 52                	je     c0014438 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143e6:	89 f3                	mov    ebx,esi
c00143e8:	b8 70 41 02 c0       	mov    eax,0xc0024170
c00143ed:	84 db                	test   bl,bl
c00143ef:	74 47                	je     c0014438 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143f1:	b8 80 41 02 c0       	mov    eax,0xc0024180
c00143f6:	80 f9 30             	cmp    cl,0x30
c00143f9:	74 3d                	je     c0014438 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143fb:	80 fa 16             	cmp    dl,0x16
c00143fe:	0f 94 c2             	sete   dl
c0014401:	84 c9                	test   cl,cl
c0014403:	75 09                	jne    c001440e <lookupAMDCPUName(unsigned char, unsigned char)+0x175>
c0014405:	b8 90 41 02 c0       	mov    eax,0xc0024190
c001440a:	84 d2                	test   dl,dl
c001440c:	75 2a                	jne    c0014438 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001440e:	80 f9 30             	cmp    cl,0x30
c0014411:	75 20                	jne    c0014433 <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c0014413:	b8 a0 41 02 c0       	mov    eax,0xc00241a0
c0014418:	84 d2                	test   dl,dl
c001441a:	75 1c                	jne    c0014438 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001441c:	eb 15                	jmp    c0014433 <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c001441e:	b8 c0 40 02 c0       	mov    eax,0xc00240c0
c0014423:	eb 13                	jmp    c0014438 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014425:	b8 30 41 02 c0       	mov    eax,0xc0024130
c001442a:	eb 0c                	jmp    c0014438 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001442c:	b8 40 41 02 c0       	mov    eax,0xc0024140
c0014431:	eb 05                	jmp    c0014438 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014433:	b8 72 27 02 c0       	mov    eax,0xc0022772
c0014438:	5a                   	pop    edx
c0014439:	5b                   	pop    ebx
c001443a:	5e                   	pop    esi
c001443b:	5f                   	pop    edi
c001443c:	5d                   	pop    ebp
c001443d:	c3                   	ret    

c001443e <lookupIntelCPUName(unsigned char, unsigned char)>:
c001443e:	53                   	push   ebx
c001443f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014443:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014447:	80 f9 04             	cmp    cl,0x4
c001444a:	75 6a                	jne    c00144b6 <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c001444c:	b8 20 3f 02 c0       	mov    eax,0xc0023f20
c0014451:	80 fa 01             	cmp    dl,0x1
c0014454:	0f 86 9b 02 00 00    	jbe    c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001445a:	b8 30 3f 02 c0       	mov    eax,0xc0023f30
c001445f:	80 fa 02             	cmp    dl,0x2
c0014462:	0f 84 8d 02 00 00    	je     c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014468:	b8 40 3f 02 c0       	mov    eax,0xc0023f40
c001446d:	80 fa 03             	cmp    dl,0x3
c0014470:	0f 84 7f 02 00 00    	je     c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014476:	b8 50 3f 02 c0       	mov    eax,0xc0023f50
c001447b:	80 fa 04             	cmp    dl,0x4
c001447e:	0f 84 71 02 00 00    	je     c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014484:	b8 60 3f 02 c0       	mov    eax,0xc0023f60
c0014489:	80 fa 05             	cmp    dl,0x5
c001448c:	0f 84 63 02 00 00    	je     c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014492:	b8 40 3f 02 c0       	mov    eax,0xc0023f40
c0014497:	80 fa 07             	cmp    dl,0x7
c001449a:	0f 84 55 02 00 00    	je     c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144a0:	8d 5a f8             	lea    ebx,[edx-0x8]
c00144a3:	b8 70 3f 02 c0       	mov    eax,0xc0023f70
c00144a8:	80 fb 01             	cmp    bl,0x1
c00144ab:	0f 87 e0 01 00 00    	ja     c0014691 <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c00144b1:	e9 3f 02 00 00       	jmp    c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144b6:	80 f9 05             	cmp    cl,0x5
c00144b9:	75 3e                	jne    c00144f9 <lookupIntelCPUName(unsigned char, unsigned char)+0xbb>
c00144bb:	8d 5a ff             	lea    ebx,[edx-0x1]
c00144be:	b8 80 3f 02 c0       	mov    eax,0xc0023f80
c00144c3:	80 fb 02             	cmp    bl,0x2
c00144c6:	0f 86 29 02 00 00    	jbe    c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144cc:	80 fa 04             	cmp    dl,0x4
c00144cf:	0f 84 f1 01 00 00    	je     c00146c6 <lookupIntelCPUName(unsigned char, unsigned char)+0x288>
c00144d5:	80 fa 07             	cmp    dl,0x7
c00144d8:	0f 84 17 02 00 00    	je     c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144de:	b8 90 3f 02 c0       	mov    eax,0xc0023f90
c00144e3:	80 fa 08             	cmp    dl,0x8
c00144e6:	0f 84 09 02 00 00    	je     c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144ec:	b8 a0 3f 02 c0       	mov    eax,0xc0023fa0
c00144f1:	80 fa 09             	cmp    dl,0x9
c00144f4:	e9 96 01 00 00       	jmp    c001468f <lookupIntelCPUName(unsigned char, unsigned char)+0x251>
c00144f9:	80 f9 06             	cmp    cl,0x6
c00144fc:	0f 85 80 01 00 00    	jne    c0014682 <lookupIntelCPUName(unsigned char, unsigned char)+0x244>
c0014502:	b8 b0 3f 02 c0       	mov    eax,0xc0023fb0
c0014507:	80 fa 01             	cmp    dl,0x1
c001450a:	0f 84 e5 01 00 00    	je     c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014510:	8d 42 fb             	lea    eax,[edx-0x5]
c0014513:	3c 01                	cmp    al,0x1
c0014515:	0f 86 b2 01 00 00    	jbe    c00146cd <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c001451b:	80 fa 03             	cmp    dl,0x3
c001451e:	0f 84 a9 01 00 00    	je     c00146cd <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c0014524:	8d 5a f9             	lea    ebx,[edx-0x7]
c0014527:	b8 d0 3f 02 c0       	mov    eax,0xc0023fd0
c001452c:	80 fb 01             	cmp    bl,0x1
c001452f:	0f 86 c0 01 00 00    	jbe    c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014535:	80 fa 09             	cmp    dl,0x9
c0014538:	0f 84 96 01 00 00    	je     c00146d4 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c001453e:	8d 5a f6             	lea    ebx,[edx-0xa]
c0014541:	80 fb 01             	cmp    bl,0x1
c0014544:	0f 86 ab 01 00 00    	jbe    c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001454a:	b8 e0 3f 02 c0       	mov    eax,0xc0023fe0
c001454f:	80 fa 0d             	cmp    dl,0xd
c0014552:	0f 84 9d 01 00 00    	je     c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014558:	b8 f0 3f 02 c0       	mov    eax,0xc0023ff0
c001455d:	80 fa 0e             	cmp    dl,0xe
c0014560:	0f 84 8f 01 00 00    	je     c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014566:	b8 00 40 02 c0       	mov    eax,0xc0024000
c001456b:	80 fa 0f             	cmp    dl,0xf
c001456e:	0f 84 81 01 00 00    	je     c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014574:	b8 e0 3f 02 c0       	mov    eax,0xc0023fe0
c0014579:	80 fa 15             	cmp    dl,0x15
c001457c:	0f 84 73 01 00 00    	je     c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014582:	8d 5a ea             	lea    ebx,[edx-0x16]
c0014585:	b8 00 40 02 c0       	mov    eax,0xc0024000
c001458a:	80 fb 01             	cmp    bl,0x1
c001458d:	0f 86 62 01 00 00    	jbe    c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014593:	80 fa 1a             	cmp    dl,0x1a
c0014596:	0f 84 3f 01 00 00    	je     c00146db <lookupIntelCPUName(unsigned char, unsigned char)+0x29d>
c001459c:	80 fa 1c             	cmp    dl,0x1c
c001459f:	0f 84 3d 01 00 00    	je     c00146e2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a4>
c00145a5:	80 fa 1d             	cmp    dl,0x1d
c00145a8:	0f 84 47 01 00 00    	je     c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145ae:	b8 30 40 02 c0       	mov    eax,0xc0024030
c00145b3:	80 fa 25             	cmp    dl,0x25
c00145b6:	0f 84 39 01 00 00    	je     c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145bc:	8d 5a da             	lea    ebx,[edx-0x26]
c00145bf:	b8 20 40 02 c0       	mov    eax,0xc0024020
c00145c4:	80 fb 01             	cmp    bl,0x1
c00145c7:	0f 86 28 01 00 00    	jbe    c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145cd:	b8 40 40 02 c0       	mov    eax,0xc0024040
c00145d2:	80 fa 2a             	cmp    dl,0x2a
c00145d5:	0f 84 1a 01 00 00    	je     c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145db:	b8 30 40 02 c0       	mov    eax,0xc0024030
c00145e0:	80 fa 2c             	cmp    dl,0x2c
c00145e3:	0f 84 0c 01 00 00    	je     c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145e9:	b8 40 40 02 c0       	mov    eax,0xc0024040
c00145ee:	80 fa 2d             	cmp    dl,0x2d
c00145f1:	0f 84 fe 00 00 00    	je     c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145f7:	b8 10 40 02 c0       	mov    eax,0xc0024010
c00145fc:	80 fa 2e             	cmp    dl,0x2e
c00145ff:	0f 84 f0 00 00 00    	je     c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014605:	b8 30 40 02 c0       	mov    eax,0xc0024030
c001460a:	80 fa 2f             	cmp    dl,0x2f
c001460d:	0f 84 e2 00 00 00    	je     c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014613:	8d 5a cb             	lea    ebx,[edx-0x35]
c0014616:	b8 20 40 02 c0       	mov    eax,0xc0024020
c001461b:	80 fb 01             	cmp    bl,0x1
c001461e:	0f 86 d1 00 00 00    	jbe    c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014624:	b8 50 40 02 c0       	mov    eax,0xc0024050
c0014629:	80 fa 37             	cmp    dl,0x37
c001462c:	0f 84 c3 00 00 00    	je     c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014632:	b8 60 40 02 c0       	mov    eax,0xc0024060
c0014637:	80 fa 3a             	cmp    dl,0x3a
c001463a:	0f 84 b5 00 00 00    	je     c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014640:	b8 70 40 02 c0       	mov    eax,0xc0024070
c0014645:	80 fa 3c             	cmp    dl,0x3c
c0014648:	0f 84 a7 00 00 00    	je     c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001464e:	b8 80 40 02 c0       	mov    eax,0xc0024080
c0014653:	80 fa 3d             	cmp    dl,0x3d
c0014656:	0f 84 99 00 00 00    	je     c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001465c:	b8 60 40 02 c0       	mov    eax,0xc0024060
c0014661:	80 fa 3e             	cmp    dl,0x3e
c0014664:	0f 84 8b 00 00 00    	je     c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001466a:	8d 42 bb             	lea    eax,[edx-0x45]
c001466d:	3c 01                	cmp    al,0x1
c001466f:	76 78                	jbe    c00146e9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c0014671:	80 fa 3f             	cmp    dl,0x3f
c0014674:	74 73                	je     c00146e9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c0014676:	80 fa 4a             	cmp    dl,0x4a
c0014679:	74 75                	je     c00146f0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c001467b:	80 fa 4d             	cmp    dl,0x4d
c001467e:	75 11                	jne    c0014691 <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c0014680:	eb 6e                	jmp    c00146f0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c0014682:	80 f9 0b             	cmp    cl,0xb
c0014685:	75 0a                	jne    c0014691 <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c0014687:	b8 90 40 02 c0       	mov    eax,0xc0024090
c001468c:	80 fa 01             	cmp    dl,0x1
c001468f:	74 64                	je     c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014691:	80 f9 0f             	cmp    cl,0xf
c0014694:	b8 a0 40 02 c0       	mov    eax,0xc00240a0
c0014699:	0f 94 c1             	sete   cl
c001469c:	80 fa 02             	cmp    dl,0x2
c001469f:	0f 96 c3             	setbe  bl
c00146a2:	84 cb                	test   bl,cl
c00146a4:	75 4f                	jne    c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146a6:	8d 42 fd             	lea    eax,[edx-0x3]
c00146a9:	3c 01                	cmp    al,0x1
c00146ab:	0f 96 c0             	setbe  al
c00146ae:	80 fa 06             	cmp    dl,0x6
c00146b1:	0f 94 c2             	sete   dl
c00146b4:	09 c2                	or     edx,eax
c00146b6:	b8 72 27 02 c0       	mov    eax,0xc0022772
c00146bb:	84 ca                	test   dl,cl
c00146bd:	74 36                	je     c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146bf:	b8 b0 40 02 c0       	mov    eax,0xc00240b0
c00146c4:	eb 2f                	jmp    c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146c6:	b8 90 3f 02 c0       	mov    eax,0xc0023f90
c00146cb:	eb 28                	jmp    c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146cd:	b8 c0 3f 02 c0       	mov    eax,0xc0023fc0
c00146d2:	eb 21                	jmp    c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146d4:	b8 e0 3f 02 c0       	mov    eax,0xc0023fe0
c00146d9:	eb 1a                	jmp    c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146db:	b8 10 40 02 c0       	mov    eax,0xc0024010
c00146e0:	eb 13                	jmp    c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146e2:	b8 20 40 02 c0       	mov    eax,0xc0024020
c00146e7:	eb 0c                	jmp    c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146e9:	b8 70 40 02 c0       	mov    eax,0xc0024070
c00146ee:	eb 05                	jmp    c00146f5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146f0:	b8 50 40 02 c0       	mov    eax,0xc0024050
c00146f5:	5b                   	pop    ebx
c00146f6:	c3                   	ret    

c00146f7 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c00146f7:	60                   	pusha  
c00146f8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00146fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014700:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014704:	9c                   	pushf  
c0014705:	fa                   	cli    
c0014706:	0f 09                	wbinvd 
c0014708:	0f 30                	wrmsr  
c001470a:	9d                   	popf   
c001470b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001470f:	89 02                	mov    DWORD PTR [edx],eax
c0014711:	61                   	popa   
c0014712:	c3                   	ret    

c0014713 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0014713:	60                   	pusha  
c0014714:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014718:	9c                   	pushf  
c0014719:	fa                   	cli    
c001471a:	0f 09                	wbinvd 
c001471c:	31 c0                	xor    eax,eax
c001471e:	31 d2                	xor    edx,edx
c0014720:	0f 32                	rdmsr  
c0014722:	9d                   	popf   
c0014723:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014727:	89 02                	mov    DWORD PTR [edx],eax
c0014729:	61                   	popa   
c001472a:	c3                   	ret    

c001472b <AMD_K6_writeback(int, int, int)>:
c001472b:	56                   	push   esi
c001472c:	53                   	push   ebx
c001472d:	83 ec 10             	sub    esp,0x10
c0014730:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014734:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0014739:	75 5d                	jne    c0014798 <AMD_K6_writeback(int, int, int)+0x6d>
c001473b:	83 f8 08             	cmp    eax,0x8
c001473e:	75 09                	jne    c0014749 <AMD_K6_writeback(int, int, int)+0x1e>
c0014740:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0014745:	7e 13                	jle    c001475a <AMD_K6_writeback(int, int, int)+0x2f>
c0014747:	eb 30                	jmp    c0014779 <AMD_K6_writeback(int, int, int)+0x4e>
c0014749:	83 f8 06             	cmp    eax,0x6
c001474c:	7c 4a                	jl     c0014798 <AMD_K6_writeback(int, int, int)+0x6d>
c001474e:	83 f8 07             	cmp    eax,0x7
c0014751:	7e 07                	jle    c001475a <AMD_K6_writeback(int, int, int)+0x2f>
c0014753:	83 f8 09             	cmp    eax,0x9
c0014756:	74 21                	je     c0014779 <AMD_K6_writeback(int, int, int)+0x4e>
c0014758:	eb 3e                	jmp    c0014798 <AMD_K6_writeback(int, int, int)+0x6d>
c001475a:	89 e6                	mov    esi,esp
c001475c:	8b 1d e4 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247e4
c0014762:	c1 eb 15             	shr    ebx,0x15
c0014765:	56                   	push   esi
c0014766:	68 82 00 00 c0       	push   0xc0000082
c001476b:	e8 a3 ff ff ff       	call   c0014713 <AMD_K6_read_msr(unsigned int, REGS*)>
c0014770:	56                   	push   esi
c0014771:	83 e3 7e             	and    ebx,0x7e
c0014774:	6a 00                	push   0x0
c0014776:	53                   	push   ebx
c0014777:	eb 12                	jmp    c001478b <AMD_K6_writeback(int, int, int)+0x60>
c0014779:	89 e3                	mov    ebx,esp
c001477b:	53                   	push   ebx
c001477c:	68 82 00 00 c0       	push   0xc0000082
c0014781:	e8 8d ff ff ff       	call   c0014713 <AMD_K6_read_msr(unsigned int, REGS*)>
c0014786:	53                   	push   ebx
c0014787:	6a 00                	push   0x0
c0014789:	6a 00                	push   0x0
c001478b:	68 82 00 00 c0       	push   0xc0000082
c0014790:	e8 62 ff ff ff       	call   c00146f7 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0014795:	83 c4 18             	add    esp,0x18
c0014798:	83 c4 10             	add    esp,0x10
c001479b:	5b                   	pop    ebx
c001479c:	5e                   	pop    esi
c001479d:	c3                   	ret    

c001479e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001479e:	55                   	push   ebp
c001479f:	57                   	push   edi
c00147a0:	56                   	push   esi
c00147a1:	53                   	push   ebx
c00147a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147a6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00147aa:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00147ae:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00147b2:	39 05 c0 41 02 c0    	cmp    DWORD PTR ds:0xc00241c0,eax
c00147b8:	75 23                	jne    c00147dd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00147ba:	a1 ec 51 02 c0       	mov    eax,ds:0xc00251ec
c00147bf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00147c3:	89 06                	mov    DWORD PTR [esi],eax
c00147c5:	a1 e8 51 02 c0       	mov    eax,ds:0xc00251e8
c00147ca:	89 07                	mov    DWORD PTR [edi],eax
c00147cc:	a1 e4 51 02 c0       	mov    eax,ds:0xc00251e4
c00147d1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00147d4:	a1 e0 51 02 c0       	mov    eax,ds:0xc00251e0
c00147d9:	89 02                	mov    DWORD PTR [edx],eax
c00147db:	eb 3f                	jmp    c001481c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00147dd:	31 c9                	xor    ecx,ecx
c00147df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147e3:	0f a2                	cpuid  
c00147e5:	89 06                	mov    DWORD PTR [esi],eax
c00147e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00147eb:	89 1f                	mov    DWORD PTR [edi],ebx
c00147ed:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00147f0:	89 10                	mov    DWORD PTR [eax],edx
c00147f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147f6:	a3 c0 41 02 c0       	mov    ds:0xc00241c0,eax
c00147fb:	8b 06                	mov    eax,DWORD PTR [esi]
c00147fd:	a3 ec 51 02 c0       	mov    ds:0xc00251ec,eax
c0014802:	8b 07                	mov    eax,DWORD PTR [edi]
c0014804:	a3 e8 51 02 c0       	mov    ds:0xc00251e8,eax
c0014809:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001480c:	a3 e4 51 02 c0       	mov    ds:0xc00251e4,eax
c0014811:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014815:	8b 00                	mov    eax,DWORD PTR [eax]
c0014817:	a3 e0 51 02 c0       	mov    ds:0xc00251e0,eax
c001481c:	5b                   	pop    ebx
c001481d:	5e                   	pop    esi
c001481e:	5f                   	pop    edi
c001481f:	5d                   	pop    ebp
c0014820:	c3                   	ret    

c0014821 <cpuidCheckEDX(unsigned int)>:
c0014821:	83 ec 10             	sub    esp,0x10
c0014824:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014828:	50                   	push   eax
c0014829:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001482d:	50                   	push   eax
c001482e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014832:	50                   	push   eax
c0014833:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014837:	50                   	push   eax
c0014838:	6a 01                	push   0x1
c001483a:	e8 5f ff ff ff       	call   c001479e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001483f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014843:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0014847:	0f 95 c0             	setne  al
c001484a:	83 c4 24             	add    esp,0x24
c001484d:	c3                   	ret    

c001484e <cpuidCheckECX(unsigned int)>:
c001484e:	83 ec 10             	sub    esp,0x10
c0014851:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014855:	50                   	push   eax
c0014856:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001485a:	50                   	push   eax
c001485b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001485f:	50                   	push   eax
c0014860:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014864:	50                   	push   eax
c0014865:	6a 01                	push   0x1
c0014867:	e8 32 ff ff ff       	call   c001479e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001486c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014870:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0014874:	0f 95 c0             	setne  al
c0014877:	83 c4 24             	add    esp,0x24
c001487a:	c3                   	ret    

c001487b <cpuidCheckExtendedEBX(unsigned int)>:
c001487b:	83 ec 10             	sub    esp,0x10
c001487e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014882:	50                   	push   eax
c0014883:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014887:	50                   	push   eax
c0014888:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001488c:	50                   	push   eax
c001488d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014891:	50                   	push   eax
c0014892:	6a 07                	push   0x7
c0014894:	e8 05 ff ff ff       	call   c001479e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014899:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001489d:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00148a1:	0f 95 c0             	setne  al
c00148a4:	83 c4 24             	add    esp,0x24
c00148a7:	c3                   	ret    

c00148a8 <cpuidCheckExtendedECX(unsigned int)>:
c00148a8:	83 ec 10             	sub    esp,0x10
c00148ab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148af:	50                   	push   eax
c00148b0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148b4:	50                   	push   eax
c00148b5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148b9:	50                   	push   eax
c00148ba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148be:	50                   	push   eax
c00148bf:	6a 07                	push   0x7
c00148c1:	e8 d8 fe ff ff       	call   c001479e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00148c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00148ca:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00148ce:	0f 95 c0             	setne  al
c00148d1:	83 c4 24             	add    esp,0x24
c00148d4:	c3                   	ret    

c00148d5 <getCPUNumber()>:
c00148d5:	31 c0                	xor    eax,eax
c00148d7:	c3                   	ret    

c00148d8 <thisCPU()>:
c00148d8:	e8 f8 ff ff ff       	call   c00148d5 <getCPUNumber()>
c00148dd:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c00148e3:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c00148ea:	c3                   	ret    
c00148eb:	90                   	nop

c00148ec <CPU::CPU()>:
c00148ec:	83 ec 0c             	sub    esp,0xc
c00148ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148f3:	83 ec 08             	sub    esp,0x8
c00148f6:	68 72 27 02 c0       	push   0xc0022772
c00148fb:	50                   	push   eax
c00148fc:	e8 19 bf ff ff       	call   c001081a <Device::Device(char const*)>
c0014901:	83 c4 10             	add    esp,0x10
c0014904:	ba 4c 28 02 c0       	mov    edx,0xc002284c
c0014909:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001490d:	89 10                	mov    DWORD PTR [eax],edx
c001490f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014913:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001491d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014921:	05 78 01 00 00       	add    eax,0x178
c0014926:	83 ec 0c             	sub    esp,0xc
c0014929:	50                   	push   eax
c001492a:	e8 c5 6e ff ff       	call   c000b7f4 <GDT::GDT()>
c001492f:	83 c4 10             	add    esp,0x10
c0014932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014936:	05 7c 09 00 00       	add    eax,0x97c
c001493b:	83 ec 0c             	sub    esp,0xc
c001493e:	50                   	push   eax
c001493f:	e8 10 71 ff ff       	call   c000ba54 <IDT::IDT()>
c0014944:	83 c4 10             	add    esp,0x10
c0014947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001494b:	05 7c 11 00 00       	add    eax,0x117c
c0014950:	83 ec 0c             	sub    esp,0xc
c0014953:	50                   	push   eax
c0014954:	e8 6d 91 ff ff       	call   c000dac6 <TSS::TSS()>
c0014959:	83 c4 10             	add    esp,0x10
c001495c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014960:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0014967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001496b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0014975:	90                   	nop
c0014976:	83 c4 0c             	add    esp,0xc
c0014979:	c3                   	ret    

c001497a <CPU::displayFeatures()>:
c001497a:	53                   	push   ebx
c001497b:	83 ec 10             	sub    esp,0x10
c001497e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014982:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0014988:	68 80 24 02 c0       	push   0xc0022480
c001498d:	e8 83 a8 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0014992:	59                   	pop    ecx
c0014993:	58                   	pop    eax
c0014994:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c001499a:	50                   	push   eax
c001499b:	68 91 24 02 c0       	push   0xc0022491
c00149a0:	e8 70 a8 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c00149a5:	58                   	pop    eax
c00149a6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00149ac:	c1 e8 0e             	shr    eax,0xe
c00149af:	5a                   	pop    edx
c00149b0:	0f b6 c0             	movzx  eax,al
c00149b3:	50                   	push   eax
c00149b4:	68 a2 24 02 c0       	push   0xc00224a2
c00149b9:	e8 57 a8 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c00149be:	59                   	pop    ecx
c00149bf:	58                   	pop    eax
c00149c0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00149c6:	66 c1 e8 06          	shr    ax,0x6
c00149ca:	0f b6 c0             	movzx  eax,al
c00149cd:	50                   	push   eax
c00149ce:	68 b3 24 02 c0       	push   0xc00224b3
c00149d3:	e8 3d a8 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c00149d8:	c7 04 24 c6 28 02 c0 	mov    DWORD PTR [esp],0xc00228c6
c00149df:	e8 31 a8 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c00149e4:	83 c4 10             	add    esp,0x10
c00149e7:	b8 12 11 02 c0       	mov    eax,0xc0021112
c00149ec:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00149f3:	74 05                	je     c00149fa <CPU::displayFeatures()+0x80>
c00149f5:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c00149fa:	52                   	push   edx
c00149fb:	52                   	push   edx
c00149fc:	50                   	push   eax
c00149fd:	68 c4 24 02 c0       	push   0xc00224c4
c0014a02:	e8 0e a8 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0014a07:	83 c4 10             	add    esp,0x10
c0014a0a:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014a0f:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0014a16:	78 05                	js     c0014a1d <CPU::displayFeatures()+0xa3>
c0014a18:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014a1d:	51                   	push   ecx
c0014a1e:	51                   	push   ecx
c0014a1f:	50                   	push   eax
c0014a20:	68 db 24 02 c0       	push   0xc00224db
c0014a25:	e8 eb a7 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0014a2a:	83 c4 10             	add    esp,0x10
c0014a2d:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014a32:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0014a39:	75 05                	jne    c0014a40 <CPU::displayFeatures()+0xc6>
c0014a3b:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014a40:	52                   	push   edx
c0014a41:	52                   	push   edx
c0014a42:	50                   	push   eax
c0014a43:	68 f2 24 02 c0       	push   0xc00224f2
c0014a48:	e8 c8 a7 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0014a4d:	83 c4 10             	add    esp,0x10
c0014a50:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014a55:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0014a5c:	75 05                	jne    c0014a63 <CPU::displayFeatures()+0xe9>
c0014a5e:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014a63:	51                   	push   ecx
c0014a64:	51                   	push   ecx
c0014a65:	50                   	push   eax
c0014a66:	68 09 25 02 c0       	push   0xc0022509
c0014a6b:	e8 a5 a7 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0014a70:	83 c4 10             	add    esp,0x10
c0014a73:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014a78:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014a7f:	75 05                	jne    c0014a86 <CPU::displayFeatures()+0x10c>
c0014a81:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014a86:	52                   	push   edx
c0014a87:	52                   	push   edx
c0014a88:	50                   	push   eax
c0014a89:	68 20 25 02 c0       	push   0xc0022520
c0014a8e:	e8 82 a7 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0014a93:	83 c4 10             	add    esp,0x10
c0014a96:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014a9b:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014aa2:	75 05                	jne    c0014aa9 <CPU::displayFeatures()+0x12f>
c0014aa4:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014aa9:	51                   	push   ecx
c0014aaa:	51                   	push   ecx
c0014aab:	50                   	push   eax
c0014aac:	68 37 25 02 c0       	push   0xc0022537
c0014ab1:	e8 5f a7 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0014ab6:	83 c4 10             	add    esp,0x10
c0014ab9:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014abe:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014ac5:	75 05                	jne    c0014acc <CPU::displayFeatures()+0x152>
c0014ac7:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014acc:	52                   	push   edx
c0014acd:	52                   	push   edx
c0014ace:	50                   	push   eax
c0014acf:	68 4e 25 02 c0       	push   0xc002254e
c0014ad4:	e8 3c a7 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0014ad9:	83 c4 10             	add    esp,0x10
c0014adc:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014ae1:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0014ae8:	75 05                	jne    c0014aef <CPU::displayFeatures()+0x175>
c0014aea:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014aef:	51                   	push   ecx
c0014af0:	51                   	push   ecx
c0014af1:	50                   	push   eax
c0014af2:	68 65 25 02 c0       	push   0xc0022565
c0014af7:	e8 19 a7 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0014afc:	83 c4 10             	add    esp,0x10
c0014aff:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014b04:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0014b0b:	75 05                	jne    c0014b12 <CPU::displayFeatures()+0x198>
c0014b0d:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014b12:	52                   	push   edx
c0014b13:	52                   	push   edx
c0014b14:	50                   	push   eax
c0014b15:	68 7c 25 02 c0       	push   0xc002257c
c0014b1a:	e8 f6 a6 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0014b1f:	83 c4 10             	add    esp,0x10
c0014b22:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014b27:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0014b2e:	75 05                	jne    c0014b35 <CPU::displayFeatures()+0x1bb>
c0014b30:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014b35:	51                   	push   ecx
c0014b36:	51                   	push   ecx
c0014b37:	50                   	push   eax
c0014b38:	68 93 25 02 c0       	push   0xc0022593
c0014b3d:	e8 d3 a6 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0014b42:	83 c4 10             	add    esp,0x10
c0014b45:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014b4a:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014b51:	75 05                	jne    c0014b58 <CPU::displayFeatures()+0x1de>
c0014b53:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014b58:	52                   	push   edx
c0014b59:	52                   	push   edx
c0014b5a:	50                   	push   eax
c0014b5b:	68 aa 25 02 c0       	push   0xc00225aa
c0014b60:	e8 b0 a6 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0014b65:	83 c4 10             	add    esp,0x10
c0014b68:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014b6d:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0014b74:	75 05                	jne    c0014b7b <CPU::displayFeatures()+0x201>
c0014b76:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014b7b:	51                   	push   ecx
c0014b7c:	51                   	push   ecx
c0014b7d:	50                   	push   eax
c0014b7e:	68 c1 25 02 c0       	push   0xc00225c1
c0014b83:	e8 8d a6 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0014b88:	83 c4 10             	add    esp,0x10
c0014b8b:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014b90:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0014b97:	75 05                	jne    c0014b9e <CPU::displayFeatures()+0x224>
c0014b99:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014b9e:	52                   	push   edx
c0014b9f:	52                   	push   edx
c0014ba0:	50                   	push   eax
c0014ba1:	68 d8 25 02 c0       	push   0xc00225d8
c0014ba6:	e8 6a a6 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0014bab:	83 c4 10             	add    esp,0x10
c0014bae:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014bb3:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0014bba:	78 05                	js     c0014bc1 <CPU::displayFeatures()+0x247>
c0014bbc:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014bc1:	51                   	push   ecx
c0014bc2:	51                   	push   ecx
c0014bc3:	50                   	push   eax
c0014bc4:	68 ef 25 02 c0       	push   0xc00225ef
c0014bc9:	e8 47 a6 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0014bce:	83 c4 10             	add    esp,0x10
c0014bd1:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014bd6:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0014bdd:	75 05                	jne    c0014be4 <CPU::displayFeatures()+0x26a>
c0014bdf:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014be4:	52                   	push   edx
c0014be5:	52                   	push   edx
c0014be6:	50                   	push   eax
c0014be7:	68 06 26 02 c0       	push   0xc0022606
c0014bec:	e8 24 a6 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0014bf1:	83 c4 18             	add    esp,0x18
c0014bf4:	5b                   	pop    ebx
c0014bf5:	c3                   	ret    

c0014bf6 <CPU::detectFeatures()>:
c0014bf6:	55                   	push   ebp
c0014bf7:	57                   	push   edi
c0014bf8:	56                   	push   esi
c0014bf9:	53                   	push   ebx
c0014bfa:	83 ec 50             	sub    esp,0x50
c0014bfd:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0014c01:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0014c0b:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0014c12:	6a 0d                	push   0xd
c0014c14:	6a 00                	push   0x0
c0014c16:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0014c1c:	57                   	push   edi
c0014c1d:	e8 a2 ba fe ff       	call   c00006c4 <memset>
c0014c22:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0014c27:	83 c4 10             	add    esp,0x10
c0014c2a:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0014c31:	0f 84 04 09 00 00    	je     c001553b <CPU::detectFeatures()+0x945>
c0014c37:	83 ec 0c             	sub    esp,0xc
c0014c3a:	6a 10                	push   0x10
c0014c3c:	e8 e0 fb ff ff       	call   c0014821 <cpuidCheckEDX(unsigned int)>
c0014c41:	83 e0 01             	and    eax,0x1
c0014c44:	8d 14 00             	lea    edx,[eax+eax*1]
c0014c47:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014c4d:	83 e0 fd             	and    eax,0xfffffffd
c0014c50:	09 d0                	or     eax,edx
c0014c52:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014c58:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0014c5f:	e8 bd fb ff ff       	call   c0014821 <cpuidCheckEDX(unsigned int)>
c0014c64:	83 e0 01             	and    eax,0x1
c0014c67:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014c6e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014c74:	83 e0 fb             	and    eax,0xfffffffb
c0014c77:	09 d0                	or     eax,edx
c0014c79:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014c7f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0014c86:	e8 96 fb ff ff       	call   c0014821 <cpuidCheckEDX(unsigned int)>
c0014c8b:	83 e0 01             	and    eax,0x1
c0014c8e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014c95:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014c9b:	83 e0 f7             	and    eax,0xfffffff7
c0014c9e:	09 d0                	or     eax,edx
c0014ca0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014ca6:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0014cad:	e8 6f fb ff ff       	call   c0014821 <cpuidCheckEDX(unsigned int)>
c0014cb2:	83 e0 01             	and    eax,0x1
c0014cb5:	c1 e0 04             	shl    eax,0x4
c0014cb8:	88 c2                	mov    dl,al
c0014cba:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014cc0:	83 e0 ef             	and    eax,0xffffffef
c0014cc3:	09 d0                	or     eax,edx
c0014cc5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014ccb:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0014cd2:	e8 4a fb ff ff       	call   c0014821 <cpuidCheckEDX(unsigned int)>
c0014cd7:	83 e0 01             	and    eax,0x1
c0014cda:	c1 e0 05             	shl    eax,0x5
c0014cdd:	88 c2                	mov    dl,al
c0014cdf:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014ce5:	83 e0 df             	and    eax,0xffffffdf
c0014ce8:	09 d0                	or     eax,edx
c0014cea:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014cf0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0014cf7:	e8 25 fb ff ff       	call   c0014821 <cpuidCheckEDX(unsigned int)>
c0014cfc:	83 e0 01             	and    eax,0x1
c0014cff:	8d 14 00             	lea    edx,[eax+eax*1]
c0014d02:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014d08:	83 e0 fd             	and    eax,0xfffffffd
c0014d0b:	09 d0                	or     eax,edx
c0014d0d:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014d13:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0014d1a:	e8 02 fb ff ff       	call   c0014821 <cpuidCheckEDX(unsigned int)>
c0014d1f:	83 e0 01             	and    eax,0x1
c0014d22:	c1 e0 06             	shl    eax,0x6
c0014d25:	88 c2                	mov    dl,al
c0014d27:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014d2d:	83 e0 bf             	and    eax,0xffffffbf
c0014d30:	09 d0                	or     eax,edx
c0014d32:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014d38:	58                   	pop    eax
c0014d39:	8d 74 24 28          	lea    esi,[esp+0x28]
c0014d3d:	56                   	push   esi
c0014d3e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0014d42:	55                   	push   ebp
c0014d43:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014d47:	50                   	push   eax
c0014d48:	8d 54 24 28          	lea    edx,[esp+0x28]
c0014d4c:	52                   	push   edx
c0014d4d:	6a 00                	push   0x0
c0014d4f:	e8 4a fa ff ff       	call   c001479e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014d54:	83 c4 1c             	add    esp,0x1c
c0014d57:	6a 04                	push   0x4
c0014d59:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0014d5d:	50                   	push   eax
c0014d5e:	57                   	push   edi
c0014d5f:	e8 2a b9 fe ff       	call   c000068e <memcpy>
c0014d64:	83 c4 0c             	add    esp,0xc
c0014d67:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0014d6d:	6a 04                	push   0x4
c0014d6f:	56                   	push   esi
c0014d70:	50                   	push   eax
c0014d71:	e8 18 b9 fe ff       	call   c000068e <memcpy>
c0014d76:	83 c4 0c             	add    esp,0xc
c0014d79:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0014d7f:	6a 04                	push   0x4
c0014d81:	55                   	push   ebp
c0014d82:	50                   	push   eax
c0014d83:	e8 06 b9 fe ff       	call   c000068e <memcpy>
c0014d88:	58                   	pop    eax
c0014d89:	5a                   	pop    edx
c0014d8a:	68 1d 26 02 c0       	push   0xc002261d
c0014d8f:	57                   	push   edi
c0014d90:	e8 1f ba fe ff       	call   c00007b4 <strcmp>
c0014d95:	83 c4 10             	add    esp,0x10
c0014d98:	85 c0                	test   eax,eax
c0014d9a:	75 0f                	jne    c0014dab <CPU::detectFeatures()+0x1b5>
c0014d9c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0014da6:	e9 22 02 00 00       	jmp    c0014fcd <CPU::detectFeatures()+0x3d7>
c0014dab:	50                   	push   eax
c0014dac:	50                   	push   eax
c0014dad:	68 2a 26 02 c0       	push   0xc002262a
c0014db2:	57                   	push   edi
c0014db3:	e8 fc b9 fe ff       	call   c00007b4 <strcmp>
c0014db8:	83 c4 10             	add    esp,0x10
c0014dbb:	85 c0                	test   eax,eax
c0014dbd:	74 dd                	je     c0014d9c <CPU::detectFeatures()+0x1a6>
c0014dbf:	51                   	push   ecx
c0014dc0:	51                   	push   ecx
c0014dc1:	68 37 26 02 c0       	push   0xc0022637
c0014dc6:	57                   	push   edi
c0014dc7:	e8 e8 b9 fe ff       	call   c00007b4 <strcmp>
c0014dcc:	83 c4 10             	add    esp,0x10
c0014dcf:	85 c0                	test   eax,eax
c0014dd1:	74 2a                	je     c0014dfd <CPU::detectFeatures()+0x207>
c0014dd3:	52                   	push   edx
c0014dd4:	52                   	push   edx
c0014dd5:	68 44 26 02 c0       	push   0xc0022644
c0014dda:	57                   	push   edi
c0014ddb:	e8 d4 b9 fe ff       	call   c00007b4 <strcmp>
c0014de0:	83 c4 10             	add    esp,0x10
c0014de3:	85 c0                	test   eax,eax
c0014de5:	74 16                	je     c0014dfd <CPU::detectFeatures()+0x207>
c0014de7:	50                   	push   eax
c0014de8:	50                   	push   eax
c0014de9:	68 51 26 02 c0       	push   0xc0022651
c0014dee:	57                   	push   edi
c0014def:	e8 c0 b9 fe ff       	call   c00007b4 <strcmp>
c0014df4:	83 c4 10             	add    esp,0x10
c0014df7:	85 c0                	test   eax,eax
c0014df9:	74 48                	je     c0014e43 <CPU::detectFeatures()+0x24d>
c0014dfb:	eb 0f                	jmp    c0014e0c <CPU::detectFeatures()+0x216>
c0014dfd:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0014e07:	e9 c1 01 00 00       	jmp    c0014fcd <CPU::detectFeatures()+0x3d7>
c0014e0c:	50                   	push   eax
c0014e0d:	50                   	push   eax
c0014e0e:	68 5e 26 02 c0       	push   0xc002265e
c0014e13:	57                   	push   edi
c0014e14:	e8 9b b9 fe ff       	call   c00007b4 <strcmp>
c0014e19:	83 c4 10             	add    esp,0x10
c0014e1c:	85 c0                	test   eax,eax
c0014e1e:	74 23                	je     c0014e43 <CPU::detectFeatures()+0x24d>
c0014e20:	50                   	push   eax
c0014e21:	50                   	push   eax
c0014e22:	68 6b 26 02 c0       	push   0xc002266b
c0014e27:	57                   	push   edi
c0014e28:	e8 87 b9 fe ff       	call   c00007b4 <strcmp>
c0014e2d:	83 c4 10             	add    esp,0x10
c0014e30:	85 c0                	test   eax,eax
c0014e32:	75 1e                	jne    c0014e52 <CPU::detectFeatures()+0x25c>
c0014e34:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014e3e:	e9 8a 01 00 00       	jmp    c0014fcd <CPU::detectFeatures()+0x3d7>
c0014e43:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0014e4d:	e9 7b 01 00 00       	jmp    c0014fcd <CPU::detectFeatures()+0x3d7>
c0014e52:	50                   	push   eax
c0014e53:	50                   	push   eax
c0014e54:	68 78 26 02 c0       	push   0xc0022678
c0014e59:	57                   	push   edi
c0014e5a:	e8 55 b9 fe ff       	call   c00007b4 <strcmp>
c0014e5f:	83 c4 10             	add    esp,0x10
c0014e62:	85 c0                	test   eax,eax
c0014e64:	75 0f                	jne    c0014e75 <CPU::detectFeatures()+0x27f>
c0014e66:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0014e70:	e9 58 01 00 00       	jmp    c0014fcd <CPU::detectFeatures()+0x3d7>
c0014e75:	50                   	push   eax
c0014e76:	50                   	push   eax
c0014e77:	68 37 26 02 c0       	push   0xc0022637
c0014e7c:	57                   	push   edi
c0014e7d:	e8 32 b9 fe ff       	call   c00007b4 <strcmp>
c0014e82:	83 c4 10             	add    esp,0x10
c0014e85:	85 c0                	test   eax,eax
c0014e87:	75 0f                	jne    c0014e98 <CPU::detectFeatures()+0x2a2>
c0014e89:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0014e93:	e9 35 01 00 00       	jmp    c0014fcd <CPU::detectFeatures()+0x3d7>
c0014e98:	50                   	push   eax
c0014e99:	50                   	push   eax
c0014e9a:	68 85 26 02 c0       	push   0xc0022685
c0014e9f:	57                   	push   edi
c0014ea0:	e8 0f b9 fe ff       	call   c00007b4 <strcmp>
c0014ea5:	83 c4 10             	add    esp,0x10
c0014ea8:	85 c0                	test   eax,eax
c0014eaa:	75 0f                	jne    c0014ebb <CPU::detectFeatures()+0x2c5>
c0014eac:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0014eb6:	e9 12 01 00 00       	jmp    c0014fcd <CPU::detectFeatures()+0x3d7>
c0014ebb:	51                   	push   ecx
c0014ebc:	51                   	push   ecx
c0014ebd:	68 92 26 02 c0       	push   0xc0022692
c0014ec2:	57                   	push   edi
c0014ec3:	e8 ec b8 fe ff       	call   c00007b4 <strcmp>
c0014ec8:	83 c4 10             	add    esp,0x10
c0014ecb:	85 c0                	test   eax,eax
c0014ecd:	75 0f                	jne    c0014ede <CPU::detectFeatures()+0x2e8>
c0014ecf:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0014ed9:	e9 ef 00 00 00       	jmp    c0014fcd <CPU::detectFeatures()+0x3d7>
c0014ede:	52                   	push   edx
c0014edf:	52                   	push   edx
c0014ee0:	68 9f 26 02 c0       	push   0xc002269f
c0014ee5:	57                   	push   edi
c0014ee6:	e8 c9 b8 fe ff       	call   c00007b4 <strcmp>
c0014eeb:	83 c4 10             	add    esp,0x10
c0014eee:	85 c0                	test   eax,eax
c0014ef0:	75 0f                	jne    c0014f01 <CPU::detectFeatures()+0x30b>
c0014ef2:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0014efc:	e9 cc 00 00 00       	jmp    c0014fcd <CPU::detectFeatures()+0x3d7>
c0014f01:	50                   	push   eax
c0014f02:	50                   	push   eax
c0014f03:	68 ac 26 02 c0       	push   0xc00226ac
c0014f08:	57                   	push   edi
c0014f09:	e8 a6 b8 fe ff       	call   c00007b4 <strcmp>
c0014f0e:	83 c4 10             	add    esp,0x10
c0014f11:	85 c0                	test   eax,eax
c0014f13:	75 0f                	jne    c0014f24 <CPU::detectFeatures()+0x32e>
c0014f15:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0014f1f:	e9 a9 00 00 00       	jmp    c0014fcd <CPU::detectFeatures()+0x3d7>
c0014f24:	50                   	push   eax
c0014f25:	50                   	push   eax
c0014f26:	68 b9 26 02 c0       	push   0xc00226b9
c0014f2b:	57                   	push   edi
c0014f2c:	e8 83 b8 fe ff       	call   c00007b4 <strcmp>
c0014f31:	83 c4 10             	add    esp,0x10
c0014f34:	85 c0                	test   eax,eax
c0014f36:	75 0f                	jne    c0014f47 <CPU::detectFeatures()+0x351>
c0014f38:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0014f42:	e9 86 00 00 00       	jmp    c0014fcd <CPU::detectFeatures()+0x3d7>
c0014f47:	50                   	push   eax
c0014f48:	50                   	push   eax
c0014f49:	68 c6 26 02 c0       	push   0xc00226c6
c0014f4e:	57                   	push   edi
c0014f4f:	e8 60 b8 fe ff       	call   c00007b4 <strcmp>
c0014f54:	83 c4 10             	add    esp,0x10
c0014f57:	85 c0                	test   eax,eax
c0014f59:	75 0c                	jne    c0014f67 <CPU::detectFeatures()+0x371>
c0014f5b:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0014f65:	eb 66                	jmp    c0014fcd <CPU::detectFeatures()+0x3d7>
c0014f67:	50                   	push   eax
c0014f68:	50                   	push   eax
c0014f69:	68 d3 26 02 c0       	push   0xc00226d3
c0014f6e:	57                   	push   edi
c0014f6f:	e8 40 b8 fe ff       	call   c00007b4 <strcmp>
c0014f74:	83 c4 10             	add    esp,0x10
c0014f77:	85 c0                	test   eax,eax
c0014f79:	75 0c                	jne    c0014f87 <CPU::detectFeatures()+0x391>
c0014f7b:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0014f85:	eb 46                	jmp    c0014fcd <CPU::detectFeatures()+0x3d7>
c0014f87:	50                   	push   eax
c0014f88:	50                   	push   eax
c0014f89:	68 e0 26 02 c0       	push   0xc00226e0
c0014f8e:	57                   	push   edi
c0014f8f:	e8 20 b8 fe ff       	call   c00007b4 <strcmp>
c0014f94:	83 c4 10             	add    esp,0x10
c0014f97:	85 c0                	test   eax,eax
c0014f99:	74 e0                	je     c0014f7b <CPU::detectFeatures()+0x385>
c0014f9b:	50                   	push   eax
c0014f9c:	50                   	push   eax
c0014f9d:	68 ed 26 02 c0       	push   0xc00226ed
c0014fa2:	57                   	push   edi
c0014fa3:	e8 0c b8 fe ff       	call   c00007b4 <strcmp>
c0014fa8:	83 c4 10             	add    esp,0x10
c0014fab:	85 c0                	test   eax,eax
c0014fad:	74 cc                	je     c0014f7b <CPU::detectFeatures()+0x385>
c0014faf:	51                   	push   ecx
c0014fb0:	51                   	push   ecx
c0014fb1:	68 fa 26 02 c0       	push   0xc00226fa
c0014fb6:	57                   	push   edi
c0014fb7:	e8 f8 b7 fe ff       	call   c00007b4 <strcmp>
c0014fbc:	83 c4 10             	add    esp,0x10
c0014fbf:	85 c0                	test   eax,eax
c0014fc1:	74 b8                	je     c0014f7b <CPU::detectFeatures()+0x385>
c0014fc3:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0014fcd:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0014fd2:	0f 86 be 00 00 00    	jbe    c0015096 <CPU::detectFeatures()+0x4a0>
c0014fd8:	83 ec 0c             	sub    esp,0xc
c0014fdb:	68 80 00 00 00       	push   0x80
c0014fe0:	e8 96 f8 ff ff       	call   c001487b <cpuidCheckExtendedEBX(unsigned int)>
c0014fe5:	83 e0 01             	and    eax,0x1
c0014fe8:	c1 e0 06             	shl    eax,0x6
c0014feb:	88 c2                	mov    dl,al
c0014fed:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014ff3:	83 e0 bf             	and    eax,0xffffffbf
c0014ff6:	09 d0                	or     eax,edx
c0014ff8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014ffe:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0015005:	e8 71 f8 ff ff       	call   c001487b <cpuidCheckExtendedEBX(unsigned int)>
c001500a:	83 e0 01             	and    eax,0x1
c001500d:	c1 e0 04             	shl    eax,0x4
c0015010:	88 c2                	mov    dl,al
c0015012:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0015018:	83 e0 ef             	and    eax,0xffffffef
c001501b:	09 d0                	or     eax,edx
c001501d:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0015023:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001502a:	e8 4c f8 ff ff       	call   c001487b <cpuidCheckExtendedEBX(unsigned int)>
c001502f:	c1 e0 07             	shl    eax,0x7
c0015032:	88 c2                	mov    dl,al
c0015034:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001503a:	83 e0 7f             	and    eax,0x7f
c001503d:	09 d0                	or     eax,edx
c001503f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0015045:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001504c:	e8 57 f8 ff ff       	call   c00148a8 <cpuidCheckExtendedECX(unsigned int)>
c0015051:	83 e0 01             	and    eax,0x1
c0015054:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001505b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0015061:	83 e0 f7             	and    eax,0xfffffff7
c0015064:	09 d0                	or     eax,edx
c0015066:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001506c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0015073:	e8 30 f8 ff ff       	call   c00148a8 <cpuidCheckExtendedECX(unsigned int)>
c0015078:	83 c4 10             	add    esp,0x10
c001507b:	83 e0 01             	and    eax,0x1
c001507e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0015085:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001508b:	83 e0 fb             	and    eax,0xfffffffb
c001508e:	09 d0                	or     eax,edx
c0015090:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0015096:	83 ec 0c             	sub    esp,0xc
c0015099:	56                   	push   esi
c001509a:	55                   	push   ebp
c001509b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001509f:	57                   	push   edi
c00150a0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00150a4:	50                   	push   eax
c00150a5:	6a 01                	push   0x1
c00150a7:	e8 f2 f6 ff ff       	call   c001479e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00150ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150b0:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00150b6:	88 c1                	mov    cl,al
c00150b8:	83 e2 f0             	and    edx,0xfffffff0
c00150bb:	83 e1 0f             	and    ecx,0xf
c00150be:	09 ca                	or     edx,ecx
c00150c0:	88 c1                	mov    cl,al
c00150c2:	c0 e9 04             	shr    cl,0x4
c00150c5:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00150cb:	0f b6 d1             	movzx  edx,cl
c00150ce:	c1 e2 06             	shl    edx,0x6
c00150d1:	88 4c 24 2f          	mov    BYTE PTR [esp+0x2f],cl
c00150d5:	89 d5                	mov    ebp,edx
c00150d7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00150dd:	66 81 e2 3f c0       	and    dx,0xc03f
c00150e2:	83 c4 20             	add    esp,0x20
c00150e5:	09 ea                	or     edx,ebp
c00150e7:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00150ee:	89 c2                	mov    edx,eax
c00150f0:	c1 ea 08             	shr    edx,0x8
c00150f3:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c00150f9:	83 e2 0f             	and    edx,0xf
c00150fc:	83 e1 3f             	and    ecx,0x3f
c00150ff:	89 d5                	mov    ebp,edx
c0015101:	c1 e5 06             	shl    ebp,0x6
c0015104:	09 cd                	or     ebp,ecx
c0015106:	89 e9                	mov    ecx,ebp
c0015108:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001510e:	88 d1                	mov    cl,dl
c0015110:	c0 e9 02             	shr    cl,0x2
c0015113:	89 cd                	mov    ebp,ecx
c0015115:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001511b:	83 e1 c0             	and    ecx,0xffffffc0
c001511e:	09 cd                	or     ebp,ecx
c0015120:	89 e9                	mov    ecx,ebp
c0015122:	89 c5                	mov    ebp,eax
c0015124:	c1 ed 0c             	shr    ebp,0xc
c0015127:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001512d:	83 e5 03             	and    ebp,0x3
c0015130:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0015136:	c1 e5 04             	shl    ebp,0x4
c0015139:	83 e1 cf             	and    ecx,0xffffffcf
c001513c:	09 cd                	or     ebp,ecx
c001513e:	80 fa 06             	cmp    dl,0x6
c0015141:	89 e9                	mov    ecx,ebp
c0015143:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0015149:	74 05                	je     c0015150 <CPU::detectFeatures()+0x55a>
c001514b:	80 fa 0f             	cmp    dl,0xf
c001514e:	75 5d                	jne    c00151ad <CPU::detectFeatures()+0x5b7>
c0015150:	89 c5                	mov    ebp,eax
c0015152:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015156:	c1 ed 10             	shr    ebp,0x10
c0015159:	c1 e5 04             	shl    ebp,0x4
c001515c:	09 e9                	or     ecx,ebp
c001515e:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0015164:	0f b6 c9             	movzx  ecx,cl
c0015167:	c1 e1 06             	shl    ecx,0x6
c001516a:	66 81 e5 3f c0       	and    bp,0xc03f
c001516f:	09 e9                	or     ecx,ebp
c0015171:	80 fa 0f             	cmp    dl,0xf
c0015174:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c001517b:	75 30                	jne    c00151ad <CPU::detectFeatures()+0x5b7>
c001517d:	c1 e8 14             	shr    eax,0x14
c0015180:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0015186:	83 c0 0f             	add    eax,0xf
c0015189:	83 e2 3f             	and    edx,0x3f
c001518c:	88 c1                	mov    cl,al
c001518e:	c1 e1 06             	shl    ecx,0x6
c0015191:	c0 e8 02             	shr    al,0x2
c0015194:	09 ca                	or     edx,ecx
c0015196:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001519c:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00151a2:	83 e2 c0             	and    edx,0xffffffc0
c00151a5:	09 d0                	or     eax,edx
c00151a7:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00151ad:	83 ec 0c             	sub    esp,0xc
c00151b0:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00151b7:	56                   	push   esi
c00151b8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00151bc:	50                   	push   eax
c00151bd:	57                   	push   edi
c00151be:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00151c2:	55                   	push   ebp
c00151c3:	68 00 00 00 80       	push   0x80000000
c00151c8:	e8 d1 f5 ff ff       	call   c001479e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00151cd:	83 c4 20             	add    esp,0x20
c00151d0:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00151d8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00151dc:	76 1e                	jbe    c00151fc <CPU::detectFeatures()+0x606>
c00151de:	83 ec 0c             	sub    esp,0xc
c00151e1:	56                   	push   esi
c00151e2:	50                   	push   eax
c00151e3:	57                   	push   edi
c00151e4:	55                   	push   ebp
c00151e5:	68 01 00 00 80       	push   0x80000001
c00151ea:	e8 af f5 ff ff       	call   c001479e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00151ef:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00151f9:	83 c4 20             	add    esp,0x20
c00151fc:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0015202:	83 f8 01             	cmp    eax,0x1
c0015205:	75 6f                	jne    c0015276 <CPU::detectFeatures()+0x680>
c0015207:	51                   	push   ecx
c0015208:	51                   	push   ecx
c0015209:	68 06 27 02 c0       	push   0xc0022706
c001520e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015212:	56                   	push   esi
c0015213:	e8 4b b5 fe ff       	call   c0000763 <strcpy>
c0015218:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001521e:	5f                   	pop    edi
c001521f:	66 c1 e8 06          	shr    ax,0x6
c0015223:	5d                   	pop    ebp
c0015224:	0f b6 c0             	movzx  eax,al
c0015227:	50                   	push   eax
c0015228:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001522e:	c1 e8 0e             	shr    eax,0xe
c0015231:	0f b6 c0             	movzx  eax,al
c0015234:	50                   	push   eax
c0015235:	e8 04 f2 ff ff       	call   c001443e <lookupIntelCPUName(unsigned char, unsigned char)>
c001523a:	5a                   	pop    edx
c001523b:	59                   	pop    ecx
c001523c:	50                   	push   eax
c001523d:	56                   	push   esi
c001523e:	e8 d7 b5 fe ff       	call   c000081a <strcat>
c0015243:	5f                   	pop    edi
c0015244:	5d                   	pop    ebp
c0015245:	56                   	push   esi
c0015246:	53                   	push   ebx
c0015247:	e8 c0 b5 ff ff       	call   c001080c <Device::setName(char const*)>
c001524c:	58                   	pop    eax
c001524d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0015253:	5a                   	pop    edx
c0015254:	68 0d 27 02 c0       	push   0xc002270d
c0015259:	50                   	push   eax
c001525a:	e8 55 b5 fe ff       	call   c00007b4 <strcmp>
c001525f:	83 c4 10             	add    esp,0x10
c0015262:	85 c0                	test   eax,eax
c0015264:	0f 85 53 03 00 00    	jne    c00155bd <CPU::detectFeatures()+0x9c7>
c001526a:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0015271:	e9 47 03 00 00       	jmp    c00155bd <CPU::detectFeatures()+0x9c7>
c0015276:	83 f8 02             	cmp    eax,0x2
c0015279:	0f 85 b5 00 00 00    	jne    c0015334 <CPU::detectFeatures()+0x73e>
c001527f:	57                   	push   edi
c0015280:	57                   	push   edi
c0015281:	68 1f 27 02 c0       	push   0xc002271f
c0015286:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001528a:	56                   	push   esi
c001528b:	e8 d3 b4 fe ff       	call   c0000763 <strcpy>
c0015290:	5d                   	pop    ebp
c0015291:	58                   	pop    eax
c0015292:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015298:	66 c1 e8 06          	shr    ax,0x6
c001529c:	0f b6 c0             	movzx  eax,al
c001529f:	50                   	push   eax
c00152a0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00152a6:	c1 e8 0e             	shr    eax,0xe
c00152a9:	0f b6 c0             	movzx  eax,al
c00152ac:	50                   	push   eax
c00152ad:	e8 e7 ef ff ff       	call   c0014299 <lookupAMDCPUName(unsigned char, unsigned char)>
c00152b2:	5a                   	pop    edx
c00152b3:	59                   	pop    ecx
c00152b4:	50                   	push   eax
c00152b5:	56                   	push   esi
c00152b6:	e8 5f b5 fe ff       	call   c000081a <strcat>
c00152bb:	5f                   	pop    edi
c00152bc:	5d                   	pop    ebp
c00152bd:	56                   	push   esi
c00152be:	53                   	push   ebx
c00152bf:	e8 48 b5 ff ff       	call   c001080c <Device::setName(char const*)>
c00152c4:	58                   	pop    eax
c00152c5:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00152cb:	5a                   	pop    edx
c00152cc:	68 24 27 02 c0       	push   0xc0022724
c00152d1:	50                   	push   eax
c00152d2:	e8 dd b4 fe ff       	call   c00007b4 <strcmp>
c00152d7:	83 c4 10             	add    esp,0x10
c00152da:	85 c0                	test   eax,eax
c00152dc:	75 20                	jne    c00152fe <CPU::detectFeatures()+0x708>
c00152de:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c00152e4:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00152ea:	a8 01                	test   al,0x1
c00152ec:	74 10                	je     c00152fe <CPU::detectFeatures()+0x708>
c00152ee:	83 e0 fe             	and    eax,0xfffffffe
c00152f1:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00152f7:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00152fe:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015304:	c1 e8 0e             	shr    eax,0xe
c0015307:	3c 05                	cmp    al,0x5
c0015309:	0f 85 ae 02 00 00    	jne    c00155bd <CPU::detectFeatures()+0x9c7>
c001530f:	56                   	push   esi
c0015310:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0015316:	83 e0 0f             	and    eax,0xf
c0015319:	50                   	push   eax
c001531a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015320:	66 c1 e8 06          	shr    ax,0x6
c0015324:	0f b6 c0             	movzx  eax,al
c0015327:	50                   	push   eax
c0015328:	6a 05                	push   0x5
c001532a:	e8 fc f3 ff ff       	call   c001472b <AMD_K6_writeback(int, int, int)>
c001532f:	e9 ff 01 00 00       	jmp    c0015533 <CPU::detectFeatures()+0x93d>
c0015334:	89 c1                	mov    ecx,eax
c0015336:	83 e1 fd             	and    ecx,0xfffffffd
c0015339:	83 f9 04             	cmp    ecx,0x4
c001533c:	74 09                	je     c0015347 <CPU::detectFeatures()+0x751>
c001533e:	83 f8 03             	cmp    eax,0x3
c0015341:	0f 85 6f 01 00 00    	jne    c00154b6 <CPU::detectFeatures()+0x8c0>
c0015347:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001534d:	c1 ea 0e             	shr    edx,0xe
c0015350:	80 fa 05             	cmp    dl,0x5
c0015353:	75 62                	jne    c00153b7 <CPU::detectFeatures()+0x7c1>
c0015355:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001535b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0015360:	66 81 fa 00 01       	cmp    dx,0x100
c0015365:	75 0c                	jne    c0015373 <CPU::detectFeatures()+0x77d>
c0015367:	51                   	push   ecx
c0015368:	51                   	push   ecx
c0015369:	68 2b 27 02 c0       	push   0xc002272b
c001536e:	e9 ba 01 00 00       	jmp    c001552d <CPU::detectFeatures()+0x937>
c0015373:	66 81 fa 00 02       	cmp    dx,0x200
c0015378:	75 0c                	jne    c0015386 <CPU::detectFeatures()+0x790>
c001537a:	52                   	push   edx
c001537b:	52                   	push   edx
c001537c:	68 3e 27 02 c0       	push   0xc002273e
c0015381:	e9 a7 01 00 00       	jmp    c001552d <CPU::detectFeatures()+0x937>
c0015386:	66 81 fa 40 02       	cmp    dx,0x240
c001538b:	75 0c                	jne    c0015399 <CPU::detectFeatures()+0x7a3>
c001538d:	50                   	push   eax
c001538e:	50                   	push   eax
c001538f:	68 50 27 02 c0       	push   0xc0022750
c0015394:	e9 94 01 00 00       	jmp    c001552d <CPU::detectFeatures()+0x937>
c0015399:	83 f8 06             	cmp    eax,0x6
c001539c:	0f 84 ee 00 00 00    	je     c0015490 <CPU::detectFeatures()+0x89a>
c00153a2:	83 f9 04             	cmp    ecx,0x4
c00153a5:	0f 84 f6 00 00 00    	je     c00154a1 <CPU::detectFeatures()+0x8ab>
c00153ab:	50                   	push   eax
c00153ac:	50                   	push   eax
c00153ad:	68 76 27 02 c0       	push   0xc0022776
c00153b2:	e9 76 01 00 00       	jmp    c001552d <CPU::detectFeatures()+0x937>
c00153b7:	80 fa 06             	cmp    dl,0x6
c00153ba:	0f 85 cb 00 00 00    	jne    c001548b <CPU::detectFeatures()+0x895>
c00153c0:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00153c6:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00153cb:	66 81 fa 80 01       	cmp    dx,0x180
c00153d0:	75 0c                	jne    c00153de <CPU::detectFeatures()+0x7e8>
c00153d2:	50                   	push   eax
c00153d3:	50                   	push   eax
c00153d4:	68 81 27 02 c0       	push   0xc0022781
c00153d9:	e9 4f 01 00 00       	jmp    c001552d <CPU::detectFeatures()+0x937>
c00153de:	66 81 fa c0 01       	cmp    dx,0x1c0
c00153e3:	74 07                	je     c00153ec <CPU::detectFeatures()+0x7f6>
c00153e5:	66 81 fa 00 02       	cmp    dx,0x200
c00153ea:	75 0c                	jne    c00153f8 <CPU::detectFeatures()+0x802>
c00153ec:	50                   	push   eax
c00153ed:	50                   	push   eax
c00153ee:	68 91 27 02 c0       	push   0xc0022791
c00153f3:	e9 35 01 00 00       	jmp    c001552d <CPU::detectFeatures()+0x937>
c00153f8:	66 81 fa 40 02       	cmp    dx,0x240
c00153fd:	75 0c                	jne    c001540b <CPU::detectFeatures()+0x815>
c00153ff:	50                   	push   eax
c0015400:	50                   	push   eax
c0015401:	68 98 27 02 c0       	push   0xc0022798
c0015406:	e9 22 01 00 00       	jmp    c001552d <CPU::detectFeatures()+0x937>
c001540b:	66 81 fa 80 02       	cmp    dx,0x280
c0015410:	74 07                	je     c0015419 <CPU::detectFeatures()+0x823>
c0015412:	66 81 fa 40 03       	cmp    dx,0x340
c0015417:	75 0c                	jne    c0015425 <CPU::detectFeatures()+0x82f>
c0015419:	50                   	push   eax
c001541a:	50                   	push   eax
c001541b:	68 a1 27 02 c0       	push   0xc00227a1
c0015420:	e9 08 01 00 00       	jmp    c001552d <CPU::detectFeatures()+0x937>
c0015425:	66 81 fa c0 03       	cmp    dx,0x3c0
c001542a:	75 0c                	jne    c0015438 <CPU::detectFeatures()+0x842>
c001542c:	55                   	push   ebp
c001542d:	55                   	push   ebp
c001542e:	68 a8 27 02 c0       	push   0xc00227a8
c0015433:	e9 f5 00 00 00       	jmp    c001552d <CPU::detectFeatures()+0x937>
c0015438:	83 f8 06             	cmp    eax,0x6
c001543b:	74 53                	je     c0015490 <CPU::detectFeatures()+0x89a>
c001543d:	83 f9 04             	cmp    ecx,0x4
c0015440:	74 5f                	je     c00154a1 <CPU::detectFeatures()+0x8ab>
c0015442:	57                   	push   edi
c0015443:	57                   	push   edi
c0015444:	68 b1 27 02 c0       	push   0xc00227b1
c0015449:	53                   	push   ebx
c001544a:	e8 bd b3 ff ff       	call   c001080c <Device::setName(char const*)>
c001544f:	b1 c1                	mov    cl,0xc1
c0015451:	88 c8                	mov    al,cl
c0015453:	e6 22                	out    0x22,al
c0015455:	e4 23                	in     al,0x23
c0015457:	88 c2                	mov    dl,al
c0015459:	88 c8                	mov    al,cl
c001545b:	e6 22                	out    0x22,al
c001545d:	88 d0                	mov    al,dl
c001545f:	83 c8 10             	or     eax,0x10
c0015462:	e6 23                	out    0x23,al
c0015464:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001546b:	89 d0                	mov    eax,edx
c001546d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0015470:	40                   	inc    eax
c0015471:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0015477:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001547b:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0015481:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0015486:	e9 a8 00 00 00       	jmp    c0015533 <CPU::detectFeatures()+0x93d>
c001548b:	83 f8 06             	cmp    eax,0x6
c001548e:	75 0c                	jne    c001549c <CPU::detectFeatures()+0x8a6>
c0015490:	56                   	push   esi
c0015491:	56                   	push   esi
c0015492:	68 62 27 02 c0       	push   0xc0022762
c0015497:	e9 91 00 00 00       	jmp    c001552d <CPU::detectFeatures()+0x937>
c001549c:	83 f9 04             	cmp    ecx,0x4
c001549f:	75 0c                	jne    c00154ad <CPU::detectFeatures()+0x8b7>
c00154a1:	51                   	push   ecx
c00154a2:	51                   	push   ecx
c00154a3:	68 6e 27 02 c0       	push   0xc002276e
c00154a8:	e9 80 00 00 00       	jmp    c001552d <CPU::detectFeatures()+0x937>
c00154ad:	52                   	push   edx
c00154ae:	52                   	push   edx
c00154af:	68 bc 27 02 c0       	push   0xc00227bc
c00154b4:	eb 77                	jmp    c001552d <CPU::detectFeatures()+0x937>
c00154b6:	83 f8 07             	cmp    eax,0x7
c00154b9:	75 09                	jne    c00154c4 <CPU::detectFeatures()+0x8ce>
c00154bb:	50                   	push   eax
c00154bc:	50                   	push   eax
c00154bd:	68 c6 27 02 c0       	push   0xc00227c6
c00154c2:	eb 69                	jmp    c001552d <CPU::detectFeatures()+0x937>
c00154c4:	83 f8 0a             	cmp    eax,0xa
c00154c7:	75 09                	jne    c00154d2 <CPU::detectFeatures()+0x8dc>
c00154c9:	50                   	push   eax
c00154ca:	50                   	push   eax
c00154cb:	68 d1 27 02 c0       	push   0xc00227d1
c00154d0:	eb 5b                	jmp    c001552d <CPU::detectFeatures()+0x937>
c00154d2:	83 f8 0b             	cmp    eax,0xb
c00154d5:	75 09                	jne    c00154e0 <CPU::detectFeatures()+0x8ea>
c00154d7:	50                   	push   eax
c00154d8:	50                   	push   eax
c00154d9:	68 d9 27 02 c0       	push   0xc00227d9
c00154de:	eb 4d                	jmp    c001552d <CPU::detectFeatures()+0x937>
c00154e0:	83 f8 08             	cmp    eax,0x8
c00154e3:	75 09                	jne    c00154ee <CPU::detectFeatures()+0x8f8>
c00154e5:	50                   	push   eax
c00154e6:	50                   	push   eax
c00154e7:	68 e2 27 02 c0       	push   0xc00227e2
c00154ec:	eb 3f                	jmp    c001552d <CPU::detectFeatures()+0x937>
c00154ee:	83 f8 09             	cmp    eax,0x9
c00154f1:	75 09                	jne    c00154fc <CPU::detectFeatures()+0x906>
c00154f3:	50                   	push   eax
c00154f4:	50                   	push   eax
c00154f5:	68 ea 27 02 c0       	push   0xc00227ea
c00154fa:	eb 31                	jmp    c001552d <CPU::detectFeatures()+0x937>
c00154fc:	83 f8 05             	cmp    eax,0x5
c00154ff:	75 09                	jne    c001550a <CPU::detectFeatures()+0x914>
c0015501:	50                   	push   eax
c0015502:	50                   	push   eax
c0015503:	68 f2 27 02 c0       	push   0xc00227f2
c0015508:	eb 23                	jmp    c001552d <CPU::detectFeatures()+0x937>
c001550a:	83 f8 0c             	cmp    eax,0xc
c001550d:	75 09                	jne    c0015518 <CPU::detectFeatures()+0x922>
c001550f:	55                   	push   ebp
c0015510:	55                   	push   ebp
c0015511:	68 00 28 02 c0       	push   0xc0022800
c0015516:	eb 15                	jmp    c001552d <CPU::detectFeatures()+0x937>
c0015518:	83 f8 0d             	cmp    eax,0xd
c001551b:	75 09                	jne    c0015526 <CPU::detectFeatures()+0x930>
c001551d:	57                   	push   edi
c001551e:	57                   	push   edi
c001551f:	68 0b 28 02 c0       	push   0xc002280b
c0015524:	eb 07                	jmp    c001552d <CPU::detectFeatures()+0x937>
c0015526:	56                   	push   esi
c0015527:	56                   	push   esi
c0015528:	68 1f 28 02 c0       	push   0xc002281f
c001552d:	53                   	push   ebx
c001552e:	e8 d9 b2 ff ff       	call   c001080c <Device::setName(char const*)>
c0015533:	83 c4 10             	add    esp,0x10
c0015536:	e9 82 00 00 00       	jmp    c00155bd <CPU::detectFeatures()+0x9c7>
c001553b:	51                   	push   ecx
c001553c:	51                   	push   ecx
c001553d:	68 6b 26 02 c0       	push   0xc002266b
c0015542:	57                   	push   edi
c0015543:	e8 1b b2 fe ff       	call   c0000763 <strcpy>
c0015548:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0015552:	e8 df ac fe ff       	call   c0000236 <is486>
c0015557:	83 c4 10             	add    esp,0x10
c001555a:	85 c0                	test   eax,eax
c001555c:	74 2d                	je     c001558b <CPU::detectFeatures()+0x995>
c001555e:	52                   	push   edx
c001555f:	52                   	push   edx
c0015560:	68 2b 28 02 c0       	push   0xc002282b
c0015565:	53                   	push   ebx
c0015566:	e8 a1 b2 ff ff       	call   c001080c <Device::setName(char const*)>
c001556b:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0015572:	e8 e1 a5 00 00       	call   c001fb58 <CPU::readCR0()>
c0015577:	83 c4 10             	add    esp,0x10
c001557a:	83 e0 14             	and    eax,0x14
c001557d:	83 f8 04             	cmp    eax,0x4
c0015580:	75 1f                	jne    c00155a1 <CPU::detectFeatures()+0x9ab>
c0015582:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0015589:	eb 32                	jmp    c00155bd <CPU::detectFeatures()+0x9c7>
c001558b:	50                   	push   eax
c001558c:	50                   	push   eax
c001558d:	68 36 28 02 c0       	push   0xc0022836
c0015592:	53                   	push   ebx
c0015593:	e8 74 b2 ff ff       	call   c001080c <Device::setName(char const*)>
c0015598:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001559f:	eb d1                	jmp    c0015572 <CPU::detectFeatures()+0x97c>
c00155a1:	e8 6b ac fe ff       	call   c0000211 <hasLegacyFPU>
c00155a6:	83 e0 01             	and    eax,0x1
c00155a9:	8d 14 00             	lea    edx,[eax+eax*1]
c00155ac:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00155b2:	83 e0 fd             	and    eax,0xfffffffd
c00155b5:	09 d0                	or     eax,edx
c00155b7:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00155bd:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00155c4:	83 c4 4c             	add    esp,0x4c
c00155c7:	5b                   	pop    ebx
c00155c8:	5e                   	pop    esi
c00155c9:	5f                   	pop    edi
c00155ca:	5d                   	pop    ebp
c00155cb:	c3                   	ret    

c00155cc <CPU::setupSMEP()>:
c00155cc:	83 ec 0c             	sub    esp,0xc
c00155cf:	e8 4e a8 00 00       	call   c001fe22 <CPU::readCR4()>
c00155d4:	0d 00 00 10 00       	or     eax,0x100000
c00155d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00155dd:	83 c4 0c             	add    esp,0xc
c00155e0:	e9 58 a8 00 00       	jmp    c001fe3d <CPU::writeCR4(unsigned long)>
c00155e5:	90                   	nop

c00155e6 <CPU::setupUMIP()>:
c00155e6:	83 ec 0c             	sub    esp,0xc
c00155e9:	e8 34 a8 00 00       	call   c001fe22 <CPU::readCR4()>
c00155ee:	80 cc 08             	or     ah,0x8
c00155f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00155f5:	83 c4 0c             	add    esp,0xc
c00155f8:	e9 40 a8 00 00       	jmp    c001fe3d <CPU::writeCR4(unsigned long)>
c00155fd:	90                   	nop

c00155fe <CPU::setupTSC()>:
c00155fe:	83 ec 0c             	sub    esp,0xc
c0015601:	e8 1c a8 00 00       	call   c001fe22 <CPU::readCR4()>
c0015606:	83 c8 04             	or     eax,0x4
c0015609:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001560d:	83 c4 0c             	add    esp,0xc
c0015610:	e9 28 a8 00 00       	jmp    c001fe3d <CPU::writeCR4(unsigned long)>
c0015615:	90                   	nop

c0015616 <CPU::setupLargePages()>:
c0015616:	83 ec 0c             	sub    esp,0xc
c0015619:	e8 04 a8 00 00       	call   c001fe22 <CPU::readCR4()>
c001561e:	83 c8 10             	or     eax,0x10
c0015621:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015625:	83 c4 0c             	add    esp,0xc
c0015628:	e9 10 a8 00 00       	jmp    c001fe3d <CPU::writeCR4(unsigned long)>
c001562d:	90                   	nop

c001562e <CPU::setupPAT()>:
c001562e:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0015633:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001563a:	74 2c                	je     c0015668 <CPU::setupPAT()+0x3a>
c001563c:	53                   	push   ebx
c001563d:	83 ec 10             	sub    esp,0x10
c0015640:	68 77 02 00 00       	push   0x277
c0015645:	50                   	push   eax
c0015646:	e8 35 5f ff ff       	call   c000b580 <Computer::rdmsr(unsigned int)>
c001564b:	83 e2 f8             	and    edx,0xfffffff8
c001564e:	83 ca 01             	or     edx,0x1
c0015651:	52                   	push   edx
c0015652:	50                   	push   eax
c0015653:	68 77 02 00 00       	push   0x277
c0015658:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c001565e:	e8 49 5f ff ff       	call   c000b5ac <Computer::wrmsr(unsigned int, unsigned long long)>
c0015663:	83 c4 28             	add    esp,0x28
c0015666:	5b                   	pop    ebx
c0015667:	c3                   	ret    
c0015668:	c3                   	ret    
c0015669:	90                   	nop

c001566a <CPU::setupMTRR()>:
c001566a:	c3                   	ret    
c001566b:	90                   	nop

c001566c <CPU::setupGlobalPages()>:
c001566c:	83 ec 0c             	sub    esp,0xc
c001566f:	e8 ae a7 00 00       	call   c001fe22 <CPU::readCR4()>
c0015674:	0c 80                	or     al,0x80
c0015676:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001567a:	83 c4 0c             	add    esp,0xc
c001567d:	e9 bb a7 00 00       	jmp    c001fe3d <CPU::writeCR4(unsigned long)>

c0015682 <CPU::allowUsermodeDataAccess()>:
c0015682:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015686:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001568d:	74 03                	je     c0015692 <CPU::allowUsermodeDataAccess()+0x10>
c001568f:	0f 01 cb             	stac   
c0015692:	c3                   	ret    
c0015693:	90                   	nop

c0015694 <CPU::prohibitUsermodeDataAccess()>:
c0015694:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015698:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001569f:	74 03                	je     c00156a4 <CPU::prohibitUsermodeDataAccess()+0x10>
c00156a1:	0f 01 ca             	clac   
c00156a4:	c3                   	ret    
c00156a5:	90                   	nop

c00156a6 <CPU::setupSMAP()>:
c00156a6:	53                   	push   ebx
c00156a7:	83 ec 08             	sub    esp,0x8
c00156aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00156ae:	e8 6f a7 00 00       	call   c001fe22 <CPU::readCR4()>
c00156b3:	83 ec 0c             	sub    esp,0xc
c00156b6:	0d 00 00 20 00       	or     eax,0x200000
c00156bb:	50                   	push   eax
c00156bc:	e8 7c a7 00 00       	call   c001fe3d <CPU::writeCR4(unsigned long)>
c00156c1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00156c5:	83 c4 18             	add    esp,0x18
c00156c8:	5b                   	pop    ebx
c00156c9:	eb c9                	jmp    c0015694 <CPU::prohibitUsermodeDataAccess()>
c00156cb:	90                   	nop

c00156cc <CPU::setupFeatures()>:
c00156cc:	53                   	push   ebx
c00156cd:	83 ec 08             	sub    esp,0x8
c00156d0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00156d4:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00156db:	74 0c                	je     c00156e9 <CPU::setupFeatures()+0x1d>
c00156dd:	83 ec 0c             	sub    esp,0xc
c00156e0:	53                   	push   ebx
c00156e1:	e8 e6 fe ff ff       	call   c00155cc <CPU::setupSMEP()>
c00156e6:	83 c4 10             	add    esp,0x10
c00156e9:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00156f0:	74 0c                	je     c00156fe <CPU::setupFeatures()+0x32>
c00156f2:	83 ec 0c             	sub    esp,0xc
c00156f5:	53                   	push   ebx
c00156f6:	e8 ab ff ff ff       	call   c00156a6 <CPU::setupSMAP()>
c00156fb:	83 c4 10             	add    esp,0x10
c00156fe:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0015705:	74 0c                	je     c0015713 <CPU::setupFeatures()+0x47>
c0015707:	83 ec 0c             	sub    esp,0xc
c001570a:	53                   	push   ebx
c001570b:	e8 d6 fe ff ff       	call   c00155e6 <CPU::setupUMIP()>
c0015710:	83 c4 10             	add    esp,0x10
c0015713:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001571a:	74 0c                	je     c0015728 <CPU::setupFeatures()+0x5c>
c001571c:	83 ec 0c             	sub    esp,0xc
c001571f:	53                   	push   ebx
c0015720:	e8 d9 fe ff ff       	call   c00155fe <CPU::setupTSC()>
c0015725:	83 c4 10             	add    esp,0x10
c0015728:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001572f:	74 0c                	je     c001573d <CPU::setupFeatures()+0x71>
c0015731:	83 ec 0c             	sub    esp,0xc
c0015734:	53                   	push   ebx
c0015735:	e8 dc fe ff ff       	call   c0015616 <CPU::setupLargePages()>
c001573a:	83 c4 10             	add    esp,0x10
c001573d:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0015744:	74 0c                	je     c0015752 <CPU::setupFeatures()+0x86>
c0015746:	83 ec 0c             	sub    esp,0xc
c0015749:	53                   	push   ebx
c001574a:	e8 1d ff ff ff       	call   c001566c <CPU::setupGlobalPages()>
c001574f:	83 c4 10             	add    esp,0x10
c0015752:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0015759:	74 0d                	je     c0015768 <CPU::setupFeatures()+0x9c>
c001575b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001575f:	83 c4 08             	add    esp,0x8
c0015762:	5b                   	pop    ebx
c0015763:	e9 c6 fe ff ff       	jmp    c001562e <CPU::setupPAT()>
c0015768:	83 c4 08             	add    esp,0x8
c001576b:	5b                   	pop    ebx
c001576c:	c3                   	ret    
c001576d:	90                   	nop

c001576e <CPU::open(int, int, void*)>:
c001576e:	57                   	push   edi
c001576f:	56                   	push   esi
c0015770:	53                   	push   ebx
c0015771:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015775:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015779:	83 ec 0c             	sub    esp,0xc
c001577c:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0015782:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0015788:	50                   	push   eax
c0015789:	e8 e2 60 ff ff       	call   c000b870 <GDT::setup()>
c001578e:	83 c4 0c             	add    esp,0xc
c0015791:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0015797:	6a 00                	push   0x0
c0015799:	68 ef be ad de       	push   0xdeadbeef
c001579e:	57                   	push   edi
c001579f:	e8 62 83 ff ff       	call   c000db06 <TSS::setup(unsigned long, unsigned long)>
c00157a4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00157a7:	e8 3a 83 ff ff       	call   c000dae6 <TSS::flush()>
c00157ac:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00157b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00157b5:	e8 10 63 ff ff       	call   c000baca <IDT::setup()>
c00157ba:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c00157c1:	e8 6e a6 00 00       	call   c001fe34 <CPU::writeDR7(unsigned long)>
c00157c6:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00157d0:	e8 e4 6d ff ff       	call   c000c5b9 <Phys::allocatePage()>
c00157d5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00157db:	89 30                	mov    DWORD PTR [eax],esi
c00157dd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00157e3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00157e6:	58                   	pop    eax
c00157e7:	5a                   	pop    edx
c00157e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00157ee:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00157f2:	e8 a3 93 ff ff       	call   c000eb9a <VAS::setCPUSpecific(unsigned long)>
c00157f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00157fa:	e8 f7 f3 ff ff       	call   c0014bf6 <CPU::detectFeatures()>
c00157ff:	e8 22 c3 ff ff       	call   c0011b26 <setupInterruptController()>
c0015804:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001580a:	a1 c0 47 02 c0       	mov    eax,ds:0xc00247c0
c001580f:	83 e0 10             	and    eax,0x10
c0015812:	83 f8 01             	cmp    eax,0x1
c0015815:	19 c0                	sbb    eax,eax
c0015817:	83 e0 46             	and    eax,0x46
c001581a:	83 c0 1e             	add    eax,0x1e
c001581d:	89 04 24             	mov    DWORD PTR [esp],eax
c0015820:	e8 a7 d6 ff ff       	call   c0012ecc <setupTimer(int)>
c0015825:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c001582b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001582e:	e8 99 fe ff ff       	call   c00156cc <CPU::setupFeatures()>
c0015833:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015836:	e8 3f f1 ff ff       	call   c001497a <CPU::displayFeatures()>
c001583b:	83 c4 10             	add    esp,0x10
c001583e:	5b                   	pop    ebx
c001583f:	31 c0                	xor    eax,eax
c0015841:	5e                   	pop    esi
c0015842:	5f                   	pop    edi
c0015843:	c3                   	ret    

c0015844 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0015844:	56                   	push   esi
c0015845:	53                   	push   ebx
c0015846:	51                   	push   ecx
c0015847:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001584b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001584f:	8b 5a 38             	mov    ebx,DWORD PTR [edx+0x38]
c0015852:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0015855:	88 c1                	mov    cl,al
c0015857:	c0 e9 06             	shr    cl,0x6
c001585a:	88 0c 24             	mov    BYTE PTR [esp],cl
c001585d:	88 c1                	mov    cl,al
c001585f:	66 c1 e8 03          	shr    ax,0x3
c0015863:	83 e1 07             	and    ecx,0x7
c0015866:	83 e0 07             	and    eax,0x7
c0015869:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c001586d:	88 06                	mov    BYTE PTR [esi],al
c001586f:	74 7f                	je     c00158f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c0015871:	80 f9 04             	cmp    cl,0x4
c0015874:	74 7a                	je     c00158f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c0015876:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001587a:	75 05                	jne    c0015881 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x3d>
c001587c:	80 f9 05             	cmp    cl,0x5
c001587f:	74 6f                	je     c00158f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c0015881:	84 c9                	test   cl,cl
c0015883:	75 05                	jne    c001588a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x46>
c0015885:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c0015888:	eb 3c                	jmp    c00158c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c001588a:	80 f9 01             	cmp    cl,0x1
c001588d:	75 05                	jne    c0015894 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x50>
c001588f:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0015892:	eb 32                	jmp    c00158c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015894:	80 f9 02             	cmp    cl,0x2
c0015897:	75 05                	jne    c001589e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5a>
c0015899:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001589c:	eb 28                	jmp    c00158c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c001589e:	31 c0                	xor    eax,eax
c00158a0:	80 f9 03             	cmp    cl,0x3
c00158a3:	75 05                	jne    c00158aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x66>
c00158a5:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00158a8:	eb 1c                	jmp    c00158c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158aa:	80 f9 05             	cmp    cl,0x5
c00158ad:	75 05                	jne    c00158b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x70>
c00158af:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c00158b2:	eb 12                	jmp    c00158c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158b4:	80 f9 06             	cmp    cl,0x6
c00158b7:	75 05                	jne    c00158be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7a>
c00158b9:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00158bc:	eb 08                	jmp    c00158c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158be:	80 f9 07             	cmp    cl,0x7
c00158c1:	75 03                	jne    c00158c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158c3:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00158c6:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c00158ca:	75 10                	jne    c00158dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x98>
c00158cc:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00158d0:	b9 03 00 00 00       	mov    ecx,0x3
c00158d5:	01 d0                	add    eax,edx
c00158d7:	e9 42 01 00 00       	jmp    c0015a1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c00158dc:	b9 02 00 00 00       	mov    ecx,0x2
c00158e1:	80 3c 24 02          	cmp    BYTE PTR [esp],0x2
c00158e5:	0f 85 33 01 00 00    	jne    c0015a1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c00158eb:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00158ee:	eb 18                	jmp    c0015908 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xc4>
c00158f0:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00158f4:	0f 94 44 24 02       	sete   BYTE PTR [esp+0x2]
c00158f9:	80 f9 05             	cmp    cl,0x5
c00158fc:	0f 94 c0             	sete   al
c00158ff:	84 44 24 02          	test   BYTE PTR [esp+0x2],al
c0015903:	74 0d                	je     c0015912 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0015905:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0015908:	b9 06 00 00 00       	mov    ecx,0x6
c001590d:	e9 0c 01 00 00       	jmp    c0015a1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c0015912:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c0015916:	0f 84 06 01 00 00    	je     c0015a22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1de>
c001591c:	80 f9 04             	cmp    cl,0x4
c001591f:	0f 85 06 01 00 00    	jne    c0015a2b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c0015925:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0015928:	89 c6                	mov    esi,eax
c001592a:	88 c1                	mov    cl,al
c001592c:	66 c1 ee 03          	shr    si,0x3
c0015930:	c0 e9 06             	shr    cl,0x6
c0015933:	83 e6 07             	and    esi,0x7
c0015936:	24 07                	and    al,0x7
c0015938:	88 4c 24 03          	mov    BYTE PTR [esp+0x3],cl
c001593c:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015940:	89 f1                	mov    ecx,esi
c0015942:	75 05                	jne    c0015949 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x105>
c0015944:	8b 72 2c             	mov    esi,DWORD PTR [edx+0x2c]
c0015947:	eb 4b                	jmp    c0015994 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015949:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001594e:	75 05                	jne    c0015955 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x111>
c0015950:	8b 72 28             	mov    esi,DWORD PTR [edx+0x28]
c0015953:	eb 3f                	jmp    c0015994 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015955:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001595a:	75 05                	jne    c0015961 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x11d>
c001595c:	8b 72 24             	mov    esi,DWORD PTR [edx+0x24]
c001595f:	eb 33                	jmp    c0015994 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015961:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0015966:	75 05                	jne    c001596d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x129>
c0015968:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001596b:	eb 27                	jmp    c0015994 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001596d:	80 7c 24 01 04       	cmp    BYTE PTR [esp+0x1],0x4
c0015972:	75 05                	jne    c0015979 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x135>
c0015974:	8b 72 44             	mov    esi,DWORD PTR [edx+0x44]
c0015977:	eb 1b                	jmp    c0015994 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015979:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c001597e:	75 05                	jne    c0015985 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x141>
c0015980:	8b 72 18             	mov    esi,DWORD PTR [edx+0x18]
c0015983:	eb 0f                	jmp    c0015994 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015985:	80 7c 24 01 06       	cmp    BYTE PTR [esp+0x1],0x6
c001598a:	75 05                	jne    c0015991 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14d>
c001598c:	8b 72 14             	mov    esi,DWORD PTR [edx+0x14]
c001598f:	eb 03                	jmp    c0015994 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015991:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0015994:	84 c9                	test   cl,cl
c0015996:	75 05                	jne    c001599d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0015998:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c001599b:	eb 3c                	jmp    c00159d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c001599d:	80 f9 01             	cmp    cl,0x1
c00159a0:	75 05                	jne    c00159a7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00159a2:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00159a5:	eb 32                	jmp    c00159d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159a7:	80 f9 02             	cmp    cl,0x2
c00159aa:	75 05                	jne    c00159b1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00159ac:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00159af:	eb 28                	jmp    c00159d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159b1:	80 f9 03             	cmp    cl,0x3
c00159b4:	75 05                	jne    c00159bb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x177>
c00159b6:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00159b9:	eb 1e                	jmp    c00159d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159bb:	31 c0                	xor    eax,eax
c00159bd:	80 f9 04             	cmp    cl,0x4
c00159c0:	74 17                	je     c00159d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159c2:	80 f9 05             	cmp    cl,0x5
c00159c5:	75 05                	jne    c00159cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00159c7:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c00159ca:	eb 0d                	jmp    c00159d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159cc:	80 f9 06             	cmp    cl,0x6
c00159cf:	75 05                	jne    c00159d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x192>
c00159d1:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00159d4:	eb 03                	jmp    c00159d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159d6:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00159d9:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c00159de:	8a 4c 24 03          	mov    cl,BYTE PTR [esp+0x3]
c00159e2:	0f 94 c2             	sete   dl
c00159e5:	d3 e0                	shl    eax,cl
c00159e7:	22 54 24 02          	and    dl,BYTE PTR [esp+0x2]
c00159eb:	74 07                	je     c00159f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b0>
c00159ed:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00159f0:	31 d2                	xor    edx,edx
c00159f2:	eb 23                	jmp    c0015a17 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00159f4:	01 f0                	add    eax,esi
c00159f6:	b9 03 00 00 00       	mov    ecx,0x3
c00159fb:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00159ff:	74 33                	je     c0015a34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015a01:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c0015a05:	75 0d                	jne    c0015a14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d0>
c0015a07:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0015a0b:	01 c8                	add    eax,ecx
c0015a0d:	b9 04 00 00 00       	mov    ecx,0x4
c0015a12:	eb 20                	jmp    c0015a34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015a14:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0015a17:	b9 07 00 00 00       	mov    ecx,0x7
c0015a1c:	eb 16                	jmp    c0015a34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015a1e:	31 d2                	xor    edx,edx
c0015a20:	eb 12                	jmp    c0015a34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015a22:	b9 02 00 00 00       	mov    ecx,0x2
c0015a27:	b2 01                	mov    dl,0x1
c0015a29:	eb 07                	jmp    c0015a32 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ee>
c0015a2b:	31 d2                	xor    edx,edx
c0015a2d:	b9 02 00 00 00       	mov    ecx,0x2
c0015a32:	31 c0                	xor    eax,eax
c0015a34:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015a38:	89 0b                	mov    DWORD PTR [ebx],ecx
c0015a3a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015a3e:	88 11                	mov    BYTE PTR [ecx],dl
c0015a40:	5a                   	pop    edx
c0015a41:	5b                   	pop    ebx
c0015a42:	5e                   	pop    esi
c0015a43:	c3                   	ret    

c0015a44 <Krnl::panic(char const*)>:
c0015a44:	55                   	push   ebp
c0015a45:	89 e5                	mov    ebp,esp
c0015a47:	53                   	push   ebx
c0015a48:	51                   	push   ecx
c0015a49:	a1 f0 51 02 c0       	mov    eax,ds:0xc00251f0
c0015a4e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0015a51:	85 c0                	test   eax,eax
c0015a53:	74 02                	je     c0015a57 <Krnl::panic(char const*)+0x13>
c0015a55:	ff d0                	call   eax
c0015a57:	fa                   	cli    
c0015a58:	50                   	push   eax
c0015a59:	c6 05 f4 51 02 c0 01 	mov    BYTE PTR ds:0xc00251f4,0x1
c0015a60:	50                   	push   eax
c0015a61:	c6 05 e0 3b 02 c0 00 	mov    BYTE PTR ds:0xc0023be0,0x0
c0015a68:	53                   	push   ebx
c0015a69:	68 70 28 02 c0       	push   0xc0022870
c0015a6e:	e8 a2 97 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0015a73:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015a78:	5a                   	pop    edx
c0015a79:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015a7f:	51                   	push   ecx
c0015a80:	e8 c0 78 ff ff       	call   c000d345 <setActiveTerminal(VgaText*)>
c0015a85:	83 c4 0c             	add    esp,0xc
c0015a88:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015a8d:	6a 01                	push   0x1
c0015a8f:	6a 0f                	push   0xf
c0015a91:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015a97:	50                   	push   eax
c0015a98:	e8 e7 72 ff ff       	call   c000cd84 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015a9d:	58                   	pop    eax
c0015a9e:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015aa3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015aa9:	50                   	push   eax
c0015aaa:	e8 39 7b ff ff       	call   c000d5e8 <VgaText::clearScreen()>
c0015aaf:	58                   	pop    eax
c0015ab0:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015ab5:	5a                   	pop    edx
c0015ab6:	68 89 28 02 c0       	push   0xc0022889
c0015abb:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015ac1:	51                   	push   ecx
c0015ac2:	e8 9f 7c ff ff       	call   c000d766 <VgaText::puts(char const*)>
c0015ac7:	58                   	pop    eax
c0015ac8:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015acd:	5a                   	pop    edx
c0015ace:	68 30 29 02 c0       	push   0xc0022930
c0015ad3:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015ad9:	51                   	push   ecx
c0015ada:	e8 87 7c ff ff       	call   c000d766 <VgaText::puts(char const*)>
c0015adf:	58                   	pop    eax
c0015ae0:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015ae5:	5a                   	pop    edx
c0015ae6:	68 a5 28 02 c0       	push   0xc00228a5
c0015aeb:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015af1:	51                   	push   ecx
c0015af2:	e8 6f 7c ff ff       	call   c000d766 <VgaText::puts(char const*)>
c0015af7:	58                   	pop    eax
c0015af8:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015afd:	5a                   	pop    edx
c0015afe:	53                   	push   ebx
c0015aff:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b05:	51                   	push   ecx
c0015b06:	e8 5b 7c ff ff       	call   c000d766 <VgaText::puts(char const*)>
c0015b0b:	5b                   	pop    ebx
c0015b0c:	58                   	pop    eax
c0015b0d:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b12:	68 c5 28 02 c0       	push   0xc00228c5
c0015b17:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b1d:	50                   	push   eax
c0015b1e:	e8 43 7c ff ff       	call   c000d766 <VgaText::puts(char const*)>
c0015b23:	58                   	pop    eax
c0015b24:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b29:	5a                   	pop    edx
c0015b2a:	68 6c 29 02 c0       	push   0xc002296c
c0015b2f:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b35:	51                   	push   ecx
c0015b36:	e8 2b 7c ff ff       	call   c000d766 <VgaText::puts(char const*)>
c0015b3b:	5b                   	pop    ebx
c0015b3c:	58                   	pop    eax
c0015b3d:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b42:	68 a5 28 02 c0       	push   0xc00228a5
c0015b47:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b4d:	50                   	push   eax
c0015b4e:	e8 13 7c ff ff       	call   c000d766 <VgaText::puts(char const*)>
c0015b53:	58                   	pop    eax
c0015b54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b59:	5a                   	pop    edx
c0015b5a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015b5d:	83 c0 0c             	add    eax,0xc
c0015b60:	50                   	push   eax
c0015b61:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b66:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b6c:	51                   	push   ecx
c0015b6d:	e8 f4 7b ff ff       	call   c000d766 <VgaText::puts(char const*)>
c0015b72:	5b                   	pop    ebx
c0015b73:	58                   	pop    eax
c0015b74:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b79:	68 c4 28 02 c0       	push   0xc00228c4
c0015b7e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b84:	50                   	push   eax
c0015b85:	e8 dc 7b ff ff       	call   c000d766 <VgaText::puts(char const*)>
c0015b8a:	58                   	pop    eax
c0015b8b:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b90:	5a                   	pop    edx
c0015b91:	68 98 29 02 c0       	push   0xc0022998
c0015b96:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b9c:	51                   	push   ecx
c0015b9d:	e8 c4 7b ff ff       	call   c000d766 <VgaText::puts(char const*)>
c0015ba2:	5b                   	pop    ebx
c0015ba3:	58                   	pop    eax
c0015ba4:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015ba9:	68 d8 29 02 c0       	push   0xc00229d8
c0015bae:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015bb4:	50                   	push   eax
c0015bb5:	e8 ac 7b ff ff       	call   c000d766 <VgaText::puts(char const*)>
c0015bba:	58                   	pop    eax
c0015bbb:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015bc0:	5a                   	pop    edx
c0015bc1:	68 b0 28 02 c0       	push   0xc00228b0
c0015bc6:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015bcc:	51                   	push   ecx
c0015bcd:	e8 94 7b ff ff       	call   c000d766 <VgaText::puts(char const*)>
c0015bd2:	5b                   	pop    ebx
c0015bd3:	58                   	pop    eax
c0015bd4:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0015bd7:	50                   	push   eax
c0015bd8:	68 c8 28 02 c0       	push   0xc00228c8
c0015bdd:	e8 33 96 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0015be2:	58                   	pop    eax
c0015be3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015be6:	5a                   	pop    edx
c0015be7:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015bea:	51                   	push   ecx
c0015beb:	68 d1 28 02 c0       	push   0xc00228d1
c0015bf0:	e8 20 96 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0015bf5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015bf8:	5b                   	pop    ebx
c0015bf9:	5a                   	pop    edx
c0015bfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bfc:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015bff:	51                   	push   ecx
c0015c00:	68 da 28 02 c0       	push   0xc00228da
c0015c05:	e8 0b 96 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0015c0a:	5b                   	pop    ebx
c0015c0b:	58                   	pop    eax
c0015c0c:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c11:	68 1c 2a 02 c0       	push   0xc0022a1c
c0015c16:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c1c:	50                   	push   eax
c0015c1d:	e8 44 7b ff ff       	call   c000d766 <VgaText::puts(char const*)>
c0015c22:	58                   	pop    eax
c0015c23:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c28:	5a                   	pop    edx
c0015c29:	68 e3 28 02 c0       	push   0xc00228e3
c0015c2e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015c34:	51                   	push   ecx
c0015c35:	e8 2c 7b ff ff       	call   c000d766 <VgaText::puts(char const*)>
c0015c3a:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c3f:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015c45:	e8 0e 9f 00 00       	call   c001fb58 <CPU::readCR0()>
c0015c4a:	5a                   	pop    edx
c0015c4b:	59                   	pop    ecx
c0015c4c:	50                   	push   eax
c0015c4d:	53                   	push   ebx
c0015c4e:	e8 39 7b ff ff       	call   c000d78c <VgaText::putx(unsigned int)>
c0015c53:	5b                   	pop    ebx
c0015c54:	58                   	pop    eax
c0015c55:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c5a:	68 ed 28 02 c0       	push   0xc00228ed
c0015c5f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c65:	50                   	push   eax
c0015c66:	e8 fb 7a ff ff       	call   c000d766 <VgaText::puts(char const*)>
c0015c6b:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c70:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015c76:	e8 cb a1 00 00       	call   c001fe46 <CPU::readCR2()>
c0015c7b:	5a                   	pop    edx
c0015c7c:	59                   	pop    ecx
c0015c7d:	50                   	push   eax
c0015c7e:	53                   	push   ebx
c0015c7f:	e8 08 7b ff ff       	call   c000d78c <VgaText::putx(unsigned int)>
c0015c84:	5b                   	pop    ebx
c0015c85:	58                   	pop    eax
c0015c86:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c8b:	68 f7 28 02 c0       	push   0xc00228f7
c0015c90:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c96:	50                   	push   eax
c0015c97:	e8 ca 7a ff ff       	call   c000d766 <VgaText::puts(char const*)>
c0015c9c:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015ca1:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015ca7:	e8 39 9b 00 00       	call   c001f7e5 <CPU::readCR3()>
c0015cac:	5a                   	pop    edx
c0015cad:	59                   	pop    ecx
c0015cae:	50                   	push   eax
c0015caf:	53                   	push   ebx
c0015cb0:	e8 d7 7a ff ff       	call   c000d78c <VgaText::putx(unsigned int)>
c0015cb5:	5b                   	pop    ebx
c0015cb6:	58                   	pop    eax
c0015cb7:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015cbc:	68 0a 29 02 c0       	push   0xc002290a
c0015cc1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015cc7:	50                   	push   eax
c0015cc8:	e8 99 7a ff ff       	call   c000d766 <VgaText::puts(char const*)>
c0015ccd:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015cd2:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015cd8:	e8 45 a1 00 00       	call   c001fe22 <CPU::readCR4()>
c0015cdd:	5a                   	pop    edx
c0015cde:	59                   	pop    ecx
c0015cdf:	50                   	push   eax
c0015ce0:	53                   	push   ebx
c0015ce1:	e8 a6 7a ff ff       	call   c000d78c <VgaText::putx(unsigned int)>
c0015ce6:	5b                   	pop    ebx
c0015ce7:	58                   	pop    eax
c0015ce8:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015ced:	68 14 29 02 c0       	push   0xc0022914
c0015cf2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015cf8:	50                   	push   eax
c0015cf9:	e8 68 7a ff ff       	call   c000d766 <VgaText::puts(char const*)>
c0015cfe:	5a                   	pop    edx
c0015cff:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015d04:	59                   	pop    ecx
c0015d05:	8b 5d 04             	mov    ebx,DWORD PTR [ebp+0x4]
c0015d08:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d0e:	53                   	push   ebx
c0015d0f:	50                   	push   eax
c0015d10:	e8 77 7a ff ff       	call   c000d78c <VgaText::putx(unsigned int)>
c0015d15:	58                   	pop    eax
c0015d16:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015d1b:	5a                   	pop    edx
c0015d1c:	68 2b 29 02 c0       	push   0xc002292b
c0015d21:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015d27:	51                   	push   ecx
c0015d28:	e8 39 7a ff ff       	call   c000d766 <VgaText::puts(char const*)>
c0015d2d:	5b                   	pop    ebx
c0015d2e:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015d33:	5a                   	pop    edx
c0015d34:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015d37:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d3d:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015d40:	51                   	push   ecx
c0015d41:	50                   	push   eax
c0015d42:	e8 45 7a ff ff       	call   c000d78c <VgaText::putx(unsigned int)>
c0015d47:	5b                   	pop    ebx
c0015d48:	58                   	pop    eax
c0015d49:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015d4e:	68 2b 29 02 c0       	push   0xc002292b
c0015d53:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d59:	50                   	push   eax
c0015d5a:	e8 07 7a ff ff       	call   c000d766 <VgaText::puts(char const*)>
c0015d5f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015d62:	59                   	pop    ecx
c0015d63:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015d68:	5b                   	pop    ebx
c0015d69:	8b 12                	mov    edx,DWORD PTR [edx]
c0015d6b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d71:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0015d74:	52                   	push   edx
c0015d75:	50                   	push   eax
c0015d76:	e8 11 7a ff ff       	call   c000d78c <VgaText::putx(unsigned int)>
c0015d7b:	83 c4 10             	add    esp,0x10
c0015d7e:	b2 fe                	mov    dl,0xfe
c0015d80:	e4 60                	in     al,0x60
c0015d82:	3c 1c                	cmp    al,0x1c
c0015d84:	74 04                	je     c0015d8a <Krnl::panic(char const*)+0x346>
c0015d86:	3c 5a                	cmp    al,0x5a
c0015d88:	75 f6                	jne    c0015d80 <Krnl::panic(char const*)+0x33c>
c0015d8a:	e4 64                	in     al,0x64
c0015d8c:	a8 02                	test   al,0x2
c0015d8e:	75 fa                	jne    c0015d8a <Krnl::panic(char const*)+0x346>
c0015d90:	88 d0                	mov    al,dl
c0015d92:	e6 64                	out    0x64,al
c0015d94:	fa                   	cli    
c0015d95:	f4                   	hlt    
c0015d96:	eb e8                	jmp    c0015d80 <Krnl::panic(char const*)+0x33c>

c0015d98 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015d98:	55                   	push   ebp
c0015d99:	57                   	push   edi
c0015d9a:	56                   	push   esi
c0015d9b:	53                   	push   ebx
c0015d9c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015da2:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015da9:	8d 46 01             	lea    eax,[esi+0x1]
c0015dac:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015dae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015db2:	80 fb 40             	cmp    bl,0x40
c0015db5:	75 19                	jne    c0015dd0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x38>
c0015db7:	8a 06                	mov    al,BYTE PTR [esi]
c0015db9:	84 c0                	test   al,al
c0015dbb:	74 07                	je     c0015dc4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c0015dbd:	3c 3a                	cmp    al,0x3a
c0015dbf:	74 03                	je     c0015dc4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c0015dc1:	46                   	inc    esi
c0015dc2:	eb f3                	jmp    c0015db7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1f>
c0015dc4:	84 c0                	test   al,al
c0015dc6:	0f 84 1f 01 00 00    	je     c0015eeb <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015dcc:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015dcf:	46                   	inc    esi
c0015dd0:	50                   	push   eax
c0015dd1:	6a 40                	push   0x40
c0015dd3:	6a 00                	push   0x0
c0015dd5:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015dd9:	50                   	push   eax
c0015dda:	e8 e5 a8 fe ff       	call   c00006c4 <memset>
c0015ddf:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015de6:	31 d2                	xor    edx,edx
c0015de8:	83 c4 10             	add    esp,0x10
c0015deb:	8a 07                	mov    al,BYTE PTR [edi]
c0015ded:	84 c0                	test   al,al
c0015def:	0f 84 f6 00 00 00    	je     c0015eeb <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015df5:	81 fa c7 00 00 00    	cmp    edx,0xc7
c0015dfb:	0f 8f ea 00 00 00    	jg     c0015eeb <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015e01:	3c 0a                	cmp    al,0xa
c0015e03:	0f 85 d3 00 00 00    	jne    c0015edc <Reg::findLineFromLoadedData(char*, char*, char*)+0x144>
c0015e09:	c6 44 14 58 00       	mov    BYTE PTR [esp+edx*1+0x58],0x0
c0015e0e:	8a 4c 24 58          	mov    cl,BYTE PTR [esp+0x58]
c0015e12:	f6 c1 df             	test   cl,0xdf
c0015e15:	0f 94 c2             	sete   dl
c0015e18:	80 f9 23             	cmp    cl,0x23
c0015e1b:	0f 94 c0             	sete   al
c0015e1e:	08 c2                	or     dl,al
c0015e20:	75 47                	jne    c0015e69 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e22:	8d 41 f7             	lea    eax,[ecx-0x9]
c0015e25:	3c 01                	cmp    al,0x1
c0015e27:	76 40                	jbe    c0015e69 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e29:	80 f9 5b             	cmp    cl,0x5b
c0015e2c:	75 3f                	jne    c0015e6d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd5>
c0015e2e:	80 fb 40             	cmp    bl,0x40
c0015e31:	75 36                	jne    c0015e69 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e33:	83 ec 0c             	sub    esp,0xc
c0015e36:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0015e3a:	55                   	push   ebp
c0015e3b:	e8 a1 a8 fe ff       	call   c00006e1 <strlen>
c0015e40:	83 c4 10             	add    esp,0x10
c0015e43:	83 f8 3f             	cmp    eax,0x3f
c0015e46:	0f 87 9f 00 00 00    	ja     c0015eeb <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015e4c:	50                   	push   eax
c0015e4d:	50                   	push   eax
c0015e4e:	55                   	push   ebp
c0015e4f:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0015e53:	55                   	push   ebp
c0015e54:	e8 0a a9 fe ff       	call   c0000763 <strcpy>
c0015e59:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015e5c:	e8 80 a8 fe ff       	call   c00006e1 <strlen>
c0015e61:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015e66:	83 c4 10             	add    esp,0x10
c0015e69:	31 c9                	xor    ecx,ecx
c0015e6b:	eb 76                	jmp    c0015ee3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14b>
c0015e6d:	80 fb 40             	cmp    bl,0x40
c0015e70:	74 06                	je     c0015e78 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe0>
c0015e72:	8d 6c 24 58          	lea    ebp,[esp+0x58]
c0015e76:	eb 19                	jmp    c0015e91 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015e78:	51                   	push   ecx
c0015e79:	51                   	push   ecx
c0015e7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015e7e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015e82:	50                   	push   eax
c0015e83:	e8 2c a9 fe ff       	call   c00007b4 <strcmp>
c0015e88:	83 c4 10             	add    esp,0x10
c0015e8b:	85 c0                	test   eax,eax
c0015e8d:	75 da                	jne    c0015e69 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e8f:	eb e1                	jmp    c0015e72 <Reg::findLineFromLoadedData(char*, char*, char*)+0xda>
c0015e91:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0015e94:	84 c0                	test   al,al
c0015e96:	0f 94 c1             	sete   cl
c0015e99:	3c 3d                	cmp    al,0x3d
c0015e9b:	0f 94 c2             	sete   dl
c0015e9e:	08 d1                	or     cl,dl
c0015ea0:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0015ea4:	75 03                	jne    c0015ea9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x111>
c0015ea6:	45                   	inc    ebp
c0015ea7:	eb e8                	jmp    c0015e91 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015ea9:	84 c0                	test   al,al
c0015eab:	74 3e                	je     c0015eeb <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015ead:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0015eb1:	52                   	push   edx
c0015eb2:	52                   	push   edx
c0015eb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015eb7:	50                   	push   eax
c0015eb8:	56                   	push   esi
c0015eb9:	e8 f6 a8 fe ff       	call   c00007b4 <strcmp>
c0015ebe:	83 c4 10             	add    esp,0x10
c0015ec1:	85 c0                	test   eax,eax
c0015ec3:	75 a4                	jne    c0015e69 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015ec5:	50                   	push   eax
c0015ec6:	8d 55 01             	lea    edx,[ebp+0x1]
c0015ec9:	50                   	push   eax
c0015eca:	52                   	push   edx
c0015ecb:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015ed2:	e8 8c a8 fe ff       	call   c0000763 <strcpy>
c0015ed7:	83 c4 10             	add    esp,0x10
c0015eda:	eb 14                	jmp    c0015ef0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x158>
c0015edc:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015edf:	88 44 14 58          	mov    BYTE PTR [esp+edx*1+0x58],al
c0015ee3:	47                   	inc    edi
c0015ee4:	89 ca                	mov    edx,ecx
c0015ee6:	e9 00 ff ff ff       	jmp    c0015deb <Reg::findLineFromLoadedData(char*, char*, char*)+0x53>
c0015eeb:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0015ef0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0015ef4:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015efa:	5b                   	pop    ebx
c0015efb:	5e                   	pop    esi
c0015efc:	5f                   	pop    edi
c0015efd:	5d                   	pop    ebp
c0015efe:	c3                   	ret    

c0015eff <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015eff:	57                   	push   edi
c0015f00:	56                   	push   esi
c0015f01:	53                   	push   ebx
c0015f02:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0015f08:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0015f0f:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0015f16:	53                   	push   ebx
c0015f17:	e8 c5 a7 fe ff       	call   c00006e1 <strlen>
c0015f1c:	89 34 24             	mov    DWORD PTR [esp],esi
c0015f1f:	89 c7                	mov    edi,eax
c0015f21:	e8 bb a7 fe ff       	call   c00006e1 <strlen>
c0015f26:	83 c4 10             	add    esp,0x10
c0015f29:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015f2d:	31 ff                	xor    edi,edi
c0015f2f:	3d ff 00 00 00       	cmp    eax,0xff
c0015f34:	0f 87 18 01 00 00    	ja     c0016052 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015f3a:	51                   	push   ecx
c0015f3b:	51                   	push   ecx
c0015f3c:	56                   	push   esi
c0015f3d:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0015f41:	56                   	push   esi
c0015f42:	e8 1c a8 fe ff       	call   c0000763 <strcpy>
c0015f47:	58                   	pop    eax
c0015f48:	5a                   	pop    edx
c0015f49:	68 54 2e 02 c0       	push   0xc0022e54
c0015f4e:	56                   	push   esi
c0015f4f:	e8 c6 a8 fe ff       	call   c000081a <strcat>
c0015f54:	59                   	pop    ecx
c0015f55:	58                   	pop    eax
c0015f56:	53                   	push   ebx
c0015f57:	56                   	push   esi
c0015f58:	e8 bd a8 fe ff       	call   c000081a <strcat>
c0015f5d:	58                   	pop    eax
c0015f5e:	5a                   	pop    edx
c0015f5f:	68 42 2a 02 c0       	push   0xc0022a42
c0015f64:	56                   	push   esi
c0015f65:	e8 b0 a8 fe ff       	call   c000081a <strcat>
c0015f6a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015f71:	e8 6a 91 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c0015f76:	83 c4 0c             	add    esp,0xc
c0015f79:	89 c3                	mov    ebx,eax
c0015f7b:	ff 35 f4 5b 02 c0    	push   DWORD PTR ds:0xc0025bf4
c0015f81:	56                   	push   esi
c0015f82:	50                   	push   eax
c0015f83:	e8 c4 97 ff ff       	call   c000f74c <File::File(char const*, Process*)>
c0015f88:	59                   	pop    ecx
c0015f89:	5e                   	pop    esi
c0015f8a:	6a 01                	push   0x1
c0015f8c:	53                   	push   ebx
c0015f8d:	e8 1e 98 ff ff       	call   c000f7b0 <File::open(FileOpenMode)>
c0015f92:	83 c4 10             	add    esp,0x10
c0015f95:	85 c0                	test   eax,eax
c0015f97:	74 08                	je     c0015fa1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0015f99:	83 ec 0c             	sub    esp,0xc
c0015f9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f9e:	53                   	push   ebx
c0015f9f:	eb 2e                	jmp    c0015fcf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0015fa1:	52                   	push   edx
c0015fa2:	8d 44 24 07          	lea    eax,[esp+0x7]
c0015fa6:	50                   	push   eax
c0015fa7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015fab:	50                   	push   eax
c0015fac:	53                   	push   ebx
c0015fad:	e8 aa 9a ff ff       	call   c000fa5c <File::stat(unsigned long long*, bool*)>
c0015fb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015fb6:	83 c4 10             	add    esp,0x10
c0015fb9:	89 c1                	mov    ecx,eax
c0015fbb:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0015fbf:	75 13                	jne    c0015fd4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0015fc1:	83 ec 0c             	sub    esp,0xc
c0015fc4:	53                   	push   ebx
c0015fc5:	e8 44 98 ff ff       	call   c000f80e <File::close()>
c0015fca:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fcc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015fcf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015fd2:	eb 7b                	jmp    c001604f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0015fd4:	83 ec 0c             	sub    esp,0xc
c0015fd7:	50                   	push   eax
c0015fd8:	e8 06 60 ff ff       	call   c000bfe3 <malloc>
c0015fdd:	89 c6                	mov    esi,eax
c0015fdf:	58                   	pop    eax
c0015fe0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fe2:	8d 54 24 10          	lea    edx,[esp+0x10]
c0015fe6:	52                   	push   edx
c0015fe7:	56                   	push   esi
c0015fe8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015fec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015ff0:	53                   	push   ebx
c0015ff1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015ff4:	83 c4 20             	add    esp,0x20
c0015ff7:	85 c0                	test   eax,eax
c0015ff9:	75 0a                	jne    c0016005 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015ffb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015fff:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016003:	74 18                	je     c001601d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0016005:	83 ec 0c             	sub    esp,0xc
c0016008:	31 ff                	xor    edi,edi
c001600a:	53                   	push   ebx
c001600b:	e8 fe 97 ff ff       	call   c000f80e <File::close()>
c0016010:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016012:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016015:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016018:	83 c4 10             	add    esp,0x10
c001601b:	eb 35                	jmp    c0016052 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c001601d:	83 ec 0c             	sub    esp,0xc
c0016020:	53                   	push   ebx
c0016021:	e8 e8 97 ff ff       	call   c000f80e <File::close()>
c0016026:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016028:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001602b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001602e:	83 c4 0c             	add    esp,0xc
c0016031:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0016038:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c001603f:	56                   	push   esi
c0016040:	e8 53 fd ff ff       	call   c0015d98 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0016045:	89 34 24             	mov    DWORD PTR [esp],esi
c0016048:	89 c7                	mov    edi,eax
c001604a:	e8 a4 5f ff ff       	call   c000bff3 <free>
c001604f:	83 c4 10             	add    esp,0x10
c0016052:	81 c4 10 01 00 00    	add    esp,0x110
c0016058:	89 f8                	mov    eax,edi
c001605a:	5b                   	pop    ebx
c001605b:	5e                   	pop    esi
c001605c:	5f                   	pop    edi
c001605d:	c3                   	ret    

c001605e <Reg::getLine(char*, char*, char*)>:
c001605e:	57                   	push   edi
c001605f:	56                   	push   esi
c0016060:	53                   	push   ebx
c0016061:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016065:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016069:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001606d:	57                   	push   edi
c001606e:	56                   	push   esi
c001606f:	53                   	push   ebx
c0016070:	68 47 2a 02 c0       	push   0xc0022a47
c0016075:	e8 85 fe ff ff       	call   c0015eff <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001607a:	83 c4 10             	add    esp,0x10
c001607d:	84 c0                	test   al,al
c001607f:	75 10                	jne    c0016091 <Reg::getLine(char*, char*, char*)+0x33>
c0016081:	57                   	push   edi
c0016082:	56                   	push   esi
c0016083:	53                   	push   ebx
c0016084:	68 6c 2a 02 c0       	push   0xc0022a6c
c0016089:	e8 71 fe ff ff       	call   c0015eff <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001608e:	83 c4 10             	add    esp,0x10
c0016091:	5b                   	pop    ebx
c0016092:	5e                   	pop    esi
c0016093:	5f                   	pop    edi
c0016094:	c3                   	ret    

c0016095 <Reg::readInt(char*, char*, int*)>:
c0016095:	55                   	push   ebp
c0016096:	57                   	push   edi
c0016097:	56                   	push   esi
c0016098:	53                   	push   ebx
c0016099:	81 ec f0 00 00 00    	sub    esp,0xf0
c001609f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00160a3:	57                   	push   edi
c00160a4:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00160ab:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00160b2:	e8 a7 ff ff ff       	call   c001605e <Reg::getLine(char*, char*, char*)>
c00160b7:	83 c4 10             	add    esp,0x10
c00160ba:	84 c0                	test   al,al
c00160bc:	0f 84 b2 00 00 00    	je     c0016174 <Reg::readInt(char*, char*, int*)+0xdf>
c00160c2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00160c6:	80 fa 2b             	cmp    dl,0x2b
c00160c9:	74 0c                	je     c00160d7 <Reg::readInt(char*, char*, int*)+0x42>
c00160cb:	80 fa 2d             	cmp    dl,0x2d
c00160ce:	75 0e                	jne    c00160de <Reg::readInt(char*, char*, int*)+0x49>
c00160d0:	ba 01 00 00 00       	mov    edx,0x1
c00160d5:	eb 0b                	jmp    c00160e2 <Reg::readInt(char*, char*, int*)+0x4d>
c00160d7:	ba 01 00 00 00       	mov    edx,0x1
c00160dc:	eb 02                	jmp    c00160e0 <Reg::readInt(char*, char*, int*)+0x4b>
c00160de:	31 d2                	xor    edx,edx
c00160e0:	31 c0                	xor    eax,eax
c00160e2:	be 0a 00 00 00       	mov    esi,0xa
c00160e7:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00160ec:	75 20                	jne    c001610e <Reg::readInt(char*, char*, int*)+0x79>
c00160ee:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00160f2:	80 f9 78             	cmp    cl,0x78
c00160f5:	75 0a                	jne    c0016101 <Reg::readInt(char*, char*, int*)+0x6c>
c00160f7:	83 c2 02             	add    edx,0x2
c00160fa:	be 10 00 00 00       	mov    esi,0x10
c00160ff:	eb 0d                	jmp    c001610e <Reg::readInt(char*, char*, int*)+0x79>
c0016101:	80 f9 62             	cmp    cl,0x62
c0016104:	75 08                	jne    c001610e <Reg::readInt(char*, char*, int*)+0x79>
c0016106:	83 c2 02             	add    edx,0x2
c0016109:	be 02 00 00 00       	mov    esi,0x2
c001610e:	01 d7                	add    edi,edx
c0016110:	31 d2                	xor    edx,edx
c0016112:	8a 1f                	mov    bl,BYTE PTR [edi]
c0016114:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0016118:	84 db                	test   bl,bl
c001611a:	0f 94 c3             	sete   bl
c001611d:	80 7c 24 0f 0d       	cmp    BYTE PTR [esp+0xf],0xd
c0016122:	0f 94 c1             	sete   cl
c0016125:	08 cb                	or     bl,cl
c0016127:	75 3a                	jne    c0016163 <Reg::readInt(char*, char*, int*)+0xce>
c0016129:	0f af d6             	imul   edx,esi
c001612c:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0016131:	83 fe 10             	cmp    esi,0x10
c0016134:	75 26                	jne    c001615c <Reg::readInt(char*, char*, int*)+0xc7>
c0016136:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001613a:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001613d:	89 e9                	mov    ecx,ebp
c001613f:	80 f9 05             	cmp    cl,0x5
c0016142:	77 06                	ja     c001614a <Reg::readInt(char*, char*, int*)+0xb5>
c0016144:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0016148:	eb 16                	jmp    c0016160 <Reg::readInt(char*, char*, int*)+0xcb>
c001614a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001614e:	83 e9 61             	sub    ecx,0x61
c0016151:	80 f9 05             	cmp    cl,0x5
c0016154:	77 06                	ja     c001615c <Reg::readInt(char*, char*, int*)+0xc7>
c0016156:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001615a:	eb 04                	jmp    c0016160 <Reg::readInt(char*, char*, int*)+0xcb>
c001615c:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0016160:	47                   	inc    edi
c0016161:	eb af                	jmp    c0016112 <Reg::readInt(char*, char*, int*)+0x7d>
c0016163:	84 c0                	test   al,al
c0016165:	74 02                	je     c0016169 <Reg::readInt(char*, char*, int*)+0xd4>
c0016167:	f7 da                	neg    edx
c0016169:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0016170:	89 10                	mov    DWORD PTR [eax],edx
c0016172:	88 d8                	mov    al,bl
c0016174:	81 c4 ec 00 00 00    	add    esp,0xec
c001617a:	5b                   	pop    ebx
c001617b:	5e                   	pop    esi
c001617c:	5f                   	pop    edi
c001617d:	5d                   	pop    ebp
c001617e:	c3                   	ret    

c001617f <Reg::readString(char*, char*, char*, int)>:
c001617f:	57                   	push   edi
c0016180:	56                   	push   esi
c0016181:	53                   	push   ebx
c0016182:	81 ec d4 00 00 00    	sub    esp,0xd4
c0016188:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001618c:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0016193:	57                   	push   edi
c0016194:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001619b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00161a2:	e8 b7 fe ff ff       	call   c001605e <Reg::getLine(char*, char*, char*)>
c00161a7:	83 c4 10             	add    esp,0x10
c00161aa:	89 c6                	mov    esi,eax
c00161ac:	84 c0                	test   al,al
c00161ae:	74 44                	je     c00161f4 <Reg::readString(char*, char*, char*, int)+0x75>
c00161b0:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00161b7:	31 c0                	xor    eax,eax
c00161b9:	4a                   	dec    edx
c00161ba:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00161bd:	84 c9                	test   cl,cl
c00161bf:	74 0f                	je     c00161d0 <Reg::readString(char*, char*, char*, int)+0x51>
c00161c1:	39 c2                	cmp    edx,eax
c00161c3:	7e 0b                	jle    c00161d0 <Reg::readString(char*, char*, char*, int)+0x51>
c00161c5:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00161c8:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00161cd:	40                   	inc    eax
c00161ce:	eb ea                	jmp    c00161ba <Reg::readString(char*, char*, char*, int)+0x3b>
c00161d0:	83 ec 0c             	sub    esp,0xc
c00161d3:	53                   	push   ebx
c00161d4:	e8 08 a5 fe ff       	call   c00006e1 <strlen>
c00161d9:	83 c4 10             	add    esp,0x10
c00161dc:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00161e1:	75 11                	jne    c00161f4 <Reg::readString(char*, char*, char*, int)+0x75>
c00161e3:	83 ec 0c             	sub    esp,0xc
c00161e6:	53                   	push   ebx
c00161e7:	e8 f5 a4 fe ff       	call   c00006e1 <strlen>
c00161ec:	83 c4 10             	add    esp,0x10
c00161ef:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00161f4:	81 c4 d0 00 00 00    	add    esp,0xd0
c00161fa:	89 f0                	mov    eax,esi
c00161fc:	5b                   	pop    ebx
c00161fd:	5e                   	pop    esi
c00161fe:	5f                   	pop    edi
c00161ff:	c3                   	ret    

c0016200 <Reg::readBool(char*, char*, bool*)>:
c0016200:	83 ec 20             	sub    esp,0x20
c0016203:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016207:	50                   	push   eax
c0016208:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001620c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016210:	e8 80 fe ff ff       	call   c0016095 <Reg::readInt(char*, char*, int*)>
c0016215:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016219:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001621e:	0f 95 02             	setne  BYTE PTR [edx]
c0016221:	83 c4 2c             	add    esp,0x2c
c0016224:	c3                   	ret    

c0016225 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0016225:	53                   	push   ebx
c0016226:	83 ec 1c             	sub    esp,0x1c
c0016229:	8d 44 24 13          	lea    eax,[esp+0x13]
c001622d:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0016231:	50                   	push   eax
c0016232:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016236:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001623a:	e8 c1 ff ff ff       	call   c0016200 <Reg::readBool(char*, char*, bool*)>
c001623f:	83 c4 10             	add    esp,0x10
c0016242:	84 c0                	test   al,al
c0016244:	74 04                	je     c001624a <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0016246:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001624a:	83 c4 18             	add    esp,0x18
c001624d:	88 d8                	mov    al,bl
c001624f:	5b                   	pop    ebx
c0016250:	c3                   	ret    

c0016251 <Reg::readIntWithDefault(char*, char*, int)>:
c0016251:	53                   	push   ebx
c0016252:	83 ec 1c             	sub    esp,0x1c
c0016255:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016259:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001625d:	50                   	push   eax
c001625e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016262:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016266:	e8 2a fe ff ff       	call   c0016095 <Reg::readInt(char*, char*, int*)>
c001626b:	83 c4 10             	add    esp,0x10
c001626e:	84 c0                	test   al,al
c0016270:	74 04                	je     c0016276 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0016272:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0016276:	83 c4 18             	add    esp,0x18
c0016279:	89 d8                	mov    eax,ebx
c001627b:	5b                   	pop    ebx
c001627c:	c3                   	ret    

c001627d <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001627d:	56                   	push   esi
c001627e:	53                   	push   ebx
c001627f:	51                   	push   ecx
c0016280:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016284:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016288:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001628c:	56                   	push   esi
c001628d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016291:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016295:	e8 e5 fe ff ff       	call   c001617f <Reg::readString(char*, char*, char*, int)>
c001629a:	83 c4 10             	add    esp,0x10
c001629d:	84 c0                	test   al,al
c001629f:	74 02                	je     c00162a3 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c00162a1:	89 f3                	mov    ebx,esi
c00162a3:	5a                   	pop    edx
c00162a4:	89 d8                	mov    eax,ebx
c00162a6:	5b                   	pop    ebx
c00162a7:	5e                   	pop    esi
c00162a8:	c3                   	ret    

c00162a9 <Sys::exit(regs*)>:
c00162a9:	83 ec 18             	sub    esp,0x18
c00162ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162b0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00162b3:	e8 c2 31 00 00       	call   c001947a <terminateTask(int)>
c00162b8:	83 c8 ff             	or     eax,0xffffffff
c00162bb:	89 c2                	mov    edx,eax
c00162bd:	83 c4 1c             	add    esp,0x1c
c00162c0:	c3                   	ret    

c00162c1 <Sys::loadDLL(regs*)>:
c00162c1:	56                   	push   esi
c00162c2:	31 d2                	xor    edx,edx
c00162c4:	53                   	push   ebx
c00162c5:	b8 01 00 00 00       	mov    eax,0x1
c00162ca:	51                   	push   ecx
c00162cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162cf:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00162d3:	74 7d                	je     c0016352 <Sys::loadDLL(regs*)+0x91>
c00162d5:	83 ec 0c             	sub    esp,0xc
c00162d8:	68 14 01 00 00       	push   0x114
c00162dd:	e8 fe 8d ff ff       	call   c000f0e0 <operator new(unsigned long)>
c00162e2:	89 c3                	mov    ebx,eax
c00162e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162e9:	83 c4 0c             	add    esp,0xc
c00162ec:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00162ef:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00162f2:	53                   	push   ebx
c00162f3:	e8 54 94 ff ff       	call   c000f74c <File::File(char const*, Process*)>
c00162f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00162fb:	e8 1e 97 ff ff       	call   c000fa1e <File::exists()>
c0016300:	83 c4 10             	add    esp,0x10
c0016303:	84 c0                	test   al,al
c0016305:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016307:	75 11                	jne    c001631a <Sys::loadDLL(regs*)+0x59>
c0016309:	83 ec 0c             	sub    esp,0xc
c001630c:	53                   	push   ebx
c001630d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016310:	83 c4 10             	add    esp,0x10
c0016313:	b8 03 00 00 00       	mov    eax,0x3
c0016318:	eb 36                	jmp    c0016350 <Sys::loadDLL(regs*)+0x8f>
c001631a:	83 ec 0c             	sub    esp,0xc
c001631d:	53                   	push   ebx
c001631e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016321:	58                   	pop    eax
c0016322:	5a                   	pop    edx
c0016323:	6a 00                	push   0x0
c0016325:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0016328:	e8 3a 21 00 00       	call   c0018467 <Thr::loadDLL(char const*, bool)>
c001632d:	83 c4 10             	add    esp,0x10
c0016330:	89 c1                	mov    ecx,eax
c0016332:	31 d2                	xor    edx,edx
c0016334:	b8 04 00 00 00       	mov    eax,0x4
c0016339:	85 c9                	test   ecx,ecx
c001633b:	74 15                	je     c0016352 <Sys::loadDLL(regs*)+0x91>
c001633d:	53                   	push   ebx
c001633e:	53                   	push   ebx
c001633f:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c0016345:	51                   	push   ecx
c0016346:	e8 e2 22 00 00       	call   c001862d <Thr::executeDLL(unsigned long, void*)>
c001634b:	83 c4 10             	add    esp,0x10
c001634e:	31 c0                	xor    eax,eax
c0016350:	31 d2                	xor    edx,edx
c0016352:	59                   	pop    ecx
c0016353:	5b                   	pop    ebx
c0016354:	5e                   	pop    esi
c0016355:	c3                   	ret    

c0016356 <Sys::read(regs*)>:
c0016356:	57                   	push   edi
c0016357:	56                   	push   esi
c0016358:	53                   	push   ebx
c0016359:	83 ec 10             	sub    esp,0x10
c001635c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016360:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016363:	83 f8 02             	cmp    eax,0x2
c0016366:	77 10                	ja     c0016378 <Sys::read(regs*)+0x22>
c0016368:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001636d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016370:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016376:	eb 0e                	jmp    c0016386 <Sys::read(regs*)+0x30>
c0016378:	83 ec 0c             	sub    esp,0xc
c001637b:	50                   	push   eax
c001637c:	e8 f0 7c ff ff       	call   c000e071 <getFromFileDescriptor(int)>
c0016381:	83 c4 10             	add    esp,0x10
c0016384:	89 c1                	mov    ecx,eax
c0016386:	83 c8 ff             	or     eax,0xffffffff
c0016389:	85 c9                	test   ecx,ecx
c001638b:	89 c2                	mov    edx,eax
c001638d:	74 28                	je     c00163b7 <Sys::read(regs*)+0x61>
c001638f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016397:	83 ec 0c             	sub    esp,0xc
c001639a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001639c:	31 ff                	xor    edi,edi
c001639e:	8d 54 24 18          	lea    edx,[esp+0x18]
c00163a2:	52                   	push   edx
c00163a3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00163a6:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00163a9:	57                   	push   edi
c00163aa:	56                   	push   esi
c00163ab:	51                   	push   ecx
c00163ac:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00163af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00163b3:	83 c4 20             	add    esp,0x20
c00163b6:	99                   	cdq    
c00163b7:	83 c4 10             	add    esp,0x10
c00163ba:	5b                   	pop    ebx
c00163bb:	5e                   	pop    esi
c00163bc:	5f                   	pop    edi
c00163bd:	c3                   	ret    

c00163be <Sys::sbrk(regs*)>:
c00163be:	56                   	push   esi
c00163bf:	53                   	push   ebx
c00163c0:	50                   	push   eax
c00163c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163ca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00163cd:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00163d0:	85 db                	test   ebx,ebx
c00163d2:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c00163d8:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00163db:	74 02                	je     c00163df <Sys::sbrk(regs*)+0x21>
c00163dd:	79 06                	jns    c00163e5 <Sys::sbrk(regs*)+0x27>
c00163df:	89 f0                	mov    eax,esi
c00163e1:	31 d2                	xor    edx,edx
c00163e3:	eb 2a                	jmp    c001640f <Sys::sbrk(regs*)+0x51>
c00163e5:	83 c8 ff             	or     eax,0xffffffff
c00163e8:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00163ee:	89 c2                	mov    edx,eax
c00163f0:	77 1d                	ja     c001640f <Sys::sbrk(regs*)+0x51>
c00163f2:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00163f8:	50                   	push   eax
c00163f9:	c1 ea 0c             	shr    edx,0xc
c00163fc:	68 07 04 00 00       	push   0x407
c0016401:	52                   	push   edx
c0016402:	51                   	push   ecx
c0016403:	e8 c0 85 ff ff       	call   c000e9c8 <VAS::allocatePages(int, int)>
c0016408:	89 f0                	mov    eax,esi
c001640a:	31 d2                	xor    edx,edx
c001640c:	83 c4 10             	add    esp,0x10
c001640f:	59                   	pop    ecx
c0016410:	5b                   	pop    ebx
c0016411:	5e                   	pop    esi
c0016412:	c3                   	ret    

c0016413 <Sys::write(regs*)>:
c0016413:	57                   	push   edi
c0016414:	56                   	push   esi
c0016415:	53                   	push   ebx
c0016416:	83 ec 18             	sub    esp,0x18
c0016419:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001641d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016420:	68 87 2a 02 c0       	push   0xc0022a87
c0016425:	e8 eb 8d ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001642a:	83 c4 10             	add    esp,0x10
c001642d:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c0016431:	77 10                	ja     c0016443 <Sys::write(regs*)+0x30>
c0016433:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016438:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001643b:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016441:	eb 1b                	jmp    c001645e <Sys::write(regs*)+0x4b>
c0016443:	83 ec 0c             	sub    esp,0xc
c0016446:	68 a6 2a 02 c0       	push   0xc0022aa6
c001644b:	e8 c5 8d ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0016450:	58                   	pop    eax
c0016451:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016454:	e8 18 7c ff ff       	call   c000e071 <getFromFileDescriptor(int)>
c0016459:	83 c4 10             	add    esp,0x10
c001645c:	89 c1                	mov    ecx,eax
c001645e:	83 c8 ff             	or     eax,0xffffffff
c0016461:	85 c9                	test   ecx,ecx
c0016463:	89 c2                	mov    edx,eax
c0016465:	74 28                	je     c001648f <Sys::write(regs*)+0x7c>
c0016467:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001646f:	83 ec 0c             	sub    esp,0xc
c0016472:	8b 01                	mov    eax,DWORD PTR [ecx]
c0016474:	31 ff                	xor    edi,edi
c0016476:	8d 54 24 18          	lea    edx,[esp+0x18]
c001647a:	52                   	push   edx
c001647b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001647e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0016481:	57                   	push   edi
c0016482:	56                   	push   esi
c0016483:	51                   	push   ecx
c0016484:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0016487:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001648b:	83 c4 20             	add    esp,0x20
c001648e:	99                   	cdq    
c001648f:	83 c4 10             	add    esp,0x10
c0016492:	5b                   	pop    ebx
c0016493:	5e                   	pop    esi
c0016494:	5f                   	pop    edi
c0016495:	c3                   	ret    

c0016496 <Sys::yield(regs*)>:
c0016496:	83 ec 0c             	sub    esp,0xc
c0016499:	e8 af 25 00 00       	call   c0018a4d <lockScheduler()>
c001649e:	e8 f3 28 00 00       	call   c0018d96 <schedule()>
c00164a3:	e8 a7 25 00 00       	call   c0018a4f <unlockScheduler()>
c00164a8:	31 c0                	xor    eax,eax
c00164aa:	31 d2                	xor    edx,edx
c00164ac:	83 c4 0c             	add    esp,0xc
c00164af:	c3                   	ret    

c00164b0 <sysCallGetPID(regs*)>:
c00164b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00164b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00164ba:	89 c2                	mov    edx,eax
c00164bc:	c1 fa 1f             	sar    edx,0x1f
c00164bf:	c3                   	ret    

c00164c0 <sysCallSeekDir(regs*)>:
c00164c0:	31 c0                	xor    eax,eax
c00164c2:	31 d2                	xor    edx,edx
c00164c4:	c3                   	ret    

c00164c5 <sysCallTellDir(regs*)>:
c00164c5:	31 c0                	xor    eax,eax
c00164c7:	31 d2                	xor    edx,edx
c00164c9:	c3                   	ret    

c00164ca <sysCallVerify(regs*)>:
c00164ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00164ce:	31 d2                	xor    edx,edx
c00164d0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00164d3:	c3                   	ret    

c00164d4 <sysCallFork(regs*)>:
c00164d4:	83 c8 ff             	or     eax,0xffffffff
c00164d7:	83 ca ff             	or     edx,0xffffffff
c00164da:	c3                   	ret    

c00164db <sysCallExecve(regs*)>:
c00164db:	83 c8 ff             	or     eax,0xffffffff
c00164de:	83 ca ff             	or     edx,0xffffffff
c00164e1:	c3                   	ret    

c00164e2 <sysCallGetArgc(regs*)>:
c00164e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164e7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00164ea:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c00164f0:	89 c2                	mov    edx,eax
c00164f2:	c1 fa 1f             	sar    edx,0x1f
c00164f5:	c3                   	ret    

c00164f6 <sysFormatDisk(regs*)>:
c00164f6:	56                   	push   esi
c00164f7:	53                   	push   ebx
c00164f8:	50                   	push   eax
c00164f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00164fd:	8b 1d 08 49 02 c0    	mov    ebx,DWORD PTR ds:0xc0024908
c0016503:	eb 2a                	jmp    c001652f <sysFormatDisk(regs*)+0x39>
c0016505:	83 ec 0c             	sub    esp,0xc
c0016508:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001650b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001650e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016510:	51                   	push   ecx
c0016511:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0016514:	51                   	push   ecx
c0016515:	50                   	push   eax
c0016516:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c001651d:	50                   	push   eax
c001651e:	53                   	push   ebx
c001651f:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0016522:	83 c4 20             	add    esp,0x20
c0016525:	89 c1                	mov    ecx,eax
c0016527:	83 f8 08             	cmp    eax,0x8
c001652a:	75 12                	jne    c001653e <sysFormatDisk(regs*)+0x48>
c001652c:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001652f:	85 db                	test   ebx,ebx
c0016531:	75 d2                	jne    c0016505 <sysFormatDisk(regs*)+0xf>
c0016533:	b8 03 00 00 00       	mov    eax,0x3
c0016538:	31 d2                	xor    edx,edx
c001653a:	59                   	pop    ecx
c001653b:	5b                   	pop    ebx
c001653c:	5e                   	pop    esi
c001653d:	c3                   	ret    
c001653e:	85 c0                	test   eax,eax
c0016540:	74 13                	je     c0016555 <sysFormatDisk(regs*)+0x5f>
c0016542:	31 d2                	xor    edx,edx
c0016544:	b8 01 00 00 00       	mov    eax,0x1
c0016549:	83 f9 09             	cmp    ecx,0x9
c001654c:	74 ec                	je     c001653a <sysFormatDisk(regs*)+0x44>
c001654e:	b8 02 00 00 00       	mov    eax,0x2
c0016553:	eb e3                	jmp    c0016538 <sysFormatDisk(regs*)+0x42>
c0016555:	31 c0                	xor    eax,eax
c0016557:	eb df                	jmp    c0016538 <sysFormatDisk(regs*)+0x42>

c0016559 <sysSetDiskVolumeLabel(regs*)>:
c0016559:	56                   	push   esi
c001655a:	53                   	push   ebx
c001655b:	53                   	push   ebx
c001655c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016560:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016563:	83 f8 19             	cmp    eax,0x19
c0016566:	77 2d                	ja     c0016595 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016568:	8b 0c 85 a0 4d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdb260]
c001656f:	85 c9                	test   ecx,ecx
c0016571:	74 22                	je     c0016595 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016573:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0016576:	85 d2                	test   edx,edx
c0016578:	74 1b                	je     c0016595 <sysSetDiskVolumeLabel(regs*)+0x3c>
c001657a:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c0016580:	8b 33                	mov    esi,DWORD PTR [ebx]
c0016582:	52                   	push   edx
c0016583:	50                   	push   eax
c0016584:	51                   	push   ecx
c0016585:	53                   	push   ebx
c0016586:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0016589:	83 c4 10             	add    esp,0x10
c001658c:	89 c2                	mov    edx,eax
c001658e:	c1 fa 1f             	sar    edx,0x1f
c0016591:	59                   	pop    ecx
c0016592:	5b                   	pop    ebx
c0016593:	5e                   	pop    esi
c0016594:	c3                   	ret    
c0016595:	59                   	pop    ecx
c0016596:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001659b:	5b                   	pop    ebx
c001659c:	83 ca ff             	or     edx,0xffffffff
c001659f:	5e                   	pop    esi
c00165a0:	c3                   	ret    

c00165a1 <sysGetDiskVolumeLabel(regs*)>:
c00165a1:	57                   	push   edi
c00165a2:	56                   	push   esi
c00165a3:	53                   	push   ebx
c00165a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165a8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00165ab:	83 fa 19             	cmp    edx,0x19
c00165ae:	77 38                	ja     c00165e8 <sysGetDiskVolumeLabel(regs*)+0x47>
c00165b0:	8b 0c 95 a0 4d 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdb260]
c00165b7:	85 c9                	test   ecx,ecx
c00165b9:	74 2d                	je     c00165e8 <sysGetDiskVolumeLabel(regs*)+0x47>
c00165bb:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00165be:	85 db                	test   ebx,ebx
c00165c0:	74 26                	je     c00165e8 <sysGetDiskVolumeLabel(regs*)+0x47>
c00165c2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00165c5:	85 c0                	test   eax,eax
c00165c7:	74 1f                	je     c00165e8 <sysGetDiskVolumeLabel(regs*)+0x47>
c00165c9:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c00165cf:	83 ec 0c             	sub    esp,0xc
c00165d2:	8b 3e                	mov    edi,DWORD PTR [esi]
c00165d4:	50                   	push   eax
c00165d5:	53                   	push   ebx
c00165d6:	52                   	push   edx
c00165d7:	51                   	push   ecx
c00165d8:	56                   	push   esi
c00165d9:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00165dc:	83 c4 20             	add    esp,0x20
c00165df:	89 c2                	mov    edx,eax
c00165e1:	c1 fa 1f             	sar    edx,0x1f
c00165e4:	5b                   	pop    ebx
c00165e5:	5e                   	pop    esi
c00165e6:	5f                   	pop    edi
c00165e7:	c3                   	ret    
c00165e8:	5b                   	pop    ebx
c00165e9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00165ee:	5e                   	pop    esi
c00165ef:	83 ca ff             	or     edx,0xffffffff
c00165f2:	5f                   	pop    edi
c00165f3:	c3                   	ret    

c00165f4 <sysShutdown(regs*)>:
c00165f4:	57                   	push   edi
c00165f5:	56                   	push   esi
c00165f6:	56                   	push   esi
c00165f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165fb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00165fe:	85 c0                	test   eax,eax
c0016600:	74 18                	je     c001661a <sysShutdown(regs*)+0x26>
c0016602:	83 f8 01             	cmp    eax,0x1
c0016605:	74 51                	je     c0016658 <sysShutdown(regs*)+0x64>
c0016607:	83 ce ff             	or     esi,0xffffffff
c001660a:	83 cf ff             	or     edi,0xffffffff
c001660d:	83 f8 02             	cmp    eax,0x2
c0016610:	74 2a                	je     c001663c <sysShutdown(regs*)+0x48>
c0016612:	59                   	pop    ecx
c0016613:	89 f0                	mov    eax,esi
c0016615:	5e                   	pop    esi
c0016616:	89 fa                	mov    edx,edi
c0016618:	5f                   	pop    edi
c0016619:	c3                   	ret    
c001661a:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001661f:	83 ce ff             	or     esi,0xffffffff
c0016622:	83 cf ff             	or     edi,0xffffffff
c0016625:	8b 10                	mov    edx,DWORD PTR [eax]
c0016627:	6a 00                	push   0x0
c0016629:	6a 00                	push   0x0
c001662b:	6a 00                	push   0x0
c001662d:	50                   	push   eax
c001662e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016631:	83 c4 10             	add    esp,0x10
c0016634:	89 f0                	mov    eax,esi
c0016636:	89 fa                	mov    edx,edi
c0016638:	59                   	pop    ecx
c0016639:	5e                   	pop    esi
c001663a:	5f                   	pop    edi
c001663b:	c3                   	ret    
c001663c:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0016641:	8b 10                	mov    edx,DWORD PTR [eax]
c0016643:	6a 00                	push   0x0
c0016645:	6a 00                	push   0x0
c0016647:	6a 01                	push   0x1
c0016649:	50                   	push   eax
c001664a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001664d:	83 c4 10             	add    esp,0x10
c0016650:	89 f0                	mov    eax,esi
c0016652:	89 fa                	mov    edx,edi
c0016654:	59                   	pop    ecx
c0016655:	5e                   	pop    esi
c0016656:	5f                   	pop    edi
c0016657:	c3                   	ret    
c0016658:	a1 20 4e 02 c0       	mov    eax,ds:0xc0024e20
c001665d:	85 c0                	test   eax,eax
c001665f:	74 02                	je     c0016663 <sysShutdown(regs*)+0x6f>
c0016661:	ff d0                	call   eax
c0016663:	31 f6                	xor    esi,esi
c0016665:	59                   	pop    ecx
c0016666:	31 ff                	xor    edi,edi
c0016668:	89 f0                	mov    eax,esi
c001666a:	5e                   	pop    esi
c001666b:	89 fa                	mov    edx,edi
c001666d:	5f                   	pop    edi
c001666e:	c3                   	ret    

c001666f <sysCallGetCwd(regs*)>:
c001666f:	83 ec 10             	sub    esp,0x10
c0016672:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016676:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016679:	52                   	push   edx
c001667a:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001667d:	51                   	push   ecx
c001667e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016683:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016686:	50                   	push   eax
c0016687:	e8 31 94 ff ff       	call   c000fabd <getcwd(Process*, char*, int)>
c001668c:	89 c2                	mov    edx,eax
c001668e:	83 c4 1c             	add    esp,0x1c
c0016691:	c1 fa 1f             	sar    edx,0x1f
c0016694:	c3                   	ret    

c0016695 <sysCallSetCwd(regs*)>:
c0016695:	83 ec 14             	sub    esp,0x14
c0016698:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001669c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001669f:	50                   	push   eax
c00166a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166a5:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00166a8:	52                   	push   edx
c00166a9:	e8 39 94 ff ff       	call   c000fae7 <setcwd(Process*, char*)>
c00166ae:	89 c2                	mov    edx,eax
c00166b0:	83 c4 1c             	add    esp,0x1c
c00166b3:	c1 fa 1f             	sar    edx,0x1f
c00166b6:	c3                   	ret    

c00166b7 <sysCallRealpath(regs*)>:
c00166b7:	53                   	push   ebx
c00166b8:	83 ec 08             	sub    esp,0x8
c00166bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166bf:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00166c2:	85 c9                	test   ecx,ecx
c00166c4:	74 35                	je     c00166fb <sysCallRealpath(regs*)+0x44>
c00166c6:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00166c9:	31 d2                	xor    edx,edx
c00166cb:	b8 01 00 00 00       	mov    eax,0x1
c00166d0:	85 db                	test   ebx,ebx
c00166d2:	75 05                	jne    c00166d9 <sysCallRealpath(regs*)+0x22>
c00166d4:	83 c4 08             	add    esp,0x8
c00166d7:	5b                   	pop    ebx
c00166d8:	c3                   	ret    
c00166d9:	50                   	push   eax
c00166da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166df:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00166e2:	05 0c 01 00 00       	add    eax,0x10c
c00166e7:	50                   	push   eax
c00166e8:	51                   	push   ecx
c00166e9:	53                   	push   ebx
c00166ea:	e8 b3 8e ff ff       	call   c000f5a2 <standardiseFiles(char*, char const*, char const*)>
c00166ef:	83 c4 10             	add    esp,0x10
c00166f2:	31 c0                	xor    eax,eax
c00166f4:	31 d2                	xor    edx,edx
c00166f6:	83 c4 08             	add    esp,0x8
c00166f9:	5b                   	pop    ebx
c00166fa:	c3                   	ret    
c00166fb:	b8 01 00 00 00       	mov    eax,0x1
c0016700:	31 d2                	xor    edx,edx
c0016702:	eb f2                	jmp    c00166f6 <sysCallRealpath(regs*)+0x3f>

c0016704 <sysCallReadDir(regs*)>:
c0016704:	53                   	push   ebx
c0016705:	83 ec 18             	sub    esp,0x18
c0016708:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001670c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001670f:	83 f8 02             	cmp    eax,0x2
c0016712:	76 56                	jbe    c001676a <sysCallReadDir(regs*)+0x66>
c0016714:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016717:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001671d:	77 57                	ja     c0016776 <sysCallReadDir(regs*)+0x72>
c001671f:	83 ec 0c             	sub    esp,0xc
c0016722:	50                   	push   eax
c0016723:	e8 49 79 ff ff       	call   c000e071 <getFromFileDescriptor(int)>
c0016728:	83 c4 10             	add    esp,0x10
c001672b:	85 c0                	test   eax,eax
c001672d:	74 57                	je     c0016786 <sysCallReadDir(regs*)+0x82>
c001672f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016737:	83 ec 0c             	sub    esp,0xc
c001673a:	8b 10                	mov    edx,DWORD PTR [eax]
c001673c:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0016740:	51                   	push   ecx
c0016741:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0016744:	51                   	push   ecx
c0016745:	6a 00                	push   0x0
c0016747:	68 10 01 00 00       	push   0x110
c001674c:	50                   	push   eax
c001674d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016750:	83 c4 20             	add    esp,0x20
c0016753:	89 c1                	mov    ecx,eax
c0016755:	85 c0                	test   eax,eax
c0016757:	74 38                	je     c0016791 <sysCallReadDir(regs*)+0x8d>
c0016759:	31 d2                	xor    edx,edx
c001675b:	b8 02 00 00 00       	mov    eax,0x2
c0016760:	83 f9 07             	cmp    ecx,0x7
c0016763:	74 05                	je     c001676a <sysCallReadDir(regs*)+0x66>
c0016765:	83 c4 18             	add    esp,0x18
c0016768:	5b                   	pop    ebx
c0016769:	c3                   	ret    
c001676a:	b8 01 00 00 00       	mov    eax,0x1
c001676f:	31 d2                	xor    edx,edx
c0016771:	83 c4 18             	add    esp,0x18
c0016774:	5b                   	pop    ebx
c0016775:	c3                   	ret    
c0016776:	53                   	push   ebx
c0016777:	53                   	push   ebx
c0016778:	52                   	push   edx
c0016779:	68 c8 2a 02 c0       	push   0xc0022ac8
c001677e:	e8 92 8a ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0016783:	83 c4 10             	add    esp,0x10
c0016786:	83 c4 18             	add    esp,0x18
c0016789:	83 c8 ff             	or     eax,0xffffffff
c001678c:	83 ca ff             	or     edx,0xffffffff
c001678f:	5b                   	pop    ebx
c0016790:	c3                   	ret    
c0016791:	31 c0                	xor    eax,eax
c0016793:	31 d2                	xor    edx,edx
c0016795:	eb da                	jmp    c0016771 <sysCallReadDir(regs*)+0x6d>

c0016797 <sysCallIsATTY(regs*)>:
c0016797:	83 ec 0c             	sub    esp,0xc
c001679a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001679e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00167a1:	83 f8 02             	cmp    eax,0x2
c00167a4:	76 07                	jbe    c00167ad <sysCallIsATTY(regs*)+0x16>
c00167a6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00167ab:	75 28                	jne    c00167d5 <sysCallIsATTY(regs*)+0x3e>
c00167ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167b2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00167b5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00167bb:	85 c0                	test   eax,eax
c00167bd:	74 26                	je     c00167e5 <sysCallIsATTY(regs*)+0x4e>
c00167bf:	83 ec 0c             	sub    esp,0xc
c00167c2:	8b 10                	mov    edx,DWORD PTR [eax]
c00167c4:	50                   	push   eax
c00167c5:	ff 12                	call   DWORD PTR [edx]
c00167c7:	83 c4 10             	add    esp,0x10
c00167ca:	25 ff 00 00 00       	and    eax,0xff
c00167cf:	31 d2                	xor    edx,edx
c00167d1:	83 c4 0c             	add    esp,0xc
c00167d4:	c3                   	ret    
c00167d5:	83 ec 0c             	sub    esp,0xc
c00167d8:	50                   	push   eax
c00167d9:	e8 93 78 ff ff       	call   c000e071 <getFromFileDescriptor(int)>
c00167de:	83 c4 10             	add    esp,0x10
c00167e1:	85 c0                	test   eax,eax
c00167e3:	75 da                	jne    c00167bf <sysCallIsATTY(regs*)+0x28>
c00167e5:	83 c8 ff             	or     eax,0xffffffff
c00167e8:	83 ca ff             	or     edx,0xffffffff
c00167eb:	83 c4 0c             	add    esp,0xc
c00167ee:	c3                   	ret    

c00167ef <sysCallSeek(regs*)>:
c00167ef:	53                   	push   ebx
c00167f0:	83 ec 08             	sub    esp,0x8
c00167f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00167f7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00167fa:	83 f8 02             	cmp    eax,0x2
c00167fd:	76 4b                	jbe    c001684a <sysCallSeek(regs*)+0x5b>
c00167ff:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016804:	77 34                	ja     c001683a <sysCallSeek(regs*)+0x4b>
c0016806:	83 ec 0c             	sub    esp,0xc
c0016809:	50                   	push   eax
c001680a:	e8 62 78 ff ff       	call   c000e071 <getFromFileDescriptor(int)>
c001680f:	83 c4 0c             	add    esp,0xc
c0016812:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0016815:	31 db                	xor    ebx,ebx
c0016817:	53                   	push   ebx
c0016818:	51                   	push   ecx
c0016819:	50                   	push   eax
c001681a:	e8 4f 90 ff ff       	call   c000f86e <File::seek(unsigned long long)>
c001681f:	83 c4 10             	add    esp,0x10
c0016822:	85 c0                	test   eax,eax
c0016824:	0f 95 c0             	setne  al
c0016827:	25 ff 00 00 00       	and    eax,0xff
c001682c:	31 d2                	xor    edx,edx
c001682e:	f7 d8                	neg    eax
c0016830:	83 d2 00             	adc    edx,0x0
c0016833:	83 c4 08             	add    esp,0x8
c0016836:	f7 da                	neg    edx
c0016838:	5b                   	pop    ebx
c0016839:	c3                   	ret    
c001683a:	52                   	push   edx
c001683b:	52                   	push   edx
c001683c:	50                   	push   eax
c001683d:	68 84 2b 02 c0       	push   0xc0022b84
c0016842:	e8 ce 89 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0016847:	83 c4 10             	add    esp,0x10
c001684a:	83 c4 08             	add    esp,0x8
c001684d:	83 c8 ff             	or     eax,0xffffffff
c0016850:	83 ca ff             	or     edx,0xffffffff
c0016853:	5b                   	pop    ebx
c0016854:	c3                   	ret    

c0016855 <sysCallTell(regs*)>:
c0016855:	53                   	push   ebx
c0016856:	83 ec 08             	sub    esp,0x8
c0016859:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001685d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016860:	83 f8 02             	cmp    eax,0x2
c0016863:	76 60                	jbe    c00168c5 <sysCallTell(regs*)+0x70>
c0016865:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001686a:	77 30                	ja     c001689c <sysCallTell(regs*)+0x47>
c001686c:	83 ec 0c             	sub    esp,0xc
c001686f:	50                   	push   eax
c0016870:	e8 fc 77 ff ff       	call   c000e071 <getFromFileDescriptor(int)>
c0016875:	5a                   	pop    edx
c0016876:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0016879:	59                   	pop    ecx
c001687a:	53                   	push   ebx
c001687b:	50                   	push   eax
c001687c:	e8 43 90 ff ff       	call   c000f8c4 <File::tell(unsigned long long*)>
c0016881:	83 c4 10             	add    esp,0x10
c0016884:	85 c0                	test   eax,eax
c0016886:	0f 95 c0             	setne  al
c0016889:	25 ff 00 00 00       	and    eax,0xff
c001688e:	31 d2                	xor    edx,edx
c0016890:	f7 d8                	neg    eax
c0016892:	83 d2 00             	adc    edx,0x0
c0016895:	83 c4 08             	add    esp,0x8
c0016898:	f7 da                	neg    edx
c001689a:	5b                   	pop    ebx
c001689b:	c3                   	ret    
c001689c:	52                   	push   edx
c001689d:	52                   	push   edx
c001689e:	50                   	push   eax
c001689f:	68 9e 2b 02 c0       	push   0xc0022b9e
c00168a4:	e8 6c 89 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c00168a9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00168ac:	83 c4 10             	add    esp,0x10
c00168af:	31 d2                	xor    edx,edx
c00168b1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00168b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00168be:	83 c4 08             	add    esp,0x8
c00168c1:	31 c0                	xor    eax,eax
c00168c3:	5b                   	pop    ebx
c00168c4:	c3                   	ret    
c00168c5:	83 c4 08             	add    esp,0x8
c00168c8:	83 c8 ff             	or     eax,0xffffffff
c00168cb:	83 ca ff             	or     edx,0xffffffff
c00168ce:	5b                   	pop    ebx
c00168cf:	c3                   	ret    

c00168d0 <sysCallSizeFromFilename(regs*)>:
c00168d0:	57                   	push   edi
c00168d1:	56                   	push   esi
c00168d2:	53                   	push   ebx
c00168d3:	83 ec 10             	sub    esp,0x10
c00168d6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00168da:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00168dd:	83 fb 02             	cmp    ebx,0x2
c00168e0:	0f 86 8b 00 00 00    	jbe    c0016971 <sysCallSizeFromFilename(regs*)+0xa1>
c00168e6:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00168ec:	77 58                	ja     c0016946 <sysCallSizeFromFilename(regs*)+0x76>
c00168ee:	83 ec 0c             	sub    esp,0xc
c00168f1:	68 14 01 00 00       	push   0x114
c00168f6:	e8 e5 87 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c00168fb:	89 c7                	mov    edi,eax
c00168fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016902:	83 c4 0c             	add    esp,0xc
c0016905:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016908:	50                   	push   eax
c0016909:	53                   	push   ebx
c001690a:	57                   	push   edi
c001690b:	e8 3c 8e ff ff       	call   c000f74c <File::File(char const*, Process*)>
c0016910:	83 c4 0c             	add    esp,0xc
c0016913:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016917:	50                   	push   eax
c0016918:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c001691b:	52                   	push   edx
c001691c:	57                   	push   edi
c001691d:	e8 3a 91 ff ff       	call   c000fa5c <File::stat(unsigned long long*, bool*)>
c0016922:	89 c3                	mov    ebx,eax
c0016924:	8b 07                	mov    eax,DWORD PTR [edi]
c0016926:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016929:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001692c:	31 c0                	xor    eax,eax
c001692e:	83 c4 10             	add    esp,0x10
c0016931:	85 db                	test   ebx,ebx
c0016933:	0f 95 c0             	setne  al
c0016936:	31 d2                	xor    edx,edx
c0016938:	f7 d8                	neg    eax
c001693a:	83 d2 00             	adc    edx,0x0
c001693d:	83 c4 10             	add    esp,0x10
c0016940:	f7 da                	neg    edx
c0016942:	5b                   	pop    ebx
c0016943:	5e                   	pop    esi
c0016944:	5f                   	pop    edi
c0016945:	c3                   	ret    
c0016946:	51                   	push   ecx
c0016947:	51                   	push   ecx
c0016948:	53                   	push   ebx
c0016949:	68 b8 2b 02 c0       	push   0xc0022bb8
c001694e:	e8 c2 88 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0016953:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016956:	83 c4 10             	add    esp,0x10
c0016959:	31 d2                	xor    edx,edx
c001695b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016961:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016968:	83 c4 10             	add    esp,0x10
c001696b:	31 c0                	xor    eax,eax
c001696d:	5b                   	pop    ebx
c001696e:	5e                   	pop    esi
c001696f:	5f                   	pop    edi
c0016970:	c3                   	ret    
c0016971:	83 c4 10             	add    esp,0x10
c0016974:	83 c8 ff             	or     eax,0xffffffff
c0016977:	83 ca ff             	or     edx,0xffffffff
c001697a:	5b                   	pop    ebx
c001697b:	5e                   	pop    esi
c001697c:	5f                   	pop    edi
c001697d:	c3                   	ret    

c001697e <sysCallSize(regs*)>:
c001697e:	53                   	push   ebx
c001697f:	83 ec 18             	sub    esp,0x18
c0016982:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016986:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016989:	83 f8 02             	cmp    eax,0x2
c001698c:	76 66                	jbe    c00169f4 <sysCallSize(regs*)+0x76>
c001698e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016993:	77 36                	ja     c00169cb <sysCallSize(regs*)+0x4d>
c0016995:	83 ec 0c             	sub    esp,0xc
c0016998:	50                   	push   eax
c0016999:	e8 d3 76 ff ff       	call   c000e071 <getFromFileDescriptor(int)>
c001699e:	83 c4 0c             	add    esp,0xc
c00169a1:	8d 54 24 13          	lea    edx,[esp+0x13]
c00169a5:	52                   	push   edx
c00169a6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00169a9:	52                   	push   edx
c00169aa:	50                   	push   eax
c00169ab:	e8 ac 90 ff ff       	call   c000fa5c <File::stat(unsigned long long*, bool*)>
c00169b0:	83 c4 10             	add    esp,0x10
c00169b3:	85 c0                	test   eax,eax
c00169b5:	0f 95 c0             	setne  al
c00169b8:	25 ff 00 00 00       	and    eax,0xff
c00169bd:	31 d2                	xor    edx,edx
c00169bf:	f7 d8                	neg    eax
c00169c1:	83 d2 00             	adc    edx,0x0
c00169c4:	83 c4 18             	add    esp,0x18
c00169c7:	f7 da                	neg    edx
c00169c9:	5b                   	pop    ebx
c00169ca:	c3                   	ret    
c00169cb:	51                   	push   ecx
c00169cc:	51                   	push   ecx
c00169cd:	50                   	push   eax
c00169ce:	68 b8 2b 02 c0       	push   0xc0022bb8
c00169d3:	e8 3d 88 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c00169d8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00169db:	83 c4 10             	add    esp,0x10
c00169de:	31 d2                	xor    edx,edx
c00169e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00169e6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00169ed:	83 c4 18             	add    esp,0x18
c00169f0:	31 c0                	xor    eax,eax
c00169f2:	5b                   	pop    ebx
c00169f3:	c3                   	ret    
c00169f4:	83 c4 18             	add    esp,0x18
c00169f7:	83 c8 ff             	or     eax,0xffffffff
c00169fa:	83 ca ff             	or     edx,0xffffffff
c00169fd:	5b                   	pop    ebx
c00169fe:	c3                   	ret    

c00169ff <sysCallClose(regs*)>:
c00169ff:	53                   	push   ebx
c0016a00:	83 ec 08             	sub    esp,0x8
c0016a03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a07:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016a0a:	83 f8 02             	cmp    eax,0x2
c0016a0d:	76 4f                	jbe    c0016a5e <sysCallClose(regs*)+0x5f>
c0016a0f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016a14:	74 53                	je     c0016a69 <sysCallClose(regs*)+0x6a>
c0016a16:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016a1b:	74 5b                	je     c0016a78 <sysCallClose(regs*)+0x79>
c0016a1d:	77 2f                	ja     c0016a4e <sysCallClose(regs*)+0x4f>
c0016a1f:	83 ec 0c             	sub    esp,0xc
c0016a22:	50                   	push   eax
c0016a23:	e8 49 76 ff ff       	call   c000e071 <getFromFileDescriptor(int)>
c0016a28:	89 c3                	mov    ebx,eax
c0016a2a:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a2d:	e8 dc 8d ff ff       	call   c000f80e <File::close()>
c0016a32:	83 c4 10             	add    esp,0x10
c0016a35:	85 db                	test   ebx,ebx
c0016a37:	74 0c                	je     c0016a45 <sysCallClose(regs*)+0x46>
c0016a39:	83 ec 0c             	sub    esp,0xc
c0016a3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a3e:	53                   	push   ebx
c0016a3f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a42:	83 c4 10             	add    esp,0x10
c0016a45:	83 c4 08             	add    esp,0x8
c0016a48:	31 c0                	xor    eax,eax
c0016a4a:	31 d2                	xor    edx,edx
c0016a4c:	5b                   	pop    ebx
c0016a4d:	c3                   	ret    
c0016a4e:	52                   	push   edx
c0016a4f:	52                   	push   edx
c0016a50:	50                   	push   eax
c0016a51:	68 ec 2a 02 c0       	push   0xc0022aec
c0016a56:	e8 ba 87 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0016a5b:	83 c4 10             	add    esp,0x10
c0016a5e:	83 c4 08             	add    esp,0x8
c0016a61:	83 c8 ff             	or     eax,0xffffffff
c0016a64:	83 ca ff             	or     edx,0xffffffff
c0016a67:	5b                   	pop    ebx
c0016a68:	c3                   	ret    
c0016a69:	83 ec 0c             	sub    esp,0xc
c0016a6c:	68 d3 2b 02 c0       	push   0xc0022bd3
c0016a71:	e8 9f 87 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0016a76:	eb ca                	jmp    c0016a42 <sysCallClose(regs*)+0x43>
c0016a78:	83 ec 0c             	sub    esp,0xc
c0016a7b:	68 e1 2b 02 c0       	push   0xc0022be1
c0016a80:	eb ef                	jmp    c0016a71 <sysCallClose(regs*)+0x72>

c0016a82 <sysCallOpenDir(regs*)>:
c0016a82:	56                   	push   esi
c0016a83:	53                   	push   ebx
c0016a84:	50                   	push   eax
c0016a85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016a89:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016a8c:	85 c0                	test   eax,eax
c0016a8e:	74 53                	je     c0016ae3 <sysCallOpenDir(regs*)+0x61>
c0016a90:	83 ec 0c             	sub    esp,0xc
c0016a93:	68 14 01 00 00       	push   0x114
c0016a98:	e8 43 86 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c0016a9d:	89 c6                	mov    esi,eax
c0016a9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016aa4:	83 c4 0c             	add    esp,0xc
c0016aa7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016aaa:	50                   	push   eax
c0016aab:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016aae:	50                   	push   eax
c0016aaf:	56                   	push   esi
c0016ab0:	e8 59 91 ff ff       	call   c000fc0e <Directory::Directory(char const*, Process*)>
c0016ab5:	89 34 24             	mov    DWORD PTR [esp],esi
c0016ab8:	e8 b5 91 ff ff       	call   c000fc72 <Directory::open()>
c0016abd:	83 c4 10             	add    esp,0x10
c0016ac0:	85 c0                	test   eax,eax
c0016ac2:	75 1f                	jne    c0016ae3 <sysCallOpenDir(regs*)+0x61>
c0016ac4:	83 ec 0c             	sub    esp,0xc
c0016ac7:	56                   	push   esi
c0016ac8:	e8 ef 72 ff ff       	call   c000ddbc <UnixFile::getFileDescriptor()>
c0016acd:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016ad0:	83 c4 10             	add    esp,0x10
c0016ad3:	89 02                	mov    DWORD PTR [edx],eax
c0016ad5:	c1 f8 1f             	sar    eax,0x1f
c0016ad8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016adb:	31 c0                	xor    eax,eax
c0016add:	59                   	pop    ecx
c0016ade:	31 d2                	xor    edx,edx
c0016ae0:	5b                   	pop    ebx
c0016ae1:	5e                   	pop    esi
c0016ae2:	c3                   	ret    
c0016ae3:	59                   	pop    ecx
c0016ae4:	83 c8 ff             	or     eax,0xffffffff
c0016ae7:	5b                   	pop    ebx
c0016ae8:	83 ca ff             	or     edx,0xffffffff
c0016aeb:	5e                   	pop    esi
c0016aec:	c3                   	ret    

c0016aed <sysCallMakeDir(regs*)>:
c0016aed:	56                   	push   esi
c0016aee:	53                   	push   ebx
c0016aef:	83 ec 10             	sub    esp,0x10
c0016af2:	68 14 01 00 00       	push   0x114
c0016af7:	e8 e4 85 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c0016afc:	89 c3                	mov    ebx,eax
c0016afe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b03:	83 c4 0c             	add    esp,0xc
c0016b06:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016b09:	50                   	push   eax
c0016b0a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b0e:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0016b11:	52                   	push   edx
c0016b12:	53                   	push   ebx
c0016b13:	e8 f6 90 ff ff       	call   c000fc0e <Directory::Directory(char const*, Process*)>
c0016b18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b1b:	e8 32 93 ff ff       	call   c000fe52 <Directory::create()>
c0016b20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b23:	89 c6                	mov    esi,eax
c0016b25:	e8 a4 91 ff ff       	call   c000fcce <Directory::close()>
c0016b2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b2f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b32:	31 c0                	xor    eax,eax
c0016b34:	85 f6                	test   esi,esi
c0016b36:	0f 95 c0             	setne  al
c0016b39:	31 d2                	xor    edx,edx
c0016b3b:	f7 d8                	neg    eax
c0016b3d:	83 d2 00             	adc    edx,0x0
c0016b40:	83 c4 14             	add    esp,0x14
c0016b43:	f7 da                	neg    edx
c0016b45:	5b                   	pop    ebx
c0016b46:	5e                   	pop    esi
c0016b47:	c3                   	ret    

c0016b48 <sysCallCloseDir(regs*)>:
c0016b48:	53                   	push   ebx
c0016b49:	83 ec 08             	sub    esp,0x8
c0016b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b50:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016b53:	83 f8 02             	cmp    eax,0x2
c0016b56:	76 46                	jbe    c0016b9e <sysCallCloseDir(regs*)+0x56>
c0016b58:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016b5d:	77 2f                	ja     c0016b8e <sysCallCloseDir(regs*)+0x46>
c0016b5f:	83 ec 0c             	sub    esp,0xc
c0016b62:	50                   	push   eax
c0016b63:	e8 09 75 ff ff       	call   c000e071 <getFromFileDescriptor(int)>
c0016b68:	89 c3                	mov    ebx,eax
c0016b6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b6d:	e8 5c 91 ff ff       	call   c000fcce <Directory::close()>
c0016b72:	83 c4 10             	add    esp,0x10
c0016b75:	85 db                	test   ebx,ebx
c0016b77:	74 0c                	je     c0016b85 <sysCallCloseDir(regs*)+0x3d>
c0016b79:	83 ec 0c             	sub    esp,0xc
c0016b7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b7e:	53                   	push   ebx
c0016b7f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b82:	83 c4 10             	add    esp,0x10
c0016b85:	83 c4 08             	add    esp,0x8
c0016b88:	31 c0                	xor    eax,eax
c0016b8a:	31 d2                	xor    edx,edx
c0016b8c:	5b                   	pop    ebx
c0016b8d:	c3                   	ret    
c0016b8e:	52                   	push   edx
c0016b8f:	52                   	push   edx
c0016b90:	50                   	push   eax
c0016b91:	68 14 2b 02 c0       	push   0xc0022b14
c0016b96:	e8 7a 86 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0016b9b:	83 c4 10             	add    esp,0x10
c0016b9e:	83 c4 08             	add    esp,0x8
c0016ba1:	83 c8 ff             	or     eax,0xffffffff
c0016ba4:	83 ca ff             	or     edx,0xffffffff
c0016ba7:	5b                   	pop    ebx
c0016ba8:	c3                   	ret    

c0016ba9 <sysCallWait(regs*)>:
c0016ba9:	83 ec 10             	sub    esp,0x10
c0016bac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016bb0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016bb3:	52                   	push   edx
c0016bb4:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0016bb7:	51                   	push   ecx
c0016bb8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016bbb:	50                   	push   eax
c0016bbc:	e8 4f 23 00 00       	call   c0018f10 <waitTask(int, int*, int)>
c0016bc1:	89 c2                	mov    edx,eax
c0016bc3:	83 c4 1c             	add    esp,0x1c
c0016bc6:	c1 fa 1f             	sar    edx,0x1f
c0016bc9:	c3                   	ret    

c0016bca <sysCallRmdir(regs*)>:
c0016bca:	56                   	push   esi
c0016bcb:	53                   	push   ebx
c0016bcc:	83 ec 10             	sub    esp,0x10
c0016bcf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bd3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016bd6:	68 14 01 00 00       	push   0x114
c0016bdb:	e8 00 85 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c0016be0:	83 c4 0c             	add    esp,0xc
c0016be3:	89 c3                	mov    ebx,eax
c0016be5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016bed:	50                   	push   eax
c0016bee:	56                   	push   esi
c0016bef:	53                   	push   ebx
c0016bf0:	e8 57 8b ff ff       	call   c000f74c <File::File(char const*, Process*)>
c0016bf5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016bf8:	e8 2b 8d ff ff       	call   c000f928 <File::unlink()>
c0016bfd:	89 c6                	mov    esi,eax
c0016bff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c01:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c04:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016c07:	31 c0                	xor    eax,eax
c0016c09:	85 f6                	test   esi,esi
c0016c0b:	0f 95 c0             	setne  al
c0016c0e:	31 d2                	xor    edx,edx
c0016c10:	f7 d8                	neg    eax
c0016c12:	83 d2 00             	adc    edx,0x0
c0016c15:	83 c4 14             	add    esp,0x14
c0016c18:	f7 da                	neg    edx
c0016c1a:	5b                   	pop    ebx
c0016c1b:	5e                   	pop    esi
c0016c1c:	c3                   	ret    

c0016c1d <sysCallUnlink(regs*)>:
c0016c1d:	56                   	push   esi
c0016c1e:	53                   	push   ebx
c0016c1f:	83 ec 10             	sub    esp,0x10
c0016c22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c26:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016c29:	68 14 01 00 00       	push   0x114
c0016c2e:	e8 ad 84 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c0016c33:	83 c4 0c             	add    esp,0xc
c0016c36:	89 c3                	mov    ebx,eax
c0016c38:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c3d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016c40:	50                   	push   eax
c0016c41:	56                   	push   esi
c0016c42:	53                   	push   ebx
c0016c43:	e8 04 8b ff ff       	call   c000f74c <File::File(char const*, Process*)>
c0016c48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c4b:	e8 d8 8c ff ff       	call   c000f928 <File::unlink()>
c0016c50:	89 c6                	mov    esi,eax
c0016c52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c57:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016c5a:	31 c0                	xor    eax,eax
c0016c5c:	85 f6                	test   esi,esi
c0016c5e:	0f 95 c0             	setne  al
c0016c61:	31 d2                	xor    edx,edx
c0016c63:	f7 d8                	neg    eax
c0016c65:	83 d2 00             	adc    edx,0x0
c0016c68:	83 c4 14             	add    esp,0x14
c0016c6b:	f7 da                	neg    edx
c0016c6d:	5b                   	pop    ebx
c0016c6e:	5e                   	pop    esi
c0016c6f:	c3                   	ret    

c0016c70 <sysCallGetArgv(regs*)>:
c0016c70:	83 ec 0c             	sub    esp,0xc
c0016c73:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016c77:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016c7a:	85 c0                	test   eax,eax
c0016c7c:	78 2b                	js     c0016ca9 <sysCallGetArgv(regs*)+0x39>
c0016c7e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016c84:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0016c87:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0016c8d:	7d 1a                	jge    c0016ca9 <sysCallGetArgv(regs*)+0x39>
c0016c8f:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0016c96:	85 c0                	test   eax,eax
c0016c98:	74 17                	je     c0016cb1 <sysCallGetArgv(regs*)+0x41>
c0016c9a:	51                   	push   ecx
c0016c9b:	51                   	push   ecx
c0016c9c:	50                   	push   eax
c0016c9d:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0016ca0:	50                   	push   eax
c0016ca1:	e8 bd 9a fe ff       	call   c0000763 <strcpy>
c0016ca6:	83 c4 10             	add    esp,0x10
c0016ca9:	31 c0                	xor    eax,eax
c0016cab:	31 d2                	xor    edx,edx
c0016cad:	83 c4 0c             	add    esp,0xc
c0016cb0:	c3                   	ret    
c0016cb1:	b8 01 00 00 00       	mov    eax,0x1
c0016cb6:	31 d2                	xor    edx,edx
c0016cb8:	83 c4 0c             	add    esp,0xc
c0016cbb:	c3                   	ret    

c0016cbc <sysCallTTYName(regs*)>:
c0016cbc:	56                   	push   esi
c0016cbd:	53                   	push   ebx
c0016cbe:	50                   	push   eax
c0016cbf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016cc3:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016cc6:	85 c0                	test   eax,eax
c0016cc8:	74 4d                	je     c0016d17 <sysCallTTYName(regs*)+0x5b>
c0016cca:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016ccd:	83 f8 02             	cmp    eax,0x2
c0016cd0:	76 07                	jbe    c0016cd9 <sysCallTTYName(regs*)+0x1d>
c0016cd2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016cd7:	75 54                	jne    c0016d2d <sysCallTTYName(regs*)+0x71>
c0016cd9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cde:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ce1:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016ce7:	85 db                	test   ebx,ebx
c0016ce9:	74 2c                	je     c0016d17 <sysCallTTYName(regs*)+0x5b>
c0016ceb:	83 ec 0c             	sub    esp,0xc
c0016cee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016cf0:	53                   	push   ebx
c0016cf1:	ff 10                	call   DWORD PTR [eax]
c0016cf3:	83 c4 10             	add    esp,0x10
c0016cf6:	84 c0                	test   al,al
c0016cf8:	74 28                	je     c0016d22 <sysCallTTYName(regs*)+0x66>
c0016cfa:	50                   	push   eax
c0016cfb:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0016d01:	50                   	push   eax
c0016d02:	53                   	push   ebx
c0016d03:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016d06:	50                   	push   eax
c0016d07:	e8 57 9a fe ff       	call   c0000763 <strcpy>
c0016d0c:	83 c4 10             	add    esp,0x10
c0016d0f:	31 c0                	xor    eax,eax
c0016d11:	31 d2                	xor    edx,edx
c0016d13:	59                   	pop    ecx
c0016d14:	5b                   	pop    ebx
c0016d15:	5e                   	pop    esi
c0016d16:	c3                   	ret    
c0016d17:	59                   	pop    ecx
c0016d18:	b8 01 00 00 00       	mov    eax,0x1
c0016d1d:	5b                   	pop    ebx
c0016d1e:	31 d2                	xor    edx,edx
c0016d20:	5e                   	pop    esi
c0016d21:	c3                   	ret    
c0016d22:	59                   	pop    ecx
c0016d23:	b8 02 00 00 00       	mov    eax,0x2
c0016d28:	5b                   	pop    ebx
c0016d29:	31 d2                	xor    edx,edx
c0016d2b:	5e                   	pop    esi
c0016d2c:	c3                   	ret    
c0016d2d:	83 ec 0c             	sub    esp,0xc
c0016d30:	50                   	push   eax
c0016d31:	e8 3b 73 ff ff       	call   c000e071 <getFromFileDescriptor(int)>
c0016d36:	83 c4 10             	add    esp,0x10
c0016d39:	89 c3                	mov    ebx,eax
c0016d3b:	eb aa                	jmp    c0016ce7 <sysCallTTYName(regs*)+0x2b>

c0016d3d <sysCallGetEnv(regs*)>:
c0016d3d:	83 ec 0c             	sub    esp,0xc
c0016d40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d44:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016d47:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016d4a:	85 d2                	test   edx,edx
c0016d4c:	75 22                	jne    c0016d70 <sysCallGetEnv(regs*)+0x33>
c0016d4e:	31 c0                	xor    eax,eax
c0016d50:	31 d2                	xor    edx,edx
c0016d52:	85 c9                	test   ecx,ecx
c0016d54:	74 04                	je     c0016d5a <sysCallGetEnv(regs*)+0x1d>
c0016d56:	83 c4 0c             	add    esp,0xc
c0016d59:	c3                   	ret    
c0016d5a:	83 ec 0c             	sub    esp,0xc
c0016d5d:	68 38 2b 02 c0       	push   0xc0022b38
c0016d62:	e8 7a 99 fe ff       	call   c00006e1 <strlen>
c0016d67:	83 c4 10             	add    esp,0x10
c0016d6a:	31 d2                	xor    edx,edx
c0016d6c:	83 c4 0c             	add    esp,0xc
c0016d6f:	c3                   	ret    
c0016d70:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016d73:	85 c9                	test   ecx,ecx
c0016d75:	74 0b                	je     c0016d82 <sysCallGetEnv(regs*)+0x45>
c0016d77:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0016d7a:	31 c0                	xor    eax,eax
c0016d7c:	31 d2                	xor    edx,edx
c0016d7e:	83 c4 0c             	add    esp,0xc
c0016d81:	c3                   	ret    
c0016d82:	52                   	push   edx
c0016d83:	52                   	push   edx
c0016d84:	68 38 2b 02 c0       	push   0xc0022b38
c0016d89:	50                   	push   eax
c0016d8a:	e8 d4 99 fe ff       	call   c0000763 <strcpy>
c0016d8f:	83 c4 10             	add    esp,0x10
c0016d92:	eb e6                	jmp    c0016d7a <sysCallGetEnv(regs*)+0x3d>

c0016d94 <sysCallUSleep(regs*)>:
c0016d94:	57                   	push   edi
c0016d95:	56                   	push   esi
c0016d96:	53                   	push   ebx
c0016d97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d9b:	52                   	push   edx
c0016d9c:	52                   	push   edx
c0016d9d:	8b 58 28             	mov    ebx,DWORD PTR [eax+0x28]
c0016da0:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016da3:	89 c8                	mov    eax,ecx
c0016da5:	89 da                	mov    edx,ebx
c0016da7:	0f a4 c2 05          	shld   edx,eax,0x5
c0016dab:	c1 e0 05             	shl    eax,0x5
c0016dae:	29 c8                	sub    eax,ecx
c0016db0:	19 da                	sbb    edx,ebx
c0016db2:	0f a4 c2 02          	shld   edx,eax,0x2
c0016db6:	c1 e0 02             	shl    eax,0x2
c0016db9:	01 c8                	add    eax,ecx
c0016dbb:	11 da                	adc    edx,ebx
c0016dbd:	0f a4 c2 03          	shld   edx,eax,0x3
c0016dc1:	c1 e0 03             	shl    eax,0x3
c0016dc4:	52                   	push   edx
c0016dc5:	50                   	push   eax
c0016dc6:	e8 e0 21 00 00       	call   c0018fab <nanoSleep(unsigned long long)>
c0016dcb:	83 c4 10             	add    esp,0x10
c0016dce:	31 c0                	xor    eax,eax
c0016dd0:	31 d2                	xor    edx,edx
c0016dd2:	5b                   	pop    ebx
c0016dd3:	5e                   	pop    esi
c0016dd4:	5f                   	pop    edi
c0016dd5:	c3                   	ret    

c0016dd6 <sysCallSpawn(regs*)>:
c0016dd6:	56                   	push   esi
c0016dd7:	53                   	push   ebx
c0016dd8:	50                   	push   eax
c0016dd9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016ddd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016de0:	85 c0                	test   eax,eax
c0016de2:	75 08                	jne    c0016dec <sysCallSpawn(regs*)+0x16>
c0016de4:	59                   	pop    ecx
c0016de5:	31 c0                	xor    eax,eax
c0016de7:	5b                   	pop    ebx
c0016de8:	31 d2                	xor    edx,edx
c0016dea:	5e                   	pop    esi
c0016deb:	c3                   	ret    
c0016dec:	83 ec 0c             	sub    esp,0xc
c0016def:	68 3b 07 00 00       	push   0x73b
c0016df4:	e8 e7 82 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c0016df9:	89 c6                	mov    esi,eax
c0016dfb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016dfe:	50                   	push   eax
c0016dff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e04:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016e07:	50                   	push   eax
c0016e08:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016e0b:	50                   	push   eax
c0016e0c:	56                   	push   esi
c0016e0d:	e8 d6 18 00 00       	call   c00186e8 <Process::Process(char const*, Process*, char**)>
c0016e12:	83 c4 20             	add    esp,0x20
c0016e15:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0016e1c:	75 c6                	jne    c0016de4 <sysCallSpawn(regs*)+0xe>
c0016e1e:	83 ec 0c             	sub    esp,0xc
c0016e21:	56                   	push   esi
c0016e22:	e8 3d 1e 00 00       	call   c0018c64 <Process::createUserThread()>
c0016e27:	83 c4 10             	add    esp,0x10
c0016e2a:	8b 06                	mov    eax,DWORD PTR [esi]
c0016e2c:	89 c2                	mov    edx,eax
c0016e2e:	c1 fa 1f             	sar    edx,0x1f
c0016e31:	59                   	pop    ecx
c0016e32:	5b                   	pop    ebx
c0016e33:	5e                   	pop    esi
c0016e34:	c3                   	ret    

c0016e35 <sysAppSettings(regs*)>:
c0016e35:	53                   	push   ebx
c0016e36:	31 d2                	xor    edx,edx
c0016e38:	83 ec 08             	sub    esp,0x8
c0016e3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e3f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0016e42:	b8 01 00 00 00       	mov    eax,0x1
c0016e47:	8b 8b 00 01 00 00    	mov    ecx,DWORD PTR [ebx+0x100]
c0016e4d:	81 e1 e0 1f 00 00    	and    ecx,0x1fe0
c0016e53:	66 81 f9 c0 09       	cmp    cx,0x9c0
c0016e58:	75 30                	jne    c0016e8a <sysAppSettings(regs*)+0x55>
c0016e5a:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0016e60:	83 e0 1f             	and    eax,0x1f
c0016e63:	3c 01                	cmp    al,0x1
c0016e65:	74 28                	je     c0016e8f <sysAppSettings(regs*)+0x5a>
c0016e67:	3c 07                	cmp    al,0x7
c0016e69:	0f 84 be 00 00 00    	je     c0016f2d <sysAppSettings(regs*)+0xf8>
c0016e6f:	84 c0                	test   al,al
c0016e71:	0f 84 da 00 00 00    	je     c0016f51 <sysAppSettings(regs*)+0x11c>
c0016e77:	3c 08                	cmp    al,0x8
c0016e79:	74 6d                	je     c0016ee8 <sysAppSettings(regs*)+0xb3>
c0016e7b:	25 ff 00 00 00       	and    eax,0xff
c0016e80:	05 e8 03 00 00       	add    eax,0x3e8
c0016e85:	89 c2                	mov    edx,eax
c0016e87:	c1 fa 1f             	sar    edx,0x1f
c0016e8a:	83 c4 08             	add    esp,0x8
c0016e8d:	5b                   	pop    ebx
c0016e8e:	c3                   	ret    
c0016e8f:	50                   	push   eax
c0016e90:	68 00 01 00 00       	push   0x100
c0016e95:	6a 00                	push   0x0
c0016e97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e9c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016e9f:	83 c0 0c             	add    eax,0xc
c0016ea2:	50                   	push   eax
c0016ea3:	e8 1c 98 fe ff       	call   c00006c4 <memset>
c0016ea8:	83 c4 0c             	add    esp,0xc
c0016eab:	68 ff 00 00 00       	push   0xff
c0016eb0:	53                   	push   ebx
c0016eb1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eb6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016eb9:	83 c0 0c             	add    eax,0xc
c0016ebc:	50                   	push   eax
c0016ebd:	e8 cc 97 fe ff       	call   c000068e <memcpy>
c0016ec2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ec7:	5a                   	pop    edx
c0016ec8:	59                   	pop    ecx
c0016ec9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ecc:	8d 50 0c             	lea    edx,[eax+0xc]
c0016ecf:	52                   	push   edx
c0016ed0:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016ed6:	53                   	push   ebx
c0016ed7:	e8 dc 62 ff ff       	call   c000d1b8 <VgaText::setTitle(char*)>
c0016edc:	83 c4 10             	add    esp,0x10
c0016edf:	31 c0                	xor    eax,eax
c0016ee1:	31 d2                	xor    edx,edx
c0016ee3:	83 c4 08             	add    esp,0x8
c0016ee6:	5b                   	pop    ebx
c0016ee7:	c3                   	ret    
c0016ee8:	50                   	push   eax
c0016ee9:	50                   	push   eax
c0016eea:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016ef0:	83 e0 0f             	and    eax,0xf
c0016ef3:	50                   	push   eax
c0016ef4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ef9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016efc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0016f02:	50                   	push   eax
c0016f03:	e8 a0 62 ff ff       	call   c000d1a8 <VgaText::setTitleColour(VgaColour)>
c0016f08:	58                   	pop    eax
c0016f09:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016f0f:	c1 e8 04             	shr    eax,0x4
c0016f12:	5a                   	pop    edx
c0016f13:	83 e0 0f             	and    eax,0xf
c0016f16:	50                   	push   eax
c0016f17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f1c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f1f:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016f25:	51                   	push   ecx
c0016f26:	e8 6d 62 ff ff       	call   c000d198 <VgaText::setTitleTextColour(VgaColour)>
c0016f2b:	eb af                	jmp    c0016edc <sysAppSettings(regs*)+0xa7>
c0016f2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f32:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f35:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0016f3b:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0016f41:	c0 e8 06             	shr    al,0x6
c0016f44:	83 e0 01             	and    eax,0x1
c0016f47:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0016f4d:	31 c0                	xor    eax,eax
c0016f4f:	eb 90                	jmp    c0016ee1 <sysAppSettings(regs*)+0xac>
c0016f51:	b8 02 00 00 00       	mov    eax,0x2
c0016f56:	31 d2                	xor    edx,edx
c0016f58:	eb 89                	jmp    c0016ee3 <sysAppSettings(regs*)+0xae>

c0016f5a <sysSetFatAttrib(regs*)>:
c0016f5a:	57                   	push   edi
c0016f5b:	56                   	push   esi
c0016f5c:	53                   	push   ebx
c0016f5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f61:	83 ec 0c             	sub    esp,0xc
c0016f64:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016f67:	68 14 01 00 00       	push   0x114
c0016f6c:	e8 6f 81 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c0016f71:	83 c4 0c             	add    esp,0xc
c0016f74:	89 c3                	mov    ebx,eax
c0016f76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f7b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f7e:	50                   	push   eax
c0016f7f:	57                   	push   edi
c0016f80:	53                   	push   ebx
c0016f81:	e8 c6 87 ff ff       	call   c000f74c <File::File(char const*, Process*)>
c0016f86:	83 c4 0c             	add    esp,0xc
c0016f89:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016f8c:	0f b6 d4             	movzx  edx,ah
c0016f8f:	52                   	push   edx
c0016f90:	25 ff 00 00 00       	and    eax,0xff
c0016f95:	50                   	push   eax
c0016f96:	53                   	push   ebx
c0016f97:	e8 26 8a ff ff       	call   c000f9c2 <File::chfatattr(unsigned char, unsigned char)>
c0016f9c:	89 c6                	mov    esi,eax
c0016f9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fa0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016fa3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016fa6:	83 c4 10             	add    esp,0x10
c0016fa9:	31 c0                	xor    eax,eax
c0016fab:	85 f6                	test   esi,esi
c0016fad:	0f 95 c0             	setne  al
c0016fb0:	5b                   	pop    ebx
c0016fb1:	31 d2                	xor    edx,edx
c0016fb3:	f7 d8                	neg    eax
c0016fb5:	83 d2 00             	adc    edx,0x0
c0016fb8:	5e                   	pop    esi
c0016fb9:	f7 da                	neg    edx
c0016fbb:	5f                   	pop    edi
c0016fbc:	c3                   	ret    

c0016fbd <sysPanic(regs*)>:
c0016fbd:	83 ec 18             	sub    esp,0x18
c0016fc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016fc4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016fc7:	50                   	push   eax
c0016fc8:	e8 77 ea ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c0016fcd:	c7 04 24 ef 2b 02 c0 	mov    DWORD PTR [esp],0xc0022bef
c0016fd4:	e8 6b ea ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c0016fd9:	b8 01 00 00 00       	mov    eax,0x1
c0016fde:	31 d2                	xor    edx,edx
c0016fe0:	83 c4 1c             	add    esp,0x1c
c0016fe3:	c3                   	ret    

c0016fe4 <sysPipe(regs*)>:
c0016fe4:	57                   	push   edi
c0016fe5:	56                   	push   esi
c0016fe6:	53                   	push   ebx
c0016fe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016feb:	83 ec 0c             	sub    esp,0xc
c0016fee:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016ff1:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016ff4:	6a 20                	push   0x20
c0016ff6:	e8 e5 80 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c0016ffb:	89 c3                	mov    ebx,eax
c0016ffd:	58                   	pop    eax
c0016ffe:	5a                   	pop    edx
c0016fff:	68 00 50 00 00       	push   0x5000
c0017004:	53                   	push   ebx
c0017005:	e8 ec 5a ff ff       	call   c000caf6 <Pipe::Pipe(int)>
c001700a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001700d:	e8 aa 6d ff ff       	call   c000ddbc <UnixFile::getFileDescriptor()>
c0017012:	89 07                	mov    DWORD PTR [edi],eax
c0017014:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017017:	e8 a0 6d ff ff       	call   c000ddbc <UnixFile::getFileDescriptor()>
c001701c:	83 c4 10             	add    esp,0x10
c001701f:	89 06                	mov    DWORD PTR [esi],eax
c0017021:	31 d2                	xor    edx,edx
c0017023:	5b                   	pop    ebx
c0017024:	31 c0                	xor    eax,eax
c0017026:	5e                   	pop    esi
c0017027:	5f                   	pop    edi
c0017028:	c3                   	ret    

c0017029 <sysGetUnixTime(regs*)>:
c0017029:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001702e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017034:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017038:	e9 d7 90 ff ff       	jmp    c0010114 <Clock::timeInSecondsLocal()>

c001703d <string_ends_with(char const*, char const*)>:
c001703d:	57                   	push   edi
c001703e:	56                   	push   esi
c001703f:	53                   	push   ebx
c0017040:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017044:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017048:	83 ec 0c             	sub    esp,0xc
c001704b:	53                   	push   ebx
c001704c:	e8 90 96 fe ff       	call   c00006e1 <strlen>
c0017051:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017054:	89 c6                	mov    esi,eax
c0017056:	e8 86 96 fe ff       	call   c00006e1 <strlen>
c001705b:	83 c4 10             	add    esp,0x10
c001705e:	31 d2                	xor    edx,edx
c0017060:	39 c6                	cmp    esi,eax
c0017062:	7d 06                	jge    c001706a <string_ends_with(char const*, char const*)+0x2d>
c0017064:	5b                   	pop    ebx
c0017065:	89 d0                	mov    eax,edx
c0017067:	5e                   	pop    esi
c0017068:	5f                   	pop    edi
c0017069:	c3                   	ret    
c001706a:	52                   	push   edx
c001706b:	29 c6                	sub    esi,eax
c001706d:	52                   	push   edx
c001706e:	01 f3                	add    ebx,esi
c0017070:	57                   	push   edi
c0017071:	53                   	push   ebx
c0017072:	e8 3d 97 fe ff       	call   c00007b4 <strcmp>
c0017077:	83 c4 10             	add    esp,0x10
c001707a:	31 d2                	xor    edx,edx
c001707c:	85 c0                	test   eax,eax
c001707e:	5b                   	pop    ebx
c001707f:	0f 94 c2             	sete   dl
c0017082:	5e                   	pop    esi
c0017083:	89 d0                	mov    eax,edx
c0017085:	5f                   	pop    edi
c0017086:	c3                   	ret    

c0017087 <sysCallOpen(regs*)>:
c0017087:	56                   	push   esi
c0017088:	53                   	push   ebx
c0017089:	81 ec 04 01 00 00    	sub    esp,0x104
c001708f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0017096:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0017099:	85 c9                	test   ecx,ecx
c001709b:	0f 84 bb 00 00 00    	je     c001715c <sysCallOpen(regs*)+0xd5>
c00170a1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00170a4:	85 c0                	test   eax,eax
c00170a6:	0f 84 b0 00 00 00    	je     c001715c <sysCallOpen(regs*)+0xd5>
c00170ac:	52                   	push   edx
c00170ad:	68 fe 2b 02 c0       	push   0xc0022bfe
c00170b2:	50                   	push   eax
c00170b3:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00170b7:	56                   	push   esi
c00170b8:	e8 e5 84 ff ff       	call   c000f5a2 <standardiseFiles(char*, char const*, char const*)>
c00170bd:	89 34 24             	mov    DWORD PTR [esp],esi
c00170c0:	e8 1c 96 fe ff       	call   c00006e1 <strlen>
c00170c5:	83 c4 10             	add    esp,0x10
c00170c8:	48                   	dec    eax
c00170c9:	74 25                	je     c00170f0 <sysCallOpen(regs*)+0x69>
c00170cb:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00170ce:	80 fa 2e             	cmp    dl,0x2e
c00170d1:	74 19                	je     c00170ec <sysCallOpen(regs*)+0x65>
c00170d3:	80 fa 3a             	cmp    dl,0x3a
c00170d6:	74 14                	je     c00170ec <sysCallOpen(regs*)+0x65>
c00170d8:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00170dc:	48                   	dec    eax
c00170dd:	74 11                	je     c00170f0 <sysCallOpen(regs*)+0x69>
c00170df:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00170e2:	80 fa 3a             	cmp    dl,0x3a
c00170e5:	74 05                	je     c00170ec <sysCallOpen(regs*)+0x65>
c00170e7:	80 fa 2e             	cmp    dl,0x2e
c00170ea:	75 ec                	jne    c00170d8 <sysCallOpen(regs*)+0x51>
c00170ec:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00170f0:	51                   	push   ecx
c00170f1:	51                   	push   ecx
c00170f2:	68 02 2c 02 c0       	push   0xc0022c02
c00170f7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00170fa:	50                   	push   eax
c00170fb:	e8 3d ff ff ff       	call   c001703d <string_ends_with(char const*, char const*)>
c0017100:	83 c4 10             	add    esp,0x10
c0017103:	85 c0                	test   eax,eax
c0017105:	75 17                	jne    c001711e <sysCallOpen(regs*)+0x97>
c0017107:	50                   	push   eax
c0017108:	50                   	push   eax
c0017109:	68 23 2c 02 c0       	push   0xc0022c23
c001710e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017111:	50                   	push   eax
c0017112:	e8 26 ff ff ff       	call   c001703d <string_ends_with(char const*, char const*)>
c0017117:	83 c4 10             	add    esp,0x10
c001711a:	85 c0                	test   eax,eax
c001711c:	74 4d                	je     c001716b <sysCallOpen(regs*)+0xe4>
c001711e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017121:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0017127:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001712e:	50                   	push   eax
c001712f:	50                   	push   eax
c0017130:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017133:	8b 10                	mov    edx,DWORD PTR [eax]
c0017135:	52                   	push   edx
c0017136:	68 07 2c 02 c0       	push   0xc0022c07
c001713b:	e8 d5 80 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0017140:	c7 04 24 16 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c16
c0017147:	e8 c9 80 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001714c:	83 c4 10             	add    esp,0x10
c001714f:	81 c4 04 01 00 00    	add    esp,0x104
c0017155:	31 c0                	xor    eax,eax
c0017157:	31 d2                	xor    edx,edx
c0017159:	5b                   	pop    ebx
c001715a:	5e                   	pop    esi
c001715b:	c3                   	ret    
c001715c:	81 c4 04 01 00 00    	add    esp,0x104
c0017162:	83 c8 ff             	or     eax,0xffffffff
c0017165:	83 ca ff             	or     edx,0xffffffff
c0017168:	5b                   	pop    ebx
c0017169:	5e                   	pop    esi
c001716a:	c3                   	ret    
c001716b:	50                   	push   eax
c001716c:	50                   	push   eax
c001716d:	68 03 2c 02 c0       	push   0xc0022c03
c0017172:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017175:	50                   	push   eax
c0017176:	e8 39 96 fe ff       	call   c00007b4 <strcmp>
c001717b:	83 c4 10             	add    esp,0x10
c001717e:	85 c0                	test   eax,eax
c0017180:	74 9c                	je     c001711e <sysCallOpen(regs*)+0x97>
c0017182:	50                   	push   eax
c0017183:	50                   	push   eax
c0017184:	68 02 2c 02 c0       	push   0xc0022c02
c0017189:	56                   	push   esi
c001718a:	e8 ae fe ff ff       	call   c001703d <string_ends_with(char const*, char const*)>
c001718f:	83 c4 10             	add    esp,0x10
c0017192:	85 c0                	test   eax,eax
c0017194:	75 88                	jne    c001711e <sysCallOpen(regs*)+0x97>
c0017196:	52                   	push   edx
c0017197:	52                   	push   edx
c0017198:	68 28 2c 02 c0       	push   0xc0022c28
c001719d:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00171a0:	51                   	push   ecx
c00171a1:	e8 97 fe ff ff       	call   c001703d <string_ends_with(char const*, char const*)>
c00171a6:	83 c4 10             	add    esp,0x10
c00171a9:	85 c0                	test   eax,eax
c00171ab:	0f 85 d5 00 00 00    	jne    c0017286 <sysCallOpen(regs*)+0x1ff>
c00171b1:	50                   	push   eax
c00171b2:	50                   	push   eax
c00171b3:	68 2d 2c 02 c0       	push   0xc0022c2d
c00171b8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171bb:	50                   	push   eax
c00171bc:	e8 7c fe ff ff       	call   c001703d <string_ends_with(char const*, char const*)>
c00171c1:	83 c4 10             	add    esp,0x10
c00171c4:	85 c0                	test   eax,eax
c00171c6:	0f 85 ba 00 00 00    	jne    c0017286 <sysCallOpen(regs*)+0x1ff>
c00171cc:	50                   	push   eax
c00171cd:	50                   	push   eax
c00171ce:	68 29 2c 02 c0       	push   0xc0022c29
c00171d3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171d6:	50                   	push   eax
c00171d7:	e8 d8 95 fe ff       	call   c00007b4 <strcmp>
c00171dc:	83 c4 10             	add    esp,0x10
c00171df:	85 c0                	test   eax,eax
c00171e1:	0f 84 9f 00 00 00    	je     c0017286 <sysCallOpen(regs*)+0x1ff>
c00171e7:	50                   	push   eax
c00171e8:	50                   	push   eax
c00171e9:	68 28 2c 02 c0       	push   0xc0022c28
c00171ee:	56                   	push   esi
c00171ef:	e8 49 fe ff ff       	call   c001703d <string_ends_with(char const*, char const*)>
c00171f4:	83 c4 10             	add    esp,0x10
c00171f7:	85 c0                	test   eax,eax
c00171f9:	0f 85 87 00 00 00    	jne    c0017286 <sysCallOpen(regs*)+0x1ff>
c00171ff:	83 ec 0c             	sub    esp,0xc
c0017202:	68 14 01 00 00       	push   0x114
c0017207:	e8 d4 7e ff ff       	call   c000f0e0 <operator new(unsigned long)>
c001720c:	89 c6                	mov    esi,eax
c001720e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017213:	83 c4 0c             	add    esp,0xc
c0017216:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0017219:	51                   	push   ecx
c001721a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001721d:	50                   	push   eax
c001721e:	56                   	push   esi
c001721f:	e8 28 85 ff ff       	call   c000f74c <File::File(char const*, Process*)>
c0017224:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0017227:	83 c4 10             	add    esp,0x10
c001722a:	89 d0                	mov    eax,edx
c001722c:	25 ff 00 00 00       	and    eax,0xff
c0017231:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0017234:	89 d0                	mov    eax,edx
c0017236:	83 e0 01             	and    eax,0x1
c0017239:	f6 c2 02             	test   dl,0x2
c001723c:	74 03                	je     c0017241 <sysCallOpen(regs*)+0x1ba>
c001723e:	83 c8 02             	or     eax,0x2
c0017241:	f6 c2 04             	test   dl,0x4
c0017244:	74 03                	je     c0017249 <sysCallOpen(regs*)+0x1c2>
c0017246:	83 c8 04             	or     eax,0x4
c0017249:	f6 c2 08             	test   dl,0x8
c001724c:	74 03                	je     c0017251 <sysCallOpen(regs*)+0x1ca>
c001724e:	83 c8 0a             	or     eax,0xa
c0017251:	83 e2 10             	and    edx,0x10
c0017254:	74 03                	je     c0017259 <sysCallOpen(regs*)+0x1d2>
c0017256:	83 c8 12             	or     eax,0x12
c0017259:	52                   	push   edx
c001725a:	52                   	push   edx
c001725b:	50                   	push   eax
c001725c:	56                   	push   esi
c001725d:	e8 4e 85 ff ff       	call   c000f7b0 <File::open(FileOpenMode)>
c0017262:	83 c4 10             	add    esp,0x10
c0017265:	85 c0                	test   eax,eax
c0017267:	0f 85 ef fe ff ff    	jne    c001715c <sysCallOpen(regs*)+0xd5>
c001726d:	83 ec 0c             	sub    esp,0xc
c0017270:	56                   	push   esi
c0017271:	e8 46 6b ff ff       	call   c000ddbc <UnixFile::getFileDescriptor()>
c0017276:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0017279:	89 02                	mov    DWORD PTR [edx],eax
c001727b:	c1 f8 1f             	sar    eax,0x1f
c001727e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017281:	e9 c6 fe ff ff       	jmp    c001714c <sysCallOpen(regs*)+0xc5>
c0017286:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017289:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001728f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017296:	e9 b4 fe ff ff       	jmp    c001714f <sysCallOpen(regs*)+0xc8>

c001729b <setupSystemCalls()>:
c001729b:	c7 05 00 52 02 c0 96 64 01 c0 	mov    DWORD PTR ds:0xc0025200,0xc0016496
c00172a5:	c7 05 04 52 02 c0 a9 62 01 c0 	mov    DWORD PTR ds:0xc0025204,0xc00162a9
c00172af:	c7 05 08 52 02 c0 be 63 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc00163be
c00172b9:	c7 05 0c 52 02 c0 13 64 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc0016413
c00172c3:	c7 05 10 52 02 c0 56 63 01 c0 	mov    DWORD PTR ds:0xc0025210,0xc0016356
c00172cd:	c7 05 14 52 02 c0 b0 64 01 c0 	mov    DWORD PTR ds:0xc0025214,0xc00164b0
c00172d7:	c7 05 18 52 02 c0 6f 66 01 c0 	mov    DWORD PTR ds:0xc0025218,0xc001666f
c00172e1:	c7 05 1c 52 02 c0 95 66 01 c0 	mov    DWORD PTR ds:0xc002521c,0xc0016695
c00172eb:	c7 05 24 52 02 c0 ff 69 01 c0 	mov    DWORD PTR ds:0xc0025224,0xc00169ff
c00172f5:	c7 05 20 52 02 c0 87 70 01 c0 	mov    DWORD PTR ds:0xc0025220,0xc0017087
c00172ff:	c7 05 28 52 02 c0 82 6a 01 c0 	mov    DWORD PTR ds:0xc0025228,0xc0016a82
c0017309:	c7 05 2c 52 02 c0 04 67 01 c0 	mov    DWORD PTR ds:0xc002522c,0xc0016704
c0017313:	c7 05 30 52 02 c0 c0 64 01 c0 	mov    DWORD PTR ds:0xc0025230,0xc00164c0
c001731d:	c7 05 34 52 02 c0 c5 64 01 c0 	mov    DWORD PTR ds:0xc0025234,0xc00164c5
c0017327:	c7 05 38 52 02 c0 ed 6a 01 c0 	mov    DWORD PTR ds:0xc0025238,0xc0016aed
c0017331:	c7 05 3c 52 02 c0 48 6b 01 c0 	mov    DWORD PTR ds:0xc002523c,0xc0016b48
c001733b:	c7 05 40 52 02 c0 ef 67 01 c0 	mov    DWORD PTR ds:0xc0025240,0xc00167ef
c0017345:	c7 05 44 52 02 c0 55 68 01 c0 	mov    DWORD PTR ds:0xc0025244,0xc0016855
c001734f:	c7 05 48 52 02 c0 7e 69 01 c0 	mov    DWORD PTR ds:0xc0025248,0xc001697e
c0017359:	c7 05 4c 52 02 c0 ca 64 01 c0 	mov    DWORD PTR ds:0xc002524c,0xc00164ca
c0017363:	c7 05 50 52 02 c0 a9 6b 01 c0 	mov    DWORD PTR ds:0xc0025250,0xc0016ba9
c001736d:	c7 05 54 52 02 c0 d4 64 01 c0 	mov    DWORD PTR ds:0xc0025254,0xc00164d4
c0017377:	c7 05 58 52 02 c0 db 64 01 c0 	mov    DWORD PTR ds:0xc0025258,0xc00164db
c0017381:	c7 05 5c 52 02 c0 ca 6b 01 c0 	mov    DWORD PTR ds:0xc002525c,0xc0016bca
c001738b:	c7 05 60 52 02 c0 1d 6c 01 c0 	mov    DWORD PTR ds:0xc0025260,0xc0016c1d
c0017395:	c7 05 64 52 02 c0 e2 64 01 c0 	mov    DWORD PTR ds:0xc0025264,0xc00164e2
c001739f:	c7 05 68 52 02 c0 70 6c 01 c0 	mov    DWORD PTR ds:0xc0025268,0xc0016c70
c00173a9:	c7 05 6c 52 02 c0 b7 66 01 c0 	mov    DWORD PTR ds:0xc002526c,0xc00166b7
c00173b3:	c7 05 70 52 02 c0 bc 6c 01 c0 	mov    DWORD PTR ds:0xc0025270,0xc0016cbc
c00173bd:	c7 05 74 52 02 c0 97 67 01 c0 	mov    DWORD PTR ds:0xc0025274,0xc0016797
c00173c7:	c7 05 78 52 02 c0 94 6d 01 c0 	mov    DWORD PTR ds:0xc0025278,0xc0016d94
c00173d1:	c7 05 7c 52 02 c0 d0 68 01 c0 	mov    DWORD PTR ds:0xc002527c,0xc00168d0
c00173db:	c7 05 80 52 02 c0 d6 6d 01 c0 	mov    DWORD PTR ds:0xc0025280,0xc0016dd6
c00173e5:	c7 05 84 52 02 c0 3d 6d 01 c0 	mov    DWORD PTR ds:0xc0025284,0xc0016d3d
c00173ef:	c7 05 88 52 02 c0 35 6e 01 c0 	mov    DWORD PTR ds:0xc0025288,0xc0016e35
c00173f9:	c7 05 8c 52 02 c0 f6 64 01 c0 	mov    DWORD PTR ds:0xc002528c,0xc00164f6
c0017403:	c7 05 90 52 02 c0 59 65 01 c0 	mov    DWORD PTR ds:0xc0025290,0xc0016559
c001740d:	c7 05 94 52 02 c0 a1 65 01 c0 	mov    DWORD PTR ds:0xc0025294,0xc00165a1
c0017417:	c7 05 98 52 02 c0 5a 6f 01 c0 	mov    DWORD PTR ds:0xc0025298,0xc0016f5a
c0017421:	c7 05 9c 52 02 c0 bd 6f 01 c0 	mov    DWORD PTR ds:0xc002529c,0xc0016fbd
c001742b:	c7 05 a0 52 02 c0 f4 65 01 c0 	mov    DWORD PTR ds:0xc00252a0,0xc00165f4
c0017435:	c7 05 a4 52 02 c0 e4 6f 01 c0 	mov    DWORD PTR ds:0xc00252a4,0xc0016fe4
c001743f:	c7 05 a8 52 02 c0 29 70 01 c0 	mov    DWORD PTR ds:0xc00252a8,0xc0017029
c0017449:	c7 05 ac 52 02 c0 c1 62 01 c0 	mov    DWORD PTR ds:0xc00252ac,0xc00162c1
c0017453:	c3                   	ret    

c0017454 <systemCall(regs*, void*)>:
c0017454:	53                   	push   ebx
c0017455:	83 ec 08             	sub    esp,0x8
c0017458:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001745c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001745f:	83 f8 7f             	cmp    eax,0x7f
c0017462:	77 16                	ja     c001747a <systemCall(regs*, void*)+0x26>
c0017464:	8b 14 85 00 52 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdae00]
c001746b:	85 d2                	test   edx,edx
c001746d:	74 0b                	je     c001747a <systemCall(regs*, void*)+0x26>
c001746f:	83 ec 0c             	sub    esp,0xc
c0017472:	53                   	push   ebx
c0017473:	ff d2                	call   edx
c0017475:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017478:	eb 0d                	jmp    c0017487 <systemCall(regs*, void*)+0x33>
c001747a:	52                   	push   edx
c001747b:	52                   	push   edx
c001747c:	50                   	push   eax
c001747d:	68 32 2c 02 c0       	push   0xc0022c32
c0017482:	e8 8e 7d ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0017487:	83 c4 10             	add    esp,0x10
c001748a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001748f:	83 c4 08             	add    esp,0x8
c0017492:	31 d2                	xor    edx,edx
c0017494:	5b                   	pop    ebx
c0017495:	c3                   	ret    

c0017496 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0017496:	55                   	push   ebp
c0017497:	89 e5                	mov    ebp,esp
c0017499:	57                   	push   edi
c001749a:	56                   	push   esi
c001749b:	53                   	push   ebx
c001749c:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00174a2:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00174a5:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00174a8:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c00174af:	74 27                	je     c00174d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c00174b1:	85 c0                	test   eax,eax
c00174b3:	74 23                	je     c00174d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c00174b5:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00174b9:	75 1d                	jne    c00174d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c00174bb:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
c00174be:	8d 96 00 10 00 00    	lea    edx,[esi+0x1000]
c00174c4:	89 d1                	mov    ecx,edx
c00174c6:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00174cc:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00174d2:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00174d5:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
c00174d8:	83 ec 0c             	sub    esp,0xc
c00174db:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00174de:	05 ff 0f 00 00       	add    eax,0xfff
c00174e3:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c00174e9:	6a 01                	push   0x1
c00174eb:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c00174f1:	e8 04 6d ff ff       	call   c000e1fa <Virt::allocateKernelVirtualPages(int)>
c00174f6:	83 c4 10             	add    esp,0x10
c00174f9:	89 c6                	mov    esi,eax
c00174fb:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c0017501:	0f 86 21 01 00 00    	jbe    c0017628 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c0017507:	c1 eb 0c             	shr    ebx,0xc
c001750a:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c0017514:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001751a:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001751d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0017520:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c0017526:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c0017529:	29 d8                	sub    eax,ebx
c001752b:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c0017531:	0f 83 f4 00 00 00    	jae    c001762b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x195>
c0017537:	83 ec 0c             	sub    esp,0xc
c001753a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001753d:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c0017543:	3d 00 10 00 00       	cmp    eax,0x1000
c0017548:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001754a:	52                   	push   edx
c001754b:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c0017551:	52                   	push   edx
c0017552:	76 05                	jbe    c0017559 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0017554:	b8 00 10 00 00       	mov    eax,0x1000
c0017559:	31 d2                	xor    edx,edx
c001755b:	52                   	push   edx
c001755c:	50                   	push   eax
c001755d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0017560:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017563:	83 c4 20             	add    esp,0x20
c0017566:	85 c0                	test   eax,eax
c0017568:	74 1f                	je     c0017589 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf3>
c001756a:	51                   	push   ecx
c001756b:	51                   	push   ecx
c001756c:	50                   	push   eax
c001756d:	68 46 2c 02 c0       	push   0xc0022c46
c0017572:	e8 9e 7c ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0017577:	89 34 24             	mov    DWORD PTR [esp],esi
c001757a:	e8 c8 6f ff ff       	call   c000e547 <Virt::freeKernelVirtualPages(unsigned long)>
c001757f:	83 c4 10             	add    esp,0x10
c0017582:	31 c0                	xor    eax,eax
c0017584:	e9 7c 01 00 00       	jmp    c0017705 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26f>
c0017589:	e8 bf 14 00 00       	call   c0018a4d <lockScheduler()>
c001758e:	e8 26 50 ff ff       	call   c000c5b9 <Phys::allocatePage()>
c0017593:	6a 07                	push   0x7
c0017595:	56                   	push   esi
c0017596:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001759c:	50                   	push   eax
c001759d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00175a3:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00175a6:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00175ac:	e8 15 73 ff ff       	call   c000e8c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c00175b1:	83 c4 0c             	add    esp,0xc
c00175b4:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00175ba:	6a 00                	push   0x0
c00175bc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00175c2:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00175c5:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00175cb:	e8 54 71 ff ff       	call   c000e724 <VAS::mapOtherVASIn(bool, VAS*)>
c00175d0:	58                   	pop    eax
c00175d1:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c00175d7:	5a                   	pop    edx
c00175d8:	68 07 04 00 00       	push   0x407
c00175dd:	53                   	push   ebx
c00175de:	81 c3 00 10 00 00    	add    ebx,0x1000
c00175e4:	50                   	push   eax
c00175e5:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00175eb:	6a 00                	push   0x0
c00175ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175f2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00175f5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00175fb:	e8 82 76 ff ff       	call   c000ec82 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0017600:	83 c4 1c             	add    esp,0x1c
c0017603:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c0017609:	68 00 10 00 00       	push   0x1000
c001760e:	50                   	push   eax
c001760f:	56                   	push   esi
c0017610:	e8 79 90 fe ff       	call   c000068e <memcpy>
c0017615:	e8 35 14 00 00       	call   c0018a4f <unlockScheduler()>
c001761a:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c0017620:	83 c4 10             	add    esp,0x10
c0017623:	e9 f5 fe ff ff       	jmp    c001751d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x87>
c0017628:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001762b:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c0017635:	0f 86 bc 00 00 00    	jbe    c00176f7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x261>
c001763b:	e8 0d 14 00 00       	call   c0018a4d <lockScheduler()>
c0017640:	51                   	push   ecx
c0017641:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0017647:	6a 00                	push   0x0
c0017649:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001764e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017651:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0017657:	e8 c8 70 ff ff       	call   c000e724 <VAS::mapOtherVASIn(bool, VAS*)>
c001765c:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c0017662:	c1 e8 0c             	shr    eax,0xc
c0017665:	83 c4 10             	add    esp,0x10
c0017668:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001766e:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c0017678:	e8 3c 4f ff ff       	call   c000c5b9 <Phys::allocatePage()>
c001767d:	6a 07                	push   0x7
c001767f:	56                   	push   esi
c0017680:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c0017686:	50                   	push   eax
c0017687:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001768d:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0017690:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c0017696:	e8 2b 72 ff ff       	call   c000e8c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c001769b:	58                   	pop    eax
c001769c:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c00176a2:	5a                   	pop    edx
c00176a3:	68 07 04 00 00       	push   0x407
c00176a8:	53                   	push   ebx
c00176a9:	81 c3 00 10 00 00    	add    ebx,0x1000
c00176af:	50                   	push   eax
c00176b0:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00176b6:	6a 00                	push   0x0
c00176b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00176bd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00176c0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00176c6:	e8 b7 75 ff ff       	call   c000ec82 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00176cb:	83 c4 1c             	add    esp,0x1c
c00176ce:	68 00 10 00 00       	push   0x1000
c00176d3:	6a 00                	push   0x0
c00176d5:	56                   	push   esi
c00176d6:	e8 e9 8f fe ff       	call   c00006c4 <memset>
c00176db:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c00176e1:	83 c4 10             	add    esp,0x10
c00176e4:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c00176ea:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c00176f0:	77 86                	ja     c0017678 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e2>
c00176f2:	e8 58 13 00 00       	call   c0018a4f <unlockScheduler()>
c00176f7:	83 ec 0c             	sub    esp,0xc
c00176fa:	56                   	push   esi
c00176fb:	e8 47 6e ff ff       	call   c000e547 <Virt::freeKernelVirtualPages(unsigned long)>
c0017700:	83 c4 10             	add    esp,0x10
c0017703:	b0 01                	mov    al,0x1
c0017705:	8d 65 f4             	lea    esp,[ebp-0xc]
c0017708:	5b                   	pop    ebx
c0017709:	5e                   	pop    esi
c001770a:	5f                   	pop    edi
c001770b:	5d                   	pop    ebp
c001770c:	c3                   	ret    

c001770d <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001770d:	55                   	push   ebp
c001770e:	57                   	push   edi
c001770f:	56                   	push   esi
c0017710:	53                   	push   ebx
c0017711:	83 ec 48             	sub    esp,0x48
c0017714:	68 14 01 00 00       	push   0x114
c0017719:	e8 c2 79 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c001771e:	83 c4 0c             	add    esp,0xc
c0017721:	89 c6                	mov    esi,eax
c0017723:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017727:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001772b:	50                   	push   eax
c001772c:	e8 1b 80 ff ff       	call   c000f74c <File::File(char const*, Process*)>
c0017731:	58                   	pop    eax
c0017732:	5a                   	pop    edx
c0017733:	6a 01                	push   0x1
c0017735:	56                   	push   esi
c0017736:	e8 75 80 ff ff       	call   c000f7b0 <File::open(FileOpenMode)>
c001773b:	83 c4 10             	add    esp,0x10
c001773e:	85 c0                	test   eax,eax
c0017740:	0f 85 47 01 00 00    	jne    c001788d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017746:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001774e:	83 ec 0c             	sub    esp,0xc
c0017751:	6a 34                	push   0x34
c0017753:	e8 8b 48 ff ff       	call   c000bfe3 <malloc>
c0017758:	89 c3                	mov    ebx,eax
c001775a:	58                   	pop    eax
c001775b:	8b 06                	mov    eax,DWORD PTR [esi]
c001775d:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0017761:	57                   	push   edi
c0017762:	53                   	push   ebx
c0017763:	6a 00                	push   0x0
c0017765:	6a 34                	push   0x34
c0017767:	56                   	push   esi
c0017768:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001776b:	83 c4 20             	add    esp,0x20
c001776e:	85 c0                	test   eax,eax
c0017770:	0f 85 17 01 00 00    	jne    c001788d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017776:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001777c:	0f 85 0b 01 00 00    	jne    c001788d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017782:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017785:	85 c0                	test   eax,eax
c0017787:	0f 84 00 01 00 00    	je     c001788d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001778d:	31 d2                	xor    edx,edx
c001778f:	55                   	push   ebp
c0017790:	52                   	push   edx
c0017791:	50                   	push   eax
c0017792:	56                   	push   esi
c0017793:	e8 d6 80 ff ff       	call   c000f86e <File::seek(unsigned long long)>
c0017798:	83 c4 10             	add    esp,0x10
c001779b:	85 c0                	test   eax,eax
c001779d:	0f 85 ea 00 00 00    	jne    c001788d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00177a3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00177a6:	83 ec 0c             	sub    esp,0xc
c00177a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00177ad:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00177b1:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00177b5:	0f af c2             	imul   eax,edx
c00177b8:	50                   	push   eax
c00177b9:	e8 25 48 ff ff       	call   c000bfe3 <malloc>
c00177be:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00177c2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00177c5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00177c9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00177cd:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00177d1:	0f af c2             	imul   eax,edx
c00177d4:	99                   	cdq    
c00177d5:	52                   	push   edx
c00177d6:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00177d8:	50                   	push   eax
c00177d9:	56                   	push   esi
c00177da:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00177dd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00177e0:	83 c4 20             	add    esp,0x20
c00177e3:	85 c0                	test   eax,eax
c00177e5:	0f 84 a2 00 00 00    	je     c001788d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00177eb:	31 d2                	xor    edx,edx
c00177ed:	51                   	push   ecx
c00177ee:	52                   	push   edx
c00177ef:	50                   	push   eax
c00177f0:	56                   	push   esi
c00177f1:	e8 78 80 ff ff       	call   c000f86e <File::seek(unsigned long long)>
c00177f6:	83 c4 10             	add    esp,0x10
c00177f9:	85 c0                	test   eax,eax
c00177fb:	0f 85 8c 00 00 00    	jne    c001788d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017801:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017805:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017809:	0f af c2             	imul   eax,edx
c001780c:	83 ec 0c             	sub    esp,0xc
c001780f:	31 ed                	xor    ebp,ebp
c0017811:	50                   	push   eax
c0017812:	e8 cc 47 ff ff       	call   c000bfe3 <malloc>
c0017817:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001781b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001781e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017822:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017826:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001782a:	0f af c2             	imul   eax,edx
c001782d:	99                   	cdq    
c001782e:	52                   	push   edx
c001782f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017831:	50                   	push   eax
c0017832:	56                   	push   esi
c0017833:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017836:	83 c4 20             	add    esp,0x20
c0017839:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017841:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0017845:	0f 86 80 00 00 00    	jbe    c00178cb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001784b:	0f b7 fd             	movzx  edi,bp
c001784e:	c1 e7 05             	shl    edi,0x5
c0017851:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0017855:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0017858:	75 6b                	jne    c00178c5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001785a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001785d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017861:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0017864:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017868:	52                   	push   edx
c0017869:	31 d2                	xor    edx,edx
c001786b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001786e:	52                   	push   edx
c001786f:	50                   	push   eax
c0017870:	56                   	push   esi
c0017871:	e8 f8 7f ff ff       	call   c000f86e <File::seek(unsigned long long)>
c0017876:	83 c4 10             	add    esp,0x10
c0017879:	85 c0                	test   eax,eax
c001787b:	74 17                	je     c0017894 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001787d:	83 ec 0c             	sub    esp,0xc
c0017880:	68 71 2c 02 c0       	push   0xc0022c71
c0017885:	e8 8b 79 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001788a:	83 c4 10             	add    esp,0x10
c001788d:	31 c0                	xor    eax,eax
c001788f:	e9 87 00 00 00       	jmp    c001791b <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0017894:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0017897:	83 ec 0c             	sub    esp,0xc
c001789a:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001789d:	50                   	push   eax
c001789e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00178a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178a6:	56                   	push   esi
c00178a7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00178ab:	e8 e6 fb ff ff       	call   c0017496 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00178b0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178b4:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00178b8:	83 c4 20             	add    esp,0x20
c00178bb:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00178bf:	73 04                	jae    c00178c5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00178c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00178c5:	45                   	inc    ebp
c00178c6:	e9 76 ff ff ff       	jmp    c0017841 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00178cb:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00178cf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00178d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00178d7:	83 ec 0c             	sub    esp,0xc
c00178da:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c00178e0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00178e5:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c00178eb:	05 00 10 00 00       	add    eax,0x1000
c00178f0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00178f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00178f7:	e8 f7 46 ff ff       	call   c000bff3 <free>
c00178fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00178ff:	e8 ef 46 ff ff       	call   c000bff3 <free>
c0017904:	58                   	pop    eax
c0017905:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017909:	e8 e5 46 ff ff       	call   c000bff3 <free>
c001790e:	89 34 24             	mov    DWORD PTR [esp],esi
c0017911:	e8 f8 7e ff ff       	call   c000f80e <File::close()>
c0017916:	83 c4 10             	add    esp,0x10
c0017919:	b0 01                	mov    al,0x1
c001791b:	83 c4 3c             	add    esp,0x3c
c001791e:	5b                   	pop    ebx
c001791f:	5e                   	pop    esi
c0017920:	5f                   	pop    edi
c0017921:	5d                   	pop    ebp
c0017922:	c3                   	ret    

c0017923 <Thr::runtimeReferenceHelper()>:
c0017923:	83 ec 18             	sub    esp,0x18
c0017926:	68 79 2c 02 c0       	push   0xc0022c79
c001792b:	e8 e5 78 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0017930:	fa                   	cli    
c0017931:	83 c4 10             	add    esp,0x10
c0017934:	eb fe                	jmp    c0017934 <Thr::runtimeReferenceHelper()+0x11>

c0017936 <Thr::getAddressOfKernelSymbol(char const*)>:
c0017936:	57                   	push   edi
c0017937:	56                   	push   esi
c0017938:	53                   	push   ebx
c0017939:	31 db                	xor    ebx,ebx
c001793b:	39 1d a0 5b 02 c0    	cmp    DWORD PTR ds:0xc0025ba0,ebx
c0017941:	7e 3c                	jle    c001797f <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0017943:	8b 34 9d 20 5b 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffda4e0]
c001794a:	31 ff                	xor    edi,edi
c001794c:	39 3c 9d 20 5a 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffda5e0],edi
c0017953:	7e 27                	jle    c001797c <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0017955:	50                   	push   eax
c0017956:	50                   	push   eax
c0017957:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001795b:	8b 06                	mov    eax,DWORD PTR [esi]
c001795d:	03 04 9d a0 5a 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffda560]
c0017964:	50                   	push   eax
c0017965:	e8 4a 8e fe ff       	call   c00007b4 <strcmp>
c001796a:	83 c4 10             	add    esp,0x10
c001796d:	85 c0                	test   eax,eax
c001796f:	75 05                	jne    c0017976 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0017971:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017974:	eb 0b                	jmp    c0017981 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0017976:	83 c6 10             	add    esi,0x10
c0017979:	47                   	inc    edi
c001797a:	eb d0                	jmp    c001794c <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001797c:	43                   	inc    ebx
c001797d:	eb bc                	jmp    c001793b <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001797f:	31 c0                	xor    eax,eax
c0017981:	5b                   	pop    ebx
c0017982:	5e                   	pop    esi
c0017983:	5f                   	pop    edi
c0017984:	c3                   	ret    

c0017985 <Thr::loadKernelSymbolTable(char const*)>:
c0017985:	55                   	push   ebp
c0017986:	57                   	push   edi
c0017987:	56                   	push   esi
c0017988:	53                   	push   ebx
c0017989:	83 ec 68             	sub    esp,0x68
c001798c:	8b 35 f4 5b 02 c0    	mov    esi,DWORD PTR ds:0xc0025bf4
c0017992:	68 14 01 00 00       	push   0x114
c0017997:	e8 44 77 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c001799c:	83 c4 0c             	add    esp,0xc
c001799f:	89 c3                	mov    ebx,eax
c00179a1:	56                   	push   esi
c00179a2:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00179a6:	50                   	push   eax
c00179a7:	e8 a0 7d ff ff       	call   c000f74c <File::File(char const*, Process*)>
c00179ac:	5e                   	pop    esi
c00179ad:	5f                   	pop    edi
c00179ae:	6a 01                	push   0x1
c00179b0:	53                   	push   ebx
c00179b1:	e8 fa 7d ff ff       	call   c000f7b0 <File::open(FileOpenMode)>
c00179b6:	83 c4 10             	add    esp,0x10
c00179b9:	31 d2                	xor    edx,edx
c00179bb:	85 c0                	test   eax,eax
c00179bd:	0f 85 79 02 00 00    	jne    c0017c3c <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c00179c3:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00179cb:	83 ec 0c             	sub    esp,0xc
c00179ce:	6a 34                	push   0x34
c00179d0:	e8 0e 46 ff ff       	call   c000bfe3 <malloc>
c00179d5:	59                   	pop    ecx
c00179d6:	89 c7                	mov    edi,eax
c00179d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00179da:	8d 74 24 34          	lea    esi,[esp+0x34]
c00179de:	56                   	push   esi
c00179df:	57                   	push   edi
c00179e0:	6a 00                	push   0x0
c00179e2:	6a 34                	push   0x34
c00179e4:	53                   	push   ebx
c00179e5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00179e8:	83 c4 20             	add    esp,0x20
c00179eb:	85 c0                	test   eax,eax
c00179ed:	74 17                	je     c0017a06 <Thr::loadKernelSymbolTable(char const*)+0x81>
c00179ef:	83 ec 0c             	sub    esp,0xc
c00179f2:	68 9b 2c 02 c0       	push   0xc0022c9b
c00179f7:	e8 48 e0 ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c00179fc:	83 c4 10             	add    esp,0x10
c00179ff:	31 d2                	xor    edx,edx
c0017a01:	e9 36 02 00 00       	jmp    c0017c3c <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c0017a06:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017a0c:	75 e1                	jne    c00179ef <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017a0e:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017a11:	85 c0                	test   eax,eax
c0017a13:	74 da                	je     c00179ef <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017a15:	52                   	push   edx
c0017a16:	31 d2                	xor    edx,edx
c0017a18:	52                   	push   edx
c0017a19:	50                   	push   eax
c0017a1a:	53                   	push   ebx
c0017a1b:	e8 4e 7e ff ff       	call   c000f86e <File::seek(unsigned long long)>
c0017a20:	83 c4 10             	add    esp,0x10
c0017a23:	85 c0                	test   eax,eax
c0017a25:	75 c8                	jne    c00179ef <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017a27:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017a2b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017a2f:	0f af c2             	imul   eax,edx
c0017a32:	83 ec 0c             	sub    esp,0xc
c0017a35:	31 ed                	xor    ebp,ebp
c0017a37:	50                   	push   eax
c0017a38:	e8 a6 45 ff ff       	call   c000bfe3 <malloc>
c0017a3d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017a41:	89 34 24             	mov    DWORD PTR [esp],esi
c0017a44:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017a48:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017a4c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017a50:	0f af c2             	imul   eax,edx
c0017a53:	99                   	cdq    
c0017a54:	52                   	push   edx
c0017a55:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017a57:	50                   	push   eax
c0017a58:	53                   	push   ebx
c0017a59:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017a5c:	83 c4 20             	add    esp,0x20
c0017a5f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017a67:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017a6f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017a77:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017a7f:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0017a83:	0f 86 aa 00 00 00    	jbe    c0017b33 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c0017a89:	0f b7 f5             	movzx  esi,bp
c0017a8c:	6b f6 28             	imul   esi,esi,0x28
c0017a8f:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c0017a93:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017a96:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a9a:	50                   	push   eax
c0017a9b:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0017a9f:	6b c0 28             	imul   eax,eax,0x28
c0017aa2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017aa6:	8b 16                	mov    edx,DWORD PTR [esi]
c0017aa8:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0017aac:	89 d0                	mov    eax,edx
c0017aae:	31 d2                	xor    edx,edx
c0017ab0:	52                   	push   edx
c0017ab1:	50                   	push   eax
c0017ab2:	53                   	push   ebx
c0017ab3:	e8 b6 7d ff ff       	call   c000f86e <File::seek(unsigned long long)>
c0017ab8:	83 c4 0c             	add    esp,0xc
c0017abb:	6a 20                	push   0x20
c0017abd:	6a 00                	push   0x0
c0017abf:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017ac3:	52                   	push   edx
c0017ac4:	e8 fb 8b fe ff       	call   c00006c4 <memset>
c0017ac9:	58                   	pop    eax
c0017aca:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017acc:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0017ad0:	51                   	push   ecx
c0017ad1:	8d 54 24 40          	lea    edx,[esp+0x40]
c0017ad5:	52                   	push   edx
c0017ad6:	6a 00                	push   0x0
c0017ad8:	6a 1f                	push   0x1f
c0017ada:	53                   	push   ebx
c0017adb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017ade:	83 c4 18             	add    esp,0x18
c0017ae1:	68 b2 2c 02 c0       	push   0xc0022cb2
c0017ae6:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017aea:	52                   	push   edx
c0017aeb:	e8 c4 8c fe ff       	call   c00007b4 <strcmp>
c0017af0:	83 c4 10             	add    esp,0x10
c0017af3:	85 c0                	test   eax,eax
c0017af5:	75 0f                	jne    c0017b06 <Thr::loadKernelSymbolTable(char const*)+0x181>
c0017af7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017afa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017afe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b02:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017b06:	50                   	push   eax
c0017b07:	50                   	push   eax
c0017b08:	68 ba 2c 02 c0       	push   0xc0022cba
c0017b0d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017b11:	50                   	push   eax
c0017b12:	e8 9d 8c fe ff       	call   c00007b4 <strcmp>
c0017b17:	83 c4 10             	add    esp,0x10
c0017b1a:	85 c0                	test   eax,eax
c0017b1c:	75 0f                	jne    c0017b2d <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c0017b1e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017b21:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017b2d:	45                   	inc    ebp
c0017b2e:	e9 4c ff ff ff       	jmp    c0017a7f <Thr::loadKernelSymbolTable(char const*)+0xfa>
c0017b33:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017b38:	75 10                	jne    c0017b4a <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c0017b3a:	83 ec 0c             	sub    esp,0xc
c0017b3d:	68 c2 2c 02 c0       	push   0xc0022cc2
c0017b42:	e8 fd de ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c0017b47:	83 c4 10             	add    esp,0x10
c0017b4a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017b4f:	75 10                	jne    c0017b61 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c0017b51:	83 ec 0c             	sub    esp,0xc
c0017b54:	68 c2 2c 02 c0       	push   0xc0022cc2
c0017b59:	e8 e6 de ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c0017b5e:	83 c4 10             	add    esp,0x10
c0017b61:	31 d2                	xor    edx,edx
c0017b63:	50                   	push   eax
c0017b64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b68:	52                   	push   edx
c0017b69:	50                   	push   eax
c0017b6a:	53                   	push   ebx
c0017b6b:	e8 fe 7c ff ff       	call   c000f86e <File::seek(unsigned long long)>
c0017b70:	5a                   	pop    edx
c0017b71:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b75:	e8 69 44 ff ff       	call   c000bfe3 <malloc>
c0017b7a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017b82:	89 c1                	mov    ecx,eax
c0017b84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b88:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b8c:	5e                   	pop    esi
c0017b8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017b8f:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017b93:	55                   	push   ebp
c0017b94:	51                   	push   ecx
c0017b95:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0017b99:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017b9d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017ba1:	53                   	push   ebx
c0017ba2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017ba5:	83 c4 14             	add    esp,0x14
c0017ba8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017bac:	e8 32 44 ff ff       	call   c000bfe3 <malloc>
c0017bb1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017bb4:	89 c6                	mov    esi,eax
c0017bb6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017bb8:	56                   	push   esi
c0017bb9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017bbd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017bc1:	53                   	push   ebx
c0017bc2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017bc5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017bc9:	8b 15 a0 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025ba0
c0017bcf:	c1 e8 04             	shr    eax,0x4
c0017bd2:	83 c4 1c             	add    esp,0x1c
c0017bd5:	89 04 95 20 5a 02 c0 	mov    DWORD PTR [edx*4-0x3ffda5e0],eax
c0017bdc:	31 d2                	xor    edx,edx
c0017bde:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017be2:	52                   	push   edx
c0017be3:	50                   	push   eax
c0017be4:	53                   	push   ebx
c0017be5:	e8 84 7c ff ff       	call   c000f86e <File::seek(unsigned long long)>
c0017bea:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017bed:	31 d2                	xor    edx,edx
c0017bef:	56                   	push   esi
c0017bf0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bf4:	52                   	push   edx
c0017bf5:	50                   	push   eax
c0017bf6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017bf8:	53                   	push   ebx
c0017bf9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017bfc:	83 c4 14             	add    esp,0x14
c0017bff:	53                   	push   ebx
c0017c00:	e8 09 7c ff ff       	call   c000f80e <File::close()>
c0017c05:	5d                   	pop    ebp
c0017c06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c0a:	e8 e4 43 ff ff       	call   c000bff3 <free>
c0017c0f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017c12:	e8 dc 43 ff ff       	call   c000bff3 <free>
c0017c17:	a1 a0 5b 02 c0       	mov    eax,ds:0xc0025ba0
c0017c1c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017c20:	8d 50 01             	lea    edx,[eax+0x1]
c0017c23:	89 15 a0 5b 02 c0    	mov    DWORD PTR ds:0xc0025ba0,edx
c0017c29:	89 0c 85 20 5b 02 c0 	mov    DWORD PTR [eax*4-0x3ffda4e0],ecx
c0017c30:	89 34 85 a0 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda560],esi
c0017c37:	83 c4 10             	add    esp,0x10
c0017c3a:	b2 01                	mov    dl,0x1
c0017c3c:	83 c4 5c             	add    esp,0x5c
c0017c3f:	88 d0                	mov    al,dl
c0017c41:	5b                   	pop    ebx
c0017c42:	5e                   	pop    esi
c0017c43:	5f                   	pop    edi
c0017c44:	5d                   	pop    ebp
c0017c45:	c3                   	ret    

c0017c46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017c46:	55                   	push   ebp
c0017c47:	57                   	push   edi
c0017c48:	56                   	push   esi
c0017c49:	53                   	push   ebx
c0017c4a:	81 ec 68 03 00 00    	sub    esp,0x368
c0017c50:	8b 1d f4 5b 02 c0    	mov    ebx,DWORD PTR ds:0xc0025bf4
c0017c56:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017c5d:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0017c61:	68 14 01 00 00       	push   0x114
c0017c66:	e8 75 74 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c0017c6b:	83 c4 0c             	add    esp,0xc
c0017c6e:	53                   	push   ebx
c0017c6f:	89 c7                	mov    edi,eax
c0017c71:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017c78:	50                   	push   eax
c0017c79:	e8 ce 7a ff ff       	call   c000f74c <File::File(char const*, Process*)>
c0017c7e:	5e                   	pop    esi
c0017c7f:	5d                   	pop    ebp
c0017c80:	6a 01                	push   0x1
c0017c82:	57                   	push   edi
c0017c83:	e8 28 7b ff ff       	call   c000f7b0 <File::open(FileOpenMode)>
c0017c88:	83 c4 10             	add    esp,0x10
c0017c8b:	85 c0                	test   eax,eax
c0017c8d:	0f 85 10 07 00 00    	jne    c00183a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017c93:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017c9b:	83 ec 0c             	sub    esp,0xc
c0017c9e:	6a 34                	push   0x34
c0017ca0:	e8 3e 43 ff ff       	call   c000bfe3 <malloc>
c0017ca5:	5b                   	pop    ebx
c0017ca6:	89 c5                	mov    ebp,eax
c0017ca8:	8b 07                	mov    eax,DWORD PTR [edi]
c0017caa:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017cae:	53                   	push   ebx
c0017caf:	55                   	push   ebp
c0017cb0:	6a 00                	push   0x0
c0017cb2:	6a 34                	push   0x34
c0017cb4:	57                   	push   edi
c0017cb5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017cb8:	83 c4 20             	add    esp,0x20
c0017cbb:	85 c0                	test   eax,eax
c0017cbd:	0f 85 e0 06 00 00    	jne    c00183a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017cc3:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0017cca:	0f 85 d3 06 00 00    	jne    c00183a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017cd0:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0017cd3:	85 c0                	test   eax,eax
c0017cd5:	0f 84 c8 06 00 00    	je     c00183a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017cdb:	31 d2                	xor    edx,edx
c0017cdd:	51                   	push   ecx
c0017cde:	52                   	push   edx
c0017cdf:	50                   	push   eax
c0017ce0:	57                   	push   edi
c0017ce1:	e8 88 7b ff ff       	call   c000f86e <File::seek(unsigned long long)>
c0017ce6:	83 c4 10             	add    esp,0x10
c0017ce9:	85 c0                	test   eax,eax
c0017ceb:	0f 85 b2 06 00 00    	jne    c00183a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017cf1:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017cf4:	83 ec 0c             	sub    esp,0xc
c0017cf7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017cfb:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017cff:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017d03:	0f af c2             	imul   eax,edx
c0017d06:	50                   	push   eax
c0017d07:	e8 d7 42 ff ff       	call   c000bfe3 <malloc>
c0017d0c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017d10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017d13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d17:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017d1b:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017d1f:	0f af c2             	imul   eax,edx
c0017d22:	99                   	cdq    
c0017d23:	52                   	push   edx
c0017d24:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017d26:	50                   	push   eax
c0017d27:	57                   	push   edi
c0017d28:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017d2b:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0017d2e:	83 c4 20             	add    esp,0x20
c0017d31:	85 c0                	test   eax,eax
c0017d33:	0f 84 6a 06 00 00    	je     c00183a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017d39:	52                   	push   edx
c0017d3a:	31 d2                	xor    edx,edx
c0017d3c:	52                   	push   edx
c0017d3d:	50                   	push   eax
c0017d3e:	57                   	push   edi
c0017d3f:	e8 2a 7b ff ff       	call   c000f86e <File::seek(unsigned long long)>
c0017d44:	83 c4 10             	add    esp,0x10
c0017d47:	85 c0                	test   eax,eax
c0017d49:	0f 85 54 06 00 00    	jne    c00183a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017d4f:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017d53:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017d57:	0f af c2             	imul   eax,edx
c0017d5a:	83 ec 0c             	sub    esp,0xc
c0017d5d:	31 f6                	xor    esi,esi
c0017d5f:	50                   	push   eax
c0017d60:	e8 7e 42 ff ff       	call   c000bfe3 <malloc>
c0017d65:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017d69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017d6c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d70:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017d74:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017d78:	0f af c2             	imul   eax,edx
c0017d7b:	99                   	cdq    
c0017d7c:	52                   	push   edx
c0017d7d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017d7f:	50                   	push   eax
c0017d80:	57                   	push   edi
c0017d81:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017d84:	83 c4 20             	add    esp,0x20
c0017d87:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c0017d8b:	0f 86 af 00 00 00    	jbe    c0017e40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c0017d91:	0f b7 de             	movzx  ebx,si
c0017d94:	c1 e3 05             	shl    ebx,0x5
c0017d97:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0017d9b:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017d9e:	0f 85 96 00 00 00    	jne    c0017e3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c0017da4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017da7:	31 d2                	xor    edx,edx
c0017da9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017dad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017db0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017db4:	50                   	push   eax
c0017db5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017db8:	52                   	push   edx
c0017db9:	50                   	push   eax
c0017dba:	57                   	push   edi
c0017dbb:	e8 ae 7a ff ff       	call   c000f86e <File::seek(unsigned long long)>
c0017dc0:	83 c4 10             	add    esp,0x10
c0017dc3:	85 c0                	test   eax,eax
c0017dc5:	0f 85 d8 05 00 00    	jne    c00183a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017dcb:	52                   	push   edx
c0017dcc:	52                   	push   edx
c0017dcd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017dd1:	68 dc 2c 02 c0       	push   0xc0022cdc
c0017dd6:	e8 3a 74 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0017ddb:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c0017de2:	31 d2                	xor    edx,edx
c0017de4:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c0017de8:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017dec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017df0:	59                   	pop    ecx
c0017df1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017df3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017dfa:	50                   	push   eax
c0017dfb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017dff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017e03:	52                   	push   edx
c0017e04:	50                   	push   eax
c0017e05:	57                   	push   edi
c0017e06:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017e09:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017e0c:	83 c4 18             	add    esp,0x18
c0017e0f:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017e12:	50                   	push   eax
c0017e13:	68 00 2d 02 c0       	push   0xc0022d00
c0017e18:	e8 f8 73 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0017e1d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017e20:	83 c4 0c             	add    esp,0xc
c0017e23:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017e26:	50                   	push   eax
c0017e27:	6a 00                	push   0x0
c0017e29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e2d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0017e31:	50                   	push   eax
c0017e32:	e8 8d 88 fe ff       	call   c00006c4 <memset>
c0017e37:	83 c4 10             	add    esp,0x10
c0017e3a:	46                   	inc    esi
c0017e3b:	e9 47 ff ff ff       	jmp    c0017d87 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c0017e40:	50                   	push   eax
c0017e41:	31 db                	xor    ebx,ebx
c0017e43:	68 00 01 00 00       	push   0x100
c0017e48:	6a 00                	push   0x0
c0017e4a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017e4e:	50                   	push   eax
c0017e4f:	e8 70 88 fe ff       	call   c00006c4 <memset>
c0017e54:	83 c4 0c             	add    esp,0xc
c0017e57:	68 00 01 00 00       	push   0x100
c0017e5c:	6a 00                	push   0x0
c0017e5e:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017e65:	50                   	push   eax
c0017e66:	e8 59 88 fe ff       	call   c00006c4 <memset>
c0017e6b:	83 c4 10             	add    esp,0x10
c0017e6e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017e76:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017e7e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017e86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017e8e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017e96:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c0017e9a:	0f 86 2f 01 00 00    	jbe    c0017fcf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c0017ea0:	0f b7 f3             	movzx  esi,bx
c0017ea3:	6b f6 28             	imul   esi,esi,0x28
c0017ea6:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0017eaa:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017ead:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017eb1:	50                   	push   eax
c0017eb2:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0017eb6:	6b d2 28             	imul   edx,edx,0x28
c0017eb9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017ebd:	8b 06                	mov    eax,DWORD PTR [esi]
c0017ebf:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017ec3:	31 d2                	xor    edx,edx
c0017ec5:	52                   	push   edx
c0017ec6:	50                   	push   eax
c0017ec7:	57                   	push   edi
c0017ec8:	e8 a1 79 ff ff       	call   c000f86e <File::seek(unsigned long long)>
c0017ecd:	83 c4 0c             	add    esp,0xc
c0017ed0:	6a 20                	push   0x20
c0017ed2:	6a 00                	push   0x0
c0017ed4:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017edb:	51                   	push   ecx
c0017edc:	e8 e3 87 fe ff       	call   c00006c4 <memset>
c0017ee1:	58                   	pop    eax
c0017ee2:	8b 07                	mov    eax,DWORD PTR [edi]
c0017ee4:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017ee8:	52                   	push   edx
c0017ee9:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017ef0:	51                   	push   ecx
c0017ef1:	6a 00                	push   0x0
c0017ef3:	6a 1f                	push   0x1f
c0017ef5:	57                   	push   edi
c0017ef6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017ef9:	83 c4 1c             	add    esp,0x1c
c0017efc:	6a 09                	push   0x9
c0017efe:	68 1d 2d 02 c0       	push   0xc0022d1d
c0017f03:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017f0a:	51                   	push   ecx
c0017f0b:	e8 1b 87 fe ff       	call   c000062b <memcmp>
c0017f10:	83 c4 10             	add    esp,0x10
c0017f13:	85 c0                	test   eax,eax
c0017f15:	75 21                	jne    c0017f38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c0017f17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017f1f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017f23:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017f27:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017f2a:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017f31:	89 c8                	mov    eax,ecx
c0017f33:	40                   	inc    eax
c0017f34:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f38:	50                   	push   eax
c0017f39:	6a 09                	push   0x9
c0017f3b:	68 27 2d 02 c0       	push   0xc0022d27
c0017f40:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f47:	50                   	push   eax
c0017f48:	e8 de 86 fe ff       	call   c000062b <memcmp>
c0017f4d:	83 c4 10             	add    esp,0x10
c0017f50:	85 c0                	test   eax,eax
c0017f52:	75 21                	jne    c0017f75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c0017f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017f5c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017f60:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017f64:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017f67:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017f6e:	89 c8                	mov    eax,ecx
c0017f70:	40                   	inc    eax
c0017f71:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f75:	50                   	push   eax
c0017f76:	50                   	push   eax
c0017f77:	68 b2 2c 02 c0       	push   0xc0022cb2
c0017f7c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f83:	50                   	push   eax
c0017f84:	e8 2b 88 fe ff       	call   c00007b4 <strcmp>
c0017f89:	83 c4 10             	add    esp,0x10
c0017f8c:	85 c0                	test   eax,eax
c0017f8e:	75 0f                	jne    c0017f9f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c0017f90:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017f93:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017f97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f9b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017f9f:	50                   	push   eax
c0017fa0:	50                   	push   eax
c0017fa1:	68 ba 2c 02 c0       	push   0xc0022cba
c0017fa6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017fad:	50                   	push   eax
c0017fae:	e8 01 88 fe ff       	call   c00007b4 <strcmp>
c0017fb3:	83 c4 10             	add    esp,0x10
c0017fb6:	85 c0                	test   eax,eax
c0017fb8:	75 0f                	jne    c0017fc9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c0017fba:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017fbd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017fc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fc5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017fc9:	43                   	inc    ebx
c0017fca:	e9 c7 fe ff ff       	jmp    c0017e96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c0017fcf:	31 d2                	xor    edx,edx
c0017fd1:	50                   	push   eax
c0017fd2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017fd6:	52                   	push   edx
c0017fd7:	50                   	push   eax
c0017fd8:	57                   	push   edi
c0017fd9:	e8 90 78 ff ff       	call   c000f86e <File::seek(unsigned long long)>
c0017fde:	5a                   	pop    edx
c0017fdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017fe3:	e8 fb 3f ff ff       	call   c000bfe3 <malloc>
c0017fe8:	31 d2                	xor    edx,edx
c0017fea:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017fee:	59                   	pop    ecx
c0017fef:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017ff1:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017ff5:	53                   	push   ebx
c0017ff6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017ffa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ffe:	52                   	push   edx
c0017fff:	50                   	push   eax
c0018000:	57                   	push   edi
c0018001:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0018004:	83 c4 14             	add    esp,0x14
c0018007:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001800b:	e8 d3 3f ff ff       	call   c000bfe3 <malloc>
c0018010:	31 d2                	xor    edx,edx
c0018012:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018016:	83 c4 0c             	add    esp,0xc
c0018019:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001801d:	52                   	push   edx
c001801e:	50                   	push   eax
c001801f:	57                   	push   edi
c0018020:	e8 49 78 ff ff       	call   c000f86e <File::seek(unsigned long long)>
c0018025:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018028:	31 d2                	xor    edx,edx
c001802a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001802e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018032:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0018034:	52                   	push   edx
c0018035:	50                   	push   eax
c0018036:	57                   	push   edi
c0018037:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001803a:	83 c4 20             	add    esp,0x20
c001803d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0018045:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018049:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001804d:	0f 84 54 03 00 00    	je     c00183a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c0018053:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001805a:	31 d2                	xor    edx,edx
c001805c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018060:	c1 e8 03             	shr    eax,0x3
c0018063:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0018067:	50                   	push   eax
c0018068:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001806c:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0018070:	52                   	push   edx
c0018071:	50                   	push   eax
c0018072:	57                   	push   edi
c0018073:	e8 f6 77 ff ff       	call   c000f86e <File::seek(unsigned long long)>
c0018078:	58                   	pop    eax
c0018079:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001807d:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0018084:	e8 5a 3f ff ff       	call   c000bfe3 <malloc>
c0018089:	31 d2                	xor    edx,edx
c001808b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001808f:	58                   	pop    eax
c0018090:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0018092:	8d 44 24 58          	lea    eax,[esp+0x58]
c0018096:	50                   	push   eax
c0018097:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001809b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001809f:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00180a6:	52                   	push   edx
c00180a7:	50                   	push   eax
c00180a8:	57                   	push   edi
c00180a9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00180ac:	83 c4 20             	add    esp,0x20
c00180af:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00180b7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00180bb:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c00180bf:	0f 8d c6 02 00 00    	jge    c001838b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c00180c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180cd:	31 db                	xor    ebx,ebx
c00180cf:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c00180d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00180d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180da:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c00180de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00180e2:	c1 e8 08             	shr    eax,0x8
c00180e5:	89 c6                	mov    esi,eax
c00180e7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00180eb:	c1 e6 04             	shl    esi,0x4
c00180ee:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c00180f2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00180f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00180f9:	85 c0                	test   eax,eax
c00180fb:	0f 85 17 01 00 00    	jne    c0018218 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0018101:	83 ec 0c             	sub    esp,0xc
c0018104:	b3 01                	mov    bl,0x1
c0018106:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001810a:	03 06                	add    eax,DWORD PTR [esi]
c001810c:	50                   	push   eax
c001810d:	e8 24 f8 ff ff       	call   c0017936 <Thr::getAddressOfKernelSymbol(char const*)>
c0018112:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018116:	83 c4 10             	add    esp,0x10
c0018119:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001811e:	0f 85 f4 00 00 00    	jne    c0018218 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0018124:	50                   	push   eax
c0018125:	50                   	push   eax
c0018126:	68 31 2d 02 c0       	push   0xc0022d31
c001812b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001812f:	03 06                	add    eax,DWORD PTR [esi]
c0018131:	50                   	push   eax
c0018132:	e8 7d 86 fe ff       	call   c00007b4 <strcmp>
c0018137:	83 c4 10             	add    esp,0x10
c001813a:	85 c0                	test   eax,eax
c001813c:	75 0a                	jne    c0018148 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c001813e:	b8 0c f5 01 c0       	mov    eax,0xc001f50c
c0018143:	e9 ca 00 00 00       	jmp    c0018212 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0018148:	50                   	push   eax
c0018149:	50                   	push   eax
c001814a:	68 3b 2d 02 c0       	push   0xc0022d3b
c001814f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018153:	03 06                	add    eax,DWORD PTR [esi]
c0018155:	50                   	push   eax
c0018156:	e8 59 86 fe ff       	call   c00007b4 <strcmp>
c001815b:	83 c4 10             	add    esp,0x10
c001815e:	85 c0                	test   eax,eax
c0018160:	75 0a                	jne    c001816c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c0018162:	b8 40 f2 01 c0       	mov    eax,0xc001f240
c0018167:	e9 a6 00 00 00       	jmp    c0018212 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001816c:	53                   	push   ebx
c001816d:	53                   	push   ebx
c001816e:	68 44 2d 02 c0       	push   0xc0022d44
c0018173:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018177:	03 06                	add    eax,DWORD PTR [esi]
c0018179:	50                   	push   eax
c001817a:	e8 35 86 fe ff       	call   c00007b4 <strcmp>
c001817f:	83 c4 10             	add    esp,0x10
c0018182:	85 c0                	test   eax,eax
c0018184:	75 0a                	jne    c0018190 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c0018186:	b8 0c f6 01 c0       	mov    eax,0xc001f60c
c001818b:	e9 82 00 00 00       	jmp    c0018212 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0018190:	51                   	push   ecx
c0018191:	51                   	push   ecx
c0018192:	68 4e 2d 02 c0       	push   0xc0022d4e
c0018197:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001819b:	03 06                	add    eax,DWORD PTR [esi]
c001819d:	50                   	push   eax
c001819e:	e8 11 86 fe ff       	call   c00007b4 <strcmp>
c00181a3:	83 c4 10             	add    esp,0x10
c00181a6:	85 c0                	test   eax,eax
c00181a8:	74 63                	je     c001820d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c00181aa:	50                   	push   eax
c00181ab:	50                   	push   eax
c00181ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00181b0:	03 06                	add    eax,DWORD PTR [esi]
c00181b2:	50                   	push   eax
c00181b3:	68 57 2d 02 c0       	push   0xc0022d57
c00181b8:	e8 58 70 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c00181bd:	58                   	pop    eax
c00181be:	5a                   	pop    edx
c00181bf:	68 71 2d 02 c0       	push   0xc0022d71
c00181c4:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c00181cb:	53                   	push   ebx
c00181cc:	e8 92 85 fe ff       	call   c0000763 <strcpy>
c00181d1:	59                   	pop    ecx
c00181d2:	58                   	pop    eax
c00181d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00181d7:	03 06                	add    eax,DWORD PTR [esi]
c00181d9:	50                   	push   eax
c00181da:	53                   	push   ebx
c00181db:	e8 3a 86 fe ff       	call   c000081a <strcat>
c00181e0:	58                   	pop    eax
c00181e1:	5a                   	pop    edx
c00181e2:	68 07 2e 02 c0       	push   0xc0022e07
c00181e7:	53                   	push   ebx
c00181e8:	e8 2d 86 fe ff       	call   c000081a <strcat>
c00181ed:	83 c4 10             	add    esp,0x10
c00181f0:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00181f5:	0f 84 4b 01 00 00    	je     c0018346 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00181fb:	83 ec 0c             	sub    esp,0xc
c00181fe:	53                   	push   ebx
c00181ff:	e8 40 d8 ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c0018204:	83 c4 10             	add    esp,0x10
c0018207:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001820b:	eb 0b                	jmp    c0018218 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001820d:	b8 8c f3 01 c0       	mov    eax,0xc001f38c
c0018212:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018216:	b3 01                	mov    bl,0x1
c0018218:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001821d:	0f 85 80 00 00 00    	jne    c00182a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c0018223:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001822a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001822e:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0018232:	01 ce                	add    esi,ecx
c0018234:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001823c:	0f 94 c2             	sete   dl
c001823f:	8b 06                	mov    eax,DWORD PTR [esi]
c0018241:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0018249:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001824e:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c0018252:	84 db                	test   bl,bl
c0018254:	74 31                	je     c0018287 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c0018256:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001825a:	01 c3                	add    ebx,eax
c001825c:	84 d2                	test   dl,dl
c001825e:	75 0a                	jne    c001826a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c0018260:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0018264:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0018268:	76 32                	jbe    c001829c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001826a:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001826f:	0f 84 d1 00 00 00    	je     c0018346 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0018275:	83 ec 0c             	sub    esp,0xc
c0018278:	68 88 2d 02 c0       	push   0xc0022d88
c001827d:	e8 c2 d7 ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c0018282:	83 c4 10             	add    esp,0x10
c0018285:	eb 15                	jmp    c001829c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018287:	8d 1c 01             	lea    ebx,[ecx+eax*1]
c001828a:	84 d2                	test   dl,dl
c001828c:	75 0e                	jne    c001829c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001828e:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0018292:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0018296:	77 04                	ja     c001829c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018298:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001829c:	89 1e                	mov    DWORD PTR [esi],ebx
c001829e:	e9 df 00 00 00       	jmp    c0018382 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c00182a3:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00182a8:	75 6e                	jne    c0018318 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c00182aa:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00182b1:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c00182b5:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c00182b9:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00182c1:	74 17                	je     c00182da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c00182c3:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00182cb:	74 0d                	je     c00182da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c00182cd:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00182d1:	83 e8 04             	sub    eax,0x4
c00182d4:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00182d8:	76 17                	jbe    c00182f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c00182da:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00182df:	74 65                	je     c0018346 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00182e1:	83 ec 0c             	sub    esp,0xc
c00182e4:	68 a4 2d 02 c0       	push   0xc0022da4
c00182e9:	e8 56 d7 ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c00182ee:	83 c4 10             	add    esp,0x10
c00182f1:	8b 16                	mov    edx,DWORD PTR [esi]
c00182f3:	84 db                	test   bl,bl
c00182f5:	74 13                	je     c001830a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c00182f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00182fb:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c0018302:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0018306:	01 d0                	add    eax,edx
c0018308:	eb 06                	jmp    c0018310 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c001830a:	89 d0                	mov    eax,edx
c001830c:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0018310:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0018314:	89 06                	mov    DWORD PTR [esi],eax
c0018316:	eb 6a                	jmp    c0018382 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0018318:	50                   	push   eax
c0018319:	50                   	push   eax
c001831a:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001831f:	50                   	push   eax
c0018320:	68 c0 2d 02 c0       	push   0xc0022dc0
c0018325:	e8 eb 6e ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001832a:	83 c4 10             	add    esp,0x10
c001832d:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0018332:	74 12                	je     c0018346 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0018334:	83 ec 0c             	sub    esp,0xc
c0018337:	68 cb 2d 02 c0       	push   0xc0022dcb
c001833c:	e8 03 d7 ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c0018341:	83 c4 10             	add    esp,0x10
c0018344:	eb 3c                	jmp    c0018382 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0018346:	83 ec 0c             	sub    esp,0xc
c0018349:	57                   	push   edi
c001834a:	e8 bf 74 ff ff       	call   c000f80e <File::close()>
c001834f:	8b 07                	mov    eax,DWORD PTR [edi]
c0018351:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018354:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018357:	59                   	pop    ecx
c0018358:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001835c:	e8 92 3c ff ff       	call   c000bff3 <free>
c0018361:	5b                   	pop    ebx
c0018362:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018366:	e8 88 3c ff ff       	call   c000bff3 <free>
c001836b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001836e:	e8 80 3c ff ff       	call   c000bff3 <free>
c0018373:	5e                   	pop    esi
c0018374:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018378:	e8 76 3c ff ff       	call   c000bff3 <free>
c001837d:	83 c4 10             	add    esp,0x10
c0018380:	eb 21                	jmp    c00183a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0018382:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0018386:	e9 2c fd ff ff       	jmp    c00180b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c001838b:	83 ec 0c             	sub    esp,0xc
c001838e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018392:	e8 5c 3c ff ff       	call   c000bff3 <free>
c0018397:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001839b:	83 c4 10             	add    esp,0x10
c001839e:	e9 a2 fc ff ff       	jmp    c0018045 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c00183a3:	31 c0                	xor    eax,eax
c00183a5:	eb 32                	jmp    c00183d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c00183a7:	83 ec 0c             	sub    esp,0xc
c00183aa:	57                   	push   edi
c00183ab:	e8 5e 74 ff ff       	call   c000f80e <File::close()>
c00183b0:	8b 07                	mov    eax,DWORD PTR [edi]
c00183b2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00183b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00183b8:	58                   	pop    eax
c00183b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00183bd:	e8 31 3c ff ff       	call   c000bff3 <free>
c00183c2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00183c5:	e8 29 3c ff ff       	call   c000bff3 <free>
c00183ca:	5a                   	pop    edx
c00183cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00183cf:	e8 1f 3c ff ff       	call   c000bff3 <free>
c00183d4:	83 c4 10             	add    esp,0x10
c00183d7:	b0 01                	mov    al,0x1
c00183d9:	81 c4 5c 03 00 00    	add    esp,0x35c
c00183df:	5b                   	pop    ebx
c00183e0:	5e                   	pop    esi
c00183e1:	5f                   	pop    edi
c00183e2:	5d                   	pop    ebp
c00183e3:	c3                   	ret    

c00183e4 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00183e4:	56                   	push   esi
c00183e5:	31 d2                	xor    edx,edx
c00183e7:	53                   	push   ebx
c00183e8:	8b 1d 00 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025400
c00183ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00183f2:	39 d3                	cmp    ebx,edx
c00183f4:	7e 1b                	jle    c0018411 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00183f6:	8b 04 95 20 56 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffda9e0]
c00183fd:	39 c8                	cmp    eax,ecx
c00183ff:	77 0d                	ja     c001840e <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0018401:	8b 34 95 20 54 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdabe0]
c0018408:	01 c6                	add    esi,eax
c001840a:	39 ce                	cmp    esi,ecx
c001840c:	77 05                	ja     c0018413 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001840e:	42                   	inc    edx
c001840f:	eb e1                	jmp    c00183f2 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0018411:	31 c0                	xor    eax,eax
c0018413:	5b                   	pop    ebx
c0018414:	5e                   	pop    esi
c0018415:	c3                   	ret    

c0018416 <Thr::getDriverNameFromAddress(unsigned long)>:
c0018416:	53                   	push   ebx
c0018417:	31 c0                	xor    eax,eax
c0018419:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001841d:	8b 1d 00 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025400
c0018423:	39 c3                	cmp    ebx,eax
c0018425:	7e 22                	jle    c0018449 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0018427:	8b 14 85 20 56 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda9e0]
c001842e:	39 ca                	cmp    edx,ecx
c0018430:	77 14                	ja     c0018446 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0018432:	03 14 85 20 54 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdabe0]
c0018439:	39 ca                	cmp    edx,ecx
c001843b:	76 09                	jbe    c0018446 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001843d:	8b 04 85 20 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda7e0]
c0018444:	eb 05                	jmp    c001844b <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0018446:	40                   	inc    eax
c0018447:	eb da                	jmp    c0018423 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0018449:	31 c0                	xor    eax,eax
c001844b:	5b                   	pop    ebx
c001844c:	c3                   	ret    

c001844d <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001844d:	53                   	push   ebx
c001844e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018452:	53                   	push   ebx
c0018453:	e8 8c ff ff ff       	call   c00183e4 <Thr::getDriverBaseFromAddress(unsigned long)>
c0018458:	5a                   	pop    edx
c0018459:	31 d2                	xor    edx,edx
c001845b:	85 c0                	test   eax,eax
c001845d:	74 04                	je     c0018463 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001845f:	89 da                	mov    edx,ebx
c0018461:	29 c2                	sub    edx,eax
c0018463:	89 d0                	mov    eax,edx
c0018465:	5b                   	pop    ebx
c0018466:	c3                   	ret    

c0018467 <Thr::loadDLL(char const*, bool)>:
c0018467:	55                   	push   ebp
c0018468:	57                   	push   edi
c0018469:	56                   	push   esi
c001846a:	53                   	push   ebx
c001846b:	81 ec 34 01 00 00    	sub    esp,0x134
c0018471:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0018478:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001847f:	56                   	push   esi
c0018480:	68 e3 2d 02 c0       	push   0xc0022de3
c0018485:	e8 8b 6d ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001848a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018491:	e8 4a 6c ff ff       	call   c000f0e0 <operator new(unsigned long)>
c0018496:	83 c4 0c             	add    esp,0xc
c0018499:	89 c3                	mov    ebx,eax
c001849b:	ff 35 f4 5b 02 c0    	push   DWORD PTR ds:0xc0025bf4
c00184a1:	56                   	push   esi
c00184a2:	50                   	push   eax
c00184a3:	e8 a4 72 ff ff       	call   c000f74c <File::File(char const*, Process*)>
c00184a8:	83 c4 0c             	add    esp,0xc
c00184ab:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00184af:	50                   	push   eax
c00184b0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00184b4:	50                   	push   eax
c00184b5:	53                   	push   ebx
c00184b6:	e8 a1 75 ff ff       	call   c000fa5c <File::stat(unsigned long long*, bool*)>
c00184bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00184bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00184c0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00184c3:	83 c4 10             	add    esp,0x10
c00184c6:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00184cb:	75 0a                	jne    c00184d7 <Thr::loadDLL(char const*, bool)+0x70>
c00184cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00184d1:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00184d5:	75 3c                	jne    c0018513 <Thr::loadDLL(char const*, bool)+0xac>
c00184d7:	89 e8                	mov    eax,ebp
c00184d9:	84 c0                	test   al,al
c00184db:	0f 84 3d 01 00 00    	je     c001861e <Thr::loadDLL(char const*, bool)+0x1b7>
c00184e1:	50                   	push   eax
c00184e2:	50                   	push   eax
c00184e3:	68 f4 2d 02 c0       	push   0xc0022df4
c00184e8:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00184ec:	53                   	push   ebx
c00184ed:	e8 71 82 fe ff       	call   c0000763 <strcpy>
c00184f2:	58                   	pop    eax
c00184f3:	5a                   	pop    edx
c00184f4:	56                   	push   esi
c00184f5:	53                   	push   ebx
c00184f6:	e8 1f 83 fe ff       	call   c000081a <strcat>
c00184fb:	59                   	pop    ecx
c00184fc:	5f                   	pop    edi
c00184fd:	68 07 2e 02 c0       	push   0xc0022e07
c0018502:	53                   	push   ebx
c0018503:	e8 12 83 fe ff       	call   c000081a <strcat>
c0018508:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001850b:	e8 34 d5 ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c0018510:	83 c4 10             	add    esp,0x10
c0018513:	e8 6f 5e ff ff       	call   c000e387 <Virt::getAKernelVAS()>
c0018518:	51                   	push   ecx
c0018519:	6a 03                	push   0x3
c001851b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001851f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018523:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c0018529:	83 d3 00             	adc    ebx,0x0
c001852c:	89 ca                	mov    edx,ecx
c001852e:	89 d1                	mov    ecx,edx
c0018530:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c0018534:	51                   	push   ecx
c0018535:	50                   	push   eax
c0018536:	e8 8d 64 ff ff       	call   c000e9c8 <VAS::allocatePages(int, int)>
c001853b:	89 34 24             	mov    DWORD PTR [esp],esi
c001853e:	89 c3                	mov    ebx,eax
c0018540:	e8 9c 81 fe ff       	call   c00006e1 <strlen>
c0018545:	8b 3d 00 54 02 c0    	mov    edi,DWORD PTR ds:0xc0025400
c001854b:	40                   	inc    eax
c001854c:	89 04 24             	mov    DWORD PTR [esp],eax
c001854f:	e8 8f 3a ff ff       	call   c000bfe3 <malloc>
c0018554:	89 04 bd 20 58 02 c0 	mov    DWORD PTR [edi*4-0x3ffda7e0],eax
c001855b:	5f                   	pop    edi
c001855c:	58                   	pop    eax
c001855d:	a1 00 54 02 c0       	mov    eax,ds:0xc0025400
c0018562:	56                   	push   esi
c0018563:	ff 34 85 20 58 02 c0 	push   DWORD PTR [eax*4-0x3ffda7e0]
c001856a:	e8 f4 81 fe ff       	call   c0000763 <strcpy>
c001856f:	a1 00 54 02 c0       	mov    eax,ds:0xc0025400
c0018574:	8d 50 01             	lea    edx,[eax+0x1]
c0018577:	89 1c 85 20 56 02 c0 	mov    DWORD PTR [eax*4-0x3ffda9e0],ebx
c001857e:	89 15 00 54 02 c0    	mov    DWORD PTR ds:0xc0025400,edx
c0018584:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018588:	83 c4 0c             	add    esp,0xc
c001858b:	89 14 85 20 54 02 c0 	mov    DWORD PTR [eax*4-0x3ffdabe0],edx
c0018592:	6a 01                	push   0x1
c0018594:	53                   	push   ebx
c0018595:	56                   	push   esi
c0018596:	e8 ab f6 ff ff       	call   c0017c46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001859b:	83 c4 10             	add    esp,0x10
c001859e:	89 c7                	mov    edi,eax
c00185a0:	fe c8                	dec    al
c00185a2:	74 16                	je     c00185ba <Thr::loadDLL(char const*, bool)+0x153>
c00185a4:	89 e8                	mov    eax,ebp
c00185a6:	84 c0                	test   al,al
c00185a8:	74 10                	je     c00185ba <Thr::loadDLL(char const*, bool)+0x153>
c00185aa:	83 ec 0c             	sub    esp,0xc
c00185ad:	68 09 2e 02 c0       	push   0xc0022e09
c00185b2:	e8 8d d4 ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c00185b7:	83 c4 10             	add    esp,0x10
c00185ba:	31 f6                	xor    esi,esi
c00185bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00185c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00185c4:	05 ff 0f 00 00       	add    eax,0xfff
c00185c9:	83 d2 00             	adc    edx,0x0
c00185cc:	0f ac d0 0c          	shrd   eax,edx,0xc
c00185d0:	c1 ea 0c             	shr    edx,0xc
c00185d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00185d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00185db:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00185df:	ba 00 00 00 00       	mov    edx,0x0
c00185e4:	89 d0                	mov    eax,edx
c00185e6:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00185ea:	73 2c                	jae    c0018618 <Thr::loadDLL(char const*, bool)+0x1b1>
c00185ec:	e8 96 5d ff ff       	call   c000e387 <Virt::getAKernelVAS()>
c00185f1:	89 f5                	mov    ebp,esi
c00185f3:	c1 e5 0c             	shl    ebp,0xc
c00185f6:	52                   	push   edx
c00185f7:	52                   	push   edx
c00185f8:	01 dd                	add    ebp,ebx
c00185fa:	55                   	push   ebp
c00185fb:	50                   	push   eax
c00185fc:	e8 27 5f ff ff       	call   c000e528 <VAS::getPageTableEntry(unsigned long)>
c0018601:	83 c4 10             	add    esp,0x10
c0018604:	f6 00 60             	test   BYTE PTR [eax],0x60
c0018607:	75 0c                	jne    c0018615 <Thr::loadDLL(char const*, bool)+0x1ae>
c0018609:	83 ec 0c             	sub    esp,0xc
c001860c:	55                   	push   ebp
c001860d:	e8 1a 3f ff ff       	call   c000c52c <Phys::freePage(unsigned long)>
c0018612:	83 c4 10             	add    esp,0x10
c0018615:	46                   	inc    esi
c0018616:	eb a4                	jmp    c00185bc <Thr::loadDLL(char const*, bool)+0x155>
c0018618:	89 f8                	mov    eax,edi
c001861a:	84 c0                	test   al,al
c001861c:	75 02                	jne    c0018620 <Thr::loadDLL(char const*, bool)+0x1b9>
c001861e:	31 db                	xor    ebx,ebx
c0018620:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018626:	89 d8                	mov    eax,ebx
c0018628:	5b                   	pop    ebx
c0018629:	5e                   	pop    esi
c001862a:	5f                   	pop    edi
c001862b:	5d                   	pop    ebp
c001862c:	c3                   	ret    

c001862d <Thr::executeDLL(unsigned long, void*)>:
c001862d:	56                   	push   esi
c001862e:	53                   	push   ebx
c001862f:	51                   	push   ecx
c0018630:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018634:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018638:	85 db                	test   ebx,ebx
c001863a:	75 10                	jne    c001864c <Thr::executeDLL(unsigned long, void*)+0x1f>
c001863c:	83 ec 0c             	sub    esp,0xc
c001863f:	68 28 2e 02 c0       	push   0xc0022e28
c0018644:	e8 fb d3 ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c0018649:	83 c4 10             	add    esp,0x10
c001864c:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0018650:	5a                   	pop    edx
c0018651:	89 d8                	mov    eax,ebx
c0018653:	5b                   	pop    ebx
c0018654:	5e                   	pop    esi
c0018655:	ff e0                	jmp    eax
c0018657:	90                   	nop

c0018658 <changeTSS>:
c0018658:	83 ec 0c             	sub    esp,0xc
c001865b:	e8 78 c2 ff ff       	call   c00148d8 <thisCPU()>
c0018660:	52                   	push   edx
c0018661:	05 7c 11 00 00       	add    eax,0x117c
c0018666:	52                   	push   edx
c0018667:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001866d:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0018670:	ba 00 00 e8 01       	mov    edx,0x1e80000
c0018675:	c1 e1 15             	shl    ecx,0x15
c0018678:	29 ca                	sub    edx,ecx
c001867a:	52                   	push   edx
c001867b:	50                   	push   eax
c001867c:	e8 53 54 ff ff       	call   c000dad4 <TSS::setESP(unsigned long)>
c0018681:	83 c4 1c             	add    esp,0x1c
c0018684:	c3                   	ret    
c0018685:	90                   	nop

c0018686 <Process::addArgs(char**)>:
c0018686:	57                   	push   edi
c0018687:	56                   	push   esi
c0018688:	53                   	push   ebx
c0018689:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001868d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018691:	85 ff                	test   edi,edi
c0018693:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001869d:	74 45                	je     c00186e4 <Process::addArgs(char**)+0x5e>
c001869f:	8b 07                	mov    eax,DWORD PTR [edi]
c00186a1:	85 c0                	test   eax,eax
c00186a3:	74 3f                	je     c00186e4 <Process::addArgs(char**)+0x5e>
c00186a5:	31 db                	xor    ebx,ebx
c00186a7:	83 ec 0c             	sub    esp,0xc
c00186aa:	50                   	push   eax
c00186ab:	e8 31 80 fe ff       	call   c00006e1 <strlen>
c00186b0:	40                   	inc    eax
c00186b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00186b4:	e8 2a 39 ff ff       	call   c000bfe3 <malloc>
c00186b9:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c00186c0:	5a                   	pop    edx
c00186c1:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00186c4:	59                   	pop    ecx
c00186c5:	43                   	inc    ebx
c00186c6:	52                   	push   edx
c00186c7:	50                   	push   eax
c00186c8:	e8 96 80 fe ff       	call   c0000763 <strcpy>
c00186cd:	8b 8e 36 05 00 00    	mov    ecx,DWORD PTR [esi+0x536]
c00186d3:	83 c4 10             	add    esp,0x10
c00186d6:	41                   	inc    ecx
c00186d7:	89 8e 36 05 00 00    	mov    DWORD PTR [esi+0x536],ecx
c00186dd:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00186e0:	85 c0                	test   eax,eax
c00186e2:	75 c3                	jne    c00186a7 <Process::addArgs(char**)+0x21>
c00186e4:	5b                   	pop    ebx
c00186e5:	5e                   	pop    esi
c00186e6:	5f                   	pop    edi
c00186e7:	c3                   	ret    

c00186e8 <Process::Process(char const*, Process*, char**)>:
c00186e8:	56                   	push   esi
c00186e9:	53                   	push   ebx
c00186ea:	83 ec 14             	sub    esp,0x14
c00186ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186f1:	05 0c 02 00 00       	add    eax,0x20c
c00186f6:	bb 07 00 00 00       	mov    ebx,0x7
c00186fb:	89 c6                	mov    esi,eax
c00186fd:	85 db                	test   ebx,ebx
c00186ff:	78 12                	js     c0018713 <Process::Process(char const*, Process*, char**)+0x2b>
c0018701:	83 ec 0c             	sub    esp,0xc
c0018704:	56                   	push   esi
c0018705:	e8 50 77 00 00       	call   c001fe5a <ThreadControlBlock::ThreadControlBlock()>
c001870a:	83 c4 10             	add    esp,0x10
c001870d:	83 c6 63             	add    esi,0x63
c0018710:	4b                   	dec    ebx
c0018711:	eb ea                	jmp    c00186fd <Process::Process(char const*, Process*, char**)+0x15>
c0018713:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018717:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001871e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018722:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001872b:	a1 c4 41 02 c0       	mov    eax,ds:0xc00241c4
c0018730:	8d 50 01             	lea    edx,[eax+0x1]
c0018733:	89 15 c4 41 02 c0    	mov    DWORD PTR ds:0xc00241c4,edx
c0018739:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001873d:	89 02                	mov    DWORD PTR [edx],eax
c001873f:	83 ec 0c             	sub    esp,0xc
c0018742:	6a 10                	push   0x10
c0018744:	e8 97 69 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c0018749:	83 c4 10             	add    esp,0x10
c001874c:	89 c3                	mov    ebx,eax
c001874e:	83 ec 08             	sub    esp,0x8
c0018751:	6a 00                	push   0x0
c0018753:	53                   	push   ebx
c0018754:	e8 1b 66 ff ff       	call   c000ed74 <VAS::VAS(bool)>
c0018759:	83 c4 10             	add    esp,0x10
c001875c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018760:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0018766:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001876a:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018774:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018778:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001877c:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0018782:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018786:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001878c:	85 c0                	test   eax,eax
c001878e:	74 42                	je     c00187d2 <Process::Process(char const*, Process*, char**)+0xea>
c0018790:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018794:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001879a:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c00187a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187a4:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c00187aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187ae:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00187b4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00187ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187be:	05 0c 01 00 00       	add    eax,0x10c
c00187c3:	83 ec 08             	sub    esp,0x8
c00187c6:	52                   	push   edx
c00187c7:	50                   	push   eax
c00187c8:	e8 96 7f fe ff       	call   c0000763 <strcpy>
c00187cd:	83 c4 10             	add    esp,0x10
c00187d0:	eb 5c                	jmp    c001882e <Process::Process(char const*, Process*, char**)+0x146>
c00187d2:	83 ec 0c             	sub    esp,0xc
c00187d5:	68 60 12 00 00       	push   0x1260
c00187da:	e8 01 69 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c00187df:	83 c4 10             	add    esp,0x10
c00187e2:	89 c3                	mov    ebx,eax
c00187e4:	83 ec 08             	sub    esp,0x8
c00187e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187eb:	53                   	push   ebx
c00187ec:	e8 e1 4f ff ff       	call   c000d7d2 <VgaText::VgaText(char const*)>
c00187f1:	83 c4 10             	add    esp,0x10
c00187f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187f8:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00187fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018802:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018808:	83 ec 0c             	sub    esp,0xc
c001880b:	50                   	push   eax
c001880c:	e8 c0 43 ff ff       	call   c000cbd1 <addToTerminalCycle(VgaText*)>
c0018811:	83 c4 10             	add    esp,0x10
c0018814:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018818:	05 0c 01 00 00       	add    eax,0x10c
c001881d:	83 ec 08             	sub    esp,0x8
c0018820:	68 52 2e 02 c0       	push   0xc0022e52
c0018825:	50                   	push   eax
c0018826:	e8 38 7f fe ff       	call   c0000763 <strcpy>
c001882b:	83 c4 10             	add    esp,0x10
c001882e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018832:	83 c0 0c             	add    eax,0xc
c0018835:	83 ec 08             	sub    esp,0x8
c0018838:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001883c:	50                   	push   eax
c001883d:	e8 21 7f fe ff       	call   c0000763 <strcpy>
c0018842:	83 c4 10             	add    esp,0x10
c0018845:	83 ec 08             	sub    esp,0x8
c0018848:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001884c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018850:	e8 31 fe ff ff       	call   c0018686 <Process::addArgs(char**)>
c0018855:	83 c4 10             	add    esp,0x10
c0018858:	83 ec 08             	sub    esp,0x8
c001885b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001885f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018863:	e8 a5 ee ff ff       	call   c001770d <Thr::loadProgramIntoMemory(Process*, char const*)>
c0018868:	83 c4 10             	add    esp,0x10
c001886b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001886f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018873:	83 f0 01             	xor    eax,0x1
c0018876:	88 c2                	mov    dl,al
c0018878:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001887c:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c0018882:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018886:	25 ff 00 00 00       	and    eax,0xff
c001888b:	83 ec 08             	sub    esp,0x8
c001888e:	50                   	push   eax
c001888f:	68 50 2f 02 c0       	push   0xc0022f50
c0018894:	e8 7c 69 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0018899:	83 c4 10             	add    esp,0x10
c001889c:	90                   	nop
c001889d:	83 c4 14             	add    esp,0x14
c00188a0:	5b                   	pop    ebx
c00188a1:	5e                   	pop    esi
c00188a2:	c3                   	ret    
c00188a3:	90                   	nop

c00188a4 <Process::Process(bool, char const*, Process*, char**)>:
c00188a4:	56                   	push   esi
c00188a5:	53                   	push   ebx
c00188a6:	83 ec 14             	sub    esp,0x14
c00188a9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00188ad:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00188b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188b5:	05 0c 02 00 00       	add    eax,0x20c
c00188ba:	bb 07 00 00 00       	mov    ebx,0x7
c00188bf:	89 c6                	mov    esi,eax
c00188c1:	85 db                	test   ebx,ebx
c00188c3:	78 12                	js     c00188d7 <Process::Process(bool, char const*, Process*, char**)+0x33>
c00188c5:	83 ec 0c             	sub    esp,0xc
c00188c8:	56                   	push   esi
c00188c9:	e8 8c 75 00 00       	call   c001fe5a <ThreadControlBlock::ThreadControlBlock()>
c00188ce:	83 c4 10             	add    esp,0x10
c00188d1:	83 c6 63             	add    esi,0x63
c00188d4:	4b                   	dec    ebx
c00188d5:	eb ea                	jmp    c00188c1 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c00188d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188db:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c00188e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188e6:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c00188ef:	a1 c4 41 02 c0       	mov    eax,ds:0xc00241c4
c00188f4:	8d 50 01             	lea    edx,[eax+0x1]
c00188f7:	89 15 c4 41 02 c0    	mov    DWORD PTR ds:0xc00241c4,edx
c00188fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018901:	89 02                	mov    DWORD PTR [edx],eax
c0018903:	83 ec 0c             	sub    esp,0xc
c0018906:	6a 10                	push   0x10
c0018908:	e8 d3 67 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c001890d:	83 c4 10             	add    esp,0x10
c0018910:	89 c3                	mov    ebx,eax
c0018912:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018916:	25 ff 00 00 00       	and    eax,0xff
c001891b:	83 ec 08             	sub    esp,0x8
c001891e:	50                   	push   eax
c001891f:	53                   	push   ebx
c0018920:	e8 4f 64 ff ff       	call   c000ed74 <VAS::VAS(bool)>
c0018925:	83 c4 10             	add    esp,0x10
c0018928:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001892c:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0018932:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018936:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018944:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018948:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001894e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018952:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018958:	85 c0                	test   eax,eax
c001895a:	74 42                	je     c001899e <Process::Process(bool, char const*, Process*, char**)+0xfa>
c001895c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018960:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018966:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001896c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018970:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0018976:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001897a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018980:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018986:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001898a:	05 0c 01 00 00       	add    eax,0x10c
c001898f:	83 ec 08             	sub    esp,0x8
c0018992:	52                   	push   edx
c0018993:	50                   	push   eax
c0018994:	e8 ca 7d fe ff       	call   c0000763 <strcpy>
c0018999:	83 c4 10             	add    esp,0x10
c001899c:	eb 5c                	jmp    c00189fa <Process::Process(bool, char const*, Process*, char**)+0x156>
c001899e:	83 ec 0c             	sub    esp,0xc
c00189a1:	68 60 12 00 00       	push   0x1260
c00189a6:	e8 35 67 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c00189ab:	83 c4 10             	add    esp,0x10
c00189ae:	89 c3                	mov    ebx,eax
c00189b0:	83 ec 08             	sub    esp,0x8
c00189b3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00189b7:	53                   	push   ebx
c00189b8:	e8 15 4e ff ff       	call   c000d7d2 <VgaText::VgaText(char const*)>
c00189bd:	83 c4 10             	add    esp,0x10
c00189c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189c4:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00189ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189ce:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00189d4:	83 ec 0c             	sub    esp,0xc
c00189d7:	50                   	push   eax
c00189d8:	e8 f4 41 ff ff       	call   c000cbd1 <addToTerminalCycle(VgaText*)>
c00189dd:	83 c4 10             	add    esp,0x10
c00189e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189e4:	05 0c 01 00 00       	add    eax,0x10c
c00189e9:	83 ec 08             	sub    esp,0x8
c00189ec:	68 52 2e 02 c0       	push   0xc0022e52
c00189f1:	50                   	push   eax
c00189f2:	e8 6c 7d fe ff       	call   c0000763 <strcpy>
c00189f7:	83 c4 10             	add    esp,0x10
c00189fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189fe:	83 c0 0c             	add    eax,0xc
c0018a01:	83 ec 08             	sub    esp,0x8
c0018a04:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018a08:	50                   	push   eax
c0018a09:	e8 55 7d fe ff       	call   c0000763 <strcpy>
c0018a0e:	83 c4 10             	add    esp,0x10
c0018a11:	83 ec 08             	sub    esp,0x8
c0018a14:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018a18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018a1c:	e8 65 fc ff ff       	call   c0018686 <Process::addArgs(char**)>
c0018a21:	83 c4 10             	add    esp,0x10
c0018a24:	90                   	nop
c0018a25:	83 c4 14             	add    esp,0x14
c0018a28:	5b                   	pop    ebx
c0018a29:	5e                   	pop    esi
c0018a2a:	c3                   	ret    

c0018a2b <disableIRQs()>:
c0018a2b:	fa                   	cli    
c0018a2c:	a1 cc 5b 02 c0       	mov    eax,ds:0xc0025bcc
c0018a31:	40                   	inc    eax
c0018a32:	a3 cc 5b 02 c0       	mov    ds:0xc0025bcc,eax
c0018a37:	c3                   	ret    

c0018a38 <getIRQNestingLevel()>:
c0018a38:	a1 cc 5b 02 c0       	mov    eax,ds:0xc0025bcc
c0018a3d:	c3                   	ret    

c0018a3e <enableIRQs()>:
c0018a3e:	a1 cc 5b 02 c0       	mov    eax,ds:0xc0025bcc
c0018a43:	48                   	dec    eax
c0018a44:	a3 cc 5b 02 c0       	mov    ds:0xc0025bcc,eax
c0018a49:	75 01                	jne    c0018a4c <enableIRQs()+0xe>
c0018a4b:	fb                   	sti    
c0018a4c:	c3                   	ret    

c0018a4d <lockScheduler()>:
c0018a4d:	eb dc                	jmp    c0018a2b <disableIRQs()>

c0018a4f <unlockScheduler()>:
c0018a4f:	eb ed                	jmp    c0018a3e <enableIRQs()>

c0018a51 <userModeEntryPoint(void*)>:
c0018a51:	83 ec 0c             	sub    esp,0xc
c0018a54:	e8 f6 ff ff ff       	call   c0018a4f <unlockScheduler()>
c0018a59:	fb                   	sti    
c0018a5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a5f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018a62:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0018a68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018a6c:	83 c4 0c             	add    esp,0xc
c0018a6f:	e9 29 78 fe ff       	jmp    c000029d <goToUsermode>

c0018a74 <lockStuff()>:
c0018a74:	e8 b2 ff ff ff       	call   c0018a2b <disableIRQs()>
c0018a79:	a1 c8 5b 02 c0       	mov    eax,ds:0xc0025bc8
c0018a7e:	40                   	inc    eax
c0018a7f:	a3 c8 5b 02 c0       	mov    ds:0xc0025bc8,eax
c0018a84:	c3                   	ret    

c0018a85 <taskStartupFunction>:
c0018a85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a8a:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018a8d:	c3                   	ret    

c0018a8e <updateTimeUsed()>:
c0018a8e:	57                   	push   edi
c0018a8f:	56                   	push   esi
c0018a90:	53                   	push   ebx
c0018a91:	e8 42 be ff ff       	call   c00148d8 <thisCPU()>
c0018a96:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0018a9d:	74 49                	je     c0018ae8 <updateTimeUsed()+0x5a>
c0018a9f:	0f 31                	rdtsc  
c0018aa1:	89 c1                	mov    ecx,eax
c0018aa3:	a3 08 5c 02 c0       	mov    ds:0xc0025c08,eax
c0018aa8:	2b 0d f8 5b 02 c0    	sub    ecx,DWORD PTR ds:0xc0025bf8
c0018aae:	a3 f8 5b 02 c0       	mov    ds:0xc0025bf8,eax
c0018ab3:	89 0d 00 5c 02 c0    	mov    DWORD PTR ds:0xc0025c00,ecx
c0018ab9:	89 d3                	mov    ebx,edx
c0018abb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ac0:	89 15 0c 5c 02 c0    	mov    DWORD PTR ds:0xc0025c0c,edx
c0018ac6:	1b 1d fc 5b 02 c0    	sbb    ebx,DWORD PTR ds:0xc0025bfc
c0018acc:	89 15 fc 5b 02 c0    	mov    DWORD PTR ds:0xc0025bfc,edx
c0018ad2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0018ad5:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0018ad8:	01 f1                	add    ecx,esi
c0018ada:	89 1d 04 5c 02 c0    	mov    DWORD PTR ds:0xc0025c04,ebx
c0018ae0:	11 fb                	adc    ebx,edi
c0018ae2:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c0018ae5:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0018ae8:	5b                   	pop    ebx
c0018ae9:	5e                   	pop    esi
c0018aea:	5f                   	pop    edi
c0018aeb:	c3                   	ret    

c0018aec <switchToThread(ThreadControlBlock*)>:
c0018aec:	53                   	push   ebx
c0018aed:	83 ec 08             	sub    esp,0x8
c0018af0:	a1 c8 5b 02 c0       	mov    eax,ds:0xc0025bc8
c0018af5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018af9:	85 c0                	test   eax,eax
c0018afb:	75 36                	jne    c0018b33 <switchToThread(ThreadControlBlock*)+0x47>
c0018afd:	8a 53 44             	mov    dl,BYTE PTR [ebx+0x44]
c0018b00:	80 fa ff             	cmp    dl,0xff
c0018b03:	74 2a                	je     c0018b2f <switchToThread(ThreadControlBlock*)+0x43>
c0018b05:	81 e2 ff 00 00 00    	and    edx,0xff
c0018b0b:	b8 84 03 00 00       	mov    eax,0x384
c0018b10:	29 d0                	sub    eax,edx
c0018b12:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0018b15:	c1 e0 10             	shl    eax,0x10
c0018b18:	01 c8                	add    eax,ecx
c0018b1a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018b1d:	e8 6c ff ff ff       	call   c0018a8e <updateTimeUsed()>
c0018b22:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018b26:	83 c4 08             	add    esp,0x8
c0018b29:	5b                   	pop    ebx
c0018b2a:	e9 ac 77 fe ff       	jmp    c00002db <switchToThreadASM>
c0018b2f:	31 c0                	xor    eax,eax
c0018b31:	eb e7                	jmp    c0018b1a <switchToThread(ThreadControlBlock*)+0x2e>
c0018b33:	c7 05 c4 5b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025bc4,0x1
c0018b3d:	83 c4 08             	add    esp,0x8
c0018b40:	5b                   	pop    ebx
c0018b41:	c3                   	ret    

c0018b42 <Semaphore::Semaphore(int)>:
c0018b42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018b4a:	89 10                	mov    DWORD PTR [eax],edx
c0018b4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b50:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018b57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b5b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018b62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b66:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018b6d:	90                   	nop
c0018b6e:	c3                   	ret    
c0018b6f:	90                   	nop

c0018b70 <Mutex::Mutex()>:
c0018b70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b74:	6a 01                	push   0x1
c0018b76:	50                   	push   eax
c0018b77:	e8 c6 ff ff ff       	call   c0018b42 <Semaphore::Semaphore(int)>
c0018b7c:	83 c4 08             	add    esp,0x8
c0018b7f:	90                   	nop
c0018b80:	c3                   	ret    
c0018b81:	90                   	nop

c0018b82 <Process::createThread(void (*)(void*), void*, int)>:
c0018b82:	55                   	push   ebp
c0018b83:	31 c9                	xor    ecx,ecx
c0018b85:	57                   	push   edi
c0018b86:	56                   	push   esi
c0018b87:	53                   	push   ebx
c0018b88:	83 ec 1c             	sub    esp,0x1c
c0018b8b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018b8f:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c0018b96:	89 f2                	mov    edx,esi
c0018b98:	31 c0                	xor    eax,eax
c0018b9a:	66 89 d0             	mov    ax,dx
c0018b9d:	83 e2 01             	and    edx,0x1
c0018ba0:	74 14                	je     c0018bb6 <Process::createThread(void (*)(void*), void*, int)+0x34>
c0018ba2:	d1 f8                	sar    eax,1
c0018ba4:	41                   	inc    ecx
c0018ba5:	89 c2                	mov    edx,eax
c0018ba7:	83 f9 10             	cmp    ecx,0x10
c0018baa:	75 ec                	jne    c0018b98 <Process::createThread(void (*)(void*), void*, int)+0x16>
c0018bac:	83 c4 1c             	add    esp,0x1c
c0018baf:	31 c0                	xor    eax,eax
c0018bb1:	5b                   	pop    ebx
c0018bb2:	5e                   	pop    esi
c0018bb3:	5f                   	pop    edi
c0018bb4:	5d                   	pop    ebp
c0018bb5:	c3                   	ret    
c0018bb6:	b8 01 00 00 00       	mov    eax,0x1
c0018bbb:	d3 e0                	shl    eax,cl
c0018bbd:	09 c6                	or     esi,eax
c0018bbf:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018bc5:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c0018bcc:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0018bcf:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018bd2:	89 f0                	mov    eax,esi
c0018bd4:	c1 e0 05             	shl    eax,0x5
c0018bd7:	01 c6                	add    esi,eax
c0018bd9:	8d 04 33             	lea    eax,[ebx+esi*1]
c0018bdc:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018be2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018be6:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0018bec:	89 ca                	mov    edx,ecx
c0018bee:	f7 da                	neg    edx
c0018bf0:	c1 e2 15             	shl    edx,0x15
c0018bf3:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0018bf9:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018bff:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0018c05:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018c0b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018c0f:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0018c15:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018c19:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018c23:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018c29:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0018c33:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018c3d:	52                   	push   edx
c0018c3e:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c0018c45:	52                   	push   edx
c0018c46:	50                   	push   eax
c0018c47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018c4b:	68 e8 5b 02 c0       	push   0xc0025be8
c0018c50:	e8 5d 70 00 00       	call   c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018c55:	83 c4 10             	add    esp,0x10
c0018c58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018c5c:	83 c4 1c             	add    esp,0x1c
c0018c5f:	5b                   	pop    ebx
c0018c60:	5e                   	pop    esi
c0018c61:	5f                   	pop    edi
c0018c62:	5d                   	pop    ebp
c0018c63:	c3                   	ret    

c0018c64 <Process::createUserThread()>:
c0018c64:	83 ec 0c             	sub    esp,0xc
c0018c67:	68 80 00 00 00       	push   0x80
c0018c6c:	6a 00                	push   0x0
c0018c6e:	68 51 8a 01 c0       	push   0xc0018a51
c0018c73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c77:	50                   	push   eax
c0018c78:	e8 05 ff ff ff       	call   c0018b82 <Process::createThread(void (*)(void*), void*, int)>
c0018c7d:	83 c4 1c             	add    esp,0x1c
c0018c80:	c3                   	ret    

c0018c81 <setupMultitasking(void (*)())>:
c0018c81:	56                   	push   esi
c0018c82:	53                   	push   ebx
c0018c83:	51                   	push   ecx
c0018c84:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018c88:	eb 10                	jmp    c0018c9a <setupMultitasking(void (*)())+0x19>
c0018c8a:	83 ec 0c             	sub    esp,0xc
c0018c8d:	68 e8 5b 02 c0       	push   0xc0025be8
c0018c92:	e8 6d 6f 00 00       	call   c001fc04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018c97:	83 c4 10             	add    esp,0x10
c0018c9a:	83 ec 0c             	sub    esp,0xc
c0018c9d:	68 e8 5b 02 c0       	push   0xc0025be8
c0018ca2:	e8 41 6f 00 00       	call   c001fbe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018ca7:	83 c4 10             	add    esp,0x10
c0018caa:	84 c0                	test   al,al
c0018cac:	74 dc                	je     c0018c8a <setupMultitasking(void (*)())+0x9>
c0018cae:	83 ec 0c             	sub    esp,0xc
c0018cb1:	68 3b 07 00 00       	push   0x73b
c0018cb6:	e8 25 64 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c0018cbb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018cc2:	6a 00                	push   0x0
c0018cc4:	68 56 2e 02 c0       	push   0xc0022e56
c0018cc9:	89 c3                	mov    ebx,eax
c0018ccb:	6a 01                	push   0x1
c0018ccd:	50                   	push   eax
c0018cce:	e8 d1 fb ff ff       	call   c00188a4 <Process::Process(bool, char const*, Process*, char**)>
c0018cd3:	83 c4 18             	add    esp,0x18
c0018cd6:	8b 83 26 05 00 00    	mov    eax,DWORD PTR [ebx+0x526]
c0018cdc:	89 1d f4 5b 02 c0    	mov    DWORD PTR ds:0xc0025bf4,ebx
c0018ce2:	50                   	push   eax
c0018ce3:	68 78 2f 02 c0       	push   0xc0022f78
c0018ce8:	e8 28 65 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0018ced:	5a                   	pop    edx
c0018cee:	8b 8b 26 05 00 00    	mov    ecx,DWORD PTR [ebx+0x526]
c0018cf4:	51                   	push   ecx
c0018cf5:	e8 4b 46 ff ff       	call   c000d345 <setActiveTerminal(VgaText*)>
c0018cfa:	66 8b 83 24 05 00 00 	mov    ax,WORD PTR [ebx+0x524]
c0018d01:	83 c8 01             	or     eax,0x1
c0018d04:	66 89 83 24 05 00 00 	mov    WORD PTR [ebx+0x524],ax
c0018d0b:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018d11:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018d14:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0018d1e:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018d24:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018d2e:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018d38:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018d3e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018d44:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018d4e:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0018d54:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018d5e:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0018d68:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018d6e:	58                   	pop    eax
c0018d6f:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018d75:	5a                   	pop    edx
c0018d76:	68 52 2e 02 c0       	push   0xc0022e52
c0018d7b:	50                   	push   eax
c0018d7c:	e8 e2 79 fe ff       	call   c0000763 <strcpy>
c0018d81:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0018d88:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018d8c:	83 c4 14             	add    esp,0x14
c0018d8f:	5b                   	pop    ebx
c0018d90:	5e                   	pop    esi
c0018d91:	e9 37 75 fe ff       	jmp    c00002cd <switchToThreadASMFirstTime>

c0018d96 <schedule()>:
c0018d96:	a1 c8 5b 02 c0       	mov    eax,ds:0xc0025bc8
c0018d9b:	85 c0                	test   eax,eax
c0018d9d:	74 0b                	je     c0018daa <schedule()+0x14>
c0018d9f:	c7 05 c4 5b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025bc4,0x1
c0018da9:	c3                   	ret    
c0018daa:	53                   	push   ebx
c0018dab:	83 ec 14             	sub    esp,0x14
c0018dae:	68 e8 5b 02 c0       	push   0xc0025be8
c0018db3:	e8 30 6e 00 00       	call   c001fbe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018db8:	83 c4 10             	add    esp,0x10
c0018dbb:	84 c0                	test   al,al
c0018dbd:	75 38                	jne    c0018df7 <schedule()+0x61>
c0018dbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018dc4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018dc7:	4a                   	dec    edx
c0018dc8:	74 32                	je     c0018dfc <schedule()+0x66>
c0018dca:	83 ec 0c             	sub    esp,0xc
c0018dcd:	68 e8 5b 02 c0       	push   0xc0025be8
c0018dd2:	e8 09 6e 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018dd7:	89 c3                	mov    ebx,eax
c0018dd9:	c7 04 24 e8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025be8
c0018de0:	e8 1f 6e 00 00       	call   c001fc04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018de5:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018dec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018def:	e8 f8 fc ff ff       	call   c0018aec <switchToThread(ThreadControlBlock*)>
c0018df4:	83 c4 10             	add    esp,0x10
c0018df7:	83 c4 08             	add    esp,0x8
c0018dfa:	5b                   	pop    ebx
c0018dfb:	c3                   	ret    
c0018dfc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018e03:	51                   	push   ecx
c0018e04:	51                   	push   ecx
c0018e05:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018e0b:	53                   	push   ebx
c0018e0c:	68 e8 5b 02 c0       	push   0xc0025be8
c0018e11:	e8 9c 6e 00 00       	call   c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018e16:	83 c4 10             	add    esp,0x10
c0018e19:	eb af                	jmp    c0018dca <schedule()+0x34>

c0018e1b <unlockStuff()>:
c0018e1b:	a1 c8 5b 02 c0       	mov    eax,ds:0xc0025bc8
c0018e20:	48                   	dec    eax
c0018e21:	a3 c8 5b 02 c0       	mov    ds:0xc0025bc8,eax
c0018e26:	75 09                	jne    c0018e31 <unlockStuff()+0x16>
c0018e28:	a1 c4 5b 02 c0       	mov    eax,ds:0xc0025bc4
c0018e2d:	85 c0                	test   eax,eax
c0018e2f:	75 05                	jne    c0018e36 <unlockStuff()+0x1b>
c0018e31:	e9 08 fc ff ff       	jmp    c0018a3e <enableIRQs()>
c0018e36:	83 ec 0c             	sub    esp,0xc
c0018e39:	c7 05 c4 5b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025bc4,0x0
c0018e43:	e8 4e ff ff ff       	call   c0018d96 <schedule()>
c0018e48:	83 c4 0c             	add    esp,0xc
c0018e4b:	e9 ee fb ff ff       	jmp    c0018a3e <enableIRQs()>

c0018e50 <Semaphore::tryAcquire()>:
c0018e50:	83 ec 0c             	sub    esp,0xc
c0018e53:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e57:	e8 18 fc ff ff       	call   c0018a74 <lockStuff()>
c0018e5c:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018e5f:	3b 02                	cmp    eax,DWORD PTR [edx]
c0018e61:	7c 0b                	jl     c0018e6e <Semaphore::tryAcquire()+0x1e>
c0018e63:	e8 b3 ff ff ff       	call   c0018e1b <unlockStuff()>
c0018e68:	31 c0                	xor    eax,eax
c0018e6a:	83 c4 0c             	add    esp,0xc
c0018e6d:	c3                   	ret    
c0018e6e:	40                   	inc    eax
c0018e6f:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0018e72:	e8 a4 ff ff ff       	call   c0018e1b <unlockStuff()>
c0018e77:	b0 01                	mov    al,0x1
c0018e79:	83 c4 0c             	add    esp,0xc
c0018e7c:	c3                   	ret    
c0018e7d:	90                   	nop

c0018e7e <Semaphore::assertLocked(char const*)>:
c0018e7e:	83 ec 0c             	sub    esp,0xc
c0018e81:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e85:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018e89:	e8 e6 fb ff ff       	call   c0018a74 <lockStuff()>
c0018e8e:	8b 02                	mov    eax,DWORD PTR [edx]
c0018e90:	39 42 0c             	cmp    DWORD PTR [edx+0xc],eax
c0018e93:	7c 05                	jl     c0018e9a <Semaphore::assertLocked(char const*)+0x1c>
c0018e95:	83 c4 0c             	add    esp,0xc
c0018e98:	eb 81                	jmp    c0018e1b <unlockStuff()>
c0018e9a:	83 ec 0c             	sub    esp,0xc
c0018e9d:	51                   	push   ecx
c0018e9e:	e8 a1 cb ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c0018ea3:	83 c4 10             	add    esp,0x10
c0018ea6:	83 c4 0c             	add    esp,0xc
c0018ea9:	e9 6d ff ff ff       	jmp    c0018e1b <unlockStuff()>

c0018eae <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018eae:	83 ec 0c             	sub    esp,0xc
c0018eb1:	e8 82 fb ff ff       	call   c0018a38 <getIRQNestingLevel()>
c0018eb6:	52                   	push   edx
c0018eb7:	52                   	push   edx
c0018eb8:	50                   	push   eax
c0018eb9:	68 ac 2f 02 c0       	push   0xc0022fac
c0018ebe:	e8 52 63 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0018ec3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ec8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018ecc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018ecf:	e8 c2 fe ff ff       	call   c0018d96 <schedule()>
c0018ed4:	e8 76 fb ff ff       	call   c0018a4f <unlockScheduler()>
c0018ed9:	e8 5a fb ff ff       	call   c0018a38 <getIRQNestingLevel()>
c0018ede:	59                   	pop    ecx
c0018edf:	5a                   	pop    edx
c0018ee0:	50                   	push   eax
c0018ee1:	68 e0 2f 02 c0       	push   0xc0022fe0
c0018ee6:	e8 2a 63 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0018eeb:	83 c4 1c             	add    esp,0x1c
c0018eee:	c3                   	ret    

c0018eef <blockTask(TaskState)>:
c0018eef:	83 ec 0c             	sub    esp,0xc
c0018ef2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ef6:	e8 52 fb ff ff       	call   c0018a4d <lockScheduler()>
c0018efb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f00:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018f03:	e8 8e fe ff ff       	call   c0018d96 <schedule()>
c0018f08:	83 c4 0c             	add    esp,0xc
c0018f0b:	e9 3f fb ff ff       	jmp    c0018a4f <unlockScheduler()>

c0018f10 <waitTask(int, int*, int)>:
c0018f10:	83 ec 18             	sub    esp,0x18
c0018f13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f18:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f1c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018f1f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018f23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f28:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0018f2b:	6a 07                	push   0x7
c0018f2d:	e8 bd ff ff ff       	call   c0018eef <blockTask(TaskState)>
c0018f32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f37:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0018f3a:	83 c4 10             	add    esp,0x10
c0018f3d:	85 d2                	test   edx,edx
c0018f3f:	74 0a                	je     c0018f4b <waitTask(int, int*, int)+0x3b>
c0018f41:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0018f44:	89 02                	mov    DWORD PTR [edx],eax
c0018f46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f4b:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0018f4e:	83 c4 0c             	add    esp,0xc
c0018f51:	c3                   	ret    

c0018f52 <nanoSleepUntil(unsigned long long)>:
c0018f52:	53                   	push   ebx
c0018f53:	83 ec 08             	sub    esp,0x8
c0018f56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018f5a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018f5e:	3b 0d 10 4e 02 c0    	cmp    ecx,DWORD PTR ds:0xc0024e10
c0018f64:	89 d8                	mov    eax,ebx
c0018f66:	1b 05 14 4e 02 c0    	sbb    eax,DWORD PTR ds:0xc0024e14
c0018f6c:	73 05                	jae    c0018f73 <nanoSleepUntil(unsigned long long)+0x21>
c0018f6e:	83 c4 08             	add    esp,0x8
c0018f71:	5b                   	pop    ebx
c0018f72:	c3                   	ret    
c0018f73:	e8 fc fa ff ff       	call   c0018a74 <lockStuff()>
c0018f78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f7d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0018f80:	89 58 30             	mov    DWORD PTR [eax+0x30],ebx
c0018f83:	51                   	push   ecx
c0018f84:	51                   	push   ecx
c0018f85:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018f8b:	53                   	push   ebx
c0018f8c:	68 dc 5b 02 c0       	push   0xc0025bdc
c0018f91:	e8 1c 6d 00 00       	call   c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018f96:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018f9d:	e8 4d ff ff ff       	call   c0018eef <blockTask(TaskState)>
c0018fa2:	83 c4 18             	add    esp,0x18
c0018fa5:	5b                   	pop    ebx
c0018fa6:	e9 70 fe ff ff       	jmp    c0018e1b <unlockStuff()>

c0018fab <nanoSleep(unsigned long long)>:
c0018fab:	a1 10 4e 02 c0       	mov    eax,ds:0xc0024e10
c0018fb0:	8b 15 14 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024e14
c0018fb6:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018fba:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0018fbe:	eb 92                	jmp    c0018f52 <nanoSleepUntil(unsigned long long)>

c0018fc0 <sleep(unsigned long long)>:
c0018fc0:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c0018fc5:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c0018fcd:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0018fd1:	01 ca                	add    edx,ecx
c0018fd3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018fd7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018fdb:	eb ce                	jmp    c0018fab <nanoSleep(unsigned long long)>
c0018fdd:	90                   	nop

c0018fde <Semaphore::acquire()>:
c0018fde:	83 ec 0c             	sub    esp,0xc
c0018fe1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018fe5:	e8 8a fa ff ff       	call   c0018a74 <lockStuff()>
c0018fea:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018fed:	3b 02                	cmp    eax,DWORD PTR [edx]
c0018fef:	7d 0c                	jge    c0018ffd <Semaphore::acquire()+0x1f>
c0018ff1:	40                   	inc    eax
c0018ff2:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0018ff5:	83 c4 0c             	add    esp,0xc
c0018ff8:	e9 1e fe ff ff       	jmp    c0018e1b <unlockStuff()>
c0018ffd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019002:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0019009:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001900c:	85 c0                	test   eax,eax
c001900e:	74 29                	je     c0019039 <Semaphore::acquire()+0x5b>
c0019010:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0019013:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019019:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001901c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019021:	83 ec 0c             	sub    esp,0xc
c0019024:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0019027:	6a 05                	push   0x5
c0019029:	e8 c1 fe ff ff       	call   c0018eef <blockTask(TaskState)>
c001902e:	83 c4 10             	add    esp,0x10
c0019031:	83 c4 0c             	add    esp,0xc
c0019034:	e9 e2 fd ff ff       	jmp    c0018e1b <unlockStuff()>
c0019039:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001903e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0019041:	eb d9                	jmp    c001901c <Semaphore::acquire()+0x3e>

c0019043 <taskReturned>:
c0019043:	83 ec 18             	sub    esp,0x18
c0019046:	68 14 30 02 c0       	push   0xc0023014
c001904b:	e8 f4 c9 ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c0019050:	83 c4 10             	add    esp,0x10
c0019053:	83 ec 0c             	sub    esp,0xc
c0019056:	6a 02                	push   0x2
c0019058:	e8 92 fe ff ff       	call   c0018eef <blockTask(TaskState)>
c001905d:	e8 eb f9 ff ff       	call   c0018a4d <lockScheduler()>
c0019062:	e8 2f fd ff ff       	call   c0018d96 <schedule()>
c0019067:	e8 e3 f9 ff ff       	call   c0018a4f <unlockScheduler()>
c001906c:	83 c4 10             	add    esp,0x10
c001906f:	eb e2                	jmp    c0019053 <taskReturned+0x10>

c0019071 <unblockTask(ThreadControlBlock*)>:
c0019071:	53                   	push   ebx
c0019072:	83 ec 08             	sub    esp,0x8
c0019075:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019079:	e8 cf f9 ff ff       	call   c0018a4d <lockScheduler()>
c001907e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0019081:	85 c0                	test   eax,eax
c0019083:	74 5b                	je     c00190e0 <unblockTask(ThreadControlBlock*)+0x6f>
c0019085:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0019088:	48                   	dec    eax
c0019089:	74 30                	je     c00190bb <unblockTask(ThreadControlBlock*)+0x4a>
c001908b:	83 ec 0c             	sub    esp,0xc
c001908e:	68 e8 5b 02 c0       	push   0xc0025be8
c0019093:	e8 48 6b 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019098:	83 c4 10             	add    esp,0x10
c001909b:	85 c0                	test   eax,eax
c001909d:	75 16                	jne    c00190b5 <unblockTask(ThreadControlBlock*)+0x44>
c001909f:	eb 64                	jmp    c0019105 <unblockTask(ThreadControlBlock*)+0x94>
c00190a1:	52                   	push   edx
c00190a2:	52                   	push   edx
c00190a3:	50                   	push   eax
c00190a4:	68 e8 5b 02 c0       	push   0xc0025be8
c00190a9:	e8 42 6e 00 00       	call   c001fef0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00190ae:	83 c4 10             	add    esp,0x10
c00190b1:	85 c0                	test   eax,eax
c00190b3:	74 50                	je     c0019105 <unblockTask(ThreadControlBlock*)+0x94>
c00190b5:	39 c3                	cmp    ebx,eax
c00190b7:	75 e8                	jne    c00190a1 <unblockTask(ThreadControlBlock*)+0x30>
c00190b9:	eb 1c                	jmp    c00190d7 <unblockTask(ThreadControlBlock*)+0x66>
c00190bb:	83 ec 0c             	sub    esp,0xc
c00190be:	68 04 31 02 c0       	push   0xc0023104
c00190c3:	e8 4d 61 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c00190c8:	c7 04 24 90 30 02 c0 	mov    DWORD PTR [esp],0xc0023090
c00190cf:	e8 41 61 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c00190d4:	83 c4 10             	add    esp,0x10
c00190d7:	83 c4 08             	add    esp,0x8
c00190da:	5b                   	pop    ebx
c00190db:	e9 6f f9 ff ff       	jmp    c0018a4f <unlockScheduler()>
c00190e0:	83 ec 0c             	sub    esp,0xc
c00190e3:	68 48 30 02 c0       	push   0xc0023048
c00190e8:	e8 28 61 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c00190ed:	c7 04 24 90 30 02 c0 	mov    DWORD PTR [esp],0xc0023090
c00190f4:	e8 1c 61 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c00190f9:	83 c4 10             	add    esp,0x10
c00190fc:	83 c4 08             	add    esp,0x8
c00190ff:	5b                   	pop    ebx
c0019100:	e9 4a f9 ff ff       	jmp    c0018a4f <unlockScheduler()>
c0019105:	50                   	push   eax
c0019106:	50                   	push   eax
c0019107:	53                   	push   ebx
c0019108:	68 e8 5b 02 c0       	push   0xc0025be8
c001910d:	e8 a0 6b 00 00       	call   c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019112:	83 c4 10             	add    esp,0x10
c0019115:	83 c4 08             	add    esp,0x8
c0019118:	5b                   	pop    ebx
c0019119:	e9 31 f9 ff ff       	jmp    c0018a4f <unlockScheduler()>

c001911e <cleanupTerminatedTask(ThreadControlBlock*)>:
c001911e:	55                   	push   ebp
c001911f:	57                   	push   edi
c0019120:	56                   	push   esi
c0019121:	53                   	push   ebx
c0019122:	83 ec 1c             	sub    esp,0x1c
c0019125:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019129:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001912c:	8b a8 36 05 00 00    	mov    ebp,DWORD PTR [eax+0x536]
c0019132:	85 ed                	test   ebp,ebp
c0019134:	7e 21                	jle    c0019157 <cleanupTerminatedTask(ThreadControlBlock*)+0x39>
c0019136:	31 f6                	xor    esi,esi
c0019138:	83 ec 0c             	sub    esp,0xc
c001913b:	8b bc b0 3a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x53a]
c0019142:	46                   	inc    esi
c0019143:	57                   	push   edi
c0019144:	e8 aa 2e ff ff       	call   c000bff3 <free>
c0019149:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001914c:	83 c4 10             	add    esp,0x10
c001914f:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c0019155:	7f e1                	jg     c0019138 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c0019157:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0019161:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0019166:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019169:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001916c:	d3 c0                	rol    eax,cl
c001916e:	66 8b 8a 24 05 00 00 	mov    cx,WORD PTR [edx+0x524]
c0019175:	21 c1                	and    ecx,eax
c0019177:	66 89 8a 24 05 00 00 	mov    WORD PTR [edx+0x524],cx
c001917e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0019181:	89 f7                	mov    edi,esi
c0019183:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001918b:	0f 85 4f 01 00 00    	jne    c00192e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c2>
c0019191:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0019197:	85 c0                	test   eax,eax
c0019199:	0f 84 aa 00 00 00    	je     c0019249 <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c001919f:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c00191a2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00191a6:	31 c9                	xor    ecx,ecx
c00191a8:	eb 10                	jmp    c00191ba <cleanupTerminatedTask(ThreadControlBlock*)+0x9c>
c00191aa:	41                   	inc    ecx
c00191ab:	83 f9 10             	cmp    ecx,0x10
c00191ae:	0f 84 95 00 00 00    	je     c0019249 <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c00191b4:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00191ba:	31 d2                	xor    edx,edx
c00191bc:	66 8b 90 24 05 00 00 	mov    dx,WORD PTR [eax+0x524]
c00191c3:	d3 fa                	sar    edx,cl
c00191c5:	83 e2 01             	and    edx,0x1
c00191c8:	74 e0                	je     c00191aa <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00191ca:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00191cd:	89 d5                	mov    ebp,edx
c00191cf:	c1 e5 05             	shl    ebp,0x5
c00191d2:	01 ea                	add    edx,ebp
c00191d4:	01 d0                	add    eax,edx
c00191d6:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00191dc:	83 fd 07             	cmp    ebp,0x7
c00191df:	75 c9                	jne    c00191aa <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00191e1:	05 40 02 00 00       	add    eax,0x240
c00191e6:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c00191e9:	83 fd ff             	cmp    ebp,0xffffffff
c00191ec:	0f 8c 07 01 00 00    	jl     c00192f9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1db>
c00191f2:	0f 84 b4 01 00 00    	je     c00193ac <cleanupTerminatedTask(ThreadControlBlock*)+0x28e>
c00191f8:	85 ed                	test   ebp,ebp
c00191fa:	0f 84 9b 01 00 00    	je     c001939b <cleanupTerminatedTask(ThreadControlBlock*)+0x27d>
c0019200:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0019202:	75 a6                	jne    c00191aa <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0019204:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001920a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001920e:	01 d0                	add    eax,edx
c0019210:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0019214:	83 ec 0c             	sub    esp,0xc
c0019217:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001921d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019220:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0019226:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001922d:	50                   	push   eax
c001922e:	e8 3e fe ff ff       	call   c0019071 <unblockTask(ThreadControlBlock*)>
c0019233:	83 c4 10             	add    esp,0x10
c0019236:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001923a:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001923d:	41                   	inc    ecx
c001923e:	89 f7                	mov    edi,esi
c0019240:	83 f9 10             	cmp    ecx,0x10
c0019243:	0f 85 6b ff ff ff    	jne    c00191b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x96>
c0019249:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001924f:	85 c0                	test   eax,eax
c0019251:	74 5d                	je     c00192b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c0019253:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c0019259:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001925f:	74 4f                	je     c00192b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c0019261:	83 ec 0c             	sub    esp,0xc
c0019264:	68 e8 5b 02 c0       	push   0xc0025be8
c0019269:	e8 72 69 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001926e:	c7 04 24 e8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025be8
c0019275:	89 c7                	mov    edi,eax
c0019277:	e8 6c 69 00 00       	call   c001fbe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001927c:	83 c4 10             	add    esp,0x10
c001927f:	84 c0                	test   al,al
c0019281:	0f 84 e2 00 00 00    	je     c0019369 <cleanupTerminatedTask(ThreadControlBlock*)+0x24b>
c0019287:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001928a:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0019290:	85 d2                	test   edx,edx
c0019292:	74 0f                	je     c00192a3 <cleanupTerminatedTask(ThreadControlBlock*)+0x185>
c0019294:	83 ec 0c             	sub    esp,0xc
c0019297:	8b 02                	mov    eax,DWORD PTR [edx]
c0019299:	52                   	push   edx
c001929a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001929d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00192a0:	83 c4 10             	add    esp,0x10
c00192a3:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c00192ad:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c00192b0:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c00192b6:	85 db                	test   ebx,ebx
c00192b8:	74 16                	je     c00192d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b2>
c00192ba:	83 ec 0c             	sub    esp,0xc
c00192bd:	53                   	push   ebx
c00192be:	e8 97 54 ff ff       	call   c000e75a <VAS::~VAS()>
c00192c3:	5a                   	pop    edx
c00192c4:	59                   	pop    ecx
c00192c5:	6a 10                	push   0x10
c00192c7:	53                   	push   ebx
c00192c8:	e8 22 5e ff ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c00192cd:	83 c4 10             	add    esp,0x10
c00192d0:	83 ec 0c             	sub    esp,0xc
c00192d3:	68 5d 2e 02 c0       	push   0xc0022e5d
c00192d8:	e8 38 5f ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c00192dd:	83 c4 10             	add    esp,0x10
c00192e0:	50                   	push   eax
c00192e1:	50                   	push   eax
c00192e2:	68 3b 07 00 00       	push   0x73b
c00192e7:	68 6b 2e 02 c0       	push   0xc0022e6b
c00192ec:	e8 24 5f ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c00192f1:	83 c4 2c             	add    esp,0x2c
c00192f4:	5b                   	pop    ebx
c00192f5:	5e                   	pop    esi
c00192f6:	5f                   	pop    edi
c00192f7:	5d                   	pop    ebp
c00192f8:	c3                   	ret    
c00192f9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00192fd:	83 ec 0c             	sub    esp,0xc
c0019300:	68 48 31 02 c0       	push   0xc0023148
c0019305:	e8 3a c7 ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c001930a:	83 c4 10             	add    esp,0x10
c001930d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0019310:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019314:	89 f7                	mov    edi,esi
c0019316:	e9 8f fe ff ff       	jmp    c00191aa <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c001931b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019321:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c0019327:	75 1c                	jne    c0019345 <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0019329:	83 ec 0c             	sub    esp,0xc
c001932c:	68 b0 31 02 c0       	push   0xc00231b0
c0019331:	e8 df 5e ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0019336:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001933d:	e8 ad fb ff ff       	call   c0018eef <blockTask(TaskState)>
c0019342:	83 c4 10             	add    esp,0x10
c0019345:	55                   	push   ebp
c0019346:	55                   	push   ebp
c0019347:	56                   	push   esi
c0019348:	68 e8 5b 02 c0       	push   0xc0025be8
c001934d:	e8 60 69 00 00       	call   c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019352:	c7 04 24 e8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025be8
c0019359:	e8 82 68 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001935e:	83 c4 10             	add    esp,0x10
c0019361:	39 f8                	cmp    eax,edi
c0019363:	0f 84 1e ff ff ff    	je     c0019287 <cleanupTerminatedTask(ThreadControlBlock*)+0x169>
c0019369:	83 ec 0c             	sub    esp,0xc
c001936c:	68 e8 5b 02 c0       	push   0xc0025be8
c0019371:	e8 6a 68 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019376:	89 c6                	mov    esi,eax
c0019378:	c7 04 24 e8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025be8
c001937f:	e8 80 68 00 00       	call   c001fc04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0019384:	83 c4 10             	add    esp,0x10
c0019387:	39 f3                	cmp    ebx,esi
c0019389:	74 ba                	je     c0019345 <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c001938b:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001938e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019391:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c0019397:	75 ac                	jne    c0019345 <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0019399:	eb 80                	jmp    c001931b <cleanupTerminatedTask(ThreadControlBlock*)+0x1fd>
c001939b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001939f:	83 ec 0c             	sub    esp,0xc
c00193a2:	68 7c 31 02 c0       	push   0xc002317c
c00193a7:	e9 59 ff ff ff       	jmp    c0019305 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e7>
c00193ac:	8b 36                	mov    esi,DWORD PTR [esi]
c00193ae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00193b2:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c00193b5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00193b8:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c00193be:	01 d7                	add    edi,edx
c00193c0:	89 f8                	mov    eax,edi
c00193c2:	e9 49 fe ff ff       	jmp    c0019210 <cleanupTerminatedTask(ThreadControlBlock*)+0xf2>

c00193c7 <cleanerTaskFunction(void*)>:
c00193c7:	53                   	push   ebx
c00193c8:	83 ec 08             	sub    esp,0x8
c00193cb:	e8 7f f6 ff ff       	call   c0018a4f <unlockScheduler()>
c00193d0:	e8 78 f6 ff ff       	call   c0018a4d <lockScheduler()>
c00193d5:	80 3d ac 5b 02 c0 00 	cmp    BYTE PTR ds:0xc0025bac,0x0
c00193dc:	0f 85 8e 00 00 00    	jne    c0019470 <cleanerTaskFunction(void*)+0xa9>
c00193e2:	83 ec 0c             	sub    esp,0xc
c00193e5:	6a 02                	push   0x2
c00193e7:	e8 c2 fa ff ff       	call   c0018eae <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00193ec:	83 c4 10             	add    esp,0x10
c00193ef:	c6 05 ac 5b 02 c0 00 	mov    BYTE PTR ds:0xc0025bac,0x0
c00193f6:	e8 79 f6 ff ff       	call   c0018a74 <lockStuff()>
c00193fb:	e8 4d f6 ff ff       	call   c0018a4d <lockScheduler()>
c0019400:	83 ec 0c             	sub    esp,0xc
c0019403:	68 d0 5b 02 c0       	push   0xc0025bd0
c0019408:	e8 db 67 00 00       	call   c001fbe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001940d:	83 c4 10             	add    esp,0x10
c0019410:	84 c0                	test   al,al
c0019412:	75 40                	jne    c0019454 <cleanerTaskFunction(void*)+0x8d>
c0019414:	83 ec 0c             	sub    esp,0xc
c0019417:	68 d0 5b 02 c0       	push   0xc0025bd0
c001941c:	e8 bf 67 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019421:	89 c3                	mov    ebx,eax
c0019423:	c7 04 24 d0 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bd0
c001942a:	e8 d5 67 00 00       	call   c001fc04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001942f:	c7 04 24 81 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e81
c0019436:	e8 da 5d ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001943b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001943e:	e8 db fc ff ff       	call   c001911e <cleanupTerminatedTask(ThreadControlBlock*)>
c0019443:	c7 04 24 9a 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e9a
c001944a:	e8 c6 5d ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001944f:	83 c4 10             	add    esp,0x10
c0019452:	eb ac                	jmp    c0019400 <cleanerTaskFunction(void*)+0x39>
c0019454:	e8 f6 f5 ff ff       	call   c0018a4f <unlockScheduler()>
c0019459:	e8 bd f9 ff ff       	call   c0018e1b <unlockStuff()>
c001945e:	e8 ea f5 ff ff       	call   c0018a4d <lockScheduler()>
c0019463:	80 3d ac 5b 02 c0 00 	cmp    BYTE PTR ds:0xc0025bac,0x0
c001946a:	0f 84 72 ff ff ff    	je     c00193e2 <cleanerTaskFunction(void*)+0x1b>
c0019470:	e8 da f5 ff ff       	call   c0018a4f <unlockScheduler()>
c0019475:	e9 75 ff ff ff       	jmp    c00193ef <cleanerTaskFunction(void*)+0x28>

c001947a <terminateTask(int)>:
c001947a:	83 ec 14             	sub    esp,0x14
c001947d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019482:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019485:	83 c0 0c             	add    eax,0xc
c0019488:	50                   	push   eax
c0019489:	68 d8 31 02 c0       	push   0xc00231d8
c001948e:	e8 82 5d ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0019493:	e8 dc f5 ff ff       	call   c0018a74 <lockStuff()>
c0019498:	e8 b0 f5 ff ff       	call   c0018a4d <lockScheduler()>
c001949d:	c7 04 24 ad 2e 02 c0 	mov    DWORD PTR [esp],0xc0022ead
c00194a4:	e8 6c 5d ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c00194a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00194ae:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00194b2:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c00194b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00194ba:	59                   	pop    ecx
c00194bb:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00194be:	5a                   	pop    edx
c00194bf:	50                   	push   eax
c00194c0:	68 d0 5b 02 c0       	push   0xc0025bd0
c00194c5:	e8 e8 67 00 00       	call   c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00194ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00194cf:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00194d6:	c7 04 24 c7 2e 02 c0 	mov    DWORD PTR [esp],0xc0022ec7
c00194dd:	e8 33 5d ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c00194e2:	8b 0d a8 5b 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ba8
c00194e8:	83 c4 10             	add    esp,0x10
c00194eb:	85 c9                	test   ecx,ecx
c00194ed:	74 5b                	je     c001954a <terminateTask(int)+0xd0>
c00194ef:	83 ec 0c             	sub    esp,0xc
c00194f2:	68 e1 2e 02 c0       	push   0xc0022ee1
c00194f7:	e8 19 5d ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c00194fc:	58                   	pop    eax
c00194fd:	8b 15 a8 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025ba8
c0019503:	52                   	push   edx
c0019504:	c6 05 ac 5b 02 c0 01 	mov    BYTE PTR ds:0xc0025bac,0x1
c001950b:	e8 61 fb ff ff       	call   c0019071 <unblockTask(ThreadControlBlock*)>
c0019510:	c7 04 24 fb 2e 02 c0 	mov    DWORD PTR [esp],0xc0022efb
c0019517:	e8 f9 5c ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001951c:	83 c4 10             	add    esp,0x10
c001951f:	e8 2b f5 ff ff       	call   c0018a4f <unlockScheduler()>
c0019524:	e8 f2 f8 ff ff       	call   c0018e1b <unlockStuff()>
c0019529:	83 ec 0c             	sub    esp,0xc
c001952c:	68 33 2f 02 c0       	push   0xc0022f33
c0019531:	e8 df 5c ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0019536:	83 c4 10             	add    esp,0x10
c0019539:	e8 0f f5 ff ff       	call   c0018a4d <lockScheduler()>
c001953e:	e8 53 f8 ff ff       	call   c0018d96 <schedule()>
c0019543:	e8 07 f5 ff ff       	call   c0018a4f <unlockScheduler()>
c0019548:	eb ef                	jmp    c0019539 <terminateTask(int)+0xbf>
c001954a:	83 ec 0c             	sub    esp,0xc
c001954d:	68 15 2f 02 c0       	push   0xc0022f15
c0019552:	e8 be 5c ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0019557:	83 c4 10             	add    esp,0x10
c001955a:	eb c3                	jmp    c001951f <terminateTask(int)+0xa5>

c001955c <Thr::terminateFromIRQ(int)>:
c001955c:	83 ec 18             	sub    esp,0x18
c001955f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019563:	50                   	push   eax
c0019564:	e8 11 ff ff ff       	call   c001947a <terminateTask(int)>
c0019569:	90                   	nop

c001956a <Semaphore::release()>:
c001956a:	83 ec 0c             	sub    esp,0xc
c001956d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019571:	e8 fe f4 ff ff       	call   c0018a74 <lockStuff()>
c0019576:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019579:	85 c0                	test   eax,eax
c001957b:	74 1a                	je     c0019597 <Semaphore::release()+0x2d>
c001957d:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0019580:	83 ec 0c             	sub    esp,0xc
c0019583:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0019586:	50                   	push   eax
c0019587:	e8 e5 fa ff ff       	call   c0019071 <unblockTask(ThreadControlBlock*)>
c001958c:	83 c4 10             	add    esp,0x10
c001958f:	83 c4 0c             	add    esp,0xc
c0019592:	e9 84 f8 ff ff       	jmp    c0018e1b <unlockStuff()>
c0019597:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c001959a:	48                   	dec    eax
c001959b:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c001959e:	83 c4 0c             	add    esp,0xc
c00195a1:	e9 75 f8 ff ff       	jmp    c0018e1b <unlockStuff()>

c00195a6 <__static_initialization_and_destruction_0(int, int)>:
c00195a6:	83 ec 0c             	sub    esp,0xc
c00195a9:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00195ae:	0f 85 88 00 00 00    	jne    c001963c <__static_initialization_and_destruction_0(int, int)+0x96>
c00195b4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00195bc:	75 7e                	jne    c001963c <__static_initialization_and_destruction_0(int, int)+0x96>
c00195be:	83 ec 0c             	sub    esp,0xc
c00195c1:	68 e8 5b 02 c0       	push   0xc0025be8
c00195c6:	e8 cd 68 00 00       	call   c001fe98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00195cb:	83 c4 10             	add    esp,0x10
c00195ce:	83 ec 04             	sub    esp,0x4
c00195d1:	68 bc 3b 02 c0       	push   0xc0023bbc
c00195d6:	68 e8 5b 02 c0       	push   0xc0025be8
c00195db:	68 58 fe 01 c0       	push   0xc001fe58
c00195e0:	e8 86 5a ff ff       	call   c000f06b <__cxa_atexit>
c00195e5:	83 c4 10             	add    esp,0x10
c00195e8:	83 ec 0c             	sub    esp,0xc
c00195eb:	68 dc 5b 02 c0       	push   0xc0025bdc
c00195f0:	e8 a3 68 00 00       	call   c001fe98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00195f5:	83 c4 10             	add    esp,0x10
c00195f8:	83 ec 04             	sub    esp,0x4
c00195fb:	68 bc 3b 02 c0       	push   0xc0023bbc
c0019600:	68 dc 5b 02 c0       	push   0xc0025bdc
c0019605:	68 58 fe 01 c0       	push   0xc001fe58
c001960a:	e8 5c 5a ff ff       	call   c000f06b <__cxa_atexit>
c001960f:	83 c4 10             	add    esp,0x10
c0019612:	83 ec 0c             	sub    esp,0xc
c0019615:	68 d0 5b 02 c0       	push   0xc0025bd0
c001961a:	e8 79 68 00 00       	call   c001fe98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001961f:	83 c4 10             	add    esp,0x10
c0019622:	83 ec 04             	sub    esp,0x4
c0019625:	68 bc 3b 02 c0       	push   0xc0023bbc
c001962a:	68 d0 5b 02 c0       	push   0xc0025bd0
c001962f:	68 58 fe 01 c0       	push   0xc001fe58
c0019634:	e8 32 5a ff ff       	call   c000f06b <__cxa_atexit>
c0019639:	83 c4 10             	add    esp,0x10
c001963c:	90                   	nop
c001963d:	83 c4 0c             	add    esp,0xc
c0019640:	c3                   	ret    

c0019641 <_GLOBAL__sub_I_kernelProcess>:
c0019641:	83 ec 0c             	sub    esp,0xc
c0019644:	83 ec 08             	sub    esp,0x8
c0019647:	68 ff ff 00 00       	push   0xffff
c001964c:	6a 01                	push   0x1
c001964e:	e8 53 ff ff ff       	call   c00195a6 <__static_initialization_and_destruction_0(int, int)>
c0019653:	83 c4 10             	add    esp,0x10
c0019656:	83 c4 0c             	add    esp,0xc
c0019659:	c3                   	ret    

c001965a <Vm::vm8086EntryPoint(void*)>:
c001965a:	83 ec 0c             	sub    esp,0xc
c001965d:	e8 ed f3 ff ff       	call   c0018a4f <unlockScheduler()>
c0019662:	fb                   	sti    
c0019663:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019668:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001966c:	52                   	push   edx
c001966d:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0019671:	52                   	push   edx
c0019672:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0019676:	52                   	push   edx
c0019677:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001967b:	50                   	push   eax
c001967c:	e8 eb 6b fe ff       	call   c000026c <goToVM86>
c0019681:	83 c4 1c             	add    esp,0x1c
c0019684:	c3                   	ret    

c0019685 <Vm::inbv(unsigned short)>:
c0019685:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019689:	ec                   	in     al,dx
c001968a:	c3                   	ret    

c001968b <Vm::outbv(unsigned short, unsigned char)>:
c001968b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001968f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019693:	ee                   	out    dx,al
c0019694:	c3                   	ret    

c0019695 <Vm::realToLinear(unsigned short, unsigned short)>:
c0019695:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001969a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001969f:	c1 e0 04             	shl    eax,0x4
c00196a2:	01 d0                	add    eax,edx
c00196a4:	c3                   	ret    

c00196a5 <Vm::getSegment(unsigned int)>:
c00196a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196a9:	c1 e8 10             	shr    eax,0x10
c00196ac:	c3                   	ret    

c00196ad <Vm::getOffset(unsigned int)>:
c00196ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196b1:	c3                   	ret    

c00196b2 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00196b2:	55                   	push   ebp
c00196b3:	57                   	push   edi
c00196b4:	56                   	push   esi
c00196b5:	53                   	push   ebx
c00196b6:	83 ec 2c             	sub    esp,0x2c
c00196b9:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00196bd:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00196c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00196c5:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00196c9:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00196cd:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00196d1:	e8 77 f3 ff ff       	call   c0018a4d <lockScheduler()>
c00196d6:	68 80 00 00 00       	push   0x80
c00196db:	6a 00                	push   0x0
c00196dd:	68 5a 96 01 c0       	push   0xc001965a
c00196e2:	55                   	push   ebp
c00196e3:	e8 9a f4 ff ff       	call   c0018b82 <Process::createThread(void (*)(void*), void*, int)>
c00196e8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00196ec:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c00196f0:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c00196f4:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c00196f8:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c00196fc:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0019700:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019707:	e8 d4 59 ff ff       	call   c000f0e0 <operator new(unsigned long)>
c001970c:	83 c4 0c             	add    esp,0xc
c001970f:	55                   	push   ebp
c0019710:	89 c3                	mov    ebx,eax
c0019712:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019716:	50                   	push   eax
c0019717:	e8 30 60 ff ff       	call   c000f74c <File::File(char const*, Process*)>
c001971c:	83 c4 0c             	add    esp,0xc
c001971f:	8d 44 24 17          	lea    eax,[esp+0x17]
c0019723:	50                   	push   eax
c0019724:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019728:	50                   	push   eax
c0019729:	53                   	push   ebx
c001972a:	e8 2d 63 ff ff       	call   c000fa5c <File::stat(unsigned long long*, bool*)>
c001972f:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c0019733:	83 c4 10             	add    esp,0x10
c0019736:	84 d2                	test   dl,dl
c0019738:	74 1c                	je     c0019756 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c001973a:	83 ec 0c             	sub    esp,0xc
c001973d:	68 f7 31 02 c0       	push   0xc00231f7
c0019742:	e8 fd c2 ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c0019747:	e8 03 f3 ff ff       	call   c0018a4f <unlockScheduler()>
c001974c:	83 c4 10             	add    esp,0x10
c001974f:	31 d2                	xor    edx,edx
c0019751:	e9 81 00 00 00       	jmp    c00197d7 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0019756:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001975a:	51                   	push   ecx
c001975b:	51                   	push   ecx
c001975c:	6a 01                	push   0x1
c001975e:	53                   	push   ebx
c001975f:	e8 4c 60 ff ff       	call   c000f7b0 <File::open(FileOpenMode)>
c0019764:	83 c4 10             	add    esp,0x10
c0019767:	85 c0                	test   eax,eax
c0019769:	74 1b                	je     c0019786 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c001976b:	83 ec 0c             	sub    esp,0xc
c001976e:	68 10 32 02 c0       	push   0xc0023210
c0019773:	e8 cc c2 ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c0019778:	e8 d2 f2 ff ff       	call   c0018a4f <unlockScheduler()>
c001977d:	83 c4 10             	add    esp,0x10
c0019780:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0019784:	eb 51                	jmp    c00197d7 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0019786:	83 ec 0c             	sub    esp,0xc
c0019789:	0f b7 ff             	movzx  edi,di
c001978c:	6a 07                	push   0x7
c001978e:	68 00 01 00 00       	push   0x100
c0019793:	6a 00                	push   0x0
c0019795:	6a 00                	push   0x0
c0019797:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c001979d:	e8 16 54 ff ff       	call   c000ebb8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00197a2:	83 c4 18             	add    esp,0x18
c00197a5:	0f b7 f6             	movzx  esi,si
c00197a8:	57                   	push   edi
c00197a9:	56                   	push   esi
c00197aa:	e8 e6 fe ff ff       	call   c0019695 <Vm::realToLinear(unsigned short, unsigned short)>
c00197af:	5a                   	pop    edx
c00197b0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00197b2:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00197b6:	51                   	push   ecx
c00197b7:	50                   	push   eax
c00197b8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00197bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00197c0:	53                   	push   ebx
c00197c1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00197c4:	83 c4 14             	add    esp,0x14
c00197c7:	53                   	push   ebx
c00197c8:	e8 41 60 ff ff       	call   c000f80e <File::close()>
c00197cd:	e8 7d f2 ff ff       	call   c0018a4f <unlockScheduler()>
c00197d2:	83 c4 10             	add    esp,0x10
c00197d5:	b2 01                	mov    dl,0x1
c00197d7:	83 c4 2c             	add    esp,0x2c
c00197da:	88 d0                	mov    al,dl
c00197dc:	5b                   	pop    ebx
c00197dd:	5e                   	pop    esi
c00197de:	5f                   	pop    edi
c00197df:	5d                   	pop    ebp
c00197e0:	c3                   	ret    

c00197e1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00197e1:	57                   	push   edi
c00197e2:	56                   	push   esi
c00197e3:	53                   	push   ebx
c00197e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00197ec:	83 e8 06             	sub    eax,0x6
c00197ef:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00197f3:	0f b7 c0             	movzx  eax,ax
c00197f6:	50                   	push   eax
c00197f7:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00197fc:	50                   	push   eax
c00197fd:	e8 93 fe ff ff       	call   c0019695 <Vm::realToLinear(unsigned short, unsigned short)>
c0019802:	5a                   	pop    edx
c0019803:	5e                   	pop    esi
c0019804:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0019807:	8d 56 fa             	lea    edx,[esi-0x6]
c001980a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0019810:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0019813:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0019816:	83 c2 02             	add    edx,0x2
c0019819:	66 89 10             	mov    WORD PTR [eax],dx
c001981c:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001981f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0019823:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0019826:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001982a:	89 d6                	mov    esi,edx
c001982c:	66 81 e6 ff fd       	and    si,0xfdff
c0019831:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0019837:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001983b:	74 07                	je     c0019844 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001983d:	89 d6                	mov    esi,edx
c001983f:	66 81 ce 00 02       	or     si,0x200
c0019844:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0019848:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001984d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0019851:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019859:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001985c:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0019864:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0019867:	5b                   	pop    ebx
c0019868:	5e                   	pop    esi
c0019869:	5f                   	pop    edi
c001986a:	c3                   	ret    

c001986b <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001986b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019870:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019875:	c1 e0 04             	shl    eax,0x4
c0019878:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001987b:	c3                   	ret    

c001987c <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001987c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019881:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019886:	c1 e0 04             	shl    eax,0x4
c0019889:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001988d:	c3                   	ret    

c001988e <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001988e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019893:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019898:	c1 e0 04             	shl    eax,0x4
c001989b:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001989e:	c3                   	ret    

c001989f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001989f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00198a4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00198a9:	c1 e0 04             	shl    eax,0x4
c00198ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00198b0:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00198b3:	c3                   	ret    

c00198b4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00198b4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00198b9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00198be:	c1 e0 04             	shl    eax,0x4
c00198c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00198c5:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00198c9:	c3                   	ret    

c00198ca <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00198ca:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00198cf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00198d4:	c1 e0 04             	shl    eax,0x4
c00198d7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00198db:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00198de:	c3                   	ret    

c00198df <Vm::faultHandler(regs*)>:
c00198df:	55                   	push   ebp
c00198e0:	57                   	push   edi
c00198e1:	56                   	push   esi
c00198e2:	53                   	push   ebx
c00198e3:	83 ec 1c             	sub    esp,0x1c
c00198e6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00198ea:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00198ee:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00198f1:	52                   	push   edx
c00198f2:	0f b7 f0             	movzx  esi,ax
c00198f5:	0f b7 c0             	movzx  eax,ax
c00198f8:	50                   	push   eax
c00198f9:	e8 97 fd ff ff       	call   c0019695 <Vm::realToLinear(unsigned short, unsigned short)>
c00198fe:	5a                   	pop    edx
c00198ff:	89 c7                	mov    edi,eax
c0019901:	59                   	pop    ecx
c0019902:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019905:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019909:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001990c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019911:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019915:	0f b7 c5             	movzx  eax,bp
c0019918:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001991c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0019920:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019924:	e8 6c fd ff ff       	call   c0019695 <Vm::realToLinear(unsigned short, unsigned short)>
c0019929:	5a                   	pop    edx
c001992a:	59                   	pop    ecx
c001992b:	b1 06                	mov    cl,0x6
c001992d:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0019932:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0019937:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c001993a:	80 fa 9d             	cmp    dl,0x9d
c001993d:	0f 84 1d 02 00 00    	je     c0019b60 <Vm::faultHandler(regs*)+0x281>
c0019943:	0f 87 8e 00 00 00    	ja     c00199d7 <Vm::faultHandler(regs*)+0xf8>
c0019949:	80 fa 66             	cmp    dl,0x66
c001994c:	0f 84 89 01 00 00    	je     c0019adb <Vm::faultHandler(regs*)+0x1fc>
c0019952:	77 44                	ja     c0019998 <Vm::faultHandler(regs*)+0xb9>
c0019954:	80 fa 36             	cmp    dl,0x36
c0019957:	0f 84 74 01 00 00    	je     c0019ad1 <Vm::faultHandler(regs*)+0x1f2>
c001995d:	77 1a                	ja     c0019979 <Vm::faultHandler(regs*)+0x9a>
c001995f:	80 fa 26             	cmp    dl,0x26
c0019962:	0f 84 4b 01 00 00    	je     c0019ab3 <Vm::faultHandler(regs*)+0x1d4>
c0019968:	80 fa 2e             	cmp    dl,0x2e
c001996b:	0f 85 4a 05 00 00    	jne    c0019ebb <Vm::faultHandler(regs*)+0x5dc>
c0019971:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019974:	31 c9                	xor    ecx,ecx
c0019976:	47                   	inc    edi
c0019977:	eb be                	jmp    c0019937 <Vm::faultHandler(regs*)+0x58>
c0019979:	80 fa 64             	cmp    dl,0x64
c001997c:	0f 84 3b 01 00 00    	je     c0019abd <Vm::faultHandler(regs*)+0x1de>
c0019982:	0f 87 3f 01 00 00    	ja     c0019ac7 <Vm::faultHandler(regs*)+0x1e8>
c0019988:	80 fa 3e             	cmp    dl,0x3e
c001998b:	0f 85 2a 05 00 00    	jne    c0019ebb <Vm::faultHandler(regs*)+0x5dc>
c0019991:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019994:	b1 01                	mov    cl,0x1
c0019996:	eb de                	jmp    c0019976 <Vm::faultHandler(regs*)+0x97>
c0019998:	80 fa 6d             	cmp    dl,0x6d
c001999b:	0f 84 bf 02 00 00    	je     c0019c60 <Vm::faultHandler(regs*)+0x381>
c00199a1:	77 17                	ja     c00199ba <Vm::faultHandler(regs*)+0xdb>
c00199a3:	80 fa 67             	cmp    dl,0x67
c00199a6:	0f 84 3c 01 00 00    	je     c0019ae8 <Vm::faultHandler(regs*)+0x209>
c00199ac:	80 fa 6c             	cmp    dl,0x6c
c00199af:	0f 84 5d 02 00 00    	je     c0019c12 <Vm::faultHandler(regs*)+0x333>
c00199b5:	e9 01 05 00 00       	jmp    c0019ebb <Vm::faultHandler(regs*)+0x5dc>
c00199ba:	80 fa 6f             	cmp    dl,0x6f
c00199bd:	0f 84 8b 03 00 00    	je     c0019d4e <Vm::faultHandler(regs*)+0x46f>
c00199c3:	0f 82 0f 03 00 00    	jb     c0019cd8 <Vm::faultHandler(regs*)+0x3f9>
c00199c9:	80 fa 9c             	cmp    dl,0x9c
c00199cc:	0f 84 23 01 00 00    	je     c0019af5 <Vm::faultHandler(regs*)+0x216>
c00199d2:	e9 e4 04 00 00       	jmp    c0019ebb <Vm::faultHandler(regs*)+0x5dc>
c00199d7:	80 fa ec             	cmp    dl,0xec
c00199da:	0f 84 7f 04 00 00    	je     c0019e5f <Vm::faultHandler(regs*)+0x580>
c00199e0:	77 7b                	ja     c0019a5d <Vm::faultHandler(regs*)+0x17e>
c00199e2:	80 fa e4             	cmp    dl,0xe4
c00199e5:	0f 84 fe 03 00 00    	je     c0019de9 <Vm::faultHandler(regs*)+0x50a>
c00199eb:	77 53                	ja     c0019a40 <Vm::faultHandler(regs*)+0x161>
c00199ed:	80 fa cd             	cmp    dl,0xcd
c00199f0:	0f 84 cd 01 00 00    	je     c0019bc3 <Vm::faultHandler(regs*)+0x2e4>
c00199f6:	80 fa cf             	cmp    dl,0xcf
c00199f9:	0f 85 bc 04 00 00    	jne    c0019ebb <Vm::faultHandler(regs*)+0x5dc>
c00199ff:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019a02:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0019a05:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0019a09:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0019a0c:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0019a10:	81 ca 00 02 02 00    	or     edx,0x20200
c0019a16:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019a19:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0019a1d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019a23:	66 c1 e8 09          	shr    ax,0x9
c0019a27:	83 e0 01             	and    eax,0x1
c0019a2a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019a2d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019a30:	83 c0 06             	add    eax,0x6
c0019a33:	25 ff ff 00 00       	and    eax,0xffff
c0019a38:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019a3b:	e9 77 04 00 00       	jmp    c0019eb7 <Vm::faultHandler(regs*)+0x5d8>
c0019a40:	80 fa e6             	cmp    dl,0xe6
c0019a43:	0f 84 ea 03 00 00    	je     c0019e33 <Vm::faultHandler(regs*)+0x554>
c0019a49:	0f 82 b6 03 00 00    	jb     c0019e05 <Vm::faultHandler(regs*)+0x526>
c0019a4f:	80 fa e7             	cmp    dl,0xe7
c0019a52:	0f 84 f2 03 00 00    	je     c0019e4a <Vm::faultHandler(regs*)+0x56b>
c0019a58:	e9 5e 04 00 00       	jmp    c0019ebb <Vm::faultHandler(regs*)+0x5dc>
c0019a5d:	80 fa ef             	cmp    dl,0xef
c0019a60:	0f 84 3c 04 00 00    	je     c0019ea2 <Vm::faultHandler(regs*)+0x5c3>
c0019a66:	77 28                	ja     c0019a90 <Vm::faultHandler(regs*)+0x1b1>
c0019a68:	80 fa ed             	cmp    dl,0xed
c0019a6b:	0f 84 0a 04 00 00    	je     c0019e7b <Vm::faultHandler(regs*)+0x59c>
c0019a71:	80 fa ee             	cmp    dl,0xee
c0019a74:	0f 85 41 04 00 00    	jne    c0019ebb <Vm::faultHandler(regs*)+0x5dc>
c0019a7a:	50                   	push   eax
c0019a7b:	50                   	push   eax
c0019a7c:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019a80:	50                   	push   eax
c0019a81:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019a85:	50                   	push   eax
c0019a86:	e8 00 fc ff ff       	call   c001968b <Vm::outbv(unsigned short, unsigned char)>
c0019a8b:	e9 0a 04 00 00       	jmp    c0019e9a <Vm::faultHandler(regs*)+0x5bb>
c0019a90:	80 fa fa             	cmp    dl,0xfa
c0019a93:	0f 84 5d 01 00 00    	je     c0019bf6 <Vm::faultHandler(regs*)+0x317>
c0019a99:	80 fa fb             	cmp    dl,0xfb
c0019a9c:	0f 84 62 01 00 00    	je     c0019c04 <Vm::faultHandler(regs*)+0x325>
c0019aa2:	80 fa f3             	cmp    dl,0xf3
c0019aa5:	0f 85 10 04 00 00    	jne    c0019ebb <Vm::faultHandler(regs*)+0x5dc>
c0019aab:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019aae:	e9 c3 fe ff ff       	jmp    c0019976 <Vm::faultHandler(regs*)+0x97>
c0019ab3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ab6:	b1 02                	mov    cl,0x2
c0019ab8:	e9 b9 fe ff ff       	jmp    c0019976 <Vm::faultHandler(regs*)+0x97>
c0019abd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ac0:	b1 03                	mov    cl,0x3
c0019ac2:	e9 af fe ff ff       	jmp    c0019976 <Vm::faultHandler(regs*)+0x97>
c0019ac7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019aca:	b1 04                	mov    cl,0x4
c0019acc:	e9 a5 fe ff ff       	jmp    c0019976 <Vm::faultHandler(regs*)+0x97>
c0019ad1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ad4:	b1 05                	mov    cl,0x5
c0019ad6:	e9 9b fe ff ff       	jmp    c0019976 <Vm::faultHandler(regs*)+0x97>
c0019adb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ade:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019ae3:	e9 8e fe ff ff       	jmp    c0019976 <Vm::faultHandler(regs*)+0x97>
c0019ae8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019aeb:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0019af0:	e9 81 fe ff ff       	jmp    c0019976 <Vm::faultHandler(regs*)+0x97>
c0019af5:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019af8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019afc:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019b01:	74 30                	je     c0019b33 <Vm::faultHandler(regs*)+0x254>
c0019b03:	83 e9 04             	sub    ecx,0x4
c0019b06:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019b0c:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019b12:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019b15:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019b18:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019b1e:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019b22:	0f 84 8c 03 00 00    	je     c0019eb4 <Vm::faultHandler(regs*)+0x5d5>
c0019b28:	80 ce 02             	or     dh,0x2
c0019b2b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019b2e:	e9 81 03 00 00       	jmp    c0019eb4 <Vm::faultHandler(regs*)+0x5d5>
c0019b33:	83 e9 02             	sub    ecx,0x2
c0019b36:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019b3c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019b3f:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019b43:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019b49:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019b4d:	74 05                	je     c0019b54 <Vm::faultHandler(regs*)+0x275>
c0019b4f:	80 ce 02             	or     dh,0x2
c0019b52:	eb 03                	jmp    c0019b57 <Vm::faultHandler(regs*)+0x278>
c0019b54:	80 e6 fd             	and    dh,0xfd
c0019b57:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019b5b:	e9 54 03 00 00       	jmp    c0019eb4 <Vm::faultHandler(regs*)+0x5d5>
c0019b60:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019b65:	74 2a                	je     c0019b91 <Vm::faultHandler(regs*)+0x2b2>
c0019b67:	8b 10                	mov    edx,DWORD PTR [eax]
c0019b69:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019b6f:	81 ca 00 02 02 00    	or     edx,0x20200
c0019b75:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019b78:	8b 00                	mov    eax,DWORD PTR [eax]
c0019b7a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019b80:	c1 e8 09             	shr    eax,0x9
c0019b83:	83 e0 01             	and    eax,0x1
c0019b86:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019b89:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019b8c:	83 c0 04             	add    eax,0x4
c0019b8f:	eb 25                	jmp    c0019bb6 <Vm::faultHandler(regs*)+0x2d7>
c0019b91:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019b94:	81 ca 00 02 02 00    	or     edx,0x20200
c0019b9a:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019ba0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019ba6:	66 c1 e8 09          	shr    ax,0x9
c0019baa:	83 e0 01             	and    eax,0x1
c0019bad:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019bb0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019bb3:	83 c0 02             	add    eax,0x2
c0019bb6:	25 ff ff 00 00       	and    eax,0xffff
c0019bbb:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019bbe:	e9 f1 02 00 00       	jmp    c0019eb4 <Vm::faultHandler(regs*)+0x5d5>
c0019bc3:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019bc7:	3c ff                	cmp    al,0xff
c0019bc9:	75 10                	jne    c0019bdb <Vm::faultHandler(regs*)+0x2fc>
c0019bcb:	83 ec 0c             	sub    esp,0xc
c0019bce:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0019bd1:	e8 86 f9 ff ff       	call   c001955c <Thr::terminateFromIRQ(int)>
c0019bd6:	e9 c2 02 00 00       	jmp    c0019e9d <Vm::faultHandler(regs*)+0x5be>
c0019bdb:	83 ec 0c             	sub    esp,0xc
c0019bde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019be2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019be6:	57                   	push   edi
c0019be7:	50                   	push   eax
c0019be8:	53                   	push   ebx
c0019be9:	e8 f3 fb ff ff       	call   c00197e1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0019bee:	83 c4 20             	add    esp,0x20
c0019bf1:	e9 c1 02 00 00       	jmp    c0019eb7 <Vm::faultHandler(regs*)+0x5d8>
c0019bf6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019bfb:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0019bff:	e9 b0 02 00 00       	jmp    c0019eb4 <Vm::faultHandler(regs*)+0x5d5>
c0019c04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019c09:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0019c0d:	e9 a2 02 00 00       	jmp    c0019eb4 <Vm::faultHandler(regs*)+0x5d5>
c0019c12:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019c17:	74 0d                	je     c0019c26 <Vm::faultHandler(regs*)+0x347>
c0019c19:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0019c20:	0f 87 e9 02 00 00    	ja     c0019f0f <Vm::faultHandler(regs*)+0x630>
c0019c26:	83 ec 0c             	sub    esp,0xc
c0019c29:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0019c2c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019c30:	50                   	push   eax
c0019c31:	e8 4f fa ff ff       	call   c0019685 <Vm::inbv(unsigned short)>
c0019c36:	83 c4 0c             	add    esp,0xc
c0019c39:	0f b6 c0             	movzx  eax,al
c0019c3c:	50                   	push   eax
c0019c3d:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0019c41:	0f b7 c9             	movzx  ecx,cx
c0019c44:	50                   	push   eax
c0019c45:	51                   	push   ecx
c0019c46:	e8 54 fc ff ff       	call   c001989f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019c4b:	83 c4 10             	add    esp,0x10
c0019c4e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019c51:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019c55:	74 03                	je     c0019c5a <Vm::faultHandler(regs*)+0x37b>
c0019c57:	48                   	dec    eax
c0019c58:	eb 01                	jmp    c0019c5b <Vm::faultHandler(regs*)+0x37c>
c0019c5a:	40                   	inc    eax
c0019c5b:	0f b7 c0             	movzx  eax,ax
c0019c5e:	eb 70                	jmp    c0019cd0 <Vm::faultHandler(regs*)+0x3f1>
c0019c60:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019c63:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0019c66:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019c6b:	74 0c                	je     c0019c79 <Vm::faultHandler(regs*)+0x39a>
c0019c6d:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019c73:	0f 87 96 02 00 00    	ja     c0019f0f <Vm::faultHandler(regs*)+0x630>
c0019c79:	0f b7 c9             	movzx  ecx,cx
c0019c7c:	0f b7 f6             	movzx  esi,si
c0019c7f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019c82:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c87:	74 20                	je     c0019ca9 <Vm::faultHandler(regs*)+0x3ca>
c0019c89:	ed                   	in     eax,dx
c0019c8a:	55                   	push   ebp
c0019c8b:	50                   	push   eax
c0019c8c:	51                   	push   ecx
c0019c8d:	56                   	push   esi
c0019c8e:	e8 37 fc ff ff       	call   c00198ca <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019c93:	83 c4 10             	add    esp,0x10
c0019c96:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019c99:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019c9d:	74 05                	je     c0019ca4 <Vm::faultHandler(regs*)+0x3c5>
c0019c9f:	83 e8 04             	sub    eax,0x4
c0019ca2:	eb 27                	jmp    c0019ccb <Vm::faultHandler(regs*)+0x3ec>
c0019ca4:	83 c0 04             	add    eax,0x4
c0019ca7:	eb 22                	jmp    c0019ccb <Vm::faultHandler(regs*)+0x3ec>
c0019ca9:	66 ed                	in     ax,dx
c0019cab:	0f b7 c0             	movzx  eax,ax
c0019cae:	57                   	push   edi
c0019caf:	50                   	push   eax
c0019cb0:	51                   	push   ecx
c0019cb1:	56                   	push   esi
c0019cb2:	e8 fd fb ff ff       	call   c00198b4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019cb7:	83 c4 10             	add    esp,0x10
c0019cba:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019cbd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019cc1:	74 05                	je     c0019cc8 <Vm::faultHandler(regs*)+0x3e9>
c0019cc3:	83 e8 02             	sub    eax,0x2
c0019cc6:	eb 03                	jmp    c0019ccb <Vm::faultHandler(regs*)+0x3ec>
c0019cc8:	83 c0 02             	add    eax,0x2
c0019ccb:	25 ff ff 00 00       	and    eax,0xffff
c0019cd0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019cd3:	e9 dc 01 00 00       	jmp    c0019eb4 <Vm::faultHandler(regs*)+0x5d5>
c0019cd8:	49                   	dec    ecx
c0019cd9:	80 f9 05             	cmp    cl,0x5
c0019cdc:	77 24                	ja     c0019d02 <Vm::faultHandler(regs*)+0x423>
c0019cde:	0f b6 c9             	movzx  ecx,cl
c0019ce1:	ff 24 8d 58 32 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdcda8]
c0019ce8:	0f b7 f5             	movzx  esi,bp
c0019ceb:	eb 15                	jmp    c0019d02 <Vm::faultHandler(regs*)+0x423>
c0019ced:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0019cf1:	eb 0f                	jmp    c0019d02 <Vm::faultHandler(regs*)+0x423>
c0019cf3:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0019cf7:	eb 09                	jmp    c0019d02 <Vm::faultHandler(regs*)+0x423>
c0019cf9:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0019cfd:	eb 03                	jmp    c0019d02 <Vm::faultHandler(regs*)+0x423>
c0019cff:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0019d02:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019d05:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019d0a:	74 0b                	je     c0019d17 <Vm::faultHandler(regs*)+0x438>
c0019d0c:	3d ff ff 00 00       	cmp    eax,0xffff
c0019d11:	0f 87 f8 01 00 00    	ja     c0019f0f <Vm::faultHandler(regs*)+0x630>
c0019d17:	52                   	push   edx
c0019d18:	52                   	push   edx
c0019d19:	0f b7 c0             	movzx  eax,ax
c0019d1c:	50                   	push   eax
c0019d1d:	56                   	push   esi
c0019d1e:	e8 48 fb ff ff       	call   c001986b <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019d23:	59                   	pop    ecx
c0019d24:	5e                   	pop    esi
c0019d25:	0f b6 c0             	movzx  eax,al
c0019d28:	50                   	push   eax
c0019d29:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019d2d:	50                   	push   eax
c0019d2e:	e8 58 f9 ff ff       	call   c001968b <Vm::outbv(unsigned short, unsigned char)>
c0019d33:	83 c4 10             	add    esp,0x10
c0019d36:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019d39:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019d3d:	74 03                	je     c0019d42 <Vm::faultHandler(regs*)+0x463>
c0019d3f:	48                   	dec    eax
c0019d40:	eb 01                	jmp    c0019d43 <Vm::faultHandler(regs*)+0x464>
c0019d42:	40                   	inc    eax
c0019d43:	0f b7 c0             	movzx  eax,ax
c0019d46:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019d49:	e9 66 01 00 00       	jmp    c0019eb4 <Vm::faultHandler(regs*)+0x5d5>
c0019d4e:	49                   	dec    ecx
c0019d4f:	80 f9 05             	cmp    cl,0x5
c0019d52:	77 1f                	ja     c0019d73 <Vm::faultHandler(regs*)+0x494>
c0019d54:	0f b6 c9             	movzx  ecx,cl
c0019d57:	ff 24 8d 70 32 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdcd90]
c0019d5e:	89 ee                	mov    esi,ebp
c0019d60:	eb 11                	jmp    c0019d73 <Vm::faultHandler(regs*)+0x494>
c0019d62:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0019d65:	eb 0c                	jmp    c0019d73 <Vm::faultHandler(regs*)+0x494>
c0019d67:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019d6a:	eb 07                	jmp    c0019d73 <Vm::faultHandler(regs*)+0x494>
c0019d6c:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0019d6f:	eb 02                	jmp    c0019d73 <Vm::faultHandler(regs*)+0x494>
c0019d71:	8b 33                	mov    esi,DWORD PTR [ebx]
c0019d73:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0019d76:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019d7b:	74 0c                	je     c0019d89 <Vm::faultHandler(regs*)+0x4aa>
c0019d7d:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019d83:	0f 87 86 01 00 00    	ja     c0019f0f <Vm::faultHandler(regs*)+0x630>
c0019d89:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0019d8c:	0f b7 d6             	movzx  edx,si
c0019d8f:	81 e7 00 04 00 00    	and    edi,0x400
c0019d95:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019d98:	0f b7 c1             	movzx  eax,cx
c0019d9b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019da0:	74 1d                	je     c0019dbf <Vm::faultHandler(regs*)+0x4e0>
c0019da2:	55                   	push   ebp
c0019da3:	55                   	push   ebp
c0019da4:	50                   	push   eax
c0019da5:	52                   	push   edx
c0019da6:	e8 e3 fa ff ff       	call   c001988e <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019dab:	83 c4 10             	add    esp,0x10
c0019dae:	89 f2                	mov    edx,esi
c0019db0:	ef                   	out    dx,eax
c0019db1:	85 ff                	test   edi,edi
c0019db3:	74 05                	je     c0019dba <Vm::faultHandler(regs*)+0x4db>
c0019db5:	83 e9 04             	sub    ecx,0x4
c0019db8:	eb 21                	jmp    c0019ddb <Vm::faultHandler(regs*)+0x4fc>
c0019dba:	83 c1 04             	add    ecx,0x4
c0019dbd:	eb 1c                	jmp    c0019ddb <Vm::faultHandler(regs*)+0x4fc>
c0019dbf:	55                   	push   ebp
c0019dc0:	55                   	push   ebp
c0019dc1:	50                   	push   eax
c0019dc2:	52                   	push   edx
c0019dc3:	e8 b4 fa ff ff       	call   c001987c <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019dc8:	83 c4 10             	add    esp,0x10
c0019dcb:	89 f2                	mov    edx,esi
c0019dcd:	66 ef                	out    dx,ax
c0019dcf:	85 ff                	test   edi,edi
c0019dd1:	74 05                	je     c0019dd8 <Vm::faultHandler(regs*)+0x4f9>
c0019dd3:	83 e9 02             	sub    ecx,0x2
c0019dd6:	eb 03                	jmp    c0019ddb <Vm::faultHandler(regs*)+0x4fc>
c0019dd8:	83 c1 02             	add    ecx,0x2
c0019ddb:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019de1:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0019de4:	e9 cb 00 00 00       	jmp    c0019eb4 <Vm::faultHandler(regs*)+0x5d5>
c0019de9:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019df0:	83 ec 0c             	sub    esp,0xc
c0019df3:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019df7:	50                   	push   eax
c0019df8:	e8 88 f8 ff ff       	call   c0019685 <Vm::inbv(unsigned short)>
c0019dfd:	0f b6 c0             	movzx  eax,al
c0019e00:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019e03:	eb 3f                	jmp    c0019e44 <Vm::faultHandler(regs*)+0x565>
c0019e05:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019e0a:	74 07                	je     c0019e13 <Vm::faultHandler(regs*)+0x534>
c0019e0c:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019e10:	ed                   	in     eax,dx
c0019e11:	eb 14                	jmp    c0019e27 <Vm::faultHandler(regs*)+0x548>
c0019e13:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0019e16:	66 31 c9             	xor    cx,cx
c0019e19:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0019e1c:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019e20:	66 ed                	in     ax,dx
c0019e22:	0f b7 c0             	movzx  eax,ax
c0019e25:	09 c8                	or     eax,ecx
c0019e27:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019e2a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019e2e:	e9 84 00 00 00       	jmp    c0019eb7 <Vm::faultHandler(regs*)+0x5d8>
c0019e33:	52                   	push   edx
c0019e34:	52                   	push   edx
c0019e35:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019e39:	50                   	push   eax
c0019e3a:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019e3e:	50                   	push   eax
c0019e3f:	e8 47 f8 ff ff       	call   c001968b <Vm::outbv(unsigned short, unsigned char)>
c0019e44:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019e48:	eb 53                	jmp    c0019e9d <Vm::faultHandler(regs*)+0x5be>
c0019e4a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019e4d:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019e51:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019e56:	74 03                	je     c0019e5b <Vm::faultHandler(regs*)+0x57c>
c0019e58:	ef                   	out    dx,eax
c0019e59:	eb cf                	jmp    c0019e2a <Vm::faultHandler(regs*)+0x54b>
c0019e5b:	66 ef                	out    dx,ax
c0019e5d:	eb cb                	jmp    c0019e2a <Vm::faultHandler(regs*)+0x54b>
c0019e5f:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019e66:	83 ec 0c             	sub    esp,0xc
c0019e69:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019e6d:	50                   	push   eax
c0019e6e:	e8 12 f8 ff ff       	call   c0019685 <Vm::inbv(unsigned short)>
c0019e73:	0f b6 c0             	movzx  eax,al
c0019e76:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019e79:	eb 1f                	jmp    c0019e9a <Vm::faultHandler(regs*)+0x5bb>
c0019e7b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019e7e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019e83:	74 03                	je     c0019e88 <Vm::faultHandler(regs*)+0x5a9>
c0019e85:	ed                   	in     eax,dx
c0019e86:	eb 0d                	jmp    c0019e95 <Vm::faultHandler(regs*)+0x5b6>
c0019e88:	66 ed                	in     ax,dx
c0019e8a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019e8d:	66 31 d2             	xor    dx,dx
c0019e90:	0f b7 c0             	movzx  eax,ax
c0019e93:	09 d0                	or     eax,edx
c0019e95:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019e98:	eb 1a                	jmp    c0019eb4 <Vm::faultHandler(regs*)+0x5d5>
c0019e9a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019e9d:	83 c4 10             	add    esp,0x10
c0019ea0:	eb 15                	jmp    c0019eb7 <Vm::faultHandler(regs*)+0x5d8>
c0019ea2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019ea5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019ea8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019ead:	74 03                	je     c0019eb2 <Vm::faultHandler(regs*)+0x5d3>
c0019eaf:	ef                   	out    dx,eax
c0019eb0:	eb 02                	jmp    c0019eb4 <Vm::faultHandler(regs*)+0x5d5>
c0019eb2:	66 ef                	out    dx,ax
c0019eb4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019eb7:	b0 01                	mov    al,0x1
c0019eb9:	eb 56                	jmp    c0019f11 <Vm::faultHandler(regs*)+0x632>
c0019ebb:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0019ebf:	50                   	push   eax
c0019ec0:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0019ec4:	50                   	push   eax
c0019ec5:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0019ec9:	50                   	push   eax
c0019eca:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0019ece:	50                   	push   eax
c0019ecf:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019ed3:	50                   	push   eax
c0019ed4:	52                   	push   edx
c0019ed5:	52                   	push   edx
c0019ed6:	68 29 32 02 c0       	push   0xc0023229
c0019edb:	e8 35 53 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c0019ee0:	83 c4 20             	add    esp,0x20
c0019ee3:	83 ec 0c             	sub    esp,0xc
c0019ee6:	6a 60                	push   0x60
c0019ee8:	e8 98 f7 ff ff       	call   c0019685 <Vm::inbv(unsigned short)>
c0019eed:	83 c4 10             	add    esp,0x10
c0019ef0:	3c 1c                	cmp    al,0x1c
c0019ef2:	74 04                	je     c0019ef8 <Vm::faultHandler(regs*)+0x619>
c0019ef4:	3c 5a                	cmp    al,0x5a
c0019ef6:	75 eb                	jne    c0019ee3 <Vm::faultHandler(regs*)+0x604>
c0019ef8:	3c 1c                	cmp    al,0x1c
c0019efa:	74 04                	je     c0019f00 <Vm::faultHandler(regs*)+0x621>
c0019efc:	3c 5a                	cmp    al,0x5a
c0019efe:	75 0f                	jne    c0019f0f <Vm::faultHandler(regs*)+0x630>
c0019f00:	83 ec 0c             	sub    esp,0xc
c0019f03:	6a 60                	push   0x60
c0019f05:	e8 7b f7 ff ff       	call   c0019685 <Vm::inbv(unsigned short)>
c0019f0a:	83 c4 10             	add    esp,0x10
c0019f0d:	eb e9                	jmp    c0019ef8 <Vm::faultHandler(regs*)+0x619>
c0019f0f:	31 c0                	xor    eax,eax
c0019f11:	83 c4 1c             	add    esp,0x1c
c0019f14:	5b                   	pop    ebx
c0019f15:	5e                   	pop    esi
c0019f16:	5f                   	pop    edi
c0019f17:	5d                   	pop    ebp
c0019f18:	c3                   	ret    
c0019f19:	90                   	nop

c0019f1a <FAT::getName()>:
c0019f1a:	b8 88 32 02 c0       	mov    eax,0xc0023288
c0019f1f:	c3                   	ret    

c0019f20 <FAT::tell(void*, unsigned long long*)>:
c0019f20:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019f25:	75 06                	jne    c0019f2d <FAT::tell(void*, unsigned long long*)+0xd>
c0019f27:	b8 04 00 00 00       	mov    eax,0x4
c0019f2c:	c3                   	ret    
c0019f2d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019f32:	75 06                	jne    c0019f3a <FAT::tell(void*, unsigned long long*)+0x1a>
c0019f34:	b8 04 00 00 00       	mov    eax,0x4
c0019f39:	c3                   	ret    
c0019f3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f3e:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0019f41:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019f44:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f48:	89 01                	mov    DWORD PTR [ecx],eax
c0019f4a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019f4d:	b8 00 00 00 00       	mov    eax,0x0
c0019f52:	c3                   	ret    
c0019f53:	90                   	nop

c0019f54 <FAT::stat(void*, unsigned long long*)>:
c0019f54:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019f59:	75 06                	jne    c0019f61 <FAT::stat(void*, unsigned long long*)+0xd>
c0019f5b:	b8 04 00 00 00       	mov    eax,0x4
c0019f60:	c3                   	ret    
c0019f61:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019f66:	75 06                	jne    c0019f6e <FAT::stat(void*, unsigned long long*)+0x1a>
c0019f68:	b8 04 00 00 00       	mov    eax,0x4
c0019f6d:	c3                   	ret    
c0019f6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f72:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019f75:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019f78:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f7c:	89 01                	mov    DWORD PTR [ecx],eax
c0019f7e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019f81:	b8 00 00 00 00       	mov    eax,0x0
c0019f86:	c3                   	ret    
c0019f87:	90                   	nop

c0019f88 <FAT::~FAT()>:
c0019f88:	83 ec 0c             	sub    esp,0xc
c0019f8b:	ba 0c 33 02 c0       	mov    edx,0xc002330c
c0019f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f94:	89 10                	mov    DWORD PTR [eax],edx
c0019f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f9a:	83 ec 0c             	sub    esp,0xc
c0019f9d:	50                   	push   eax
c0019f9e:	e8 a3 55 ff ff       	call   c000f546 <Filesystem::~Filesystem()>
c0019fa3:	83 c4 10             	add    esp,0x10
c0019fa6:	90                   	nop
c0019fa7:	83 c4 0c             	add    esp,0xc
c0019faa:	c3                   	ret    
c0019fab:	90                   	nop

c0019fac <FAT::~FAT()>:
c0019fac:	83 ec 0c             	sub    esp,0xc
c0019faf:	83 ec 0c             	sub    esp,0xc
c0019fb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fb6:	e8 cd ff ff ff       	call   c0019f88 <FAT::~FAT()>
c0019fbb:	83 c4 10             	add    esp,0x10
c0019fbe:	83 ec 08             	sub    esp,0x8
c0019fc1:	6a 08                	push   0x8
c0019fc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fc7:	e8 23 51 ff ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c0019fcc:	83 c4 10             	add    esp,0x10
c0019fcf:	83 c4 0c             	add    esp,0xc
c0019fd2:	c3                   	ret    
c0019fd3:	90                   	nop

c0019fd4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019fd4:	83 ec 1c             	sub    esp,0x1c
c0019fd7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019fde:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019fe3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019fe7:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c0019fee:	83 f8 ff             	cmp    eax,0xffffffff
c0019ff1:	75 34                	jne    c001a027 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0019ff3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019ff7:	88 c2                	mov    dl,al
c0019ff9:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c0019ffe:	01 d0                	add    eax,edx
c001a000:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a004:	8b 15 20 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c20
c001a00a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a00e:	89 14 85 40 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3c0],edx
c001a015:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a01a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a01e:	89 14 85 c0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda340],edx
c001a025:	eb 17                	jmp    c001a03e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001a027:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a02b:	88 c2                	mov    dl,al
c001a02d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a031:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a038:	01 d0                	add    eax,edx
c001a03a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a03e:	83 ec 04             	sub    esp,0x4
c001a041:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a045:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a049:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a04d:	50                   	push   eax
c001a04e:	e8 84 ca fe ff       	call   c0006ad7 <f_getlabel>
c001a053:	83 c4 10             	add    esp,0x10
c001a056:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a05a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a05f:	75 07                	jne    c001a068 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001a061:	b8 00 00 00 00       	mov    eax,0x0
c001a066:	eb 05                	jmp    c001a06d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001a068:	b8 01 00 00 00       	mov    eax,0x1
c001a06d:	83 c4 1c             	add    esp,0x1c
c001a070:	c3                   	ret    
c001a071:	90                   	nop

c001a072 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a072:	57                   	push   edi
c001a073:	83 ec 58             	sub    esp,0x58
c001a076:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a07e:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a082:	b8 00 00 00 00       	mov    eax,0x0
c001a087:	b9 0f 00 00 00       	mov    ecx,0xf
c001a08c:	fc                   	cld    
c001a08d:	89 d7                	mov    edi,edx
c001a08f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a091:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a095:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a09c:	83 f8 ff             	cmp    eax,0xffffffff
c001a09f:	75 34                	jne    c001a0d5 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001a0a1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a0a5:	88 c2                	mov    dl,al
c001a0a7:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a0ac:	01 d0                	add    eax,edx
c001a0ae:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a0b2:	8b 15 20 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c20
c001a0b8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a0bc:	89 14 85 40 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3c0],edx
c001a0c3:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a0c8:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a0cc:	89 14 85 c0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda340],edx
c001a0d3:	eb 17                	jmp    c001a0ec <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001a0d5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a0d9:	88 c2                	mov    dl,al
c001a0db:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a0df:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a0e6:	01 d0                	add    eax,edx
c001a0e8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a0ec:	83 ec 08             	sub    esp,0x8
c001a0ef:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a0f3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a0f7:	50                   	push   eax
c001a0f8:	e8 1d 67 fe ff       	call   c000081a <strcat>
c001a0fd:	83 c4 10             	add    esp,0x10
c001a100:	83 ec 0c             	sub    esp,0xc
c001a103:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a107:	50                   	push   eax
c001a108:	e8 be cb fe ff       	call   c0006ccb <f_setlabel>
c001a10d:	83 c4 10             	add    esp,0x10
c001a110:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a114:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a119:	75 07                	jne    c001a122 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001a11b:	b8 00 00 00 00       	mov    eax,0x0
c001a120:	eb 05                	jmp    c001a127 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001a122:	b8 01 00 00 00       	mov    eax,0x1
c001a127:	83 c4 58             	add    esp,0x58
c001a12a:	5f                   	pop    edi
c001a12b:	c3                   	ret    

c001a12c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a12c:	83 ec 2c             	sub    esp,0x2c
c001a12f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a137:	83 ec 08             	sub    esp,0x8
c001a13a:	68 ac 32 02 c0       	push   0xc00232ac
c001a13f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a143:	e8 6c 66 fe ff       	call   c00007b4 <strcmp>
c001a148:	83 c4 10             	add    esp,0x10
c001a14b:	85 c0                	test   eax,eax
c001a14d:	0f 94 c0             	sete   al
c001a150:	84 c0                	test   al,al
c001a152:	74 0d                	je     c001a161 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001a154:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a15c:	e9 a6 00 00 00       	jmp    c001a207 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a161:	83 ec 08             	sub    esp,0x8
c001a164:	68 9e 32 02 c0       	push   0xc002329e
c001a169:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a16d:	e8 42 66 fe ff       	call   c00007b4 <strcmp>
c001a172:	83 c4 10             	add    esp,0x10
c001a175:	85 c0                	test   eax,eax
c001a177:	0f 94 c0             	sete   al
c001a17a:	84 c0                	test   al,al
c001a17c:	74 0a                	je     c001a188 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001a17e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a186:	eb 7f                	jmp    c001a207 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a188:	83 ec 08             	sub    esp,0x8
c001a18b:	68 a4 32 02 c0       	push   0xc00232a4
c001a190:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a194:	e8 1b 66 fe ff       	call   c00007b4 <strcmp>
c001a199:	83 c4 10             	add    esp,0x10
c001a19c:	85 c0                	test   eax,eax
c001a19e:	0f 94 c0             	sete   al
c001a1a1:	84 c0                	test   al,al
c001a1a3:	74 0a                	je     c001a1af <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001a1a5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a1ad:	eb 58                	jmp    c001a207 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a1af:	83 ec 08             	sub    esp,0x8
c001a1b2:	68 6c 05 02 c0       	push   0xc002056c
c001a1b7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a1bb:	e8 f4 65 fe ff       	call   c00007b4 <strcmp>
c001a1c0:	83 c4 10             	add    esp,0x10
c001a1c3:	85 c0                	test   eax,eax
c001a1c5:	0f 94 c0             	sete   al
c001a1c8:	84 c0                	test   al,al
c001a1ca:	74 0a                	je     c001a1d6 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001a1cc:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a1d4:	eb 31                	jmp    c001a207 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a1d6:	83 ec 08             	sub    esp,0x8
c001a1d9:	68 aa 32 02 c0       	push   0xc00232aa
c001a1de:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a1e2:	e8 cd 65 fe ff       	call   c00007b4 <strcmp>
c001a1e7:	83 c4 10             	add    esp,0x10
c001a1ea:	85 c0                	test   eax,eax
c001a1ec:	0f 94 c0             	sete   al
c001a1ef:	84 c0                	test   al,al
c001a1f1:	74 0a                	je     c001a1fd <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001a1f3:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a1fb:	eb 0a                	jmp    c001a207 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a1fd:	b8 08 00 00 00       	mov    eax,0x8
c001a202:	e9 04 01 00 00       	jmp    c001a30b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a207:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a20e:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a213:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a217:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a21e:	83 f8 ff             	cmp    eax,0xffffffff
c001a221:	75 34                	jne    c001a257 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001a223:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a227:	88 c2                	mov    dl,al
c001a229:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a22e:	01 d0                	add    eax,edx
c001a230:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a234:	8b 15 20 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c20
c001a23a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a23e:	89 14 85 40 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3c0],edx
c001a245:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a24a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a24e:	89 14 85 c0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda340],edx
c001a255:	eb 17                	jmp    c001a26e <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001a257:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a25b:	88 c2                	mov    dl,al
c001a25d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a261:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a268:	01 d0                	add    eax,edx
c001a26a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a26e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a272:	88 04 24             	mov    BYTE PTR [esp],al
c001a275:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a279:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a27d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a285:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a28a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a292:	83 ec 0c             	sub    esp,0xc
c001a295:	68 00 20 00 00       	push   0x2000
c001a29a:	e8 44 1d ff ff       	call   c000bfe3 <malloc>
c001a29f:	83 c4 10             	add    esp,0x10
c001a2a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a2a6:	68 00 20 00 00       	push   0x2000
c001a2ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2af:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a2b3:	50                   	push   eax
c001a2b4:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a2b8:	50                   	push   eax
c001a2b9:	e8 58 ce fe ff       	call   c0007116 <f_mkfs>
c001a2be:	83 c4 10             	add    esp,0x10
c001a2c1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a2c5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a2ca:	75 07                	jne    c001a2d3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001a2cc:	b8 00 00 00 00       	mov    eax,0x0
c001a2d1:	eb 38                	jmp    c001a30b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a2d3:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a2d8:	75 17                	jne    c001a2f1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001a2da:	83 ec 0c             	sub    esp,0xc
c001a2dd:	68 dc 32 02 c0       	push   0xc00232dc
c001a2e2:	e8 2e 4f ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001a2e7:	83 c4 10             	add    esp,0x10
c001a2ea:	b8 09 00 00 00       	mov    eax,0x9
c001a2ef:	eb 1a                	jmp    c001a30b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a2f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a2f5:	83 ec 08             	sub    esp,0x8
c001a2f8:	50                   	push   eax
c001a2f9:	68 b0 32 02 c0       	push   0xc00232b0
c001a2fe:	e8 12 4f ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001a303:	83 c4 10             	add    esp,0x10
c001a306:	b8 01 00 00 00       	mov    eax,0x1
c001a30b:	83 c4 2c             	add    esp,0x2c
c001a30e:	c3                   	ret    
c001a30f:	90                   	nop

c001a310 <FAT::tryMount(LogicalDisk*, int)>:
c001a310:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a316:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a31b:	83 f8 14             	cmp    eax,0x14
c001a31e:	75 17                	jne    c001a337 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001a320:	83 ec 0c             	sub    esp,0xc
c001a323:	68 c2 32 02 c0       	push   0xc00232c2
c001a328:	e8 17 b7 ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c001a32d:	83 c4 10             	add    esp,0x10
c001a330:	b0 00                	mov    al,0x0
c001a332:	e9 d7 01 00 00       	jmp    c001a50e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a337:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a33e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a344:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a34a:	3d 00 02 00 00       	cmp    eax,0x200
c001a34f:	74 07                	je     c001a358 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001a351:	b0 00                	mov    al,0x0
c001a353:	e9 b6 01 00 00       	jmp    c001a50e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a358:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a360:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a367:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a36e:	83 f8 ff             	cmp    eax,0xffffffff
c001a371:	74 07                	je     c001a37a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001a373:	b0 01                	mov    al,0x1
c001a375:	e9 94 01 00 00       	jmp    c001a50e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a37a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a384:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a38c:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a393:	88 c2                	mov    dl,al
c001a395:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a39a:	01 d0                	add    eax,edx
c001a39c:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a3a3:	8b 15 20 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c20
c001a3a9:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a3b0:	89 14 85 40 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3c0],edx
c001a3b7:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a3bc:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a3c3:	89 14 85 c0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda340],edx
c001a3ca:	83 ec 0c             	sub    esp,0xc
c001a3cd:	68 54 02 00 00       	push   0x254
c001a3d2:	e8 0c 1c ff ff       	call   c000bfe3 <malloc>
c001a3d7:	83 c4 10             	add    esp,0x10
c001a3da:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a3e1:	83 ec 04             	sub    esp,0x4
c001a3e4:	6a 00                	push   0x0
c001a3e6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a3ed:	50                   	push   eax
c001a3ee:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a3f5:	e8 0b a9 fe ff       	call   c0004d05 <f_mount>
c001a3fa:	83 c4 10             	add    esp,0x10
c001a3fd:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a404:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a40c:	74 19                	je     c001a427 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001a40e:	83 ec 0c             	sub    esp,0xc
c001a411:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a418:	e8 e6 1b ff ff       	call   c000c003 <rfree>
c001a41d:	83 c4 10             	add    esp,0x10
c001a420:	b0 00                	mov    al,0x0
c001a422:	e9 e7 00 00 00       	jmp    c001a50e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a427:	83 ec 04             	sub    esp,0x4
c001a42a:	68 00 01 00 00       	push   0x100
c001a42f:	6a 00                	push   0x0
c001a431:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a438:	50                   	push   eax
c001a439:	e8 86 62 fe ff       	call   c00006c4 <memset>
c001a43e:	83 c4 10             	add    esp,0x10
c001a441:	83 ec 08             	sub    esp,0x8
c001a444:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a44b:	50                   	push   eax
c001a44c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a453:	50                   	push   eax
c001a454:	e8 c1 63 fe ff       	call   c000081a <strcat>
c001a459:	83 c4 10             	add    esp,0x10
c001a45c:	83 ec 08             	sub    esp,0x8
c001a45f:	68 d0 32 02 c0       	push   0xc00232d0
c001a464:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a46b:	50                   	push   eax
c001a46c:	e8 a9 63 fe ff       	call   c000081a <strcat>
c001a471:	83 c4 10             	add    esp,0x10
c001a474:	83 ec 04             	sub    esp,0x4
c001a477:	6a 01                	push   0x1
c001a479:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001a480:	50                   	push   eax
c001a481:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a485:	50                   	push   eax
c001a486:	e8 dc a8 fe ff       	call   c0004d67 <f_open>
c001a48b:	83 c4 10             	add    esp,0x10
c001a48e:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a495:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001a49c:	85 c0                	test   eax,eax
c001a49e:	74 0a                	je     c001a4aa <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001a4a0:	78 2d                	js     c001a4cf <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a4a2:	83 e8 04             	sub    eax,0x4
c001a4a5:	83 f8 01             	cmp    eax,0x1
c001a4a8:	77 25                	ja     c001a4cf <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a4aa:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001a4b2:	83 ec 0c             	sub    esp,0xc
c001a4b5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a4b9:	50                   	push   eax
c001a4ba:	e8 fa b3 fe ff       	call   c00058b9 <f_close>
c001a4bf:	83 c4 10             	add    esp,0x10
c001a4c2:	90                   	nop
c001a4c3:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001a4cb:	74 3a                	je     c001a507 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001a4cd:	eb 2d                	jmp    c001a4fc <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001a4cf:	83 ec 0c             	sub    esp,0xc
c001a4d2:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a4d9:	e8 25 1b ff ff       	call   c000c003 <rfree>
c001a4de:	83 c4 10             	add    esp,0x10
c001a4e1:	83 ec 04             	sub    esp,0x4
c001a4e4:	6a 00                	push   0x0
c001a4e6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a4ed:	50                   	push   eax
c001a4ee:	6a 00                	push   0x0
c001a4f0:	e8 10 a8 fe ff       	call   c0004d05 <f_mount>
c001a4f5:	83 c4 10             	add    esp,0x10
c001a4f8:	b0 00                	mov    al,0x0
c001a4fa:	eb 12                	jmp    c001a50e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a4fc:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a501:	40                   	inc    eax
c001a502:	a3 20 5c 02 c0       	mov    ds:0xc0025c20,eax
c001a507:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001a50e:	81 c4 6c 03 00 00    	add    esp,0x36c
c001a514:	c3                   	ret    
c001a515:	90                   	nop

c001a516 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001a516:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001a51c:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001a524:	74 0a                	je     c001a530 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001a526:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001a52e:	75 0a                	jne    c001a53a <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001a530:	b8 04 00 00 00       	mov    eax,0x4
c001a535:	e9 dd 00 00 00       	jmp    c001a617 <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a53a:	83 ec 08             	sub    esp,0x8
c001a53d:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a544:	50                   	push   eax
c001a545:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001a54c:	e8 20 b9 fe ff       	call   c0005e71 <f_readdir>
c001a551:	83 c4 10             	add    esp,0x10
c001a554:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001a55b:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a561:	83 ec 0c             	sub    esp,0xc
c001a564:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001a56b:	83 c0 1a             	add    eax,0x1a
c001a56e:	50                   	push   eax
c001a56f:	e8 6d 61 fe ff       	call   c00006e1 <strlen>
c001a574:	83 c4 10             	add    esp,0x10
c001a577:	ba 00 00 00 00       	mov    edx,0x0
c001a57c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a580:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a584:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001a58b:	25 ff 00 00 00       	and    eax,0xff
c001a590:	83 e0 10             	and    eax,0x10
c001a593:	74 07                	je     c001a59c <FAT::readDir(void*, unsigned long, void*, int*)+0x86>
c001a595:	b8 02 00 00 00       	mov    eax,0x2
c001a59a:	eb 05                	jmp    c001a5a1 <FAT::readDir(void*, unsigned long, void*, int*)+0x8b>
c001a59c:	b8 01 00 00 00       	mov    eax,0x1
c001a5a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a5a5:	83 ec 08             	sub    esp,0x8
c001a5a8:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a5af:	83 c0 1a             	add    eax,0x1a
c001a5b2:	50                   	push   eax
c001a5b3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a5b7:	83 c0 10             	add    eax,0x10
c001a5ba:	50                   	push   eax
c001a5bb:	e8 a3 61 fe ff       	call   c0000763 <strcpy>
c001a5c0:	83 c4 10             	add    esp,0x10
c001a5c3:	83 ec 04             	sub    esp,0x4
c001a5c6:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001a5cd:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a5d1:	50                   	push   eax
c001a5d2:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001a5d9:	e8 b0 60 fe ff       	call   c000068e <memcpy>
c001a5de:	83 c4 10             	add    esp,0x10
c001a5e1:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001a5e8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a5ee:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001a5f5:	84 c0                	test   al,al
c001a5f7:	75 07                	jne    c001a600 <FAT::readDir(void*, unsigned long, void*, int*)+0xea>
c001a5f9:	b8 07 00 00 00       	mov    eax,0x7
c001a5fe:	eb 17                	jmp    c001a617 <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a600:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001a607:	85 c0                	test   eax,eax
c001a609:	75 07                	jne    c001a612 <FAT::readDir(void*, unsigned long, void*, int*)+0xfc>
c001a60b:	b8 00 00 00 00       	mov    eax,0x0
c001a610:	eb 05                	jmp    c001a617 <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a612:	b8 01 00 00 00       	mov    eax,0x1
c001a617:	81 c4 3c 02 00 00    	add    esp,0x23c
c001a61d:	c3                   	ret    

c001a61e <FAT::read(void*, unsigned long, void*, int*)>:
c001a61e:	83 ec 1c             	sub    esp,0x1c
c001a621:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a626:	74 07                	je     c001a62f <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001a628:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a62d:	75 07                	jne    c001a636 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001a62f:	b8 04 00 00 00       	mov    eax,0x4
c001a634:	eb 3d                	jmp    c001a673 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a636:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a63a:	50                   	push   eax
c001a63b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a63f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a643:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a647:	e8 57 ab fe ff       	call   c00051a3 <f_read>
c001a64c:	83 c4 10             	add    esp,0x10
c001a64f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a657:	89 c2                	mov    edx,eax
c001a659:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a65d:	89 10                	mov    DWORD PTR [eax],edx
c001a65f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a663:	85 c0                	test   eax,eax
c001a665:	75 07                	jne    c001a66e <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001a667:	b8 00 00 00 00       	mov    eax,0x0
c001a66c:	eb 05                	jmp    c001a673 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a66e:	b8 01 00 00 00       	mov    eax,0x1
c001a673:	83 c4 1c             	add    esp,0x1c
c001a676:	c3                   	ret    
c001a677:	90                   	nop

c001a678 <FAT::write(void*, unsigned long, void*, int*)>:
c001a678:	83 ec 1c             	sub    esp,0x1c
c001a67b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a680:	74 07                	je     c001a689 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001a682:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a687:	75 07                	jne    c001a690 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001a689:	b8 04 00 00 00       	mov    eax,0x4
c001a68e:	eb 3d                	jmp    c001a6cd <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a690:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a694:	50                   	push   eax
c001a695:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a699:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a69d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a6a1:	e8 7d ad fe ff       	call   c0005423 <f_write>
c001a6a6:	83 c4 10             	add    esp,0x10
c001a6a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6b1:	89 c2                	mov    edx,eax
c001a6b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a6b7:	89 10                	mov    DWORD PTR [eax],edx
c001a6b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a6bd:	85 c0                	test   eax,eax
c001a6bf:	75 07                	jne    c001a6c8 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001a6c1:	b8 00 00 00 00       	mov    eax,0x0
c001a6c6:	eb 05                	jmp    c001a6cd <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a6c8:	b8 01 00 00 00       	mov    eax,0x1
c001a6cd:	83 c4 1c             	add    esp,0x1c
c001a6d0:	c3                   	ret    
c001a6d1:	90                   	nop

c001a6d2 <FAT::close(void*)>:
c001a6d2:	83 ec 1c             	sub    esp,0x1c
c001a6d5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a6da:	75 07                	jne    c001a6e3 <FAT::close(void*)+0x11>
c001a6dc:	b8 04 00 00 00       	mov    eax,0x4
c001a6e1:	eb 36                	jmp    c001a719 <FAT::close(void*)+0x47>
c001a6e3:	83 ec 0c             	sub    esp,0xc
c001a6e6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a6ea:	e8 ca b1 fe ff       	call   c00058b9 <f_close>
c001a6ef:	83 c4 10             	add    esp,0x10
c001a6f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6f6:	83 ec 0c             	sub    esp,0xc
c001a6f9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a6fd:	e8 f1 18 ff ff       	call   c000bff3 <free>
c001a702:	83 c4 10             	add    esp,0x10
c001a705:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a709:	85 c0                	test   eax,eax
c001a70b:	75 07                	jne    c001a714 <FAT::close(void*)+0x42>
c001a70d:	b8 00 00 00 00       	mov    eax,0x0
c001a712:	eb 05                	jmp    c001a719 <FAT::close(void*)+0x47>
c001a714:	b8 01 00 00 00       	mov    eax,0x1
c001a719:	83 c4 1c             	add    esp,0x1c
c001a71c:	c3                   	ret    
c001a71d:	90                   	nop

c001a71e <FAT::closeDir(void*)>:
c001a71e:	83 ec 1c             	sub    esp,0x1c
c001a721:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a726:	75 07                	jne    c001a72f <FAT::closeDir(void*)+0x11>
c001a728:	b8 04 00 00 00       	mov    eax,0x4
c001a72d:	eb 36                	jmp    c001a765 <FAT::closeDir(void*)+0x47>
c001a72f:	83 ec 0c             	sub    esp,0xc
c001a732:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a736:	e8 14 b7 fe ff       	call   c0005e4f <f_closedir>
c001a73b:	83 c4 10             	add    esp,0x10
c001a73e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a742:	83 ec 0c             	sub    esp,0xc
c001a745:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a749:	e8 a5 18 ff ff       	call   c000bff3 <free>
c001a74e:	83 c4 10             	add    esp,0x10
c001a751:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a755:	85 c0                	test   eax,eax
c001a757:	75 07                	jne    c001a760 <FAT::closeDir(void*)+0x42>
c001a759:	b8 00 00 00 00       	mov    eax,0x0
c001a75e:	eb 05                	jmp    c001a765 <FAT::closeDir(void*)+0x47>
c001a760:	b8 01 00 00 00       	mov    eax,0x1
c001a765:	83 c4 1c             	add    esp,0x1c
c001a768:	c3                   	ret    
c001a769:	90                   	nop

c001a76a <FAT::seek(void*, unsigned long long)>:
c001a76a:	83 ec 2c             	sub    esp,0x2c
c001a76d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a771:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a775:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a779:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a77d:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a782:	75 07                	jne    c001a78b <FAT::seek(void*, unsigned long long)+0x21>
c001a784:	b8 04 00 00 00       	mov    eax,0x4
c001a789:	eb 2f                	jmp    c001a7ba <FAT::seek(void*, unsigned long long)+0x50>
c001a78b:	83 ec 04             	sub    esp,0x4
c001a78e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a792:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a796:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a79a:	e8 49 b1 fe ff       	call   c00058e8 <f_lseek>
c001a79f:	83 c4 10             	add    esp,0x10
c001a7a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a7a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a7aa:	85 c0                	test   eax,eax
c001a7ac:	75 07                	jne    c001a7b5 <FAT::seek(void*, unsigned long long)+0x4b>
c001a7ae:	b8 00 00 00 00       	mov    eax,0x0
c001a7b3:	eb 05                	jmp    c001a7ba <FAT::seek(void*, unsigned long long)+0x50>
c001a7b5:	b8 01 00 00 00       	mov    eax,0x1
c001a7ba:	83 c4 2c             	add    esp,0x2c
c001a7bd:	c3                   	ret    

c001a7be <fatWrapperReadDisk>:
c001a7be:	83 ec 1c             	sub    esp,0x1c
c001a7c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7c5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a7c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a7cd:	89 04 24             	mov    DWORD PTR [esp],eax
c001a7d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a7d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a7d8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a7dc:	25 ff 00 00 00       	and    eax,0xff
c001a7e1:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c001a7e8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a7ec:	83 ec 0c             	sub    esp,0xc
c001a7ef:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a7f3:	52                   	push   edx
c001a7f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a7f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a7fc:	50                   	push   eax
c001a7fd:	e8 6e 80 ff ff       	call   c0012870 <LogicalDisk::read(unsigned long long, int, void*)>
c001a802:	83 c4 20             	add    esp,0x20
c001a805:	83 c4 1c             	add    esp,0x1c
c001a808:	c3                   	ret    

c001a809 <fatWrapperWriteDisk>:
c001a809:	83 ec 1c             	sub    esp,0x1c
c001a80c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a810:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a814:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a818:	89 04 24             	mov    DWORD PTR [esp],eax
c001a81b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a81f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a823:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a827:	25 ff 00 00 00       	and    eax,0xff
c001a82c:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c001a833:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a837:	83 ec 0c             	sub    esp,0xc
c001a83a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a83e:	52                   	push   edx
c001a83f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a843:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a847:	50                   	push   eax
c001a848:	e8 8f 80 ff ff       	call   c00128dc <LogicalDisk::write(unsigned long long, int, void*)>
c001a84d:	83 c4 20             	add    esp,0x20
c001a850:	83 c4 1c             	add    esp,0x1c
c001a853:	c3                   	ret    

c001a854 <fatWrapperIoctl>:
c001a854:	53                   	push   ebx
c001a855:	83 ec 28             	sub    esp,0x28
c001a858:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a85c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a860:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a864:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a868:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001a86d:	75 35                	jne    c001a8a4 <fatWrapperIoctl+0x50>
c001a86f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a873:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a877:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a87b:	25 ff 00 00 00       	and    eax,0xff
c001a880:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c001a887:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a88d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a893:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a897:	66 89 02             	mov    WORD PTR [edx],ax
c001a89a:	b8 00 00 00 00       	mov    eax,0x0
c001a89f:	e9 bb 00 00 00       	jmp    c001a95f <fatWrapperIoctl+0x10b>
c001a8a4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001a8a9:	75 73                	jne    c001a91e <fatWrapperIoctl+0xca>
c001a8ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a8b3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a8b7:	25 ff 00 00 00       	and    eax,0xff
c001a8bc:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c001a8c3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a8c9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a8cf:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a8d5:	89 c8                	mov    eax,ecx
c001a8d7:	89 da                	mov    edx,ebx
c001a8d9:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a8dd:	c1 e0 0a             	shl    eax,0xa
c001a8e0:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a8e4:	81 e1 ff 00 00 00    	and    ecx,0xff
c001a8ea:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c001a8f1:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a8f7:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a8fd:	89 cb                	mov    ebx,ecx
c001a8ff:	c1 fb 1f             	sar    ebx,0x1f
c001a902:	53                   	push   ebx
c001a903:	51                   	push   ecx
c001a904:	52                   	push   edx
c001a905:	50                   	push   eax
c001a906:	e8 01 4c 00 00       	call   c001f50c <__udivdi3>
c001a90b:	83 c4 10             	add    esp,0x10
c001a90e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a912:	89 01                	mov    DWORD PTR [ecx],eax
c001a914:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a917:	b8 00 00 00 00       	mov    eax,0x0
c001a91c:	eb 41                	jmp    c001a95f <fatWrapperIoctl+0x10b>
c001a91e:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001a923:	75 07                	jne    c001a92c <fatWrapperIoctl+0xd8>
c001a925:	b8 00 00 00 00       	mov    eax,0x0
c001a92a:	eb 33                	jmp    c001a95f <fatWrapperIoctl+0x10b>
c001a92c:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001a931:	75 19                	jne    c001a94c <fatWrapperIoctl+0xf8>
c001a933:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a937:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a93b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a93f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a945:	b8 00 00 00 00       	mov    eax,0x0
c001a94a:	eb 13                	jmp    c001a95f <fatWrapperIoctl+0x10b>
c001a94c:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001a951:	75 07                	jne    c001a95a <fatWrapperIoctl+0x106>
c001a953:	b8 00 00 00 00       	mov    eax,0x0
c001a958:	eb 05                	jmp    c001a95f <fatWrapperIoctl+0x10b>
c001a95a:	b8 04 00 00 00       	mov    eax,0x4
c001a95f:	83 c4 28             	add    esp,0x28
c001a962:	5b                   	pop    ebx
c001a963:	c3                   	ret    

c001a964 <FAT::FAT()>:
c001a964:	83 ec 1c             	sub    esp,0x1c
c001a967:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a96b:	83 ec 0c             	sub    esp,0xc
c001a96e:	50                   	push   eax
c001a96f:	e8 ae 4b ff ff       	call   c000f522 <Filesystem::Filesystem()>
c001a974:	83 c4 10             	add    esp,0x10
c001a977:	ba 0c 33 02 c0       	mov    edx,0xc002330c
c001a97c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a980:	89 10                	mov    DWORD PTR [eax],edx
c001a982:	c7 05 20 5c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025c20,0x0
c001a98c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a994:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a999:	7f 15                	jg     c001a9b0 <FAT::FAT()+0x4c>
c001a99b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a99f:	c7 04 85 40 5c 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffda3c0],0xffffffff
c001a9aa:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a9ae:	eb e4                	jmp    c001a994 <FAT::FAT()+0x30>
c001a9b0:	90                   	nop
c001a9b1:	83 c4 1c             	add    esp,0x1c
c001a9b4:	c3                   	ret    
c001a9b5:	90                   	nop

c001a9b6 <FAT::fixFilepath(char*)>:
c001a9b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9ba:	8a 00                	mov    al,BYTE PTR [eax]
c001a9bc:	3c 40                	cmp    al,0x40
c001a9be:	7e 2c                	jle    c001a9ec <FAT::fixFilepath(char*)+0x36>
c001a9c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9c4:	8a 00                	mov    al,BYTE PTR [eax]
c001a9c6:	83 e8 41             	sub    eax,0x41
c001a9c9:	88 c2                	mov    dl,al
c001a9cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9cf:	88 10                	mov    BYTE PTR [eax],dl
c001a9d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9d5:	8a 00                	mov    al,BYTE PTR [eax]
c001a9d7:	0f be c0             	movsx  eax,al
c001a9da:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a9e1:	83 c0 30             	add    eax,0x30
c001a9e4:	88 c2                	mov    dl,al
c001a9e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9ea:	88 10                	mov    BYTE PTR [eax],dl
c001a9ec:	90                   	nop
c001a9ed:	c3                   	ret    

c001a9ee <FAT::open(char const*, void**, FileOpenMode)>:
c001a9ee:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a9f4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a9fc:	74 0a                	je     c001aa08 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001a9fe:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001aa06:	75 0a                	jne    c001aa12 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001aa08:	b8 04 00 00 00       	mov    eax,0x4
c001aa0d:	e9 00 01 00 00       	jmp    c001ab12 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001aa12:	83 ec 08             	sub    esp,0x8
c001aa15:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa1c:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa20:	50                   	push   eax
c001aa21:	e8 3d 5d fe ff       	call   c0000763 <strcpy>
c001aa26:	83 c4 10             	add    esp,0x10
c001aa29:	83 ec 08             	sub    esp,0x8
c001aa2c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aa30:	50                   	push   eax
c001aa31:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa38:	e8 79 ff ff ff       	call   c001a9b6 <FAT::fixFilepath(char*)>
c001aa3d:	83 c4 10             	add    esp,0x10
c001aa40:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001aa48:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa4f:	83 e0 01             	and    eax,0x1
c001aa52:	74 08                	je     c001aa5c <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001aa54:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001aa5c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa63:	83 e0 04             	and    eax,0x4
c001aa66:	74 10                	je     c001aa78 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001aa68:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001aa70:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001aa78:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa7f:	83 e0 02             	and    eax,0x2
c001aa82:	74 08                	je     c001aa8c <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001aa84:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001aa8c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa93:	83 e0 08             	and    eax,0x8
c001aa96:	74 08                	je     c001aaa0 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001aa98:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001aaa0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aaa7:	83 e0 10             	and    eax,0x10
c001aaaa:	74 08                	je     c001aab4 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001aaac:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001aab4:	83 ec 0c             	sub    esp,0xc
c001aab7:	68 50 02 00 00       	push   0x250
c001aabc:	e8 22 15 ff ff       	call   c000bfe3 <malloc>
c001aac1:	83 c4 10             	add    esp,0x10
c001aac4:	89 c2                	mov    edx,eax
c001aac6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aacd:	89 10                	mov    DWORD PTR [eax],edx
c001aacf:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001aad6:	31 d2                	xor    edx,edx
c001aad8:	88 c2                	mov    dl,al
c001aada:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aae1:	8b 00                	mov    eax,DWORD PTR [eax]
c001aae3:	83 ec 04             	sub    esp,0x4
c001aae6:	52                   	push   edx
c001aae7:	8d 54 24 10          	lea    edx,[esp+0x10]
c001aaeb:	52                   	push   edx
c001aaec:	50                   	push   eax
c001aaed:	e8 75 a2 fe ff       	call   c0004d67 <f_open>
c001aaf2:	83 c4 10             	add    esp,0x10
c001aaf5:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001aafc:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001ab04:	74 07                	je     c001ab0d <FAT::open(char const*, void**, FileOpenMode)+0x11f>
c001ab06:	b8 01 00 00 00       	mov    eax,0x1
c001ab0b:	eb 05                	jmp    c001ab12 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001ab0d:	b8 00 00 00 00       	mov    eax,0x0
c001ab12:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ab18:	c3                   	ret    
c001ab19:	90                   	nop

c001ab1a <FAT::openDir(char const*, void**)>:
c001ab1a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ab20:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ab28:	74 0a                	je     c001ab34 <FAT::openDir(char const*, void**)+0x1a>
c001ab2a:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ab32:	75 07                	jne    c001ab3b <FAT::openDir(char const*, void**)+0x21>
c001ab34:	b8 04 00 00 00       	mov    eax,0x4
c001ab39:	eb 7d                	jmp    c001abb8 <FAT::openDir(char const*, void**)+0x9e>
c001ab3b:	83 ec 08             	sub    esp,0x8
c001ab3e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ab45:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ab49:	50                   	push   eax
c001ab4a:	e8 14 5c fe ff       	call   c0000763 <strcpy>
c001ab4f:	83 c4 10             	add    esp,0x10
c001ab52:	83 ec 08             	sub    esp,0x8
c001ab55:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ab59:	50                   	push   eax
c001ab5a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ab61:	e8 50 fe ff ff       	call   c001a9b6 <FAT::fixFilepath(char*)>
c001ab66:	83 c4 10             	add    esp,0x10
c001ab69:	83 ec 0c             	sub    esp,0xc
c001ab6c:	6a 4c                	push   0x4c
c001ab6e:	e8 70 14 ff ff       	call   c000bfe3 <malloc>
c001ab73:	83 c4 10             	add    esp,0x10
c001ab76:	89 c2                	mov    edx,eax
c001ab78:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ab7f:	89 10                	mov    DWORD PTR [eax],edx
c001ab81:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ab88:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab8a:	83 ec 08             	sub    esp,0x8
c001ab8d:	8d 54 24 14          	lea    edx,[esp+0x14]
c001ab91:	52                   	push   edx
c001ab92:	50                   	push   eax
c001ab93:	e8 b5 b1 fe ff       	call   c0005d4d <f_opendir>
c001ab98:	83 c4 10             	add    esp,0x10
c001ab9b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001aba2:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001abaa:	74 07                	je     c001abb3 <FAT::openDir(char const*, void**)+0x99>
c001abac:	b8 01 00 00 00       	mov    eax,0x1
c001abb1:	eb 05                	jmp    c001abb8 <FAT::openDir(char const*, void**)+0x9e>
c001abb3:	b8 00 00 00 00       	mov    eax,0x0
c001abb8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001abbe:	c3                   	ret    
c001abbf:	90                   	nop

c001abc0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001abc0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001abc6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001abce:	75 0a                	jne    c001abda <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001abd0:	b8 04 00 00 00       	mov    eax,0x4
c001abd5:	e9 cb 00 00 00       	jmp    c001aca5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001abda:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001abe2:	75 0a                	jne    c001abee <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001abe4:	b8 04 00 00 00       	mov    eax,0x4
c001abe9:	e9 b7 00 00 00       	jmp    c001aca5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001abee:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001abf6:	75 0a                	jne    c001ac02 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001abf8:	b8 04 00 00 00       	mov    eax,0x4
c001abfd:	e9 a3 00 00 00       	jmp    c001aca5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001ac02:	83 ec 08             	sub    esp,0x8
c001ac05:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ac0c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ac13:	50                   	push   eax
c001ac14:	e8 4a 5b fe ff       	call   c0000763 <strcpy>
c001ac19:	83 c4 10             	add    esp,0x10
c001ac1c:	83 ec 08             	sub    esp,0x8
c001ac1f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001ac26:	50                   	push   eax
c001ac27:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ac2e:	e8 83 fd ff ff       	call   c001a9b6 <FAT::fixFilepath(char*)>
c001ac33:	83 c4 10             	add    esp,0x10
c001ac36:	83 ec 08             	sub    esp,0x8
c001ac39:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ac3d:	50                   	push   eax
c001ac3e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ac45:	50                   	push   eax
c001ac46:	e8 c1 b2 fe ff       	call   c0005f0c <f_stat>
c001ac4b:	83 c4 10             	add    esp,0x10
c001ac4e:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ac55:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ac5c:	85 c0                	test   eax,eax
c001ac5e:	74 07                	je     c001ac67 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001ac60:	83 f8 04             	cmp    eax,0x4
c001ac63:	74 34                	je     c001ac99 <FAT::stat(char const*, unsigned long long*, bool*)+0xd9>
c001ac65:	eb 39                	jmp    c001aca0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001ac67:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ac6b:	25 ff 00 00 00       	and    eax,0xff
c001ac70:	83 e0 10             	and    eax,0x10
c001ac73:	0f 95 c2             	setne  dl
c001ac76:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001ac7d:	88 10                	mov    BYTE PTR [eax],dl
c001ac7f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ac82:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac86:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001ac8d:	89 01                	mov    DWORD PTR [ecx],eax
c001ac8f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ac92:	b8 00 00 00 00       	mov    eax,0x0
c001ac97:	eb 0c                	jmp    c001aca5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001ac99:	b8 02 00 00 00       	mov    eax,0x2
c001ac9e:	eb 05                	jmp    c001aca5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001aca0:	b8 01 00 00 00       	mov    eax,0x1
c001aca5:	81 c4 2c 02 00 00    	add    esp,0x22c
c001acab:	c3                   	ret    

c001acac <FAT::unlink(char const*)>:
c001acac:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001acb2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001acba:	75 07                	jne    c001acc3 <FAT::unlink(char const*)+0x17>
c001acbc:	b8 04 00 00 00       	mov    eax,0x4
c001acc1:	eb 5c                	jmp    c001ad1f <FAT::unlink(char const*)+0x73>
c001acc3:	83 ec 08             	sub    esp,0x8
c001acc6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001accd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001acd1:	50                   	push   eax
c001acd2:	e8 8c 5a fe ff       	call   c0000763 <strcpy>
c001acd7:	83 c4 10             	add    esp,0x10
c001acda:	83 ec 08             	sub    esp,0x8
c001acdd:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ace1:	50                   	push   eax
c001ace2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ace9:	e8 c8 fc ff ff       	call   c001a9b6 <FAT::fixFilepath(char*)>
c001acee:	83 c4 10             	add    esp,0x10
c001acf1:	83 ec 0c             	sub    esp,0xc
c001acf4:	8d 44 24 18          	lea    eax,[esp+0x18]
c001acf8:	50                   	push   eax
c001acf9:	e8 7d b5 fe ff       	call   c000627b <f_unlink>
c001acfe:	83 c4 10             	add    esp,0x10
c001ad01:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ad08:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ad0f:	85 c0                	test   eax,eax
c001ad11:	75 07                	jne    c001ad1a <FAT::unlink(char const*)+0x6e>
c001ad13:	b8 00 00 00 00       	mov    eax,0x0
c001ad18:	eb 05                	jmp    c001ad1f <FAT::unlink(char const*)+0x73>
c001ad1a:	b8 01 00 00 00       	mov    eax,0x1
c001ad1f:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ad25:	c3                   	ret    

c001ad26 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001ad26:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad2c:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001ad33:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001ad3a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001ad3e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ad42:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001ad4a:	75 0a                	jne    c001ad56 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001ad4c:	b8 04 00 00 00       	mov    eax,0x4
c001ad51:	e9 43 01 00 00       	jmp    c001ae99 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001ad56:	83 ec 08             	sub    esp,0x8
c001ad59:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ad60:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad64:	50                   	push   eax
c001ad65:	e8 f9 59 fe ff       	call   c0000763 <strcpy>
c001ad6a:	83 c4 10             	add    esp,0x10
c001ad6d:	83 ec 08             	sub    esp,0x8
c001ad70:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ad74:	50                   	push   eax
c001ad75:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ad7c:	e8 35 fc ff ff       	call   c001a9b6 <FAT::fixFilepath(char*)>
c001ad81:	83 c4 10             	add    esp,0x10
c001ad84:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001ad8c:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001ad94:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001ad98:	25 ff 00 00 00       	and    eax,0xff
c001ad9d:	83 e0 01             	and    eax,0x1
c001ada0:	74 08                	je     c001adaa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001ada2:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001adaa:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001adae:	25 ff 00 00 00       	and    eax,0xff
c001adb3:	83 e0 02             	and    eax,0x2
c001adb6:	74 08                	je     c001adc0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9a>
c001adb8:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001adc0:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001adc4:	25 ff 00 00 00       	and    eax,0xff
c001adc9:	83 e0 04             	and    eax,0x4
c001adcc:	74 08                	je     c001add6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb0>
c001adce:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001add6:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001adda:	25 ff 00 00 00       	and    eax,0xff
c001addf:	83 e0 08             	and    eax,0x8
c001ade2:	74 08                	je     c001adec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc6>
c001ade4:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001adec:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001adf0:	25 ff 00 00 00       	and    eax,0xff
c001adf5:	83 e0 01             	and    eax,0x1
c001adf8:	74 08                	je     c001ae02 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xdc>
c001adfa:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001ae02:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ae06:	25 ff 00 00 00       	and    eax,0xff
c001ae0b:	83 e0 02             	and    eax,0x2
c001ae0e:	74 08                	je     c001ae18 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf2>
c001ae10:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001ae18:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ae1c:	25 ff 00 00 00       	and    eax,0xff
c001ae21:	83 e0 04             	and    eax,0x4
c001ae24:	74 08                	je     c001ae2e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x108>
c001ae26:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001ae2e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ae32:	25 ff 00 00 00       	and    eax,0xff
c001ae37:	83 e0 08             	and    eax,0x8
c001ae3a:	74 08                	je     c001ae44 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11e>
c001ae3c:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001ae44:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ae4b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001ae52:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ae59:	31 d2                	xor    edx,edx
c001ae5b:	88 c2                	mov    dl,al
c001ae5d:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ae64:	25 ff 00 00 00       	and    eax,0xff
c001ae69:	83 ec 04             	sub    esp,0x4
c001ae6c:	52                   	push   edx
c001ae6d:	50                   	push   eax
c001ae6e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae72:	50                   	push   eax
c001ae73:	e8 a3 ba fe ff       	call   c000691b <f_chmod>
c001ae78:	83 c4 10             	add    esp,0x10
c001ae7b:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ae82:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ae89:	85 c0                	test   eax,eax
c001ae8b:	75 07                	jne    c001ae94 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x16e>
c001ae8d:	b8 00 00 00 00       	mov    eax,0x0
c001ae92:	eb 05                	jmp    c001ae99 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001ae94:	b8 01 00 00 00       	mov    eax,0x1
c001ae99:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ae9f:	c3                   	ret    

c001aea0 <FAT::rename(char const*, char const*)>:
c001aea0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001aea6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001aeae:	74 0a                	je     c001aeba <FAT::rename(char const*, char const*)+0x1a>
c001aeb0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001aeb8:	75 0a                	jne    c001aec4 <FAT::rename(char const*, char const*)+0x24>
c001aeba:	b8 04 00 00 00       	mov    eax,0x4
c001aebf:	e9 98 00 00 00       	jmp    c001af5c <FAT::rename(char const*, char const*)+0xbc>
c001aec4:	83 ec 08             	sub    esp,0x8
c001aec7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aece:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001aed5:	50                   	push   eax
c001aed6:	e8 88 58 fe ff       	call   c0000763 <strcpy>
c001aedb:	83 c4 10             	add    esp,0x10
c001aede:	83 ec 08             	sub    esp,0x8
c001aee1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001aee8:	50                   	push   eax
c001aee9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aef0:	e8 c1 fa ff ff       	call   c001a9b6 <FAT::fixFilepath(char*)>
c001aef5:	83 c4 10             	add    esp,0x10
c001aef8:	83 ec 08             	sub    esp,0x8
c001aefb:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001af02:	8d 44 24 18          	lea    eax,[esp+0x18]
c001af06:	50                   	push   eax
c001af07:	e8 57 58 fe ff       	call   c0000763 <strcpy>
c001af0c:	83 c4 10             	add    esp,0x10
c001af0f:	83 ec 08             	sub    esp,0x8
c001af12:	8d 44 24 14          	lea    eax,[esp+0x14]
c001af16:	50                   	push   eax
c001af17:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001af1e:	e8 93 fa ff ff       	call   c001a9b6 <FAT::fixFilepath(char*)>
c001af23:	83 c4 10             	add    esp,0x10
c001af26:	83 ec 08             	sub    esp,0x8
c001af29:	8d 44 24 14          	lea    eax,[esp+0x14]
c001af2d:	50                   	push   eax
c001af2e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001af35:	50                   	push   eax
c001af36:	e8 ed b6 fe ff       	call   c0006628 <f_rename>
c001af3b:	83 c4 10             	add    esp,0x10
c001af3e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001af45:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001af4c:	85 c0                	test   eax,eax
c001af4e:	75 07                	jne    c001af57 <FAT::rename(char const*, char const*)+0xb7>
c001af50:	b8 00 00 00 00       	mov    eax,0x0
c001af55:	eb 05                	jmp    c001af5c <FAT::rename(char const*, char const*)+0xbc>
c001af57:	b8 01 00 00 00       	mov    eax,0x1
c001af5c:	81 c4 1c 02 00 00    	add    esp,0x21c
c001af62:	c3                   	ret    
c001af63:	90                   	nop

c001af64 <FAT::mkdir(char const*)>:
c001af64:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001af6a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001af72:	75 07                	jne    c001af7b <FAT::mkdir(char const*)+0x17>
c001af74:	b8 04 00 00 00       	mov    eax,0x4
c001af79:	eb 5c                	jmp    c001afd7 <FAT::mkdir(char const*)+0x73>
c001af7b:	83 ec 08             	sub    esp,0x8
c001af7e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001af85:	8d 44 24 18          	lea    eax,[esp+0x18]
c001af89:	50                   	push   eax
c001af8a:	e8 d4 57 fe ff       	call   c0000763 <strcpy>
c001af8f:	83 c4 10             	add    esp,0x10
c001af92:	83 ec 08             	sub    esp,0x8
c001af95:	8d 44 24 14          	lea    eax,[esp+0x14]
c001af99:	50                   	push   eax
c001af9a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001afa1:	e8 10 fa ff ff       	call   c001a9b6 <FAT::fixFilepath(char*)>
c001afa6:	83 c4 10             	add    esp,0x10
c001afa9:	83 ec 0c             	sub    esp,0xc
c001afac:	8d 44 24 18          	lea    eax,[esp+0x18]
c001afb0:	50                   	push   eax
c001afb1:	e8 46 b4 fe ff       	call   c00063fc <f_mkdir>
c001afb6:	83 c4 10             	add    esp,0x10
c001afb9:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001afc0:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001afc7:	85 c0                	test   eax,eax
c001afc9:	75 07                	jne    c001afd2 <FAT::mkdir(char const*)+0x6e>
c001afcb:	b8 00 00 00 00       	mov    eax,0x0
c001afd0:	eb 05                	jmp    c001afd7 <FAT::mkdir(char const*)+0x73>
c001afd2:	b8 01 00 00 00       	mov    eax,0x1
c001afd7:	81 c4 1c 01 00 00    	add    esp,0x11c
c001afdd:	c3                   	ret    

c001afde <FAT::exists(char const*)>:
c001afde:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001afe4:	83 ec 08             	sub    esp,0x8
c001afe7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001afee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aff2:	50                   	push   eax
c001aff3:	e8 6b 57 fe ff       	call   c0000763 <strcpy>
c001aff8:	83 c4 10             	add    esp,0x10
c001affb:	83 ec 08             	sub    esp,0x8
c001affe:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b002:	50                   	push   eax
c001b003:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b00a:	e8 a7 f9 ff ff       	call   c001a9b6 <FAT::fixFilepath(char*)>
c001b00f:	83 c4 10             	add    esp,0x10
c001b012:	83 ec 08             	sub    esp,0x8
c001b015:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001b01c:	50                   	push   eax
c001b01d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b021:	50                   	push   eax
c001b022:	e8 e5 ae fe ff       	call   c0005f0c <f_stat>
c001b027:	83 c4 10             	add    esp,0x10
c001b02a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b031:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b038:	85 c0                	test   eax,eax
c001b03a:	75 04                	jne    c001b040 <FAT::exists(char const*)+0x62>
c001b03c:	b0 01                	mov    al,0x1
c001b03e:	eb 02                	jmp    c001b042 <FAT::exists(char const*)+0x64>
c001b040:	b0 00                	mov    al,0x0
c001b042:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b048:	c3                   	ret    
c001b049:	90                   	nop

c001b04a <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001b04a:	b8 08 00 00 00       	mov    eax,0x8
c001b04f:	c3                   	ret    

c001b050 <ISO9660::seek(void*, unsigned long long)>:
c001b050:	53                   	push   ebx
c001b051:	b8 04 00 00 00       	mov    eax,0x4
c001b056:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b05a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b05e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b062:	85 d2                	test   edx,edx
c001b064:	74 17                	je     c001b07d <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b066:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001b069:	89 c8                	mov    eax,ecx
c001b06b:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001b06e:	b8 01 00 00 00       	mov    eax,0x1
c001b073:	73 08                	jae    c001b07d <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b075:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001b078:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b07b:	31 c0                	xor    eax,eax
c001b07d:	5b                   	pop    ebx
c001b07e:	c3                   	ret    
c001b07f:	90                   	nop

c001b080 <ISO9660::tell(void*, unsigned long long*)>:
c001b080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b084:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b088:	85 d2                	test   edx,edx
c001b08a:	74 12                	je     c001b09e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b08c:	85 c0                	test   eax,eax
c001b08e:	74 0e                	je     c001b09e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b090:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b093:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001b096:	89 10                	mov    DWORD PTR [eax],edx
c001b098:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b09b:	31 c0                	xor    eax,eax
c001b09d:	c3                   	ret    
c001b09e:	b8 04 00 00 00       	mov    eax,0x4
c001b0a3:	c3                   	ret    

c001b0a4 <ISO9660::getName()>:
c001b0a4:	b8 68 33 02 c0       	mov    eax,0xc0023368
c001b0a9:	c3                   	ret    

c001b0aa <ISO9660::stat(void*, unsigned long long*)>:
c001b0aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b0ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b0b2:	85 d2                	test   edx,edx
c001b0b4:	74 12                	je     c001b0c8 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b0b6:	85 c0                	test   eax,eax
c001b0b8:	74 0e                	je     c001b0c8 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b0ba:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001b0bd:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001b0c0:	89 10                	mov    DWORD PTR [eax],edx
c001b0c2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b0c5:	31 c0                	xor    eax,eax
c001b0c7:	c3                   	ret    
c001b0c8:	b8 04 00 00 00       	mov    eax,0x4
c001b0cd:	c3                   	ret    

c001b0ce <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001b0ce:	b8 01 00 00 00       	mov    eax,0x1
c001b0d3:	c3                   	ret    

c001b0d4 <ISO9660::unlink(char const*)>:
c001b0d4:	b8 01 00 00 00       	mov    eax,0x1
c001b0d9:	c3                   	ret    

c001b0da <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b0da:	b8 01 00 00 00       	mov    eax,0x1
c001b0df:	c3                   	ret    

c001b0e0 <ISO9660::rename(char const*, char const*)>:
c001b0e0:	b8 01 00 00 00       	mov    eax,0x1
c001b0e5:	c3                   	ret    

c001b0e6 <ISO9660::mkdir(char const*)>:
c001b0e6:	b8 01 00 00 00       	mov    eax,0x1
c001b0eb:	c3                   	ret    

c001b0ec <ISO9660::close(void*)>:
c001b0ec:	83 ec 0c             	sub    esp,0xc
c001b0ef:	b8 04 00 00 00       	mov    eax,0x4
c001b0f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b0f8:	85 d2                	test   edx,edx
c001b0fa:	74 0e                	je     c001b10a <ISO9660::close(void*)+0x1e>
c001b0fc:	83 ec 0c             	sub    esp,0xc
c001b0ff:	52                   	push   edx
c001b100:	e8 ee 0e ff ff       	call   c000bff3 <free>
c001b105:	83 c4 10             	add    esp,0x10
c001b108:	31 c0                	xor    eax,eax
c001b10a:	83 c4 0c             	add    esp,0xc
c001b10d:	c3                   	ret    

c001b10e <ISO9660::closeDir(void*)>:
c001b10e:	83 ec 0c             	sub    esp,0xc
c001b111:	b8 04 00 00 00       	mov    eax,0x4
c001b116:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b11a:	85 d2                	test   edx,edx
c001b11c:	74 0e                	je     c001b12c <ISO9660::closeDir(void*)+0x1e>
c001b11e:	83 ec 0c             	sub    esp,0xc
c001b121:	52                   	push   edx
c001b122:	e8 cc 0e ff ff       	call   c000bff3 <free>
c001b127:	83 c4 10             	add    esp,0x10
c001b12a:	31 c0                	xor    eax,eax
c001b12c:	83 c4 0c             	add    esp,0xc
c001b12f:	c3                   	ret    

c001b130 <ISO9660::~ISO9660()>:
c001b130:	83 ec 0c             	sub    esp,0xc
c001b133:	ba bc 33 02 c0       	mov    edx,0xc00233bc
c001b138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b13c:	89 10                	mov    DWORD PTR [eax],edx
c001b13e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b142:	83 ec 0c             	sub    esp,0xc
c001b145:	50                   	push   eax
c001b146:	e8 fb 43 ff ff       	call   c000f546 <Filesystem::~Filesystem()>
c001b14b:	83 c4 10             	add    esp,0x10
c001b14e:	90                   	nop
c001b14f:	83 c4 0c             	add    esp,0xc
c001b152:	c3                   	ret    
c001b153:	90                   	nop

c001b154 <ISO9660::~ISO9660()>:
c001b154:	83 ec 0c             	sub    esp,0xc
c001b157:	83 ec 0c             	sub    esp,0xc
c001b15a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b15e:	e8 cd ff ff ff       	call   c001b130 <ISO9660::~ISO9660()>
c001b163:	83 c4 10             	add    esp,0x10
c001b166:	83 ec 08             	sub    esp,0x8
c001b169:	6a 08                	push   0x8
c001b16b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b16f:	e8 7b 3f ff ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c001b174:	83 c4 10             	add    esp,0x10
c001b177:	83 c4 0c             	add    esp,0xc
c001b17a:	c3                   	ret    

c001b17b <__memmem(unsigned char*, int, unsigned char*, int)>:
c001b17b:	55                   	push   ebp
c001b17c:	31 c9                	xor    ecx,ecx
c001b17e:	57                   	push   edi
c001b17f:	56                   	push   esi
c001b180:	53                   	push   ebx
c001b181:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b185:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001b189:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001b18d:	89 eb                	mov    ebx,ebp
c001b18f:	39 ce                	cmp    esi,ecx
c001b191:	7e 17                	jle    c001b1aa <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001b193:	31 d2                	xor    edx,edx
c001b195:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001b199:	7d 13                	jge    c001b1ae <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001b19b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b19f:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b1a2:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001b1a5:	75 0d                	jne    c001b1b4 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001b1a7:	42                   	inc    edx
c001b1a8:	eb eb                	jmp    c001b195 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001b1aa:	31 c0                	xor    eax,eax
c001b1ac:	eb 0a                	jmp    c001b1b8 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b1ae:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001b1b2:	eb 04                	jmp    c001b1b8 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b1b4:	41                   	inc    ecx
c001b1b5:	43                   	inc    ebx
c001b1b6:	eb d7                	jmp    c001b18f <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001b1b8:	5b                   	pop    ebx
c001b1b9:	5e                   	pop    esi
c001b1ba:	5f                   	pop    edi
c001b1bb:	5d                   	pop    ebp
c001b1bc:	c3                   	ret    

c001b1bd <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b1bd:	56                   	push   esi
c001b1be:	53                   	push   ebx
c001b1bf:	52                   	push   edx
c001b1c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b1c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b1c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b1cc:	39 0d 20 5d 02 c0    	cmp    DWORD PTR ds:0xc0025d20,ecx
c001b1d2:	75 08                	jne    c001b1dc <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001b1d4:	38 05 c8 41 02 c0    	cmp    BYTE PTR ds:0xc00241c8,al
c001b1da:	74 2b                	je     c001b207 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001b1dc:	83 ec 0c             	sub    esp,0xc
c001b1df:	31 db                	xor    ebx,ebx
c001b1e1:	a2 c8 41 02 c0       	mov    ds:0xc00241c8,al
c001b1e6:	89 0d 20 5d 02 c0    	mov    DWORD PTR ds:0xc0025d20,ecx
c001b1ec:	68 40 5d 02 c0       	push   0xc0025d40
c001b1f1:	6a 01                	push   0x1
c001b1f3:	53                   	push   ebx
c001b1f4:	0f be c0             	movsx  eax,al
c001b1f7:	51                   	push   ecx
c001b1f8:	ff 34 85 9c 4c 02 c0 	push   DWORD PTR [eax*4-0x3ffdb364]
c001b1ff:	e8 6c 76 ff ff       	call   c0012870 <LogicalDisk::read(unsigned long long, int, void*)>
c001b204:	83 c4 20             	add    esp,0x20
c001b207:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001b20f:	c7 44 24 14 40 5d 02 c0 	mov    DWORD PTR [esp+0x14],0xc0025d40
c001b217:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b21b:	58                   	pop    eax
c001b21c:	5b                   	pop    ebx
c001b21d:	5e                   	pop    esi
c001b21e:	e9 6b 54 fe ff       	jmp    c000068e <memcpy>
c001b223:	90                   	nop

c001b224 <ISO9660::tryMount(LogicalDisk*, int)>:
c001b224:	81 ec 10 08 00 00    	sub    esp,0x810
c001b22a:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001b231:	83 c0 41             	add    eax,0x41
c001b234:	0f be c0             	movsx  eax,al
c001b237:	50                   	push   eax
c001b238:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b23c:	50                   	push   eax
c001b23d:	6a 10                	push   0x10
c001b23f:	e8 79 ff ff ff       	call   c001b1bd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b244:	83 c4 10             	add    esp,0x10
c001b247:	31 c0                	xor    eax,eax
c001b249:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b24e:	75 1d                	jne    c001b26d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b250:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b255:	75 16                	jne    c001b26d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b257:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b25c:	75 0f                	jne    c001b26d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b25e:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b263:	75 08                	jne    c001b26d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b265:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b26a:	0f 94 c0             	sete   al
c001b26d:	81 c4 0c 08 00 00    	add    esp,0x80c
c001b273:	c3                   	ret    

c001b274 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001b274:	55                   	push   ebp
c001b275:	57                   	push   edi
c001b276:	56                   	push   esi
c001b277:	53                   	push   ebx
c001b278:	81 ec 34 08 00 00    	sub    esp,0x834
c001b27e:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001b285:	55                   	push   ebp
c001b286:	68 83 33 02 c0       	push   0xc0023383
c001b28b:	e8 85 3f ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001b290:	83 c4 10             	add    esp,0x10
c001b293:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001b29b:	0f 84 06 02 00 00    	je     c001b4a7 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b2a1:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001b2a9:	0f 84 f8 01 00 00    	je     c001b4a7 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b2af:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b2b6:	b8 01 00 00 00       	mov    eax,0x1
c001b2bb:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001b2bf:	0f 85 e7 01 00 00    	jne    c001b4ac <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b2c5:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001b2c8:	31 d2                	xor    edx,edx
c001b2ca:	89 e9                	mov    ecx,ebp
c001b2cc:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001b2cf:	01 f1                	add    ecx,esi
c001b2d1:	89 d3                	mov    ebx,edx
c001b2d3:	11 fb                	adc    ebx,edi
c001b2d5:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b2d9:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b2dd:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001b2e4:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001b2e7:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001b2ea:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b2ee:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b2f2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b2f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b2fa:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b2fe:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001b302:	72 19                	jb     c001b31d <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001b304:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b30c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b310:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b313:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b317:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b31b:	eb 13                	jmp    c001b330 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001b31d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b321:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b325:	29 f0                	sub    eax,esi
c001b327:	19 fa                	sbb    edx,edi
c001b329:	89 04 24             	mov    DWORD PTR [esp],eax
c001b32c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b330:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001b337:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b33a:	8b 00                	mov    eax,DWORD PTR [eax]
c001b33c:	0f a4 c2 0b          	shld   edx,eax,0xb
c001b340:	c1 e0 0b             	shl    eax,0xb
c001b343:	53                   	push   ebx
c001b344:	01 c6                	add    esi,eax
c001b346:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b34d:	11 d7                	adc    edi,edx
c001b34f:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b353:	50                   	push   eax
c001b354:	89 fa                	mov    edx,edi
c001b356:	8d 44 24 28          	lea    eax,[esp+0x28]
c001b35a:	50                   	push   eax
c001b35b:	89 f0                	mov    eax,esi
c001b35d:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b361:	50                   	push   eax
c001b362:	e8 56 fe ff ff       	call   c001b1bd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b367:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b36e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b372:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b376:	83 c4 10             	add    esp,0x10
c001b379:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001b37c:	b8 00 08 00 00       	mov    eax,0x800
c001b381:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001b387:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001b38b:	29 d0                	sub    eax,edx
c001b38d:	39 c1                	cmp    ecx,eax
c001b38f:	83 db 00             	sbb    ebx,0x0
c001b392:	7d 19                	jge    c001b3ad <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001b394:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b399:	75 16                	jne    c001b3b1 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001b39b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b3a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b3a8:	e9 f6 00 00 00       	jmp    c001b4a3 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001b3ad:	89 c5                	mov    ebp,eax
c001b3af:	eb 03                	jmp    c001b3b4 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001b3b1:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001b3b4:	51                   	push   ecx
c001b3b5:	55                   	push   ebp
c001b3b6:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001b3ba:	50                   	push   eax
c001b3bb:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001b3c2:	e8 c7 52 fe ff       	call   c000068e <memcpy>
c001b3c7:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001b3ce:	01 e8                	add    eax,ebp
c001b3d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b3d4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b3d8:	89 e8                	mov    eax,ebp
c001b3da:	99                   	cdq    
c001b3db:	01 ee                	add    esi,ebp
c001b3dd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b3e1:	11 d7                	adc    edi,edx
c001b3e3:	29 e9                	sub    ecx,ebp
c001b3e5:	19 d3                	sbb    ebx,edx
c001b3e7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b3eb:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b3ef:	83 c4 10             	add    esp,0x10
c001b3f2:	b8 ff 07 00 00       	mov    eax,0x7ff
c001b3f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001b3fa:	b8 00 00 00 00       	mov    eax,0x0
c001b3ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b403:	7d 3f                	jge    c001b444 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001b405:	52                   	push   edx
c001b406:	89 fa                	mov    edx,edi
c001b408:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b40f:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b413:	50                   	push   eax
c001b414:	89 f0                	mov    eax,esi
c001b416:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b41a:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b41e:	50                   	push   eax
c001b41f:	e8 99 fd ff ff       	call   c001b1bd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b424:	81 c6 00 08 00 00    	add    esi,0x800
c001b42a:	83 d7 00             	adc    edi,0x0
c001b42d:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001b435:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001b43d:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001b442:	eb ab                	jmp    c001b3ef <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001b444:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b448:	0b 04 24             	or     eax,DWORD PTR [esp]
c001b44b:	74 34                	je     c001b481 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001b44d:	50                   	push   eax
c001b44e:	89 fa                	mov    edx,edi
c001b450:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b457:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b45b:	50                   	push   eax
c001b45c:	89 f0                	mov    eax,esi
c001b45e:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b462:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001b466:	55                   	push   ebp
c001b467:	50                   	push   eax
c001b468:	e8 50 fd ff ff       	call   c001b1bd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b46d:	83 c4 0c             	add    esp,0xc
c001b470:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001b474:	55                   	push   ebp
c001b475:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b479:	e8 10 52 fe ff       	call   c000068e <memcpy>
c001b47e:	83 c4 10             	add    esp,0x10
c001b481:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b488:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b48c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b490:	89 38                	mov    DWORD PTR [eax],edi
c001b492:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b499:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b49d:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001b4a0:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001b4a3:	31 c0                	xor    eax,eax
c001b4a5:	eb 05                	jmp    c001b4ac <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b4a7:	b8 04 00 00 00       	mov    eax,0x4
c001b4ac:	81 c4 2c 08 00 00    	add    esp,0x82c
c001b4b2:	5b                   	pop    ebx
c001b4b3:	5e                   	pop    esi
c001b4b4:	5f                   	pop    edi
c001b4b5:	5d                   	pop    ebp
c001b4b6:	c3                   	ret    
c001b4b7:	90                   	nop

c001b4b8 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b4b8:	55                   	push   ebp
c001b4b9:	57                   	push   edi
c001b4ba:	56                   	push   esi
c001b4bb:	53                   	push   ebx
c001b4bc:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001b4c2:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001b4c9:	85 f6                	test   esi,esi
c001b4cb:	0f 84 62 02 00 00    	je     c001b733 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001b4d1:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001b4d9:	0f 84 54 02 00 00    	je     c001b733 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001b4df:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001b4e2:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001b4e5:	75 0a                	jne    c001b4f1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001b4e7:	b8 07 00 00 00       	mov    eax,0x7
c001b4ec:	e9 47 02 00 00       	jmp    c001b738 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001b4f1:	50                   	push   eax
c001b4f2:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b4f6:	50                   	push   eax
c001b4f7:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b4fe:	53                   	push   ebx
c001b4ff:	8b 06                	mov    eax,DWORD PTR [esi]
c001b501:	c1 e0 0b             	shl    eax,0xb
c001b504:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001b507:	c1 e8 0b             	shr    eax,0xb
c001b50a:	50                   	push   eax
c001b50b:	e8 ad fc ff ff       	call   c001b1bd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b510:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b513:	83 c4 10             	add    esp,0x10
c001b516:	89 c1                	mov    ecx,eax
c001b518:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001b51b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001b521:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001b524:	84 db                	test   bl,bl
c001b526:	0f 85 90 00 00 00    	jne    c001b5bc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001b52c:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001b532:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b538:	29 c7                	sub    edi,eax
c001b53a:	89 fb                	mov    ebx,edi
c001b53c:	c1 fb 1f             	sar    ebx,0x1f
c001b53f:	01 f8                	add    eax,edi
c001b541:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b545:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001b548:	11 da                	adc    edx,ebx
c001b54a:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b54d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b550:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b554:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001b557:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001b55a:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b55d:	89 d8                	mov    eax,ebx
c001b55f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b563:	ba 00 00 00 00       	mov    edx,0x0
c001b568:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b56c:	b8 00 00 00 00       	mov    eax,0x0
c001b571:	73 0b                	jae    c001b57e <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001b573:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b576:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b57a:	29 f8                	sub    eax,edi
c001b57c:	19 da                	sbb    edx,ebx
c001b57e:	89 d3                	mov    ebx,edx
c001b580:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b583:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b586:	09 c3                	or     ebx,eax
c001b588:	0f 84 59 ff ff ff    	je     c001b4e7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001b58e:	55                   	push   ebp
c001b58f:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b593:	50                   	push   eax
c001b594:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b59b:	53                   	push   ebx
c001b59c:	8b 06                	mov    eax,DWORD PTR [esi]
c001b59e:	c1 e0 0b             	shl    eax,0xb
c001b5a1:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001b5a5:	c1 e8 0b             	shr    eax,0xb
c001b5a8:	50                   	push   eax
c001b5a9:	e8 0f fc ff ff       	call   c001b1bd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b5ae:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b5b1:	83 c4 10             	add    esp,0x10
c001b5b4:	25 ff 07 00 00       	and    eax,0x7ff
c001b5b9:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001b5bc:	57                   	push   edi
c001b5bd:	6a 28                	push   0x28
c001b5bf:	6a 00                	push   0x0
c001b5c1:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b5c5:	50                   	push   eax
c001b5c6:	e8 f9 50 fe ff       	call   c00006c4 <memset>
c001b5cb:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001b5ce:	31 d2                	xor    edx,edx
c001b5d0:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b5d6:	89 f8                	mov    eax,edi
c001b5d8:	83 c0 21             	add    eax,0x21
c001b5db:	83 d2 00             	adc    edx,0x0
c001b5de:	89 c7                	mov    edi,eax
c001b5e0:	89 d5                	mov    ebp,edx
c001b5e2:	83 c4 10             	add    esp,0x10
c001b5e5:	31 c9                	xor    ecx,ecx
c001b5e7:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001b5ee:	83 f9 28             	cmp    ecx,0x28
c001b5f1:	0f 94 c2             	sete   dl
c001b5f4:	88 04 24             	mov    BYTE PTR [esp],al
c001b5f7:	88 d0                	mov    al,dl
c001b5f9:	ba ff 07 00 00       	mov    edx,0x7ff
c001b5fe:	39 fa                	cmp    edx,edi
c001b600:	ba 00 00 00 00       	mov    edx,0x0
c001b605:	19 ea                	sbb    edx,ebp
c001b607:	0f 92 c2             	setb   dl
c001b60a:	09 c2                	or     edx,eax
c001b60c:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001b610:	0f 94 c0             	sete   al
c001b613:	08 d0                	or     al,dl
c001b615:	75 16                	jne    c001b62d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b617:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001b61b:	74 10                	je     c001b62d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b61d:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b620:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001b624:	41                   	inc    ecx
c001b625:	83 c7 01             	add    edi,0x1
c001b628:	83 d5 00             	adc    ebp,0x0
c001b62b:	eb ba                	jmp    c001b5e7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001b62d:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001b634:	83 ec 0c             	sub    esp,0xc
c001b637:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b63b:	57                   	push   edi
c001b63c:	e8 a0 50 fe ff       	call   c00006e1 <strlen>
c001b641:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b645:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b648:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001b64f:	25 ff 07 00 00       	and    eax,0x7ff
c001b654:	01 c8                	add    eax,ecx
c001b656:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001b65e:	5a                   	pop    edx
c001b65f:	f6 80 19 f8 ff ff 02 	test   BYTE PTR [eax-0x7e7],0x2
c001b666:	59                   	pop    ecx
c001b667:	0f 95 c0             	setne  al
c001b66a:	0f b6 c0             	movzx  eax,al
c001b66d:	40                   	inc    eax
c001b66e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b672:	57                   	push   edi
c001b673:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001b677:	50                   	push   eax
c001b678:	e8 e6 50 fe ff       	call   c0000763 <strcpy>
c001b67d:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001b681:	83 c4 10             	add    esp,0x10
c001b684:	84 c0                	test   al,al
c001b686:	75 21                	jne    c001b6a9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f1>
c001b688:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001b690:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b698:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b6a0:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001b6a7:	eb 28                	jmp    c001b6d1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b6a9:	fe c8                	dec    al
c001b6ab:	75 24                	jne    c001b6d1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b6ad:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001b6b5:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b6bd:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b6c5:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001b6cc:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001b6d1:	50                   	push   eax
c001b6d2:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001b6d9:	0f b6 fb             	movzx  edi,bl
c001b6dc:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b6e0:	31 db                	xor    ebx,ebx
c001b6e2:	50                   	push   eax
c001b6e3:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001b6ea:	e8 9f 4f fe ff       	call   c000068e <memcpy>
c001b6ef:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001b6f6:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b6fc:	89 f9                	mov    ecx,edi
c001b6fe:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001b701:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b704:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001b707:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b70a:	83 c4 10             	add    esp,0x10
c001b70d:	39 c7                	cmp    edi,eax
c001b70f:	89 df                	mov    edi,ebx
c001b711:	19 d7                	sbb    edi,edx
c001b713:	72 10                	jb     c001b725 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c001b715:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001b71c:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001b723:	eb 0a                	jmp    c001b72f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x277>
c001b725:	29 c8                	sub    eax,ecx
c001b727:	19 da                	sbb    edx,ebx
c001b729:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b72c:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b72f:	31 c0                	xor    eax,eax
c001b731:	eb 05                	jmp    c001b738 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001b733:	b8 04 00 00 00       	mov    eax,0x4
c001b738:	81 c4 5c 09 00 00    	add    esp,0x95c
c001b73e:	5b                   	pop    ebx
c001b73f:	5e                   	pop    esi
c001b740:	5f                   	pop    edi
c001b741:	5d                   	pop    ebp
c001b742:	c3                   	ret    

c001b743 <readRoot(unsigned int*, unsigned int*, char)>:
c001b743:	81 ec 40 08 00 00    	sub    esp,0x840
c001b749:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001b751:	50                   	push   eax
c001b752:	8d 44 24 38          	lea    eax,[esp+0x38]
c001b756:	50                   	push   eax
c001b757:	6a 10                	push   0x10
c001b759:	e8 5f fa ff ff       	call   c001b1bd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b75e:	83 c4 0c             	add    esp,0xc
c001b761:	6a 22                	push   0x22
c001b763:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001b76a:	50                   	push   eax
c001b76b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001b76f:	50                   	push   eax
c001b770:	e8 19 4f fe ff       	call   c000068e <memcpy>
c001b775:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b77c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b780:	89 10                	mov    DWORD PTR [eax],edx
c001b782:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b789:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b78d:	89 10                	mov    DWORD PTR [eax],edx
c001b78f:	b0 01                	mov    al,0x1
c001b791:	81 c4 4c 08 00 00    	add    esp,0x84c
c001b797:	c3                   	ret    

c001b798 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001b798:	55                   	push   ebp
c001b799:	57                   	push   edi
c001b79a:	56                   	push   esi
c001b79b:	53                   	push   ebx
c001b79c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b7a2:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001b7a9:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001b7b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b7b4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b7b8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b7bc:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001b7c0:	75 03                	jne    c001b7c5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b7c2:	83 c3 02             	add    ebx,0x2
c001b7c5:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001b7c8:	75 03                	jne    c001b7cd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001b7ca:	43                   	inc    ebx
c001b7cb:	eb f8                	jmp    c001b7c5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b7cd:	51                   	push   ecx
c001b7ce:	68 00 01 00 00       	push   0x100
c001b7d3:	6a 00                	push   0x0
c001b7d5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b7d9:	50                   	push   eax
c001b7da:	e8 e5 4e fe ff       	call   c00006c4 <memset>
c001b7df:	83 c4 10             	add    esp,0x10
c001b7e2:	31 d2                	xor    edx,edx
c001b7e4:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b7e7:	84 c0                	test   al,al
c001b7e9:	74 21                	je     c001b80c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001b7eb:	3c 2f                	cmp    al,0x2f
c001b7ed:	75 0b                	jne    c001b7fa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001b7ef:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001b7f3:	bd 01 00 00 00       	mov    ebp,0x1
c001b7f8:	eb 14                	jmp    c001b80e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001b7fa:	8d 48 9f             	lea    ecx,[eax-0x61]
c001b7fd:	80 f9 19             	cmp    cl,0x19
c001b800:	77 03                	ja     c001b805 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b802:	83 e8 20             	sub    eax,0x20
c001b805:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001b809:	42                   	inc    edx
c001b80a:	eb d8                	jmp    c001b7e4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001b80c:	31 ed                	xor    ebp,ebp
c001b80e:	83 ec 0c             	sub    esp,0xc
c001b811:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001b818:	e8 c6 07 ff ff       	call   c000bfe3 <malloc>
c001b81d:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b824:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001b82a:	89 c6                	mov    esi,eax
c001b82c:	c1 ef 0b             	shr    edi,0xb
c001b82f:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001b836:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001b83a:	83 c4 10             	add    esp,0x10
c001b83d:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001b842:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b846:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001b84d:	74 28                	je     c001b877 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001b84f:	52                   	push   edx
c001b850:	57                   	push   edi
c001b851:	50                   	push   eax
c001b852:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b856:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b85d:	e8 5b f9 ff ff       	call   c001b1bd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b866:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001b86d:	05 00 08 00 00       	add    eax,0x800
c001b872:	83 c4 10             	add    esp,0x10
c001b875:	eb cb                	jmp    c001b842 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001b877:	83 ec 0c             	sub    esp,0xc
c001b87a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b87e:	57                   	push   edi
c001b87f:	e8 5d 4e fe ff       	call   c00006e1 <strlen>
c001b884:	50                   	push   eax
c001b885:	57                   	push   edi
c001b886:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001b88d:	56                   	push   esi
c001b88e:	e8 e8 f8 ff ff       	call   c001b17b <__memmem(unsigned char*, int, unsigned char*, int)>
c001b893:	83 c4 20             	add    esp,0x20
c001b896:	85 c0                	test   eax,eax
c001b898:	75 13                	jne    c001b8ad <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001b89a:	83 ec 0c             	sub    esp,0xc
c001b89d:	56                   	push   esi
c001b89e:	e8 50 07 ff ff       	call   c000bff3 <free>
c001b8a3:	83 c4 10             	add    esp,0x10
c001b8a6:	31 c0                	xor    eax,eax
c001b8a8:	e9 b3 00 00 00       	jmp    c001b960 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b8ad:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001b8b1:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001b8b5:	c1 e7 08             	shl    edi,0x8
c001b8b8:	c1 e2 10             	shl    edx,0x10
c001b8bb:	09 d7                	or     edi,edx
c001b8bd:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001b8c1:	09 d7                	or     edi,edx
c001b8c3:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001b8c7:	c1 e2 18             	shl    edx,0x18
c001b8ca:	09 d7                	or     edi,edx
c001b8cc:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001b8d0:	89 d1                	mov    ecx,edx
c001b8d2:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001b8d6:	c1 e1 08             	shl    ecx,0x8
c001b8d9:	c1 e2 10             	shl    edx,0x10
c001b8dc:	09 ca                	or     edx,ecx
c001b8de:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001b8e2:	09 ca                	or     edx,ecx
c001b8e4:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001b8e8:	c1 e1 18             	shl    ecx,0x18
c001b8eb:	09 ca                	or     edx,ecx
c001b8ed:	89 e9                	mov    ecx,ebp
c001b8ef:	84 c9                	test   cl,cl
c001b8f1:	74 3c                	je     c001b92f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001b8f3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b8f7:	83 ec 0c             	sub    esp,0xc
c001b8fa:	56                   	push   esi
c001b8fb:	e8 f3 06 ff ff       	call   c000bff3 <free>
c001b900:	83 c4 0c             	add    esp,0xc
c001b903:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b90a:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001b90f:	50                   	push   eax
c001b910:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b917:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b91e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b922:	52                   	push   edx
c001b923:	57                   	push   edi
c001b924:	53                   	push   ebx
c001b925:	e8 6e fe ff ff       	call   c001b798 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b92a:	83 c4 20             	add    esp,0x20
c001b92d:	eb 31                	jmp    c001b960 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b92f:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001b936:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001b939:	d0 e8                	shr    al,1
c001b93b:	83 ec 0c             	sub    esp,0xc
c001b93e:	89 3b                	mov    DWORD PTR [ebx],edi
c001b940:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001b947:	83 e0 01             	and    eax,0x1
c001b94a:	89 13                	mov    DWORD PTR [ebx],edx
c001b94c:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001b953:	89 03                	mov    DWORD PTR [ebx],eax
c001b955:	56                   	push   esi
c001b956:	e8 98 06 ff ff       	call   c000bff3 <free>
c001b95b:	83 c4 10             	add    esp,0x10
c001b95e:	b0 01                	mov    al,0x1
c001b960:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b966:	5b                   	pop    ebx
c001b967:	5e                   	pop    esi
c001b968:	5f                   	pop    edi
c001b969:	5d                   	pop    ebp
c001b96a:	c3                   	ret    

c001b96b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001b96b:	55                   	push   ebp
c001b96c:	57                   	push   edi
c001b96d:	56                   	push   esi
c001b96e:	53                   	push   ebx
c001b96f:	83 ec 20             	sub    esp,0x20
c001b972:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b976:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001b97a:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001b97f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001b983:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b98b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b993:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001b999:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001b99f:	57                   	push   edi
c001b9a0:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b9a4:	50                   	push   eax
c001b9a5:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b9a9:	50                   	push   eax
c001b9aa:	e8 94 fd ff ff       	call   c001b743 <readRoot(unsigned int*, unsigned int*, char)>
c001b9af:	5a                   	pop    edx
c001b9b0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b9b4:	e8 28 4d fe ff       	call   c00006e1 <strlen>
c001b9b9:	83 c4 10             	add    esp,0x10
c001b9bc:	83 f8 03             	cmp    eax,0x3
c001b9bf:	77 17                	ja     c001b9d8 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b9c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b9c5:	89 03                	mov    DWORD PTR [ebx],eax
c001b9c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9cb:	89 06                	mov    DWORD PTR [esi],eax
c001b9cd:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001b9d4:	b0 01                	mov    al,0x1
c001b9d6:	eb 19                	jmp    c001b9f1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001b9d8:	50                   	push   eax
c001b9d9:	55                   	push   ebp
c001b9da:	57                   	push   edi
c001b9db:	56                   	push   esi
c001b9dc:	53                   	push   ebx
c001b9dd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b9e1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b9e5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b9e9:	e8 aa fd ff ff       	call   c001b798 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b9ee:	83 c4 20             	add    esp,0x20
c001b9f1:	83 c4 1c             	add    esp,0x1c
c001b9f4:	5b                   	pop    ebx
c001b9f5:	5e                   	pop    esi
c001b9f6:	5f                   	pop    edi
c001b9f7:	5d                   	pop    ebp
c001b9f8:	c3                   	ret    
c001b9f9:	90                   	nop

c001b9fa <ISO9660::open(char const*, void**, FileOpenMode)>:
c001b9fa:	57                   	push   edi
c001b9fb:	56                   	push   esi
c001b9fc:	53                   	push   ebx
c001b9fd:	83 ec 10             	sub    esp,0x10
c001ba00:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ba04:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ba08:	85 f6                	test   esi,esi
c001ba0a:	74 7b                	je     c001ba87 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001ba0c:	85 ff                	test   edi,edi
c001ba0e:	74 77                	je     c001ba87 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001ba10:	83 ec 0c             	sub    esp,0xc
c001ba13:	6a 1c                	push   0x1c
c001ba15:	e8 c9 05 ff ff       	call   c000bfe3 <malloc>
c001ba1a:	89 07                	mov    DWORD PTR [edi],eax
c001ba1c:	89 c3                	mov    ebx,eax
c001ba1e:	58                   	pop    eax
c001ba1f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ba23:	50                   	push   eax
c001ba24:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ba27:	50                   	push   eax
c001ba28:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ba2c:	50                   	push   eax
c001ba2d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ba31:	50                   	push   eax
c001ba32:	56                   	push   esi
c001ba33:	e8 33 ff ff ff       	call   c001b96b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ba38:	83 c4 20             	add    esp,0x20
c001ba3b:	84 c0                	test   al,al
c001ba3d:	74 07                	je     c001ba46 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001ba3f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ba44:	74 0b                	je     c001ba51 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001ba46:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ba4a:	b8 01 00 00 00       	mov    eax,0x1
c001ba4f:	eb 3b                	jmp    c001ba8c <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001ba51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba55:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001ba59:	89 03                	mov    DWORD PTR [ebx],eax
c001ba5b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001ba62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba66:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001ba6d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ba74:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ba77:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ba7e:	8a 06                	mov    al,BYTE PTR [esi]
c001ba80:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001ba83:	31 c0                	xor    eax,eax
c001ba85:	eb 05                	jmp    c001ba8c <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001ba87:	b8 04 00 00 00       	mov    eax,0x4
c001ba8c:	83 c4 10             	add    esp,0x10
c001ba8f:	5b                   	pop    ebx
c001ba90:	5e                   	pop    esi
c001ba91:	5f                   	pop    edi
c001ba92:	c3                   	ret    
c001ba93:	90                   	nop

c001ba94 <ISO9660::exists(char const*)>:
c001ba94:	83 ec 28             	sub    esp,0x28
c001ba97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ba9b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ba9f:	52                   	push   edx
c001baa0:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001baa3:	52                   	push   edx
c001baa4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001baa8:	52                   	push   edx
c001baa9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001baad:	52                   	push   edx
c001baae:	50                   	push   eax
c001baaf:	e8 b7 fe ff ff       	call   c001b96b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001bab4:	83 c4 3c             	add    esp,0x3c
c001bab7:	c3                   	ret    

c001bab8 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001bab8:	56                   	push   esi
c001bab9:	53                   	push   ebx
c001baba:	83 ec 14             	sub    esp,0x14
c001babd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001bac1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bac5:	85 db                	test   ebx,ebx
c001bac7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001bacb:	0f 94 c2             	sete   dl
c001bace:	85 f6                	test   esi,esi
c001bad0:	0f 94 c0             	sete   al
c001bad3:	08 c2                	or     dl,al
c001bad5:	75 68                	jne    c001bb3f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001bad7:	85 c9                	test   ecx,ecx
c001bad9:	74 64                	je     c001bb3f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001badb:	83 ec 0c             	sub    esp,0xc
c001bade:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bae1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001bae7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001baee:	8d 44 24 18          	lea    eax,[esp+0x18]
c001baf2:	50                   	push   eax
c001baf3:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001baf6:	50                   	push   eax
c001baf7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bafb:	50                   	push   eax
c001bafc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bb00:	50                   	push   eax
c001bb01:	51                   	push   ecx
c001bb02:	e8 64 fe ff ff       	call   c001b96b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001bb07:	83 c4 20             	add    esp,0x20
c001bb0a:	ba 01 00 00 00       	mov    edx,0x1
c001bb0f:	84 c0                	test   al,al
c001bb11:	74 31                	je     c001bb44 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001bb13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb17:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bb1e:	89 03                	mov    DWORD PTR [ebx],eax
c001bb20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb24:	85 c0                	test   eax,eax
c001bb26:	ba 00 00 00 00       	mov    edx,0x0
c001bb2b:	0f 95 06             	setne  BYTE PTR [esi]
c001bb2e:	74 14                	je     c001bb44 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001bb30:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001bb36:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bb3d:	eb 05                	jmp    c001bb44 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001bb3f:	ba 04 00 00 00       	mov    edx,0x4
c001bb44:	83 c4 14             	add    esp,0x14
c001bb47:	89 d0                	mov    eax,edx
c001bb49:	5b                   	pop    ebx
c001bb4a:	5e                   	pop    esi
c001bb4b:	c3                   	ret    

c001bb4c <ISO9660::openDir(char const*, void**)>:
c001bb4c:	57                   	push   edi
c001bb4d:	56                   	push   esi
c001bb4e:	53                   	push   ebx
c001bb4f:	83 ec 10             	sub    esp,0x10
c001bb52:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001bb56:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001bb5a:	85 f6                	test   esi,esi
c001bb5c:	0f 84 95 00 00 00    	je     c001bbf7 <ISO9660::openDir(char const*, void**)+0xab>
c001bb62:	85 ff                	test   edi,edi
c001bb64:	0f 84 8d 00 00 00    	je     c001bbf7 <ISO9660::openDir(char const*, void**)+0xab>
c001bb6a:	83 ec 0c             	sub    esp,0xc
c001bb6d:	6a 1c                	push   0x1c
c001bb6f:	e8 6f 04 ff ff       	call   c000bfe3 <malloc>
c001bb74:	89 07                	mov    DWORD PTR [edi],eax
c001bb76:	89 c3                	mov    ebx,eax
c001bb78:	59                   	pop    ecx
c001bb79:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bb7d:	50                   	push   eax
c001bb7e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001bb81:	50                   	push   eax
c001bb82:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bb86:	50                   	push   eax
c001bb87:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bb8b:	50                   	push   eax
c001bb8c:	56                   	push   esi
c001bb8d:	e8 d9 fd ff ff       	call   c001b96b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001bb92:	83 c4 20             	add    esp,0x20
c001bb95:	84 c0                	test   al,al
c001bb97:	74 07                	je     c001bba0 <ISO9660::openDir(char const*, void**)+0x54>
c001bb99:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bb9e:	75 21                	jne    c001bbc1 <ISO9660::openDir(char const*, void**)+0x75>
c001bba0:	52                   	push   edx
c001bba1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bba5:	0f b6 c0             	movzx  eax,al
c001bba8:	50                   	push   eax
c001bba9:	68 96 33 02 c0       	push   0xc0023396
c001bbae:	e8 62 36 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001bbb3:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001bbb7:	83 c4 10             	add    esp,0x10
c001bbba:	b8 01 00 00 00       	mov    eax,0x1
c001bbbf:	eb 3b                	jmp    c001bbfc <ISO9660::openDir(char const*, void**)+0xb0>
c001bbc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bbc5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001bbc9:	89 03                	mov    DWORD PTR [ebx],eax
c001bbcb:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001bbd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bbd6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001bbdd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bbe4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001bbe7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001bbee:	8a 06                	mov    al,BYTE PTR [esi]
c001bbf0:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001bbf3:	31 c0                	xor    eax,eax
c001bbf5:	eb 05                	jmp    c001bbfc <ISO9660::openDir(char const*, void**)+0xb0>
c001bbf7:	b8 04 00 00 00       	mov    eax,0x4
c001bbfc:	83 c4 10             	add    esp,0x10
c001bbff:	5b                   	pop    ebx
c001bc00:	5e                   	pop    esi
c001bc01:	5f                   	pop    edi
c001bc02:	c3                   	ret    
c001bc03:	90                   	nop

c001bc04 <ISO9660::ISO9660()>:
c001bc04:	83 ec 0c             	sub    esp,0xc
c001bc07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc0b:	83 ec 0c             	sub    esp,0xc
c001bc0e:	50                   	push   eax
c001bc0f:	e8 0e 39 ff ff       	call   c000f522 <Filesystem::Filesystem()>
c001bc14:	83 c4 10             	add    esp,0x10
c001bc17:	ba bc 33 02 c0       	mov    edx,0xc00233bc
c001bc1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc20:	89 10                	mov    DWORD PTR [eax],edx
c001bc22:	90                   	nop
c001bc23:	83 c4 0c             	add    esp,0xc
c001bc26:	c3                   	ret    
c001bc27:	90                   	nop

c001bc28 <SoundChannel::~SoundChannel()>:
c001bc28:	83 ec 0c             	sub    esp,0xc
c001bc2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc2f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001bc32:	83 ec 0c             	sub    esp,0xc
c001bc35:	50                   	push   eax
c001bc36:	e8 b8 03 ff ff       	call   c000bff3 <free>
c001bc3b:	83 c4 10             	add    esp,0x10
c001bc3e:	90                   	nop
c001bc3f:	83 c4 0c             	add    esp,0xc
c001bc42:	c3                   	ret    
c001bc43:	90                   	nop

c001bc44 <SoundChannel::setSpeed(float)>:
c001bc44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc48:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001bc4c:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001bc4f:	c3                   	ret    

c001bc50 <SoundChannel::getSpeed()>:
c001bc50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc54:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001bc57:	c3                   	ret    

c001bc58 <SoundChannel::setVolume(int)>:
c001bc58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc5c:	83 f8 64             	cmp    eax,0x64
c001bc5f:	7e 05                	jle    c001bc66 <SoundChannel::setVolume(int)+0xe>
c001bc61:	b8 64 00 00 00       	mov    eax,0x64
c001bc66:	85 c0                	test   eax,eax
c001bc68:	79 02                	jns    c001bc6c <SoundChannel::setVolume(int)+0x14>
c001bc6a:	31 c0                	xor    eax,eax
c001bc6c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bc70:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001bc73:	c3                   	ret    

c001bc74 <SoundChannel::getVolume()>:
c001bc74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc78:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bc7b:	c3                   	ret    

c001bc7c <SoundChannel::pause()>:
c001bc7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc80:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001bc84:	c3                   	ret    
c001bc85:	90                   	nop

c001bc86 <SoundChannel::SoundChannel(int, int, int, int)>:
c001bc86:	83 ec 1c             	sub    esp,0x1c
c001bc89:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bc8d:	e8 ea ff ff ff       	call   c001bc7c <SoundChannel::pause()>
c001bc92:	83 c4 04             	add    esp,0x4
c001bc95:	6a 50                	push   0x50
c001bc97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bc9b:	e8 b8 ff ff ff       	call   c001bc58 <SoundChannel::setVolume(int)>
c001bca0:	83 c4 08             	add    esp,0x8
c001bca3:	d9 e8                	fld1   
c001bca5:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001bca9:	d9 1c 24             	fstp   DWORD PTR [esp]
c001bcac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bcb0:	e8 8f ff ff ff       	call   c001bc44 <SoundChannel::setSpeed(float)>
c001bcb5:	83 c4 08             	add    esp,0x8
c001bcb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcbc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bcc0:	89 10                	mov    DWORD PTR [eax],edx
c001bcc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcc6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bcca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bccd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcd1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bcd5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bcd8:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001bcdd:	75 26                	jne    c001bd05 <SoundChannel::SoundChannel(int, int, int, int)+0x7f>
c001bcdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bce3:	8b 10                	mov    edx,DWORD PTR [eax]
c001bce5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bce9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bcec:	0f af c2             	imul   eax,edx
c001bcef:	89 c2                	mov    edx,eax
c001bcf1:	c1 fa 1f             	sar    edx,0x1f
c001bcf4:	83 e2 03             	and    edx,0x3
c001bcf7:	01 d0                	add    eax,edx
c001bcf9:	c1 f8 02             	sar    eax,0x2
c001bcfc:	05 a0 0f 00 00       	add    eax,0xfa0
c001bd01:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bd05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd09:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bd0d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001bd10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd14:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001bd1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd1f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001bd26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd2a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bd2d:	c1 e0 02             	shl    eax,0x2
c001bd30:	83 ec 0c             	sub    esp,0xc
c001bd33:	50                   	push   eax
c001bd34:	e8 aa 02 ff ff       	call   c000bfe3 <malloc>
c001bd39:	83 c4 10             	add    esp,0x10
c001bd3c:	89 c2                	mov    edx,eax
c001bd3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd42:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001bd45:	83 ec 04             	sub    esp,0x4
c001bd48:	8d 44 24 10          	lea    eax,[esp+0x10]
c001bd4c:	50                   	push   eax
c001bd4d:	6a 01                	push   0x1
c001bd4f:	6a 04                	push   0x4
c001bd51:	e8 96 cb fe ff       	call   c00088ec <src_new>
c001bd56:	83 c4 10             	add    esp,0x10
c001bd59:	89 c2                	mov    edx,eax
c001bd5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd5f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bd62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd66:	85 c0                	test   eax,eax
c001bd68:	74 10                	je     c001bd7a <SoundChannel::SoundChannel(int, int, int, int)+0xf4>
c001bd6a:	83 ec 0c             	sub    esp,0xc
c001bd6d:	68 18 34 02 c0       	push   0xc0023418
c001bd72:	e8 cd 9c ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c001bd77:	83 c4 10             	add    esp,0x10
c001bd7a:	90                   	nop
c001bd7b:	83 c4 1c             	add    esp,0x1c
c001bd7e:	c3                   	ret    
c001bd7f:	90                   	nop

c001bd80 <SoundChannel::play()>:
c001bd80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd84:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001bd88:	c3                   	ret    
c001bd89:	90                   	nop

c001bd8a <SoundChannel::paused()>:
c001bd8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd8e:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001bd91:	c3                   	ret    

c001bd92 <SoundChannel::getSampleRate()>:
c001bd92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd96:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd98:	c3                   	ret    
c001bd99:	90                   	nop

c001bd9a <SoundChannel::getBits()>:
c001bd9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bda1:	c3                   	ret    

c001bda2 <SoundChannel::getBufferUsed()>:
c001bda2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bda6:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001bda9:	c3                   	ret    

c001bdaa <SoundChannel::getBufferSize()>:
c001bdaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdae:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bdb1:	c3                   	ret    

c001bdb2 <SoundChannel::unbuffer(float*, int, int)>:
c001bdb2:	53                   	push   ebx
c001bdb3:	83 ec 40             	sub    esp,0x40
c001bdb6:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001bdba:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001bdc2:	db 03                	fild   DWORD PTR [ebx]
c001bdc4:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001bdc8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bdcb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bdcf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001bdd2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bdd6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bdda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bdde:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bde2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bde6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bdea:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001bded:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001bdf1:	50                   	push   eax
c001bdf2:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001bdf5:	e8 ac c7 fe ff       	call   c00085a6 <src_process>
c001bdfa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bdfe:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001be01:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001be04:	83 c4 0c             	add    esp,0xc
c001be07:	29 d0                	sub    eax,edx
c001be09:	c1 e0 02             	shl    eax,0x2
c001be0c:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001be0f:	50                   	push   eax
c001be10:	8d 04 91             	lea    eax,[ecx+edx*4]
c001be13:	50                   	push   eax
c001be14:	51                   	push   ecx
c001be15:	e8 3c 48 fe ff       	call   c0000656 <memmove>
c001be1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001be1e:	83 c4 48             	add    esp,0x48
c001be21:	5b                   	pop    ebx
c001be22:	c3                   	ret    
c001be23:	90                   	nop

c001be24 <SoundChannel::buffer8(unsigned char*, int)>:
c001be24:	53                   	push   ebx
c001be25:	31 c0                	xor    eax,eax
c001be27:	83 ec 08             	sub    esp,0x8
c001be2a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001be2e:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001be31:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001be34:	74 35                	je     c001be6b <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001be36:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001be3a:	7d 2f                	jge    c001be6b <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001be3c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001be40:	d9 05 34 34 02 c0    	fld    DWORD PTR ds:0xc0023434
c001be46:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001be4a:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001be4f:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001be52:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001be56:	40                   	inc    eax
c001be57:	8d 59 01             	lea    ebx,[ecx+0x1]
c001be5a:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001be5d:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001be60:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001be63:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001be66:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001be69:	eb c9                	jmp    c001be34 <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001be6b:	83 c4 08             	add    esp,0x8
c001be6e:	5b                   	pop    ebx
c001be6f:	c3                   	ret    

c001be70 <SoundDevice::SoundDevice(char const*)>:
c001be70:	83 ec 1c             	sub    esp,0x1c
c001be73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be77:	83 ec 08             	sub    esp,0x8
c001be7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001be7e:	50                   	push   eax
c001be7f:	e8 96 49 ff ff       	call   c001081a <Device::Device(char const*)>
c001be84:	83 c4 10             	add    esp,0x10
c001be87:	ba 40 34 02 c0       	mov    edx,0xc0023440
c001be8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be90:	89 10                	mov    DWORD PTR [eax],edx
c001be92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be96:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001bea0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bea4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001beae:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001beb6:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001bebb:	7f 19                	jg     c001bed6 <SoundDevice::SoundDevice(char const*)+0x66>
c001bebd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bec1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bec5:	83 c2 54             	add    edx,0x54
c001bec8:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001bed0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bed4:	eb e0                	jmp    c001beb6 <SoundDevice::SoundDevice(char const*)+0x46>
c001bed6:	90                   	nop
c001bed7:	83 c4 1c             	add    esp,0x1c
c001beda:	c3                   	ret    
c001bedb:	90                   	nop

c001bedc <SoundDevice::~SoundDevice()>:
c001bedc:	53                   	push   ebx
c001bedd:	83 ec 18             	sub    esp,0x18
c001bee0:	ba 40 34 02 c0       	mov    edx,0xc0023440
c001bee5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bee9:	89 10                	mov    DWORD PTR [eax],edx
c001beeb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bef3:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001bef8:	7f 46                	jg     c001bf40 <SoundDevice::~SoundDevice()+0x64>
c001befa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001befe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bf02:	83 c2 54             	add    edx,0x54
c001bf05:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001bf09:	85 c0                	test   eax,eax
c001bf0b:	74 2d                	je     c001bf3a <SoundDevice::~SoundDevice()+0x5e>
c001bf0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf11:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bf15:	83 c2 54             	add    edx,0x54
c001bf18:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001bf1c:	85 db                	test   ebx,ebx
c001bf1e:	74 1a                	je     c001bf3a <SoundDevice::~SoundDevice()+0x5e>
c001bf20:	83 ec 0c             	sub    esp,0xc
c001bf23:	53                   	push   ebx
c001bf24:	e8 ff fc ff ff       	call   c001bc28 <SoundChannel::~SoundChannel()>
c001bf29:	83 c4 10             	add    esp,0x10
c001bf2c:	83 ec 08             	sub    esp,0x8
c001bf2f:	6a 2c                	push   0x2c
c001bf31:	53                   	push   ebx
c001bf32:	e8 b8 31 ff ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c001bf37:	83 c4 10             	add    esp,0x10
c001bf3a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bf3e:	eb b3                	jmp    c001bef3 <SoundDevice::~SoundDevice()+0x17>
c001bf40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf44:	83 ec 0c             	sub    esp,0xc
c001bf47:	50                   	push   eax
c001bf48:	e8 83 45 ff ff       	call   c00104d0 <Device::~Device()>
c001bf4d:	83 c4 10             	add    esp,0x10
c001bf50:	90                   	nop
c001bf51:	83 c4 18             	add    esp,0x18
c001bf54:	5b                   	pop    ebx
c001bf55:	c3                   	ret    

c001bf56 <SoundDevice::~SoundDevice()>:
c001bf56:	83 ec 0c             	sub    esp,0xc
c001bf59:	83 ec 0c             	sub    esp,0xc
c001bf5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf60:	e8 77 ff ff ff       	call   c001bedc <SoundDevice::~SoundDevice()>
c001bf65:	83 c4 10             	add    esp,0x10
c001bf68:	83 ec 08             	sub    esp,0x8
c001bf6b:	68 e4 01 00 00       	push   0x1e4
c001bf70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf74:	e8 76 31 ff ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c001bf79:	83 c4 10             	add    esp,0x10
c001bf7c:	83 c4 0c             	add    esp,0xc
c001bf7f:	c3                   	ret    

c001bf80 <SoundDevice::getFreeChannelNum()>:
c001bf80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bf84:	31 c0                	xor    eax,eax
c001bf86:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001bf8e:	74 09                	je     c001bf99 <SoundDevice::getFreeChannelNum()+0x19>
c001bf90:	40                   	inc    eax
c001bf91:	83 f8 20             	cmp    eax,0x20
c001bf94:	75 f0                	jne    c001bf86 <SoundDevice::getFreeChannelNum()+0x6>
c001bf96:	83 c8 ff             	or     eax,0xffffffff
c001bf99:	c3                   	ret    

c001bf9a <SoundDevice::addChannel(SoundChannel*)>:
c001bf9a:	56                   	push   esi
c001bf9b:	53                   	push   ebx
c001bf9c:	51                   	push   ecx
c001bf9d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfa1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bfa5:	53                   	push   ebx
c001bfa6:	e8 d5 ff ff ff       	call   c001bf80 <SoundDevice::getFreeChannelNum()>
c001bfab:	5a                   	pop    edx
c001bfac:	83 f8 ff             	cmp    eax,0xffffffff
c001bfaf:	74 51                	je     c001c002 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001bfb1:	85 f6                	test   esi,esi
c001bfb3:	74 4d                	je     c001c002 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001bfb5:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001bfbc:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001bfc3:	75 30                	jne    c001bff5 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001bfc5:	83 ec 0c             	sub    esp,0xc
c001bfc8:	56                   	push   esi
c001bfc9:	e8 c4 fd ff ff       	call   c001bd92 <SoundChannel::getSampleRate()>
c001bfce:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001bfd4:	89 34 24             	mov    DWORD PTR [esp],esi
c001bfd7:	e8 be fd ff ff       	call   c001bd9a <SoundChannel::getBits()>
c001bfdc:	83 c4 0c             	add    esp,0xc
c001bfdf:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001bfe5:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bfe7:	50                   	push   eax
c001bfe8:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001bfee:	53                   	push   ebx
c001bfef:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001bff2:	83 c4 10             	add    esp,0x10
c001bff5:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001bffb:	b8 01 00 00 00       	mov    eax,0x1
c001c000:	eb 03                	jmp    c001c005 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001c002:	83 c8 ff             	or     eax,0xffffffff
c001c005:	5a                   	pop    edx
c001c006:	5b                   	pop    ebx
c001c007:	5e                   	pop    esi
c001c008:	c3                   	ret    
c001c009:	90                   	nop

c001c00a <SoundDevice::removeChannel(int)>:
c001c00a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c00e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c012:	83 fa 1f             	cmp    edx,0x1f
c001c015:	77 23                	ja     c001c03a <SoundDevice::removeChannel(int)+0x30>
c001c017:	8d 14 90             	lea    edx,[eax+edx*4]
c001c01a:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001c021:	74 17                	je     c001c03a <SoundDevice::removeChannel(int)+0x30>
c001c023:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001c02d:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001c033:	75 05                	jne    c001c03a <SoundDevice::removeChannel(int)+0x30>
c001c035:	8b 00                	mov    eax,DWORD PTR [eax]
c001c037:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001c03a:	c3                   	ret    
c001c03b:	90                   	nop

c001c03c <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001c03c:	56                   	push   esi
c001c03d:	53                   	push   ebx
c001c03e:	31 db                	xor    ebx,ebx
c001c040:	83 ec 14             	sub    esp,0x14
c001c043:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001c047:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001c04b:	7d 55                	jge    c001c0a2 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001c04d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c051:	d9 e8                	fld1   
c001c053:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001c056:	d8 0d 70 34 02 c0    	fmul   DWORD PTR ds:0xc0023470
c001c05c:	d8 0d 74 34 02 c0    	fmul   DWORD PTR ds:0xc0023474
c001c062:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001c066:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001c06a:	d8 15 78 34 02 c0    	fcom   DWORD PTR ds:0xc0023478
c001c070:	df e0                	fnstsw ax
c001c072:	9e                   	sahf   
c001c073:	72 08                	jb     c001c07d <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001c075:	dd d8                	fstp   st(0)
c001c077:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001c07b:	eb 22                	jmp    c001c09f <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001c07d:	d9 ee                	fldz   
c001c07f:	d8 d9                	fcomp  st(1)
c001c081:	df e0                	fnstsw ax
c001c083:	9e                   	sahf   
c001c084:	72 08                	jb     c001c08e <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001c086:	dd d8                	fstp   st(0)
c001c088:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001c08c:	eb 11                	jmp    c001c09f <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001c08e:	83 ec 10             	sub    esp,0x10
c001c091:	d9 1c 24             	fstp   DWORD PTR [esp]
c001c094:	e8 c3 36 00 00       	call   c001f75c <lrintf>
c001c099:	83 c4 10             	add    esp,0x10
c001c09c:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001c09f:	43                   	inc    ebx
c001c0a0:	eb a5                	jmp    c001c047 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001c0a2:	83 c4 14             	add    esp,0x14
c001c0a5:	5b                   	pop    ebx
c001c0a6:	5e                   	pop    esi
c001c0a7:	c3                   	ret    

c001c0a8 <SoundDevice::getAudio(int, float*, float*)>:
c001c0a8:	55                   	push   ebp
c001c0a9:	57                   	push   edi
c001c0aa:	56                   	push   esi
c001c0ab:	53                   	push   ebx
c001c0ac:	31 db                	xor    ebx,ebx
c001c0ae:	83 ec 20             	sub    esp,0x20
c001c0b1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c0b5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c0b9:	c1 e0 02             	shl    eax,0x2
c001c0bc:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c0c0:	50                   	push   eax
c001c0c1:	6a 00                	push   0x0
c001c0c3:	55                   	push   ebp
c001c0c4:	e8 fb 45 fe ff       	call   c00006c4 <memset>
c001c0c9:	83 c4 10             	add    esp,0x10
c001c0cc:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c0d0:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001c0d7:	85 c0                	test   eax,eax
c001c0d9:	0f 84 8c 00 00 00    	je     c001c16b <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c0df:	83 ec 0c             	sub    esp,0xc
c001c0e2:	50                   	push   eax
c001c0e3:	e8 a2 fc ff ff       	call   c001bd8a <SoundChannel::paused()>
c001c0e8:	83 c4 10             	add    esp,0x10
c001c0eb:	84 c0                	test   al,al
c001c0ed:	75 7c                	jne    c001c16b <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c0ef:	83 ec 0c             	sub    esp,0xc
c001c0f2:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c0f9:	e8 76 fb ff ff       	call   c001bc74 <SoundChannel::getVolume()>
c001c0fe:	83 c4 10             	add    esp,0x10
c001c101:	85 c0                	test   eax,eax
c001c103:	74 66                	je     c001c16b <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c105:	83 ec 0c             	sub    esp,0xc
c001c108:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c10f:	e8 60 fb ff ff       	call   c001bc74 <SoundChannel::getVolume()>
c001c114:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c118:	d9 05 7c 34 02 c0    	fld    DWORD PTR ds:0xc002347c
c001c11e:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001c122:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001c126:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c12a:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001c130:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001c134:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c13b:	e8 72 fc ff ff       	call   c001bdb2 <SoundChannel::unbuffer(float*, int, int)>
c001c140:	83 c4 20             	add    esp,0x20
c001c143:	31 d2                	xor    edx,edx
c001c145:	39 c2                	cmp    edx,eax
c001c147:	7d 1c                	jge    c001c165 <SoundDevice::getAudio(int, float*, float*)+0xbd>
c001c149:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001c14d:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001c151:	d8 0c 91             	fmul   DWORD PTR [ecx+edx*4]
c001c154:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001c15a:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001c15e:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001c162:	42                   	inc    edx
c001c163:	eb e0                	jmp    c001c145 <SoundDevice::getAudio(int, float*, float*)+0x9d>
c001c165:	39 c7                	cmp    edi,eax
c001c167:	7e 02                	jle    c001c16b <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c169:	89 c7                	mov    edi,eax
c001c16b:	43                   	inc    ebx
c001c16c:	83 fb 20             	cmp    ebx,0x20
c001c16f:	0f 85 5b ff ff ff    	jne    c001c0d0 <SoundDevice::getAudio(int, float*, float*)+0x28>
c001c175:	83 c4 1c             	add    esp,0x1c
c001c178:	89 f8                	mov    eax,edi
c001c17a:	5b                   	pop    ebx
c001c17b:	5e                   	pop    esi
c001c17c:	5f                   	pop    edi
c001c17d:	5d                   	pop    ebp
c001c17e:	c3                   	ret    
c001c17f:	90                   	nop

c001c180 <PCI::open(int, int, void*)>:
c001c180:	83 ec 18             	sub    esp,0x18
c001c183:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c187:	8b 10                	mov    edx,DWORD PTR [eax]
c001c189:	50                   	push   eax
c001c18a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001c18d:	31 c0                	xor    eax,eax
c001c18f:	83 c4 1c             	add    esp,0x1c
c001c192:	c3                   	ret    
c001c193:	90                   	nop

c001c194 <PCI::close(int, int, void*)>:
c001c194:	31 c0                	xor    eax,eax
c001c196:	c3                   	ret    
c001c197:	90                   	nop

c001c198 <PCI::PCI()>:
c001c198:	83 ec 0c             	sub    esp,0xc
c001c19b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c19f:	83 ec 08             	sub    esp,0x8
c001c1a2:	68 80 34 02 c0       	push   0xc0023480
c001c1a7:	50                   	push   eax
c001c1a8:	e8 f7 3c ff ff       	call   c000fea4 <Bus::Bus(char const*)>
c001c1ad:	83 c4 10             	add    esp,0x10
c001c1b0:	ba 2c 35 02 c0       	mov    edx,0xc002352c
c001c1b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1b9:	89 10                	mov    DWORD PTR [eax],edx
c001c1bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1bf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c1c5:	31 d2                	xor    edx,edx
c001c1c7:	88 c2                	mov    dl,al
c001c1c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1cd:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001c1d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1d8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c1de:	31 d2                	xor    edx,edx
c001c1e0:	88 c2                	mov    dl,al
c001c1e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1e6:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001c1eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1ef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c1f5:	8d 50 01             	lea    edx,[eax+0x1]
c001c1f8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c1fc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001c202:	31 d2                	xor    edx,edx
c001c204:	88 c2                	mov    dl,al
c001c206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c20a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001c20e:	83 c9 c0             	or     ecx,0xffffffc0
c001c211:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001c215:	90                   	nop
c001c216:	83 c4 0c             	add    esp,0xc
c001c219:	c3                   	ret    

c001c21a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c21a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c21e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c223:	c1 e0 10             	shl    eax,0x10
c001c226:	89 ca                	mov    edx,ecx
c001c228:	81 e2 fc 00 00 00    	and    edx,0xfc
c001c22e:	09 d0                	or     eax,edx
c001c230:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001c235:	c1 e2 08             	shl    edx,0x8
c001c238:	09 d0                	or     eax,edx
c001c23a:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001c23f:	c1 e2 0b             	shl    edx,0xb
c001c242:	09 d0                	or     eax,edx
c001c244:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c249:	0d 00 00 00 80       	or     eax,0x80000000
c001c24e:	ef                   	out    dx,eax
c001c24f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c254:	ed                   	in     eax,dx
c001c255:	83 e1 02             	and    ecx,0x2
c001c258:	0f b6 c9             	movzx  ecx,cl
c001c25b:	c1 e1 03             	shl    ecx,0x3
c001c25e:	d3 e8                	shr    eax,cl
c001c260:	c3                   	ret    
c001c261:	90                   	nop

c001c262 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001c262:	6a 00                	push   0x0
c001c264:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c269:	50                   	push   eax
c001c26a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c26f:	50                   	push   eax
c001c270:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c275:	50                   	push   eax
c001c276:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c27a:	e8 9b ff ff ff       	call   c001c21a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c27f:	83 c4 14             	add    esp,0x14
c001c282:	c3                   	ret    
c001c283:	90                   	nop

c001c284 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001c284:	6a 0e                	push   0xe
c001c286:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c28b:	50                   	push   eax
c001c28c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c291:	50                   	push   eax
c001c292:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c297:	50                   	push   eax
c001c298:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c29c:	e8 79 ff ff ff       	call   c001c21a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2a1:	83 c4 14             	add    esp,0x14
c001c2a4:	0f b6 c0             	movzx  eax,al
c001c2a7:	c3                   	ret    

c001c2a8 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001c2a8:	55                   	push   ebp
c001c2a9:	57                   	push   edi
c001c2aa:	56                   	push   esi
c001c2ab:	53                   	push   ebx
c001c2ac:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001c2b1:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001c2b6:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001c2bb:	6a 0a                	push   0xa
c001c2bd:	56                   	push   esi
c001c2be:	55                   	push   ebp
c001c2bf:	57                   	push   edi
c001c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c2c4:	e8 51 ff ff ff       	call   c001c21a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2c9:	6a 0a                	push   0xa
c001c2cb:	89 c3                	mov    ebx,eax
c001c2cd:	56                   	push   esi
c001c2ce:	55                   	push   ebp
c001c2cf:	57                   	push   edi
c001c2d0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001c2d4:	e8 41 ff ff ff       	call   c001c21a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2d9:	83 c4 28             	add    esp,0x28
c001c2dc:	0f b6 db             	movzx  ebx,bl
c001c2df:	25 00 ff 00 00       	and    eax,0xff00
c001c2e4:	09 d8                	or     eax,ebx
c001c2e6:	5b                   	pop    ebx
c001c2e7:	5e                   	pop    esi
c001c2e8:	5f                   	pop    edi
c001c2e9:	5d                   	pop    ebp
c001c2ea:	c3                   	ret    
c001c2eb:	90                   	nop

c001c2ec <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001c2ec:	6a 08                	push   0x8
c001c2ee:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c2f3:	50                   	push   eax
c001c2f4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c2f9:	50                   	push   eax
c001c2fa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c2ff:	50                   	push   eax
c001c300:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c304:	e8 11 ff ff ff       	call   c001c21a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c309:	83 c4 14             	add    esp,0x14
c001c30c:	0f b6 c4             	movzx  eax,ah
c001c30f:	c3                   	ret    

c001c310 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001c310:	6a 08                	push   0x8
c001c312:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c317:	50                   	push   eax
c001c318:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c31d:	50                   	push   eax
c001c31e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c323:	50                   	push   eax
c001c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c328:	e8 ed fe ff ff       	call   c001c21a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c32d:	83 c4 14             	add    esp,0x14
c001c330:	c3                   	ret    
c001c331:	90                   	nop

c001c332 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001c332:	6a 3c                	push   0x3c
c001c334:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c339:	50                   	push   eax
c001c33a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c33f:	50                   	push   eax
c001c340:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c345:	50                   	push   eax
c001c346:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c34a:	e8 cb fe ff ff       	call   c001c21a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c34f:	83 c4 14             	add    esp,0x14
c001c352:	c3                   	ret    
c001c353:	90                   	nop

c001c354 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001c354:	6a 18                	push   0x18
c001c356:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c35b:	50                   	push   eax
c001c35c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c361:	50                   	push   eax
c001c362:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c367:	50                   	push   eax
c001c368:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c36c:	e8 a9 fe ff ff       	call   c001c21a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c371:	83 c4 14             	add    esp,0x14
c001c374:	0f b6 c4             	movzx  eax,ah
c001c377:	c3                   	ret    

c001c378 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c378:	55                   	push   ebp
c001c379:	57                   	push   edi
c001c37a:	56                   	push   esi
c001c37b:	53                   	push   ebx
c001c37c:	50                   	push   eax
c001c37d:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001c381:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001c386:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001c38d:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c392:	8d 43 12             	lea    eax,[ebx+0x12]
c001c395:	83 c3 10             	add    ebx,0x10
c001c398:	0f b6 c0             	movzx  eax,al
c001c39b:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001c3a0:	50                   	push   eax
c001c3a1:	51                   	push   ecx
c001c3a2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c3a6:	57                   	push   edi
c001c3a7:	55                   	push   ebp
c001c3a8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c3ac:	e8 69 fe ff ff       	call   c001c21a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c3b1:	0f b6 db             	movzx  ebx,bl
c001c3b4:	53                   	push   ebx
c001c3b5:	89 c6                	mov    esi,eax
c001c3b7:	c1 e6 10             	shl    esi,0x10
c001c3ba:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c3be:	51                   	push   ecx
c001c3bf:	57                   	push   edi
c001c3c0:	55                   	push   ebp
c001c3c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c3c5:	e8 50 fe ff ff       	call   c001c21a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c3ca:	83 c4 2c             	add    esp,0x2c
c001c3cd:	0f b7 c0             	movzx  eax,ax
c001c3d0:	5b                   	pop    ebx
c001c3d1:	09 f0                	or     eax,esi
c001c3d3:	5e                   	pop    esi
c001c3d4:	5f                   	pop    edi
c001c3d5:	5d                   	pop    ebp
c001c3d6:	c3                   	ret    
c001c3d7:	90                   	nop

c001c3d8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001c3d8:	53                   	push   ebx
c001c3d9:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c3de:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c3e3:	c1 e1 10             	shl    ecx,0x10
c001c3e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c3ea:	25 fc 00 00 00       	and    eax,0xfc
c001c3ef:	09 c1                	or     ecx,eax
c001c3f1:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c3f6:	c1 e0 08             	shl    eax,0x8
c001c3f9:	09 c1                	or     ecx,eax
c001c3fb:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001c400:	c1 e0 0b             	shl    eax,0xb
c001c403:	09 c1                	or     ecx,eax
c001c405:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001c40b:	89 c8                	mov    eax,ecx
c001c40d:	ef                   	out    dx,eax
c001c40e:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c413:	ed                   	in     eax,dx
c001c414:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001c419:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001c41e:	74 0a                	je     c001c42a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001c420:	0f b7 d8             	movzx  ebx,ax
c001c423:	89 d0                	mov    eax,edx
c001c425:	c1 e0 10             	shl    eax,0x10
c001c428:	eb 05                	jmp    c001c42f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001c42a:	66 31 c0             	xor    ax,ax
c001c42d:	89 d3                	mov    ebx,edx
c001c42f:	09 c3                	or     ebx,eax
c001c431:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c436:	89 c8                	mov    eax,ecx
c001c438:	ef                   	out    dx,eax
c001c439:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c43e:	89 d8                	mov    eax,ebx
c001c440:	ef                   	out    dx,eax
c001c441:	5b                   	pop    ebx
c001c442:	c3                   	ret    
c001c443:	90                   	nop

c001c444 <PCI::checkBus(unsigned char)>:
c001c444:	56                   	push   esi
c001c445:	31 f6                	xor    esi,esi
c001c447:	53                   	push   ebx
c001c448:	51                   	push   ecx
c001c449:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c001c44d:	52                   	push   edx
c001c44e:	56                   	push   esi
c001c44f:	46                   	inc    esi
c001c450:	0f b6 c3             	movzx  eax,bl
c001c453:	50                   	push   eax
c001c454:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c458:	e8 4d 03 00 00       	call   c001c7aa <PCI::checkDevice(unsigned char, unsigned char)>
c001c45d:	83 c4 10             	add    esp,0x10
c001c460:	83 fe 20             	cmp    esi,0x20
c001c463:	75 e8                	jne    c001c44d <PCI::checkBus(unsigned char)+0x9>
c001c465:	58                   	pop    eax
c001c466:	5b                   	pop    ebx
c001c467:	5e                   	pop    esi
c001c468:	c3                   	ret    
c001c469:	90                   	nop

c001c46a <PCI::foundDevice(PCIDeviceInfo)>:
c001c46a:	55                   	push   ebp
c001c46b:	57                   	push   edi
c001c46c:	56                   	push   esi
c001c46d:	53                   	push   ebx
c001c46e:	83 ec 1c             	sub    esp,0x1c
c001c471:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c475:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001c47b:	0f 84 51 01 00 00    	je     c001c5d2 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c481:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c485:	66 81 f9 06 04       	cmp    cx,0x406
c001c48a:	75 2c                	jne    c001c4b8 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001c48c:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001c491:	50                   	push   eax
c001c492:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001c497:	50                   	push   eax
c001c498:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001c49d:	50                   	push   eax
c001c49e:	56                   	push   esi
c001c49f:	e8 b0 fe ff ff       	call   c001c354 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c4a4:	0f b6 c0             	movzx  eax,al
c001c4a7:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c4ab:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001c4af:	83 c4 2c             	add    esp,0x2c
c001c4b2:	5b                   	pop    ebx
c001c4b3:	5e                   	pop    esi
c001c4b4:	5f                   	pop    edi
c001c4b5:	5d                   	pop    ebp
c001c4b6:	eb 8c                	jmp    c001c444 <PCI::checkBus(unsigned char)>
c001c4b8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c4bc:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001c4c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c4c6:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001c4ca:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c4ce:	88 d3                	mov    bl,dl
c001c4d0:	85 c0                	test   eax,eax
c001c4d2:	74 33                	je     c001c507 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001c4d4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c4d7:	85 d2                	test   edx,edx
c001c4d9:	74 28                	je     c001c503 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c4db:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001c4e1:	31 ef                	xor    edi,ebp
c001c4e3:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001c4e9:	75 18                	jne    c001c503 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c4eb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c4ef:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001c4f5:	75 0c                	jne    c001c503 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c4f7:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001c4fd:	0f 84 cf 00 00 00    	je     c001c5d2 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c503:	8b 00                	mov    eax,DWORD PTR [eax]
c001c505:	eb c9                	jmp    c001c4d0 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001c507:	66 81 f9 01 06       	cmp    cx,0x601
c001c50c:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001c510:	75 18                	jne    c001c52a <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001c512:	83 ec 0c             	sub    esp,0xc
c001c515:	68 58 01 00 00       	push   0x158
c001c51a:	e8 c1 2b ff ff       	call   c000f0e0 <operator new(unsigned long)>
c001c51f:	59                   	pop    ecx
c001c520:	89 c5                	mov    ebp,eax
c001c522:	5f                   	pop    edi
c001c523:	68 88 34 02 c0       	push   0xc0023488
c001c528:	eb 7d                	jmp    c001c5a7 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001c52a:	66 81 f9 01 01       	cmp    cx,0x101
c001c52f:	75 60                	jne    c001c591 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001c531:	83 ec 0c             	sub    esp,0xc
c001c534:	68 70 02 00 00       	push   0x270
c001c539:	e8 a2 2b ff ff       	call   c000f0e0 <operator new(unsigned long)>
c001c53e:	89 04 24             	mov    DWORD PTR [esp],eax
c001c541:	89 c5                	mov    ebp,eax
c001c543:	e8 26 03 00 00       	call   c001c86e <IDE::IDE()>
c001c548:	58                   	pop    eax
c001c549:	5a                   	pop    edx
c001c54a:	55                   	push   ebp
c001c54b:	56                   	push   esi
c001c54c:	e8 d9 40 ff ff       	call   c001062a <Device::addChild(Device*)>
c001c551:	83 ec 1c             	sub    esp,0x1c
c001c554:	b9 09 00 00 00       	mov    ecx,0x9
c001c559:	fc                   	cld    
c001c55a:	89 e7                	mov    edi,esp
c001c55c:	89 de                	mov    esi,ebx
c001c55e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c560:	55                   	push   ebp
c001c561:	e8 a2 3f ff ff       	call   c0010508 <Device::preOpenPCI(PCIDeviceInfo)>
c001c566:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c569:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001c56d:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001c575:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001c57d:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001c585:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c588:	83 c4 4c             	add    esp,0x4c
c001c58b:	5b                   	pop    ebx
c001c58c:	5e                   	pop    esi
c001c58d:	5f                   	pop    edi
c001c58e:	5d                   	pop    ebp
c001c58f:	ff e0                	jmp    eax
c001c591:	83 ec 0c             	sub    esp,0xc
c001c594:	68 58 01 00 00       	push   0x158
c001c599:	e8 42 2b ff ff       	call   c000f0e0 <operator new(unsigned long)>
c001c59e:	59                   	pop    ecx
c001c59f:	89 c5                	mov    ebp,eax
c001c5a1:	5f                   	pop    edi
c001c5a2:	68 a7 34 02 c0       	push   0xc00234a7
c001c5a7:	55                   	push   ebp
c001c5a8:	e8 69 43 ff ff       	call   c0010916 <DriverlessDevice::DriverlessDevice(char const*)>
c001c5ad:	58                   	pop    eax
c001c5ae:	5a                   	pop    edx
c001c5af:	55                   	push   ebp
c001c5b0:	56                   	push   esi
c001c5b1:	e8 74 40 ff ff       	call   c001062a <Device::addChild(Device*)>
c001c5b6:	b9 09 00 00 00       	mov    ecx,0x9
c001c5bb:	fc                   	cld    
c001c5bc:	89 df                	mov    edi,ebx
c001c5be:	89 de                	mov    esi,ebx
c001c5c0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c5c2:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001c5c6:	83 c4 2c             	add    esp,0x2c
c001c5c9:	5b                   	pop    ebx
c001c5ca:	5e                   	pop    esi
c001c5cb:	5f                   	pop    edi
c001c5cc:	5d                   	pop    ebp
c001c5cd:	e9 36 3f ff ff       	jmp    c0010508 <Device::preOpenPCI(PCIDeviceInfo)>
c001c5d2:	83 c4 1c             	add    esp,0x1c
c001c5d5:	5b                   	pop    ebx
c001c5d6:	5e                   	pop    esi
c001c5d7:	5f                   	pop    edi
c001c5d8:	5d                   	pop    ebp
c001c5d9:	c3                   	ret    

c001c5da <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c5da:	55                   	push   ebp
c001c5db:	57                   	push   edi
c001c5dc:	56                   	push   esi
c001c5dd:	53                   	push   ebx
c001c5de:	83 ec 5c             	sub    esp,0x5c
c001c5e1:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001c5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c5e9:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001c5ed:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c5f1:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001c5f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c5f9:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001c5fe:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001c603:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001c608:	6a 0c                	push   0xc
c001c60a:	55                   	push   ebp
c001c60b:	53                   	push   ebx
c001c60c:	57                   	push   edi
c001c60d:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001c614:	e8 01 fc ff ff       	call   c001c21a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c619:	83 c4 0c             	add    esp,0xc
c001c61c:	6a 00                	push   0x0
c001c61e:	68 c1 34 02 c0       	push   0xc00234c1
c001c623:	e8 ed 2b ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001c628:	55                   	push   ebp
c001c629:	53                   	push   ebx
c001c62a:	57                   	push   edi
c001c62b:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c632:	e8 71 fc ff ff       	call   c001c2a8 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c637:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001c63c:	83 c4 20             	add    esp,0x20
c001c63f:	55                   	push   ebp
c001c640:	53                   	push   ebx
c001c641:	57                   	push   edi
c001c642:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c646:	e8 e7 fc ff ff       	call   c001c332 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c64b:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001c652:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001c656:	55                   	push   ebp
c001c657:	53                   	push   ebx
c001c658:	57                   	push   edi
c001c659:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c660:	e8 b5 fb ff ff       	call   c001c21a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c665:	0f b6 c4             	movzx  eax,ah
c001c668:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c66c:	83 c4 18             	add    esp,0x18
c001c66f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c673:	68 d5 34 02 c0       	push   0xc00234d5
c001c678:	e8 98 2b ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001c67d:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001c681:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001c685:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001c68a:	83 c4 10             	add    esp,0x10
c001c68d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001c693:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001c69a:	74 6c                	je     c001c708 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001c69c:	31 f6                	xor    esi,esi
c001c69e:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c001c6a4:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c6aa:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001c6b0:	7e 56                	jle    c001c708 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001c6b2:	8d 14 f2             	lea    edx,[edx+esi*8]
c001c6b5:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001c6bc:	39 cb                	cmp    ebx,ecx
c001c6be:	75 45                	jne    c001c705 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001c6c0:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001c6c7:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001c6cb:	75 38                	jne    c001c705 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001c6cd:	83 ec 0c             	sub    esp,0xc
c001c6d0:	68 e4 34 02 c0       	push   0xc00234e4
c001c6d5:	e8 3b 2b ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001c6da:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c001c6e0:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c6e6:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001c6ee:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001c6f2:	52                   	push   edx
c001c6f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c6f7:	53                   	push   ebx
c001c6f8:	68 09 35 02 c0       	push   0xc0023509
c001c6fd:	e8 13 2b ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001c702:	83 c4 20             	add    esp,0x20
c001c705:	46                   	inc    esi
c001c706:	eb 96                	jmp    c001c69e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001c708:	31 d2                	xor    edx,edx
c001c70a:	83 ec 0c             	sub    esp,0xc
c001c70d:	55                   	push   ebp
c001c70e:	53                   	push   ebx
c001c70f:	57                   	push   edi
c001c710:	52                   	push   edx
c001c711:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c715:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c71c:	e8 57 fc ff ff       	call   c001c378 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c721:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c725:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001c729:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c72d:	42                   	inc    edx
c001c72e:	83 c4 20             	add    esp,0x20
c001c731:	83 fa 06             	cmp    edx,0x6
c001c734:	75 d4                	jne    c001c70a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001c736:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c73a:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001c73e:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001c742:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001c746:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001c74a:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001c74e:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c753:	86 e0                	xchg   al,ah
c001c755:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001c75a:	55                   	push   ebp
c001c75b:	53                   	push   ebx
c001c75c:	57                   	push   edi
c001c75d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c761:	e8 86 fb ff ff       	call   c001c2ec <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c766:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c76a:	55                   	push   ebp
c001c76b:	53                   	push   ebx
c001c76c:	57                   	push   edi
c001c76d:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c774:	e8 e9 fa ff ff       	call   c001c262 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c779:	83 ec 0c             	sub    esp,0xc
c001c77c:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001c781:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001c785:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001c789:	b9 09 00 00 00       	mov    ecx,0x9
c001c78e:	fc                   	cld    
c001c78f:	89 e7                	mov    edi,esp
c001c791:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c793:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001c79a:	e8 cb fc ff ff       	call   c001c46a <PCI::foundDevice(PCIDeviceInfo)>
c001c79f:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c7a5:	5b                   	pop    ebx
c001c7a6:	5e                   	pop    esi
c001c7a7:	5f                   	pop    edi
c001c7a8:	5d                   	pop    ebp
c001c7a9:	c3                   	ret    

c001c7aa <PCI::checkDevice(unsigned char, unsigned char)>:
c001c7aa:	55                   	push   ebp
c001c7ab:	57                   	push   edi
c001c7ac:	56                   	push   esi
c001c7ad:	53                   	push   ebx
c001c7ae:	83 ec 0c             	sub    esp,0xc
c001c7b1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c7b6:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c7ba:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c7bf:	6a 00                	push   0x0
c001c7c1:	56                   	push   esi
c001c7c2:	57                   	push   edi
c001c7c3:	55                   	push   ebp
c001c7c4:	e8 99 fa ff ff       	call   c001c262 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c7c9:	6a 00                	push   0x0
c001c7cb:	56                   	push   esi
c001c7cc:	57                   	push   edi
c001c7cd:	55                   	push   ebp
c001c7ce:	e8 07 fe ff ff       	call   c001c5da <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c7d3:	83 c4 20             	add    esp,0x20
c001c7d6:	6a 00                	push   0x0
c001c7d8:	56                   	push   esi
c001c7d9:	57                   	push   edi
c001c7da:	55                   	push   ebp
c001c7db:	e8 a4 fa ff ff       	call   c001c284 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c7e0:	83 c4 10             	add    esp,0x10
c001c7e3:	84 c0                	test   al,al
c001c7e5:	79 27                	jns    c001c80e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c7e7:	bb 01 00 00 00       	mov    ebx,0x1
c001c7ec:	53                   	push   ebx
c001c7ed:	56                   	push   esi
c001c7ee:	57                   	push   edi
c001c7ef:	55                   	push   ebp
c001c7f0:	e8 6d fa ff ff       	call   c001c262 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c7f5:	83 c4 10             	add    esp,0x10
c001c7f8:	66 40                	inc    ax
c001c7fa:	74 0c                	je     c001c808 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001c7fc:	53                   	push   ebx
c001c7fd:	56                   	push   esi
c001c7fe:	57                   	push   edi
c001c7ff:	55                   	push   ebp
c001c800:	e8 d5 fd ff ff       	call   c001c5da <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c805:	83 c4 10             	add    esp,0x10
c001c808:	43                   	inc    ebx
c001c809:	83 fb 08             	cmp    ebx,0x8
c001c80c:	75 de                	jne    c001c7ec <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c80e:	83 c4 0c             	add    esp,0xc
c001c811:	5b                   	pop    ebx
c001c812:	5e                   	pop    esi
c001c813:	5f                   	pop    edi
c001c814:	5d                   	pop    ebp
c001c815:	c3                   	ret    

c001c816 <PCI::detect()>:
c001c816:	56                   	push   esi
c001c817:	53                   	push   ebx
c001c818:	53                   	push   ebx
c001c819:	31 db                	xor    ebx,ebx
c001c81b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c81f:	6a 00                	push   0x0
c001c821:	6a 00                	push   0x0
c001c823:	6a 00                	push   0x0
c001c825:	56                   	push   esi
c001c826:	e8 59 fa ff ff       	call   c001c284 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c82b:	83 c4 10             	add    esp,0x10
c001c82e:	a8 80                	test   al,0x80
c001c830:	75 21                	jne    c001c853 <PCI::detect()+0x3d>
c001c832:	51                   	push   ecx
c001c833:	51                   	push   ecx
c001c834:	6a 00                	push   0x0
c001c836:	56                   	push   esi
c001c837:	e8 08 fc ff ff       	call   c001c444 <PCI::checkBus(unsigned char)>
c001c83c:	83 c4 10             	add    esp,0x10
c001c83f:	eb 24                	jmp    c001c865 <PCI::detect()+0x4f>
c001c841:	52                   	push   edx
c001c842:	52                   	push   edx
c001c843:	53                   	push   ebx
c001c844:	43                   	inc    ebx
c001c845:	56                   	push   esi
c001c846:	e8 f9 fb ff ff       	call   c001c444 <PCI::checkBus(unsigned char)>
c001c84b:	83 c4 10             	add    esp,0x10
c001c84e:	83 fb 08             	cmp    ebx,0x8
c001c851:	74 12                	je     c001c865 <PCI::detect()+0x4f>
c001c853:	53                   	push   ebx
c001c854:	6a 00                	push   0x0
c001c856:	6a 00                	push   0x0
c001c858:	56                   	push   esi
c001c859:	e8 04 fa ff ff       	call   c001c262 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c85e:	83 c4 10             	add    esp,0x10
c001c861:	66 40                	inc    ax
c001c863:	74 dc                	je     c001c841 <PCI::detect()+0x2b>
c001c865:	58                   	pop    eax
c001c866:	5b                   	pop    ebx
c001c867:	5e                   	pop    esi
c001c868:	c3                   	ret    
c001c869:	90                   	nop

c001c86a <IDE::close(int, int, void*)>:
c001c86a:	83 c8 ff             	or     eax,0xffffffff
c001c86d:	c3                   	ret    

c001c86e <IDE::IDE()>:
c001c86e:	83 ec 0c             	sub    esp,0xc
c001c871:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c875:	83 ec 08             	sub    esp,0x8
c001c878:	68 50 35 02 c0       	push   0xc0023550
c001c87d:	50                   	push   eax
c001c87e:	e8 29 41 ff ff       	call   c00109ac <HardDiskController::HardDiskController(char const*)>
c001c883:	83 c4 10             	add    esp,0x10
c001c886:	ba 90 37 02 c0       	mov    edx,0xc0023790
c001c88b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c88f:	89 10                	mov    DWORD PTR [eax],edx
c001c891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c895:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c89c:	90                   	nop
c001c89d:	83 c4 0c             	add    esp,0xc
c001c8a0:	c3                   	ret    
c001c8a1:	90                   	nop

c001c8a2 <IDE::prepareInterrupt(unsigned char)>:
c001c8a2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c8a7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c8ab:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c8b3:	c3                   	ret    

c001c8b4 <selectDrive(unsigned char, unsigned char)>:
c001c8b4:	c3                   	ret    
c001c8b5:	90                   	nop

c001c8b6 <IDE::getBase(unsigned char)>:
c001c8b6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c8bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8bf:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c8c7:	c3                   	ret    

c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c8c8:	55                   	push   ebp
c001c8c9:	57                   	push   edi
c001c8ca:	56                   	push   esi
c001c8cb:	53                   	push   ebx
c001c8cc:	83 ec 1c             	sub    esp,0x1c
c001c8cf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c8d3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c8d7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c8db:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c8df:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c8e2:	80 f9 03             	cmp    cl,0x3
c001c8e5:	77 51                	ja     c001c938 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001c8e7:	0f b6 f2             	movzx  esi,dl
c001c8ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8ee:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c8f1:	0f b6 db             	movzx  ebx,bl
c001c8f4:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001c8f8:	83 ca 80             	or     edx,0xffffff80
c001c8fb:	0f b6 d2             	movzx  edx,dl
c001c8fe:	52                   	push   edx
c001c8ff:	6a 0c                	push   0xc
c001c901:	56                   	push   esi
c001c902:	57                   	push   edi
c001c903:	e8 c0 ff ff ff       	call   c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c908:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001c90d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c911:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c915:	ee                   	out    dx,al
c001c916:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001c91b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001c91f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001c923:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c927:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c92f:	83 c4 2c             	add    esp,0x2c
c001c932:	5b                   	pop    ebx
c001c933:	5e                   	pop    esi
c001c934:	5f                   	pop    edi
c001c935:	5d                   	pop    ebp
c001c936:	eb 90                	jmp    c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c938:	80 fb 07             	cmp    bl,0x7
c001c93b:	77 12                	ja     c001c94f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001c93d:	0f b6 d2             	movzx  edx,dl
c001c940:	0f b6 db             	movzx  ebx,bl
c001c943:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001c94b:	89 da                	mov    edx,ebx
c001c94d:	eb 2f                	jmp    c001c97e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c94f:	80 fb 0d             	cmp    bl,0xd
c001c952:	77 13                	ja     c001c967 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001c954:	0f b6 d2             	movzx  edx,dl
c001c957:	0f b6 db             	movzx  ebx,bl
c001c95a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001c961:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c965:	eb 17                	jmp    c001c97e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c967:	80 fb 15             	cmp    bl,0x15
c001c96a:	77 13                	ja     c001c97f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c96c:	0f b6 d2             	movzx  edx,dl
c001c96f:	0f b6 db             	movzx  ebx,bl
c001c972:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001c97a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c97e:	ee                   	out    dx,al
c001c97f:	83 c4 1c             	add    esp,0x1c
c001c982:	5b                   	pop    ebx
c001c983:	5e                   	pop    esi
c001c984:	5f                   	pop    edi
c001c985:	5d                   	pop    ebp
c001c986:	c3                   	ret    
c001c987:	90                   	nop

c001c988 <IDE::read(unsigned char, unsigned char)>:
c001c988:	55                   	push   ebp
c001c989:	57                   	push   edi
c001c98a:	56                   	push   esi
c001c98b:	53                   	push   ebx
c001c98c:	83 ec 1c             	sub    esp,0x1c
c001c98f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c993:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c997:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c99b:	8d 43 f8             	lea    eax,[ebx-0x8]
c001c99e:	3c 03                	cmp    al,0x3
c001c9a0:	77 43                	ja     c001c9e5 <IDE::read(unsigned char, unsigned char)+0x5d>
c001c9a2:	0f b6 f2             	movzx  esi,dl
c001c9a5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c9a8:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001c9ac:	83 c8 80             	or     eax,0xffffff80
c001c9af:	0f b6 c0             	movzx  eax,al
c001c9b2:	50                   	push   eax
c001c9b3:	6a 0c                	push   0xc
c001c9b5:	56                   	push   esi
c001c9b6:	57                   	push   edi
c001c9b7:	e8 0c ff ff ff       	call   c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9bc:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001c9c1:	0f b6 c3             	movzx  eax,bl
c001c9c4:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001c9c8:	ec                   	in     al,dx
c001c9c9:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001c9ce:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c9d2:	52                   	push   edx
c001c9d3:	6a 0c                	push   0xc
c001c9d5:	56                   	push   esi
c001c9d6:	57                   	push   edi
c001c9d7:	e8 ec fe ff ff       	call   c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9dc:	83 c4 20             	add    esp,0x20
c001c9df:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c9e3:	eb 49                	jmp    c001ca2e <IDE::read(unsigned char, unsigned char)+0xa6>
c001c9e5:	80 fb 07             	cmp    bl,0x7
c001c9e8:	77 12                	ja     c001c9fc <IDE::read(unsigned char, unsigned char)+0x74>
c001c9ea:	0f b6 d2             	movzx  edx,dl
c001c9ed:	0f b6 c3             	movzx  eax,bl
c001c9f0:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001c9f8:	89 c2                	mov    edx,eax
c001c9fa:	eb 31                	jmp    c001ca2d <IDE::read(unsigned char, unsigned char)+0xa5>
c001c9fc:	80 fb 0d             	cmp    bl,0xd
c001c9ff:	77 13                	ja     c001ca14 <IDE::read(unsigned char, unsigned char)+0x8c>
c001ca01:	0f b6 d2             	movzx  edx,dl
c001ca04:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001ca0b:	0f b6 d3             	movzx  edx,bl
c001ca0e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ca12:	eb 19                	jmp    c001ca2d <IDE::read(unsigned char, unsigned char)+0xa5>
c001ca14:	31 c0                	xor    eax,eax
c001ca16:	80 fb 15             	cmp    bl,0x15
c001ca19:	77 13                	ja     c001ca2e <IDE::read(unsigned char, unsigned char)+0xa6>
c001ca1b:	0f b6 d2             	movzx  edx,dl
c001ca1e:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001ca26:	0f b6 d3             	movzx  edx,bl
c001ca29:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ca2d:	ec                   	in     al,dx
c001ca2e:	83 c4 1c             	add    esp,0x1c
c001ca31:	5b                   	pop    ebx
c001ca32:	5e                   	pop    esi
c001ca33:	5f                   	pop    edi
c001ca34:	5d                   	pop    ebp
c001ca35:	c3                   	ret    

c001ca36 <IDE::waitInterrupt(unsigned char)>:
c001ca36:	57                   	push   edi
c001ca37:	56                   	push   esi
c001ca38:	31 f6                	xor    esi,esi
c001ca3a:	53                   	push   ebx
c001ca3b:	83 ec 10             	sub    esp,0x10
c001ca3e:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001ca42:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ca46:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ca4a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001ca4f:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001ca56:	84 db                	test   bl,bl
c001ca58:	75 37                	jne    c001ca91 <IDE::waitInterrupt(unsigned char)+0x5b>
c001ca5a:	52                   	push   edx
c001ca5b:	6a 0c                	push   0xc
c001ca5d:	50                   	push   eax
c001ca5e:	57                   	push   edi
c001ca5f:	e8 24 ff ff ff       	call   c001c988 <IDE::read(unsigned char, unsigned char)>
c001ca64:	83 c4 10             	add    esp,0x10
c001ca67:	a8 01                	test   al,0x1
c001ca69:	75 2e                	jne    c001ca99 <IDE::waitInterrupt(unsigned char)+0x63>
c001ca6b:	f7 c6 04 00 00 00    	test   esi,0x4
c001ca71:	75 16                	jne    c001ca89 <IDE::waitInterrupt(unsigned char)+0x53>
c001ca73:	83 fe 32             	cmp    esi,0x32
c001ca76:	7e 11                	jle    c001ca89 <IDE::waitInterrupt(unsigned char)+0x53>
c001ca78:	50                   	push   eax
c001ca79:	50                   	push   eax
c001ca7a:	6a 00                	push   0x0
c001ca7c:	68 80 96 98 00       	push   0x989680
c001ca81:	e8 25 c5 ff ff       	call   c0018fab <nanoSleep(unsigned long long)>
c001ca86:	83 c4 10             	add    esp,0x10
c001ca89:	83 fe 3c             	cmp    esi,0x3c
c001ca8c:	74 0b                	je     c001ca99 <IDE::waitInterrupt(unsigned char)+0x63>
c001ca8e:	46                   	inc    esi
c001ca8f:	eb b9                	jmp    c001ca4a <IDE::waitInterrupt(unsigned char)+0x14>
c001ca91:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001ca99:	83 c4 10             	add    esp,0x10
c001ca9c:	88 d8                	mov    al,bl
c001ca9e:	5b                   	pop    ebx
c001ca9f:	5e                   	pop    esi
c001caa0:	5f                   	pop    edi
c001caa1:	c3                   	ret    

c001caa2 <ideChannel0IRQHandler(regs*, void*)>:
c001caa2:	83 ec 10             	sub    esp,0x10
c001caa5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001caa9:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001cab0:	6a 07                	push   0x7
c001cab2:	6a 00                	push   0x0
c001cab4:	50                   	push   eax
c001cab5:	e8 ce fe ff ff       	call   c001c988 <IDE::read(unsigned char, unsigned char)>
c001caba:	83 c4 1c             	add    esp,0x1c
c001cabd:	c3                   	ret    

c001cabe <ideChannel1IRQHandler(regs*, void*)>:
c001cabe:	83 ec 10             	sub    esp,0x10
c001cac1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cac5:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001cacc:	6a 07                	push   0x7
c001cace:	6a 01                	push   0x1
c001cad0:	50                   	push   eax
c001cad1:	e8 b2 fe ff ff       	call   c001c988 <IDE::read(unsigned char, unsigned char)>
c001cad6:	83 c4 1c             	add    esp,0x1c
c001cad9:	c3                   	ret    

c001cada <IDE::enableIRQs(unsigned char, bool)>:
c001cada:	57                   	push   edi
c001cadb:	56                   	push   esi
c001cadc:	be 04 00 00 00       	mov    esi,0x4
c001cae1:	53                   	push   ebx
c001cae2:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001cae7:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001caec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001caf0:	0f 94 c0             	sete   al
c001caf3:	01 c0                	add    eax,eax
c001caf5:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001cafc:	0f b6 c0             	movzx  eax,al
c001caff:	50                   	push   eax
c001cb00:	6a 0c                	push   0xc
c001cb02:	57                   	push   edi
c001cb03:	53                   	push   ebx
c001cb04:	e8 bf fd ff ff       	call   c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb09:	83 c4 10             	add    esp,0x10
c001cb0c:	50                   	push   eax
c001cb0d:	6a 0c                	push   0xc
c001cb0f:	57                   	push   edi
c001cb10:	53                   	push   ebx
c001cb11:	e8 72 fe ff ff       	call   c001c988 <IDE::read(unsigned char, unsigned char)>
c001cb16:	83 c4 10             	add    esp,0x10
c001cb19:	4e                   	dec    esi
c001cb1a:	75 f0                	jne    c001cb0c <IDE::enableIRQs(unsigned char, bool)+0x32>
c001cb1c:	5b                   	pop    ebx
c001cb1d:	5e                   	pop    esi
c001cb1e:	5f                   	pop    edi
c001cb1f:	c3                   	ret    

c001cb20 <IDE::open(int, int, void*)>:
c001cb20:	55                   	push   ebp
c001cb21:	57                   	push   edi
c001cb22:	56                   	push   esi
c001cb23:	53                   	push   ebx
c001cb24:	83 ec 1c             	sub    esp,0x1c
c001cb27:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cb2b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001cb34:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001cb3d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001cb44:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001cb4b:	0f 85 b2 02 00 00    	jne    c001ce03 <IDE::open(int, int, void*)+0x2e3>
c001cb51:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001cb57:	88 04 24             	mov    BYTE PTR [esp],al
c001cb5a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001cb5d:	83 e0 7f             	and    eax,0x7f
c001cb60:	83 f8 05             	cmp    eax,0x5
c001cb63:	74 05                	je     c001cb6a <IDE::open(int, int, void*)+0x4a>
c001cb65:	83 f8 0f             	cmp    eax,0xf
c001cb68:	75 32                	jne    c001cb9c <IDE::open(int, int, void*)+0x7c>
c001cb6a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001cb70:	83 e0 fc             	and    eax,0xfffffffc
c001cb73:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001cb7a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001cb80:	83 e0 fc             	and    eax,0xfffffffc
c001cb83:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001cb8a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001cb90:	83 e0 fc             	and    eax,0xfffffffc
c001cb93:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cb9a:	eb 14                	jmp    c001cbb0 <IDE::open(int, int, void*)+0x90>
c001cb9c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001cba6:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001cbb0:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001cbb7:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001cbbe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cbc2:	89 c6                	mov    esi,eax
c001cbc4:	89 e8                	mov    eax,ebp
c001cbc6:	bf f8 0c 00 00       	mov    edi,0xcf8
c001cbcb:	c1 e6 10             	shl    esi,0x10
c001cbce:	89 fa                	mov    edx,edi
c001cbd0:	c1 e0 0b             	shl    eax,0xb
c001cbd3:	09 f0                	or     eax,esi
c001cbd5:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001cbdc:	c1 e6 08             	shl    esi,0x8
c001cbdf:	09 c6                	or     esi,eax
c001cbe1:	89 f0                	mov    eax,esi
c001cbe3:	0d 08 00 00 80       	or     eax,0x80000008
c001cbe8:	ef                   	out    dx,eax
c001cbe9:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001cbee:	89 ca                	mov    edx,ecx
c001cbf0:	ed                   	in     eax,dx
c001cbf1:	c1 e8 10             	shr    eax,0x10
c001cbf4:	3d ff ff 00 00       	cmp    eax,0xffff
c001cbf9:	0f 84 f3 00 00 00    	je     c001ccf2 <IDE::open(int, int, void*)+0x1d2>
c001cbff:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001cc05:	89 fa                	mov    edx,edi
c001cc07:	89 f0                	mov    eax,esi
c001cc09:	ef                   	out    dx,eax
c001cc0a:	b0 fe                	mov    al,0xfe
c001cc0c:	89 ca                	mov    edx,ecx
c001cc0e:	ee                   	out    dx,al
c001cc0f:	89 f0                	mov    eax,esi
c001cc11:	89 fa                	mov    edx,edi
c001cc13:	ef                   	out    dx,eax
c001cc14:	89 ca                	mov    edx,ecx
c001cc16:	ed                   	in     eax,dx
c001cc17:	3c fe                	cmp    al,0xfe
c001cc19:	0f 85 a9 00 00 00    	jne    c001ccc8 <IDE::open(int, int, void*)+0x1a8>
c001cc1f:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c001cc25:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001cc2c:	74 33                	je     c001cc61 <IDE::open(int, int, void*)+0x141>
c001cc2e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001cc34:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001cc38:	40                   	inc    eax
c001cc39:	83 ec 0c             	sub    esp,0xc
c001cc3c:	0f b6 c0             	movzx  eax,al
c001cc3f:	50                   	push   eax
c001cc40:	55                   	push   ebp
c001cc41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc45:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001cc4b:	51                   	push   ecx
c001cc4c:	e8 1d 72 ff ff       	call   c0013e6e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001cc51:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001cc56:	83 c4 1c             	add    esp,0x1c
c001cc59:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cc5f:	eb 0a                	jmp    c001cc6b <IDE::open(int, int, void*)+0x14b>
c001cc61:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001cc6b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001cc72:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001cc79:	c1 e1 10             	shl    ecx,0x10
c001cc7c:	bf f8 0c 00 00       	mov    edi,0xcf8
c001cc81:	c1 e0 08             	shl    eax,0x8
c001cc84:	89 fa                	mov    edx,edi
c001cc86:	09 c1                	or     ecx,eax
c001cc88:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001cc8f:	c1 e0 0b             	shl    eax,0xb
c001cc92:	09 c1                	or     ecx,eax
c001cc94:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001cc9a:	89 c8                	mov    eax,ecx
c001cc9c:	ef                   	out    dx,eax
c001cc9d:	be fc 0c 00 00       	mov    esi,0xcfc
c001cca2:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001cca8:	89 f2                	mov    edx,esi
c001ccaa:	ee                   	out    dx,al
c001ccab:	89 c8                	mov    eax,ecx
c001ccad:	89 fa                	mov    edx,edi
c001ccaf:	ef                   	out    dx,eax
c001ccb0:	89 f2                	mov    edx,esi
c001ccb2:	ed                   	in     eax,dx
c001ccb3:	0f b6 c0             	movzx  eax,al
c001ccb6:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001ccbc:	74 44                	je     c001cd02 <IDE::open(int, int, void*)+0x1e2>
c001ccbe:	83 ec 0c             	sub    esp,0xc
c001ccc1:	68 68 35 02 c0       	push   0xc0023568
c001ccc6:	eb 32                	jmp    c001ccfa <IDE::open(int, int, void*)+0x1da>
c001ccc8:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ccd1:	75 15                	jne    c001cce8 <IDE::open(int, int, void*)+0x1c8>
c001ccd3:	80 3c 24 8a          	cmp    BYTE PTR [esp],0x8a
c001ccd7:	74 06                	je     c001ccdf <IDE::open(int, int, void*)+0x1bf>
c001ccd9:	80 3c 24 80          	cmp    BYTE PTR [esp],0x80
c001ccdd:	75 09                	jne    c001cce8 <IDE::open(int, int, void*)+0x1c8>
c001ccdf:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001cce6:	eb 1a                	jmp    c001cd02 <IDE::open(int, int, void*)+0x1e2>
c001cce8:	83 ec 0c             	sub    esp,0xc
c001cceb:	68 70 35 02 c0       	push   0xc0023570
c001ccf0:	eb 08                	jmp    c001ccfa <IDE::open(int, int, void*)+0x1da>
c001ccf2:	83 ec 0c             	sub    esp,0xc
c001ccf5:	68 a1 35 02 c0       	push   0xc00235a1
c001ccfa:	e8 45 8d ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c001ccff:	83 c4 10             	add    esp,0x10
c001cd02:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001cd09:	79 1a                	jns    c001cd25 <IDE::open(int, int, void*)+0x205>
c001cd0b:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001cd11:	83 e0 fc             	and    eax,0xfffffffc
c001cd14:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001cd1b:	83 c0 08             	add    eax,0x8
c001cd1e:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001cd25:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001cd2b:	89 c2                	mov    edx,eax
c001cd2d:	83 e2 0f             	and    edx,0xf
c001cd30:	66 83 fa 08          	cmp    dx,0x8
c001cd34:	75 0a                	jne    c001cd40 <IDE::open(int, int, void*)+0x220>
c001cd36:	83 e8 02             	sub    eax,0x2
c001cd39:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cd40:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001cd46:	89 c2                	mov    edx,eax
c001cd48:	83 e2 0f             	and    edx,0xf
c001cd4b:	66 83 fa 08          	cmp    dx,0x8
c001cd4f:	75 0a                	jne    c001cd5b <IDE::open(int, int, void*)+0x23b>
c001cd51:	83 e8 02             	sub    eax,0x2
c001cd54:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001cd5b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001cd62:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001cd69:	89 d0                	mov    eax,edx
c001cd6b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cd6e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cd72:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001cd76:	8d 4a 01             	lea    ecx,[edx+0x1]
c001cd79:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cd7e:	0f b6 c9             	movzx  ecx,cl
c001cd81:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001cd88:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cd8b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cd8f:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001cd93:	8d 50 02             	lea    edx,[eax+0x2]
c001cd96:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cd9b:	0f b6 d2             	movzx  edx,dl
c001cd9e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cda4:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cda7:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cdab:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001cdaf:	8d 48 03             	lea    ecx,[eax+0x3]
c001cdb2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cdb7:	0f b6 c9             	movzx  ecx,cl
c001cdba:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001cdc0:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cdc3:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cdc7:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001cdcb:	8d 50 04             	lea    edx,[eax+0x4]
c001cdce:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001cdd4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cdd9:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001cde0:	66 85 f6             	test   si,si
c001cde3:	74 3e                	je     c001ce23 <IDE::open(int, int, void*)+0x303>
c001cde5:	0f b6 d2             	movzx  edx,dl
c001cde8:	83 c0 05             	add    eax,0x5
c001cdeb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cdee:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cdf2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001cdf6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001cdfc:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ce01:	eb 20                	jmp    c001ce23 <IDE::open(int, int, void*)+0x303>
c001ce03:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ce0d:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ce17:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ce1e:	e9 02 ff ff ff       	jmp    c001cd25 <IDE::open(int, int, void*)+0x205>
c001ce23:	52                   	push   edx
c001ce24:	52                   	push   edx
c001ce25:	6a 00                	push   0x0
c001ce27:	53                   	push   ebx
c001ce28:	e8 75 fa ff ff       	call   c001c8a2 <IDE::prepareInterrupt(unsigned char)>
c001ce2d:	59                   	pop    ecx
c001ce2e:	5e                   	pop    esi
c001ce2f:	6a 01                	push   0x1
c001ce31:	53                   	push   ebx
c001ce32:	e8 6b fa ff ff       	call   c001c8a2 <IDE::prepareInterrupt(unsigned char)>
c001ce37:	83 c4 0c             	add    esp,0xc
c001ce3a:	6a 00                	push   0x0
c001ce3c:	6a 00                	push   0x0
c001ce3e:	53                   	push   ebx
c001ce3f:	e8 96 fc ff ff       	call   c001cada <IDE::enableIRQs(unsigned char, bool)>
c001ce44:	83 c4 0c             	add    esp,0xc
c001ce47:	6a 00                	push   0x0
c001ce49:	6a 01                	push   0x1
c001ce4b:	53                   	push   ebx
c001ce4c:	e8 89 fc ff ff       	call   c001cada <IDE::enableIRQs(unsigned char, bool)>
c001ce51:	83 c4 10             	add    esp,0x10
c001ce54:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001ce5b:	74 40                	je     c001ce9d <IDE::open(int, int, void*)+0x37d>
c001ce5d:	83 ec 0c             	sub    esp,0xc
c001ce60:	68 cb 35 02 c0       	push   0xc00235cb
c001ce65:	e8 ab 23 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001ce6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce6d:	6a 01                	push   0x1
c001ce6f:	68 a2 ca 01 c0       	push   0xc001caa2
c001ce74:	6a 0e                	push   0xe
c001ce76:	53                   	push   ebx
c001ce77:	e8 02 37 ff ff       	call   c001057e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ce7c:	83 c4 14             	add    esp,0x14
c001ce7f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ce85:	53                   	push   ebx
c001ce86:	6a 01                	push   0x1
c001ce88:	68 be ca 01 c0       	push   0xc001cabe
c001ce8d:	6a 0f                	push   0xf
c001ce8f:	53                   	push   ebx
c001ce90:	e8 e9 36 ff ff       	call   c001057e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ce95:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001ce9b:	eb 4a                	jmp    c001cee7 <IDE::open(int, int, void*)+0x3c7>
c001ce9d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001cea7:	50                   	push   eax
c001cea8:	6a 0f                	push   0xf
c001ceaa:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001ceb0:	68 e7 35 02 c0       	push   0xc00235e7
c001ceb5:	e8 5b 23 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001ceba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cebd:	6a 00                	push   0x0
c001cebf:	68 a2 ca 01 c0       	push   0xc001caa2
c001cec4:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001ceca:	53                   	push   ebx
c001cecb:	e8 ae 36 ff ff       	call   c001057e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ced0:	83 c4 14             	add    esp,0x14
c001ced3:	53                   	push   ebx
c001ced4:	6a 00                	push   0x0
c001ced6:	68 be ca 01 c0       	push   0xc001cabe
c001cedb:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001cee1:	53                   	push   ebx
c001cee2:	e8 97 36 ff ff       	call   c001057e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cee7:	83 c4 20             	add    esp,0x20
c001ceea:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ceec:	83 ec 0c             	sub    esp,0xc
c001ceef:	53                   	push   ebx
c001cef0:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001cef3:	83 c4 0c             	add    esp,0xc
c001cef6:	6a 07                	push   0x7
c001cef8:	6a 00                	push   0x0
c001cefa:	53                   	push   ebx
c001cefb:	e8 88 fa ff ff       	call   c001c988 <IDE::read(unsigned char, unsigned char)>
c001cf00:	83 c4 0c             	add    esp,0xc
c001cf03:	6a 07                	push   0x7
c001cf05:	6a 01                	push   0x1
c001cf07:	53                   	push   ebx
c001cf08:	e8 7b fa ff ff       	call   c001c988 <IDE::read(unsigned char, unsigned char)>
c001cf0d:	83 c4 0c             	add    esp,0xc
c001cf10:	6a 01                	push   0x1
c001cf12:	6a 00                	push   0x0
c001cf14:	53                   	push   ebx
c001cf15:	e8 c0 fb ff ff       	call   c001cada <IDE::enableIRQs(unsigned char, bool)>
c001cf1a:	83 c4 0c             	add    esp,0xc
c001cf1d:	6a 01                	push   0x1
c001cf1f:	6a 01                	push   0x1
c001cf21:	53                   	push   ebx
c001cf22:	e8 b3 fb ff ff       	call   c001cada <IDE::enableIRQs(unsigned char, bool)>
c001cf27:	83 c4 2c             	add    esp,0x2c
c001cf2a:	31 c0                	xor    eax,eax
c001cf2c:	5b                   	pop    ebx
c001cf2d:	5e                   	pop    esi
c001cf2e:	5f                   	pop    edi
c001cf2f:	5d                   	pop    ebp
c001cf30:	c3                   	ret    
c001cf31:	90                   	nop

c001cf32 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001cf32:	55                   	push   ebp
c001cf33:	57                   	push   edi
c001cf34:	56                   	push   esi
c001cf35:	53                   	push   ebx
c001cf36:	83 ec 1c             	sub    esp,0x1c
c001cf39:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cf3d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cf41:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cf45:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001cf49:	8d 50 f8             	lea    edx,[eax-0x8]
c001cf4c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001cf50:	80 fa 03             	cmp    dl,0x3
c001cf53:	77 5d                	ja     c001cfb2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001cf55:	0f b6 db             	movzx  ebx,bl
c001cf58:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cf5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cf60:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001cf63:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001cf67:	83 ca 80             	or     edx,0xffffff80
c001cf6a:	0f b6 d2             	movzx  edx,dl
c001cf6d:	52                   	push   edx
c001cf6e:	6a 0c                	push   0xc
c001cf70:	53                   	push   ebx
c001cf71:	56                   	push   esi
c001cf72:	e8 51 f9 ff ff       	call   c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf7b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001cf80:	0f b6 c0             	movzx  eax,al
c001cf83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf87:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001cf8b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cf8d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001cf92:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001cf96:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001cf9a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001cf9e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001cfa6:	83 c4 2c             	add    esp,0x2c
c001cfa9:	5b                   	pop    ebx
c001cfaa:	5e                   	pop    esi
c001cfab:	5f                   	pop    edi
c001cfac:	5d                   	pop    ebp
c001cfad:	e9 16 f9 ff ff       	jmp    c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfb2:	3c 07                	cmp    al,0x7
c001cfb4:	77 10                	ja     c001cfc6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001cfb6:	0f b6 db             	movzx  ebx,bl
c001cfb9:	0f b6 d0             	movzx  edx,al
c001cfbc:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001cfc4:	eb 2d                	jmp    c001cff3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cfc6:	3c 0d                	cmp    al,0xd
c001cfc8:	77 13                	ja     c001cfdd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001cfca:	0f b6 db             	movzx  ebx,bl
c001cfcd:	0f b6 c0             	movzx  eax,al
c001cfd0:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001cfd7:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001cfdb:	eb 16                	jmp    c001cff3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cfdd:	3c 15                	cmp    al,0x15
c001cfdf:	77 14                	ja     c001cff5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001cfe1:	0f b6 db             	movzx  ebx,bl
c001cfe4:	0f b6 c0             	movzx  eax,al
c001cfe7:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001cfef:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001cff3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cff5:	83 c4 1c             	add    esp,0x1c
c001cff8:	5b                   	pop    ebx
c001cff9:	5e                   	pop    esi
c001cffa:	5f                   	pop    edi
c001cffb:	5d                   	pop    ebp
c001cffc:	c3                   	ret    
c001cffd:	90                   	nop

c001cffe <IDE::detect()>:
c001cffe:	55                   	push   ebp
c001cfff:	57                   	push   edi
c001d000:	56                   	push   esi
c001d001:	53                   	push   ebx
c001d002:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001d008:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001d00f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001d016:	0f 85 c0 02 00 00    	jne    c001d2dc <IDE::detect()+0x2de>
c001d01c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001d023:	31 f6                	xor    esi,esi
c001d025:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d02d:	31 ed                	xor    ebp,ebp
c001d02f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d033:	c1 e0 06             	shl    eax,0x6
c001d036:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001d03e:	89 e8                	mov    eax,ebp
c001d040:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d044:	c1 e0 04             	shl    eax,0x4
c001d047:	83 c8 a0             	or     eax,0xffffffa0
c001d04a:	0f b6 c0             	movzx  eax,al
c001d04d:	50                   	push   eax
c001d04e:	6a 06                	push   0x6
c001d050:	56                   	push   esi
c001d051:	53                   	push   ebx
c001d052:	e8 71 f8 ff ff       	call   c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d057:	83 c4 0c             	add    esp,0xc
c001d05a:	6a 0c                	push   0xc
c001d05c:	56                   	push   esi
c001d05d:	53                   	push   ebx
c001d05e:	e8 25 f9 ff ff       	call   c001c988 <IDE::read(unsigned char, unsigned char)>
c001d063:	83 c4 0c             	add    esp,0xc
c001d066:	6a 0c                	push   0xc
c001d068:	56                   	push   esi
c001d069:	53                   	push   ebx
c001d06a:	e8 19 f9 ff ff       	call   c001c988 <IDE::read(unsigned char, unsigned char)>
c001d06f:	83 c4 0c             	add    esp,0xc
c001d072:	6a 0c                	push   0xc
c001d074:	56                   	push   esi
c001d075:	53                   	push   ebx
c001d076:	e8 0d f9 ff ff       	call   c001c988 <IDE::read(unsigned char, unsigned char)>
c001d07b:	83 c4 0c             	add    esp,0xc
c001d07e:	6a 0c                	push   0xc
c001d080:	56                   	push   esi
c001d081:	53                   	push   ebx
c001d082:	e8 01 f9 ff ff       	call   c001c988 <IDE::read(unsigned char, unsigned char)>
c001d087:	68 ec 00 00 00       	push   0xec
c001d08c:	6a 07                	push   0x7
c001d08e:	56                   	push   esi
c001d08f:	53                   	push   ebx
c001d090:	e8 33 f8 ff ff       	call   c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d095:	83 c4 1c             	add    esp,0x1c
c001d098:	6a 0c                	push   0xc
c001d09a:	56                   	push   esi
c001d09b:	53                   	push   ebx
c001d09c:	e8 e7 f8 ff ff       	call   c001c988 <IDE::read(unsigned char, unsigned char)>
c001d0a1:	83 c4 0c             	add    esp,0xc
c001d0a4:	6a 0c                	push   0xc
c001d0a6:	56                   	push   esi
c001d0a7:	53                   	push   ebx
c001d0a8:	e8 db f8 ff ff       	call   c001c988 <IDE::read(unsigned char, unsigned char)>
c001d0ad:	83 c4 0c             	add    esp,0xc
c001d0b0:	6a 0c                	push   0xc
c001d0b2:	56                   	push   esi
c001d0b3:	53                   	push   ebx
c001d0b4:	e8 cf f8 ff ff       	call   c001c988 <IDE::read(unsigned char, unsigned char)>
c001d0b9:	83 c4 0c             	add    esp,0xc
c001d0bc:	6a 0c                	push   0xc
c001d0be:	56                   	push   esi
c001d0bf:	53                   	push   ebx
c001d0c0:	e8 c3 f8 ff ff       	call   c001c988 <IDE::read(unsigned char, unsigned char)>
c001d0c5:	83 c4 0c             	add    esp,0xc
c001d0c8:	6a 0c                	push   0xc
c001d0ca:	56                   	push   esi
c001d0cb:	53                   	push   ebx
c001d0cc:	e8 b7 f8 ff ff       	call   c001c988 <IDE::read(unsigned char, unsigned char)>
c001d0d1:	83 c4 10             	add    esp,0x10
c001d0d4:	84 c0                	test   al,al
c001d0d6:	0f 84 8b 01 00 00    	je     c001d267 <IDE::detect()+0x269>
c001d0dc:	31 ff                	xor    edi,edi
c001d0de:	50                   	push   eax
c001d0df:	6a 0c                	push   0xc
c001d0e1:	56                   	push   esi
c001d0e2:	53                   	push   ebx
c001d0e3:	e8 a0 f8 ff ff       	call   c001c988 <IDE::read(unsigned char, unsigned char)>
c001d0e8:	83 c4 10             	add    esp,0x10
c001d0eb:	a8 01                	test   al,0x1
c001d0ed:	0f 85 8e 01 00 00    	jne    c001d281 <IDE::detect()+0x283>
c001d0f3:	84 c0                	test   al,al
c001d0f5:	78 04                	js     c001d0fb <IDE::detect()+0xfd>
c001d0f7:	a8 08                	test   al,0x8
c001d0f9:	75 27                	jne    c001d122 <IDE::detect()+0x124>
c001d0fb:	47                   	inc    edi
c001d0fc:	81 ff 17 01 00 00    	cmp    edi,0x117
c001d102:	7e da                	jle    c001d0de <IDE::detect()+0xe0>
c001d104:	50                   	push   eax
c001d105:	50                   	push   eax
c001d106:	6a 00                	push   0x0
c001d108:	68 40 4b 4c 00       	push   0x4c4b40
c001d10d:	e8 99 be ff ff       	call   c0018fab <nanoSleep(unsigned long long)>
c001d112:	83 c4 10             	add    esp,0x10
c001d115:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001d11b:	75 c1                	jne    c001d0de <IDE::detect()+0xe0>
c001d11d:	e9 5f 01 00 00       	jmp    c001d281 <IDE::detect()+0x283>
c001d122:	31 c9                	xor    ecx,ecx
c001d124:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001d128:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001d12c:	83 ec 0c             	sub    esp,0xc
c001d12f:	68 80 00 00 00       	push   0x80
c001d134:	57                   	push   edi
c001d135:	6a 00                	push   0x0
c001d137:	56                   	push   esi
c001d138:	53                   	push   ebx
c001d139:	e8 f4 fd ff ff       	call   c001cf32 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001d13e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d142:	c1 e0 06             	shl    eax,0x6
c001d145:	01 d8                	add    eax,ebx
c001d147:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001d14c:	89 d1                	mov    ecx,edx
c001d14e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001d155:	89 f2                	mov    edx,esi
c001d157:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001d15e:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001d164:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001d168:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001d16e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d172:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001d179:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001d181:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001d188:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001d190:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001d196:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001d19d:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001d1a3:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d1a7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001d1ab:	83 c4 20             	add    esp,0x20
c001d1ae:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001d1b1:	83 c7 02             	add    edi,0x2
c001d1b4:	88 90 80 01 00 00    	mov    BYTE PTR [eax+0x180],dl
c001d1ba:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001d1bd:	88 90 81 01 00 00    	mov    BYTE PTR [eax+0x181],dl
c001d1c3:	83 c0 02             	add    eax,0x2
c001d1c6:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c001d1ca:	75 e2                	jne    c001d1ae <IDE::detect()+0x1b0>
c001d1cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1d0:	c1 e0 06             	shl    eax,0x6
c001d1d3:	01 d8                	add    eax,ebx
c001d1d5:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001d1db:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001d1e2:	66 c1 ea 09          	shr    dx,0x9
c001d1e6:	83 e2 01             	and    edx,0x1
c001d1e9:	84 c9                	test   cl,cl
c001d1eb:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001d1f1:	75 2f                	jne    c001d222 <IDE::detect()+0x224>
c001d1f3:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001d1f9:	85 c0                	test   eax,eax
c001d1fb:	74 66                	je     c001d263 <IDE::detect()+0x265>
c001d1fd:	50                   	push   eax
c001d1fe:	55                   	push   ebp
c001d1ff:	56                   	push   esi
c001d200:	68 03 36 02 c0       	push   0xc0023603
c001d205:	e8 0b 20 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001d20a:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d211:	e8 ca 1e ff ff       	call   c000f0e0 <operator new(unsigned long)>
c001d216:	89 c7                	mov    edi,eax
c001d218:	89 04 24             	mov    DWORD PTR [esp],eax
c001d21b:	e8 f4 02 00 00       	call   c001d514 <ATA::ATA()>
c001d220:	eb 28                	jmp    c001d24a <IDE::detect()+0x24c>
c001d222:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001d228:	55                   	push   ebp
c001d229:	56                   	push   esi
c001d22a:	68 32 36 02 c0       	push   0xc0023632
c001d22f:	e8 e1 1f ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001d234:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001d23b:	e8 a0 1e ff ff       	call   c000f0e0 <operator new(unsigned long)>
c001d240:	89 c7                	mov    edi,eax
c001d242:	89 04 24             	mov    DWORD PTR [esp],eax
c001d245:	e8 1e 09 00 00       	call   c001db68 <ATAPI::ATAPI()>
c001d24a:	5a                   	pop    edx
c001d24b:	59                   	pop    ecx
c001d24c:	57                   	push   edi
c001d24d:	53                   	push   ebx
c001d24e:	e8 d7 33 ff ff       	call   c001062a <Device::addChild(Device*)>
c001d253:	8b 07                	mov    eax,DWORD PTR [edi]
c001d255:	53                   	push   ebx
c001d256:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d25a:	6a 00                	push   0x0
c001d25c:	57                   	push   edi
c001d25d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d260:	83 c4 20             	add    esp,0x20
c001d263:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001d267:	4d                   	dec    ebp
c001d268:	74 0a                	je     c001d274 <IDE::detect()+0x276>
c001d26a:	bd 01 00 00 00       	mov    ebp,0x1
c001d26f:	e9 bb fd ff ff       	jmp    c001d02f <IDE::detect()+0x31>
c001d274:	4e                   	dec    esi
c001d275:	74 65                	je     c001d2dc <IDE::detect()+0x2de>
c001d277:	be 01 00 00 00       	mov    esi,0x1
c001d27c:	e9 ac fd ff ff       	jmp    c001d02d <IDE::detect()+0x2f>
c001d281:	50                   	push   eax
c001d282:	6a 04                	push   0x4
c001d284:	56                   	push   esi
c001d285:	53                   	push   ebx
c001d286:	e8 fd f6 ff ff       	call   c001c988 <IDE::read(unsigned char, unsigned char)>
c001d28b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d28f:	83 c4 0c             	add    esp,0xc
c001d292:	6a 05                	push   0x5
c001d294:	56                   	push   esi
c001d295:	53                   	push   ebx
c001d296:	e8 ed f6 ff ff       	call   c001c988 <IDE::read(unsigned char, unsigned char)>
c001d29b:	83 c4 10             	add    esp,0x10
c001d29e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001d2a2:	80 fa 14             	cmp    dl,0x14
c001d2a5:	74 2f                	je     c001d2d6 <IDE::detect()+0x2d8>
c001d2a7:	80 fa 69             	cmp    dl,0x69
c001d2aa:	75 bb                	jne    c001d267 <IDE::detect()+0x269>
c001d2ac:	3c 96                	cmp    al,0x96
c001d2ae:	75 b7                	jne    c001d267 <IDE::detect()+0x269>
c001d2b0:	68 a1 00 00 00       	push   0xa1
c001d2b5:	6a 07                	push   0x7
c001d2b7:	56                   	push   esi
c001d2b8:	53                   	push   ebx
c001d2b9:	e8 0a f6 ff ff       	call   c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2be:	5f                   	pop    edi
c001d2bf:	58                   	pop    eax
c001d2c0:	6a 00                	push   0x0
c001d2c2:	68 40 42 0f 00       	push   0xf4240
c001d2c7:	e8 df bc ff ff       	call   c0018fab <nanoSleep(unsigned long long)>
c001d2cc:	83 c4 10             	add    esp,0x10
c001d2cf:	b1 01                	mov    cl,0x1
c001d2d1:	e9 4e fe ff ff       	jmp    c001d124 <IDE::detect()+0x126>
c001d2d6:	3c eb                	cmp    al,0xeb
c001d2d8:	75 cd                	jne    c001d2a7 <IDE::detect()+0x2a9>
c001d2da:	eb d4                	jmp    c001d2b0 <IDE::detect()+0x2b2>
c001d2dc:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d2e2:	5b                   	pop    ebx
c001d2e3:	5e                   	pop    esi
c001d2e4:	5f                   	pop    edi
c001d2e5:	5d                   	pop    ebp
c001d2e6:	c3                   	ret    
c001d2e7:	90                   	nop

c001d2e8 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d2e8:	55                   	push   ebp
c001d2e9:	57                   	push   edi
c001d2ea:	56                   	push   esi
c001d2eb:	53                   	push   ebx
c001d2ec:	83 ec 1c             	sub    esp,0x1c
c001d2ef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d2f3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d2f7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d2fb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d2ff:	88 c3                	mov    bl,al
c001d301:	84 c0                	test   al,al
c001d303:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d307:	0f 84 67 01 00 00    	je     c001d474 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001d30d:	83 ec 0c             	sub    esp,0xc
c001d310:	68 63 36 02 c0       	push   0xc0023663
c001d315:	e8 fb 1e ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001d31a:	83 c4 10             	add    esp,0x10
c001d31d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d321:	3c 01                	cmp    al,0x1
c001d323:	75 17                	jne    c001d33c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001d325:	83 ec 0c             	sub    esp,0xc
c001d328:	b3 13                	mov    bl,0x13
c001d32a:	68 6f 36 02 c0       	push   0xc002366f
c001d32f:	e8 e1 1e ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001d334:	83 c4 10             	add    esp,0x10
c001d337:	e9 25 01 00 00       	jmp    c001d461 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d33c:	3c 02                	cmp    al,0x2
c001d33e:	0f 85 ef 00 00 00    	jne    c001d433 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001d344:	01 f6                	add    esi,esi
c001d346:	52                   	push   edx
c001d347:	09 ee                	or     esi,ebp
c001d349:	6a 01                	push   0x1
c001d34b:	89 f0                	mov    eax,esi
c001d34d:	0f b6 f0             	movzx  esi,al
c001d350:	c1 e6 06             	shl    esi,0x6
c001d353:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001d35b:	50                   	push   eax
c001d35c:	57                   	push   edi
c001d35d:	e8 26 f6 ff ff       	call   c001c988 <IDE::read(unsigned char, unsigned char)>
c001d362:	83 c4 10             	add    esp,0x10
c001d365:	89 c6                	mov    esi,eax
c001d367:	a8 01                	test   al,0x1
c001d369:	74 12                	je     c001d37d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001d36b:	83 ec 0c             	sub    esp,0xc
c001d36e:	b3 07                	mov    bl,0x7
c001d370:	68 84 36 02 c0       	push   0xc0023684
c001d375:	e8 9b 1e ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001d37a:	83 c4 10             	add    esp,0x10
c001d37d:	f7 c6 02 00 00 00    	test   esi,0x2
c001d383:	74 12                	je     c001d397 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001d385:	83 ec 0c             	sub    esp,0xc
c001d388:	b3 03                	mov    bl,0x3
c001d38a:	68 a2 36 02 c0       	push   0xc00236a2
c001d38f:	e8 81 1e ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001d394:	83 c4 10             	add    esp,0x10
c001d397:	f7 c6 04 00 00 00    	test   esi,0x4
c001d39d:	74 12                	je     c001d3b1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001d39f:	83 ec 0c             	sub    esp,0xc
c001d3a2:	b3 14                	mov    bl,0x14
c001d3a4:	68 c2 36 02 c0       	push   0xc00236c2
c001d3a9:	e8 67 1e ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001d3ae:	83 c4 10             	add    esp,0x10
c001d3b1:	f7 c6 08 00 00 00    	test   esi,0x8
c001d3b7:	74 12                	je     c001d3cb <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001d3b9:	83 ec 0c             	sub    esp,0xc
c001d3bc:	b3 03                	mov    bl,0x3
c001d3be:	68 a2 36 02 c0       	push   0xc00236a2
c001d3c3:	e8 4d 1e ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001d3c8:	83 c4 10             	add    esp,0x10
c001d3cb:	f7 c6 10 00 00 00    	test   esi,0x10
c001d3d1:	74 12                	je     c001d3e5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001d3d3:	83 ec 0c             	sub    esp,0xc
c001d3d6:	b3 15                	mov    bl,0x15
c001d3d8:	68 da 36 02 c0       	push   0xc00236da
c001d3dd:	e8 33 1e ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001d3e2:	83 c4 10             	add    esp,0x10
c001d3e5:	f7 c6 20 00 00 00    	test   esi,0x20
c001d3eb:	74 12                	je     c001d3ff <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001d3ed:	83 ec 0c             	sub    esp,0xc
c001d3f0:	b3 03                	mov    bl,0x3
c001d3f2:	68 a2 36 02 c0       	push   0xc00236a2
c001d3f7:	e8 19 1e ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001d3fc:	83 c4 10             	add    esp,0x10
c001d3ff:	f7 c6 40 00 00 00    	test   esi,0x40
c001d405:	74 12                	je     c001d419 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001d407:	83 ec 0c             	sub    esp,0xc
c001d40a:	b3 16                	mov    bl,0x16
c001d40c:	68 f4 36 02 c0       	push   0xc00236f4
c001d411:	e8 ff 1d ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001d416:	83 c4 10             	add    esp,0x10
c001d419:	89 f0                	mov    eax,esi
c001d41b:	84 c0                	test   al,al
c001d41d:	79 42                	jns    c001d461 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d41f:	83 ec 0c             	sub    esp,0xc
c001d422:	b3 0d                	mov    bl,0xd
c001d424:	68 15 37 02 c0       	push   0xc0023715
c001d429:	e8 e7 1d ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001d42e:	83 c4 10             	add    esp,0x10
c001d431:	eb 2e                	jmp    c001d461 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d433:	3c 03                	cmp    al,0x3
c001d435:	75 14                	jne    c001d44b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001d437:	83 ec 0c             	sub    esp,0xc
c001d43a:	b3 17                	mov    bl,0x17
c001d43c:	68 29 37 02 c0       	push   0xc0023729
c001d441:	e8 cf 1d ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001d446:	83 c4 10             	add    esp,0x10
c001d449:	eb 16                	jmp    c001d461 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d44b:	3c 04                	cmp    al,0x4
c001d44d:	75 12                	jne    c001d461 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d44f:	83 ec 0c             	sub    esp,0xc
c001d452:	b3 08                	mov    bl,0x8
c001d454:	68 3f 37 02 c0       	push   0xc002373f
c001d459:	e8 b7 1d ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001d45e:	83 c4 10             	add    esp,0x10
c001d461:	50                   	push   eax
c001d462:	50                   	push   eax
c001d463:	0f b6 c3             	movzx  eax,bl
c001d466:	50                   	push   eax
c001d467:	68 57 37 02 c0       	push   0xc0023757
c001d46c:	e8 a4 1d ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001d471:	83 c4 10             	add    esp,0x10
c001d474:	83 c4 1c             	add    esp,0x1c
c001d477:	88 d8                	mov    al,bl
c001d479:	5b                   	pop    ebx
c001d47a:	5e                   	pop    esi
c001d47b:	5f                   	pop    edi
c001d47c:	5d                   	pop    ebp
c001d47d:	c3                   	ret    

c001d47e <IDE::polling(unsigned char, unsigned int)>:
c001d47e:	55                   	push   ebp
c001d47f:	bd 04 00 00 00       	mov    ebp,0x4
c001d484:	57                   	push   edi
c001d485:	56                   	push   esi
c001d486:	53                   	push   ebx
c001d487:	83 ec 0c             	sub    esp,0xc
c001d48a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d48e:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001d492:	52                   	push   edx
c001d493:	6a 0c                	push   0xc
c001d495:	0f b6 f3             	movzx  esi,bl
c001d498:	56                   	push   esi
c001d499:	57                   	push   edi
c001d49a:	e8 e9 f4 ff ff       	call   c001c988 <IDE::read(unsigned char, unsigned char)>
c001d49f:	83 c4 10             	add    esp,0x10
c001d4a2:	4d                   	dec    ebp
c001d4a3:	75 ed                	jne    c001d492 <IDE::polling(unsigned char, unsigned int)+0x14>
c001d4a5:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d4aa:	50                   	push   eax
c001d4ab:	6a 0c                	push   0xc
c001d4ad:	56                   	push   esi
c001d4ae:	57                   	push   edi
c001d4af:	e8 d4 f4 ff ff       	call   c001c988 <IDE::read(unsigned char, unsigned char)>
c001d4b4:	83 c4 10             	add    esp,0x10
c001d4b7:	a8 01                	test   al,0x1
c001d4b9:	74 12                	je     c001d4cd <IDE::polling(unsigned char, unsigned int)+0x4f>
c001d4bb:	83 ec 0c             	sub    esp,0xc
c001d4be:	68 71 37 02 c0       	push   0xc0023771
c001d4c3:	e8 4d 1d ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001d4c8:	83 c4 10             	add    esp,0x10
c001d4cb:	eb 17                	jmp    c001d4e4 <IDE::polling(unsigned char, unsigned int)+0x66>
c001d4cd:	a8 20                	test   al,0x20
c001d4cf:	75 0f                	jne    c001d4e0 <IDE::polling(unsigned char, unsigned int)+0x62>
c001d4d1:	4b                   	dec    ebx
c001d4d2:	74 10                	je     c001d4e4 <IDE::polling(unsigned char, unsigned int)+0x66>
c001d4d4:	84 c0                	test   al,al
c001d4d6:	78 d2                	js     c001d4aa <IDE::polling(unsigned char, unsigned int)+0x2c>
c001d4d8:	a8 08                	test   al,0x8
c001d4da:	74 ce                	je     c001d4aa <IDE::polling(unsigned char, unsigned int)+0x2c>
c001d4dc:	31 c0                	xor    eax,eax
c001d4de:	eb 06                	jmp    c001d4e6 <IDE::polling(unsigned char, unsigned int)+0x68>
c001d4e0:	b0 01                	mov    al,0x1
c001d4e2:	eb 02                	jmp    c001d4e6 <IDE::polling(unsigned char, unsigned int)+0x68>
c001d4e4:	b0 02                	mov    al,0x2
c001d4e6:	83 c4 0c             	add    esp,0xc
c001d4e9:	5b                   	pop    ebx
c001d4ea:	5e                   	pop    esi
c001d4eb:	5f                   	pop    edi
c001d4ec:	5d                   	pop    ebp
c001d4ed:	c3                   	ret    

c001d4ee <ATA::close(int, int, void*)>:
c001d4ee:	83 ec 0c             	sub    esp,0xc
c001d4f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4f5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d4fb:	85 c0                	test   eax,eax
c001d4fd:	74 0c                	je     c001d50b <ATA::close(int, int, void*)+0x1d>
c001d4ff:	83 ec 0c             	sub    esp,0xc
c001d502:	8b 10                	mov    edx,DWORD PTR [eax]
c001d504:	50                   	push   eax
c001d505:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d508:	83 c4 10             	add    esp,0x10
c001d50b:	31 c0                	xor    eax,eax
c001d50d:	83 c4 0c             	add    esp,0xc
c001d510:	c3                   	ret    
c001d511:	90                   	nop

c001d512 <ATA::powerSaving(PowerSavingLevel)>:
c001d512:	c3                   	ret    
c001d513:	90                   	nop

c001d514 <ATA::ATA()>:
c001d514:	83 ec 0c             	sub    esp,0xc
c001d517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d51b:	83 ec 04             	sub    esp,0x4
c001d51e:	68 00 02 00 00       	push   0x200
c001d523:	68 b4 37 02 c0       	push   0xc00237b4
c001d528:	50                   	push   eax
c001d529:	e8 02 35 ff ff       	call   c0010a30 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d52e:	83 c4 10             	add    esp,0x10
c001d531:	ba e0 37 02 c0       	mov    edx,0xc00237e0
c001d536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d53a:	89 10                	mov    DWORD PTR [eax],edx
c001d53c:	90                   	nop
c001d53d:	83 c4 0c             	add    esp,0xc
c001d540:	c3                   	ret    
c001d541:	90                   	nop

c001d542 <ATA::flush(bool)>:
c001d542:	53                   	push   ebx
c001d543:	83 ec 08             	sub    esp,0x8
c001d546:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001d54b:	19 c0                	sbb    eax,eax
c001d54d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d551:	83 e0 fd             	and    eax,0xfffffffd
c001d554:	05 ea 00 00 00       	add    eax,0xea
c001d559:	50                   	push   eax
c001d55a:	6a 07                	push   0x7
c001d55c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d563:	50                   	push   eax
c001d564:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d56a:	e8 59 f3 ff ff       	call   c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d56f:	83 c4 0c             	add    esp,0xc
c001d572:	6a 00                	push   0x0
c001d574:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d57b:	50                   	push   eax
c001d57c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d582:	e8 f7 fe ff ff       	call   c001d47e <IDE::polling(unsigned char, unsigned int)>
c001d587:	83 c4 18             	add    esp,0x18
c001d58a:	5b                   	pop    ebx
c001d58b:	c3                   	ret    

c001d58c <ATA::readyForCommand()>:
c001d58c:	56                   	push   esi
c001d58d:	53                   	push   ebx
c001d58e:	31 db                	xor    ebx,ebx
c001d590:	50                   	push   eax
c001d591:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d595:	50                   	push   eax
c001d596:	6a 0c                	push   0xc
c001d598:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d59f:	50                   	push   eax
c001d5a0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d5a6:	e8 dd f3 ff ff       	call   c001c988 <IDE::read(unsigned char, unsigned char)>
c001d5ab:	83 c4 10             	add    esp,0x10
c001d5ae:	a8 88                	test   al,0x88
c001d5b0:	74 23                	je     c001d5d5 <ATA::readyForCommand()+0x49>
c001d5b2:	43                   	inc    ebx
c001d5b3:	83 fb 63             	cmp    ebx,0x63
c001d5b6:	7e dd                	jle    c001d595 <ATA::readyForCommand()+0x9>
c001d5b8:	51                   	push   ecx
c001d5b9:	51                   	push   ecx
c001d5ba:	6a 00                	push   0x0
c001d5bc:	68 40 42 0f 00       	push   0xf4240
c001d5c1:	e8 e5 b9 ff ff       	call   c0018fab <nanoSleep(unsigned long long)>
c001d5c6:	83 c4 10             	add    esp,0x10
c001d5c9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d5cf:	75 c4                	jne    c001d595 <ATA::readyForCommand()+0x9>
c001d5d1:	31 c0                	xor    eax,eax
c001d5d3:	eb 02                	jmp    c001d5d7 <ATA::readyForCommand()+0x4b>
c001d5d5:	b0 01                	mov    al,0x1
c001d5d7:	5a                   	pop    edx
c001d5d8:	5b                   	pop    ebx
c001d5d9:	5e                   	pop    esi
c001d5da:	c3                   	ret    
c001d5db:	90                   	nop

c001d5dc <ATA::access(unsigned long long, int, void*, bool)>:
c001d5dc:	55                   	push   ebp
c001d5dd:	57                   	push   edi
c001d5de:	56                   	push   esi
c001d5df:	53                   	push   ebx
c001d5e0:	83 ec 2c             	sub    esp,0x2c
c001d5e3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d5e7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d5eb:	89 04 24             	mov    DWORD PTR [esp],eax
c001d5ee:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d5f2:	8a 04 24             	mov    al,BYTE PTR [esp]
c001d5f5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d5f9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001d5fd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d603:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d607:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d60d:	c1 e0 06             	shl    eax,0x6
c001d610:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001d614:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001d61c:	74 5d                	je     c001d67b <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001d61e:	89 fa                	mov    edx,edi
c001d620:	89 f0                	mov    eax,esi
c001d622:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001d626:	c1 ea 1c             	shr    edx,0x1c
c001d629:	89 d1                	mov    ecx,edx
c001d62b:	09 c1                	or     ecx,eax
c001d62d:	74 25                	je     c001d654 <ATA::access(unsigned long long, int, void*, bool)+0x78>
c001d62f:	31 ed                	xor    ebp,ebp
c001d631:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001d638:	89 fa                	mov    edx,edi
c001d63a:	89 f0                	mov    eax,esi
c001d63c:	0f ad d0             	shrd   eax,edx,cl
c001d63f:	d3 ea                	shr    edx,cl
c001d641:	f6 c1 20             	test   cl,0x20
c001d644:	74 02                	je     c001d648 <ATA::access(unsigned long long, int, void*, bool)+0x6c>
c001d646:	89 d0                	mov    eax,edx
c001d648:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001d64c:	45                   	inc    ebp
c001d64d:	83 fd 06             	cmp    ebp,0x6
c001d650:	75 df                	jne    c001d631 <ATA::access(unsigned long long, int, void*, bool)+0x55>
c001d652:	eb 73                	jmp    c001d6c7 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001d654:	89 f0                	mov    eax,esi
c001d656:	89 fa                	mov    edx,edi
c001d658:	0f ac d0 10          	shrd   eax,edx,0x10
c001d65c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001d661:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d665:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d66c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d671:	c1 ee 18             	shr    esi,0x18
c001d674:	bf 01 00 00 00       	mov    edi,0x1
c001d679:	eb 53                	jmp    c001d6ce <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d67b:	6a 00                	push   0x0
c001d67d:	6a 3f                	push   0x3f
c001d67f:	57                   	push   edi
c001d680:	56                   	push   esi
c001d681:	e8 86 1f 00 00       	call   c001f60c <__umoddi3>
c001d686:	83 c4 10             	add    esp,0x10
c001d689:	40                   	inc    eax
c001d68a:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d68e:	6a 00                	push   0x0
c001d690:	68 f0 03 00 00       	push   0x3f0
c001d695:	57                   	push   edi
c001d696:	56                   	push   esi
c001d697:	e8 70 1e 00 00       	call   c001f50c <__udivdi3>
c001d69c:	83 c4 10             	add    esp,0x10
c001d69f:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001d6a4:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d6ab:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d6b0:	6a 00                	push   0x0
c001d6b2:	6a 3f                	push   0x3f
c001d6b4:	57                   	push   edi
c001d6b5:	31 ff                	xor    edi,edi
c001d6b7:	56                   	push   esi
c001d6b8:	e8 4f 1e 00 00       	call   c001f50c <__udivdi3>
c001d6bd:	89 c6                	mov    esi,eax
c001d6bf:	83 c4 10             	add    esp,0x10
c001d6c2:	83 e6 0f             	and    esi,0xf
c001d6c5:	eb 07                	jmp    c001d6ce <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d6c7:	31 f6                	xor    esi,esi
c001d6c9:	bf 02 00 00 00       	mov    edi,0x2
c001d6ce:	50                   	push   eax
c001d6cf:	6a 00                	push   0x0
c001d6d1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d6d8:	50                   	push   eax
c001d6d9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d6dd:	e8 f8 f3 ff ff       	call   c001cada <IDE::enableIRQs(unsigned char, bool)>
c001d6e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6e5:	e8 a2 fe ff ff       	call   c001d58c <ATA::readyForCommand()>
c001d6ea:	83 c4 10             	add    esp,0x10
c001d6ed:	84 c0                	test   al,al
c001d6ef:	75 0a                	jne    c001d6fb <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001d6f1:	be 01 00 00 00       	mov    esi,0x1
c001d6f6:	e9 79 02 00 00       	jmp    c001d974 <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d6fb:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d701:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d707:	c1 e0 04             	shl    eax,0x4
c001d70a:	09 c6                	or     esi,eax
c001d70c:	89 f8                	mov    eax,edi
c001d70e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001d715:	84 c0                	test   al,al
c001d717:	75 05                	jne    c001d71e <ATA::access(unsigned long long, int, void*, bool)+0x142>
c001d719:	83 ce a0             	or     esi,0xffffffa0
c001d71c:	eb 03                	jmp    c001d721 <ATA::access(unsigned long long, int, void*, bool)+0x145>
c001d71e:	83 ce e0             	or     esi,0xffffffe0
c001d721:	89 f0                	mov    eax,esi
c001d723:	0f b6 f0             	movzx  esi,al
c001d726:	56                   	push   esi
c001d727:	6a 06                	push   0x6
c001d729:	51                   	push   ecx
c001d72a:	52                   	push   edx
c001d72b:	e8 98 f1 ff ff       	call   c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d730:	83 c4 10             	add    esp,0x10
c001d733:	6a 00                	push   0x0
c001d735:	6a 01                	push   0x1
c001d737:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d73e:	50                   	push   eax
c001d73f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d745:	e8 7e f1 ff ff       	call   c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d74a:	89 f8                	mov    eax,edi
c001d74c:	83 c4 10             	add    esp,0x10
c001d74f:	3c 02                	cmp    al,0x2
c001d751:	75 6e                	jne    c001d7c1 <ATA::access(unsigned long long, int, void*, bool)+0x1e5>
c001d753:	6a 00                	push   0x0
c001d755:	6a 08                	push   0x8
c001d757:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d75e:	50                   	push   eax
c001d75f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d765:	e8 5e f1 ff ff       	call   c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d76a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001d76f:	50                   	push   eax
c001d770:	6a 09                	push   0x9
c001d772:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d779:	50                   	push   eax
c001d77a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d780:	e8 43 f1 ff ff       	call   c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d785:	83 c4 20             	add    esp,0x20
c001d788:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001d78d:	50                   	push   eax
c001d78e:	6a 0a                	push   0xa
c001d790:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d797:	50                   	push   eax
c001d798:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d79e:	e8 25 f1 ff ff       	call   c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7a3:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001d7a8:	50                   	push   eax
c001d7a9:	6a 0b                	push   0xb
c001d7ab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7b2:	50                   	push   eax
c001d7b3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7b9:	e8 0a f1 ff ff       	call   c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7be:	83 c4 20             	add    esp,0x20
c001d7c1:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d7c6:	50                   	push   eax
c001d7c7:	6a 02                	push   0x2
c001d7c9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7d0:	50                   	push   eax
c001d7d1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7d7:	e8 ec f0 ff ff       	call   c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7dc:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d7e1:	50                   	push   eax
c001d7e2:	6a 03                	push   0x3
c001d7e4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7eb:	50                   	push   eax
c001d7ec:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7f2:	e8 d1 f0 ff ff       	call   c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7f7:	83 c4 20             	add    esp,0x20
c001d7fa:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d7ff:	50                   	push   eax
c001d800:	6a 04                	push   0x4
c001d802:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d809:	50                   	push   eax
c001d80a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d810:	e8 b3 f0 ff ff       	call   c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d815:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d81a:	50                   	push   eax
c001d81b:	6a 05                	push   0x5
c001d81d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d824:	50                   	push   eax
c001d825:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d82b:	e8 98 f0 ff ff       	call   c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d830:	83 c4 20             	add    esp,0x20
c001d833:	89 f8                	mov    eax,edi
c001d835:	3c 02                	cmp    al,0x2
c001d837:	0f 94 44 24 04       	sete   BYTE PTR [esp+0x4]
c001d83c:	75 06                	jne    c001d844 <ATA::access(unsigned long long, int, void*, bool)+0x268>
c001d83e:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d842:	75 40                	jne    c001d884 <ATA::access(unsigned long long, int, void*, bool)+0x2a8>
c001d844:	89 f8                	mov    eax,edi
c001d846:	3c 02                	cmp    al,0x2
c001d848:	0f 95 c1             	setne  cl
c001d84b:	74 0b                	je     c001d858 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001d84d:	b8 30 00 00 00       	mov    eax,0x30
c001d852:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d856:	75 31                	jne    c001d889 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d858:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001d85b:	83 f2 01             	xor    edx,0x1
c001d85e:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d863:	74 09                	je     c001d86e <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001d865:	b8 24 00 00 00       	mov    eax,0x24
c001d86a:	84 d2                	test   dl,dl
c001d86c:	75 1b                	jne    c001d889 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d86e:	84 c9                	test   cl,cl
c001d870:	0f 84 7b fe ff ff    	je     c001d6f1 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d876:	b8 20 00 00 00       	mov    eax,0x20
c001d87b:	84 d2                	test   dl,dl
c001d87d:	75 0a                	jne    c001d889 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d87f:	e9 6d fe ff ff       	jmp    c001d6f1 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d884:	b8 34 00 00 00       	mov    eax,0x34
c001d889:	50                   	push   eax
c001d88a:	6a 07                	push   0x7
c001d88c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d893:	50                   	push   eax
c001d894:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d89a:	e8 29 f0 ff ff       	call   c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d89f:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d8a3:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d8a7:	83 c4 10             	add    esp,0x10
c001d8aa:	85 f6                	test   esi,esi
c001d8ac:	0f 84 a9 00 00 00    	je     c001d95b <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001d8b2:	50                   	push   eax
c001d8b3:	6a 01                	push   0x1
c001d8b5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8bc:	50                   	push   eax
c001d8bd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8c3:	e8 b6 fb ff ff       	call   c001d47e <IDE::polling(unsigned char, unsigned int)>
c001d8c8:	83 c4 10             	add    esp,0x10
c001d8cb:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d8d1:	84 c0                	test   al,al
c001d8d3:	74 1d                	je     c001d8f2 <ATA::access(unsigned long long, int, void*, bool)+0x316>
c001d8d5:	0f b6 f0             	movzx  esi,al
c001d8d8:	56                   	push   esi
c001d8d9:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d8e0:	0f b6 d2             	movzx  edx,dl
c001d8e3:	50                   	push   eax
c001d8e4:	52                   	push   edx
c001d8e5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8eb:	e8 f8 f9 ff ff       	call   c001d2e8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d8f0:	eb 7f                	jmp    c001d971 <ATA::access(unsigned long long, int, void*, bool)+0x395>
c001d8f2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d8f7:	74 41                	je     c001d93a <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c001d8f9:	31 c9                	xor    ecx,ecx
c001d8fb:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001d8ff:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d903:	50                   	push   eax
c001d904:	50                   	push   eax
c001d905:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d90c:	50                   	push   eax
c001d90d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d913:	e8 9e ef ff ff       	call   c001c8b6 <IDE::getBase(unsigned char)>
c001d918:	89 c2                	mov    edx,eax
c001d91a:	89 e8                	mov    eax,ebp
c001d91c:	66 ef                	out    dx,ax
c001d91e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d922:	83 c4 10             	add    esp,0x10
c001d925:	41                   	inc    ecx
c001d926:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d92c:	75 cd                	jne    c001d8fb <ATA::access(unsigned long long, int, void*, bool)+0x31f>
c001d92e:	4e                   	dec    esi
c001d92f:	81 c7 00 02 00 00    	add    edi,0x200
c001d935:	e9 70 ff ff ff       	jmp    c001d8aa <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c001d93a:	51                   	push   ecx
c001d93b:	51                   	push   ecx
c001d93c:	0f b6 d2             	movzx  edx,dl
c001d93f:	52                   	push   edx
c001d940:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d946:	e8 6b ef ff ff       	call   c001c8b6 <IDE::getBase(unsigned char)>
c001d94b:	b9 00 01 00 00       	mov    ecx,0x100
c001d950:	89 c2                	mov    edx,eax
c001d952:	fc                   	cld    
c001d953:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d956:	83 c4 10             	add    esp,0x10
c001d959:	eb d3                	jmp    c001d92e <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001d95b:	31 f6                	xor    esi,esi
c001d95d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d961:	74 11                	je     c001d974 <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d963:	50                   	push   eax
c001d964:	50                   	push   eax
c001d965:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d96a:	50                   	push   eax
c001d96b:	53                   	push   ebx
c001d96c:	e8 d1 fb ff ff       	call   c001d542 <ATA::flush(bool)>
c001d971:	83 c4 10             	add    esp,0x10
c001d974:	83 c4 2c             	add    esp,0x2c
c001d977:	89 f0                	mov    eax,esi
c001d979:	5b                   	pop    ebx
c001d97a:	5e                   	pop    esi
c001d97b:	5f                   	pop    edi
c001d97c:	5d                   	pop    ebp
c001d97d:	c3                   	ret    

c001d97e <ATA::read(unsigned long long, int, void*)>:
c001d97e:	57                   	push   edi
c001d97f:	b8 04 00 00 00       	mov    eax,0x4
c001d984:	56                   	push   esi
c001d985:	53                   	push   ebx
c001d986:	83 ec 10             	sub    esp,0x10
c001d989:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d98d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d991:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d995:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d999:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d99c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d9a2:	77 3b                	ja     c001d9df <ATA::read(unsigned long long, int, void*)+0x61>
c001d9a4:	b8 06 00 00 00       	mov    eax,0x6
c001d9a9:	85 d2                	test   edx,edx
c001d9ab:	74 32                	je     c001d9df <ATA::read(unsigned long long, int, void*)+0x61>
c001d9ad:	50                   	push   eax
c001d9ae:	50                   	push   eax
c001d9af:	6a 00                	push   0x0
c001d9b1:	52                   	push   edx
c001d9b2:	53                   	push   ebx
c001d9b3:	57                   	push   edi
c001d9b4:	56                   	push   esi
c001d9b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d9b9:	e8 1e fc ff ff       	call   c001d5dc <ATA::access(unsigned long long, int, void*, bool)>
c001d9be:	83 c4 20             	add    esp,0x20
c001d9c1:	85 c0                	test   eax,eax
c001d9c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d9c7:	75 11                	jne    c001d9da <ATA::read(unsigned long long, int, void*)+0x5c>
c001d9c9:	01 1d 44 65 02 c0    	add    DWORD PTR ds:0xc0026544,ebx
c001d9cf:	e8 18 f6 fe ff       	call   c000cfec <VgaText::updateDiskUsage()>
c001d9d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d9d8:	eb 05                	jmp    c001d9df <ATA::read(unsigned long long, int, void*)+0x61>
c001d9da:	b8 01 00 00 00       	mov    eax,0x1
c001d9df:	83 c4 10             	add    esp,0x10
c001d9e2:	5b                   	pop    ebx
c001d9e3:	5e                   	pop    esi
c001d9e4:	5f                   	pop    edi
c001d9e5:	c3                   	ret    

c001d9e6 <ATA::write(unsigned long long, int, void*)>:
c001d9e6:	57                   	push   edi
c001d9e7:	b8 04 00 00 00       	mov    eax,0x4
c001d9ec:	56                   	push   esi
c001d9ed:	53                   	push   ebx
c001d9ee:	83 ec 10             	sub    esp,0x10
c001d9f1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d9f5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d9f9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d9fd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001da01:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001da04:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001da0a:	77 3b                	ja     c001da47 <ATA::write(unsigned long long, int, void*)+0x61>
c001da0c:	b8 06 00 00 00       	mov    eax,0x6
c001da11:	85 d2                	test   edx,edx
c001da13:	74 32                	je     c001da47 <ATA::write(unsigned long long, int, void*)+0x61>
c001da15:	50                   	push   eax
c001da16:	50                   	push   eax
c001da17:	6a 01                	push   0x1
c001da19:	52                   	push   edx
c001da1a:	53                   	push   ebx
c001da1b:	57                   	push   edi
c001da1c:	56                   	push   esi
c001da1d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001da21:	e8 b6 fb ff ff       	call   c001d5dc <ATA::access(unsigned long long, int, void*, bool)>
c001da26:	83 c4 20             	add    esp,0x20
c001da29:	85 c0                	test   eax,eax
c001da2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001da2f:	75 11                	jne    c001da42 <ATA::write(unsigned long long, int, void*)+0x5c>
c001da31:	01 1d 40 65 02 c0    	add    DWORD PTR ds:0xc0026540,ebx
c001da37:	e8 b0 f5 fe ff       	call   c000cfec <VgaText::updateDiskUsage()>
c001da3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da40:	eb 05                	jmp    c001da47 <ATA::write(unsigned long long, int, void*)+0x61>
c001da42:	b8 01 00 00 00       	mov    eax,0x1
c001da47:	83 c4 10             	add    esp,0x10
c001da4a:	5b                   	pop    ebx
c001da4b:	5e                   	pop    esi
c001da4c:	5f                   	pop    edi
c001da4d:	c3                   	ret    

c001da4e <ATA::detectCHS()>:
c001da4e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001da52:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001da58:	c1 e0 06             	shl    eax,0x6
c001da5b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001da61:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001da6b:	c7 44 24 04 c3 37 02 c0 	mov    DWORD PTR [esp+0x4],0xc00237c3
c001da73:	e9 cc 7f ff ff       	jmp    c0015a44 <Krnl::panic(char const*)>

c001da78 <ATA::open(int, int, void*)>:
c001da78:	53                   	push   ebx
c001da79:	83 ec 08             	sub    esp,0x8
c001da7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da80:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001da84:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001da88:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001da8e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001da94:	c1 e0 06             	shl    eax,0x6
c001da97:	01 d0                	add    eax,edx
c001da99:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001daa0:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001daa6:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001daad:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dab7:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001dabd:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001dac4:	75 0c                	jne    c001dad2 <ATA::open(int, int, void*)+0x5a>
c001dac6:	83 ec 0c             	sub    esp,0xc
c001dac9:	53                   	push   ebx
c001daca:	e8 7f ff ff ff       	call   c001da4e <ATA::detectCHS()>
c001dacf:	83 c4 10             	add    esp,0x10
c001dad2:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001dad8:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001dade:	c1 e0 06             	shl    eax,0x6
c001dae1:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001dae8:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001daf2:	d1 e8                	shr    eax,1
c001daf4:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001dafa:	6a 04                	push   0x4
c001dafc:	6a 0c                	push   0xc
c001dafe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db05:	50                   	push   eax
c001db06:	52                   	push   edx
c001db07:	e8 bc ed ff ff       	call   c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db0c:	90                   	nop
c001db0d:	90                   	nop
c001db0e:	6a 00                	push   0x0
c001db10:	6a 0c                	push   0xc
c001db12:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db19:	50                   	push   eax
c001db1a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001db20:	e8 a3 ed ff ff       	call   c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db25:	83 c4 14             	add    esp,0x14
c001db28:	53                   	push   ebx
c001db29:	e8 6a 2f ff ff       	call   c0010a98 <PhysicalDisk::startCache()>
c001db2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db31:	e8 3e 4f ff ff       	call   c0012a74 <createPartitionsForDisk(PhysicalDisk*)>
c001db36:	83 c4 18             	add    esp,0x18
c001db39:	31 c0                	xor    eax,eax
c001db3b:	5b                   	pop    ebx
c001db3c:	c3                   	ret    
c001db3d:	90                   	nop

c001db3e <ATAPI::write(unsigned long long, int, void*)>:
c001db3e:	b8 03 00 00 00       	mov    eax,0x3
c001db43:	c3                   	ret    

c001db44 <ATAPI::close(int, int, void*)>:
c001db44:	83 ec 0c             	sub    esp,0xc
c001db47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db4b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001db51:	85 c0                	test   eax,eax
c001db53:	74 0c                	je     c001db61 <ATAPI::close(int, int, void*)+0x1d>
c001db55:	83 ec 0c             	sub    esp,0xc
c001db58:	8b 10                	mov    edx,DWORD PTR [eax]
c001db5a:	50                   	push   eax
c001db5b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001db5e:	83 c4 10             	add    esp,0x10
c001db61:	31 c0                	xor    eax,eax
c001db63:	83 c4 0c             	add    esp,0xc
c001db66:	c3                   	ret    
c001db67:	90                   	nop

c001db68 <ATAPI::ATAPI()>:
c001db68:	83 ec 0c             	sub    esp,0xc
c001db6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db6f:	83 ec 04             	sub    esp,0x4
c001db72:	68 00 08 00 00       	push   0x800
c001db77:	68 0c 38 02 c0       	push   0xc002380c
c001db7c:	50                   	push   eax
c001db7d:	e8 ae 2e ff ff       	call   c0010a30 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001db82:	83 c4 10             	add    esp,0x10
c001db85:	ba 4c 38 02 c0       	mov    edx,0xc002384c
c001db8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db8e:	89 10                	mov    DWORD PTR [eax],edx
c001db90:	90                   	nop
c001db91:	83 c4 0c             	add    esp,0xc
c001db94:	c3                   	ret    
c001db95:	90                   	nop

c001db96 <ATAPI::readyForCommand()>:
c001db96:	56                   	push   esi
c001db97:	53                   	push   ebx
c001db98:	31 db                	xor    ebx,ebx
c001db9a:	50                   	push   eax
c001db9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001db9f:	50                   	push   eax
c001dba0:	6a 0c                	push   0xc
c001dba2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001dba9:	50                   	push   eax
c001dbaa:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001dbb0:	e8 d3 ed ff ff       	call   c001c988 <IDE::read(unsigned char, unsigned char)>
c001dbb5:	83 c4 10             	add    esp,0x10
c001dbb8:	a8 88                	test   al,0x88
c001dbba:	74 23                	je     c001dbdf <ATAPI::readyForCommand()+0x49>
c001dbbc:	43                   	inc    ebx
c001dbbd:	83 fb 63             	cmp    ebx,0x63
c001dbc0:	7e dd                	jle    c001db9f <ATAPI::readyForCommand()+0x9>
c001dbc2:	51                   	push   ecx
c001dbc3:	51                   	push   ecx
c001dbc4:	6a 00                	push   0x0
c001dbc6:	68 40 42 0f 00       	push   0xf4240
c001dbcb:	e8 db b3 ff ff       	call   c0018fab <nanoSleep(unsigned long long)>
c001dbd0:	83 c4 10             	add    esp,0x10
c001dbd3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001dbd9:	75 c4                	jne    c001db9f <ATAPI::readyForCommand()+0x9>
c001dbdb:	31 c0                	xor    eax,eax
c001dbdd:	eb 02                	jmp    c001dbe1 <ATAPI::readyForCommand()+0x4b>
c001dbdf:	b0 01                	mov    al,0x1
c001dbe1:	5a                   	pop    edx
c001dbe2:	5b                   	pop    ebx
c001dbe3:	5e                   	pop    esi
c001dbe4:	c3                   	ret    
c001dbe5:	90                   	nop

c001dbe6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001dbe6:	55                   	push   ebp
c001dbe7:	57                   	push   edi
c001dbe8:	56                   	push   esi
c001dbe9:	53                   	push   ebx
c001dbea:	83 ec 20             	sub    esp,0x20
c001dbed:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001dbf1:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001dbf5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dbf9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001dbfd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001dc01:	6a 01                	push   0x1
c001dc03:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc0a:	50                   	push   eax
c001dc0b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc11:	e8 c4 ee ff ff       	call   c001cada <IDE::enableIRQs(unsigned char, bool)>
c001dc16:	5e                   	pop    esi
c001dc17:	58                   	pop    eax
c001dc18:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc1f:	50                   	push   eax
c001dc20:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc26:	e8 77 ec ff ff       	call   c001c8a2 <IDE::prepareInterrupt(unsigned char)>
c001dc2b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dc2e:	e8 63 ff ff ff       	call   c001db96 <ATAPI::readyForCommand()>
c001dc33:	83 c4 10             	add    esp,0x10
c001dc36:	84 c0                	test   al,al
c001dc38:	75 0a                	jne    c001dc44 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001dc3a:	bb 01 00 00 00       	mov    ebx,0x1
c001dc3f:	e9 57 02 00 00       	jmp    c001de9b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dc44:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001dc4a:	c1 e0 04             	shl    eax,0x4
c001dc4d:	0f b6 c0             	movzx  eax,al
c001dc50:	50                   	push   eax
c001dc51:	6a 06                	push   0x6
c001dc53:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc5a:	50                   	push   eax
c001dc5b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc61:	e8 62 ec ff ff       	call   c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc66:	6a 00                	push   0x0
c001dc68:	6a 01                	push   0x1
c001dc6a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc71:	50                   	push   eax
c001dc72:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc78:	e8 4b ec ff ff       	call   c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc7d:	83 c4 20             	add    esp,0x20
c001dc80:	0f b6 c3             	movzx  eax,bl
c001dc83:	50                   	push   eax
c001dc84:	6a 04                	push   0x4
c001dc86:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc8d:	50                   	push   eax
c001dc8e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc94:	0f b6 df             	movzx  ebx,bh
c001dc97:	e8 2c ec ff ff       	call   c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc9c:	53                   	push   ebx
c001dc9d:	6a 05                	push   0x5
c001dc9f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dca6:	50                   	push   eax
c001dca7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dcad:	e8 16 ec ff ff       	call   c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dcb2:	83 c4 20             	add    esp,0x20
c001dcb5:	68 a0 00 00 00       	push   0xa0
c001dcba:	6a 07                	push   0x7
c001dcbc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dcc3:	50                   	push   eax
c001dcc4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dcca:	e8 f9 eb ff ff       	call   c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dccf:	83 c4 0c             	add    esp,0xc
c001dcd2:	6a 01                	push   0x1
c001dcd4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dcdb:	50                   	push   eax
c001dcdc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dce2:	e8 97 f7 ff ff       	call   c001d47e <IDE::polling(unsigned char, unsigned int)>
c001dce7:	83 c4 10             	add    esp,0x10
c001dcea:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001dcf0:	84 c0                	test   al,al
c001dcf2:	74 23                	je     c001dd17 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001dcf4:	0f b6 d8             	movzx  ebx,al
c001dcf7:	53                   	push   ebx
c001dcf8:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001dcff:	0f b6 d2             	movzx  edx,dl
c001dd02:	50                   	push   eax
c001dd03:	52                   	push   edx
c001dd04:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd0a:	e8 d9 f5 ff ff       	call   c001d2e8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001dd0f:	83 c4 10             	add    esp,0x10
c001dd12:	e9 84 01 00 00       	jmp    c001de9b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dd17:	53                   	push   ebx
c001dd18:	53                   	push   ebx
c001dd19:	0f b6 d2             	movzx  edx,dl
c001dd1c:	52                   	push   edx
c001dd1d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd23:	e8 8e eb ff ff       	call   c001c8b6 <IDE::getBase(unsigned char)>
c001dd28:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001dd2c:	b9 06 00 00 00       	mov    ecx,0x6
c001dd31:	89 c2                	mov    edx,eax
c001dd33:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001dd36:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001dd3a:	83 c4 10             	add    esp,0x10
c001dd3d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001dd43:	85 db                	test   ebx,ebx
c001dd45:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dd4c:	0f 84 ec 00 00 00    	je     c001de3e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001dd52:	51                   	push   ecx
c001dd53:	51                   	push   ecx
c001dd54:	52                   	push   edx
c001dd55:	50                   	push   eax
c001dd56:	e8 db ec ff ff       	call   c001ca36 <IDE::waitInterrupt(unsigned char)>
c001dd5b:	83 c4 10             	add    esp,0x10
c001dd5e:	84 c0                	test   al,al
c001dd60:	0f 84 d4 fe ff ff    	je     c001dc3a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001dd66:	56                   	push   esi
c001dd67:	56                   	push   esi
c001dd68:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd6f:	50                   	push   eax
c001dd70:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd76:	e8 27 eb ff ff       	call   c001c8a2 <IDE::prepareInterrupt(unsigned char)>
c001dd7b:	83 c4 0c             	add    esp,0xc
c001dd7e:	6a 04                	push   0x4
c001dd80:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd87:	50                   	push   eax
c001dd88:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd8e:	e8 f5 eb ff ff       	call   c001c988 <IDE::read(unsigned char, unsigned char)>
c001dd93:	83 c4 0c             	add    esp,0xc
c001dd96:	6a 05                	push   0x5
c001dd98:	89 c6                	mov    esi,eax
c001dd9a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dda1:	50                   	push   eax
c001dda2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dda8:	e8 db eb ff ff       	call   c001c988 <IDE::read(unsigned char, unsigned char)>
c001ddad:	89 f1                	mov    ecx,esi
c001ddaf:	0f b6 c0             	movzx  eax,al
c001ddb2:	c1 e0 08             	shl    eax,0x8
c001ddb5:	0f b6 f1             	movzx  esi,cl
c001ddb8:	09 c6                	or     esi,eax
c001ddba:	d1 fe                	sar    esi,1
c001ddbc:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001ddc0:	83 c4 10             	add    esp,0x10
c001ddc3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ddc8:	74 41                	je     c001de0b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001ddca:	31 c9                	xor    ecx,ecx
c001ddcc:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ddd2:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001ddd6:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dddd:	75 0a                	jne    c001dde9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001dddf:	01 c9                	add    ecx,ecx
c001dde1:	01 cd                	add    ebp,ecx
c001dde3:	4b                   	dec    ebx
c001dde4:	e9 54 ff ff ff       	jmp    c001dd3d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001dde9:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001ddee:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ddf2:	51                   	push   ecx
c001ddf3:	51                   	push   ecx
c001ddf4:	52                   	push   edx
c001ddf5:	50                   	push   eax
c001ddf6:	e8 bb ea ff ff       	call   c001c8b6 <IDE::getBase(unsigned char)>
c001ddfb:	89 c2                	mov    edx,eax
c001ddfd:	89 f0                	mov    eax,esi
c001ddff:	66 ef                	out    dx,ax
c001de01:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001de05:	83 c4 10             	add    esp,0x10
c001de08:	41                   	inc    ecx
c001de09:	eb c1                	jmp    c001ddcc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001de0b:	31 f6                	xor    esi,esi
c001de0d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001de13:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001de17:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001de1e:	75 06                	jne    c001de26 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001de20:	01 f6                	add    esi,esi
c001de22:	01 f5                	add    ebp,esi
c001de24:	eb bd                	jmp    c001dde3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001de26:	51                   	push   ecx
c001de27:	51                   	push   ecx
c001de28:	52                   	push   edx
c001de29:	50                   	push   eax
c001de2a:	e8 87 ea ff ff       	call   c001c8b6 <IDE::getBase(unsigned char)>
c001de2f:	89 c2                	mov    edx,eax
c001de31:	66 ed                	in     ax,dx
c001de33:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001de38:	83 c4 10             	add    esp,0x10
c001de3b:	46                   	inc    esi
c001de3c:	eb cf                	jmp    c001de0d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001de3e:	51                   	push   ecx
c001de3f:	51                   	push   ecx
c001de40:	52                   	push   edx
c001de41:	50                   	push   eax
c001de42:	e8 ef eb ff ff       	call   c001ca36 <IDE::waitInterrupt(unsigned char)>
c001de47:	83 c4 10             	add    esp,0x10
c001de4a:	84 c0                	test   al,al
c001de4c:	0f 84 e8 fd ff ff    	je     c001dc3a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001de52:	52                   	push   edx
c001de53:	bb a0 86 01 00       	mov    ebx,0x186a0
c001de58:	52                   	push   edx
c001de59:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de60:	50                   	push   eax
c001de61:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de67:	e8 36 ea ff ff       	call   c001c8a2 <IDE::prepareInterrupt(unsigned char)>
c001de6c:	83 c4 10             	add    esp,0x10
c001de6f:	50                   	push   eax
c001de70:	50                   	push   eax
c001de71:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de78:	50                   	push   eax
c001de79:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de7f:	e8 32 ea ff ff       	call   c001c8b6 <IDE::getBase(unsigned char)>
c001de84:	8d 50 07             	lea    edx,[eax+0x7]
c001de87:	ec                   	in     al,dx
c001de88:	83 c4 10             	add    esp,0x10
c001de8b:	a8 88                	test   al,0x88
c001de8d:	74 0a                	je     c001de99 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001de8f:	4b                   	dec    ebx
c001de90:	75 dd                	jne    c001de6f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001de92:	bb 02 00 00 00       	mov    ebx,0x2
c001de97:	eb 02                	jmp    c001de9b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001de99:	31 db                	xor    ebx,ebx
c001de9b:	83 c4 1c             	add    esp,0x1c
c001de9e:	89 d8                	mov    eax,ebx
c001dea0:	5b                   	pop    ebx
c001dea1:	5e                   	pop    esi
c001dea2:	5f                   	pop    edi
c001dea3:	5d                   	pop    ebp
c001dea4:	c3                   	ret    
c001dea5:	90                   	nop

c001dea6 <ATAPI::diskRemoved()>:
c001dea6:	83 ec 18             	sub    esp,0x18
c001dea9:	68 17 38 02 c0       	push   0xc0023817
c001deae:	e8 62 13 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001deb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001deb7:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001debe:	83 c4 1c             	add    esp,0x1c
c001dec1:	c3                   	ret    

c001dec2 <ATAPI::eject()>:
c001dec2:	57                   	push   edi
c001dec3:	b9 03 00 00 00       	mov    ecx,0x3
c001dec8:	53                   	push   ebx
c001dec9:	83 ec 14             	sub    esp,0x14
c001decc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ded0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ded4:	fc                   	cld    
c001ded5:	31 c0                	xor    eax,eax
c001ded7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ded9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001dede:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001dee3:	50                   	push   eax
c001dee4:	50                   	push   eax
c001dee5:	6a 00                	push   0x0
c001dee7:	6a 00                	push   0x0
c001dee9:	6a 00                	push   0x0
c001deeb:	6a 02                	push   0x2
c001deed:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001def1:	50                   	push   eax
c001def2:	53                   	push   ebx
c001def3:	e8 ee fc ff ff       	call   c001dbe6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001def8:	83 c4 14             	add    esp,0x14
c001defb:	53                   	push   ebx
c001defc:	e8 a5 ff ff ff       	call   c001dea6 <ATAPI::diskRemoved()>
c001df01:	83 c4 24             	add    esp,0x24
c001df04:	5b                   	pop    ebx
c001df05:	5f                   	pop    edi
c001df06:	c3                   	ret    
c001df07:	90                   	nop

c001df08 <ATAPI::diskInserted()>:
c001df08:	53                   	push   ebx
c001df09:	83 ec 14             	sub    esp,0x14
c001df0c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001df10:	68 2d 38 02 c0       	push   0xc002382d
c001df15:	e8 fb 12 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001df1a:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001df21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001df24:	e8 6f 2b ff ff       	call   c0010a98 <PhysicalDisk::startCache()>
c001df29:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001df2d:	83 c4 18             	add    esp,0x18
c001df30:	5b                   	pop    ebx
c001df31:	e9 3e 4b ff ff       	jmp    c0012a74 <createPartitionsForDisk(PhysicalDisk*)>

c001df36 <ATAPI::detectMedia()>:
c001df36:	56                   	push   esi
c001df37:	53                   	push   ebx
c001df38:	83 ec 28             	sub    esp,0x28
c001df3b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001df3f:	6a 0c                	push   0xc
c001df41:	6a 00                	push   0x0
c001df43:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001df47:	56                   	push   esi
c001df48:	e8 77 27 fe ff       	call   c00006c4 <memset>
c001df4d:	58                   	pop    eax
c001df4e:	5a                   	pop    edx
c001df4f:	6a 00                	push   0x0
c001df51:	6a 00                	push   0x0
c001df53:	6a 00                	push   0x0
c001df55:	6a 00                	push   0x0
c001df57:	56                   	push   esi
c001df58:	53                   	push   ebx
c001df59:	e8 88 fc ff ff       	call   c001dbe6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001df5e:	83 c4 1c             	add    esp,0x1c
c001df61:	6a 0c                	push   0xc
c001df63:	6a 00                	push   0x0
c001df65:	56                   	push   esi
c001df66:	e8 59 27 fe ff       	call   c00006c4 <memset>
c001df6b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001df70:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001df75:	59                   	pop    ecx
c001df76:	58                   	pop    eax
c001df77:	6a 01                	push   0x1
c001df79:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001df7d:	50                   	push   eax
c001df7e:	6a 00                	push   0x0
c001df80:	6a 12                	push   0x12
c001df82:	56                   	push   esi
c001df83:	53                   	push   ebx
c001df84:	e8 5d fc ff ff       	call   c001dbe6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001df89:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001df8d:	83 c4 20             	add    esp,0x20
c001df90:	83 e0 7f             	and    eax,0x7f
c001df93:	3c 70                	cmp    al,0x70
c001df95:	74 15                	je     c001dfac <ATAPI::detectMedia()+0x76>
c001df97:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001df9e:	75 0c                	jne    c001dfac <ATAPI::detectMedia()+0x76>
c001dfa0:	83 ec 0c             	sub    esp,0xc
c001dfa3:	53                   	push   ebx
c001dfa4:	e8 5f ff ff ff       	call   c001df08 <ATAPI::diskInserted()>
c001dfa9:	83 c4 10             	add    esp,0x10
c001dfac:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001dfb0:	83 e0 0f             	and    eax,0xf
c001dfb3:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001dfb8:	75 18                	jne    c001dfd2 <ATAPI::detectMedia()+0x9c>
c001dfba:	3c 02                	cmp    al,0x2
c001dfbc:	75 14                	jne    c001dfd2 <ATAPI::detectMedia()+0x9c>
c001dfbe:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dfc5:	74 24                	je     c001dfeb <ATAPI::detectMedia()+0xb5>
c001dfc7:	83 ec 0c             	sub    esp,0xc
c001dfca:	53                   	push   ebx
c001dfcb:	e8 d6 fe ff ff       	call   c001dea6 <ATAPI::diskRemoved()>
c001dfd0:	eb 16                	jmp    c001dfe8 <ATAPI::detectMedia()+0xb2>
c001dfd2:	84 c0                	test   al,al
c001dfd4:	75 15                	jne    c001dfeb <ATAPI::detectMedia()+0xb5>
c001dfd6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dfdd:	75 0c                	jne    c001dfeb <ATAPI::detectMedia()+0xb5>
c001dfdf:	83 ec 0c             	sub    esp,0xc
c001dfe2:	53                   	push   ebx
c001dfe3:	e8 20 ff ff ff       	call   c001df08 <ATAPI::diskInserted()>
c001dfe8:	83 c4 10             	add    esp,0x10
c001dfeb:	83 c4 24             	add    esp,0x24
c001dfee:	5b                   	pop    ebx
c001dfef:	5e                   	pop    esi
c001dff0:	c3                   	ret    
c001dff1:	90                   	nop

c001dff2 <ATAPI::open(int, int, void*)>:
c001dff2:	53                   	push   ebx
c001dff3:	83 ec 08             	sub    esp,0x8
c001dff6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dffa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dffe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e002:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e008:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001e00e:	c1 e0 06             	shl    eax,0x6
c001e011:	01 d0                	add    eax,edx
c001e013:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001e01a:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001e020:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001e027:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e031:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e037:	6a 04                	push   0x4
c001e039:	6a 0c                	push   0xc
c001e03b:	51                   	push   ecx
c001e03c:	52                   	push   edx
c001e03d:	e8 86 e8 ff ff       	call   c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e042:	90                   	nop
c001e043:	90                   	nop
c001e044:	6a 00                	push   0x0
c001e046:	6a 0c                	push   0xc
c001e048:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e04f:	50                   	push   eax
c001e050:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e056:	e8 6d e8 ff ff       	call   c001c8c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e05b:	83 c4 14             	add    esp,0x14
c001e05e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e065:	53                   	push   ebx
c001e066:	e8 cb fe ff ff       	call   c001df36 <ATAPI::detectMedia()>
c001e06b:	83 c4 18             	add    esp,0x18
c001e06e:	31 c0                	xor    eax,eax
c001e070:	5b                   	pop    ebx
c001e071:	c3                   	ret    

c001e072 <ATAPI::read(unsigned long long, int, void*)>:
c001e072:	55                   	push   ebp
c001e073:	57                   	push   edi
c001e074:	56                   	push   esi
c001e075:	53                   	push   ebx
c001e076:	83 ec 1c             	sub    esp,0x1c
c001e079:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e07d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e081:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e085:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e08c:	74 3c                	je     c001e0ca <ATAPI::read(unsigned long long, int, void*)+0x58>
c001e08e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e092:	b9 03 00 00 00       	mov    ecx,0x3
c001e097:	fc                   	cld    
c001e098:	31 c0                	xor    eax,eax
c001e09a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e09c:	0f ce                	bswap  esi
c001e09e:	89 e8                	mov    eax,ebp
c001e0a0:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001e0a5:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e0a9:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001e0ad:	50                   	push   eax
c001e0ae:	50                   	push   eax
c001e0af:	55                   	push   ebp
c001e0b0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e0b4:	c1 e5 0b             	shl    ebp,0xb
c001e0b7:	6a 00                	push   0x0
c001e0b9:	55                   	push   ebp
c001e0ba:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e0be:	50                   	push   eax
c001e0bf:	53                   	push   ebx
c001e0c0:	e8 21 fb ff ff       	call   c001dbe6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e0c5:	83 c4 20             	add    esp,0x20
c001e0c8:	eb 1a                	jmp    c001e0e4 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001e0ca:	83 ec 0c             	sub    esp,0xc
c001e0cd:	53                   	push   ebx
c001e0ce:	e8 63 fe ff ff       	call   c001df36 <ATAPI::detectMedia()>
c001e0d3:	83 c4 10             	add    esp,0x10
c001e0d6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e0dd:	75 af                	jne    c001e08e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001e0df:	b8 02 00 00 00       	mov    eax,0x2
c001e0e4:	83 c4 1c             	add    esp,0x1c
c001e0e7:	5b                   	pop    ebx
c001e0e8:	5e                   	pop    esi
c001e0e9:	5f                   	pop    edi
c001e0ea:	5d                   	pop    ebp
c001e0eb:	c3                   	ret    

c001e0ec <AVX::open(int, int, void*)>:
c001e0ec:	83 ec 0c             	sub    esp,0xc
c001e0ef:	e8 94 10 00 00       	call   c001f188 <avxInit>
c001e0f4:	b8 00 00 00 00       	mov    eax,0x0
c001e0f9:	83 c4 0c             	add    esp,0xc
c001e0fc:	c3                   	ret    
c001e0fd:	90                   	nop

c001e0fe <AVX::close(int, int, void*)>:
c001e0fe:	83 ec 0c             	sub    esp,0xc
c001e101:	e8 83 10 00 00       	call   c001f189 <avxClose>
c001e106:	b8 00 00 00 00       	mov    eax,0x0
c001e10b:	83 c4 0c             	add    esp,0xc
c001e10e:	c3                   	ret    
c001e10f:	90                   	nop

c001e110 <AVX::available()>:
c001e110:	83 ec 0c             	sub    esp,0xc
c001e113:	e8 68 10 00 00       	call   c001f180 <avxDetect>
c001e118:	85 c0                	test   eax,eax
c001e11a:	0f 95 c0             	setne  al
c001e11d:	83 c4 0c             	add    esp,0xc
c001e120:	c3                   	ret    
c001e121:	90                   	nop

c001e122 <AVX::save(void*)>:
c001e122:	83 ec 0c             	sub    esp,0xc
c001e125:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e129:	83 ec 0c             	sub    esp,0xc
c001e12c:	50                   	push   eax
c001e12d:	e8 54 10 00 00       	call   c001f186 <avxSave>
c001e132:	83 c4 10             	add    esp,0x10
c001e135:	90                   	nop
c001e136:	83 c4 0c             	add    esp,0xc
c001e139:	c3                   	ret    

c001e13a <AVX::load(void*)>:
c001e13a:	83 ec 0c             	sub    esp,0xc
c001e13d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e141:	83 ec 0c             	sub    esp,0xc
c001e144:	50                   	push   eax
c001e145:	e8 3d 10 00 00       	call   c001f187 <avxLoad>
c001e14a:	83 c4 10             	add    esp,0x10
c001e14d:	90                   	nop
c001e14e:	83 c4 0c             	add    esp,0xc
c001e151:	c3                   	ret    

c001e152 <AVX::AVX()>:
c001e152:	83 ec 0c             	sub    esp,0xc
c001e155:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e159:	83 ec 08             	sub    esp,0x8
c001e15c:	68 78 38 02 c0       	push   0xc0023878
c001e161:	50                   	push   eax
c001e162:	e8 a7 29 ff ff       	call   c0010b0e <FPU::FPU(char const*)>
c001e167:	83 c4 10             	add    esp,0x10
c001e16a:	ba 88 38 02 c0       	mov    edx,0xc0023888
c001e16f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e173:	89 10                	mov    DWORD PTR [eax],edx
c001e175:	90                   	nop
c001e176:	83 c4 0c             	add    esp,0xc
c001e179:	c3                   	ret    

c001e17a <MMX::available()>:
c001e17a:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001e17f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e185:	83 e0 20             	and    eax,0x20
c001e188:	84 c0                	test   al,al
c001e18a:	0f 95 c0             	setne  al
c001e18d:	c3                   	ret    

c001e18e <MMX::open(int, int, void*)>:
c001e18e:	83 ec 0c             	sub    esp,0xc
c001e191:	e8 66 10 00 00       	call   c001f1fc <x87Init>
c001e196:	b8 00 00 00 00       	mov    eax,0x0
c001e19b:	83 c4 0c             	add    esp,0xc
c001e19e:	c3                   	ret    
c001e19f:	90                   	nop

c001e1a0 <MMX::close(int, int, void*)>:
c001e1a0:	83 ec 0c             	sub    esp,0xc
c001e1a3:	e8 6e 10 00 00       	call   c001f216 <x87Close>
c001e1a8:	b8 00 00 00 00       	mov    eax,0x0
c001e1ad:	83 c4 0c             	add    esp,0xc
c001e1b0:	c3                   	ret    
c001e1b1:	90                   	nop

c001e1b2 <MMX::save(void*)>:
c001e1b2:	83 ec 0c             	sub    esp,0xc
c001e1b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1b9:	83 ec 0c             	sub    esp,0xc
c001e1bc:	50                   	push   eax
c001e1bd:	e8 2f 10 00 00       	call   c001f1f1 <x87Save>
c001e1c2:	83 c4 10             	add    esp,0x10
c001e1c5:	90                   	nop
c001e1c6:	83 c4 0c             	add    esp,0xc
c001e1c9:	c3                   	ret    

c001e1ca <MMX::load(void*)>:
c001e1ca:	83 ec 0c             	sub    esp,0xc
c001e1cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1d1:	83 ec 0c             	sub    esp,0xc
c001e1d4:	50                   	push   eax
c001e1d5:	e8 1d 10 00 00       	call   c001f1f7 <x87Load>
c001e1da:	83 c4 10             	add    esp,0x10
c001e1dd:	90                   	nop
c001e1de:	83 c4 0c             	add    esp,0xc
c001e1e1:	c3                   	ret    

c001e1e2 <MMX::MMX()>:
c001e1e2:	83 ec 0c             	sub    esp,0xc
c001e1e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1e9:	83 ec 08             	sub    esp,0x8
c001e1ec:	68 b8 38 02 c0       	push   0xc00238b8
c001e1f1:	50                   	push   eax
c001e1f2:	e8 17 29 ff ff       	call   c0010b0e <FPU::FPU(char const*)>
c001e1f7:	83 c4 10             	add    esp,0x10
c001e1fa:	ba c8 38 02 c0       	mov    edx,0xc00238c8
c001e1ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e203:	89 10                	mov    DWORD PTR [eax],edx
c001e205:	90                   	nop
c001e206:	83 c4 0c             	add    esp,0xc
c001e209:	c3                   	ret    

c001e20a <SSE::open(int, int, void*)>:
c001e20a:	83 ec 0c             	sub    esp,0xc
c001e20d:	e8 a5 0f 00 00       	call   c001f1b7 <sseInit>
c001e212:	b8 00 00 00 00       	mov    eax,0x0
c001e217:	83 c4 0c             	add    esp,0xc
c001e21a:	c3                   	ret    
c001e21b:	90                   	nop

c001e21c <SSE::close(int, int, void*)>:
c001e21c:	83 ec 0c             	sub    esp,0xc
c001e21f:	e8 a3 0f 00 00       	call   c001f1c7 <sseClose>
c001e224:	b8 00 00 00 00       	mov    eax,0x0
c001e229:	83 c4 0c             	add    esp,0xc
c001e22c:	c3                   	ret    
c001e22d:	90                   	nop

c001e22e <SSE::available()>:
c001e22e:	83 ec 1c             	sub    esp,0x1c
c001e231:	e8 5a 0f 00 00       	call   c001f190 <sseDetect>
c001e236:	85 c0                	test   eax,eax
c001e238:	0f 95 c0             	setne  al
c001e23b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e23f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e243:	83 c4 1c             	add    esp,0x1c
c001e246:	c3                   	ret    
c001e247:	90                   	nop

c001e248 <SSE::save(void*)>:
c001e248:	83 ec 0c             	sub    esp,0xc
c001e24b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e24f:	83 ec 0c             	sub    esp,0xc
c001e252:	50                   	push   eax
c001e253:	e8 53 0f 00 00       	call   c001f1ab <sseSave>
c001e258:	83 c4 10             	add    esp,0x10
c001e25b:	90                   	nop
c001e25c:	83 c4 0c             	add    esp,0xc
c001e25f:	c3                   	ret    

c001e260 <SSE::load(void*)>:
c001e260:	83 ec 0c             	sub    esp,0xc
c001e263:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e267:	83 ec 0c             	sub    esp,0xc
c001e26a:	50                   	push   eax
c001e26b:	e8 41 0f 00 00       	call   c001f1b1 <sseLoad>
c001e270:	83 c4 10             	add    esp,0x10
c001e273:	90                   	nop
c001e274:	83 c4 0c             	add    esp,0xc
c001e277:	c3                   	ret    

c001e278 <SSE::SSE()>:
c001e278:	83 ec 0c             	sub    esp,0xc
c001e27b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e27f:	83 ec 08             	sub    esp,0x8
c001e282:	68 f8 38 02 c0       	push   0xc00238f8
c001e287:	50                   	push   eax
c001e288:	e8 81 28 ff ff       	call   c0010b0e <FPU::FPU(char const*)>
c001e28d:	83 c4 10             	add    esp,0x10
c001e290:	ba 08 39 02 c0       	mov    edx,0xc0023908
c001e295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e299:	89 10                	mov    DWORD PTR [eax],edx
c001e29b:	90                   	nop
c001e29c:	83 c4 0c             	add    esp,0xc
c001e29f:	c3                   	ret    

c001e2a0 <x87::open(int, int, void*)>:
c001e2a0:	83 ec 0c             	sub    esp,0xc
c001e2a3:	e8 54 0f 00 00       	call   c001f1fc <x87Init>
c001e2a8:	b8 00 00 00 00       	mov    eax,0x0
c001e2ad:	83 c4 0c             	add    esp,0xc
c001e2b0:	c3                   	ret    
c001e2b1:	90                   	nop

c001e2b2 <x87::close(int, int, void*)>:
c001e2b2:	83 ec 0c             	sub    esp,0xc
c001e2b5:	e8 5c 0f 00 00       	call   c001f216 <x87Close>
c001e2ba:	b8 00 00 00 00       	mov    eax,0x0
c001e2bf:	83 c4 0c             	add    esp,0xc
c001e2c2:	c3                   	ret    
c001e2c3:	90                   	nop

c001e2c4 <x87::available()>:
c001e2c4:	83 ec 0c             	sub    esp,0xc
c001e2c7:	e8 0a 0f 00 00       	call   c001f1d6 <x87Detect>
c001e2cc:	85 c0                	test   eax,eax
c001e2ce:	0f 95 c0             	setne  al
c001e2d1:	83 c4 0c             	add    esp,0xc
c001e2d4:	c3                   	ret    
c001e2d5:	90                   	nop

c001e2d6 <x87::save(void*)>:
c001e2d6:	83 ec 0c             	sub    esp,0xc
c001e2d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2dd:	83 ec 0c             	sub    esp,0xc
c001e2e0:	50                   	push   eax
c001e2e1:	e8 0b 0f 00 00       	call   c001f1f1 <x87Save>
c001e2e6:	83 c4 10             	add    esp,0x10
c001e2e9:	90                   	nop
c001e2ea:	83 c4 0c             	add    esp,0xc
c001e2ed:	c3                   	ret    

c001e2ee <x87::load(void*)>:
c001e2ee:	83 ec 0c             	sub    esp,0xc
c001e2f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2f5:	83 ec 0c             	sub    esp,0xc
c001e2f8:	50                   	push   eax
c001e2f9:	e8 f9 0e 00 00       	call   c001f1f7 <x87Load>
c001e2fe:	83 c4 10             	add    esp,0x10
c001e301:	90                   	nop
c001e302:	83 c4 0c             	add    esp,0xc
c001e305:	c3                   	ret    

c001e306 <x87::x87()>:
c001e306:	83 ec 0c             	sub    esp,0xc
c001e309:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e30d:	83 ec 08             	sub    esp,0x8
c001e310:	68 38 39 02 c0       	push   0xc0023938
c001e315:	50                   	push   eax
c001e316:	e8 f3 27 ff ff       	call   c0010b0e <FPU::FPU(char const*)>
c001e31b:	83 c4 10             	add    esp,0x10
c001e31e:	ba 48 39 02 c0       	mov    edx,0xc0023948
c001e323:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e327:	89 10                	mov    DWORD PTR [eax],edx
c001e329:	90                   	nop
c001e32a:	83 c4 0c             	add    esp,0xc
c001e32d:	c3                   	ret    

c001e32e <APIC::disable()>:
c001e32e:	90                   	nop
c001e32f:	c3                   	ret    

c001e330 <APIC::close(int, int, void*)>:
c001e330:	55                   	push   ebp
c001e331:	89 e5                	mov    ebp,esp
c001e333:	83 ec 08             	sub    esp,0x8
c001e336:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e339:	8b 00                	mov    eax,DWORD PTR [eax]
c001e33b:	83 c0 3c             	add    eax,0x3c
c001e33e:	8b 00                	mov    eax,DWORD PTR [eax]
c001e340:	83 ec 0c             	sub    esp,0xc
c001e343:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e346:	ff d0                	call   eax
c001e348:	83 c4 10             	add    esp,0x10
c001e34b:	b8 00 00 00 00       	mov    eax,0x0
c001e350:	c9                   	leave  
c001e351:	c3                   	ret    

c001e352 <IOAPIC::close(int, int, void*)>:
c001e352:	b8 00 00 00 00       	mov    eax,0x0
c001e357:	c3                   	ret    

c001e358 <APIC::io_wait()>:
c001e358:	eb 00                	jmp    c001e35a <APIC::io_wait()+0x2>
c001e35a:	eb 00                	jmp    c001e35c <APIC::io_wait()+0x4>
c001e35c:	90                   	nop
c001e35d:	c3                   	ret    

c001e35e <APIC::getBase()>:
c001e35e:	55                   	push   ebp
c001e35f:	89 e5                	mov    ebp,esp
c001e361:	83 ec 18             	sub    esp,0x18
c001e364:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001e369:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e36f:	83 e0 08             	and    eax,0x8
c001e372:	84 c0                	test   al,al
c001e374:	75 07                	jne    c001e37d <APIC::getBase()+0x1f>
c001e376:	b8 00 00 00 00       	mov    eax,0x0
c001e37b:	eb 21                	jmp    c001e39e <APIC::getBase()+0x40>
c001e37d:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001e382:	83 ec 08             	sub    esp,0x8
c001e385:	6a 1b                	push   0x1b
c001e387:	50                   	push   eax
c001e388:	e8 f3 d1 fe ff       	call   c000b580 <Computer::rdmsr(unsigned int)>
c001e38d:	83 c4 10             	add    esp,0x10
c001e390:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e393:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e396:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e399:	25 00 f0 ff ff       	and    eax,0xfffff000
c001e39e:	c9                   	leave  
c001e39f:	c3                   	ret    

c001e3a0 <APIC::eoi(unsigned char)>:
c001e3a0:	55                   	push   ebp
c001e3a1:	89 e5                	mov    ebp,esp
c001e3a3:	83 ec 28             	sub    esp,0x28
c001e3a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e3a9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e3ac:	83 ec 0c             	sub    esp,0xc
c001e3af:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e3b2:	e8 a7 ff ff ff       	call   c001e35e <APIC::getBase()>
c001e3b7:	83 c4 10             	add    esp,0x10
c001e3ba:	05 b0 00 00 00       	add    eax,0xb0
c001e3bf:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e3c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001e3c5:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001e3cb:	90                   	nop
c001e3cc:	c9                   	leave  
c001e3cd:	c3                   	ret    

c001e3ce <APIC::open(int, int, void*)>:
c001e3ce:	55                   	push   ebp
c001e3cf:	89 e5                	mov    ebp,esp
c001e3d1:	57                   	push   edi
c001e3d2:	56                   	push   esi
c001e3d3:	53                   	push   ebx
c001e3d4:	83 ec 1c             	sub    esp,0x1c
c001e3d7:	83 ec 0c             	sub    esp,0xc
c001e3da:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e3dd:	e8 7c ff ff ff       	call   c001e35e <APIC::getBase()>
c001e3e2:	83 c4 10             	add    esp,0x10
c001e3e5:	05 f0 00 00 00       	add    eax,0xf0
c001e3ea:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e3ed:	83 ec 0c             	sub    esp,0xc
c001e3f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e3f3:	e8 66 ff ff ff       	call   c001e35e <APIC::getBase()>
c001e3f8:	83 c4 10             	add    esp,0x10
c001e3fb:	89 c2                	mov    edx,eax
c001e3fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e400:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e406:	89 c7                	mov    edi,eax
c001e408:	81 e7 ff 00 00 00    	and    edi,0xff
c001e40e:	89 d0                	mov    eax,edx
c001e410:	ba 00 00 00 00       	mov    edx,0x0
c001e415:	89 c1                	mov    ecx,eax
c001e417:	80 e5 ff             	and    ch,0xff
c001e41a:	89 cb                	mov    ebx,ecx
c001e41c:	89 d0                	mov    eax,edx
c001e41e:	25 ff 00 00 00       	and    eax,0xff
c001e423:	89 c6                	mov    esi,eax
c001e425:	89 d8                	mov    eax,ebx
c001e427:	89 f2                	mov    edx,esi
c001e429:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e42c:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e42f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e433:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e437:	83 e0 00             	and    eax,0x0
c001e43a:	09 d0                	or     eax,edx
c001e43c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e440:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e443:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e449:	8d 50 01             	lea    edx,[eax+0x1]
c001e44c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e44f:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e455:	31 d2                	xor    edx,edx
c001e457:	88 c2                	mov    dl,al
c001e459:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e45c:	83 c2 08             	add    edx,0x8
c001e45f:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e463:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e469:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e46f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e473:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e476:	8b 00                	mov    eax,DWORD PTR [eax]
c001e478:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e47b:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001e482:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e485:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001e488:	89 10                	mov    DWORD PTR [eax],edx
c001e48a:	b8 00 00 00 00       	mov    eax,0x0
c001e48f:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e492:	5b                   	pop    ebx
c001e493:	5e                   	pop    esi
c001e494:	5f                   	pop    edi
c001e495:	5d                   	pop    ebp
c001e496:	c3                   	ret    
c001e497:	90                   	nop

c001e498 <IOAPIC::IOAPIC()>:
c001e498:	83 ec 0c             	sub    esp,0xc
c001e49b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e49f:	83 ec 08             	sub    esp,0x8
c001e4a2:	68 78 39 02 c0       	push   0xc0023978
c001e4a7:	50                   	push   eax
c001e4a8:	e8 6d 23 ff ff       	call   c001081a <Device::Device(char const*)>
c001e4ad:	83 c4 10             	add    esp,0x10
c001e4b0:	ba a0 3a 02 c0       	mov    edx,0xc0023aa0
c001e4b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4b9:	89 10                	mov    DWORD PTR [eax],edx
c001e4bb:	90                   	nop
c001e4bc:	83 c4 0c             	add    esp,0xc
c001e4bf:	c3                   	ret    

c001e4c0 <APIC::APIC()>:
c001e4c0:	53                   	push   ebx
c001e4c1:	83 ec 18             	sub    esp,0x18
c001e4c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4c8:	83 ec 08             	sub    esp,0x8
c001e4cb:	68 80 39 02 c0       	push   0xc0023980
c001e4d0:	50                   	push   eax
c001e4d1:	e8 92 2a ff ff       	call   c0010f68 <InterruptController::InterruptController(char const*)>
c001e4d6:	83 c4 10             	add    esp,0x10
c001e4d9:	ba 58 3a 02 c0       	mov    edx,0xc0023a58
c001e4de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4e2:	89 10                	mov    DWORD PTR [eax],edx
c001e4e4:	a0 a0 65 02 c0       	mov    al,ds:0xc00265a0
c001e4e9:	83 f0 01             	xor    eax,0x1
c001e4ec:	84 c0                	test   al,al
c001e4ee:	0f 84 a2 00 00 00    	je     c001e596 <APIC::APIC()+0xd6>
c001e4f4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e4f9:	a0 50 50 02 c0       	mov    al,ds:0xc0025050
c001e4fe:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001e502:	0f 83 87 00 00 00    	jae    c001e58f <APIC::APIC()+0xcf>
c001e508:	83 ec 0c             	sub    esp,0xc
c001e50b:	68 68 01 00 00       	push   0x168
c001e510:	e8 cb 0b ff ff       	call   c000f0e0 <operator new(unsigned long)>
c001e515:	83 c4 10             	add    esp,0x10
c001e518:	89 c3                	mov    ebx,eax
c001e51a:	83 ec 0c             	sub    esp,0xc
c001e51d:	53                   	push   ebx
c001e51e:	e8 75 ff ff ff       	call   c001e498 <IOAPIC::IOAPIC()>
c001e523:	83 c4 10             	add    esp,0x10
c001e526:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001e52a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e52e:	25 ff 00 00 00       	and    eax,0xff
c001e533:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e537:	89 14 85 80 65 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9a80],edx
c001e53e:	a1 60 65 02 c0       	mov    eax,ds:0xc0026560
c001e543:	40                   	inc    eax
c001e544:	a3 60 65 02 c0       	mov    ds:0xc0026560,eax
c001e549:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001e54e:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e554:	83 ec 08             	sub    esp,0x8
c001e557:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e55b:	50                   	push   eax
c001e55c:	e8 c9 20 ff ff       	call   c001062a <Device::addChild(Device*)>
c001e561:	83 c4 10             	add    esp,0x10
c001e564:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e568:	8b 00                	mov    eax,DWORD PTR [eax]
c001e56a:	83 c0 08             	add    eax,0x8
c001e56d:	8b 10                	mov    edx,DWORD PTR [eax]
c001e56f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e573:	25 ff 00 00 00       	and    eax,0xff
c001e578:	6a 00                	push   0x0
c001e57a:	6a 00                	push   0x0
c001e57c:	50                   	push   eax
c001e57d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e581:	ff d2                	call   edx
c001e583:	83 c4 10             	add    esp,0x10
c001e586:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001e58a:	e9 6a ff ff ff       	jmp    c001e4f9 <APIC::APIC()+0x39>
c001e58f:	c6 05 a0 65 02 c0 01 	mov    BYTE PTR ds:0xc00265a0,0x1
c001e596:	90                   	nop
c001e597:	83 c4 18             	add    esp,0x18
c001e59a:	5b                   	pop    ebx
c001e59b:	c3                   	ret    

c001e59c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e59c:	55                   	push   ebp
c001e59d:	89 e5                	mov    ebp,esp
c001e59f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5a2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e5a8:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e5ab:	72 1d                	jb     c001e5ca <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e5ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5b0:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e5b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5b9:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e5bf:	01 d0                	add    eax,edx
c001e5c1:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e5c4:	73 04                	jae    c001e5ca <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e5c6:	b0 01                	mov    al,0x1
c001e5c8:	eb 02                	jmp    c001e5cc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e5ca:	b0 00                	mov    al,0x0
c001e5cc:	5d                   	pop    ebp
c001e5cd:	c3                   	ret    

c001e5ce <IOAPIC::read(int)>:
c001e5ce:	55                   	push   ebp
c001e5cf:	89 e5                	mov    ebp,esp
c001e5d1:	83 ec 10             	sub    esp,0x10
c001e5d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5d7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e5dd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e5e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e5e3:	31 d2                	xor    edx,edx
c001e5e5:	88 c2                	mov    dl,al
c001e5e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5ea:	89 10                	mov    DWORD PTR [eax],edx
c001e5ec:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5ef:	83 c0 10             	add    eax,0x10
c001e5f2:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5f4:	c9                   	leave  
c001e5f5:	c3                   	ret    

c001e5f6 <IOAPIC::open(int, int, void*)>:
c001e5f6:	55                   	push   ebp
c001e5f7:	89 e5                	mov    ebp,esp
c001e5f9:	57                   	push   edi
c001e5fa:	56                   	push   esi
c001e5fb:	53                   	push   ebx
c001e5fc:	83 ec 0c             	sub    esp,0xc
c001e5ff:	83 ec 0c             	sub    esp,0xc
c001e602:	68 ab 39 02 c0       	push   0xc00239ab
c001e607:	e8 09 0c ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001e60c:	83 c4 10             	add    esp,0x10
c001e60f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e612:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e615:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e61b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e61e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e624:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c001e62b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e62e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e634:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e637:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e63d:	8b 14 85 00 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf00]
c001e644:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e647:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e64d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e650:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e656:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e659:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e65f:	89 c7                	mov    edi,eax
c001e661:	81 e7 ff 00 00 00    	and    edi,0xff
c001e667:	89 d0                	mov    eax,edx
c001e669:	ba 00 00 00 00       	mov    edx,0x0
c001e66e:	89 c1                	mov    ecx,eax
c001e670:	80 e5 ff             	and    ch,0xff
c001e673:	89 cb                	mov    ebx,ecx
c001e675:	89 d0                	mov    eax,edx
c001e677:	25 ff 00 00 00       	and    eax,0xff
c001e67c:	89 c6                	mov    esi,eax
c001e67e:	89 d8                	mov    eax,ebx
c001e680:	89 f2                	mov    edx,esi
c001e682:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e685:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e688:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e68c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e690:	83 e0 00             	and    eax,0x0
c001e693:	09 d0                	or     eax,edx
c001e695:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e699:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e69c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e6a2:	8d 50 01             	lea    edx,[eax+0x1]
c001e6a5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e6a8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e6ae:	31 d2                	xor    edx,edx
c001e6b0:	88 c2                	mov    dl,al
c001e6b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6b5:	83 c2 08             	add    edx,0x8
c001e6b8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e6bc:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e6c2:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e6c8:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e6cc:	83 ec 08             	sub    esp,0x8
c001e6cf:	6a 01                	push   0x1
c001e6d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e6d4:	e8 f5 fe ff ff       	call   c001e5ce <IOAPIC::read(int)>
c001e6d9:	83 c4 10             	add    esp,0x10
c001e6dc:	c1 f8 10             	sar    eax,0x10
c001e6df:	25 ff 00 00 00       	and    eax,0xff
c001e6e4:	8d 50 01             	lea    edx,[eax+0x1]
c001e6e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6ea:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e6f0:	b8 00 00 00 00       	mov    eax,0x0
c001e6f5:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e6f8:	5b                   	pop    ebx
c001e6f9:	5e                   	pop    esi
c001e6fa:	5f                   	pop    edi
c001e6fb:	5d                   	pop    ebp
c001e6fc:	c3                   	ret    
c001e6fd:	90                   	nop

c001e6fe <IOAPIC::write(int, int)>:
c001e6fe:	55                   	push   ebp
c001e6ff:	89 e5                	mov    ebp,esp
c001e701:	83 ec 10             	sub    esp,0x10
c001e704:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e707:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e70d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e710:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e713:	31 d2                	xor    edx,edx
c001e715:	88 c2                	mov    dl,al
c001e717:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e71a:	89 10                	mov    DWORD PTR [eax],edx
c001e71c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e71f:	8d 50 10             	lea    edx,[eax+0x10]
c001e722:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e725:	89 02                	mov    DWORD PTR [edx],eax
c001e727:	90                   	nop
c001e728:	c9                   	leave  
c001e729:	c3                   	ret    

c001e72a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001e72a:	55                   	push   ebp
c001e72b:	89 e5                	mov    ebp,esp
c001e72d:	83 ec 20             	sub    esp,0x20
c001e730:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e733:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e736:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001e739:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e73c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e73f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e742:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e745:	88 d0                	mov    al,dl
c001e747:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001e74a:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e74d:	25 ff 00 00 00       	and    eax,0xff
c001e752:	83 c0 08             	add    eax,0x8
c001e755:	01 c0                	add    eax,eax
c001e757:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e75a:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e75d:	25 ff 00 00 00       	and    eax,0xff
c001e762:	83 c0 08             	add    eax,0x8
c001e765:	01 c0                	add    eax,eax
c001e767:	40                   	inc    eax
c001e768:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001e76b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e76e:	50                   	push   eax
c001e76f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e772:	e8 57 fe ff ff       	call   c001e5ce <IOAPIC::read(int)>
c001e777:	83 c4 08             	add    esp,0x8
c001e77a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e77d:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001e784:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001e787:	c1 e0 18             	shl    eax,0x18
c001e78a:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e78d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e790:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e793:	52                   	push   edx
c001e794:	50                   	push   eax
c001e795:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e798:	e8 61 ff ff ff       	call   c001e6fe <IOAPIC::write(int, int)>
c001e79d:	83 c4 0c             	add    esp,0xc
c001e7a0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e7a3:	50                   	push   eax
c001e7a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7a7:	e8 22 fe ff ff       	call   c001e5ce <IOAPIC::read(int)>
c001e7ac:	83 c4 08             	add    esp,0x8
c001e7af:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e7b2:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001e7b9:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001e7c0:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001e7c7:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001e7ce:	8a 45 e8             	mov    al,BYTE PTR [ebp-0x18]
c001e7d1:	25 ff 00 00 00       	and    eax,0xff
c001e7d6:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001e7d9:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001e7dc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e7df:	52                   	push   edx
c001e7e0:	50                   	push   eax
c001e7e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7e4:	e8 15 ff ff ff       	call   c001e6fe <IOAPIC::write(int, int)>
c001e7e9:	83 c4 0c             	add    esp,0xc
c001e7ec:	90                   	nop
c001e7ed:	c9                   	leave  
c001e7ee:	c3                   	ret    
c001e7ef:	90                   	nop

c001e7f0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001e7f0:	55                   	push   ebp
c001e7f1:	89 e5                	mov    ebp,esp
c001e7f3:	56                   	push   esi
c001e7f4:	53                   	push   ebx
c001e7f5:	83 ec 20             	sub    esp,0x20
c001e7f8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e7fb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e7fe:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001e802:	74 2a                	je     c001e82e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e804:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001e808:	7f 14                	jg     c001e81e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2e>
c001e80a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e80d:	05 00 3f 02 c0       	add    eax,0xc0023f00
c001e812:	8a 00                	mov    al,BYTE PTR [eax]
c001e814:	25 ff 00 00 00       	and    eax,0xff
c001e819:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001e81c:	eb 10                	jmp    c001e82e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e81e:	83 ec 0c             	sub    esp,0xc
c001e821:	68 bc 39 02 c0       	push   0xc00239bc
c001e826:	e8 19 72 ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c001e82b:	83 c4 10             	add    esp,0x10
c001e82e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e832:	a1 60 65 02 c0       	mov    eax,ds:0xc0026560
c001e837:	83 ec 08             	sub    esp,0x8
c001e83a:	50                   	push   eax
c001e83b:	68 f4 39 02 c0       	push   0xc00239f4
c001e840:	e8 d0 09 ff ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001e845:	83 c4 10             	add    esp,0x10
c001e848:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e84f:	a1 60 65 02 c0       	mov    eax,ds:0xc0026560
c001e854:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e857:	7d 64                	jge    c001e8bd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e859:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e85c:	8b 04 85 80 65 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9a80]
c001e863:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e866:	83 ec 08             	sub    esp,0x8
c001e869:	52                   	push   edx
c001e86a:	50                   	push   eax
c001e86b:	e8 2c fd ff ff       	call   c001e59c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001e870:	83 c4 10             	add    esp,0x10
c001e873:	84 c0                	test   al,al
c001e875:	74 41                	je     c001e8b8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xc8>
c001e877:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e87a:	8b 1c 85 80 65 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd9a80]
c001e881:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e884:	83 c0 20             	add    eax,0x20
c001e887:	89 c6                	mov    esi,eax
c001e889:	81 e6 ff 00 00 00    	and    esi,0xff
c001e88f:	e8 41 60 ff ff       	call   c00148d5 <getCPUNumber()>
c001e894:	89 c2                	mov    edx,eax
c001e896:	c1 fa 1f             	sar    edx,0x1f
c001e899:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001e89c:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e8a2:	83 ec 0c             	sub    esp,0xc
c001e8a5:	56                   	push   esi
c001e8a6:	52                   	push   edx
c001e8a7:	50                   	push   eax
c001e8a8:	51                   	push   ecx
c001e8a9:	53                   	push   ebx
c001e8aa:	e8 7b fe ff ff       	call   c001e72a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001e8af:	83 c4 20             	add    esp,0x20
c001e8b2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001e8b6:	eb 05                	jmp    c001e8bd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e8b8:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001e8bb:	eb 92                	jmp    c001e84f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c001e8bd:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e8c0:	83 f0 01             	xor    eax,0x1
c001e8c3:	84 c0                	test   al,al
c001e8c5:	74 10                	je     c001e8d7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe7>
c001e8c7:	83 ec 0c             	sub    esp,0xc
c001e8ca:	68 0b 3a 02 c0       	push   0xc0023a0b
c001e8cf:	e8 70 71 ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c001e8d4:	83 c4 10             	add    esp,0x10
c001e8d7:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001e8db:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e8e2:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001e8e6:	7f 65                	jg     c001e94d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x15d>
c001e8e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e8eb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e8ee:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e8f5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e8f8:	01 ca                	add    edx,ecx
c001e8fa:	83 c2 54             	add    edx,0x54
c001e8fd:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001e901:	85 c0                	test   eax,eax
c001e903:	75 43                	jne    c001e948 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x158>
c001e905:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e908:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e90b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e912:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e915:	01 ca                	add    edx,ecx
c001e917:	8d 4a 54             	lea    ecx,[edx+0x54]
c001e91a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001e91d:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e921:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e924:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e927:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e92e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e931:	01 ca                	add    edx,ecx
c001e933:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001e939:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e93c:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e940:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e943:	83 e8 20             	sub    eax,0x20
c001e946:	eb 1a                	jmp    c001e962 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x172>
c001e948:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001e94b:	eb 95                	jmp    c001e8e2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf2>
c001e94d:	83 ec 0c             	sub    esp,0xc
c001e950:	68 18 3a 02 c0       	push   0xc0023a18
c001e955:	e8 ea 70 ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c001e95a:	83 c4 10             	add    esp,0x10
c001e95d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001e962:	8d 65 f8             	lea    esp,[ebp-0x8]
c001e965:	5b                   	pop    ebx
c001e966:	5e                   	pop    esi
c001e967:	5d                   	pop    ebp
c001e968:	c3                   	ret    
c001e969:	90                   	nop

c001e96a <PIC::disable()>:
c001e96a:	55                   	push   ebp
c001e96b:	89 e5                	mov    ebp,esp
c001e96d:	83 ec 10             	sub    esp,0x10
c001e970:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001e976:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001e97a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e97d:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001e981:	ee                   	out    dx,al
c001e982:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001e988:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001e98c:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e98f:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001e993:	ee                   	out    dx,al
c001e994:	90                   	nop
c001e995:	c9                   	leave  
c001e996:	c3                   	ret    
c001e997:	90                   	nop

c001e998 <PIC::close(int, int, void*)>:
c001e998:	55                   	push   ebp
c001e999:	89 e5                	mov    ebp,esp
c001e99b:	83 ec 08             	sub    esp,0x8
c001e99e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e9a1:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9a3:	83 c0 3c             	add    eax,0x3c
c001e9a6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9a8:	83 ec 0c             	sub    esp,0xc
c001e9ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e9ae:	ff d0                	call   eax
c001e9b0:	83 c4 10             	add    esp,0x10
c001e9b3:	b8 00 00 00 00       	mov    eax,0x0
c001e9b8:	c9                   	leave  
c001e9b9:	c3                   	ret    

c001e9ba <PIC::PIC()>:
c001e9ba:	83 ec 0c             	sub    esp,0xc
c001e9bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c1:	83 ec 08             	sub    esp,0x8
c001e9c4:	68 c4 3a 02 c0       	push   0xc0023ac4
c001e9c9:	50                   	push   eax
c001e9ca:	e8 99 25 ff ff       	call   c0010f68 <InterruptController::InterruptController(char const*)>
c001e9cf:	83 c4 10             	add    esp,0x10
c001e9d2:	ba f0 3a 02 c0       	mov    edx,0xc0023af0
c001e9d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9db:	89 10                	mov    DWORD PTR [eax],edx
c001e9dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9e1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9e7:	31 d2                	xor    edx,edx
c001e9e9:	88 c2                	mov    dl,al
c001e9eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ef:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001e9f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9fa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea00:	31 d2                	xor    edx,edx
c001ea02:	88 c2                	mov    dl,al
c001ea04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea08:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001ea0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea11:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea17:	8d 50 01             	lea    edx,[eax+0x1]
c001ea1a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ea1e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ea24:	31 d2                	xor    edx,edx
c001ea26:	88 c2                	mov    dl,al
c001ea28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea2c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ea30:	83 e1 3f             	and    ecx,0x3f
c001ea33:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ea37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea3b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea41:	31 d2                	xor    edx,edx
c001ea43:	88 c2                	mov    dl,al
c001ea45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea49:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001ea50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea5a:	31 d2                	xor    edx,edx
c001ea5c:	88 c2                	mov    dl,al
c001ea5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea62:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001ea67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea6b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea71:	8d 50 01             	lea    edx,[eax+0x1]
c001ea74:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ea78:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ea7e:	31 d2                	xor    edx,edx
c001ea80:	88 c2                	mov    dl,al
c001ea82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea86:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ea8a:	83 e1 3f             	and    ecx,0x3f
c001ea8d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ea91:	90                   	nop
c001ea92:	83 c4 0c             	add    esp,0xc
c001ea95:	c3                   	ret    

c001ea96 <PIC::ioWait()>:
c001ea96:	eb 00                	jmp    c001ea98 <PIC::ioWait()+0x2>
c001ea98:	eb 00                	jmp    c001ea9a <PIC::ioWait()+0x4>
c001ea9a:	90                   	nop
c001ea9b:	c3                   	ret    

c001ea9c <PIC::getIRQReg(int)>:
c001ea9c:	55                   	push   ebp
c001ea9d:	89 e5                	mov    ebp,esp
c001ea9f:	83 ec 10             	sub    esp,0x10
c001eaa2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eaa5:	25 ff 00 00 00       	and    eax,0xff
c001eaaa:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001eab0:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001eab3:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001eab6:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001eaba:	ee                   	out    dx,al
c001eabb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eabe:	25 ff 00 00 00       	and    eax,0xff
c001eac3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001eac9:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001eacc:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001eacf:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001ead3:	ee                   	out    dx,al
c001ead4:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001eada:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001eade:	89 c2                	mov    edx,eax
c001eae0:	ec                   	in     al,dx
c001eae1:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001eae4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001eae7:	25 ff 00 00 00       	and    eax,0xff
c001eaec:	c1 e0 08             	shl    eax,0x8
c001eaef:	89 c1                	mov    ecx,eax
c001eaf1:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001eaf7:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001eafb:	89 c2                	mov    edx,eax
c001eafd:	ec                   	in     al,dx
c001eafe:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001eb01:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001eb04:	25 ff 00 00 00       	and    eax,0xff
c001eb09:	09 c8                	or     eax,ecx
c001eb0b:	c9                   	leave  
c001eb0c:	c3                   	ret    
c001eb0d:	90                   	nop

c001eb0e <PIC::eoi(unsigned char)>:
c001eb0e:	55                   	push   ebp
c001eb0f:	89 e5                	mov    ebp,esp
c001eb11:	83 ec 14             	sub    esp,0x14
c001eb14:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eb17:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001eb1a:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001eb1e:	75 23                	jne    c001eb43 <PIC::eoi(unsigned char)+0x35>
c001eb20:	6a 0b                	push   0xb
c001eb22:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb25:	e8 72 ff ff ff       	call   c001ea9c <PIC::getIRQReg(int)>
c001eb2a:	83 c4 08             	add    esp,0x8
c001eb2d:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001eb31:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001eb35:	25 ff ff 00 00       	and    eax,0xffff
c001eb3a:	25 80 00 00 00       	and    eax,0x80
c001eb3f:	85 c0                	test   eax,eax
c001eb41:	74 5f                	je     c001eba2 <PIC::eoi(unsigned char)+0x94>
c001eb43:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001eb47:	75 2d                	jne    c001eb76 <PIC::eoi(unsigned char)+0x68>
c001eb49:	6a 0b                	push   0xb
c001eb4b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb4e:	e8 49 ff ff ff       	call   c001ea9c <PIC::getIRQReg(int)>
c001eb53:	83 c4 08             	add    esp,0x8
c001eb56:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001eb5a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eb5d:	66 85 c0             	test   ax,ax
c001eb60:	78 14                	js     c001eb76 <PIC::eoi(unsigned char)+0x68>
c001eb62:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001eb68:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001eb6c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001eb6f:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001eb73:	ee                   	out    dx,al
c001eb74:	eb 2d                	jmp    c001eba3 <PIC::eoi(unsigned char)+0x95>
c001eb76:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001eb7a:	76 12                	jbe    c001eb8e <PIC::eoi(unsigned char)+0x80>
c001eb7c:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001eb82:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001eb86:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001eb89:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001eb8d:	ee                   	out    dx,al
c001eb8e:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001eb94:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001eb98:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001eb9b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001eb9f:	ee                   	out    dx,al
c001eba0:	eb 01                	jmp    c001eba3 <PIC::eoi(unsigned char)+0x95>
c001eba2:	90                   	nop
c001eba3:	c9                   	leave  
c001eba4:	c3                   	ret    
c001eba5:	90                   	nop

c001eba6 <PIC::remap()>:
c001eba6:	55                   	push   ebp
c001eba7:	89 e5                	mov    ebp,esp
c001eba9:	83 ec 48             	sub    esp,0x48
c001ebac:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001ebb3:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001ebba:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001ebc0:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001ebc3:	89 c2                	mov    edx,eax
c001ebc5:	ec                   	in     al,dx
c001ebc6:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001ebc9:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001ebcc:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001ebcf:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001ebd5:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001ebd8:	89 c2                	mov    edx,eax
c001ebda:	ec                   	in     al,dx
c001ebdb:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001ebde:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001ebe1:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001ebe4:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001ebea:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001ebee:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001ebf1:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001ebf4:	ee                   	out    dx,al
c001ebf5:	83 ec 0c             	sub    esp,0xc
c001ebf8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ebfb:	e8 96 fe ff ff       	call   c001ea96 <PIC::ioWait()>
c001ec00:	83 c4 10             	add    esp,0x10
c001ec03:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001ec09:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001ec0d:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001ec10:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001ec13:	ee                   	out    dx,al
c001ec14:	83 ec 0c             	sub    esp,0xc
c001ec17:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec1a:	e8 77 fe ff ff       	call   c001ea96 <PIC::ioWait()>
c001ec1f:	83 c4 10             	add    esp,0x10
c001ec22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001ec25:	25 ff 00 00 00       	and    eax,0xff
c001ec2a:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001ec30:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001ec33:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001ec36:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001ec39:	ee                   	out    dx,al
c001ec3a:	83 ec 0c             	sub    esp,0xc
c001ec3d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec40:	e8 51 fe ff ff       	call   c001ea96 <PIC::ioWait()>
c001ec45:	83 c4 10             	add    esp,0x10
c001ec48:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ec4b:	25 ff 00 00 00       	and    eax,0xff
c001ec50:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001ec56:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001ec59:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001ec5c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ec5f:	ee                   	out    dx,al
c001ec60:	83 ec 0c             	sub    esp,0xc
c001ec63:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec66:	e8 2b fe ff ff       	call   c001ea96 <PIC::ioWait()>
c001ec6b:	83 c4 10             	add    esp,0x10
c001ec6e:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001ec74:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001ec78:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001ec7b:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001ec7e:	ee                   	out    dx,al
c001ec7f:	83 ec 0c             	sub    esp,0xc
c001ec82:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec85:	e8 0c fe ff ff       	call   c001ea96 <PIC::ioWait()>
c001ec8a:	83 c4 10             	add    esp,0x10
c001ec8d:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001ec93:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001ec97:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001ec9a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001ec9d:	ee                   	out    dx,al
c001ec9e:	83 ec 0c             	sub    esp,0xc
c001eca1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eca4:	e8 ed fd ff ff       	call   c001ea96 <PIC::ioWait()>
c001eca9:	83 c4 10             	add    esp,0x10
c001ecac:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001ecb2:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001ecb6:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001ecb9:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001ecbc:	ee                   	out    dx,al
c001ecbd:	83 ec 0c             	sub    esp,0xc
c001ecc0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecc3:	e8 ce fd ff ff       	call   c001ea96 <PIC::ioWait()>
c001ecc8:	83 c4 10             	add    esp,0x10
c001eccb:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001ecd1:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001ecd5:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001ecd8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ecdb:	ee                   	out    dx,al
c001ecdc:	83 ec 0c             	sub    esp,0xc
c001ecdf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ece2:	e8 af fd ff ff       	call   c001ea96 <PIC::ioWait()>
c001ece7:	83 c4 10             	add    esp,0x10
c001ecea:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
c001eced:	25 ff 00 00 00       	and    eax,0xff
c001ecf2:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001ecf8:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001ecfb:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001ecfe:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ed01:	ee                   	out    dx,al
c001ed02:	8a 45 ee             	mov    al,BYTE PTR [ebp-0x12]
c001ed05:	25 ff 00 00 00       	and    eax,0xff
c001ed0a:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001ed10:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001ed13:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001ed16:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ed19:	ee                   	out    dx,al
c001ed1a:	90                   	nop
c001ed1b:	c9                   	leave  
c001ed1c:	c3                   	ret    
c001ed1d:	90                   	nop

c001ed1e <PIC::open(int, int, void*)>:
c001ed1e:	55                   	push   ebp
c001ed1f:	89 e5                	mov    ebp,esp
c001ed21:	83 ec 18             	sub    esp,0x18
c001ed24:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001ed2a:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001ed2e:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001ed31:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001ed35:	ee                   	out    dx,al
c001ed36:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001ed3c:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001ed40:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001ed43:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001ed47:	ee                   	out    dx,al
c001ed48:	83 ec 0c             	sub    esp,0xc
c001ed4b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed4e:	e8 53 fe ff ff       	call   c001eba6 <PIC::remap()>
c001ed53:	83 c4 10             	add    esp,0x10
c001ed56:	b8 00 00 00 00       	mov    eax,0x0
c001ed5b:	c9                   	leave  
c001ed5c:	c3                   	ret    
c001ed5d:	90                   	nop

c001ed5e <APICTimer::close(int, int, void*)>:
c001ed5e:	b8 00 00 00 00       	mov    eax,0x0
c001ed63:	c3                   	ret    

c001ed64 <apicTimerHandler(regs*, void*)>:
c001ed64:	83 ec 0c             	sub    esp,0xc
c001ed67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ed6b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed6d:	89 c2                	mov    edx,eax
c001ed6f:	c1 fa 1f             	sar    edx,0x1f
c001ed72:	52                   	push   edx
c001ed73:	50                   	push   eax
c001ed74:	6a 00                	push   0x0
c001ed76:	68 00 ca 9a 3b       	push   0x3b9aca00
c001ed7b:	e8 8c 07 00 00       	call   c001f50c <__udivdi3>
c001ed80:	83 c4 10             	add    esp,0x10
c001ed83:	83 ec 08             	sub    esp,0x8
c001ed86:	52                   	push   edx
c001ed87:	50                   	push   eax
c001ed88:	e8 08 40 ff ff       	call   c0012d95 <timerHandler(unsigned long long)>
c001ed8d:	83 c4 10             	add    esp,0x10
c001ed90:	90                   	nop
c001ed91:	83 c4 0c             	add    esp,0xc
c001ed94:	c3                   	ret    
c001ed95:	90                   	nop

c001ed96 <APICTimer::write(int)>:
c001ed96:	53                   	push   ebx
c001ed97:	83 ec 28             	sub    esp,0x28
c001ed9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ed9e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001eda2:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eda8:	e8 2b 5b ff ff       	call   c00148d8 <thisCPU()>
c001edad:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001edb3:	83 ec 0c             	sub    esp,0xc
c001edb6:	50                   	push   eax
c001edb7:	e8 a2 f5 ff ff       	call   c001e35e <APIC::getBase()>
c001edbc:	83 c4 10             	add    esp,0x10
c001edbf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001edc3:	a1 10 4e 02 c0       	mov    eax,ds:0xc0024e10
c001edc8:	8b 15 14 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024e14
c001edce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001edd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001edd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001edda:	05 e0 03 00 00       	add    eax,0x3e0
c001eddf:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001ede5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ede9:	05 80 03 00 00       	add    eax,0x380
c001edee:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001edf4:	fb                   	sti    
c001edf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edf9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001edfd:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001ee02:	83 d2 00             	adc    edx,0x0
c001ee05:	89 c1                	mov    ecx,eax
c001ee07:	89 d3                	mov    ebx,edx
c001ee09:	a1 10 4e 02 c0       	mov    eax,ds:0xc0024e10
c001ee0e:	8b 15 14 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024e14
c001ee14:	39 c8                	cmp    eax,ecx
c001ee16:	89 d0                	mov    eax,edx
c001ee18:	19 d8                	sbb    eax,ebx
c001ee1a:	73 02                	jae    c001ee1e <APICTimer::write(int)+0x88>
c001ee1c:	eb d7                	jmp    c001edf5 <APICTimer::write(int)+0x5f>
c001ee1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee22:	05 20 03 00 00       	add    eax,0x320
c001ee27:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001ee2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee31:	05 90 03 00 00       	add    eax,0x390
c001ee36:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee38:	f7 d0                	not    eax
c001ee3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee3e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ee42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee46:	ba 00 00 00 00       	mov    edx,0x0
c001ee4b:	f7 f3                	div    ebx
c001ee4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ee51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ee55:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ee5b:	0d 00 00 02 00       	or     eax,0x20000
c001ee60:	89 c2                	mov    edx,eax
c001ee62:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee66:	05 20 03 00 00       	add    eax,0x320
c001ee6b:	89 10                	mov    DWORD PTR [eax],edx
c001ee6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee71:	05 e0 03 00 00       	add    eax,0x3e0
c001ee76:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001ee7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee80:	05 80 03 00 00       	add    eax,0x380
c001ee85:	89 c2                	mov    edx,eax
c001ee87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ee8b:	89 02                	mov    DWORD PTR [edx],eax
c001ee8d:	90                   	nop
c001ee8e:	83 c4 28             	add    esp,0x28
c001ee91:	5b                   	pop    ebx
c001ee92:	c3                   	ret    
c001ee93:	90                   	nop

c001ee94 <APICTimer::open(int, int, void*)>:
c001ee94:	57                   	push   edi
c001ee95:	56                   	push   esi
c001ee96:	53                   	push   ebx
c001ee97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee9b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee9d:	83 c0 24             	add    eax,0x24
c001eea0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eea2:	83 ec 08             	sub    esp,0x8
c001eea5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eea9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eead:	ff d0                	call   eax
c001eeaf:	83 c4 10             	add    esp,0x10
c001eeb2:	e8 21 5a ff ff       	call   c00148d8 <thisCPU()>
c001eeb7:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001eebd:	83 ec 0c             	sub    esp,0xc
c001eec0:	50                   	push   eax
c001eec1:	e8 98 f4 ff ff       	call   c001e35e <APIC::getBase()>
c001eec6:	83 c4 10             	add    esp,0x10
c001eec9:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001eecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001eed9:	89 c7                	mov    edi,eax
c001eedb:	81 e7 ff 00 00 00    	and    edi,0xff
c001eee1:	89 d0                	mov    eax,edx
c001eee3:	ba 00 00 00 00       	mov    edx,0x0
c001eee8:	89 c1                	mov    ecx,eax
c001eeea:	80 e5 ff             	and    ch,0xff
c001eeed:	89 cb                	mov    ebx,ecx
c001eeef:	89 d0                	mov    eax,edx
c001eef1:	25 ff 00 00 00       	and    eax,0xff
c001eef6:	89 c6                	mov    esi,eax
c001eef8:	89 d8                	mov    eax,ebx
c001eefa:	89 f2                	mov    edx,esi
c001eefc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef00:	8d 5f 08             	lea    ebx,[edi+0x8]
c001ef03:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ef07:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ef0b:	83 e0 00             	and    eax,0x0
c001ef0e:	09 d0                	or     eax,edx
c001ef10:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ef14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef18:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ef1e:	8d 50 01             	lea    edx,[eax+0x1]
c001ef21:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef25:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001ef2b:	31 d2                	xor    edx,edx
c001ef2d:	88 c2                	mov    dl,al
c001ef2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef33:	83 c2 08             	add    edx,0x8
c001ef36:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ef3a:	81 e1 ff 00 00 00    	and    ecx,0xff
c001ef40:	81 c9 00 00 01 00    	or     ecx,0x10000
c001ef46:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ef4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef4e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ef52:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ef58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef60:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ef66:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef6a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ef70:	83 ec 0c             	sub    esp,0xc
c001ef73:	51                   	push   ecx
c001ef74:	6a 01                	push   0x1
c001ef76:	68 64 ed 01 c0       	push   0xc001ed64
c001ef7b:	52                   	push   edx
c001ef7c:	50                   	push   eax
c001ef7d:	e8 fc 15 ff ff       	call   c001057e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ef82:	83 c4 20             	add    esp,0x20
c001ef85:	89 c2                	mov    edx,eax
c001ef87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef8b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ef91:	b8 00 00 00 00       	mov    eax,0x0
c001ef96:	5b                   	pop    ebx
c001ef97:	5e                   	pop    esi
c001ef98:	5f                   	pop    edi
c001ef99:	c3                   	ret    

c001ef9a <APICTimer::APICTimer()>:
c001ef9a:	83 ec 0c             	sub    esp,0xc
c001ef9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efa1:	83 ec 08             	sub    esp,0x8
c001efa4:	68 30 3b 02 c0       	push   0xc0023b30
c001efa9:	50                   	push   eax
c001efaa:	e8 57 3d ff ff       	call   c0012d06 <Timer::Timer(char const*)>
c001efaf:	83 c4 10             	add    esp,0x10
c001efb2:	ba 44 3b 02 c0       	mov    edx,0xc0023b44
c001efb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efbb:	89 10                	mov    DWORD PTR [eax],edx
c001efbd:	90                   	nop
c001efbe:	83 c4 0c             	add    esp,0xc
c001efc1:	c3                   	ret    

c001efc2 <PIT::write(int)>:
c001efc2:	83 ec 10             	sub    esp,0x10
c001efc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001efc9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001efcd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001efd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001efd7:	a3 a4 65 02 c0       	mov    ds:0xc00265a4,eax
c001efdc:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001efe1:	89 c2                	mov    edx,eax
c001efe3:	c1 fa 1f             	sar    edx,0x1f
c001efe6:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001efea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001efee:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001eff5:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001effa:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001effe:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001f003:	ee                   	out    dx,al
c001f004:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f008:	25 ff 00 00 00       	and    eax,0xff
c001f00d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001f014:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001f018:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001f01c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001f021:	ee                   	out    dx,al
c001f022:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f026:	c1 f8 08             	sar    eax,0x8
c001f029:	25 ff 00 00 00       	and    eax,0xff
c001f02e:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001f035:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f039:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f03d:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001f042:	ee                   	out    dx,al
c001f043:	90                   	nop
c001f044:	83 c4 10             	add    esp,0x10
c001f047:	c3                   	ret    

c001f048 <pitHandler(regs*, void*)>:
c001f048:	83 ec 0c             	sub    esp,0xc
c001f04b:	a1 a4 65 02 c0       	mov    eax,ds:0xc00265a4
c001f050:	89 c2                	mov    edx,eax
c001f052:	c1 fa 1f             	sar    edx,0x1f
c001f055:	52                   	push   edx
c001f056:	50                   	push   eax
c001f057:	6a 00                	push   0x0
c001f059:	68 00 ca 9a 3b       	push   0x3b9aca00
c001f05e:	e8 a9 04 00 00       	call   c001f50c <__udivdi3>
c001f063:	83 c4 10             	add    esp,0x10
c001f066:	83 ec 08             	sub    esp,0x8
c001f069:	52                   	push   edx
c001f06a:	50                   	push   eax
c001f06b:	e8 25 3d ff ff       	call   c0012d95 <timerHandler(unsigned long long)>
c001f070:	83 c4 10             	add    esp,0x10
c001f073:	90                   	nop
c001f074:	83 c4 0c             	add    esp,0xc
c001f077:	c3                   	ret    

c001f078 <PIT::open(int, int, void*)>:
c001f078:	83 ec 0c             	sub    esp,0xc
c001f07b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f07f:	8b 00                	mov    eax,DWORD PTR [eax]
c001f081:	83 c0 24             	add    eax,0x24
c001f084:	8b 00                	mov    eax,DWORD PTR [eax]
c001f086:	83 ec 08             	sub    esp,0x8
c001f089:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f08d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f091:	ff d0                	call   eax
c001f093:	83 c4 10             	add    esp,0x10
c001f096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f09a:	83 ec 0c             	sub    esp,0xc
c001f09d:	6a 00                	push   0x0
c001f09f:	6a 01                	push   0x1
c001f0a1:	68 48 f0 01 c0       	push   0xc001f048
c001f0a6:	6a 00                	push   0x0
c001f0a8:	50                   	push   eax
c001f0a9:	e8 d0 14 ff ff       	call   c001057e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f0ae:	83 c4 20             	add    esp,0x20
c001f0b1:	89 c2                	mov    edx,eax
c001f0b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0b7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f0bd:	b8 00 00 00 00       	mov    eax,0x0
c001f0c2:	83 c4 0c             	add    esp,0xc
c001f0c5:	c3                   	ret    

c001f0c6 <PIT::close(int, int, void*)>:
c001f0c6:	83 ec 0c             	sub    esp,0xc
c001f0c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0cd:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f0d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0db:	6a 01                	push   0x1
c001f0dd:	68 48 f0 01 c0       	push   0xc001f048
c001f0e2:	6a 00                	push   0x0
c001f0e4:	50                   	push   eax
c001f0e5:	e8 f2 14 ff ff       	call   c00105dc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f0ea:	83 c4 10             	add    esp,0x10
c001f0ed:	b8 00 00 00 00       	mov    eax,0x0
c001f0f2:	83 c4 0c             	add    esp,0xc
c001f0f5:	c3                   	ret    

c001f0f6 <PIT::PIT()>:
c001f0f6:	83 ec 0c             	sub    esp,0xc
c001f0f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0fd:	83 ec 08             	sub    esp,0x8
c001f100:	68 6c 3b 02 c0       	push   0xc0023b6c
c001f105:	50                   	push   eax
c001f106:	e8 fb 3b ff ff       	call   c0012d06 <Timer::Timer(char const*)>
c001f10b:	83 c4 10             	add    esp,0x10
c001f10e:	ba 94 3b 02 c0       	mov    edx,0xc0023b94
c001f113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f117:	89 10                	mov    DWORD PTR [eax],edx
c001f119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f11d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f123:	31 d2                	xor    edx,edx
c001f125:	88 c2                	mov    dl,al
c001f127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f12b:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f136:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f13c:	31 d2                	xor    edx,edx
c001f13e:	88 c2                	mov    dl,al
c001f140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f144:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f14d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f153:	8d 50 01             	lea    edx,[eax+0x1]
c001f156:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f15a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001f160:	31 d2                	xor    edx,edx
c001f162:	88 c2                	mov    dl,al
c001f164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f168:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f16c:	83 e1 3f             	and    ecx,0x3f
c001f16f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f173:	90                   	nop
c001f174:	83 c4 0c             	add    esp,0xc
c001f177:	c3                   	ret    
c001f178:	66 90                	xchg   ax,ax
c001f17a:	66 90                	xchg   ax,ax
c001f17c:	66 90                	xchg   ax,ax
c001f17e:	66 90                	xchg   ax,ax

c001f180 <avxDetect>:
c001f180:	b8 00 00 00 00       	mov    eax,0x0
c001f185:	c3                   	ret    

c001f186 <avxSave>:
c001f186:	c3                   	ret    

c001f187 <avxLoad>:
c001f187:	c3                   	ret    

c001f188 <avxInit>:
c001f188:	c3                   	ret    

c001f189 <avxClose>:
c001f189:	c3                   	ret    
c001f18a:	66 90                	xchg   ax,ax
c001f18c:	66 90                	xchg   ax,ax
c001f18e:	66 90                	xchg   ax,ax

c001f190 <sseDetect>:
c001f190:	b8 01 00 00 00       	mov    eax,0x1
c001f195:	0f a2                	cpuid  
c001f197:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f19d:	74 06                	je     c001f1a5 <sseDetect.noSSE>
c001f19f:	b8 01 00 00 00       	mov    eax,0x1
c001f1a4:	c3                   	ret    

c001f1a5 <sseDetect.noSSE>:
c001f1a5:	b8 00 00 00 00       	mov    eax,0x0
c001f1aa:	c3                   	ret    

c001f1ab <sseSave>:
c001f1ab:	0f ae 44 24 08       	fxsave [esp+0x8]
c001f1b0:	c3                   	ret    

c001f1b1 <sseLoad>:
c001f1b1:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001f1b6:	c3                   	ret    

c001f1b7 <sseInit>:
c001f1b7:	e8 40 00 00 00       	call   c001f1fc <x87Init>
c001f1bc:	0f 20 e0             	mov    eax,cr4
c001f1bf:	66 0d 00 06          	or     ax,0x600
c001f1c3:	0f 22 e0             	mov    cr4,eax
c001f1c6:	c3                   	ret    

c001f1c7 <sseClose>:
c001f1c7:	c3                   	ret    
c001f1c8:	66 90                	xchg   ax,ax
c001f1ca:	66 90                	xchg   ax,ax
c001f1cc:	66 90                	xchg   ax,ax
c001f1ce:	66 90                	xchg   ax,ax

c001f1d0 <value_37F>:
c001f1d0:	7f 03                	jg     c001f1d5 <value_37A+0x1>

c001f1d2 <value_37E>:
c001f1d2:	7e 03                	jle    c001f1d7 <x87Detect+0x1>

c001f1d4 <value_37A>:
c001f1d4:	7a 03                	jp     c001f1d9 <x87Detect+0x3>

c001f1d6 <x87Detect>:
c001f1d6:	b8 01 00 00 00       	mov    eax,0x1
c001f1db:	0f a2                	cpuid  
c001f1dd:	f7 c2 01 00 00 00    	test   edx,0x1
c001f1e3:	74 06                	je     c001f1eb <x87Detect.nox87>
c001f1e5:	b8 01 00 00 00       	mov    eax,0x1
c001f1ea:	c3                   	ret    

c001f1eb <x87Detect.nox87>:
c001f1eb:	b8 00 00 00 00       	mov    eax,0x0
c001f1f0:	c3                   	ret    

c001f1f1 <x87Save>:
c001f1f1:	9b dd 74 24 08       	fsave  [esp+0x8]
c001f1f6:	c3                   	ret    

c001f1f7 <x87Load>:
c001f1f7:	dd 64 24 08          	frstor [esp+0x8]
c001f1fb:	c3                   	ret    

c001f1fc <x87Init>:
c001f1fc:	9b db e3             	finit  
c001f1ff:	0f 20 c0             	mov    eax,cr0
c001f202:	66 25 fb ff          	and    ax,0xfffb
c001f206:	66 0d 22 00          	or     ax,0x22
c001f20a:	0f 22 c0             	mov    cr0,eax
c001f20d:	0f 06                	clts   
c001f20f:	d9 2d d4 f1 01 c0    	fldcw  WORD PTR ds:0xc001f1d4
c001f215:	c3                   	ret    

c001f216 <x87Close>:
c001f216:	c3                   	ret    
c001f217:	90                   	nop

c001f218 <__do_global_ctors_aux>:
c001f218:	a1 f8 02 02 c0       	mov    eax,ds:0xc00202f8
c001f21d:	83 f8 ff             	cmp    eax,0xffffffff
c001f220:	74 1a                	je     c001f23c <__do_global_ctors_aux+0x24>
c001f222:	55                   	push   ebp
c001f223:	89 e5                	mov    ebp,esp
c001f225:	53                   	push   ebx
c001f226:	52                   	push   edx
c001f227:	bb f8 02 02 c0       	mov    ebx,0xc00202f8
c001f22c:	ff d0                	call   eax
c001f22e:	83 eb 04             	sub    ebx,0x4
c001f231:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f233:	83 f8 ff             	cmp    eax,0xffffffff
c001f236:	75 f4                	jne    c001f22c <__do_global_ctors_aux+0x14>
c001f238:	58                   	pop    eax
c001f239:	5b                   	pop    ebx
c001f23a:	5d                   	pop    ebp
c001f23b:	c3                   	ret    
c001f23c:	c3                   	ret    
c001f23d:	66 90                	xchg   ax,ax
c001f23f:	90                   	nop

c001f240 <__divdi3>:
c001f240:	55                   	push   ebp
c001f241:	57                   	push   edi
c001f242:	56                   	push   esi
c001f243:	53                   	push   ebx
c001f244:	83 ec 1c             	sub    esp,0x1c
c001f247:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f24b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f24f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f252:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f256:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f25a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f25e:	85 db                	test   ebx,ebx
c001f260:	0f 88 8e 00 00 00    	js     c001f2f4 <__divdi3+0xb4>
c001f266:	89 dd                	mov    ebp,ebx
c001f268:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f270:	89 d3                	mov    ebx,edx
c001f272:	85 d2                	test   edx,edx
c001f274:	79 0d                	jns    c001f283 <__divdi3+0x43>
c001f276:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f27a:	f7 d8                	neg    eax
c001f27c:	83 d2 00             	adc    edx,0x0
c001f27f:	f7 da                	neg    edx
c001f281:	89 d3                	mov    ebx,edx
c001f283:	89 c7                	mov    edi,eax
c001f285:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f288:	85 db                	test   ebx,ebx
c001f28a:	75 48                	jne    c001f2d4 <__divdi3+0x94>
c001f28c:	39 ef                	cmp    edi,ebp
c001f28e:	76 24                	jbe    c001f2b4 <__divdi3+0x74>
c001f290:	89 ea                	mov    edx,ebp
c001f292:	f7 f7                	div    edi
c001f294:	89 c1                	mov    ecx,eax
c001f296:	31 f6                	xor    esi,esi
c001f298:	89 c8                	mov    eax,ecx
c001f29a:	89 f2                	mov    edx,esi
c001f29c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f2a0:	85 c9                	test   ecx,ecx
c001f2a2:	74 07                	je     c001f2ab <__divdi3+0x6b>
c001f2a4:	f7 d8                	neg    eax
c001f2a6:	83 d2 00             	adc    edx,0x0
c001f2a9:	f7 da                	neg    edx
c001f2ab:	83 c4 1c             	add    esp,0x1c
c001f2ae:	5b                   	pop    ebx
c001f2af:	5e                   	pop    esi
c001f2b0:	5f                   	pop    edi
c001f2b1:	5d                   	pop    ebp
c001f2b2:	c3                   	ret    
c001f2b3:	90                   	nop
c001f2b4:	85 ff                	test   edi,edi
c001f2b6:	75 0b                	jne    c001f2c3 <__divdi3+0x83>
c001f2b8:	b8 01 00 00 00       	mov    eax,0x1
c001f2bd:	31 d2                	xor    edx,edx
c001f2bf:	f7 f3                	div    ebx
c001f2c1:	89 c7                	mov    edi,eax
c001f2c3:	31 d2                	xor    edx,edx
c001f2c5:	89 e8                	mov    eax,ebp
c001f2c7:	f7 f7                	div    edi
c001f2c9:	89 c6                	mov    esi,eax
c001f2cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f2ce:	f7 f7                	div    edi
c001f2d0:	89 c1                	mov    ecx,eax
c001f2d2:	eb c4                	jmp    c001f298 <__divdi3+0x58>
c001f2d4:	39 eb                	cmp    ebx,ebp
c001f2d6:	77 3c                	ja     c001f314 <__divdi3+0xd4>
c001f2d8:	0f bd f3             	bsr    esi,ebx
c001f2db:	83 f6 1f             	xor    esi,0x1f
c001f2de:	75 40                	jne    c001f320 <__divdi3+0xe0>
c001f2e0:	39 eb                	cmp    ebx,ebp
c001f2e2:	72 09                	jb     c001f2ed <__divdi3+0xad>
c001f2e4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f2e7:	0f 87 97 00 00 00    	ja     c001f384 <__divdi3+0x144>
c001f2ed:	b9 01 00 00 00       	mov    ecx,0x1
c001f2f2:	eb a4                	jmp    c001f298 <__divdi3+0x58>
c001f2f4:	f7 d9                	neg    ecx
c001f2f6:	83 d3 00             	adc    ebx,0x0
c001f2f9:	f7 db                	neg    ebx
c001f2fb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f2fe:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f302:	89 dd                	mov    ebp,ebx
c001f304:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f30c:	e9 5f ff ff ff       	jmp    c001f270 <__divdi3+0x30>
c001f311:	8d 76 00             	lea    esi,[esi+0x0]
c001f314:	31 f6                	xor    esi,esi
c001f316:	31 c9                	xor    ecx,ecx
c001f318:	e9 7b ff ff ff       	jmp    c001f298 <__divdi3+0x58>
c001f31d:	8d 76 00             	lea    esi,[esi+0x0]
c001f320:	b8 20 00 00 00       	mov    eax,0x20
c001f325:	29 f0                	sub    eax,esi
c001f327:	89 f1                	mov    ecx,esi
c001f329:	d3 e3                	shl    ebx,cl
c001f32b:	89 fa                	mov    edx,edi
c001f32d:	88 c1                	mov    cl,al
c001f32f:	d3 ea                	shr    edx,cl
c001f331:	09 da                	or     edx,ebx
c001f333:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f337:	89 f1                	mov    ecx,esi
c001f339:	d3 e7                	shl    edi,cl
c001f33b:	89 eb                	mov    ebx,ebp
c001f33d:	88 c1                	mov    cl,al
c001f33f:	d3 eb                	shr    ebx,cl
c001f341:	89 f1                	mov    ecx,esi
c001f343:	d3 e5                	shl    ebp,cl
c001f345:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f348:	88 c1                	mov    cl,al
c001f34a:	d3 ea                	shr    edx,cl
c001f34c:	09 d5                	or     ebp,edx
c001f34e:	89 e8                	mov    eax,ebp
c001f350:	89 da                	mov    edx,ebx
c001f352:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f356:	89 d3                	mov    ebx,edx
c001f358:	89 c5                	mov    ebp,eax
c001f35a:	f7 e7                	mul    edi
c001f35c:	39 d3                	cmp    ebx,edx
c001f35e:	72 18                	jb     c001f378 <__divdi3+0x138>
c001f360:	74 0a                	je     c001f36c <__divdi3+0x12c>
c001f362:	89 e9                	mov    ecx,ebp
c001f364:	31 f6                	xor    esi,esi
c001f366:	e9 2d ff ff ff       	jmp    c001f298 <__divdi3+0x58>
c001f36b:	90                   	nop
c001f36c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f36f:	89 f1                	mov    ecx,esi
c001f371:	d3 e7                	shl    edi,cl
c001f373:	39 c7                	cmp    edi,eax
c001f375:	73 eb                	jae    c001f362 <__divdi3+0x122>
c001f377:	90                   	nop
c001f378:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f37b:	31 f6                	xor    esi,esi
c001f37d:	e9 16 ff ff ff       	jmp    c001f298 <__divdi3+0x58>
c001f382:	66 90                	xchg   ax,ax
c001f384:	31 c9                	xor    ecx,ecx
c001f386:	e9 0d ff ff ff       	jmp    c001f298 <__divdi3+0x58>
c001f38b:	90                   	nop

c001f38c <__moddi3>:
c001f38c:	55                   	push   ebp
c001f38d:	57                   	push   edi
c001f38e:	56                   	push   esi
c001f38f:	53                   	push   ebx
c001f390:	83 ec 2c             	sub    esp,0x2c
c001f393:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f397:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f39b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f39f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f3a3:	85 db                	test   ebx,ebx
c001f3a5:	0f 88 85 00 00 00    	js     c001f430 <__moddi3+0xa4>
c001f3ab:	89 de                	mov    esi,ebx
c001f3ad:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f3b5:	89 d7                	mov    edi,edx
c001f3b7:	85 d2                	test   edx,edx
c001f3b9:	79 09                	jns    c001f3c4 <__moddi3+0x38>
c001f3bb:	f7 d8                	neg    eax
c001f3bd:	83 d2 00             	adc    edx,0x0
c001f3c0:	f7 da                	neg    edx
c001f3c2:	89 d7                	mov    edi,edx
c001f3c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f3c8:	89 cd                	mov    ebp,ecx
c001f3ca:	85 ff                	test   edi,edi
c001f3cc:	75 52                	jne    c001f420 <__moddi3+0x94>
c001f3ce:	89 c3                	mov    ebx,eax
c001f3d0:	39 f0                	cmp    eax,esi
c001f3d2:	76 24                	jbe    c001f3f8 <__moddi3+0x6c>
c001f3d4:	89 c8                	mov    eax,ecx
c001f3d6:	89 f2                	mov    edx,esi
c001f3d8:	f7 f3                	div    ebx
c001f3da:	89 d6                	mov    esi,edx
c001f3dc:	89 f0                	mov    eax,esi
c001f3de:	31 d2                	xor    edx,edx
c001f3e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f3e4:	85 c9                	test   ecx,ecx
c001f3e6:	74 07                	je     c001f3ef <__moddi3+0x63>
c001f3e8:	f7 d8                	neg    eax
c001f3ea:	83 d2 00             	adc    edx,0x0
c001f3ed:	f7 da                	neg    edx
c001f3ef:	83 c4 2c             	add    esp,0x2c
c001f3f2:	5b                   	pop    ebx
c001f3f3:	5e                   	pop    esi
c001f3f4:	5f                   	pop    edi
c001f3f5:	5d                   	pop    ebp
c001f3f6:	c3                   	ret    
c001f3f7:	90                   	nop
c001f3f8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f3fc:	85 db                	test   ebx,ebx
c001f3fe:	75 0d                	jne    c001f40d <__moddi3+0x81>
c001f400:	b8 01 00 00 00       	mov    eax,0x1
c001f405:	31 d2                	xor    edx,edx
c001f407:	f7 f7                	div    edi
c001f409:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f40d:	89 f0                	mov    eax,esi
c001f40f:	31 d2                	xor    edx,edx
c001f411:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f415:	f7 f7                	div    edi
c001f417:	89 e8                	mov    eax,ebp
c001f419:	f7 f7                	div    edi
c001f41b:	89 d6                	mov    esi,edx
c001f41d:	eb bd                	jmp    c001f3dc <__moddi3+0x50>
c001f41f:	90                   	nop
c001f420:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f424:	39 f7                	cmp    edi,esi
c001f426:	76 20                	jbe    c001f448 <__moddi3+0xbc>
c001f428:	89 c8                	mov    eax,ecx
c001f42a:	89 f2                	mov    edx,esi
c001f42c:	eb b2                	jmp    c001f3e0 <__moddi3+0x54>
c001f42e:	66 90                	xchg   ax,ax
c001f430:	f7 d9                	neg    ecx
c001f432:	83 d3 00             	adc    ebx,0x0
c001f435:	f7 db                	neg    ebx
c001f437:	89 de                	mov    esi,ebx
c001f439:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f441:	e9 6f ff ff ff       	jmp    c001f3b5 <__moddi3+0x29>
c001f446:	66 90                	xchg   ax,ax
c001f448:	0f bd c7             	bsr    eax,edi
c001f44b:	83 f0 1f             	xor    eax,0x1f
c001f44e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f452:	75 24                	jne    c001f478 <__moddi3+0xec>
c001f454:	39 f7                	cmp    edi,esi
c001f456:	72 06                	jb     c001f45e <__moddi3+0xd2>
c001f458:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f45c:	77 0c                	ja     c001f46a <__moddi3+0xde>
c001f45e:	89 e9                	mov    ecx,ebp
c001f460:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f464:	19 fe                	sbb    esi,edi
c001f466:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f46a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f46e:	89 f2                	mov    edx,esi
c001f470:	e9 6b ff ff ff       	jmp    c001f3e0 <__moddi3+0x54>
c001f475:	8d 76 00             	lea    esi,[esi+0x0]
c001f478:	b8 20 00 00 00       	mov    eax,0x20
c001f47d:	89 c2                	mov    edx,eax
c001f47f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f483:	29 da                	sub    edx,ebx
c001f485:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f489:	88 d9                	mov    cl,bl
c001f48b:	d3 e7                	shl    edi,cl
c001f48d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f491:	88 d1                	mov    cl,dl
c001f493:	d3 e8                	shr    eax,cl
c001f495:	09 c7                	or     edi,eax
c001f497:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f49b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f49f:	89 d8                	mov    eax,ebx
c001f4a1:	88 d9                	mov    cl,bl
c001f4a3:	d3 e7                	shl    edi,cl
c001f4a5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f4a9:	89 f3                	mov    ebx,esi
c001f4ab:	88 d1                	mov    cl,dl
c001f4ad:	d3 eb                	shr    ebx,cl
c001f4af:	89 c7                	mov    edi,eax
c001f4b1:	88 c1                	mov    cl,al
c001f4b3:	d3 e6                	shl    esi,cl
c001f4b5:	89 e8                	mov    eax,ebp
c001f4b7:	88 d1                	mov    cl,dl
c001f4b9:	d3 e8                	shr    eax,cl
c001f4bb:	09 f0                	or     eax,esi
c001f4bd:	89 f9                	mov    ecx,edi
c001f4bf:	d3 e5                	shl    ebp,cl
c001f4c1:	89 da                	mov    edx,ebx
c001f4c3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f4c7:	89 d3                	mov    ebx,edx
c001f4c9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f4cd:	89 c6                	mov    esi,eax
c001f4cf:	89 d1                	mov    ecx,edx
c001f4d1:	39 d3                	cmp    ebx,edx
c001f4d3:	72 27                	jb     c001f4fc <__moddi3+0x170>
c001f4d5:	74 21                	je     c001f4f8 <__moddi3+0x16c>
c001f4d7:	29 f5                	sub    ebp,esi
c001f4d9:	19 cb                	sbb    ebx,ecx
c001f4db:	89 de                	mov    esi,ebx
c001f4dd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f4e1:	d3 e6                	shl    esi,cl
c001f4e3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f4e7:	89 f9                	mov    ecx,edi
c001f4e9:	d3 ed                	shr    ebp,cl
c001f4eb:	09 ee                	or     esi,ebp
c001f4ed:	89 f0                	mov    eax,esi
c001f4ef:	d3 eb                	shr    ebx,cl
c001f4f1:	89 da                	mov    edx,ebx
c001f4f3:	e9 e8 fe ff ff       	jmp    c001f3e0 <__moddi3+0x54>
c001f4f8:	39 c5                	cmp    ebp,eax
c001f4fa:	73 db                	jae    c001f4d7 <__moddi3+0x14b>
c001f4fc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f500:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f504:	89 d1                	mov    ecx,edx
c001f506:	89 c6                	mov    esi,eax
c001f508:	eb cd                	jmp    c001f4d7 <__moddi3+0x14b>
c001f50a:	66 90                	xchg   ax,ax

c001f50c <__udivdi3>:
c001f50c:	55                   	push   ebp
c001f50d:	57                   	push   edi
c001f50e:	56                   	push   esi
c001f50f:	53                   	push   ebx
c001f510:	83 ec 1c             	sub    esp,0x1c
c001f513:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f517:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f51b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f51f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f523:	85 d2                	test   edx,edx
c001f525:	75 41                	jne    c001f568 <__udivdi3+0x5c>
c001f527:	39 f7                	cmp    edi,esi
c001f529:	76 15                	jbe    c001f540 <__udivdi3+0x34>
c001f52b:	89 e8                	mov    eax,ebp
c001f52d:	89 f2                	mov    edx,esi
c001f52f:	f7 f7                	div    edi
c001f531:	31 db                	xor    ebx,ebx
c001f533:	89 da                	mov    edx,ebx
c001f535:	83 c4 1c             	add    esp,0x1c
c001f538:	5b                   	pop    ebx
c001f539:	5e                   	pop    esi
c001f53a:	5f                   	pop    edi
c001f53b:	5d                   	pop    ebp
c001f53c:	c3                   	ret    
c001f53d:	8d 76 00             	lea    esi,[esi+0x0]
c001f540:	89 f9                	mov    ecx,edi
c001f542:	85 ff                	test   edi,edi
c001f544:	75 0b                	jne    c001f551 <__udivdi3+0x45>
c001f546:	b8 01 00 00 00       	mov    eax,0x1
c001f54b:	31 d2                	xor    edx,edx
c001f54d:	f7 f7                	div    edi
c001f54f:	89 c1                	mov    ecx,eax
c001f551:	31 d2                	xor    edx,edx
c001f553:	89 f0                	mov    eax,esi
c001f555:	f7 f1                	div    ecx
c001f557:	89 c3                	mov    ebx,eax
c001f559:	89 e8                	mov    eax,ebp
c001f55b:	f7 f1                	div    ecx
c001f55d:	89 da                	mov    edx,ebx
c001f55f:	83 c4 1c             	add    esp,0x1c
c001f562:	5b                   	pop    ebx
c001f563:	5e                   	pop    esi
c001f564:	5f                   	pop    edi
c001f565:	5d                   	pop    ebp
c001f566:	c3                   	ret    
c001f567:	90                   	nop
c001f568:	39 f2                	cmp    edx,esi
c001f56a:	77 1c                	ja     c001f588 <__udivdi3+0x7c>
c001f56c:	0f bd da             	bsr    ebx,edx
c001f56f:	83 f3 1f             	xor    ebx,0x1f
c001f572:	75 24                	jne    c001f598 <__udivdi3+0x8c>
c001f574:	39 f2                	cmp    edx,esi
c001f576:	72 08                	jb     c001f580 <__udivdi3+0x74>
c001f578:	39 ef                	cmp    edi,ebp
c001f57a:	0f 87 84 00 00 00    	ja     c001f604 <__udivdi3+0xf8>
c001f580:	b8 01 00 00 00       	mov    eax,0x1
c001f585:	eb ac                	jmp    c001f533 <__udivdi3+0x27>
c001f587:	90                   	nop
c001f588:	31 db                	xor    ebx,ebx
c001f58a:	31 c0                	xor    eax,eax
c001f58c:	89 da                	mov    edx,ebx
c001f58e:	83 c4 1c             	add    esp,0x1c
c001f591:	5b                   	pop    ebx
c001f592:	5e                   	pop    esi
c001f593:	5f                   	pop    edi
c001f594:	5d                   	pop    ebp
c001f595:	c3                   	ret    
c001f596:	66 90                	xchg   ax,ax
c001f598:	b8 20 00 00 00       	mov    eax,0x20
c001f59d:	29 d8                	sub    eax,ebx
c001f59f:	88 d9                	mov    cl,bl
c001f5a1:	d3 e2                	shl    edx,cl
c001f5a3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f5a7:	89 fa                	mov    edx,edi
c001f5a9:	88 c1                	mov    cl,al
c001f5ab:	d3 ea                	shr    edx,cl
c001f5ad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f5b1:	09 d1                	or     ecx,edx
c001f5b3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f5b7:	88 d9                	mov    cl,bl
c001f5b9:	d3 e7                	shl    edi,cl
c001f5bb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f5bf:	89 f7                	mov    edi,esi
c001f5c1:	88 c1                	mov    cl,al
c001f5c3:	d3 ef                	shr    edi,cl
c001f5c5:	88 d9                	mov    cl,bl
c001f5c7:	d3 e6                	shl    esi,cl
c001f5c9:	89 ea                	mov    edx,ebp
c001f5cb:	88 c1                	mov    cl,al
c001f5cd:	d3 ea                	shr    edx,cl
c001f5cf:	09 d6                	or     esi,edx
c001f5d1:	89 f0                	mov    eax,esi
c001f5d3:	89 fa                	mov    edx,edi
c001f5d5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f5d9:	89 d7                	mov    edi,edx
c001f5db:	89 c6                	mov    esi,eax
c001f5dd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f5e1:	39 d7                	cmp    edi,edx
c001f5e3:	72 13                	jb     c001f5f8 <__udivdi3+0xec>
c001f5e5:	74 09                	je     c001f5f0 <__udivdi3+0xe4>
c001f5e7:	89 f0                	mov    eax,esi
c001f5e9:	31 db                	xor    ebx,ebx
c001f5eb:	e9 43 ff ff ff       	jmp    c001f533 <__udivdi3+0x27>
c001f5f0:	88 d9                	mov    cl,bl
c001f5f2:	d3 e5                	shl    ebp,cl
c001f5f4:	39 c5                	cmp    ebp,eax
c001f5f6:	73 ef                	jae    c001f5e7 <__udivdi3+0xdb>
c001f5f8:	8d 46 ff             	lea    eax,[esi-0x1]
c001f5fb:	31 db                	xor    ebx,ebx
c001f5fd:	e9 31 ff ff ff       	jmp    c001f533 <__udivdi3+0x27>
c001f602:	66 90                	xchg   ax,ax
c001f604:	31 c0                	xor    eax,eax
c001f606:	e9 28 ff ff ff       	jmp    c001f533 <__udivdi3+0x27>
c001f60b:	90                   	nop

c001f60c <__umoddi3>:
c001f60c:	55                   	push   ebp
c001f60d:	57                   	push   edi
c001f60e:	56                   	push   esi
c001f60f:	53                   	push   ebx
c001f610:	83 ec 1c             	sub    esp,0x1c
c001f613:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f617:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f61b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f61f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f623:	89 da                	mov    edx,ebx
c001f625:	85 c0                	test   eax,eax
c001f627:	75 37                	jne    c001f660 <__umoddi3+0x54>
c001f629:	39 df                	cmp    edi,ebx
c001f62b:	76 13                	jbe    c001f640 <__umoddi3+0x34>
c001f62d:	89 f0                	mov    eax,esi
c001f62f:	f7 f7                	div    edi
c001f631:	89 d0                	mov    eax,edx
c001f633:	31 d2                	xor    edx,edx
c001f635:	83 c4 1c             	add    esp,0x1c
c001f638:	5b                   	pop    ebx
c001f639:	5e                   	pop    esi
c001f63a:	5f                   	pop    edi
c001f63b:	5d                   	pop    ebp
c001f63c:	c3                   	ret    
c001f63d:	8d 76 00             	lea    esi,[esi+0x0]
c001f640:	89 fd                	mov    ebp,edi
c001f642:	85 ff                	test   edi,edi
c001f644:	75 0b                	jne    c001f651 <__umoddi3+0x45>
c001f646:	b8 01 00 00 00       	mov    eax,0x1
c001f64b:	31 d2                	xor    edx,edx
c001f64d:	f7 f7                	div    edi
c001f64f:	89 c5                	mov    ebp,eax
c001f651:	89 d8                	mov    eax,ebx
c001f653:	31 d2                	xor    edx,edx
c001f655:	f7 f5                	div    ebp
c001f657:	89 f0                	mov    eax,esi
c001f659:	f7 f5                	div    ebp
c001f65b:	89 d0                	mov    eax,edx
c001f65d:	eb d4                	jmp    c001f633 <__umoddi3+0x27>
c001f65f:	90                   	nop
c001f660:	89 f1                	mov    ecx,esi
c001f662:	39 d8                	cmp    eax,ebx
c001f664:	76 0a                	jbe    c001f670 <__umoddi3+0x64>
c001f666:	89 f0                	mov    eax,esi
c001f668:	83 c4 1c             	add    esp,0x1c
c001f66b:	5b                   	pop    ebx
c001f66c:	5e                   	pop    esi
c001f66d:	5f                   	pop    edi
c001f66e:	5d                   	pop    ebp
c001f66f:	c3                   	ret    
c001f670:	0f bd e8             	bsr    ebp,eax
c001f673:	83 f5 1f             	xor    ebp,0x1f
c001f676:	75 1c                	jne    c001f694 <__umoddi3+0x88>
c001f678:	39 d8                	cmp    eax,ebx
c001f67a:	72 04                	jb     c001f680 <__umoddi3+0x74>
c001f67c:	39 f7                	cmp    edi,esi
c001f67e:	77 08                	ja     c001f688 <__umoddi3+0x7c>
c001f680:	89 da                	mov    edx,ebx
c001f682:	29 fe                	sub    esi,edi
c001f684:	19 c2                	sbb    edx,eax
c001f686:	89 f1                	mov    ecx,esi
c001f688:	89 c8                	mov    eax,ecx
c001f68a:	83 c4 1c             	add    esp,0x1c
c001f68d:	5b                   	pop    ebx
c001f68e:	5e                   	pop    esi
c001f68f:	5f                   	pop    edi
c001f690:	5d                   	pop    ebp
c001f691:	c3                   	ret    
c001f692:	66 90                	xchg   ax,ax
c001f694:	ba 20 00 00 00       	mov    edx,0x20
c001f699:	29 ea                	sub    edx,ebp
c001f69b:	89 e9                	mov    ecx,ebp
c001f69d:	d3 e0                	shl    eax,cl
c001f69f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f6a3:	89 f8                	mov    eax,edi
c001f6a5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f6a9:	88 d1                	mov    cl,dl
c001f6ab:	d3 e8                	shr    eax,cl
c001f6ad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f6b1:	09 c1                	or     ecx,eax
c001f6b3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f6b7:	89 e9                	mov    ecx,ebp
c001f6b9:	d3 e7                	shl    edi,cl
c001f6bb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f6bf:	89 d8                	mov    eax,ebx
c001f6c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f6c5:	88 d1                	mov    cl,dl
c001f6c7:	d3 e8                	shr    eax,cl
c001f6c9:	89 c7                	mov    edi,eax
c001f6cb:	89 e9                	mov    ecx,ebp
c001f6cd:	d3 e3                	shl    ebx,cl
c001f6cf:	89 f0                	mov    eax,esi
c001f6d1:	88 d1                	mov    cl,dl
c001f6d3:	d3 e8                	shr    eax,cl
c001f6d5:	09 d8                	or     eax,ebx
c001f6d7:	89 e9                	mov    ecx,ebp
c001f6d9:	d3 e6                	shl    esi,cl
c001f6db:	89 f3                	mov    ebx,esi
c001f6dd:	89 fa                	mov    edx,edi
c001f6df:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f6e3:	89 d1                	mov    ecx,edx
c001f6e5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f6e9:	89 c6                	mov    esi,eax
c001f6eb:	89 d7                	mov    edi,edx
c001f6ed:	39 d1                	cmp    ecx,edx
c001f6ef:	72 27                	jb     c001f718 <__umoddi3+0x10c>
c001f6f1:	74 21                	je     c001f714 <__umoddi3+0x108>
c001f6f3:	89 ca                	mov    edx,ecx
c001f6f5:	29 f3                	sub    ebx,esi
c001f6f7:	19 fa                	sbb    edx,edi
c001f6f9:	89 d0                	mov    eax,edx
c001f6fb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f6ff:	d3 e0                	shl    eax,cl
c001f701:	89 e9                	mov    ecx,ebp
c001f703:	d3 eb                	shr    ebx,cl
c001f705:	09 d8                	or     eax,ebx
c001f707:	d3 ea                	shr    edx,cl
c001f709:	83 c4 1c             	add    esp,0x1c
c001f70c:	5b                   	pop    ebx
c001f70d:	5e                   	pop    esi
c001f70e:	5f                   	pop    edi
c001f70f:	5d                   	pop    ebp
c001f710:	c3                   	ret    
c001f711:	8d 76 00             	lea    esi,[esi+0x0]
c001f714:	39 c3                	cmp    ebx,eax
c001f716:	73 db                	jae    c001f6f3 <__umoddi3+0xe7>
c001f718:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f71c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f720:	89 d7                	mov    edi,edx
c001f722:	89 c6                	mov    esi,eax
c001f724:	eb cd                	jmp    c001f6f3 <__umoddi3+0xe7>
c001f726:	66 90                	xchg   ax,ax
c001f728:	66 90                	xchg   ax,ax
c001f72a:	66 90                	xchg   ax,ax
c001f72c:	66 90                	xchg   ax,ax
c001f72e:	66 90                	xchg   ax,ax

c001f730 <fabs>:
c001f730:	83 ec 0c             	sub    esp,0xc
c001f733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f737:	89 04 24             	mov    DWORD PTR [esp],eax
c001f73a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f73e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001f743:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f747:	dd 04 24             	fld    QWORD PTR [esp]
c001f74a:	83 c4 0c             	add    esp,0xc
c001f74d:	c3                   	ret    
c001f74e:	66 90                	xchg   ax,ax

c001f750 <lrint>:
c001f750:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001f754:	83 ec 04             	sub    esp,0x4
c001f757:	db 1c 24             	fistp  DWORD PTR [esp]
c001f75a:	58                   	pop    eax
c001f75b:	c3                   	ret    

c001f75c <lrintf>:
c001f75c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001f760:	83 ec 04             	sub    esp,0x4
c001f763:	db 1c 24             	fistp  DWORD PTR [esp]
c001f766:	58                   	pop    eax
c001f767:	c3                   	ret    

Disassembly of section .init:

c001f768 <_init>:
c001f768:	55                   	push   ebp
c001f769:	89 e5                	mov    ebp,esp
c001f76b:	e8 a8 09 fe ff       	call   c0000118 <frame_dummy>
c001f770:	e8 a3 fa ff ff       	call   c001f218 <__do_global_ctors_aux>
c001f775:	5d                   	pop    ebp
c001f776:	c3                   	ret    

Disassembly of section .fini:

c001f777 <_fini>:
c001f777:	55                   	push   ebp
c001f778:	89 e5                	mov    ebp,esp
c001f77a:	e8 29 09 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001f77f:	5d                   	pop    ebp
c001f780:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f782 <Computer::~Computer()>:
c001f782:	83 ec 0c             	sub    esp,0xc
c001f785:	ba a4 12 02 c0       	mov    edx,0xc00212a4
c001f78a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f78e:	89 10                	mov    DWORD PTR [eax],edx
c001f790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f794:	83 ec 0c             	sub    esp,0xc
c001f797:	50                   	push   eax
c001f798:	e8 33 0d ff ff       	call   c00104d0 <Device::~Device()>
c001f79d:	83 c4 10             	add    esp,0x10
c001f7a0:	90                   	nop
c001f7a1:	83 c4 0c             	add    esp,0xc
c001f7a4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f7a6 <Computer::~Computer()>:
c001f7a6:	83 ec 0c             	sub    esp,0xc
c001f7a9:	83 ec 0c             	sub    esp,0xc
c001f7ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7b0:	e8 cd ff ff ff       	call   c001f782 <Computer::~Computer()>
c001f7b5:	83 c4 10             	add    esp,0x10
c001f7b8:	83 ec 08             	sub    esp,0x8
c001f7bb:	68 ec 01 00 00       	push   0x1ec
c001f7c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7c4:	e8 26 f9 fe ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c001f7c9:	83 c4 10             	add    esp,0x10
c001f7cc:	83 c4 0c             	add    esp,0xc
c001f7cf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f7d0 <idleCommon()>:
c001f7d0:	83 ec 0c             	sub    esp,0xc
c001f7d3:	e8 75 92 ff ff       	call   c0018a4d <lockScheduler()>
c001f7d8:	e8 b9 95 ff ff       	call   c0018d96 <schedule()>
c001f7dd:	83 c4 0c             	add    esp,0xc
c001f7e0:	e9 6a 92 ff ff       	jmp    c0018a4f <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001f7e5 <CPU::readCR3()>:
c001f7e5:	83 ec 10             	sub    esp,0x10
c001f7e8:	0f 20 d8             	mov    eax,cr3
c001f7eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f7ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7f3:	83 c4 10             	add    esp,0x10
c001f7f6:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001f7f7 <CPU::writeCR3(unsigned long)>:
c001f7f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7fb:	0f 22 d8             	mov    cr3,eax
c001f7fe:	90                   	nop
c001f7ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f800 <LinkedList<UnixFile>::~LinkedList()>:
c001f800:	90                   	nop
c001f801:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f802 <LinkedList<UnixFile>::LinkedList()>:
c001f802:	83 ec 0c             	sub    esp,0xc
c001f805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f809:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f80f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f813:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f81a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f81e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f829:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f82f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f833:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f83e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f845:	83 ec 0c             	sub    esp,0xc
c001f848:	68 9d 15 02 c0       	push   0xc002159d
c001f84d:	e8 c3 f9 fe ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001f852:	83 c4 10             	add    esp,0x10
c001f855:	90                   	nop
c001f856:	83 c4 0c             	add    esp,0xc
c001f859:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f85a <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f85a:	83 ec 0c             	sub    esp,0xc
c001f85d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f862:	75 10                	jne    c001f874 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f864:	83 ec 0c             	sub    esp,0xc
c001f867:	68 b8 15 02 c0       	push   0xc00215b8
c001f86c:	e8 d3 61 ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c001f871:	83 c4 10             	add    esp,0x10
c001f874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f878:	8b 00                	mov    eax,DWORD PTR [eax]
c001f87a:	85 c0                	test   eax,eax
c001f87c:	74 34                	je     c001f8b2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f87e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f882:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f885:	85 c0                	test   eax,eax
c001f887:	74 29                	je     c001f8b2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f88d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f890:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f894:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f89b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f89f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8a9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f8b0:	eb 65                	jmp    c001f917 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8b6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8b8:	85 c0                	test   eax,eax
c001f8ba:	75 4b                	jne    c001f907 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f8bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8c3:	85 c0                	test   eax,eax
c001f8c5:	75 40                	jne    c001f907 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8cf:	89 10                	mov    DWORD PTR [eax],edx
c001f8d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8d5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8d9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f8dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8e3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f8ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8f1:	85 c0                	test   eax,eax
c001f8f3:	74 22                	je     c001f917 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f8f5:	83 ec 0c             	sub    esp,0xc
c001f8f8:	68 da 15 02 c0       	push   0xc00215da
c001f8fd:	e8 42 61 ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c001f902:	83 c4 10             	add    esp,0x10
c001f905:	eb 10                	jmp    c001f917 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f907:	83 ec 0c             	sub    esp,0xc
c001f90a:	68 e4 15 02 c0       	push   0xc00215e4
c001f90f:	e8 30 61 ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c001f914:	83 c4 10             	add    esp,0x10
c001f917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f91b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f91e:	8d 50 01             	lea    edx,[eax+0x1]
c001f921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f925:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f928:	90                   	nop
c001f929:	83 c4 0c             	add    esp,0xc
c001f92c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f92e <LinkedList<UnixFile>::getFirstElement()>:
c001f92e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f932:	8b 00                	mov    eax,DWORD PTR [eax]
c001f934:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f936 <LinkedList<UnixFile>::removeFirst()>:
c001f936:	83 ec 0c             	sub    esp,0xc
c001f939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f93d:	8b 00                	mov    eax,DWORD PTR [eax]
c001f93f:	85 c0                	test   eax,eax
c001f941:	75 12                	jne    c001f955 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f943:	83 ec 0c             	sub    esp,0xc
c001f946:	68 f0 15 02 c0       	push   0xc00215f0
c001f94b:	e8 f4 60 ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c001f950:	83 c4 10             	add    esp,0x10
c001f953:	eb 7e                	jmp    c001f9d3 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f959:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f95c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f95f:	85 c0                	test   eax,eax
c001f961:	74 10                	je     c001f973 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f963:	83 ec 0c             	sub    esp,0xc
c001f966:	68 3b 16 02 c0       	push   0xc002163b
c001f96b:	e8 d4 60 ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c001f970:	83 c4 10             	add    esp,0x10
c001f973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f977:	8b 00                	mov    eax,DWORD PTR [eax]
c001f979:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f97c:	85 c0                	test   eax,eax
c001f97e:	75 33                	jne    c001f9b3 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f984:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f98e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f999:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f99c:	83 f8 01             	cmp    eax,0x1
c001f99f:	74 21                	je     c001f9c2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f9a1:	83 ec 0c             	sub    esp,0xc
c001f9a4:	68 14 16 02 c0       	push   0xc0021614
c001f9a9:	e8 96 60 ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c001f9ae:	83 c4 10             	add    esp,0x10
c001f9b1:	eb 0f                	jmp    c001f9c2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f9b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b7:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9b9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f9bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c0:	89 10                	mov    DWORD PTR [eax],edx
c001f9c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9c9:	8d 50 ff             	lea    edx,[eax-0x1]
c001f9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f9d3:	83 c4 0c             	add    esp,0xc
c001f9d6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f9d8 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f9d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9df:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f9e0 <DriverlessDevice::~DriverlessDevice()>:
c001f9e0:	ba a4 1c 02 c0       	mov    edx,0xc0021ca4
c001f9e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9e9:	89 10                	mov    DWORD PTR [eax],edx
c001f9eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9ef:	50                   	push   eax
c001f9f0:	e8 db 0a ff ff       	call   c00104d0 <Device::~Device()>
c001f9f5:	83 c4 04             	add    esp,0x4
c001f9f8:	90                   	nop
c001f9f9:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f9fa <DriverlessDevice::~DriverlessDevice()>:
c001f9fa:	83 ec 0c             	sub    esp,0xc
c001f9fd:	83 ec 0c             	sub    esp,0xc
c001fa00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa04:	e8 d7 ff ff ff       	call   c001f9e0 <DriverlessDevice::~DriverlessDevice()>
c001fa09:	83 c4 10             	add    esp,0x10
c001fa0c:	83 ec 08             	sub    esp,0x8
c001fa0f:	68 58 01 00 00       	push   0x158
c001fa14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa18:	e8 d2 f6 fe ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c001fa1d:	83 c4 10             	add    esp,0x10
c001fa20:	83 c4 0c             	add    esp,0xc
c001fa23:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fa24 <LinkedList<Device>::addElement(Device*)>:
c001fa24:	83 ec 0c             	sub    esp,0xc
c001fa27:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fa2c:	75 10                	jne    c001fa3e <LinkedList<Device>::addElement(Device*)+0x1a>
c001fa2e:	83 ec 0c             	sub    esp,0xc
c001fa31:	68 b8 15 02 c0       	push   0xc00215b8
c001fa36:	e8 09 60 ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c001fa3b:	83 c4 10             	add    esp,0x10
c001fa3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa42:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa44:	85 c0                	test   eax,eax
c001fa46:	74 3a                	je     c001fa82 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fa48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa4f:	85 c0                	test   eax,eax
c001fa51:	74 2f                	je     c001fa82 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fa53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa57:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa5a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa5e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fa64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa6c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa76:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fa80:	eb 68                	jmp    c001faea <LinkedList<Device>::addElement(Device*)+0xc6>
c001fa82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa86:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa88:	85 c0                	test   eax,eax
c001fa8a:	75 4e                	jne    c001fada <LinkedList<Device>::addElement(Device*)+0xb6>
c001fa8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa93:	85 c0                	test   eax,eax
c001fa95:	75 43                	jne    c001fada <LinkedList<Device>::addElement(Device*)+0xb6>
c001fa97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa9b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa9f:	89 10                	mov    DWORD PTR [eax],edx
c001faa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001faa9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001faac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fab3:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fabd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fac4:	85 c0                	test   eax,eax
c001fac6:	74 22                	je     c001faea <LinkedList<Device>::addElement(Device*)+0xc6>
c001fac8:	83 ec 0c             	sub    esp,0xc
c001facb:	68 da 15 02 c0       	push   0xc00215da
c001fad0:	e8 6f 5f ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c001fad5:	83 c4 10             	add    esp,0x10
c001fad8:	eb 10                	jmp    c001faea <LinkedList<Device>::addElement(Device*)+0xc6>
c001fada:	83 ec 0c             	sub    esp,0xc
c001fadd:	68 e4 15 02 c0       	push   0xc00215e4
c001fae2:	e8 5d 5f ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c001fae7:	83 c4 10             	add    esp,0x10
c001faea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001faf1:	8d 50 01             	lea    edx,[eax+0x1]
c001faf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fafb:	90                   	nop
c001fafc:	83 c4 0c             	add    esp,0xc
c001faff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fb00 <LinkedList<Device>::LinkedList()>:
c001fb00:	83 ec 0c             	sub    esp,0xc
c001fb03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb07:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb11:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb1c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb27:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb31:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb3c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb43:	83 ec 0c             	sub    esp,0xc
c001fb46:	68 9d 15 02 c0       	push   0xc002159d
c001fb4b:	e8 c5 f6 fe ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001fb50:	83 c4 10             	add    esp,0x10
c001fb53:	90                   	nop
c001fb54:	83 c4 0c             	add    esp,0xc
c001fb57:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001fb58 <CPU::readCR0()>:
c001fb58:	83 ec 10             	sub    esp,0x10
c001fb5b:	0f 20 c0             	mov    eax,cr0
c001fb5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb66:	83 c4 10             	add    esp,0x10
c001fb69:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001fb6a <CPU::writeCR0(unsigned long)>:
c001fb6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb6e:	0f 22 c0             	mov    cr0,eax
c001fb71:	90                   	nop
c001fb72:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001fb73 <CPU::readDR0()>:
c001fb73:	83 ec 10             	sub    esp,0x10
c001fb76:	0f 21 c0             	mov    eax,db0
c001fb79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb81:	83 c4 10             	add    esp,0x10
c001fb84:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001fb85 <CPU::readDR1()>:
c001fb85:	83 ec 10             	sub    esp,0x10
c001fb88:	0f 21 c8             	mov    eax,db1
c001fb8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb93:	83 c4 10             	add    esp,0x10
c001fb96:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001fb97 <CPU::readDR2()>:
c001fb97:	83 ec 10             	sub    esp,0x10
c001fb9a:	0f 21 d0             	mov    eax,db2
c001fb9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fba1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fba5:	83 c4 10             	add    esp,0x10
c001fba8:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001fba9 <CPU::readDR3()>:
c001fba9:	83 ec 10             	sub    esp,0x10
c001fbac:	0f 21 d8             	mov    eax,db3
c001fbaf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbb7:	83 c4 10             	add    esp,0x10
c001fbba:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001fbbb <CPU::readDR6()>:
c001fbbb:	83 ec 10             	sub    esp,0x10
c001fbbe:	0f 21 f0             	mov    eax,db6
c001fbc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbc9:	83 c4 10             	add    esp,0x10
c001fbcc:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001fbcd <CPU::readDR7()>:
c001fbcd:	83 ec 10             	sub    esp,0x10
c001fbd0:	0f 21 f8             	mov    eax,db7
c001fbd3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbd7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbdb:	83 c4 10             	add    esp,0x10
c001fbde:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fbe0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbe4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbe6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fbe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fbe8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbec:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbee:	85 c0                	test   eax,eax
c001fbf0:	75 0e                	jne    c001fc00 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fbf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbf6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbf9:	85 c0                	test   eax,eax
c001fbfb:	75 03                	jne    c001fc00 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fbfd:	b0 01                	mov    al,0x1
c001fbff:	c3                   	ret    
c001fc00:	b0 00                	mov    al,0x0
c001fc02:	90                   	nop
c001fc03:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fc04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fc04:	83 ec 0c             	sub    esp,0xc
c001fc07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc0b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc0d:	85 c0                	test   eax,eax
c001fc0f:	75 15                	jne    c001fc26 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001fc11:	83 ec 0c             	sub    esp,0xc
c001fc14:	68 f0 15 02 c0       	push   0xc00215f0
c001fc19:	e8 26 5e ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c001fc1e:	83 c4 10             	add    esp,0x10
c001fc21:	e9 88 00 00 00       	jmp    c001fcae <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001fc26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc2d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fc30:	85 c0                	test   eax,eax
c001fc32:	0f 95 c0             	setne  al
c001fc35:	84 c0                	test   al,al
c001fc37:	74 10                	je     c001fc49 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001fc39:	83 ec 0c             	sub    esp,0xc
c001fc3c:	68 3b 16 02 c0       	push   0xc002163b
c001fc41:	e8 fe 5d ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c001fc46:	83 c4 10             	add    esp,0x10
c001fc49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc4d:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc4f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fc52:	85 c0                	test   eax,eax
c001fc54:	0f 94 c0             	sete   al
c001fc57:	84 c0                	test   al,al
c001fc59:	74 33                	je     c001fc8e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001fc5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc5f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc69:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc77:	83 f8 01             	cmp    eax,0x1
c001fc7a:	74 21                	je     c001fc9d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001fc7c:	83 ec 0c             	sub    esp,0xc
c001fc7f:	68 14 16 02 c0       	push   0xc0021614
c001fc84:	e8 bb 5d ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c001fc89:	83 c4 10             	add    esp,0x10
c001fc8c:	eb 0f                	jmp    c001fc9d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001fc8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc92:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc94:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fc97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc9b:	89 10                	mov    DWORD PTR [eax],edx
c001fc9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fca4:	8d 50 ff             	lea    edx,[eax-0x1]
c001fca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcab:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fcae:	83 c4 0c             	add    esp,0xc
c001fcb1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fcb2:	83 ec 0c             	sub    esp,0xc
c001fcb5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fcba:	75 10                	jne    c001fccc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001fcbc:	83 ec 0c             	sub    esp,0xc
c001fcbf:	68 b8 15 02 c0       	push   0xc00215b8
c001fcc4:	e8 7b 5d ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c001fcc9:	83 c4 10             	add    esp,0x10
c001fccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcd2:	85 c0                	test   eax,eax
c001fcd4:	74 34                	je     c001fd0a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001fcd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcdd:	85 c0                	test   eax,eax
c001fcdf:	74 29                	je     c001fd0a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001fce1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fce8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcec:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fcef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcf7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fcfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd01:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fd08:	eb 65                	jmp    c001fd6f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fd0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd0e:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd10:	85 c0                	test   eax,eax
c001fd12:	75 4b                	jne    c001fd5f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001fd14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd1b:	85 c0                	test   eax,eax
c001fd1d:	75 40                	jne    c001fd5f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001fd1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd27:	89 10                	mov    DWORD PTR [eax],edx
c001fd29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd2d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd31:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd3b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fd42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd46:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd49:	85 c0                	test   eax,eax
c001fd4b:	74 22                	je     c001fd6f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fd4d:	83 ec 0c             	sub    esp,0xc
c001fd50:	68 da 15 02 c0       	push   0xc00215da
c001fd55:	e8 ea 5c ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c001fd5a:	83 c4 10             	add    esp,0x10
c001fd5d:	eb 10                	jmp    c001fd6f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fd5f:	83 ec 0c             	sub    esp,0xc
c001fd62:	68 e4 15 02 c0       	push   0xc00215e4
c001fd67:	e8 d8 5c ff ff       	call   c0015a44 <Krnl::panic(char const*)>
c001fd6c:	83 c4 10             	add    esp,0x10
c001fd6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd73:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd76:	8d 50 01             	lea    edx,[eax+0x1]
c001fd79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd7d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fd80:	90                   	nop
c001fd81:	83 c4 0c             	add    esp,0xc
c001fd84:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fd86 <ACPI::~ACPI()>:
c001fd86:	83 ec 0c             	sub    esp,0xc
c001fd89:	ba 5c 24 02 c0       	mov    edx,0xc002245c
c001fd8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd92:	89 10                	mov    DWORD PTR [eax],edx
c001fd94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd98:	83 ec 0c             	sub    esp,0xc
c001fd9b:	50                   	push   eax
c001fd9c:	e8 2f 07 ff ff       	call   c00104d0 <Device::~Device()>
c001fda1:	83 c4 10             	add    esp,0x10
c001fda4:	90                   	nop
c001fda5:	83 c4 0c             	add    esp,0xc
c001fda8:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fdaa <ACPI::~ACPI()>:
c001fdaa:	83 ec 0c             	sub    esp,0xc
c001fdad:	83 ec 0c             	sub    esp,0xc
c001fdb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdb4:	e8 cd ff ff ff       	call   c001fd86 <ACPI::~ACPI()>
c001fdb9:	83 c4 10             	add    esp,0x10
c001fdbc:	83 ec 08             	sub    esp,0x8
c001fdbf:	68 68 22 00 00       	push   0x2268
c001fdc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdc8:	e8 22 f3 fe ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c001fdcd:	83 c4 10             	add    esp,0x10
c001fdd0:	83 c4 0c             	add    esp,0xc
c001fdd3:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fdd4 <CPU::~CPU()>:
c001fdd4:	83 ec 0c             	sub    esp,0xc
c001fdd7:	ba 4c 28 02 c0       	mov    edx,0xc002284c
c001fddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde0:	89 10                	mov    DWORD PTR [eax],edx
c001fde2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde6:	83 ec 0c             	sub    esp,0xc
c001fde9:	50                   	push   eax
c001fdea:	e8 e1 06 ff ff       	call   c00104d0 <Device::~Device()>
c001fdef:	83 c4 10             	add    esp,0x10
c001fdf2:	90                   	nop
c001fdf3:	83 c4 0c             	add    esp,0xc
c001fdf6:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fdf8 <CPU::~CPU()>:
c001fdf8:	83 ec 0c             	sub    esp,0xc
c001fdfb:	83 ec 0c             	sub    esp,0xc
c001fdfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe02:	e8 cd ff ff ff       	call   c001fdd4 <CPU::~CPU()>
c001fe07:	83 c4 10             	add    esp,0x10
c001fe0a:	83 ec 08             	sub    esp,0x8
c001fe0d:	68 98 11 00 00       	push   0x1198
c001fe12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe16:	e8 d4 f2 fe ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c001fe1b:	83 c4 10             	add    esp,0x10
c001fe1e:	83 c4 0c             	add    esp,0xc
c001fe21:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001fe22 <CPU::readCR4()>:
c001fe22:	83 ec 10             	sub    esp,0x10
c001fe25:	0f 20 e0             	mov    eax,cr4
c001fe28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe30:	83 c4 10             	add    esp,0x10
c001fe33:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001fe34 <CPU::writeDR7(unsigned long)>:
c001fe34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe38:	0f 23 f8             	mov    db7,eax
c001fe3b:	90                   	nop
c001fe3c:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001fe3d <CPU::writeCR4(unsigned long)>:
c001fe3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe41:	0f 22 e0             	mov    cr4,eax
c001fe44:	90                   	nop
c001fe45:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001fe46 <CPU::readCR2()>:
c001fe46:	83 ec 10             	sub    esp,0x10
c001fe49:	0f 20 d0             	mov    eax,cr2
c001fe4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe54:	83 c4 10             	add    esp,0x10
c001fe57:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fe58 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fe58:	90                   	nop
c001fe59:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fe5a <ThreadControlBlock::ThreadControlBlock()>:
c001fe5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe5e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fe65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe69:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fe70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe74:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fe7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe7f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001fe86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe8a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001fe8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe92:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001fe96:	90                   	nop
c001fe97:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fe98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fe98:	83 ec 0c             	sub    esp,0xc
c001fe9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe9f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001feb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001febb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001febf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fedb:	83 ec 0c             	sub    esp,0xc
c001fede:	68 9d 15 02 c0       	push   0xc002159d
c001fee3:	e8 2d f3 fe ff       	call   c000f215 <Dbg::kprintf(char const*, ...)>
c001fee8:	83 c4 10             	add    esp,0x10
c001feeb:	90                   	nop
c001feec:	83 c4 0c             	add    esp,0xc
c001feef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fef0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fef0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fef4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fef7:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fef8 <PCI::~PCI()>:
c001fef8:	83 ec 0c             	sub    esp,0xc
c001fefb:	ba 2c 35 02 c0       	mov    edx,0xc002352c
c001ff00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff04:	89 10                	mov    DWORD PTR [eax],edx
c001ff06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff0a:	83 ec 0c             	sub    esp,0xc
c001ff0d:	50                   	push   eax
c001ff0e:	e8 c7 ff fe ff       	call   c000feda <Bus::~Bus()>
c001ff13:	83 c4 10             	add    esp,0x10
c001ff16:	90                   	nop
c001ff17:	83 c4 0c             	add    esp,0xc
c001ff1a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001ff1c <PCI::~PCI()>:
c001ff1c:	83 ec 0c             	sub    esp,0xc
c001ff1f:	83 ec 0c             	sub    esp,0xc
c001ff22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff26:	e8 cd ff ff ff       	call   c001fef8 <PCI::~PCI()>
c001ff2b:	83 c4 10             	add    esp,0x10
c001ff2e:	83 ec 08             	sub    esp,0x8
c001ff31:	68 58 01 00 00       	push   0x158
c001ff36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff3a:	e8 b0 f1 fe ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c001ff3f:	83 c4 10             	add    esp,0x10
c001ff42:	83 c4 0c             	add    esp,0xc
c001ff45:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001ff46 <IDE::~IDE()>:
c001ff46:	83 ec 0c             	sub    esp,0xc
c001ff49:	ba 90 37 02 c0       	mov    edx,0xc0023790
c001ff4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff52:	89 10                	mov    DWORD PTR [eax],edx
c001ff54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff58:	83 ec 0c             	sub    esp,0xc
c001ff5b:	50                   	push   eax
c001ff5c:	e8 81 0a ff ff       	call   c00109e2 <HardDiskController::~HardDiskController()>
c001ff61:	83 c4 10             	add    esp,0x10
c001ff64:	90                   	nop
c001ff65:	83 c4 0c             	add    esp,0xc
c001ff68:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001ff6a <IDE::~IDE()>:
c001ff6a:	83 ec 0c             	sub    esp,0xc
c001ff6d:	83 ec 0c             	sub    esp,0xc
c001ff70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff74:	e8 cd ff ff ff       	call   c001ff46 <IDE::~IDE()>
c001ff79:	83 c4 10             	add    esp,0x10
c001ff7c:	83 ec 08             	sub    esp,0x8
c001ff7f:	68 70 02 00 00       	push   0x270
c001ff84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff88:	e8 62 f1 fe ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c001ff8d:	83 c4 10             	add    esp,0x10
c001ff90:	83 c4 0c             	add    esp,0xc
c001ff93:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001ff94 <ATA::~ATA()>:
c001ff94:	83 ec 0c             	sub    esp,0xc
c001ff97:	ba e0 37 02 c0       	mov    edx,0xc00237e0
c001ff9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa0:	89 10                	mov    DWORD PTR [eax],edx
c001ffa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa6:	83 ec 0c             	sub    esp,0xc
c001ffa9:	50                   	push   eax
c001ffaa:	e8 11 0b ff ff       	call   c0010ac0 <PhysicalDisk::~PhysicalDisk()>
c001ffaf:	83 c4 10             	add    esp,0x10
c001ffb2:	90                   	nop
c001ffb3:	83 c4 0c             	add    esp,0xc
c001ffb6:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ffb8 <ATA::~ATA()>:
c001ffb8:	83 ec 0c             	sub    esp,0xc
c001ffbb:	83 ec 0c             	sub    esp,0xc
c001ffbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffc2:	e8 cd ff ff ff       	call   c001ff94 <ATA::~ATA()>
c001ffc7:	83 c4 10             	add    esp,0x10
c001ffca:	83 ec 08             	sub    esp,0x8
c001ffcd:	68 7c 01 00 00       	push   0x17c
c001ffd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffd6:	e8 14 f1 fe ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c001ffdb:	83 c4 10             	add    esp,0x10
c001ffde:	83 c4 0c             	add    esp,0xc
c001ffe1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001ffe2 <ATAPI::~ATAPI()>:
c001ffe2:	83 ec 0c             	sub    esp,0xc
c001ffe5:	ba 4c 38 02 c0       	mov    edx,0xc002384c
c001ffea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffee:	89 10                	mov    DWORD PTR [eax],edx
c001fff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fff4:	83 ec 0c             	sub    esp,0xc
c001fff7:	50                   	push   eax
c001fff8:	e8 c3 0a ff ff       	call   c0010ac0 <PhysicalDisk::~PhysicalDisk()>
c001fffd:	83 c4 10             	add    esp,0x10
c0020000:	90                   	nop
c0020001:	83 c4 0c             	add    esp,0xc
c0020004:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020006 <ATAPI::~ATAPI()>:
c0020006:	83 ec 0c             	sub    esp,0xc
c0020009:	83 ec 0c             	sub    esp,0xc
c002000c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020010:	e8 cd ff ff ff       	call   c001ffe2 <ATAPI::~ATAPI()>
c0020015:	83 c4 10             	add    esp,0x10
c0020018:	83 ec 08             	sub    esp,0x8
c002001b:	68 80 01 00 00       	push   0x180
c0020020:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020024:	e8 c6 f0 fe ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c0020029:	83 c4 10             	add    esp,0x10
c002002c:	83 c4 0c             	add    esp,0xc
c002002f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0020030 <AVX::~AVX()>:
c0020030:	83 ec 0c             	sub    esp,0xc
c0020033:	ba 88 38 02 c0       	mov    edx,0xc0023888
c0020038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002003c:	89 10                	mov    DWORD PTR [eax],edx
c002003e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020042:	83 ec 0c             	sub    esp,0xc
c0020045:	50                   	push   eax
c0020046:	e8 f9 0a ff ff       	call   c0010b44 <FPU::~FPU()>
c002004b:	83 c4 10             	add    esp,0x10
c002004e:	90                   	nop
c002004f:	83 c4 0c             	add    esp,0xc
c0020052:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0020054 <AVX::~AVX()>:
c0020054:	83 ec 0c             	sub    esp,0xc
c0020057:	83 ec 0c             	sub    esp,0xc
c002005a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002005e:	e8 cd ff ff ff       	call   c0020030 <AVX::~AVX()>
c0020063:	83 c4 10             	add    esp,0x10
c0020066:	83 ec 08             	sub    esp,0x8
c0020069:	68 58 01 00 00       	push   0x158
c002006e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020072:	e8 78 f0 fe ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c0020077:	83 c4 10             	add    esp,0x10
c002007a:	83 c4 0c             	add    esp,0xc
c002007d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002007e <MMX::~MMX()>:
c002007e:	83 ec 0c             	sub    esp,0xc
c0020081:	ba c8 38 02 c0       	mov    edx,0xc00238c8
c0020086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002008a:	89 10                	mov    DWORD PTR [eax],edx
c002008c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020090:	83 ec 0c             	sub    esp,0xc
c0020093:	50                   	push   eax
c0020094:	e8 ab 0a ff ff       	call   c0010b44 <FPU::~FPU()>
c0020099:	83 c4 10             	add    esp,0x10
c002009c:	90                   	nop
c002009d:	83 c4 0c             	add    esp,0xc
c00200a0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c00200a2 <MMX::~MMX()>:
c00200a2:	83 ec 0c             	sub    esp,0xc
c00200a5:	83 ec 0c             	sub    esp,0xc
c00200a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200ac:	e8 cd ff ff ff       	call   c002007e <MMX::~MMX()>
c00200b1:	83 c4 10             	add    esp,0x10
c00200b4:	83 ec 08             	sub    esp,0x8
c00200b7:	68 58 01 00 00       	push   0x158
c00200bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200c0:	e8 2a f0 fe ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c00200c5:	83 c4 10             	add    esp,0x10
c00200c8:	83 c4 0c             	add    esp,0xc
c00200cb:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00200cc <SSE::~SSE()>:
c00200cc:	83 ec 0c             	sub    esp,0xc
c00200cf:	ba 08 39 02 c0       	mov    edx,0xc0023908
c00200d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200d8:	89 10                	mov    DWORD PTR [eax],edx
c00200da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200de:	83 ec 0c             	sub    esp,0xc
c00200e1:	50                   	push   eax
c00200e2:	e8 5d 0a ff ff       	call   c0010b44 <FPU::~FPU()>
c00200e7:	83 c4 10             	add    esp,0x10
c00200ea:	90                   	nop
c00200eb:	83 c4 0c             	add    esp,0xc
c00200ee:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00200f0 <SSE::~SSE()>:
c00200f0:	83 ec 0c             	sub    esp,0xc
c00200f3:	83 ec 0c             	sub    esp,0xc
c00200f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200fa:	e8 cd ff ff ff       	call   c00200cc <SSE::~SSE()>
c00200ff:	83 c4 10             	add    esp,0x10
c0020102:	83 ec 08             	sub    esp,0x8
c0020105:	68 58 01 00 00       	push   0x158
c002010a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002010e:	e8 dc ef fe ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c0020113:	83 c4 10             	add    esp,0x10
c0020116:	83 c4 0c             	add    esp,0xc
c0020119:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002011a <x87::~x87()>:
c002011a:	83 ec 0c             	sub    esp,0xc
c002011d:	ba 48 39 02 c0       	mov    edx,0xc0023948
c0020122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020126:	89 10                	mov    DWORD PTR [eax],edx
c0020128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002012c:	83 ec 0c             	sub    esp,0xc
c002012f:	50                   	push   eax
c0020130:	e8 0f 0a ff ff       	call   c0010b44 <FPU::~FPU()>
c0020135:	83 c4 10             	add    esp,0x10
c0020138:	90                   	nop
c0020139:	83 c4 0c             	add    esp,0xc
c002013c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002013e <x87::~x87()>:
c002013e:	83 ec 0c             	sub    esp,0xc
c0020141:	83 ec 0c             	sub    esp,0xc
c0020144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020148:	e8 cd ff ff ff       	call   c002011a <x87::~x87()>
c002014d:	83 c4 10             	add    esp,0x10
c0020150:	83 ec 08             	sub    esp,0x8
c0020153:	68 58 01 00 00       	push   0x158
c0020158:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002015c:	e8 8e ef fe ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c0020161:	83 c4 10             	add    esp,0x10
c0020164:	83 c4 0c             	add    esp,0xc
c0020167:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020168 <IOAPIC::~IOAPIC()>:
c0020168:	83 ec 0c             	sub    esp,0xc
c002016b:	ba a0 3a 02 c0       	mov    edx,0xc0023aa0
c0020170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020174:	89 10                	mov    DWORD PTR [eax],edx
c0020176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002017a:	83 ec 0c             	sub    esp,0xc
c002017d:	50                   	push   eax
c002017e:	e8 4d 03 ff ff       	call   c00104d0 <Device::~Device()>
c0020183:	83 c4 10             	add    esp,0x10
c0020186:	90                   	nop
c0020187:	83 c4 0c             	add    esp,0xc
c002018a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002018c <IOAPIC::~IOAPIC()>:
c002018c:	83 ec 0c             	sub    esp,0xc
c002018f:	83 ec 0c             	sub    esp,0xc
c0020192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020196:	e8 cd ff ff ff       	call   c0020168 <IOAPIC::~IOAPIC()>
c002019b:	83 c4 10             	add    esp,0x10
c002019e:	83 ec 08             	sub    esp,0x8
c00201a1:	68 68 01 00 00       	push   0x168
c00201a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201aa:	e8 40 ef fe ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c00201af:	83 c4 10             	add    esp,0x10
c00201b2:	83 c4 0c             	add    esp,0xc
c00201b5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00201b6 <APIC::~APIC()>:
c00201b6:	83 ec 0c             	sub    esp,0xc
c00201b9:	ba 58 3a 02 c0       	mov    edx,0xc0023a58
c00201be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201c2:	89 10                	mov    DWORD PTR [eax],edx
c00201c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201c8:	83 ec 0c             	sub    esp,0xc
c00201cb:	50                   	push   eax
c00201cc:	e8 3d 0e ff ff       	call   c001100e <InterruptController::~InterruptController()>
c00201d1:	83 c4 10             	add    esp,0x10
c00201d4:	90                   	nop
c00201d5:	83 c4 0c             	add    esp,0xc
c00201d8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00201da <APIC::~APIC()>:
c00201da:	83 ec 0c             	sub    esp,0xc
c00201dd:	83 ec 0c             	sub    esp,0xc
c00201e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201e4:	e8 cd ff ff ff       	call   c00201b6 <APIC::~APIC()>
c00201e9:	83 c4 10             	add    esp,0x10
c00201ec:	83 ec 08             	sub    esp,0x8
c00201ef:	68 58 21 00 00       	push   0x2158
c00201f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201f8:	e8 f2 ee fe ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c00201fd:	83 c4 10             	add    esp,0x10
c0020200:	83 c4 0c             	add    esp,0xc
c0020203:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0020204 <PIC::~PIC()>:
c0020204:	83 ec 0c             	sub    esp,0xc
c0020207:	ba f0 3a 02 c0       	mov    edx,0xc0023af0
c002020c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020210:	89 10                	mov    DWORD PTR [eax],edx
c0020212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020216:	83 ec 0c             	sub    esp,0xc
c0020219:	50                   	push   eax
c002021a:	e8 ef 0d ff ff       	call   c001100e <InterruptController::~InterruptController()>
c002021f:	83 c4 10             	add    esp,0x10
c0020222:	90                   	nop
c0020223:	83 c4 0c             	add    esp,0xc
c0020226:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0020228 <PIC::~PIC()>:
c0020228:	83 ec 0c             	sub    esp,0xc
c002022b:	83 ec 0c             	sub    esp,0xc
c002022e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020232:	e8 cd ff ff ff       	call   c0020204 <PIC::~PIC()>
c0020237:	83 c4 10             	add    esp,0x10
c002023a:	83 ec 08             	sub    esp,0x8
c002023d:	68 58 21 00 00       	push   0x2158
c0020242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020246:	e8 a4 ee fe ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c002024b:	83 c4 10             	add    esp,0x10
c002024e:	83 c4 0c             	add    esp,0xc
c0020251:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020252 <APICTimer::~APICTimer()>:
c0020252:	83 ec 0c             	sub    esp,0xc
c0020255:	ba 44 3b 02 c0       	mov    edx,0xc0023b44
c002025a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002025e:	89 10                	mov    DWORD PTR [eax],edx
c0020260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020264:	83 ec 0c             	sub    esp,0xc
c0020267:	50                   	push   eax
c0020268:	e8 cf 2a ff ff       	call   c0012d3c <Timer::~Timer()>
c002026d:	83 c4 10             	add    esp,0x10
c0020270:	90                   	nop
c0020271:	83 c4 0c             	add    esp,0xc
c0020274:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0020276 <APICTimer::~APICTimer()>:
c0020276:	83 ec 0c             	sub    esp,0xc
c0020279:	83 ec 0c             	sub    esp,0xc
c002027c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020280:	e8 cd ff ff ff       	call   c0020252 <APICTimer::~APICTimer()>
c0020285:	83 c4 10             	add    esp,0x10
c0020288:	83 ec 08             	sub    esp,0x8
c002028b:	68 60 01 00 00       	push   0x160
c0020290:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020294:	e8 56 ee fe ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c0020299:	83 c4 10             	add    esp,0x10
c002029c:	83 c4 0c             	add    esp,0xc
c002029f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00202a0 <PIT::~PIT()>:
c00202a0:	83 ec 0c             	sub    esp,0xc
c00202a3:	ba 94 3b 02 c0       	mov    edx,0xc0023b94
c00202a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ac:	89 10                	mov    DWORD PTR [eax],edx
c00202ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202b2:	83 ec 0c             	sub    esp,0xc
c00202b5:	50                   	push   eax
c00202b6:	e8 81 2a ff ff       	call   c0012d3c <Timer::~Timer()>
c00202bb:	83 c4 10             	add    esp,0x10
c00202be:	90                   	nop
c00202bf:	83 c4 0c             	add    esp,0xc
c00202c2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00202c4 <PIT::~PIT()>:
c00202c4:	83 ec 0c             	sub    esp,0xc
c00202c7:	83 ec 0c             	sub    esp,0xc
c00202ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202ce:	e8 cd ff ff ff       	call   c00202a0 <PIT::~PIT()>
c00202d3:	83 c4 10             	add    esp,0x10
c00202d6:	83 ec 08             	sub    esp,0x8
c00202d9:	68 5c 01 00 00       	push   0x15c
c00202de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202e2:	e8 08 ee fe ff       	call   c000f0ef <operator delete(void*, unsigned long)>
c00202e7:	83 c4 10             	add    esp,0x10
c00202ea:	83 c4 0c             	add    esp,0xc
c00202ed:	c3                   	ret    
